// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2787 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3171 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 100
 809: PUSH
 810: LD_INT 120
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 8
 838: PUSH
 839: LD_INT 9
 841: PUSH
 842: LD_INT 7
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 10
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: EMPTY
 871: LIST
 872: PUSH
 873: LD_EXP 19
 877: UNION
 878: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 879: LD_VAR 0 1
 883: PUSH
 884: LD_INT 2
 886: EQUAL
 887: IFFALSE 899
// baseLevel := 1 else
 889: LD_ADDR_VAR 0 7
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
 897: GO 913
// baseLevel := mpGameSettings [ 1 ] ;
 899: LD_ADDR_VAR 0 7
 903: PUSH
 904: LD_EXP 6
 908: PUSH
 909: LD_INT 1
 911: ARRAY
 912: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 913: LD_ADDR_EXP 24
 917: PUSH
 918: LD_EXP 6
 922: PUSH
 923: LD_INT 2
 925: ARRAY
 926: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 927: LD_ADDR_EXP 25
 931: PUSH
 932: LD_EXP 6
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 941: LD_ADDR_EXP 15
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 4
 953: ARRAY
 954: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 955: LD_ADDR_EXP 27
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 5
 967: ARRAY
 968: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 969: LD_ADDR_VAR 0 5
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 6
 981: ARRAY
 982: PUSH
 983: LD_INT 0
 985: GREATER
 986: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 987: LD_ADDR_VAR 0 6
 991: PUSH
 992: LD_EXP 6
 996: PUSH
 997: LD_INT 7
 999: ARRAY
1000: PUSH
1001: LD_INT 0
1003: GREATER
1004: ST_TO_ADDR
// mpKingArea := 0 ;
1005: LD_ADDR_EXP 34
1009: PUSH
1010: LD_INT 0
1012: ST_TO_ADDR
// mpPoints := 0 ;
1013: LD_ADDR_EXP 35
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpEmissions := 0 ;
1021: LD_ADDR_EXP 37
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// kingArea := 0 ;
1029: LD_ADDR_EXP 1
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingCamArea := 0 ;
1037: LD_ADDR_EXP 2
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1045: LD_EXP 6
1049: PUSH
1050: LD_INT 9
1052: ARRAY
1053: IFFALSE 1185
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1055: LD_ADDR_EXP 36
1059: PUSH
1060: LD_INT 1
1062: PUSH
1063: LD_INT 1
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 1
1080: PUSH
1081: LD_INT 1
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 3
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: LD_INT 12
1102: PUSH
1103: LD_INT 1
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 24
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: LD_INT 12
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 23
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 21
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 42
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 21
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 42
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1185: LD_ADDR_EXP 16
1189: PUSH
1190: LD_EXP 6
1194: PUSH
1195: LD_INT 11
1197: ARRAY
1198: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1199: LD_ADDR_EXP 22
1203: PUSH
1204: LD_EXP 6
1208: PUSH
1209: LD_INT 12
1211: ARRAY
1212: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1213: LD_ADDR_EXP 26
1217: PUSH
1218: LD_EXP 6
1222: PUSH
1223: LD_INT 13
1225: ARRAY
1226: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1227: LD_ADDR_EXP 33
1231: PUSH
1232: LD_EXP 6
1236: PUSH
1237: LD_INT 14
1239: ARRAY
1240: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1241: LD_ADDR_EXP 30
1245: PUSH
1246: LD_EXP 6
1250: PUSH
1251: LD_INT 15
1253: ARRAY
1254: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1255: LD_ADDR_EXP 28
1259: PUSH
1260: LD_EXP 6
1264: PUSH
1265: LD_INT 18
1267: ARRAY
1268: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1269: LD_ADDR_EXP 20
1273: PUSH
1274: LD_EXP 6
1278: PUSH
1279: LD_INT 21
1281: ARRAY
1282: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1283: LD_ADDR_EXP 31
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 2
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 4
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 6
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1314: LD_ADDR_VAR 0 8
1318: PUSH
1319: LD_INT 15
1321: PPUSH
1322: LD_INT 2
1324: PPUSH
1325: CALL 53581 0 2
1329: PUSH
1330: LD_INT 16
1332: PPUSH
1333: LD_INT 1
1335: PPUSH
1336: CALL 53581 0 2
1340: PUSH
1341: LD_INT 17
1343: PPUSH
1344: LD_INT 2
1346: PPUSH
1347: CALL 53581 0 2
1351: PUSH
1352: LD_INT 18
1354: PPUSH
1355: LD_INT 4
1357: PPUSH
1358: CALL 53581 0 2
1362: PUSH
1363: LD_INT 19
1365: PPUSH
1366: LD_INT 4
1368: PPUSH
1369: CALL 53581 0 2
1373: PUSH
1374: LD_INT 20
1376: PPUSH
1377: LD_INT 5
1379: PPUSH
1380: CALL 53581 0 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1393: LD_ADDR_VAR 0 3
1397: PUSH
1398: DOUBLE
1399: LD_INT 1
1401: DEC
1402: ST_TO_ADDR
1403: LD_VAR 0 8
1407: PPUSH
1408: CALL 12896 0 1
1412: PUSH
1413: FOR_TO
1414: IFFALSE 1518
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1416: LD_ADDR_EXP 21
1420: PUSH
1421: LD_EXP 21
1425: PPUSH
1426: LD_VAR 0 3
1430: PPUSH
1431: LD_VAR 0 8
1435: PUSH
1436: LD_VAR 0 3
1440: ARRAY
1441: PUSH
1442: LD_INT 1
1444: ARRAY
1445: PPUSH
1446: LD_VAR 0 8
1450: PUSH
1451: LD_VAR 0 3
1455: ARRAY
1456: PUSH
1457: LD_INT 3
1459: ARRAY
1460: PPUSH
1461: LD_INT 10
1463: PPUSH
1464: CALL_OW 272
1468: PUSH
1469: LD_VAR 0 8
1473: PUSH
1474: LD_VAR 0 3
1478: ARRAY
1479: PUSH
1480: LD_INT 2
1482: ARRAY
1483: PPUSH
1484: LD_VAR 0 8
1488: PUSH
1489: LD_VAR 0 3
1493: ARRAY
1494: PUSH
1495: LD_INT 3
1497: ARRAY
1498: PPUSH
1499: LD_INT 10
1501: PPUSH
1502: CALL_OW 273
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 1
1515: ST_TO_ADDR
1516: GO 1413
1518: POP
1519: POP
// if hasOil then
1520: LD_VAR 0 5
1524: IFFALSE 1635
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1526: LD_ADDR_VAR 0 4
1530: PUSH
1531: LD_EXP 6
1535: PUSH
1536: LD_INT 6
1538: ARRAY
1539: PUSH
1540: LD_INT 2
1542: EQUAL
1543: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1544: LD_ADDR_EXP 12
1548: PUSH
1549: LD_INT 21
1551: PPUSH
1552: LD_VAR 0 4
1556: PPUSH
1557: CALL 53414 0 2
1561: PUSH
1562: LD_INT 26
1564: PPUSH
1565: LD_VAR 0 4
1569: PPUSH
1570: CALL 53414 0 2
1574: PUSH
1575: LD_INT 31
1577: PPUSH
1578: LD_VAR 0 4
1582: PPUSH
1583: CALL 53414 0 2
1587: PUSH
1588: LD_INT 36
1590: PPUSH
1591: LD_VAR 0 4
1595: PPUSH
1596: CALL 53414 0 2
1600: PUSH
1601: LD_INT 41
1603: PPUSH
1604: LD_VAR 0 4
1608: PPUSH
1609: CALL 53414 0 2
1613: PUSH
1614: LD_INT 46
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 53414 0 2
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: ST_TO_ADDR
// end ; if hasSib then
1635: LD_VAR 0 6
1639: IFFALSE 1750
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1641: LD_ADDR_VAR 0 4
1645: PUSH
1646: LD_EXP 6
1650: PUSH
1651: LD_INT 7
1653: ARRAY
1654: PUSH
1655: LD_INT 2
1657: EQUAL
1658: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1659: LD_ADDR_EXP 13
1663: PUSH
1664: LD_INT 22
1666: PPUSH
1667: LD_VAR 0 4
1671: PPUSH
1672: CALL 53414 0 2
1676: PUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_VAR 0 4
1684: PPUSH
1685: CALL 53414 0 2
1689: PUSH
1690: LD_INT 32
1692: PPUSH
1693: LD_VAR 0 4
1697: PPUSH
1698: CALL 53414 0 2
1702: PUSH
1703: LD_INT 37
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL 53414 0 2
1715: PUSH
1716: LD_INT 42
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: CALL 53414 0 2
1728: PUSH
1729: LD_INT 47
1731: PPUSH
1732: LD_VAR 0 4
1736: PPUSH
1737: CALL 53414 0 2
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1750: LD_VAR 0 7
1754: PUSH
1755: LD_INT 1
1757: GREATEREQUAL
1758: IFFALSE 1770
// mpDepots := startPos ;
1760: LD_ADDR_EXP 14
1764: PUSH
1765: LD_VAR 0 8
1769: ST_TO_ADDR
// if baseLevel >= 2 then
1770: LD_VAR 0 7
1774: PUSH
1775: LD_INT 2
1777: GREATEREQUAL
1778: IFFALSE 2093
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1780: LD_ADDR_EXP 17
1784: PUSH
1785: LD_INT 31
1787: PUSH
1788: LD_INT 23
1790: PPUSH
1791: LD_INT 5
1793: PPUSH
1794: CALL 53581 0 2
1798: ADD
1799: PUSH
1800: LD_INT 31
1802: PUSH
1803: LD_INT 24
1805: PPUSH
1806: LD_INT 5
1808: PPUSH
1809: CALL 53581 0 2
1813: ADD
1814: PUSH
1815: LD_INT 4
1817: PUSH
1818: LD_INT 25
1820: PPUSH
1821: LD_INT 5
1823: PPUSH
1824: CALL 53581 0 2
1828: ADD
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 31
1837: PUSH
1838: LD_INT 28
1840: PPUSH
1841: LD_INT 4
1843: PPUSH
1844: CALL 53581 0 2
1848: ADD
1849: PUSH
1850: LD_INT 31
1852: PUSH
1853: LD_INT 29
1855: PPUSH
1856: LD_INT 4
1858: PPUSH
1859: CALL 53581 0 2
1863: ADD
1864: PUSH
1865: LD_INT 4
1867: PUSH
1868: LD_INT 30
1870: PPUSH
1871: LD_INT 4
1873: PPUSH
1874: CALL 53581 0 2
1878: ADD
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 31
1887: PUSH
1888: LD_INT 33
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL 53581 0 2
1898: ADD
1899: PUSH
1900: LD_INT 31
1902: PUSH
1903: LD_INT 34
1905: PPUSH
1906: LD_INT 5
1908: PPUSH
1909: CALL 53581 0 2
1913: ADD
1914: PUSH
1915: LD_INT 4
1917: PUSH
1918: LD_INT 35
1920: PPUSH
1921: LD_INT 0
1923: PPUSH
1924: CALL 53581 0 2
1928: ADD
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 31
1937: PUSH
1938: LD_INT 38
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL 53581 0 2
1948: ADD
1949: PUSH
1950: LD_INT 31
1952: PUSH
1953: LD_INT 39
1955: PPUSH
1956: LD_INT 0
1958: PPUSH
1959: CALL 53581 0 2
1963: ADD
1964: PUSH
1965: LD_INT 4
1967: PUSH
1968: LD_INT 40
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL 53581 0 2
1978: ADD
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 31
1987: PUSH
1988: LD_INT 43
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: CALL 53581 0 2
1998: ADD
1999: PUSH
2000: LD_INT 31
2002: PUSH
2003: LD_INT 44
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL 53581 0 2
2013: ADD
2014: PUSH
2015: LD_INT 4
2017: PUSH
2018: LD_INT 45
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL 53581 0 2
2028: ADD
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 31
2037: PUSH
2038: LD_INT 49
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: CALL 53581 0 2
2048: ADD
2049: PUSH
2050: LD_INT 31
2052: PUSH
2053: LD_INT 50
2055: PPUSH
2056: LD_INT 2
2058: PPUSH
2059: CALL 53581 0 2
2063: ADD
2064: PUSH
2065: LD_INT 4
2067: PUSH
2068: LD_INT 48
2070: PPUSH
2071: LD_INT 2
2073: PPUSH
2074: CALL 53581 0 2
2078: ADD
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: ST_TO_ADDR
// end ; end ;
2093: LD_VAR 0 2
2097: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2098: GO 2100
2100: DISABLE
2101: LD_INT 0
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
// begin if not mpShipments then
2111: LD_EXP 27
2115: NOT
2116: IFFALSE 2120
// exit ;
2118: GO 2641
// case mpShipments of 1 :
2120: LD_EXP 27
2124: PUSH
2125: LD_INT 1
2127: DOUBLE
2128: EQUAL
2129: IFTRUE 2133
2131: GO 2168
2133: POP
// begin time := 0 0$30 ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: LD_INT 1050
2141: ST_TO_ADDR
// normalTime := 0 0$30 ;
2142: LD_ADDR_VAR 0 6
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// maxTime := 1 1$20 ;
2150: LD_ADDR_VAR 0 8
2154: PUSH
2155: LD_INT 2800
2157: ST_TO_ADDR
// delayTime := 0 0$5 ;
2158: LD_ADDR_VAR 0 7
2162: PUSH
2163: LD_INT 175
2165: ST_TO_ADDR
// end ; 2 :
2166: GO 2298
2168: LD_INT 2
2170: DOUBLE
2171: EQUAL
2172: IFTRUE 2176
2174: GO 2211
2176: POP
// begin time := 0 0$25 ;
2177: LD_ADDR_VAR 0 4
2181: PUSH
2182: LD_INT 875
2184: ST_TO_ADDR
// normalTime := 0 0$25 ;
2185: LD_ADDR_VAR 0 6
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// maxTime := 1 1$10 ;
2193: LD_ADDR_VAR 0 8
2197: PUSH
2198: LD_INT 2450
2200: ST_TO_ADDR
// delayTime := 0 0$4 ;
2201: LD_ADDR_VAR 0 7
2205: PUSH
2206: LD_INT 140
2208: ST_TO_ADDR
// end ; 3 :
2209: GO 2298
2211: LD_INT 3
2213: DOUBLE
2214: EQUAL
2215: IFTRUE 2219
2217: GO 2254
2219: POP
// begin time := 0 0$20 ;
2220: LD_ADDR_VAR 0 4
2224: PUSH
2225: LD_INT 700
2227: ST_TO_ADDR
// normalTime := 0 0$20 ;
2228: LD_ADDR_VAR 0 6
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// maxTime := 1 1$00 ;
2236: LD_ADDR_VAR 0 8
2240: PUSH
2241: LD_INT 2100
2243: ST_TO_ADDR
// delayTime := 0 0$3 ;
2244: LD_ADDR_VAR 0 7
2248: PUSH
2249: LD_INT 105
2251: ST_TO_ADDR
// end ; 4 :
2252: GO 2298
2254: LD_INT 4
2256: DOUBLE
2257: EQUAL
2258: IFTRUE 2262
2260: GO 2297
2262: POP
// begin time := 0 0$15 ;
2263: LD_ADDR_VAR 0 4
2267: PUSH
2268: LD_INT 525
2270: ST_TO_ADDR
// normalTime := 0 0$15 ;
2271: LD_ADDR_VAR 0 6
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// maxTime := 0 0$55 ;
2279: LD_ADDR_VAR 0 8
2283: PUSH
2284: LD_INT 1925
2286: ST_TO_ADDR
// delayTime := 0 0$2 ;
2287: LD_ADDR_VAR 0 7
2291: PUSH
2292: LD_INT 70
2294: ST_TO_ADDR
// end ; end ;
2295: GO 2298
2297: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2298: LD_ADDR_VAR 0 3
2302: PUSH
2303: LD_INT 8
2305: PUSH
2306: LD_INT 9
2308: PUSH
2309: LD_INT 7
2311: PUSH
2312: LD_INT 12
2314: PUSH
2315: LD_INT 11
2317: PUSH
2318: LD_INT 10
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: ST_TO_ADDR
// areas := [ ] ;
2329: LD_ADDR_VAR 0 5
2333: PUSH
2334: EMPTY
2335: ST_TO_ADDR
// for i := 1 to 8 do
2336: LD_ADDR_VAR 0 1
2340: PUSH
2341: DOUBLE
2342: LD_INT 1
2344: DEC
2345: ST_TO_ADDR
2346: LD_INT 8
2348: PUSH
2349: FOR_TO
2350: IFFALSE 2397
// begin if not mpSidePositions [ i ] then
2352: LD_EXP 7
2356: PUSH
2357: LD_VAR 0 1
2361: ARRAY
2362: NOT
2363: IFFALSE 2367
// continue ;
2365: GO 2349
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2367: LD_ADDR_VAR 0 5
2371: PUSH
2372: LD_VAR 0 5
2376: PUSH
2377: LD_VAR 0 3
2381: PUSH
2382: LD_EXP 7
2386: PUSH
2387: LD_VAR 0 1
2391: ARRAY
2392: ARRAY
2393: ADD
2394: ST_TO_ADDR
// end ;
2395: GO 2349
2397: POP
2398: POP
// areas := areas diff 0 ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_INT 0
2411: DIFF
2412: ST_TO_ADDR
// x := 1 ;
2413: LD_ADDR_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// repeat wait ( time ) ;
2421: LD_VAR 0 4
2425: PPUSH
2426: CALL_OW 67
// x := Inc ( x ) ;
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: LD_VAR 0 2
2439: PPUSH
2440: CALL 50235 0 1
2444: ST_TO_ADDR
// if x > 5 then
2445: LD_VAR 0 2
2449: PUSH
2450: LD_INT 5
2452: GREATER
2453: IFFALSE 2463
// x := 1 ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// for i in areas do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: LD_VAR 0 5
2472: PUSH
2473: FOR_IN
2474: IFFALSE 2513
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2476: LD_VAR 0 1
2480: PPUSH
2481: LD_INT 1
2483: PPUSH
2484: CALL_OW 287
2488: PUSH
2489: LD_INT 20
2491: LESS
2492: IFFALSE 2511
// begin CreateCratesArea ( x , i , true ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_VAR 0 1
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 55
// end ; end ;
2511: GO 2473
2513: POP
2514: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) = 0 then
2515: LD_INT 14
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 287
2525: PUSH
2526: LD_INT 0
2528: EQUAL
2529: IFFALSE 2568
// begin for i := 1 to 3 do
2531: LD_ADDR_VAR 0 1
2535: PUSH
2536: DOUBLE
2537: LD_INT 1
2539: DEC
2540: ST_TO_ADDR
2541: LD_INT 3
2543: PUSH
2544: FOR_TO
2545: IFFALSE 2564
// CreateCratesArea ( x , MZBaseArea , true ) ;
2547: LD_VAR 0 2
2551: PPUSH
2552: LD_INT 14
2554: PPUSH
2555: LD_INT 1
2557: PPUSH
2558: CALL_OW 55
2562: GO 2544
2564: POP
2565: POP
// end else
2566: GO 2599
// if GetResourceArea ( MZBaseArea , mat_cans ) < 120 then
2568: LD_INT 14
2570: PPUSH
2571: LD_INT 1
2573: PPUSH
2574: CALL_OW 287
2578: PUSH
2579: LD_INT 120
2581: LESS
2582: IFFALSE 2599
// CreateCratesArea ( x , MZBaseArea , true ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_INT 14
2591: PPUSH
2592: LD_INT 1
2594: PPUSH
2595: CALL_OW 55
// time := time + delayTime ;
2599: LD_ADDR_VAR 0 4
2603: PUSH
2604: LD_VAR 0 4
2608: PUSH
2609: LD_VAR 0 7
2613: PLUS
2614: ST_TO_ADDR
// if time > maxTime then
2615: LD_VAR 0 4
2619: PUSH
2620: LD_VAR 0 8
2624: GREATER
2625: IFFALSE 2637
// time := normalTime ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: LD_VAR 0 6
2636: ST_TO_ADDR
// until false ;
2637: LD_INT 0
2639: IFFALSE 2421
// end ; end_of_file
2641: PPOPN 8
2643: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL 54379 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: CALL 8073 0 1
// end ;
2662: PPOPN 1
2664: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL 54396 0 1
// end ;
2674: PPOPN 1
2676: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL 8780 0 1
2686: PPOPN 1
2688: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: LD_VAR 0 2
2698: PPUSH
2699: CALL 54437 0 2
2703: PPOPN 2
2705: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2706: LD_VAR 0 1
2710: PPUSH
2711: LD_VAR 0 2
2715: PPUSH
2716: LD_VAR 0 3
2720: PPUSH
2721: CALL 8833 0 3
2725: PPOPN 3
2727: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2728: LD_VAR 0 1
2732: PPUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: LD_VAR 0 3
2742: PPUSH
2743: LD_VAR 0 4
2747: PPUSH
2748: LD_VAR 0 5
2752: PPUSH
2753: CALL 9472 0 5
2757: PPOPN 5
2759: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2760: LD_VAR 0 1
2764: PPUSH
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_VAR 0 3
2774: PPUSH
2775: LD_VAR 0 4
2779: PPUSH
2780: CALL 9575 0 4
2784: PPOPN 4
2786: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2787: LD_INT 0
2789: PPUSH
2790: PPUSH
// disable ( mpActive ) ;
2791: LD_INT 100
2793: DISABLE_MARKED
// disable ( mpWin ) ;
2794: LD_INT 101
2796: DISABLE_MARKED
// disable ( mpLose ) ;
2797: LD_INT 102
2799: DISABLE_MARKED
// mpGameType := 0 ;
2800: LD_ADDR_EXP 3
2804: PUSH
2805: LD_INT 0
2807: ST_TO_ADDR
// mpGameSettings := [ ] ;
2808: LD_ADDR_EXP 6
2812: PUSH
2813: EMPTY
2814: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2815: LD_ADDR_EXP 4
2819: PUSH
2820: EMPTY
2821: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2822: LD_ADDR_EXP 5
2826: PUSH
2827: EMPTY
2828: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2829: LD_ADDR_EXP 29
2833: PUSH
2834: LD_INT 2
2836: PUSH
2837: LD_INT 2
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2844: LD_ADDR_EXP 12
2848: PUSH
2849: EMPTY
2850: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2851: LD_ADDR_EXP 13
2855: PUSH
2856: EMPTY
2857: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2858: LD_ADDR_EXP 41
2862: PUSH
2863: EMPTY
2864: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2865: LD_ADDR_EXP 42
2869: PUSH
2870: EMPTY
2871: ST_TO_ADDR
// mpDepots := [ ] ;
2872: LD_ADDR_EXP 14
2876: PUSH
2877: EMPTY
2878: ST_TO_ADDR
// mpBuildings := [ ] ;
2879: LD_ADDR_EXP 17
2883: PUSH
2884: EMPTY
2885: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2886: LD_ADDR_EXP 18
2890: PUSH
2891: EMPTY
2892: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2893: LD_ADDR_EXP 19
2897: PUSH
2898: EMPTY
2899: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2900: LD_ADDR_EXP 20
2904: PUSH
2905: EMPTY
2906: ST_TO_ADDR
// mpStartingResources := [ ] ;
2907: LD_ADDR_EXP 15
2911: PUSH
2912: EMPTY
2913: ST_TO_ADDR
// mpStartPos := [ ] ;
2914: LD_ADDR_EXP 21
2918: PUSH
2919: EMPTY
2920: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2921: LD_ADDR_EXP 22
2925: PUSH
2926: LD_INT 1
2928: NEG
2929: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2930: LD_ADDR_EXP 23
2934: PUSH
2935: EMPTY
2936: ST_TO_ADDR
// mpApemans := [ ] ;
2937: LD_ADDR_EXP 30
2941: PUSH
2942: EMPTY
2943: ST_TO_ADDR
// mpApemansArea := [ ] ;
2944: LD_ADDR_EXP 31
2948: PUSH
2949: EMPTY
2950: ST_TO_ADDR
// mpRespawn := [ ] ;
2951: LD_ADDR_EXP 33
2955: PUSH
2956: EMPTY
2957: ST_TO_ADDR
// mpKingArea := 0 ;
2958: LD_ADDR_EXP 34
2962: PUSH
2963: LD_INT 0
2965: ST_TO_ADDR
// mpPoints := [ ] ;
2966: LD_ADDR_EXP 35
2970: PUSH
2971: EMPTY
2972: ST_TO_ADDR
// mpVehicles := 0 ;
2973: LD_ADDR_EXP 36
2977: PUSH
2978: LD_INT 0
2980: ST_TO_ADDR
// mpShipments := 0 ;
2981: LD_ADDR_EXP 27
2985: PUSH
2986: LD_INT 0
2988: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2989: LD_ADDR_EXP 40
2993: PUSH
2994: EMPTY
2995: PUSH
2996: EMPTY
2997: PUSH
2998: EMPTY
2999: PUSH
3000: EMPTY
3001: PUSH
3002: EMPTY
3003: PUSH
3004: EMPTY
3005: PUSH
3006: EMPTY
3007: PUSH
3008: EMPTY
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3020: LD_ADDR_EXP 32
3024: PUSH
3025: EMPTY
3026: PUSH
3027: EMPTY
3028: PUSH
3029: EMPTY
3030: PUSH
3031: EMPTY
3032: PUSH
3033: EMPTY
3034: PUSH
3035: EMPTY
3036: PUSH
3037: EMPTY
3038: PUSH
3039: EMPTY
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: LIST
3050: ST_TO_ADDR
// mpEmissions := 0 ;
3051: LD_ADDR_EXP 37
3055: PUSH
3056: LD_INT 0
3058: ST_TO_ADDR
// mpTeleports := 0 ;
3059: LD_ADDR_EXP 43
3063: PUSH
3064: LD_INT 0
3066: ST_TO_ADDR
// mpArtifacts := 0 ;
3067: LD_ADDR_EXP 44
3071: PUSH
3072: LD_INT 0
3074: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3075: LD_ADDR_EXP 45
3079: PUSH
3080: LD_INT 0
3082: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3083: LD_ADDR_EXP 25
3087: PUSH
3088: LD_INT 3
3090: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3091: LD_ADDR_EXP 24
3095: PUSH
3096: LD_INT 15
3098: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3099: LD_ADDR_EXP 38
3103: PUSH
3104: LD_INT 0
3106: ST_TO_ADDR
// mpGameActive := false ;
3107: LD_ADDR_EXP 39
3111: PUSH
3112: LD_INT 0
3114: ST_TO_ADDR
// mpBlockRespThread := false ;
3115: LD_ADDR_EXP 46
3119: PUSH
3120: LD_INT 0
3122: ST_TO_ADDR
// for i := 1 to 32 do
3123: LD_ADDR_VAR 0 2
3127: PUSH
3128: DOUBLE
3129: LD_INT 1
3131: DEC
3132: ST_TO_ADDR
3133: LD_INT 32
3135: PUSH
3136: FOR_TO
3137: IFFALSE 3164
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3139: LD_ADDR_EXP 6
3143: PUSH
3144: LD_EXP 6
3148: PPUSH
3149: LD_VAR 0 2
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 1
3161: ST_TO_ADDR
3162: GO 3136
3164: POP
3165: POP
// end ;
3166: LD_VAR 0 1
3170: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3171: LD_INT 0
3173: PPUSH
3174: PPUSH
3175: PPUSH
3176: PPUSH
3177: PPUSH
3178: PPUSH
3179: PPUSH
3180: PPUSH
3181: PPUSH
3182: PPUSH
3183: PPUSH
3184: PPUSH
3185: PPUSH
3186: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
3187: LD_ADDR_VAR 0 14
3191: PUSH
3192: LD_INT 1
3194: PUSH
3195: LD_INT 2
3197: PUSH
3198: LD_INT 3
3200: PUSH
3201: LD_INT 5
3203: PUSH
3204: LD_INT 6
3206: PUSH
3207: LD_INT 7
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: ST_TO_ADDR
// for i in gameTypes do
3218: LD_ADDR_VAR 0 2
3222: PUSH
3223: LD_VAR 0 14
3227: PUSH
3228: FOR_IN
3229: IFFALSE 3238
// disable ( i ) ;
3231: LD_VAR 0 2
3235: DISABLE_MARKED
3236: GO 3228
3238: POP
3239: POP
// if Multiplayer then
3240: LD_OWVAR 4
3244: IFFALSE 3428
// begin mpGameType := mp_game_type ;
3246: LD_ADDR_EXP 3
3250: PUSH
3251: LD_OWVAR 6
3255: ST_TO_ADDR
// your_side := mp_player_side ;
3256: LD_ADDR_OWVAR 2
3260: PUSH
3261: LD_OWVAR 7
3265: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3266: LD_ADDR_EXP 7
3270: PUSH
3271: LD_OWVAR 17
3275: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3276: LD_ADDR_EXP 8
3280: PUSH
3281: LD_OWVAR 15
3285: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3286: LD_ADDR_EXP 9
3290: PUSH
3291: LD_OWVAR 16
3295: ST_TO_ADDR
// mpTeams := mp_teams ;
3296: LD_ADDR_EXP 10
3300: PUSH
3301: LD_OWVAR 12
3305: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3306: LD_ADDR_VAR 0 2
3310: PUSH
3311: DOUBLE
3312: LD_INT 1
3314: DEC
3315: ST_TO_ADDR
3316: LD_EXP 4
3320: PPUSH
3321: CALL 12896 0 1
3325: PUSH
3326: FOR_TO
3327: IFFALSE 3403
// begin setting := mpGameSettingsKeys [ i ] ;
3329: LD_ADDR_VAR 0 12
3333: PUSH
3334: LD_EXP 4
3338: PUSH
3339: LD_VAR 0 2
3343: ARRAY
3344: ST_TO_ADDR
// if setting then
3345: LD_VAR 0 12
3349: IFFALSE 3401
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3351: LD_ADDR_EXP 6
3355: PUSH
3356: LD_EXP 6
3360: PPUSH
3361: LD_VAR 0 2
3365: PPUSH
3366: LD_EXP 5
3370: PUSH
3371: LD_VAR 0 2
3375: ARRAY
3376: PUSH
3377: LD_VAR 0 2
3381: PUSH
3382: LD_INT 1
3384: MINUS
3385: PPUSH
3386: CALL_OW 426
3390: PUSH
3391: LD_INT 1
3393: PLUS
3394: ARRAY
3395: PPUSH
3396: CALL_OW 1
3400: ST_TO_ADDR
// end ;
3401: GO 3326
3403: POP
3404: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3405: LD_ADDR_EXP 11
3409: PUSH
3410: LD_EXP 8
3414: PUSH
3415: LD_INT 0
3417: PUSH
3418: EMPTY
3419: LIST
3420: DIFF
3421: PUSH
3422: LD_INT 1
3424: GREATER
3425: ST_TO_ADDR
// end else
3426: GO 3428
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3428: LD_EXP 3
3432: PPUSH
3433: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3437: LD_EXP 18
3441: PPUSH
3442: CALL 12896 0 1
3446: IFFALSE 3477
// begin for i in mpMarkedAreas do
3448: LD_ADDR_VAR 0 2
3452: PUSH
3453: LD_EXP 18
3457: PUSH
3458: FOR_IN
3459: IFFALSE 3475
// SetAreaMapShow ( i , 0 ) ;
3461: LD_VAR 0 2
3465: PPUSH
3466: LD_INT 0
3468: PPUSH
3469: CALL_OW 424
3473: GO 3458
3475: POP
3476: POP
// end ; for i := 1 to 8 do
3477: LD_ADDR_VAR 0 2
3481: PUSH
3482: DOUBLE
3483: LD_INT 1
3485: DEC
3486: ST_TO_ADDR
3487: LD_INT 8
3489: PUSH
3490: FOR_TO
3491: IFFALSE 4926
// begin if not mpSidePositions [ i ] then
3493: LD_EXP 7
3497: PUSH
3498: LD_VAR 0 2
3502: ARRAY
3503: NOT
3504: IFFALSE 3508
// continue ;
3506: GO 3490
// side := i ;
3508: LD_ADDR_VAR 0 7
3512: PUSH
3513: LD_VAR 0 2
3517: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3518: LD_ADDR_VAR 0 9
3522: PUSH
3523: LD_EXP 9
3527: PUSH
3528: LD_VAR 0 2
3532: ARRAY
3533: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3534: LD_ADDR_VAR 0 8
3538: PUSH
3539: LD_EXP 7
3543: PUSH
3544: LD_VAR 0 2
3548: ARRAY
3549: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3550: LD_EXP 12
3554: PPUSH
3555: CALL 12896 0 1
3559: IFFALSE 3636
// begin for j in mpOilDeposits [ pos ] do
3561: LD_ADDR_VAR 0 3
3565: PUSH
3566: LD_EXP 12
3570: PUSH
3571: LD_VAR 0 8
3575: ARRAY
3576: PUSH
3577: FOR_IN
3578: IFFALSE 3634
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3580: LD_VAR 0 3
3584: PUSH
3585: LD_INT 1
3587: ARRAY
3588: PPUSH
3589: LD_VAR 0 3
3593: PUSH
3594: LD_INT 2
3596: ARRAY
3597: PPUSH
3598: LD_INT 2
3600: PPUSH
3601: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3605: LD_VAR 0 3
3609: PUSH
3610: LD_INT 1
3612: ARRAY
3613: PPUSH
3614: LD_VAR 0 3
3618: PUSH
3619: LD_INT 2
3621: ARRAY
3622: PPUSH
3623: LD_VAR 0 7
3627: PPUSH
3628: CALL_OW 441
// end ;
3632: GO 3577
3634: POP
3635: POP
// end ; if Count ( mpSibDeposits ) then
3636: LD_EXP 13
3640: PPUSH
3641: CALL 12896 0 1
3645: IFFALSE 3722
// begin for j in mpSibDeposits [ pos ] do
3647: LD_ADDR_VAR 0 3
3651: PUSH
3652: LD_EXP 13
3656: PUSH
3657: LD_VAR 0 8
3661: ARRAY
3662: PUSH
3663: FOR_IN
3664: IFFALSE 3720
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3666: LD_VAR 0 3
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: PPUSH
3675: LD_VAR 0 3
3679: PUSH
3680: LD_INT 2
3682: ARRAY
3683: PPUSH
3684: LD_INT 3
3686: PPUSH
3687: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3691: LD_VAR 0 3
3695: PUSH
3696: LD_INT 1
3698: ARRAY
3699: PPUSH
3700: LD_VAR 0 3
3704: PUSH
3705: LD_INT 2
3707: ARRAY
3708: PPUSH
3709: LD_VAR 0 7
3713: PPUSH
3714: CALL_OW 441
// end ;
3718: GO 3663
3720: POP
3721: POP
// end ; InitBc ;
3722: CALL_OW 21
// InitUc ;
3726: CALL_OW 18
// uc_side := side ;
3730: LD_ADDR_OWVAR 20
3734: PUSH
3735: LD_VAR 0 7
3739: ST_TO_ADDR
// uc_nation := nation ;
3740: LD_ADDR_OWVAR 21
3744: PUSH
3745: LD_VAR 0 9
3749: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3750: LD_EXP 22
3754: PUSH
3755: LD_INT 1
3757: NEG
3758: GREATER
3759: IFFALSE 3918
// begin x := mpStartPos [ pos ] [ 1 ] ;
3761: LD_ADDR_VAR 0 5
3765: PUSH
3766: LD_EXP 21
3770: PUSH
3771: LD_VAR 0 8
3775: ARRAY
3776: PUSH
3777: LD_INT 1
3779: ARRAY
3780: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3781: LD_ADDR_VAR 0 6
3785: PUSH
3786: LD_EXP 21
3790: PUSH
3791: LD_VAR 0 8
3795: ARRAY
3796: PUSH
3797: LD_INT 2
3799: ARRAY
3800: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3801: LD_VAR 0 5
3805: PPUSH
3806: LD_VAR 0 6
3810: PPUSH
3811: LD_INT 12
3813: PPUSH
3814: LD_INT 2
3816: PPUSH
3817: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3821: LD_ADDR_EXP 23
3825: PUSH
3826: LD_EXP 23
3830: PPUSH
3831: LD_VAR 0 7
3835: PPUSH
3836: LD_VAR 0 7
3840: PPUSH
3841: LD_VAR 0 5
3845: PPUSH
3846: LD_VAR 0 6
3850: PPUSH
3851: LD_INT 1
3853: PUSH
3854: LD_INT 100
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 70
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: LD_INT 3
3873: PUSH
3874: LD_INT 40
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: PUSH
3881: LD_INT 10
3883: PUSH
3884: LD_INT 25
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: PUSH
3891: LD_INT 20
3893: PUSH
3894: LD_INT 100
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: PPUSH
3908: CALL_OW 418
3912: PPUSH
3913: CALL_OW 1
3917: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3918: LD_EXP 14
3922: PPUSH
3923: CALL 12896 0 1
3927: IFFALSE 4122
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
3929: LD_EXP 3
3933: PUSH
3934: LD_INT 2
3936: PUSH
3937: LD_INT 6
3939: PUSH
3940: LD_INT 7
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: IN
3948: IFFALSE 3968
// begin bc_level := 10 ;
3950: LD_ADDR_OWVAR 43
3954: PUSH
3955: LD_INT 10
3957: ST_TO_ADDR
// bc_type := b_warehouse ;
3958: LD_ADDR_OWVAR 42
3962: PUSH
3963: LD_INT 1
3965: ST_TO_ADDR
// end else
3966: GO 3984
// begin bc_level := 0 ;
3968: LD_ADDR_OWVAR 43
3972: PUSH
3973: LD_INT 0
3975: ST_TO_ADDR
// bc_type := b_depot ;
3976: LD_ADDR_OWVAR 42
3980: PUSH
3981: LD_INT 0
3983: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3984: LD_ADDR_VAR 0 4
3988: PUSH
3989: LD_EXP 14
3993: PUSH
3994: LD_VAR 0 8
3998: ARRAY
3999: PUSH
4000: LD_INT 1
4002: ARRAY
4003: PPUSH
4004: LD_EXP 14
4008: PUSH
4009: LD_VAR 0 8
4013: ARRAY
4014: PUSH
4015: LD_INT 2
4017: ARRAY
4018: PPUSH
4019: LD_EXP 14
4023: PUSH
4024: LD_VAR 0 8
4028: ARRAY
4029: PUSH
4030: LD_INT 3
4032: ARRAY
4033: PPUSH
4034: CALL_OW 47
4038: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4039: LD_VAR 0 4
4043: PPUSH
4044: LD_STRING @
4046: PUSH
4047: LD_VAR 0 7
4051: STR
4052: PPUSH
4053: CALL_OW 500
// if Count ( mpStartingResources ) then
4057: LD_EXP 15
4061: PPUSH
4062: CALL 12896 0 1
4066: IFFALSE 4120
// begin for j := 1 to mpStartingResources do
4068: LD_ADDR_VAR 0 3
4072: PUSH
4073: DOUBLE
4074: LD_INT 1
4076: DEC
4077: ST_TO_ADDR
4078: LD_EXP 15
4082: PUSH
4083: FOR_TO
4084: IFFALSE 4118
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4086: LD_VAR 0 4
4090: PPUSH
4091: CALL_OW 274
4095: PPUSH
4096: LD_VAR 0 3
4100: PPUSH
4101: LD_EXP 15
4105: PUSH
4106: LD_VAR 0 3
4110: ARRAY
4111: PPUSH
4112: CALL_OW 277
4116: GO 4083
4118: POP
4119: POP
// end ; end else
4120: GO 4329
// if Count ( mpStartingResources ) then
4122: LD_EXP 15
4126: PPUSH
4127: CALL 12896 0 1
4131: IFFALSE 4329
// begin x := mpStartPos [ pos ] [ 1 ] ;
4133: LD_ADDR_VAR 0 5
4137: PUSH
4138: LD_EXP 21
4142: PUSH
4143: LD_VAR 0 8
4147: ARRAY
4148: PUSH
4149: LD_INT 1
4151: ARRAY
4152: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4153: LD_ADDR_VAR 0 6
4157: PUSH
4158: LD_EXP 21
4162: PUSH
4163: LD_VAR 0 8
4167: ARRAY
4168: PUSH
4169: LD_INT 2
4171: ARRAY
4172: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: DOUBLE
4179: LD_INT 1
4181: DEC
4182: ST_TO_ADDR
4183: LD_EXP 15
4187: PUSH
4188: FOR_TO
4189: IFFALSE 4327
// begin resources := mpStartingResources [ j ] ;
4191: LD_ADDR_VAR 0 13
4195: PUSH
4196: LD_EXP 15
4200: PUSH
4201: LD_VAR 0 3
4205: ARRAY
4206: ST_TO_ADDR
// if resources = 0 then
4207: LD_VAR 0 13
4211: PUSH
4212: LD_INT 0
4214: EQUAL
4215: IFFALSE 4219
// continue ;
4217: GO 4188
// repeat if resources >= 50 then
4219: LD_VAR 0 13
4223: PUSH
4224: LD_INT 50
4226: GREATEREQUAL
4227: IFFALSE 4273
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4229: LD_VAR 0 3
4233: PPUSH
4234: LD_INT 5
4236: PPUSH
4237: LD_VAR 0 5
4241: PPUSH
4242: LD_VAR 0 6
4246: PPUSH
4247: LD_INT 6
4249: PPUSH
4250: LD_INT 0
4252: PPUSH
4253: CALL_OW 60
// resources := resources - 50 ;
4257: LD_ADDR_VAR 0 13
4261: PUSH
4262: LD_VAR 0 13
4266: PUSH
4267: LD_INT 50
4269: MINUS
4270: ST_TO_ADDR
// end else
4271: GO 4315
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4273: LD_VAR 0 3
4277: PPUSH
4278: LD_VAR 0 13
4282: PUSH
4283: LD_INT 10
4285: DIV
4286: PPUSH
4287: LD_VAR 0 5
4291: PPUSH
4292: LD_VAR 0 6
4296: PPUSH
4297: LD_INT 6
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 60
// resources := 0 ;
4307: LD_ADDR_VAR 0 13
4311: PUSH
4312: LD_INT 0
4314: ST_TO_ADDR
// end ; until resources <= 0 ;
4315: LD_VAR 0 13
4319: PUSH
4320: LD_INT 0
4322: LESSEQUAL
4323: IFFALSE 4219
// end ;
4325: GO 4188
4327: POP
4328: POP
// end ; if Count ( mpBuildings ) then
4329: LD_EXP 17
4333: PPUSH
4334: CALL 12896 0 1
4338: IFFALSE 4416
// begin for j in mpBuildings [ pos ] do
4340: LD_ADDR_VAR 0 3
4344: PUSH
4345: LD_EXP 17
4349: PUSH
4350: LD_VAR 0 8
4354: ARRAY
4355: PUSH
4356: FOR_IN
4357: IFFALSE 4414
// begin bc_level := 0 ;
4359: LD_ADDR_OWVAR 43
4363: PUSH
4364: LD_INT 0
4366: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4367: LD_ADDR_OWVAR 42
4371: PUSH
4372: LD_VAR 0 3
4376: PUSH
4377: LD_INT 1
4379: ARRAY
4380: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4381: LD_VAR 0 3
4385: PUSH
4386: LD_INT 2
4388: ARRAY
4389: PPUSH
4390: LD_VAR 0 3
4394: PUSH
4395: LD_INT 3
4397: ARRAY
4398: PPUSH
4399: LD_VAR 0 3
4403: PUSH
4404: LD_INT 4
4406: ARRAY
4407: PPUSH
4408: CALL_OW 47
// end ;
4412: GO 4356
4414: POP
4415: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4416: LD_EXP 26
4420: IFFALSE 4440
4422: PUSH
4423: LD_INT 20
4425: PPUSH
4426: LD_VAR 0 7
4430: PPUSH
4431: CALL_OW 321
4435: PUSH
4436: LD_INT 1
4438: EQUAL
4439: AND
4440: IFFALSE 4457
// SetTech ( tech_SibDet , side , state_researched ) ;
4442: LD_INT 20
4444: PPUSH
4445: LD_VAR 0 7
4449: PPUSH
4450: LD_INT 2
4452: PPUSH
4453: CALL_OW 322
// if not mpArtifacts then
4457: LD_EXP 44
4461: NOT
4462: IFFALSE 4479
// SetTech ( tech_artifact , side , state_disabled ) ;
4464: LD_INT 24
4466: PPUSH
4467: LD_VAR 0 7
4471: PPUSH
4472: LD_INT 0
4474: PPUSH
4475: CALL_OW 322
// if mpSibBomb = 1 then
4479: LD_EXP 28
4483: PUSH
4484: LD_INT 1
4486: EQUAL
4487: IFFALSE 4506
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4489: LD_INT 25
4491: PPUSH
4492: LD_VAR 0 7
4496: PPUSH
4497: LD_INT 1
4499: PPUSH
4500: CALL_OW 322
// end else
4504: GO 4521
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4506: LD_INT 25
4508: PPUSH
4509: LD_VAR 0 7
4513: PPUSH
4514: LD_INT 0
4516: PPUSH
4517: CALL_OW 322
// end ; if mpVehicles then
4521: LD_EXP 36
4525: IFFALSE 4624
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4527: LD_ADDR_VAR 0 3
4531: PUSH
4532: LD_VAR 0 7
4536: PPUSH
4537: LD_VAR 0 9
4541: PPUSH
4542: LD_EXP 36
4546: PPUSH
4547: CALL 5847 0 3
4551: PUSH
4552: FOR_IN
4553: IFFALSE 4622
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4555: LD_VAR 0 3
4559: PPUSH
4560: LD_INT 0
4562: PPUSH
4563: LD_INT 5
4565: PPUSH
4566: CALL_OW 12
4570: PPUSH
4571: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4575: LD_VAR 0 3
4579: PPUSH
4580: LD_EXP 21
4584: PUSH
4585: LD_VAR 0 8
4589: ARRAY
4590: PUSH
4591: LD_INT 1
4593: ARRAY
4594: PPUSH
4595: LD_EXP 21
4599: PUSH
4600: LD_VAR 0 8
4604: ARRAY
4605: PUSH
4606: LD_INT 2
4608: ARRAY
4609: PPUSH
4610: LD_INT 12
4612: PPUSH
4613: LD_INT 0
4615: PPUSH
4616: CALL_OW 50
// end ;
4620: GO 4552
4622: POP
4623: POP
// end ; uc_nation := nation ;
4624: LD_ADDR_OWVAR 21
4628: PUSH
4629: LD_VAR 0 9
4633: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4634: LD_EXP 3
4638: PUSH
4639: LD_INT 6
4641: PUSH
4642: LD_INT 7
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: IN
4649: IFFALSE 4674
4651: PUSH
4652: LD_EXP 7
4656: PUSH
4657: LD_VAR 0 2
4661: ARRAY
4662: PUSH
4663: LD_INT 1
4665: PUSH
4666: LD_INT 2
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: IN
4673: AND
4674: IFFALSE 4722
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4676: LD_ADDR_VAR 0 11
4680: PUSH
4681: LD_VAR 0 7
4685: PPUSH
4686: LD_VAR 0 9
4690: PPUSH
4691: LD_EXP 24
4695: PUSH
4696: LD_EXP 24
4700: PUSH
4701: LD_INT 2
4703: DIV
4704: PLUS
4705: PPUSH
4706: LD_EXP 25
4710: PUSH
4711: LD_INT 1
4713: PLUS
4714: PPUSH
4715: CALL 5338 0 4
4719: ST_TO_ADDR
4720: GO 4752
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4722: LD_ADDR_VAR 0 11
4726: PUSH
4727: LD_VAR 0 7
4731: PPUSH
4732: LD_VAR 0 9
4736: PPUSH
4737: LD_EXP 24
4741: PPUSH
4742: LD_EXP 25
4746: PPUSH
4747: CALL 5338 0 4
4751: ST_TO_ADDR
// for j in team do
4752: LD_ADDR_VAR 0 3
4756: PUSH
4757: LD_VAR 0 11
4761: PUSH
4762: FOR_IN
4763: IFFALSE 4812
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4765: LD_VAR 0 3
4769: PPUSH
4770: LD_EXP 21
4774: PUSH
4775: LD_VAR 0 8
4779: ARRAY
4780: PUSH
4781: LD_INT 1
4783: ARRAY
4784: PPUSH
4785: LD_EXP 21
4789: PUSH
4790: LD_VAR 0 8
4794: ARRAY
4795: PUSH
4796: LD_INT 2
4798: ARRAY
4799: PPUSH
4800: LD_INT 12
4802: PPUSH
4803: LD_INT 0
4805: PPUSH
4806: CALL_OW 50
4810: GO 4762
4812: POP
4813: POP
// if mpApemans then
4814: LD_EXP 30
4818: IFFALSE 4924
// begin for j := 1 to mpApemans do
4820: LD_ADDR_VAR 0 3
4824: PUSH
4825: DOUBLE
4826: LD_INT 1
4828: DEC
4829: ST_TO_ADDR
4830: LD_EXP 30
4834: PUSH
4835: FOR_TO
4836: IFFALSE 4922
// begin PrepareApeman ( - 5 ) ;
4838: LD_INT 5
4840: NEG
4841: PPUSH
4842: CALL 44989 0 1
// ape := CreateHuman ;
4846: LD_ADDR_VAR 0 10
4850: PUSH
4851: CALL_OW 44
4855: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4856: LD_ADDR_EXP 32
4860: PUSH
4861: LD_EXP 32
4865: PPUSH
4866: LD_VAR 0 8
4870: PPUSH
4871: LD_EXP 32
4875: PUSH
4876: LD_VAR 0 8
4880: ARRAY
4881: PPUSH
4882: LD_VAR 0 10
4886: PPUSH
4887: CALL 48862 0 2
4891: PPUSH
4892: CALL_OW 1
4896: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4897: LD_VAR 0 10
4901: PPUSH
4902: LD_EXP 31
4906: PUSH
4907: LD_VAR 0 8
4911: ARRAY
4912: PPUSH
4913: LD_INT 0
4915: PPUSH
4916: CALL_OW 49
// end ;
4920: GO 4835
4922: POP
4923: POP
// end ; end ;
4924: GO 3490
4926: POP
4927: POP
// if not mpTeamGame then
4928: LD_EXP 11
4932: NOT
4933: IFFALSE 5031
// begin for i := 1 to 8 do
4935: LD_ADDR_VAR 0 2
4939: PUSH
4940: DOUBLE
4941: LD_INT 1
4943: DEC
4944: ST_TO_ADDR
4945: LD_INT 8
4947: PUSH
4948: FOR_TO
4949: IFFALSE 5027
// for j := 1 to 8 do
4951: LD_ADDR_VAR 0 3
4955: PUSH
4956: DOUBLE
4957: LD_INT 1
4959: DEC
4960: ST_TO_ADDR
4961: LD_INT 8
4963: PUSH
4964: FOR_TO
4965: IFFALSE 5023
// if i <> j then
4967: LD_VAR 0 2
4971: PUSH
4972: LD_VAR 0 3
4976: NONEQUAL
4977: IFFALSE 5001
// SetAttitude ( i , j , att_neutral , true ) else
4979: LD_VAR 0 2
4983: PPUSH
4984: LD_VAR 0 3
4988: PPUSH
4989: LD_INT 0
4991: PPUSH
4992: LD_INT 1
4994: PPUSH
4995: CALL_OW 80
4999: GO 5021
// SetAttitude ( i , j , att_friend , true ) ;
5001: LD_VAR 0 2
5005: PPUSH
5006: LD_VAR 0 3
5010: PPUSH
5011: LD_INT 1
5013: PPUSH
5014: LD_INT 1
5016: PPUSH
5017: CALL_OW 80
5021: GO 4964
5023: POP
5024: POP
5025: GO 4948
5027: POP
5028: POP
// end else
5029: GO 5206
// begin if mpSharedVision then
5031: LD_EXP 16
5035: IFFALSE 5100
// begin for i in mpTeams do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: LD_EXP 10
5046: PUSH
5047: FOR_IN
5048: IFFALSE 5098
// for j := 2 to i do
5050: LD_ADDR_VAR 0 3
5054: PUSH
5055: DOUBLE
5056: LD_INT 2
5058: DEC
5059: ST_TO_ADDR
5060: LD_VAR 0 2
5064: PUSH
5065: FOR_TO
5066: IFFALSE 5094
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5068: LD_VAR 0 2
5072: PUSH
5073: LD_VAR 0 3
5077: ARRAY
5078: PPUSH
5079: LD_VAR 0 2
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PPUSH
5088: CALL_OW 343
5092: GO 5065
5094: POP
5095: POP
5096: GO 5047
5098: POP
5099: POP
// end ; for i := 1 to 8 do
5100: LD_ADDR_VAR 0 2
5104: PUSH
5105: DOUBLE
5106: LD_INT 1
5108: DEC
5109: ST_TO_ADDR
5110: LD_INT 8
5112: PUSH
5113: FOR_TO
5114: IFFALSE 5204
// for j := 1 to 8 do
5116: LD_ADDR_VAR 0 3
5120: PUSH
5121: DOUBLE
5122: LD_INT 1
5124: DEC
5125: ST_TO_ADDR
5126: LD_INT 8
5128: PUSH
5129: FOR_TO
5130: IFFALSE 5200
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5132: LD_EXP 8
5136: PUSH
5137: LD_VAR 0 2
5141: ARRAY
5142: PUSH
5143: LD_EXP 8
5147: PUSH
5148: LD_VAR 0 3
5152: ARRAY
5153: EQUAL
5154: IFFALSE 5178
// SetAttitude ( i , j , att_friend , true ) else
5156: LD_VAR 0 2
5160: PPUSH
5161: LD_VAR 0 3
5165: PPUSH
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 1
5171: PPUSH
5172: CALL_OW 80
5176: GO 5198
// SetAttitude ( i , j , att_enemy , true ) ;
5178: LD_VAR 0 2
5182: PPUSH
5183: LD_VAR 0 3
5187: PPUSH
5188: LD_INT 2
5190: PPUSH
5191: LD_INT 1
5193: PPUSH
5194: CALL_OW 80
5198: GO 5129
5200: POP
5201: POP
5202: GO 5113
5204: POP
5205: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5206: LD_ADDR_OWVAR 71
5210: PUSH
5211: LD_EXP 9
5215: PUSH
5216: LD_OWVAR 2
5220: ARRAY
5221: ST_TO_ADDR
// if IAmSpec then
5222: CALL_OW 531
5226: IFFALSE 5267
// begin FogOff ( true ) ;
5228: LD_INT 1
5230: PPUSH
5231: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5235: LD_EXP 29
5239: PUSH
5240: LD_INT 1
5242: ARRAY
5243: PUSH
5244: LD_INT 2
5246: DIV
5247: PPUSH
5248: LD_EXP 29
5252: PUSH
5253: LD_INT 2
5255: ARRAY
5256: PUSH
5257: LD_INT 2
5259: DIV
5260: PPUSH
5261: CALL_OW 86
// end else
5265: GO 5313
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5267: LD_EXP 21
5271: PUSH
5272: LD_EXP 7
5276: PUSH
5277: LD_OWVAR 2
5281: ARRAY
5282: ARRAY
5283: PUSH
5284: LD_INT 1
5286: ARRAY
5287: PPUSH
5288: LD_EXP 21
5292: PUSH
5293: LD_EXP 7
5297: PUSH
5298: LD_OWVAR 2
5302: ARRAY
5303: ARRAY
5304: PUSH
5305: LD_INT 2
5307: ARRAY
5308: PPUSH
5309: CALL_OW 86
// end ; BeginBuildUp ;
5313: CALL 6380 0 0
// enable ( mpActive ) ;
5317: LD_INT 100
5319: ENABLE_MARKED
// enable ( mpGameType ) ;
5320: LD_EXP 3
5324: ENABLE_MARKED
// mpGameActive := true ;
5325: LD_ADDR_EXP 39
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// end ;
5333: LD_VAR 0 1
5337: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5338: LD_INT 0
5340: PPUSH
5341: PPUSH
5342: PPUSH
5343: PPUSH
// result := [ ] ;
5344: LD_ADDR_VAR 0 5
5348: PUSH
5349: EMPTY
5350: ST_TO_ADDR
// class := class_soldier ;
5351: LD_ADDR_VAR 0 8
5355: PUSH
5356: LD_INT 1
5358: ST_TO_ADDR
// uc_side := side ;
5359: LD_ADDR_OWVAR 20
5363: PUSH
5364: LD_VAR 0 1
5368: ST_TO_ADDR
// uc_nation := nation ;
5369: LD_ADDR_OWVAR 21
5373: PUSH
5374: LD_VAR 0 2
5378: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5379: LD_ADDR_OWVAR 26
5383: PUSH
5384: LD_OWVAR 19
5388: PUSH
5389: LD_VAR 0 1
5393: ARRAY
5394: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5395: LD_INT 1
5397: PPUSH
5398: LD_INT 2
5400: PPUSH
5401: CALL_OW 12
5405: PPUSH
5406: LD_VAR 0 8
5410: PPUSH
5411: LD_VAR 0 4
5415: PUSH
5416: LD_INT 2
5418: PLUS
5419: PPUSH
5420: CALL_OW 380
// hc_importance := 105 ;
5424: LD_ADDR_OWVAR 32
5428: PUSH
5429: LD_INT 105
5431: ST_TO_ADDR
// if Multiplayer then
5432: LD_OWVAR 4
5436: IFFALSE 5476
// begin hc_gallery := MULTIAVATARS ;
5438: LD_ADDR_OWVAR 33
5442: PUSH
5443: LD_STRING MULTIAVATARS
5445: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5446: LD_ADDR_OWVAR 34
5450: PUSH
5451: LD_VAR 0 1
5455: PPUSH
5456: CALL_OW 525
5460: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5461: LD_ADDR_OWVAR 27
5465: PUSH
5466: LD_VAR 0 1
5470: PPUSH
5471: CALL_OW 526
5475: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5476: LD_ADDR_VAR 0 5
5480: PUSH
5481: LD_VAR 0 5
5485: PPUSH
5486: CALL_OW 44
5490: PPUSH
5491: CALL 48862 0 2
5495: ST_TO_ADDR
// if mpTeamPreset then
5496: LD_LOC 1
5500: IFFALSE 5596
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5502: LD_LOC 1
5506: PUSH
5507: LD_INT 1
5509: ARRAY
5510: PPUSH
5511: LD_VAR 0 5
5515: PUSH
5516: LD_VAR 0 5
5520: ARRAY
5521: PPUSH
5522: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5526: LD_VAR 0 5
5530: PUSH
5531: LD_VAR 0 5
5535: ARRAY
5536: PPUSH
5537: LD_INT 1
5539: PPUSH
5540: LD_LOC 1
5544: PUSH
5545: LD_INT 1
5547: ARRAY
5548: PPUSH
5549: LD_INT 1
5551: PPUSH
5552: CALL_OW 260
5556: PPUSH
5557: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5561: LD_VAR 0 5
5565: PUSH
5566: LD_VAR 0 5
5570: ARRAY
5571: PPUSH
5572: LD_INT 2
5574: PPUSH
5575: LD_LOC 1
5579: PUSH
5580: LD_INT 1
5582: ARRAY
5583: PPUSH
5584: LD_INT 2
5586: PPUSH
5587: CALL_OW 260
5591: PPUSH
5592: CALL_OW 239
// end ; InitHc_All ( ) ;
5596: CALL_OW 584
// class := 2 ;
5600: LD_ADDR_VAR 0 8
5604: PUSH
5605: LD_INT 2
5607: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5608: LD_ADDR_VAR 0 6
5612: PUSH
5613: DOUBLE
5614: LD_INT 1
5616: DEC
5617: ST_TO_ADDR
5618: LD_VAR 0 3
5622: PUSH
5623: LD_INT 1
5625: MINUS
5626: PUSH
5627: FOR_TO
5628: IFFALSE 5823
// begin PrepareHuman ( false , class , skill ) ;
5630: LD_INT 0
5632: PPUSH
5633: LD_VAR 0 8
5637: PPUSH
5638: LD_VAR 0 4
5642: PPUSH
5643: CALL_OW 380
// un := CreateHuman ;
5647: LD_ADDR_VAR 0 7
5651: PUSH
5652: CALL_OW 44
5656: ST_TO_ADDR
// result := Join ( result , un ) ;
5657: LD_ADDR_VAR 0 5
5661: PUSH
5662: LD_VAR 0 5
5666: PPUSH
5667: LD_VAR 0 7
5671: PPUSH
5672: CALL 48862 0 2
5676: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5677: LD_LOC 1
5681: PPUSH
5682: CALL 12896 0 1
5686: PUSH
5687: LD_VAR 0 3
5691: GREATEREQUAL
5692: IFFALSE 5788
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5694: LD_LOC 1
5698: PUSH
5699: LD_VAR 0 6
5703: PUSH
5704: LD_INT 1
5706: PLUS
5707: ARRAY
5708: PPUSH
5709: LD_VAR 0 7
5713: PPUSH
5714: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5718: LD_VAR 0 7
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: LD_LOC 1
5730: PUSH
5731: LD_VAR 0 6
5735: PUSH
5736: LD_INT 1
5738: PLUS
5739: ARRAY
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: CALL_OW 260
5748: PPUSH
5749: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5753: LD_VAR 0 7
5757: PPUSH
5758: LD_INT 2
5760: PPUSH
5761: LD_LOC 1
5765: PUSH
5766: LD_VAR 0 6
5770: PUSH
5771: LD_INT 1
5773: PLUS
5774: ARRAY
5775: PPUSH
5776: LD_INT 2
5778: PPUSH
5779: CALL_OW 260
5783: PPUSH
5784: CALL_OW 239
// end ; class := Inc ( class ) ;
5788: LD_ADDR_VAR 0 8
5792: PUSH
5793: LD_VAR 0 8
5797: PPUSH
5798: CALL 50235 0 1
5802: ST_TO_ADDR
// if class = 5 then
5803: LD_VAR 0 8
5807: PUSH
5808: LD_INT 5
5810: EQUAL
5811: IFFALSE 5821
// class := 1 ;
5813: LD_ADDR_VAR 0 8
5817: PUSH
5818: LD_INT 1
5820: ST_TO_ADDR
// end ;
5821: GO 5627
5823: POP
5824: POP
// if not mpTeamPreset then
5825: LD_LOC 1
5829: NOT
5830: IFFALSE 5842
// mpTeamPreset := result ;
5832: LD_ADDR_LOC 1
5836: PUSH
5837: LD_VAR 0 5
5841: ST_TO_ADDR
// end ;
5842: LD_VAR 0 5
5846: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5847: LD_INT 0
5849: PPUSH
5850: PPUSH
// result := [ ] ;
5851: LD_ADDR_VAR 0 4
5855: PUSH
5856: EMPTY
5857: ST_TO_ADDR
// if not vehicles then
5858: LD_VAR 0 3
5862: NOT
5863: IFFALSE 5867
// exit ;
5865: GO 6081
// for i := 1 to vehicles [ nation ] do
5867: LD_ADDR_VAR 0 5
5871: PUSH
5872: DOUBLE
5873: LD_INT 1
5875: DEC
5876: ST_TO_ADDR
5877: LD_VAR 0 3
5881: PUSH
5882: LD_VAR 0 2
5886: ARRAY
5887: PUSH
5888: FOR_TO
5889: IFFALSE 6079
// begin uc_side := side ;
5891: LD_ADDR_OWVAR 20
5895: PUSH
5896: LD_VAR 0 1
5900: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5901: LD_VAR 0 3
5905: PUSH
5906: LD_VAR 0 2
5910: ARRAY
5911: PUSH
5912: LD_VAR 0 5
5916: ARRAY
5917: PPUSH
5918: CALL 12896 0 1
5922: PUSH
5923: LD_INT 4
5925: GREATER
5926: IFFALSE 5956
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5928: LD_ADDR_OWVAR 21
5932: PUSH
5933: LD_VAR 0 3
5937: PUSH
5938: LD_VAR 0 2
5942: ARRAY
5943: PUSH
5944: LD_VAR 0 5
5948: ARRAY
5949: PUSH
5950: LD_INT 5
5952: ARRAY
5953: ST_TO_ADDR
5954: GO 5966
// uc_nation := nation ;
5956: LD_ADDR_OWVAR 21
5960: PUSH
5961: LD_VAR 0 2
5965: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5966: LD_VAR 0 3
5970: PUSH
5971: LD_VAR 0 2
5975: ARRAY
5976: PUSH
5977: LD_VAR 0 5
5981: ARRAY
5982: PUSH
5983: LD_INT 1
5985: ARRAY
5986: PPUSH
5987: LD_VAR 0 3
5991: PUSH
5992: LD_VAR 0 2
5996: ARRAY
5997: PUSH
5998: LD_VAR 0 5
6002: ARRAY
6003: PUSH
6004: LD_INT 2
6006: ARRAY
6007: PPUSH
6008: LD_VAR 0 3
6012: PUSH
6013: LD_VAR 0 2
6017: ARRAY
6018: PUSH
6019: LD_VAR 0 5
6023: ARRAY
6024: PUSH
6025: LD_INT 3
6027: ARRAY
6028: PPUSH
6029: LD_VAR 0 3
6033: PUSH
6034: LD_VAR 0 2
6038: ARRAY
6039: PUSH
6040: LD_VAR 0 5
6044: ARRAY
6045: PUSH
6046: LD_INT 4
6048: ARRAY
6049: PPUSH
6050: LD_INT 80
6052: PPUSH
6053: CALL 15692 0 5
// result := Join ( result , CreateVehicle ) ;
6057: LD_ADDR_VAR 0 4
6061: PUSH
6062: LD_VAR 0 4
6066: PPUSH
6067: CALL_OW 45
6071: PPUSH
6072: CALL 48862 0 2
6076: ST_TO_ADDR
// end ;
6077: GO 5888
6079: POP
6080: POP
// end ;
6081: LD_VAR 0 4
6085: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6086: LD_INT 0
6088: PPUSH
6089: PPUSH
// for i in mpBattleFlags do
6090: LD_ADDR_VAR 0 3
6094: PUSH
6095: LD_EXP 23
6099: PUSH
6100: FOR_IN
6101: IFFALSE 6178
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6103: LD_VAR 0 3
6107: PPUSH
6108: LD_INT 1
6110: PUSH
6111: LD_VAR 0 1
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 2
6122: PUSH
6123: LD_VAR 0 1
6127: PUSH
6128: LD_REAL  7.00000000000000E-0001
6131: MUL
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: LD_VAR 0 1
6144: PUSH
6145: LD_REAL  4.00000000000000E-0001
6148: MUL
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: LD_INT 20
6156: PUSH
6157: LD_VAR 0 1
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: PPUSH
6172: CALL_OW 423
6176: GO 6100
6178: POP
6179: POP
// end ;
6180: LD_VAR 0 2
6184: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6185: LD_INT 100
6187: IFFALSE 6282
6189: GO 6191
6191: DISABLE
6192: LD_INT 0
6194: PPUSH
6195: PPUSH
// begin if mpBattleFlag <= 0 then
6196: LD_EXP 22
6200: PUSH
6201: LD_INT 0
6203: LESSEQUAL
6204: IFFALSE 6208
// exit ;
6206: GO 6282
// strength := 100 ;
6208: LD_ADDR_VAR 0 2
6212: PUSH
6213: LD_INT 100
6215: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6216: LD_EXP 22
6220: PPUSH
6221: CALL_OW 67
// strength := Dec ( strength ) ;
6225: LD_ADDR_VAR 0 2
6229: PUSH
6230: LD_VAR 0 2
6234: PPUSH
6235: CALL 50257 0 1
6239: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6240: LD_VAR 0 2
6244: PPUSH
6245: CALL 6086 0 1
// until not strength ;
6249: LD_VAR 0 2
6253: NOT
6254: IFFALSE 6216
// for i in mpBattleFlags do
6256: LD_ADDR_VAR 0 1
6260: PUSH
6261: LD_EXP 23
6265: PUSH
6266: FOR_IN
6267: IFFALSE 6280
// KillBattleFlag ( i ) ;
6269: LD_VAR 0 1
6273: PPUSH
6274: CALL_OW 419
6278: GO 6266
6280: POP
6281: POP
// end ;
6282: PPOPN 2
6284: END
// every 0 0$1 marked mpActive do var side , tmp ;
6285: GO 6287
6287: DISABLE
6288: LD_INT 0
6290: PPUSH
6291: PPUSH
// begin if mpSibBomb <= 1 then
6292: LD_EXP 28
6296: PUSH
6297: LD_INT 1
6299: LESSEQUAL
6300: IFFALSE 6304
// exit ;
6302: GO 6377
// tmp := mpSibBomb ;
6304: LD_ADDR_VAR 0 2
6308: PUSH
6309: LD_EXP 28
6313: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6314: LD_INT 35
6316: PPUSH
6317: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6321: LD_ADDR_VAR 0 2
6325: PUSH
6326: LD_VAR 0 2
6330: PUSH
6331: LD_INT 35
6333: MINUS
6334: ST_TO_ADDR
// until not tmp ;
6335: LD_VAR 0 2
6339: NOT
6340: IFFALSE 6314
// for side := 1 to 8 do
6342: LD_ADDR_VAR 0 1
6346: PUSH
6347: DOUBLE
6348: LD_INT 1
6350: DEC
6351: ST_TO_ADDR
6352: LD_INT 8
6354: PUSH
6355: FOR_TO
6356: IFFALSE 6375
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6358: LD_INT 25
6360: PPUSH
6361: LD_VAR 0 1
6365: PPUSH
6366: LD_INT 1
6368: PPUSH
6369: CALL_OW 322
6373: GO 6355
6375: POP
6376: POP
// end ;
6377: PPOPN 2
6379: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6380: LD_INT 0
6382: PPUSH
6383: PPUSH
6384: PPUSH
// mpBuildUpTimeDelay := 0 ;
6385: LD_ADDR_EXP 47
6389: PUSH
6390: LD_INT 0
6392: ST_TO_ADDR
// if not mpBuildUpTime then
6393: LD_EXP 20
6397: NOT
6398: IFFALSE 6402
// exit ;
6400: GO 6591
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6402: LD_ADDR_EXP 47
6406: PUSH
6407: LD_INT 8400
6409: PUSH
6410: LD_INT 2100
6412: PUSH
6413: LD_EXP 20
6417: MUL
6418: PLUS
6419: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6420: LD_ADDR_EXP 48
6424: PUSH
6425: LD_INT 1
6427: ST_TO_ADDR
// for i := 1 to 8 do
6428: LD_ADDR_VAR 0 2
6432: PUSH
6433: DOUBLE
6434: LD_INT 1
6436: DEC
6437: ST_TO_ADDR
6438: LD_INT 8
6440: PUSH
6441: FOR_TO
6442: IFFALSE 6589
// if mpSidePositions [ i ] then
6444: LD_EXP 7
6448: PUSH
6449: LD_VAR 0 2
6453: ARRAY
6454: IFFALSE 6587
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6456: LD_EXP 19
6460: PUSH
6461: LD_EXP 7
6465: PUSH
6466: LD_VAR 0 2
6470: ARRAY
6471: ARRAY
6472: PPUSH
6473: LD_INT 5
6475: PPUSH
6476: CALL_OW 424
// for j := 1 to 8 do
6480: LD_ADDR_VAR 0 3
6484: PUSH
6485: DOUBLE
6486: LD_INT 1
6488: DEC
6489: ST_TO_ADDR
6490: LD_INT 8
6492: PUSH
6493: FOR_TO
6494: IFFALSE 6585
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6496: LD_EXP 7
6500: PUSH
6501: LD_VAR 0 3
6505: ARRAY
6506: IFFALSE 6555
6508: PUSH
6509: LD_EXP 8
6513: PUSH
6514: LD_VAR 0 2
6518: ARRAY
6519: PUSH
6520: LD_EXP 8
6524: PUSH
6525: LD_VAR 0 3
6529: ARRAY
6530: NONEQUAL
6531: IFTRUE 6554
6533: PUSH
6534: LD_EXP 11
6538: NOT
6539: IFFALSE 6553
6541: PUSH
6542: LD_VAR 0 2
6546: PUSH
6547: LD_VAR 0 3
6551: NONEQUAL
6552: AND
6553: OR
6554: AND
6555: IFFALSE 6583
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6557: LD_VAR 0 3
6561: PPUSH
6562: LD_EXP 19
6566: PUSH
6567: LD_EXP 7
6571: PUSH
6572: LD_VAR 0 2
6576: ARRAY
6577: ARRAY
6578: PPUSH
6579: CALL_OW 333
6583: GO 6493
6585: POP
6586: POP
// end ;
6587: GO 6441
6589: POP
6590: POP
// end ;
6591: LD_VAR 0 1
6595: RET
// function EndBuildUp ; var i , j ; begin
6596: LD_INT 0
6598: PPUSH
6599: PPUSH
6600: PPUSH
// mpBuildUpTimeActive := false ;
6601: LD_ADDR_EXP 48
6605: PUSH
6606: LD_INT 0
6608: ST_TO_ADDR
// for i := 1 to 8 do
6609: LD_ADDR_VAR 0 2
6613: PUSH
6614: DOUBLE
6615: LD_INT 1
6617: DEC
6618: ST_TO_ADDR
6619: LD_INT 8
6621: PUSH
6622: FOR_TO
6623: IFFALSE 6770
// if mpSidePositions [ i ] then
6625: LD_EXP 7
6629: PUSH
6630: LD_VAR 0 2
6634: ARRAY
6635: IFFALSE 6768
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6637: LD_EXP 19
6641: PUSH
6642: LD_EXP 7
6646: PUSH
6647: LD_VAR 0 2
6651: ARRAY
6652: ARRAY
6653: PPUSH
6654: LD_INT 0
6656: PPUSH
6657: CALL_OW 424
// for j := 1 to 8 do
6661: LD_ADDR_VAR 0 3
6665: PUSH
6666: DOUBLE
6667: LD_INT 1
6669: DEC
6670: ST_TO_ADDR
6671: LD_INT 8
6673: PUSH
6674: FOR_TO
6675: IFFALSE 6766
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6677: LD_EXP 7
6681: PUSH
6682: LD_VAR 0 3
6686: ARRAY
6687: IFFALSE 6736
6689: PUSH
6690: LD_EXP 8
6694: PUSH
6695: LD_VAR 0 2
6699: ARRAY
6700: PUSH
6701: LD_EXP 8
6705: PUSH
6706: LD_VAR 0 3
6710: ARRAY
6711: NONEQUAL
6712: IFTRUE 6735
6714: PUSH
6715: LD_EXP 11
6719: NOT
6720: IFFALSE 6734
6722: PUSH
6723: LD_VAR 0 2
6727: PUSH
6728: LD_VAR 0 3
6732: NONEQUAL
6733: AND
6734: OR
6735: AND
6736: IFFALSE 6764
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6738: LD_VAR 0 3
6742: PPUSH
6743: LD_EXP 19
6747: PUSH
6748: LD_EXP 7
6752: PUSH
6753: LD_VAR 0 2
6757: ARRAY
6758: ARRAY
6759: PPUSH
6760: CALL_OW 334
6764: GO 6674
6766: POP
6767: POP
// end ;
6768: GO 6622
6770: POP
6771: POP
// end ;
6772: LD_VAR 0 1
6776: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6777: LD_EXP 48
6781: IFFALSE 6960
6783: GO 6785
6785: DISABLE
6786: LD_INT 0
6788: PPUSH
6789: PPUSH
// begin for i := 1 to 8 do
6790: LD_ADDR_VAR 0 1
6794: PUSH
6795: DOUBLE
6796: LD_INT 1
6798: DEC
6799: ST_TO_ADDR
6800: LD_INT 8
6802: PUSH
6803: FOR_TO
6804: IFFALSE 6957
// if mpSidePositions [ i ] then
6806: LD_EXP 7
6810: PUSH
6811: LD_VAR 0 1
6815: ARRAY
6816: IFFALSE 6955
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6818: LD_ADDR_VAR 0 2
6822: PUSH
6823: LD_EXP 19
6827: PUSH
6828: LD_EXP 7
6832: PUSH
6833: LD_VAR 0 1
6837: ARRAY
6838: ARRAY
6839: PPUSH
6840: LD_INT 2
6842: PUSH
6843: LD_INT 21
6845: PUSH
6846: LD_INT 1
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 21
6855: PUSH
6856: LD_INT 2
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: LIST
6867: PUSH
6868: LD_INT 22
6870: PUSH
6871: LD_OWVAR 2
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PPUSH
6884: CALL_OW 70
6888: PUSH
6889: FOR_IN
6890: IFFALSE 6953
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6892: LD_EXP 8
6896: PUSH
6897: LD_VAR 0 1
6901: ARRAY
6902: PUSH
6903: LD_EXP 8
6907: PUSH
6908: LD_OWVAR 2
6912: ARRAY
6913: NONEQUAL
6914: IFTRUE 6937
6916: PUSH
6917: LD_EXP 11
6921: NOT
6922: IFFALSE 6936
6924: PUSH
6925: LD_VAR 0 1
6929: PUSH
6930: LD_OWVAR 2
6934: NONEQUAL
6935: AND
6936: OR
6937: IFFALSE 6951
// ComMoveToArea ( un , BuildUpEscape ) ;
6939: LD_VAR 0 2
6943: PPUSH
6944: LD_INT 13
6946: PPUSH
6947: CALL_OW 113
6951: GO 6889
6953: POP
6954: POP
6955: GO 6803
6957: POP
6958: POP
// enable ;
6959: ENABLE
// end ;
6960: PPOPN 2
6962: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6963: LD_EXP 20
6967: IFFALSE 7017
6969: GO 6971
6971: DISABLE
6972: LD_INT 0
6974: PPUSH
// begin tmp := mpBuildUpTime ;
6975: LD_ADDR_VAR 0 1
6979: PUSH
6980: LD_EXP 20
6984: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6985: LD_INT 35
6987: PPUSH
6988: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6992: LD_ADDR_VAR 0 1
6996: PUSH
6997: LD_VAR 0 1
7001: PUSH
7002: LD_INT 35
7004: MINUS
7005: ST_TO_ADDR
// until not tmp ;
7006: LD_VAR 0 1
7010: NOT
7011: IFFALSE 6985
// EndBuildUp ;
7013: CALL 6596 0 0
// end ;
7017: PPOPN 1
7019: END
// every 0 0$1 trigger mpActive marked mpWin do
7020: LD_INT 100
7022: IFFALSE 7056
7024: GO 7026
7026: DISABLE
// begin if IAmServer then
7027: CALL_OW 518
7031: IFFALSE 7040
// wait ( 0 0$3 ) ;
7033: LD_INT 105
7035: PPUSH
7036: CALL_OW 67
// if Multiplayer then
7040: LD_OWVAR 4
7044: IFFALSE 7052
// YouWinInMultiplayer else
7046: CALL_OW 106
7050: GO 7056
// YouWin ;
7052: CALL_OW 103
// end ;
7056: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7057: LD_INT 0
7059: PPUSH
// result := false ;
7060: LD_ADDR_VAR 0 3
7064: PUSH
7065: LD_INT 0
7067: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7068: LD_VAR 0 1
7072: PUSH
7073: LD_INT 1
7075: DOUBLE
7076: EQUAL
7077: IFTRUE 7099
7079: LD_INT 5
7081: DOUBLE
7082: EQUAL
7083: IFTRUE 7099
7085: LD_INT 6
7087: DOUBLE
7088: EQUAL
7089: IFTRUE 7099
7091: LD_INT 7
7093: DOUBLE
7094: EQUAL
7095: IFTRUE 7099
7097: GO 7172
7099: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7100: LD_ADDR_VAR 0 3
7104: PUSH
7105: LD_INT 22
7107: PUSH
7108: LD_VAR 0 2
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: LD_INT 21
7122: PUSH
7123: LD_INT 1
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 33
7132: PUSH
7133: LD_INT 3
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 33
7142: PUSH
7143: LD_INT 5
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PPUSH
7160: CALL_OW 69
7164: PPUSH
7165: CALL 12896 0 1
7169: ST_TO_ADDR
// end ; GameTypeSurvival :
7170: GO 7411
7172: LD_INT 2
7174: DOUBLE
7175: EQUAL
7176: IFTRUE 7180
7178: GO 7310
7180: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7181: LD_ADDR_VAR 0 3
7185: PUSH
7186: LD_INT 22
7188: PUSH
7189: LD_VAR 0 2
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 2
7200: PUSH
7201: LD_INT 30
7203: PUSH
7204: LD_INT 0
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 30
7213: PUSH
7214: LD_INT 1
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: PPUSH
7230: CALL_OW 69
7234: PPUSH
7235: CALL 12896 0 1
7239: IFFALSE 7307
7241: PUSH
7242: LD_INT 22
7244: PUSH
7245: LD_VAR 0 2
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: LD_INT 2
7256: PUSH
7257: LD_INT 21
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 33
7269: PUSH
7270: LD_INT 3
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 33
7279: PUSH
7280: LD_INT 5
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PPUSH
7297: CALL_OW 69
7301: PPUSH
7302: CALL 12896 0 1
7306: AND
7307: ST_TO_ADDR
// end ; GameTypeKing :
7308: GO 7411
7310: LD_INT 3
7312: DOUBLE
7313: EQUAL
7314: IFTRUE 7318
7316: GO 7410
7318: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7319: LD_ADDR_VAR 0 3
7323: PUSH
7324: LD_INT 22
7326: PUSH
7327: LD_VAR 0 2
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 2
7338: PUSH
7339: LD_INT 21
7341: PUSH
7342: LD_INT 1
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 33
7351: PUSH
7352: LD_INT 3
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PUSH
7359: LD_INT 33
7361: PUSH
7362: LD_INT 5
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PPUSH
7379: CALL_OW 69
7383: PPUSH
7384: CALL 12896 0 1
7388: IFFALSE 7407
7390: PUSH
7391: LD_VAR 0 2
7395: PPUSH
7396: CALL 61774 0 1
7400: PUSH
7401: LD_EXP 35
7405: LESS
7406: AND
7407: ST_TO_ADDR
// end ; end ;
7408: GO 7411
7410: POP
// end ;
7411: LD_VAR 0 3
7415: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7416: LD_INT 100
7418: IFFALSE 7648
7420: GO 7422
7422: DISABLE
7423: LD_INT 0
7425: PPUSH
7426: PPUSH
// begin if Multiplayer then
7427: LD_OWVAR 4
7431: IFFALSE 7439
// SetPlayerSpectator ( ) else
7433: CALL_OW 572
7437: GO 7448
// FogOff ( your_side ) ;
7439: LD_OWVAR 2
7443: PPUSH
7444: CALL_OW 344
// repeat gameIsOn := false ;
7448: LD_ADDR_VAR 0 1
7452: PUSH
7453: LD_INT 0
7455: ST_TO_ADDR
// for i := 1 to 8 do
7456: LD_ADDR_VAR 0 2
7460: PUSH
7461: DOUBLE
7462: LD_INT 1
7464: DEC
7465: ST_TO_ADDR
7466: LD_INT 8
7468: PUSH
7469: FOR_TO
7470: IFFALSE 7600
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7472: LD_EXP 7
7476: PUSH
7477: LD_VAR 0 2
7481: ARRAY
7482: IFFALSE 7495
7484: PUSH
7485: LD_VAR 0 2
7489: PPUSH
7490: CALL_OW 108
7494: AND
7495: IFFALSE 7509
7497: PUSH
7498: LD_VAR 0 2
7502: PUSH
7503: LD_OWVAR 2
7507: NONEQUAL
7508: AND
7509: IFFALSE 7598
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7511: LD_EXP 8
7515: PUSH
7516: LD_VAR 0 2
7520: ARRAY
7521: NOT
7522: IFTRUE 7570
7524: PUSH
7525: LD_EXP 8
7529: PUSH
7530: LD_VAR 0 2
7534: ARRAY
7535: PUSH
7536: LD_EXP 8
7540: PUSH
7541: LD_OWVAR 2
7545: ARRAY
7546: NONEQUAL
7547: IFFALSE 7569
7549: PUSH
7550: LD_OWVAR 2
7554: PPUSH
7555: LD_VAR 0 2
7559: PPUSH
7560: CALL_OW 81
7564: PUSH
7565: LD_INT 1
7567: NONEQUAL
7568: AND
7569: OR
7570: IFFALSE 7598
// if HasPowerByGameType ( mpGameType , i ) then
7572: LD_EXP 3
7576: PPUSH
7577: LD_VAR 0 2
7581: PPUSH
7582: CALL 7057 0 2
7586: IFFALSE 7598
// begin gameIsOn := true ;
7588: LD_ADDR_VAR 0 1
7592: PUSH
7593: LD_INT 1
7595: ST_TO_ADDR
// break ;
7596: GO 7600
// end ;
7598: GO 7469
7600: POP
7601: POP
// wait ( 100 ) ;
7602: LD_INT 100
7604: PPUSH
7605: CALL_OW 67
// until not gameIsOn ;
7609: LD_VAR 0 1
7613: NOT
7614: IFFALSE 7448
// if IAmServer then
7616: CALL_OW 518
7620: IFFALSE 7629
// wait ( 0 0$3 ) ;
7622: LD_INT 105
7624: PPUSH
7625: CALL_OW 67
// if Multiplayer then
7629: LD_OWVAR 4
7633: IFFALSE 7641
// YouLostInMultiplayer else
7635: CALL_OW 107
7639: GO 7648
// YouLost (  ) ;
7641: LD_STRING 
7643: PPUSH
7644: CALL_OW 104
// end ;
7648: PPOPN 2
7650: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7651: LD_EXP 33
7655: IFFALSE 8039
7657: GO 7659
7659: DISABLE
7660: LD_INT 0
7662: PPUSH
7663: PPUSH
7664: PPUSH
7665: PPUSH
7666: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7667: LD_ADDR_VAR 0 5
7671: PUSH
7672: LD_INT 1
7674: PUSH
7675: LD_INT 2
7677: PUSH
7678: LD_INT 3
7680: PUSH
7681: LD_INT 4
7683: PUSH
7684: LD_INT 5
7686: PUSH
7687: LD_INT 6
7689: PUSH
7690: LD_INT 7
7692: PUSH
7693: LD_INT 8
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7706: LD_INT 350
7708: PPUSH
7709: CALL_OW 67
// for i := 1 to 8 do
7713: LD_ADDR_VAR 0 1
7717: PUSH
7718: DOUBLE
7719: LD_INT 1
7721: DEC
7722: ST_TO_ADDR
7723: LD_INT 8
7725: PUSH
7726: FOR_TO
7727: IFFALSE 8009
// begin j := sides [ i ] ;
7729: LD_ADDR_VAR 0 2
7733: PUSH
7734: LD_VAR 0 5
7738: PUSH
7739: LD_VAR 0 1
7743: ARRAY
7744: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7745: LD_EXP 40
7749: PUSH
7750: LD_VAR 0 2
7754: ARRAY
7755: PPUSH
7756: CALL 12896 0 1
7760: IFFALSE 7773
7762: PUSH
7763: LD_VAR 0 2
7767: PPUSH
7768: CALL_OW 108
7772: AND
7773: IFFALSE 7791
7775: PUSH
7776: LD_EXP 3
7780: PPUSH
7781: LD_VAR 0 2
7785: PPUSH
7786: CALL 7057 0 2
7790: AND
7791: IFFALSE 8007
// begin wait ( mpRespawn div 2 ) ;
7793: LD_EXP 33
7797: PUSH
7798: LD_INT 2
7800: DIV
7801: PPUSH
7802: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7806: LD_ADDR_VAR 0 3
7810: PUSH
7811: LD_INT 22
7813: PUSH
7814: LD_VAR 0 2
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PUSH
7823: LD_INT 50
7825: PUSH
7826: EMPTY
7827: LIST
7828: PUSH
7829: LD_INT 2
7831: PUSH
7832: LD_INT 30
7834: PUSH
7835: LD_INT 0
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 30
7844: PUSH
7845: LD_INT 1
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: LIST
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: LIST
7861: PPUSH
7862: CALL_OW 69
7866: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7867: LD_VAR 0 3
7871: NOT
7872: IFTRUE 7886
7874: PUSH
7875: LD_VAR 0 2
7879: PPUSH
7880: CALL_OW 108
7884: NOT
7885: OR
7886: IFTRUE 7905
7888: PUSH
7889: LD_EXP 3
7893: PPUSH
7894: LD_VAR 0 2
7898: PPUSH
7899: CALL 7057 0 2
7903: NOT
7904: OR
7905: IFFALSE 7909
// continue ;
7907: GO 7726
// spawn := tmp [ 1 ] ;
7909: LD_ADDR_VAR 0 4
7913: PUSH
7914: LD_VAR 0 3
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7923: LD_EXP 40
7927: PUSH
7928: LD_VAR 0 2
7932: ARRAY
7933: PUSH
7934: LD_INT 1
7936: ARRAY
7937: PPUSH
7938: LD_VAR 0 4
7942: PPUSH
7943: CALL_OW 250
7947: PPUSH
7948: LD_VAR 0 4
7952: PPUSH
7953: CALL_OW 251
7957: PPUSH
7958: LD_INT 32
7960: PPUSH
7961: LD_INT 1
7963: PPUSH
7964: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7968: LD_ADDR_EXP 40
7972: PUSH
7973: LD_EXP 40
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_EXP 40
7987: PUSH
7988: LD_VAR 0 2
7992: ARRAY
7993: PPUSH
7994: LD_INT 1
7996: PPUSH
7997: CALL_OW 3
8001: PPUSH
8002: CALL_OW 1
8006: ST_TO_ADDR
// end ; end ;
8007: GO 7726
8009: POP
8010: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8011: LD_ADDR_VAR 0 5
8015: PUSH
8016: LD_VAR 0 5
8020: PPUSH
8021: LD_INT 1
8023: PPUSH
8024: LD_INT 8
8026: PPUSH
8027: LD_INT 1
8029: PPUSH
8030: CALL 15222 0 4
8034: ST_TO_ADDR
// until false ;
8035: LD_INT 0
8037: IFFALSE 7706
// end ;
8039: PPOPN 5
8041: END
// every 0 0$1 marked mpActive do
8042: GO 8044
8044: DISABLE
// begin enable ;
8045: ENABLE
// if not mpDisplayStrings then
8046: LD_EXP 38
8050: NOT
8051: IFFALSE 8062
// begin display_strings := [ ] ;
8053: LD_ADDR_OWVAR 47
8057: PUSH
8058: EMPTY
8059: ST_TO_ADDR
// exit ;
8060: GO 8072
// end ; display_strings := mpDisplayStrings ;
8062: LD_ADDR_OWVAR 47
8066: PUSH
8067: LD_EXP 38
8071: ST_TO_ADDR
// end ; end_of_file
8072: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8073: LD_INT 0
8075: PPUSH
8076: PPUSH
8077: PPUSH
8078: PPUSH
8079: PPUSH
8080: PPUSH
8081: PPUSH
8082: PPUSH
8083: PPUSH
// if GetType ( un ) = unit_vehicle then
8084: LD_VAR 0 1
8088: PPUSH
8089: CALL_OW 247
8093: PUSH
8094: LD_INT 2
8096: EQUAL
8097: IFFALSE 8101
// exit ;
8099: GO 8775
// side := GetSide ( un ) ;
8101: LD_ADDR_VAR 0 9
8105: PUSH
8106: LD_VAR 0 1
8110: PPUSH
8111: CALL_OW 255
8115: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
8116: LD_EXP 3
8120: PUSH
8121: LD_INT 2
8123: EQUAL
8124: IFFALSE 8218
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 266
8135: PUSH
8136: LD_INT 0
8138: PUSH
8139: LD_INT 1
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: IN
8146: IFFALSE 8218
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8148: LD_ADDR_VAR 0 3
8152: PUSH
8153: LD_INT 22
8155: PUSH
8156: LD_VAR 0 9
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: PUSH
8165: LD_INT 2
8167: PUSH
8168: LD_INT 21
8170: PUSH
8171: LD_INT 1
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PUSH
8178: LD_INT 33
8180: PUSH
8181: LD_INT 3
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: LIST
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: PPUSH
8197: CALL_OW 69
8201: PUSH
8202: FOR_IN
8203: IFFALSE 8216
// KillUnit ( i ) ;
8205: LD_VAR 0 3
8209: PPUSH
8210: CALL_OW 66
8214: GO 8202
8216: POP
8217: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8218: LD_VAR 0 1
8222: PPUSH
8223: CALL_OW 257
8227: PUSH
8228: LD_INT 12
8230: PUSH
8231: LD_INT 17
8233: PUSH
8234: LD_INT 15
8236: PUSH
8237: LD_INT 16
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: IN
8246: IFTRUE 8263
8248: PUSH
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 263
8258: PUSH
8259: LD_INT 5
8261: EQUAL
8262: OR
8263: IFFALSE 8500
// begin tag := 0 ;
8265: LD_ADDR_VAR 0 5
8269: PUSH
8270: LD_INT 0
8272: ST_TO_ADDR
// for i := 1 to 8 do
8273: LD_ADDR_VAR 0 3
8277: PUSH
8278: DOUBLE
8279: LD_INT 1
8281: DEC
8282: ST_TO_ADDR
8283: LD_INT 8
8285: PUSH
8286: FOR_TO
8287: IFFALSE 8321
// if un in mpApePosIndex [ i ] then
8289: LD_VAR 0 1
8293: PUSH
8294: LD_EXP 32
8298: PUSH
8299: LD_VAR 0 3
8303: ARRAY
8304: IN
8305: IFFALSE 8319
// begin tag := i ;
8307: LD_ADDR_VAR 0 5
8311: PUSH
8312: LD_VAR 0 3
8316: ST_TO_ADDR
// break ;
8317: GO 8321
// end ;
8319: GO 8286
8321: POP
8322: POP
// if not tag then
8323: LD_VAR 0 5
8327: NOT
8328: IFFALSE 8332
// exit ;
8330: GO 8775
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8332: LD_ADDR_VAR 0 7
8336: PUSH
8337: LD_EXP 31
8341: PUSH
8342: LD_EXP 7
8346: PUSH
8347: LD_VAR 0 5
8351: ARRAY
8352: ARRAY
8353: ST_TO_ADDR
// if not area then
8354: LD_VAR 0 7
8358: NOT
8359: IFFALSE 8363
// exit ;
8361: GO 8775
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8363: LD_INT 14700
8365: PUSH
8366: LD_VAR 0 1
8370: PUSH
8371: LD_INT 5
8373: MOD
8374: PUSH
8375: LD_INT 1
8377: PLUS
8378: PUSH
8379: LD_INT 700
8381: MUL
8382: PLUS
8383: PPUSH
8384: CALL_OW 67
// repeat wait ( 10 ) ;
8388: LD_INT 10
8390: PPUSH
8391: CALL_OW 67
// until not mpBlockRespThread ;
8395: LD_EXP 46
8399: NOT
8400: IFFALSE 8388
// mpBlockRespThread := true ;
8402: LD_ADDR_EXP 46
8406: PUSH
8407: LD_INT 1
8409: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8410: LD_INT 0
8412: PPUSH
8413: CALL 44989 0 1
// ape := CreateHuman ;
8417: LD_ADDR_VAR 0 4
8421: PUSH
8422: CALL_OW 44
8426: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8427: LD_ADDR_EXP 32
8431: PUSH
8432: LD_EXP 32
8436: PPUSH
8437: LD_VAR 0 5
8441: PPUSH
8442: LD_EXP 32
8446: PUSH
8447: LD_VAR 0 5
8451: ARRAY
8452: PPUSH
8453: LD_VAR 0 4
8457: PPUSH
8458: CALL 48862 0 2
8462: PPUSH
8463: CALL_OW 1
8467: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8468: LD_VAR 0 4
8472: PPUSH
8473: LD_VAR 0 7
8477: PPUSH
8478: LD_INT 0
8480: PPUSH
8481: CALL_OW 49
// wait ( 10 ) ;
8485: LD_INT 10
8487: PPUSH
8488: CALL_OW 67
// mpBlockRespThread := false ;
8492: LD_ADDR_EXP 46
8496: PUSH
8497: LD_INT 0
8499: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8500: LD_VAR 0 1
8504: PPUSH
8505: CALL_OW 247
8509: PUSH
8510: LD_INT 1
8512: EQUAL
8513: IFFALSE 8530
8515: PUSH
8516: LD_VAR 0 1
8520: PPUSH
8521: CALL_OW 248
8525: PUSH
8526: LD_INT 0
8528: GREATER
8529: AND
8530: IFFALSE 8775
// begin if not mpRespawn then
8532: LD_EXP 33
8536: NOT
8537: IFFALSE 8541
// exit ;
8539: GO 8775
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8541: LD_VAR 0 9
8545: PPUSH
8546: CALL_OW 108
8550: NOT
8551: IFFALSE 8570
8553: PUSH
8554: LD_EXP 3
8558: PPUSH
8559: LD_VAR 0 9
8563: PPUSH
8564: CALL 7057 0 2
8568: NOT
8569: AND
8570: IFFALSE 8574
// exit ;
8572: GO 8775
// side := GetSide ( un ) ;
8574: LD_ADDR_VAR 0 9
8578: PUSH
8579: LD_VAR 0 1
8583: PPUSH
8584: CALL_OW 255
8588: ST_TO_ADDR
// nation := GetNation ( un ) ;
8589: LD_ADDR_VAR 0 8
8593: PUSH
8594: LD_VAR 0 1
8598: PPUSH
8599: CALL_OW 248
8603: ST_TO_ADDR
// class := GetClass ( un ) ;
8604: LD_ADDR_VAR 0 6
8608: PUSH
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 257
8618: ST_TO_ADDR
// if class > 4 then
8619: LD_VAR 0 6
8623: PUSH
8624: LD_INT 4
8626: GREATER
8627: IFFALSE 8637
// class := 1 ;
8629: LD_ADDR_VAR 0 6
8633: PUSH
8634: LD_INT 1
8636: ST_TO_ADDR
// repeat wait ( 10 ) ;
8637: LD_INT 10
8639: PPUSH
8640: CALL_OW 67
// until not mpBlockRespThread ;
8644: LD_EXP 46
8648: NOT
8649: IFFALSE 8637
// mpBlockRespThread := true ;
8651: LD_ADDR_EXP 46
8655: PUSH
8656: LD_INT 1
8658: ST_TO_ADDR
// uc_side := side ;
8659: LD_ADDR_OWVAR 20
8663: PUSH
8664: LD_VAR 0 9
8668: ST_TO_ADDR
// uc_nation := nation ;
8669: LD_ADDR_OWVAR 21
8673: PUSH
8674: LD_VAR 0 8
8678: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8679: LD_INT 0
8681: PPUSH
8682: LD_VAR 0 6
8686: PPUSH
8687: LD_INT 2
8689: PPUSH
8690: CALL_OW 380
// un := CreateHuman ;
8694: LD_ADDR_VAR 0 1
8698: PUSH
8699: CALL_OW 44
8703: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8704: LD_ADDR_EXP 40
8708: PUSH
8709: LD_EXP 40
8713: PPUSH
8714: LD_VAR 0 9
8718: PPUSH
8719: LD_EXP 40
8723: PUSH
8724: LD_VAR 0 9
8728: ARRAY
8729: PPUSH
8730: LD_EXP 40
8734: PUSH
8735: LD_VAR 0 9
8739: ARRAY
8740: PUSH
8741: LD_INT 1
8743: PLUS
8744: PPUSH
8745: LD_VAR 0 1
8749: PPUSH
8750: CALL_OW 1
8754: PPUSH
8755: CALL_OW 1
8759: ST_TO_ADDR
// wait ( 10 ) ;
8760: LD_INT 10
8762: PPUSH
8763: CALL_OW 67
// mpBlockRespThread := false ;
8767: LD_ADDR_EXP 46
8771: PUSH
8772: LD_INT 0
8774: ST_TO_ADDR
// end ; end ;
8775: LD_VAR 0 2
8779: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8780: LD_INT 0
8782: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8783: LD_VAR 0 1
8787: PPUSH
8788: CALL_OW 266
8792: PUSH
8793: LD_INT 0
8795: PUSH
8796: LD_INT 1
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: IN
8803: IFFALSE 8828
// SetBName ( building , @ & GetSide ( building ) ) ;
8805: LD_VAR 0 1
8809: PPUSH
8810: LD_STRING @
8812: PUSH
8813: LD_VAR 0 1
8817: PPUSH
8818: CALL_OW 255
8822: STR
8823: PPUSH
8824: CALL_OW 500
// end ;
8828: LD_VAR 0 2
8832: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8833: LD_INT 0
8835: PPUSH
8836: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8837: LD_EXP 3
8841: PUSH
8842: LD_INT 2
8844: EQUAL
8845: IFFALSE 8869
8847: PUSH
8848: LD_VAR 0 1
8852: PPUSH
8853: CALL_OW 266
8857: PUSH
8858: LD_INT 0
8860: PUSH
8861: LD_INT 1
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: IN
8868: AND
8869: IFFALSE 8948
// begin SetSide ( building , oldSide ) ;
8871: LD_VAR 0 1
8875: PPUSH
8876: LD_VAR 0 2
8880: PPUSH
8881: CALL_OW 235
// KillUnit ( building ) ;
8885: LD_VAR 0 1
8889: PPUSH
8890: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8894: LD_ADDR_VAR 0 5
8898: PUSH
8899: LD_INT 22
8901: PUSH
8902: LD_VAR 0 2
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: PUSH
8911: LD_INT 21
8913: PUSH
8914: LD_INT 1
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PPUSH
8925: CALL_OW 69
8929: PUSH
8930: FOR_IN
8931: IFFALSE 8944
// KillUnit ( i ) ;
8933: LD_VAR 0 5
8937: PPUSH
8938: CALL_OW 66
8942: GO 8930
8944: POP
8945: POP
// exit ;
8946: GO 8993
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8948: LD_VAR 0 1
8952: PPUSH
8953: CALL_OW 266
8957: PUSH
8958: LD_INT 0
8960: PUSH
8961: LD_INT 1
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: IN
8968: IFFALSE 8993
// SetBName ( building , @ & GetSide ( building ) ) ;
8970: LD_VAR 0 1
8974: PPUSH
8975: LD_STRING @
8977: PUSH
8978: LD_VAR 0 1
8982: PPUSH
8983: CALL_OW 255
8987: STR
8988: PPUSH
8989: CALL_OW 500
// end ;
8993: LD_VAR 0 4
8997: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8998: LD_INT 0
9000: PPUSH
9001: PPUSH
9002: PPUSH
// if mpGameType <> GameTypeFamine then
9003: LD_EXP 3
9007: PUSH
9008: LD_INT 5
9010: NONEQUAL
9011: IFFALSE 9015
// exit ;
9013: GO 9230
// for i := 1 to mpGlobalOilDeposits do
9015: LD_ADDR_VAR 0 6
9019: PUSH
9020: DOUBLE
9021: LD_INT 1
9023: DEC
9024: ST_TO_ADDR
9025: LD_EXP 41
9029: PUSH
9030: FOR_TO
9031: IFFALSE 9228
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9033: LD_EXP 41
9037: PUSH
9038: LD_VAR 0 6
9042: ARRAY
9043: PUSH
9044: LD_INT 1
9046: ARRAY
9047: PPUSH
9048: LD_EXP 41
9052: PUSH
9053: LD_VAR 0 6
9057: ARRAY
9058: PUSH
9059: LD_INT 2
9061: ARRAY
9062: PPUSH
9063: CALL_OW 428
9067: PUSH
9068: LD_VAR 0 1
9072: EQUAL
9073: IFFALSE 9226
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9075: LD_ADDR_VAR 0 7
9079: PUSH
9080: LD_EXP 41
9084: PUSH
9085: LD_VAR 0 6
9089: ARRAY
9090: PUSH
9091: LD_INT 3
9093: ARRAY
9094: ST_TO_ADDR
// value := value - amount ;
9095: LD_ADDR_VAR 0 7
9099: PUSH
9100: LD_VAR 0 7
9104: PUSH
9105: LD_VAR 0 4
9109: MINUS
9110: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9111: LD_ADDR_EXP 41
9115: PUSH
9116: LD_EXP 41
9120: PPUSH
9121: LD_VAR 0 6
9125: PPUSH
9126: LD_EXP 41
9130: PUSH
9131: LD_VAR 0 6
9135: ARRAY
9136: PPUSH
9137: LD_INT 3
9139: PPUSH
9140: LD_VAR 0 7
9144: PPUSH
9145: CALL_OW 1
9149: PPUSH
9150: CALL_OW 1
9154: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9155: LD_VAR 0 1
9159: PPUSH
9160: LD_VAR 0 7
9164: PPUSH
9165: CALL_OW 505
// if value <= 0 then
9169: LD_VAR 0 7
9173: PUSH
9174: LD_INT 0
9176: LESSEQUAL
9177: IFFALSE 9226
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9179: LD_EXP 41
9183: PUSH
9184: LD_VAR 0 6
9188: ARRAY
9189: PUSH
9190: LD_INT 1
9192: ARRAY
9193: PPUSH
9194: LD_EXP 41
9198: PUSH
9199: LD_VAR 0 6
9203: ARRAY
9204: PUSH
9205: LD_INT 2
9207: ARRAY
9208: PPUSH
9209: CALL_OW 63
// KillUnit ( building ) ;
9213: LD_VAR 0 1
9217: PPUSH
9218: CALL_OW 66
// exit ;
9222: POP
9223: POP
9224: GO 9230
// end ; end ; end ;
9226: GO 9030
9228: POP
9229: POP
// end ;
9230: LD_VAR 0 5
9234: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9235: LD_INT 0
9237: PPUSH
9238: PPUSH
9239: PPUSH
// if mpGameType <> GameTypeFamine then
9240: LD_EXP 3
9244: PUSH
9245: LD_INT 5
9247: NONEQUAL
9248: IFFALSE 9252
// exit ;
9250: GO 9467
// for i := 1 to mpGlobalSibDeposits do
9252: LD_ADDR_VAR 0 6
9256: PUSH
9257: DOUBLE
9258: LD_INT 1
9260: DEC
9261: ST_TO_ADDR
9262: LD_EXP 42
9266: PUSH
9267: FOR_TO
9268: IFFALSE 9465
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9270: LD_EXP 42
9274: PUSH
9275: LD_VAR 0 6
9279: ARRAY
9280: PUSH
9281: LD_INT 1
9283: ARRAY
9284: PPUSH
9285: LD_EXP 42
9289: PUSH
9290: LD_VAR 0 6
9294: ARRAY
9295: PUSH
9296: LD_INT 2
9298: ARRAY
9299: PPUSH
9300: CALL_OW 428
9304: PUSH
9305: LD_VAR 0 1
9309: EQUAL
9310: IFFALSE 9463
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9312: LD_ADDR_VAR 0 7
9316: PUSH
9317: LD_EXP 42
9321: PUSH
9322: LD_VAR 0 6
9326: ARRAY
9327: PUSH
9328: LD_INT 3
9330: ARRAY
9331: ST_TO_ADDR
// value := value - amount ;
9332: LD_ADDR_VAR 0 7
9336: PUSH
9337: LD_VAR 0 7
9341: PUSH
9342: LD_VAR 0 4
9346: MINUS
9347: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9348: LD_ADDR_EXP 42
9352: PUSH
9353: LD_EXP 42
9357: PPUSH
9358: LD_VAR 0 6
9362: PPUSH
9363: LD_EXP 42
9367: PUSH
9368: LD_VAR 0 6
9372: ARRAY
9373: PPUSH
9374: LD_INT 3
9376: PPUSH
9377: LD_VAR 0 7
9381: PPUSH
9382: CALL_OW 1
9386: PPUSH
9387: CALL_OW 1
9391: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9392: LD_VAR 0 1
9396: PPUSH
9397: LD_VAR 0 7
9401: PPUSH
9402: CALL_OW 505
// if value <= 0 then
9406: LD_VAR 0 7
9410: PUSH
9411: LD_INT 0
9413: LESSEQUAL
9414: IFFALSE 9463
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9416: LD_EXP 42
9420: PUSH
9421: LD_VAR 0 6
9425: ARRAY
9426: PUSH
9427: LD_INT 1
9429: ARRAY
9430: PPUSH
9431: LD_EXP 42
9435: PUSH
9436: LD_VAR 0 6
9440: ARRAY
9441: PUSH
9442: LD_INT 2
9444: ARRAY
9445: PPUSH
9446: CALL_OW 63
// KillUnit ( building ) ;
9450: LD_VAR 0 1
9454: PPUSH
9455: CALL_OW 66
// exit ;
9459: POP
9460: POP
9461: GO 9467
// end ; end ; end ;
9463: GO 9267
9465: POP
9466: POP
// end ;
9467: LD_VAR 0 5
9471: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9472: LD_INT 0
9474: PPUSH
9475: PPUSH
// side := GetSide ( factory ) ;
9476: LD_ADDR_VAR 0 7
9480: PUSH
9481: LD_VAR 0 1
9485: PPUSH
9486: CALL_OW 255
9490: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9491: LD_VAR 0 5
9495: PUSH
9496: LD_INT 81
9498: EQUAL
9499: IFFALSE 9537
9501: PUSH
9502: LD_INT 22
9504: PUSH
9505: LD_VAR 0 7
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PUSH
9514: LD_INT 34
9516: PUSH
9517: LD_INT 81
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: PPUSH
9528: CALL_OW 69
9532: PUSH
9533: LD_INT 0
9535: GREATER
9536: AND
9537: IFFALSE 9570
// begin ComCancel ( factory ) ;
9539: LD_VAR 0 1
9543: PPUSH
9544: CALL_OW 127
// if side = your_side then
9548: LD_VAR 0 7
9552: PUSH
9553: LD_OWVAR 2
9557: EQUAL
9558: IFFALSE 9570
// HintSpec ( VehLimit , 2 ) ;
9560: LD_STRING VehLimit
9562: PPUSH
9563: LD_INT 2
9565: PPUSH
9566: CALL_OW 338
// end ; end ;
9570: LD_VAR 0 6
9574: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
9575: LD_INT 0
9577: PPUSH
9578: PPUSH
9579: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
9580: LD_VAR 0 1
9584: PPUSH
9585: CALL_OW 264
9589: PUSH
9590: LD_INT 81
9592: EQUAL
9593: IFFALSE 9610
9595: PUSH
9596: LD_VAR 0 1
9600: PPUSH
9601: CALL_OW 263
9605: PUSH
9606: LD_INT 1
9608: EQUAL
9609: AND
9610: IFFALSE 9890
// begin for i := 1 to Count ( minersList ) do
9612: LD_ADDR_VAR 0 6
9616: PUSH
9617: DOUBLE
9618: LD_INT 1
9620: DEC
9621: ST_TO_ADDR
9622: LD_EXP 56
9626: PPUSH
9627: CALL 12896 0 1
9631: PUSH
9632: FOR_TO
9633: IFFALSE 9751
// begin if minersList [ i ] = oldId then
9635: LD_EXP 56
9639: PUSH
9640: LD_VAR 0 6
9644: ARRAY
9645: PUSH
9646: LD_VAR 0 2
9650: EQUAL
9651: IFFALSE 9749
// begin for j := 1 to minerMinesList [ i ] do
9653: LD_ADDR_VAR 0 7
9657: PUSH
9658: DOUBLE
9659: LD_INT 1
9661: DEC
9662: ST_TO_ADDR
9663: LD_EXP 57
9667: PUSH
9668: LD_VAR 0 6
9672: ARRAY
9673: PUSH
9674: FOR_TO
9675: IFFALSE 9725
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
9677: LD_EXP 57
9681: PUSH
9682: LD_VAR 0 6
9686: ARRAY
9687: PUSH
9688: LD_VAR 0 7
9692: ARRAY
9693: PUSH
9694: LD_INT 1
9696: ARRAY
9697: PPUSH
9698: LD_EXP 57
9702: PUSH
9703: LD_VAR 0 6
9707: ARRAY
9708: PUSH
9709: LD_VAR 0 7
9713: ARRAY
9714: PUSH
9715: LD_INT 2
9717: ARRAY
9718: PPUSH
9719: CALL_OW 612
9723: GO 9674
9725: POP
9726: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
9727: LD_ADDR_EXP 57
9731: PUSH
9732: LD_EXP 57
9736: PPUSH
9737: LD_VAR 0 6
9741: PPUSH
9742: CALL_OW 3
9746: ST_TO_ADDR
// break ;
9747: GO 9751
// end ; end ;
9749: GO 9632
9751: POP
9752: POP
// minersList := minersList diff oldId ;
9753: LD_ADDR_EXP 56
9757: PUSH
9758: LD_EXP 56
9762: PUSH
9763: LD_VAR 0 2
9767: DIFF
9768: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
9769: LD_INT 22
9771: PUSH
9772: LD_VAR 0 4
9776: PPUSH
9777: CALL_OW 255
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: LD_INT 34
9788: PUSH
9789: LD_INT 81
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PPUSH
9800: CALL_OW 69
9804: PUSH
9805: LD_INT 1
9807: GREATER
9808: IFFALSE 9835
// begin ComExit ( unit ) ;
9810: LD_VAR 0 4
9814: PPUSH
9815: CALL 49260 0 1
// SetSide ( newId , oldSide ) ;
9819: LD_VAR 0 1
9823: PPUSH
9824: LD_VAR 0 3
9828: PPUSH
9829: CALL_OW 235
// exit ;
9833: GO 9890
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
9835: LD_ADDR_EXP 56
9839: PUSH
9840: LD_EXP 56
9844: PPUSH
9845: LD_EXP 56
9849: PUSH
9850: LD_INT 1
9852: PLUS
9853: PPUSH
9854: LD_VAR 0 1
9858: PPUSH
9859: CALL_OW 1
9863: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
9864: LD_ADDR_EXP 57
9868: PUSH
9869: LD_EXP 57
9873: PPUSH
9874: LD_EXP 57
9878: PUSH
9879: LD_INT 1
9881: PLUS
9882: PPUSH
9883: EMPTY
9884: PPUSH
9885: CALL_OW 1
9889: ST_TO_ADDR
// end ; end ; end_of_file
9890: LD_VAR 0 5
9894: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9895: LD_EXP 39
9899: IFFALSE 9907
9901: PUSH
9902: CALL 10117 0 0
9906: AND
9907: IFFALSE 9915
9909: PUSH
9910: LD_OWVAR 4
9914: AND
9915: IFFALSE 10114
9917: GO 9919
9919: DISABLE
9920: LD_INT 0
9922: PPUSH
9923: PPUSH
// begin canWin := false ;
9924: LD_ADDR_VAR 0 2
9928: PUSH
9929: LD_INT 0
9931: ST_TO_ADDR
// if not HasPower ( your_side ) then
9932: LD_OWVAR 2
9936: PPUSH
9937: CALL 10159 0 1
9941: NOT
9942: IFFALSE 9953
// begin Multiplayer_Loose_Message ;
9944: CALL_OW 521
// enable ( mpLose ) ;
9948: LD_INT 102
9950: ENABLE_MARKED
// end else
9951: GO 10114
// begin canWin := true ;
9953: LD_ADDR_VAR 0 2
9957: PUSH
9958: LD_INT 1
9960: ST_TO_ADDR
// for i := 1 to 8 do
9961: LD_ADDR_VAR 0 1
9965: PUSH
9966: DOUBLE
9967: LD_INT 1
9969: DEC
9970: ST_TO_ADDR
9971: LD_INT 8
9973: PUSH
9974: FOR_TO
9975: IFFALSE 10100
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9977: LD_EXP 7
9981: PUSH
9982: LD_VAR 0 1
9986: ARRAY
9987: IFFALSE 10000
9989: PUSH
9990: LD_VAR 0 1
9994: PPUSH
9995: CALL_OW 108
9999: AND
10000: IFFALSE 10014
10002: PUSH
10003: LD_VAR 0 1
10007: PUSH
10008: LD_OWVAR 2
10012: NONEQUAL
10013: AND
10014: IFFALSE 10098
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10016: LD_EXP 8
10020: PUSH
10021: LD_VAR 0 1
10025: ARRAY
10026: NOT
10027: IFTRUE 10075
10029: PUSH
10030: LD_EXP 8
10034: PUSH
10035: LD_VAR 0 1
10039: ARRAY
10040: PUSH
10041: LD_EXP 8
10045: PUSH
10046: LD_OWVAR 2
10050: ARRAY
10051: NONEQUAL
10052: IFFALSE 10074
10054: PUSH
10055: LD_OWVAR 2
10059: PPUSH
10060: LD_VAR 0 1
10064: PPUSH
10065: CALL_OW 81
10069: PUSH
10070: LD_INT 1
10072: NONEQUAL
10073: AND
10074: OR
10075: IFFALSE 10098
// if HasPower ( i ) then
10077: LD_VAR 0 1
10081: PPUSH
10082: CALL 10159 0 1
10086: IFFALSE 10098
// begin canWin := false ;
10088: LD_ADDR_VAR 0 2
10092: PUSH
10093: LD_INT 0
10095: ST_TO_ADDR
// break ;
10096: GO 10100
// end ;
10098: GO 9974
10100: POP
10101: POP
// if canWin then
10102: LD_VAR 0 2
10106: IFFALSE 10113
// enable ( mpWin ) else
10108: LD_INT 101
10110: ENABLE_MARKED
10111: GO 10114
// enable ;
10113: ENABLE
// end ; end ;
10114: PPOPN 2
10116: END
// function CanWinLoose ; begin
10117: LD_INT 0
10119: PPUSH
// result := true ;
10120: LD_ADDR_VAR 0 1
10124: PUSH
10125: LD_INT 1
10127: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10128: CALL_OW 531
10132: IFFALSE 10144
10134: PUSH
10135: CALL_OW 519
10139: PUSH
10140: LD_INT 1
10142: GREATER
10143: AND
10144: IFFALSE 10154
// result := false ;
10146: LD_ADDR_VAR 0 1
10150: PUSH
10151: LD_INT 0
10153: ST_TO_ADDR
// end ;
10154: LD_VAR 0 1
10158: RET
// function HasPower ( i ) ; begin
10159: LD_INT 0
10161: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10162: LD_ADDR_VAR 0 2
10166: PUSH
10167: LD_INT 22
10169: PUSH
10170: LD_VAR 0 1
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 2
10181: PUSH
10182: LD_INT 21
10184: PUSH
10185: LD_INT 1
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: LD_INT 33
10194: PUSH
10195: LD_INT 3
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 33
10204: PUSH
10205: LD_INT 5
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PPUSH
10222: CALL_OW 69
10226: ST_TO_ADDR
// end ; end_of_file
10227: LD_VAR 0 2
10231: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10232: LD_EXP 39
10236: IFFALSE 10279
10238: GO 10240
10240: DISABLE
10241: LD_INT 0
10243: PPUSH
// begin for i := 1 to 8 do
10244: LD_ADDR_VAR 0 1
10248: PUSH
10249: DOUBLE
10250: LD_INT 1
10252: DEC
10253: ST_TO_ADDR
10254: LD_INT 8
10256: PUSH
10257: FOR_TO
10258: IFFALSE 10277
// SetRestrict ( b_depot , i , state_disabled ) ;
10260: LD_INT 0
10262: PPUSH
10263: LD_VAR 0 1
10267: PPUSH
10268: LD_INT 0
10270: PPUSH
10271: CALL_OW 324
10275: GO 10257
10277: POP
10278: POP
// end ;
10279: PPOPN 1
10281: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10282: LD_EXP 39
10286: IFFALSE 10294
10288: PUSH
10289: CALL 10504 0 0
10293: AND
10294: IFFALSE 10302
10296: PUSH
10297: LD_OWVAR 4
10301: AND
10302: IFFALSE 10501
10304: GO 10306
10306: DISABLE
10307: LD_INT 0
10309: PPUSH
10310: PPUSH
// begin canWin := false ;
10311: LD_ADDR_VAR 0 2
10315: PUSH
10316: LD_INT 0
10318: ST_TO_ADDR
// if not HasPower ( your_side ) then
10319: LD_OWVAR 2
10323: PPUSH
10324: CALL 10546 0 1
10328: NOT
10329: IFFALSE 10340
// begin Multiplayer_Loose_Message ;
10331: CALL_OW 521
// enable ( mpLose ) ;
10335: LD_INT 102
10337: ENABLE_MARKED
// end else
10338: GO 10501
// begin canWin := true ;
10340: LD_ADDR_VAR 0 2
10344: PUSH
10345: LD_INT 1
10347: ST_TO_ADDR
// for i := 1 to 8 do
10348: LD_ADDR_VAR 0 1
10352: PUSH
10353: DOUBLE
10354: LD_INT 1
10356: DEC
10357: ST_TO_ADDR
10358: LD_INT 8
10360: PUSH
10361: FOR_TO
10362: IFFALSE 10487
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10364: LD_EXP 7
10368: PUSH
10369: LD_VAR 0 1
10373: ARRAY
10374: IFFALSE 10387
10376: PUSH
10377: LD_VAR 0 1
10381: PPUSH
10382: CALL_OW 108
10386: AND
10387: IFFALSE 10401
10389: PUSH
10390: LD_VAR 0 1
10394: PUSH
10395: LD_OWVAR 2
10399: NONEQUAL
10400: AND
10401: IFFALSE 10485
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10403: LD_EXP 8
10407: PUSH
10408: LD_VAR 0 1
10412: ARRAY
10413: NOT
10414: IFTRUE 10462
10416: PUSH
10417: LD_EXP 8
10421: PUSH
10422: LD_VAR 0 1
10426: ARRAY
10427: PUSH
10428: LD_EXP 8
10432: PUSH
10433: LD_OWVAR 2
10437: ARRAY
10438: NONEQUAL
10439: IFFALSE 10461
10441: PUSH
10442: LD_OWVAR 2
10446: PPUSH
10447: LD_VAR 0 1
10451: PPUSH
10452: CALL_OW 81
10456: PUSH
10457: LD_INT 1
10459: NONEQUAL
10460: AND
10461: OR
10462: IFFALSE 10485
// if HasPower ( i ) then
10464: LD_VAR 0 1
10468: PPUSH
10469: CALL 10546 0 1
10473: IFFALSE 10485
// begin canWin := false ;
10475: LD_ADDR_VAR 0 2
10479: PUSH
10480: LD_INT 0
10482: ST_TO_ADDR
// break ;
10483: GO 10487
// end ;
10485: GO 10361
10487: POP
10488: POP
// if canWin then
10489: LD_VAR 0 2
10493: IFFALSE 10500
// enable ( mpWin ) else
10495: LD_INT 101
10497: ENABLE_MARKED
10498: GO 10501
// enable ;
10500: ENABLE
// end ; end ;
10501: PPOPN 2
10503: END
// function CanWinLoose ; begin
10504: LD_INT 0
10506: PPUSH
// result := true ;
10507: LD_ADDR_VAR 0 1
10511: PUSH
10512: LD_INT 1
10514: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10515: CALL_OW 531
10519: IFFALSE 10531
10521: PUSH
10522: CALL_OW 519
10526: PUSH
10527: LD_INT 1
10529: GREATER
10530: AND
10531: IFFALSE 10541
// result := false ;
10533: LD_ADDR_VAR 0 1
10537: PUSH
10538: LD_INT 0
10540: ST_TO_ADDR
// end ;
10541: LD_VAR 0 1
10545: RET
// function HasPower ( i ) ; begin
10546: LD_INT 0
10548: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10549: LD_INT 22
10551: PUSH
10552: LD_VAR 0 1
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 2
10563: PUSH
10564: LD_INT 30
10566: PUSH
10567: LD_INT 0
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 30
10576: PUSH
10577: LD_INT 1
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PPUSH
10593: CALL_OW 69
10597: NOT
10598: IFFALSE 10602
// exit ;
10600: GO 10667
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10602: LD_ADDR_VAR 0 2
10606: PUSH
10607: LD_INT 22
10609: PUSH
10610: LD_VAR 0 1
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: PUSH
10619: LD_INT 2
10621: PUSH
10622: LD_INT 21
10624: PUSH
10625: LD_INT 1
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: LD_INT 33
10634: PUSH
10635: LD_INT 3
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 33
10644: PUSH
10645: LD_INT 5
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PPUSH
10662: CALL_OW 69
10666: ST_TO_ADDR
// end ; end_of_file
10667: LD_VAR 0 2
10671: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10672: LD_INT 0
10674: PPUSH
10675: PPUSH
// if exist_mode then
10676: LD_VAR 0 2
10680: IFFALSE 10726
// begin unit := CreateCharacter ( prefix & ident ) ;
10682: LD_ADDR_VAR 0 5
10686: PUSH
10687: LD_VAR 0 3
10691: PUSH
10692: LD_VAR 0 1
10696: STR
10697: PPUSH
10698: CALL_OW 34
10702: ST_TO_ADDR
// if unit then
10703: LD_VAR 0 5
10707: IFFALSE 10724
// DeleteCharacters ( prefix & ident ) ;
10709: LD_VAR 0 3
10713: PUSH
10714: LD_VAR 0 1
10718: STR
10719: PPUSH
10720: CALL_OW 40
// end else
10724: GO 10741
// unit := NewCharacter ( ident ) ;
10726: LD_ADDR_VAR 0 5
10730: PUSH
10731: LD_VAR 0 1
10735: PPUSH
10736: CALL_OW 25
10740: ST_TO_ADDR
// result := unit ;
10741: LD_ADDR_VAR 0 4
10745: PUSH
10746: LD_VAR 0 5
10750: ST_TO_ADDR
// end ;
10751: LD_VAR 0 4
10755: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10756: LD_INT 0
10758: PPUSH
10759: PPUSH
// if exist_mode then
10760: LD_VAR 0 2
10764: IFFALSE 10789
// unit := CreateCharacter ( prefix & ident ) else
10766: LD_ADDR_VAR 0 5
10770: PUSH
10771: LD_VAR 0 3
10775: PUSH
10776: LD_VAR 0 1
10780: STR
10781: PPUSH
10782: CALL_OW 34
10786: ST_TO_ADDR
10787: GO 10804
// unit := NewCharacter ( ident ) ;
10789: LD_ADDR_VAR 0 5
10793: PUSH
10794: LD_VAR 0 1
10798: PPUSH
10799: CALL_OW 25
10803: ST_TO_ADDR
// result := unit ;
10804: LD_ADDR_VAR 0 4
10808: PUSH
10809: LD_VAR 0 5
10813: ST_TO_ADDR
// end ;
10814: LD_VAR 0 4
10818: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10819: LD_INT 0
10821: PPUSH
10822: PPUSH
// if not side or not nation then
10823: LD_VAR 0 1
10827: NOT
10828: IFTRUE 10837
10830: PUSH
10831: LD_VAR 0 2
10835: NOT
10836: OR
10837: IFFALSE 10841
// exit ;
10839: GO 11635
// case nation of nation_american :
10841: LD_VAR 0 2
10845: PUSH
10846: LD_INT 1
10848: DOUBLE
10849: EQUAL
10850: IFTRUE 10854
10852: GO 11076
10854: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
10855: LD_ADDR_VAR 0 4
10859: PUSH
10860: LD_INT 35
10862: PUSH
10863: LD_INT 45
10865: PUSH
10866: LD_INT 46
10868: PUSH
10869: LD_INT 47
10871: PUSH
10872: LD_INT 82
10874: PUSH
10875: LD_INT 83
10877: PUSH
10878: LD_INT 84
10880: PUSH
10881: LD_INT 85
10883: PUSH
10884: LD_INT 86
10886: PUSH
10887: LD_INT 1
10889: PUSH
10890: LD_INT 2
10892: PUSH
10893: LD_INT 6
10895: PUSH
10896: LD_INT 15
10898: PUSH
10899: LD_INT 16
10901: PUSH
10902: LD_INT 7
10904: PUSH
10905: LD_INT 12
10907: PUSH
10908: LD_INT 13
10910: PUSH
10911: LD_INT 10
10913: PUSH
10914: LD_INT 14
10916: PUSH
10917: LD_INT 20
10919: PUSH
10920: LD_INT 21
10922: PUSH
10923: LD_INT 22
10925: PUSH
10926: LD_INT 25
10928: PUSH
10929: LD_INT 32
10931: PUSH
10932: LD_INT 27
10934: PUSH
10935: LD_INT 36
10937: PUSH
10938: LD_INT 69
10940: PUSH
10941: LD_INT 39
10943: PUSH
10944: LD_INT 34
10946: PUSH
10947: LD_INT 40
10949: PUSH
10950: LD_INT 48
10952: PUSH
10953: LD_INT 49
10955: PUSH
10956: LD_INT 50
10958: PUSH
10959: LD_INT 51
10961: PUSH
10962: LD_INT 52
10964: PUSH
10965: LD_INT 53
10967: PUSH
10968: LD_INT 54
10970: PUSH
10971: LD_INT 55
10973: PUSH
10974: LD_INT 56
10976: PUSH
10977: LD_INT 57
10979: PUSH
10980: LD_INT 58
10982: PUSH
10983: LD_INT 59
10985: PUSH
10986: LD_INT 60
10988: PUSH
10989: LD_INT 61
10991: PUSH
10992: LD_INT 62
10994: PUSH
10995: LD_INT 80
10997: PUSH
10998: LD_INT 82
11000: PUSH
11001: LD_INT 83
11003: PUSH
11004: LD_INT 84
11006: PUSH
11007: LD_INT 85
11009: PUSH
11010: LD_INT 86
11012: PUSH
11013: LD_INT 90
11015: PUSH
11016: LD_INT 93
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: ST_TO_ADDR
11074: GO 11557
11076: LD_INT 2
11078: DOUBLE
11079: EQUAL
11080: IFTRUE 11084
11082: GO 11318
11084: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11085: LD_ADDR_VAR 0 4
11089: PUSH
11090: LD_INT 35
11092: PUSH
11093: LD_INT 45
11095: PUSH
11096: LD_INT 46
11098: PUSH
11099: LD_INT 47
11101: PUSH
11102: LD_INT 82
11104: PUSH
11105: LD_INT 83
11107: PUSH
11108: LD_INT 84
11110: PUSH
11111: LD_INT 85
11113: PUSH
11114: LD_INT 87
11116: PUSH
11117: LD_INT 70
11119: PUSH
11120: LD_INT 1
11122: PUSH
11123: LD_INT 11
11125: PUSH
11126: LD_INT 3
11128: PUSH
11129: LD_INT 4
11131: PUSH
11132: LD_INT 5
11134: PUSH
11135: LD_INT 6
11137: PUSH
11138: LD_INT 15
11140: PUSH
11141: LD_INT 18
11143: PUSH
11144: LD_INT 7
11146: PUSH
11147: LD_INT 17
11149: PUSH
11150: LD_INT 8
11152: PUSH
11153: LD_INT 20
11155: PUSH
11156: LD_INT 21
11158: PUSH
11159: LD_INT 22
11161: PUSH
11162: LD_INT 72
11164: PUSH
11165: LD_INT 26
11167: PUSH
11168: LD_INT 69
11170: PUSH
11171: LD_INT 39
11173: PUSH
11174: LD_INT 40
11176: PUSH
11177: LD_INT 41
11179: PUSH
11180: LD_INT 42
11182: PUSH
11183: LD_INT 43
11185: PUSH
11186: LD_INT 48
11188: PUSH
11189: LD_INT 49
11191: PUSH
11192: LD_INT 50
11194: PUSH
11195: LD_INT 51
11197: PUSH
11198: LD_INT 52
11200: PUSH
11201: LD_INT 53
11203: PUSH
11204: LD_INT 54
11206: PUSH
11207: LD_INT 55
11209: PUSH
11210: LD_INT 56
11212: PUSH
11213: LD_INT 60
11215: PUSH
11216: LD_INT 61
11218: PUSH
11219: LD_INT 62
11221: PUSH
11222: LD_INT 66
11224: PUSH
11225: LD_INT 67
11227: PUSH
11228: LD_INT 68
11230: PUSH
11231: LD_INT 81
11233: PUSH
11234: LD_INT 82
11236: PUSH
11237: LD_INT 83
11239: PUSH
11240: LD_INT 84
11242: PUSH
11243: LD_INT 85
11245: PUSH
11246: LD_INT 87
11248: PUSH
11249: LD_INT 88
11251: PUSH
11252: LD_INT 92
11254: PUSH
11255: LD_INT 94
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: ST_TO_ADDR
11316: GO 11557
11318: LD_INT 3
11320: DOUBLE
11321: EQUAL
11322: IFTRUE 11326
11324: GO 11556
11326: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11327: LD_ADDR_VAR 0 4
11331: PUSH
11332: LD_INT 46
11334: PUSH
11335: LD_INT 47
11337: PUSH
11338: LD_INT 1
11340: PUSH
11341: LD_INT 2
11343: PUSH
11344: LD_INT 82
11346: PUSH
11347: LD_INT 83
11349: PUSH
11350: LD_INT 84
11352: PUSH
11353: LD_INT 85
11355: PUSH
11356: LD_INT 86
11358: PUSH
11359: LD_INT 11
11361: PUSH
11362: LD_INT 9
11364: PUSH
11365: LD_INT 20
11367: PUSH
11368: LD_INT 19
11370: PUSH
11371: LD_INT 21
11373: PUSH
11374: LD_INT 24
11376: PUSH
11377: LD_INT 22
11379: PUSH
11380: LD_INT 25
11382: PUSH
11383: LD_INT 28
11385: PUSH
11386: LD_INT 29
11388: PUSH
11389: LD_INT 30
11391: PUSH
11392: LD_INT 31
11394: PUSH
11395: LD_INT 37
11397: PUSH
11398: LD_INT 38
11400: PUSH
11401: LD_INT 32
11403: PUSH
11404: LD_INT 27
11406: PUSH
11407: LD_INT 33
11409: PUSH
11410: LD_INT 69
11412: PUSH
11413: LD_INT 39
11415: PUSH
11416: LD_INT 34
11418: PUSH
11419: LD_INT 40
11421: PUSH
11422: LD_INT 71
11424: PUSH
11425: LD_INT 23
11427: PUSH
11428: LD_INT 44
11430: PUSH
11431: LD_INT 48
11433: PUSH
11434: LD_INT 49
11436: PUSH
11437: LD_INT 50
11439: PUSH
11440: LD_INT 51
11442: PUSH
11443: LD_INT 52
11445: PUSH
11446: LD_INT 53
11448: PUSH
11449: LD_INT 54
11451: PUSH
11452: LD_INT 55
11454: PUSH
11455: LD_INT 56
11457: PUSH
11458: LD_INT 57
11460: PUSH
11461: LD_INT 58
11463: PUSH
11464: LD_INT 59
11466: PUSH
11467: LD_INT 63
11469: PUSH
11470: LD_INT 64
11472: PUSH
11473: LD_INT 65
11475: PUSH
11476: LD_INT 82
11478: PUSH
11479: LD_INT 83
11481: PUSH
11482: LD_INT 84
11484: PUSH
11485: LD_INT 85
11487: PUSH
11488: LD_INT 86
11490: PUSH
11491: LD_INT 89
11493: PUSH
11494: LD_INT 91
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: ST_TO_ADDR
11554: GO 11557
11556: POP
// if state > - 1 and state < 3 then
11557: LD_VAR 0 3
11561: PUSH
11562: LD_INT 1
11564: NEG
11565: GREATER
11566: IFFALSE 11578
11568: PUSH
11569: LD_VAR 0 3
11573: PUSH
11574: LD_INT 3
11576: LESS
11577: AND
11578: IFFALSE 11635
// for i in result do
11580: LD_ADDR_VAR 0 5
11584: PUSH
11585: LD_VAR 0 4
11589: PUSH
11590: FOR_IN
11591: IFFALSE 11633
// if GetTech ( i , side ) <> state then
11593: LD_VAR 0 5
11597: PPUSH
11598: LD_VAR 0 1
11602: PPUSH
11603: CALL_OW 321
11607: PUSH
11608: LD_VAR 0 3
11612: NONEQUAL
11613: IFFALSE 11631
// result := result diff i ;
11615: LD_ADDR_VAR 0 4
11619: PUSH
11620: LD_VAR 0 4
11624: PUSH
11625: LD_VAR 0 5
11629: DIFF
11630: ST_TO_ADDR
11631: GO 11590
11633: POP
11634: POP
// end ;
11635: LD_VAR 0 4
11639: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11640: LD_INT 0
11642: PPUSH
11643: PPUSH
11644: PPUSH
// result := true ;
11645: LD_ADDR_VAR 0 3
11649: PUSH
11650: LD_INT 1
11652: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11653: LD_ADDR_VAR 0 5
11657: PUSH
11658: LD_VAR 0 2
11662: PPUSH
11663: CALL_OW 480
11667: ST_TO_ADDR
// if not tmp then
11668: LD_VAR 0 5
11672: NOT
11673: IFFALSE 11677
// exit ;
11675: GO 11726
// for i in tmp do
11677: LD_ADDR_VAR 0 4
11681: PUSH
11682: LD_VAR 0 5
11686: PUSH
11687: FOR_IN
11688: IFFALSE 11724
// if GetTech ( i , side ) <> state_researched then
11690: LD_VAR 0 4
11694: PPUSH
11695: LD_VAR 0 1
11699: PPUSH
11700: CALL_OW 321
11704: PUSH
11705: LD_INT 2
11707: NONEQUAL
11708: IFFALSE 11722
// begin result := false ;
11710: LD_ADDR_VAR 0 3
11714: PUSH
11715: LD_INT 0
11717: ST_TO_ADDR
// exit ;
11718: POP
11719: POP
11720: GO 11726
// end ;
11722: GO 11687
11724: POP
11725: POP
// end ;
11726: LD_VAR 0 3
11730: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11731: LD_INT 0
11733: PPUSH
11734: PPUSH
11735: PPUSH
11736: PPUSH
11737: PPUSH
11738: PPUSH
11739: PPUSH
11740: PPUSH
11741: PPUSH
11742: PPUSH
11743: PPUSH
11744: PPUSH
11745: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11746: LD_VAR 0 1
11750: NOT
11751: IFTRUE 11768
11753: PUSH
11754: LD_VAR 0 1
11758: PPUSH
11759: CALL_OW 257
11763: PUSH
11764: LD_INT 9
11766: NONEQUAL
11767: OR
11768: IFFALSE 11772
// exit ;
11770: GO 12351
// side := GetSide ( unit ) ;
11772: LD_ADDR_VAR 0 9
11776: PUSH
11777: LD_VAR 0 1
11781: PPUSH
11782: CALL_OW 255
11786: ST_TO_ADDR
// tech_space := tech_spacanom ;
11787: LD_ADDR_VAR 0 12
11791: PUSH
11792: LD_INT 29
11794: ST_TO_ADDR
// tech_time := tech_taurad ;
11795: LD_ADDR_VAR 0 13
11799: PUSH
11800: LD_INT 28
11802: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11803: LD_ADDR_VAR 0 11
11807: PUSH
11808: LD_VAR 0 1
11812: PPUSH
11813: CALL_OW 310
11817: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11818: LD_VAR 0 11
11822: PPUSH
11823: CALL_OW 247
11827: PUSH
11828: LD_INT 2
11830: EQUAL
11831: IFFALSE 11835
// exit ;
11833: GO 12351
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11835: LD_ADDR_VAR 0 8
11839: PUSH
11840: LD_INT 81
11842: PUSH
11843: LD_VAR 0 9
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: LD_INT 3
11854: PUSH
11855: LD_INT 21
11857: PUSH
11858: LD_INT 3
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PPUSH
11873: CALL_OW 69
11877: ST_TO_ADDR
// if not tmp then
11878: LD_VAR 0 8
11882: NOT
11883: IFFALSE 11887
// exit ;
11885: GO 12351
// if in_unit then
11887: LD_VAR 0 11
11891: IFFALSE 11915
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11893: LD_ADDR_VAR 0 10
11897: PUSH
11898: LD_VAR 0 8
11902: PPUSH
11903: LD_VAR 0 11
11907: PPUSH
11908: CALL_OW 74
11912: ST_TO_ADDR
11913: GO 11935
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11915: LD_ADDR_VAR 0 10
11919: PUSH
11920: LD_VAR 0 8
11924: PPUSH
11925: LD_VAR 0 1
11929: PPUSH
11930: CALL_OW 74
11934: ST_TO_ADDR
// if not enemy then
11935: LD_VAR 0 10
11939: NOT
11940: IFFALSE 11944
// exit ;
11942: GO 12351
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11944: LD_VAR 0 11
11948: IFFALSE 11970
11950: PUSH
11951: LD_VAR 0 11
11955: PPUSH
11956: LD_VAR 0 10
11960: PPUSH
11961: CALL_OW 296
11965: PUSH
11966: LD_INT 13
11968: GREATER
11969: AND
11970: IFTRUE 11992
11972: PUSH
11973: LD_VAR 0 1
11977: PPUSH
11978: LD_VAR 0 10
11982: PPUSH
11983: CALL_OW 296
11987: PUSH
11988: LD_INT 12
11990: GREATER
11991: OR
11992: IFFALSE 11996
// exit ;
11994: GO 12351
// missile := [ 1 ] ;
11996: LD_ADDR_VAR 0 14
12000: PUSH
12001: LD_INT 1
12003: PUSH
12004: EMPTY
12005: LIST
12006: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12007: LD_VAR 0 9
12011: PPUSH
12012: LD_VAR 0 12
12016: PPUSH
12017: CALL_OW 325
12021: IFFALSE 12050
// missile := Replace ( missile , missile + 1 , 2 ) ;
12023: LD_ADDR_VAR 0 14
12027: PUSH
12028: LD_VAR 0 14
12032: PPUSH
12033: LD_VAR 0 14
12037: PUSH
12038: LD_INT 1
12040: PLUS
12041: PPUSH
12042: LD_INT 2
12044: PPUSH
12045: CALL_OW 1
12049: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12050: LD_VAR 0 9
12054: PPUSH
12055: LD_VAR 0 13
12059: PPUSH
12060: CALL_OW 325
12064: IFFALSE 12088
12066: PUSH
12067: LD_VAR 0 10
12071: PPUSH
12072: CALL_OW 255
12076: PPUSH
12077: LD_VAR 0 13
12081: PPUSH
12082: CALL_OW 325
12086: NOT
12087: AND
12088: IFFALSE 12117
// missile := Replace ( missile , missile + 1 , 3 ) ;
12090: LD_ADDR_VAR 0 14
12094: PUSH
12095: LD_VAR 0 14
12099: PPUSH
12100: LD_VAR 0 14
12104: PUSH
12105: LD_INT 1
12107: PLUS
12108: PPUSH
12109: LD_INT 3
12111: PPUSH
12112: CALL_OW 1
12116: ST_TO_ADDR
// if missile < 2 then
12117: LD_VAR 0 14
12121: PUSH
12122: LD_INT 2
12124: LESS
12125: IFFALSE 12129
// exit ;
12127: GO 12351
// x := GetX ( enemy ) ;
12129: LD_ADDR_VAR 0 4
12133: PUSH
12134: LD_VAR 0 10
12138: PPUSH
12139: CALL_OW 250
12143: ST_TO_ADDR
// y := GetY ( enemy ) ;
12144: LD_ADDR_VAR 0 5
12148: PUSH
12149: LD_VAR 0 10
12153: PPUSH
12154: CALL_OW 251
12158: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12159: LD_ADDR_VAR 0 6
12163: PUSH
12164: LD_VAR 0 4
12168: PUSH
12169: LD_INT 1
12171: NEG
12172: PPUSH
12173: LD_INT 1
12175: PPUSH
12176: CALL_OW 12
12180: PLUS
12181: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12182: LD_ADDR_VAR 0 7
12186: PUSH
12187: LD_VAR 0 5
12191: PUSH
12192: LD_INT 1
12194: NEG
12195: PPUSH
12196: LD_INT 1
12198: PPUSH
12199: CALL_OW 12
12203: PLUS
12204: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12205: LD_VAR 0 6
12209: PPUSH
12210: LD_VAR 0 7
12214: PPUSH
12215: CALL_OW 488
12219: NOT
12220: IFFALSE 12242
// begin _x := x ;
12222: LD_ADDR_VAR 0 6
12226: PUSH
12227: LD_VAR 0 4
12231: ST_TO_ADDR
// _y := y ;
12232: LD_ADDR_VAR 0 7
12236: PUSH
12237: LD_VAR 0 5
12241: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12242: LD_ADDR_VAR 0 3
12246: PUSH
12247: LD_INT 1
12249: PPUSH
12250: LD_VAR 0 14
12254: PPUSH
12255: CALL_OW 12
12259: ST_TO_ADDR
// case i of 1 :
12260: LD_VAR 0 3
12264: PUSH
12265: LD_INT 1
12267: DOUBLE
12268: EQUAL
12269: IFTRUE 12273
12271: GO 12290
12273: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12274: LD_VAR 0 1
12278: PPUSH
12279: LD_VAR 0 10
12283: PPUSH
12284: CALL_OW 115
12288: GO 12351
12290: LD_INT 2
12292: DOUBLE
12293: EQUAL
12294: IFTRUE 12298
12296: GO 12320
12298: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12299: LD_VAR 0 1
12303: PPUSH
12304: LD_VAR 0 6
12308: PPUSH
12309: LD_VAR 0 7
12313: PPUSH
12314: CALL_OW 153
12318: GO 12351
12320: LD_INT 3
12322: DOUBLE
12323: EQUAL
12324: IFTRUE 12328
12326: GO 12350
12328: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12329: LD_VAR 0 1
12333: PPUSH
12334: LD_VAR 0 6
12338: PPUSH
12339: LD_VAR 0 7
12343: PPUSH
12344: CALL_OW 154
12348: GO 12351
12350: POP
// end ;
12351: LD_VAR 0 2
12355: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12356: LD_INT 0
12358: PPUSH
12359: PPUSH
12360: PPUSH
12361: PPUSH
12362: PPUSH
12363: PPUSH
// if not unit or not building then
12364: LD_VAR 0 1
12368: NOT
12369: IFTRUE 12378
12371: PUSH
12372: LD_VAR 0 2
12376: NOT
12377: OR
12378: IFFALSE 12382
// exit ;
12380: GO 12540
// x := GetX ( building ) ;
12382: LD_ADDR_VAR 0 5
12386: PUSH
12387: LD_VAR 0 2
12391: PPUSH
12392: CALL_OW 250
12396: ST_TO_ADDR
// y := GetY ( building ) ;
12397: LD_ADDR_VAR 0 6
12401: PUSH
12402: LD_VAR 0 2
12406: PPUSH
12407: CALL_OW 251
12411: ST_TO_ADDR
// for i := 0 to 5 do
12412: LD_ADDR_VAR 0 4
12416: PUSH
12417: DOUBLE
12418: LD_INT 0
12420: DEC
12421: ST_TO_ADDR
12422: LD_INT 5
12424: PUSH
12425: FOR_TO
12426: IFFALSE 12538
// begin _x := ShiftX ( x , i , 3 ) ;
12428: LD_ADDR_VAR 0 7
12432: PUSH
12433: LD_VAR 0 5
12437: PPUSH
12438: LD_VAR 0 4
12442: PPUSH
12443: LD_INT 3
12445: PPUSH
12446: CALL_OW 272
12450: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12451: LD_ADDR_VAR 0 8
12455: PUSH
12456: LD_VAR 0 6
12460: PPUSH
12461: LD_VAR 0 4
12465: PPUSH
12466: LD_INT 3
12468: PPUSH
12469: CALL_OW 273
12473: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12474: LD_VAR 0 7
12478: PPUSH
12479: LD_VAR 0 8
12483: PPUSH
12484: CALL_OW 488
12488: NOT
12489: IFFALSE 12493
// continue ;
12491: GO 12425
// if HexInfo ( _x , _y ) = 0 then
12493: LD_VAR 0 7
12497: PPUSH
12498: LD_VAR 0 8
12502: PPUSH
12503: CALL_OW 428
12507: PUSH
12508: LD_INT 0
12510: EQUAL
12511: IFFALSE 12536
// begin ComMoveXY ( unit , _x , _y ) ;
12513: LD_VAR 0 1
12517: PPUSH
12518: LD_VAR 0 7
12522: PPUSH
12523: LD_VAR 0 8
12527: PPUSH
12528: CALL_OW 111
// exit ;
12532: POP
12533: POP
12534: GO 12540
// end ; end ;
12536: GO 12425
12538: POP
12539: POP
// end ;
12540: LD_VAR 0 3
12544: RET
// export function ScanBase ( side , base_area ) ; begin
12545: LD_INT 0
12547: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12548: LD_ADDR_VAR 0 3
12552: PUSH
12553: LD_VAR 0 2
12557: PPUSH
12558: LD_INT 81
12560: PUSH
12561: LD_VAR 0 1
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PPUSH
12570: CALL_OW 70
12574: ST_TO_ADDR
// end ;
12575: LD_VAR 0 3
12579: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12580: LD_INT 0
12582: PPUSH
12583: PPUSH
12584: PPUSH
12585: PPUSH
// result := false ;
12586: LD_ADDR_VAR 0 2
12590: PUSH
12591: LD_INT 0
12593: ST_TO_ADDR
// side := GetSide ( unit ) ;
12594: LD_ADDR_VAR 0 3
12598: PUSH
12599: LD_VAR 0 1
12603: PPUSH
12604: CALL_OW 255
12608: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12609: LD_ADDR_VAR 0 4
12613: PUSH
12614: LD_VAR 0 1
12618: PPUSH
12619: CALL_OW 248
12623: ST_TO_ADDR
// case nat of 1 :
12624: LD_VAR 0 4
12628: PUSH
12629: LD_INT 1
12631: DOUBLE
12632: EQUAL
12633: IFTRUE 12637
12635: GO 12648
12637: POP
// tech := tech_lassight ; 2 :
12638: LD_ADDR_VAR 0 5
12642: PUSH
12643: LD_INT 12
12645: ST_TO_ADDR
12646: GO 12687
12648: LD_INT 2
12650: DOUBLE
12651: EQUAL
12652: IFTRUE 12656
12654: GO 12667
12656: POP
// tech := tech_mortar ; 3 :
12657: LD_ADDR_VAR 0 5
12661: PUSH
12662: LD_INT 41
12664: ST_TO_ADDR
12665: GO 12687
12667: LD_INT 3
12669: DOUBLE
12670: EQUAL
12671: IFTRUE 12675
12673: GO 12686
12675: POP
// tech := tech_bazooka ; end ;
12676: LD_ADDR_VAR 0 5
12680: PUSH
12681: LD_INT 44
12683: ST_TO_ADDR
12684: GO 12687
12686: POP
// if Researched ( side , tech ) then
12687: LD_VAR 0 3
12691: PPUSH
12692: LD_VAR 0 5
12696: PPUSH
12697: CALL_OW 325
12701: IFFALSE 12728
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12703: LD_ADDR_VAR 0 2
12707: PUSH
12708: LD_INT 5
12710: PUSH
12711: LD_INT 8
12713: PUSH
12714: LD_INT 9
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: PUSH
12722: LD_VAR 0 4
12726: ARRAY
12727: ST_TO_ADDR
// end ;
12728: LD_VAR 0 2
12732: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12733: LD_INT 0
12735: PPUSH
12736: PPUSH
12737: PPUSH
// if not mines then
12738: LD_VAR 0 2
12742: NOT
12743: IFFALSE 12747
// exit ;
12745: GO 12891
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12747: LD_ADDR_VAR 0 5
12751: PUSH
12752: LD_INT 81
12754: PUSH
12755: LD_VAR 0 1
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 3
12766: PUSH
12767: LD_INT 21
12769: PUSH
12770: LD_INT 3
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PPUSH
12785: CALL_OW 69
12789: ST_TO_ADDR
// for i in mines do
12790: LD_ADDR_VAR 0 4
12794: PUSH
12795: LD_VAR 0 2
12799: PUSH
12800: FOR_IN
12801: IFFALSE 12889
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12803: LD_VAR 0 4
12807: PUSH
12808: LD_INT 1
12810: ARRAY
12811: PPUSH
12812: LD_VAR 0 4
12816: PUSH
12817: LD_INT 2
12819: ARRAY
12820: PPUSH
12821: CALL_OW 458
12825: NOT
12826: IFFALSE 12830
// continue ;
12828: GO 12800
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12830: LD_VAR 0 4
12834: PUSH
12835: LD_INT 1
12837: ARRAY
12838: PPUSH
12839: LD_VAR 0 4
12843: PUSH
12844: LD_INT 2
12846: ARRAY
12847: PPUSH
12848: CALL_OW 428
12852: PUSH
12853: LD_VAR 0 5
12857: IN
12858: IFFALSE 12887
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12860: LD_VAR 0 4
12864: PUSH
12865: LD_INT 1
12867: ARRAY
12868: PPUSH
12869: LD_VAR 0 4
12873: PUSH
12874: LD_INT 2
12876: ARRAY
12877: PPUSH
12878: LD_VAR 0 1
12882: PPUSH
12883: CALL_OW 456
// end ;
12887: GO 12800
12889: POP
12890: POP
// end ;
12891: LD_VAR 0 3
12895: RET
// export function Count ( array ) ; begin
12896: LD_INT 0
12898: PPUSH
// result := array + 0 ;
12899: LD_ADDR_VAR 0 2
12903: PUSH
12904: LD_VAR 0 1
12908: PUSH
12909: LD_INT 0
12911: PLUS
12912: ST_TO_ADDR
// end ;
12913: LD_VAR 0 2
12917: RET
// export function IsEmpty ( building ) ; begin
12918: LD_INT 0
12920: PPUSH
// if not building then
12921: LD_VAR 0 1
12925: NOT
12926: IFFALSE 12930
// exit ;
12928: GO 12973
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12930: LD_ADDR_VAR 0 2
12934: PUSH
12935: LD_VAR 0 1
12939: PUSH
12940: LD_INT 22
12942: PUSH
12943: LD_VAR 0 1
12947: PPUSH
12948: CALL_OW 255
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 58
12959: PUSH
12960: EMPTY
12961: LIST
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PPUSH
12967: CALL_OW 69
12971: IN
12972: ST_TO_ADDR
// end ;
12973: LD_VAR 0 2
12977: RET
// export function IsNotFull ( building ) ; var places ; begin
12978: LD_INT 0
12980: PPUSH
12981: PPUSH
// if not building then
12982: LD_VAR 0 1
12986: NOT
12987: IFFALSE 12991
// exit ;
12989: GO 13019
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12991: LD_ADDR_VAR 0 2
12995: PUSH
12996: LD_VAR 0 1
13000: PPUSH
13001: LD_INT 3
13003: PUSH
13004: LD_INT 62
13006: PUSH
13007: EMPTY
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PPUSH
13014: CALL_OW 72
13018: ST_TO_ADDR
// end ;
13019: LD_VAR 0 2
13023: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13024: LD_INT 0
13026: PPUSH
13027: PPUSH
13028: PPUSH
13029: PPUSH
// tmp := [ ] ;
13030: LD_ADDR_VAR 0 3
13034: PUSH
13035: EMPTY
13036: ST_TO_ADDR
// list := [ ] ;
13037: LD_ADDR_VAR 0 5
13041: PUSH
13042: EMPTY
13043: ST_TO_ADDR
// for i = 16 to 25 do
13044: LD_ADDR_VAR 0 4
13048: PUSH
13049: DOUBLE
13050: LD_INT 16
13052: DEC
13053: ST_TO_ADDR
13054: LD_INT 25
13056: PUSH
13057: FOR_TO
13058: IFFALSE 13131
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13060: LD_ADDR_VAR 0 3
13064: PUSH
13065: LD_VAR 0 3
13069: PUSH
13070: LD_INT 22
13072: PUSH
13073: LD_VAR 0 1
13077: PPUSH
13078: CALL_OW 255
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 91
13089: PUSH
13090: LD_VAR 0 1
13094: PUSH
13095: LD_INT 6
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 30
13105: PUSH
13106: LD_VAR 0 4
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: PPUSH
13123: CALL_OW 69
13127: ADD
13128: ST_TO_ADDR
13129: GO 13057
13131: POP
13132: POP
// for i = 1 to tmp do
13133: LD_ADDR_VAR 0 4
13137: PUSH
13138: DOUBLE
13139: LD_INT 1
13141: DEC
13142: ST_TO_ADDR
13143: LD_VAR 0 3
13147: PUSH
13148: FOR_TO
13149: IFFALSE 13237
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13151: LD_ADDR_VAR 0 5
13155: PUSH
13156: LD_VAR 0 5
13160: PUSH
13161: LD_VAR 0 3
13165: PUSH
13166: LD_VAR 0 4
13170: ARRAY
13171: PPUSH
13172: CALL_OW 266
13176: PUSH
13177: LD_VAR 0 3
13181: PUSH
13182: LD_VAR 0 4
13186: ARRAY
13187: PPUSH
13188: CALL_OW 250
13192: PUSH
13193: LD_VAR 0 3
13197: PUSH
13198: LD_VAR 0 4
13202: ARRAY
13203: PPUSH
13204: CALL_OW 251
13208: PUSH
13209: LD_VAR 0 3
13213: PUSH
13214: LD_VAR 0 4
13218: ARRAY
13219: PPUSH
13220: CALL_OW 254
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: ADD
13234: ST_TO_ADDR
13235: GO 13148
13237: POP
13238: POP
// result := list ;
13239: LD_ADDR_VAR 0 2
13243: PUSH
13244: LD_VAR 0 5
13248: ST_TO_ADDR
// end ;
13249: LD_VAR 0 2
13253: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13254: LD_INT 0
13256: PPUSH
13257: PPUSH
13258: PPUSH
13259: PPUSH
13260: PPUSH
13261: PPUSH
13262: PPUSH
// if not factory then
13263: LD_VAR 0 1
13267: NOT
13268: IFFALSE 13272
// exit ;
13270: GO 13875
// if control = control_apeman then
13272: LD_VAR 0 4
13276: PUSH
13277: LD_INT 5
13279: EQUAL
13280: IFFALSE 13389
// begin tmp := UnitsInside ( factory ) ;
13282: LD_ADDR_VAR 0 8
13286: PUSH
13287: LD_VAR 0 1
13291: PPUSH
13292: CALL_OW 313
13296: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13297: LD_VAR 0 8
13301: PPUSH
13302: LD_INT 25
13304: PUSH
13305: LD_INT 12
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PPUSH
13312: CALL_OW 72
13316: NOT
13317: IFFALSE 13327
// control := control_manual ;
13319: LD_ADDR_VAR 0 4
13323: PUSH
13324: LD_INT 1
13326: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13327: LD_ADDR_VAR 0 8
13331: PUSH
13332: LD_VAR 0 1
13336: PPUSH
13337: CALL 13024 0 1
13341: ST_TO_ADDR
// if tmp then
13342: LD_VAR 0 8
13346: IFFALSE 13389
// begin for i in tmp do
13348: LD_ADDR_VAR 0 7
13352: PUSH
13353: LD_VAR 0 8
13357: PUSH
13358: FOR_IN
13359: IFFALSE 13387
// if i [ 1 ] = b_ext_radio then
13361: LD_VAR 0 7
13365: PUSH
13366: LD_INT 1
13368: ARRAY
13369: PUSH
13370: LD_INT 22
13372: EQUAL
13373: IFFALSE 13385
// begin control := control_remote ;
13375: LD_ADDR_VAR 0 4
13379: PUSH
13380: LD_INT 2
13382: ST_TO_ADDR
// break ;
13383: GO 13387
// end ;
13385: GO 13358
13387: POP
13388: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13389: LD_VAR 0 1
13393: PPUSH
13394: LD_VAR 0 2
13398: PPUSH
13399: LD_VAR 0 3
13403: PPUSH
13404: LD_VAR 0 4
13408: PPUSH
13409: LD_VAR 0 5
13413: PPUSH
13414: CALL_OW 448
13418: IFFALSE 13453
// begin result := [ chassis , engine , control , weapon ] ;
13420: LD_ADDR_VAR 0 6
13424: PUSH
13425: LD_VAR 0 2
13429: PUSH
13430: LD_VAR 0 3
13434: PUSH
13435: LD_VAR 0 4
13439: PUSH
13440: LD_VAR 0 5
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: ST_TO_ADDR
// exit ;
13451: GO 13875
// end ; _chassis := AvailableChassisList ( factory ) ;
13453: LD_ADDR_VAR 0 9
13457: PUSH
13458: LD_VAR 0 1
13462: PPUSH
13463: CALL_OW 475
13467: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13468: LD_ADDR_VAR 0 11
13472: PUSH
13473: LD_VAR 0 1
13477: PPUSH
13478: CALL_OW 476
13482: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13483: LD_ADDR_VAR 0 12
13487: PUSH
13488: LD_VAR 0 1
13492: PPUSH
13493: CALL_OW 477
13497: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13498: LD_ADDR_VAR 0 10
13502: PUSH
13503: LD_VAR 0 1
13507: PPUSH
13508: CALL_OW 478
13512: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13513: LD_VAR 0 9
13517: NOT
13518: IFTRUE 13527
13520: PUSH
13521: LD_VAR 0 11
13525: NOT
13526: OR
13527: IFTRUE 13536
13529: PUSH
13530: LD_VAR 0 12
13534: NOT
13535: OR
13536: IFTRUE 13545
13538: PUSH
13539: LD_VAR 0 10
13543: NOT
13544: OR
13545: IFFALSE 13580
// begin result := [ chassis , engine , control , weapon ] ;
13547: LD_ADDR_VAR 0 6
13551: PUSH
13552: LD_VAR 0 2
13556: PUSH
13557: LD_VAR 0 3
13561: PUSH
13562: LD_VAR 0 4
13566: PUSH
13567: LD_VAR 0 5
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: ST_TO_ADDR
// exit ;
13578: GO 13875
// end ; if not chassis in _chassis then
13580: LD_VAR 0 2
13584: PUSH
13585: LD_VAR 0 9
13589: IN
13590: NOT
13591: IFFALSE 13617
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13593: LD_ADDR_VAR 0 2
13597: PUSH
13598: LD_VAR 0 9
13602: PUSH
13603: LD_INT 1
13605: PPUSH
13606: LD_VAR 0 9
13610: PPUSH
13611: CALL_OW 12
13615: ARRAY
13616: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13617: LD_VAR 0 2
13621: PPUSH
13622: LD_VAR 0 3
13626: PPUSH
13627: CALL 13880 0 2
13631: NOT
13632: IFFALSE 13693
// repeat engine := _engine [ 1 ] ;
13634: LD_ADDR_VAR 0 3
13638: PUSH
13639: LD_VAR 0 11
13643: PUSH
13644: LD_INT 1
13646: ARRAY
13647: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13648: LD_ADDR_VAR 0 11
13652: PUSH
13653: LD_VAR 0 11
13657: PPUSH
13658: LD_INT 1
13660: PPUSH
13661: CALL_OW 3
13665: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13666: LD_VAR 0 2
13670: PPUSH
13671: LD_VAR 0 3
13675: PPUSH
13676: CALL 13880 0 2
13680: IFTRUE 13691
13682: PUSH
13683: LD_VAR 0 11
13687: PUSH
13688: EMPTY
13689: EQUAL
13690: OR
13691: IFFALSE 13634
// if not control in _control then
13693: LD_VAR 0 4
13697: PUSH
13698: LD_VAR 0 12
13702: IN
13703: NOT
13704: IFFALSE 13730
// control := _control [ rand ( 1 , _control ) ] ;
13706: LD_ADDR_VAR 0 4
13710: PUSH
13711: LD_VAR 0 12
13715: PUSH
13716: LD_INT 1
13718: PPUSH
13719: LD_VAR 0 12
13723: PPUSH
13724: CALL_OW 12
13728: ARRAY
13729: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13730: LD_VAR 0 2
13734: PPUSH
13735: LD_VAR 0 5
13739: PPUSH
13740: CALL 14102 0 2
13744: NOT
13745: IFFALSE 13806
// repeat weapon := _weapon [ 1 ] ;
13747: LD_ADDR_VAR 0 5
13751: PUSH
13752: LD_VAR 0 10
13756: PUSH
13757: LD_INT 1
13759: ARRAY
13760: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13761: LD_ADDR_VAR 0 10
13765: PUSH
13766: LD_VAR 0 10
13770: PPUSH
13771: LD_INT 1
13773: PPUSH
13774: CALL_OW 3
13778: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13779: LD_VAR 0 2
13783: PPUSH
13784: LD_VAR 0 5
13788: PPUSH
13789: CALL 14102 0 2
13793: IFTRUE 13804
13795: PUSH
13796: LD_VAR 0 10
13800: PUSH
13801: EMPTY
13802: EQUAL
13803: OR
13804: IFFALSE 13747
// result := [ ] ;
13806: LD_ADDR_VAR 0 6
13810: PUSH
13811: EMPTY
13812: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13813: LD_VAR 0 1
13817: PPUSH
13818: LD_VAR 0 2
13822: PPUSH
13823: LD_VAR 0 3
13827: PPUSH
13828: LD_VAR 0 4
13832: PPUSH
13833: LD_VAR 0 5
13837: PPUSH
13838: CALL_OW 448
13842: IFFALSE 13875
// result := [ chassis , engine , control , weapon ] ;
13844: LD_ADDR_VAR 0 6
13848: PUSH
13849: LD_VAR 0 2
13853: PUSH
13854: LD_VAR 0 3
13858: PUSH
13859: LD_VAR 0 4
13863: PUSH
13864: LD_VAR 0 5
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: ST_TO_ADDR
// end ;
13875: LD_VAR 0 6
13879: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13880: LD_INT 0
13882: PPUSH
// if not chassis or not engine then
13883: LD_VAR 0 1
13887: NOT
13888: IFTRUE 13897
13890: PUSH
13891: LD_VAR 0 2
13895: NOT
13896: OR
13897: IFFALSE 13901
// exit ;
13899: GO 14097
// case engine of engine_solar :
13901: LD_VAR 0 2
13905: PUSH
13906: LD_INT 2
13908: DOUBLE
13909: EQUAL
13910: IFTRUE 13914
13912: GO 13952
13914: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13915: LD_ADDR_VAR 0 3
13919: PUSH
13920: LD_INT 11
13922: PUSH
13923: LD_INT 12
13925: PUSH
13926: LD_INT 13
13928: PUSH
13929: LD_INT 14
13931: PUSH
13932: LD_INT 1
13934: PUSH
13935: LD_INT 2
13937: PUSH
13938: LD_INT 3
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: ST_TO_ADDR
13950: GO 14081
13952: LD_INT 1
13954: DOUBLE
13955: EQUAL
13956: IFTRUE 13960
13958: GO 14022
13960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13961: LD_ADDR_VAR 0 3
13965: PUSH
13966: LD_INT 11
13968: PUSH
13969: LD_INT 12
13971: PUSH
13972: LD_INT 13
13974: PUSH
13975: LD_INT 14
13977: PUSH
13978: LD_INT 1
13980: PUSH
13981: LD_INT 2
13983: PUSH
13984: LD_INT 3
13986: PUSH
13987: LD_INT 4
13989: PUSH
13990: LD_INT 5
13992: PUSH
13993: LD_INT 21
13995: PUSH
13996: LD_INT 23
13998: PUSH
13999: LD_INT 22
14001: PUSH
14002: LD_INT 24
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: ST_TO_ADDR
14020: GO 14081
14022: LD_INT 3
14024: DOUBLE
14025: EQUAL
14026: IFTRUE 14030
14028: GO 14080
14030: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14031: LD_ADDR_VAR 0 3
14035: PUSH
14036: LD_INT 13
14038: PUSH
14039: LD_INT 14
14041: PUSH
14042: LD_INT 2
14044: PUSH
14045: LD_INT 3
14047: PUSH
14048: LD_INT 4
14050: PUSH
14051: LD_INT 5
14053: PUSH
14054: LD_INT 21
14056: PUSH
14057: LD_INT 22
14059: PUSH
14060: LD_INT 23
14062: PUSH
14063: LD_INT 24
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: ST_TO_ADDR
14078: GO 14081
14080: POP
// result := ( chassis in result ) ;
14081: LD_ADDR_VAR 0 3
14085: PUSH
14086: LD_VAR 0 1
14090: PUSH
14091: LD_VAR 0 3
14095: IN
14096: ST_TO_ADDR
// end ;
14097: LD_VAR 0 3
14101: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14102: LD_INT 0
14104: PPUSH
// if not chassis or not weapon then
14105: LD_VAR 0 1
14109: NOT
14110: IFTRUE 14119
14112: PUSH
14113: LD_VAR 0 2
14117: NOT
14118: OR
14119: IFFALSE 14123
// exit ;
14121: GO 15217
// case weapon of us_machine_gun :
14123: LD_VAR 0 2
14127: PUSH
14128: LD_INT 2
14130: DOUBLE
14131: EQUAL
14132: IFTRUE 14136
14134: GO 14166
14136: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14137: LD_ADDR_VAR 0 3
14141: PUSH
14142: LD_INT 1
14144: PUSH
14145: LD_INT 2
14147: PUSH
14148: LD_INT 3
14150: PUSH
14151: LD_INT 4
14153: PUSH
14154: LD_INT 5
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: ST_TO_ADDR
14164: GO 15201
14166: LD_INT 3
14168: DOUBLE
14169: EQUAL
14170: IFTRUE 14174
14172: GO 14204
14174: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14175: LD_ADDR_VAR 0 3
14179: PUSH
14180: LD_INT 1
14182: PUSH
14183: LD_INT 2
14185: PUSH
14186: LD_INT 3
14188: PUSH
14189: LD_INT 4
14191: PUSH
14192: LD_INT 5
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: ST_TO_ADDR
14202: GO 15201
14204: LD_INT 11
14206: DOUBLE
14207: EQUAL
14208: IFTRUE 14212
14210: GO 14242
14212: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14213: LD_ADDR_VAR 0 3
14217: PUSH
14218: LD_INT 1
14220: PUSH
14221: LD_INT 2
14223: PUSH
14224: LD_INT 3
14226: PUSH
14227: LD_INT 4
14229: PUSH
14230: LD_INT 5
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: ST_TO_ADDR
14240: GO 15201
14242: LD_INT 4
14244: DOUBLE
14245: EQUAL
14246: IFTRUE 14250
14248: GO 14276
14250: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14251: LD_ADDR_VAR 0 3
14255: PUSH
14256: LD_INT 2
14258: PUSH
14259: LD_INT 3
14261: PUSH
14262: LD_INT 4
14264: PUSH
14265: LD_INT 5
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: ST_TO_ADDR
14274: GO 15201
14276: LD_INT 5
14278: DOUBLE
14279: EQUAL
14280: IFTRUE 14284
14282: GO 14310
14284: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14285: LD_ADDR_VAR 0 3
14289: PUSH
14290: LD_INT 2
14292: PUSH
14293: LD_INT 3
14295: PUSH
14296: LD_INT 4
14298: PUSH
14299: LD_INT 5
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: ST_TO_ADDR
14308: GO 15201
14310: LD_INT 9
14312: DOUBLE
14313: EQUAL
14314: IFTRUE 14318
14316: GO 14344
14318: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14319: LD_ADDR_VAR 0 3
14323: PUSH
14324: LD_INT 2
14326: PUSH
14327: LD_INT 3
14329: PUSH
14330: LD_INT 4
14332: PUSH
14333: LD_INT 5
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: ST_TO_ADDR
14342: GO 15201
14344: LD_INT 7
14346: DOUBLE
14347: EQUAL
14348: IFTRUE 14352
14350: GO 14378
14352: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14353: LD_ADDR_VAR 0 3
14357: PUSH
14358: LD_INT 2
14360: PUSH
14361: LD_INT 3
14363: PUSH
14364: LD_INT 4
14366: PUSH
14367: LD_INT 5
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: ST_TO_ADDR
14376: GO 15201
14378: LD_INT 12
14380: DOUBLE
14381: EQUAL
14382: IFTRUE 14386
14384: GO 14412
14386: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14387: LD_ADDR_VAR 0 3
14391: PUSH
14392: LD_INT 2
14394: PUSH
14395: LD_INT 3
14397: PUSH
14398: LD_INT 4
14400: PUSH
14401: LD_INT 5
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: ST_TO_ADDR
14410: GO 15201
14412: LD_INT 13
14414: DOUBLE
14415: EQUAL
14416: IFTRUE 14420
14418: GO 14446
14420: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14421: LD_ADDR_VAR 0 3
14425: PUSH
14426: LD_INT 2
14428: PUSH
14429: LD_INT 3
14431: PUSH
14432: LD_INT 4
14434: PUSH
14435: LD_INT 5
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: ST_TO_ADDR
14444: GO 15201
14446: LD_INT 14
14448: DOUBLE
14449: EQUAL
14450: IFTRUE 14454
14452: GO 14472
14454: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14455: LD_ADDR_VAR 0 3
14459: PUSH
14460: LD_INT 4
14462: PUSH
14463: LD_INT 5
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: ST_TO_ADDR
14470: GO 15201
14472: LD_INT 6
14474: DOUBLE
14475: EQUAL
14476: IFTRUE 14480
14478: GO 14498
14480: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14481: LD_ADDR_VAR 0 3
14485: PUSH
14486: LD_INT 4
14488: PUSH
14489: LD_INT 5
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: ST_TO_ADDR
14496: GO 15201
14498: LD_INT 10
14500: DOUBLE
14501: EQUAL
14502: IFTRUE 14506
14504: GO 14524
14506: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14507: LD_ADDR_VAR 0 3
14511: PUSH
14512: LD_INT 4
14514: PUSH
14515: LD_INT 5
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: ST_TO_ADDR
14522: GO 15201
14524: LD_INT 22
14526: DOUBLE
14527: EQUAL
14528: IFTRUE 14532
14530: GO 14558
14532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14533: LD_ADDR_VAR 0 3
14537: PUSH
14538: LD_INT 11
14540: PUSH
14541: LD_INT 12
14543: PUSH
14544: LD_INT 13
14546: PUSH
14547: LD_INT 14
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: ST_TO_ADDR
14556: GO 15201
14558: LD_INT 23
14560: DOUBLE
14561: EQUAL
14562: IFTRUE 14566
14564: GO 14592
14566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14567: LD_ADDR_VAR 0 3
14571: PUSH
14572: LD_INT 11
14574: PUSH
14575: LD_INT 12
14577: PUSH
14578: LD_INT 13
14580: PUSH
14581: LD_INT 14
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: ST_TO_ADDR
14590: GO 15201
14592: LD_INT 24
14594: DOUBLE
14595: EQUAL
14596: IFTRUE 14600
14598: GO 14626
14600: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14601: LD_ADDR_VAR 0 3
14605: PUSH
14606: LD_INT 11
14608: PUSH
14609: LD_INT 12
14611: PUSH
14612: LD_INT 13
14614: PUSH
14615: LD_INT 14
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: ST_TO_ADDR
14624: GO 15201
14626: LD_INT 30
14628: DOUBLE
14629: EQUAL
14630: IFTRUE 14634
14632: GO 14660
14634: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14635: LD_ADDR_VAR 0 3
14639: PUSH
14640: LD_INT 11
14642: PUSH
14643: LD_INT 12
14645: PUSH
14646: LD_INT 13
14648: PUSH
14649: LD_INT 14
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: ST_TO_ADDR
14658: GO 15201
14660: LD_INT 25
14662: DOUBLE
14663: EQUAL
14664: IFTRUE 14668
14666: GO 14686
14668: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14669: LD_ADDR_VAR 0 3
14673: PUSH
14674: LD_INT 13
14676: PUSH
14677: LD_INT 14
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: ST_TO_ADDR
14684: GO 15201
14686: LD_INT 27
14688: DOUBLE
14689: EQUAL
14690: IFTRUE 14694
14692: GO 14712
14694: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14695: LD_ADDR_VAR 0 3
14699: PUSH
14700: LD_INT 13
14702: PUSH
14703: LD_INT 14
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: ST_TO_ADDR
14710: GO 15201
14712: LD_INT 92
14714: DOUBLE
14715: EQUAL
14716: IFTRUE 14720
14718: GO 14746
14720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14721: LD_ADDR_VAR 0 3
14725: PUSH
14726: LD_INT 11
14728: PUSH
14729: LD_INT 12
14731: PUSH
14732: LD_INT 13
14734: PUSH
14735: LD_INT 14
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: ST_TO_ADDR
14744: GO 15201
14746: LD_INT 28
14748: DOUBLE
14749: EQUAL
14750: IFTRUE 14754
14752: GO 14772
14754: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14755: LD_ADDR_VAR 0 3
14759: PUSH
14760: LD_INT 13
14762: PUSH
14763: LD_INT 14
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: ST_TO_ADDR
14770: GO 15201
14772: LD_INT 29
14774: DOUBLE
14775: EQUAL
14776: IFTRUE 14780
14778: GO 14798
14780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14781: LD_ADDR_VAR 0 3
14785: PUSH
14786: LD_INT 13
14788: PUSH
14789: LD_INT 14
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: ST_TO_ADDR
14796: GO 15201
14798: LD_INT 31
14800: DOUBLE
14801: EQUAL
14802: IFTRUE 14806
14804: GO 14824
14806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14807: LD_ADDR_VAR 0 3
14811: PUSH
14812: LD_INT 13
14814: PUSH
14815: LD_INT 14
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: ST_TO_ADDR
14822: GO 15201
14824: LD_INT 26
14826: DOUBLE
14827: EQUAL
14828: IFTRUE 14832
14830: GO 14850
14832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14833: LD_ADDR_VAR 0 3
14837: PUSH
14838: LD_INT 13
14840: PUSH
14841: LD_INT 14
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: ST_TO_ADDR
14848: GO 15201
14850: LD_INT 42
14852: DOUBLE
14853: EQUAL
14854: IFTRUE 14858
14856: GO 14884
14858: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14859: LD_ADDR_VAR 0 3
14863: PUSH
14864: LD_INT 21
14866: PUSH
14867: LD_INT 22
14869: PUSH
14870: LD_INT 23
14872: PUSH
14873: LD_INT 24
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: ST_TO_ADDR
14882: GO 15201
14884: LD_INT 43
14886: DOUBLE
14887: EQUAL
14888: IFTRUE 14892
14890: GO 14918
14892: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14893: LD_ADDR_VAR 0 3
14897: PUSH
14898: LD_INT 21
14900: PUSH
14901: LD_INT 22
14903: PUSH
14904: LD_INT 23
14906: PUSH
14907: LD_INT 24
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: ST_TO_ADDR
14916: GO 15201
14918: LD_INT 44
14920: DOUBLE
14921: EQUAL
14922: IFTRUE 14926
14924: GO 14952
14926: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14927: LD_ADDR_VAR 0 3
14931: PUSH
14932: LD_INT 21
14934: PUSH
14935: LD_INT 22
14937: PUSH
14938: LD_INT 23
14940: PUSH
14941: LD_INT 24
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: ST_TO_ADDR
14950: GO 15201
14952: LD_INT 45
14954: DOUBLE
14955: EQUAL
14956: IFTRUE 14960
14958: GO 14986
14960: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14961: LD_ADDR_VAR 0 3
14965: PUSH
14966: LD_INT 21
14968: PUSH
14969: LD_INT 22
14971: PUSH
14972: LD_INT 23
14974: PUSH
14975: LD_INT 24
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: ST_TO_ADDR
14984: GO 15201
14986: LD_INT 49
14988: DOUBLE
14989: EQUAL
14990: IFTRUE 14994
14992: GO 15020
14994: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14995: LD_ADDR_VAR 0 3
14999: PUSH
15000: LD_INT 21
15002: PUSH
15003: LD_INT 22
15005: PUSH
15006: LD_INT 23
15008: PUSH
15009: LD_INT 24
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: ST_TO_ADDR
15018: GO 15201
15020: LD_INT 51
15022: DOUBLE
15023: EQUAL
15024: IFTRUE 15028
15026: GO 15054
15028: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15029: LD_ADDR_VAR 0 3
15033: PUSH
15034: LD_INT 21
15036: PUSH
15037: LD_INT 22
15039: PUSH
15040: LD_INT 23
15042: PUSH
15043: LD_INT 24
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: ST_TO_ADDR
15052: GO 15201
15054: LD_INT 52
15056: DOUBLE
15057: EQUAL
15058: IFTRUE 15062
15060: GO 15088
15062: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15063: LD_ADDR_VAR 0 3
15067: PUSH
15068: LD_INT 21
15070: PUSH
15071: LD_INT 22
15073: PUSH
15074: LD_INT 23
15076: PUSH
15077: LD_INT 24
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: ST_TO_ADDR
15086: GO 15201
15088: LD_INT 53
15090: DOUBLE
15091: EQUAL
15092: IFTRUE 15096
15094: GO 15114
15096: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15097: LD_ADDR_VAR 0 3
15101: PUSH
15102: LD_INT 23
15104: PUSH
15105: LD_INT 24
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: ST_TO_ADDR
15112: GO 15201
15114: LD_INT 46
15116: DOUBLE
15117: EQUAL
15118: IFTRUE 15122
15120: GO 15140
15122: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15123: LD_ADDR_VAR 0 3
15127: PUSH
15128: LD_INT 23
15130: PUSH
15131: LD_INT 24
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: ST_TO_ADDR
15138: GO 15201
15140: LD_INT 47
15142: DOUBLE
15143: EQUAL
15144: IFTRUE 15148
15146: GO 15166
15148: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15149: LD_ADDR_VAR 0 3
15153: PUSH
15154: LD_INT 23
15156: PUSH
15157: LD_INT 24
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: ST_TO_ADDR
15164: GO 15201
15166: LD_INT 98
15168: DOUBLE
15169: EQUAL
15170: IFTRUE 15174
15172: GO 15200
15174: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15175: LD_ADDR_VAR 0 3
15179: PUSH
15180: LD_INT 21
15182: PUSH
15183: LD_INT 22
15185: PUSH
15186: LD_INT 23
15188: PUSH
15189: LD_INT 24
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: ST_TO_ADDR
15198: GO 15201
15200: POP
// result := ( chassis in result ) ;
15201: LD_ADDR_VAR 0 3
15205: PUSH
15206: LD_VAR 0 1
15210: PUSH
15211: LD_VAR 0 3
15215: IN
15216: ST_TO_ADDR
// end ;
15217: LD_VAR 0 3
15221: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15222: LD_INT 0
15224: PPUSH
15225: PPUSH
15226: PPUSH
15227: PPUSH
15228: PPUSH
15229: PPUSH
15230: PPUSH
// result := array ;
15231: LD_ADDR_VAR 0 5
15235: PUSH
15236: LD_VAR 0 1
15240: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15241: LD_VAR 0 1
15245: NOT
15246: IFTRUE 15255
15248: PUSH
15249: LD_VAR 0 2
15253: NOT
15254: OR
15255: IFTRUE 15264
15257: PUSH
15258: LD_VAR 0 3
15262: NOT
15263: OR
15264: IFTRUE 15278
15266: PUSH
15267: LD_VAR 0 2
15271: PUSH
15272: LD_VAR 0 1
15276: GREATER
15277: OR
15278: IFTRUE 15292
15280: PUSH
15281: LD_VAR 0 3
15285: PUSH
15286: LD_VAR 0 1
15290: GREATER
15291: OR
15292: IFFALSE 15296
// exit ;
15294: GO 15592
// if direction then
15296: LD_VAR 0 4
15300: IFFALSE 15364
// begin d := 1 ;
15302: LD_ADDR_VAR 0 9
15306: PUSH
15307: LD_INT 1
15309: ST_TO_ADDR
// if i_from > i_to then
15310: LD_VAR 0 2
15314: PUSH
15315: LD_VAR 0 3
15319: GREATER
15320: IFFALSE 15346
// length := ( array - i_from ) + i_to else
15322: LD_ADDR_VAR 0 11
15326: PUSH
15327: LD_VAR 0 1
15331: PUSH
15332: LD_VAR 0 2
15336: MINUS
15337: PUSH
15338: LD_VAR 0 3
15342: PLUS
15343: ST_TO_ADDR
15344: GO 15362
// length := i_to - i_from ;
15346: LD_ADDR_VAR 0 11
15350: PUSH
15351: LD_VAR 0 3
15355: PUSH
15356: LD_VAR 0 2
15360: MINUS
15361: ST_TO_ADDR
// end else
15362: GO 15425
// begin d := - 1 ;
15364: LD_ADDR_VAR 0 9
15368: PUSH
15369: LD_INT 1
15371: NEG
15372: ST_TO_ADDR
// if i_from > i_to then
15373: LD_VAR 0 2
15377: PUSH
15378: LD_VAR 0 3
15382: GREATER
15383: IFFALSE 15403
// length := i_from - i_to else
15385: LD_ADDR_VAR 0 11
15389: PUSH
15390: LD_VAR 0 2
15394: PUSH
15395: LD_VAR 0 3
15399: MINUS
15400: ST_TO_ADDR
15401: GO 15425
// length := ( array - i_to ) + i_from ;
15403: LD_ADDR_VAR 0 11
15407: PUSH
15408: LD_VAR 0 1
15412: PUSH
15413: LD_VAR 0 3
15417: MINUS
15418: PUSH
15419: LD_VAR 0 2
15423: PLUS
15424: ST_TO_ADDR
// end ; if not length then
15425: LD_VAR 0 11
15429: NOT
15430: IFFALSE 15434
// exit ;
15432: GO 15592
// tmp := array ;
15434: LD_ADDR_VAR 0 10
15438: PUSH
15439: LD_VAR 0 1
15443: ST_TO_ADDR
// for i = 1 to length do
15444: LD_ADDR_VAR 0 6
15448: PUSH
15449: DOUBLE
15450: LD_INT 1
15452: DEC
15453: ST_TO_ADDR
15454: LD_VAR 0 11
15458: PUSH
15459: FOR_TO
15460: IFFALSE 15580
// begin for j = 1 to array do
15462: LD_ADDR_VAR 0 7
15466: PUSH
15467: DOUBLE
15468: LD_INT 1
15470: DEC
15471: ST_TO_ADDR
15472: LD_VAR 0 1
15476: PUSH
15477: FOR_TO
15478: IFFALSE 15566
// begin k := j + d ;
15480: LD_ADDR_VAR 0 8
15484: PUSH
15485: LD_VAR 0 7
15489: PUSH
15490: LD_VAR 0 9
15494: PLUS
15495: ST_TO_ADDR
// if k > array then
15496: LD_VAR 0 8
15500: PUSH
15501: LD_VAR 0 1
15505: GREATER
15506: IFFALSE 15516
// k := 1 ;
15508: LD_ADDR_VAR 0 8
15512: PUSH
15513: LD_INT 1
15515: ST_TO_ADDR
// if not k then
15516: LD_VAR 0 8
15520: NOT
15521: IFFALSE 15533
// k := array ;
15523: LD_ADDR_VAR 0 8
15527: PUSH
15528: LD_VAR 0 1
15532: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15533: LD_ADDR_VAR 0 10
15537: PUSH
15538: LD_VAR 0 10
15542: PPUSH
15543: LD_VAR 0 8
15547: PPUSH
15548: LD_VAR 0 1
15552: PUSH
15553: LD_VAR 0 7
15557: ARRAY
15558: PPUSH
15559: CALL_OW 1
15563: ST_TO_ADDR
// end ;
15564: GO 15477
15566: POP
15567: POP
// array := tmp ;
15568: LD_ADDR_VAR 0 1
15572: PUSH
15573: LD_VAR 0 10
15577: ST_TO_ADDR
// end ;
15578: GO 15459
15580: POP
15581: POP
// result := array ;
15582: LD_ADDR_VAR 0 5
15586: PUSH
15587: LD_VAR 0 1
15591: ST_TO_ADDR
// end ;
15592: LD_VAR 0 5
15596: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15597: LD_INT 0
15599: PPUSH
15600: PPUSH
// result := 0 ;
15601: LD_ADDR_VAR 0 3
15605: PUSH
15606: LD_INT 0
15608: ST_TO_ADDR
// if not array or not value in array then
15609: LD_VAR 0 1
15613: NOT
15614: IFTRUE 15629
15616: PUSH
15617: LD_VAR 0 2
15621: PUSH
15622: LD_VAR 0 1
15626: IN
15627: NOT
15628: OR
15629: IFFALSE 15633
// exit ;
15631: GO 15687
// for i = 1 to array do
15633: LD_ADDR_VAR 0 4
15637: PUSH
15638: DOUBLE
15639: LD_INT 1
15641: DEC
15642: ST_TO_ADDR
15643: LD_VAR 0 1
15647: PUSH
15648: FOR_TO
15649: IFFALSE 15685
// if value = array [ i ] then
15651: LD_VAR 0 2
15655: PUSH
15656: LD_VAR 0 1
15660: PUSH
15661: LD_VAR 0 4
15665: ARRAY
15666: EQUAL
15667: IFFALSE 15683
// begin result := i ;
15669: LD_ADDR_VAR 0 3
15673: PUSH
15674: LD_VAR 0 4
15678: ST_TO_ADDR
// exit ;
15679: POP
15680: POP
15681: GO 15687
// end ;
15683: GO 15648
15685: POP
15686: POP
// end ;
15687: LD_VAR 0 3
15691: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15692: LD_INT 0
15694: PPUSH
// vc_chassis := chassis ;
15695: LD_ADDR_OWVAR 37
15699: PUSH
15700: LD_VAR 0 1
15704: ST_TO_ADDR
// vc_engine := engine ;
15705: LD_ADDR_OWVAR 39
15709: PUSH
15710: LD_VAR 0 2
15714: ST_TO_ADDR
// vc_control := control ;
15715: LD_ADDR_OWVAR 38
15719: PUSH
15720: LD_VAR 0 3
15724: ST_TO_ADDR
// vc_weapon := weapon ;
15725: LD_ADDR_OWVAR 40
15729: PUSH
15730: LD_VAR 0 4
15734: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15735: LD_ADDR_OWVAR 41
15739: PUSH
15740: LD_VAR 0 5
15744: ST_TO_ADDR
// end ;
15745: LD_VAR 0 6
15749: RET
// export function WantPlant ( unit ) ; var task ; begin
15750: LD_INT 0
15752: PPUSH
15753: PPUSH
// result := false ;
15754: LD_ADDR_VAR 0 2
15758: PUSH
15759: LD_INT 0
15761: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15762: LD_ADDR_VAR 0 3
15766: PUSH
15767: LD_VAR 0 1
15771: PPUSH
15772: CALL_OW 437
15776: ST_TO_ADDR
// if task then
15777: LD_VAR 0 3
15781: IFFALSE 15809
// if task [ 1 ] [ 1 ] = p then
15783: LD_VAR 0 3
15787: PUSH
15788: LD_INT 1
15790: ARRAY
15791: PUSH
15792: LD_INT 1
15794: ARRAY
15795: PUSH
15796: LD_STRING p
15798: EQUAL
15799: IFFALSE 15809
// result := true ;
15801: LD_ADDR_VAR 0 2
15805: PUSH
15806: LD_INT 1
15808: ST_TO_ADDR
// end ;
15809: LD_VAR 0 2
15813: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15814: LD_INT 0
15816: PPUSH
15817: PPUSH
15818: PPUSH
15819: PPUSH
// if pos < 1 then
15820: LD_VAR 0 2
15824: PUSH
15825: LD_INT 1
15827: LESS
15828: IFFALSE 15832
// exit ;
15830: GO 16135
// if pos = 1 then
15832: LD_VAR 0 2
15836: PUSH
15837: LD_INT 1
15839: EQUAL
15840: IFFALSE 15873
// result := Replace ( arr , pos [ 1 ] , value ) else
15842: LD_ADDR_VAR 0 4
15846: PUSH
15847: LD_VAR 0 1
15851: PPUSH
15852: LD_VAR 0 2
15856: PUSH
15857: LD_INT 1
15859: ARRAY
15860: PPUSH
15861: LD_VAR 0 3
15865: PPUSH
15866: CALL_OW 1
15870: ST_TO_ADDR
15871: GO 16135
// begin tmp := arr ;
15873: LD_ADDR_VAR 0 6
15877: PUSH
15878: LD_VAR 0 1
15882: ST_TO_ADDR
// s_arr := [ tmp ] ;
15883: LD_ADDR_VAR 0 7
15887: PUSH
15888: LD_VAR 0 6
15892: PUSH
15893: EMPTY
15894: LIST
15895: ST_TO_ADDR
// for i = 1 to pos - 1 do
15896: LD_ADDR_VAR 0 5
15900: PUSH
15901: DOUBLE
15902: LD_INT 1
15904: DEC
15905: ST_TO_ADDR
15906: LD_VAR 0 2
15910: PUSH
15911: LD_INT 1
15913: MINUS
15914: PUSH
15915: FOR_TO
15916: IFFALSE 15961
// begin tmp := tmp [ pos [ i ] ] ;
15918: LD_ADDR_VAR 0 6
15922: PUSH
15923: LD_VAR 0 6
15927: PUSH
15928: LD_VAR 0 2
15932: PUSH
15933: LD_VAR 0 5
15937: ARRAY
15938: ARRAY
15939: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15940: LD_ADDR_VAR 0 7
15944: PUSH
15945: LD_VAR 0 7
15949: PUSH
15950: LD_VAR 0 6
15954: PUSH
15955: EMPTY
15956: LIST
15957: ADD
15958: ST_TO_ADDR
// end ;
15959: GO 15915
15961: POP
15962: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15963: LD_ADDR_VAR 0 6
15967: PUSH
15968: LD_VAR 0 6
15972: PPUSH
15973: LD_VAR 0 2
15977: PUSH
15978: LD_VAR 0 2
15982: ARRAY
15983: PPUSH
15984: LD_VAR 0 3
15988: PPUSH
15989: CALL_OW 1
15993: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15994: LD_ADDR_VAR 0 7
15998: PUSH
15999: LD_VAR 0 7
16003: PPUSH
16004: LD_VAR 0 7
16008: PPUSH
16009: LD_VAR 0 6
16013: PPUSH
16014: CALL_OW 1
16018: ST_TO_ADDR
// for i = s_arr downto 2 do
16019: LD_ADDR_VAR 0 5
16023: PUSH
16024: DOUBLE
16025: LD_VAR 0 7
16029: INC
16030: ST_TO_ADDR
16031: LD_INT 2
16033: PUSH
16034: FOR_DOWNTO
16035: IFFALSE 16119
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16037: LD_ADDR_VAR 0 6
16041: PUSH
16042: LD_VAR 0 7
16046: PUSH
16047: LD_VAR 0 5
16051: PUSH
16052: LD_INT 1
16054: MINUS
16055: ARRAY
16056: PPUSH
16057: LD_VAR 0 2
16061: PUSH
16062: LD_VAR 0 5
16066: PUSH
16067: LD_INT 1
16069: MINUS
16070: ARRAY
16071: PPUSH
16072: LD_VAR 0 7
16076: PUSH
16077: LD_VAR 0 5
16081: ARRAY
16082: PPUSH
16083: CALL_OW 1
16087: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16088: LD_ADDR_VAR 0 7
16092: PUSH
16093: LD_VAR 0 7
16097: PPUSH
16098: LD_VAR 0 5
16102: PUSH
16103: LD_INT 1
16105: MINUS
16106: PPUSH
16107: LD_VAR 0 6
16111: PPUSH
16112: CALL_OW 1
16116: ST_TO_ADDR
// end ;
16117: GO 16034
16119: POP
16120: POP
// result := s_arr [ 1 ] ;
16121: LD_ADDR_VAR 0 4
16125: PUSH
16126: LD_VAR 0 7
16130: PUSH
16131: LD_INT 1
16133: ARRAY
16134: ST_TO_ADDR
// end ; end ;
16135: LD_VAR 0 4
16139: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16140: LD_INT 0
16142: PPUSH
16143: PPUSH
// if not list then
16144: LD_VAR 0 1
16148: NOT
16149: IFFALSE 16153
// exit ;
16151: GO 16244
// i := list [ pos1 ] ;
16153: LD_ADDR_VAR 0 5
16157: PUSH
16158: LD_VAR 0 1
16162: PUSH
16163: LD_VAR 0 2
16167: ARRAY
16168: ST_TO_ADDR
// if not i then
16169: LD_VAR 0 5
16173: NOT
16174: IFFALSE 16178
// exit ;
16176: GO 16244
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16178: LD_ADDR_VAR 0 1
16182: PUSH
16183: LD_VAR 0 1
16187: PPUSH
16188: LD_VAR 0 2
16192: PPUSH
16193: LD_VAR 0 1
16197: PUSH
16198: LD_VAR 0 3
16202: ARRAY
16203: PPUSH
16204: CALL_OW 1
16208: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16209: LD_ADDR_VAR 0 1
16213: PUSH
16214: LD_VAR 0 1
16218: PPUSH
16219: LD_VAR 0 3
16223: PPUSH
16224: LD_VAR 0 5
16228: PPUSH
16229: CALL_OW 1
16233: ST_TO_ADDR
// result := list ;
16234: LD_ADDR_VAR 0 4
16238: PUSH
16239: LD_VAR 0 1
16243: ST_TO_ADDR
// end ;
16244: LD_VAR 0 4
16248: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16249: LD_INT 0
16251: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16252: LD_ADDR_VAR 0 5
16256: PUSH
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL_OW 250
16266: PPUSH
16267: LD_VAR 0 1
16271: PPUSH
16272: CALL_OW 251
16276: PPUSH
16277: LD_VAR 0 2
16281: PPUSH
16282: LD_VAR 0 3
16286: PPUSH
16287: LD_VAR 0 4
16291: PPUSH
16292: CALL 16674 0 5
16296: ST_TO_ADDR
// end ;
16297: LD_VAR 0 5
16301: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16302: LD_INT 0
16304: PPUSH
16305: PPUSH
16306: PPUSH
16307: PPUSH
// if not list or not unit then
16308: LD_VAR 0 2
16312: NOT
16313: IFTRUE 16322
16315: PUSH
16316: LD_VAR 0 1
16320: NOT
16321: OR
16322: IFFALSE 16326
// exit ;
16324: GO 16669
// result := [ ] ;
16326: LD_ADDR_VAR 0 5
16330: PUSH
16331: EMPTY
16332: ST_TO_ADDR
// for i in list do
16333: LD_ADDR_VAR 0 6
16337: PUSH
16338: LD_VAR 0 2
16342: PUSH
16343: FOR_IN
16344: IFFALSE 16562
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
16346: LD_ADDR_VAR 0 8
16350: PUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: LD_VAR 0 6
16360: PUSH
16361: LD_INT 1
16363: ARRAY
16364: PPUSH
16365: LD_VAR 0 6
16369: PUSH
16370: LD_INT 2
16372: ARRAY
16373: PPUSH
16374: CALL_OW 297
16378: ST_TO_ADDR
// if not Count ( result ) then
16379: LD_VAR 0 5
16383: PPUSH
16384: CALL 12896 0 1
16388: NOT
16389: IFFALSE 16422
// begin result := Join ( result , [ i , tmp ] ) ;
16391: LD_ADDR_VAR 0 5
16395: PUSH
16396: LD_VAR 0 5
16400: PPUSH
16401: LD_VAR 0 6
16405: PUSH
16406: LD_VAR 0 8
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PPUSH
16415: CALL 48862 0 2
16419: ST_TO_ADDR
// continue ;
16420: GO 16343
// end ; if result [ result ] [ 2 ] <= tmp then
16422: LD_VAR 0 5
16426: PUSH
16427: LD_VAR 0 5
16431: ARRAY
16432: PUSH
16433: LD_INT 2
16435: ARRAY
16436: PUSH
16437: LD_VAR 0 8
16441: LESSEQUAL
16442: IFFALSE 16475
// result := Join ( result , [ i , tmp ] ) else
16444: LD_ADDR_VAR 0 5
16448: PUSH
16449: LD_VAR 0 5
16453: PPUSH
16454: LD_VAR 0 6
16458: PUSH
16459: LD_VAR 0 8
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PPUSH
16468: CALL 48862 0 2
16472: ST_TO_ADDR
16473: GO 16560
// begin for j := 1 to Count ( result ) do
16475: LD_ADDR_VAR 0 7
16479: PUSH
16480: DOUBLE
16481: LD_INT 1
16483: DEC
16484: ST_TO_ADDR
16485: LD_VAR 0 5
16489: PPUSH
16490: CALL 12896 0 1
16494: PUSH
16495: FOR_TO
16496: IFFALSE 16558
// begin if tmp < result [ j ] [ 2 ] then
16498: LD_VAR 0 8
16502: PUSH
16503: LD_VAR 0 5
16507: PUSH
16508: LD_VAR 0 7
16512: ARRAY
16513: PUSH
16514: LD_INT 2
16516: ARRAY
16517: LESS
16518: IFFALSE 16556
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16520: LD_ADDR_VAR 0 5
16524: PUSH
16525: LD_VAR 0 5
16529: PPUSH
16530: LD_VAR 0 7
16534: PPUSH
16535: LD_VAR 0 6
16539: PUSH
16540: LD_VAR 0 8
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 2
16553: ST_TO_ADDR
// break ;
16554: GO 16558
// end ; end ;
16556: GO 16495
16558: POP
16559: POP
// end ; end ;
16560: GO 16343
16562: POP
16563: POP
// if result and not asc then
16564: LD_VAR 0 5
16568: IFFALSE 16577
16570: PUSH
16571: LD_VAR 0 3
16575: NOT
16576: AND
16577: IFFALSE 16594
// result := ReverseArray ( result ) ;
16579: LD_ADDR_VAR 0 5
16583: PUSH
16584: LD_VAR 0 5
16588: PPUSH
16589: CALL 43952 0 1
16593: ST_TO_ADDR
// tmp := [ ] ;
16594: LD_ADDR_VAR 0 8
16598: PUSH
16599: EMPTY
16600: ST_TO_ADDR
// if mode then
16601: LD_VAR 0 4
16605: IFFALSE 16669
// begin for i := 1 to result do
16607: LD_ADDR_VAR 0 6
16611: PUSH
16612: DOUBLE
16613: LD_INT 1
16615: DEC
16616: ST_TO_ADDR
16617: LD_VAR 0 5
16621: PUSH
16622: FOR_TO
16623: IFFALSE 16657
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
16625: LD_ADDR_VAR 0 8
16629: PUSH
16630: LD_VAR 0 8
16634: PPUSH
16635: LD_VAR 0 5
16639: PUSH
16640: LD_VAR 0 6
16644: ARRAY
16645: PUSH
16646: LD_INT 1
16648: ARRAY
16649: PPUSH
16650: CALL 48862 0 2
16654: ST_TO_ADDR
16655: GO 16622
16657: POP
16658: POP
// result := tmp ;
16659: LD_ADDR_VAR 0 5
16663: PUSH
16664: LD_VAR 0 8
16668: ST_TO_ADDR
// end ; end ;
16669: LD_VAR 0 5
16673: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16674: LD_INT 0
16676: PPUSH
16677: PPUSH
16678: PPUSH
16679: PPUSH
// if not list then
16680: LD_VAR 0 3
16684: NOT
16685: IFFALSE 16689
// exit ;
16687: GO 17079
// result := [ ] ;
16689: LD_ADDR_VAR 0 6
16693: PUSH
16694: EMPTY
16695: ST_TO_ADDR
// for i in list do
16696: LD_ADDR_VAR 0 7
16700: PUSH
16701: LD_VAR 0 3
16705: PUSH
16706: FOR_IN
16707: IFFALSE 16909
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16709: LD_ADDR_VAR 0 9
16713: PUSH
16714: LD_VAR 0 7
16718: PPUSH
16719: LD_VAR 0 1
16723: PPUSH
16724: LD_VAR 0 2
16728: PPUSH
16729: CALL_OW 297
16733: ST_TO_ADDR
// if not result then
16734: LD_VAR 0 6
16738: NOT
16739: IFFALSE 16765
// result := [ [ i , tmp ] ] else
16741: LD_ADDR_VAR 0 6
16745: PUSH
16746: LD_VAR 0 7
16750: PUSH
16751: LD_VAR 0 9
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: EMPTY
16761: LIST
16762: ST_TO_ADDR
16763: GO 16907
// begin if result [ result ] [ 2 ] <= tmp then
16765: LD_VAR 0 6
16769: PUSH
16770: LD_VAR 0 6
16774: ARRAY
16775: PUSH
16776: LD_INT 2
16778: ARRAY
16779: PUSH
16780: LD_VAR 0 9
16784: LESSEQUAL
16785: IFFALSE 16827
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16787: LD_ADDR_VAR 0 6
16791: PUSH
16792: LD_VAR 0 6
16796: PPUSH
16797: LD_VAR 0 6
16801: PUSH
16802: LD_INT 1
16804: PLUS
16805: PPUSH
16806: LD_VAR 0 7
16810: PUSH
16811: LD_VAR 0 9
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PPUSH
16820: CALL_OW 2
16824: ST_TO_ADDR
16825: GO 16907
// for j := 1 to result do
16827: LD_ADDR_VAR 0 8
16831: PUSH
16832: DOUBLE
16833: LD_INT 1
16835: DEC
16836: ST_TO_ADDR
16837: LD_VAR 0 6
16841: PUSH
16842: FOR_TO
16843: IFFALSE 16905
// begin if tmp < result [ j ] [ 2 ] then
16845: LD_VAR 0 9
16849: PUSH
16850: LD_VAR 0 6
16854: PUSH
16855: LD_VAR 0 8
16859: ARRAY
16860: PUSH
16861: LD_INT 2
16863: ARRAY
16864: LESS
16865: IFFALSE 16903
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16867: LD_ADDR_VAR 0 6
16871: PUSH
16872: LD_VAR 0 6
16876: PPUSH
16877: LD_VAR 0 8
16881: PPUSH
16882: LD_VAR 0 7
16886: PUSH
16887: LD_VAR 0 9
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PPUSH
16896: CALL_OW 2
16900: ST_TO_ADDR
// break ;
16901: GO 16905
// end ; end ;
16903: GO 16842
16905: POP
16906: POP
// end ; end ;
16907: GO 16706
16909: POP
16910: POP
// if result and not asc then
16911: LD_VAR 0 6
16915: IFFALSE 16924
16917: PUSH
16918: LD_VAR 0 4
16922: NOT
16923: AND
16924: IFFALSE 16999
// begin tmp := result ;
16926: LD_ADDR_VAR 0 9
16930: PUSH
16931: LD_VAR 0 6
16935: ST_TO_ADDR
// for i = tmp downto 1 do
16936: LD_ADDR_VAR 0 7
16940: PUSH
16941: DOUBLE
16942: LD_VAR 0 9
16946: INC
16947: ST_TO_ADDR
16948: LD_INT 1
16950: PUSH
16951: FOR_DOWNTO
16952: IFFALSE 16997
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16954: LD_ADDR_VAR 0 6
16958: PUSH
16959: LD_VAR 0 6
16963: PPUSH
16964: LD_VAR 0 9
16968: PUSH
16969: LD_VAR 0 7
16973: MINUS
16974: PUSH
16975: LD_INT 1
16977: PLUS
16978: PPUSH
16979: LD_VAR 0 9
16983: PUSH
16984: LD_VAR 0 7
16988: ARRAY
16989: PPUSH
16990: CALL_OW 1
16994: ST_TO_ADDR
16995: GO 16951
16997: POP
16998: POP
// end ; tmp := [ ] ;
16999: LD_ADDR_VAR 0 9
17003: PUSH
17004: EMPTY
17005: ST_TO_ADDR
// if mode then
17006: LD_VAR 0 5
17010: IFFALSE 17079
// begin for i = 1 to result do
17012: LD_ADDR_VAR 0 7
17016: PUSH
17017: DOUBLE
17018: LD_INT 1
17020: DEC
17021: ST_TO_ADDR
17022: LD_VAR 0 6
17026: PUSH
17027: FOR_TO
17028: IFFALSE 17067
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17030: LD_ADDR_VAR 0 9
17034: PUSH
17035: LD_VAR 0 9
17039: PPUSH
17040: LD_VAR 0 7
17044: PPUSH
17045: LD_VAR 0 6
17049: PUSH
17050: LD_VAR 0 7
17054: ARRAY
17055: PUSH
17056: LD_INT 1
17058: ARRAY
17059: PPUSH
17060: CALL_OW 1
17064: ST_TO_ADDR
17065: GO 17027
17067: POP
17068: POP
// result := tmp ;
17069: LD_ADDR_VAR 0 6
17073: PUSH
17074: LD_VAR 0 9
17078: ST_TO_ADDR
// end ; end ;
17079: LD_VAR 0 6
17083: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17084: LD_INT 0
17086: PPUSH
17087: PPUSH
17088: PPUSH
17089: PPUSH
17090: PPUSH
17091: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17092: LD_ADDR_VAR 0 5
17096: PUSH
17097: LD_INT 0
17099: PUSH
17100: LD_INT 0
17102: PUSH
17103: LD_INT 0
17105: PUSH
17106: EMPTY
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: ST_TO_ADDR
// if not x or not y then
17114: LD_VAR 0 2
17118: NOT
17119: IFTRUE 17128
17121: PUSH
17122: LD_VAR 0 3
17126: NOT
17127: OR
17128: IFFALSE 17132
// exit ;
17130: GO 18788
// if not range then
17132: LD_VAR 0 4
17136: NOT
17137: IFFALSE 17147
// range := 10 ;
17139: LD_ADDR_VAR 0 4
17143: PUSH
17144: LD_INT 10
17146: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17147: LD_ADDR_VAR 0 8
17151: PUSH
17152: LD_INT 81
17154: PUSH
17155: LD_VAR 0 1
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 92
17166: PUSH
17167: LD_VAR 0 2
17171: PUSH
17172: LD_VAR 0 3
17176: PUSH
17177: LD_VAR 0 4
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 3
17190: PUSH
17191: LD_INT 21
17193: PUSH
17194: LD_INT 3
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: LIST
17209: PPUSH
17210: CALL_OW 69
17214: ST_TO_ADDR
// if not tmp then
17215: LD_VAR 0 8
17219: NOT
17220: IFFALSE 17224
// exit ;
17222: GO 18788
// for i in tmp do
17224: LD_ADDR_VAR 0 6
17228: PUSH
17229: LD_VAR 0 8
17233: PUSH
17234: FOR_IN
17235: IFFALSE 18763
// begin points := [ 0 , 0 , 0 ] ;
17237: LD_ADDR_VAR 0 9
17241: PUSH
17242: LD_INT 0
17244: PUSH
17245: LD_INT 0
17247: PUSH
17248: LD_INT 0
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: LIST
17255: ST_TO_ADDR
// bpoints := 1 ;
17256: LD_ADDR_VAR 0 10
17260: PUSH
17261: LD_INT 1
17263: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17264: LD_VAR 0 6
17268: PPUSH
17269: CALL_OW 247
17273: PUSH
17274: LD_INT 1
17276: DOUBLE
17277: EQUAL
17278: IFTRUE 17282
17280: GO 17864
17282: POP
// begin if GetClass ( i ) = 1 then
17283: LD_VAR 0 6
17287: PPUSH
17288: CALL_OW 257
17292: PUSH
17293: LD_INT 1
17295: EQUAL
17296: IFFALSE 17317
// points := [ 10 , 5 , 3 ] ;
17298: LD_ADDR_VAR 0 9
17302: PUSH
17303: LD_INT 10
17305: PUSH
17306: LD_INT 5
17308: PUSH
17309: LD_INT 3
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: LIST
17316: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17317: LD_VAR 0 6
17321: PPUSH
17322: CALL_OW 257
17326: PUSH
17327: LD_INT 2
17329: PUSH
17330: LD_INT 3
17332: PUSH
17333: LD_INT 4
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: IN
17341: IFFALSE 17362
// points := [ 3 , 2 , 1 ] ;
17343: LD_ADDR_VAR 0 9
17347: PUSH
17348: LD_INT 3
17350: PUSH
17351: LD_INT 2
17353: PUSH
17354: LD_INT 1
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: LIST
17361: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17362: LD_VAR 0 6
17366: PPUSH
17367: CALL_OW 257
17371: PUSH
17372: LD_INT 5
17374: EQUAL
17375: IFFALSE 17396
// points := [ 130 , 5 , 2 ] ;
17377: LD_ADDR_VAR 0 9
17381: PUSH
17382: LD_INT 130
17384: PUSH
17385: LD_INT 5
17387: PUSH
17388: LD_INT 2
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: LIST
17395: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17396: LD_VAR 0 6
17400: PPUSH
17401: CALL_OW 257
17405: PUSH
17406: LD_INT 8
17408: EQUAL
17409: IFFALSE 17430
// points := [ 35 , 35 , 30 ] ;
17411: LD_ADDR_VAR 0 9
17415: PUSH
17416: LD_INT 35
17418: PUSH
17419: LD_INT 35
17421: PUSH
17422: LD_INT 30
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: LIST
17429: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17430: LD_VAR 0 6
17434: PPUSH
17435: CALL_OW 257
17439: PUSH
17440: LD_INT 9
17442: EQUAL
17443: IFFALSE 17464
// points := [ 20 , 55 , 40 ] ;
17445: LD_ADDR_VAR 0 9
17449: PUSH
17450: LD_INT 20
17452: PUSH
17453: LD_INT 55
17455: PUSH
17456: LD_INT 40
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: LIST
17463: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17464: LD_VAR 0 6
17468: PPUSH
17469: CALL_OW 257
17473: PUSH
17474: LD_INT 12
17476: PUSH
17477: LD_INT 16
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: IN
17484: IFFALSE 17505
// points := [ 5 , 3 , 2 ] ;
17486: LD_ADDR_VAR 0 9
17490: PUSH
17491: LD_INT 5
17493: PUSH
17494: LD_INT 3
17496: PUSH
17497: LD_INT 2
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: LIST
17504: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17505: LD_VAR 0 6
17509: PPUSH
17510: CALL_OW 257
17514: PUSH
17515: LD_INT 17
17517: EQUAL
17518: IFFALSE 17539
// points := [ 100 , 50 , 75 ] ;
17520: LD_ADDR_VAR 0 9
17524: PUSH
17525: LD_INT 100
17527: PUSH
17528: LD_INT 50
17530: PUSH
17531: LD_INT 75
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: LIST
17538: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17539: LD_VAR 0 6
17543: PPUSH
17544: CALL_OW 257
17548: PUSH
17549: LD_INT 15
17551: EQUAL
17552: IFFALSE 17573
// points := [ 10 , 5 , 3 ] ;
17554: LD_ADDR_VAR 0 9
17558: PUSH
17559: LD_INT 10
17561: PUSH
17562: LD_INT 5
17564: PUSH
17565: LD_INT 3
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: LIST
17572: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17573: LD_VAR 0 6
17577: PPUSH
17578: CALL_OW 257
17582: PUSH
17583: LD_INT 14
17585: EQUAL
17586: IFFALSE 17607
// points := [ 10 , 0 , 0 ] ;
17588: LD_ADDR_VAR 0 9
17592: PUSH
17593: LD_INT 10
17595: PUSH
17596: LD_INT 0
17598: PUSH
17599: LD_INT 0
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17607: LD_VAR 0 6
17611: PPUSH
17612: CALL_OW 257
17616: PUSH
17617: LD_INT 11
17619: EQUAL
17620: IFFALSE 17641
// points := [ 30 , 10 , 5 ] ;
17622: LD_ADDR_VAR 0 9
17626: PUSH
17627: LD_INT 30
17629: PUSH
17630: LD_INT 10
17632: PUSH
17633: LD_INT 5
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: LIST
17640: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17641: LD_VAR 0 1
17645: PPUSH
17646: LD_INT 5
17648: PPUSH
17649: CALL_OW 321
17653: PUSH
17654: LD_INT 2
17656: EQUAL
17657: IFFALSE 17674
// bpoints := bpoints * 1.8 ;
17659: LD_ADDR_VAR 0 10
17663: PUSH
17664: LD_VAR 0 10
17668: PUSH
17669: LD_REAL  1.80000000000000E+0000
17672: MUL
17673: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17674: LD_VAR 0 6
17678: PPUSH
17679: CALL_OW 257
17683: PUSH
17684: LD_INT 1
17686: PUSH
17687: LD_INT 2
17689: PUSH
17690: LD_INT 3
17692: PUSH
17693: LD_INT 4
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: IN
17702: IFFALSE 17722
17704: PUSH
17705: LD_VAR 0 1
17709: PPUSH
17710: LD_INT 51
17712: PPUSH
17713: CALL_OW 321
17717: PUSH
17718: LD_INT 2
17720: EQUAL
17721: AND
17722: IFFALSE 17739
// bpoints := bpoints * 1.2 ;
17724: LD_ADDR_VAR 0 10
17728: PUSH
17729: LD_VAR 0 10
17733: PUSH
17734: LD_REAL  1.20000000000000E+0000
17737: MUL
17738: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17739: LD_VAR 0 6
17743: PPUSH
17744: CALL_OW 257
17748: PUSH
17749: LD_INT 5
17751: PUSH
17752: LD_INT 7
17754: PUSH
17755: LD_INT 9
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: LIST
17762: IN
17763: IFFALSE 17783
17765: PUSH
17766: LD_VAR 0 1
17770: PPUSH
17771: LD_INT 52
17773: PPUSH
17774: CALL_OW 321
17778: PUSH
17779: LD_INT 2
17781: EQUAL
17782: AND
17783: IFFALSE 17800
// bpoints := bpoints * 1.5 ;
17785: LD_ADDR_VAR 0 10
17789: PUSH
17790: LD_VAR 0 10
17794: PUSH
17795: LD_REAL  1.50000000000000E+0000
17798: MUL
17799: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17800: LD_VAR 0 1
17804: PPUSH
17805: LD_INT 66
17807: PPUSH
17808: CALL_OW 321
17812: PUSH
17813: LD_INT 2
17815: EQUAL
17816: IFFALSE 17833
// bpoints := bpoints * 1.1 ;
17818: LD_ADDR_VAR 0 10
17822: PUSH
17823: LD_VAR 0 10
17827: PUSH
17828: LD_REAL  1.10000000000000E+0000
17831: MUL
17832: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17833: LD_ADDR_VAR 0 10
17837: PUSH
17838: LD_VAR 0 10
17842: PUSH
17843: LD_VAR 0 6
17847: PPUSH
17848: LD_INT 1
17850: PPUSH
17851: CALL_OW 259
17855: PUSH
17856: LD_REAL  1.15000000000000E+0000
17859: MUL
17860: MUL
17861: ST_TO_ADDR
// end ; unit_vehicle :
17862: GO 18692
17864: LD_INT 2
17866: DOUBLE
17867: EQUAL
17868: IFTRUE 17872
17870: GO 18680
17872: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17873: LD_VAR 0 6
17877: PPUSH
17878: CALL_OW 264
17882: PUSH
17883: LD_INT 2
17885: PUSH
17886: LD_INT 42
17888: PUSH
17889: LD_INT 24
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: LIST
17896: IN
17897: IFFALSE 17918
// points := [ 25 , 5 , 3 ] ;
17899: LD_ADDR_VAR 0 9
17903: PUSH
17904: LD_INT 25
17906: PUSH
17907: LD_INT 5
17909: PUSH
17910: LD_INT 3
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: LIST
17917: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17918: LD_VAR 0 6
17922: PPUSH
17923: CALL_OW 264
17927: PUSH
17928: LD_INT 4
17930: PUSH
17931: LD_INT 43
17933: PUSH
17934: LD_INT 25
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: LIST
17941: IN
17942: IFFALSE 17963
// points := [ 40 , 15 , 5 ] ;
17944: LD_ADDR_VAR 0 9
17948: PUSH
17949: LD_INT 40
17951: PUSH
17952: LD_INT 15
17954: PUSH
17955: LD_INT 5
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: LIST
17962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17963: LD_VAR 0 6
17967: PPUSH
17968: CALL_OW 264
17972: PUSH
17973: LD_INT 3
17975: PUSH
17976: LD_INT 23
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: IN
17983: IFFALSE 18004
// points := [ 7 , 25 , 8 ] ;
17985: LD_ADDR_VAR 0 9
17989: PUSH
17990: LD_INT 7
17992: PUSH
17993: LD_INT 25
17995: PUSH
17996: LD_INT 8
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18004: LD_VAR 0 6
18008: PPUSH
18009: CALL_OW 264
18013: PUSH
18014: LD_INT 5
18016: PUSH
18017: LD_INT 27
18019: PUSH
18020: LD_INT 44
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: IN
18028: IFFALSE 18049
// points := [ 14 , 50 , 16 ] ;
18030: LD_ADDR_VAR 0 9
18034: PUSH
18035: LD_INT 14
18037: PUSH
18038: LD_INT 50
18040: PUSH
18041: LD_INT 16
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: LIST
18048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18049: LD_VAR 0 6
18053: PPUSH
18054: CALL_OW 264
18058: PUSH
18059: LD_INT 6
18061: PUSH
18062: LD_INT 46
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: IN
18069: IFFALSE 18090
// points := [ 32 , 120 , 70 ] ;
18071: LD_ADDR_VAR 0 9
18075: PUSH
18076: LD_INT 32
18078: PUSH
18079: LD_INT 120
18081: PUSH
18082: LD_INT 70
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: LIST
18089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18090: LD_VAR 0 6
18094: PPUSH
18095: CALL_OW 264
18099: PUSH
18100: LD_INT 7
18102: PUSH
18103: LD_INT 28
18105: PUSH
18106: LD_INT 45
18108: PUSH
18109: LD_INT 92
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: IN
18118: IFFALSE 18139
// points := [ 35 , 20 , 45 ] ;
18120: LD_ADDR_VAR 0 9
18124: PUSH
18125: LD_INT 35
18127: PUSH
18128: LD_INT 20
18130: PUSH
18131: LD_INT 45
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: LIST
18138: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18139: LD_VAR 0 6
18143: PPUSH
18144: CALL_OW 264
18148: PUSH
18149: LD_INT 47
18151: PUSH
18152: EMPTY
18153: LIST
18154: IN
18155: IFFALSE 18176
// points := [ 67 , 45 , 75 ] ;
18157: LD_ADDR_VAR 0 9
18161: PUSH
18162: LD_INT 67
18164: PUSH
18165: LD_INT 45
18167: PUSH
18168: LD_INT 75
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: LIST
18175: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18176: LD_VAR 0 6
18180: PPUSH
18181: CALL_OW 264
18185: PUSH
18186: LD_INT 26
18188: PUSH
18189: EMPTY
18190: LIST
18191: IN
18192: IFFALSE 18213
// points := [ 120 , 30 , 80 ] ;
18194: LD_ADDR_VAR 0 9
18198: PUSH
18199: LD_INT 120
18201: PUSH
18202: LD_INT 30
18204: PUSH
18205: LD_INT 80
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: LIST
18212: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18213: LD_VAR 0 6
18217: PPUSH
18218: CALL_OW 264
18222: PUSH
18223: LD_INT 22
18225: PUSH
18226: EMPTY
18227: LIST
18228: IN
18229: IFFALSE 18250
// points := [ 40 , 1 , 1 ] ;
18231: LD_ADDR_VAR 0 9
18235: PUSH
18236: LD_INT 40
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: LD_INT 1
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: LIST
18249: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18250: LD_VAR 0 6
18254: PPUSH
18255: CALL_OW 264
18259: PUSH
18260: LD_INT 29
18262: PUSH
18263: EMPTY
18264: LIST
18265: IN
18266: IFFALSE 18287
// points := [ 70 , 200 , 400 ] ;
18268: LD_ADDR_VAR 0 9
18272: PUSH
18273: LD_INT 70
18275: PUSH
18276: LD_INT 200
18278: PUSH
18279: LD_INT 400
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: LIST
18286: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18287: LD_VAR 0 6
18291: PPUSH
18292: CALL_OW 264
18296: PUSH
18297: LD_INT 14
18299: PUSH
18300: LD_INT 53
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: IN
18307: IFFALSE 18328
// points := [ 40 , 10 , 20 ] ;
18309: LD_ADDR_VAR 0 9
18313: PUSH
18314: LD_INT 40
18316: PUSH
18317: LD_INT 10
18319: PUSH
18320: LD_INT 20
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18328: LD_VAR 0 6
18332: PPUSH
18333: CALL_OW 264
18337: PUSH
18338: LD_INT 9
18340: PUSH
18341: EMPTY
18342: LIST
18343: IN
18344: IFFALSE 18365
// points := [ 5 , 70 , 20 ] ;
18346: LD_ADDR_VAR 0 9
18350: PUSH
18351: LD_INT 5
18353: PUSH
18354: LD_INT 70
18356: PUSH
18357: LD_INT 20
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: LIST
18364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18365: LD_VAR 0 6
18369: PPUSH
18370: CALL_OW 264
18374: PUSH
18375: LD_INT 10
18377: PUSH
18378: EMPTY
18379: LIST
18380: IN
18381: IFFALSE 18402
// points := [ 35 , 110 , 70 ] ;
18383: LD_ADDR_VAR 0 9
18387: PUSH
18388: LD_INT 35
18390: PUSH
18391: LD_INT 110
18393: PUSH
18394: LD_INT 70
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: LIST
18401: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18402: LD_VAR 0 6
18406: PPUSH
18407: CALL_OW 265
18411: PUSH
18412: LD_INT 25
18414: EQUAL
18415: IFFALSE 18436
// points := [ 80 , 65 , 100 ] ;
18417: LD_ADDR_VAR 0 9
18421: PUSH
18422: LD_INT 80
18424: PUSH
18425: LD_INT 65
18427: PUSH
18428: LD_INT 100
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: LIST
18435: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18436: LD_VAR 0 6
18440: PPUSH
18441: CALL_OW 263
18445: PUSH
18446: LD_INT 1
18448: EQUAL
18449: IFFALSE 18484
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18451: LD_ADDR_VAR 0 10
18455: PUSH
18456: LD_VAR 0 10
18460: PUSH
18461: LD_VAR 0 6
18465: PPUSH
18466: CALL_OW 311
18470: PPUSH
18471: LD_INT 3
18473: PPUSH
18474: CALL_OW 259
18478: PUSH
18479: LD_INT 4
18481: MUL
18482: MUL
18483: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18484: LD_VAR 0 6
18488: PPUSH
18489: CALL_OW 263
18493: PUSH
18494: LD_INT 2
18496: EQUAL
18497: IFFALSE 18548
// begin j := IsControledBy ( i ) ;
18499: LD_ADDR_VAR 0 7
18503: PUSH
18504: LD_VAR 0 6
18508: PPUSH
18509: CALL_OW 312
18513: ST_TO_ADDR
// if j then
18514: LD_VAR 0 7
18518: IFFALSE 18548
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18520: LD_ADDR_VAR 0 10
18524: PUSH
18525: LD_VAR 0 10
18529: PUSH
18530: LD_VAR 0 7
18534: PPUSH
18535: LD_INT 3
18537: PPUSH
18538: CALL_OW 259
18542: PUSH
18543: LD_INT 3
18545: MUL
18546: MUL
18547: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18548: LD_VAR 0 6
18552: PPUSH
18553: CALL_OW 264
18557: PUSH
18558: LD_INT 5
18560: PUSH
18561: LD_INT 6
18563: PUSH
18564: LD_INT 46
18566: PUSH
18567: LD_INT 44
18569: PUSH
18570: LD_INT 47
18572: PUSH
18573: LD_INT 45
18575: PUSH
18576: LD_INT 28
18578: PUSH
18579: LD_INT 7
18581: PUSH
18582: LD_INT 27
18584: PUSH
18585: LD_INT 29
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: IN
18600: IFFALSE 18620
18602: PUSH
18603: LD_VAR 0 1
18607: PPUSH
18608: LD_INT 52
18610: PPUSH
18611: CALL_OW 321
18615: PUSH
18616: LD_INT 2
18618: EQUAL
18619: AND
18620: IFFALSE 18637
// bpoints := bpoints * 1.2 ;
18622: LD_ADDR_VAR 0 10
18626: PUSH
18627: LD_VAR 0 10
18631: PUSH
18632: LD_REAL  1.20000000000000E+0000
18635: MUL
18636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18637: LD_VAR 0 6
18641: PPUSH
18642: CALL_OW 264
18646: PUSH
18647: LD_INT 6
18649: PUSH
18650: LD_INT 46
18652: PUSH
18653: LD_INT 47
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: IN
18661: IFFALSE 18678
// bpoints := bpoints * 1.2 ;
18663: LD_ADDR_VAR 0 10
18667: PUSH
18668: LD_VAR 0 10
18672: PUSH
18673: LD_REAL  1.20000000000000E+0000
18676: MUL
18677: ST_TO_ADDR
// end ; unit_building :
18678: GO 18692
18680: LD_INT 3
18682: DOUBLE
18683: EQUAL
18684: IFTRUE 18688
18686: GO 18691
18688: POP
// ; end ;
18689: GO 18692
18691: POP
// for j = 1 to 3 do
18692: LD_ADDR_VAR 0 7
18696: PUSH
18697: DOUBLE
18698: LD_INT 1
18700: DEC
18701: ST_TO_ADDR
18702: LD_INT 3
18704: PUSH
18705: FOR_TO
18706: IFFALSE 18759
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18708: LD_ADDR_VAR 0 5
18712: PUSH
18713: LD_VAR 0 5
18717: PPUSH
18718: LD_VAR 0 7
18722: PPUSH
18723: LD_VAR 0 5
18727: PUSH
18728: LD_VAR 0 7
18732: ARRAY
18733: PUSH
18734: LD_VAR 0 9
18738: PUSH
18739: LD_VAR 0 7
18743: ARRAY
18744: PUSH
18745: LD_VAR 0 10
18749: MUL
18750: PLUS
18751: PPUSH
18752: CALL_OW 1
18756: ST_TO_ADDR
18757: GO 18705
18759: POP
18760: POP
// end ;
18761: GO 17234
18763: POP
18764: POP
// result := Replace ( result , 4 , tmp ) ;
18765: LD_ADDR_VAR 0 5
18769: PUSH
18770: LD_VAR 0 5
18774: PPUSH
18775: LD_INT 4
18777: PPUSH
18778: LD_VAR 0 8
18782: PPUSH
18783: CALL_OW 1
18787: ST_TO_ADDR
// end ;
18788: LD_VAR 0 5
18792: RET
// export function DangerAtRange ( unit , range ) ; begin
18793: LD_INT 0
18795: PPUSH
// if not unit then
18796: LD_VAR 0 1
18800: NOT
18801: IFFALSE 18805
// exit ;
18803: GO 18850
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18805: LD_ADDR_VAR 0 3
18809: PUSH
18810: LD_VAR 0 1
18814: PPUSH
18815: CALL_OW 255
18819: PPUSH
18820: LD_VAR 0 1
18824: PPUSH
18825: CALL_OW 250
18829: PPUSH
18830: LD_VAR 0 1
18834: PPUSH
18835: CALL_OW 251
18839: PPUSH
18840: LD_VAR 0 2
18844: PPUSH
18845: CALL 17084 0 4
18849: ST_TO_ADDR
// end ;
18850: LD_VAR 0 3
18854: RET
// export function DangerInArea ( side , area ) ; begin
18855: LD_INT 0
18857: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18858: LD_ADDR_VAR 0 3
18862: PUSH
18863: LD_VAR 0 2
18867: PPUSH
18868: LD_INT 81
18870: PUSH
18871: LD_VAR 0 1
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PPUSH
18880: CALL_OW 70
18884: ST_TO_ADDR
// end ;
18885: LD_VAR 0 3
18889: RET
// export function IsExtension ( b ) ; begin
18890: LD_INT 0
18892: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18893: LD_ADDR_VAR 0 2
18897: PUSH
18898: LD_VAR 0 1
18902: PUSH
18903: LD_INT 23
18905: PUSH
18906: LD_INT 20
18908: PUSH
18909: LD_INT 22
18911: PUSH
18912: LD_INT 17
18914: PUSH
18915: LD_INT 24
18917: PUSH
18918: LD_INT 21
18920: PUSH
18921: LD_INT 19
18923: PUSH
18924: LD_INT 16
18926: PUSH
18927: LD_INT 25
18929: PUSH
18930: LD_INT 18
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: IN
18945: ST_TO_ADDR
// end ;
18946: LD_VAR 0 2
18950: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18951: LD_INT 0
18953: PPUSH
18954: PPUSH
18955: PPUSH
// result := [ ] ;
18956: LD_ADDR_VAR 0 4
18960: PUSH
18961: EMPTY
18962: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18963: LD_ADDR_VAR 0 5
18967: PUSH
18968: LD_VAR 0 2
18972: PPUSH
18973: LD_INT 21
18975: PUSH
18976: LD_INT 3
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PPUSH
18983: CALL_OW 70
18987: ST_TO_ADDR
// if not tmp then
18988: LD_VAR 0 5
18992: NOT
18993: IFFALSE 18997
// exit ;
18995: GO 19061
// if checkLink then
18997: LD_VAR 0 3
19001: IFFALSE 19051
// begin for i in tmp do
19003: LD_ADDR_VAR 0 6
19007: PUSH
19008: LD_VAR 0 5
19012: PUSH
19013: FOR_IN
19014: IFFALSE 19049
// if GetBase ( i ) <> base then
19016: LD_VAR 0 6
19020: PPUSH
19021: CALL_OW 274
19025: PUSH
19026: LD_VAR 0 1
19030: NONEQUAL
19031: IFFALSE 19047
// ComLinkToBase ( base , i ) ;
19033: LD_VAR 0 1
19037: PPUSH
19038: LD_VAR 0 6
19042: PPUSH
19043: CALL_OW 169
19047: GO 19013
19049: POP
19050: POP
// end ; result := tmp ;
19051: LD_ADDR_VAR 0 4
19055: PUSH
19056: LD_VAR 0 5
19060: ST_TO_ADDR
// end ;
19061: LD_VAR 0 4
19065: RET
// export function ComComplete ( units , b ) ; var i ; begin
19066: LD_INT 0
19068: PPUSH
19069: PPUSH
// if not units then
19070: LD_VAR 0 1
19074: NOT
19075: IFFALSE 19079
// exit ;
19077: GO 19169
// for i in units do
19079: LD_ADDR_VAR 0 4
19083: PUSH
19084: LD_VAR 0 1
19088: PUSH
19089: FOR_IN
19090: IFFALSE 19167
// if BuildingStatus ( b ) = bs_build then
19092: LD_VAR 0 2
19096: PPUSH
19097: CALL_OW 461
19101: PUSH
19102: LD_INT 1
19104: EQUAL
19105: IFFALSE 19165
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19107: LD_VAR 0 4
19111: PPUSH
19112: LD_STRING h
19114: PUSH
19115: LD_VAR 0 2
19119: PPUSH
19120: CALL_OW 250
19124: PUSH
19125: LD_VAR 0 2
19129: PPUSH
19130: CALL_OW 251
19134: PUSH
19135: LD_VAR 0 2
19139: PUSH
19140: LD_INT 0
19142: PUSH
19143: LD_INT 0
19145: PUSH
19146: LD_INT 0
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: PUSH
19158: EMPTY
19159: LIST
19160: PPUSH
19161: CALL_OW 446
19165: GO 19089
19167: POP
19168: POP
// end ;
19169: LD_VAR 0 3
19173: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19174: LD_INT 0
19176: PPUSH
19177: PPUSH
19178: PPUSH
19179: PPUSH
19180: PPUSH
19181: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19182: LD_VAR 0 1
19186: NOT
19187: IFTRUE 19204
19189: PUSH
19190: LD_VAR 0 1
19194: PPUSH
19195: CALL_OW 263
19199: PUSH
19200: LD_INT 2
19202: NONEQUAL
19203: OR
19204: IFFALSE 19208
// exit ;
19206: GO 19524
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19208: LD_ADDR_VAR 0 6
19212: PUSH
19213: LD_INT 22
19215: PUSH
19216: LD_VAR 0 1
19220: PPUSH
19221: CALL_OW 255
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 2
19232: PUSH
19233: LD_INT 30
19235: PUSH
19236: LD_INT 36
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 34
19245: PUSH
19246: LD_INT 31
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PPUSH
19262: CALL_OW 69
19266: ST_TO_ADDR
// if not tmp then
19267: LD_VAR 0 6
19271: NOT
19272: IFFALSE 19276
// exit ;
19274: GO 19524
// result := [ ] ;
19276: LD_ADDR_VAR 0 2
19280: PUSH
19281: EMPTY
19282: ST_TO_ADDR
// for i in tmp do
19283: LD_ADDR_VAR 0 3
19287: PUSH
19288: LD_VAR 0 6
19292: PUSH
19293: FOR_IN
19294: IFFALSE 19365
// begin t := UnitsInside ( i ) ;
19296: LD_ADDR_VAR 0 4
19300: PUSH
19301: LD_VAR 0 3
19305: PPUSH
19306: CALL_OW 313
19310: ST_TO_ADDR
// if t then
19311: LD_VAR 0 4
19315: IFFALSE 19363
// for j in t do
19317: LD_ADDR_VAR 0 7
19321: PUSH
19322: LD_VAR 0 4
19326: PUSH
19327: FOR_IN
19328: IFFALSE 19361
// result := Replace ( result , result + 1 , j ) ;
19330: LD_ADDR_VAR 0 2
19334: PUSH
19335: LD_VAR 0 2
19339: PPUSH
19340: LD_VAR 0 2
19344: PUSH
19345: LD_INT 1
19347: PLUS
19348: PPUSH
19349: LD_VAR 0 7
19353: PPUSH
19354: CALL_OW 1
19358: ST_TO_ADDR
19359: GO 19327
19361: POP
19362: POP
// end ;
19363: GO 19293
19365: POP
19366: POP
// if not result then
19367: LD_VAR 0 2
19371: NOT
19372: IFFALSE 19376
// exit ;
19374: GO 19524
// mech := result [ 1 ] ;
19376: LD_ADDR_VAR 0 5
19380: PUSH
19381: LD_VAR 0 2
19385: PUSH
19386: LD_INT 1
19388: ARRAY
19389: ST_TO_ADDR
// if result > 1 then
19390: LD_VAR 0 2
19394: PUSH
19395: LD_INT 1
19397: GREATER
19398: IFFALSE 19510
// begin for i = 2 to result do
19400: LD_ADDR_VAR 0 3
19404: PUSH
19405: DOUBLE
19406: LD_INT 2
19408: DEC
19409: ST_TO_ADDR
19410: LD_VAR 0 2
19414: PUSH
19415: FOR_TO
19416: IFFALSE 19508
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19418: LD_ADDR_VAR 0 4
19422: PUSH
19423: LD_VAR 0 2
19427: PUSH
19428: LD_VAR 0 3
19432: ARRAY
19433: PPUSH
19434: LD_INT 3
19436: PPUSH
19437: CALL_OW 259
19441: PUSH
19442: LD_VAR 0 2
19446: PUSH
19447: LD_VAR 0 3
19451: ARRAY
19452: PPUSH
19453: CALL_OW 432
19457: MINUS
19458: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19459: LD_VAR 0 4
19463: PUSH
19464: LD_VAR 0 5
19468: PPUSH
19469: LD_INT 3
19471: PPUSH
19472: CALL_OW 259
19476: PUSH
19477: LD_VAR 0 5
19481: PPUSH
19482: CALL_OW 432
19486: MINUS
19487: GREATEREQUAL
19488: IFFALSE 19506
// mech := result [ i ] ;
19490: LD_ADDR_VAR 0 5
19494: PUSH
19495: LD_VAR 0 2
19499: PUSH
19500: LD_VAR 0 3
19504: ARRAY
19505: ST_TO_ADDR
// end ;
19506: GO 19415
19508: POP
19509: POP
// end ; ComLinkTo ( vehicle , mech ) ;
19510: LD_VAR 0 1
19514: PPUSH
19515: LD_VAR 0 5
19519: PPUSH
19520: CALL_OW 135
// end ;
19524: LD_VAR 0 2
19528: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19529: LD_INT 0
19531: PPUSH
19532: PPUSH
19533: PPUSH
19534: PPUSH
19535: PPUSH
19536: PPUSH
19537: PPUSH
19538: PPUSH
19539: PPUSH
19540: PPUSH
19541: PPUSH
19542: PPUSH
19543: PPUSH
// result := [ ] ;
19544: LD_ADDR_VAR 0 7
19548: PUSH
19549: EMPTY
19550: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19551: LD_VAR 0 1
19555: PPUSH
19556: CALL_OW 266
19560: PUSH
19561: LD_INT 0
19563: PUSH
19564: LD_INT 1
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: IN
19571: NOT
19572: IFFALSE 19576
// exit ;
19574: GO 21216
// if name then
19576: LD_VAR 0 3
19580: IFFALSE 19596
// SetBName ( base_dep , name ) ;
19582: LD_VAR 0 1
19586: PPUSH
19587: LD_VAR 0 3
19591: PPUSH
19592: CALL_OW 500
// base := GetBase ( base_dep ) ;
19596: LD_ADDR_VAR 0 15
19600: PUSH
19601: LD_VAR 0 1
19605: PPUSH
19606: CALL_OW 274
19610: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19611: LD_ADDR_VAR 0 16
19615: PUSH
19616: LD_VAR 0 1
19620: PPUSH
19621: CALL_OW 255
19625: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19626: LD_ADDR_VAR 0 17
19630: PUSH
19631: LD_VAR 0 1
19635: PPUSH
19636: CALL_OW 248
19640: ST_TO_ADDR
// if sources then
19641: LD_VAR 0 5
19645: IFFALSE 19692
// for i = 1 to 3 do
19647: LD_ADDR_VAR 0 8
19651: PUSH
19652: DOUBLE
19653: LD_INT 1
19655: DEC
19656: ST_TO_ADDR
19657: LD_INT 3
19659: PUSH
19660: FOR_TO
19661: IFFALSE 19690
// AddResourceType ( base , i , sources [ i ] ) ;
19663: LD_VAR 0 15
19667: PPUSH
19668: LD_VAR 0 8
19672: PPUSH
19673: LD_VAR 0 5
19677: PUSH
19678: LD_VAR 0 8
19682: ARRAY
19683: PPUSH
19684: CALL_OW 276
19688: GO 19660
19690: POP
19691: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19692: LD_ADDR_VAR 0 18
19696: PUSH
19697: LD_VAR 0 15
19701: PPUSH
19702: LD_VAR 0 2
19706: PPUSH
19707: LD_INT 1
19709: PPUSH
19710: CALL 18951 0 3
19714: ST_TO_ADDR
// InitHc ;
19715: CALL_OW 19
// InitUc ;
19719: CALL_OW 18
// uc_side := side ;
19723: LD_ADDR_OWVAR 20
19727: PUSH
19728: LD_VAR 0 16
19732: ST_TO_ADDR
// uc_nation := nation ;
19733: LD_ADDR_OWVAR 21
19737: PUSH
19738: LD_VAR 0 17
19742: ST_TO_ADDR
// if buildings then
19743: LD_VAR 0 18
19747: IFFALSE 21075
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19749: LD_ADDR_VAR 0 19
19753: PUSH
19754: LD_VAR 0 18
19758: PPUSH
19759: LD_INT 2
19761: PUSH
19762: LD_INT 30
19764: PUSH
19765: LD_INT 29
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 30
19774: PUSH
19775: LD_INT 30
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: LIST
19786: PPUSH
19787: CALL_OW 72
19791: ST_TO_ADDR
// if tmp then
19792: LD_VAR 0 19
19796: IFFALSE 19844
// for i in tmp do
19798: LD_ADDR_VAR 0 8
19802: PUSH
19803: LD_VAR 0 19
19807: PUSH
19808: FOR_IN
19809: IFFALSE 19842
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19811: LD_VAR 0 8
19815: PPUSH
19816: CALL_OW 250
19820: PPUSH
19821: LD_VAR 0 8
19825: PPUSH
19826: CALL_OW 251
19830: PPUSH
19831: LD_VAR 0 16
19835: PPUSH
19836: CALL_OW 441
19840: GO 19808
19842: POP
19843: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19844: LD_VAR 0 18
19848: PPUSH
19849: LD_INT 2
19851: PUSH
19852: LD_INT 30
19854: PUSH
19855: LD_INT 32
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 30
19864: PUSH
19865: LD_INT 33
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: LIST
19876: PPUSH
19877: CALL_OW 72
19881: IFFALSE 19969
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19883: LD_ADDR_VAR 0 8
19887: PUSH
19888: LD_VAR 0 18
19892: PPUSH
19893: LD_INT 2
19895: PUSH
19896: LD_INT 30
19898: PUSH
19899: LD_INT 32
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 30
19908: PUSH
19909: LD_INT 33
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: LIST
19920: PPUSH
19921: CALL_OW 72
19925: PUSH
19926: FOR_IN
19927: IFFALSE 19967
// begin if not GetBWeapon ( i ) then
19929: LD_VAR 0 8
19933: PPUSH
19934: CALL_OW 269
19938: NOT
19939: IFFALSE 19965
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19941: LD_VAR 0 8
19945: PPUSH
19946: LD_VAR 0 8
19950: PPUSH
19951: LD_VAR 0 2
19955: PPUSH
19956: CALL 21221 0 2
19960: PPUSH
19961: CALL_OW 431
// end ;
19965: GO 19926
19967: POP
19968: POP
// end ; for i = 1 to personel do
19969: LD_ADDR_VAR 0 8
19973: PUSH
19974: DOUBLE
19975: LD_INT 1
19977: DEC
19978: ST_TO_ADDR
19979: LD_VAR 0 6
19983: PUSH
19984: FOR_TO
19985: IFFALSE 21055
// begin if i > 4 then
19987: LD_VAR 0 8
19991: PUSH
19992: LD_INT 4
19994: GREATER
19995: IFFALSE 19999
// break ;
19997: GO 21055
// case i of 1 :
19999: LD_VAR 0 8
20003: PUSH
20004: LD_INT 1
20006: DOUBLE
20007: EQUAL
20008: IFTRUE 20012
20010: GO 20092
20012: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20013: LD_ADDR_VAR 0 12
20017: PUSH
20018: LD_VAR 0 18
20022: PPUSH
20023: LD_INT 22
20025: PUSH
20026: LD_VAR 0 16
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 58
20037: PUSH
20038: EMPTY
20039: LIST
20040: PUSH
20041: LD_INT 2
20043: PUSH
20044: LD_INT 30
20046: PUSH
20047: LD_INT 32
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 30
20056: PUSH
20057: LD_INT 4
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 30
20066: PUSH
20067: LD_INT 5
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: LIST
20084: PPUSH
20085: CALL_OW 72
20089: ST_TO_ADDR
20090: GO 20314
20092: LD_INT 2
20094: DOUBLE
20095: EQUAL
20096: IFTRUE 20100
20098: GO 20162
20100: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20101: LD_ADDR_VAR 0 12
20105: PUSH
20106: LD_VAR 0 18
20110: PPUSH
20111: LD_INT 22
20113: PUSH
20114: LD_VAR 0 16
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 2
20125: PUSH
20126: LD_INT 30
20128: PUSH
20129: LD_INT 0
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 30
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PPUSH
20155: CALL_OW 72
20159: ST_TO_ADDR
20160: GO 20314
20162: LD_INT 3
20164: DOUBLE
20165: EQUAL
20166: IFTRUE 20170
20168: GO 20232
20170: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20171: LD_ADDR_VAR 0 12
20175: PUSH
20176: LD_VAR 0 18
20180: PPUSH
20181: LD_INT 22
20183: PUSH
20184: LD_VAR 0 16
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 2
20195: PUSH
20196: LD_INT 30
20198: PUSH
20199: LD_INT 2
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 30
20208: PUSH
20209: LD_INT 3
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: LIST
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PPUSH
20225: CALL_OW 72
20229: ST_TO_ADDR
20230: GO 20314
20232: LD_INT 4
20234: DOUBLE
20235: EQUAL
20236: IFTRUE 20240
20238: GO 20313
20240: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20241: LD_ADDR_VAR 0 12
20245: PUSH
20246: LD_VAR 0 18
20250: PPUSH
20251: LD_INT 22
20253: PUSH
20254: LD_VAR 0 16
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 2
20265: PUSH
20266: LD_INT 30
20268: PUSH
20269: LD_INT 6
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 30
20278: PUSH
20279: LD_INT 7
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 30
20288: PUSH
20289: LD_INT 8
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PPUSH
20306: CALL_OW 72
20310: ST_TO_ADDR
20311: GO 20314
20313: POP
// if i = 1 then
20314: LD_VAR 0 8
20318: PUSH
20319: LD_INT 1
20321: EQUAL
20322: IFFALSE 20433
// begin tmp := [ ] ;
20324: LD_ADDR_VAR 0 19
20328: PUSH
20329: EMPTY
20330: ST_TO_ADDR
// for j in f do
20331: LD_ADDR_VAR 0 9
20335: PUSH
20336: LD_VAR 0 12
20340: PUSH
20341: FOR_IN
20342: IFFALSE 20415
// if GetBType ( j ) = b_bunker then
20344: LD_VAR 0 9
20348: PPUSH
20349: CALL_OW 266
20353: PUSH
20354: LD_INT 32
20356: EQUAL
20357: IFFALSE 20384
// tmp := Insert ( tmp , 1 , j ) else
20359: LD_ADDR_VAR 0 19
20363: PUSH
20364: LD_VAR 0 19
20368: PPUSH
20369: LD_INT 1
20371: PPUSH
20372: LD_VAR 0 9
20376: PPUSH
20377: CALL_OW 2
20381: ST_TO_ADDR
20382: GO 20413
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20384: LD_ADDR_VAR 0 19
20388: PUSH
20389: LD_VAR 0 19
20393: PPUSH
20394: LD_VAR 0 19
20398: PUSH
20399: LD_INT 1
20401: PLUS
20402: PPUSH
20403: LD_VAR 0 9
20407: PPUSH
20408: CALL_OW 2
20412: ST_TO_ADDR
20413: GO 20341
20415: POP
20416: POP
// if tmp then
20417: LD_VAR 0 19
20421: IFFALSE 20433
// f := tmp ;
20423: LD_ADDR_VAR 0 12
20427: PUSH
20428: LD_VAR 0 19
20432: ST_TO_ADDR
// end ; x := personel [ i ] ;
20433: LD_ADDR_VAR 0 13
20437: PUSH
20438: LD_VAR 0 6
20442: PUSH
20443: LD_VAR 0 8
20447: ARRAY
20448: ST_TO_ADDR
// if x = - 1 then
20449: LD_VAR 0 13
20453: PUSH
20454: LD_INT 1
20456: NEG
20457: EQUAL
20458: IFFALSE 20669
// begin for j in f do
20460: LD_ADDR_VAR 0 9
20464: PUSH
20465: LD_VAR 0 12
20469: PUSH
20470: FOR_IN
20471: IFFALSE 20665
// repeat InitHc ;
20473: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20477: LD_VAR 0 9
20481: PPUSH
20482: CALL_OW 266
20486: PUSH
20487: LD_INT 5
20489: EQUAL
20490: IFFALSE 20560
// begin if UnitsInside ( j ) < 3 then
20492: LD_VAR 0 9
20496: PPUSH
20497: CALL_OW 313
20501: PUSH
20502: LD_INT 3
20504: LESS
20505: IFFALSE 20541
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20507: LD_INT 0
20509: PPUSH
20510: LD_INT 5
20512: PUSH
20513: LD_INT 8
20515: PUSH
20516: LD_INT 9
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: LIST
20523: PUSH
20524: LD_VAR 0 17
20528: ARRAY
20529: PPUSH
20530: LD_VAR 0 4
20534: PPUSH
20535: CALL_OW 380
20539: GO 20558
// PrepareHuman ( false , i , skill ) ;
20541: LD_INT 0
20543: PPUSH
20544: LD_VAR 0 8
20548: PPUSH
20549: LD_VAR 0 4
20553: PPUSH
20554: CALL_OW 380
// end else
20558: GO 20577
// PrepareHuman ( false , i , skill ) ;
20560: LD_INT 0
20562: PPUSH
20563: LD_VAR 0 8
20567: PPUSH
20568: LD_VAR 0 4
20572: PPUSH
20573: CALL_OW 380
// un := CreateHuman ;
20577: LD_ADDR_VAR 0 14
20581: PUSH
20582: CALL_OW 44
20586: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20587: LD_ADDR_VAR 0 7
20591: PUSH
20592: LD_VAR 0 7
20596: PPUSH
20597: LD_INT 1
20599: PPUSH
20600: LD_VAR 0 14
20604: PPUSH
20605: CALL_OW 2
20609: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20610: LD_VAR 0 14
20614: PPUSH
20615: LD_VAR 0 9
20619: PPUSH
20620: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20624: LD_VAR 0 9
20628: PPUSH
20629: CALL_OW 313
20633: PUSH
20634: LD_INT 6
20636: EQUAL
20637: IFTRUE 20661
20639: PUSH
20640: LD_VAR 0 9
20644: PPUSH
20645: CALL_OW 266
20649: PUSH
20650: LD_INT 32
20652: PUSH
20653: LD_INT 31
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: IN
20660: OR
20661: IFFALSE 20473
20663: GO 20470
20665: POP
20666: POP
// end else
20667: GO 21053
// for j = 1 to x do
20669: LD_ADDR_VAR 0 9
20673: PUSH
20674: DOUBLE
20675: LD_INT 1
20677: DEC
20678: ST_TO_ADDR
20679: LD_VAR 0 13
20683: PUSH
20684: FOR_TO
20685: IFFALSE 21051
// begin InitHc ;
20687: CALL_OW 19
// if not f then
20691: LD_VAR 0 12
20695: NOT
20696: IFFALSE 20785
// begin PrepareHuman ( false , i , skill ) ;
20698: LD_INT 0
20700: PPUSH
20701: LD_VAR 0 8
20705: PPUSH
20706: LD_VAR 0 4
20710: PPUSH
20711: CALL_OW 380
// un := CreateHuman ;
20715: LD_ADDR_VAR 0 14
20719: PUSH
20720: CALL_OW 44
20724: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20725: LD_ADDR_VAR 0 7
20729: PUSH
20730: LD_VAR 0 7
20734: PPUSH
20735: LD_INT 1
20737: PPUSH
20738: LD_VAR 0 14
20742: PPUSH
20743: CALL_OW 2
20747: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20748: LD_VAR 0 14
20752: PPUSH
20753: LD_VAR 0 1
20757: PPUSH
20758: CALL_OW 250
20762: PPUSH
20763: LD_VAR 0 1
20767: PPUSH
20768: CALL_OW 251
20772: PPUSH
20773: LD_INT 10
20775: PPUSH
20776: LD_INT 0
20778: PPUSH
20779: CALL_OW 50
// continue ;
20783: GO 20684
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20785: LD_VAR 0 12
20789: PUSH
20790: LD_INT 1
20792: ARRAY
20793: PPUSH
20794: CALL_OW 313
20798: IFFALSE 20826
20800: PUSH
20801: LD_VAR 0 12
20805: PUSH
20806: LD_INT 1
20808: ARRAY
20809: PPUSH
20810: CALL_OW 266
20814: PUSH
20815: LD_INT 32
20817: PUSH
20818: LD_INT 31
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: IN
20825: AND
20826: IFTRUE 20847
20828: PUSH
20829: LD_VAR 0 12
20833: PUSH
20834: LD_INT 1
20836: ARRAY
20837: PPUSH
20838: CALL_OW 313
20842: PUSH
20843: LD_INT 6
20845: EQUAL
20846: OR
20847: IFFALSE 20867
// f := Delete ( f , 1 ) ;
20849: LD_ADDR_VAR 0 12
20853: PUSH
20854: LD_VAR 0 12
20858: PPUSH
20859: LD_INT 1
20861: PPUSH
20862: CALL_OW 3
20866: ST_TO_ADDR
// if not f then
20867: LD_VAR 0 12
20871: NOT
20872: IFFALSE 20890
// begin x := x + 2 ;
20874: LD_ADDR_VAR 0 13
20878: PUSH
20879: LD_VAR 0 13
20883: PUSH
20884: LD_INT 2
20886: PLUS
20887: ST_TO_ADDR
// continue ;
20888: GO 20684
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20890: LD_VAR 0 12
20894: PUSH
20895: LD_INT 1
20897: ARRAY
20898: PPUSH
20899: CALL_OW 266
20903: PUSH
20904: LD_INT 5
20906: EQUAL
20907: IFFALSE 20981
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20909: LD_VAR 0 12
20913: PUSH
20914: LD_INT 1
20916: ARRAY
20917: PPUSH
20918: CALL_OW 313
20922: PUSH
20923: LD_INT 3
20925: LESS
20926: IFFALSE 20962
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20928: LD_INT 0
20930: PPUSH
20931: LD_INT 5
20933: PUSH
20934: LD_INT 8
20936: PUSH
20937: LD_INT 9
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: LIST
20944: PUSH
20945: LD_VAR 0 17
20949: ARRAY
20950: PPUSH
20951: LD_VAR 0 4
20955: PPUSH
20956: CALL_OW 380
20960: GO 20979
// PrepareHuman ( false , i , skill ) ;
20962: LD_INT 0
20964: PPUSH
20965: LD_VAR 0 8
20969: PPUSH
20970: LD_VAR 0 4
20974: PPUSH
20975: CALL_OW 380
// end else
20979: GO 20998
// PrepareHuman ( false , i , skill ) ;
20981: LD_INT 0
20983: PPUSH
20984: LD_VAR 0 8
20988: PPUSH
20989: LD_VAR 0 4
20993: PPUSH
20994: CALL_OW 380
// un := CreateHuman ;
20998: LD_ADDR_VAR 0 14
21002: PUSH
21003: CALL_OW 44
21007: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21008: LD_ADDR_VAR 0 7
21012: PUSH
21013: LD_VAR 0 7
21017: PPUSH
21018: LD_INT 1
21020: PPUSH
21021: LD_VAR 0 14
21025: PPUSH
21026: CALL_OW 2
21030: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21031: LD_VAR 0 14
21035: PPUSH
21036: LD_VAR 0 12
21040: PUSH
21041: LD_INT 1
21043: ARRAY
21044: PPUSH
21045: CALL_OW 52
// end ;
21049: GO 20684
21051: POP
21052: POP
// end ;
21053: GO 19984
21055: POP
21056: POP
// result := result ^ buildings ;
21057: LD_ADDR_VAR 0 7
21061: PUSH
21062: LD_VAR 0 7
21066: PUSH
21067: LD_VAR 0 18
21071: ADD
21072: ST_TO_ADDR
// end else
21073: GO 21216
// begin for i = 1 to personel do
21075: LD_ADDR_VAR 0 8
21079: PUSH
21080: DOUBLE
21081: LD_INT 1
21083: DEC
21084: ST_TO_ADDR
21085: LD_VAR 0 6
21089: PUSH
21090: FOR_TO
21091: IFFALSE 21214
// begin if i > 4 then
21093: LD_VAR 0 8
21097: PUSH
21098: LD_INT 4
21100: GREATER
21101: IFFALSE 21105
// break ;
21103: GO 21214
// x := personel [ i ] ;
21105: LD_ADDR_VAR 0 13
21109: PUSH
21110: LD_VAR 0 6
21114: PUSH
21115: LD_VAR 0 8
21119: ARRAY
21120: ST_TO_ADDR
// if x = - 1 then
21121: LD_VAR 0 13
21125: PUSH
21126: LD_INT 1
21128: NEG
21129: EQUAL
21130: IFFALSE 21134
// continue ;
21132: GO 21090
// PrepareHuman ( false , i , skill ) ;
21134: LD_INT 0
21136: PPUSH
21137: LD_VAR 0 8
21141: PPUSH
21142: LD_VAR 0 4
21146: PPUSH
21147: CALL_OW 380
// un := CreateHuman ;
21151: LD_ADDR_VAR 0 14
21155: PUSH
21156: CALL_OW 44
21160: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21161: LD_VAR 0 14
21165: PPUSH
21166: LD_VAR 0 1
21170: PPUSH
21171: CALL_OW 250
21175: PPUSH
21176: LD_VAR 0 1
21180: PPUSH
21181: CALL_OW 251
21185: PPUSH
21186: LD_INT 10
21188: PPUSH
21189: LD_INT 0
21191: PPUSH
21192: CALL_OW 50
// result := result ^ un ;
21196: LD_ADDR_VAR 0 7
21200: PUSH
21201: LD_VAR 0 7
21205: PUSH
21206: LD_VAR 0 14
21210: ADD
21211: ST_TO_ADDR
// end ;
21212: GO 21090
21214: POP
21215: POP
// end ; end ;
21216: LD_VAR 0 7
21220: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21221: LD_INT 0
21223: PPUSH
21224: PPUSH
21225: PPUSH
21226: PPUSH
21227: PPUSH
21228: PPUSH
21229: PPUSH
21230: PPUSH
21231: PPUSH
21232: PPUSH
21233: PPUSH
21234: PPUSH
21235: PPUSH
21236: PPUSH
21237: PPUSH
21238: PPUSH
// result := false ;
21239: LD_ADDR_VAR 0 3
21243: PUSH
21244: LD_INT 0
21246: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21247: LD_VAR 0 1
21251: NOT
21252: IFTRUE 21277
21254: PUSH
21255: LD_VAR 0 1
21259: PPUSH
21260: CALL_OW 266
21264: PUSH
21265: LD_INT 32
21267: PUSH
21268: LD_INT 33
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: IN
21275: NOT
21276: OR
21277: IFFALSE 21281
// exit ;
21279: GO 22416
// nat := GetNation ( tower ) ;
21281: LD_ADDR_VAR 0 12
21285: PUSH
21286: LD_VAR 0 1
21290: PPUSH
21291: CALL_OW 248
21295: ST_TO_ADDR
// side := GetSide ( tower ) ;
21296: LD_ADDR_VAR 0 16
21300: PUSH
21301: LD_VAR 0 1
21305: PPUSH
21306: CALL_OW 255
21310: ST_TO_ADDR
// x := GetX ( tower ) ;
21311: LD_ADDR_VAR 0 10
21315: PUSH
21316: LD_VAR 0 1
21320: PPUSH
21321: CALL_OW 250
21325: ST_TO_ADDR
// y := GetY ( tower ) ;
21326: LD_ADDR_VAR 0 11
21330: PUSH
21331: LD_VAR 0 1
21335: PPUSH
21336: CALL_OW 251
21340: ST_TO_ADDR
// if not x or not y then
21341: LD_VAR 0 10
21345: NOT
21346: IFTRUE 21355
21348: PUSH
21349: LD_VAR 0 11
21353: NOT
21354: OR
21355: IFFALSE 21359
// exit ;
21357: GO 22416
// weapon := 0 ;
21359: LD_ADDR_VAR 0 18
21363: PUSH
21364: LD_INT 0
21366: ST_TO_ADDR
// fac_list := [ ] ;
21367: LD_ADDR_VAR 0 17
21371: PUSH
21372: EMPTY
21373: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21374: LD_ADDR_VAR 0 6
21378: PUSH
21379: LD_VAR 0 1
21383: PPUSH
21384: CALL_OW 274
21388: PPUSH
21389: LD_VAR 0 2
21393: PPUSH
21394: LD_INT 0
21396: PPUSH
21397: CALL 18951 0 3
21401: PPUSH
21402: LD_INT 30
21404: PUSH
21405: LD_INT 3
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PPUSH
21412: CALL_OW 72
21416: ST_TO_ADDR
// if not factories then
21417: LD_VAR 0 6
21421: NOT
21422: IFFALSE 21426
// exit ;
21424: GO 22416
// for i in factories do
21426: LD_ADDR_VAR 0 8
21430: PUSH
21431: LD_VAR 0 6
21435: PUSH
21436: FOR_IN
21437: IFFALSE 21462
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21439: LD_ADDR_VAR 0 17
21443: PUSH
21444: LD_VAR 0 17
21448: PUSH
21449: LD_VAR 0 8
21453: PPUSH
21454: CALL_OW 478
21458: UNION
21459: ST_TO_ADDR
21460: GO 21436
21462: POP
21463: POP
// if not fac_list then
21464: LD_VAR 0 17
21468: NOT
21469: IFFALSE 21473
// exit ;
21471: GO 22416
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21473: LD_ADDR_VAR 0 5
21477: PUSH
21478: LD_INT 4
21480: PUSH
21481: LD_INT 5
21483: PUSH
21484: LD_INT 9
21486: PUSH
21487: LD_INT 10
21489: PUSH
21490: LD_INT 6
21492: PUSH
21493: LD_INT 7
21495: PUSH
21496: LD_INT 11
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 27
21510: PUSH
21511: LD_INT 28
21513: PUSH
21514: LD_INT 26
21516: PUSH
21517: LD_INT 30
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 43
21528: PUSH
21529: LD_INT 44
21531: PUSH
21532: LD_INT 46
21534: PUSH
21535: LD_INT 45
21537: PUSH
21538: LD_INT 47
21540: PUSH
21541: LD_INT 49
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: LIST
21556: PUSH
21557: LD_VAR 0 12
21561: ARRAY
21562: ST_TO_ADDR
// list := list isect fac_list ;
21563: LD_ADDR_VAR 0 5
21567: PUSH
21568: LD_VAR 0 5
21572: PUSH
21573: LD_VAR 0 17
21577: ISECT
21578: ST_TO_ADDR
// if not list then
21579: LD_VAR 0 5
21583: NOT
21584: IFFALSE 21588
// exit ;
21586: GO 22416
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21588: LD_VAR 0 12
21592: PUSH
21593: LD_INT 3
21595: EQUAL
21596: IFFALSE 21608
21598: PUSH
21599: LD_INT 49
21601: PUSH
21602: LD_VAR 0 5
21606: IN
21607: AND
21608: IFFALSE 21628
21610: PUSH
21611: LD_INT 31
21613: PPUSH
21614: LD_VAR 0 16
21618: PPUSH
21619: CALL_OW 321
21623: PUSH
21624: LD_INT 2
21626: EQUAL
21627: AND
21628: IFFALSE 21688
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21630: LD_INT 22
21632: PUSH
21633: LD_VAR 0 16
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 35
21644: PUSH
21645: LD_INT 49
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 91
21654: PUSH
21655: LD_VAR 0 1
21659: PUSH
21660: LD_INT 10
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: LIST
21672: PPUSH
21673: CALL_OW 69
21677: NOT
21678: IFFALSE 21688
// weapon := ru_time_lapser ;
21680: LD_ADDR_VAR 0 18
21684: PUSH
21685: LD_INT 49
21687: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21688: LD_VAR 0 12
21692: PUSH
21693: LD_INT 1
21695: PUSH
21696: LD_INT 2
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: IN
21703: IFFALSE 21727
21705: PUSH
21706: LD_INT 11
21708: PUSH
21709: LD_VAR 0 5
21713: IN
21714: IFTRUE 21726
21716: PUSH
21717: LD_INT 30
21719: PUSH
21720: LD_VAR 0 5
21724: IN
21725: OR
21726: AND
21727: IFFALSE 21747
21729: PUSH
21730: LD_INT 6
21732: PPUSH
21733: LD_VAR 0 16
21737: PPUSH
21738: CALL_OW 321
21742: PUSH
21743: LD_INT 2
21745: EQUAL
21746: AND
21747: IFFALSE 21914
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21749: LD_INT 22
21751: PUSH
21752: LD_VAR 0 16
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 2
21763: PUSH
21764: LD_INT 35
21766: PUSH
21767: LD_INT 11
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 35
21776: PUSH
21777: LD_INT 30
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 91
21791: PUSH
21792: LD_VAR 0 1
21796: PUSH
21797: LD_INT 18
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: LIST
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: LIST
21809: PPUSH
21810: CALL_OW 69
21814: NOT
21815: IFFALSE 21891
21817: PUSH
21818: LD_INT 22
21820: PUSH
21821: LD_VAR 0 16
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 2
21832: PUSH
21833: LD_INT 30
21835: PUSH
21836: LD_INT 32
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 30
21845: PUSH
21846: LD_INT 33
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 91
21860: PUSH
21861: LD_VAR 0 1
21865: PUSH
21866: LD_INT 12
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: LIST
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: LIST
21878: PUSH
21879: EMPTY
21880: LIST
21881: PPUSH
21882: CALL_OW 69
21886: PUSH
21887: LD_INT 2
21889: GREATER
21890: AND
21891: IFFALSE 21914
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21893: LD_ADDR_VAR 0 18
21897: PUSH
21898: LD_INT 11
21900: PUSH
21901: LD_INT 30
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_VAR 0 12
21912: ARRAY
21913: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21914: LD_VAR 0 18
21918: NOT
21919: IFFALSE 21939
21921: PUSH
21922: LD_INT 40
21924: PPUSH
21925: LD_VAR 0 16
21929: PPUSH
21930: CALL_OW 321
21934: PUSH
21935: LD_INT 2
21937: EQUAL
21938: AND
21939: IFFALSE 21975
21941: PUSH
21942: LD_INT 7
21944: PUSH
21945: LD_VAR 0 5
21949: IN
21950: IFTRUE 21962
21952: PUSH
21953: LD_INT 28
21955: PUSH
21956: LD_VAR 0 5
21960: IN
21961: OR
21962: IFTRUE 21974
21964: PUSH
21965: LD_INT 45
21967: PUSH
21968: LD_VAR 0 5
21972: IN
21973: OR
21974: AND
21975: IFFALSE 22229
// begin hex := GetHexInfo ( x , y ) ;
21977: LD_ADDR_VAR 0 4
21981: PUSH
21982: LD_VAR 0 10
21986: PPUSH
21987: LD_VAR 0 11
21991: PPUSH
21992: CALL_OW 546
21996: ST_TO_ADDR
// if hex [ 1 ] then
21997: LD_VAR 0 4
22001: PUSH
22002: LD_INT 1
22004: ARRAY
22005: IFFALSE 22009
// exit ;
22007: GO 22416
// height := hex [ 2 ] ;
22009: LD_ADDR_VAR 0 15
22013: PUSH
22014: LD_VAR 0 4
22018: PUSH
22019: LD_INT 2
22021: ARRAY
22022: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22023: LD_ADDR_VAR 0 14
22027: PUSH
22028: LD_INT 0
22030: PUSH
22031: LD_INT 2
22033: PUSH
22034: LD_INT 3
22036: PUSH
22037: LD_INT 5
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: ST_TO_ADDR
// for i in tmp do
22046: LD_ADDR_VAR 0 8
22050: PUSH
22051: LD_VAR 0 14
22055: PUSH
22056: FOR_IN
22057: IFFALSE 22227
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22059: LD_ADDR_VAR 0 9
22063: PUSH
22064: LD_VAR 0 10
22068: PPUSH
22069: LD_VAR 0 8
22073: PPUSH
22074: LD_INT 5
22076: PPUSH
22077: CALL_OW 272
22081: PUSH
22082: LD_VAR 0 11
22086: PPUSH
22087: LD_VAR 0 8
22091: PPUSH
22092: LD_INT 5
22094: PPUSH
22095: CALL_OW 273
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22104: LD_VAR 0 9
22108: PUSH
22109: LD_INT 1
22111: ARRAY
22112: PPUSH
22113: LD_VAR 0 9
22117: PUSH
22118: LD_INT 2
22120: ARRAY
22121: PPUSH
22122: CALL_OW 488
22126: IFFALSE 22225
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22128: LD_ADDR_VAR 0 4
22132: PUSH
22133: LD_VAR 0 9
22137: PUSH
22138: LD_INT 1
22140: ARRAY
22141: PPUSH
22142: LD_VAR 0 9
22146: PUSH
22147: LD_INT 2
22149: ARRAY
22150: PPUSH
22151: CALL_OW 546
22155: ST_TO_ADDR
// if hex [ 1 ] then
22156: LD_VAR 0 4
22160: PUSH
22161: LD_INT 1
22163: ARRAY
22164: IFFALSE 22168
// continue ;
22166: GO 22056
// h := hex [ 2 ] ;
22168: LD_ADDR_VAR 0 13
22172: PUSH
22173: LD_VAR 0 4
22177: PUSH
22178: LD_INT 2
22180: ARRAY
22181: ST_TO_ADDR
// if h + 7 < height then
22182: LD_VAR 0 13
22186: PUSH
22187: LD_INT 7
22189: PLUS
22190: PUSH
22191: LD_VAR 0 15
22195: LESS
22196: IFFALSE 22225
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22198: LD_ADDR_VAR 0 18
22202: PUSH
22203: LD_INT 7
22205: PUSH
22206: LD_INT 28
22208: PUSH
22209: LD_INT 45
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: LIST
22216: PUSH
22217: LD_VAR 0 12
22221: ARRAY
22222: ST_TO_ADDR
// break ;
22223: GO 22227
// end ; end ; end ;
22225: GO 22056
22227: POP
22228: POP
// end ; if not weapon then
22229: LD_VAR 0 18
22233: NOT
22234: IFFALSE 22294
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22236: LD_ADDR_VAR 0 5
22240: PUSH
22241: LD_VAR 0 5
22245: PUSH
22246: LD_INT 11
22248: PUSH
22249: LD_INT 30
22251: PUSH
22252: LD_INT 49
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: LIST
22259: DIFF
22260: ST_TO_ADDR
// if not list then
22261: LD_VAR 0 5
22265: NOT
22266: IFFALSE 22270
// exit ;
22268: GO 22416
// weapon := list [ rand ( 1 , list ) ] ;
22270: LD_ADDR_VAR 0 18
22274: PUSH
22275: LD_VAR 0 5
22279: PUSH
22280: LD_INT 1
22282: PPUSH
22283: LD_VAR 0 5
22287: PPUSH
22288: CALL_OW 12
22292: ARRAY
22293: ST_TO_ADDR
// end ; if weapon then
22294: LD_VAR 0 18
22298: IFFALSE 22416
// begin tmp := CostOfWeapon ( weapon ) ;
22300: LD_ADDR_VAR 0 14
22304: PUSH
22305: LD_VAR 0 18
22309: PPUSH
22310: CALL_OW 451
22314: ST_TO_ADDR
// j := GetBase ( tower ) ;
22315: LD_ADDR_VAR 0 9
22319: PUSH
22320: LD_VAR 0 1
22324: PPUSH
22325: CALL_OW 274
22329: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22330: LD_VAR 0 9
22334: PPUSH
22335: LD_INT 1
22337: PPUSH
22338: CALL_OW 275
22342: PUSH
22343: LD_VAR 0 14
22347: PUSH
22348: LD_INT 1
22350: ARRAY
22351: GREATEREQUAL
22352: IFFALSE 22378
22354: PUSH
22355: LD_VAR 0 9
22359: PPUSH
22360: LD_INT 2
22362: PPUSH
22363: CALL_OW 275
22367: PUSH
22368: LD_VAR 0 14
22372: PUSH
22373: LD_INT 2
22375: ARRAY
22376: GREATEREQUAL
22377: AND
22378: IFFALSE 22404
22380: PUSH
22381: LD_VAR 0 9
22385: PPUSH
22386: LD_INT 3
22388: PPUSH
22389: CALL_OW 275
22393: PUSH
22394: LD_VAR 0 14
22398: PUSH
22399: LD_INT 3
22401: ARRAY
22402: GREATEREQUAL
22403: AND
22404: IFFALSE 22416
// result := weapon ;
22406: LD_ADDR_VAR 0 3
22410: PUSH
22411: LD_VAR 0 18
22415: ST_TO_ADDR
// end ; end ;
22416: LD_VAR 0 3
22420: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22421: LD_INT 0
22423: PPUSH
22424: PPUSH
// result := true ;
22425: LD_ADDR_VAR 0 3
22429: PUSH
22430: LD_INT 1
22432: ST_TO_ADDR
// if array1 = array2 then
22433: LD_VAR 0 1
22437: PUSH
22438: LD_VAR 0 2
22442: EQUAL
22443: IFFALSE 22503
// begin for i = 1 to array1 do
22445: LD_ADDR_VAR 0 4
22449: PUSH
22450: DOUBLE
22451: LD_INT 1
22453: DEC
22454: ST_TO_ADDR
22455: LD_VAR 0 1
22459: PUSH
22460: FOR_TO
22461: IFFALSE 22499
// if array1 [ i ] <> array2 [ i ] then
22463: LD_VAR 0 1
22467: PUSH
22468: LD_VAR 0 4
22472: ARRAY
22473: PUSH
22474: LD_VAR 0 2
22478: PUSH
22479: LD_VAR 0 4
22483: ARRAY
22484: NONEQUAL
22485: IFFALSE 22497
// begin result := false ;
22487: LD_ADDR_VAR 0 3
22491: PUSH
22492: LD_INT 0
22494: ST_TO_ADDR
// break ;
22495: GO 22499
// end ;
22497: GO 22460
22499: POP
22500: POP
// end else
22501: GO 22511
// result := false ;
22503: LD_ADDR_VAR 0 3
22507: PUSH
22508: LD_INT 0
22510: ST_TO_ADDR
// end ;
22511: LD_VAR 0 3
22515: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22516: LD_INT 0
22518: PPUSH
22519: PPUSH
// if not array1 or not array2 then
22520: LD_VAR 0 1
22524: NOT
22525: IFTRUE 22534
22527: PUSH
22528: LD_VAR 0 2
22532: NOT
22533: OR
22534: IFFALSE 22538
// exit ;
22536: GO 22602
// result := true ;
22538: LD_ADDR_VAR 0 3
22542: PUSH
22543: LD_INT 1
22545: ST_TO_ADDR
// for i = 1 to array1 do
22546: LD_ADDR_VAR 0 4
22550: PUSH
22551: DOUBLE
22552: LD_INT 1
22554: DEC
22555: ST_TO_ADDR
22556: LD_VAR 0 1
22560: PUSH
22561: FOR_TO
22562: IFFALSE 22600
// if array1 [ i ] <> array2 [ i ] then
22564: LD_VAR 0 1
22568: PUSH
22569: LD_VAR 0 4
22573: ARRAY
22574: PUSH
22575: LD_VAR 0 2
22579: PUSH
22580: LD_VAR 0 4
22584: ARRAY
22585: NONEQUAL
22586: IFFALSE 22598
// begin result := false ;
22588: LD_ADDR_VAR 0 3
22592: PUSH
22593: LD_INT 0
22595: ST_TO_ADDR
// break ;
22596: GO 22600
// end ;
22598: GO 22561
22600: POP
22601: POP
// end ;
22602: LD_VAR 0 3
22606: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22607: LD_INT 0
22609: PPUSH
22610: PPUSH
22611: PPUSH
// pom := GetBase ( fac ) ;
22612: LD_ADDR_VAR 0 5
22616: PUSH
22617: LD_VAR 0 1
22621: PPUSH
22622: CALL_OW 274
22626: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22627: LD_ADDR_VAR 0 4
22631: PUSH
22632: LD_VAR 0 2
22636: PUSH
22637: LD_INT 1
22639: ARRAY
22640: PPUSH
22641: LD_VAR 0 2
22645: PUSH
22646: LD_INT 2
22648: ARRAY
22649: PPUSH
22650: LD_VAR 0 2
22654: PUSH
22655: LD_INT 3
22657: ARRAY
22658: PPUSH
22659: LD_VAR 0 2
22663: PUSH
22664: LD_INT 4
22666: ARRAY
22667: PPUSH
22668: CALL_OW 449
22672: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22673: LD_ADDR_VAR 0 3
22677: PUSH
22678: LD_VAR 0 5
22682: PPUSH
22683: LD_INT 1
22685: PPUSH
22686: CALL_OW 275
22690: PUSH
22691: LD_VAR 0 4
22695: PUSH
22696: LD_INT 1
22698: ARRAY
22699: GREATEREQUAL
22700: IFFALSE 22726
22702: PUSH
22703: LD_VAR 0 5
22707: PPUSH
22708: LD_INT 2
22710: PPUSH
22711: CALL_OW 275
22715: PUSH
22716: LD_VAR 0 4
22720: PUSH
22721: LD_INT 2
22723: ARRAY
22724: GREATEREQUAL
22725: AND
22726: IFFALSE 22752
22728: PUSH
22729: LD_VAR 0 5
22733: PPUSH
22734: LD_INT 3
22736: PPUSH
22737: CALL_OW 275
22741: PUSH
22742: LD_VAR 0 4
22746: PUSH
22747: LD_INT 3
22749: ARRAY
22750: GREATEREQUAL
22751: AND
22752: ST_TO_ADDR
// end ;
22753: LD_VAR 0 3
22757: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22758: LD_INT 0
22760: PPUSH
22761: PPUSH
22762: PPUSH
22763: PPUSH
// pom := GetBase ( building ) ;
22764: LD_ADDR_VAR 0 3
22768: PUSH
22769: LD_VAR 0 1
22773: PPUSH
22774: CALL_OW 274
22778: ST_TO_ADDR
// if not pom then
22779: LD_VAR 0 3
22783: NOT
22784: IFFALSE 22788
// exit ;
22786: GO 22962
// btype := GetBType ( building ) ;
22788: LD_ADDR_VAR 0 5
22792: PUSH
22793: LD_VAR 0 1
22797: PPUSH
22798: CALL_OW 266
22802: ST_TO_ADDR
// if btype = b_armoury then
22803: LD_VAR 0 5
22807: PUSH
22808: LD_INT 4
22810: EQUAL
22811: IFFALSE 22821
// btype := b_barracks ;
22813: LD_ADDR_VAR 0 5
22817: PUSH
22818: LD_INT 5
22820: ST_TO_ADDR
// if btype = b_depot then
22821: LD_VAR 0 5
22825: PUSH
22826: LD_INT 0
22828: EQUAL
22829: IFFALSE 22839
// btype := b_warehouse ;
22831: LD_ADDR_VAR 0 5
22835: PUSH
22836: LD_INT 1
22838: ST_TO_ADDR
// if btype = b_workshop then
22839: LD_VAR 0 5
22843: PUSH
22844: LD_INT 2
22846: EQUAL
22847: IFFALSE 22857
// btype := b_factory ;
22849: LD_ADDR_VAR 0 5
22853: PUSH
22854: LD_INT 3
22856: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22857: LD_ADDR_VAR 0 4
22861: PUSH
22862: LD_VAR 0 5
22866: PPUSH
22867: LD_VAR 0 1
22871: PPUSH
22872: CALL_OW 248
22876: PPUSH
22877: CALL_OW 450
22881: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22882: LD_ADDR_VAR 0 2
22886: PUSH
22887: LD_VAR 0 3
22891: PPUSH
22892: LD_INT 1
22894: PPUSH
22895: CALL_OW 275
22899: PUSH
22900: LD_VAR 0 4
22904: PUSH
22905: LD_INT 1
22907: ARRAY
22908: GREATEREQUAL
22909: IFFALSE 22935
22911: PUSH
22912: LD_VAR 0 3
22916: PPUSH
22917: LD_INT 2
22919: PPUSH
22920: CALL_OW 275
22924: PUSH
22925: LD_VAR 0 4
22929: PUSH
22930: LD_INT 2
22932: ARRAY
22933: GREATEREQUAL
22934: AND
22935: IFFALSE 22961
22937: PUSH
22938: LD_VAR 0 3
22942: PPUSH
22943: LD_INT 3
22945: PPUSH
22946: CALL_OW 275
22950: PUSH
22951: LD_VAR 0 4
22955: PUSH
22956: LD_INT 3
22958: ARRAY
22959: GREATEREQUAL
22960: AND
22961: ST_TO_ADDR
// end ;
22962: LD_VAR 0 2
22966: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22967: LD_INT 0
22969: PPUSH
22970: PPUSH
22971: PPUSH
// pom := GetBase ( building ) ;
22972: LD_ADDR_VAR 0 4
22976: PUSH
22977: LD_VAR 0 1
22981: PPUSH
22982: CALL_OW 274
22986: ST_TO_ADDR
// if not pom then
22987: LD_VAR 0 4
22991: NOT
22992: IFFALSE 22996
// exit ;
22994: GO 23101
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22996: LD_ADDR_VAR 0 5
23000: PUSH
23001: LD_VAR 0 2
23005: PPUSH
23006: LD_VAR 0 1
23010: PPUSH
23011: CALL_OW 248
23015: PPUSH
23016: CALL_OW 450
23020: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23021: LD_ADDR_VAR 0 3
23025: PUSH
23026: LD_VAR 0 4
23030: PPUSH
23031: LD_INT 1
23033: PPUSH
23034: CALL_OW 275
23038: PUSH
23039: LD_VAR 0 5
23043: PUSH
23044: LD_INT 1
23046: ARRAY
23047: GREATEREQUAL
23048: IFFALSE 23074
23050: PUSH
23051: LD_VAR 0 4
23055: PPUSH
23056: LD_INT 2
23058: PPUSH
23059: CALL_OW 275
23063: PUSH
23064: LD_VAR 0 5
23068: PUSH
23069: LD_INT 2
23071: ARRAY
23072: GREATEREQUAL
23073: AND
23074: IFFALSE 23100
23076: PUSH
23077: LD_VAR 0 4
23081: PPUSH
23082: LD_INT 3
23084: PPUSH
23085: CALL_OW 275
23089: PUSH
23090: LD_VAR 0 5
23094: PUSH
23095: LD_INT 3
23097: ARRAY
23098: GREATEREQUAL
23099: AND
23100: ST_TO_ADDR
// end ;
23101: LD_VAR 0 3
23105: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23106: LD_INT 0
23108: PPUSH
23109: PPUSH
23110: PPUSH
23111: PPUSH
23112: PPUSH
23113: PPUSH
23114: PPUSH
23115: PPUSH
23116: PPUSH
23117: PPUSH
23118: PPUSH
// result := false ;
23119: LD_ADDR_VAR 0 8
23123: PUSH
23124: LD_INT 0
23126: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23127: LD_VAR 0 5
23131: NOT
23132: IFTRUE 23141
23134: PUSH
23135: LD_VAR 0 1
23139: NOT
23140: OR
23141: IFTRUE 23150
23143: PUSH
23144: LD_VAR 0 2
23148: NOT
23149: OR
23150: IFTRUE 23159
23152: PUSH
23153: LD_VAR 0 3
23157: NOT
23158: OR
23159: IFFALSE 23163
// exit ;
23161: GO 23989
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23163: LD_ADDR_VAR 0 14
23167: PUSH
23168: LD_VAR 0 1
23172: PPUSH
23173: LD_VAR 0 2
23177: PPUSH
23178: LD_VAR 0 3
23182: PPUSH
23183: LD_VAR 0 4
23187: PPUSH
23188: LD_VAR 0 5
23192: PUSH
23193: LD_INT 1
23195: ARRAY
23196: PPUSH
23197: CALL_OW 248
23201: PPUSH
23202: LD_INT 0
23204: PPUSH
23205: CALL 25270 0 6
23209: ST_TO_ADDR
// if not hexes then
23210: LD_VAR 0 14
23214: NOT
23215: IFFALSE 23219
// exit ;
23217: GO 23989
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23219: LD_ADDR_VAR 0 17
23223: PUSH
23224: LD_VAR 0 5
23228: PPUSH
23229: LD_INT 22
23231: PUSH
23232: LD_VAR 0 13
23236: PPUSH
23237: CALL_OW 255
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 2
23248: PUSH
23249: LD_INT 30
23251: PUSH
23252: LD_INT 0
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 30
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: LIST
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PPUSH
23278: CALL_OW 72
23282: ST_TO_ADDR
// for i = 1 to hexes do
23283: LD_ADDR_VAR 0 9
23287: PUSH
23288: DOUBLE
23289: LD_INT 1
23291: DEC
23292: ST_TO_ADDR
23293: LD_VAR 0 14
23297: PUSH
23298: FOR_TO
23299: IFFALSE 23987
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23301: LD_ADDR_VAR 0 13
23305: PUSH
23306: LD_VAR 0 14
23310: PUSH
23311: LD_VAR 0 9
23315: ARRAY
23316: PUSH
23317: LD_INT 1
23319: ARRAY
23320: PPUSH
23321: LD_VAR 0 14
23325: PUSH
23326: LD_VAR 0 9
23330: ARRAY
23331: PUSH
23332: LD_INT 2
23334: ARRAY
23335: PPUSH
23336: CALL_OW 428
23340: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23341: LD_VAR 0 14
23345: PUSH
23346: LD_VAR 0 9
23350: ARRAY
23351: PUSH
23352: LD_INT 1
23354: ARRAY
23355: PPUSH
23356: LD_VAR 0 14
23360: PUSH
23361: LD_VAR 0 9
23365: ARRAY
23366: PUSH
23367: LD_INT 2
23369: ARRAY
23370: PPUSH
23371: CALL_OW 351
23375: IFTRUE 23414
23377: PUSH
23378: LD_VAR 0 14
23382: PUSH
23383: LD_VAR 0 9
23387: ARRAY
23388: PUSH
23389: LD_INT 1
23391: ARRAY
23392: PPUSH
23393: LD_VAR 0 14
23397: PUSH
23398: LD_VAR 0 9
23402: ARRAY
23403: PUSH
23404: LD_INT 2
23406: ARRAY
23407: PPUSH
23408: CALL_OW 488
23412: NOT
23413: OR
23414: IFTRUE 23431
23416: PUSH
23417: LD_VAR 0 13
23421: PPUSH
23422: CALL_OW 247
23426: PUSH
23427: LD_INT 3
23429: EQUAL
23430: OR
23431: IFFALSE 23437
// exit ;
23433: POP
23434: POP
23435: GO 23989
// if not tmp then
23437: LD_VAR 0 13
23441: NOT
23442: IFFALSE 23446
// continue ;
23444: GO 23298
// result := true ;
23446: LD_ADDR_VAR 0 8
23450: PUSH
23451: LD_INT 1
23453: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23454: LD_VAR 0 6
23458: IFFALSE 23475
23460: PUSH
23461: LD_VAR 0 13
23465: PPUSH
23466: CALL_OW 247
23470: PUSH
23471: LD_INT 2
23473: EQUAL
23474: AND
23475: IFFALSE 23492
23477: PUSH
23478: LD_VAR 0 13
23482: PPUSH
23483: CALL_OW 263
23487: PUSH
23488: LD_INT 1
23490: EQUAL
23491: AND
23492: IFFALSE 23656
// begin if IsDrivenBy ( tmp ) then
23494: LD_VAR 0 13
23498: PPUSH
23499: CALL_OW 311
23503: IFFALSE 23507
// continue ;
23505: GO 23298
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23507: LD_VAR 0 6
23511: PPUSH
23512: LD_INT 3
23514: PUSH
23515: LD_INT 60
23517: PUSH
23518: EMPTY
23519: LIST
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 3
23527: PUSH
23528: LD_INT 55
23530: PUSH
23531: EMPTY
23532: LIST
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PPUSH
23542: CALL_OW 72
23546: IFFALSE 23654
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23548: LD_ADDR_VAR 0 18
23552: PUSH
23553: LD_VAR 0 6
23557: PPUSH
23558: LD_INT 3
23560: PUSH
23561: LD_INT 60
23563: PUSH
23564: EMPTY
23565: LIST
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 3
23573: PUSH
23574: LD_INT 55
23576: PUSH
23577: EMPTY
23578: LIST
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PPUSH
23588: CALL_OW 72
23592: PUSH
23593: LD_INT 1
23595: ARRAY
23596: ST_TO_ADDR
// if IsInUnit ( driver ) then
23597: LD_VAR 0 18
23601: PPUSH
23602: CALL_OW 310
23606: IFFALSE 23617
// ComExit ( driver ) ;
23608: LD_VAR 0 18
23612: PPUSH
23613: CALL 49260 0 1
// AddComEnterUnit ( driver , tmp ) ;
23617: LD_VAR 0 18
23621: PPUSH
23622: LD_VAR 0 13
23626: PPUSH
23627: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23631: LD_VAR 0 18
23635: PPUSH
23636: LD_VAR 0 7
23640: PPUSH
23641: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23645: LD_VAR 0 18
23649: PPUSH
23650: CALL_OW 181
// end ; continue ;
23654: GO 23298
// end ; if not cleaners or not tmp in cleaners then
23656: LD_VAR 0 6
23660: NOT
23661: IFTRUE 23676
23663: PUSH
23664: LD_VAR 0 13
23668: PUSH
23669: LD_VAR 0 6
23673: IN
23674: NOT
23675: OR
23676: IFFALSE 23985
// begin if dep then
23678: LD_VAR 0 17
23682: IFFALSE 23818
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23684: LD_ADDR_VAR 0 16
23688: PUSH
23689: LD_VAR 0 17
23693: PUSH
23694: LD_INT 1
23696: ARRAY
23697: PPUSH
23698: CALL_OW 250
23702: PPUSH
23703: LD_VAR 0 17
23707: PUSH
23708: LD_INT 1
23710: ARRAY
23711: PPUSH
23712: CALL_OW 254
23716: PPUSH
23717: LD_INT 5
23719: PPUSH
23720: CALL_OW 272
23724: PUSH
23725: LD_VAR 0 17
23729: PUSH
23730: LD_INT 1
23732: ARRAY
23733: PPUSH
23734: CALL_OW 251
23738: PPUSH
23739: LD_VAR 0 17
23743: PUSH
23744: LD_INT 1
23746: ARRAY
23747: PPUSH
23748: CALL_OW 254
23752: PPUSH
23753: LD_INT 5
23755: PPUSH
23756: CALL_OW 273
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23765: LD_VAR 0 16
23769: PUSH
23770: LD_INT 1
23772: ARRAY
23773: PPUSH
23774: LD_VAR 0 16
23778: PUSH
23779: LD_INT 2
23781: ARRAY
23782: PPUSH
23783: CALL_OW 488
23787: IFFALSE 23818
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23789: LD_VAR 0 13
23793: PPUSH
23794: LD_VAR 0 16
23798: PUSH
23799: LD_INT 1
23801: ARRAY
23802: PPUSH
23803: LD_VAR 0 16
23807: PUSH
23808: LD_INT 2
23810: ARRAY
23811: PPUSH
23812: CALL_OW 111
// continue ;
23816: GO 23298
// end ; end ; r := GetDir ( tmp ) ;
23818: LD_ADDR_VAR 0 15
23822: PUSH
23823: LD_VAR 0 13
23827: PPUSH
23828: CALL_OW 254
23832: ST_TO_ADDR
// if r = 5 then
23833: LD_VAR 0 15
23837: PUSH
23838: LD_INT 5
23840: EQUAL
23841: IFFALSE 23851
// r := 0 ;
23843: LD_ADDR_VAR 0 15
23847: PUSH
23848: LD_INT 0
23850: ST_TO_ADDR
// for j = r to 5 do
23851: LD_ADDR_VAR 0 10
23855: PUSH
23856: DOUBLE
23857: LD_VAR 0 15
23861: DEC
23862: ST_TO_ADDR
23863: LD_INT 5
23865: PUSH
23866: FOR_TO
23867: IFFALSE 23983
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23869: LD_ADDR_VAR 0 11
23873: PUSH
23874: LD_VAR 0 13
23878: PPUSH
23879: CALL_OW 250
23883: PPUSH
23884: LD_VAR 0 10
23888: PPUSH
23889: LD_INT 2
23891: PPUSH
23892: CALL_OW 272
23896: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23897: LD_ADDR_VAR 0 12
23901: PUSH
23902: LD_VAR 0 13
23906: PPUSH
23907: CALL_OW 251
23911: PPUSH
23912: LD_VAR 0 10
23916: PPUSH
23917: LD_INT 2
23919: PPUSH
23920: CALL_OW 273
23924: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23925: LD_VAR 0 11
23929: PPUSH
23930: LD_VAR 0 12
23934: PPUSH
23935: CALL_OW 488
23939: IFFALSE 23958
23941: PUSH
23942: LD_VAR 0 11
23946: PPUSH
23947: LD_VAR 0 12
23951: PPUSH
23952: CALL_OW 428
23956: NOT
23957: AND
23958: IFFALSE 23981
// begin ComMoveXY ( tmp , _x , _y ) ;
23960: LD_VAR 0 13
23964: PPUSH
23965: LD_VAR 0 11
23969: PPUSH
23970: LD_VAR 0 12
23974: PPUSH
23975: CALL_OW 111
// break ;
23979: GO 23983
// end ; end ;
23981: GO 23866
23983: POP
23984: POP
// end ; end ;
23985: GO 23298
23987: POP
23988: POP
// end ;
23989: LD_VAR 0 8
23993: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23994: LD_INT 0
23996: PPUSH
// result := true ;
23997: LD_ADDR_VAR 0 3
24001: PUSH
24002: LD_INT 1
24004: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24005: LD_VAR 0 2
24009: PUSH
24010: LD_INT 24
24012: DOUBLE
24013: EQUAL
24014: IFTRUE 24024
24016: LD_INT 33
24018: DOUBLE
24019: EQUAL
24020: IFTRUE 24024
24022: GO 24049
24024: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24025: LD_ADDR_VAR 0 3
24029: PUSH
24030: LD_INT 32
24032: PPUSH
24033: LD_VAR 0 1
24037: PPUSH
24038: CALL_OW 321
24042: PUSH
24043: LD_INT 2
24045: EQUAL
24046: ST_TO_ADDR
24047: GO 24365
24049: LD_INT 20
24051: DOUBLE
24052: EQUAL
24053: IFTRUE 24057
24055: GO 24082
24057: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24058: LD_ADDR_VAR 0 3
24062: PUSH
24063: LD_INT 6
24065: PPUSH
24066: LD_VAR 0 1
24070: PPUSH
24071: CALL_OW 321
24075: PUSH
24076: LD_INT 2
24078: EQUAL
24079: ST_TO_ADDR
24080: GO 24365
24082: LD_INT 22
24084: DOUBLE
24085: EQUAL
24086: IFTRUE 24096
24088: LD_INT 36
24090: DOUBLE
24091: EQUAL
24092: IFTRUE 24096
24094: GO 24121
24096: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24097: LD_ADDR_VAR 0 3
24101: PUSH
24102: LD_INT 15
24104: PPUSH
24105: LD_VAR 0 1
24109: PPUSH
24110: CALL_OW 321
24114: PUSH
24115: LD_INT 2
24117: EQUAL
24118: ST_TO_ADDR
24119: GO 24365
24121: LD_INT 30
24123: DOUBLE
24124: EQUAL
24125: IFTRUE 24129
24127: GO 24154
24129: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24130: LD_ADDR_VAR 0 3
24134: PUSH
24135: LD_INT 20
24137: PPUSH
24138: LD_VAR 0 1
24142: PPUSH
24143: CALL_OW 321
24147: PUSH
24148: LD_INT 2
24150: EQUAL
24151: ST_TO_ADDR
24152: GO 24365
24154: LD_INT 28
24156: DOUBLE
24157: EQUAL
24158: IFTRUE 24168
24160: LD_INT 21
24162: DOUBLE
24163: EQUAL
24164: IFTRUE 24168
24166: GO 24193
24168: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24169: LD_ADDR_VAR 0 3
24173: PUSH
24174: LD_INT 21
24176: PPUSH
24177: LD_VAR 0 1
24181: PPUSH
24182: CALL_OW 321
24186: PUSH
24187: LD_INT 2
24189: EQUAL
24190: ST_TO_ADDR
24191: GO 24365
24193: LD_INT 16
24195: DOUBLE
24196: EQUAL
24197: IFTRUE 24201
24199: GO 24226
24201: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24202: LD_ADDR_VAR 0 3
24206: PUSH
24207: LD_INT 84
24209: PPUSH
24210: LD_VAR 0 1
24214: PPUSH
24215: CALL_OW 321
24219: PUSH
24220: LD_INT 2
24222: EQUAL
24223: ST_TO_ADDR
24224: GO 24365
24226: LD_INT 19
24228: DOUBLE
24229: EQUAL
24230: IFTRUE 24240
24232: LD_INT 23
24234: DOUBLE
24235: EQUAL
24236: IFTRUE 24240
24238: GO 24265
24240: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24241: LD_ADDR_VAR 0 3
24245: PUSH
24246: LD_INT 83
24248: PPUSH
24249: LD_VAR 0 1
24253: PPUSH
24254: CALL_OW 321
24258: PUSH
24259: LD_INT 2
24261: EQUAL
24262: ST_TO_ADDR
24263: GO 24365
24265: LD_INT 17
24267: DOUBLE
24268: EQUAL
24269: IFTRUE 24273
24271: GO 24298
24273: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24274: LD_ADDR_VAR 0 3
24278: PUSH
24279: LD_INT 39
24281: PPUSH
24282: LD_VAR 0 1
24286: PPUSH
24287: CALL_OW 321
24291: PUSH
24292: LD_INT 2
24294: EQUAL
24295: ST_TO_ADDR
24296: GO 24365
24298: LD_INT 18
24300: DOUBLE
24301: EQUAL
24302: IFTRUE 24306
24304: GO 24331
24306: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24307: LD_ADDR_VAR 0 3
24311: PUSH
24312: LD_INT 40
24314: PPUSH
24315: LD_VAR 0 1
24319: PPUSH
24320: CALL_OW 321
24324: PUSH
24325: LD_INT 2
24327: EQUAL
24328: ST_TO_ADDR
24329: GO 24365
24331: LD_INT 27
24333: DOUBLE
24334: EQUAL
24335: IFTRUE 24339
24337: GO 24364
24339: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
24340: LD_ADDR_VAR 0 3
24344: PUSH
24345: LD_INT 35
24347: PPUSH
24348: LD_VAR 0 1
24352: PPUSH
24353: CALL_OW 321
24357: PUSH
24358: LD_INT 2
24360: EQUAL
24361: ST_TO_ADDR
24362: GO 24365
24364: POP
// end ;
24365: LD_VAR 0 3
24369: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24370: LD_INT 0
24372: PPUSH
24373: PPUSH
24374: PPUSH
24375: PPUSH
24376: PPUSH
24377: PPUSH
24378: PPUSH
24379: PPUSH
24380: PPUSH
24381: PPUSH
24382: PPUSH
// result := false ;
24383: LD_ADDR_VAR 0 6
24387: PUSH
24388: LD_INT 0
24390: ST_TO_ADDR
// if btype = b_depot then
24391: LD_VAR 0 2
24395: PUSH
24396: LD_INT 0
24398: EQUAL
24399: IFFALSE 24411
// begin result := true ;
24401: LD_ADDR_VAR 0 6
24405: PUSH
24406: LD_INT 1
24408: ST_TO_ADDR
// exit ;
24409: GO 25265
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24411: LD_VAR 0 1
24415: NOT
24416: IFTRUE 24441
24418: PUSH
24419: LD_VAR 0 1
24423: PPUSH
24424: CALL_OW 266
24428: PUSH
24429: LD_INT 0
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: IN
24439: NOT
24440: OR
24441: IFTRUE 24450
24443: PUSH
24444: LD_VAR 0 2
24448: NOT
24449: OR
24450: IFTRUE 24486
24452: PUSH
24453: LD_VAR 0 5
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: LD_INT 1
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: LD_INT 3
24469: PUSH
24470: LD_INT 4
24472: PUSH
24473: LD_INT 5
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: IN
24484: NOT
24485: OR
24486: IFTRUE 24505
24488: PUSH
24489: LD_VAR 0 3
24493: PPUSH
24494: LD_VAR 0 4
24498: PPUSH
24499: CALL_OW 488
24503: NOT
24504: OR
24505: IFFALSE 24509
// exit ;
24507: GO 25265
// side := GetSide ( depot ) ;
24509: LD_ADDR_VAR 0 9
24513: PUSH
24514: LD_VAR 0 1
24518: PPUSH
24519: CALL_OW 255
24523: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24524: LD_VAR 0 9
24528: PPUSH
24529: LD_VAR 0 2
24533: PPUSH
24534: CALL 23994 0 2
24538: NOT
24539: IFFALSE 24543
// exit ;
24541: GO 25265
// pom := GetBase ( depot ) ;
24543: LD_ADDR_VAR 0 10
24547: PUSH
24548: LD_VAR 0 1
24552: PPUSH
24553: CALL_OW 274
24557: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24558: LD_ADDR_VAR 0 11
24562: PUSH
24563: LD_VAR 0 2
24567: PPUSH
24568: LD_VAR 0 1
24572: PPUSH
24573: CALL_OW 248
24577: PPUSH
24578: CALL_OW 450
24582: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24583: LD_VAR 0 10
24587: PPUSH
24588: LD_INT 1
24590: PPUSH
24591: CALL_OW 275
24595: PUSH
24596: LD_VAR 0 11
24600: PUSH
24601: LD_INT 1
24603: ARRAY
24604: GREATEREQUAL
24605: IFFALSE 24631
24607: PUSH
24608: LD_VAR 0 10
24612: PPUSH
24613: LD_INT 2
24615: PPUSH
24616: CALL_OW 275
24620: PUSH
24621: LD_VAR 0 11
24625: PUSH
24626: LD_INT 2
24628: ARRAY
24629: GREATEREQUAL
24630: AND
24631: IFFALSE 24657
24633: PUSH
24634: LD_VAR 0 10
24638: PPUSH
24639: LD_INT 3
24641: PPUSH
24642: CALL_OW 275
24646: PUSH
24647: LD_VAR 0 11
24651: PUSH
24652: LD_INT 3
24654: ARRAY
24655: GREATEREQUAL
24656: AND
24657: NOT
24658: IFFALSE 24662
// exit ;
24660: GO 25265
// if GetBType ( depot ) = b_depot then
24662: LD_VAR 0 1
24666: PPUSH
24667: CALL_OW 266
24671: PUSH
24672: LD_INT 0
24674: EQUAL
24675: IFFALSE 24687
// dist := 28 else
24677: LD_ADDR_VAR 0 14
24681: PUSH
24682: LD_INT 28
24684: ST_TO_ADDR
24685: GO 24695
// dist := 36 ;
24687: LD_ADDR_VAR 0 14
24691: PUSH
24692: LD_INT 36
24694: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24695: LD_VAR 0 1
24699: PPUSH
24700: LD_VAR 0 3
24704: PPUSH
24705: LD_VAR 0 4
24709: PPUSH
24710: CALL_OW 297
24714: PUSH
24715: LD_VAR 0 14
24719: GREATER
24720: IFFALSE 24724
// exit ;
24722: GO 25265
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24724: LD_ADDR_VAR 0 12
24728: PUSH
24729: LD_VAR 0 2
24733: PPUSH
24734: LD_VAR 0 3
24738: PPUSH
24739: LD_VAR 0 4
24743: PPUSH
24744: LD_VAR 0 5
24748: PPUSH
24749: LD_VAR 0 1
24753: PPUSH
24754: CALL_OW 248
24758: PPUSH
24759: LD_INT 0
24761: PPUSH
24762: CALL 25270 0 6
24766: ST_TO_ADDR
// if not hexes then
24767: LD_VAR 0 12
24771: NOT
24772: IFFALSE 24776
// exit ;
24774: GO 25265
// hex := GetHexInfo ( x , y ) ;
24776: LD_ADDR_VAR 0 15
24780: PUSH
24781: LD_VAR 0 3
24785: PPUSH
24786: LD_VAR 0 4
24790: PPUSH
24791: CALL_OW 546
24795: ST_TO_ADDR
// if hex [ 1 ] then
24796: LD_VAR 0 15
24800: PUSH
24801: LD_INT 1
24803: ARRAY
24804: IFFALSE 24808
// exit ;
24806: GO 25265
// height := hex [ 2 ] ;
24808: LD_ADDR_VAR 0 13
24812: PUSH
24813: LD_VAR 0 15
24817: PUSH
24818: LD_INT 2
24820: ARRAY
24821: ST_TO_ADDR
// for i = 1 to hexes do
24822: LD_ADDR_VAR 0 7
24826: PUSH
24827: DOUBLE
24828: LD_INT 1
24830: DEC
24831: ST_TO_ADDR
24832: LD_VAR 0 12
24836: PUSH
24837: FOR_TO
24838: IFFALSE 25182
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24840: LD_VAR 0 12
24844: PUSH
24845: LD_VAR 0 7
24849: ARRAY
24850: PUSH
24851: LD_INT 1
24853: ARRAY
24854: PPUSH
24855: LD_VAR 0 12
24859: PUSH
24860: LD_VAR 0 7
24864: ARRAY
24865: PUSH
24866: LD_INT 2
24868: ARRAY
24869: PPUSH
24870: CALL_OW 488
24874: NOT
24875: IFTRUE 24917
24877: PUSH
24878: LD_VAR 0 12
24882: PUSH
24883: LD_VAR 0 7
24887: ARRAY
24888: PUSH
24889: LD_INT 1
24891: ARRAY
24892: PPUSH
24893: LD_VAR 0 12
24897: PUSH
24898: LD_VAR 0 7
24902: ARRAY
24903: PUSH
24904: LD_INT 2
24906: ARRAY
24907: PPUSH
24908: CALL_OW 428
24912: PUSH
24913: LD_INT 0
24915: GREATER
24916: OR
24917: IFTRUE 24955
24919: PUSH
24920: LD_VAR 0 12
24924: PUSH
24925: LD_VAR 0 7
24929: ARRAY
24930: PUSH
24931: LD_INT 1
24933: ARRAY
24934: PPUSH
24935: LD_VAR 0 12
24939: PUSH
24940: LD_VAR 0 7
24944: ARRAY
24945: PUSH
24946: LD_INT 2
24948: ARRAY
24949: PPUSH
24950: CALL_OW 351
24954: OR
24955: IFFALSE 24961
// exit ;
24957: POP
24958: POP
24959: GO 25265
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24961: LD_ADDR_VAR 0 8
24965: PUSH
24966: LD_VAR 0 12
24970: PUSH
24971: LD_VAR 0 7
24975: ARRAY
24976: PUSH
24977: LD_INT 1
24979: ARRAY
24980: PPUSH
24981: LD_VAR 0 12
24985: PUSH
24986: LD_VAR 0 7
24990: ARRAY
24991: PUSH
24992: LD_INT 2
24994: ARRAY
24995: PPUSH
24996: CALL_OW 546
25000: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25001: LD_VAR 0 8
25005: PUSH
25006: LD_INT 1
25008: ARRAY
25009: IFTRUE 25031
25011: PUSH
25012: LD_VAR 0 8
25016: PUSH
25017: LD_INT 2
25019: ARRAY
25020: PUSH
25021: LD_VAR 0 13
25025: PUSH
25026: LD_INT 2
25028: PLUS
25029: GREATER
25030: OR
25031: IFTRUE 25053
25033: PUSH
25034: LD_VAR 0 8
25038: PUSH
25039: LD_INT 2
25041: ARRAY
25042: PUSH
25043: LD_VAR 0 13
25047: PUSH
25048: LD_INT 2
25050: MINUS
25051: LESS
25052: OR
25053: IFTRUE 25121
25055: PUSH
25056: LD_VAR 0 8
25060: PUSH
25061: LD_INT 3
25063: ARRAY
25064: PUSH
25065: LD_INT 0
25067: PUSH
25068: LD_INT 8
25070: PUSH
25071: LD_INT 9
25073: PUSH
25074: LD_INT 10
25076: PUSH
25077: LD_INT 11
25079: PUSH
25080: LD_INT 12
25082: PUSH
25083: LD_INT 13
25085: PUSH
25086: LD_INT 16
25088: PUSH
25089: LD_INT 17
25091: PUSH
25092: LD_INT 18
25094: PUSH
25095: LD_INT 19
25097: PUSH
25098: LD_INT 20
25100: PUSH
25101: LD_INT 21
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: IN
25119: NOT
25120: OR
25121: IFTRUE 25134
25123: PUSH
25124: LD_VAR 0 8
25128: PUSH
25129: LD_INT 5
25131: ARRAY
25132: NOT
25133: OR
25134: IFTRUE 25174
25136: PUSH
25137: LD_VAR 0 8
25141: PUSH
25142: LD_INT 6
25144: ARRAY
25145: PUSH
25146: LD_INT 1
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: LD_INT 7
25154: PUSH
25155: LD_INT 9
25157: PUSH
25158: LD_INT 10
25160: PUSH
25161: LD_INT 11
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: IN
25172: NOT
25173: OR
25174: IFFALSE 25180
// exit ;
25176: POP
25177: POP
25178: GO 25265
// end ;
25180: GO 24837
25182: POP
25183: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25184: LD_VAR 0 9
25188: PPUSH
25189: LD_VAR 0 3
25193: PPUSH
25194: LD_VAR 0 4
25198: PPUSH
25199: LD_INT 20
25201: PPUSH
25202: CALL 17084 0 4
25206: PUSH
25207: LD_INT 4
25209: ARRAY
25210: IFFALSE 25214
// exit ;
25212: GO 25265
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25214: LD_VAR 0 2
25218: PUSH
25219: LD_INT 29
25221: PUSH
25222: LD_INT 30
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: IN
25229: IFFALSE 25253
25231: PUSH
25232: LD_VAR 0 3
25236: PPUSH
25237: LD_VAR 0 4
25241: PPUSH
25242: LD_VAR 0 9
25246: PPUSH
25247: CALL_OW 440
25251: NOT
25252: AND
25253: IFFALSE 25257
// exit ;
25255: GO 25265
// result := true ;
25257: LD_ADDR_VAR 0 6
25261: PUSH
25262: LD_INT 1
25264: ST_TO_ADDR
// end ;
25265: LD_VAR 0 6
25269: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25270: LD_INT 0
25272: PPUSH
25273: PPUSH
25274: PPUSH
25275: PPUSH
25276: PPUSH
25277: PPUSH
25278: PPUSH
25279: PPUSH
25280: PPUSH
25281: PPUSH
25282: PPUSH
25283: PPUSH
25284: PPUSH
25285: PPUSH
25286: PPUSH
25287: PPUSH
25288: PPUSH
25289: PPUSH
25290: PPUSH
25291: PPUSH
25292: PPUSH
25293: PPUSH
25294: PPUSH
25295: PPUSH
25296: PPUSH
25297: PPUSH
25298: PPUSH
25299: PPUSH
25300: PPUSH
25301: PPUSH
25302: PPUSH
25303: PPUSH
25304: PPUSH
25305: PPUSH
25306: PPUSH
25307: PPUSH
25308: PPUSH
25309: PPUSH
25310: PPUSH
25311: PPUSH
25312: PPUSH
25313: PPUSH
25314: PPUSH
25315: PPUSH
25316: PPUSH
25317: PPUSH
25318: PPUSH
25319: PPUSH
25320: PPUSH
25321: PPUSH
25322: PPUSH
25323: PPUSH
25324: PPUSH
25325: PPUSH
25326: PPUSH
25327: PPUSH
25328: PPUSH
25329: PPUSH
// result = [ ] ;
25330: LD_ADDR_VAR 0 7
25334: PUSH
25335: EMPTY
25336: ST_TO_ADDR
// temp_list = [ ] ;
25337: LD_ADDR_VAR 0 9
25341: PUSH
25342: EMPTY
25343: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25344: LD_VAR 0 4
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: LD_INT 2
25357: PUSH
25358: LD_INT 3
25360: PUSH
25361: LD_INT 4
25363: PUSH
25364: LD_INT 5
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: IN
25375: NOT
25376: IFTRUE 25419
25378: PUSH
25379: LD_VAR 0 1
25383: PUSH
25384: LD_INT 0
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: IN
25394: IFFALSE 25418
25396: PUSH
25397: LD_VAR 0 5
25401: PUSH
25402: LD_INT 1
25404: PUSH
25405: LD_INT 2
25407: PUSH
25408: LD_INT 3
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: LIST
25415: IN
25416: NOT
25417: AND
25418: OR
25419: IFFALSE 25423
// exit ;
25421: GO 43822
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25423: LD_VAR 0 1
25427: PUSH
25428: LD_INT 6
25430: PUSH
25431: LD_INT 7
25433: PUSH
25434: LD_INT 8
25436: PUSH
25437: LD_INT 13
25439: PUSH
25440: LD_INT 12
25442: PUSH
25443: LD_INT 15
25445: PUSH
25446: LD_INT 11
25448: PUSH
25449: LD_INT 14
25451: PUSH
25452: LD_INT 10
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: IN
25466: IFFALSE 25476
// btype = b_lab ;
25468: LD_ADDR_VAR 0 1
25472: PUSH
25473: LD_INT 6
25475: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25476: LD_VAR 0 6
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: LD_INT 2
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: LIST
25494: IN
25495: NOT
25496: IFTRUE 25564
25498: PUSH
25499: LD_VAR 0 1
25503: PUSH
25504: LD_INT 0
25506: PUSH
25507: LD_INT 1
25509: PUSH
25510: LD_INT 2
25512: PUSH
25513: LD_INT 3
25515: PUSH
25516: LD_INT 6
25518: PUSH
25519: LD_INT 36
25521: PUSH
25522: LD_INT 4
25524: PUSH
25525: LD_INT 5
25527: PUSH
25528: LD_INT 31
25530: PUSH
25531: LD_INT 32
25533: PUSH
25534: LD_INT 33
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: IN
25550: NOT
25551: IFFALSE 25563
25553: PUSH
25554: LD_VAR 0 6
25558: PUSH
25559: LD_INT 1
25561: EQUAL
25562: AND
25563: OR
25564: IFTRUE 25596
25566: PUSH
25567: LD_VAR 0 1
25571: PUSH
25572: LD_INT 2
25574: PUSH
25575: LD_INT 3
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: IN
25582: NOT
25583: IFFALSE 25595
25585: PUSH
25586: LD_VAR 0 6
25590: PUSH
25591: LD_INT 2
25593: EQUAL
25594: AND
25595: OR
25596: IFFALSE 25606
// mode = 0 ;
25598: LD_ADDR_VAR 0 6
25602: PUSH
25603: LD_INT 0
25605: ST_TO_ADDR
// case mode of 0 :
25606: LD_VAR 0 6
25610: PUSH
25611: LD_INT 0
25613: DOUBLE
25614: EQUAL
25615: IFTRUE 25619
25617: GO 37072
25619: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25620: LD_ADDR_VAR 0 11
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: LD_INT 0
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 0
25637: PUSH
25638: LD_INT 1
25640: NEG
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 1
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 1
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 1
25689: NEG
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: LD_INT 2
25705: NEG
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: LD_INT 2
25716: NEG
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: LD_INT 2
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 0
25745: PUSH
25746: LD_INT 2
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 1
25755: NEG
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: LD_INT 3
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: LD_INT 3
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: LD_INT 2
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25813: LD_ADDR_VAR 0 12
25817: PUSH
25818: LD_INT 0
25820: PUSH
25821: LD_INT 0
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 0
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 1
25841: PUSH
25842: LD_INT 0
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 1
25851: PUSH
25852: LD_INT 1
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 0
25861: PUSH
25862: LD_INT 1
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 1
25871: NEG
25872: PUSH
25873: LD_INT 0
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: LD_INT 1
25886: NEG
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: LD_INT 1
25897: NEG
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 2
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 1
25925: NEG
25926: PUSH
25927: LD_INT 1
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 2
25936: NEG
25937: PUSH
25938: LD_INT 0
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 2
25947: NEG
25948: PUSH
25949: LD_INT 1
25951: NEG
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 2
25959: NEG
25960: PUSH
25961: LD_INT 1
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 3
25970: NEG
25971: PUSH
25972: LD_INT 0
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 3
25981: NEG
25982: PUSH
25983: LD_INT 1
25985: NEG
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26009: LD_ADDR_VAR 0 13
26013: PUSH
26014: LD_INT 0
26016: PUSH
26017: LD_INT 0
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: LD_INT 1
26029: NEG
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: LD_INT 0
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 1
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 0
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 1
26067: NEG
26068: PUSH
26069: LD_INT 0
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: LD_INT 1
26082: NEG
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: LD_INT 2
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 2
26102: PUSH
26103: LD_INT 1
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 2
26112: PUSH
26113: LD_INT 2
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: LD_INT 2
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 2
26132: NEG
26133: PUSH
26134: LD_INT 1
26136: NEG
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 2
26144: NEG
26145: PUSH
26146: LD_INT 2
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 2
26156: NEG
26157: PUSH
26158: LD_INT 3
26160: NEG
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 3
26168: NEG
26169: PUSH
26170: LD_INT 2
26172: NEG
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 3
26180: NEG
26181: PUSH
26182: LD_INT 3
26184: NEG
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26208: LD_ADDR_VAR 0 14
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: LD_INT 0
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 0
26225: PUSH
26226: LD_INT 1
26228: NEG
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 1
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: PUSH
26247: LD_INT 1
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 0
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 1
26266: NEG
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 1
26277: NEG
26278: PUSH
26279: LD_INT 1
26281: NEG
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 1
26289: NEG
26290: PUSH
26291: LD_INT 2
26293: NEG
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: LD_INT 2
26304: NEG
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 1
26312: PUSH
26313: LD_INT 1
26315: NEG
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 1
26323: PUSH
26324: LD_INT 2
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 0
26333: PUSH
26334: LD_INT 2
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 1
26343: NEG
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 1
26354: NEG
26355: PUSH
26356: LD_INT 3
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: LD_INT 3
26369: NEG
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 1
26377: PUSH
26378: LD_INT 2
26380: NEG
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26404: LD_ADDR_VAR 0 15
26408: PUSH
26409: LD_INT 0
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 0
26421: PUSH
26422: LD_INT 1
26424: NEG
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: LD_INT 1
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 0
26452: PUSH
26453: LD_INT 1
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 1
26462: NEG
26463: PUSH
26464: LD_INT 0
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 1
26473: NEG
26474: PUSH
26475: LD_INT 1
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 1
26485: PUSH
26486: LD_INT 1
26488: NEG
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 2
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 1
26516: NEG
26517: PUSH
26518: LD_INT 1
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 2
26527: NEG
26528: PUSH
26529: LD_INT 0
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 2
26538: NEG
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 2
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 3
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 3
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26597: LD_ADDR_VAR 0 16
26601: PUSH
26602: LD_INT 0
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: LD_INT 1
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: NEG
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: LD_INT 2
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 2
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 2
26700: PUSH
26701: LD_INT 2
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: PUSH
26711: LD_INT 2
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 2
26720: NEG
26721: PUSH
26722: LD_INT 1
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 2
26732: NEG
26733: PUSH
26734: LD_INT 2
26736: NEG
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 3
26744: PUSH
26745: LD_INT 2
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 3
26754: PUSH
26755: LD_INT 3
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 2
26764: PUSH
26765: LD_INT 3
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26790: LD_ADDR_VAR 0 17
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: LD_INT 0
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: NEG
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 1
26859: NEG
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: LD_INT 2
26875: NEG
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: LD_INT 2
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: LD_INT 1
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: PUSH
26906: LD_INT 0
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 2
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: LD_INT 2
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 0
26945: PUSH
26946: LD_INT 2
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 2
26966: NEG
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 2
26977: NEG
26978: PUSH
26979: LD_INT 1
26981: NEG
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 2
26989: NEG
26990: PUSH
26991: LD_INT 2
26993: NEG
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27020: LD_ADDR_VAR 0 18
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: LD_INT 1
27040: NEG
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 1
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: PUSH
27059: LD_INT 1
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: NEG
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 1
27089: NEG
27090: PUSH
27091: LD_INT 1
27093: NEG
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: LD_INT 2
27105: NEG
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: LD_INT 2
27116: NEG
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: LD_INT 1
27127: NEG
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 2
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: LD_INT 1
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: LD_INT 2
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: LD_INT 2
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 2
27196: NEG
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 2
27207: NEG
27208: PUSH
27209: LD_INT 1
27211: NEG
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 2
27219: NEG
27220: PUSH
27221: LD_INT 2
27223: NEG
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27250: LD_ADDR_VAR 0 19
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: LD_INT 1
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: LD_INT 2
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: LD_INT 2
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 2
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 2
27385: PUSH
27386: LD_INT 2
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: LD_INT 2
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: LD_INT 2
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: LD_INT 1
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 2
27426: NEG
27427: PUSH
27428: LD_INT 0
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 2
27437: NEG
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 2
27449: NEG
27450: PUSH
27451: LD_INT 2
27453: NEG
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27480: LD_ADDR_VAR 0 20
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: LD_INT 0
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: LD_INT 1
27500: NEG
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: LD_INT 1
27553: NEG
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: LD_INT 2
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: LD_INT 2
27576: NEG
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: LD_INT 1
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: LD_INT 2
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: LD_INT 1
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 2
27656: NEG
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 2
27667: NEG
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 2
27679: NEG
27680: PUSH
27681: LD_INT 2
27683: NEG
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27710: LD_ADDR_VAR 0 21
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: LD_INT 0
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 0
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: LD_INT 0
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: NEG
27769: PUSH
27770: LD_INT 0
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: LD_INT 1
27783: NEG
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: LD_INT 2
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: LD_INT 2
27806: NEG
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: LD_INT 1
27817: NEG
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 2
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 1
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 2
27845: PUSH
27846: LD_INT 2
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: LD_INT 2
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: LD_INT 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: NEG
27876: PUSH
27877: LD_INT 1
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 2
27886: NEG
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 2
27897: NEG
27898: PUSH
27899: LD_INT 1
27901: NEG
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 2
27909: NEG
27910: PUSH
27911: LD_INT 2
27913: NEG
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27940: LD_ADDR_VAR 0 22
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: LD_INT 0
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 1
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 0
27988: PUSH
27989: LD_INT 1
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 1
27998: NEG
27999: PUSH
28000: LD_INT 0
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: LD_INT 1
28013: NEG
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 1
28021: NEG
28022: PUSH
28023: LD_INT 2
28025: NEG
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 0
28033: PUSH
28034: LD_INT 2
28036: NEG
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: LD_INT 1
28047: NEG
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 2
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 2
28065: PUSH
28066: LD_INT 1
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: LD_INT 2
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 1
28105: NEG
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 2
28116: NEG
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 2
28127: NEG
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 2
28139: NEG
28140: PUSH
28141: LD_INT 2
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28170: LD_ADDR_VAR 0 23
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: LD_INT 1
28190: NEG
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 1
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 0
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 1
28228: NEG
28229: PUSH
28230: LD_INT 0
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 1
28239: NEG
28240: PUSH
28241: LD_INT 1
28243: NEG
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 1
28251: NEG
28252: PUSH
28253: LD_INT 2
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: LD_INT 2
28266: NEG
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 2
28285: PUSH
28286: LD_INT 0
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: PUSH
28296: LD_INT 1
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 2
28305: PUSH
28306: LD_INT 2
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: LD_INT 2
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: LD_INT 2
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 1
28335: NEG
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 2
28346: NEG
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 2
28357: NEG
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 2
28369: NEG
28370: PUSH
28371: LD_INT 2
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 2
28381: NEG
28382: PUSH
28383: LD_INT 3
28385: NEG
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 1
28393: NEG
28394: PUSH
28395: LD_INT 3
28397: NEG
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 1
28405: PUSH
28406: LD_INT 2
28408: NEG
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: LD_INT 1
28419: NEG
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28450: LD_ADDR_VAR 0 24
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: LD_INT 1
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 1
28508: NEG
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 1
28519: NEG
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: NEG
28532: PUSH
28533: LD_INT 2
28535: NEG
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: LD_INT 2
28546: NEG
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 1
28554: PUSH
28555: LD_INT 1
28557: NEG
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 2
28565: PUSH
28566: LD_INT 0
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 2
28575: PUSH
28576: LD_INT 1
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 2
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: LD_INT 2
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: LD_INT 2
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 1
28615: NEG
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 2
28626: NEG
28627: PUSH
28628: LD_INT 0
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 2
28637: NEG
28638: PUSH
28639: LD_INT 1
28641: NEG
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 2
28649: NEG
28650: PUSH
28651: LD_INT 2
28653: NEG
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 1
28661: PUSH
28662: LD_INT 2
28664: NEG
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 2
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 3
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 3
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28726: LD_ADDR_VAR 0 25
28730: PUSH
28731: LD_INT 0
28733: PUSH
28734: LD_INT 0
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: LD_INT 1
28746: NEG
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 1
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 1
28764: PUSH
28765: LD_INT 1
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 0
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 1
28784: NEG
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: NEG
28796: PUSH
28797: LD_INT 1
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: LD_INT 2
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: LD_INT 2
28822: NEG
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: LD_INT 1
28833: NEG
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 2
28841: PUSH
28842: LD_INT 0
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 2
28851: PUSH
28852: LD_INT 1
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 2
28861: PUSH
28862: LD_INT 2
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 1
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: LD_INT 2
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 1
28891: NEG
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 2
28902: NEG
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 2
28913: NEG
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 2
28925: NEG
28926: PUSH
28927: LD_INT 2
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 3
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 3
28947: PUSH
28948: LD_INT 2
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 2
28957: PUSH
28958: LD_INT 3
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 1
28967: PUSH
28968: LD_INT 3
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29000: LD_ADDR_VAR 0 26
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: LD_INT 0
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 0
29017: PUSH
29018: LD_INT 1
29020: NEG
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 1
29028: PUSH
29029: LD_INT 0
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: LD_INT 1
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: LD_INT 1
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 1
29058: NEG
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 1
29069: NEG
29070: PUSH
29071: LD_INT 1
29073: NEG
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 1
29081: NEG
29082: PUSH
29083: LD_INT 2
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: LD_INT 2
29096: NEG
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 1
29104: PUSH
29105: LD_INT 1
29107: NEG
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 2
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 2
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 2
29135: PUSH
29136: LD_INT 2
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: LD_INT 2
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: LD_INT 2
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 1
29165: NEG
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 2
29176: NEG
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 2
29187: NEG
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 2
29199: NEG
29200: PUSH
29201: LD_INT 2
29203: NEG
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 2
29211: PUSH
29212: LD_INT 3
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: LD_INT 3
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: LD_INT 2
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 2
29242: NEG
29243: PUSH
29244: LD_INT 1
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29276: LD_ADDR_VAR 0 27
29280: PUSH
29281: LD_INT 0
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 1
29304: PUSH
29305: LD_INT 0
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 1
29314: PUSH
29315: LD_INT 1
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 1
29334: NEG
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 1
29345: NEG
29346: PUSH
29347: LD_INT 1
29349: NEG
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 1
29357: NEG
29358: PUSH
29359: LD_INT 2
29361: NEG
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: LD_INT 2
29372: NEG
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 2
29401: PUSH
29402: LD_INT 1
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 2
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: LD_INT 2
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: LD_INT 2
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 1
29441: NEG
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 2
29452: NEG
29453: PUSH
29454: LD_INT 0
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 2
29463: NEG
29464: PUSH
29465: LD_INT 1
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 2
29475: NEG
29476: PUSH
29477: LD_INT 2
29479: NEG
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 1
29487: NEG
29488: PUSH
29489: LD_INT 2
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 2
29498: NEG
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 3
29509: NEG
29510: PUSH
29511: LD_INT 1
29513: NEG
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 3
29521: NEG
29522: PUSH
29523: LD_INT 2
29525: NEG
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29556: LD_ADDR_VAR 0 28
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: LD_INT 0
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: LD_INT 1
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: LD_INT 0
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: LD_INT 1
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 0
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 1
29614: NEG
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 1
29625: NEG
29626: PUSH
29627: LD_INT 1
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 1
29637: NEG
29638: PUSH
29639: LD_INT 2
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 0
29649: PUSH
29650: LD_INT 2
29652: NEG
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 1
29660: PUSH
29661: LD_INT 1
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 2
29671: PUSH
29672: LD_INT 0
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 2
29681: PUSH
29682: LD_INT 1
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 2
29691: PUSH
29692: LD_INT 2
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: LD_INT 2
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 0
29711: PUSH
29712: LD_INT 2
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 1
29721: NEG
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: NEG
29733: PUSH
29734: LD_INT 0
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 2
29743: NEG
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 2
29755: NEG
29756: PUSH
29757: LD_INT 2
29759: NEG
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 2
29767: NEG
29768: PUSH
29769: LD_INT 3
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: LD_INT 3
29783: NEG
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 3
29791: NEG
29792: PUSH
29793: LD_INT 1
29795: NEG
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 3
29803: NEG
29804: PUSH
29805: LD_INT 2
29807: NEG
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29838: LD_ADDR_VAR 0 29
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: LD_INT 0
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: LD_INT 1
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: LD_INT 1
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: LD_INT 0
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 1
29907: NEG
29908: PUSH
29909: LD_INT 1
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 1
29919: NEG
29920: PUSH
29921: LD_INT 2
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 0
29931: PUSH
29932: LD_INT 2
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 2
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 2
29963: PUSH
29964: LD_INT 1
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 1
29973: PUSH
29974: LD_INT 2
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: LD_INT 2
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 1
29993: NEG
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 2
30004: NEG
30005: PUSH
30006: LD_INT 1
30008: NEG
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 2
30016: NEG
30017: PUSH
30018: LD_INT 2
30020: NEG
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 2
30028: NEG
30029: PUSH
30030: LD_INT 3
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 2
30040: PUSH
30041: LD_INT 1
30043: NEG
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 3
30051: PUSH
30052: LD_INT 1
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 1
30061: PUSH
30062: LD_INT 3
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 1
30071: NEG
30072: PUSH
30073: LD_INT 2
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 3
30082: NEG
30083: PUSH
30084: LD_INT 2
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30117: LD_ADDR_VAR 0 30
30121: PUSH
30122: LD_INT 0
30124: PUSH
30125: LD_INT 0
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: LD_INT 1
30137: NEG
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 1
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 1
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 1
30175: NEG
30176: PUSH
30177: LD_INT 0
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 1
30186: NEG
30187: PUSH
30188: LD_INT 1
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: LD_INT 2
30202: NEG
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: LD_INT 2
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: LD_INT 1
30224: NEG
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 2
30232: PUSH
30233: LD_INT 0
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 2
30242: PUSH
30243: LD_INT 1
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: PUSH
30253: LD_INT 2
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 1
30262: PUSH
30263: LD_INT 2
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 1
30272: NEG
30273: PUSH
30274: LD_INT 1
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 2
30283: NEG
30284: PUSH
30285: LD_INT 0
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 2
30294: NEG
30295: PUSH
30296: LD_INT 1
30298: NEG
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 1
30306: NEG
30307: PUSH
30308: LD_INT 3
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 1
30318: PUSH
30319: LD_INT 2
30321: NEG
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 3
30329: PUSH
30330: LD_INT 2
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 2
30339: PUSH
30340: LD_INT 3
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 2
30349: NEG
30350: PUSH
30351: LD_INT 1
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 3
30360: NEG
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30395: LD_ADDR_VAR 0 31
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: LD_INT 0
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: LD_INT 1
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 1
30423: PUSH
30424: LD_INT 0
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: LD_INT 1
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: LD_INT 1
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 1
30453: NEG
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: NEG
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 1
30476: NEG
30477: PUSH
30478: LD_INT 2
30480: NEG
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: LD_INT 1
30491: NEG
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 2
30499: PUSH
30500: LD_INT 0
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 2
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 2
30519: PUSH
30520: LD_INT 2
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 1
30529: PUSH
30530: LD_INT 2
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: LD_INT 2
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 2
30560: NEG
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 2
30572: NEG
30573: PUSH
30574: LD_INT 2
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 2
30584: NEG
30585: PUSH
30586: LD_INT 3
30588: NEG
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 2
30596: PUSH
30597: LD_INT 1
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 3
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 1
30617: PUSH
30618: LD_INT 3
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 1
30627: NEG
30628: PUSH
30629: LD_INT 2
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 3
30638: NEG
30639: PUSH
30640: LD_INT 2
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30673: LD_ADDR_VAR 0 32
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: LD_INT 0
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 0
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 1
30701: PUSH
30702: LD_INT 0
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 1
30711: PUSH
30712: LD_INT 1
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 0
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 1
30731: NEG
30732: PUSH
30733: LD_INT 0
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: LD_INT 1
30746: NEG
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 1
30754: NEG
30755: PUSH
30756: LD_INT 2
30758: NEG
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: LD_INT 2
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: LD_INT 1
30780: NEG
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 2
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 2
30798: PUSH
30799: LD_INT 2
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 1
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 0
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 1
30828: NEG
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 2
30839: NEG
30840: PUSH
30841: LD_INT 0
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 2
30850: NEG
30851: PUSH
30852: LD_INT 1
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 1
30862: NEG
30863: PUSH
30864: LD_INT 3
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 1
30874: PUSH
30875: LD_INT 2
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 3
30885: PUSH
30886: LD_INT 2
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: LD_INT 3
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 2
30905: NEG
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 3
30916: NEG
30917: PUSH
30918: LD_INT 1
30920: NEG
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30951: LD_ADDR_VAR 0 33
30955: PUSH
30956: LD_INT 0
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 0
30968: PUSH
30969: LD_INT 1
30971: NEG
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: LD_INT 0
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 1
30989: PUSH
30990: LD_INT 1
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 0
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 1
31032: NEG
31033: PUSH
31034: LD_INT 2
31036: NEG
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 1
31044: PUSH
31045: LD_INT 1
31047: NEG
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 2
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 1
31075: PUSH
31076: LD_INT 2
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 0
31085: PUSH
31086: LD_INT 2
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 1
31095: NEG
31096: PUSH
31097: LD_INT 1
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 2
31106: NEG
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 2
31117: NEG
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 2
31129: NEG
31130: PUSH
31131: LD_INT 2
31133: NEG
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 2
31141: NEG
31142: PUSH
31143: LD_INT 3
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 3
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 1
31174: PUSH
31175: LD_INT 3
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 3
31195: NEG
31196: PUSH
31197: LD_INT 2
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31230: LD_ADDR_VAR 0 34
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 0
31247: PUSH
31248: LD_INT 1
31250: NEG
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 1
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: LD_INT 1
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 0
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 1
31288: NEG
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 1
31299: NEG
31300: PUSH
31301: LD_INT 1
31303: NEG
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 1
31311: NEG
31312: PUSH
31313: LD_INT 2
31315: NEG
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: LD_INT 2
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 2
31345: PUSH
31346: LD_INT 1
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 2
31355: PUSH
31356: LD_INT 2
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: LD_INT 2
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 1
31375: NEG
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 2
31386: NEG
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 2
31397: NEG
31398: PUSH
31399: LD_INT 1
31401: NEG
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 2
31409: NEG
31410: PUSH
31411: LD_INT 2
31413: NEG
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: NEG
31422: PUSH
31423: LD_INT 3
31425: NEG
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: LD_INT 2
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 3
31444: PUSH
31445: LD_INT 2
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 2
31454: PUSH
31455: LD_INT 3
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 2
31464: NEG
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 3
31475: NEG
31476: PUSH
31477: LD_INT 1
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31510: LD_ADDR_VAR 0 35
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: LD_INT 0
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 1
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: LD_INT 1
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 0
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 1
31568: NEG
31569: PUSH
31570: LD_INT 0
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 1
31579: NEG
31580: PUSH
31581: LD_INT 1
31583: NEG
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 2
31591: PUSH
31592: LD_INT 1
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 2
31601: NEG
31602: PUSH
31603: LD_INT 1
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31622: LD_ADDR_VAR 0 36
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: LD_INT 1
31642: NEG
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: LD_INT 0
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 0
31670: PUSH
31671: LD_INT 1
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 1
31680: NEG
31681: PUSH
31682: LD_INT 0
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: NEG
31692: PUSH
31693: LD_INT 1
31695: NEG
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: LD_INT 2
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: LD_INT 2
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31734: LD_ADDR_VAR 0 37
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: LD_INT 0
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: LD_INT 1
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: LD_INT 1
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: NEG
31793: PUSH
31794: LD_INT 0
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 1
31803: NEG
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: LD_INT 1
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 1
31826: NEG
31827: PUSH
31828: LD_INT 1
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31846: LD_ADDR_VAR 0 38
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: LD_INT 1
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 1
31904: NEG
31905: PUSH
31906: LD_INT 0
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 2
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31958: LD_ADDR_VAR 0 39
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 0
31975: PUSH
31976: LD_INT 1
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: LD_INT 1
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: LD_INT 1
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 1
32016: NEG
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 1
32027: NEG
32028: PUSH
32029: LD_INT 1
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: LD_INT 2
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: LD_INT 2
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32070: LD_ADDR_VAR 0 40
32074: PUSH
32075: LD_INT 0
32077: PUSH
32078: LD_INT 0
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 0
32087: PUSH
32088: LD_INT 1
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 1
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: LD_INT 1
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 0
32118: PUSH
32119: LD_INT 1
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 1
32128: NEG
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 1
32139: NEG
32140: PUSH
32141: LD_INT 1
32143: NEG
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 1
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 1
32162: NEG
32163: PUSH
32164: LD_INT 1
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32182: LD_ADDR_VAR 0 41
32186: PUSH
32187: LD_INT 0
32189: PUSH
32190: LD_INT 0
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 1
32202: NEG
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 1
32240: NEG
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: LD_INT 1
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: PUSH
32265: LD_INT 2
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 1
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 2
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 2
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: PUSH
32317: LD_INT 2
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: LD_INT 1
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 2
32337: NEG
32338: PUSH
32339: LD_INT 0
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 2
32348: NEG
32349: PUSH
32350: LD_INT 1
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 2
32360: NEG
32361: PUSH
32362: LD_INT 2
32364: NEG
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 2
32372: NEG
32373: PUSH
32374: LD_INT 3
32376: NEG
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 2
32384: PUSH
32385: LD_INT 1
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 3
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 3
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 3
32415: PUSH
32416: LD_INT 2
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 3
32425: PUSH
32426: LD_INT 3
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 2
32435: PUSH
32436: LD_INT 3
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 2
32445: NEG
32446: PUSH
32447: LD_INT 1
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 3
32456: NEG
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 3
32467: NEG
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 3
32479: NEG
32480: PUSH
32481: LD_INT 2
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 3
32491: NEG
32492: PUSH
32493: LD_INT 3
32495: NEG
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32532: LD_ADDR_VAR 0 42
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: LD_INT 1
32552: NEG
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: LD_INT 0
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: LD_INT 1
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: LD_INT 0
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: LD_INT 1
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 1
32613: NEG
32614: PUSH
32615: LD_INT 2
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: LD_INT 2
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 1
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 2
32647: PUSH
32648: LD_INT 1
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: LD_INT 2
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: LD_INT 2
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: LD_INT 2
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 1
32687: NEG
32688: PUSH
32689: LD_INT 1
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: NEG
32711: PUSH
32712: LD_INT 2
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 2
32722: NEG
32723: PUSH
32724: LD_INT 3
32726: NEG
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: NEG
32735: PUSH
32736: LD_INT 3
32738: NEG
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: LD_INT 3
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 1
32757: PUSH
32758: LD_INT 2
32760: NEG
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 3
32768: PUSH
32769: LD_INT 2
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 3
32778: PUSH
32779: LD_INT 3
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 2
32788: PUSH
32789: LD_INT 3
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: LD_INT 3
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 0
32808: PUSH
32809: LD_INT 3
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 1
32818: NEG
32819: PUSH
32820: LD_INT 2
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 3
32829: NEG
32830: PUSH
32831: LD_INT 2
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 3
32841: NEG
32842: PUSH
32843: LD_INT 3
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32882: LD_ADDR_VAR 0 43
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 0
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: LD_INT 1
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: LD_INT 0
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 1
32951: NEG
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 1
32963: NEG
32964: PUSH
32965: LD_INT 2
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 0
32975: PUSH
32976: LD_INT 2
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: LD_INT 1
32989: NEG
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 2
32997: PUSH
32998: LD_INT 0
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 2
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: LD_INT 2
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 0
33027: PUSH
33028: LD_INT 2
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: LD_INT 1
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 2
33048: NEG
33049: PUSH
33050: LD_INT 0
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 2
33059: NEG
33060: PUSH
33061: LD_INT 1
33063: NEG
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 1
33071: NEG
33072: PUSH
33073: LD_INT 3
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: LD_INT 3
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: LD_INT 2
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 2
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 3
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 3
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 3
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: LD_INT 2
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 2
33167: NEG
33168: PUSH
33169: LD_INT 1
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 3
33178: NEG
33179: PUSH
33180: LD_INT 0
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 3
33189: NEG
33190: PUSH
33191: LD_INT 1
33193: NEG
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33230: LD_ADDR_VAR 0 44
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: LD_INT 1
33250: NEG
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 1
33258: PUSH
33259: LD_INT 0
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: NEG
33300: PUSH
33301: LD_INT 1
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 1
33311: NEG
33312: PUSH
33313: LD_INT 2
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 2
33354: PUSH
33355: LD_INT 2
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: LD_INT 2
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: LD_INT 1
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 2
33385: NEG
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 2
33396: NEG
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 2
33408: NEG
33409: PUSH
33410: LD_INT 2
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: LD_INT 3
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 2
33432: PUSH
33433: LD_INT 1
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 3
33443: PUSH
33444: LD_INT 0
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 3
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 3
33463: PUSH
33464: LD_INT 2
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 3
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: LD_INT 3
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 2
33493: NEG
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 3
33504: NEG
33505: PUSH
33506: LD_INT 0
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 3
33515: NEG
33516: PUSH
33517: LD_INT 1
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 3
33527: NEG
33528: PUSH
33529: LD_INT 2
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 3
33539: NEG
33540: PUSH
33541: LD_INT 3
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33580: LD_ADDR_VAR 0 45
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: LD_INT 1
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: LD_INT 1
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 1
33638: NEG
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: LD_INT 1
33653: NEG
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: PUSH
33663: LD_INT 2
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: LD_INT 2
33676: NEG
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 2
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 2
33705: PUSH
33706: LD_INT 2
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 1
33715: PUSH
33716: LD_INT 2
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 0
33725: PUSH
33726: LD_INT 2
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 1
33735: NEG
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 2
33746: NEG
33747: PUSH
33748: LD_INT 1
33750: NEG
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 2
33758: NEG
33759: PUSH
33760: LD_INT 2
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 2
33770: NEG
33771: PUSH
33772: LD_INT 3
33774: NEG
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: NEG
33783: PUSH
33784: LD_INT 3
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: LD_INT 3
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 1
33805: PUSH
33806: LD_INT 2
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 3
33816: PUSH
33817: LD_INT 2
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 3
33826: PUSH
33827: LD_INT 3
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 2
33836: PUSH
33837: LD_INT 3
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 1
33846: PUSH
33847: LD_INT 3
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 0
33856: PUSH
33857: LD_INT 3
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 1
33866: NEG
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 3
33877: NEG
33878: PUSH
33879: LD_INT 2
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 3
33889: NEG
33890: PUSH
33891: LD_INT 3
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33930: LD_ADDR_VAR 0 46
33934: PUSH
33935: LD_INT 0
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: LD_INT 1
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 1
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: PUSH
33969: LD_INT 1
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: LD_INT 1
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 1
33988: NEG
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: LD_INT 1
34003: NEG
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: NEG
34012: PUSH
34013: LD_INT 2
34015: NEG
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: LD_INT 2
34026: NEG
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: LD_INT 1
34037: NEG
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 2
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 2
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: LD_INT 2
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: LD_INT 2
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 2
34096: NEG
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 2
34107: NEG
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: LD_INT 3
34123: NEG
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 0
34131: PUSH
34132: LD_INT 3
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: LD_INT 2
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 2
34153: PUSH
34154: LD_INT 1
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 3
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 3
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: LD_INT 3
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: LD_INT 3
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 1
34204: NEG
34205: PUSH
34206: LD_INT 2
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 2
34215: NEG
34216: PUSH
34217: LD_INT 1
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 3
34226: NEG
34227: PUSH
34228: LD_INT 0
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 3
34237: NEG
34238: PUSH
34239: LD_INT 1
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34278: LD_ADDR_VAR 0 47
34282: PUSH
34283: LD_INT 0
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 1
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: LD_INT 1
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: LD_INT 1
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: LD_INT 2
34363: NEG
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: LD_INT 2
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 2
34393: NEG
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 2
34405: NEG
34406: PUSH
34407: LD_INT 2
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34429: LD_ADDR_VAR 0 48
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 1
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 1
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 0
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: NEG
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: LD_INT 1
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: NEG
34511: PUSH
34512: LD_INT 2
34514: NEG
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: LD_INT 2
34525: NEG
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34576: LD_ADDR_VAR 0 49
34580: PUSH
34581: LD_INT 0
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: LD_INT 1
34596: NEG
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 1
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: LD_INT 1
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: LD_INT 0
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 1
34645: NEG
34646: PUSH
34647: LD_INT 1
34649: NEG
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 1
34657: PUSH
34658: LD_INT 1
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 2
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: LD_INT 2
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 1
34698: PUSH
34699: LD_INT 2
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34720: LD_ADDR_VAR 0 50
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 1
34778: NEG
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: LD_INT 1
34793: NEG
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 2
34801: PUSH
34802: LD_INT 1
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 2
34811: PUSH
34812: LD_INT 2
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: LD_INT 2
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 1
34841: NEG
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34864: LD_ADDR_VAR 0 51
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: LD_INT 0
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 1
34922: NEG
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 1
34933: NEG
34934: PUSH
34935: LD_INT 1
34937: NEG
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: LD_INT 2
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: LD_INT 2
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 1
34965: NEG
34966: PUSH
34967: LD_INT 1
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 2
34976: NEG
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 2
34987: NEG
34988: PUSH
34989: LD_INT 1
34991: NEG
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35011: LD_ADDR_VAR 0 52
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 1
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 0
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 1
35080: NEG
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 1
35092: NEG
35093: PUSH
35094: LD_INT 2
35096: NEG
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 1
35104: NEG
35105: PUSH
35106: LD_INT 1
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 2
35115: NEG
35116: PUSH
35117: LD_INT 0
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 2
35126: NEG
35127: PUSH
35128: LD_INT 1
35130: NEG
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 2
35138: NEG
35139: PUSH
35140: LD_INT 2
35142: NEG
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35162: LD_ADDR_VAR 0 53
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: LD_INT 0
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 1
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: NEG
35221: PUSH
35222: LD_INT 0
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 1
35231: NEG
35232: PUSH
35233: LD_INT 1
35235: NEG
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: NEG
35244: PUSH
35245: LD_INT 2
35247: NEG
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: LD_INT 2
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: LD_INT 1
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 2
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 2
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 2
35297: PUSH
35298: LD_INT 2
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 1
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: LD_INT 2
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 1
35327: NEG
35328: PUSH
35329: LD_INT 1
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 2
35338: NEG
35339: PUSH
35340: LD_INT 0
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 2
35349: NEG
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 2
35361: NEG
35362: PUSH
35363: LD_INT 2
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35392: LD_ADDR_VAR 0 54
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: LD_INT 0
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: LD_INT 1
35412: NEG
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 1
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 1
35430: PUSH
35431: LD_INT 1
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: LD_INT 0
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 1
35461: NEG
35462: PUSH
35463: LD_INT 1
35465: NEG
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: LD_INT 2
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: LD_INT 2
35488: NEG
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 2
35507: PUSH
35508: LD_INT 0
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 2
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 2
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 1
35537: PUSH
35538: LD_INT 2
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 1
35557: NEG
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 2
35568: NEG
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 2
35579: NEG
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 2
35591: NEG
35592: PUSH
35593: LD_INT 2
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35622: LD_ADDR_VAR 0 55
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 1
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 1
35691: NEG
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: LD_INT 2
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: LD_INT 2
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 2
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 2
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: LD_INT 1
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 2
35798: NEG
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 2
35809: NEG
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 2
35821: NEG
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35852: LD_ADDR_VAR 0 56
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 1
35872: NEG
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: NEG
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 1
35933: NEG
35934: PUSH
35935: LD_INT 2
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 0
35945: PUSH
35946: LD_INT 2
35948: NEG
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: LD_INT 1
35959: NEG
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 2
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 2
35977: PUSH
35978: LD_INT 1
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 2
35987: PUSH
35988: LD_INT 2
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: LD_INT 2
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: LD_INT 2
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 2
36028: NEG
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 2
36039: NEG
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 2
36051: NEG
36052: PUSH
36053: LD_INT 2
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36082: LD_ADDR_VAR 0 57
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: LD_INT 1
36102: NEG
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 1
36140: NEG
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 1
36151: NEG
36152: PUSH
36153: LD_INT 1
36155: NEG
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 1
36163: NEG
36164: PUSH
36165: LD_INT 2
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: LD_INT 2
36178: NEG
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 2
36197: PUSH
36198: LD_INT 0
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 2
36207: PUSH
36208: LD_INT 1
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 2
36217: PUSH
36218: LD_INT 2
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: LD_INT 2
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 2
36258: NEG
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 2
36269: NEG
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 2
36281: NEG
36282: PUSH
36283: LD_INT 2
36285: NEG
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36312: LD_ADDR_VAR 0 58
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: NEG
36371: PUSH
36372: LD_INT 0
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: LD_INT 1
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: LD_INT 2
36397: NEG
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: LD_INT 2
36408: NEG
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 2
36427: PUSH
36428: LD_INT 0
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 2
36437: PUSH
36438: LD_INT 1
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 2
36447: PUSH
36448: LD_INT 2
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: LD_INT 2
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 0
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: NEG
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 2
36488: NEG
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 2
36511: NEG
36512: PUSH
36513: LD_INT 2
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36542: LD_ADDR_VAR 0 59
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 0
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 1
36611: NEG
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36630: LD_ADDR_VAR 0 60
36634: PUSH
36635: LD_INT 0
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: LD_INT 1
36650: NEG
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: LD_INT 1
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: LD_INT 1
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: LD_INT 0
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 1
36699: NEG
36700: PUSH
36701: LD_INT 1
36703: NEG
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36718: LD_ADDR_VAR 0 61
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 1
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: LD_INT 1
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 1
36776: NEG
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36806: LD_ADDR_VAR 0 62
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: LD_INT 0
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 1
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: LD_INT 1
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 0
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 1
36864: NEG
36865: PUSH
36866: LD_INT 0
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 1
36875: NEG
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36894: LD_ADDR_VAR 0 63
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: LD_INT 1
36914: NEG
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 1
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 1
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 1
36952: NEG
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36982: LD_ADDR_VAR 0 64
36986: PUSH
36987: LD_INT 0
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: LD_INT 1
37002: NEG
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 1
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 1
37040: NEG
37041: PUSH
37042: LD_INT 0
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: ST_TO_ADDR
// end ; 1 :
37070: GO 42967
37072: LD_INT 1
37074: DOUBLE
37075: EQUAL
37076: IFTRUE 37080
37078: GO 39703
37080: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37081: LD_ADDR_VAR 0 11
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: LD_INT 3
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: LD_INT 3
37103: NEG
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 1
37111: PUSH
37112: LD_INT 2
37114: NEG
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37125: LD_ADDR_VAR 0 12
37129: PUSH
37130: LD_INT 2
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 3
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 3
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37166: LD_ADDR_VAR 0 13
37170: PUSH
37171: LD_INT 3
37173: PUSH
37174: LD_INT 2
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 3
37183: PUSH
37184: LD_INT 3
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: LD_INT 3
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: LIST
37205: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37206: LD_ADDR_VAR 0 14
37210: PUSH
37211: LD_INT 1
37213: PUSH
37214: LD_INT 3
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: LD_INT 3
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: NEG
37234: PUSH
37235: LD_INT 2
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: LIST
37246: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37247: LD_ADDR_VAR 0 15
37251: PUSH
37252: LD_INT 2
37254: NEG
37255: PUSH
37256: LD_INT 1
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 3
37265: NEG
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 3
37276: NEG
37277: PUSH
37278: LD_INT 1
37280: NEG
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: LIST
37290: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37291: LD_ADDR_VAR 0 16
37295: PUSH
37296: LD_INT 2
37298: NEG
37299: PUSH
37300: LD_INT 3
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 3
37310: NEG
37311: PUSH
37312: LD_INT 2
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 3
37322: NEG
37323: PUSH
37324: LD_INT 3
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37337: LD_ADDR_VAR 0 17
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: LD_INT 3
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: LD_INT 3
37359: NEG
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 1
37367: PUSH
37368: LD_INT 2
37370: NEG
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: LIST
37380: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37381: LD_ADDR_VAR 0 18
37385: PUSH
37386: LD_INT 2
37388: PUSH
37389: LD_INT 1
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 3
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 3
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: LIST
37421: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37422: LD_ADDR_VAR 0 19
37426: PUSH
37427: LD_INT 3
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 3
37439: PUSH
37440: LD_INT 3
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 2
37449: PUSH
37450: LD_INT 3
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: LIST
37461: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37462: LD_ADDR_VAR 0 20
37466: PUSH
37467: LD_INT 1
37469: PUSH
37470: LD_INT 3
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: LD_INT 3
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 1
37489: NEG
37490: PUSH
37491: LD_INT 2
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: LIST
37502: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37503: LD_ADDR_VAR 0 21
37507: PUSH
37508: LD_INT 2
37510: NEG
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 3
37521: NEG
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 3
37532: NEG
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: LIST
37546: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37547: LD_ADDR_VAR 0 22
37551: PUSH
37552: LD_INT 2
37554: NEG
37555: PUSH
37556: LD_INT 3
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 3
37566: NEG
37567: PUSH
37568: LD_INT 2
37570: NEG
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 3
37578: NEG
37579: PUSH
37580: LD_INT 3
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: LIST
37592: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37593: LD_ADDR_VAR 0 23
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: LD_INT 3
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: LD_INT 4
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: LD_INT 3
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: LIST
37636: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37637: LD_ADDR_VAR 0 24
37641: PUSH
37642: LD_INT 3
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 3
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 4
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: LIST
37677: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37678: LD_ADDR_VAR 0 25
37682: PUSH
37683: LD_INT 3
37685: PUSH
37686: LD_INT 3
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 4
37695: PUSH
37696: LD_INT 3
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 3
37705: PUSH
37706: LD_INT 4
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: LIST
37717: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37718: LD_ADDR_VAR 0 26
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: LD_INT 3
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: LD_INT 4
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: NEG
37746: PUSH
37747: LD_INT 3
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37759: LD_ADDR_VAR 0 27
37763: PUSH
37764: LD_INT 3
37766: NEG
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 3
37777: NEG
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 4
37788: NEG
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37803: LD_ADDR_VAR 0 28
37807: PUSH
37808: LD_INT 3
37810: NEG
37811: PUSH
37812: LD_INT 3
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 3
37822: NEG
37823: PUSH
37824: LD_INT 4
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 4
37834: NEG
37835: PUSH
37836: LD_INT 3
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: LIST
37848: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37849: LD_ADDR_VAR 0 29
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: LD_INT 3
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 3
37871: NEG
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 2
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 1
37890: NEG
37891: PUSH
37892: LD_INT 4
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: LD_INT 4
37905: NEG
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 1
37913: PUSH
37914: LD_INT 3
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: LD_INT 5
37928: NEG
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: LD_INT 5
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: LD_INT 4
37950: NEG
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 1
37958: NEG
37959: PUSH
37960: LD_INT 6
37962: NEG
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: LD_INT 6
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: LD_INT 5
37984: NEG
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38004: LD_ADDR_VAR 0 30
38008: PUSH
38009: LD_INT 2
38011: PUSH
38012: LD_INT 1
38014: NEG
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 3
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: LD_INT 1
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 3
38042: PUSH
38043: LD_INT 1
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 4
38053: PUSH
38054: LD_INT 0
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 4
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 4
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 5
38084: PUSH
38085: LD_INT 0
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 5
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 5
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 6
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 6
38125: PUSH
38126: LD_INT 1
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38147: LD_ADDR_VAR 0 31
38151: PUSH
38152: LD_INT 3
38154: PUSH
38155: LD_INT 2
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: LD_INT 3
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: LD_INT 3
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 4
38184: PUSH
38185: LD_INT 3
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 4
38194: PUSH
38195: LD_INT 4
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 3
38204: PUSH
38205: LD_INT 4
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 5
38214: PUSH
38215: LD_INT 4
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 5
38224: PUSH
38225: LD_INT 5
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 4
38234: PUSH
38235: LD_INT 5
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 6
38244: PUSH
38245: LD_INT 5
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 6
38254: PUSH
38255: LD_INT 6
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 5
38264: PUSH
38265: LD_INT 6
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38286: LD_ADDR_VAR 0 32
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: LD_INT 3
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: LD_INT 3
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: PUSH
38315: LD_INT 2
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: LD_INT 4
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: LD_INT 4
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: LD_INT 3
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: LD_INT 5
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: LD_INT 5
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: NEG
38376: PUSH
38377: LD_INT 4
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: LD_INT 6
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: LD_INT 6
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: LD_INT 5
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38429: LD_ADDR_VAR 0 33
38433: PUSH
38434: LD_INT 2
38436: NEG
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 3
38447: NEG
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 3
38458: NEG
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 3
38470: NEG
38471: PUSH
38472: LD_INT 1
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 4
38481: NEG
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 4
38492: NEG
38493: PUSH
38494: LD_INT 1
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 4
38504: NEG
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 5
38515: NEG
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 5
38526: NEG
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 5
38538: NEG
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 6
38549: NEG
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 6
38560: NEG
38561: PUSH
38562: LD_INT 1
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38584: LD_ADDR_VAR 0 34
38588: PUSH
38589: LD_INT 2
38591: NEG
38592: PUSH
38593: LD_INT 3
38595: NEG
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 3
38603: NEG
38604: PUSH
38605: LD_INT 2
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 3
38615: NEG
38616: PUSH
38617: LD_INT 3
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 3
38627: NEG
38628: PUSH
38629: LD_INT 4
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 4
38639: NEG
38640: PUSH
38641: LD_INT 3
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 4
38651: NEG
38652: PUSH
38653: LD_INT 4
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 4
38663: NEG
38664: PUSH
38665: LD_INT 5
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 5
38675: NEG
38676: PUSH
38677: LD_INT 4
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 5
38687: NEG
38688: PUSH
38689: LD_INT 5
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 5
38699: NEG
38700: PUSH
38701: LD_INT 6
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 6
38711: NEG
38712: PUSH
38713: LD_INT 5
38715: NEG
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 6
38723: NEG
38724: PUSH
38725: LD_INT 6
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38747: LD_ADDR_VAR 0 41
38751: PUSH
38752: LD_INT 0
38754: PUSH
38755: LD_INT 2
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 1
38765: NEG
38766: PUSH
38767: LD_INT 3
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: LD_INT 2
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38791: LD_ADDR_VAR 0 42
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 2
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 3
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38832: LD_ADDR_VAR 0 43
38836: PUSH
38837: LD_INT 2
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 3
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 2
38859: PUSH
38860: LD_INT 3
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: LIST
38871: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38872: LD_ADDR_VAR 0 44
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: LD_INT 2
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: LD_INT 3
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: LD_INT 2
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: LIST
38912: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38913: LD_ADDR_VAR 0 45
38917: PUSH
38918: LD_INT 2
38920: NEG
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 2
38931: NEG
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 3
38942: NEG
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: LIST
38956: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38957: LD_ADDR_VAR 0 46
38961: PUSH
38962: LD_INT 2
38964: NEG
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 2
38976: NEG
38977: PUSH
38978: LD_INT 3
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 3
38988: NEG
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: LIST
39002: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39003: LD_ADDR_VAR 0 47
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: LD_INT 3
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: LD_INT 3
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39036: LD_ADDR_VAR 0 48
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: LD_INT 2
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39067: LD_ADDR_VAR 0 49
39071: PUSH
39072: LD_INT 3
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 3
39084: PUSH
39085: LD_INT 2
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39096: LD_ADDR_VAR 0 50
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: LD_INT 3
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: LD_INT 3
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39125: LD_ADDR_VAR 0 51
39129: PUSH
39130: LD_INT 1
39132: NEG
39133: PUSH
39134: LD_INT 2
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 2
39143: NEG
39144: PUSH
39145: LD_INT 1
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39156: LD_ADDR_VAR 0 52
39160: PUSH
39161: LD_INT 3
39163: NEG
39164: PUSH
39165: LD_INT 1
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 3
39175: NEG
39176: PUSH
39177: LD_INT 2
39179: NEG
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39189: LD_ADDR_VAR 0 53
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: LD_INT 3
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: LD_INT 3
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: LD_INT 2
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: LIST
39232: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39233: LD_ADDR_VAR 0 54
39237: PUSH
39238: LD_INT 2
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 3
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 3
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: LIST
39273: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39274: LD_ADDR_VAR 0 55
39278: PUSH
39279: LD_INT 3
39281: PUSH
39282: LD_INT 2
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 3
39291: PUSH
39292: LD_INT 3
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 2
39301: PUSH
39302: LD_INT 3
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: LIST
39313: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39314: LD_ADDR_VAR 0 56
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: LD_INT 3
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: LD_INT 3
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: LD_INT 2
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: LIST
39354: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39355: LD_ADDR_VAR 0 57
39359: PUSH
39360: LD_INT 2
39362: NEG
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 3
39373: NEG
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 3
39384: NEG
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: LIST
39398: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39399: LD_ADDR_VAR 0 58
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: LD_INT 3
39410: NEG
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 3
39418: NEG
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 3
39430: NEG
39431: PUSH
39432: LD_INT 3
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39445: LD_ADDR_VAR 0 59
39449: PUSH
39450: LD_INT 1
39452: NEG
39453: PUSH
39454: LD_INT 2
39456: NEG
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: LD_INT 2
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: LIST
39488: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39489: LD_ADDR_VAR 0 60
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 2
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 2
39517: PUSH
39518: LD_INT 1
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: LIST
39529: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39530: LD_ADDR_VAR 0 61
39534: PUSH
39535: LD_INT 2
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 2
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 2
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: LIST
39569: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39570: LD_ADDR_VAR 0 62
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: LD_INT 2
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: LD_INT 2
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: LIST
39610: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39611: LD_ADDR_VAR 0 63
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: NEG
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: LIST
39654: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39655: LD_ADDR_VAR 0 64
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: PUSH
39664: LD_INT 2
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 2
39674: NEG
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 2
39686: NEG
39687: PUSH
39688: LD_INT 2
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: LIST
39700: ST_TO_ADDR
// end ; 2 :
39701: GO 42967
39703: LD_INT 2
39705: DOUBLE
39706: EQUAL
39707: IFTRUE 39711
39709: GO 42966
39711: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39712: LD_ADDR_VAR 0 29
39716: PUSH
39717: LD_INT 4
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 4
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 5
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 5
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 4
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 3
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 3
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 3
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 5
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 3
39812: PUSH
39813: LD_INT 3
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 3
39822: PUSH
39823: LD_INT 2
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 4
39832: PUSH
39833: LD_INT 3
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 4
39842: PUSH
39843: LD_INT 4
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 3
39852: PUSH
39853: LD_INT 4
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 2
39862: PUSH
39863: LD_INT 3
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: LD_INT 2
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 4
39882: PUSH
39883: LD_INT 2
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: LD_INT 4
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: LD_INT 4
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 3
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: LD_INT 4
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: PUSH
39933: LD_INT 5
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: LD_INT 5
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: LD_INT 4
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 3
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 2
39974: PUSH
39975: LD_INT 5
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: LD_INT 3
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 3
39995: NEG
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 3
40006: NEG
40007: PUSH
40008: LD_INT 1
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 2
40018: NEG
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 2
40029: NEG
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 3
40040: NEG
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 4
40051: NEG
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 4
40062: NEG
40063: PUSH
40064: LD_INT 1
40066: NEG
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 4
40074: NEG
40075: PUSH
40076: LD_INT 2
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 2
40086: NEG
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 4
40097: NEG
40098: PUSH
40099: LD_INT 4
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 4
40109: NEG
40110: PUSH
40111: LD_INT 5
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 3
40121: NEG
40122: PUSH
40123: LD_INT 4
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 3
40133: NEG
40134: PUSH
40135: LD_INT 3
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 4
40145: NEG
40146: PUSH
40147: LD_INT 3
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 5
40157: NEG
40158: PUSH
40159: LD_INT 4
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 5
40169: NEG
40170: PUSH
40171: LD_INT 5
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 3
40181: NEG
40182: PUSH
40183: LD_INT 5
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 5
40193: NEG
40194: PUSH
40195: LD_INT 3
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40250: LD_ADDR_VAR 0 30
40254: PUSH
40255: LD_INT 4
40257: PUSH
40258: LD_INT 4
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 4
40267: PUSH
40268: LD_INT 3
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 5
40277: PUSH
40278: LD_INT 4
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 5
40287: PUSH
40288: LD_INT 5
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 4
40297: PUSH
40298: LD_INT 5
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 3
40307: PUSH
40308: LD_INT 4
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 3
40317: PUSH
40318: LD_INT 3
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 5
40327: PUSH
40328: LD_INT 3
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 3
40337: PUSH
40338: LD_INT 5
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: LD_INT 3
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: LD_INT 2
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: PUSH
40368: LD_INT 3
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: LD_INT 4
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: LD_INT 4
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: LD_INT 3
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: LD_INT 2
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: LD_INT 4
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: NEG
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 4
40440: NEG
40441: PUSH
40442: LD_INT 0
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 4
40451: NEG
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 3
40463: NEG
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 3
40474: NEG
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 4
40485: NEG
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 5
40496: NEG
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 5
40507: NEG
40508: PUSH
40509: LD_INT 1
40511: NEG
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 5
40519: NEG
40520: PUSH
40521: LD_INT 2
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 3
40531: NEG
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 3
40542: NEG
40543: PUSH
40544: LD_INT 3
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 3
40554: NEG
40555: PUSH
40556: LD_INT 4
40558: NEG
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: NEG
40567: PUSH
40568: LD_INT 3
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 2
40578: NEG
40579: PUSH
40580: LD_INT 2
40582: NEG
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 3
40590: NEG
40591: PUSH
40592: LD_INT 2
40594: NEG
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 4
40602: NEG
40603: PUSH
40604: LD_INT 3
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 4
40614: NEG
40615: PUSH
40616: LD_INT 4
40618: NEG
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 2
40626: NEG
40627: PUSH
40628: LD_INT 4
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 4
40638: NEG
40639: PUSH
40640: LD_INT 2
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: LD_INT 4
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 5
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: LD_INT 4
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 3
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: LD_INT 3
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: LD_INT 4
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: LD_INT 5
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 2
40729: PUSH
40730: LD_INT 3
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 2
40740: NEG
40741: PUSH
40742: LD_INT 5
40744: NEG
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40797: LD_ADDR_VAR 0 31
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: LD_INT 4
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: LD_INT 3
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: LD_INT 4
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 5
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: LD_INT 5
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: LD_INT 4
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: LD_INT 3
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: LD_INT 5
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: NEG
40887: PUSH
40888: LD_INT 3
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 3
40897: NEG
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 3
40908: NEG
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 2
40920: NEG
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 2
40931: NEG
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 3
40942: NEG
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 4
40953: NEG
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 4
40964: NEG
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 4
40976: NEG
40977: PUSH
40978: LD_INT 2
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 2
40988: NEG
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 4
40999: NEG
41000: PUSH
41001: LD_INT 4
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 4
41011: NEG
41012: PUSH
41013: LD_INT 5
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 3
41023: NEG
41024: PUSH
41025: LD_INT 4
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 3
41035: NEG
41036: PUSH
41037: LD_INT 3
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 4
41047: NEG
41048: PUSH
41049: LD_INT 3
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 5
41059: NEG
41060: PUSH
41061: LD_INT 4
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 5
41071: NEG
41072: PUSH
41073: LD_INT 5
41075: NEG
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 3
41083: NEG
41084: PUSH
41085: LD_INT 5
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 5
41095: NEG
41096: PUSH
41097: LD_INT 3
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: LD_INT 3
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 4
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: LD_INT 3
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: LD_INT 2
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: LD_INT 2
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: LD_INT 3
41166: NEG
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: LD_INT 4
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: LD_INT 2
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: LD_INT 4
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 4
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 4
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 5
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 5
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 4
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 3
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 3
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 3
41281: PUSH
41282: LD_INT 2
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 5
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41347: LD_ADDR_VAR 0 32
41351: PUSH
41352: LD_INT 4
41354: NEG
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 4
41365: NEG
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 3
41377: NEG
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 3
41388: NEG
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 4
41399: NEG
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 5
41410: NEG
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 5
41421: NEG
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 5
41433: NEG
41434: PUSH
41435: LD_INT 2
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 3
41445: NEG
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 3
41456: NEG
41457: PUSH
41458: LD_INT 3
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 3
41468: NEG
41469: PUSH
41470: LD_INT 4
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 2
41480: NEG
41481: PUSH
41482: LD_INT 3
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 2
41492: NEG
41493: PUSH
41494: LD_INT 2
41496: NEG
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 3
41504: NEG
41505: PUSH
41506: LD_INT 2
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 4
41516: NEG
41517: PUSH
41518: LD_INT 3
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 4
41528: NEG
41529: PUSH
41530: LD_INT 4
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: LD_INT 4
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 4
41552: NEG
41553: PUSH
41554: LD_INT 2
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: LD_INT 4
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 5
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: LD_INT 4
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: LD_INT 3
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: LD_INT 3
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: LD_INT 4
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: LD_INT 5
41635: NEG
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 2
41643: PUSH
41644: LD_INT 3
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: LD_INT 5
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 3
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 3
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 4
41687: PUSH
41688: LD_INT 0
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 4
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 3
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 2
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: LD_INT 1
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 2
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 4
41749: PUSH
41750: LD_INT 2
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 4
41759: PUSH
41760: LD_INT 4
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 4
41769: PUSH
41770: LD_INT 3
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 5
41779: PUSH
41780: LD_INT 4
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 5
41789: PUSH
41790: LD_INT 5
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 4
41799: PUSH
41800: LD_INT 5
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 3
41809: PUSH
41810: LD_INT 4
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 3
41819: PUSH
41820: LD_INT 3
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 5
41829: PUSH
41830: LD_INT 3
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 3
41839: PUSH
41840: LD_INT 5
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41894: LD_ADDR_VAR 0 33
41898: PUSH
41899: LD_INT 4
41901: NEG
41902: PUSH
41903: LD_INT 4
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 4
41913: NEG
41914: PUSH
41915: LD_INT 5
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 3
41925: NEG
41926: PUSH
41927: LD_INT 4
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 3
41937: NEG
41938: PUSH
41939: LD_INT 3
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 4
41949: NEG
41950: PUSH
41951: LD_INT 3
41953: NEG
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 5
41961: NEG
41962: PUSH
41963: LD_INT 4
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 5
41973: NEG
41974: PUSH
41975: LD_INT 5
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 3
41985: NEG
41986: PUSH
41987: LD_INT 5
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 5
41997: NEG
41998: PUSH
41999: LD_INT 3
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 3
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: LD_INT 4
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: LD_INT 3
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 2
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: LD_INT 3
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 1
42076: NEG
42077: PUSH
42078: LD_INT 4
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 2
42088: PUSH
42089: LD_INT 2
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 2
42099: NEG
42100: PUSH
42101: LD_INT 4
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 4
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 4
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 5
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 5
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 4
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 3
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 3
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 3
42183: PUSH
42184: LD_INT 2
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 5
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 3
42204: PUSH
42205: LD_INT 3
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 3
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 4
42224: PUSH
42225: LD_INT 3
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 4
42234: PUSH
42235: LD_INT 4
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 3
42244: PUSH
42245: LD_INT 4
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: LD_INT 3
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: LD_INT 2
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 4
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: LD_INT 4
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 4
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: LD_INT 4
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 5
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: LD_INT 5
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: LD_INT 4
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: LD_INT 3
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 2
42366: PUSH
42367: LD_INT 5
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: NEG
42377: PUSH
42378: LD_INT 3
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42432: LD_ADDR_VAR 0 34
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: LD_INT 4
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: LD_INT 5
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: LD_INT 4
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: LD_INT 3
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 3
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: LD_INT 4
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: LD_INT 5
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: PUSH
42519: LD_INT 3
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 2
42529: NEG
42530: PUSH
42531: LD_INT 5
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 3
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 3
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 4
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 4
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 3
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 2
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: LD_INT 2
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 4
42624: PUSH
42625: LD_INT 2
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 4
42634: PUSH
42635: LD_INT 4
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 4
42644: PUSH
42645: LD_INT 3
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 5
42654: PUSH
42655: LD_INT 4
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 5
42664: PUSH
42665: LD_INT 5
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 4
42674: PUSH
42675: LD_INT 5
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 3
42684: PUSH
42685: LD_INT 4
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 3
42694: PUSH
42695: LD_INT 3
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 5
42704: PUSH
42705: LD_INT 3
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 3
42714: PUSH
42715: LD_INT 5
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: LD_INT 3
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 2
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: LD_INT 3
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: LD_INT 4
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: LD_INT 4
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: LD_INT 3
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: LD_INT 2
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: LD_INT 4
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 4
42817: NEG
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 4
42828: NEG
42829: PUSH
42830: LD_INT 1
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 3
42840: NEG
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 3
42851: NEG
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 4
42862: NEG
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 5
42873: NEG
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 5
42884: NEG
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 5
42896: NEG
42897: PUSH
42898: LD_INT 2
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 3
42908: NEG
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: ST_TO_ADDR
// end ; end ;
42964: GO 42967
42966: POP
// case btype of b_depot , b_warehouse :
42967: LD_VAR 0 1
42971: PUSH
42972: LD_INT 0
42974: DOUBLE
42975: EQUAL
42976: IFTRUE 42986
42978: LD_INT 1
42980: DOUBLE
42981: EQUAL
42982: IFTRUE 42986
42984: GO 43187
42986: POP
// case nation of nation_american :
42987: LD_VAR 0 5
42991: PUSH
42992: LD_INT 1
42994: DOUBLE
42995: EQUAL
42996: IFTRUE 43000
42998: GO 43056
43000: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43001: LD_ADDR_VAR 0 9
43005: PUSH
43006: LD_VAR 0 11
43010: PUSH
43011: LD_VAR 0 12
43015: PUSH
43016: LD_VAR 0 13
43020: PUSH
43021: LD_VAR 0 14
43025: PUSH
43026: LD_VAR 0 15
43030: PUSH
43031: LD_VAR 0 16
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: PUSH
43044: LD_VAR 0 4
43048: PUSH
43049: LD_INT 1
43051: PLUS
43052: ARRAY
43053: ST_TO_ADDR
43054: GO 43185
43056: LD_INT 2
43058: DOUBLE
43059: EQUAL
43060: IFTRUE 43064
43062: GO 43120
43064: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43065: LD_ADDR_VAR 0 9
43069: PUSH
43070: LD_VAR 0 17
43074: PUSH
43075: LD_VAR 0 18
43079: PUSH
43080: LD_VAR 0 19
43084: PUSH
43085: LD_VAR 0 20
43089: PUSH
43090: LD_VAR 0 21
43094: PUSH
43095: LD_VAR 0 22
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: PUSH
43108: LD_VAR 0 4
43112: PUSH
43113: LD_INT 1
43115: PLUS
43116: ARRAY
43117: ST_TO_ADDR
43118: GO 43185
43120: LD_INT 3
43122: DOUBLE
43123: EQUAL
43124: IFTRUE 43128
43126: GO 43184
43128: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43129: LD_ADDR_VAR 0 9
43133: PUSH
43134: LD_VAR 0 23
43138: PUSH
43139: LD_VAR 0 24
43143: PUSH
43144: LD_VAR 0 25
43148: PUSH
43149: LD_VAR 0 26
43153: PUSH
43154: LD_VAR 0 27
43158: PUSH
43159: LD_VAR 0 28
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: PUSH
43172: LD_VAR 0 4
43176: PUSH
43177: LD_INT 1
43179: PLUS
43180: ARRAY
43181: ST_TO_ADDR
43182: GO 43185
43184: POP
43185: GO 43740
43187: LD_INT 2
43189: DOUBLE
43190: EQUAL
43191: IFTRUE 43201
43193: LD_INT 3
43195: DOUBLE
43196: EQUAL
43197: IFTRUE 43201
43199: GO 43257
43201: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43202: LD_ADDR_VAR 0 9
43206: PUSH
43207: LD_VAR 0 29
43211: PUSH
43212: LD_VAR 0 30
43216: PUSH
43217: LD_VAR 0 31
43221: PUSH
43222: LD_VAR 0 32
43226: PUSH
43227: LD_VAR 0 33
43231: PUSH
43232: LD_VAR 0 34
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: PUSH
43245: LD_VAR 0 4
43249: PUSH
43250: LD_INT 1
43252: PLUS
43253: ARRAY
43254: ST_TO_ADDR
43255: GO 43740
43257: LD_INT 16
43259: DOUBLE
43260: EQUAL
43261: IFTRUE 43319
43263: LD_INT 17
43265: DOUBLE
43266: EQUAL
43267: IFTRUE 43319
43269: LD_INT 18
43271: DOUBLE
43272: EQUAL
43273: IFTRUE 43319
43275: LD_INT 19
43277: DOUBLE
43278: EQUAL
43279: IFTRUE 43319
43281: LD_INT 22
43283: DOUBLE
43284: EQUAL
43285: IFTRUE 43319
43287: LD_INT 20
43289: DOUBLE
43290: EQUAL
43291: IFTRUE 43319
43293: LD_INT 21
43295: DOUBLE
43296: EQUAL
43297: IFTRUE 43319
43299: LD_INT 23
43301: DOUBLE
43302: EQUAL
43303: IFTRUE 43319
43305: LD_INT 24
43307: DOUBLE
43308: EQUAL
43309: IFTRUE 43319
43311: LD_INT 25
43313: DOUBLE
43314: EQUAL
43315: IFTRUE 43319
43317: GO 43375
43319: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43320: LD_ADDR_VAR 0 9
43324: PUSH
43325: LD_VAR 0 35
43329: PUSH
43330: LD_VAR 0 36
43334: PUSH
43335: LD_VAR 0 37
43339: PUSH
43340: LD_VAR 0 38
43344: PUSH
43345: LD_VAR 0 39
43349: PUSH
43350: LD_VAR 0 40
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: PUSH
43363: LD_VAR 0 4
43367: PUSH
43368: LD_INT 1
43370: PLUS
43371: ARRAY
43372: ST_TO_ADDR
43373: GO 43740
43375: LD_INT 6
43377: DOUBLE
43378: EQUAL
43379: IFTRUE 43431
43381: LD_INT 7
43383: DOUBLE
43384: EQUAL
43385: IFTRUE 43431
43387: LD_INT 8
43389: DOUBLE
43390: EQUAL
43391: IFTRUE 43431
43393: LD_INT 13
43395: DOUBLE
43396: EQUAL
43397: IFTRUE 43431
43399: LD_INT 12
43401: DOUBLE
43402: EQUAL
43403: IFTRUE 43431
43405: LD_INT 15
43407: DOUBLE
43408: EQUAL
43409: IFTRUE 43431
43411: LD_INT 11
43413: DOUBLE
43414: EQUAL
43415: IFTRUE 43431
43417: LD_INT 14
43419: DOUBLE
43420: EQUAL
43421: IFTRUE 43431
43423: LD_INT 10
43425: DOUBLE
43426: EQUAL
43427: IFTRUE 43431
43429: GO 43487
43431: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
43432: LD_ADDR_VAR 0 9
43436: PUSH
43437: LD_VAR 0 41
43441: PUSH
43442: LD_VAR 0 42
43446: PUSH
43447: LD_VAR 0 43
43451: PUSH
43452: LD_VAR 0 44
43456: PUSH
43457: LD_VAR 0 45
43461: PUSH
43462: LD_VAR 0 46
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: PUSH
43475: LD_VAR 0 4
43479: PUSH
43480: LD_INT 1
43482: PLUS
43483: ARRAY
43484: ST_TO_ADDR
43485: GO 43740
43487: LD_INT 36
43489: DOUBLE
43490: EQUAL
43491: IFTRUE 43495
43493: GO 43551
43495: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43496: LD_ADDR_VAR 0 9
43500: PUSH
43501: LD_VAR 0 47
43505: PUSH
43506: LD_VAR 0 48
43510: PUSH
43511: LD_VAR 0 49
43515: PUSH
43516: LD_VAR 0 50
43520: PUSH
43521: LD_VAR 0 51
43525: PUSH
43526: LD_VAR 0 52
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: PUSH
43539: LD_VAR 0 4
43543: PUSH
43544: LD_INT 1
43546: PLUS
43547: ARRAY
43548: ST_TO_ADDR
43549: GO 43740
43551: LD_INT 4
43553: DOUBLE
43554: EQUAL
43555: IFTRUE 43577
43557: LD_INT 5
43559: DOUBLE
43560: EQUAL
43561: IFTRUE 43577
43563: LD_INT 34
43565: DOUBLE
43566: EQUAL
43567: IFTRUE 43577
43569: LD_INT 37
43571: DOUBLE
43572: EQUAL
43573: IFTRUE 43577
43575: GO 43633
43577: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43578: LD_ADDR_VAR 0 9
43582: PUSH
43583: LD_VAR 0 53
43587: PUSH
43588: LD_VAR 0 54
43592: PUSH
43593: LD_VAR 0 55
43597: PUSH
43598: LD_VAR 0 56
43602: PUSH
43603: LD_VAR 0 57
43607: PUSH
43608: LD_VAR 0 58
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: PUSH
43621: LD_VAR 0 4
43625: PUSH
43626: LD_INT 1
43628: PLUS
43629: ARRAY
43630: ST_TO_ADDR
43631: GO 43740
43633: LD_INT 31
43635: DOUBLE
43636: EQUAL
43637: IFTRUE 43683
43639: LD_INT 32
43641: DOUBLE
43642: EQUAL
43643: IFTRUE 43683
43645: LD_INT 33
43647: DOUBLE
43648: EQUAL
43649: IFTRUE 43683
43651: LD_INT 27
43653: DOUBLE
43654: EQUAL
43655: IFTRUE 43683
43657: LD_INT 26
43659: DOUBLE
43660: EQUAL
43661: IFTRUE 43683
43663: LD_INT 28
43665: DOUBLE
43666: EQUAL
43667: IFTRUE 43683
43669: LD_INT 29
43671: DOUBLE
43672: EQUAL
43673: IFTRUE 43683
43675: LD_INT 30
43677: DOUBLE
43678: EQUAL
43679: IFTRUE 43683
43681: GO 43739
43683: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43684: LD_ADDR_VAR 0 9
43688: PUSH
43689: LD_VAR 0 59
43693: PUSH
43694: LD_VAR 0 60
43698: PUSH
43699: LD_VAR 0 61
43703: PUSH
43704: LD_VAR 0 62
43708: PUSH
43709: LD_VAR 0 63
43713: PUSH
43714: LD_VAR 0 64
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: PUSH
43727: LD_VAR 0 4
43731: PUSH
43732: LD_INT 1
43734: PLUS
43735: ARRAY
43736: ST_TO_ADDR
43737: GO 43740
43739: POP
// temp_list2 = [ ] ;
43740: LD_ADDR_VAR 0 10
43744: PUSH
43745: EMPTY
43746: ST_TO_ADDR
// for i in temp_list do
43747: LD_ADDR_VAR 0 8
43751: PUSH
43752: LD_VAR 0 9
43756: PUSH
43757: FOR_IN
43758: IFFALSE 43810
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43760: LD_ADDR_VAR 0 10
43764: PUSH
43765: LD_VAR 0 10
43769: PUSH
43770: LD_VAR 0 8
43774: PUSH
43775: LD_INT 1
43777: ARRAY
43778: PUSH
43779: LD_VAR 0 2
43783: PLUS
43784: PUSH
43785: LD_VAR 0 8
43789: PUSH
43790: LD_INT 2
43792: ARRAY
43793: PUSH
43794: LD_VAR 0 3
43798: PLUS
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: EMPTY
43805: LIST
43806: ADD
43807: ST_TO_ADDR
43808: GO 43757
43810: POP
43811: POP
// result = temp_list2 ;
43812: LD_ADDR_VAR 0 7
43816: PUSH
43817: LD_VAR 0 10
43821: ST_TO_ADDR
// end ;
43822: LD_VAR 0 7
43826: RET
// export function EnemyInRange ( unit , dist ) ; begin
43827: LD_INT 0
43829: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43830: LD_ADDR_VAR 0 3
43834: PUSH
43835: LD_VAR 0 1
43839: PPUSH
43840: CALL_OW 255
43844: PPUSH
43845: LD_VAR 0 1
43849: PPUSH
43850: CALL_OW 250
43854: PPUSH
43855: LD_VAR 0 1
43859: PPUSH
43860: CALL_OW 251
43864: PPUSH
43865: LD_VAR 0 2
43869: PPUSH
43870: CALL 17084 0 4
43874: PUSH
43875: LD_INT 4
43877: ARRAY
43878: ST_TO_ADDR
// end ;
43879: LD_VAR 0 3
43883: RET
// export function PlayerSeeMe ( unit ) ; begin
43884: LD_INT 0
43886: PPUSH
// result := See ( your_side , unit ) ;
43887: LD_ADDR_VAR 0 2
43891: PUSH
43892: LD_OWVAR 2
43896: PPUSH
43897: LD_VAR 0 1
43901: PPUSH
43902: CALL_OW 292
43906: ST_TO_ADDR
// end ;
43907: LD_VAR 0 2
43911: RET
// export function ReverseDir ( unit ) ; begin
43912: LD_INT 0
43914: PPUSH
// if not unit then
43915: LD_VAR 0 1
43919: NOT
43920: IFFALSE 43924
// exit ;
43922: GO 43947
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43924: LD_ADDR_VAR 0 2
43928: PUSH
43929: LD_VAR 0 1
43933: PPUSH
43934: CALL_OW 254
43938: PUSH
43939: LD_INT 3
43941: PLUS
43942: PUSH
43943: LD_INT 6
43945: MOD
43946: ST_TO_ADDR
// end ;
43947: LD_VAR 0 2
43951: RET
// export function ReverseArray ( array ) ; var i ; begin
43952: LD_INT 0
43954: PPUSH
43955: PPUSH
// if not array then
43956: LD_VAR 0 1
43960: NOT
43961: IFFALSE 43965
// exit ;
43963: GO 44020
// result := [ ] ;
43965: LD_ADDR_VAR 0 2
43969: PUSH
43970: EMPTY
43971: ST_TO_ADDR
// for i := array downto 1 do
43972: LD_ADDR_VAR 0 3
43976: PUSH
43977: DOUBLE
43978: LD_VAR 0 1
43982: INC
43983: ST_TO_ADDR
43984: LD_INT 1
43986: PUSH
43987: FOR_DOWNTO
43988: IFFALSE 44018
// result := Join ( result , array [ i ] ) ;
43990: LD_ADDR_VAR 0 2
43994: PUSH
43995: LD_VAR 0 2
43999: PPUSH
44000: LD_VAR 0 1
44004: PUSH
44005: LD_VAR 0 3
44009: ARRAY
44010: PPUSH
44011: CALL 48862 0 2
44015: ST_TO_ADDR
44016: GO 43987
44018: POP
44019: POP
// end ;
44020: LD_VAR 0 2
44024: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44025: LD_INT 0
44027: PPUSH
44028: PPUSH
44029: PPUSH
44030: PPUSH
44031: PPUSH
44032: PPUSH
// if not unit or not hexes then
44033: LD_VAR 0 1
44037: NOT
44038: IFTRUE 44047
44040: PUSH
44041: LD_VAR 0 2
44045: NOT
44046: OR
44047: IFFALSE 44051
// exit ;
44049: GO 44174
// dist := 9999 ;
44051: LD_ADDR_VAR 0 5
44055: PUSH
44056: LD_INT 9999
44058: ST_TO_ADDR
// for i = 1 to hexes do
44059: LD_ADDR_VAR 0 4
44063: PUSH
44064: DOUBLE
44065: LD_INT 1
44067: DEC
44068: ST_TO_ADDR
44069: LD_VAR 0 2
44073: PUSH
44074: FOR_TO
44075: IFFALSE 44162
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44077: LD_ADDR_VAR 0 6
44081: PUSH
44082: LD_VAR 0 1
44086: PPUSH
44087: LD_VAR 0 2
44091: PUSH
44092: LD_VAR 0 4
44096: ARRAY
44097: PUSH
44098: LD_INT 1
44100: ARRAY
44101: PPUSH
44102: LD_VAR 0 2
44106: PUSH
44107: LD_VAR 0 4
44111: ARRAY
44112: PUSH
44113: LD_INT 2
44115: ARRAY
44116: PPUSH
44117: CALL_OW 297
44121: ST_TO_ADDR
// if tdist < dist then
44122: LD_VAR 0 6
44126: PUSH
44127: LD_VAR 0 5
44131: LESS
44132: IFFALSE 44160
// begin hex := hexes [ i ] ;
44134: LD_ADDR_VAR 0 8
44138: PUSH
44139: LD_VAR 0 2
44143: PUSH
44144: LD_VAR 0 4
44148: ARRAY
44149: ST_TO_ADDR
// dist := tdist ;
44150: LD_ADDR_VAR 0 5
44154: PUSH
44155: LD_VAR 0 6
44159: ST_TO_ADDR
// end ; end ;
44160: GO 44074
44162: POP
44163: POP
// result := hex ;
44164: LD_ADDR_VAR 0 3
44168: PUSH
44169: LD_VAR 0 8
44173: ST_TO_ADDR
// end ;
44174: LD_VAR 0 3
44178: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44179: LD_INT 0
44181: PPUSH
44182: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44183: LD_VAR 0 1
44187: NOT
44188: IFTRUE 44227
44190: PUSH
44191: LD_VAR 0 1
44195: PUSH
44196: LD_INT 21
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 23
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PPUSH
44220: CALL_OW 69
44224: IN
44225: NOT
44226: OR
44227: IFFALSE 44231
// exit ;
44229: GO 44278
// for i = 1 to 3 do
44231: LD_ADDR_VAR 0 3
44235: PUSH
44236: DOUBLE
44237: LD_INT 1
44239: DEC
44240: ST_TO_ADDR
44241: LD_INT 3
44243: PUSH
44244: FOR_TO
44245: IFFALSE 44276
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44247: LD_VAR 0 1
44251: PPUSH
44252: CALL_OW 250
44256: PPUSH
44257: LD_VAR 0 1
44261: PPUSH
44262: CALL_OW 251
44266: PPUSH
44267: LD_INT 1
44269: PPUSH
44270: CALL_OW 453
44274: GO 44244
44276: POP
44277: POP
// end ;
44278: LD_VAR 0 2
44282: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44283: LD_INT 0
44285: PPUSH
44286: PPUSH
44287: PPUSH
44288: PPUSH
44289: PPUSH
44290: PPUSH
// if not unit or not enemy_unit then
44291: LD_VAR 0 1
44295: NOT
44296: IFTRUE 44305
44298: PUSH
44299: LD_VAR 0 2
44303: NOT
44304: OR
44305: IFFALSE 44309
// exit ;
44307: GO 44780
// if GetLives ( i ) < 250 then
44309: LD_VAR 0 4
44313: PPUSH
44314: CALL_OW 256
44318: PUSH
44319: LD_INT 250
44321: LESS
44322: IFFALSE 44335
// begin ComAutodestruct ( i ) ;
44324: LD_VAR 0 4
44328: PPUSH
44329: CALL 44179 0 1
// exit ;
44333: GO 44780
// end ; x := GetX ( enemy_unit ) ;
44335: LD_ADDR_VAR 0 7
44339: PUSH
44340: LD_VAR 0 2
44344: PPUSH
44345: CALL_OW 250
44349: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44350: LD_ADDR_VAR 0 8
44354: PUSH
44355: LD_VAR 0 2
44359: PPUSH
44360: CALL_OW 251
44364: ST_TO_ADDR
// if not x or not y then
44365: LD_VAR 0 7
44369: NOT
44370: IFTRUE 44379
44372: PUSH
44373: LD_VAR 0 8
44377: NOT
44378: OR
44379: IFFALSE 44383
// exit ;
44381: GO 44780
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44383: LD_ADDR_VAR 0 6
44387: PUSH
44388: LD_VAR 0 7
44392: PPUSH
44393: LD_INT 0
44395: PPUSH
44396: LD_INT 4
44398: PPUSH
44399: CALL_OW 272
44403: PUSH
44404: LD_VAR 0 8
44408: PPUSH
44409: LD_INT 0
44411: PPUSH
44412: LD_INT 4
44414: PPUSH
44415: CALL_OW 273
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_VAR 0 7
44428: PPUSH
44429: LD_INT 1
44431: PPUSH
44432: LD_INT 4
44434: PPUSH
44435: CALL_OW 272
44439: PUSH
44440: LD_VAR 0 8
44444: PPUSH
44445: LD_INT 1
44447: PPUSH
44448: LD_INT 4
44450: PPUSH
44451: CALL_OW 273
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_VAR 0 7
44464: PPUSH
44465: LD_INT 2
44467: PPUSH
44468: LD_INT 4
44470: PPUSH
44471: CALL_OW 272
44475: PUSH
44476: LD_VAR 0 8
44480: PPUSH
44481: LD_INT 2
44483: PPUSH
44484: LD_INT 4
44486: PPUSH
44487: CALL_OW 273
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_VAR 0 7
44500: PPUSH
44501: LD_INT 3
44503: PPUSH
44504: LD_INT 4
44506: PPUSH
44507: CALL_OW 272
44511: PUSH
44512: LD_VAR 0 8
44516: PPUSH
44517: LD_INT 3
44519: PPUSH
44520: LD_INT 4
44522: PPUSH
44523: CALL_OW 273
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_VAR 0 7
44536: PPUSH
44537: LD_INT 4
44539: PPUSH
44540: LD_INT 4
44542: PPUSH
44543: CALL_OW 272
44547: PUSH
44548: LD_VAR 0 8
44552: PPUSH
44553: LD_INT 4
44555: PPUSH
44556: LD_INT 4
44558: PPUSH
44559: CALL_OW 273
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_VAR 0 7
44572: PPUSH
44573: LD_INT 5
44575: PPUSH
44576: LD_INT 4
44578: PPUSH
44579: CALL_OW 272
44583: PUSH
44584: LD_VAR 0 8
44588: PPUSH
44589: LD_INT 5
44591: PPUSH
44592: LD_INT 4
44594: PPUSH
44595: CALL_OW 273
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: ST_TO_ADDR
// for i = tmp downto 1 do
44612: LD_ADDR_VAR 0 4
44616: PUSH
44617: DOUBLE
44618: LD_VAR 0 6
44622: INC
44623: ST_TO_ADDR
44624: LD_INT 1
44626: PUSH
44627: FOR_DOWNTO
44628: IFFALSE 44731
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44630: LD_VAR 0 6
44634: PUSH
44635: LD_VAR 0 4
44639: ARRAY
44640: PUSH
44641: LD_INT 1
44643: ARRAY
44644: PPUSH
44645: LD_VAR 0 6
44649: PUSH
44650: LD_VAR 0 4
44654: ARRAY
44655: PUSH
44656: LD_INT 2
44658: ARRAY
44659: PPUSH
44660: CALL_OW 488
44664: NOT
44665: IFTRUE 44707
44667: PUSH
44668: LD_VAR 0 6
44672: PUSH
44673: LD_VAR 0 4
44677: ARRAY
44678: PUSH
44679: LD_INT 1
44681: ARRAY
44682: PPUSH
44683: LD_VAR 0 6
44687: PUSH
44688: LD_VAR 0 4
44692: ARRAY
44693: PUSH
44694: LD_INT 2
44696: ARRAY
44697: PPUSH
44698: CALL_OW 428
44702: PUSH
44703: LD_INT 0
44705: NONEQUAL
44706: OR
44707: IFFALSE 44729
// tmp := Delete ( tmp , i ) ;
44709: LD_ADDR_VAR 0 6
44713: PUSH
44714: LD_VAR 0 6
44718: PPUSH
44719: LD_VAR 0 4
44723: PPUSH
44724: CALL_OW 3
44728: ST_TO_ADDR
44729: GO 44627
44731: POP
44732: POP
// j := GetClosestHex ( unit , tmp ) ;
44733: LD_ADDR_VAR 0 5
44737: PUSH
44738: LD_VAR 0 1
44742: PPUSH
44743: LD_VAR 0 6
44747: PPUSH
44748: CALL 44025 0 2
44752: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44753: LD_VAR 0 1
44757: PPUSH
44758: LD_VAR 0 5
44762: PUSH
44763: LD_INT 1
44765: ARRAY
44766: PPUSH
44767: LD_VAR 0 5
44771: PUSH
44772: LD_INT 2
44774: ARRAY
44775: PPUSH
44776: CALL_OW 111
// end ;
44780: LD_VAR 0 3
44784: RET
// export function PrepareApemanSoldier ( ) ; begin
44785: LD_INT 0
44787: PPUSH
// uc_nation := 0 ;
44788: LD_ADDR_OWVAR 21
44792: PUSH
44793: LD_INT 0
44795: ST_TO_ADDR
// hc_sex := sex_male ;
44796: LD_ADDR_OWVAR 27
44800: PUSH
44801: LD_INT 1
44803: ST_TO_ADDR
// hc_name :=  ;
44804: LD_ADDR_OWVAR 26
44808: PUSH
44809: LD_STRING 
44811: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44812: LD_ADDR_OWVAR 28
44816: PUSH
44817: LD_INT 15
44819: ST_TO_ADDR
// hc_gallery :=  ;
44820: LD_ADDR_OWVAR 33
44824: PUSH
44825: LD_STRING 
44827: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44828: LD_ADDR_OWVAR 31
44832: PUSH
44833: LD_INT 0
44835: PPUSH
44836: LD_INT 3
44838: PPUSH
44839: CALL_OW 12
44843: PUSH
44844: LD_INT 0
44846: PPUSH
44847: LD_INT 3
44849: PPUSH
44850: CALL_OW 12
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44867: LD_ADDR_OWVAR 29
44871: PUSH
44872: LD_INT 12
44874: PUSH
44875: LD_INT 12
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: ST_TO_ADDR
// end ;
44882: LD_VAR 0 1
44886: RET
// export function PrepareApemanEngineer ( ) ; begin
44887: LD_INT 0
44889: PPUSH
// uc_nation := 0 ;
44890: LD_ADDR_OWVAR 21
44894: PUSH
44895: LD_INT 0
44897: ST_TO_ADDR
// hc_sex := sex_male ;
44898: LD_ADDR_OWVAR 27
44902: PUSH
44903: LD_INT 1
44905: ST_TO_ADDR
// hc_name :=  ;
44906: LD_ADDR_OWVAR 26
44910: PUSH
44911: LD_STRING 
44913: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44914: LD_ADDR_OWVAR 28
44918: PUSH
44919: LD_INT 16
44921: ST_TO_ADDR
// hc_gallery :=  ;
44922: LD_ADDR_OWVAR 33
44926: PUSH
44927: LD_STRING 
44929: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44930: LD_ADDR_OWVAR 31
44934: PUSH
44935: LD_INT 0
44937: PPUSH
44938: LD_INT 3
44940: PPUSH
44941: CALL_OW 12
44945: PUSH
44946: LD_INT 0
44948: PPUSH
44949: LD_INT 3
44951: PPUSH
44952: CALL_OW 12
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44969: LD_ADDR_OWVAR 29
44973: PUSH
44974: LD_INT 12
44976: PUSH
44977: LD_INT 12
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: ST_TO_ADDR
// end ;
44984: LD_VAR 0 1
44988: RET
// export function PrepareApeman ( agressivity ) ; begin
44989: LD_INT 0
44991: PPUSH
// uc_side := 0 ;
44992: LD_ADDR_OWVAR 20
44996: PUSH
44997: LD_INT 0
44999: ST_TO_ADDR
// uc_nation := 0 ;
45000: LD_ADDR_OWVAR 21
45004: PUSH
45005: LD_INT 0
45007: ST_TO_ADDR
// hc_sex := sex_male ;
45008: LD_ADDR_OWVAR 27
45012: PUSH
45013: LD_INT 1
45015: ST_TO_ADDR
// hc_class := class_apeman ;
45016: LD_ADDR_OWVAR 28
45020: PUSH
45021: LD_INT 12
45023: ST_TO_ADDR
// hc_gallery :=  ;
45024: LD_ADDR_OWVAR 33
45028: PUSH
45029: LD_STRING 
45031: ST_TO_ADDR
// hc_name :=  ;
45032: LD_ADDR_OWVAR 26
45036: PUSH
45037: LD_STRING 
45039: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
45040: LD_ADDR_OWVAR 29
45044: PUSH
45045: LD_INT 12
45047: PUSH
45048: LD_INT 12
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: ST_TO_ADDR
// if agressivity = 0 then
45055: LD_VAR 0 1
45059: PUSH
45060: LD_INT 0
45062: EQUAL
45063: IFFALSE 45075
// hc_agressivity := 0 else
45065: LD_ADDR_OWVAR 35
45069: PUSH
45070: LD_INT 0
45072: ST_TO_ADDR
45073: GO 45096
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45075: LD_ADDR_OWVAR 35
45079: PUSH
45080: LD_VAR 0 1
45084: NEG
45085: PPUSH
45086: LD_VAR 0 1
45090: PPUSH
45091: CALL_OW 12
45095: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45096: LD_ADDR_OWVAR 31
45100: PUSH
45101: LD_INT 0
45103: PPUSH
45104: LD_INT 3
45106: PPUSH
45107: CALL_OW 12
45111: PUSH
45112: LD_INT 0
45114: PPUSH
45115: LD_INT 3
45117: PPUSH
45118: CALL_OW 12
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: ST_TO_ADDR
// end ;
45135: LD_VAR 0 2
45139: RET
// export function PrepareTiger ( agressivity ) ; begin
45140: LD_INT 0
45142: PPUSH
// uc_side := 0 ;
45143: LD_ADDR_OWVAR 20
45147: PUSH
45148: LD_INT 0
45150: ST_TO_ADDR
// uc_nation := 0 ;
45151: LD_ADDR_OWVAR 21
45155: PUSH
45156: LD_INT 0
45158: ST_TO_ADDR
// InitHc ;
45159: CALL_OW 19
// hc_class := class_tiger ;
45163: LD_ADDR_OWVAR 28
45167: PUSH
45168: LD_INT 14
45170: ST_TO_ADDR
// hc_gallery :=  ;
45171: LD_ADDR_OWVAR 33
45175: PUSH
45176: LD_STRING 
45178: ST_TO_ADDR
// hc_name :=  ;
45179: LD_ADDR_OWVAR 26
45183: PUSH
45184: LD_STRING 
45186: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45187: LD_ADDR_OWVAR 35
45191: PUSH
45192: LD_VAR 0 1
45196: NEG
45197: PPUSH
45198: LD_VAR 0 1
45202: PPUSH
45203: CALL_OW 12
45207: ST_TO_ADDR
// end ;
45208: LD_VAR 0 2
45212: RET
// export function PrepareEnchidna ( ) ; begin
45213: LD_INT 0
45215: PPUSH
// uc_side := 0 ;
45216: LD_ADDR_OWVAR 20
45220: PUSH
45221: LD_INT 0
45223: ST_TO_ADDR
// uc_nation := 0 ;
45224: LD_ADDR_OWVAR 21
45228: PUSH
45229: LD_INT 0
45231: ST_TO_ADDR
// InitHc ;
45232: CALL_OW 19
// hc_class := class_baggie ;
45236: LD_ADDR_OWVAR 28
45240: PUSH
45241: LD_INT 13
45243: ST_TO_ADDR
// hc_gallery :=  ;
45244: LD_ADDR_OWVAR 33
45248: PUSH
45249: LD_STRING 
45251: ST_TO_ADDR
// hc_name :=  ;
45252: LD_ADDR_OWVAR 26
45256: PUSH
45257: LD_STRING 
45259: ST_TO_ADDR
// end ;
45260: LD_VAR 0 1
45264: RET
// export function PrepareFrog ( ) ; begin
45265: LD_INT 0
45267: PPUSH
// uc_side := 0 ;
45268: LD_ADDR_OWVAR 20
45272: PUSH
45273: LD_INT 0
45275: ST_TO_ADDR
// uc_nation := 0 ;
45276: LD_ADDR_OWVAR 21
45280: PUSH
45281: LD_INT 0
45283: ST_TO_ADDR
// InitHc ;
45284: CALL_OW 19
// hc_class := class_frog ;
45288: LD_ADDR_OWVAR 28
45292: PUSH
45293: LD_INT 19
45295: ST_TO_ADDR
// hc_gallery :=  ;
45296: LD_ADDR_OWVAR 33
45300: PUSH
45301: LD_STRING 
45303: ST_TO_ADDR
// hc_name :=  ;
45304: LD_ADDR_OWVAR 26
45308: PUSH
45309: LD_STRING 
45311: ST_TO_ADDR
// end ;
45312: LD_VAR 0 1
45316: RET
// export function PrepareFish ( ) ; begin
45317: LD_INT 0
45319: PPUSH
// uc_side := 0 ;
45320: LD_ADDR_OWVAR 20
45324: PUSH
45325: LD_INT 0
45327: ST_TO_ADDR
// uc_nation := 0 ;
45328: LD_ADDR_OWVAR 21
45332: PUSH
45333: LD_INT 0
45335: ST_TO_ADDR
// InitHc ;
45336: CALL_OW 19
// hc_class := class_fish ;
45340: LD_ADDR_OWVAR 28
45344: PUSH
45345: LD_INT 20
45347: ST_TO_ADDR
// hc_gallery :=  ;
45348: LD_ADDR_OWVAR 33
45352: PUSH
45353: LD_STRING 
45355: ST_TO_ADDR
// hc_name :=  ;
45356: LD_ADDR_OWVAR 26
45360: PUSH
45361: LD_STRING 
45363: ST_TO_ADDR
// end ;
45364: LD_VAR 0 1
45368: RET
// export function PrepareBird ( ) ; begin
45369: LD_INT 0
45371: PPUSH
// uc_side := 0 ;
45372: LD_ADDR_OWVAR 20
45376: PUSH
45377: LD_INT 0
45379: ST_TO_ADDR
// uc_nation := 0 ;
45380: LD_ADDR_OWVAR 21
45384: PUSH
45385: LD_INT 0
45387: ST_TO_ADDR
// InitHc ;
45388: CALL_OW 19
// hc_class := class_phororhacos ;
45392: LD_ADDR_OWVAR 28
45396: PUSH
45397: LD_INT 18
45399: ST_TO_ADDR
// hc_gallery :=  ;
45400: LD_ADDR_OWVAR 33
45404: PUSH
45405: LD_STRING 
45407: ST_TO_ADDR
// hc_name :=  ;
45408: LD_ADDR_OWVAR 26
45412: PUSH
45413: LD_STRING 
45415: ST_TO_ADDR
// end ;
45416: LD_VAR 0 1
45420: RET
// export function PrepareHorse ( ) ; begin
45421: LD_INT 0
45423: PPUSH
// uc_side := 0 ;
45424: LD_ADDR_OWVAR 20
45428: PUSH
45429: LD_INT 0
45431: ST_TO_ADDR
// uc_nation := 0 ;
45432: LD_ADDR_OWVAR 21
45436: PUSH
45437: LD_INT 0
45439: ST_TO_ADDR
// InitHc ;
45440: CALL_OW 19
// hc_class := class_horse ;
45444: LD_ADDR_OWVAR 28
45448: PUSH
45449: LD_INT 21
45451: ST_TO_ADDR
// hc_gallery :=  ;
45452: LD_ADDR_OWVAR 33
45456: PUSH
45457: LD_STRING 
45459: ST_TO_ADDR
// hc_name :=  ;
45460: LD_ADDR_OWVAR 26
45464: PUSH
45465: LD_STRING 
45467: ST_TO_ADDR
// end ;
45468: LD_VAR 0 1
45472: RET
// export function PrepareMastodont ( ) ; begin
45473: LD_INT 0
45475: PPUSH
// uc_side := 0 ;
45476: LD_ADDR_OWVAR 20
45480: PUSH
45481: LD_INT 0
45483: ST_TO_ADDR
// uc_nation := 0 ;
45484: LD_ADDR_OWVAR 21
45488: PUSH
45489: LD_INT 0
45491: ST_TO_ADDR
// vc_chassis := class_mastodont ;
45492: LD_ADDR_OWVAR 37
45496: PUSH
45497: LD_INT 31
45499: ST_TO_ADDR
// vc_control := control_rider ;
45500: LD_ADDR_OWVAR 38
45504: PUSH
45505: LD_INT 4
45507: ST_TO_ADDR
// end ;
45508: LD_VAR 0 1
45512: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45513: LD_INT 0
45515: PPUSH
45516: PPUSH
45517: PPUSH
// uc_side = 0 ;
45518: LD_ADDR_OWVAR 20
45522: PUSH
45523: LD_INT 0
45525: ST_TO_ADDR
// uc_nation = 0 ;
45526: LD_ADDR_OWVAR 21
45530: PUSH
45531: LD_INT 0
45533: ST_TO_ADDR
// InitHc_All ( ) ;
45534: CALL_OW 584
// InitVc ;
45538: CALL_OW 20
// if mastodonts then
45542: LD_VAR 0 6
45546: IFFALSE 45613
// for i = 1 to mastodonts do
45548: LD_ADDR_VAR 0 11
45552: PUSH
45553: DOUBLE
45554: LD_INT 1
45556: DEC
45557: ST_TO_ADDR
45558: LD_VAR 0 6
45562: PUSH
45563: FOR_TO
45564: IFFALSE 45611
// begin vc_chassis := 31 ;
45566: LD_ADDR_OWVAR 37
45570: PUSH
45571: LD_INT 31
45573: ST_TO_ADDR
// vc_control := control_rider ;
45574: LD_ADDR_OWVAR 38
45578: PUSH
45579: LD_INT 4
45581: ST_TO_ADDR
// animal := CreateVehicle ;
45582: LD_ADDR_VAR 0 12
45586: PUSH
45587: CALL_OW 45
45591: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45592: LD_VAR 0 12
45596: PPUSH
45597: LD_VAR 0 8
45601: PPUSH
45602: LD_INT 0
45604: PPUSH
45605: CALL 47755 0 3
// end ;
45609: GO 45563
45611: POP
45612: POP
// if horses then
45613: LD_VAR 0 5
45617: IFFALSE 45684
// for i = 1 to horses do
45619: LD_ADDR_VAR 0 11
45623: PUSH
45624: DOUBLE
45625: LD_INT 1
45627: DEC
45628: ST_TO_ADDR
45629: LD_VAR 0 5
45633: PUSH
45634: FOR_TO
45635: IFFALSE 45682
// begin hc_class := 21 ;
45637: LD_ADDR_OWVAR 28
45641: PUSH
45642: LD_INT 21
45644: ST_TO_ADDR
// hc_gallery :=  ;
45645: LD_ADDR_OWVAR 33
45649: PUSH
45650: LD_STRING 
45652: ST_TO_ADDR
// animal := CreateHuman ;
45653: LD_ADDR_VAR 0 12
45657: PUSH
45658: CALL_OW 44
45662: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45663: LD_VAR 0 12
45667: PPUSH
45668: LD_VAR 0 8
45672: PPUSH
45673: LD_INT 0
45675: PPUSH
45676: CALL 47755 0 3
// end ;
45680: GO 45634
45682: POP
45683: POP
// if birds then
45684: LD_VAR 0 1
45688: IFFALSE 45755
// for i = 1 to birds do
45690: LD_ADDR_VAR 0 11
45694: PUSH
45695: DOUBLE
45696: LD_INT 1
45698: DEC
45699: ST_TO_ADDR
45700: LD_VAR 0 1
45704: PUSH
45705: FOR_TO
45706: IFFALSE 45753
// begin hc_class := 18 ;
45708: LD_ADDR_OWVAR 28
45712: PUSH
45713: LD_INT 18
45715: ST_TO_ADDR
// hc_gallery =  ;
45716: LD_ADDR_OWVAR 33
45720: PUSH
45721: LD_STRING 
45723: ST_TO_ADDR
// animal := CreateHuman ;
45724: LD_ADDR_VAR 0 12
45728: PUSH
45729: CALL_OW 44
45733: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45734: LD_VAR 0 12
45738: PPUSH
45739: LD_VAR 0 8
45743: PPUSH
45744: LD_INT 0
45746: PPUSH
45747: CALL 47755 0 3
// end ;
45751: GO 45705
45753: POP
45754: POP
// if tigers then
45755: LD_VAR 0 2
45759: IFFALSE 45843
// for i = 1 to tigers do
45761: LD_ADDR_VAR 0 11
45765: PUSH
45766: DOUBLE
45767: LD_INT 1
45769: DEC
45770: ST_TO_ADDR
45771: LD_VAR 0 2
45775: PUSH
45776: FOR_TO
45777: IFFALSE 45841
// begin hc_class = class_tiger ;
45779: LD_ADDR_OWVAR 28
45783: PUSH
45784: LD_INT 14
45786: ST_TO_ADDR
// hc_gallery =  ;
45787: LD_ADDR_OWVAR 33
45791: PUSH
45792: LD_STRING 
45794: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45795: LD_ADDR_OWVAR 35
45799: PUSH
45800: LD_INT 7
45802: NEG
45803: PPUSH
45804: LD_INT 7
45806: PPUSH
45807: CALL_OW 12
45811: ST_TO_ADDR
// animal := CreateHuman ;
45812: LD_ADDR_VAR 0 12
45816: PUSH
45817: CALL_OW 44
45821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45822: LD_VAR 0 12
45826: PPUSH
45827: LD_VAR 0 8
45831: PPUSH
45832: LD_INT 0
45834: PPUSH
45835: CALL 47755 0 3
// end ;
45839: GO 45776
45841: POP
45842: POP
// if apemans then
45843: LD_VAR 0 3
45847: IFFALSE 45970
// for i = 1 to apemans do
45849: LD_ADDR_VAR 0 11
45853: PUSH
45854: DOUBLE
45855: LD_INT 1
45857: DEC
45858: ST_TO_ADDR
45859: LD_VAR 0 3
45863: PUSH
45864: FOR_TO
45865: IFFALSE 45968
// begin hc_class = class_apeman ;
45867: LD_ADDR_OWVAR 28
45871: PUSH
45872: LD_INT 12
45874: ST_TO_ADDR
// hc_gallery =  ;
45875: LD_ADDR_OWVAR 33
45879: PUSH
45880: LD_STRING 
45882: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45883: LD_ADDR_OWVAR 35
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PPUSH
45892: LD_INT 2
45894: PPUSH
45895: CALL_OW 12
45899: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45900: LD_ADDR_OWVAR 31
45904: PUSH
45905: LD_INT 1
45907: PPUSH
45908: LD_INT 3
45910: PPUSH
45911: CALL_OW 12
45915: PUSH
45916: LD_INT 1
45918: PPUSH
45919: LD_INT 3
45921: PPUSH
45922: CALL_OW 12
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: ST_TO_ADDR
// animal := CreateHuman ;
45939: LD_ADDR_VAR 0 12
45943: PUSH
45944: CALL_OW 44
45948: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45949: LD_VAR 0 12
45953: PPUSH
45954: LD_VAR 0 8
45958: PPUSH
45959: LD_INT 0
45961: PPUSH
45962: CALL 47755 0 3
// end ;
45966: GO 45864
45968: POP
45969: POP
// if enchidnas then
45970: LD_VAR 0 4
45974: IFFALSE 46041
// for i = 1 to enchidnas do
45976: LD_ADDR_VAR 0 11
45980: PUSH
45981: DOUBLE
45982: LD_INT 1
45984: DEC
45985: ST_TO_ADDR
45986: LD_VAR 0 4
45990: PUSH
45991: FOR_TO
45992: IFFALSE 46039
// begin hc_class = 13 ;
45994: LD_ADDR_OWVAR 28
45998: PUSH
45999: LD_INT 13
46001: ST_TO_ADDR
// hc_gallery =  ;
46002: LD_ADDR_OWVAR 33
46006: PUSH
46007: LD_STRING 
46009: ST_TO_ADDR
// animal := CreateHuman ;
46010: LD_ADDR_VAR 0 12
46014: PUSH
46015: CALL_OW 44
46019: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46020: LD_VAR 0 12
46024: PPUSH
46025: LD_VAR 0 8
46029: PPUSH
46030: LD_INT 0
46032: PPUSH
46033: CALL 47755 0 3
// end ;
46037: GO 45991
46039: POP
46040: POP
// if fishes then
46041: LD_VAR 0 7
46045: IFFALSE 46112
// for i = 1 to fishes do
46047: LD_ADDR_VAR 0 11
46051: PUSH
46052: DOUBLE
46053: LD_INT 1
46055: DEC
46056: ST_TO_ADDR
46057: LD_VAR 0 7
46061: PUSH
46062: FOR_TO
46063: IFFALSE 46110
// begin hc_class = 20 ;
46065: LD_ADDR_OWVAR 28
46069: PUSH
46070: LD_INT 20
46072: ST_TO_ADDR
// hc_gallery =  ;
46073: LD_ADDR_OWVAR 33
46077: PUSH
46078: LD_STRING 
46080: ST_TO_ADDR
// animal := CreateHuman ;
46081: LD_ADDR_VAR 0 12
46085: PUSH
46086: CALL_OW 44
46090: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46091: LD_VAR 0 12
46095: PPUSH
46096: LD_VAR 0 9
46100: PPUSH
46101: LD_INT 0
46103: PPUSH
46104: CALL 47755 0 3
// end ;
46108: GO 46062
46110: POP
46111: POP
// end ;
46112: LD_VAR 0 10
46116: RET
// export function WantHeal ( sci , unit ) ; begin
46117: LD_INT 0
46119: PPUSH
// if GetTaskList ( sci ) > 0 then
46120: LD_VAR 0 1
46124: PPUSH
46125: CALL_OW 437
46129: PUSH
46130: LD_INT 0
46132: GREATER
46133: IFFALSE 46205
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46135: LD_VAR 0 1
46139: PPUSH
46140: CALL_OW 437
46144: PUSH
46145: LD_INT 1
46147: ARRAY
46148: PUSH
46149: LD_INT 1
46151: ARRAY
46152: PUSH
46153: LD_STRING l
46155: EQUAL
46156: IFFALSE 46183
46158: PUSH
46159: LD_VAR 0 1
46163: PPUSH
46164: CALL_OW 437
46168: PUSH
46169: LD_INT 1
46171: ARRAY
46172: PUSH
46173: LD_INT 4
46175: ARRAY
46176: PUSH
46177: LD_VAR 0 2
46181: EQUAL
46182: AND
46183: IFFALSE 46195
// result := true else
46185: LD_ADDR_VAR 0 3
46189: PUSH
46190: LD_INT 1
46192: ST_TO_ADDR
46193: GO 46203
// result := false ;
46195: LD_ADDR_VAR 0 3
46199: PUSH
46200: LD_INT 0
46202: ST_TO_ADDR
// end else
46203: GO 46213
// result := false ;
46205: LD_ADDR_VAR 0 3
46209: PUSH
46210: LD_INT 0
46212: ST_TO_ADDR
// end ;
46213: LD_VAR 0 3
46217: RET
// export function HealTarget ( sci ) ; begin
46218: LD_INT 0
46220: PPUSH
// if not sci then
46221: LD_VAR 0 1
46225: NOT
46226: IFFALSE 46230
// exit ;
46228: GO 46295
// result := 0 ;
46230: LD_ADDR_VAR 0 2
46234: PUSH
46235: LD_INT 0
46237: ST_TO_ADDR
// if GetTaskList ( sci ) then
46238: LD_VAR 0 1
46242: PPUSH
46243: CALL_OW 437
46247: IFFALSE 46295
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46249: LD_VAR 0 1
46253: PPUSH
46254: CALL_OW 437
46258: PUSH
46259: LD_INT 1
46261: ARRAY
46262: PUSH
46263: LD_INT 1
46265: ARRAY
46266: PUSH
46267: LD_STRING l
46269: EQUAL
46270: IFFALSE 46295
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46272: LD_ADDR_VAR 0 2
46276: PUSH
46277: LD_VAR 0 1
46281: PPUSH
46282: CALL_OW 437
46286: PUSH
46287: LD_INT 1
46289: ARRAY
46290: PUSH
46291: LD_INT 4
46293: ARRAY
46294: ST_TO_ADDR
// end ;
46295: LD_VAR 0 2
46299: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46300: LD_INT 0
46302: PPUSH
46303: PPUSH
46304: PPUSH
46305: PPUSH
// if not base_units then
46306: LD_VAR 0 1
46310: NOT
46311: IFFALSE 46315
// exit ;
46313: GO 46402
// result := false ;
46315: LD_ADDR_VAR 0 2
46319: PUSH
46320: LD_INT 0
46322: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46323: LD_ADDR_VAR 0 5
46327: PUSH
46328: LD_VAR 0 1
46332: PPUSH
46333: LD_INT 21
46335: PUSH
46336: LD_INT 3
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PPUSH
46343: CALL_OW 72
46347: ST_TO_ADDR
// if not tmp then
46348: LD_VAR 0 5
46352: NOT
46353: IFFALSE 46357
// exit ;
46355: GO 46402
// for i in tmp do
46357: LD_ADDR_VAR 0 3
46361: PUSH
46362: LD_VAR 0 5
46366: PUSH
46367: FOR_IN
46368: IFFALSE 46400
// begin result := EnemyInRange ( i , 22 ) ;
46370: LD_ADDR_VAR 0 2
46374: PUSH
46375: LD_VAR 0 3
46379: PPUSH
46380: LD_INT 22
46382: PPUSH
46383: CALL 43827 0 2
46387: ST_TO_ADDR
// if result then
46388: LD_VAR 0 2
46392: IFFALSE 46398
// exit ;
46394: POP
46395: POP
46396: GO 46402
// end ;
46398: GO 46367
46400: POP
46401: POP
// end ;
46402: LD_VAR 0 2
46406: RET
// export function FilterByTag ( units , tag ) ; begin
46407: LD_INT 0
46409: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
46410: LD_ADDR_VAR 0 3
46414: PUSH
46415: LD_VAR 0 1
46419: PPUSH
46420: LD_INT 120
46422: PUSH
46423: LD_VAR 0 2
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PPUSH
46432: CALL_OW 72
46436: ST_TO_ADDR
// end ;
46437: LD_VAR 0 3
46441: RET
// export function IsDriver ( un ) ; begin
46442: LD_INT 0
46444: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46445: LD_ADDR_VAR 0 2
46449: PUSH
46450: LD_VAR 0 1
46454: PUSH
46455: LD_INT 55
46457: PUSH
46458: EMPTY
46459: LIST
46460: PPUSH
46461: CALL_OW 69
46465: IN
46466: ST_TO_ADDR
// end ;
46467: LD_VAR 0 2
46471: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46472: LD_INT 0
46474: PPUSH
46475: PPUSH
// list := [ ] ;
46476: LD_ADDR_VAR 0 5
46480: PUSH
46481: EMPTY
46482: ST_TO_ADDR
// case d of 0 :
46483: LD_VAR 0 3
46487: PUSH
46488: LD_INT 0
46490: DOUBLE
46491: EQUAL
46492: IFTRUE 46496
46494: GO 46629
46496: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46497: LD_ADDR_VAR 0 5
46501: PUSH
46502: LD_VAR 0 1
46506: PUSH
46507: LD_INT 4
46509: MINUS
46510: PUSH
46511: LD_VAR 0 2
46515: PUSH
46516: LD_INT 4
46518: MINUS
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: LIST
46527: PUSH
46528: LD_VAR 0 1
46532: PUSH
46533: LD_INT 3
46535: MINUS
46536: PUSH
46537: LD_VAR 0 2
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: LIST
46549: PUSH
46550: LD_VAR 0 1
46554: PUSH
46555: LD_INT 4
46557: PLUS
46558: PUSH
46559: LD_VAR 0 2
46563: PUSH
46564: LD_INT 4
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: LIST
46571: PUSH
46572: LD_VAR 0 1
46576: PUSH
46577: LD_INT 3
46579: PLUS
46580: PUSH
46581: LD_VAR 0 2
46585: PUSH
46586: LD_INT 3
46588: PLUS
46589: PUSH
46590: LD_INT 5
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: PUSH
46598: LD_VAR 0 1
46602: PUSH
46603: LD_VAR 0 2
46607: PUSH
46608: LD_INT 4
46610: PLUS
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: LIST
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: ST_TO_ADDR
// end ; 1 :
46627: GO 47327
46629: LD_INT 1
46631: DOUBLE
46632: EQUAL
46633: IFTRUE 46637
46635: GO 46770
46637: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46638: LD_ADDR_VAR 0 5
46642: PUSH
46643: LD_VAR 0 1
46647: PUSH
46648: LD_VAR 0 2
46652: PUSH
46653: LD_INT 4
46655: MINUS
46656: PUSH
46657: LD_INT 3
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: LIST
46664: PUSH
46665: LD_VAR 0 1
46669: PUSH
46670: LD_INT 3
46672: MINUS
46673: PUSH
46674: LD_VAR 0 2
46678: PUSH
46679: LD_INT 3
46681: MINUS
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: LIST
46690: PUSH
46691: LD_VAR 0 1
46695: PUSH
46696: LD_INT 4
46698: MINUS
46699: PUSH
46700: LD_VAR 0 2
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: LIST
46712: PUSH
46713: LD_VAR 0 1
46717: PUSH
46718: LD_VAR 0 2
46722: PUSH
46723: LD_INT 3
46725: PLUS
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: LIST
46734: PUSH
46735: LD_VAR 0 1
46739: PUSH
46740: LD_INT 4
46742: PLUS
46743: PUSH
46744: LD_VAR 0 2
46748: PUSH
46749: LD_INT 4
46751: PLUS
46752: PUSH
46753: LD_INT 5
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: LIST
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: ST_TO_ADDR
// end ; 2 :
46768: GO 47327
46770: LD_INT 2
46772: DOUBLE
46773: EQUAL
46774: IFTRUE 46778
46776: GO 46907
46778: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46779: LD_ADDR_VAR 0 5
46783: PUSH
46784: LD_VAR 0 1
46788: PUSH
46789: LD_VAR 0 2
46793: PUSH
46794: LD_INT 3
46796: MINUS
46797: PUSH
46798: LD_INT 3
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: LIST
46805: PUSH
46806: LD_VAR 0 1
46810: PUSH
46811: LD_INT 4
46813: PLUS
46814: PUSH
46815: LD_VAR 0 2
46819: PUSH
46820: LD_INT 4
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: LIST
46827: PUSH
46828: LD_VAR 0 1
46832: PUSH
46833: LD_VAR 0 2
46837: PUSH
46838: LD_INT 4
46840: PLUS
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: LIST
46849: PUSH
46850: LD_VAR 0 1
46854: PUSH
46855: LD_INT 3
46857: MINUS
46858: PUSH
46859: LD_VAR 0 2
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: LIST
46871: PUSH
46872: LD_VAR 0 1
46876: PUSH
46877: LD_INT 4
46879: MINUS
46880: PUSH
46881: LD_VAR 0 2
46885: PUSH
46886: LD_INT 4
46888: MINUS
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: LIST
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: ST_TO_ADDR
// end ; 3 :
46905: GO 47327
46907: LD_INT 3
46909: DOUBLE
46910: EQUAL
46911: IFTRUE 46915
46913: GO 47048
46915: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46916: LD_ADDR_VAR 0 5
46920: PUSH
46921: LD_VAR 0 1
46925: PUSH
46926: LD_INT 3
46928: PLUS
46929: PUSH
46930: LD_VAR 0 2
46934: PUSH
46935: LD_INT 4
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: LIST
46942: PUSH
46943: LD_VAR 0 1
46947: PUSH
46948: LD_INT 4
46950: PLUS
46951: PUSH
46952: LD_VAR 0 2
46956: PUSH
46957: LD_INT 4
46959: PLUS
46960: PUSH
46961: LD_INT 5
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: LIST
46968: PUSH
46969: LD_VAR 0 1
46973: PUSH
46974: LD_INT 4
46976: MINUS
46977: PUSH
46978: LD_VAR 0 2
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: LIST
46990: PUSH
46991: LD_VAR 0 1
46995: PUSH
46996: LD_VAR 0 2
47000: PUSH
47001: LD_INT 4
47003: MINUS
47004: PUSH
47005: LD_INT 3
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: LIST
47012: PUSH
47013: LD_VAR 0 1
47017: PUSH
47018: LD_INT 3
47020: MINUS
47021: PUSH
47022: LD_VAR 0 2
47026: PUSH
47027: LD_INT 3
47029: MINUS
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: LIST
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: ST_TO_ADDR
// end ; 4 :
47046: GO 47327
47048: LD_INT 4
47050: DOUBLE
47051: EQUAL
47052: IFTRUE 47056
47054: GO 47189
47056: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47057: LD_ADDR_VAR 0 5
47061: PUSH
47062: LD_VAR 0 1
47066: PUSH
47067: LD_VAR 0 2
47071: PUSH
47072: LD_INT 4
47074: PLUS
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: LIST
47083: PUSH
47084: LD_VAR 0 1
47088: PUSH
47089: LD_INT 3
47091: PLUS
47092: PUSH
47093: LD_VAR 0 2
47097: PUSH
47098: LD_INT 3
47100: PLUS
47101: PUSH
47102: LD_INT 5
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: LIST
47109: PUSH
47110: LD_VAR 0 1
47114: PUSH
47115: LD_INT 4
47117: PLUS
47118: PUSH
47119: LD_VAR 0 2
47123: PUSH
47124: LD_INT 4
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: LIST
47131: PUSH
47132: LD_VAR 0 1
47136: PUSH
47137: LD_VAR 0 2
47141: PUSH
47142: LD_INT 3
47144: MINUS
47145: PUSH
47146: LD_INT 3
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: PUSH
47154: LD_VAR 0 1
47158: PUSH
47159: LD_INT 4
47161: MINUS
47162: PUSH
47163: LD_VAR 0 2
47167: PUSH
47168: LD_INT 4
47170: MINUS
47171: PUSH
47172: LD_INT 2
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: LIST
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: ST_TO_ADDR
// end ; 5 :
47187: GO 47327
47189: LD_INT 5
47191: DOUBLE
47192: EQUAL
47193: IFTRUE 47197
47195: GO 47326
47197: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47198: LD_ADDR_VAR 0 5
47202: PUSH
47203: LD_VAR 0 1
47207: PUSH
47208: LD_INT 4
47210: MINUS
47211: PUSH
47212: LD_VAR 0 2
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: LIST
47224: PUSH
47225: LD_VAR 0 1
47229: PUSH
47230: LD_VAR 0 2
47234: PUSH
47235: LD_INT 4
47237: MINUS
47238: PUSH
47239: LD_INT 3
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: PUSH
47247: LD_VAR 0 1
47251: PUSH
47252: LD_INT 4
47254: PLUS
47255: PUSH
47256: LD_VAR 0 2
47260: PUSH
47261: LD_INT 4
47263: PLUS
47264: PUSH
47265: LD_INT 5
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: LIST
47272: PUSH
47273: LD_VAR 0 1
47277: PUSH
47278: LD_INT 3
47280: PLUS
47281: PUSH
47282: LD_VAR 0 2
47286: PUSH
47287: LD_INT 4
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: LIST
47294: PUSH
47295: LD_VAR 0 1
47299: PUSH
47300: LD_VAR 0 2
47304: PUSH
47305: LD_INT 3
47307: PLUS
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: LIST
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: ST_TO_ADDR
// end ; end ;
47324: GO 47327
47326: POP
// result := list ;
47327: LD_ADDR_VAR 0 4
47331: PUSH
47332: LD_VAR 0 5
47336: ST_TO_ADDR
// end ;
47337: LD_VAR 0 4
47341: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47342: LD_INT 0
47344: PPUSH
47345: PPUSH
47346: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47347: LD_VAR 0 1
47351: NOT
47352: IFTRUE 47380
47354: PUSH
47355: LD_VAR 0 2
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 3
47368: PUSH
47369: LD_INT 4
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: IN
47378: NOT
47379: OR
47380: IFFALSE 47384
// exit ;
47382: GO 47467
// tmp := [ ] ;
47384: LD_ADDR_VAR 0 5
47388: PUSH
47389: EMPTY
47390: ST_TO_ADDR
// for i in units do
47391: LD_ADDR_VAR 0 4
47395: PUSH
47396: LD_VAR 0 1
47400: PUSH
47401: FOR_IN
47402: IFFALSE 47436
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
47404: LD_ADDR_VAR 0 5
47408: PUSH
47409: LD_VAR 0 5
47413: PPUSH
47414: LD_VAR 0 4
47418: PPUSH
47419: LD_VAR 0 2
47423: PPUSH
47424: CALL_OW 259
47428: PPUSH
47429: CALL 48862 0 2
47433: ST_TO_ADDR
47434: GO 47401
47436: POP
47437: POP
// if not tmp then
47438: LD_VAR 0 5
47442: NOT
47443: IFFALSE 47447
// exit ;
47445: GO 47467
// result := SortListByListDesc ( units , tmp ) ;
47447: LD_ADDR_VAR 0 3
47451: PUSH
47452: LD_VAR 0 1
47456: PPUSH
47457: LD_VAR 0 5
47461: PPUSH
47462: CALL_OW 77
47466: ST_TO_ADDR
// end ;
47467: LD_VAR 0 3
47471: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47472: LD_INT 0
47474: PPUSH
47475: PPUSH
47476: PPUSH
// result := false ;
47477: LD_ADDR_VAR 0 3
47481: PUSH
47482: LD_INT 0
47484: ST_TO_ADDR
// if not building then
47485: LD_VAR 0 2
47489: NOT
47490: IFFALSE 47494
// exit ;
47492: GO 47638
// x := GetX ( building ) ;
47494: LD_ADDR_VAR 0 4
47498: PUSH
47499: LD_VAR 0 2
47503: PPUSH
47504: CALL_OW 250
47508: ST_TO_ADDR
// y := GetY ( building ) ;
47509: LD_ADDR_VAR 0 5
47513: PUSH
47514: LD_VAR 0 2
47518: PPUSH
47519: CALL_OW 251
47523: ST_TO_ADDR
// if not x or not y then
47524: LD_VAR 0 4
47528: NOT
47529: IFTRUE 47538
47531: PUSH
47532: LD_VAR 0 5
47536: NOT
47537: OR
47538: IFFALSE 47542
// exit ;
47540: GO 47638
// if GetTaskList ( unit ) then
47542: LD_VAR 0 1
47546: PPUSH
47547: CALL_OW 437
47551: IFFALSE 47638
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47553: LD_STRING e
47555: PUSH
47556: LD_VAR 0 1
47560: PPUSH
47561: CALL_OW 437
47565: PUSH
47566: LD_INT 1
47568: ARRAY
47569: PUSH
47570: LD_INT 1
47572: ARRAY
47573: EQUAL
47574: IFFALSE 47601
47576: PUSH
47577: LD_VAR 0 4
47581: PUSH
47582: LD_VAR 0 1
47586: PPUSH
47587: CALL_OW 437
47591: PUSH
47592: LD_INT 1
47594: ARRAY
47595: PUSH
47596: LD_INT 2
47598: ARRAY
47599: EQUAL
47600: AND
47601: IFFALSE 47628
47603: PUSH
47604: LD_VAR 0 5
47608: PUSH
47609: LD_VAR 0 1
47613: PPUSH
47614: CALL_OW 437
47618: PUSH
47619: LD_INT 1
47621: ARRAY
47622: PUSH
47623: LD_INT 3
47625: ARRAY
47626: EQUAL
47627: AND
47628: IFFALSE 47638
// result := true end ;
47630: LD_ADDR_VAR 0 3
47634: PUSH
47635: LD_INT 1
47637: ST_TO_ADDR
// end ;
47638: LD_VAR 0 3
47642: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47643: LD_INT 0
47645: PPUSH
// result := false ;
47646: LD_ADDR_VAR 0 4
47650: PUSH
47651: LD_INT 0
47653: ST_TO_ADDR
// if GetTaskList ( unit ) then
47654: LD_VAR 0 1
47658: PPUSH
47659: CALL_OW 437
47663: IFFALSE 47750
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47665: LD_STRING M
47667: PUSH
47668: LD_VAR 0 1
47672: PPUSH
47673: CALL_OW 437
47677: PUSH
47678: LD_INT 1
47680: ARRAY
47681: PUSH
47682: LD_INT 1
47684: ARRAY
47685: EQUAL
47686: IFFALSE 47713
47688: PUSH
47689: LD_VAR 0 2
47693: PUSH
47694: LD_VAR 0 1
47698: PPUSH
47699: CALL_OW 437
47703: PUSH
47704: LD_INT 1
47706: ARRAY
47707: PUSH
47708: LD_INT 2
47710: ARRAY
47711: EQUAL
47712: AND
47713: IFFALSE 47740
47715: PUSH
47716: LD_VAR 0 3
47720: PUSH
47721: LD_VAR 0 1
47725: PPUSH
47726: CALL_OW 437
47730: PUSH
47731: LD_INT 1
47733: ARRAY
47734: PUSH
47735: LD_INT 3
47737: ARRAY
47738: EQUAL
47739: AND
47740: IFFALSE 47750
// result := true ;
47742: LD_ADDR_VAR 0 4
47746: PUSH
47747: LD_INT 1
47749: ST_TO_ADDR
// end ; end ;
47750: LD_VAR 0 4
47754: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47755: LD_INT 0
47757: PPUSH
47758: PPUSH
47759: PPUSH
47760: PPUSH
// if not unit or not area then
47761: LD_VAR 0 1
47765: NOT
47766: IFTRUE 47775
47768: PUSH
47769: LD_VAR 0 2
47773: NOT
47774: OR
47775: IFFALSE 47779
// exit ;
47777: GO 47955
// tmp := AreaToList ( area , i ) ;
47779: LD_ADDR_VAR 0 6
47783: PUSH
47784: LD_VAR 0 2
47788: PPUSH
47789: LD_VAR 0 5
47793: PPUSH
47794: CALL_OW 517
47798: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47799: LD_ADDR_VAR 0 5
47803: PUSH
47804: DOUBLE
47805: LD_INT 1
47807: DEC
47808: ST_TO_ADDR
47809: LD_VAR 0 6
47813: PUSH
47814: LD_INT 1
47816: ARRAY
47817: PUSH
47818: FOR_TO
47819: IFFALSE 47953
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47821: LD_ADDR_VAR 0 7
47825: PUSH
47826: LD_VAR 0 6
47830: PUSH
47831: LD_INT 1
47833: ARRAY
47834: PUSH
47835: LD_VAR 0 5
47839: ARRAY
47840: PUSH
47841: LD_VAR 0 6
47845: PUSH
47846: LD_INT 2
47848: ARRAY
47849: PUSH
47850: LD_VAR 0 5
47854: ARRAY
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47860: LD_INT 92
47862: PUSH
47863: LD_VAR 0 7
47867: PUSH
47868: LD_INT 1
47870: ARRAY
47871: PUSH
47872: LD_VAR 0 7
47876: PUSH
47877: LD_INT 2
47879: ARRAY
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: PPUSH
47890: CALL_OW 69
47894: PUSH
47895: LD_INT 0
47897: EQUAL
47898: IFFALSE 47951
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47900: LD_VAR 0 1
47904: PPUSH
47905: LD_VAR 0 7
47909: PUSH
47910: LD_INT 1
47912: ARRAY
47913: PPUSH
47914: LD_VAR 0 7
47918: PUSH
47919: LD_INT 2
47921: ARRAY
47922: PPUSH
47923: LD_VAR 0 3
47927: PPUSH
47928: CALL_OW 48
// result := IsPlaced ( unit ) ;
47932: LD_ADDR_VAR 0 4
47936: PUSH
47937: LD_VAR 0 1
47941: PPUSH
47942: CALL_OW 305
47946: ST_TO_ADDR
// exit ;
47947: POP
47948: POP
47949: GO 47955
// end ; end ;
47951: GO 47818
47953: POP
47954: POP
// end ;
47955: LD_VAR 0 4
47959: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47960: LD_INT 0
47962: PPUSH
47963: PPUSH
47964: PPUSH
// if not side or side > 8 then
47965: LD_VAR 0 1
47969: NOT
47970: IFTRUE 47982
47972: PUSH
47973: LD_VAR 0 1
47977: PUSH
47978: LD_INT 8
47980: GREATER
47981: OR
47982: IFFALSE 47986
// exit ;
47984: GO 48173
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47986: LD_ADDR_VAR 0 4
47990: PUSH
47991: LD_INT 22
47993: PUSH
47994: LD_VAR 0 1
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 21
48005: PUSH
48006: LD_INT 3
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PPUSH
48017: CALL_OW 69
48021: ST_TO_ADDR
// if not tmp then
48022: LD_VAR 0 4
48026: NOT
48027: IFFALSE 48031
// exit ;
48029: GO 48173
// enable_addtolog := true ;
48031: LD_ADDR_OWVAR 81
48035: PUSH
48036: LD_INT 1
48038: ST_TO_ADDR
// AddToLog ( [ ) ;
48039: LD_STRING [
48041: PPUSH
48042: CALL_OW 561
// for i in tmp do
48046: LD_ADDR_VAR 0 3
48050: PUSH
48051: LD_VAR 0 4
48055: PUSH
48056: FOR_IN
48057: IFFALSE 48164
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48059: LD_STRING [
48061: PUSH
48062: LD_VAR 0 3
48066: PPUSH
48067: CALL_OW 266
48071: STR
48072: PUSH
48073: LD_STRING , 
48075: STR
48076: PUSH
48077: LD_VAR 0 3
48081: PPUSH
48082: CALL_OW 250
48086: STR
48087: PUSH
48088: LD_STRING , 
48090: STR
48091: PUSH
48092: LD_VAR 0 3
48096: PPUSH
48097: CALL_OW 251
48101: STR
48102: PUSH
48103: LD_STRING , 
48105: STR
48106: PUSH
48107: LD_VAR 0 3
48111: PPUSH
48112: CALL_OW 254
48116: STR
48117: PUSH
48118: LD_STRING , 
48120: STR
48121: PUSH
48122: LD_VAR 0 3
48126: PPUSH
48127: LD_INT 1
48129: PPUSH
48130: CALL_OW 268
48134: STR
48135: PUSH
48136: LD_STRING , 
48138: STR
48139: PUSH
48140: LD_VAR 0 3
48144: PPUSH
48145: LD_INT 2
48147: PPUSH
48148: CALL_OW 268
48152: STR
48153: PUSH
48154: LD_STRING ],
48156: STR
48157: PPUSH
48158: CALL_OW 561
// end ;
48162: GO 48056
48164: POP
48165: POP
// AddToLog ( ]; ) ;
48166: LD_STRING ];
48168: PPUSH
48169: CALL_OW 561
// end ;
48173: LD_VAR 0 2
48177: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48178: LD_INT 0
48180: PPUSH
48181: PPUSH
48182: PPUSH
48183: PPUSH
48184: PPUSH
// if not area or not rate or not max then
48185: LD_VAR 0 1
48189: NOT
48190: IFTRUE 48199
48192: PUSH
48193: LD_VAR 0 2
48197: NOT
48198: OR
48199: IFTRUE 48208
48201: PUSH
48202: LD_VAR 0 4
48206: NOT
48207: OR
48208: IFFALSE 48212
// exit ;
48210: GO 48401
// while 1 do
48212: LD_INT 1
48214: IFFALSE 48401
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48216: LD_ADDR_VAR 0 9
48220: PUSH
48221: LD_VAR 0 1
48225: PPUSH
48226: LD_INT 1
48228: PPUSH
48229: CALL_OW 287
48233: PUSH
48234: LD_INT 10
48236: MUL
48237: ST_TO_ADDR
// r := rate / 10 ;
48238: LD_ADDR_VAR 0 7
48242: PUSH
48243: LD_VAR 0 2
48247: PUSH
48248: LD_INT 10
48250: DIVREAL
48251: ST_TO_ADDR
// time := 1 1$00 ;
48252: LD_ADDR_VAR 0 8
48256: PUSH
48257: LD_INT 2100
48259: ST_TO_ADDR
// if amount < min then
48260: LD_VAR 0 9
48264: PUSH
48265: LD_VAR 0 3
48269: LESS
48270: IFFALSE 48288
// r := r * 2 else
48272: LD_ADDR_VAR 0 7
48276: PUSH
48277: LD_VAR 0 7
48281: PUSH
48282: LD_INT 2
48284: MUL
48285: ST_TO_ADDR
48286: GO 48314
// if amount > max then
48288: LD_VAR 0 9
48292: PUSH
48293: LD_VAR 0 4
48297: GREATER
48298: IFFALSE 48314
// r := r / 2 ;
48300: LD_ADDR_VAR 0 7
48304: PUSH
48305: LD_VAR 0 7
48309: PUSH
48310: LD_INT 2
48312: DIVREAL
48313: ST_TO_ADDR
// time := time / r ;
48314: LD_ADDR_VAR 0 8
48318: PUSH
48319: LD_VAR 0 8
48323: PUSH
48324: LD_VAR 0 7
48328: DIVREAL
48329: ST_TO_ADDR
// if time < 0 then
48330: LD_VAR 0 8
48334: PUSH
48335: LD_INT 0
48337: LESS
48338: IFFALSE 48355
// time := time * - 1 ;
48340: LD_ADDR_VAR 0 8
48344: PUSH
48345: LD_VAR 0 8
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: MUL
48354: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48355: LD_VAR 0 8
48359: PUSH
48360: LD_INT 35
48362: PPUSH
48363: LD_INT 875
48365: PPUSH
48366: CALL_OW 12
48370: PLUS
48371: PPUSH
48372: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48376: LD_INT 1
48378: PPUSH
48379: LD_INT 5
48381: PPUSH
48382: CALL_OW 12
48386: PPUSH
48387: LD_VAR 0 1
48391: PPUSH
48392: LD_INT 1
48394: PPUSH
48395: CALL_OW 55
// end ;
48399: GO 48212
// end ;
48401: LD_VAR 0 5
48405: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48406: LD_INT 0
48408: PPUSH
48409: PPUSH
48410: PPUSH
48411: PPUSH
48412: PPUSH
48413: PPUSH
48414: PPUSH
48415: PPUSH
// if not turrets or not factories then
48416: LD_VAR 0 1
48420: NOT
48421: IFTRUE 48430
48423: PUSH
48424: LD_VAR 0 2
48428: NOT
48429: OR
48430: IFFALSE 48434
// exit ;
48432: GO 48741
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48434: LD_ADDR_VAR 0 10
48438: PUSH
48439: LD_INT 5
48441: PUSH
48442: LD_INT 6
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: LD_INT 4
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 3
48461: PUSH
48462: LD_INT 5
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 24
48476: PUSH
48477: LD_INT 25
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 23
48486: PUSH
48487: LD_INT 27
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 42
48500: PUSH
48501: LD_INT 43
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 44
48510: PUSH
48511: LD_INT 46
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 45
48520: PUSH
48521: LD_INT 47
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: LIST
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: LIST
48537: ST_TO_ADDR
// result := [ ] ;
48538: LD_ADDR_VAR 0 3
48542: PUSH
48543: EMPTY
48544: ST_TO_ADDR
// for i in turrets do
48545: LD_ADDR_VAR 0 4
48549: PUSH
48550: LD_VAR 0 1
48554: PUSH
48555: FOR_IN
48556: IFFALSE 48739
// begin nat := GetNation ( i ) ;
48558: LD_ADDR_VAR 0 7
48562: PUSH
48563: LD_VAR 0 4
48567: PPUSH
48568: CALL_OW 248
48572: ST_TO_ADDR
// weapon := 0 ;
48573: LD_ADDR_VAR 0 8
48577: PUSH
48578: LD_INT 0
48580: ST_TO_ADDR
// if not nat then
48581: LD_VAR 0 7
48585: NOT
48586: IFFALSE 48590
// continue ;
48588: GO 48555
// for j in list [ nat ] do
48590: LD_ADDR_VAR 0 5
48594: PUSH
48595: LD_VAR 0 10
48599: PUSH
48600: LD_VAR 0 7
48604: ARRAY
48605: PUSH
48606: FOR_IN
48607: IFFALSE 48648
// if GetBWeapon ( i ) = j [ 1 ] then
48609: LD_VAR 0 4
48613: PPUSH
48614: CALL_OW 269
48618: PUSH
48619: LD_VAR 0 5
48623: PUSH
48624: LD_INT 1
48626: ARRAY
48627: EQUAL
48628: IFFALSE 48646
// begin weapon := j [ 2 ] ;
48630: LD_ADDR_VAR 0 8
48634: PUSH
48635: LD_VAR 0 5
48639: PUSH
48640: LD_INT 2
48642: ARRAY
48643: ST_TO_ADDR
// break ;
48644: GO 48648
// end ;
48646: GO 48606
48648: POP
48649: POP
// if not weapon then
48650: LD_VAR 0 8
48654: NOT
48655: IFFALSE 48659
// continue ;
48657: GO 48555
// for k in factories do
48659: LD_ADDR_VAR 0 6
48663: PUSH
48664: LD_VAR 0 2
48668: PUSH
48669: FOR_IN
48670: IFFALSE 48735
// begin weapons := AvailableWeaponList ( k ) ;
48672: LD_ADDR_VAR 0 9
48676: PUSH
48677: LD_VAR 0 6
48681: PPUSH
48682: CALL_OW 478
48686: ST_TO_ADDR
// if not weapons then
48687: LD_VAR 0 9
48691: NOT
48692: IFFALSE 48696
// continue ;
48694: GO 48669
// if weapon in weapons then
48696: LD_VAR 0 8
48700: PUSH
48701: LD_VAR 0 9
48705: IN
48706: IFFALSE 48733
// begin result := [ i , weapon ] ;
48708: LD_ADDR_VAR 0 3
48712: PUSH
48713: LD_VAR 0 4
48717: PUSH
48718: LD_VAR 0 8
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: ST_TO_ADDR
// exit ;
48727: POP
48728: POP
48729: POP
48730: POP
48731: GO 48741
// end ; end ;
48733: GO 48669
48735: POP
48736: POP
// end ;
48737: GO 48555
48739: POP
48740: POP
// end ;
48741: LD_VAR 0 3
48745: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48746: LD_INT 0
48748: PPUSH
// if not side or side > 8 then
48749: LD_VAR 0 3
48753: NOT
48754: IFTRUE 48766
48756: PUSH
48757: LD_VAR 0 3
48761: PUSH
48762: LD_INT 8
48764: GREATER
48765: OR
48766: IFFALSE 48770
// exit ;
48768: GO 48829
// if not range then
48770: LD_VAR 0 4
48774: NOT
48775: IFFALSE 48786
// range := - 12 ;
48777: LD_ADDR_VAR 0 4
48781: PUSH
48782: LD_INT 12
48784: NEG
48785: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48786: LD_VAR 0 1
48790: PPUSH
48791: LD_VAR 0 2
48795: PPUSH
48796: LD_VAR 0 3
48800: PPUSH
48801: LD_VAR 0 4
48805: PPUSH
48806: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48810: LD_VAR 0 1
48814: PPUSH
48815: LD_VAR 0 2
48819: PPUSH
48820: LD_VAR 0 3
48824: PPUSH
48825: CALL_OW 331
// end ;
48829: LD_VAR 0 5
48833: RET
// export function Video ( mode ) ; begin
48834: LD_INT 0
48836: PPUSH
// ingame_video = mode ;
48837: LD_ADDR_OWVAR 52
48841: PUSH
48842: LD_VAR 0 1
48846: ST_TO_ADDR
// interface_hidden = mode ;
48847: LD_ADDR_OWVAR 54
48851: PUSH
48852: LD_VAR 0 1
48856: ST_TO_ADDR
// end ;
48857: LD_VAR 0 2
48861: RET
// export function Join ( array , element ) ; begin
48862: LD_INT 0
48864: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48865: LD_ADDR_VAR 0 3
48869: PUSH
48870: LD_VAR 0 1
48874: PPUSH
48875: LD_VAR 0 1
48879: PUSH
48880: LD_INT 1
48882: PLUS
48883: PPUSH
48884: LD_VAR 0 2
48888: PPUSH
48889: CALL_OW 1
48893: ST_TO_ADDR
// end ;
48894: LD_VAR 0 3
48898: RET
// export function JoinUnion ( array , element ) ; begin
48899: LD_INT 0
48901: PPUSH
// result := array union element ;
48902: LD_ADDR_VAR 0 3
48906: PUSH
48907: LD_VAR 0 1
48911: PUSH
48912: LD_VAR 0 2
48916: UNION
48917: ST_TO_ADDR
// end ;
48918: LD_VAR 0 3
48922: RET
// export function GetBehemoths ( side ) ; begin
48923: LD_INT 0
48925: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48926: LD_ADDR_VAR 0 2
48930: PUSH
48931: LD_INT 22
48933: PUSH
48934: LD_VAR 0 1
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 31
48945: PUSH
48946: LD_INT 25
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PPUSH
48957: CALL_OW 69
48961: ST_TO_ADDR
// end ;
48962: LD_VAR 0 2
48966: RET
// export function Shuffle ( array ) ; var i , index ; begin
48967: LD_INT 0
48969: PPUSH
48970: PPUSH
48971: PPUSH
// result := [ ] ;
48972: LD_ADDR_VAR 0 2
48976: PUSH
48977: EMPTY
48978: ST_TO_ADDR
// if not array then
48979: LD_VAR 0 1
48983: NOT
48984: IFFALSE 48988
// exit ;
48986: GO 49087
// Randomize ;
48988: CALL_OW 10
// for i = array downto 1 do
48992: LD_ADDR_VAR 0 3
48996: PUSH
48997: DOUBLE
48998: LD_VAR 0 1
49002: INC
49003: ST_TO_ADDR
49004: LD_INT 1
49006: PUSH
49007: FOR_DOWNTO
49008: IFFALSE 49085
// begin index := rand ( 1 , array ) ;
49010: LD_ADDR_VAR 0 4
49014: PUSH
49015: LD_INT 1
49017: PPUSH
49018: LD_VAR 0 1
49022: PPUSH
49023: CALL_OW 12
49027: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49028: LD_ADDR_VAR 0 2
49032: PUSH
49033: LD_VAR 0 2
49037: PPUSH
49038: LD_VAR 0 2
49042: PUSH
49043: LD_INT 1
49045: PLUS
49046: PPUSH
49047: LD_VAR 0 1
49051: PUSH
49052: LD_VAR 0 4
49056: ARRAY
49057: PPUSH
49058: CALL_OW 2
49062: ST_TO_ADDR
// array := Delete ( array , index ) ;
49063: LD_ADDR_VAR 0 1
49067: PUSH
49068: LD_VAR 0 1
49072: PPUSH
49073: LD_VAR 0 4
49077: PPUSH
49078: CALL_OW 3
49082: ST_TO_ADDR
// end ;
49083: GO 49007
49085: POP
49086: POP
// end ;
49087: LD_VAR 0 2
49091: RET
// export function GetBaseMaterials ( base ) ; begin
49092: LD_INT 0
49094: PPUSH
// result := [ 0 , 0 , 0 ] ;
49095: LD_ADDR_VAR 0 2
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: ST_TO_ADDR
// if not base then
49114: LD_VAR 0 1
49118: NOT
49119: IFFALSE 49123
// exit ;
49121: GO 49172
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49123: LD_ADDR_VAR 0 2
49127: PUSH
49128: LD_VAR 0 1
49132: PPUSH
49133: LD_INT 1
49135: PPUSH
49136: CALL_OW 275
49140: PUSH
49141: LD_VAR 0 1
49145: PPUSH
49146: LD_INT 2
49148: PPUSH
49149: CALL_OW 275
49153: PUSH
49154: LD_VAR 0 1
49158: PPUSH
49159: LD_INT 3
49161: PPUSH
49162: CALL_OW 275
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: LIST
49171: ST_TO_ADDR
// end ;
49172: LD_VAR 0 2
49176: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49177: LD_INT 0
49179: PPUSH
49180: PPUSH
// result := array ;
49181: LD_ADDR_VAR 0 3
49185: PUSH
49186: LD_VAR 0 1
49190: ST_TO_ADDR
// if size >= result then
49191: LD_VAR 0 2
49195: PUSH
49196: LD_VAR 0 3
49200: GREATEREQUAL
49201: IFFALSE 49205
// exit ;
49203: GO 49255
// if size then
49205: LD_VAR 0 2
49209: IFFALSE 49255
// for i := array downto size do
49211: LD_ADDR_VAR 0 4
49215: PUSH
49216: DOUBLE
49217: LD_VAR 0 1
49221: INC
49222: ST_TO_ADDR
49223: LD_VAR 0 2
49227: PUSH
49228: FOR_DOWNTO
49229: IFFALSE 49253
// result := Delete ( result , result ) ;
49231: LD_ADDR_VAR 0 3
49235: PUSH
49236: LD_VAR 0 3
49240: PPUSH
49241: LD_VAR 0 3
49245: PPUSH
49246: CALL_OW 3
49250: ST_TO_ADDR
49251: GO 49228
49253: POP
49254: POP
// end ;
49255: LD_VAR 0 3
49259: RET
// export function ComExit ( unit ) ; var tmp ; begin
49260: LD_INT 0
49262: PPUSH
49263: PPUSH
// if not IsInUnit ( unit ) then
49264: LD_VAR 0 1
49268: PPUSH
49269: CALL_OW 310
49273: NOT
49274: IFFALSE 49278
// exit ;
49276: GO 49338
// tmp := IsInUnit ( unit ) ;
49278: LD_ADDR_VAR 0 3
49282: PUSH
49283: LD_VAR 0 1
49287: PPUSH
49288: CALL_OW 310
49292: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49293: LD_VAR 0 3
49297: PPUSH
49298: CALL_OW 247
49302: PUSH
49303: LD_INT 2
49305: EQUAL
49306: IFFALSE 49319
// ComExitVehicle ( unit ) else
49308: LD_VAR 0 1
49312: PPUSH
49313: CALL_OW 121
49317: GO 49328
// ComExitBuilding ( unit ) ;
49319: LD_VAR 0 1
49323: PPUSH
49324: CALL_OW 122
// result := tmp ;
49328: LD_ADDR_VAR 0 2
49332: PUSH
49333: LD_VAR 0 3
49337: ST_TO_ADDR
// end ;
49338: LD_VAR 0 2
49342: RET
// export function ComExitAll ( units ) ; var i ; begin
49343: LD_INT 0
49345: PPUSH
49346: PPUSH
// if not units then
49347: LD_VAR 0 1
49351: NOT
49352: IFFALSE 49356
// exit ;
49354: GO 49382
// for i in units do
49356: LD_ADDR_VAR 0 3
49360: PUSH
49361: LD_VAR 0 1
49365: PUSH
49366: FOR_IN
49367: IFFALSE 49380
// ComExit ( i ) ;
49369: LD_VAR 0 3
49373: PPUSH
49374: CALL 49260 0 1
49378: GO 49366
49380: POP
49381: POP
// end ;
49382: LD_VAR 0 2
49386: RET
// export function ResetHc ; begin
49387: LD_INT 0
49389: PPUSH
// InitHc ;
49390: CALL_OW 19
// hc_importance := 0 ;
49394: LD_ADDR_OWVAR 32
49398: PUSH
49399: LD_INT 0
49401: ST_TO_ADDR
// end ;
49402: LD_VAR 0 1
49406: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49407: LD_INT 0
49409: PPUSH
49410: PPUSH
49411: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49412: LD_ADDR_VAR 0 6
49416: PUSH
49417: LD_VAR 0 1
49421: PUSH
49422: LD_VAR 0 3
49426: PLUS
49427: PUSH
49428: LD_INT 2
49430: DIV
49431: ST_TO_ADDR
// if _x < 0 then
49432: LD_VAR 0 6
49436: PUSH
49437: LD_INT 0
49439: LESS
49440: IFFALSE 49457
// _x := _x * - 1 ;
49442: LD_ADDR_VAR 0 6
49446: PUSH
49447: LD_VAR 0 6
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: MUL
49456: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
49457: LD_ADDR_VAR 0 7
49461: PUSH
49462: LD_VAR 0 2
49466: PUSH
49467: LD_VAR 0 4
49471: PLUS
49472: PUSH
49473: LD_INT 2
49475: DIV
49476: ST_TO_ADDR
// if _y < 0 then
49477: LD_VAR 0 7
49481: PUSH
49482: LD_INT 0
49484: LESS
49485: IFFALSE 49502
// _y := _y * - 1 ;
49487: LD_ADDR_VAR 0 7
49491: PUSH
49492: LD_VAR 0 7
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: MUL
49501: ST_TO_ADDR
// result := [ _x , _y ] ;
49502: LD_ADDR_VAR 0 5
49506: PUSH
49507: LD_VAR 0 6
49511: PUSH
49512: LD_VAR 0 7
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: ST_TO_ADDR
// end ;
49521: LD_VAR 0 5
49525: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
49526: LD_INT 0
49528: PPUSH
49529: PPUSH
49530: PPUSH
49531: PPUSH
// task := GetTaskList ( unit ) ;
49532: LD_ADDR_VAR 0 7
49536: PUSH
49537: LD_VAR 0 1
49541: PPUSH
49542: CALL_OW 437
49546: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
49547: LD_VAR 0 7
49551: NOT
49552: IFFALSE 49571
49554: PUSH
49555: LD_VAR 0 1
49559: PPUSH
49560: LD_VAR 0 2
49564: PPUSH
49565: CALL_OW 308
49569: NOT
49570: AND
49571: IFFALSE 49575
// exit ;
49573: GO 49693
// if IsInArea ( unit , area ) then
49575: LD_VAR 0 1
49579: PPUSH
49580: LD_VAR 0 2
49584: PPUSH
49585: CALL_OW 308
49589: IFFALSE 49607
// begin ComMoveToArea ( unit , goAway ) ;
49591: LD_VAR 0 1
49595: PPUSH
49596: LD_VAR 0 3
49600: PPUSH
49601: CALL_OW 113
// exit ;
49605: GO 49693
// end ; if task [ 1 ] [ 1 ] <> M then
49607: LD_VAR 0 7
49611: PUSH
49612: LD_INT 1
49614: ARRAY
49615: PUSH
49616: LD_INT 1
49618: ARRAY
49619: PUSH
49620: LD_STRING M
49622: NONEQUAL
49623: IFFALSE 49627
// exit ;
49625: GO 49693
// x := task [ 1 ] [ 2 ] ;
49627: LD_ADDR_VAR 0 5
49631: PUSH
49632: LD_VAR 0 7
49636: PUSH
49637: LD_INT 1
49639: ARRAY
49640: PUSH
49641: LD_INT 2
49643: ARRAY
49644: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49645: LD_ADDR_VAR 0 6
49649: PUSH
49650: LD_VAR 0 7
49654: PUSH
49655: LD_INT 1
49657: ARRAY
49658: PUSH
49659: LD_INT 3
49661: ARRAY
49662: ST_TO_ADDR
// if InArea ( x , y , area ) then
49663: LD_VAR 0 5
49667: PPUSH
49668: LD_VAR 0 6
49672: PPUSH
49673: LD_VAR 0 2
49677: PPUSH
49678: CALL_OW 309
49682: IFFALSE 49693
// ComStop ( unit ) ;
49684: LD_VAR 0 1
49688: PPUSH
49689: CALL_OW 141
// end ;
49693: LD_VAR 0 4
49697: RET
// export function Abs ( value ) ; begin
49698: LD_INT 0
49700: PPUSH
// result := value ;
49701: LD_ADDR_VAR 0 2
49705: PUSH
49706: LD_VAR 0 1
49710: ST_TO_ADDR
// if value < 0 then
49711: LD_VAR 0 1
49715: PUSH
49716: LD_INT 0
49718: LESS
49719: IFFALSE 49736
// result := value * - 1 ;
49721: LD_ADDR_VAR 0 2
49725: PUSH
49726: LD_VAR 0 1
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: MUL
49735: ST_TO_ADDR
// end ;
49736: LD_VAR 0 2
49740: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49741: LD_INT 0
49743: PPUSH
49744: PPUSH
49745: PPUSH
49746: PPUSH
49747: PPUSH
49748: PPUSH
49749: PPUSH
49750: PPUSH
// if not unit or not building then
49751: LD_VAR 0 1
49755: NOT
49756: IFTRUE 49765
49758: PUSH
49759: LD_VAR 0 2
49763: NOT
49764: OR
49765: IFFALSE 49769
// exit ;
49767: GO 49997
// x := GetX ( building ) ;
49769: LD_ADDR_VAR 0 4
49773: PUSH
49774: LD_VAR 0 2
49778: PPUSH
49779: CALL_OW 250
49783: ST_TO_ADDR
// y := GetY ( building ) ;
49784: LD_ADDR_VAR 0 6
49788: PUSH
49789: LD_VAR 0 2
49793: PPUSH
49794: CALL_OW 251
49798: ST_TO_ADDR
// d := GetDir ( building ) ;
49799: LD_ADDR_VAR 0 8
49803: PUSH
49804: LD_VAR 0 2
49808: PPUSH
49809: CALL_OW 254
49813: ST_TO_ADDR
// r := 4 ;
49814: LD_ADDR_VAR 0 9
49818: PUSH
49819: LD_INT 4
49821: ST_TO_ADDR
// for i := 1 to 5 do
49822: LD_ADDR_VAR 0 10
49826: PUSH
49827: DOUBLE
49828: LD_INT 1
49830: DEC
49831: ST_TO_ADDR
49832: LD_INT 5
49834: PUSH
49835: FOR_TO
49836: IFFALSE 49995
// begin _x := ShiftX ( x , d , r + i ) ;
49838: LD_ADDR_VAR 0 5
49842: PUSH
49843: LD_VAR 0 4
49847: PPUSH
49848: LD_VAR 0 8
49852: PPUSH
49853: LD_VAR 0 9
49857: PUSH
49858: LD_VAR 0 10
49862: PLUS
49863: PPUSH
49864: CALL_OW 272
49868: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49869: LD_ADDR_VAR 0 7
49873: PUSH
49874: LD_VAR 0 6
49878: PPUSH
49879: LD_VAR 0 8
49883: PPUSH
49884: LD_VAR 0 9
49888: PUSH
49889: LD_VAR 0 10
49893: PLUS
49894: PPUSH
49895: CALL_OW 273
49899: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49900: LD_VAR 0 5
49904: PPUSH
49905: LD_VAR 0 7
49909: PPUSH
49910: CALL_OW 488
49914: IFFALSE 49949
49916: PUSH
49917: LD_VAR 0 5
49921: PPUSH
49922: LD_VAR 0 7
49926: PPUSH
49927: CALL_OW 428
49931: PPUSH
49932: CALL_OW 247
49936: PUSH
49937: LD_INT 3
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: IN
49947: NOT
49948: AND
49949: IFFALSE 49993
// begin ComMoveXY ( unit , _x , _y ) ;
49951: LD_VAR 0 1
49955: PPUSH
49956: LD_VAR 0 5
49960: PPUSH
49961: LD_VAR 0 7
49965: PPUSH
49966: CALL_OW 111
// result := [ _x , _y ] ;
49970: LD_ADDR_VAR 0 3
49974: PUSH
49975: LD_VAR 0 5
49979: PUSH
49980: LD_VAR 0 7
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: ST_TO_ADDR
// exit ;
49989: POP
49990: POP
49991: GO 49997
// end ; end ;
49993: GO 49835
49995: POP
49996: POP
// end ;
49997: LD_VAR 0 3
50001: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50002: LD_INT 0
50004: PPUSH
50005: PPUSH
50006: PPUSH
// result := 0 ;
50007: LD_ADDR_VAR 0 3
50011: PUSH
50012: LD_INT 0
50014: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50015: LD_VAR 0 1
50019: PUSH
50020: LD_INT 0
50022: LESS
50023: IFTRUE 50035
50025: PUSH
50026: LD_VAR 0 1
50030: PUSH
50031: LD_INT 8
50033: GREATER
50034: OR
50035: IFTRUE 50047
50037: PUSH
50038: LD_VAR 0 2
50042: PUSH
50043: LD_INT 0
50045: LESS
50046: OR
50047: IFTRUE 50059
50049: PUSH
50050: LD_VAR 0 2
50054: PUSH
50055: LD_INT 8
50057: GREATER
50058: OR
50059: IFFALSE 50063
// exit ;
50061: GO 50138
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50063: LD_ADDR_VAR 0 4
50067: PUSH
50068: LD_INT 22
50070: PUSH
50071: LD_VAR 0 2
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PPUSH
50080: CALL_OW 69
50084: PUSH
50085: FOR_IN
50086: IFFALSE 50136
// begin un := UnitShoot ( i ) ;
50088: LD_ADDR_VAR 0 5
50092: PUSH
50093: LD_VAR 0 4
50097: PPUSH
50098: CALL_OW 504
50102: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50103: LD_VAR 0 5
50107: PPUSH
50108: CALL_OW 255
50112: PUSH
50113: LD_VAR 0 1
50117: EQUAL
50118: IFFALSE 50134
// begin result := un ;
50120: LD_ADDR_VAR 0 3
50124: PUSH
50125: LD_VAR 0 5
50129: ST_TO_ADDR
// exit ;
50130: POP
50131: POP
50132: GO 50138
// end ; end ;
50134: GO 50085
50136: POP
50137: POP
// end ;
50138: LD_VAR 0 3
50142: RET
// export function GetCargoBay ( units ) ; begin
50143: LD_INT 0
50145: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50146: LD_ADDR_VAR 0 2
50150: PUSH
50151: LD_VAR 0 1
50155: PPUSH
50156: LD_INT 2
50158: PUSH
50159: LD_INT 34
50161: PUSH
50162: LD_INT 12
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 34
50171: PUSH
50172: LD_INT 51
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 34
50181: PUSH
50182: LD_INT 32
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 34
50191: PUSH
50192: LD_INT 89
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: PPUSH
50206: CALL_OW 72
50210: ST_TO_ADDR
// end ;
50211: LD_VAR 0 2
50215: RET
// export function Negate ( value ) ; begin
50216: LD_INT 0
50218: PPUSH
// result := not value ;
50219: LD_ADDR_VAR 0 2
50223: PUSH
50224: LD_VAR 0 1
50228: NOT
50229: ST_TO_ADDR
// end ;
50230: LD_VAR 0 2
50234: RET
// export function Inc ( value ) ; begin
50235: LD_INT 0
50237: PPUSH
// result := value + 1 ;
50238: LD_ADDR_VAR 0 2
50242: PUSH
50243: LD_VAR 0 1
50247: PUSH
50248: LD_INT 1
50250: PLUS
50251: ST_TO_ADDR
// end ;
50252: LD_VAR 0 2
50256: RET
// export function Dec ( value ) ; begin
50257: LD_INT 0
50259: PPUSH
// result := value - 1 ;
50260: LD_ADDR_VAR 0 2
50264: PUSH
50265: LD_VAR 0 1
50269: PUSH
50270: LD_INT 1
50272: MINUS
50273: ST_TO_ADDR
// end ;
50274: LD_VAR 0 2
50278: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50279: LD_INT 0
50281: PPUSH
50282: PPUSH
50283: PPUSH
50284: PPUSH
50285: PPUSH
50286: PPUSH
50287: PPUSH
50288: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50289: LD_VAR 0 1
50293: PPUSH
50294: LD_VAR 0 2
50298: PPUSH
50299: CALL_OW 488
50303: NOT
50304: IFTRUE 50323
50306: PUSH
50307: LD_VAR 0 3
50311: PPUSH
50312: LD_VAR 0 4
50316: PPUSH
50317: CALL_OW 488
50321: NOT
50322: OR
50323: IFFALSE 50336
// begin result := - 1 ;
50325: LD_ADDR_VAR 0 5
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: ST_TO_ADDR
// exit ;
50334: GO 50571
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50336: LD_ADDR_VAR 0 12
50340: PUSH
50341: LD_VAR 0 1
50345: PPUSH
50346: LD_VAR 0 2
50350: PPUSH
50351: LD_VAR 0 3
50355: PPUSH
50356: LD_VAR 0 4
50360: PPUSH
50361: CALL 49407 0 4
50365: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50366: LD_ADDR_VAR 0 11
50370: PUSH
50371: LD_VAR 0 1
50375: PPUSH
50376: LD_VAR 0 2
50380: PPUSH
50381: LD_VAR 0 12
50385: PUSH
50386: LD_INT 1
50388: ARRAY
50389: PPUSH
50390: LD_VAR 0 12
50394: PUSH
50395: LD_INT 2
50397: ARRAY
50398: PPUSH
50399: CALL_OW 298
50403: ST_TO_ADDR
// distance := 9999 ;
50404: LD_ADDR_VAR 0 10
50408: PUSH
50409: LD_INT 9999
50411: ST_TO_ADDR
// for i := 0 to 5 do
50412: LD_ADDR_VAR 0 6
50416: PUSH
50417: DOUBLE
50418: LD_INT 0
50420: DEC
50421: ST_TO_ADDR
50422: LD_INT 5
50424: PUSH
50425: FOR_TO
50426: IFFALSE 50569
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50428: LD_ADDR_VAR 0 7
50432: PUSH
50433: LD_VAR 0 1
50437: PPUSH
50438: LD_VAR 0 6
50442: PPUSH
50443: LD_VAR 0 11
50447: PPUSH
50448: CALL_OW 272
50452: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
50453: LD_ADDR_VAR 0 8
50457: PUSH
50458: LD_VAR 0 2
50462: PPUSH
50463: LD_VAR 0 6
50467: PPUSH
50468: LD_VAR 0 11
50472: PPUSH
50473: CALL_OW 273
50477: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50478: LD_VAR 0 7
50482: PPUSH
50483: LD_VAR 0 8
50487: PPUSH
50488: CALL_OW 488
50492: NOT
50493: IFFALSE 50497
// continue ;
50495: GO 50425
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
50497: LD_ADDR_VAR 0 9
50501: PUSH
50502: LD_VAR 0 12
50506: PUSH
50507: LD_INT 1
50509: ARRAY
50510: PPUSH
50511: LD_VAR 0 12
50515: PUSH
50516: LD_INT 2
50518: ARRAY
50519: PPUSH
50520: LD_VAR 0 7
50524: PPUSH
50525: LD_VAR 0 8
50529: PPUSH
50530: CALL_OW 298
50534: ST_TO_ADDR
// if tmp < distance then
50535: LD_VAR 0 9
50539: PUSH
50540: LD_VAR 0 10
50544: LESS
50545: IFFALSE 50567
// begin result := i ;
50547: LD_ADDR_VAR 0 5
50551: PUSH
50552: LD_VAR 0 6
50556: ST_TO_ADDR
// distance := tmp ;
50557: LD_ADDR_VAR 0 10
50561: PUSH
50562: LD_VAR 0 9
50566: ST_TO_ADDR
// end ; end ;
50567: GO 50425
50569: POP
50570: POP
// end ;
50571: LD_VAR 0 5
50575: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50576: LD_INT 0
50578: PPUSH
50579: PPUSH
// if not driver or not IsInUnit ( driver ) then
50580: LD_VAR 0 1
50584: NOT
50585: IFTRUE 50599
50587: PUSH
50588: LD_VAR 0 1
50592: PPUSH
50593: CALL_OW 310
50597: NOT
50598: OR
50599: IFFALSE 50603
// exit ;
50601: GO 50693
// vehicle := IsInUnit ( driver ) ;
50603: LD_ADDR_VAR 0 3
50607: PUSH
50608: LD_VAR 0 1
50612: PPUSH
50613: CALL_OW 310
50617: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50618: LD_VAR 0 1
50622: PPUSH
50623: LD_STRING \
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: PUSH
50653: LD_STRING E
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: LD_VAR 0 3
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PPUSH
50689: CALL_OW 446
// end ;
50693: LD_VAR 0 2
50697: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50698: LD_INT 0
50700: PPUSH
50701: PPUSH
// if not driver or not IsInUnit ( driver ) then
50702: LD_VAR 0 1
50706: NOT
50707: IFTRUE 50721
50709: PUSH
50710: LD_VAR 0 1
50714: PPUSH
50715: CALL_OW 310
50719: NOT
50720: OR
50721: IFFALSE 50725
// exit ;
50723: GO 50815
// vehicle := IsInUnit ( driver ) ;
50725: LD_ADDR_VAR 0 3
50729: PUSH
50730: LD_VAR 0 1
50734: PPUSH
50735: CALL_OW 310
50739: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50740: LD_VAR 0 1
50744: PPUSH
50745: LD_STRING \
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: PUSH
50775: LD_STRING E
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_VAR 0 3
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PPUSH
50811: CALL_OW 447
// end ;
50815: LD_VAR 0 2
50819: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50820: LD_INT 0
50822: PPUSH
50823: PPUSH
50824: PPUSH
// tmp := [ ] ;
50825: LD_ADDR_VAR 0 5
50829: PUSH
50830: EMPTY
50831: ST_TO_ADDR
// for i in units do
50832: LD_ADDR_VAR 0 4
50836: PUSH
50837: LD_VAR 0 1
50841: PUSH
50842: FOR_IN
50843: IFFALSE 50881
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50845: LD_ADDR_VAR 0 5
50849: PUSH
50850: LD_VAR 0 5
50854: PPUSH
50855: LD_VAR 0 5
50859: PUSH
50860: LD_INT 1
50862: PLUS
50863: PPUSH
50864: LD_VAR 0 4
50868: PPUSH
50869: CALL_OW 256
50873: PPUSH
50874: CALL_OW 2
50878: ST_TO_ADDR
50879: GO 50842
50881: POP
50882: POP
// if not tmp then
50883: LD_VAR 0 5
50887: NOT
50888: IFFALSE 50892
// exit ;
50890: GO 50940
// if asc then
50892: LD_VAR 0 2
50896: IFFALSE 50920
// result := SortListByListAsc ( units , tmp ) else
50898: LD_ADDR_VAR 0 3
50902: PUSH
50903: LD_VAR 0 1
50907: PPUSH
50908: LD_VAR 0 5
50912: PPUSH
50913: CALL_OW 76
50917: ST_TO_ADDR
50918: GO 50940
// result := SortListByListDesc ( units , tmp ) ;
50920: LD_ADDR_VAR 0 3
50924: PUSH
50925: LD_VAR 0 1
50929: PPUSH
50930: LD_VAR 0 5
50934: PPUSH
50935: CALL_OW 77
50939: ST_TO_ADDR
// end ;
50940: LD_VAR 0 3
50944: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50945: LD_INT 0
50947: PPUSH
50948: PPUSH
// task := GetTaskList ( mech ) ;
50949: LD_ADDR_VAR 0 4
50953: PUSH
50954: LD_VAR 0 1
50958: PPUSH
50959: CALL_OW 437
50963: ST_TO_ADDR
// if not task then
50964: LD_VAR 0 4
50968: NOT
50969: IFFALSE 50973
// exit ;
50971: GO 51017
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50973: LD_ADDR_VAR 0 3
50977: PUSH
50978: LD_VAR 0 4
50982: PUSH
50983: LD_INT 1
50985: ARRAY
50986: PUSH
50987: LD_INT 1
50989: ARRAY
50990: PUSH
50991: LD_STRING r
50993: EQUAL
50994: IFFALSE 51016
50996: PUSH
50997: LD_VAR 0 4
51001: PUSH
51002: LD_INT 1
51004: ARRAY
51005: PUSH
51006: LD_INT 4
51008: ARRAY
51009: PUSH
51010: LD_VAR 0 2
51014: EQUAL
51015: AND
51016: ST_TO_ADDR
// end ;
51017: LD_VAR 0 3
51021: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51022: LD_INT 0
51024: PPUSH
// SetDir ( unit , d ) ;
51025: LD_VAR 0 1
51029: PPUSH
51030: LD_VAR 0 4
51034: PPUSH
51035: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51039: LD_ADDR_VAR 0 6
51043: PUSH
51044: LD_VAR 0 1
51048: PPUSH
51049: LD_VAR 0 2
51053: PPUSH
51054: LD_VAR 0 3
51058: PPUSH
51059: LD_VAR 0 5
51063: PPUSH
51064: CALL_OW 48
51068: ST_TO_ADDR
// end ;
51069: LD_VAR 0 6
51073: RET
// export function ToNaturalNumber ( number ) ; begin
51074: LD_INT 0
51076: PPUSH
// result := number div 1 ;
51077: LD_ADDR_VAR 0 2
51081: PUSH
51082: LD_VAR 0 1
51086: PUSH
51087: LD_INT 1
51089: DIV
51090: ST_TO_ADDR
// if number < 0 then
51091: LD_VAR 0 1
51095: PUSH
51096: LD_INT 0
51098: LESS
51099: IFFALSE 51109
// result := 0 ;
51101: LD_ADDR_VAR 0 2
51105: PUSH
51106: LD_INT 0
51108: ST_TO_ADDR
// end ;
51109: LD_VAR 0 2
51113: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51114: LD_INT 0
51116: PPUSH
51117: PPUSH
51118: PPUSH
// if not buildings then
51119: LD_VAR 0 1
51123: NOT
51124: IFFALSE 51128
// exit ;
51126: GO 51243
// tmp := [ ] ;
51128: LD_ADDR_VAR 0 5
51132: PUSH
51133: EMPTY
51134: ST_TO_ADDR
// for b in buildings do
51135: LD_ADDR_VAR 0 4
51139: PUSH
51140: LD_VAR 0 1
51144: PUSH
51145: FOR_IN
51146: IFFALSE 51184
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51148: LD_ADDR_VAR 0 5
51152: PUSH
51153: LD_VAR 0 5
51157: PPUSH
51158: LD_VAR 0 5
51162: PUSH
51163: LD_INT 1
51165: PLUS
51166: PPUSH
51167: LD_VAR 0 4
51171: PPUSH
51172: CALL_OW 266
51176: PPUSH
51177: CALL_OW 1
51181: ST_TO_ADDR
51182: GO 51145
51184: POP
51185: POP
// if not tmp then
51186: LD_VAR 0 5
51190: NOT
51191: IFFALSE 51195
// exit ;
51193: GO 51243
// if asc then
51195: LD_VAR 0 2
51199: IFFALSE 51223
// result := SortListByListAsc ( buildings , tmp ) else
51201: LD_ADDR_VAR 0 3
51205: PUSH
51206: LD_VAR 0 1
51210: PPUSH
51211: LD_VAR 0 5
51215: PPUSH
51216: CALL_OW 76
51220: ST_TO_ADDR
51221: GO 51243
// result := SortListByListDesc ( buildings , tmp ) ;
51223: LD_ADDR_VAR 0 3
51227: PUSH
51228: LD_VAR 0 1
51232: PPUSH
51233: LD_VAR 0 5
51237: PPUSH
51238: CALL_OW 77
51242: ST_TO_ADDR
// end ;
51243: LD_VAR 0 3
51247: RET
// export function SortByClass ( units , class ) ; var un ; begin
51248: LD_INT 0
51250: PPUSH
51251: PPUSH
// if not units or not class then
51252: LD_VAR 0 1
51256: NOT
51257: IFTRUE 51266
51259: PUSH
51260: LD_VAR 0 2
51264: NOT
51265: OR
51266: IFFALSE 51270
// exit ;
51268: GO 51365
// result := [ ] ;
51270: LD_ADDR_VAR 0 3
51274: PUSH
51275: EMPTY
51276: ST_TO_ADDR
// for un in units do
51277: LD_ADDR_VAR 0 4
51281: PUSH
51282: LD_VAR 0 1
51286: PUSH
51287: FOR_IN
51288: IFFALSE 51363
// if GetClass ( un ) = class then
51290: LD_VAR 0 4
51294: PPUSH
51295: CALL_OW 257
51299: PUSH
51300: LD_VAR 0 2
51304: EQUAL
51305: IFFALSE 51332
// result := Insert ( result , 1 , un ) else
51307: LD_ADDR_VAR 0 3
51311: PUSH
51312: LD_VAR 0 3
51316: PPUSH
51317: LD_INT 1
51319: PPUSH
51320: LD_VAR 0 4
51324: PPUSH
51325: CALL_OW 2
51329: ST_TO_ADDR
51330: GO 51361
// result := Replace ( result , result + 1 , un ) ;
51332: LD_ADDR_VAR 0 3
51336: PUSH
51337: LD_VAR 0 3
51341: PPUSH
51342: LD_VAR 0 3
51346: PUSH
51347: LD_INT 1
51349: PLUS
51350: PPUSH
51351: LD_VAR 0 4
51355: PPUSH
51356: CALL_OW 1
51360: ST_TO_ADDR
51361: GO 51287
51363: POP
51364: POP
// end ;
51365: LD_VAR 0 3
51369: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51370: LD_INT 0
51372: PPUSH
51373: PPUSH
51374: PPUSH
51375: PPUSH
51376: PPUSH
51377: PPUSH
51378: PPUSH
// result := [ ] ;
51379: LD_ADDR_VAR 0 4
51383: PUSH
51384: EMPTY
51385: ST_TO_ADDR
// if x - r < 0 then
51386: LD_VAR 0 1
51390: PUSH
51391: LD_VAR 0 3
51395: MINUS
51396: PUSH
51397: LD_INT 0
51399: LESS
51400: IFFALSE 51412
// min_x := 0 else
51402: LD_ADDR_VAR 0 8
51406: PUSH
51407: LD_INT 0
51409: ST_TO_ADDR
51410: GO 51428
// min_x := x - r ;
51412: LD_ADDR_VAR 0 8
51416: PUSH
51417: LD_VAR 0 1
51421: PUSH
51422: LD_VAR 0 3
51426: MINUS
51427: ST_TO_ADDR
// if y - r < 0 then
51428: LD_VAR 0 2
51432: PUSH
51433: LD_VAR 0 3
51437: MINUS
51438: PUSH
51439: LD_INT 0
51441: LESS
51442: IFFALSE 51454
// min_y := 0 else
51444: LD_ADDR_VAR 0 7
51448: PUSH
51449: LD_INT 0
51451: ST_TO_ADDR
51452: GO 51470
// min_y := y - r ;
51454: LD_ADDR_VAR 0 7
51458: PUSH
51459: LD_VAR 0 2
51463: PUSH
51464: LD_VAR 0 3
51468: MINUS
51469: ST_TO_ADDR
// max_x := x + r ;
51470: LD_ADDR_VAR 0 9
51474: PUSH
51475: LD_VAR 0 1
51479: PUSH
51480: LD_VAR 0 3
51484: PLUS
51485: ST_TO_ADDR
// max_y := y + r ;
51486: LD_ADDR_VAR 0 10
51490: PUSH
51491: LD_VAR 0 2
51495: PUSH
51496: LD_VAR 0 3
51500: PLUS
51501: ST_TO_ADDR
// for _x = min_x to max_x do
51502: LD_ADDR_VAR 0 5
51506: PUSH
51507: DOUBLE
51508: LD_VAR 0 8
51512: DEC
51513: ST_TO_ADDR
51514: LD_VAR 0 9
51518: PUSH
51519: FOR_TO
51520: IFFALSE 51621
// for _y = min_y to max_y do
51522: LD_ADDR_VAR 0 6
51526: PUSH
51527: DOUBLE
51528: LD_VAR 0 7
51532: DEC
51533: ST_TO_ADDR
51534: LD_VAR 0 10
51538: PUSH
51539: FOR_TO
51540: IFFALSE 51617
// begin if not ValidHex ( _x , _y ) then
51542: LD_VAR 0 5
51546: PPUSH
51547: LD_VAR 0 6
51551: PPUSH
51552: CALL_OW 488
51556: NOT
51557: IFFALSE 51561
// continue ;
51559: GO 51539
// if GetResourceTypeXY ( _x , _y ) then
51561: LD_VAR 0 5
51565: PPUSH
51566: LD_VAR 0 6
51570: PPUSH
51571: CALL_OW 283
51575: IFFALSE 51615
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51577: LD_ADDR_VAR 0 4
51581: PUSH
51582: LD_VAR 0 4
51586: PPUSH
51587: LD_VAR 0 4
51591: PUSH
51592: LD_INT 1
51594: PLUS
51595: PPUSH
51596: LD_VAR 0 5
51600: PUSH
51601: LD_VAR 0 6
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PPUSH
51610: CALL_OW 1
51614: ST_TO_ADDR
// end ;
51615: GO 51539
51617: POP
51618: POP
51619: GO 51519
51621: POP
51622: POP
// end ;
51623: LD_VAR 0 4
51627: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
51628: LD_INT 0
51630: PPUSH
51631: PPUSH
51632: PPUSH
51633: PPUSH
51634: PPUSH
51635: PPUSH
51636: PPUSH
51637: PPUSH
// if not units then
51638: LD_VAR 0 1
51642: NOT
51643: IFFALSE 51647
// exit ;
51645: GO 52179
// result := UnitFilter ( units , [ f_ok ] ) ;
51647: LD_ADDR_VAR 0 3
51651: PUSH
51652: LD_VAR 0 1
51656: PPUSH
51657: LD_INT 50
51659: PUSH
51660: EMPTY
51661: LIST
51662: PPUSH
51663: CALL_OW 72
51667: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
51668: LD_ADDR_VAR 0 8
51672: PUSH
51673: LD_VAR 0 1
51677: PUSH
51678: LD_INT 1
51680: ARRAY
51681: PPUSH
51682: CALL_OW 255
51686: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51687: LD_ADDR_VAR 0 10
51691: PUSH
51692: LD_INT 29
51694: PUSH
51695: LD_INT 91
51697: PUSH
51698: LD_INT 49
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: ST_TO_ADDR
// if not result then
51706: LD_VAR 0 3
51710: NOT
51711: IFFALSE 51715
// exit ;
51713: GO 52179
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51715: LD_ADDR_VAR 0 5
51719: PUSH
51720: LD_INT 81
51722: PUSH
51723: LD_VAR 0 8
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PPUSH
51732: CALL_OW 69
51736: ST_TO_ADDR
// for i in result do
51737: LD_ADDR_VAR 0 4
51741: PUSH
51742: LD_VAR 0 3
51746: PUSH
51747: FOR_IN
51748: IFFALSE 52177
// begin tag := GetTag ( i ) + 1 ;
51750: LD_ADDR_VAR 0 9
51754: PUSH
51755: LD_VAR 0 4
51759: PPUSH
51760: CALL_OW 110
51764: PUSH
51765: LD_INT 1
51767: PLUS
51768: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51769: LD_ADDR_VAR 0 7
51773: PUSH
51774: LD_VAR 0 4
51778: PPUSH
51779: CALL_OW 250
51783: PPUSH
51784: LD_VAR 0 4
51788: PPUSH
51789: CALL_OW 251
51793: PPUSH
51794: LD_INT 4
51796: PPUSH
51797: CALL 51370 0 3
51801: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51802: LD_VAR 0 4
51806: PPUSH
51807: CALL_OW 247
51811: PUSH
51812: LD_INT 2
51814: EQUAL
51815: IFFALSE 51827
51817: PUSH
51818: LD_VAR 0 7
51822: PUSH
51823: LD_INT 2
51825: GREATER
51826: AND
51827: IFFALSE 51847
51829: PUSH
51830: LD_VAR 0 4
51834: PPUSH
51835: CALL_OW 264
51839: PUSH
51840: LD_VAR 0 10
51844: IN
51845: NOT
51846: AND
51847: IFFALSE 51886
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51849: LD_VAR 0 4
51853: PPUSH
51854: LD_VAR 0 7
51858: PUSH
51859: LD_INT 1
51861: ARRAY
51862: PUSH
51863: LD_INT 1
51865: ARRAY
51866: PPUSH
51867: LD_VAR 0 7
51871: PUSH
51872: LD_INT 1
51874: ARRAY
51875: PUSH
51876: LD_INT 2
51878: ARRAY
51879: PPUSH
51880: CALL_OW 116
51884: GO 52175
// if path > tag then
51886: LD_VAR 0 2
51890: PUSH
51891: LD_VAR 0 9
51895: GREATER
51896: IFFALSE 52104
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51898: LD_ADDR_VAR 0 6
51902: PUSH
51903: LD_VAR 0 5
51907: PPUSH
51908: LD_INT 91
51910: PUSH
51911: LD_VAR 0 4
51915: PUSH
51916: LD_INT 8
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: LIST
51923: PPUSH
51924: CALL_OW 72
51928: ST_TO_ADDR
// if nearEnemy then
51929: LD_VAR 0 6
51933: IFFALSE 52002
// begin if GetWeapon ( i ) = ru_time_lapser then
51935: LD_VAR 0 4
51939: PPUSH
51940: CALL_OW 264
51944: PUSH
51945: LD_INT 49
51947: EQUAL
51948: IFFALSE 51976
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51950: LD_VAR 0 4
51954: PPUSH
51955: LD_VAR 0 6
51959: PPUSH
51960: LD_VAR 0 4
51964: PPUSH
51965: CALL_OW 74
51969: PPUSH
51970: CALL_OW 112
51974: GO 52000
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51976: LD_VAR 0 4
51980: PPUSH
51981: LD_VAR 0 6
51985: PPUSH
51986: LD_VAR 0 4
51990: PPUSH
51991: CALL_OW 74
51995: PPUSH
51996: CALL 53260 0 2
// end else
52000: GO 52102
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52002: LD_VAR 0 4
52006: PPUSH
52007: LD_VAR 0 2
52011: PUSH
52012: LD_VAR 0 9
52016: ARRAY
52017: PUSH
52018: LD_INT 1
52020: ARRAY
52021: PPUSH
52022: LD_VAR 0 2
52026: PUSH
52027: LD_VAR 0 9
52031: ARRAY
52032: PUSH
52033: LD_INT 2
52035: ARRAY
52036: PPUSH
52037: CALL_OW 297
52041: PUSH
52042: LD_INT 6
52044: GREATER
52045: IFFALSE 52088
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52047: LD_VAR 0 4
52051: PPUSH
52052: LD_VAR 0 2
52056: PUSH
52057: LD_VAR 0 9
52061: ARRAY
52062: PUSH
52063: LD_INT 1
52065: ARRAY
52066: PPUSH
52067: LD_VAR 0 2
52071: PUSH
52072: LD_VAR 0 9
52076: ARRAY
52077: PUSH
52078: LD_INT 2
52080: ARRAY
52081: PPUSH
52082: CALL_OW 114
52086: GO 52102
// SetTag ( i , tag ) ;
52088: LD_VAR 0 4
52092: PPUSH
52093: LD_VAR 0 9
52097: PPUSH
52098: CALL_OW 109
// end else
52102: GO 52175
// if enemy then
52104: LD_VAR 0 5
52108: IFFALSE 52175
// begin if GetWeapon ( i ) = ru_time_lapser then
52110: LD_VAR 0 4
52114: PPUSH
52115: CALL_OW 264
52119: PUSH
52120: LD_INT 49
52122: EQUAL
52123: IFFALSE 52151
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52125: LD_VAR 0 4
52129: PPUSH
52130: LD_VAR 0 5
52134: PPUSH
52135: LD_VAR 0 4
52139: PPUSH
52140: CALL_OW 74
52144: PPUSH
52145: CALL_OW 112
52149: GO 52175
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52151: LD_VAR 0 4
52155: PPUSH
52156: LD_VAR 0 5
52160: PPUSH
52161: LD_VAR 0 4
52165: PPUSH
52166: CALL_OW 74
52170: PPUSH
52171: CALL 53260 0 2
// end ; end ;
52175: GO 51747
52177: POP
52178: POP
// end ;
52179: LD_VAR 0 3
52183: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52184: LD_INT 0
52186: PPUSH
52187: PPUSH
52188: PPUSH
// if not unit or IsInUnit ( unit ) then
52189: LD_VAR 0 1
52193: NOT
52194: IFTRUE 52207
52196: PUSH
52197: LD_VAR 0 1
52201: PPUSH
52202: CALL_OW 310
52206: OR
52207: IFFALSE 52211
// exit ;
52209: GO 52302
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52211: LD_ADDR_VAR 0 4
52215: PUSH
52216: LD_VAR 0 1
52220: PPUSH
52221: CALL_OW 250
52225: PPUSH
52226: LD_VAR 0 2
52230: PPUSH
52231: LD_INT 1
52233: PPUSH
52234: CALL_OW 272
52238: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52239: LD_ADDR_VAR 0 5
52243: PUSH
52244: LD_VAR 0 1
52248: PPUSH
52249: CALL_OW 251
52253: PPUSH
52254: LD_VAR 0 2
52258: PPUSH
52259: LD_INT 1
52261: PPUSH
52262: CALL_OW 273
52266: ST_TO_ADDR
// if ValidHex ( x , y ) then
52267: LD_VAR 0 4
52271: PPUSH
52272: LD_VAR 0 5
52276: PPUSH
52277: CALL_OW 488
52281: IFFALSE 52302
// ComTurnXY ( unit , x , y ) ;
52283: LD_VAR 0 1
52287: PPUSH
52288: LD_VAR 0 4
52292: PPUSH
52293: LD_VAR 0 5
52297: PPUSH
52298: CALL_OW 118
// end ;
52302: LD_VAR 0 3
52306: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52307: LD_INT 0
52309: PPUSH
52310: PPUSH
// result := false ;
52311: LD_ADDR_VAR 0 3
52315: PUSH
52316: LD_INT 0
52318: ST_TO_ADDR
// if not units then
52319: LD_VAR 0 2
52323: NOT
52324: IFFALSE 52328
// exit ;
52326: GO 52373
// for i in units do
52328: LD_ADDR_VAR 0 4
52332: PUSH
52333: LD_VAR 0 2
52337: PUSH
52338: FOR_IN
52339: IFFALSE 52371
// if See ( side , i ) then
52341: LD_VAR 0 1
52345: PPUSH
52346: LD_VAR 0 4
52350: PPUSH
52351: CALL_OW 292
52355: IFFALSE 52369
// begin result := true ;
52357: LD_ADDR_VAR 0 3
52361: PUSH
52362: LD_INT 1
52364: ST_TO_ADDR
// exit ;
52365: POP
52366: POP
52367: GO 52373
// end ;
52369: GO 52338
52371: POP
52372: POP
// end ;
52373: LD_VAR 0 3
52377: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52378: LD_INT 0
52380: PPUSH
52381: PPUSH
52382: PPUSH
52383: PPUSH
// if not unit or not points then
52384: LD_VAR 0 1
52388: NOT
52389: IFTRUE 52398
52391: PUSH
52392: LD_VAR 0 2
52396: NOT
52397: OR
52398: IFFALSE 52402
// exit ;
52400: GO 52492
// dist := 99999 ;
52402: LD_ADDR_VAR 0 5
52406: PUSH
52407: LD_INT 99999
52409: ST_TO_ADDR
// for i in points do
52410: LD_ADDR_VAR 0 4
52414: PUSH
52415: LD_VAR 0 2
52419: PUSH
52420: FOR_IN
52421: IFFALSE 52490
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52423: LD_ADDR_VAR 0 6
52427: PUSH
52428: LD_VAR 0 1
52432: PPUSH
52433: LD_VAR 0 4
52437: PUSH
52438: LD_INT 1
52440: ARRAY
52441: PPUSH
52442: LD_VAR 0 4
52446: PUSH
52447: LD_INT 2
52449: ARRAY
52450: PPUSH
52451: CALL_OW 297
52455: ST_TO_ADDR
// if tmpDist < dist then
52456: LD_VAR 0 6
52460: PUSH
52461: LD_VAR 0 5
52465: LESS
52466: IFFALSE 52488
// begin result := i ;
52468: LD_ADDR_VAR 0 3
52472: PUSH
52473: LD_VAR 0 4
52477: ST_TO_ADDR
// dist := tmpDist ;
52478: LD_ADDR_VAR 0 5
52482: PUSH
52483: LD_VAR 0 6
52487: ST_TO_ADDR
// end ; end ;
52488: GO 52420
52490: POP
52491: POP
// end ;
52492: LD_VAR 0 3
52496: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52497: LD_INT 0
52499: PPUSH
// uc_side := side ;
52500: LD_ADDR_OWVAR 20
52504: PUSH
52505: LD_VAR 0 1
52509: ST_TO_ADDR
// uc_nation := 3 ;
52510: LD_ADDR_OWVAR 21
52514: PUSH
52515: LD_INT 3
52517: ST_TO_ADDR
// vc_chassis := 25 ;
52518: LD_ADDR_OWVAR 37
52522: PUSH
52523: LD_INT 25
52525: ST_TO_ADDR
// vc_engine := engine_siberite ;
52526: LD_ADDR_OWVAR 39
52530: PUSH
52531: LD_INT 3
52533: ST_TO_ADDR
// vc_control := control_computer ;
52534: LD_ADDR_OWVAR 38
52538: PUSH
52539: LD_INT 3
52541: ST_TO_ADDR
// vc_weapon := 59 ;
52542: LD_ADDR_OWVAR 40
52546: PUSH
52547: LD_INT 59
52549: ST_TO_ADDR
// result := CreateVehicle ;
52550: LD_ADDR_VAR 0 5
52554: PUSH
52555: CALL_OW 45
52559: ST_TO_ADDR
// SetDir ( result , d ) ;
52560: LD_VAR 0 5
52564: PPUSH
52565: LD_VAR 0 4
52569: PPUSH
52570: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
52574: LD_VAR 0 5
52578: PPUSH
52579: LD_VAR 0 2
52583: PPUSH
52584: LD_VAR 0 3
52588: PPUSH
52589: LD_INT 0
52591: PPUSH
52592: CALL_OW 48
// end ;
52596: LD_VAR 0 5
52600: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
52601: LD_INT 0
52603: PPUSH
52604: PPUSH
52605: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
52606: LD_ADDR_VAR 0 2
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
52629: LD_VAR 0 1
52633: NOT
52634: IFTRUE 52667
52636: PUSH
52637: LD_VAR 0 1
52641: PPUSH
52642: CALL_OW 264
52646: PUSH
52647: LD_INT 12
52649: PUSH
52650: LD_INT 51
52652: PUSH
52653: LD_INT 32
52655: PUSH
52656: LD_INT 89
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: IN
52665: NOT
52666: OR
52667: IFFALSE 52671
// exit ;
52669: GO 52769
// for i := 1 to 3 do
52671: LD_ADDR_VAR 0 3
52675: PUSH
52676: DOUBLE
52677: LD_INT 1
52679: DEC
52680: ST_TO_ADDR
52681: LD_INT 3
52683: PUSH
52684: FOR_TO
52685: IFFALSE 52767
// begin tmp := GetCargo ( cargo , i ) ;
52687: LD_ADDR_VAR 0 4
52691: PUSH
52692: LD_VAR 0 1
52696: PPUSH
52697: LD_VAR 0 3
52701: PPUSH
52702: CALL_OW 289
52706: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52707: LD_ADDR_VAR 0 2
52711: PUSH
52712: LD_VAR 0 2
52716: PPUSH
52717: LD_VAR 0 3
52721: PPUSH
52722: LD_VAR 0 4
52726: PPUSH
52727: CALL_OW 1
52731: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52732: LD_ADDR_VAR 0 2
52736: PUSH
52737: LD_VAR 0 2
52741: PPUSH
52742: LD_INT 4
52744: PPUSH
52745: LD_VAR 0 2
52749: PUSH
52750: LD_INT 4
52752: ARRAY
52753: PUSH
52754: LD_VAR 0 4
52758: PLUS
52759: PPUSH
52760: CALL_OW 1
52764: ST_TO_ADDR
// end ;
52765: GO 52684
52767: POP
52768: POP
// end ;
52769: LD_VAR 0 2
52773: RET
// export function Length ( array ) ; begin
52774: LD_INT 0
52776: PPUSH
// result := array + 0 ;
52777: LD_ADDR_VAR 0 2
52781: PUSH
52782: LD_VAR 0 1
52786: PUSH
52787: LD_INT 0
52789: PLUS
52790: ST_TO_ADDR
// end ;
52791: LD_VAR 0 2
52795: RET
// export function PrepareArray ( array ) ; begin
52796: LD_INT 0
52798: PPUSH
// result := array diff 0 ;
52799: LD_ADDR_VAR 0 2
52803: PUSH
52804: LD_VAR 0 1
52808: PUSH
52809: LD_INT 0
52811: DIFF
52812: ST_TO_ADDR
// if not result [ 1 ] then
52813: LD_VAR 0 2
52817: PUSH
52818: LD_INT 1
52820: ARRAY
52821: NOT
52822: IFFALSE 52842
// result := Delete ( result , 1 ) ;
52824: LD_ADDR_VAR 0 2
52828: PUSH
52829: LD_VAR 0 2
52833: PPUSH
52834: LD_INT 1
52836: PPUSH
52837: CALL_OW 3
52841: ST_TO_ADDR
// end ;
52842: LD_VAR 0 2
52846: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52847: LD_INT 0
52849: PPUSH
52850: PPUSH
52851: PPUSH
52852: PPUSH
// sibRocketRange := 25 ;
52853: LD_ADDR_VAR 0 6
52857: PUSH
52858: LD_INT 25
52860: ST_TO_ADDR
// result := false ;
52861: LD_ADDR_VAR 0 4
52865: PUSH
52866: LD_INT 0
52868: ST_TO_ADDR
// for i := 0 to 5 do
52869: LD_ADDR_VAR 0 5
52873: PUSH
52874: DOUBLE
52875: LD_INT 0
52877: DEC
52878: ST_TO_ADDR
52879: LD_INT 5
52881: PUSH
52882: FOR_TO
52883: IFFALSE 52950
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52885: LD_VAR 0 1
52889: PPUSH
52890: LD_VAR 0 5
52894: PPUSH
52895: LD_VAR 0 6
52899: PPUSH
52900: CALL_OW 272
52904: PPUSH
52905: LD_VAR 0 2
52909: PPUSH
52910: LD_VAR 0 5
52914: PPUSH
52915: LD_VAR 0 6
52919: PPUSH
52920: CALL_OW 273
52924: PPUSH
52925: LD_VAR 0 3
52929: PPUSH
52930: CALL_OW 309
52934: IFFALSE 52948
// begin result := true ;
52936: LD_ADDR_VAR 0 4
52940: PUSH
52941: LD_INT 1
52943: ST_TO_ADDR
// exit ;
52944: POP
52945: POP
52946: GO 52952
// end ;
52948: GO 52882
52950: POP
52951: POP
// end ;
52952: LD_VAR 0 4
52956: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52957: LD_INT 0
52959: PPUSH
52960: PPUSH
52961: PPUSH
// if btype = b_depot then
52962: LD_VAR 0 2
52966: PUSH
52967: LD_INT 0
52969: EQUAL
52970: IFFALSE 52982
// begin result := true ;
52972: LD_ADDR_VAR 0 3
52976: PUSH
52977: LD_INT 1
52979: ST_TO_ADDR
// exit ;
52980: GO 53102
// end ; pom := GetBase ( depot ) ;
52982: LD_ADDR_VAR 0 4
52986: PUSH
52987: LD_VAR 0 1
52991: PPUSH
52992: CALL_OW 274
52996: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52997: LD_ADDR_VAR 0 5
53001: PUSH
53002: LD_VAR 0 2
53006: PPUSH
53007: LD_VAR 0 1
53011: PPUSH
53012: CALL_OW 248
53016: PPUSH
53017: CALL_OW 450
53021: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53022: LD_ADDR_VAR 0 3
53026: PUSH
53027: LD_VAR 0 4
53031: PPUSH
53032: LD_INT 1
53034: PPUSH
53035: CALL_OW 275
53039: PUSH
53040: LD_VAR 0 5
53044: PUSH
53045: LD_INT 1
53047: ARRAY
53048: GREATEREQUAL
53049: IFFALSE 53075
53051: PUSH
53052: LD_VAR 0 4
53056: PPUSH
53057: LD_INT 2
53059: PPUSH
53060: CALL_OW 275
53064: PUSH
53065: LD_VAR 0 5
53069: PUSH
53070: LD_INT 2
53072: ARRAY
53073: GREATEREQUAL
53074: AND
53075: IFFALSE 53101
53077: PUSH
53078: LD_VAR 0 4
53082: PPUSH
53083: LD_INT 3
53085: PPUSH
53086: CALL_OW 275
53090: PUSH
53091: LD_VAR 0 5
53095: PUSH
53096: LD_INT 3
53098: ARRAY
53099: GREATEREQUAL
53100: AND
53101: ST_TO_ADDR
// end ;
53102: LD_VAR 0 3
53106: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53107: LD_INT 0
53109: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53110: LD_VAR 0 1
53114: PPUSH
53115: LD_VAR 0 2
53119: PPUSH
53120: LD_INT 0
53122: PPUSH
53123: LD_INT 0
53125: PPUSH
53126: LD_INT 1
53128: PPUSH
53129: LD_INT 0
53131: PPUSH
53132: CALL_OW 587
// end ;
53136: LD_VAR 0 3
53140: RET
// export function CenterOnNow ( unit ) ; begin
53141: LD_INT 0
53143: PPUSH
// result := IsInUnit ( unit ) ;
53144: LD_ADDR_VAR 0 2
53148: PUSH
53149: LD_VAR 0 1
53153: PPUSH
53154: CALL_OW 310
53158: ST_TO_ADDR
// if not result then
53159: LD_VAR 0 2
53163: NOT
53164: IFFALSE 53176
// result := unit ;
53166: LD_ADDR_VAR 0 2
53170: PUSH
53171: LD_VAR 0 1
53175: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53176: LD_VAR 0 1
53180: PPUSH
53181: CALL_OW 87
// end ;
53185: LD_VAR 0 2
53189: RET
// export function ComMoveHex ( unit , hex ) ; begin
53190: LD_INT 0
53192: PPUSH
// if not hex then
53193: LD_VAR 0 2
53197: NOT
53198: IFFALSE 53202
// exit ;
53200: GO 53255
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53202: LD_VAR 0 2
53206: PUSH
53207: LD_INT 1
53209: ARRAY
53210: PPUSH
53211: LD_VAR 0 2
53215: PUSH
53216: LD_INT 2
53218: ARRAY
53219: PPUSH
53220: CALL_OW 428
53224: IFFALSE 53228
// exit ;
53226: GO 53255
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53228: LD_VAR 0 1
53232: PPUSH
53233: LD_VAR 0 2
53237: PUSH
53238: LD_INT 1
53240: ARRAY
53241: PPUSH
53242: LD_VAR 0 2
53246: PUSH
53247: LD_INT 2
53249: ARRAY
53250: PPUSH
53251: CALL_OW 111
// end ;
53255: LD_VAR 0 3
53259: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53260: LD_INT 0
53262: PPUSH
53263: PPUSH
53264: PPUSH
// if not unit or not enemy then
53265: LD_VAR 0 1
53269: NOT
53270: IFTRUE 53279
53272: PUSH
53273: LD_VAR 0 2
53277: NOT
53278: OR
53279: IFFALSE 53283
// exit ;
53281: GO 53409
// x := GetX ( enemy ) ;
53283: LD_ADDR_VAR 0 4
53287: PUSH
53288: LD_VAR 0 2
53292: PPUSH
53293: CALL_OW 250
53297: ST_TO_ADDR
// y := GetY ( enemy ) ;
53298: LD_ADDR_VAR 0 5
53302: PUSH
53303: LD_VAR 0 2
53307: PPUSH
53308: CALL_OW 251
53312: ST_TO_ADDR
// if ValidHex ( x , y ) then
53313: LD_VAR 0 4
53317: PPUSH
53318: LD_VAR 0 5
53322: PPUSH
53323: CALL_OW 488
53327: IFFALSE 53409
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
53329: LD_VAR 0 2
53333: PPUSH
53334: CALL_OW 247
53338: PUSH
53339: LD_INT 3
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: IN
53349: IFTRUE 53372
53351: PUSH
53352: LD_VAR 0 1
53356: PPUSH
53357: CALL_OW 255
53361: PPUSH
53362: LD_VAR 0 2
53366: PPUSH
53367: CALL_OW 292
53371: OR
53372: IFFALSE 53390
// ComAttackUnit ( unit , enemy ) else
53374: LD_VAR 0 1
53378: PPUSH
53379: LD_VAR 0 2
53383: PPUSH
53384: CALL_OW 115
53388: GO 53409
// ComAgressiveMove ( unit , x , y ) ;
53390: LD_VAR 0 1
53394: PPUSH
53395: LD_VAR 0 4
53399: PPUSH
53400: LD_VAR 0 5
53404: PPUSH
53405: CALL_OW 114
// end ;
53409: LD_VAR 0 3
53413: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
53414: LD_INT 0
53416: PPUSH
53417: PPUSH
53418: PPUSH
// list := AreaToList ( area , 0 ) ;
53419: LD_ADDR_VAR 0 5
53423: PUSH
53424: LD_VAR 0 1
53428: PPUSH
53429: LD_INT 0
53431: PPUSH
53432: CALL_OW 517
53436: ST_TO_ADDR
// if not list then
53437: LD_VAR 0 5
53441: NOT
53442: IFFALSE 53446
// exit ;
53444: GO 53576
// if all then
53446: LD_VAR 0 2
53450: IFFALSE 53538
// begin for i := 1 to list [ 1 ] do
53452: LD_ADDR_VAR 0 4
53456: PUSH
53457: DOUBLE
53458: LD_INT 1
53460: DEC
53461: ST_TO_ADDR
53462: LD_VAR 0 5
53466: PUSH
53467: LD_INT 1
53469: ARRAY
53470: PUSH
53471: FOR_TO
53472: IFFALSE 53534
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
53474: LD_ADDR_VAR 0 3
53478: PUSH
53479: LD_VAR 0 3
53483: PPUSH
53484: LD_VAR 0 3
53488: PUSH
53489: LD_INT 1
53491: PLUS
53492: PPUSH
53493: LD_VAR 0 5
53497: PUSH
53498: LD_INT 1
53500: ARRAY
53501: PUSH
53502: LD_VAR 0 4
53506: ARRAY
53507: PUSH
53508: LD_VAR 0 5
53512: PUSH
53513: LD_INT 2
53515: ARRAY
53516: PUSH
53517: LD_VAR 0 4
53521: ARRAY
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PPUSH
53527: CALL_OW 1
53531: ST_TO_ADDR
53532: GO 53471
53534: POP
53535: POP
// exit ;
53536: GO 53576
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
53538: LD_ADDR_VAR 0 3
53542: PUSH
53543: LD_VAR 0 5
53547: PUSH
53548: LD_INT 1
53550: ARRAY
53551: PUSH
53552: LD_INT 1
53554: ARRAY
53555: PUSH
53556: LD_VAR 0 5
53560: PUSH
53561: LD_INT 2
53563: ARRAY
53564: PUSH
53565: LD_INT 1
53567: ARRAY
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: EMPTY
53574: LIST
53575: ST_TO_ADDR
// end ;
53576: LD_VAR 0 3
53580: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
53581: LD_INT 0
53583: PPUSH
53584: PPUSH
// list := AreaToList ( area , 0 ) ;
53585: LD_ADDR_VAR 0 4
53589: PUSH
53590: LD_VAR 0 1
53594: PPUSH
53595: LD_INT 0
53597: PPUSH
53598: CALL_OW 517
53602: ST_TO_ADDR
// if not list then
53603: LD_VAR 0 4
53607: NOT
53608: IFFALSE 53612
// exit ;
53610: GO 53653
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
53612: LD_ADDR_VAR 0 3
53616: PUSH
53617: LD_VAR 0 4
53621: PUSH
53622: LD_INT 1
53624: ARRAY
53625: PUSH
53626: LD_INT 1
53628: ARRAY
53629: PUSH
53630: LD_VAR 0 4
53634: PUSH
53635: LD_INT 2
53637: ARRAY
53638: PUSH
53639: LD_INT 1
53641: ARRAY
53642: PUSH
53643: LD_VAR 0 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: LIST
53652: ST_TO_ADDR
// end ;
53653: LD_VAR 0 3
53657: RET
// export function First ( array ) ; begin
53658: LD_INT 0
53660: PPUSH
// if not array then
53661: LD_VAR 0 1
53665: NOT
53666: IFFALSE 53670
// exit ;
53668: GO 53684
// result := array [ 1 ] ;
53670: LD_ADDR_VAR 0 2
53674: PUSH
53675: LD_VAR 0 1
53679: PUSH
53680: LD_INT 1
53682: ARRAY
53683: ST_TO_ADDR
// end ;
53684: LD_VAR 0 2
53688: RET
// export function Last ( array ) ; begin
53689: LD_INT 0
53691: PPUSH
// if not array then
53692: LD_VAR 0 1
53696: NOT
53697: IFFALSE 53701
// exit ;
53699: GO 53717
// result := array [ array ] ;
53701: LD_ADDR_VAR 0 2
53705: PUSH
53706: LD_VAR 0 1
53710: PUSH
53711: LD_VAR 0 1
53715: ARRAY
53716: ST_TO_ADDR
// end ;
53717: LD_VAR 0 2
53721: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53722: LD_INT 0
53724: PPUSH
53725: PPUSH
// result := [ ] ;
53726: LD_ADDR_VAR 0 5
53730: PUSH
53731: EMPTY
53732: ST_TO_ADDR
// if not array then
53733: LD_VAR 0 1
53737: NOT
53738: IFFALSE 53742
// exit ;
53740: GO 53854
// for i := 1 to array do
53742: LD_ADDR_VAR 0 6
53746: PUSH
53747: DOUBLE
53748: LD_INT 1
53750: DEC
53751: ST_TO_ADDR
53752: LD_VAR 0 1
53756: PUSH
53757: FOR_TO
53758: IFFALSE 53852
// if array [ i ] [ index ] = value then
53760: LD_VAR 0 1
53764: PUSH
53765: LD_VAR 0 6
53769: ARRAY
53770: PUSH
53771: LD_VAR 0 2
53775: ARRAY
53776: PUSH
53777: LD_VAR 0 3
53781: EQUAL
53782: IFFALSE 53850
// begin if indexColumn then
53784: LD_VAR 0 4
53788: IFFALSE 53824
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53790: LD_ADDR_VAR 0 5
53794: PUSH
53795: LD_VAR 0 5
53799: PPUSH
53800: LD_VAR 0 1
53804: PUSH
53805: LD_VAR 0 6
53809: ARRAY
53810: PUSH
53811: LD_VAR 0 4
53815: ARRAY
53816: PPUSH
53817: CALL 48862 0 2
53821: ST_TO_ADDR
53822: GO 53850
// result := Join ( result , array [ i ] ) ;
53824: LD_ADDR_VAR 0 5
53828: PUSH
53829: LD_VAR 0 5
53833: PPUSH
53834: LD_VAR 0 1
53838: PUSH
53839: LD_VAR 0 6
53843: ARRAY
53844: PPUSH
53845: CALL 48862 0 2
53849: ST_TO_ADDR
// end ;
53850: GO 53757
53852: POP
53853: POP
// end ;
53854: LD_VAR 0 5
53858: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53859: LD_INT 0
53861: PPUSH
// if not vehicles or not parkingPoint then
53862: LD_VAR 0 1
53866: NOT
53867: IFTRUE 53876
53869: PUSH
53870: LD_VAR 0 2
53874: NOT
53875: OR
53876: IFFALSE 53880
// exit ;
53878: GO 53978
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53880: LD_ADDR_VAR 0 1
53884: PUSH
53885: LD_VAR 0 1
53889: PPUSH
53890: LD_INT 50
53892: PUSH
53893: EMPTY
53894: LIST
53895: PUSH
53896: LD_INT 3
53898: PUSH
53899: LD_INT 92
53901: PUSH
53902: LD_VAR 0 2
53906: PUSH
53907: LD_INT 1
53909: ARRAY
53910: PUSH
53911: LD_VAR 0 2
53915: PUSH
53916: LD_INT 2
53918: ARRAY
53919: PUSH
53920: LD_INT 8
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PPUSH
53937: CALL_OW 72
53941: ST_TO_ADDR
// if not vehicles then
53942: LD_VAR 0 1
53946: NOT
53947: IFFALSE 53951
// exit ;
53949: GO 53978
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53951: LD_VAR 0 1
53955: PPUSH
53956: LD_VAR 0 2
53960: PUSH
53961: LD_INT 1
53963: ARRAY
53964: PPUSH
53965: LD_VAR 0 2
53969: PUSH
53970: LD_INT 2
53972: ARRAY
53973: PPUSH
53974: CALL_OW 111
// end ;
53978: LD_VAR 0 3
53982: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53983: LD_INT 0
53985: PPUSH
53986: PPUSH
53987: PPUSH
// if not side or not area then
53988: LD_VAR 0 1
53992: NOT
53993: IFTRUE 54002
53995: PUSH
53996: LD_VAR 0 2
54000: NOT
54001: OR
54002: IFFALSE 54006
// exit ;
54004: GO 54125
// tmp := AreaToList ( area , 0 ) ;
54006: LD_ADDR_VAR 0 5
54010: PUSH
54011: LD_VAR 0 2
54015: PPUSH
54016: LD_INT 0
54018: PPUSH
54019: CALL_OW 517
54023: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54024: LD_ADDR_VAR 0 4
54028: PUSH
54029: DOUBLE
54030: LD_INT 1
54032: DEC
54033: ST_TO_ADDR
54034: LD_VAR 0 5
54038: PUSH
54039: LD_INT 1
54041: ARRAY
54042: PUSH
54043: FOR_TO
54044: IFFALSE 54123
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54046: LD_VAR 0 5
54050: PUSH
54051: LD_INT 1
54053: ARRAY
54054: PUSH
54055: LD_VAR 0 4
54059: ARRAY
54060: PPUSH
54061: LD_VAR 0 5
54065: PUSH
54066: LD_INT 2
54068: ARRAY
54069: PUSH
54070: LD_VAR 0 4
54074: ARRAY
54075: PPUSH
54076: CALL_OW 351
54080: IFFALSE 54121
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54082: LD_VAR 0 5
54086: PUSH
54087: LD_INT 1
54089: ARRAY
54090: PUSH
54091: LD_VAR 0 4
54095: ARRAY
54096: PPUSH
54097: LD_VAR 0 5
54101: PUSH
54102: LD_INT 2
54104: ARRAY
54105: PUSH
54106: LD_VAR 0 4
54110: ARRAY
54111: PPUSH
54112: LD_VAR 0 1
54116: PPUSH
54117: CALL_OW 244
// end ;
54121: GO 54043
54123: POP
54124: POP
// end ;
54125: LD_VAR 0 3
54129: RET
// export function UniqueArray ( array ) ; var i ; begin
54130: LD_INT 0
54132: PPUSH
54133: PPUSH
// result := [ ] ;
54134: LD_ADDR_VAR 0 2
54138: PUSH
54139: EMPTY
54140: ST_TO_ADDR
// if not array then
54141: LD_VAR 0 1
54145: NOT
54146: IFFALSE 54150
// exit ;
54148: GO 54211
// for i := 1 to array do
54150: LD_ADDR_VAR 0 3
54154: PUSH
54155: DOUBLE
54156: LD_INT 1
54158: DEC
54159: ST_TO_ADDR
54160: LD_VAR 0 1
54164: PUSH
54165: FOR_TO
54166: IFFALSE 54209
// if not array [ i ] in result then
54168: LD_VAR 0 1
54172: PUSH
54173: LD_VAR 0 3
54177: ARRAY
54178: PUSH
54179: LD_VAR 0 2
54183: IN
54184: NOT
54185: IFFALSE 54207
// result := Join ( result , i ) ;
54187: LD_ADDR_VAR 0 2
54191: PUSH
54192: LD_VAR 0 2
54196: PPUSH
54197: LD_VAR 0 3
54201: PPUSH
54202: CALL 48862 0 2
54206: ST_TO_ADDR
54207: GO 54165
54209: POP
54210: POP
// end ; end_of_file
54211: LD_VAR 0 2
54215: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54216: LD_VAR 0 1
54220: PUSH
54221: LD_INT 200
54223: DOUBLE
54224: GREATEREQUAL
54225: IFFALSE 54233
54227: LD_INT 299
54229: DOUBLE
54230: LESSEQUAL
54231: IFTRUE 54235
54233: GO 54267
54235: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54236: LD_VAR 0 1
54240: PPUSH
54241: LD_VAR 0 2
54245: PPUSH
54246: LD_VAR 0 3
54250: PPUSH
54251: LD_VAR 0 4
54255: PPUSH
54256: LD_VAR 0 5
54260: PPUSH
54261: CALL 55129 0 5
54265: GO 54344
54267: LD_INT 300
54269: DOUBLE
54270: GREATEREQUAL
54271: IFFALSE 54279
54273: LD_INT 399
54275: DOUBLE
54276: LESSEQUAL
54277: IFTRUE 54281
54279: GO 54343
54281: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54282: LD_VAR 0 1
54286: PPUSH
54287: LD_VAR 0 2
54291: PPUSH
54292: LD_VAR 0 3
54296: PPUSH
54297: LD_VAR 0 4
54301: PPUSH
54302: LD_VAR 0 5
54306: PPUSH
54307: LD_VAR 0 6
54311: PPUSH
54312: LD_VAR 0 7
54316: PPUSH
54317: LD_VAR 0 8
54321: PPUSH
54322: LD_VAR 0 9
54326: PPUSH
54327: LD_VAR 0 10
54331: PPUSH
54332: LD_VAR 0 11
54336: PPUSH
54337: CALL 63131 0 11
54341: GO 54344
54343: POP
// end ;
54344: PPOPN 11
54346: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54347: LD_VAR 0 1
54351: PPUSH
54352: LD_VAR 0 2
54356: PPUSH
54357: LD_VAR 0 3
54361: PPUSH
54362: LD_VAR 0 4
54366: PPUSH
54367: LD_VAR 0 5
54371: PPUSH
54372: CALL 54429 0 5
// end ; end_of_file
54376: PPOPN 5
54378: END
// export function SOS_UnitDestroyed ( un ) ; begin
54379: LD_INT 0
54381: PPUSH
// ComRadiation ( un ) ;
54382: LD_VAR 0 1
54386: PPUSH
54387: CALL 55549 0 1
// end ;
54391: LD_VAR 0 2
54395: RET
// export function SOS_UnitKamikazed ( un ) ; begin
54396: LD_INT 0
54398: PPUSH
// ComRadiation ( un ) ;
54399: LD_VAR 0 1
54403: PPUSH
54404: CALL 55549 0 1
// end ;
54408: LD_VAR 0 2
54412: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54413: LD_INT 0
54415: PPUSH
// end ;
54416: LD_VAR 0 4
54420: RET
// export function SOS_Command ( cmd ) ; begin
54421: LD_INT 0
54423: PPUSH
// end ;
54424: LD_VAR 0 2
54428: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54429: LD_INT 0
54431: PPUSH
// end ;
54432: LD_VAR 0 6
54436: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
54437: LD_INT 0
54439: PPUSH
54440: PPUSH
54441: PPUSH
54442: PPUSH
54443: PPUSH
// if not vehicle or not factory then
54444: LD_VAR 0 1
54448: NOT
54449: IFTRUE 54458
54451: PUSH
54452: LD_VAR 0 2
54456: NOT
54457: OR
54458: IFFALSE 54462
// exit ;
54460: GO 55124
// weapon := GetWeapon ( vehicle ) ;
54462: LD_ADDR_VAR 0 7
54466: PUSH
54467: LD_VAR 0 1
54471: PPUSH
54472: CALL_OW 264
54476: ST_TO_ADDR
// if weapon = ar_miner then
54477: LD_VAR 0 7
54481: PUSH
54482: LD_INT 81
54484: EQUAL
54485: IFFALSE 54542
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
54487: LD_ADDR_EXP 56
54491: PUSH
54492: LD_EXP 56
54496: PPUSH
54497: LD_EXP 56
54501: PUSH
54502: LD_INT 1
54504: PLUS
54505: PPUSH
54506: LD_VAR 0 1
54510: PPUSH
54511: CALL_OW 1
54515: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54516: LD_ADDR_EXP 57
54520: PUSH
54521: LD_EXP 57
54525: PPUSH
54526: LD_EXP 57
54530: PUSH
54531: LD_INT 1
54533: PLUS
54534: PPUSH
54535: EMPTY
54536: PPUSH
54537: CALL_OW 1
54541: ST_TO_ADDR
// end ; if not factoryWaypoints then
54542: LD_EXP 60
54546: NOT
54547: IFFALSE 54551
// exit ;
54549: GO 55124
// for i := 1 to Count ( factoryWaypoints ) do
54551: LD_ADDR_VAR 0 4
54555: PUSH
54556: DOUBLE
54557: LD_INT 1
54559: DEC
54560: ST_TO_ADDR
54561: LD_EXP 60
54565: PPUSH
54566: CALL 12896 0 1
54570: PUSH
54571: FOR_TO
54572: IFFALSE 55122
// if factoryWaypoints [ i ] [ 2 ] = factory then
54574: LD_EXP 60
54578: PUSH
54579: LD_VAR 0 4
54583: ARRAY
54584: PUSH
54585: LD_INT 2
54587: ARRAY
54588: PUSH
54589: LD_VAR 0 2
54593: EQUAL
54594: IFFALSE 55120
// begin if GetControl ( vehicle ) = control_manual then
54596: LD_VAR 0 1
54600: PPUSH
54601: CALL_OW 263
54605: PUSH
54606: LD_INT 1
54608: EQUAL
54609: IFFALSE 54973
// begin driver := IsDrivenBy ( vehicle ) ;
54611: LD_ADDR_VAR 0 5
54615: PUSH
54616: LD_VAR 0 1
54620: PPUSH
54621: CALL_OW 311
54625: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
54626: LD_VAR 0 5
54630: PUSH
54631: LD_EXP 61
54635: IN
54636: IFTRUE 54650
54638: PUSH
54639: LD_VAR 0 1
54643: PUSH
54644: LD_EXP 61
54648: IN
54649: OR
54650: IFFALSE 54656
// exit ;
54652: POP
54653: POP
54654: GO 55124
// if not HasTask ( driver ) then
54656: LD_VAR 0 5
54660: PPUSH
54661: CALL_OW 314
54665: NOT
54666: IFFALSE 54971
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
54668: LD_ADDR_EXP 61
54672: PUSH
54673: LD_EXP 61
54677: PPUSH
54678: LD_VAR 0 5
54682: PPUSH
54683: CALL 48862 0 2
54687: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
54688: LD_ADDR_EXP 61
54692: PUSH
54693: LD_EXP 61
54697: PPUSH
54698: LD_VAR 0 1
54702: PPUSH
54703: CALL 48862 0 2
54707: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54708: LD_ADDR_VAR 0 6
54712: PUSH
54713: LD_EXP 60
54717: PUSH
54718: LD_VAR 0 4
54722: ARRAY
54723: PUSH
54724: LD_INT 3
54726: ARRAY
54727: PPUSH
54728: LD_EXP 60
54732: PUSH
54733: LD_VAR 0 4
54737: ARRAY
54738: PUSH
54739: LD_INT 4
54741: ARRAY
54742: PPUSH
54743: CALL_OW 428
54747: ST_TO_ADDR
// if hex then
54748: LD_VAR 0 6
54752: IFFALSE 54770
// ComMoveUnit ( driver , hex ) else
54754: LD_VAR 0 5
54758: PPUSH
54759: LD_VAR 0 6
54763: PPUSH
54764: CALL_OW 112
54768: GO 54854
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54770: LD_VAR 0 1
54774: PPUSH
54775: LD_EXP 60
54779: PUSH
54780: LD_VAR 0 4
54784: ARRAY
54785: PUSH
54786: LD_INT 3
54788: ARRAY
54789: PPUSH
54790: LD_EXP 60
54794: PUSH
54795: LD_VAR 0 4
54799: ARRAY
54800: PUSH
54801: LD_INT 4
54803: ARRAY
54804: PPUSH
54805: CALL_OW 297
54809: PUSH
54810: LD_INT 0
54812: GREATER
54813: IFFALSE 54854
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54815: LD_VAR 0 5
54819: PPUSH
54820: LD_EXP 60
54824: PUSH
54825: LD_VAR 0 4
54829: ARRAY
54830: PUSH
54831: LD_INT 3
54833: ARRAY
54834: PPUSH
54835: LD_EXP 60
54839: PUSH
54840: LD_VAR 0 4
54844: ARRAY
54845: PUSH
54846: LD_INT 4
54848: ARRAY
54849: PPUSH
54850: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54854: LD_VAR 0 5
54858: PPUSH
54859: CALL_OW 181
// if Multiplayer then
54863: LD_OWVAR 4
54867: IFFALSE 54916
// begin repeat wait ( 10 ) ;
54869: LD_INT 10
54871: PPUSH
54872: CALL_OW 67
// until not IsInUnit ( driver ) ;
54876: LD_VAR 0 5
54880: PPUSH
54881: CALL_OW 310
54885: NOT
54886: IFFALSE 54869
// if not HasTask ( driver ) then
54888: LD_VAR 0 5
54892: PPUSH
54893: CALL_OW 314
54897: NOT
54898: IFFALSE 54914
// ComEnterUnit ( driver , factory ) ;
54900: LD_VAR 0 5
54904: PPUSH
54905: LD_VAR 0 2
54909: PPUSH
54910: CALL_OW 120
// end else
54914: GO 54930
// AddComEnterUnit ( driver , factory ) ;
54916: LD_VAR 0 5
54920: PPUSH
54921: LD_VAR 0 2
54925: PPUSH
54926: CALL_OW 180
// wait ( 0 0$1 ) ;
54930: LD_INT 35
54932: PPUSH
54933: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54937: LD_ADDR_EXP 61
54941: PUSH
54942: LD_EXP 61
54946: PUSH
54947: LD_VAR 0 5
54951: DIFF
54952: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54953: LD_ADDR_EXP 61
54957: PUSH
54958: LD_EXP 61
54962: PUSH
54963: LD_VAR 0 1
54967: DIFF
54968: ST_TO_ADDR
// break ;
54969: GO 55122
// end ; end else
54971: GO 55120
// if GetControl ( vehicle ) = control_remote then
54973: LD_VAR 0 1
54977: PPUSH
54978: CALL_OW 263
54982: PUSH
54983: LD_INT 2
54985: EQUAL
54986: IFFALSE 55072
// begin wait ( 0 0$2 ) ;
54988: LD_INT 70
54990: PPUSH
54991: CALL_OW 67
// repeat wait ( 10 ) ;
54995: LD_INT 10
54997: PPUSH
54998: CALL_OW 67
// Connect ( vehicle ) ;
55002: LD_VAR 0 1
55006: PPUSH
55007: CALL 19174 0 1
// until IsControledBy ( vehicle ) ;
55011: LD_VAR 0 1
55015: PPUSH
55016: CALL_OW 312
55020: IFFALSE 54995
// wait ( 10 ) ;
55022: LD_INT 10
55024: PPUSH
55025: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55029: LD_VAR 0 1
55033: PPUSH
55034: LD_EXP 60
55038: PUSH
55039: LD_VAR 0 4
55043: ARRAY
55044: PUSH
55045: LD_INT 3
55047: ARRAY
55048: PPUSH
55049: LD_EXP 60
55053: PUSH
55054: LD_VAR 0 4
55058: ARRAY
55059: PUSH
55060: LD_INT 4
55062: ARRAY
55063: PPUSH
55064: CALL_OW 111
// break ;
55068: GO 55122
// end else
55070: GO 55120
// begin wait ( 0 0$3 ) ;
55072: LD_INT 105
55074: PPUSH
55075: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55079: LD_VAR 0 1
55083: PPUSH
55084: LD_EXP 60
55088: PUSH
55089: LD_VAR 0 4
55093: ARRAY
55094: PUSH
55095: LD_INT 3
55097: ARRAY
55098: PPUSH
55099: LD_EXP 60
55103: PUSH
55104: LD_VAR 0 4
55108: ARRAY
55109: PUSH
55110: LD_INT 4
55112: ARRAY
55113: PPUSH
55114: CALL_OW 111
// break ;
55118: GO 55122
// end ; end ;
55120: GO 54571
55122: POP
55123: POP
// end ;
55124: LD_VAR 0 3
55128: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55129: LD_INT 0
55131: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55132: LD_VAR 0 1
55136: PUSH
55137: LD_INT 250
55139: EQUAL
55140: IFFALSE 55157
55142: PUSH
55143: LD_VAR 0 2
55147: PPUSH
55148: CALL_OW 264
55152: PUSH
55153: LD_INT 81
55155: EQUAL
55156: AND
55157: IFFALSE 55178
// MinerPlaceMine ( unit , x , y ) ;
55159: LD_VAR 0 2
55163: PPUSH
55164: LD_VAR 0 4
55168: PPUSH
55169: LD_VAR 0 5
55173: PPUSH
55174: CALL 58459 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55178: LD_VAR 0 1
55182: PUSH
55183: LD_INT 251
55185: EQUAL
55186: IFFALSE 55203
55188: PUSH
55189: LD_VAR 0 2
55193: PPUSH
55194: CALL_OW 264
55198: PUSH
55199: LD_INT 81
55201: EQUAL
55202: AND
55203: IFFALSE 55224
// MinerDetonateMine ( unit , x , y ) ;
55205: LD_VAR 0 2
55209: PPUSH
55210: LD_VAR 0 4
55214: PPUSH
55215: LD_VAR 0 5
55219: PPUSH
55220: CALL 58866 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55224: LD_VAR 0 1
55228: PUSH
55229: LD_INT 252
55231: EQUAL
55232: IFFALSE 55249
55234: PUSH
55235: LD_VAR 0 2
55239: PPUSH
55240: CALL_OW 264
55244: PUSH
55245: LD_INT 81
55247: EQUAL
55248: AND
55249: IFFALSE 55270
// MinerCreateMinefield ( unit , x , y ) ;
55251: LD_VAR 0 2
55255: PPUSH
55256: LD_VAR 0 4
55260: PPUSH
55261: LD_VAR 0 5
55265: PPUSH
55266: CALL 59098 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55270: LD_VAR 0 1
55274: PUSH
55275: LD_INT 253
55277: EQUAL
55278: IFFALSE 55295
55280: PUSH
55281: LD_VAR 0 2
55285: PPUSH
55286: CALL_OW 257
55290: PUSH
55291: LD_INT 5
55293: EQUAL
55294: AND
55295: IFFALSE 55316
// ComBinocular ( unit , x , y ) ;
55297: LD_VAR 0 2
55301: PPUSH
55302: LD_VAR 0 4
55306: PPUSH
55307: LD_VAR 0 5
55311: PPUSH
55312: CALL 59473 0 3
// if selectedUnit then
55316: LD_VAR 0 3
55320: IFFALSE 55380
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55322: LD_VAR 0 1
55326: PUSH
55327: LD_INT 254
55329: EQUAL
55330: IFFALSE 55347
55332: PUSH
55333: LD_VAR 0 2
55337: PPUSH
55338: CALL_OW 264
55342: PUSH
55343: LD_INT 99
55345: EQUAL
55346: AND
55347: IFFALSE 55364
55349: PUSH
55350: LD_VAR 0 3
55354: PPUSH
55355: CALL_OW 263
55359: PUSH
55360: LD_INT 3
55362: EQUAL
55363: AND
55364: IFFALSE 55380
// HackDestroyVehicle ( unit , selectedUnit ) ;
55366: LD_VAR 0 2
55370: PPUSH
55371: LD_VAR 0 3
55375: PPUSH
55376: CALL 57670 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55380: LD_VAR 0 1
55384: PUSH
55385: LD_INT 255
55387: EQUAL
55388: IFFALSE 55412
55390: PUSH
55391: LD_VAR 0 2
55395: PPUSH
55396: CALL_OW 264
55400: PUSH
55401: LD_INT 14
55403: PUSH
55404: LD_INT 53
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: IN
55411: AND
55412: IFFALSE 55430
55414: PUSH
55415: LD_VAR 0 4
55419: PPUSH
55420: LD_VAR 0 5
55424: PPUSH
55425: CALL_OW 488
55429: AND
55430: IFFALSE 55454
// CutTreeXYR ( unit , x , y , 12 ) ;
55432: LD_VAR 0 2
55436: PPUSH
55437: LD_VAR 0 4
55441: PPUSH
55442: LD_VAR 0 5
55446: PPUSH
55447: LD_INT 12
55449: PPUSH
55450: CALL 55645 0 4
// if cmd = 256 then
55454: LD_VAR 0 1
55458: PUSH
55459: LD_INT 256
55461: EQUAL
55462: IFFALSE 55483
// SetFactoryWaypoint ( unit , x , y ) ;
55464: LD_VAR 0 2
55468: PPUSH
55469: LD_VAR 0 4
55473: PPUSH
55474: LD_VAR 0 5
55478: PPUSH
55479: CALL 63139 0 3
// if cmd = 257 then
55483: LD_VAR 0 1
55487: PUSH
55488: LD_INT 257
55490: EQUAL
55491: IFFALSE 55512
// SetWarehouseGatheringPoint ( unit , x , y ) ;
55493: LD_VAR 0 2
55497: PPUSH
55498: LD_VAR 0 4
55502: PPUSH
55503: LD_VAR 0 5
55507: PPUSH
55508: CALL 63635 0 3
// if cmd = 258 then
55512: LD_VAR 0 1
55516: PUSH
55517: LD_INT 258
55519: EQUAL
55520: IFFALSE 55544
// BurnTreeXYR ( unit , x , y , 8 ) ;
55522: LD_VAR 0 2
55526: PPUSH
55527: LD_VAR 0 4
55531: PPUSH
55532: LD_VAR 0 5
55536: PPUSH
55537: LD_INT 8
55539: PPUSH
55540: CALL 56045 0 4
// end ;
55544: LD_VAR 0 6
55548: RET
// export function ComRadiation ( un ) ; var eff ; begin
55549: LD_INT 0
55551: PPUSH
55552: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
55553: LD_VAR 0 1
55557: PPUSH
55558: CALL_OW 264
55562: PUSH
55563: LD_INT 91
55565: NONEQUAL
55566: IFFALSE 55570
// exit ;
55568: GO 55640
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55570: LD_INT 68
55572: PPUSH
55573: LD_VAR 0 1
55577: PPUSH
55578: CALL_OW 255
55582: PPUSH
55583: CALL_OW 321
55587: PUSH
55588: LD_INT 2
55590: EQUAL
55591: IFFALSE 55603
// eff := 50 else
55593: LD_ADDR_VAR 0 3
55597: PUSH
55598: LD_INT 50
55600: ST_TO_ADDR
55601: GO 55611
// eff := 25 ;
55603: LD_ADDR_VAR 0 3
55607: PUSH
55608: LD_INT 25
55610: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55611: LD_VAR 0 1
55615: PPUSH
55616: CALL_OW 250
55620: PPUSH
55621: LD_VAR 0 1
55625: PPUSH
55626: CALL_OW 251
55630: PPUSH
55631: LD_VAR 0 3
55635: PPUSH
55636: CALL_OW 495
// end ;
55640: LD_VAR 0 2
55644: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55645: LD_INT 0
55647: PPUSH
55648: PPUSH
55649: PPUSH
55650: PPUSH
55651: PPUSH
55652: PPUSH
55653: PPUSH
55654: PPUSH
55655: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
55656: LD_VAR 0 1
55660: PPUSH
55661: CALL_OW 302
55665: NOT
55666: IFTRUE 55685
55668: PUSH
55669: LD_VAR 0 2
55673: PPUSH
55674: LD_VAR 0 3
55678: PPUSH
55679: CALL_OW 488
55683: NOT
55684: OR
55685: IFTRUE 55694
55687: PUSH
55688: LD_VAR 0 4
55692: NOT
55693: OR
55694: IFFALSE 55698
// exit ;
55696: GO 56040
// list := [ ] ;
55698: LD_ADDR_VAR 0 13
55702: PUSH
55703: EMPTY
55704: ST_TO_ADDR
// if x - r < 0 then
55705: LD_VAR 0 2
55709: PUSH
55710: LD_VAR 0 4
55714: MINUS
55715: PUSH
55716: LD_INT 0
55718: LESS
55719: IFFALSE 55731
// min_x := 0 else
55721: LD_ADDR_VAR 0 7
55725: PUSH
55726: LD_INT 0
55728: ST_TO_ADDR
55729: GO 55747
// min_x := x - r ;
55731: LD_ADDR_VAR 0 7
55735: PUSH
55736: LD_VAR 0 2
55740: PUSH
55741: LD_VAR 0 4
55745: MINUS
55746: ST_TO_ADDR
// if y - r < 0 then
55747: LD_VAR 0 3
55751: PUSH
55752: LD_VAR 0 4
55756: MINUS
55757: PUSH
55758: LD_INT 0
55760: LESS
55761: IFFALSE 55773
// min_y := 0 else
55763: LD_ADDR_VAR 0 8
55767: PUSH
55768: LD_INT 0
55770: ST_TO_ADDR
55771: GO 55789
// min_y := y - r ;
55773: LD_ADDR_VAR 0 8
55777: PUSH
55778: LD_VAR 0 3
55782: PUSH
55783: LD_VAR 0 4
55787: MINUS
55788: ST_TO_ADDR
// max_x := x + r ;
55789: LD_ADDR_VAR 0 9
55793: PUSH
55794: LD_VAR 0 2
55798: PUSH
55799: LD_VAR 0 4
55803: PLUS
55804: ST_TO_ADDR
// max_y := y + r ;
55805: LD_ADDR_VAR 0 10
55809: PUSH
55810: LD_VAR 0 3
55814: PUSH
55815: LD_VAR 0 4
55819: PLUS
55820: ST_TO_ADDR
// for _x = min_x to max_x do
55821: LD_ADDR_VAR 0 11
55825: PUSH
55826: DOUBLE
55827: LD_VAR 0 7
55831: DEC
55832: ST_TO_ADDR
55833: LD_VAR 0 9
55837: PUSH
55838: FOR_TO
55839: IFFALSE 55958
// for _y = min_y to max_y do
55841: LD_ADDR_VAR 0 12
55845: PUSH
55846: DOUBLE
55847: LD_VAR 0 8
55851: DEC
55852: ST_TO_ADDR
55853: LD_VAR 0 10
55857: PUSH
55858: FOR_TO
55859: IFFALSE 55954
// begin if not ValidHex ( _x , _y ) then
55861: LD_VAR 0 11
55865: PPUSH
55866: LD_VAR 0 12
55870: PPUSH
55871: CALL_OW 488
55875: NOT
55876: IFFALSE 55880
// continue ;
55878: GO 55858
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55880: LD_VAR 0 11
55884: PPUSH
55885: LD_VAR 0 12
55889: PPUSH
55890: CALL_OW 351
55894: IFFALSE 55912
55896: PUSH
55897: LD_VAR 0 11
55901: PPUSH
55902: LD_VAR 0 12
55906: PPUSH
55907: CALL_OW 554
55911: AND
55912: IFFALSE 55952
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55914: LD_ADDR_VAR 0 13
55918: PUSH
55919: LD_VAR 0 13
55923: PPUSH
55924: LD_VAR 0 13
55928: PUSH
55929: LD_INT 1
55931: PLUS
55932: PPUSH
55933: LD_VAR 0 11
55937: PUSH
55938: LD_VAR 0 12
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PPUSH
55947: CALL_OW 2
55951: ST_TO_ADDR
// end ;
55952: GO 55858
55954: POP
55955: POP
55956: GO 55838
55958: POP
55959: POP
// if not list then
55960: LD_VAR 0 13
55964: NOT
55965: IFFALSE 55969
// exit ;
55967: GO 56040
// for i in list do
55969: LD_ADDR_VAR 0 6
55973: PUSH
55974: LD_VAR 0 13
55978: PUSH
55979: FOR_IN
55980: IFFALSE 56038
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55982: LD_VAR 0 1
55986: PPUSH
55987: LD_STRING M
55989: PUSH
55990: LD_VAR 0 6
55994: PUSH
55995: LD_INT 1
55997: ARRAY
55998: PUSH
55999: LD_VAR 0 6
56003: PUSH
56004: LD_INT 2
56006: ARRAY
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: PUSH
56029: EMPTY
56030: LIST
56031: PPUSH
56032: CALL_OW 447
56036: GO 55979
56038: POP
56039: POP
// end ;
56040: LD_VAR 0 5
56044: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56045: LD_INT 0
56047: PPUSH
56048: PPUSH
56049: PPUSH
56050: PPUSH
56051: PPUSH
56052: PPUSH
56053: PPUSH
56054: PPUSH
56055: PPUSH
56056: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56057: LD_VAR 0 1
56061: PPUSH
56062: CALL_OW 302
56066: NOT
56067: IFTRUE 56086
56069: PUSH
56070: LD_VAR 0 2
56074: PPUSH
56075: LD_VAR 0 3
56079: PPUSH
56080: CALL_OW 488
56084: NOT
56085: OR
56086: IFTRUE 56095
56088: PUSH
56089: LD_VAR 0 4
56093: NOT
56094: OR
56095: IFFALSE 56099
// exit ;
56097: GO 56616
// list := [ ] ;
56099: LD_ADDR_VAR 0 13
56103: PUSH
56104: EMPTY
56105: ST_TO_ADDR
// if x - r < 0 then
56106: LD_VAR 0 2
56110: PUSH
56111: LD_VAR 0 4
56115: MINUS
56116: PUSH
56117: LD_INT 0
56119: LESS
56120: IFFALSE 56132
// min_x := 0 else
56122: LD_ADDR_VAR 0 7
56126: PUSH
56127: LD_INT 0
56129: ST_TO_ADDR
56130: GO 56148
// min_x := x - r ;
56132: LD_ADDR_VAR 0 7
56136: PUSH
56137: LD_VAR 0 2
56141: PUSH
56142: LD_VAR 0 4
56146: MINUS
56147: ST_TO_ADDR
// if y - r < 0 then
56148: LD_VAR 0 3
56152: PUSH
56153: LD_VAR 0 4
56157: MINUS
56158: PUSH
56159: LD_INT 0
56161: LESS
56162: IFFALSE 56174
// min_y := 0 else
56164: LD_ADDR_VAR 0 8
56168: PUSH
56169: LD_INT 0
56171: ST_TO_ADDR
56172: GO 56190
// min_y := y - r ;
56174: LD_ADDR_VAR 0 8
56178: PUSH
56179: LD_VAR 0 3
56183: PUSH
56184: LD_VAR 0 4
56188: MINUS
56189: ST_TO_ADDR
// max_x := x + r ;
56190: LD_ADDR_VAR 0 9
56194: PUSH
56195: LD_VAR 0 2
56199: PUSH
56200: LD_VAR 0 4
56204: PLUS
56205: ST_TO_ADDR
// max_y := y + r ;
56206: LD_ADDR_VAR 0 10
56210: PUSH
56211: LD_VAR 0 3
56215: PUSH
56216: LD_VAR 0 4
56220: PLUS
56221: ST_TO_ADDR
// for _x = min_x to max_x do
56222: LD_ADDR_VAR 0 11
56226: PUSH
56227: DOUBLE
56228: LD_VAR 0 7
56232: DEC
56233: ST_TO_ADDR
56234: LD_VAR 0 9
56238: PUSH
56239: FOR_TO
56240: IFFALSE 56359
// for _y = min_y to max_y do
56242: LD_ADDR_VAR 0 12
56246: PUSH
56247: DOUBLE
56248: LD_VAR 0 8
56252: DEC
56253: ST_TO_ADDR
56254: LD_VAR 0 10
56258: PUSH
56259: FOR_TO
56260: IFFALSE 56355
// begin if not ValidHex ( _x , _y ) then
56262: LD_VAR 0 11
56266: PPUSH
56267: LD_VAR 0 12
56271: PPUSH
56272: CALL_OW 488
56276: NOT
56277: IFFALSE 56281
// continue ;
56279: GO 56259
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56281: LD_VAR 0 11
56285: PPUSH
56286: LD_VAR 0 12
56290: PPUSH
56291: CALL_OW 351
56295: IFFALSE 56313
56297: PUSH
56298: LD_VAR 0 11
56302: PPUSH
56303: LD_VAR 0 12
56307: PPUSH
56308: CALL_OW 554
56312: AND
56313: IFFALSE 56353
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56315: LD_ADDR_VAR 0 13
56319: PUSH
56320: LD_VAR 0 13
56324: PPUSH
56325: LD_VAR 0 13
56329: PUSH
56330: LD_INT 1
56332: PLUS
56333: PPUSH
56334: LD_VAR 0 11
56338: PUSH
56339: LD_VAR 0 12
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PPUSH
56348: CALL_OW 2
56352: ST_TO_ADDR
// end ;
56353: GO 56259
56355: POP
56356: POP
56357: GO 56239
56359: POP
56360: POP
// if not list then
56361: LD_VAR 0 13
56365: NOT
56366: IFFALSE 56370
// exit ;
56368: GO 56616
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
56370: LD_ADDR_VAR 0 13
56374: PUSH
56375: LD_VAR 0 1
56379: PPUSH
56380: LD_VAR 0 13
56384: PPUSH
56385: LD_INT 1
56387: PPUSH
56388: LD_INT 1
56390: PPUSH
56391: CALL 16302 0 4
56395: ST_TO_ADDR
// ComStop ( flame ) ;
56396: LD_VAR 0 1
56400: PPUSH
56401: CALL_OW 141
// for i in list do
56405: LD_ADDR_VAR 0 6
56409: PUSH
56410: LD_VAR 0 13
56414: PUSH
56415: FOR_IN
56416: IFFALSE 56447
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
56418: LD_VAR 0 1
56422: PPUSH
56423: LD_VAR 0 6
56427: PUSH
56428: LD_INT 1
56430: ARRAY
56431: PPUSH
56432: LD_VAR 0 6
56436: PUSH
56437: LD_INT 2
56439: ARRAY
56440: PPUSH
56441: CALL_OW 176
56445: GO 56415
56447: POP
56448: POP
// repeat wait ( 0 0$1 ) ;
56449: LD_INT 35
56451: PPUSH
56452: CALL_OW 67
// task := GetTaskList ( flame ) ;
56456: LD_ADDR_VAR 0 14
56460: PUSH
56461: LD_VAR 0 1
56465: PPUSH
56466: CALL_OW 437
56470: ST_TO_ADDR
// if not task then
56471: LD_VAR 0 14
56475: NOT
56476: IFFALSE 56480
// exit ;
56478: GO 56616
// if task [ 1 ] [ 1 ] <> | then
56480: LD_VAR 0 14
56484: PUSH
56485: LD_INT 1
56487: ARRAY
56488: PUSH
56489: LD_INT 1
56491: ARRAY
56492: PUSH
56493: LD_STRING |
56495: NONEQUAL
56496: IFFALSE 56500
// exit ;
56498: GO 56616
// _x := task [ 1 ] [ 2 ] ;
56500: LD_ADDR_VAR 0 11
56504: PUSH
56505: LD_VAR 0 14
56509: PUSH
56510: LD_INT 1
56512: ARRAY
56513: PUSH
56514: LD_INT 2
56516: ARRAY
56517: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
56518: LD_ADDR_VAR 0 12
56522: PUSH
56523: LD_VAR 0 14
56527: PUSH
56528: LD_INT 1
56530: ARRAY
56531: PUSH
56532: LD_INT 3
56534: ARRAY
56535: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
56536: LD_VAR 0 11
56540: PPUSH
56541: LD_VAR 0 12
56545: PPUSH
56546: CALL_OW 351
56550: NOT
56551: IFTRUE 56570
56553: PUSH
56554: LD_VAR 0 11
56558: PPUSH
56559: LD_VAR 0 12
56563: PPUSH
56564: CALL_OW 554
56568: NOT
56569: OR
56570: IFFALSE 56604
// begin task := Delete ( task , 1 ) ;
56572: LD_ADDR_VAR 0 14
56576: PUSH
56577: LD_VAR 0 14
56581: PPUSH
56582: LD_INT 1
56584: PPUSH
56585: CALL_OW 3
56589: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
56590: LD_VAR 0 1
56594: PPUSH
56595: LD_VAR 0 14
56599: PPUSH
56600: CALL_OW 446
// end ; until not HasTask ( flame ) ;
56604: LD_VAR 0 1
56608: PPUSH
56609: CALL_OW 314
56613: NOT
56614: IFFALSE 56449
// end ;
56616: LD_VAR 0 5
56620: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56621: LD_EXP 49
56625: NOT
56626: IFFALSE 56676
56628: GO 56630
56630: DISABLE
// begin initHack := true ;
56631: LD_ADDR_EXP 49
56635: PUSH
56636: LD_INT 1
56638: ST_TO_ADDR
// hackTanks := [ ] ;
56639: LD_ADDR_EXP 50
56643: PUSH
56644: EMPTY
56645: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56646: LD_ADDR_EXP 51
56650: PUSH
56651: EMPTY
56652: ST_TO_ADDR
// hackLimit := 3 ;
56653: LD_ADDR_EXP 52
56657: PUSH
56658: LD_INT 3
56660: ST_TO_ADDR
// hackDist := 12 ;
56661: LD_ADDR_EXP 53
56665: PUSH
56666: LD_INT 12
56668: ST_TO_ADDR
// hackCounter := [ ] ;
56669: LD_ADDR_EXP 54
56673: PUSH
56674: EMPTY
56675: ST_TO_ADDR
// end ;
56676: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56677: LD_EXP 49
56681: IFFALSE 56699
56683: PUSH
56684: LD_INT 34
56686: PUSH
56687: LD_INT 99
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PPUSH
56694: CALL_OW 69
56698: AND
56699: IFFALSE 56952
56701: GO 56703
56703: DISABLE
56704: LD_INT 0
56706: PPUSH
56707: PPUSH
// begin enable ;
56708: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56709: LD_ADDR_VAR 0 1
56713: PUSH
56714: LD_INT 34
56716: PUSH
56717: LD_INT 99
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PPUSH
56724: CALL_OW 69
56728: PUSH
56729: FOR_IN
56730: IFFALSE 56950
// begin if not i in hackTanks then
56732: LD_VAR 0 1
56736: PUSH
56737: LD_EXP 50
56741: IN
56742: NOT
56743: IFFALSE 56826
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56745: LD_ADDR_EXP 50
56749: PUSH
56750: LD_EXP 50
56754: PPUSH
56755: LD_EXP 50
56759: PUSH
56760: LD_INT 1
56762: PLUS
56763: PPUSH
56764: LD_VAR 0 1
56768: PPUSH
56769: CALL_OW 1
56773: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56774: LD_ADDR_EXP 51
56778: PUSH
56779: LD_EXP 51
56783: PPUSH
56784: LD_EXP 51
56788: PUSH
56789: LD_INT 1
56791: PLUS
56792: PPUSH
56793: EMPTY
56794: PPUSH
56795: CALL_OW 1
56799: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56800: LD_ADDR_EXP 54
56804: PUSH
56805: LD_EXP 54
56809: PPUSH
56810: LD_EXP 54
56814: PUSH
56815: LD_INT 1
56817: PLUS
56818: PPUSH
56819: EMPTY
56820: PPUSH
56821: CALL_OW 1
56825: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56826: LD_VAR 0 1
56830: PPUSH
56831: CALL_OW 302
56835: NOT
56836: IFFALSE 56849
// begin HackUnlinkAll ( i ) ;
56838: LD_VAR 0 1
56842: PPUSH
56843: CALL 56955 0 1
// continue ;
56847: GO 56729
// end ; HackCheckCapturedStatus ( i ) ;
56849: LD_VAR 0 1
56853: PPUSH
56854: CALL 57400 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56858: LD_ADDR_VAR 0 2
56862: PUSH
56863: LD_INT 81
56865: PUSH
56866: LD_VAR 0 1
56870: PPUSH
56871: CALL_OW 255
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 33
56882: PUSH
56883: LD_INT 3
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 91
56892: PUSH
56893: LD_VAR 0 1
56897: PUSH
56898: LD_EXP 53
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 50
56910: PUSH
56911: EMPTY
56912: LIST
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: PPUSH
56920: CALL_OW 69
56924: ST_TO_ADDR
// if not tmp then
56925: LD_VAR 0 2
56929: NOT
56930: IFFALSE 56934
// continue ;
56932: GO 56729
// HackLink ( i , tmp ) ;
56934: LD_VAR 0 1
56938: PPUSH
56939: LD_VAR 0 2
56943: PPUSH
56944: CALL 57091 0 2
// end ;
56948: GO 56729
56950: POP
56951: POP
// end ;
56952: PPOPN 2
56954: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56955: LD_INT 0
56957: PPUSH
56958: PPUSH
56959: PPUSH
// if not hack in hackTanks then
56960: LD_VAR 0 1
56964: PUSH
56965: LD_EXP 50
56969: IN
56970: NOT
56971: IFFALSE 56975
// exit ;
56973: GO 57086
// index := GetElementIndex ( hackTanks , hack ) ;
56975: LD_ADDR_VAR 0 4
56979: PUSH
56980: LD_EXP 50
56984: PPUSH
56985: LD_VAR 0 1
56989: PPUSH
56990: CALL 15597 0 2
56994: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56995: LD_EXP 51
56999: PUSH
57000: LD_VAR 0 4
57004: ARRAY
57005: IFFALSE 57086
// begin for i in hackTanksCaptured [ index ] do
57007: LD_ADDR_VAR 0 3
57011: PUSH
57012: LD_EXP 51
57016: PUSH
57017: LD_VAR 0 4
57021: ARRAY
57022: PUSH
57023: FOR_IN
57024: IFFALSE 57050
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57026: LD_VAR 0 3
57030: PUSH
57031: LD_INT 1
57033: ARRAY
57034: PPUSH
57035: LD_VAR 0 3
57039: PUSH
57040: LD_INT 2
57042: ARRAY
57043: PPUSH
57044: CALL_OW 235
57048: GO 57023
57050: POP
57051: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57052: LD_ADDR_EXP 51
57056: PUSH
57057: LD_EXP 51
57061: PPUSH
57062: LD_VAR 0 4
57066: PPUSH
57067: EMPTY
57068: PPUSH
57069: CALL_OW 1
57073: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57074: LD_VAR 0 1
57078: PPUSH
57079: LD_INT 0
57081: PPUSH
57082: CALL_OW 505
// end ; end ;
57086: LD_VAR 0 2
57090: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57091: LD_INT 0
57093: PPUSH
57094: PPUSH
57095: PPUSH
// if not hack in hackTanks or not vehicles then
57096: LD_VAR 0 1
57100: PUSH
57101: LD_EXP 50
57105: IN
57106: NOT
57107: IFTRUE 57116
57109: PUSH
57110: LD_VAR 0 2
57114: NOT
57115: OR
57116: IFFALSE 57120
// exit ;
57118: GO 57395
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57120: LD_ADDR_VAR 0 2
57124: PUSH
57125: LD_VAR 0 1
57129: PPUSH
57130: LD_VAR 0 2
57134: PPUSH
57135: LD_INT 1
57137: PPUSH
57138: LD_INT 1
57140: PPUSH
57141: CALL 16249 0 4
57145: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57146: LD_ADDR_VAR 0 5
57150: PUSH
57151: LD_EXP 50
57155: PPUSH
57156: LD_VAR 0 1
57160: PPUSH
57161: CALL 15597 0 2
57165: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57166: LD_EXP 51
57170: PUSH
57171: LD_VAR 0 5
57175: ARRAY
57176: PUSH
57177: LD_EXP 52
57181: LESS
57182: IFFALSE 57371
// begin for i := 1 to vehicles do
57184: LD_ADDR_VAR 0 4
57188: PUSH
57189: DOUBLE
57190: LD_INT 1
57192: DEC
57193: ST_TO_ADDR
57194: LD_VAR 0 2
57198: PUSH
57199: FOR_TO
57200: IFFALSE 57369
// begin if hackTanksCaptured [ index ] = hackLimit then
57202: LD_EXP 51
57206: PUSH
57207: LD_VAR 0 5
57211: ARRAY
57212: PUSH
57213: LD_EXP 52
57217: EQUAL
57218: IFFALSE 57222
// break ;
57220: GO 57369
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57222: LD_ADDR_EXP 54
57226: PUSH
57227: LD_EXP 54
57231: PPUSH
57232: LD_VAR 0 5
57236: PPUSH
57237: LD_EXP 54
57241: PUSH
57242: LD_VAR 0 5
57246: ARRAY
57247: PUSH
57248: LD_INT 1
57250: PLUS
57251: PPUSH
57252: CALL_OW 1
57256: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57257: LD_ADDR_EXP 51
57261: PUSH
57262: LD_EXP 51
57266: PPUSH
57267: LD_VAR 0 5
57271: PUSH
57272: LD_EXP 51
57276: PUSH
57277: LD_VAR 0 5
57281: ARRAY
57282: PUSH
57283: LD_INT 1
57285: PLUS
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PPUSH
57291: LD_VAR 0 2
57295: PUSH
57296: LD_VAR 0 4
57300: ARRAY
57301: PUSH
57302: LD_VAR 0 2
57306: PUSH
57307: LD_VAR 0 4
57311: ARRAY
57312: PPUSH
57313: CALL_OW 255
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PPUSH
57322: CALL 15814 0 3
57326: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57327: LD_VAR 0 2
57331: PUSH
57332: LD_VAR 0 4
57336: ARRAY
57337: PPUSH
57338: LD_VAR 0 1
57342: PPUSH
57343: CALL_OW 255
57347: PPUSH
57348: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57352: LD_VAR 0 2
57356: PUSH
57357: LD_VAR 0 4
57361: ARRAY
57362: PPUSH
57363: CALL_OW 141
// end ;
57367: GO 57199
57369: POP
57370: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57371: LD_VAR 0 1
57375: PPUSH
57376: LD_EXP 51
57380: PUSH
57381: LD_VAR 0 5
57385: ARRAY
57386: PUSH
57387: LD_INT 0
57389: PLUS
57390: PPUSH
57391: CALL_OW 505
// end ;
57395: LD_VAR 0 3
57399: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57400: LD_INT 0
57402: PPUSH
57403: PPUSH
57404: PPUSH
57405: PPUSH
// if not hack in hackTanks then
57406: LD_VAR 0 1
57410: PUSH
57411: LD_EXP 50
57415: IN
57416: NOT
57417: IFFALSE 57421
// exit ;
57419: GO 57665
// index := GetElementIndex ( hackTanks , hack ) ;
57421: LD_ADDR_VAR 0 4
57425: PUSH
57426: LD_EXP 50
57430: PPUSH
57431: LD_VAR 0 1
57435: PPUSH
57436: CALL 15597 0 2
57440: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57441: LD_ADDR_VAR 0 3
57445: PUSH
57446: DOUBLE
57447: LD_EXP 51
57451: PUSH
57452: LD_VAR 0 4
57456: ARRAY
57457: INC
57458: ST_TO_ADDR
57459: LD_INT 1
57461: PUSH
57462: FOR_DOWNTO
57463: IFFALSE 57639
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57465: LD_ADDR_VAR 0 5
57469: PUSH
57470: LD_EXP 51
57474: PUSH
57475: LD_VAR 0 4
57479: ARRAY
57480: PUSH
57481: LD_VAR 0 3
57485: ARRAY
57486: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57487: LD_VAR 0 5
57491: PUSH
57492: LD_INT 1
57494: ARRAY
57495: PPUSH
57496: CALL_OW 302
57500: NOT
57501: IFTRUE 57529
57503: PUSH
57504: LD_VAR 0 5
57508: PUSH
57509: LD_INT 1
57511: ARRAY
57512: PPUSH
57513: CALL_OW 255
57517: PUSH
57518: LD_VAR 0 1
57522: PPUSH
57523: CALL_OW 255
57527: NONEQUAL
57528: OR
57529: IFFALSE 57637
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57531: LD_VAR 0 5
57535: PUSH
57536: LD_INT 1
57538: ARRAY
57539: PPUSH
57540: CALL_OW 305
57544: IFFALSE 57572
57546: PUSH
57547: LD_VAR 0 5
57551: PUSH
57552: LD_INT 1
57554: ARRAY
57555: PPUSH
57556: CALL_OW 255
57560: PUSH
57561: LD_VAR 0 1
57565: PPUSH
57566: CALL_OW 255
57570: EQUAL
57571: AND
57572: IFFALSE 57596
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57574: LD_VAR 0 5
57578: PUSH
57579: LD_INT 1
57581: ARRAY
57582: PPUSH
57583: LD_VAR 0 5
57587: PUSH
57588: LD_INT 2
57590: ARRAY
57591: PPUSH
57592: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57596: LD_ADDR_EXP 51
57600: PUSH
57601: LD_EXP 51
57605: PPUSH
57606: LD_VAR 0 4
57610: PPUSH
57611: LD_EXP 51
57615: PUSH
57616: LD_VAR 0 4
57620: ARRAY
57621: PPUSH
57622: LD_VAR 0 3
57626: PPUSH
57627: CALL_OW 3
57631: PPUSH
57632: CALL_OW 1
57636: ST_TO_ADDR
// end ; end ;
57637: GO 57462
57639: POP
57640: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57641: LD_VAR 0 1
57645: PPUSH
57646: LD_EXP 51
57650: PUSH
57651: LD_VAR 0 4
57655: ARRAY
57656: PUSH
57657: LD_INT 0
57659: PLUS
57660: PPUSH
57661: CALL_OW 505
// end ;
57665: LD_VAR 0 2
57669: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57670: LD_INT 0
57672: PPUSH
57673: PPUSH
57674: PPUSH
57675: PPUSH
// if not hack in hackTanks then
57676: LD_VAR 0 1
57680: PUSH
57681: LD_EXP 50
57685: IN
57686: NOT
57687: IFFALSE 57691
// exit ;
57689: GO 57776
// index := GetElementIndex ( hackTanks , hack ) ;
57691: LD_ADDR_VAR 0 5
57695: PUSH
57696: LD_EXP 50
57700: PPUSH
57701: LD_VAR 0 1
57705: PPUSH
57706: CALL 15597 0 2
57710: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57711: LD_ADDR_VAR 0 4
57715: PUSH
57716: DOUBLE
57717: LD_INT 1
57719: DEC
57720: ST_TO_ADDR
57721: LD_EXP 51
57725: PUSH
57726: LD_VAR 0 5
57730: ARRAY
57731: PUSH
57732: FOR_TO
57733: IFFALSE 57774
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57735: LD_EXP 51
57739: PUSH
57740: LD_VAR 0 5
57744: ARRAY
57745: PUSH
57746: LD_VAR 0 4
57750: ARRAY
57751: PUSH
57752: LD_INT 1
57754: ARRAY
57755: PUSH
57756: LD_VAR 0 2
57760: EQUAL
57761: IFFALSE 57772
// KillUnit ( vehicle ) ;
57763: LD_VAR 0 2
57767: PPUSH
57768: CALL_OW 66
57772: GO 57732
57774: POP
57775: POP
// end ;
57776: LD_VAR 0 3
57780: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
57781: LD_EXP 55
57785: NOT
57786: IFFALSE 57919
57788: GO 57790
57790: DISABLE
57791: LD_INT 0
57793: PPUSH
// begin initMiner := true ;
57794: LD_ADDR_EXP 55
57798: PUSH
57799: LD_INT 1
57801: ST_TO_ADDR
// minersList := [ ] ;
57802: LD_ADDR_EXP 56
57806: PUSH
57807: EMPTY
57808: ST_TO_ADDR
// minerMinesList := [ ] ;
57809: LD_ADDR_EXP 57
57813: PUSH
57814: EMPTY
57815: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
57816: LD_ADDR_EXP 58
57820: PUSH
57821: LD_INT 6
57823: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57824: LD_ADDR_VAR 0 1
57828: PUSH
57829: LD_INT 34
57831: PUSH
57832: LD_INT 81
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PPUSH
57839: CALL_OW 69
57843: PUSH
57844: FOR_IN
57845: IFFALSE 57917
// begin if not i in minersList then
57847: LD_VAR 0 1
57851: PUSH
57852: LD_EXP 56
57856: IN
57857: NOT
57858: IFFALSE 57915
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57860: LD_ADDR_EXP 56
57864: PUSH
57865: LD_EXP 56
57869: PPUSH
57870: LD_EXP 56
57874: PUSH
57875: LD_INT 1
57877: PLUS
57878: PPUSH
57879: LD_VAR 0 1
57883: PPUSH
57884: CALL_OW 1
57888: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57889: LD_ADDR_EXP 57
57893: PUSH
57894: LD_EXP 57
57898: PPUSH
57899: LD_EXP 57
57903: PUSH
57904: LD_INT 1
57906: PLUS
57907: PPUSH
57908: EMPTY
57909: PPUSH
57910: CALL_OW 1
57914: ST_TO_ADDR
// end end ;
57915: GO 57844
57917: POP
57918: POP
// end ;
57919: PPOPN 1
57921: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
57922: LD_EXP 55
57926: IFFALSE 57957
57928: PUSH
57929: LD_EXP 57
57933: PPUSH
57934: CALL 12896 0 1
57938: IFTRUE 57956
57940: PUSH
57941: LD_INT 34
57943: PUSH
57944: LD_INT 81
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PPUSH
57951: CALL_OW 69
57955: OR
57956: AND
57957: IFFALSE 58456
57959: GO 57961
57961: DISABLE
57962: LD_INT 0
57964: PPUSH
57965: PPUSH
57966: PPUSH
57967: PPUSH
// begin enable ;
57968: ENABLE
// for i := minerMinesList downto 1 do
57969: LD_ADDR_VAR 0 1
57973: PUSH
57974: DOUBLE
57975: LD_EXP 57
57979: INC
57980: ST_TO_ADDR
57981: LD_INT 1
57983: PUSH
57984: FOR_DOWNTO
57985: IFFALSE 58454
// begin if IsLive ( minersList [ i ] ) then
57987: LD_EXP 56
57991: PUSH
57992: LD_VAR 0 1
57996: ARRAY
57997: PPUSH
57998: CALL_OW 300
58002: IFFALSE 58035
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58004: LD_EXP 56
58008: PUSH
58009: LD_VAR 0 1
58013: ARRAY
58014: PPUSH
58015: LD_EXP 57
58019: PUSH
58020: LD_VAR 0 1
58024: ARRAY
58025: PPUSH
58026: CALL 12896 0 1
58030: PPUSH
58031: CALL_OW 505
// if not minerMinesList [ i ] then
58035: LD_EXP 57
58039: PUSH
58040: LD_VAR 0 1
58044: ARRAY
58045: NOT
58046: IFFALSE 58050
// continue ;
58048: GO 57984
// for j := minerMinesList [ i ] downto 1 do
58050: LD_ADDR_VAR 0 2
58054: PUSH
58055: DOUBLE
58056: LD_EXP 57
58060: PUSH
58061: LD_VAR 0 1
58065: ARRAY
58066: INC
58067: ST_TO_ADDR
58068: LD_INT 1
58070: PUSH
58071: FOR_DOWNTO
58072: IFFALSE 58450
// begin side := GetSide ( minersList [ i ] ) ;
58074: LD_ADDR_VAR 0 3
58078: PUSH
58079: LD_EXP 56
58083: PUSH
58084: LD_VAR 0 1
58088: ARRAY
58089: PPUSH
58090: CALL_OW 255
58094: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58095: LD_EXP 56
58099: PUSH
58100: LD_VAR 0 1
58104: ARRAY
58105: PPUSH
58106: CALL_OW 301
58110: IFTRUE 58130
58112: PUSH
58113: LD_EXP 56
58117: PUSH
58118: LD_VAR 0 1
58122: ARRAY
58123: PPUSH
58124: CALL_OW 305
58128: NOT
58129: OR
58130: IFFALSE 58221
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58132: LD_EXP 57
58136: PUSH
58137: LD_VAR 0 1
58141: ARRAY
58142: PUSH
58143: LD_VAR 0 2
58147: ARRAY
58148: PUSH
58149: LD_INT 1
58151: ARRAY
58152: PPUSH
58153: LD_EXP 57
58157: PUSH
58158: LD_VAR 0 1
58162: ARRAY
58163: PUSH
58164: LD_VAR 0 2
58168: ARRAY
58169: PUSH
58170: LD_INT 2
58172: ARRAY
58173: PPUSH
58174: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58178: LD_ADDR_EXP 57
58182: PUSH
58183: LD_EXP 57
58187: PPUSH
58188: LD_VAR 0 1
58192: PPUSH
58193: LD_EXP 57
58197: PUSH
58198: LD_VAR 0 1
58202: ARRAY
58203: PPUSH
58204: LD_VAR 0 2
58208: PPUSH
58209: CALL_OW 3
58213: PPUSH
58214: CALL_OW 1
58218: ST_TO_ADDR
// continue ;
58219: GO 58071
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58221: LD_ADDR_VAR 0 4
58225: PUSH
58226: LD_EXP 57
58230: PUSH
58231: LD_VAR 0 1
58235: ARRAY
58236: PUSH
58237: LD_VAR 0 2
58241: ARRAY
58242: PUSH
58243: LD_INT 1
58245: ARRAY
58246: PPUSH
58247: LD_EXP 57
58251: PUSH
58252: LD_VAR 0 1
58256: ARRAY
58257: PUSH
58258: LD_VAR 0 2
58262: ARRAY
58263: PUSH
58264: LD_INT 2
58266: ARRAY
58267: PPUSH
58268: CALL_OW 428
58272: ST_TO_ADDR
// if not tmp then
58273: LD_VAR 0 4
58277: NOT
58278: IFFALSE 58282
// continue ;
58280: GO 58071
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58282: LD_VAR 0 4
58286: PUSH
58287: LD_INT 81
58289: PUSH
58290: LD_VAR 0 3
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PPUSH
58299: CALL_OW 69
58303: IN
58304: IFFALSE 58354
58306: PUSH
58307: LD_EXP 57
58311: PUSH
58312: LD_VAR 0 1
58316: ARRAY
58317: PUSH
58318: LD_VAR 0 2
58322: ARRAY
58323: PUSH
58324: LD_INT 1
58326: ARRAY
58327: PPUSH
58328: LD_EXP 57
58332: PUSH
58333: LD_VAR 0 1
58337: ARRAY
58338: PUSH
58339: LD_VAR 0 2
58343: ARRAY
58344: PUSH
58345: LD_INT 2
58347: ARRAY
58348: PPUSH
58349: CALL_OW 458
58353: AND
58354: IFFALSE 58448
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
58356: LD_EXP 57
58360: PUSH
58361: LD_VAR 0 1
58365: ARRAY
58366: PUSH
58367: LD_VAR 0 2
58371: ARRAY
58372: PUSH
58373: LD_INT 1
58375: ARRAY
58376: PPUSH
58377: LD_EXP 57
58381: PUSH
58382: LD_VAR 0 1
58386: ARRAY
58387: PUSH
58388: LD_VAR 0 2
58392: ARRAY
58393: PUSH
58394: LD_INT 2
58396: ARRAY
58397: PPUSH
58398: LD_VAR 0 3
58402: PPUSH
58403: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58407: LD_ADDR_EXP 57
58411: PUSH
58412: LD_EXP 57
58416: PPUSH
58417: LD_VAR 0 1
58421: PPUSH
58422: LD_EXP 57
58426: PUSH
58427: LD_VAR 0 1
58431: ARRAY
58432: PPUSH
58433: LD_VAR 0 2
58437: PPUSH
58438: CALL_OW 3
58442: PPUSH
58443: CALL_OW 1
58447: ST_TO_ADDR
// end ; end ;
58448: GO 58071
58450: POP
58451: POP
// end ;
58452: GO 57984
58454: POP
58455: POP
// end ;
58456: PPOPN 4
58458: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
58459: LD_INT 0
58461: PPUSH
58462: PPUSH
58463: PPUSH
58464: PPUSH
// result := false ;
58465: LD_ADDR_VAR 0 4
58469: PUSH
58470: LD_INT 0
58472: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
58473: LD_VAR 0 1
58477: PPUSH
58478: CALL_OW 264
58482: PUSH
58483: LD_INT 81
58485: EQUAL
58486: NOT
58487: IFFALSE 58491
// exit ;
58489: GO 58861
// side := GetSide ( unit ) ;
58491: LD_ADDR_VAR 0 6
58495: PUSH
58496: LD_VAR 0 1
58500: PPUSH
58501: CALL_OW 255
58505: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
58506: LD_ADDR_VAR 0 5
58510: PUSH
58511: LD_EXP 56
58515: PPUSH
58516: LD_VAR 0 1
58520: PPUSH
58521: CALL 15597 0 2
58525: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
58526: LD_EXP 57
58530: PUSH
58531: LD_VAR 0 5
58535: ARRAY
58536: PUSH
58537: LD_EXP 58
58541: GREATEREQUAL
58542: IFFALSE 58546
// exit ;
58544: GO 58861
// ComMoveXY ( unit , x , y ) ;
58546: LD_VAR 0 1
58550: PPUSH
58551: LD_VAR 0 2
58555: PPUSH
58556: LD_VAR 0 3
58560: PPUSH
58561: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58565: LD_INT 35
58567: PPUSH
58568: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58572: LD_VAR 0 1
58576: PPUSH
58577: LD_VAR 0 2
58581: PPUSH
58582: LD_VAR 0 3
58586: PPUSH
58587: CALL 47643 0 3
58591: NOT
58592: IFFALSE 58605
58594: PUSH
58595: LD_VAR 0 1
58599: PPUSH
58600: CALL_OW 314
58604: AND
58605: IFFALSE 58609
// exit ;
58607: GO 58861
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58609: LD_VAR 0 2
58613: PPUSH
58614: LD_VAR 0 3
58618: PPUSH
58619: CALL_OW 428
58623: PUSH
58624: LD_VAR 0 1
58628: EQUAL
58629: IFFALSE 58643
58631: PUSH
58632: LD_VAR 0 1
58636: PPUSH
58637: CALL_OW 314
58641: NOT
58642: AND
58643: IFFALSE 58565
// if MineAtPos ( x , y ) then
58645: LD_VAR 0 2
58649: PPUSH
58650: LD_VAR 0 3
58654: PPUSH
58655: CALL_OW 458
58659: IFFALSE 58663
// exit ;
58661: GO 58861
// if your_side = side then
58663: LD_OWVAR 2
58667: PUSH
58668: LD_VAR 0 6
58672: EQUAL
58673: IFFALSE 58692
// PlaySoundXY ( x , y , PlantMine ) ;
58675: LD_VAR 0 2
58679: PPUSH
58680: LD_VAR 0 3
58684: PPUSH
58685: LD_STRING PlantMine
58687: PPUSH
58688: CALL_OW 366
// repeat wait ( 1 ) ;
58692: LD_INT 1
58694: PPUSH
58695: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
58699: LD_VAR 0 2
58703: PPUSH
58704: LD_VAR 0 3
58708: PPUSH
58709: LD_VAR 0 6
58713: PPUSH
58714: LD_INT 0
58716: PPUSH
58717: CALL_OW 454
58721: IFFALSE 58692
// if MineAtPos ( x , y ) then
58723: LD_VAR 0 2
58727: PPUSH
58728: LD_VAR 0 3
58732: PPUSH
58733: CALL_OW 458
58737: IFFALSE 58853
// begin for i in minerMinesList [ index ] do
58739: LD_ADDR_VAR 0 7
58743: PUSH
58744: LD_EXP 57
58748: PUSH
58749: LD_VAR 0 5
58753: ARRAY
58754: PUSH
58755: FOR_IN
58756: IFFALSE 58798
// if i [ 1 ] = x and i [ 2 ] = y then
58758: LD_VAR 0 7
58762: PUSH
58763: LD_INT 1
58765: ARRAY
58766: PUSH
58767: LD_VAR 0 2
58771: EQUAL
58772: IFFALSE 58790
58774: PUSH
58775: LD_VAR 0 7
58779: PUSH
58780: LD_INT 2
58782: ARRAY
58783: PUSH
58784: LD_VAR 0 3
58788: EQUAL
58789: AND
58790: IFFALSE 58796
// exit ;
58792: POP
58793: POP
58794: GO 58861
58796: GO 58755
58798: POP
58799: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
58800: LD_ADDR_EXP 57
58804: PUSH
58805: LD_EXP 57
58809: PPUSH
58810: LD_VAR 0 5
58814: PUSH
58815: LD_EXP 57
58819: PUSH
58820: LD_VAR 0 5
58824: ARRAY
58825: PUSH
58826: LD_INT 1
58828: PLUS
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PPUSH
58834: LD_VAR 0 2
58838: PUSH
58839: LD_VAR 0 3
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PPUSH
58848: CALL 15814 0 3
58852: ST_TO_ADDR
// end ; result := true ;
58853: LD_ADDR_VAR 0 4
58857: PUSH
58858: LD_INT 1
58860: ST_TO_ADDR
// end ;
58861: LD_VAR 0 4
58865: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
58866: LD_INT 0
58868: PPUSH
58869: PPUSH
58870: PPUSH
// if not unit in minersList then
58871: LD_VAR 0 1
58875: PUSH
58876: LD_EXP 56
58880: IN
58881: NOT
58882: IFFALSE 58886
// exit ;
58884: GO 59093
// index := GetElementIndex ( minersList , unit ) ;
58886: LD_ADDR_VAR 0 6
58890: PUSH
58891: LD_EXP 56
58895: PPUSH
58896: LD_VAR 0 1
58900: PPUSH
58901: CALL 15597 0 2
58905: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58906: LD_ADDR_VAR 0 5
58910: PUSH
58911: DOUBLE
58912: LD_EXP 57
58916: PUSH
58917: LD_VAR 0 6
58921: ARRAY
58922: INC
58923: ST_TO_ADDR
58924: LD_INT 1
58926: PUSH
58927: FOR_DOWNTO
58928: IFFALSE 59091
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58930: LD_EXP 57
58934: PUSH
58935: LD_VAR 0 6
58939: ARRAY
58940: PUSH
58941: LD_VAR 0 5
58945: ARRAY
58946: PUSH
58947: LD_INT 1
58949: ARRAY
58950: PPUSH
58951: LD_EXP 57
58955: PUSH
58956: LD_VAR 0 6
58960: ARRAY
58961: PUSH
58962: LD_VAR 0 5
58966: ARRAY
58967: PUSH
58968: LD_INT 2
58970: ARRAY
58971: PPUSH
58972: LD_VAR 0 2
58976: PPUSH
58977: LD_VAR 0 3
58981: PPUSH
58982: CALL_OW 298
58986: PUSH
58987: LD_INT 6
58989: LESS
58990: IFFALSE 59089
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58992: LD_EXP 57
58996: PUSH
58997: LD_VAR 0 6
59001: ARRAY
59002: PUSH
59003: LD_VAR 0 5
59007: ARRAY
59008: PUSH
59009: LD_INT 1
59011: ARRAY
59012: PPUSH
59013: LD_EXP 57
59017: PUSH
59018: LD_VAR 0 6
59022: ARRAY
59023: PUSH
59024: LD_VAR 0 5
59028: ARRAY
59029: PUSH
59030: LD_INT 2
59032: ARRAY
59033: PPUSH
59034: LD_VAR 0 1
59038: PPUSH
59039: CALL_OW 255
59043: PPUSH
59044: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59048: LD_ADDR_EXP 57
59052: PUSH
59053: LD_EXP 57
59057: PPUSH
59058: LD_VAR 0 6
59062: PPUSH
59063: LD_EXP 57
59067: PUSH
59068: LD_VAR 0 6
59072: ARRAY
59073: PPUSH
59074: LD_VAR 0 5
59078: PPUSH
59079: CALL_OW 3
59083: PPUSH
59084: CALL_OW 1
59088: ST_TO_ADDR
// end ; end ;
59089: GO 58927
59091: POP
59092: POP
// end ;
59093: LD_VAR 0 4
59097: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59098: LD_INT 0
59100: PPUSH
59101: PPUSH
59102: PPUSH
59103: PPUSH
59104: PPUSH
59105: PPUSH
59106: PPUSH
59107: PPUSH
59108: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59109: LD_VAR 0 1
59113: PPUSH
59114: CALL_OW 264
59118: PUSH
59119: LD_INT 81
59121: EQUAL
59122: NOT
59123: IFTRUE 59138
59125: PUSH
59126: LD_VAR 0 1
59130: PUSH
59131: LD_EXP 56
59135: IN
59136: NOT
59137: OR
59138: IFFALSE 59142
// exit ;
59140: GO 59468
// index := GetElementIndex ( minersList , unit ) ;
59142: LD_ADDR_VAR 0 6
59146: PUSH
59147: LD_EXP 56
59151: PPUSH
59152: LD_VAR 0 1
59156: PPUSH
59157: CALL 15597 0 2
59161: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59162: LD_ADDR_VAR 0 8
59166: PUSH
59167: LD_EXP 58
59171: PUSH
59172: LD_EXP 57
59176: PUSH
59177: LD_VAR 0 6
59181: ARRAY
59182: MINUS
59183: ST_TO_ADDR
// if not minesFreeAmount then
59184: LD_VAR 0 8
59188: NOT
59189: IFFALSE 59193
// exit ;
59191: GO 59468
// tmp := [ ] ;
59193: LD_ADDR_VAR 0 7
59197: PUSH
59198: EMPTY
59199: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59200: LD_ADDR_VAR 0 5
59204: PUSH
59205: DOUBLE
59206: LD_INT 1
59208: DEC
59209: ST_TO_ADDR
59210: LD_VAR 0 8
59214: PUSH
59215: FOR_TO
59216: IFFALSE 59415
// begin _d := rand ( 0 , 5 ) ;
59218: LD_ADDR_VAR 0 11
59222: PUSH
59223: LD_INT 0
59225: PPUSH
59226: LD_INT 5
59228: PPUSH
59229: CALL_OW 12
59233: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59234: LD_ADDR_VAR 0 12
59238: PUSH
59239: LD_INT 2
59241: PPUSH
59242: LD_INT 6
59244: PPUSH
59245: CALL_OW 12
59249: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59250: LD_ADDR_VAR 0 9
59254: PUSH
59255: LD_VAR 0 2
59259: PPUSH
59260: LD_VAR 0 11
59264: PPUSH
59265: LD_VAR 0 12
59269: PPUSH
59270: CALL_OW 272
59274: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59275: LD_ADDR_VAR 0 10
59279: PUSH
59280: LD_VAR 0 3
59284: PPUSH
59285: LD_VAR 0 11
59289: PPUSH
59290: LD_VAR 0 12
59294: PPUSH
59295: CALL_OW 273
59299: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59300: LD_VAR 0 9
59304: PPUSH
59305: LD_VAR 0 10
59309: PPUSH
59310: CALL_OW 488
59314: IFFALSE 59338
59316: PUSH
59317: LD_VAR 0 9
59321: PUSH
59322: LD_VAR 0 10
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_VAR 0 7
59335: IN
59336: NOT
59337: AND
59338: IFFALSE 59357
59340: PUSH
59341: LD_VAR 0 9
59345: PPUSH
59346: LD_VAR 0 10
59350: PPUSH
59351: CALL_OW 458
59355: NOT
59356: AND
59357: IFFALSE 59399
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
59359: LD_ADDR_VAR 0 7
59363: PUSH
59364: LD_VAR 0 7
59368: PPUSH
59369: LD_VAR 0 7
59373: PUSH
59374: LD_INT 1
59376: PLUS
59377: PPUSH
59378: LD_VAR 0 9
59382: PUSH
59383: LD_VAR 0 10
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PPUSH
59392: CALL_OW 1
59396: ST_TO_ADDR
59397: GO 59413
// i := i - 1 ;
59399: LD_ADDR_VAR 0 5
59403: PUSH
59404: LD_VAR 0 5
59408: PUSH
59409: LD_INT 1
59411: MINUS
59412: ST_TO_ADDR
// end ;
59413: GO 59215
59415: POP
59416: POP
// for i in tmp do
59417: LD_ADDR_VAR 0 5
59421: PUSH
59422: LD_VAR 0 7
59426: PUSH
59427: FOR_IN
59428: IFFALSE 59466
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59430: LD_VAR 0 1
59434: PPUSH
59435: LD_VAR 0 5
59439: PUSH
59440: LD_INT 1
59442: ARRAY
59443: PPUSH
59444: LD_VAR 0 5
59448: PUSH
59449: LD_INT 2
59451: ARRAY
59452: PPUSH
59453: CALL 58459 0 3
59457: NOT
59458: IFFALSE 59464
// exit ;
59460: POP
59461: POP
59462: GO 59468
59464: GO 59427
59466: POP
59467: POP
// end ;
59468: LD_VAR 0 4
59472: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
59473: LD_INT 0
59475: PPUSH
59476: PPUSH
59477: PPUSH
59478: PPUSH
59479: PPUSH
59480: PPUSH
59481: PPUSH
59482: PPUSH
59483: PPUSH
// if GetClass ( unit ) <> class_sniper then
59484: LD_VAR 0 1
59488: PPUSH
59489: CALL_OW 257
59493: PUSH
59494: LD_INT 5
59496: NONEQUAL
59497: IFFALSE 59501
// exit ;
59499: GO 59971
// dist := 8 ;
59501: LD_ADDR_VAR 0 5
59505: PUSH
59506: LD_INT 8
59508: ST_TO_ADDR
// viewRange := 12 ;
59509: LD_ADDR_VAR 0 8
59513: PUSH
59514: LD_INT 12
59516: ST_TO_ADDR
// side := GetSide ( unit ) ;
59517: LD_ADDR_VAR 0 6
59521: PUSH
59522: LD_VAR 0 1
59526: PPUSH
59527: CALL_OW 255
59531: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59532: LD_INT 61
59534: PPUSH
59535: LD_VAR 0 6
59539: PPUSH
59540: CALL_OW 321
59544: PUSH
59545: LD_INT 2
59547: EQUAL
59548: IFFALSE 59558
// viewRange := 16 ;
59550: LD_ADDR_VAR 0 8
59554: PUSH
59555: LD_INT 16
59557: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59558: LD_VAR 0 1
59562: PPUSH
59563: LD_VAR 0 2
59567: PPUSH
59568: LD_VAR 0 3
59572: PPUSH
59573: CALL_OW 297
59577: PUSH
59578: LD_VAR 0 5
59582: GREATER
59583: IFFALSE 59662
// begin ComMoveXY ( unit , x , y ) ;
59585: LD_VAR 0 1
59589: PPUSH
59590: LD_VAR 0 2
59594: PPUSH
59595: LD_VAR 0 3
59599: PPUSH
59600: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59604: LD_INT 35
59606: PPUSH
59607: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59611: LD_VAR 0 1
59615: PPUSH
59616: LD_VAR 0 2
59620: PPUSH
59621: LD_VAR 0 3
59625: PPUSH
59626: CALL 47643 0 3
59630: NOT
59631: IFFALSE 59635
// exit ;
59633: GO 59971
// until GetDistUnitXY ( unit , x , y ) < dist ;
59635: LD_VAR 0 1
59639: PPUSH
59640: LD_VAR 0 2
59644: PPUSH
59645: LD_VAR 0 3
59649: PPUSH
59650: CALL_OW 297
59654: PUSH
59655: LD_VAR 0 5
59659: LESS
59660: IFFALSE 59604
// end ; ComTurnXY ( unit , x , y ) ;
59662: LD_VAR 0 1
59666: PPUSH
59667: LD_VAR 0 2
59671: PPUSH
59672: LD_VAR 0 3
59676: PPUSH
59677: CALL_OW 118
// repeat if Multiplayer then
59681: LD_OWVAR 4
59685: IFFALSE 59696
// wait ( 35 ) else
59687: LD_INT 35
59689: PPUSH
59690: CALL_OW 67
59694: GO 59703
// wait ( 5 ) ;
59696: LD_INT 5
59698: PPUSH
59699: CALL_OW 67
// _d := GetDir ( unit ) ;
59703: LD_ADDR_VAR 0 11
59707: PUSH
59708: LD_VAR 0 1
59712: PPUSH
59713: CALL_OW 254
59717: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
59718: LD_ADDR_VAR 0 7
59722: PUSH
59723: LD_VAR 0 1
59727: PPUSH
59728: CALL_OW 250
59732: PPUSH
59733: LD_VAR 0 1
59737: PPUSH
59738: CALL_OW 251
59742: PPUSH
59743: LD_VAR 0 2
59747: PPUSH
59748: LD_VAR 0 3
59752: PPUSH
59753: CALL 50279 0 4
59757: ST_TO_ADDR
// until dir = _d ;
59758: LD_VAR 0 7
59762: PUSH
59763: LD_VAR 0 11
59767: EQUAL
59768: IFFALSE 59681
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
59770: LD_ADDR_VAR 0 9
59774: PUSH
59775: LD_VAR 0 1
59779: PPUSH
59780: CALL_OW 250
59784: PPUSH
59785: LD_VAR 0 7
59789: PPUSH
59790: LD_VAR 0 5
59794: PPUSH
59795: CALL_OW 272
59799: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59800: LD_ADDR_VAR 0 10
59804: PUSH
59805: LD_VAR 0 1
59809: PPUSH
59810: CALL_OW 251
59814: PPUSH
59815: LD_VAR 0 7
59819: PPUSH
59820: LD_VAR 0 5
59824: PPUSH
59825: CALL_OW 273
59829: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59830: LD_VAR 0 9
59834: PPUSH
59835: LD_VAR 0 10
59839: PPUSH
59840: CALL_OW 488
59844: NOT
59845: IFFALSE 59849
// exit ;
59847: GO 59971
// ComAnimCustom ( unit , 1 ) ;
59849: LD_VAR 0 1
59853: PPUSH
59854: LD_INT 1
59856: PPUSH
59857: CALL_OW 592
// p := 0 ;
59861: LD_ADDR_VAR 0 12
59865: PUSH
59866: LD_INT 0
59868: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59869: LD_VAR 0 9
59873: PPUSH
59874: LD_VAR 0 10
59878: PPUSH
59879: LD_VAR 0 6
59883: PPUSH
59884: LD_VAR 0 8
59888: PPUSH
59889: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59893: LD_INT 35
59895: PPUSH
59896: CALL_OW 67
// p := Inc ( p ) ;
59900: LD_ADDR_VAR 0 12
59904: PUSH
59905: LD_VAR 0 12
59909: PPUSH
59910: CALL 50235 0 1
59914: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59915: LD_VAR 0 12
59919: PUSH
59920: LD_INT 3
59922: EQUAL
59923: IFTRUE 59937
59925: PUSH
59926: LD_VAR 0 1
59930: PPUSH
59931: CALL_OW 302
59935: NOT
59936: OR
59937: IFTRUE 59950
59939: PUSH
59940: LD_VAR 0 1
59944: PPUSH
59945: CALL_OW 301
59949: OR
59950: IFFALSE 59893
// RemoveSeeing ( _x , _y , side ) ;
59952: LD_VAR 0 9
59956: PPUSH
59957: LD_VAR 0 10
59961: PPUSH
59962: LD_VAR 0 6
59966: PPUSH
59967: CALL_OW 331
// end ;
59971: LD_VAR 0 4
59975: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
59976: LD_INT 0
59978: PPUSH
59979: PPUSH
59980: PPUSH
59981: PPUSH
59982: PPUSH
59983: PPUSH
59984: PPUSH
59985: PPUSH
59986: PPUSH
59987: PPUSH
59988: PPUSH
// if not unit then
59989: LD_VAR 0 1
59993: NOT
59994: IFFALSE 59998
// exit ;
59996: GO 60269
// side := GetSide ( unit ) ;
59998: LD_ADDR_VAR 0 3
60002: PUSH
60003: LD_VAR 0 1
60007: PPUSH
60008: CALL_OW 255
60012: ST_TO_ADDR
// x := GetX ( unit ) ;
60013: LD_ADDR_VAR 0 5
60017: PUSH
60018: LD_VAR 0 1
60022: PPUSH
60023: CALL_OW 250
60027: ST_TO_ADDR
// y := GetY ( unit ) ;
60028: LD_ADDR_VAR 0 6
60032: PUSH
60033: LD_VAR 0 1
60037: PPUSH
60038: CALL_OW 251
60042: ST_TO_ADDR
// r := 8 ;
60043: LD_ADDR_VAR 0 4
60047: PUSH
60048: LD_INT 8
60050: ST_TO_ADDR
// if x - r < 0 then
60051: LD_VAR 0 5
60055: PUSH
60056: LD_VAR 0 4
60060: MINUS
60061: PUSH
60062: LD_INT 0
60064: LESS
60065: IFFALSE 60077
// min_x := 0 else
60067: LD_ADDR_VAR 0 7
60071: PUSH
60072: LD_INT 0
60074: ST_TO_ADDR
60075: GO 60093
// min_x := x - r ;
60077: LD_ADDR_VAR 0 7
60081: PUSH
60082: LD_VAR 0 5
60086: PUSH
60087: LD_VAR 0 4
60091: MINUS
60092: ST_TO_ADDR
// if y - r < 0 then
60093: LD_VAR 0 6
60097: PUSH
60098: LD_VAR 0 4
60102: MINUS
60103: PUSH
60104: LD_INT 0
60106: LESS
60107: IFFALSE 60119
// min_y := 0 else
60109: LD_ADDR_VAR 0 8
60113: PUSH
60114: LD_INT 0
60116: ST_TO_ADDR
60117: GO 60135
// min_y := y - r ;
60119: LD_ADDR_VAR 0 8
60123: PUSH
60124: LD_VAR 0 6
60128: PUSH
60129: LD_VAR 0 4
60133: MINUS
60134: ST_TO_ADDR
// max_x := x + r ;
60135: LD_ADDR_VAR 0 9
60139: PUSH
60140: LD_VAR 0 5
60144: PUSH
60145: LD_VAR 0 4
60149: PLUS
60150: ST_TO_ADDR
// max_y := y + r ;
60151: LD_ADDR_VAR 0 10
60155: PUSH
60156: LD_VAR 0 6
60160: PUSH
60161: LD_VAR 0 4
60165: PLUS
60166: ST_TO_ADDR
// for _x = min_x to max_x do
60167: LD_ADDR_VAR 0 11
60171: PUSH
60172: DOUBLE
60173: LD_VAR 0 7
60177: DEC
60178: ST_TO_ADDR
60179: LD_VAR 0 9
60183: PUSH
60184: FOR_TO
60185: IFFALSE 60267
// for _y = min_y to max_y do
60187: LD_ADDR_VAR 0 12
60191: PUSH
60192: DOUBLE
60193: LD_VAR 0 8
60197: DEC
60198: ST_TO_ADDR
60199: LD_VAR 0 10
60203: PUSH
60204: FOR_TO
60205: IFFALSE 60263
// begin if not ValidHex ( _x , _y ) then
60207: LD_VAR 0 11
60211: PPUSH
60212: LD_VAR 0 12
60216: PPUSH
60217: CALL_OW 488
60221: NOT
60222: IFFALSE 60226
// continue ;
60224: GO 60204
// if MineAtPos ( _x , _y ) then
60226: LD_VAR 0 11
60230: PPUSH
60231: LD_VAR 0 12
60235: PPUSH
60236: CALL_OW 458
60240: IFFALSE 60261
// ViewMineAtPos ( _x , _y , side ) ;
60242: LD_VAR 0 11
60246: PPUSH
60247: LD_VAR 0 12
60251: PPUSH
60252: LD_VAR 0 3
60256: PPUSH
60257: CALL_OW 457
// end ;
60261: GO 60204
60263: POP
60264: POP
60265: GO 60184
60267: POP
60268: POP
// end ;
60269: LD_VAR 0 2
60273: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
60274: LD_INT 0
60276: PPUSH
60277: PPUSH
60278: PPUSH
60279: PPUSH
60280: PPUSH
60281: PPUSH
// if not units then
60282: LD_VAR 0 1
60286: NOT
60287: IFFALSE 60291
// exit ;
60289: GO 60721
// scaners := [ ] ;
60291: LD_ADDR_VAR 0 6
60295: PUSH
60296: EMPTY
60297: ST_TO_ADDR
// for i in units do
60298: LD_ADDR_VAR 0 3
60302: PUSH
60303: LD_VAR 0 1
60307: PUSH
60308: FOR_IN
60309: IFFALSE 60466
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
60311: LD_VAR 0 3
60315: PPUSH
60316: CALL_OW 264
60320: PUSH
60321: LD_INT 11
60323: NONEQUAL
60324: IFTRUE 60338
60326: PUSH
60327: LD_VAR 0 3
60331: PPUSH
60332: CALL_OW 302
60336: NOT
60337: OR
60338: IFTRUE 60355
60340: PUSH
60341: LD_VAR 0 3
60345: PPUSH
60346: CALL_OW 110
60350: PUSH
60351: LD_INT 502
60353: EQUAL
60354: OR
60355: IFFALSE 60359
// continue ;
60357: GO 60308
// ComStop ( i ) ;
60359: LD_VAR 0 3
60363: PPUSH
60364: CALL_OW 141
// x := GetX ( i ) ;
60368: LD_ADDR_VAR 0 4
60372: PUSH
60373: LD_VAR 0 3
60377: PPUSH
60378: CALL_OW 250
60382: ST_TO_ADDR
// y := GetY ( i ) ;
60383: LD_ADDR_VAR 0 5
60387: PUSH
60388: LD_VAR 0 3
60392: PPUSH
60393: CALL_OW 251
60397: ST_TO_ADDR
// if GetSide ( i ) = your_side then
60398: LD_VAR 0 3
60402: PPUSH
60403: CALL_OW 255
60407: PUSH
60408: LD_OWVAR 2
60412: EQUAL
60413: IFFALSE 60432
// PlaySoundXY ( x , y , mineDetector ) ;
60415: LD_VAR 0 4
60419: PPUSH
60420: LD_VAR 0 5
60424: PPUSH
60425: LD_STRING mineDetector
60427: PPUSH
60428: CALL_OW 366
// scaners := Join ( scaners , i ) ;
60432: LD_ADDR_VAR 0 6
60436: PUSH
60437: LD_VAR 0 6
60441: PPUSH
60442: LD_VAR 0 3
60446: PPUSH
60447: CALL 48862 0 2
60451: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
60452: LD_VAR 0 3
60456: PPUSH
60457: LD_INT 502
60459: PPUSH
60460: CALL_OW 109
// end ;
60464: GO 60308
60466: POP
60467: POP
// if not scaners then
60468: LD_VAR 0 6
60472: NOT
60473: IFFALSE 60477
// exit ;
60475: GO 60721
// wait ( 3 ) ;
60477: LD_INT 3
60479: PPUSH
60480: CALL_OW 67
// timer := 6 ;
60484: LD_ADDR_VAR 0 7
60488: PUSH
60489: LD_INT 6
60491: ST_TO_ADDR
// repeat for i in scaners do
60492: LD_ADDR_VAR 0 3
60496: PUSH
60497: LD_VAR 0 6
60501: PUSH
60502: FOR_IN
60503: IFFALSE 60619
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
60505: LD_VAR 0 3
60509: PPUSH
60510: CALL_OW 302
60514: NOT
60515: IFTRUE 60528
60517: PUSH
60518: LD_VAR 0 3
60522: PPUSH
60523: CALL_OW 314
60527: OR
60528: IFTRUE 60559
60530: PUSH
60531: LD_VAR 0 3
60535: PPUSH
60536: CALL_OW 263
60540: PUSH
60541: LD_INT 1
60543: EQUAL
60544: IFFALSE 60558
60546: PUSH
60547: LD_VAR 0 3
60551: PPUSH
60552: CALL_OW 311
60556: NOT
60557: AND
60558: OR
60559: IFFALSE 60603
// begin SetUnitDisplayNumber ( i , 0 ) ;
60561: LD_VAR 0 3
60565: PPUSH
60566: LD_INT 0
60568: PPUSH
60569: CALL_OW 505
// SetTag ( i , 0 ) ;
60573: LD_VAR 0 3
60577: PPUSH
60578: LD_INT 0
60580: PPUSH
60581: CALL_OW 109
// scaners := scaners diff i ;
60585: LD_ADDR_VAR 0 6
60589: PUSH
60590: LD_VAR 0 6
60594: PUSH
60595: LD_VAR 0 3
60599: DIFF
60600: ST_TO_ADDR
// continue ;
60601: GO 60502
// end ; SetUnitDisplayNumber ( i , timer ) ;
60603: LD_VAR 0 3
60607: PPUSH
60608: LD_VAR 0 7
60612: PPUSH
60613: CALL_OW 505
// end ;
60617: GO 60502
60619: POP
60620: POP
// if not scaners then
60621: LD_VAR 0 6
60625: NOT
60626: IFFALSE 60630
// exit ;
60628: GO 60721
// timer := Dec ( timer ) ;
60630: LD_ADDR_VAR 0 7
60634: PUSH
60635: LD_VAR 0 7
60639: PPUSH
60640: CALL 50257 0 1
60644: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60645: LD_INT 35
60647: PPUSH
60648: CALL_OW 67
// until timer = 0 ;
60652: LD_VAR 0 7
60656: PUSH
60657: LD_INT 0
60659: EQUAL
60660: IFFALSE 60492
// if not scaners then
60662: LD_VAR 0 6
60666: NOT
60667: IFFALSE 60671
// exit ;
60669: GO 60721
// for i in scaners do
60671: LD_ADDR_VAR 0 3
60675: PUSH
60676: LD_VAR 0 6
60680: PUSH
60681: FOR_IN
60682: IFFALSE 60719
// begin SetUnitDisplayNumber ( i , 0 ) ;
60684: LD_VAR 0 3
60688: PPUSH
60689: LD_INT 0
60691: PPUSH
60692: CALL_OW 505
// SetTag ( i , 0 ) ;
60696: LD_VAR 0 3
60700: PPUSH
60701: LD_INT 0
60703: PPUSH
60704: CALL_OW 109
// RevealDetectorMine ( i ) ;
60708: LD_VAR 0 3
60712: PPUSH
60713: CALL 59976 0 1
// end ;
60717: GO 60681
60719: POP
60720: POP
// end ;
60721: LD_VAR 0 2
60725: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
60726: LD_INT 0
60728: PPUSH
// if p1 = mine_detector_mode then
60729: LD_VAR 0 2
60733: PUSH
60734: LD_INT 103
60736: EQUAL
60737: IFFALSE 60748
// DetectMine ( units ) ;
60739: LD_VAR 0 1
60743: PPUSH
60744: CALL 60274 0 1
// end ; end_of_file
60748: LD_VAR 0 7
60752: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
60753: LD_EXP 39
60757: IFFALSE 61098
60759: GO 60761
60761: DISABLE
60762: LD_INT 0
60764: PPUSH
60765: PPUSH
60766: PPUSH
// begin mpKingPoints := [ ] ;
60767: LD_ADDR_EXP 59
60771: PUSH
60772: EMPTY
60773: ST_TO_ADDR
// if mpTeamGame then
60774: LD_EXP 11
60778: IFFALSE 60832
// begin for i := 1 to Count ( mpTeams ) do
60780: LD_ADDR_VAR 0 1
60784: PUSH
60785: DOUBLE
60786: LD_INT 1
60788: DEC
60789: ST_TO_ADDR
60790: LD_EXP 10
60794: PPUSH
60795: CALL 12896 0 1
60799: PUSH
60800: FOR_TO
60801: IFFALSE 60828
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
60803: LD_ADDR_EXP 59
60807: PUSH
60808: LD_EXP 59
60812: PPUSH
60813: LD_VAR 0 1
60817: PPUSH
60818: LD_INT 0
60820: PPUSH
60821: CALL_OW 1
60825: ST_TO_ADDR
60826: GO 60800
60828: POP
60829: POP
// end else
60830: GO 60875
// begin for i := 1 to 8 do
60832: LD_ADDR_VAR 0 1
60836: PUSH
60837: DOUBLE
60838: LD_INT 1
60840: DEC
60841: ST_TO_ADDR
60842: LD_INT 8
60844: PUSH
60845: FOR_TO
60846: IFFALSE 60873
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
60848: LD_ADDR_EXP 59
60852: PUSH
60853: LD_EXP 59
60857: PPUSH
60858: LD_VAR 0 1
60862: PPUSH
60863: LD_INT 0
60865: PPUSH
60866: CALL_OW 1
60870: ST_TO_ADDR
60871: GO 60845
60873: POP
60874: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
60875: LD_ADDR_VAR 0 3
60879: PUSH
60880: LD_EXP 2
60884: PPUSH
60885: LD_INT 0
60887: PPUSH
60888: CALL_OW 517
60892: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60893: LD_ADDR_VAR 0 1
60897: PUSH
60898: DOUBLE
60899: LD_INT 1
60901: DEC
60902: ST_TO_ADDR
60903: LD_VAR 0 3
60907: PUSH
60908: LD_INT 1
60910: ARRAY
60911: PUSH
60912: FOR_TO
60913: IFFALSE 60980
// for j := 1 to 8 do
60915: LD_ADDR_VAR 0 2
60919: PUSH
60920: DOUBLE
60921: LD_INT 1
60923: DEC
60924: ST_TO_ADDR
60925: LD_INT 8
60927: PUSH
60928: FOR_TO
60929: IFFALSE 60976
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
60931: LD_VAR 0 3
60935: PUSH
60936: LD_INT 1
60938: ARRAY
60939: PUSH
60940: LD_VAR 0 1
60944: ARRAY
60945: PPUSH
60946: LD_VAR 0 3
60950: PUSH
60951: LD_INT 2
60953: ARRAY
60954: PUSH
60955: LD_VAR 0 1
60959: ARRAY
60960: PPUSH
60961: LD_VAR 0 2
60965: PPUSH
60966: LD_INT 12
60968: NEG
60969: PPUSH
60970: CALL_OW 330
60974: GO 60928
60976: POP
60977: POP
60978: GO 60912
60980: POP
60981: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
60982: LD_EXP 34
60986: PPUSH
60987: LD_INT 1
60989: PPUSH
60990: CALL_OW 424
// UpdateCounter ;
60994: CALL 61604 0 0
// repeat wait ( 0 0$1 ) ;
60998: LD_INT 35
61000: PPUSH
61001: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61005: LD_ADDR_VAR 0 3
61009: PUSH
61010: LD_EXP 34
61014: PPUSH
61015: LD_INT 3
61017: PUSH
61018: LD_INT 57
61020: PUSH
61021: EMPTY
61022: LIST
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 50
61030: PUSH
61031: EMPTY
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: PUSH
61037: LD_INT 30
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 30
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: LIST
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: LIST
61066: PPUSH
61067: CALL_OW 70
61071: ST_TO_ADDR
// if not tmp then
61072: LD_VAR 0 3
61076: NOT
61077: IFFALSE 61081
// continue ;
61079: GO 60998
// AddPoints ( tmp ) ;
61081: LD_VAR 0 3
61085: PPUSH
61086: CALL 61282 0 1
// UpdateCounter ;
61090: CALL 61604 0 0
// until false ;
61094: LD_INT 0
61096: IFFALSE 60998
// end ;
61098: PPOPN 3
61100: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61101: LD_EXP 39
61105: IFFALSE 61113
61107: PUSH
61108: LD_EXP 37
61112: AND
61113: IFFALSE 61279
61115: GO 61117
61117: DISABLE
61118: LD_INT 0
61120: PPUSH
61121: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61122: LD_ADDR_VAR 0 2
61126: PUSH
61127: LD_EXP 2
61131: PPUSH
61132: LD_INT 0
61134: PPUSH
61135: CALL_OW 517
61139: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61140: LD_ADDR_VAR 0 1
61144: PUSH
61145: DOUBLE
61146: LD_INT 1
61148: DEC
61149: ST_TO_ADDR
61150: LD_VAR 0 2
61154: PUSH
61155: LD_INT 1
61157: ARRAY
61158: PUSH
61159: FOR_TO
61160: IFFALSE 61201
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61162: LD_VAR 0 2
61166: PUSH
61167: LD_INT 1
61169: ARRAY
61170: PUSH
61171: LD_VAR 0 1
61175: ARRAY
61176: PPUSH
61177: LD_VAR 0 2
61181: PUSH
61182: LD_INT 2
61184: ARRAY
61185: PUSH
61186: LD_VAR 0 1
61190: ARRAY
61191: PPUSH
61192: LD_INT 125
61194: PPUSH
61195: CALL_OW 495
61199: GO 61159
61201: POP
61202: POP
// repeat wait ( mpEmissions ) ;
61203: LD_EXP 37
61207: PPUSH
61208: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
61212: LD_ADDR_VAR 0 1
61216: PUSH
61217: DOUBLE
61218: LD_INT 1
61220: DEC
61221: ST_TO_ADDR
61222: LD_VAR 0 2
61226: PUSH
61227: LD_INT 1
61229: ARRAY
61230: PUSH
61231: FOR_TO
61232: IFFALSE 61273
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
61234: LD_VAR 0 2
61238: PUSH
61239: LD_INT 1
61241: ARRAY
61242: PUSH
61243: LD_VAR 0 1
61247: ARRAY
61248: PPUSH
61249: LD_VAR 0 2
61253: PUSH
61254: LD_INT 2
61256: ARRAY
61257: PUSH
61258: LD_VAR 0 1
61262: ARRAY
61263: PPUSH
61264: LD_INT 15
61266: PPUSH
61267: CALL_OW 495
61271: GO 61231
61273: POP
61274: POP
// until false ;
61275: LD_INT 0
61277: IFFALSE 61203
// end ;
61279: PPOPN 2
61281: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
61282: LD_INT 0
61284: PPUSH
61285: PPUSH
61286: PPUSH
61287: PPUSH
61288: PPUSH
// if mpTeamGame then
61289: LD_EXP 11
61293: IFFALSE 61490
// begin first := depots [ 1 ] ;
61295: LD_ADDR_VAR 0 4
61299: PUSH
61300: LD_VAR 0 1
61304: PUSH
61305: LD_INT 1
61307: ARRAY
61308: ST_TO_ADDR
// side := GetSide ( first ) ;
61309: LD_ADDR_VAR 0 6
61313: PUSH
61314: LD_VAR 0 4
61318: PPUSH
61319: CALL_OW 255
61323: ST_TO_ADDR
// for i := 1 to mpTeams do
61324: LD_ADDR_VAR 0 3
61328: PUSH
61329: DOUBLE
61330: LD_INT 1
61332: DEC
61333: ST_TO_ADDR
61334: LD_EXP 10
61338: PUSH
61339: FOR_TO
61340: IFFALSE 61374
// if side in mpTeams [ i ] then
61342: LD_VAR 0 6
61346: PUSH
61347: LD_EXP 10
61351: PUSH
61352: LD_VAR 0 3
61356: ARRAY
61357: IN
61358: IFFALSE 61372
// begin team := i ;
61360: LD_ADDR_VAR 0 5
61364: PUSH
61365: LD_VAR 0 3
61369: ST_TO_ADDR
// break ;
61370: GO 61374
// end ;
61372: GO 61339
61374: POP
61375: POP
// if not team then
61376: LD_VAR 0 5
61380: NOT
61381: IFFALSE 61385
// exit ;
61383: GO 61599
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61385: LD_EXP 34
61389: PPUSH
61390: LD_INT 81
61392: PUSH
61393: LD_VAR 0 6
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PPUSH
61402: CALL_OW 70
61406: IFFALSE 61410
// exit ;
61408: GO 61599
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
61410: LD_ADDR_EXP 59
61414: PUSH
61415: LD_EXP 59
61419: PPUSH
61420: LD_VAR 0 5
61424: PPUSH
61425: LD_EXP 59
61429: PUSH
61430: LD_VAR 0 5
61434: ARRAY
61435: PUSH
61436: LD_INT 1
61438: PLUS
61439: PPUSH
61440: CALL_OW 1
61444: ST_TO_ADDR
// for i in mpTeams [ team ] do
61445: LD_ADDR_VAR 0 3
61449: PUSH
61450: LD_EXP 10
61454: PUSH
61455: LD_VAR 0 5
61459: ARRAY
61460: PUSH
61461: FOR_IN
61462: IFFALSE 61486
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
61464: LD_VAR 0 3
61468: PPUSH
61469: LD_EXP 59
61473: PUSH
61474: LD_VAR 0 5
61478: ARRAY
61479: PPUSH
61480: CALL_OW 506
61484: GO 61461
61486: POP
61487: POP
// end else
61488: GO 61599
// begin first := depots [ 1 ] ;
61490: LD_ADDR_VAR 0 4
61494: PUSH
61495: LD_VAR 0 1
61499: PUSH
61500: LD_INT 1
61502: ARRAY
61503: ST_TO_ADDR
// side := GetSide ( first ) ;
61504: LD_ADDR_VAR 0 6
61508: PUSH
61509: LD_VAR 0 4
61513: PPUSH
61514: CALL_OW 255
61518: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61519: LD_EXP 34
61523: PPUSH
61524: LD_INT 81
61526: PUSH
61527: LD_VAR 0 6
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PPUSH
61536: CALL_OW 70
61540: IFFALSE 61544
// exit ;
61542: GO 61599
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
61544: LD_ADDR_EXP 59
61548: PUSH
61549: LD_EXP 59
61553: PPUSH
61554: LD_VAR 0 6
61558: PPUSH
61559: LD_EXP 59
61563: PUSH
61564: LD_VAR 0 6
61568: ARRAY
61569: PUSH
61570: LD_INT 1
61572: PLUS
61573: PPUSH
61574: CALL_OW 1
61578: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
61579: LD_VAR 0 6
61583: PPUSH
61584: LD_EXP 59
61588: PUSH
61589: LD_VAR 0 6
61593: ARRAY
61594: PPUSH
61595: CALL_OW 506
// end ; end ;
61599: LD_VAR 0 2
61603: RET
// function UpdateCounter ; var i ; begin
61604: LD_INT 0
61606: PPUSH
61607: PPUSH
// result := [ ] ;
61608: LD_ADDR_VAR 0 1
61612: PUSH
61613: EMPTY
61614: ST_TO_ADDR
// if mpTeamGame then
61615: LD_EXP 11
61619: IFFALSE 61686
// begin for i := 1 to mpTeams do
61621: LD_ADDR_VAR 0 2
61625: PUSH
61626: DOUBLE
61627: LD_INT 1
61629: DEC
61630: ST_TO_ADDR
61631: LD_EXP 10
61635: PUSH
61636: FOR_TO
61637: IFFALSE 61682
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
61639: LD_ADDR_VAR 0 1
61643: PUSH
61644: LD_VAR 0 1
61648: PUSH
61649: LD_STRING #KingoftheHill-Team
61651: PUSH
61652: LD_VAR 0 2
61656: PUSH
61657: LD_EXP 59
61661: PUSH
61662: LD_VAR 0 2
61666: ARRAY
61667: PUSH
61668: LD_EXP 35
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: ADD
61679: ST_TO_ADDR
61680: GO 61636
61682: POP
61683: POP
// end else
61684: GO 61759
// begin for i := 1 to 8 do
61686: LD_ADDR_VAR 0 2
61690: PUSH
61691: DOUBLE
61692: LD_INT 1
61694: DEC
61695: ST_TO_ADDR
61696: LD_INT 8
61698: PUSH
61699: FOR_TO
61700: IFFALSE 61757
// if mpSidePositions [ i ] then
61702: LD_EXP 7
61706: PUSH
61707: LD_VAR 0 2
61711: ARRAY
61712: IFFALSE 61755
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
61714: LD_ADDR_VAR 0 1
61718: PUSH
61719: LD_VAR 0 1
61723: PUSH
61724: LD_STRING #KingoftheHill-Player
61726: PUSH
61727: LD_VAR 0 2
61731: PUSH
61732: LD_EXP 59
61736: PUSH
61737: LD_VAR 0 2
61741: ARRAY
61742: PUSH
61743: LD_EXP 35
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: ADD
61754: ST_TO_ADDR
61755: GO 61699
61757: POP
61758: POP
// end ; mpDisplayStrings := result ;
61759: LD_ADDR_EXP 38
61763: PUSH
61764: LD_VAR 0 1
61768: ST_TO_ADDR
// end ;
61769: LD_VAR 0 1
61773: RET
// export function HowMuchPointsKing ( side ) ; begin
61774: LD_INT 0
61776: PPUSH
// result := HowMuchPoints ( side ) ;
61777: LD_ADDR_VAR 0 2
61781: PUSH
61782: LD_VAR 0 1
61786: PPUSH
61787: CALL 61797 0 1
61791: ST_TO_ADDR
// end ;
61792: LD_VAR 0 2
61796: RET
// function HowMuchPoints ( side ) ; var i ; begin
61797: LD_INT 0
61799: PPUSH
61800: PPUSH
// if mpTeamGame then
61801: LD_EXP 11
61805: IFFALSE 61874
// begin for i := 1 to Count ( mpTeams ) do
61807: LD_ADDR_VAR 0 3
61811: PUSH
61812: DOUBLE
61813: LD_INT 1
61815: DEC
61816: ST_TO_ADDR
61817: LD_EXP 10
61821: PPUSH
61822: CALL 12896 0 1
61826: PUSH
61827: FOR_TO
61828: IFFALSE 61870
// begin if side in mpTeams [ i ] then
61830: LD_VAR 0 1
61834: PUSH
61835: LD_EXP 10
61839: PUSH
61840: LD_VAR 0 3
61844: ARRAY
61845: IN
61846: IFFALSE 61868
// begin result := mpKingPoints [ i ] ;
61848: LD_ADDR_VAR 0 2
61852: PUSH
61853: LD_EXP 59
61857: PUSH
61858: LD_VAR 0 3
61862: ARRAY
61863: ST_TO_ADDR
// exit ;
61864: POP
61865: POP
61866: GO 61890
// end ; end ;
61868: GO 61827
61870: POP
61871: POP
// end else
61872: GO 61890
// result := mpKingPoints [ side ] ;
61874: LD_ADDR_VAR 0 2
61878: PUSH
61879: LD_EXP 59
61883: PUSH
61884: LD_VAR 0 1
61888: ARRAY
61889: ST_TO_ADDR
// end ;
61890: LD_VAR 0 2
61894: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
61895: LD_EXP 39
61899: IFFALSE 61907
61901: PUSH
61902: CALL 62319 0 0
61906: AND
61907: IFFALSE 61915
61909: PUSH
61910: LD_OWVAR 4
61914: AND
61915: IFFALSE 62168
61917: GO 61919
61919: DISABLE
61920: LD_INT 0
61922: PPUSH
61923: PPUSH
// begin canWin := false ;
61924: LD_ADDR_VAR 0 2
61928: PUSH
61929: LD_INT 0
61931: ST_TO_ADDR
// if not HasPower ( your_side ) then
61932: LD_OWVAR 2
61936: PPUSH
61937: CALL 62361 0 1
61941: NOT
61942: IFFALSE 61953
// begin Multiplayer_Loose_Message ;
61944: CALL_OW 521
// enable ( mpLose ) ;
61948: LD_INT 102
61950: ENABLE_MARKED
// end else
61951: GO 62168
// begin if not EnemiesInGame then
61953: CALL 62171 0 0
61957: NOT
61958: IFFALSE 61965
// begin enable ( mpWin ) ;
61960: LD_INT 101
61962: ENABLE_MARKED
// exit ;
61963: GO 62168
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
61965: LD_ADDR_VAR 0 2
61969: PUSH
61970: LD_OWVAR 2
61974: PPUSH
61975: CALL 61797 0 1
61979: PUSH
61980: LD_EXP 35
61984: GREATEREQUAL
61985: IFFALSE 61998
61987: PUSH
61988: LD_OWVAR 2
61992: PPUSH
61993: CALL 62361 0 1
61997: AND
61998: ST_TO_ADDR
// for i := 1 to 8 do
61999: LD_ADDR_VAR 0 1
62003: PUSH
62004: DOUBLE
62005: LD_INT 1
62007: DEC
62008: ST_TO_ADDR
62009: LD_INT 8
62011: PUSH
62012: FOR_TO
62013: IFFALSE 62154
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62015: LD_EXP 7
62019: PUSH
62020: LD_VAR 0 1
62024: ARRAY
62025: IFFALSE 62038
62027: PUSH
62028: LD_VAR 0 1
62032: PPUSH
62033: CALL_OW 108
62037: AND
62038: IFFALSE 62052
62040: PUSH
62041: LD_VAR 0 1
62045: PUSH
62046: LD_OWVAR 2
62050: NONEQUAL
62051: AND
62052: IFFALSE 62152
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62054: LD_EXP 8
62058: PUSH
62059: LD_VAR 0 1
62063: ARRAY
62064: NOT
62065: IFTRUE 62113
62067: PUSH
62068: LD_EXP 8
62072: PUSH
62073: LD_VAR 0 1
62077: ARRAY
62078: PUSH
62079: LD_EXP 8
62083: PUSH
62084: LD_OWVAR 2
62088: ARRAY
62089: NONEQUAL
62090: IFFALSE 62112
62092: PUSH
62093: LD_OWVAR 2
62097: PPUSH
62098: LD_VAR 0 1
62102: PPUSH
62103: CALL_OW 81
62107: PUSH
62108: LD_INT 1
62110: NONEQUAL
62111: AND
62112: OR
62113: IFFALSE 62152
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62115: LD_VAR 0 1
62119: PPUSH
62120: CALL 61797 0 1
62124: PUSH
62125: LD_EXP 35
62129: GREATEREQUAL
62130: IFFALSE 62143
62132: PUSH
62133: LD_VAR 0 1
62137: PPUSH
62138: CALL 62361 0 1
62142: AND
62143: IFFALSE 62152
// begin enable ( mpLose ) ;
62145: LD_INT 102
62147: ENABLE_MARKED
// exit ;
62148: POP
62149: POP
62150: GO 62168
// end ;
62152: GO 62012
62154: POP
62155: POP
// if canWin then
62156: LD_VAR 0 2
62160: IFFALSE 62167
// enable ( mpWin ) else
62162: LD_INT 101
62164: ENABLE_MARKED
62165: GO 62168
// enable ;
62167: ENABLE
// end ; end ;
62168: PPOPN 2
62170: END
// function EnemiesInGame ; var i ; begin
62171: LD_INT 0
62173: PPUSH
62174: PPUSH
// result := false ;
62175: LD_ADDR_VAR 0 1
62179: PUSH
62180: LD_INT 0
62182: ST_TO_ADDR
// for i := 1 to 8 do
62183: LD_ADDR_VAR 0 2
62187: PUSH
62188: DOUBLE
62189: LD_INT 1
62191: DEC
62192: ST_TO_ADDR
62193: LD_INT 8
62195: PUSH
62196: FOR_TO
62197: IFFALSE 62312
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62199: LD_VAR 0 2
62203: PUSH
62204: LD_OWVAR 2
62208: NONEQUAL
62209: IFFALSE 62222
62211: PUSH
62212: LD_VAR 0 2
62216: PPUSH
62217: CALL 62361 0 1
62221: AND
62222: IFFALSE 62235
62224: PUSH
62225: LD_VAR 0 2
62229: PPUSH
62230: CALL_OW 108
62234: AND
62235: IFFALSE 62310
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62237: LD_EXP 8
62241: PUSH
62242: LD_VAR 0 2
62246: ARRAY
62247: NOT
62248: IFTRUE 62296
62250: PUSH
62251: LD_EXP 8
62255: PUSH
62256: LD_VAR 0 2
62260: ARRAY
62261: PUSH
62262: LD_EXP 8
62266: PUSH
62267: LD_OWVAR 2
62271: ARRAY
62272: NONEQUAL
62273: IFFALSE 62295
62275: PUSH
62276: LD_OWVAR 2
62280: PPUSH
62281: LD_VAR 0 2
62285: PPUSH
62286: CALL_OW 81
62290: PUSH
62291: LD_INT 1
62293: NONEQUAL
62294: AND
62295: OR
62296: IFFALSE 62310
// begin result := true ;
62298: LD_ADDR_VAR 0 1
62302: PUSH
62303: LD_INT 1
62305: ST_TO_ADDR
// exit ;
62306: POP
62307: POP
62308: GO 62314
// end ;
62310: GO 62196
62312: POP
62313: POP
// end ;
62314: LD_VAR 0 1
62318: RET
// function CanWinLoose ; begin
62319: LD_INT 0
62321: PPUSH
// result := true ;
62322: LD_ADDR_VAR 0 1
62326: PUSH
62327: LD_INT 1
62329: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
62330: CALL_OW 531
62334: IFFALSE 62346
62336: PUSH
62337: CALL_OW 519
62341: PUSH
62342: LD_INT 1
62344: GREATER
62345: AND
62346: IFFALSE 62356
// result := false ;
62348: LD_ADDR_VAR 0 1
62352: PUSH
62353: LD_INT 0
62355: ST_TO_ADDR
// end ;
62356: LD_VAR 0 1
62360: RET
// function HasPower ( i ) ; begin
62361: LD_INT 0
62363: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
62364: LD_ADDR_VAR 0 2
62368: PUSH
62369: LD_INT 22
62371: PUSH
62372: LD_VAR 0 1
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 2
62383: PUSH
62384: LD_INT 21
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 33
62396: PUSH
62397: LD_INT 3
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 33
62406: PUSH
62407: LD_INT 5
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PPUSH
62424: CALL_OW 69
62428: ST_TO_ADDR
// end ; end_of_file
62429: LD_VAR 0 2
62433: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62434: PPOPN 6
62436: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62437: LD_INT 0
62439: PPUSH
// begin if not units then
62440: LD_VAR 0 1
62444: NOT
62445: IFFALSE 62449
// exit ;
62447: GO 62483
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62449: LD_VAR 0 1
62453: PPUSH
62454: LD_VAR 0 2
62458: PPUSH
62459: LD_VAR 0 3
62463: PPUSH
62464: LD_VAR 0 4
62468: PPUSH
62469: LD_VAR 0 5
62473: PPUSH
62474: LD_VAR 0 6
62478: PPUSH
62479: CALL 60726 0 6
// end ;
62483: PPOPN 7
62485: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62486: LD_EXP 3
62490: PUSH
62491: LD_INT 4
62493: EQUAL
62494: IFFALSE 62530
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62496: LD_STRING setGameDifficulty(
62498: PUSH
62499: LD_OWVAR 67
62503: STR
62504: PUSH
62505: LD_STRING )
62507: STR
62508: PPUSH
62509: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62513: LD_STRING displayDifficulty(
62515: PUSH
62516: LD_OWVAR 67
62520: STR
62521: PUSH
62522: LD_STRING )
62524: STR
62525: PPUSH
62526: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62530: CALL 62559 0 0
// end ; end_of_file
62534: PPOPN 1
62536: END
// every 0 0$1 do
62537: GO 62539
62539: DISABLE
// begin enable ;
62540: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62541: LD_STRING updateTimer(
62543: PUSH
62544: LD_OWVAR 1
62548: STR
62549: PUSH
62550: LD_STRING );
62552: STR
62553: PPUSH
62554: CALL_OW 559
// end ;
62558: END
// export function SOS_MapStart ( ) ; begin
62559: LD_INT 0
62561: PPUSH
// UpdateFactoryWaypoints ( ) ;
62562: CALL 63493 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62566: CALL 63745 0 0
// ParseMultiDataToLua ( ) ;
62570: CALL 63892 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62574: LD_STRING setSpecLogoNumber(
62576: PUSH
62577: LD_INT 2
62579: STR
62580: PUSH
62581: LD_STRING ,
62583: STR
62584: PUSH
62585: LD_INT 1
62587: STR
62588: PUSH
62589: LD_STRING )
62591: STR
62592: PPUSH
62593: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62597: LD_STRING setSpecLogoNumber(
62599: PUSH
62600: LD_INT 3
62602: STR
62603: PUSH
62604: LD_STRING ,
62606: STR
62607: PUSH
62608: LD_INT 2
62610: STR
62611: PUSH
62612: LD_STRING )
62614: STR
62615: PPUSH
62616: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62620: LD_STRING setSpecLogoNumber(
62622: PUSH
62623: LD_INT 4
62625: STR
62626: PUSH
62627: LD_STRING ,
62629: STR
62630: PUSH
62631: LD_INT 3
62633: STR
62634: PUSH
62635: LD_STRING )
62637: STR
62638: PPUSH
62639: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62643: LD_STRING setSpecLogoNumber(
62645: PUSH
62646: LD_INT 5
62648: STR
62649: PUSH
62650: LD_STRING ,
62652: STR
62653: PUSH
62654: LD_INT 4
62656: STR
62657: PUSH
62658: LD_STRING )
62660: STR
62661: PPUSH
62662: CALL_OW 559
// end ;
62666: LD_VAR 0 1
62670: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62671: LD_INT 0
62673: PPUSH
62674: PPUSH
62675: PPUSH
62676: PPUSH
62677: PPUSH
62678: PPUSH
62679: PPUSH
62680: PPUSH
62681: PPUSH
// for i := 1 to 8 do
62682: LD_ADDR_VAR 0 2
62686: PUSH
62687: DOUBLE
62688: LD_INT 1
62690: DEC
62691: ST_TO_ADDR
62692: LD_INT 8
62694: PUSH
62695: FOR_TO
62696: IFFALSE 63081
// begin if mpSidePositions [ i ] then
62698: LD_EXP 7
62702: PUSH
62703: LD_VAR 0 2
62707: ARRAY
62708: IFFALSE 63079
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62710: LD_ADDR_VAR 0 7
62714: PUSH
62715: LD_INT 22
62717: PUSH
62718: LD_VAR 0 2
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 21
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PPUSH
62741: CALL_OW 69
62745: PPUSH
62746: CALL 12896 0 1
62750: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62751: LD_ADDR_VAR 0 9
62755: PUSH
62756: LD_INT 22
62758: PUSH
62759: LD_VAR 0 2
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 2
62770: PUSH
62771: LD_INT 30
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 30
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: LIST
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PPUSH
62800: CALL_OW 69
62804: ST_TO_ADDR
// crates := 0 ;
62805: LD_ADDR_VAR 0 4
62809: PUSH
62810: LD_INT 0
62812: ST_TO_ADDR
// oil := 0 ;
62813: LD_ADDR_VAR 0 5
62817: PUSH
62818: LD_INT 0
62820: ST_TO_ADDR
// sib := 0 ;
62821: LD_ADDR_VAR 0 6
62825: PUSH
62826: LD_INT 0
62828: ST_TO_ADDR
// if bases then
62829: LD_VAR 0 9
62833: IFFALSE 62939
// begin for j in bases do
62835: LD_ADDR_VAR 0 3
62839: PUSH
62840: LD_VAR 0 9
62844: PUSH
62845: FOR_IN
62846: IFFALSE 62937
// begin base := GetBase ( j ) ;
62848: LD_ADDR_VAR 0 8
62852: PUSH
62853: LD_VAR 0 3
62857: PPUSH
62858: CALL_OW 274
62862: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
62863: LD_ADDR_VAR 0 4
62867: PUSH
62868: LD_VAR 0 4
62872: PUSH
62873: LD_VAR 0 8
62877: PPUSH
62878: LD_INT 1
62880: PPUSH
62881: CALL_OW 275
62885: PLUS
62886: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
62887: LD_ADDR_VAR 0 5
62891: PUSH
62892: LD_VAR 0 5
62896: PUSH
62897: LD_VAR 0 8
62901: PPUSH
62902: LD_INT 2
62904: PPUSH
62905: CALL_OW 275
62909: PLUS
62910: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
62911: LD_ADDR_VAR 0 6
62915: PUSH
62916: LD_VAR 0 6
62920: PUSH
62921: LD_VAR 0 8
62925: PPUSH
62926: LD_INT 3
62928: PPUSH
62929: CALL_OW 275
62933: PLUS
62934: ST_TO_ADDR
// end ;
62935: GO 62845
62937: POP
62938: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
62939: LD_STRING setSpecText(
62941: PUSH
62942: LD_VAR 0 2
62946: STR
62947: PUSH
62948: LD_STRING ,
62950: STR
62951: PUSH
62952: LD_INT 2
62954: STR
62955: PUSH
62956: LD_STRING ,
62958: STR
62959: PUSH
62960: LD_VAR 0 4
62964: STR
62965: PUSH
62966: LD_STRING )
62968: STR
62969: PPUSH
62970: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
62974: LD_STRING setSpecText(
62976: PUSH
62977: LD_VAR 0 2
62981: STR
62982: PUSH
62983: LD_STRING ,
62985: STR
62986: PUSH
62987: LD_INT 3
62989: STR
62990: PUSH
62991: LD_STRING ,
62993: STR
62994: PUSH
62995: LD_VAR 0 5
62999: STR
63000: PUSH
63001: LD_STRING )
63003: STR
63004: PPUSH
63005: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63009: LD_STRING setSpecText(
63011: PUSH
63012: LD_VAR 0 2
63016: STR
63017: PUSH
63018: LD_STRING ,
63020: STR
63021: PUSH
63022: LD_INT 4
63024: STR
63025: PUSH
63026: LD_STRING ,
63028: STR
63029: PUSH
63030: LD_VAR 0 6
63034: STR
63035: PUSH
63036: LD_STRING )
63038: STR
63039: PPUSH
63040: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63044: LD_STRING setSpecText(
63046: PUSH
63047: LD_VAR 0 2
63051: STR
63052: PUSH
63053: LD_STRING ,
63055: STR
63056: PUSH
63057: LD_INT 5
63059: STR
63060: PUSH
63061: LD_STRING ,
63063: STR
63064: PUSH
63065: LD_VAR 0 7
63069: STR
63070: PUSH
63071: LD_STRING )
63073: STR
63074: PPUSH
63075: CALL_OW 559
// end ; end ;
63079: GO 62695
63081: POP
63082: POP
// end ;
63083: LD_VAR 0 1
63087: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63088: LD_INT 2
63090: PUSH
63091: LD_INT 30
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 30
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: LIST
63115: PPUSH
63116: CALL_OW 69
63120: IFFALSE 63130
63122: GO 63124
63124: DISABLE
// begin enable ;
63125: ENABLE
// UpdateSpectatorBar ;
63126: CALL 62671 0 0
// end ;
63130: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63131: LD_INT 0
63133: PPUSH
// end ;
63134: LD_VAR 0 12
63138: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63139: LD_INT 0
63141: PPUSH
63142: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63143: LD_VAR 0 1
63147: NOT
63148: IFTRUE 63167
63150: PUSH
63151: LD_VAR 0 2
63155: PPUSH
63156: LD_VAR 0 3
63160: PPUSH
63161: CALL_OW 488
63165: NOT
63166: OR
63167: IFTRUE 63202
63169: PUSH
63170: LD_VAR 0 1
63174: PPUSH
63175: CALL_OW 266
63179: PUSH
63180: LD_INT 3
63182: NONEQUAL
63183: IFFALSE 63201
63185: PUSH
63186: LD_VAR 0 1
63190: PPUSH
63191: CALL_OW 247
63195: PUSH
63196: LD_INT 1
63198: EQUAL
63199: NOT
63200: AND
63201: OR
63202: IFFALSE 63206
// exit ;
63204: GO 63488
// if GetType ( factory ) = unit_human then
63206: LD_VAR 0 1
63210: PPUSH
63211: CALL_OW 247
63215: PUSH
63216: LD_INT 1
63218: EQUAL
63219: IFFALSE 63236
// factory := IsInUnit ( factory ) ;
63221: LD_ADDR_VAR 0 1
63225: PUSH
63226: LD_VAR 0 1
63230: PPUSH
63231: CALL_OW 310
63235: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63236: LD_VAR 0 1
63240: PPUSH
63241: CALL_OW 266
63245: PUSH
63246: LD_INT 3
63248: NONEQUAL
63249: IFFALSE 63253
// exit ;
63251: GO 63488
// for i := 1 to Count ( factoryWaypoints ) do
63253: LD_ADDR_VAR 0 5
63257: PUSH
63258: DOUBLE
63259: LD_INT 1
63261: DEC
63262: ST_TO_ADDR
63263: LD_EXP 60
63267: PPUSH
63268: CALL 12896 0 1
63272: PUSH
63273: FOR_TO
63274: IFFALSE 63436
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63276: LD_VAR 0 2
63280: PPUSH
63281: LD_VAR 0 3
63285: PPUSH
63286: CALL_OW 428
63290: PUSH
63291: LD_EXP 60
63295: PUSH
63296: LD_VAR 0 5
63300: ARRAY
63301: PUSH
63302: LD_INT 2
63304: ARRAY
63305: EQUAL
63306: IFFALSE 63338
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63308: LD_ADDR_EXP 60
63312: PUSH
63313: LD_EXP 60
63317: PPUSH
63318: LD_VAR 0 5
63322: PPUSH
63323: CALL_OW 3
63327: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63328: CALL 63493 0 0
// exit ;
63332: POP
63333: POP
63334: GO 63488
// end else
63336: GO 63434
// if factory = factoryWaypoints [ i ] [ 2 ] then
63338: LD_VAR 0 1
63342: PUSH
63343: LD_EXP 60
63347: PUSH
63348: LD_VAR 0 5
63352: ARRAY
63353: PUSH
63354: LD_INT 2
63356: ARRAY
63357: EQUAL
63358: IFFALSE 63434
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63360: LD_ADDR_EXP 60
63364: PUSH
63365: LD_EXP 60
63369: PPUSH
63370: LD_VAR 0 5
63374: PPUSH
63375: CALL_OW 3
63379: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63380: LD_ADDR_EXP 60
63384: PUSH
63385: LD_EXP 60
63389: PPUSH
63390: LD_VAR 0 1
63394: PPUSH
63395: CALL_OW 255
63399: PUSH
63400: LD_VAR 0 1
63404: PUSH
63405: LD_VAR 0 2
63409: PUSH
63410: LD_VAR 0 3
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: PPUSH
63421: CALL 48862 0 2
63425: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63426: CALL 63493 0 0
// exit ;
63430: POP
63431: POP
63432: GO 63488
// end ; end ;
63434: GO 63273
63436: POP
63437: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63438: LD_ADDR_EXP 60
63442: PUSH
63443: LD_EXP 60
63447: PPUSH
63448: LD_VAR 0 1
63452: PPUSH
63453: CALL_OW 255
63457: PUSH
63458: LD_VAR 0 1
63462: PUSH
63463: LD_VAR 0 2
63467: PUSH
63468: LD_VAR 0 3
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: PPUSH
63479: CALL 48862 0 2
63483: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63484: CALL 63493 0 0
// end ;
63488: LD_VAR 0 4
63492: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63493: LD_INT 0
63495: PPUSH
63496: PPUSH
63497: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63498: LD_STRING resetFactoryWaypoint();
63500: PPUSH
63501: CALL_OW 559
// if factoryWaypoints then
63505: LD_EXP 60
63509: IFFALSE 63630
// begin list := factoryWaypoints ;
63511: LD_ADDR_VAR 0 3
63515: PUSH
63516: LD_EXP 60
63520: ST_TO_ADDR
// for i := 1 to list do
63521: LD_ADDR_VAR 0 2
63525: PUSH
63526: DOUBLE
63527: LD_INT 1
63529: DEC
63530: ST_TO_ADDR
63531: LD_VAR 0 3
63535: PUSH
63536: FOR_TO
63537: IFFALSE 63628
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63539: LD_STRING setFactoryWaypointXY(
63541: PUSH
63542: LD_VAR 0 3
63546: PUSH
63547: LD_VAR 0 2
63551: ARRAY
63552: PUSH
63553: LD_INT 1
63555: ARRAY
63556: STR
63557: PUSH
63558: LD_STRING ,
63560: STR
63561: PUSH
63562: LD_VAR 0 3
63566: PUSH
63567: LD_VAR 0 2
63571: ARRAY
63572: PUSH
63573: LD_INT 2
63575: ARRAY
63576: STR
63577: PUSH
63578: LD_STRING ,
63580: STR
63581: PUSH
63582: LD_VAR 0 3
63586: PUSH
63587: LD_VAR 0 2
63591: ARRAY
63592: PUSH
63593: LD_INT 3
63595: ARRAY
63596: STR
63597: PUSH
63598: LD_STRING ,
63600: STR
63601: PUSH
63602: LD_VAR 0 3
63606: PUSH
63607: LD_VAR 0 2
63611: ARRAY
63612: PUSH
63613: LD_INT 4
63615: ARRAY
63616: STR
63617: PUSH
63618: LD_STRING )
63620: STR
63621: PPUSH
63622: CALL_OW 559
63626: GO 63536
63628: POP
63629: POP
// end ; end ;
63630: LD_VAR 0 1
63634: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63635: LD_INT 0
63637: PPUSH
// if HexInfo ( x , y ) = warehouse then
63638: LD_VAR 0 2
63642: PPUSH
63643: LD_VAR 0 3
63647: PPUSH
63648: CALL_OW 428
63652: PUSH
63653: LD_VAR 0 1
63657: EQUAL
63658: IFFALSE 63685
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63660: LD_ADDR_EXP 62
63664: PUSH
63665: LD_EXP 62
63669: PPUSH
63670: LD_VAR 0 1
63674: PPUSH
63675: LD_INT 0
63677: PPUSH
63678: CALL_OW 1
63682: ST_TO_ADDR
63683: GO 63736
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63685: LD_ADDR_EXP 62
63689: PUSH
63690: LD_EXP 62
63694: PPUSH
63695: LD_VAR 0 1
63699: PPUSH
63700: LD_VAR 0 1
63704: PPUSH
63705: CALL_OW 255
63709: PUSH
63710: LD_VAR 0 1
63714: PUSH
63715: LD_VAR 0 2
63719: PUSH
63720: LD_VAR 0 3
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: PPUSH
63731: CALL_OW 1
63735: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63736: CALL 63745 0 0
// end ;
63740: LD_VAR 0 4
63744: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63745: LD_INT 0
63747: PPUSH
63748: PPUSH
63749: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63750: LD_STRING resetWarehouseGatheringPoints();
63752: PPUSH
63753: CALL_OW 559
// if warehouseGatheringPoints then
63757: LD_EXP 62
63761: IFFALSE 63887
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63763: LD_ADDR_VAR 0 3
63767: PUSH
63768: LD_EXP 62
63772: PPUSH
63773: CALL 52796 0 1
63777: ST_TO_ADDR
// for i := 1 to list do
63778: LD_ADDR_VAR 0 2
63782: PUSH
63783: DOUBLE
63784: LD_INT 1
63786: DEC
63787: ST_TO_ADDR
63788: LD_VAR 0 3
63792: PUSH
63793: FOR_TO
63794: IFFALSE 63885
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63796: LD_STRING setWarehouseGatheringPointXY(
63798: PUSH
63799: LD_VAR 0 3
63803: PUSH
63804: LD_VAR 0 2
63808: ARRAY
63809: PUSH
63810: LD_INT 1
63812: ARRAY
63813: STR
63814: PUSH
63815: LD_STRING ,
63817: STR
63818: PUSH
63819: LD_VAR 0 3
63823: PUSH
63824: LD_VAR 0 2
63828: ARRAY
63829: PUSH
63830: LD_INT 2
63832: ARRAY
63833: STR
63834: PUSH
63835: LD_STRING ,
63837: STR
63838: PUSH
63839: LD_VAR 0 3
63843: PUSH
63844: LD_VAR 0 2
63848: ARRAY
63849: PUSH
63850: LD_INT 3
63852: ARRAY
63853: STR
63854: PUSH
63855: LD_STRING ,
63857: STR
63858: PUSH
63859: LD_VAR 0 3
63863: PUSH
63864: LD_VAR 0 2
63868: ARRAY
63869: PUSH
63870: LD_INT 4
63872: ARRAY
63873: STR
63874: PUSH
63875: LD_STRING )
63877: STR
63878: PPUSH
63879: CALL_OW 559
63883: GO 63793
63885: POP
63886: POP
// end ; end ;
63887: LD_VAR 0 1
63891: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
63892: LD_INT 0
63894: PPUSH
63895: PPUSH
// if not mpSidePositions then
63896: LD_EXP 7
63900: NOT
63901: IFFALSE 63905
// exit ;
63903: GO 63976
// result :=  ;
63905: LD_ADDR_VAR 0 1
63909: PUSH
63910: LD_STRING 
63912: ST_TO_ADDR
// for i := 1 to 8 do
63913: LD_ADDR_VAR 0 2
63917: PUSH
63918: DOUBLE
63919: LD_INT 1
63921: DEC
63922: ST_TO_ADDR
63923: LD_INT 8
63925: PUSH
63926: FOR_TO
63927: IFFALSE 63957
// begin result := result & mpSidePositions [ i ] & ; ;
63929: LD_ADDR_VAR 0 1
63933: PUSH
63934: LD_VAR 0 1
63938: PUSH
63939: LD_EXP 7
63943: PUSH
63944: LD_VAR 0 2
63948: ARRAY
63949: STR
63950: PUSH
63951: LD_STRING ;
63953: STR
63954: ST_TO_ADDR
// end ;
63955: GO 63926
63957: POP
63958: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
63959: LD_STRING setMultiplayerRealPosition("
63961: PUSH
63962: LD_VAR 0 1
63966: STR
63967: PUSH
63968: LD_STRING ");
63970: STR
63971: PPUSH
63972: CALL_OW 559
// end ;
63976: LD_VAR 0 1
63980: RET
