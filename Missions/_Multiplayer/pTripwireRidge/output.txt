// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2728 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3104 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 100
 809: PUSH
 810: LD_INT 120
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 8
 838: PUSH
 839: LD_INT 9
 841: PUSH
 842: LD_INT 7
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 10
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: EMPTY
 871: LIST
 872: PUSH
 873: LD_EXP 19
 877: UNION
 878: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 879: LD_VAR 0 1
 883: PUSH
 884: LD_INT 2
 886: EQUAL
 887: IFFALSE 899
// baseLevel := 1 else
 889: LD_ADDR_VAR 0 7
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
 897: GO 913
// baseLevel := mpGameSettings [ 1 ] ;
 899: LD_ADDR_VAR 0 7
 903: PUSH
 904: LD_EXP 6
 908: PUSH
 909: LD_INT 1
 911: ARRAY
 912: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 913: LD_ADDR_EXP 24
 917: PUSH
 918: LD_EXP 6
 922: PUSH
 923: LD_INT 2
 925: ARRAY
 926: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 927: LD_ADDR_EXP 25
 931: PUSH
 932: LD_EXP 6
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 941: LD_ADDR_EXP 15
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 4
 953: ARRAY
 954: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 955: LD_ADDR_EXP 27
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 5
 967: ARRAY
 968: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 969: LD_ADDR_VAR 0 5
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 6
 981: ARRAY
 982: PUSH
 983: LD_INT 0
 985: GREATER
 986: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 987: LD_ADDR_VAR 0 6
 991: PUSH
 992: LD_EXP 6
 996: PUSH
 997: LD_INT 7
 999: ARRAY
1000: PUSH
1001: LD_INT 0
1003: GREATER
1004: ST_TO_ADDR
// mpKingArea := 0 ;
1005: LD_ADDR_EXP 34
1009: PUSH
1010: LD_INT 0
1012: ST_TO_ADDR
// mpPoints := 0 ;
1013: LD_ADDR_EXP 35
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpEmissions := 0 ;
1021: LD_ADDR_EXP 37
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// kingArea := 0 ;
1029: LD_ADDR_EXP 1
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingCamArea := 0 ;
1037: LD_ADDR_EXP 2
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1045: LD_EXP 6
1049: PUSH
1050: LD_INT 9
1052: ARRAY
1053: IFFALSE 1185
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1055: LD_ADDR_EXP 36
1059: PUSH
1060: LD_INT 1
1062: PUSH
1063: LD_INT 1
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 1
1080: PUSH
1081: LD_INT 1
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 3
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: LD_INT 12
1102: PUSH
1103: LD_INT 1
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 24
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: LD_INT 12
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 23
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 21
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 42
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 21
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 42
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1185: LD_ADDR_EXP 16
1189: PUSH
1190: LD_EXP 6
1194: PUSH
1195: LD_INT 11
1197: ARRAY
1198: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1199: LD_ADDR_EXP 22
1203: PUSH
1204: LD_EXP 6
1208: PUSH
1209: LD_INT 12
1211: ARRAY
1212: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1213: LD_ADDR_EXP 26
1217: PUSH
1218: LD_EXP 6
1222: PUSH
1223: LD_INT 13
1225: ARRAY
1226: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1227: LD_ADDR_EXP 33
1231: PUSH
1232: LD_EXP 6
1236: PUSH
1237: LD_INT 14
1239: ARRAY
1240: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1241: LD_ADDR_EXP 30
1245: PUSH
1246: LD_EXP 6
1250: PUSH
1251: LD_INT 15
1253: ARRAY
1254: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1255: LD_ADDR_EXP 28
1259: PUSH
1260: LD_EXP 6
1264: PUSH
1265: LD_INT 18
1267: ARRAY
1268: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1269: LD_ADDR_EXP 20
1273: PUSH
1274: LD_EXP 6
1278: PUSH
1279: LD_INT 21
1281: ARRAY
1282: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1283: LD_ADDR_EXP 31
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 2
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 4
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 6
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1314: LD_ADDR_VAR 0 8
1318: PUSH
1319: LD_INT 15
1321: PPUSH
1322: LD_INT 2
1324: PPUSH
1325: CALL 52901 0 2
1329: PUSH
1330: LD_INT 16
1332: PPUSH
1333: LD_INT 1
1335: PPUSH
1336: CALL 52901 0 2
1340: PUSH
1341: LD_INT 17
1343: PPUSH
1344: LD_INT 2
1346: PPUSH
1347: CALL 52901 0 2
1351: PUSH
1352: LD_INT 18
1354: PPUSH
1355: LD_INT 4
1357: PPUSH
1358: CALL 52901 0 2
1362: PUSH
1363: LD_INT 19
1365: PPUSH
1366: LD_INT 4
1368: PPUSH
1369: CALL 52901 0 2
1373: PUSH
1374: LD_INT 20
1376: PPUSH
1377: LD_INT 5
1379: PPUSH
1380: CALL 52901 0 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1393: LD_ADDR_VAR 0 3
1397: PUSH
1398: DOUBLE
1399: LD_INT 1
1401: DEC
1402: ST_TO_ADDR
1403: LD_VAR 0 8
1407: PPUSH
1408: CALL 12250 0 1
1412: PUSH
1413: FOR_TO
1414: IFFALSE 1518
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1416: LD_ADDR_EXP 21
1420: PUSH
1421: LD_EXP 21
1425: PPUSH
1426: LD_VAR 0 3
1430: PPUSH
1431: LD_VAR 0 8
1435: PUSH
1436: LD_VAR 0 3
1440: ARRAY
1441: PUSH
1442: LD_INT 1
1444: ARRAY
1445: PPUSH
1446: LD_VAR 0 8
1450: PUSH
1451: LD_VAR 0 3
1455: ARRAY
1456: PUSH
1457: LD_INT 3
1459: ARRAY
1460: PPUSH
1461: LD_INT 10
1463: PPUSH
1464: CALL_OW 272
1468: PUSH
1469: LD_VAR 0 8
1473: PUSH
1474: LD_VAR 0 3
1478: ARRAY
1479: PUSH
1480: LD_INT 2
1482: ARRAY
1483: PPUSH
1484: LD_VAR 0 8
1488: PUSH
1489: LD_VAR 0 3
1493: ARRAY
1494: PUSH
1495: LD_INT 3
1497: ARRAY
1498: PPUSH
1499: LD_INT 10
1501: PPUSH
1502: CALL_OW 273
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 1
1515: ST_TO_ADDR
1516: GO 1413
1518: POP
1519: POP
// if hasOil then
1520: LD_VAR 0 5
1524: IFFALSE 1635
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1526: LD_ADDR_VAR 0 4
1530: PUSH
1531: LD_EXP 6
1535: PUSH
1536: LD_INT 6
1538: ARRAY
1539: PUSH
1540: LD_INT 2
1542: EQUAL
1543: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1544: LD_ADDR_EXP 12
1548: PUSH
1549: LD_INT 21
1551: PPUSH
1552: LD_VAR 0 4
1556: PPUSH
1557: CALL 52734 0 2
1561: PUSH
1562: LD_INT 26
1564: PPUSH
1565: LD_VAR 0 4
1569: PPUSH
1570: CALL 52734 0 2
1574: PUSH
1575: LD_INT 31
1577: PPUSH
1578: LD_VAR 0 4
1582: PPUSH
1583: CALL 52734 0 2
1587: PUSH
1588: LD_INT 36
1590: PPUSH
1591: LD_VAR 0 4
1595: PPUSH
1596: CALL 52734 0 2
1600: PUSH
1601: LD_INT 41
1603: PPUSH
1604: LD_VAR 0 4
1608: PPUSH
1609: CALL 52734 0 2
1613: PUSH
1614: LD_INT 46
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 52734 0 2
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: ST_TO_ADDR
// end ; if hasSib then
1635: LD_VAR 0 6
1639: IFFALSE 1750
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1641: LD_ADDR_VAR 0 4
1645: PUSH
1646: LD_EXP 6
1650: PUSH
1651: LD_INT 7
1653: ARRAY
1654: PUSH
1655: LD_INT 2
1657: EQUAL
1658: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1659: LD_ADDR_EXP 13
1663: PUSH
1664: LD_INT 22
1666: PPUSH
1667: LD_VAR 0 4
1671: PPUSH
1672: CALL 52734 0 2
1676: PUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_VAR 0 4
1684: PPUSH
1685: CALL 52734 0 2
1689: PUSH
1690: LD_INT 32
1692: PPUSH
1693: LD_VAR 0 4
1697: PPUSH
1698: CALL 52734 0 2
1702: PUSH
1703: LD_INT 37
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL 52734 0 2
1715: PUSH
1716: LD_INT 42
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: CALL 52734 0 2
1728: PUSH
1729: LD_INT 47
1731: PPUSH
1732: LD_VAR 0 4
1736: PPUSH
1737: CALL 52734 0 2
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1750: LD_VAR 0 7
1754: PUSH
1755: LD_INT 1
1757: GREATEREQUAL
1758: IFFALSE 1770
// mpDepots := startPos ;
1760: LD_ADDR_EXP 14
1764: PUSH
1765: LD_VAR 0 8
1769: ST_TO_ADDR
// if baseLevel >= 2 then
1770: LD_VAR 0 7
1774: PUSH
1775: LD_INT 2
1777: GREATEREQUAL
1778: IFFALSE 2093
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1780: LD_ADDR_EXP 17
1784: PUSH
1785: LD_INT 31
1787: PUSH
1788: LD_INT 23
1790: PPUSH
1791: LD_INT 5
1793: PPUSH
1794: CALL 52901 0 2
1798: ADD
1799: PUSH
1800: LD_INT 31
1802: PUSH
1803: LD_INT 24
1805: PPUSH
1806: LD_INT 5
1808: PPUSH
1809: CALL 52901 0 2
1813: ADD
1814: PUSH
1815: LD_INT 4
1817: PUSH
1818: LD_INT 25
1820: PPUSH
1821: LD_INT 5
1823: PPUSH
1824: CALL 52901 0 2
1828: ADD
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 31
1837: PUSH
1838: LD_INT 28
1840: PPUSH
1841: LD_INT 4
1843: PPUSH
1844: CALL 52901 0 2
1848: ADD
1849: PUSH
1850: LD_INT 31
1852: PUSH
1853: LD_INT 29
1855: PPUSH
1856: LD_INT 4
1858: PPUSH
1859: CALL 52901 0 2
1863: ADD
1864: PUSH
1865: LD_INT 4
1867: PUSH
1868: LD_INT 30
1870: PPUSH
1871: LD_INT 4
1873: PPUSH
1874: CALL 52901 0 2
1878: ADD
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 31
1887: PUSH
1888: LD_INT 33
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL 52901 0 2
1898: ADD
1899: PUSH
1900: LD_INT 31
1902: PUSH
1903: LD_INT 34
1905: PPUSH
1906: LD_INT 5
1908: PPUSH
1909: CALL 52901 0 2
1913: ADD
1914: PUSH
1915: LD_INT 4
1917: PUSH
1918: LD_INT 35
1920: PPUSH
1921: LD_INT 0
1923: PPUSH
1924: CALL 52901 0 2
1928: ADD
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 31
1937: PUSH
1938: LD_INT 38
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL 52901 0 2
1948: ADD
1949: PUSH
1950: LD_INT 31
1952: PUSH
1953: LD_INT 39
1955: PPUSH
1956: LD_INT 0
1958: PPUSH
1959: CALL 52901 0 2
1963: ADD
1964: PUSH
1965: LD_INT 4
1967: PUSH
1968: LD_INT 40
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL 52901 0 2
1978: ADD
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 31
1987: PUSH
1988: LD_INT 43
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: CALL 52901 0 2
1998: ADD
1999: PUSH
2000: LD_INT 31
2002: PUSH
2003: LD_INT 44
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL 52901 0 2
2013: ADD
2014: PUSH
2015: LD_INT 4
2017: PUSH
2018: LD_INT 45
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL 52901 0 2
2028: ADD
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 31
2037: PUSH
2038: LD_INT 49
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: CALL 52901 0 2
2048: ADD
2049: PUSH
2050: LD_INT 31
2052: PUSH
2053: LD_INT 50
2055: PPUSH
2056: LD_INT 2
2058: PPUSH
2059: CALL 52901 0 2
2063: ADD
2064: PUSH
2065: LD_INT 4
2067: PUSH
2068: LD_INT 48
2070: PPUSH
2071: LD_INT 2
2073: PPUSH
2074: CALL 52901 0 2
2078: ADD
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: ST_TO_ADDR
// end ; end ;
2093: LD_VAR 0 2
2097: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2098: GO 2100
2100: DISABLE
2101: LD_INT 0
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
// begin if not mpShipments then
2111: LD_EXP 27
2115: NOT
2116: IFFALSE 2120
// exit ;
2118: GO 2641
// case mpShipments of 1 :
2120: LD_EXP 27
2124: PUSH
2125: LD_INT 1
2127: DOUBLE
2128: EQUAL
2129: IFTRUE 2133
2131: GO 2168
2133: POP
// begin time := 0 0$30 ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: LD_INT 1050
2141: ST_TO_ADDR
// normalTime := 0 0$30 ;
2142: LD_ADDR_VAR 0 6
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// maxTime := 1 1$20 ;
2150: LD_ADDR_VAR 0 8
2154: PUSH
2155: LD_INT 2800
2157: ST_TO_ADDR
// delayTime := 0 0$5 ;
2158: LD_ADDR_VAR 0 7
2162: PUSH
2163: LD_INT 175
2165: ST_TO_ADDR
// end ; 2 :
2166: GO 2298
2168: LD_INT 2
2170: DOUBLE
2171: EQUAL
2172: IFTRUE 2176
2174: GO 2211
2176: POP
// begin time := 0 0$25 ;
2177: LD_ADDR_VAR 0 4
2181: PUSH
2182: LD_INT 875
2184: ST_TO_ADDR
// normalTime := 0 0$25 ;
2185: LD_ADDR_VAR 0 6
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// maxTime := 1 1$10 ;
2193: LD_ADDR_VAR 0 8
2197: PUSH
2198: LD_INT 2450
2200: ST_TO_ADDR
// delayTime := 0 0$4 ;
2201: LD_ADDR_VAR 0 7
2205: PUSH
2206: LD_INT 140
2208: ST_TO_ADDR
// end ; 3 :
2209: GO 2298
2211: LD_INT 3
2213: DOUBLE
2214: EQUAL
2215: IFTRUE 2219
2217: GO 2254
2219: POP
// begin time := 0 0$20 ;
2220: LD_ADDR_VAR 0 4
2224: PUSH
2225: LD_INT 700
2227: ST_TO_ADDR
// normalTime := 0 0$20 ;
2228: LD_ADDR_VAR 0 6
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// maxTime := 1 1$00 ;
2236: LD_ADDR_VAR 0 8
2240: PUSH
2241: LD_INT 2100
2243: ST_TO_ADDR
// delayTime := 0 0$3 ;
2244: LD_ADDR_VAR 0 7
2248: PUSH
2249: LD_INT 105
2251: ST_TO_ADDR
// end ; 4 :
2252: GO 2298
2254: LD_INT 4
2256: DOUBLE
2257: EQUAL
2258: IFTRUE 2262
2260: GO 2297
2262: POP
// begin time := 0 0$15 ;
2263: LD_ADDR_VAR 0 4
2267: PUSH
2268: LD_INT 525
2270: ST_TO_ADDR
// normalTime := 0 0$15 ;
2271: LD_ADDR_VAR 0 6
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// maxTime := 0 0$55 ;
2279: LD_ADDR_VAR 0 8
2283: PUSH
2284: LD_INT 1925
2286: ST_TO_ADDR
// delayTime := 0 0$2 ;
2287: LD_ADDR_VAR 0 7
2291: PUSH
2292: LD_INT 70
2294: ST_TO_ADDR
// end ; end ;
2295: GO 2298
2297: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2298: LD_ADDR_VAR 0 3
2302: PUSH
2303: LD_INT 8
2305: PUSH
2306: LD_INT 9
2308: PUSH
2309: LD_INT 7
2311: PUSH
2312: LD_INT 12
2314: PUSH
2315: LD_INT 11
2317: PUSH
2318: LD_INT 10
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: ST_TO_ADDR
// areas := [ ] ;
2329: LD_ADDR_VAR 0 5
2333: PUSH
2334: EMPTY
2335: ST_TO_ADDR
// for i := 1 to 8 do
2336: LD_ADDR_VAR 0 1
2340: PUSH
2341: DOUBLE
2342: LD_INT 1
2344: DEC
2345: ST_TO_ADDR
2346: LD_INT 8
2348: PUSH
2349: FOR_TO
2350: IFFALSE 2397
// begin if not mpSidePositions [ i ] then
2352: LD_EXP 7
2356: PUSH
2357: LD_VAR 0 1
2361: ARRAY
2362: NOT
2363: IFFALSE 2367
// continue ;
2365: GO 2349
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2367: LD_ADDR_VAR 0 5
2371: PUSH
2372: LD_VAR 0 5
2376: PUSH
2377: LD_VAR 0 3
2381: PUSH
2382: LD_EXP 7
2386: PUSH
2387: LD_VAR 0 1
2391: ARRAY
2392: ARRAY
2393: ADD
2394: ST_TO_ADDR
// end ;
2395: GO 2349
2397: POP
2398: POP
// areas := areas diff 0 ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_INT 0
2411: DIFF
2412: ST_TO_ADDR
// x := 1 ;
2413: LD_ADDR_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// repeat wait ( time ) ;
2421: LD_VAR 0 4
2425: PPUSH
2426: CALL_OW 67
// x := Inc ( x ) ;
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: LD_VAR 0 2
2439: PPUSH
2440: CALL 49555 0 1
2444: ST_TO_ADDR
// if x > 5 then
2445: LD_VAR 0 2
2449: PUSH
2450: LD_INT 5
2452: GREATER
2453: IFFALSE 2463
// x := 1 ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// for i in areas do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: LD_VAR 0 5
2472: PUSH
2473: FOR_IN
2474: IFFALSE 2513
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2476: LD_VAR 0 1
2480: PPUSH
2481: LD_INT 1
2483: PPUSH
2484: CALL_OW 287
2488: PUSH
2489: LD_INT 20
2491: LESS
2492: IFFALSE 2511
// begin CreateCratesArea ( x , i , true ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_VAR 0 1
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 55
// end ; end ;
2511: GO 2473
2513: POP
2514: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) = 0 then
2515: LD_INT 14
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 287
2525: PUSH
2526: LD_INT 0
2528: EQUAL
2529: IFFALSE 2568
// begin for i := 1 to 3 do
2531: LD_ADDR_VAR 0 1
2535: PUSH
2536: DOUBLE
2537: LD_INT 1
2539: DEC
2540: ST_TO_ADDR
2541: LD_INT 3
2543: PUSH
2544: FOR_TO
2545: IFFALSE 2564
// CreateCratesArea ( x , MZBaseArea , true ) ;
2547: LD_VAR 0 2
2551: PPUSH
2552: LD_INT 14
2554: PPUSH
2555: LD_INT 1
2557: PPUSH
2558: CALL_OW 55
2562: GO 2544
2564: POP
2565: POP
// end else
2566: GO 2599
// if GetResourceArea ( MZBaseArea , mat_cans ) < 120 then
2568: LD_INT 14
2570: PPUSH
2571: LD_INT 1
2573: PPUSH
2574: CALL_OW 287
2578: PUSH
2579: LD_INT 120
2581: LESS
2582: IFFALSE 2599
// CreateCratesArea ( x , MZBaseArea , true ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_INT 14
2591: PPUSH
2592: LD_INT 1
2594: PPUSH
2595: CALL_OW 55
// time := time + delayTime ;
2599: LD_ADDR_VAR 0 4
2603: PUSH
2604: LD_VAR 0 4
2608: PUSH
2609: LD_VAR 0 7
2613: PLUS
2614: ST_TO_ADDR
// if time > maxTime then
2615: LD_VAR 0 4
2619: PUSH
2620: LD_VAR 0 8
2624: GREATER
2625: IFFALSE 2637
// time := normalTime ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: LD_VAR 0 6
2636: ST_TO_ADDR
// until false ;
2637: LD_INT 0
2639: IFFALSE 2421
// end ; end_of_file
2641: PPOPN 8
2643: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL 53699 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: CALL 7876 0 1
// end ;
2662: PPOPN 1
2664: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL 53716 0 1
// end ;
2674: PPOPN 1
2676: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL 8583 0 1
2686: PPOPN 1
2688: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: LD_VAR 0 2
2698: PPUSH
2699: CALL 53757 0 2
2703: PPOPN 2
2705: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2706: LD_VAR 0 1
2710: PPUSH
2711: LD_VAR 0 2
2715: PPUSH
2716: LD_VAR 0 3
2720: PPUSH
2721: CALL 8636 0 3
2725: PPOPN 3
2727: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2728: LD_INT 0
2730: PPUSH
2731: PPUSH
// disable ( mpActive ) ;
2732: LD_INT 100
2734: DISABLE_MARKED
// disable ( mpWin ) ;
2735: LD_INT 101
2737: DISABLE_MARKED
// disable ( mpLose ) ;
2738: LD_INT 102
2740: DISABLE_MARKED
// mpGameType := 0 ;
2741: LD_ADDR_EXP 3
2745: PUSH
2746: LD_INT 0
2748: ST_TO_ADDR
// mpGameSettings := [ ] ;
2749: LD_ADDR_EXP 6
2753: PUSH
2754: EMPTY
2755: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2756: LD_ADDR_EXP 4
2760: PUSH
2761: EMPTY
2762: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2763: LD_ADDR_EXP 5
2767: PUSH
2768: EMPTY
2769: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2770: LD_ADDR_EXP 29
2774: PUSH
2775: LD_INT 2
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2785: LD_ADDR_EXP 12
2789: PUSH
2790: EMPTY
2791: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2792: LD_ADDR_EXP 13
2796: PUSH
2797: EMPTY
2798: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2799: LD_ADDR_EXP 41
2803: PUSH
2804: EMPTY
2805: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2806: LD_ADDR_EXP 42
2810: PUSH
2811: EMPTY
2812: ST_TO_ADDR
// mpDepots := [ ] ;
2813: LD_ADDR_EXP 14
2817: PUSH
2818: EMPTY
2819: ST_TO_ADDR
// mpBuildings := [ ] ;
2820: LD_ADDR_EXP 17
2824: PUSH
2825: EMPTY
2826: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2827: LD_ADDR_EXP 18
2831: PUSH
2832: EMPTY
2833: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2834: LD_ADDR_EXP 19
2838: PUSH
2839: EMPTY
2840: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2841: LD_ADDR_EXP 20
2845: PUSH
2846: EMPTY
2847: ST_TO_ADDR
// mpStartingResources := [ ] ;
2848: LD_ADDR_EXP 15
2852: PUSH
2853: EMPTY
2854: ST_TO_ADDR
// mpStartPos := [ ] ;
2855: LD_ADDR_EXP 21
2859: PUSH
2860: EMPTY
2861: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2862: LD_ADDR_EXP 22
2866: PUSH
2867: LD_INT 1
2869: NEG
2870: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2871: LD_ADDR_EXP 23
2875: PUSH
2876: EMPTY
2877: ST_TO_ADDR
// mpApemans := [ ] ;
2878: LD_ADDR_EXP 30
2882: PUSH
2883: EMPTY
2884: ST_TO_ADDR
// mpApemansArea := [ ] ;
2885: LD_ADDR_EXP 31
2889: PUSH
2890: EMPTY
2891: ST_TO_ADDR
// mpRespawn := [ ] ;
2892: LD_ADDR_EXP 33
2896: PUSH
2897: EMPTY
2898: ST_TO_ADDR
// mpKingArea := 0 ;
2899: LD_ADDR_EXP 34
2903: PUSH
2904: LD_INT 0
2906: ST_TO_ADDR
// mpPoints := [ ] ;
2907: LD_ADDR_EXP 35
2911: PUSH
2912: EMPTY
2913: ST_TO_ADDR
// mpVehicles := 0 ;
2914: LD_ADDR_EXP 36
2918: PUSH
2919: LD_INT 0
2921: ST_TO_ADDR
// mpShipments := 0 ;
2922: LD_ADDR_EXP 27
2926: PUSH
2927: LD_INT 0
2929: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2930: LD_ADDR_EXP 40
2934: PUSH
2935: EMPTY
2936: PUSH
2937: EMPTY
2938: PUSH
2939: EMPTY
2940: PUSH
2941: EMPTY
2942: PUSH
2943: EMPTY
2944: PUSH
2945: EMPTY
2946: PUSH
2947: EMPTY
2948: PUSH
2949: EMPTY
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: LIST
2959: LIST
2960: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2961: LD_ADDR_EXP 32
2965: PUSH
2966: EMPTY
2967: PUSH
2968: EMPTY
2969: PUSH
2970: EMPTY
2971: PUSH
2972: EMPTY
2973: PUSH
2974: EMPTY
2975: PUSH
2976: EMPTY
2977: PUSH
2978: EMPTY
2979: PUSH
2980: EMPTY
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: LIST
2991: ST_TO_ADDR
// mpEmissions := 0 ;
2992: LD_ADDR_EXP 37
2996: PUSH
2997: LD_INT 0
2999: ST_TO_ADDR
// mpTeleports := 0 ;
3000: LD_ADDR_EXP 43
3004: PUSH
3005: LD_INT 0
3007: ST_TO_ADDR
// mpArtifacts := 0 ;
3008: LD_ADDR_EXP 44
3012: PUSH
3013: LD_INT 0
3015: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3016: LD_ADDR_EXP 25
3020: PUSH
3021: LD_INT 3
3023: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3024: LD_ADDR_EXP 24
3028: PUSH
3029: LD_INT 15
3031: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3032: LD_ADDR_EXP 38
3036: PUSH
3037: LD_INT 0
3039: ST_TO_ADDR
// mpGameActive := false ;
3040: LD_ADDR_EXP 39
3044: PUSH
3045: LD_INT 0
3047: ST_TO_ADDR
// mpBlockRespThread := false ;
3048: LD_ADDR_EXP 45
3052: PUSH
3053: LD_INT 0
3055: ST_TO_ADDR
// for i := 1 to 32 do
3056: LD_ADDR_VAR 0 2
3060: PUSH
3061: DOUBLE
3062: LD_INT 1
3064: DEC
3065: ST_TO_ADDR
3066: LD_INT 32
3068: PUSH
3069: FOR_TO
3070: IFFALSE 3097
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3072: LD_ADDR_EXP 6
3076: PUSH
3077: LD_EXP 6
3081: PPUSH
3082: LD_VAR 0 2
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: CALL_OW 1
3094: ST_TO_ADDR
3095: GO 3069
3097: POP
3098: POP
// end ;
3099: LD_VAR 0 1
3103: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3104: LD_INT 0
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
3110: PPUSH
3111: PPUSH
3112: PPUSH
3113: PPUSH
3114: PPUSH
3115: PPUSH
3116: PPUSH
3117: PPUSH
3118: PPUSH
3119: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3120: LD_ADDR_VAR 0 14
3124: PUSH
3125: LD_INT 1
3127: PUSH
3128: LD_INT 2
3130: PUSH
3131: LD_INT 3
3133: PUSH
3134: LD_INT 5
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: ST_TO_ADDR
// for i in gameTypes do
3143: LD_ADDR_VAR 0 2
3147: PUSH
3148: LD_VAR 0 14
3152: PUSH
3153: FOR_IN
3154: IFFALSE 3163
// disable ( i ) ;
3156: LD_VAR 0 2
3160: DISABLE_MARKED
3161: GO 3153
3163: POP
3164: POP
// if Multiplayer then
3165: LD_OWVAR 4
3169: IFFALSE 3353
// begin mpGameType := mp_game_type ;
3171: LD_ADDR_EXP 3
3175: PUSH
3176: LD_OWVAR 6
3180: ST_TO_ADDR
// your_side := mp_player_side ;
3181: LD_ADDR_OWVAR 2
3185: PUSH
3186: LD_OWVAR 7
3190: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3191: LD_ADDR_EXP 7
3195: PUSH
3196: LD_OWVAR 17
3200: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3201: LD_ADDR_EXP 8
3205: PUSH
3206: LD_OWVAR 15
3210: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3211: LD_ADDR_EXP 9
3215: PUSH
3216: LD_OWVAR 16
3220: ST_TO_ADDR
// mpTeams := mp_teams ;
3221: LD_ADDR_EXP 10
3225: PUSH
3226: LD_OWVAR 12
3230: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: DOUBLE
3237: LD_INT 1
3239: DEC
3240: ST_TO_ADDR
3241: LD_EXP 4
3245: PPUSH
3246: CALL 12250 0 1
3250: PUSH
3251: FOR_TO
3252: IFFALSE 3328
// begin setting := mpGameSettingsKeys [ i ] ;
3254: LD_ADDR_VAR 0 12
3258: PUSH
3259: LD_EXP 4
3263: PUSH
3264: LD_VAR 0 2
3268: ARRAY
3269: ST_TO_ADDR
// if setting then
3270: LD_VAR 0 12
3274: IFFALSE 3326
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3276: LD_ADDR_EXP 6
3280: PUSH
3281: LD_EXP 6
3285: PPUSH
3286: LD_VAR 0 2
3290: PPUSH
3291: LD_EXP 5
3295: PUSH
3296: LD_VAR 0 2
3300: ARRAY
3301: PUSH
3302: LD_VAR 0 2
3306: PUSH
3307: LD_INT 1
3309: MINUS
3310: PPUSH
3311: CALL_OW 426
3315: PUSH
3316: LD_INT 1
3318: PLUS
3319: ARRAY
3320: PPUSH
3321: CALL_OW 1
3325: ST_TO_ADDR
// end ;
3326: GO 3251
3328: POP
3329: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3330: LD_ADDR_EXP 11
3334: PUSH
3335: LD_EXP 8
3339: PUSH
3340: LD_INT 0
3342: PUSH
3343: EMPTY
3344: LIST
3345: DIFF
3346: PUSH
3347: LD_INT 1
3349: GREATER
3350: ST_TO_ADDR
// end else
3351: GO 3353
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3353: LD_EXP 3
3357: PPUSH
3358: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3362: LD_EXP 18
3366: PPUSH
3367: CALL 12250 0 1
3371: IFFALSE 3402
// begin for i in mpMarkedAreas do
3373: LD_ADDR_VAR 0 2
3377: PUSH
3378: LD_EXP 18
3382: PUSH
3383: FOR_IN
3384: IFFALSE 3400
// SetAreaMapShow ( i , 0 ) ;
3386: LD_VAR 0 2
3390: PPUSH
3391: LD_INT 0
3393: PPUSH
3394: CALL_OW 424
3398: GO 3383
3400: POP
3401: POP
// end ; for i := 1 to 8 do
3402: LD_ADDR_VAR 0 2
3406: PUSH
3407: DOUBLE
3408: LD_INT 1
3410: DEC
3411: ST_TO_ADDR
3412: LD_INT 8
3414: PUSH
3415: FOR_TO
3416: IFFALSE 4752
// begin if not mpSidePositions [ i ] then
3418: LD_EXP 7
3422: PUSH
3423: LD_VAR 0 2
3427: ARRAY
3428: NOT
3429: IFFALSE 3433
// continue ;
3431: GO 3415
// side := i ;
3433: LD_ADDR_VAR 0 7
3437: PUSH
3438: LD_VAR 0 2
3442: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3443: LD_ADDR_VAR 0 9
3447: PUSH
3448: LD_EXP 9
3452: PUSH
3453: LD_VAR 0 2
3457: ARRAY
3458: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3459: LD_ADDR_VAR 0 8
3463: PUSH
3464: LD_EXP 7
3468: PUSH
3469: LD_VAR 0 2
3473: ARRAY
3474: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3475: LD_EXP 12
3479: PPUSH
3480: CALL 12250 0 1
3484: IFFALSE 3561
// begin for j in mpOilDeposits [ pos ] do
3486: LD_ADDR_VAR 0 3
3490: PUSH
3491: LD_EXP 12
3495: PUSH
3496: LD_VAR 0 8
3500: ARRAY
3501: PUSH
3502: FOR_IN
3503: IFFALSE 3559
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3505: LD_VAR 0 3
3509: PUSH
3510: LD_INT 1
3512: ARRAY
3513: PPUSH
3514: LD_VAR 0 3
3518: PUSH
3519: LD_INT 2
3521: ARRAY
3522: PPUSH
3523: LD_INT 2
3525: PPUSH
3526: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3530: LD_VAR 0 3
3534: PUSH
3535: LD_INT 1
3537: ARRAY
3538: PPUSH
3539: LD_VAR 0 3
3543: PUSH
3544: LD_INT 2
3546: ARRAY
3547: PPUSH
3548: LD_VAR 0 7
3552: PPUSH
3553: CALL_OW 441
// end ;
3557: GO 3502
3559: POP
3560: POP
// end ; if Count ( mpSibDeposits ) then
3561: LD_EXP 13
3565: PPUSH
3566: CALL 12250 0 1
3570: IFFALSE 3647
// begin for j in mpSibDeposits [ pos ] do
3572: LD_ADDR_VAR 0 3
3576: PUSH
3577: LD_EXP 13
3581: PUSH
3582: LD_VAR 0 8
3586: ARRAY
3587: PUSH
3588: FOR_IN
3589: IFFALSE 3645
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3591: LD_VAR 0 3
3595: PUSH
3596: LD_INT 1
3598: ARRAY
3599: PPUSH
3600: LD_VAR 0 3
3604: PUSH
3605: LD_INT 2
3607: ARRAY
3608: PPUSH
3609: LD_INT 3
3611: PPUSH
3612: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3616: LD_VAR 0 3
3620: PUSH
3621: LD_INT 1
3623: ARRAY
3624: PPUSH
3625: LD_VAR 0 3
3629: PUSH
3630: LD_INT 2
3632: ARRAY
3633: PPUSH
3634: LD_VAR 0 7
3638: PPUSH
3639: CALL_OW 441
// end ;
3643: GO 3588
3645: POP
3646: POP
// end ; InitBc ;
3647: CALL_OW 21
// InitUc ;
3651: CALL_OW 18
// uc_side := side ;
3655: LD_ADDR_OWVAR 20
3659: PUSH
3660: LD_VAR 0 7
3664: ST_TO_ADDR
// uc_nation := nation ;
3665: LD_ADDR_OWVAR 21
3669: PUSH
3670: LD_VAR 0 9
3674: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3675: LD_EXP 22
3679: PUSH
3680: LD_INT 1
3682: NEG
3683: GREATER
3684: IFFALSE 3843
// begin x := mpStartPos [ pos ] [ 1 ] ;
3686: LD_ADDR_VAR 0 5
3690: PUSH
3691: LD_EXP 21
3695: PUSH
3696: LD_VAR 0 8
3700: ARRAY
3701: PUSH
3702: LD_INT 1
3704: ARRAY
3705: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3706: LD_ADDR_VAR 0 6
3710: PUSH
3711: LD_EXP 21
3715: PUSH
3716: LD_VAR 0 8
3720: ARRAY
3721: PUSH
3722: LD_INT 2
3724: ARRAY
3725: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3726: LD_VAR 0 5
3730: PPUSH
3731: LD_VAR 0 6
3735: PPUSH
3736: LD_INT 12
3738: PPUSH
3739: LD_INT 2
3741: PPUSH
3742: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3746: LD_ADDR_EXP 23
3750: PUSH
3751: LD_EXP 23
3755: PPUSH
3756: LD_VAR 0 7
3760: PPUSH
3761: LD_VAR 0 7
3765: PPUSH
3766: LD_VAR 0 5
3770: PPUSH
3771: LD_VAR 0 6
3775: PPUSH
3776: LD_INT 1
3778: PUSH
3779: LD_INT 100
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PUSH
3786: LD_INT 2
3788: PUSH
3789: LD_INT 70
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 3
3798: PUSH
3799: LD_INT 40
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: PUSH
3806: LD_INT 10
3808: PUSH
3809: LD_INT 25
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 20
3818: PUSH
3819: LD_INT 100
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: PPUSH
3833: CALL_OW 418
3837: PPUSH
3838: CALL_OW 1
3842: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3843: LD_EXP 14
3847: PPUSH
3848: CALL 12250 0 1
3852: IFFALSE 4036
// begin if mpGameType = GameTypeSurvival then
3854: LD_EXP 3
3858: PUSH
3859: LD_INT 2
3861: EQUAL
3862: IFFALSE 3882
// begin bc_level := 10 ;
3864: LD_ADDR_OWVAR 43
3868: PUSH
3869: LD_INT 10
3871: ST_TO_ADDR
// bc_type := b_warehouse ;
3872: LD_ADDR_OWVAR 42
3876: PUSH
3877: LD_INT 1
3879: ST_TO_ADDR
// end else
3880: GO 3898
// begin bc_level := 0 ;
3882: LD_ADDR_OWVAR 43
3886: PUSH
3887: LD_INT 0
3889: ST_TO_ADDR
// bc_type := b_depot ;
3890: LD_ADDR_OWVAR 42
3894: PUSH
3895: LD_INT 0
3897: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3898: LD_ADDR_VAR 0 4
3902: PUSH
3903: LD_EXP 14
3907: PUSH
3908: LD_VAR 0 8
3912: ARRAY
3913: PUSH
3914: LD_INT 1
3916: ARRAY
3917: PPUSH
3918: LD_EXP 14
3922: PUSH
3923: LD_VAR 0 8
3927: ARRAY
3928: PUSH
3929: LD_INT 2
3931: ARRAY
3932: PPUSH
3933: LD_EXP 14
3937: PUSH
3938: LD_VAR 0 8
3942: ARRAY
3943: PUSH
3944: LD_INT 3
3946: ARRAY
3947: PPUSH
3948: CALL_OW 47
3952: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3953: LD_VAR 0 4
3957: PPUSH
3958: LD_STRING @
3960: PUSH
3961: LD_VAR 0 7
3965: STR
3966: PPUSH
3967: CALL_OW 500
// if Count ( mpStartingResources ) then
3971: LD_EXP 15
3975: PPUSH
3976: CALL 12250 0 1
3980: IFFALSE 4034
// begin for j := 1 to mpStartingResources do
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_EXP 15
3996: PUSH
3997: FOR_TO
3998: IFFALSE 4032
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4000: LD_VAR 0 4
4004: PPUSH
4005: CALL_OW 274
4009: PPUSH
4010: LD_VAR 0 3
4014: PPUSH
4015: LD_EXP 15
4019: PUSH
4020: LD_VAR 0 3
4024: ARRAY
4025: PPUSH
4026: CALL_OW 277
4030: GO 3997
4032: POP
4033: POP
// end ; end else
4034: GO 4243
// if Count ( mpStartingResources ) then
4036: LD_EXP 15
4040: PPUSH
4041: CALL 12250 0 1
4045: IFFALSE 4243
// begin x := mpStartPos [ pos ] [ 1 ] ;
4047: LD_ADDR_VAR 0 5
4051: PUSH
4052: LD_EXP 21
4056: PUSH
4057: LD_VAR 0 8
4061: ARRAY
4062: PUSH
4063: LD_INT 1
4065: ARRAY
4066: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4067: LD_ADDR_VAR 0 6
4071: PUSH
4072: LD_EXP 21
4076: PUSH
4077: LD_VAR 0 8
4081: ARRAY
4082: PUSH
4083: LD_INT 2
4085: ARRAY
4086: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4087: LD_ADDR_VAR 0 3
4091: PUSH
4092: DOUBLE
4093: LD_INT 1
4095: DEC
4096: ST_TO_ADDR
4097: LD_EXP 15
4101: PUSH
4102: FOR_TO
4103: IFFALSE 4241
// begin resources := mpStartingResources [ j ] ;
4105: LD_ADDR_VAR 0 13
4109: PUSH
4110: LD_EXP 15
4114: PUSH
4115: LD_VAR 0 3
4119: ARRAY
4120: ST_TO_ADDR
// if resources = 0 then
4121: LD_VAR 0 13
4125: PUSH
4126: LD_INT 0
4128: EQUAL
4129: IFFALSE 4133
// continue ;
4131: GO 4102
// repeat if resources >= 50 then
4133: LD_VAR 0 13
4137: PUSH
4138: LD_INT 50
4140: GREATEREQUAL
4141: IFFALSE 4187
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4143: LD_VAR 0 3
4147: PPUSH
4148: LD_INT 5
4150: PPUSH
4151: LD_VAR 0 5
4155: PPUSH
4156: LD_VAR 0 6
4160: PPUSH
4161: LD_INT 6
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: CALL_OW 60
// resources := resources - 50 ;
4171: LD_ADDR_VAR 0 13
4175: PUSH
4176: LD_VAR 0 13
4180: PUSH
4181: LD_INT 50
4183: MINUS
4184: ST_TO_ADDR
// end else
4185: GO 4229
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4187: LD_VAR 0 3
4191: PPUSH
4192: LD_VAR 0 13
4196: PUSH
4197: LD_INT 10
4199: DIV
4200: PPUSH
4201: LD_VAR 0 5
4205: PPUSH
4206: LD_VAR 0 6
4210: PPUSH
4211: LD_INT 6
4213: PPUSH
4214: LD_INT 0
4216: PPUSH
4217: CALL_OW 60
// resources := 0 ;
4221: LD_ADDR_VAR 0 13
4225: PUSH
4226: LD_INT 0
4228: ST_TO_ADDR
// end ; until resources <= 0 ;
4229: LD_VAR 0 13
4233: PUSH
4234: LD_INT 0
4236: LESSEQUAL
4237: IFFALSE 4133
// end ;
4239: GO 4102
4241: POP
4242: POP
// end ; if Count ( mpBuildings ) then
4243: LD_EXP 17
4247: PPUSH
4248: CALL 12250 0 1
4252: IFFALSE 4330
// begin for j in mpBuildings [ pos ] do
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: LD_EXP 17
4263: PUSH
4264: LD_VAR 0 8
4268: ARRAY
4269: PUSH
4270: FOR_IN
4271: IFFALSE 4328
// begin bc_level := 0 ;
4273: LD_ADDR_OWVAR 43
4277: PUSH
4278: LD_INT 0
4280: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4281: LD_ADDR_OWVAR 42
4285: PUSH
4286: LD_VAR 0 3
4290: PUSH
4291: LD_INT 1
4293: ARRAY
4294: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4295: LD_VAR 0 3
4299: PUSH
4300: LD_INT 2
4302: ARRAY
4303: PPUSH
4304: LD_VAR 0 3
4308: PUSH
4309: LD_INT 3
4311: ARRAY
4312: PPUSH
4313: LD_VAR 0 3
4317: PUSH
4318: LD_INT 4
4320: ARRAY
4321: PPUSH
4322: CALL_OW 47
// end ;
4326: GO 4270
4328: POP
4329: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4330: LD_EXP 26
4334: IFFALSE 4354
4336: PUSH
4337: LD_INT 20
4339: PPUSH
4340: LD_VAR 0 7
4344: PPUSH
4345: CALL_OW 321
4349: PUSH
4350: LD_INT 1
4352: EQUAL
4353: AND
4354: IFFALSE 4371
// SetTech ( tech_SibDet , side , state_researched ) ;
4356: LD_INT 20
4358: PPUSH
4359: LD_VAR 0 7
4363: PPUSH
4364: LD_INT 2
4366: PPUSH
4367: CALL_OW 322
// if not mpArtifacts then
4371: LD_EXP 44
4375: NOT
4376: IFFALSE 4393
// SetTech ( tech_artifact , side , state_disabled ) ;
4378: LD_INT 24
4380: PPUSH
4381: LD_VAR 0 7
4385: PPUSH
4386: LD_INT 0
4388: PPUSH
4389: CALL_OW 322
// if mpSibBomb = 1 then
4393: LD_EXP 28
4397: PUSH
4398: LD_INT 1
4400: EQUAL
4401: IFFALSE 4420
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4403: LD_INT 25
4405: PPUSH
4406: LD_VAR 0 7
4410: PPUSH
4411: LD_INT 1
4413: PPUSH
4414: CALL_OW 322
// end else
4418: GO 4435
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4420: LD_INT 25
4422: PPUSH
4423: LD_VAR 0 7
4427: PPUSH
4428: LD_INT 0
4430: PPUSH
4431: CALL_OW 322
// end ; if mpVehicles then
4435: LD_EXP 36
4439: IFFALSE 4538
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4441: LD_ADDR_VAR 0 3
4445: PUSH
4446: LD_VAR 0 7
4450: PPUSH
4451: LD_VAR 0 9
4455: PPUSH
4456: LD_EXP 36
4460: PPUSH
4461: CALL 5662 0 3
4465: PUSH
4466: FOR_IN
4467: IFFALSE 4536
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4469: LD_VAR 0 3
4473: PPUSH
4474: LD_INT 0
4476: PPUSH
4477: LD_INT 5
4479: PPUSH
4480: CALL_OW 12
4484: PPUSH
4485: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4489: LD_VAR 0 3
4493: PPUSH
4494: LD_EXP 21
4498: PUSH
4499: LD_VAR 0 8
4503: ARRAY
4504: PUSH
4505: LD_INT 1
4507: ARRAY
4508: PPUSH
4509: LD_EXP 21
4513: PUSH
4514: LD_VAR 0 8
4518: ARRAY
4519: PUSH
4520: LD_INT 2
4522: ARRAY
4523: PPUSH
4524: LD_INT 12
4526: PPUSH
4527: LD_INT 0
4529: PPUSH
4530: CALL_OW 50
// end ;
4534: GO 4466
4536: POP
4537: POP
// end ; uc_nation := nation ;
4538: LD_ADDR_OWVAR 21
4542: PUSH
4543: LD_VAR 0 9
4547: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4548: LD_ADDR_VAR 0 11
4552: PUSH
4553: LD_VAR 0 7
4557: PPUSH
4558: LD_VAR 0 9
4562: PPUSH
4563: LD_EXP 24
4567: PPUSH
4568: LD_EXP 25
4572: PPUSH
4573: CALL 5164 0 4
4577: ST_TO_ADDR
// for j in team do
4578: LD_ADDR_VAR 0 3
4582: PUSH
4583: LD_VAR 0 11
4587: PUSH
4588: FOR_IN
4589: IFFALSE 4638
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4591: LD_VAR 0 3
4595: PPUSH
4596: LD_EXP 21
4600: PUSH
4601: LD_VAR 0 8
4605: ARRAY
4606: PUSH
4607: LD_INT 1
4609: ARRAY
4610: PPUSH
4611: LD_EXP 21
4615: PUSH
4616: LD_VAR 0 8
4620: ARRAY
4621: PUSH
4622: LD_INT 2
4624: ARRAY
4625: PPUSH
4626: LD_INT 12
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 50
4636: GO 4588
4638: POP
4639: POP
// if mpApemans then
4640: LD_EXP 30
4644: IFFALSE 4750
// begin for j := 1 to mpApemans do
4646: LD_ADDR_VAR 0 3
4650: PUSH
4651: DOUBLE
4652: LD_INT 1
4654: DEC
4655: ST_TO_ADDR
4656: LD_EXP 30
4660: PUSH
4661: FOR_TO
4662: IFFALSE 4748
// begin PrepareApeman ( - 5 ) ;
4664: LD_INT 5
4666: NEG
4667: PPUSH
4668: CALL 44309 0 1
// ape := CreateHuman ;
4672: LD_ADDR_VAR 0 10
4676: PUSH
4677: CALL_OW 44
4681: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4682: LD_ADDR_EXP 32
4686: PUSH
4687: LD_EXP 32
4691: PPUSH
4692: LD_VAR 0 8
4696: PPUSH
4697: LD_EXP 32
4701: PUSH
4702: LD_VAR 0 8
4706: ARRAY
4707: PPUSH
4708: LD_VAR 0 10
4712: PPUSH
4713: CALL 48182 0 2
4717: PPUSH
4718: CALL_OW 1
4722: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4723: LD_VAR 0 10
4727: PPUSH
4728: LD_EXP 31
4732: PUSH
4733: LD_VAR 0 8
4737: ARRAY
4738: PPUSH
4739: LD_INT 0
4741: PPUSH
4742: CALL_OW 49
// end ;
4746: GO 4661
4748: POP
4749: POP
// end ; end ;
4750: GO 3415
4752: POP
4753: POP
// if not mpTeamGame then
4754: LD_EXP 11
4758: NOT
4759: IFFALSE 4857
// begin for i := 1 to 8 do
4761: LD_ADDR_VAR 0 2
4765: PUSH
4766: DOUBLE
4767: LD_INT 1
4769: DEC
4770: ST_TO_ADDR
4771: LD_INT 8
4773: PUSH
4774: FOR_TO
4775: IFFALSE 4853
// for j := 1 to 8 do
4777: LD_ADDR_VAR 0 3
4781: PUSH
4782: DOUBLE
4783: LD_INT 1
4785: DEC
4786: ST_TO_ADDR
4787: LD_INT 8
4789: PUSH
4790: FOR_TO
4791: IFFALSE 4849
// if i <> j then
4793: LD_VAR 0 2
4797: PUSH
4798: LD_VAR 0 3
4802: NONEQUAL
4803: IFFALSE 4827
// SetAttitude ( i , j , att_neutral , true ) else
4805: LD_VAR 0 2
4809: PPUSH
4810: LD_VAR 0 3
4814: PPUSH
4815: LD_INT 0
4817: PPUSH
4818: LD_INT 1
4820: PPUSH
4821: CALL_OW 80
4825: GO 4847
// SetAttitude ( i , j , att_friend , true ) ;
4827: LD_VAR 0 2
4831: PPUSH
4832: LD_VAR 0 3
4836: PPUSH
4837: LD_INT 1
4839: PPUSH
4840: LD_INT 1
4842: PPUSH
4843: CALL_OW 80
4847: GO 4790
4849: POP
4850: POP
4851: GO 4774
4853: POP
4854: POP
// end else
4855: GO 5032
// begin if mpSharedVision then
4857: LD_EXP 16
4861: IFFALSE 4926
// begin for i in mpTeams do
4863: LD_ADDR_VAR 0 2
4867: PUSH
4868: LD_EXP 10
4872: PUSH
4873: FOR_IN
4874: IFFALSE 4924
// for j := 2 to i do
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: DOUBLE
4882: LD_INT 2
4884: DEC
4885: ST_TO_ADDR
4886: LD_VAR 0 2
4890: PUSH
4891: FOR_TO
4892: IFFALSE 4920
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4894: LD_VAR 0 2
4898: PUSH
4899: LD_VAR 0 3
4903: ARRAY
4904: PPUSH
4905: LD_VAR 0 2
4909: PUSH
4910: LD_INT 1
4912: ARRAY
4913: PPUSH
4914: CALL_OW 343
4918: GO 4891
4920: POP
4921: POP
4922: GO 4873
4924: POP
4925: POP
// end ; for i := 1 to 8 do
4926: LD_ADDR_VAR 0 2
4930: PUSH
4931: DOUBLE
4932: LD_INT 1
4934: DEC
4935: ST_TO_ADDR
4936: LD_INT 8
4938: PUSH
4939: FOR_TO
4940: IFFALSE 5030
// for j := 1 to 8 do
4942: LD_ADDR_VAR 0 3
4946: PUSH
4947: DOUBLE
4948: LD_INT 1
4950: DEC
4951: ST_TO_ADDR
4952: LD_INT 8
4954: PUSH
4955: FOR_TO
4956: IFFALSE 5026
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4958: LD_EXP 8
4962: PUSH
4963: LD_VAR 0 2
4967: ARRAY
4968: PUSH
4969: LD_EXP 8
4973: PUSH
4974: LD_VAR 0 3
4978: ARRAY
4979: EQUAL
4980: IFFALSE 5004
// SetAttitude ( i , j , att_friend , true ) else
4982: LD_VAR 0 2
4986: PPUSH
4987: LD_VAR 0 3
4991: PPUSH
4992: LD_INT 1
4994: PPUSH
4995: LD_INT 1
4997: PPUSH
4998: CALL_OW 80
5002: GO 5024
// SetAttitude ( i , j , att_enemy , true ) ;
5004: LD_VAR 0 2
5008: PPUSH
5009: LD_VAR 0 3
5013: PPUSH
5014: LD_INT 2
5016: PPUSH
5017: LD_INT 1
5019: PPUSH
5020: CALL_OW 80
5024: GO 4955
5026: POP
5027: POP
5028: GO 4939
5030: POP
5031: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5032: LD_ADDR_OWVAR 71
5036: PUSH
5037: LD_EXP 9
5041: PUSH
5042: LD_OWVAR 2
5046: ARRAY
5047: ST_TO_ADDR
// if IAmSpec then
5048: CALL_OW 531
5052: IFFALSE 5093
// begin FogOff ( true ) ;
5054: LD_INT 1
5056: PPUSH
5057: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5061: LD_EXP 29
5065: PUSH
5066: LD_INT 1
5068: ARRAY
5069: PUSH
5070: LD_INT 2
5072: DIV
5073: PPUSH
5074: LD_EXP 29
5078: PUSH
5079: LD_INT 2
5081: ARRAY
5082: PUSH
5083: LD_INT 2
5085: DIV
5086: PPUSH
5087: CALL_OW 86
// end else
5091: GO 5139
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5093: LD_EXP 21
5097: PUSH
5098: LD_EXP 7
5102: PUSH
5103: LD_OWVAR 2
5107: ARRAY
5108: ARRAY
5109: PUSH
5110: LD_INT 1
5112: ARRAY
5113: PPUSH
5114: LD_EXP 21
5118: PUSH
5119: LD_EXP 7
5123: PUSH
5124: LD_OWVAR 2
5128: ARRAY
5129: ARRAY
5130: PUSH
5131: LD_INT 2
5133: ARRAY
5134: PPUSH
5135: CALL_OW 86
// end ; BeginBuildUp ;
5139: CALL 6195 0 0
// enable ( mpActive ) ;
5143: LD_INT 100
5145: ENABLE_MARKED
// enable ( mpGameType ) ;
5146: LD_EXP 3
5150: ENABLE_MARKED
// mpGameActive := true ;
5151: LD_ADDR_EXP 39
5155: PUSH
5156: LD_INT 1
5158: ST_TO_ADDR
// end ;
5159: LD_VAR 0 1
5163: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5164: LD_INT 0
5166: PPUSH
5167: PPUSH
5168: PPUSH
5169: PPUSH
// result := [ ] ;
5170: LD_ADDR_VAR 0 5
5174: PUSH
5175: EMPTY
5176: ST_TO_ADDR
// class := class_soldier ;
5177: LD_ADDR_VAR 0 8
5181: PUSH
5182: LD_INT 1
5184: ST_TO_ADDR
// uc_side := side ;
5185: LD_ADDR_OWVAR 20
5189: PUSH
5190: LD_VAR 0 1
5194: ST_TO_ADDR
// uc_nation := nation ;
5195: LD_ADDR_OWVAR 21
5199: PUSH
5200: LD_VAR 0 2
5204: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5205: LD_ADDR_OWVAR 26
5209: PUSH
5210: LD_OWVAR 19
5214: PUSH
5215: LD_VAR 0 1
5219: ARRAY
5220: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5221: LD_INT 1
5223: PPUSH
5224: LD_INT 2
5226: PPUSH
5227: CALL_OW 12
5231: PPUSH
5232: LD_VAR 0 8
5236: PPUSH
5237: LD_VAR 0 4
5241: PUSH
5242: LD_INT 2
5244: PLUS
5245: PPUSH
5246: CALL_OW 380
// hc_importance := 105 ;
5250: LD_ADDR_OWVAR 32
5254: PUSH
5255: LD_INT 105
5257: ST_TO_ADDR
// if Multiplayer then
5258: LD_OWVAR 4
5262: IFFALSE 5302
// begin hc_gallery := MULTIAVATARS ;
5264: LD_ADDR_OWVAR 33
5268: PUSH
5269: LD_STRING MULTIAVATARS
5271: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5272: LD_ADDR_OWVAR 34
5276: PUSH
5277: LD_VAR 0 1
5281: PPUSH
5282: CALL_OW 525
5286: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5287: LD_ADDR_OWVAR 27
5291: PUSH
5292: LD_VAR 0 1
5296: PPUSH
5297: CALL_OW 526
5301: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5302: LD_ADDR_VAR 0 5
5306: PUSH
5307: LD_VAR 0 5
5311: PPUSH
5312: CALL_OW 44
5316: PPUSH
5317: CALL 48182 0 2
5321: ST_TO_ADDR
// if mpTeamPreset then
5322: LD_LOC 1
5326: IFFALSE 5422
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5328: LD_LOC 1
5332: PUSH
5333: LD_INT 1
5335: ARRAY
5336: PPUSH
5337: LD_VAR 0 5
5341: PUSH
5342: LD_VAR 0 5
5346: ARRAY
5347: PPUSH
5348: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5352: LD_VAR 0 5
5356: PUSH
5357: LD_VAR 0 5
5361: ARRAY
5362: PPUSH
5363: LD_INT 1
5365: PPUSH
5366: LD_LOC 1
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: PPUSH
5375: LD_INT 1
5377: PPUSH
5378: CALL_OW 260
5382: PPUSH
5383: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5387: LD_VAR 0 5
5391: PUSH
5392: LD_VAR 0 5
5396: ARRAY
5397: PPUSH
5398: LD_INT 2
5400: PPUSH
5401: LD_LOC 1
5405: PUSH
5406: LD_INT 1
5408: ARRAY
5409: PPUSH
5410: LD_INT 2
5412: PPUSH
5413: CALL_OW 260
5417: PPUSH
5418: CALL_OW 239
// end ; InitHc_All ( ) ;
5422: CALL_OW 584
// class := 2 ;
5426: LD_ADDR_VAR 0 8
5430: PUSH
5431: LD_INT 2
5433: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5434: LD_ADDR_VAR 0 6
5438: PUSH
5439: DOUBLE
5440: LD_INT 1
5442: DEC
5443: ST_TO_ADDR
5444: LD_VAR 0 3
5448: PUSH
5449: LD_INT 1
5451: MINUS
5452: PUSH
5453: FOR_TO
5454: IFFALSE 5638
// begin PrepareHuman ( false , class , skill ) ;
5456: LD_INT 0
5458: PPUSH
5459: LD_VAR 0 8
5463: PPUSH
5464: LD_VAR 0 4
5468: PPUSH
5469: CALL_OW 380
// un := CreateHuman ;
5473: LD_ADDR_VAR 0 7
5477: PUSH
5478: CALL_OW 44
5482: ST_TO_ADDR
// result := Join ( result , un ) ;
5483: LD_ADDR_VAR 0 5
5487: PUSH
5488: LD_VAR 0 5
5492: PPUSH
5493: LD_VAR 0 7
5497: PPUSH
5498: CALL 48182 0 2
5502: ST_TO_ADDR
// if mpTeamPreset then
5503: LD_LOC 1
5507: IFFALSE 5603
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5509: LD_LOC 1
5513: PUSH
5514: LD_VAR 0 6
5518: PUSH
5519: LD_INT 1
5521: PLUS
5522: ARRAY
5523: PPUSH
5524: LD_VAR 0 7
5528: PPUSH
5529: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5533: LD_VAR 0 7
5537: PPUSH
5538: LD_INT 1
5540: PPUSH
5541: LD_LOC 1
5545: PUSH
5546: LD_VAR 0 6
5550: PUSH
5551: LD_INT 1
5553: PLUS
5554: ARRAY
5555: PPUSH
5556: LD_INT 1
5558: PPUSH
5559: CALL_OW 260
5563: PPUSH
5564: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5568: LD_VAR 0 7
5572: PPUSH
5573: LD_INT 2
5575: PPUSH
5576: LD_LOC 1
5580: PUSH
5581: LD_VAR 0 6
5585: PUSH
5586: LD_INT 1
5588: PLUS
5589: ARRAY
5590: PPUSH
5591: LD_INT 2
5593: PPUSH
5594: CALL_OW 260
5598: PPUSH
5599: CALL_OW 239
// end ; class := Inc ( class ) ;
5603: LD_ADDR_VAR 0 8
5607: PUSH
5608: LD_VAR 0 8
5612: PPUSH
5613: CALL 49555 0 1
5617: ST_TO_ADDR
// if class = 5 then
5618: LD_VAR 0 8
5622: PUSH
5623: LD_INT 5
5625: EQUAL
5626: IFFALSE 5636
// class := 1 ;
5628: LD_ADDR_VAR 0 8
5632: PUSH
5633: LD_INT 1
5635: ST_TO_ADDR
// end ;
5636: GO 5453
5638: POP
5639: POP
// if not mpTeamPreset then
5640: LD_LOC 1
5644: NOT
5645: IFFALSE 5657
// mpTeamPreset := result ;
5647: LD_ADDR_LOC 1
5651: PUSH
5652: LD_VAR 0 5
5656: ST_TO_ADDR
// end ;
5657: LD_VAR 0 5
5661: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5662: LD_INT 0
5664: PPUSH
5665: PPUSH
// result := [ ] ;
5666: LD_ADDR_VAR 0 4
5670: PUSH
5671: EMPTY
5672: ST_TO_ADDR
// if not vehicles then
5673: LD_VAR 0 3
5677: NOT
5678: IFFALSE 5682
// exit ;
5680: GO 5896
// for i := 1 to vehicles [ nation ] do
5682: LD_ADDR_VAR 0 5
5686: PUSH
5687: DOUBLE
5688: LD_INT 1
5690: DEC
5691: ST_TO_ADDR
5692: LD_VAR 0 3
5696: PUSH
5697: LD_VAR 0 2
5701: ARRAY
5702: PUSH
5703: FOR_TO
5704: IFFALSE 5894
// begin uc_side := side ;
5706: LD_ADDR_OWVAR 20
5710: PUSH
5711: LD_VAR 0 1
5715: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5716: LD_VAR 0 3
5720: PUSH
5721: LD_VAR 0 2
5725: ARRAY
5726: PUSH
5727: LD_VAR 0 5
5731: ARRAY
5732: PPUSH
5733: CALL 12250 0 1
5737: PUSH
5738: LD_INT 4
5740: GREATER
5741: IFFALSE 5771
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5743: LD_ADDR_OWVAR 21
5747: PUSH
5748: LD_VAR 0 3
5752: PUSH
5753: LD_VAR 0 2
5757: ARRAY
5758: PUSH
5759: LD_VAR 0 5
5763: ARRAY
5764: PUSH
5765: LD_INT 5
5767: ARRAY
5768: ST_TO_ADDR
5769: GO 5781
// uc_nation := nation ;
5771: LD_ADDR_OWVAR 21
5775: PUSH
5776: LD_VAR 0 2
5780: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5781: LD_VAR 0 3
5785: PUSH
5786: LD_VAR 0 2
5790: ARRAY
5791: PUSH
5792: LD_VAR 0 5
5796: ARRAY
5797: PUSH
5798: LD_INT 1
5800: ARRAY
5801: PPUSH
5802: LD_VAR 0 3
5806: PUSH
5807: LD_VAR 0 2
5811: ARRAY
5812: PUSH
5813: LD_VAR 0 5
5817: ARRAY
5818: PUSH
5819: LD_INT 2
5821: ARRAY
5822: PPUSH
5823: LD_VAR 0 3
5827: PUSH
5828: LD_VAR 0 2
5832: ARRAY
5833: PUSH
5834: LD_VAR 0 5
5838: ARRAY
5839: PUSH
5840: LD_INT 3
5842: ARRAY
5843: PPUSH
5844: LD_VAR 0 3
5848: PUSH
5849: LD_VAR 0 2
5853: ARRAY
5854: PUSH
5855: LD_VAR 0 5
5859: ARRAY
5860: PUSH
5861: LD_INT 4
5863: ARRAY
5864: PPUSH
5865: LD_INT 80
5867: PPUSH
5868: CALL 15012 0 5
// result := Join ( result , CreateVehicle ) ;
5872: LD_ADDR_VAR 0 4
5876: PUSH
5877: LD_VAR 0 4
5881: PPUSH
5882: CALL_OW 45
5886: PPUSH
5887: CALL 48182 0 2
5891: ST_TO_ADDR
// end ;
5892: GO 5703
5894: POP
5895: POP
// end ;
5896: LD_VAR 0 4
5900: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5901: LD_INT 0
5903: PPUSH
5904: PPUSH
// for i in mpBattleFlags do
5905: LD_ADDR_VAR 0 3
5909: PUSH
5910: LD_EXP 23
5914: PUSH
5915: FOR_IN
5916: IFFALSE 5993
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5918: LD_VAR 0 3
5922: PPUSH
5923: LD_INT 1
5925: PUSH
5926: LD_VAR 0 1
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 2
5937: PUSH
5938: LD_VAR 0 1
5942: PUSH
5943: LD_REAL  7.00000000000000E-0001
5946: MUL
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 3
5954: PUSH
5955: LD_VAR 0 1
5959: PUSH
5960: LD_REAL  4.00000000000000E-0001
5963: MUL
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: LD_INT 20
5971: PUSH
5972: LD_VAR 0 1
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: PPUSH
5987: CALL_OW 423
5991: GO 5915
5993: POP
5994: POP
// end ;
5995: LD_VAR 0 2
5999: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6000: LD_INT 100
6002: IFFALSE 6097
6004: GO 6006
6006: DISABLE
6007: LD_INT 0
6009: PPUSH
6010: PPUSH
// begin if mpBattleFlag <= 0 then
6011: LD_EXP 22
6015: PUSH
6016: LD_INT 0
6018: LESSEQUAL
6019: IFFALSE 6023
// exit ;
6021: GO 6097
// strength := 100 ;
6023: LD_ADDR_VAR 0 2
6027: PUSH
6028: LD_INT 100
6030: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6031: LD_EXP 22
6035: PPUSH
6036: CALL_OW 67
// strength := Dec ( strength ) ;
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_VAR 0 2
6049: PPUSH
6050: CALL 49577 0 1
6054: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6055: LD_VAR 0 2
6059: PPUSH
6060: CALL 5901 0 1
// until not strength ;
6064: LD_VAR 0 2
6068: NOT
6069: IFFALSE 6031
// for i in mpBattleFlags do
6071: LD_ADDR_VAR 0 1
6075: PUSH
6076: LD_EXP 23
6080: PUSH
6081: FOR_IN
6082: IFFALSE 6095
// KillBattleFlag ( i ) ;
6084: LD_VAR 0 1
6088: PPUSH
6089: CALL_OW 419
6093: GO 6081
6095: POP
6096: POP
// end ;
6097: PPOPN 2
6099: END
// every 0 0$1 marked mpActive do var side , tmp ;
6100: GO 6102
6102: DISABLE
6103: LD_INT 0
6105: PPUSH
6106: PPUSH
// begin if mpSibBomb <= 1 then
6107: LD_EXP 28
6111: PUSH
6112: LD_INT 1
6114: LESSEQUAL
6115: IFFALSE 6119
// exit ;
6117: GO 6192
// tmp := mpSibBomb ;
6119: LD_ADDR_VAR 0 2
6123: PUSH
6124: LD_EXP 28
6128: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6129: LD_INT 35
6131: PPUSH
6132: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6136: LD_ADDR_VAR 0 2
6140: PUSH
6141: LD_VAR 0 2
6145: PUSH
6146: LD_INT 35
6148: MINUS
6149: ST_TO_ADDR
// until not tmp ;
6150: LD_VAR 0 2
6154: NOT
6155: IFFALSE 6129
// for side := 1 to 8 do
6157: LD_ADDR_VAR 0 1
6161: PUSH
6162: DOUBLE
6163: LD_INT 1
6165: DEC
6166: ST_TO_ADDR
6167: LD_INT 8
6169: PUSH
6170: FOR_TO
6171: IFFALSE 6190
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6173: LD_INT 25
6175: PPUSH
6176: LD_VAR 0 1
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 322
6188: GO 6170
6190: POP
6191: POP
// end ;
6192: PPOPN 2
6194: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6195: LD_INT 0
6197: PPUSH
6198: PPUSH
6199: PPUSH
// mpBuildUpTimeDelay := 0 ;
6200: LD_ADDR_EXP 46
6204: PUSH
6205: LD_INT 0
6207: ST_TO_ADDR
// if not mpBuildUpTime then
6208: LD_EXP 20
6212: NOT
6213: IFFALSE 6217
// exit ;
6215: GO 6406
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6217: LD_ADDR_EXP 46
6221: PUSH
6222: LD_INT 8400
6224: PUSH
6225: LD_INT 2100
6227: PUSH
6228: LD_EXP 20
6232: MUL
6233: PLUS
6234: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6235: LD_ADDR_EXP 47
6239: PUSH
6240: LD_INT 1
6242: ST_TO_ADDR
// for i := 1 to 8 do
6243: LD_ADDR_VAR 0 2
6247: PUSH
6248: DOUBLE
6249: LD_INT 1
6251: DEC
6252: ST_TO_ADDR
6253: LD_INT 8
6255: PUSH
6256: FOR_TO
6257: IFFALSE 6404
// if mpSidePositions [ i ] then
6259: LD_EXP 7
6263: PUSH
6264: LD_VAR 0 2
6268: ARRAY
6269: IFFALSE 6402
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6271: LD_EXP 19
6275: PUSH
6276: LD_EXP 7
6280: PUSH
6281: LD_VAR 0 2
6285: ARRAY
6286: ARRAY
6287: PPUSH
6288: LD_INT 5
6290: PPUSH
6291: CALL_OW 424
// for j := 1 to 8 do
6295: LD_ADDR_VAR 0 3
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 8
6307: PUSH
6308: FOR_TO
6309: IFFALSE 6400
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6311: LD_EXP 7
6315: PUSH
6316: LD_VAR 0 3
6320: ARRAY
6321: IFFALSE 6370
6323: PUSH
6324: LD_EXP 8
6328: PUSH
6329: LD_VAR 0 2
6333: ARRAY
6334: PUSH
6335: LD_EXP 8
6339: PUSH
6340: LD_VAR 0 3
6344: ARRAY
6345: NONEQUAL
6346: IFTRUE 6369
6348: PUSH
6349: LD_EXP 11
6353: NOT
6354: IFFALSE 6368
6356: PUSH
6357: LD_VAR 0 2
6361: PUSH
6362: LD_VAR 0 3
6366: NONEQUAL
6367: AND
6368: OR
6369: AND
6370: IFFALSE 6398
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6372: LD_VAR 0 3
6376: PPUSH
6377: LD_EXP 19
6381: PUSH
6382: LD_EXP 7
6386: PUSH
6387: LD_VAR 0 2
6391: ARRAY
6392: ARRAY
6393: PPUSH
6394: CALL_OW 333
6398: GO 6308
6400: POP
6401: POP
// end ;
6402: GO 6256
6404: POP
6405: POP
// end ;
6406: LD_VAR 0 1
6410: RET
// function EndBuildUp ; var i , j ; begin
6411: LD_INT 0
6413: PPUSH
6414: PPUSH
6415: PPUSH
// mpBuildUpTimeActive := false ;
6416: LD_ADDR_EXP 47
6420: PUSH
6421: LD_INT 0
6423: ST_TO_ADDR
// for i := 1 to 8 do
6424: LD_ADDR_VAR 0 2
6428: PUSH
6429: DOUBLE
6430: LD_INT 1
6432: DEC
6433: ST_TO_ADDR
6434: LD_INT 8
6436: PUSH
6437: FOR_TO
6438: IFFALSE 6585
// if mpSidePositions [ i ] then
6440: LD_EXP 7
6444: PUSH
6445: LD_VAR 0 2
6449: ARRAY
6450: IFFALSE 6583
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6452: LD_EXP 19
6456: PUSH
6457: LD_EXP 7
6461: PUSH
6462: LD_VAR 0 2
6466: ARRAY
6467: ARRAY
6468: PPUSH
6469: LD_INT 0
6471: PPUSH
6472: CALL_OW 424
// for j := 1 to 8 do
6476: LD_ADDR_VAR 0 3
6480: PUSH
6481: DOUBLE
6482: LD_INT 1
6484: DEC
6485: ST_TO_ADDR
6486: LD_INT 8
6488: PUSH
6489: FOR_TO
6490: IFFALSE 6581
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6492: LD_EXP 7
6496: PUSH
6497: LD_VAR 0 3
6501: ARRAY
6502: IFFALSE 6551
6504: PUSH
6505: LD_EXP 8
6509: PUSH
6510: LD_VAR 0 2
6514: ARRAY
6515: PUSH
6516: LD_EXP 8
6520: PUSH
6521: LD_VAR 0 3
6525: ARRAY
6526: NONEQUAL
6527: IFTRUE 6550
6529: PUSH
6530: LD_EXP 11
6534: NOT
6535: IFFALSE 6549
6537: PUSH
6538: LD_VAR 0 2
6542: PUSH
6543: LD_VAR 0 3
6547: NONEQUAL
6548: AND
6549: OR
6550: AND
6551: IFFALSE 6579
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6553: LD_VAR 0 3
6557: PPUSH
6558: LD_EXP 19
6562: PUSH
6563: LD_EXP 7
6567: PUSH
6568: LD_VAR 0 2
6572: ARRAY
6573: ARRAY
6574: PPUSH
6575: CALL_OW 334
6579: GO 6489
6581: POP
6582: POP
// end ;
6583: GO 6437
6585: POP
6586: POP
// end ;
6587: LD_VAR 0 1
6591: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6592: LD_EXP 47
6596: IFFALSE 6775
6598: GO 6600
6600: DISABLE
6601: LD_INT 0
6603: PPUSH
6604: PPUSH
// begin for i := 1 to 8 do
6605: LD_ADDR_VAR 0 1
6609: PUSH
6610: DOUBLE
6611: LD_INT 1
6613: DEC
6614: ST_TO_ADDR
6615: LD_INT 8
6617: PUSH
6618: FOR_TO
6619: IFFALSE 6772
// if mpSidePositions [ i ] then
6621: LD_EXP 7
6625: PUSH
6626: LD_VAR 0 1
6630: ARRAY
6631: IFFALSE 6770
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6633: LD_ADDR_VAR 0 2
6637: PUSH
6638: LD_EXP 19
6642: PUSH
6643: LD_EXP 7
6647: PUSH
6648: LD_VAR 0 1
6652: ARRAY
6653: ARRAY
6654: PPUSH
6655: LD_INT 2
6657: PUSH
6658: LD_INT 21
6660: PUSH
6661: LD_INT 1
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 21
6670: PUSH
6671: LD_INT 2
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 22
6685: PUSH
6686: LD_OWVAR 2
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: PPUSH
6699: CALL_OW 70
6703: PUSH
6704: FOR_IN
6705: IFFALSE 6768
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6707: LD_EXP 8
6711: PUSH
6712: LD_VAR 0 1
6716: ARRAY
6717: PUSH
6718: LD_EXP 8
6722: PUSH
6723: LD_OWVAR 2
6727: ARRAY
6728: NONEQUAL
6729: IFTRUE 6752
6731: PUSH
6732: LD_EXP 11
6736: NOT
6737: IFFALSE 6751
6739: PUSH
6740: LD_VAR 0 1
6744: PUSH
6745: LD_OWVAR 2
6749: NONEQUAL
6750: AND
6751: OR
6752: IFFALSE 6766
// ComMoveToArea ( un , BuildUpEscape ) ;
6754: LD_VAR 0 2
6758: PPUSH
6759: LD_INT 13
6761: PPUSH
6762: CALL_OW 113
6766: GO 6704
6768: POP
6769: POP
6770: GO 6618
6772: POP
6773: POP
// enable ;
6774: ENABLE
// end ;
6775: PPOPN 2
6777: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6778: LD_EXP 20
6782: IFFALSE 6832
6784: GO 6786
6786: DISABLE
6787: LD_INT 0
6789: PPUSH
// begin tmp := mpBuildUpTime ;
6790: LD_ADDR_VAR 0 1
6794: PUSH
6795: LD_EXP 20
6799: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6800: LD_INT 35
6802: PPUSH
6803: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6807: LD_ADDR_VAR 0 1
6811: PUSH
6812: LD_VAR 0 1
6816: PUSH
6817: LD_INT 35
6819: MINUS
6820: ST_TO_ADDR
// until not tmp ;
6821: LD_VAR 0 1
6825: NOT
6826: IFFALSE 6800
// EndBuildUp ;
6828: CALL 6411 0 0
// end ;
6832: PPOPN 1
6834: END
// every 0 0$1 trigger mpActive marked mpWin do
6835: LD_INT 100
6837: IFFALSE 6871
6839: GO 6841
6841: DISABLE
// begin if IAmServer then
6842: CALL_OW 518
6846: IFFALSE 6855
// wait ( 0 0$3 ) ;
6848: LD_INT 105
6850: PPUSH
6851: CALL_OW 67
// if Multiplayer then
6855: LD_OWVAR 4
6859: IFFALSE 6867
// YouWinInMultiplayer else
6861: CALL_OW 106
6865: GO 6871
// YouWin ;
6867: CALL_OW 103
// end ;
6871: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6872: LD_INT 0
6874: PPUSH
// result := false ;
6875: LD_ADDR_VAR 0 3
6879: PUSH
6880: LD_INT 0
6882: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6883: LD_VAR 0 1
6887: PUSH
6888: LD_INT 1
6890: DOUBLE
6891: EQUAL
6892: IFTRUE 6902
6894: LD_INT 5
6896: DOUBLE
6897: EQUAL
6898: IFTRUE 6902
6900: GO 6975
6902: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6903: LD_ADDR_VAR 0 3
6907: PUSH
6908: LD_INT 22
6910: PUSH
6911: LD_VAR 0 2
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: LD_INT 2
6922: PUSH
6923: LD_INT 21
6925: PUSH
6926: LD_INT 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 33
6935: PUSH
6936: LD_INT 3
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 33
6945: PUSH
6946: LD_INT 5
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PPUSH
6963: CALL_OW 69
6967: PPUSH
6968: CALL 12250 0 1
6972: ST_TO_ADDR
// end ; GameTypeSurvival :
6973: GO 7214
6975: LD_INT 2
6977: DOUBLE
6978: EQUAL
6979: IFTRUE 6983
6981: GO 7113
6983: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6984: LD_ADDR_VAR 0 3
6988: PUSH
6989: LD_INT 22
6991: PUSH
6992: LD_VAR 0 2
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 2
7003: PUSH
7004: LD_INT 30
7006: PUSH
7007: LD_INT 0
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 30
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PPUSH
7033: CALL_OW 69
7037: PPUSH
7038: CALL 12250 0 1
7042: IFFALSE 7110
7044: PUSH
7045: LD_INT 22
7047: PUSH
7048: LD_VAR 0 2
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 2
7059: PUSH
7060: LD_INT 21
7062: PUSH
7063: LD_INT 1
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 33
7072: PUSH
7073: LD_INT 3
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 33
7082: PUSH
7083: LD_INT 5
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 69
7104: PPUSH
7105: CALL 12250 0 1
7109: AND
7110: ST_TO_ADDR
// end ; GameTypeKing :
7111: GO 7214
7113: LD_INT 3
7115: DOUBLE
7116: EQUAL
7117: IFTRUE 7121
7119: GO 7213
7121: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7122: LD_ADDR_VAR 0 3
7126: PUSH
7127: LD_INT 22
7129: PUSH
7130: LD_VAR 0 2
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 2
7141: PUSH
7142: LD_INT 21
7144: PUSH
7145: LD_INT 1
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 33
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 33
7164: PUSH
7165: LD_INT 5
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PPUSH
7182: CALL_OW 69
7186: PPUSH
7187: CALL 12250 0 1
7191: IFFALSE 7210
7193: PUSH
7194: LD_VAR 0 2
7198: PPUSH
7199: CALL 60146 0 1
7203: PUSH
7204: LD_EXP 35
7208: LESS
7209: AND
7210: ST_TO_ADDR
// end ; end ;
7211: GO 7214
7213: POP
// end ;
7214: LD_VAR 0 3
7218: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7219: LD_INT 100
7221: IFFALSE 7451
7223: GO 7225
7225: DISABLE
7226: LD_INT 0
7228: PPUSH
7229: PPUSH
// begin if Multiplayer then
7230: LD_OWVAR 4
7234: IFFALSE 7242
// SetPlayerSpectator ( ) else
7236: CALL_OW 572
7240: GO 7251
// FogOff ( your_side ) ;
7242: LD_OWVAR 2
7246: PPUSH
7247: CALL_OW 344
// repeat gameIsOn := false ;
7251: LD_ADDR_VAR 0 1
7255: PUSH
7256: LD_INT 0
7258: ST_TO_ADDR
// for i := 1 to 8 do
7259: LD_ADDR_VAR 0 2
7263: PUSH
7264: DOUBLE
7265: LD_INT 1
7267: DEC
7268: ST_TO_ADDR
7269: LD_INT 8
7271: PUSH
7272: FOR_TO
7273: IFFALSE 7403
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7275: LD_EXP 7
7279: PUSH
7280: LD_VAR 0 2
7284: ARRAY
7285: IFFALSE 7298
7287: PUSH
7288: LD_VAR 0 2
7292: PPUSH
7293: CALL_OW 108
7297: AND
7298: IFFALSE 7312
7300: PUSH
7301: LD_VAR 0 2
7305: PUSH
7306: LD_OWVAR 2
7310: NONEQUAL
7311: AND
7312: IFFALSE 7401
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7314: LD_EXP 8
7318: PUSH
7319: LD_VAR 0 2
7323: ARRAY
7324: NOT
7325: IFTRUE 7373
7327: PUSH
7328: LD_EXP 8
7332: PUSH
7333: LD_VAR 0 2
7337: ARRAY
7338: PUSH
7339: LD_EXP 8
7343: PUSH
7344: LD_OWVAR 2
7348: ARRAY
7349: NONEQUAL
7350: IFFALSE 7372
7352: PUSH
7353: LD_OWVAR 2
7357: PPUSH
7358: LD_VAR 0 2
7362: PPUSH
7363: CALL_OW 81
7367: PUSH
7368: LD_INT 1
7370: NONEQUAL
7371: AND
7372: OR
7373: IFFALSE 7401
// if HasPowerByGameType ( mpGameType , i ) then
7375: LD_EXP 3
7379: PPUSH
7380: LD_VAR 0 2
7384: PPUSH
7385: CALL 6872 0 2
7389: IFFALSE 7401
// begin gameIsOn := true ;
7391: LD_ADDR_VAR 0 1
7395: PUSH
7396: LD_INT 1
7398: ST_TO_ADDR
// break ;
7399: GO 7403
// end ;
7401: GO 7272
7403: POP
7404: POP
// wait ( 100 ) ;
7405: LD_INT 100
7407: PPUSH
7408: CALL_OW 67
// until not gameIsOn ;
7412: LD_VAR 0 1
7416: NOT
7417: IFFALSE 7251
// if IAmServer then
7419: CALL_OW 518
7423: IFFALSE 7432
// wait ( 0 0$3 ) ;
7425: LD_INT 105
7427: PPUSH
7428: CALL_OW 67
// if Multiplayer then
7432: LD_OWVAR 4
7436: IFFALSE 7444
// YouLostInMultiplayer else
7438: CALL_OW 107
7442: GO 7451
// YouLost (  ) ;
7444: LD_STRING 
7446: PPUSH
7447: CALL_OW 104
// end ;
7451: PPOPN 2
7453: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7454: LD_EXP 33
7458: IFFALSE 7842
7460: GO 7462
7462: DISABLE
7463: LD_INT 0
7465: PPUSH
7466: PPUSH
7467: PPUSH
7468: PPUSH
7469: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7470: LD_ADDR_VAR 0 5
7474: PUSH
7475: LD_INT 1
7477: PUSH
7478: LD_INT 2
7480: PUSH
7481: LD_INT 3
7483: PUSH
7484: LD_INT 4
7486: PUSH
7487: LD_INT 5
7489: PUSH
7490: LD_INT 6
7492: PUSH
7493: LD_INT 7
7495: PUSH
7496: LD_INT 8
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7509: LD_INT 350
7511: PPUSH
7512: CALL_OW 67
// for i := 1 to 8 do
7516: LD_ADDR_VAR 0 1
7520: PUSH
7521: DOUBLE
7522: LD_INT 1
7524: DEC
7525: ST_TO_ADDR
7526: LD_INT 8
7528: PUSH
7529: FOR_TO
7530: IFFALSE 7812
// begin j := sides [ i ] ;
7532: LD_ADDR_VAR 0 2
7536: PUSH
7537: LD_VAR 0 5
7541: PUSH
7542: LD_VAR 0 1
7546: ARRAY
7547: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7548: LD_EXP 40
7552: PUSH
7553: LD_VAR 0 2
7557: ARRAY
7558: PPUSH
7559: CALL 12250 0 1
7563: IFFALSE 7576
7565: PUSH
7566: LD_VAR 0 2
7570: PPUSH
7571: CALL_OW 108
7575: AND
7576: IFFALSE 7594
7578: PUSH
7579: LD_EXP 3
7583: PPUSH
7584: LD_VAR 0 2
7588: PPUSH
7589: CALL 6872 0 2
7593: AND
7594: IFFALSE 7810
// begin wait ( mpRespawn div 2 ) ;
7596: LD_EXP 33
7600: PUSH
7601: LD_INT 2
7603: DIV
7604: PPUSH
7605: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7609: LD_ADDR_VAR 0 3
7613: PUSH
7614: LD_INT 22
7616: PUSH
7617: LD_VAR 0 2
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 50
7628: PUSH
7629: EMPTY
7630: LIST
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: LD_INT 30
7637: PUSH
7638: LD_INT 0
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 30
7647: PUSH
7648: LD_INT 1
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: PPUSH
7665: CALL_OW 69
7669: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7670: LD_VAR 0 3
7674: NOT
7675: IFTRUE 7689
7677: PUSH
7678: LD_VAR 0 2
7682: PPUSH
7683: CALL_OW 108
7687: NOT
7688: OR
7689: IFTRUE 7708
7691: PUSH
7692: LD_EXP 3
7696: PPUSH
7697: LD_VAR 0 2
7701: PPUSH
7702: CALL 6872 0 2
7706: NOT
7707: OR
7708: IFFALSE 7712
// continue ;
7710: GO 7529
// spawn := tmp [ 1 ] ;
7712: LD_ADDR_VAR 0 4
7716: PUSH
7717: LD_VAR 0 3
7721: PUSH
7722: LD_INT 1
7724: ARRAY
7725: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7726: LD_EXP 40
7730: PUSH
7731: LD_VAR 0 2
7735: ARRAY
7736: PUSH
7737: LD_INT 1
7739: ARRAY
7740: PPUSH
7741: LD_VAR 0 4
7745: PPUSH
7746: CALL_OW 250
7750: PPUSH
7751: LD_VAR 0 4
7755: PPUSH
7756: CALL_OW 251
7760: PPUSH
7761: LD_INT 32
7763: PPUSH
7764: LD_INT 1
7766: PPUSH
7767: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7771: LD_ADDR_EXP 40
7775: PUSH
7776: LD_EXP 40
7780: PPUSH
7781: LD_VAR 0 2
7785: PPUSH
7786: LD_EXP 40
7790: PUSH
7791: LD_VAR 0 2
7795: ARRAY
7796: PPUSH
7797: LD_INT 1
7799: PPUSH
7800: CALL_OW 3
7804: PPUSH
7805: CALL_OW 1
7809: ST_TO_ADDR
// end ; end ;
7810: GO 7529
7812: POP
7813: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7814: LD_ADDR_VAR 0 5
7818: PUSH
7819: LD_VAR 0 5
7823: PPUSH
7824: LD_INT 1
7826: PPUSH
7827: LD_INT 8
7829: PPUSH
7830: LD_INT 1
7832: PPUSH
7833: CALL 14542 0 4
7837: ST_TO_ADDR
// until false ;
7838: LD_INT 0
7840: IFFALSE 7509
// end ;
7842: PPOPN 5
7844: END
// every 0 0$1 marked mpActive do
7845: GO 7847
7847: DISABLE
// begin enable ;
7848: ENABLE
// if not mpDisplayStrings then
7849: LD_EXP 38
7853: NOT
7854: IFFALSE 7865
// begin display_strings := [ ] ;
7856: LD_ADDR_OWVAR 47
7860: PUSH
7861: EMPTY
7862: ST_TO_ADDR
// exit ;
7863: GO 7875
// end ; display_strings := mpDisplayStrings ;
7865: LD_ADDR_OWVAR 47
7869: PUSH
7870: LD_EXP 38
7874: ST_TO_ADDR
// end ; end_of_file
7875: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7876: LD_INT 0
7878: PPUSH
7879: PPUSH
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
7885: PPUSH
7886: PPUSH
// if GetType ( un ) = unit_vehicle then
7887: LD_VAR 0 1
7891: PPUSH
7892: CALL_OW 247
7896: PUSH
7897: LD_INT 2
7899: EQUAL
7900: IFFALSE 7904
// exit ;
7902: GO 8578
// side := GetSide ( un ) ;
7904: LD_ADDR_VAR 0 9
7908: PUSH
7909: LD_VAR 0 1
7913: PPUSH
7914: CALL_OW 255
7918: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7919: LD_EXP 3
7923: PUSH
7924: LD_INT 2
7926: EQUAL
7927: IFFALSE 8021
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7929: LD_VAR 0 1
7933: PPUSH
7934: CALL_OW 266
7938: PUSH
7939: LD_INT 0
7941: PUSH
7942: LD_INT 1
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: IN
7949: IFFALSE 8021
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
7951: LD_ADDR_VAR 0 3
7955: PUSH
7956: LD_INT 22
7958: PUSH
7959: LD_VAR 0 9
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 2
7970: PUSH
7971: LD_INT 21
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 33
7983: PUSH
7984: LD_INT 3
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: LIST
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: PPUSH
8000: CALL_OW 69
8004: PUSH
8005: FOR_IN
8006: IFFALSE 8019
// KillUnit ( i ) ;
8008: LD_VAR 0 3
8012: PPUSH
8013: CALL_OW 66
8017: GO 8005
8019: POP
8020: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8021: LD_VAR 0 1
8025: PPUSH
8026: CALL_OW 257
8030: PUSH
8031: LD_INT 12
8033: PUSH
8034: LD_INT 17
8036: PUSH
8037: LD_INT 15
8039: PUSH
8040: LD_INT 16
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: IN
8049: IFTRUE 8066
8051: PUSH
8052: LD_VAR 0 1
8056: PPUSH
8057: CALL_OW 263
8061: PUSH
8062: LD_INT 5
8064: EQUAL
8065: OR
8066: IFFALSE 8303
// begin tag := 0 ;
8068: LD_ADDR_VAR 0 5
8072: PUSH
8073: LD_INT 0
8075: ST_TO_ADDR
// for i := 1 to 8 do
8076: LD_ADDR_VAR 0 3
8080: PUSH
8081: DOUBLE
8082: LD_INT 1
8084: DEC
8085: ST_TO_ADDR
8086: LD_INT 8
8088: PUSH
8089: FOR_TO
8090: IFFALSE 8124
// if un in mpApePosIndex [ i ] then
8092: LD_VAR 0 1
8096: PUSH
8097: LD_EXP 32
8101: PUSH
8102: LD_VAR 0 3
8106: ARRAY
8107: IN
8108: IFFALSE 8122
// begin tag := i ;
8110: LD_ADDR_VAR 0 5
8114: PUSH
8115: LD_VAR 0 3
8119: ST_TO_ADDR
// break ;
8120: GO 8124
// end ;
8122: GO 8089
8124: POP
8125: POP
// if not tag then
8126: LD_VAR 0 5
8130: NOT
8131: IFFALSE 8135
// exit ;
8133: GO 8578
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8135: LD_ADDR_VAR 0 7
8139: PUSH
8140: LD_EXP 31
8144: PUSH
8145: LD_EXP 7
8149: PUSH
8150: LD_VAR 0 5
8154: ARRAY
8155: ARRAY
8156: ST_TO_ADDR
// if not area then
8157: LD_VAR 0 7
8161: NOT
8162: IFFALSE 8166
// exit ;
8164: GO 8578
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8166: LD_INT 14700
8168: PUSH
8169: LD_VAR 0 1
8173: PUSH
8174: LD_INT 5
8176: MOD
8177: PUSH
8178: LD_INT 1
8180: PLUS
8181: PUSH
8182: LD_INT 700
8184: MUL
8185: PLUS
8186: PPUSH
8187: CALL_OW 67
// repeat wait ( 10 ) ;
8191: LD_INT 10
8193: PPUSH
8194: CALL_OW 67
// until not mpBlockRespThread ;
8198: LD_EXP 45
8202: NOT
8203: IFFALSE 8191
// mpBlockRespThread := true ;
8205: LD_ADDR_EXP 45
8209: PUSH
8210: LD_INT 1
8212: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8213: LD_INT 0
8215: PPUSH
8216: CALL 44309 0 1
// ape := CreateHuman ;
8220: LD_ADDR_VAR 0 4
8224: PUSH
8225: CALL_OW 44
8229: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8230: LD_ADDR_EXP 32
8234: PUSH
8235: LD_EXP 32
8239: PPUSH
8240: LD_VAR 0 5
8244: PPUSH
8245: LD_EXP 32
8249: PUSH
8250: LD_VAR 0 5
8254: ARRAY
8255: PPUSH
8256: LD_VAR 0 4
8260: PPUSH
8261: CALL 48182 0 2
8265: PPUSH
8266: CALL_OW 1
8270: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8271: LD_VAR 0 4
8275: PPUSH
8276: LD_VAR 0 7
8280: PPUSH
8281: LD_INT 0
8283: PPUSH
8284: CALL_OW 49
// wait ( 10 ) ;
8288: LD_INT 10
8290: PPUSH
8291: CALL_OW 67
// mpBlockRespThread := false ;
8295: LD_ADDR_EXP 45
8299: PUSH
8300: LD_INT 0
8302: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8303: LD_VAR 0 1
8307: PPUSH
8308: CALL_OW 247
8312: PUSH
8313: LD_INT 1
8315: EQUAL
8316: IFFALSE 8333
8318: PUSH
8319: LD_VAR 0 1
8323: PPUSH
8324: CALL_OW 248
8328: PUSH
8329: LD_INT 0
8331: GREATER
8332: AND
8333: IFFALSE 8578
// begin if not mpRespawn then
8335: LD_EXP 33
8339: NOT
8340: IFFALSE 8344
// exit ;
8342: GO 8578
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8344: LD_VAR 0 9
8348: PPUSH
8349: CALL_OW 108
8353: NOT
8354: IFFALSE 8373
8356: PUSH
8357: LD_EXP 3
8361: PPUSH
8362: LD_VAR 0 9
8366: PPUSH
8367: CALL 6872 0 2
8371: NOT
8372: AND
8373: IFFALSE 8377
// exit ;
8375: GO 8578
// side := GetSide ( un ) ;
8377: LD_ADDR_VAR 0 9
8381: PUSH
8382: LD_VAR 0 1
8386: PPUSH
8387: CALL_OW 255
8391: ST_TO_ADDR
// nation := GetNation ( un ) ;
8392: LD_ADDR_VAR 0 8
8396: PUSH
8397: LD_VAR 0 1
8401: PPUSH
8402: CALL_OW 248
8406: ST_TO_ADDR
// class := GetClass ( un ) ;
8407: LD_ADDR_VAR 0 6
8411: PUSH
8412: LD_VAR 0 1
8416: PPUSH
8417: CALL_OW 257
8421: ST_TO_ADDR
// if class > 4 then
8422: LD_VAR 0 6
8426: PUSH
8427: LD_INT 4
8429: GREATER
8430: IFFALSE 8440
// class := 1 ;
8432: LD_ADDR_VAR 0 6
8436: PUSH
8437: LD_INT 1
8439: ST_TO_ADDR
// repeat wait ( 10 ) ;
8440: LD_INT 10
8442: PPUSH
8443: CALL_OW 67
// until not mpBlockRespThread ;
8447: LD_EXP 45
8451: NOT
8452: IFFALSE 8440
// mpBlockRespThread := true ;
8454: LD_ADDR_EXP 45
8458: PUSH
8459: LD_INT 1
8461: ST_TO_ADDR
// uc_side := side ;
8462: LD_ADDR_OWVAR 20
8466: PUSH
8467: LD_VAR 0 9
8471: ST_TO_ADDR
// uc_nation := nation ;
8472: LD_ADDR_OWVAR 21
8476: PUSH
8477: LD_VAR 0 8
8481: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8482: LD_INT 0
8484: PPUSH
8485: LD_VAR 0 6
8489: PPUSH
8490: LD_INT 2
8492: PPUSH
8493: CALL_OW 380
// un := CreateHuman ;
8497: LD_ADDR_VAR 0 1
8501: PUSH
8502: CALL_OW 44
8506: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8507: LD_ADDR_EXP 40
8511: PUSH
8512: LD_EXP 40
8516: PPUSH
8517: LD_VAR 0 9
8521: PPUSH
8522: LD_EXP 40
8526: PUSH
8527: LD_VAR 0 9
8531: ARRAY
8532: PPUSH
8533: LD_EXP 40
8537: PUSH
8538: LD_VAR 0 9
8542: ARRAY
8543: PUSH
8544: LD_INT 1
8546: PLUS
8547: PPUSH
8548: LD_VAR 0 1
8552: PPUSH
8553: CALL_OW 1
8557: PPUSH
8558: CALL_OW 1
8562: ST_TO_ADDR
// wait ( 10 ) ;
8563: LD_INT 10
8565: PPUSH
8566: CALL_OW 67
// mpBlockRespThread := false ;
8570: LD_ADDR_EXP 45
8574: PUSH
8575: LD_INT 0
8577: ST_TO_ADDR
// end ; end ;
8578: LD_VAR 0 2
8582: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8583: LD_INT 0
8585: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8586: LD_VAR 0 1
8590: PPUSH
8591: CALL_OW 266
8595: PUSH
8596: LD_INT 0
8598: PUSH
8599: LD_INT 1
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: IN
8606: IFFALSE 8631
// SetBName ( building , @ & GetSide ( building ) ) ;
8608: LD_VAR 0 1
8612: PPUSH
8613: LD_STRING @
8615: PUSH
8616: LD_VAR 0 1
8620: PPUSH
8621: CALL_OW 255
8625: STR
8626: PPUSH
8627: CALL_OW 500
// end ;
8631: LD_VAR 0 2
8635: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8636: LD_INT 0
8638: PPUSH
8639: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8640: LD_EXP 3
8644: PUSH
8645: LD_INT 2
8647: EQUAL
8648: IFFALSE 8672
8650: PUSH
8651: LD_VAR 0 1
8655: PPUSH
8656: CALL_OW 266
8660: PUSH
8661: LD_INT 0
8663: PUSH
8664: LD_INT 1
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: IN
8671: AND
8672: IFFALSE 8751
// begin SetSide ( building , oldSide ) ;
8674: LD_VAR 0 1
8678: PPUSH
8679: LD_VAR 0 2
8683: PPUSH
8684: CALL_OW 235
// KillUnit ( building ) ;
8688: LD_VAR 0 1
8692: PPUSH
8693: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8697: LD_ADDR_VAR 0 5
8701: PUSH
8702: LD_INT 22
8704: PUSH
8705: LD_VAR 0 2
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: LD_INT 21
8716: PUSH
8717: LD_INT 1
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PPUSH
8728: CALL_OW 69
8732: PUSH
8733: FOR_IN
8734: IFFALSE 8747
// KillUnit ( i ) ;
8736: LD_VAR 0 5
8740: PPUSH
8741: CALL_OW 66
8745: GO 8733
8747: POP
8748: POP
// exit ;
8749: GO 8796
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8751: LD_VAR 0 1
8755: PPUSH
8756: CALL_OW 266
8760: PUSH
8761: LD_INT 0
8763: PUSH
8764: LD_INT 1
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: IN
8771: IFFALSE 8796
// SetBName ( building , @ & GetSide ( building ) ) ;
8773: LD_VAR 0 1
8777: PPUSH
8778: LD_STRING @
8780: PUSH
8781: LD_VAR 0 1
8785: PPUSH
8786: CALL_OW 255
8790: STR
8791: PPUSH
8792: CALL_OW 500
// end ;
8796: LD_VAR 0 4
8800: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8801: LD_INT 0
8803: PPUSH
8804: PPUSH
8805: PPUSH
// if mpGameType <> GameTypeFamine then
8806: LD_EXP 3
8810: PUSH
8811: LD_INT 5
8813: NONEQUAL
8814: IFFALSE 8818
// exit ;
8816: GO 9032
// for i := 1 to mpGlobalOilDeposits do
8818: LD_ADDR_VAR 0 6
8822: PUSH
8823: DOUBLE
8824: LD_INT 1
8826: DEC
8827: ST_TO_ADDR
8828: LD_EXP 41
8832: PUSH
8833: FOR_TO
8834: IFFALSE 9030
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8836: LD_EXP 41
8840: PUSH
8841: LD_VAR 0 6
8845: ARRAY
8846: PUSH
8847: LD_INT 1
8849: ARRAY
8850: PPUSH
8851: LD_EXP 41
8855: PUSH
8856: LD_VAR 0 6
8860: ARRAY
8861: PUSH
8862: LD_INT 2
8864: ARRAY
8865: PPUSH
8866: CALL_OW 428
8870: PUSH
8871: LD_VAR 0 1
8875: EQUAL
8876: IFFALSE 9028
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8878: LD_ADDR_VAR 0 7
8882: PUSH
8883: LD_EXP 41
8887: PUSH
8888: LD_VAR 0 6
8892: ARRAY
8893: PUSH
8894: LD_INT 3
8896: ARRAY
8897: ST_TO_ADDR
// value := Dec ( value ) ;
8898: LD_ADDR_VAR 0 7
8902: PUSH
8903: LD_VAR 0 7
8907: PPUSH
8908: CALL 49577 0 1
8912: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8913: LD_ADDR_EXP 41
8917: PUSH
8918: LD_EXP 41
8922: PPUSH
8923: LD_VAR 0 6
8927: PPUSH
8928: LD_EXP 41
8932: PUSH
8933: LD_VAR 0 6
8937: ARRAY
8938: PPUSH
8939: LD_INT 3
8941: PPUSH
8942: LD_VAR 0 7
8946: PPUSH
8947: CALL_OW 1
8951: PPUSH
8952: CALL_OW 1
8956: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8957: LD_VAR 0 1
8961: PPUSH
8962: LD_VAR 0 7
8966: PPUSH
8967: CALL_OW 505
// if value = 0 then
8971: LD_VAR 0 7
8975: PUSH
8976: LD_INT 0
8978: EQUAL
8979: IFFALSE 9028
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8981: LD_EXP 41
8985: PUSH
8986: LD_VAR 0 6
8990: ARRAY
8991: PUSH
8992: LD_INT 1
8994: ARRAY
8995: PPUSH
8996: LD_EXP 41
9000: PUSH
9001: LD_VAR 0 6
9005: ARRAY
9006: PUSH
9007: LD_INT 2
9009: ARRAY
9010: PPUSH
9011: CALL_OW 63
// KillUnit ( building ) ;
9015: LD_VAR 0 1
9019: PPUSH
9020: CALL_OW 66
// exit ;
9024: POP
9025: POP
9026: GO 9032
// end ; end ; end ;
9028: GO 8833
9030: POP
9031: POP
// end ;
9032: LD_VAR 0 5
9036: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9037: LD_INT 0
9039: PPUSH
9040: PPUSH
9041: PPUSH
// if mpGameType <> GameTypeFamine then
9042: LD_EXP 3
9046: PUSH
9047: LD_INT 5
9049: NONEQUAL
9050: IFFALSE 9054
// exit ;
9052: GO 9268
// for i := 1 to mpGlobalSibDeposits do
9054: LD_ADDR_VAR 0 6
9058: PUSH
9059: DOUBLE
9060: LD_INT 1
9062: DEC
9063: ST_TO_ADDR
9064: LD_EXP 42
9068: PUSH
9069: FOR_TO
9070: IFFALSE 9266
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9072: LD_EXP 42
9076: PUSH
9077: LD_VAR 0 6
9081: ARRAY
9082: PUSH
9083: LD_INT 1
9085: ARRAY
9086: PPUSH
9087: LD_EXP 42
9091: PUSH
9092: LD_VAR 0 6
9096: ARRAY
9097: PUSH
9098: LD_INT 2
9100: ARRAY
9101: PPUSH
9102: CALL_OW 428
9106: PUSH
9107: LD_VAR 0 1
9111: EQUAL
9112: IFFALSE 9264
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9114: LD_ADDR_VAR 0 7
9118: PUSH
9119: LD_EXP 42
9123: PUSH
9124: LD_VAR 0 6
9128: ARRAY
9129: PUSH
9130: LD_INT 3
9132: ARRAY
9133: ST_TO_ADDR
// value := Dec ( value ) ;
9134: LD_ADDR_VAR 0 7
9138: PUSH
9139: LD_VAR 0 7
9143: PPUSH
9144: CALL 49577 0 1
9148: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9149: LD_ADDR_EXP 42
9153: PUSH
9154: LD_EXP 42
9158: PPUSH
9159: LD_VAR 0 6
9163: PPUSH
9164: LD_EXP 42
9168: PUSH
9169: LD_VAR 0 6
9173: ARRAY
9174: PPUSH
9175: LD_INT 3
9177: PPUSH
9178: LD_VAR 0 7
9182: PPUSH
9183: CALL_OW 1
9187: PPUSH
9188: CALL_OW 1
9192: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9193: LD_VAR 0 1
9197: PPUSH
9198: LD_VAR 0 7
9202: PPUSH
9203: CALL_OW 505
// if value = 0 then
9207: LD_VAR 0 7
9211: PUSH
9212: LD_INT 0
9214: EQUAL
9215: IFFALSE 9264
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9217: LD_EXP 42
9221: PUSH
9222: LD_VAR 0 6
9226: ARRAY
9227: PUSH
9228: LD_INT 1
9230: ARRAY
9231: PPUSH
9232: LD_EXP 42
9236: PUSH
9237: LD_VAR 0 6
9241: ARRAY
9242: PUSH
9243: LD_INT 2
9245: ARRAY
9246: PPUSH
9247: CALL_OW 63
// KillUnit ( building ) ;
9251: LD_VAR 0 1
9255: PPUSH
9256: CALL_OW 66
// exit ;
9260: POP
9261: POP
9262: GO 9268
// end ; end ; end ;
9264: GO 9069
9266: POP
9267: POP
// end ; end_of_file
9268: LD_VAR 0 5
9272: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9273: LD_EXP 39
9277: IFFALSE 9285
9279: PUSH
9280: CALL 9495 0 0
9284: AND
9285: IFFALSE 9293
9287: PUSH
9288: LD_OWVAR 4
9292: AND
9293: IFFALSE 9492
9295: GO 9297
9297: DISABLE
9298: LD_INT 0
9300: PPUSH
9301: PPUSH
// begin canWin := false ;
9302: LD_ADDR_VAR 0 2
9306: PUSH
9307: LD_INT 0
9309: ST_TO_ADDR
// if not HasPower ( your_side ) then
9310: LD_OWVAR 2
9314: PPUSH
9315: CALL 9537 0 1
9319: NOT
9320: IFFALSE 9331
// begin Multiplayer_Loose_Message ;
9322: CALL_OW 521
// enable ( mpLose ) ;
9326: LD_INT 102
9328: ENABLE_MARKED
// end else
9329: GO 9492
// begin canWin := true ;
9331: LD_ADDR_VAR 0 2
9335: PUSH
9336: LD_INT 1
9338: ST_TO_ADDR
// for i := 1 to 8 do
9339: LD_ADDR_VAR 0 1
9343: PUSH
9344: DOUBLE
9345: LD_INT 1
9347: DEC
9348: ST_TO_ADDR
9349: LD_INT 8
9351: PUSH
9352: FOR_TO
9353: IFFALSE 9478
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9355: LD_EXP 7
9359: PUSH
9360: LD_VAR 0 1
9364: ARRAY
9365: IFFALSE 9378
9367: PUSH
9368: LD_VAR 0 1
9372: PPUSH
9373: CALL_OW 108
9377: AND
9378: IFFALSE 9392
9380: PUSH
9381: LD_VAR 0 1
9385: PUSH
9386: LD_OWVAR 2
9390: NONEQUAL
9391: AND
9392: IFFALSE 9476
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9394: LD_EXP 8
9398: PUSH
9399: LD_VAR 0 1
9403: ARRAY
9404: NOT
9405: IFTRUE 9453
9407: PUSH
9408: LD_EXP 8
9412: PUSH
9413: LD_VAR 0 1
9417: ARRAY
9418: PUSH
9419: LD_EXP 8
9423: PUSH
9424: LD_OWVAR 2
9428: ARRAY
9429: NONEQUAL
9430: IFFALSE 9452
9432: PUSH
9433: LD_OWVAR 2
9437: PPUSH
9438: LD_VAR 0 1
9442: PPUSH
9443: CALL_OW 81
9447: PUSH
9448: LD_INT 1
9450: NONEQUAL
9451: AND
9452: OR
9453: IFFALSE 9476
// if HasPower ( i ) then
9455: LD_VAR 0 1
9459: PPUSH
9460: CALL 9537 0 1
9464: IFFALSE 9476
// begin canWin := false ;
9466: LD_ADDR_VAR 0 2
9470: PUSH
9471: LD_INT 0
9473: ST_TO_ADDR
// break ;
9474: GO 9478
// end ;
9476: GO 9352
9478: POP
9479: POP
// if canWin then
9480: LD_VAR 0 2
9484: IFFALSE 9491
// enable ( mpWin ) else
9486: LD_INT 101
9488: ENABLE_MARKED
9489: GO 9492
// enable ;
9491: ENABLE
// end ; end ;
9492: PPOPN 2
9494: END
// function CanWinLoose ; begin
9495: LD_INT 0
9497: PPUSH
// result := true ;
9498: LD_ADDR_VAR 0 1
9502: PUSH
9503: LD_INT 1
9505: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9506: CALL_OW 531
9510: IFFALSE 9522
9512: PUSH
9513: CALL_OW 519
9517: PUSH
9518: LD_INT 1
9520: GREATER
9521: AND
9522: IFFALSE 9532
// result := false ;
9524: LD_ADDR_VAR 0 1
9528: PUSH
9529: LD_INT 0
9531: ST_TO_ADDR
// end ;
9532: LD_VAR 0 1
9536: RET
// function HasPower ( i ) ; begin
9537: LD_INT 0
9539: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9540: LD_ADDR_VAR 0 2
9544: PUSH
9545: LD_INT 22
9547: PUSH
9548: LD_VAR 0 1
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 2
9559: PUSH
9560: LD_INT 21
9562: PUSH
9563: LD_INT 1
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: LD_INT 33
9572: PUSH
9573: LD_INT 3
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: PUSH
9580: LD_INT 33
9582: PUSH
9583: LD_INT 5
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PPUSH
9600: CALL_OW 69
9604: ST_TO_ADDR
// end ; end_of_file
9605: LD_VAR 0 2
9609: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9610: LD_EXP 39
9614: IFFALSE 9657
9616: GO 9618
9618: DISABLE
9619: LD_INT 0
9621: PPUSH
// begin for i := 1 to 8 do
9622: LD_ADDR_VAR 0 1
9626: PUSH
9627: DOUBLE
9628: LD_INT 1
9630: DEC
9631: ST_TO_ADDR
9632: LD_INT 8
9634: PUSH
9635: FOR_TO
9636: IFFALSE 9655
// SetRestrict ( b_depot , i , state_disabled ) ;
9638: LD_INT 0
9640: PPUSH
9641: LD_VAR 0 1
9645: PPUSH
9646: LD_INT 0
9648: PPUSH
9649: CALL_OW 324
9653: GO 9635
9655: POP
9656: POP
// end ;
9657: PPOPN 1
9659: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9660: LD_EXP 39
9664: IFFALSE 9672
9666: PUSH
9667: CALL 9882 0 0
9671: AND
9672: IFFALSE 9680
9674: PUSH
9675: LD_OWVAR 4
9679: AND
9680: IFFALSE 9879
9682: GO 9684
9684: DISABLE
9685: LD_INT 0
9687: PPUSH
9688: PPUSH
// begin canWin := false ;
9689: LD_ADDR_VAR 0 2
9693: PUSH
9694: LD_INT 0
9696: ST_TO_ADDR
// if not HasPower ( your_side ) then
9697: LD_OWVAR 2
9701: PPUSH
9702: CALL 9924 0 1
9706: NOT
9707: IFFALSE 9718
// begin Multiplayer_Loose_Message ;
9709: CALL_OW 521
// enable ( mpLose ) ;
9713: LD_INT 102
9715: ENABLE_MARKED
// end else
9716: GO 9879
// begin canWin := true ;
9718: LD_ADDR_VAR 0 2
9722: PUSH
9723: LD_INT 1
9725: ST_TO_ADDR
// for i := 1 to 8 do
9726: LD_ADDR_VAR 0 1
9730: PUSH
9731: DOUBLE
9732: LD_INT 1
9734: DEC
9735: ST_TO_ADDR
9736: LD_INT 8
9738: PUSH
9739: FOR_TO
9740: IFFALSE 9865
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9742: LD_EXP 7
9746: PUSH
9747: LD_VAR 0 1
9751: ARRAY
9752: IFFALSE 9765
9754: PUSH
9755: LD_VAR 0 1
9759: PPUSH
9760: CALL_OW 108
9764: AND
9765: IFFALSE 9779
9767: PUSH
9768: LD_VAR 0 1
9772: PUSH
9773: LD_OWVAR 2
9777: NONEQUAL
9778: AND
9779: IFFALSE 9863
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9781: LD_EXP 8
9785: PUSH
9786: LD_VAR 0 1
9790: ARRAY
9791: NOT
9792: IFTRUE 9840
9794: PUSH
9795: LD_EXP 8
9799: PUSH
9800: LD_VAR 0 1
9804: ARRAY
9805: PUSH
9806: LD_EXP 8
9810: PUSH
9811: LD_OWVAR 2
9815: ARRAY
9816: NONEQUAL
9817: IFFALSE 9839
9819: PUSH
9820: LD_OWVAR 2
9824: PPUSH
9825: LD_VAR 0 1
9829: PPUSH
9830: CALL_OW 81
9834: PUSH
9835: LD_INT 1
9837: NONEQUAL
9838: AND
9839: OR
9840: IFFALSE 9863
// if HasPower ( i ) then
9842: LD_VAR 0 1
9846: PPUSH
9847: CALL 9924 0 1
9851: IFFALSE 9863
// begin canWin := false ;
9853: LD_ADDR_VAR 0 2
9857: PUSH
9858: LD_INT 0
9860: ST_TO_ADDR
// break ;
9861: GO 9865
// end ;
9863: GO 9739
9865: POP
9866: POP
// if canWin then
9867: LD_VAR 0 2
9871: IFFALSE 9878
// enable ( mpWin ) else
9873: LD_INT 101
9875: ENABLE_MARKED
9876: GO 9879
// enable ;
9878: ENABLE
// end ; end ;
9879: PPOPN 2
9881: END
// function CanWinLoose ; begin
9882: LD_INT 0
9884: PPUSH
// result := true ;
9885: LD_ADDR_VAR 0 1
9889: PUSH
9890: LD_INT 1
9892: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9893: CALL_OW 531
9897: IFFALSE 9909
9899: PUSH
9900: CALL_OW 519
9904: PUSH
9905: LD_INT 1
9907: GREATER
9908: AND
9909: IFFALSE 9919
// result := false ;
9911: LD_ADDR_VAR 0 1
9915: PUSH
9916: LD_INT 0
9918: ST_TO_ADDR
// end ;
9919: LD_VAR 0 1
9923: RET
// function HasPower ( i ) ; begin
9924: LD_INT 0
9926: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9927: LD_INT 22
9929: PUSH
9930: LD_VAR 0 1
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 2
9941: PUSH
9942: LD_INT 30
9944: PUSH
9945: LD_INT 0
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PUSH
9952: LD_INT 30
9954: PUSH
9955: LD_INT 1
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: LIST
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 69
9975: NOT
9976: IFFALSE 9980
// exit ;
9978: GO 10045
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9980: LD_ADDR_VAR 0 2
9984: PUSH
9985: LD_INT 22
9987: PUSH
9988: LD_VAR 0 1
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: LD_INT 2
9999: PUSH
10000: LD_INT 21
10002: PUSH
10003: LD_INT 1
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: LD_INT 33
10012: PUSH
10013: LD_INT 3
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PUSH
10020: LD_INT 33
10022: PUSH
10023: LD_INT 5
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 69
10044: ST_TO_ADDR
// end ; end_of_file
10045: LD_VAR 0 2
10049: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10050: LD_INT 0
10052: PPUSH
10053: PPUSH
// if exist_mode then
10054: LD_VAR 0 2
10058: IFFALSE 10104
// begin unit := CreateCharacter ( prefix & ident ) ;
10060: LD_ADDR_VAR 0 5
10064: PUSH
10065: LD_VAR 0 3
10069: PUSH
10070: LD_VAR 0 1
10074: STR
10075: PPUSH
10076: CALL_OW 34
10080: ST_TO_ADDR
// if unit then
10081: LD_VAR 0 5
10085: IFFALSE 10102
// DeleteCharacters ( prefix & ident ) ;
10087: LD_VAR 0 3
10091: PUSH
10092: LD_VAR 0 1
10096: STR
10097: PPUSH
10098: CALL_OW 40
// end else
10102: GO 10119
// unit := NewCharacter ( ident ) ;
10104: LD_ADDR_VAR 0 5
10108: PUSH
10109: LD_VAR 0 1
10113: PPUSH
10114: CALL_OW 25
10118: ST_TO_ADDR
// result := unit ;
10119: LD_ADDR_VAR 0 4
10123: PUSH
10124: LD_VAR 0 5
10128: ST_TO_ADDR
// end ;
10129: LD_VAR 0 4
10133: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10134: LD_INT 0
10136: PPUSH
10137: PPUSH
// if exist_mode then
10138: LD_VAR 0 2
10142: IFFALSE 10167
// unit := CreateCharacter ( prefix & ident ) else
10144: LD_ADDR_VAR 0 5
10148: PUSH
10149: LD_VAR 0 3
10153: PUSH
10154: LD_VAR 0 1
10158: STR
10159: PPUSH
10160: CALL_OW 34
10164: ST_TO_ADDR
10165: GO 10182
// unit := NewCharacter ( ident ) ;
10167: LD_ADDR_VAR 0 5
10171: PUSH
10172: LD_VAR 0 1
10176: PPUSH
10177: CALL_OW 25
10181: ST_TO_ADDR
// result := unit ;
10182: LD_ADDR_VAR 0 4
10186: PUSH
10187: LD_VAR 0 5
10191: ST_TO_ADDR
// end ;
10192: LD_VAR 0 4
10196: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10197: LD_INT 0
10199: PPUSH
10200: PPUSH
// if not side or not nation then
10201: LD_VAR 0 1
10205: NOT
10206: IFTRUE 10215
10208: PUSH
10209: LD_VAR 0 2
10213: NOT
10214: OR
10215: IFFALSE 10219
// exit ;
10217: GO 10989
// case nation of nation_american :
10219: LD_VAR 0 2
10223: PUSH
10224: LD_INT 1
10226: DOUBLE
10227: EQUAL
10228: IFTRUE 10232
10230: GO 10446
10232: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10233: LD_ADDR_VAR 0 4
10237: PUSH
10238: LD_INT 35
10240: PUSH
10241: LD_INT 45
10243: PUSH
10244: LD_INT 46
10246: PUSH
10247: LD_INT 47
10249: PUSH
10250: LD_INT 82
10252: PUSH
10253: LD_INT 83
10255: PUSH
10256: LD_INT 84
10258: PUSH
10259: LD_INT 85
10261: PUSH
10262: LD_INT 86
10264: PUSH
10265: LD_INT 1
10267: PUSH
10268: LD_INT 2
10270: PUSH
10271: LD_INT 6
10273: PUSH
10274: LD_INT 15
10276: PUSH
10277: LD_INT 16
10279: PUSH
10280: LD_INT 7
10282: PUSH
10283: LD_INT 12
10285: PUSH
10286: LD_INT 13
10288: PUSH
10289: LD_INT 10
10291: PUSH
10292: LD_INT 14
10294: PUSH
10295: LD_INT 20
10297: PUSH
10298: LD_INT 21
10300: PUSH
10301: LD_INT 22
10303: PUSH
10304: LD_INT 25
10306: PUSH
10307: LD_INT 32
10309: PUSH
10310: LD_INT 27
10312: PUSH
10313: LD_INT 36
10315: PUSH
10316: LD_INT 69
10318: PUSH
10319: LD_INT 39
10321: PUSH
10322: LD_INT 34
10324: PUSH
10325: LD_INT 40
10327: PUSH
10328: LD_INT 48
10330: PUSH
10331: LD_INT 49
10333: PUSH
10334: LD_INT 50
10336: PUSH
10337: LD_INT 51
10339: PUSH
10340: LD_INT 52
10342: PUSH
10343: LD_INT 53
10345: PUSH
10346: LD_INT 54
10348: PUSH
10349: LD_INT 55
10351: PUSH
10352: LD_INT 56
10354: PUSH
10355: LD_INT 57
10357: PUSH
10358: LD_INT 58
10360: PUSH
10361: LD_INT 59
10363: PUSH
10364: LD_INT 60
10366: PUSH
10367: LD_INT 61
10369: PUSH
10370: LD_INT 62
10372: PUSH
10373: LD_INT 80
10375: PUSH
10376: LD_INT 82
10378: PUSH
10379: LD_INT 83
10381: PUSH
10382: LD_INT 84
10384: PUSH
10385: LD_INT 85
10387: PUSH
10388: LD_INT 86
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: ST_TO_ADDR
10444: GO 10911
10446: LD_INT 2
10448: DOUBLE
10449: EQUAL
10450: IFTRUE 10454
10452: GO 10680
10454: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10455: LD_ADDR_VAR 0 4
10459: PUSH
10460: LD_INT 35
10462: PUSH
10463: LD_INT 45
10465: PUSH
10466: LD_INT 46
10468: PUSH
10469: LD_INT 47
10471: PUSH
10472: LD_INT 82
10474: PUSH
10475: LD_INT 83
10477: PUSH
10478: LD_INT 84
10480: PUSH
10481: LD_INT 85
10483: PUSH
10484: LD_INT 87
10486: PUSH
10487: LD_INT 70
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: LD_INT 11
10495: PUSH
10496: LD_INT 3
10498: PUSH
10499: LD_INT 4
10501: PUSH
10502: LD_INT 5
10504: PUSH
10505: LD_INT 6
10507: PUSH
10508: LD_INT 15
10510: PUSH
10511: LD_INT 18
10513: PUSH
10514: LD_INT 7
10516: PUSH
10517: LD_INT 17
10519: PUSH
10520: LD_INT 8
10522: PUSH
10523: LD_INT 20
10525: PUSH
10526: LD_INT 21
10528: PUSH
10529: LD_INT 22
10531: PUSH
10532: LD_INT 72
10534: PUSH
10535: LD_INT 26
10537: PUSH
10538: LD_INT 69
10540: PUSH
10541: LD_INT 39
10543: PUSH
10544: LD_INT 40
10546: PUSH
10547: LD_INT 41
10549: PUSH
10550: LD_INT 42
10552: PUSH
10553: LD_INT 43
10555: PUSH
10556: LD_INT 48
10558: PUSH
10559: LD_INT 49
10561: PUSH
10562: LD_INT 50
10564: PUSH
10565: LD_INT 51
10567: PUSH
10568: LD_INT 52
10570: PUSH
10571: LD_INT 53
10573: PUSH
10574: LD_INT 54
10576: PUSH
10577: LD_INT 55
10579: PUSH
10580: LD_INT 56
10582: PUSH
10583: LD_INT 60
10585: PUSH
10586: LD_INT 61
10588: PUSH
10589: LD_INT 62
10591: PUSH
10592: LD_INT 66
10594: PUSH
10595: LD_INT 67
10597: PUSH
10598: LD_INT 68
10600: PUSH
10601: LD_INT 81
10603: PUSH
10604: LD_INT 82
10606: PUSH
10607: LD_INT 83
10609: PUSH
10610: LD_INT 84
10612: PUSH
10613: LD_INT 85
10615: PUSH
10616: LD_INT 87
10618: PUSH
10619: LD_INT 88
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: ST_TO_ADDR
10678: GO 10911
10680: LD_INT 3
10682: DOUBLE
10683: EQUAL
10684: IFTRUE 10688
10686: GO 10910
10688: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10689: LD_ADDR_VAR 0 4
10693: PUSH
10694: LD_INT 46
10696: PUSH
10697: LD_INT 47
10699: PUSH
10700: LD_INT 1
10702: PUSH
10703: LD_INT 2
10705: PUSH
10706: LD_INT 82
10708: PUSH
10709: LD_INT 83
10711: PUSH
10712: LD_INT 84
10714: PUSH
10715: LD_INT 85
10717: PUSH
10718: LD_INT 86
10720: PUSH
10721: LD_INT 11
10723: PUSH
10724: LD_INT 9
10726: PUSH
10727: LD_INT 20
10729: PUSH
10730: LD_INT 19
10732: PUSH
10733: LD_INT 21
10735: PUSH
10736: LD_INT 24
10738: PUSH
10739: LD_INT 22
10741: PUSH
10742: LD_INT 25
10744: PUSH
10745: LD_INT 28
10747: PUSH
10748: LD_INT 29
10750: PUSH
10751: LD_INT 30
10753: PUSH
10754: LD_INT 31
10756: PUSH
10757: LD_INT 37
10759: PUSH
10760: LD_INT 38
10762: PUSH
10763: LD_INT 32
10765: PUSH
10766: LD_INT 27
10768: PUSH
10769: LD_INT 33
10771: PUSH
10772: LD_INT 69
10774: PUSH
10775: LD_INT 39
10777: PUSH
10778: LD_INT 34
10780: PUSH
10781: LD_INT 40
10783: PUSH
10784: LD_INT 71
10786: PUSH
10787: LD_INT 23
10789: PUSH
10790: LD_INT 44
10792: PUSH
10793: LD_INT 48
10795: PUSH
10796: LD_INT 49
10798: PUSH
10799: LD_INT 50
10801: PUSH
10802: LD_INT 51
10804: PUSH
10805: LD_INT 52
10807: PUSH
10808: LD_INT 53
10810: PUSH
10811: LD_INT 54
10813: PUSH
10814: LD_INT 55
10816: PUSH
10817: LD_INT 56
10819: PUSH
10820: LD_INT 57
10822: PUSH
10823: LD_INT 58
10825: PUSH
10826: LD_INT 59
10828: PUSH
10829: LD_INT 63
10831: PUSH
10832: LD_INT 64
10834: PUSH
10835: LD_INT 65
10837: PUSH
10838: LD_INT 82
10840: PUSH
10841: LD_INT 83
10843: PUSH
10844: LD_INT 84
10846: PUSH
10847: LD_INT 85
10849: PUSH
10850: LD_INT 86
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: ST_TO_ADDR
10908: GO 10911
10910: POP
// if state > - 1 and state < 3 then
10911: LD_VAR 0 3
10915: PUSH
10916: LD_INT 1
10918: NEG
10919: GREATER
10920: IFFALSE 10932
10922: PUSH
10923: LD_VAR 0 3
10927: PUSH
10928: LD_INT 3
10930: LESS
10931: AND
10932: IFFALSE 10989
// for i in result do
10934: LD_ADDR_VAR 0 5
10938: PUSH
10939: LD_VAR 0 4
10943: PUSH
10944: FOR_IN
10945: IFFALSE 10987
// if GetTech ( i , side ) <> state then
10947: LD_VAR 0 5
10951: PPUSH
10952: LD_VAR 0 1
10956: PPUSH
10957: CALL_OW 321
10961: PUSH
10962: LD_VAR 0 3
10966: NONEQUAL
10967: IFFALSE 10985
// result := result diff i ;
10969: LD_ADDR_VAR 0 4
10973: PUSH
10974: LD_VAR 0 4
10978: PUSH
10979: LD_VAR 0 5
10983: DIFF
10984: ST_TO_ADDR
10985: GO 10944
10987: POP
10988: POP
// end ;
10989: LD_VAR 0 4
10993: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10994: LD_INT 0
10996: PPUSH
10997: PPUSH
10998: PPUSH
// result := true ;
10999: LD_ADDR_VAR 0 3
11003: PUSH
11004: LD_INT 1
11006: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11007: LD_ADDR_VAR 0 5
11011: PUSH
11012: LD_VAR 0 2
11016: PPUSH
11017: CALL_OW 480
11021: ST_TO_ADDR
// if not tmp then
11022: LD_VAR 0 5
11026: NOT
11027: IFFALSE 11031
// exit ;
11029: GO 11080
// for i in tmp do
11031: LD_ADDR_VAR 0 4
11035: PUSH
11036: LD_VAR 0 5
11040: PUSH
11041: FOR_IN
11042: IFFALSE 11078
// if GetTech ( i , side ) <> state_researched then
11044: LD_VAR 0 4
11048: PPUSH
11049: LD_VAR 0 1
11053: PPUSH
11054: CALL_OW 321
11058: PUSH
11059: LD_INT 2
11061: NONEQUAL
11062: IFFALSE 11076
// begin result := false ;
11064: LD_ADDR_VAR 0 3
11068: PUSH
11069: LD_INT 0
11071: ST_TO_ADDR
// exit ;
11072: POP
11073: POP
11074: GO 11080
// end ;
11076: GO 11041
11078: POP
11079: POP
// end ;
11080: LD_VAR 0 3
11084: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11085: LD_INT 0
11087: PPUSH
11088: PPUSH
11089: PPUSH
11090: PPUSH
11091: PPUSH
11092: PPUSH
11093: PPUSH
11094: PPUSH
11095: PPUSH
11096: PPUSH
11097: PPUSH
11098: PPUSH
11099: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11100: LD_VAR 0 1
11104: NOT
11105: IFTRUE 11122
11107: PUSH
11108: LD_VAR 0 1
11112: PPUSH
11113: CALL_OW 257
11117: PUSH
11118: LD_INT 9
11120: NONEQUAL
11121: OR
11122: IFFALSE 11126
// exit ;
11124: GO 11705
// side := GetSide ( unit ) ;
11126: LD_ADDR_VAR 0 9
11130: PUSH
11131: LD_VAR 0 1
11135: PPUSH
11136: CALL_OW 255
11140: ST_TO_ADDR
// tech_space := tech_spacanom ;
11141: LD_ADDR_VAR 0 12
11145: PUSH
11146: LD_INT 29
11148: ST_TO_ADDR
// tech_time := tech_taurad ;
11149: LD_ADDR_VAR 0 13
11153: PUSH
11154: LD_INT 28
11156: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11157: LD_ADDR_VAR 0 11
11161: PUSH
11162: LD_VAR 0 1
11166: PPUSH
11167: CALL_OW 310
11171: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11172: LD_VAR 0 11
11176: PPUSH
11177: CALL_OW 247
11181: PUSH
11182: LD_INT 2
11184: EQUAL
11185: IFFALSE 11189
// exit ;
11187: GO 11705
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11189: LD_ADDR_VAR 0 8
11193: PUSH
11194: LD_INT 81
11196: PUSH
11197: LD_VAR 0 9
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 3
11208: PUSH
11209: LD_INT 21
11211: PUSH
11212: LD_INT 3
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PPUSH
11227: CALL_OW 69
11231: ST_TO_ADDR
// if not tmp then
11232: LD_VAR 0 8
11236: NOT
11237: IFFALSE 11241
// exit ;
11239: GO 11705
// if in_unit then
11241: LD_VAR 0 11
11245: IFFALSE 11269
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11247: LD_ADDR_VAR 0 10
11251: PUSH
11252: LD_VAR 0 8
11256: PPUSH
11257: LD_VAR 0 11
11261: PPUSH
11262: CALL_OW 74
11266: ST_TO_ADDR
11267: GO 11289
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11269: LD_ADDR_VAR 0 10
11273: PUSH
11274: LD_VAR 0 8
11278: PPUSH
11279: LD_VAR 0 1
11283: PPUSH
11284: CALL_OW 74
11288: ST_TO_ADDR
// if not enemy then
11289: LD_VAR 0 10
11293: NOT
11294: IFFALSE 11298
// exit ;
11296: GO 11705
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11298: LD_VAR 0 11
11302: IFFALSE 11324
11304: PUSH
11305: LD_VAR 0 11
11309: PPUSH
11310: LD_VAR 0 10
11314: PPUSH
11315: CALL_OW 296
11319: PUSH
11320: LD_INT 13
11322: GREATER
11323: AND
11324: IFTRUE 11346
11326: PUSH
11327: LD_VAR 0 1
11331: PPUSH
11332: LD_VAR 0 10
11336: PPUSH
11337: CALL_OW 296
11341: PUSH
11342: LD_INT 12
11344: GREATER
11345: OR
11346: IFFALSE 11350
// exit ;
11348: GO 11705
// missile := [ 1 ] ;
11350: LD_ADDR_VAR 0 14
11354: PUSH
11355: LD_INT 1
11357: PUSH
11358: EMPTY
11359: LIST
11360: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11361: LD_VAR 0 9
11365: PPUSH
11366: LD_VAR 0 12
11370: PPUSH
11371: CALL_OW 325
11375: IFFALSE 11404
// missile := Replace ( missile , missile + 1 , 2 ) ;
11377: LD_ADDR_VAR 0 14
11381: PUSH
11382: LD_VAR 0 14
11386: PPUSH
11387: LD_VAR 0 14
11391: PUSH
11392: LD_INT 1
11394: PLUS
11395: PPUSH
11396: LD_INT 2
11398: PPUSH
11399: CALL_OW 1
11403: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11404: LD_VAR 0 9
11408: PPUSH
11409: LD_VAR 0 13
11413: PPUSH
11414: CALL_OW 325
11418: IFFALSE 11442
11420: PUSH
11421: LD_VAR 0 10
11425: PPUSH
11426: CALL_OW 255
11430: PPUSH
11431: LD_VAR 0 13
11435: PPUSH
11436: CALL_OW 325
11440: NOT
11441: AND
11442: IFFALSE 11471
// missile := Replace ( missile , missile + 1 , 3 ) ;
11444: LD_ADDR_VAR 0 14
11448: PUSH
11449: LD_VAR 0 14
11453: PPUSH
11454: LD_VAR 0 14
11458: PUSH
11459: LD_INT 1
11461: PLUS
11462: PPUSH
11463: LD_INT 3
11465: PPUSH
11466: CALL_OW 1
11470: ST_TO_ADDR
// if missile < 2 then
11471: LD_VAR 0 14
11475: PUSH
11476: LD_INT 2
11478: LESS
11479: IFFALSE 11483
// exit ;
11481: GO 11705
// x := GetX ( enemy ) ;
11483: LD_ADDR_VAR 0 4
11487: PUSH
11488: LD_VAR 0 10
11492: PPUSH
11493: CALL_OW 250
11497: ST_TO_ADDR
// y := GetY ( enemy ) ;
11498: LD_ADDR_VAR 0 5
11502: PUSH
11503: LD_VAR 0 10
11507: PPUSH
11508: CALL_OW 251
11512: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11513: LD_ADDR_VAR 0 6
11517: PUSH
11518: LD_VAR 0 4
11522: PUSH
11523: LD_INT 1
11525: NEG
11526: PPUSH
11527: LD_INT 1
11529: PPUSH
11530: CALL_OW 12
11534: PLUS
11535: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11536: LD_ADDR_VAR 0 7
11540: PUSH
11541: LD_VAR 0 5
11545: PUSH
11546: LD_INT 1
11548: NEG
11549: PPUSH
11550: LD_INT 1
11552: PPUSH
11553: CALL_OW 12
11557: PLUS
11558: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11559: LD_VAR 0 6
11563: PPUSH
11564: LD_VAR 0 7
11568: PPUSH
11569: CALL_OW 488
11573: NOT
11574: IFFALSE 11596
// begin _x := x ;
11576: LD_ADDR_VAR 0 6
11580: PUSH
11581: LD_VAR 0 4
11585: ST_TO_ADDR
// _y := y ;
11586: LD_ADDR_VAR 0 7
11590: PUSH
11591: LD_VAR 0 5
11595: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11596: LD_ADDR_VAR 0 3
11600: PUSH
11601: LD_INT 1
11603: PPUSH
11604: LD_VAR 0 14
11608: PPUSH
11609: CALL_OW 12
11613: ST_TO_ADDR
// case i of 1 :
11614: LD_VAR 0 3
11618: PUSH
11619: LD_INT 1
11621: DOUBLE
11622: EQUAL
11623: IFTRUE 11627
11625: GO 11644
11627: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11628: LD_VAR 0 1
11632: PPUSH
11633: LD_VAR 0 10
11637: PPUSH
11638: CALL_OW 115
11642: GO 11705
11644: LD_INT 2
11646: DOUBLE
11647: EQUAL
11648: IFTRUE 11652
11650: GO 11674
11652: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11653: LD_VAR 0 1
11657: PPUSH
11658: LD_VAR 0 6
11662: PPUSH
11663: LD_VAR 0 7
11667: PPUSH
11668: CALL_OW 153
11672: GO 11705
11674: LD_INT 3
11676: DOUBLE
11677: EQUAL
11678: IFTRUE 11682
11680: GO 11704
11682: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11683: LD_VAR 0 1
11687: PPUSH
11688: LD_VAR 0 6
11692: PPUSH
11693: LD_VAR 0 7
11697: PPUSH
11698: CALL_OW 154
11702: GO 11705
11704: POP
// end ;
11705: LD_VAR 0 2
11709: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11710: LD_INT 0
11712: PPUSH
11713: PPUSH
11714: PPUSH
11715: PPUSH
11716: PPUSH
11717: PPUSH
// if not unit or not building then
11718: LD_VAR 0 1
11722: NOT
11723: IFTRUE 11732
11725: PUSH
11726: LD_VAR 0 2
11730: NOT
11731: OR
11732: IFFALSE 11736
// exit ;
11734: GO 11894
// x := GetX ( building ) ;
11736: LD_ADDR_VAR 0 5
11740: PUSH
11741: LD_VAR 0 2
11745: PPUSH
11746: CALL_OW 250
11750: ST_TO_ADDR
// y := GetY ( building ) ;
11751: LD_ADDR_VAR 0 6
11755: PUSH
11756: LD_VAR 0 2
11760: PPUSH
11761: CALL_OW 251
11765: ST_TO_ADDR
// for i := 0 to 5 do
11766: LD_ADDR_VAR 0 4
11770: PUSH
11771: DOUBLE
11772: LD_INT 0
11774: DEC
11775: ST_TO_ADDR
11776: LD_INT 5
11778: PUSH
11779: FOR_TO
11780: IFFALSE 11892
// begin _x := ShiftX ( x , i , 3 ) ;
11782: LD_ADDR_VAR 0 7
11786: PUSH
11787: LD_VAR 0 5
11791: PPUSH
11792: LD_VAR 0 4
11796: PPUSH
11797: LD_INT 3
11799: PPUSH
11800: CALL_OW 272
11804: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11805: LD_ADDR_VAR 0 8
11809: PUSH
11810: LD_VAR 0 6
11814: PPUSH
11815: LD_VAR 0 4
11819: PPUSH
11820: LD_INT 3
11822: PPUSH
11823: CALL_OW 273
11827: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11828: LD_VAR 0 7
11832: PPUSH
11833: LD_VAR 0 8
11837: PPUSH
11838: CALL_OW 488
11842: NOT
11843: IFFALSE 11847
// continue ;
11845: GO 11779
// if HexInfo ( _x , _y ) = 0 then
11847: LD_VAR 0 7
11851: PPUSH
11852: LD_VAR 0 8
11856: PPUSH
11857: CALL_OW 428
11861: PUSH
11862: LD_INT 0
11864: EQUAL
11865: IFFALSE 11890
// begin ComMoveXY ( unit , _x , _y ) ;
11867: LD_VAR 0 1
11871: PPUSH
11872: LD_VAR 0 7
11876: PPUSH
11877: LD_VAR 0 8
11881: PPUSH
11882: CALL_OW 111
// exit ;
11886: POP
11887: POP
11888: GO 11894
// end ; end ;
11890: GO 11779
11892: POP
11893: POP
// end ;
11894: LD_VAR 0 3
11898: RET
// export function ScanBase ( side , base_area ) ; begin
11899: LD_INT 0
11901: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11902: LD_ADDR_VAR 0 3
11906: PUSH
11907: LD_VAR 0 2
11911: PPUSH
11912: LD_INT 81
11914: PUSH
11915: LD_VAR 0 1
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PPUSH
11924: CALL_OW 70
11928: ST_TO_ADDR
// end ;
11929: LD_VAR 0 3
11933: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11934: LD_INT 0
11936: PPUSH
11937: PPUSH
11938: PPUSH
11939: PPUSH
// result := false ;
11940: LD_ADDR_VAR 0 2
11944: PUSH
11945: LD_INT 0
11947: ST_TO_ADDR
// side := GetSide ( unit ) ;
11948: LD_ADDR_VAR 0 3
11952: PUSH
11953: LD_VAR 0 1
11957: PPUSH
11958: CALL_OW 255
11962: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11963: LD_ADDR_VAR 0 4
11967: PUSH
11968: LD_VAR 0 1
11972: PPUSH
11973: CALL_OW 248
11977: ST_TO_ADDR
// case nat of 1 :
11978: LD_VAR 0 4
11982: PUSH
11983: LD_INT 1
11985: DOUBLE
11986: EQUAL
11987: IFTRUE 11991
11989: GO 12002
11991: POP
// tech := tech_lassight ; 2 :
11992: LD_ADDR_VAR 0 5
11996: PUSH
11997: LD_INT 12
11999: ST_TO_ADDR
12000: GO 12041
12002: LD_INT 2
12004: DOUBLE
12005: EQUAL
12006: IFTRUE 12010
12008: GO 12021
12010: POP
// tech := tech_mortar ; 3 :
12011: LD_ADDR_VAR 0 5
12015: PUSH
12016: LD_INT 41
12018: ST_TO_ADDR
12019: GO 12041
12021: LD_INT 3
12023: DOUBLE
12024: EQUAL
12025: IFTRUE 12029
12027: GO 12040
12029: POP
// tech := tech_bazooka ; end ;
12030: LD_ADDR_VAR 0 5
12034: PUSH
12035: LD_INT 44
12037: ST_TO_ADDR
12038: GO 12041
12040: POP
// if Researched ( side , tech ) then
12041: LD_VAR 0 3
12045: PPUSH
12046: LD_VAR 0 5
12050: PPUSH
12051: CALL_OW 325
12055: IFFALSE 12082
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12057: LD_ADDR_VAR 0 2
12061: PUSH
12062: LD_INT 5
12064: PUSH
12065: LD_INT 8
12067: PUSH
12068: LD_INT 9
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: LIST
12075: PUSH
12076: LD_VAR 0 4
12080: ARRAY
12081: ST_TO_ADDR
// end ;
12082: LD_VAR 0 2
12086: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12087: LD_INT 0
12089: PPUSH
12090: PPUSH
12091: PPUSH
// if not mines then
12092: LD_VAR 0 2
12096: NOT
12097: IFFALSE 12101
// exit ;
12099: GO 12245
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12101: LD_ADDR_VAR 0 5
12105: PUSH
12106: LD_INT 81
12108: PUSH
12109: LD_VAR 0 1
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 3
12120: PUSH
12121: LD_INT 21
12123: PUSH
12124: LD_INT 3
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 69
12143: ST_TO_ADDR
// for i in mines do
12144: LD_ADDR_VAR 0 4
12148: PUSH
12149: LD_VAR 0 2
12153: PUSH
12154: FOR_IN
12155: IFFALSE 12243
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12157: LD_VAR 0 4
12161: PUSH
12162: LD_INT 1
12164: ARRAY
12165: PPUSH
12166: LD_VAR 0 4
12170: PUSH
12171: LD_INT 2
12173: ARRAY
12174: PPUSH
12175: CALL_OW 458
12179: NOT
12180: IFFALSE 12184
// continue ;
12182: GO 12154
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12184: LD_VAR 0 4
12188: PUSH
12189: LD_INT 1
12191: ARRAY
12192: PPUSH
12193: LD_VAR 0 4
12197: PUSH
12198: LD_INT 2
12200: ARRAY
12201: PPUSH
12202: CALL_OW 428
12206: PUSH
12207: LD_VAR 0 5
12211: IN
12212: IFFALSE 12241
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12214: LD_VAR 0 4
12218: PUSH
12219: LD_INT 1
12221: ARRAY
12222: PPUSH
12223: LD_VAR 0 4
12227: PUSH
12228: LD_INT 2
12230: ARRAY
12231: PPUSH
12232: LD_VAR 0 1
12236: PPUSH
12237: CALL_OW 456
// end ;
12241: GO 12154
12243: POP
12244: POP
// end ;
12245: LD_VAR 0 3
12249: RET
// export function Count ( array ) ; begin
12250: LD_INT 0
12252: PPUSH
// result := array + 0 ;
12253: LD_ADDR_VAR 0 2
12257: PUSH
12258: LD_VAR 0 1
12262: PUSH
12263: LD_INT 0
12265: PLUS
12266: ST_TO_ADDR
// end ;
12267: LD_VAR 0 2
12271: RET
// export function IsEmpty ( building ) ; begin
12272: LD_INT 0
12274: PPUSH
// if not building then
12275: LD_VAR 0 1
12279: NOT
12280: IFFALSE 12284
// exit ;
12282: GO 12327
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12284: LD_ADDR_VAR 0 2
12288: PUSH
12289: LD_VAR 0 1
12293: PUSH
12294: LD_INT 22
12296: PUSH
12297: LD_VAR 0 1
12301: PPUSH
12302: CALL_OW 255
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 58
12313: PUSH
12314: EMPTY
12315: LIST
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PPUSH
12321: CALL_OW 69
12325: IN
12326: ST_TO_ADDR
// end ;
12327: LD_VAR 0 2
12331: RET
// export function IsNotFull ( building ) ; var places ; begin
12332: LD_INT 0
12334: PPUSH
12335: PPUSH
// if not building then
12336: LD_VAR 0 1
12340: NOT
12341: IFFALSE 12345
// exit ;
12343: GO 12373
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12345: LD_ADDR_VAR 0 2
12349: PUSH
12350: LD_VAR 0 1
12354: PPUSH
12355: LD_INT 3
12357: PUSH
12358: LD_INT 62
12360: PUSH
12361: EMPTY
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 72
12372: ST_TO_ADDR
// end ;
12373: LD_VAR 0 2
12377: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12378: LD_INT 0
12380: PPUSH
12381: PPUSH
12382: PPUSH
12383: PPUSH
// tmp := [ ] ;
12384: LD_ADDR_VAR 0 3
12388: PUSH
12389: EMPTY
12390: ST_TO_ADDR
// list := [ ] ;
12391: LD_ADDR_VAR 0 5
12395: PUSH
12396: EMPTY
12397: ST_TO_ADDR
// for i = 16 to 25 do
12398: LD_ADDR_VAR 0 4
12402: PUSH
12403: DOUBLE
12404: LD_INT 16
12406: DEC
12407: ST_TO_ADDR
12408: LD_INT 25
12410: PUSH
12411: FOR_TO
12412: IFFALSE 12485
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12414: LD_ADDR_VAR 0 3
12418: PUSH
12419: LD_VAR 0 3
12423: PUSH
12424: LD_INT 22
12426: PUSH
12427: LD_VAR 0 1
12431: PPUSH
12432: CALL_OW 255
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: LD_INT 91
12443: PUSH
12444: LD_VAR 0 1
12448: PUSH
12449: LD_INT 6
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: LIST
12456: PUSH
12457: LD_INT 30
12459: PUSH
12460: LD_VAR 0 4
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: LIST
12473: PUSH
12474: EMPTY
12475: LIST
12476: PPUSH
12477: CALL_OW 69
12481: ADD
12482: ST_TO_ADDR
12483: GO 12411
12485: POP
12486: POP
// for i = 1 to tmp do
12487: LD_ADDR_VAR 0 4
12491: PUSH
12492: DOUBLE
12493: LD_INT 1
12495: DEC
12496: ST_TO_ADDR
12497: LD_VAR 0 3
12501: PUSH
12502: FOR_TO
12503: IFFALSE 12591
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12505: LD_ADDR_VAR 0 5
12509: PUSH
12510: LD_VAR 0 5
12514: PUSH
12515: LD_VAR 0 3
12519: PUSH
12520: LD_VAR 0 4
12524: ARRAY
12525: PPUSH
12526: CALL_OW 266
12530: PUSH
12531: LD_VAR 0 3
12535: PUSH
12536: LD_VAR 0 4
12540: ARRAY
12541: PPUSH
12542: CALL_OW 250
12546: PUSH
12547: LD_VAR 0 3
12551: PUSH
12552: LD_VAR 0 4
12556: ARRAY
12557: PPUSH
12558: CALL_OW 251
12562: PUSH
12563: LD_VAR 0 3
12567: PUSH
12568: LD_VAR 0 4
12572: ARRAY
12573: PPUSH
12574: CALL_OW 254
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: PUSH
12585: EMPTY
12586: LIST
12587: ADD
12588: ST_TO_ADDR
12589: GO 12502
12591: POP
12592: POP
// result := list ;
12593: LD_ADDR_VAR 0 2
12597: PUSH
12598: LD_VAR 0 5
12602: ST_TO_ADDR
// end ;
12603: LD_VAR 0 2
12607: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12608: LD_INT 0
12610: PPUSH
12611: PPUSH
12612: PPUSH
12613: PPUSH
12614: PPUSH
12615: PPUSH
12616: PPUSH
// if not factory then
12617: LD_VAR 0 1
12621: NOT
12622: IFFALSE 12626
// exit ;
12624: GO 13229
// if control = control_apeman then
12626: LD_VAR 0 4
12630: PUSH
12631: LD_INT 5
12633: EQUAL
12634: IFFALSE 12743
// begin tmp := UnitsInside ( factory ) ;
12636: LD_ADDR_VAR 0 8
12640: PUSH
12641: LD_VAR 0 1
12645: PPUSH
12646: CALL_OW 313
12650: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12651: LD_VAR 0 8
12655: PPUSH
12656: LD_INT 25
12658: PUSH
12659: LD_INT 12
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 72
12670: NOT
12671: IFFALSE 12681
// control := control_manual ;
12673: LD_ADDR_VAR 0 4
12677: PUSH
12678: LD_INT 1
12680: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12681: LD_ADDR_VAR 0 8
12685: PUSH
12686: LD_VAR 0 1
12690: PPUSH
12691: CALL 12378 0 1
12695: ST_TO_ADDR
// if tmp then
12696: LD_VAR 0 8
12700: IFFALSE 12743
// begin for i in tmp do
12702: LD_ADDR_VAR 0 7
12706: PUSH
12707: LD_VAR 0 8
12711: PUSH
12712: FOR_IN
12713: IFFALSE 12741
// if i [ 1 ] = b_ext_radio then
12715: LD_VAR 0 7
12719: PUSH
12720: LD_INT 1
12722: ARRAY
12723: PUSH
12724: LD_INT 22
12726: EQUAL
12727: IFFALSE 12739
// begin control := control_remote ;
12729: LD_ADDR_VAR 0 4
12733: PUSH
12734: LD_INT 2
12736: ST_TO_ADDR
// break ;
12737: GO 12741
// end ;
12739: GO 12712
12741: POP
12742: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12743: LD_VAR 0 1
12747: PPUSH
12748: LD_VAR 0 2
12752: PPUSH
12753: LD_VAR 0 3
12757: PPUSH
12758: LD_VAR 0 4
12762: PPUSH
12763: LD_VAR 0 5
12767: PPUSH
12768: CALL_OW 448
12772: IFFALSE 12807
// begin result := [ chassis , engine , control , weapon ] ;
12774: LD_ADDR_VAR 0 6
12778: PUSH
12779: LD_VAR 0 2
12783: PUSH
12784: LD_VAR 0 3
12788: PUSH
12789: LD_VAR 0 4
12793: PUSH
12794: LD_VAR 0 5
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: ST_TO_ADDR
// exit ;
12805: GO 13229
// end ; _chassis := AvailableChassisList ( factory ) ;
12807: LD_ADDR_VAR 0 9
12811: PUSH
12812: LD_VAR 0 1
12816: PPUSH
12817: CALL_OW 475
12821: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12822: LD_ADDR_VAR 0 11
12826: PUSH
12827: LD_VAR 0 1
12831: PPUSH
12832: CALL_OW 476
12836: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12837: LD_ADDR_VAR 0 12
12841: PUSH
12842: LD_VAR 0 1
12846: PPUSH
12847: CALL_OW 477
12851: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12852: LD_ADDR_VAR 0 10
12856: PUSH
12857: LD_VAR 0 1
12861: PPUSH
12862: CALL_OW 478
12866: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12867: LD_VAR 0 9
12871: NOT
12872: IFTRUE 12881
12874: PUSH
12875: LD_VAR 0 11
12879: NOT
12880: OR
12881: IFTRUE 12890
12883: PUSH
12884: LD_VAR 0 12
12888: NOT
12889: OR
12890: IFTRUE 12899
12892: PUSH
12893: LD_VAR 0 10
12897: NOT
12898: OR
12899: IFFALSE 12934
// begin result := [ chassis , engine , control , weapon ] ;
12901: LD_ADDR_VAR 0 6
12905: PUSH
12906: LD_VAR 0 2
12910: PUSH
12911: LD_VAR 0 3
12915: PUSH
12916: LD_VAR 0 4
12920: PUSH
12921: LD_VAR 0 5
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: ST_TO_ADDR
// exit ;
12932: GO 13229
// end ; if not chassis in _chassis then
12934: LD_VAR 0 2
12938: PUSH
12939: LD_VAR 0 9
12943: IN
12944: NOT
12945: IFFALSE 12971
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12947: LD_ADDR_VAR 0 2
12951: PUSH
12952: LD_VAR 0 9
12956: PUSH
12957: LD_INT 1
12959: PPUSH
12960: LD_VAR 0 9
12964: PPUSH
12965: CALL_OW 12
12969: ARRAY
12970: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12971: LD_VAR 0 2
12975: PPUSH
12976: LD_VAR 0 3
12980: PPUSH
12981: CALL 13234 0 2
12985: NOT
12986: IFFALSE 13047
// repeat engine := _engine [ 1 ] ;
12988: LD_ADDR_VAR 0 3
12992: PUSH
12993: LD_VAR 0 11
12997: PUSH
12998: LD_INT 1
13000: ARRAY
13001: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13002: LD_ADDR_VAR 0 11
13006: PUSH
13007: LD_VAR 0 11
13011: PPUSH
13012: LD_INT 1
13014: PPUSH
13015: CALL_OW 3
13019: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13020: LD_VAR 0 2
13024: PPUSH
13025: LD_VAR 0 3
13029: PPUSH
13030: CALL 13234 0 2
13034: IFTRUE 13045
13036: PUSH
13037: LD_VAR 0 11
13041: PUSH
13042: EMPTY
13043: EQUAL
13044: OR
13045: IFFALSE 12988
// if not control in _control then
13047: LD_VAR 0 4
13051: PUSH
13052: LD_VAR 0 12
13056: IN
13057: NOT
13058: IFFALSE 13084
// control := _control [ rand ( 1 , _control ) ] ;
13060: LD_ADDR_VAR 0 4
13064: PUSH
13065: LD_VAR 0 12
13069: PUSH
13070: LD_INT 1
13072: PPUSH
13073: LD_VAR 0 12
13077: PPUSH
13078: CALL_OW 12
13082: ARRAY
13083: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13084: LD_VAR 0 2
13088: PPUSH
13089: LD_VAR 0 5
13093: PPUSH
13094: CALL 13456 0 2
13098: NOT
13099: IFFALSE 13160
// repeat weapon := _weapon [ 1 ] ;
13101: LD_ADDR_VAR 0 5
13105: PUSH
13106: LD_VAR 0 10
13110: PUSH
13111: LD_INT 1
13113: ARRAY
13114: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13115: LD_ADDR_VAR 0 10
13119: PUSH
13120: LD_VAR 0 10
13124: PPUSH
13125: LD_INT 1
13127: PPUSH
13128: CALL_OW 3
13132: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13133: LD_VAR 0 2
13137: PPUSH
13138: LD_VAR 0 5
13142: PPUSH
13143: CALL 13456 0 2
13147: IFTRUE 13158
13149: PUSH
13150: LD_VAR 0 10
13154: PUSH
13155: EMPTY
13156: EQUAL
13157: OR
13158: IFFALSE 13101
// result := [ ] ;
13160: LD_ADDR_VAR 0 6
13164: PUSH
13165: EMPTY
13166: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13167: LD_VAR 0 1
13171: PPUSH
13172: LD_VAR 0 2
13176: PPUSH
13177: LD_VAR 0 3
13181: PPUSH
13182: LD_VAR 0 4
13186: PPUSH
13187: LD_VAR 0 5
13191: PPUSH
13192: CALL_OW 448
13196: IFFALSE 13229
// result := [ chassis , engine , control , weapon ] ;
13198: LD_ADDR_VAR 0 6
13202: PUSH
13203: LD_VAR 0 2
13207: PUSH
13208: LD_VAR 0 3
13212: PUSH
13213: LD_VAR 0 4
13217: PUSH
13218: LD_VAR 0 5
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: ST_TO_ADDR
// end ;
13229: LD_VAR 0 6
13233: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13234: LD_INT 0
13236: PPUSH
// if not chassis or not engine then
13237: LD_VAR 0 1
13241: NOT
13242: IFTRUE 13251
13244: PUSH
13245: LD_VAR 0 2
13249: NOT
13250: OR
13251: IFFALSE 13255
// exit ;
13253: GO 13451
// case engine of engine_solar :
13255: LD_VAR 0 2
13259: PUSH
13260: LD_INT 2
13262: DOUBLE
13263: EQUAL
13264: IFTRUE 13268
13266: GO 13306
13268: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13269: LD_ADDR_VAR 0 3
13273: PUSH
13274: LD_INT 11
13276: PUSH
13277: LD_INT 12
13279: PUSH
13280: LD_INT 13
13282: PUSH
13283: LD_INT 14
13285: PUSH
13286: LD_INT 1
13288: PUSH
13289: LD_INT 2
13291: PUSH
13292: LD_INT 3
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: ST_TO_ADDR
13304: GO 13435
13306: LD_INT 1
13308: DOUBLE
13309: EQUAL
13310: IFTRUE 13314
13312: GO 13376
13314: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13315: LD_ADDR_VAR 0 3
13319: PUSH
13320: LD_INT 11
13322: PUSH
13323: LD_INT 12
13325: PUSH
13326: LD_INT 13
13328: PUSH
13329: LD_INT 14
13331: PUSH
13332: LD_INT 1
13334: PUSH
13335: LD_INT 2
13337: PUSH
13338: LD_INT 3
13340: PUSH
13341: LD_INT 4
13343: PUSH
13344: LD_INT 5
13346: PUSH
13347: LD_INT 21
13349: PUSH
13350: LD_INT 23
13352: PUSH
13353: LD_INT 22
13355: PUSH
13356: LD_INT 24
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: ST_TO_ADDR
13374: GO 13435
13376: LD_INT 3
13378: DOUBLE
13379: EQUAL
13380: IFTRUE 13384
13382: GO 13434
13384: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13385: LD_ADDR_VAR 0 3
13389: PUSH
13390: LD_INT 13
13392: PUSH
13393: LD_INT 14
13395: PUSH
13396: LD_INT 2
13398: PUSH
13399: LD_INT 3
13401: PUSH
13402: LD_INT 4
13404: PUSH
13405: LD_INT 5
13407: PUSH
13408: LD_INT 21
13410: PUSH
13411: LD_INT 22
13413: PUSH
13414: LD_INT 23
13416: PUSH
13417: LD_INT 24
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: ST_TO_ADDR
13432: GO 13435
13434: POP
// result := ( chassis in result ) ;
13435: LD_ADDR_VAR 0 3
13439: PUSH
13440: LD_VAR 0 1
13444: PUSH
13445: LD_VAR 0 3
13449: IN
13450: ST_TO_ADDR
// end ;
13451: LD_VAR 0 3
13455: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13456: LD_INT 0
13458: PPUSH
// if not chassis or not weapon then
13459: LD_VAR 0 1
13463: NOT
13464: IFTRUE 13473
13466: PUSH
13467: LD_VAR 0 2
13471: NOT
13472: OR
13473: IFFALSE 13477
// exit ;
13475: GO 14537
// case weapon of us_machine_gun :
13477: LD_VAR 0 2
13481: PUSH
13482: LD_INT 2
13484: DOUBLE
13485: EQUAL
13486: IFTRUE 13490
13488: GO 13520
13490: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13491: LD_ADDR_VAR 0 3
13495: PUSH
13496: LD_INT 1
13498: PUSH
13499: LD_INT 2
13501: PUSH
13502: LD_INT 3
13504: PUSH
13505: LD_INT 4
13507: PUSH
13508: LD_INT 5
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: ST_TO_ADDR
13518: GO 14521
13520: LD_INT 3
13522: DOUBLE
13523: EQUAL
13524: IFTRUE 13528
13526: GO 13558
13528: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13529: LD_ADDR_VAR 0 3
13533: PUSH
13534: LD_INT 1
13536: PUSH
13537: LD_INT 2
13539: PUSH
13540: LD_INT 3
13542: PUSH
13543: LD_INT 4
13545: PUSH
13546: LD_INT 5
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: ST_TO_ADDR
13556: GO 14521
13558: LD_INT 11
13560: DOUBLE
13561: EQUAL
13562: IFTRUE 13566
13564: GO 13596
13566: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13567: LD_ADDR_VAR 0 3
13571: PUSH
13572: LD_INT 1
13574: PUSH
13575: LD_INT 2
13577: PUSH
13578: LD_INT 3
13580: PUSH
13581: LD_INT 4
13583: PUSH
13584: LD_INT 5
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: ST_TO_ADDR
13594: GO 14521
13596: LD_INT 4
13598: DOUBLE
13599: EQUAL
13600: IFTRUE 13604
13602: GO 13630
13604: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13605: LD_ADDR_VAR 0 3
13609: PUSH
13610: LD_INT 2
13612: PUSH
13613: LD_INT 3
13615: PUSH
13616: LD_INT 4
13618: PUSH
13619: LD_INT 5
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: ST_TO_ADDR
13628: GO 14521
13630: LD_INT 5
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13664
13638: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13639: LD_ADDR_VAR 0 3
13643: PUSH
13644: LD_INT 2
13646: PUSH
13647: LD_INT 3
13649: PUSH
13650: LD_INT 4
13652: PUSH
13653: LD_INT 5
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: ST_TO_ADDR
13662: GO 14521
13664: LD_INT 9
13666: DOUBLE
13667: EQUAL
13668: IFTRUE 13672
13670: GO 13698
13672: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13673: LD_ADDR_VAR 0 3
13677: PUSH
13678: LD_INT 2
13680: PUSH
13681: LD_INT 3
13683: PUSH
13684: LD_INT 4
13686: PUSH
13687: LD_INT 5
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: ST_TO_ADDR
13696: GO 14521
13698: LD_INT 7
13700: DOUBLE
13701: EQUAL
13702: IFTRUE 13706
13704: GO 13732
13706: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13707: LD_ADDR_VAR 0 3
13711: PUSH
13712: LD_INT 2
13714: PUSH
13715: LD_INT 3
13717: PUSH
13718: LD_INT 4
13720: PUSH
13721: LD_INT 5
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: ST_TO_ADDR
13730: GO 14521
13732: LD_INT 12
13734: DOUBLE
13735: EQUAL
13736: IFTRUE 13740
13738: GO 13766
13740: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13741: LD_ADDR_VAR 0 3
13745: PUSH
13746: LD_INT 2
13748: PUSH
13749: LD_INT 3
13751: PUSH
13752: LD_INT 4
13754: PUSH
13755: LD_INT 5
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: ST_TO_ADDR
13764: GO 14521
13766: LD_INT 13
13768: DOUBLE
13769: EQUAL
13770: IFTRUE 13774
13772: GO 13800
13774: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13775: LD_ADDR_VAR 0 3
13779: PUSH
13780: LD_INT 2
13782: PUSH
13783: LD_INT 3
13785: PUSH
13786: LD_INT 4
13788: PUSH
13789: LD_INT 5
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: ST_TO_ADDR
13798: GO 14521
13800: LD_INT 14
13802: DOUBLE
13803: EQUAL
13804: IFTRUE 13808
13806: GO 13826
13808: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13809: LD_ADDR_VAR 0 3
13813: PUSH
13814: LD_INT 4
13816: PUSH
13817: LD_INT 5
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: ST_TO_ADDR
13824: GO 14521
13826: LD_INT 6
13828: DOUBLE
13829: EQUAL
13830: IFTRUE 13834
13832: GO 13852
13834: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13835: LD_ADDR_VAR 0 3
13839: PUSH
13840: LD_INT 4
13842: PUSH
13843: LD_INT 5
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: ST_TO_ADDR
13850: GO 14521
13852: LD_INT 10
13854: DOUBLE
13855: EQUAL
13856: IFTRUE 13860
13858: GO 13878
13860: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13861: LD_ADDR_VAR 0 3
13865: PUSH
13866: LD_INT 4
13868: PUSH
13869: LD_INT 5
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: ST_TO_ADDR
13876: GO 14521
13878: LD_INT 22
13880: DOUBLE
13881: EQUAL
13882: IFTRUE 13886
13884: GO 13912
13886: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13887: LD_ADDR_VAR 0 3
13891: PUSH
13892: LD_INT 11
13894: PUSH
13895: LD_INT 12
13897: PUSH
13898: LD_INT 13
13900: PUSH
13901: LD_INT 14
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: ST_TO_ADDR
13910: GO 14521
13912: LD_INT 23
13914: DOUBLE
13915: EQUAL
13916: IFTRUE 13920
13918: GO 13946
13920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13921: LD_ADDR_VAR 0 3
13925: PUSH
13926: LD_INT 11
13928: PUSH
13929: LD_INT 12
13931: PUSH
13932: LD_INT 13
13934: PUSH
13935: LD_INT 14
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: ST_TO_ADDR
13944: GO 14521
13946: LD_INT 24
13948: DOUBLE
13949: EQUAL
13950: IFTRUE 13954
13952: GO 13980
13954: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13955: LD_ADDR_VAR 0 3
13959: PUSH
13960: LD_INT 11
13962: PUSH
13963: LD_INT 12
13965: PUSH
13966: LD_INT 13
13968: PUSH
13969: LD_INT 14
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: ST_TO_ADDR
13978: GO 14521
13980: LD_INT 30
13982: DOUBLE
13983: EQUAL
13984: IFTRUE 13988
13986: GO 14014
13988: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13989: LD_ADDR_VAR 0 3
13993: PUSH
13994: LD_INT 11
13996: PUSH
13997: LD_INT 12
13999: PUSH
14000: LD_INT 13
14002: PUSH
14003: LD_INT 14
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: ST_TO_ADDR
14012: GO 14521
14014: LD_INT 25
14016: DOUBLE
14017: EQUAL
14018: IFTRUE 14022
14020: GO 14040
14022: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14023: LD_ADDR_VAR 0 3
14027: PUSH
14028: LD_INT 13
14030: PUSH
14031: LD_INT 14
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: ST_TO_ADDR
14038: GO 14521
14040: LD_INT 27
14042: DOUBLE
14043: EQUAL
14044: IFTRUE 14048
14046: GO 14066
14048: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14049: LD_ADDR_VAR 0 3
14053: PUSH
14054: LD_INT 13
14056: PUSH
14057: LD_INT 14
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: ST_TO_ADDR
14064: GO 14521
14066: LD_INT 92
14068: DOUBLE
14069: EQUAL
14070: IFTRUE 14074
14072: GO 14100
14074: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14075: LD_ADDR_VAR 0 3
14079: PUSH
14080: LD_INT 11
14082: PUSH
14083: LD_INT 12
14085: PUSH
14086: LD_INT 13
14088: PUSH
14089: LD_INT 14
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: ST_TO_ADDR
14098: GO 14521
14100: LD_INT 28
14102: DOUBLE
14103: EQUAL
14104: IFTRUE 14108
14106: GO 14126
14108: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14109: LD_ADDR_VAR 0 3
14113: PUSH
14114: LD_INT 13
14116: PUSH
14117: LD_INT 14
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: ST_TO_ADDR
14124: GO 14521
14126: LD_INT 29
14128: DOUBLE
14129: EQUAL
14130: IFTRUE 14134
14132: GO 14152
14134: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14135: LD_ADDR_VAR 0 3
14139: PUSH
14140: LD_INT 13
14142: PUSH
14143: LD_INT 14
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: ST_TO_ADDR
14150: GO 14521
14152: LD_INT 31
14154: DOUBLE
14155: EQUAL
14156: IFTRUE 14160
14158: GO 14178
14160: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14161: LD_ADDR_VAR 0 3
14165: PUSH
14166: LD_INT 13
14168: PUSH
14169: LD_INT 14
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: ST_TO_ADDR
14176: GO 14521
14178: LD_INT 26
14180: DOUBLE
14181: EQUAL
14182: IFTRUE 14186
14184: GO 14204
14186: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14187: LD_ADDR_VAR 0 3
14191: PUSH
14192: LD_INT 13
14194: PUSH
14195: LD_INT 14
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: ST_TO_ADDR
14202: GO 14521
14204: LD_INT 42
14206: DOUBLE
14207: EQUAL
14208: IFTRUE 14212
14210: GO 14238
14212: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14213: LD_ADDR_VAR 0 3
14217: PUSH
14218: LD_INT 21
14220: PUSH
14221: LD_INT 22
14223: PUSH
14224: LD_INT 23
14226: PUSH
14227: LD_INT 24
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: ST_TO_ADDR
14236: GO 14521
14238: LD_INT 43
14240: DOUBLE
14241: EQUAL
14242: IFTRUE 14246
14244: GO 14272
14246: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14247: LD_ADDR_VAR 0 3
14251: PUSH
14252: LD_INT 21
14254: PUSH
14255: LD_INT 22
14257: PUSH
14258: LD_INT 23
14260: PUSH
14261: LD_INT 24
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: ST_TO_ADDR
14270: GO 14521
14272: LD_INT 44
14274: DOUBLE
14275: EQUAL
14276: IFTRUE 14280
14278: GO 14306
14280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14281: LD_ADDR_VAR 0 3
14285: PUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 22
14291: PUSH
14292: LD_INT 23
14294: PUSH
14295: LD_INT 24
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: ST_TO_ADDR
14304: GO 14521
14306: LD_INT 45
14308: DOUBLE
14309: EQUAL
14310: IFTRUE 14314
14312: GO 14340
14314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14315: LD_ADDR_VAR 0 3
14319: PUSH
14320: LD_INT 21
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_INT 23
14328: PUSH
14329: LD_INT 24
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: ST_TO_ADDR
14338: GO 14521
14340: LD_INT 49
14342: DOUBLE
14343: EQUAL
14344: IFTRUE 14348
14346: GO 14374
14348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14349: LD_ADDR_VAR 0 3
14353: PUSH
14354: LD_INT 21
14356: PUSH
14357: LD_INT 22
14359: PUSH
14360: LD_INT 23
14362: PUSH
14363: LD_INT 24
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: ST_TO_ADDR
14372: GO 14521
14374: LD_INT 51
14376: DOUBLE
14377: EQUAL
14378: IFTRUE 14382
14380: GO 14408
14382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14383: LD_ADDR_VAR 0 3
14387: PUSH
14388: LD_INT 21
14390: PUSH
14391: LD_INT 22
14393: PUSH
14394: LD_INT 23
14396: PUSH
14397: LD_INT 24
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: ST_TO_ADDR
14406: GO 14521
14408: LD_INT 52
14410: DOUBLE
14411: EQUAL
14412: IFTRUE 14416
14414: GO 14442
14416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14417: LD_ADDR_VAR 0 3
14421: PUSH
14422: LD_INT 21
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_INT 23
14430: PUSH
14431: LD_INT 24
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: ST_TO_ADDR
14440: GO 14521
14442: LD_INT 53
14444: DOUBLE
14445: EQUAL
14446: IFTRUE 14450
14448: GO 14468
14450: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14451: LD_ADDR_VAR 0 3
14455: PUSH
14456: LD_INT 23
14458: PUSH
14459: LD_INT 24
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: ST_TO_ADDR
14466: GO 14521
14468: LD_INT 46
14470: DOUBLE
14471: EQUAL
14472: IFTRUE 14476
14474: GO 14494
14476: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14477: LD_ADDR_VAR 0 3
14481: PUSH
14482: LD_INT 23
14484: PUSH
14485: LD_INT 24
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: ST_TO_ADDR
14492: GO 14521
14494: LD_INT 47
14496: DOUBLE
14497: EQUAL
14498: IFTRUE 14502
14500: GO 14520
14502: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14503: LD_ADDR_VAR 0 3
14507: PUSH
14508: LD_INT 23
14510: PUSH
14511: LD_INT 24
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: ST_TO_ADDR
14518: GO 14521
14520: POP
// result := ( chassis in result ) ;
14521: LD_ADDR_VAR 0 3
14525: PUSH
14526: LD_VAR 0 1
14530: PUSH
14531: LD_VAR 0 3
14535: IN
14536: ST_TO_ADDR
// end ;
14537: LD_VAR 0 3
14541: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14542: LD_INT 0
14544: PPUSH
14545: PPUSH
14546: PPUSH
14547: PPUSH
14548: PPUSH
14549: PPUSH
14550: PPUSH
// result := array ;
14551: LD_ADDR_VAR 0 5
14555: PUSH
14556: LD_VAR 0 1
14560: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14561: LD_VAR 0 1
14565: NOT
14566: IFTRUE 14575
14568: PUSH
14569: LD_VAR 0 2
14573: NOT
14574: OR
14575: IFTRUE 14584
14577: PUSH
14578: LD_VAR 0 3
14582: NOT
14583: OR
14584: IFTRUE 14598
14586: PUSH
14587: LD_VAR 0 2
14591: PUSH
14592: LD_VAR 0 1
14596: GREATER
14597: OR
14598: IFTRUE 14612
14600: PUSH
14601: LD_VAR 0 3
14605: PUSH
14606: LD_VAR 0 1
14610: GREATER
14611: OR
14612: IFFALSE 14616
// exit ;
14614: GO 14912
// if direction then
14616: LD_VAR 0 4
14620: IFFALSE 14684
// begin d := 1 ;
14622: LD_ADDR_VAR 0 9
14626: PUSH
14627: LD_INT 1
14629: ST_TO_ADDR
// if i_from > i_to then
14630: LD_VAR 0 2
14634: PUSH
14635: LD_VAR 0 3
14639: GREATER
14640: IFFALSE 14666
// length := ( array - i_from ) + i_to else
14642: LD_ADDR_VAR 0 11
14646: PUSH
14647: LD_VAR 0 1
14651: PUSH
14652: LD_VAR 0 2
14656: MINUS
14657: PUSH
14658: LD_VAR 0 3
14662: PLUS
14663: ST_TO_ADDR
14664: GO 14682
// length := i_to - i_from ;
14666: LD_ADDR_VAR 0 11
14670: PUSH
14671: LD_VAR 0 3
14675: PUSH
14676: LD_VAR 0 2
14680: MINUS
14681: ST_TO_ADDR
// end else
14682: GO 14745
// begin d := - 1 ;
14684: LD_ADDR_VAR 0 9
14688: PUSH
14689: LD_INT 1
14691: NEG
14692: ST_TO_ADDR
// if i_from > i_to then
14693: LD_VAR 0 2
14697: PUSH
14698: LD_VAR 0 3
14702: GREATER
14703: IFFALSE 14723
// length := i_from - i_to else
14705: LD_ADDR_VAR 0 11
14709: PUSH
14710: LD_VAR 0 2
14714: PUSH
14715: LD_VAR 0 3
14719: MINUS
14720: ST_TO_ADDR
14721: GO 14745
// length := ( array - i_to ) + i_from ;
14723: LD_ADDR_VAR 0 11
14727: PUSH
14728: LD_VAR 0 1
14732: PUSH
14733: LD_VAR 0 3
14737: MINUS
14738: PUSH
14739: LD_VAR 0 2
14743: PLUS
14744: ST_TO_ADDR
// end ; if not length then
14745: LD_VAR 0 11
14749: NOT
14750: IFFALSE 14754
// exit ;
14752: GO 14912
// tmp := array ;
14754: LD_ADDR_VAR 0 10
14758: PUSH
14759: LD_VAR 0 1
14763: ST_TO_ADDR
// for i = 1 to length do
14764: LD_ADDR_VAR 0 6
14768: PUSH
14769: DOUBLE
14770: LD_INT 1
14772: DEC
14773: ST_TO_ADDR
14774: LD_VAR 0 11
14778: PUSH
14779: FOR_TO
14780: IFFALSE 14900
// begin for j = 1 to array do
14782: LD_ADDR_VAR 0 7
14786: PUSH
14787: DOUBLE
14788: LD_INT 1
14790: DEC
14791: ST_TO_ADDR
14792: LD_VAR 0 1
14796: PUSH
14797: FOR_TO
14798: IFFALSE 14886
// begin k := j + d ;
14800: LD_ADDR_VAR 0 8
14804: PUSH
14805: LD_VAR 0 7
14809: PUSH
14810: LD_VAR 0 9
14814: PLUS
14815: ST_TO_ADDR
// if k > array then
14816: LD_VAR 0 8
14820: PUSH
14821: LD_VAR 0 1
14825: GREATER
14826: IFFALSE 14836
// k := 1 ;
14828: LD_ADDR_VAR 0 8
14832: PUSH
14833: LD_INT 1
14835: ST_TO_ADDR
// if not k then
14836: LD_VAR 0 8
14840: NOT
14841: IFFALSE 14853
// k := array ;
14843: LD_ADDR_VAR 0 8
14847: PUSH
14848: LD_VAR 0 1
14852: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14853: LD_ADDR_VAR 0 10
14857: PUSH
14858: LD_VAR 0 10
14862: PPUSH
14863: LD_VAR 0 8
14867: PPUSH
14868: LD_VAR 0 1
14872: PUSH
14873: LD_VAR 0 7
14877: ARRAY
14878: PPUSH
14879: CALL_OW 1
14883: ST_TO_ADDR
// end ;
14884: GO 14797
14886: POP
14887: POP
// array := tmp ;
14888: LD_ADDR_VAR 0 1
14892: PUSH
14893: LD_VAR 0 10
14897: ST_TO_ADDR
// end ;
14898: GO 14779
14900: POP
14901: POP
// result := array ;
14902: LD_ADDR_VAR 0 5
14906: PUSH
14907: LD_VAR 0 1
14911: ST_TO_ADDR
// end ;
14912: LD_VAR 0 5
14916: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14917: LD_INT 0
14919: PPUSH
14920: PPUSH
// result := 0 ;
14921: LD_ADDR_VAR 0 3
14925: PUSH
14926: LD_INT 0
14928: ST_TO_ADDR
// if not array or not value in array then
14929: LD_VAR 0 1
14933: NOT
14934: IFTRUE 14949
14936: PUSH
14937: LD_VAR 0 2
14941: PUSH
14942: LD_VAR 0 1
14946: IN
14947: NOT
14948: OR
14949: IFFALSE 14953
// exit ;
14951: GO 15007
// for i = 1 to array do
14953: LD_ADDR_VAR 0 4
14957: PUSH
14958: DOUBLE
14959: LD_INT 1
14961: DEC
14962: ST_TO_ADDR
14963: LD_VAR 0 1
14967: PUSH
14968: FOR_TO
14969: IFFALSE 15005
// if value = array [ i ] then
14971: LD_VAR 0 2
14975: PUSH
14976: LD_VAR 0 1
14980: PUSH
14981: LD_VAR 0 4
14985: ARRAY
14986: EQUAL
14987: IFFALSE 15003
// begin result := i ;
14989: LD_ADDR_VAR 0 3
14993: PUSH
14994: LD_VAR 0 4
14998: ST_TO_ADDR
// exit ;
14999: POP
15000: POP
15001: GO 15007
// end ;
15003: GO 14968
15005: POP
15006: POP
// end ;
15007: LD_VAR 0 3
15011: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15012: LD_INT 0
15014: PPUSH
// vc_chassis := chassis ;
15015: LD_ADDR_OWVAR 37
15019: PUSH
15020: LD_VAR 0 1
15024: ST_TO_ADDR
// vc_engine := engine ;
15025: LD_ADDR_OWVAR 39
15029: PUSH
15030: LD_VAR 0 2
15034: ST_TO_ADDR
// vc_control := control ;
15035: LD_ADDR_OWVAR 38
15039: PUSH
15040: LD_VAR 0 3
15044: ST_TO_ADDR
// vc_weapon := weapon ;
15045: LD_ADDR_OWVAR 40
15049: PUSH
15050: LD_VAR 0 4
15054: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15055: LD_ADDR_OWVAR 41
15059: PUSH
15060: LD_VAR 0 5
15064: ST_TO_ADDR
// end ;
15065: LD_VAR 0 6
15069: RET
// export function WantPlant ( unit ) ; var task ; begin
15070: LD_INT 0
15072: PPUSH
15073: PPUSH
// result := false ;
15074: LD_ADDR_VAR 0 2
15078: PUSH
15079: LD_INT 0
15081: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15082: LD_ADDR_VAR 0 3
15086: PUSH
15087: LD_VAR 0 1
15091: PPUSH
15092: CALL_OW 437
15096: ST_TO_ADDR
// if task then
15097: LD_VAR 0 3
15101: IFFALSE 15129
// if task [ 1 ] [ 1 ] = p then
15103: LD_VAR 0 3
15107: PUSH
15108: LD_INT 1
15110: ARRAY
15111: PUSH
15112: LD_INT 1
15114: ARRAY
15115: PUSH
15116: LD_STRING p
15118: EQUAL
15119: IFFALSE 15129
// result := true ;
15121: LD_ADDR_VAR 0 2
15125: PUSH
15126: LD_INT 1
15128: ST_TO_ADDR
// end ;
15129: LD_VAR 0 2
15133: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15134: LD_INT 0
15136: PPUSH
15137: PPUSH
15138: PPUSH
15139: PPUSH
// if pos < 1 then
15140: LD_VAR 0 2
15144: PUSH
15145: LD_INT 1
15147: LESS
15148: IFFALSE 15152
// exit ;
15150: GO 15455
// if pos = 1 then
15152: LD_VAR 0 2
15156: PUSH
15157: LD_INT 1
15159: EQUAL
15160: IFFALSE 15193
// result := Replace ( arr , pos [ 1 ] , value ) else
15162: LD_ADDR_VAR 0 4
15166: PUSH
15167: LD_VAR 0 1
15171: PPUSH
15172: LD_VAR 0 2
15176: PUSH
15177: LD_INT 1
15179: ARRAY
15180: PPUSH
15181: LD_VAR 0 3
15185: PPUSH
15186: CALL_OW 1
15190: ST_TO_ADDR
15191: GO 15455
// begin tmp := arr ;
15193: LD_ADDR_VAR 0 6
15197: PUSH
15198: LD_VAR 0 1
15202: ST_TO_ADDR
// s_arr := [ tmp ] ;
15203: LD_ADDR_VAR 0 7
15207: PUSH
15208: LD_VAR 0 6
15212: PUSH
15213: EMPTY
15214: LIST
15215: ST_TO_ADDR
// for i = 1 to pos - 1 do
15216: LD_ADDR_VAR 0 5
15220: PUSH
15221: DOUBLE
15222: LD_INT 1
15224: DEC
15225: ST_TO_ADDR
15226: LD_VAR 0 2
15230: PUSH
15231: LD_INT 1
15233: MINUS
15234: PUSH
15235: FOR_TO
15236: IFFALSE 15281
// begin tmp := tmp [ pos [ i ] ] ;
15238: LD_ADDR_VAR 0 6
15242: PUSH
15243: LD_VAR 0 6
15247: PUSH
15248: LD_VAR 0 2
15252: PUSH
15253: LD_VAR 0 5
15257: ARRAY
15258: ARRAY
15259: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15260: LD_ADDR_VAR 0 7
15264: PUSH
15265: LD_VAR 0 7
15269: PUSH
15270: LD_VAR 0 6
15274: PUSH
15275: EMPTY
15276: LIST
15277: ADD
15278: ST_TO_ADDR
// end ;
15279: GO 15235
15281: POP
15282: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15283: LD_ADDR_VAR 0 6
15287: PUSH
15288: LD_VAR 0 6
15292: PPUSH
15293: LD_VAR 0 2
15297: PUSH
15298: LD_VAR 0 2
15302: ARRAY
15303: PPUSH
15304: LD_VAR 0 3
15308: PPUSH
15309: CALL_OW 1
15313: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15314: LD_ADDR_VAR 0 7
15318: PUSH
15319: LD_VAR 0 7
15323: PPUSH
15324: LD_VAR 0 7
15328: PPUSH
15329: LD_VAR 0 6
15333: PPUSH
15334: CALL_OW 1
15338: ST_TO_ADDR
// for i = s_arr downto 2 do
15339: LD_ADDR_VAR 0 5
15343: PUSH
15344: DOUBLE
15345: LD_VAR 0 7
15349: INC
15350: ST_TO_ADDR
15351: LD_INT 2
15353: PUSH
15354: FOR_DOWNTO
15355: IFFALSE 15439
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15357: LD_ADDR_VAR 0 6
15361: PUSH
15362: LD_VAR 0 7
15366: PUSH
15367: LD_VAR 0 5
15371: PUSH
15372: LD_INT 1
15374: MINUS
15375: ARRAY
15376: PPUSH
15377: LD_VAR 0 2
15381: PUSH
15382: LD_VAR 0 5
15386: PUSH
15387: LD_INT 1
15389: MINUS
15390: ARRAY
15391: PPUSH
15392: LD_VAR 0 7
15396: PUSH
15397: LD_VAR 0 5
15401: ARRAY
15402: PPUSH
15403: CALL_OW 1
15407: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15408: LD_ADDR_VAR 0 7
15412: PUSH
15413: LD_VAR 0 7
15417: PPUSH
15418: LD_VAR 0 5
15422: PUSH
15423: LD_INT 1
15425: MINUS
15426: PPUSH
15427: LD_VAR 0 6
15431: PPUSH
15432: CALL_OW 1
15436: ST_TO_ADDR
// end ;
15437: GO 15354
15439: POP
15440: POP
// result := s_arr [ 1 ] ;
15441: LD_ADDR_VAR 0 4
15445: PUSH
15446: LD_VAR 0 7
15450: PUSH
15451: LD_INT 1
15453: ARRAY
15454: ST_TO_ADDR
// end ; end ;
15455: LD_VAR 0 4
15459: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15460: LD_INT 0
15462: PPUSH
15463: PPUSH
// if not list then
15464: LD_VAR 0 1
15468: NOT
15469: IFFALSE 15473
// exit ;
15471: GO 15564
// i := list [ pos1 ] ;
15473: LD_ADDR_VAR 0 5
15477: PUSH
15478: LD_VAR 0 1
15482: PUSH
15483: LD_VAR 0 2
15487: ARRAY
15488: ST_TO_ADDR
// if not i then
15489: LD_VAR 0 5
15493: NOT
15494: IFFALSE 15498
// exit ;
15496: GO 15564
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15498: LD_ADDR_VAR 0 1
15502: PUSH
15503: LD_VAR 0 1
15507: PPUSH
15508: LD_VAR 0 2
15512: PPUSH
15513: LD_VAR 0 1
15517: PUSH
15518: LD_VAR 0 3
15522: ARRAY
15523: PPUSH
15524: CALL_OW 1
15528: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15529: LD_ADDR_VAR 0 1
15533: PUSH
15534: LD_VAR 0 1
15538: PPUSH
15539: LD_VAR 0 3
15543: PPUSH
15544: LD_VAR 0 5
15548: PPUSH
15549: CALL_OW 1
15553: ST_TO_ADDR
// result := list ;
15554: LD_ADDR_VAR 0 4
15558: PUSH
15559: LD_VAR 0 1
15563: ST_TO_ADDR
// end ;
15564: LD_VAR 0 4
15568: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15569: LD_INT 0
15571: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15572: LD_ADDR_VAR 0 5
15576: PUSH
15577: LD_VAR 0 1
15581: PPUSH
15582: CALL_OW 250
15586: PPUSH
15587: LD_VAR 0 1
15591: PPUSH
15592: CALL_OW 251
15596: PPUSH
15597: LD_VAR 0 2
15601: PPUSH
15602: LD_VAR 0 3
15606: PPUSH
15607: LD_VAR 0 4
15611: PPUSH
15612: CALL 15994 0 5
15616: ST_TO_ADDR
// end ;
15617: LD_VAR 0 5
15621: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15622: LD_INT 0
15624: PPUSH
15625: PPUSH
15626: PPUSH
15627: PPUSH
// if not list or not unit then
15628: LD_VAR 0 2
15632: NOT
15633: IFTRUE 15642
15635: PUSH
15636: LD_VAR 0 1
15640: NOT
15641: OR
15642: IFFALSE 15646
// exit ;
15644: GO 15989
// result := [ ] ;
15646: LD_ADDR_VAR 0 5
15650: PUSH
15651: EMPTY
15652: ST_TO_ADDR
// for i in list do
15653: LD_ADDR_VAR 0 6
15657: PUSH
15658: LD_VAR 0 2
15662: PUSH
15663: FOR_IN
15664: IFFALSE 15882
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15666: LD_ADDR_VAR 0 8
15670: PUSH
15671: LD_VAR 0 1
15675: PPUSH
15676: LD_VAR 0 6
15680: PUSH
15681: LD_INT 1
15683: ARRAY
15684: PPUSH
15685: LD_VAR 0 6
15689: PUSH
15690: LD_INT 2
15692: ARRAY
15693: PPUSH
15694: CALL_OW 297
15698: ST_TO_ADDR
// if not Count ( result ) then
15699: LD_VAR 0 5
15703: PPUSH
15704: CALL 12250 0 1
15708: NOT
15709: IFFALSE 15742
// begin result := Join ( result , [ i , tmp ] ) ;
15711: LD_ADDR_VAR 0 5
15715: PUSH
15716: LD_VAR 0 5
15720: PPUSH
15721: LD_VAR 0 6
15725: PUSH
15726: LD_VAR 0 8
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PPUSH
15735: CALL 48182 0 2
15739: ST_TO_ADDR
// continue ;
15740: GO 15663
// end ; if result [ result ] [ 2 ] <= tmp then
15742: LD_VAR 0 5
15746: PUSH
15747: LD_VAR 0 5
15751: ARRAY
15752: PUSH
15753: LD_INT 2
15755: ARRAY
15756: PUSH
15757: LD_VAR 0 8
15761: LESSEQUAL
15762: IFFALSE 15795
// result := Join ( result , [ i , tmp ] ) else
15764: LD_ADDR_VAR 0 5
15768: PUSH
15769: LD_VAR 0 5
15773: PPUSH
15774: LD_VAR 0 6
15778: PUSH
15779: LD_VAR 0 8
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PPUSH
15788: CALL 48182 0 2
15792: ST_TO_ADDR
15793: GO 15880
// begin for j := 1 to Count ( result ) do
15795: LD_ADDR_VAR 0 7
15799: PUSH
15800: DOUBLE
15801: LD_INT 1
15803: DEC
15804: ST_TO_ADDR
15805: LD_VAR 0 5
15809: PPUSH
15810: CALL 12250 0 1
15814: PUSH
15815: FOR_TO
15816: IFFALSE 15878
// begin if tmp < result [ j ] [ 2 ] then
15818: LD_VAR 0 8
15822: PUSH
15823: LD_VAR 0 5
15827: PUSH
15828: LD_VAR 0 7
15832: ARRAY
15833: PUSH
15834: LD_INT 2
15836: ARRAY
15837: LESS
15838: IFFALSE 15876
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15840: LD_ADDR_VAR 0 5
15844: PUSH
15845: LD_VAR 0 5
15849: PPUSH
15850: LD_VAR 0 7
15854: PPUSH
15855: LD_VAR 0 6
15859: PUSH
15860: LD_VAR 0 8
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PPUSH
15869: CALL_OW 2
15873: ST_TO_ADDR
// break ;
15874: GO 15878
// end ; end ;
15876: GO 15815
15878: POP
15879: POP
// end ; end ;
15880: GO 15663
15882: POP
15883: POP
// if result and not asc then
15884: LD_VAR 0 5
15888: IFFALSE 15897
15890: PUSH
15891: LD_VAR 0 3
15895: NOT
15896: AND
15897: IFFALSE 15914
// result := ReverseArray ( result ) ;
15899: LD_ADDR_VAR 0 5
15903: PUSH
15904: LD_VAR 0 5
15908: PPUSH
15909: CALL 43272 0 1
15913: ST_TO_ADDR
// tmp := [ ] ;
15914: LD_ADDR_VAR 0 8
15918: PUSH
15919: EMPTY
15920: ST_TO_ADDR
// if mode then
15921: LD_VAR 0 4
15925: IFFALSE 15989
// begin for i := 1 to result do
15927: LD_ADDR_VAR 0 6
15931: PUSH
15932: DOUBLE
15933: LD_INT 1
15935: DEC
15936: ST_TO_ADDR
15937: LD_VAR 0 5
15941: PUSH
15942: FOR_TO
15943: IFFALSE 15977
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15945: LD_ADDR_VAR 0 8
15949: PUSH
15950: LD_VAR 0 8
15954: PPUSH
15955: LD_VAR 0 5
15959: PUSH
15960: LD_VAR 0 6
15964: ARRAY
15965: PUSH
15966: LD_INT 1
15968: ARRAY
15969: PPUSH
15970: CALL 48182 0 2
15974: ST_TO_ADDR
15975: GO 15942
15977: POP
15978: POP
// result := tmp ;
15979: LD_ADDR_VAR 0 5
15983: PUSH
15984: LD_VAR 0 8
15988: ST_TO_ADDR
// end ; end ;
15989: LD_VAR 0 5
15993: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15994: LD_INT 0
15996: PPUSH
15997: PPUSH
15998: PPUSH
15999: PPUSH
// if not list then
16000: LD_VAR 0 3
16004: NOT
16005: IFFALSE 16009
// exit ;
16007: GO 16399
// result := [ ] ;
16009: LD_ADDR_VAR 0 6
16013: PUSH
16014: EMPTY
16015: ST_TO_ADDR
// for i in list do
16016: LD_ADDR_VAR 0 7
16020: PUSH
16021: LD_VAR 0 3
16025: PUSH
16026: FOR_IN
16027: IFFALSE 16229
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16029: LD_ADDR_VAR 0 9
16033: PUSH
16034: LD_VAR 0 7
16038: PPUSH
16039: LD_VAR 0 1
16043: PPUSH
16044: LD_VAR 0 2
16048: PPUSH
16049: CALL_OW 297
16053: ST_TO_ADDR
// if not result then
16054: LD_VAR 0 6
16058: NOT
16059: IFFALSE 16085
// result := [ [ i , tmp ] ] else
16061: LD_ADDR_VAR 0 6
16065: PUSH
16066: LD_VAR 0 7
16070: PUSH
16071: LD_VAR 0 9
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: EMPTY
16081: LIST
16082: ST_TO_ADDR
16083: GO 16227
// begin if result [ result ] [ 2 ] <= tmp then
16085: LD_VAR 0 6
16089: PUSH
16090: LD_VAR 0 6
16094: ARRAY
16095: PUSH
16096: LD_INT 2
16098: ARRAY
16099: PUSH
16100: LD_VAR 0 9
16104: LESSEQUAL
16105: IFFALSE 16147
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16107: LD_ADDR_VAR 0 6
16111: PUSH
16112: LD_VAR 0 6
16116: PPUSH
16117: LD_VAR 0 6
16121: PUSH
16122: LD_INT 1
16124: PLUS
16125: PPUSH
16126: LD_VAR 0 7
16130: PUSH
16131: LD_VAR 0 9
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PPUSH
16140: CALL_OW 2
16144: ST_TO_ADDR
16145: GO 16227
// for j := 1 to result do
16147: LD_ADDR_VAR 0 8
16151: PUSH
16152: DOUBLE
16153: LD_INT 1
16155: DEC
16156: ST_TO_ADDR
16157: LD_VAR 0 6
16161: PUSH
16162: FOR_TO
16163: IFFALSE 16225
// begin if tmp < result [ j ] [ 2 ] then
16165: LD_VAR 0 9
16169: PUSH
16170: LD_VAR 0 6
16174: PUSH
16175: LD_VAR 0 8
16179: ARRAY
16180: PUSH
16181: LD_INT 2
16183: ARRAY
16184: LESS
16185: IFFALSE 16223
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16187: LD_ADDR_VAR 0 6
16191: PUSH
16192: LD_VAR 0 6
16196: PPUSH
16197: LD_VAR 0 8
16201: PPUSH
16202: LD_VAR 0 7
16206: PUSH
16207: LD_VAR 0 9
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PPUSH
16216: CALL_OW 2
16220: ST_TO_ADDR
// break ;
16221: GO 16225
// end ; end ;
16223: GO 16162
16225: POP
16226: POP
// end ; end ;
16227: GO 16026
16229: POP
16230: POP
// if result and not asc then
16231: LD_VAR 0 6
16235: IFFALSE 16244
16237: PUSH
16238: LD_VAR 0 4
16242: NOT
16243: AND
16244: IFFALSE 16319
// begin tmp := result ;
16246: LD_ADDR_VAR 0 9
16250: PUSH
16251: LD_VAR 0 6
16255: ST_TO_ADDR
// for i = tmp downto 1 do
16256: LD_ADDR_VAR 0 7
16260: PUSH
16261: DOUBLE
16262: LD_VAR 0 9
16266: INC
16267: ST_TO_ADDR
16268: LD_INT 1
16270: PUSH
16271: FOR_DOWNTO
16272: IFFALSE 16317
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16274: LD_ADDR_VAR 0 6
16278: PUSH
16279: LD_VAR 0 6
16283: PPUSH
16284: LD_VAR 0 9
16288: PUSH
16289: LD_VAR 0 7
16293: MINUS
16294: PUSH
16295: LD_INT 1
16297: PLUS
16298: PPUSH
16299: LD_VAR 0 9
16303: PUSH
16304: LD_VAR 0 7
16308: ARRAY
16309: PPUSH
16310: CALL_OW 1
16314: ST_TO_ADDR
16315: GO 16271
16317: POP
16318: POP
// end ; tmp := [ ] ;
16319: LD_ADDR_VAR 0 9
16323: PUSH
16324: EMPTY
16325: ST_TO_ADDR
// if mode then
16326: LD_VAR 0 5
16330: IFFALSE 16399
// begin for i = 1 to result do
16332: LD_ADDR_VAR 0 7
16336: PUSH
16337: DOUBLE
16338: LD_INT 1
16340: DEC
16341: ST_TO_ADDR
16342: LD_VAR 0 6
16346: PUSH
16347: FOR_TO
16348: IFFALSE 16387
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16350: LD_ADDR_VAR 0 9
16354: PUSH
16355: LD_VAR 0 9
16359: PPUSH
16360: LD_VAR 0 7
16364: PPUSH
16365: LD_VAR 0 6
16369: PUSH
16370: LD_VAR 0 7
16374: ARRAY
16375: PUSH
16376: LD_INT 1
16378: ARRAY
16379: PPUSH
16380: CALL_OW 1
16384: ST_TO_ADDR
16385: GO 16347
16387: POP
16388: POP
// result := tmp ;
16389: LD_ADDR_VAR 0 6
16393: PUSH
16394: LD_VAR 0 9
16398: ST_TO_ADDR
// end ; end ;
16399: LD_VAR 0 6
16403: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16404: LD_INT 0
16406: PPUSH
16407: PPUSH
16408: PPUSH
16409: PPUSH
16410: PPUSH
16411: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16412: LD_ADDR_VAR 0 5
16416: PUSH
16417: LD_INT 0
16419: PUSH
16420: LD_INT 0
16422: PUSH
16423: LD_INT 0
16425: PUSH
16426: EMPTY
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: ST_TO_ADDR
// if not x or not y then
16434: LD_VAR 0 2
16438: NOT
16439: IFTRUE 16448
16441: PUSH
16442: LD_VAR 0 3
16446: NOT
16447: OR
16448: IFFALSE 16452
// exit ;
16450: GO 18108
// if not range then
16452: LD_VAR 0 4
16456: NOT
16457: IFFALSE 16467
// range := 10 ;
16459: LD_ADDR_VAR 0 4
16463: PUSH
16464: LD_INT 10
16466: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16467: LD_ADDR_VAR 0 8
16471: PUSH
16472: LD_INT 81
16474: PUSH
16475: LD_VAR 0 1
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 92
16486: PUSH
16487: LD_VAR 0 2
16491: PUSH
16492: LD_VAR 0 3
16496: PUSH
16497: LD_VAR 0 4
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 3
16510: PUSH
16511: LD_INT 21
16513: PUSH
16514: LD_INT 3
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: PPUSH
16530: CALL_OW 69
16534: ST_TO_ADDR
// if not tmp then
16535: LD_VAR 0 8
16539: NOT
16540: IFFALSE 16544
// exit ;
16542: GO 18108
// for i in tmp do
16544: LD_ADDR_VAR 0 6
16548: PUSH
16549: LD_VAR 0 8
16553: PUSH
16554: FOR_IN
16555: IFFALSE 18083
// begin points := [ 0 , 0 , 0 ] ;
16557: LD_ADDR_VAR 0 9
16561: PUSH
16562: LD_INT 0
16564: PUSH
16565: LD_INT 0
16567: PUSH
16568: LD_INT 0
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: LIST
16575: ST_TO_ADDR
// bpoints := 1 ;
16576: LD_ADDR_VAR 0 10
16580: PUSH
16581: LD_INT 1
16583: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16584: LD_VAR 0 6
16588: PPUSH
16589: CALL_OW 247
16593: PUSH
16594: LD_INT 1
16596: DOUBLE
16597: EQUAL
16598: IFTRUE 16602
16600: GO 17184
16602: POP
// begin if GetClass ( i ) = 1 then
16603: LD_VAR 0 6
16607: PPUSH
16608: CALL_OW 257
16612: PUSH
16613: LD_INT 1
16615: EQUAL
16616: IFFALSE 16637
// points := [ 10 , 5 , 3 ] ;
16618: LD_ADDR_VAR 0 9
16622: PUSH
16623: LD_INT 10
16625: PUSH
16626: LD_INT 5
16628: PUSH
16629: LD_INT 3
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: LIST
16636: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16637: LD_VAR 0 6
16641: PPUSH
16642: CALL_OW 257
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 3
16652: PUSH
16653: LD_INT 4
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: LIST
16660: IN
16661: IFFALSE 16682
// points := [ 3 , 2 , 1 ] ;
16663: LD_ADDR_VAR 0 9
16667: PUSH
16668: LD_INT 3
16670: PUSH
16671: LD_INT 2
16673: PUSH
16674: LD_INT 1
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: LIST
16681: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16682: LD_VAR 0 6
16686: PPUSH
16687: CALL_OW 257
16691: PUSH
16692: LD_INT 5
16694: EQUAL
16695: IFFALSE 16716
// points := [ 130 , 5 , 2 ] ;
16697: LD_ADDR_VAR 0 9
16701: PUSH
16702: LD_INT 130
16704: PUSH
16705: LD_INT 5
16707: PUSH
16708: LD_INT 2
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: LIST
16715: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16716: LD_VAR 0 6
16720: PPUSH
16721: CALL_OW 257
16725: PUSH
16726: LD_INT 8
16728: EQUAL
16729: IFFALSE 16750
// points := [ 35 , 35 , 30 ] ;
16731: LD_ADDR_VAR 0 9
16735: PUSH
16736: LD_INT 35
16738: PUSH
16739: LD_INT 35
16741: PUSH
16742: LD_INT 30
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: LIST
16749: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16750: LD_VAR 0 6
16754: PPUSH
16755: CALL_OW 257
16759: PUSH
16760: LD_INT 9
16762: EQUAL
16763: IFFALSE 16784
// points := [ 20 , 55 , 40 ] ;
16765: LD_ADDR_VAR 0 9
16769: PUSH
16770: LD_INT 20
16772: PUSH
16773: LD_INT 55
16775: PUSH
16776: LD_INT 40
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: LIST
16783: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16784: LD_VAR 0 6
16788: PPUSH
16789: CALL_OW 257
16793: PUSH
16794: LD_INT 12
16796: PUSH
16797: LD_INT 16
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: IN
16804: IFFALSE 16825
// points := [ 5 , 3 , 2 ] ;
16806: LD_ADDR_VAR 0 9
16810: PUSH
16811: LD_INT 5
16813: PUSH
16814: LD_INT 3
16816: PUSH
16817: LD_INT 2
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16825: LD_VAR 0 6
16829: PPUSH
16830: CALL_OW 257
16834: PUSH
16835: LD_INT 17
16837: EQUAL
16838: IFFALSE 16859
// points := [ 100 , 50 , 75 ] ;
16840: LD_ADDR_VAR 0 9
16844: PUSH
16845: LD_INT 100
16847: PUSH
16848: LD_INT 50
16850: PUSH
16851: LD_INT 75
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: LIST
16858: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16859: LD_VAR 0 6
16863: PPUSH
16864: CALL_OW 257
16868: PUSH
16869: LD_INT 15
16871: EQUAL
16872: IFFALSE 16893
// points := [ 10 , 5 , 3 ] ;
16874: LD_ADDR_VAR 0 9
16878: PUSH
16879: LD_INT 10
16881: PUSH
16882: LD_INT 5
16884: PUSH
16885: LD_INT 3
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: LIST
16892: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16893: LD_VAR 0 6
16897: PPUSH
16898: CALL_OW 257
16902: PUSH
16903: LD_INT 14
16905: EQUAL
16906: IFFALSE 16927
// points := [ 10 , 0 , 0 ] ;
16908: LD_ADDR_VAR 0 9
16912: PUSH
16913: LD_INT 10
16915: PUSH
16916: LD_INT 0
16918: PUSH
16919: LD_INT 0
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: LIST
16926: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16927: LD_VAR 0 6
16931: PPUSH
16932: CALL_OW 257
16936: PUSH
16937: LD_INT 11
16939: EQUAL
16940: IFFALSE 16961
// points := [ 30 , 10 , 5 ] ;
16942: LD_ADDR_VAR 0 9
16946: PUSH
16947: LD_INT 30
16949: PUSH
16950: LD_INT 10
16952: PUSH
16953: LD_INT 5
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: LIST
16960: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16961: LD_VAR 0 1
16965: PPUSH
16966: LD_INT 5
16968: PPUSH
16969: CALL_OW 321
16973: PUSH
16974: LD_INT 2
16976: EQUAL
16977: IFFALSE 16994
// bpoints := bpoints * 1.8 ;
16979: LD_ADDR_VAR 0 10
16983: PUSH
16984: LD_VAR 0 10
16988: PUSH
16989: LD_REAL  1.80000000000000E+0000
16992: MUL
16993: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16994: LD_VAR 0 6
16998: PPUSH
16999: CALL_OW 257
17003: PUSH
17004: LD_INT 1
17006: PUSH
17007: LD_INT 2
17009: PUSH
17010: LD_INT 3
17012: PUSH
17013: LD_INT 4
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: IN
17022: IFFALSE 17042
17024: PUSH
17025: LD_VAR 0 1
17029: PPUSH
17030: LD_INT 51
17032: PPUSH
17033: CALL_OW 321
17037: PUSH
17038: LD_INT 2
17040: EQUAL
17041: AND
17042: IFFALSE 17059
// bpoints := bpoints * 1.2 ;
17044: LD_ADDR_VAR 0 10
17048: PUSH
17049: LD_VAR 0 10
17053: PUSH
17054: LD_REAL  1.20000000000000E+0000
17057: MUL
17058: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17059: LD_VAR 0 6
17063: PPUSH
17064: CALL_OW 257
17068: PUSH
17069: LD_INT 5
17071: PUSH
17072: LD_INT 7
17074: PUSH
17075: LD_INT 9
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: IN
17083: IFFALSE 17103
17085: PUSH
17086: LD_VAR 0 1
17090: PPUSH
17091: LD_INT 52
17093: PPUSH
17094: CALL_OW 321
17098: PUSH
17099: LD_INT 2
17101: EQUAL
17102: AND
17103: IFFALSE 17120
// bpoints := bpoints * 1.5 ;
17105: LD_ADDR_VAR 0 10
17109: PUSH
17110: LD_VAR 0 10
17114: PUSH
17115: LD_REAL  1.50000000000000E+0000
17118: MUL
17119: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17120: LD_VAR 0 1
17124: PPUSH
17125: LD_INT 66
17127: PPUSH
17128: CALL_OW 321
17132: PUSH
17133: LD_INT 2
17135: EQUAL
17136: IFFALSE 17153
// bpoints := bpoints * 1.1 ;
17138: LD_ADDR_VAR 0 10
17142: PUSH
17143: LD_VAR 0 10
17147: PUSH
17148: LD_REAL  1.10000000000000E+0000
17151: MUL
17152: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17153: LD_ADDR_VAR 0 10
17157: PUSH
17158: LD_VAR 0 10
17162: PUSH
17163: LD_VAR 0 6
17167: PPUSH
17168: LD_INT 1
17170: PPUSH
17171: CALL_OW 259
17175: PUSH
17176: LD_REAL  1.15000000000000E+0000
17179: MUL
17180: MUL
17181: ST_TO_ADDR
// end ; unit_vehicle :
17182: GO 18012
17184: LD_INT 2
17186: DOUBLE
17187: EQUAL
17188: IFTRUE 17192
17190: GO 18000
17192: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17193: LD_VAR 0 6
17197: PPUSH
17198: CALL_OW 264
17202: PUSH
17203: LD_INT 2
17205: PUSH
17206: LD_INT 42
17208: PUSH
17209: LD_INT 24
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: LIST
17216: IN
17217: IFFALSE 17238
// points := [ 25 , 5 , 3 ] ;
17219: LD_ADDR_VAR 0 9
17223: PUSH
17224: LD_INT 25
17226: PUSH
17227: LD_INT 5
17229: PUSH
17230: LD_INT 3
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: LIST
17237: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17238: LD_VAR 0 6
17242: PPUSH
17243: CALL_OW 264
17247: PUSH
17248: LD_INT 4
17250: PUSH
17251: LD_INT 43
17253: PUSH
17254: LD_INT 25
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: LIST
17261: IN
17262: IFFALSE 17283
// points := [ 40 , 15 , 5 ] ;
17264: LD_ADDR_VAR 0 9
17268: PUSH
17269: LD_INT 40
17271: PUSH
17272: LD_INT 15
17274: PUSH
17275: LD_INT 5
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: LIST
17282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17283: LD_VAR 0 6
17287: PPUSH
17288: CALL_OW 264
17292: PUSH
17293: LD_INT 3
17295: PUSH
17296: LD_INT 23
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: IN
17303: IFFALSE 17324
// points := [ 7 , 25 , 8 ] ;
17305: LD_ADDR_VAR 0 9
17309: PUSH
17310: LD_INT 7
17312: PUSH
17313: LD_INT 25
17315: PUSH
17316: LD_INT 8
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: LIST
17323: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17324: LD_VAR 0 6
17328: PPUSH
17329: CALL_OW 264
17333: PUSH
17334: LD_INT 5
17336: PUSH
17337: LD_INT 27
17339: PUSH
17340: LD_INT 44
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: IN
17348: IFFALSE 17369
// points := [ 14 , 50 , 16 ] ;
17350: LD_ADDR_VAR 0 9
17354: PUSH
17355: LD_INT 14
17357: PUSH
17358: LD_INT 50
17360: PUSH
17361: LD_INT 16
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: LIST
17368: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17369: LD_VAR 0 6
17373: PPUSH
17374: CALL_OW 264
17378: PUSH
17379: LD_INT 6
17381: PUSH
17382: LD_INT 46
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: IN
17389: IFFALSE 17410
// points := [ 32 , 120 , 70 ] ;
17391: LD_ADDR_VAR 0 9
17395: PUSH
17396: LD_INT 32
17398: PUSH
17399: LD_INT 120
17401: PUSH
17402: LD_INT 70
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: LIST
17409: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17410: LD_VAR 0 6
17414: PPUSH
17415: CALL_OW 264
17419: PUSH
17420: LD_INT 7
17422: PUSH
17423: LD_INT 28
17425: PUSH
17426: LD_INT 45
17428: PUSH
17429: LD_INT 92
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: IN
17438: IFFALSE 17459
// points := [ 35 , 20 , 45 ] ;
17440: LD_ADDR_VAR 0 9
17444: PUSH
17445: LD_INT 35
17447: PUSH
17448: LD_INT 20
17450: PUSH
17451: LD_INT 45
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: LIST
17458: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17459: LD_VAR 0 6
17463: PPUSH
17464: CALL_OW 264
17468: PUSH
17469: LD_INT 47
17471: PUSH
17472: EMPTY
17473: LIST
17474: IN
17475: IFFALSE 17496
// points := [ 67 , 45 , 75 ] ;
17477: LD_ADDR_VAR 0 9
17481: PUSH
17482: LD_INT 67
17484: PUSH
17485: LD_INT 45
17487: PUSH
17488: LD_INT 75
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: LIST
17495: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17496: LD_VAR 0 6
17500: PPUSH
17501: CALL_OW 264
17505: PUSH
17506: LD_INT 26
17508: PUSH
17509: EMPTY
17510: LIST
17511: IN
17512: IFFALSE 17533
// points := [ 120 , 30 , 80 ] ;
17514: LD_ADDR_VAR 0 9
17518: PUSH
17519: LD_INT 120
17521: PUSH
17522: LD_INT 30
17524: PUSH
17525: LD_INT 80
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: LIST
17532: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17533: LD_VAR 0 6
17537: PPUSH
17538: CALL_OW 264
17542: PUSH
17543: LD_INT 22
17545: PUSH
17546: EMPTY
17547: LIST
17548: IN
17549: IFFALSE 17570
// points := [ 40 , 1 , 1 ] ;
17551: LD_ADDR_VAR 0 9
17555: PUSH
17556: LD_INT 40
17558: PUSH
17559: LD_INT 1
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17570: LD_VAR 0 6
17574: PPUSH
17575: CALL_OW 264
17579: PUSH
17580: LD_INT 29
17582: PUSH
17583: EMPTY
17584: LIST
17585: IN
17586: IFFALSE 17607
// points := [ 70 , 200 , 400 ] ;
17588: LD_ADDR_VAR 0 9
17592: PUSH
17593: LD_INT 70
17595: PUSH
17596: LD_INT 200
17598: PUSH
17599: LD_INT 400
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17607: LD_VAR 0 6
17611: PPUSH
17612: CALL_OW 264
17616: PUSH
17617: LD_INT 14
17619: PUSH
17620: LD_INT 53
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: IN
17627: IFFALSE 17648
// points := [ 40 , 10 , 20 ] ;
17629: LD_ADDR_VAR 0 9
17633: PUSH
17634: LD_INT 40
17636: PUSH
17637: LD_INT 10
17639: PUSH
17640: LD_INT 20
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: LIST
17647: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17648: LD_VAR 0 6
17652: PPUSH
17653: CALL_OW 264
17657: PUSH
17658: LD_INT 9
17660: PUSH
17661: EMPTY
17662: LIST
17663: IN
17664: IFFALSE 17685
// points := [ 5 , 70 , 20 ] ;
17666: LD_ADDR_VAR 0 9
17670: PUSH
17671: LD_INT 5
17673: PUSH
17674: LD_INT 70
17676: PUSH
17677: LD_INT 20
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: LIST
17684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17685: LD_VAR 0 6
17689: PPUSH
17690: CALL_OW 264
17694: PUSH
17695: LD_INT 10
17697: PUSH
17698: EMPTY
17699: LIST
17700: IN
17701: IFFALSE 17722
// points := [ 35 , 110 , 70 ] ;
17703: LD_ADDR_VAR 0 9
17707: PUSH
17708: LD_INT 35
17710: PUSH
17711: LD_INT 110
17713: PUSH
17714: LD_INT 70
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17722: LD_VAR 0 6
17726: PPUSH
17727: CALL_OW 265
17731: PUSH
17732: LD_INT 25
17734: EQUAL
17735: IFFALSE 17756
// points := [ 80 , 65 , 100 ] ;
17737: LD_ADDR_VAR 0 9
17741: PUSH
17742: LD_INT 80
17744: PUSH
17745: LD_INT 65
17747: PUSH
17748: LD_INT 100
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: LIST
17755: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17756: LD_VAR 0 6
17760: PPUSH
17761: CALL_OW 263
17765: PUSH
17766: LD_INT 1
17768: EQUAL
17769: IFFALSE 17804
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17771: LD_ADDR_VAR 0 10
17775: PUSH
17776: LD_VAR 0 10
17780: PUSH
17781: LD_VAR 0 6
17785: PPUSH
17786: CALL_OW 311
17790: PPUSH
17791: LD_INT 3
17793: PPUSH
17794: CALL_OW 259
17798: PUSH
17799: LD_INT 4
17801: MUL
17802: MUL
17803: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17804: LD_VAR 0 6
17808: PPUSH
17809: CALL_OW 263
17813: PUSH
17814: LD_INT 2
17816: EQUAL
17817: IFFALSE 17868
// begin j := IsControledBy ( i ) ;
17819: LD_ADDR_VAR 0 7
17823: PUSH
17824: LD_VAR 0 6
17828: PPUSH
17829: CALL_OW 312
17833: ST_TO_ADDR
// if j then
17834: LD_VAR 0 7
17838: IFFALSE 17868
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17840: LD_ADDR_VAR 0 10
17844: PUSH
17845: LD_VAR 0 10
17849: PUSH
17850: LD_VAR 0 7
17854: PPUSH
17855: LD_INT 3
17857: PPUSH
17858: CALL_OW 259
17862: PUSH
17863: LD_INT 3
17865: MUL
17866: MUL
17867: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17868: LD_VAR 0 6
17872: PPUSH
17873: CALL_OW 264
17877: PUSH
17878: LD_INT 5
17880: PUSH
17881: LD_INT 6
17883: PUSH
17884: LD_INT 46
17886: PUSH
17887: LD_INT 44
17889: PUSH
17890: LD_INT 47
17892: PUSH
17893: LD_INT 45
17895: PUSH
17896: LD_INT 28
17898: PUSH
17899: LD_INT 7
17901: PUSH
17902: LD_INT 27
17904: PUSH
17905: LD_INT 29
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: IN
17920: IFFALSE 17940
17922: PUSH
17923: LD_VAR 0 1
17927: PPUSH
17928: LD_INT 52
17930: PPUSH
17931: CALL_OW 321
17935: PUSH
17936: LD_INT 2
17938: EQUAL
17939: AND
17940: IFFALSE 17957
// bpoints := bpoints * 1.2 ;
17942: LD_ADDR_VAR 0 10
17946: PUSH
17947: LD_VAR 0 10
17951: PUSH
17952: LD_REAL  1.20000000000000E+0000
17955: MUL
17956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17957: LD_VAR 0 6
17961: PPUSH
17962: CALL_OW 264
17966: PUSH
17967: LD_INT 6
17969: PUSH
17970: LD_INT 46
17972: PUSH
17973: LD_INT 47
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: LIST
17980: IN
17981: IFFALSE 17998
// bpoints := bpoints * 1.2 ;
17983: LD_ADDR_VAR 0 10
17987: PUSH
17988: LD_VAR 0 10
17992: PUSH
17993: LD_REAL  1.20000000000000E+0000
17996: MUL
17997: ST_TO_ADDR
// end ; unit_building :
17998: GO 18012
18000: LD_INT 3
18002: DOUBLE
18003: EQUAL
18004: IFTRUE 18008
18006: GO 18011
18008: POP
// ; end ;
18009: GO 18012
18011: POP
// for j = 1 to 3 do
18012: LD_ADDR_VAR 0 7
18016: PUSH
18017: DOUBLE
18018: LD_INT 1
18020: DEC
18021: ST_TO_ADDR
18022: LD_INT 3
18024: PUSH
18025: FOR_TO
18026: IFFALSE 18079
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18028: LD_ADDR_VAR 0 5
18032: PUSH
18033: LD_VAR 0 5
18037: PPUSH
18038: LD_VAR 0 7
18042: PPUSH
18043: LD_VAR 0 5
18047: PUSH
18048: LD_VAR 0 7
18052: ARRAY
18053: PUSH
18054: LD_VAR 0 9
18058: PUSH
18059: LD_VAR 0 7
18063: ARRAY
18064: PUSH
18065: LD_VAR 0 10
18069: MUL
18070: PLUS
18071: PPUSH
18072: CALL_OW 1
18076: ST_TO_ADDR
18077: GO 18025
18079: POP
18080: POP
// end ;
18081: GO 16554
18083: POP
18084: POP
// result := Replace ( result , 4 , tmp ) ;
18085: LD_ADDR_VAR 0 5
18089: PUSH
18090: LD_VAR 0 5
18094: PPUSH
18095: LD_INT 4
18097: PPUSH
18098: LD_VAR 0 8
18102: PPUSH
18103: CALL_OW 1
18107: ST_TO_ADDR
// end ;
18108: LD_VAR 0 5
18112: RET
// export function DangerAtRange ( unit , range ) ; begin
18113: LD_INT 0
18115: PPUSH
// if not unit then
18116: LD_VAR 0 1
18120: NOT
18121: IFFALSE 18125
// exit ;
18123: GO 18170
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18125: LD_ADDR_VAR 0 3
18129: PUSH
18130: LD_VAR 0 1
18134: PPUSH
18135: CALL_OW 255
18139: PPUSH
18140: LD_VAR 0 1
18144: PPUSH
18145: CALL_OW 250
18149: PPUSH
18150: LD_VAR 0 1
18154: PPUSH
18155: CALL_OW 251
18159: PPUSH
18160: LD_VAR 0 2
18164: PPUSH
18165: CALL 16404 0 4
18169: ST_TO_ADDR
// end ;
18170: LD_VAR 0 3
18174: RET
// export function DangerInArea ( side , area ) ; begin
18175: LD_INT 0
18177: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18178: LD_ADDR_VAR 0 3
18182: PUSH
18183: LD_VAR 0 2
18187: PPUSH
18188: LD_INT 81
18190: PUSH
18191: LD_VAR 0 1
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PPUSH
18200: CALL_OW 70
18204: ST_TO_ADDR
// end ;
18205: LD_VAR 0 3
18209: RET
// export function IsExtension ( b ) ; begin
18210: LD_INT 0
18212: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18213: LD_ADDR_VAR 0 2
18217: PUSH
18218: LD_VAR 0 1
18222: PUSH
18223: LD_INT 23
18225: PUSH
18226: LD_INT 20
18228: PUSH
18229: LD_INT 22
18231: PUSH
18232: LD_INT 17
18234: PUSH
18235: LD_INT 24
18237: PUSH
18238: LD_INT 21
18240: PUSH
18241: LD_INT 19
18243: PUSH
18244: LD_INT 16
18246: PUSH
18247: LD_INT 25
18249: PUSH
18250: LD_INT 18
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: IN
18265: ST_TO_ADDR
// end ;
18266: LD_VAR 0 2
18270: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18271: LD_INT 0
18273: PPUSH
18274: PPUSH
18275: PPUSH
// result := [ ] ;
18276: LD_ADDR_VAR 0 4
18280: PUSH
18281: EMPTY
18282: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18283: LD_ADDR_VAR 0 5
18287: PUSH
18288: LD_VAR 0 2
18292: PPUSH
18293: LD_INT 21
18295: PUSH
18296: LD_INT 3
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PPUSH
18303: CALL_OW 70
18307: ST_TO_ADDR
// if not tmp then
18308: LD_VAR 0 5
18312: NOT
18313: IFFALSE 18317
// exit ;
18315: GO 18381
// if checkLink then
18317: LD_VAR 0 3
18321: IFFALSE 18371
// begin for i in tmp do
18323: LD_ADDR_VAR 0 6
18327: PUSH
18328: LD_VAR 0 5
18332: PUSH
18333: FOR_IN
18334: IFFALSE 18369
// if GetBase ( i ) <> base then
18336: LD_VAR 0 6
18340: PPUSH
18341: CALL_OW 274
18345: PUSH
18346: LD_VAR 0 1
18350: NONEQUAL
18351: IFFALSE 18367
// ComLinkToBase ( base , i ) ;
18353: LD_VAR 0 1
18357: PPUSH
18358: LD_VAR 0 6
18362: PPUSH
18363: CALL_OW 169
18367: GO 18333
18369: POP
18370: POP
// end ; result := tmp ;
18371: LD_ADDR_VAR 0 4
18375: PUSH
18376: LD_VAR 0 5
18380: ST_TO_ADDR
// end ;
18381: LD_VAR 0 4
18385: RET
// export function ComComplete ( units , b ) ; var i ; begin
18386: LD_INT 0
18388: PPUSH
18389: PPUSH
// if not units then
18390: LD_VAR 0 1
18394: NOT
18395: IFFALSE 18399
// exit ;
18397: GO 18489
// for i in units do
18399: LD_ADDR_VAR 0 4
18403: PUSH
18404: LD_VAR 0 1
18408: PUSH
18409: FOR_IN
18410: IFFALSE 18487
// if BuildingStatus ( b ) = bs_build then
18412: LD_VAR 0 2
18416: PPUSH
18417: CALL_OW 461
18421: PUSH
18422: LD_INT 1
18424: EQUAL
18425: IFFALSE 18485
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18427: LD_VAR 0 4
18431: PPUSH
18432: LD_STRING h
18434: PUSH
18435: LD_VAR 0 2
18439: PPUSH
18440: CALL_OW 250
18444: PUSH
18445: LD_VAR 0 2
18449: PPUSH
18450: CALL_OW 251
18454: PUSH
18455: LD_VAR 0 2
18459: PUSH
18460: LD_INT 0
18462: PUSH
18463: LD_INT 0
18465: PUSH
18466: LD_INT 0
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: PPUSH
18481: CALL_OW 446
18485: GO 18409
18487: POP
18488: POP
// end ;
18489: LD_VAR 0 3
18493: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18494: LD_INT 0
18496: PPUSH
18497: PPUSH
18498: PPUSH
18499: PPUSH
18500: PPUSH
18501: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18502: LD_VAR 0 1
18506: NOT
18507: IFTRUE 18524
18509: PUSH
18510: LD_VAR 0 1
18514: PPUSH
18515: CALL_OW 263
18519: PUSH
18520: LD_INT 2
18522: NONEQUAL
18523: OR
18524: IFFALSE 18528
// exit ;
18526: GO 18844
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18528: LD_ADDR_VAR 0 6
18532: PUSH
18533: LD_INT 22
18535: PUSH
18536: LD_VAR 0 1
18540: PPUSH
18541: CALL_OW 255
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 2
18552: PUSH
18553: LD_INT 30
18555: PUSH
18556: LD_INT 36
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 34
18565: PUSH
18566: LD_INT 31
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PPUSH
18582: CALL_OW 69
18586: ST_TO_ADDR
// if not tmp then
18587: LD_VAR 0 6
18591: NOT
18592: IFFALSE 18596
// exit ;
18594: GO 18844
// result := [ ] ;
18596: LD_ADDR_VAR 0 2
18600: PUSH
18601: EMPTY
18602: ST_TO_ADDR
// for i in tmp do
18603: LD_ADDR_VAR 0 3
18607: PUSH
18608: LD_VAR 0 6
18612: PUSH
18613: FOR_IN
18614: IFFALSE 18685
// begin t := UnitsInside ( i ) ;
18616: LD_ADDR_VAR 0 4
18620: PUSH
18621: LD_VAR 0 3
18625: PPUSH
18626: CALL_OW 313
18630: ST_TO_ADDR
// if t then
18631: LD_VAR 0 4
18635: IFFALSE 18683
// for j in t do
18637: LD_ADDR_VAR 0 7
18641: PUSH
18642: LD_VAR 0 4
18646: PUSH
18647: FOR_IN
18648: IFFALSE 18681
// result := Replace ( result , result + 1 , j ) ;
18650: LD_ADDR_VAR 0 2
18654: PUSH
18655: LD_VAR 0 2
18659: PPUSH
18660: LD_VAR 0 2
18664: PUSH
18665: LD_INT 1
18667: PLUS
18668: PPUSH
18669: LD_VAR 0 7
18673: PPUSH
18674: CALL_OW 1
18678: ST_TO_ADDR
18679: GO 18647
18681: POP
18682: POP
// end ;
18683: GO 18613
18685: POP
18686: POP
// if not result then
18687: LD_VAR 0 2
18691: NOT
18692: IFFALSE 18696
// exit ;
18694: GO 18844
// mech := result [ 1 ] ;
18696: LD_ADDR_VAR 0 5
18700: PUSH
18701: LD_VAR 0 2
18705: PUSH
18706: LD_INT 1
18708: ARRAY
18709: ST_TO_ADDR
// if result > 1 then
18710: LD_VAR 0 2
18714: PUSH
18715: LD_INT 1
18717: GREATER
18718: IFFALSE 18830
// begin for i = 2 to result do
18720: LD_ADDR_VAR 0 3
18724: PUSH
18725: DOUBLE
18726: LD_INT 2
18728: DEC
18729: ST_TO_ADDR
18730: LD_VAR 0 2
18734: PUSH
18735: FOR_TO
18736: IFFALSE 18828
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18738: LD_ADDR_VAR 0 4
18742: PUSH
18743: LD_VAR 0 2
18747: PUSH
18748: LD_VAR 0 3
18752: ARRAY
18753: PPUSH
18754: LD_INT 3
18756: PPUSH
18757: CALL_OW 259
18761: PUSH
18762: LD_VAR 0 2
18766: PUSH
18767: LD_VAR 0 3
18771: ARRAY
18772: PPUSH
18773: CALL_OW 432
18777: MINUS
18778: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18779: LD_VAR 0 4
18783: PUSH
18784: LD_VAR 0 5
18788: PPUSH
18789: LD_INT 3
18791: PPUSH
18792: CALL_OW 259
18796: PUSH
18797: LD_VAR 0 5
18801: PPUSH
18802: CALL_OW 432
18806: MINUS
18807: GREATEREQUAL
18808: IFFALSE 18826
// mech := result [ i ] ;
18810: LD_ADDR_VAR 0 5
18814: PUSH
18815: LD_VAR 0 2
18819: PUSH
18820: LD_VAR 0 3
18824: ARRAY
18825: ST_TO_ADDR
// end ;
18826: GO 18735
18828: POP
18829: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18830: LD_VAR 0 1
18834: PPUSH
18835: LD_VAR 0 5
18839: PPUSH
18840: CALL_OW 135
// end ;
18844: LD_VAR 0 2
18848: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18849: LD_INT 0
18851: PPUSH
18852: PPUSH
18853: PPUSH
18854: PPUSH
18855: PPUSH
18856: PPUSH
18857: PPUSH
18858: PPUSH
18859: PPUSH
18860: PPUSH
18861: PPUSH
18862: PPUSH
18863: PPUSH
// result := [ ] ;
18864: LD_ADDR_VAR 0 7
18868: PUSH
18869: EMPTY
18870: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18871: LD_VAR 0 1
18875: PPUSH
18876: CALL_OW 266
18880: PUSH
18881: LD_INT 0
18883: PUSH
18884: LD_INT 1
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: IN
18891: NOT
18892: IFFALSE 18896
// exit ;
18894: GO 20536
// if name then
18896: LD_VAR 0 3
18900: IFFALSE 18916
// SetBName ( base_dep , name ) ;
18902: LD_VAR 0 1
18906: PPUSH
18907: LD_VAR 0 3
18911: PPUSH
18912: CALL_OW 500
// base := GetBase ( base_dep ) ;
18916: LD_ADDR_VAR 0 15
18920: PUSH
18921: LD_VAR 0 1
18925: PPUSH
18926: CALL_OW 274
18930: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18931: LD_ADDR_VAR 0 16
18935: PUSH
18936: LD_VAR 0 1
18940: PPUSH
18941: CALL_OW 255
18945: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18946: LD_ADDR_VAR 0 17
18950: PUSH
18951: LD_VAR 0 1
18955: PPUSH
18956: CALL_OW 248
18960: ST_TO_ADDR
// if sources then
18961: LD_VAR 0 5
18965: IFFALSE 19012
// for i = 1 to 3 do
18967: LD_ADDR_VAR 0 8
18971: PUSH
18972: DOUBLE
18973: LD_INT 1
18975: DEC
18976: ST_TO_ADDR
18977: LD_INT 3
18979: PUSH
18980: FOR_TO
18981: IFFALSE 19010
// AddResourceType ( base , i , sources [ i ] ) ;
18983: LD_VAR 0 15
18987: PPUSH
18988: LD_VAR 0 8
18992: PPUSH
18993: LD_VAR 0 5
18997: PUSH
18998: LD_VAR 0 8
19002: ARRAY
19003: PPUSH
19004: CALL_OW 276
19008: GO 18980
19010: POP
19011: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19012: LD_ADDR_VAR 0 18
19016: PUSH
19017: LD_VAR 0 15
19021: PPUSH
19022: LD_VAR 0 2
19026: PPUSH
19027: LD_INT 1
19029: PPUSH
19030: CALL 18271 0 3
19034: ST_TO_ADDR
// InitHc ;
19035: CALL_OW 19
// InitUc ;
19039: CALL_OW 18
// uc_side := side ;
19043: LD_ADDR_OWVAR 20
19047: PUSH
19048: LD_VAR 0 16
19052: ST_TO_ADDR
// uc_nation := nation ;
19053: LD_ADDR_OWVAR 21
19057: PUSH
19058: LD_VAR 0 17
19062: ST_TO_ADDR
// if buildings then
19063: LD_VAR 0 18
19067: IFFALSE 20395
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19069: LD_ADDR_VAR 0 19
19073: PUSH
19074: LD_VAR 0 18
19078: PPUSH
19079: LD_INT 2
19081: PUSH
19082: LD_INT 30
19084: PUSH
19085: LD_INT 29
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 30
19094: PUSH
19095: LD_INT 30
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: LIST
19106: PPUSH
19107: CALL_OW 72
19111: ST_TO_ADDR
// if tmp then
19112: LD_VAR 0 19
19116: IFFALSE 19164
// for i in tmp do
19118: LD_ADDR_VAR 0 8
19122: PUSH
19123: LD_VAR 0 19
19127: PUSH
19128: FOR_IN
19129: IFFALSE 19162
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19131: LD_VAR 0 8
19135: PPUSH
19136: CALL_OW 250
19140: PPUSH
19141: LD_VAR 0 8
19145: PPUSH
19146: CALL_OW 251
19150: PPUSH
19151: LD_VAR 0 16
19155: PPUSH
19156: CALL_OW 441
19160: GO 19128
19162: POP
19163: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19164: LD_VAR 0 18
19168: PPUSH
19169: LD_INT 2
19171: PUSH
19172: LD_INT 30
19174: PUSH
19175: LD_INT 32
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 30
19184: PUSH
19185: LD_INT 33
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: LIST
19196: PPUSH
19197: CALL_OW 72
19201: IFFALSE 19289
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19203: LD_ADDR_VAR 0 8
19207: PUSH
19208: LD_VAR 0 18
19212: PPUSH
19213: LD_INT 2
19215: PUSH
19216: LD_INT 30
19218: PUSH
19219: LD_INT 32
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 30
19228: PUSH
19229: LD_INT 33
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: LIST
19240: PPUSH
19241: CALL_OW 72
19245: PUSH
19246: FOR_IN
19247: IFFALSE 19287
// begin if not GetBWeapon ( i ) then
19249: LD_VAR 0 8
19253: PPUSH
19254: CALL_OW 269
19258: NOT
19259: IFFALSE 19285
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19261: LD_VAR 0 8
19265: PPUSH
19266: LD_VAR 0 8
19270: PPUSH
19271: LD_VAR 0 2
19275: PPUSH
19276: CALL 20541 0 2
19280: PPUSH
19281: CALL_OW 431
// end ;
19285: GO 19246
19287: POP
19288: POP
// end ; for i = 1 to personel do
19289: LD_ADDR_VAR 0 8
19293: PUSH
19294: DOUBLE
19295: LD_INT 1
19297: DEC
19298: ST_TO_ADDR
19299: LD_VAR 0 6
19303: PUSH
19304: FOR_TO
19305: IFFALSE 20375
// begin if i > 4 then
19307: LD_VAR 0 8
19311: PUSH
19312: LD_INT 4
19314: GREATER
19315: IFFALSE 19319
// break ;
19317: GO 20375
// case i of 1 :
19319: LD_VAR 0 8
19323: PUSH
19324: LD_INT 1
19326: DOUBLE
19327: EQUAL
19328: IFTRUE 19332
19330: GO 19412
19332: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19333: LD_ADDR_VAR 0 12
19337: PUSH
19338: LD_VAR 0 18
19342: PPUSH
19343: LD_INT 22
19345: PUSH
19346: LD_VAR 0 16
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 58
19357: PUSH
19358: EMPTY
19359: LIST
19360: PUSH
19361: LD_INT 2
19363: PUSH
19364: LD_INT 30
19366: PUSH
19367: LD_INT 32
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 30
19376: PUSH
19377: LD_INT 4
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 30
19386: PUSH
19387: LD_INT 5
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: LIST
19404: PPUSH
19405: CALL_OW 72
19409: ST_TO_ADDR
19410: GO 19634
19412: LD_INT 2
19414: DOUBLE
19415: EQUAL
19416: IFTRUE 19420
19418: GO 19482
19420: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19421: LD_ADDR_VAR 0 12
19425: PUSH
19426: LD_VAR 0 18
19430: PPUSH
19431: LD_INT 22
19433: PUSH
19434: LD_VAR 0 16
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 2
19445: PUSH
19446: LD_INT 30
19448: PUSH
19449: LD_INT 0
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 30
19458: PUSH
19459: LD_INT 1
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: LIST
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PPUSH
19475: CALL_OW 72
19479: ST_TO_ADDR
19480: GO 19634
19482: LD_INT 3
19484: DOUBLE
19485: EQUAL
19486: IFTRUE 19490
19488: GO 19552
19490: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19491: LD_ADDR_VAR 0 12
19495: PUSH
19496: LD_VAR 0 18
19500: PPUSH
19501: LD_INT 22
19503: PUSH
19504: LD_VAR 0 16
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 2
19515: PUSH
19516: LD_INT 30
19518: PUSH
19519: LD_INT 2
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 30
19528: PUSH
19529: LD_INT 3
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: LIST
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PPUSH
19545: CALL_OW 72
19549: ST_TO_ADDR
19550: GO 19634
19552: LD_INT 4
19554: DOUBLE
19555: EQUAL
19556: IFTRUE 19560
19558: GO 19633
19560: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19561: LD_ADDR_VAR 0 12
19565: PUSH
19566: LD_VAR 0 18
19570: PPUSH
19571: LD_INT 22
19573: PUSH
19574: LD_VAR 0 16
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 2
19585: PUSH
19586: LD_INT 30
19588: PUSH
19589: LD_INT 6
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 30
19598: PUSH
19599: LD_INT 7
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 30
19608: PUSH
19609: LD_INT 8
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PPUSH
19626: CALL_OW 72
19630: ST_TO_ADDR
19631: GO 19634
19633: POP
// if i = 1 then
19634: LD_VAR 0 8
19638: PUSH
19639: LD_INT 1
19641: EQUAL
19642: IFFALSE 19753
// begin tmp := [ ] ;
19644: LD_ADDR_VAR 0 19
19648: PUSH
19649: EMPTY
19650: ST_TO_ADDR
// for j in f do
19651: LD_ADDR_VAR 0 9
19655: PUSH
19656: LD_VAR 0 12
19660: PUSH
19661: FOR_IN
19662: IFFALSE 19735
// if GetBType ( j ) = b_bunker then
19664: LD_VAR 0 9
19668: PPUSH
19669: CALL_OW 266
19673: PUSH
19674: LD_INT 32
19676: EQUAL
19677: IFFALSE 19704
// tmp := Insert ( tmp , 1 , j ) else
19679: LD_ADDR_VAR 0 19
19683: PUSH
19684: LD_VAR 0 19
19688: PPUSH
19689: LD_INT 1
19691: PPUSH
19692: LD_VAR 0 9
19696: PPUSH
19697: CALL_OW 2
19701: ST_TO_ADDR
19702: GO 19733
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19704: LD_ADDR_VAR 0 19
19708: PUSH
19709: LD_VAR 0 19
19713: PPUSH
19714: LD_VAR 0 19
19718: PUSH
19719: LD_INT 1
19721: PLUS
19722: PPUSH
19723: LD_VAR 0 9
19727: PPUSH
19728: CALL_OW 2
19732: ST_TO_ADDR
19733: GO 19661
19735: POP
19736: POP
// if tmp then
19737: LD_VAR 0 19
19741: IFFALSE 19753
// f := tmp ;
19743: LD_ADDR_VAR 0 12
19747: PUSH
19748: LD_VAR 0 19
19752: ST_TO_ADDR
// end ; x := personel [ i ] ;
19753: LD_ADDR_VAR 0 13
19757: PUSH
19758: LD_VAR 0 6
19762: PUSH
19763: LD_VAR 0 8
19767: ARRAY
19768: ST_TO_ADDR
// if x = - 1 then
19769: LD_VAR 0 13
19773: PUSH
19774: LD_INT 1
19776: NEG
19777: EQUAL
19778: IFFALSE 19989
// begin for j in f do
19780: LD_ADDR_VAR 0 9
19784: PUSH
19785: LD_VAR 0 12
19789: PUSH
19790: FOR_IN
19791: IFFALSE 19985
// repeat InitHc ;
19793: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19797: LD_VAR 0 9
19801: PPUSH
19802: CALL_OW 266
19806: PUSH
19807: LD_INT 5
19809: EQUAL
19810: IFFALSE 19880
// begin if UnitsInside ( j ) < 3 then
19812: LD_VAR 0 9
19816: PPUSH
19817: CALL_OW 313
19821: PUSH
19822: LD_INT 3
19824: LESS
19825: IFFALSE 19861
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19827: LD_INT 0
19829: PPUSH
19830: LD_INT 5
19832: PUSH
19833: LD_INT 8
19835: PUSH
19836: LD_INT 9
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: LIST
19843: PUSH
19844: LD_VAR 0 17
19848: ARRAY
19849: PPUSH
19850: LD_VAR 0 4
19854: PPUSH
19855: CALL_OW 380
19859: GO 19878
// PrepareHuman ( false , i , skill ) ;
19861: LD_INT 0
19863: PPUSH
19864: LD_VAR 0 8
19868: PPUSH
19869: LD_VAR 0 4
19873: PPUSH
19874: CALL_OW 380
// end else
19878: GO 19897
// PrepareHuman ( false , i , skill ) ;
19880: LD_INT 0
19882: PPUSH
19883: LD_VAR 0 8
19887: PPUSH
19888: LD_VAR 0 4
19892: PPUSH
19893: CALL_OW 380
// un := CreateHuman ;
19897: LD_ADDR_VAR 0 14
19901: PUSH
19902: CALL_OW 44
19906: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19907: LD_ADDR_VAR 0 7
19911: PUSH
19912: LD_VAR 0 7
19916: PPUSH
19917: LD_INT 1
19919: PPUSH
19920: LD_VAR 0 14
19924: PPUSH
19925: CALL_OW 2
19929: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19930: LD_VAR 0 14
19934: PPUSH
19935: LD_VAR 0 9
19939: PPUSH
19940: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19944: LD_VAR 0 9
19948: PPUSH
19949: CALL_OW 313
19953: PUSH
19954: LD_INT 6
19956: EQUAL
19957: IFTRUE 19981
19959: PUSH
19960: LD_VAR 0 9
19964: PPUSH
19965: CALL_OW 266
19969: PUSH
19970: LD_INT 32
19972: PUSH
19973: LD_INT 31
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: IN
19980: OR
19981: IFFALSE 19793
19983: GO 19790
19985: POP
19986: POP
// end else
19987: GO 20373
// for j = 1 to x do
19989: LD_ADDR_VAR 0 9
19993: PUSH
19994: DOUBLE
19995: LD_INT 1
19997: DEC
19998: ST_TO_ADDR
19999: LD_VAR 0 13
20003: PUSH
20004: FOR_TO
20005: IFFALSE 20371
// begin InitHc ;
20007: CALL_OW 19
// if not f then
20011: LD_VAR 0 12
20015: NOT
20016: IFFALSE 20105
// begin PrepareHuman ( false , i , skill ) ;
20018: LD_INT 0
20020: PPUSH
20021: LD_VAR 0 8
20025: PPUSH
20026: LD_VAR 0 4
20030: PPUSH
20031: CALL_OW 380
// un := CreateHuman ;
20035: LD_ADDR_VAR 0 14
20039: PUSH
20040: CALL_OW 44
20044: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20045: LD_ADDR_VAR 0 7
20049: PUSH
20050: LD_VAR 0 7
20054: PPUSH
20055: LD_INT 1
20057: PPUSH
20058: LD_VAR 0 14
20062: PPUSH
20063: CALL_OW 2
20067: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20068: LD_VAR 0 14
20072: PPUSH
20073: LD_VAR 0 1
20077: PPUSH
20078: CALL_OW 250
20082: PPUSH
20083: LD_VAR 0 1
20087: PPUSH
20088: CALL_OW 251
20092: PPUSH
20093: LD_INT 10
20095: PPUSH
20096: LD_INT 0
20098: PPUSH
20099: CALL_OW 50
// continue ;
20103: GO 20004
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20105: LD_VAR 0 12
20109: PUSH
20110: LD_INT 1
20112: ARRAY
20113: PPUSH
20114: CALL_OW 313
20118: IFFALSE 20146
20120: PUSH
20121: LD_VAR 0 12
20125: PUSH
20126: LD_INT 1
20128: ARRAY
20129: PPUSH
20130: CALL_OW 266
20134: PUSH
20135: LD_INT 32
20137: PUSH
20138: LD_INT 31
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: IN
20145: AND
20146: IFTRUE 20167
20148: PUSH
20149: LD_VAR 0 12
20153: PUSH
20154: LD_INT 1
20156: ARRAY
20157: PPUSH
20158: CALL_OW 313
20162: PUSH
20163: LD_INT 6
20165: EQUAL
20166: OR
20167: IFFALSE 20187
// f := Delete ( f , 1 ) ;
20169: LD_ADDR_VAR 0 12
20173: PUSH
20174: LD_VAR 0 12
20178: PPUSH
20179: LD_INT 1
20181: PPUSH
20182: CALL_OW 3
20186: ST_TO_ADDR
// if not f then
20187: LD_VAR 0 12
20191: NOT
20192: IFFALSE 20210
// begin x := x + 2 ;
20194: LD_ADDR_VAR 0 13
20198: PUSH
20199: LD_VAR 0 13
20203: PUSH
20204: LD_INT 2
20206: PLUS
20207: ST_TO_ADDR
// continue ;
20208: GO 20004
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20210: LD_VAR 0 12
20214: PUSH
20215: LD_INT 1
20217: ARRAY
20218: PPUSH
20219: CALL_OW 266
20223: PUSH
20224: LD_INT 5
20226: EQUAL
20227: IFFALSE 20301
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20229: LD_VAR 0 12
20233: PUSH
20234: LD_INT 1
20236: ARRAY
20237: PPUSH
20238: CALL_OW 313
20242: PUSH
20243: LD_INT 3
20245: LESS
20246: IFFALSE 20282
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20248: LD_INT 0
20250: PPUSH
20251: LD_INT 5
20253: PUSH
20254: LD_INT 8
20256: PUSH
20257: LD_INT 9
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: LIST
20264: PUSH
20265: LD_VAR 0 17
20269: ARRAY
20270: PPUSH
20271: LD_VAR 0 4
20275: PPUSH
20276: CALL_OW 380
20280: GO 20299
// PrepareHuman ( false , i , skill ) ;
20282: LD_INT 0
20284: PPUSH
20285: LD_VAR 0 8
20289: PPUSH
20290: LD_VAR 0 4
20294: PPUSH
20295: CALL_OW 380
// end else
20299: GO 20318
// PrepareHuman ( false , i , skill ) ;
20301: LD_INT 0
20303: PPUSH
20304: LD_VAR 0 8
20308: PPUSH
20309: LD_VAR 0 4
20313: PPUSH
20314: CALL_OW 380
// un := CreateHuman ;
20318: LD_ADDR_VAR 0 14
20322: PUSH
20323: CALL_OW 44
20327: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20328: LD_ADDR_VAR 0 7
20332: PUSH
20333: LD_VAR 0 7
20337: PPUSH
20338: LD_INT 1
20340: PPUSH
20341: LD_VAR 0 14
20345: PPUSH
20346: CALL_OW 2
20350: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20351: LD_VAR 0 14
20355: PPUSH
20356: LD_VAR 0 12
20360: PUSH
20361: LD_INT 1
20363: ARRAY
20364: PPUSH
20365: CALL_OW 52
// end ;
20369: GO 20004
20371: POP
20372: POP
// end ;
20373: GO 19304
20375: POP
20376: POP
// result := result ^ buildings ;
20377: LD_ADDR_VAR 0 7
20381: PUSH
20382: LD_VAR 0 7
20386: PUSH
20387: LD_VAR 0 18
20391: ADD
20392: ST_TO_ADDR
// end else
20393: GO 20536
// begin for i = 1 to personel do
20395: LD_ADDR_VAR 0 8
20399: PUSH
20400: DOUBLE
20401: LD_INT 1
20403: DEC
20404: ST_TO_ADDR
20405: LD_VAR 0 6
20409: PUSH
20410: FOR_TO
20411: IFFALSE 20534
// begin if i > 4 then
20413: LD_VAR 0 8
20417: PUSH
20418: LD_INT 4
20420: GREATER
20421: IFFALSE 20425
// break ;
20423: GO 20534
// x := personel [ i ] ;
20425: LD_ADDR_VAR 0 13
20429: PUSH
20430: LD_VAR 0 6
20434: PUSH
20435: LD_VAR 0 8
20439: ARRAY
20440: ST_TO_ADDR
// if x = - 1 then
20441: LD_VAR 0 13
20445: PUSH
20446: LD_INT 1
20448: NEG
20449: EQUAL
20450: IFFALSE 20454
// continue ;
20452: GO 20410
// PrepareHuman ( false , i , skill ) ;
20454: LD_INT 0
20456: PPUSH
20457: LD_VAR 0 8
20461: PPUSH
20462: LD_VAR 0 4
20466: PPUSH
20467: CALL_OW 380
// un := CreateHuman ;
20471: LD_ADDR_VAR 0 14
20475: PUSH
20476: CALL_OW 44
20480: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20481: LD_VAR 0 14
20485: PPUSH
20486: LD_VAR 0 1
20490: PPUSH
20491: CALL_OW 250
20495: PPUSH
20496: LD_VAR 0 1
20500: PPUSH
20501: CALL_OW 251
20505: PPUSH
20506: LD_INT 10
20508: PPUSH
20509: LD_INT 0
20511: PPUSH
20512: CALL_OW 50
// result := result ^ un ;
20516: LD_ADDR_VAR 0 7
20520: PUSH
20521: LD_VAR 0 7
20525: PUSH
20526: LD_VAR 0 14
20530: ADD
20531: ST_TO_ADDR
// end ;
20532: GO 20410
20534: POP
20535: POP
// end ; end ;
20536: LD_VAR 0 7
20540: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20541: LD_INT 0
20543: PPUSH
20544: PPUSH
20545: PPUSH
20546: PPUSH
20547: PPUSH
20548: PPUSH
20549: PPUSH
20550: PPUSH
20551: PPUSH
20552: PPUSH
20553: PPUSH
20554: PPUSH
20555: PPUSH
20556: PPUSH
20557: PPUSH
20558: PPUSH
// result := false ;
20559: LD_ADDR_VAR 0 3
20563: PUSH
20564: LD_INT 0
20566: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20567: LD_VAR 0 1
20571: NOT
20572: IFTRUE 20597
20574: PUSH
20575: LD_VAR 0 1
20579: PPUSH
20580: CALL_OW 266
20584: PUSH
20585: LD_INT 32
20587: PUSH
20588: LD_INT 33
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: IN
20595: NOT
20596: OR
20597: IFFALSE 20601
// exit ;
20599: GO 21736
// nat := GetNation ( tower ) ;
20601: LD_ADDR_VAR 0 12
20605: PUSH
20606: LD_VAR 0 1
20610: PPUSH
20611: CALL_OW 248
20615: ST_TO_ADDR
// side := GetSide ( tower ) ;
20616: LD_ADDR_VAR 0 16
20620: PUSH
20621: LD_VAR 0 1
20625: PPUSH
20626: CALL_OW 255
20630: ST_TO_ADDR
// x := GetX ( tower ) ;
20631: LD_ADDR_VAR 0 10
20635: PUSH
20636: LD_VAR 0 1
20640: PPUSH
20641: CALL_OW 250
20645: ST_TO_ADDR
// y := GetY ( tower ) ;
20646: LD_ADDR_VAR 0 11
20650: PUSH
20651: LD_VAR 0 1
20655: PPUSH
20656: CALL_OW 251
20660: ST_TO_ADDR
// if not x or not y then
20661: LD_VAR 0 10
20665: NOT
20666: IFTRUE 20675
20668: PUSH
20669: LD_VAR 0 11
20673: NOT
20674: OR
20675: IFFALSE 20679
// exit ;
20677: GO 21736
// weapon := 0 ;
20679: LD_ADDR_VAR 0 18
20683: PUSH
20684: LD_INT 0
20686: ST_TO_ADDR
// fac_list := [ ] ;
20687: LD_ADDR_VAR 0 17
20691: PUSH
20692: EMPTY
20693: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20694: LD_ADDR_VAR 0 6
20698: PUSH
20699: LD_VAR 0 1
20703: PPUSH
20704: CALL_OW 274
20708: PPUSH
20709: LD_VAR 0 2
20713: PPUSH
20714: LD_INT 0
20716: PPUSH
20717: CALL 18271 0 3
20721: PPUSH
20722: LD_INT 30
20724: PUSH
20725: LD_INT 3
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PPUSH
20732: CALL_OW 72
20736: ST_TO_ADDR
// if not factories then
20737: LD_VAR 0 6
20741: NOT
20742: IFFALSE 20746
// exit ;
20744: GO 21736
// for i in factories do
20746: LD_ADDR_VAR 0 8
20750: PUSH
20751: LD_VAR 0 6
20755: PUSH
20756: FOR_IN
20757: IFFALSE 20782
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20759: LD_ADDR_VAR 0 17
20763: PUSH
20764: LD_VAR 0 17
20768: PUSH
20769: LD_VAR 0 8
20773: PPUSH
20774: CALL_OW 478
20778: UNION
20779: ST_TO_ADDR
20780: GO 20756
20782: POP
20783: POP
// if not fac_list then
20784: LD_VAR 0 17
20788: NOT
20789: IFFALSE 20793
// exit ;
20791: GO 21736
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20793: LD_ADDR_VAR 0 5
20797: PUSH
20798: LD_INT 4
20800: PUSH
20801: LD_INT 5
20803: PUSH
20804: LD_INT 9
20806: PUSH
20807: LD_INT 10
20809: PUSH
20810: LD_INT 6
20812: PUSH
20813: LD_INT 7
20815: PUSH
20816: LD_INT 11
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 27
20830: PUSH
20831: LD_INT 28
20833: PUSH
20834: LD_INT 26
20836: PUSH
20837: LD_INT 30
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 43
20848: PUSH
20849: LD_INT 44
20851: PUSH
20852: LD_INT 46
20854: PUSH
20855: LD_INT 45
20857: PUSH
20858: LD_INT 47
20860: PUSH
20861: LD_INT 49
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: LIST
20876: PUSH
20877: LD_VAR 0 12
20881: ARRAY
20882: ST_TO_ADDR
// list := list isect fac_list ;
20883: LD_ADDR_VAR 0 5
20887: PUSH
20888: LD_VAR 0 5
20892: PUSH
20893: LD_VAR 0 17
20897: ISECT
20898: ST_TO_ADDR
// if not list then
20899: LD_VAR 0 5
20903: NOT
20904: IFFALSE 20908
// exit ;
20906: GO 21736
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20908: LD_VAR 0 12
20912: PUSH
20913: LD_INT 3
20915: EQUAL
20916: IFFALSE 20928
20918: PUSH
20919: LD_INT 49
20921: PUSH
20922: LD_VAR 0 5
20926: IN
20927: AND
20928: IFFALSE 20948
20930: PUSH
20931: LD_INT 31
20933: PPUSH
20934: LD_VAR 0 16
20938: PPUSH
20939: CALL_OW 321
20943: PUSH
20944: LD_INT 2
20946: EQUAL
20947: AND
20948: IFFALSE 21008
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20950: LD_INT 22
20952: PUSH
20953: LD_VAR 0 16
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 35
20964: PUSH
20965: LD_INT 49
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 91
20974: PUSH
20975: LD_VAR 0 1
20979: PUSH
20980: LD_INT 10
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: LIST
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: LIST
20992: PPUSH
20993: CALL_OW 69
20997: NOT
20998: IFFALSE 21008
// weapon := ru_time_lapser ;
21000: LD_ADDR_VAR 0 18
21004: PUSH
21005: LD_INT 49
21007: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21008: LD_VAR 0 12
21012: PUSH
21013: LD_INT 1
21015: PUSH
21016: LD_INT 2
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: IN
21023: IFFALSE 21047
21025: PUSH
21026: LD_INT 11
21028: PUSH
21029: LD_VAR 0 5
21033: IN
21034: IFTRUE 21046
21036: PUSH
21037: LD_INT 30
21039: PUSH
21040: LD_VAR 0 5
21044: IN
21045: OR
21046: AND
21047: IFFALSE 21067
21049: PUSH
21050: LD_INT 6
21052: PPUSH
21053: LD_VAR 0 16
21057: PPUSH
21058: CALL_OW 321
21062: PUSH
21063: LD_INT 2
21065: EQUAL
21066: AND
21067: IFFALSE 21234
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21069: LD_INT 22
21071: PUSH
21072: LD_VAR 0 16
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 2
21083: PUSH
21084: LD_INT 35
21086: PUSH
21087: LD_INT 11
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 35
21096: PUSH
21097: LD_INT 30
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 91
21111: PUSH
21112: LD_VAR 0 1
21116: PUSH
21117: LD_INT 18
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: LIST
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: LIST
21129: PPUSH
21130: CALL_OW 69
21134: NOT
21135: IFFALSE 21211
21137: PUSH
21138: LD_INT 22
21140: PUSH
21141: LD_VAR 0 16
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 2
21152: PUSH
21153: LD_INT 30
21155: PUSH
21156: LD_INT 32
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 30
21165: PUSH
21166: LD_INT 33
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: LIST
21177: PUSH
21178: LD_INT 91
21180: PUSH
21181: LD_VAR 0 1
21185: PUSH
21186: LD_INT 12
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: LIST
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: LIST
21198: PUSH
21199: EMPTY
21200: LIST
21201: PPUSH
21202: CALL_OW 69
21206: PUSH
21207: LD_INT 2
21209: GREATER
21210: AND
21211: IFFALSE 21234
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21213: LD_ADDR_VAR 0 18
21217: PUSH
21218: LD_INT 11
21220: PUSH
21221: LD_INT 30
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_VAR 0 12
21232: ARRAY
21233: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21234: LD_VAR 0 18
21238: NOT
21239: IFFALSE 21259
21241: PUSH
21242: LD_INT 40
21244: PPUSH
21245: LD_VAR 0 16
21249: PPUSH
21250: CALL_OW 321
21254: PUSH
21255: LD_INT 2
21257: EQUAL
21258: AND
21259: IFFALSE 21295
21261: PUSH
21262: LD_INT 7
21264: PUSH
21265: LD_VAR 0 5
21269: IN
21270: IFTRUE 21282
21272: PUSH
21273: LD_INT 28
21275: PUSH
21276: LD_VAR 0 5
21280: IN
21281: OR
21282: IFTRUE 21294
21284: PUSH
21285: LD_INT 45
21287: PUSH
21288: LD_VAR 0 5
21292: IN
21293: OR
21294: AND
21295: IFFALSE 21549
// begin hex := GetHexInfo ( x , y ) ;
21297: LD_ADDR_VAR 0 4
21301: PUSH
21302: LD_VAR 0 10
21306: PPUSH
21307: LD_VAR 0 11
21311: PPUSH
21312: CALL_OW 546
21316: ST_TO_ADDR
// if hex [ 1 ] then
21317: LD_VAR 0 4
21321: PUSH
21322: LD_INT 1
21324: ARRAY
21325: IFFALSE 21329
// exit ;
21327: GO 21736
// height := hex [ 2 ] ;
21329: LD_ADDR_VAR 0 15
21333: PUSH
21334: LD_VAR 0 4
21338: PUSH
21339: LD_INT 2
21341: ARRAY
21342: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21343: LD_ADDR_VAR 0 14
21347: PUSH
21348: LD_INT 0
21350: PUSH
21351: LD_INT 2
21353: PUSH
21354: LD_INT 3
21356: PUSH
21357: LD_INT 5
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: ST_TO_ADDR
// for i in tmp do
21366: LD_ADDR_VAR 0 8
21370: PUSH
21371: LD_VAR 0 14
21375: PUSH
21376: FOR_IN
21377: IFFALSE 21547
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21379: LD_ADDR_VAR 0 9
21383: PUSH
21384: LD_VAR 0 10
21388: PPUSH
21389: LD_VAR 0 8
21393: PPUSH
21394: LD_INT 5
21396: PPUSH
21397: CALL_OW 272
21401: PUSH
21402: LD_VAR 0 11
21406: PPUSH
21407: LD_VAR 0 8
21411: PPUSH
21412: LD_INT 5
21414: PPUSH
21415: CALL_OW 273
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21424: LD_VAR 0 9
21428: PUSH
21429: LD_INT 1
21431: ARRAY
21432: PPUSH
21433: LD_VAR 0 9
21437: PUSH
21438: LD_INT 2
21440: ARRAY
21441: PPUSH
21442: CALL_OW 488
21446: IFFALSE 21545
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21448: LD_ADDR_VAR 0 4
21452: PUSH
21453: LD_VAR 0 9
21457: PUSH
21458: LD_INT 1
21460: ARRAY
21461: PPUSH
21462: LD_VAR 0 9
21466: PUSH
21467: LD_INT 2
21469: ARRAY
21470: PPUSH
21471: CALL_OW 546
21475: ST_TO_ADDR
// if hex [ 1 ] then
21476: LD_VAR 0 4
21480: PUSH
21481: LD_INT 1
21483: ARRAY
21484: IFFALSE 21488
// continue ;
21486: GO 21376
// h := hex [ 2 ] ;
21488: LD_ADDR_VAR 0 13
21492: PUSH
21493: LD_VAR 0 4
21497: PUSH
21498: LD_INT 2
21500: ARRAY
21501: ST_TO_ADDR
// if h + 7 < height then
21502: LD_VAR 0 13
21506: PUSH
21507: LD_INT 7
21509: PLUS
21510: PUSH
21511: LD_VAR 0 15
21515: LESS
21516: IFFALSE 21545
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21518: LD_ADDR_VAR 0 18
21522: PUSH
21523: LD_INT 7
21525: PUSH
21526: LD_INT 28
21528: PUSH
21529: LD_INT 45
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: LIST
21536: PUSH
21537: LD_VAR 0 12
21541: ARRAY
21542: ST_TO_ADDR
// break ;
21543: GO 21547
// end ; end ; end ;
21545: GO 21376
21547: POP
21548: POP
// end ; if not weapon then
21549: LD_VAR 0 18
21553: NOT
21554: IFFALSE 21614
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21556: LD_ADDR_VAR 0 5
21560: PUSH
21561: LD_VAR 0 5
21565: PUSH
21566: LD_INT 11
21568: PUSH
21569: LD_INT 30
21571: PUSH
21572: LD_INT 49
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: LIST
21579: DIFF
21580: ST_TO_ADDR
// if not list then
21581: LD_VAR 0 5
21585: NOT
21586: IFFALSE 21590
// exit ;
21588: GO 21736
// weapon := list [ rand ( 1 , list ) ] ;
21590: LD_ADDR_VAR 0 18
21594: PUSH
21595: LD_VAR 0 5
21599: PUSH
21600: LD_INT 1
21602: PPUSH
21603: LD_VAR 0 5
21607: PPUSH
21608: CALL_OW 12
21612: ARRAY
21613: ST_TO_ADDR
// end ; if weapon then
21614: LD_VAR 0 18
21618: IFFALSE 21736
// begin tmp := CostOfWeapon ( weapon ) ;
21620: LD_ADDR_VAR 0 14
21624: PUSH
21625: LD_VAR 0 18
21629: PPUSH
21630: CALL_OW 451
21634: ST_TO_ADDR
// j := GetBase ( tower ) ;
21635: LD_ADDR_VAR 0 9
21639: PUSH
21640: LD_VAR 0 1
21644: PPUSH
21645: CALL_OW 274
21649: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21650: LD_VAR 0 9
21654: PPUSH
21655: LD_INT 1
21657: PPUSH
21658: CALL_OW 275
21662: PUSH
21663: LD_VAR 0 14
21667: PUSH
21668: LD_INT 1
21670: ARRAY
21671: GREATEREQUAL
21672: IFFALSE 21698
21674: PUSH
21675: LD_VAR 0 9
21679: PPUSH
21680: LD_INT 2
21682: PPUSH
21683: CALL_OW 275
21687: PUSH
21688: LD_VAR 0 14
21692: PUSH
21693: LD_INT 2
21695: ARRAY
21696: GREATEREQUAL
21697: AND
21698: IFFALSE 21724
21700: PUSH
21701: LD_VAR 0 9
21705: PPUSH
21706: LD_INT 3
21708: PPUSH
21709: CALL_OW 275
21713: PUSH
21714: LD_VAR 0 14
21718: PUSH
21719: LD_INT 3
21721: ARRAY
21722: GREATEREQUAL
21723: AND
21724: IFFALSE 21736
// result := weapon ;
21726: LD_ADDR_VAR 0 3
21730: PUSH
21731: LD_VAR 0 18
21735: ST_TO_ADDR
// end ; end ;
21736: LD_VAR 0 3
21740: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21741: LD_INT 0
21743: PPUSH
21744: PPUSH
// result := true ;
21745: LD_ADDR_VAR 0 3
21749: PUSH
21750: LD_INT 1
21752: ST_TO_ADDR
// if array1 = array2 then
21753: LD_VAR 0 1
21757: PUSH
21758: LD_VAR 0 2
21762: EQUAL
21763: IFFALSE 21823
// begin for i = 1 to array1 do
21765: LD_ADDR_VAR 0 4
21769: PUSH
21770: DOUBLE
21771: LD_INT 1
21773: DEC
21774: ST_TO_ADDR
21775: LD_VAR 0 1
21779: PUSH
21780: FOR_TO
21781: IFFALSE 21819
// if array1 [ i ] <> array2 [ i ] then
21783: LD_VAR 0 1
21787: PUSH
21788: LD_VAR 0 4
21792: ARRAY
21793: PUSH
21794: LD_VAR 0 2
21798: PUSH
21799: LD_VAR 0 4
21803: ARRAY
21804: NONEQUAL
21805: IFFALSE 21817
// begin result := false ;
21807: LD_ADDR_VAR 0 3
21811: PUSH
21812: LD_INT 0
21814: ST_TO_ADDR
// break ;
21815: GO 21819
// end ;
21817: GO 21780
21819: POP
21820: POP
// end else
21821: GO 21831
// result := false ;
21823: LD_ADDR_VAR 0 3
21827: PUSH
21828: LD_INT 0
21830: ST_TO_ADDR
// end ;
21831: LD_VAR 0 3
21835: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21836: LD_INT 0
21838: PPUSH
21839: PPUSH
// if not array1 or not array2 then
21840: LD_VAR 0 1
21844: NOT
21845: IFTRUE 21854
21847: PUSH
21848: LD_VAR 0 2
21852: NOT
21853: OR
21854: IFFALSE 21858
// exit ;
21856: GO 21922
// result := true ;
21858: LD_ADDR_VAR 0 3
21862: PUSH
21863: LD_INT 1
21865: ST_TO_ADDR
// for i = 1 to array1 do
21866: LD_ADDR_VAR 0 4
21870: PUSH
21871: DOUBLE
21872: LD_INT 1
21874: DEC
21875: ST_TO_ADDR
21876: LD_VAR 0 1
21880: PUSH
21881: FOR_TO
21882: IFFALSE 21920
// if array1 [ i ] <> array2 [ i ] then
21884: LD_VAR 0 1
21888: PUSH
21889: LD_VAR 0 4
21893: ARRAY
21894: PUSH
21895: LD_VAR 0 2
21899: PUSH
21900: LD_VAR 0 4
21904: ARRAY
21905: NONEQUAL
21906: IFFALSE 21918
// begin result := false ;
21908: LD_ADDR_VAR 0 3
21912: PUSH
21913: LD_INT 0
21915: ST_TO_ADDR
// break ;
21916: GO 21920
// end ;
21918: GO 21881
21920: POP
21921: POP
// end ;
21922: LD_VAR 0 3
21926: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21927: LD_INT 0
21929: PPUSH
21930: PPUSH
21931: PPUSH
// pom := GetBase ( fac ) ;
21932: LD_ADDR_VAR 0 5
21936: PUSH
21937: LD_VAR 0 1
21941: PPUSH
21942: CALL_OW 274
21946: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21947: LD_ADDR_VAR 0 4
21951: PUSH
21952: LD_VAR 0 2
21956: PUSH
21957: LD_INT 1
21959: ARRAY
21960: PPUSH
21961: LD_VAR 0 2
21965: PUSH
21966: LD_INT 2
21968: ARRAY
21969: PPUSH
21970: LD_VAR 0 2
21974: PUSH
21975: LD_INT 3
21977: ARRAY
21978: PPUSH
21979: LD_VAR 0 2
21983: PUSH
21984: LD_INT 4
21986: ARRAY
21987: PPUSH
21988: CALL_OW 449
21992: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21993: LD_ADDR_VAR 0 3
21997: PUSH
21998: LD_VAR 0 5
22002: PPUSH
22003: LD_INT 1
22005: PPUSH
22006: CALL_OW 275
22010: PUSH
22011: LD_VAR 0 4
22015: PUSH
22016: LD_INT 1
22018: ARRAY
22019: GREATEREQUAL
22020: IFFALSE 22046
22022: PUSH
22023: LD_VAR 0 5
22027: PPUSH
22028: LD_INT 2
22030: PPUSH
22031: CALL_OW 275
22035: PUSH
22036: LD_VAR 0 4
22040: PUSH
22041: LD_INT 2
22043: ARRAY
22044: GREATEREQUAL
22045: AND
22046: IFFALSE 22072
22048: PUSH
22049: LD_VAR 0 5
22053: PPUSH
22054: LD_INT 3
22056: PPUSH
22057: CALL_OW 275
22061: PUSH
22062: LD_VAR 0 4
22066: PUSH
22067: LD_INT 3
22069: ARRAY
22070: GREATEREQUAL
22071: AND
22072: ST_TO_ADDR
// end ;
22073: LD_VAR 0 3
22077: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22078: LD_INT 0
22080: PPUSH
22081: PPUSH
22082: PPUSH
22083: PPUSH
// pom := GetBase ( building ) ;
22084: LD_ADDR_VAR 0 3
22088: PUSH
22089: LD_VAR 0 1
22093: PPUSH
22094: CALL_OW 274
22098: ST_TO_ADDR
// if not pom then
22099: LD_VAR 0 3
22103: NOT
22104: IFFALSE 22108
// exit ;
22106: GO 22282
// btype := GetBType ( building ) ;
22108: LD_ADDR_VAR 0 5
22112: PUSH
22113: LD_VAR 0 1
22117: PPUSH
22118: CALL_OW 266
22122: ST_TO_ADDR
// if btype = b_armoury then
22123: LD_VAR 0 5
22127: PUSH
22128: LD_INT 4
22130: EQUAL
22131: IFFALSE 22141
// btype := b_barracks ;
22133: LD_ADDR_VAR 0 5
22137: PUSH
22138: LD_INT 5
22140: ST_TO_ADDR
// if btype = b_depot then
22141: LD_VAR 0 5
22145: PUSH
22146: LD_INT 0
22148: EQUAL
22149: IFFALSE 22159
// btype := b_warehouse ;
22151: LD_ADDR_VAR 0 5
22155: PUSH
22156: LD_INT 1
22158: ST_TO_ADDR
// if btype = b_workshop then
22159: LD_VAR 0 5
22163: PUSH
22164: LD_INT 2
22166: EQUAL
22167: IFFALSE 22177
// btype := b_factory ;
22169: LD_ADDR_VAR 0 5
22173: PUSH
22174: LD_INT 3
22176: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22177: LD_ADDR_VAR 0 4
22181: PUSH
22182: LD_VAR 0 5
22186: PPUSH
22187: LD_VAR 0 1
22191: PPUSH
22192: CALL_OW 248
22196: PPUSH
22197: CALL_OW 450
22201: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22202: LD_ADDR_VAR 0 2
22206: PUSH
22207: LD_VAR 0 3
22211: PPUSH
22212: LD_INT 1
22214: PPUSH
22215: CALL_OW 275
22219: PUSH
22220: LD_VAR 0 4
22224: PUSH
22225: LD_INT 1
22227: ARRAY
22228: GREATEREQUAL
22229: IFFALSE 22255
22231: PUSH
22232: LD_VAR 0 3
22236: PPUSH
22237: LD_INT 2
22239: PPUSH
22240: CALL_OW 275
22244: PUSH
22245: LD_VAR 0 4
22249: PUSH
22250: LD_INT 2
22252: ARRAY
22253: GREATEREQUAL
22254: AND
22255: IFFALSE 22281
22257: PUSH
22258: LD_VAR 0 3
22262: PPUSH
22263: LD_INT 3
22265: PPUSH
22266: CALL_OW 275
22270: PUSH
22271: LD_VAR 0 4
22275: PUSH
22276: LD_INT 3
22278: ARRAY
22279: GREATEREQUAL
22280: AND
22281: ST_TO_ADDR
// end ;
22282: LD_VAR 0 2
22286: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22287: LD_INT 0
22289: PPUSH
22290: PPUSH
22291: PPUSH
// pom := GetBase ( building ) ;
22292: LD_ADDR_VAR 0 4
22296: PUSH
22297: LD_VAR 0 1
22301: PPUSH
22302: CALL_OW 274
22306: ST_TO_ADDR
// if not pom then
22307: LD_VAR 0 4
22311: NOT
22312: IFFALSE 22316
// exit ;
22314: GO 22421
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22316: LD_ADDR_VAR 0 5
22320: PUSH
22321: LD_VAR 0 2
22325: PPUSH
22326: LD_VAR 0 1
22330: PPUSH
22331: CALL_OW 248
22335: PPUSH
22336: CALL_OW 450
22340: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22341: LD_ADDR_VAR 0 3
22345: PUSH
22346: LD_VAR 0 4
22350: PPUSH
22351: LD_INT 1
22353: PPUSH
22354: CALL_OW 275
22358: PUSH
22359: LD_VAR 0 5
22363: PUSH
22364: LD_INT 1
22366: ARRAY
22367: GREATEREQUAL
22368: IFFALSE 22394
22370: PUSH
22371: LD_VAR 0 4
22375: PPUSH
22376: LD_INT 2
22378: PPUSH
22379: CALL_OW 275
22383: PUSH
22384: LD_VAR 0 5
22388: PUSH
22389: LD_INT 2
22391: ARRAY
22392: GREATEREQUAL
22393: AND
22394: IFFALSE 22420
22396: PUSH
22397: LD_VAR 0 4
22401: PPUSH
22402: LD_INT 3
22404: PPUSH
22405: CALL_OW 275
22409: PUSH
22410: LD_VAR 0 5
22414: PUSH
22415: LD_INT 3
22417: ARRAY
22418: GREATEREQUAL
22419: AND
22420: ST_TO_ADDR
// end ;
22421: LD_VAR 0 3
22425: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22426: LD_INT 0
22428: PPUSH
22429: PPUSH
22430: PPUSH
22431: PPUSH
22432: PPUSH
22433: PPUSH
22434: PPUSH
22435: PPUSH
22436: PPUSH
22437: PPUSH
22438: PPUSH
// result := false ;
22439: LD_ADDR_VAR 0 8
22443: PUSH
22444: LD_INT 0
22446: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22447: LD_VAR 0 5
22451: NOT
22452: IFTRUE 22461
22454: PUSH
22455: LD_VAR 0 1
22459: NOT
22460: OR
22461: IFTRUE 22470
22463: PUSH
22464: LD_VAR 0 2
22468: NOT
22469: OR
22470: IFTRUE 22479
22472: PUSH
22473: LD_VAR 0 3
22477: NOT
22478: OR
22479: IFFALSE 22483
// exit ;
22481: GO 23309
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22483: LD_ADDR_VAR 0 14
22487: PUSH
22488: LD_VAR 0 1
22492: PPUSH
22493: LD_VAR 0 2
22497: PPUSH
22498: LD_VAR 0 3
22502: PPUSH
22503: LD_VAR 0 4
22507: PPUSH
22508: LD_VAR 0 5
22512: PUSH
22513: LD_INT 1
22515: ARRAY
22516: PPUSH
22517: CALL_OW 248
22521: PPUSH
22522: LD_INT 0
22524: PPUSH
22525: CALL 24590 0 6
22529: ST_TO_ADDR
// if not hexes then
22530: LD_VAR 0 14
22534: NOT
22535: IFFALSE 22539
// exit ;
22537: GO 23309
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22539: LD_ADDR_VAR 0 17
22543: PUSH
22544: LD_VAR 0 5
22548: PPUSH
22549: LD_INT 22
22551: PUSH
22552: LD_VAR 0 13
22556: PPUSH
22557: CALL_OW 255
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 2
22568: PUSH
22569: LD_INT 30
22571: PUSH
22572: LD_INT 0
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 30
22581: PUSH
22582: LD_INT 1
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: LIST
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PPUSH
22598: CALL_OW 72
22602: ST_TO_ADDR
// for i = 1 to hexes do
22603: LD_ADDR_VAR 0 9
22607: PUSH
22608: DOUBLE
22609: LD_INT 1
22611: DEC
22612: ST_TO_ADDR
22613: LD_VAR 0 14
22617: PUSH
22618: FOR_TO
22619: IFFALSE 23307
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22621: LD_ADDR_VAR 0 13
22625: PUSH
22626: LD_VAR 0 14
22630: PUSH
22631: LD_VAR 0 9
22635: ARRAY
22636: PUSH
22637: LD_INT 1
22639: ARRAY
22640: PPUSH
22641: LD_VAR 0 14
22645: PUSH
22646: LD_VAR 0 9
22650: ARRAY
22651: PUSH
22652: LD_INT 2
22654: ARRAY
22655: PPUSH
22656: CALL_OW 428
22660: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22661: LD_VAR 0 14
22665: PUSH
22666: LD_VAR 0 9
22670: ARRAY
22671: PUSH
22672: LD_INT 1
22674: ARRAY
22675: PPUSH
22676: LD_VAR 0 14
22680: PUSH
22681: LD_VAR 0 9
22685: ARRAY
22686: PUSH
22687: LD_INT 2
22689: ARRAY
22690: PPUSH
22691: CALL_OW 351
22695: IFTRUE 22734
22697: PUSH
22698: LD_VAR 0 14
22702: PUSH
22703: LD_VAR 0 9
22707: ARRAY
22708: PUSH
22709: LD_INT 1
22711: ARRAY
22712: PPUSH
22713: LD_VAR 0 14
22717: PUSH
22718: LD_VAR 0 9
22722: ARRAY
22723: PUSH
22724: LD_INT 2
22726: ARRAY
22727: PPUSH
22728: CALL_OW 488
22732: NOT
22733: OR
22734: IFTRUE 22751
22736: PUSH
22737: LD_VAR 0 13
22741: PPUSH
22742: CALL_OW 247
22746: PUSH
22747: LD_INT 3
22749: EQUAL
22750: OR
22751: IFFALSE 22757
// exit ;
22753: POP
22754: POP
22755: GO 23309
// if not tmp then
22757: LD_VAR 0 13
22761: NOT
22762: IFFALSE 22766
// continue ;
22764: GO 22618
// result := true ;
22766: LD_ADDR_VAR 0 8
22770: PUSH
22771: LD_INT 1
22773: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22774: LD_VAR 0 6
22778: IFFALSE 22795
22780: PUSH
22781: LD_VAR 0 13
22785: PPUSH
22786: CALL_OW 247
22790: PUSH
22791: LD_INT 2
22793: EQUAL
22794: AND
22795: IFFALSE 22812
22797: PUSH
22798: LD_VAR 0 13
22802: PPUSH
22803: CALL_OW 263
22807: PUSH
22808: LD_INT 1
22810: EQUAL
22811: AND
22812: IFFALSE 22976
// begin if IsDrivenBy ( tmp ) then
22814: LD_VAR 0 13
22818: PPUSH
22819: CALL_OW 311
22823: IFFALSE 22827
// continue ;
22825: GO 22618
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22827: LD_VAR 0 6
22831: PPUSH
22832: LD_INT 3
22834: PUSH
22835: LD_INT 60
22837: PUSH
22838: EMPTY
22839: LIST
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 3
22847: PUSH
22848: LD_INT 55
22850: PUSH
22851: EMPTY
22852: LIST
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PPUSH
22862: CALL_OW 72
22866: IFFALSE 22974
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22868: LD_ADDR_VAR 0 18
22872: PUSH
22873: LD_VAR 0 6
22877: PPUSH
22878: LD_INT 3
22880: PUSH
22881: LD_INT 60
22883: PUSH
22884: EMPTY
22885: LIST
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 3
22893: PUSH
22894: LD_INT 55
22896: PUSH
22897: EMPTY
22898: LIST
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PPUSH
22908: CALL_OW 72
22912: PUSH
22913: LD_INT 1
22915: ARRAY
22916: ST_TO_ADDR
// if IsInUnit ( driver ) then
22917: LD_VAR 0 18
22921: PPUSH
22922: CALL_OW 310
22926: IFFALSE 22937
// ComExit ( driver ) ;
22928: LD_VAR 0 18
22932: PPUSH
22933: CALL 48580 0 1
// AddComEnterUnit ( driver , tmp ) ;
22937: LD_VAR 0 18
22941: PPUSH
22942: LD_VAR 0 13
22946: PPUSH
22947: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22951: LD_VAR 0 18
22955: PPUSH
22956: LD_VAR 0 7
22960: PPUSH
22961: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22965: LD_VAR 0 18
22969: PPUSH
22970: CALL_OW 181
// end ; continue ;
22974: GO 22618
// end ; if not cleaners or not tmp in cleaners then
22976: LD_VAR 0 6
22980: NOT
22981: IFTRUE 22996
22983: PUSH
22984: LD_VAR 0 13
22988: PUSH
22989: LD_VAR 0 6
22993: IN
22994: NOT
22995: OR
22996: IFFALSE 23305
// begin if dep then
22998: LD_VAR 0 17
23002: IFFALSE 23138
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23004: LD_ADDR_VAR 0 16
23008: PUSH
23009: LD_VAR 0 17
23013: PUSH
23014: LD_INT 1
23016: ARRAY
23017: PPUSH
23018: CALL_OW 250
23022: PPUSH
23023: LD_VAR 0 17
23027: PUSH
23028: LD_INT 1
23030: ARRAY
23031: PPUSH
23032: CALL_OW 254
23036: PPUSH
23037: LD_INT 5
23039: PPUSH
23040: CALL_OW 272
23044: PUSH
23045: LD_VAR 0 17
23049: PUSH
23050: LD_INT 1
23052: ARRAY
23053: PPUSH
23054: CALL_OW 251
23058: PPUSH
23059: LD_VAR 0 17
23063: PUSH
23064: LD_INT 1
23066: ARRAY
23067: PPUSH
23068: CALL_OW 254
23072: PPUSH
23073: LD_INT 5
23075: PPUSH
23076: CALL_OW 273
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23085: LD_VAR 0 16
23089: PUSH
23090: LD_INT 1
23092: ARRAY
23093: PPUSH
23094: LD_VAR 0 16
23098: PUSH
23099: LD_INT 2
23101: ARRAY
23102: PPUSH
23103: CALL_OW 488
23107: IFFALSE 23138
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23109: LD_VAR 0 13
23113: PPUSH
23114: LD_VAR 0 16
23118: PUSH
23119: LD_INT 1
23121: ARRAY
23122: PPUSH
23123: LD_VAR 0 16
23127: PUSH
23128: LD_INT 2
23130: ARRAY
23131: PPUSH
23132: CALL_OW 111
// continue ;
23136: GO 22618
// end ; end ; r := GetDir ( tmp ) ;
23138: LD_ADDR_VAR 0 15
23142: PUSH
23143: LD_VAR 0 13
23147: PPUSH
23148: CALL_OW 254
23152: ST_TO_ADDR
// if r = 5 then
23153: LD_VAR 0 15
23157: PUSH
23158: LD_INT 5
23160: EQUAL
23161: IFFALSE 23171
// r := 0 ;
23163: LD_ADDR_VAR 0 15
23167: PUSH
23168: LD_INT 0
23170: ST_TO_ADDR
// for j = r to 5 do
23171: LD_ADDR_VAR 0 10
23175: PUSH
23176: DOUBLE
23177: LD_VAR 0 15
23181: DEC
23182: ST_TO_ADDR
23183: LD_INT 5
23185: PUSH
23186: FOR_TO
23187: IFFALSE 23303
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23189: LD_ADDR_VAR 0 11
23193: PUSH
23194: LD_VAR 0 13
23198: PPUSH
23199: CALL_OW 250
23203: PPUSH
23204: LD_VAR 0 10
23208: PPUSH
23209: LD_INT 2
23211: PPUSH
23212: CALL_OW 272
23216: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23217: LD_ADDR_VAR 0 12
23221: PUSH
23222: LD_VAR 0 13
23226: PPUSH
23227: CALL_OW 251
23231: PPUSH
23232: LD_VAR 0 10
23236: PPUSH
23237: LD_INT 2
23239: PPUSH
23240: CALL_OW 273
23244: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23245: LD_VAR 0 11
23249: PPUSH
23250: LD_VAR 0 12
23254: PPUSH
23255: CALL_OW 488
23259: IFFALSE 23278
23261: PUSH
23262: LD_VAR 0 11
23266: PPUSH
23267: LD_VAR 0 12
23271: PPUSH
23272: CALL_OW 428
23276: NOT
23277: AND
23278: IFFALSE 23301
// begin ComMoveXY ( tmp , _x , _y ) ;
23280: LD_VAR 0 13
23284: PPUSH
23285: LD_VAR 0 11
23289: PPUSH
23290: LD_VAR 0 12
23294: PPUSH
23295: CALL_OW 111
// break ;
23299: GO 23303
// end ; end ;
23301: GO 23186
23303: POP
23304: POP
// end ; end ;
23305: GO 22618
23307: POP
23308: POP
// end ;
23309: LD_VAR 0 8
23313: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23314: LD_INT 0
23316: PPUSH
// result := true ;
23317: LD_ADDR_VAR 0 3
23321: PUSH
23322: LD_INT 1
23324: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23325: LD_VAR 0 2
23329: PUSH
23330: LD_INT 24
23332: DOUBLE
23333: EQUAL
23334: IFTRUE 23344
23336: LD_INT 33
23338: DOUBLE
23339: EQUAL
23340: IFTRUE 23344
23342: GO 23369
23344: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23345: LD_ADDR_VAR 0 3
23349: PUSH
23350: LD_INT 32
23352: PPUSH
23353: LD_VAR 0 1
23357: PPUSH
23358: CALL_OW 321
23362: PUSH
23363: LD_INT 2
23365: EQUAL
23366: ST_TO_ADDR
23367: GO 23685
23369: LD_INT 20
23371: DOUBLE
23372: EQUAL
23373: IFTRUE 23377
23375: GO 23402
23377: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23378: LD_ADDR_VAR 0 3
23382: PUSH
23383: LD_INT 6
23385: PPUSH
23386: LD_VAR 0 1
23390: PPUSH
23391: CALL_OW 321
23395: PUSH
23396: LD_INT 2
23398: EQUAL
23399: ST_TO_ADDR
23400: GO 23685
23402: LD_INT 22
23404: DOUBLE
23405: EQUAL
23406: IFTRUE 23416
23408: LD_INT 36
23410: DOUBLE
23411: EQUAL
23412: IFTRUE 23416
23414: GO 23441
23416: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23417: LD_ADDR_VAR 0 3
23421: PUSH
23422: LD_INT 15
23424: PPUSH
23425: LD_VAR 0 1
23429: PPUSH
23430: CALL_OW 321
23434: PUSH
23435: LD_INT 2
23437: EQUAL
23438: ST_TO_ADDR
23439: GO 23685
23441: LD_INT 30
23443: DOUBLE
23444: EQUAL
23445: IFTRUE 23449
23447: GO 23474
23449: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23450: LD_ADDR_VAR 0 3
23454: PUSH
23455: LD_INT 20
23457: PPUSH
23458: LD_VAR 0 1
23462: PPUSH
23463: CALL_OW 321
23467: PUSH
23468: LD_INT 2
23470: EQUAL
23471: ST_TO_ADDR
23472: GO 23685
23474: LD_INT 28
23476: DOUBLE
23477: EQUAL
23478: IFTRUE 23488
23480: LD_INT 21
23482: DOUBLE
23483: EQUAL
23484: IFTRUE 23488
23486: GO 23513
23488: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23489: LD_ADDR_VAR 0 3
23493: PUSH
23494: LD_INT 21
23496: PPUSH
23497: LD_VAR 0 1
23501: PPUSH
23502: CALL_OW 321
23506: PUSH
23507: LD_INT 2
23509: EQUAL
23510: ST_TO_ADDR
23511: GO 23685
23513: LD_INT 16
23515: DOUBLE
23516: EQUAL
23517: IFTRUE 23521
23519: GO 23546
23521: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23522: LD_ADDR_VAR 0 3
23526: PUSH
23527: LD_INT 84
23529: PPUSH
23530: LD_VAR 0 1
23534: PPUSH
23535: CALL_OW 321
23539: PUSH
23540: LD_INT 2
23542: EQUAL
23543: ST_TO_ADDR
23544: GO 23685
23546: LD_INT 19
23548: DOUBLE
23549: EQUAL
23550: IFTRUE 23560
23552: LD_INT 23
23554: DOUBLE
23555: EQUAL
23556: IFTRUE 23560
23558: GO 23585
23560: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23561: LD_ADDR_VAR 0 3
23565: PUSH
23566: LD_INT 83
23568: PPUSH
23569: LD_VAR 0 1
23573: PPUSH
23574: CALL_OW 321
23578: PUSH
23579: LD_INT 2
23581: EQUAL
23582: ST_TO_ADDR
23583: GO 23685
23585: LD_INT 17
23587: DOUBLE
23588: EQUAL
23589: IFTRUE 23593
23591: GO 23618
23593: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23594: LD_ADDR_VAR 0 3
23598: PUSH
23599: LD_INT 39
23601: PPUSH
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL_OW 321
23611: PUSH
23612: LD_INT 2
23614: EQUAL
23615: ST_TO_ADDR
23616: GO 23685
23618: LD_INT 18
23620: DOUBLE
23621: EQUAL
23622: IFTRUE 23626
23624: GO 23651
23626: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23627: LD_ADDR_VAR 0 3
23631: PUSH
23632: LD_INT 40
23634: PPUSH
23635: LD_VAR 0 1
23639: PPUSH
23640: CALL_OW 321
23644: PUSH
23645: LD_INT 2
23647: EQUAL
23648: ST_TO_ADDR
23649: GO 23685
23651: LD_INT 27
23653: DOUBLE
23654: EQUAL
23655: IFTRUE 23659
23657: GO 23684
23659: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23660: LD_ADDR_VAR 0 3
23664: PUSH
23665: LD_INT 35
23667: PPUSH
23668: LD_VAR 0 1
23672: PPUSH
23673: CALL_OW 321
23677: PUSH
23678: LD_INT 2
23680: EQUAL
23681: ST_TO_ADDR
23682: GO 23685
23684: POP
// end ;
23685: LD_VAR 0 3
23689: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23690: LD_INT 0
23692: PPUSH
23693: PPUSH
23694: PPUSH
23695: PPUSH
23696: PPUSH
23697: PPUSH
23698: PPUSH
23699: PPUSH
23700: PPUSH
23701: PPUSH
23702: PPUSH
// result := false ;
23703: LD_ADDR_VAR 0 6
23707: PUSH
23708: LD_INT 0
23710: ST_TO_ADDR
// if btype = b_depot then
23711: LD_VAR 0 2
23715: PUSH
23716: LD_INT 0
23718: EQUAL
23719: IFFALSE 23731
// begin result := true ;
23721: LD_ADDR_VAR 0 6
23725: PUSH
23726: LD_INT 1
23728: ST_TO_ADDR
// exit ;
23729: GO 24585
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23731: LD_VAR 0 1
23735: NOT
23736: IFTRUE 23761
23738: PUSH
23739: LD_VAR 0 1
23743: PPUSH
23744: CALL_OW 266
23748: PUSH
23749: LD_INT 0
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: IN
23759: NOT
23760: OR
23761: IFTRUE 23770
23763: PUSH
23764: LD_VAR 0 2
23768: NOT
23769: OR
23770: IFTRUE 23806
23772: PUSH
23773: LD_VAR 0 5
23777: PUSH
23778: LD_INT 0
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: LD_INT 2
23786: PUSH
23787: LD_INT 3
23789: PUSH
23790: LD_INT 4
23792: PUSH
23793: LD_INT 5
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: IN
23804: NOT
23805: OR
23806: IFTRUE 23825
23808: PUSH
23809: LD_VAR 0 3
23813: PPUSH
23814: LD_VAR 0 4
23818: PPUSH
23819: CALL_OW 488
23823: NOT
23824: OR
23825: IFFALSE 23829
// exit ;
23827: GO 24585
// side := GetSide ( depot ) ;
23829: LD_ADDR_VAR 0 9
23833: PUSH
23834: LD_VAR 0 1
23838: PPUSH
23839: CALL_OW 255
23843: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23844: LD_VAR 0 9
23848: PPUSH
23849: LD_VAR 0 2
23853: PPUSH
23854: CALL 23314 0 2
23858: NOT
23859: IFFALSE 23863
// exit ;
23861: GO 24585
// pom := GetBase ( depot ) ;
23863: LD_ADDR_VAR 0 10
23867: PUSH
23868: LD_VAR 0 1
23872: PPUSH
23873: CALL_OW 274
23877: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23878: LD_ADDR_VAR 0 11
23882: PUSH
23883: LD_VAR 0 2
23887: PPUSH
23888: LD_VAR 0 1
23892: PPUSH
23893: CALL_OW 248
23897: PPUSH
23898: CALL_OW 450
23902: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23903: LD_VAR 0 10
23907: PPUSH
23908: LD_INT 1
23910: PPUSH
23911: CALL_OW 275
23915: PUSH
23916: LD_VAR 0 11
23920: PUSH
23921: LD_INT 1
23923: ARRAY
23924: GREATEREQUAL
23925: IFFALSE 23951
23927: PUSH
23928: LD_VAR 0 10
23932: PPUSH
23933: LD_INT 2
23935: PPUSH
23936: CALL_OW 275
23940: PUSH
23941: LD_VAR 0 11
23945: PUSH
23946: LD_INT 2
23948: ARRAY
23949: GREATEREQUAL
23950: AND
23951: IFFALSE 23977
23953: PUSH
23954: LD_VAR 0 10
23958: PPUSH
23959: LD_INT 3
23961: PPUSH
23962: CALL_OW 275
23966: PUSH
23967: LD_VAR 0 11
23971: PUSH
23972: LD_INT 3
23974: ARRAY
23975: GREATEREQUAL
23976: AND
23977: NOT
23978: IFFALSE 23982
// exit ;
23980: GO 24585
// if GetBType ( depot ) = b_depot then
23982: LD_VAR 0 1
23986: PPUSH
23987: CALL_OW 266
23991: PUSH
23992: LD_INT 0
23994: EQUAL
23995: IFFALSE 24007
// dist := 28 else
23997: LD_ADDR_VAR 0 14
24001: PUSH
24002: LD_INT 28
24004: ST_TO_ADDR
24005: GO 24015
// dist := 36 ;
24007: LD_ADDR_VAR 0 14
24011: PUSH
24012: LD_INT 36
24014: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24015: LD_VAR 0 1
24019: PPUSH
24020: LD_VAR 0 3
24024: PPUSH
24025: LD_VAR 0 4
24029: PPUSH
24030: CALL_OW 297
24034: PUSH
24035: LD_VAR 0 14
24039: GREATER
24040: IFFALSE 24044
// exit ;
24042: GO 24585
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24044: LD_ADDR_VAR 0 12
24048: PUSH
24049: LD_VAR 0 2
24053: PPUSH
24054: LD_VAR 0 3
24058: PPUSH
24059: LD_VAR 0 4
24063: PPUSH
24064: LD_VAR 0 5
24068: PPUSH
24069: LD_VAR 0 1
24073: PPUSH
24074: CALL_OW 248
24078: PPUSH
24079: LD_INT 0
24081: PPUSH
24082: CALL 24590 0 6
24086: ST_TO_ADDR
// if not hexes then
24087: LD_VAR 0 12
24091: NOT
24092: IFFALSE 24096
// exit ;
24094: GO 24585
// hex := GetHexInfo ( x , y ) ;
24096: LD_ADDR_VAR 0 15
24100: PUSH
24101: LD_VAR 0 3
24105: PPUSH
24106: LD_VAR 0 4
24110: PPUSH
24111: CALL_OW 546
24115: ST_TO_ADDR
// if hex [ 1 ] then
24116: LD_VAR 0 15
24120: PUSH
24121: LD_INT 1
24123: ARRAY
24124: IFFALSE 24128
// exit ;
24126: GO 24585
// height := hex [ 2 ] ;
24128: LD_ADDR_VAR 0 13
24132: PUSH
24133: LD_VAR 0 15
24137: PUSH
24138: LD_INT 2
24140: ARRAY
24141: ST_TO_ADDR
// for i = 1 to hexes do
24142: LD_ADDR_VAR 0 7
24146: PUSH
24147: DOUBLE
24148: LD_INT 1
24150: DEC
24151: ST_TO_ADDR
24152: LD_VAR 0 12
24156: PUSH
24157: FOR_TO
24158: IFFALSE 24502
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24160: LD_VAR 0 12
24164: PUSH
24165: LD_VAR 0 7
24169: ARRAY
24170: PUSH
24171: LD_INT 1
24173: ARRAY
24174: PPUSH
24175: LD_VAR 0 12
24179: PUSH
24180: LD_VAR 0 7
24184: ARRAY
24185: PUSH
24186: LD_INT 2
24188: ARRAY
24189: PPUSH
24190: CALL_OW 488
24194: NOT
24195: IFTRUE 24237
24197: PUSH
24198: LD_VAR 0 12
24202: PUSH
24203: LD_VAR 0 7
24207: ARRAY
24208: PUSH
24209: LD_INT 1
24211: ARRAY
24212: PPUSH
24213: LD_VAR 0 12
24217: PUSH
24218: LD_VAR 0 7
24222: ARRAY
24223: PUSH
24224: LD_INT 2
24226: ARRAY
24227: PPUSH
24228: CALL_OW 428
24232: PUSH
24233: LD_INT 0
24235: GREATER
24236: OR
24237: IFTRUE 24275
24239: PUSH
24240: LD_VAR 0 12
24244: PUSH
24245: LD_VAR 0 7
24249: ARRAY
24250: PUSH
24251: LD_INT 1
24253: ARRAY
24254: PPUSH
24255: LD_VAR 0 12
24259: PUSH
24260: LD_VAR 0 7
24264: ARRAY
24265: PUSH
24266: LD_INT 2
24268: ARRAY
24269: PPUSH
24270: CALL_OW 351
24274: OR
24275: IFFALSE 24281
// exit ;
24277: POP
24278: POP
24279: GO 24585
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24281: LD_ADDR_VAR 0 8
24285: PUSH
24286: LD_VAR 0 12
24290: PUSH
24291: LD_VAR 0 7
24295: ARRAY
24296: PUSH
24297: LD_INT 1
24299: ARRAY
24300: PPUSH
24301: LD_VAR 0 12
24305: PUSH
24306: LD_VAR 0 7
24310: ARRAY
24311: PUSH
24312: LD_INT 2
24314: ARRAY
24315: PPUSH
24316: CALL_OW 546
24320: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24321: LD_VAR 0 8
24325: PUSH
24326: LD_INT 1
24328: ARRAY
24329: IFTRUE 24351
24331: PUSH
24332: LD_VAR 0 8
24336: PUSH
24337: LD_INT 2
24339: ARRAY
24340: PUSH
24341: LD_VAR 0 13
24345: PUSH
24346: LD_INT 2
24348: PLUS
24349: GREATER
24350: OR
24351: IFTRUE 24373
24353: PUSH
24354: LD_VAR 0 8
24358: PUSH
24359: LD_INT 2
24361: ARRAY
24362: PUSH
24363: LD_VAR 0 13
24367: PUSH
24368: LD_INT 2
24370: MINUS
24371: LESS
24372: OR
24373: IFTRUE 24441
24375: PUSH
24376: LD_VAR 0 8
24380: PUSH
24381: LD_INT 3
24383: ARRAY
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: LD_INT 8
24390: PUSH
24391: LD_INT 9
24393: PUSH
24394: LD_INT 10
24396: PUSH
24397: LD_INT 11
24399: PUSH
24400: LD_INT 12
24402: PUSH
24403: LD_INT 13
24405: PUSH
24406: LD_INT 16
24408: PUSH
24409: LD_INT 17
24411: PUSH
24412: LD_INT 18
24414: PUSH
24415: LD_INT 19
24417: PUSH
24418: LD_INT 20
24420: PUSH
24421: LD_INT 21
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: IN
24439: NOT
24440: OR
24441: IFTRUE 24454
24443: PUSH
24444: LD_VAR 0 8
24448: PUSH
24449: LD_INT 5
24451: ARRAY
24452: NOT
24453: OR
24454: IFTRUE 24494
24456: PUSH
24457: LD_VAR 0 8
24461: PUSH
24462: LD_INT 6
24464: ARRAY
24465: PUSH
24466: LD_INT 1
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: LD_INT 7
24474: PUSH
24475: LD_INT 9
24477: PUSH
24478: LD_INT 10
24480: PUSH
24481: LD_INT 11
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: IN
24492: NOT
24493: OR
24494: IFFALSE 24500
// exit ;
24496: POP
24497: POP
24498: GO 24585
// end ;
24500: GO 24157
24502: POP
24503: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24504: LD_VAR 0 9
24508: PPUSH
24509: LD_VAR 0 3
24513: PPUSH
24514: LD_VAR 0 4
24518: PPUSH
24519: LD_INT 20
24521: PPUSH
24522: CALL 16404 0 4
24526: PUSH
24527: LD_INT 4
24529: ARRAY
24530: IFFALSE 24534
// exit ;
24532: GO 24585
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24534: LD_VAR 0 2
24538: PUSH
24539: LD_INT 29
24541: PUSH
24542: LD_INT 30
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: IN
24549: IFFALSE 24573
24551: PUSH
24552: LD_VAR 0 3
24556: PPUSH
24557: LD_VAR 0 4
24561: PPUSH
24562: LD_VAR 0 9
24566: PPUSH
24567: CALL_OW 440
24571: NOT
24572: AND
24573: IFFALSE 24577
// exit ;
24575: GO 24585
// result := true ;
24577: LD_ADDR_VAR 0 6
24581: PUSH
24582: LD_INT 1
24584: ST_TO_ADDR
// end ;
24585: LD_VAR 0 6
24589: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24590: LD_INT 0
24592: PPUSH
24593: PPUSH
24594: PPUSH
24595: PPUSH
24596: PPUSH
24597: PPUSH
24598: PPUSH
24599: PPUSH
24600: PPUSH
24601: PPUSH
24602: PPUSH
24603: PPUSH
24604: PPUSH
24605: PPUSH
24606: PPUSH
24607: PPUSH
24608: PPUSH
24609: PPUSH
24610: PPUSH
24611: PPUSH
24612: PPUSH
24613: PPUSH
24614: PPUSH
24615: PPUSH
24616: PPUSH
24617: PPUSH
24618: PPUSH
24619: PPUSH
24620: PPUSH
24621: PPUSH
24622: PPUSH
24623: PPUSH
24624: PPUSH
24625: PPUSH
24626: PPUSH
24627: PPUSH
24628: PPUSH
24629: PPUSH
24630: PPUSH
24631: PPUSH
24632: PPUSH
24633: PPUSH
24634: PPUSH
24635: PPUSH
24636: PPUSH
24637: PPUSH
24638: PPUSH
24639: PPUSH
24640: PPUSH
24641: PPUSH
24642: PPUSH
24643: PPUSH
24644: PPUSH
24645: PPUSH
24646: PPUSH
24647: PPUSH
24648: PPUSH
24649: PPUSH
// result = [ ] ;
24650: LD_ADDR_VAR 0 7
24654: PUSH
24655: EMPTY
24656: ST_TO_ADDR
// temp_list = [ ] ;
24657: LD_ADDR_VAR 0 9
24661: PUSH
24662: EMPTY
24663: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24664: LD_VAR 0 4
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: LD_INT 3
24680: PUSH
24681: LD_INT 4
24683: PUSH
24684: LD_INT 5
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: IN
24695: NOT
24696: IFTRUE 24739
24698: PUSH
24699: LD_VAR 0 1
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: LD_INT 1
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: IN
24714: IFFALSE 24738
24716: PUSH
24717: LD_VAR 0 5
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: LD_INT 2
24727: PUSH
24728: LD_INT 3
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: LIST
24735: IN
24736: NOT
24737: AND
24738: OR
24739: IFFALSE 24743
// exit ;
24741: GO 43142
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24743: LD_VAR 0 1
24747: PUSH
24748: LD_INT 6
24750: PUSH
24751: LD_INT 7
24753: PUSH
24754: LD_INT 8
24756: PUSH
24757: LD_INT 13
24759: PUSH
24760: LD_INT 12
24762: PUSH
24763: LD_INT 15
24765: PUSH
24766: LD_INT 11
24768: PUSH
24769: LD_INT 14
24771: PUSH
24772: LD_INT 10
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: IN
24786: IFFALSE 24796
// btype = b_lab ;
24788: LD_ADDR_VAR 0 1
24792: PUSH
24793: LD_INT 6
24795: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24796: LD_VAR 0 6
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: LD_INT 2
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: LIST
24814: IN
24815: NOT
24816: IFTRUE 24884
24818: PUSH
24819: LD_VAR 0 1
24823: PUSH
24824: LD_INT 0
24826: PUSH
24827: LD_INT 1
24829: PUSH
24830: LD_INT 2
24832: PUSH
24833: LD_INT 3
24835: PUSH
24836: LD_INT 6
24838: PUSH
24839: LD_INT 36
24841: PUSH
24842: LD_INT 4
24844: PUSH
24845: LD_INT 5
24847: PUSH
24848: LD_INT 31
24850: PUSH
24851: LD_INT 32
24853: PUSH
24854: LD_INT 33
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: IN
24870: NOT
24871: IFFALSE 24883
24873: PUSH
24874: LD_VAR 0 6
24878: PUSH
24879: LD_INT 1
24881: EQUAL
24882: AND
24883: OR
24884: IFTRUE 24916
24886: PUSH
24887: LD_VAR 0 1
24891: PUSH
24892: LD_INT 2
24894: PUSH
24895: LD_INT 3
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: IN
24902: NOT
24903: IFFALSE 24915
24905: PUSH
24906: LD_VAR 0 6
24910: PUSH
24911: LD_INT 2
24913: EQUAL
24914: AND
24915: OR
24916: IFFALSE 24926
// mode = 0 ;
24918: LD_ADDR_VAR 0 6
24922: PUSH
24923: LD_INT 0
24925: ST_TO_ADDR
// case mode of 0 :
24926: LD_VAR 0 6
24930: PUSH
24931: LD_INT 0
24933: DOUBLE
24934: EQUAL
24935: IFTRUE 24939
24937: GO 36392
24939: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24940: LD_ADDR_VAR 0 11
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: LD_INT 0
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 0
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 1
24968: PUSH
24969: LD_INT 0
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: LD_INT 1
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 0
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 1
24998: NEG
24999: PUSH
25000: LD_INT 0
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 1
25009: NEG
25010: PUSH
25011: LD_INT 1
25013: NEG
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 1
25021: NEG
25022: PUSH
25023: LD_INT 2
25025: NEG
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: LD_INT 2
25036: NEG
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 1
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: PUSH
25056: LD_INT 2
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 0
25065: PUSH
25066: LD_INT 2
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: NEG
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 1
25086: PUSH
25087: LD_INT 3
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 0
25096: PUSH
25097: LD_INT 3
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 1
25106: NEG
25107: PUSH
25108: LD_INT 2
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25133: LD_ADDR_VAR 0 12
25137: PUSH
25138: LD_INT 0
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: LD_INT 1
25153: NEG
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 1
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 1
25171: PUSH
25172: LD_INT 1
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 0
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 1
25191: NEG
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 1
25202: NEG
25203: PUSH
25204: LD_INT 1
25206: NEG
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: PUSH
25215: LD_INT 1
25217: NEG
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 2
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 2
25235: PUSH
25236: LD_INT 1
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 1
25245: NEG
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 2
25256: NEG
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 2
25267: NEG
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: NEG
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 3
25290: NEG
25291: PUSH
25292: LD_INT 0
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 3
25301: NEG
25302: PUSH
25303: LD_INT 1
25305: NEG
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25329: LD_ADDR_VAR 0 13
25333: PUSH
25334: LD_INT 0
25336: PUSH
25337: LD_INT 0
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: LD_INT 1
25349: NEG
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: PUSH
25358: LD_INT 0
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: LD_INT 1
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: LD_INT 0
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 1
25398: NEG
25399: PUSH
25400: LD_INT 1
25402: NEG
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 1
25410: NEG
25411: PUSH
25412: LD_INT 2
25414: NEG
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 2
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 2
25432: PUSH
25433: LD_INT 2
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: LD_INT 2
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 2
25452: NEG
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 2
25464: NEG
25465: PUSH
25466: LD_INT 2
25468: NEG
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 2
25476: NEG
25477: PUSH
25478: LD_INT 3
25480: NEG
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 3
25488: NEG
25489: PUSH
25490: LD_INT 2
25492: NEG
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 3
25500: NEG
25501: PUSH
25502: LD_INT 3
25504: NEG
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25528: LD_ADDR_VAR 0 14
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: LD_INT 1
25548: NEG
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 1
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: PUSH
25567: LD_INT 1
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 1
25597: NEG
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 1
25609: NEG
25610: PUSH
25611: LD_INT 2
25613: NEG
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: LD_INT 2
25624: NEG
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: LD_INT 1
25635: NEG
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: LD_INT 2
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: LD_INT 2
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 1
25674: NEG
25675: PUSH
25676: LD_INT 3
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: LD_INT 3
25689: NEG
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 1
25697: PUSH
25698: LD_INT 2
25700: NEG
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25724: LD_ADDR_VAR 0 15
25728: PUSH
25729: LD_INT 0
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: LD_INT 1
25744: NEG
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 1
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 0
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: NEG
25783: PUSH
25784: LD_INT 0
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 1
25793: NEG
25794: PUSH
25795: LD_INT 1
25797: NEG
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: LD_INT 1
25808: NEG
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 2
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 2
25826: PUSH
25827: LD_INT 1
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 1
25836: NEG
25837: PUSH
25838: LD_INT 1
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 2
25847: NEG
25848: PUSH
25849: LD_INT 0
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 2
25858: NEG
25859: PUSH
25860: LD_INT 1
25862: NEG
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 2
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 3
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 3
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25917: LD_ADDR_VAR 0 16
25921: PUSH
25922: LD_INT 0
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: LD_INT 1
25937: NEG
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 1
25955: PUSH
25956: LD_INT 1
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: LD_INT 1
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: NEG
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: NEG
25999: PUSH
26000: LD_INT 2
26002: NEG
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 2
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 2
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 1
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 2
26040: NEG
26041: PUSH
26042: LD_INT 1
26044: NEG
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 2
26052: NEG
26053: PUSH
26054: LD_INT 2
26056: NEG
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 3
26064: PUSH
26065: LD_INT 2
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 3
26074: PUSH
26075: LD_INT 3
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: LD_INT 3
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26110: LD_ADDR_VAR 0 17
26114: PUSH
26115: LD_INT 0
26117: PUSH
26118: LD_INT 0
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: LD_INT 1
26130: NEG
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 0
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 1
26168: NEG
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 1
26179: NEG
26180: PUSH
26181: LD_INT 1
26183: NEG
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: LD_INT 2
26195: NEG
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: LD_INT 2
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: PUSH
26215: LD_INT 1
26217: NEG
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 2
26225: PUSH
26226: LD_INT 0
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: LD_INT 1
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 2
26286: NEG
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 2
26297: NEG
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 2
26309: NEG
26310: PUSH
26311: LD_INT 2
26313: NEG
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26340: LD_ADDR_VAR 0 18
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 0
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: PUSH
26369: LD_INT 0
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: LD_INT 1
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: NEG
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: NEG
26410: PUSH
26411: LD_INT 1
26413: NEG
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: LD_INT 2
26425: NEG
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: LD_INT 2
26436: NEG
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 1
26444: PUSH
26445: LD_INT 1
26447: NEG
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 2
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 2
26465: PUSH
26466: LD_INT 1
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 1
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 0
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 1
26505: NEG
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 2
26516: NEG
26517: PUSH
26518: LD_INT 0
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 2
26527: NEG
26528: PUSH
26529: LD_INT 1
26531: NEG
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 2
26539: NEG
26540: PUSH
26541: LD_INT 2
26543: NEG
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26570: LD_ADDR_VAR 0 19
26574: PUSH
26575: LD_INT 0
26577: PUSH
26578: LD_INT 0
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 0
26587: PUSH
26588: LD_INT 1
26590: NEG
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 1
26598: PUSH
26599: LD_INT 0
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 1
26608: PUSH
26609: LD_INT 1
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 0
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 1
26628: NEG
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 1
26639: NEG
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 1
26651: NEG
26652: PUSH
26653: LD_INT 2
26655: NEG
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: LD_INT 2
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 2
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 2
26695: PUSH
26696: LD_INT 1
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: LD_INT 2
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 1
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: LD_INT 2
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: NEG
26736: PUSH
26737: LD_INT 1
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 2
26746: NEG
26747: PUSH
26748: LD_INT 0
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 2
26757: NEG
26758: PUSH
26759: LD_INT 1
26761: NEG
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 2
26769: NEG
26770: PUSH
26771: LD_INT 2
26773: NEG
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26800: LD_ADDR_VAR 0 20
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 0
26817: PUSH
26818: LD_INT 1
26820: NEG
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: LD_INT 0
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 0
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 1
26858: NEG
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 1
26869: NEG
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: LD_INT 2
26885: NEG
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: LD_INT 2
26896: NEG
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: LD_INT 1
26907: NEG
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: LD_INT 0
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 2
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 2
26935: PUSH
26936: LD_INT 2
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: LD_INT 2
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 0
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 1
26965: NEG
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 2
26976: NEG
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 2
26987: NEG
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 2
26999: NEG
27000: PUSH
27001: LD_INT 2
27003: NEG
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27030: LD_ADDR_VAR 0 21
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: LD_INT 1
27050: NEG
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: PUSH
27059: LD_INT 0
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 1
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 0
27078: PUSH
27079: LD_INT 1
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 1
27088: NEG
27089: PUSH
27090: LD_INT 0
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 1
27099: NEG
27100: PUSH
27101: LD_INT 1
27103: NEG
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 1
27111: NEG
27112: PUSH
27113: LD_INT 2
27115: NEG
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: LD_INT 2
27126: NEG
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: PUSH
27135: LD_INT 1
27137: NEG
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: LD_INT 0
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 2
27165: PUSH
27166: LD_INT 2
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: LD_INT 2
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: NEG
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 2
27206: NEG
27207: PUSH
27208: LD_INT 0
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 2
27217: NEG
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 2
27229: NEG
27230: PUSH
27231: LD_INT 2
27233: NEG
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27260: LD_ADDR_VAR 0 22
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 0
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 0
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 1
27318: NEG
27319: PUSH
27320: LD_INT 0
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PUSH
27331: LD_INT 1
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: LD_INT 2
27345: NEG
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 0
27353: PUSH
27354: LD_INT 2
27356: NEG
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: LD_INT 1
27367: NEG
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: LD_INT 0
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 2
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 2
27395: PUSH
27396: LD_INT 2
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 1
27405: PUSH
27406: LD_INT 2
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: LD_INT 2
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: NEG
27426: PUSH
27427: LD_INT 1
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 2
27436: NEG
27437: PUSH
27438: LD_INT 0
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 2
27447: NEG
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 2
27459: NEG
27460: PUSH
27461: LD_INT 2
27463: NEG
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27490: LD_ADDR_VAR 0 23
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 0
27507: PUSH
27508: LD_INT 1
27510: NEG
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: PUSH
27519: LD_INT 0
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 1
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 0
27538: PUSH
27539: LD_INT 1
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 1
27548: NEG
27549: PUSH
27550: LD_INT 0
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 1
27559: NEG
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 1
27571: NEG
27572: PUSH
27573: LD_INT 2
27575: NEG
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 0
27583: PUSH
27584: LD_INT 2
27586: NEG
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: LD_INT 1
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: PUSH
27606: LD_INT 0
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 2
27625: PUSH
27626: LD_INT 2
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: LD_INT 2
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 1
27655: NEG
27656: PUSH
27657: LD_INT 1
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 2
27666: NEG
27667: PUSH
27668: LD_INT 0
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 2
27677: NEG
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 2
27689: NEG
27690: PUSH
27691: LD_INT 2
27693: NEG
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 2
27701: NEG
27702: PUSH
27703: LD_INT 3
27705: NEG
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 1
27713: NEG
27714: PUSH
27715: LD_INT 3
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: LD_INT 2
27728: NEG
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 2
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27770: LD_ADDR_VAR 0 24
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 0
27787: PUSH
27788: LD_INT 1
27790: NEG
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 1
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 0
27818: PUSH
27819: LD_INT 1
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 1
27828: NEG
27829: PUSH
27830: LD_INT 0
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: LD_INT 1
27843: NEG
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 1
27851: NEG
27852: PUSH
27853: LD_INT 2
27855: NEG
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: LD_INT 2
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 2
27885: PUSH
27886: LD_INT 0
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: LD_INT 1
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: LD_INT 2
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 0
27925: PUSH
27926: LD_INT 2
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 1
27935: NEG
27936: PUSH
27937: LD_INT 1
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 2
27946: NEG
27947: PUSH
27948: LD_INT 0
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 2
27957: NEG
27958: PUSH
27959: LD_INT 1
27961: NEG
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 2
27969: NEG
27970: PUSH
27971: LD_INT 2
27973: NEG
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: LD_INT 2
27984: NEG
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 3
28003: PUSH
28004: LD_INT 1
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 3
28013: PUSH
28014: LD_INT 2
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28046: LD_ADDR_VAR 0 25
28050: PUSH
28051: LD_INT 0
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: LD_INT 1
28066: NEG
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: LD_INT 1
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: LD_INT 0
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: LD_INT 1
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 1
28127: NEG
28128: PUSH
28129: LD_INT 2
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: LD_INT 2
28142: NEG
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 2
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 2
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 2
28181: PUSH
28182: LD_INT 2
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: LD_INT 2
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: LD_INT 2
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 1
28211: NEG
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 2
28222: NEG
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 2
28233: NEG
28234: PUSH
28235: LD_INT 1
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 2
28245: NEG
28246: PUSH
28247: LD_INT 2
28249: NEG
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 3
28257: PUSH
28258: LD_INT 1
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 3
28267: PUSH
28268: LD_INT 2
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 2
28277: PUSH
28278: LD_INT 3
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 1
28287: PUSH
28288: LD_INT 3
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28320: LD_ADDR_VAR 0 26
28324: PUSH
28325: LD_INT 0
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 0
28337: PUSH
28338: LD_INT 1
28340: NEG
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: LD_INT 0
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: PUSH
28359: LD_INT 1
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: LD_INT 1
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: LD_INT 0
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: LD_INT 1
28393: NEG
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 1
28401: NEG
28402: PUSH
28403: LD_INT 2
28405: NEG
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 0
28413: PUSH
28414: LD_INT 2
28416: NEG
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: LD_INT 1
28427: NEG
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 2
28435: PUSH
28436: LD_INT 0
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 2
28455: PUSH
28456: LD_INT 2
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: PUSH
28466: LD_INT 2
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 0
28475: PUSH
28476: LD_INT 2
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: LD_INT 1
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 2
28496: NEG
28497: PUSH
28498: LD_INT 0
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 2
28507: NEG
28508: PUSH
28509: LD_INT 1
28511: NEG
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 2
28519: NEG
28520: PUSH
28521: LD_INT 2
28523: NEG
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 2
28531: PUSH
28532: LD_INT 3
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: LD_INT 3
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: LD_INT 2
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 2
28562: NEG
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28596: LD_ADDR_VAR 0 27
28600: PUSH
28601: LD_INT 0
28603: PUSH
28604: LD_INT 0
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: LD_INT 1
28616: NEG
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 1
28624: PUSH
28625: LD_INT 0
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: LD_INT 1
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 0
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 1
28654: NEG
28655: PUSH
28656: LD_INT 0
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 1
28665: NEG
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: NEG
28678: PUSH
28679: LD_INT 2
28681: NEG
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 0
28689: PUSH
28690: LD_INT 2
28692: NEG
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 1
28700: PUSH
28701: LD_INT 1
28703: NEG
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 2
28711: PUSH
28712: LD_INT 0
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 2
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 2
28731: PUSH
28732: LD_INT 2
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 1
28741: PUSH
28742: LD_INT 2
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: LD_INT 2
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 1
28761: NEG
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 2
28772: NEG
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 2
28783: NEG
28784: PUSH
28785: LD_INT 1
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 2
28795: NEG
28796: PUSH
28797: LD_INT 2
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 2
28818: NEG
28819: PUSH
28820: LD_INT 1
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 3
28829: NEG
28830: PUSH
28831: LD_INT 1
28833: NEG
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 3
28841: NEG
28842: PUSH
28843: LD_INT 2
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28876: LD_ADDR_VAR 0 28
28880: PUSH
28881: LD_INT 0
28883: PUSH
28884: LD_INT 0
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: LD_INT 1
28896: NEG
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: PUSH
28915: LD_INT 1
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 1
28945: NEG
28946: PUSH
28947: LD_INT 1
28949: NEG
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: LD_INT 2
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 0
28969: PUSH
28970: LD_INT 2
28972: NEG
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 1
28980: PUSH
28981: LD_INT 1
28983: NEG
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: LD_INT 0
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: LD_INT 1
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 2
29011: PUSH
29012: LD_INT 2
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: LD_INT 2
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 0
29031: PUSH
29032: LD_INT 2
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: LD_INT 1
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: NEG
29053: PUSH
29054: LD_INT 0
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 2
29063: NEG
29064: PUSH
29065: LD_INT 1
29067: NEG
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 2
29075: NEG
29076: PUSH
29077: LD_INT 2
29079: NEG
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 2
29087: NEG
29088: PUSH
29089: LD_INT 3
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: LD_INT 3
29103: NEG
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 3
29111: NEG
29112: PUSH
29113: LD_INT 1
29115: NEG
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 3
29123: NEG
29124: PUSH
29125: LD_INT 2
29127: NEG
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29158: LD_ADDR_VAR 0 29
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: LD_INT 0
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: LD_INT 1
29178: NEG
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 1
29186: PUSH
29187: LD_INT 0
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 1
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 0
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 1
29216: NEG
29217: PUSH
29218: LD_INT 0
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 1
29227: NEG
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 1
29239: NEG
29240: PUSH
29241: LD_INT 2
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: LD_INT 2
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 1
29262: PUSH
29263: LD_INT 1
29265: NEG
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 2
29273: PUSH
29274: LD_INT 0
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 2
29283: PUSH
29284: LD_INT 1
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 1
29293: PUSH
29294: LD_INT 2
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 0
29303: PUSH
29304: LD_INT 2
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 1
29313: NEG
29314: PUSH
29315: LD_INT 1
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 2
29324: NEG
29325: PUSH
29326: LD_INT 1
29328: NEG
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 2
29336: NEG
29337: PUSH
29338: LD_INT 2
29340: NEG
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 2
29348: NEG
29349: PUSH
29350: LD_INT 3
29352: NEG
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 2
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 3
29371: PUSH
29372: LD_INT 1
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: LD_INT 3
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 1
29391: NEG
29392: PUSH
29393: LD_INT 2
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 3
29402: NEG
29403: PUSH
29404: LD_INT 2
29406: NEG
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29437: LD_ADDR_VAR 0 30
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: LD_INT 0
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: LD_INT 1
29457: NEG
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: LD_INT 0
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 0
29485: PUSH
29486: LD_INT 1
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 1
29495: NEG
29496: PUSH
29497: LD_INT 0
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 1
29506: NEG
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 1
29518: NEG
29519: PUSH
29520: LD_INT 2
29522: NEG
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 0
29530: PUSH
29531: LD_INT 2
29533: NEG
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 1
29541: PUSH
29542: LD_INT 1
29544: NEG
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 2
29552: PUSH
29553: LD_INT 0
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 2
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 2
29572: PUSH
29573: LD_INT 2
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: LD_INT 2
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 1
29592: NEG
29593: PUSH
29594: LD_INT 1
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 2
29603: NEG
29604: PUSH
29605: LD_INT 0
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 2
29614: NEG
29615: PUSH
29616: LD_INT 1
29618: NEG
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 1
29626: NEG
29627: PUSH
29628: LD_INT 3
29630: NEG
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 1
29638: PUSH
29639: LD_INT 2
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 3
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 2
29659: PUSH
29660: LD_INT 3
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 2
29669: NEG
29670: PUSH
29671: LD_INT 1
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 3
29680: NEG
29681: PUSH
29682: LD_INT 1
29684: NEG
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29715: LD_ADDR_VAR 0 31
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 0
29732: PUSH
29733: LD_INT 1
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: PUSH
29754: LD_INT 1
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 0
29763: PUSH
29764: LD_INT 1
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 1
29773: NEG
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 1
29784: NEG
29785: PUSH
29786: LD_INT 1
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 1
29796: NEG
29797: PUSH
29798: LD_INT 2
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: LD_INT 1
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: LD_INT 0
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: LD_INT 1
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: LD_INT 2
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: LD_INT 2
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 0
29859: PUSH
29860: LD_INT 2
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: LD_INT 1
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 2
29880: NEG
29881: PUSH
29882: LD_INT 1
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 2
29892: NEG
29893: PUSH
29894: LD_INT 2
29896: NEG
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 2
29904: NEG
29905: PUSH
29906: LD_INT 3
29908: NEG
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 2
29916: PUSH
29917: LD_INT 1
29919: NEG
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 3
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: LD_INT 3
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: LD_INT 2
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 3
29958: NEG
29959: PUSH
29960: LD_INT 2
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29993: LD_ADDR_VAR 0 32
29997: PUSH
29998: LD_INT 0
30000: PUSH
30001: LD_INT 0
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: LD_INT 1
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 1
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 0
30041: PUSH
30042: LD_INT 1
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 1
30051: NEG
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 1
30062: NEG
30063: PUSH
30064: LD_INT 1
30066: NEG
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 1
30074: NEG
30075: PUSH
30076: LD_INT 2
30078: NEG
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: LD_INT 2
30089: NEG
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 1
30097: PUSH
30098: LD_INT 1
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 2
30108: PUSH
30109: LD_INT 1
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 2
30118: PUSH
30119: LD_INT 2
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 1
30128: PUSH
30129: LD_INT 2
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: LD_INT 2
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: NEG
30149: PUSH
30150: LD_INT 1
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 2
30159: NEG
30160: PUSH
30161: LD_INT 0
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 2
30170: NEG
30171: PUSH
30172: LD_INT 1
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 1
30182: NEG
30183: PUSH
30184: LD_INT 3
30186: NEG
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 1
30194: PUSH
30195: LD_INT 2
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 3
30205: PUSH
30206: LD_INT 2
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 2
30215: PUSH
30216: LD_INT 3
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 2
30225: NEG
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 3
30236: NEG
30237: PUSH
30238: LD_INT 1
30240: NEG
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30271: LD_ADDR_VAR 0 33
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 1
30309: PUSH
30310: LD_INT 1
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 0
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PUSH
30331: LD_INT 0
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 1
30340: NEG
30341: PUSH
30342: LD_INT 1
30344: NEG
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: NEG
30353: PUSH
30354: LD_INT 2
30356: NEG
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: LD_INT 1
30367: NEG
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 2
30375: PUSH
30376: LD_INT 0
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 2
30385: PUSH
30386: LD_INT 1
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 1
30395: PUSH
30396: LD_INT 2
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 0
30405: PUSH
30406: LD_INT 2
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 1
30415: NEG
30416: PUSH
30417: LD_INT 1
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 2
30426: NEG
30427: PUSH
30428: LD_INT 0
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 2
30437: NEG
30438: PUSH
30439: LD_INT 1
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 2
30449: NEG
30450: PUSH
30451: LD_INT 2
30453: NEG
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 2
30461: NEG
30462: PUSH
30463: LD_INT 3
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 2
30473: PUSH
30474: LD_INT 1
30476: NEG
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 3
30484: PUSH
30485: LD_INT 1
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: LD_INT 3
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 1
30504: NEG
30505: PUSH
30506: LD_INT 2
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 3
30515: NEG
30516: PUSH
30517: LD_INT 2
30519: NEG
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30550: LD_ADDR_VAR 0 34
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 0
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 1
30578: PUSH
30579: LD_INT 0
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 1
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 0
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 1
30608: NEG
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 1
30619: NEG
30620: PUSH
30621: LD_INT 1
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 1
30631: NEG
30632: PUSH
30633: LD_INT 2
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 0
30643: PUSH
30644: LD_INT 2
30646: NEG
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: LD_INT 1
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 2
30665: PUSH
30666: LD_INT 1
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 2
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: LD_INT 2
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 1
30695: NEG
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 2
30706: NEG
30707: PUSH
30708: LD_INT 0
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 2
30717: NEG
30718: PUSH
30719: LD_INT 1
30721: NEG
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 2
30729: NEG
30730: PUSH
30731: LD_INT 2
30733: NEG
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: LD_INT 3
30745: NEG
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: LD_INT 2
30756: NEG
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 3
30764: PUSH
30765: LD_INT 2
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 2
30774: PUSH
30775: LD_INT 3
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 2
30784: NEG
30785: PUSH
30786: LD_INT 1
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 3
30795: NEG
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30830: LD_ADDR_VAR 0 35
30834: PUSH
30835: LD_INT 0
30837: PUSH
30838: LD_INT 0
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: LD_INT 1
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: LD_INT 0
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 1
30868: PUSH
30869: LD_INT 1
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 0
30878: PUSH
30879: LD_INT 1
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 1
30888: NEG
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 1
30899: NEG
30900: PUSH
30901: LD_INT 1
30903: NEG
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 2
30911: PUSH
30912: LD_INT 1
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 2
30921: NEG
30922: PUSH
30923: LD_INT 1
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30942: LD_ADDR_VAR 0 36
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 0
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 1
30970: PUSH
30971: LD_INT 0
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: LD_INT 1
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 0
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 1
31000: NEG
31001: PUSH
31002: LD_INT 0
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 1
31011: NEG
31012: PUSH
31013: LD_INT 1
31015: NEG
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 1
31023: NEG
31024: PUSH
31025: LD_INT 2
31027: NEG
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 1
31035: PUSH
31036: LD_INT 2
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31054: LD_ADDR_VAR 0 37
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 0
31071: PUSH
31072: LD_INT 1
31074: NEG
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 1
31082: PUSH
31083: LD_INT 0
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: LD_INT 1
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 1
31123: NEG
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: LD_INT 1
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31166: LD_ADDR_VAR 0 38
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: LD_INT 0
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 0
31183: PUSH
31184: LD_INT 1
31186: NEG
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 1
31194: PUSH
31195: LD_INT 0
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 1
31204: PUSH
31205: LD_INT 1
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 0
31214: PUSH
31215: LD_INT 1
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 1
31224: NEG
31225: PUSH
31226: LD_INT 0
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 1
31235: NEG
31236: PUSH
31237: LD_INT 1
31239: NEG
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 2
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 2
31257: NEG
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31278: LD_ADDR_VAR 0 39
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: LD_INT 0
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 0
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 1
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: LD_INT 1
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 0
31326: PUSH
31327: LD_INT 1
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 1
31336: NEG
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 1
31347: NEG
31348: PUSH
31349: LD_INT 1
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 1
31359: NEG
31360: PUSH
31361: LD_INT 2
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 1
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31390: LD_ADDR_VAR 0 40
31394: PUSH
31395: LD_INT 0
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 0
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 0
31438: PUSH
31439: LD_INT 1
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 1
31459: NEG
31460: PUSH
31461: LD_INT 1
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 1
31482: NEG
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31502: LD_ADDR_VAR 0 41
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: LD_INT 0
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: LD_INT 1
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: LD_INT 0
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 1
31560: NEG
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 1
31583: NEG
31584: PUSH
31585: LD_INT 2
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 1
31595: PUSH
31596: LD_INT 1
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 2
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 2
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: LD_INT 2
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 2
31657: NEG
31658: PUSH
31659: LD_INT 0
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 2
31668: NEG
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 2
31680: NEG
31681: PUSH
31682: LD_INT 2
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 2
31692: NEG
31693: PUSH
31694: LD_INT 3
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 2
31704: PUSH
31705: LD_INT 1
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 3
31715: PUSH
31716: LD_INT 0
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 3
31725: PUSH
31726: LD_INT 1
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 3
31735: PUSH
31736: LD_INT 2
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 3
31745: PUSH
31746: LD_INT 3
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: LD_INT 3
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 2
31765: NEG
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 3
31776: NEG
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 3
31787: NEG
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 3
31799: NEG
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 3
31811: NEG
31812: PUSH
31813: LD_INT 3
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31852: LD_ADDR_VAR 0 42
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 1
31880: PUSH
31881: LD_INT 0
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: LD_INT 1
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: LD_INT 1
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 1
31910: NEG
31911: PUSH
31912: LD_INT 0
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: LD_INT 1
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: LD_INT 2
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: LD_INT 1
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 2
31967: PUSH
31968: LD_INT 1
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 2
31977: PUSH
31978: LD_INT 2
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 1
31987: PUSH
31988: LD_INT 2
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: LD_INT 2
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: LD_INT 1
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 2
32018: NEG
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 2
32030: NEG
32031: PUSH
32032: LD_INT 2
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 2
32042: NEG
32043: PUSH
32044: LD_INT 3
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 1
32054: NEG
32055: PUSH
32056: LD_INT 3
32058: NEG
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 0
32066: PUSH
32067: LD_INT 3
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 1
32077: PUSH
32078: LD_INT 2
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 3
32088: PUSH
32089: LD_INT 2
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 3
32098: PUSH
32099: LD_INT 3
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 2
32108: PUSH
32109: LD_INT 3
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 1
32118: PUSH
32119: LD_INT 3
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 0
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 1
32138: NEG
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 3
32149: NEG
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 3
32161: NEG
32162: PUSH
32163: LD_INT 3
32165: NEG
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32202: LD_ADDR_VAR 0 43
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: LD_INT 0
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 1
32240: PUSH
32241: LD_INT 1
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: LD_INT 1
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: NEG
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: LD_INT 1
32275: NEG
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: NEG
32284: PUSH
32285: LD_INT 2
32287: NEG
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: LD_INT 2
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 1
32306: PUSH
32307: LD_INT 1
32309: NEG
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 2
32317: PUSH
32318: LD_INT 0
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 1
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: LD_INT 2
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 2
32368: NEG
32369: PUSH
32370: LD_INT 0
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 2
32379: NEG
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 1
32391: NEG
32392: PUSH
32393: LD_INT 3
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 0
32403: PUSH
32404: LD_INT 3
32406: NEG
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: LD_INT 2
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 2
32425: PUSH
32426: LD_INT 1
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 3
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 3
32446: PUSH
32447: LD_INT 1
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 1
32456: PUSH
32457: LD_INT 3
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: LD_INT 3
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 1
32476: NEG
32477: PUSH
32478: LD_INT 2
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 2
32487: NEG
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 3
32498: NEG
32499: PUSH
32500: LD_INT 0
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 3
32509: NEG
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32550: LD_ADDR_VAR 0 44
32554: PUSH
32555: LD_INT 0
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: LD_INT 1
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 1
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: PUSH
32589: LD_INT 1
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 0
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 1
32608: NEG
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: NEG
32620: PUSH
32621: LD_INT 1
32623: NEG
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 1
32631: NEG
32632: PUSH
32633: LD_INT 2
32635: NEG
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 1
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: LD_INT 2
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 2
32705: NEG
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: NEG
32717: PUSH
32718: LD_INT 1
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: LD_INT 2
32732: NEG
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 2
32740: NEG
32741: PUSH
32742: LD_INT 3
32744: NEG
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 2
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 3
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 3
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 3
32783: PUSH
32784: LD_INT 2
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 3
32793: PUSH
32794: LD_INT 3
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 2
32803: PUSH
32804: LD_INT 3
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 3
32824: NEG
32825: PUSH
32826: LD_INT 0
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 3
32835: NEG
32836: PUSH
32837: LD_INT 1
32839: NEG
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 3
32847: NEG
32848: PUSH
32849: LD_INT 2
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 3
32859: NEG
32860: PUSH
32861: LD_INT 3
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32900: LD_ADDR_VAR 0 45
32904: PUSH
32905: LD_INT 0
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: PUSH
32939: LD_INT 1
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: LD_INT 1
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 1
32958: NEG
32959: PUSH
32960: LD_INT 0
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 1
32969: NEG
32970: PUSH
32971: LD_INT 1
32973: NEG
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 1
32981: NEG
32982: PUSH
32983: LD_INT 2
32985: NEG
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: LD_INT 2
32996: NEG
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: LD_INT 1
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 2
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 0
33045: PUSH
33046: LD_INT 2
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: LD_INT 1
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: NEG
33067: PUSH
33068: LD_INT 1
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 2
33078: NEG
33079: PUSH
33080: LD_INT 2
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 2
33090: NEG
33091: PUSH
33092: LD_INT 3
33094: NEG
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 1
33102: NEG
33103: PUSH
33104: LD_INT 3
33106: NEG
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 0
33114: PUSH
33115: LD_INT 3
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 1
33125: PUSH
33126: LD_INT 2
33128: NEG
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 3
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 3
33146: PUSH
33147: LD_INT 3
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 2
33156: PUSH
33157: LD_INT 3
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 1
33166: PUSH
33167: LD_INT 3
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 0
33176: PUSH
33177: LD_INT 3
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 3
33197: NEG
33198: PUSH
33199: LD_INT 2
33201: NEG
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 3
33209: NEG
33210: PUSH
33211: LD_INT 3
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33250: LD_ADDR_VAR 0 46
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 0
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 1
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 1
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: LD_INT 1
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 1
33308: NEG
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: LD_INT 1
33323: NEG
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 1
33331: NEG
33332: PUSH
33333: LD_INT 2
33335: NEG
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: LD_INT 2
33346: NEG
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 1
33354: PUSH
33355: LD_INT 1
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 2
33365: PUSH
33366: LD_INT 0
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 2
33375: PUSH
33376: LD_INT 1
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: LD_INT 2
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: LD_INT 2
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 2
33416: NEG
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 2
33427: NEG
33428: PUSH
33429: LD_INT 1
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 1
33439: NEG
33440: PUSH
33441: LD_INT 3
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 3
33454: NEG
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: LD_INT 2
33465: NEG
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 2
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 3
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 3
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: LD_INT 3
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: LD_INT 3
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 1
33524: NEG
33525: PUSH
33526: LD_INT 2
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 2
33535: NEG
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 3
33546: NEG
33547: PUSH
33548: LD_INT 0
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 3
33557: NEG
33558: PUSH
33559: LD_INT 1
33561: NEG
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33598: LD_ADDR_VAR 0 47
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: LD_INT 2
33683: NEG
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: LD_INT 2
33694: NEG
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 1
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: NEG
33714: PUSH
33715: LD_INT 1
33717: NEG
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 2
33725: NEG
33726: PUSH
33727: LD_INT 2
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33749: LD_ADDR_VAR 0 48
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: LD_INT 0
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: LD_INT 1
33769: NEG
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 1
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 1
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 1
33807: NEG
33808: PUSH
33809: LD_INT 0
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 1
33818: NEG
33819: PUSH
33820: LD_INT 1
33822: NEG
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 1
33830: NEG
33831: PUSH
33832: LD_INT 2
33834: NEG
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 0
33842: PUSH
33843: LD_INT 2
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 1
33853: PUSH
33854: LD_INT 1
33856: NEG
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 2
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 2
33874: PUSH
33875: LD_INT 1
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33896: LD_ADDR_VAR 0 49
33900: PUSH
33901: LD_INT 0
33903: PUSH
33904: LD_INT 0
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 0
33913: PUSH
33914: LD_INT 1
33916: NEG
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: LD_INT 1
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 1
33954: NEG
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: NEG
33966: PUSH
33967: LD_INT 1
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: LD_INT 1
33980: NEG
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 2
33988: PUSH
33989: LD_INT 0
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 2
33998: PUSH
33999: LD_INT 1
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 2
34008: PUSH
34009: LD_INT 2
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: LD_INT 2
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34040: LD_ADDR_VAR 0 50
34044: PUSH
34045: LD_INT 0
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: LD_INT 1
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: LD_INT 0
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: LD_INT 1
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: LD_INT 1
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 1
34098: NEG
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: LD_INT 1
34113: NEG
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 2
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 2
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 1
34141: PUSH
34142: LD_INT 2
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 0
34151: PUSH
34152: LD_INT 2
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 1
34161: NEG
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34184: LD_ADDR_VAR 0 51
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 0
34201: PUSH
34202: LD_INT 1
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 0
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 1
34242: NEG
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 1
34265: PUSH
34266: LD_INT 2
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: LD_INT 2
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: LD_INT 1
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 2
34296: NEG
34297: PUSH
34298: LD_INT 0
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 2
34307: NEG
34308: PUSH
34309: LD_INT 1
34311: NEG
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34331: LD_ADDR_VAR 0 52
34335: PUSH
34336: LD_INT 0
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 0
34348: PUSH
34349: LD_INT 1
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 1
34389: NEG
34390: PUSH
34391: LD_INT 0
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: NEG
34401: PUSH
34402: LD_INT 1
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 1
34412: NEG
34413: PUSH
34414: LD_INT 2
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 2
34435: NEG
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 2
34446: NEG
34447: PUSH
34448: LD_INT 1
34450: NEG
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 2
34458: NEG
34459: PUSH
34460: LD_INT 2
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34482: LD_ADDR_VAR 0 53
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: LD_INT 1
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: LD_INT 0
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 1
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 0
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 1
34551: NEG
34552: PUSH
34553: LD_INT 1
34555: NEG
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 1
34563: NEG
34564: PUSH
34565: LD_INT 2
34567: NEG
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 0
34575: PUSH
34576: LD_INT 2
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 1
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 2
34597: PUSH
34598: LD_INT 0
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 2
34617: PUSH
34618: LD_INT 2
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 2
34658: NEG
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 2
34669: NEG
34670: PUSH
34671: LD_INT 1
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 2
34681: NEG
34682: PUSH
34683: LD_INT 2
34685: NEG
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34712: LD_ADDR_VAR 0 54
34716: PUSH
34717: LD_INT 0
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 1
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 1
34750: PUSH
34751: LD_INT 1
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 1
34770: NEG
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 1
34781: NEG
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 1
34793: NEG
34794: PUSH
34795: LD_INT 2
34797: NEG
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: LD_INT 2
34808: NEG
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 1
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 2
34827: PUSH
34828: LD_INT 0
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 2
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 2
34847: PUSH
34848: LD_INT 2
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 0
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: LD_INT 1
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 2
34888: NEG
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 2
34899: NEG
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 2
34911: NEG
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34942: LD_ADDR_VAR 0 55
34946: PUSH
34947: LD_INT 0
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: LD_INT 1
34962: NEG
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: PUSH
34971: LD_INT 0
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: LD_INT 1
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 1
35000: NEG
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 1
35011: NEG
35012: PUSH
35013: LD_INT 1
35015: NEG
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 1
35023: NEG
35024: PUSH
35025: LD_INT 2
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: LD_INT 2
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 1
35046: PUSH
35047: LD_INT 1
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 2
35057: PUSH
35058: LD_INT 0
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 2
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: LD_INT 2
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: PUSH
35088: LD_INT 2
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: LD_INT 2
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 1
35107: NEG
35108: PUSH
35109: LD_INT 1
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 2
35118: NEG
35119: PUSH
35120: LD_INT 0
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 2
35129: NEG
35130: PUSH
35131: LD_INT 1
35133: NEG
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 2
35141: NEG
35142: PUSH
35143: LD_INT 2
35145: NEG
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35172: LD_ADDR_VAR 0 56
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: LD_INT 1
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: PUSH
35201: LD_INT 0
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: NEG
35231: PUSH
35232: LD_INT 0
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 1
35253: NEG
35254: PUSH
35255: LD_INT 2
35257: NEG
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 0
35265: PUSH
35266: LD_INT 2
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: LD_INT 1
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 2
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 2
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 2
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 1
35317: PUSH
35318: LD_INT 2
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 0
35327: PUSH
35328: LD_INT 2
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: LD_INT 1
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 2
35348: NEG
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 2
35359: NEG
35360: PUSH
35361: LD_INT 1
35363: NEG
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 2
35371: NEG
35372: PUSH
35373: LD_INT 2
35375: NEG
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35402: LD_ADDR_VAR 0 57
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: LD_INT 1
35422: NEG
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 1
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 1
35460: NEG
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: LD_INT 1
35475: NEG
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: LD_INT 2
35487: NEG
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 0
35495: PUSH
35496: LD_INT 2
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 1
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 2
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 2
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: LD_INT 2
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 1
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 1
35567: NEG
35568: PUSH
35569: LD_INT 1
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 2
35578: NEG
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 2
35589: NEG
35590: PUSH
35591: LD_INT 1
35593: NEG
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 2
35601: NEG
35602: PUSH
35603: LD_INT 2
35605: NEG
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35632: LD_ADDR_VAR 0 58
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: LD_INT 1
35652: NEG
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 1
35690: NEG
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: NEG
35702: PUSH
35703: LD_INT 1
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: LD_INT 2
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: LD_INT 2
35728: NEG
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: LD_INT 1
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 2
35747: PUSH
35748: LD_INT 0
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 2
35808: NEG
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 2
35819: NEG
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 2
35831: NEG
35832: PUSH
35833: LD_INT 2
35835: NEG
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35862: LD_ADDR_VAR 0 59
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: NEG
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35950: LD_ADDR_VAR 0 60
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 0
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 1
36008: NEG
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: LD_INT 1
36023: NEG
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36038: LD_ADDR_VAR 0 61
36042: PUSH
36043: LD_INT 0
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: LD_INT 0
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 1
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 1
36107: NEG
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36126: LD_ADDR_VAR 0 62
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: LD_INT 1
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: LD_INT 1
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: NEG
36196: PUSH
36197: LD_INT 1
36199: NEG
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36214: LD_ADDR_VAR 0 63
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 1
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: LD_INT 1
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 1
36272: NEG
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: LD_INT 1
36287: NEG
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36302: LD_ADDR_VAR 0 64
36306: PUSH
36307: LD_INT 0
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: LD_INT 1
36322: NEG
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 1
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: NEG
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 1
36371: NEG
36372: PUSH
36373: LD_INT 1
36375: NEG
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: ST_TO_ADDR
// end ; 1 :
36390: GO 42287
36392: LD_INT 1
36394: DOUBLE
36395: EQUAL
36396: IFTRUE 36400
36398: GO 39023
36400: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36401: LD_ADDR_VAR 0 11
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: LD_INT 3
36412: NEG
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 0
36420: PUSH
36421: LD_INT 3
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: LD_INT 2
36434: NEG
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: LIST
36444: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36445: LD_ADDR_VAR 0 12
36449: PUSH
36450: LD_INT 2
36452: PUSH
36453: LD_INT 1
36455: NEG
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 3
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 3
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36486: LD_ADDR_VAR 0 13
36490: PUSH
36491: LD_INT 3
36493: PUSH
36494: LD_INT 2
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 3
36503: PUSH
36504: LD_INT 3
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: LD_INT 3
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: LIST
36525: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36526: LD_ADDR_VAR 0 14
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: LD_INT 3
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: LD_INT 3
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: LD_INT 2
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: LIST
36566: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36567: LD_ADDR_VAR 0 15
36571: PUSH
36572: LD_INT 2
36574: NEG
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 3
36585: NEG
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 3
36596: NEG
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: LIST
36610: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36611: LD_ADDR_VAR 0 16
36615: PUSH
36616: LD_INT 2
36618: NEG
36619: PUSH
36620: LD_INT 3
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 3
36630: NEG
36631: PUSH
36632: LD_INT 2
36634: NEG
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 3
36642: NEG
36643: PUSH
36644: LD_INT 3
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: LIST
36656: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36657: LD_ADDR_VAR 0 17
36661: PUSH
36662: LD_INT 1
36664: NEG
36665: PUSH
36666: LD_INT 3
36668: NEG
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: LD_INT 3
36679: NEG
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 2
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: LIST
36700: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36701: LD_ADDR_VAR 0 18
36705: PUSH
36706: LD_INT 2
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 3
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 3
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36742: LD_ADDR_VAR 0 19
36746: PUSH
36747: LD_INT 3
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 3
36759: PUSH
36760: LD_INT 3
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 2
36769: PUSH
36770: LD_INT 3
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36782: LD_ADDR_VAR 0 20
36786: PUSH
36787: LD_INT 1
36789: PUSH
36790: LD_INT 3
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: LD_INT 3
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 1
36809: NEG
36810: PUSH
36811: LD_INT 2
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: LIST
36822: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36823: LD_ADDR_VAR 0 21
36827: PUSH
36828: LD_INT 2
36830: NEG
36831: PUSH
36832: LD_INT 1
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 3
36841: NEG
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 3
36852: NEG
36853: PUSH
36854: LD_INT 1
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: LIST
36866: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36867: LD_ADDR_VAR 0 22
36871: PUSH
36872: LD_INT 2
36874: NEG
36875: PUSH
36876: LD_INT 3
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 3
36886: NEG
36887: PUSH
36888: LD_INT 2
36890: NEG
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 3
36898: NEG
36899: PUSH
36900: LD_INT 3
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36913: LD_ADDR_VAR 0 23
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: LD_INT 3
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 1
36931: NEG
36932: PUSH
36933: LD_INT 4
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: LD_INT 3
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: LIST
36956: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36957: LD_ADDR_VAR 0 24
36961: PUSH
36962: LD_INT 3
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 3
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 4
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36998: LD_ADDR_VAR 0 25
37002: PUSH
37003: LD_INT 3
37005: PUSH
37006: LD_INT 3
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 4
37015: PUSH
37016: LD_INT 3
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 3
37025: PUSH
37026: LD_INT 4
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: LIST
37037: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37038: LD_ADDR_VAR 0 26
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 3
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: LD_INT 4
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: LD_INT 3
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: LIST
37078: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37079: LD_ADDR_VAR 0 27
37083: PUSH
37084: LD_INT 3
37086: NEG
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 3
37097: NEG
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 4
37108: NEG
37109: PUSH
37110: LD_INT 1
37112: NEG
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: LIST
37122: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37123: LD_ADDR_VAR 0 28
37127: PUSH
37128: LD_INT 3
37130: NEG
37131: PUSH
37132: LD_INT 3
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 3
37142: NEG
37143: PUSH
37144: LD_INT 4
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 4
37154: NEG
37155: PUSH
37156: LD_INT 3
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: LIST
37168: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37169: LD_ADDR_VAR 0 29
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: LD_INT 3
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: LD_INT 3
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: LD_INT 4
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: LD_INT 4
37225: NEG
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: LD_INT 3
37236: NEG
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: LD_INT 5
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 5
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 4
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 1
37278: NEG
37279: PUSH
37280: LD_INT 6
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: LD_INT 6
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 1
37301: PUSH
37302: LD_INT 5
37304: NEG
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37324: LD_ADDR_VAR 0 30
37328: PUSH
37329: LD_INT 2
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 3
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 3
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 3
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 4
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 4
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 4
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 5
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 5
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 5
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 6
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 6
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37467: LD_ADDR_VAR 0 31
37471: PUSH
37472: LD_INT 3
37474: PUSH
37475: LD_INT 2
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 3
37484: PUSH
37485: LD_INT 3
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: PUSH
37495: LD_INT 3
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 4
37504: PUSH
37505: LD_INT 3
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 4
37514: PUSH
37515: LD_INT 4
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 3
37524: PUSH
37525: LD_INT 4
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 5
37534: PUSH
37535: LD_INT 4
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 5
37544: PUSH
37545: LD_INT 5
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 4
37554: PUSH
37555: LD_INT 5
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 6
37564: PUSH
37565: LD_INT 5
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 6
37574: PUSH
37575: LD_INT 6
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 5
37584: PUSH
37585: LD_INT 6
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37606: LD_ADDR_VAR 0 32
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: LD_INT 3
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 0
37623: PUSH
37624: LD_INT 3
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: NEG
37634: PUSH
37635: LD_INT 2
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 1
37644: PUSH
37645: LD_INT 4
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 0
37654: PUSH
37655: LD_INT 4
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: NEG
37665: PUSH
37666: LD_INT 3
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 1
37675: PUSH
37676: LD_INT 5
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: LD_INT 5
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: LD_INT 4
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: LD_INT 6
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: LD_INT 6
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: NEG
37727: PUSH
37728: LD_INT 5
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37749: LD_ADDR_VAR 0 33
37753: PUSH
37754: LD_INT 2
37756: NEG
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 3
37767: NEG
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 3
37778: NEG
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 3
37790: NEG
37791: PUSH
37792: LD_INT 1
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 4
37801: NEG
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 4
37812: NEG
37813: PUSH
37814: LD_INT 1
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 4
37824: NEG
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 5
37835: NEG
37836: PUSH
37837: LD_INT 0
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 5
37846: NEG
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 5
37858: NEG
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 6
37869: NEG
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 6
37880: NEG
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37904: LD_ADDR_VAR 0 34
37908: PUSH
37909: LD_INT 2
37911: NEG
37912: PUSH
37913: LD_INT 3
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 3
37923: NEG
37924: PUSH
37925: LD_INT 2
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 3
37935: NEG
37936: PUSH
37937: LD_INT 3
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 3
37947: NEG
37948: PUSH
37949: LD_INT 4
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 4
37959: NEG
37960: PUSH
37961: LD_INT 3
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 4
37971: NEG
37972: PUSH
37973: LD_INT 4
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 4
37983: NEG
37984: PUSH
37985: LD_INT 5
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 5
37995: NEG
37996: PUSH
37997: LD_INT 4
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 5
38007: NEG
38008: PUSH
38009: LD_INT 5
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 5
38019: NEG
38020: PUSH
38021: LD_INT 6
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 6
38031: NEG
38032: PUSH
38033: LD_INT 5
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 6
38043: NEG
38044: PUSH
38045: LD_INT 6
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38067: LD_ADDR_VAR 0 41
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 2
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: LD_INT 3
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: LD_INT 2
38100: NEG
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38111: LD_ADDR_VAR 0 42
38115: PUSH
38116: LD_INT 2
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 2
38128: PUSH
38129: LD_INT 1
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 3
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: LIST
38151: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38152: LD_ADDR_VAR 0 43
38156: PUSH
38157: LD_INT 2
38159: PUSH
38160: LD_INT 2
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 3
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 2
38179: PUSH
38180: LD_INT 3
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: LIST
38191: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38192: LD_ADDR_VAR 0 44
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: LD_INT 2
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: LD_INT 3
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38233: LD_ADDR_VAR 0 45
38237: PUSH
38238: LD_INT 2
38240: NEG
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 2
38251: NEG
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 3
38262: NEG
38263: PUSH
38264: LD_INT 1
38266: NEG
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: LIST
38276: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38277: LD_ADDR_VAR 0 46
38281: PUSH
38282: LD_INT 2
38284: NEG
38285: PUSH
38286: LD_INT 2
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 2
38296: NEG
38297: PUSH
38298: LD_INT 3
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 3
38308: NEG
38309: PUSH
38310: LD_INT 2
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: LIST
38322: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38323: LD_ADDR_VAR 0 47
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: LD_INT 3
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: LD_INT 3
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38356: LD_ADDR_VAR 0 48
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: LD_INT 2
38366: NEG
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 2
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38387: LD_ADDR_VAR 0 49
38391: PUSH
38392: LD_INT 3
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 3
38404: PUSH
38405: LD_INT 2
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38416: LD_ADDR_VAR 0 50
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: LD_INT 3
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: LD_INT 3
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38445: LD_ADDR_VAR 0 51
38449: PUSH
38450: LD_INT 1
38452: NEG
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38476: LD_ADDR_VAR 0 52
38480: PUSH
38481: LD_INT 3
38483: NEG
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 3
38495: NEG
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38509: LD_ADDR_VAR 0 53
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: LD_INT 3
38520: NEG
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: LD_INT 3
38531: NEG
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 1
38539: PUSH
38540: LD_INT 2
38542: NEG
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: LIST
38552: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38553: LD_ADDR_VAR 0 54
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 3
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 3
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: LIST
38593: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38594: LD_ADDR_VAR 0 55
38598: PUSH
38599: LD_INT 3
38601: PUSH
38602: LD_INT 2
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 3
38611: PUSH
38612: LD_INT 3
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: LD_INT 3
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: LIST
38633: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38634: LD_ADDR_VAR 0 56
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 3
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: LD_INT 3
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: LD_INT 2
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: LIST
38674: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38675: LD_ADDR_VAR 0 57
38679: PUSH
38680: LD_INT 2
38682: NEG
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 3
38693: NEG
38694: PUSH
38695: LD_INT 0
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 3
38704: NEG
38705: PUSH
38706: LD_INT 1
38708: NEG
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: LIST
38718: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38719: LD_ADDR_VAR 0 58
38723: PUSH
38724: LD_INT 2
38726: NEG
38727: PUSH
38728: LD_INT 3
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 3
38738: NEG
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 3
38750: NEG
38751: PUSH
38752: LD_INT 3
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: LIST
38764: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38765: LD_ADDR_VAR 0 59
38769: PUSH
38770: LD_INT 1
38772: NEG
38773: PUSH
38774: LD_INT 2
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: LD_INT 2
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: LIST
38808: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38809: LD_ADDR_VAR 0 60
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: LD_INT 1
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38850: LD_ADDR_VAR 0 61
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 1
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: LIST
38889: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38890: LD_ADDR_VAR 0 62
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: LD_INT 2
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: LD_INT 2
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: NEG
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: LIST
38930: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38931: LD_ADDR_VAR 0 63
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: LD_INT 1
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 2
38949: NEG
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 2
38960: NEG
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: LIST
38974: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38975: LD_ADDR_VAR 0 64
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 2
39006: NEG
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: ST_TO_ADDR
// end ; 2 :
39021: GO 42287
39023: LD_INT 2
39025: DOUBLE
39026: EQUAL
39027: IFTRUE 39031
39029: GO 42286
39031: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39032: LD_ADDR_VAR 0 29
39036: PUSH
39037: LD_INT 4
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 4
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 5
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 5
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 4
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 3
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 3
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 3
39111: PUSH
39112: LD_INT 2
39114: NEG
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 5
39122: PUSH
39123: LD_INT 2
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 3
39132: PUSH
39133: LD_INT 3
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 4
39152: PUSH
39153: LD_INT 3
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 4
39162: PUSH
39163: LD_INT 4
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 3
39172: PUSH
39173: LD_INT 4
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 2
39182: PUSH
39183: LD_INT 3
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 2
39192: PUSH
39193: LD_INT 2
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 4
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 2
39212: PUSH
39213: LD_INT 4
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: LD_INT 4
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: LD_INT 3
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: LD_INT 4
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: LD_INT 5
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 5
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: LD_INT 4
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: LD_INT 3
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: LD_INT 5
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: LD_INT 3
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 3
39315: NEG
39316: PUSH
39317: LD_INT 0
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 3
39326: NEG
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 2
39338: NEG
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 2
39349: NEG
39350: PUSH
39351: LD_INT 1
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 3
39360: NEG
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 4
39371: NEG
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 4
39382: NEG
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 4
39394: NEG
39395: PUSH
39396: LD_INT 2
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: LD_INT 2
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 4
39417: NEG
39418: PUSH
39419: LD_INT 4
39421: NEG
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 4
39429: NEG
39430: PUSH
39431: LD_INT 5
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 3
39441: NEG
39442: PUSH
39443: LD_INT 4
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 3
39453: NEG
39454: PUSH
39455: LD_INT 3
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 4
39465: NEG
39466: PUSH
39467: LD_INT 3
39469: NEG
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 5
39477: NEG
39478: PUSH
39479: LD_INT 4
39481: NEG
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 5
39489: NEG
39490: PUSH
39491: LD_INT 5
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 3
39501: NEG
39502: PUSH
39503: LD_INT 5
39505: NEG
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 5
39513: NEG
39514: PUSH
39515: LD_INT 3
39517: NEG
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39570: LD_ADDR_VAR 0 30
39574: PUSH
39575: LD_INT 4
39577: PUSH
39578: LD_INT 4
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 4
39587: PUSH
39588: LD_INT 3
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 5
39597: PUSH
39598: LD_INT 4
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 5
39607: PUSH
39608: LD_INT 5
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 4
39617: PUSH
39618: LD_INT 5
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 3
39627: PUSH
39628: LD_INT 4
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 3
39637: PUSH
39638: LD_INT 3
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 5
39647: PUSH
39648: LD_INT 3
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 3
39657: PUSH
39658: LD_INT 5
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: LD_INT 3
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: LD_INT 2
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: PUSH
39688: LD_INT 3
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 4
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: LD_INT 4
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: LD_INT 3
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 2
39739: PUSH
39740: LD_INT 4
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 2
39749: NEG
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 4
39760: NEG
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 4
39771: NEG
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 3
39783: NEG
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 3
39794: NEG
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 4
39805: NEG
39806: PUSH
39807: LD_INT 1
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 5
39816: NEG
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 5
39827: NEG
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 5
39839: NEG
39840: PUSH
39841: LD_INT 2
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 3
39851: NEG
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 3
39862: NEG
39863: PUSH
39864: LD_INT 3
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 3
39874: NEG
39875: PUSH
39876: LD_INT 4
39878: NEG
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: LD_INT 3
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 2
39898: NEG
39899: PUSH
39900: LD_INT 2
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 3
39910: NEG
39911: PUSH
39912: LD_INT 2
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 4
39922: NEG
39923: PUSH
39924: LD_INT 3
39926: NEG
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 4
39934: NEG
39935: PUSH
39936: LD_INT 4
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: LD_INT 4
39950: NEG
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 4
39958: NEG
39959: PUSH
39960: LD_INT 2
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: LD_INT 4
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: LD_INT 5
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: LD_INT 4
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 1
40003: PUSH
40004: LD_INT 3
40006: NEG
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: LD_INT 3
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: LD_INT 4
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: LD_INT 5
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 2
40049: PUSH
40050: LD_INT 3
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 2
40060: NEG
40061: PUSH
40062: LD_INT 5
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40117: LD_ADDR_VAR 0 31
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 4
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 3
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: LD_INT 4
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: LD_INT 5
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: LD_INT 5
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 4
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: LD_INT 3
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 2
40196: PUSH
40197: LD_INT 5
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 2
40206: NEG
40207: PUSH
40208: LD_INT 3
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 3
40217: NEG
40218: PUSH
40219: LD_INT 0
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 3
40228: NEG
40229: PUSH
40230: LD_INT 1
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 2
40240: NEG
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 2
40251: NEG
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 3
40262: NEG
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 4
40273: NEG
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 4
40284: NEG
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 4
40296: NEG
40297: PUSH
40298: LD_INT 2
40300: NEG
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 2
40308: NEG
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 4
40319: NEG
40320: PUSH
40321: LD_INT 4
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 4
40331: NEG
40332: PUSH
40333: LD_INT 5
40335: NEG
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 3
40343: NEG
40344: PUSH
40345: LD_INT 4
40347: NEG
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 3
40355: NEG
40356: PUSH
40357: LD_INT 3
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 4
40367: NEG
40368: PUSH
40369: LD_INT 3
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 5
40379: NEG
40380: PUSH
40381: LD_INT 4
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 5
40391: NEG
40392: PUSH
40393: LD_INT 5
40395: NEG
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 3
40403: NEG
40404: PUSH
40405: LD_INT 5
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 5
40415: NEG
40416: PUSH
40417: LD_INT 3
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: LD_INT 3
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 4
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 3
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: LD_INT 2
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 2
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: LD_INT 3
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: LD_INT 4
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: LD_INT 2
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 2
40517: NEG
40518: PUSH
40519: LD_INT 4
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 4
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 4
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 5
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 5
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 4
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 3
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 3
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 3
40601: PUSH
40602: LD_INT 2
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 5
40612: PUSH
40613: LD_INT 2
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40667: LD_ADDR_VAR 0 32
40671: PUSH
40672: LD_INT 4
40674: NEG
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 4
40685: NEG
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 3
40697: NEG
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 3
40708: NEG
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 4
40719: NEG
40720: PUSH
40721: LD_INT 1
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 5
40730: NEG
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 5
40741: NEG
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 5
40753: NEG
40754: PUSH
40755: LD_INT 2
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 3
40765: NEG
40766: PUSH
40767: LD_INT 2
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 3
40776: NEG
40777: PUSH
40778: LD_INT 3
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 3
40788: NEG
40789: PUSH
40790: LD_INT 4
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: NEG
40801: PUSH
40802: LD_INT 3
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 2
40812: NEG
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 3
40824: NEG
40825: PUSH
40826: LD_INT 2
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 4
40836: NEG
40837: PUSH
40838: LD_INT 3
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 4
40848: NEG
40849: PUSH
40850: LD_INT 4
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: LD_INT 4
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 4
40872: NEG
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 4
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: LD_INT 5
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: LD_INT 4
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: LD_INT 3
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: LD_INT 3
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: LD_INT 4
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: LD_INT 5
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: LD_INT 3
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 2
40974: NEG
40975: PUSH
40976: LD_INT 5
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 3
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 3
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 4
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 4
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 3
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 2
41058: PUSH
41059: LD_INT 2
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 4
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 4
41079: PUSH
41080: LD_INT 4
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 4
41089: PUSH
41090: LD_INT 3
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 5
41099: PUSH
41100: LD_INT 4
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 5
41109: PUSH
41110: LD_INT 5
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 4
41119: PUSH
41120: LD_INT 5
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 3
41129: PUSH
41130: LD_INT 4
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: LD_INT 3
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 5
41149: PUSH
41150: LD_INT 3
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 3
41159: PUSH
41160: LD_INT 5
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41214: LD_ADDR_VAR 0 33
41218: PUSH
41219: LD_INT 4
41221: NEG
41222: PUSH
41223: LD_INT 4
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 4
41233: NEG
41234: PUSH
41235: LD_INT 5
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 3
41245: NEG
41246: PUSH
41247: LD_INT 4
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 3
41257: NEG
41258: PUSH
41259: LD_INT 3
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 4
41269: NEG
41270: PUSH
41271: LD_INT 3
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 5
41281: NEG
41282: PUSH
41283: LD_INT 4
41285: NEG
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 5
41293: NEG
41294: PUSH
41295: LD_INT 5
41297: NEG
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 3
41305: NEG
41306: PUSH
41307: LD_INT 5
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 5
41317: NEG
41318: PUSH
41319: LD_INT 3
41321: NEG
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: LD_INT 3
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: LD_INT 4
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: LD_INT 3
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: LD_INT 2
41365: NEG
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: LD_INT 3
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 4
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 2
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: NEG
41420: PUSH
41421: LD_INT 4
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 4
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 4
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 5
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 5
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 4
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 3
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 3
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 3
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 5
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 3
41524: PUSH
41525: LD_INT 3
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 3
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 4
41544: PUSH
41545: LD_INT 3
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 4
41554: PUSH
41555: LD_INT 4
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 3
41564: PUSH
41565: LD_INT 4
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 2
41574: PUSH
41575: LD_INT 3
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 2
41584: PUSH
41585: LD_INT 2
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 4
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 2
41604: PUSH
41605: LD_INT 4
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 4
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: LD_INT 3
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: LD_INT 4
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: LD_INT 5
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: LD_INT 5
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: LD_INT 4
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: LD_INT 3
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: LD_INT 5
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: NEG
41697: PUSH
41698: LD_INT 3
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41752: LD_ADDR_VAR 0 34
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: LD_INT 4
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: LD_INT 5
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: LD_INT 4
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 3
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: LD_INT 3
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: LD_INT 4
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 1
41826: NEG
41827: PUSH
41828: LD_INT 5
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: LD_INT 3
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 2
41849: NEG
41850: PUSH
41851: LD_INT 5
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 3
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 3
41871: PUSH
41872: LD_INT 1
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 4
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 4
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 3
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 4
41944: PUSH
41945: LD_INT 2
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 4
41954: PUSH
41955: LD_INT 4
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 4
41964: PUSH
41965: LD_INT 3
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 5
41974: PUSH
41975: LD_INT 4
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 5
41984: PUSH
41985: LD_INT 5
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 4
41994: PUSH
41995: LD_INT 5
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: LD_INT 4
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 3
42014: PUSH
42015: LD_INT 3
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 5
42024: PUSH
42025: LD_INT 3
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 3
42034: PUSH
42035: LD_INT 5
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: LD_INT 3
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: LD_INT 2
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 3
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: LD_INT 4
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: LD_INT 4
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: LD_INT 3
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: LD_INT 4
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 2
42126: NEG
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 4
42137: NEG
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 4
42148: NEG
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 3
42160: NEG
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 3
42171: NEG
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 4
42182: NEG
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 5
42193: NEG
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 5
42204: NEG
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 5
42216: NEG
42217: PUSH
42218: LD_INT 2
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 3
42228: NEG
42229: PUSH
42230: LD_INT 2
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: ST_TO_ADDR
// end ; end ;
42284: GO 42287
42286: POP
// case btype of b_depot , b_warehouse :
42287: LD_VAR 0 1
42291: PUSH
42292: LD_INT 0
42294: DOUBLE
42295: EQUAL
42296: IFTRUE 42306
42298: LD_INT 1
42300: DOUBLE
42301: EQUAL
42302: IFTRUE 42306
42304: GO 42507
42306: POP
// case nation of nation_american :
42307: LD_VAR 0 5
42311: PUSH
42312: LD_INT 1
42314: DOUBLE
42315: EQUAL
42316: IFTRUE 42320
42318: GO 42376
42320: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42321: LD_ADDR_VAR 0 9
42325: PUSH
42326: LD_VAR 0 11
42330: PUSH
42331: LD_VAR 0 12
42335: PUSH
42336: LD_VAR 0 13
42340: PUSH
42341: LD_VAR 0 14
42345: PUSH
42346: LD_VAR 0 15
42350: PUSH
42351: LD_VAR 0 16
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: PUSH
42364: LD_VAR 0 4
42368: PUSH
42369: LD_INT 1
42371: PLUS
42372: ARRAY
42373: ST_TO_ADDR
42374: GO 42505
42376: LD_INT 2
42378: DOUBLE
42379: EQUAL
42380: IFTRUE 42384
42382: GO 42440
42384: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42385: LD_ADDR_VAR 0 9
42389: PUSH
42390: LD_VAR 0 17
42394: PUSH
42395: LD_VAR 0 18
42399: PUSH
42400: LD_VAR 0 19
42404: PUSH
42405: LD_VAR 0 20
42409: PUSH
42410: LD_VAR 0 21
42414: PUSH
42415: LD_VAR 0 22
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: PUSH
42428: LD_VAR 0 4
42432: PUSH
42433: LD_INT 1
42435: PLUS
42436: ARRAY
42437: ST_TO_ADDR
42438: GO 42505
42440: LD_INT 3
42442: DOUBLE
42443: EQUAL
42444: IFTRUE 42448
42446: GO 42504
42448: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42449: LD_ADDR_VAR 0 9
42453: PUSH
42454: LD_VAR 0 23
42458: PUSH
42459: LD_VAR 0 24
42463: PUSH
42464: LD_VAR 0 25
42468: PUSH
42469: LD_VAR 0 26
42473: PUSH
42474: LD_VAR 0 27
42478: PUSH
42479: LD_VAR 0 28
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: PUSH
42492: LD_VAR 0 4
42496: PUSH
42497: LD_INT 1
42499: PLUS
42500: ARRAY
42501: ST_TO_ADDR
42502: GO 42505
42504: POP
42505: GO 43060
42507: LD_INT 2
42509: DOUBLE
42510: EQUAL
42511: IFTRUE 42521
42513: LD_INT 3
42515: DOUBLE
42516: EQUAL
42517: IFTRUE 42521
42519: GO 42577
42521: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42522: LD_ADDR_VAR 0 9
42526: PUSH
42527: LD_VAR 0 29
42531: PUSH
42532: LD_VAR 0 30
42536: PUSH
42537: LD_VAR 0 31
42541: PUSH
42542: LD_VAR 0 32
42546: PUSH
42547: LD_VAR 0 33
42551: PUSH
42552: LD_VAR 0 34
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: PUSH
42565: LD_VAR 0 4
42569: PUSH
42570: LD_INT 1
42572: PLUS
42573: ARRAY
42574: ST_TO_ADDR
42575: GO 43060
42577: LD_INT 16
42579: DOUBLE
42580: EQUAL
42581: IFTRUE 42639
42583: LD_INT 17
42585: DOUBLE
42586: EQUAL
42587: IFTRUE 42639
42589: LD_INT 18
42591: DOUBLE
42592: EQUAL
42593: IFTRUE 42639
42595: LD_INT 19
42597: DOUBLE
42598: EQUAL
42599: IFTRUE 42639
42601: LD_INT 22
42603: DOUBLE
42604: EQUAL
42605: IFTRUE 42639
42607: LD_INT 20
42609: DOUBLE
42610: EQUAL
42611: IFTRUE 42639
42613: LD_INT 21
42615: DOUBLE
42616: EQUAL
42617: IFTRUE 42639
42619: LD_INT 23
42621: DOUBLE
42622: EQUAL
42623: IFTRUE 42639
42625: LD_INT 24
42627: DOUBLE
42628: EQUAL
42629: IFTRUE 42639
42631: LD_INT 25
42633: DOUBLE
42634: EQUAL
42635: IFTRUE 42639
42637: GO 42695
42639: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42640: LD_ADDR_VAR 0 9
42644: PUSH
42645: LD_VAR 0 35
42649: PUSH
42650: LD_VAR 0 36
42654: PUSH
42655: LD_VAR 0 37
42659: PUSH
42660: LD_VAR 0 38
42664: PUSH
42665: LD_VAR 0 39
42669: PUSH
42670: LD_VAR 0 40
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: PUSH
42683: LD_VAR 0 4
42687: PUSH
42688: LD_INT 1
42690: PLUS
42691: ARRAY
42692: ST_TO_ADDR
42693: GO 43060
42695: LD_INT 6
42697: DOUBLE
42698: EQUAL
42699: IFTRUE 42751
42701: LD_INT 7
42703: DOUBLE
42704: EQUAL
42705: IFTRUE 42751
42707: LD_INT 8
42709: DOUBLE
42710: EQUAL
42711: IFTRUE 42751
42713: LD_INT 13
42715: DOUBLE
42716: EQUAL
42717: IFTRUE 42751
42719: LD_INT 12
42721: DOUBLE
42722: EQUAL
42723: IFTRUE 42751
42725: LD_INT 15
42727: DOUBLE
42728: EQUAL
42729: IFTRUE 42751
42731: LD_INT 11
42733: DOUBLE
42734: EQUAL
42735: IFTRUE 42751
42737: LD_INT 14
42739: DOUBLE
42740: EQUAL
42741: IFTRUE 42751
42743: LD_INT 10
42745: DOUBLE
42746: EQUAL
42747: IFTRUE 42751
42749: GO 42807
42751: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42752: LD_ADDR_VAR 0 9
42756: PUSH
42757: LD_VAR 0 41
42761: PUSH
42762: LD_VAR 0 42
42766: PUSH
42767: LD_VAR 0 43
42771: PUSH
42772: LD_VAR 0 44
42776: PUSH
42777: LD_VAR 0 45
42781: PUSH
42782: LD_VAR 0 46
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: PUSH
42795: LD_VAR 0 4
42799: PUSH
42800: LD_INT 1
42802: PLUS
42803: ARRAY
42804: ST_TO_ADDR
42805: GO 43060
42807: LD_INT 36
42809: DOUBLE
42810: EQUAL
42811: IFTRUE 42815
42813: GO 42871
42815: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42816: LD_ADDR_VAR 0 9
42820: PUSH
42821: LD_VAR 0 47
42825: PUSH
42826: LD_VAR 0 48
42830: PUSH
42831: LD_VAR 0 49
42835: PUSH
42836: LD_VAR 0 50
42840: PUSH
42841: LD_VAR 0 51
42845: PUSH
42846: LD_VAR 0 52
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: PUSH
42859: LD_VAR 0 4
42863: PUSH
42864: LD_INT 1
42866: PLUS
42867: ARRAY
42868: ST_TO_ADDR
42869: GO 43060
42871: LD_INT 4
42873: DOUBLE
42874: EQUAL
42875: IFTRUE 42897
42877: LD_INT 5
42879: DOUBLE
42880: EQUAL
42881: IFTRUE 42897
42883: LD_INT 34
42885: DOUBLE
42886: EQUAL
42887: IFTRUE 42897
42889: LD_INT 37
42891: DOUBLE
42892: EQUAL
42893: IFTRUE 42897
42895: GO 42953
42897: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42898: LD_ADDR_VAR 0 9
42902: PUSH
42903: LD_VAR 0 53
42907: PUSH
42908: LD_VAR 0 54
42912: PUSH
42913: LD_VAR 0 55
42917: PUSH
42918: LD_VAR 0 56
42922: PUSH
42923: LD_VAR 0 57
42927: PUSH
42928: LD_VAR 0 58
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: PUSH
42941: LD_VAR 0 4
42945: PUSH
42946: LD_INT 1
42948: PLUS
42949: ARRAY
42950: ST_TO_ADDR
42951: GO 43060
42953: LD_INT 31
42955: DOUBLE
42956: EQUAL
42957: IFTRUE 43003
42959: LD_INT 32
42961: DOUBLE
42962: EQUAL
42963: IFTRUE 43003
42965: LD_INT 33
42967: DOUBLE
42968: EQUAL
42969: IFTRUE 43003
42971: LD_INT 27
42973: DOUBLE
42974: EQUAL
42975: IFTRUE 43003
42977: LD_INT 26
42979: DOUBLE
42980: EQUAL
42981: IFTRUE 43003
42983: LD_INT 28
42985: DOUBLE
42986: EQUAL
42987: IFTRUE 43003
42989: LD_INT 29
42991: DOUBLE
42992: EQUAL
42993: IFTRUE 43003
42995: LD_INT 30
42997: DOUBLE
42998: EQUAL
42999: IFTRUE 43003
43001: GO 43059
43003: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43004: LD_ADDR_VAR 0 9
43008: PUSH
43009: LD_VAR 0 59
43013: PUSH
43014: LD_VAR 0 60
43018: PUSH
43019: LD_VAR 0 61
43023: PUSH
43024: LD_VAR 0 62
43028: PUSH
43029: LD_VAR 0 63
43033: PUSH
43034: LD_VAR 0 64
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: PUSH
43047: LD_VAR 0 4
43051: PUSH
43052: LD_INT 1
43054: PLUS
43055: ARRAY
43056: ST_TO_ADDR
43057: GO 43060
43059: POP
// temp_list2 = [ ] ;
43060: LD_ADDR_VAR 0 10
43064: PUSH
43065: EMPTY
43066: ST_TO_ADDR
// for i in temp_list do
43067: LD_ADDR_VAR 0 8
43071: PUSH
43072: LD_VAR 0 9
43076: PUSH
43077: FOR_IN
43078: IFFALSE 43130
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43080: LD_ADDR_VAR 0 10
43084: PUSH
43085: LD_VAR 0 10
43089: PUSH
43090: LD_VAR 0 8
43094: PUSH
43095: LD_INT 1
43097: ARRAY
43098: PUSH
43099: LD_VAR 0 2
43103: PLUS
43104: PUSH
43105: LD_VAR 0 8
43109: PUSH
43110: LD_INT 2
43112: ARRAY
43113: PUSH
43114: LD_VAR 0 3
43118: PLUS
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: EMPTY
43125: LIST
43126: ADD
43127: ST_TO_ADDR
43128: GO 43077
43130: POP
43131: POP
// result = temp_list2 ;
43132: LD_ADDR_VAR 0 7
43136: PUSH
43137: LD_VAR 0 10
43141: ST_TO_ADDR
// end ;
43142: LD_VAR 0 7
43146: RET
// export function EnemyInRange ( unit , dist ) ; begin
43147: LD_INT 0
43149: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43150: LD_ADDR_VAR 0 3
43154: PUSH
43155: LD_VAR 0 1
43159: PPUSH
43160: CALL_OW 255
43164: PPUSH
43165: LD_VAR 0 1
43169: PPUSH
43170: CALL_OW 250
43174: PPUSH
43175: LD_VAR 0 1
43179: PPUSH
43180: CALL_OW 251
43184: PPUSH
43185: LD_VAR 0 2
43189: PPUSH
43190: CALL 16404 0 4
43194: PUSH
43195: LD_INT 4
43197: ARRAY
43198: ST_TO_ADDR
// end ;
43199: LD_VAR 0 3
43203: RET
// export function PlayerSeeMe ( unit ) ; begin
43204: LD_INT 0
43206: PPUSH
// result := See ( your_side , unit ) ;
43207: LD_ADDR_VAR 0 2
43211: PUSH
43212: LD_OWVAR 2
43216: PPUSH
43217: LD_VAR 0 1
43221: PPUSH
43222: CALL_OW 292
43226: ST_TO_ADDR
// end ;
43227: LD_VAR 0 2
43231: RET
// export function ReverseDir ( unit ) ; begin
43232: LD_INT 0
43234: PPUSH
// if not unit then
43235: LD_VAR 0 1
43239: NOT
43240: IFFALSE 43244
// exit ;
43242: GO 43267
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43244: LD_ADDR_VAR 0 2
43248: PUSH
43249: LD_VAR 0 1
43253: PPUSH
43254: CALL_OW 254
43258: PUSH
43259: LD_INT 3
43261: PLUS
43262: PUSH
43263: LD_INT 6
43265: MOD
43266: ST_TO_ADDR
// end ;
43267: LD_VAR 0 2
43271: RET
// export function ReverseArray ( array ) ; var i ; begin
43272: LD_INT 0
43274: PPUSH
43275: PPUSH
// if not array then
43276: LD_VAR 0 1
43280: NOT
43281: IFFALSE 43285
// exit ;
43283: GO 43340
// result := [ ] ;
43285: LD_ADDR_VAR 0 2
43289: PUSH
43290: EMPTY
43291: ST_TO_ADDR
// for i := array downto 1 do
43292: LD_ADDR_VAR 0 3
43296: PUSH
43297: DOUBLE
43298: LD_VAR 0 1
43302: INC
43303: ST_TO_ADDR
43304: LD_INT 1
43306: PUSH
43307: FOR_DOWNTO
43308: IFFALSE 43338
// result := Join ( result , array [ i ] ) ;
43310: LD_ADDR_VAR 0 2
43314: PUSH
43315: LD_VAR 0 2
43319: PPUSH
43320: LD_VAR 0 1
43324: PUSH
43325: LD_VAR 0 3
43329: ARRAY
43330: PPUSH
43331: CALL 48182 0 2
43335: ST_TO_ADDR
43336: GO 43307
43338: POP
43339: POP
// end ;
43340: LD_VAR 0 2
43344: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43345: LD_INT 0
43347: PPUSH
43348: PPUSH
43349: PPUSH
43350: PPUSH
43351: PPUSH
43352: PPUSH
// if not unit or not hexes then
43353: LD_VAR 0 1
43357: NOT
43358: IFTRUE 43367
43360: PUSH
43361: LD_VAR 0 2
43365: NOT
43366: OR
43367: IFFALSE 43371
// exit ;
43369: GO 43494
// dist := 9999 ;
43371: LD_ADDR_VAR 0 5
43375: PUSH
43376: LD_INT 9999
43378: ST_TO_ADDR
// for i = 1 to hexes do
43379: LD_ADDR_VAR 0 4
43383: PUSH
43384: DOUBLE
43385: LD_INT 1
43387: DEC
43388: ST_TO_ADDR
43389: LD_VAR 0 2
43393: PUSH
43394: FOR_TO
43395: IFFALSE 43482
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43397: LD_ADDR_VAR 0 6
43401: PUSH
43402: LD_VAR 0 1
43406: PPUSH
43407: LD_VAR 0 2
43411: PUSH
43412: LD_VAR 0 4
43416: ARRAY
43417: PUSH
43418: LD_INT 1
43420: ARRAY
43421: PPUSH
43422: LD_VAR 0 2
43426: PUSH
43427: LD_VAR 0 4
43431: ARRAY
43432: PUSH
43433: LD_INT 2
43435: ARRAY
43436: PPUSH
43437: CALL_OW 297
43441: ST_TO_ADDR
// if tdist < dist then
43442: LD_VAR 0 6
43446: PUSH
43447: LD_VAR 0 5
43451: LESS
43452: IFFALSE 43480
// begin hex := hexes [ i ] ;
43454: LD_ADDR_VAR 0 8
43458: PUSH
43459: LD_VAR 0 2
43463: PUSH
43464: LD_VAR 0 4
43468: ARRAY
43469: ST_TO_ADDR
// dist := tdist ;
43470: LD_ADDR_VAR 0 5
43474: PUSH
43475: LD_VAR 0 6
43479: ST_TO_ADDR
// end ; end ;
43480: GO 43394
43482: POP
43483: POP
// result := hex ;
43484: LD_ADDR_VAR 0 3
43488: PUSH
43489: LD_VAR 0 8
43493: ST_TO_ADDR
// end ;
43494: LD_VAR 0 3
43498: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43499: LD_INT 0
43501: PPUSH
43502: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43503: LD_VAR 0 1
43507: NOT
43508: IFTRUE 43547
43510: PUSH
43511: LD_VAR 0 1
43515: PUSH
43516: LD_INT 21
43518: PUSH
43519: LD_INT 2
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 23
43528: PUSH
43529: LD_INT 2
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PPUSH
43540: CALL_OW 69
43544: IN
43545: NOT
43546: OR
43547: IFFALSE 43551
// exit ;
43549: GO 43598
// for i = 1 to 3 do
43551: LD_ADDR_VAR 0 3
43555: PUSH
43556: DOUBLE
43557: LD_INT 1
43559: DEC
43560: ST_TO_ADDR
43561: LD_INT 3
43563: PUSH
43564: FOR_TO
43565: IFFALSE 43596
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43567: LD_VAR 0 1
43571: PPUSH
43572: CALL_OW 250
43576: PPUSH
43577: LD_VAR 0 1
43581: PPUSH
43582: CALL_OW 251
43586: PPUSH
43587: LD_INT 1
43589: PPUSH
43590: CALL_OW 453
43594: GO 43564
43596: POP
43597: POP
// end ;
43598: LD_VAR 0 2
43602: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43603: LD_INT 0
43605: PPUSH
43606: PPUSH
43607: PPUSH
43608: PPUSH
43609: PPUSH
43610: PPUSH
// if not unit or not enemy_unit then
43611: LD_VAR 0 1
43615: NOT
43616: IFTRUE 43625
43618: PUSH
43619: LD_VAR 0 2
43623: NOT
43624: OR
43625: IFFALSE 43629
// exit ;
43627: GO 44100
// if GetLives ( i ) < 250 then
43629: LD_VAR 0 4
43633: PPUSH
43634: CALL_OW 256
43638: PUSH
43639: LD_INT 250
43641: LESS
43642: IFFALSE 43655
// begin ComAutodestruct ( i ) ;
43644: LD_VAR 0 4
43648: PPUSH
43649: CALL 43499 0 1
// exit ;
43653: GO 44100
// end ; x := GetX ( enemy_unit ) ;
43655: LD_ADDR_VAR 0 7
43659: PUSH
43660: LD_VAR 0 2
43664: PPUSH
43665: CALL_OW 250
43669: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43670: LD_ADDR_VAR 0 8
43674: PUSH
43675: LD_VAR 0 2
43679: PPUSH
43680: CALL_OW 251
43684: ST_TO_ADDR
// if not x or not y then
43685: LD_VAR 0 7
43689: NOT
43690: IFTRUE 43699
43692: PUSH
43693: LD_VAR 0 8
43697: NOT
43698: OR
43699: IFFALSE 43703
// exit ;
43701: GO 44100
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43703: LD_ADDR_VAR 0 6
43707: PUSH
43708: LD_VAR 0 7
43712: PPUSH
43713: LD_INT 0
43715: PPUSH
43716: LD_INT 4
43718: PPUSH
43719: CALL_OW 272
43723: PUSH
43724: LD_VAR 0 8
43728: PPUSH
43729: LD_INT 0
43731: PPUSH
43732: LD_INT 4
43734: PPUSH
43735: CALL_OW 273
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_VAR 0 7
43748: PPUSH
43749: LD_INT 1
43751: PPUSH
43752: LD_INT 4
43754: PPUSH
43755: CALL_OW 272
43759: PUSH
43760: LD_VAR 0 8
43764: PPUSH
43765: LD_INT 1
43767: PPUSH
43768: LD_INT 4
43770: PPUSH
43771: CALL_OW 273
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_VAR 0 7
43784: PPUSH
43785: LD_INT 2
43787: PPUSH
43788: LD_INT 4
43790: PPUSH
43791: CALL_OW 272
43795: PUSH
43796: LD_VAR 0 8
43800: PPUSH
43801: LD_INT 2
43803: PPUSH
43804: LD_INT 4
43806: PPUSH
43807: CALL_OW 273
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_VAR 0 7
43820: PPUSH
43821: LD_INT 3
43823: PPUSH
43824: LD_INT 4
43826: PPUSH
43827: CALL_OW 272
43831: PUSH
43832: LD_VAR 0 8
43836: PPUSH
43837: LD_INT 3
43839: PPUSH
43840: LD_INT 4
43842: PPUSH
43843: CALL_OW 273
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_VAR 0 7
43856: PPUSH
43857: LD_INT 4
43859: PPUSH
43860: LD_INT 4
43862: PPUSH
43863: CALL_OW 272
43867: PUSH
43868: LD_VAR 0 8
43872: PPUSH
43873: LD_INT 4
43875: PPUSH
43876: LD_INT 4
43878: PPUSH
43879: CALL_OW 273
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_VAR 0 7
43892: PPUSH
43893: LD_INT 5
43895: PPUSH
43896: LD_INT 4
43898: PPUSH
43899: CALL_OW 272
43903: PUSH
43904: LD_VAR 0 8
43908: PPUSH
43909: LD_INT 5
43911: PPUSH
43912: LD_INT 4
43914: PPUSH
43915: CALL_OW 273
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: ST_TO_ADDR
// for i = tmp downto 1 do
43932: LD_ADDR_VAR 0 4
43936: PUSH
43937: DOUBLE
43938: LD_VAR 0 6
43942: INC
43943: ST_TO_ADDR
43944: LD_INT 1
43946: PUSH
43947: FOR_DOWNTO
43948: IFFALSE 44051
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43950: LD_VAR 0 6
43954: PUSH
43955: LD_VAR 0 4
43959: ARRAY
43960: PUSH
43961: LD_INT 1
43963: ARRAY
43964: PPUSH
43965: LD_VAR 0 6
43969: PUSH
43970: LD_VAR 0 4
43974: ARRAY
43975: PUSH
43976: LD_INT 2
43978: ARRAY
43979: PPUSH
43980: CALL_OW 488
43984: NOT
43985: IFTRUE 44027
43987: PUSH
43988: LD_VAR 0 6
43992: PUSH
43993: LD_VAR 0 4
43997: ARRAY
43998: PUSH
43999: LD_INT 1
44001: ARRAY
44002: PPUSH
44003: LD_VAR 0 6
44007: PUSH
44008: LD_VAR 0 4
44012: ARRAY
44013: PUSH
44014: LD_INT 2
44016: ARRAY
44017: PPUSH
44018: CALL_OW 428
44022: PUSH
44023: LD_INT 0
44025: NONEQUAL
44026: OR
44027: IFFALSE 44049
// tmp := Delete ( tmp , i ) ;
44029: LD_ADDR_VAR 0 6
44033: PUSH
44034: LD_VAR 0 6
44038: PPUSH
44039: LD_VAR 0 4
44043: PPUSH
44044: CALL_OW 3
44048: ST_TO_ADDR
44049: GO 43947
44051: POP
44052: POP
// j := GetClosestHex ( unit , tmp ) ;
44053: LD_ADDR_VAR 0 5
44057: PUSH
44058: LD_VAR 0 1
44062: PPUSH
44063: LD_VAR 0 6
44067: PPUSH
44068: CALL 43345 0 2
44072: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44073: LD_VAR 0 1
44077: PPUSH
44078: LD_VAR 0 5
44082: PUSH
44083: LD_INT 1
44085: ARRAY
44086: PPUSH
44087: LD_VAR 0 5
44091: PUSH
44092: LD_INT 2
44094: ARRAY
44095: PPUSH
44096: CALL_OW 111
// end ;
44100: LD_VAR 0 3
44104: RET
// export function PrepareApemanSoldier ( ) ; begin
44105: LD_INT 0
44107: PPUSH
// uc_nation := 0 ;
44108: LD_ADDR_OWVAR 21
44112: PUSH
44113: LD_INT 0
44115: ST_TO_ADDR
// hc_sex := sex_male ;
44116: LD_ADDR_OWVAR 27
44120: PUSH
44121: LD_INT 1
44123: ST_TO_ADDR
// hc_name :=  ;
44124: LD_ADDR_OWVAR 26
44128: PUSH
44129: LD_STRING 
44131: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44132: LD_ADDR_OWVAR 28
44136: PUSH
44137: LD_INT 15
44139: ST_TO_ADDR
// hc_gallery :=  ;
44140: LD_ADDR_OWVAR 33
44144: PUSH
44145: LD_STRING 
44147: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44148: LD_ADDR_OWVAR 31
44152: PUSH
44153: LD_INT 0
44155: PPUSH
44156: LD_INT 3
44158: PPUSH
44159: CALL_OW 12
44163: PUSH
44164: LD_INT 0
44166: PPUSH
44167: LD_INT 3
44169: PPUSH
44170: CALL_OW 12
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44187: LD_ADDR_OWVAR 29
44191: PUSH
44192: LD_INT 12
44194: PUSH
44195: LD_INT 12
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: ST_TO_ADDR
// end ;
44202: LD_VAR 0 1
44206: RET
// export function PrepareApemanEngineer ( ) ; begin
44207: LD_INT 0
44209: PPUSH
// uc_nation := 0 ;
44210: LD_ADDR_OWVAR 21
44214: PUSH
44215: LD_INT 0
44217: ST_TO_ADDR
// hc_sex := sex_male ;
44218: LD_ADDR_OWVAR 27
44222: PUSH
44223: LD_INT 1
44225: ST_TO_ADDR
// hc_name :=  ;
44226: LD_ADDR_OWVAR 26
44230: PUSH
44231: LD_STRING 
44233: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44234: LD_ADDR_OWVAR 28
44238: PUSH
44239: LD_INT 16
44241: ST_TO_ADDR
// hc_gallery :=  ;
44242: LD_ADDR_OWVAR 33
44246: PUSH
44247: LD_STRING 
44249: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44250: LD_ADDR_OWVAR 31
44254: PUSH
44255: LD_INT 0
44257: PPUSH
44258: LD_INT 3
44260: PPUSH
44261: CALL_OW 12
44265: PUSH
44266: LD_INT 0
44268: PPUSH
44269: LD_INT 3
44271: PPUSH
44272: CALL_OW 12
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44289: LD_ADDR_OWVAR 29
44293: PUSH
44294: LD_INT 12
44296: PUSH
44297: LD_INT 12
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: ST_TO_ADDR
// end ;
44304: LD_VAR 0 1
44308: RET
// export function PrepareApeman ( agressivity ) ; begin
44309: LD_INT 0
44311: PPUSH
// uc_side := 0 ;
44312: LD_ADDR_OWVAR 20
44316: PUSH
44317: LD_INT 0
44319: ST_TO_ADDR
// uc_nation := 0 ;
44320: LD_ADDR_OWVAR 21
44324: PUSH
44325: LD_INT 0
44327: ST_TO_ADDR
// hc_sex := sex_male ;
44328: LD_ADDR_OWVAR 27
44332: PUSH
44333: LD_INT 1
44335: ST_TO_ADDR
// hc_class := class_apeman ;
44336: LD_ADDR_OWVAR 28
44340: PUSH
44341: LD_INT 12
44343: ST_TO_ADDR
// hc_gallery :=  ;
44344: LD_ADDR_OWVAR 33
44348: PUSH
44349: LD_STRING 
44351: ST_TO_ADDR
// hc_name :=  ;
44352: LD_ADDR_OWVAR 26
44356: PUSH
44357: LD_STRING 
44359: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44360: LD_ADDR_OWVAR 29
44364: PUSH
44365: LD_INT 12
44367: PUSH
44368: LD_INT 12
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: ST_TO_ADDR
// if agressivity = 0 then
44375: LD_VAR 0 1
44379: PUSH
44380: LD_INT 0
44382: EQUAL
44383: IFFALSE 44395
// hc_agressivity := 0 else
44385: LD_ADDR_OWVAR 35
44389: PUSH
44390: LD_INT 0
44392: ST_TO_ADDR
44393: GO 44416
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44395: LD_ADDR_OWVAR 35
44399: PUSH
44400: LD_VAR 0 1
44404: NEG
44405: PPUSH
44406: LD_VAR 0 1
44410: PPUSH
44411: CALL_OW 12
44415: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44416: LD_ADDR_OWVAR 31
44420: PUSH
44421: LD_INT 0
44423: PPUSH
44424: LD_INT 3
44426: PPUSH
44427: CALL_OW 12
44431: PUSH
44432: LD_INT 0
44434: PPUSH
44435: LD_INT 3
44437: PPUSH
44438: CALL_OW 12
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: ST_TO_ADDR
// end ;
44455: LD_VAR 0 2
44459: RET
// export function PrepareTiger ( agressivity ) ; begin
44460: LD_INT 0
44462: PPUSH
// uc_side := 0 ;
44463: LD_ADDR_OWVAR 20
44467: PUSH
44468: LD_INT 0
44470: ST_TO_ADDR
// uc_nation := 0 ;
44471: LD_ADDR_OWVAR 21
44475: PUSH
44476: LD_INT 0
44478: ST_TO_ADDR
// InitHc ;
44479: CALL_OW 19
// hc_class := class_tiger ;
44483: LD_ADDR_OWVAR 28
44487: PUSH
44488: LD_INT 14
44490: ST_TO_ADDR
// hc_gallery :=  ;
44491: LD_ADDR_OWVAR 33
44495: PUSH
44496: LD_STRING 
44498: ST_TO_ADDR
// hc_name :=  ;
44499: LD_ADDR_OWVAR 26
44503: PUSH
44504: LD_STRING 
44506: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44507: LD_ADDR_OWVAR 35
44511: PUSH
44512: LD_VAR 0 1
44516: NEG
44517: PPUSH
44518: LD_VAR 0 1
44522: PPUSH
44523: CALL_OW 12
44527: ST_TO_ADDR
// end ;
44528: LD_VAR 0 2
44532: RET
// export function PrepareEnchidna ( ) ; begin
44533: LD_INT 0
44535: PPUSH
// uc_side := 0 ;
44536: LD_ADDR_OWVAR 20
44540: PUSH
44541: LD_INT 0
44543: ST_TO_ADDR
// uc_nation := 0 ;
44544: LD_ADDR_OWVAR 21
44548: PUSH
44549: LD_INT 0
44551: ST_TO_ADDR
// InitHc ;
44552: CALL_OW 19
// hc_class := class_baggie ;
44556: LD_ADDR_OWVAR 28
44560: PUSH
44561: LD_INT 13
44563: ST_TO_ADDR
// hc_gallery :=  ;
44564: LD_ADDR_OWVAR 33
44568: PUSH
44569: LD_STRING 
44571: ST_TO_ADDR
// hc_name :=  ;
44572: LD_ADDR_OWVAR 26
44576: PUSH
44577: LD_STRING 
44579: ST_TO_ADDR
// end ;
44580: LD_VAR 0 1
44584: RET
// export function PrepareFrog ( ) ; begin
44585: LD_INT 0
44587: PPUSH
// uc_side := 0 ;
44588: LD_ADDR_OWVAR 20
44592: PUSH
44593: LD_INT 0
44595: ST_TO_ADDR
// uc_nation := 0 ;
44596: LD_ADDR_OWVAR 21
44600: PUSH
44601: LD_INT 0
44603: ST_TO_ADDR
// InitHc ;
44604: CALL_OW 19
// hc_class := class_frog ;
44608: LD_ADDR_OWVAR 28
44612: PUSH
44613: LD_INT 19
44615: ST_TO_ADDR
// hc_gallery :=  ;
44616: LD_ADDR_OWVAR 33
44620: PUSH
44621: LD_STRING 
44623: ST_TO_ADDR
// hc_name :=  ;
44624: LD_ADDR_OWVAR 26
44628: PUSH
44629: LD_STRING 
44631: ST_TO_ADDR
// end ;
44632: LD_VAR 0 1
44636: RET
// export function PrepareFish ( ) ; begin
44637: LD_INT 0
44639: PPUSH
// uc_side := 0 ;
44640: LD_ADDR_OWVAR 20
44644: PUSH
44645: LD_INT 0
44647: ST_TO_ADDR
// uc_nation := 0 ;
44648: LD_ADDR_OWVAR 21
44652: PUSH
44653: LD_INT 0
44655: ST_TO_ADDR
// InitHc ;
44656: CALL_OW 19
// hc_class := class_fish ;
44660: LD_ADDR_OWVAR 28
44664: PUSH
44665: LD_INT 20
44667: ST_TO_ADDR
// hc_gallery :=  ;
44668: LD_ADDR_OWVAR 33
44672: PUSH
44673: LD_STRING 
44675: ST_TO_ADDR
// hc_name :=  ;
44676: LD_ADDR_OWVAR 26
44680: PUSH
44681: LD_STRING 
44683: ST_TO_ADDR
// end ;
44684: LD_VAR 0 1
44688: RET
// export function PrepareBird ( ) ; begin
44689: LD_INT 0
44691: PPUSH
// uc_side := 0 ;
44692: LD_ADDR_OWVAR 20
44696: PUSH
44697: LD_INT 0
44699: ST_TO_ADDR
// uc_nation := 0 ;
44700: LD_ADDR_OWVAR 21
44704: PUSH
44705: LD_INT 0
44707: ST_TO_ADDR
// InitHc ;
44708: CALL_OW 19
// hc_class := class_phororhacos ;
44712: LD_ADDR_OWVAR 28
44716: PUSH
44717: LD_INT 18
44719: ST_TO_ADDR
// hc_gallery :=  ;
44720: LD_ADDR_OWVAR 33
44724: PUSH
44725: LD_STRING 
44727: ST_TO_ADDR
// hc_name :=  ;
44728: LD_ADDR_OWVAR 26
44732: PUSH
44733: LD_STRING 
44735: ST_TO_ADDR
// end ;
44736: LD_VAR 0 1
44740: RET
// export function PrepareHorse ( ) ; begin
44741: LD_INT 0
44743: PPUSH
// uc_side := 0 ;
44744: LD_ADDR_OWVAR 20
44748: PUSH
44749: LD_INT 0
44751: ST_TO_ADDR
// uc_nation := 0 ;
44752: LD_ADDR_OWVAR 21
44756: PUSH
44757: LD_INT 0
44759: ST_TO_ADDR
// InitHc ;
44760: CALL_OW 19
// hc_class := class_horse ;
44764: LD_ADDR_OWVAR 28
44768: PUSH
44769: LD_INT 21
44771: ST_TO_ADDR
// hc_gallery :=  ;
44772: LD_ADDR_OWVAR 33
44776: PUSH
44777: LD_STRING 
44779: ST_TO_ADDR
// hc_name :=  ;
44780: LD_ADDR_OWVAR 26
44784: PUSH
44785: LD_STRING 
44787: ST_TO_ADDR
// end ;
44788: LD_VAR 0 1
44792: RET
// export function PrepareMastodont ( ) ; begin
44793: LD_INT 0
44795: PPUSH
// uc_side := 0 ;
44796: LD_ADDR_OWVAR 20
44800: PUSH
44801: LD_INT 0
44803: ST_TO_ADDR
// uc_nation := 0 ;
44804: LD_ADDR_OWVAR 21
44808: PUSH
44809: LD_INT 0
44811: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44812: LD_ADDR_OWVAR 37
44816: PUSH
44817: LD_INT 31
44819: ST_TO_ADDR
// vc_control := control_rider ;
44820: LD_ADDR_OWVAR 38
44824: PUSH
44825: LD_INT 4
44827: ST_TO_ADDR
// end ;
44828: LD_VAR 0 1
44832: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44833: LD_INT 0
44835: PPUSH
44836: PPUSH
44837: PPUSH
// uc_side = 0 ;
44838: LD_ADDR_OWVAR 20
44842: PUSH
44843: LD_INT 0
44845: ST_TO_ADDR
// uc_nation = 0 ;
44846: LD_ADDR_OWVAR 21
44850: PUSH
44851: LD_INT 0
44853: ST_TO_ADDR
// InitHc_All ( ) ;
44854: CALL_OW 584
// InitVc ;
44858: CALL_OW 20
// if mastodonts then
44862: LD_VAR 0 6
44866: IFFALSE 44933
// for i = 1 to mastodonts do
44868: LD_ADDR_VAR 0 11
44872: PUSH
44873: DOUBLE
44874: LD_INT 1
44876: DEC
44877: ST_TO_ADDR
44878: LD_VAR 0 6
44882: PUSH
44883: FOR_TO
44884: IFFALSE 44931
// begin vc_chassis := 31 ;
44886: LD_ADDR_OWVAR 37
44890: PUSH
44891: LD_INT 31
44893: ST_TO_ADDR
// vc_control := control_rider ;
44894: LD_ADDR_OWVAR 38
44898: PUSH
44899: LD_INT 4
44901: ST_TO_ADDR
// animal := CreateVehicle ;
44902: LD_ADDR_VAR 0 12
44906: PUSH
44907: CALL_OW 45
44911: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44912: LD_VAR 0 12
44916: PPUSH
44917: LD_VAR 0 8
44921: PPUSH
44922: LD_INT 0
44924: PPUSH
44925: CALL 47075 0 3
// end ;
44929: GO 44883
44931: POP
44932: POP
// if horses then
44933: LD_VAR 0 5
44937: IFFALSE 45004
// for i = 1 to horses do
44939: LD_ADDR_VAR 0 11
44943: PUSH
44944: DOUBLE
44945: LD_INT 1
44947: DEC
44948: ST_TO_ADDR
44949: LD_VAR 0 5
44953: PUSH
44954: FOR_TO
44955: IFFALSE 45002
// begin hc_class := 21 ;
44957: LD_ADDR_OWVAR 28
44961: PUSH
44962: LD_INT 21
44964: ST_TO_ADDR
// hc_gallery :=  ;
44965: LD_ADDR_OWVAR 33
44969: PUSH
44970: LD_STRING 
44972: ST_TO_ADDR
// animal := CreateHuman ;
44973: LD_ADDR_VAR 0 12
44977: PUSH
44978: CALL_OW 44
44982: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44983: LD_VAR 0 12
44987: PPUSH
44988: LD_VAR 0 8
44992: PPUSH
44993: LD_INT 0
44995: PPUSH
44996: CALL 47075 0 3
// end ;
45000: GO 44954
45002: POP
45003: POP
// if birds then
45004: LD_VAR 0 1
45008: IFFALSE 45075
// for i = 1 to birds do
45010: LD_ADDR_VAR 0 11
45014: PUSH
45015: DOUBLE
45016: LD_INT 1
45018: DEC
45019: ST_TO_ADDR
45020: LD_VAR 0 1
45024: PUSH
45025: FOR_TO
45026: IFFALSE 45073
// begin hc_class := 18 ;
45028: LD_ADDR_OWVAR 28
45032: PUSH
45033: LD_INT 18
45035: ST_TO_ADDR
// hc_gallery =  ;
45036: LD_ADDR_OWVAR 33
45040: PUSH
45041: LD_STRING 
45043: ST_TO_ADDR
// animal := CreateHuman ;
45044: LD_ADDR_VAR 0 12
45048: PUSH
45049: CALL_OW 44
45053: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45054: LD_VAR 0 12
45058: PPUSH
45059: LD_VAR 0 8
45063: PPUSH
45064: LD_INT 0
45066: PPUSH
45067: CALL 47075 0 3
// end ;
45071: GO 45025
45073: POP
45074: POP
// if tigers then
45075: LD_VAR 0 2
45079: IFFALSE 45163
// for i = 1 to tigers do
45081: LD_ADDR_VAR 0 11
45085: PUSH
45086: DOUBLE
45087: LD_INT 1
45089: DEC
45090: ST_TO_ADDR
45091: LD_VAR 0 2
45095: PUSH
45096: FOR_TO
45097: IFFALSE 45161
// begin hc_class = class_tiger ;
45099: LD_ADDR_OWVAR 28
45103: PUSH
45104: LD_INT 14
45106: ST_TO_ADDR
// hc_gallery =  ;
45107: LD_ADDR_OWVAR 33
45111: PUSH
45112: LD_STRING 
45114: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45115: LD_ADDR_OWVAR 35
45119: PUSH
45120: LD_INT 7
45122: NEG
45123: PPUSH
45124: LD_INT 7
45126: PPUSH
45127: CALL_OW 12
45131: ST_TO_ADDR
// animal := CreateHuman ;
45132: LD_ADDR_VAR 0 12
45136: PUSH
45137: CALL_OW 44
45141: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45142: LD_VAR 0 12
45146: PPUSH
45147: LD_VAR 0 8
45151: PPUSH
45152: LD_INT 0
45154: PPUSH
45155: CALL 47075 0 3
// end ;
45159: GO 45096
45161: POP
45162: POP
// if apemans then
45163: LD_VAR 0 3
45167: IFFALSE 45290
// for i = 1 to apemans do
45169: LD_ADDR_VAR 0 11
45173: PUSH
45174: DOUBLE
45175: LD_INT 1
45177: DEC
45178: ST_TO_ADDR
45179: LD_VAR 0 3
45183: PUSH
45184: FOR_TO
45185: IFFALSE 45288
// begin hc_class = class_apeman ;
45187: LD_ADDR_OWVAR 28
45191: PUSH
45192: LD_INT 12
45194: ST_TO_ADDR
// hc_gallery =  ;
45195: LD_ADDR_OWVAR 33
45199: PUSH
45200: LD_STRING 
45202: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45203: LD_ADDR_OWVAR 35
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PPUSH
45212: LD_INT 2
45214: PPUSH
45215: CALL_OW 12
45219: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45220: LD_ADDR_OWVAR 31
45224: PUSH
45225: LD_INT 1
45227: PPUSH
45228: LD_INT 3
45230: PPUSH
45231: CALL_OW 12
45235: PUSH
45236: LD_INT 1
45238: PPUSH
45239: LD_INT 3
45241: PPUSH
45242: CALL_OW 12
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: ST_TO_ADDR
// animal := CreateHuman ;
45259: LD_ADDR_VAR 0 12
45263: PUSH
45264: CALL_OW 44
45268: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45269: LD_VAR 0 12
45273: PPUSH
45274: LD_VAR 0 8
45278: PPUSH
45279: LD_INT 0
45281: PPUSH
45282: CALL 47075 0 3
// end ;
45286: GO 45184
45288: POP
45289: POP
// if enchidnas then
45290: LD_VAR 0 4
45294: IFFALSE 45361
// for i = 1 to enchidnas do
45296: LD_ADDR_VAR 0 11
45300: PUSH
45301: DOUBLE
45302: LD_INT 1
45304: DEC
45305: ST_TO_ADDR
45306: LD_VAR 0 4
45310: PUSH
45311: FOR_TO
45312: IFFALSE 45359
// begin hc_class = 13 ;
45314: LD_ADDR_OWVAR 28
45318: PUSH
45319: LD_INT 13
45321: ST_TO_ADDR
// hc_gallery =  ;
45322: LD_ADDR_OWVAR 33
45326: PUSH
45327: LD_STRING 
45329: ST_TO_ADDR
// animal := CreateHuman ;
45330: LD_ADDR_VAR 0 12
45334: PUSH
45335: CALL_OW 44
45339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45340: LD_VAR 0 12
45344: PPUSH
45345: LD_VAR 0 8
45349: PPUSH
45350: LD_INT 0
45352: PPUSH
45353: CALL 47075 0 3
// end ;
45357: GO 45311
45359: POP
45360: POP
// if fishes then
45361: LD_VAR 0 7
45365: IFFALSE 45432
// for i = 1 to fishes do
45367: LD_ADDR_VAR 0 11
45371: PUSH
45372: DOUBLE
45373: LD_INT 1
45375: DEC
45376: ST_TO_ADDR
45377: LD_VAR 0 7
45381: PUSH
45382: FOR_TO
45383: IFFALSE 45430
// begin hc_class = 20 ;
45385: LD_ADDR_OWVAR 28
45389: PUSH
45390: LD_INT 20
45392: ST_TO_ADDR
// hc_gallery =  ;
45393: LD_ADDR_OWVAR 33
45397: PUSH
45398: LD_STRING 
45400: ST_TO_ADDR
// animal := CreateHuman ;
45401: LD_ADDR_VAR 0 12
45405: PUSH
45406: CALL_OW 44
45410: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45411: LD_VAR 0 12
45415: PPUSH
45416: LD_VAR 0 9
45420: PPUSH
45421: LD_INT 0
45423: PPUSH
45424: CALL 47075 0 3
// end ;
45428: GO 45382
45430: POP
45431: POP
// end ;
45432: LD_VAR 0 10
45436: RET
// export function WantHeal ( sci , unit ) ; begin
45437: LD_INT 0
45439: PPUSH
// if GetTaskList ( sci ) > 0 then
45440: LD_VAR 0 1
45444: PPUSH
45445: CALL_OW 437
45449: PUSH
45450: LD_INT 0
45452: GREATER
45453: IFFALSE 45525
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45455: LD_VAR 0 1
45459: PPUSH
45460: CALL_OW 437
45464: PUSH
45465: LD_INT 1
45467: ARRAY
45468: PUSH
45469: LD_INT 1
45471: ARRAY
45472: PUSH
45473: LD_STRING l
45475: EQUAL
45476: IFFALSE 45503
45478: PUSH
45479: LD_VAR 0 1
45483: PPUSH
45484: CALL_OW 437
45488: PUSH
45489: LD_INT 1
45491: ARRAY
45492: PUSH
45493: LD_INT 4
45495: ARRAY
45496: PUSH
45497: LD_VAR 0 2
45501: EQUAL
45502: AND
45503: IFFALSE 45515
// result := true else
45505: LD_ADDR_VAR 0 3
45509: PUSH
45510: LD_INT 1
45512: ST_TO_ADDR
45513: GO 45523
// result := false ;
45515: LD_ADDR_VAR 0 3
45519: PUSH
45520: LD_INT 0
45522: ST_TO_ADDR
// end else
45523: GO 45533
// result := false ;
45525: LD_ADDR_VAR 0 3
45529: PUSH
45530: LD_INT 0
45532: ST_TO_ADDR
// end ;
45533: LD_VAR 0 3
45537: RET
// export function HealTarget ( sci ) ; begin
45538: LD_INT 0
45540: PPUSH
// if not sci then
45541: LD_VAR 0 1
45545: NOT
45546: IFFALSE 45550
// exit ;
45548: GO 45615
// result := 0 ;
45550: LD_ADDR_VAR 0 2
45554: PUSH
45555: LD_INT 0
45557: ST_TO_ADDR
// if GetTaskList ( sci ) then
45558: LD_VAR 0 1
45562: PPUSH
45563: CALL_OW 437
45567: IFFALSE 45615
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45569: LD_VAR 0 1
45573: PPUSH
45574: CALL_OW 437
45578: PUSH
45579: LD_INT 1
45581: ARRAY
45582: PUSH
45583: LD_INT 1
45585: ARRAY
45586: PUSH
45587: LD_STRING l
45589: EQUAL
45590: IFFALSE 45615
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45592: LD_ADDR_VAR 0 2
45596: PUSH
45597: LD_VAR 0 1
45601: PPUSH
45602: CALL_OW 437
45606: PUSH
45607: LD_INT 1
45609: ARRAY
45610: PUSH
45611: LD_INT 4
45613: ARRAY
45614: ST_TO_ADDR
// end ;
45615: LD_VAR 0 2
45619: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45620: LD_INT 0
45622: PPUSH
45623: PPUSH
45624: PPUSH
45625: PPUSH
// if not base_units then
45626: LD_VAR 0 1
45630: NOT
45631: IFFALSE 45635
// exit ;
45633: GO 45722
// result := false ;
45635: LD_ADDR_VAR 0 2
45639: PUSH
45640: LD_INT 0
45642: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45643: LD_ADDR_VAR 0 5
45647: PUSH
45648: LD_VAR 0 1
45652: PPUSH
45653: LD_INT 21
45655: PUSH
45656: LD_INT 3
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PPUSH
45663: CALL_OW 72
45667: ST_TO_ADDR
// if not tmp then
45668: LD_VAR 0 5
45672: NOT
45673: IFFALSE 45677
// exit ;
45675: GO 45722
// for i in tmp do
45677: LD_ADDR_VAR 0 3
45681: PUSH
45682: LD_VAR 0 5
45686: PUSH
45687: FOR_IN
45688: IFFALSE 45720
// begin result := EnemyInRange ( i , 22 ) ;
45690: LD_ADDR_VAR 0 2
45694: PUSH
45695: LD_VAR 0 3
45699: PPUSH
45700: LD_INT 22
45702: PPUSH
45703: CALL 43147 0 2
45707: ST_TO_ADDR
// if result then
45708: LD_VAR 0 2
45712: IFFALSE 45718
// exit ;
45714: POP
45715: POP
45716: GO 45722
// end ;
45718: GO 45687
45720: POP
45721: POP
// end ;
45722: LD_VAR 0 2
45726: RET
// export function FilterByTag ( units , tag ) ; begin
45727: LD_INT 0
45729: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45730: LD_ADDR_VAR 0 3
45734: PUSH
45735: LD_VAR 0 1
45739: PPUSH
45740: LD_INT 120
45742: PUSH
45743: LD_VAR 0 2
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PPUSH
45752: CALL_OW 72
45756: ST_TO_ADDR
// end ;
45757: LD_VAR 0 3
45761: RET
// export function IsDriver ( un ) ; begin
45762: LD_INT 0
45764: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45765: LD_ADDR_VAR 0 2
45769: PUSH
45770: LD_VAR 0 1
45774: PUSH
45775: LD_INT 55
45777: PUSH
45778: EMPTY
45779: LIST
45780: PPUSH
45781: CALL_OW 69
45785: IN
45786: ST_TO_ADDR
// end ;
45787: LD_VAR 0 2
45791: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45792: LD_INT 0
45794: PPUSH
45795: PPUSH
// list := [ ] ;
45796: LD_ADDR_VAR 0 5
45800: PUSH
45801: EMPTY
45802: ST_TO_ADDR
// case d of 0 :
45803: LD_VAR 0 3
45807: PUSH
45808: LD_INT 0
45810: DOUBLE
45811: EQUAL
45812: IFTRUE 45816
45814: GO 45949
45816: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45817: LD_ADDR_VAR 0 5
45821: PUSH
45822: LD_VAR 0 1
45826: PUSH
45827: LD_INT 4
45829: MINUS
45830: PUSH
45831: LD_VAR 0 2
45835: PUSH
45836: LD_INT 4
45838: MINUS
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: LIST
45847: PUSH
45848: LD_VAR 0 1
45852: PUSH
45853: LD_INT 3
45855: MINUS
45856: PUSH
45857: LD_VAR 0 2
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: LIST
45869: PUSH
45870: LD_VAR 0 1
45874: PUSH
45875: LD_INT 4
45877: PLUS
45878: PUSH
45879: LD_VAR 0 2
45883: PUSH
45884: LD_INT 4
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: LIST
45891: PUSH
45892: LD_VAR 0 1
45896: PUSH
45897: LD_INT 3
45899: PLUS
45900: PUSH
45901: LD_VAR 0 2
45905: PUSH
45906: LD_INT 3
45908: PLUS
45909: PUSH
45910: LD_INT 5
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: LIST
45917: PUSH
45918: LD_VAR 0 1
45922: PUSH
45923: LD_VAR 0 2
45927: PUSH
45928: LD_INT 4
45930: PLUS
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: LIST
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: ST_TO_ADDR
// end ; 1 :
45947: GO 46647
45949: LD_INT 1
45951: DOUBLE
45952: EQUAL
45953: IFTRUE 45957
45955: GO 46090
45957: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45958: LD_ADDR_VAR 0 5
45962: PUSH
45963: LD_VAR 0 1
45967: PUSH
45968: LD_VAR 0 2
45972: PUSH
45973: LD_INT 4
45975: MINUS
45976: PUSH
45977: LD_INT 3
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: LIST
45984: PUSH
45985: LD_VAR 0 1
45989: PUSH
45990: LD_INT 3
45992: MINUS
45993: PUSH
45994: LD_VAR 0 2
45998: PUSH
45999: LD_INT 3
46001: MINUS
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: LIST
46010: PUSH
46011: LD_VAR 0 1
46015: PUSH
46016: LD_INT 4
46018: MINUS
46019: PUSH
46020: LD_VAR 0 2
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: LIST
46032: PUSH
46033: LD_VAR 0 1
46037: PUSH
46038: LD_VAR 0 2
46042: PUSH
46043: LD_INT 3
46045: PLUS
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: LIST
46054: PUSH
46055: LD_VAR 0 1
46059: PUSH
46060: LD_INT 4
46062: PLUS
46063: PUSH
46064: LD_VAR 0 2
46068: PUSH
46069: LD_INT 4
46071: PLUS
46072: PUSH
46073: LD_INT 5
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: LIST
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: ST_TO_ADDR
// end ; 2 :
46088: GO 46647
46090: LD_INT 2
46092: DOUBLE
46093: EQUAL
46094: IFTRUE 46098
46096: GO 46227
46098: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46099: LD_ADDR_VAR 0 5
46103: PUSH
46104: LD_VAR 0 1
46108: PUSH
46109: LD_VAR 0 2
46113: PUSH
46114: LD_INT 3
46116: MINUS
46117: PUSH
46118: LD_INT 3
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: LIST
46125: PUSH
46126: LD_VAR 0 1
46130: PUSH
46131: LD_INT 4
46133: PLUS
46134: PUSH
46135: LD_VAR 0 2
46139: PUSH
46140: LD_INT 4
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: LIST
46147: PUSH
46148: LD_VAR 0 1
46152: PUSH
46153: LD_VAR 0 2
46157: PUSH
46158: LD_INT 4
46160: PLUS
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: LIST
46169: PUSH
46170: LD_VAR 0 1
46174: PUSH
46175: LD_INT 3
46177: MINUS
46178: PUSH
46179: LD_VAR 0 2
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: LIST
46191: PUSH
46192: LD_VAR 0 1
46196: PUSH
46197: LD_INT 4
46199: MINUS
46200: PUSH
46201: LD_VAR 0 2
46205: PUSH
46206: LD_INT 4
46208: MINUS
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: LIST
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: ST_TO_ADDR
// end ; 3 :
46225: GO 46647
46227: LD_INT 3
46229: DOUBLE
46230: EQUAL
46231: IFTRUE 46235
46233: GO 46368
46235: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46236: LD_ADDR_VAR 0 5
46240: PUSH
46241: LD_VAR 0 1
46245: PUSH
46246: LD_INT 3
46248: PLUS
46249: PUSH
46250: LD_VAR 0 2
46254: PUSH
46255: LD_INT 4
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: PUSH
46263: LD_VAR 0 1
46267: PUSH
46268: LD_INT 4
46270: PLUS
46271: PUSH
46272: LD_VAR 0 2
46276: PUSH
46277: LD_INT 4
46279: PLUS
46280: PUSH
46281: LD_INT 5
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: LIST
46288: PUSH
46289: LD_VAR 0 1
46293: PUSH
46294: LD_INT 4
46296: MINUS
46297: PUSH
46298: LD_VAR 0 2
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: LIST
46310: PUSH
46311: LD_VAR 0 1
46315: PUSH
46316: LD_VAR 0 2
46320: PUSH
46321: LD_INT 4
46323: MINUS
46324: PUSH
46325: LD_INT 3
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: LIST
46332: PUSH
46333: LD_VAR 0 1
46337: PUSH
46338: LD_INT 3
46340: MINUS
46341: PUSH
46342: LD_VAR 0 2
46346: PUSH
46347: LD_INT 3
46349: MINUS
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: LIST
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: ST_TO_ADDR
// end ; 4 :
46366: GO 46647
46368: LD_INT 4
46370: DOUBLE
46371: EQUAL
46372: IFTRUE 46376
46374: GO 46509
46376: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46377: LD_ADDR_VAR 0 5
46381: PUSH
46382: LD_VAR 0 1
46386: PUSH
46387: LD_VAR 0 2
46391: PUSH
46392: LD_INT 4
46394: PLUS
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: LIST
46403: PUSH
46404: LD_VAR 0 1
46408: PUSH
46409: LD_INT 3
46411: PLUS
46412: PUSH
46413: LD_VAR 0 2
46417: PUSH
46418: LD_INT 3
46420: PLUS
46421: PUSH
46422: LD_INT 5
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: LIST
46429: PUSH
46430: LD_VAR 0 1
46434: PUSH
46435: LD_INT 4
46437: PLUS
46438: PUSH
46439: LD_VAR 0 2
46443: PUSH
46444: LD_INT 4
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: LIST
46451: PUSH
46452: LD_VAR 0 1
46456: PUSH
46457: LD_VAR 0 2
46461: PUSH
46462: LD_INT 3
46464: MINUS
46465: PUSH
46466: LD_INT 3
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: LIST
46473: PUSH
46474: LD_VAR 0 1
46478: PUSH
46479: LD_INT 4
46481: MINUS
46482: PUSH
46483: LD_VAR 0 2
46487: PUSH
46488: LD_INT 4
46490: MINUS
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: LIST
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: ST_TO_ADDR
// end ; 5 :
46507: GO 46647
46509: LD_INT 5
46511: DOUBLE
46512: EQUAL
46513: IFTRUE 46517
46515: GO 46646
46517: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46518: LD_ADDR_VAR 0 5
46522: PUSH
46523: LD_VAR 0 1
46527: PUSH
46528: LD_INT 4
46530: MINUS
46531: PUSH
46532: LD_VAR 0 2
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: LIST
46544: PUSH
46545: LD_VAR 0 1
46549: PUSH
46550: LD_VAR 0 2
46554: PUSH
46555: LD_INT 4
46557: MINUS
46558: PUSH
46559: LD_INT 3
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: LIST
46566: PUSH
46567: LD_VAR 0 1
46571: PUSH
46572: LD_INT 4
46574: PLUS
46575: PUSH
46576: LD_VAR 0 2
46580: PUSH
46581: LD_INT 4
46583: PLUS
46584: PUSH
46585: LD_INT 5
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: LIST
46592: PUSH
46593: LD_VAR 0 1
46597: PUSH
46598: LD_INT 3
46600: PLUS
46601: PUSH
46602: LD_VAR 0 2
46606: PUSH
46607: LD_INT 4
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: LIST
46614: PUSH
46615: LD_VAR 0 1
46619: PUSH
46620: LD_VAR 0 2
46624: PUSH
46625: LD_INT 3
46627: PLUS
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: LIST
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: ST_TO_ADDR
// end ; end ;
46644: GO 46647
46646: POP
// result := list ;
46647: LD_ADDR_VAR 0 4
46651: PUSH
46652: LD_VAR 0 5
46656: ST_TO_ADDR
// end ;
46657: LD_VAR 0 4
46661: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46662: LD_INT 0
46664: PPUSH
46665: PPUSH
46666: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46667: LD_VAR 0 1
46671: NOT
46672: IFTRUE 46700
46674: PUSH
46675: LD_VAR 0 2
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: LD_INT 3
46688: PUSH
46689: LD_INT 4
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: IN
46698: NOT
46699: OR
46700: IFFALSE 46704
// exit ;
46702: GO 46787
// tmp := [ ] ;
46704: LD_ADDR_VAR 0 5
46708: PUSH
46709: EMPTY
46710: ST_TO_ADDR
// for i in units do
46711: LD_ADDR_VAR 0 4
46715: PUSH
46716: LD_VAR 0 1
46720: PUSH
46721: FOR_IN
46722: IFFALSE 46756
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46724: LD_ADDR_VAR 0 5
46728: PUSH
46729: LD_VAR 0 5
46733: PPUSH
46734: LD_VAR 0 4
46738: PPUSH
46739: LD_VAR 0 2
46743: PPUSH
46744: CALL_OW 259
46748: PPUSH
46749: CALL 48182 0 2
46753: ST_TO_ADDR
46754: GO 46721
46756: POP
46757: POP
// if not tmp then
46758: LD_VAR 0 5
46762: NOT
46763: IFFALSE 46767
// exit ;
46765: GO 46787
// result := SortListByListDesc ( units , tmp ) ;
46767: LD_ADDR_VAR 0 3
46771: PUSH
46772: LD_VAR 0 1
46776: PPUSH
46777: LD_VAR 0 5
46781: PPUSH
46782: CALL_OW 77
46786: ST_TO_ADDR
// end ;
46787: LD_VAR 0 3
46791: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46792: LD_INT 0
46794: PPUSH
46795: PPUSH
46796: PPUSH
// result := false ;
46797: LD_ADDR_VAR 0 3
46801: PUSH
46802: LD_INT 0
46804: ST_TO_ADDR
// if not building then
46805: LD_VAR 0 2
46809: NOT
46810: IFFALSE 46814
// exit ;
46812: GO 46958
// x := GetX ( building ) ;
46814: LD_ADDR_VAR 0 4
46818: PUSH
46819: LD_VAR 0 2
46823: PPUSH
46824: CALL_OW 250
46828: ST_TO_ADDR
// y := GetY ( building ) ;
46829: LD_ADDR_VAR 0 5
46833: PUSH
46834: LD_VAR 0 2
46838: PPUSH
46839: CALL_OW 251
46843: ST_TO_ADDR
// if not x or not y then
46844: LD_VAR 0 4
46848: NOT
46849: IFTRUE 46858
46851: PUSH
46852: LD_VAR 0 5
46856: NOT
46857: OR
46858: IFFALSE 46862
// exit ;
46860: GO 46958
// if GetTaskList ( unit ) then
46862: LD_VAR 0 1
46866: PPUSH
46867: CALL_OW 437
46871: IFFALSE 46958
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46873: LD_STRING e
46875: PUSH
46876: LD_VAR 0 1
46880: PPUSH
46881: CALL_OW 437
46885: PUSH
46886: LD_INT 1
46888: ARRAY
46889: PUSH
46890: LD_INT 1
46892: ARRAY
46893: EQUAL
46894: IFFALSE 46921
46896: PUSH
46897: LD_VAR 0 4
46901: PUSH
46902: LD_VAR 0 1
46906: PPUSH
46907: CALL_OW 437
46911: PUSH
46912: LD_INT 1
46914: ARRAY
46915: PUSH
46916: LD_INT 2
46918: ARRAY
46919: EQUAL
46920: AND
46921: IFFALSE 46948
46923: PUSH
46924: LD_VAR 0 5
46928: PUSH
46929: LD_VAR 0 1
46933: PPUSH
46934: CALL_OW 437
46938: PUSH
46939: LD_INT 1
46941: ARRAY
46942: PUSH
46943: LD_INT 3
46945: ARRAY
46946: EQUAL
46947: AND
46948: IFFALSE 46958
// result := true end ;
46950: LD_ADDR_VAR 0 3
46954: PUSH
46955: LD_INT 1
46957: ST_TO_ADDR
// end ;
46958: LD_VAR 0 3
46962: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46963: LD_INT 0
46965: PPUSH
// result := false ;
46966: LD_ADDR_VAR 0 4
46970: PUSH
46971: LD_INT 0
46973: ST_TO_ADDR
// if GetTaskList ( unit ) then
46974: LD_VAR 0 1
46978: PPUSH
46979: CALL_OW 437
46983: IFFALSE 47070
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46985: LD_STRING M
46987: PUSH
46988: LD_VAR 0 1
46992: PPUSH
46993: CALL_OW 437
46997: PUSH
46998: LD_INT 1
47000: ARRAY
47001: PUSH
47002: LD_INT 1
47004: ARRAY
47005: EQUAL
47006: IFFALSE 47033
47008: PUSH
47009: LD_VAR 0 2
47013: PUSH
47014: LD_VAR 0 1
47018: PPUSH
47019: CALL_OW 437
47023: PUSH
47024: LD_INT 1
47026: ARRAY
47027: PUSH
47028: LD_INT 2
47030: ARRAY
47031: EQUAL
47032: AND
47033: IFFALSE 47060
47035: PUSH
47036: LD_VAR 0 3
47040: PUSH
47041: LD_VAR 0 1
47045: PPUSH
47046: CALL_OW 437
47050: PUSH
47051: LD_INT 1
47053: ARRAY
47054: PUSH
47055: LD_INT 3
47057: ARRAY
47058: EQUAL
47059: AND
47060: IFFALSE 47070
// result := true ;
47062: LD_ADDR_VAR 0 4
47066: PUSH
47067: LD_INT 1
47069: ST_TO_ADDR
// end ; end ;
47070: LD_VAR 0 4
47074: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47075: LD_INT 0
47077: PPUSH
47078: PPUSH
47079: PPUSH
47080: PPUSH
// if not unit or not area then
47081: LD_VAR 0 1
47085: NOT
47086: IFTRUE 47095
47088: PUSH
47089: LD_VAR 0 2
47093: NOT
47094: OR
47095: IFFALSE 47099
// exit ;
47097: GO 47275
// tmp := AreaToList ( area , i ) ;
47099: LD_ADDR_VAR 0 6
47103: PUSH
47104: LD_VAR 0 2
47108: PPUSH
47109: LD_VAR 0 5
47113: PPUSH
47114: CALL_OW 517
47118: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47119: LD_ADDR_VAR 0 5
47123: PUSH
47124: DOUBLE
47125: LD_INT 1
47127: DEC
47128: ST_TO_ADDR
47129: LD_VAR 0 6
47133: PUSH
47134: LD_INT 1
47136: ARRAY
47137: PUSH
47138: FOR_TO
47139: IFFALSE 47273
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47141: LD_ADDR_VAR 0 7
47145: PUSH
47146: LD_VAR 0 6
47150: PUSH
47151: LD_INT 1
47153: ARRAY
47154: PUSH
47155: LD_VAR 0 5
47159: ARRAY
47160: PUSH
47161: LD_VAR 0 6
47165: PUSH
47166: LD_INT 2
47168: ARRAY
47169: PUSH
47170: LD_VAR 0 5
47174: ARRAY
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47180: LD_INT 92
47182: PUSH
47183: LD_VAR 0 7
47187: PUSH
47188: LD_INT 1
47190: ARRAY
47191: PUSH
47192: LD_VAR 0 7
47196: PUSH
47197: LD_INT 2
47199: ARRAY
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: PPUSH
47210: CALL_OW 69
47214: PUSH
47215: LD_INT 0
47217: EQUAL
47218: IFFALSE 47271
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47220: LD_VAR 0 1
47224: PPUSH
47225: LD_VAR 0 7
47229: PUSH
47230: LD_INT 1
47232: ARRAY
47233: PPUSH
47234: LD_VAR 0 7
47238: PUSH
47239: LD_INT 2
47241: ARRAY
47242: PPUSH
47243: LD_VAR 0 3
47247: PPUSH
47248: CALL_OW 48
// result := IsPlaced ( unit ) ;
47252: LD_ADDR_VAR 0 4
47256: PUSH
47257: LD_VAR 0 1
47261: PPUSH
47262: CALL_OW 305
47266: ST_TO_ADDR
// exit ;
47267: POP
47268: POP
47269: GO 47275
// end ; end ;
47271: GO 47138
47273: POP
47274: POP
// end ;
47275: LD_VAR 0 4
47279: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47280: LD_INT 0
47282: PPUSH
47283: PPUSH
47284: PPUSH
// if not side or side > 8 then
47285: LD_VAR 0 1
47289: NOT
47290: IFTRUE 47302
47292: PUSH
47293: LD_VAR 0 1
47297: PUSH
47298: LD_INT 8
47300: GREATER
47301: OR
47302: IFFALSE 47306
// exit ;
47304: GO 47493
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47306: LD_ADDR_VAR 0 4
47310: PUSH
47311: LD_INT 22
47313: PUSH
47314: LD_VAR 0 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 21
47325: PUSH
47326: LD_INT 3
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PPUSH
47337: CALL_OW 69
47341: ST_TO_ADDR
// if not tmp then
47342: LD_VAR 0 4
47346: NOT
47347: IFFALSE 47351
// exit ;
47349: GO 47493
// enable_addtolog := true ;
47351: LD_ADDR_OWVAR 81
47355: PUSH
47356: LD_INT 1
47358: ST_TO_ADDR
// AddToLog ( [ ) ;
47359: LD_STRING [
47361: PPUSH
47362: CALL_OW 561
// for i in tmp do
47366: LD_ADDR_VAR 0 3
47370: PUSH
47371: LD_VAR 0 4
47375: PUSH
47376: FOR_IN
47377: IFFALSE 47484
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47379: LD_STRING [
47381: PUSH
47382: LD_VAR 0 3
47386: PPUSH
47387: CALL_OW 266
47391: STR
47392: PUSH
47393: LD_STRING , 
47395: STR
47396: PUSH
47397: LD_VAR 0 3
47401: PPUSH
47402: CALL_OW 250
47406: STR
47407: PUSH
47408: LD_STRING , 
47410: STR
47411: PUSH
47412: LD_VAR 0 3
47416: PPUSH
47417: CALL_OW 251
47421: STR
47422: PUSH
47423: LD_STRING , 
47425: STR
47426: PUSH
47427: LD_VAR 0 3
47431: PPUSH
47432: CALL_OW 254
47436: STR
47437: PUSH
47438: LD_STRING , 
47440: STR
47441: PUSH
47442: LD_VAR 0 3
47446: PPUSH
47447: LD_INT 1
47449: PPUSH
47450: CALL_OW 268
47454: STR
47455: PUSH
47456: LD_STRING , 
47458: STR
47459: PUSH
47460: LD_VAR 0 3
47464: PPUSH
47465: LD_INT 2
47467: PPUSH
47468: CALL_OW 268
47472: STR
47473: PUSH
47474: LD_STRING ],
47476: STR
47477: PPUSH
47478: CALL_OW 561
// end ;
47482: GO 47376
47484: POP
47485: POP
// AddToLog ( ]; ) ;
47486: LD_STRING ];
47488: PPUSH
47489: CALL_OW 561
// end ;
47493: LD_VAR 0 2
47497: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47498: LD_INT 0
47500: PPUSH
47501: PPUSH
47502: PPUSH
47503: PPUSH
47504: PPUSH
// if not area or not rate or not max then
47505: LD_VAR 0 1
47509: NOT
47510: IFTRUE 47519
47512: PUSH
47513: LD_VAR 0 2
47517: NOT
47518: OR
47519: IFTRUE 47528
47521: PUSH
47522: LD_VAR 0 4
47526: NOT
47527: OR
47528: IFFALSE 47532
// exit ;
47530: GO 47721
// while 1 do
47532: LD_INT 1
47534: IFFALSE 47721
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47536: LD_ADDR_VAR 0 9
47540: PUSH
47541: LD_VAR 0 1
47545: PPUSH
47546: LD_INT 1
47548: PPUSH
47549: CALL_OW 287
47553: PUSH
47554: LD_INT 10
47556: MUL
47557: ST_TO_ADDR
// r := rate / 10 ;
47558: LD_ADDR_VAR 0 7
47562: PUSH
47563: LD_VAR 0 2
47567: PUSH
47568: LD_INT 10
47570: DIVREAL
47571: ST_TO_ADDR
// time := 1 1$00 ;
47572: LD_ADDR_VAR 0 8
47576: PUSH
47577: LD_INT 2100
47579: ST_TO_ADDR
// if amount < min then
47580: LD_VAR 0 9
47584: PUSH
47585: LD_VAR 0 3
47589: LESS
47590: IFFALSE 47608
// r := r * 2 else
47592: LD_ADDR_VAR 0 7
47596: PUSH
47597: LD_VAR 0 7
47601: PUSH
47602: LD_INT 2
47604: MUL
47605: ST_TO_ADDR
47606: GO 47634
// if amount > max then
47608: LD_VAR 0 9
47612: PUSH
47613: LD_VAR 0 4
47617: GREATER
47618: IFFALSE 47634
// r := r / 2 ;
47620: LD_ADDR_VAR 0 7
47624: PUSH
47625: LD_VAR 0 7
47629: PUSH
47630: LD_INT 2
47632: DIVREAL
47633: ST_TO_ADDR
// time := time / r ;
47634: LD_ADDR_VAR 0 8
47638: PUSH
47639: LD_VAR 0 8
47643: PUSH
47644: LD_VAR 0 7
47648: DIVREAL
47649: ST_TO_ADDR
// if time < 0 then
47650: LD_VAR 0 8
47654: PUSH
47655: LD_INT 0
47657: LESS
47658: IFFALSE 47675
// time := time * - 1 ;
47660: LD_ADDR_VAR 0 8
47664: PUSH
47665: LD_VAR 0 8
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: MUL
47674: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47675: LD_VAR 0 8
47679: PUSH
47680: LD_INT 35
47682: PPUSH
47683: LD_INT 875
47685: PPUSH
47686: CALL_OW 12
47690: PLUS
47691: PPUSH
47692: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47696: LD_INT 1
47698: PPUSH
47699: LD_INT 5
47701: PPUSH
47702: CALL_OW 12
47706: PPUSH
47707: LD_VAR 0 1
47711: PPUSH
47712: LD_INT 1
47714: PPUSH
47715: CALL_OW 55
// end ;
47719: GO 47532
// end ;
47721: LD_VAR 0 5
47725: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47726: LD_INT 0
47728: PPUSH
47729: PPUSH
47730: PPUSH
47731: PPUSH
47732: PPUSH
47733: PPUSH
47734: PPUSH
47735: PPUSH
// if not turrets or not factories then
47736: LD_VAR 0 1
47740: NOT
47741: IFTRUE 47750
47743: PUSH
47744: LD_VAR 0 2
47748: NOT
47749: OR
47750: IFFALSE 47754
// exit ;
47752: GO 48061
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47754: LD_ADDR_VAR 0 10
47758: PUSH
47759: LD_INT 5
47761: PUSH
47762: LD_INT 6
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: LD_INT 4
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 3
47781: PUSH
47782: LD_INT 5
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 24
47796: PUSH
47797: LD_INT 25
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 23
47806: PUSH
47807: LD_INT 27
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 42
47820: PUSH
47821: LD_INT 43
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 44
47830: PUSH
47831: LD_INT 46
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 45
47840: PUSH
47841: LD_INT 47
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: LIST
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: LIST
47857: ST_TO_ADDR
// result := [ ] ;
47858: LD_ADDR_VAR 0 3
47862: PUSH
47863: EMPTY
47864: ST_TO_ADDR
// for i in turrets do
47865: LD_ADDR_VAR 0 4
47869: PUSH
47870: LD_VAR 0 1
47874: PUSH
47875: FOR_IN
47876: IFFALSE 48059
// begin nat := GetNation ( i ) ;
47878: LD_ADDR_VAR 0 7
47882: PUSH
47883: LD_VAR 0 4
47887: PPUSH
47888: CALL_OW 248
47892: ST_TO_ADDR
// weapon := 0 ;
47893: LD_ADDR_VAR 0 8
47897: PUSH
47898: LD_INT 0
47900: ST_TO_ADDR
// if not nat then
47901: LD_VAR 0 7
47905: NOT
47906: IFFALSE 47910
// continue ;
47908: GO 47875
// for j in list [ nat ] do
47910: LD_ADDR_VAR 0 5
47914: PUSH
47915: LD_VAR 0 10
47919: PUSH
47920: LD_VAR 0 7
47924: ARRAY
47925: PUSH
47926: FOR_IN
47927: IFFALSE 47968
// if GetBWeapon ( i ) = j [ 1 ] then
47929: LD_VAR 0 4
47933: PPUSH
47934: CALL_OW 269
47938: PUSH
47939: LD_VAR 0 5
47943: PUSH
47944: LD_INT 1
47946: ARRAY
47947: EQUAL
47948: IFFALSE 47966
// begin weapon := j [ 2 ] ;
47950: LD_ADDR_VAR 0 8
47954: PUSH
47955: LD_VAR 0 5
47959: PUSH
47960: LD_INT 2
47962: ARRAY
47963: ST_TO_ADDR
// break ;
47964: GO 47968
// end ;
47966: GO 47926
47968: POP
47969: POP
// if not weapon then
47970: LD_VAR 0 8
47974: NOT
47975: IFFALSE 47979
// continue ;
47977: GO 47875
// for k in factories do
47979: LD_ADDR_VAR 0 6
47983: PUSH
47984: LD_VAR 0 2
47988: PUSH
47989: FOR_IN
47990: IFFALSE 48055
// begin weapons := AvailableWeaponList ( k ) ;
47992: LD_ADDR_VAR 0 9
47996: PUSH
47997: LD_VAR 0 6
48001: PPUSH
48002: CALL_OW 478
48006: ST_TO_ADDR
// if not weapons then
48007: LD_VAR 0 9
48011: NOT
48012: IFFALSE 48016
// continue ;
48014: GO 47989
// if weapon in weapons then
48016: LD_VAR 0 8
48020: PUSH
48021: LD_VAR 0 9
48025: IN
48026: IFFALSE 48053
// begin result := [ i , weapon ] ;
48028: LD_ADDR_VAR 0 3
48032: PUSH
48033: LD_VAR 0 4
48037: PUSH
48038: LD_VAR 0 8
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: ST_TO_ADDR
// exit ;
48047: POP
48048: POP
48049: POP
48050: POP
48051: GO 48061
// end ; end ;
48053: GO 47989
48055: POP
48056: POP
// end ;
48057: GO 47875
48059: POP
48060: POP
// end ;
48061: LD_VAR 0 3
48065: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48066: LD_INT 0
48068: PPUSH
// if not side or side > 8 then
48069: LD_VAR 0 3
48073: NOT
48074: IFTRUE 48086
48076: PUSH
48077: LD_VAR 0 3
48081: PUSH
48082: LD_INT 8
48084: GREATER
48085: OR
48086: IFFALSE 48090
// exit ;
48088: GO 48149
// if not range then
48090: LD_VAR 0 4
48094: NOT
48095: IFFALSE 48106
// range := - 12 ;
48097: LD_ADDR_VAR 0 4
48101: PUSH
48102: LD_INT 12
48104: NEG
48105: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48106: LD_VAR 0 1
48110: PPUSH
48111: LD_VAR 0 2
48115: PPUSH
48116: LD_VAR 0 3
48120: PPUSH
48121: LD_VAR 0 4
48125: PPUSH
48126: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48130: LD_VAR 0 1
48134: PPUSH
48135: LD_VAR 0 2
48139: PPUSH
48140: LD_VAR 0 3
48144: PPUSH
48145: CALL_OW 331
// end ;
48149: LD_VAR 0 5
48153: RET
// export function Video ( mode ) ; begin
48154: LD_INT 0
48156: PPUSH
// ingame_video = mode ;
48157: LD_ADDR_OWVAR 52
48161: PUSH
48162: LD_VAR 0 1
48166: ST_TO_ADDR
// interface_hidden = mode ;
48167: LD_ADDR_OWVAR 54
48171: PUSH
48172: LD_VAR 0 1
48176: ST_TO_ADDR
// end ;
48177: LD_VAR 0 2
48181: RET
// export function Join ( array , element ) ; begin
48182: LD_INT 0
48184: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48185: LD_ADDR_VAR 0 3
48189: PUSH
48190: LD_VAR 0 1
48194: PPUSH
48195: LD_VAR 0 1
48199: PUSH
48200: LD_INT 1
48202: PLUS
48203: PPUSH
48204: LD_VAR 0 2
48208: PPUSH
48209: CALL_OW 1
48213: ST_TO_ADDR
// end ;
48214: LD_VAR 0 3
48218: RET
// export function JoinUnion ( array , element ) ; begin
48219: LD_INT 0
48221: PPUSH
// result := array union element ;
48222: LD_ADDR_VAR 0 3
48226: PUSH
48227: LD_VAR 0 1
48231: PUSH
48232: LD_VAR 0 2
48236: UNION
48237: ST_TO_ADDR
// end ;
48238: LD_VAR 0 3
48242: RET
// export function GetBehemoths ( side ) ; begin
48243: LD_INT 0
48245: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48246: LD_ADDR_VAR 0 2
48250: PUSH
48251: LD_INT 22
48253: PUSH
48254: LD_VAR 0 1
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 31
48265: PUSH
48266: LD_INT 25
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PPUSH
48277: CALL_OW 69
48281: ST_TO_ADDR
// end ;
48282: LD_VAR 0 2
48286: RET
// export function Shuffle ( array ) ; var i , index ; begin
48287: LD_INT 0
48289: PPUSH
48290: PPUSH
48291: PPUSH
// result := [ ] ;
48292: LD_ADDR_VAR 0 2
48296: PUSH
48297: EMPTY
48298: ST_TO_ADDR
// if not array then
48299: LD_VAR 0 1
48303: NOT
48304: IFFALSE 48308
// exit ;
48306: GO 48407
// Randomize ;
48308: CALL_OW 10
// for i = array downto 1 do
48312: LD_ADDR_VAR 0 3
48316: PUSH
48317: DOUBLE
48318: LD_VAR 0 1
48322: INC
48323: ST_TO_ADDR
48324: LD_INT 1
48326: PUSH
48327: FOR_DOWNTO
48328: IFFALSE 48405
// begin index := rand ( 1 , array ) ;
48330: LD_ADDR_VAR 0 4
48334: PUSH
48335: LD_INT 1
48337: PPUSH
48338: LD_VAR 0 1
48342: PPUSH
48343: CALL_OW 12
48347: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48348: LD_ADDR_VAR 0 2
48352: PUSH
48353: LD_VAR 0 2
48357: PPUSH
48358: LD_VAR 0 2
48362: PUSH
48363: LD_INT 1
48365: PLUS
48366: PPUSH
48367: LD_VAR 0 1
48371: PUSH
48372: LD_VAR 0 4
48376: ARRAY
48377: PPUSH
48378: CALL_OW 2
48382: ST_TO_ADDR
// array := Delete ( array , index ) ;
48383: LD_ADDR_VAR 0 1
48387: PUSH
48388: LD_VAR 0 1
48392: PPUSH
48393: LD_VAR 0 4
48397: PPUSH
48398: CALL_OW 3
48402: ST_TO_ADDR
// end ;
48403: GO 48327
48405: POP
48406: POP
// end ;
48407: LD_VAR 0 2
48411: RET
// export function GetBaseMaterials ( base ) ; begin
48412: LD_INT 0
48414: PPUSH
// result := [ 0 , 0 , 0 ] ;
48415: LD_ADDR_VAR 0 2
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: LIST
48433: ST_TO_ADDR
// if not base then
48434: LD_VAR 0 1
48438: NOT
48439: IFFALSE 48443
// exit ;
48441: GO 48492
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48443: LD_ADDR_VAR 0 2
48447: PUSH
48448: LD_VAR 0 1
48452: PPUSH
48453: LD_INT 1
48455: PPUSH
48456: CALL_OW 275
48460: PUSH
48461: LD_VAR 0 1
48465: PPUSH
48466: LD_INT 2
48468: PPUSH
48469: CALL_OW 275
48473: PUSH
48474: LD_VAR 0 1
48478: PPUSH
48479: LD_INT 3
48481: PPUSH
48482: CALL_OW 275
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: LIST
48491: ST_TO_ADDR
// end ;
48492: LD_VAR 0 2
48496: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48497: LD_INT 0
48499: PPUSH
48500: PPUSH
// result := array ;
48501: LD_ADDR_VAR 0 3
48505: PUSH
48506: LD_VAR 0 1
48510: ST_TO_ADDR
// if size >= result then
48511: LD_VAR 0 2
48515: PUSH
48516: LD_VAR 0 3
48520: GREATEREQUAL
48521: IFFALSE 48525
// exit ;
48523: GO 48575
// if size then
48525: LD_VAR 0 2
48529: IFFALSE 48575
// for i := array downto size do
48531: LD_ADDR_VAR 0 4
48535: PUSH
48536: DOUBLE
48537: LD_VAR 0 1
48541: INC
48542: ST_TO_ADDR
48543: LD_VAR 0 2
48547: PUSH
48548: FOR_DOWNTO
48549: IFFALSE 48573
// result := Delete ( result , result ) ;
48551: LD_ADDR_VAR 0 3
48555: PUSH
48556: LD_VAR 0 3
48560: PPUSH
48561: LD_VAR 0 3
48565: PPUSH
48566: CALL_OW 3
48570: ST_TO_ADDR
48571: GO 48548
48573: POP
48574: POP
// end ;
48575: LD_VAR 0 3
48579: RET
// export function ComExit ( unit ) ; var tmp ; begin
48580: LD_INT 0
48582: PPUSH
48583: PPUSH
// if not IsInUnit ( unit ) then
48584: LD_VAR 0 1
48588: PPUSH
48589: CALL_OW 310
48593: NOT
48594: IFFALSE 48598
// exit ;
48596: GO 48658
// tmp := IsInUnit ( unit ) ;
48598: LD_ADDR_VAR 0 3
48602: PUSH
48603: LD_VAR 0 1
48607: PPUSH
48608: CALL_OW 310
48612: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48613: LD_VAR 0 3
48617: PPUSH
48618: CALL_OW 247
48622: PUSH
48623: LD_INT 2
48625: EQUAL
48626: IFFALSE 48639
// ComExitVehicle ( unit ) else
48628: LD_VAR 0 1
48632: PPUSH
48633: CALL_OW 121
48637: GO 48648
// ComExitBuilding ( unit ) ;
48639: LD_VAR 0 1
48643: PPUSH
48644: CALL_OW 122
// result := tmp ;
48648: LD_ADDR_VAR 0 2
48652: PUSH
48653: LD_VAR 0 3
48657: ST_TO_ADDR
// end ;
48658: LD_VAR 0 2
48662: RET
// export function ComExitAll ( units ) ; var i ; begin
48663: LD_INT 0
48665: PPUSH
48666: PPUSH
// if not units then
48667: LD_VAR 0 1
48671: NOT
48672: IFFALSE 48676
// exit ;
48674: GO 48702
// for i in units do
48676: LD_ADDR_VAR 0 3
48680: PUSH
48681: LD_VAR 0 1
48685: PUSH
48686: FOR_IN
48687: IFFALSE 48700
// ComExit ( i ) ;
48689: LD_VAR 0 3
48693: PPUSH
48694: CALL 48580 0 1
48698: GO 48686
48700: POP
48701: POP
// end ;
48702: LD_VAR 0 2
48706: RET
// export function ResetHc ; begin
48707: LD_INT 0
48709: PPUSH
// InitHc ;
48710: CALL_OW 19
// hc_importance := 0 ;
48714: LD_ADDR_OWVAR 32
48718: PUSH
48719: LD_INT 0
48721: ST_TO_ADDR
// end ;
48722: LD_VAR 0 1
48726: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48727: LD_INT 0
48729: PPUSH
48730: PPUSH
48731: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48732: LD_ADDR_VAR 0 6
48736: PUSH
48737: LD_VAR 0 1
48741: PUSH
48742: LD_VAR 0 3
48746: PLUS
48747: PUSH
48748: LD_INT 2
48750: DIV
48751: ST_TO_ADDR
// if _x < 0 then
48752: LD_VAR 0 6
48756: PUSH
48757: LD_INT 0
48759: LESS
48760: IFFALSE 48777
// _x := _x * - 1 ;
48762: LD_ADDR_VAR 0 6
48766: PUSH
48767: LD_VAR 0 6
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: MUL
48776: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48777: LD_ADDR_VAR 0 7
48781: PUSH
48782: LD_VAR 0 2
48786: PUSH
48787: LD_VAR 0 4
48791: PLUS
48792: PUSH
48793: LD_INT 2
48795: DIV
48796: ST_TO_ADDR
// if _y < 0 then
48797: LD_VAR 0 7
48801: PUSH
48802: LD_INT 0
48804: LESS
48805: IFFALSE 48822
// _y := _y * - 1 ;
48807: LD_ADDR_VAR 0 7
48811: PUSH
48812: LD_VAR 0 7
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: MUL
48821: ST_TO_ADDR
// result := [ _x , _y ] ;
48822: LD_ADDR_VAR 0 5
48826: PUSH
48827: LD_VAR 0 6
48831: PUSH
48832: LD_VAR 0 7
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: ST_TO_ADDR
// end ;
48841: LD_VAR 0 5
48845: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48846: LD_INT 0
48848: PPUSH
48849: PPUSH
48850: PPUSH
48851: PPUSH
// task := GetTaskList ( unit ) ;
48852: LD_ADDR_VAR 0 7
48856: PUSH
48857: LD_VAR 0 1
48861: PPUSH
48862: CALL_OW 437
48866: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48867: LD_VAR 0 7
48871: NOT
48872: IFFALSE 48891
48874: PUSH
48875: LD_VAR 0 1
48879: PPUSH
48880: LD_VAR 0 2
48884: PPUSH
48885: CALL_OW 308
48889: NOT
48890: AND
48891: IFFALSE 48895
// exit ;
48893: GO 49013
// if IsInArea ( unit , area ) then
48895: LD_VAR 0 1
48899: PPUSH
48900: LD_VAR 0 2
48904: PPUSH
48905: CALL_OW 308
48909: IFFALSE 48927
// begin ComMoveToArea ( unit , goAway ) ;
48911: LD_VAR 0 1
48915: PPUSH
48916: LD_VAR 0 3
48920: PPUSH
48921: CALL_OW 113
// exit ;
48925: GO 49013
// end ; if task [ 1 ] [ 1 ] <> M then
48927: LD_VAR 0 7
48931: PUSH
48932: LD_INT 1
48934: ARRAY
48935: PUSH
48936: LD_INT 1
48938: ARRAY
48939: PUSH
48940: LD_STRING M
48942: NONEQUAL
48943: IFFALSE 48947
// exit ;
48945: GO 49013
// x := task [ 1 ] [ 2 ] ;
48947: LD_ADDR_VAR 0 5
48951: PUSH
48952: LD_VAR 0 7
48956: PUSH
48957: LD_INT 1
48959: ARRAY
48960: PUSH
48961: LD_INT 2
48963: ARRAY
48964: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48965: LD_ADDR_VAR 0 6
48969: PUSH
48970: LD_VAR 0 7
48974: PUSH
48975: LD_INT 1
48977: ARRAY
48978: PUSH
48979: LD_INT 3
48981: ARRAY
48982: ST_TO_ADDR
// if InArea ( x , y , area ) then
48983: LD_VAR 0 5
48987: PPUSH
48988: LD_VAR 0 6
48992: PPUSH
48993: LD_VAR 0 2
48997: PPUSH
48998: CALL_OW 309
49002: IFFALSE 49013
// ComStop ( unit ) ;
49004: LD_VAR 0 1
49008: PPUSH
49009: CALL_OW 141
// end ;
49013: LD_VAR 0 4
49017: RET
// export function Abs ( value ) ; begin
49018: LD_INT 0
49020: PPUSH
// result := value ;
49021: LD_ADDR_VAR 0 2
49025: PUSH
49026: LD_VAR 0 1
49030: ST_TO_ADDR
// if value < 0 then
49031: LD_VAR 0 1
49035: PUSH
49036: LD_INT 0
49038: LESS
49039: IFFALSE 49056
// result := value * - 1 ;
49041: LD_ADDR_VAR 0 2
49045: PUSH
49046: LD_VAR 0 1
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: MUL
49055: ST_TO_ADDR
// end ;
49056: LD_VAR 0 2
49060: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49061: LD_INT 0
49063: PPUSH
49064: PPUSH
49065: PPUSH
49066: PPUSH
49067: PPUSH
49068: PPUSH
49069: PPUSH
49070: PPUSH
// if not unit or not building then
49071: LD_VAR 0 1
49075: NOT
49076: IFTRUE 49085
49078: PUSH
49079: LD_VAR 0 2
49083: NOT
49084: OR
49085: IFFALSE 49089
// exit ;
49087: GO 49317
// x := GetX ( building ) ;
49089: LD_ADDR_VAR 0 4
49093: PUSH
49094: LD_VAR 0 2
49098: PPUSH
49099: CALL_OW 250
49103: ST_TO_ADDR
// y := GetY ( building ) ;
49104: LD_ADDR_VAR 0 6
49108: PUSH
49109: LD_VAR 0 2
49113: PPUSH
49114: CALL_OW 251
49118: ST_TO_ADDR
// d := GetDir ( building ) ;
49119: LD_ADDR_VAR 0 8
49123: PUSH
49124: LD_VAR 0 2
49128: PPUSH
49129: CALL_OW 254
49133: ST_TO_ADDR
// r := 4 ;
49134: LD_ADDR_VAR 0 9
49138: PUSH
49139: LD_INT 4
49141: ST_TO_ADDR
// for i := 1 to 5 do
49142: LD_ADDR_VAR 0 10
49146: PUSH
49147: DOUBLE
49148: LD_INT 1
49150: DEC
49151: ST_TO_ADDR
49152: LD_INT 5
49154: PUSH
49155: FOR_TO
49156: IFFALSE 49315
// begin _x := ShiftX ( x , d , r + i ) ;
49158: LD_ADDR_VAR 0 5
49162: PUSH
49163: LD_VAR 0 4
49167: PPUSH
49168: LD_VAR 0 8
49172: PPUSH
49173: LD_VAR 0 9
49177: PUSH
49178: LD_VAR 0 10
49182: PLUS
49183: PPUSH
49184: CALL_OW 272
49188: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49189: LD_ADDR_VAR 0 7
49193: PUSH
49194: LD_VAR 0 6
49198: PPUSH
49199: LD_VAR 0 8
49203: PPUSH
49204: LD_VAR 0 9
49208: PUSH
49209: LD_VAR 0 10
49213: PLUS
49214: PPUSH
49215: CALL_OW 273
49219: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49220: LD_VAR 0 5
49224: PPUSH
49225: LD_VAR 0 7
49229: PPUSH
49230: CALL_OW 488
49234: IFFALSE 49269
49236: PUSH
49237: LD_VAR 0 5
49241: PPUSH
49242: LD_VAR 0 7
49246: PPUSH
49247: CALL_OW 428
49251: PPUSH
49252: CALL_OW 247
49256: PUSH
49257: LD_INT 3
49259: PUSH
49260: LD_INT 2
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: IN
49267: NOT
49268: AND
49269: IFFALSE 49313
// begin ComMoveXY ( unit , _x , _y ) ;
49271: LD_VAR 0 1
49275: PPUSH
49276: LD_VAR 0 5
49280: PPUSH
49281: LD_VAR 0 7
49285: PPUSH
49286: CALL_OW 111
// result := [ _x , _y ] ;
49290: LD_ADDR_VAR 0 3
49294: PUSH
49295: LD_VAR 0 5
49299: PUSH
49300: LD_VAR 0 7
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: ST_TO_ADDR
// exit ;
49309: POP
49310: POP
49311: GO 49317
// end ; end ;
49313: GO 49155
49315: POP
49316: POP
// end ;
49317: LD_VAR 0 3
49321: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49322: LD_INT 0
49324: PPUSH
49325: PPUSH
49326: PPUSH
// result := 0 ;
49327: LD_ADDR_VAR 0 3
49331: PUSH
49332: LD_INT 0
49334: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49335: LD_VAR 0 1
49339: PUSH
49340: LD_INT 0
49342: LESS
49343: IFTRUE 49355
49345: PUSH
49346: LD_VAR 0 1
49350: PUSH
49351: LD_INT 8
49353: GREATER
49354: OR
49355: IFTRUE 49367
49357: PUSH
49358: LD_VAR 0 2
49362: PUSH
49363: LD_INT 0
49365: LESS
49366: OR
49367: IFTRUE 49379
49369: PUSH
49370: LD_VAR 0 2
49374: PUSH
49375: LD_INT 8
49377: GREATER
49378: OR
49379: IFFALSE 49383
// exit ;
49381: GO 49458
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49383: LD_ADDR_VAR 0 4
49387: PUSH
49388: LD_INT 22
49390: PUSH
49391: LD_VAR 0 2
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PPUSH
49400: CALL_OW 69
49404: PUSH
49405: FOR_IN
49406: IFFALSE 49456
// begin un := UnitShoot ( i ) ;
49408: LD_ADDR_VAR 0 5
49412: PUSH
49413: LD_VAR 0 4
49417: PPUSH
49418: CALL_OW 504
49422: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49423: LD_VAR 0 5
49427: PPUSH
49428: CALL_OW 255
49432: PUSH
49433: LD_VAR 0 1
49437: EQUAL
49438: IFFALSE 49454
// begin result := un ;
49440: LD_ADDR_VAR 0 3
49444: PUSH
49445: LD_VAR 0 5
49449: ST_TO_ADDR
// exit ;
49450: POP
49451: POP
49452: GO 49458
// end ; end ;
49454: GO 49405
49456: POP
49457: POP
// end ;
49458: LD_VAR 0 3
49462: RET
// export function GetCargoBay ( units ) ; begin
49463: LD_INT 0
49465: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49466: LD_ADDR_VAR 0 2
49470: PUSH
49471: LD_VAR 0 1
49475: PPUSH
49476: LD_INT 2
49478: PUSH
49479: LD_INT 34
49481: PUSH
49482: LD_INT 12
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 34
49491: PUSH
49492: LD_INT 51
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 34
49501: PUSH
49502: LD_INT 32
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 34
49511: PUSH
49512: LD_INT 89
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: PPUSH
49526: CALL_OW 72
49530: ST_TO_ADDR
// end ;
49531: LD_VAR 0 2
49535: RET
// export function Negate ( value ) ; begin
49536: LD_INT 0
49538: PPUSH
// result := not value ;
49539: LD_ADDR_VAR 0 2
49543: PUSH
49544: LD_VAR 0 1
49548: NOT
49549: ST_TO_ADDR
// end ;
49550: LD_VAR 0 2
49554: RET
// export function Inc ( value ) ; begin
49555: LD_INT 0
49557: PPUSH
// result := value + 1 ;
49558: LD_ADDR_VAR 0 2
49562: PUSH
49563: LD_VAR 0 1
49567: PUSH
49568: LD_INT 1
49570: PLUS
49571: ST_TO_ADDR
// end ;
49572: LD_VAR 0 2
49576: RET
// export function Dec ( value ) ; begin
49577: LD_INT 0
49579: PPUSH
// result := value - 1 ;
49580: LD_ADDR_VAR 0 2
49584: PUSH
49585: LD_VAR 0 1
49589: PUSH
49590: LD_INT 1
49592: MINUS
49593: ST_TO_ADDR
// end ;
49594: LD_VAR 0 2
49598: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49599: LD_INT 0
49601: PPUSH
49602: PPUSH
49603: PPUSH
49604: PPUSH
49605: PPUSH
49606: PPUSH
49607: PPUSH
49608: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49609: LD_VAR 0 1
49613: PPUSH
49614: LD_VAR 0 2
49618: PPUSH
49619: CALL_OW 488
49623: NOT
49624: IFTRUE 49643
49626: PUSH
49627: LD_VAR 0 3
49631: PPUSH
49632: LD_VAR 0 4
49636: PPUSH
49637: CALL_OW 488
49641: NOT
49642: OR
49643: IFFALSE 49656
// begin result := - 1 ;
49645: LD_ADDR_VAR 0 5
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: ST_TO_ADDR
// exit ;
49654: GO 49891
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49656: LD_ADDR_VAR 0 12
49660: PUSH
49661: LD_VAR 0 1
49665: PPUSH
49666: LD_VAR 0 2
49670: PPUSH
49671: LD_VAR 0 3
49675: PPUSH
49676: LD_VAR 0 4
49680: PPUSH
49681: CALL 48727 0 4
49685: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49686: LD_ADDR_VAR 0 11
49690: PUSH
49691: LD_VAR 0 1
49695: PPUSH
49696: LD_VAR 0 2
49700: PPUSH
49701: LD_VAR 0 12
49705: PUSH
49706: LD_INT 1
49708: ARRAY
49709: PPUSH
49710: LD_VAR 0 12
49714: PUSH
49715: LD_INT 2
49717: ARRAY
49718: PPUSH
49719: CALL_OW 298
49723: ST_TO_ADDR
// distance := 9999 ;
49724: LD_ADDR_VAR 0 10
49728: PUSH
49729: LD_INT 9999
49731: ST_TO_ADDR
// for i := 0 to 5 do
49732: LD_ADDR_VAR 0 6
49736: PUSH
49737: DOUBLE
49738: LD_INT 0
49740: DEC
49741: ST_TO_ADDR
49742: LD_INT 5
49744: PUSH
49745: FOR_TO
49746: IFFALSE 49889
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49748: LD_ADDR_VAR 0 7
49752: PUSH
49753: LD_VAR 0 1
49757: PPUSH
49758: LD_VAR 0 6
49762: PPUSH
49763: LD_VAR 0 11
49767: PPUSH
49768: CALL_OW 272
49772: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49773: LD_ADDR_VAR 0 8
49777: PUSH
49778: LD_VAR 0 2
49782: PPUSH
49783: LD_VAR 0 6
49787: PPUSH
49788: LD_VAR 0 11
49792: PPUSH
49793: CALL_OW 273
49797: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49798: LD_VAR 0 7
49802: PPUSH
49803: LD_VAR 0 8
49807: PPUSH
49808: CALL_OW 488
49812: NOT
49813: IFFALSE 49817
// continue ;
49815: GO 49745
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49817: LD_ADDR_VAR 0 9
49821: PUSH
49822: LD_VAR 0 12
49826: PUSH
49827: LD_INT 1
49829: ARRAY
49830: PPUSH
49831: LD_VAR 0 12
49835: PUSH
49836: LD_INT 2
49838: ARRAY
49839: PPUSH
49840: LD_VAR 0 7
49844: PPUSH
49845: LD_VAR 0 8
49849: PPUSH
49850: CALL_OW 298
49854: ST_TO_ADDR
// if tmp < distance then
49855: LD_VAR 0 9
49859: PUSH
49860: LD_VAR 0 10
49864: LESS
49865: IFFALSE 49887
// begin result := i ;
49867: LD_ADDR_VAR 0 5
49871: PUSH
49872: LD_VAR 0 6
49876: ST_TO_ADDR
// distance := tmp ;
49877: LD_ADDR_VAR 0 10
49881: PUSH
49882: LD_VAR 0 9
49886: ST_TO_ADDR
// end ; end ;
49887: GO 49745
49889: POP
49890: POP
// end ;
49891: LD_VAR 0 5
49895: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49896: LD_INT 0
49898: PPUSH
49899: PPUSH
// if not driver or not IsInUnit ( driver ) then
49900: LD_VAR 0 1
49904: NOT
49905: IFTRUE 49919
49907: PUSH
49908: LD_VAR 0 1
49912: PPUSH
49913: CALL_OW 310
49917: NOT
49918: OR
49919: IFFALSE 49923
// exit ;
49921: GO 50013
// vehicle := IsInUnit ( driver ) ;
49923: LD_ADDR_VAR 0 3
49927: PUSH
49928: LD_VAR 0 1
49932: PPUSH
49933: CALL_OW 310
49937: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49938: LD_VAR 0 1
49942: PPUSH
49943: LD_STRING \
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: PUSH
49973: LD_STRING E
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_VAR 0 3
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PPUSH
50009: CALL_OW 446
// end ;
50013: LD_VAR 0 2
50017: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50018: LD_INT 0
50020: PPUSH
50021: PPUSH
// if not driver or not IsInUnit ( driver ) then
50022: LD_VAR 0 1
50026: NOT
50027: IFTRUE 50041
50029: PUSH
50030: LD_VAR 0 1
50034: PPUSH
50035: CALL_OW 310
50039: NOT
50040: OR
50041: IFFALSE 50045
// exit ;
50043: GO 50135
// vehicle := IsInUnit ( driver ) ;
50045: LD_ADDR_VAR 0 3
50049: PUSH
50050: LD_VAR 0 1
50054: PPUSH
50055: CALL_OW 310
50059: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50060: LD_VAR 0 1
50064: PPUSH
50065: LD_STRING \
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: PUSH
50095: LD_STRING E
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_VAR 0 3
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PPUSH
50131: CALL_OW 447
// end ;
50135: LD_VAR 0 2
50139: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50140: LD_INT 0
50142: PPUSH
50143: PPUSH
50144: PPUSH
// tmp := [ ] ;
50145: LD_ADDR_VAR 0 5
50149: PUSH
50150: EMPTY
50151: ST_TO_ADDR
// for i in units do
50152: LD_ADDR_VAR 0 4
50156: PUSH
50157: LD_VAR 0 1
50161: PUSH
50162: FOR_IN
50163: IFFALSE 50201
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50165: LD_ADDR_VAR 0 5
50169: PUSH
50170: LD_VAR 0 5
50174: PPUSH
50175: LD_VAR 0 5
50179: PUSH
50180: LD_INT 1
50182: PLUS
50183: PPUSH
50184: LD_VAR 0 4
50188: PPUSH
50189: CALL_OW 256
50193: PPUSH
50194: CALL_OW 2
50198: ST_TO_ADDR
50199: GO 50162
50201: POP
50202: POP
// if not tmp then
50203: LD_VAR 0 5
50207: NOT
50208: IFFALSE 50212
// exit ;
50210: GO 50260
// if asc then
50212: LD_VAR 0 2
50216: IFFALSE 50240
// result := SortListByListAsc ( units , tmp ) else
50218: LD_ADDR_VAR 0 3
50222: PUSH
50223: LD_VAR 0 1
50227: PPUSH
50228: LD_VAR 0 5
50232: PPUSH
50233: CALL_OW 76
50237: ST_TO_ADDR
50238: GO 50260
// result := SortListByListDesc ( units , tmp ) ;
50240: LD_ADDR_VAR 0 3
50244: PUSH
50245: LD_VAR 0 1
50249: PPUSH
50250: LD_VAR 0 5
50254: PPUSH
50255: CALL_OW 77
50259: ST_TO_ADDR
// end ;
50260: LD_VAR 0 3
50264: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50265: LD_INT 0
50267: PPUSH
50268: PPUSH
// task := GetTaskList ( mech ) ;
50269: LD_ADDR_VAR 0 4
50273: PUSH
50274: LD_VAR 0 1
50278: PPUSH
50279: CALL_OW 437
50283: ST_TO_ADDR
// if not task then
50284: LD_VAR 0 4
50288: NOT
50289: IFFALSE 50293
// exit ;
50291: GO 50337
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50293: LD_ADDR_VAR 0 3
50297: PUSH
50298: LD_VAR 0 4
50302: PUSH
50303: LD_INT 1
50305: ARRAY
50306: PUSH
50307: LD_INT 1
50309: ARRAY
50310: PUSH
50311: LD_STRING r
50313: EQUAL
50314: IFFALSE 50336
50316: PUSH
50317: LD_VAR 0 4
50321: PUSH
50322: LD_INT 1
50324: ARRAY
50325: PUSH
50326: LD_INT 4
50328: ARRAY
50329: PUSH
50330: LD_VAR 0 2
50334: EQUAL
50335: AND
50336: ST_TO_ADDR
// end ;
50337: LD_VAR 0 3
50341: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50342: LD_INT 0
50344: PPUSH
// SetDir ( unit , d ) ;
50345: LD_VAR 0 1
50349: PPUSH
50350: LD_VAR 0 4
50354: PPUSH
50355: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50359: LD_ADDR_VAR 0 6
50363: PUSH
50364: LD_VAR 0 1
50368: PPUSH
50369: LD_VAR 0 2
50373: PPUSH
50374: LD_VAR 0 3
50378: PPUSH
50379: LD_VAR 0 5
50383: PPUSH
50384: CALL_OW 48
50388: ST_TO_ADDR
// end ;
50389: LD_VAR 0 6
50393: RET
// export function ToNaturalNumber ( number ) ; begin
50394: LD_INT 0
50396: PPUSH
// result := number div 1 ;
50397: LD_ADDR_VAR 0 2
50401: PUSH
50402: LD_VAR 0 1
50406: PUSH
50407: LD_INT 1
50409: DIV
50410: ST_TO_ADDR
// if number < 0 then
50411: LD_VAR 0 1
50415: PUSH
50416: LD_INT 0
50418: LESS
50419: IFFALSE 50429
// result := 0 ;
50421: LD_ADDR_VAR 0 2
50425: PUSH
50426: LD_INT 0
50428: ST_TO_ADDR
// end ;
50429: LD_VAR 0 2
50433: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50434: LD_INT 0
50436: PPUSH
50437: PPUSH
50438: PPUSH
// if not buildings then
50439: LD_VAR 0 1
50443: NOT
50444: IFFALSE 50448
// exit ;
50446: GO 50563
// tmp := [ ] ;
50448: LD_ADDR_VAR 0 5
50452: PUSH
50453: EMPTY
50454: ST_TO_ADDR
// for b in buildings do
50455: LD_ADDR_VAR 0 4
50459: PUSH
50460: LD_VAR 0 1
50464: PUSH
50465: FOR_IN
50466: IFFALSE 50504
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50468: LD_ADDR_VAR 0 5
50472: PUSH
50473: LD_VAR 0 5
50477: PPUSH
50478: LD_VAR 0 5
50482: PUSH
50483: LD_INT 1
50485: PLUS
50486: PPUSH
50487: LD_VAR 0 4
50491: PPUSH
50492: CALL_OW 266
50496: PPUSH
50497: CALL_OW 1
50501: ST_TO_ADDR
50502: GO 50465
50504: POP
50505: POP
// if not tmp then
50506: LD_VAR 0 5
50510: NOT
50511: IFFALSE 50515
// exit ;
50513: GO 50563
// if asc then
50515: LD_VAR 0 2
50519: IFFALSE 50543
// result := SortListByListAsc ( buildings , tmp ) else
50521: LD_ADDR_VAR 0 3
50525: PUSH
50526: LD_VAR 0 1
50530: PPUSH
50531: LD_VAR 0 5
50535: PPUSH
50536: CALL_OW 76
50540: ST_TO_ADDR
50541: GO 50563
// result := SortListByListDesc ( buildings , tmp ) ;
50543: LD_ADDR_VAR 0 3
50547: PUSH
50548: LD_VAR 0 1
50552: PPUSH
50553: LD_VAR 0 5
50557: PPUSH
50558: CALL_OW 77
50562: ST_TO_ADDR
// end ;
50563: LD_VAR 0 3
50567: RET
// export function SortByClass ( units , class ) ; var un ; begin
50568: LD_INT 0
50570: PPUSH
50571: PPUSH
// if not units or not class then
50572: LD_VAR 0 1
50576: NOT
50577: IFTRUE 50586
50579: PUSH
50580: LD_VAR 0 2
50584: NOT
50585: OR
50586: IFFALSE 50590
// exit ;
50588: GO 50685
// result := [ ] ;
50590: LD_ADDR_VAR 0 3
50594: PUSH
50595: EMPTY
50596: ST_TO_ADDR
// for un in units do
50597: LD_ADDR_VAR 0 4
50601: PUSH
50602: LD_VAR 0 1
50606: PUSH
50607: FOR_IN
50608: IFFALSE 50683
// if GetClass ( un ) = class then
50610: LD_VAR 0 4
50614: PPUSH
50615: CALL_OW 257
50619: PUSH
50620: LD_VAR 0 2
50624: EQUAL
50625: IFFALSE 50652
// result := Insert ( result , 1 , un ) else
50627: LD_ADDR_VAR 0 3
50631: PUSH
50632: LD_VAR 0 3
50636: PPUSH
50637: LD_INT 1
50639: PPUSH
50640: LD_VAR 0 4
50644: PPUSH
50645: CALL_OW 2
50649: ST_TO_ADDR
50650: GO 50681
// result := Replace ( result , result + 1 , un ) ;
50652: LD_ADDR_VAR 0 3
50656: PUSH
50657: LD_VAR 0 3
50661: PPUSH
50662: LD_VAR 0 3
50666: PUSH
50667: LD_INT 1
50669: PLUS
50670: PPUSH
50671: LD_VAR 0 4
50675: PPUSH
50676: CALL_OW 1
50680: ST_TO_ADDR
50681: GO 50607
50683: POP
50684: POP
// end ;
50685: LD_VAR 0 3
50689: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50690: LD_INT 0
50692: PPUSH
50693: PPUSH
50694: PPUSH
50695: PPUSH
50696: PPUSH
50697: PPUSH
50698: PPUSH
// result := [ ] ;
50699: LD_ADDR_VAR 0 4
50703: PUSH
50704: EMPTY
50705: ST_TO_ADDR
// if x - r < 0 then
50706: LD_VAR 0 1
50710: PUSH
50711: LD_VAR 0 3
50715: MINUS
50716: PUSH
50717: LD_INT 0
50719: LESS
50720: IFFALSE 50732
// min_x := 0 else
50722: LD_ADDR_VAR 0 8
50726: PUSH
50727: LD_INT 0
50729: ST_TO_ADDR
50730: GO 50748
// min_x := x - r ;
50732: LD_ADDR_VAR 0 8
50736: PUSH
50737: LD_VAR 0 1
50741: PUSH
50742: LD_VAR 0 3
50746: MINUS
50747: ST_TO_ADDR
// if y - r < 0 then
50748: LD_VAR 0 2
50752: PUSH
50753: LD_VAR 0 3
50757: MINUS
50758: PUSH
50759: LD_INT 0
50761: LESS
50762: IFFALSE 50774
// min_y := 0 else
50764: LD_ADDR_VAR 0 7
50768: PUSH
50769: LD_INT 0
50771: ST_TO_ADDR
50772: GO 50790
// min_y := y - r ;
50774: LD_ADDR_VAR 0 7
50778: PUSH
50779: LD_VAR 0 2
50783: PUSH
50784: LD_VAR 0 3
50788: MINUS
50789: ST_TO_ADDR
// max_x := x + r ;
50790: LD_ADDR_VAR 0 9
50794: PUSH
50795: LD_VAR 0 1
50799: PUSH
50800: LD_VAR 0 3
50804: PLUS
50805: ST_TO_ADDR
// max_y := y + r ;
50806: LD_ADDR_VAR 0 10
50810: PUSH
50811: LD_VAR 0 2
50815: PUSH
50816: LD_VAR 0 3
50820: PLUS
50821: ST_TO_ADDR
// for _x = min_x to max_x do
50822: LD_ADDR_VAR 0 5
50826: PUSH
50827: DOUBLE
50828: LD_VAR 0 8
50832: DEC
50833: ST_TO_ADDR
50834: LD_VAR 0 9
50838: PUSH
50839: FOR_TO
50840: IFFALSE 50941
// for _y = min_y to max_y do
50842: LD_ADDR_VAR 0 6
50846: PUSH
50847: DOUBLE
50848: LD_VAR 0 7
50852: DEC
50853: ST_TO_ADDR
50854: LD_VAR 0 10
50858: PUSH
50859: FOR_TO
50860: IFFALSE 50937
// begin if not ValidHex ( _x , _y ) then
50862: LD_VAR 0 5
50866: PPUSH
50867: LD_VAR 0 6
50871: PPUSH
50872: CALL_OW 488
50876: NOT
50877: IFFALSE 50881
// continue ;
50879: GO 50859
// if GetResourceTypeXY ( _x , _y ) then
50881: LD_VAR 0 5
50885: PPUSH
50886: LD_VAR 0 6
50890: PPUSH
50891: CALL_OW 283
50895: IFFALSE 50935
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50897: LD_ADDR_VAR 0 4
50901: PUSH
50902: LD_VAR 0 4
50906: PPUSH
50907: LD_VAR 0 4
50911: PUSH
50912: LD_INT 1
50914: PLUS
50915: PPUSH
50916: LD_VAR 0 5
50920: PUSH
50921: LD_VAR 0 6
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PPUSH
50930: CALL_OW 1
50934: ST_TO_ADDR
// end ;
50935: GO 50859
50937: POP
50938: POP
50939: GO 50839
50941: POP
50942: POP
// end ;
50943: LD_VAR 0 4
50947: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50948: LD_INT 0
50950: PPUSH
50951: PPUSH
50952: PPUSH
50953: PPUSH
50954: PPUSH
50955: PPUSH
50956: PPUSH
50957: PPUSH
// if not units then
50958: LD_VAR 0 1
50962: NOT
50963: IFFALSE 50967
// exit ;
50965: GO 51499
// result := UnitFilter ( units , [ f_ok ] ) ;
50967: LD_ADDR_VAR 0 3
50971: PUSH
50972: LD_VAR 0 1
50976: PPUSH
50977: LD_INT 50
50979: PUSH
50980: EMPTY
50981: LIST
50982: PPUSH
50983: CALL_OW 72
50987: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50988: LD_ADDR_VAR 0 8
50992: PUSH
50993: LD_VAR 0 1
50997: PUSH
50998: LD_INT 1
51000: ARRAY
51001: PPUSH
51002: CALL_OW 255
51006: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51007: LD_ADDR_VAR 0 10
51011: PUSH
51012: LD_INT 29
51014: PUSH
51015: LD_INT 91
51017: PUSH
51018: LD_INT 49
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: LIST
51025: ST_TO_ADDR
// if not result then
51026: LD_VAR 0 3
51030: NOT
51031: IFFALSE 51035
// exit ;
51033: GO 51499
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51035: LD_ADDR_VAR 0 5
51039: PUSH
51040: LD_INT 81
51042: PUSH
51043: LD_VAR 0 8
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PPUSH
51052: CALL_OW 69
51056: ST_TO_ADDR
// for i in result do
51057: LD_ADDR_VAR 0 4
51061: PUSH
51062: LD_VAR 0 3
51066: PUSH
51067: FOR_IN
51068: IFFALSE 51497
// begin tag := GetTag ( i ) + 1 ;
51070: LD_ADDR_VAR 0 9
51074: PUSH
51075: LD_VAR 0 4
51079: PPUSH
51080: CALL_OW 110
51084: PUSH
51085: LD_INT 1
51087: PLUS
51088: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51089: LD_ADDR_VAR 0 7
51093: PUSH
51094: LD_VAR 0 4
51098: PPUSH
51099: CALL_OW 250
51103: PPUSH
51104: LD_VAR 0 4
51108: PPUSH
51109: CALL_OW 251
51113: PPUSH
51114: LD_INT 4
51116: PPUSH
51117: CALL 50690 0 3
51121: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51122: LD_VAR 0 4
51126: PPUSH
51127: CALL_OW 247
51131: PUSH
51132: LD_INT 2
51134: EQUAL
51135: IFFALSE 51147
51137: PUSH
51138: LD_VAR 0 7
51142: PUSH
51143: LD_INT 2
51145: GREATER
51146: AND
51147: IFFALSE 51167
51149: PUSH
51150: LD_VAR 0 4
51154: PPUSH
51155: CALL_OW 264
51159: PUSH
51160: LD_VAR 0 10
51164: IN
51165: NOT
51166: AND
51167: IFFALSE 51206
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51169: LD_VAR 0 4
51173: PPUSH
51174: LD_VAR 0 7
51178: PUSH
51179: LD_INT 1
51181: ARRAY
51182: PUSH
51183: LD_INT 1
51185: ARRAY
51186: PPUSH
51187: LD_VAR 0 7
51191: PUSH
51192: LD_INT 1
51194: ARRAY
51195: PUSH
51196: LD_INT 2
51198: ARRAY
51199: PPUSH
51200: CALL_OW 116
51204: GO 51495
// if path > tag then
51206: LD_VAR 0 2
51210: PUSH
51211: LD_VAR 0 9
51215: GREATER
51216: IFFALSE 51424
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51218: LD_ADDR_VAR 0 6
51222: PUSH
51223: LD_VAR 0 5
51227: PPUSH
51228: LD_INT 91
51230: PUSH
51231: LD_VAR 0 4
51235: PUSH
51236: LD_INT 8
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: LIST
51243: PPUSH
51244: CALL_OW 72
51248: ST_TO_ADDR
// if nearEnemy then
51249: LD_VAR 0 6
51253: IFFALSE 51322
// begin if GetWeapon ( i ) = ru_time_lapser then
51255: LD_VAR 0 4
51259: PPUSH
51260: CALL_OW 264
51264: PUSH
51265: LD_INT 49
51267: EQUAL
51268: IFFALSE 51296
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51270: LD_VAR 0 4
51274: PPUSH
51275: LD_VAR 0 6
51279: PPUSH
51280: LD_VAR 0 4
51284: PPUSH
51285: CALL_OW 74
51289: PPUSH
51290: CALL_OW 112
51294: GO 51320
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51296: LD_VAR 0 4
51300: PPUSH
51301: LD_VAR 0 6
51305: PPUSH
51306: LD_VAR 0 4
51310: PPUSH
51311: CALL_OW 74
51315: PPUSH
51316: CALL 52580 0 2
// end else
51320: GO 51422
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51322: LD_VAR 0 4
51326: PPUSH
51327: LD_VAR 0 2
51331: PUSH
51332: LD_VAR 0 9
51336: ARRAY
51337: PUSH
51338: LD_INT 1
51340: ARRAY
51341: PPUSH
51342: LD_VAR 0 2
51346: PUSH
51347: LD_VAR 0 9
51351: ARRAY
51352: PUSH
51353: LD_INT 2
51355: ARRAY
51356: PPUSH
51357: CALL_OW 297
51361: PUSH
51362: LD_INT 6
51364: GREATER
51365: IFFALSE 51408
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51367: LD_VAR 0 4
51371: PPUSH
51372: LD_VAR 0 2
51376: PUSH
51377: LD_VAR 0 9
51381: ARRAY
51382: PUSH
51383: LD_INT 1
51385: ARRAY
51386: PPUSH
51387: LD_VAR 0 2
51391: PUSH
51392: LD_VAR 0 9
51396: ARRAY
51397: PUSH
51398: LD_INT 2
51400: ARRAY
51401: PPUSH
51402: CALL_OW 114
51406: GO 51422
// SetTag ( i , tag ) ;
51408: LD_VAR 0 4
51412: PPUSH
51413: LD_VAR 0 9
51417: PPUSH
51418: CALL_OW 109
// end else
51422: GO 51495
// if enemy then
51424: LD_VAR 0 5
51428: IFFALSE 51495
// begin if GetWeapon ( i ) = ru_time_lapser then
51430: LD_VAR 0 4
51434: PPUSH
51435: CALL_OW 264
51439: PUSH
51440: LD_INT 49
51442: EQUAL
51443: IFFALSE 51471
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51445: LD_VAR 0 4
51449: PPUSH
51450: LD_VAR 0 5
51454: PPUSH
51455: LD_VAR 0 4
51459: PPUSH
51460: CALL_OW 74
51464: PPUSH
51465: CALL_OW 112
51469: GO 51495
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51471: LD_VAR 0 4
51475: PPUSH
51476: LD_VAR 0 5
51480: PPUSH
51481: LD_VAR 0 4
51485: PPUSH
51486: CALL_OW 74
51490: PPUSH
51491: CALL 52580 0 2
// end ; end ;
51495: GO 51067
51497: POP
51498: POP
// end ;
51499: LD_VAR 0 3
51503: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51504: LD_INT 0
51506: PPUSH
51507: PPUSH
51508: PPUSH
// if not unit or IsInUnit ( unit ) then
51509: LD_VAR 0 1
51513: NOT
51514: IFTRUE 51527
51516: PUSH
51517: LD_VAR 0 1
51521: PPUSH
51522: CALL_OW 310
51526: OR
51527: IFFALSE 51531
// exit ;
51529: GO 51622
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51531: LD_ADDR_VAR 0 4
51535: PUSH
51536: LD_VAR 0 1
51540: PPUSH
51541: CALL_OW 250
51545: PPUSH
51546: LD_VAR 0 2
51550: PPUSH
51551: LD_INT 1
51553: PPUSH
51554: CALL_OW 272
51558: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51559: LD_ADDR_VAR 0 5
51563: PUSH
51564: LD_VAR 0 1
51568: PPUSH
51569: CALL_OW 251
51573: PPUSH
51574: LD_VAR 0 2
51578: PPUSH
51579: LD_INT 1
51581: PPUSH
51582: CALL_OW 273
51586: ST_TO_ADDR
// if ValidHex ( x , y ) then
51587: LD_VAR 0 4
51591: PPUSH
51592: LD_VAR 0 5
51596: PPUSH
51597: CALL_OW 488
51601: IFFALSE 51622
// ComTurnXY ( unit , x , y ) ;
51603: LD_VAR 0 1
51607: PPUSH
51608: LD_VAR 0 4
51612: PPUSH
51613: LD_VAR 0 5
51617: PPUSH
51618: CALL_OW 118
// end ;
51622: LD_VAR 0 3
51626: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51627: LD_INT 0
51629: PPUSH
51630: PPUSH
// result := false ;
51631: LD_ADDR_VAR 0 3
51635: PUSH
51636: LD_INT 0
51638: ST_TO_ADDR
// if not units then
51639: LD_VAR 0 2
51643: NOT
51644: IFFALSE 51648
// exit ;
51646: GO 51693
// for i in units do
51648: LD_ADDR_VAR 0 4
51652: PUSH
51653: LD_VAR 0 2
51657: PUSH
51658: FOR_IN
51659: IFFALSE 51691
// if See ( side , i ) then
51661: LD_VAR 0 1
51665: PPUSH
51666: LD_VAR 0 4
51670: PPUSH
51671: CALL_OW 292
51675: IFFALSE 51689
// begin result := true ;
51677: LD_ADDR_VAR 0 3
51681: PUSH
51682: LD_INT 1
51684: ST_TO_ADDR
// exit ;
51685: POP
51686: POP
51687: GO 51693
// end ;
51689: GO 51658
51691: POP
51692: POP
// end ;
51693: LD_VAR 0 3
51697: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51698: LD_INT 0
51700: PPUSH
51701: PPUSH
51702: PPUSH
51703: PPUSH
// if not unit or not points then
51704: LD_VAR 0 1
51708: NOT
51709: IFTRUE 51718
51711: PUSH
51712: LD_VAR 0 2
51716: NOT
51717: OR
51718: IFFALSE 51722
// exit ;
51720: GO 51812
// dist := 99999 ;
51722: LD_ADDR_VAR 0 5
51726: PUSH
51727: LD_INT 99999
51729: ST_TO_ADDR
// for i in points do
51730: LD_ADDR_VAR 0 4
51734: PUSH
51735: LD_VAR 0 2
51739: PUSH
51740: FOR_IN
51741: IFFALSE 51810
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51743: LD_ADDR_VAR 0 6
51747: PUSH
51748: LD_VAR 0 1
51752: PPUSH
51753: LD_VAR 0 4
51757: PUSH
51758: LD_INT 1
51760: ARRAY
51761: PPUSH
51762: LD_VAR 0 4
51766: PUSH
51767: LD_INT 2
51769: ARRAY
51770: PPUSH
51771: CALL_OW 297
51775: ST_TO_ADDR
// if tmpDist < dist then
51776: LD_VAR 0 6
51780: PUSH
51781: LD_VAR 0 5
51785: LESS
51786: IFFALSE 51808
// begin result := i ;
51788: LD_ADDR_VAR 0 3
51792: PUSH
51793: LD_VAR 0 4
51797: ST_TO_ADDR
// dist := tmpDist ;
51798: LD_ADDR_VAR 0 5
51802: PUSH
51803: LD_VAR 0 6
51807: ST_TO_ADDR
// end ; end ;
51808: GO 51740
51810: POP
51811: POP
// end ;
51812: LD_VAR 0 3
51816: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51817: LD_INT 0
51819: PPUSH
// uc_side := side ;
51820: LD_ADDR_OWVAR 20
51824: PUSH
51825: LD_VAR 0 1
51829: ST_TO_ADDR
// uc_nation := 3 ;
51830: LD_ADDR_OWVAR 21
51834: PUSH
51835: LD_INT 3
51837: ST_TO_ADDR
// vc_chassis := 25 ;
51838: LD_ADDR_OWVAR 37
51842: PUSH
51843: LD_INT 25
51845: ST_TO_ADDR
// vc_engine := engine_siberite ;
51846: LD_ADDR_OWVAR 39
51850: PUSH
51851: LD_INT 3
51853: ST_TO_ADDR
// vc_control := control_computer ;
51854: LD_ADDR_OWVAR 38
51858: PUSH
51859: LD_INT 3
51861: ST_TO_ADDR
// vc_weapon := 59 ;
51862: LD_ADDR_OWVAR 40
51866: PUSH
51867: LD_INT 59
51869: ST_TO_ADDR
// result := CreateVehicle ;
51870: LD_ADDR_VAR 0 5
51874: PUSH
51875: CALL_OW 45
51879: ST_TO_ADDR
// SetDir ( result , d ) ;
51880: LD_VAR 0 5
51884: PPUSH
51885: LD_VAR 0 4
51889: PPUSH
51890: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51894: LD_VAR 0 5
51898: PPUSH
51899: LD_VAR 0 2
51903: PPUSH
51904: LD_VAR 0 3
51908: PPUSH
51909: LD_INT 0
51911: PPUSH
51912: CALL_OW 48
// end ;
51916: LD_VAR 0 5
51920: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51921: LD_INT 0
51923: PPUSH
51924: PPUSH
51925: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51926: LD_ADDR_VAR 0 2
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51949: LD_VAR 0 1
51953: NOT
51954: IFTRUE 51987
51956: PUSH
51957: LD_VAR 0 1
51961: PPUSH
51962: CALL_OW 264
51966: PUSH
51967: LD_INT 12
51969: PUSH
51970: LD_INT 51
51972: PUSH
51973: LD_INT 32
51975: PUSH
51976: LD_INT 89
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: IN
51985: NOT
51986: OR
51987: IFFALSE 51991
// exit ;
51989: GO 52089
// for i := 1 to 3 do
51991: LD_ADDR_VAR 0 3
51995: PUSH
51996: DOUBLE
51997: LD_INT 1
51999: DEC
52000: ST_TO_ADDR
52001: LD_INT 3
52003: PUSH
52004: FOR_TO
52005: IFFALSE 52087
// begin tmp := GetCargo ( cargo , i ) ;
52007: LD_ADDR_VAR 0 4
52011: PUSH
52012: LD_VAR 0 1
52016: PPUSH
52017: LD_VAR 0 3
52021: PPUSH
52022: CALL_OW 289
52026: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52027: LD_ADDR_VAR 0 2
52031: PUSH
52032: LD_VAR 0 2
52036: PPUSH
52037: LD_VAR 0 3
52041: PPUSH
52042: LD_VAR 0 4
52046: PPUSH
52047: CALL_OW 1
52051: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52052: LD_ADDR_VAR 0 2
52056: PUSH
52057: LD_VAR 0 2
52061: PPUSH
52062: LD_INT 4
52064: PPUSH
52065: LD_VAR 0 2
52069: PUSH
52070: LD_INT 4
52072: ARRAY
52073: PUSH
52074: LD_VAR 0 4
52078: PLUS
52079: PPUSH
52080: CALL_OW 1
52084: ST_TO_ADDR
// end ;
52085: GO 52004
52087: POP
52088: POP
// end ;
52089: LD_VAR 0 2
52093: RET
// export function Length ( array ) ; begin
52094: LD_INT 0
52096: PPUSH
// result := array + 0 ;
52097: LD_ADDR_VAR 0 2
52101: PUSH
52102: LD_VAR 0 1
52106: PUSH
52107: LD_INT 0
52109: PLUS
52110: ST_TO_ADDR
// end ;
52111: LD_VAR 0 2
52115: RET
// export function PrepareArray ( array ) ; begin
52116: LD_INT 0
52118: PPUSH
// result := array diff 0 ;
52119: LD_ADDR_VAR 0 2
52123: PUSH
52124: LD_VAR 0 1
52128: PUSH
52129: LD_INT 0
52131: DIFF
52132: ST_TO_ADDR
// if not result [ 1 ] then
52133: LD_VAR 0 2
52137: PUSH
52138: LD_INT 1
52140: ARRAY
52141: NOT
52142: IFFALSE 52162
// result := Delete ( result , 1 ) ;
52144: LD_ADDR_VAR 0 2
52148: PUSH
52149: LD_VAR 0 2
52153: PPUSH
52154: LD_INT 1
52156: PPUSH
52157: CALL_OW 3
52161: ST_TO_ADDR
// end ;
52162: LD_VAR 0 2
52166: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52167: LD_INT 0
52169: PPUSH
52170: PPUSH
52171: PPUSH
52172: PPUSH
// sibRocketRange := 25 ;
52173: LD_ADDR_VAR 0 6
52177: PUSH
52178: LD_INT 25
52180: ST_TO_ADDR
// result := false ;
52181: LD_ADDR_VAR 0 4
52185: PUSH
52186: LD_INT 0
52188: ST_TO_ADDR
// for i := 0 to 5 do
52189: LD_ADDR_VAR 0 5
52193: PUSH
52194: DOUBLE
52195: LD_INT 0
52197: DEC
52198: ST_TO_ADDR
52199: LD_INT 5
52201: PUSH
52202: FOR_TO
52203: IFFALSE 52270
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52205: LD_VAR 0 1
52209: PPUSH
52210: LD_VAR 0 5
52214: PPUSH
52215: LD_VAR 0 6
52219: PPUSH
52220: CALL_OW 272
52224: PPUSH
52225: LD_VAR 0 2
52229: PPUSH
52230: LD_VAR 0 5
52234: PPUSH
52235: LD_VAR 0 6
52239: PPUSH
52240: CALL_OW 273
52244: PPUSH
52245: LD_VAR 0 3
52249: PPUSH
52250: CALL_OW 309
52254: IFFALSE 52268
// begin result := true ;
52256: LD_ADDR_VAR 0 4
52260: PUSH
52261: LD_INT 1
52263: ST_TO_ADDR
// exit ;
52264: POP
52265: POP
52266: GO 52272
// end ;
52268: GO 52202
52270: POP
52271: POP
// end ;
52272: LD_VAR 0 4
52276: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52277: LD_INT 0
52279: PPUSH
52280: PPUSH
52281: PPUSH
// if btype = b_depot then
52282: LD_VAR 0 2
52286: PUSH
52287: LD_INT 0
52289: EQUAL
52290: IFFALSE 52302
// begin result := true ;
52292: LD_ADDR_VAR 0 3
52296: PUSH
52297: LD_INT 1
52299: ST_TO_ADDR
// exit ;
52300: GO 52422
// end ; pom := GetBase ( depot ) ;
52302: LD_ADDR_VAR 0 4
52306: PUSH
52307: LD_VAR 0 1
52311: PPUSH
52312: CALL_OW 274
52316: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52317: LD_ADDR_VAR 0 5
52321: PUSH
52322: LD_VAR 0 2
52326: PPUSH
52327: LD_VAR 0 1
52331: PPUSH
52332: CALL_OW 248
52336: PPUSH
52337: CALL_OW 450
52341: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52342: LD_ADDR_VAR 0 3
52346: PUSH
52347: LD_VAR 0 4
52351: PPUSH
52352: LD_INT 1
52354: PPUSH
52355: CALL_OW 275
52359: PUSH
52360: LD_VAR 0 5
52364: PUSH
52365: LD_INT 1
52367: ARRAY
52368: GREATEREQUAL
52369: IFFALSE 52395
52371: PUSH
52372: LD_VAR 0 4
52376: PPUSH
52377: LD_INT 2
52379: PPUSH
52380: CALL_OW 275
52384: PUSH
52385: LD_VAR 0 5
52389: PUSH
52390: LD_INT 2
52392: ARRAY
52393: GREATEREQUAL
52394: AND
52395: IFFALSE 52421
52397: PUSH
52398: LD_VAR 0 4
52402: PPUSH
52403: LD_INT 3
52405: PPUSH
52406: CALL_OW 275
52410: PUSH
52411: LD_VAR 0 5
52415: PUSH
52416: LD_INT 3
52418: ARRAY
52419: GREATEREQUAL
52420: AND
52421: ST_TO_ADDR
// end ;
52422: LD_VAR 0 3
52426: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52427: LD_INT 0
52429: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52430: LD_VAR 0 1
52434: PPUSH
52435: LD_VAR 0 2
52439: PPUSH
52440: LD_INT 0
52442: PPUSH
52443: LD_INT 0
52445: PPUSH
52446: LD_INT 1
52448: PPUSH
52449: LD_INT 0
52451: PPUSH
52452: CALL_OW 587
// end ;
52456: LD_VAR 0 3
52460: RET
// export function CenterOnNow ( unit ) ; begin
52461: LD_INT 0
52463: PPUSH
// result := IsInUnit ( unit ) ;
52464: LD_ADDR_VAR 0 2
52468: PUSH
52469: LD_VAR 0 1
52473: PPUSH
52474: CALL_OW 310
52478: ST_TO_ADDR
// if not result then
52479: LD_VAR 0 2
52483: NOT
52484: IFFALSE 52496
// result := unit ;
52486: LD_ADDR_VAR 0 2
52490: PUSH
52491: LD_VAR 0 1
52495: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52496: LD_VAR 0 1
52500: PPUSH
52501: CALL_OW 87
// end ;
52505: LD_VAR 0 2
52509: RET
// export function ComMoveHex ( unit , hex ) ; begin
52510: LD_INT 0
52512: PPUSH
// if not hex then
52513: LD_VAR 0 2
52517: NOT
52518: IFFALSE 52522
// exit ;
52520: GO 52575
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52522: LD_VAR 0 2
52526: PUSH
52527: LD_INT 1
52529: ARRAY
52530: PPUSH
52531: LD_VAR 0 2
52535: PUSH
52536: LD_INT 2
52538: ARRAY
52539: PPUSH
52540: CALL_OW 428
52544: IFFALSE 52548
// exit ;
52546: GO 52575
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52548: LD_VAR 0 1
52552: PPUSH
52553: LD_VAR 0 2
52557: PUSH
52558: LD_INT 1
52560: ARRAY
52561: PPUSH
52562: LD_VAR 0 2
52566: PUSH
52567: LD_INT 2
52569: ARRAY
52570: PPUSH
52571: CALL_OW 111
// end ;
52575: LD_VAR 0 3
52579: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52580: LD_INT 0
52582: PPUSH
52583: PPUSH
52584: PPUSH
// if not unit or not enemy then
52585: LD_VAR 0 1
52589: NOT
52590: IFTRUE 52599
52592: PUSH
52593: LD_VAR 0 2
52597: NOT
52598: OR
52599: IFFALSE 52603
// exit ;
52601: GO 52729
// x := GetX ( enemy ) ;
52603: LD_ADDR_VAR 0 4
52607: PUSH
52608: LD_VAR 0 2
52612: PPUSH
52613: CALL_OW 250
52617: ST_TO_ADDR
// y := GetY ( enemy ) ;
52618: LD_ADDR_VAR 0 5
52622: PUSH
52623: LD_VAR 0 2
52627: PPUSH
52628: CALL_OW 251
52632: ST_TO_ADDR
// if ValidHex ( x , y ) then
52633: LD_VAR 0 4
52637: PPUSH
52638: LD_VAR 0 5
52642: PPUSH
52643: CALL_OW 488
52647: IFFALSE 52729
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52649: LD_VAR 0 2
52653: PPUSH
52654: CALL_OW 247
52658: PUSH
52659: LD_INT 3
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: IN
52669: IFTRUE 52692
52671: PUSH
52672: LD_VAR 0 1
52676: PPUSH
52677: CALL_OW 255
52681: PPUSH
52682: LD_VAR 0 2
52686: PPUSH
52687: CALL_OW 292
52691: OR
52692: IFFALSE 52710
// ComAttackUnit ( unit , enemy ) else
52694: LD_VAR 0 1
52698: PPUSH
52699: LD_VAR 0 2
52703: PPUSH
52704: CALL_OW 115
52708: GO 52729
// ComAgressiveMove ( unit , x , y ) ;
52710: LD_VAR 0 1
52714: PPUSH
52715: LD_VAR 0 4
52719: PPUSH
52720: LD_VAR 0 5
52724: PPUSH
52725: CALL_OW 114
// end ;
52729: LD_VAR 0 3
52733: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52734: LD_INT 0
52736: PPUSH
52737: PPUSH
52738: PPUSH
// list := AreaToList ( area , 0 ) ;
52739: LD_ADDR_VAR 0 5
52743: PUSH
52744: LD_VAR 0 1
52748: PPUSH
52749: LD_INT 0
52751: PPUSH
52752: CALL_OW 517
52756: ST_TO_ADDR
// if not list then
52757: LD_VAR 0 5
52761: NOT
52762: IFFALSE 52766
// exit ;
52764: GO 52896
// if all then
52766: LD_VAR 0 2
52770: IFFALSE 52858
// begin for i := 1 to list [ 1 ] do
52772: LD_ADDR_VAR 0 4
52776: PUSH
52777: DOUBLE
52778: LD_INT 1
52780: DEC
52781: ST_TO_ADDR
52782: LD_VAR 0 5
52786: PUSH
52787: LD_INT 1
52789: ARRAY
52790: PUSH
52791: FOR_TO
52792: IFFALSE 52854
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52794: LD_ADDR_VAR 0 3
52798: PUSH
52799: LD_VAR 0 3
52803: PPUSH
52804: LD_VAR 0 3
52808: PUSH
52809: LD_INT 1
52811: PLUS
52812: PPUSH
52813: LD_VAR 0 5
52817: PUSH
52818: LD_INT 1
52820: ARRAY
52821: PUSH
52822: LD_VAR 0 4
52826: ARRAY
52827: PUSH
52828: LD_VAR 0 5
52832: PUSH
52833: LD_INT 2
52835: ARRAY
52836: PUSH
52837: LD_VAR 0 4
52841: ARRAY
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PPUSH
52847: CALL_OW 1
52851: ST_TO_ADDR
52852: GO 52791
52854: POP
52855: POP
// exit ;
52856: GO 52896
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52858: LD_ADDR_VAR 0 3
52862: PUSH
52863: LD_VAR 0 5
52867: PUSH
52868: LD_INT 1
52870: ARRAY
52871: PUSH
52872: LD_INT 1
52874: ARRAY
52875: PUSH
52876: LD_VAR 0 5
52880: PUSH
52881: LD_INT 2
52883: ARRAY
52884: PUSH
52885: LD_INT 1
52887: ARRAY
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: EMPTY
52894: LIST
52895: ST_TO_ADDR
// end ;
52896: LD_VAR 0 3
52900: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52901: LD_INT 0
52903: PPUSH
52904: PPUSH
// list := AreaToList ( area , 0 ) ;
52905: LD_ADDR_VAR 0 4
52909: PUSH
52910: LD_VAR 0 1
52914: PPUSH
52915: LD_INT 0
52917: PPUSH
52918: CALL_OW 517
52922: ST_TO_ADDR
// if not list then
52923: LD_VAR 0 4
52927: NOT
52928: IFFALSE 52932
// exit ;
52930: GO 52973
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52932: LD_ADDR_VAR 0 3
52936: PUSH
52937: LD_VAR 0 4
52941: PUSH
52942: LD_INT 1
52944: ARRAY
52945: PUSH
52946: LD_INT 1
52948: ARRAY
52949: PUSH
52950: LD_VAR 0 4
52954: PUSH
52955: LD_INT 2
52957: ARRAY
52958: PUSH
52959: LD_INT 1
52961: ARRAY
52962: PUSH
52963: LD_VAR 0 2
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: LIST
52972: ST_TO_ADDR
// end ;
52973: LD_VAR 0 3
52977: RET
// export function First ( array ) ; begin
52978: LD_INT 0
52980: PPUSH
// if not array then
52981: LD_VAR 0 1
52985: NOT
52986: IFFALSE 52990
// exit ;
52988: GO 53004
// result := array [ 1 ] ;
52990: LD_ADDR_VAR 0 2
52994: PUSH
52995: LD_VAR 0 1
52999: PUSH
53000: LD_INT 1
53002: ARRAY
53003: ST_TO_ADDR
// end ;
53004: LD_VAR 0 2
53008: RET
// export function Last ( array ) ; begin
53009: LD_INT 0
53011: PPUSH
// if not array then
53012: LD_VAR 0 1
53016: NOT
53017: IFFALSE 53021
// exit ;
53019: GO 53037
// result := array [ array ] ;
53021: LD_ADDR_VAR 0 2
53025: PUSH
53026: LD_VAR 0 1
53030: PUSH
53031: LD_VAR 0 1
53035: ARRAY
53036: ST_TO_ADDR
// end ;
53037: LD_VAR 0 2
53041: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53042: LD_INT 0
53044: PPUSH
53045: PPUSH
// result := [ ] ;
53046: LD_ADDR_VAR 0 5
53050: PUSH
53051: EMPTY
53052: ST_TO_ADDR
// if not array then
53053: LD_VAR 0 1
53057: NOT
53058: IFFALSE 53062
// exit ;
53060: GO 53174
// for i := 1 to array do
53062: LD_ADDR_VAR 0 6
53066: PUSH
53067: DOUBLE
53068: LD_INT 1
53070: DEC
53071: ST_TO_ADDR
53072: LD_VAR 0 1
53076: PUSH
53077: FOR_TO
53078: IFFALSE 53172
// if array [ i ] [ index ] = value then
53080: LD_VAR 0 1
53084: PUSH
53085: LD_VAR 0 6
53089: ARRAY
53090: PUSH
53091: LD_VAR 0 2
53095: ARRAY
53096: PUSH
53097: LD_VAR 0 3
53101: EQUAL
53102: IFFALSE 53170
// begin if indexColumn then
53104: LD_VAR 0 4
53108: IFFALSE 53144
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53110: LD_ADDR_VAR 0 5
53114: PUSH
53115: LD_VAR 0 5
53119: PPUSH
53120: LD_VAR 0 1
53124: PUSH
53125: LD_VAR 0 6
53129: ARRAY
53130: PUSH
53131: LD_VAR 0 4
53135: ARRAY
53136: PPUSH
53137: CALL 48182 0 2
53141: ST_TO_ADDR
53142: GO 53170
// result := Join ( result , array [ i ] ) ;
53144: LD_ADDR_VAR 0 5
53148: PUSH
53149: LD_VAR 0 5
53153: PPUSH
53154: LD_VAR 0 1
53158: PUSH
53159: LD_VAR 0 6
53163: ARRAY
53164: PPUSH
53165: CALL 48182 0 2
53169: ST_TO_ADDR
// end ;
53170: GO 53077
53172: POP
53173: POP
// end ;
53174: LD_VAR 0 5
53178: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53179: LD_INT 0
53181: PPUSH
// if not vehicles or not parkingPoint then
53182: LD_VAR 0 1
53186: NOT
53187: IFTRUE 53196
53189: PUSH
53190: LD_VAR 0 2
53194: NOT
53195: OR
53196: IFFALSE 53200
// exit ;
53198: GO 53298
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53200: LD_ADDR_VAR 0 1
53204: PUSH
53205: LD_VAR 0 1
53209: PPUSH
53210: LD_INT 50
53212: PUSH
53213: EMPTY
53214: LIST
53215: PUSH
53216: LD_INT 3
53218: PUSH
53219: LD_INT 92
53221: PUSH
53222: LD_VAR 0 2
53226: PUSH
53227: LD_INT 1
53229: ARRAY
53230: PUSH
53231: LD_VAR 0 2
53235: PUSH
53236: LD_INT 2
53238: ARRAY
53239: PUSH
53240: LD_INT 8
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PPUSH
53257: CALL_OW 72
53261: ST_TO_ADDR
// if not vehicles then
53262: LD_VAR 0 1
53266: NOT
53267: IFFALSE 53271
// exit ;
53269: GO 53298
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53271: LD_VAR 0 1
53275: PPUSH
53276: LD_VAR 0 2
53280: PUSH
53281: LD_INT 1
53283: ARRAY
53284: PPUSH
53285: LD_VAR 0 2
53289: PUSH
53290: LD_INT 2
53292: ARRAY
53293: PPUSH
53294: CALL_OW 111
// end ;
53298: LD_VAR 0 3
53302: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53303: LD_INT 0
53305: PPUSH
53306: PPUSH
53307: PPUSH
// if not side or not area then
53308: LD_VAR 0 1
53312: NOT
53313: IFTRUE 53322
53315: PUSH
53316: LD_VAR 0 2
53320: NOT
53321: OR
53322: IFFALSE 53326
// exit ;
53324: GO 53445
// tmp := AreaToList ( area , 0 ) ;
53326: LD_ADDR_VAR 0 5
53330: PUSH
53331: LD_VAR 0 2
53335: PPUSH
53336: LD_INT 0
53338: PPUSH
53339: CALL_OW 517
53343: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53344: LD_ADDR_VAR 0 4
53348: PUSH
53349: DOUBLE
53350: LD_INT 1
53352: DEC
53353: ST_TO_ADDR
53354: LD_VAR 0 5
53358: PUSH
53359: LD_INT 1
53361: ARRAY
53362: PUSH
53363: FOR_TO
53364: IFFALSE 53443
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53366: LD_VAR 0 5
53370: PUSH
53371: LD_INT 1
53373: ARRAY
53374: PUSH
53375: LD_VAR 0 4
53379: ARRAY
53380: PPUSH
53381: LD_VAR 0 5
53385: PUSH
53386: LD_INT 2
53388: ARRAY
53389: PUSH
53390: LD_VAR 0 4
53394: ARRAY
53395: PPUSH
53396: CALL_OW 351
53400: IFFALSE 53441
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53402: LD_VAR 0 5
53406: PUSH
53407: LD_INT 1
53409: ARRAY
53410: PUSH
53411: LD_VAR 0 4
53415: ARRAY
53416: PPUSH
53417: LD_VAR 0 5
53421: PUSH
53422: LD_INT 2
53424: ARRAY
53425: PUSH
53426: LD_VAR 0 4
53430: ARRAY
53431: PPUSH
53432: LD_VAR 0 1
53436: PPUSH
53437: CALL_OW 244
// end ;
53441: GO 53363
53443: POP
53444: POP
// end ;
53445: LD_VAR 0 3
53449: RET
// export function UniqueArray ( array ) ; var i ; begin
53450: LD_INT 0
53452: PPUSH
53453: PPUSH
// result := [ ] ;
53454: LD_ADDR_VAR 0 2
53458: PUSH
53459: EMPTY
53460: ST_TO_ADDR
// if not array then
53461: LD_VAR 0 1
53465: NOT
53466: IFFALSE 53470
// exit ;
53468: GO 53531
// for i := 1 to array do
53470: LD_ADDR_VAR 0 3
53474: PUSH
53475: DOUBLE
53476: LD_INT 1
53478: DEC
53479: ST_TO_ADDR
53480: LD_VAR 0 1
53484: PUSH
53485: FOR_TO
53486: IFFALSE 53529
// if not array [ i ] in result then
53488: LD_VAR 0 1
53492: PUSH
53493: LD_VAR 0 3
53497: ARRAY
53498: PUSH
53499: LD_VAR 0 2
53503: IN
53504: NOT
53505: IFFALSE 53527
// result := Join ( result , i ) ;
53507: LD_ADDR_VAR 0 2
53511: PUSH
53512: LD_VAR 0 2
53516: PPUSH
53517: LD_VAR 0 3
53521: PPUSH
53522: CALL 48182 0 2
53526: ST_TO_ADDR
53527: GO 53485
53529: POP
53530: POP
// end ; end_of_file
53531: LD_VAR 0 2
53535: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53536: LD_VAR 0 1
53540: PUSH
53541: LD_INT 200
53543: DOUBLE
53544: GREATEREQUAL
53545: IFFALSE 53553
53547: LD_INT 299
53549: DOUBLE
53550: LESSEQUAL
53551: IFTRUE 53555
53553: GO 53587
53555: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53556: LD_VAR 0 1
53560: PPUSH
53561: LD_VAR 0 2
53565: PPUSH
53566: LD_VAR 0 3
53570: PPUSH
53571: LD_VAR 0 4
53575: PPUSH
53576: LD_VAR 0 5
53580: PPUSH
53581: CALL 54368 0 5
53585: GO 53664
53587: LD_INT 300
53589: DOUBLE
53590: GREATEREQUAL
53591: IFFALSE 53599
53593: LD_INT 399
53595: DOUBLE
53596: LESSEQUAL
53597: IFTRUE 53601
53599: GO 53663
53601: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53602: LD_VAR 0 1
53606: PPUSH
53607: LD_VAR 0 2
53611: PPUSH
53612: LD_VAR 0 3
53616: PPUSH
53617: LD_VAR 0 4
53621: PPUSH
53622: LD_VAR 0 5
53626: PPUSH
53627: LD_VAR 0 6
53631: PPUSH
53632: LD_VAR 0 7
53636: PPUSH
53637: LD_VAR 0 8
53641: PPUSH
53642: LD_VAR 0 9
53646: PPUSH
53647: LD_VAR 0 10
53651: PPUSH
53652: LD_VAR 0 11
53656: PPUSH
53657: CALL 61454 0 11
53661: GO 53664
53663: POP
// end ;
53664: PPOPN 11
53666: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53667: LD_VAR 0 1
53671: PPUSH
53672: LD_VAR 0 2
53676: PPUSH
53677: LD_VAR 0 3
53681: PPUSH
53682: LD_VAR 0 4
53686: PPUSH
53687: LD_VAR 0 5
53691: PPUSH
53692: CALL 53749 0 5
// end ; end_of_file
53696: PPOPN 5
53698: END
// export function SOS_UnitDestroyed ( un ) ; begin
53699: LD_INT 0
53701: PPUSH
// ComRadiation ( un ) ;
53702: LD_VAR 0 1
53706: PPUSH
53707: CALL 54788 0 1
// end ;
53711: LD_VAR 0 2
53715: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53716: LD_INT 0
53718: PPUSH
// ComRadiation ( un ) ;
53719: LD_VAR 0 1
53723: PPUSH
53724: CALL 54788 0 1
// end ;
53728: LD_VAR 0 2
53732: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53733: LD_INT 0
53735: PPUSH
// end ;
53736: LD_VAR 0 4
53740: RET
// export function SOS_Command ( cmd ) ; begin
53741: LD_INT 0
53743: PPUSH
// end ;
53744: LD_VAR 0 2
53748: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53749: LD_INT 0
53751: PPUSH
// end ;
53752: LD_VAR 0 6
53756: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53757: LD_INT 0
53759: PPUSH
53760: PPUSH
53761: PPUSH
53762: PPUSH
// if not vehicle or not factory then
53763: LD_VAR 0 1
53767: NOT
53768: IFTRUE 53777
53770: PUSH
53771: LD_VAR 0 2
53775: NOT
53776: OR
53777: IFFALSE 53781
// exit ;
53779: GO 54363
// if not factoryWaypoints then
53781: LD_EXP 59
53785: NOT
53786: IFFALSE 53790
// exit ;
53788: GO 54363
// for i := 1 to Count ( factoryWaypoints ) do
53790: LD_ADDR_VAR 0 4
53794: PUSH
53795: DOUBLE
53796: LD_INT 1
53798: DEC
53799: ST_TO_ADDR
53800: LD_EXP 59
53804: PPUSH
53805: CALL 12250 0 1
53809: PUSH
53810: FOR_TO
53811: IFFALSE 54361
// if factoryWaypoints [ i ] [ 2 ] = factory then
53813: LD_EXP 59
53817: PUSH
53818: LD_VAR 0 4
53822: ARRAY
53823: PUSH
53824: LD_INT 2
53826: ARRAY
53827: PUSH
53828: LD_VAR 0 2
53832: EQUAL
53833: IFFALSE 54359
// begin if GetControl ( vehicle ) = control_manual then
53835: LD_VAR 0 1
53839: PPUSH
53840: CALL_OW 263
53844: PUSH
53845: LD_INT 1
53847: EQUAL
53848: IFFALSE 54212
// begin driver := IsDrivenBy ( vehicle ) ;
53850: LD_ADDR_VAR 0 5
53854: PUSH
53855: LD_VAR 0 1
53859: PPUSH
53860: CALL_OW 311
53864: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53865: LD_VAR 0 5
53869: PUSH
53870: LD_EXP 60
53874: IN
53875: IFTRUE 53889
53877: PUSH
53878: LD_VAR 0 1
53882: PUSH
53883: LD_EXP 60
53887: IN
53888: OR
53889: IFFALSE 53895
// exit ;
53891: POP
53892: POP
53893: GO 54363
// if not HasTask ( driver ) then
53895: LD_VAR 0 5
53899: PPUSH
53900: CALL_OW 314
53904: NOT
53905: IFFALSE 54210
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53907: LD_ADDR_EXP 60
53911: PUSH
53912: LD_EXP 60
53916: PPUSH
53917: LD_VAR 0 5
53921: PPUSH
53922: CALL 48182 0 2
53926: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53927: LD_ADDR_EXP 60
53931: PUSH
53932: LD_EXP 60
53936: PPUSH
53937: LD_VAR 0 1
53941: PPUSH
53942: CALL 48182 0 2
53946: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53947: LD_ADDR_VAR 0 6
53951: PUSH
53952: LD_EXP 59
53956: PUSH
53957: LD_VAR 0 4
53961: ARRAY
53962: PUSH
53963: LD_INT 3
53965: ARRAY
53966: PPUSH
53967: LD_EXP 59
53971: PUSH
53972: LD_VAR 0 4
53976: ARRAY
53977: PUSH
53978: LD_INT 4
53980: ARRAY
53981: PPUSH
53982: CALL_OW 428
53986: ST_TO_ADDR
// if hex then
53987: LD_VAR 0 6
53991: IFFALSE 54009
// ComMoveUnit ( driver , hex ) else
53993: LD_VAR 0 5
53997: PPUSH
53998: LD_VAR 0 6
54002: PPUSH
54003: CALL_OW 112
54007: GO 54093
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54009: LD_VAR 0 1
54013: PPUSH
54014: LD_EXP 59
54018: PUSH
54019: LD_VAR 0 4
54023: ARRAY
54024: PUSH
54025: LD_INT 3
54027: ARRAY
54028: PPUSH
54029: LD_EXP 59
54033: PUSH
54034: LD_VAR 0 4
54038: ARRAY
54039: PUSH
54040: LD_INT 4
54042: ARRAY
54043: PPUSH
54044: CALL_OW 297
54048: PUSH
54049: LD_INT 0
54051: GREATER
54052: IFFALSE 54093
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54054: LD_VAR 0 5
54058: PPUSH
54059: LD_EXP 59
54063: PUSH
54064: LD_VAR 0 4
54068: ARRAY
54069: PUSH
54070: LD_INT 3
54072: ARRAY
54073: PPUSH
54074: LD_EXP 59
54078: PUSH
54079: LD_VAR 0 4
54083: ARRAY
54084: PUSH
54085: LD_INT 4
54087: ARRAY
54088: PPUSH
54089: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54093: LD_VAR 0 5
54097: PPUSH
54098: CALL_OW 181
// if Multiplayer then
54102: LD_OWVAR 4
54106: IFFALSE 54155
// begin repeat wait ( 10 ) ;
54108: LD_INT 10
54110: PPUSH
54111: CALL_OW 67
// until not IsInUnit ( driver ) ;
54115: LD_VAR 0 5
54119: PPUSH
54120: CALL_OW 310
54124: NOT
54125: IFFALSE 54108
// if not HasTask ( driver ) then
54127: LD_VAR 0 5
54131: PPUSH
54132: CALL_OW 314
54136: NOT
54137: IFFALSE 54153
// ComEnterUnit ( driver , factory ) ;
54139: LD_VAR 0 5
54143: PPUSH
54144: LD_VAR 0 2
54148: PPUSH
54149: CALL_OW 120
// end else
54153: GO 54169
// AddComEnterUnit ( driver , factory ) ;
54155: LD_VAR 0 5
54159: PPUSH
54160: LD_VAR 0 2
54164: PPUSH
54165: CALL_OW 180
// wait ( 0 0$1 ) ;
54169: LD_INT 35
54171: PPUSH
54172: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54176: LD_ADDR_EXP 60
54180: PUSH
54181: LD_EXP 60
54185: PUSH
54186: LD_VAR 0 5
54190: DIFF
54191: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54192: LD_ADDR_EXP 60
54196: PUSH
54197: LD_EXP 60
54201: PUSH
54202: LD_VAR 0 1
54206: DIFF
54207: ST_TO_ADDR
// break ;
54208: GO 54361
// end ; end else
54210: GO 54359
// if GetControl ( vehicle ) = control_remote then
54212: LD_VAR 0 1
54216: PPUSH
54217: CALL_OW 263
54221: PUSH
54222: LD_INT 2
54224: EQUAL
54225: IFFALSE 54311
// begin wait ( 0 0$2 ) ;
54227: LD_INT 70
54229: PPUSH
54230: CALL_OW 67
// repeat wait ( 10 ) ;
54234: LD_INT 10
54236: PPUSH
54237: CALL_OW 67
// Connect ( vehicle ) ;
54241: LD_VAR 0 1
54245: PPUSH
54246: CALL 18494 0 1
// until IsControledBy ( vehicle ) ;
54250: LD_VAR 0 1
54254: PPUSH
54255: CALL_OW 312
54259: IFFALSE 54234
// wait ( 10 ) ;
54261: LD_INT 10
54263: PPUSH
54264: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54268: LD_VAR 0 1
54272: PPUSH
54273: LD_EXP 59
54277: PUSH
54278: LD_VAR 0 4
54282: ARRAY
54283: PUSH
54284: LD_INT 3
54286: ARRAY
54287: PPUSH
54288: LD_EXP 59
54292: PUSH
54293: LD_VAR 0 4
54297: ARRAY
54298: PUSH
54299: LD_INT 4
54301: ARRAY
54302: PPUSH
54303: CALL_OW 111
// break ;
54307: GO 54361
// end else
54309: GO 54359
// begin wait ( 0 0$3 ) ;
54311: LD_INT 105
54313: PPUSH
54314: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54318: LD_VAR 0 1
54322: PPUSH
54323: LD_EXP 59
54327: PUSH
54328: LD_VAR 0 4
54332: ARRAY
54333: PUSH
54334: LD_INT 3
54336: ARRAY
54337: PPUSH
54338: LD_EXP 59
54342: PUSH
54343: LD_VAR 0 4
54347: ARRAY
54348: PUSH
54349: LD_INT 4
54351: ARRAY
54352: PPUSH
54353: CALL_OW 111
// break ;
54357: GO 54361
// end ; end ;
54359: GO 53810
54361: POP
54362: POP
// end ;
54363: LD_VAR 0 3
54367: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54368: LD_INT 0
54370: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54371: LD_VAR 0 1
54375: PUSH
54376: LD_INT 250
54378: EQUAL
54379: IFFALSE 54396
54381: PUSH
54382: LD_VAR 0 2
54386: PPUSH
54387: CALL_OW 264
54391: PUSH
54392: LD_INT 81
54394: EQUAL
54395: AND
54396: IFFALSE 54417
// MinerPlaceMine ( unit , x , y ) ;
54398: LD_VAR 0 2
54402: PPUSH
54403: LD_VAR 0 4
54407: PPUSH
54408: LD_VAR 0 5
54412: PPUSH
54413: CALL 57549 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54417: LD_VAR 0 1
54421: PUSH
54422: LD_INT 251
54424: EQUAL
54425: IFFALSE 54442
54427: PUSH
54428: LD_VAR 0 2
54432: PPUSH
54433: CALL_OW 264
54437: PUSH
54438: LD_INT 81
54440: EQUAL
54441: AND
54442: IFFALSE 54463
// MinerDetonateMine ( unit , x , y ) ;
54444: LD_VAR 0 2
54448: PPUSH
54449: LD_VAR 0 4
54453: PPUSH
54454: LD_VAR 0 5
54458: PPUSH
54459: CALL 57828 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54463: LD_VAR 0 1
54467: PUSH
54468: LD_INT 252
54470: EQUAL
54471: IFFALSE 54488
54473: PUSH
54474: LD_VAR 0 2
54478: PPUSH
54479: CALL_OW 264
54483: PUSH
54484: LD_INT 81
54486: EQUAL
54487: AND
54488: IFFALSE 54509
// MinerCreateMinefield ( unit , x , y ) ;
54490: LD_VAR 0 2
54494: PPUSH
54495: LD_VAR 0 4
54499: PPUSH
54500: LD_VAR 0 5
54504: PPUSH
54505: CALL 58247 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54509: LD_VAR 0 1
54513: PUSH
54514: LD_INT 253
54516: EQUAL
54517: IFFALSE 54534
54519: PUSH
54520: LD_VAR 0 2
54524: PPUSH
54525: CALL_OW 257
54529: PUSH
54530: LD_INT 5
54532: EQUAL
54533: AND
54534: IFFALSE 54555
// ComBinocular ( unit , x , y ) ;
54536: LD_VAR 0 2
54540: PPUSH
54541: LD_VAR 0 4
54545: PPUSH
54546: LD_VAR 0 5
54550: PPUSH
54551: CALL 58622 0 3
// if selectedUnit then
54555: LD_VAR 0 3
54559: IFFALSE 54619
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54561: LD_VAR 0 1
54565: PUSH
54566: LD_INT 254
54568: EQUAL
54569: IFFALSE 54586
54571: PUSH
54572: LD_VAR 0 2
54576: PPUSH
54577: CALL_OW 264
54581: PUSH
54582: LD_INT 99
54584: EQUAL
54585: AND
54586: IFFALSE 54603
54588: PUSH
54589: LD_VAR 0 3
54593: PPUSH
54594: CALL_OW 263
54598: PUSH
54599: LD_INT 3
54601: EQUAL
54602: AND
54603: IFFALSE 54619
// HackDestroyVehicle ( unit , selectedUnit ) ;
54605: LD_VAR 0 2
54609: PPUSH
54610: LD_VAR 0 3
54614: PPUSH
54615: CALL 56909 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54619: LD_VAR 0 1
54623: PUSH
54624: LD_INT 255
54626: EQUAL
54627: IFFALSE 54651
54629: PUSH
54630: LD_VAR 0 2
54634: PPUSH
54635: CALL_OW 264
54639: PUSH
54640: LD_INT 14
54642: PUSH
54643: LD_INT 53
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: IN
54650: AND
54651: IFFALSE 54669
54653: PUSH
54654: LD_VAR 0 4
54658: PPUSH
54659: LD_VAR 0 5
54663: PPUSH
54664: CALL_OW 488
54668: AND
54669: IFFALSE 54693
// CutTreeXYR ( unit , x , y , 12 ) ;
54671: LD_VAR 0 2
54675: PPUSH
54676: LD_VAR 0 4
54680: PPUSH
54681: LD_VAR 0 5
54685: PPUSH
54686: LD_INT 12
54688: PPUSH
54689: CALL 54884 0 4
// if cmd = 256 then
54693: LD_VAR 0 1
54697: PUSH
54698: LD_INT 256
54700: EQUAL
54701: IFFALSE 54722
// SetFactoryWaypoint ( unit , x , y ) ;
54703: LD_VAR 0 2
54707: PPUSH
54708: LD_VAR 0 4
54712: PPUSH
54713: LD_VAR 0 5
54717: PPUSH
54718: CALL 61462 0 3
// if cmd = 257 then
54722: LD_VAR 0 1
54726: PUSH
54727: LD_INT 257
54729: EQUAL
54730: IFFALSE 54751
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54732: LD_VAR 0 2
54736: PPUSH
54737: LD_VAR 0 4
54741: PPUSH
54742: LD_VAR 0 5
54746: PPUSH
54747: CALL 61958 0 3
// if cmd = 258 then
54751: LD_VAR 0 1
54755: PUSH
54756: LD_INT 258
54758: EQUAL
54759: IFFALSE 54783
// BurnTreeXYR ( unit , x , y , 8 ) ;
54761: LD_VAR 0 2
54765: PPUSH
54766: LD_VAR 0 4
54770: PPUSH
54771: LD_VAR 0 5
54775: PPUSH
54776: LD_INT 8
54778: PPUSH
54779: CALL 55284 0 4
// end ;
54783: LD_VAR 0 6
54787: RET
// export function ComRadiation ( un ) ; var eff ; begin
54788: LD_INT 0
54790: PPUSH
54791: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54792: LD_VAR 0 1
54796: PPUSH
54797: CALL_OW 264
54801: PUSH
54802: LD_INT 91
54804: NONEQUAL
54805: IFFALSE 54809
// exit ;
54807: GO 54879
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54809: LD_INT 68
54811: PPUSH
54812: LD_VAR 0 1
54816: PPUSH
54817: CALL_OW 255
54821: PPUSH
54822: CALL_OW 321
54826: PUSH
54827: LD_INT 2
54829: EQUAL
54830: IFFALSE 54842
// eff := 50 else
54832: LD_ADDR_VAR 0 3
54836: PUSH
54837: LD_INT 50
54839: ST_TO_ADDR
54840: GO 54850
// eff := 25 ;
54842: LD_ADDR_VAR 0 3
54846: PUSH
54847: LD_INT 25
54849: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54850: LD_VAR 0 1
54854: PPUSH
54855: CALL_OW 250
54859: PPUSH
54860: LD_VAR 0 1
54864: PPUSH
54865: CALL_OW 251
54869: PPUSH
54870: LD_VAR 0 3
54874: PPUSH
54875: CALL_OW 495
// end ;
54879: LD_VAR 0 2
54883: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54884: LD_INT 0
54886: PPUSH
54887: PPUSH
54888: PPUSH
54889: PPUSH
54890: PPUSH
54891: PPUSH
54892: PPUSH
54893: PPUSH
54894: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54895: LD_VAR 0 1
54899: PPUSH
54900: CALL_OW 302
54904: NOT
54905: IFTRUE 54924
54907: PUSH
54908: LD_VAR 0 2
54912: PPUSH
54913: LD_VAR 0 3
54917: PPUSH
54918: CALL_OW 488
54922: NOT
54923: OR
54924: IFTRUE 54933
54926: PUSH
54927: LD_VAR 0 4
54931: NOT
54932: OR
54933: IFFALSE 54937
// exit ;
54935: GO 55279
// list := [ ] ;
54937: LD_ADDR_VAR 0 13
54941: PUSH
54942: EMPTY
54943: ST_TO_ADDR
// if x - r < 0 then
54944: LD_VAR 0 2
54948: PUSH
54949: LD_VAR 0 4
54953: MINUS
54954: PUSH
54955: LD_INT 0
54957: LESS
54958: IFFALSE 54970
// min_x := 0 else
54960: LD_ADDR_VAR 0 7
54964: PUSH
54965: LD_INT 0
54967: ST_TO_ADDR
54968: GO 54986
// min_x := x - r ;
54970: LD_ADDR_VAR 0 7
54974: PUSH
54975: LD_VAR 0 2
54979: PUSH
54980: LD_VAR 0 4
54984: MINUS
54985: ST_TO_ADDR
// if y - r < 0 then
54986: LD_VAR 0 3
54990: PUSH
54991: LD_VAR 0 4
54995: MINUS
54996: PUSH
54997: LD_INT 0
54999: LESS
55000: IFFALSE 55012
// min_y := 0 else
55002: LD_ADDR_VAR 0 8
55006: PUSH
55007: LD_INT 0
55009: ST_TO_ADDR
55010: GO 55028
// min_y := y - r ;
55012: LD_ADDR_VAR 0 8
55016: PUSH
55017: LD_VAR 0 3
55021: PUSH
55022: LD_VAR 0 4
55026: MINUS
55027: ST_TO_ADDR
// max_x := x + r ;
55028: LD_ADDR_VAR 0 9
55032: PUSH
55033: LD_VAR 0 2
55037: PUSH
55038: LD_VAR 0 4
55042: PLUS
55043: ST_TO_ADDR
// max_y := y + r ;
55044: LD_ADDR_VAR 0 10
55048: PUSH
55049: LD_VAR 0 3
55053: PUSH
55054: LD_VAR 0 4
55058: PLUS
55059: ST_TO_ADDR
// for _x = min_x to max_x do
55060: LD_ADDR_VAR 0 11
55064: PUSH
55065: DOUBLE
55066: LD_VAR 0 7
55070: DEC
55071: ST_TO_ADDR
55072: LD_VAR 0 9
55076: PUSH
55077: FOR_TO
55078: IFFALSE 55197
// for _y = min_y to max_y do
55080: LD_ADDR_VAR 0 12
55084: PUSH
55085: DOUBLE
55086: LD_VAR 0 8
55090: DEC
55091: ST_TO_ADDR
55092: LD_VAR 0 10
55096: PUSH
55097: FOR_TO
55098: IFFALSE 55193
// begin if not ValidHex ( _x , _y ) then
55100: LD_VAR 0 11
55104: PPUSH
55105: LD_VAR 0 12
55109: PPUSH
55110: CALL_OW 488
55114: NOT
55115: IFFALSE 55119
// continue ;
55117: GO 55097
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55119: LD_VAR 0 11
55123: PPUSH
55124: LD_VAR 0 12
55128: PPUSH
55129: CALL_OW 351
55133: IFFALSE 55151
55135: PUSH
55136: LD_VAR 0 11
55140: PPUSH
55141: LD_VAR 0 12
55145: PPUSH
55146: CALL_OW 554
55150: AND
55151: IFFALSE 55191
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55153: LD_ADDR_VAR 0 13
55157: PUSH
55158: LD_VAR 0 13
55162: PPUSH
55163: LD_VAR 0 13
55167: PUSH
55168: LD_INT 1
55170: PLUS
55171: PPUSH
55172: LD_VAR 0 11
55176: PUSH
55177: LD_VAR 0 12
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PPUSH
55186: CALL_OW 2
55190: ST_TO_ADDR
// end ;
55191: GO 55097
55193: POP
55194: POP
55195: GO 55077
55197: POP
55198: POP
// if not list then
55199: LD_VAR 0 13
55203: NOT
55204: IFFALSE 55208
// exit ;
55206: GO 55279
// for i in list do
55208: LD_ADDR_VAR 0 6
55212: PUSH
55213: LD_VAR 0 13
55217: PUSH
55218: FOR_IN
55219: IFFALSE 55277
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55221: LD_VAR 0 1
55225: PPUSH
55226: LD_STRING M
55228: PUSH
55229: LD_VAR 0 6
55233: PUSH
55234: LD_INT 1
55236: ARRAY
55237: PUSH
55238: LD_VAR 0 6
55242: PUSH
55243: LD_INT 2
55245: ARRAY
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: PUSH
55268: EMPTY
55269: LIST
55270: PPUSH
55271: CALL_OW 447
55275: GO 55218
55277: POP
55278: POP
// end ;
55279: LD_VAR 0 5
55283: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55284: LD_INT 0
55286: PPUSH
55287: PPUSH
55288: PPUSH
55289: PPUSH
55290: PPUSH
55291: PPUSH
55292: PPUSH
55293: PPUSH
55294: PPUSH
55295: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55296: LD_VAR 0 1
55300: PPUSH
55301: CALL_OW 302
55305: NOT
55306: IFTRUE 55325
55308: PUSH
55309: LD_VAR 0 2
55313: PPUSH
55314: LD_VAR 0 3
55318: PPUSH
55319: CALL_OW 488
55323: NOT
55324: OR
55325: IFTRUE 55334
55327: PUSH
55328: LD_VAR 0 4
55332: NOT
55333: OR
55334: IFFALSE 55338
// exit ;
55336: GO 55855
// list := [ ] ;
55338: LD_ADDR_VAR 0 13
55342: PUSH
55343: EMPTY
55344: ST_TO_ADDR
// if x - r < 0 then
55345: LD_VAR 0 2
55349: PUSH
55350: LD_VAR 0 4
55354: MINUS
55355: PUSH
55356: LD_INT 0
55358: LESS
55359: IFFALSE 55371
// min_x := 0 else
55361: LD_ADDR_VAR 0 7
55365: PUSH
55366: LD_INT 0
55368: ST_TO_ADDR
55369: GO 55387
// min_x := x - r ;
55371: LD_ADDR_VAR 0 7
55375: PUSH
55376: LD_VAR 0 2
55380: PUSH
55381: LD_VAR 0 4
55385: MINUS
55386: ST_TO_ADDR
// if y - r < 0 then
55387: LD_VAR 0 3
55391: PUSH
55392: LD_VAR 0 4
55396: MINUS
55397: PUSH
55398: LD_INT 0
55400: LESS
55401: IFFALSE 55413
// min_y := 0 else
55403: LD_ADDR_VAR 0 8
55407: PUSH
55408: LD_INT 0
55410: ST_TO_ADDR
55411: GO 55429
// min_y := y - r ;
55413: LD_ADDR_VAR 0 8
55417: PUSH
55418: LD_VAR 0 3
55422: PUSH
55423: LD_VAR 0 4
55427: MINUS
55428: ST_TO_ADDR
// max_x := x + r ;
55429: LD_ADDR_VAR 0 9
55433: PUSH
55434: LD_VAR 0 2
55438: PUSH
55439: LD_VAR 0 4
55443: PLUS
55444: ST_TO_ADDR
// max_y := y + r ;
55445: LD_ADDR_VAR 0 10
55449: PUSH
55450: LD_VAR 0 3
55454: PUSH
55455: LD_VAR 0 4
55459: PLUS
55460: ST_TO_ADDR
// for _x = min_x to max_x do
55461: LD_ADDR_VAR 0 11
55465: PUSH
55466: DOUBLE
55467: LD_VAR 0 7
55471: DEC
55472: ST_TO_ADDR
55473: LD_VAR 0 9
55477: PUSH
55478: FOR_TO
55479: IFFALSE 55598
// for _y = min_y to max_y do
55481: LD_ADDR_VAR 0 12
55485: PUSH
55486: DOUBLE
55487: LD_VAR 0 8
55491: DEC
55492: ST_TO_ADDR
55493: LD_VAR 0 10
55497: PUSH
55498: FOR_TO
55499: IFFALSE 55594
// begin if not ValidHex ( _x , _y ) then
55501: LD_VAR 0 11
55505: PPUSH
55506: LD_VAR 0 12
55510: PPUSH
55511: CALL_OW 488
55515: NOT
55516: IFFALSE 55520
// continue ;
55518: GO 55498
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55520: LD_VAR 0 11
55524: PPUSH
55525: LD_VAR 0 12
55529: PPUSH
55530: CALL_OW 351
55534: IFFALSE 55552
55536: PUSH
55537: LD_VAR 0 11
55541: PPUSH
55542: LD_VAR 0 12
55546: PPUSH
55547: CALL_OW 554
55551: AND
55552: IFFALSE 55592
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55554: LD_ADDR_VAR 0 13
55558: PUSH
55559: LD_VAR 0 13
55563: PPUSH
55564: LD_VAR 0 13
55568: PUSH
55569: LD_INT 1
55571: PLUS
55572: PPUSH
55573: LD_VAR 0 11
55577: PUSH
55578: LD_VAR 0 12
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PPUSH
55587: CALL_OW 2
55591: ST_TO_ADDR
// end ;
55592: GO 55498
55594: POP
55595: POP
55596: GO 55478
55598: POP
55599: POP
// if not list then
55600: LD_VAR 0 13
55604: NOT
55605: IFFALSE 55609
// exit ;
55607: GO 55855
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55609: LD_ADDR_VAR 0 13
55613: PUSH
55614: LD_VAR 0 1
55618: PPUSH
55619: LD_VAR 0 13
55623: PPUSH
55624: LD_INT 1
55626: PPUSH
55627: LD_INT 1
55629: PPUSH
55630: CALL 15622 0 4
55634: ST_TO_ADDR
// ComStop ( flame ) ;
55635: LD_VAR 0 1
55639: PPUSH
55640: CALL_OW 141
// for i in list do
55644: LD_ADDR_VAR 0 6
55648: PUSH
55649: LD_VAR 0 13
55653: PUSH
55654: FOR_IN
55655: IFFALSE 55686
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55657: LD_VAR 0 1
55661: PPUSH
55662: LD_VAR 0 6
55666: PUSH
55667: LD_INT 1
55669: ARRAY
55670: PPUSH
55671: LD_VAR 0 6
55675: PUSH
55676: LD_INT 2
55678: ARRAY
55679: PPUSH
55680: CALL_OW 176
55684: GO 55654
55686: POP
55687: POP
// repeat wait ( 0 0$1 ) ;
55688: LD_INT 35
55690: PPUSH
55691: CALL_OW 67
// task := GetTaskList ( flame ) ;
55695: LD_ADDR_VAR 0 14
55699: PUSH
55700: LD_VAR 0 1
55704: PPUSH
55705: CALL_OW 437
55709: ST_TO_ADDR
// if not task then
55710: LD_VAR 0 14
55714: NOT
55715: IFFALSE 55719
// exit ;
55717: GO 55855
// if task [ 1 ] [ 1 ] <> | then
55719: LD_VAR 0 14
55723: PUSH
55724: LD_INT 1
55726: ARRAY
55727: PUSH
55728: LD_INT 1
55730: ARRAY
55731: PUSH
55732: LD_STRING |
55734: NONEQUAL
55735: IFFALSE 55739
// exit ;
55737: GO 55855
// _x := task [ 1 ] [ 2 ] ;
55739: LD_ADDR_VAR 0 11
55743: PUSH
55744: LD_VAR 0 14
55748: PUSH
55749: LD_INT 1
55751: ARRAY
55752: PUSH
55753: LD_INT 2
55755: ARRAY
55756: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55757: LD_ADDR_VAR 0 12
55761: PUSH
55762: LD_VAR 0 14
55766: PUSH
55767: LD_INT 1
55769: ARRAY
55770: PUSH
55771: LD_INT 3
55773: ARRAY
55774: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55775: LD_VAR 0 11
55779: PPUSH
55780: LD_VAR 0 12
55784: PPUSH
55785: CALL_OW 351
55789: NOT
55790: IFTRUE 55809
55792: PUSH
55793: LD_VAR 0 11
55797: PPUSH
55798: LD_VAR 0 12
55802: PPUSH
55803: CALL_OW 554
55807: NOT
55808: OR
55809: IFFALSE 55843
// begin task := Delete ( task , 1 ) ;
55811: LD_ADDR_VAR 0 14
55815: PUSH
55816: LD_VAR 0 14
55820: PPUSH
55821: LD_INT 1
55823: PPUSH
55824: CALL_OW 3
55828: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55829: LD_VAR 0 1
55833: PPUSH
55834: LD_VAR 0 14
55838: PPUSH
55839: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55843: LD_VAR 0 1
55847: PPUSH
55848: CALL_OW 314
55852: NOT
55853: IFFALSE 55688
// end ;
55855: LD_VAR 0 5
55859: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55860: LD_EXP 48
55864: NOT
55865: IFFALSE 55915
55867: GO 55869
55869: DISABLE
// begin initHack := true ;
55870: LD_ADDR_EXP 48
55874: PUSH
55875: LD_INT 1
55877: ST_TO_ADDR
// hackTanks := [ ] ;
55878: LD_ADDR_EXP 49
55882: PUSH
55883: EMPTY
55884: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55885: LD_ADDR_EXP 50
55889: PUSH
55890: EMPTY
55891: ST_TO_ADDR
// hackLimit := 3 ;
55892: LD_ADDR_EXP 51
55896: PUSH
55897: LD_INT 3
55899: ST_TO_ADDR
// hackDist := 12 ;
55900: LD_ADDR_EXP 52
55904: PUSH
55905: LD_INT 12
55907: ST_TO_ADDR
// hackCounter := [ ] ;
55908: LD_ADDR_EXP 53
55912: PUSH
55913: EMPTY
55914: ST_TO_ADDR
// end ;
55915: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55916: LD_EXP 48
55920: IFFALSE 55938
55922: PUSH
55923: LD_INT 34
55925: PUSH
55926: LD_INT 99
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PPUSH
55933: CALL_OW 69
55937: AND
55938: IFFALSE 56191
55940: GO 55942
55942: DISABLE
55943: LD_INT 0
55945: PPUSH
55946: PPUSH
// begin enable ;
55947: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55948: LD_ADDR_VAR 0 1
55952: PUSH
55953: LD_INT 34
55955: PUSH
55956: LD_INT 99
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PPUSH
55963: CALL_OW 69
55967: PUSH
55968: FOR_IN
55969: IFFALSE 56189
// begin if not i in hackTanks then
55971: LD_VAR 0 1
55975: PUSH
55976: LD_EXP 49
55980: IN
55981: NOT
55982: IFFALSE 56065
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55984: LD_ADDR_EXP 49
55988: PUSH
55989: LD_EXP 49
55993: PPUSH
55994: LD_EXP 49
55998: PUSH
55999: LD_INT 1
56001: PLUS
56002: PPUSH
56003: LD_VAR 0 1
56007: PPUSH
56008: CALL_OW 1
56012: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56013: LD_ADDR_EXP 50
56017: PUSH
56018: LD_EXP 50
56022: PPUSH
56023: LD_EXP 50
56027: PUSH
56028: LD_INT 1
56030: PLUS
56031: PPUSH
56032: EMPTY
56033: PPUSH
56034: CALL_OW 1
56038: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56039: LD_ADDR_EXP 53
56043: PUSH
56044: LD_EXP 53
56048: PPUSH
56049: LD_EXP 53
56053: PUSH
56054: LD_INT 1
56056: PLUS
56057: PPUSH
56058: EMPTY
56059: PPUSH
56060: CALL_OW 1
56064: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56065: LD_VAR 0 1
56069: PPUSH
56070: CALL_OW 302
56074: NOT
56075: IFFALSE 56088
// begin HackUnlinkAll ( i ) ;
56077: LD_VAR 0 1
56081: PPUSH
56082: CALL 56194 0 1
// continue ;
56086: GO 55968
// end ; HackCheckCapturedStatus ( i ) ;
56088: LD_VAR 0 1
56092: PPUSH
56093: CALL 56639 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56097: LD_ADDR_VAR 0 2
56101: PUSH
56102: LD_INT 81
56104: PUSH
56105: LD_VAR 0 1
56109: PPUSH
56110: CALL_OW 255
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 33
56121: PUSH
56122: LD_INT 3
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 91
56131: PUSH
56132: LD_VAR 0 1
56136: PUSH
56137: LD_EXP 52
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 50
56149: PUSH
56150: EMPTY
56151: LIST
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: PPUSH
56159: CALL_OW 69
56163: ST_TO_ADDR
// if not tmp then
56164: LD_VAR 0 2
56168: NOT
56169: IFFALSE 56173
// continue ;
56171: GO 55968
// HackLink ( i , tmp ) ;
56173: LD_VAR 0 1
56177: PPUSH
56178: LD_VAR 0 2
56182: PPUSH
56183: CALL 56330 0 2
// end ;
56187: GO 55968
56189: POP
56190: POP
// end ;
56191: PPOPN 2
56193: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56194: LD_INT 0
56196: PPUSH
56197: PPUSH
56198: PPUSH
// if not hack in hackTanks then
56199: LD_VAR 0 1
56203: PUSH
56204: LD_EXP 49
56208: IN
56209: NOT
56210: IFFALSE 56214
// exit ;
56212: GO 56325
// index := GetElementIndex ( hackTanks , hack ) ;
56214: LD_ADDR_VAR 0 4
56218: PUSH
56219: LD_EXP 49
56223: PPUSH
56224: LD_VAR 0 1
56228: PPUSH
56229: CALL 14917 0 2
56233: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56234: LD_EXP 50
56238: PUSH
56239: LD_VAR 0 4
56243: ARRAY
56244: IFFALSE 56325
// begin for i in hackTanksCaptured [ index ] do
56246: LD_ADDR_VAR 0 3
56250: PUSH
56251: LD_EXP 50
56255: PUSH
56256: LD_VAR 0 4
56260: ARRAY
56261: PUSH
56262: FOR_IN
56263: IFFALSE 56289
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56265: LD_VAR 0 3
56269: PUSH
56270: LD_INT 1
56272: ARRAY
56273: PPUSH
56274: LD_VAR 0 3
56278: PUSH
56279: LD_INT 2
56281: ARRAY
56282: PPUSH
56283: CALL_OW 235
56287: GO 56262
56289: POP
56290: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56291: LD_ADDR_EXP 50
56295: PUSH
56296: LD_EXP 50
56300: PPUSH
56301: LD_VAR 0 4
56305: PPUSH
56306: EMPTY
56307: PPUSH
56308: CALL_OW 1
56312: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56313: LD_VAR 0 1
56317: PPUSH
56318: LD_INT 0
56320: PPUSH
56321: CALL_OW 505
// end ; end ;
56325: LD_VAR 0 2
56329: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56330: LD_INT 0
56332: PPUSH
56333: PPUSH
56334: PPUSH
// if not hack in hackTanks or not vehicles then
56335: LD_VAR 0 1
56339: PUSH
56340: LD_EXP 49
56344: IN
56345: NOT
56346: IFTRUE 56355
56348: PUSH
56349: LD_VAR 0 2
56353: NOT
56354: OR
56355: IFFALSE 56359
// exit ;
56357: GO 56634
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56359: LD_ADDR_VAR 0 2
56363: PUSH
56364: LD_VAR 0 1
56368: PPUSH
56369: LD_VAR 0 2
56373: PPUSH
56374: LD_INT 1
56376: PPUSH
56377: LD_INT 1
56379: PPUSH
56380: CALL 15569 0 4
56384: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56385: LD_ADDR_VAR 0 5
56389: PUSH
56390: LD_EXP 49
56394: PPUSH
56395: LD_VAR 0 1
56399: PPUSH
56400: CALL 14917 0 2
56404: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56405: LD_EXP 50
56409: PUSH
56410: LD_VAR 0 5
56414: ARRAY
56415: PUSH
56416: LD_EXP 51
56420: LESS
56421: IFFALSE 56610
// begin for i := 1 to vehicles do
56423: LD_ADDR_VAR 0 4
56427: PUSH
56428: DOUBLE
56429: LD_INT 1
56431: DEC
56432: ST_TO_ADDR
56433: LD_VAR 0 2
56437: PUSH
56438: FOR_TO
56439: IFFALSE 56608
// begin if hackTanksCaptured [ index ] = hackLimit then
56441: LD_EXP 50
56445: PUSH
56446: LD_VAR 0 5
56450: ARRAY
56451: PUSH
56452: LD_EXP 51
56456: EQUAL
56457: IFFALSE 56461
// break ;
56459: GO 56608
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56461: LD_ADDR_EXP 53
56465: PUSH
56466: LD_EXP 53
56470: PPUSH
56471: LD_VAR 0 5
56475: PPUSH
56476: LD_EXP 53
56480: PUSH
56481: LD_VAR 0 5
56485: ARRAY
56486: PUSH
56487: LD_INT 1
56489: PLUS
56490: PPUSH
56491: CALL_OW 1
56495: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56496: LD_ADDR_EXP 50
56500: PUSH
56501: LD_EXP 50
56505: PPUSH
56506: LD_VAR 0 5
56510: PUSH
56511: LD_EXP 50
56515: PUSH
56516: LD_VAR 0 5
56520: ARRAY
56521: PUSH
56522: LD_INT 1
56524: PLUS
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PPUSH
56530: LD_VAR 0 2
56534: PUSH
56535: LD_VAR 0 4
56539: ARRAY
56540: PUSH
56541: LD_VAR 0 2
56545: PUSH
56546: LD_VAR 0 4
56550: ARRAY
56551: PPUSH
56552: CALL_OW 255
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PPUSH
56561: CALL 15134 0 3
56565: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56566: LD_VAR 0 2
56570: PUSH
56571: LD_VAR 0 4
56575: ARRAY
56576: PPUSH
56577: LD_VAR 0 1
56581: PPUSH
56582: CALL_OW 255
56586: PPUSH
56587: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56591: LD_VAR 0 2
56595: PUSH
56596: LD_VAR 0 4
56600: ARRAY
56601: PPUSH
56602: CALL_OW 141
// end ;
56606: GO 56438
56608: POP
56609: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56610: LD_VAR 0 1
56614: PPUSH
56615: LD_EXP 50
56619: PUSH
56620: LD_VAR 0 5
56624: ARRAY
56625: PUSH
56626: LD_INT 0
56628: PLUS
56629: PPUSH
56630: CALL_OW 505
// end ;
56634: LD_VAR 0 3
56638: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56639: LD_INT 0
56641: PPUSH
56642: PPUSH
56643: PPUSH
56644: PPUSH
// if not hack in hackTanks then
56645: LD_VAR 0 1
56649: PUSH
56650: LD_EXP 49
56654: IN
56655: NOT
56656: IFFALSE 56660
// exit ;
56658: GO 56904
// index := GetElementIndex ( hackTanks , hack ) ;
56660: LD_ADDR_VAR 0 4
56664: PUSH
56665: LD_EXP 49
56669: PPUSH
56670: LD_VAR 0 1
56674: PPUSH
56675: CALL 14917 0 2
56679: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56680: LD_ADDR_VAR 0 3
56684: PUSH
56685: DOUBLE
56686: LD_EXP 50
56690: PUSH
56691: LD_VAR 0 4
56695: ARRAY
56696: INC
56697: ST_TO_ADDR
56698: LD_INT 1
56700: PUSH
56701: FOR_DOWNTO
56702: IFFALSE 56878
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56704: LD_ADDR_VAR 0 5
56708: PUSH
56709: LD_EXP 50
56713: PUSH
56714: LD_VAR 0 4
56718: ARRAY
56719: PUSH
56720: LD_VAR 0 3
56724: ARRAY
56725: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56726: LD_VAR 0 5
56730: PUSH
56731: LD_INT 1
56733: ARRAY
56734: PPUSH
56735: CALL_OW 302
56739: NOT
56740: IFTRUE 56768
56742: PUSH
56743: LD_VAR 0 5
56747: PUSH
56748: LD_INT 1
56750: ARRAY
56751: PPUSH
56752: CALL_OW 255
56756: PUSH
56757: LD_VAR 0 1
56761: PPUSH
56762: CALL_OW 255
56766: NONEQUAL
56767: OR
56768: IFFALSE 56876
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56770: LD_VAR 0 5
56774: PUSH
56775: LD_INT 1
56777: ARRAY
56778: PPUSH
56779: CALL_OW 305
56783: IFFALSE 56811
56785: PUSH
56786: LD_VAR 0 5
56790: PUSH
56791: LD_INT 1
56793: ARRAY
56794: PPUSH
56795: CALL_OW 255
56799: PUSH
56800: LD_VAR 0 1
56804: PPUSH
56805: CALL_OW 255
56809: EQUAL
56810: AND
56811: IFFALSE 56835
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56813: LD_VAR 0 5
56817: PUSH
56818: LD_INT 1
56820: ARRAY
56821: PPUSH
56822: LD_VAR 0 5
56826: PUSH
56827: LD_INT 2
56829: ARRAY
56830: PPUSH
56831: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56835: LD_ADDR_EXP 50
56839: PUSH
56840: LD_EXP 50
56844: PPUSH
56845: LD_VAR 0 4
56849: PPUSH
56850: LD_EXP 50
56854: PUSH
56855: LD_VAR 0 4
56859: ARRAY
56860: PPUSH
56861: LD_VAR 0 3
56865: PPUSH
56866: CALL_OW 3
56870: PPUSH
56871: CALL_OW 1
56875: ST_TO_ADDR
// end ; end ;
56876: GO 56701
56878: POP
56879: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56880: LD_VAR 0 1
56884: PPUSH
56885: LD_EXP 50
56889: PUSH
56890: LD_VAR 0 4
56894: ARRAY
56895: PUSH
56896: LD_INT 0
56898: PLUS
56899: PPUSH
56900: CALL_OW 505
// end ;
56904: LD_VAR 0 2
56908: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56909: LD_INT 0
56911: PPUSH
56912: PPUSH
56913: PPUSH
56914: PPUSH
// if not hack in hackTanks then
56915: LD_VAR 0 1
56919: PUSH
56920: LD_EXP 49
56924: IN
56925: NOT
56926: IFFALSE 56930
// exit ;
56928: GO 57015
// index := GetElementIndex ( hackTanks , hack ) ;
56930: LD_ADDR_VAR 0 5
56934: PUSH
56935: LD_EXP 49
56939: PPUSH
56940: LD_VAR 0 1
56944: PPUSH
56945: CALL 14917 0 2
56949: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56950: LD_ADDR_VAR 0 4
56954: PUSH
56955: DOUBLE
56956: LD_INT 1
56958: DEC
56959: ST_TO_ADDR
56960: LD_EXP 50
56964: PUSH
56965: LD_VAR 0 5
56969: ARRAY
56970: PUSH
56971: FOR_TO
56972: IFFALSE 57013
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56974: LD_EXP 50
56978: PUSH
56979: LD_VAR 0 5
56983: ARRAY
56984: PUSH
56985: LD_VAR 0 4
56989: ARRAY
56990: PUSH
56991: LD_INT 1
56993: ARRAY
56994: PUSH
56995: LD_VAR 0 2
56999: EQUAL
57000: IFFALSE 57011
// KillUnit ( vehicle ) ;
57002: LD_VAR 0 2
57006: PPUSH
57007: CALL_OW 66
57011: GO 56971
57013: POP
57014: POP
// end ;
57015: LD_VAR 0 3
57019: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57020: LD_EXP 54
57024: NOT
57025: IFFALSE 57060
57027: GO 57029
57029: DISABLE
// begin initMiner := true ;
57030: LD_ADDR_EXP 54
57034: PUSH
57035: LD_INT 1
57037: ST_TO_ADDR
// minersList := [ ] ;
57038: LD_ADDR_EXP 55
57042: PUSH
57043: EMPTY
57044: ST_TO_ADDR
// minerMinesList := [ ] ;
57045: LD_ADDR_EXP 56
57049: PUSH
57050: EMPTY
57051: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57052: LD_ADDR_EXP 57
57056: PUSH
57057: LD_INT 5
57059: ST_TO_ADDR
// end ;
57060: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57061: LD_EXP 54
57065: IFFALSE 57083
57067: PUSH
57068: LD_INT 34
57070: PUSH
57071: LD_INT 81
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PPUSH
57078: CALL_OW 69
57082: AND
57083: IFFALSE 57546
57085: GO 57087
57087: DISABLE
57088: LD_INT 0
57090: PPUSH
57091: PPUSH
57092: PPUSH
57093: PPUSH
// begin enable ;
57094: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57095: LD_ADDR_VAR 0 1
57099: PUSH
57100: LD_INT 34
57102: PUSH
57103: LD_INT 81
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PPUSH
57110: CALL_OW 69
57114: PUSH
57115: FOR_IN
57116: IFFALSE 57188
// begin if not i in minersList then
57118: LD_VAR 0 1
57122: PUSH
57123: LD_EXP 55
57127: IN
57128: NOT
57129: IFFALSE 57186
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57131: LD_ADDR_EXP 55
57135: PUSH
57136: LD_EXP 55
57140: PPUSH
57141: LD_EXP 55
57145: PUSH
57146: LD_INT 1
57148: PLUS
57149: PPUSH
57150: LD_VAR 0 1
57154: PPUSH
57155: CALL_OW 1
57159: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57160: LD_ADDR_EXP 56
57164: PUSH
57165: LD_EXP 56
57169: PPUSH
57170: LD_EXP 56
57174: PUSH
57175: LD_INT 1
57177: PLUS
57178: PPUSH
57179: EMPTY
57180: PPUSH
57181: CALL_OW 1
57185: ST_TO_ADDR
// end end ;
57186: GO 57115
57188: POP
57189: POP
// for i := minerMinesList downto 1 do
57190: LD_ADDR_VAR 0 1
57194: PUSH
57195: DOUBLE
57196: LD_EXP 56
57200: INC
57201: ST_TO_ADDR
57202: LD_INT 1
57204: PUSH
57205: FOR_DOWNTO
57206: IFFALSE 57544
// begin if IsLive ( minersList [ i ] ) then
57208: LD_EXP 55
57212: PUSH
57213: LD_VAR 0 1
57217: ARRAY
57218: PPUSH
57219: CALL_OW 300
57223: IFFALSE 57251
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57225: LD_EXP 55
57229: PUSH
57230: LD_VAR 0 1
57234: ARRAY
57235: PPUSH
57236: LD_EXP 56
57240: PUSH
57241: LD_VAR 0 1
57245: ARRAY
57246: PPUSH
57247: CALL_OW 505
// if not minerMinesList [ i ] then
57251: LD_EXP 56
57255: PUSH
57256: LD_VAR 0 1
57260: ARRAY
57261: NOT
57262: IFFALSE 57266
// continue ;
57264: GO 57205
// for j := minerMinesList [ i ] downto 1 do
57266: LD_ADDR_VAR 0 2
57270: PUSH
57271: DOUBLE
57272: LD_EXP 56
57276: PUSH
57277: LD_VAR 0 1
57281: ARRAY
57282: INC
57283: ST_TO_ADDR
57284: LD_INT 1
57286: PUSH
57287: FOR_DOWNTO
57288: IFFALSE 57540
// begin side := GetSide ( minersList [ i ] ) ;
57290: LD_ADDR_VAR 0 3
57294: PUSH
57295: LD_EXP 55
57299: PUSH
57300: LD_VAR 0 1
57304: ARRAY
57305: PPUSH
57306: CALL_OW 255
57310: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57311: LD_ADDR_VAR 0 4
57315: PUSH
57316: LD_EXP 56
57320: PUSH
57321: LD_VAR 0 1
57325: ARRAY
57326: PUSH
57327: LD_VAR 0 2
57331: ARRAY
57332: PUSH
57333: LD_INT 1
57335: ARRAY
57336: PPUSH
57337: LD_EXP 56
57341: PUSH
57342: LD_VAR 0 1
57346: ARRAY
57347: PUSH
57348: LD_VAR 0 2
57352: ARRAY
57353: PUSH
57354: LD_INT 2
57356: ARRAY
57357: PPUSH
57358: CALL_OW 428
57362: ST_TO_ADDR
// if not tmp then
57363: LD_VAR 0 4
57367: NOT
57368: IFFALSE 57372
// continue ;
57370: GO 57287
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57372: LD_VAR 0 4
57376: PUSH
57377: LD_INT 81
57379: PUSH
57380: LD_VAR 0 3
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PPUSH
57389: CALL_OW 69
57393: IN
57394: IFFALSE 57444
57396: PUSH
57397: LD_EXP 56
57401: PUSH
57402: LD_VAR 0 1
57406: ARRAY
57407: PUSH
57408: LD_VAR 0 2
57412: ARRAY
57413: PUSH
57414: LD_INT 1
57416: ARRAY
57417: PPUSH
57418: LD_EXP 56
57422: PUSH
57423: LD_VAR 0 1
57427: ARRAY
57428: PUSH
57429: LD_VAR 0 2
57433: ARRAY
57434: PUSH
57435: LD_INT 2
57437: ARRAY
57438: PPUSH
57439: CALL_OW 458
57443: AND
57444: IFFALSE 57538
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57446: LD_EXP 56
57450: PUSH
57451: LD_VAR 0 1
57455: ARRAY
57456: PUSH
57457: LD_VAR 0 2
57461: ARRAY
57462: PUSH
57463: LD_INT 1
57465: ARRAY
57466: PPUSH
57467: LD_EXP 56
57471: PUSH
57472: LD_VAR 0 1
57476: ARRAY
57477: PUSH
57478: LD_VAR 0 2
57482: ARRAY
57483: PUSH
57484: LD_INT 2
57486: ARRAY
57487: PPUSH
57488: LD_VAR 0 3
57492: PPUSH
57493: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57497: LD_ADDR_EXP 56
57501: PUSH
57502: LD_EXP 56
57506: PPUSH
57507: LD_VAR 0 1
57511: PPUSH
57512: LD_EXP 56
57516: PUSH
57517: LD_VAR 0 1
57521: ARRAY
57522: PPUSH
57523: LD_VAR 0 2
57527: PPUSH
57528: CALL_OW 3
57532: PPUSH
57533: CALL_OW 1
57537: ST_TO_ADDR
// end ; end ;
57538: GO 57287
57540: POP
57541: POP
// end ;
57542: GO 57205
57544: POP
57545: POP
// end ;
57546: PPOPN 4
57548: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57549: LD_INT 0
57551: PPUSH
57552: PPUSH
// result := false ;
57553: LD_ADDR_VAR 0 4
57557: PUSH
57558: LD_INT 0
57560: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57561: LD_VAR 0 1
57565: PPUSH
57566: CALL_OW 264
57570: PUSH
57571: LD_INT 81
57573: EQUAL
57574: NOT
57575: IFFALSE 57579
// exit ;
57577: GO 57823
// index := GetElementIndex ( minersList , unit ) ;
57579: LD_ADDR_VAR 0 5
57583: PUSH
57584: LD_EXP 55
57588: PPUSH
57589: LD_VAR 0 1
57593: PPUSH
57594: CALL 14917 0 2
57598: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57599: LD_EXP 56
57603: PUSH
57604: LD_VAR 0 5
57608: ARRAY
57609: PUSH
57610: LD_EXP 57
57614: GREATEREQUAL
57615: IFFALSE 57619
// exit ;
57617: GO 57823
// ComMoveXY ( unit , x , y ) ;
57619: LD_VAR 0 1
57623: PPUSH
57624: LD_VAR 0 2
57628: PPUSH
57629: LD_VAR 0 3
57633: PPUSH
57634: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57638: LD_INT 35
57640: PPUSH
57641: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57645: LD_VAR 0 1
57649: PPUSH
57650: LD_VAR 0 2
57654: PPUSH
57655: LD_VAR 0 3
57659: PPUSH
57660: CALL 46963 0 3
57664: NOT
57665: IFFALSE 57678
57667: PUSH
57668: LD_VAR 0 1
57672: PPUSH
57673: CALL_OW 314
57677: AND
57678: IFFALSE 57682
// exit ;
57680: GO 57823
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57682: LD_VAR 0 2
57686: PPUSH
57687: LD_VAR 0 3
57691: PPUSH
57692: CALL_OW 428
57696: PUSH
57697: LD_VAR 0 1
57701: EQUAL
57702: IFFALSE 57716
57704: PUSH
57705: LD_VAR 0 1
57709: PPUSH
57710: CALL_OW 314
57714: NOT
57715: AND
57716: IFFALSE 57638
// PlaySoundXY ( x , y , PlantMine ) ;
57718: LD_VAR 0 2
57722: PPUSH
57723: LD_VAR 0 3
57727: PPUSH
57728: LD_STRING PlantMine
57730: PPUSH
57731: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57735: LD_VAR 0 2
57739: PPUSH
57740: LD_VAR 0 3
57744: PPUSH
57745: LD_VAR 0 1
57749: PPUSH
57750: CALL_OW 255
57754: PPUSH
57755: LD_INT 0
57757: PPUSH
57758: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57762: LD_ADDR_EXP 56
57766: PUSH
57767: LD_EXP 56
57771: PPUSH
57772: LD_VAR 0 5
57776: PUSH
57777: LD_EXP 56
57781: PUSH
57782: LD_VAR 0 5
57786: ARRAY
57787: PUSH
57788: LD_INT 1
57790: PLUS
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PPUSH
57796: LD_VAR 0 2
57800: PUSH
57801: LD_VAR 0 3
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PPUSH
57810: CALL 15134 0 3
57814: ST_TO_ADDR
// result := true ;
57815: LD_ADDR_VAR 0 4
57819: PUSH
57820: LD_INT 1
57822: ST_TO_ADDR
// end ;
57823: LD_VAR 0 4
57827: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57828: LD_INT 0
57830: PPUSH
57831: PPUSH
57832: PPUSH
// if not unit in minersList then
57833: LD_VAR 0 1
57837: PUSH
57838: LD_EXP 55
57842: IN
57843: NOT
57844: IFFALSE 57848
// exit ;
57846: GO 58242
// index := GetElementIndex ( minersList , unit ) ;
57848: LD_ADDR_VAR 0 6
57852: PUSH
57853: LD_EXP 55
57857: PPUSH
57858: LD_VAR 0 1
57862: PPUSH
57863: CALL 14917 0 2
57867: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57868: LD_ADDR_VAR 0 5
57872: PUSH
57873: DOUBLE
57874: LD_EXP 56
57878: PUSH
57879: LD_VAR 0 6
57883: ARRAY
57884: INC
57885: ST_TO_ADDR
57886: LD_INT 1
57888: PUSH
57889: FOR_DOWNTO
57890: IFFALSE 58053
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57892: LD_EXP 56
57896: PUSH
57897: LD_VAR 0 6
57901: ARRAY
57902: PUSH
57903: LD_VAR 0 5
57907: ARRAY
57908: PUSH
57909: LD_INT 1
57911: ARRAY
57912: PUSH
57913: LD_VAR 0 2
57917: EQUAL
57918: IFFALSE 57948
57920: PUSH
57921: LD_EXP 56
57925: PUSH
57926: LD_VAR 0 6
57930: ARRAY
57931: PUSH
57932: LD_VAR 0 5
57936: ARRAY
57937: PUSH
57938: LD_INT 2
57940: ARRAY
57941: PUSH
57942: LD_VAR 0 3
57946: EQUAL
57947: AND
57948: IFFALSE 58051
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57950: LD_EXP 56
57954: PUSH
57955: LD_VAR 0 6
57959: ARRAY
57960: PUSH
57961: LD_VAR 0 5
57965: ARRAY
57966: PUSH
57967: LD_INT 1
57969: ARRAY
57970: PPUSH
57971: LD_EXP 56
57975: PUSH
57976: LD_VAR 0 6
57980: ARRAY
57981: PUSH
57982: LD_VAR 0 5
57986: ARRAY
57987: PUSH
57988: LD_INT 2
57990: ARRAY
57991: PPUSH
57992: LD_VAR 0 1
57996: PPUSH
57997: CALL_OW 255
58001: PPUSH
58002: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58006: LD_ADDR_EXP 56
58010: PUSH
58011: LD_EXP 56
58015: PPUSH
58016: LD_VAR 0 6
58020: PPUSH
58021: LD_EXP 56
58025: PUSH
58026: LD_VAR 0 6
58030: ARRAY
58031: PPUSH
58032: LD_VAR 0 5
58036: PPUSH
58037: CALL_OW 3
58041: PPUSH
58042: CALL_OW 1
58046: ST_TO_ADDR
// exit ;
58047: POP
58048: POP
58049: GO 58242
// end ; end ;
58051: GO 57889
58053: POP
58054: POP
// for i := minerMinesList [ index ] downto 1 do
58055: LD_ADDR_VAR 0 5
58059: PUSH
58060: DOUBLE
58061: LD_EXP 56
58065: PUSH
58066: LD_VAR 0 6
58070: ARRAY
58071: INC
58072: ST_TO_ADDR
58073: LD_INT 1
58075: PUSH
58076: FOR_DOWNTO
58077: IFFALSE 58240
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58079: LD_EXP 56
58083: PUSH
58084: LD_VAR 0 6
58088: ARRAY
58089: PUSH
58090: LD_VAR 0 5
58094: ARRAY
58095: PUSH
58096: LD_INT 1
58098: ARRAY
58099: PPUSH
58100: LD_EXP 56
58104: PUSH
58105: LD_VAR 0 6
58109: ARRAY
58110: PUSH
58111: LD_VAR 0 5
58115: ARRAY
58116: PUSH
58117: LD_INT 2
58119: ARRAY
58120: PPUSH
58121: LD_VAR 0 2
58125: PPUSH
58126: LD_VAR 0 3
58130: PPUSH
58131: CALL_OW 298
58135: PUSH
58136: LD_INT 6
58138: LESS
58139: IFFALSE 58238
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58141: LD_EXP 56
58145: PUSH
58146: LD_VAR 0 6
58150: ARRAY
58151: PUSH
58152: LD_VAR 0 5
58156: ARRAY
58157: PUSH
58158: LD_INT 1
58160: ARRAY
58161: PPUSH
58162: LD_EXP 56
58166: PUSH
58167: LD_VAR 0 6
58171: ARRAY
58172: PUSH
58173: LD_VAR 0 5
58177: ARRAY
58178: PUSH
58179: LD_INT 2
58181: ARRAY
58182: PPUSH
58183: LD_VAR 0 1
58187: PPUSH
58188: CALL_OW 255
58192: PPUSH
58193: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58197: LD_ADDR_EXP 56
58201: PUSH
58202: LD_EXP 56
58206: PPUSH
58207: LD_VAR 0 6
58211: PPUSH
58212: LD_EXP 56
58216: PUSH
58217: LD_VAR 0 6
58221: ARRAY
58222: PPUSH
58223: LD_VAR 0 5
58227: PPUSH
58228: CALL_OW 3
58232: PPUSH
58233: CALL_OW 1
58237: ST_TO_ADDR
// end ; end ;
58238: GO 58076
58240: POP
58241: POP
// end ;
58242: LD_VAR 0 4
58246: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58247: LD_INT 0
58249: PPUSH
58250: PPUSH
58251: PPUSH
58252: PPUSH
58253: PPUSH
58254: PPUSH
58255: PPUSH
58256: PPUSH
58257: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58258: LD_VAR 0 1
58262: PPUSH
58263: CALL_OW 264
58267: PUSH
58268: LD_INT 81
58270: EQUAL
58271: NOT
58272: IFTRUE 58287
58274: PUSH
58275: LD_VAR 0 1
58279: PUSH
58280: LD_EXP 55
58284: IN
58285: NOT
58286: OR
58287: IFFALSE 58291
// exit ;
58289: GO 58617
// index := GetElementIndex ( minersList , unit ) ;
58291: LD_ADDR_VAR 0 6
58295: PUSH
58296: LD_EXP 55
58300: PPUSH
58301: LD_VAR 0 1
58305: PPUSH
58306: CALL 14917 0 2
58310: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58311: LD_ADDR_VAR 0 8
58315: PUSH
58316: LD_EXP 57
58320: PUSH
58321: LD_EXP 56
58325: PUSH
58326: LD_VAR 0 6
58330: ARRAY
58331: MINUS
58332: ST_TO_ADDR
// if not minesFreeAmount then
58333: LD_VAR 0 8
58337: NOT
58338: IFFALSE 58342
// exit ;
58340: GO 58617
// tmp := [ ] ;
58342: LD_ADDR_VAR 0 7
58346: PUSH
58347: EMPTY
58348: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58349: LD_ADDR_VAR 0 5
58353: PUSH
58354: DOUBLE
58355: LD_INT 1
58357: DEC
58358: ST_TO_ADDR
58359: LD_VAR 0 8
58363: PUSH
58364: FOR_TO
58365: IFFALSE 58564
// begin _d := rand ( 0 , 5 ) ;
58367: LD_ADDR_VAR 0 11
58371: PUSH
58372: LD_INT 0
58374: PPUSH
58375: LD_INT 5
58377: PPUSH
58378: CALL_OW 12
58382: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58383: LD_ADDR_VAR 0 12
58387: PUSH
58388: LD_INT 2
58390: PPUSH
58391: LD_INT 6
58393: PPUSH
58394: CALL_OW 12
58398: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58399: LD_ADDR_VAR 0 9
58403: PUSH
58404: LD_VAR 0 2
58408: PPUSH
58409: LD_VAR 0 11
58413: PPUSH
58414: LD_VAR 0 12
58418: PPUSH
58419: CALL_OW 272
58423: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58424: LD_ADDR_VAR 0 10
58428: PUSH
58429: LD_VAR 0 3
58433: PPUSH
58434: LD_VAR 0 11
58438: PPUSH
58439: LD_VAR 0 12
58443: PPUSH
58444: CALL_OW 273
58448: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58449: LD_VAR 0 9
58453: PPUSH
58454: LD_VAR 0 10
58458: PPUSH
58459: CALL_OW 488
58463: IFFALSE 58487
58465: PUSH
58466: LD_VAR 0 9
58470: PUSH
58471: LD_VAR 0 10
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_VAR 0 7
58484: IN
58485: NOT
58486: AND
58487: IFFALSE 58506
58489: PUSH
58490: LD_VAR 0 9
58494: PPUSH
58495: LD_VAR 0 10
58499: PPUSH
58500: CALL_OW 458
58504: NOT
58505: AND
58506: IFFALSE 58548
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58508: LD_ADDR_VAR 0 7
58512: PUSH
58513: LD_VAR 0 7
58517: PPUSH
58518: LD_VAR 0 7
58522: PUSH
58523: LD_INT 1
58525: PLUS
58526: PPUSH
58527: LD_VAR 0 9
58531: PUSH
58532: LD_VAR 0 10
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PPUSH
58541: CALL_OW 1
58545: ST_TO_ADDR
58546: GO 58562
// i := i - 1 ;
58548: LD_ADDR_VAR 0 5
58552: PUSH
58553: LD_VAR 0 5
58557: PUSH
58558: LD_INT 1
58560: MINUS
58561: ST_TO_ADDR
// end ;
58562: GO 58364
58564: POP
58565: POP
// for i in tmp do
58566: LD_ADDR_VAR 0 5
58570: PUSH
58571: LD_VAR 0 7
58575: PUSH
58576: FOR_IN
58577: IFFALSE 58615
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58579: LD_VAR 0 1
58583: PPUSH
58584: LD_VAR 0 5
58588: PUSH
58589: LD_INT 1
58591: ARRAY
58592: PPUSH
58593: LD_VAR 0 5
58597: PUSH
58598: LD_INT 2
58600: ARRAY
58601: PPUSH
58602: CALL 57549 0 3
58606: NOT
58607: IFFALSE 58613
// exit ;
58609: POP
58610: POP
58611: GO 58617
58613: GO 58576
58615: POP
58616: POP
// end ;
58617: LD_VAR 0 4
58621: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58622: LD_INT 0
58624: PPUSH
58625: PPUSH
58626: PPUSH
58627: PPUSH
58628: PPUSH
58629: PPUSH
58630: PPUSH
58631: PPUSH
58632: PPUSH
// if GetClass ( unit ) <> class_sniper then
58633: LD_VAR 0 1
58637: PPUSH
58638: CALL_OW 257
58642: PUSH
58643: LD_INT 5
58645: NONEQUAL
58646: IFFALSE 58650
// exit ;
58648: GO 59120
// dist := 8 ;
58650: LD_ADDR_VAR 0 5
58654: PUSH
58655: LD_INT 8
58657: ST_TO_ADDR
// viewRange := 12 ;
58658: LD_ADDR_VAR 0 8
58662: PUSH
58663: LD_INT 12
58665: ST_TO_ADDR
// side := GetSide ( unit ) ;
58666: LD_ADDR_VAR 0 6
58670: PUSH
58671: LD_VAR 0 1
58675: PPUSH
58676: CALL_OW 255
58680: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58681: LD_INT 61
58683: PPUSH
58684: LD_VAR 0 6
58688: PPUSH
58689: CALL_OW 321
58693: PUSH
58694: LD_INT 2
58696: EQUAL
58697: IFFALSE 58707
// viewRange := 16 ;
58699: LD_ADDR_VAR 0 8
58703: PUSH
58704: LD_INT 16
58706: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58707: LD_VAR 0 1
58711: PPUSH
58712: LD_VAR 0 2
58716: PPUSH
58717: LD_VAR 0 3
58721: PPUSH
58722: CALL_OW 297
58726: PUSH
58727: LD_VAR 0 5
58731: GREATER
58732: IFFALSE 58811
// begin ComMoveXY ( unit , x , y ) ;
58734: LD_VAR 0 1
58738: PPUSH
58739: LD_VAR 0 2
58743: PPUSH
58744: LD_VAR 0 3
58748: PPUSH
58749: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58753: LD_INT 35
58755: PPUSH
58756: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58760: LD_VAR 0 1
58764: PPUSH
58765: LD_VAR 0 2
58769: PPUSH
58770: LD_VAR 0 3
58774: PPUSH
58775: CALL 46963 0 3
58779: NOT
58780: IFFALSE 58784
// exit ;
58782: GO 59120
// until GetDistUnitXY ( unit , x , y ) < dist ;
58784: LD_VAR 0 1
58788: PPUSH
58789: LD_VAR 0 2
58793: PPUSH
58794: LD_VAR 0 3
58798: PPUSH
58799: CALL_OW 297
58803: PUSH
58804: LD_VAR 0 5
58808: LESS
58809: IFFALSE 58753
// end ; ComTurnXY ( unit , x , y ) ;
58811: LD_VAR 0 1
58815: PPUSH
58816: LD_VAR 0 2
58820: PPUSH
58821: LD_VAR 0 3
58825: PPUSH
58826: CALL_OW 118
// repeat if Multiplayer then
58830: LD_OWVAR 4
58834: IFFALSE 58845
// wait ( 35 ) else
58836: LD_INT 35
58838: PPUSH
58839: CALL_OW 67
58843: GO 58852
// wait ( 5 ) ;
58845: LD_INT 5
58847: PPUSH
58848: CALL_OW 67
// _d := GetDir ( unit ) ;
58852: LD_ADDR_VAR 0 11
58856: PUSH
58857: LD_VAR 0 1
58861: PPUSH
58862: CALL_OW 254
58866: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58867: LD_ADDR_VAR 0 7
58871: PUSH
58872: LD_VAR 0 1
58876: PPUSH
58877: CALL_OW 250
58881: PPUSH
58882: LD_VAR 0 1
58886: PPUSH
58887: CALL_OW 251
58891: PPUSH
58892: LD_VAR 0 2
58896: PPUSH
58897: LD_VAR 0 3
58901: PPUSH
58902: CALL 49599 0 4
58906: ST_TO_ADDR
// until dir = _d ;
58907: LD_VAR 0 7
58911: PUSH
58912: LD_VAR 0 11
58916: EQUAL
58917: IFFALSE 58830
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58919: LD_ADDR_VAR 0 9
58923: PUSH
58924: LD_VAR 0 1
58928: PPUSH
58929: CALL_OW 250
58933: PPUSH
58934: LD_VAR 0 7
58938: PPUSH
58939: LD_VAR 0 5
58943: PPUSH
58944: CALL_OW 272
58948: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58949: LD_ADDR_VAR 0 10
58953: PUSH
58954: LD_VAR 0 1
58958: PPUSH
58959: CALL_OW 251
58963: PPUSH
58964: LD_VAR 0 7
58968: PPUSH
58969: LD_VAR 0 5
58973: PPUSH
58974: CALL_OW 273
58978: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58979: LD_VAR 0 9
58983: PPUSH
58984: LD_VAR 0 10
58988: PPUSH
58989: CALL_OW 488
58993: NOT
58994: IFFALSE 58998
// exit ;
58996: GO 59120
// ComAnimCustom ( unit , 1 ) ;
58998: LD_VAR 0 1
59002: PPUSH
59003: LD_INT 1
59005: PPUSH
59006: CALL_OW 592
// p := 0 ;
59010: LD_ADDR_VAR 0 12
59014: PUSH
59015: LD_INT 0
59017: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59018: LD_VAR 0 9
59022: PPUSH
59023: LD_VAR 0 10
59027: PPUSH
59028: LD_VAR 0 6
59032: PPUSH
59033: LD_VAR 0 8
59037: PPUSH
59038: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59042: LD_INT 35
59044: PPUSH
59045: CALL_OW 67
// p := Inc ( p ) ;
59049: LD_ADDR_VAR 0 12
59053: PUSH
59054: LD_VAR 0 12
59058: PPUSH
59059: CALL 49555 0 1
59063: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59064: LD_VAR 0 12
59068: PUSH
59069: LD_INT 3
59071: EQUAL
59072: IFTRUE 59086
59074: PUSH
59075: LD_VAR 0 1
59079: PPUSH
59080: CALL_OW 302
59084: NOT
59085: OR
59086: IFTRUE 59099
59088: PUSH
59089: LD_VAR 0 1
59093: PPUSH
59094: CALL_OW 301
59098: OR
59099: IFFALSE 59042
// RemoveSeeing ( _x , _y , side ) ;
59101: LD_VAR 0 9
59105: PPUSH
59106: LD_VAR 0 10
59110: PPUSH
59111: LD_VAR 0 6
59115: PPUSH
59116: CALL_OW 331
// end ; end_of_file
59120: LD_VAR 0 4
59124: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
59125: LD_EXP 39
59129: IFFALSE 59470
59131: GO 59133
59133: DISABLE
59134: LD_INT 0
59136: PPUSH
59137: PPUSH
59138: PPUSH
// begin mpKingPoints := [ ] ;
59139: LD_ADDR_EXP 58
59143: PUSH
59144: EMPTY
59145: ST_TO_ADDR
// if mpTeamGame then
59146: LD_EXP 11
59150: IFFALSE 59204
// begin for i := 1 to Count ( mpTeams ) do
59152: LD_ADDR_VAR 0 1
59156: PUSH
59157: DOUBLE
59158: LD_INT 1
59160: DEC
59161: ST_TO_ADDR
59162: LD_EXP 10
59166: PPUSH
59167: CALL 12250 0 1
59171: PUSH
59172: FOR_TO
59173: IFFALSE 59200
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59175: LD_ADDR_EXP 58
59179: PUSH
59180: LD_EXP 58
59184: PPUSH
59185: LD_VAR 0 1
59189: PPUSH
59190: LD_INT 0
59192: PPUSH
59193: CALL_OW 1
59197: ST_TO_ADDR
59198: GO 59172
59200: POP
59201: POP
// end else
59202: GO 59247
// begin for i := 1 to 8 do
59204: LD_ADDR_VAR 0 1
59208: PUSH
59209: DOUBLE
59210: LD_INT 1
59212: DEC
59213: ST_TO_ADDR
59214: LD_INT 8
59216: PUSH
59217: FOR_TO
59218: IFFALSE 59245
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59220: LD_ADDR_EXP 58
59224: PUSH
59225: LD_EXP 58
59229: PPUSH
59230: LD_VAR 0 1
59234: PPUSH
59235: LD_INT 0
59237: PPUSH
59238: CALL_OW 1
59242: ST_TO_ADDR
59243: GO 59217
59245: POP
59246: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
59247: LD_ADDR_VAR 0 3
59251: PUSH
59252: LD_EXP 2
59256: PPUSH
59257: LD_INT 0
59259: PPUSH
59260: CALL_OW 517
59264: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59265: LD_ADDR_VAR 0 1
59269: PUSH
59270: DOUBLE
59271: LD_INT 1
59273: DEC
59274: ST_TO_ADDR
59275: LD_VAR 0 3
59279: PUSH
59280: LD_INT 1
59282: ARRAY
59283: PUSH
59284: FOR_TO
59285: IFFALSE 59352
// for j := 1 to 8 do
59287: LD_ADDR_VAR 0 2
59291: PUSH
59292: DOUBLE
59293: LD_INT 1
59295: DEC
59296: ST_TO_ADDR
59297: LD_INT 8
59299: PUSH
59300: FOR_TO
59301: IFFALSE 59348
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
59303: LD_VAR 0 3
59307: PUSH
59308: LD_INT 1
59310: ARRAY
59311: PUSH
59312: LD_VAR 0 1
59316: ARRAY
59317: PPUSH
59318: LD_VAR 0 3
59322: PUSH
59323: LD_INT 2
59325: ARRAY
59326: PUSH
59327: LD_VAR 0 1
59331: ARRAY
59332: PPUSH
59333: LD_VAR 0 2
59337: PPUSH
59338: LD_INT 12
59340: NEG
59341: PPUSH
59342: CALL_OW 330
59346: GO 59300
59348: POP
59349: POP
59350: GO 59284
59352: POP
59353: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
59354: LD_EXP 34
59358: PPUSH
59359: LD_INT 1
59361: PPUSH
59362: CALL_OW 424
// UpdateCounter ;
59366: CALL 59976 0 0
// repeat wait ( 0 0$1 ) ;
59370: LD_INT 35
59372: PPUSH
59373: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59377: LD_ADDR_VAR 0 3
59381: PUSH
59382: LD_EXP 34
59386: PPUSH
59387: LD_INT 3
59389: PUSH
59390: LD_INT 57
59392: PUSH
59393: EMPTY
59394: LIST
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 50
59402: PUSH
59403: EMPTY
59404: LIST
59405: PUSH
59406: LD_INT 2
59408: PUSH
59409: LD_INT 30
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 30
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: LIST
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: LIST
59438: PPUSH
59439: CALL_OW 70
59443: ST_TO_ADDR
// if not tmp then
59444: LD_VAR 0 3
59448: NOT
59449: IFFALSE 59453
// continue ;
59451: GO 59370
// AddPoints ( tmp ) ;
59453: LD_VAR 0 3
59457: PPUSH
59458: CALL 59654 0 1
// UpdateCounter ;
59462: CALL 59976 0 0
// until false ;
59466: LD_INT 0
59468: IFFALSE 59370
// end ;
59470: PPOPN 3
59472: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
59473: LD_EXP 39
59477: IFFALSE 59485
59479: PUSH
59480: LD_EXP 37
59484: AND
59485: IFFALSE 59651
59487: GO 59489
59489: DISABLE
59490: LD_INT 0
59492: PPUSH
59493: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
59494: LD_ADDR_VAR 0 2
59498: PUSH
59499: LD_EXP 2
59503: PPUSH
59504: LD_INT 0
59506: PPUSH
59507: CALL_OW 517
59511: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59512: LD_ADDR_VAR 0 1
59516: PUSH
59517: DOUBLE
59518: LD_INT 1
59520: DEC
59521: ST_TO_ADDR
59522: LD_VAR 0 2
59526: PUSH
59527: LD_INT 1
59529: ARRAY
59530: PUSH
59531: FOR_TO
59532: IFFALSE 59573
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
59534: LD_VAR 0 2
59538: PUSH
59539: LD_INT 1
59541: ARRAY
59542: PUSH
59543: LD_VAR 0 1
59547: ARRAY
59548: PPUSH
59549: LD_VAR 0 2
59553: PUSH
59554: LD_INT 2
59556: ARRAY
59557: PUSH
59558: LD_VAR 0 1
59562: ARRAY
59563: PPUSH
59564: LD_INT 125
59566: PPUSH
59567: CALL_OW 495
59571: GO 59531
59573: POP
59574: POP
// repeat wait ( mpEmissions ) ;
59575: LD_EXP 37
59579: PPUSH
59580: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
59584: LD_ADDR_VAR 0 1
59588: PUSH
59589: DOUBLE
59590: LD_INT 1
59592: DEC
59593: ST_TO_ADDR
59594: LD_VAR 0 2
59598: PUSH
59599: LD_INT 1
59601: ARRAY
59602: PUSH
59603: FOR_TO
59604: IFFALSE 59645
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
59606: LD_VAR 0 2
59610: PUSH
59611: LD_INT 1
59613: ARRAY
59614: PUSH
59615: LD_VAR 0 1
59619: ARRAY
59620: PPUSH
59621: LD_VAR 0 2
59625: PUSH
59626: LD_INT 2
59628: ARRAY
59629: PUSH
59630: LD_VAR 0 1
59634: ARRAY
59635: PPUSH
59636: LD_INT 15
59638: PPUSH
59639: CALL_OW 495
59643: GO 59603
59645: POP
59646: POP
// until false ;
59647: LD_INT 0
59649: IFFALSE 59575
// end ;
59651: PPOPN 2
59653: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
59654: LD_INT 0
59656: PPUSH
59657: PPUSH
59658: PPUSH
59659: PPUSH
59660: PPUSH
// if mpTeamGame then
59661: LD_EXP 11
59665: IFFALSE 59862
// begin first := depots [ 1 ] ;
59667: LD_ADDR_VAR 0 4
59671: PUSH
59672: LD_VAR 0 1
59676: PUSH
59677: LD_INT 1
59679: ARRAY
59680: ST_TO_ADDR
// side := GetSide ( first ) ;
59681: LD_ADDR_VAR 0 6
59685: PUSH
59686: LD_VAR 0 4
59690: PPUSH
59691: CALL_OW 255
59695: ST_TO_ADDR
// for i := 1 to mpTeams do
59696: LD_ADDR_VAR 0 3
59700: PUSH
59701: DOUBLE
59702: LD_INT 1
59704: DEC
59705: ST_TO_ADDR
59706: LD_EXP 10
59710: PUSH
59711: FOR_TO
59712: IFFALSE 59746
// if side in mpTeams [ i ] then
59714: LD_VAR 0 6
59718: PUSH
59719: LD_EXP 10
59723: PUSH
59724: LD_VAR 0 3
59728: ARRAY
59729: IN
59730: IFFALSE 59744
// begin team := i ;
59732: LD_ADDR_VAR 0 5
59736: PUSH
59737: LD_VAR 0 3
59741: ST_TO_ADDR
// break ;
59742: GO 59746
// end ;
59744: GO 59711
59746: POP
59747: POP
// if not team then
59748: LD_VAR 0 5
59752: NOT
59753: IFFALSE 59757
// exit ;
59755: GO 59971
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59757: LD_EXP 34
59761: PPUSH
59762: LD_INT 81
59764: PUSH
59765: LD_VAR 0 6
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PPUSH
59774: CALL_OW 70
59778: IFFALSE 59782
// exit ;
59780: GO 59971
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59782: LD_ADDR_EXP 58
59786: PUSH
59787: LD_EXP 58
59791: PPUSH
59792: LD_VAR 0 5
59796: PPUSH
59797: LD_EXP 58
59801: PUSH
59802: LD_VAR 0 5
59806: ARRAY
59807: PUSH
59808: LD_INT 1
59810: PLUS
59811: PPUSH
59812: CALL_OW 1
59816: ST_TO_ADDR
// for i in mpTeams [ team ] do
59817: LD_ADDR_VAR 0 3
59821: PUSH
59822: LD_EXP 10
59826: PUSH
59827: LD_VAR 0 5
59831: ARRAY
59832: PUSH
59833: FOR_IN
59834: IFFALSE 59858
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59836: LD_VAR 0 3
59840: PPUSH
59841: LD_EXP 58
59845: PUSH
59846: LD_VAR 0 5
59850: ARRAY
59851: PPUSH
59852: CALL_OW 506
59856: GO 59833
59858: POP
59859: POP
// end else
59860: GO 59971
// begin first := depots [ 1 ] ;
59862: LD_ADDR_VAR 0 4
59866: PUSH
59867: LD_VAR 0 1
59871: PUSH
59872: LD_INT 1
59874: ARRAY
59875: ST_TO_ADDR
// side := GetSide ( first ) ;
59876: LD_ADDR_VAR 0 6
59880: PUSH
59881: LD_VAR 0 4
59885: PPUSH
59886: CALL_OW 255
59890: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59891: LD_EXP 34
59895: PPUSH
59896: LD_INT 81
59898: PUSH
59899: LD_VAR 0 6
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PPUSH
59908: CALL_OW 70
59912: IFFALSE 59916
// exit ;
59914: GO 59971
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59916: LD_ADDR_EXP 58
59920: PUSH
59921: LD_EXP 58
59925: PPUSH
59926: LD_VAR 0 6
59930: PPUSH
59931: LD_EXP 58
59935: PUSH
59936: LD_VAR 0 6
59940: ARRAY
59941: PUSH
59942: LD_INT 1
59944: PLUS
59945: PPUSH
59946: CALL_OW 1
59950: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59951: LD_VAR 0 6
59955: PPUSH
59956: LD_EXP 58
59960: PUSH
59961: LD_VAR 0 6
59965: ARRAY
59966: PPUSH
59967: CALL_OW 506
// end ; end ;
59971: LD_VAR 0 2
59975: RET
// function UpdateCounter ; var i ; begin
59976: LD_INT 0
59978: PPUSH
59979: PPUSH
// result := [ ] ;
59980: LD_ADDR_VAR 0 1
59984: PUSH
59985: EMPTY
59986: ST_TO_ADDR
// if mpTeamGame then
59987: LD_EXP 11
59991: IFFALSE 60058
// begin for i := 1 to mpTeams do
59993: LD_ADDR_VAR 0 2
59997: PUSH
59998: DOUBLE
59999: LD_INT 1
60001: DEC
60002: ST_TO_ADDR
60003: LD_EXP 10
60007: PUSH
60008: FOR_TO
60009: IFFALSE 60054
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
60011: LD_ADDR_VAR 0 1
60015: PUSH
60016: LD_VAR 0 1
60020: PUSH
60021: LD_STRING #KingoftheHill-Team
60023: PUSH
60024: LD_VAR 0 2
60028: PUSH
60029: LD_EXP 58
60033: PUSH
60034: LD_VAR 0 2
60038: ARRAY
60039: PUSH
60040: LD_EXP 35
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: ADD
60051: ST_TO_ADDR
60052: GO 60008
60054: POP
60055: POP
// end else
60056: GO 60131
// begin for i := 1 to 8 do
60058: LD_ADDR_VAR 0 2
60062: PUSH
60063: DOUBLE
60064: LD_INT 1
60066: DEC
60067: ST_TO_ADDR
60068: LD_INT 8
60070: PUSH
60071: FOR_TO
60072: IFFALSE 60129
// if mpSidePositions [ i ] then
60074: LD_EXP 7
60078: PUSH
60079: LD_VAR 0 2
60083: ARRAY
60084: IFFALSE 60127
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
60086: LD_ADDR_VAR 0 1
60090: PUSH
60091: LD_VAR 0 1
60095: PUSH
60096: LD_STRING #KingoftheHill-Player
60098: PUSH
60099: LD_VAR 0 2
60103: PUSH
60104: LD_EXP 58
60108: PUSH
60109: LD_VAR 0 2
60113: ARRAY
60114: PUSH
60115: LD_EXP 35
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: ADD
60126: ST_TO_ADDR
60127: GO 60071
60129: POP
60130: POP
// end ; mpDisplayStrings := result ;
60131: LD_ADDR_EXP 38
60135: PUSH
60136: LD_VAR 0 1
60140: ST_TO_ADDR
// end ;
60141: LD_VAR 0 1
60145: RET
// export function HowMuchPointsKing ( side ) ; begin
60146: LD_INT 0
60148: PPUSH
// result := HowMuchPoints ( side ) ;
60149: LD_ADDR_VAR 0 2
60153: PUSH
60154: LD_VAR 0 1
60158: PPUSH
60159: CALL 60169 0 1
60163: ST_TO_ADDR
// end ;
60164: LD_VAR 0 2
60168: RET
// function HowMuchPoints ( side ) ; var i ; begin
60169: LD_INT 0
60171: PPUSH
60172: PPUSH
// if mpTeamGame then
60173: LD_EXP 11
60177: IFFALSE 60246
// begin for i := 1 to Count ( mpTeams ) do
60179: LD_ADDR_VAR 0 3
60183: PUSH
60184: DOUBLE
60185: LD_INT 1
60187: DEC
60188: ST_TO_ADDR
60189: LD_EXP 10
60193: PPUSH
60194: CALL 12250 0 1
60198: PUSH
60199: FOR_TO
60200: IFFALSE 60242
// begin if side in mpTeams [ i ] then
60202: LD_VAR 0 1
60206: PUSH
60207: LD_EXP 10
60211: PUSH
60212: LD_VAR 0 3
60216: ARRAY
60217: IN
60218: IFFALSE 60240
// begin result := mpKingPoints [ i ] ;
60220: LD_ADDR_VAR 0 2
60224: PUSH
60225: LD_EXP 58
60229: PUSH
60230: LD_VAR 0 3
60234: ARRAY
60235: ST_TO_ADDR
// exit ;
60236: POP
60237: POP
60238: GO 60262
// end ; end ;
60240: GO 60199
60242: POP
60243: POP
// end else
60244: GO 60262
// result := mpKingPoints [ side ] ;
60246: LD_ADDR_VAR 0 2
60250: PUSH
60251: LD_EXP 58
60255: PUSH
60256: LD_VAR 0 1
60260: ARRAY
60261: ST_TO_ADDR
// end ;
60262: LD_VAR 0 2
60266: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
60267: LD_EXP 39
60271: IFFALSE 60279
60273: PUSH
60274: CALL 60691 0 0
60278: AND
60279: IFFALSE 60287
60281: PUSH
60282: LD_OWVAR 4
60286: AND
60287: IFFALSE 60540
60289: GO 60291
60291: DISABLE
60292: LD_INT 0
60294: PPUSH
60295: PPUSH
// begin canWin := false ;
60296: LD_ADDR_VAR 0 2
60300: PUSH
60301: LD_INT 0
60303: ST_TO_ADDR
// if not HasPower ( your_side ) then
60304: LD_OWVAR 2
60308: PPUSH
60309: CALL 60733 0 1
60313: NOT
60314: IFFALSE 60325
// begin Multiplayer_Loose_Message ;
60316: CALL_OW 521
// enable ( mpLose ) ;
60320: LD_INT 102
60322: ENABLE_MARKED
// end else
60323: GO 60540
// begin if not EnemiesInGame then
60325: CALL 60543 0 0
60329: NOT
60330: IFFALSE 60337
// begin enable ( mpWin ) ;
60332: LD_INT 101
60334: ENABLE_MARKED
// exit ;
60335: GO 60540
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
60337: LD_ADDR_VAR 0 2
60341: PUSH
60342: LD_OWVAR 2
60346: PPUSH
60347: CALL 60169 0 1
60351: PUSH
60352: LD_EXP 35
60356: GREATEREQUAL
60357: IFFALSE 60370
60359: PUSH
60360: LD_OWVAR 2
60364: PPUSH
60365: CALL 60733 0 1
60369: AND
60370: ST_TO_ADDR
// for i := 1 to 8 do
60371: LD_ADDR_VAR 0 1
60375: PUSH
60376: DOUBLE
60377: LD_INT 1
60379: DEC
60380: ST_TO_ADDR
60381: LD_INT 8
60383: PUSH
60384: FOR_TO
60385: IFFALSE 60526
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
60387: LD_EXP 7
60391: PUSH
60392: LD_VAR 0 1
60396: ARRAY
60397: IFFALSE 60410
60399: PUSH
60400: LD_VAR 0 1
60404: PPUSH
60405: CALL_OW 108
60409: AND
60410: IFFALSE 60424
60412: PUSH
60413: LD_VAR 0 1
60417: PUSH
60418: LD_OWVAR 2
60422: NONEQUAL
60423: AND
60424: IFFALSE 60524
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60426: LD_EXP 8
60430: PUSH
60431: LD_VAR 0 1
60435: ARRAY
60436: NOT
60437: IFTRUE 60485
60439: PUSH
60440: LD_EXP 8
60444: PUSH
60445: LD_VAR 0 1
60449: ARRAY
60450: PUSH
60451: LD_EXP 8
60455: PUSH
60456: LD_OWVAR 2
60460: ARRAY
60461: NONEQUAL
60462: IFFALSE 60484
60464: PUSH
60465: LD_OWVAR 2
60469: PPUSH
60470: LD_VAR 0 1
60474: PPUSH
60475: CALL_OW 81
60479: PUSH
60480: LD_INT 1
60482: NONEQUAL
60483: AND
60484: OR
60485: IFFALSE 60524
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
60487: LD_VAR 0 1
60491: PPUSH
60492: CALL 60169 0 1
60496: PUSH
60497: LD_EXP 35
60501: GREATEREQUAL
60502: IFFALSE 60515
60504: PUSH
60505: LD_VAR 0 1
60509: PPUSH
60510: CALL 60733 0 1
60514: AND
60515: IFFALSE 60524
// begin enable ( mpLose ) ;
60517: LD_INT 102
60519: ENABLE_MARKED
// exit ;
60520: POP
60521: POP
60522: GO 60540
// end ;
60524: GO 60384
60526: POP
60527: POP
// if canWin then
60528: LD_VAR 0 2
60532: IFFALSE 60539
// enable ( mpWin ) else
60534: LD_INT 101
60536: ENABLE_MARKED
60537: GO 60540
// enable ;
60539: ENABLE
// end ; end ;
60540: PPOPN 2
60542: END
// function EnemiesInGame ; var i ; begin
60543: LD_INT 0
60545: PPUSH
60546: PPUSH
// result := false ;
60547: LD_ADDR_VAR 0 1
60551: PUSH
60552: LD_INT 0
60554: ST_TO_ADDR
// for i := 1 to 8 do
60555: LD_ADDR_VAR 0 2
60559: PUSH
60560: DOUBLE
60561: LD_INT 1
60563: DEC
60564: ST_TO_ADDR
60565: LD_INT 8
60567: PUSH
60568: FOR_TO
60569: IFFALSE 60684
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
60571: LD_VAR 0 2
60575: PUSH
60576: LD_OWVAR 2
60580: NONEQUAL
60581: IFFALSE 60594
60583: PUSH
60584: LD_VAR 0 2
60588: PPUSH
60589: CALL 60733 0 1
60593: AND
60594: IFFALSE 60607
60596: PUSH
60597: LD_VAR 0 2
60601: PPUSH
60602: CALL_OW 108
60606: AND
60607: IFFALSE 60682
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60609: LD_EXP 8
60613: PUSH
60614: LD_VAR 0 2
60618: ARRAY
60619: NOT
60620: IFTRUE 60668
60622: PUSH
60623: LD_EXP 8
60627: PUSH
60628: LD_VAR 0 2
60632: ARRAY
60633: PUSH
60634: LD_EXP 8
60638: PUSH
60639: LD_OWVAR 2
60643: ARRAY
60644: NONEQUAL
60645: IFFALSE 60667
60647: PUSH
60648: LD_OWVAR 2
60652: PPUSH
60653: LD_VAR 0 2
60657: PPUSH
60658: CALL_OW 81
60662: PUSH
60663: LD_INT 1
60665: NONEQUAL
60666: AND
60667: OR
60668: IFFALSE 60682
// begin result := true ;
60670: LD_ADDR_VAR 0 1
60674: PUSH
60675: LD_INT 1
60677: ST_TO_ADDR
// exit ;
60678: POP
60679: POP
60680: GO 60686
// end ;
60682: GO 60568
60684: POP
60685: POP
// end ;
60686: LD_VAR 0 1
60690: RET
// function CanWinLoose ; begin
60691: LD_INT 0
60693: PPUSH
// result := true ;
60694: LD_ADDR_VAR 0 1
60698: PUSH
60699: LD_INT 1
60701: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
60702: CALL_OW 531
60706: IFFALSE 60718
60708: PUSH
60709: CALL_OW 519
60713: PUSH
60714: LD_INT 1
60716: GREATER
60717: AND
60718: IFFALSE 60728
// result := false ;
60720: LD_ADDR_VAR 0 1
60724: PUSH
60725: LD_INT 0
60727: ST_TO_ADDR
// end ;
60728: LD_VAR 0 1
60732: RET
// function HasPower ( i ) ; begin
60733: LD_INT 0
60735: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
60736: LD_ADDR_VAR 0 2
60740: PUSH
60741: LD_INT 22
60743: PUSH
60744: LD_VAR 0 1
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 2
60755: PUSH
60756: LD_INT 21
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 33
60768: PUSH
60769: LD_INT 3
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 33
60778: PUSH
60779: LD_INT 5
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PPUSH
60796: CALL_OW 69
60800: ST_TO_ADDR
// end ; end_of_file
60801: LD_VAR 0 2
60805: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60806: PPOPN 6
60808: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60809: LD_EXP 3
60813: PUSH
60814: LD_INT 4
60816: EQUAL
60817: IFFALSE 60853
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60819: LD_STRING setGameDifficulty(
60821: PUSH
60822: LD_OWVAR 67
60826: STR
60827: PUSH
60828: LD_STRING )
60830: STR
60831: PPUSH
60832: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60836: LD_STRING displayDifficulty(
60838: PUSH
60839: LD_OWVAR 67
60843: STR
60844: PUSH
60845: LD_STRING )
60847: STR
60848: PPUSH
60849: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60853: CALL 60882 0 0
// end ; end_of_file
60857: PPOPN 1
60859: END
// every 0 0$1 do
60860: GO 60862
60862: DISABLE
// begin enable ;
60863: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60864: LD_STRING updateTimer(
60866: PUSH
60867: LD_OWVAR 1
60871: STR
60872: PUSH
60873: LD_STRING );
60875: STR
60876: PPUSH
60877: CALL_OW 559
// end ;
60881: END
// export function SOS_MapStart ( ) ; begin
60882: LD_INT 0
60884: PPUSH
// UpdateFactoryWaypoints ( ) ;
60885: CALL 61816 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60889: CALL 62068 0 0
// ParseMultiDataToLua ( ) ;
60893: CALL 62215 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60897: LD_STRING setSpecLogoNumber(
60899: PUSH
60900: LD_INT 2
60902: STR
60903: PUSH
60904: LD_STRING ,
60906: STR
60907: PUSH
60908: LD_INT 1
60910: STR
60911: PUSH
60912: LD_STRING )
60914: STR
60915: PPUSH
60916: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60920: LD_STRING setSpecLogoNumber(
60922: PUSH
60923: LD_INT 3
60925: STR
60926: PUSH
60927: LD_STRING ,
60929: STR
60930: PUSH
60931: LD_INT 2
60933: STR
60934: PUSH
60935: LD_STRING )
60937: STR
60938: PPUSH
60939: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60943: LD_STRING setSpecLogoNumber(
60945: PUSH
60946: LD_INT 4
60948: STR
60949: PUSH
60950: LD_STRING ,
60952: STR
60953: PUSH
60954: LD_INT 3
60956: STR
60957: PUSH
60958: LD_STRING )
60960: STR
60961: PPUSH
60962: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60966: LD_STRING setSpecLogoNumber(
60968: PUSH
60969: LD_INT 5
60971: STR
60972: PUSH
60973: LD_STRING ,
60975: STR
60976: PUSH
60977: LD_INT 4
60979: STR
60980: PUSH
60981: LD_STRING )
60983: STR
60984: PPUSH
60985: CALL_OW 559
// end ;
60989: LD_VAR 0 1
60993: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
60994: LD_INT 0
60996: PPUSH
60997: PPUSH
60998: PPUSH
60999: PPUSH
61000: PPUSH
61001: PPUSH
61002: PPUSH
61003: PPUSH
61004: PPUSH
// for i := 1 to 8 do
61005: LD_ADDR_VAR 0 2
61009: PUSH
61010: DOUBLE
61011: LD_INT 1
61013: DEC
61014: ST_TO_ADDR
61015: LD_INT 8
61017: PUSH
61018: FOR_TO
61019: IFFALSE 61404
// begin if mpSidePositions [ i ] then
61021: LD_EXP 7
61025: PUSH
61026: LD_VAR 0 2
61030: ARRAY
61031: IFFALSE 61402
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61033: LD_ADDR_VAR 0 7
61037: PUSH
61038: LD_INT 22
61040: PUSH
61041: LD_VAR 0 2
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 21
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PPUSH
61064: CALL_OW 69
61068: PPUSH
61069: CALL 12250 0 1
61073: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61074: LD_ADDR_VAR 0 9
61078: PUSH
61079: LD_INT 22
61081: PUSH
61082: LD_VAR 0 2
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 30
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 30
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: LIST
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PPUSH
61123: CALL_OW 69
61127: ST_TO_ADDR
// crates := 0 ;
61128: LD_ADDR_VAR 0 4
61132: PUSH
61133: LD_INT 0
61135: ST_TO_ADDR
// oil := 0 ;
61136: LD_ADDR_VAR 0 5
61140: PUSH
61141: LD_INT 0
61143: ST_TO_ADDR
// sib := 0 ;
61144: LD_ADDR_VAR 0 6
61148: PUSH
61149: LD_INT 0
61151: ST_TO_ADDR
// if bases then
61152: LD_VAR 0 9
61156: IFFALSE 61262
// begin for j in bases do
61158: LD_ADDR_VAR 0 3
61162: PUSH
61163: LD_VAR 0 9
61167: PUSH
61168: FOR_IN
61169: IFFALSE 61260
// begin base := GetBase ( j ) ;
61171: LD_ADDR_VAR 0 8
61175: PUSH
61176: LD_VAR 0 3
61180: PPUSH
61181: CALL_OW 274
61185: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61186: LD_ADDR_VAR 0 4
61190: PUSH
61191: LD_VAR 0 4
61195: PUSH
61196: LD_VAR 0 8
61200: PPUSH
61201: LD_INT 1
61203: PPUSH
61204: CALL_OW 275
61208: PLUS
61209: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61210: LD_ADDR_VAR 0 5
61214: PUSH
61215: LD_VAR 0 5
61219: PUSH
61220: LD_VAR 0 8
61224: PPUSH
61225: LD_INT 2
61227: PPUSH
61228: CALL_OW 275
61232: PLUS
61233: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61234: LD_ADDR_VAR 0 6
61238: PUSH
61239: LD_VAR 0 6
61243: PUSH
61244: LD_VAR 0 8
61248: PPUSH
61249: LD_INT 3
61251: PPUSH
61252: CALL_OW 275
61256: PLUS
61257: ST_TO_ADDR
// end ;
61258: GO 61168
61260: POP
61261: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61262: LD_STRING setSpecText(
61264: PUSH
61265: LD_VAR 0 2
61269: STR
61270: PUSH
61271: LD_STRING ,
61273: STR
61274: PUSH
61275: LD_INT 2
61277: STR
61278: PUSH
61279: LD_STRING ,
61281: STR
61282: PUSH
61283: LD_VAR 0 4
61287: STR
61288: PUSH
61289: LD_STRING )
61291: STR
61292: PPUSH
61293: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61297: LD_STRING setSpecText(
61299: PUSH
61300: LD_VAR 0 2
61304: STR
61305: PUSH
61306: LD_STRING ,
61308: STR
61309: PUSH
61310: LD_INT 3
61312: STR
61313: PUSH
61314: LD_STRING ,
61316: STR
61317: PUSH
61318: LD_VAR 0 5
61322: STR
61323: PUSH
61324: LD_STRING )
61326: STR
61327: PPUSH
61328: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61332: LD_STRING setSpecText(
61334: PUSH
61335: LD_VAR 0 2
61339: STR
61340: PUSH
61341: LD_STRING ,
61343: STR
61344: PUSH
61345: LD_INT 4
61347: STR
61348: PUSH
61349: LD_STRING ,
61351: STR
61352: PUSH
61353: LD_VAR 0 6
61357: STR
61358: PUSH
61359: LD_STRING )
61361: STR
61362: PPUSH
61363: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61367: LD_STRING setSpecText(
61369: PUSH
61370: LD_VAR 0 2
61374: STR
61375: PUSH
61376: LD_STRING ,
61378: STR
61379: PUSH
61380: LD_INT 5
61382: STR
61383: PUSH
61384: LD_STRING ,
61386: STR
61387: PUSH
61388: LD_VAR 0 7
61392: STR
61393: PUSH
61394: LD_STRING )
61396: STR
61397: PPUSH
61398: CALL_OW 559
// end ; end ;
61402: GO 61018
61404: POP
61405: POP
// end ;
61406: LD_VAR 0 1
61410: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61411: LD_INT 2
61413: PUSH
61414: LD_INT 30
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 30
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: LIST
61438: PPUSH
61439: CALL_OW 69
61443: IFFALSE 61453
61445: GO 61447
61447: DISABLE
// begin enable ;
61448: ENABLE
// UpdateSpectatorBar ;
61449: CALL 60994 0 0
// end ;
61453: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61454: LD_INT 0
61456: PPUSH
// end ;
61457: LD_VAR 0 12
61461: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61462: LD_INT 0
61464: PPUSH
61465: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61466: LD_VAR 0 1
61470: NOT
61471: IFTRUE 61490
61473: PUSH
61474: LD_VAR 0 2
61478: PPUSH
61479: LD_VAR 0 3
61483: PPUSH
61484: CALL_OW 488
61488: NOT
61489: OR
61490: IFTRUE 61525
61492: PUSH
61493: LD_VAR 0 1
61497: PPUSH
61498: CALL_OW 266
61502: PUSH
61503: LD_INT 3
61505: NONEQUAL
61506: IFFALSE 61524
61508: PUSH
61509: LD_VAR 0 1
61513: PPUSH
61514: CALL_OW 247
61518: PUSH
61519: LD_INT 1
61521: EQUAL
61522: NOT
61523: AND
61524: OR
61525: IFFALSE 61529
// exit ;
61527: GO 61811
// if GetType ( factory ) = unit_human then
61529: LD_VAR 0 1
61533: PPUSH
61534: CALL_OW 247
61538: PUSH
61539: LD_INT 1
61541: EQUAL
61542: IFFALSE 61559
// factory := IsInUnit ( factory ) ;
61544: LD_ADDR_VAR 0 1
61548: PUSH
61549: LD_VAR 0 1
61553: PPUSH
61554: CALL_OW 310
61558: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61559: LD_VAR 0 1
61563: PPUSH
61564: CALL_OW 266
61568: PUSH
61569: LD_INT 3
61571: NONEQUAL
61572: IFFALSE 61576
// exit ;
61574: GO 61811
// for i := 1 to Count ( factoryWaypoints ) do
61576: LD_ADDR_VAR 0 5
61580: PUSH
61581: DOUBLE
61582: LD_INT 1
61584: DEC
61585: ST_TO_ADDR
61586: LD_EXP 59
61590: PPUSH
61591: CALL 12250 0 1
61595: PUSH
61596: FOR_TO
61597: IFFALSE 61759
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61599: LD_VAR 0 2
61603: PPUSH
61604: LD_VAR 0 3
61608: PPUSH
61609: CALL_OW 428
61613: PUSH
61614: LD_EXP 59
61618: PUSH
61619: LD_VAR 0 5
61623: ARRAY
61624: PUSH
61625: LD_INT 2
61627: ARRAY
61628: EQUAL
61629: IFFALSE 61661
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61631: LD_ADDR_EXP 59
61635: PUSH
61636: LD_EXP 59
61640: PPUSH
61641: LD_VAR 0 5
61645: PPUSH
61646: CALL_OW 3
61650: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61651: CALL 61816 0 0
// exit ;
61655: POP
61656: POP
61657: GO 61811
// end else
61659: GO 61757
// if factory = factoryWaypoints [ i ] [ 2 ] then
61661: LD_VAR 0 1
61665: PUSH
61666: LD_EXP 59
61670: PUSH
61671: LD_VAR 0 5
61675: ARRAY
61676: PUSH
61677: LD_INT 2
61679: ARRAY
61680: EQUAL
61681: IFFALSE 61757
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61683: LD_ADDR_EXP 59
61687: PUSH
61688: LD_EXP 59
61692: PPUSH
61693: LD_VAR 0 5
61697: PPUSH
61698: CALL_OW 3
61702: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61703: LD_ADDR_EXP 59
61707: PUSH
61708: LD_EXP 59
61712: PPUSH
61713: LD_VAR 0 1
61717: PPUSH
61718: CALL_OW 255
61722: PUSH
61723: LD_VAR 0 1
61727: PUSH
61728: LD_VAR 0 2
61732: PUSH
61733: LD_VAR 0 3
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: PPUSH
61744: CALL 48182 0 2
61748: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61749: CALL 61816 0 0
// exit ;
61753: POP
61754: POP
61755: GO 61811
// end ; end ;
61757: GO 61596
61759: POP
61760: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61761: LD_ADDR_EXP 59
61765: PUSH
61766: LD_EXP 59
61770: PPUSH
61771: LD_VAR 0 1
61775: PPUSH
61776: CALL_OW 255
61780: PUSH
61781: LD_VAR 0 1
61785: PUSH
61786: LD_VAR 0 2
61790: PUSH
61791: LD_VAR 0 3
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: PPUSH
61802: CALL 48182 0 2
61806: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61807: CALL 61816 0 0
// end ;
61811: LD_VAR 0 4
61815: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61816: LD_INT 0
61818: PPUSH
61819: PPUSH
61820: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61821: LD_STRING resetFactoryWaypoint();
61823: PPUSH
61824: CALL_OW 559
// if factoryWaypoints then
61828: LD_EXP 59
61832: IFFALSE 61953
// begin list := factoryWaypoints ;
61834: LD_ADDR_VAR 0 3
61838: PUSH
61839: LD_EXP 59
61843: ST_TO_ADDR
// for i := 1 to list do
61844: LD_ADDR_VAR 0 2
61848: PUSH
61849: DOUBLE
61850: LD_INT 1
61852: DEC
61853: ST_TO_ADDR
61854: LD_VAR 0 3
61858: PUSH
61859: FOR_TO
61860: IFFALSE 61951
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61862: LD_STRING setFactoryWaypointXY(
61864: PUSH
61865: LD_VAR 0 3
61869: PUSH
61870: LD_VAR 0 2
61874: ARRAY
61875: PUSH
61876: LD_INT 1
61878: ARRAY
61879: STR
61880: PUSH
61881: LD_STRING ,
61883: STR
61884: PUSH
61885: LD_VAR 0 3
61889: PUSH
61890: LD_VAR 0 2
61894: ARRAY
61895: PUSH
61896: LD_INT 2
61898: ARRAY
61899: STR
61900: PUSH
61901: LD_STRING ,
61903: STR
61904: PUSH
61905: LD_VAR 0 3
61909: PUSH
61910: LD_VAR 0 2
61914: ARRAY
61915: PUSH
61916: LD_INT 3
61918: ARRAY
61919: STR
61920: PUSH
61921: LD_STRING ,
61923: STR
61924: PUSH
61925: LD_VAR 0 3
61929: PUSH
61930: LD_VAR 0 2
61934: ARRAY
61935: PUSH
61936: LD_INT 4
61938: ARRAY
61939: STR
61940: PUSH
61941: LD_STRING )
61943: STR
61944: PPUSH
61945: CALL_OW 559
61949: GO 61859
61951: POP
61952: POP
// end ; end ;
61953: LD_VAR 0 1
61957: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61958: LD_INT 0
61960: PPUSH
// if HexInfo ( x , y ) = warehouse then
61961: LD_VAR 0 2
61965: PPUSH
61966: LD_VAR 0 3
61970: PPUSH
61971: CALL_OW 428
61975: PUSH
61976: LD_VAR 0 1
61980: EQUAL
61981: IFFALSE 62008
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61983: LD_ADDR_EXP 61
61987: PUSH
61988: LD_EXP 61
61992: PPUSH
61993: LD_VAR 0 1
61997: PPUSH
61998: LD_INT 0
62000: PPUSH
62001: CALL_OW 1
62005: ST_TO_ADDR
62006: GO 62059
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62008: LD_ADDR_EXP 61
62012: PUSH
62013: LD_EXP 61
62017: PPUSH
62018: LD_VAR 0 1
62022: PPUSH
62023: LD_VAR 0 1
62027: PPUSH
62028: CALL_OW 255
62032: PUSH
62033: LD_VAR 0 1
62037: PUSH
62038: LD_VAR 0 2
62042: PUSH
62043: LD_VAR 0 3
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: PPUSH
62054: CALL_OW 1
62058: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62059: CALL 62068 0 0
// end ;
62063: LD_VAR 0 4
62067: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62068: LD_INT 0
62070: PPUSH
62071: PPUSH
62072: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62073: LD_STRING resetWarehouseGatheringPoints();
62075: PPUSH
62076: CALL_OW 559
// if warehouseGatheringPoints then
62080: LD_EXP 61
62084: IFFALSE 62210
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62086: LD_ADDR_VAR 0 3
62090: PUSH
62091: LD_EXP 61
62095: PPUSH
62096: CALL 52116 0 1
62100: ST_TO_ADDR
// for i := 1 to list do
62101: LD_ADDR_VAR 0 2
62105: PUSH
62106: DOUBLE
62107: LD_INT 1
62109: DEC
62110: ST_TO_ADDR
62111: LD_VAR 0 3
62115: PUSH
62116: FOR_TO
62117: IFFALSE 62208
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62119: LD_STRING setWarehouseGatheringPointXY(
62121: PUSH
62122: LD_VAR 0 3
62126: PUSH
62127: LD_VAR 0 2
62131: ARRAY
62132: PUSH
62133: LD_INT 1
62135: ARRAY
62136: STR
62137: PUSH
62138: LD_STRING ,
62140: STR
62141: PUSH
62142: LD_VAR 0 3
62146: PUSH
62147: LD_VAR 0 2
62151: ARRAY
62152: PUSH
62153: LD_INT 2
62155: ARRAY
62156: STR
62157: PUSH
62158: LD_STRING ,
62160: STR
62161: PUSH
62162: LD_VAR 0 3
62166: PUSH
62167: LD_VAR 0 2
62171: ARRAY
62172: PUSH
62173: LD_INT 3
62175: ARRAY
62176: STR
62177: PUSH
62178: LD_STRING ,
62180: STR
62181: PUSH
62182: LD_VAR 0 3
62186: PUSH
62187: LD_VAR 0 2
62191: ARRAY
62192: PUSH
62193: LD_INT 4
62195: ARRAY
62196: STR
62197: PUSH
62198: LD_STRING )
62200: STR
62201: PPUSH
62202: CALL_OW 559
62206: GO 62116
62208: POP
62209: POP
// end ; end ;
62210: LD_VAR 0 1
62214: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62215: LD_INT 0
62217: PPUSH
62218: PPUSH
// if not mpSidePositions then
62219: LD_EXP 7
62223: NOT
62224: IFFALSE 62228
// exit ;
62226: GO 62299
// result :=  ;
62228: LD_ADDR_VAR 0 1
62232: PUSH
62233: LD_STRING 
62235: ST_TO_ADDR
// for i := 1 to 8 do
62236: LD_ADDR_VAR 0 2
62240: PUSH
62241: DOUBLE
62242: LD_INT 1
62244: DEC
62245: ST_TO_ADDR
62246: LD_INT 8
62248: PUSH
62249: FOR_TO
62250: IFFALSE 62280
// begin result := result & mpSidePositions [ i ] & ; ;
62252: LD_ADDR_VAR 0 1
62256: PUSH
62257: LD_VAR 0 1
62261: PUSH
62262: LD_EXP 7
62266: PUSH
62267: LD_VAR 0 2
62271: ARRAY
62272: STR
62273: PUSH
62274: LD_STRING ;
62276: STR
62277: ST_TO_ADDR
// end ;
62278: GO 62249
62280: POP
62281: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62282: LD_STRING setMultiplayerRealPosition("
62284: PUSH
62285: LD_VAR 0 1
62289: STR
62290: PUSH
62291: LD_STRING ");
62293: STR
62294: PPUSH
62295: CALL_OW 559
// end ;
62299: LD_VAR 0 1
62303: RET
