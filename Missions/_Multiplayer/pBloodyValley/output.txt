// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 3082 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3505 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 6
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 7
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: LD_INT 2
 467: PUSH
 468: LD_INT 4
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 6300
 482: PUSH
 483: LD_INT 10500
 485: PUSH
 486: LD_INT 16800
 488: PUSH
 489: LD_INT 21000
 491: PUSH
 492: LD_INT 25200
 494: PUSH
 495: LD_INT 31500
 497: PUSH
 498: LD_INT 42000
 500: PUSH
 501: LD_INT 63000
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 4 , 3 3$0 ] ;
 538: LD_ADDR_EXP 8
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 15
 548: PUSH
 549: LD_INT 4
 551: PUSH
 552: LD_INT 100
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 250
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 10500
 583: PUSH
 584: LD_INT 1
 586: PUSH
 587: LD_INT 700
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 700
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 31500
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 4
 613: PUSH
 614: LD_INT 6300
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: ST_TO_ADDR
// mpGameType := GameTypeSurvivalHardcore ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: ST_TO_ADDR
// your_side := 1 ;
 648: LD_ADDR_OWVAR 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 656: LD_ADDR_EXP 9
 660: PUSH
 661: LD_INT 1
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 0
 675: PUSH
 676: LD_INT 0
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 695: LD_ADDR_EXP 10
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 1
 705: PUSH
 706: LD_INT 2
 708: PUSH
 709: LD_INT 2
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: LD_INT 0
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// mpSideNations := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 734: LD_ADDR_EXP 11
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 1
 744: PUSH
 745: LD_INT 2
 747: PUSH
 748: LD_INT 2
 750: PUSH
 751: LD_INT 0
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 773: LD_ADDR_EXP 12
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 2
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 3
 790: PUSH
 791: LD_INT 4
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: ST_TO_ADDR
// mpTeamGame := true ;
 802: LD_ADDR_EXP 13
 806: PUSH
 807: LD_INT 1
 809: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 810: LD_ADDR_EXP 31
 814: PUSH
 815: LD_INT 100
 817: PUSH
 818: LD_INT 120
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: ST_TO_ADDR
// end ;
 825: LD_VAR 0 1
 829: RET
// export kingArea , kingCamArea , mpTree ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
 838: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
 839: LD_ADDR_EXP 21
 843: PUSH
 844: LD_INT 2
 846: PUSH
 847: LD_INT 3
 849: PUSH
 850: LD_INT 5
 852: PUSH
 853: LD_INT 4
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 20
 866: PUSH
 867: EMPTY
 868: PUSH
 869: LD_EXP 21
 873: UNION
 874: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 875: LD_VAR 0 1
 879: PUSH
 880: LD_INT 2
 882: EQUAL
 883: IFFALSE 895
// baseLevel := 1 else
 885: LD_ADDR_VAR 0 7
 889: PUSH
 890: LD_INT 1
 892: ST_TO_ADDR
 893: GO 909
// baseLevel := mpGameSettings [ 1 ] ;
 895: LD_ADDR_VAR 0 7
 899: PUSH
 900: LD_EXP 8
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 909: LD_ADDR_EXP 26
 913: PUSH
 914: LD_EXP 8
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 923: LD_ADDR_EXP 27
 927: PUSH
 928: LD_EXP 8
 932: PUSH
 933: LD_INT 3
 935: ARRAY
 936: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 937: LD_ADDR_EXP 17
 941: PUSH
 942: LD_EXP 8
 946: PUSH
 947: LD_INT 4
 949: ARRAY
 950: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 951: LD_ADDR_EXP 29
 955: PUSH
 956: LD_EXP 8
 960: PUSH
 961: LD_INT 5
 963: ARRAY
 964: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 965: LD_ADDR_VAR 0 5
 969: PUSH
 970: LD_EXP 8
 974: PUSH
 975: LD_INT 6
 977: ARRAY
 978: PUSH
 979: LD_INT 0
 981: GREATER
 982: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 983: LD_ADDR_VAR 0 6
 987: PUSH
 988: LD_EXP 8
 992: PUSH
 993: LD_INT 7
 995: ARRAY
 996: PUSH
 997: LD_INT 0
 999: GREATER
1000: ST_TO_ADDR
// mpKingArea := 0 ;
1001: LD_ADDR_EXP 36
1005: PUSH
1006: LD_INT 0
1008: ST_TO_ADDR
// mpPoints := 0 ;
1009: LD_ADDR_EXP 37
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpEmissions := 0 ;
1017: LD_ADDR_EXP 39
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// kingArea := 0 ;
1025: LD_ADDR_EXP 1
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// kingCamArea := 0 ;
1033: LD_ADDR_EXP 2
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1041: LD_EXP 8
1045: PUSH
1046: LD_INT 9
1048: ARRAY
1049: IFFALSE 1181
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1051: LD_ADDR_EXP 38
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 2
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 3
1085: PUSH
1086: EMPTY
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 12
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 24
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 12
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 23
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 21
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 42
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 21
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 42
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1181: LD_ADDR_EXP 18
1185: PUSH
1186: LD_EXP 8
1190: PUSH
1191: LD_INT 11
1193: ARRAY
1194: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1195: LD_ADDR_EXP 24
1199: PUSH
1200: LD_EXP 8
1204: PUSH
1205: LD_INT 12
1207: ARRAY
1208: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1209: LD_ADDR_EXP 28
1213: PUSH
1214: LD_EXP 8
1218: PUSH
1219: LD_INT 13
1221: ARRAY
1222: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1223: LD_ADDR_EXP 35
1227: PUSH
1228: LD_EXP 8
1232: PUSH
1233: LD_INT 14
1235: ARRAY
1236: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1237: LD_ADDR_EXP 32
1241: PUSH
1242: LD_EXP 8
1246: PUSH
1247: LD_INT 15
1249: ARRAY
1250: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1251: LD_ADDR_EXP 30
1255: PUSH
1256: LD_EXP 8
1260: PUSH
1261: LD_INT 18
1263: ARRAY
1264: ST_TO_ADDR
// mpTree := mpGameSettings [ 20 ] ;
1265: LD_ADDR_EXP 3
1269: PUSH
1270: LD_EXP 8
1274: PUSH
1275: LD_INT 20
1277: ARRAY
1278: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1279: LD_ADDR_EXP 22
1283: PUSH
1284: LD_EXP 8
1288: PUSH
1289: LD_INT 21
1291: ARRAY
1292: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 ] ;
1293: LD_ADDR_EXP 33
1297: PUSH
1298: LD_INT 7
1300: PUSH
1301: LD_INT 9
1303: PUSH
1304: LD_INT 8
1306: PUSH
1307: LD_INT 10
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 2 ) , GetBuildingFromArea ( DepotArea2 , 0 ) , GetBuildingFromArea ( DepotArea3 , 3 ) , GetBuildingFromArea ( DepotArea4 , 5 ) ] ;
1316: LD_ADDR_VAR 0 8
1320: PUSH
1321: LD_INT 11
1323: PPUSH
1324: LD_INT 2
1326: PPUSH
1327: CALL 54537 0 2
1331: PUSH
1332: LD_INT 12
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL 54537 0 2
1342: PUSH
1343: LD_INT 13
1345: PPUSH
1346: LD_INT 3
1348: PPUSH
1349: CALL 54537 0 2
1353: PUSH
1354: LD_INT 14
1356: PPUSH
1357: LD_INT 5
1359: PPUSH
1360: CALL 54537 0 2
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1371: LD_ADDR_VAR 0 3
1375: PUSH
1376: DOUBLE
1377: LD_INT 1
1379: DEC
1380: ST_TO_ADDR
1381: LD_VAR 0 8
1385: PPUSH
1386: CALL 13842 0 1
1390: PUSH
1391: FOR_TO
1392: IFFALSE 1496
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1394: LD_ADDR_EXP 23
1398: PUSH
1399: LD_EXP 23
1403: PPUSH
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_VAR 0 8
1413: PUSH
1414: LD_VAR 0 3
1418: ARRAY
1419: PUSH
1420: LD_INT 1
1422: ARRAY
1423: PPUSH
1424: LD_VAR 0 8
1428: PUSH
1429: LD_VAR 0 3
1433: ARRAY
1434: PUSH
1435: LD_INT 3
1437: ARRAY
1438: PPUSH
1439: LD_INT 10
1441: PPUSH
1442: CALL_OW 272
1446: PUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_VAR 0 3
1456: ARRAY
1457: PUSH
1458: LD_INT 2
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 3
1475: ARRAY
1476: PPUSH
1477: LD_INT 10
1479: PPUSH
1480: CALL_OW 273
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PPUSH
1489: CALL_OW 1
1493: ST_TO_ADDR
1494: GO 1391
1496: POP
1497: POP
// if hasOil then
1498: LD_VAR 0 5
1502: IFFALSE 1585
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1504: LD_ADDR_VAR 0 4
1508: PUSH
1509: LD_EXP 8
1513: PUSH
1514: LD_INT 6
1516: ARRAY
1517: PUSH
1518: LD_INT 2
1520: EQUAL
1521: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) ] ;
1522: LD_ADDR_EXP 14
1526: PUSH
1527: LD_INT 15
1529: PPUSH
1530: LD_VAR 0 4
1534: PPUSH
1535: CALL 54370 0 2
1539: PUSH
1540: LD_INT 17
1542: PPUSH
1543: LD_VAR 0 4
1547: PPUSH
1548: CALL 54370 0 2
1552: PUSH
1553: LD_INT 19
1555: PPUSH
1556: LD_VAR 0 4
1560: PPUSH
1561: CALL 54370 0 2
1565: PUSH
1566: LD_INT 21
1568: PPUSH
1569: LD_VAR 0 4
1573: PPUSH
1574: CALL 54370 0 2
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: ST_TO_ADDR
// end ; if hasSib then
1585: LD_VAR 0 6
1589: IFFALSE 1672
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1591: LD_ADDR_VAR 0 4
1595: PUSH
1596: LD_EXP 8
1600: PUSH
1601: LD_INT 7
1603: ARRAY
1604: PUSH
1605: LD_INT 2
1607: EQUAL
1608: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) ] ;
1609: LD_ADDR_EXP 15
1613: PUSH
1614: LD_INT 16
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 54370 0 2
1626: PUSH
1627: LD_INT 18
1629: PPUSH
1630: LD_VAR 0 4
1634: PPUSH
1635: CALL 54370 0 2
1639: PUSH
1640: LD_INT 20
1642: PPUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: CALL 54370 0 2
1652: PUSH
1653: LD_INT 22
1655: PPUSH
1656: LD_VAR 0 4
1660: PPUSH
1661: CALL 54370 0 2
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1672: LD_VAR 0 7
1676: PUSH
1677: LD_INT 1
1679: GREATEREQUAL
1680: IFFALSE 1692
// mpDepots := startPos ;
1682: LD_ADDR_EXP 16
1686: PUSH
1687: LD_VAR 0 8
1691: ST_TO_ADDR
// if baseLevel >= 2 then
1692: LD_VAR 0 7
1696: PUSH
1697: LD_INT 2
1699: GREATEREQUAL
1700: IFFALSE 1913
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( BunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( BunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( ArmArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( BunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea2 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea3a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( ArmArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( BunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea4 , 2 ) ] ] ;
1702: LD_ADDR_EXP 19
1706: PUSH
1707: LD_INT 31
1709: PUSH
1710: LD_INT 23
1712: PPUSH
1713: LD_INT 5
1715: PPUSH
1716: CALL 54537 0 2
1720: ADD
1721: PUSH
1722: LD_INT 31
1724: PUSH
1725: LD_INT 24
1727: PPUSH
1728: LD_INT 5
1730: PPUSH
1731: CALL 54537 0 2
1735: ADD
1736: PUSH
1737: LD_INT 4
1739: PUSH
1740: LD_INT 25
1742: PPUSH
1743: LD_INT 4
1745: PPUSH
1746: CALL 54537 0 2
1750: ADD
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 31
1759: PUSH
1760: LD_INT 26
1762: PPUSH
1763: LD_INT 3
1765: PPUSH
1766: CALL 54537 0 2
1770: ADD
1771: PUSH
1772: LD_INT 31
1774: PUSH
1775: LD_INT 27
1777: PPUSH
1778: LD_INT 4
1780: PPUSH
1781: CALL 54537 0 2
1785: ADD
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: LD_INT 28
1792: PPUSH
1793: LD_INT 3
1795: PPUSH
1796: CALL 54537 0 2
1800: ADD
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 31
1809: PUSH
1810: LD_INT 29
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: CALL 54537 0 2
1820: ADD
1821: PUSH
1822: LD_INT 31
1824: PUSH
1825: LD_INT 31
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL 54537 0 2
1835: ADD
1836: PUSH
1837: LD_INT 4
1839: PUSH
1840: LD_INT 30
1842: PPUSH
1843: LD_INT 0
1845: PPUSH
1846: CALL 54537 0 2
1850: ADD
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 31
1859: PUSH
1860: LD_INT 32
1862: PPUSH
1863: LD_INT 2
1865: PPUSH
1866: CALL 54537 0 2
1870: ADD
1871: PUSH
1872: LD_INT 31
1874: PUSH
1875: LD_INT 33
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: CALL 54537 0 2
1885: ADD
1886: PUSH
1887: LD_INT 4
1889: PUSH
1890: LD_INT 34
1892: PPUSH
1893: LD_INT 2
1895: PPUSH
1896: CALL 54537 0 2
1900: ADD
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: ST_TO_ADDR
// end ; if mpTree then
1913: LD_EXP 3
1917: IFFALSE 1929
// SetAreaMapShow ( TreeArea , 1 ) ;
1919: LD_INT 1
1921: PPUSH
1922: LD_INT 1
1924: PPUSH
1925: CALL_OW 424
// end ;
1929: LD_VAR 0 2
1933: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1934: GO 1936
1936: DISABLE
1937: LD_INT 0
1939: PPUSH
1940: PPUSH
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
1945: PPUSH
1946: PPUSH
// begin if not mpShipments then
1947: LD_EXP 29
1951: NOT
1952: IFFALSE 1956
// exit ;
1954: GO 2463
// case mpShipments of 1 :
1956: LD_EXP 29
1960: PUSH
1961: LD_INT 1
1963: DOUBLE
1964: EQUAL
1965: IFTRUE 1969
1967: GO 2004
1969: POP
// begin time := 0 0$30 ;
1970: LD_ADDR_VAR 0 4
1974: PUSH
1975: LD_INT 1050
1977: ST_TO_ADDR
// normalTime := 0 0$30 ;
1978: LD_ADDR_VAR 0 6
1982: PUSH
1983: LD_INT 1050
1985: ST_TO_ADDR
// maxTime := 1 1$20 ;
1986: LD_ADDR_VAR 0 8
1990: PUSH
1991: LD_INT 2800
1993: ST_TO_ADDR
// delayTime := 0 0$5 ;
1994: LD_ADDR_VAR 0 7
1998: PUSH
1999: LD_INT 175
2001: ST_TO_ADDR
// end ; 2 :
2002: GO 2134
2004: LD_INT 2
2006: DOUBLE
2007: EQUAL
2008: IFTRUE 2012
2010: GO 2047
2012: POP
// begin time := 0 0$25 ;
2013: LD_ADDR_VAR 0 4
2017: PUSH
2018: LD_INT 875
2020: ST_TO_ADDR
// normalTime := 0 0$25 ;
2021: LD_ADDR_VAR 0 6
2025: PUSH
2026: LD_INT 875
2028: ST_TO_ADDR
// maxTime := 1 1$10 ;
2029: LD_ADDR_VAR 0 8
2033: PUSH
2034: LD_INT 2450
2036: ST_TO_ADDR
// delayTime := 0 0$4 ;
2037: LD_ADDR_VAR 0 7
2041: PUSH
2042: LD_INT 140
2044: ST_TO_ADDR
// end ; 3 :
2045: GO 2134
2047: LD_INT 3
2049: DOUBLE
2050: EQUAL
2051: IFTRUE 2055
2053: GO 2090
2055: POP
// begin time := 0 0$20 ;
2056: LD_ADDR_VAR 0 4
2060: PUSH
2061: LD_INT 700
2063: ST_TO_ADDR
// normalTime := 0 0$20 ;
2064: LD_ADDR_VAR 0 6
2068: PUSH
2069: LD_INT 700
2071: ST_TO_ADDR
// maxTime := 1 1$00 ;
2072: LD_ADDR_VAR 0 8
2076: PUSH
2077: LD_INT 2100
2079: ST_TO_ADDR
// delayTime := 0 0$3 ;
2080: LD_ADDR_VAR 0 7
2084: PUSH
2085: LD_INT 105
2087: ST_TO_ADDR
// end ; 4 :
2088: GO 2134
2090: LD_INT 4
2092: DOUBLE
2093: EQUAL
2094: IFTRUE 2098
2096: GO 2133
2098: POP
// begin time := 0 0$15 ;
2099: LD_ADDR_VAR 0 4
2103: PUSH
2104: LD_INT 525
2106: ST_TO_ADDR
// normalTime := 0 0$15 ;
2107: LD_ADDR_VAR 0 6
2111: PUSH
2112: LD_INT 525
2114: ST_TO_ADDR
// maxTime := 0 0$55 ;
2115: LD_ADDR_VAR 0 8
2119: PUSH
2120: LD_INT 1925
2122: ST_TO_ADDR
// delayTime := 0 0$2 ;
2123: LD_ADDR_VAR 0 7
2127: PUSH
2128: LD_INT 70
2130: ST_TO_ADDR
// end ; end ;
2131: GO 2134
2133: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
2134: LD_ADDR_VAR 0 3
2138: PUSH
2139: LD_INT 2
2141: PUSH
2142: LD_INT 3
2144: PUSH
2145: LD_INT 5
2147: PUSH
2148: LD_INT 4
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: ST_TO_ADDR
// areas := [ Center1 , Center2 ] ;
2157: LD_ADDR_VAR 0 5
2161: PUSH
2162: LD_INT 36
2164: PUSH
2165: LD_INT 35
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: ST_TO_ADDR
// for i := 1 to 8 do
2172: LD_ADDR_VAR 0 1
2176: PUSH
2177: DOUBLE
2178: LD_INT 1
2180: DEC
2181: ST_TO_ADDR
2182: LD_INT 8
2184: PUSH
2185: FOR_TO
2186: IFFALSE 2233
// begin if not mpSidePositions [ i ] then
2188: LD_EXP 9
2192: PUSH
2193: LD_VAR 0 1
2197: ARRAY
2198: NOT
2199: IFFALSE 2203
// continue ;
2201: GO 2185
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2203: LD_ADDR_VAR 0 5
2207: PUSH
2208: LD_VAR 0 5
2212: PUSH
2213: LD_VAR 0 3
2217: PUSH
2218: LD_EXP 9
2222: PUSH
2223: LD_VAR 0 1
2227: ARRAY
2228: ARRAY
2229: ADD
2230: ST_TO_ADDR
// end ;
2231: GO 2185
2233: POP
2234: POP
// x := 1 ;
2235: LD_ADDR_VAR 0 2
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// repeat wait ( time ) ;
2243: LD_VAR 0 4
2247: PPUSH
2248: CALL_OW 67
// x := Inc ( x ) ;
2252: LD_ADDR_VAR 0 2
2256: PUSH
2257: LD_VAR 0 2
2261: PPUSH
2262: CALL 51191 0 1
2266: ST_TO_ADDR
// if x > 5 then
2267: LD_VAR 0 2
2271: PUSH
2272: LD_INT 5
2274: GREATER
2275: IFFALSE 2285
// x := 1 ;
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: LD_INT 1
2284: ST_TO_ADDR
// for i in areas do
2285: LD_ADDR_VAR 0 1
2289: PUSH
2290: LD_VAR 0 5
2294: PUSH
2295: FOR_IN
2296: IFFALSE 2335
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2298: LD_VAR 0 1
2302: PPUSH
2303: LD_INT 1
2305: PPUSH
2306: CALL_OW 287
2310: PUSH
2311: LD_INT 20
2313: LESS
2314: IFFALSE 2333
// begin CreateCratesArea ( x , i , true ) ;
2316: LD_VAR 0 2
2320: PPUSH
2321: LD_VAR 0 1
2325: PPUSH
2326: LD_INT 1
2328: PPUSH
2329: CALL_OW 55
// end ; end ;
2333: GO 2295
2335: POP
2336: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2337: LD_INT 37
2339: PPUSH
2340: LD_INT 1
2342: PPUSH
2343: CALL_OW 287
2347: PUSH
2348: LD_INT 0
2350: EQUAL
2351: IFFALSE 2390
// begin for i := 1 to 3 do
2353: LD_ADDR_VAR 0 1
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_INT 3
2365: PUSH
2366: FOR_TO
2367: IFFALSE 2386
// CreateCratesArea ( x , CenterArea , true ) ;
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_INT 37
2376: PPUSH
2377: LD_INT 1
2379: PPUSH
2380: CALL_OW 55
2384: GO 2366
2386: POP
2387: POP
// end else
2388: GO 2421
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2390: LD_INT 37
2392: PPUSH
2393: LD_INT 1
2395: PPUSH
2396: CALL_OW 287
2400: PUSH
2401: LD_INT 30
2403: LESS
2404: IFFALSE 2421
// CreateCratesArea ( x , CenterArea , true ) ;
2406: LD_VAR 0 2
2410: PPUSH
2411: LD_INT 37
2413: PPUSH
2414: LD_INT 1
2416: PPUSH
2417: CALL_OW 55
// time := time + delayTime ;
2421: LD_ADDR_VAR 0 4
2425: PUSH
2426: LD_VAR 0 4
2430: PUSH
2431: LD_VAR 0 7
2435: PLUS
2436: ST_TO_ADDR
// if time > maxTime then
2437: LD_VAR 0 4
2441: PUSH
2442: LD_VAR 0 8
2446: GREATER
2447: IFFALSE 2459
// time := normalTime ;
2449: LD_ADDR_VAR 0 4
2453: PUSH
2454: LD_VAR 0 6
2458: ST_TO_ADDR
// until false ;
2459: LD_INT 0
2461: IFFALSE 2243
// end ;
2463: PPOPN 8
2465: END
// export treeVisited ; every 0 0$2 trigger mpTree do var i , tmp , skill , power , bonus , lua ;
2466: LD_EXP 3
2470: IFFALSE 2919
2472: GO 2474
2474: DISABLE
2475: LD_INT 0
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
// begin treeVisited := [ ] ;
2483: LD_ADDR_EXP 4
2487: PUSH
2488: EMPTY
2489: ST_TO_ADDR
// power := 1 ;
2490: LD_ADDR_VAR 0 4
2494: PUSH
2495: LD_INT 1
2497: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2498: LD_INT 35
2500: PPUSH
2501: CALL_OW 67
// if tick mod Round ( 20 20$0 div mpTree ) = 0 then
2505: LD_OWVAR 1
2509: PUSH
2510: LD_INT 42000
2512: PUSH
2513: LD_EXP 3
2517: DIV
2518: PPUSH
2519: CALL_OW 574
2523: MOD
2524: PUSH
2525: LD_INT 0
2527: EQUAL
2528: IFFALSE 2545
// power := Inc ( power ) ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: LD_VAR 0 4
2539: PPUSH
2540: CALL 51191 0 1
2544: ST_TO_ADDR
// if power > 10 then
2545: LD_VAR 0 4
2549: PUSH
2550: LD_INT 10
2552: GREATER
2553: IFFALSE 2563
// power := 10 ;
2555: LD_ADDR_VAR 0 4
2559: PUSH
2560: LD_INT 10
2562: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_inarea , TreeArea ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) diff treeVisited ;
2563: LD_ADDR_VAR 0 2
2567: PUSH
2568: LD_INT 95
2570: PUSH
2571: LD_INT 1
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: PUSH
2578: LD_INT 21
2580: PUSH
2581: LD_INT 1
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PUSH
2588: LD_INT 3
2590: PUSH
2591: LD_INT 23
2593: PUSH
2594: LD_INT 0
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: EMPTY
2606: LIST
2607: LIST
2608: LIST
2609: PPUSH
2610: CALL_OW 69
2614: PUSH
2615: LD_EXP 4
2619: DIFF
2620: ST_TO_ADDR
// if tmp then
2621: LD_VAR 0 2
2625: IFFALSE 2790
// begin for i in tmp do
2627: LD_ADDR_VAR 0 1
2631: PUSH
2632: LD_VAR 0 2
2636: PUSH
2637: FOR_IN
2638: IFFALSE 2788
// begin treeVisited := Join ( treeVisited , i ) ;
2640: LD_ADDR_EXP 4
2644: PUSH
2645: LD_EXP 4
2649: PPUSH
2650: LD_VAR 0 1
2654: PPUSH
2655: CALL 49818 0 2
2659: ST_TO_ADDR
// bonus := GetSkill ( i , i mod 4 + 1 ) + power ;
2660: LD_ADDR_VAR 0 5
2664: PUSH
2665: LD_VAR 0 1
2669: PPUSH
2670: LD_VAR 0 1
2674: PUSH
2675: LD_INT 4
2677: MOD
2678: PUSH
2679: LD_INT 1
2681: PLUS
2682: PPUSH
2683: CALL_OW 259
2687: PUSH
2688: LD_VAR 0 4
2692: PLUS
2693: ST_TO_ADDR
// if bonus > 10 then
2694: LD_VAR 0 5
2698: PUSH
2699: LD_INT 10
2701: GREATER
2702: IFFALSE 2712
// bonus := 10 ;
2704: LD_ADDR_VAR 0 5
2708: PUSH
2709: LD_INT 10
2711: ST_TO_ADDR
// skill := i mod 4 + 1 ;
2712: LD_ADDR_VAR 0 3
2716: PUSH
2717: LD_VAR 0 1
2721: PUSH
2722: LD_INT 4
2724: MOD
2725: PUSH
2726: LD_INT 1
2728: PLUS
2729: ST_TO_ADDR
// SetSkill ( i , skill , bonus ) ;
2730: LD_VAR 0 1
2734: PPUSH
2735: LD_VAR 0 3
2739: PPUSH
2740: LD_VAR 0 5
2744: PPUSH
2745: CALL_OW 237
// ToLua ( displayTreeBonusDetails( & i & , & skill & , & power & ) ) ;
2749: LD_STRING displayTreeBonusDetails(
2751: PUSH
2752: LD_VAR 0 1
2756: STR
2757: PUSH
2758: LD_STRING ,
2760: STR
2761: PUSH
2762: LD_VAR 0 3
2766: STR
2767: PUSH
2768: LD_STRING ,
2770: STR
2771: PUSH
2772: LD_VAR 0 4
2776: STR
2777: PUSH
2778: LD_STRING )
2780: STR
2781: PPUSH
2782: CALL_OW 559
// end ;
2786: GO 2637
2788: POP
2789: POP
// end ; lua := LFC_UNITS_CUSTOM_ICON = { ;
2790: LD_ADDR_VAR 0 6
2794: PUSH
2795: LD_STRING LFC_UNITS_CUSTOM_ICON = {
2797: ST_TO_ADDR
// for i := 1 to Count ( treeVisited ) do
2798: LD_ADDR_VAR 0 1
2802: PUSH
2803: DOUBLE
2804: LD_INT 1
2806: DEC
2807: ST_TO_ADDR
2808: LD_EXP 4
2812: PPUSH
2813: CALL 13842 0 1
2817: PUSH
2818: FOR_TO
2819: IFFALSE 2884
// begin lua := lua & { & treeVisited [ i ] & , 13} ;
2821: LD_ADDR_VAR 0 6
2825: PUSH
2826: LD_VAR 0 6
2830: PUSH
2831: LD_STRING {
2833: STR
2834: PUSH
2835: LD_EXP 4
2839: PUSH
2840: LD_VAR 0 1
2844: ARRAY
2845: STR
2846: PUSH
2847: LD_STRING , 13}
2849: STR
2850: ST_TO_ADDR
// if i < Count ( treeVisited ) then
2851: LD_VAR 0 1
2855: PUSH
2856: LD_EXP 4
2860: PPUSH
2861: CALL 13842 0 1
2865: LESS
2866: IFFALSE 2882
// lua := lua & ,  ;
2868: LD_ADDR_VAR 0 6
2872: PUSH
2873: LD_VAR 0 6
2877: PUSH
2878: LD_STRING , 
2880: STR
2881: ST_TO_ADDR
// end ;
2882: GO 2818
2884: POP
2885: POP
// lua := lua & } ;
2886: LD_ADDR_VAR 0 6
2890: PUSH
2891: LD_VAR 0 6
2895: PUSH
2896: LD_STRING }
2898: STR
2899: ST_TO_ADDR
// if treeVisited then
2900: LD_EXP 4
2904: IFFALSE 2915
// ToLua ( lua ) ;
2906: LD_VAR 0 6
2910: PPUSH
2911: CALL_OW 559
// until false ;
2915: LD_INT 0
2917: IFFALSE 2498
// end ; end_of_file
2919: PPOPN 6
2921: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2922: LD_VAR 0 1
2926: PPUSH
2927: CALL 55335 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2931: LD_VAR 0 1
2935: PPUSH
2936: CALL 8628 0 1
// end ;
2940: PPOPN 1
2942: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2943: LD_VAR 0 1
2947: PPUSH
2948: CALL 55352 0 1
// end ;
2952: PPOPN 1
2954: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2955: LD_VAR 0 1
2959: PPUSH
2960: CALL 9681 0 1
2964: PPOPN 1
2966: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2967: LD_VAR 0 1
2971: PPUSH
2972: LD_VAR 0 2
2976: PPUSH
2977: CALL 55393 0 2
2981: PPOPN 2
2983: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2984: LD_VAR 0 1
2988: PPUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: CALL 9434 0 2
2998: PPOPN 2
3000: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
3001: LD_VAR 0 1
3005: PPUSH
3006: LD_VAR 0 2
3010: PPUSH
3011: LD_VAR 0 3
3015: PPUSH
3016: CALL 9734 0 3
3020: PPOPN 3
3022: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
3023: LD_VAR 0 1
3027: PPUSH
3028: LD_VAR 0 2
3032: PPUSH
3033: LD_VAR 0 3
3037: PPUSH
3038: LD_VAR 0 4
3042: PPUSH
3043: LD_VAR 0 5
3047: PPUSH
3048: CALL 10418 0 5
// end ;
3052: PPOPN 5
3054: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
3055: LD_VAR 0 1
3059: PPUSH
3060: LD_VAR 0 2
3064: PPUSH
3065: LD_VAR 0 3
3069: PPUSH
3070: LD_VAR 0 4
3074: PPUSH
3075: CALL 10521 0 4
3079: PPOPN 4
3081: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
3082: LD_INT 0
3084: PPUSH
3085: PPUSH
// disable ( mpActive ) ;
3086: LD_INT 100
3088: DISABLE_MARKED
// disable ( mpWin ) ;
3089: LD_INT 101
3091: DISABLE_MARKED
// disable ( mpLose ) ;
3092: LD_INT 102
3094: DISABLE_MARKED
// mpGameType := 0 ;
3095: LD_ADDR_EXP 5
3099: PUSH
3100: LD_INT 0
3102: ST_TO_ADDR
// mpGameSettings := [ ] ;
3103: LD_ADDR_EXP 8
3107: PUSH
3108: EMPTY
3109: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3110: LD_ADDR_EXP 6
3114: PUSH
3115: EMPTY
3116: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3117: LD_ADDR_EXP 7
3121: PUSH
3122: EMPTY
3123: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3124: LD_ADDR_EXP 31
3128: PUSH
3129: LD_INT 2
3131: PUSH
3132: LD_INT 2
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3139: LD_ADDR_EXP 14
3143: PUSH
3144: EMPTY
3145: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3146: LD_ADDR_EXP 15
3150: PUSH
3151: EMPTY
3152: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
3153: LD_ADDR_EXP 44
3157: PUSH
3158: EMPTY
3159: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
3160: LD_ADDR_EXP 45
3164: PUSH
3165: EMPTY
3166: ST_TO_ADDR
// mpDepots := [ ] ;
3167: LD_ADDR_EXP 16
3171: PUSH
3172: EMPTY
3173: ST_TO_ADDR
// mpBuildings := [ ] ;
3174: LD_ADDR_EXP 19
3178: PUSH
3179: EMPTY
3180: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3181: LD_ADDR_EXP 20
3185: PUSH
3186: EMPTY
3187: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3188: LD_ADDR_EXP 21
3192: PUSH
3193: EMPTY
3194: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3195: LD_ADDR_EXP 22
3199: PUSH
3200: EMPTY
3201: ST_TO_ADDR
// mpStartingResources := [ ] ;
3202: LD_ADDR_EXP 17
3206: PUSH
3207: EMPTY
3208: ST_TO_ADDR
// mpStartPos := [ ] ;
3209: LD_ADDR_EXP 23
3213: PUSH
3214: EMPTY
3215: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3216: LD_ADDR_EXP 24
3220: PUSH
3221: LD_INT 1
3223: NEG
3224: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3225: LD_ADDR_EXP 25
3229: PUSH
3230: EMPTY
3231: ST_TO_ADDR
// mpApemans := [ ] ;
3232: LD_ADDR_EXP 32
3236: PUSH
3237: EMPTY
3238: ST_TO_ADDR
// mpApemansArea := [ ] ;
3239: LD_ADDR_EXP 33
3243: PUSH
3244: EMPTY
3245: ST_TO_ADDR
// mpRespawn := [ ] ;
3246: LD_ADDR_EXP 35
3250: PUSH
3251: EMPTY
3252: ST_TO_ADDR
// mpKingArea := 0 ;
3253: LD_ADDR_EXP 36
3257: PUSH
3258: LD_INT 0
3260: ST_TO_ADDR
// mpPoints := [ ] ;
3261: LD_ADDR_EXP 37
3265: PUSH
3266: EMPTY
3267: ST_TO_ADDR
// mpVehicles := 0 ;
3268: LD_ADDR_EXP 38
3272: PUSH
3273: LD_INT 0
3275: ST_TO_ADDR
// mpShipments := 0 ;
3276: LD_ADDR_EXP 29
3280: PUSH
3281: LD_INT 0
3283: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3284: LD_ADDR_EXP 42
3288: PUSH
3289: EMPTY
3290: PUSH
3291: EMPTY
3292: PUSH
3293: EMPTY
3294: PUSH
3295: EMPTY
3296: PUSH
3297: EMPTY
3298: PUSH
3299: EMPTY
3300: PUSH
3301: EMPTY
3302: PUSH
3303: EMPTY
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3315: LD_ADDR_EXP 34
3319: PUSH
3320: EMPTY
3321: PUSH
3322: EMPTY
3323: PUSH
3324: EMPTY
3325: PUSH
3326: EMPTY
3327: PUSH
3328: EMPTY
3329: PUSH
3330: EMPTY
3331: PUSH
3332: EMPTY
3333: PUSH
3334: EMPTY
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3346: LD_ADDR_EXP 43
3350: PUSH
3351: LD_INT 0
3353: PUSH
3354: LD_INT 0
3356: PUSH
3357: LD_INT 0
3359: PUSH
3360: LD_INT 0
3362: PUSH
3363: LD_INT 0
3365: PUSH
3366: LD_INT 0
3368: PUSH
3369: LD_INT 0
3371: PUSH
3372: LD_INT 0
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: ST_TO_ADDR
// mpEmissions := 0 ;
3385: LD_ADDR_EXP 39
3389: PUSH
3390: LD_INT 0
3392: ST_TO_ADDR
// mpTeleports := 0 ;
3393: LD_ADDR_EXP 46
3397: PUSH
3398: LD_INT 0
3400: ST_TO_ADDR
// mpArtifacts := 0 ;
3401: LD_ADDR_EXP 47
3405: PUSH
3406: LD_INT 0
3408: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3409: LD_ADDR_EXP 48
3413: PUSH
3414: LD_INT 0
3416: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3417: LD_ADDR_EXP 27
3421: PUSH
3422: LD_INT 3
3424: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3425: LD_ADDR_EXP 26
3429: PUSH
3430: LD_INT 15
3432: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3433: LD_ADDR_EXP 40
3437: PUSH
3438: LD_INT 0
3440: ST_TO_ADDR
// mpGameActive := false ;
3441: LD_ADDR_EXP 41
3445: PUSH
3446: LD_INT 0
3448: ST_TO_ADDR
// mpBlockRespThread := false ;
3449: LD_ADDR_EXP 49
3453: PUSH
3454: LD_INT 0
3456: ST_TO_ADDR
// for i := 1 to 32 do
3457: LD_ADDR_VAR 0 2
3461: PUSH
3462: DOUBLE
3463: LD_INT 1
3465: DEC
3466: ST_TO_ADDR
3467: LD_INT 32
3469: PUSH
3470: FOR_TO
3471: IFFALSE 3498
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3473: LD_ADDR_EXP 8
3477: PUSH
3478: LD_EXP 8
3482: PPUSH
3483: LD_VAR 0 2
3487: PPUSH
3488: LD_INT 0
3490: PPUSH
3491: CALL_OW 1
3495: ST_TO_ADDR
3496: GO 3470
3498: POP
3499: POP
// end ;
3500: LD_VAR 0 1
3504: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3505: LD_INT 0
3507: PPUSH
3508: PPUSH
3509: PPUSH
3510: PPUSH
3511: PPUSH
3512: PPUSH
3513: PPUSH
3514: PPUSH
3515: PPUSH
3516: PPUSH
3517: PPUSH
3518: PPUSH
3519: PPUSH
3520: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
3521: LD_ADDR_VAR 0 14
3525: PUSH
3526: LD_INT 1
3528: PUSH
3529: LD_INT 2
3531: PUSH
3532: LD_INT 3
3534: PUSH
3535: LD_INT 5
3537: PUSH
3538: LD_INT 6
3540: PUSH
3541: LD_INT 7
3543: PUSH
3544: LD_INT 8
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: ST_TO_ADDR
// for i in gameTypes do
3556: LD_ADDR_VAR 0 2
3560: PUSH
3561: LD_VAR 0 14
3565: PUSH
3566: FOR_IN
3567: IFFALSE 3576
// disable ( i ) ;
3569: LD_VAR 0 2
3573: DISABLE_MARKED
3574: GO 3566
3576: POP
3577: POP
// if Multiplayer then
3578: LD_OWVAR 4
3582: IFFALSE 3766
// begin mpGameType := mp_game_type ;
3584: LD_ADDR_EXP 5
3588: PUSH
3589: LD_OWVAR 6
3593: ST_TO_ADDR
// your_side := mp_player_side ;
3594: LD_ADDR_OWVAR 2
3598: PUSH
3599: LD_OWVAR 7
3603: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3604: LD_ADDR_EXP 9
3608: PUSH
3609: LD_OWVAR 17
3613: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3614: LD_ADDR_EXP 10
3618: PUSH
3619: LD_OWVAR 15
3623: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3624: LD_ADDR_EXP 11
3628: PUSH
3629: LD_OWVAR 16
3633: ST_TO_ADDR
// mpTeams := mp_teams ;
3634: LD_ADDR_EXP 12
3638: PUSH
3639: LD_OWVAR 12
3643: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3644: LD_ADDR_VAR 0 2
3648: PUSH
3649: DOUBLE
3650: LD_INT 1
3652: DEC
3653: ST_TO_ADDR
3654: LD_EXP 6
3658: PPUSH
3659: CALL 13842 0 1
3663: PUSH
3664: FOR_TO
3665: IFFALSE 3741
// begin setting := mpGameSettingsKeys [ i ] ;
3667: LD_ADDR_VAR 0 12
3671: PUSH
3672: LD_EXP 6
3676: PUSH
3677: LD_VAR 0 2
3681: ARRAY
3682: ST_TO_ADDR
// if setting then
3683: LD_VAR 0 12
3687: IFFALSE 3739
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3689: LD_ADDR_EXP 8
3693: PUSH
3694: LD_EXP 8
3698: PPUSH
3699: LD_VAR 0 2
3703: PPUSH
3704: LD_EXP 7
3708: PUSH
3709: LD_VAR 0 2
3713: ARRAY
3714: PUSH
3715: LD_VAR 0 2
3719: PUSH
3720: LD_INT 1
3722: MINUS
3723: PPUSH
3724: CALL_OW 426
3728: PUSH
3729: LD_INT 1
3731: PLUS
3732: ARRAY
3733: PPUSH
3734: CALL_OW 1
3738: ST_TO_ADDR
// end ;
3739: GO 3664
3741: POP
3742: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3743: LD_ADDR_EXP 13
3747: PUSH
3748: LD_EXP 10
3752: PUSH
3753: LD_INT 0
3755: PUSH
3756: EMPTY
3757: LIST
3758: DIFF
3759: PUSH
3760: LD_INT 1
3762: GREATER
3763: ST_TO_ADDR
// end else
3764: GO 3766
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3766: LD_EXP 5
3770: PPUSH
3771: CALL 830 0 1
// if Count ( mpMarkedAreas ) then
3775: LD_EXP 20
3779: PPUSH
3780: CALL 13842 0 1
3784: IFFALSE 3815
// begin for i in mpMarkedAreas do
3786: LD_ADDR_VAR 0 2
3790: PUSH
3791: LD_EXP 20
3795: PUSH
3796: FOR_IN
3797: IFFALSE 3813
// SetAreaMapShow ( i , 0 ) ;
3799: LD_VAR 0 2
3803: PPUSH
3804: LD_INT 0
3806: PPUSH
3807: CALL_OW 424
3811: GO 3796
3813: POP
3814: POP
// end ; for i := 1 to 8 do
3815: LD_ADDR_VAR 0 2
3819: PUSH
3820: DOUBLE
3821: LD_INT 1
3823: DEC
3824: ST_TO_ADDR
3825: LD_INT 8
3827: PUSH
3828: FOR_TO
3829: IFFALSE 5288
// begin if not mpSidePositions [ i ] then
3831: LD_EXP 9
3835: PUSH
3836: LD_VAR 0 2
3840: ARRAY
3841: NOT
3842: IFFALSE 3846
// continue ;
3844: GO 3828
// side := i ;
3846: LD_ADDR_VAR 0 7
3850: PUSH
3851: LD_VAR 0 2
3855: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3856: LD_ADDR_VAR 0 9
3860: PUSH
3861: LD_EXP 11
3865: PUSH
3866: LD_VAR 0 2
3870: ARRAY
3871: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3872: LD_ADDR_VAR 0 8
3876: PUSH
3877: LD_EXP 9
3881: PUSH
3882: LD_VAR 0 2
3886: ARRAY
3887: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3888: LD_EXP 14
3892: PPUSH
3893: CALL 13842 0 1
3897: IFFALSE 3974
// begin for j in mpOilDeposits [ pos ] do
3899: LD_ADDR_VAR 0 3
3903: PUSH
3904: LD_EXP 14
3908: PUSH
3909: LD_VAR 0 8
3913: ARRAY
3914: PUSH
3915: FOR_IN
3916: IFFALSE 3972
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3918: LD_VAR 0 3
3922: PUSH
3923: LD_INT 1
3925: ARRAY
3926: PPUSH
3927: LD_VAR 0 3
3931: PUSH
3932: LD_INT 2
3934: ARRAY
3935: PPUSH
3936: LD_INT 2
3938: PPUSH
3939: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3943: LD_VAR 0 3
3947: PUSH
3948: LD_INT 1
3950: ARRAY
3951: PPUSH
3952: LD_VAR 0 3
3956: PUSH
3957: LD_INT 2
3959: ARRAY
3960: PPUSH
3961: LD_VAR 0 7
3965: PPUSH
3966: CALL_OW 441
// end ;
3970: GO 3915
3972: POP
3973: POP
// end ; if Count ( mpSibDeposits ) then
3974: LD_EXP 15
3978: PPUSH
3979: CALL 13842 0 1
3983: IFFALSE 4060
// begin for j in mpSibDeposits [ pos ] do
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: LD_EXP 15
3994: PUSH
3995: LD_VAR 0 8
3999: ARRAY
4000: PUSH
4001: FOR_IN
4002: IFFALSE 4058
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
4004: LD_VAR 0 3
4008: PUSH
4009: LD_INT 1
4011: ARRAY
4012: PPUSH
4013: LD_VAR 0 3
4017: PUSH
4018: LD_INT 2
4020: ARRAY
4021: PPUSH
4022: LD_INT 3
4024: PPUSH
4025: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4029: LD_VAR 0 3
4033: PUSH
4034: LD_INT 1
4036: ARRAY
4037: PPUSH
4038: LD_VAR 0 3
4042: PUSH
4043: LD_INT 2
4045: ARRAY
4046: PPUSH
4047: LD_VAR 0 7
4051: PPUSH
4052: CALL_OW 441
// end ;
4056: GO 4001
4058: POP
4059: POP
// end ; InitBc ;
4060: CALL_OW 21
// InitUc ;
4064: CALL_OW 18
// uc_side := side ;
4068: LD_ADDR_OWVAR 20
4072: PUSH
4073: LD_VAR 0 7
4077: ST_TO_ADDR
// uc_nation := nation ;
4078: LD_ADDR_OWVAR 21
4082: PUSH
4083: LD_VAR 0 9
4087: ST_TO_ADDR
// if mpBattleFlag > - 1 then
4088: LD_EXP 24
4092: PUSH
4093: LD_INT 1
4095: NEG
4096: GREATER
4097: IFFALSE 4256
// begin x := mpStartPos [ pos ] [ 1 ] ;
4099: LD_ADDR_VAR 0 5
4103: PUSH
4104: LD_EXP 23
4108: PUSH
4109: LD_VAR 0 8
4113: ARRAY
4114: PUSH
4115: LD_INT 1
4117: ARRAY
4118: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4119: LD_ADDR_VAR 0 6
4123: PUSH
4124: LD_EXP 23
4128: PUSH
4129: LD_VAR 0 8
4133: ARRAY
4134: PUSH
4135: LD_INT 2
4137: ARRAY
4138: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4139: LD_VAR 0 5
4143: PPUSH
4144: LD_VAR 0 6
4148: PPUSH
4149: LD_INT 12
4151: PPUSH
4152: LD_INT 2
4154: PPUSH
4155: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4159: LD_ADDR_EXP 25
4163: PUSH
4164: LD_EXP 25
4168: PPUSH
4169: LD_VAR 0 7
4173: PPUSH
4174: LD_VAR 0 7
4178: PPUSH
4179: LD_VAR 0 5
4183: PPUSH
4184: LD_VAR 0 6
4188: PPUSH
4189: LD_INT 1
4191: PUSH
4192: LD_INT 100
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: PUSH
4199: LD_INT 2
4201: PUSH
4202: LD_INT 70
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 3
4211: PUSH
4212: LD_INT 40
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 10
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: LD_INT 20
4231: PUSH
4232: LD_INT 100
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: PPUSH
4246: CALL_OW 418
4250: PPUSH
4251: CALL_OW 1
4255: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
4256: LD_EXP 16
4260: PPUSH
4261: CALL 13842 0 1
4265: IFFALSE 4464
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
4267: LD_EXP 5
4271: PUSH
4272: LD_INT 2
4274: PUSH
4275: LD_INT 8
4277: PUSH
4278: LD_INT 6
4280: PUSH
4281: LD_INT 7
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: IN
4290: IFFALSE 4310
// begin bc_level := 10 ;
4292: LD_ADDR_OWVAR 43
4296: PUSH
4297: LD_INT 10
4299: ST_TO_ADDR
// bc_type := b_warehouse ;
4300: LD_ADDR_OWVAR 42
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// end else
4308: GO 4326
// begin bc_level := 0 ;
4310: LD_ADDR_OWVAR 43
4314: PUSH
4315: LD_INT 0
4317: ST_TO_ADDR
// bc_type := b_depot ;
4318: LD_ADDR_OWVAR 42
4322: PUSH
4323: LD_INT 0
4325: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4326: LD_ADDR_VAR 0 4
4330: PUSH
4331: LD_EXP 16
4335: PUSH
4336: LD_VAR 0 8
4340: ARRAY
4341: PUSH
4342: LD_INT 1
4344: ARRAY
4345: PPUSH
4346: LD_EXP 16
4350: PUSH
4351: LD_VAR 0 8
4355: ARRAY
4356: PUSH
4357: LD_INT 2
4359: ARRAY
4360: PPUSH
4361: LD_EXP 16
4365: PUSH
4366: LD_VAR 0 8
4370: ARRAY
4371: PUSH
4372: LD_INT 3
4374: ARRAY
4375: PPUSH
4376: CALL_OW 47
4380: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4381: LD_VAR 0 4
4385: PPUSH
4386: LD_STRING @
4388: PUSH
4389: LD_VAR 0 7
4393: STR
4394: PPUSH
4395: CALL_OW 500
// if Count ( mpStartingResources ) then
4399: LD_EXP 17
4403: PPUSH
4404: CALL 13842 0 1
4408: IFFALSE 4462
// begin for j := 1 to mpStartingResources do
4410: LD_ADDR_VAR 0 3
4414: PUSH
4415: DOUBLE
4416: LD_INT 1
4418: DEC
4419: ST_TO_ADDR
4420: LD_EXP 17
4424: PUSH
4425: FOR_TO
4426: IFFALSE 4460
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4428: LD_VAR 0 4
4432: PPUSH
4433: CALL_OW 274
4437: PPUSH
4438: LD_VAR 0 3
4442: PPUSH
4443: LD_EXP 17
4447: PUSH
4448: LD_VAR 0 3
4452: ARRAY
4453: PPUSH
4454: CALL_OW 277
4458: GO 4425
4460: POP
4461: POP
// end ; end else
4462: GO 4671
// if Count ( mpStartingResources ) then
4464: LD_EXP 17
4468: PPUSH
4469: CALL 13842 0 1
4473: IFFALSE 4671
// begin x := mpStartPos [ pos ] [ 1 ] ;
4475: LD_ADDR_VAR 0 5
4479: PUSH
4480: LD_EXP 23
4484: PUSH
4485: LD_VAR 0 8
4489: ARRAY
4490: PUSH
4491: LD_INT 1
4493: ARRAY
4494: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4495: LD_ADDR_VAR 0 6
4499: PUSH
4500: LD_EXP 23
4504: PUSH
4505: LD_VAR 0 8
4509: ARRAY
4510: PUSH
4511: LD_INT 2
4513: ARRAY
4514: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4515: LD_ADDR_VAR 0 3
4519: PUSH
4520: DOUBLE
4521: LD_INT 1
4523: DEC
4524: ST_TO_ADDR
4525: LD_EXP 17
4529: PUSH
4530: FOR_TO
4531: IFFALSE 4669
// begin resources := mpStartingResources [ j ] ;
4533: LD_ADDR_VAR 0 13
4537: PUSH
4538: LD_EXP 17
4542: PUSH
4543: LD_VAR 0 3
4547: ARRAY
4548: ST_TO_ADDR
// if resources = 0 then
4549: LD_VAR 0 13
4553: PUSH
4554: LD_INT 0
4556: EQUAL
4557: IFFALSE 4561
// continue ;
4559: GO 4530
// repeat if resources >= 50 then
4561: LD_VAR 0 13
4565: PUSH
4566: LD_INT 50
4568: GREATEREQUAL
4569: IFFALSE 4615
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4571: LD_VAR 0 3
4575: PPUSH
4576: LD_INT 5
4578: PPUSH
4579: LD_VAR 0 5
4583: PPUSH
4584: LD_VAR 0 6
4588: PPUSH
4589: LD_INT 6
4591: PPUSH
4592: LD_INT 0
4594: PPUSH
4595: CALL_OW 60
// resources := resources - 50 ;
4599: LD_ADDR_VAR 0 13
4603: PUSH
4604: LD_VAR 0 13
4608: PUSH
4609: LD_INT 50
4611: MINUS
4612: ST_TO_ADDR
// end else
4613: GO 4657
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4615: LD_VAR 0 3
4619: PPUSH
4620: LD_VAR 0 13
4624: PUSH
4625: LD_INT 10
4627: DIV
4628: PPUSH
4629: LD_VAR 0 5
4633: PPUSH
4634: LD_VAR 0 6
4638: PPUSH
4639: LD_INT 6
4641: PPUSH
4642: LD_INT 0
4644: PPUSH
4645: CALL_OW 60
// resources := 0 ;
4649: LD_ADDR_VAR 0 13
4653: PUSH
4654: LD_INT 0
4656: ST_TO_ADDR
// end ; until resources <= 0 ;
4657: LD_VAR 0 13
4661: PUSH
4662: LD_INT 0
4664: LESSEQUAL
4665: IFFALSE 4561
// end ;
4667: GO 4530
4669: POP
4670: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
4671: LD_EXP 19
4675: PPUSH
4676: CALL 13842 0 1
4680: IFFALSE 4700
4682: PUSH
4683: LD_EXP 5
4687: PUSH
4688: LD_INT 2
4690: PUSH
4691: LD_INT 8
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: IN
4698: NOT
4699: AND
4700: IFFALSE 4778
// begin for j in mpBuildings [ pos ] do
4702: LD_ADDR_VAR 0 3
4706: PUSH
4707: LD_EXP 19
4711: PUSH
4712: LD_VAR 0 8
4716: ARRAY
4717: PUSH
4718: FOR_IN
4719: IFFALSE 4776
// begin bc_level := 0 ;
4721: LD_ADDR_OWVAR 43
4725: PUSH
4726: LD_INT 0
4728: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4729: LD_ADDR_OWVAR 42
4733: PUSH
4734: LD_VAR 0 3
4738: PUSH
4739: LD_INT 1
4741: ARRAY
4742: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4743: LD_VAR 0 3
4747: PUSH
4748: LD_INT 2
4750: ARRAY
4751: PPUSH
4752: LD_VAR 0 3
4756: PUSH
4757: LD_INT 3
4759: ARRAY
4760: PPUSH
4761: LD_VAR 0 3
4765: PUSH
4766: LD_INT 4
4768: ARRAY
4769: PPUSH
4770: CALL_OW 47
// end ;
4774: GO 4718
4776: POP
4777: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4778: LD_EXP 28
4782: IFFALSE 4802
4784: PUSH
4785: LD_INT 20
4787: PPUSH
4788: LD_VAR 0 7
4792: PPUSH
4793: CALL_OW 321
4797: PUSH
4798: LD_INT 1
4800: EQUAL
4801: AND
4802: IFFALSE 4819
// SetTech ( tech_SibDet , side , state_researched ) ;
4804: LD_INT 20
4806: PPUSH
4807: LD_VAR 0 7
4811: PPUSH
4812: LD_INT 2
4814: PPUSH
4815: CALL_OW 322
// if not mpArtifacts then
4819: LD_EXP 47
4823: NOT
4824: IFFALSE 4841
// SetTech ( tech_artifact , side , state_disabled ) ;
4826: LD_INT 24
4828: PPUSH
4829: LD_VAR 0 7
4833: PPUSH
4834: LD_INT 0
4836: PPUSH
4837: CALL_OW 322
// if mpSibBomb = 1 then
4841: LD_EXP 30
4845: PUSH
4846: LD_INT 1
4848: EQUAL
4849: IFFALSE 4868
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4851: LD_INT 25
4853: PPUSH
4854: LD_VAR 0 7
4858: PPUSH
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 322
// end else
4866: GO 4883
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4868: LD_INT 25
4870: PPUSH
4871: LD_VAR 0 7
4875: PPUSH
4876: LD_INT 0
4878: PPUSH
4879: CALL_OW 322
// end ; if mpVehicles then
4883: LD_EXP 38
4887: IFFALSE 4986
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4889: LD_ADDR_VAR 0 3
4893: PUSH
4894: LD_VAR 0 7
4898: PPUSH
4899: LD_VAR 0 9
4903: PPUSH
4904: LD_EXP 38
4908: PPUSH
4909: CALL 6245 0 3
4913: PUSH
4914: FOR_IN
4915: IFFALSE 4984
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4917: LD_VAR 0 3
4921: PPUSH
4922: LD_INT 0
4924: PPUSH
4925: LD_INT 5
4927: PPUSH
4928: CALL_OW 12
4932: PPUSH
4933: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4937: LD_VAR 0 3
4941: PPUSH
4942: LD_EXP 23
4946: PUSH
4947: LD_VAR 0 8
4951: ARRAY
4952: PUSH
4953: LD_INT 1
4955: ARRAY
4956: PPUSH
4957: LD_EXP 23
4961: PUSH
4962: LD_VAR 0 8
4966: ARRAY
4967: PUSH
4968: LD_INT 2
4970: ARRAY
4971: PPUSH
4972: LD_INT 12
4974: PPUSH
4975: LD_INT 0
4977: PPUSH
4978: CALL_OW 50
// end ;
4982: GO 4914
4984: POP
4985: POP
// end ; uc_nation := nation ;
4986: LD_ADDR_OWVAR 21
4990: PUSH
4991: LD_VAR 0 9
4995: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4996: LD_EXP 5
5000: PUSH
5001: LD_INT 6
5003: PUSH
5004: LD_INT 7
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: IN
5011: IFFALSE 5036
5013: PUSH
5014: LD_EXP 9
5018: PUSH
5019: LD_VAR 0 2
5023: ARRAY
5024: PUSH
5025: LD_INT 1
5027: PUSH
5028: LD_INT 2
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: IN
5035: AND
5036: IFFALSE 5084
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
5038: LD_ADDR_VAR 0 11
5042: PUSH
5043: LD_VAR 0 7
5047: PPUSH
5048: LD_VAR 0 9
5052: PPUSH
5053: LD_EXP 26
5057: PUSH
5058: LD_EXP 26
5062: PUSH
5063: LD_INT 2
5065: DIV
5066: PLUS
5067: PPUSH
5068: LD_EXP 27
5072: PUSH
5073: LD_INT 1
5075: PLUS
5076: PPUSH
5077: CALL 5700 0 4
5081: ST_TO_ADDR
5082: GO 5114
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
5084: LD_ADDR_VAR 0 11
5088: PUSH
5089: LD_VAR 0 7
5093: PPUSH
5094: LD_VAR 0 9
5098: PPUSH
5099: LD_EXP 26
5103: PPUSH
5104: LD_EXP 27
5108: PPUSH
5109: CALL 5700 0 4
5113: ST_TO_ADDR
// for j in team do
5114: LD_ADDR_VAR 0 3
5118: PUSH
5119: LD_VAR 0 11
5123: PUSH
5124: FOR_IN
5125: IFFALSE 5174
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5127: LD_VAR 0 3
5131: PPUSH
5132: LD_EXP 23
5136: PUSH
5137: LD_VAR 0 8
5141: ARRAY
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: LD_EXP 23
5151: PUSH
5152: LD_VAR 0 8
5156: ARRAY
5157: PUSH
5158: LD_INT 2
5160: ARRAY
5161: PPUSH
5162: LD_INT 12
5164: PPUSH
5165: LD_INT 0
5167: PPUSH
5168: CALL_OW 50
5172: GO 5124
5174: POP
5175: POP
// if mpApemans then
5176: LD_EXP 32
5180: IFFALSE 5286
// begin for j := 1 to mpApemans do
5182: LD_ADDR_VAR 0 3
5186: PUSH
5187: DOUBLE
5188: LD_INT 1
5190: DEC
5191: ST_TO_ADDR
5192: LD_EXP 32
5196: PUSH
5197: FOR_TO
5198: IFFALSE 5284
// begin PrepareApeman ( - 5 ) ;
5200: LD_INT 5
5202: NEG
5203: PPUSH
5204: CALL 45945 0 1
// ape := CreateHuman ;
5208: LD_ADDR_VAR 0 10
5212: PUSH
5213: CALL_OW 44
5217: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
5218: LD_ADDR_EXP 34
5222: PUSH
5223: LD_EXP 34
5227: PPUSH
5228: LD_VAR 0 8
5232: PPUSH
5233: LD_EXP 34
5237: PUSH
5238: LD_VAR 0 8
5242: ARRAY
5243: PPUSH
5244: LD_VAR 0 10
5248: PPUSH
5249: CALL 49818 0 2
5253: PPUSH
5254: CALL_OW 1
5258: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
5259: LD_VAR 0 10
5263: PPUSH
5264: LD_EXP 33
5268: PUSH
5269: LD_VAR 0 8
5273: ARRAY
5274: PPUSH
5275: LD_INT 0
5277: PPUSH
5278: CALL_OW 49
// end ;
5282: GO 5197
5284: POP
5285: POP
// end ; end ;
5286: GO 3828
5288: POP
5289: POP
// if not mpTeamGame then
5290: LD_EXP 13
5294: NOT
5295: IFFALSE 5393
// begin for i := 1 to 8 do
5297: LD_ADDR_VAR 0 2
5301: PUSH
5302: DOUBLE
5303: LD_INT 1
5305: DEC
5306: ST_TO_ADDR
5307: LD_INT 8
5309: PUSH
5310: FOR_TO
5311: IFFALSE 5389
// for j := 1 to 8 do
5313: LD_ADDR_VAR 0 3
5317: PUSH
5318: DOUBLE
5319: LD_INT 1
5321: DEC
5322: ST_TO_ADDR
5323: LD_INT 8
5325: PUSH
5326: FOR_TO
5327: IFFALSE 5385
// if i <> j then
5329: LD_VAR 0 2
5333: PUSH
5334: LD_VAR 0 3
5338: NONEQUAL
5339: IFFALSE 5363
// SetAttitude ( i , j , att_neutral , true ) else
5341: LD_VAR 0 2
5345: PPUSH
5346: LD_VAR 0 3
5350: PPUSH
5351: LD_INT 0
5353: PPUSH
5354: LD_INT 1
5356: PPUSH
5357: CALL_OW 80
5361: GO 5383
// SetAttitude ( i , j , att_friend , true ) ;
5363: LD_VAR 0 2
5367: PPUSH
5368: LD_VAR 0 3
5372: PPUSH
5373: LD_INT 1
5375: PPUSH
5376: LD_INT 1
5378: PPUSH
5379: CALL_OW 80
5383: GO 5326
5385: POP
5386: POP
5387: GO 5310
5389: POP
5390: POP
// end else
5391: GO 5568
// begin if mpSharedVision then
5393: LD_EXP 18
5397: IFFALSE 5462
// begin for i in mpTeams do
5399: LD_ADDR_VAR 0 2
5403: PUSH
5404: LD_EXP 12
5408: PUSH
5409: FOR_IN
5410: IFFALSE 5460
// for j := 2 to i do
5412: LD_ADDR_VAR 0 3
5416: PUSH
5417: DOUBLE
5418: LD_INT 2
5420: DEC
5421: ST_TO_ADDR
5422: LD_VAR 0 2
5426: PUSH
5427: FOR_TO
5428: IFFALSE 5456
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5430: LD_VAR 0 2
5434: PUSH
5435: LD_VAR 0 3
5439: ARRAY
5440: PPUSH
5441: LD_VAR 0 2
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: CALL_OW 343
5454: GO 5427
5456: POP
5457: POP
5458: GO 5409
5460: POP
5461: POP
// end ; for i := 1 to 8 do
5462: LD_ADDR_VAR 0 2
5466: PUSH
5467: DOUBLE
5468: LD_INT 1
5470: DEC
5471: ST_TO_ADDR
5472: LD_INT 8
5474: PUSH
5475: FOR_TO
5476: IFFALSE 5566
// for j := 1 to 8 do
5478: LD_ADDR_VAR 0 3
5482: PUSH
5483: DOUBLE
5484: LD_INT 1
5486: DEC
5487: ST_TO_ADDR
5488: LD_INT 8
5490: PUSH
5491: FOR_TO
5492: IFFALSE 5562
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5494: LD_EXP 10
5498: PUSH
5499: LD_VAR 0 2
5503: ARRAY
5504: PUSH
5505: LD_EXP 10
5509: PUSH
5510: LD_VAR 0 3
5514: ARRAY
5515: EQUAL
5516: IFFALSE 5540
// SetAttitude ( i , j , att_friend , true ) else
5518: LD_VAR 0 2
5522: PPUSH
5523: LD_VAR 0 3
5527: PPUSH
5528: LD_INT 1
5530: PPUSH
5531: LD_INT 1
5533: PPUSH
5534: CALL_OW 80
5538: GO 5560
// SetAttitude ( i , j , att_enemy , true ) ;
5540: LD_VAR 0 2
5544: PPUSH
5545: LD_VAR 0 3
5549: PPUSH
5550: LD_INT 2
5552: PPUSH
5553: LD_INT 1
5555: PPUSH
5556: CALL_OW 80
5560: GO 5491
5562: POP
5563: POP
5564: GO 5475
5566: POP
5567: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5568: LD_ADDR_OWVAR 71
5572: PUSH
5573: LD_EXP 11
5577: PUSH
5578: LD_OWVAR 2
5582: ARRAY
5583: ST_TO_ADDR
// if IAmSpec then
5584: CALL_OW 531
5588: IFFALSE 5629
// begin FogOff ( true ) ;
5590: LD_INT 1
5592: PPUSH
5593: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5597: LD_EXP 31
5601: PUSH
5602: LD_INT 1
5604: ARRAY
5605: PUSH
5606: LD_INT 2
5608: DIV
5609: PPUSH
5610: LD_EXP 31
5614: PUSH
5615: LD_INT 2
5617: ARRAY
5618: PUSH
5619: LD_INT 2
5621: DIV
5622: PPUSH
5623: CALL_OW 86
// end else
5627: GO 5675
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5629: LD_EXP 23
5633: PUSH
5634: LD_EXP 9
5638: PUSH
5639: LD_OWVAR 2
5643: ARRAY
5644: ARRAY
5645: PUSH
5646: LD_INT 1
5648: ARRAY
5649: PPUSH
5650: LD_EXP 23
5654: PUSH
5655: LD_EXP 9
5659: PUSH
5660: LD_OWVAR 2
5664: ARRAY
5665: ARRAY
5666: PUSH
5667: LD_INT 2
5669: ARRAY
5670: PPUSH
5671: CALL_OW 86
// end ; BeginBuildUp ;
5675: CALL 6778 0 0
// enable ( mpActive ) ;
5679: LD_INT 100
5681: ENABLE_MARKED
// enable ( mpGameType ) ;
5682: LD_EXP 5
5686: ENABLE_MARKED
// mpGameActive := true ;
5687: LD_ADDR_EXP 41
5691: PUSH
5692: LD_INT 1
5694: ST_TO_ADDR
// end ;
5695: LD_VAR 0 1
5699: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5700: LD_INT 0
5702: PPUSH
5703: PPUSH
5704: PPUSH
5705: PPUSH
5706: PPUSH
// result := [ ] ;
5707: LD_ADDR_VAR 0 5
5711: PUSH
5712: EMPTY
5713: ST_TO_ADDR
// class := class_soldier ;
5714: LD_ADDR_VAR 0 8
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// uc_side := side ;
5722: LD_ADDR_OWVAR 20
5726: PUSH
5727: LD_VAR 0 1
5731: ST_TO_ADDR
// uc_nation := nation ;
5732: LD_ADDR_OWVAR 21
5736: PUSH
5737: LD_VAR 0 2
5741: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5742: LD_ADDR_OWVAR 26
5746: PUSH
5747: LD_OWVAR 19
5751: PUSH
5752: LD_VAR 0 1
5756: ARRAY
5757: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5758: LD_INT 1
5760: PPUSH
5761: LD_INT 2
5763: PPUSH
5764: CALL_OW 12
5768: PPUSH
5769: LD_VAR 0 8
5773: PPUSH
5774: LD_VAR 0 4
5778: PUSH
5779: LD_INT 2
5781: PLUS
5782: PPUSH
5783: CALL_OW 380
// hc_importance := 105 ;
5787: LD_ADDR_OWVAR 32
5791: PUSH
5792: LD_INT 105
5794: ST_TO_ADDR
// if Multiplayer then
5795: LD_OWVAR 4
5799: IFFALSE 5839
// begin hc_gallery := MULTIAVATARS ;
5801: LD_ADDR_OWVAR 33
5805: PUSH
5806: LD_STRING MULTIAVATARS
5808: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5809: LD_ADDR_OWVAR 34
5813: PUSH
5814: LD_VAR 0 1
5818: PPUSH
5819: CALL_OW 525
5823: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5824: LD_ADDR_OWVAR 27
5828: PUSH
5829: LD_VAR 0 1
5833: PPUSH
5834: CALL_OW 526
5838: ST_TO_ADDR
// end ; commander := CreateHuman ;
5839: LD_ADDR_VAR 0 9
5843: PUSH
5844: CALL_OW 44
5848: ST_TO_ADDR
// result := Join ( result , commander ) ;
5849: LD_ADDR_VAR 0 5
5853: PUSH
5854: LD_VAR 0 5
5858: PPUSH
5859: LD_VAR 0 9
5863: PPUSH
5864: CALL 49818 0 2
5868: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5869: LD_ADDR_EXP 43
5873: PUSH
5874: LD_EXP 43
5878: PPUSH
5879: LD_VAR 0 1
5883: PPUSH
5884: LD_VAR 0 9
5888: PPUSH
5889: CALL_OW 1
5893: ST_TO_ADDR
// if mpTeamPreset then
5894: LD_LOC 1
5898: IFFALSE 5994
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5900: LD_LOC 1
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PPUSH
5909: LD_VAR 0 5
5913: PUSH
5914: LD_VAR 0 5
5918: ARRAY
5919: PPUSH
5920: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5924: LD_VAR 0 5
5928: PUSH
5929: LD_VAR 0 5
5933: ARRAY
5934: PPUSH
5935: LD_INT 1
5937: PPUSH
5938: LD_LOC 1
5942: PUSH
5943: LD_INT 1
5945: ARRAY
5946: PPUSH
5947: LD_INT 1
5949: PPUSH
5950: CALL_OW 260
5954: PPUSH
5955: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5959: LD_VAR 0 5
5963: PUSH
5964: LD_VAR 0 5
5968: ARRAY
5969: PPUSH
5970: LD_INT 2
5972: PPUSH
5973: LD_LOC 1
5977: PUSH
5978: LD_INT 1
5980: ARRAY
5981: PPUSH
5982: LD_INT 2
5984: PPUSH
5985: CALL_OW 260
5989: PPUSH
5990: CALL_OW 239
// end ; InitHc_All ( ) ;
5994: CALL_OW 584
// class := 2 ;
5998: LD_ADDR_VAR 0 8
6002: PUSH
6003: LD_INT 2
6005: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
6006: LD_ADDR_VAR 0 6
6010: PUSH
6011: DOUBLE
6012: LD_INT 1
6014: DEC
6015: ST_TO_ADDR
6016: LD_VAR 0 3
6020: PUSH
6021: LD_INT 1
6023: MINUS
6024: PUSH
6025: FOR_TO
6026: IFFALSE 6221
// begin PrepareHuman ( false , class , skill ) ;
6028: LD_INT 0
6030: PPUSH
6031: LD_VAR 0 8
6035: PPUSH
6036: LD_VAR 0 4
6040: PPUSH
6041: CALL_OW 380
// un := CreateHuman ;
6045: LD_ADDR_VAR 0 7
6049: PUSH
6050: CALL_OW 44
6054: ST_TO_ADDR
// result := Join ( result , un ) ;
6055: LD_ADDR_VAR 0 5
6059: PUSH
6060: LD_VAR 0 5
6064: PPUSH
6065: LD_VAR 0 7
6069: PPUSH
6070: CALL 49818 0 2
6074: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
6075: LD_LOC 1
6079: PPUSH
6080: CALL 13842 0 1
6084: PUSH
6085: LD_VAR 0 3
6089: GREATEREQUAL
6090: IFFALSE 6186
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
6092: LD_LOC 1
6096: PUSH
6097: LD_VAR 0 6
6101: PUSH
6102: LD_INT 1
6104: PLUS
6105: ARRAY
6106: PPUSH
6107: LD_VAR 0 7
6111: PPUSH
6112: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
6116: LD_VAR 0 7
6120: PPUSH
6121: LD_INT 1
6123: PPUSH
6124: LD_LOC 1
6128: PUSH
6129: LD_VAR 0 6
6133: PUSH
6134: LD_INT 1
6136: PLUS
6137: ARRAY
6138: PPUSH
6139: LD_INT 1
6141: PPUSH
6142: CALL_OW 260
6146: PPUSH
6147: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
6151: LD_VAR 0 7
6155: PPUSH
6156: LD_INT 2
6158: PPUSH
6159: LD_LOC 1
6163: PUSH
6164: LD_VAR 0 6
6168: PUSH
6169: LD_INT 1
6171: PLUS
6172: ARRAY
6173: PPUSH
6174: LD_INT 2
6176: PPUSH
6177: CALL_OW 260
6181: PPUSH
6182: CALL_OW 239
// end ; class := Inc ( class ) ;
6186: LD_ADDR_VAR 0 8
6190: PUSH
6191: LD_VAR 0 8
6195: PPUSH
6196: CALL 51191 0 1
6200: ST_TO_ADDR
// if class = 5 then
6201: LD_VAR 0 8
6205: PUSH
6206: LD_INT 5
6208: EQUAL
6209: IFFALSE 6219
// class := 1 ;
6211: LD_ADDR_VAR 0 8
6215: PUSH
6216: LD_INT 1
6218: ST_TO_ADDR
// end ;
6219: GO 6025
6221: POP
6222: POP
// if not mpTeamPreset then
6223: LD_LOC 1
6227: NOT
6228: IFFALSE 6240
// mpTeamPreset := result ;
6230: LD_ADDR_LOC 1
6234: PUSH
6235: LD_VAR 0 5
6239: ST_TO_ADDR
// end ;
6240: LD_VAR 0 5
6244: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
6245: LD_INT 0
6247: PPUSH
6248: PPUSH
// result := [ ] ;
6249: LD_ADDR_VAR 0 4
6253: PUSH
6254: EMPTY
6255: ST_TO_ADDR
// if not vehicles then
6256: LD_VAR 0 3
6260: NOT
6261: IFFALSE 6265
// exit ;
6263: GO 6479
// for i := 1 to vehicles [ nation ] do
6265: LD_ADDR_VAR 0 5
6269: PUSH
6270: DOUBLE
6271: LD_INT 1
6273: DEC
6274: ST_TO_ADDR
6275: LD_VAR 0 3
6279: PUSH
6280: LD_VAR 0 2
6284: ARRAY
6285: PUSH
6286: FOR_TO
6287: IFFALSE 6477
// begin uc_side := side ;
6289: LD_ADDR_OWVAR 20
6293: PUSH
6294: LD_VAR 0 1
6298: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6299: LD_VAR 0 3
6303: PUSH
6304: LD_VAR 0 2
6308: ARRAY
6309: PUSH
6310: LD_VAR 0 5
6314: ARRAY
6315: PPUSH
6316: CALL 13842 0 1
6320: PUSH
6321: LD_INT 4
6323: GREATER
6324: IFFALSE 6354
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6326: LD_ADDR_OWVAR 21
6330: PUSH
6331: LD_VAR 0 3
6335: PUSH
6336: LD_VAR 0 2
6340: ARRAY
6341: PUSH
6342: LD_VAR 0 5
6346: ARRAY
6347: PUSH
6348: LD_INT 5
6350: ARRAY
6351: ST_TO_ADDR
6352: GO 6364
// uc_nation := nation ;
6354: LD_ADDR_OWVAR 21
6358: PUSH
6359: LD_VAR 0 2
6363: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6364: LD_VAR 0 3
6368: PUSH
6369: LD_VAR 0 2
6373: ARRAY
6374: PUSH
6375: LD_VAR 0 5
6379: ARRAY
6380: PUSH
6381: LD_INT 1
6383: ARRAY
6384: PPUSH
6385: LD_VAR 0 3
6389: PUSH
6390: LD_VAR 0 2
6394: ARRAY
6395: PUSH
6396: LD_VAR 0 5
6400: ARRAY
6401: PUSH
6402: LD_INT 2
6404: ARRAY
6405: PPUSH
6406: LD_VAR 0 3
6410: PUSH
6411: LD_VAR 0 2
6415: ARRAY
6416: PUSH
6417: LD_VAR 0 5
6421: ARRAY
6422: PUSH
6423: LD_INT 3
6425: ARRAY
6426: PPUSH
6427: LD_VAR 0 3
6431: PUSH
6432: LD_VAR 0 2
6436: ARRAY
6437: PUSH
6438: LD_VAR 0 5
6442: ARRAY
6443: PUSH
6444: LD_INT 4
6446: ARRAY
6447: PPUSH
6448: LD_INT 80
6450: PPUSH
6451: CALL 16638 0 5
// result := Join ( result , CreateVehicle ) ;
6455: LD_ADDR_VAR 0 4
6459: PUSH
6460: LD_VAR 0 4
6464: PPUSH
6465: CALL_OW 45
6469: PPUSH
6470: CALL 49818 0 2
6474: ST_TO_ADDR
// end ;
6475: GO 6286
6477: POP
6478: POP
// end ;
6479: LD_VAR 0 4
6483: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6484: LD_INT 0
6486: PPUSH
6487: PPUSH
// for i in mpBattleFlags do
6488: LD_ADDR_VAR 0 3
6492: PUSH
6493: LD_EXP 25
6497: PUSH
6498: FOR_IN
6499: IFFALSE 6576
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6501: LD_VAR 0 3
6505: PPUSH
6506: LD_INT 1
6508: PUSH
6509: LD_VAR 0 1
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: PUSH
6518: LD_INT 2
6520: PUSH
6521: LD_VAR 0 1
6525: PUSH
6526: LD_REAL  7.00000000000000E-0001
6529: MUL
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PUSH
6535: LD_INT 3
6537: PUSH
6538: LD_VAR 0 1
6542: PUSH
6543: LD_REAL  4.00000000000000E-0001
6546: MUL
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PUSH
6552: LD_INT 20
6554: PUSH
6555: LD_VAR 0 1
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: PPUSH
6570: CALL_OW 423
6574: GO 6498
6576: POP
6577: POP
// end ;
6578: LD_VAR 0 2
6582: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6583: LD_INT 100
6585: IFFALSE 6680
6587: GO 6589
6589: DISABLE
6590: LD_INT 0
6592: PPUSH
6593: PPUSH
// begin if mpBattleFlag <= 0 then
6594: LD_EXP 24
6598: PUSH
6599: LD_INT 0
6601: LESSEQUAL
6602: IFFALSE 6606
// exit ;
6604: GO 6680
// strength := 100 ;
6606: LD_ADDR_VAR 0 2
6610: PUSH
6611: LD_INT 100
6613: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6614: LD_EXP 24
6618: PPUSH
6619: CALL_OW 67
// strength := Dec ( strength ) ;
6623: LD_ADDR_VAR 0 2
6627: PUSH
6628: LD_VAR 0 2
6632: PPUSH
6633: CALL 51213 0 1
6637: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6638: LD_VAR 0 2
6642: PPUSH
6643: CALL 6484 0 1
// until not strength ;
6647: LD_VAR 0 2
6651: NOT
6652: IFFALSE 6614
// for i in mpBattleFlags do
6654: LD_ADDR_VAR 0 1
6658: PUSH
6659: LD_EXP 25
6663: PUSH
6664: FOR_IN
6665: IFFALSE 6678
// KillBattleFlag ( i ) ;
6667: LD_VAR 0 1
6671: PPUSH
6672: CALL_OW 419
6676: GO 6664
6678: POP
6679: POP
// end ;
6680: PPOPN 2
6682: END
// every 0 0$1 marked mpActive do var side , tmp ;
6683: GO 6685
6685: DISABLE
6686: LD_INT 0
6688: PPUSH
6689: PPUSH
// begin if mpSibBomb <= 1 then
6690: LD_EXP 30
6694: PUSH
6695: LD_INT 1
6697: LESSEQUAL
6698: IFFALSE 6702
// exit ;
6700: GO 6775
// tmp := mpSibBomb ;
6702: LD_ADDR_VAR 0 2
6706: PUSH
6707: LD_EXP 30
6711: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6712: LD_INT 35
6714: PPUSH
6715: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6719: LD_ADDR_VAR 0 2
6723: PUSH
6724: LD_VAR 0 2
6728: PUSH
6729: LD_INT 35
6731: MINUS
6732: ST_TO_ADDR
// until not tmp ;
6733: LD_VAR 0 2
6737: NOT
6738: IFFALSE 6712
// for side := 1 to 8 do
6740: LD_ADDR_VAR 0 1
6744: PUSH
6745: DOUBLE
6746: LD_INT 1
6748: DEC
6749: ST_TO_ADDR
6750: LD_INT 8
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6773
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6756: LD_INT 25
6758: PPUSH
6759: LD_VAR 0 1
6763: PPUSH
6764: LD_INT 1
6766: PPUSH
6767: CALL_OW 322
6771: GO 6753
6773: POP
6774: POP
// end ;
6775: PPOPN 2
6777: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6778: LD_INT 0
6780: PPUSH
6781: PPUSH
6782: PPUSH
// mpBuildUpTimeDelay := 0 ;
6783: LD_ADDR_EXP 50
6787: PUSH
6788: LD_INT 0
6790: ST_TO_ADDR
// if not mpBuildUpTime then
6791: LD_EXP 22
6795: NOT
6796: IFFALSE 6800
// exit ;
6798: GO 6989
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6800: LD_ADDR_EXP 50
6804: PUSH
6805: LD_INT 8400
6807: PUSH
6808: LD_INT 2100
6810: PUSH
6811: LD_EXP 22
6815: MUL
6816: PLUS
6817: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6818: LD_ADDR_EXP 51
6822: PUSH
6823: LD_INT 1
6825: ST_TO_ADDR
// for i := 1 to 8 do
6826: LD_ADDR_VAR 0 2
6830: PUSH
6831: DOUBLE
6832: LD_INT 1
6834: DEC
6835: ST_TO_ADDR
6836: LD_INT 8
6838: PUSH
6839: FOR_TO
6840: IFFALSE 6987
// if mpSidePositions [ i ] then
6842: LD_EXP 9
6846: PUSH
6847: LD_VAR 0 2
6851: ARRAY
6852: IFFALSE 6985
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6854: LD_EXP 21
6858: PUSH
6859: LD_EXP 9
6863: PUSH
6864: LD_VAR 0 2
6868: ARRAY
6869: ARRAY
6870: PPUSH
6871: LD_INT 5
6873: PPUSH
6874: CALL_OW 424
// for j := 1 to 8 do
6878: LD_ADDR_VAR 0 3
6882: PUSH
6883: DOUBLE
6884: LD_INT 1
6886: DEC
6887: ST_TO_ADDR
6888: LD_INT 8
6890: PUSH
6891: FOR_TO
6892: IFFALSE 6983
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6894: LD_EXP 9
6898: PUSH
6899: LD_VAR 0 3
6903: ARRAY
6904: IFFALSE 6953
6906: PUSH
6907: LD_EXP 10
6911: PUSH
6912: LD_VAR 0 2
6916: ARRAY
6917: PUSH
6918: LD_EXP 10
6922: PUSH
6923: LD_VAR 0 3
6927: ARRAY
6928: NONEQUAL
6929: IFTRUE 6952
6931: PUSH
6932: LD_EXP 13
6936: NOT
6937: IFFALSE 6951
6939: PUSH
6940: LD_VAR 0 2
6944: PUSH
6945: LD_VAR 0 3
6949: NONEQUAL
6950: AND
6951: OR
6952: AND
6953: IFFALSE 6981
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6955: LD_VAR 0 3
6959: PPUSH
6960: LD_EXP 21
6964: PUSH
6965: LD_EXP 9
6969: PUSH
6970: LD_VAR 0 2
6974: ARRAY
6975: ARRAY
6976: PPUSH
6977: CALL_OW 333
6981: GO 6891
6983: POP
6984: POP
// end ;
6985: GO 6839
6987: POP
6988: POP
// end ;
6989: LD_VAR 0 1
6993: RET
// function EndBuildUp ; var i , j ; begin
6994: LD_INT 0
6996: PPUSH
6997: PPUSH
6998: PPUSH
// mpBuildUpTimeActive := false ;
6999: LD_ADDR_EXP 51
7003: PUSH
7004: LD_INT 0
7006: ST_TO_ADDR
// for i := 1 to 8 do
7007: LD_ADDR_VAR 0 2
7011: PUSH
7012: DOUBLE
7013: LD_INT 1
7015: DEC
7016: ST_TO_ADDR
7017: LD_INT 8
7019: PUSH
7020: FOR_TO
7021: IFFALSE 7168
// if mpSidePositions [ i ] then
7023: LD_EXP 9
7027: PUSH
7028: LD_VAR 0 2
7032: ARRAY
7033: IFFALSE 7166
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
7035: LD_EXP 21
7039: PUSH
7040: LD_EXP 9
7044: PUSH
7045: LD_VAR 0 2
7049: ARRAY
7050: ARRAY
7051: PPUSH
7052: LD_INT 0
7054: PPUSH
7055: CALL_OW 424
// for j := 1 to 8 do
7059: LD_ADDR_VAR 0 3
7063: PUSH
7064: DOUBLE
7065: LD_INT 1
7067: DEC
7068: ST_TO_ADDR
7069: LD_INT 8
7071: PUSH
7072: FOR_TO
7073: IFFALSE 7164
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
7075: LD_EXP 9
7079: PUSH
7080: LD_VAR 0 3
7084: ARRAY
7085: IFFALSE 7134
7087: PUSH
7088: LD_EXP 10
7092: PUSH
7093: LD_VAR 0 2
7097: ARRAY
7098: PUSH
7099: LD_EXP 10
7103: PUSH
7104: LD_VAR 0 3
7108: ARRAY
7109: NONEQUAL
7110: IFTRUE 7133
7112: PUSH
7113: LD_EXP 13
7117: NOT
7118: IFFALSE 7132
7120: PUSH
7121: LD_VAR 0 2
7125: PUSH
7126: LD_VAR 0 3
7130: NONEQUAL
7131: AND
7132: OR
7133: AND
7134: IFFALSE 7162
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
7136: LD_VAR 0 3
7140: PPUSH
7141: LD_EXP 21
7145: PUSH
7146: LD_EXP 9
7150: PUSH
7151: LD_VAR 0 2
7155: ARRAY
7156: ARRAY
7157: PPUSH
7158: CALL_OW 334
7162: GO 7072
7164: POP
7165: POP
// end ;
7166: GO 7020
7168: POP
7169: POP
// end ;
7170: LD_VAR 0 1
7174: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
7175: LD_EXP 51
7179: IFFALSE 7358
7181: GO 7183
7183: DISABLE
7184: LD_INT 0
7186: PPUSH
7187: PPUSH
// begin for i := 1 to 8 do
7188: LD_ADDR_VAR 0 1
7192: PUSH
7193: DOUBLE
7194: LD_INT 1
7196: DEC
7197: ST_TO_ADDR
7198: LD_INT 8
7200: PUSH
7201: FOR_TO
7202: IFFALSE 7355
// if mpSidePositions [ i ] then
7204: LD_EXP 9
7208: PUSH
7209: LD_VAR 0 1
7213: ARRAY
7214: IFFALSE 7353
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
7216: LD_ADDR_VAR 0 2
7220: PUSH
7221: LD_EXP 21
7225: PUSH
7226: LD_EXP 9
7230: PUSH
7231: LD_VAR 0 1
7235: ARRAY
7236: ARRAY
7237: PPUSH
7238: LD_INT 2
7240: PUSH
7241: LD_INT 21
7243: PUSH
7244: LD_INT 1
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 21
7253: PUSH
7254: LD_INT 2
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 22
7268: PUSH
7269: LD_OWVAR 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 70
7286: PUSH
7287: FOR_IN
7288: IFFALSE 7351
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7290: LD_EXP 10
7294: PUSH
7295: LD_VAR 0 1
7299: ARRAY
7300: PUSH
7301: LD_EXP 10
7305: PUSH
7306: LD_OWVAR 2
7310: ARRAY
7311: NONEQUAL
7312: IFTRUE 7335
7314: PUSH
7315: LD_EXP 13
7319: NOT
7320: IFFALSE 7334
7322: PUSH
7323: LD_VAR 0 1
7327: PUSH
7328: LD_OWVAR 2
7332: NONEQUAL
7333: AND
7334: OR
7335: IFFALSE 7349
// ComMoveToArea ( un , BuildUpEscape ) ;
7337: LD_VAR 0 2
7341: PPUSH
7342: LD_INT 6
7344: PPUSH
7345: CALL_OW 113
7349: GO 7287
7351: POP
7352: POP
7353: GO 7201
7355: POP
7356: POP
// enable ;
7357: ENABLE
// end ;
7358: PPOPN 2
7360: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7361: LD_EXP 22
7365: IFFALSE 7415
7367: GO 7369
7369: DISABLE
7370: LD_INT 0
7372: PPUSH
// begin tmp := mpBuildUpTime ;
7373: LD_ADDR_VAR 0 1
7377: PUSH
7378: LD_EXP 22
7382: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7383: LD_INT 35
7385: PPUSH
7386: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7390: LD_ADDR_VAR 0 1
7394: PUSH
7395: LD_VAR 0 1
7399: PUSH
7400: LD_INT 35
7402: MINUS
7403: ST_TO_ADDR
// until not tmp ;
7404: LD_VAR 0 1
7408: NOT
7409: IFFALSE 7383
// EndBuildUp ;
7411: CALL 6994 0 0
// end ;
7415: PPOPN 1
7417: END
// every 0 0$1 trigger mpActive marked mpWin do
7418: LD_INT 100
7420: IFFALSE 7454
7422: GO 7424
7424: DISABLE
// begin if IAmServer then
7425: CALL_OW 518
7429: IFFALSE 7438
// wait ( 0 0$3 ) ;
7431: LD_INT 105
7433: PPUSH
7434: CALL_OW 67
// if Multiplayer then
7438: LD_OWVAR 4
7442: IFFALSE 7450
// YouWinInMultiplayer else
7444: CALL_OW 106
7448: GO 7454
// YouWin ;
7450: CALL_OW 103
// end ;
7454: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7455: LD_INT 0
7457: PPUSH
// result := false ;
7458: LD_ADDR_VAR 0 3
7462: PUSH
7463: LD_INT 0
7465: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7466: LD_VAR 0 1
7470: PUSH
7471: LD_INT 1
7473: DOUBLE
7474: EQUAL
7475: IFTRUE 7497
7477: LD_INT 5
7479: DOUBLE
7480: EQUAL
7481: IFTRUE 7497
7483: LD_INT 6
7485: DOUBLE
7486: EQUAL
7487: IFTRUE 7497
7489: LD_INT 7
7491: DOUBLE
7492: EQUAL
7493: IFTRUE 7497
7495: GO 7570
7497: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7498: LD_ADDR_VAR 0 3
7502: PUSH
7503: LD_INT 22
7505: PUSH
7506: LD_VAR 0 2
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: LD_INT 2
7517: PUSH
7518: LD_INT 21
7520: PUSH
7521: LD_INT 1
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PUSH
7528: LD_INT 33
7530: PUSH
7531: LD_INT 3
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 33
7540: PUSH
7541: LD_INT 5
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: PPUSH
7563: CALL 13842 0 1
7567: ST_TO_ADDR
// end ; GameTypeSurvival :
7568: GO 7966
7570: LD_INT 2
7572: DOUBLE
7573: EQUAL
7574: IFTRUE 7578
7576: GO 7708
7578: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7579: LD_ADDR_VAR 0 3
7583: PUSH
7584: LD_INT 22
7586: PUSH
7587: LD_VAR 0 2
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: LD_INT 2
7598: PUSH
7599: LD_INT 30
7601: PUSH
7602: LD_INT 0
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 30
7611: PUSH
7612: LD_INT 1
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PPUSH
7628: CALL_OW 69
7632: PPUSH
7633: CALL 13842 0 1
7637: IFFALSE 7705
7639: PUSH
7640: LD_INT 22
7642: PUSH
7643: LD_VAR 0 2
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: LD_INT 2
7654: PUSH
7655: LD_INT 21
7657: PUSH
7658: LD_INT 1
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: LD_INT 33
7667: PUSH
7668: LD_INT 3
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: LD_INT 33
7677: PUSH
7678: LD_INT 5
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PPUSH
7695: CALL_OW 69
7699: PPUSH
7700: CALL 13842 0 1
7704: AND
7705: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
7706: GO 7966
7708: LD_INT 8
7710: DOUBLE
7711: EQUAL
7712: IFTRUE 7716
7714: GO 7865
7716: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7717: LD_ADDR_VAR 0 3
7721: PUSH
7722: LD_EXP 43
7726: PUSH
7727: LD_VAR 0 2
7731: ARRAY
7732: PPUSH
7733: CALL_OW 300
7737: IFFALSE 7794
7739: PUSH
7740: LD_INT 22
7742: PUSH
7743: LD_VAR 0 2
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: LD_INT 2
7754: PUSH
7755: LD_INT 30
7757: PUSH
7758: LD_INT 0
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 30
7767: PUSH
7768: LD_INT 1
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: LIST
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PPUSH
7784: CALL_OW 69
7788: PPUSH
7789: CALL 13842 0 1
7793: AND
7794: IFFALSE 7862
7796: PUSH
7797: LD_INT 22
7799: PUSH
7800: LD_VAR 0 2
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 2
7811: PUSH
7812: LD_INT 21
7814: PUSH
7815: LD_INT 1
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: LD_INT 33
7824: PUSH
7825: LD_INT 3
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 33
7834: PUSH
7835: LD_INT 5
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PPUSH
7852: CALL_OW 69
7856: PPUSH
7857: CALL 13842 0 1
7861: AND
7862: ST_TO_ADDR
// end ; GameTypeKing :
7863: GO 7966
7865: LD_INT 3
7867: DOUBLE
7868: EQUAL
7869: IFTRUE 7873
7871: GO 7965
7873: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7874: LD_ADDR_VAR 0 3
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_VAR 0 2
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: LD_INT 2
7893: PUSH
7894: LD_INT 21
7896: PUSH
7897: LD_INT 1
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 33
7906: PUSH
7907: LD_INT 3
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 33
7916: PUSH
7917: LD_INT 5
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: PPUSH
7939: CALL 13842 0 1
7943: IFFALSE 7962
7945: PUSH
7946: LD_VAR 0 2
7950: PPUSH
7951: CALL 62830 0 1
7955: PUSH
7956: LD_EXP 37
7960: LESS
7961: AND
7962: ST_TO_ADDR
// end ; end ;
7963: GO 7966
7965: POP
// end ;
7966: LD_VAR 0 3
7970: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7971: LD_INT 100
7973: IFFALSE 8203
7975: GO 7977
7977: DISABLE
7978: LD_INT 0
7980: PPUSH
7981: PPUSH
// begin if Multiplayer then
7982: LD_OWVAR 4
7986: IFFALSE 7994
// SetPlayerSpectator ( ) else
7988: CALL_OW 572
7992: GO 8003
// FogOff ( your_side ) ;
7994: LD_OWVAR 2
7998: PPUSH
7999: CALL_OW 344
// repeat gameIsOn := false ;
8003: LD_ADDR_VAR 0 1
8007: PUSH
8008: LD_INT 0
8010: ST_TO_ADDR
// for i := 1 to 8 do
8011: LD_ADDR_VAR 0 2
8015: PUSH
8016: DOUBLE
8017: LD_INT 1
8019: DEC
8020: ST_TO_ADDR
8021: LD_INT 8
8023: PUSH
8024: FOR_TO
8025: IFFALSE 8155
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8027: LD_EXP 9
8031: PUSH
8032: LD_VAR 0 2
8036: ARRAY
8037: IFFALSE 8050
8039: PUSH
8040: LD_VAR 0 2
8044: PPUSH
8045: CALL_OW 108
8049: AND
8050: IFFALSE 8064
8052: PUSH
8053: LD_VAR 0 2
8057: PUSH
8058: LD_OWVAR 2
8062: NONEQUAL
8063: AND
8064: IFFALSE 8153
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8066: LD_EXP 10
8070: PUSH
8071: LD_VAR 0 2
8075: ARRAY
8076: NOT
8077: IFTRUE 8125
8079: PUSH
8080: LD_EXP 10
8084: PUSH
8085: LD_VAR 0 2
8089: ARRAY
8090: PUSH
8091: LD_EXP 10
8095: PUSH
8096: LD_OWVAR 2
8100: ARRAY
8101: NONEQUAL
8102: IFFALSE 8124
8104: PUSH
8105: LD_OWVAR 2
8109: PPUSH
8110: LD_VAR 0 2
8114: PPUSH
8115: CALL_OW 81
8119: PUSH
8120: LD_INT 1
8122: NONEQUAL
8123: AND
8124: OR
8125: IFFALSE 8153
// if HasPowerByGameType ( mpGameType , i ) then
8127: LD_EXP 5
8131: PPUSH
8132: LD_VAR 0 2
8136: PPUSH
8137: CALL 7455 0 2
8141: IFFALSE 8153
// begin gameIsOn := true ;
8143: LD_ADDR_VAR 0 1
8147: PUSH
8148: LD_INT 1
8150: ST_TO_ADDR
// break ;
8151: GO 8155
// end ;
8153: GO 8024
8155: POP
8156: POP
// wait ( 100 ) ;
8157: LD_INT 100
8159: PPUSH
8160: CALL_OW 67
// until not gameIsOn ;
8164: LD_VAR 0 1
8168: NOT
8169: IFFALSE 8003
// if IAmServer then
8171: CALL_OW 518
8175: IFFALSE 8184
// wait ( 0 0$3 ) ;
8177: LD_INT 105
8179: PPUSH
8180: CALL_OW 67
// if Multiplayer then
8184: LD_OWVAR 4
8188: IFFALSE 8196
// YouLostInMultiplayer else
8190: CALL_OW 107
8194: GO 8203
// YouLost (  ) ;
8196: LD_STRING 
8198: PPUSH
8199: CALL_OW 104
// end ;
8203: PPOPN 2
8205: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
8206: LD_EXP 35
8210: IFFALSE 8594
8212: GO 8214
8214: DISABLE
8215: LD_INT 0
8217: PPUSH
8218: PPUSH
8219: PPUSH
8220: PPUSH
8221: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
8222: LD_ADDR_VAR 0 5
8226: PUSH
8227: LD_INT 1
8229: PUSH
8230: LD_INT 2
8232: PUSH
8233: LD_INT 3
8235: PUSH
8236: LD_INT 4
8238: PUSH
8239: LD_INT 5
8241: PUSH
8242: LD_INT 6
8244: PUSH
8245: LD_INT 7
8247: PUSH
8248: LD_INT 8
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
8261: LD_INT 350
8263: PPUSH
8264: CALL_OW 67
// for i := 1 to 8 do
8268: LD_ADDR_VAR 0 1
8272: PUSH
8273: DOUBLE
8274: LD_INT 1
8276: DEC
8277: ST_TO_ADDR
8278: LD_INT 8
8280: PUSH
8281: FOR_TO
8282: IFFALSE 8564
// begin j := sides [ i ] ;
8284: LD_ADDR_VAR 0 2
8288: PUSH
8289: LD_VAR 0 5
8293: PUSH
8294: LD_VAR 0 1
8298: ARRAY
8299: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
8300: LD_EXP 42
8304: PUSH
8305: LD_VAR 0 2
8309: ARRAY
8310: PPUSH
8311: CALL 13842 0 1
8315: IFFALSE 8328
8317: PUSH
8318: LD_VAR 0 2
8322: PPUSH
8323: CALL_OW 108
8327: AND
8328: IFFALSE 8346
8330: PUSH
8331: LD_EXP 5
8335: PPUSH
8336: LD_VAR 0 2
8340: PPUSH
8341: CALL 7455 0 2
8345: AND
8346: IFFALSE 8562
// begin wait ( mpRespawn div 2 ) ;
8348: LD_EXP 35
8352: PUSH
8353: LD_INT 2
8355: DIV
8356: PPUSH
8357: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8361: LD_ADDR_VAR 0 3
8365: PUSH
8366: LD_INT 22
8368: PUSH
8369: LD_VAR 0 2
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 50
8380: PUSH
8381: EMPTY
8382: LIST
8383: PUSH
8384: LD_INT 2
8386: PUSH
8387: LD_INT 30
8389: PUSH
8390: LD_INT 0
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: LD_INT 30
8399: PUSH
8400: LD_INT 1
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: LIST
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: LIST
8416: PPUSH
8417: CALL_OW 69
8421: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8422: LD_VAR 0 3
8426: NOT
8427: IFTRUE 8441
8429: PUSH
8430: LD_VAR 0 2
8434: PPUSH
8435: CALL_OW 108
8439: NOT
8440: OR
8441: IFTRUE 8460
8443: PUSH
8444: LD_EXP 5
8448: PPUSH
8449: LD_VAR 0 2
8453: PPUSH
8454: CALL 7455 0 2
8458: NOT
8459: OR
8460: IFFALSE 8464
// continue ;
8462: GO 8281
// spawn := tmp [ 1 ] ;
8464: LD_ADDR_VAR 0 4
8468: PUSH
8469: LD_VAR 0 3
8473: PUSH
8474: LD_INT 1
8476: ARRAY
8477: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8478: LD_EXP 42
8482: PUSH
8483: LD_VAR 0 2
8487: ARRAY
8488: PUSH
8489: LD_INT 1
8491: ARRAY
8492: PPUSH
8493: LD_VAR 0 4
8497: PPUSH
8498: CALL_OW 250
8502: PPUSH
8503: LD_VAR 0 4
8507: PPUSH
8508: CALL_OW 251
8512: PPUSH
8513: LD_INT 32
8515: PPUSH
8516: LD_INT 1
8518: PPUSH
8519: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8523: LD_ADDR_EXP 42
8527: PUSH
8528: LD_EXP 42
8532: PPUSH
8533: LD_VAR 0 2
8537: PPUSH
8538: LD_EXP 42
8542: PUSH
8543: LD_VAR 0 2
8547: ARRAY
8548: PPUSH
8549: LD_INT 1
8551: PPUSH
8552: CALL_OW 3
8556: PPUSH
8557: CALL_OW 1
8561: ST_TO_ADDR
// end ; end ;
8562: GO 8281
8564: POP
8565: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8566: LD_ADDR_VAR 0 5
8570: PUSH
8571: LD_VAR 0 5
8575: PPUSH
8576: LD_INT 1
8578: PPUSH
8579: LD_INT 8
8581: PPUSH
8582: LD_INT 1
8584: PPUSH
8585: CALL 16168 0 4
8589: ST_TO_ADDR
// until false ;
8590: LD_INT 0
8592: IFFALSE 8261
// end ;
8594: PPOPN 5
8596: END
// every 0 0$1 marked mpActive do
8597: GO 8599
8599: DISABLE
// begin enable ;
8600: ENABLE
// if not mpDisplayStrings then
8601: LD_EXP 40
8605: NOT
8606: IFFALSE 8617
// begin display_strings := [ ] ;
8608: LD_ADDR_OWVAR 47
8612: PUSH
8613: EMPTY
8614: ST_TO_ADDR
// exit ;
8615: GO 8627
// end ; display_strings := mpDisplayStrings ;
8617: LD_ADDR_OWVAR 47
8621: PUSH
8622: LD_EXP 40
8626: ST_TO_ADDR
// end ; end_of_file
8627: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8628: LD_INT 0
8630: PPUSH
8631: PPUSH
8632: PPUSH
8633: PPUSH
8634: PPUSH
8635: PPUSH
8636: PPUSH
8637: PPUSH
8638: PPUSH
// if GetType ( un ) = unit_vehicle then
8639: LD_VAR 0 1
8643: PPUSH
8644: CALL_OW 247
8648: PUSH
8649: LD_INT 2
8651: EQUAL
8652: IFFALSE 8656
// exit ;
8654: GO 9429
// side := GetSide ( un ) ;
8656: LD_ADDR_VAR 0 9
8660: PUSH
8661: LD_VAR 0 1
8665: PPUSH
8666: CALL_OW 255
8670: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
8671: LD_EXP 5
8675: PUSH
8676: LD_INT 2
8678: PUSH
8679: LD_INT 8
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: IN
8686: IFFALSE 8780
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8688: LD_VAR 0 1
8692: PPUSH
8693: CALL_OW 266
8697: PUSH
8698: LD_INT 0
8700: PUSH
8701: LD_INT 1
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: IN
8708: IFFALSE 8780
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8710: LD_ADDR_VAR 0 3
8714: PUSH
8715: LD_INT 22
8717: PUSH
8718: LD_VAR 0 9
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 2
8729: PUSH
8730: LD_INT 21
8732: PUSH
8733: LD_INT 1
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PUSH
8740: LD_INT 33
8742: PUSH
8743: LD_INT 3
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: LIST
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PPUSH
8759: CALL_OW 69
8763: PUSH
8764: FOR_IN
8765: IFFALSE 8778
// KillUnit ( i ) ;
8767: LD_VAR 0 3
8771: PPUSH
8772: CALL_OW 66
8776: GO 8764
8778: POP
8779: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
8780: LD_EXP 5
8784: PUSH
8785: LD_INT 8
8787: EQUAL
8788: IFFALSE 8872
// if un in mpCommanders then
8790: LD_VAR 0 1
8794: PUSH
8795: LD_EXP 43
8799: IN
8800: IFFALSE 8872
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8802: LD_ADDR_VAR 0 3
8806: PUSH
8807: LD_INT 22
8809: PUSH
8810: LD_VAR 0 9
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_INT 2
8821: PUSH
8822: LD_INT 21
8824: PUSH
8825: LD_INT 1
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 33
8834: PUSH
8835: LD_INT 3
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: LIST
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PPUSH
8851: CALL_OW 69
8855: PUSH
8856: FOR_IN
8857: IFFALSE 8870
// KillUnit ( i ) ;
8859: LD_VAR 0 3
8863: PPUSH
8864: CALL_OW 66
8868: GO 8856
8870: POP
8871: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 257
8881: PUSH
8882: LD_INT 12
8884: PUSH
8885: LD_INT 17
8887: PUSH
8888: LD_INT 15
8890: PUSH
8891: LD_INT 16
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: IN
8900: IFTRUE 8917
8902: PUSH
8903: LD_VAR 0 1
8907: PPUSH
8908: CALL_OW 263
8912: PUSH
8913: LD_INT 5
8915: EQUAL
8916: OR
8917: IFFALSE 9154
// begin tag := 0 ;
8919: LD_ADDR_VAR 0 5
8923: PUSH
8924: LD_INT 0
8926: ST_TO_ADDR
// for i := 1 to 8 do
8927: LD_ADDR_VAR 0 3
8931: PUSH
8932: DOUBLE
8933: LD_INT 1
8935: DEC
8936: ST_TO_ADDR
8937: LD_INT 8
8939: PUSH
8940: FOR_TO
8941: IFFALSE 8975
// if un in mpApePosIndex [ i ] then
8943: LD_VAR 0 1
8947: PUSH
8948: LD_EXP 34
8952: PUSH
8953: LD_VAR 0 3
8957: ARRAY
8958: IN
8959: IFFALSE 8973
// begin tag := i ;
8961: LD_ADDR_VAR 0 5
8965: PUSH
8966: LD_VAR 0 3
8970: ST_TO_ADDR
// break ;
8971: GO 8975
// end ;
8973: GO 8940
8975: POP
8976: POP
// if not tag then
8977: LD_VAR 0 5
8981: NOT
8982: IFFALSE 8986
// exit ;
8984: GO 9429
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8986: LD_ADDR_VAR 0 7
8990: PUSH
8991: LD_EXP 33
8995: PUSH
8996: LD_EXP 9
9000: PUSH
9001: LD_VAR 0 5
9005: ARRAY
9006: ARRAY
9007: ST_TO_ADDR
// if not area then
9008: LD_VAR 0 7
9012: NOT
9013: IFFALSE 9017
// exit ;
9015: GO 9429
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9017: LD_INT 14700
9019: PUSH
9020: LD_VAR 0 1
9024: PUSH
9025: LD_INT 5
9027: MOD
9028: PUSH
9029: LD_INT 1
9031: PLUS
9032: PUSH
9033: LD_INT 700
9035: MUL
9036: PLUS
9037: PPUSH
9038: CALL_OW 67
// repeat wait ( 10 ) ;
9042: LD_INT 10
9044: PPUSH
9045: CALL_OW 67
// until not mpBlockRespThread ;
9049: LD_EXP 49
9053: NOT
9054: IFFALSE 9042
// mpBlockRespThread := true ;
9056: LD_ADDR_EXP 49
9060: PUSH
9061: LD_INT 1
9063: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9064: LD_INT 0
9066: PPUSH
9067: CALL 45945 0 1
// ape := CreateHuman ;
9071: LD_ADDR_VAR 0 4
9075: PUSH
9076: CALL_OW 44
9080: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9081: LD_ADDR_EXP 34
9085: PUSH
9086: LD_EXP 34
9090: PPUSH
9091: LD_VAR 0 5
9095: PPUSH
9096: LD_EXP 34
9100: PUSH
9101: LD_VAR 0 5
9105: ARRAY
9106: PPUSH
9107: LD_VAR 0 4
9111: PPUSH
9112: CALL 49818 0 2
9116: PPUSH
9117: CALL_OW 1
9121: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9122: LD_VAR 0 4
9126: PPUSH
9127: LD_VAR 0 7
9131: PPUSH
9132: LD_INT 0
9134: PPUSH
9135: CALL_OW 49
// wait ( 10 ) ;
9139: LD_INT 10
9141: PPUSH
9142: CALL_OW 67
// mpBlockRespThread := false ;
9146: LD_ADDR_EXP 49
9150: PUSH
9151: LD_INT 0
9153: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
9154: LD_VAR 0 1
9158: PPUSH
9159: CALL_OW 247
9163: PUSH
9164: LD_INT 1
9166: EQUAL
9167: IFFALSE 9184
9169: PUSH
9170: LD_VAR 0 1
9174: PPUSH
9175: CALL_OW 248
9179: PUSH
9180: LD_INT 0
9182: GREATER
9183: AND
9184: IFFALSE 9429
// begin if not mpRespawn then
9186: LD_EXP 35
9190: NOT
9191: IFFALSE 9195
// exit ;
9193: GO 9429
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
9195: LD_VAR 0 9
9199: PPUSH
9200: CALL_OW 108
9204: NOT
9205: IFFALSE 9224
9207: PUSH
9208: LD_EXP 5
9212: PPUSH
9213: LD_VAR 0 9
9217: PPUSH
9218: CALL 7455 0 2
9222: NOT
9223: AND
9224: IFFALSE 9228
// exit ;
9226: GO 9429
// side := GetSide ( un ) ;
9228: LD_ADDR_VAR 0 9
9232: PUSH
9233: LD_VAR 0 1
9237: PPUSH
9238: CALL_OW 255
9242: ST_TO_ADDR
// nation := GetNation ( un ) ;
9243: LD_ADDR_VAR 0 8
9247: PUSH
9248: LD_VAR 0 1
9252: PPUSH
9253: CALL_OW 248
9257: ST_TO_ADDR
// class := GetClass ( un ) ;
9258: LD_ADDR_VAR 0 6
9262: PUSH
9263: LD_VAR 0 1
9267: PPUSH
9268: CALL_OW 257
9272: ST_TO_ADDR
// if class > 4 then
9273: LD_VAR 0 6
9277: PUSH
9278: LD_INT 4
9280: GREATER
9281: IFFALSE 9291
// class := 1 ;
9283: LD_ADDR_VAR 0 6
9287: PUSH
9288: LD_INT 1
9290: ST_TO_ADDR
// repeat wait ( 10 ) ;
9291: LD_INT 10
9293: PPUSH
9294: CALL_OW 67
// until not mpBlockRespThread ;
9298: LD_EXP 49
9302: NOT
9303: IFFALSE 9291
// mpBlockRespThread := true ;
9305: LD_ADDR_EXP 49
9309: PUSH
9310: LD_INT 1
9312: ST_TO_ADDR
// uc_side := side ;
9313: LD_ADDR_OWVAR 20
9317: PUSH
9318: LD_VAR 0 9
9322: ST_TO_ADDR
// uc_nation := nation ;
9323: LD_ADDR_OWVAR 21
9327: PUSH
9328: LD_VAR 0 8
9332: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
9333: LD_INT 0
9335: PPUSH
9336: LD_VAR 0 6
9340: PPUSH
9341: LD_INT 2
9343: PPUSH
9344: CALL_OW 380
// un := CreateHuman ;
9348: LD_ADDR_VAR 0 1
9352: PUSH
9353: CALL_OW 44
9357: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
9358: LD_ADDR_EXP 42
9362: PUSH
9363: LD_EXP 42
9367: PPUSH
9368: LD_VAR 0 9
9372: PPUSH
9373: LD_EXP 42
9377: PUSH
9378: LD_VAR 0 9
9382: ARRAY
9383: PPUSH
9384: LD_EXP 42
9388: PUSH
9389: LD_VAR 0 9
9393: ARRAY
9394: PUSH
9395: LD_INT 1
9397: PLUS
9398: PPUSH
9399: LD_VAR 0 1
9403: PPUSH
9404: CALL_OW 1
9408: PPUSH
9409: CALL_OW 1
9413: ST_TO_ADDR
// wait ( 10 ) ;
9414: LD_INT 10
9416: PPUSH
9417: CALL_OW 67
// mpBlockRespThread := false ;
9421: LD_ADDR_EXP 49
9425: PUSH
9426: LD_INT 0
9428: ST_TO_ADDR
// end ; end ;
9429: LD_VAR 0 2
9433: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
9434: LD_INT 0
9436: PPUSH
9437: PPUSH
9438: PPUSH
9439: PPUSH
9440: PPUSH
// tag := 0 ;
9441: LD_ADDR_VAR 0 5
9445: PUSH
9446: LD_INT 0
9448: ST_TO_ADDR
// for i := 1 to 8 do
9449: LD_ADDR_VAR 0 4
9453: PUSH
9454: DOUBLE
9455: LD_INT 1
9457: DEC
9458: ST_TO_ADDR
9459: LD_INT 8
9461: PUSH
9462: FOR_TO
9463: IFFALSE 9497
// if un in mpApePosIndex [ i ] then
9465: LD_VAR 0 2
9469: PUSH
9470: LD_EXP 34
9474: PUSH
9475: LD_VAR 0 4
9479: ARRAY
9480: IN
9481: IFFALSE 9495
// begin tag := i ;
9483: LD_ADDR_VAR 0 5
9487: PUSH
9488: LD_VAR 0 4
9492: ST_TO_ADDR
// break ;
9493: GO 9497
// end ;
9495: GO 9462
9497: POP
9498: POP
// if not tag then
9499: LD_VAR 0 5
9503: NOT
9504: IFFALSE 9508
// exit ;
9506: GO 9676
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9508: LD_ADDR_VAR 0 6
9512: PUSH
9513: LD_EXP 33
9517: PUSH
9518: LD_EXP 9
9522: PUSH
9523: LD_VAR 0 5
9527: ARRAY
9528: ARRAY
9529: ST_TO_ADDR
// if not area then
9530: LD_VAR 0 6
9534: NOT
9535: IFFALSE 9539
// exit ;
9537: GO 9676
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9539: LD_INT 14700
9541: PUSH
9542: LD_VAR 0 2
9546: PUSH
9547: LD_INT 5
9549: MOD
9550: PUSH
9551: LD_INT 1
9553: PLUS
9554: PUSH
9555: LD_INT 700
9557: MUL
9558: PLUS
9559: PPUSH
9560: CALL_OW 67
// repeat wait ( 10 ) ;
9564: LD_INT 10
9566: PPUSH
9567: CALL_OW 67
// until not mpBlockRespThread ;
9571: LD_EXP 49
9575: NOT
9576: IFFALSE 9564
// mpBlockRespThread := true ;
9578: LD_ADDR_EXP 49
9582: PUSH
9583: LD_INT 1
9585: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9586: LD_INT 0
9588: PPUSH
9589: CALL 45945 0 1
// ape := CreateHuman ;
9593: LD_ADDR_VAR 0 7
9597: PUSH
9598: CALL_OW 44
9602: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9603: LD_ADDR_EXP 34
9607: PUSH
9608: LD_EXP 34
9612: PPUSH
9613: LD_VAR 0 5
9617: PPUSH
9618: LD_EXP 34
9622: PUSH
9623: LD_VAR 0 5
9627: ARRAY
9628: PPUSH
9629: LD_VAR 0 7
9633: PPUSH
9634: CALL 49818 0 2
9638: PPUSH
9639: CALL_OW 1
9643: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9644: LD_VAR 0 7
9648: PPUSH
9649: LD_VAR 0 6
9653: PPUSH
9654: LD_INT 0
9656: PPUSH
9657: CALL_OW 49
// wait ( 10 ) ;
9661: LD_INT 10
9663: PPUSH
9664: CALL_OW 67
// mpBlockRespThread := false ;
9668: LD_ADDR_EXP 49
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// end ;
9676: LD_VAR 0 3
9680: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9681: LD_INT 0
9683: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9684: LD_VAR 0 1
9688: PPUSH
9689: CALL_OW 266
9693: PUSH
9694: LD_INT 0
9696: PUSH
9697: LD_INT 1
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: IN
9704: IFFALSE 9729
// SetBName ( building , @ & GetSide ( building ) ) ;
9706: LD_VAR 0 1
9710: PPUSH
9711: LD_STRING @
9713: PUSH
9714: LD_VAR 0 1
9718: PPUSH
9719: CALL_OW 255
9723: STR
9724: PPUSH
9725: CALL_OW 500
// end ;
9729: LD_VAR 0 2
9733: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9734: LD_INT 0
9736: PPUSH
9737: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
9738: LD_EXP 5
9742: PUSH
9743: LD_INT 2
9745: PUSH
9746: LD_INT 8
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: IN
9753: IFFALSE 9777
9755: PUSH
9756: LD_VAR 0 1
9760: PPUSH
9761: CALL_OW 266
9765: PUSH
9766: LD_INT 0
9768: PUSH
9769: LD_INT 1
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: IN
9776: AND
9777: IFFALSE 9856
// begin SetSide ( building , oldSide ) ;
9779: LD_VAR 0 1
9783: PPUSH
9784: LD_VAR 0 2
9788: PPUSH
9789: CALL_OW 235
// KillUnit ( building ) ;
9793: LD_VAR 0 1
9797: PPUSH
9798: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9802: LD_ADDR_VAR 0 5
9806: PUSH
9807: LD_INT 22
9809: PUSH
9810: LD_VAR 0 2
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PUSH
9819: LD_INT 21
9821: PUSH
9822: LD_INT 1
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PPUSH
9833: CALL_OW 69
9837: PUSH
9838: FOR_IN
9839: IFFALSE 9852
// KillUnit ( i ) ;
9841: LD_VAR 0 5
9845: PPUSH
9846: CALL_OW 66
9850: GO 9838
9852: POP
9853: POP
// exit ;
9854: GO 9901
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9856: LD_VAR 0 1
9860: PPUSH
9861: CALL_OW 266
9865: PUSH
9866: LD_INT 0
9868: PUSH
9869: LD_INT 1
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: IN
9876: IFFALSE 9901
// SetBName ( building , @ & GetSide ( building ) ) ;
9878: LD_VAR 0 1
9882: PPUSH
9883: LD_STRING @
9885: PUSH
9886: LD_VAR 0 1
9890: PPUSH
9891: CALL_OW 255
9895: STR
9896: PPUSH
9897: CALL_OW 500
// end ;
9901: LD_VAR 0 4
9905: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9906: LD_INT 0
9908: PPUSH
9909: PPUSH
9910: PPUSH
// if mpGameType <> GameTypeFamine then
9911: LD_EXP 5
9915: PUSH
9916: LD_INT 5
9918: NONEQUAL
9919: IFFALSE 9923
// exit ;
9921: GO 10157
// for i := 1 to mpGlobalOilDeposits do
9923: LD_ADDR_VAR 0 6
9927: PUSH
9928: DOUBLE
9929: LD_INT 1
9931: DEC
9932: ST_TO_ADDR
9933: LD_EXP 44
9937: PUSH
9938: FOR_TO
9939: IFFALSE 10155
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9941: LD_EXP 44
9945: PUSH
9946: LD_VAR 0 6
9950: ARRAY
9951: PUSH
9952: LD_INT 1
9954: ARRAY
9955: PPUSH
9956: LD_EXP 44
9960: PUSH
9961: LD_VAR 0 6
9965: ARRAY
9966: PUSH
9967: LD_INT 2
9969: ARRAY
9970: PPUSH
9971: CALL_OW 428
9975: PUSH
9976: LD_VAR 0 1
9980: EQUAL
9981: IFFALSE 10153
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9983: LD_ADDR_VAR 0 7
9987: PUSH
9988: LD_EXP 44
9992: PUSH
9993: LD_VAR 0 6
9997: ARRAY
9998: PUSH
9999: LD_INT 3
10001: ARRAY
10002: ST_TO_ADDR
// value := value - amount ;
10003: LD_ADDR_VAR 0 7
10007: PUSH
10008: LD_VAR 0 7
10012: PUSH
10013: LD_VAR 0 4
10017: MINUS
10018: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
10019: LD_ADDR_EXP 44
10023: PUSH
10024: LD_EXP 44
10028: PPUSH
10029: LD_VAR 0 6
10033: PPUSH
10034: LD_EXP 44
10038: PUSH
10039: LD_VAR 0 6
10043: ARRAY
10044: PPUSH
10045: LD_INT 3
10047: PPUSH
10048: LD_VAR 0 7
10052: PPUSH
10053: CALL_OW 1
10057: PPUSH
10058: CALL_OW 1
10062: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10063: LD_VAR 0 2
10067: PUSH
10068: LD_OWVAR 2
10072: PUSH
10073: LD_INT 9
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: IN
10080: IFFALSE 10096
// SetUnitDisplayNumber ( building , value ) ;
10082: LD_VAR 0 1
10086: PPUSH
10087: LD_VAR 0 7
10091: PPUSH
10092: CALL_OW 505
// if value <= 0 then
10096: LD_VAR 0 7
10100: PUSH
10101: LD_INT 0
10103: LESSEQUAL
10104: IFFALSE 10153
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
10106: LD_EXP 44
10110: PUSH
10111: LD_VAR 0 6
10115: ARRAY
10116: PUSH
10117: LD_INT 1
10119: ARRAY
10120: PPUSH
10121: LD_EXP 44
10125: PUSH
10126: LD_VAR 0 6
10130: ARRAY
10131: PUSH
10132: LD_INT 2
10134: ARRAY
10135: PPUSH
10136: CALL_OW 63
// KillUnit ( building ) ;
10140: LD_VAR 0 1
10144: PPUSH
10145: CALL_OW 66
// exit ;
10149: POP
10150: POP
10151: GO 10157
// end ; end ; end ;
10153: GO 9938
10155: POP
10156: POP
// end ;
10157: LD_VAR 0 5
10161: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
10162: LD_INT 0
10164: PPUSH
10165: PPUSH
10166: PPUSH
// if mpGameType <> GameTypeFamine then
10167: LD_EXP 5
10171: PUSH
10172: LD_INT 5
10174: NONEQUAL
10175: IFFALSE 10179
// exit ;
10177: GO 10413
// for i := 1 to mpGlobalSibDeposits do
10179: LD_ADDR_VAR 0 6
10183: PUSH
10184: DOUBLE
10185: LD_INT 1
10187: DEC
10188: ST_TO_ADDR
10189: LD_EXP 45
10193: PUSH
10194: FOR_TO
10195: IFFALSE 10411
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
10197: LD_EXP 45
10201: PUSH
10202: LD_VAR 0 6
10206: ARRAY
10207: PUSH
10208: LD_INT 1
10210: ARRAY
10211: PPUSH
10212: LD_EXP 45
10216: PUSH
10217: LD_VAR 0 6
10221: ARRAY
10222: PUSH
10223: LD_INT 2
10225: ARRAY
10226: PPUSH
10227: CALL_OW 428
10231: PUSH
10232: LD_VAR 0 1
10236: EQUAL
10237: IFFALSE 10409
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
10239: LD_ADDR_VAR 0 7
10243: PUSH
10244: LD_EXP 45
10248: PUSH
10249: LD_VAR 0 6
10253: ARRAY
10254: PUSH
10255: LD_INT 3
10257: ARRAY
10258: ST_TO_ADDR
// value := value - amount ;
10259: LD_ADDR_VAR 0 7
10263: PUSH
10264: LD_VAR 0 7
10268: PUSH
10269: LD_VAR 0 4
10273: MINUS
10274: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
10275: LD_ADDR_EXP 45
10279: PUSH
10280: LD_EXP 45
10284: PPUSH
10285: LD_VAR 0 6
10289: PPUSH
10290: LD_EXP 45
10294: PUSH
10295: LD_VAR 0 6
10299: ARRAY
10300: PPUSH
10301: LD_INT 3
10303: PPUSH
10304: LD_VAR 0 7
10308: PPUSH
10309: CALL_OW 1
10313: PPUSH
10314: CALL_OW 1
10318: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10319: LD_VAR 0 2
10323: PUSH
10324: LD_OWVAR 2
10328: PUSH
10329: LD_INT 9
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: IN
10336: IFFALSE 10352
// SetUnitDisplayNumber ( building , value ) ;
10338: LD_VAR 0 1
10342: PPUSH
10343: LD_VAR 0 7
10347: PPUSH
10348: CALL_OW 505
// if value <= 0 then
10352: LD_VAR 0 7
10356: PUSH
10357: LD_INT 0
10359: LESSEQUAL
10360: IFFALSE 10409
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
10362: LD_EXP 45
10366: PUSH
10367: LD_VAR 0 6
10371: ARRAY
10372: PUSH
10373: LD_INT 1
10375: ARRAY
10376: PPUSH
10377: LD_EXP 45
10381: PUSH
10382: LD_VAR 0 6
10386: ARRAY
10387: PUSH
10388: LD_INT 2
10390: ARRAY
10391: PPUSH
10392: CALL_OW 63
// KillUnit ( building ) ;
10396: LD_VAR 0 1
10400: PPUSH
10401: CALL_OW 66
// exit ;
10405: POP
10406: POP
10407: GO 10413
// end ; end ; end ;
10409: GO 10194
10411: POP
10412: POP
// end ;
10413: LD_VAR 0 5
10417: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
10418: LD_INT 0
10420: PPUSH
10421: PPUSH
// side := GetSide ( factory ) ;
10422: LD_ADDR_VAR 0 7
10426: PUSH
10427: LD_VAR 0 1
10431: PPUSH
10432: CALL_OW 255
10436: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
10437: LD_VAR 0 5
10441: PUSH
10442: LD_INT 81
10444: EQUAL
10445: IFFALSE 10483
10447: PUSH
10448: LD_INT 22
10450: PUSH
10451: LD_VAR 0 7
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: PUSH
10460: LD_INT 34
10462: PUSH
10463: LD_INT 81
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PPUSH
10474: CALL_OW 69
10478: PUSH
10479: LD_INT 0
10481: GREATER
10482: AND
10483: IFFALSE 10516
// begin ComCancel ( factory ) ;
10485: LD_VAR 0 1
10489: PPUSH
10490: CALL_OW 127
// if side = your_side then
10494: LD_VAR 0 7
10498: PUSH
10499: LD_OWVAR 2
10503: EQUAL
10504: IFFALSE 10516
// HintSpec ( VehLimit , 2 ) ;
10506: LD_STRING VehLimit
10508: PPUSH
10509: LD_INT 2
10511: PPUSH
10512: CALL_OW 338
// end ; end ;
10516: LD_VAR 0 6
10520: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
10521: LD_INT 0
10523: PPUSH
10524: PPUSH
10525: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
10526: LD_VAR 0 1
10530: PPUSH
10531: CALL_OW 264
10535: PUSH
10536: LD_INT 81
10538: EQUAL
10539: IFFALSE 10556
10541: PUSH
10542: LD_VAR 0 1
10546: PPUSH
10547: CALL_OW 263
10551: PUSH
10552: LD_INT 1
10554: EQUAL
10555: AND
10556: IFFALSE 10836
// begin for i := 1 to Count ( minersList ) do
10558: LD_ADDR_VAR 0 6
10562: PUSH
10563: DOUBLE
10564: LD_INT 1
10566: DEC
10567: ST_TO_ADDR
10568: LD_EXP 59
10572: PPUSH
10573: CALL 13842 0 1
10577: PUSH
10578: FOR_TO
10579: IFFALSE 10697
// begin if minersList [ i ] = oldId then
10581: LD_EXP 59
10585: PUSH
10586: LD_VAR 0 6
10590: ARRAY
10591: PUSH
10592: LD_VAR 0 2
10596: EQUAL
10597: IFFALSE 10695
// begin for j := 1 to minerMinesList [ i ] do
10599: LD_ADDR_VAR 0 7
10603: PUSH
10604: DOUBLE
10605: LD_INT 1
10607: DEC
10608: ST_TO_ADDR
10609: LD_EXP 60
10613: PUSH
10614: LD_VAR 0 6
10618: ARRAY
10619: PUSH
10620: FOR_TO
10621: IFFALSE 10671
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
10623: LD_EXP 60
10627: PUSH
10628: LD_VAR 0 6
10632: ARRAY
10633: PUSH
10634: LD_VAR 0 7
10638: ARRAY
10639: PUSH
10640: LD_INT 1
10642: ARRAY
10643: PPUSH
10644: LD_EXP 60
10648: PUSH
10649: LD_VAR 0 6
10653: ARRAY
10654: PUSH
10655: LD_VAR 0 7
10659: ARRAY
10660: PUSH
10661: LD_INT 2
10663: ARRAY
10664: PPUSH
10665: CALL_OW 612
10669: GO 10620
10671: POP
10672: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
10673: LD_ADDR_EXP 60
10677: PUSH
10678: LD_EXP 60
10682: PPUSH
10683: LD_VAR 0 6
10687: PPUSH
10688: CALL_OW 3
10692: ST_TO_ADDR
// break ;
10693: GO 10697
// end ; end ;
10695: GO 10578
10697: POP
10698: POP
// minersList := minersList diff oldId ;
10699: LD_ADDR_EXP 59
10703: PUSH
10704: LD_EXP 59
10708: PUSH
10709: LD_VAR 0 2
10713: DIFF
10714: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10715: LD_INT 22
10717: PUSH
10718: LD_VAR 0 4
10722: PPUSH
10723: CALL_OW 255
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 34
10734: PUSH
10735: LD_INT 81
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PPUSH
10746: CALL_OW 69
10750: PUSH
10751: LD_INT 1
10753: GREATER
10754: IFFALSE 10781
// begin ComExit ( unit ) ;
10756: LD_VAR 0 4
10760: PPUSH
10761: CALL 50216 0 1
// SetSide ( newId , oldSide ) ;
10765: LD_VAR 0 1
10769: PPUSH
10770: LD_VAR 0 3
10774: PPUSH
10775: CALL_OW 235
// exit ;
10779: GO 10836
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10781: LD_ADDR_EXP 59
10785: PUSH
10786: LD_EXP 59
10790: PPUSH
10791: LD_EXP 59
10795: PUSH
10796: LD_INT 1
10798: PLUS
10799: PPUSH
10800: LD_VAR 0 1
10804: PPUSH
10805: CALL_OW 1
10809: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10810: LD_ADDR_EXP 60
10814: PUSH
10815: LD_EXP 60
10819: PPUSH
10820: LD_EXP 60
10824: PUSH
10825: LD_INT 1
10827: PLUS
10828: PPUSH
10829: EMPTY
10830: PPUSH
10831: CALL_OW 1
10835: ST_TO_ADDR
// end ; end ; end_of_file
10836: LD_VAR 0 5
10840: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10841: LD_EXP 41
10845: IFFALSE 10853
10847: PUSH
10848: CALL 11063 0 0
10852: AND
10853: IFFALSE 10861
10855: PUSH
10856: LD_OWVAR 4
10860: AND
10861: IFFALSE 11060
10863: GO 10865
10865: DISABLE
10866: LD_INT 0
10868: PPUSH
10869: PPUSH
// begin canWin := false ;
10870: LD_ADDR_VAR 0 2
10874: PUSH
10875: LD_INT 0
10877: ST_TO_ADDR
// if not HasPower ( your_side ) then
10878: LD_OWVAR 2
10882: PPUSH
10883: CALL 11105 0 1
10887: NOT
10888: IFFALSE 10899
// begin Multiplayer_Loose_Message ;
10890: CALL_OW 521
// enable ( mpLose ) ;
10894: LD_INT 102
10896: ENABLE_MARKED
// end else
10897: GO 11060
// begin canWin := true ;
10899: LD_ADDR_VAR 0 2
10903: PUSH
10904: LD_INT 1
10906: ST_TO_ADDR
// for i := 1 to 8 do
10907: LD_ADDR_VAR 0 1
10911: PUSH
10912: DOUBLE
10913: LD_INT 1
10915: DEC
10916: ST_TO_ADDR
10917: LD_INT 8
10919: PUSH
10920: FOR_TO
10921: IFFALSE 11046
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10923: LD_EXP 9
10927: PUSH
10928: LD_VAR 0 1
10932: ARRAY
10933: IFFALSE 10946
10935: PUSH
10936: LD_VAR 0 1
10940: PPUSH
10941: CALL_OW 108
10945: AND
10946: IFFALSE 10960
10948: PUSH
10949: LD_VAR 0 1
10953: PUSH
10954: LD_OWVAR 2
10958: NONEQUAL
10959: AND
10960: IFFALSE 11044
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10962: LD_EXP 10
10966: PUSH
10967: LD_VAR 0 1
10971: ARRAY
10972: NOT
10973: IFTRUE 11021
10975: PUSH
10976: LD_EXP 10
10980: PUSH
10981: LD_VAR 0 1
10985: ARRAY
10986: PUSH
10987: LD_EXP 10
10991: PUSH
10992: LD_OWVAR 2
10996: ARRAY
10997: NONEQUAL
10998: IFFALSE 11020
11000: PUSH
11001: LD_OWVAR 2
11005: PPUSH
11006: LD_VAR 0 1
11010: PPUSH
11011: CALL_OW 81
11015: PUSH
11016: LD_INT 1
11018: NONEQUAL
11019: AND
11020: OR
11021: IFFALSE 11044
// if HasPower ( i ) then
11023: LD_VAR 0 1
11027: PPUSH
11028: CALL 11105 0 1
11032: IFFALSE 11044
// begin canWin := false ;
11034: LD_ADDR_VAR 0 2
11038: PUSH
11039: LD_INT 0
11041: ST_TO_ADDR
// break ;
11042: GO 11046
// end ;
11044: GO 10920
11046: POP
11047: POP
// if canWin then
11048: LD_VAR 0 2
11052: IFFALSE 11059
// enable ( mpWin ) else
11054: LD_INT 101
11056: ENABLE_MARKED
11057: GO 11060
// enable ;
11059: ENABLE
// end ; end ;
11060: PPOPN 2
11062: END
// function CanWinLoose ; begin
11063: LD_INT 0
11065: PPUSH
// result := true ;
11066: LD_ADDR_VAR 0 1
11070: PUSH
11071: LD_INT 1
11073: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11074: CALL_OW 531
11078: IFFALSE 11090
11080: PUSH
11081: CALL_OW 519
11085: PUSH
11086: LD_INT 1
11088: GREATER
11089: AND
11090: IFFALSE 11100
// result := false ;
11092: LD_ADDR_VAR 0 1
11096: PUSH
11097: LD_INT 0
11099: ST_TO_ADDR
// end ;
11100: LD_VAR 0 1
11104: RET
// function HasPower ( i ) ; begin
11105: LD_INT 0
11107: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11108: LD_ADDR_VAR 0 2
11112: PUSH
11113: LD_INT 22
11115: PUSH
11116: LD_VAR 0 1
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: LD_INT 2
11127: PUSH
11128: LD_INT 21
11130: PUSH
11131: LD_INT 1
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: LD_INT 33
11140: PUSH
11141: LD_INT 3
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 33
11150: PUSH
11151: LD_INT 5
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PPUSH
11168: CALL_OW 69
11172: ST_TO_ADDR
// end ; end_of_file
11173: LD_VAR 0 2
11177: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
11178: LD_EXP 41
11182: IFFALSE 11225
11184: GO 11186
11186: DISABLE
11187: LD_INT 0
11189: PPUSH
// begin for i := 1 to 8 do
11190: LD_ADDR_VAR 0 1
11194: PUSH
11195: DOUBLE
11196: LD_INT 1
11198: DEC
11199: ST_TO_ADDR
11200: LD_INT 8
11202: PUSH
11203: FOR_TO
11204: IFFALSE 11223
// SetRestrict ( b_depot , i , state_disabled ) ;
11206: LD_INT 0
11208: PPUSH
11209: LD_VAR 0 1
11213: PPUSH
11214: LD_INT 0
11216: PPUSH
11217: CALL_OW 324
11221: GO 11203
11223: POP
11224: POP
// end ;
11225: PPOPN 1
11227: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
11228: LD_EXP 41
11232: IFFALSE 11240
11234: PUSH
11235: CALL 11450 0 0
11239: AND
11240: IFFALSE 11248
11242: PUSH
11243: LD_OWVAR 4
11247: AND
11248: IFFALSE 11447
11250: GO 11252
11252: DISABLE
11253: LD_INT 0
11255: PPUSH
11256: PPUSH
// begin canWin := false ;
11257: LD_ADDR_VAR 0 2
11261: PUSH
11262: LD_INT 0
11264: ST_TO_ADDR
// if not HasPower ( your_side ) then
11265: LD_OWVAR 2
11269: PPUSH
11270: CALL 11492 0 1
11274: NOT
11275: IFFALSE 11286
// begin Multiplayer_Loose_Message ;
11277: CALL_OW 521
// enable ( mpLose ) ;
11281: LD_INT 102
11283: ENABLE_MARKED
// end else
11284: GO 11447
// begin canWin := true ;
11286: LD_ADDR_VAR 0 2
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// for i := 1 to 8 do
11294: LD_ADDR_VAR 0 1
11298: PUSH
11299: DOUBLE
11300: LD_INT 1
11302: DEC
11303: ST_TO_ADDR
11304: LD_INT 8
11306: PUSH
11307: FOR_TO
11308: IFFALSE 11433
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11310: LD_EXP 9
11314: PUSH
11315: LD_VAR 0 1
11319: ARRAY
11320: IFFALSE 11333
11322: PUSH
11323: LD_VAR 0 1
11327: PPUSH
11328: CALL_OW 108
11332: AND
11333: IFFALSE 11347
11335: PUSH
11336: LD_VAR 0 1
11340: PUSH
11341: LD_OWVAR 2
11345: NONEQUAL
11346: AND
11347: IFFALSE 11431
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11349: LD_EXP 10
11353: PUSH
11354: LD_VAR 0 1
11358: ARRAY
11359: NOT
11360: IFTRUE 11408
11362: PUSH
11363: LD_EXP 10
11367: PUSH
11368: LD_VAR 0 1
11372: ARRAY
11373: PUSH
11374: LD_EXP 10
11378: PUSH
11379: LD_OWVAR 2
11383: ARRAY
11384: NONEQUAL
11385: IFFALSE 11407
11387: PUSH
11388: LD_OWVAR 2
11392: PPUSH
11393: LD_VAR 0 1
11397: PPUSH
11398: CALL_OW 81
11402: PUSH
11403: LD_INT 1
11405: NONEQUAL
11406: AND
11407: OR
11408: IFFALSE 11431
// if HasPower ( i ) then
11410: LD_VAR 0 1
11414: PPUSH
11415: CALL 11492 0 1
11419: IFFALSE 11431
// begin canWin := false ;
11421: LD_ADDR_VAR 0 2
11425: PUSH
11426: LD_INT 0
11428: ST_TO_ADDR
// break ;
11429: GO 11433
// end ;
11431: GO 11307
11433: POP
11434: POP
// if canWin then
11435: LD_VAR 0 2
11439: IFFALSE 11446
// enable ( mpWin ) else
11441: LD_INT 101
11443: ENABLE_MARKED
11444: GO 11447
// enable ;
11446: ENABLE
// end ; end ;
11447: PPOPN 2
11449: END
// function CanWinLoose ; begin
11450: LD_INT 0
11452: PPUSH
// result := true ;
11453: LD_ADDR_VAR 0 1
11457: PUSH
11458: LD_INT 1
11460: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11461: CALL_OW 531
11465: IFFALSE 11477
11467: PUSH
11468: CALL_OW 519
11472: PUSH
11473: LD_INT 1
11475: GREATER
11476: AND
11477: IFFALSE 11487
// result := false ;
11479: LD_ADDR_VAR 0 1
11483: PUSH
11484: LD_INT 0
11486: ST_TO_ADDR
// end ;
11487: LD_VAR 0 1
11491: RET
// function HasPower ( i ) ; begin
11492: LD_INT 0
11494: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11495: LD_INT 22
11497: PUSH
11498: LD_VAR 0 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 2
11509: PUSH
11510: LD_INT 30
11512: PUSH
11513: LD_INT 0
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 30
11522: PUSH
11523: LD_INT 1
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: LIST
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PPUSH
11539: CALL_OW 69
11543: NOT
11544: IFFALSE 11548
// exit ;
11546: GO 11613
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11548: LD_ADDR_VAR 0 2
11552: PUSH
11553: LD_INT 22
11555: PUSH
11556: LD_VAR 0 1
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 2
11567: PUSH
11568: LD_INT 21
11570: PUSH
11571: LD_INT 1
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 33
11580: PUSH
11581: LD_INT 3
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 33
11590: PUSH
11591: LD_INT 5
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PPUSH
11608: CALL_OW 69
11612: ST_TO_ADDR
// end ; end_of_file
11613: LD_VAR 0 2
11617: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11618: LD_INT 0
11620: PPUSH
11621: PPUSH
// if exist_mode then
11622: LD_VAR 0 2
11626: IFFALSE 11672
// begin unit := CreateCharacter ( prefix & ident ) ;
11628: LD_ADDR_VAR 0 5
11632: PUSH
11633: LD_VAR 0 3
11637: PUSH
11638: LD_VAR 0 1
11642: STR
11643: PPUSH
11644: CALL_OW 34
11648: ST_TO_ADDR
// if unit then
11649: LD_VAR 0 5
11653: IFFALSE 11670
// DeleteCharacters ( prefix & ident ) ;
11655: LD_VAR 0 3
11659: PUSH
11660: LD_VAR 0 1
11664: STR
11665: PPUSH
11666: CALL_OW 40
// end else
11670: GO 11687
// unit := NewCharacter ( ident ) ;
11672: LD_ADDR_VAR 0 5
11676: PUSH
11677: LD_VAR 0 1
11681: PPUSH
11682: CALL_OW 25
11686: ST_TO_ADDR
// result := unit ;
11687: LD_ADDR_VAR 0 4
11691: PUSH
11692: LD_VAR 0 5
11696: ST_TO_ADDR
// end ;
11697: LD_VAR 0 4
11701: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
11702: LD_INT 0
11704: PPUSH
11705: PPUSH
// if exist_mode then
11706: LD_VAR 0 2
11710: IFFALSE 11735
// unit := CreateCharacter ( prefix & ident ) else
11712: LD_ADDR_VAR 0 5
11716: PUSH
11717: LD_VAR 0 3
11721: PUSH
11722: LD_VAR 0 1
11726: STR
11727: PPUSH
11728: CALL_OW 34
11732: ST_TO_ADDR
11733: GO 11750
// unit := NewCharacter ( ident ) ;
11735: LD_ADDR_VAR 0 5
11739: PUSH
11740: LD_VAR 0 1
11744: PPUSH
11745: CALL_OW 25
11749: ST_TO_ADDR
// result := unit ;
11750: LD_ADDR_VAR 0 4
11754: PUSH
11755: LD_VAR 0 5
11759: ST_TO_ADDR
// end ;
11760: LD_VAR 0 4
11764: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11765: LD_INT 0
11767: PPUSH
11768: PPUSH
// if not side or not nation then
11769: LD_VAR 0 1
11773: NOT
11774: IFTRUE 11783
11776: PUSH
11777: LD_VAR 0 2
11781: NOT
11782: OR
11783: IFFALSE 11787
// exit ;
11785: GO 12581
// case nation of nation_american :
11787: LD_VAR 0 2
11791: PUSH
11792: LD_INT 1
11794: DOUBLE
11795: EQUAL
11796: IFTRUE 11800
11798: GO 12022
11800: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
11801: LD_ADDR_VAR 0 4
11805: PUSH
11806: LD_INT 35
11808: PUSH
11809: LD_INT 45
11811: PUSH
11812: LD_INT 46
11814: PUSH
11815: LD_INT 47
11817: PUSH
11818: LD_INT 82
11820: PUSH
11821: LD_INT 83
11823: PUSH
11824: LD_INT 84
11826: PUSH
11827: LD_INT 85
11829: PUSH
11830: LD_INT 86
11832: PUSH
11833: LD_INT 1
11835: PUSH
11836: LD_INT 2
11838: PUSH
11839: LD_INT 6
11841: PUSH
11842: LD_INT 15
11844: PUSH
11845: LD_INT 16
11847: PUSH
11848: LD_INT 7
11850: PUSH
11851: LD_INT 12
11853: PUSH
11854: LD_INT 13
11856: PUSH
11857: LD_INT 10
11859: PUSH
11860: LD_INT 14
11862: PUSH
11863: LD_INT 20
11865: PUSH
11866: LD_INT 21
11868: PUSH
11869: LD_INT 22
11871: PUSH
11872: LD_INT 25
11874: PUSH
11875: LD_INT 32
11877: PUSH
11878: LD_INT 27
11880: PUSH
11881: LD_INT 36
11883: PUSH
11884: LD_INT 69
11886: PUSH
11887: LD_INT 39
11889: PUSH
11890: LD_INT 34
11892: PUSH
11893: LD_INT 40
11895: PUSH
11896: LD_INT 48
11898: PUSH
11899: LD_INT 49
11901: PUSH
11902: LD_INT 50
11904: PUSH
11905: LD_INT 51
11907: PUSH
11908: LD_INT 52
11910: PUSH
11911: LD_INT 53
11913: PUSH
11914: LD_INT 54
11916: PUSH
11917: LD_INT 55
11919: PUSH
11920: LD_INT 56
11922: PUSH
11923: LD_INT 57
11925: PUSH
11926: LD_INT 58
11928: PUSH
11929: LD_INT 59
11931: PUSH
11932: LD_INT 60
11934: PUSH
11935: LD_INT 61
11937: PUSH
11938: LD_INT 62
11940: PUSH
11941: LD_INT 80
11943: PUSH
11944: LD_INT 82
11946: PUSH
11947: LD_INT 83
11949: PUSH
11950: LD_INT 84
11952: PUSH
11953: LD_INT 85
11955: PUSH
11956: LD_INT 86
11958: PUSH
11959: LD_INT 90
11961: PUSH
11962: LD_INT 93
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: ST_TO_ADDR
12020: GO 12503
12022: LD_INT 2
12024: DOUBLE
12025: EQUAL
12026: IFTRUE 12030
12028: GO 12264
12030: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
12031: LD_ADDR_VAR 0 4
12035: PUSH
12036: LD_INT 35
12038: PUSH
12039: LD_INT 45
12041: PUSH
12042: LD_INT 46
12044: PUSH
12045: LD_INT 47
12047: PUSH
12048: LD_INT 82
12050: PUSH
12051: LD_INT 83
12053: PUSH
12054: LD_INT 84
12056: PUSH
12057: LD_INT 85
12059: PUSH
12060: LD_INT 87
12062: PUSH
12063: LD_INT 70
12065: PUSH
12066: LD_INT 1
12068: PUSH
12069: LD_INT 11
12071: PUSH
12072: LD_INT 3
12074: PUSH
12075: LD_INT 4
12077: PUSH
12078: LD_INT 5
12080: PUSH
12081: LD_INT 6
12083: PUSH
12084: LD_INT 15
12086: PUSH
12087: LD_INT 18
12089: PUSH
12090: LD_INT 7
12092: PUSH
12093: LD_INT 17
12095: PUSH
12096: LD_INT 8
12098: PUSH
12099: LD_INT 20
12101: PUSH
12102: LD_INT 21
12104: PUSH
12105: LD_INT 22
12107: PUSH
12108: LD_INT 72
12110: PUSH
12111: LD_INT 26
12113: PUSH
12114: LD_INT 69
12116: PUSH
12117: LD_INT 39
12119: PUSH
12120: LD_INT 40
12122: PUSH
12123: LD_INT 41
12125: PUSH
12126: LD_INT 42
12128: PUSH
12129: LD_INT 43
12131: PUSH
12132: LD_INT 48
12134: PUSH
12135: LD_INT 49
12137: PUSH
12138: LD_INT 50
12140: PUSH
12141: LD_INT 51
12143: PUSH
12144: LD_INT 52
12146: PUSH
12147: LD_INT 53
12149: PUSH
12150: LD_INT 54
12152: PUSH
12153: LD_INT 55
12155: PUSH
12156: LD_INT 56
12158: PUSH
12159: LD_INT 60
12161: PUSH
12162: LD_INT 61
12164: PUSH
12165: LD_INT 62
12167: PUSH
12168: LD_INT 66
12170: PUSH
12171: LD_INT 67
12173: PUSH
12174: LD_INT 68
12176: PUSH
12177: LD_INT 81
12179: PUSH
12180: LD_INT 82
12182: PUSH
12183: LD_INT 83
12185: PUSH
12186: LD_INT 84
12188: PUSH
12189: LD_INT 85
12191: PUSH
12192: LD_INT 87
12194: PUSH
12195: LD_INT 88
12197: PUSH
12198: LD_INT 92
12200: PUSH
12201: LD_INT 94
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: ST_TO_ADDR
12262: GO 12503
12264: LD_INT 3
12266: DOUBLE
12267: EQUAL
12268: IFTRUE 12272
12270: GO 12502
12272: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
12273: LD_ADDR_VAR 0 4
12277: PUSH
12278: LD_INT 46
12280: PUSH
12281: LD_INT 47
12283: PUSH
12284: LD_INT 1
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: LD_INT 82
12292: PUSH
12293: LD_INT 83
12295: PUSH
12296: LD_INT 84
12298: PUSH
12299: LD_INT 85
12301: PUSH
12302: LD_INT 86
12304: PUSH
12305: LD_INT 11
12307: PUSH
12308: LD_INT 9
12310: PUSH
12311: LD_INT 20
12313: PUSH
12314: LD_INT 19
12316: PUSH
12317: LD_INT 21
12319: PUSH
12320: LD_INT 24
12322: PUSH
12323: LD_INT 22
12325: PUSH
12326: LD_INT 25
12328: PUSH
12329: LD_INT 28
12331: PUSH
12332: LD_INT 29
12334: PUSH
12335: LD_INT 30
12337: PUSH
12338: LD_INT 31
12340: PUSH
12341: LD_INT 37
12343: PUSH
12344: LD_INT 38
12346: PUSH
12347: LD_INT 32
12349: PUSH
12350: LD_INT 27
12352: PUSH
12353: LD_INT 33
12355: PUSH
12356: LD_INT 69
12358: PUSH
12359: LD_INT 39
12361: PUSH
12362: LD_INT 34
12364: PUSH
12365: LD_INT 40
12367: PUSH
12368: LD_INT 71
12370: PUSH
12371: LD_INT 23
12373: PUSH
12374: LD_INT 44
12376: PUSH
12377: LD_INT 48
12379: PUSH
12380: LD_INT 49
12382: PUSH
12383: LD_INT 50
12385: PUSH
12386: LD_INT 51
12388: PUSH
12389: LD_INT 52
12391: PUSH
12392: LD_INT 53
12394: PUSH
12395: LD_INT 54
12397: PUSH
12398: LD_INT 55
12400: PUSH
12401: LD_INT 56
12403: PUSH
12404: LD_INT 57
12406: PUSH
12407: LD_INT 58
12409: PUSH
12410: LD_INT 59
12412: PUSH
12413: LD_INT 63
12415: PUSH
12416: LD_INT 64
12418: PUSH
12419: LD_INT 65
12421: PUSH
12422: LD_INT 82
12424: PUSH
12425: LD_INT 83
12427: PUSH
12428: LD_INT 84
12430: PUSH
12431: LD_INT 85
12433: PUSH
12434: LD_INT 86
12436: PUSH
12437: LD_INT 89
12439: PUSH
12440: LD_INT 91
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: ST_TO_ADDR
12500: GO 12503
12502: POP
// if state > - 1 and state < 3 then
12503: LD_VAR 0 3
12507: PUSH
12508: LD_INT 1
12510: NEG
12511: GREATER
12512: IFFALSE 12524
12514: PUSH
12515: LD_VAR 0 3
12519: PUSH
12520: LD_INT 3
12522: LESS
12523: AND
12524: IFFALSE 12581
// for i in result do
12526: LD_ADDR_VAR 0 5
12530: PUSH
12531: LD_VAR 0 4
12535: PUSH
12536: FOR_IN
12537: IFFALSE 12579
// if GetTech ( i , side ) <> state then
12539: LD_VAR 0 5
12543: PPUSH
12544: LD_VAR 0 1
12548: PPUSH
12549: CALL_OW 321
12553: PUSH
12554: LD_VAR 0 3
12558: NONEQUAL
12559: IFFALSE 12577
// result := result diff i ;
12561: LD_ADDR_VAR 0 4
12565: PUSH
12566: LD_VAR 0 4
12570: PUSH
12571: LD_VAR 0 5
12575: DIFF
12576: ST_TO_ADDR
12577: GO 12536
12579: POP
12580: POP
// end ;
12581: LD_VAR 0 4
12585: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12586: LD_INT 0
12588: PPUSH
12589: PPUSH
12590: PPUSH
// result := true ;
12591: LD_ADDR_VAR 0 3
12595: PUSH
12596: LD_INT 1
12598: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12599: LD_ADDR_VAR 0 5
12603: PUSH
12604: LD_VAR 0 2
12608: PPUSH
12609: CALL_OW 480
12613: ST_TO_ADDR
// if not tmp then
12614: LD_VAR 0 5
12618: NOT
12619: IFFALSE 12623
// exit ;
12621: GO 12672
// for i in tmp do
12623: LD_ADDR_VAR 0 4
12627: PUSH
12628: LD_VAR 0 5
12632: PUSH
12633: FOR_IN
12634: IFFALSE 12670
// if GetTech ( i , side ) <> state_researched then
12636: LD_VAR 0 4
12640: PPUSH
12641: LD_VAR 0 1
12645: PPUSH
12646: CALL_OW 321
12650: PUSH
12651: LD_INT 2
12653: NONEQUAL
12654: IFFALSE 12668
// begin result := false ;
12656: LD_ADDR_VAR 0 3
12660: PUSH
12661: LD_INT 0
12663: ST_TO_ADDR
// exit ;
12664: POP
12665: POP
12666: GO 12672
// end ;
12668: GO 12633
12670: POP
12671: POP
// end ;
12672: LD_VAR 0 3
12676: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12677: LD_INT 0
12679: PPUSH
12680: PPUSH
12681: PPUSH
12682: PPUSH
12683: PPUSH
12684: PPUSH
12685: PPUSH
12686: PPUSH
12687: PPUSH
12688: PPUSH
12689: PPUSH
12690: PPUSH
12691: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12692: LD_VAR 0 1
12696: NOT
12697: IFTRUE 12714
12699: PUSH
12700: LD_VAR 0 1
12704: PPUSH
12705: CALL_OW 257
12709: PUSH
12710: LD_INT 9
12712: NONEQUAL
12713: OR
12714: IFFALSE 12718
// exit ;
12716: GO 13297
// side := GetSide ( unit ) ;
12718: LD_ADDR_VAR 0 9
12722: PUSH
12723: LD_VAR 0 1
12727: PPUSH
12728: CALL_OW 255
12732: ST_TO_ADDR
// tech_space := tech_spacanom ;
12733: LD_ADDR_VAR 0 12
12737: PUSH
12738: LD_INT 29
12740: ST_TO_ADDR
// tech_time := tech_taurad ;
12741: LD_ADDR_VAR 0 13
12745: PUSH
12746: LD_INT 28
12748: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12749: LD_ADDR_VAR 0 11
12753: PUSH
12754: LD_VAR 0 1
12758: PPUSH
12759: CALL_OW 310
12763: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12764: LD_VAR 0 11
12768: PPUSH
12769: CALL_OW 247
12773: PUSH
12774: LD_INT 2
12776: EQUAL
12777: IFFALSE 12781
// exit ;
12779: GO 13297
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12781: LD_ADDR_VAR 0 8
12785: PUSH
12786: LD_INT 81
12788: PUSH
12789: LD_VAR 0 9
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 3
12800: PUSH
12801: LD_INT 21
12803: PUSH
12804: LD_INT 3
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PPUSH
12819: CALL_OW 69
12823: ST_TO_ADDR
// if not tmp then
12824: LD_VAR 0 8
12828: NOT
12829: IFFALSE 12833
// exit ;
12831: GO 13297
// if in_unit then
12833: LD_VAR 0 11
12837: IFFALSE 12861
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12839: LD_ADDR_VAR 0 10
12843: PUSH
12844: LD_VAR 0 8
12848: PPUSH
12849: LD_VAR 0 11
12853: PPUSH
12854: CALL_OW 74
12858: ST_TO_ADDR
12859: GO 12881
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12861: LD_ADDR_VAR 0 10
12865: PUSH
12866: LD_VAR 0 8
12870: PPUSH
12871: LD_VAR 0 1
12875: PPUSH
12876: CALL_OW 74
12880: ST_TO_ADDR
// if not enemy then
12881: LD_VAR 0 10
12885: NOT
12886: IFFALSE 12890
// exit ;
12888: GO 13297
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12890: LD_VAR 0 11
12894: IFFALSE 12916
12896: PUSH
12897: LD_VAR 0 11
12901: PPUSH
12902: LD_VAR 0 10
12906: PPUSH
12907: CALL_OW 296
12911: PUSH
12912: LD_INT 13
12914: GREATER
12915: AND
12916: IFTRUE 12938
12918: PUSH
12919: LD_VAR 0 1
12923: PPUSH
12924: LD_VAR 0 10
12928: PPUSH
12929: CALL_OW 296
12933: PUSH
12934: LD_INT 12
12936: GREATER
12937: OR
12938: IFFALSE 12942
// exit ;
12940: GO 13297
// missile := [ 1 ] ;
12942: LD_ADDR_VAR 0 14
12946: PUSH
12947: LD_INT 1
12949: PUSH
12950: EMPTY
12951: LIST
12952: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12953: LD_VAR 0 9
12957: PPUSH
12958: LD_VAR 0 12
12962: PPUSH
12963: CALL_OW 325
12967: IFFALSE 12996
// missile := Replace ( missile , missile + 1 , 2 ) ;
12969: LD_ADDR_VAR 0 14
12973: PUSH
12974: LD_VAR 0 14
12978: PPUSH
12979: LD_VAR 0 14
12983: PUSH
12984: LD_INT 1
12986: PLUS
12987: PPUSH
12988: LD_INT 2
12990: PPUSH
12991: CALL_OW 1
12995: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12996: LD_VAR 0 9
13000: PPUSH
13001: LD_VAR 0 13
13005: PPUSH
13006: CALL_OW 325
13010: IFFALSE 13034
13012: PUSH
13013: LD_VAR 0 10
13017: PPUSH
13018: CALL_OW 255
13022: PPUSH
13023: LD_VAR 0 13
13027: PPUSH
13028: CALL_OW 325
13032: NOT
13033: AND
13034: IFFALSE 13063
// missile := Replace ( missile , missile + 1 , 3 ) ;
13036: LD_ADDR_VAR 0 14
13040: PUSH
13041: LD_VAR 0 14
13045: PPUSH
13046: LD_VAR 0 14
13050: PUSH
13051: LD_INT 1
13053: PLUS
13054: PPUSH
13055: LD_INT 3
13057: PPUSH
13058: CALL_OW 1
13062: ST_TO_ADDR
// if missile < 2 then
13063: LD_VAR 0 14
13067: PUSH
13068: LD_INT 2
13070: LESS
13071: IFFALSE 13075
// exit ;
13073: GO 13297
// x := GetX ( enemy ) ;
13075: LD_ADDR_VAR 0 4
13079: PUSH
13080: LD_VAR 0 10
13084: PPUSH
13085: CALL_OW 250
13089: ST_TO_ADDR
// y := GetY ( enemy ) ;
13090: LD_ADDR_VAR 0 5
13094: PUSH
13095: LD_VAR 0 10
13099: PPUSH
13100: CALL_OW 251
13104: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
13105: LD_ADDR_VAR 0 6
13109: PUSH
13110: LD_VAR 0 4
13114: PUSH
13115: LD_INT 1
13117: NEG
13118: PPUSH
13119: LD_INT 1
13121: PPUSH
13122: CALL_OW 12
13126: PLUS
13127: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
13128: LD_ADDR_VAR 0 7
13132: PUSH
13133: LD_VAR 0 5
13137: PUSH
13138: LD_INT 1
13140: NEG
13141: PPUSH
13142: LD_INT 1
13144: PPUSH
13145: CALL_OW 12
13149: PLUS
13150: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13151: LD_VAR 0 6
13155: PPUSH
13156: LD_VAR 0 7
13160: PPUSH
13161: CALL_OW 488
13165: NOT
13166: IFFALSE 13188
// begin _x := x ;
13168: LD_ADDR_VAR 0 6
13172: PUSH
13173: LD_VAR 0 4
13177: ST_TO_ADDR
// _y := y ;
13178: LD_ADDR_VAR 0 7
13182: PUSH
13183: LD_VAR 0 5
13187: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
13188: LD_ADDR_VAR 0 3
13192: PUSH
13193: LD_INT 1
13195: PPUSH
13196: LD_VAR 0 14
13200: PPUSH
13201: CALL_OW 12
13205: ST_TO_ADDR
// case i of 1 :
13206: LD_VAR 0 3
13210: PUSH
13211: LD_INT 1
13213: DOUBLE
13214: EQUAL
13215: IFTRUE 13219
13217: GO 13236
13219: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
13220: LD_VAR 0 1
13224: PPUSH
13225: LD_VAR 0 10
13229: PPUSH
13230: CALL_OW 115
13234: GO 13297
13236: LD_INT 2
13238: DOUBLE
13239: EQUAL
13240: IFTRUE 13244
13242: GO 13266
13244: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
13245: LD_VAR 0 1
13249: PPUSH
13250: LD_VAR 0 6
13254: PPUSH
13255: LD_VAR 0 7
13259: PPUSH
13260: CALL_OW 153
13264: GO 13297
13266: LD_INT 3
13268: DOUBLE
13269: EQUAL
13270: IFTRUE 13274
13272: GO 13296
13274: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
13275: LD_VAR 0 1
13279: PPUSH
13280: LD_VAR 0 6
13284: PPUSH
13285: LD_VAR 0 7
13289: PPUSH
13290: CALL_OW 154
13294: GO 13297
13296: POP
// end ;
13297: LD_VAR 0 2
13301: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
13302: LD_INT 0
13304: PPUSH
13305: PPUSH
13306: PPUSH
13307: PPUSH
13308: PPUSH
13309: PPUSH
// if not unit or not building then
13310: LD_VAR 0 1
13314: NOT
13315: IFTRUE 13324
13317: PUSH
13318: LD_VAR 0 2
13322: NOT
13323: OR
13324: IFFALSE 13328
// exit ;
13326: GO 13486
// x := GetX ( building ) ;
13328: LD_ADDR_VAR 0 5
13332: PUSH
13333: LD_VAR 0 2
13337: PPUSH
13338: CALL_OW 250
13342: ST_TO_ADDR
// y := GetY ( building ) ;
13343: LD_ADDR_VAR 0 6
13347: PUSH
13348: LD_VAR 0 2
13352: PPUSH
13353: CALL_OW 251
13357: ST_TO_ADDR
// for i := 0 to 5 do
13358: LD_ADDR_VAR 0 4
13362: PUSH
13363: DOUBLE
13364: LD_INT 0
13366: DEC
13367: ST_TO_ADDR
13368: LD_INT 5
13370: PUSH
13371: FOR_TO
13372: IFFALSE 13484
// begin _x := ShiftX ( x , i , 3 ) ;
13374: LD_ADDR_VAR 0 7
13378: PUSH
13379: LD_VAR 0 5
13383: PPUSH
13384: LD_VAR 0 4
13388: PPUSH
13389: LD_INT 3
13391: PPUSH
13392: CALL_OW 272
13396: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13397: LD_ADDR_VAR 0 8
13401: PUSH
13402: LD_VAR 0 6
13406: PPUSH
13407: LD_VAR 0 4
13411: PPUSH
13412: LD_INT 3
13414: PPUSH
13415: CALL_OW 273
13419: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13420: LD_VAR 0 7
13424: PPUSH
13425: LD_VAR 0 8
13429: PPUSH
13430: CALL_OW 488
13434: NOT
13435: IFFALSE 13439
// continue ;
13437: GO 13371
// if HexInfo ( _x , _y ) = 0 then
13439: LD_VAR 0 7
13443: PPUSH
13444: LD_VAR 0 8
13448: PPUSH
13449: CALL_OW 428
13453: PUSH
13454: LD_INT 0
13456: EQUAL
13457: IFFALSE 13482
// begin ComMoveXY ( unit , _x , _y ) ;
13459: LD_VAR 0 1
13463: PPUSH
13464: LD_VAR 0 7
13468: PPUSH
13469: LD_VAR 0 8
13473: PPUSH
13474: CALL_OW 111
// exit ;
13478: POP
13479: POP
13480: GO 13486
// end ; end ;
13482: GO 13371
13484: POP
13485: POP
// end ;
13486: LD_VAR 0 3
13490: RET
// export function ScanBase ( side , base_area ) ; begin
13491: LD_INT 0
13493: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13494: LD_ADDR_VAR 0 3
13498: PUSH
13499: LD_VAR 0 2
13503: PPUSH
13504: LD_INT 81
13506: PUSH
13507: LD_VAR 0 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PPUSH
13516: CALL_OW 70
13520: ST_TO_ADDR
// end ;
13521: LD_VAR 0 3
13525: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13526: LD_INT 0
13528: PPUSH
13529: PPUSH
13530: PPUSH
13531: PPUSH
// result := false ;
13532: LD_ADDR_VAR 0 2
13536: PUSH
13537: LD_INT 0
13539: ST_TO_ADDR
// side := GetSide ( unit ) ;
13540: LD_ADDR_VAR 0 3
13544: PUSH
13545: LD_VAR 0 1
13549: PPUSH
13550: CALL_OW 255
13554: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13555: LD_ADDR_VAR 0 4
13559: PUSH
13560: LD_VAR 0 1
13564: PPUSH
13565: CALL_OW 248
13569: ST_TO_ADDR
// case nat of 1 :
13570: LD_VAR 0 4
13574: PUSH
13575: LD_INT 1
13577: DOUBLE
13578: EQUAL
13579: IFTRUE 13583
13581: GO 13594
13583: POP
// tech := tech_lassight ; 2 :
13584: LD_ADDR_VAR 0 5
13588: PUSH
13589: LD_INT 12
13591: ST_TO_ADDR
13592: GO 13633
13594: LD_INT 2
13596: DOUBLE
13597: EQUAL
13598: IFTRUE 13602
13600: GO 13613
13602: POP
// tech := tech_mortar ; 3 :
13603: LD_ADDR_VAR 0 5
13607: PUSH
13608: LD_INT 41
13610: ST_TO_ADDR
13611: GO 13633
13613: LD_INT 3
13615: DOUBLE
13616: EQUAL
13617: IFTRUE 13621
13619: GO 13632
13621: POP
// tech := tech_bazooka ; end ;
13622: LD_ADDR_VAR 0 5
13626: PUSH
13627: LD_INT 44
13629: ST_TO_ADDR
13630: GO 13633
13632: POP
// if Researched ( side , tech ) then
13633: LD_VAR 0 3
13637: PPUSH
13638: LD_VAR 0 5
13642: PPUSH
13643: CALL_OW 325
13647: IFFALSE 13674
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13649: LD_ADDR_VAR 0 2
13653: PUSH
13654: LD_INT 5
13656: PUSH
13657: LD_INT 8
13659: PUSH
13660: LD_INT 9
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: PUSH
13668: LD_VAR 0 4
13672: ARRAY
13673: ST_TO_ADDR
// end ;
13674: LD_VAR 0 2
13678: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13679: LD_INT 0
13681: PPUSH
13682: PPUSH
13683: PPUSH
// if not mines then
13684: LD_VAR 0 2
13688: NOT
13689: IFFALSE 13693
// exit ;
13691: GO 13837
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13693: LD_ADDR_VAR 0 5
13697: PUSH
13698: LD_INT 81
13700: PUSH
13701: LD_VAR 0 1
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 3
13712: PUSH
13713: LD_INT 21
13715: PUSH
13716: LD_INT 3
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PPUSH
13731: CALL_OW 69
13735: ST_TO_ADDR
// for i in mines do
13736: LD_ADDR_VAR 0 4
13740: PUSH
13741: LD_VAR 0 2
13745: PUSH
13746: FOR_IN
13747: IFFALSE 13835
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13749: LD_VAR 0 4
13753: PUSH
13754: LD_INT 1
13756: ARRAY
13757: PPUSH
13758: LD_VAR 0 4
13762: PUSH
13763: LD_INT 2
13765: ARRAY
13766: PPUSH
13767: CALL_OW 458
13771: NOT
13772: IFFALSE 13776
// continue ;
13774: GO 13746
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13776: LD_VAR 0 4
13780: PUSH
13781: LD_INT 1
13783: ARRAY
13784: PPUSH
13785: LD_VAR 0 4
13789: PUSH
13790: LD_INT 2
13792: ARRAY
13793: PPUSH
13794: CALL_OW 428
13798: PUSH
13799: LD_VAR 0 5
13803: IN
13804: IFFALSE 13833
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13806: LD_VAR 0 4
13810: PUSH
13811: LD_INT 1
13813: ARRAY
13814: PPUSH
13815: LD_VAR 0 4
13819: PUSH
13820: LD_INT 2
13822: ARRAY
13823: PPUSH
13824: LD_VAR 0 1
13828: PPUSH
13829: CALL_OW 456
// end ;
13833: GO 13746
13835: POP
13836: POP
// end ;
13837: LD_VAR 0 3
13841: RET
// export function Count ( array ) ; begin
13842: LD_INT 0
13844: PPUSH
// result := array + 0 ;
13845: LD_ADDR_VAR 0 2
13849: PUSH
13850: LD_VAR 0 1
13854: PUSH
13855: LD_INT 0
13857: PLUS
13858: ST_TO_ADDR
// end ;
13859: LD_VAR 0 2
13863: RET
// export function IsEmpty ( building ) ; begin
13864: LD_INT 0
13866: PPUSH
// if not building then
13867: LD_VAR 0 1
13871: NOT
13872: IFFALSE 13876
// exit ;
13874: GO 13919
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13876: LD_ADDR_VAR 0 2
13880: PUSH
13881: LD_VAR 0 1
13885: PUSH
13886: LD_INT 22
13888: PUSH
13889: LD_VAR 0 1
13893: PPUSH
13894: CALL_OW 255
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 58
13905: PUSH
13906: EMPTY
13907: LIST
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PPUSH
13913: CALL_OW 69
13917: IN
13918: ST_TO_ADDR
// end ;
13919: LD_VAR 0 2
13923: RET
// export function IsNotFull ( building ) ; var places ; begin
13924: LD_INT 0
13926: PPUSH
13927: PPUSH
// if not building then
13928: LD_VAR 0 1
13932: NOT
13933: IFFALSE 13937
// exit ;
13935: GO 13965
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13937: LD_ADDR_VAR 0 2
13941: PUSH
13942: LD_VAR 0 1
13946: PPUSH
13947: LD_INT 3
13949: PUSH
13950: LD_INT 62
13952: PUSH
13953: EMPTY
13954: LIST
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PPUSH
13960: CALL_OW 72
13964: ST_TO_ADDR
// end ;
13965: LD_VAR 0 2
13969: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13970: LD_INT 0
13972: PPUSH
13973: PPUSH
13974: PPUSH
13975: PPUSH
// tmp := [ ] ;
13976: LD_ADDR_VAR 0 3
13980: PUSH
13981: EMPTY
13982: ST_TO_ADDR
// list := [ ] ;
13983: LD_ADDR_VAR 0 5
13987: PUSH
13988: EMPTY
13989: ST_TO_ADDR
// for i = 16 to 25 do
13990: LD_ADDR_VAR 0 4
13994: PUSH
13995: DOUBLE
13996: LD_INT 16
13998: DEC
13999: ST_TO_ADDR
14000: LD_INT 25
14002: PUSH
14003: FOR_TO
14004: IFFALSE 14077
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
14006: LD_ADDR_VAR 0 3
14010: PUSH
14011: LD_VAR 0 3
14015: PUSH
14016: LD_INT 22
14018: PUSH
14019: LD_VAR 0 1
14023: PPUSH
14024: CALL_OW 255
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 91
14035: PUSH
14036: LD_VAR 0 1
14040: PUSH
14041: LD_INT 6
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 30
14051: PUSH
14052: LD_VAR 0 4
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: LIST
14065: PUSH
14066: EMPTY
14067: LIST
14068: PPUSH
14069: CALL_OW 69
14073: ADD
14074: ST_TO_ADDR
14075: GO 14003
14077: POP
14078: POP
// for i = 1 to tmp do
14079: LD_ADDR_VAR 0 4
14083: PUSH
14084: DOUBLE
14085: LD_INT 1
14087: DEC
14088: ST_TO_ADDR
14089: LD_VAR 0 3
14093: PUSH
14094: FOR_TO
14095: IFFALSE 14183
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
14097: LD_ADDR_VAR 0 5
14101: PUSH
14102: LD_VAR 0 5
14106: PUSH
14107: LD_VAR 0 3
14111: PUSH
14112: LD_VAR 0 4
14116: ARRAY
14117: PPUSH
14118: CALL_OW 266
14122: PUSH
14123: LD_VAR 0 3
14127: PUSH
14128: LD_VAR 0 4
14132: ARRAY
14133: PPUSH
14134: CALL_OW 250
14138: PUSH
14139: LD_VAR 0 3
14143: PUSH
14144: LD_VAR 0 4
14148: ARRAY
14149: PPUSH
14150: CALL_OW 251
14154: PUSH
14155: LD_VAR 0 3
14159: PUSH
14160: LD_VAR 0 4
14164: ARRAY
14165: PPUSH
14166: CALL_OW 254
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: PUSH
14177: EMPTY
14178: LIST
14179: ADD
14180: ST_TO_ADDR
14181: GO 14094
14183: POP
14184: POP
// result := list ;
14185: LD_ADDR_VAR 0 2
14189: PUSH
14190: LD_VAR 0 5
14194: ST_TO_ADDR
// end ;
14195: LD_VAR 0 2
14199: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
14200: LD_INT 0
14202: PPUSH
14203: PPUSH
14204: PPUSH
14205: PPUSH
14206: PPUSH
14207: PPUSH
14208: PPUSH
// if not factory then
14209: LD_VAR 0 1
14213: NOT
14214: IFFALSE 14218
// exit ;
14216: GO 14821
// if control = control_apeman then
14218: LD_VAR 0 4
14222: PUSH
14223: LD_INT 5
14225: EQUAL
14226: IFFALSE 14335
// begin tmp := UnitsInside ( factory ) ;
14228: LD_ADDR_VAR 0 8
14232: PUSH
14233: LD_VAR 0 1
14237: PPUSH
14238: CALL_OW 313
14242: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
14243: LD_VAR 0 8
14247: PPUSH
14248: LD_INT 25
14250: PUSH
14251: LD_INT 12
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PPUSH
14258: CALL_OW 72
14262: NOT
14263: IFFALSE 14273
// control := control_manual ;
14265: LD_ADDR_VAR 0 4
14269: PUSH
14270: LD_INT 1
14272: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
14273: LD_ADDR_VAR 0 8
14277: PUSH
14278: LD_VAR 0 1
14282: PPUSH
14283: CALL 13970 0 1
14287: ST_TO_ADDR
// if tmp then
14288: LD_VAR 0 8
14292: IFFALSE 14335
// begin for i in tmp do
14294: LD_ADDR_VAR 0 7
14298: PUSH
14299: LD_VAR 0 8
14303: PUSH
14304: FOR_IN
14305: IFFALSE 14333
// if i [ 1 ] = b_ext_radio then
14307: LD_VAR 0 7
14311: PUSH
14312: LD_INT 1
14314: ARRAY
14315: PUSH
14316: LD_INT 22
14318: EQUAL
14319: IFFALSE 14331
// begin control := control_remote ;
14321: LD_ADDR_VAR 0 4
14325: PUSH
14326: LD_INT 2
14328: ST_TO_ADDR
// break ;
14329: GO 14333
// end ;
14331: GO 14304
14333: POP
14334: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14335: LD_VAR 0 1
14339: PPUSH
14340: LD_VAR 0 2
14344: PPUSH
14345: LD_VAR 0 3
14349: PPUSH
14350: LD_VAR 0 4
14354: PPUSH
14355: LD_VAR 0 5
14359: PPUSH
14360: CALL_OW 448
14364: IFFALSE 14399
// begin result := [ chassis , engine , control , weapon ] ;
14366: LD_ADDR_VAR 0 6
14370: PUSH
14371: LD_VAR 0 2
14375: PUSH
14376: LD_VAR 0 3
14380: PUSH
14381: LD_VAR 0 4
14385: PUSH
14386: LD_VAR 0 5
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: ST_TO_ADDR
// exit ;
14397: GO 14821
// end ; _chassis := AvailableChassisList ( factory ) ;
14399: LD_ADDR_VAR 0 9
14403: PUSH
14404: LD_VAR 0 1
14408: PPUSH
14409: CALL_OW 475
14413: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14414: LD_ADDR_VAR 0 11
14418: PUSH
14419: LD_VAR 0 1
14423: PPUSH
14424: CALL_OW 476
14428: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14429: LD_ADDR_VAR 0 12
14433: PUSH
14434: LD_VAR 0 1
14438: PPUSH
14439: CALL_OW 477
14443: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14444: LD_ADDR_VAR 0 10
14448: PUSH
14449: LD_VAR 0 1
14453: PPUSH
14454: CALL_OW 478
14458: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
14459: LD_VAR 0 9
14463: NOT
14464: IFTRUE 14473
14466: PUSH
14467: LD_VAR 0 11
14471: NOT
14472: OR
14473: IFTRUE 14482
14475: PUSH
14476: LD_VAR 0 12
14480: NOT
14481: OR
14482: IFTRUE 14491
14484: PUSH
14485: LD_VAR 0 10
14489: NOT
14490: OR
14491: IFFALSE 14526
// begin result := [ chassis , engine , control , weapon ] ;
14493: LD_ADDR_VAR 0 6
14497: PUSH
14498: LD_VAR 0 2
14502: PUSH
14503: LD_VAR 0 3
14507: PUSH
14508: LD_VAR 0 4
14512: PUSH
14513: LD_VAR 0 5
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: ST_TO_ADDR
// exit ;
14524: GO 14821
// end ; if not chassis in _chassis then
14526: LD_VAR 0 2
14530: PUSH
14531: LD_VAR 0 9
14535: IN
14536: NOT
14537: IFFALSE 14563
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14539: LD_ADDR_VAR 0 2
14543: PUSH
14544: LD_VAR 0 9
14548: PUSH
14549: LD_INT 1
14551: PPUSH
14552: LD_VAR 0 9
14556: PPUSH
14557: CALL_OW 12
14561: ARRAY
14562: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14563: LD_VAR 0 2
14567: PPUSH
14568: LD_VAR 0 3
14572: PPUSH
14573: CALL 14826 0 2
14577: NOT
14578: IFFALSE 14639
// repeat engine := _engine [ 1 ] ;
14580: LD_ADDR_VAR 0 3
14584: PUSH
14585: LD_VAR 0 11
14589: PUSH
14590: LD_INT 1
14592: ARRAY
14593: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14594: LD_ADDR_VAR 0 11
14598: PUSH
14599: LD_VAR 0 11
14603: PPUSH
14604: LD_INT 1
14606: PPUSH
14607: CALL_OW 3
14611: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14612: LD_VAR 0 2
14616: PPUSH
14617: LD_VAR 0 3
14621: PPUSH
14622: CALL 14826 0 2
14626: IFTRUE 14637
14628: PUSH
14629: LD_VAR 0 11
14633: PUSH
14634: EMPTY
14635: EQUAL
14636: OR
14637: IFFALSE 14580
// if not control in _control then
14639: LD_VAR 0 4
14643: PUSH
14644: LD_VAR 0 12
14648: IN
14649: NOT
14650: IFFALSE 14676
// control := _control [ rand ( 1 , _control ) ] ;
14652: LD_ADDR_VAR 0 4
14656: PUSH
14657: LD_VAR 0 12
14661: PUSH
14662: LD_INT 1
14664: PPUSH
14665: LD_VAR 0 12
14669: PPUSH
14670: CALL_OW 12
14674: ARRAY
14675: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14676: LD_VAR 0 2
14680: PPUSH
14681: LD_VAR 0 5
14685: PPUSH
14686: CALL 15048 0 2
14690: NOT
14691: IFFALSE 14752
// repeat weapon := _weapon [ 1 ] ;
14693: LD_ADDR_VAR 0 5
14697: PUSH
14698: LD_VAR 0 10
14702: PUSH
14703: LD_INT 1
14705: ARRAY
14706: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14707: LD_ADDR_VAR 0 10
14711: PUSH
14712: LD_VAR 0 10
14716: PPUSH
14717: LD_INT 1
14719: PPUSH
14720: CALL_OW 3
14724: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14725: LD_VAR 0 2
14729: PPUSH
14730: LD_VAR 0 5
14734: PPUSH
14735: CALL 15048 0 2
14739: IFTRUE 14750
14741: PUSH
14742: LD_VAR 0 10
14746: PUSH
14747: EMPTY
14748: EQUAL
14749: OR
14750: IFFALSE 14693
// result := [ ] ;
14752: LD_ADDR_VAR 0 6
14756: PUSH
14757: EMPTY
14758: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14759: LD_VAR 0 1
14763: PPUSH
14764: LD_VAR 0 2
14768: PPUSH
14769: LD_VAR 0 3
14773: PPUSH
14774: LD_VAR 0 4
14778: PPUSH
14779: LD_VAR 0 5
14783: PPUSH
14784: CALL_OW 448
14788: IFFALSE 14821
// result := [ chassis , engine , control , weapon ] ;
14790: LD_ADDR_VAR 0 6
14794: PUSH
14795: LD_VAR 0 2
14799: PUSH
14800: LD_VAR 0 3
14804: PUSH
14805: LD_VAR 0 4
14809: PUSH
14810: LD_VAR 0 5
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: ST_TO_ADDR
// end ;
14821: LD_VAR 0 6
14825: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14826: LD_INT 0
14828: PPUSH
// if not chassis or not engine then
14829: LD_VAR 0 1
14833: NOT
14834: IFTRUE 14843
14836: PUSH
14837: LD_VAR 0 2
14841: NOT
14842: OR
14843: IFFALSE 14847
// exit ;
14845: GO 15043
// case engine of engine_solar :
14847: LD_VAR 0 2
14851: PUSH
14852: LD_INT 2
14854: DOUBLE
14855: EQUAL
14856: IFTRUE 14860
14858: GO 14898
14860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14861: LD_ADDR_VAR 0 3
14865: PUSH
14866: LD_INT 11
14868: PUSH
14869: LD_INT 12
14871: PUSH
14872: LD_INT 13
14874: PUSH
14875: LD_INT 14
14877: PUSH
14878: LD_INT 1
14880: PUSH
14881: LD_INT 2
14883: PUSH
14884: LD_INT 3
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: ST_TO_ADDR
14896: GO 15027
14898: LD_INT 1
14900: DOUBLE
14901: EQUAL
14902: IFTRUE 14906
14904: GO 14968
14906: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14907: LD_ADDR_VAR 0 3
14911: PUSH
14912: LD_INT 11
14914: PUSH
14915: LD_INT 12
14917: PUSH
14918: LD_INT 13
14920: PUSH
14921: LD_INT 14
14923: PUSH
14924: LD_INT 1
14926: PUSH
14927: LD_INT 2
14929: PUSH
14930: LD_INT 3
14932: PUSH
14933: LD_INT 4
14935: PUSH
14936: LD_INT 5
14938: PUSH
14939: LD_INT 21
14941: PUSH
14942: LD_INT 23
14944: PUSH
14945: LD_INT 22
14947: PUSH
14948: LD_INT 24
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: ST_TO_ADDR
14966: GO 15027
14968: LD_INT 3
14970: DOUBLE
14971: EQUAL
14972: IFTRUE 14976
14974: GO 15026
14976: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14977: LD_ADDR_VAR 0 3
14981: PUSH
14982: LD_INT 13
14984: PUSH
14985: LD_INT 14
14987: PUSH
14988: LD_INT 2
14990: PUSH
14991: LD_INT 3
14993: PUSH
14994: LD_INT 4
14996: PUSH
14997: LD_INT 5
14999: PUSH
15000: LD_INT 21
15002: PUSH
15003: LD_INT 22
15005: PUSH
15006: LD_INT 23
15008: PUSH
15009: LD_INT 24
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: ST_TO_ADDR
15024: GO 15027
15026: POP
// result := ( chassis in result ) ;
15027: LD_ADDR_VAR 0 3
15031: PUSH
15032: LD_VAR 0 1
15036: PUSH
15037: LD_VAR 0 3
15041: IN
15042: ST_TO_ADDR
// end ;
15043: LD_VAR 0 3
15047: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
15048: LD_INT 0
15050: PPUSH
// if not chassis or not weapon then
15051: LD_VAR 0 1
15055: NOT
15056: IFTRUE 15065
15058: PUSH
15059: LD_VAR 0 2
15063: NOT
15064: OR
15065: IFFALSE 15069
// exit ;
15067: GO 16163
// case weapon of us_machine_gun :
15069: LD_VAR 0 2
15073: PUSH
15074: LD_INT 2
15076: DOUBLE
15077: EQUAL
15078: IFTRUE 15082
15080: GO 15112
15082: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
15083: LD_ADDR_VAR 0 3
15087: PUSH
15088: LD_INT 1
15090: PUSH
15091: LD_INT 2
15093: PUSH
15094: LD_INT 3
15096: PUSH
15097: LD_INT 4
15099: PUSH
15100: LD_INT 5
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: ST_TO_ADDR
15110: GO 16147
15112: LD_INT 3
15114: DOUBLE
15115: EQUAL
15116: IFTRUE 15120
15118: GO 15150
15120: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
15121: LD_ADDR_VAR 0 3
15125: PUSH
15126: LD_INT 1
15128: PUSH
15129: LD_INT 2
15131: PUSH
15132: LD_INT 3
15134: PUSH
15135: LD_INT 4
15137: PUSH
15138: LD_INT 5
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: ST_TO_ADDR
15148: GO 16147
15150: LD_INT 11
15152: DOUBLE
15153: EQUAL
15154: IFTRUE 15158
15156: GO 15188
15158: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
15159: LD_ADDR_VAR 0 3
15163: PUSH
15164: LD_INT 1
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: LD_INT 3
15172: PUSH
15173: LD_INT 4
15175: PUSH
15176: LD_INT 5
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: ST_TO_ADDR
15186: GO 16147
15188: LD_INT 4
15190: DOUBLE
15191: EQUAL
15192: IFTRUE 15196
15194: GO 15222
15196: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
15197: LD_ADDR_VAR 0 3
15201: PUSH
15202: LD_INT 2
15204: PUSH
15205: LD_INT 3
15207: PUSH
15208: LD_INT 4
15210: PUSH
15211: LD_INT 5
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: ST_TO_ADDR
15220: GO 16147
15222: LD_INT 5
15224: DOUBLE
15225: EQUAL
15226: IFTRUE 15230
15228: GO 15256
15230: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
15231: LD_ADDR_VAR 0 3
15235: PUSH
15236: LD_INT 2
15238: PUSH
15239: LD_INT 3
15241: PUSH
15242: LD_INT 4
15244: PUSH
15245: LD_INT 5
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: ST_TO_ADDR
15254: GO 16147
15256: LD_INT 9
15258: DOUBLE
15259: EQUAL
15260: IFTRUE 15264
15262: GO 15290
15264: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
15265: LD_ADDR_VAR 0 3
15269: PUSH
15270: LD_INT 2
15272: PUSH
15273: LD_INT 3
15275: PUSH
15276: LD_INT 4
15278: PUSH
15279: LD_INT 5
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: ST_TO_ADDR
15288: GO 16147
15290: LD_INT 7
15292: DOUBLE
15293: EQUAL
15294: IFTRUE 15298
15296: GO 15324
15298: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15299: LD_ADDR_VAR 0 3
15303: PUSH
15304: LD_INT 2
15306: PUSH
15307: LD_INT 3
15309: PUSH
15310: LD_INT 4
15312: PUSH
15313: LD_INT 5
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: ST_TO_ADDR
15322: GO 16147
15324: LD_INT 12
15326: DOUBLE
15327: EQUAL
15328: IFTRUE 15332
15330: GO 15358
15332: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15333: LD_ADDR_VAR 0 3
15337: PUSH
15338: LD_INT 2
15340: PUSH
15341: LD_INT 3
15343: PUSH
15344: LD_INT 4
15346: PUSH
15347: LD_INT 5
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: ST_TO_ADDR
15356: GO 16147
15358: LD_INT 13
15360: DOUBLE
15361: EQUAL
15362: IFTRUE 15366
15364: GO 15392
15366: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15367: LD_ADDR_VAR 0 3
15371: PUSH
15372: LD_INT 2
15374: PUSH
15375: LD_INT 3
15377: PUSH
15378: LD_INT 4
15380: PUSH
15381: LD_INT 5
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: ST_TO_ADDR
15390: GO 16147
15392: LD_INT 14
15394: DOUBLE
15395: EQUAL
15396: IFTRUE 15400
15398: GO 15418
15400: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15401: LD_ADDR_VAR 0 3
15405: PUSH
15406: LD_INT 4
15408: PUSH
15409: LD_INT 5
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: ST_TO_ADDR
15416: GO 16147
15418: LD_INT 6
15420: DOUBLE
15421: EQUAL
15422: IFTRUE 15426
15424: GO 15444
15426: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15427: LD_ADDR_VAR 0 3
15431: PUSH
15432: LD_INT 4
15434: PUSH
15435: LD_INT 5
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: ST_TO_ADDR
15442: GO 16147
15444: LD_INT 10
15446: DOUBLE
15447: EQUAL
15448: IFTRUE 15452
15450: GO 15470
15452: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15453: LD_ADDR_VAR 0 3
15457: PUSH
15458: LD_INT 4
15460: PUSH
15461: LD_INT 5
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: ST_TO_ADDR
15468: GO 16147
15470: LD_INT 22
15472: DOUBLE
15473: EQUAL
15474: IFTRUE 15478
15476: GO 15504
15478: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15479: LD_ADDR_VAR 0 3
15483: PUSH
15484: LD_INT 11
15486: PUSH
15487: LD_INT 12
15489: PUSH
15490: LD_INT 13
15492: PUSH
15493: LD_INT 14
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: ST_TO_ADDR
15502: GO 16147
15504: LD_INT 23
15506: DOUBLE
15507: EQUAL
15508: IFTRUE 15512
15510: GO 15538
15512: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15513: LD_ADDR_VAR 0 3
15517: PUSH
15518: LD_INT 11
15520: PUSH
15521: LD_INT 12
15523: PUSH
15524: LD_INT 13
15526: PUSH
15527: LD_INT 14
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: ST_TO_ADDR
15536: GO 16147
15538: LD_INT 24
15540: DOUBLE
15541: EQUAL
15542: IFTRUE 15546
15544: GO 15572
15546: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15547: LD_ADDR_VAR 0 3
15551: PUSH
15552: LD_INT 11
15554: PUSH
15555: LD_INT 12
15557: PUSH
15558: LD_INT 13
15560: PUSH
15561: LD_INT 14
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: ST_TO_ADDR
15570: GO 16147
15572: LD_INT 30
15574: DOUBLE
15575: EQUAL
15576: IFTRUE 15580
15578: GO 15606
15580: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15581: LD_ADDR_VAR 0 3
15585: PUSH
15586: LD_INT 11
15588: PUSH
15589: LD_INT 12
15591: PUSH
15592: LD_INT 13
15594: PUSH
15595: LD_INT 14
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: ST_TO_ADDR
15604: GO 16147
15606: LD_INT 25
15608: DOUBLE
15609: EQUAL
15610: IFTRUE 15614
15612: GO 15632
15614: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15615: LD_ADDR_VAR 0 3
15619: PUSH
15620: LD_INT 13
15622: PUSH
15623: LD_INT 14
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: ST_TO_ADDR
15630: GO 16147
15632: LD_INT 27
15634: DOUBLE
15635: EQUAL
15636: IFTRUE 15640
15638: GO 15658
15640: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
15641: LD_ADDR_VAR 0 3
15645: PUSH
15646: LD_INT 13
15648: PUSH
15649: LD_INT 14
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: ST_TO_ADDR
15656: GO 16147
15658: LD_INT 92
15660: DOUBLE
15661: EQUAL
15662: IFTRUE 15666
15664: GO 15692
15666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15667: LD_ADDR_VAR 0 3
15671: PUSH
15672: LD_INT 11
15674: PUSH
15675: LD_INT 12
15677: PUSH
15678: LD_INT 13
15680: PUSH
15681: LD_INT 14
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: ST_TO_ADDR
15690: GO 16147
15692: LD_INT 28
15694: DOUBLE
15695: EQUAL
15696: IFTRUE 15700
15698: GO 15718
15700: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15701: LD_ADDR_VAR 0 3
15705: PUSH
15706: LD_INT 13
15708: PUSH
15709: LD_INT 14
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: ST_TO_ADDR
15716: GO 16147
15718: LD_INT 29
15720: DOUBLE
15721: EQUAL
15722: IFTRUE 15726
15724: GO 15744
15726: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15727: LD_ADDR_VAR 0 3
15731: PUSH
15732: LD_INT 13
15734: PUSH
15735: LD_INT 14
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: ST_TO_ADDR
15742: GO 16147
15744: LD_INT 31
15746: DOUBLE
15747: EQUAL
15748: IFTRUE 15752
15750: GO 15770
15752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15753: LD_ADDR_VAR 0 3
15757: PUSH
15758: LD_INT 13
15760: PUSH
15761: LD_INT 14
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: ST_TO_ADDR
15768: GO 16147
15770: LD_INT 26
15772: DOUBLE
15773: EQUAL
15774: IFTRUE 15778
15776: GO 15796
15778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15779: LD_ADDR_VAR 0 3
15783: PUSH
15784: LD_INT 13
15786: PUSH
15787: LD_INT 14
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: ST_TO_ADDR
15794: GO 16147
15796: LD_INT 42
15798: DOUBLE
15799: EQUAL
15800: IFTRUE 15804
15802: GO 15830
15804: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15805: LD_ADDR_VAR 0 3
15809: PUSH
15810: LD_INT 21
15812: PUSH
15813: LD_INT 22
15815: PUSH
15816: LD_INT 23
15818: PUSH
15819: LD_INT 24
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: ST_TO_ADDR
15828: GO 16147
15830: LD_INT 43
15832: DOUBLE
15833: EQUAL
15834: IFTRUE 15838
15836: GO 15864
15838: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15839: LD_ADDR_VAR 0 3
15843: PUSH
15844: LD_INT 21
15846: PUSH
15847: LD_INT 22
15849: PUSH
15850: LD_INT 23
15852: PUSH
15853: LD_INT 24
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: ST_TO_ADDR
15862: GO 16147
15864: LD_INT 44
15866: DOUBLE
15867: EQUAL
15868: IFTRUE 15872
15870: GO 15898
15872: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15873: LD_ADDR_VAR 0 3
15877: PUSH
15878: LD_INT 21
15880: PUSH
15881: LD_INT 22
15883: PUSH
15884: LD_INT 23
15886: PUSH
15887: LD_INT 24
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: ST_TO_ADDR
15896: GO 16147
15898: LD_INT 45
15900: DOUBLE
15901: EQUAL
15902: IFTRUE 15906
15904: GO 15932
15906: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15907: LD_ADDR_VAR 0 3
15911: PUSH
15912: LD_INT 21
15914: PUSH
15915: LD_INT 22
15917: PUSH
15918: LD_INT 23
15920: PUSH
15921: LD_INT 24
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: ST_TO_ADDR
15930: GO 16147
15932: LD_INT 49
15934: DOUBLE
15935: EQUAL
15936: IFTRUE 15940
15938: GO 15966
15940: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15941: LD_ADDR_VAR 0 3
15945: PUSH
15946: LD_INT 21
15948: PUSH
15949: LD_INT 22
15951: PUSH
15952: LD_INT 23
15954: PUSH
15955: LD_INT 24
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: ST_TO_ADDR
15964: GO 16147
15966: LD_INT 51
15968: DOUBLE
15969: EQUAL
15970: IFTRUE 15974
15972: GO 16000
15974: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15975: LD_ADDR_VAR 0 3
15979: PUSH
15980: LD_INT 21
15982: PUSH
15983: LD_INT 22
15985: PUSH
15986: LD_INT 23
15988: PUSH
15989: LD_INT 24
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: ST_TO_ADDR
15998: GO 16147
16000: LD_INT 52
16002: DOUBLE
16003: EQUAL
16004: IFTRUE 16008
16006: GO 16034
16008: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
16009: LD_ADDR_VAR 0 3
16013: PUSH
16014: LD_INT 21
16016: PUSH
16017: LD_INT 22
16019: PUSH
16020: LD_INT 23
16022: PUSH
16023: LD_INT 24
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: ST_TO_ADDR
16032: GO 16147
16034: LD_INT 53
16036: DOUBLE
16037: EQUAL
16038: IFTRUE 16042
16040: GO 16060
16042: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
16043: LD_ADDR_VAR 0 3
16047: PUSH
16048: LD_INT 23
16050: PUSH
16051: LD_INT 24
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: ST_TO_ADDR
16058: GO 16147
16060: LD_INT 46
16062: DOUBLE
16063: EQUAL
16064: IFTRUE 16068
16066: GO 16086
16068: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
16069: LD_ADDR_VAR 0 3
16073: PUSH
16074: LD_INT 23
16076: PUSH
16077: LD_INT 24
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: ST_TO_ADDR
16084: GO 16147
16086: LD_INT 47
16088: DOUBLE
16089: EQUAL
16090: IFTRUE 16094
16092: GO 16112
16094: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
16095: LD_ADDR_VAR 0 3
16099: PUSH
16100: LD_INT 23
16102: PUSH
16103: LD_INT 24
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: ST_TO_ADDR
16110: GO 16147
16112: LD_INT 98
16114: DOUBLE
16115: EQUAL
16116: IFTRUE 16120
16118: GO 16146
16120: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16121: LD_ADDR_VAR 0 3
16125: PUSH
16126: LD_INT 21
16128: PUSH
16129: LD_INT 22
16131: PUSH
16132: LD_INT 23
16134: PUSH
16135: LD_INT 24
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: ST_TO_ADDR
16144: GO 16147
16146: POP
// result := ( chassis in result ) ;
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: LD_VAR 0 1
16156: PUSH
16157: LD_VAR 0 3
16161: IN
16162: ST_TO_ADDR
// end ;
16163: LD_VAR 0 3
16167: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
16168: LD_INT 0
16170: PPUSH
16171: PPUSH
16172: PPUSH
16173: PPUSH
16174: PPUSH
16175: PPUSH
16176: PPUSH
// result := array ;
16177: LD_ADDR_VAR 0 5
16181: PUSH
16182: LD_VAR 0 1
16186: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
16187: LD_VAR 0 1
16191: NOT
16192: IFTRUE 16201
16194: PUSH
16195: LD_VAR 0 2
16199: NOT
16200: OR
16201: IFTRUE 16210
16203: PUSH
16204: LD_VAR 0 3
16208: NOT
16209: OR
16210: IFTRUE 16224
16212: PUSH
16213: LD_VAR 0 2
16217: PUSH
16218: LD_VAR 0 1
16222: GREATER
16223: OR
16224: IFTRUE 16238
16226: PUSH
16227: LD_VAR 0 3
16231: PUSH
16232: LD_VAR 0 1
16236: GREATER
16237: OR
16238: IFFALSE 16242
// exit ;
16240: GO 16538
// if direction then
16242: LD_VAR 0 4
16246: IFFALSE 16310
// begin d := 1 ;
16248: LD_ADDR_VAR 0 9
16252: PUSH
16253: LD_INT 1
16255: ST_TO_ADDR
// if i_from > i_to then
16256: LD_VAR 0 2
16260: PUSH
16261: LD_VAR 0 3
16265: GREATER
16266: IFFALSE 16292
// length := ( array - i_from ) + i_to else
16268: LD_ADDR_VAR 0 11
16272: PUSH
16273: LD_VAR 0 1
16277: PUSH
16278: LD_VAR 0 2
16282: MINUS
16283: PUSH
16284: LD_VAR 0 3
16288: PLUS
16289: ST_TO_ADDR
16290: GO 16308
// length := i_to - i_from ;
16292: LD_ADDR_VAR 0 11
16296: PUSH
16297: LD_VAR 0 3
16301: PUSH
16302: LD_VAR 0 2
16306: MINUS
16307: ST_TO_ADDR
// end else
16308: GO 16371
// begin d := - 1 ;
16310: LD_ADDR_VAR 0 9
16314: PUSH
16315: LD_INT 1
16317: NEG
16318: ST_TO_ADDR
// if i_from > i_to then
16319: LD_VAR 0 2
16323: PUSH
16324: LD_VAR 0 3
16328: GREATER
16329: IFFALSE 16349
// length := i_from - i_to else
16331: LD_ADDR_VAR 0 11
16335: PUSH
16336: LD_VAR 0 2
16340: PUSH
16341: LD_VAR 0 3
16345: MINUS
16346: ST_TO_ADDR
16347: GO 16371
// length := ( array - i_to ) + i_from ;
16349: LD_ADDR_VAR 0 11
16353: PUSH
16354: LD_VAR 0 1
16358: PUSH
16359: LD_VAR 0 3
16363: MINUS
16364: PUSH
16365: LD_VAR 0 2
16369: PLUS
16370: ST_TO_ADDR
// end ; if not length then
16371: LD_VAR 0 11
16375: NOT
16376: IFFALSE 16380
// exit ;
16378: GO 16538
// tmp := array ;
16380: LD_ADDR_VAR 0 10
16384: PUSH
16385: LD_VAR 0 1
16389: ST_TO_ADDR
// for i = 1 to length do
16390: LD_ADDR_VAR 0 6
16394: PUSH
16395: DOUBLE
16396: LD_INT 1
16398: DEC
16399: ST_TO_ADDR
16400: LD_VAR 0 11
16404: PUSH
16405: FOR_TO
16406: IFFALSE 16526
// begin for j = 1 to array do
16408: LD_ADDR_VAR 0 7
16412: PUSH
16413: DOUBLE
16414: LD_INT 1
16416: DEC
16417: ST_TO_ADDR
16418: LD_VAR 0 1
16422: PUSH
16423: FOR_TO
16424: IFFALSE 16512
// begin k := j + d ;
16426: LD_ADDR_VAR 0 8
16430: PUSH
16431: LD_VAR 0 7
16435: PUSH
16436: LD_VAR 0 9
16440: PLUS
16441: ST_TO_ADDR
// if k > array then
16442: LD_VAR 0 8
16446: PUSH
16447: LD_VAR 0 1
16451: GREATER
16452: IFFALSE 16462
// k := 1 ;
16454: LD_ADDR_VAR 0 8
16458: PUSH
16459: LD_INT 1
16461: ST_TO_ADDR
// if not k then
16462: LD_VAR 0 8
16466: NOT
16467: IFFALSE 16479
// k := array ;
16469: LD_ADDR_VAR 0 8
16473: PUSH
16474: LD_VAR 0 1
16478: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16479: LD_ADDR_VAR 0 10
16483: PUSH
16484: LD_VAR 0 10
16488: PPUSH
16489: LD_VAR 0 8
16493: PPUSH
16494: LD_VAR 0 1
16498: PUSH
16499: LD_VAR 0 7
16503: ARRAY
16504: PPUSH
16505: CALL_OW 1
16509: ST_TO_ADDR
// end ;
16510: GO 16423
16512: POP
16513: POP
// array := tmp ;
16514: LD_ADDR_VAR 0 1
16518: PUSH
16519: LD_VAR 0 10
16523: ST_TO_ADDR
// end ;
16524: GO 16405
16526: POP
16527: POP
// result := array ;
16528: LD_ADDR_VAR 0 5
16532: PUSH
16533: LD_VAR 0 1
16537: ST_TO_ADDR
// end ;
16538: LD_VAR 0 5
16542: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16543: LD_INT 0
16545: PPUSH
16546: PPUSH
// result := 0 ;
16547: LD_ADDR_VAR 0 3
16551: PUSH
16552: LD_INT 0
16554: ST_TO_ADDR
// if not array or not value in array then
16555: LD_VAR 0 1
16559: NOT
16560: IFTRUE 16575
16562: PUSH
16563: LD_VAR 0 2
16567: PUSH
16568: LD_VAR 0 1
16572: IN
16573: NOT
16574: OR
16575: IFFALSE 16579
// exit ;
16577: GO 16633
// for i = 1 to array do
16579: LD_ADDR_VAR 0 4
16583: PUSH
16584: DOUBLE
16585: LD_INT 1
16587: DEC
16588: ST_TO_ADDR
16589: LD_VAR 0 1
16593: PUSH
16594: FOR_TO
16595: IFFALSE 16631
// if value = array [ i ] then
16597: LD_VAR 0 2
16601: PUSH
16602: LD_VAR 0 1
16606: PUSH
16607: LD_VAR 0 4
16611: ARRAY
16612: EQUAL
16613: IFFALSE 16629
// begin result := i ;
16615: LD_ADDR_VAR 0 3
16619: PUSH
16620: LD_VAR 0 4
16624: ST_TO_ADDR
// exit ;
16625: POP
16626: POP
16627: GO 16633
// end ;
16629: GO 16594
16631: POP
16632: POP
// end ;
16633: LD_VAR 0 3
16637: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16638: LD_INT 0
16640: PPUSH
// vc_chassis := chassis ;
16641: LD_ADDR_OWVAR 37
16645: PUSH
16646: LD_VAR 0 1
16650: ST_TO_ADDR
// vc_engine := engine ;
16651: LD_ADDR_OWVAR 39
16655: PUSH
16656: LD_VAR 0 2
16660: ST_TO_ADDR
// vc_control := control ;
16661: LD_ADDR_OWVAR 38
16665: PUSH
16666: LD_VAR 0 3
16670: ST_TO_ADDR
// vc_weapon := weapon ;
16671: LD_ADDR_OWVAR 40
16675: PUSH
16676: LD_VAR 0 4
16680: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16681: LD_ADDR_OWVAR 41
16685: PUSH
16686: LD_VAR 0 5
16690: ST_TO_ADDR
// end ;
16691: LD_VAR 0 6
16695: RET
// export function WantPlant ( unit ) ; var task ; begin
16696: LD_INT 0
16698: PPUSH
16699: PPUSH
// result := false ;
16700: LD_ADDR_VAR 0 2
16704: PUSH
16705: LD_INT 0
16707: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16708: LD_ADDR_VAR 0 3
16712: PUSH
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 437
16722: ST_TO_ADDR
// if task then
16723: LD_VAR 0 3
16727: IFFALSE 16755
// if task [ 1 ] [ 1 ] = p then
16729: LD_VAR 0 3
16733: PUSH
16734: LD_INT 1
16736: ARRAY
16737: PUSH
16738: LD_INT 1
16740: ARRAY
16741: PUSH
16742: LD_STRING p
16744: EQUAL
16745: IFFALSE 16755
// result := true ;
16747: LD_ADDR_VAR 0 2
16751: PUSH
16752: LD_INT 1
16754: ST_TO_ADDR
// end ;
16755: LD_VAR 0 2
16759: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16760: LD_INT 0
16762: PPUSH
16763: PPUSH
16764: PPUSH
16765: PPUSH
// if pos < 1 then
16766: LD_VAR 0 2
16770: PUSH
16771: LD_INT 1
16773: LESS
16774: IFFALSE 16778
// exit ;
16776: GO 17081
// if pos = 1 then
16778: LD_VAR 0 2
16782: PUSH
16783: LD_INT 1
16785: EQUAL
16786: IFFALSE 16819
// result := Replace ( arr , pos [ 1 ] , value ) else
16788: LD_ADDR_VAR 0 4
16792: PUSH
16793: LD_VAR 0 1
16797: PPUSH
16798: LD_VAR 0 2
16802: PUSH
16803: LD_INT 1
16805: ARRAY
16806: PPUSH
16807: LD_VAR 0 3
16811: PPUSH
16812: CALL_OW 1
16816: ST_TO_ADDR
16817: GO 17081
// begin tmp := arr ;
16819: LD_ADDR_VAR 0 6
16823: PUSH
16824: LD_VAR 0 1
16828: ST_TO_ADDR
// s_arr := [ tmp ] ;
16829: LD_ADDR_VAR 0 7
16833: PUSH
16834: LD_VAR 0 6
16838: PUSH
16839: EMPTY
16840: LIST
16841: ST_TO_ADDR
// for i = 1 to pos - 1 do
16842: LD_ADDR_VAR 0 5
16846: PUSH
16847: DOUBLE
16848: LD_INT 1
16850: DEC
16851: ST_TO_ADDR
16852: LD_VAR 0 2
16856: PUSH
16857: LD_INT 1
16859: MINUS
16860: PUSH
16861: FOR_TO
16862: IFFALSE 16907
// begin tmp := tmp [ pos [ i ] ] ;
16864: LD_ADDR_VAR 0 6
16868: PUSH
16869: LD_VAR 0 6
16873: PUSH
16874: LD_VAR 0 2
16878: PUSH
16879: LD_VAR 0 5
16883: ARRAY
16884: ARRAY
16885: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16886: LD_ADDR_VAR 0 7
16890: PUSH
16891: LD_VAR 0 7
16895: PUSH
16896: LD_VAR 0 6
16900: PUSH
16901: EMPTY
16902: LIST
16903: ADD
16904: ST_TO_ADDR
// end ;
16905: GO 16861
16907: POP
16908: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16909: LD_ADDR_VAR 0 6
16913: PUSH
16914: LD_VAR 0 6
16918: PPUSH
16919: LD_VAR 0 2
16923: PUSH
16924: LD_VAR 0 2
16928: ARRAY
16929: PPUSH
16930: LD_VAR 0 3
16934: PPUSH
16935: CALL_OW 1
16939: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16940: LD_ADDR_VAR 0 7
16944: PUSH
16945: LD_VAR 0 7
16949: PPUSH
16950: LD_VAR 0 7
16954: PPUSH
16955: LD_VAR 0 6
16959: PPUSH
16960: CALL_OW 1
16964: ST_TO_ADDR
// for i = s_arr downto 2 do
16965: LD_ADDR_VAR 0 5
16969: PUSH
16970: DOUBLE
16971: LD_VAR 0 7
16975: INC
16976: ST_TO_ADDR
16977: LD_INT 2
16979: PUSH
16980: FOR_DOWNTO
16981: IFFALSE 17065
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16983: LD_ADDR_VAR 0 6
16987: PUSH
16988: LD_VAR 0 7
16992: PUSH
16993: LD_VAR 0 5
16997: PUSH
16998: LD_INT 1
17000: MINUS
17001: ARRAY
17002: PPUSH
17003: LD_VAR 0 2
17007: PUSH
17008: LD_VAR 0 5
17012: PUSH
17013: LD_INT 1
17015: MINUS
17016: ARRAY
17017: PPUSH
17018: LD_VAR 0 7
17022: PUSH
17023: LD_VAR 0 5
17027: ARRAY
17028: PPUSH
17029: CALL_OW 1
17033: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
17034: LD_ADDR_VAR 0 7
17038: PUSH
17039: LD_VAR 0 7
17043: PPUSH
17044: LD_VAR 0 5
17048: PUSH
17049: LD_INT 1
17051: MINUS
17052: PPUSH
17053: LD_VAR 0 6
17057: PPUSH
17058: CALL_OW 1
17062: ST_TO_ADDR
// end ;
17063: GO 16980
17065: POP
17066: POP
// result := s_arr [ 1 ] ;
17067: LD_ADDR_VAR 0 4
17071: PUSH
17072: LD_VAR 0 7
17076: PUSH
17077: LD_INT 1
17079: ARRAY
17080: ST_TO_ADDR
// end ; end ;
17081: LD_VAR 0 4
17085: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
17086: LD_INT 0
17088: PPUSH
17089: PPUSH
// if not list then
17090: LD_VAR 0 1
17094: NOT
17095: IFFALSE 17099
// exit ;
17097: GO 17190
// i := list [ pos1 ] ;
17099: LD_ADDR_VAR 0 5
17103: PUSH
17104: LD_VAR 0 1
17108: PUSH
17109: LD_VAR 0 2
17113: ARRAY
17114: ST_TO_ADDR
// if not i then
17115: LD_VAR 0 5
17119: NOT
17120: IFFALSE 17124
// exit ;
17122: GO 17190
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
17124: LD_ADDR_VAR 0 1
17128: PUSH
17129: LD_VAR 0 1
17133: PPUSH
17134: LD_VAR 0 2
17138: PPUSH
17139: LD_VAR 0 1
17143: PUSH
17144: LD_VAR 0 3
17148: ARRAY
17149: PPUSH
17150: CALL_OW 1
17154: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
17155: LD_ADDR_VAR 0 1
17159: PUSH
17160: LD_VAR 0 1
17164: PPUSH
17165: LD_VAR 0 3
17169: PPUSH
17170: LD_VAR 0 5
17174: PPUSH
17175: CALL_OW 1
17179: ST_TO_ADDR
// result := list ;
17180: LD_ADDR_VAR 0 4
17184: PUSH
17185: LD_VAR 0 1
17189: ST_TO_ADDR
// end ;
17190: LD_VAR 0 4
17194: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
17195: LD_INT 0
17197: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
17198: LD_ADDR_VAR 0 5
17202: PUSH
17203: LD_VAR 0 1
17207: PPUSH
17208: CALL_OW 250
17212: PPUSH
17213: LD_VAR 0 1
17217: PPUSH
17218: CALL_OW 251
17222: PPUSH
17223: LD_VAR 0 2
17227: PPUSH
17228: LD_VAR 0 3
17232: PPUSH
17233: LD_VAR 0 4
17237: PPUSH
17238: CALL 17620 0 5
17242: ST_TO_ADDR
// end ;
17243: LD_VAR 0 5
17247: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
17248: LD_INT 0
17250: PPUSH
17251: PPUSH
17252: PPUSH
17253: PPUSH
// if not list or not unit then
17254: LD_VAR 0 2
17258: NOT
17259: IFTRUE 17268
17261: PUSH
17262: LD_VAR 0 1
17266: NOT
17267: OR
17268: IFFALSE 17272
// exit ;
17270: GO 17615
// result := [ ] ;
17272: LD_ADDR_VAR 0 5
17276: PUSH
17277: EMPTY
17278: ST_TO_ADDR
// for i in list do
17279: LD_ADDR_VAR 0 6
17283: PUSH
17284: LD_VAR 0 2
17288: PUSH
17289: FOR_IN
17290: IFFALSE 17508
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
17292: LD_ADDR_VAR 0 8
17296: PUSH
17297: LD_VAR 0 1
17301: PPUSH
17302: LD_VAR 0 6
17306: PUSH
17307: LD_INT 1
17309: ARRAY
17310: PPUSH
17311: LD_VAR 0 6
17315: PUSH
17316: LD_INT 2
17318: ARRAY
17319: PPUSH
17320: CALL_OW 297
17324: ST_TO_ADDR
// if not Count ( result ) then
17325: LD_VAR 0 5
17329: PPUSH
17330: CALL 13842 0 1
17334: NOT
17335: IFFALSE 17368
// begin result := Join ( result , [ i , tmp ] ) ;
17337: LD_ADDR_VAR 0 5
17341: PUSH
17342: LD_VAR 0 5
17346: PPUSH
17347: LD_VAR 0 6
17351: PUSH
17352: LD_VAR 0 8
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PPUSH
17361: CALL 49818 0 2
17365: ST_TO_ADDR
// continue ;
17366: GO 17289
// end ; if result [ result ] [ 2 ] <= tmp then
17368: LD_VAR 0 5
17372: PUSH
17373: LD_VAR 0 5
17377: ARRAY
17378: PUSH
17379: LD_INT 2
17381: ARRAY
17382: PUSH
17383: LD_VAR 0 8
17387: LESSEQUAL
17388: IFFALSE 17421
// result := Join ( result , [ i , tmp ] ) else
17390: LD_ADDR_VAR 0 5
17394: PUSH
17395: LD_VAR 0 5
17399: PPUSH
17400: LD_VAR 0 6
17404: PUSH
17405: LD_VAR 0 8
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PPUSH
17414: CALL 49818 0 2
17418: ST_TO_ADDR
17419: GO 17506
// begin for j := 1 to Count ( result ) do
17421: LD_ADDR_VAR 0 7
17425: PUSH
17426: DOUBLE
17427: LD_INT 1
17429: DEC
17430: ST_TO_ADDR
17431: LD_VAR 0 5
17435: PPUSH
17436: CALL 13842 0 1
17440: PUSH
17441: FOR_TO
17442: IFFALSE 17504
// begin if tmp < result [ j ] [ 2 ] then
17444: LD_VAR 0 8
17448: PUSH
17449: LD_VAR 0 5
17453: PUSH
17454: LD_VAR 0 7
17458: ARRAY
17459: PUSH
17460: LD_INT 2
17462: ARRAY
17463: LESS
17464: IFFALSE 17502
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17466: LD_ADDR_VAR 0 5
17470: PUSH
17471: LD_VAR 0 5
17475: PPUSH
17476: LD_VAR 0 7
17480: PPUSH
17481: LD_VAR 0 6
17485: PUSH
17486: LD_VAR 0 8
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PPUSH
17495: CALL_OW 2
17499: ST_TO_ADDR
// break ;
17500: GO 17504
// end ; end ;
17502: GO 17441
17504: POP
17505: POP
// end ; end ;
17506: GO 17289
17508: POP
17509: POP
// if result and not asc then
17510: LD_VAR 0 5
17514: IFFALSE 17523
17516: PUSH
17517: LD_VAR 0 3
17521: NOT
17522: AND
17523: IFFALSE 17540
// result := ReverseArray ( result ) ;
17525: LD_ADDR_VAR 0 5
17529: PUSH
17530: LD_VAR 0 5
17534: PPUSH
17535: CALL 44898 0 1
17539: ST_TO_ADDR
// tmp := [ ] ;
17540: LD_ADDR_VAR 0 8
17544: PUSH
17545: EMPTY
17546: ST_TO_ADDR
// if mode then
17547: LD_VAR 0 4
17551: IFFALSE 17615
// begin for i := 1 to result do
17553: LD_ADDR_VAR 0 6
17557: PUSH
17558: DOUBLE
17559: LD_INT 1
17561: DEC
17562: ST_TO_ADDR
17563: LD_VAR 0 5
17567: PUSH
17568: FOR_TO
17569: IFFALSE 17603
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
17571: LD_ADDR_VAR 0 8
17575: PUSH
17576: LD_VAR 0 8
17580: PPUSH
17581: LD_VAR 0 5
17585: PUSH
17586: LD_VAR 0 6
17590: ARRAY
17591: PUSH
17592: LD_INT 1
17594: ARRAY
17595: PPUSH
17596: CALL 49818 0 2
17600: ST_TO_ADDR
17601: GO 17568
17603: POP
17604: POP
// result := tmp ;
17605: LD_ADDR_VAR 0 5
17609: PUSH
17610: LD_VAR 0 8
17614: ST_TO_ADDR
// end ; end ;
17615: LD_VAR 0 5
17619: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17620: LD_INT 0
17622: PPUSH
17623: PPUSH
17624: PPUSH
17625: PPUSH
// if not list then
17626: LD_VAR 0 3
17630: NOT
17631: IFFALSE 17635
// exit ;
17633: GO 18025
// result := [ ] ;
17635: LD_ADDR_VAR 0 6
17639: PUSH
17640: EMPTY
17641: ST_TO_ADDR
// for i in list do
17642: LD_ADDR_VAR 0 7
17646: PUSH
17647: LD_VAR 0 3
17651: PUSH
17652: FOR_IN
17653: IFFALSE 17855
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17655: LD_ADDR_VAR 0 9
17659: PUSH
17660: LD_VAR 0 7
17664: PPUSH
17665: LD_VAR 0 1
17669: PPUSH
17670: LD_VAR 0 2
17674: PPUSH
17675: CALL_OW 297
17679: ST_TO_ADDR
// if not result then
17680: LD_VAR 0 6
17684: NOT
17685: IFFALSE 17711
// result := [ [ i , tmp ] ] else
17687: LD_ADDR_VAR 0 6
17691: PUSH
17692: LD_VAR 0 7
17696: PUSH
17697: LD_VAR 0 9
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: EMPTY
17707: LIST
17708: ST_TO_ADDR
17709: GO 17853
// begin if result [ result ] [ 2 ] <= tmp then
17711: LD_VAR 0 6
17715: PUSH
17716: LD_VAR 0 6
17720: ARRAY
17721: PUSH
17722: LD_INT 2
17724: ARRAY
17725: PUSH
17726: LD_VAR 0 9
17730: LESSEQUAL
17731: IFFALSE 17773
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17733: LD_ADDR_VAR 0 6
17737: PUSH
17738: LD_VAR 0 6
17742: PPUSH
17743: LD_VAR 0 6
17747: PUSH
17748: LD_INT 1
17750: PLUS
17751: PPUSH
17752: LD_VAR 0 7
17756: PUSH
17757: LD_VAR 0 9
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PPUSH
17766: CALL_OW 2
17770: ST_TO_ADDR
17771: GO 17853
// for j := 1 to result do
17773: LD_ADDR_VAR 0 8
17777: PUSH
17778: DOUBLE
17779: LD_INT 1
17781: DEC
17782: ST_TO_ADDR
17783: LD_VAR 0 6
17787: PUSH
17788: FOR_TO
17789: IFFALSE 17851
// begin if tmp < result [ j ] [ 2 ] then
17791: LD_VAR 0 9
17795: PUSH
17796: LD_VAR 0 6
17800: PUSH
17801: LD_VAR 0 8
17805: ARRAY
17806: PUSH
17807: LD_INT 2
17809: ARRAY
17810: LESS
17811: IFFALSE 17849
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17813: LD_ADDR_VAR 0 6
17817: PUSH
17818: LD_VAR 0 6
17822: PPUSH
17823: LD_VAR 0 8
17827: PPUSH
17828: LD_VAR 0 7
17832: PUSH
17833: LD_VAR 0 9
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PPUSH
17842: CALL_OW 2
17846: ST_TO_ADDR
// break ;
17847: GO 17851
// end ; end ;
17849: GO 17788
17851: POP
17852: POP
// end ; end ;
17853: GO 17652
17855: POP
17856: POP
// if result and not asc then
17857: LD_VAR 0 6
17861: IFFALSE 17870
17863: PUSH
17864: LD_VAR 0 4
17868: NOT
17869: AND
17870: IFFALSE 17945
// begin tmp := result ;
17872: LD_ADDR_VAR 0 9
17876: PUSH
17877: LD_VAR 0 6
17881: ST_TO_ADDR
// for i = tmp downto 1 do
17882: LD_ADDR_VAR 0 7
17886: PUSH
17887: DOUBLE
17888: LD_VAR 0 9
17892: INC
17893: ST_TO_ADDR
17894: LD_INT 1
17896: PUSH
17897: FOR_DOWNTO
17898: IFFALSE 17943
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17900: LD_ADDR_VAR 0 6
17904: PUSH
17905: LD_VAR 0 6
17909: PPUSH
17910: LD_VAR 0 9
17914: PUSH
17915: LD_VAR 0 7
17919: MINUS
17920: PUSH
17921: LD_INT 1
17923: PLUS
17924: PPUSH
17925: LD_VAR 0 9
17929: PUSH
17930: LD_VAR 0 7
17934: ARRAY
17935: PPUSH
17936: CALL_OW 1
17940: ST_TO_ADDR
17941: GO 17897
17943: POP
17944: POP
// end ; tmp := [ ] ;
17945: LD_ADDR_VAR 0 9
17949: PUSH
17950: EMPTY
17951: ST_TO_ADDR
// if mode then
17952: LD_VAR 0 5
17956: IFFALSE 18025
// begin for i = 1 to result do
17958: LD_ADDR_VAR 0 7
17962: PUSH
17963: DOUBLE
17964: LD_INT 1
17966: DEC
17967: ST_TO_ADDR
17968: LD_VAR 0 6
17972: PUSH
17973: FOR_TO
17974: IFFALSE 18013
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17976: LD_ADDR_VAR 0 9
17980: PUSH
17981: LD_VAR 0 9
17985: PPUSH
17986: LD_VAR 0 7
17990: PPUSH
17991: LD_VAR 0 6
17995: PUSH
17996: LD_VAR 0 7
18000: ARRAY
18001: PUSH
18002: LD_INT 1
18004: ARRAY
18005: PPUSH
18006: CALL_OW 1
18010: ST_TO_ADDR
18011: GO 17973
18013: POP
18014: POP
// result := tmp ;
18015: LD_ADDR_VAR 0 6
18019: PUSH
18020: LD_VAR 0 9
18024: ST_TO_ADDR
// end ; end ;
18025: LD_VAR 0 6
18029: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18030: LD_INT 0
18032: PPUSH
18033: PPUSH
18034: PPUSH
18035: PPUSH
18036: PPUSH
18037: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18038: LD_ADDR_VAR 0 5
18042: PUSH
18043: LD_INT 0
18045: PUSH
18046: LD_INT 0
18048: PUSH
18049: LD_INT 0
18051: PUSH
18052: EMPTY
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: ST_TO_ADDR
// if not x or not y then
18060: LD_VAR 0 2
18064: NOT
18065: IFTRUE 18074
18067: PUSH
18068: LD_VAR 0 3
18072: NOT
18073: OR
18074: IFFALSE 18078
// exit ;
18076: GO 19734
// if not range then
18078: LD_VAR 0 4
18082: NOT
18083: IFFALSE 18093
// range := 10 ;
18085: LD_ADDR_VAR 0 4
18089: PUSH
18090: LD_INT 10
18092: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18093: LD_ADDR_VAR 0 8
18097: PUSH
18098: LD_INT 81
18100: PUSH
18101: LD_VAR 0 1
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 92
18112: PUSH
18113: LD_VAR 0 2
18117: PUSH
18118: LD_VAR 0 3
18122: PUSH
18123: LD_VAR 0 4
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 3
18136: PUSH
18137: LD_INT 21
18139: PUSH
18140: LD_INT 3
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: LIST
18155: PPUSH
18156: CALL_OW 69
18160: ST_TO_ADDR
// if not tmp then
18161: LD_VAR 0 8
18165: NOT
18166: IFFALSE 18170
// exit ;
18168: GO 19734
// for i in tmp do
18170: LD_ADDR_VAR 0 6
18174: PUSH
18175: LD_VAR 0 8
18179: PUSH
18180: FOR_IN
18181: IFFALSE 19709
// begin points := [ 0 , 0 , 0 ] ;
18183: LD_ADDR_VAR 0 9
18187: PUSH
18188: LD_INT 0
18190: PUSH
18191: LD_INT 0
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: ST_TO_ADDR
// bpoints := 1 ;
18202: LD_ADDR_VAR 0 10
18206: PUSH
18207: LD_INT 1
18209: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18210: LD_VAR 0 6
18214: PPUSH
18215: CALL_OW 247
18219: PUSH
18220: LD_INT 1
18222: DOUBLE
18223: EQUAL
18224: IFTRUE 18228
18226: GO 18810
18228: POP
// begin if GetClass ( i ) = 1 then
18229: LD_VAR 0 6
18233: PPUSH
18234: CALL_OW 257
18238: PUSH
18239: LD_INT 1
18241: EQUAL
18242: IFFALSE 18263
// points := [ 10 , 5 , 3 ] ;
18244: LD_ADDR_VAR 0 9
18248: PUSH
18249: LD_INT 10
18251: PUSH
18252: LD_INT 5
18254: PUSH
18255: LD_INT 3
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: LIST
18262: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18263: LD_VAR 0 6
18267: PPUSH
18268: CALL_OW 257
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: LD_INT 3
18278: PUSH
18279: LD_INT 4
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: LIST
18286: IN
18287: IFFALSE 18308
// points := [ 3 , 2 , 1 ] ;
18289: LD_ADDR_VAR 0 9
18293: PUSH
18294: LD_INT 3
18296: PUSH
18297: LD_INT 2
18299: PUSH
18300: LD_INT 1
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: LIST
18307: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18308: LD_VAR 0 6
18312: PPUSH
18313: CALL_OW 257
18317: PUSH
18318: LD_INT 5
18320: EQUAL
18321: IFFALSE 18342
// points := [ 130 , 5 , 2 ] ;
18323: LD_ADDR_VAR 0 9
18327: PUSH
18328: LD_INT 130
18330: PUSH
18331: LD_INT 5
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: LIST
18341: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18342: LD_VAR 0 6
18346: PPUSH
18347: CALL_OW 257
18351: PUSH
18352: LD_INT 8
18354: EQUAL
18355: IFFALSE 18376
// points := [ 35 , 35 , 30 ] ;
18357: LD_ADDR_VAR 0 9
18361: PUSH
18362: LD_INT 35
18364: PUSH
18365: LD_INT 35
18367: PUSH
18368: LD_INT 30
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: LIST
18375: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18376: LD_VAR 0 6
18380: PPUSH
18381: CALL_OW 257
18385: PUSH
18386: LD_INT 9
18388: EQUAL
18389: IFFALSE 18410
// points := [ 20 , 55 , 40 ] ;
18391: LD_ADDR_VAR 0 9
18395: PUSH
18396: LD_INT 20
18398: PUSH
18399: LD_INT 55
18401: PUSH
18402: LD_INT 40
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: LIST
18409: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18410: LD_VAR 0 6
18414: PPUSH
18415: CALL_OW 257
18419: PUSH
18420: LD_INT 12
18422: PUSH
18423: LD_INT 16
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: IN
18430: IFFALSE 18451
// points := [ 5 , 3 , 2 ] ;
18432: LD_ADDR_VAR 0 9
18436: PUSH
18437: LD_INT 5
18439: PUSH
18440: LD_INT 3
18442: PUSH
18443: LD_INT 2
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: LIST
18450: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18451: LD_VAR 0 6
18455: PPUSH
18456: CALL_OW 257
18460: PUSH
18461: LD_INT 17
18463: EQUAL
18464: IFFALSE 18485
// points := [ 100 , 50 , 75 ] ;
18466: LD_ADDR_VAR 0 9
18470: PUSH
18471: LD_INT 100
18473: PUSH
18474: LD_INT 50
18476: PUSH
18477: LD_INT 75
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: LIST
18484: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18485: LD_VAR 0 6
18489: PPUSH
18490: CALL_OW 257
18494: PUSH
18495: LD_INT 15
18497: EQUAL
18498: IFFALSE 18519
// points := [ 10 , 5 , 3 ] ;
18500: LD_ADDR_VAR 0 9
18504: PUSH
18505: LD_INT 10
18507: PUSH
18508: LD_INT 5
18510: PUSH
18511: LD_INT 3
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: LIST
18518: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18519: LD_VAR 0 6
18523: PPUSH
18524: CALL_OW 257
18528: PUSH
18529: LD_INT 14
18531: EQUAL
18532: IFFALSE 18553
// points := [ 10 , 0 , 0 ] ;
18534: LD_ADDR_VAR 0 9
18538: PUSH
18539: LD_INT 10
18541: PUSH
18542: LD_INT 0
18544: PUSH
18545: LD_INT 0
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18553: LD_VAR 0 6
18557: PPUSH
18558: CALL_OW 257
18562: PUSH
18563: LD_INT 11
18565: EQUAL
18566: IFFALSE 18587
// points := [ 30 , 10 , 5 ] ;
18568: LD_ADDR_VAR 0 9
18572: PUSH
18573: LD_INT 30
18575: PUSH
18576: LD_INT 10
18578: PUSH
18579: LD_INT 5
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: LIST
18586: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18587: LD_VAR 0 1
18591: PPUSH
18592: LD_INT 5
18594: PPUSH
18595: CALL_OW 321
18599: PUSH
18600: LD_INT 2
18602: EQUAL
18603: IFFALSE 18620
// bpoints := bpoints * 1.8 ;
18605: LD_ADDR_VAR 0 10
18609: PUSH
18610: LD_VAR 0 10
18614: PUSH
18615: LD_REAL  1.80000000000000E+0000
18618: MUL
18619: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18620: LD_VAR 0 6
18624: PPUSH
18625: CALL_OW 257
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: LD_INT 2
18635: PUSH
18636: LD_INT 3
18638: PUSH
18639: LD_INT 4
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: IN
18648: IFFALSE 18668
18650: PUSH
18651: LD_VAR 0 1
18655: PPUSH
18656: LD_INT 51
18658: PPUSH
18659: CALL_OW 321
18663: PUSH
18664: LD_INT 2
18666: EQUAL
18667: AND
18668: IFFALSE 18685
// bpoints := bpoints * 1.2 ;
18670: LD_ADDR_VAR 0 10
18674: PUSH
18675: LD_VAR 0 10
18679: PUSH
18680: LD_REAL  1.20000000000000E+0000
18683: MUL
18684: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18685: LD_VAR 0 6
18689: PPUSH
18690: CALL_OW 257
18694: PUSH
18695: LD_INT 5
18697: PUSH
18698: LD_INT 7
18700: PUSH
18701: LD_INT 9
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: LIST
18708: IN
18709: IFFALSE 18729
18711: PUSH
18712: LD_VAR 0 1
18716: PPUSH
18717: LD_INT 52
18719: PPUSH
18720: CALL_OW 321
18724: PUSH
18725: LD_INT 2
18727: EQUAL
18728: AND
18729: IFFALSE 18746
// bpoints := bpoints * 1.5 ;
18731: LD_ADDR_VAR 0 10
18735: PUSH
18736: LD_VAR 0 10
18740: PUSH
18741: LD_REAL  1.50000000000000E+0000
18744: MUL
18745: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18746: LD_VAR 0 1
18750: PPUSH
18751: LD_INT 66
18753: PPUSH
18754: CALL_OW 321
18758: PUSH
18759: LD_INT 2
18761: EQUAL
18762: IFFALSE 18779
// bpoints := bpoints * 1.1 ;
18764: LD_ADDR_VAR 0 10
18768: PUSH
18769: LD_VAR 0 10
18773: PUSH
18774: LD_REAL  1.10000000000000E+0000
18777: MUL
18778: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18779: LD_ADDR_VAR 0 10
18783: PUSH
18784: LD_VAR 0 10
18788: PUSH
18789: LD_VAR 0 6
18793: PPUSH
18794: LD_INT 1
18796: PPUSH
18797: CALL_OW 259
18801: PUSH
18802: LD_REAL  1.15000000000000E+0000
18805: MUL
18806: MUL
18807: ST_TO_ADDR
// end ; unit_vehicle :
18808: GO 19638
18810: LD_INT 2
18812: DOUBLE
18813: EQUAL
18814: IFTRUE 18818
18816: GO 19626
18818: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18819: LD_VAR 0 6
18823: PPUSH
18824: CALL_OW 264
18828: PUSH
18829: LD_INT 2
18831: PUSH
18832: LD_INT 42
18834: PUSH
18835: LD_INT 24
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: LIST
18842: IN
18843: IFFALSE 18864
// points := [ 25 , 5 , 3 ] ;
18845: LD_ADDR_VAR 0 9
18849: PUSH
18850: LD_INT 25
18852: PUSH
18853: LD_INT 5
18855: PUSH
18856: LD_INT 3
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: LIST
18863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18864: LD_VAR 0 6
18868: PPUSH
18869: CALL_OW 264
18873: PUSH
18874: LD_INT 4
18876: PUSH
18877: LD_INT 43
18879: PUSH
18880: LD_INT 25
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: LIST
18887: IN
18888: IFFALSE 18909
// points := [ 40 , 15 , 5 ] ;
18890: LD_ADDR_VAR 0 9
18894: PUSH
18895: LD_INT 40
18897: PUSH
18898: LD_INT 15
18900: PUSH
18901: LD_INT 5
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18909: LD_VAR 0 6
18913: PPUSH
18914: CALL_OW 264
18918: PUSH
18919: LD_INT 3
18921: PUSH
18922: LD_INT 23
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: IN
18929: IFFALSE 18950
// points := [ 7 , 25 , 8 ] ;
18931: LD_ADDR_VAR 0 9
18935: PUSH
18936: LD_INT 7
18938: PUSH
18939: LD_INT 25
18941: PUSH
18942: LD_INT 8
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: LIST
18949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18950: LD_VAR 0 6
18954: PPUSH
18955: CALL_OW 264
18959: PUSH
18960: LD_INT 5
18962: PUSH
18963: LD_INT 27
18965: PUSH
18966: LD_INT 44
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: LIST
18973: IN
18974: IFFALSE 18995
// points := [ 14 , 50 , 16 ] ;
18976: LD_ADDR_VAR 0 9
18980: PUSH
18981: LD_INT 14
18983: PUSH
18984: LD_INT 50
18986: PUSH
18987: LD_INT 16
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: LIST
18994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18995: LD_VAR 0 6
18999: PPUSH
19000: CALL_OW 264
19004: PUSH
19005: LD_INT 6
19007: PUSH
19008: LD_INT 46
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: IN
19015: IFFALSE 19036
// points := [ 32 , 120 , 70 ] ;
19017: LD_ADDR_VAR 0 9
19021: PUSH
19022: LD_INT 32
19024: PUSH
19025: LD_INT 120
19027: PUSH
19028: LD_INT 70
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: LIST
19035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
19036: LD_VAR 0 6
19040: PPUSH
19041: CALL_OW 264
19045: PUSH
19046: LD_INT 7
19048: PUSH
19049: LD_INT 28
19051: PUSH
19052: LD_INT 45
19054: PUSH
19055: LD_INT 92
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: IN
19064: IFFALSE 19085
// points := [ 35 , 20 , 45 ] ;
19066: LD_ADDR_VAR 0 9
19070: PUSH
19071: LD_INT 35
19073: PUSH
19074: LD_INT 20
19076: PUSH
19077: LD_INT 45
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: LIST
19084: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19085: LD_VAR 0 6
19089: PPUSH
19090: CALL_OW 264
19094: PUSH
19095: LD_INT 47
19097: PUSH
19098: EMPTY
19099: LIST
19100: IN
19101: IFFALSE 19122
// points := [ 67 , 45 , 75 ] ;
19103: LD_ADDR_VAR 0 9
19107: PUSH
19108: LD_INT 67
19110: PUSH
19111: LD_INT 45
19113: PUSH
19114: LD_INT 75
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: LIST
19121: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19122: LD_VAR 0 6
19126: PPUSH
19127: CALL_OW 264
19131: PUSH
19132: LD_INT 26
19134: PUSH
19135: EMPTY
19136: LIST
19137: IN
19138: IFFALSE 19159
// points := [ 120 , 30 , 80 ] ;
19140: LD_ADDR_VAR 0 9
19144: PUSH
19145: LD_INT 120
19147: PUSH
19148: LD_INT 30
19150: PUSH
19151: LD_INT 80
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: LIST
19158: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19159: LD_VAR 0 6
19163: PPUSH
19164: CALL_OW 264
19168: PUSH
19169: LD_INT 22
19171: PUSH
19172: EMPTY
19173: LIST
19174: IN
19175: IFFALSE 19196
// points := [ 40 , 1 , 1 ] ;
19177: LD_ADDR_VAR 0 9
19181: PUSH
19182: LD_INT 40
19184: PUSH
19185: LD_INT 1
19187: PUSH
19188: LD_INT 1
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: LIST
19195: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19196: LD_VAR 0 6
19200: PPUSH
19201: CALL_OW 264
19205: PUSH
19206: LD_INT 29
19208: PUSH
19209: EMPTY
19210: LIST
19211: IN
19212: IFFALSE 19233
// points := [ 70 , 200 , 400 ] ;
19214: LD_ADDR_VAR 0 9
19218: PUSH
19219: LD_INT 70
19221: PUSH
19222: LD_INT 200
19224: PUSH
19225: LD_INT 400
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: LIST
19232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19233: LD_VAR 0 6
19237: PPUSH
19238: CALL_OW 264
19242: PUSH
19243: LD_INT 14
19245: PUSH
19246: LD_INT 53
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: IN
19253: IFFALSE 19274
// points := [ 40 , 10 , 20 ] ;
19255: LD_ADDR_VAR 0 9
19259: PUSH
19260: LD_INT 40
19262: PUSH
19263: LD_INT 10
19265: PUSH
19266: LD_INT 20
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19274: LD_VAR 0 6
19278: PPUSH
19279: CALL_OW 264
19283: PUSH
19284: LD_INT 9
19286: PUSH
19287: EMPTY
19288: LIST
19289: IN
19290: IFFALSE 19311
// points := [ 5 , 70 , 20 ] ;
19292: LD_ADDR_VAR 0 9
19296: PUSH
19297: LD_INT 5
19299: PUSH
19300: LD_INT 70
19302: PUSH
19303: LD_INT 20
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: LIST
19310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19311: LD_VAR 0 6
19315: PPUSH
19316: CALL_OW 264
19320: PUSH
19321: LD_INT 10
19323: PUSH
19324: EMPTY
19325: LIST
19326: IN
19327: IFFALSE 19348
// points := [ 35 , 110 , 70 ] ;
19329: LD_ADDR_VAR 0 9
19333: PUSH
19334: LD_INT 35
19336: PUSH
19337: LD_INT 110
19339: PUSH
19340: LD_INT 70
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: LIST
19347: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19348: LD_VAR 0 6
19352: PPUSH
19353: CALL_OW 265
19357: PUSH
19358: LD_INT 25
19360: EQUAL
19361: IFFALSE 19382
// points := [ 80 , 65 , 100 ] ;
19363: LD_ADDR_VAR 0 9
19367: PUSH
19368: LD_INT 80
19370: PUSH
19371: LD_INT 65
19373: PUSH
19374: LD_INT 100
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: LIST
19381: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19382: LD_VAR 0 6
19386: PPUSH
19387: CALL_OW 263
19391: PUSH
19392: LD_INT 1
19394: EQUAL
19395: IFFALSE 19430
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19397: LD_ADDR_VAR 0 10
19401: PUSH
19402: LD_VAR 0 10
19406: PUSH
19407: LD_VAR 0 6
19411: PPUSH
19412: CALL_OW 311
19416: PPUSH
19417: LD_INT 3
19419: PPUSH
19420: CALL_OW 259
19424: PUSH
19425: LD_INT 4
19427: MUL
19428: MUL
19429: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19430: LD_VAR 0 6
19434: PPUSH
19435: CALL_OW 263
19439: PUSH
19440: LD_INT 2
19442: EQUAL
19443: IFFALSE 19494
// begin j := IsControledBy ( i ) ;
19445: LD_ADDR_VAR 0 7
19449: PUSH
19450: LD_VAR 0 6
19454: PPUSH
19455: CALL_OW 312
19459: ST_TO_ADDR
// if j then
19460: LD_VAR 0 7
19464: IFFALSE 19494
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19466: LD_ADDR_VAR 0 10
19470: PUSH
19471: LD_VAR 0 10
19475: PUSH
19476: LD_VAR 0 7
19480: PPUSH
19481: LD_INT 3
19483: PPUSH
19484: CALL_OW 259
19488: PUSH
19489: LD_INT 3
19491: MUL
19492: MUL
19493: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19494: LD_VAR 0 6
19498: PPUSH
19499: CALL_OW 264
19503: PUSH
19504: LD_INT 5
19506: PUSH
19507: LD_INT 6
19509: PUSH
19510: LD_INT 46
19512: PUSH
19513: LD_INT 44
19515: PUSH
19516: LD_INT 47
19518: PUSH
19519: LD_INT 45
19521: PUSH
19522: LD_INT 28
19524: PUSH
19525: LD_INT 7
19527: PUSH
19528: LD_INT 27
19530: PUSH
19531: LD_INT 29
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: IN
19546: IFFALSE 19566
19548: PUSH
19549: LD_VAR 0 1
19553: PPUSH
19554: LD_INT 52
19556: PPUSH
19557: CALL_OW 321
19561: PUSH
19562: LD_INT 2
19564: EQUAL
19565: AND
19566: IFFALSE 19583
// bpoints := bpoints * 1.2 ;
19568: LD_ADDR_VAR 0 10
19572: PUSH
19573: LD_VAR 0 10
19577: PUSH
19578: LD_REAL  1.20000000000000E+0000
19581: MUL
19582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19583: LD_VAR 0 6
19587: PPUSH
19588: CALL_OW 264
19592: PUSH
19593: LD_INT 6
19595: PUSH
19596: LD_INT 46
19598: PUSH
19599: LD_INT 47
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: IN
19607: IFFALSE 19624
// bpoints := bpoints * 1.2 ;
19609: LD_ADDR_VAR 0 10
19613: PUSH
19614: LD_VAR 0 10
19618: PUSH
19619: LD_REAL  1.20000000000000E+0000
19622: MUL
19623: ST_TO_ADDR
// end ; unit_building :
19624: GO 19638
19626: LD_INT 3
19628: DOUBLE
19629: EQUAL
19630: IFTRUE 19634
19632: GO 19637
19634: POP
// ; end ;
19635: GO 19638
19637: POP
// for j = 1 to 3 do
19638: LD_ADDR_VAR 0 7
19642: PUSH
19643: DOUBLE
19644: LD_INT 1
19646: DEC
19647: ST_TO_ADDR
19648: LD_INT 3
19650: PUSH
19651: FOR_TO
19652: IFFALSE 19705
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19654: LD_ADDR_VAR 0 5
19658: PUSH
19659: LD_VAR 0 5
19663: PPUSH
19664: LD_VAR 0 7
19668: PPUSH
19669: LD_VAR 0 5
19673: PUSH
19674: LD_VAR 0 7
19678: ARRAY
19679: PUSH
19680: LD_VAR 0 9
19684: PUSH
19685: LD_VAR 0 7
19689: ARRAY
19690: PUSH
19691: LD_VAR 0 10
19695: MUL
19696: PLUS
19697: PPUSH
19698: CALL_OW 1
19702: ST_TO_ADDR
19703: GO 19651
19705: POP
19706: POP
// end ;
19707: GO 18180
19709: POP
19710: POP
// result := Replace ( result , 4 , tmp ) ;
19711: LD_ADDR_VAR 0 5
19715: PUSH
19716: LD_VAR 0 5
19720: PPUSH
19721: LD_INT 4
19723: PPUSH
19724: LD_VAR 0 8
19728: PPUSH
19729: CALL_OW 1
19733: ST_TO_ADDR
// end ;
19734: LD_VAR 0 5
19738: RET
// export function DangerAtRange ( unit , range ) ; begin
19739: LD_INT 0
19741: PPUSH
// if not unit then
19742: LD_VAR 0 1
19746: NOT
19747: IFFALSE 19751
// exit ;
19749: GO 19796
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19751: LD_ADDR_VAR 0 3
19755: PUSH
19756: LD_VAR 0 1
19760: PPUSH
19761: CALL_OW 255
19765: PPUSH
19766: LD_VAR 0 1
19770: PPUSH
19771: CALL_OW 250
19775: PPUSH
19776: LD_VAR 0 1
19780: PPUSH
19781: CALL_OW 251
19785: PPUSH
19786: LD_VAR 0 2
19790: PPUSH
19791: CALL 18030 0 4
19795: ST_TO_ADDR
// end ;
19796: LD_VAR 0 3
19800: RET
// export function DangerInArea ( side , area ) ; begin
19801: LD_INT 0
19803: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19804: LD_ADDR_VAR 0 3
19808: PUSH
19809: LD_VAR 0 2
19813: PPUSH
19814: LD_INT 81
19816: PUSH
19817: LD_VAR 0 1
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PPUSH
19826: CALL_OW 70
19830: ST_TO_ADDR
// end ;
19831: LD_VAR 0 3
19835: RET
// export function IsExtension ( b ) ; begin
19836: LD_INT 0
19838: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19839: LD_ADDR_VAR 0 2
19843: PUSH
19844: LD_VAR 0 1
19848: PUSH
19849: LD_INT 23
19851: PUSH
19852: LD_INT 20
19854: PUSH
19855: LD_INT 22
19857: PUSH
19858: LD_INT 17
19860: PUSH
19861: LD_INT 24
19863: PUSH
19864: LD_INT 21
19866: PUSH
19867: LD_INT 19
19869: PUSH
19870: LD_INT 16
19872: PUSH
19873: LD_INT 25
19875: PUSH
19876: LD_INT 18
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: IN
19891: ST_TO_ADDR
// end ;
19892: LD_VAR 0 2
19896: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19897: LD_INT 0
19899: PPUSH
19900: PPUSH
19901: PPUSH
// result := [ ] ;
19902: LD_ADDR_VAR 0 4
19906: PUSH
19907: EMPTY
19908: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19909: LD_ADDR_VAR 0 5
19913: PUSH
19914: LD_VAR 0 2
19918: PPUSH
19919: LD_INT 21
19921: PUSH
19922: LD_INT 3
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PPUSH
19929: CALL_OW 70
19933: ST_TO_ADDR
// if not tmp then
19934: LD_VAR 0 5
19938: NOT
19939: IFFALSE 19943
// exit ;
19941: GO 20007
// if checkLink then
19943: LD_VAR 0 3
19947: IFFALSE 19997
// begin for i in tmp do
19949: LD_ADDR_VAR 0 6
19953: PUSH
19954: LD_VAR 0 5
19958: PUSH
19959: FOR_IN
19960: IFFALSE 19995
// if GetBase ( i ) <> base then
19962: LD_VAR 0 6
19966: PPUSH
19967: CALL_OW 274
19971: PUSH
19972: LD_VAR 0 1
19976: NONEQUAL
19977: IFFALSE 19993
// ComLinkToBase ( base , i ) ;
19979: LD_VAR 0 1
19983: PPUSH
19984: LD_VAR 0 6
19988: PPUSH
19989: CALL_OW 169
19993: GO 19959
19995: POP
19996: POP
// end ; result := tmp ;
19997: LD_ADDR_VAR 0 4
20001: PUSH
20002: LD_VAR 0 5
20006: ST_TO_ADDR
// end ;
20007: LD_VAR 0 4
20011: RET
// export function ComComplete ( units , b ) ; var i ; begin
20012: LD_INT 0
20014: PPUSH
20015: PPUSH
// if not units then
20016: LD_VAR 0 1
20020: NOT
20021: IFFALSE 20025
// exit ;
20023: GO 20115
// for i in units do
20025: LD_ADDR_VAR 0 4
20029: PUSH
20030: LD_VAR 0 1
20034: PUSH
20035: FOR_IN
20036: IFFALSE 20113
// if BuildingStatus ( b ) = bs_build then
20038: LD_VAR 0 2
20042: PPUSH
20043: CALL_OW 461
20047: PUSH
20048: LD_INT 1
20050: EQUAL
20051: IFFALSE 20111
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20053: LD_VAR 0 4
20057: PPUSH
20058: LD_STRING h
20060: PUSH
20061: LD_VAR 0 2
20065: PPUSH
20066: CALL_OW 250
20070: PUSH
20071: LD_VAR 0 2
20075: PPUSH
20076: CALL_OW 251
20080: PUSH
20081: LD_VAR 0 2
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: LD_INT 0
20091: PUSH
20092: LD_INT 0
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: PUSH
20104: EMPTY
20105: LIST
20106: PPUSH
20107: CALL_OW 446
20111: GO 20035
20113: POP
20114: POP
// end ;
20115: LD_VAR 0 3
20119: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20120: LD_INT 0
20122: PPUSH
20123: PPUSH
20124: PPUSH
20125: PPUSH
20126: PPUSH
20127: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
20128: LD_VAR 0 1
20132: NOT
20133: IFTRUE 20150
20135: PUSH
20136: LD_VAR 0 1
20140: PPUSH
20141: CALL_OW 263
20145: PUSH
20146: LD_INT 2
20148: NONEQUAL
20149: OR
20150: IFFALSE 20154
// exit ;
20152: GO 20470
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20154: LD_ADDR_VAR 0 6
20158: PUSH
20159: LD_INT 22
20161: PUSH
20162: LD_VAR 0 1
20166: PPUSH
20167: CALL_OW 255
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 2
20178: PUSH
20179: LD_INT 30
20181: PUSH
20182: LD_INT 36
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 34
20191: PUSH
20192: LD_INT 31
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: LIST
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PPUSH
20208: CALL_OW 69
20212: ST_TO_ADDR
// if not tmp then
20213: LD_VAR 0 6
20217: NOT
20218: IFFALSE 20222
// exit ;
20220: GO 20470
// result := [ ] ;
20222: LD_ADDR_VAR 0 2
20226: PUSH
20227: EMPTY
20228: ST_TO_ADDR
// for i in tmp do
20229: LD_ADDR_VAR 0 3
20233: PUSH
20234: LD_VAR 0 6
20238: PUSH
20239: FOR_IN
20240: IFFALSE 20311
// begin t := UnitsInside ( i ) ;
20242: LD_ADDR_VAR 0 4
20246: PUSH
20247: LD_VAR 0 3
20251: PPUSH
20252: CALL_OW 313
20256: ST_TO_ADDR
// if t then
20257: LD_VAR 0 4
20261: IFFALSE 20309
// for j in t do
20263: LD_ADDR_VAR 0 7
20267: PUSH
20268: LD_VAR 0 4
20272: PUSH
20273: FOR_IN
20274: IFFALSE 20307
// result := Replace ( result , result + 1 , j ) ;
20276: LD_ADDR_VAR 0 2
20280: PUSH
20281: LD_VAR 0 2
20285: PPUSH
20286: LD_VAR 0 2
20290: PUSH
20291: LD_INT 1
20293: PLUS
20294: PPUSH
20295: LD_VAR 0 7
20299: PPUSH
20300: CALL_OW 1
20304: ST_TO_ADDR
20305: GO 20273
20307: POP
20308: POP
// end ;
20309: GO 20239
20311: POP
20312: POP
// if not result then
20313: LD_VAR 0 2
20317: NOT
20318: IFFALSE 20322
// exit ;
20320: GO 20470
// mech := result [ 1 ] ;
20322: LD_ADDR_VAR 0 5
20326: PUSH
20327: LD_VAR 0 2
20331: PUSH
20332: LD_INT 1
20334: ARRAY
20335: ST_TO_ADDR
// if result > 1 then
20336: LD_VAR 0 2
20340: PUSH
20341: LD_INT 1
20343: GREATER
20344: IFFALSE 20456
// begin for i = 2 to result do
20346: LD_ADDR_VAR 0 3
20350: PUSH
20351: DOUBLE
20352: LD_INT 2
20354: DEC
20355: ST_TO_ADDR
20356: LD_VAR 0 2
20360: PUSH
20361: FOR_TO
20362: IFFALSE 20454
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20364: LD_ADDR_VAR 0 4
20368: PUSH
20369: LD_VAR 0 2
20373: PUSH
20374: LD_VAR 0 3
20378: ARRAY
20379: PPUSH
20380: LD_INT 3
20382: PPUSH
20383: CALL_OW 259
20387: PUSH
20388: LD_VAR 0 2
20392: PUSH
20393: LD_VAR 0 3
20397: ARRAY
20398: PPUSH
20399: CALL_OW 432
20403: MINUS
20404: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20405: LD_VAR 0 4
20409: PUSH
20410: LD_VAR 0 5
20414: PPUSH
20415: LD_INT 3
20417: PPUSH
20418: CALL_OW 259
20422: PUSH
20423: LD_VAR 0 5
20427: PPUSH
20428: CALL_OW 432
20432: MINUS
20433: GREATEREQUAL
20434: IFFALSE 20452
// mech := result [ i ] ;
20436: LD_ADDR_VAR 0 5
20440: PUSH
20441: LD_VAR 0 2
20445: PUSH
20446: LD_VAR 0 3
20450: ARRAY
20451: ST_TO_ADDR
// end ;
20452: GO 20361
20454: POP
20455: POP
// end ; ComLinkTo ( vehicle , mech ) ;
20456: LD_VAR 0 1
20460: PPUSH
20461: LD_VAR 0 5
20465: PPUSH
20466: CALL_OW 135
// end ;
20470: LD_VAR 0 2
20474: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20475: LD_INT 0
20477: PPUSH
20478: PPUSH
20479: PPUSH
20480: PPUSH
20481: PPUSH
20482: PPUSH
20483: PPUSH
20484: PPUSH
20485: PPUSH
20486: PPUSH
20487: PPUSH
20488: PPUSH
20489: PPUSH
// result := [ ] ;
20490: LD_ADDR_VAR 0 7
20494: PUSH
20495: EMPTY
20496: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20497: LD_VAR 0 1
20501: PPUSH
20502: CALL_OW 266
20506: PUSH
20507: LD_INT 0
20509: PUSH
20510: LD_INT 1
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: IN
20517: NOT
20518: IFFALSE 20522
// exit ;
20520: GO 22162
// if name then
20522: LD_VAR 0 3
20526: IFFALSE 20542
// SetBName ( base_dep , name ) ;
20528: LD_VAR 0 1
20532: PPUSH
20533: LD_VAR 0 3
20537: PPUSH
20538: CALL_OW 500
// base := GetBase ( base_dep ) ;
20542: LD_ADDR_VAR 0 15
20546: PUSH
20547: LD_VAR 0 1
20551: PPUSH
20552: CALL_OW 274
20556: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20557: LD_ADDR_VAR 0 16
20561: PUSH
20562: LD_VAR 0 1
20566: PPUSH
20567: CALL_OW 255
20571: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20572: LD_ADDR_VAR 0 17
20576: PUSH
20577: LD_VAR 0 1
20581: PPUSH
20582: CALL_OW 248
20586: ST_TO_ADDR
// if sources then
20587: LD_VAR 0 5
20591: IFFALSE 20638
// for i = 1 to 3 do
20593: LD_ADDR_VAR 0 8
20597: PUSH
20598: DOUBLE
20599: LD_INT 1
20601: DEC
20602: ST_TO_ADDR
20603: LD_INT 3
20605: PUSH
20606: FOR_TO
20607: IFFALSE 20636
// AddResourceType ( base , i , sources [ i ] ) ;
20609: LD_VAR 0 15
20613: PPUSH
20614: LD_VAR 0 8
20618: PPUSH
20619: LD_VAR 0 5
20623: PUSH
20624: LD_VAR 0 8
20628: ARRAY
20629: PPUSH
20630: CALL_OW 276
20634: GO 20606
20636: POP
20637: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
20638: LD_ADDR_VAR 0 18
20642: PUSH
20643: LD_VAR 0 15
20647: PPUSH
20648: LD_VAR 0 2
20652: PPUSH
20653: LD_INT 1
20655: PPUSH
20656: CALL 19897 0 3
20660: ST_TO_ADDR
// InitHc ;
20661: CALL_OW 19
// InitUc ;
20665: CALL_OW 18
// uc_side := side ;
20669: LD_ADDR_OWVAR 20
20673: PUSH
20674: LD_VAR 0 16
20678: ST_TO_ADDR
// uc_nation := nation ;
20679: LD_ADDR_OWVAR 21
20683: PUSH
20684: LD_VAR 0 17
20688: ST_TO_ADDR
// if buildings then
20689: LD_VAR 0 18
20693: IFFALSE 22021
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20695: LD_ADDR_VAR 0 19
20699: PUSH
20700: LD_VAR 0 18
20704: PPUSH
20705: LD_INT 2
20707: PUSH
20708: LD_INT 30
20710: PUSH
20711: LD_INT 29
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 30
20720: PUSH
20721: LD_INT 30
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: LIST
20732: PPUSH
20733: CALL_OW 72
20737: ST_TO_ADDR
// if tmp then
20738: LD_VAR 0 19
20742: IFFALSE 20790
// for i in tmp do
20744: LD_ADDR_VAR 0 8
20748: PUSH
20749: LD_VAR 0 19
20753: PUSH
20754: FOR_IN
20755: IFFALSE 20788
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20757: LD_VAR 0 8
20761: PPUSH
20762: CALL_OW 250
20766: PPUSH
20767: LD_VAR 0 8
20771: PPUSH
20772: CALL_OW 251
20776: PPUSH
20777: LD_VAR 0 16
20781: PPUSH
20782: CALL_OW 441
20786: GO 20754
20788: POP
20789: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20790: LD_VAR 0 18
20794: PPUSH
20795: LD_INT 2
20797: PUSH
20798: LD_INT 30
20800: PUSH
20801: LD_INT 32
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 30
20810: PUSH
20811: LD_INT 33
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: LIST
20822: PPUSH
20823: CALL_OW 72
20827: IFFALSE 20915
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20829: LD_ADDR_VAR 0 8
20833: PUSH
20834: LD_VAR 0 18
20838: PPUSH
20839: LD_INT 2
20841: PUSH
20842: LD_INT 30
20844: PUSH
20845: LD_INT 32
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 30
20854: PUSH
20855: LD_INT 33
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: PPUSH
20867: CALL_OW 72
20871: PUSH
20872: FOR_IN
20873: IFFALSE 20913
// begin if not GetBWeapon ( i ) then
20875: LD_VAR 0 8
20879: PPUSH
20880: CALL_OW 269
20884: NOT
20885: IFFALSE 20911
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20887: LD_VAR 0 8
20891: PPUSH
20892: LD_VAR 0 8
20896: PPUSH
20897: LD_VAR 0 2
20901: PPUSH
20902: CALL 22167 0 2
20906: PPUSH
20907: CALL_OW 431
// end ;
20911: GO 20872
20913: POP
20914: POP
// end ; for i = 1 to personel do
20915: LD_ADDR_VAR 0 8
20919: PUSH
20920: DOUBLE
20921: LD_INT 1
20923: DEC
20924: ST_TO_ADDR
20925: LD_VAR 0 6
20929: PUSH
20930: FOR_TO
20931: IFFALSE 22001
// begin if i > 4 then
20933: LD_VAR 0 8
20937: PUSH
20938: LD_INT 4
20940: GREATER
20941: IFFALSE 20945
// break ;
20943: GO 22001
// case i of 1 :
20945: LD_VAR 0 8
20949: PUSH
20950: LD_INT 1
20952: DOUBLE
20953: EQUAL
20954: IFTRUE 20958
20956: GO 21038
20958: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20959: LD_ADDR_VAR 0 12
20963: PUSH
20964: LD_VAR 0 18
20968: PPUSH
20969: LD_INT 22
20971: PUSH
20972: LD_VAR 0 16
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 58
20983: PUSH
20984: EMPTY
20985: LIST
20986: PUSH
20987: LD_INT 2
20989: PUSH
20990: LD_INT 30
20992: PUSH
20993: LD_INT 32
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 30
21002: PUSH
21003: LD_INT 4
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 30
21012: PUSH
21013: LD_INT 5
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: LIST
21030: PPUSH
21031: CALL_OW 72
21035: ST_TO_ADDR
21036: GO 21260
21038: LD_INT 2
21040: DOUBLE
21041: EQUAL
21042: IFTRUE 21046
21044: GO 21108
21046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21047: LD_ADDR_VAR 0 12
21051: PUSH
21052: LD_VAR 0 18
21056: PPUSH
21057: LD_INT 22
21059: PUSH
21060: LD_VAR 0 16
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 2
21071: PUSH
21072: LD_INT 30
21074: PUSH
21075: LD_INT 0
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 30
21084: PUSH
21085: LD_INT 1
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: LIST
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PPUSH
21101: CALL_OW 72
21105: ST_TO_ADDR
21106: GO 21260
21108: LD_INT 3
21110: DOUBLE
21111: EQUAL
21112: IFTRUE 21116
21114: GO 21178
21116: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21117: LD_ADDR_VAR 0 12
21121: PUSH
21122: LD_VAR 0 18
21126: PPUSH
21127: LD_INT 22
21129: PUSH
21130: LD_VAR 0 16
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 2
21141: PUSH
21142: LD_INT 30
21144: PUSH
21145: LD_INT 2
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 30
21154: PUSH
21155: LD_INT 3
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PPUSH
21171: CALL_OW 72
21175: ST_TO_ADDR
21176: GO 21260
21178: LD_INT 4
21180: DOUBLE
21181: EQUAL
21182: IFTRUE 21186
21184: GO 21259
21186: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21187: LD_ADDR_VAR 0 12
21191: PUSH
21192: LD_VAR 0 18
21196: PPUSH
21197: LD_INT 22
21199: PUSH
21200: LD_VAR 0 16
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 2
21211: PUSH
21212: LD_INT 30
21214: PUSH
21215: LD_INT 6
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 30
21224: PUSH
21225: LD_INT 7
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 30
21234: PUSH
21235: LD_INT 8
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PPUSH
21252: CALL_OW 72
21256: ST_TO_ADDR
21257: GO 21260
21259: POP
// if i = 1 then
21260: LD_VAR 0 8
21264: PUSH
21265: LD_INT 1
21267: EQUAL
21268: IFFALSE 21379
// begin tmp := [ ] ;
21270: LD_ADDR_VAR 0 19
21274: PUSH
21275: EMPTY
21276: ST_TO_ADDR
// for j in f do
21277: LD_ADDR_VAR 0 9
21281: PUSH
21282: LD_VAR 0 12
21286: PUSH
21287: FOR_IN
21288: IFFALSE 21361
// if GetBType ( j ) = b_bunker then
21290: LD_VAR 0 9
21294: PPUSH
21295: CALL_OW 266
21299: PUSH
21300: LD_INT 32
21302: EQUAL
21303: IFFALSE 21330
// tmp := Insert ( tmp , 1 , j ) else
21305: LD_ADDR_VAR 0 19
21309: PUSH
21310: LD_VAR 0 19
21314: PPUSH
21315: LD_INT 1
21317: PPUSH
21318: LD_VAR 0 9
21322: PPUSH
21323: CALL_OW 2
21327: ST_TO_ADDR
21328: GO 21359
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21330: LD_ADDR_VAR 0 19
21334: PUSH
21335: LD_VAR 0 19
21339: PPUSH
21340: LD_VAR 0 19
21344: PUSH
21345: LD_INT 1
21347: PLUS
21348: PPUSH
21349: LD_VAR 0 9
21353: PPUSH
21354: CALL_OW 2
21358: ST_TO_ADDR
21359: GO 21287
21361: POP
21362: POP
// if tmp then
21363: LD_VAR 0 19
21367: IFFALSE 21379
// f := tmp ;
21369: LD_ADDR_VAR 0 12
21373: PUSH
21374: LD_VAR 0 19
21378: ST_TO_ADDR
// end ; x := personel [ i ] ;
21379: LD_ADDR_VAR 0 13
21383: PUSH
21384: LD_VAR 0 6
21388: PUSH
21389: LD_VAR 0 8
21393: ARRAY
21394: ST_TO_ADDR
// if x = - 1 then
21395: LD_VAR 0 13
21399: PUSH
21400: LD_INT 1
21402: NEG
21403: EQUAL
21404: IFFALSE 21615
// begin for j in f do
21406: LD_ADDR_VAR 0 9
21410: PUSH
21411: LD_VAR 0 12
21415: PUSH
21416: FOR_IN
21417: IFFALSE 21611
// repeat InitHc ;
21419: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21423: LD_VAR 0 9
21427: PPUSH
21428: CALL_OW 266
21432: PUSH
21433: LD_INT 5
21435: EQUAL
21436: IFFALSE 21506
// begin if UnitsInside ( j ) < 3 then
21438: LD_VAR 0 9
21442: PPUSH
21443: CALL_OW 313
21447: PUSH
21448: LD_INT 3
21450: LESS
21451: IFFALSE 21487
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21453: LD_INT 0
21455: PPUSH
21456: LD_INT 5
21458: PUSH
21459: LD_INT 8
21461: PUSH
21462: LD_INT 9
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: LIST
21469: PUSH
21470: LD_VAR 0 17
21474: ARRAY
21475: PPUSH
21476: LD_VAR 0 4
21480: PPUSH
21481: CALL_OW 380
21485: GO 21504
// PrepareHuman ( false , i , skill ) ;
21487: LD_INT 0
21489: PPUSH
21490: LD_VAR 0 8
21494: PPUSH
21495: LD_VAR 0 4
21499: PPUSH
21500: CALL_OW 380
// end else
21504: GO 21523
// PrepareHuman ( false , i , skill ) ;
21506: LD_INT 0
21508: PPUSH
21509: LD_VAR 0 8
21513: PPUSH
21514: LD_VAR 0 4
21518: PPUSH
21519: CALL_OW 380
// un := CreateHuman ;
21523: LD_ADDR_VAR 0 14
21527: PUSH
21528: CALL_OW 44
21532: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21533: LD_ADDR_VAR 0 7
21537: PUSH
21538: LD_VAR 0 7
21542: PPUSH
21543: LD_INT 1
21545: PPUSH
21546: LD_VAR 0 14
21550: PPUSH
21551: CALL_OW 2
21555: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21556: LD_VAR 0 14
21560: PPUSH
21561: LD_VAR 0 9
21565: PPUSH
21566: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21570: LD_VAR 0 9
21574: PPUSH
21575: CALL_OW 313
21579: PUSH
21580: LD_INT 6
21582: EQUAL
21583: IFTRUE 21607
21585: PUSH
21586: LD_VAR 0 9
21590: PPUSH
21591: CALL_OW 266
21595: PUSH
21596: LD_INT 32
21598: PUSH
21599: LD_INT 31
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: IN
21606: OR
21607: IFFALSE 21419
21609: GO 21416
21611: POP
21612: POP
// end else
21613: GO 21999
// for j = 1 to x do
21615: LD_ADDR_VAR 0 9
21619: PUSH
21620: DOUBLE
21621: LD_INT 1
21623: DEC
21624: ST_TO_ADDR
21625: LD_VAR 0 13
21629: PUSH
21630: FOR_TO
21631: IFFALSE 21997
// begin InitHc ;
21633: CALL_OW 19
// if not f then
21637: LD_VAR 0 12
21641: NOT
21642: IFFALSE 21731
// begin PrepareHuman ( false , i , skill ) ;
21644: LD_INT 0
21646: PPUSH
21647: LD_VAR 0 8
21651: PPUSH
21652: LD_VAR 0 4
21656: PPUSH
21657: CALL_OW 380
// un := CreateHuman ;
21661: LD_ADDR_VAR 0 14
21665: PUSH
21666: CALL_OW 44
21670: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21671: LD_ADDR_VAR 0 7
21675: PUSH
21676: LD_VAR 0 7
21680: PPUSH
21681: LD_INT 1
21683: PPUSH
21684: LD_VAR 0 14
21688: PPUSH
21689: CALL_OW 2
21693: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21694: LD_VAR 0 14
21698: PPUSH
21699: LD_VAR 0 1
21703: PPUSH
21704: CALL_OW 250
21708: PPUSH
21709: LD_VAR 0 1
21713: PPUSH
21714: CALL_OW 251
21718: PPUSH
21719: LD_INT 10
21721: PPUSH
21722: LD_INT 0
21724: PPUSH
21725: CALL_OW 50
// continue ;
21729: GO 21630
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21731: LD_VAR 0 12
21735: PUSH
21736: LD_INT 1
21738: ARRAY
21739: PPUSH
21740: CALL_OW 313
21744: IFFALSE 21772
21746: PUSH
21747: LD_VAR 0 12
21751: PUSH
21752: LD_INT 1
21754: ARRAY
21755: PPUSH
21756: CALL_OW 266
21760: PUSH
21761: LD_INT 32
21763: PUSH
21764: LD_INT 31
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: IN
21771: AND
21772: IFTRUE 21793
21774: PUSH
21775: LD_VAR 0 12
21779: PUSH
21780: LD_INT 1
21782: ARRAY
21783: PPUSH
21784: CALL_OW 313
21788: PUSH
21789: LD_INT 6
21791: EQUAL
21792: OR
21793: IFFALSE 21813
// f := Delete ( f , 1 ) ;
21795: LD_ADDR_VAR 0 12
21799: PUSH
21800: LD_VAR 0 12
21804: PPUSH
21805: LD_INT 1
21807: PPUSH
21808: CALL_OW 3
21812: ST_TO_ADDR
// if not f then
21813: LD_VAR 0 12
21817: NOT
21818: IFFALSE 21836
// begin x := x + 2 ;
21820: LD_ADDR_VAR 0 13
21824: PUSH
21825: LD_VAR 0 13
21829: PUSH
21830: LD_INT 2
21832: PLUS
21833: ST_TO_ADDR
// continue ;
21834: GO 21630
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21836: LD_VAR 0 12
21840: PUSH
21841: LD_INT 1
21843: ARRAY
21844: PPUSH
21845: CALL_OW 266
21849: PUSH
21850: LD_INT 5
21852: EQUAL
21853: IFFALSE 21927
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21855: LD_VAR 0 12
21859: PUSH
21860: LD_INT 1
21862: ARRAY
21863: PPUSH
21864: CALL_OW 313
21868: PUSH
21869: LD_INT 3
21871: LESS
21872: IFFALSE 21908
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21874: LD_INT 0
21876: PPUSH
21877: LD_INT 5
21879: PUSH
21880: LD_INT 8
21882: PUSH
21883: LD_INT 9
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: LIST
21890: PUSH
21891: LD_VAR 0 17
21895: ARRAY
21896: PPUSH
21897: LD_VAR 0 4
21901: PPUSH
21902: CALL_OW 380
21906: GO 21925
// PrepareHuman ( false , i , skill ) ;
21908: LD_INT 0
21910: PPUSH
21911: LD_VAR 0 8
21915: PPUSH
21916: LD_VAR 0 4
21920: PPUSH
21921: CALL_OW 380
// end else
21925: GO 21944
// PrepareHuman ( false , i , skill ) ;
21927: LD_INT 0
21929: PPUSH
21930: LD_VAR 0 8
21934: PPUSH
21935: LD_VAR 0 4
21939: PPUSH
21940: CALL_OW 380
// un := CreateHuman ;
21944: LD_ADDR_VAR 0 14
21948: PUSH
21949: CALL_OW 44
21953: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21954: LD_ADDR_VAR 0 7
21958: PUSH
21959: LD_VAR 0 7
21963: PPUSH
21964: LD_INT 1
21966: PPUSH
21967: LD_VAR 0 14
21971: PPUSH
21972: CALL_OW 2
21976: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21977: LD_VAR 0 14
21981: PPUSH
21982: LD_VAR 0 12
21986: PUSH
21987: LD_INT 1
21989: ARRAY
21990: PPUSH
21991: CALL_OW 52
// end ;
21995: GO 21630
21997: POP
21998: POP
// end ;
21999: GO 20930
22001: POP
22002: POP
// result := result ^ buildings ;
22003: LD_ADDR_VAR 0 7
22007: PUSH
22008: LD_VAR 0 7
22012: PUSH
22013: LD_VAR 0 18
22017: ADD
22018: ST_TO_ADDR
// end else
22019: GO 22162
// begin for i = 1 to personel do
22021: LD_ADDR_VAR 0 8
22025: PUSH
22026: DOUBLE
22027: LD_INT 1
22029: DEC
22030: ST_TO_ADDR
22031: LD_VAR 0 6
22035: PUSH
22036: FOR_TO
22037: IFFALSE 22160
// begin if i > 4 then
22039: LD_VAR 0 8
22043: PUSH
22044: LD_INT 4
22046: GREATER
22047: IFFALSE 22051
// break ;
22049: GO 22160
// x := personel [ i ] ;
22051: LD_ADDR_VAR 0 13
22055: PUSH
22056: LD_VAR 0 6
22060: PUSH
22061: LD_VAR 0 8
22065: ARRAY
22066: ST_TO_ADDR
// if x = - 1 then
22067: LD_VAR 0 13
22071: PUSH
22072: LD_INT 1
22074: NEG
22075: EQUAL
22076: IFFALSE 22080
// continue ;
22078: GO 22036
// PrepareHuman ( false , i , skill ) ;
22080: LD_INT 0
22082: PPUSH
22083: LD_VAR 0 8
22087: PPUSH
22088: LD_VAR 0 4
22092: PPUSH
22093: CALL_OW 380
// un := CreateHuman ;
22097: LD_ADDR_VAR 0 14
22101: PUSH
22102: CALL_OW 44
22106: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22107: LD_VAR 0 14
22111: PPUSH
22112: LD_VAR 0 1
22116: PPUSH
22117: CALL_OW 250
22121: PPUSH
22122: LD_VAR 0 1
22126: PPUSH
22127: CALL_OW 251
22131: PPUSH
22132: LD_INT 10
22134: PPUSH
22135: LD_INT 0
22137: PPUSH
22138: CALL_OW 50
// result := result ^ un ;
22142: LD_ADDR_VAR 0 7
22146: PUSH
22147: LD_VAR 0 7
22151: PUSH
22152: LD_VAR 0 14
22156: ADD
22157: ST_TO_ADDR
// end ;
22158: GO 22036
22160: POP
22161: POP
// end ; end ;
22162: LD_VAR 0 7
22166: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22167: LD_INT 0
22169: PPUSH
22170: PPUSH
22171: PPUSH
22172: PPUSH
22173: PPUSH
22174: PPUSH
22175: PPUSH
22176: PPUSH
22177: PPUSH
22178: PPUSH
22179: PPUSH
22180: PPUSH
22181: PPUSH
22182: PPUSH
22183: PPUSH
22184: PPUSH
// result := false ;
22185: LD_ADDR_VAR 0 3
22189: PUSH
22190: LD_INT 0
22192: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22193: LD_VAR 0 1
22197: NOT
22198: IFTRUE 22223
22200: PUSH
22201: LD_VAR 0 1
22205: PPUSH
22206: CALL_OW 266
22210: PUSH
22211: LD_INT 32
22213: PUSH
22214: LD_INT 33
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: IN
22221: NOT
22222: OR
22223: IFFALSE 22227
// exit ;
22225: GO 23362
// nat := GetNation ( tower ) ;
22227: LD_ADDR_VAR 0 12
22231: PUSH
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL_OW 248
22241: ST_TO_ADDR
// side := GetSide ( tower ) ;
22242: LD_ADDR_VAR 0 16
22246: PUSH
22247: LD_VAR 0 1
22251: PPUSH
22252: CALL_OW 255
22256: ST_TO_ADDR
// x := GetX ( tower ) ;
22257: LD_ADDR_VAR 0 10
22261: PUSH
22262: LD_VAR 0 1
22266: PPUSH
22267: CALL_OW 250
22271: ST_TO_ADDR
// y := GetY ( tower ) ;
22272: LD_ADDR_VAR 0 11
22276: PUSH
22277: LD_VAR 0 1
22281: PPUSH
22282: CALL_OW 251
22286: ST_TO_ADDR
// if not x or not y then
22287: LD_VAR 0 10
22291: NOT
22292: IFTRUE 22301
22294: PUSH
22295: LD_VAR 0 11
22299: NOT
22300: OR
22301: IFFALSE 22305
// exit ;
22303: GO 23362
// weapon := 0 ;
22305: LD_ADDR_VAR 0 18
22309: PUSH
22310: LD_INT 0
22312: ST_TO_ADDR
// fac_list := [ ] ;
22313: LD_ADDR_VAR 0 17
22317: PUSH
22318: EMPTY
22319: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22320: LD_ADDR_VAR 0 6
22324: PUSH
22325: LD_VAR 0 1
22329: PPUSH
22330: CALL_OW 274
22334: PPUSH
22335: LD_VAR 0 2
22339: PPUSH
22340: LD_INT 0
22342: PPUSH
22343: CALL 19897 0 3
22347: PPUSH
22348: LD_INT 30
22350: PUSH
22351: LD_INT 3
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PPUSH
22358: CALL_OW 72
22362: ST_TO_ADDR
// if not factories then
22363: LD_VAR 0 6
22367: NOT
22368: IFFALSE 22372
// exit ;
22370: GO 23362
// for i in factories do
22372: LD_ADDR_VAR 0 8
22376: PUSH
22377: LD_VAR 0 6
22381: PUSH
22382: FOR_IN
22383: IFFALSE 22408
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22385: LD_ADDR_VAR 0 17
22389: PUSH
22390: LD_VAR 0 17
22394: PUSH
22395: LD_VAR 0 8
22399: PPUSH
22400: CALL_OW 478
22404: UNION
22405: ST_TO_ADDR
22406: GO 22382
22408: POP
22409: POP
// if not fac_list then
22410: LD_VAR 0 17
22414: NOT
22415: IFFALSE 22419
// exit ;
22417: GO 23362
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22419: LD_ADDR_VAR 0 5
22423: PUSH
22424: LD_INT 4
22426: PUSH
22427: LD_INT 5
22429: PUSH
22430: LD_INT 9
22432: PUSH
22433: LD_INT 10
22435: PUSH
22436: LD_INT 6
22438: PUSH
22439: LD_INT 7
22441: PUSH
22442: LD_INT 11
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 27
22456: PUSH
22457: LD_INT 28
22459: PUSH
22460: LD_INT 26
22462: PUSH
22463: LD_INT 30
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 43
22474: PUSH
22475: LD_INT 44
22477: PUSH
22478: LD_INT 46
22480: PUSH
22481: LD_INT 45
22483: PUSH
22484: LD_INT 47
22486: PUSH
22487: LD_INT 49
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: PUSH
22503: LD_VAR 0 12
22507: ARRAY
22508: ST_TO_ADDR
// list := list isect fac_list ;
22509: LD_ADDR_VAR 0 5
22513: PUSH
22514: LD_VAR 0 5
22518: PUSH
22519: LD_VAR 0 17
22523: ISECT
22524: ST_TO_ADDR
// if not list then
22525: LD_VAR 0 5
22529: NOT
22530: IFFALSE 22534
// exit ;
22532: GO 23362
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22534: LD_VAR 0 12
22538: PUSH
22539: LD_INT 3
22541: EQUAL
22542: IFFALSE 22554
22544: PUSH
22545: LD_INT 49
22547: PUSH
22548: LD_VAR 0 5
22552: IN
22553: AND
22554: IFFALSE 22574
22556: PUSH
22557: LD_INT 31
22559: PPUSH
22560: LD_VAR 0 16
22564: PPUSH
22565: CALL_OW 321
22569: PUSH
22570: LD_INT 2
22572: EQUAL
22573: AND
22574: IFFALSE 22634
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22576: LD_INT 22
22578: PUSH
22579: LD_VAR 0 16
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 35
22590: PUSH
22591: LD_INT 49
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 91
22600: PUSH
22601: LD_VAR 0 1
22605: PUSH
22606: LD_INT 10
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: PPUSH
22619: CALL_OW 69
22623: NOT
22624: IFFALSE 22634
// weapon := ru_time_lapser ;
22626: LD_ADDR_VAR 0 18
22630: PUSH
22631: LD_INT 49
22633: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22634: LD_VAR 0 12
22638: PUSH
22639: LD_INT 1
22641: PUSH
22642: LD_INT 2
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: IN
22649: IFFALSE 22673
22651: PUSH
22652: LD_INT 11
22654: PUSH
22655: LD_VAR 0 5
22659: IN
22660: IFTRUE 22672
22662: PUSH
22663: LD_INT 30
22665: PUSH
22666: LD_VAR 0 5
22670: IN
22671: OR
22672: AND
22673: IFFALSE 22693
22675: PUSH
22676: LD_INT 6
22678: PPUSH
22679: LD_VAR 0 16
22683: PPUSH
22684: CALL_OW 321
22688: PUSH
22689: LD_INT 2
22691: EQUAL
22692: AND
22693: IFFALSE 22860
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22695: LD_INT 22
22697: PUSH
22698: LD_VAR 0 16
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 2
22709: PUSH
22710: LD_INT 35
22712: PUSH
22713: LD_INT 11
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 35
22722: PUSH
22723: LD_INT 30
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 91
22737: PUSH
22738: LD_VAR 0 1
22742: PUSH
22743: LD_INT 18
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: LIST
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: LIST
22755: PPUSH
22756: CALL_OW 69
22760: NOT
22761: IFFALSE 22837
22763: PUSH
22764: LD_INT 22
22766: PUSH
22767: LD_VAR 0 16
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 2
22778: PUSH
22779: LD_INT 30
22781: PUSH
22782: LD_INT 32
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 30
22791: PUSH
22792: LD_INT 33
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 91
22806: PUSH
22807: LD_VAR 0 1
22811: PUSH
22812: LD_INT 12
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: LIST
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: LIST
22824: PUSH
22825: EMPTY
22826: LIST
22827: PPUSH
22828: CALL_OW 69
22832: PUSH
22833: LD_INT 2
22835: GREATER
22836: AND
22837: IFFALSE 22860
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22839: LD_ADDR_VAR 0 18
22843: PUSH
22844: LD_INT 11
22846: PUSH
22847: LD_INT 30
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_VAR 0 12
22858: ARRAY
22859: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22860: LD_VAR 0 18
22864: NOT
22865: IFFALSE 22885
22867: PUSH
22868: LD_INT 40
22870: PPUSH
22871: LD_VAR 0 16
22875: PPUSH
22876: CALL_OW 321
22880: PUSH
22881: LD_INT 2
22883: EQUAL
22884: AND
22885: IFFALSE 22921
22887: PUSH
22888: LD_INT 7
22890: PUSH
22891: LD_VAR 0 5
22895: IN
22896: IFTRUE 22908
22898: PUSH
22899: LD_INT 28
22901: PUSH
22902: LD_VAR 0 5
22906: IN
22907: OR
22908: IFTRUE 22920
22910: PUSH
22911: LD_INT 45
22913: PUSH
22914: LD_VAR 0 5
22918: IN
22919: OR
22920: AND
22921: IFFALSE 23175
// begin hex := GetHexInfo ( x , y ) ;
22923: LD_ADDR_VAR 0 4
22927: PUSH
22928: LD_VAR 0 10
22932: PPUSH
22933: LD_VAR 0 11
22937: PPUSH
22938: CALL_OW 546
22942: ST_TO_ADDR
// if hex [ 1 ] then
22943: LD_VAR 0 4
22947: PUSH
22948: LD_INT 1
22950: ARRAY
22951: IFFALSE 22955
// exit ;
22953: GO 23362
// height := hex [ 2 ] ;
22955: LD_ADDR_VAR 0 15
22959: PUSH
22960: LD_VAR 0 4
22964: PUSH
22965: LD_INT 2
22967: ARRAY
22968: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22969: LD_ADDR_VAR 0 14
22973: PUSH
22974: LD_INT 0
22976: PUSH
22977: LD_INT 2
22979: PUSH
22980: LD_INT 3
22982: PUSH
22983: LD_INT 5
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: ST_TO_ADDR
// for i in tmp do
22992: LD_ADDR_VAR 0 8
22996: PUSH
22997: LD_VAR 0 14
23001: PUSH
23002: FOR_IN
23003: IFFALSE 23173
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23005: LD_ADDR_VAR 0 9
23009: PUSH
23010: LD_VAR 0 10
23014: PPUSH
23015: LD_VAR 0 8
23019: PPUSH
23020: LD_INT 5
23022: PPUSH
23023: CALL_OW 272
23027: PUSH
23028: LD_VAR 0 11
23032: PPUSH
23033: LD_VAR 0 8
23037: PPUSH
23038: LD_INT 5
23040: PPUSH
23041: CALL_OW 273
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23050: LD_VAR 0 9
23054: PUSH
23055: LD_INT 1
23057: ARRAY
23058: PPUSH
23059: LD_VAR 0 9
23063: PUSH
23064: LD_INT 2
23066: ARRAY
23067: PPUSH
23068: CALL_OW 488
23072: IFFALSE 23171
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23074: LD_ADDR_VAR 0 4
23078: PUSH
23079: LD_VAR 0 9
23083: PUSH
23084: LD_INT 1
23086: ARRAY
23087: PPUSH
23088: LD_VAR 0 9
23092: PUSH
23093: LD_INT 2
23095: ARRAY
23096: PPUSH
23097: CALL_OW 546
23101: ST_TO_ADDR
// if hex [ 1 ] then
23102: LD_VAR 0 4
23106: PUSH
23107: LD_INT 1
23109: ARRAY
23110: IFFALSE 23114
// continue ;
23112: GO 23002
// h := hex [ 2 ] ;
23114: LD_ADDR_VAR 0 13
23118: PUSH
23119: LD_VAR 0 4
23123: PUSH
23124: LD_INT 2
23126: ARRAY
23127: ST_TO_ADDR
// if h + 7 < height then
23128: LD_VAR 0 13
23132: PUSH
23133: LD_INT 7
23135: PLUS
23136: PUSH
23137: LD_VAR 0 15
23141: LESS
23142: IFFALSE 23171
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23144: LD_ADDR_VAR 0 18
23148: PUSH
23149: LD_INT 7
23151: PUSH
23152: LD_INT 28
23154: PUSH
23155: LD_INT 45
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: LIST
23162: PUSH
23163: LD_VAR 0 12
23167: ARRAY
23168: ST_TO_ADDR
// break ;
23169: GO 23173
// end ; end ; end ;
23171: GO 23002
23173: POP
23174: POP
// end ; if not weapon then
23175: LD_VAR 0 18
23179: NOT
23180: IFFALSE 23240
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23182: LD_ADDR_VAR 0 5
23186: PUSH
23187: LD_VAR 0 5
23191: PUSH
23192: LD_INT 11
23194: PUSH
23195: LD_INT 30
23197: PUSH
23198: LD_INT 49
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: DIFF
23206: ST_TO_ADDR
// if not list then
23207: LD_VAR 0 5
23211: NOT
23212: IFFALSE 23216
// exit ;
23214: GO 23362
// weapon := list [ rand ( 1 , list ) ] ;
23216: LD_ADDR_VAR 0 18
23220: PUSH
23221: LD_VAR 0 5
23225: PUSH
23226: LD_INT 1
23228: PPUSH
23229: LD_VAR 0 5
23233: PPUSH
23234: CALL_OW 12
23238: ARRAY
23239: ST_TO_ADDR
// end ; if weapon then
23240: LD_VAR 0 18
23244: IFFALSE 23362
// begin tmp := CostOfWeapon ( weapon ) ;
23246: LD_ADDR_VAR 0 14
23250: PUSH
23251: LD_VAR 0 18
23255: PPUSH
23256: CALL_OW 451
23260: ST_TO_ADDR
// j := GetBase ( tower ) ;
23261: LD_ADDR_VAR 0 9
23265: PUSH
23266: LD_VAR 0 1
23270: PPUSH
23271: CALL_OW 274
23275: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23276: LD_VAR 0 9
23280: PPUSH
23281: LD_INT 1
23283: PPUSH
23284: CALL_OW 275
23288: PUSH
23289: LD_VAR 0 14
23293: PUSH
23294: LD_INT 1
23296: ARRAY
23297: GREATEREQUAL
23298: IFFALSE 23324
23300: PUSH
23301: LD_VAR 0 9
23305: PPUSH
23306: LD_INT 2
23308: PPUSH
23309: CALL_OW 275
23313: PUSH
23314: LD_VAR 0 14
23318: PUSH
23319: LD_INT 2
23321: ARRAY
23322: GREATEREQUAL
23323: AND
23324: IFFALSE 23350
23326: PUSH
23327: LD_VAR 0 9
23331: PPUSH
23332: LD_INT 3
23334: PPUSH
23335: CALL_OW 275
23339: PUSH
23340: LD_VAR 0 14
23344: PUSH
23345: LD_INT 3
23347: ARRAY
23348: GREATEREQUAL
23349: AND
23350: IFFALSE 23362
// result := weapon ;
23352: LD_ADDR_VAR 0 3
23356: PUSH
23357: LD_VAR 0 18
23361: ST_TO_ADDR
// end ; end ;
23362: LD_VAR 0 3
23366: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23367: LD_INT 0
23369: PPUSH
23370: PPUSH
// result := true ;
23371: LD_ADDR_VAR 0 3
23375: PUSH
23376: LD_INT 1
23378: ST_TO_ADDR
// if array1 = array2 then
23379: LD_VAR 0 1
23383: PUSH
23384: LD_VAR 0 2
23388: EQUAL
23389: IFFALSE 23449
// begin for i = 1 to array1 do
23391: LD_ADDR_VAR 0 4
23395: PUSH
23396: DOUBLE
23397: LD_INT 1
23399: DEC
23400: ST_TO_ADDR
23401: LD_VAR 0 1
23405: PUSH
23406: FOR_TO
23407: IFFALSE 23445
// if array1 [ i ] <> array2 [ i ] then
23409: LD_VAR 0 1
23413: PUSH
23414: LD_VAR 0 4
23418: ARRAY
23419: PUSH
23420: LD_VAR 0 2
23424: PUSH
23425: LD_VAR 0 4
23429: ARRAY
23430: NONEQUAL
23431: IFFALSE 23443
// begin result := false ;
23433: LD_ADDR_VAR 0 3
23437: PUSH
23438: LD_INT 0
23440: ST_TO_ADDR
// break ;
23441: GO 23445
// end ;
23443: GO 23406
23445: POP
23446: POP
// end else
23447: GO 23457
// result := false ;
23449: LD_ADDR_VAR 0 3
23453: PUSH
23454: LD_INT 0
23456: ST_TO_ADDR
// end ;
23457: LD_VAR 0 3
23461: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
23462: LD_INT 0
23464: PPUSH
23465: PPUSH
// if not array1 or not array2 then
23466: LD_VAR 0 1
23470: NOT
23471: IFTRUE 23480
23473: PUSH
23474: LD_VAR 0 2
23478: NOT
23479: OR
23480: IFFALSE 23484
// exit ;
23482: GO 23548
// result := true ;
23484: LD_ADDR_VAR 0 3
23488: PUSH
23489: LD_INT 1
23491: ST_TO_ADDR
// for i = 1 to array1 do
23492: LD_ADDR_VAR 0 4
23496: PUSH
23497: DOUBLE
23498: LD_INT 1
23500: DEC
23501: ST_TO_ADDR
23502: LD_VAR 0 1
23506: PUSH
23507: FOR_TO
23508: IFFALSE 23546
// if array1 [ i ] <> array2 [ i ] then
23510: LD_VAR 0 1
23514: PUSH
23515: LD_VAR 0 4
23519: ARRAY
23520: PUSH
23521: LD_VAR 0 2
23525: PUSH
23526: LD_VAR 0 4
23530: ARRAY
23531: NONEQUAL
23532: IFFALSE 23544
// begin result := false ;
23534: LD_ADDR_VAR 0 3
23538: PUSH
23539: LD_INT 0
23541: ST_TO_ADDR
// break ;
23542: GO 23546
// end ;
23544: GO 23507
23546: POP
23547: POP
// end ;
23548: LD_VAR 0 3
23552: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23553: LD_INT 0
23555: PPUSH
23556: PPUSH
23557: PPUSH
// pom := GetBase ( fac ) ;
23558: LD_ADDR_VAR 0 5
23562: PUSH
23563: LD_VAR 0 1
23567: PPUSH
23568: CALL_OW 274
23572: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23573: LD_ADDR_VAR 0 4
23577: PUSH
23578: LD_VAR 0 2
23582: PUSH
23583: LD_INT 1
23585: ARRAY
23586: PPUSH
23587: LD_VAR 0 2
23591: PUSH
23592: LD_INT 2
23594: ARRAY
23595: PPUSH
23596: LD_VAR 0 2
23600: PUSH
23601: LD_INT 3
23603: ARRAY
23604: PPUSH
23605: LD_VAR 0 2
23609: PUSH
23610: LD_INT 4
23612: ARRAY
23613: PPUSH
23614: CALL_OW 449
23618: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23619: LD_ADDR_VAR 0 3
23623: PUSH
23624: LD_VAR 0 5
23628: PPUSH
23629: LD_INT 1
23631: PPUSH
23632: CALL_OW 275
23636: PUSH
23637: LD_VAR 0 4
23641: PUSH
23642: LD_INT 1
23644: ARRAY
23645: GREATEREQUAL
23646: IFFALSE 23672
23648: PUSH
23649: LD_VAR 0 5
23653: PPUSH
23654: LD_INT 2
23656: PPUSH
23657: CALL_OW 275
23661: PUSH
23662: LD_VAR 0 4
23666: PUSH
23667: LD_INT 2
23669: ARRAY
23670: GREATEREQUAL
23671: AND
23672: IFFALSE 23698
23674: PUSH
23675: LD_VAR 0 5
23679: PPUSH
23680: LD_INT 3
23682: PPUSH
23683: CALL_OW 275
23687: PUSH
23688: LD_VAR 0 4
23692: PUSH
23693: LD_INT 3
23695: ARRAY
23696: GREATEREQUAL
23697: AND
23698: ST_TO_ADDR
// end ;
23699: LD_VAR 0 3
23703: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23704: LD_INT 0
23706: PPUSH
23707: PPUSH
23708: PPUSH
23709: PPUSH
// pom := GetBase ( building ) ;
23710: LD_ADDR_VAR 0 3
23714: PUSH
23715: LD_VAR 0 1
23719: PPUSH
23720: CALL_OW 274
23724: ST_TO_ADDR
// if not pom then
23725: LD_VAR 0 3
23729: NOT
23730: IFFALSE 23734
// exit ;
23732: GO 23908
// btype := GetBType ( building ) ;
23734: LD_ADDR_VAR 0 5
23738: PUSH
23739: LD_VAR 0 1
23743: PPUSH
23744: CALL_OW 266
23748: ST_TO_ADDR
// if btype = b_armoury then
23749: LD_VAR 0 5
23753: PUSH
23754: LD_INT 4
23756: EQUAL
23757: IFFALSE 23767
// btype := b_barracks ;
23759: LD_ADDR_VAR 0 5
23763: PUSH
23764: LD_INT 5
23766: ST_TO_ADDR
// if btype = b_depot then
23767: LD_VAR 0 5
23771: PUSH
23772: LD_INT 0
23774: EQUAL
23775: IFFALSE 23785
// btype := b_warehouse ;
23777: LD_ADDR_VAR 0 5
23781: PUSH
23782: LD_INT 1
23784: ST_TO_ADDR
// if btype = b_workshop then
23785: LD_VAR 0 5
23789: PUSH
23790: LD_INT 2
23792: EQUAL
23793: IFFALSE 23803
// btype := b_factory ;
23795: LD_ADDR_VAR 0 5
23799: PUSH
23800: LD_INT 3
23802: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23803: LD_ADDR_VAR 0 4
23807: PUSH
23808: LD_VAR 0 5
23812: PPUSH
23813: LD_VAR 0 1
23817: PPUSH
23818: CALL_OW 248
23822: PPUSH
23823: CALL_OW 450
23827: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23828: LD_ADDR_VAR 0 2
23832: PUSH
23833: LD_VAR 0 3
23837: PPUSH
23838: LD_INT 1
23840: PPUSH
23841: CALL_OW 275
23845: PUSH
23846: LD_VAR 0 4
23850: PUSH
23851: LD_INT 1
23853: ARRAY
23854: GREATEREQUAL
23855: IFFALSE 23881
23857: PUSH
23858: LD_VAR 0 3
23862: PPUSH
23863: LD_INT 2
23865: PPUSH
23866: CALL_OW 275
23870: PUSH
23871: LD_VAR 0 4
23875: PUSH
23876: LD_INT 2
23878: ARRAY
23879: GREATEREQUAL
23880: AND
23881: IFFALSE 23907
23883: PUSH
23884: LD_VAR 0 3
23888: PPUSH
23889: LD_INT 3
23891: PPUSH
23892: CALL_OW 275
23896: PUSH
23897: LD_VAR 0 4
23901: PUSH
23902: LD_INT 3
23904: ARRAY
23905: GREATEREQUAL
23906: AND
23907: ST_TO_ADDR
// end ;
23908: LD_VAR 0 2
23912: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23913: LD_INT 0
23915: PPUSH
23916: PPUSH
23917: PPUSH
// pom := GetBase ( building ) ;
23918: LD_ADDR_VAR 0 4
23922: PUSH
23923: LD_VAR 0 1
23927: PPUSH
23928: CALL_OW 274
23932: ST_TO_ADDR
// if not pom then
23933: LD_VAR 0 4
23937: NOT
23938: IFFALSE 23942
// exit ;
23940: GO 24047
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23942: LD_ADDR_VAR 0 5
23946: PUSH
23947: LD_VAR 0 2
23951: PPUSH
23952: LD_VAR 0 1
23956: PPUSH
23957: CALL_OW 248
23961: PPUSH
23962: CALL_OW 450
23966: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23967: LD_ADDR_VAR 0 3
23971: PUSH
23972: LD_VAR 0 4
23976: PPUSH
23977: LD_INT 1
23979: PPUSH
23980: CALL_OW 275
23984: PUSH
23985: LD_VAR 0 5
23989: PUSH
23990: LD_INT 1
23992: ARRAY
23993: GREATEREQUAL
23994: IFFALSE 24020
23996: PUSH
23997: LD_VAR 0 4
24001: PPUSH
24002: LD_INT 2
24004: PPUSH
24005: CALL_OW 275
24009: PUSH
24010: LD_VAR 0 5
24014: PUSH
24015: LD_INT 2
24017: ARRAY
24018: GREATEREQUAL
24019: AND
24020: IFFALSE 24046
24022: PUSH
24023: LD_VAR 0 4
24027: PPUSH
24028: LD_INT 3
24030: PPUSH
24031: CALL_OW 275
24035: PUSH
24036: LD_VAR 0 5
24040: PUSH
24041: LD_INT 3
24043: ARRAY
24044: GREATEREQUAL
24045: AND
24046: ST_TO_ADDR
// end ;
24047: LD_VAR 0 3
24051: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
24052: LD_INT 0
24054: PPUSH
24055: PPUSH
24056: PPUSH
24057: PPUSH
24058: PPUSH
24059: PPUSH
24060: PPUSH
24061: PPUSH
24062: PPUSH
24063: PPUSH
24064: PPUSH
// result := false ;
24065: LD_ADDR_VAR 0 8
24069: PUSH
24070: LD_INT 0
24072: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
24073: LD_VAR 0 5
24077: NOT
24078: IFTRUE 24087
24080: PUSH
24081: LD_VAR 0 1
24085: NOT
24086: OR
24087: IFTRUE 24096
24089: PUSH
24090: LD_VAR 0 2
24094: NOT
24095: OR
24096: IFTRUE 24105
24098: PUSH
24099: LD_VAR 0 3
24103: NOT
24104: OR
24105: IFFALSE 24109
// exit ;
24107: GO 24935
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
24109: LD_ADDR_VAR 0 14
24113: PUSH
24114: LD_VAR 0 1
24118: PPUSH
24119: LD_VAR 0 2
24123: PPUSH
24124: LD_VAR 0 3
24128: PPUSH
24129: LD_VAR 0 4
24133: PPUSH
24134: LD_VAR 0 5
24138: PUSH
24139: LD_INT 1
24141: ARRAY
24142: PPUSH
24143: CALL_OW 248
24147: PPUSH
24148: LD_INT 0
24150: PPUSH
24151: CALL 26216 0 6
24155: ST_TO_ADDR
// if not hexes then
24156: LD_VAR 0 14
24160: NOT
24161: IFFALSE 24165
// exit ;
24163: GO 24935
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24165: LD_ADDR_VAR 0 17
24169: PUSH
24170: LD_VAR 0 5
24174: PPUSH
24175: LD_INT 22
24177: PUSH
24178: LD_VAR 0 13
24182: PPUSH
24183: CALL_OW 255
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 2
24194: PUSH
24195: LD_INT 30
24197: PUSH
24198: LD_INT 0
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 30
24207: PUSH
24208: LD_INT 1
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: LIST
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PPUSH
24224: CALL_OW 72
24228: ST_TO_ADDR
// for i = 1 to hexes do
24229: LD_ADDR_VAR 0 9
24233: PUSH
24234: DOUBLE
24235: LD_INT 1
24237: DEC
24238: ST_TO_ADDR
24239: LD_VAR 0 14
24243: PUSH
24244: FOR_TO
24245: IFFALSE 24933
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24247: LD_ADDR_VAR 0 13
24251: PUSH
24252: LD_VAR 0 14
24256: PUSH
24257: LD_VAR 0 9
24261: ARRAY
24262: PUSH
24263: LD_INT 1
24265: ARRAY
24266: PPUSH
24267: LD_VAR 0 14
24271: PUSH
24272: LD_VAR 0 9
24276: ARRAY
24277: PUSH
24278: LD_INT 2
24280: ARRAY
24281: PPUSH
24282: CALL_OW 428
24286: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24287: LD_VAR 0 14
24291: PUSH
24292: LD_VAR 0 9
24296: ARRAY
24297: PUSH
24298: LD_INT 1
24300: ARRAY
24301: PPUSH
24302: LD_VAR 0 14
24306: PUSH
24307: LD_VAR 0 9
24311: ARRAY
24312: PUSH
24313: LD_INT 2
24315: ARRAY
24316: PPUSH
24317: CALL_OW 351
24321: IFTRUE 24360
24323: PUSH
24324: LD_VAR 0 14
24328: PUSH
24329: LD_VAR 0 9
24333: ARRAY
24334: PUSH
24335: LD_INT 1
24337: ARRAY
24338: PPUSH
24339: LD_VAR 0 14
24343: PUSH
24344: LD_VAR 0 9
24348: ARRAY
24349: PUSH
24350: LD_INT 2
24352: ARRAY
24353: PPUSH
24354: CALL_OW 488
24358: NOT
24359: OR
24360: IFTRUE 24377
24362: PUSH
24363: LD_VAR 0 13
24367: PPUSH
24368: CALL_OW 247
24372: PUSH
24373: LD_INT 3
24375: EQUAL
24376: OR
24377: IFFALSE 24383
// exit ;
24379: POP
24380: POP
24381: GO 24935
// if not tmp then
24383: LD_VAR 0 13
24387: NOT
24388: IFFALSE 24392
// continue ;
24390: GO 24244
// result := true ;
24392: LD_ADDR_VAR 0 8
24396: PUSH
24397: LD_INT 1
24399: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24400: LD_VAR 0 6
24404: IFFALSE 24421
24406: PUSH
24407: LD_VAR 0 13
24411: PPUSH
24412: CALL_OW 247
24416: PUSH
24417: LD_INT 2
24419: EQUAL
24420: AND
24421: IFFALSE 24438
24423: PUSH
24424: LD_VAR 0 13
24428: PPUSH
24429: CALL_OW 263
24433: PUSH
24434: LD_INT 1
24436: EQUAL
24437: AND
24438: IFFALSE 24602
// begin if IsDrivenBy ( tmp ) then
24440: LD_VAR 0 13
24444: PPUSH
24445: CALL_OW 311
24449: IFFALSE 24453
// continue ;
24451: GO 24244
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
24453: LD_VAR 0 6
24457: PPUSH
24458: LD_INT 3
24460: PUSH
24461: LD_INT 60
24463: PUSH
24464: EMPTY
24465: LIST
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 3
24473: PUSH
24474: LD_INT 55
24476: PUSH
24477: EMPTY
24478: LIST
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PPUSH
24488: CALL_OW 72
24492: IFFALSE 24600
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
24494: LD_ADDR_VAR 0 18
24498: PUSH
24499: LD_VAR 0 6
24503: PPUSH
24504: LD_INT 3
24506: PUSH
24507: LD_INT 60
24509: PUSH
24510: EMPTY
24511: LIST
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 3
24519: PUSH
24520: LD_INT 55
24522: PUSH
24523: EMPTY
24524: LIST
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PPUSH
24534: CALL_OW 72
24538: PUSH
24539: LD_INT 1
24541: ARRAY
24542: ST_TO_ADDR
// if IsInUnit ( driver ) then
24543: LD_VAR 0 18
24547: PPUSH
24548: CALL_OW 310
24552: IFFALSE 24563
// ComExit ( driver ) ;
24554: LD_VAR 0 18
24558: PPUSH
24559: CALL 50216 0 1
// AddComEnterUnit ( driver , tmp ) ;
24563: LD_VAR 0 18
24567: PPUSH
24568: LD_VAR 0 13
24572: PPUSH
24573: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
24577: LD_VAR 0 18
24581: PPUSH
24582: LD_VAR 0 7
24586: PPUSH
24587: CALL_OW 173
// AddComExitVehicle ( driver ) ;
24591: LD_VAR 0 18
24595: PPUSH
24596: CALL_OW 181
// end ; continue ;
24600: GO 24244
// end ; if not cleaners or not tmp in cleaners then
24602: LD_VAR 0 6
24606: NOT
24607: IFTRUE 24622
24609: PUSH
24610: LD_VAR 0 13
24614: PUSH
24615: LD_VAR 0 6
24619: IN
24620: NOT
24621: OR
24622: IFFALSE 24931
// begin if dep then
24624: LD_VAR 0 17
24628: IFFALSE 24764
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24630: LD_ADDR_VAR 0 16
24634: PUSH
24635: LD_VAR 0 17
24639: PUSH
24640: LD_INT 1
24642: ARRAY
24643: PPUSH
24644: CALL_OW 250
24648: PPUSH
24649: LD_VAR 0 17
24653: PUSH
24654: LD_INT 1
24656: ARRAY
24657: PPUSH
24658: CALL_OW 254
24662: PPUSH
24663: LD_INT 5
24665: PPUSH
24666: CALL_OW 272
24670: PUSH
24671: LD_VAR 0 17
24675: PUSH
24676: LD_INT 1
24678: ARRAY
24679: PPUSH
24680: CALL_OW 251
24684: PPUSH
24685: LD_VAR 0 17
24689: PUSH
24690: LD_INT 1
24692: ARRAY
24693: PPUSH
24694: CALL_OW 254
24698: PPUSH
24699: LD_INT 5
24701: PPUSH
24702: CALL_OW 273
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24711: LD_VAR 0 16
24715: PUSH
24716: LD_INT 1
24718: ARRAY
24719: PPUSH
24720: LD_VAR 0 16
24724: PUSH
24725: LD_INT 2
24727: ARRAY
24728: PPUSH
24729: CALL_OW 488
24733: IFFALSE 24764
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24735: LD_VAR 0 13
24739: PPUSH
24740: LD_VAR 0 16
24744: PUSH
24745: LD_INT 1
24747: ARRAY
24748: PPUSH
24749: LD_VAR 0 16
24753: PUSH
24754: LD_INT 2
24756: ARRAY
24757: PPUSH
24758: CALL_OW 111
// continue ;
24762: GO 24244
// end ; end ; r := GetDir ( tmp ) ;
24764: LD_ADDR_VAR 0 15
24768: PUSH
24769: LD_VAR 0 13
24773: PPUSH
24774: CALL_OW 254
24778: ST_TO_ADDR
// if r = 5 then
24779: LD_VAR 0 15
24783: PUSH
24784: LD_INT 5
24786: EQUAL
24787: IFFALSE 24797
// r := 0 ;
24789: LD_ADDR_VAR 0 15
24793: PUSH
24794: LD_INT 0
24796: ST_TO_ADDR
// for j = r to 5 do
24797: LD_ADDR_VAR 0 10
24801: PUSH
24802: DOUBLE
24803: LD_VAR 0 15
24807: DEC
24808: ST_TO_ADDR
24809: LD_INT 5
24811: PUSH
24812: FOR_TO
24813: IFFALSE 24929
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24815: LD_ADDR_VAR 0 11
24819: PUSH
24820: LD_VAR 0 13
24824: PPUSH
24825: CALL_OW 250
24829: PPUSH
24830: LD_VAR 0 10
24834: PPUSH
24835: LD_INT 2
24837: PPUSH
24838: CALL_OW 272
24842: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24843: LD_ADDR_VAR 0 12
24847: PUSH
24848: LD_VAR 0 13
24852: PPUSH
24853: CALL_OW 251
24857: PPUSH
24858: LD_VAR 0 10
24862: PPUSH
24863: LD_INT 2
24865: PPUSH
24866: CALL_OW 273
24870: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24871: LD_VAR 0 11
24875: PPUSH
24876: LD_VAR 0 12
24880: PPUSH
24881: CALL_OW 488
24885: IFFALSE 24904
24887: PUSH
24888: LD_VAR 0 11
24892: PPUSH
24893: LD_VAR 0 12
24897: PPUSH
24898: CALL_OW 428
24902: NOT
24903: AND
24904: IFFALSE 24927
// begin ComMoveXY ( tmp , _x , _y ) ;
24906: LD_VAR 0 13
24910: PPUSH
24911: LD_VAR 0 11
24915: PPUSH
24916: LD_VAR 0 12
24920: PPUSH
24921: CALL_OW 111
// break ;
24925: GO 24929
// end ; end ;
24927: GO 24812
24929: POP
24930: POP
// end ; end ;
24931: GO 24244
24933: POP
24934: POP
// end ;
24935: LD_VAR 0 8
24939: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24940: LD_INT 0
24942: PPUSH
// result := true ;
24943: LD_ADDR_VAR 0 3
24947: PUSH
24948: LD_INT 1
24950: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24951: LD_VAR 0 2
24955: PUSH
24956: LD_INT 24
24958: DOUBLE
24959: EQUAL
24960: IFTRUE 24970
24962: LD_INT 33
24964: DOUBLE
24965: EQUAL
24966: IFTRUE 24970
24968: GO 24995
24970: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24971: LD_ADDR_VAR 0 3
24975: PUSH
24976: LD_INT 32
24978: PPUSH
24979: LD_VAR 0 1
24983: PPUSH
24984: CALL_OW 321
24988: PUSH
24989: LD_INT 2
24991: EQUAL
24992: ST_TO_ADDR
24993: GO 25311
24995: LD_INT 20
24997: DOUBLE
24998: EQUAL
24999: IFTRUE 25003
25001: GO 25028
25003: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
25004: LD_ADDR_VAR 0 3
25008: PUSH
25009: LD_INT 6
25011: PPUSH
25012: LD_VAR 0 1
25016: PPUSH
25017: CALL_OW 321
25021: PUSH
25022: LD_INT 2
25024: EQUAL
25025: ST_TO_ADDR
25026: GO 25311
25028: LD_INT 22
25030: DOUBLE
25031: EQUAL
25032: IFTRUE 25042
25034: LD_INT 36
25036: DOUBLE
25037: EQUAL
25038: IFTRUE 25042
25040: GO 25067
25042: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
25043: LD_ADDR_VAR 0 3
25047: PUSH
25048: LD_INT 15
25050: PPUSH
25051: LD_VAR 0 1
25055: PPUSH
25056: CALL_OW 321
25060: PUSH
25061: LD_INT 2
25063: EQUAL
25064: ST_TO_ADDR
25065: GO 25311
25067: LD_INT 30
25069: DOUBLE
25070: EQUAL
25071: IFTRUE 25075
25073: GO 25100
25075: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
25076: LD_ADDR_VAR 0 3
25080: PUSH
25081: LD_INT 20
25083: PPUSH
25084: LD_VAR 0 1
25088: PPUSH
25089: CALL_OW 321
25093: PUSH
25094: LD_INT 2
25096: EQUAL
25097: ST_TO_ADDR
25098: GO 25311
25100: LD_INT 28
25102: DOUBLE
25103: EQUAL
25104: IFTRUE 25114
25106: LD_INT 21
25108: DOUBLE
25109: EQUAL
25110: IFTRUE 25114
25112: GO 25139
25114: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
25115: LD_ADDR_VAR 0 3
25119: PUSH
25120: LD_INT 21
25122: PPUSH
25123: LD_VAR 0 1
25127: PPUSH
25128: CALL_OW 321
25132: PUSH
25133: LD_INT 2
25135: EQUAL
25136: ST_TO_ADDR
25137: GO 25311
25139: LD_INT 16
25141: DOUBLE
25142: EQUAL
25143: IFTRUE 25147
25145: GO 25172
25147: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
25148: LD_ADDR_VAR 0 3
25152: PUSH
25153: LD_INT 84
25155: PPUSH
25156: LD_VAR 0 1
25160: PPUSH
25161: CALL_OW 321
25165: PUSH
25166: LD_INT 2
25168: EQUAL
25169: ST_TO_ADDR
25170: GO 25311
25172: LD_INT 19
25174: DOUBLE
25175: EQUAL
25176: IFTRUE 25186
25178: LD_INT 23
25180: DOUBLE
25181: EQUAL
25182: IFTRUE 25186
25184: GO 25211
25186: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
25187: LD_ADDR_VAR 0 3
25191: PUSH
25192: LD_INT 83
25194: PPUSH
25195: LD_VAR 0 1
25199: PPUSH
25200: CALL_OW 321
25204: PUSH
25205: LD_INT 2
25207: EQUAL
25208: ST_TO_ADDR
25209: GO 25311
25211: LD_INT 17
25213: DOUBLE
25214: EQUAL
25215: IFTRUE 25219
25217: GO 25244
25219: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
25220: LD_ADDR_VAR 0 3
25224: PUSH
25225: LD_INT 39
25227: PPUSH
25228: LD_VAR 0 1
25232: PPUSH
25233: CALL_OW 321
25237: PUSH
25238: LD_INT 2
25240: EQUAL
25241: ST_TO_ADDR
25242: GO 25311
25244: LD_INT 18
25246: DOUBLE
25247: EQUAL
25248: IFTRUE 25252
25250: GO 25277
25252: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
25253: LD_ADDR_VAR 0 3
25257: PUSH
25258: LD_INT 40
25260: PPUSH
25261: LD_VAR 0 1
25265: PPUSH
25266: CALL_OW 321
25270: PUSH
25271: LD_INT 2
25273: EQUAL
25274: ST_TO_ADDR
25275: GO 25311
25277: LD_INT 27
25279: DOUBLE
25280: EQUAL
25281: IFTRUE 25285
25283: GO 25310
25285: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25286: LD_ADDR_VAR 0 3
25290: PUSH
25291: LD_INT 35
25293: PPUSH
25294: LD_VAR 0 1
25298: PPUSH
25299: CALL_OW 321
25303: PUSH
25304: LD_INT 2
25306: EQUAL
25307: ST_TO_ADDR
25308: GO 25311
25310: POP
// end ;
25311: LD_VAR 0 3
25315: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25316: LD_INT 0
25318: PPUSH
25319: PPUSH
25320: PPUSH
25321: PPUSH
25322: PPUSH
25323: PPUSH
25324: PPUSH
25325: PPUSH
25326: PPUSH
25327: PPUSH
25328: PPUSH
// result := false ;
25329: LD_ADDR_VAR 0 6
25333: PUSH
25334: LD_INT 0
25336: ST_TO_ADDR
// if btype = b_depot then
25337: LD_VAR 0 2
25341: PUSH
25342: LD_INT 0
25344: EQUAL
25345: IFFALSE 25357
// begin result := true ;
25347: LD_ADDR_VAR 0 6
25351: PUSH
25352: LD_INT 1
25354: ST_TO_ADDR
// exit ;
25355: GO 26211
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25357: LD_VAR 0 1
25361: NOT
25362: IFTRUE 25387
25364: PUSH
25365: LD_VAR 0 1
25369: PPUSH
25370: CALL_OW 266
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: LD_INT 1
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: IN
25385: NOT
25386: OR
25387: IFTRUE 25396
25389: PUSH
25390: LD_VAR 0 2
25394: NOT
25395: OR
25396: IFTRUE 25432
25398: PUSH
25399: LD_VAR 0 5
25403: PUSH
25404: LD_INT 0
25406: PUSH
25407: LD_INT 1
25409: PUSH
25410: LD_INT 2
25412: PUSH
25413: LD_INT 3
25415: PUSH
25416: LD_INT 4
25418: PUSH
25419: LD_INT 5
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: IN
25430: NOT
25431: OR
25432: IFTRUE 25451
25434: PUSH
25435: LD_VAR 0 3
25439: PPUSH
25440: LD_VAR 0 4
25444: PPUSH
25445: CALL_OW 488
25449: NOT
25450: OR
25451: IFFALSE 25455
// exit ;
25453: GO 26211
// side := GetSide ( depot ) ;
25455: LD_ADDR_VAR 0 9
25459: PUSH
25460: LD_VAR 0 1
25464: PPUSH
25465: CALL_OW 255
25469: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
25470: LD_VAR 0 9
25474: PPUSH
25475: LD_VAR 0 2
25479: PPUSH
25480: CALL 24940 0 2
25484: NOT
25485: IFFALSE 25489
// exit ;
25487: GO 26211
// pom := GetBase ( depot ) ;
25489: LD_ADDR_VAR 0 10
25493: PUSH
25494: LD_VAR 0 1
25498: PPUSH
25499: CALL_OW 274
25503: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25504: LD_ADDR_VAR 0 11
25508: PUSH
25509: LD_VAR 0 2
25513: PPUSH
25514: LD_VAR 0 1
25518: PPUSH
25519: CALL_OW 248
25523: PPUSH
25524: CALL_OW 450
25528: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25529: LD_VAR 0 10
25533: PPUSH
25534: LD_INT 1
25536: PPUSH
25537: CALL_OW 275
25541: PUSH
25542: LD_VAR 0 11
25546: PUSH
25547: LD_INT 1
25549: ARRAY
25550: GREATEREQUAL
25551: IFFALSE 25577
25553: PUSH
25554: LD_VAR 0 10
25558: PPUSH
25559: LD_INT 2
25561: PPUSH
25562: CALL_OW 275
25566: PUSH
25567: LD_VAR 0 11
25571: PUSH
25572: LD_INT 2
25574: ARRAY
25575: GREATEREQUAL
25576: AND
25577: IFFALSE 25603
25579: PUSH
25580: LD_VAR 0 10
25584: PPUSH
25585: LD_INT 3
25587: PPUSH
25588: CALL_OW 275
25592: PUSH
25593: LD_VAR 0 11
25597: PUSH
25598: LD_INT 3
25600: ARRAY
25601: GREATEREQUAL
25602: AND
25603: NOT
25604: IFFALSE 25608
// exit ;
25606: GO 26211
// if GetBType ( depot ) = b_depot then
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL_OW 266
25617: PUSH
25618: LD_INT 0
25620: EQUAL
25621: IFFALSE 25633
// dist := 28 else
25623: LD_ADDR_VAR 0 14
25627: PUSH
25628: LD_INT 28
25630: ST_TO_ADDR
25631: GO 25641
// dist := 36 ;
25633: LD_ADDR_VAR 0 14
25637: PUSH
25638: LD_INT 36
25640: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25641: LD_VAR 0 1
25645: PPUSH
25646: LD_VAR 0 3
25650: PPUSH
25651: LD_VAR 0 4
25655: PPUSH
25656: CALL_OW 297
25660: PUSH
25661: LD_VAR 0 14
25665: GREATER
25666: IFFALSE 25670
// exit ;
25668: GO 26211
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25670: LD_ADDR_VAR 0 12
25674: PUSH
25675: LD_VAR 0 2
25679: PPUSH
25680: LD_VAR 0 3
25684: PPUSH
25685: LD_VAR 0 4
25689: PPUSH
25690: LD_VAR 0 5
25694: PPUSH
25695: LD_VAR 0 1
25699: PPUSH
25700: CALL_OW 248
25704: PPUSH
25705: LD_INT 0
25707: PPUSH
25708: CALL 26216 0 6
25712: ST_TO_ADDR
// if not hexes then
25713: LD_VAR 0 12
25717: NOT
25718: IFFALSE 25722
// exit ;
25720: GO 26211
// hex := GetHexInfo ( x , y ) ;
25722: LD_ADDR_VAR 0 15
25726: PUSH
25727: LD_VAR 0 3
25731: PPUSH
25732: LD_VAR 0 4
25736: PPUSH
25737: CALL_OW 546
25741: ST_TO_ADDR
// if hex [ 1 ] then
25742: LD_VAR 0 15
25746: PUSH
25747: LD_INT 1
25749: ARRAY
25750: IFFALSE 25754
// exit ;
25752: GO 26211
// height := hex [ 2 ] ;
25754: LD_ADDR_VAR 0 13
25758: PUSH
25759: LD_VAR 0 15
25763: PUSH
25764: LD_INT 2
25766: ARRAY
25767: ST_TO_ADDR
// for i = 1 to hexes do
25768: LD_ADDR_VAR 0 7
25772: PUSH
25773: DOUBLE
25774: LD_INT 1
25776: DEC
25777: ST_TO_ADDR
25778: LD_VAR 0 12
25782: PUSH
25783: FOR_TO
25784: IFFALSE 26128
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25786: LD_VAR 0 12
25790: PUSH
25791: LD_VAR 0 7
25795: ARRAY
25796: PUSH
25797: LD_INT 1
25799: ARRAY
25800: PPUSH
25801: LD_VAR 0 12
25805: PUSH
25806: LD_VAR 0 7
25810: ARRAY
25811: PUSH
25812: LD_INT 2
25814: ARRAY
25815: PPUSH
25816: CALL_OW 488
25820: NOT
25821: IFTRUE 25863
25823: PUSH
25824: LD_VAR 0 12
25828: PUSH
25829: LD_VAR 0 7
25833: ARRAY
25834: PUSH
25835: LD_INT 1
25837: ARRAY
25838: PPUSH
25839: LD_VAR 0 12
25843: PUSH
25844: LD_VAR 0 7
25848: ARRAY
25849: PUSH
25850: LD_INT 2
25852: ARRAY
25853: PPUSH
25854: CALL_OW 428
25858: PUSH
25859: LD_INT 0
25861: GREATER
25862: OR
25863: IFTRUE 25901
25865: PUSH
25866: LD_VAR 0 12
25870: PUSH
25871: LD_VAR 0 7
25875: ARRAY
25876: PUSH
25877: LD_INT 1
25879: ARRAY
25880: PPUSH
25881: LD_VAR 0 12
25885: PUSH
25886: LD_VAR 0 7
25890: ARRAY
25891: PUSH
25892: LD_INT 2
25894: ARRAY
25895: PPUSH
25896: CALL_OW 351
25900: OR
25901: IFFALSE 25907
// exit ;
25903: POP
25904: POP
25905: GO 26211
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25907: LD_ADDR_VAR 0 8
25911: PUSH
25912: LD_VAR 0 12
25916: PUSH
25917: LD_VAR 0 7
25921: ARRAY
25922: PUSH
25923: LD_INT 1
25925: ARRAY
25926: PPUSH
25927: LD_VAR 0 12
25931: PUSH
25932: LD_VAR 0 7
25936: ARRAY
25937: PUSH
25938: LD_INT 2
25940: ARRAY
25941: PPUSH
25942: CALL_OW 546
25946: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25947: LD_VAR 0 8
25951: PUSH
25952: LD_INT 1
25954: ARRAY
25955: IFTRUE 25977
25957: PUSH
25958: LD_VAR 0 8
25962: PUSH
25963: LD_INT 2
25965: ARRAY
25966: PUSH
25967: LD_VAR 0 13
25971: PUSH
25972: LD_INT 2
25974: PLUS
25975: GREATER
25976: OR
25977: IFTRUE 25999
25979: PUSH
25980: LD_VAR 0 8
25984: PUSH
25985: LD_INT 2
25987: ARRAY
25988: PUSH
25989: LD_VAR 0 13
25993: PUSH
25994: LD_INT 2
25996: MINUS
25997: LESS
25998: OR
25999: IFTRUE 26067
26001: PUSH
26002: LD_VAR 0 8
26006: PUSH
26007: LD_INT 3
26009: ARRAY
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: LD_INT 8
26016: PUSH
26017: LD_INT 9
26019: PUSH
26020: LD_INT 10
26022: PUSH
26023: LD_INT 11
26025: PUSH
26026: LD_INT 12
26028: PUSH
26029: LD_INT 13
26031: PUSH
26032: LD_INT 16
26034: PUSH
26035: LD_INT 17
26037: PUSH
26038: LD_INT 18
26040: PUSH
26041: LD_INT 19
26043: PUSH
26044: LD_INT 20
26046: PUSH
26047: LD_INT 21
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: IN
26065: NOT
26066: OR
26067: IFTRUE 26080
26069: PUSH
26070: LD_VAR 0 8
26074: PUSH
26075: LD_INT 5
26077: ARRAY
26078: NOT
26079: OR
26080: IFTRUE 26120
26082: PUSH
26083: LD_VAR 0 8
26087: PUSH
26088: LD_INT 6
26090: ARRAY
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: LD_INT 2
26097: PUSH
26098: LD_INT 7
26100: PUSH
26101: LD_INT 9
26103: PUSH
26104: LD_INT 10
26106: PUSH
26107: LD_INT 11
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: IN
26118: NOT
26119: OR
26120: IFFALSE 26126
// exit ;
26122: POP
26123: POP
26124: GO 26211
// end ;
26126: GO 25783
26128: POP
26129: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26130: LD_VAR 0 9
26134: PPUSH
26135: LD_VAR 0 3
26139: PPUSH
26140: LD_VAR 0 4
26144: PPUSH
26145: LD_INT 20
26147: PPUSH
26148: CALL 18030 0 4
26152: PUSH
26153: LD_INT 4
26155: ARRAY
26156: IFFALSE 26160
// exit ;
26158: GO 26211
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26160: LD_VAR 0 2
26164: PUSH
26165: LD_INT 29
26167: PUSH
26168: LD_INT 30
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: IN
26175: IFFALSE 26199
26177: PUSH
26178: LD_VAR 0 3
26182: PPUSH
26183: LD_VAR 0 4
26187: PPUSH
26188: LD_VAR 0 9
26192: PPUSH
26193: CALL_OW 440
26197: NOT
26198: AND
26199: IFFALSE 26203
// exit ;
26201: GO 26211
// result := true ;
26203: LD_ADDR_VAR 0 6
26207: PUSH
26208: LD_INT 1
26210: ST_TO_ADDR
// end ;
26211: LD_VAR 0 6
26215: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
26216: LD_INT 0
26218: PPUSH
26219: PPUSH
26220: PPUSH
26221: PPUSH
26222: PPUSH
26223: PPUSH
26224: PPUSH
26225: PPUSH
26226: PPUSH
26227: PPUSH
26228: PPUSH
26229: PPUSH
26230: PPUSH
26231: PPUSH
26232: PPUSH
26233: PPUSH
26234: PPUSH
26235: PPUSH
26236: PPUSH
26237: PPUSH
26238: PPUSH
26239: PPUSH
26240: PPUSH
26241: PPUSH
26242: PPUSH
26243: PPUSH
26244: PPUSH
26245: PPUSH
26246: PPUSH
26247: PPUSH
26248: PPUSH
26249: PPUSH
26250: PPUSH
26251: PPUSH
26252: PPUSH
26253: PPUSH
26254: PPUSH
26255: PPUSH
26256: PPUSH
26257: PPUSH
26258: PPUSH
26259: PPUSH
26260: PPUSH
26261: PPUSH
26262: PPUSH
26263: PPUSH
26264: PPUSH
26265: PPUSH
26266: PPUSH
26267: PPUSH
26268: PPUSH
26269: PPUSH
26270: PPUSH
26271: PPUSH
26272: PPUSH
26273: PPUSH
26274: PPUSH
26275: PPUSH
// result = [ ] ;
26276: LD_ADDR_VAR 0 7
26280: PUSH
26281: EMPTY
26282: ST_TO_ADDR
// temp_list = [ ] ;
26283: LD_ADDR_VAR 0 9
26287: PUSH
26288: EMPTY
26289: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26290: LD_VAR 0 4
26294: PUSH
26295: LD_INT 0
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: LD_INT 2
26303: PUSH
26304: LD_INT 3
26306: PUSH
26307: LD_INT 4
26309: PUSH
26310: LD_INT 5
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: IN
26321: NOT
26322: IFTRUE 26365
26324: PUSH
26325: LD_VAR 0 1
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: LD_INT 1
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: IN
26340: IFFALSE 26364
26342: PUSH
26343: LD_VAR 0 5
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: LD_INT 2
26353: PUSH
26354: LD_INT 3
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: LIST
26361: IN
26362: NOT
26363: AND
26364: OR
26365: IFFALSE 26369
// exit ;
26367: GO 44768
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26369: LD_VAR 0 1
26373: PUSH
26374: LD_INT 6
26376: PUSH
26377: LD_INT 7
26379: PUSH
26380: LD_INT 8
26382: PUSH
26383: LD_INT 13
26385: PUSH
26386: LD_INT 12
26388: PUSH
26389: LD_INT 15
26391: PUSH
26392: LD_INT 11
26394: PUSH
26395: LD_INT 14
26397: PUSH
26398: LD_INT 10
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: IN
26412: IFFALSE 26422
// btype = b_lab ;
26414: LD_ADDR_VAR 0 1
26418: PUSH
26419: LD_INT 6
26421: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26422: LD_VAR 0 6
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: LD_INT 2
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: LIST
26440: IN
26441: NOT
26442: IFTRUE 26510
26444: PUSH
26445: LD_VAR 0 1
26449: PUSH
26450: LD_INT 0
26452: PUSH
26453: LD_INT 1
26455: PUSH
26456: LD_INT 2
26458: PUSH
26459: LD_INT 3
26461: PUSH
26462: LD_INT 6
26464: PUSH
26465: LD_INT 36
26467: PUSH
26468: LD_INT 4
26470: PUSH
26471: LD_INT 5
26473: PUSH
26474: LD_INT 31
26476: PUSH
26477: LD_INT 32
26479: PUSH
26480: LD_INT 33
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: IN
26496: NOT
26497: IFFALSE 26509
26499: PUSH
26500: LD_VAR 0 6
26504: PUSH
26505: LD_INT 1
26507: EQUAL
26508: AND
26509: OR
26510: IFTRUE 26542
26512: PUSH
26513: LD_VAR 0 1
26517: PUSH
26518: LD_INT 2
26520: PUSH
26521: LD_INT 3
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: IN
26528: NOT
26529: IFFALSE 26541
26531: PUSH
26532: LD_VAR 0 6
26536: PUSH
26537: LD_INT 2
26539: EQUAL
26540: AND
26541: OR
26542: IFFALSE 26552
// mode = 0 ;
26544: LD_ADDR_VAR 0 6
26548: PUSH
26549: LD_INT 0
26551: ST_TO_ADDR
// case mode of 0 :
26552: LD_VAR 0 6
26556: PUSH
26557: LD_INT 0
26559: DOUBLE
26560: EQUAL
26561: IFTRUE 26565
26563: GO 38018
26565: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26566: LD_ADDR_VAR 0 11
26570: PUSH
26571: LD_INT 0
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: LD_INT 1
26586: NEG
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 1
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 1
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 1
26624: NEG
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 1
26635: NEG
26636: PUSH
26637: LD_INT 1
26639: NEG
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 1
26647: NEG
26648: PUSH
26649: LD_INT 2
26651: NEG
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: LD_INT 2
26662: NEG
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 1
26670: PUSH
26671: LD_INT 1
26673: NEG
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 1
26681: PUSH
26682: LD_INT 2
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: LD_INT 2
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 1
26701: NEG
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: LD_INT 3
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 0
26722: PUSH
26723: LD_INT 3
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 1
26732: NEG
26733: PUSH
26734: LD_INT 2
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26759: LD_ADDR_VAR 0 12
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 2
26851: PUSH
26852: LD_INT 0
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 2
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: LD_INT 1
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 2
26882: NEG
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 2
26893: NEG
26894: PUSH
26895: LD_INT 1
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: NEG
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 3
26916: NEG
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 3
26927: NEG
26928: PUSH
26929: LD_INT 1
26931: NEG
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26955: LD_ADDR_VAR 0 13
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 0
26972: PUSH
26973: LD_INT 1
26975: NEG
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: NEG
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 1
27024: NEG
27025: PUSH
27026: LD_INT 1
27028: NEG
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 1
27036: NEG
27037: PUSH
27038: LD_INT 2
27040: NEG
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 2
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 2
27058: PUSH
27059: LD_INT 2
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 1
27068: PUSH
27069: LD_INT 2
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 2
27078: NEG
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 2
27090: NEG
27091: PUSH
27092: LD_INT 2
27094: NEG
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 2
27102: NEG
27103: PUSH
27104: LD_INT 3
27106: NEG
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 3
27114: NEG
27115: PUSH
27116: LD_INT 2
27118: NEG
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 3
27126: NEG
27127: PUSH
27128: LD_INT 3
27130: NEG
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27154: LD_ADDR_VAR 0 14
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 1
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 1
27212: NEG
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: NEG
27224: PUSH
27225: LD_INT 1
27227: NEG
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: LD_INT 2
27239: NEG
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: LD_INT 2
27250: NEG
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: LD_INT 2
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 0
27279: PUSH
27280: LD_INT 2
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 1
27289: NEG
27290: PUSH
27291: LD_INT 1
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: LD_INT 3
27304: NEG
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: LD_INT 3
27315: NEG
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: LD_INT 2
27326: NEG
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27350: LD_ADDR_VAR 0 15
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: LD_INT 0
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 1
27408: NEG
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 1
27419: NEG
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 1
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 2
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 2
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 1
27462: NEG
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 2
27473: NEG
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 2
27484: NEG
27485: PUSH
27486: LD_INT 1
27488: NEG
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 2
27496: PUSH
27497: LD_INT 1
27499: NEG
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 3
27507: PUSH
27508: LD_INT 0
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 3
27517: PUSH
27518: LD_INT 1
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27543: LD_ADDR_VAR 0 16
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 1
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: NEG
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: NEG
27613: PUSH
27614: LD_INT 1
27616: NEG
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: LD_INT 2
27628: NEG
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 2
27636: PUSH
27637: LD_INT 1
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 2
27646: PUSH
27647: LD_INT 2
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 1
27656: PUSH
27657: LD_INT 2
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 2
27666: NEG
27667: PUSH
27668: LD_INT 1
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 2
27678: NEG
27679: PUSH
27680: LD_INT 2
27682: NEG
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 3
27690: PUSH
27691: LD_INT 2
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 3
27700: PUSH
27701: LD_INT 3
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 2
27710: PUSH
27711: LD_INT 3
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27736: LD_ADDR_VAR 0 17
27740: PUSH
27741: LD_INT 0
27743: PUSH
27744: LD_INT 0
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: LD_INT 1
27756: NEG
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 1
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 1
27774: PUSH
27775: LD_INT 1
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 0
27784: PUSH
27785: LD_INT 1
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 1
27794: NEG
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 1
27805: NEG
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 1
27817: NEG
27818: PUSH
27819: LD_INT 2
27821: NEG
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: LD_INT 2
27832: NEG
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: LD_INT 1
27843: NEG
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 2
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 2
27861: PUSH
27862: LD_INT 1
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 2
27871: PUSH
27872: LD_INT 2
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 1
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: LD_INT 2
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 1
27901: NEG
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 2
27912: NEG
27913: PUSH
27914: LD_INT 0
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 2
27923: NEG
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 2
27935: NEG
27936: PUSH
27937: LD_INT 2
27939: NEG
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27966: LD_ADDR_VAR 0 18
27970: PUSH
27971: LD_INT 0
27973: PUSH
27974: LD_INT 0
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 0
27983: PUSH
27984: LD_INT 1
27986: NEG
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 1
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 1
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: LD_INT 1
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 1
28024: NEG
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: NEG
28036: PUSH
28037: LD_INT 1
28039: NEG
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 1
28047: NEG
28048: PUSH
28049: LD_INT 2
28051: NEG
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: LD_INT 2
28062: NEG
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 1
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 2
28081: PUSH
28082: LD_INT 0
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 2
28091: PUSH
28092: LD_INT 1
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 2
28101: PUSH
28102: LD_INT 2
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: LD_INT 2
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: LD_INT 1
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 2
28142: NEG
28143: PUSH
28144: LD_INT 0
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 2
28153: NEG
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 2
28165: NEG
28166: PUSH
28167: LD_INT 2
28169: NEG
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28196: LD_ADDR_VAR 0 19
28200: PUSH
28201: LD_INT 0
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: LD_INT 1
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: LD_INT 1
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 1
28265: NEG
28266: PUSH
28267: LD_INT 1
28269: NEG
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: LD_INT 2
28281: NEG
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 1
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 2
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 2
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 2
28331: PUSH
28332: LD_INT 2
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: LD_INT 2
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 0
28351: PUSH
28352: LD_INT 2
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: LD_INT 1
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 2
28372: NEG
28373: PUSH
28374: LD_INT 0
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 2
28383: NEG
28384: PUSH
28385: LD_INT 1
28387: NEG
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 2
28395: NEG
28396: PUSH
28397: LD_INT 2
28399: NEG
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28426: LD_ADDR_VAR 0 20
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: LD_INT 1
28446: NEG
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: LD_INT 1
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 1
28484: NEG
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: LD_INT 1
28499: NEG
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 1
28507: NEG
28508: PUSH
28509: LD_INT 2
28511: NEG
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 0
28519: PUSH
28520: LD_INT 2
28522: NEG
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 1
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 2
28541: PUSH
28542: LD_INT 0
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 2
28551: PUSH
28552: LD_INT 1
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 2
28561: PUSH
28562: LD_INT 2
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: LD_INT 2
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 0
28581: PUSH
28582: LD_INT 2
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 1
28591: NEG
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 2
28602: NEG
28603: PUSH
28604: LD_INT 0
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 2
28613: NEG
28614: PUSH
28615: LD_INT 1
28617: NEG
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 2
28625: NEG
28626: PUSH
28627: LD_INT 2
28629: NEG
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28656: LD_ADDR_VAR 0 21
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 0
28673: PUSH
28674: LD_INT 1
28676: NEG
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: LD_INT 0
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 1
28714: NEG
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 1
28725: NEG
28726: PUSH
28727: LD_INT 1
28729: NEG
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 1
28737: NEG
28738: PUSH
28739: LD_INT 2
28741: NEG
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 0
28749: PUSH
28750: LD_INT 2
28752: NEG
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 1
28760: PUSH
28761: LD_INT 1
28763: NEG
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 2
28771: PUSH
28772: LD_INT 0
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 2
28781: PUSH
28782: LD_INT 1
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 2
28791: PUSH
28792: LD_INT 2
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: LD_INT 2
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 0
28811: PUSH
28812: LD_INT 2
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 1
28821: NEG
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 2
28832: NEG
28833: PUSH
28834: LD_INT 0
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 2
28843: NEG
28844: PUSH
28845: LD_INT 1
28847: NEG
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 2
28855: NEG
28856: PUSH
28857: LD_INT 2
28859: NEG
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28886: LD_ADDR_VAR 0 22
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: LD_INT 1
28906: NEG
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 1
28944: NEG
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: LD_INT 2
28971: NEG
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: LD_INT 1
28993: NEG
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: LD_INT 0
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 2
29011: PUSH
29012: LD_INT 1
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 2
29021: PUSH
29022: LD_INT 2
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 1
29031: PUSH
29032: LD_INT 2
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: LD_INT 2
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 2
29062: NEG
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 2
29073: NEG
29074: PUSH
29075: LD_INT 1
29077: NEG
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 2
29085: NEG
29086: PUSH
29087: LD_INT 2
29089: NEG
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29116: LD_ADDR_VAR 0 23
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: LD_INT 0
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: LD_INT 1
29136: NEG
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: LD_INT 0
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: LD_INT 1
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: NEG
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: NEG
29186: PUSH
29187: LD_INT 1
29189: NEG
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 1
29197: NEG
29198: PUSH
29199: LD_INT 2
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: LD_INT 2
29212: NEG
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 1
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 2
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 2
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 2
29251: PUSH
29252: LD_INT 2
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 1
29261: PUSH
29262: LD_INT 2
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 0
29271: PUSH
29272: LD_INT 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 1
29281: NEG
29282: PUSH
29283: LD_INT 1
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 2
29292: NEG
29293: PUSH
29294: LD_INT 0
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 2
29303: NEG
29304: PUSH
29305: LD_INT 1
29307: NEG
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 2
29315: NEG
29316: PUSH
29317: LD_INT 2
29319: NEG
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 2
29327: NEG
29328: PUSH
29329: LD_INT 3
29331: NEG
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 1
29339: NEG
29340: PUSH
29341: LD_INT 3
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: LD_INT 2
29354: NEG
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 2
29362: PUSH
29363: LD_INT 1
29365: NEG
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29396: LD_ADDR_VAR 0 24
29400: PUSH
29401: LD_INT 0
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 0
29413: PUSH
29414: LD_INT 1
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: LD_INT 0
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: LD_INT 1
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: LD_INT 1
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: LD_INT 0
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 1
29465: NEG
29466: PUSH
29467: LD_INT 1
29469: NEG
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 1
29477: NEG
29478: PUSH
29479: LD_INT 2
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: LD_INT 2
29492: NEG
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 1
29500: PUSH
29501: LD_INT 1
29503: NEG
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 2
29511: PUSH
29512: LD_INT 0
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 2
29521: PUSH
29522: LD_INT 1
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 2
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 1
29541: PUSH
29542: LD_INT 2
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: LD_INT 2
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 1
29561: NEG
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 2
29572: NEG
29573: PUSH
29574: LD_INT 0
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 2
29583: NEG
29584: PUSH
29585: LD_INT 1
29587: NEG
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 2
29595: NEG
29596: PUSH
29597: LD_INT 2
29599: NEG
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: LD_INT 2
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 2
29618: PUSH
29619: LD_INT 1
29621: NEG
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 3
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 3
29639: PUSH
29640: LD_INT 2
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29672: LD_ADDR_VAR 0 25
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: LD_INT 0
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 1
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: LD_INT 0
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 1
29730: NEG
29731: PUSH
29732: LD_INT 0
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 1
29741: NEG
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: LD_INT 2
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 0
29765: PUSH
29766: LD_INT 2
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 2
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 2
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: LD_INT 2
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: LD_INT 2
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: LD_INT 1
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 2
29848: NEG
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 2
29859: NEG
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 2
29871: NEG
29872: PUSH
29873: LD_INT 2
29875: NEG
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 3
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 3
29893: PUSH
29894: LD_INT 2
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 2
29903: PUSH
29904: LD_INT 3
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: LD_INT 3
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29946: LD_ADDR_VAR 0 26
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: LD_INT 1
29966: NEG
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: LD_INT 0
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 0
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 1
30004: NEG
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 1
30015: NEG
30016: PUSH
30017: LD_INT 1
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 1
30027: NEG
30028: PUSH
30029: LD_INT 2
30031: NEG
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: LD_INT 2
30042: NEG
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 1
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 2
30061: PUSH
30062: LD_INT 0
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 2
30071: PUSH
30072: LD_INT 1
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 2
30081: PUSH
30082: LD_INT 2
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 1
30091: PUSH
30092: LD_INT 2
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: LD_INT 2
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 1
30111: NEG
30112: PUSH
30113: LD_INT 1
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 2
30122: NEG
30123: PUSH
30124: LD_INT 0
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 2
30133: NEG
30134: PUSH
30135: LD_INT 1
30137: NEG
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 2
30145: NEG
30146: PUSH
30147: LD_INT 2
30149: NEG
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 2
30157: PUSH
30158: LD_INT 3
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: LD_INT 3
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 1
30177: NEG
30178: PUSH
30179: LD_INT 2
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30222: LD_ADDR_VAR 0 27
30226: PUSH
30227: LD_INT 0
30229: PUSH
30230: LD_INT 0
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 0
30239: PUSH
30240: LD_INT 1
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 1
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: NEG
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: LD_INT 1
30295: NEG
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: LD_INT 2
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: LD_INT 2
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 1
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 2
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: PUSH
30368: LD_INT 2
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: LD_INT 2
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 2
30398: NEG
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 2
30409: NEG
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: LD_INT 2
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 1
30433: NEG
30434: PUSH
30435: LD_INT 2
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 2
30444: NEG
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 3
30455: NEG
30456: PUSH
30457: LD_INT 1
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 3
30467: NEG
30468: PUSH
30469: LD_INT 2
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30502: LD_ADDR_VAR 0 28
30506: PUSH
30507: LD_INT 0
30509: PUSH
30510: LD_INT 0
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: LD_INT 1
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: LD_INT 0
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 1
30540: PUSH
30541: LD_INT 1
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 1
30560: NEG
30561: PUSH
30562: LD_INT 0
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 1
30571: NEG
30572: PUSH
30573: LD_INT 1
30575: NEG
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 1
30583: NEG
30584: PUSH
30585: LD_INT 2
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: LD_INT 2
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: LD_INT 1
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 2
30617: PUSH
30618: LD_INT 0
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 2
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: LD_INT 2
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: LD_INT 2
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 0
30657: PUSH
30658: LD_INT 2
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 1
30667: NEG
30668: PUSH
30669: LD_INT 1
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 2
30678: NEG
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 2
30689: NEG
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 2
30701: NEG
30702: PUSH
30703: LD_INT 2
30705: NEG
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 2
30713: NEG
30714: PUSH
30715: LD_INT 3
30717: NEG
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: PUSH
30727: LD_INT 3
30729: NEG
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 3
30737: NEG
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 3
30749: NEG
30750: PUSH
30751: LD_INT 2
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30784: LD_ADDR_VAR 0 29
30788: PUSH
30789: LD_INT 0
30791: PUSH
30792: LD_INT 0
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: LD_INT 1
30804: NEG
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 1
30812: PUSH
30813: LD_INT 0
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 1
30822: PUSH
30823: LD_INT 1
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 0
30832: PUSH
30833: LD_INT 1
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: NEG
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: LD_INT 1
30857: NEG
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 1
30865: NEG
30866: PUSH
30867: LD_INT 2
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 0
30877: PUSH
30878: LD_INT 2
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 1
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 2
30909: PUSH
30910: LD_INT 1
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: LD_INT 2
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 1
30939: NEG
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 2
30950: NEG
30951: PUSH
30952: LD_INT 1
30954: NEG
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 2
30962: NEG
30963: PUSH
30964: LD_INT 2
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 2
30974: NEG
30975: PUSH
30976: LD_INT 3
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 2
30986: PUSH
30987: LD_INT 1
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 3
30997: PUSH
30998: LD_INT 1
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 1
31007: PUSH
31008: LD_INT 3
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 1
31017: NEG
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 3
31028: NEG
31029: PUSH
31030: LD_INT 2
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31063: LD_ADDR_VAR 0 30
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: LD_INT 1
31083: NEG
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: NEG
31133: PUSH
31134: LD_INT 1
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: LD_INT 2
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: LD_INT 2
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: LD_INT 1
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 2
31178: PUSH
31179: LD_INT 0
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 2
31198: PUSH
31199: LD_INT 2
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: LD_INT 2
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: NEG
31219: PUSH
31220: LD_INT 1
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 2
31229: NEG
31230: PUSH
31231: LD_INT 0
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 2
31240: NEG
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: LD_INT 3
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: PUSH
31265: LD_INT 2
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 3
31275: PUSH
31276: LD_INT 2
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 2
31285: PUSH
31286: LD_INT 3
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 2
31295: NEG
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 3
31306: NEG
31307: PUSH
31308: LD_INT 1
31310: NEG
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31341: LD_ADDR_VAR 0 31
31345: PUSH
31346: LD_INT 0
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: LD_INT 1
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: LD_INT 1
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 1
31399: NEG
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 1
31422: NEG
31423: PUSH
31424: LD_INT 2
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 2
31445: PUSH
31446: LD_INT 0
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 2
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 2
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: LD_INT 2
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 0
31485: PUSH
31486: LD_INT 2
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 1
31495: NEG
31496: PUSH
31497: LD_INT 1
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 2
31506: NEG
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: LD_INT 2
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 2
31530: NEG
31531: PUSH
31532: LD_INT 3
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 2
31542: PUSH
31543: LD_INT 1
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 3
31553: PUSH
31554: LD_INT 1
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: LD_INT 3
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 1
31573: NEG
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 3
31584: NEG
31585: PUSH
31586: LD_INT 2
31588: NEG
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31619: LD_ADDR_VAR 0 32
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: LD_INT 0
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 0
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 1
31677: NEG
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: LD_INT 2
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 0
31712: PUSH
31713: LD_INT 2
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 1
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 2
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: LD_INT 2
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 1
31754: PUSH
31755: LD_INT 2
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 2
31785: NEG
31786: PUSH
31787: LD_INT 0
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 2
31796: NEG
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 1
31808: NEG
31809: PUSH
31810: LD_INT 3
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 1
31820: PUSH
31821: LD_INT 2
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 3
31831: PUSH
31832: LD_INT 2
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 2
31841: PUSH
31842: LD_INT 3
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 2
31851: NEG
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 3
31862: NEG
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31897: LD_ADDR_VAR 0 33
31901: PUSH
31902: LD_INT 0
31904: PUSH
31905: LD_INT 0
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 0
31914: PUSH
31915: LD_INT 1
31917: NEG
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 1
31925: PUSH
31926: LD_INT 0
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 1
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: NEG
31967: PUSH
31968: LD_INT 1
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 1
31978: NEG
31979: PUSH
31980: LD_INT 2
31982: NEG
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: LD_INT 1
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 2
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 2
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: LD_INT 2
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: LD_INT 2
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 2
32063: NEG
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: NEG
32076: PUSH
32077: LD_INT 2
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 2
32087: NEG
32088: PUSH
32089: LD_INT 3
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 2
32099: PUSH
32100: LD_INT 1
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: LD_INT 1
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: LD_INT 3
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: LD_INT 2
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 3
32141: NEG
32142: PUSH
32143: LD_INT 2
32145: NEG
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32176: LD_ADDR_VAR 0 34
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: LD_INT 1
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 1
32234: NEG
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: LD_INT 2
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 0
32269: PUSH
32270: LD_INT 2
32272: NEG
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: LD_INT 1
32283: NEG
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 1
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 2
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 1
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 2
32332: NEG
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: NEG
32344: PUSH
32345: LD_INT 1
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: LD_INT 2
32359: NEG
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: NEG
32368: PUSH
32369: LD_INT 3
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: LD_INT 2
32382: NEG
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 3
32390: PUSH
32391: LD_INT 2
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: PUSH
32401: LD_INT 3
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 2
32410: NEG
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 3
32421: NEG
32422: PUSH
32423: LD_INT 1
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32456: LD_ADDR_VAR 0 35
32460: PUSH
32461: LD_INT 0
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: LD_INT 1
32476: NEG
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: PUSH
32495: LD_INT 1
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: LD_INT 1
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 1
32514: NEG
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: NEG
32526: PUSH
32527: LD_INT 1
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 2
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 2
32547: NEG
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32568: LD_ADDR_VAR 0 36
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: LD_INT 0
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 1
32637: NEG
32638: PUSH
32639: LD_INT 1
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: NEG
32650: PUSH
32651: LD_INT 2
32653: NEG
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 1
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32680: LD_ADDR_VAR 0 37
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: LD_INT 0
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 0
32697: PUSH
32698: LD_INT 1
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: LD_INT 0
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 1
32718: PUSH
32719: LD_INT 1
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 1
32738: NEG
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 1
32749: NEG
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: LD_INT 1
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32792: LD_ADDR_VAR 0 38
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 1
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 1
32850: NEG
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 1
32861: NEG
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 2
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: NEG
32884: PUSH
32885: LD_INT 1
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32904: LD_ADDR_VAR 0 39
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 0
32921: PUSH
32922: LD_INT 1
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 1
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 1
32942: PUSH
32943: LD_INT 1
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: LD_INT 1
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: NEG
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 1
32973: NEG
32974: PUSH
32975: LD_INT 1
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 1
32985: NEG
32986: PUSH
32987: LD_INT 2
32989: NEG
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 1
32997: PUSH
32998: LD_INT 2
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33016: LD_ADDR_VAR 0 40
33020: PUSH
33021: LD_INT 0
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: LD_INT 1
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: LD_INT 1
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 0
33064: PUSH
33065: LD_INT 1
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: NEG
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 1
33085: NEG
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 1
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33128: LD_ADDR_VAR 0 41
33132: PUSH
33133: LD_INT 0
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 0
33145: PUSH
33146: LD_INT 1
33148: NEG
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 1
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 0
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: LD_INT 0
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 1
33197: NEG
33198: PUSH
33199: LD_INT 1
33201: NEG
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 1
33209: NEG
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: LD_INT 1
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 2
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 2
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 2
33252: PUSH
33253: LD_INT 2
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: LD_INT 2
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: NEG
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 2
33283: NEG
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 2
33294: NEG
33295: PUSH
33296: LD_INT 1
33298: NEG
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 2
33306: NEG
33307: PUSH
33308: LD_INT 2
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 2
33318: NEG
33319: PUSH
33320: LD_INT 3
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 2
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 3
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 3
33351: PUSH
33352: LD_INT 1
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 3
33361: PUSH
33362: LD_INT 2
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 3
33371: PUSH
33372: LD_INT 3
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: LD_INT 3
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 2
33391: NEG
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 3
33402: NEG
33403: PUSH
33404: LD_INT 0
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 3
33413: NEG
33414: PUSH
33415: LD_INT 1
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 3
33425: NEG
33426: PUSH
33427: LD_INT 2
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 3
33437: NEG
33438: PUSH
33439: LD_INT 3
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33478: LD_ADDR_VAR 0 42
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 1
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: LD_INT 0
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: LD_INT 1
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 0
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 1
33536: NEG
33537: PUSH
33538: LD_INT 0
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 1
33547: NEG
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: LD_INT 2
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: LD_INT 2
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 1
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 2
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 2
33603: PUSH
33604: LD_INT 2
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: LD_INT 2
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: LD_INT 1
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: LD_INT 1
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 2
33656: NEG
33657: PUSH
33658: LD_INT 2
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 2
33668: NEG
33669: PUSH
33670: LD_INT 3
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: NEG
33681: PUSH
33682: LD_INT 3
33684: NEG
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 0
33692: PUSH
33693: LD_INT 3
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: PUSH
33704: LD_INT 2
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 3
33714: PUSH
33715: LD_INT 2
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 3
33724: PUSH
33725: LD_INT 3
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 2
33734: PUSH
33735: LD_INT 3
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: LD_INT 3
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: LD_INT 3
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: LD_INT 2
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 3
33775: NEG
33776: PUSH
33777: LD_INT 2
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 3
33787: NEG
33788: PUSH
33789: LD_INT 3
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33828: LD_ADDR_VAR 0 43
33832: PUSH
33833: LD_INT 0
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 0
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 1
33856: PUSH
33857: LD_INT 0
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 1
33866: PUSH
33867: LD_INT 1
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: LD_INT 1
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 1
33886: NEG
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 1
33897: NEG
33898: PUSH
33899: LD_INT 1
33901: NEG
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: PUSH
33911: LD_INT 2
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: LD_INT 2
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 2
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 2
33953: PUSH
33954: LD_INT 1
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 1
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: LD_INT 2
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 2
33994: NEG
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 2
34005: NEG
34006: PUSH
34007: LD_INT 1
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: LD_INT 3
34021: NEG
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: LD_INT 3
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 1
34040: PUSH
34041: LD_INT 2
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: LD_INT 1
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 3
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 3
34072: PUSH
34073: LD_INT 1
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 1
34082: PUSH
34083: LD_INT 3
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: LD_INT 3
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: NEG
34103: PUSH
34104: LD_INT 2
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 2
34113: NEG
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 3
34124: NEG
34125: PUSH
34126: LD_INT 0
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 3
34135: NEG
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34176: LD_ADDR_VAR 0 44
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: LD_INT 1
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 1
34204: PUSH
34205: LD_INT 0
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PUSH
34236: LD_INT 0
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 1
34245: NEG
34246: PUSH
34247: LD_INT 1
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: LD_INT 2
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 2
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 2
34300: PUSH
34301: LD_INT 2
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: LD_INT 2
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: NEG
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 2
34331: NEG
34332: PUSH
34333: LD_INT 0
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 2
34342: NEG
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 2
34354: NEG
34355: PUSH
34356: LD_INT 2
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 2
34366: NEG
34367: PUSH
34368: LD_INT 3
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 2
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 3
34389: PUSH
34390: LD_INT 0
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 3
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 3
34409: PUSH
34410: LD_INT 2
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 3
34419: PUSH
34420: LD_INT 3
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 2
34429: PUSH
34430: LD_INT 3
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 2
34439: NEG
34440: PUSH
34441: LD_INT 1
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 3
34450: NEG
34451: PUSH
34452: LD_INT 0
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 3
34461: NEG
34462: PUSH
34463: LD_INT 1
34465: NEG
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 3
34473: NEG
34474: PUSH
34475: LD_INT 2
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 3
34485: NEG
34486: PUSH
34487: LD_INT 3
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34526: LD_ADDR_VAR 0 45
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 1
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 1
34584: NEG
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: LD_INT 2
34611: NEG
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: LD_INT 2
34622: NEG
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: LD_INT 1
34633: NEG
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 2
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 2
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: LD_INT 2
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 2
34692: NEG
34693: PUSH
34694: LD_INT 1
34696: NEG
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 2
34704: NEG
34705: PUSH
34706: LD_INT 2
34708: NEG
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 2
34716: NEG
34717: PUSH
34718: LD_INT 3
34720: NEG
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 1
34728: NEG
34729: PUSH
34730: LD_INT 3
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 0
34740: PUSH
34741: LD_INT 3
34743: NEG
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: LD_INT 2
34754: NEG
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 3
34762: PUSH
34763: LD_INT 2
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 3
34772: PUSH
34773: LD_INT 3
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 2
34782: PUSH
34783: LD_INT 3
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 1
34792: PUSH
34793: LD_INT 3
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 0
34802: PUSH
34803: LD_INT 3
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: LD_INT 2
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 3
34823: NEG
34824: PUSH
34825: LD_INT 2
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 3
34835: NEG
34836: PUSH
34837: LD_INT 3
34839: NEG
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34876: LD_ADDR_VAR 0 46
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: LD_INT 1
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 1
34934: NEG
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 1
34957: NEG
34958: PUSH
34959: LD_INT 2
34961: NEG
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: LD_INT 2
34972: NEG
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: LD_INT 1
34983: NEG
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 2
34991: PUSH
34992: LD_INT 0
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: LD_INT 1
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: LD_INT 2
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: LD_INT 1
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 2
35042: NEG
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 2
35053: NEG
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 1
35065: NEG
35066: PUSH
35067: LD_INT 3
35069: NEG
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: LD_INT 3
35080: NEG
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: LD_INT 2
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 2
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 3
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 3
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 1
35130: PUSH
35131: LD_INT 3
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: LD_INT 3
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 1
35150: NEG
35151: PUSH
35152: LD_INT 2
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 2
35161: NEG
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 3
35172: NEG
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 3
35183: NEG
35184: PUSH
35185: LD_INT 1
35187: NEG
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35224: LD_ADDR_VAR 0 47
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: LD_INT 0
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: LD_INT 1
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: LD_INT 0
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: LD_INT 1
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 1
35305: NEG
35306: PUSH
35307: LD_INT 2
35309: NEG
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: LD_INT 2
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 1
35328: PUSH
35329: LD_INT 1
35331: NEG
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 2
35339: NEG
35340: PUSH
35341: LD_INT 1
35343: NEG
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 2
35351: NEG
35352: PUSH
35353: LD_INT 2
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35375: LD_ADDR_VAR 0 48
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 0
35392: PUSH
35393: LD_INT 1
35395: NEG
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 1
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 1
35433: NEG
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 1
35444: NEG
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: LD_INT 2
35460: NEG
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: LD_INT 2
35471: NEG
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 2
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35522: LD_ADDR_VAR 0 49
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: LD_INT 1
35542: NEG
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 1
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 1
35560: PUSH
35561: LD_INT 1
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: LD_INT 1
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 1
35580: NEG
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: LD_INT 1
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 2
35614: PUSH
35615: LD_INT 0
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 2
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 2
35634: PUSH
35635: LD_INT 2
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: LD_INT 2
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35666: LD_ADDR_VAR 0 50
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 1
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: LD_INT 1
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: LD_INT 1
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: NEG
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: LD_INT 1
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 2
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: LD_INT 1
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35810: LD_ADDR_VAR 0 51
35814: PUSH
35815: LD_INT 0
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: LD_INT 1
35830: NEG
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 1
35838: PUSH
35839: LD_INT 0
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 1
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 1
35868: NEG
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: LD_INT 1
35883: NEG
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: LD_INT 2
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: LD_INT 2
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 2
35922: NEG
35923: PUSH
35924: LD_INT 0
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 2
35933: NEG
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35957: LD_ADDR_VAR 0 52
35961: PUSH
35962: LD_INT 0
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: LD_INT 1
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: LD_INT 1
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 1
36026: NEG
36027: PUSH
36028: LD_INT 1
36030: NEG
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 1
36038: NEG
36039: PUSH
36040: LD_INT 2
36042: NEG
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 2
36061: NEG
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 2
36072: NEG
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 2
36084: NEG
36085: PUSH
36086: LD_INT 2
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36108: LD_ADDR_VAR 0 53
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: LD_INT 1
36128: NEG
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: LD_INT 2
36193: NEG
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: LD_INT 2
36204: NEG
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: LD_INT 1
36215: NEG
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 2
36233: PUSH
36234: LD_INT 1
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: LD_INT 2
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: LD_INT 2
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: LD_INT 2
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 2
36284: NEG
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 2
36295: NEG
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 2
36307: NEG
36308: PUSH
36309: LD_INT 2
36311: NEG
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36338: LD_ADDR_VAR 0 54
36342: PUSH
36343: LD_INT 0
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 0
36386: PUSH
36387: LD_INT 1
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 1
36396: NEG
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: PUSH
36409: LD_INT 1
36411: NEG
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: LD_INT 2
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 0
36431: PUSH
36432: LD_INT 2
36434: NEG
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 2
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 2
36473: PUSH
36474: LD_INT 2
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: LD_INT 2
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: LD_INT 2
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 2
36514: NEG
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 2
36525: NEG
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 2
36537: NEG
36538: PUSH
36539: LD_INT 2
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36568: LD_ADDR_VAR 0 55
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 1
36626: NEG
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: LD_INT 1
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: LD_INT 2
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 2
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 1
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 2
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 2
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: PUSH
36704: LD_INT 2
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 1
36713: PUSH
36714: LD_INT 2
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 2
36744: NEG
36745: PUSH
36746: LD_INT 0
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 2
36755: NEG
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 2
36767: NEG
36768: PUSH
36769: LD_INT 2
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36798: LD_ADDR_VAR 0 56
36802: PUSH
36803: LD_INT 0
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 0
36846: PUSH
36847: LD_INT 1
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 1
36856: NEG
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 1
36867: NEG
36868: PUSH
36869: LD_INT 1
36871: NEG
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: LD_INT 2
36894: NEG
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 1
36902: PUSH
36903: LD_INT 1
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 2
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 2
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 2
36933: PUSH
36934: LD_INT 2
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: LD_INT 2
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: LD_INT 2
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 2
36974: NEG
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 2
36985: NEG
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 2
36997: NEG
36998: PUSH
36999: LD_INT 2
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37028: LD_ADDR_VAR 0 57
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 1
37086: NEG
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: LD_INT 1
37101: NEG
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 1
37109: NEG
37110: PUSH
37111: LD_INT 2
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 2
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 2
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: LD_INT 2
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: PUSH
37174: LD_INT 2
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 1
37193: NEG
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 2
37204: NEG
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 2
37215: NEG
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 2
37227: NEG
37228: PUSH
37229: LD_INT 2
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37258: LD_ADDR_VAR 0 58
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: LD_INT 1
37278: NEG
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 1
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 1
37316: NEG
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: NEG
37328: PUSH
37329: LD_INT 1
37331: NEG
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 1
37339: NEG
37340: PUSH
37341: LD_INT 2
37343: NEG
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: LD_INT 2
37354: NEG
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 1
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 2
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 2
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 2
37393: PUSH
37394: LD_INT 2
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: LD_INT 2
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 1
37423: NEG
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 2
37434: NEG
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 2
37445: NEG
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 2
37457: NEG
37458: PUSH
37459: LD_INT 2
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37488: LD_ADDR_VAR 0 59
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37576: LD_ADDR_VAR 0 60
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 1
37634: NEG
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37664: LD_ADDR_VAR 0 61
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 1
37722: NEG
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37752: LD_ADDR_VAR 0 62
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37840: LD_ADDR_VAR 0 63
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 1
37898: NEG
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: LD_INT 1
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37928: LD_ADDR_VAR 0 64
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: ST_TO_ADDR
// end ; 1 :
38016: GO 43913
38018: LD_INT 1
38020: DOUBLE
38021: EQUAL
38022: IFTRUE 38026
38024: GO 40649
38026: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38027: LD_ADDR_VAR 0 11
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: LD_INT 3
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: LD_INT 3
38049: NEG
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: LD_INT 2
38060: NEG
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38071: LD_ADDR_VAR 0 12
38075: PUSH
38076: LD_INT 2
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 3
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 3
38099: PUSH
38100: LD_INT 1
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: LIST
38111: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38112: LD_ADDR_VAR 0 13
38116: PUSH
38117: LD_INT 3
38119: PUSH
38120: LD_INT 2
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 3
38129: PUSH
38130: LD_INT 3
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 2
38139: PUSH
38140: LD_INT 3
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: LIST
38151: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38152: LD_ADDR_VAR 0 14
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: LD_INT 3
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: LD_INT 3
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 2
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: LIST
38192: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38193: LD_ADDR_VAR 0 15
38197: PUSH
38198: LD_INT 2
38200: NEG
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 3
38211: NEG
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 3
38222: NEG
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: LIST
38236: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38237: LD_ADDR_VAR 0 16
38241: PUSH
38242: LD_INT 2
38244: NEG
38245: PUSH
38246: LD_INT 3
38248: NEG
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 3
38256: NEG
38257: PUSH
38258: LD_INT 2
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 3
38268: NEG
38269: PUSH
38270: LD_INT 3
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: LIST
38282: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38283: LD_ADDR_VAR 0 17
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: LD_INT 3
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: LD_INT 3
38305: NEG
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: LD_INT 2
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: LIST
38326: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38327: LD_ADDR_VAR 0 18
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: LD_INT 1
38337: NEG
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 3
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 3
38355: PUSH
38356: LD_INT 1
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: LIST
38367: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38368: LD_ADDR_VAR 0 19
38372: PUSH
38373: LD_INT 3
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 3
38385: PUSH
38386: LD_INT 3
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: PUSH
38396: LD_INT 3
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: LIST
38407: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38408: LD_ADDR_VAR 0 20
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: LD_INT 3
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: LD_INT 3
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 1
38435: NEG
38436: PUSH
38437: LD_INT 2
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: LIST
38448: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38449: LD_ADDR_VAR 0 21
38453: PUSH
38454: LD_INT 2
38456: NEG
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 3
38467: NEG
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 3
38478: NEG
38479: PUSH
38480: LD_INT 1
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: LIST
38492: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38493: LD_ADDR_VAR 0 22
38497: PUSH
38498: LD_INT 2
38500: NEG
38501: PUSH
38502: LD_INT 3
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 3
38512: NEG
38513: PUSH
38514: LD_INT 2
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 3
38524: NEG
38525: PUSH
38526: LD_INT 3
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: LIST
38538: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38539: LD_ADDR_VAR 0 23
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: LD_INT 3
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: NEG
38558: PUSH
38559: LD_INT 4
38561: NEG
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: LD_INT 3
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: LIST
38582: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38583: LD_ADDR_VAR 0 24
38587: PUSH
38588: LD_INT 3
38590: PUSH
38591: LD_INT 0
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 3
38600: PUSH
38601: LD_INT 1
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 4
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38624: LD_ADDR_VAR 0 25
38628: PUSH
38629: LD_INT 3
38631: PUSH
38632: LD_INT 3
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 4
38641: PUSH
38642: LD_INT 3
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 3
38651: PUSH
38652: LD_INT 4
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: LIST
38663: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38664: LD_ADDR_VAR 0 26
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 3
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: LD_INT 4
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 1
38691: NEG
38692: PUSH
38693: LD_INT 3
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: LIST
38704: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38705: LD_ADDR_VAR 0 27
38709: PUSH
38710: LD_INT 3
38712: NEG
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 3
38723: NEG
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 4
38734: NEG
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: LIST
38748: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38749: LD_ADDR_VAR 0 28
38753: PUSH
38754: LD_INT 3
38756: NEG
38757: PUSH
38758: LD_INT 3
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 3
38768: NEG
38769: PUSH
38770: LD_INT 4
38772: NEG
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 4
38780: NEG
38781: PUSH
38782: LD_INT 3
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: LIST
38794: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38795: LD_ADDR_VAR 0 29
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: LD_INT 3
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: LD_INT 3
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: LD_INT 2
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: LD_INT 4
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: LD_INT 4
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: LD_INT 3
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 1
38870: NEG
38871: PUSH
38872: LD_INT 5
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: LD_INT 5
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: LD_INT 4
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: PUSH
38906: LD_INT 6
38908: NEG
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: LD_INT 6
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: LD_INT 5
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38950: LD_ADDR_VAR 0 30
38954: PUSH
38955: LD_INT 2
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 3
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 3
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 3
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 4
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 4
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 4
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 5
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 5
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 5
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 6
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 6
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39093: LD_ADDR_VAR 0 31
39097: PUSH
39098: LD_INT 3
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 3
39110: PUSH
39111: LD_INT 3
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 2
39120: PUSH
39121: LD_INT 3
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 4
39130: PUSH
39131: LD_INT 3
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 4
39140: PUSH
39141: LD_INT 4
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 3
39150: PUSH
39151: LD_INT 4
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 5
39160: PUSH
39161: LD_INT 4
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 5
39170: PUSH
39171: LD_INT 5
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 4
39180: PUSH
39181: LD_INT 5
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 6
39190: PUSH
39191: LD_INT 5
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 6
39200: PUSH
39201: LD_INT 6
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 5
39210: PUSH
39211: LD_INT 6
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39232: LD_ADDR_VAR 0 32
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: LD_INT 3
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 1
39259: NEG
39260: PUSH
39261: LD_INT 2
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: LD_INT 4
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 4
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: LD_INT 3
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: LD_INT 5
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 5
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: LD_INT 4
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: LD_INT 6
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: LD_INT 6
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: LD_INT 5
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39375: LD_ADDR_VAR 0 33
39379: PUSH
39380: LD_INT 2
39382: NEG
39383: PUSH
39384: LD_INT 1
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 3
39393: NEG
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 3
39404: NEG
39405: PUSH
39406: LD_INT 1
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 3
39416: NEG
39417: PUSH
39418: LD_INT 1
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 4
39427: NEG
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 4
39438: NEG
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 4
39450: NEG
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 5
39461: NEG
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 5
39472: NEG
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 5
39484: NEG
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 6
39495: NEG
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 6
39506: NEG
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39530: LD_ADDR_VAR 0 34
39534: PUSH
39535: LD_INT 2
39537: NEG
39538: PUSH
39539: LD_INT 3
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 3
39549: NEG
39550: PUSH
39551: LD_INT 2
39553: NEG
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 3
39561: NEG
39562: PUSH
39563: LD_INT 3
39565: NEG
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 3
39573: NEG
39574: PUSH
39575: LD_INT 4
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 4
39585: NEG
39586: PUSH
39587: LD_INT 3
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 4
39597: NEG
39598: PUSH
39599: LD_INT 4
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 4
39609: NEG
39610: PUSH
39611: LD_INT 5
39613: NEG
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 5
39621: NEG
39622: PUSH
39623: LD_INT 4
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 5
39633: NEG
39634: PUSH
39635: LD_INT 5
39637: NEG
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 5
39645: NEG
39646: PUSH
39647: LD_INT 6
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 6
39657: NEG
39658: PUSH
39659: LD_INT 5
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 6
39669: NEG
39670: PUSH
39671: LD_INT 6
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39693: LD_ADDR_VAR 0 41
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: LD_INT 2
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: LD_INT 3
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: LD_INT 2
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: LIST
39736: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39737: LD_ADDR_VAR 0 42
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 3
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39778: LD_ADDR_VAR 0 43
39782: PUSH
39783: LD_INT 2
39785: PUSH
39786: LD_INT 2
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 3
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: LD_INT 3
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: LIST
39817: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39818: LD_ADDR_VAR 0 44
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: LD_INT 2
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: LD_INT 3
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: LD_INT 2
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: LIST
39858: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39859: LD_ADDR_VAR 0 45
39863: PUSH
39864: LD_INT 2
39866: NEG
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 2
39877: NEG
39878: PUSH
39879: LD_INT 1
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 3
39888: NEG
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: LIST
39902: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39903: LD_ADDR_VAR 0 46
39907: PUSH
39908: LD_INT 2
39910: NEG
39911: PUSH
39912: LD_INT 2
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: NEG
39923: PUSH
39924: LD_INT 3
39926: NEG
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 3
39934: NEG
39935: PUSH
39936: LD_INT 2
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: LIST
39948: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39949: LD_ADDR_VAR 0 47
39953: PUSH
39954: LD_INT 2
39956: NEG
39957: PUSH
39958: LD_INT 3
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: LD_INT 3
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39982: LD_ADDR_VAR 0 48
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: LD_INT 2
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 2
40000: PUSH
40001: LD_INT 1
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40013: LD_ADDR_VAR 0 49
40017: PUSH
40018: LD_INT 3
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 3
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40042: LD_ADDR_VAR 0 50
40046: PUSH
40047: LD_INT 2
40049: PUSH
40050: LD_INT 3
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: LD_INT 3
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40071: LD_ADDR_VAR 0 51
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 2
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 2
40089: NEG
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40102: LD_ADDR_VAR 0 52
40106: PUSH
40107: LD_INT 3
40109: NEG
40110: PUSH
40111: LD_INT 1
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 3
40121: NEG
40122: PUSH
40123: LD_INT 2
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40135: LD_ADDR_VAR 0 53
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: LD_INT 3
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: LD_INT 3
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: LD_INT 2
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: LIST
40178: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40179: LD_ADDR_VAR 0 54
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 3
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 3
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: LIST
40219: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40220: LD_ADDR_VAR 0 55
40224: PUSH
40225: LD_INT 3
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 3
40237: PUSH
40238: LD_INT 3
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: LD_INT 3
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: LIST
40259: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40260: LD_ADDR_VAR 0 56
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: LD_INT 3
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: LD_INT 3
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: LIST
40300: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40301: LD_ADDR_VAR 0 57
40305: PUSH
40306: LD_INT 2
40308: NEG
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 3
40319: NEG
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 3
40330: NEG
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: LIST
40344: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40345: LD_ADDR_VAR 0 58
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: LD_INT 3
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 3
40364: NEG
40365: PUSH
40366: LD_INT 2
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 3
40376: NEG
40377: PUSH
40378: LD_INT 3
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: LIST
40390: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40391: LD_ADDR_VAR 0 59
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: LD_INT 2
40402: NEG
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: LD_INT 2
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: LIST
40434: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40435: LD_ADDR_VAR 0 60
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 2
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: LIST
40475: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40476: LD_ADDR_VAR 0 61
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: LIST
40515: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40516: LD_ADDR_VAR 0 62
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: LIST
40556: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40557: LD_ADDR_VAR 0 63
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: NEG
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 2
40586: NEG
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: LIST
40600: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40601: LD_ADDR_VAR 0 64
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 2
40632: NEG
40633: PUSH
40634: LD_INT 2
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: LIST
40646: ST_TO_ADDR
// end ; 2 :
40647: GO 43913
40649: LD_INT 2
40651: DOUBLE
40652: EQUAL
40653: IFTRUE 40657
40655: GO 43912
40657: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40658: LD_ADDR_VAR 0 29
40662: PUSH
40663: LD_INT 4
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 4
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 5
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 5
40696: PUSH
40697: LD_INT 1
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 4
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 3
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 3
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 3
40737: PUSH
40738: LD_INT 2
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 5
40748: PUSH
40749: LD_INT 2
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 3
40758: PUSH
40759: LD_INT 3
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 3
40768: PUSH
40769: LD_INT 2
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 4
40778: PUSH
40779: LD_INT 3
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 4
40788: PUSH
40789: LD_INT 4
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 3
40798: PUSH
40799: LD_INT 4
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 2
40808: PUSH
40809: LD_INT 3
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 2
40818: PUSH
40819: LD_INT 2
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 4
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: LD_INT 4
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: LD_INT 4
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: LD_INT 3
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: PUSH
40869: LD_INT 4
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: LD_INT 5
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 5
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: LD_INT 4
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: LD_INT 3
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 2
40920: PUSH
40921: LD_INT 5
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: LD_INT 3
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 3
40941: NEG
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 3
40952: NEG
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 2
40964: NEG
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 2
40975: NEG
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 3
40986: NEG
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 4
40997: NEG
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 4
41008: NEG
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 4
41020: NEG
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: NEG
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 4
41043: NEG
41044: PUSH
41045: LD_INT 4
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 4
41055: NEG
41056: PUSH
41057: LD_INT 5
41059: NEG
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 3
41067: NEG
41068: PUSH
41069: LD_INT 4
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 3
41079: NEG
41080: PUSH
41081: LD_INT 3
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 4
41091: NEG
41092: PUSH
41093: LD_INT 3
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 5
41103: NEG
41104: PUSH
41105: LD_INT 4
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 5
41115: NEG
41116: PUSH
41117: LD_INT 5
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 3
41127: NEG
41128: PUSH
41129: LD_INT 5
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 5
41139: NEG
41140: PUSH
41141: LD_INT 3
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41196: LD_ADDR_VAR 0 30
41200: PUSH
41201: LD_INT 4
41203: PUSH
41204: LD_INT 4
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 4
41213: PUSH
41214: LD_INT 3
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 5
41223: PUSH
41224: LD_INT 4
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 5
41233: PUSH
41234: LD_INT 5
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 4
41243: PUSH
41244: LD_INT 5
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 3
41253: PUSH
41254: LD_INT 4
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 3
41263: PUSH
41264: LD_INT 3
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 5
41273: PUSH
41274: LD_INT 3
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 3
41283: PUSH
41284: LD_INT 5
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 3
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 2
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 3
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: LD_INT 4
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: LD_INT 4
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: NEG
41344: PUSH
41345: LD_INT 3
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 2
41365: PUSH
41366: LD_INT 4
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 2
41375: NEG
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 4
41386: NEG
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 4
41397: NEG
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 3
41409: NEG
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 3
41420: NEG
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 4
41431: NEG
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 5
41442: NEG
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 5
41453: NEG
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 5
41465: NEG
41466: PUSH
41467: LD_INT 2
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 3
41477: NEG
41478: PUSH
41479: LD_INT 2
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 3
41488: NEG
41489: PUSH
41490: LD_INT 3
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 3
41500: NEG
41501: PUSH
41502: LD_INT 4
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 2
41512: NEG
41513: PUSH
41514: LD_INT 3
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: LD_INT 2
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 3
41536: NEG
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 4
41548: NEG
41549: PUSH
41550: LD_INT 3
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 4
41560: NEG
41561: PUSH
41562: LD_INT 4
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 2
41572: NEG
41573: PUSH
41574: LD_INT 4
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 4
41584: NEG
41585: PUSH
41586: LD_INT 2
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: LD_INT 4
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 5
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 4
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: LD_INT 3
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 3
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: PUSH
41653: LD_INT 4
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: LD_INT 5
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 2
41675: PUSH
41676: LD_INT 3
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 2
41686: NEG
41687: PUSH
41688: LD_INT 5
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41743: LD_ADDR_VAR 0 31
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 4
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: LD_INT 3
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: LD_INT 4
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: LD_INT 5
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: LD_INT 5
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: LD_INT 4
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: LD_INT 3
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: LD_INT 5
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: LD_INT 3
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 3
41843: NEG
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 3
41854: NEG
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 2
41866: NEG
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 2
41877: NEG
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 3
41888: NEG
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 4
41899: NEG
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 4
41910: NEG
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 4
41922: NEG
41923: PUSH
41924: LD_INT 2
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: NEG
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 4
41945: NEG
41946: PUSH
41947: LD_INT 4
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 4
41957: NEG
41958: PUSH
41959: LD_INT 5
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 3
41969: NEG
41970: PUSH
41971: LD_INT 4
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 3
41981: NEG
41982: PUSH
41983: LD_INT 3
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 4
41993: NEG
41994: PUSH
41995: LD_INT 3
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 5
42005: NEG
42006: PUSH
42007: LD_INT 4
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 5
42017: NEG
42018: PUSH
42019: LD_INT 5
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 3
42029: NEG
42030: PUSH
42031: LD_INT 5
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 5
42041: NEG
42042: PUSH
42043: LD_INT 3
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 3
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: LD_INT 4
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: LD_INT 3
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: LD_INT 3
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: NEG
42121: PUSH
42122: LD_INT 4
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: LD_INT 2
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 2
42143: NEG
42144: PUSH
42145: LD_INT 4
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 4
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 4
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 5
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 5
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 4
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 3
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 3
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 3
42227: PUSH
42228: LD_INT 2
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 5
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42293: LD_ADDR_VAR 0 32
42297: PUSH
42298: LD_INT 4
42300: NEG
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 4
42311: NEG
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 3
42323: NEG
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 3
42334: NEG
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 4
42345: NEG
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 5
42356: NEG
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 5
42367: NEG
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 5
42379: NEG
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 3
42391: NEG
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 3
42402: NEG
42403: PUSH
42404: LD_INT 3
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 3
42414: NEG
42415: PUSH
42416: LD_INT 4
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 2
42426: NEG
42427: PUSH
42428: LD_INT 3
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 2
42438: NEG
42439: PUSH
42440: LD_INT 2
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 3
42450: NEG
42451: PUSH
42452: LD_INT 2
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 4
42462: NEG
42463: PUSH
42464: LD_INT 3
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 4
42474: NEG
42475: PUSH
42476: LD_INT 4
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 2
42486: NEG
42487: PUSH
42488: LD_INT 4
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 4
42498: NEG
42499: PUSH
42500: LD_INT 2
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: LD_INT 4
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: LD_INT 5
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 4
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: LD_INT 3
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 3
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: LD_INT 4
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: LD_INT 5
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: LD_INT 3
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: LD_INT 5
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 3
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 3
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 4
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 4
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 3
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 2
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: LD_INT 2
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 4
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 4
42705: PUSH
42706: LD_INT 4
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 4
42715: PUSH
42716: LD_INT 3
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 5
42725: PUSH
42726: LD_INT 4
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 5
42735: PUSH
42736: LD_INT 5
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 4
42745: PUSH
42746: LD_INT 5
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 3
42755: PUSH
42756: LD_INT 4
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: LD_INT 3
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 5
42775: PUSH
42776: LD_INT 3
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 3
42785: PUSH
42786: LD_INT 5
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42840: LD_ADDR_VAR 0 33
42844: PUSH
42845: LD_INT 4
42847: NEG
42848: PUSH
42849: LD_INT 4
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 4
42859: NEG
42860: PUSH
42861: LD_INT 5
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 3
42871: NEG
42872: PUSH
42873: LD_INT 4
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 3
42883: NEG
42884: PUSH
42885: LD_INT 3
42887: NEG
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 4
42895: NEG
42896: PUSH
42897: LD_INT 3
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 5
42907: NEG
42908: PUSH
42909: LD_INT 4
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 5
42919: NEG
42920: PUSH
42921: LD_INT 5
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 3
42931: NEG
42932: PUSH
42933: LD_INT 5
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 5
42943: NEG
42944: PUSH
42945: LD_INT 3
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 3
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: LD_INT 4
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: LD_INT 3
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: LD_INT 2
42991: NEG
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 2
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: LD_INT 3
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: LD_INT 4
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 2
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: LD_INT 4
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 4
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 4
43067: PUSH
43068: LD_INT 1
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 5
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 5
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 4
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 3
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 3
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 3
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 5
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 3
43150: PUSH
43151: LD_INT 3
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 3
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 4
43170: PUSH
43171: LD_INT 3
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 4
43180: PUSH
43181: LD_INT 4
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 3
43190: PUSH
43191: LD_INT 4
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 2
43200: PUSH
43201: LD_INT 3
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: LD_INT 2
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 4
43220: PUSH
43221: LD_INT 2
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: PUSH
43231: LD_INT 4
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: LD_INT 4
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: LD_INT 3
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 4
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: LD_INT 5
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 5
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: LD_INT 4
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: LD_INT 5
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: NEG
43323: PUSH
43324: LD_INT 3
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43378: LD_ADDR_VAR 0 34
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 4
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: LD_INT 5
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: LD_INT 4
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 3
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 3
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: LD_INT 4
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: LD_INT 5
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 2
43464: PUSH
43465: LD_INT 3
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 2
43475: NEG
43476: PUSH
43477: LD_INT 5
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 3
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 3
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 4
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 4
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 3
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: LD_INT 2
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 4
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 4
43580: PUSH
43581: LD_INT 4
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 4
43590: PUSH
43591: LD_INT 3
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 5
43600: PUSH
43601: LD_INT 4
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 5
43610: PUSH
43611: LD_INT 5
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 4
43620: PUSH
43621: LD_INT 5
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 3
43630: PUSH
43631: LD_INT 4
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 3
43640: PUSH
43641: LD_INT 3
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 5
43650: PUSH
43651: LD_INT 3
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 3
43660: PUSH
43661: LD_INT 5
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: LD_INT 3
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 3
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 4
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 4
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: LD_INT 3
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 2
43742: PUSH
43743: LD_INT 4
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 2
43752: NEG
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 4
43763: NEG
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 4
43774: NEG
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 3
43786: NEG
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 3
43797: NEG
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 4
43808: NEG
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 5
43819: NEG
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 5
43830: NEG
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 5
43842: NEG
43843: PUSH
43844: LD_INT 2
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 3
43854: NEG
43855: PUSH
43856: LD_INT 2
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: ST_TO_ADDR
// end ; end ;
43910: GO 43913
43912: POP
// case btype of b_depot , b_warehouse :
43913: LD_VAR 0 1
43917: PUSH
43918: LD_INT 0
43920: DOUBLE
43921: EQUAL
43922: IFTRUE 43932
43924: LD_INT 1
43926: DOUBLE
43927: EQUAL
43928: IFTRUE 43932
43930: GO 44133
43932: POP
// case nation of nation_american :
43933: LD_VAR 0 5
43937: PUSH
43938: LD_INT 1
43940: DOUBLE
43941: EQUAL
43942: IFTRUE 43946
43944: GO 44002
43946: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43947: LD_ADDR_VAR 0 9
43951: PUSH
43952: LD_VAR 0 11
43956: PUSH
43957: LD_VAR 0 12
43961: PUSH
43962: LD_VAR 0 13
43966: PUSH
43967: LD_VAR 0 14
43971: PUSH
43972: LD_VAR 0 15
43976: PUSH
43977: LD_VAR 0 16
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: PUSH
43990: LD_VAR 0 4
43994: PUSH
43995: LD_INT 1
43997: PLUS
43998: ARRAY
43999: ST_TO_ADDR
44000: GO 44131
44002: LD_INT 2
44004: DOUBLE
44005: EQUAL
44006: IFTRUE 44010
44008: GO 44066
44010: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
44011: LD_ADDR_VAR 0 9
44015: PUSH
44016: LD_VAR 0 17
44020: PUSH
44021: LD_VAR 0 18
44025: PUSH
44026: LD_VAR 0 19
44030: PUSH
44031: LD_VAR 0 20
44035: PUSH
44036: LD_VAR 0 21
44040: PUSH
44041: LD_VAR 0 22
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: PUSH
44054: LD_VAR 0 4
44058: PUSH
44059: LD_INT 1
44061: PLUS
44062: ARRAY
44063: ST_TO_ADDR
44064: GO 44131
44066: LD_INT 3
44068: DOUBLE
44069: EQUAL
44070: IFTRUE 44074
44072: GO 44130
44074: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44075: LD_ADDR_VAR 0 9
44079: PUSH
44080: LD_VAR 0 23
44084: PUSH
44085: LD_VAR 0 24
44089: PUSH
44090: LD_VAR 0 25
44094: PUSH
44095: LD_VAR 0 26
44099: PUSH
44100: LD_VAR 0 27
44104: PUSH
44105: LD_VAR 0 28
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: PUSH
44118: LD_VAR 0 4
44122: PUSH
44123: LD_INT 1
44125: PLUS
44126: ARRAY
44127: ST_TO_ADDR
44128: GO 44131
44130: POP
44131: GO 44686
44133: LD_INT 2
44135: DOUBLE
44136: EQUAL
44137: IFTRUE 44147
44139: LD_INT 3
44141: DOUBLE
44142: EQUAL
44143: IFTRUE 44147
44145: GO 44203
44147: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44148: LD_ADDR_VAR 0 9
44152: PUSH
44153: LD_VAR 0 29
44157: PUSH
44158: LD_VAR 0 30
44162: PUSH
44163: LD_VAR 0 31
44167: PUSH
44168: LD_VAR 0 32
44172: PUSH
44173: LD_VAR 0 33
44177: PUSH
44178: LD_VAR 0 34
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: PUSH
44191: LD_VAR 0 4
44195: PUSH
44196: LD_INT 1
44198: PLUS
44199: ARRAY
44200: ST_TO_ADDR
44201: GO 44686
44203: LD_INT 16
44205: DOUBLE
44206: EQUAL
44207: IFTRUE 44265
44209: LD_INT 17
44211: DOUBLE
44212: EQUAL
44213: IFTRUE 44265
44215: LD_INT 18
44217: DOUBLE
44218: EQUAL
44219: IFTRUE 44265
44221: LD_INT 19
44223: DOUBLE
44224: EQUAL
44225: IFTRUE 44265
44227: LD_INT 22
44229: DOUBLE
44230: EQUAL
44231: IFTRUE 44265
44233: LD_INT 20
44235: DOUBLE
44236: EQUAL
44237: IFTRUE 44265
44239: LD_INT 21
44241: DOUBLE
44242: EQUAL
44243: IFTRUE 44265
44245: LD_INT 23
44247: DOUBLE
44248: EQUAL
44249: IFTRUE 44265
44251: LD_INT 24
44253: DOUBLE
44254: EQUAL
44255: IFTRUE 44265
44257: LD_INT 25
44259: DOUBLE
44260: EQUAL
44261: IFTRUE 44265
44263: GO 44321
44265: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44266: LD_ADDR_VAR 0 9
44270: PUSH
44271: LD_VAR 0 35
44275: PUSH
44276: LD_VAR 0 36
44280: PUSH
44281: LD_VAR 0 37
44285: PUSH
44286: LD_VAR 0 38
44290: PUSH
44291: LD_VAR 0 39
44295: PUSH
44296: LD_VAR 0 40
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: PUSH
44309: LD_VAR 0 4
44313: PUSH
44314: LD_INT 1
44316: PLUS
44317: ARRAY
44318: ST_TO_ADDR
44319: GO 44686
44321: LD_INT 6
44323: DOUBLE
44324: EQUAL
44325: IFTRUE 44377
44327: LD_INT 7
44329: DOUBLE
44330: EQUAL
44331: IFTRUE 44377
44333: LD_INT 8
44335: DOUBLE
44336: EQUAL
44337: IFTRUE 44377
44339: LD_INT 13
44341: DOUBLE
44342: EQUAL
44343: IFTRUE 44377
44345: LD_INT 12
44347: DOUBLE
44348: EQUAL
44349: IFTRUE 44377
44351: LD_INT 15
44353: DOUBLE
44354: EQUAL
44355: IFTRUE 44377
44357: LD_INT 11
44359: DOUBLE
44360: EQUAL
44361: IFTRUE 44377
44363: LD_INT 14
44365: DOUBLE
44366: EQUAL
44367: IFTRUE 44377
44369: LD_INT 10
44371: DOUBLE
44372: EQUAL
44373: IFTRUE 44377
44375: GO 44433
44377: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44378: LD_ADDR_VAR 0 9
44382: PUSH
44383: LD_VAR 0 41
44387: PUSH
44388: LD_VAR 0 42
44392: PUSH
44393: LD_VAR 0 43
44397: PUSH
44398: LD_VAR 0 44
44402: PUSH
44403: LD_VAR 0 45
44407: PUSH
44408: LD_VAR 0 46
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: PUSH
44421: LD_VAR 0 4
44425: PUSH
44426: LD_INT 1
44428: PLUS
44429: ARRAY
44430: ST_TO_ADDR
44431: GO 44686
44433: LD_INT 36
44435: DOUBLE
44436: EQUAL
44437: IFTRUE 44441
44439: GO 44497
44441: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44442: LD_ADDR_VAR 0 9
44446: PUSH
44447: LD_VAR 0 47
44451: PUSH
44452: LD_VAR 0 48
44456: PUSH
44457: LD_VAR 0 49
44461: PUSH
44462: LD_VAR 0 50
44466: PUSH
44467: LD_VAR 0 51
44471: PUSH
44472: LD_VAR 0 52
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: PUSH
44485: LD_VAR 0 4
44489: PUSH
44490: LD_INT 1
44492: PLUS
44493: ARRAY
44494: ST_TO_ADDR
44495: GO 44686
44497: LD_INT 4
44499: DOUBLE
44500: EQUAL
44501: IFTRUE 44523
44503: LD_INT 5
44505: DOUBLE
44506: EQUAL
44507: IFTRUE 44523
44509: LD_INT 34
44511: DOUBLE
44512: EQUAL
44513: IFTRUE 44523
44515: LD_INT 37
44517: DOUBLE
44518: EQUAL
44519: IFTRUE 44523
44521: GO 44579
44523: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44524: LD_ADDR_VAR 0 9
44528: PUSH
44529: LD_VAR 0 53
44533: PUSH
44534: LD_VAR 0 54
44538: PUSH
44539: LD_VAR 0 55
44543: PUSH
44544: LD_VAR 0 56
44548: PUSH
44549: LD_VAR 0 57
44553: PUSH
44554: LD_VAR 0 58
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: PUSH
44567: LD_VAR 0 4
44571: PUSH
44572: LD_INT 1
44574: PLUS
44575: ARRAY
44576: ST_TO_ADDR
44577: GO 44686
44579: LD_INT 31
44581: DOUBLE
44582: EQUAL
44583: IFTRUE 44629
44585: LD_INT 32
44587: DOUBLE
44588: EQUAL
44589: IFTRUE 44629
44591: LD_INT 33
44593: DOUBLE
44594: EQUAL
44595: IFTRUE 44629
44597: LD_INT 27
44599: DOUBLE
44600: EQUAL
44601: IFTRUE 44629
44603: LD_INT 26
44605: DOUBLE
44606: EQUAL
44607: IFTRUE 44629
44609: LD_INT 28
44611: DOUBLE
44612: EQUAL
44613: IFTRUE 44629
44615: LD_INT 29
44617: DOUBLE
44618: EQUAL
44619: IFTRUE 44629
44621: LD_INT 30
44623: DOUBLE
44624: EQUAL
44625: IFTRUE 44629
44627: GO 44685
44629: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
44630: LD_ADDR_VAR 0 9
44634: PUSH
44635: LD_VAR 0 59
44639: PUSH
44640: LD_VAR 0 60
44644: PUSH
44645: LD_VAR 0 61
44649: PUSH
44650: LD_VAR 0 62
44654: PUSH
44655: LD_VAR 0 63
44659: PUSH
44660: LD_VAR 0 64
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: PUSH
44673: LD_VAR 0 4
44677: PUSH
44678: LD_INT 1
44680: PLUS
44681: ARRAY
44682: ST_TO_ADDR
44683: GO 44686
44685: POP
// temp_list2 = [ ] ;
44686: LD_ADDR_VAR 0 10
44690: PUSH
44691: EMPTY
44692: ST_TO_ADDR
// for i in temp_list do
44693: LD_ADDR_VAR 0 8
44697: PUSH
44698: LD_VAR 0 9
44702: PUSH
44703: FOR_IN
44704: IFFALSE 44756
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44706: LD_ADDR_VAR 0 10
44710: PUSH
44711: LD_VAR 0 10
44715: PUSH
44716: LD_VAR 0 8
44720: PUSH
44721: LD_INT 1
44723: ARRAY
44724: PUSH
44725: LD_VAR 0 2
44729: PLUS
44730: PUSH
44731: LD_VAR 0 8
44735: PUSH
44736: LD_INT 2
44738: ARRAY
44739: PUSH
44740: LD_VAR 0 3
44744: PLUS
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: EMPTY
44751: LIST
44752: ADD
44753: ST_TO_ADDR
44754: GO 44703
44756: POP
44757: POP
// result = temp_list2 ;
44758: LD_ADDR_VAR 0 7
44762: PUSH
44763: LD_VAR 0 10
44767: ST_TO_ADDR
// end ;
44768: LD_VAR 0 7
44772: RET
// export function EnemyInRange ( unit , dist ) ; begin
44773: LD_INT 0
44775: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44776: LD_ADDR_VAR 0 3
44780: PUSH
44781: LD_VAR 0 1
44785: PPUSH
44786: CALL_OW 255
44790: PPUSH
44791: LD_VAR 0 1
44795: PPUSH
44796: CALL_OW 250
44800: PPUSH
44801: LD_VAR 0 1
44805: PPUSH
44806: CALL_OW 251
44810: PPUSH
44811: LD_VAR 0 2
44815: PPUSH
44816: CALL 18030 0 4
44820: PUSH
44821: LD_INT 4
44823: ARRAY
44824: ST_TO_ADDR
// end ;
44825: LD_VAR 0 3
44829: RET
// export function PlayerSeeMe ( unit ) ; begin
44830: LD_INT 0
44832: PPUSH
// result := See ( your_side , unit ) ;
44833: LD_ADDR_VAR 0 2
44837: PUSH
44838: LD_OWVAR 2
44842: PPUSH
44843: LD_VAR 0 1
44847: PPUSH
44848: CALL_OW 292
44852: ST_TO_ADDR
// end ;
44853: LD_VAR 0 2
44857: RET
// export function ReverseDir ( unit ) ; begin
44858: LD_INT 0
44860: PPUSH
// if not unit then
44861: LD_VAR 0 1
44865: NOT
44866: IFFALSE 44870
// exit ;
44868: GO 44893
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44870: LD_ADDR_VAR 0 2
44874: PUSH
44875: LD_VAR 0 1
44879: PPUSH
44880: CALL_OW 254
44884: PUSH
44885: LD_INT 3
44887: PLUS
44888: PUSH
44889: LD_INT 6
44891: MOD
44892: ST_TO_ADDR
// end ;
44893: LD_VAR 0 2
44897: RET
// export function ReverseArray ( array ) ; var i ; begin
44898: LD_INT 0
44900: PPUSH
44901: PPUSH
// if not array then
44902: LD_VAR 0 1
44906: NOT
44907: IFFALSE 44911
// exit ;
44909: GO 44966
// result := [ ] ;
44911: LD_ADDR_VAR 0 2
44915: PUSH
44916: EMPTY
44917: ST_TO_ADDR
// for i := array downto 1 do
44918: LD_ADDR_VAR 0 3
44922: PUSH
44923: DOUBLE
44924: LD_VAR 0 1
44928: INC
44929: ST_TO_ADDR
44930: LD_INT 1
44932: PUSH
44933: FOR_DOWNTO
44934: IFFALSE 44964
// result := Join ( result , array [ i ] ) ;
44936: LD_ADDR_VAR 0 2
44940: PUSH
44941: LD_VAR 0 2
44945: PPUSH
44946: LD_VAR 0 1
44950: PUSH
44951: LD_VAR 0 3
44955: ARRAY
44956: PPUSH
44957: CALL 49818 0 2
44961: ST_TO_ADDR
44962: GO 44933
44964: POP
44965: POP
// end ;
44966: LD_VAR 0 2
44970: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44971: LD_INT 0
44973: PPUSH
44974: PPUSH
44975: PPUSH
44976: PPUSH
44977: PPUSH
44978: PPUSH
// if not unit or not hexes then
44979: LD_VAR 0 1
44983: NOT
44984: IFTRUE 44993
44986: PUSH
44987: LD_VAR 0 2
44991: NOT
44992: OR
44993: IFFALSE 44997
// exit ;
44995: GO 45120
// dist := 9999 ;
44997: LD_ADDR_VAR 0 5
45001: PUSH
45002: LD_INT 9999
45004: ST_TO_ADDR
// for i = 1 to hexes do
45005: LD_ADDR_VAR 0 4
45009: PUSH
45010: DOUBLE
45011: LD_INT 1
45013: DEC
45014: ST_TO_ADDR
45015: LD_VAR 0 2
45019: PUSH
45020: FOR_TO
45021: IFFALSE 45108
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45023: LD_ADDR_VAR 0 6
45027: PUSH
45028: LD_VAR 0 1
45032: PPUSH
45033: LD_VAR 0 2
45037: PUSH
45038: LD_VAR 0 4
45042: ARRAY
45043: PUSH
45044: LD_INT 1
45046: ARRAY
45047: PPUSH
45048: LD_VAR 0 2
45052: PUSH
45053: LD_VAR 0 4
45057: ARRAY
45058: PUSH
45059: LD_INT 2
45061: ARRAY
45062: PPUSH
45063: CALL_OW 297
45067: ST_TO_ADDR
// if tdist < dist then
45068: LD_VAR 0 6
45072: PUSH
45073: LD_VAR 0 5
45077: LESS
45078: IFFALSE 45106
// begin hex := hexes [ i ] ;
45080: LD_ADDR_VAR 0 8
45084: PUSH
45085: LD_VAR 0 2
45089: PUSH
45090: LD_VAR 0 4
45094: ARRAY
45095: ST_TO_ADDR
// dist := tdist ;
45096: LD_ADDR_VAR 0 5
45100: PUSH
45101: LD_VAR 0 6
45105: ST_TO_ADDR
// end ; end ;
45106: GO 45020
45108: POP
45109: POP
// result := hex ;
45110: LD_ADDR_VAR 0 3
45114: PUSH
45115: LD_VAR 0 8
45119: ST_TO_ADDR
// end ;
45120: LD_VAR 0 3
45124: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45125: LD_INT 0
45127: PPUSH
45128: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45129: LD_VAR 0 1
45133: NOT
45134: IFTRUE 45173
45136: PUSH
45137: LD_VAR 0 1
45141: PUSH
45142: LD_INT 21
45144: PUSH
45145: LD_INT 2
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 23
45154: PUSH
45155: LD_INT 2
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PPUSH
45166: CALL_OW 69
45170: IN
45171: NOT
45172: OR
45173: IFFALSE 45177
// exit ;
45175: GO 45224
// for i = 1 to 3 do
45177: LD_ADDR_VAR 0 3
45181: PUSH
45182: DOUBLE
45183: LD_INT 1
45185: DEC
45186: ST_TO_ADDR
45187: LD_INT 3
45189: PUSH
45190: FOR_TO
45191: IFFALSE 45222
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45193: LD_VAR 0 1
45197: PPUSH
45198: CALL_OW 250
45202: PPUSH
45203: LD_VAR 0 1
45207: PPUSH
45208: CALL_OW 251
45212: PPUSH
45213: LD_INT 1
45215: PPUSH
45216: CALL_OW 453
45220: GO 45190
45222: POP
45223: POP
// end ;
45224: LD_VAR 0 2
45228: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45229: LD_INT 0
45231: PPUSH
45232: PPUSH
45233: PPUSH
45234: PPUSH
45235: PPUSH
45236: PPUSH
// if not unit or not enemy_unit then
45237: LD_VAR 0 1
45241: NOT
45242: IFTRUE 45251
45244: PUSH
45245: LD_VAR 0 2
45249: NOT
45250: OR
45251: IFFALSE 45255
// exit ;
45253: GO 45736
// if GetLives ( i ) < 250 then
45255: LD_VAR 0 4
45259: PPUSH
45260: CALL_OW 256
45264: PUSH
45265: LD_INT 250
45267: LESS
45268: IFFALSE 45281
// begin ComAutodestruct ( i ) ;
45270: LD_VAR 0 4
45274: PPUSH
45275: CALL 45125 0 1
// exit ;
45279: GO 45736
// end ; x := GetX ( enemy_unit ) ;
45281: LD_ADDR_VAR 0 7
45285: PUSH
45286: LD_VAR 0 2
45290: PPUSH
45291: CALL_OW 250
45295: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45296: LD_ADDR_VAR 0 8
45300: PUSH
45301: LD_VAR 0 2
45305: PPUSH
45306: CALL_OW 251
45310: ST_TO_ADDR
// if not x or not y then
45311: LD_VAR 0 7
45315: NOT
45316: IFTRUE 45325
45318: PUSH
45319: LD_VAR 0 8
45323: NOT
45324: OR
45325: IFFALSE 45329
// exit ;
45327: GO 45736
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45329: LD_ADDR_VAR 0 6
45333: PUSH
45334: LD_VAR 0 7
45338: PPUSH
45339: LD_INT 0
45341: PPUSH
45342: LD_INT 4
45344: PPUSH
45345: CALL_OW 272
45349: PUSH
45350: LD_VAR 0 8
45354: PPUSH
45355: LD_INT 0
45357: PPUSH
45358: LD_INT 4
45360: PPUSH
45361: CALL_OW 273
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_VAR 0 7
45374: PPUSH
45375: LD_INT 1
45377: PPUSH
45378: LD_INT 4
45380: PPUSH
45381: CALL_OW 272
45385: PUSH
45386: LD_VAR 0 8
45390: PPUSH
45391: LD_INT 1
45393: PPUSH
45394: LD_INT 4
45396: PPUSH
45397: CALL_OW 273
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_VAR 0 7
45410: PPUSH
45411: LD_INT 2
45413: PPUSH
45414: LD_INT 4
45416: PPUSH
45417: CALL_OW 272
45421: PUSH
45422: LD_VAR 0 8
45426: PPUSH
45427: LD_INT 2
45429: PPUSH
45430: LD_INT 4
45432: PPUSH
45433: CALL_OW 273
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_VAR 0 7
45446: PPUSH
45447: LD_INT 3
45449: PPUSH
45450: LD_INT 4
45452: PPUSH
45453: CALL_OW 272
45457: PUSH
45458: LD_VAR 0 8
45462: PPUSH
45463: LD_INT 3
45465: PPUSH
45466: LD_INT 4
45468: PPUSH
45469: CALL_OW 273
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_VAR 0 7
45482: PPUSH
45483: LD_INT 4
45485: PPUSH
45486: LD_INT 4
45488: PPUSH
45489: CALL_OW 272
45493: PUSH
45494: LD_VAR 0 8
45498: PPUSH
45499: LD_INT 4
45501: PPUSH
45502: LD_INT 4
45504: PPUSH
45505: CALL_OW 273
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_VAR 0 7
45518: PPUSH
45519: LD_INT 5
45521: PPUSH
45522: LD_INT 4
45524: PPUSH
45525: CALL_OW 272
45529: PUSH
45530: LD_VAR 0 8
45534: PPUSH
45535: LD_INT 5
45537: PPUSH
45538: LD_INT 4
45540: PPUSH
45541: CALL_OW 273
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: ST_TO_ADDR
// for i = tmp downto 1 do
45558: LD_ADDR_VAR 0 4
45562: PUSH
45563: DOUBLE
45564: LD_VAR 0 6
45568: INC
45569: ST_TO_ADDR
45570: LD_INT 1
45572: PUSH
45573: FOR_DOWNTO
45574: IFFALSE 45677
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45576: LD_VAR 0 6
45580: PUSH
45581: LD_VAR 0 4
45585: ARRAY
45586: PUSH
45587: LD_INT 1
45589: ARRAY
45590: PPUSH
45591: LD_VAR 0 6
45595: PUSH
45596: LD_VAR 0 4
45600: ARRAY
45601: PUSH
45602: LD_INT 2
45604: ARRAY
45605: PPUSH
45606: CALL_OW 488
45610: NOT
45611: IFTRUE 45653
45613: PUSH
45614: LD_VAR 0 6
45618: PUSH
45619: LD_VAR 0 4
45623: ARRAY
45624: PUSH
45625: LD_INT 1
45627: ARRAY
45628: PPUSH
45629: LD_VAR 0 6
45633: PUSH
45634: LD_VAR 0 4
45638: ARRAY
45639: PUSH
45640: LD_INT 2
45642: ARRAY
45643: PPUSH
45644: CALL_OW 428
45648: PUSH
45649: LD_INT 0
45651: NONEQUAL
45652: OR
45653: IFFALSE 45675
// tmp := Delete ( tmp , i ) ;
45655: LD_ADDR_VAR 0 6
45659: PUSH
45660: LD_VAR 0 6
45664: PPUSH
45665: LD_VAR 0 4
45669: PPUSH
45670: CALL_OW 3
45674: ST_TO_ADDR
45675: GO 45573
45677: POP
45678: POP
// j := GetClosestHex ( unit , tmp ) ;
45679: LD_ADDR_VAR 0 5
45683: PUSH
45684: LD_VAR 0 1
45688: PPUSH
45689: LD_VAR 0 6
45693: PPUSH
45694: CALL 44971 0 2
45698: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45699: LD_VAR 0 1
45703: PPUSH
45704: LD_VAR 0 5
45708: PUSH
45709: LD_INT 1
45711: ARRAY
45712: PPUSH
45713: LD_VAR 0 5
45717: PUSH
45718: LD_INT 2
45720: ARRAY
45721: PPUSH
45722: CALL_OW 111
// result := j ;
45726: LD_ADDR_VAR 0 3
45730: PUSH
45731: LD_VAR 0 5
45735: ST_TO_ADDR
// end ;
45736: LD_VAR 0 3
45740: RET
// export function PrepareApemanSoldier ( ) ; begin
45741: LD_INT 0
45743: PPUSH
// uc_nation := 0 ;
45744: LD_ADDR_OWVAR 21
45748: PUSH
45749: LD_INT 0
45751: ST_TO_ADDR
// hc_sex := sex_male ;
45752: LD_ADDR_OWVAR 27
45756: PUSH
45757: LD_INT 1
45759: ST_TO_ADDR
// hc_name :=  ;
45760: LD_ADDR_OWVAR 26
45764: PUSH
45765: LD_STRING 
45767: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
45768: LD_ADDR_OWVAR 28
45772: PUSH
45773: LD_INT 15
45775: ST_TO_ADDR
// hc_gallery :=  ;
45776: LD_ADDR_OWVAR 33
45780: PUSH
45781: LD_STRING 
45783: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45784: LD_ADDR_OWVAR 31
45788: PUSH
45789: LD_INT 0
45791: PPUSH
45792: LD_INT 3
45794: PPUSH
45795: CALL_OW 12
45799: PUSH
45800: LD_INT 0
45802: PPUSH
45803: LD_INT 3
45805: PPUSH
45806: CALL_OW 12
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45823: LD_ADDR_OWVAR 29
45827: PUSH
45828: LD_INT 10
45830: PUSH
45831: LD_INT 12
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: ST_TO_ADDR
// end ;
45838: LD_VAR 0 1
45842: RET
// export function PrepareApemanEngineer ( ) ; begin
45843: LD_INT 0
45845: PPUSH
// uc_nation := 0 ;
45846: LD_ADDR_OWVAR 21
45850: PUSH
45851: LD_INT 0
45853: ST_TO_ADDR
// hc_sex := sex_male ;
45854: LD_ADDR_OWVAR 27
45858: PUSH
45859: LD_INT 1
45861: ST_TO_ADDR
// hc_name :=  ;
45862: LD_ADDR_OWVAR 26
45866: PUSH
45867: LD_STRING 
45869: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
45870: LD_ADDR_OWVAR 28
45874: PUSH
45875: LD_INT 16
45877: ST_TO_ADDR
// hc_gallery :=  ;
45878: LD_ADDR_OWVAR 33
45882: PUSH
45883: LD_STRING 
45885: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45886: LD_ADDR_OWVAR 31
45890: PUSH
45891: LD_INT 0
45893: PPUSH
45894: LD_INT 3
45896: PPUSH
45897: CALL_OW 12
45901: PUSH
45902: LD_INT 0
45904: PPUSH
45905: LD_INT 3
45907: PPUSH
45908: CALL_OW 12
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45925: LD_ADDR_OWVAR 29
45929: PUSH
45930: LD_INT 10
45932: PUSH
45933: LD_INT 12
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: ST_TO_ADDR
// end ;
45940: LD_VAR 0 1
45944: RET
// export function PrepareApeman ( agressivity ) ; begin
45945: LD_INT 0
45947: PPUSH
// uc_side := 0 ;
45948: LD_ADDR_OWVAR 20
45952: PUSH
45953: LD_INT 0
45955: ST_TO_ADDR
// uc_nation := 0 ;
45956: LD_ADDR_OWVAR 21
45960: PUSH
45961: LD_INT 0
45963: ST_TO_ADDR
// hc_sex := sex_male ;
45964: LD_ADDR_OWVAR 27
45968: PUSH
45969: LD_INT 1
45971: ST_TO_ADDR
// hc_class := class_apeman ;
45972: LD_ADDR_OWVAR 28
45976: PUSH
45977: LD_INT 12
45979: ST_TO_ADDR
// hc_gallery :=  ;
45980: LD_ADDR_OWVAR 33
45984: PUSH
45985: LD_STRING 
45987: ST_TO_ADDR
// hc_name :=  ;
45988: LD_ADDR_OWVAR 26
45992: PUSH
45993: LD_STRING 
45995: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45996: LD_ADDR_OWVAR 29
46000: PUSH
46001: LD_INT 10
46003: PUSH
46004: LD_INT 12
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: ST_TO_ADDR
// if agressivity = 0 then
46011: LD_VAR 0 1
46015: PUSH
46016: LD_INT 0
46018: EQUAL
46019: IFFALSE 46031
// hc_agressivity := 0 else
46021: LD_ADDR_OWVAR 35
46025: PUSH
46026: LD_INT 0
46028: ST_TO_ADDR
46029: GO 46052
// hc_agressivity := rand ( - agressivity , agressivity ) ;
46031: LD_ADDR_OWVAR 35
46035: PUSH
46036: LD_VAR 0 1
46040: NEG
46041: PPUSH
46042: LD_VAR 0 1
46046: PPUSH
46047: CALL_OW 12
46051: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
46052: LD_ADDR_OWVAR 31
46056: PUSH
46057: LD_INT 0
46059: PPUSH
46060: LD_INT 3
46062: PPUSH
46063: CALL_OW 12
46067: PUSH
46068: LD_INT 0
46070: PPUSH
46071: LD_INT 3
46073: PPUSH
46074: CALL_OW 12
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: ST_TO_ADDR
// end ;
46091: LD_VAR 0 2
46095: RET
// export function PrepareTiger ( agressivity ) ; begin
46096: LD_INT 0
46098: PPUSH
// uc_side := 0 ;
46099: LD_ADDR_OWVAR 20
46103: PUSH
46104: LD_INT 0
46106: ST_TO_ADDR
// uc_nation := 0 ;
46107: LD_ADDR_OWVAR 21
46111: PUSH
46112: LD_INT 0
46114: ST_TO_ADDR
// InitHc ;
46115: CALL_OW 19
// hc_class := class_tiger ;
46119: LD_ADDR_OWVAR 28
46123: PUSH
46124: LD_INT 14
46126: ST_TO_ADDR
// hc_gallery :=  ;
46127: LD_ADDR_OWVAR 33
46131: PUSH
46132: LD_STRING 
46134: ST_TO_ADDR
// hc_name :=  ;
46135: LD_ADDR_OWVAR 26
46139: PUSH
46140: LD_STRING 
46142: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
46143: LD_ADDR_OWVAR 35
46147: PUSH
46148: LD_VAR 0 1
46152: NEG
46153: PPUSH
46154: LD_VAR 0 1
46158: PPUSH
46159: CALL_OW 12
46163: ST_TO_ADDR
// end ;
46164: LD_VAR 0 2
46168: RET
// export function PrepareEnchidna ( ) ; begin
46169: LD_INT 0
46171: PPUSH
// uc_side := 0 ;
46172: LD_ADDR_OWVAR 20
46176: PUSH
46177: LD_INT 0
46179: ST_TO_ADDR
// uc_nation := 0 ;
46180: LD_ADDR_OWVAR 21
46184: PUSH
46185: LD_INT 0
46187: ST_TO_ADDR
// InitHc ;
46188: CALL_OW 19
// hc_class := class_baggie ;
46192: LD_ADDR_OWVAR 28
46196: PUSH
46197: LD_INT 13
46199: ST_TO_ADDR
// hc_gallery :=  ;
46200: LD_ADDR_OWVAR 33
46204: PUSH
46205: LD_STRING 
46207: ST_TO_ADDR
// hc_name :=  ;
46208: LD_ADDR_OWVAR 26
46212: PUSH
46213: LD_STRING 
46215: ST_TO_ADDR
// end ;
46216: LD_VAR 0 1
46220: RET
// export function PrepareFrog ( ) ; begin
46221: LD_INT 0
46223: PPUSH
// uc_side := 0 ;
46224: LD_ADDR_OWVAR 20
46228: PUSH
46229: LD_INT 0
46231: ST_TO_ADDR
// uc_nation := 0 ;
46232: LD_ADDR_OWVAR 21
46236: PUSH
46237: LD_INT 0
46239: ST_TO_ADDR
// InitHc ;
46240: CALL_OW 19
// hc_class := class_frog ;
46244: LD_ADDR_OWVAR 28
46248: PUSH
46249: LD_INT 19
46251: ST_TO_ADDR
// hc_gallery :=  ;
46252: LD_ADDR_OWVAR 33
46256: PUSH
46257: LD_STRING 
46259: ST_TO_ADDR
// hc_name :=  ;
46260: LD_ADDR_OWVAR 26
46264: PUSH
46265: LD_STRING 
46267: ST_TO_ADDR
// end ;
46268: LD_VAR 0 1
46272: RET
// export function PrepareFish ( ) ; begin
46273: LD_INT 0
46275: PPUSH
// uc_side := 0 ;
46276: LD_ADDR_OWVAR 20
46280: PUSH
46281: LD_INT 0
46283: ST_TO_ADDR
// uc_nation := 0 ;
46284: LD_ADDR_OWVAR 21
46288: PUSH
46289: LD_INT 0
46291: ST_TO_ADDR
// InitHc ;
46292: CALL_OW 19
// hc_class := class_fish ;
46296: LD_ADDR_OWVAR 28
46300: PUSH
46301: LD_INT 20
46303: ST_TO_ADDR
// hc_gallery :=  ;
46304: LD_ADDR_OWVAR 33
46308: PUSH
46309: LD_STRING 
46311: ST_TO_ADDR
// hc_name :=  ;
46312: LD_ADDR_OWVAR 26
46316: PUSH
46317: LD_STRING 
46319: ST_TO_ADDR
// end ;
46320: LD_VAR 0 1
46324: RET
// export function PrepareBird ( ) ; begin
46325: LD_INT 0
46327: PPUSH
// uc_side := 0 ;
46328: LD_ADDR_OWVAR 20
46332: PUSH
46333: LD_INT 0
46335: ST_TO_ADDR
// uc_nation := 0 ;
46336: LD_ADDR_OWVAR 21
46340: PUSH
46341: LD_INT 0
46343: ST_TO_ADDR
// InitHc ;
46344: CALL_OW 19
// hc_class := class_phororhacos ;
46348: LD_ADDR_OWVAR 28
46352: PUSH
46353: LD_INT 18
46355: ST_TO_ADDR
// hc_gallery :=  ;
46356: LD_ADDR_OWVAR 33
46360: PUSH
46361: LD_STRING 
46363: ST_TO_ADDR
// hc_name :=  ;
46364: LD_ADDR_OWVAR 26
46368: PUSH
46369: LD_STRING 
46371: ST_TO_ADDR
// end ;
46372: LD_VAR 0 1
46376: RET
// export function PrepareHorse ( ) ; begin
46377: LD_INT 0
46379: PPUSH
// uc_side := 0 ;
46380: LD_ADDR_OWVAR 20
46384: PUSH
46385: LD_INT 0
46387: ST_TO_ADDR
// uc_nation := 0 ;
46388: LD_ADDR_OWVAR 21
46392: PUSH
46393: LD_INT 0
46395: ST_TO_ADDR
// InitHc ;
46396: CALL_OW 19
// hc_class := class_horse ;
46400: LD_ADDR_OWVAR 28
46404: PUSH
46405: LD_INT 21
46407: ST_TO_ADDR
// hc_gallery :=  ;
46408: LD_ADDR_OWVAR 33
46412: PUSH
46413: LD_STRING 
46415: ST_TO_ADDR
// hc_name :=  ;
46416: LD_ADDR_OWVAR 26
46420: PUSH
46421: LD_STRING 
46423: ST_TO_ADDR
// end ;
46424: LD_VAR 0 1
46428: RET
// export function PrepareMastodont ( ) ; begin
46429: LD_INT 0
46431: PPUSH
// uc_side := 0 ;
46432: LD_ADDR_OWVAR 20
46436: PUSH
46437: LD_INT 0
46439: ST_TO_ADDR
// uc_nation := 0 ;
46440: LD_ADDR_OWVAR 21
46444: PUSH
46445: LD_INT 0
46447: ST_TO_ADDR
// vc_chassis := class_mastodont ;
46448: LD_ADDR_OWVAR 37
46452: PUSH
46453: LD_INT 31
46455: ST_TO_ADDR
// vc_control := control_rider ;
46456: LD_ADDR_OWVAR 38
46460: PUSH
46461: LD_INT 4
46463: ST_TO_ADDR
// end ;
46464: LD_VAR 0 1
46468: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46469: LD_INT 0
46471: PPUSH
46472: PPUSH
46473: PPUSH
// uc_side = 0 ;
46474: LD_ADDR_OWVAR 20
46478: PUSH
46479: LD_INT 0
46481: ST_TO_ADDR
// uc_nation = 0 ;
46482: LD_ADDR_OWVAR 21
46486: PUSH
46487: LD_INT 0
46489: ST_TO_ADDR
// InitHc_All ( ) ;
46490: CALL_OW 584
// InitVc ;
46494: CALL_OW 20
// if mastodonts then
46498: LD_VAR 0 6
46502: IFFALSE 46569
// for i = 1 to mastodonts do
46504: LD_ADDR_VAR 0 11
46508: PUSH
46509: DOUBLE
46510: LD_INT 1
46512: DEC
46513: ST_TO_ADDR
46514: LD_VAR 0 6
46518: PUSH
46519: FOR_TO
46520: IFFALSE 46567
// begin vc_chassis := 31 ;
46522: LD_ADDR_OWVAR 37
46526: PUSH
46527: LD_INT 31
46529: ST_TO_ADDR
// vc_control := control_rider ;
46530: LD_ADDR_OWVAR 38
46534: PUSH
46535: LD_INT 4
46537: ST_TO_ADDR
// animal := CreateVehicle ;
46538: LD_ADDR_VAR 0 12
46542: PUSH
46543: CALL_OW 45
46547: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46548: LD_VAR 0 12
46552: PPUSH
46553: LD_VAR 0 8
46557: PPUSH
46558: LD_INT 0
46560: PPUSH
46561: CALL 48711 0 3
// end ;
46565: GO 46519
46567: POP
46568: POP
// if horses then
46569: LD_VAR 0 5
46573: IFFALSE 46640
// for i = 1 to horses do
46575: LD_ADDR_VAR 0 11
46579: PUSH
46580: DOUBLE
46581: LD_INT 1
46583: DEC
46584: ST_TO_ADDR
46585: LD_VAR 0 5
46589: PUSH
46590: FOR_TO
46591: IFFALSE 46638
// begin hc_class := 21 ;
46593: LD_ADDR_OWVAR 28
46597: PUSH
46598: LD_INT 21
46600: ST_TO_ADDR
// hc_gallery :=  ;
46601: LD_ADDR_OWVAR 33
46605: PUSH
46606: LD_STRING 
46608: ST_TO_ADDR
// animal := CreateHuman ;
46609: LD_ADDR_VAR 0 12
46613: PUSH
46614: CALL_OW 44
46618: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46619: LD_VAR 0 12
46623: PPUSH
46624: LD_VAR 0 8
46628: PPUSH
46629: LD_INT 0
46631: PPUSH
46632: CALL 48711 0 3
// end ;
46636: GO 46590
46638: POP
46639: POP
// if birds then
46640: LD_VAR 0 1
46644: IFFALSE 46711
// for i = 1 to birds do
46646: LD_ADDR_VAR 0 11
46650: PUSH
46651: DOUBLE
46652: LD_INT 1
46654: DEC
46655: ST_TO_ADDR
46656: LD_VAR 0 1
46660: PUSH
46661: FOR_TO
46662: IFFALSE 46709
// begin hc_class := 18 ;
46664: LD_ADDR_OWVAR 28
46668: PUSH
46669: LD_INT 18
46671: ST_TO_ADDR
// hc_gallery =  ;
46672: LD_ADDR_OWVAR 33
46676: PUSH
46677: LD_STRING 
46679: ST_TO_ADDR
// animal := CreateHuman ;
46680: LD_ADDR_VAR 0 12
46684: PUSH
46685: CALL_OW 44
46689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46690: LD_VAR 0 12
46694: PPUSH
46695: LD_VAR 0 8
46699: PPUSH
46700: LD_INT 0
46702: PPUSH
46703: CALL 48711 0 3
// end ;
46707: GO 46661
46709: POP
46710: POP
// if tigers then
46711: LD_VAR 0 2
46715: IFFALSE 46799
// for i = 1 to tigers do
46717: LD_ADDR_VAR 0 11
46721: PUSH
46722: DOUBLE
46723: LD_INT 1
46725: DEC
46726: ST_TO_ADDR
46727: LD_VAR 0 2
46731: PUSH
46732: FOR_TO
46733: IFFALSE 46797
// begin hc_class = class_tiger ;
46735: LD_ADDR_OWVAR 28
46739: PUSH
46740: LD_INT 14
46742: ST_TO_ADDR
// hc_gallery =  ;
46743: LD_ADDR_OWVAR 33
46747: PUSH
46748: LD_STRING 
46750: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46751: LD_ADDR_OWVAR 35
46755: PUSH
46756: LD_INT 7
46758: NEG
46759: PPUSH
46760: LD_INT 7
46762: PPUSH
46763: CALL_OW 12
46767: ST_TO_ADDR
// animal := CreateHuman ;
46768: LD_ADDR_VAR 0 12
46772: PUSH
46773: CALL_OW 44
46777: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46778: LD_VAR 0 12
46782: PPUSH
46783: LD_VAR 0 8
46787: PPUSH
46788: LD_INT 0
46790: PPUSH
46791: CALL 48711 0 3
// end ;
46795: GO 46732
46797: POP
46798: POP
// if apemans then
46799: LD_VAR 0 3
46803: IFFALSE 46926
// for i = 1 to apemans do
46805: LD_ADDR_VAR 0 11
46809: PUSH
46810: DOUBLE
46811: LD_INT 1
46813: DEC
46814: ST_TO_ADDR
46815: LD_VAR 0 3
46819: PUSH
46820: FOR_TO
46821: IFFALSE 46924
// begin hc_class = class_apeman ;
46823: LD_ADDR_OWVAR 28
46827: PUSH
46828: LD_INT 12
46830: ST_TO_ADDR
// hc_gallery =  ;
46831: LD_ADDR_OWVAR 33
46835: PUSH
46836: LD_STRING 
46838: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46839: LD_ADDR_OWVAR 35
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PPUSH
46848: LD_INT 2
46850: PPUSH
46851: CALL_OW 12
46855: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46856: LD_ADDR_OWVAR 31
46860: PUSH
46861: LD_INT 1
46863: PPUSH
46864: LD_INT 3
46866: PPUSH
46867: CALL_OW 12
46871: PUSH
46872: LD_INT 1
46874: PPUSH
46875: LD_INT 3
46877: PPUSH
46878: CALL_OW 12
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: ST_TO_ADDR
// animal := CreateHuman ;
46895: LD_ADDR_VAR 0 12
46899: PUSH
46900: CALL_OW 44
46904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46905: LD_VAR 0 12
46909: PPUSH
46910: LD_VAR 0 8
46914: PPUSH
46915: LD_INT 0
46917: PPUSH
46918: CALL 48711 0 3
// end ;
46922: GO 46820
46924: POP
46925: POP
// if enchidnas then
46926: LD_VAR 0 4
46930: IFFALSE 46997
// for i = 1 to enchidnas do
46932: LD_ADDR_VAR 0 11
46936: PUSH
46937: DOUBLE
46938: LD_INT 1
46940: DEC
46941: ST_TO_ADDR
46942: LD_VAR 0 4
46946: PUSH
46947: FOR_TO
46948: IFFALSE 46995
// begin hc_class = 13 ;
46950: LD_ADDR_OWVAR 28
46954: PUSH
46955: LD_INT 13
46957: ST_TO_ADDR
// hc_gallery =  ;
46958: LD_ADDR_OWVAR 33
46962: PUSH
46963: LD_STRING 
46965: ST_TO_ADDR
// animal := CreateHuman ;
46966: LD_ADDR_VAR 0 12
46970: PUSH
46971: CALL_OW 44
46975: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46976: LD_VAR 0 12
46980: PPUSH
46981: LD_VAR 0 8
46985: PPUSH
46986: LD_INT 0
46988: PPUSH
46989: CALL 48711 0 3
// end ;
46993: GO 46947
46995: POP
46996: POP
// if fishes then
46997: LD_VAR 0 7
47001: IFFALSE 47068
// for i = 1 to fishes do
47003: LD_ADDR_VAR 0 11
47007: PUSH
47008: DOUBLE
47009: LD_INT 1
47011: DEC
47012: ST_TO_ADDR
47013: LD_VAR 0 7
47017: PUSH
47018: FOR_TO
47019: IFFALSE 47066
// begin hc_class = 20 ;
47021: LD_ADDR_OWVAR 28
47025: PUSH
47026: LD_INT 20
47028: ST_TO_ADDR
// hc_gallery =  ;
47029: LD_ADDR_OWVAR 33
47033: PUSH
47034: LD_STRING 
47036: ST_TO_ADDR
// animal := CreateHuman ;
47037: LD_ADDR_VAR 0 12
47041: PUSH
47042: CALL_OW 44
47046: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
47047: LD_VAR 0 12
47051: PPUSH
47052: LD_VAR 0 9
47056: PPUSH
47057: LD_INT 0
47059: PPUSH
47060: CALL 48711 0 3
// end ;
47064: GO 47018
47066: POP
47067: POP
// end ;
47068: LD_VAR 0 10
47072: RET
// export function WantHeal ( sci , unit ) ; begin
47073: LD_INT 0
47075: PPUSH
// if GetTaskList ( sci ) > 0 then
47076: LD_VAR 0 1
47080: PPUSH
47081: CALL_OW 437
47085: PUSH
47086: LD_INT 0
47088: GREATER
47089: IFFALSE 47161
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
47091: LD_VAR 0 1
47095: PPUSH
47096: CALL_OW 437
47100: PUSH
47101: LD_INT 1
47103: ARRAY
47104: PUSH
47105: LD_INT 1
47107: ARRAY
47108: PUSH
47109: LD_STRING l
47111: EQUAL
47112: IFFALSE 47139
47114: PUSH
47115: LD_VAR 0 1
47119: PPUSH
47120: CALL_OW 437
47124: PUSH
47125: LD_INT 1
47127: ARRAY
47128: PUSH
47129: LD_INT 4
47131: ARRAY
47132: PUSH
47133: LD_VAR 0 2
47137: EQUAL
47138: AND
47139: IFFALSE 47151
// result := true else
47141: LD_ADDR_VAR 0 3
47145: PUSH
47146: LD_INT 1
47148: ST_TO_ADDR
47149: GO 47159
// result := false ;
47151: LD_ADDR_VAR 0 3
47155: PUSH
47156: LD_INT 0
47158: ST_TO_ADDR
// end else
47159: GO 47169
// result := false ;
47161: LD_ADDR_VAR 0 3
47165: PUSH
47166: LD_INT 0
47168: ST_TO_ADDR
// end ;
47169: LD_VAR 0 3
47173: RET
// export function HealTarget ( sci ) ; begin
47174: LD_INT 0
47176: PPUSH
// if not sci then
47177: LD_VAR 0 1
47181: NOT
47182: IFFALSE 47186
// exit ;
47184: GO 47251
// result := 0 ;
47186: LD_ADDR_VAR 0 2
47190: PUSH
47191: LD_INT 0
47193: ST_TO_ADDR
// if GetTaskList ( sci ) then
47194: LD_VAR 0 1
47198: PPUSH
47199: CALL_OW 437
47203: IFFALSE 47251
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
47205: LD_VAR 0 1
47209: PPUSH
47210: CALL_OW 437
47214: PUSH
47215: LD_INT 1
47217: ARRAY
47218: PUSH
47219: LD_INT 1
47221: ARRAY
47222: PUSH
47223: LD_STRING l
47225: EQUAL
47226: IFFALSE 47251
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
47228: LD_ADDR_VAR 0 2
47232: PUSH
47233: LD_VAR 0 1
47237: PPUSH
47238: CALL_OW 437
47242: PUSH
47243: LD_INT 1
47245: ARRAY
47246: PUSH
47247: LD_INT 4
47249: ARRAY
47250: ST_TO_ADDR
// end ;
47251: LD_VAR 0 2
47255: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
47256: LD_INT 0
47258: PPUSH
47259: PPUSH
47260: PPUSH
47261: PPUSH
// if not base_units then
47262: LD_VAR 0 1
47266: NOT
47267: IFFALSE 47271
// exit ;
47269: GO 47358
// result := false ;
47271: LD_ADDR_VAR 0 2
47275: PUSH
47276: LD_INT 0
47278: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47279: LD_ADDR_VAR 0 5
47283: PUSH
47284: LD_VAR 0 1
47288: PPUSH
47289: LD_INT 21
47291: PUSH
47292: LD_INT 3
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PPUSH
47299: CALL_OW 72
47303: ST_TO_ADDR
// if not tmp then
47304: LD_VAR 0 5
47308: NOT
47309: IFFALSE 47313
// exit ;
47311: GO 47358
// for i in tmp do
47313: LD_ADDR_VAR 0 3
47317: PUSH
47318: LD_VAR 0 5
47322: PUSH
47323: FOR_IN
47324: IFFALSE 47356
// begin result := EnemyInRange ( i , 22 ) ;
47326: LD_ADDR_VAR 0 2
47330: PUSH
47331: LD_VAR 0 3
47335: PPUSH
47336: LD_INT 22
47338: PPUSH
47339: CALL 44773 0 2
47343: ST_TO_ADDR
// if result then
47344: LD_VAR 0 2
47348: IFFALSE 47354
// exit ;
47350: POP
47351: POP
47352: GO 47358
// end ;
47354: GO 47323
47356: POP
47357: POP
// end ;
47358: LD_VAR 0 2
47362: RET
// export function FilterByTag ( units , tag ) ; begin
47363: LD_INT 0
47365: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47366: LD_ADDR_VAR 0 3
47370: PUSH
47371: LD_VAR 0 1
47375: PPUSH
47376: LD_INT 120
47378: PUSH
47379: LD_VAR 0 2
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PPUSH
47388: CALL_OW 72
47392: ST_TO_ADDR
// end ;
47393: LD_VAR 0 3
47397: RET
// export function IsDriver ( un ) ; begin
47398: LD_INT 0
47400: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47401: LD_ADDR_VAR 0 2
47405: PUSH
47406: LD_VAR 0 1
47410: PUSH
47411: LD_INT 55
47413: PUSH
47414: EMPTY
47415: LIST
47416: PPUSH
47417: CALL_OW 69
47421: IN
47422: ST_TO_ADDR
// end ;
47423: LD_VAR 0 2
47427: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47428: LD_INT 0
47430: PPUSH
47431: PPUSH
// list := [ ] ;
47432: LD_ADDR_VAR 0 5
47436: PUSH
47437: EMPTY
47438: ST_TO_ADDR
// case d of 0 :
47439: LD_VAR 0 3
47443: PUSH
47444: LD_INT 0
47446: DOUBLE
47447: EQUAL
47448: IFTRUE 47452
47450: GO 47585
47452: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47453: LD_ADDR_VAR 0 5
47457: PUSH
47458: LD_VAR 0 1
47462: PUSH
47463: LD_INT 4
47465: MINUS
47466: PUSH
47467: LD_VAR 0 2
47471: PUSH
47472: LD_INT 4
47474: MINUS
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: LIST
47483: PUSH
47484: LD_VAR 0 1
47488: PUSH
47489: LD_INT 3
47491: MINUS
47492: PUSH
47493: LD_VAR 0 2
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: LIST
47505: PUSH
47506: LD_VAR 0 1
47510: PUSH
47511: LD_INT 4
47513: PLUS
47514: PUSH
47515: LD_VAR 0 2
47519: PUSH
47520: LD_INT 4
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: LIST
47527: PUSH
47528: LD_VAR 0 1
47532: PUSH
47533: LD_INT 3
47535: PLUS
47536: PUSH
47537: LD_VAR 0 2
47541: PUSH
47542: LD_INT 3
47544: PLUS
47545: PUSH
47546: LD_INT 5
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: LIST
47553: PUSH
47554: LD_VAR 0 1
47558: PUSH
47559: LD_VAR 0 2
47563: PUSH
47564: LD_INT 4
47566: PLUS
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: LIST
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: ST_TO_ADDR
// end ; 1 :
47583: GO 48283
47585: LD_INT 1
47587: DOUBLE
47588: EQUAL
47589: IFTRUE 47593
47591: GO 47726
47593: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47594: LD_ADDR_VAR 0 5
47598: PUSH
47599: LD_VAR 0 1
47603: PUSH
47604: LD_VAR 0 2
47608: PUSH
47609: LD_INT 4
47611: MINUS
47612: PUSH
47613: LD_INT 3
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: LIST
47620: PUSH
47621: LD_VAR 0 1
47625: PUSH
47626: LD_INT 3
47628: MINUS
47629: PUSH
47630: LD_VAR 0 2
47634: PUSH
47635: LD_INT 3
47637: MINUS
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: LIST
47646: PUSH
47647: LD_VAR 0 1
47651: PUSH
47652: LD_INT 4
47654: MINUS
47655: PUSH
47656: LD_VAR 0 2
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: LIST
47668: PUSH
47669: LD_VAR 0 1
47673: PUSH
47674: LD_VAR 0 2
47678: PUSH
47679: LD_INT 3
47681: PLUS
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: LIST
47690: PUSH
47691: LD_VAR 0 1
47695: PUSH
47696: LD_INT 4
47698: PLUS
47699: PUSH
47700: LD_VAR 0 2
47704: PUSH
47705: LD_INT 4
47707: PLUS
47708: PUSH
47709: LD_INT 5
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: LIST
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: ST_TO_ADDR
// end ; 2 :
47724: GO 48283
47726: LD_INT 2
47728: DOUBLE
47729: EQUAL
47730: IFTRUE 47734
47732: GO 47863
47734: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47735: LD_ADDR_VAR 0 5
47739: PUSH
47740: LD_VAR 0 1
47744: PUSH
47745: LD_VAR 0 2
47749: PUSH
47750: LD_INT 3
47752: MINUS
47753: PUSH
47754: LD_INT 3
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: LIST
47761: PUSH
47762: LD_VAR 0 1
47766: PUSH
47767: LD_INT 4
47769: PLUS
47770: PUSH
47771: LD_VAR 0 2
47775: PUSH
47776: LD_INT 4
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: LIST
47783: PUSH
47784: LD_VAR 0 1
47788: PUSH
47789: LD_VAR 0 2
47793: PUSH
47794: LD_INT 4
47796: PLUS
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: LIST
47805: PUSH
47806: LD_VAR 0 1
47810: PUSH
47811: LD_INT 3
47813: MINUS
47814: PUSH
47815: LD_VAR 0 2
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: LIST
47827: PUSH
47828: LD_VAR 0 1
47832: PUSH
47833: LD_INT 4
47835: MINUS
47836: PUSH
47837: LD_VAR 0 2
47841: PUSH
47842: LD_INT 4
47844: MINUS
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: LIST
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: ST_TO_ADDR
// end ; 3 :
47861: GO 48283
47863: LD_INT 3
47865: DOUBLE
47866: EQUAL
47867: IFTRUE 47871
47869: GO 48004
47871: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47872: LD_ADDR_VAR 0 5
47876: PUSH
47877: LD_VAR 0 1
47881: PUSH
47882: LD_INT 3
47884: PLUS
47885: PUSH
47886: LD_VAR 0 2
47890: PUSH
47891: LD_INT 4
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: LIST
47898: PUSH
47899: LD_VAR 0 1
47903: PUSH
47904: LD_INT 4
47906: PLUS
47907: PUSH
47908: LD_VAR 0 2
47912: PUSH
47913: LD_INT 4
47915: PLUS
47916: PUSH
47917: LD_INT 5
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: LIST
47924: PUSH
47925: LD_VAR 0 1
47929: PUSH
47930: LD_INT 4
47932: MINUS
47933: PUSH
47934: LD_VAR 0 2
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: LIST
47946: PUSH
47947: LD_VAR 0 1
47951: PUSH
47952: LD_VAR 0 2
47956: PUSH
47957: LD_INT 4
47959: MINUS
47960: PUSH
47961: LD_INT 3
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: LIST
47968: PUSH
47969: LD_VAR 0 1
47973: PUSH
47974: LD_INT 3
47976: MINUS
47977: PUSH
47978: LD_VAR 0 2
47982: PUSH
47983: LD_INT 3
47985: MINUS
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: LIST
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: ST_TO_ADDR
// end ; 4 :
48002: GO 48283
48004: LD_INT 4
48006: DOUBLE
48007: EQUAL
48008: IFTRUE 48012
48010: GO 48145
48012: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
48013: LD_ADDR_VAR 0 5
48017: PUSH
48018: LD_VAR 0 1
48022: PUSH
48023: LD_VAR 0 2
48027: PUSH
48028: LD_INT 4
48030: PLUS
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: LIST
48039: PUSH
48040: LD_VAR 0 1
48044: PUSH
48045: LD_INT 3
48047: PLUS
48048: PUSH
48049: LD_VAR 0 2
48053: PUSH
48054: LD_INT 3
48056: PLUS
48057: PUSH
48058: LD_INT 5
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: LIST
48065: PUSH
48066: LD_VAR 0 1
48070: PUSH
48071: LD_INT 4
48073: PLUS
48074: PUSH
48075: LD_VAR 0 2
48079: PUSH
48080: LD_INT 4
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: LIST
48087: PUSH
48088: LD_VAR 0 1
48092: PUSH
48093: LD_VAR 0 2
48097: PUSH
48098: LD_INT 3
48100: MINUS
48101: PUSH
48102: LD_INT 3
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: LIST
48109: PUSH
48110: LD_VAR 0 1
48114: PUSH
48115: LD_INT 4
48117: MINUS
48118: PUSH
48119: LD_VAR 0 2
48123: PUSH
48124: LD_INT 4
48126: MINUS
48127: PUSH
48128: LD_INT 2
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: LIST
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: ST_TO_ADDR
// end ; 5 :
48143: GO 48283
48145: LD_INT 5
48147: DOUBLE
48148: EQUAL
48149: IFTRUE 48153
48151: GO 48282
48153: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
48154: LD_ADDR_VAR 0 5
48158: PUSH
48159: LD_VAR 0 1
48163: PUSH
48164: LD_INT 4
48166: MINUS
48167: PUSH
48168: LD_VAR 0 2
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: LIST
48180: PUSH
48181: LD_VAR 0 1
48185: PUSH
48186: LD_VAR 0 2
48190: PUSH
48191: LD_INT 4
48193: MINUS
48194: PUSH
48195: LD_INT 3
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: PUSH
48203: LD_VAR 0 1
48207: PUSH
48208: LD_INT 4
48210: PLUS
48211: PUSH
48212: LD_VAR 0 2
48216: PUSH
48217: LD_INT 4
48219: PLUS
48220: PUSH
48221: LD_INT 5
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: LIST
48228: PUSH
48229: LD_VAR 0 1
48233: PUSH
48234: LD_INT 3
48236: PLUS
48237: PUSH
48238: LD_VAR 0 2
48242: PUSH
48243: LD_INT 4
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: LIST
48250: PUSH
48251: LD_VAR 0 1
48255: PUSH
48256: LD_VAR 0 2
48260: PUSH
48261: LD_INT 3
48263: PLUS
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: LIST
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: ST_TO_ADDR
// end ; end ;
48280: GO 48283
48282: POP
// result := list ;
48283: LD_ADDR_VAR 0 4
48287: PUSH
48288: LD_VAR 0 5
48292: ST_TO_ADDR
// end ;
48293: LD_VAR 0 4
48297: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48298: LD_INT 0
48300: PPUSH
48301: PPUSH
48302: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48303: LD_VAR 0 1
48307: NOT
48308: IFTRUE 48336
48310: PUSH
48311: LD_VAR 0 2
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: LD_INT 3
48324: PUSH
48325: LD_INT 4
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: IN
48334: NOT
48335: OR
48336: IFFALSE 48340
// exit ;
48338: GO 48423
// tmp := [ ] ;
48340: LD_ADDR_VAR 0 5
48344: PUSH
48345: EMPTY
48346: ST_TO_ADDR
// for i in units do
48347: LD_ADDR_VAR 0 4
48351: PUSH
48352: LD_VAR 0 1
48356: PUSH
48357: FOR_IN
48358: IFFALSE 48392
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
48360: LD_ADDR_VAR 0 5
48364: PUSH
48365: LD_VAR 0 5
48369: PPUSH
48370: LD_VAR 0 4
48374: PPUSH
48375: LD_VAR 0 2
48379: PPUSH
48380: CALL_OW 259
48384: PPUSH
48385: CALL 49818 0 2
48389: ST_TO_ADDR
48390: GO 48357
48392: POP
48393: POP
// if not tmp then
48394: LD_VAR 0 5
48398: NOT
48399: IFFALSE 48403
// exit ;
48401: GO 48423
// result := SortListByListDesc ( units , tmp ) ;
48403: LD_ADDR_VAR 0 3
48407: PUSH
48408: LD_VAR 0 1
48412: PPUSH
48413: LD_VAR 0 5
48417: PPUSH
48418: CALL_OW 77
48422: ST_TO_ADDR
// end ;
48423: LD_VAR 0 3
48427: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48428: LD_INT 0
48430: PPUSH
48431: PPUSH
48432: PPUSH
// result := false ;
48433: LD_ADDR_VAR 0 3
48437: PUSH
48438: LD_INT 0
48440: ST_TO_ADDR
// if not building then
48441: LD_VAR 0 2
48445: NOT
48446: IFFALSE 48450
// exit ;
48448: GO 48594
// x := GetX ( building ) ;
48450: LD_ADDR_VAR 0 4
48454: PUSH
48455: LD_VAR 0 2
48459: PPUSH
48460: CALL_OW 250
48464: ST_TO_ADDR
// y := GetY ( building ) ;
48465: LD_ADDR_VAR 0 5
48469: PUSH
48470: LD_VAR 0 2
48474: PPUSH
48475: CALL_OW 251
48479: ST_TO_ADDR
// if not x or not y then
48480: LD_VAR 0 4
48484: NOT
48485: IFTRUE 48494
48487: PUSH
48488: LD_VAR 0 5
48492: NOT
48493: OR
48494: IFFALSE 48498
// exit ;
48496: GO 48594
// if GetTaskList ( unit ) then
48498: LD_VAR 0 1
48502: PPUSH
48503: CALL_OW 437
48507: IFFALSE 48594
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48509: LD_STRING e
48511: PUSH
48512: LD_VAR 0 1
48516: PPUSH
48517: CALL_OW 437
48521: PUSH
48522: LD_INT 1
48524: ARRAY
48525: PUSH
48526: LD_INT 1
48528: ARRAY
48529: EQUAL
48530: IFFALSE 48557
48532: PUSH
48533: LD_VAR 0 4
48537: PUSH
48538: LD_VAR 0 1
48542: PPUSH
48543: CALL_OW 437
48547: PUSH
48548: LD_INT 1
48550: ARRAY
48551: PUSH
48552: LD_INT 2
48554: ARRAY
48555: EQUAL
48556: AND
48557: IFFALSE 48584
48559: PUSH
48560: LD_VAR 0 5
48564: PUSH
48565: LD_VAR 0 1
48569: PPUSH
48570: CALL_OW 437
48574: PUSH
48575: LD_INT 1
48577: ARRAY
48578: PUSH
48579: LD_INT 3
48581: ARRAY
48582: EQUAL
48583: AND
48584: IFFALSE 48594
// result := true end ;
48586: LD_ADDR_VAR 0 3
48590: PUSH
48591: LD_INT 1
48593: ST_TO_ADDR
// end ;
48594: LD_VAR 0 3
48598: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48599: LD_INT 0
48601: PPUSH
// result := false ;
48602: LD_ADDR_VAR 0 4
48606: PUSH
48607: LD_INT 0
48609: ST_TO_ADDR
// if GetTaskList ( unit ) then
48610: LD_VAR 0 1
48614: PPUSH
48615: CALL_OW 437
48619: IFFALSE 48706
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48621: LD_STRING M
48623: PUSH
48624: LD_VAR 0 1
48628: PPUSH
48629: CALL_OW 437
48633: PUSH
48634: LD_INT 1
48636: ARRAY
48637: PUSH
48638: LD_INT 1
48640: ARRAY
48641: EQUAL
48642: IFFALSE 48669
48644: PUSH
48645: LD_VAR 0 2
48649: PUSH
48650: LD_VAR 0 1
48654: PPUSH
48655: CALL_OW 437
48659: PUSH
48660: LD_INT 1
48662: ARRAY
48663: PUSH
48664: LD_INT 2
48666: ARRAY
48667: EQUAL
48668: AND
48669: IFFALSE 48696
48671: PUSH
48672: LD_VAR 0 3
48676: PUSH
48677: LD_VAR 0 1
48681: PPUSH
48682: CALL_OW 437
48686: PUSH
48687: LD_INT 1
48689: ARRAY
48690: PUSH
48691: LD_INT 3
48693: ARRAY
48694: EQUAL
48695: AND
48696: IFFALSE 48706
// result := true ;
48698: LD_ADDR_VAR 0 4
48702: PUSH
48703: LD_INT 1
48705: ST_TO_ADDR
// end ; end ;
48706: LD_VAR 0 4
48710: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48711: LD_INT 0
48713: PPUSH
48714: PPUSH
48715: PPUSH
48716: PPUSH
// if not unit or not area then
48717: LD_VAR 0 1
48721: NOT
48722: IFTRUE 48731
48724: PUSH
48725: LD_VAR 0 2
48729: NOT
48730: OR
48731: IFFALSE 48735
// exit ;
48733: GO 48911
// tmp := AreaToList ( area , i ) ;
48735: LD_ADDR_VAR 0 6
48739: PUSH
48740: LD_VAR 0 2
48744: PPUSH
48745: LD_VAR 0 5
48749: PPUSH
48750: CALL_OW 517
48754: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48755: LD_ADDR_VAR 0 5
48759: PUSH
48760: DOUBLE
48761: LD_INT 1
48763: DEC
48764: ST_TO_ADDR
48765: LD_VAR 0 6
48769: PUSH
48770: LD_INT 1
48772: ARRAY
48773: PUSH
48774: FOR_TO
48775: IFFALSE 48909
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48777: LD_ADDR_VAR 0 7
48781: PUSH
48782: LD_VAR 0 6
48786: PUSH
48787: LD_INT 1
48789: ARRAY
48790: PUSH
48791: LD_VAR 0 5
48795: ARRAY
48796: PUSH
48797: LD_VAR 0 6
48801: PUSH
48802: LD_INT 2
48804: ARRAY
48805: PUSH
48806: LD_VAR 0 5
48810: ARRAY
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
48816: LD_INT 92
48818: PUSH
48819: LD_VAR 0 7
48823: PUSH
48824: LD_INT 1
48826: ARRAY
48827: PUSH
48828: LD_VAR 0 7
48832: PUSH
48833: LD_INT 2
48835: ARRAY
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: PPUSH
48846: CALL_OW 69
48850: PUSH
48851: LD_INT 0
48853: EQUAL
48854: IFFALSE 48907
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48856: LD_VAR 0 1
48860: PPUSH
48861: LD_VAR 0 7
48865: PUSH
48866: LD_INT 1
48868: ARRAY
48869: PPUSH
48870: LD_VAR 0 7
48874: PUSH
48875: LD_INT 2
48877: ARRAY
48878: PPUSH
48879: LD_VAR 0 3
48883: PPUSH
48884: CALL_OW 48
// result := IsPlaced ( unit ) ;
48888: LD_ADDR_VAR 0 4
48892: PUSH
48893: LD_VAR 0 1
48897: PPUSH
48898: CALL_OW 305
48902: ST_TO_ADDR
// exit ;
48903: POP
48904: POP
48905: GO 48911
// end ; end ;
48907: GO 48774
48909: POP
48910: POP
// end ;
48911: LD_VAR 0 4
48915: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48916: LD_INT 0
48918: PPUSH
48919: PPUSH
48920: PPUSH
// if not side or side > 8 then
48921: LD_VAR 0 1
48925: NOT
48926: IFTRUE 48938
48928: PUSH
48929: LD_VAR 0 1
48933: PUSH
48934: LD_INT 8
48936: GREATER
48937: OR
48938: IFFALSE 48942
// exit ;
48940: GO 49129
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48942: LD_ADDR_VAR 0 4
48946: PUSH
48947: LD_INT 22
48949: PUSH
48950: LD_VAR 0 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 21
48961: PUSH
48962: LD_INT 3
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PPUSH
48973: CALL_OW 69
48977: ST_TO_ADDR
// if not tmp then
48978: LD_VAR 0 4
48982: NOT
48983: IFFALSE 48987
// exit ;
48985: GO 49129
// enable_addtolog := true ;
48987: LD_ADDR_OWVAR 81
48991: PUSH
48992: LD_INT 1
48994: ST_TO_ADDR
// AddToLog ( [ ) ;
48995: LD_STRING [
48997: PPUSH
48998: CALL_OW 561
// for i in tmp do
49002: LD_ADDR_VAR 0 3
49006: PUSH
49007: LD_VAR 0 4
49011: PUSH
49012: FOR_IN
49013: IFFALSE 49120
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
49015: LD_STRING [
49017: PUSH
49018: LD_VAR 0 3
49022: PPUSH
49023: CALL_OW 266
49027: STR
49028: PUSH
49029: LD_STRING , 
49031: STR
49032: PUSH
49033: LD_VAR 0 3
49037: PPUSH
49038: CALL_OW 250
49042: STR
49043: PUSH
49044: LD_STRING , 
49046: STR
49047: PUSH
49048: LD_VAR 0 3
49052: PPUSH
49053: CALL_OW 251
49057: STR
49058: PUSH
49059: LD_STRING , 
49061: STR
49062: PUSH
49063: LD_VAR 0 3
49067: PPUSH
49068: CALL_OW 254
49072: STR
49073: PUSH
49074: LD_STRING , 
49076: STR
49077: PUSH
49078: LD_VAR 0 3
49082: PPUSH
49083: LD_INT 1
49085: PPUSH
49086: CALL_OW 268
49090: STR
49091: PUSH
49092: LD_STRING , 
49094: STR
49095: PUSH
49096: LD_VAR 0 3
49100: PPUSH
49101: LD_INT 2
49103: PPUSH
49104: CALL_OW 268
49108: STR
49109: PUSH
49110: LD_STRING ],
49112: STR
49113: PPUSH
49114: CALL_OW 561
// end ;
49118: GO 49012
49120: POP
49121: POP
// AddToLog ( ]; ) ;
49122: LD_STRING ];
49124: PPUSH
49125: CALL_OW 561
// end ;
49129: LD_VAR 0 2
49133: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
49134: LD_INT 0
49136: PPUSH
49137: PPUSH
49138: PPUSH
49139: PPUSH
49140: PPUSH
// if not area or not rate or not max then
49141: LD_VAR 0 1
49145: NOT
49146: IFTRUE 49155
49148: PUSH
49149: LD_VAR 0 2
49153: NOT
49154: OR
49155: IFTRUE 49164
49157: PUSH
49158: LD_VAR 0 4
49162: NOT
49163: OR
49164: IFFALSE 49168
// exit ;
49166: GO 49357
// while 1 do
49168: LD_INT 1
49170: IFFALSE 49357
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
49172: LD_ADDR_VAR 0 9
49176: PUSH
49177: LD_VAR 0 1
49181: PPUSH
49182: LD_INT 1
49184: PPUSH
49185: CALL_OW 287
49189: PUSH
49190: LD_INT 10
49192: MUL
49193: ST_TO_ADDR
// r := rate / 10 ;
49194: LD_ADDR_VAR 0 7
49198: PUSH
49199: LD_VAR 0 2
49203: PUSH
49204: LD_INT 10
49206: DIVREAL
49207: ST_TO_ADDR
// time := 1 1$00 ;
49208: LD_ADDR_VAR 0 8
49212: PUSH
49213: LD_INT 2100
49215: ST_TO_ADDR
// if amount < min then
49216: LD_VAR 0 9
49220: PUSH
49221: LD_VAR 0 3
49225: LESS
49226: IFFALSE 49244
// r := r * 2 else
49228: LD_ADDR_VAR 0 7
49232: PUSH
49233: LD_VAR 0 7
49237: PUSH
49238: LD_INT 2
49240: MUL
49241: ST_TO_ADDR
49242: GO 49270
// if amount > max then
49244: LD_VAR 0 9
49248: PUSH
49249: LD_VAR 0 4
49253: GREATER
49254: IFFALSE 49270
// r := r / 2 ;
49256: LD_ADDR_VAR 0 7
49260: PUSH
49261: LD_VAR 0 7
49265: PUSH
49266: LD_INT 2
49268: DIVREAL
49269: ST_TO_ADDR
// time := time / r ;
49270: LD_ADDR_VAR 0 8
49274: PUSH
49275: LD_VAR 0 8
49279: PUSH
49280: LD_VAR 0 7
49284: DIVREAL
49285: ST_TO_ADDR
// if time < 0 then
49286: LD_VAR 0 8
49290: PUSH
49291: LD_INT 0
49293: LESS
49294: IFFALSE 49311
// time := time * - 1 ;
49296: LD_ADDR_VAR 0 8
49300: PUSH
49301: LD_VAR 0 8
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: MUL
49310: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
49311: LD_VAR 0 8
49315: PUSH
49316: LD_INT 35
49318: PPUSH
49319: LD_INT 875
49321: PPUSH
49322: CALL_OW 12
49326: PLUS
49327: PPUSH
49328: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49332: LD_INT 1
49334: PPUSH
49335: LD_INT 5
49337: PPUSH
49338: CALL_OW 12
49342: PPUSH
49343: LD_VAR 0 1
49347: PPUSH
49348: LD_INT 1
49350: PPUSH
49351: CALL_OW 55
// end ;
49355: GO 49168
// end ;
49357: LD_VAR 0 5
49361: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49362: LD_INT 0
49364: PPUSH
49365: PPUSH
49366: PPUSH
49367: PPUSH
49368: PPUSH
49369: PPUSH
49370: PPUSH
49371: PPUSH
// if not turrets or not factories then
49372: LD_VAR 0 1
49376: NOT
49377: IFTRUE 49386
49379: PUSH
49380: LD_VAR 0 2
49384: NOT
49385: OR
49386: IFFALSE 49390
// exit ;
49388: GO 49697
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49390: LD_ADDR_VAR 0 10
49394: PUSH
49395: LD_INT 5
49397: PUSH
49398: LD_INT 6
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: LD_INT 4
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 3
49417: PUSH
49418: LD_INT 5
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 24
49432: PUSH
49433: LD_INT 25
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 23
49442: PUSH
49443: LD_INT 27
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 42
49456: PUSH
49457: LD_INT 43
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 44
49466: PUSH
49467: LD_INT 46
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 45
49476: PUSH
49477: LD_INT 47
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: LIST
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: LIST
49493: ST_TO_ADDR
// result := [ ] ;
49494: LD_ADDR_VAR 0 3
49498: PUSH
49499: EMPTY
49500: ST_TO_ADDR
// for i in turrets do
49501: LD_ADDR_VAR 0 4
49505: PUSH
49506: LD_VAR 0 1
49510: PUSH
49511: FOR_IN
49512: IFFALSE 49695
// begin nat := GetNation ( i ) ;
49514: LD_ADDR_VAR 0 7
49518: PUSH
49519: LD_VAR 0 4
49523: PPUSH
49524: CALL_OW 248
49528: ST_TO_ADDR
// weapon := 0 ;
49529: LD_ADDR_VAR 0 8
49533: PUSH
49534: LD_INT 0
49536: ST_TO_ADDR
// if not nat then
49537: LD_VAR 0 7
49541: NOT
49542: IFFALSE 49546
// continue ;
49544: GO 49511
// for j in list [ nat ] do
49546: LD_ADDR_VAR 0 5
49550: PUSH
49551: LD_VAR 0 10
49555: PUSH
49556: LD_VAR 0 7
49560: ARRAY
49561: PUSH
49562: FOR_IN
49563: IFFALSE 49604
// if GetBWeapon ( i ) = j [ 1 ] then
49565: LD_VAR 0 4
49569: PPUSH
49570: CALL_OW 269
49574: PUSH
49575: LD_VAR 0 5
49579: PUSH
49580: LD_INT 1
49582: ARRAY
49583: EQUAL
49584: IFFALSE 49602
// begin weapon := j [ 2 ] ;
49586: LD_ADDR_VAR 0 8
49590: PUSH
49591: LD_VAR 0 5
49595: PUSH
49596: LD_INT 2
49598: ARRAY
49599: ST_TO_ADDR
// break ;
49600: GO 49604
// end ;
49602: GO 49562
49604: POP
49605: POP
// if not weapon then
49606: LD_VAR 0 8
49610: NOT
49611: IFFALSE 49615
// continue ;
49613: GO 49511
// for k in factories do
49615: LD_ADDR_VAR 0 6
49619: PUSH
49620: LD_VAR 0 2
49624: PUSH
49625: FOR_IN
49626: IFFALSE 49691
// begin weapons := AvailableWeaponList ( k ) ;
49628: LD_ADDR_VAR 0 9
49632: PUSH
49633: LD_VAR 0 6
49637: PPUSH
49638: CALL_OW 478
49642: ST_TO_ADDR
// if not weapons then
49643: LD_VAR 0 9
49647: NOT
49648: IFFALSE 49652
// continue ;
49650: GO 49625
// if weapon in weapons then
49652: LD_VAR 0 8
49656: PUSH
49657: LD_VAR 0 9
49661: IN
49662: IFFALSE 49689
// begin result := [ i , weapon ] ;
49664: LD_ADDR_VAR 0 3
49668: PUSH
49669: LD_VAR 0 4
49673: PUSH
49674: LD_VAR 0 8
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: ST_TO_ADDR
// exit ;
49683: POP
49684: POP
49685: POP
49686: POP
49687: GO 49697
// end ; end ;
49689: GO 49625
49691: POP
49692: POP
// end ;
49693: GO 49511
49695: POP
49696: POP
// end ;
49697: LD_VAR 0 3
49701: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49702: LD_INT 0
49704: PPUSH
// if not side or side > 8 then
49705: LD_VAR 0 3
49709: NOT
49710: IFTRUE 49722
49712: PUSH
49713: LD_VAR 0 3
49717: PUSH
49718: LD_INT 8
49720: GREATER
49721: OR
49722: IFFALSE 49726
// exit ;
49724: GO 49785
// if not range then
49726: LD_VAR 0 4
49730: NOT
49731: IFFALSE 49742
// range := - 12 ;
49733: LD_ADDR_VAR 0 4
49737: PUSH
49738: LD_INT 12
49740: NEG
49741: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49742: LD_VAR 0 1
49746: PPUSH
49747: LD_VAR 0 2
49751: PPUSH
49752: LD_VAR 0 3
49756: PPUSH
49757: LD_VAR 0 4
49761: PPUSH
49762: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49766: LD_VAR 0 1
49770: PPUSH
49771: LD_VAR 0 2
49775: PPUSH
49776: LD_VAR 0 3
49780: PPUSH
49781: CALL_OW 331
// end ;
49785: LD_VAR 0 5
49789: RET
// export function Video ( mode ) ; begin
49790: LD_INT 0
49792: PPUSH
// ingame_video = mode ;
49793: LD_ADDR_OWVAR 52
49797: PUSH
49798: LD_VAR 0 1
49802: ST_TO_ADDR
// interface_hidden = mode ;
49803: LD_ADDR_OWVAR 54
49807: PUSH
49808: LD_VAR 0 1
49812: ST_TO_ADDR
// end ;
49813: LD_VAR 0 2
49817: RET
// export function Join ( array , element ) ; begin
49818: LD_INT 0
49820: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49821: LD_ADDR_VAR 0 3
49825: PUSH
49826: LD_VAR 0 1
49830: PPUSH
49831: LD_VAR 0 1
49835: PUSH
49836: LD_INT 1
49838: PLUS
49839: PPUSH
49840: LD_VAR 0 2
49844: PPUSH
49845: CALL_OW 1
49849: ST_TO_ADDR
// end ;
49850: LD_VAR 0 3
49854: RET
// export function JoinUnion ( array , element ) ; begin
49855: LD_INT 0
49857: PPUSH
// result := array union element ;
49858: LD_ADDR_VAR 0 3
49862: PUSH
49863: LD_VAR 0 1
49867: PUSH
49868: LD_VAR 0 2
49872: UNION
49873: ST_TO_ADDR
// end ;
49874: LD_VAR 0 3
49878: RET
// export function GetBehemoths ( side ) ; begin
49879: LD_INT 0
49881: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
49882: LD_ADDR_VAR 0 2
49886: PUSH
49887: LD_INT 22
49889: PUSH
49890: LD_VAR 0 1
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 31
49901: PUSH
49902: LD_INT 25
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PPUSH
49913: CALL_OW 69
49917: ST_TO_ADDR
// end ;
49918: LD_VAR 0 2
49922: RET
// export function Shuffle ( array ) ; var i , index ; begin
49923: LD_INT 0
49925: PPUSH
49926: PPUSH
49927: PPUSH
// result := [ ] ;
49928: LD_ADDR_VAR 0 2
49932: PUSH
49933: EMPTY
49934: ST_TO_ADDR
// if not array then
49935: LD_VAR 0 1
49939: NOT
49940: IFFALSE 49944
// exit ;
49942: GO 50043
// Randomize ;
49944: CALL_OW 10
// for i = array downto 1 do
49948: LD_ADDR_VAR 0 3
49952: PUSH
49953: DOUBLE
49954: LD_VAR 0 1
49958: INC
49959: ST_TO_ADDR
49960: LD_INT 1
49962: PUSH
49963: FOR_DOWNTO
49964: IFFALSE 50041
// begin index := rand ( 1 , array ) ;
49966: LD_ADDR_VAR 0 4
49970: PUSH
49971: LD_INT 1
49973: PPUSH
49974: LD_VAR 0 1
49978: PPUSH
49979: CALL_OW 12
49983: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49984: LD_ADDR_VAR 0 2
49988: PUSH
49989: LD_VAR 0 2
49993: PPUSH
49994: LD_VAR 0 2
49998: PUSH
49999: LD_INT 1
50001: PLUS
50002: PPUSH
50003: LD_VAR 0 1
50007: PUSH
50008: LD_VAR 0 4
50012: ARRAY
50013: PPUSH
50014: CALL_OW 2
50018: ST_TO_ADDR
// array := Delete ( array , index ) ;
50019: LD_ADDR_VAR 0 1
50023: PUSH
50024: LD_VAR 0 1
50028: PPUSH
50029: LD_VAR 0 4
50033: PPUSH
50034: CALL_OW 3
50038: ST_TO_ADDR
// end ;
50039: GO 49963
50041: POP
50042: POP
// end ;
50043: LD_VAR 0 2
50047: RET
// export function GetBaseMaterials ( base ) ; begin
50048: LD_INT 0
50050: PPUSH
// result := [ 0 , 0 , 0 ] ;
50051: LD_ADDR_VAR 0 2
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: LIST
50069: ST_TO_ADDR
// if not base then
50070: LD_VAR 0 1
50074: NOT
50075: IFFALSE 50079
// exit ;
50077: GO 50128
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
50079: LD_ADDR_VAR 0 2
50083: PUSH
50084: LD_VAR 0 1
50088: PPUSH
50089: LD_INT 1
50091: PPUSH
50092: CALL_OW 275
50096: PUSH
50097: LD_VAR 0 1
50101: PPUSH
50102: LD_INT 2
50104: PPUSH
50105: CALL_OW 275
50109: PUSH
50110: LD_VAR 0 1
50114: PPUSH
50115: LD_INT 3
50117: PPUSH
50118: CALL_OW 275
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: LIST
50127: ST_TO_ADDR
// end ;
50128: LD_VAR 0 2
50132: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
50133: LD_INT 0
50135: PPUSH
50136: PPUSH
// result := array ;
50137: LD_ADDR_VAR 0 3
50141: PUSH
50142: LD_VAR 0 1
50146: ST_TO_ADDR
// if size >= result then
50147: LD_VAR 0 2
50151: PUSH
50152: LD_VAR 0 3
50156: GREATEREQUAL
50157: IFFALSE 50161
// exit ;
50159: GO 50211
// if size then
50161: LD_VAR 0 2
50165: IFFALSE 50211
// for i := array downto size do
50167: LD_ADDR_VAR 0 4
50171: PUSH
50172: DOUBLE
50173: LD_VAR 0 1
50177: INC
50178: ST_TO_ADDR
50179: LD_VAR 0 2
50183: PUSH
50184: FOR_DOWNTO
50185: IFFALSE 50209
// result := Delete ( result , result ) ;
50187: LD_ADDR_VAR 0 3
50191: PUSH
50192: LD_VAR 0 3
50196: PPUSH
50197: LD_VAR 0 3
50201: PPUSH
50202: CALL_OW 3
50206: ST_TO_ADDR
50207: GO 50184
50209: POP
50210: POP
// end ;
50211: LD_VAR 0 3
50215: RET
// export function ComExit ( unit ) ; var tmp ; begin
50216: LD_INT 0
50218: PPUSH
50219: PPUSH
// if not IsInUnit ( unit ) then
50220: LD_VAR 0 1
50224: PPUSH
50225: CALL_OW 310
50229: NOT
50230: IFFALSE 50234
// exit ;
50232: GO 50294
// tmp := IsInUnit ( unit ) ;
50234: LD_ADDR_VAR 0 3
50238: PUSH
50239: LD_VAR 0 1
50243: PPUSH
50244: CALL_OW 310
50248: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
50249: LD_VAR 0 3
50253: PPUSH
50254: CALL_OW 247
50258: PUSH
50259: LD_INT 2
50261: EQUAL
50262: IFFALSE 50275
// ComExitVehicle ( unit ) else
50264: LD_VAR 0 1
50268: PPUSH
50269: CALL_OW 121
50273: GO 50284
// ComExitBuilding ( unit ) ;
50275: LD_VAR 0 1
50279: PPUSH
50280: CALL_OW 122
// result := tmp ;
50284: LD_ADDR_VAR 0 2
50288: PUSH
50289: LD_VAR 0 3
50293: ST_TO_ADDR
// end ;
50294: LD_VAR 0 2
50298: RET
// export function ComExitAll ( units ) ; var i ; begin
50299: LD_INT 0
50301: PPUSH
50302: PPUSH
// if not units then
50303: LD_VAR 0 1
50307: NOT
50308: IFFALSE 50312
// exit ;
50310: GO 50338
// for i in units do
50312: LD_ADDR_VAR 0 3
50316: PUSH
50317: LD_VAR 0 1
50321: PUSH
50322: FOR_IN
50323: IFFALSE 50336
// ComExit ( i ) ;
50325: LD_VAR 0 3
50329: PPUSH
50330: CALL 50216 0 1
50334: GO 50322
50336: POP
50337: POP
// end ;
50338: LD_VAR 0 2
50342: RET
// export function ResetHc ; begin
50343: LD_INT 0
50345: PPUSH
// InitHc ;
50346: CALL_OW 19
// hc_importance := 0 ;
50350: LD_ADDR_OWVAR 32
50354: PUSH
50355: LD_INT 0
50357: ST_TO_ADDR
// end ;
50358: LD_VAR 0 1
50362: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50363: LD_INT 0
50365: PPUSH
50366: PPUSH
50367: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50368: LD_ADDR_VAR 0 6
50372: PUSH
50373: LD_VAR 0 1
50377: PUSH
50378: LD_VAR 0 3
50382: PLUS
50383: PUSH
50384: LD_INT 2
50386: DIV
50387: ST_TO_ADDR
// if _x < 0 then
50388: LD_VAR 0 6
50392: PUSH
50393: LD_INT 0
50395: LESS
50396: IFFALSE 50413
// _x := _x * - 1 ;
50398: LD_ADDR_VAR 0 6
50402: PUSH
50403: LD_VAR 0 6
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: MUL
50412: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50413: LD_ADDR_VAR 0 7
50417: PUSH
50418: LD_VAR 0 2
50422: PUSH
50423: LD_VAR 0 4
50427: PLUS
50428: PUSH
50429: LD_INT 2
50431: DIV
50432: ST_TO_ADDR
// if _y < 0 then
50433: LD_VAR 0 7
50437: PUSH
50438: LD_INT 0
50440: LESS
50441: IFFALSE 50458
// _y := _y * - 1 ;
50443: LD_ADDR_VAR 0 7
50447: PUSH
50448: LD_VAR 0 7
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: MUL
50457: ST_TO_ADDR
// result := [ _x , _y ] ;
50458: LD_ADDR_VAR 0 5
50462: PUSH
50463: LD_VAR 0 6
50467: PUSH
50468: LD_VAR 0 7
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: ST_TO_ADDR
// end ;
50477: LD_VAR 0 5
50481: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50482: LD_INT 0
50484: PPUSH
50485: PPUSH
50486: PPUSH
50487: PPUSH
// task := GetTaskList ( unit ) ;
50488: LD_ADDR_VAR 0 7
50492: PUSH
50493: LD_VAR 0 1
50497: PPUSH
50498: CALL_OW 437
50502: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50503: LD_VAR 0 7
50507: NOT
50508: IFFALSE 50527
50510: PUSH
50511: LD_VAR 0 1
50515: PPUSH
50516: LD_VAR 0 2
50520: PPUSH
50521: CALL_OW 308
50525: NOT
50526: AND
50527: IFFALSE 50531
// exit ;
50529: GO 50649
// if IsInArea ( unit , area ) then
50531: LD_VAR 0 1
50535: PPUSH
50536: LD_VAR 0 2
50540: PPUSH
50541: CALL_OW 308
50545: IFFALSE 50563
// begin ComMoveToArea ( unit , goAway ) ;
50547: LD_VAR 0 1
50551: PPUSH
50552: LD_VAR 0 3
50556: PPUSH
50557: CALL_OW 113
// exit ;
50561: GO 50649
// end ; if task [ 1 ] [ 1 ] <> M then
50563: LD_VAR 0 7
50567: PUSH
50568: LD_INT 1
50570: ARRAY
50571: PUSH
50572: LD_INT 1
50574: ARRAY
50575: PUSH
50576: LD_STRING M
50578: NONEQUAL
50579: IFFALSE 50583
// exit ;
50581: GO 50649
// x := task [ 1 ] [ 2 ] ;
50583: LD_ADDR_VAR 0 5
50587: PUSH
50588: LD_VAR 0 7
50592: PUSH
50593: LD_INT 1
50595: ARRAY
50596: PUSH
50597: LD_INT 2
50599: ARRAY
50600: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50601: LD_ADDR_VAR 0 6
50605: PUSH
50606: LD_VAR 0 7
50610: PUSH
50611: LD_INT 1
50613: ARRAY
50614: PUSH
50615: LD_INT 3
50617: ARRAY
50618: ST_TO_ADDR
// if InArea ( x , y , area ) then
50619: LD_VAR 0 5
50623: PPUSH
50624: LD_VAR 0 6
50628: PPUSH
50629: LD_VAR 0 2
50633: PPUSH
50634: CALL_OW 309
50638: IFFALSE 50649
// ComStop ( unit ) ;
50640: LD_VAR 0 1
50644: PPUSH
50645: CALL_OW 141
// end ;
50649: LD_VAR 0 4
50653: RET
// export function Abs ( value ) ; begin
50654: LD_INT 0
50656: PPUSH
// result := value ;
50657: LD_ADDR_VAR 0 2
50661: PUSH
50662: LD_VAR 0 1
50666: ST_TO_ADDR
// if value < 0 then
50667: LD_VAR 0 1
50671: PUSH
50672: LD_INT 0
50674: LESS
50675: IFFALSE 50692
// result := value * - 1 ;
50677: LD_ADDR_VAR 0 2
50681: PUSH
50682: LD_VAR 0 1
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: MUL
50691: ST_TO_ADDR
// end ;
50692: LD_VAR 0 2
50696: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50697: LD_INT 0
50699: PPUSH
50700: PPUSH
50701: PPUSH
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
50706: PPUSH
// if not unit or not building then
50707: LD_VAR 0 1
50711: NOT
50712: IFTRUE 50721
50714: PUSH
50715: LD_VAR 0 2
50719: NOT
50720: OR
50721: IFFALSE 50725
// exit ;
50723: GO 50953
// x := GetX ( building ) ;
50725: LD_ADDR_VAR 0 4
50729: PUSH
50730: LD_VAR 0 2
50734: PPUSH
50735: CALL_OW 250
50739: ST_TO_ADDR
// y := GetY ( building ) ;
50740: LD_ADDR_VAR 0 6
50744: PUSH
50745: LD_VAR 0 2
50749: PPUSH
50750: CALL_OW 251
50754: ST_TO_ADDR
// d := GetDir ( building ) ;
50755: LD_ADDR_VAR 0 8
50759: PUSH
50760: LD_VAR 0 2
50764: PPUSH
50765: CALL_OW 254
50769: ST_TO_ADDR
// r := 4 ;
50770: LD_ADDR_VAR 0 9
50774: PUSH
50775: LD_INT 4
50777: ST_TO_ADDR
// for i := 1 to 5 do
50778: LD_ADDR_VAR 0 10
50782: PUSH
50783: DOUBLE
50784: LD_INT 1
50786: DEC
50787: ST_TO_ADDR
50788: LD_INT 5
50790: PUSH
50791: FOR_TO
50792: IFFALSE 50951
// begin _x := ShiftX ( x , d , r + i ) ;
50794: LD_ADDR_VAR 0 5
50798: PUSH
50799: LD_VAR 0 4
50803: PPUSH
50804: LD_VAR 0 8
50808: PPUSH
50809: LD_VAR 0 9
50813: PUSH
50814: LD_VAR 0 10
50818: PLUS
50819: PPUSH
50820: CALL_OW 272
50824: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50825: LD_ADDR_VAR 0 7
50829: PUSH
50830: LD_VAR 0 6
50834: PPUSH
50835: LD_VAR 0 8
50839: PPUSH
50840: LD_VAR 0 9
50844: PUSH
50845: LD_VAR 0 10
50849: PLUS
50850: PPUSH
50851: CALL_OW 273
50855: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50856: LD_VAR 0 5
50860: PPUSH
50861: LD_VAR 0 7
50865: PPUSH
50866: CALL_OW 488
50870: IFFALSE 50905
50872: PUSH
50873: LD_VAR 0 5
50877: PPUSH
50878: LD_VAR 0 7
50882: PPUSH
50883: CALL_OW 428
50887: PPUSH
50888: CALL_OW 247
50892: PUSH
50893: LD_INT 3
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: IN
50903: NOT
50904: AND
50905: IFFALSE 50949
// begin ComMoveXY ( unit , _x , _y ) ;
50907: LD_VAR 0 1
50911: PPUSH
50912: LD_VAR 0 5
50916: PPUSH
50917: LD_VAR 0 7
50921: PPUSH
50922: CALL_OW 111
// result := [ _x , _y ] ;
50926: LD_ADDR_VAR 0 3
50930: PUSH
50931: LD_VAR 0 5
50935: PUSH
50936: LD_VAR 0 7
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: ST_TO_ADDR
// exit ;
50945: POP
50946: POP
50947: GO 50953
// end ; end ;
50949: GO 50791
50951: POP
50952: POP
// end ;
50953: LD_VAR 0 3
50957: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50958: LD_INT 0
50960: PPUSH
50961: PPUSH
50962: PPUSH
// result := 0 ;
50963: LD_ADDR_VAR 0 3
50967: PUSH
50968: LD_INT 0
50970: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50971: LD_VAR 0 1
50975: PUSH
50976: LD_INT 0
50978: LESS
50979: IFTRUE 50991
50981: PUSH
50982: LD_VAR 0 1
50986: PUSH
50987: LD_INT 8
50989: GREATER
50990: OR
50991: IFTRUE 51003
50993: PUSH
50994: LD_VAR 0 2
50998: PUSH
50999: LD_INT 0
51001: LESS
51002: OR
51003: IFTRUE 51015
51005: PUSH
51006: LD_VAR 0 2
51010: PUSH
51011: LD_INT 8
51013: GREATER
51014: OR
51015: IFFALSE 51019
// exit ;
51017: GO 51094
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
51019: LD_ADDR_VAR 0 4
51023: PUSH
51024: LD_INT 22
51026: PUSH
51027: LD_VAR 0 2
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PPUSH
51036: CALL_OW 69
51040: PUSH
51041: FOR_IN
51042: IFFALSE 51092
// begin un := UnitShoot ( i ) ;
51044: LD_ADDR_VAR 0 5
51048: PUSH
51049: LD_VAR 0 4
51053: PPUSH
51054: CALL_OW 504
51058: ST_TO_ADDR
// if GetSide ( un ) = side1 then
51059: LD_VAR 0 5
51063: PPUSH
51064: CALL_OW 255
51068: PUSH
51069: LD_VAR 0 1
51073: EQUAL
51074: IFFALSE 51090
// begin result := un ;
51076: LD_ADDR_VAR 0 3
51080: PUSH
51081: LD_VAR 0 5
51085: ST_TO_ADDR
// exit ;
51086: POP
51087: POP
51088: GO 51094
// end ; end ;
51090: GO 51041
51092: POP
51093: POP
// end ;
51094: LD_VAR 0 3
51098: RET
// export function GetCargoBay ( units ) ; begin
51099: LD_INT 0
51101: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
51102: LD_ADDR_VAR 0 2
51106: PUSH
51107: LD_VAR 0 1
51111: PPUSH
51112: LD_INT 2
51114: PUSH
51115: LD_INT 34
51117: PUSH
51118: LD_INT 12
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 34
51127: PUSH
51128: LD_INT 51
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 34
51137: PUSH
51138: LD_INT 32
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 34
51147: PUSH
51148: LD_INT 89
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: PPUSH
51162: CALL_OW 72
51166: ST_TO_ADDR
// end ;
51167: LD_VAR 0 2
51171: RET
// export function Negate ( value ) ; begin
51172: LD_INT 0
51174: PPUSH
// result := not value ;
51175: LD_ADDR_VAR 0 2
51179: PUSH
51180: LD_VAR 0 1
51184: NOT
51185: ST_TO_ADDR
// end ;
51186: LD_VAR 0 2
51190: RET
// export function Inc ( value ) ; begin
51191: LD_INT 0
51193: PPUSH
// result := value + 1 ;
51194: LD_ADDR_VAR 0 2
51198: PUSH
51199: LD_VAR 0 1
51203: PUSH
51204: LD_INT 1
51206: PLUS
51207: ST_TO_ADDR
// end ;
51208: LD_VAR 0 2
51212: RET
// export function Dec ( value ) ; begin
51213: LD_INT 0
51215: PPUSH
// result := value - 1 ;
51216: LD_ADDR_VAR 0 2
51220: PUSH
51221: LD_VAR 0 1
51225: PUSH
51226: LD_INT 1
51228: MINUS
51229: ST_TO_ADDR
// end ;
51230: LD_VAR 0 2
51234: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
51235: LD_INT 0
51237: PPUSH
51238: PPUSH
51239: PPUSH
51240: PPUSH
51241: PPUSH
51242: PPUSH
51243: PPUSH
51244: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
51245: LD_VAR 0 1
51249: PPUSH
51250: LD_VAR 0 2
51254: PPUSH
51255: CALL_OW 488
51259: NOT
51260: IFTRUE 51279
51262: PUSH
51263: LD_VAR 0 3
51267: PPUSH
51268: LD_VAR 0 4
51272: PPUSH
51273: CALL_OW 488
51277: NOT
51278: OR
51279: IFFALSE 51292
// begin result := - 1 ;
51281: LD_ADDR_VAR 0 5
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: ST_TO_ADDR
// exit ;
51290: GO 51527
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
51292: LD_ADDR_VAR 0 12
51296: PUSH
51297: LD_VAR 0 1
51301: PPUSH
51302: LD_VAR 0 2
51306: PPUSH
51307: LD_VAR 0 3
51311: PPUSH
51312: LD_VAR 0 4
51316: PPUSH
51317: CALL 50363 0 4
51321: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
51322: LD_ADDR_VAR 0 11
51326: PUSH
51327: LD_VAR 0 1
51331: PPUSH
51332: LD_VAR 0 2
51336: PPUSH
51337: LD_VAR 0 12
51341: PUSH
51342: LD_INT 1
51344: ARRAY
51345: PPUSH
51346: LD_VAR 0 12
51350: PUSH
51351: LD_INT 2
51353: ARRAY
51354: PPUSH
51355: CALL_OW 298
51359: ST_TO_ADDR
// distance := 9999 ;
51360: LD_ADDR_VAR 0 10
51364: PUSH
51365: LD_INT 9999
51367: ST_TO_ADDR
// for i := 0 to 5 do
51368: LD_ADDR_VAR 0 6
51372: PUSH
51373: DOUBLE
51374: LD_INT 0
51376: DEC
51377: ST_TO_ADDR
51378: LD_INT 5
51380: PUSH
51381: FOR_TO
51382: IFFALSE 51525
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51384: LD_ADDR_VAR 0 7
51388: PUSH
51389: LD_VAR 0 1
51393: PPUSH
51394: LD_VAR 0 6
51398: PPUSH
51399: LD_VAR 0 11
51403: PPUSH
51404: CALL_OW 272
51408: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51409: LD_ADDR_VAR 0 8
51413: PUSH
51414: LD_VAR 0 2
51418: PPUSH
51419: LD_VAR 0 6
51423: PPUSH
51424: LD_VAR 0 11
51428: PPUSH
51429: CALL_OW 273
51433: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51434: LD_VAR 0 7
51438: PPUSH
51439: LD_VAR 0 8
51443: PPUSH
51444: CALL_OW 488
51448: NOT
51449: IFFALSE 51453
// continue ;
51451: GO 51381
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51453: LD_ADDR_VAR 0 9
51457: PUSH
51458: LD_VAR 0 12
51462: PUSH
51463: LD_INT 1
51465: ARRAY
51466: PPUSH
51467: LD_VAR 0 12
51471: PUSH
51472: LD_INT 2
51474: ARRAY
51475: PPUSH
51476: LD_VAR 0 7
51480: PPUSH
51481: LD_VAR 0 8
51485: PPUSH
51486: CALL_OW 298
51490: ST_TO_ADDR
// if tmp < distance then
51491: LD_VAR 0 9
51495: PUSH
51496: LD_VAR 0 10
51500: LESS
51501: IFFALSE 51523
// begin result := i ;
51503: LD_ADDR_VAR 0 5
51507: PUSH
51508: LD_VAR 0 6
51512: ST_TO_ADDR
// distance := tmp ;
51513: LD_ADDR_VAR 0 10
51517: PUSH
51518: LD_VAR 0 9
51522: ST_TO_ADDR
// end ; end ;
51523: GO 51381
51525: POP
51526: POP
// end ;
51527: LD_VAR 0 5
51531: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51532: LD_INT 0
51534: PPUSH
51535: PPUSH
// if not driver or not IsInUnit ( driver ) then
51536: LD_VAR 0 1
51540: NOT
51541: IFTRUE 51555
51543: PUSH
51544: LD_VAR 0 1
51548: PPUSH
51549: CALL_OW 310
51553: NOT
51554: OR
51555: IFFALSE 51559
// exit ;
51557: GO 51649
// vehicle := IsInUnit ( driver ) ;
51559: LD_ADDR_VAR 0 3
51563: PUSH
51564: LD_VAR 0 1
51568: PPUSH
51569: CALL_OW 310
51573: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51574: LD_VAR 0 1
51578: PPUSH
51579: LD_STRING \
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: PUSH
51609: LD_STRING E
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_VAR 0 3
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PPUSH
51645: CALL_OW 446
// end ;
51649: LD_VAR 0 2
51653: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51654: LD_INT 0
51656: PPUSH
51657: PPUSH
// if not driver or not IsInUnit ( driver ) then
51658: LD_VAR 0 1
51662: NOT
51663: IFTRUE 51677
51665: PUSH
51666: LD_VAR 0 1
51670: PPUSH
51671: CALL_OW 310
51675: NOT
51676: OR
51677: IFFALSE 51681
// exit ;
51679: GO 51771
// vehicle := IsInUnit ( driver ) ;
51681: LD_ADDR_VAR 0 3
51685: PUSH
51686: LD_VAR 0 1
51690: PPUSH
51691: CALL_OW 310
51695: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51696: LD_VAR 0 1
51700: PPUSH
51701: LD_STRING \
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: PUSH
51731: LD_STRING E
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_VAR 0 3
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PPUSH
51767: CALL_OW 447
// end ;
51771: LD_VAR 0 2
51775: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51776: LD_INT 0
51778: PPUSH
51779: PPUSH
51780: PPUSH
// tmp := [ ] ;
51781: LD_ADDR_VAR 0 5
51785: PUSH
51786: EMPTY
51787: ST_TO_ADDR
// for i in units do
51788: LD_ADDR_VAR 0 4
51792: PUSH
51793: LD_VAR 0 1
51797: PUSH
51798: FOR_IN
51799: IFFALSE 51837
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51801: LD_ADDR_VAR 0 5
51805: PUSH
51806: LD_VAR 0 5
51810: PPUSH
51811: LD_VAR 0 5
51815: PUSH
51816: LD_INT 1
51818: PLUS
51819: PPUSH
51820: LD_VAR 0 4
51824: PPUSH
51825: CALL_OW 256
51829: PPUSH
51830: CALL_OW 2
51834: ST_TO_ADDR
51835: GO 51798
51837: POP
51838: POP
// if not tmp then
51839: LD_VAR 0 5
51843: NOT
51844: IFFALSE 51848
// exit ;
51846: GO 51896
// if asc then
51848: LD_VAR 0 2
51852: IFFALSE 51876
// result := SortListByListAsc ( units , tmp ) else
51854: LD_ADDR_VAR 0 3
51858: PUSH
51859: LD_VAR 0 1
51863: PPUSH
51864: LD_VAR 0 5
51868: PPUSH
51869: CALL_OW 76
51873: ST_TO_ADDR
51874: GO 51896
// result := SortListByListDesc ( units , tmp ) ;
51876: LD_ADDR_VAR 0 3
51880: PUSH
51881: LD_VAR 0 1
51885: PPUSH
51886: LD_VAR 0 5
51890: PPUSH
51891: CALL_OW 77
51895: ST_TO_ADDR
// end ;
51896: LD_VAR 0 3
51900: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51901: LD_INT 0
51903: PPUSH
51904: PPUSH
// task := GetTaskList ( mech ) ;
51905: LD_ADDR_VAR 0 4
51909: PUSH
51910: LD_VAR 0 1
51914: PPUSH
51915: CALL_OW 437
51919: ST_TO_ADDR
// if not task then
51920: LD_VAR 0 4
51924: NOT
51925: IFFALSE 51929
// exit ;
51927: GO 51973
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51929: LD_ADDR_VAR 0 3
51933: PUSH
51934: LD_VAR 0 4
51938: PUSH
51939: LD_INT 1
51941: ARRAY
51942: PUSH
51943: LD_INT 1
51945: ARRAY
51946: PUSH
51947: LD_STRING r
51949: EQUAL
51950: IFFALSE 51972
51952: PUSH
51953: LD_VAR 0 4
51957: PUSH
51958: LD_INT 1
51960: ARRAY
51961: PUSH
51962: LD_INT 4
51964: ARRAY
51965: PUSH
51966: LD_VAR 0 2
51970: EQUAL
51971: AND
51972: ST_TO_ADDR
// end ;
51973: LD_VAR 0 3
51977: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51978: LD_INT 0
51980: PPUSH
// SetDir ( unit , d ) ;
51981: LD_VAR 0 1
51985: PPUSH
51986: LD_VAR 0 4
51990: PPUSH
51991: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51995: LD_ADDR_VAR 0 6
51999: PUSH
52000: LD_VAR 0 1
52004: PPUSH
52005: LD_VAR 0 2
52009: PPUSH
52010: LD_VAR 0 3
52014: PPUSH
52015: LD_VAR 0 5
52019: PPUSH
52020: CALL_OW 48
52024: ST_TO_ADDR
// end ;
52025: LD_VAR 0 6
52029: RET
// export function ToNaturalNumber ( number ) ; begin
52030: LD_INT 0
52032: PPUSH
// result := number div 1 ;
52033: LD_ADDR_VAR 0 2
52037: PUSH
52038: LD_VAR 0 1
52042: PUSH
52043: LD_INT 1
52045: DIV
52046: ST_TO_ADDR
// if number < 0 then
52047: LD_VAR 0 1
52051: PUSH
52052: LD_INT 0
52054: LESS
52055: IFFALSE 52065
// result := 0 ;
52057: LD_ADDR_VAR 0 2
52061: PUSH
52062: LD_INT 0
52064: ST_TO_ADDR
// end ;
52065: LD_VAR 0 2
52069: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
52070: LD_INT 0
52072: PPUSH
52073: PPUSH
52074: PPUSH
// if not buildings then
52075: LD_VAR 0 1
52079: NOT
52080: IFFALSE 52084
// exit ;
52082: GO 52199
// tmp := [ ] ;
52084: LD_ADDR_VAR 0 5
52088: PUSH
52089: EMPTY
52090: ST_TO_ADDR
// for b in buildings do
52091: LD_ADDR_VAR 0 4
52095: PUSH
52096: LD_VAR 0 1
52100: PUSH
52101: FOR_IN
52102: IFFALSE 52140
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
52104: LD_ADDR_VAR 0 5
52108: PUSH
52109: LD_VAR 0 5
52113: PPUSH
52114: LD_VAR 0 5
52118: PUSH
52119: LD_INT 1
52121: PLUS
52122: PPUSH
52123: LD_VAR 0 4
52127: PPUSH
52128: CALL_OW 266
52132: PPUSH
52133: CALL_OW 1
52137: ST_TO_ADDR
52138: GO 52101
52140: POP
52141: POP
// if not tmp then
52142: LD_VAR 0 5
52146: NOT
52147: IFFALSE 52151
// exit ;
52149: GO 52199
// if asc then
52151: LD_VAR 0 2
52155: IFFALSE 52179
// result := SortListByListAsc ( buildings , tmp ) else
52157: LD_ADDR_VAR 0 3
52161: PUSH
52162: LD_VAR 0 1
52166: PPUSH
52167: LD_VAR 0 5
52171: PPUSH
52172: CALL_OW 76
52176: ST_TO_ADDR
52177: GO 52199
// result := SortListByListDesc ( buildings , tmp ) ;
52179: LD_ADDR_VAR 0 3
52183: PUSH
52184: LD_VAR 0 1
52188: PPUSH
52189: LD_VAR 0 5
52193: PPUSH
52194: CALL_OW 77
52198: ST_TO_ADDR
// end ;
52199: LD_VAR 0 3
52203: RET
// export function SortByClass ( units , class ) ; var un ; begin
52204: LD_INT 0
52206: PPUSH
52207: PPUSH
// if not units or not class then
52208: LD_VAR 0 1
52212: NOT
52213: IFTRUE 52222
52215: PUSH
52216: LD_VAR 0 2
52220: NOT
52221: OR
52222: IFFALSE 52226
// exit ;
52224: GO 52321
// result := [ ] ;
52226: LD_ADDR_VAR 0 3
52230: PUSH
52231: EMPTY
52232: ST_TO_ADDR
// for un in units do
52233: LD_ADDR_VAR 0 4
52237: PUSH
52238: LD_VAR 0 1
52242: PUSH
52243: FOR_IN
52244: IFFALSE 52319
// if GetClass ( un ) = class then
52246: LD_VAR 0 4
52250: PPUSH
52251: CALL_OW 257
52255: PUSH
52256: LD_VAR 0 2
52260: EQUAL
52261: IFFALSE 52288
// result := Insert ( result , 1 , un ) else
52263: LD_ADDR_VAR 0 3
52267: PUSH
52268: LD_VAR 0 3
52272: PPUSH
52273: LD_INT 1
52275: PPUSH
52276: LD_VAR 0 4
52280: PPUSH
52281: CALL_OW 2
52285: ST_TO_ADDR
52286: GO 52317
// result := Replace ( result , result + 1 , un ) ;
52288: LD_ADDR_VAR 0 3
52292: PUSH
52293: LD_VAR 0 3
52297: PPUSH
52298: LD_VAR 0 3
52302: PUSH
52303: LD_INT 1
52305: PLUS
52306: PPUSH
52307: LD_VAR 0 4
52311: PPUSH
52312: CALL_OW 1
52316: ST_TO_ADDR
52317: GO 52243
52319: POP
52320: POP
// end ;
52321: LD_VAR 0 3
52325: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
52326: LD_INT 0
52328: PPUSH
52329: PPUSH
52330: PPUSH
52331: PPUSH
52332: PPUSH
52333: PPUSH
52334: PPUSH
// result := [ ] ;
52335: LD_ADDR_VAR 0 4
52339: PUSH
52340: EMPTY
52341: ST_TO_ADDR
// if x - r < 0 then
52342: LD_VAR 0 1
52346: PUSH
52347: LD_VAR 0 3
52351: MINUS
52352: PUSH
52353: LD_INT 0
52355: LESS
52356: IFFALSE 52368
// min_x := 0 else
52358: LD_ADDR_VAR 0 8
52362: PUSH
52363: LD_INT 0
52365: ST_TO_ADDR
52366: GO 52384
// min_x := x - r ;
52368: LD_ADDR_VAR 0 8
52372: PUSH
52373: LD_VAR 0 1
52377: PUSH
52378: LD_VAR 0 3
52382: MINUS
52383: ST_TO_ADDR
// if y - r < 0 then
52384: LD_VAR 0 2
52388: PUSH
52389: LD_VAR 0 3
52393: MINUS
52394: PUSH
52395: LD_INT 0
52397: LESS
52398: IFFALSE 52410
// min_y := 0 else
52400: LD_ADDR_VAR 0 7
52404: PUSH
52405: LD_INT 0
52407: ST_TO_ADDR
52408: GO 52426
// min_y := y - r ;
52410: LD_ADDR_VAR 0 7
52414: PUSH
52415: LD_VAR 0 2
52419: PUSH
52420: LD_VAR 0 3
52424: MINUS
52425: ST_TO_ADDR
// max_x := x + r ;
52426: LD_ADDR_VAR 0 9
52430: PUSH
52431: LD_VAR 0 1
52435: PUSH
52436: LD_VAR 0 3
52440: PLUS
52441: ST_TO_ADDR
// max_y := y + r ;
52442: LD_ADDR_VAR 0 10
52446: PUSH
52447: LD_VAR 0 2
52451: PUSH
52452: LD_VAR 0 3
52456: PLUS
52457: ST_TO_ADDR
// for _x = min_x to max_x do
52458: LD_ADDR_VAR 0 5
52462: PUSH
52463: DOUBLE
52464: LD_VAR 0 8
52468: DEC
52469: ST_TO_ADDR
52470: LD_VAR 0 9
52474: PUSH
52475: FOR_TO
52476: IFFALSE 52577
// for _y = min_y to max_y do
52478: LD_ADDR_VAR 0 6
52482: PUSH
52483: DOUBLE
52484: LD_VAR 0 7
52488: DEC
52489: ST_TO_ADDR
52490: LD_VAR 0 10
52494: PUSH
52495: FOR_TO
52496: IFFALSE 52573
// begin if not ValidHex ( _x , _y ) then
52498: LD_VAR 0 5
52502: PPUSH
52503: LD_VAR 0 6
52507: PPUSH
52508: CALL_OW 488
52512: NOT
52513: IFFALSE 52517
// continue ;
52515: GO 52495
// if GetResourceTypeXY ( _x , _y ) then
52517: LD_VAR 0 5
52521: PPUSH
52522: LD_VAR 0 6
52526: PPUSH
52527: CALL_OW 283
52531: IFFALSE 52571
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52533: LD_ADDR_VAR 0 4
52537: PUSH
52538: LD_VAR 0 4
52542: PPUSH
52543: LD_VAR 0 4
52547: PUSH
52548: LD_INT 1
52550: PLUS
52551: PPUSH
52552: LD_VAR 0 5
52556: PUSH
52557: LD_VAR 0 6
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PPUSH
52566: CALL_OW 1
52570: ST_TO_ADDR
// end ;
52571: GO 52495
52573: POP
52574: POP
52575: GO 52475
52577: POP
52578: POP
// end ;
52579: LD_VAR 0 4
52583: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52584: LD_INT 0
52586: PPUSH
52587: PPUSH
52588: PPUSH
52589: PPUSH
52590: PPUSH
52591: PPUSH
52592: PPUSH
52593: PPUSH
// if not units then
52594: LD_VAR 0 1
52598: NOT
52599: IFFALSE 52603
// exit ;
52601: GO 53135
// result := UnitFilter ( units , [ f_ok ] ) ;
52603: LD_ADDR_VAR 0 3
52607: PUSH
52608: LD_VAR 0 1
52612: PPUSH
52613: LD_INT 50
52615: PUSH
52616: EMPTY
52617: LIST
52618: PPUSH
52619: CALL_OW 72
52623: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52624: LD_ADDR_VAR 0 8
52628: PUSH
52629: LD_VAR 0 1
52633: PUSH
52634: LD_INT 1
52636: ARRAY
52637: PPUSH
52638: CALL_OW 255
52642: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52643: LD_ADDR_VAR 0 10
52647: PUSH
52648: LD_INT 29
52650: PUSH
52651: LD_INT 91
52653: PUSH
52654: LD_INT 49
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: LIST
52661: ST_TO_ADDR
// if not result then
52662: LD_VAR 0 3
52666: NOT
52667: IFFALSE 52671
// exit ;
52669: GO 53135
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52671: LD_ADDR_VAR 0 5
52675: PUSH
52676: LD_INT 81
52678: PUSH
52679: LD_VAR 0 8
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PPUSH
52688: CALL_OW 69
52692: ST_TO_ADDR
// for i in result do
52693: LD_ADDR_VAR 0 4
52697: PUSH
52698: LD_VAR 0 3
52702: PUSH
52703: FOR_IN
52704: IFFALSE 53133
// begin tag := GetTag ( i ) + 1 ;
52706: LD_ADDR_VAR 0 9
52710: PUSH
52711: LD_VAR 0 4
52715: PPUSH
52716: CALL_OW 110
52720: PUSH
52721: LD_INT 1
52723: PLUS
52724: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
52725: LD_ADDR_VAR 0 7
52729: PUSH
52730: LD_VAR 0 4
52734: PPUSH
52735: CALL_OW 250
52739: PPUSH
52740: LD_VAR 0 4
52744: PPUSH
52745: CALL_OW 251
52749: PPUSH
52750: LD_INT 4
52752: PPUSH
52753: CALL 52326 0 3
52757: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
52758: LD_VAR 0 4
52762: PPUSH
52763: CALL_OW 247
52767: PUSH
52768: LD_INT 2
52770: EQUAL
52771: IFFALSE 52783
52773: PUSH
52774: LD_VAR 0 7
52778: PUSH
52779: LD_INT 2
52781: GREATER
52782: AND
52783: IFFALSE 52803
52785: PUSH
52786: LD_VAR 0 4
52790: PPUSH
52791: CALL_OW 264
52795: PUSH
52796: LD_VAR 0 10
52800: IN
52801: NOT
52802: AND
52803: IFFALSE 52842
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52805: LD_VAR 0 4
52809: PPUSH
52810: LD_VAR 0 7
52814: PUSH
52815: LD_INT 1
52817: ARRAY
52818: PUSH
52819: LD_INT 1
52821: ARRAY
52822: PPUSH
52823: LD_VAR 0 7
52827: PUSH
52828: LD_INT 1
52830: ARRAY
52831: PUSH
52832: LD_INT 2
52834: ARRAY
52835: PPUSH
52836: CALL_OW 116
52840: GO 53131
// if path > tag then
52842: LD_VAR 0 2
52846: PUSH
52847: LD_VAR 0 9
52851: GREATER
52852: IFFALSE 53060
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
52854: LD_ADDR_VAR 0 6
52858: PUSH
52859: LD_VAR 0 5
52863: PPUSH
52864: LD_INT 91
52866: PUSH
52867: LD_VAR 0 4
52871: PUSH
52872: LD_INT 8
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: LIST
52879: PPUSH
52880: CALL_OW 72
52884: ST_TO_ADDR
// if nearEnemy then
52885: LD_VAR 0 6
52889: IFFALSE 52958
// begin if GetWeapon ( i ) = ru_time_lapser then
52891: LD_VAR 0 4
52895: PPUSH
52896: CALL_OW 264
52900: PUSH
52901: LD_INT 49
52903: EQUAL
52904: IFFALSE 52932
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52906: LD_VAR 0 4
52910: PPUSH
52911: LD_VAR 0 6
52915: PPUSH
52916: LD_VAR 0 4
52920: PPUSH
52921: CALL_OW 74
52925: PPUSH
52926: CALL_OW 112
52930: GO 52956
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52932: LD_VAR 0 4
52936: PPUSH
52937: LD_VAR 0 6
52941: PPUSH
52942: LD_VAR 0 4
52946: PPUSH
52947: CALL_OW 74
52951: PPUSH
52952: CALL 54216 0 2
// end else
52956: GO 53058
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52958: LD_VAR 0 4
52962: PPUSH
52963: LD_VAR 0 2
52967: PUSH
52968: LD_VAR 0 9
52972: ARRAY
52973: PUSH
52974: LD_INT 1
52976: ARRAY
52977: PPUSH
52978: LD_VAR 0 2
52982: PUSH
52983: LD_VAR 0 9
52987: ARRAY
52988: PUSH
52989: LD_INT 2
52991: ARRAY
52992: PPUSH
52993: CALL_OW 297
52997: PUSH
52998: LD_INT 6
53000: GREATER
53001: IFFALSE 53044
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
53003: LD_VAR 0 4
53007: PPUSH
53008: LD_VAR 0 2
53012: PUSH
53013: LD_VAR 0 9
53017: ARRAY
53018: PUSH
53019: LD_INT 1
53021: ARRAY
53022: PPUSH
53023: LD_VAR 0 2
53027: PUSH
53028: LD_VAR 0 9
53032: ARRAY
53033: PUSH
53034: LD_INT 2
53036: ARRAY
53037: PPUSH
53038: CALL_OW 114
53042: GO 53058
// SetTag ( i , tag ) ;
53044: LD_VAR 0 4
53048: PPUSH
53049: LD_VAR 0 9
53053: PPUSH
53054: CALL_OW 109
// end else
53058: GO 53131
// if enemy then
53060: LD_VAR 0 5
53064: IFFALSE 53131
// begin if GetWeapon ( i ) = ru_time_lapser then
53066: LD_VAR 0 4
53070: PPUSH
53071: CALL_OW 264
53075: PUSH
53076: LD_INT 49
53078: EQUAL
53079: IFFALSE 53107
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
53081: LD_VAR 0 4
53085: PPUSH
53086: LD_VAR 0 5
53090: PPUSH
53091: LD_VAR 0 4
53095: PPUSH
53096: CALL_OW 74
53100: PPUSH
53101: CALL_OW 112
53105: GO 53131
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
53107: LD_VAR 0 4
53111: PPUSH
53112: LD_VAR 0 5
53116: PPUSH
53117: LD_VAR 0 4
53121: PPUSH
53122: CALL_OW 74
53126: PPUSH
53127: CALL 54216 0 2
// end ; end ;
53131: GO 52703
53133: POP
53134: POP
// end ;
53135: LD_VAR 0 3
53139: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
53140: LD_INT 0
53142: PPUSH
53143: PPUSH
53144: PPUSH
// if not unit or IsInUnit ( unit ) then
53145: LD_VAR 0 1
53149: NOT
53150: IFTRUE 53163
53152: PUSH
53153: LD_VAR 0 1
53157: PPUSH
53158: CALL_OW 310
53162: OR
53163: IFFALSE 53167
// exit ;
53165: GO 53258
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
53167: LD_ADDR_VAR 0 4
53171: PUSH
53172: LD_VAR 0 1
53176: PPUSH
53177: CALL_OW 250
53181: PPUSH
53182: LD_VAR 0 2
53186: PPUSH
53187: LD_INT 1
53189: PPUSH
53190: CALL_OW 272
53194: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
53195: LD_ADDR_VAR 0 5
53199: PUSH
53200: LD_VAR 0 1
53204: PPUSH
53205: CALL_OW 251
53209: PPUSH
53210: LD_VAR 0 2
53214: PPUSH
53215: LD_INT 1
53217: PPUSH
53218: CALL_OW 273
53222: ST_TO_ADDR
// if ValidHex ( x , y ) then
53223: LD_VAR 0 4
53227: PPUSH
53228: LD_VAR 0 5
53232: PPUSH
53233: CALL_OW 488
53237: IFFALSE 53258
// ComTurnXY ( unit , x , y ) ;
53239: LD_VAR 0 1
53243: PPUSH
53244: LD_VAR 0 4
53248: PPUSH
53249: LD_VAR 0 5
53253: PPUSH
53254: CALL_OW 118
// end ;
53258: LD_VAR 0 3
53262: RET
// export function SeeUnits ( side , units ) ; var i ; begin
53263: LD_INT 0
53265: PPUSH
53266: PPUSH
// result := false ;
53267: LD_ADDR_VAR 0 3
53271: PUSH
53272: LD_INT 0
53274: ST_TO_ADDR
// if not units then
53275: LD_VAR 0 2
53279: NOT
53280: IFFALSE 53284
// exit ;
53282: GO 53329
// for i in units do
53284: LD_ADDR_VAR 0 4
53288: PUSH
53289: LD_VAR 0 2
53293: PUSH
53294: FOR_IN
53295: IFFALSE 53327
// if See ( side , i ) then
53297: LD_VAR 0 1
53301: PPUSH
53302: LD_VAR 0 4
53306: PPUSH
53307: CALL_OW 292
53311: IFFALSE 53325
// begin result := true ;
53313: LD_ADDR_VAR 0 3
53317: PUSH
53318: LD_INT 1
53320: ST_TO_ADDR
// exit ;
53321: POP
53322: POP
53323: GO 53329
// end ;
53325: GO 53294
53327: POP
53328: POP
// end ;
53329: LD_VAR 0 3
53333: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
53334: LD_INT 0
53336: PPUSH
53337: PPUSH
53338: PPUSH
53339: PPUSH
// if not unit or not points then
53340: LD_VAR 0 1
53344: NOT
53345: IFTRUE 53354
53347: PUSH
53348: LD_VAR 0 2
53352: NOT
53353: OR
53354: IFFALSE 53358
// exit ;
53356: GO 53448
// dist := 99999 ;
53358: LD_ADDR_VAR 0 5
53362: PUSH
53363: LD_INT 99999
53365: ST_TO_ADDR
// for i in points do
53366: LD_ADDR_VAR 0 4
53370: PUSH
53371: LD_VAR 0 2
53375: PUSH
53376: FOR_IN
53377: IFFALSE 53446
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53379: LD_ADDR_VAR 0 6
53383: PUSH
53384: LD_VAR 0 1
53388: PPUSH
53389: LD_VAR 0 4
53393: PUSH
53394: LD_INT 1
53396: ARRAY
53397: PPUSH
53398: LD_VAR 0 4
53402: PUSH
53403: LD_INT 2
53405: ARRAY
53406: PPUSH
53407: CALL_OW 297
53411: ST_TO_ADDR
// if tmpDist < dist then
53412: LD_VAR 0 6
53416: PUSH
53417: LD_VAR 0 5
53421: LESS
53422: IFFALSE 53444
// begin result := i ;
53424: LD_ADDR_VAR 0 3
53428: PUSH
53429: LD_VAR 0 4
53433: ST_TO_ADDR
// dist := tmpDist ;
53434: LD_ADDR_VAR 0 5
53438: PUSH
53439: LD_VAR 0 6
53443: ST_TO_ADDR
// end ; end ;
53444: GO 53376
53446: POP
53447: POP
// end ;
53448: LD_VAR 0 3
53452: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53453: LD_INT 0
53455: PPUSH
// uc_side := side ;
53456: LD_ADDR_OWVAR 20
53460: PUSH
53461: LD_VAR 0 1
53465: ST_TO_ADDR
// uc_nation := 3 ;
53466: LD_ADDR_OWVAR 21
53470: PUSH
53471: LD_INT 3
53473: ST_TO_ADDR
// vc_chassis := 25 ;
53474: LD_ADDR_OWVAR 37
53478: PUSH
53479: LD_INT 25
53481: ST_TO_ADDR
// vc_engine := engine_siberite ;
53482: LD_ADDR_OWVAR 39
53486: PUSH
53487: LD_INT 3
53489: ST_TO_ADDR
// vc_control := control_computer ;
53490: LD_ADDR_OWVAR 38
53494: PUSH
53495: LD_INT 3
53497: ST_TO_ADDR
// vc_weapon := 59 ;
53498: LD_ADDR_OWVAR 40
53502: PUSH
53503: LD_INT 59
53505: ST_TO_ADDR
// result := CreateVehicle ;
53506: LD_ADDR_VAR 0 5
53510: PUSH
53511: CALL_OW 45
53515: ST_TO_ADDR
// SetDir ( result , d ) ;
53516: LD_VAR 0 5
53520: PPUSH
53521: LD_VAR 0 4
53525: PPUSH
53526: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53530: LD_VAR 0 5
53534: PPUSH
53535: LD_VAR 0 2
53539: PPUSH
53540: LD_VAR 0 3
53544: PPUSH
53545: LD_INT 0
53547: PPUSH
53548: CALL_OW 48
// end ;
53552: LD_VAR 0 5
53556: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53557: LD_INT 0
53559: PPUSH
53560: PPUSH
53561: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53562: LD_ADDR_VAR 0 2
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53585: LD_VAR 0 1
53589: NOT
53590: IFTRUE 53623
53592: PUSH
53593: LD_VAR 0 1
53597: PPUSH
53598: CALL_OW 264
53602: PUSH
53603: LD_INT 12
53605: PUSH
53606: LD_INT 51
53608: PUSH
53609: LD_INT 32
53611: PUSH
53612: LD_INT 89
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: IN
53621: NOT
53622: OR
53623: IFFALSE 53627
// exit ;
53625: GO 53725
// for i := 1 to 3 do
53627: LD_ADDR_VAR 0 3
53631: PUSH
53632: DOUBLE
53633: LD_INT 1
53635: DEC
53636: ST_TO_ADDR
53637: LD_INT 3
53639: PUSH
53640: FOR_TO
53641: IFFALSE 53723
// begin tmp := GetCargo ( cargo , i ) ;
53643: LD_ADDR_VAR 0 4
53647: PUSH
53648: LD_VAR 0 1
53652: PPUSH
53653: LD_VAR 0 3
53657: PPUSH
53658: CALL_OW 289
53662: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53663: LD_ADDR_VAR 0 2
53667: PUSH
53668: LD_VAR 0 2
53672: PPUSH
53673: LD_VAR 0 3
53677: PPUSH
53678: LD_VAR 0 4
53682: PPUSH
53683: CALL_OW 1
53687: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53688: LD_ADDR_VAR 0 2
53692: PUSH
53693: LD_VAR 0 2
53697: PPUSH
53698: LD_INT 4
53700: PPUSH
53701: LD_VAR 0 2
53705: PUSH
53706: LD_INT 4
53708: ARRAY
53709: PUSH
53710: LD_VAR 0 4
53714: PLUS
53715: PPUSH
53716: CALL_OW 1
53720: ST_TO_ADDR
// end ;
53721: GO 53640
53723: POP
53724: POP
// end ;
53725: LD_VAR 0 2
53729: RET
// export function Length ( array ) ; begin
53730: LD_INT 0
53732: PPUSH
// result := array + 0 ;
53733: LD_ADDR_VAR 0 2
53737: PUSH
53738: LD_VAR 0 1
53742: PUSH
53743: LD_INT 0
53745: PLUS
53746: ST_TO_ADDR
// end ;
53747: LD_VAR 0 2
53751: RET
// export function PrepareArray ( array ) ; begin
53752: LD_INT 0
53754: PPUSH
// result := array diff 0 ;
53755: LD_ADDR_VAR 0 2
53759: PUSH
53760: LD_VAR 0 1
53764: PUSH
53765: LD_INT 0
53767: DIFF
53768: ST_TO_ADDR
// if not result [ 1 ] then
53769: LD_VAR 0 2
53773: PUSH
53774: LD_INT 1
53776: ARRAY
53777: NOT
53778: IFFALSE 53798
// result := Delete ( result , 1 ) ;
53780: LD_ADDR_VAR 0 2
53784: PUSH
53785: LD_VAR 0 2
53789: PPUSH
53790: LD_INT 1
53792: PPUSH
53793: CALL_OW 3
53797: ST_TO_ADDR
// end ;
53798: LD_VAR 0 2
53802: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
53803: LD_INT 0
53805: PPUSH
53806: PPUSH
53807: PPUSH
53808: PPUSH
// sibRocketRange := 25 ;
53809: LD_ADDR_VAR 0 6
53813: PUSH
53814: LD_INT 25
53816: ST_TO_ADDR
// result := false ;
53817: LD_ADDR_VAR 0 4
53821: PUSH
53822: LD_INT 0
53824: ST_TO_ADDR
// for i := 0 to 5 do
53825: LD_ADDR_VAR 0 5
53829: PUSH
53830: DOUBLE
53831: LD_INT 0
53833: DEC
53834: ST_TO_ADDR
53835: LD_INT 5
53837: PUSH
53838: FOR_TO
53839: IFFALSE 53906
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
53841: LD_VAR 0 1
53845: PPUSH
53846: LD_VAR 0 5
53850: PPUSH
53851: LD_VAR 0 6
53855: PPUSH
53856: CALL_OW 272
53860: PPUSH
53861: LD_VAR 0 2
53865: PPUSH
53866: LD_VAR 0 5
53870: PPUSH
53871: LD_VAR 0 6
53875: PPUSH
53876: CALL_OW 273
53880: PPUSH
53881: LD_VAR 0 3
53885: PPUSH
53886: CALL_OW 309
53890: IFFALSE 53904
// begin result := true ;
53892: LD_ADDR_VAR 0 4
53896: PUSH
53897: LD_INT 1
53899: ST_TO_ADDR
// exit ;
53900: POP
53901: POP
53902: GO 53908
// end ;
53904: GO 53838
53906: POP
53907: POP
// end ;
53908: LD_VAR 0 4
53912: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
53913: LD_INT 0
53915: PPUSH
53916: PPUSH
53917: PPUSH
// if btype = b_depot then
53918: LD_VAR 0 2
53922: PUSH
53923: LD_INT 0
53925: EQUAL
53926: IFFALSE 53938
// begin result := true ;
53928: LD_ADDR_VAR 0 3
53932: PUSH
53933: LD_INT 1
53935: ST_TO_ADDR
// exit ;
53936: GO 54058
// end ; pom := GetBase ( depot ) ;
53938: LD_ADDR_VAR 0 4
53942: PUSH
53943: LD_VAR 0 1
53947: PPUSH
53948: CALL_OW 274
53952: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53953: LD_ADDR_VAR 0 5
53957: PUSH
53958: LD_VAR 0 2
53962: PPUSH
53963: LD_VAR 0 1
53967: PPUSH
53968: CALL_OW 248
53972: PPUSH
53973: CALL_OW 450
53977: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53978: LD_ADDR_VAR 0 3
53982: PUSH
53983: LD_VAR 0 4
53987: PPUSH
53988: LD_INT 1
53990: PPUSH
53991: CALL_OW 275
53995: PUSH
53996: LD_VAR 0 5
54000: PUSH
54001: LD_INT 1
54003: ARRAY
54004: GREATEREQUAL
54005: IFFALSE 54031
54007: PUSH
54008: LD_VAR 0 4
54012: PPUSH
54013: LD_INT 2
54015: PPUSH
54016: CALL_OW 275
54020: PUSH
54021: LD_VAR 0 5
54025: PUSH
54026: LD_INT 2
54028: ARRAY
54029: GREATEREQUAL
54030: AND
54031: IFFALSE 54057
54033: PUSH
54034: LD_VAR 0 4
54038: PPUSH
54039: LD_INT 3
54041: PPUSH
54042: CALL_OW 275
54046: PUSH
54047: LD_VAR 0 5
54051: PUSH
54052: LD_INT 3
54054: ARRAY
54055: GREATEREQUAL
54056: AND
54057: ST_TO_ADDR
// end ;
54058: LD_VAR 0 3
54062: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
54063: LD_INT 0
54065: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
54066: LD_VAR 0 1
54070: PPUSH
54071: LD_VAR 0 2
54075: PPUSH
54076: LD_INT 0
54078: PPUSH
54079: LD_INT 0
54081: PPUSH
54082: LD_INT 1
54084: PPUSH
54085: LD_INT 0
54087: PPUSH
54088: CALL_OW 587
// end ;
54092: LD_VAR 0 3
54096: RET
// export function CenterOnNow ( unit ) ; begin
54097: LD_INT 0
54099: PPUSH
// result := IsInUnit ( unit ) ;
54100: LD_ADDR_VAR 0 2
54104: PUSH
54105: LD_VAR 0 1
54109: PPUSH
54110: CALL_OW 310
54114: ST_TO_ADDR
// if not result then
54115: LD_VAR 0 2
54119: NOT
54120: IFFALSE 54132
// result := unit ;
54122: LD_ADDR_VAR 0 2
54126: PUSH
54127: LD_VAR 0 1
54131: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
54132: LD_VAR 0 1
54136: PPUSH
54137: CALL_OW 87
// end ;
54141: LD_VAR 0 2
54145: RET
// export function ComMoveHex ( unit , hex ) ; begin
54146: LD_INT 0
54148: PPUSH
// if not hex then
54149: LD_VAR 0 2
54153: NOT
54154: IFFALSE 54158
// exit ;
54156: GO 54211
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
54158: LD_VAR 0 2
54162: PUSH
54163: LD_INT 1
54165: ARRAY
54166: PPUSH
54167: LD_VAR 0 2
54171: PUSH
54172: LD_INT 2
54174: ARRAY
54175: PPUSH
54176: CALL_OW 428
54180: IFFALSE 54184
// exit ;
54182: GO 54211
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
54184: LD_VAR 0 1
54188: PPUSH
54189: LD_VAR 0 2
54193: PUSH
54194: LD_INT 1
54196: ARRAY
54197: PPUSH
54198: LD_VAR 0 2
54202: PUSH
54203: LD_INT 2
54205: ARRAY
54206: PPUSH
54207: CALL_OW 111
// end ;
54211: LD_VAR 0 3
54215: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
54216: LD_INT 0
54218: PPUSH
54219: PPUSH
54220: PPUSH
// if not unit or not enemy then
54221: LD_VAR 0 1
54225: NOT
54226: IFTRUE 54235
54228: PUSH
54229: LD_VAR 0 2
54233: NOT
54234: OR
54235: IFFALSE 54239
// exit ;
54237: GO 54365
// x := GetX ( enemy ) ;
54239: LD_ADDR_VAR 0 4
54243: PUSH
54244: LD_VAR 0 2
54248: PPUSH
54249: CALL_OW 250
54253: ST_TO_ADDR
// y := GetY ( enemy ) ;
54254: LD_ADDR_VAR 0 5
54258: PUSH
54259: LD_VAR 0 2
54263: PPUSH
54264: CALL_OW 251
54268: ST_TO_ADDR
// if ValidHex ( x , y ) then
54269: LD_VAR 0 4
54273: PPUSH
54274: LD_VAR 0 5
54278: PPUSH
54279: CALL_OW 488
54283: IFFALSE 54365
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
54285: LD_VAR 0 2
54289: PPUSH
54290: CALL_OW 247
54294: PUSH
54295: LD_INT 3
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: IN
54305: IFTRUE 54328
54307: PUSH
54308: LD_VAR 0 1
54312: PPUSH
54313: CALL_OW 255
54317: PPUSH
54318: LD_VAR 0 2
54322: PPUSH
54323: CALL_OW 292
54327: OR
54328: IFFALSE 54346
// ComAttackUnit ( unit , enemy ) else
54330: LD_VAR 0 1
54334: PPUSH
54335: LD_VAR 0 2
54339: PPUSH
54340: CALL_OW 115
54344: GO 54365
// ComAgressiveMove ( unit , x , y ) ;
54346: LD_VAR 0 1
54350: PPUSH
54351: LD_VAR 0 4
54355: PPUSH
54356: LD_VAR 0 5
54360: PPUSH
54361: CALL_OW 114
// end ;
54365: LD_VAR 0 3
54369: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
54370: LD_INT 0
54372: PPUSH
54373: PPUSH
54374: PPUSH
// list := AreaToList ( area , 0 ) ;
54375: LD_ADDR_VAR 0 5
54379: PUSH
54380: LD_VAR 0 1
54384: PPUSH
54385: LD_INT 0
54387: PPUSH
54388: CALL_OW 517
54392: ST_TO_ADDR
// if not list then
54393: LD_VAR 0 5
54397: NOT
54398: IFFALSE 54402
// exit ;
54400: GO 54532
// if all then
54402: LD_VAR 0 2
54406: IFFALSE 54494
// begin for i := 1 to list [ 1 ] do
54408: LD_ADDR_VAR 0 4
54412: PUSH
54413: DOUBLE
54414: LD_INT 1
54416: DEC
54417: ST_TO_ADDR
54418: LD_VAR 0 5
54422: PUSH
54423: LD_INT 1
54425: ARRAY
54426: PUSH
54427: FOR_TO
54428: IFFALSE 54490
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54430: LD_ADDR_VAR 0 3
54434: PUSH
54435: LD_VAR 0 3
54439: PPUSH
54440: LD_VAR 0 3
54444: PUSH
54445: LD_INT 1
54447: PLUS
54448: PPUSH
54449: LD_VAR 0 5
54453: PUSH
54454: LD_INT 1
54456: ARRAY
54457: PUSH
54458: LD_VAR 0 4
54462: ARRAY
54463: PUSH
54464: LD_VAR 0 5
54468: PUSH
54469: LD_INT 2
54471: ARRAY
54472: PUSH
54473: LD_VAR 0 4
54477: ARRAY
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PPUSH
54483: CALL_OW 1
54487: ST_TO_ADDR
54488: GO 54427
54490: POP
54491: POP
// exit ;
54492: GO 54532
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
54494: LD_ADDR_VAR 0 3
54498: PUSH
54499: LD_VAR 0 5
54503: PUSH
54504: LD_INT 1
54506: ARRAY
54507: PUSH
54508: LD_INT 1
54510: ARRAY
54511: PUSH
54512: LD_VAR 0 5
54516: PUSH
54517: LD_INT 2
54519: ARRAY
54520: PUSH
54521: LD_INT 1
54523: ARRAY
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: EMPTY
54530: LIST
54531: ST_TO_ADDR
// end ;
54532: LD_VAR 0 3
54536: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
54537: LD_INT 0
54539: PPUSH
54540: PPUSH
// list := AreaToList ( area , 0 ) ;
54541: LD_ADDR_VAR 0 4
54545: PUSH
54546: LD_VAR 0 1
54550: PPUSH
54551: LD_INT 0
54553: PPUSH
54554: CALL_OW 517
54558: ST_TO_ADDR
// if not list then
54559: LD_VAR 0 4
54563: NOT
54564: IFFALSE 54568
// exit ;
54566: GO 54609
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
54568: LD_ADDR_VAR 0 3
54572: PUSH
54573: LD_VAR 0 4
54577: PUSH
54578: LD_INT 1
54580: ARRAY
54581: PUSH
54582: LD_INT 1
54584: ARRAY
54585: PUSH
54586: LD_VAR 0 4
54590: PUSH
54591: LD_INT 2
54593: ARRAY
54594: PUSH
54595: LD_INT 1
54597: ARRAY
54598: PUSH
54599: LD_VAR 0 2
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: LIST
54608: ST_TO_ADDR
// end ;
54609: LD_VAR 0 3
54613: RET
// export function First ( array ) ; begin
54614: LD_INT 0
54616: PPUSH
// if not array then
54617: LD_VAR 0 1
54621: NOT
54622: IFFALSE 54626
// exit ;
54624: GO 54640
// result := array [ 1 ] ;
54626: LD_ADDR_VAR 0 2
54630: PUSH
54631: LD_VAR 0 1
54635: PUSH
54636: LD_INT 1
54638: ARRAY
54639: ST_TO_ADDR
// end ;
54640: LD_VAR 0 2
54644: RET
// export function Last ( array ) ; begin
54645: LD_INT 0
54647: PPUSH
// if not array then
54648: LD_VAR 0 1
54652: NOT
54653: IFFALSE 54657
// exit ;
54655: GO 54673
// result := array [ array ] ;
54657: LD_ADDR_VAR 0 2
54661: PUSH
54662: LD_VAR 0 1
54666: PUSH
54667: LD_VAR 0 1
54671: ARRAY
54672: ST_TO_ADDR
// end ;
54673: LD_VAR 0 2
54677: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
54678: LD_INT 0
54680: PPUSH
54681: PPUSH
// result := [ ] ;
54682: LD_ADDR_VAR 0 5
54686: PUSH
54687: EMPTY
54688: ST_TO_ADDR
// if not array then
54689: LD_VAR 0 1
54693: NOT
54694: IFFALSE 54698
// exit ;
54696: GO 54810
// for i := 1 to array do
54698: LD_ADDR_VAR 0 6
54702: PUSH
54703: DOUBLE
54704: LD_INT 1
54706: DEC
54707: ST_TO_ADDR
54708: LD_VAR 0 1
54712: PUSH
54713: FOR_TO
54714: IFFALSE 54808
// if array [ i ] [ index ] = value then
54716: LD_VAR 0 1
54720: PUSH
54721: LD_VAR 0 6
54725: ARRAY
54726: PUSH
54727: LD_VAR 0 2
54731: ARRAY
54732: PUSH
54733: LD_VAR 0 3
54737: EQUAL
54738: IFFALSE 54806
// begin if indexColumn then
54740: LD_VAR 0 4
54744: IFFALSE 54780
// result := Join ( result , array [ i ] [ indexColumn ] ) else
54746: LD_ADDR_VAR 0 5
54750: PUSH
54751: LD_VAR 0 5
54755: PPUSH
54756: LD_VAR 0 1
54760: PUSH
54761: LD_VAR 0 6
54765: ARRAY
54766: PUSH
54767: LD_VAR 0 4
54771: ARRAY
54772: PPUSH
54773: CALL 49818 0 2
54777: ST_TO_ADDR
54778: GO 54806
// result := Join ( result , array [ i ] ) ;
54780: LD_ADDR_VAR 0 5
54784: PUSH
54785: LD_VAR 0 5
54789: PPUSH
54790: LD_VAR 0 1
54794: PUSH
54795: LD_VAR 0 6
54799: ARRAY
54800: PPUSH
54801: CALL 49818 0 2
54805: ST_TO_ADDR
// end ;
54806: GO 54713
54808: POP
54809: POP
// end ;
54810: LD_VAR 0 5
54814: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
54815: LD_INT 0
54817: PPUSH
// if not vehicles or not parkingPoint then
54818: LD_VAR 0 1
54822: NOT
54823: IFTRUE 54832
54825: PUSH
54826: LD_VAR 0 2
54830: NOT
54831: OR
54832: IFFALSE 54836
// exit ;
54834: GO 54934
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
54836: LD_ADDR_VAR 0 1
54840: PUSH
54841: LD_VAR 0 1
54845: PPUSH
54846: LD_INT 50
54848: PUSH
54849: EMPTY
54850: LIST
54851: PUSH
54852: LD_INT 3
54854: PUSH
54855: LD_INT 92
54857: PUSH
54858: LD_VAR 0 2
54862: PUSH
54863: LD_INT 1
54865: ARRAY
54866: PUSH
54867: LD_VAR 0 2
54871: PUSH
54872: LD_INT 2
54874: ARRAY
54875: PUSH
54876: LD_INT 8
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PPUSH
54893: CALL_OW 72
54897: ST_TO_ADDR
// if not vehicles then
54898: LD_VAR 0 1
54902: NOT
54903: IFFALSE 54907
// exit ;
54905: GO 54934
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
54907: LD_VAR 0 1
54911: PPUSH
54912: LD_VAR 0 2
54916: PUSH
54917: LD_INT 1
54919: ARRAY
54920: PPUSH
54921: LD_VAR 0 2
54925: PUSH
54926: LD_INT 2
54928: ARRAY
54929: PPUSH
54930: CALL_OW 111
// end ;
54934: LD_VAR 0 3
54938: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
54939: LD_INT 0
54941: PPUSH
54942: PPUSH
54943: PPUSH
// if not side or not area then
54944: LD_VAR 0 1
54948: NOT
54949: IFTRUE 54958
54951: PUSH
54952: LD_VAR 0 2
54956: NOT
54957: OR
54958: IFFALSE 54962
// exit ;
54960: GO 55081
// tmp := AreaToList ( area , 0 ) ;
54962: LD_ADDR_VAR 0 5
54966: PUSH
54967: LD_VAR 0 2
54971: PPUSH
54972: LD_INT 0
54974: PPUSH
54975: CALL_OW 517
54979: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54980: LD_ADDR_VAR 0 4
54984: PUSH
54985: DOUBLE
54986: LD_INT 1
54988: DEC
54989: ST_TO_ADDR
54990: LD_VAR 0 5
54994: PUSH
54995: LD_INT 1
54997: ARRAY
54998: PUSH
54999: FOR_TO
55000: IFFALSE 55079
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
55002: LD_VAR 0 5
55006: PUSH
55007: LD_INT 1
55009: ARRAY
55010: PUSH
55011: LD_VAR 0 4
55015: ARRAY
55016: PPUSH
55017: LD_VAR 0 5
55021: PUSH
55022: LD_INT 2
55024: ARRAY
55025: PUSH
55026: LD_VAR 0 4
55030: ARRAY
55031: PPUSH
55032: CALL_OW 351
55036: IFFALSE 55077
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
55038: LD_VAR 0 5
55042: PUSH
55043: LD_INT 1
55045: ARRAY
55046: PUSH
55047: LD_VAR 0 4
55051: ARRAY
55052: PPUSH
55053: LD_VAR 0 5
55057: PUSH
55058: LD_INT 2
55060: ARRAY
55061: PUSH
55062: LD_VAR 0 4
55066: ARRAY
55067: PPUSH
55068: LD_VAR 0 1
55072: PPUSH
55073: CALL_OW 244
// end ;
55077: GO 54999
55079: POP
55080: POP
// end ;
55081: LD_VAR 0 3
55085: RET
// export function UniqueArray ( array ) ; var i ; begin
55086: LD_INT 0
55088: PPUSH
55089: PPUSH
// result := [ ] ;
55090: LD_ADDR_VAR 0 2
55094: PUSH
55095: EMPTY
55096: ST_TO_ADDR
// if not array then
55097: LD_VAR 0 1
55101: NOT
55102: IFFALSE 55106
// exit ;
55104: GO 55167
// for i := 1 to array do
55106: LD_ADDR_VAR 0 3
55110: PUSH
55111: DOUBLE
55112: LD_INT 1
55114: DEC
55115: ST_TO_ADDR
55116: LD_VAR 0 1
55120: PUSH
55121: FOR_TO
55122: IFFALSE 55165
// if not array [ i ] in result then
55124: LD_VAR 0 1
55128: PUSH
55129: LD_VAR 0 3
55133: ARRAY
55134: PUSH
55135: LD_VAR 0 2
55139: IN
55140: NOT
55141: IFFALSE 55163
// result := Join ( result , i ) ;
55143: LD_ADDR_VAR 0 2
55147: PUSH
55148: LD_VAR 0 2
55152: PPUSH
55153: LD_VAR 0 3
55157: PPUSH
55158: CALL 49818 0 2
55162: ST_TO_ADDR
55163: GO 55121
55165: POP
55166: POP
// end ; end_of_file
55167: LD_VAR 0 2
55171: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55172: LD_VAR 0 1
55176: PUSH
55177: LD_INT 200
55179: DOUBLE
55180: GREATEREQUAL
55181: IFFALSE 55189
55183: LD_INT 299
55185: DOUBLE
55186: LESSEQUAL
55187: IFTRUE 55191
55189: GO 55223
55191: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55192: LD_VAR 0 1
55196: PPUSH
55197: LD_VAR 0 2
55201: PPUSH
55202: LD_VAR 0 3
55206: PPUSH
55207: LD_VAR 0 4
55211: PPUSH
55212: LD_VAR 0 5
55216: PPUSH
55217: CALL 56085 0 5
55221: GO 55300
55223: LD_INT 300
55225: DOUBLE
55226: GREATEREQUAL
55227: IFFALSE 55235
55229: LD_INT 399
55231: DOUBLE
55232: LESSEQUAL
55233: IFTRUE 55237
55235: GO 55299
55237: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55238: LD_VAR 0 1
55242: PPUSH
55243: LD_VAR 0 2
55247: PPUSH
55248: LD_VAR 0 3
55252: PPUSH
55253: LD_VAR 0 4
55257: PPUSH
55258: LD_VAR 0 5
55262: PPUSH
55263: LD_VAR 0 6
55267: PPUSH
55268: LD_VAR 0 7
55272: PPUSH
55273: LD_VAR 0 8
55277: PPUSH
55278: LD_VAR 0 9
55282: PPUSH
55283: LD_VAR 0 10
55287: PPUSH
55288: LD_VAR 0 11
55292: PPUSH
55293: CALL 64194 0 11
55297: GO 55300
55299: POP
// end ;
55300: PPOPN 11
55302: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55303: LD_VAR 0 1
55307: PPUSH
55308: LD_VAR 0 2
55312: PPUSH
55313: LD_VAR 0 3
55317: PPUSH
55318: LD_VAR 0 4
55322: PPUSH
55323: LD_VAR 0 5
55327: PPUSH
55328: CALL 55385 0 5
// end ; end_of_file
55332: PPOPN 5
55334: END
// export function SOS_UnitDestroyed ( un ) ; begin
55335: LD_INT 0
55337: PPUSH
// ComRadiation ( un ) ;
55338: LD_VAR 0 1
55342: PPUSH
55343: CALL 56505 0 1
// end ;
55347: LD_VAR 0 2
55351: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55352: LD_INT 0
55354: PPUSH
// ComRadiation ( un ) ;
55355: LD_VAR 0 1
55359: PPUSH
55360: CALL 56505 0 1
// end ;
55364: LD_VAR 0 2
55368: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55369: LD_INT 0
55371: PPUSH
// end ;
55372: LD_VAR 0 4
55376: RET
// export function SOS_Command ( cmd ) ; begin
55377: LD_INT 0
55379: PPUSH
// end ;
55380: LD_VAR 0 2
55384: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55385: LD_INT 0
55387: PPUSH
// end ;
55388: LD_VAR 0 6
55392: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
55393: LD_INT 0
55395: PPUSH
55396: PPUSH
55397: PPUSH
55398: PPUSH
55399: PPUSH
// if not vehicle or not factory then
55400: LD_VAR 0 1
55404: NOT
55405: IFTRUE 55414
55407: PUSH
55408: LD_VAR 0 2
55412: NOT
55413: OR
55414: IFFALSE 55418
// exit ;
55416: GO 56080
// weapon := GetWeapon ( vehicle ) ;
55418: LD_ADDR_VAR 0 7
55422: PUSH
55423: LD_VAR 0 1
55427: PPUSH
55428: CALL_OW 264
55432: ST_TO_ADDR
// if weapon = ar_miner then
55433: LD_VAR 0 7
55437: PUSH
55438: LD_INT 81
55440: EQUAL
55441: IFFALSE 55498
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
55443: LD_ADDR_EXP 59
55447: PUSH
55448: LD_EXP 59
55452: PPUSH
55453: LD_EXP 59
55457: PUSH
55458: LD_INT 1
55460: PLUS
55461: PPUSH
55462: LD_VAR 0 1
55466: PPUSH
55467: CALL_OW 1
55471: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55472: LD_ADDR_EXP 60
55476: PUSH
55477: LD_EXP 60
55481: PPUSH
55482: LD_EXP 60
55486: PUSH
55487: LD_INT 1
55489: PLUS
55490: PPUSH
55491: EMPTY
55492: PPUSH
55493: CALL_OW 1
55497: ST_TO_ADDR
// end ; if not factoryWaypoints then
55498: LD_EXP 63
55502: NOT
55503: IFFALSE 55507
// exit ;
55505: GO 56080
// for i := 1 to Count ( factoryWaypoints ) do
55507: LD_ADDR_VAR 0 4
55511: PUSH
55512: DOUBLE
55513: LD_INT 1
55515: DEC
55516: ST_TO_ADDR
55517: LD_EXP 63
55521: PPUSH
55522: CALL 13842 0 1
55526: PUSH
55527: FOR_TO
55528: IFFALSE 56078
// if factoryWaypoints [ i ] [ 2 ] = factory then
55530: LD_EXP 63
55534: PUSH
55535: LD_VAR 0 4
55539: ARRAY
55540: PUSH
55541: LD_INT 2
55543: ARRAY
55544: PUSH
55545: LD_VAR 0 2
55549: EQUAL
55550: IFFALSE 56076
// begin if GetControl ( vehicle ) = control_manual then
55552: LD_VAR 0 1
55556: PPUSH
55557: CALL_OW 263
55561: PUSH
55562: LD_INT 1
55564: EQUAL
55565: IFFALSE 55929
// begin driver := IsDrivenBy ( vehicle ) ;
55567: LD_ADDR_VAR 0 5
55571: PUSH
55572: LD_VAR 0 1
55576: PPUSH
55577: CALL_OW 311
55581: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55582: LD_VAR 0 5
55586: PUSH
55587: LD_EXP 64
55591: IN
55592: IFTRUE 55606
55594: PUSH
55595: LD_VAR 0 1
55599: PUSH
55600: LD_EXP 64
55604: IN
55605: OR
55606: IFFALSE 55612
// exit ;
55608: POP
55609: POP
55610: GO 56080
// if not HasTask ( driver ) then
55612: LD_VAR 0 5
55616: PPUSH
55617: CALL_OW 314
55621: NOT
55622: IFFALSE 55927
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55624: LD_ADDR_EXP 64
55628: PUSH
55629: LD_EXP 64
55633: PPUSH
55634: LD_VAR 0 5
55638: PPUSH
55639: CALL 49818 0 2
55643: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55644: LD_ADDR_EXP 64
55648: PUSH
55649: LD_EXP 64
55653: PPUSH
55654: LD_VAR 0 1
55658: PPUSH
55659: CALL 49818 0 2
55663: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55664: LD_ADDR_VAR 0 6
55668: PUSH
55669: LD_EXP 63
55673: PUSH
55674: LD_VAR 0 4
55678: ARRAY
55679: PUSH
55680: LD_INT 3
55682: ARRAY
55683: PPUSH
55684: LD_EXP 63
55688: PUSH
55689: LD_VAR 0 4
55693: ARRAY
55694: PUSH
55695: LD_INT 4
55697: ARRAY
55698: PPUSH
55699: CALL_OW 428
55703: ST_TO_ADDR
// if hex then
55704: LD_VAR 0 6
55708: IFFALSE 55726
// ComMoveUnit ( driver , hex ) else
55710: LD_VAR 0 5
55714: PPUSH
55715: LD_VAR 0 6
55719: PPUSH
55720: CALL_OW 112
55724: GO 55810
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55726: LD_VAR 0 1
55730: PPUSH
55731: LD_EXP 63
55735: PUSH
55736: LD_VAR 0 4
55740: ARRAY
55741: PUSH
55742: LD_INT 3
55744: ARRAY
55745: PPUSH
55746: LD_EXP 63
55750: PUSH
55751: LD_VAR 0 4
55755: ARRAY
55756: PUSH
55757: LD_INT 4
55759: ARRAY
55760: PPUSH
55761: CALL_OW 297
55765: PUSH
55766: LD_INT 0
55768: GREATER
55769: IFFALSE 55810
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55771: LD_VAR 0 5
55775: PPUSH
55776: LD_EXP 63
55780: PUSH
55781: LD_VAR 0 4
55785: ARRAY
55786: PUSH
55787: LD_INT 3
55789: ARRAY
55790: PPUSH
55791: LD_EXP 63
55795: PUSH
55796: LD_VAR 0 4
55800: ARRAY
55801: PUSH
55802: LD_INT 4
55804: ARRAY
55805: PPUSH
55806: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55810: LD_VAR 0 5
55814: PPUSH
55815: CALL_OW 181
// if Multiplayer then
55819: LD_OWVAR 4
55823: IFFALSE 55872
// begin repeat wait ( 10 ) ;
55825: LD_INT 10
55827: PPUSH
55828: CALL_OW 67
// until not IsInUnit ( driver ) ;
55832: LD_VAR 0 5
55836: PPUSH
55837: CALL_OW 310
55841: NOT
55842: IFFALSE 55825
// if not HasTask ( driver ) then
55844: LD_VAR 0 5
55848: PPUSH
55849: CALL_OW 314
55853: NOT
55854: IFFALSE 55870
// ComEnterUnit ( driver , factory ) ;
55856: LD_VAR 0 5
55860: PPUSH
55861: LD_VAR 0 2
55865: PPUSH
55866: CALL_OW 120
// end else
55870: GO 55886
// AddComEnterUnit ( driver , factory ) ;
55872: LD_VAR 0 5
55876: PPUSH
55877: LD_VAR 0 2
55881: PPUSH
55882: CALL_OW 180
// wait ( 0 0$1 ) ;
55886: LD_INT 35
55888: PPUSH
55889: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55893: LD_ADDR_EXP 64
55897: PUSH
55898: LD_EXP 64
55902: PUSH
55903: LD_VAR 0 5
55907: DIFF
55908: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55909: LD_ADDR_EXP 64
55913: PUSH
55914: LD_EXP 64
55918: PUSH
55919: LD_VAR 0 1
55923: DIFF
55924: ST_TO_ADDR
// break ;
55925: GO 56078
// end ; end else
55927: GO 56076
// if GetControl ( vehicle ) = control_remote then
55929: LD_VAR 0 1
55933: PPUSH
55934: CALL_OW 263
55938: PUSH
55939: LD_INT 2
55941: EQUAL
55942: IFFALSE 56028
// begin wait ( 0 0$2 ) ;
55944: LD_INT 70
55946: PPUSH
55947: CALL_OW 67
// repeat wait ( 10 ) ;
55951: LD_INT 10
55953: PPUSH
55954: CALL_OW 67
// Connect ( vehicle ) ;
55958: LD_VAR 0 1
55962: PPUSH
55963: CALL 20120 0 1
// until IsControledBy ( vehicle ) ;
55967: LD_VAR 0 1
55971: PPUSH
55972: CALL_OW 312
55976: IFFALSE 55951
// wait ( 10 ) ;
55978: LD_INT 10
55980: PPUSH
55981: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55985: LD_VAR 0 1
55989: PPUSH
55990: LD_EXP 63
55994: PUSH
55995: LD_VAR 0 4
55999: ARRAY
56000: PUSH
56001: LD_INT 3
56003: ARRAY
56004: PPUSH
56005: LD_EXP 63
56009: PUSH
56010: LD_VAR 0 4
56014: ARRAY
56015: PUSH
56016: LD_INT 4
56018: ARRAY
56019: PPUSH
56020: CALL_OW 111
// break ;
56024: GO 56078
// end else
56026: GO 56076
// begin wait ( 0 0$3 ) ;
56028: LD_INT 105
56030: PPUSH
56031: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56035: LD_VAR 0 1
56039: PPUSH
56040: LD_EXP 63
56044: PUSH
56045: LD_VAR 0 4
56049: ARRAY
56050: PUSH
56051: LD_INT 3
56053: ARRAY
56054: PPUSH
56055: LD_EXP 63
56059: PUSH
56060: LD_VAR 0 4
56064: ARRAY
56065: PUSH
56066: LD_INT 4
56068: ARRAY
56069: PPUSH
56070: CALL_OW 111
// break ;
56074: GO 56078
// end ; end ;
56076: GO 55527
56078: POP
56079: POP
// end ;
56080: LD_VAR 0 3
56084: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56085: LD_INT 0
56087: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56088: LD_VAR 0 1
56092: PUSH
56093: LD_INT 250
56095: EQUAL
56096: IFFALSE 56113
56098: PUSH
56099: LD_VAR 0 2
56103: PPUSH
56104: CALL_OW 264
56108: PUSH
56109: LD_INT 81
56111: EQUAL
56112: AND
56113: IFFALSE 56134
// MinerPlaceMine ( unit , x , y ) ;
56115: LD_VAR 0 2
56119: PPUSH
56120: LD_VAR 0 4
56124: PPUSH
56125: LD_VAR 0 5
56129: PPUSH
56130: CALL 59480 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56134: LD_VAR 0 1
56138: PUSH
56139: LD_INT 251
56141: EQUAL
56142: IFFALSE 56159
56144: PUSH
56145: LD_VAR 0 2
56149: PPUSH
56150: CALL_OW 264
56154: PUSH
56155: LD_INT 81
56157: EQUAL
56158: AND
56159: IFFALSE 56180
// MinerDetonateMine ( unit , x , y ) ;
56161: LD_VAR 0 2
56165: PPUSH
56166: LD_VAR 0 4
56170: PPUSH
56171: LD_VAR 0 5
56175: PPUSH
56176: CALL 59887 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56180: LD_VAR 0 1
56184: PUSH
56185: LD_INT 252
56187: EQUAL
56188: IFFALSE 56205
56190: PUSH
56191: LD_VAR 0 2
56195: PPUSH
56196: CALL_OW 264
56200: PUSH
56201: LD_INT 81
56203: EQUAL
56204: AND
56205: IFFALSE 56226
// MinerCreateMinefield ( unit , x , y ) ;
56207: LD_VAR 0 2
56211: PPUSH
56212: LD_VAR 0 4
56216: PPUSH
56217: LD_VAR 0 5
56221: PPUSH
56222: CALL 60119 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56226: LD_VAR 0 1
56230: PUSH
56231: LD_INT 253
56233: EQUAL
56234: IFFALSE 56251
56236: PUSH
56237: LD_VAR 0 2
56241: PPUSH
56242: CALL_OW 257
56246: PUSH
56247: LD_INT 5
56249: EQUAL
56250: AND
56251: IFFALSE 56272
// ComBinocular ( unit , x , y ) ;
56253: LD_VAR 0 2
56257: PPUSH
56258: LD_VAR 0 4
56262: PPUSH
56263: LD_VAR 0 5
56267: PPUSH
56268: CALL 60494 0 3
// if selectedUnit then
56272: LD_VAR 0 3
56276: IFFALSE 56336
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56278: LD_VAR 0 1
56282: PUSH
56283: LD_INT 254
56285: EQUAL
56286: IFFALSE 56303
56288: PUSH
56289: LD_VAR 0 2
56293: PPUSH
56294: CALL_OW 264
56298: PUSH
56299: LD_INT 99
56301: EQUAL
56302: AND
56303: IFFALSE 56320
56305: PUSH
56306: LD_VAR 0 3
56310: PPUSH
56311: CALL_OW 263
56315: PUSH
56316: LD_INT 3
56318: EQUAL
56319: AND
56320: IFFALSE 56336
// HackDestroyVehicle ( unit , selectedUnit ) ;
56322: LD_VAR 0 2
56326: PPUSH
56327: LD_VAR 0 3
56331: PPUSH
56332: CALL 58670 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56336: LD_VAR 0 1
56340: PUSH
56341: LD_INT 255
56343: EQUAL
56344: IFFALSE 56368
56346: PUSH
56347: LD_VAR 0 2
56351: PPUSH
56352: CALL_OW 264
56356: PUSH
56357: LD_INT 14
56359: PUSH
56360: LD_INT 53
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: IN
56367: AND
56368: IFFALSE 56386
56370: PUSH
56371: LD_VAR 0 4
56375: PPUSH
56376: LD_VAR 0 5
56380: PPUSH
56381: CALL_OW 488
56385: AND
56386: IFFALSE 56410
// CutTreeXYR ( unit , x , y , 12 ) ;
56388: LD_VAR 0 2
56392: PPUSH
56393: LD_VAR 0 4
56397: PPUSH
56398: LD_VAR 0 5
56402: PPUSH
56403: LD_INT 12
56405: PPUSH
56406: CALL 56601 0 4
// if cmd = 256 then
56410: LD_VAR 0 1
56414: PUSH
56415: LD_INT 256
56417: EQUAL
56418: IFFALSE 56439
// SetFactoryWaypoint ( unit , x , y ) ;
56420: LD_VAR 0 2
56424: PPUSH
56425: LD_VAR 0 4
56429: PPUSH
56430: LD_VAR 0 5
56434: PPUSH
56435: CALL 64202 0 3
// if cmd = 257 then
56439: LD_VAR 0 1
56443: PUSH
56444: LD_INT 257
56446: EQUAL
56447: IFFALSE 56468
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56449: LD_VAR 0 2
56453: PPUSH
56454: LD_VAR 0 4
56458: PPUSH
56459: LD_VAR 0 5
56463: PPUSH
56464: CALL 64698 0 3
// if cmd = 258 then
56468: LD_VAR 0 1
56472: PUSH
56473: LD_INT 258
56475: EQUAL
56476: IFFALSE 56500
// BurnTreeXYR ( unit , x , y , 8 ) ;
56478: LD_VAR 0 2
56482: PPUSH
56483: LD_VAR 0 4
56487: PPUSH
56488: LD_VAR 0 5
56492: PPUSH
56493: LD_INT 8
56495: PPUSH
56496: CALL 57023 0 4
// end ;
56500: LD_VAR 0 6
56504: RET
// export function ComRadiation ( un ) ; var eff ; begin
56505: LD_INT 0
56507: PPUSH
56508: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56509: LD_VAR 0 1
56513: PPUSH
56514: CALL_OW 264
56518: PUSH
56519: LD_INT 91
56521: NONEQUAL
56522: IFFALSE 56526
// exit ;
56524: GO 56596
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56526: LD_INT 68
56528: PPUSH
56529: LD_VAR 0 1
56533: PPUSH
56534: CALL_OW 255
56538: PPUSH
56539: CALL_OW 321
56543: PUSH
56544: LD_INT 2
56546: EQUAL
56547: IFFALSE 56559
// eff := 50 else
56549: LD_ADDR_VAR 0 3
56553: PUSH
56554: LD_INT 50
56556: ST_TO_ADDR
56557: GO 56567
// eff := 25 ;
56559: LD_ADDR_VAR 0 3
56563: PUSH
56564: LD_INT 25
56566: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56567: LD_VAR 0 1
56571: PPUSH
56572: CALL_OW 250
56576: PPUSH
56577: LD_VAR 0 1
56581: PPUSH
56582: CALL_OW 251
56586: PPUSH
56587: LD_VAR 0 3
56591: PPUSH
56592: CALL_OW 495
// end ;
56596: LD_VAR 0 2
56600: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56601: LD_INT 0
56603: PPUSH
56604: PPUSH
56605: PPUSH
56606: PPUSH
56607: PPUSH
56608: PPUSH
56609: PPUSH
56610: PPUSH
56611: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56612: LD_VAR 0 1
56616: PPUSH
56617: CALL_OW 302
56621: NOT
56622: IFTRUE 56641
56624: PUSH
56625: LD_VAR 0 2
56629: PPUSH
56630: LD_VAR 0 3
56634: PPUSH
56635: CALL_OW 488
56639: NOT
56640: OR
56641: IFTRUE 56650
56643: PUSH
56644: LD_VAR 0 4
56648: NOT
56649: OR
56650: IFFALSE 56654
// exit ;
56652: GO 57018
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
56654: LD_VAR 0 1
56658: PPUSH
56659: CALL_OW 437
56663: PPUSH
56664: CALL 13842 0 1
56668: PUSH
56669: LD_INT 10
56671: GREATER
56672: IFFALSE 56676
// exit ;
56674: GO 57018
// list := [ ] ;
56676: LD_ADDR_VAR 0 13
56680: PUSH
56681: EMPTY
56682: ST_TO_ADDR
// if x - r < 0 then
56683: LD_VAR 0 2
56687: PUSH
56688: LD_VAR 0 4
56692: MINUS
56693: PUSH
56694: LD_INT 0
56696: LESS
56697: IFFALSE 56709
// min_x := 0 else
56699: LD_ADDR_VAR 0 7
56703: PUSH
56704: LD_INT 0
56706: ST_TO_ADDR
56707: GO 56725
// min_x := x - r ;
56709: LD_ADDR_VAR 0 7
56713: PUSH
56714: LD_VAR 0 2
56718: PUSH
56719: LD_VAR 0 4
56723: MINUS
56724: ST_TO_ADDR
// if y - r < 0 then
56725: LD_VAR 0 3
56729: PUSH
56730: LD_VAR 0 4
56734: MINUS
56735: PUSH
56736: LD_INT 0
56738: LESS
56739: IFFALSE 56751
// min_y := 0 else
56741: LD_ADDR_VAR 0 8
56745: PUSH
56746: LD_INT 0
56748: ST_TO_ADDR
56749: GO 56767
// min_y := y - r ;
56751: LD_ADDR_VAR 0 8
56755: PUSH
56756: LD_VAR 0 3
56760: PUSH
56761: LD_VAR 0 4
56765: MINUS
56766: ST_TO_ADDR
// max_x := x + r ;
56767: LD_ADDR_VAR 0 9
56771: PUSH
56772: LD_VAR 0 2
56776: PUSH
56777: LD_VAR 0 4
56781: PLUS
56782: ST_TO_ADDR
// max_y := y + r ;
56783: LD_ADDR_VAR 0 10
56787: PUSH
56788: LD_VAR 0 3
56792: PUSH
56793: LD_VAR 0 4
56797: PLUS
56798: ST_TO_ADDR
// for _x = min_x to max_x do
56799: LD_ADDR_VAR 0 11
56803: PUSH
56804: DOUBLE
56805: LD_VAR 0 7
56809: DEC
56810: ST_TO_ADDR
56811: LD_VAR 0 9
56815: PUSH
56816: FOR_TO
56817: IFFALSE 56936
// for _y = min_y to max_y do
56819: LD_ADDR_VAR 0 12
56823: PUSH
56824: DOUBLE
56825: LD_VAR 0 8
56829: DEC
56830: ST_TO_ADDR
56831: LD_VAR 0 10
56835: PUSH
56836: FOR_TO
56837: IFFALSE 56932
// begin if not ValidHex ( _x , _y ) then
56839: LD_VAR 0 11
56843: PPUSH
56844: LD_VAR 0 12
56848: PPUSH
56849: CALL_OW 488
56853: NOT
56854: IFFALSE 56858
// continue ;
56856: GO 56836
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56858: LD_VAR 0 11
56862: PPUSH
56863: LD_VAR 0 12
56867: PPUSH
56868: CALL_OW 351
56872: IFFALSE 56890
56874: PUSH
56875: LD_VAR 0 11
56879: PPUSH
56880: LD_VAR 0 12
56884: PPUSH
56885: CALL_OW 554
56889: AND
56890: IFFALSE 56930
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56892: LD_ADDR_VAR 0 13
56896: PUSH
56897: LD_VAR 0 13
56901: PPUSH
56902: LD_VAR 0 13
56906: PUSH
56907: LD_INT 1
56909: PLUS
56910: PPUSH
56911: LD_VAR 0 11
56915: PUSH
56916: LD_VAR 0 12
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PPUSH
56925: CALL_OW 2
56929: ST_TO_ADDR
// end ;
56930: GO 56836
56932: POP
56933: POP
56934: GO 56816
56936: POP
56937: POP
// if not list then
56938: LD_VAR 0 13
56942: NOT
56943: IFFALSE 56947
// exit ;
56945: GO 57018
// for i in list do
56947: LD_ADDR_VAR 0 6
56951: PUSH
56952: LD_VAR 0 13
56956: PUSH
56957: FOR_IN
56958: IFFALSE 57016
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56960: LD_VAR 0 1
56964: PPUSH
56965: LD_STRING M
56967: PUSH
56968: LD_VAR 0 6
56972: PUSH
56973: LD_INT 1
56975: ARRAY
56976: PUSH
56977: LD_VAR 0 6
56981: PUSH
56982: LD_INT 2
56984: ARRAY
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: PUSH
57007: EMPTY
57008: LIST
57009: PPUSH
57010: CALL_OW 447
57014: GO 56957
57016: POP
57017: POP
// end ;
57018: LD_VAR 0 5
57022: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57023: LD_INT 0
57025: PPUSH
57026: PPUSH
57027: PPUSH
57028: PPUSH
57029: PPUSH
57030: PPUSH
57031: PPUSH
57032: PPUSH
57033: PPUSH
57034: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57035: LD_VAR 0 1
57039: PPUSH
57040: CALL_OW 302
57044: NOT
57045: IFTRUE 57064
57047: PUSH
57048: LD_VAR 0 2
57052: PPUSH
57053: LD_VAR 0 3
57057: PPUSH
57058: CALL_OW 488
57062: NOT
57063: OR
57064: IFTRUE 57073
57066: PUSH
57067: LD_VAR 0 4
57071: NOT
57072: OR
57073: IFFALSE 57077
// exit ;
57075: GO 57616
// if Count ( GetTaskList ( flame ) ) > 10 then
57077: LD_VAR 0 1
57081: PPUSH
57082: CALL_OW 437
57086: PPUSH
57087: CALL 13842 0 1
57091: PUSH
57092: LD_INT 10
57094: GREATER
57095: IFFALSE 57099
// exit ;
57097: GO 57616
// list := [ ] ;
57099: LD_ADDR_VAR 0 13
57103: PUSH
57104: EMPTY
57105: ST_TO_ADDR
// if x - r < 0 then
57106: LD_VAR 0 2
57110: PUSH
57111: LD_VAR 0 4
57115: MINUS
57116: PUSH
57117: LD_INT 0
57119: LESS
57120: IFFALSE 57132
// min_x := 0 else
57122: LD_ADDR_VAR 0 7
57126: PUSH
57127: LD_INT 0
57129: ST_TO_ADDR
57130: GO 57148
// min_x := x - r ;
57132: LD_ADDR_VAR 0 7
57136: PUSH
57137: LD_VAR 0 2
57141: PUSH
57142: LD_VAR 0 4
57146: MINUS
57147: ST_TO_ADDR
// if y - r < 0 then
57148: LD_VAR 0 3
57152: PUSH
57153: LD_VAR 0 4
57157: MINUS
57158: PUSH
57159: LD_INT 0
57161: LESS
57162: IFFALSE 57174
// min_y := 0 else
57164: LD_ADDR_VAR 0 8
57168: PUSH
57169: LD_INT 0
57171: ST_TO_ADDR
57172: GO 57190
// min_y := y - r ;
57174: LD_ADDR_VAR 0 8
57178: PUSH
57179: LD_VAR 0 3
57183: PUSH
57184: LD_VAR 0 4
57188: MINUS
57189: ST_TO_ADDR
// max_x := x + r ;
57190: LD_ADDR_VAR 0 9
57194: PUSH
57195: LD_VAR 0 2
57199: PUSH
57200: LD_VAR 0 4
57204: PLUS
57205: ST_TO_ADDR
// max_y := y + r ;
57206: LD_ADDR_VAR 0 10
57210: PUSH
57211: LD_VAR 0 3
57215: PUSH
57216: LD_VAR 0 4
57220: PLUS
57221: ST_TO_ADDR
// for _x = min_x to max_x do
57222: LD_ADDR_VAR 0 11
57226: PUSH
57227: DOUBLE
57228: LD_VAR 0 7
57232: DEC
57233: ST_TO_ADDR
57234: LD_VAR 0 9
57238: PUSH
57239: FOR_TO
57240: IFFALSE 57359
// for _y = min_y to max_y do
57242: LD_ADDR_VAR 0 12
57246: PUSH
57247: DOUBLE
57248: LD_VAR 0 8
57252: DEC
57253: ST_TO_ADDR
57254: LD_VAR 0 10
57258: PUSH
57259: FOR_TO
57260: IFFALSE 57355
// begin if not ValidHex ( _x , _y ) then
57262: LD_VAR 0 11
57266: PPUSH
57267: LD_VAR 0 12
57271: PPUSH
57272: CALL_OW 488
57276: NOT
57277: IFFALSE 57281
// continue ;
57279: GO 57259
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57281: LD_VAR 0 11
57285: PPUSH
57286: LD_VAR 0 12
57290: PPUSH
57291: CALL_OW 351
57295: IFFALSE 57313
57297: PUSH
57298: LD_VAR 0 11
57302: PPUSH
57303: LD_VAR 0 12
57307: PPUSH
57308: CALL_OW 554
57312: AND
57313: IFFALSE 57353
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57315: LD_ADDR_VAR 0 13
57319: PUSH
57320: LD_VAR 0 13
57324: PPUSH
57325: LD_VAR 0 13
57329: PUSH
57330: LD_INT 1
57332: PLUS
57333: PPUSH
57334: LD_VAR 0 11
57338: PUSH
57339: LD_VAR 0 12
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PPUSH
57348: CALL_OW 2
57352: ST_TO_ADDR
// end ;
57353: GO 57259
57355: POP
57356: POP
57357: GO 57239
57359: POP
57360: POP
// if not list then
57361: LD_VAR 0 13
57365: NOT
57366: IFFALSE 57370
// exit ;
57368: GO 57616
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57370: LD_ADDR_VAR 0 13
57374: PUSH
57375: LD_VAR 0 1
57379: PPUSH
57380: LD_VAR 0 13
57384: PPUSH
57385: LD_INT 1
57387: PPUSH
57388: LD_INT 1
57390: PPUSH
57391: CALL 17248 0 4
57395: ST_TO_ADDR
// ComStop ( flame ) ;
57396: LD_VAR 0 1
57400: PPUSH
57401: CALL_OW 141
// for i in list do
57405: LD_ADDR_VAR 0 6
57409: PUSH
57410: LD_VAR 0 13
57414: PUSH
57415: FOR_IN
57416: IFFALSE 57447
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57418: LD_VAR 0 1
57422: PPUSH
57423: LD_VAR 0 6
57427: PUSH
57428: LD_INT 1
57430: ARRAY
57431: PPUSH
57432: LD_VAR 0 6
57436: PUSH
57437: LD_INT 2
57439: ARRAY
57440: PPUSH
57441: CALL_OW 176
57445: GO 57415
57447: POP
57448: POP
// repeat wait ( 0 0$1 ) ;
57449: LD_INT 35
57451: PPUSH
57452: CALL_OW 67
// task := GetTaskList ( flame ) ;
57456: LD_ADDR_VAR 0 14
57460: PUSH
57461: LD_VAR 0 1
57465: PPUSH
57466: CALL_OW 437
57470: ST_TO_ADDR
// if not task then
57471: LD_VAR 0 14
57475: NOT
57476: IFFALSE 57480
// exit ;
57478: GO 57616
// if task [ 1 ] [ 1 ] <> | then
57480: LD_VAR 0 14
57484: PUSH
57485: LD_INT 1
57487: ARRAY
57488: PUSH
57489: LD_INT 1
57491: ARRAY
57492: PUSH
57493: LD_STRING |
57495: NONEQUAL
57496: IFFALSE 57500
// exit ;
57498: GO 57616
// _x := task [ 1 ] [ 2 ] ;
57500: LD_ADDR_VAR 0 11
57504: PUSH
57505: LD_VAR 0 14
57509: PUSH
57510: LD_INT 1
57512: ARRAY
57513: PUSH
57514: LD_INT 2
57516: ARRAY
57517: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57518: LD_ADDR_VAR 0 12
57522: PUSH
57523: LD_VAR 0 14
57527: PUSH
57528: LD_INT 1
57530: ARRAY
57531: PUSH
57532: LD_INT 3
57534: ARRAY
57535: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57536: LD_VAR 0 11
57540: PPUSH
57541: LD_VAR 0 12
57545: PPUSH
57546: CALL_OW 351
57550: NOT
57551: IFTRUE 57570
57553: PUSH
57554: LD_VAR 0 11
57558: PPUSH
57559: LD_VAR 0 12
57563: PPUSH
57564: CALL_OW 554
57568: NOT
57569: OR
57570: IFFALSE 57604
// begin task := Delete ( task , 1 ) ;
57572: LD_ADDR_VAR 0 14
57576: PUSH
57577: LD_VAR 0 14
57581: PPUSH
57582: LD_INT 1
57584: PPUSH
57585: CALL_OW 3
57589: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57590: LD_VAR 0 1
57594: PPUSH
57595: LD_VAR 0 14
57599: PPUSH
57600: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57604: LD_VAR 0 1
57608: PPUSH
57609: CALL_OW 314
57613: NOT
57614: IFFALSE 57449
// end ;
57616: LD_VAR 0 5
57620: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57621: LD_EXP 52
57625: NOT
57626: IFFALSE 57676
57628: GO 57630
57630: DISABLE
// begin initHack := true ;
57631: LD_ADDR_EXP 52
57635: PUSH
57636: LD_INT 1
57638: ST_TO_ADDR
// hackTanks := [ ] ;
57639: LD_ADDR_EXP 53
57643: PUSH
57644: EMPTY
57645: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57646: LD_ADDR_EXP 54
57650: PUSH
57651: EMPTY
57652: ST_TO_ADDR
// hackLimit := 3 ;
57653: LD_ADDR_EXP 55
57657: PUSH
57658: LD_INT 3
57660: ST_TO_ADDR
// hackDist := 12 ;
57661: LD_ADDR_EXP 56
57665: PUSH
57666: LD_INT 12
57668: ST_TO_ADDR
// hackCounter := [ ] ;
57669: LD_ADDR_EXP 57
57673: PUSH
57674: EMPTY
57675: ST_TO_ADDR
// end ;
57676: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57677: LD_EXP 52
57681: IFFALSE 57699
57683: PUSH
57684: LD_INT 34
57686: PUSH
57687: LD_INT 99
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PPUSH
57694: CALL_OW 69
57698: AND
57699: IFFALSE 57952
57701: GO 57703
57703: DISABLE
57704: LD_INT 0
57706: PPUSH
57707: PPUSH
// begin enable ;
57708: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57709: LD_ADDR_VAR 0 1
57713: PUSH
57714: LD_INT 34
57716: PUSH
57717: LD_INT 99
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PPUSH
57724: CALL_OW 69
57728: PUSH
57729: FOR_IN
57730: IFFALSE 57950
// begin if not i in hackTanks then
57732: LD_VAR 0 1
57736: PUSH
57737: LD_EXP 53
57741: IN
57742: NOT
57743: IFFALSE 57826
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57745: LD_ADDR_EXP 53
57749: PUSH
57750: LD_EXP 53
57754: PPUSH
57755: LD_EXP 53
57759: PUSH
57760: LD_INT 1
57762: PLUS
57763: PPUSH
57764: LD_VAR 0 1
57768: PPUSH
57769: CALL_OW 1
57773: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57774: LD_ADDR_EXP 54
57778: PUSH
57779: LD_EXP 54
57783: PPUSH
57784: LD_EXP 54
57788: PUSH
57789: LD_INT 1
57791: PLUS
57792: PPUSH
57793: EMPTY
57794: PPUSH
57795: CALL_OW 1
57799: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57800: LD_ADDR_EXP 57
57804: PUSH
57805: LD_EXP 57
57809: PPUSH
57810: LD_EXP 57
57814: PUSH
57815: LD_INT 1
57817: PLUS
57818: PPUSH
57819: EMPTY
57820: PPUSH
57821: CALL_OW 1
57825: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57826: LD_VAR 0 1
57830: PPUSH
57831: CALL_OW 302
57835: NOT
57836: IFFALSE 57849
// begin HackUnlinkAll ( i ) ;
57838: LD_VAR 0 1
57842: PPUSH
57843: CALL 57955 0 1
// continue ;
57847: GO 57729
// end ; HackCheckCapturedStatus ( i ) ;
57849: LD_VAR 0 1
57853: PPUSH
57854: CALL 58400 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57858: LD_ADDR_VAR 0 2
57862: PUSH
57863: LD_INT 81
57865: PUSH
57866: LD_VAR 0 1
57870: PPUSH
57871: CALL_OW 255
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 33
57882: PUSH
57883: LD_INT 3
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 91
57892: PUSH
57893: LD_VAR 0 1
57897: PUSH
57898: LD_EXP 56
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 50
57910: PUSH
57911: EMPTY
57912: LIST
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: PPUSH
57920: CALL_OW 69
57924: ST_TO_ADDR
// if not tmp then
57925: LD_VAR 0 2
57929: NOT
57930: IFFALSE 57934
// continue ;
57932: GO 57729
// HackLink ( i , tmp ) ;
57934: LD_VAR 0 1
57938: PPUSH
57939: LD_VAR 0 2
57943: PPUSH
57944: CALL 58091 0 2
// end ;
57948: GO 57729
57950: POP
57951: POP
// end ;
57952: PPOPN 2
57954: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57955: LD_INT 0
57957: PPUSH
57958: PPUSH
57959: PPUSH
// if not hack in hackTanks then
57960: LD_VAR 0 1
57964: PUSH
57965: LD_EXP 53
57969: IN
57970: NOT
57971: IFFALSE 57975
// exit ;
57973: GO 58086
// index := GetElementIndex ( hackTanks , hack ) ;
57975: LD_ADDR_VAR 0 4
57979: PUSH
57980: LD_EXP 53
57984: PPUSH
57985: LD_VAR 0 1
57989: PPUSH
57990: CALL 16543 0 2
57994: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57995: LD_EXP 54
57999: PUSH
58000: LD_VAR 0 4
58004: ARRAY
58005: IFFALSE 58086
// begin for i in hackTanksCaptured [ index ] do
58007: LD_ADDR_VAR 0 3
58011: PUSH
58012: LD_EXP 54
58016: PUSH
58017: LD_VAR 0 4
58021: ARRAY
58022: PUSH
58023: FOR_IN
58024: IFFALSE 58050
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58026: LD_VAR 0 3
58030: PUSH
58031: LD_INT 1
58033: ARRAY
58034: PPUSH
58035: LD_VAR 0 3
58039: PUSH
58040: LD_INT 2
58042: ARRAY
58043: PPUSH
58044: CALL_OW 235
58048: GO 58023
58050: POP
58051: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58052: LD_ADDR_EXP 54
58056: PUSH
58057: LD_EXP 54
58061: PPUSH
58062: LD_VAR 0 4
58066: PPUSH
58067: EMPTY
58068: PPUSH
58069: CALL_OW 1
58073: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58074: LD_VAR 0 1
58078: PPUSH
58079: LD_INT 0
58081: PPUSH
58082: CALL_OW 505
// end ; end ;
58086: LD_VAR 0 2
58090: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58091: LD_INT 0
58093: PPUSH
58094: PPUSH
58095: PPUSH
// if not hack in hackTanks or not vehicles then
58096: LD_VAR 0 1
58100: PUSH
58101: LD_EXP 53
58105: IN
58106: NOT
58107: IFTRUE 58116
58109: PUSH
58110: LD_VAR 0 2
58114: NOT
58115: OR
58116: IFFALSE 58120
// exit ;
58118: GO 58395
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58120: LD_ADDR_VAR 0 2
58124: PUSH
58125: LD_VAR 0 1
58129: PPUSH
58130: LD_VAR 0 2
58134: PPUSH
58135: LD_INT 1
58137: PPUSH
58138: LD_INT 1
58140: PPUSH
58141: CALL 17195 0 4
58145: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58146: LD_ADDR_VAR 0 5
58150: PUSH
58151: LD_EXP 53
58155: PPUSH
58156: LD_VAR 0 1
58160: PPUSH
58161: CALL 16543 0 2
58165: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58166: LD_EXP 54
58170: PUSH
58171: LD_VAR 0 5
58175: ARRAY
58176: PUSH
58177: LD_EXP 55
58181: LESS
58182: IFFALSE 58371
// begin for i := 1 to vehicles do
58184: LD_ADDR_VAR 0 4
58188: PUSH
58189: DOUBLE
58190: LD_INT 1
58192: DEC
58193: ST_TO_ADDR
58194: LD_VAR 0 2
58198: PUSH
58199: FOR_TO
58200: IFFALSE 58369
// begin if hackTanksCaptured [ index ] = hackLimit then
58202: LD_EXP 54
58206: PUSH
58207: LD_VAR 0 5
58211: ARRAY
58212: PUSH
58213: LD_EXP 55
58217: EQUAL
58218: IFFALSE 58222
// break ;
58220: GO 58369
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58222: LD_ADDR_EXP 57
58226: PUSH
58227: LD_EXP 57
58231: PPUSH
58232: LD_VAR 0 5
58236: PPUSH
58237: LD_EXP 57
58241: PUSH
58242: LD_VAR 0 5
58246: ARRAY
58247: PUSH
58248: LD_INT 1
58250: PLUS
58251: PPUSH
58252: CALL_OW 1
58256: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58257: LD_ADDR_EXP 54
58261: PUSH
58262: LD_EXP 54
58266: PPUSH
58267: LD_VAR 0 5
58271: PUSH
58272: LD_EXP 54
58276: PUSH
58277: LD_VAR 0 5
58281: ARRAY
58282: PUSH
58283: LD_INT 1
58285: PLUS
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PPUSH
58291: LD_VAR 0 2
58295: PUSH
58296: LD_VAR 0 4
58300: ARRAY
58301: PUSH
58302: LD_VAR 0 2
58306: PUSH
58307: LD_VAR 0 4
58311: ARRAY
58312: PPUSH
58313: CALL_OW 255
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PPUSH
58322: CALL 16760 0 3
58326: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58327: LD_VAR 0 2
58331: PUSH
58332: LD_VAR 0 4
58336: ARRAY
58337: PPUSH
58338: LD_VAR 0 1
58342: PPUSH
58343: CALL_OW 255
58347: PPUSH
58348: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58352: LD_VAR 0 2
58356: PUSH
58357: LD_VAR 0 4
58361: ARRAY
58362: PPUSH
58363: CALL_OW 141
// end ;
58367: GO 58199
58369: POP
58370: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58371: LD_VAR 0 1
58375: PPUSH
58376: LD_EXP 54
58380: PUSH
58381: LD_VAR 0 5
58385: ARRAY
58386: PUSH
58387: LD_INT 0
58389: PLUS
58390: PPUSH
58391: CALL_OW 505
// end ;
58395: LD_VAR 0 3
58399: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58400: LD_INT 0
58402: PPUSH
58403: PPUSH
58404: PPUSH
58405: PPUSH
// if not hack in hackTanks then
58406: LD_VAR 0 1
58410: PUSH
58411: LD_EXP 53
58415: IN
58416: NOT
58417: IFFALSE 58421
// exit ;
58419: GO 58665
// index := GetElementIndex ( hackTanks , hack ) ;
58421: LD_ADDR_VAR 0 4
58425: PUSH
58426: LD_EXP 53
58430: PPUSH
58431: LD_VAR 0 1
58435: PPUSH
58436: CALL 16543 0 2
58440: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58441: LD_ADDR_VAR 0 3
58445: PUSH
58446: DOUBLE
58447: LD_EXP 54
58451: PUSH
58452: LD_VAR 0 4
58456: ARRAY
58457: INC
58458: ST_TO_ADDR
58459: LD_INT 1
58461: PUSH
58462: FOR_DOWNTO
58463: IFFALSE 58639
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58465: LD_ADDR_VAR 0 5
58469: PUSH
58470: LD_EXP 54
58474: PUSH
58475: LD_VAR 0 4
58479: ARRAY
58480: PUSH
58481: LD_VAR 0 3
58485: ARRAY
58486: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58487: LD_VAR 0 5
58491: PUSH
58492: LD_INT 1
58494: ARRAY
58495: PPUSH
58496: CALL_OW 302
58500: NOT
58501: IFTRUE 58529
58503: PUSH
58504: LD_VAR 0 5
58508: PUSH
58509: LD_INT 1
58511: ARRAY
58512: PPUSH
58513: CALL_OW 255
58517: PUSH
58518: LD_VAR 0 1
58522: PPUSH
58523: CALL_OW 255
58527: NONEQUAL
58528: OR
58529: IFFALSE 58637
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58531: LD_VAR 0 5
58535: PUSH
58536: LD_INT 1
58538: ARRAY
58539: PPUSH
58540: CALL_OW 305
58544: IFFALSE 58572
58546: PUSH
58547: LD_VAR 0 5
58551: PUSH
58552: LD_INT 1
58554: ARRAY
58555: PPUSH
58556: CALL_OW 255
58560: PUSH
58561: LD_VAR 0 1
58565: PPUSH
58566: CALL_OW 255
58570: EQUAL
58571: AND
58572: IFFALSE 58596
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58574: LD_VAR 0 5
58578: PUSH
58579: LD_INT 1
58581: ARRAY
58582: PPUSH
58583: LD_VAR 0 5
58587: PUSH
58588: LD_INT 2
58590: ARRAY
58591: PPUSH
58592: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58596: LD_ADDR_EXP 54
58600: PUSH
58601: LD_EXP 54
58605: PPUSH
58606: LD_VAR 0 4
58610: PPUSH
58611: LD_EXP 54
58615: PUSH
58616: LD_VAR 0 4
58620: ARRAY
58621: PPUSH
58622: LD_VAR 0 3
58626: PPUSH
58627: CALL_OW 3
58631: PPUSH
58632: CALL_OW 1
58636: ST_TO_ADDR
// end ; end ;
58637: GO 58462
58639: POP
58640: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58641: LD_VAR 0 1
58645: PPUSH
58646: LD_EXP 54
58650: PUSH
58651: LD_VAR 0 4
58655: ARRAY
58656: PUSH
58657: LD_INT 0
58659: PLUS
58660: PPUSH
58661: CALL_OW 505
// end ;
58665: LD_VAR 0 2
58669: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58670: LD_INT 0
58672: PPUSH
58673: PPUSH
58674: PPUSH
58675: PPUSH
// if not hack in hackTanks then
58676: LD_VAR 0 1
58680: PUSH
58681: LD_EXP 53
58685: IN
58686: NOT
58687: IFFALSE 58691
// exit ;
58689: GO 58776
// index := GetElementIndex ( hackTanks , hack ) ;
58691: LD_ADDR_VAR 0 5
58695: PUSH
58696: LD_EXP 53
58700: PPUSH
58701: LD_VAR 0 1
58705: PPUSH
58706: CALL 16543 0 2
58710: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58711: LD_ADDR_VAR 0 4
58715: PUSH
58716: DOUBLE
58717: LD_INT 1
58719: DEC
58720: ST_TO_ADDR
58721: LD_EXP 54
58725: PUSH
58726: LD_VAR 0 5
58730: ARRAY
58731: PUSH
58732: FOR_TO
58733: IFFALSE 58774
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58735: LD_EXP 54
58739: PUSH
58740: LD_VAR 0 5
58744: ARRAY
58745: PUSH
58746: LD_VAR 0 4
58750: ARRAY
58751: PUSH
58752: LD_INT 1
58754: ARRAY
58755: PUSH
58756: LD_VAR 0 2
58760: EQUAL
58761: IFFALSE 58772
// KillUnit ( vehicle ) ;
58763: LD_VAR 0 2
58767: PPUSH
58768: CALL_OW 66
58772: GO 58732
58774: POP
58775: POP
// end ;
58776: LD_VAR 0 3
58780: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
58781: LD_EXP 58
58785: NOT
58786: IFFALSE 58919
58788: GO 58790
58790: DISABLE
58791: LD_INT 0
58793: PPUSH
// begin initMiner := true ;
58794: LD_ADDR_EXP 58
58798: PUSH
58799: LD_INT 1
58801: ST_TO_ADDR
// minersList := [ ] ;
58802: LD_ADDR_EXP 59
58806: PUSH
58807: EMPTY
58808: ST_TO_ADDR
// minerMinesList := [ ] ;
58809: LD_ADDR_EXP 60
58813: PUSH
58814: EMPTY
58815: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
58816: LD_ADDR_EXP 61
58820: PUSH
58821: LD_INT 10
58823: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58824: LD_ADDR_VAR 0 1
58828: PUSH
58829: LD_INT 34
58831: PUSH
58832: LD_INT 81
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PPUSH
58839: CALL_OW 69
58843: PUSH
58844: FOR_IN
58845: IFFALSE 58917
// begin if not i in minersList then
58847: LD_VAR 0 1
58851: PUSH
58852: LD_EXP 59
58856: IN
58857: NOT
58858: IFFALSE 58915
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58860: LD_ADDR_EXP 59
58864: PUSH
58865: LD_EXP 59
58869: PPUSH
58870: LD_EXP 59
58874: PUSH
58875: LD_INT 1
58877: PLUS
58878: PPUSH
58879: LD_VAR 0 1
58883: PPUSH
58884: CALL_OW 1
58888: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58889: LD_ADDR_EXP 60
58893: PUSH
58894: LD_EXP 60
58898: PPUSH
58899: LD_EXP 60
58903: PUSH
58904: LD_INT 1
58906: PLUS
58907: PPUSH
58908: EMPTY
58909: PPUSH
58910: CALL_OW 1
58914: ST_TO_ADDR
// end end ;
58915: GO 58844
58917: POP
58918: POP
// end ;
58919: PPOPN 1
58921: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
58922: LD_EXP 58
58926: IFFALSE 58957
58928: PUSH
58929: LD_EXP 60
58933: PPUSH
58934: CALL 13842 0 1
58938: IFTRUE 58956
58940: PUSH
58941: LD_INT 34
58943: PUSH
58944: LD_INT 81
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PPUSH
58951: CALL_OW 69
58955: OR
58956: AND
58957: IFFALSE 59477
58959: GO 58961
58961: DISABLE
58962: LD_INT 0
58964: PPUSH
58965: PPUSH
58966: PPUSH
58967: PPUSH
// begin enable ;
58968: ENABLE
// for i := minerMinesList downto 1 do
58969: LD_ADDR_VAR 0 1
58973: PUSH
58974: DOUBLE
58975: LD_EXP 60
58979: INC
58980: ST_TO_ADDR
58981: LD_INT 1
58983: PUSH
58984: FOR_DOWNTO
58985: IFFALSE 59475
// begin side := GetSide ( minersList [ i ] ) ;
58987: LD_ADDR_VAR 0 3
58991: PUSH
58992: LD_EXP 59
58996: PUSH
58997: LD_VAR 0 1
59001: ARRAY
59002: PPUSH
59003: CALL_OW 255
59007: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
59008: LD_EXP 59
59012: PUSH
59013: LD_VAR 0 1
59017: ARRAY
59018: PPUSH
59019: CALL_OW 300
59023: IFFALSE 59044
59025: PUSH
59026: LD_VAR 0 3
59030: PUSH
59031: LD_OWVAR 2
59035: PUSH
59036: LD_INT 9
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: IN
59043: AND
59044: IFFALSE 59077
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
59046: LD_EXP 59
59050: PUSH
59051: LD_VAR 0 1
59055: ARRAY
59056: PPUSH
59057: LD_EXP 60
59061: PUSH
59062: LD_VAR 0 1
59066: ARRAY
59067: PPUSH
59068: CALL 13842 0 1
59072: PPUSH
59073: CALL_OW 505
// if not minerMinesList [ i ] then
59077: LD_EXP 60
59081: PUSH
59082: LD_VAR 0 1
59086: ARRAY
59087: NOT
59088: IFFALSE 59092
// continue ;
59090: GO 58984
// for j := minerMinesList [ i ] downto 1 do
59092: LD_ADDR_VAR 0 2
59096: PUSH
59097: DOUBLE
59098: LD_EXP 60
59102: PUSH
59103: LD_VAR 0 1
59107: ARRAY
59108: INC
59109: ST_TO_ADDR
59110: LD_INT 1
59112: PUSH
59113: FOR_DOWNTO
59114: IFFALSE 59471
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
59116: LD_EXP 59
59120: PUSH
59121: LD_VAR 0 1
59125: ARRAY
59126: PPUSH
59127: CALL_OW 301
59131: IFTRUE 59151
59133: PUSH
59134: LD_EXP 59
59138: PUSH
59139: LD_VAR 0 1
59143: ARRAY
59144: PPUSH
59145: CALL_OW 305
59149: NOT
59150: OR
59151: IFFALSE 59242
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59153: LD_EXP 60
59157: PUSH
59158: LD_VAR 0 1
59162: ARRAY
59163: PUSH
59164: LD_VAR 0 2
59168: ARRAY
59169: PUSH
59170: LD_INT 1
59172: ARRAY
59173: PPUSH
59174: LD_EXP 60
59178: PUSH
59179: LD_VAR 0 1
59183: ARRAY
59184: PUSH
59185: LD_VAR 0 2
59189: ARRAY
59190: PUSH
59191: LD_INT 2
59193: ARRAY
59194: PPUSH
59195: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59199: LD_ADDR_EXP 60
59203: PUSH
59204: LD_EXP 60
59208: PPUSH
59209: LD_VAR 0 1
59213: PPUSH
59214: LD_EXP 60
59218: PUSH
59219: LD_VAR 0 1
59223: ARRAY
59224: PPUSH
59225: LD_VAR 0 2
59229: PPUSH
59230: CALL_OW 3
59234: PPUSH
59235: CALL_OW 1
59239: ST_TO_ADDR
// continue ;
59240: GO 59113
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59242: LD_ADDR_VAR 0 4
59246: PUSH
59247: LD_EXP 60
59251: PUSH
59252: LD_VAR 0 1
59256: ARRAY
59257: PUSH
59258: LD_VAR 0 2
59262: ARRAY
59263: PUSH
59264: LD_INT 1
59266: ARRAY
59267: PPUSH
59268: LD_EXP 60
59272: PUSH
59273: LD_VAR 0 1
59277: ARRAY
59278: PUSH
59279: LD_VAR 0 2
59283: ARRAY
59284: PUSH
59285: LD_INT 2
59287: ARRAY
59288: PPUSH
59289: CALL_OW 428
59293: ST_TO_ADDR
// if not tmp then
59294: LD_VAR 0 4
59298: NOT
59299: IFFALSE 59303
// continue ;
59301: GO 59113
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59303: LD_VAR 0 4
59307: PUSH
59308: LD_INT 81
59310: PUSH
59311: LD_VAR 0 3
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PPUSH
59320: CALL_OW 69
59324: IN
59325: IFFALSE 59375
59327: PUSH
59328: LD_EXP 60
59332: PUSH
59333: LD_VAR 0 1
59337: ARRAY
59338: PUSH
59339: LD_VAR 0 2
59343: ARRAY
59344: PUSH
59345: LD_INT 1
59347: ARRAY
59348: PPUSH
59349: LD_EXP 60
59353: PUSH
59354: LD_VAR 0 1
59358: ARRAY
59359: PUSH
59360: LD_VAR 0 2
59364: ARRAY
59365: PUSH
59366: LD_INT 2
59368: ARRAY
59369: PPUSH
59370: CALL_OW 458
59374: AND
59375: IFFALSE 59469
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59377: LD_EXP 60
59381: PUSH
59382: LD_VAR 0 1
59386: ARRAY
59387: PUSH
59388: LD_VAR 0 2
59392: ARRAY
59393: PUSH
59394: LD_INT 1
59396: ARRAY
59397: PPUSH
59398: LD_EXP 60
59402: PUSH
59403: LD_VAR 0 1
59407: ARRAY
59408: PUSH
59409: LD_VAR 0 2
59413: ARRAY
59414: PUSH
59415: LD_INT 2
59417: ARRAY
59418: PPUSH
59419: LD_VAR 0 3
59423: PPUSH
59424: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59428: LD_ADDR_EXP 60
59432: PUSH
59433: LD_EXP 60
59437: PPUSH
59438: LD_VAR 0 1
59442: PPUSH
59443: LD_EXP 60
59447: PUSH
59448: LD_VAR 0 1
59452: ARRAY
59453: PPUSH
59454: LD_VAR 0 2
59458: PPUSH
59459: CALL_OW 3
59463: PPUSH
59464: CALL_OW 1
59468: ST_TO_ADDR
// end ; end ;
59469: GO 59113
59471: POP
59472: POP
// end ;
59473: GO 58984
59475: POP
59476: POP
// end ;
59477: PPOPN 4
59479: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
59480: LD_INT 0
59482: PPUSH
59483: PPUSH
59484: PPUSH
59485: PPUSH
// result := false ;
59486: LD_ADDR_VAR 0 4
59490: PUSH
59491: LD_INT 0
59493: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59494: LD_VAR 0 1
59498: PPUSH
59499: CALL_OW 264
59503: PUSH
59504: LD_INT 81
59506: EQUAL
59507: NOT
59508: IFFALSE 59512
// exit ;
59510: GO 59882
// side := GetSide ( unit ) ;
59512: LD_ADDR_VAR 0 6
59516: PUSH
59517: LD_VAR 0 1
59521: PPUSH
59522: CALL_OW 255
59526: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
59527: LD_ADDR_VAR 0 5
59531: PUSH
59532: LD_EXP 59
59536: PPUSH
59537: LD_VAR 0 1
59541: PPUSH
59542: CALL 16543 0 2
59546: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59547: LD_EXP 60
59551: PUSH
59552: LD_VAR 0 5
59556: ARRAY
59557: PUSH
59558: LD_EXP 61
59562: GREATEREQUAL
59563: IFFALSE 59567
// exit ;
59565: GO 59882
// ComMoveXY ( unit , x , y ) ;
59567: LD_VAR 0 1
59571: PPUSH
59572: LD_VAR 0 2
59576: PPUSH
59577: LD_VAR 0 3
59581: PPUSH
59582: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59586: LD_INT 35
59588: PPUSH
59589: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59593: LD_VAR 0 1
59597: PPUSH
59598: LD_VAR 0 2
59602: PPUSH
59603: LD_VAR 0 3
59607: PPUSH
59608: CALL 48599 0 3
59612: NOT
59613: IFFALSE 59626
59615: PUSH
59616: LD_VAR 0 1
59620: PPUSH
59621: CALL_OW 314
59625: AND
59626: IFFALSE 59630
// exit ;
59628: GO 59882
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59630: LD_VAR 0 2
59634: PPUSH
59635: LD_VAR 0 3
59639: PPUSH
59640: CALL_OW 428
59644: PUSH
59645: LD_VAR 0 1
59649: EQUAL
59650: IFFALSE 59664
59652: PUSH
59653: LD_VAR 0 1
59657: PPUSH
59658: CALL_OW 314
59662: NOT
59663: AND
59664: IFFALSE 59586
// if MineAtPos ( x , y ) then
59666: LD_VAR 0 2
59670: PPUSH
59671: LD_VAR 0 3
59675: PPUSH
59676: CALL_OW 458
59680: IFFALSE 59684
// exit ;
59682: GO 59882
// if your_side = side then
59684: LD_OWVAR 2
59688: PUSH
59689: LD_VAR 0 6
59693: EQUAL
59694: IFFALSE 59713
// PlaySoundXY ( x , y , PlantMine ) ;
59696: LD_VAR 0 2
59700: PPUSH
59701: LD_VAR 0 3
59705: PPUSH
59706: LD_STRING PlantMine
59708: PPUSH
59709: CALL_OW 366
// repeat wait ( 1 ) ;
59713: LD_INT 1
59715: PPUSH
59716: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
59720: LD_VAR 0 2
59724: PPUSH
59725: LD_VAR 0 3
59729: PPUSH
59730: LD_VAR 0 6
59734: PPUSH
59735: LD_INT 0
59737: PPUSH
59738: CALL_OW 454
59742: IFFALSE 59713
// if MineAtPos ( x , y ) then
59744: LD_VAR 0 2
59748: PPUSH
59749: LD_VAR 0 3
59753: PPUSH
59754: CALL_OW 458
59758: IFFALSE 59874
// begin for i in minerMinesList [ index ] do
59760: LD_ADDR_VAR 0 7
59764: PUSH
59765: LD_EXP 60
59769: PUSH
59770: LD_VAR 0 5
59774: ARRAY
59775: PUSH
59776: FOR_IN
59777: IFFALSE 59819
// if i [ 1 ] = x and i [ 2 ] = y then
59779: LD_VAR 0 7
59783: PUSH
59784: LD_INT 1
59786: ARRAY
59787: PUSH
59788: LD_VAR 0 2
59792: EQUAL
59793: IFFALSE 59811
59795: PUSH
59796: LD_VAR 0 7
59800: PUSH
59801: LD_INT 2
59803: ARRAY
59804: PUSH
59805: LD_VAR 0 3
59809: EQUAL
59810: AND
59811: IFFALSE 59817
// exit ;
59813: POP
59814: POP
59815: GO 59882
59817: GO 59776
59819: POP
59820: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59821: LD_ADDR_EXP 60
59825: PUSH
59826: LD_EXP 60
59830: PPUSH
59831: LD_VAR 0 5
59835: PUSH
59836: LD_EXP 60
59840: PUSH
59841: LD_VAR 0 5
59845: ARRAY
59846: PUSH
59847: LD_INT 1
59849: PLUS
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PPUSH
59855: LD_VAR 0 2
59859: PUSH
59860: LD_VAR 0 3
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PPUSH
59869: CALL 16760 0 3
59873: ST_TO_ADDR
// end ; result := true ;
59874: LD_ADDR_VAR 0 4
59878: PUSH
59879: LD_INT 1
59881: ST_TO_ADDR
// end ;
59882: LD_VAR 0 4
59886: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59887: LD_INT 0
59889: PPUSH
59890: PPUSH
59891: PPUSH
// if not unit in minersList then
59892: LD_VAR 0 1
59896: PUSH
59897: LD_EXP 59
59901: IN
59902: NOT
59903: IFFALSE 59907
// exit ;
59905: GO 60114
// index := GetElementIndex ( minersList , unit ) ;
59907: LD_ADDR_VAR 0 6
59911: PUSH
59912: LD_EXP 59
59916: PPUSH
59917: LD_VAR 0 1
59921: PPUSH
59922: CALL 16543 0 2
59926: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59927: LD_ADDR_VAR 0 5
59931: PUSH
59932: DOUBLE
59933: LD_EXP 60
59937: PUSH
59938: LD_VAR 0 6
59942: ARRAY
59943: INC
59944: ST_TO_ADDR
59945: LD_INT 1
59947: PUSH
59948: FOR_DOWNTO
59949: IFFALSE 60112
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59951: LD_EXP 60
59955: PUSH
59956: LD_VAR 0 6
59960: ARRAY
59961: PUSH
59962: LD_VAR 0 5
59966: ARRAY
59967: PUSH
59968: LD_INT 1
59970: ARRAY
59971: PPUSH
59972: LD_EXP 60
59976: PUSH
59977: LD_VAR 0 6
59981: ARRAY
59982: PUSH
59983: LD_VAR 0 5
59987: ARRAY
59988: PUSH
59989: LD_INT 2
59991: ARRAY
59992: PPUSH
59993: LD_VAR 0 2
59997: PPUSH
59998: LD_VAR 0 3
60002: PPUSH
60003: CALL_OW 298
60007: PUSH
60008: LD_INT 6
60010: LESS
60011: IFFALSE 60110
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60013: LD_EXP 60
60017: PUSH
60018: LD_VAR 0 6
60022: ARRAY
60023: PUSH
60024: LD_VAR 0 5
60028: ARRAY
60029: PUSH
60030: LD_INT 1
60032: ARRAY
60033: PPUSH
60034: LD_EXP 60
60038: PUSH
60039: LD_VAR 0 6
60043: ARRAY
60044: PUSH
60045: LD_VAR 0 5
60049: ARRAY
60050: PUSH
60051: LD_INT 2
60053: ARRAY
60054: PPUSH
60055: LD_VAR 0 1
60059: PPUSH
60060: CALL_OW 255
60064: PPUSH
60065: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60069: LD_ADDR_EXP 60
60073: PUSH
60074: LD_EXP 60
60078: PPUSH
60079: LD_VAR 0 6
60083: PPUSH
60084: LD_EXP 60
60088: PUSH
60089: LD_VAR 0 6
60093: ARRAY
60094: PPUSH
60095: LD_VAR 0 5
60099: PPUSH
60100: CALL_OW 3
60104: PPUSH
60105: CALL_OW 1
60109: ST_TO_ADDR
// end ; end ;
60110: GO 59948
60112: POP
60113: POP
// end ;
60114: LD_VAR 0 4
60118: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60119: LD_INT 0
60121: PPUSH
60122: PPUSH
60123: PPUSH
60124: PPUSH
60125: PPUSH
60126: PPUSH
60127: PPUSH
60128: PPUSH
60129: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60130: LD_VAR 0 1
60134: PPUSH
60135: CALL_OW 264
60139: PUSH
60140: LD_INT 81
60142: EQUAL
60143: NOT
60144: IFTRUE 60159
60146: PUSH
60147: LD_VAR 0 1
60151: PUSH
60152: LD_EXP 59
60156: IN
60157: NOT
60158: OR
60159: IFFALSE 60163
// exit ;
60161: GO 60489
// index := GetElementIndex ( minersList , unit ) ;
60163: LD_ADDR_VAR 0 6
60167: PUSH
60168: LD_EXP 59
60172: PPUSH
60173: LD_VAR 0 1
60177: PPUSH
60178: CALL 16543 0 2
60182: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60183: LD_ADDR_VAR 0 8
60187: PUSH
60188: LD_EXP 61
60192: PUSH
60193: LD_EXP 60
60197: PUSH
60198: LD_VAR 0 6
60202: ARRAY
60203: MINUS
60204: ST_TO_ADDR
// if not minesFreeAmount then
60205: LD_VAR 0 8
60209: NOT
60210: IFFALSE 60214
// exit ;
60212: GO 60489
// tmp := [ ] ;
60214: LD_ADDR_VAR 0 7
60218: PUSH
60219: EMPTY
60220: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60221: LD_ADDR_VAR 0 5
60225: PUSH
60226: DOUBLE
60227: LD_INT 1
60229: DEC
60230: ST_TO_ADDR
60231: LD_VAR 0 8
60235: PUSH
60236: FOR_TO
60237: IFFALSE 60436
// begin _d := rand ( 0 , 5 ) ;
60239: LD_ADDR_VAR 0 11
60243: PUSH
60244: LD_INT 0
60246: PPUSH
60247: LD_INT 5
60249: PPUSH
60250: CALL_OW 12
60254: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60255: LD_ADDR_VAR 0 12
60259: PUSH
60260: LD_INT 2
60262: PPUSH
60263: LD_INT 6
60265: PPUSH
60266: CALL_OW 12
60270: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60271: LD_ADDR_VAR 0 9
60275: PUSH
60276: LD_VAR 0 2
60280: PPUSH
60281: LD_VAR 0 11
60285: PPUSH
60286: LD_VAR 0 12
60290: PPUSH
60291: CALL_OW 272
60295: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60296: LD_ADDR_VAR 0 10
60300: PUSH
60301: LD_VAR 0 3
60305: PPUSH
60306: LD_VAR 0 11
60310: PPUSH
60311: LD_VAR 0 12
60315: PPUSH
60316: CALL_OW 273
60320: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60321: LD_VAR 0 9
60325: PPUSH
60326: LD_VAR 0 10
60330: PPUSH
60331: CALL_OW 488
60335: IFFALSE 60359
60337: PUSH
60338: LD_VAR 0 9
60342: PUSH
60343: LD_VAR 0 10
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_VAR 0 7
60356: IN
60357: NOT
60358: AND
60359: IFFALSE 60378
60361: PUSH
60362: LD_VAR 0 9
60366: PPUSH
60367: LD_VAR 0 10
60371: PPUSH
60372: CALL_OW 458
60376: NOT
60377: AND
60378: IFFALSE 60420
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60380: LD_ADDR_VAR 0 7
60384: PUSH
60385: LD_VAR 0 7
60389: PPUSH
60390: LD_VAR 0 7
60394: PUSH
60395: LD_INT 1
60397: PLUS
60398: PPUSH
60399: LD_VAR 0 9
60403: PUSH
60404: LD_VAR 0 10
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PPUSH
60413: CALL_OW 1
60417: ST_TO_ADDR
60418: GO 60434
// i := i - 1 ;
60420: LD_ADDR_VAR 0 5
60424: PUSH
60425: LD_VAR 0 5
60429: PUSH
60430: LD_INT 1
60432: MINUS
60433: ST_TO_ADDR
// end ;
60434: GO 60236
60436: POP
60437: POP
// for i in tmp do
60438: LD_ADDR_VAR 0 5
60442: PUSH
60443: LD_VAR 0 7
60447: PUSH
60448: FOR_IN
60449: IFFALSE 60487
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60451: LD_VAR 0 1
60455: PPUSH
60456: LD_VAR 0 5
60460: PUSH
60461: LD_INT 1
60463: ARRAY
60464: PPUSH
60465: LD_VAR 0 5
60469: PUSH
60470: LD_INT 2
60472: ARRAY
60473: PPUSH
60474: CALL 59480 0 3
60478: NOT
60479: IFFALSE 60485
// exit ;
60481: POP
60482: POP
60483: GO 60489
60485: GO 60448
60487: POP
60488: POP
// end ;
60489: LD_VAR 0 4
60493: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60494: LD_INT 0
60496: PPUSH
60497: PPUSH
60498: PPUSH
60499: PPUSH
60500: PPUSH
60501: PPUSH
60502: PPUSH
60503: PPUSH
60504: PPUSH
// if GetClass ( unit ) <> class_sniper then
60505: LD_VAR 0 1
60509: PPUSH
60510: CALL_OW 257
60514: PUSH
60515: LD_INT 5
60517: NONEQUAL
60518: IFFALSE 60522
// exit ;
60520: GO 60992
// dist := 8 ;
60522: LD_ADDR_VAR 0 5
60526: PUSH
60527: LD_INT 8
60529: ST_TO_ADDR
// viewRange := 12 ;
60530: LD_ADDR_VAR 0 8
60534: PUSH
60535: LD_INT 12
60537: ST_TO_ADDR
// side := GetSide ( unit ) ;
60538: LD_ADDR_VAR 0 6
60542: PUSH
60543: LD_VAR 0 1
60547: PPUSH
60548: CALL_OW 255
60552: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60553: LD_INT 61
60555: PPUSH
60556: LD_VAR 0 6
60560: PPUSH
60561: CALL_OW 321
60565: PUSH
60566: LD_INT 2
60568: EQUAL
60569: IFFALSE 60579
// viewRange := 16 ;
60571: LD_ADDR_VAR 0 8
60575: PUSH
60576: LD_INT 16
60578: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60579: LD_VAR 0 1
60583: PPUSH
60584: LD_VAR 0 2
60588: PPUSH
60589: LD_VAR 0 3
60593: PPUSH
60594: CALL_OW 297
60598: PUSH
60599: LD_VAR 0 5
60603: GREATER
60604: IFFALSE 60683
// begin ComMoveXY ( unit , x , y ) ;
60606: LD_VAR 0 1
60610: PPUSH
60611: LD_VAR 0 2
60615: PPUSH
60616: LD_VAR 0 3
60620: PPUSH
60621: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60625: LD_INT 35
60627: PPUSH
60628: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60632: LD_VAR 0 1
60636: PPUSH
60637: LD_VAR 0 2
60641: PPUSH
60642: LD_VAR 0 3
60646: PPUSH
60647: CALL 48599 0 3
60651: NOT
60652: IFFALSE 60656
// exit ;
60654: GO 60992
// until GetDistUnitXY ( unit , x , y ) < dist ;
60656: LD_VAR 0 1
60660: PPUSH
60661: LD_VAR 0 2
60665: PPUSH
60666: LD_VAR 0 3
60670: PPUSH
60671: CALL_OW 297
60675: PUSH
60676: LD_VAR 0 5
60680: LESS
60681: IFFALSE 60625
// end ; ComTurnXY ( unit , x , y ) ;
60683: LD_VAR 0 1
60687: PPUSH
60688: LD_VAR 0 2
60692: PPUSH
60693: LD_VAR 0 3
60697: PPUSH
60698: CALL_OW 118
// repeat if Multiplayer then
60702: LD_OWVAR 4
60706: IFFALSE 60717
// wait ( 35 ) else
60708: LD_INT 35
60710: PPUSH
60711: CALL_OW 67
60715: GO 60724
// wait ( 5 ) ;
60717: LD_INT 5
60719: PPUSH
60720: CALL_OW 67
// _d := GetDir ( unit ) ;
60724: LD_ADDR_VAR 0 11
60728: PUSH
60729: LD_VAR 0 1
60733: PPUSH
60734: CALL_OW 254
60738: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60739: LD_ADDR_VAR 0 7
60743: PUSH
60744: LD_VAR 0 1
60748: PPUSH
60749: CALL_OW 250
60753: PPUSH
60754: LD_VAR 0 1
60758: PPUSH
60759: CALL_OW 251
60763: PPUSH
60764: LD_VAR 0 2
60768: PPUSH
60769: LD_VAR 0 3
60773: PPUSH
60774: CALL 51235 0 4
60778: ST_TO_ADDR
// until dir = _d ;
60779: LD_VAR 0 7
60783: PUSH
60784: LD_VAR 0 11
60788: EQUAL
60789: IFFALSE 60702
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60791: LD_ADDR_VAR 0 9
60795: PUSH
60796: LD_VAR 0 1
60800: PPUSH
60801: CALL_OW 250
60805: PPUSH
60806: LD_VAR 0 7
60810: PPUSH
60811: LD_VAR 0 5
60815: PPUSH
60816: CALL_OW 272
60820: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60821: LD_ADDR_VAR 0 10
60825: PUSH
60826: LD_VAR 0 1
60830: PPUSH
60831: CALL_OW 251
60835: PPUSH
60836: LD_VAR 0 7
60840: PPUSH
60841: LD_VAR 0 5
60845: PPUSH
60846: CALL_OW 273
60850: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60851: LD_VAR 0 9
60855: PPUSH
60856: LD_VAR 0 10
60860: PPUSH
60861: CALL_OW 488
60865: NOT
60866: IFFALSE 60870
// exit ;
60868: GO 60992
// ComAnimCustom ( unit , 1 ) ;
60870: LD_VAR 0 1
60874: PPUSH
60875: LD_INT 1
60877: PPUSH
60878: CALL_OW 592
// p := 0 ;
60882: LD_ADDR_VAR 0 12
60886: PUSH
60887: LD_INT 0
60889: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60890: LD_VAR 0 9
60894: PPUSH
60895: LD_VAR 0 10
60899: PPUSH
60900: LD_VAR 0 6
60904: PPUSH
60905: LD_VAR 0 8
60909: PPUSH
60910: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60914: LD_INT 35
60916: PPUSH
60917: CALL_OW 67
// p := Inc ( p ) ;
60921: LD_ADDR_VAR 0 12
60925: PUSH
60926: LD_VAR 0 12
60930: PPUSH
60931: CALL 51191 0 1
60935: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60936: LD_VAR 0 12
60940: PUSH
60941: LD_INT 3
60943: EQUAL
60944: IFTRUE 60958
60946: PUSH
60947: LD_VAR 0 1
60951: PPUSH
60952: CALL_OW 302
60956: NOT
60957: OR
60958: IFTRUE 60971
60960: PUSH
60961: LD_VAR 0 1
60965: PPUSH
60966: CALL_OW 301
60970: OR
60971: IFFALSE 60914
// RemoveSeeing ( _x , _y , side ) ;
60973: LD_VAR 0 9
60977: PPUSH
60978: LD_VAR 0 10
60982: PPUSH
60983: LD_VAR 0 6
60987: PPUSH
60988: CALL_OW 331
// end ;
60992: LD_VAR 0 4
60996: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
60997: LD_INT 0
60999: PPUSH
61000: PPUSH
61001: PPUSH
61002: PPUSH
61003: PPUSH
61004: PPUSH
61005: PPUSH
61006: PPUSH
61007: PPUSH
61008: PPUSH
61009: PPUSH
// if not unit then
61010: LD_VAR 0 1
61014: NOT
61015: IFFALSE 61019
// exit ;
61017: GO 61290
// side := GetSide ( unit ) ;
61019: LD_ADDR_VAR 0 3
61023: PUSH
61024: LD_VAR 0 1
61028: PPUSH
61029: CALL_OW 255
61033: ST_TO_ADDR
// x := GetX ( unit ) ;
61034: LD_ADDR_VAR 0 5
61038: PUSH
61039: LD_VAR 0 1
61043: PPUSH
61044: CALL_OW 250
61048: ST_TO_ADDR
// y := GetY ( unit ) ;
61049: LD_ADDR_VAR 0 6
61053: PUSH
61054: LD_VAR 0 1
61058: PPUSH
61059: CALL_OW 251
61063: ST_TO_ADDR
// r := 8 ;
61064: LD_ADDR_VAR 0 4
61068: PUSH
61069: LD_INT 8
61071: ST_TO_ADDR
// if x - r < 0 then
61072: LD_VAR 0 5
61076: PUSH
61077: LD_VAR 0 4
61081: MINUS
61082: PUSH
61083: LD_INT 0
61085: LESS
61086: IFFALSE 61098
// min_x := 0 else
61088: LD_ADDR_VAR 0 7
61092: PUSH
61093: LD_INT 0
61095: ST_TO_ADDR
61096: GO 61114
// min_x := x - r ;
61098: LD_ADDR_VAR 0 7
61102: PUSH
61103: LD_VAR 0 5
61107: PUSH
61108: LD_VAR 0 4
61112: MINUS
61113: ST_TO_ADDR
// if y - r < 0 then
61114: LD_VAR 0 6
61118: PUSH
61119: LD_VAR 0 4
61123: MINUS
61124: PUSH
61125: LD_INT 0
61127: LESS
61128: IFFALSE 61140
// min_y := 0 else
61130: LD_ADDR_VAR 0 8
61134: PUSH
61135: LD_INT 0
61137: ST_TO_ADDR
61138: GO 61156
// min_y := y - r ;
61140: LD_ADDR_VAR 0 8
61144: PUSH
61145: LD_VAR 0 6
61149: PUSH
61150: LD_VAR 0 4
61154: MINUS
61155: ST_TO_ADDR
// max_x := x + r ;
61156: LD_ADDR_VAR 0 9
61160: PUSH
61161: LD_VAR 0 5
61165: PUSH
61166: LD_VAR 0 4
61170: PLUS
61171: ST_TO_ADDR
// max_y := y + r ;
61172: LD_ADDR_VAR 0 10
61176: PUSH
61177: LD_VAR 0 6
61181: PUSH
61182: LD_VAR 0 4
61186: PLUS
61187: ST_TO_ADDR
// for _x = min_x to max_x do
61188: LD_ADDR_VAR 0 11
61192: PUSH
61193: DOUBLE
61194: LD_VAR 0 7
61198: DEC
61199: ST_TO_ADDR
61200: LD_VAR 0 9
61204: PUSH
61205: FOR_TO
61206: IFFALSE 61288
// for _y = min_y to max_y do
61208: LD_ADDR_VAR 0 12
61212: PUSH
61213: DOUBLE
61214: LD_VAR 0 8
61218: DEC
61219: ST_TO_ADDR
61220: LD_VAR 0 10
61224: PUSH
61225: FOR_TO
61226: IFFALSE 61284
// begin if not ValidHex ( _x , _y ) then
61228: LD_VAR 0 11
61232: PPUSH
61233: LD_VAR 0 12
61237: PPUSH
61238: CALL_OW 488
61242: NOT
61243: IFFALSE 61247
// continue ;
61245: GO 61225
// if MineAtPos ( _x , _y ) then
61247: LD_VAR 0 11
61251: PPUSH
61252: LD_VAR 0 12
61256: PPUSH
61257: CALL_OW 458
61261: IFFALSE 61282
// ViewMineAtPos ( _x , _y , side ) ;
61263: LD_VAR 0 11
61267: PPUSH
61268: LD_VAR 0 12
61272: PPUSH
61273: LD_VAR 0 3
61277: PPUSH
61278: CALL_OW 457
// end ;
61282: GO 61225
61284: POP
61285: POP
61286: GO 61205
61288: POP
61289: POP
// end ;
61290: LD_VAR 0 2
61294: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
61295: LD_INT 0
61297: PPUSH
61298: PPUSH
61299: PPUSH
61300: PPUSH
61301: PPUSH
61302: PPUSH
61303: PPUSH
// if not units then
61304: LD_VAR 0 1
61308: NOT
61309: IFFALSE 61313
// exit ;
61311: GO 61777
// scaners := [ ] ;
61313: LD_ADDR_VAR 0 6
61317: PUSH
61318: EMPTY
61319: ST_TO_ADDR
// for i in units do
61320: LD_ADDR_VAR 0 3
61324: PUSH
61325: LD_VAR 0 1
61329: PUSH
61330: FOR_IN
61331: IFFALSE 61488
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
61333: LD_VAR 0 3
61337: PPUSH
61338: CALL_OW 264
61342: PUSH
61343: LD_INT 11
61345: NONEQUAL
61346: IFTRUE 61360
61348: PUSH
61349: LD_VAR 0 3
61353: PPUSH
61354: CALL_OW 302
61358: NOT
61359: OR
61360: IFTRUE 61377
61362: PUSH
61363: LD_VAR 0 3
61367: PPUSH
61368: CALL_OW 110
61372: PUSH
61373: LD_INT 502
61375: EQUAL
61376: OR
61377: IFFALSE 61381
// continue ;
61379: GO 61330
// ComStop ( i ) ;
61381: LD_VAR 0 3
61385: PPUSH
61386: CALL_OW 141
// x := GetX ( i ) ;
61390: LD_ADDR_VAR 0 4
61394: PUSH
61395: LD_VAR 0 3
61399: PPUSH
61400: CALL_OW 250
61404: ST_TO_ADDR
// y := GetY ( i ) ;
61405: LD_ADDR_VAR 0 5
61409: PUSH
61410: LD_VAR 0 3
61414: PPUSH
61415: CALL_OW 251
61419: ST_TO_ADDR
// if GetSide ( i ) = your_side then
61420: LD_VAR 0 3
61424: PPUSH
61425: CALL_OW 255
61429: PUSH
61430: LD_OWVAR 2
61434: EQUAL
61435: IFFALSE 61454
// PlaySoundXY ( x , y , mineDetector ) ;
61437: LD_VAR 0 4
61441: PPUSH
61442: LD_VAR 0 5
61446: PPUSH
61447: LD_STRING mineDetector
61449: PPUSH
61450: CALL_OW 366
// scaners := Join ( scaners , i ) ;
61454: LD_ADDR_VAR 0 6
61458: PUSH
61459: LD_VAR 0 6
61463: PPUSH
61464: LD_VAR 0 3
61468: PPUSH
61469: CALL 49818 0 2
61473: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
61474: LD_VAR 0 3
61478: PPUSH
61479: LD_INT 502
61481: PPUSH
61482: CALL_OW 109
// end ;
61486: GO 61330
61488: POP
61489: POP
// if not scaners then
61490: LD_VAR 0 6
61494: NOT
61495: IFFALSE 61499
// exit ;
61497: GO 61777
// wait ( 3 ) ;
61499: LD_INT 3
61501: PPUSH
61502: CALL_OW 67
// timer := 6 ;
61506: LD_ADDR_VAR 0 7
61510: PUSH
61511: LD_INT 6
61513: ST_TO_ADDR
// repeat for i in scaners do
61514: LD_ADDR_VAR 0 3
61518: PUSH
61519: LD_VAR 0 6
61523: PUSH
61524: FOR_IN
61525: IFFALSE 61675
// begin side := GetSide ( i ) ;
61527: LD_ADDR_VAR 0 8
61531: PUSH
61532: LD_VAR 0 3
61536: PPUSH
61537: CALL_OW 255
61541: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
61542: LD_VAR 0 3
61546: PPUSH
61547: CALL_OW 302
61551: NOT
61552: IFTRUE 61565
61554: PUSH
61555: LD_VAR 0 3
61559: PPUSH
61560: CALL_OW 314
61564: OR
61565: IFTRUE 61596
61567: PUSH
61568: LD_VAR 0 3
61572: PPUSH
61573: CALL_OW 263
61577: PUSH
61578: LD_INT 1
61580: EQUAL
61581: IFFALSE 61595
61583: PUSH
61584: LD_VAR 0 3
61588: PPUSH
61589: CALL_OW 311
61593: NOT
61594: AND
61595: OR
61596: IFFALSE 61640
// begin SetUnitDisplayNumber ( i , 0 ) ;
61598: LD_VAR 0 3
61602: PPUSH
61603: LD_INT 0
61605: PPUSH
61606: CALL_OW 505
// SetTag ( i , 0 ) ;
61610: LD_VAR 0 3
61614: PPUSH
61615: LD_INT 0
61617: PPUSH
61618: CALL_OW 109
// scaners := scaners diff i ;
61622: LD_ADDR_VAR 0 6
61626: PUSH
61627: LD_VAR 0 6
61631: PUSH
61632: LD_VAR 0 3
61636: DIFF
61637: ST_TO_ADDR
// continue ;
61638: GO 61524
// end ; if side in [ your_side , 9 ] then
61640: LD_VAR 0 8
61644: PUSH
61645: LD_OWVAR 2
61649: PUSH
61650: LD_INT 9
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: IN
61657: IFFALSE 61673
// SetUnitDisplayNumber ( i , timer ) ;
61659: LD_VAR 0 3
61663: PPUSH
61664: LD_VAR 0 7
61668: PPUSH
61669: CALL_OW 505
// end ;
61673: GO 61524
61675: POP
61676: POP
// if not scaners then
61677: LD_VAR 0 6
61681: NOT
61682: IFFALSE 61686
// exit ;
61684: GO 61777
// timer := Dec ( timer ) ;
61686: LD_ADDR_VAR 0 7
61690: PUSH
61691: LD_VAR 0 7
61695: PPUSH
61696: CALL 51213 0 1
61700: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61701: LD_INT 35
61703: PPUSH
61704: CALL_OW 67
// until timer = 0 ;
61708: LD_VAR 0 7
61712: PUSH
61713: LD_INT 0
61715: EQUAL
61716: IFFALSE 61514
// if not scaners then
61718: LD_VAR 0 6
61722: NOT
61723: IFFALSE 61727
// exit ;
61725: GO 61777
// for i in scaners do
61727: LD_ADDR_VAR 0 3
61731: PUSH
61732: LD_VAR 0 6
61736: PUSH
61737: FOR_IN
61738: IFFALSE 61775
// begin SetUnitDisplayNumber ( i , 0 ) ;
61740: LD_VAR 0 3
61744: PPUSH
61745: LD_INT 0
61747: PPUSH
61748: CALL_OW 505
// SetTag ( i , 0 ) ;
61752: LD_VAR 0 3
61756: PPUSH
61757: LD_INT 0
61759: PPUSH
61760: CALL_OW 109
// RevealDetectorMine ( i ) ;
61764: LD_VAR 0 3
61768: PPUSH
61769: CALL 60997 0 1
// end ;
61773: GO 61737
61775: POP
61776: POP
// end ;
61777: LD_VAR 0 2
61781: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
61782: LD_INT 0
61784: PPUSH
// if p1 = mine_detector_mode then
61785: LD_VAR 0 2
61789: PUSH
61790: LD_INT 103
61792: EQUAL
61793: IFFALSE 61804
// DetectMine ( units ) ;
61795: LD_VAR 0 1
61799: PPUSH
61800: CALL 61295 0 1
// end ; end_of_file
61804: LD_VAR 0 7
61808: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
61809: LD_EXP 41
61813: IFFALSE 62154
61815: GO 61817
61817: DISABLE
61818: LD_INT 0
61820: PPUSH
61821: PPUSH
61822: PPUSH
// begin mpKingPoints := [ ] ;
61823: LD_ADDR_EXP 62
61827: PUSH
61828: EMPTY
61829: ST_TO_ADDR
// if mpTeamGame then
61830: LD_EXP 13
61834: IFFALSE 61888
// begin for i := 1 to Count ( mpTeams ) do
61836: LD_ADDR_VAR 0 1
61840: PUSH
61841: DOUBLE
61842: LD_INT 1
61844: DEC
61845: ST_TO_ADDR
61846: LD_EXP 12
61850: PPUSH
61851: CALL 13842 0 1
61855: PUSH
61856: FOR_TO
61857: IFFALSE 61884
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61859: LD_ADDR_EXP 62
61863: PUSH
61864: LD_EXP 62
61868: PPUSH
61869: LD_VAR 0 1
61873: PPUSH
61874: LD_INT 0
61876: PPUSH
61877: CALL_OW 1
61881: ST_TO_ADDR
61882: GO 61856
61884: POP
61885: POP
// end else
61886: GO 61931
// begin for i := 1 to 8 do
61888: LD_ADDR_VAR 0 1
61892: PUSH
61893: DOUBLE
61894: LD_INT 1
61896: DEC
61897: ST_TO_ADDR
61898: LD_INT 8
61900: PUSH
61901: FOR_TO
61902: IFFALSE 61929
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61904: LD_ADDR_EXP 62
61908: PUSH
61909: LD_EXP 62
61913: PPUSH
61914: LD_VAR 0 1
61918: PPUSH
61919: LD_INT 0
61921: PPUSH
61922: CALL_OW 1
61926: ST_TO_ADDR
61927: GO 61901
61929: POP
61930: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
61931: LD_ADDR_VAR 0 3
61935: PUSH
61936: LD_EXP 2
61940: PPUSH
61941: LD_INT 0
61943: PPUSH
61944: CALL_OW 517
61948: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61949: LD_ADDR_VAR 0 1
61953: PUSH
61954: DOUBLE
61955: LD_INT 1
61957: DEC
61958: ST_TO_ADDR
61959: LD_VAR 0 3
61963: PUSH
61964: LD_INT 1
61966: ARRAY
61967: PUSH
61968: FOR_TO
61969: IFFALSE 62036
// for j := 1 to 8 do
61971: LD_ADDR_VAR 0 2
61975: PUSH
61976: DOUBLE
61977: LD_INT 1
61979: DEC
61980: ST_TO_ADDR
61981: LD_INT 8
61983: PUSH
61984: FOR_TO
61985: IFFALSE 62032
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
61987: LD_VAR 0 3
61991: PUSH
61992: LD_INT 1
61994: ARRAY
61995: PUSH
61996: LD_VAR 0 1
62000: ARRAY
62001: PPUSH
62002: LD_VAR 0 3
62006: PUSH
62007: LD_INT 2
62009: ARRAY
62010: PUSH
62011: LD_VAR 0 1
62015: ARRAY
62016: PPUSH
62017: LD_VAR 0 2
62021: PPUSH
62022: LD_INT 12
62024: NEG
62025: PPUSH
62026: CALL_OW 330
62030: GO 61984
62032: POP
62033: POP
62034: GO 61968
62036: POP
62037: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
62038: LD_EXP 36
62042: PPUSH
62043: LD_INT 1
62045: PPUSH
62046: CALL_OW 424
// UpdateCounter ;
62050: CALL 62660 0 0
// repeat wait ( 0 0$1 ) ;
62054: LD_INT 35
62056: PPUSH
62057: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62061: LD_ADDR_VAR 0 3
62065: PUSH
62066: LD_EXP 36
62070: PPUSH
62071: LD_INT 3
62073: PUSH
62074: LD_INT 57
62076: PUSH
62077: EMPTY
62078: LIST
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 50
62086: PUSH
62087: EMPTY
62088: LIST
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: LD_INT 30
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 30
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: LIST
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: LIST
62122: PPUSH
62123: CALL_OW 70
62127: ST_TO_ADDR
// if not tmp then
62128: LD_VAR 0 3
62132: NOT
62133: IFFALSE 62137
// continue ;
62135: GO 62054
// AddPoints ( tmp ) ;
62137: LD_VAR 0 3
62141: PPUSH
62142: CALL 62338 0 1
// UpdateCounter ;
62146: CALL 62660 0 0
// until false ;
62150: LD_INT 0
62152: IFFALSE 62054
// end ;
62154: PPOPN 3
62156: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
62157: LD_EXP 41
62161: IFFALSE 62169
62163: PUSH
62164: LD_EXP 39
62168: AND
62169: IFFALSE 62335
62171: GO 62173
62173: DISABLE
62174: LD_INT 0
62176: PPUSH
62177: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
62178: LD_ADDR_VAR 0 2
62182: PUSH
62183: LD_EXP 2
62187: PPUSH
62188: LD_INT 0
62190: PPUSH
62191: CALL_OW 517
62195: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
62196: LD_ADDR_VAR 0 1
62200: PUSH
62201: DOUBLE
62202: LD_INT 1
62204: DEC
62205: ST_TO_ADDR
62206: LD_VAR 0 2
62210: PUSH
62211: LD_INT 1
62213: ARRAY
62214: PUSH
62215: FOR_TO
62216: IFFALSE 62257
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
62218: LD_VAR 0 2
62222: PUSH
62223: LD_INT 1
62225: ARRAY
62226: PUSH
62227: LD_VAR 0 1
62231: ARRAY
62232: PPUSH
62233: LD_VAR 0 2
62237: PUSH
62238: LD_INT 2
62240: ARRAY
62241: PUSH
62242: LD_VAR 0 1
62246: ARRAY
62247: PPUSH
62248: LD_INT 125
62250: PPUSH
62251: CALL_OW 495
62255: GO 62215
62257: POP
62258: POP
// repeat wait ( mpEmissions ) ;
62259: LD_EXP 39
62263: PPUSH
62264: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
62268: LD_ADDR_VAR 0 1
62272: PUSH
62273: DOUBLE
62274: LD_INT 1
62276: DEC
62277: ST_TO_ADDR
62278: LD_VAR 0 2
62282: PUSH
62283: LD_INT 1
62285: ARRAY
62286: PUSH
62287: FOR_TO
62288: IFFALSE 62329
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
62290: LD_VAR 0 2
62294: PUSH
62295: LD_INT 1
62297: ARRAY
62298: PUSH
62299: LD_VAR 0 1
62303: ARRAY
62304: PPUSH
62305: LD_VAR 0 2
62309: PUSH
62310: LD_INT 2
62312: ARRAY
62313: PUSH
62314: LD_VAR 0 1
62318: ARRAY
62319: PPUSH
62320: LD_INT 15
62322: PPUSH
62323: CALL_OW 495
62327: GO 62287
62329: POP
62330: POP
// until false ;
62331: LD_INT 0
62333: IFFALSE 62259
// end ;
62335: PPOPN 2
62337: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
62338: LD_INT 0
62340: PPUSH
62341: PPUSH
62342: PPUSH
62343: PPUSH
62344: PPUSH
// if mpTeamGame then
62345: LD_EXP 13
62349: IFFALSE 62546
// begin first := depots [ 1 ] ;
62351: LD_ADDR_VAR 0 4
62355: PUSH
62356: LD_VAR 0 1
62360: PUSH
62361: LD_INT 1
62363: ARRAY
62364: ST_TO_ADDR
// side := GetSide ( first ) ;
62365: LD_ADDR_VAR 0 6
62369: PUSH
62370: LD_VAR 0 4
62374: PPUSH
62375: CALL_OW 255
62379: ST_TO_ADDR
// for i := 1 to mpTeams do
62380: LD_ADDR_VAR 0 3
62384: PUSH
62385: DOUBLE
62386: LD_INT 1
62388: DEC
62389: ST_TO_ADDR
62390: LD_EXP 12
62394: PUSH
62395: FOR_TO
62396: IFFALSE 62430
// if side in mpTeams [ i ] then
62398: LD_VAR 0 6
62402: PUSH
62403: LD_EXP 12
62407: PUSH
62408: LD_VAR 0 3
62412: ARRAY
62413: IN
62414: IFFALSE 62428
// begin team := i ;
62416: LD_ADDR_VAR 0 5
62420: PUSH
62421: LD_VAR 0 3
62425: ST_TO_ADDR
// break ;
62426: GO 62430
// end ;
62428: GO 62395
62430: POP
62431: POP
// if not team then
62432: LD_VAR 0 5
62436: NOT
62437: IFFALSE 62441
// exit ;
62439: GO 62655
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62441: LD_EXP 36
62445: PPUSH
62446: LD_INT 81
62448: PUSH
62449: LD_VAR 0 6
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PPUSH
62458: CALL_OW 70
62462: IFFALSE 62466
// exit ;
62464: GO 62655
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
62466: LD_ADDR_EXP 62
62470: PUSH
62471: LD_EXP 62
62475: PPUSH
62476: LD_VAR 0 5
62480: PPUSH
62481: LD_EXP 62
62485: PUSH
62486: LD_VAR 0 5
62490: ARRAY
62491: PUSH
62492: LD_INT 1
62494: PLUS
62495: PPUSH
62496: CALL_OW 1
62500: ST_TO_ADDR
// for i in mpTeams [ team ] do
62501: LD_ADDR_VAR 0 3
62505: PUSH
62506: LD_EXP 12
62510: PUSH
62511: LD_VAR 0 5
62515: ARRAY
62516: PUSH
62517: FOR_IN
62518: IFFALSE 62542
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
62520: LD_VAR 0 3
62524: PPUSH
62525: LD_EXP 62
62529: PUSH
62530: LD_VAR 0 5
62534: ARRAY
62535: PPUSH
62536: CALL_OW 506
62540: GO 62517
62542: POP
62543: POP
// end else
62544: GO 62655
// begin first := depots [ 1 ] ;
62546: LD_ADDR_VAR 0 4
62550: PUSH
62551: LD_VAR 0 1
62555: PUSH
62556: LD_INT 1
62558: ARRAY
62559: ST_TO_ADDR
// side := GetSide ( first ) ;
62560: LD_ADDR_VAR 0 6
62564: PUSH
62565: LD_VAR 0 4
62569: PPUSH
62570: CALL_OW 255
62574: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62575: LD_EXP 36
62579: PPUSH
62580: LD_INT 81
62582: PUSH
62583: LD_VAR 0 6
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PPUSH
62592: CALL_OW 70
62596: IFFALSE 62600
// exit ;
62598: GO 62655
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
62600: LD_ADDR_EXP 62
62604: PUSH
62605: LD_EXP 62
62609: PPUSH
62610: LD_VAR 0 6
62614: PPUSH
62615: LD_EXP 62
62619: PUSH
62620: LD_VAR 0 6
62624: ARRAY
62625: PUSH
62626: LD_INT 1
62628: PLUS
62629: PPUSH
62630: CALL_OW 1
62634: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
62635: LD_VAR 0 6
62639: PPUSH
62640: LD_EXP 62
62644: PUSH
62645: LD_VAR 0 6
62649: ARRAY
62650: PPUSH
62651: CALL_OW 506
// end ; end ;
62655: LD_VAR 0 2
62659: RET
// function UpdateCounter ; var i ; begin
62660: LD_INT 0
62662: PPUSH
62663: PPUSH
// result := [ ] ;
62664: LD_ADDR_VAR 0 1
62668: PUSH
62669: EMPTY
62670: ST_TO_ADDR
// if mpTeamGame then
62671: LD_EXP 13
62675: IFFALSE 62742
// begin for i := 1 to mpTeams do
62677: LD_ADDR_VAR 0 2
62681: PUSH
62682: DOUBLE
62683: LD_INT 1
62685: DEC
62686: ST_TO_ADDR
62687: LD_EXP 12
62691: PUSH
62692: FOR_TO
62693: IFFALSE 62738
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
62695: LD_ADDR_VAR 0 1
62699: PUSH
62700: LD_VAR 0 1
62704: PUSH
62705: LD_STRING #KingoftheHill-Team
62707: PUSH
62708: LD_VAR 0 2
62712: PUSH
62713: LD_EXP 62
62717: PUSH
62718: LD_VAR 0 2
62722: ARRAY
62723: PUSH
62724: LD_EXP 37
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: ADD
62735: ST_TO_ADDR
62736: GO 62692
62738: POP
62739: POP
// end else
62740: GO 62815
// begin for i := 1 to 8 do
62742: LD_ADDR_VAR 0 2
62746: PUSH
62747: DOUBLE
62748: LD_INT 1
62750: DEC
62751: ST_TO_ADDR
62752: LD_INT 8
62754: PUSH
62755: FOR_TO
62756: IFFALSE 62813
// if mpSidePositions [ i ] then
62758: LD_EXP 9
62762: PUSH
62763: LD_VAR 0 2
62767: ARRAY
62768: IFFALSE 62811
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
62770: LD_ADDR_VAR 0 1
62774: PUSH
62775: LD_VAR 0 1
62779: PUSH
62780: LD_STRING #KingoftheHill-Player
62782: PUSH
62783: LD_VAR 0 2
62787: PUSH
62788: LD_EXP 62
62792: PUSH
62793: LD_VAR 0 2
62797: ARRAY
62798: PUSH
62799: LD_EXP 37
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: ADD
62810: ST_TO_ADDR
62811: GO 62755
62813: POP
62814: POP
// end ; mpDisplayStrings := result ;
62815: LD_ADDR_EXP 40
62819: PUSH
62820: LD_VAR 0 1
62824: ST_TO_ADDR
// end ;
62825: LD_VAR 0 1
62829: RET
// export function HowMuchPointsKing ( side ) ; begin
62830: LD_INT 0
62832: PPUSH
// result := HowMuchPoints ( side ) ;
62833: LD_ADDR_VAR 0 2
62837: PUSH
62838: LD_VAR 0 1
62842: PPUSH
62843: CALL 62853 0 1
62847: ST_TO_ADDR
// end ;
62848: LD_VAR 0 2
62852: RET
// function HowMuchPoints ( side ) ; var i ; begin
62853: LD_INT 0
62855: PPUSH
62856: PPUSH
// if mpTeamGame then
62857: LD_EXP 13
62861: IFFALSE 62930
// begin for i := 1 to Count ( mpTeams ) do
62863: LD_ADDR_VAR 0 3
62867: PUSH
62868: DOUBLE
62869: LD_INT 1
62871: DEC
62872: ST_TO_ADDR
62873: LD_EXP 12
62877: PPUSH
62878: CALL 13842 0 1
62882: PUSH
62883: FOR_TO
62884: IFFALSE 62926
// begin if side in mpTeams [ i ] then
62886: LD_VAR 0 1
62890: PUSH
62891: LD_EXP 12
62895: PUSH
62896: LD_VAR 0 3
62900: ARRAY
62901: IN
62902: IFFALSE 62924
// begin result := mpKingPoints [ i ] ;
62904: LD_ADDR_VAR 0 2
62908: PUSH
62909: LD_EXP 62
62913: PUSH
62914: LD_VAR 0 3
62918: ARRAY
62919: ST_TO_ADDR
// exit ;
62920: POP
62921: POP
62922: GO 62946
// end ; end ;
62924: GO 62883
62926: POP
62927: POP
// end else
62928: GO 62946
// result := mpKingPoints [ side ] ;
62930: LD_ADDR_VAR 0 2
62934: PUSH
62935: LD_EXP 62
62939: PUSH
62940: LD_VAR 0 1
62944: ARRAY
62945: ST_TO_ADDR
// end ;
62946: LD_VAR 0 2
62950: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
62951: LD_EXP 41
62955: IFFALSE 62963
62957: PUSH
62958: CALL 63375 0 0
62962: AND
62963: IFFALSE 62971
62965: PUSH
62966: LD_OWVAR 4
62970: AND
62971: IFFALSE 63224
62973: GO 62975
62975: DISABLE
62976: LD_INT 0
62978: PPUSH
62979: PPUSH
// begin canWin := false ;
62980: LD_ADDR_VAR 0 2
62984: PUSH
62985: LD_INT 0
62987: ST_TO_ADDR
// if not HasPower ( your_side ) then
62988: LD_OWVAR 2
62992: PPUSH
62993: CALL 63417 0 1
62997: NOT
62998: IFFALSE 63009
// begin Multiplayer_Loose_Message ;
63000: CALL_OW 521
// enable ( mpLose ) ;
63004: LD_INT 102
63006: ENABLE_MARKED
// end else
63007: GO 63224
// begin if not EnemiesInGame then
63009: CALL 63227 0 0
63013: NOT
63014: IFFALSE 63021
// begin enable ( mpWin ) ;
63016: LD_INT 101
63018: ENABLE_MARKED
// exit ;
63019: GO 63224
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
63021: LD_ADDR_VAR 0 2
63025: PUSH
63026: LD_OWVAR 2
63030: PPUSH
63031: CALL 62853 0 1
63035: PUSH
63036: LD_EXP 37
63040: GREATEREQUAL
63041: IFFALSE 63054
63043: PUSH
63044: LD_OWVAR 2
63048: PPUSH
63049: CALL 63417 0 1
63053: AND
63054: ST_TO_ADDR
// for i := 1 to 8 do
63055: LD_ADDR_VAR 0 1
63059: PUSH
63060: DOUBLE
63061: LD_INT 1
63063: DEC
63064: ST_TO_ADDR
63065: LD_INT 8
63067: PUSH
63068: FOR_TO
63069: IFFALSE 63210
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
63071: LD_EXP 9
63075: PUSH
63076: LD_VAR 0 1
63080: ARRAY
63081: IFFALSE 63094
63083: PUSH
63084: LD_VAR 0 1
63088: PPUSH
63089: CALL_OW 108
63093: AND
63094: IFFALSE 63108
63096: PUSH
63097: LD_VAR 0 1
63101: PUSH
63102: LD_OWVAR 2
63106: NONEQUAL
63107: AND
63108: IFFALSE 63208
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
63110: LD_EXP 10
63114: PUSH
63115: LD_VAR 0 1
63119: ARRAY
63120: NOT
63121: IFTRUE 63169
63123: PUSH
63124: LD_EXP 10
63128: PUSH
63129: LD_VAR 0 1
63133: ARRAY
63134: PUSH
63135: LD_EXP 10
63139: PUSH
63140: LD_OWVAR 2
63144: ARRAY
63145: NONEQUAL
63146: IFFALSE 63168
63148: PUSH
63149: LD_OWVAR 2
63153: PPUSH
63154: LD_VAR 0 1
63158: PPUSH
63159: CALL_OW 81
63163: PUSH
63164: LD_INT 1
63166: NONEQUAL
63167: AND
63168: OR
63169: IFFALSE 63208
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
63171: LD_VAR 0 1
63175: PPUSH
63176: CALL 62853 0 1
63180: PUSH
63181: LD_EXP 37
63185: GREATEREQUAL
63186: IFFALSE 63199
63188: PUSH
63189: LD_VAR 0 1
63193: PPUSH
63194: CALL 63417 0 1
63198: AND
63199: IFFALSE 63208
// begin enable ( mpLose ) ;
63201: LD_INT 102
63203: ENABLE_MARKED
// exit ;
63204: POP
63205: POP
63206: GO 63224
// end ;
63208: GO 63068
63210: POP
63211: POP
// if canWin then
63212: LD_VAR 0 2
63216: IFFALSE 63223
// enable ( mpWin ) else
63218: LD_INT 101
63220: ENABLE_MARKED
63221: GO 63224
// enable ;
63223: ENABLE
// end ; end ;
63224: PPOPN 2
63226: END
// function EnemiesInGame ; var i ; begin
63227: LD_INT 0
63229: PPUSH
63230: PPUSH
// result := false ;
63231: LD_ADDR_VAR 0 1
63235: PUSH
63236: LD_INT 0
63238: ST_TO_ADDR
// for i := 1 to 8 do
63239: LD_ADDR_VAR 0 2
63243: PUSH
63244: DOUBLE
63245: LD_INT 1
63247: DEC
63248: ST_TO_ADDR
63249: LD_INT 8
63251: PUSH
63252: FOR_TO
63253: IFFALSE 63368
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
63255: LD_VAR 0 2
63259: PUSH
63260: LD_OWVAR 2
63264: NONEQUAL
63265: IFFALSE 63278
63267: PUSH
63268: LD_VAR 0 2
63272: PPUSH
63273: CALL 63417 0 1
63277: AND
63278: IFFALSE 63291
63280: PUSH
63281: LD_VAR 0 2
63285: PPUSH
63286: CALL_OW 108
63290: AND
63291: IFFALSE 63366
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
63293: LD_EXP 10
63297: PUSH
63298: LD_VAR 0 2
63302: ARRAY
63303: NOT
63304: IFTRUE 63352
63306: PUSH
63307: LD_EXP 10
63311: PUSH
63312: LD_VAR 0 2
63316: ARRAY
63317: PUSH
63318: LD_EXP 10
63322: PUSH
63323: LD_OWVAR 2
63327: ARRAY
63328: NONEQUAL
63329: IFFALSE 63351
63331: PUSH
63332: LD_OWVAR 2
63336: PPUSH
63337: LD_VAR 0 2
63341: PPUSH
63342: CALL_OW 81
63346: PUSH
63347: LD_INT 1
63349: NONEQUAL
63350: AND
63351: OR
63352: IFFALSE 63366
// begin result := true ;
63354: LD_ADDR_VAR 0 1
63358: PUSH
63359: LD_INT 1
63361: ST_TO_ADDR
// exit ;
63362: POP
63363: POP
63364: GO 63370
// end ;
63366: GO 63252
63368: POP
63369: POP
// end ;
63370: LD_VAR 0 1
63374: RET
// function CanWinLoose ; begin
63375: LD_INT 0
63377: PPUSH
// result := true ;
63378: LD_ADDR_VAR 0 1
63382: PUSH
63383: LD_INT 1
63385: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
63386: CALL_OW 531
63390: IFFALSE 63402
63392: PUSH
63393: CALL_OW 519
63397: PUSH
63398: LD_INT 1
63400: GREATER
63401: AND
63402: IFFALSE 63412
// result := false ;
63404: LD_ADDR_VAR 0 1
63408: PUSH
63409: LD_INT 0
63411: ST_TO_ADDR
// end ;
63412: LD_VAR 0 1
63416: RET
// function HasPower ( i ) ; begin
63417: LD_INT 0
63419: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
63420: LD_ADDR_VAR 0 2
63424: PUSH
63425: LD_INT 22
63427: PUSH
63428: LD_VAR 0 1
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 2
63439: PUSH
63440: LD_INT 21
63442: PUSH
63443: LD_INT 1
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 33
63452: PUSH
63453: LD_INT 3
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 33
63462: PUSH
63463: LD_INT 5
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PPUSH
63480: CALL_OW 69
63484: ST_TO_ADDR
// end ; end_of_file
63485: LD_VAR 0 2
63489: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63490: PPOPN 6
63492: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63493: LD_INT 0
63495: PPUSH
// begin if not units then
63496: LD_VAR 0 1
63500: NOT
63501: IFFALSE 63505
// exit ;
63503: GO 63539
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63505: LD_VAR 0 1
63509: PPUSH
63510: LD_VAR 0 2
63514: PPUSH
63515: LD_VAR 0 3
63519: PPUSH
63520: LD_VAR 0 4
63524: PPUSH
63525: LD_VAR 0 5
63529: PPUSH
63530: LD_VAR 0 6
63534: PPUSH
63535: CALL 61782 0 6
// end ;
63539: PPOPN 7
63541: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63542: LD_EXP 5
63546: PUSH
63547: LD_INT 4
63549: EQUAL
63550: IFFALSE 63586
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63552: LD_STRING setGameDifficulty(
63554: PUSH
63555: LD_OWVAR 67
63559: STR
63560: PUSH
63561: LD_STRING )
63563: STR
63564: PPUSH
63565: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63569: LD_STRING displayDifficulty(
63571: PUSH
63572: LD_OWVAR 67
63576: STR
63577: PUSH
63578: LD_STRING )
63580: STR
63581: PPUSH
63582: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63586: CALL 63615 0 0
// end ; end_of_file
63590: PPOPN 1
63592: END
// every 0 0$1 do
63593: GO 63595
63595: DISABLE
// begin enable ;
63596: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63597: LD_STRING updateTimer(
63599: PUSH
63600: LD_OWVAR 1
63604: STR
63605: PUSH
63606: LD_STRING );
63608: STR
63609: PPUSH
63610: CALL_OW 559
// end ;
63614: END
// export function SOS_MapStart ( ) ; begin
63615: LD_INT 0
63617: PPUSH
// UpdateFactoryWaypoints ( ) ;
63618: CALL 64556 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63622: CALL 64808 0 0
// ParseMultiDataToLua ( ) ;
63626: CALL 64955 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
63630: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
63632: PPUSH
63633: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63637: LD_STRING setSpecLogoNumber(
63639: PUSH
63640: LD_INT 2
63642: STR
63643: PUSH
63644: LD_STRING ,
63646: STR
63647: PUSH
63648: LD_INT 1
63650: STR
63651: PUSH
63652: LD_STRING )
63654: STR
63655: PPUSH
63656: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63660: LD_STRING setSpecLogoNumber(
63662: PUSH
63663: LD_INT 3
63665: STR
63666: PUSH
63667: LD_STRING ,
63669: STR
63670: PUSH
63671: LD_INT 2
63673: STR
63674: PUSH
63675: LD_STRING )
63677: STR
63678: PPUSH
63679: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63683: LD_STRING setSpecLogoNumber(
63685: PUSH
63686: LD_INT 4
63688: STR
63689: PUSH
63690: LD_STRING ,
63692: STR
63693: PUSH
63694: LD_INT 3
63696: STR
63697: PUSH
63698: LD_STRING )
63700: STR
63701: PPUSH
63702: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63706: LD_STRING setSpecLogoNumber(
63708: PUSH
63709: LD_INT 5
63711: STR
63712: PUSH
63713: LD_STRING ,
63715: STR
63716: PUSH
63717: LD_INT 4
63719: STR
63720: PUSH
63721: LD_STRING )
63723: STR
63724: PPUSH
63725: CALL_OW 559
// end ;
63729: LD_VAR 0 1
63733: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63734: LD_INT 0
63736: PPUSH
63737: PPUSH
63738: PPUSH
63739: PPUSH
63740: PPUSH
63741: PPUSH
63742: PPUSH
63743: PPUSH
63744: PPUSH
// for i := 1 to 8 do
63745: LD_ADDR_VAR 0 2
63749: PUSH
63750: DOUBLE
63751: LD_INT 1
63753: DEC
63754: ST_TO_ADDR
63755: LD_INT 8
63757: PUSH
63758: FOR_TO
63759: IFFALSE 64144
// begin if mpSidePositions [ i ] then
63761: LD_EXP 9
63765: PUSH
63766: LD_VAR 0 2
63770: ARRAY
63771: IFFALSE 64142
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63773: LD_ADDR_VAR 0 7
63777: PUSH
63778: LD_INT 22
63780: PUSH
63781: LD_VAR 0 2
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 21
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PPUSH
63804: CALL_OW 69
63808: PPUSH
63809: CALL 13842 0 1
63813: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63814: LD_ADDR_VAR 0 9
63818: PUSH
63819: LD_INT 22
63821: PUSH
63822: LD_VAR 0 2
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: LD_INT 30
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 30
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: LIST
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PPUSH
63863: CALL_OW 69
63867: ST_TO_ADDR
// crates := 0 ;
63868: LD_ADDR_VAR 0 4
63872: PUSH
63873: LD_INT 0
63875: ST_TO_ADDR
// oil := 0 ;
63876: LD_ADDR_VAR 0 5
63880: PUSH
63881: LD_INT 0
63883: ST_TO_ADDR
// sib := 0 ;
63884: LD_ADDR_VAR 0 6
63888: PUSH
63889: LD_INT 0
63891: ST_TO_ADDR
// if bases then
63892: LD_VAR 0 9
63896: IFFALSE 64002
// begin for j in bases do
63898: LD_ADDR_VAR 0 3
63902: PUSH
63903: LD_VAR 0 9
63907: PUSH
63908: FOR_IN
63909: IFFALSE 64000
// begin base := GetBase ( j ) ;
63911: LD_ADDR_VAR 0 8
63915: PUSH
63916: LD_VAR 0 3
63920: PPUSH
63921: CALL_OW 274
63925: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63926: LD_ADDR_VAR 0 4
63930: PUSH
63931: LD_VAR 0 4
63935: PUSH
63936: LD_VAR 0 8
63940: PPUSH
63941: LD_INT 1
63943: PPUSH
63944: CALL_OW 275
63948: PLUS
63949: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63950: LD_ADDR_VAR 0 5
63954: PUSH
63955: LD_VAR 0 5
63959: PUSH
63960: LD_VAR 0 8
63964: PPUSH
63965: LD_INT 2
63967: PPUSH
63968: CALL_OW 275
63972: PLUS
63973: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63974: LD_ADDR_VAR 0 6
63978: PUSH
63979: LD_VAR 0 6
63983: PUSH
63984: LD_VAR 0 8
63988: PPUSH
63989: LD_INT 3
63991: PPUSH
63992: CALL_OW 275
63996: PLUS
63997: ST_TO_ADDR
// end ;
63998: GO 63908
64000: POP
64001: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
64002: LD_STRING setSpecText(
64004: PUSH
64005: LD_VAR 0 2
64009: STR
64010: PUSH
64011: LD_STRING ,
64013: STR
64014: PUSH
64015: LD_INT 2
64017: STR
64018: PUSH
64019: LD_STRING ,
64021: STR
64022: PUSH
64023: LD_VAR 0 4
64027: STR
64028: PUSH
64029: LD_STRING )
64031: STR
64032: PPUSH
64033: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
64037: LD_STRING setSpecText(
64039: PUSH
64040: LD_VAR 0 2
64044: STR
64045: PUSH
64046: LD_STRING ,
64048: STR
64049: PUSH
64050: LD_INT 3
64052: STR
64053: PUSH
64054: LD_STRING ,
64056: STR
64057: PUSH
64058: LD_VAR 0 5
64062: STR
64063: PUSH
64064: LD_STRING )
64066: STR
64067: PPUSH
64068: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
64072: LD_STRING setSpecText(
64074: PUSH
64075: LD_VAR 0 2
64079: STR
64080: PUSH
64081: LD_STRING ,
64083: STR
64084: PUSH
64085: LD_INT 4
64087: STR
64088: PUSH
64089: LD_STRING ,
64091: STR
64092: PUSH
64093: LD_VAR 0 6
64097: STR
64098: PUSH
64099: LD_STRING )
64101: STR
64102: PPUSH
64103: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
64107: LD_STRING setSpecText(
64109: PUSH
64110: LD_VAR 0 2
64114: STR
64115: PUSH
64116: LD_STRING ,
64118: STR
64119: PUSH
64120: LD_INT 5
64122: STR
64123: PUSH
64124: LD_STRING ,
64126: STR
64127: PUSH
64128: LD_VAR 0 7
64132: STR
64133: PUSH
64134: LD_STRING )
64136: STR
64137: PPUSH
64138: CALL_OW 559
// end ; end ;
64142: GO 63758
64144: POP
64145: POP
// end ;
64146: LD_VAR 0 1
64150: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
64151: LD_INT 2
64153: PUSH
64154: LD_INT 30
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 30
64166: PUSH
64167: LD_INT 1
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: LIST
64178: PPUSH
64179: CALL_OW 69
64183: IFFALSE 64193
64185: GO 64187
64187: DISABLE
// begin enable ;
64188: ENABLE
// UpdateSpectatorBar ;
64189: CALL 63734 0 0
// end ;
64193: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64194: LD_INT 0
64196: PPUSH
// end ;
64197: LD_VAR 0 12
64201: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64202: LD_INT 0
64204: PPUSH
64205: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64206: LD_VAR 0 1
64210: NOT
64211: IFTRUE 64230
64213: PUSH
64214: LD_VAR 0 2
64218: PPUSH
64219: LD_VAR 0 3
64223: PPUSH
64224: CALL_OW 488
64228: NOT
64229: OR
64230: IFTRUE 64265
64232: PUSH
64233: LD_VAR 0 1
64237: PPUSH
64238: CALL_OW 266
64242: PUSH
64243: LD_INT 3
64245: NONEQUAL
64246: IFFALSE 64264
64248: PUSH
64249: LD_VAR 0 1
64253: PPUSH
64254: CALL_OW 247
64258: PUSH
64259: LD_INT 1
64261: EQUAL
64262: NOT
64263: AND
64264: OR
64265: IFFALSE 64269
// exit ;
64267: GO 64551
// if GetType ( factory ) = unit_human then
64269: LD_VAR 0 1
64273: PPUSH
64274: CALL_OW 247
64278: PUSH
64279: LD_INT 1
64281: EQUAL
64282: IFFALSE 64299
// factory := IsInUnit ( factory ) ;
64284: LD_ADDR_VAR 0 1
64288: PUSH
64289: LD_VAR 0 1
64293: PPUSH
64294: CALL_OW 310
64298: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64299: LD_VAR 0 1
64303: PPUSH
64304: CALL_OW 266
64308: PUSH
64309: LD_INT 3
64311: NONEQUAL
64312: IFFALSE 64316
// exit ;
64314: GO 64551
// for i := 1 to Count ( factoryWaypoints ) do
64316: LD_ADDR_VAR 0 5
64320: PUSH
64321: DOUBLE
64322: LD_INT 1
64324: DEC
64325: ST_TO_ADDR
64326: LD_EXP 63
64330: PPUSH
64331: CALL 13842 0 1
64335: PUSH
64336: FOR_TO
64337: IFFALSE 64499
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64339: LD_VAR 0 2
64343: PPUSH
64344: LD_VAR 0 3
64348: PPUSH
64349: CALL_OW 428
64353: PUSH
64354: LD_EXP 63
64358: PUSH
64359: LD_VAR 0 5
64363: ARRAY
64364: PUSH
64365: LD_INT 2
64367: ARRAY
64368: EQUAL
64369: IFFALSE 64401
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64371: LD_ADDR_EXP 63
64375: PUSH
64376: LD_EXP 63
64380: PPUSH
64381: LD_VAR 0 5
64385: PPUSH
64386: CALL_OW 3
64390: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64391: CALL 64556 0 0
// exit ;
64395: POP
64396: POP
64397: GO 64551
// end else
64399: GO 64497
// if factory = factoryWaypoints [ i ] [ 2 ] then
64401: LD_VAR 0 1
64405: PUSH
64406: LD_EXP 63
64410: PUSH
64411: LD_VAR 0 5
64415: ARRAY
64416: PUSH
64417: LD_INT 2
64419: ARRAY
64420: EQUAL
64421: IFFALSE 64497
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64423: LD_ADDR_EXP 63
64427: PUSH
64428: LD_EXP 63
64432: PPUSH
64433: LD_VAR 0 5
64437: PPUSH
64438: CALL_OW 3
64442: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64443: LD_ADDR_EXP 63
64447: PUSH
64448: LD_EXP 63
64452: PPUSH
64453: LD_VAR 0 1
64457: PPUSH
64458: CALL_OW 255
64462: PUSH
64463: LD_VAR 0 1
64467: PUSH
64468: LD_VAR 0 2
64472: PUSH
64473: LD_VAR 0 3
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: PPUSH
64484: CALL 49818 0 2
64488: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64489: CALL 64556 0 0
// exit ;
64493: POP
64494: POP
64495: GO 64551
// end ; end ;
64497: GO 64336
64499: POP
64500: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64501: LD_ADDR_EXP 63
64505: PUSH
64506: LD_EXP 63
64510: PPUSH
64511: LD_VAR 0 1
64515: PPUSH
64516: CALL_OW 255
64520: PUSH
64521: LD_VAR 0 1
64525: PUSH
64526: LD_VAR 0 2
64530: PUSH
64531: LD_VAR 0 3
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: PPUSH
64542: CALL 49818 0 2
64546: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64547: CALL 64556 0 0
// end ;
64551: LD_VAR 0 4
64555: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64556: LD_INT 0
64558: PPUSH
64559: PPUSH
64560: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64561: LD_STRING resetFactoryWaypoint();
64563: PPUSH
64564: CALL_OW 559
// if factoryWaypoints then
64568: LD_EXP 63
64572: IFFALSE 64693
// begin list := factoryWaypoints ;
64574: LD_ADDR_VAR 0 3
64578: PUSH
64579: LD_EXP 63
64583: ST_TO_ADDR
// for i := 1 to list do
64584: LD_ADDR_VAR 0 2
64588: PUSH
64589: DOUBLE
64590: LD_INT 1
64592: DEC
64593: ST_TO_ADDR
64594: LD_VAR 0 3
64598: PUSH
64599: FOR_TO
64600: IFFALSE 64691
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64602: LD_STRING setFactoryWaypointXY(
64604: PUSH
64605: LD_VAR 0 3
64609: PUSH
64610: LD_VAR 0 2
64614: ARRAY
64615: PUSH
64616: LD_INT 1
64618: ARRAY
64619: STR
64620: PUSH
64621: LD_STRING ,
64623: STR
64624: PUSH
64625: LD_VAR 0 3
64629: PUSH
64630: LD_VAR 0 2
64634: ARRAY
64635: PUSH
64636: LD_INT 2
64638: ARRAY
64639: STR
64640: PUSH
64641: LD_STRING ,
64643: STR
64644: PUSH
64645: LD_VAR 0 3
64649: PUSH
64650: LD_VAR 0 2
64654: ARRAY
64655: PUSH
64656: LD_INT 3
64658: ARRAY
64659: STR
64660: PUSH
64661: LD_STRING ,
64663: STR
64664: PUSH
64665: LD_VAR 0 3
64669: PUSH
64670: LD_VAR 0 2
64674: ARRAY
64675: PUSH
64676: LD_INT 4
64678: ARRAY
64679: STR
64680: PUSH
64681: LD_STRING )
64683: STR
64684: PPUSH
64685: CALL_OW 559
64689: GO 64599
64691: POP
64692: POP
// end ; end ;
64693: LD_VAR 0 1
64697: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64698: LD_INT 0
64700: PPUSH
// if HexInfo ( x , y ) = warehouse then
64701: LD_VAR 0 2
64705: PPUSH
64706: LD_VAR 0 3
64710: PPUSH
64711: CALL_OW 428
64715: PUSH
64716: LD_VAR 0 1
64720: EQUAL
64721: IFFALSE 64748
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64723: LD_ADDR_EXP 65
64727: PUSH
64728: LD_EXP 65
64732: PPUSH
64733: LD_VAR 0 1
64737: PPUSH
64738: LD_INT 0
64740: PPUSH
64741: CALL_OW 1
64745: ST_TO_ADDR
64746: GO 64799
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64748: LD_ADDR_EXP 65
64752: PUSH
64753: LD_EXP 65
64757: PPUSH
64758: LD_VAR 0 1
64762: PPUSH
64763: LD_VAR 0 1
64767: PPUSH
64768: CALL_OW 255
64772: PUSH
64773: LD_VAR 0 1
64777: PUSH
64778: LD_VAR 0 2
64782: PUSH
64783: LD_VAR 0 3
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: PPUSH
64794: CALL_OW 1
64798: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64799: CALL 64808 0 0
// end ;
64803: LD_VAR 0 4
64807: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64808: LD_INT 0
64810: PPUSH
64811: PPUSH
64812: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64813: LD_STRING resetWarehouseGatheringPoints();
64815: PPUSH
64816: CALL_OW 559
// if warehouseGatheringPoints then
64820: LD_EXP 65
64824: IFFALSE 64950
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64826: LD_ADDR_VAR 0 3
64830: PUSH
64831: LD_EXP 65
64835: PPUSH
64836: CALL 53752 0 1
64840: ST_TO_ADDR
// for i := 1 to list do
64841: LD_ADDR_VAR 0 2
64845: PUSH
64846: DOUBLE
64847: LD_INT 1
64849: DEC
64850: ST_TO_ADDR
64851: LD_VAR 0 3
64855: PUSH
64856: FOR_TO
64857: IFFALSE 64948
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64859: LD_STRING setWarehouseGatheringPointXY(
64861: PUSH
64862: LD_VAR 0 3
64866: PUSH
64867: LD_VAR 0 2
64871: ARRAY
64872: PUSH
64873: LD_INT 1
64875: ARRAY
64876: STR
64877: PUSH
64878: LD_STRING ,
64880: STR
64881: PUSH
64882: LD_VAR 0 3
64886: PUSH
64887: LD_VAR 0 2
64891: ARRAY
64892: PUSH
64893: LD_INT 2
64895: ARRAY
64896: STR
64897: PUSH
64898: LD_STRING ,
64900: STR
64901: PUSH
64902: LD_VAR 0 3
64906: PUSH
64907: LD_VAR 0 2
64911: ARRAY
64912: PUSH
64913: LD_INT 3
64915: ARRAY
64916: STR
64917: PUSH
64918: LD_STRING ,
64920: STR
64921: PUSH
64922: LD_VAR 0 3
64926: PUSH
64927: LD_VAR 0 2
64931: ARRAY
64932: PUSH
64933: LD_INT 4
64935: ARRAY
64936: STR
64937: PUSH
64938: LD_STRING )
64940: STR
64941: PPUSH
64942: CALL_OW 559
64946: GO 64856
64948: POP
64949: POP
// end ; end ;
64950: LD_VAR 0 1
64954: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64955: LD_INT 0
64957: PPUSH
64958: PPUSH
// if not mpSidePositions then
64959: LD_EXP 9
64963: NOT
64964: IFFALSE 64968
// exit ;
64966: GO 65039
// result :=  ;
64968: LD_ADDR_VAR 0 1
64972: PUSH
64973: LD_STRING 
64975: ST_TO_ADDR
// for i := 1 to 8 do
64976: LD_ADDR_VAR 0 2
64980: PUSH
64981: DOUBLE
64982: LD_INT 1
64984: DEC
64985: ST_TO_ADDR
64986: LD_INT 8
64988: PUSH
64989: FOR_TO
64990: IFFALSE 65020
// begin result := result & mpSidePositions [ i ] & ; ;
64992: LD_ADDR_VAR 0 1
64996: PUSH
64997: LD_VAR 0 1
65001: PUSH
65002: LD_EXP 9
65006: PUSH
65007: LD_VAR 0 2
65011: ARRAY
65012: STR
65013: PUSH
65014: LD_STRING ;
65016: STR
65017: ST_TO_ADDR
// end ;
65018: GO 64989
65020: POP
65021: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
65022: LD_STRING setMultiplayerRealPosition("
65024: PUSH
65025: LD_VAR 0 1
65029: STR
65030: PUSH
65031: LD_STRING ");
65033: STR
65034: PPUSH
65035: CALL_OW 559
// end ; end_of_file
65039: LD_VAR 0 1
65043: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalHardcore do var i ;
65044: LD_EXP 41
65048: IFFALSE 65091
65050: GO 65052
65052: DISABLE
65053: LD_INT 0
65055: PPUSH
// begin for i := 1 to 8 do
65056: LD_ADDR_VAR 0 1
65060: PUSH
65061: DOUBLE
65062: LD_INT 1
65064: DEC
65065: ST_TO_ADDR
65066: LD_INT 8
65068: PUSH
65069: FOR_TO
65070: IFFALSE 65089
// SetRestrict ( b_depot , i , state_disabled ) ;
65072: LD_INT 0
65074: PPUSH
65075: LD_VAR 0 1
65079: PPUSH
65080: LD_INT 0
65082: PPUSH
65083: CALL_OW 324
65087: GO 65069
65089: POP
65090: POP
// end ;
65091: PPOPN 1
65093: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalHardcore do var i , canWin ;
65094: LD_EXP 41
65098: IFFALSE 65106
65100: PUSH
65101: CALL 65316 0 0
65105: AND
65106: IFFALSE 65114
65108: PUSH
65109: LD_OWVAR 4
65113: AND
65114: IFFALSE 65313
65116: GO 65118
65118: DISABLE
65119: LD_INT 0
65121: PPUSH
65122: PPUSH
// begin canWin := false ;
65123: LD_ADDR_VAR 0 2
65127: PUSH
65128: LD_INT 0
65130: ST_TO_ADDR
// if not HasPower ( your_side ) then
65131: LD_OWVAR 2
65135: PPUSH
65136: CALL 65358 0 1
65140: NOT
65141: IFFALSE 65152
// begin Multiplayer_Loose_Message ;
65143: CALL_OW 521
// enable ( mpLose ) ;
65147: LD_INT 102
65149: ENABLE_MARKED
// end else
65150: GO 65313
// begin canWin := true ;
65152: LD_ADDR_VAR 0 2
65156: PUSH
65157: LD_INT 1
65159: ST_TO_ADDR
// for i := 1 to 8 do
65160: LD_ADDR_VAR 0 1
65164: PUSH
65165: DOUBLE
65166: LD_INT 1
65168: DEC
65169: ST_TO_ADDR
65170: LD_INT 8
65172: PUSH
65173: FOR_TO
65174: IFFALSE 65299
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
65176: LD_EXP 9
65180: PUSH
65181: LD_VAR 0 1
65185: ARRAY
65186: IFFALSE 65199
65188: PUSH
65189: LD_VAR 0 1
65193: PPUSH
65194: CALL_OW 108
65198: AND
65199: IFFALSE 65213
65201: PUSH
65202: LD_VAR 0 1
65206: PUSH
65207: LD_OWVAR 2
65211: NONEQUAL
65212: AND
65213: IFFALSE 65297
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65215: LD_EXP 10
65219: PUSH
65220: LD_VAR 0 1
65224: ARRAY
65225: NOT
65226: IFTRUE 65274
65228: PUSH
65229: LD_EXP 10
65233: PUSH
65234: LD_VAR 0 1
65238: ARRAY
65239: PUSH
65240: LD_EXP 10
65244: PUSH
65245: LD_OWVAR 2
65249: ARRAY
65250: NONEQUAL
65251: IFFALSE 65273
65253: PUSH
65254: LD_OWVAR 2
65258: PPUSH
65259: LD_VAR 0 1
65263: PPUSH
65264: CALL_OW 81
65268: PUSH
65269: LD_INT 1
65271: NONEQUAL
65272: AND
65273: OR
65274: IFFALSE 65297
// if HasPower ( i ) then
65276: LD_VAR 0 1
65280: PPUSH
65281: CALL 65358 0 1
65285: IFFALSE 65297
// begin canWin := false ;
65287: LD_ADDR_VAR 0 2
65291: PUSH
65292: LD_INT 0
65294: ST_TO_ADDR
// break ;
65295: GO 65299
// end ;
65297: GO 65173
65299: POP
65300: POP
// if canWin then
65301: LD_VAR 0 2
65305: IFFALSE 65312
// enable ( mpWin ) else
65307: LD_INT 101
65309: ENABLE_MARKED
65310: GO 65313
// enable ;
65312: ENABLE
// end ; end ;
65313: PPOPN 2
65315: END
// function CanWinLoose ; begin
65316: LD_INT 0
65318: PPUSH
// result := true ;
65319: LD_ADDR_VAR 0 1
65323: PUSH
65324: LD_INT 1
65326: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65327: CALL_OW 531
65331: IFFALSE 65343
65333: PUSH
65334: CALL_OW 519
65338: PUSH
65339: LD_INT 1
65341: GREATER
65342: AND
65343: IFFALSE 65353
// result := false ;
65345: LD_ADDR_VAR 0 1
65349: PUSH
65350: LD_INT 0
65352: ST_TO_ADDR
// end ;
65353: LD_VAR 0 1
65357: RET
// function HasPower ( i ) ; begin
65358: LD_INT 0
65360: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
65361: LD_INT 22
65363: PUSH
65364: LD_VAR 0 1
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 2
65375: PUSH
65376: LD_INT 30
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 30
65388: PUSH
65389: LD_INT 1
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: LIST
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PPUSH
65405: CALL_OW 69
65409: NOT
65410: IFFALSE 65414
// exit ;
65412: GO 65479
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65414: LD_ADDR_VAR 0 2
65418: PUSH
65419: LD_INT 22
65421: PUSH
65422: LD_VAR 0 1
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 2
65433: PUSH
65434: LD_INT 21
65436: PUSH
65437: LD_INT 1
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 33
65446: PUSH
65447: LD_INT 3
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 33
65456: PUSH
65457: LD_INT 5
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PPUSH
65474: CALL_OW 69
65478: ST_TO_ADDR
// end ;
65479: LD_VAR 0 2
65483: RET
