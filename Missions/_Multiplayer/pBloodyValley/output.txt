// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2956 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3379 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 6
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 7
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: LD_INT 2
 467: PUSH
 468: LD_INT 4
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 6300
 482: PUSH
 483: LD_INT 10500
 485: PUSH
 486: LD_INT 16800
 488: PUSH
 489: LD_INT 21000
 491: PUSH
 492: LD_INT 25200
 494: PUSH
 495: LD_INT 31500
 497: PUSH
 498: LD_INT 42000
 500: PUSH
 501: LD_INT 63000
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 4 , 3 3$0 ] ;
 538: LD_ADDR_EXP 8
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 15
 548: PUSH
 549: LD_INT 4
 551: PUSH
 552: LD_INT 100
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 250
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 10500
 583: PUSH
 584: LD_INT 1
 586: PUSH
 587: LD_INT 700
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 700
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 31500
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 4
 613: PUSH
 614: LD_INT 6300
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: ST_TO_ADDR
// mpGameType := GameTypeSurvivalH ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: ST_TO_ADDR
// your_side := 1 ;
 648: LD_ADDR_OWVAR 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 656: LD_ADDR_EXP 9
 660: PUSH
 661: LD_INT 1
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 0
 675: PUSH
 676: LD_INT 0
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 695: LD_ADDR_EXP 10
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 1
 705: PUSH
 706: LD_INT 2
 708: PUSH
 709: LD_INT 2
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: LD_INT 0
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// mpSideNations := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 734: LD_ADDR_EXP 11
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 1
 744: PUSH
 745: LD_INT 2
 747: PUSH
 748: LD_INT 2
 750: PUSH
 751: LD_INT 0
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 773: LD_ADDR_EXP 12
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 2
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 3
 790: PUSH
 791: LD_INT 4
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: ST_TO_ADDR
// mpTeamGame := true ;
 802: LD_ADDR_EXP 13
 806: PUSH
 807: LD_INT 1
 809: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 810: LD_ADDR_EXP 31
 814: PUSH
 815: LD_INT 100
 817: PUSH
 818: LD_INT 120
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: ST_TO_ADDR
// end ;
 825: LD_VAR 0 1
 829: RET
// export kingArea , kingCamArea , mpTree ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
 838: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
 839: LD_ADDR_EXP 21
 843: PUSH
 844: LD_INT 2
 846: PUSH
 847: LD_INT 3
 849: PUSH
 850: LD_INT 5
 852: PUSH
 853: LD_INT 4
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 20
 866: PUSH
 867: EMPTY
 868: PUSH
 869: LD_EXP 21
 873: UNION
 874: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 875: LD_VAR 0 1
 879: PUSH
 880: LD_INT 2
 882: EQUAL
 883: IFFALSE 895
// baseLevel := 1 else
 885: LD_ADDR_VAR 0 7
 889: PUSH
 890: LD_INT 1
 892: ST_TO_ADDR
 893: GO 909
// baseLevel := mpGameSettings [ 1 ] ;
 895: LD_ADDR_VAR 0 7
 899: PUSH
 900: LD_EXP 8
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 909: LD_ADDR_EXP 26
 913: PUSH
 914: LD_EXP 8
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 923: LD_ADDR_EXP 27
 927: PUSH
 928: LD_EXP 8
 932: PUSH
 933: LD_INT 3
 935: ARRAY
 936: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 937: LD_ADDR_EXP 17
 941: PUSH
 942: LD_EXP 8
 946: PUSH
 947: LD_INT 4
 949: ARRAY
 950: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 951: LD_ADDR_EXP 29
 955: PUSH
 956: LD_EXP 8
 960: PUSH
 961: LD_INT 5
 963: ARRAY
 964: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 965: LD_ADDR_VAR 0 5
 969: PUSH
 970: LD_EXP 8
 974: PUSH
 975: LD_INT 6
 977: ARRAY
 978: PUSH
 979: LD_INT 0
 981: GREATER
 982: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 983: LD_ADDR_VAR 0 6
 987: PUSH
 988: LD_EXP 8
 992: PUSH
 993: LD_INT 7
 995: ARRAY
 996: PUSH
 997: LD_INT 0
 999: GREATER
1000: ST_TO_ADDR
// mpKingArea := 0 ;
1001: LD_ADDR_EXP 36
1005: PUSH
1006: LD_INT 0
1008: ST_TO_ADDR
// mpPoints := 0 ;
1009: LD_ADDR_EXP 37
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpEmissions := 0 ;
1017: LD_ADDR_EXP 39
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// kingArea := 0 ;
1025: LD_ADDR_EXP 1
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// kingCamArea := 0 ;
1033: LD_ADDR_EXP 2
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1041: LD_EXP 8
1045: PUSH
1046: LD_INT 9
1048: ARRAY
1049: IFFALSE 1181
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1051: LD_ADDR_EXP 38
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 2
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 3
1085: PUSH
1086: EMPTY
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 12
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 24
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 12
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 23
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 21
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 42
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 21
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 42
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1181: LD_ADDR_EXP 18
1185: PUSH
1186: LD_EXP 8
1190: PUSH
1191: LD_INT 11
1193: ARRAY
1194: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1195: LD_ADDR_EXP 24
1199: PUSH
1200: LD_EXP 8
1204: PUSH
1205: LD_INT 12
1207: ARRAY
1208: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1209: LD_ADDR_EXP 28
1213: PUSH
1214: LD_EXP 8
1218: PUSH
1219: LD_INT 13
1221: ARRAY
1222: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1223: LD_ADDR_EXP 35
1227: PUSH
1228: LD_EXP 8
1232: PUSH
1233: LD_INT 14
1235: ARRAY
1236: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1237: LD_ADDR_EXP 32
1241: PUSH
1242: LD_EXP 8
1246: PUSH
1247: LD_INT 15
1249: ARRAY
1250: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1251: LD_ADDR_EXP 30
1255: PUSH
1256: LD_EXP 8
1260: PUSH
1261: LD_INT 18
1263: ARRAY
1264: ST_TO_ADDR
// mpTree := mpGameSettings [ 20 ] ;
1265: LD_ADDR_EXP 3
1269: PUSH
1270: LD_EXP 8
1274: PUSH
1275: LD_INT 20
1277: ARRAY
1278: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1279: LD_ADDR_EXP 22
1283: PUSH
1284: LD_EXP 8
1288: PUSH
1289: LD_INT 21
1291: ARRAY
1292: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 ] ;
1293: LD_ADDR_EXP 33
1297: PUSH
1298: LD_INT 7
1300: PUSH
1301: LD_INT 9
1303: PUSH
1304: LD_INT 8
1306: PUSH
1307: LD_INT 10
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 2 ) , GetBuildingFromArea ( DepotArea2 , 0 ) , GetBuildingFromArea ( DepotArea3 , 3 ) , GetBuildingFromArea ( DepotArea4 , 5 ) ] ;
1316: LD_ADDR_VAR 0 8
1320: PUSH
1321: LD_INT 11
1323: PPUSH
1324: LD_INT 2
1326: PPUSH
1327: CALL 54411 0 2
1331: PUSH
1332: LD_INT 12
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL 54411 0 2
1342: PUSH
1343: LD_INT 13
1345: PPUSH
1346: LD_INT 3
1348: PPUSH
1349: CALL 54411 0 2
1353: PUSH
1354: LD_INT 14
1356: PPUSH
1357: LD_INT 5
1359: PPUSH
1360: CALL 54411 0 2
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1371: LD_ADDR_VAR 0 3
1375: PUSH
1376: DOUBLE
1377: LD_INT 1
1379: DEC
1380: ST_TO_ADDR
1381: LD_VAR 0 8
1385: PPUSH
1386: CALL 13716 0 1
1390: PUSH
1391: FOR_TO
1392: IFFALSE 1496
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1394: LD_ADDR_EXP 23
1398: PUSH
1399: LD_EXP 23
1403: PPUSH
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_VAR 0 8
1413: PUSH
1414: LD_VAR 0 3
1418: ARRAY
1419: PUSH
1420: LD_INT 1
1422: ARRAY
1423: PPUSH
1424: LD_VAR 0 8
1428: PUSH
1429: LD_VAR 0 3
1433: ARRAY
1434: PUSH
1435: LD_INT 3
1437: ARRAY
1438: PPUSH
1439: LD_INT 10
1441: PPUSH
1442: CALL_OW 272
1446: PUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_VAR 0 3
1456: ARRAY
1457: PUSH
1458: LD_INT 2
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 3
1475: ARRAY
1476: PPUSH
1477: LD_INT 10
1479: PPUSH
1480: CALL_OW 273
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PPUSH
1489: CALL_OW 1
1493: ST_TO_ADDR
1494: GO 1391
1496: POP
1497: POP
// if hasOil then
1498: LD_VAR 0 5
1502: IFFALSE 1585
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1504: LD_ADDR_VAR 0 4
1508: PUSH
1509: LD_EXP 8
1513: PUSH
1514: LD_INT 6
1516: ARRAY
1517: PUSH
1518: LD_INT 2
1520: EQUAL
1521: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) ] ;
1522: LD_ADDR_EXP 14
1526: PUSH
1527: LD_INT 15
1529: PPUSH
1530: LD_VAR 0 4
1534: PPUSH
1535: CALL 54244 0 2
1539: PUSH
1540: LD_INT 17
1542: PPUSH
1543: LD_VAR 0 4
1547: PPUSH
1548: CALL 54244 0 2
1552: PUSH
1553: LD_INT 19
1555: PPUSH
1556: LD_VAR 0 4
1560: PPUSH
1561: CALL 54244 0 2
1565: PUSH
1566: LD_INT 21
1568: PPUSH
1569: LD_VAR 0 4
1573: PPUSH
1574: CALL 54244 0 2
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: ST_TO_ADDR
// end ; if hasSib then
1585: LD_VAR 0 6
1589: IFFALSE 1672
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1591: LD_ADDR_VAR 0 4
1595: PUSH
1596: LD_EXP 8
1600: PUSH
1601: LD_INT 7
1603: ARRAY
1604: PUSH
1605: LD_INT 2
1607: EQUAL
1608: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) ] ;
1609: LD_ADDR_EXP 15
1613: PUSH
1614: LD_INT 16
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 54244 0 2
1626: PUSH
1627: LD_INT 18
1629: PPUSH
1630: LD_VAR 0 4
1634: PPUSH
1635: CALL 54244 0 2
1639: PUSH
1640: LD_INT 20
1642: PPUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: CALL 54244 0 2
1652: PUSH
1653: LD_INT 22
1655: PPUSH
1656: LD_VAR 0 4
1660: PPUSH
1661: CALL 54244 0 2
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1672: LD_VAR 0 7
1676: PUSH
1677: LD_INT 1
1679: GREATEREQUAL
1680: IFFALSE 1692
// mpDepots := startPos ;
1682: LD_ADDR_EXP 16
1686: PUSH
1687: LD_VAR 0 8
1691: ST_TO_ADDR
// if baseLevel >= 2 then
1692: LD_VAR 0 7
1696: PUSH
1697: LD_INT 2
1699: GREATEREQUAL
1700: IFFALSE 1913
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( BunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( BunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( ArmArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( BunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea2 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea3a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( ArmArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( BunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea4 , 2 ) ] ] ;
1702: LD_ADDR_EXP 19
1706: PUSH
1707: LD_INT 31
1709: PUSH
1710: LD_INT 23
1712: PPUSH
1713: LD_INT 5
1715: PPUSH
1716: CALL 54411 0 2
1720: ADD
1721: PUSH
1722: LD_INT 31
1724: PUSH
1725: LD_INT 24
1727: PPUSH
1728: LD_INT 5
1730: PPUSH
1731: CALL 54411 0 2
1735: ADD
1736: PUSH
1737: LD_INT 4
1739: PUSH
1740: LD_INT 25
1742: PPUSH
1743: LD_INT 4
1745: PPUSH
1746: CALL 54411 0 2
1750: ADD
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 31
1759: PUSH
1760: LD_INT 26
1762: PPUSH
1763: LD_INT 3
1765: PPUSH
1766: CALL 54411 0 2
1770: ADD
1771: PUSH
1772: LD_INT 31
1774: PUSH
1775: LD_INT 27
1777: PPUSH
1778: LD_INT 4
1780: PPUSH
1781: CALL 54411 0 2
1785: ADD
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: LD_INT 28
1792: PPUSH
1793: LD_INT 3
1795: PPUSH
1796: CALL 54411 0 2
1800: ADD
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 31
1809: PUSH
1810: LD_INT 29
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: CALL 54411 0 2
1820: ADD
1821: PUSH
1822: LD_INT 31
1824: PUSH
1825: LD_INT 31
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL 54411 0 2
1835: ADD
1836: PUSH
1837: LD_INT 4
1839: PUSH
1840: LD_INT 30
1842: PPUSH
1843: LD_INT 0
1845: PPUSH
1846: CALL 54411 0 2
1850: ADD
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 31
1859: PUSH
1860: LD_INT 32
1862: PPUSH
1863: LD_INT 2
1865: PPUSH
1866: CALL 54411 0 2
1870: ADD
1871: PUSH
1872: LD_INT 31
1874: PUSH
1875: LD_INT 33
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: CALL 54411 0 2
1885: ADD
1886: PUSH
1887: LD_INT 4
1889: PUSH
1890: LD_INT 34
1892: PPUSH
1893: LD_INT 2
1895: PPUSH
1896: CALL 54411 0 2
1900: ADD
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: ST_TO_ADDR
// end ; if mpTree then
1913: LD_EXP 3
1917: IFFALSE 1929
// SetAreaMapShow ( TreeArea , 1 ) ;
1919: LD_INT 1
1921: PPUSH
1922: LD_INT 1
1924: PPUSH
1925: CALL_OW 424
// end ;
1929: LD_VAR 0 2
1933: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1934: GO 1936
1936: DISABLE
1937: LD_INT 0
1939: PPUSH
1940: PPUSH
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
1945: PPUSH
1946: PPUSH
// begin if not mpShipments then
1947: LD_EXP 29
1951: NOT
1952: IFFALSE 1956
// exit ;
1954: GO 2463
// case mpShipments of 1 :
1956: LD_EXP 29
1960: PUSH
1961: LD_INT 1
1963: DOUBLE
1964: EQUAL
1965: IFTRUE 1969
1967: GO 2004
1969: POP
// begin time := 0 0$30 ;
1970: LD_ADDR_VAR 0 4
1974: PUSH
1975: LD_INT 1050
1977: ST_TO_ADDR
// normalTime := 0 0$30 ;
1978: LD_ADDR_VAR 0 6
1982: PUSH
1983: LD_INT 1050
1985: ST_TO_ADDR
// maxTime := 1 1$20 ;
1986: LD_ADDR_VAR 0 8
1990: PUSH
1991: LD_INT 2800
1993: ST_TO_ADDR
// delayTime := 0 0$5 ;
1994: LD_ADDR_VAR 0 7
1998: PUSH
1999: LD_INT 175
2001: ST_TO_ADDR
// end ; 2 :
2002: GO 2134
2004: LD_INT 2
2006: DOUBLE
2007: EQUAL
2008: IFTRUE 2012
2010: GO 2047
2012: POP
// begin time := 0 0$25 ;
2013: LD_ADDR_VAR 0 4
2017: PUSH
2018: LD_INT 875
2020: ST_TO_ADDR
// normalTime := 0 0$25 ;
2021: LD_ADDR_VAR 0 6
2025: PUSH
2026: LD_INT 875
2028: ST_TO_ADDR
// maxTime := 1 1$10 ;
2029: LD_ADDR_VAR 0 8
2033: PUSH
2034: LD_INT 2450
2036: ST_TO_ADDR
// delayTime := 0 0$4 ;
2037: LD_ADDR_VAR 0 7
2041: PUSH
2042: LD_INT 140
2044: ST_TO_ADDR
// end ; 3 :
2045: GO 2134
2047: LD_INT 3
2049: DOUBLE
2050: EQUAL
2051: IFTRUE 2055
2053: GO 2090
2055: POP
// begin time := 0 0$20 ;
2056: LD_ADDR_VAR 0 4
2060: PUSH
2061: LD_INT 700
2063: ST_TO_ADDR
// normalTime := 0 0$20 ;
2064: LD_ADDR_VAR 0 6
2068: PUSH
2069: LD_INT 700
2071: ST_TO_ADDR
// maxTime := 1 1$00 ;
2072: LD_ADDR_VAR 0 8
2076: PUSH
2077: LD_INT 2100
2079: ST_TO_ADDR
// delayTime := 0 0$3 ;
2080: LD_ADDR_VAR 0 7
2084: PUSH
2085: LD_INT 105
2087: ST_TO_ADDR
// end ; 4 :
2088: GO 2134
2090: LD_INT 4
2092: DOUBLE
2093: EQUAL
2094: IFTRUE 2098
2096: GO 2133
2098: POP
// begin time := 0 0$15 ;
2099: LD_ADDR_VAR 0 4
2103: PUSH
2104: LD_INT 525
2106: ST_TO_ADDR
// normalTime := 0 0$15 ;
2107: LD_ADDR_VAR 0 6
2111: PUSH
2112: LD_INT 525
2114: ST_TO_ADDR
// maxTime := 0 0$55 ;
2115: LD_ADDR_VAR 0 8
2119: PUSH
2120: LD_INT 1925
2122: ST_TO_ADDR
// delayTime := 0 0$2 ;
2123: LD_ADDR_VAR 0 7
2127: PUSH
2128: LD_INT 70
2130: ST_TO_ADDR
// end ; end ;
2131: GO 2134
2133: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
2134: LD_ADDR_VAR 0 3
2138: PUSH
2139: LD_INT 2
2141: PUSH
2142: LD_INT 3
2144: PUSH
2145: LD_INT 5
2147: PUSH
2148: LD_INT 4
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: ST_TO_ADDR
// areas := [ Center1 , Center2 ] ;
2157: LD_ADDR_VAR 0 5
2161: PUSH
2162: LD_INT 36
2164: PUSH
2165: LD_INT 35
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: ST_TO_ADDR
// for i := 1 to 8 do
2172: LD_ADDR_VAR 0 1
2176: PUSH
2177: DOUBLE
2178: LD_INT 1
2180: DEC
2181: ST_TO_ADDR
2182: LD_INT 8
2184: PUSH
2185: FOR_TO
2186: IFFALSE 2233
// begin if not mpSidePositions [ i ] then
2188: LD_EXP 9
2192: PUSH
2193: LD_VAR 0 1
2197: ARRAY
2198: NOT
2199: IFFALSE 2203
// continue ;
2201: GO 2185
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2203: LD_ADDR_VAR 0 5
2207: PUSH
2208: LD_VAR 0 5
2212: PUSH
2213: LD_VAR 0 3
2217: PUSH
2218: LD_EXP 9
2222: PUSH
2223: LD_VAR 0 1
2227: ARRAY
2228: ARRAY
2229: ADD
2230: ST_TO_ADDR
// end ;
2231: GO 2185
2233: POP
2234: POP
// x := 1 ;
2235: LD_ADDR_VAR 0 2
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// repeat wait ( time ) ;
2243: LD_VAR 0 4
2247: PPUSH
2248: CALL_OW 67
// x := Inc ( x ) ;
2252: LD_ADDR_VAR 0 2
2256: PUSH
2257: LD_VAR 0 2
2261: PPUSH
2262: CALL 51065 0 1
2266: ST_TO_ADDR
// if x > 5 then
2267: LD_VAR 0 2
2271: PUSH
2272: LD_INT 5
2274: GREATER
2275: IFFALSE 2285
// x := 1 ;
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: LD_INT 1
2284: ST_TO_ADDR
// for i in areas do
2285: LD_ADDR_VAR 0 1
2289: PUSH
2290: LD_VAR 0 5
2294: PUSH
2295: FOR_IN
2296: IFFALSE 2335
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2298: LD_VAR 0 1
2302: PPUSH
2303: LD_INT 1
2305: PPUSH
2306: CALL_OW 287
2310: PUSH
2311: LD_INT 20
2313: LESS
2314: IFFALSE 2333
// begin CreateCratesArea ( x , i , true ) ;
2316: LD_VAR 0 2
2320: PPUSH
2321: LD_VAR 0 1
2325: PPUSH
2326: LD_INT 1
2328: PPUSH
2329: CALL_OW 55
// end ; end ;
2333: GO 2295
2335: POP
2336: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2337: LD_INT 37
2339: PPUSH
2340: LD_INT 1
2342: PPUSH
2343: CALL_OW 287
2347: PUSH
2348: LD_INT 0
2350: EQUAL
2351: IFFALSE 2390
// begin for i := 1 to 3 do
2353: LD_ADDR_VAR 0 1
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_INT 3
2365: PUSH
2366: FOR_TO
2367: IFFALSE 2386
// CreateCratesArea ( x , CenterArea , true ) ;
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_INT 37
2376: PPUSH
2377: LD_INT 1
2379: PPUSH
2380: CALL_OW 55
2384: GO 2366
2386: POP
2387: POP
// end else
2388: GO 2421
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2390: LD_INT 37
2392: PPUSH
2393: LD_INT 1
2395: PPUSH
2396: CALL_OW 287
2400: PUSH
2401: LD_INT 30
2403: LESS
2404: IFFALSE 2421
// CreateCratesArea ( x , CenterArea , true ) ;
2406: LD_VAR 0 2
2410: PPUSH
2411: LD_INT 37
2413: PPUSH
2414: LD_INT 1
2416: PPUSH
2417: CALL_OW 55
// time := time + delayTime ;
2421: LD_ADDR_VAR 0 4
2425: PUSH
2426: LD_VAR 0 4
2430: PUSH
2431: LD_VAR 0 7
2435: PLUS
2436: ST_TO_ADDR
// if time > maxTime then
2437: LD_VAR 0 4
2441: PUSH
2442: LD_VAR 0 8
2446: GREATER
2447: IFFALSE 2459
// time := normalTime ;
2449: LD_ADDR_VAR 0 4
2453: PUSH
2454: LD_VAR 0 6
2458: ST_TO_ADDR
// until false ;
2459: LD_INT 0
2461: IFFALSE 2243
// end ;
2463: PPOPN 8
2465: END
// export treeVisited ; every 0 0$2 trigger mpTree do var i , tmp , skill , power , bonus ;
2466: LD_EXP 3
2470: IFFALSE 2793
2472: GO 2474
2474: DISABLE
2475: LD_INT 0
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
// begin treeVisited := [ ] ;
2482: LD_ADDR_EXP 4
2486: PUSH
2487: EMPTY
2488: ST_TO_ADDR
// power := 1 ;
2489: LD_ADDR_VAR 0 4
2493: PUSH
2494: LD_INT 1
2496: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2497: LD_INT 35
2499: PPUSH
2500: CALL_OW 67
// if tick mod Round ( 20 20$0 div mpTree ) = 0 then
2504: LD_OWVAR 1
2508: PUSH
2509: LD_INT 42000
2511: PUSH
2512: LD_EXP 3
2516: DIV
2517: PPUSH
2518: CALL_OW 574
2522: MOD
2523: PUSH
2524: LD_INT 0
2526: EQUAL
2527: IFFALSE 2544
// power := Inc ( power ) ;
2529: LD_ADDR_VAR 0 4
2533: PUSH
2534: LD_VAR 0 4
2538: PPUSH
2539: CALL 51065 0 1
2543: ST_TO_ADDR
// if power > 10 then
2544: LD_VAR 0 4
2548: PUSH
2549: LD_INT 10
2551: GREATER
2552: IFFALSE 2562
// power := 10 ;
2554: LD_ADDR_VAR 0 4
2558: PUSH
2559: LD_INT 10
2561: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_inarea , TreeArea ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) diff treeVisited ;
2562: LD_ADDR_VAR 0 2
2566: PUSH
2567: LD_INT 95
2569: PUSH
2570: LD_INT 1
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 21
2579: PUSH
2580: LD_INT 1
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: LD_INT 3
2589: PUSH
2590: LD_INT 23
2592: PUSH
2593: LD_INT 0
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PPUSH
2609: CALL_OW 69
2613: PUSH
2614: LD_EXP 4
2618: DIFF
2619: ST_TO_ADDR
// if tmp then
2620: LD_VAR 0 2
2624: IFFALSE 2789
// begin for i in tmp do
2626: LD_ADDR_VAR 0 1
2630: PUSH
2631: LD_VAR 0 2
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2787
// begin treeVisited := Join ( treeVisited , i ) ;
2639: LD_ADDR_EXP 4
2643: PUSH
2644: LD_EXP 4
2648: PPUSH
2649: LD_VAR 0 1
2653: PPUSH
2654: CALL 49692 0 2
2658: ST_TO_ADDR
// bonus := GetSkill ( i , i mod 4 + 1 ) + power ;
2659: LD_ADDR_VAR 0 5
2663: PUSH
2664: LD_VAR 0 1
2668: PPUSH
2669: LD_VAR 0 1
2673: PUSH
2674: LD_INT 4
2676: MOD
2677: PUSH
2678: LD_INT 1
2680: PLUS
2681: PPUSH
2682: CALL_OW 259
2686: PUSH
2687: LD_VAR 0 4
2691: PLUS
2692: ST_TO_ADDR
// if bonus > 10 then
2693: LD_VAR 0 5
2697: PUSH
2698: LD_INT 10
2700: GREATER
2701: IFFALSE 2711
// bonus := 10 ;
2703: LD_ADDR_VAR 0 5
2707: PUSH
2708: LD_INT 10
2710: ST_TO_ADDR
// skill := i mod 4 + 1 ;
2711: LD_ADDR_VAR 0 3
2715: PUSH
2716: LD_VAR 0 1
2720: PUSH
2721: LD_INT 4
2723: MOD
2724: PUSH
2725: LD_INT 1
2727: PLUS
2728: ST_TO_ADDR
// SetSkill ( i , skill , bonus ) ;
2729: LD_VAR 0 1
2733: PPUSH
2734: LD_VAR 0 3
2738: PPUSH
2739: LD_VAR 0 5
2743: PPUSH
2744: CALL_OW 237
// ToLua ( displayTreeBonusDetails( & i & , & skill & , & power & ) ) ;
2748: LD_STRING displayTreeBonusDetails(
2750: PUSH
2751: LD_VAR 0 1
2755: STR
2756: PUSH
2757: LD_STRING ,
2759: STR
2760: PUSH
2761: LD_VAR 0 3
2765: STR
2766: PUSH
2767: LD_STRING ,
2769: STR
2770: PUSH
2771: LD_VAR 0 4
2775: STR
2776: PUSH
2777: LD_STRING )
2779: STR
2780: PPUSH
2781: CALL_OW 559
// end ;
2785: GO 2636
2787: POP
2788: POP
// end ; until false ;
2789: LD_INT 0
2791: IFFALSE 2497
// end ; end_of_file
2793: PPOPN 5
2795: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2796: LD_VAR 0 1
2800: PPUSH
2801: CALL 55209 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2805: LD_VAR 0 1
2809: PPUSH
2810: CALL 8502 0 1
// end ;
2814: PPOPN 1
2816: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2817: LD_VAR 0 1
2821: PPUSH
2822: CALL 55226 0 1
// end ;
2826: PPOPN 1
2828: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2829: LD_VAR 0 1
2833: PPUSH
2834: CALL 9555 0 1
2838: PPOPN 1
2840: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2841: LD_VAR 0 1
2845: PPUSH
2846: LD_VAR 0 2
2850: PPUSH
2851: CALL 55267 0 2
2855: PPOPN 2
2857: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: LD_VAR 0 2
2867: PPUSH
2868: CALL 9308 0 2
2872: PPOPN 2
2874: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: LD_VAR 0 2
2884: PPUSH
2885: LD_VAR 0 3
2889: PPUSH
2890: CALL 9608 0 3
2894: PPOPN 3
2896: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2897: LD_VAR 0 1
2901: PPUSH
2902: LD_VAR 0 2
2906: PPUSH
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_VAR 0 4
2916: PPUSH
2917: LD_VAR 0 5
2921: PPUSH
2922: CALL 10292 0 5
// end ;
2926: PPOPN 5
2928: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2929: LD_VAR 0 1
2933: PPUSH
2934: LD_VAR 0 2
2938: PPUSH
2939: LD_VAR 0 3
2943: PPUSH
2944: LD_VAR 0 4
2948: PPUSH
2949: CALL 10395 0 4
2953: PPOPN 4
2955: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2956: LD_INT 0
2958: PPUSH
2959: PPUSH
// disable ( mpActive ) ;
2960: LD_INT 100
2962: DISABLE_MARKED
// disable ( mpWin ) ;
2963: LD_INT 101
2965: DISABLE_MARKED
// disable ( mpLose ) ;
2966: LD_INT 102
2968: DISABLE_MARKED
// mpGameType := 0 ;
2969: LD_ADDR_EXP 5
2973: PUSH
2974: LD_INT 0
2976: ST_TO_ADDR
// mpGameSettings := [ ] ;
2977: LD_ADDR_EXP 8
2981: PUSH
2982: EMPTY
2983: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2984: LD_ADDR_EXP 6
2988: PUSH
2989: EMPTY
2990: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2991: LD_ADDR_EXP 7
2995: PUSH
2996: EMPTY
2997: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2998: LD_ADDR_EXP 31
3002: PUSH
3003: LD_INT 2
3005: PUSH
3006: LD_INT 2
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3013: LD_ADDR_EXP 14
3017: PUSH
3018: EMPTY
3019: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3020: LD_ADDR_EXP 15
3024: PUSH
3025: EMPTY
3026: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
3027: LD_ADDR_EXP 44
3031: PUSH
3032: EMPTY
3033: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
3034: LD_ADDR_EXP 45
3038: PUSH
3039: EMPTY
3040: ST_TO_ADDR
// mpDepots := [ ] ;
3041: LD_ADDR_EXP 16
3045: PUSH
3046: EMPTY
3047: ST_TO_ADDR
// mpBuildings := [ ] ;
3048: LD_ADDR_EXP 19
3052: PUSH
3053: EMPTY
3054: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3055: LD_ADDR_EXP 20
3059: PUSH
3060: EMPTY
3061: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3062: LD_ADDR_EXP 21
3066: PUSH
3067: EMPTY
3068: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3069: LD_ADDR_EXP 22
3073: PUSH
3074: EMPTY
3075: ST_TO_ADDR
// mpStartingResources := [ ] ;
3076: LD_ADDR_EXP 17
3080: PUSH
3081: EMPTY
3082: ST_TO_ADDR
// mpStartPos := [ ] ;
3083: LD_ADDR_EXP 23
3087: PUSH
3088: EMPTY
3089: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3090: LD_ADDR_EXP 24
3094: PUSH
3095: LD_INT 1
3097: NEG
3098: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3099: LD_ADDR_EXP 25
3103: PUSH
3104: EMPTY
3105: ST_TO_ADDR
// mpApemans := [ ] ;
3106: LD_ADDR_EXP 32
3110: PUSH
3111: EMPTY
3112: ST_TO_ADDR
// mpApemansArea := [ ] ;
3113: LD_ADDR_EXP 33
3117: PUSH
3118: EMPTY
3119: ST_TO_ADDR
// mpRespawn := [ ] ;
3120: LD_ADDR_EXP 35
3124: PUSH
3125: EMPTY
3126: ST_TO_ADDR
// mpKingArea := 0 ;
3127: LD_ADDR_EXP 36
3131: PUSH
3132: LD_INT 0
3134: ST_TO_ADDR
// mpPoints := [ ] ;
3135: LD_ADDR_EXP 37
3139: PUSH
3140: EMPTY
3141: ST_TO_ADDR
// mpVehicles := 0 ;
3142: LD_ADDR_EXP 38
3146: PUSH
3147: LD_INT 0
3149: ST_TO_ADDR
// mpShipments := 0 ;
3150: LD_ADDR_EXP 29
3154: PUSH
3155: LD_INT 0
3157: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3158: LD_ADDR_EXP 42
3162: PUSH
3163: EMPTY
3164: PUSH
3165: EMPTY
3166: PUSH
3167: EMPTY
3168: PUSH
3169: EMPTY
3170: PUSH
3171: EMPTY
3172: PUSH
3173: EMPTY
3174: PUSH
3175: EMPTY
3176: PUSH
3177: EMPTY
3178: PUSH
3179: EMPTY
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3189: LD_ADDR_EXP 34
3193: PUSH
3194: EMPTY
3195: PUSH
3196: EMPTY
3197: PUSH
3198: EMPTY
3199: PUSH
3200: EMPTY
3201: PUSH
3202: EMPTY
3203: PUSH
3204: EMPTY
3205: PUSH
3206: EMPTY
3207: PUSH
3208: EMPTY
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3220: LD_ADDR_EXP 43
3224: PUSH
3225: LD_INT 0
3227: PUSH
3228: LD_INT 0
3230: PUSH
3231: LD_INT 0
3233: PUSH
3234: LD_INT 0
3236: PUSH
3237: LD_INT 0
3239: PUSH
3240: LD_INT 0
3242: PUSH
3243: LD_INT 0
3245: PUSH
3246: LD_INT 0
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: ST_TO_ADDR
// mpEmissions := 0 ;
3259: LD_ADDR_EXP 39
3263: PUSH
3264: LD_INT 0
3266: ST_TO_ADDR
// mpTeleports := 0 ;
3267: LD_ADDR_EXP 46
3271: PUSH
3272: LD_INT 0
3274: ST_TO_ADDR
// mpArtifacts := 0 ;
3275: LD_ADDR_EXP 47
3279: PUSH
3280: LD_INT 0
3282: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3283: LD_ADDR_EXP 48
3287: PUSH
3288: LD_INT 0
3290: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3291: LD_ADDR_EXP 27
3295: PUSH
3296: LD_INT 3
3298: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3299: LD_ADDR_EXP 26
3303: PUSH
3304: LD_INT 15
3306: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3307: LD_ADDR_EXP 40
3311: PUSH
3312: LD_INT 0
3314: ST_TO_ADDR
// mpGameActive := false ;
3315: LD_ADDR_EXP 41
3319: PUSH
3320: LD_INT 0
3322: ST_TO_ADDR
// mpBlockRespThread := false ;
3323: LD_ADDR_EXP 49
3327: PUSH
3328: LD_INT 0
3330: ST_TO_ADDR
// for i := 1 to 32 do
3331: LD_ADDR_VAR 0 2
3335: PUSH
3336: DOUBLE
3337: LD_INT 1
3339: DEC
3340: ST_TO_ADDR
3341: LD_INT 32
3343: PUSH
3344: FOR_TO
3345: IFFALSE 3372
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3347: LD_ADDR_EXP 8
3351: PUSH
3352: LD_EXP 8
3356: PPUSH
3357: LD_VAR 0 2
3361: PPUSH
3362: LD_INT 0
3364: PPUSH
3365: CALL_OW 1
3369: ST_TO_ADDR
3370: GO 3344
3372: POP
3373: POP
// end ;
3374: LD_VAR 0 1
3378: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3379: LD_INT 0
3381: PPUSH
3382: PPUSH
3383: PPUSH
3384: PPUSH
3385: PPUSH
3386: PPUSH
3387: PPUSH
3388: PPUSH
3389: PPUSH
3390: PPUSH
3391: PPUSH
3392: PPUSH
3393: PPUSH
3394: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalH ] ;
3395: LD_ADDR_VAR 0 14
3399: PUSH
3400: LD_INT 1
3402: PUSH
3403: LD_INT 2
3405: PUSH
3406: LD_INT 3
3408: PUSH
3409: LD_INT 5
3411: PUSH
3412: LD_INT 6
3414: PUSH
3415: LD_INT 7
3417: PUSH
3418: LD_INT 8
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: ST_TO_ADDR
// for i in gameTypes do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: LD_VAR 0 14
3439: PUSH
3440: FOR_IN
3441: IFFALSE 3450
// disable ( i ) ;
3443: LD_VAR 0 2
3447: DISABLE_MARKED
3448: GO 3440
3450: POP
3451: POP
// if Multiplayer then
3452: LD_OWVAR 4
3456: IFFALSE 3640
// begin mpGameType := mp_game_type ;
3458: LD_ADDR_EXP 5
3462: PUSH
3463: LD_OWVAR 6
3467: ST_TO_ADDR
// your_side := mp_player_side ;
3468: LD_ADDR_OWVAR 2
3472: PUSH
3473: LD_OWVAR 7
3477: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3478: LD_ADDR_EXP 9
3482: PUSH
3483: LD_OWVAR 17
3487: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3488: LD_ADDR_EXP 10
3492: PUSH
3493: LD_OWVAR 15
3497: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3498: LD_ADDR_EXP 11
3502: PUSH
3503: LD_OWVAR 16
3507: ST_TO_ADDR
// mpTeams := mp_teams ;
3508: LD_ADDR_EXP 12
3512: PUSH
3513: LD_OWVAR 12
3517: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3518: LD_ADDR_VAR 0 2
3522: PUSH
3523: DOUBLE
3524: LD_INT 1
3526: DEC
3527: ST_TO_ADDR
3528: LD_EXP 6
3532: PPUSH
3533: CALL 13716 0 1
3537: PUSH
3538: FOR_TO
3539: IFFALSE 3615
// begin setting := mpGameSettingsKeys [ i ] ;
3541: LD_ADDR_VAR 0 12
3545: PUSH
3546: LD_EXP 6
3550: PUSH
3551: LD_VAR 0 2
3555: ARRAY
3556: ST_TO_ADDR
// if setting then
3557: LD_VAR 0 12
3561: IFFALSE 3613
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3563: LD_ADDR_EXP 8
3567: PUSH
3568: LD_EXP 8
3572: PPUSH
3573: LD_VAR 0 2
3577: PPUSH
3578: LD_EXP 7
3582: PUSH
3583: LD_VAR 0 2
3587: ARRAY
3588: PUSH
3589: LD_VAR 0 2
3593: PUSH
3594: LD_INT 1
3596: MINUS
3597: PPUSH
3598: CALL_OW 426
3602: PUSH
3603: LD_INT 1
3605: PLUS
3606: ARRAY
3607: PPUSH
3608: CALL_OW 1
3612: ST_TO_ADDR
// end ;
3613: GO 3538
3615: POP
3616: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3617: LD_ADDR_EXP 13
3621: PUSH
3622: LD_EXP 10
3626: PUSH
3627: LD_INT 0
3629: PUSH
3630: EMPTY
3631: LIST
3632: DIFF
3633: PUSH
3634: LD_INT 1
3636: GREATER
3637: ST_TO_ADDR
// end else
3638: GO 3640
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3640: LD_EXP 5
3644: PPUSH
3645: CALL 830 0 1
// if Count ( mpMarkedAreas ) then
3649: LD_EXP 20
3653: PPUSH
3654: CALL 13716 0 1
3658: IFFALSE 3689
// begin for i in mpMarkedAreas do
3660: LD_ADDR_VAR 0 2
3664: PUSH
3665: LD_EXP 20
3669: PUSH
3670: FOR_IN
3671: IFFALSE 3687
// SetAreaMapShow ( i , 0 ) ;
3673: LD_VAR 0 2
3677: PPUSH
3678: LD_INT 0
3680: PPUSH
3681: CALL_OW 424
3685: GO 3670
3687: POP
3688: POP
// end ; for i := 1 to 8 do
3689: LD_ADDR_VAR 0 2
3693: PUSH
3694: DOUBLE
3695: LD_INT 1
3697: DEC
3698: ST_TO_ADDR
3699: LD_INT 8
3701: PUSH
3702: FOR_TO
3703: IFFALSE 5162
// begin if not mpSidePositions [ i ] then
3705: LD_EXP 9
3709: PUSH
3710: LD_VAR 0 2
3714: ARRAY
3715: NOT
3716: IFFALSE 3720
// continue ;
3718: GO 3702
// side := i ;
3720: LD_ADDR_VAR 0 7
3724: PUSH
3725: LD_VAR 0 2
3729: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3730: LD_ADDR_VAR 0 9
3734: PUSH
3735: LD_EXP 11
3739: PUSH
3740: LD_VAR 0 2
3744: ARRAY
3745: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3746: LD_ADDR_VAR 0 8
3750: PUSH
3751: LD_EXP 9
3755: PUSH
3756: LD_VAR 0 2
3760: ARRAY
3761: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3762: LD_EXP 14
3766: PPUSH
3767: CALL 13716 0 1
3771: IFFALSE 3848
// begin for j in mpOilDeposits [ pos ] do
3773: LD_ADDR_VAR 0 3
3777: PUSH
3778: LD_EXP 14
3782: PUSH
3783: LD_VAR 0 8
3787: ARRAY
3788: PUSH
3789: FOR_IN
3790: IFFALSE 3846
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3792: LD_VAR 0 3
3796: PUSH
3797: LD_INT 1
3799: ARRAY
3800: PPUSH
3801: LD_VAR 0 3
3805: PUSH
3806: LD_INT 2
3808: ARRAY
3809: PPUSH
3810: LD_INT 2
3812: PPUSH
3813: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3817: LD_VAR 0 3
3821: PUSH
3822: LD_INT 1
3824: ARRAY
3825: PPUSH
3826: LD_VAR 0 3
3830: PUSH
3831: LD_INT 2
3833: ARRAY
3834: PPUSH
3835: LD_VAR 0 7
3839: PPUSH
3840: CALL_OW 441
// end ;
3844: GO 3789
3846: POP
3847: POP
// end ; if Count ( mpSibDeposits ) then
3848: LD_EXP 15
3852: PPUSH
3853: CALL 13716 0 1
3857: IFFALSE 3934
// begin for j in mpSibDeposits [ pos ] do
3859: LD_ADDR_VAR 0 3
3863: PUSH
3864: LD_EXP 15
3868: PUSH
3869: LD_VAR 0 8
3873: ARRAY
3874: PUSH
3875: FOR_IN
3876: IFFALSE 3932
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3878: LD_VAR 0 3
3882: PUSH
3883: LD_INT 1
3885: ARRAY
3886: PPUSH
3887: LD_VAR 0 3
3891: PUSH
3892: LD_INT 2
3894: ARRAY
3895: PPUSH
3896: LD_INT 3
3898: PPUSH
3899: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3903: LD_VAR 0 3
3907: PUSH
3908: LD_INT 1
3910: ARRAY
3911: PPUSH
3912: LD_VAR 0 3
3916: PUSH
3917: LD_INT 2
3919: ARRAY
3920: PPUSH
3921: LD_VAR 0 7
3925: PPUSH
3926: CALL_OW 441
// end ;
3930: GO 3875
3932: POP
3933: POP
// end ; InitBc ;
3934: CALL_OW 21
// InitUc ;
3938: CALL_OW 18
// uc_side := side ;
3942: LD_ADDR_OWVAR 20
3946: PUSH
3947: LD_VAR 0 7
3951: ST_TO_ADDR
// uc_nation := nation ;
3952: LD_ADDR_OWVAR 21
3956: PUSH
3957: LD_VAR 0 9
3961: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3962: LD_EXP 24
3966: PUSH
3967: LD_INT 1
3969: NEG
3970: GREATER
3971: IFFALSE 4130
// begin x := mpStartPos [ pos ] [ 1 ] ;
3973: LD_ADDR_VAR 0 5
3977: PUSH
3978: LD_EXP 23
3982: PUSH
3983: LD_VAR 0 8
3987: ARRAY
3988: PUSH
3989: LD_INT 1
3991: ARRAY
3992: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3993: LD_ADDR_VAR 0 6
3997: PUSH
3998: LD_EXP 23
4002: PUSH
4003: LD_VAR 0 8
4007: ARRAY
4008: PUSH
4009: LD_INT 2
4011: ARRAY
4012: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4013: LD_VAR 0 5
4017: PPUSH
4018: LD_VAR 0 6
4022: PPUSH
4023: LD_INT 12
4025: PPUSH
4026: LD_INT 2
4028: PPUSH
4029: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4033: LD_ADDR_EXP 25
4037: PUSH
4038: LD_EXP 25
4042: PPUSH
4043: LD_VAR 0 7
4047: PPUSH
4048: LD_VAR 0 7
4052: PPUSH
4053: LD_VAR 0 5
4057: PPUSH
4058: LD_VAR 0 6
4062: PPUSH
4063: LD_INT 1
4065: PUSH
4066: LD_INT 100
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PUSH
4073: LD_INT 2
4075: PUSH
4076: LD_INT 70
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: PUSH
4083: LD_INT 3
4085: PUSH
4086: LD_INT 40
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 10
4095: PUSH
4096: LD_INT 25
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 20
4105: PUSH
4106: LD_INT 100
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: PPUSH
4120: CALL_OW 418
4124: PPUSH
4125: CALL_OW 1
4129: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
4130: LD_EXP 16
4134: PPUSH
4135: CALL 13716 0 1
4139: IFFALSE 4338
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH , GameTypeArmsRace , GameTypeArmsArtifact ] then
4141: LD_EXP 5
4145: PUSH
4146: LD_INT 2
4148: PUSH
4149: LD_INT 8
4151: PUSH
4152: LD_INT 6
4154: PUSH
4155: LD_INT 7
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: IN
4164: IFFALSE 4184
// begin bc_level := 10 ;
4166: LD_ADDR_OWVAR 43
4170: PUSH
4171: LD_INT 10
4173: ST_TO_ADDR
// bc_type := b_warehouse ;
4174: LD_ADDR_OWVAR 42
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// end else
4182: GO 4200
// begin bc_level := 0 ;
4184: LD_ADDR_OWVAR 43
4188: PUSH
4189: LD_INT 0
4191: ST_TO_ADDR
// bc_type := b_depot ;
4192: LD_ADDR_OWVAR 42
4196: PUSH
4197: LD_INT 0
4199: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4200: LD_ADDR_VAR 0 4
4204: PUSH
4205: LD_EXP 16
4209: PUSH
4210: LD_VAR 0 8
4214: ARRAY
4215: PUSH
4216: LD_INT 1
4218: ARRAY
4219: PPUSH
4220: LD_EXP 16
4224: PUSH
4225: LD_VAR 0 8
4229: ARRAY
4230: PUSH
4231: LD_INT 2
4233: ARRAY
4234: PPUSH
4235: LD_EXP 16
4239: PUSH
4240: LD_VAR 0 8
4244: ARRAY
4245: PUSH
4246: LD_INT 3
4248: ARRAY
4249: PPUSH
4250: CALL_OW 47
4254: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4255: LD_VAR 0 4
4259: PPUSH
4260: LD_STRING @
4262: PUSH
4263: LD_VAR 0 7
4267: STR
4268: PPUSH
4269: CALL_OW 500
// if Count ( mpStartingResources ) then
4273: LD_EXP 17
4277: PPUSH
4278: CALL 13716 0 1
4282: IFFALSE 4336
// begin for j := 1 to mpStartingResources do
4284: LD_ADDR_VAR 0 3
4288: PUSH
4289: DOUBLE
4290: LD_INT 1
4292: DEC
4293: ST_TO_ADDR
4294: LD_EXP 17
4298: PUSH
4299: FOR_TO
4300: IFFALSE 4334
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4302: LD_VAR 0 4
4306: PPUSH
4307: CALL_OW 274
4311: PPUSH
4312: LD_VAR 0 3
4316: PPUSH
4317: LD_EXP 17
4321: PUSH
4322: LD_VAR 0 3
4326: ARRAY
4327: PPUSH
4328: CALL_OW 277
4332: GO 4299
4334: POP
4335: POP
// end ; end else
4336: GO 4545
// if Count ( mpStartingResources ) then
4338: LD_EXP 17
4342: PPUSH
4343: CALL 13716 0 1
4347: IFFALSE 4545
// begin x := mpStartPos [ pos ] [ 1 ] ;
4349: LD_ADDR_VAR 0 5
4353: PUSH
4354: LD_EXP 23
4358: PUSH
4359: LD_VAR 0 8
4363: ARRAY
4364: PUSH
4365: LD_INT 1
4367: ARRAY
4368: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4369: LD_ADDR_VAR 0 6
4373: PUSH
4374: LD_EXP 23
4378: PUSH
4379: LD_VAR 0 8
4383: ARRAY
4384: PUSH
4385: LD_INT 2
4387: ARRAY
4388: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4389: LD_ADDR_VAR 0 3
4393: PUSH
4394: DOUBLE
4395: LD_INT 1
4397: DEC
4398: ST_TO_ADDR
4399: LD_EXP 17
4403: PUSH
4404: FOR_TO
4405: IFFALSE 4543
// begin resources := mpStartingResources [ j ] ;
4407: LD_ADDR_VAR 0 13
4411: PUSH
4412: LD_EXP 17
4416: PUSH
4417: LD_VAR 0 3
4421: ARRAY
4422: ST_TO_ADDR
// if resources = 0 then
4423: LD_VAR 0 13
4427: PUSH
4428: LD_INT 0
4430: EQUAL
4431: IFFALSE 4435
// continue ;
4433: GO 4404
// repeat if resources >= 50 then
4435: LD_VAR 0 13
4439: PUSH
4440: LD_INT 50
4442: GREATEREQUAL
4443: IFFALSE 4489
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4445: LD_VAR 0 3
4449: PPUSH
4450: LD_INT 5
4452: PPUSH
4453: LD_VAR 0 5
4457: PPUSH
4458: LD_VAR 0 6
4462: PPUSH
4463: LD_INT 6
4465: PPUSH
4466: LD_INT 0
4468: PPUSH
4469: CALL_OW 60
// resources := resources - 50 ;
4473: LD_ADDR_VAR 0 13
4477: PUSH
4478: LD_VAR 0 13
4482: PUSH
4483: LD_INT 50
4485: MINUS
4486: ST_TO_ADDR
// end else
4487: GO 4531
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4489: LD_VAR 0 3
4493: PPUSH
4494: LD_VAR 0 13
4498: PUSH
4499: LD_INT 10
4501: DIV
4502: PPUSH
4503: LD_VAR 0 5
4507: PPUSH
4508: LD_VAR 0 6
4512: PPUSH
4513: LD_INT 6
4515: PPUSH
4516: LD_INT 0
4518: PPUSH
4519: CALL_OW 60
// resources := 0 ;
4523: LD_ADDR_VAR 0 13
4527: PUSH
4528: LD_INT 0
4530: ST_TO_ADDR
// end ; until resources <= 0 ;
4531: LD_VAR 0 13
4535: PUSH
4536: LD_INT 0
4538: LESSEQUAL
4539: IFFALSE 4435
// end ;
4541: GO 4404
4543: POP
4544: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
4545: LD_EXP 19
4549: PPUSH
4550: CALL 13716 0 1
4554: IFFALSE 4574
4556: PUSH
4557: LD_EXP 5
4561: PUSH
4562: LD_INT 2
4564: PUSH
4565: LD_INT 8
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: IN
4572: NOT
4573: AND
4574: IFFALSE 4652
// begin for j in mpBuildings [ pos ] do
4576: LD_ADDR_VAR 0 3
4580: PUSH
4581: LD_EXP 19
4585: PUSH
4586: LD_VAR 0 8
4590: ARRAY
4591: PUSH
4592: FOR_IN
4593: IFFALSE 4650
// begin bc_level := 0 ;
4595: LD_ADDR_OWVAR 43
4599: PUSH
4600: LD_INT 0
4602: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4603: LD_ADDR_OWVAR 42
4607: PUSH
4608: LD_VAR 0 3
4612: PUSH
4613: LD_INT 1
4615: ARRAY
4616: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4617: LD_VAR 0 3
4621: PUSH
4622: LD_INT 2
4624: ARRAY
4625: PPUSH
4626: LD_VAR 0 3
4630: PUSH
4631: LD_INT 3
4633: ARRAY
4634: PPUSH
4635: LD_VAR 0 3
4639: PUSH
4640: LD_INT 4
4642: ARRAY
4643: PPUSH
4644: CALL_OW 47
// end ;
4648: GO 4592
4650: POP
4651: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4652: LD_EXP 28
4656: IFFALSE 4676
4658: PUSH
4659: LD_INT 20
4661: PPUSH
4662: LD_VAR 0 7
4666: PPUSH
4667: CALL_OW 321
4671: PUSH
4672: LD_INT 1
4674: EQUAL
4675: AND
4676: IFFALSE 4693
// SetTech ( tech_SibDet , side , state_researched ) ;
4678: LD_INT 20
4680: PPUSH
4681: LD_VAR 0 7
4685: PPUSH
4686: LD_INT 2
4688: PPUSH
4689: CALL_OW 322
// if not mpArtifacts then
4693: LD_EXP 47
4697: NOT
4698: IFFALSE 4715
// SetTech ( tech_artifact , side , state_disabled ) ;
4700: LD_INT 24
4702: PPUSH
4703: LD_VAR 0 7
4707: PPUSH
4708: LD_INT 0
4710: PPUSH
4711: CALL_OW 322
// if mpSibBomb = 1 then
4715: LD_EXP 30
4719: PUSH
4720: LD_INT 1
4722: EQUAL
4723: IFFALSE 4742
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4725: LD_INT 25
4727: PPUSH
4728: LD_VAR 0 7
4732: PPUSH
4733: LD_INT 1
4735: PPUSH
4736: CALL_OW 322
// end else
4740: GO 4757
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4742: LD_INT 25
4744: PPUSH
4745: LD_VAR 0 7
4749: PPUSH
4750: LD_INT 0
4752: PPUSH
4753: CALL_OW 322
// end ; if mpVehicles then
4757: LD_EXP 38
4761: IFFALSE 4860
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: LD_VAR 0 7
4772: PPUSH
4773: LD_VAR 0 9
4777: PPUSH
4778: LD_EXP 38
4782: PPUSH
4783: CALL 6119 0 3
4787: PUSH
4788: FOR_IN
4789: IFFALSE 4858
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4791: LD_VAR 0 3
4795: PPUSH
4796: LD_INT 0
4798: PPUSH
4799: LD_INT 5
4801: PPUSH
4802: CALL_OW 12
4806: PPUSH
4807: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4811: LD_VAR 0 3
4815: PPUSH
4816: LD_EXP 23
4820: PUSH
4821: LD_VAR 0 8
4825: ARRAY
4826: PUSH
4827: LD_INT 1
4829: ARRAY
4830: PPUSH
4831: LD_EXP 23
4835: PUSH
4836: LD_VAR 0 8
4840: ARRAY
4841: PUSH
4842: LD_INT 2
4844: ARRAY
4845: PPUSH
4846: LD_INT 12
4848: PPUSH
4849: LD_INT 0
4851: PPUSH
4852: CALL_OW 50
// end ;
4856: GO 4788
4858: POP
4859: POP
// end ; uc_nation := nation ;
4860: LD_ADDR_OWVAR 21
4864: PUSH
4865: LD_VAR 0 9
4869: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4870: LD_EXP 5
4874: PUSH
4875: LD_INT 6
4877: PUSH
4878: LD_INT 7
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: IN
4885: IFFALSE 4910
4887: PUSH
4888: LD_EXP 9
4892: PUSH
4893: LD_VAR 0 2
4897: ARRAY
4898: PUSH
4899: LD_INT 1
4901: PUSH
4902: LD_INT 2
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: IN
4909: AND
4910: IFFALSE 4958
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4912: LD_ADDR_VAR 0 11
4916: PUSH
4917: LD_VAR 0 7
4921: PPUSH
4922: LD_VAR 0 9
4926: PPUSH
4927: LD_EXP 26
4931: PUSH
4932: LD_EXP 26
4936: PUSH
4937: LD_INT 2
4939: DIV
4940: PLUS
4941: PPUSH
4942: LD_EXP 27
4946: PUSH
4947: LD_INT 1
4949: PLUS
4950: PPUSH
4951: CALL 5574 0 4
4955: ST_TO_ADDR
4956: GO 4988
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4958: LD_ADDR_VAR 0 11
4962: PUSH
4963: LD_VAR 0 7
4967: PPUSH
4968: LD_VAR 0 9
4972: PPUSH
4973: LD_EXP 26
4977: PPUSH
4978: LD_EXP 27
4982: PPUSH
4983: CALL 5574 0 4
4987: ST_TO_ADDR
// for j in team do
4988: LD_ADDR_VAR 0 3
4992: PUSH
4993: LD_VAR 0 11
4997: PUSH
4998: FOR_IN
4999: IFFALSE 5048
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5001: LD_VAR 0 3
5005: PPUSH
5006: LD_EXP 23
5010: PUSH
5011: LD_VAR 0 8
5015: ARRAY
5016: PUSH
5017: LD_INT 1
5019: ARRAY
5020: PPUSH
5021: LD_EXP 23
5025: PUSH
5026: LD_VAR 0 8
5030: ARRAY
5031: PUSH
5032: LD_INT 2
5034: ARRAY
5035: PPUSH
5036: LD_INT 12
5038: PPUSH
5039: LD_INT 0
5041: PPUSH
5042: CALL_OW 50
5046: GO 4998
5048: POP
5049: POP
// if mpApemans then
5050: LD_EXP 32
5054: IFFALSE 5160
// begin for j := 1 to mpApemans do
5056: LD_ADDR_VAR 0 3
5060: PUSH
5061: DOUBLE
5062: LD_INT 1
5064: DEC
5065: ST_TO_ADDR
5066: LD_EXP 32
5070: PUSH
5071: FOR_TO
5072: IFFALSE 5158
// begin PrepareApeman ( - 5 ) ;
5074: LD_INT 5
5076: NEG
5077: PPUSH
5078: CALL 45819 0 1
// ape := CreateHuman ;
5082: LD_ADDR_VAR 0 10
5086: PUSH
5087: CALL_OW 44
5091: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
5092: LD_ADDR_EXP 34
5096: PUSH
5097: LD_EXP 34
5101: PPUSH
5102: LD_VAR 0 8
5106: PPUSH
5107: LD_EXP 34
5111: PUSH
5112: LD_VAR 0 8
5116: ARRAY
5117: PPUSH
5118: LD_VAR 0 10
5122: PPUSH
5123: CALL 49692 0 2
5127: PPUSH
5128: CALL_OW 1
5132: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
5133: LD_VAR 0 10
5137: PPUSH
5138: LD_EXP 33
5142: PUSH
5143: LD_VAR 0 8
5147: ARRAY
5148: PPUSH
5149: LD_INT 0
5151: PPUSH
5152: CALL_OW 49
// end ;
5156: GO 5071
5158: POP
5159: POP
// end ; end ;
5160: GO 3702
5162: POP
5163: POP
// if not mpTeamGame then
5164: LD_EXP 13
5168: NOT
5169: IFFALSE 5267
// begin for i := 1 to 8 do
5171: LD_ADDR_VAR 0 2
5175: PUSH
5176: DOUBLE
5177: LD_INT 1
5179: DEC
5180: ST_TO_ADDR
5181: LD_INT 8
5183: PUSH
5184: FOR_TO
5185: IFFALSE 5263
// for j := 1 to 8 do
5187: LD_ADDR_VAR 0 3
5191: PUSH
5192: DOUBLE
5193: LD_INT 1
5195: DEC
5196: ST_TO_ADDR
5197: LD_INT 8
5199: PUSH
5200: FOR_TO
5201: IFFALSE 5259
// if i <> j then
5203: LD_VAR 0 2
5207: PUSH
5208: LD_VAR 0 3
5212: NONEQUAL
5213: IFFALSE 5237
// SetAttitude ( i , j , att_neutral , true ) else
5215: LD_VAR 0 2
5219: PPUSH
5220: LD_VAR 0 3
5224: PPUSH
5225: LD_INT 0
5227: PPUSH
5228: LD_INT 1
5230: PPUSH
5231: CALL_OW 80
5235: GO 5257
// SetAttitude ( i , j , att_friend , true ) ;
5237: LD_VAR 0 2
5241: PPUSH
5242: LD_VAR 0 3
5246: PPUSH
5247: LD_INT 1
5249: PPUSH
5250: LD_INT 1
5252: PPUSH
5253: CALL_OW 80
5257: GO 5200
5259: POP
5260: POP
5261: GO 5184
5263: POP
5264: POP
// end else
5265: GO 5442
// begin if mpSharedVision then
5267: LD_EXP 18
5271: IFFALSE 5336
// begin for i in mpTeams do
5273: LD_ADDR_VAR 0 2
5277: PUSH
5278: LD_EXP 12
5282: PUSH
5283: FOR_IN
5284: IFFALSE 5334
// for j := 2 to i do
5286: LD_ADDR_VAR 0 3
5290: PUSH
5291: DOUBLE
5292: LD_INT 2
5294: DEC
5295: ST_TO_ADDR
5296: LD_VAR 0 2
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5330
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5304: LD_VAR 0 2
5308: PUSH
5309: LD_VAR 0 3
5313: ARRAY
5314: PPUSH
5315: LD_VAR 0 2
5319: PUSH
5320: LD_INT 1
5322: ARRAY
5323: PPUSH
5324: CALL_OW 343
5328: GO 5301
5330: POP
5331: POP
5332: GO 5283
5334: POP
5335: POP
// end ; for i := 1 to 8 do
5336: LD_ADDR_VAR 0 2
5340: PUSH
5341: DOUBLE
5342: LD_INT 1
5344: DEC
5345: ST_TO_ADDR
5346: LD_INT 8
5348: PUSH
5349: FOR_TO
5350: IFFALSE 5440
// for j := 1 to 8 do
5352: LD_ADDR_VAR 0 3
5356: PUSH
5357: DOUBLE
5358: LD_INT 1
5360: DEC
5361: ST_TO_ADDR
5362: LD_INT 8
5364: PUSH
5365: FOR_TO
5366: IFFALSE 5436
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5368: LD_EXP 10
5372: PUSH
5373: LD_VAR 0 2
5377: ARRAY
5378: PUSH
5379: LD_EXP 10
5383: PUSH
5384: LD_VAR 0 3
5388: ARRAY
5389: EQUAL
5390: IFFALSE 5414
// SetAttitude ( i , j , att_friend , true ) else
5392: LD_VAR 0 2
5396: PPUSH
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: LD_INT 1
5407: PPUSH
5408: CALL_OW 80
5412: GO 5434
// SetAttitude ( i , j , att_enemy , true ) ;
5414: LD_VAR 0 2
5418: PPUSH
5419: LD_VAR 0 3
5423: PPUSH
5424: LD_INT 2
5426: PPUSH
5427: LD_INT 1
5429: PPUSH
5430: CALL_OW 80
5434: GO 5365
5436: POP
5437: POP
5438: GO 5349
5440: POP
5441: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5442: LD_ADDR_OWVAR 71
5446: PUSH
5447: LD_EXP 11
5451: PUSH
5452: LD_OWVAR 2
5456: ARRAY
5457: ST_TO_ADDR
// if IAmSpec then
5458: CALL_OW 531
5462: IFFALSE 5503
// begin FogOff ( true ) ;
5464: LD_INT 1
5466: PPUSH
5467: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5471: LD_EXP 31
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PUSH
5480: LD_INT 2
5482: DIV
5483: PPUSH
5484: LD_EXP 31
5488: PUSH
5489: LD_INT 2
5491: ARRAY
5492: PUSH
5493: LD_INT 2
5495: DIV
5496: PPUSH
5497: CALL_OW 86
// end else
5501: GO 5549
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5503: LD_EXP 23
5507: PUSH
5508: LD_EXP 9
5512: PUSH
5513: LD_OWVAR 2
5517: ARRAY
5518: ARRAY
5519: PUSH
5520: LD_INT 1
5522: ARRAY
5523: PPUSH
5524: LD_EXP 23
5528: PUSH
5529: LD_EXP 9
5533: PUSH
5534: LD_OWVAR 2
5538: ARRAY
5539: ARRAY
5540: PUSH
5541: LD_INT 2
5543: ARRAY
5544: PPUSH
5545: CALL_OW 86
// end ; BeginBuildUp ;
5549: CALL 6652 0 0
// enable ( mpActive ) ;
5553: LD_INT 100
5555: ENABLE_MARKED
// enable ( mpGameType ) ;
5556: LD_EXP 5
5560: ENABLE_MARKED
// mpGameActive := true ;
5561: LD_ADDR_EXP 41
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// end ;
5569: LD_VAR 0 1
5573: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5574: LD_INT 0
5576: PPUSH
5577: PPUSH
5578: PPUSH
5579: PPUSH
5580: PPUSH
// result := [ ] ;
5581: LD_ADDR_VAR 0 5
5585: PUSH
5586: EMPTY
5587: ST_TO_ADDR
// class := class_soldier ;
5588: LD_ADDR_VAR 0 8
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// uc_side := side ;
5596: LD_ADDR_OWVAR 20
5600: PUSH
5601: LD_VAR 0 1
5605: ST_TO_ADDR
// uc_nation := nation ;
5606: LD_ADDR_OWVAR 21
5610: PUSH
5611: LD_VAR 0 2
5615: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5616: LD_ADDR_OWVAR 26
5620: PUSH
5621: LD_OWVAR 19
5625: PUSH
5626: LD_VAR 0 1
5630: ARRAY
5631: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5632: LD_INT 1
5634: PPUSH
5635: LD_INT 2
5637: PPUSH
5638: CALL_OW 12
5642: PPUSH
5643: LD_VAR 0 8
5647: PPUSH
5648: LD_VAR 0 4
5652: PUSH
5653: LD_INT 2
5655: PLUS
5656: PPUSH
5657: CALL_OW 380
// hc_importance := 105 ;
5661: LD_ADDR_OWVAR 32
5665: PUSH
5666: LD_INT 105
5668: ST_TO_ADDR
// if Multiplayer then
5669: LD_OWVAR 4
5673: IFFALSE 5713
// begin hc_gallery := MULTIAVATARS ;
5675: LD_ADDR_OWVAR 33
5679: PUSH
5680: LD_STRING MULTIAVATARS
5682: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5683: LD_ADDR_OWVAR 34
5687: PUSH
5688: LD_VAR 0 1
5692: PPUSH
5693: CALL_OW 525
5697: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5698: LD_ADDR_OWVAR 27
5702: PUSH
5703: LD_VAR 0 1
5707: PPUSH
5708: CALL_OW 526
5712: ST_TO_ADDR
// end ; commander := CreateHuman ;
5713: LD_ADDR_VAR 0 9
5717: PUSH
5718: CALL_OW 44
5722: ST_TO_ADDR
// result := Join ( result , commander ) ;
5723: LD_ADDR_VAR 0 5
5727: PUSH
5728: LD_VAR 0 5
5732: PPUSH
5733: LD_VAR 0 9
5737: PPUSH
5738: CALL 49692 0 2
5742: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5743: LD_ADDR_EXP 43
5747: PUSH
5748: LD_EXP 43
5752: PPUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: LD_VAR 0 9
5762: PPUSH
5763: CALL_OW 1
5767: ST_TO_ADDR
// if mpTeamPreset then
5768: LD_LOC 1
5772: IFFALSE 5868
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5774: LD_LOC 1
5778: PUSH
5779: LD_INT 1
5781: ARRAY
5782: PPUSH
5783: LD_VAR 0 5
5787: PUSH
5788: LD_VAR 0 5
5792: ARRAY
5793: PPUSH
5794: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5798: LD_VAR 0 5
5802: PUSH
5803: LD_VAR 0 5
5807: ARRAY
5808: PPUSH
5809: LD_INT 1
5811: PPUSH
5812: LD_LOC 1
5816: PUSH
5817: LD_INT 1
5819: ARRAY
5820: PPUSH
5821: LD_INT 1
5823: PPUSH
5824: CALL_OW 260
5828: PPUSH
5829: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5833: LD_VAR 0 5
5837: PUSH
5838: LD_VAR 0 5
5842: ARRAY
5843: PPUSH
5844: LD_INT 2
5846: PPUSH
5847: LD_LOC 1
5851: PUSH
5852: LD_INT 1
5854: ARRAY
5855: PPUSH
5856: LD_INT 2
5858: PPUSH
5859: CALL_OW 260
5863: PPUSH
5864: CALL_OW 239
// end ; InitHc_All ( ) ;
5868: CALL_OW 584
// class := 2 ;
5872: LD_ADDR_VAR 0 8
5876: PUSH
5877: LD_INT 2
5879: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5880: LD_ADDR_VAR 0 6
5884: PUSH
5885: DOUBLE
5886: LD_INT 1
5888: DEC
5889: ST_TO_ADDR
5890: LD_VAR 0 3
5894: PUSH
5895: LD_INT 1
5897: MINUS
5898: PUSH
5899: FOR_TO
5900: IFFALSE 6095
// begin PrepareHuman ( false , class , skill ) ;
5902: LD_INT 0
5904: PPUSH
5905: LD_VAR 0 8
5909: PPUSH
5910: LD_VAR 0 4
5914: PPUSH
5915: CALL_OW 380
// un := CreateHuman ;
5919: LD_ADDR_VAR 0 7
5923: PUSH
5924: CALL_OW 44
5928: ST_TO_ADDR
// result := Join ( result , un ) ;
5929: LD_ADDR_VAR 0 5
5933: PUSH
5934: LD_VAR 0 5
5938: PPUSH
5939: LD_VAR 0 7
5943: PPUSH
5944: CALL 49692 0 2
5948: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5949: LD_LOC 1
5953: PPUSH
5954: CALL 13716 0 1
5958: PUSH
5959: LD_VAR 0 3
5963: GREATEREQUAL
5964: IFFALSE 6060
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5966: LD_LOC 1
5970: PUSH
5971: LD_VAR 0 6
5975: PUSH
5976: LD_INT 1
5978: PLUS
5979: ARRAY
5980: PPUSH
5981: LD_VAR 0 7
5985: PPUSH
5986: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5990: LD_VAR 0 7
5994: PPUSH
5995: LD_INT 1
5997: PPUSH
5998: LD_LOC 1
6002: PUSH
6003: LD_VAR 0 6
6007: PUSH
6008: LD_INT 1
6010: PLUS
6011: ARRAY
6012: PPUSH
6013: LD_INT 1
6015: PPUSH
6016: CALL_OW 260
6020: PPUSH
6021: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
6025: LD_VAR 0 7
6029: PPUSH
6030: LD_INT 2
6032: PPUSH
6033: LD_LOC 1
6037: PUSH
6038: LD_VAR 0 6
6042: PUSH
6043: LD_INT 1
6045: PLUS
6046: ARRAY
6047: PPUSH
6048: LD_INT 2
6050: PPUSH
6051: CALL_OW 260
6055: PPUSH
6056: CALL_OW 239
// end ; class := Inc ( class ) ;
6060: LD_ADDR_VAR 0 8
6064: PUSH
6065: LD_VAR 0 8
6069: PPUSH
6070: CALL 51065 0 1
6074: ST_TO_ADDR
// if class = 5 then
6075: LD_VAR 0 8
6079: PUSH
6080: LD_INT 5
6082: EQUAL
6083: IFFALSE 6093
// class := 1 ;
6085: LD_ADDR_VAR 0 8
6089: PUSH
6090: LD_INT 1
6092: ST_TO_ADDR
// end ;
6093: GO 5899
6095: POP
6096: POP
// if not mpTeamPreset then
6097: LD_LOC 1
6101: NOT
6102: IFFALSE 6114
// mpTeamPreset := result ;
6104: LD_ADDR_LOC 1
6108: PUSH
6109: LD_VAR 0 5
6113: ST_TO_ADDR
// end ;
6114: LD_VAR 0 5
6118: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
6119: LD_INT 0
6121: PPUSH
6122: PPUSH
// result := [ ] ;
6123: LD_ADDR_VAR 0 4
6127: PUSH
6128: EMPTY
6129: ST_TO_ADDR
// if not vehicles then
6130: LD_VAR 0 3
6134: NOT
6135: IFFALSE 6139
// exit ;
6137: GO 6353
// for i := 1 to vehicles [ nation ] do
6139: LD_ADDR_VAR 0 5
6143: PUSH
6144: DOUBLE
6145: LD_INT 1
6147: DEC
6148: ST_TO_ADDR
6149: LD_VAR 0 3
6153: PUSH
6154: LD_VAR 0 2
6158: ARRAY
6159: PUSH
6160: FOR_TO
6161: IFFALSE 6351
// begin uc_side := side ;
6163: LD_ADDR_OWVAR 20
6167: PUSH
6168: LD_VAR 0 1
6172: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6173: LD_VAR 0 3
6177: PUSH
6178: LD_VAR 0 2
6182: ARRAY
6183: PUSH
6184: LD_VAR 0 5
6188: ARRAY
6189: PPUSH
6190: CALL 13716 0 1
6194: PUSH
6195: LD_INT 4
6197: GREATER
6198: IFFALSE 6228
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6200: LD_ADDR_OWVAR 21
6204: PUSH
6205: LD_VAR 0 3
6209: PUSH
6210: LD_VAR 0 2
6214: ARRAY
6215: PUSH
6216: LD_VAR 0 5
6220: ARRAY
6221: PUSH
6222: LD_INT 5
6224: ARRAY
6225: ST_TO_ADDR
6226: GO 6238
// uc_nation := nation ;
6228: LD_ADDR_OWVAR 21
6232: PUSH
6233: LD_VAR 0 2
6237: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6238: LD_VAR 0 3
6242: PUSH
6243: LD_VAR 0 2
6247: ARRAY
6248: PUSH
6249: LD_VAR 0 5
6253: ARRAY
6254: PUSH
6255: LD_INT 1
6257: ARRAY
6258: PPUSH
6259: LD_VAR 0 3
6263: PUSH
6264: LD_VAR 0 2
6268: ARRAY
6269: PUSH
6270: LD_VAR 0 5
6274: ARRAY
6275: PUSH
6276: LD_INT 2
6278: ARRAY
6279: PPUSH
6280: LD_VAR 0 3
6284: PUSH
6285: LD_VAR 0 2
6289: ARRAY
6290: PUSH
6291: LD_VAR 0 5
6295: ARRAY
6296: PUSH
6297: LD_INT 3
6299: ARRAY
6300: PPUSH
6301: LD_VAR 0 3
6305: PUSH
6306: LD_VAR 0 2
6310: ARRAY
6311: PUSH
6312: LD_VAR 0 5
6316: ARRAY
6317: PUSH
6318: LD_INT 4
6320: ARRAY
6321: PPUSH
6322: LD_INT 80
6324: PPUSH
6325: CALL 16512 0 5
// result := Join ( result , CreateVehicle ) ;
6329: LD_ADDR_VAR 0 4
6333: PUSH
6334: LD_VAR 0 4
6338: PPUSH
6339: CALL_OW 45
6343: PPUSH
6344: CALL 49692 0 2
6348: ST_TO_ADDR
// end ;
6349: GO 6160
6351: POP
6352: POP
// end ;
6353: LD_VAR 0 4
6357: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6358: LD_INT 0
6360: PPUSH
6361: PPUSH
// for i in mpBattleFlags do
6362: LD_ADDR_VAR 0 3
6366: PUSH
6367: LD_EXP 25
6371: PUSH
6372: FOR_IN
6373: IFFALSE 6450
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6375: LD_VAR 0 3
6379: PPUSH
6380: LD_INT 1
6382: PUSH
6383: LD_VAR 0 1
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 2
6394: PUSH
6395: LD_VAR 0 1
6399: PUSH
6400: LD_REAL  7.00000000000000E-0001
6403: MUL
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 3
6411: PUSH
6412: LD_VAR 0 1
6416: PUSH
6417: LD_REAL  4.00000000000000E-0001
6420: MUL
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: LD_INT 20
6428: PUSH
6429: LD_VAR 0 1
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: PPUSH
6444: CALL_OW 423
6448: GO 6372
6450: POP
6451: POP
// end ;
6452: LD_VAR 0 2
6456: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6457: LD_INT 100
6459: IFFALSE 6554
6461: GO 6463
6463: DISABLE
6464: LD_INT 0
6466: PPUSH
6467: PPUSH
// begin if mpBattleFlag <= 0 then
6468: LD_EXP 24
6472: PUSH
6473: LD_INT 0
6475: LESSEQUAL
6476: IFFALSE 6480
// exit ;
6478: GO 6554
// strength := 100 ;
6480: LD_ADDR_VAR 0 2
6484: PUSH
6485: LD_INT 100
6487: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6488: LD_EXP 24
6492: PPUSH
6493: CALL_OW 67
// strength := Dec ( strength ) ;
6497: LD_ADDR_VAR 0 2
6501: PUSH
6502: LD_VAR 0 2
6506: PPUSH
6507: CALL 51087 0 1
6511: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6512: LD_VAR 0 2
6516: PPUSH
6517: CALL 6358 0 1
// until not strength ;
6521: LD_VAR 0 2
6525: NOT
6526: IFFALSE 6488
// for i in mpBattleFlags do
6528: LD_ADDR_VAR 0 1
6532: PUSH
6533: LD_EXP 25
6537: PUSH
6538: FOR_IN
6539: IFFALSE 6552
// KillBattleFlag ( i ) ;
6541: LD_VAR 0 1
6545: PPUSH
6546: CALL_OW 419
6550: GO 6538
6552: POP
6553: POP
// end ;
6554: PPOPN 2
6556: END
// every 0 0$1 marked mpActive do var side , tmp ;
6557: GO 6559
6559: DISABLE
6560: LD_INT 0
6562: PPUSH
6563: PPUSH
// begin if mpSibBomb <= 1 then
6564: LD_EXP 30
6568: PUSH
6569: LD_INT 1
6571: LESSEQUAL
6572: IFFALSE 6576
// exit ;
6574: GO 6649
// tmp := mpSibBomb ;
6576: LD_ADDR_VAR 0 2
6580: PUSH
6581: LD_EXP 30
6585: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6586: LD_INT 35
6588: PPUSH
6589: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6593: LD_ADDR_VAR 0 2
6597: PUSH
6598: LD_VAR 0 2
6602: PUSH
6603: LD_INT 35
6605: MINUS
6606: ST_TO_ADDR
// until not tmp ;
6607: LD_VAR 0 2
6611: NOT
6612: IFFALSE 6586
// for side := 1 to 8 do
6614: LD_ADDR_VAR 0 1
6618: PUSH
6619: DOUBLE
6620: LD_INT 1
6622: DEC
6623: ST_TO_ADDR
6624: LD_INT 8
6626: PUSH
6627: FOR_TO
6628: IFFALSE 6647
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6630: LD_INT 25
6632: PPUSH
6633: LD_VAR 0 1
6637: PPUSH
6638: LD_INT 1
6640: PPUSH
6641: CALL_OW 322
6645: GO 6627
6647: POP
6648: POP
// end ;
6649: PPOPN 2
6651: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6652: LD_INT 0
6654: PPUSH
6655: PPUSH
6656: PPUSH
// mpBuildUpTimeDelay := 0 ;
6657: LD_ADDR_EXP 50
6661: PUSH
6662: LD_INT 0
6664: ST_TO_ADDR
// if not mpBuildUpTime then
6665: LD_EXP 22
6669: NOT
6670: IFFALSE 6674
// exit ;
6672: GO 6863
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6674: LD_ADDR_EXP 50
6678: PUSH
6679: LD_INT 8400
6681: PUSH
6682: LD_INT 2100
6684: PUSH
6685: LD_EXP 22
6689: MUL
6690: PLUS
6691: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6692: LD_ADDR_EXP 51
6696: PUSH
6697: LD_INT 1
6699: ST_TO_ADDR
// for i := 1 to 8 do
6700: LD_ADDR_VAR 0 2
6704: PUSH
6705: DOUBLE
6706: LD_INT 1
6708: DEC
6709: ST_TO_ADDR
6710: LD_INT 8
6712: PUSH
6713: FOR_TO
6714: IFFALSE 6861
// if mpSidePositions [ i ] then
6716: LD_EXP 9
6720: PUSH
6721: LD_VAR 0 2
6725: ARRAY
6726: IFFALSE 6859
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6728: LD_EXP 21
6732: PUSH
6733: LD_EXP 9
6737: PUSH
6738: LD_VAR 0 2
6742: ARRAY
6743: ARRAY
6744: PPUSH
6745: LD_INT 5
6747: PPUSH
6748: CALL_OW 424
// for j := 1 to 8 do
6752: LD_ADDR_VAR 0 3
6756: PUSH
6757: DOUBLE
6758: LD_INT 1
6760: DEC
6761: ST_TO_ADDR
6762: LD_INT 8
6764: PUSH
6765: FOR_TO
6766: IFFALSE 6857
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6768: LD_EXP 9
6772: PUSH
6773: LD_VAR 0 3
6777: ARRAY
6778: IFFALSE 6827
6780: PUSH
6781: LD_EXP 10
6785: PUSH
6786: LD_VAR 0 2
6790: ARRAY
6791: PUSH
6792: LD_EXP 10
6796: PUSH
6797: LD_VAR 0 3
6801: ARRAY
6802: NONEQUAL
6803: IFTRUE 6826
6805: PUSH
6806: LD_EXP 13
6810: NOT
6811: IFFALSE 6825
6813: PUSH
6814: LD_VAR 0 2
6818: PUSH
6819: LD_VAR 0 3
6823: NONEQUAL
6824: AND
6825: OR
6826: AND
6827: IFFALSE 6855
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6829: LD_VAR 0 3
6833: PPUSH
6834: LD_EXP 21
6838: PUSH
6839: LD_EXP 9
6843: PUSH
6844: LD_VAR 0 2
6848: ARRAY
6849: ARRAY
6850: PPUSH
6851: CALL_OW 333
6855: GO 6765
6857: POP
6858: POP
// end ;
6859: GO 6713
6861: POP
6862: POP
// end ;
6863: LD_VAR 0 1
6867: RET
// function EndBuildUp ; var i , j ; begin
6868: LD_INT 0
6870: PPUSH
6871: PPUSH
6872: PPUSH
// mpBuildUpTimeActive := false ;
6873: LD_ADDR_EXP 51
6877: PUSH
6878: LD_INT 0
6880: ST_TO_ADDR
// for i := 1 to 8 do
6881: LD_ADDR_VAR 0 2
6885: PUSH
6886: DOUBLE
6887: LD_INT 1
6889: DEC
6890: ST_TO_ADDR
6891: LD_INT 8
6893: PUSH
6894: FOR_TO
6895: IFFALSE 7042
// if mpSidePositions [ i ] then
6897: LD_EXP 9
6901: PUSH
6902: LD_VAR 0 2
6906: ARRAY
6907: IFFALSE 7040
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6909: LD_EXP 21
6913: PUSH
6914: LD_EXP 9
6918: PUSH
6919: LD_VAR 0 2
6923: ARRAY
6924: ARRAY
6925: PPUSH
6926: LD_INT 0
6928: PPUSH
6929: CALL_OW 424
// for j := 1 to 8 do
6933: LD_ADDR_VAR 0 3
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_INT 8
6945: PUSH
6946: FOR_TO
6947: IFFALSE 7038
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6949: LD_EXP 9
6953: PUSH
6954: LD_VAR 0 3
6958: ARRAY
6959: IFFALSE 7008
6961: PUSH
6962: LD_EXP 10
6966: PUSH
6967: LD_VAR 0 2
6971: ARRAY
6972: PUSH
6973: LD_EXP 10
6977: PUSH
6978: LD_VAR 0 3
6982: ARRAY
6983: NONEQUAL
6984: IFTRUE 7007
6986: PUSH
6987: LD_EXP 13
6991: NOT
6992: IFFALSE 7006
6994: PUSH
6995: LD_VAR 0 2
6999: PUSH
7000: LD_VAR 0 3
7004: NONEQUAL
7005: AND
7006: OR
7007: AND
7008: IFFALSE 7036
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
7010: LD_VAR 0 3
7014: PPUSH
7015: LD_EXP 21
7019: PUSH
7020: LD_EXP 9
7024: PUSH
7025: LD_VAR 0 2
7029: ARRAY
7030: ARRAY
7031: PPUSH
7032: CALL_OW 334
7036: GO 6946
7038: POP
7039: POP
// end ;
7040: GO 6894
7042: POP
7043: POP
// end ;
7044: LD_VAR 0 1
7048: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
7049: LD_EXP 51
7053: IFFALSE 7232
7055: GO 7057
7057: DISABLE
7058: LD_INT 0
7060: PPUSH
7061: PPUSH
// begin for i := 1 to 8 do
7062: LD_ADDR_VAR 0 1
7066: PUSH
7067: DOUBLE
7068: LD_INT 1
7070: DEC
7071: ST_TO_ADDR
7072: LD_INT 8
7074: PUSH
7075: FOR_TO
7076: IFFALSE 7229
// if mpSidePositions [ i ] then
7078: LD_EXP 9
7082: PUSH
7083: LD_VAR 0 1
7087: ARRAY
7088: IFFALSE 7227
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
7090: LD_ADDR_VAR 0 2
7094: PUSH
7095: LD_EXP 21
7099: PUSH
7100: LD_EXP 9
7104: PUSH
7105: LD_VAR 0 1
7109: ARRAY
7110: ARRAY
7111: PPUSH
7112: LD_INT 2
7114: PUSH
7115: LD_INT 21
7117: PUSH
7118: LD_INT 1
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 21
7127: PUSH
7128: LD_INT 2
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 22
7142: PUSH
7143: LD_OWVAR 2
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PPUSH
7156: CALL_OW 70
7160: PUSH
7161: FOR_IN
7162: IFFALSE 7225
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7164: LD_EXP 10
7168: PUSH
7169: LD_VAR 0 1
7173: ARRAY
7174: PUSH
7175: LD_EXP 10
7179: PUSH
7180: LD_OWVAR 2
7184: ARRAY
7185: NONEQUAL
7186: IFTRUE 7209
7188: PUSH
7189: LD_EXP 13
7193: NOT
7194: IFFALSE 7208
7196: PUSH
7197: LD_VAR 0 1
7201: PUSH
7202: LD_OWVAR 2
7206: NONEQUAL
7207: AND
7208: OR
7209: IFFALSE 7223
// ComMoveToArea ( un , BuildUpEscape ) ;
7211: LD_VAR 0 2
7215: PPUSH
7216: LD_INT 6
7218: PPUSH
7219: CALL_OW 113
7223: GO 7161
7225: POP
7226: POP
7227: GO 7075
7229: POP
7230: POP
// enable ;
7231: ENABLE
// end ;
7232: PPOPN 2
7234: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7235: LD_EXP 22
7239: IFFALSE 7289
7241: GO 7243
7243: DISABLE
7244: LD_INT 0
7246: PPUSH
// begin tmp := mpBuildUpTime ;
7247: LD_ADDR_VAR 0 1
7251: PUSH
7252: LD_EXP 22
7256: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7257: LD_INT 35
7259: PPUSH
7260: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7264: LD_ADDR_VAR 0 1
7268: PUSH
7269: LD_VAR 0 1
7273: PUSH
7274: LD_INT 35
7276: MINUS
7277: ST_TO_ADDR
// until not tmp ;
7278: LD_VAR 0 1
7282: NOT
7283: IFFALSE 7257
// EndBuildUp ;
7285: CALL 6868 0 0
// end ;
7289: PPOPN 1
7291: END
// every 0 0$1 trigger mpActive marked mpWin do
7292: LD_INT 100
7294: IFFALSE 7328
7296: GO 7298
7298: DISABLE
// begin if IAmServer then
7299: CALL_OW 518
7303: IFFALSE 7312
// wait ( 0 0$3 ) ;
7305: LD_INT 105
7307: PPUSH
7308: CALL_OW 67
// if Multiplayer then
7312: LD_OWVAR 4
7316: IFFALSE 7324
// YouWinInMultiplayer else
7318: CALL_OW 106
7322: GO 7328
// YouWin ;
7324: CALL_OW 103
// end ;
7328: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7329: LD_INT 0
7331: PPUSH
// result := false ;
7332: LD_ADDR_VAR 0 3
7336: PUSH
7337: LD_INT 0
7339: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7340: LD_VAR 0 1
7344: PUSH
7345: LD_INT 1
7347: DOUBLE
7348: EQUAL
7349: IFTRUE 7371
7351: LD_INT 5
7353: DOUBLE
7354: EQUAL
7355: IFTRUE 7371
7357: LD_INT 6
7359: DOUBLE
7360: EQUAL
7361: IFTRUE 7371
7363: LD_INT 7
7365: DOUBLE
7366: EQUAL
7367: IFTRUE 7371
7369: GO 7444
7371: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7372: LD_ADDR_VAR 0 3
7376: PUSH
7377: LD_INT 22
7379: PUSH
7380: LD_VAR 0 2
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PUSH
7389: LD_INT 2
7391: PUSH
7392: LD_INT 21
7394: PUSH
7395: LD_INT 1
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 33
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 33
7414: PUSH
7415: LD_INT 5
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: PPUSH
7437: CALL 13716 0 1
7441: ST_TO_ADDR
// end ; GameTypeSurvival :
7442: GO 7840
7444: LD_INT 2
7446: DOUBLE
7447: EQUAL
7448: IFTRUE 7452
7450: GO 7582
7452: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7453: LD_ADDR_VAR 0 3
7457: PUSH
7458: LD_INT 22
7460: PUSH
7461: LD_VAR 0 2
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PUSH
7470: LD_INT 2
7472: PUSH
7473: LD_INT 30
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 30
7485: PUSH
7486: LD_INT 1
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: LIST
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PPUSH
7502: CALL_OW 69
7506: PPUSH
7507: CALL 13716 0 1
7511: IFFALSE 7579
7513: PUSH
7514: LD_INT 22
7516: PUSH
7517: LD_VAR 0 2
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: LD_INT 2
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 1
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 33
7541: PUSH
7542: LD_INT 3
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: LD_INT 33
7551: PUSH
7552: LD_INT 5
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PPUSH
7569: CALL_OW 69
7573: PPUSH
7574: CALL 13716 0 1
7578: AND
7579: ST_TO_ADDR
// end ; GameTypeSurvivalH :
7580: GO 7840
7582: LD_INT 8
7584: DOUBLE
7585: EQUAL
7586: IFTRUE 7590
7588: GO 7739
7590: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7591: LD_ADDR_VAR 0 3
7595: PUSH
7596: LD_EXP 43
7600: PUSH
7601: LD_VAR 0 2
7605: ARRAY
7606: PPUSH
7607: CALL_OW 300
7611: IFFALSE 7668
7613: PUSH
7614: LD_INT 22
7616: PUSH
7617: LD_VAR 0 2
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 2
7628: PUSH
7629: LD_INT 30
7631: PUSH
7632: LD_INT 0
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: PUSH
7639: LD_INT 30
7641: PUSH
7642: LD_INT 1
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 69
7662: PPUSH
7663: CALL 13716 0 1
7667: AND
7668: IFFALSE 7736
7670: PUSH
7671: LD_INT 22
7673: PUSH
7674: LD_VAR 0 2
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 2
7685: PUSH
7686: LD_INT 21
7688: PUSH
7689: LD_INT 1
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: PUSH
7696: LD_INT 33
7698: PUSH
7699: LD_INT 3
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PUSH
7706: LD_INT 33
7708: PUSH
7709: LD_INT 5
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PPUSH
7726: CALL_OW 69
7730: PPUSH
7731: CALL 13716 0 1
7735: AND
7736: ST_TO_ADDR
// end ; GameTypeKing :
7737: GO 7840
7739: LD_INT 3
7741: DOUBLE
7742: EQUAL
7743: IFTRUE 7747
7745: GO 7839
7747: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7748: LD_ADDR_VAR 0 3
7752: PUSH
7753: LD_INT 22
7755: PUSH
7756: LD_VAR 0 2
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 2
7767: PUSH
7768: LD_INT 21
7770: PUSH
7771: LD_INT 1
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: LD_INT 33
7780: PUSH
7781: LD_INT 3
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: LD_INT 33
7790: PUSH
7791: LD_INT 5
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PPUSH
7808: CALL_OW 69
7812: PPUSH
7813: CALL 13716 0 1
7817: IFFALSE 7836
7819: PUSH
7820: LD_VAR 0 2
7824: PPUSH
7825: CALL 62704 0 1
7829: PUSH
7830: LD_EXP 37
7834: LESS
7835: AND
7836: ST_TO_ADDR
// end ; end ;
7837: GO 7840
7839: POP
// end ;
7840: LD_VAR 0 3
7844: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7845: LD_INT 100
7847: IFFALSE 8077
7849: GO 7851
7851: DISABLE
7852: LD_INT 0
7854: PPUSH
7855: PPUSH
// begin if Multiplayer then
7856: LD_OWVAR 4
7860: IFFALSE 7868
// SetPlayerSpectator ( ) else
7862: CALL_OW 572
7866: GO 7877
// FogOff ( your_side ) ;
7868: LD_OWVAR 2
7872: PPUSH
7873: CALL_OW 344
// repeat gameIsOn := false ;
7877: LD_ADDR_VAR 0 1
7881: PUSH
7882: LD_INT 0
7884: ST_TO_ADDR
// for i := 1 to 8 do
7885: LD_ADDR_VAR 0 2
7889: PUSH
7890: DOUBLE
7891: LD_INT 1
7893: DEC
7894: ST_TO_ADDR
7895: LD_INT 8
7897: PUSH
7898: FOR_TO
7899: IFFALSE 8029
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7901: LD_EXP 9
7905: PUSH
7906: LD_VAR 0 2
7910: ARRAY
7911: IFFALSE 7924
7913: PUSH
7914: LD_VAR 0 2
7918: PPUSH
7919: CALL_OW 108
7923: AND
7924: IFFALSE 7938
7926: PUSH
7927: LD_VAR 0 2
7931: PUSH
7932: LD_OWVAR 2
7936: NONEQUAL
7937: AND
7938: IFFALSE 8027
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7940: LD_EXP 10
7944: PUSH
7945: LD_VAR 0 2
7949: ARRAY
7950: NOT
7951: IFTRUE 7999
7953: PUSH
7954: LD_EXP 10
7958: PUSH
7959: LD_VAR 0 2
7963: ARRAY
7964: PUSH
7965: LD_EXP 10
7969: PUSH
7970: LD_OWVAR 2
7974: ARRAY
7975: NONEQUAL
7976: IFFALSE 7998
7978: PUSH
7979: LD_OWVAR 2
7983: PPUSH
7984: LD_VAR 0 2
7988: PPUSH
7989: CALL_OW 81
7993: PUSH
7994: LD_INT 1
7996: NONEQUAL
7997: AND
7998: OR
7999: IFFALSE 8027
// if HasPowerByGameType ( mpGameType , i ) then
8001: LD_EXP 5
8005: PPUSH
8006: LD_VAR 0 2
8010: PPUSH
8011: CALL 7329 0 2
8015: IFFALSE 8027
// begin gameIsOn := true ;
8017: LD_ADDR_VAR 0 1
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// break ;
8025: GO 8029
// end ;
8027: GO 7898
8029: POP
8030: POP
// wait ( 100 ) ;
8031: LD_INT 100
8033: PPUSH
8034: CALL_OW 67
// until not gameIsOn ;
8038: LD_VAR 0 1
8042: NOT
8043: IFFALSE 7877
// if IAmServer then
8045: CALL_OW 518
8049: IFFALSE 8058
// wait ( 0 0$3 ) ;
8051: LD_INT 105
8053: PPUSH
8054: CALL_OW 67
// if Multiplayer then
8058: LD_OWVAR 4
8062: IFFALSE 8070
// YouLostInMultiplayer else
8064: CALL_OW 107
8068: GO 8077
// YouLost (  ) ;
8070: LD_STRING 
8072: PPUSH
8073: CALL_OW 104
// end ;
8077: PPOPN 2
8079: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
8080: LD_EXP 35
8084: IFFALSE 8468
8086: GO 8088
8088: DISABLE
8089: LD_INT 0
8091: PPUSH
8092: PPUSH
8093: PPUSH
8094: PPUSH
8095: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
8096: LD_ADDR_VAR 0 5
8100: PUSH
8101: LD_INT 1
8103: PUSH
8104: LD_INT 2
8106: PUSH
8107: LD_INT 3
8109: PUSH
8110: LD_INT 4
8112: PUSH
8113: LD_INT 5
8115: PUSH
8116: LD_INT 6
8118: PUSH
8119: LD_INT 7
8121: PUSH
8122: LD_INT 8
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
8135: LD_INT 350
8137: PPUSH
8138: CALL_OW 67
// for i := 1 to 8 do
8142: LD_ADDR_VAR 0 1
8146: PUSH
8147: DOUBLE
8148: LD_INT 1
8150: DEC
8151: ST_TO_ADDR
8152: LD_INT 8
8154: PUSH
8155: FOR_TO
8156: IFFALSE 8438
// begin j := sides [ i ] ;
8158: LD_ADDR_VAR 0 2
8162: PUSH
8163: LD_VAR 0 5
8167: PUSH
8168: LD_VAR 0 1
8172: ARRAY
8173: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
8174: LD_EXP 42
8178: PUSH
8179: LD_VAR 0 2
8183: ARRAY
8184: PPUSH
8185: CALL 13716 0 1
8189: IFFALSE 8202
8191: PUSH
8192: LD_VAR 0 2
8196: PPUSH
8197: CALL_OW 108
8201: AND
8202: IFFALSE 8220
8204: PUSH
8205: LD_EXP 5
8209: PPUSH
8210: LD_VAR 0 2
8214: PPUSH
8215: CALL 7329 0 2
8219: AND
8220: IFFALSE 8436
// begin wait ( mpRespawn div 2 ) ;
8222: LD_EXP 35
8226: PUSH
8227: LD_INT 2
8229: DIV
8230: PPUSH
8231: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8235: LD_ADDR_VAR 0 3
8239: PUSH
8240: LD_INT 22
8242: PUSH
8243: LD_VAR 0 2
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: LD_INT 50
8254: PUSH
8255: EMPTY
8256: LIST
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: LD_INT 30
8263: PUSH
8264: LD_INT 0
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 30
8273: PUSH
8274: LD_INT 1
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: LIST
8290: PPUSH
8291: CALL_OW 69
8295: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8296: LD_VAR 0 3
8300: NOT
8301: IFTRUE 8315
8303: PUSH
8304: LD_VAR 0 2
8308: PPUSH
8309: CALL_OW 108
8313: NOT
8314: OR
8315: IFTRUE 8334
8317: PUSH
8318: LD_EXP 5
8322: PPUSH
8323: LD_VAR 0 2
8327: PPUSH
8328: CALL 7329 0 2
8332: NOT
8333: OR
8334: IFFALSE 8338
// continue ;
8336: GO 8155
// spawn := tmp [ 1 ] ;
8338: LD_ADDR_VAR 0 4
8342: PUSH
8343: LD_VAR 0 3
8347: PUSH
8348: LD_INT 1
8350: ARRAY
8351: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8352: LD_EXP 42
8356: PUSH
8357: LD_VAR 0 2
8361: ARRAY
8362: PUSH
8363: LD_INT 1
8365: ARRAY
8366: PPUSH
8367: LD_VAR 0 4
8371: PPUSH
8372: CALL_OW 250
8376: PPUSH
8377: LD_VAR 0 4
8381: PPUSH
8382: CALL_OW 251
8386: PPUSH
8387: LD_INT 32
8389: PPUSH
8390: LD_INT 1
8392: PPUSH
8393: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8397: LD_ADDR_EXP 42
8401: PUSH
8402: LD_EXP 42
8406: PPUSH
8407: LD_VAR 0 2
8411: PPUSH
8412: LD_EXP 42
8416: PUSH
8417: LD_VAR 0 2
8421: ARRAY
8422: PPUSH
8423: LD_INT 1
8425: PPUSH
8426: CALL_OW 3
8430: PPUSH
8431: CALL_OW 1
8435: ST_TO_ADDR
// end ; end ;
8436: GO 8155
8438: POP
8439: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8440: LD_ADDR_VAR 0 5
8444: PUSH
8445: LD_VAR 0 5
8449: PPUSH
8450: LD_INT 1
8452: PPUSH
8453: LD_INT 8
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL 16042 0 4
8463: ST_TO_ADDR
// until false ;
8464: LD_INT 0
8466: IFFALSE 8135
// end ;
8468: PPOPN 5
8470: END
// every 0 0$1 marked mpActive do
8471: GO 8473
8473: DISABLE
// begin enable ;
8474: ENABLE
// if not mpDisplayStrings then
8475: LD_EXP 40
8479: NOT
8480: IFFALSE 8491
// begin display_strings := [ ] ;
8482: LD_ADDR_OWVAR 47
8486: PUSH
8487: EMPTY
8488: ST_TO_ADDR
// exit ;
8489: GO 8501
// end ; display_strings := mpDisplayStrings ;
8491: LD_ADDR_OWVAR 47
8495: PUSH
8496: LD_EXP 40
8500: ST_TO_ADDR
// end ; end_of_file
8501: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8502: LD_INT 0
8504: PPUSH
8505: PPUSH
8506: PPUSH
8507: PPUSH
8508: PPUSH
8509: PPUSH
8510: PPUSH
8511: PPUSH
8512: PPUSH
// if GetType ( un ) = unit_vehicle then
8513: LD_VAR 0 1
8517: PPUSH
8518: CALL_OW 247
8522: PUSH
8523: LD_INT 2
8525: EQUAL
8526: IFFALSE 8530
// exit ;
8528: GO 9303
// side := GetSide ( un ) ;
8530: LD_ADDR_VAR 0 9
8534: PUSH
8535: LD_VAR 0 1
8539: PPUSH
8540: CALL_OW 255
8544: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
8545: LD_EXP 5
8549: PUSH
8550: LD_INT 2
8552: PUSH
8553: LD_INT 8
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: IN
8560: IFFALSE 8654
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8562: LD_VAR 0 1
8566: PPUSH
8567: CALL_OW 266
8571: PUSH
8572: LD_INT 0
8574: PUSH
8575: LD_INT 1
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: IN
8582: IFFALSE 8654
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8584: LD_ADDR_VAR 0 3
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_VAR 0 9
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 2
8603: PUSH
8604: LD_INT 21
8606: PUSH
8607: LD_INT 1
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 33
8616: PUSH
8617: LD_INT 3
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PPUSH
8633: CALL_OW 69
8637: PUSH
8638: FOR_IN
8639: IFFALSE 8652
// KillUnit ( i ) ;
8641: LD_VAR 0 3
8645: PPUSH
8646: CALL_OW 66
8650: GO 8638
8652: POP
8653: POP
// end ; if mpGameType = GameTypeSurvivalH then
8654: LD_EXP 5
8658: PUSH
8659: LD_INT 8
8661: EQUAL
8662: IFFALSE 8746
// if un in mpCommanders then
8664: LD_VAR 0 1
8668: PUSH
8669: LD_EXP 43
8673: IN
8674: IFFALSE 8746
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8676: LD_ADDR_VAR 0 3
8680: PUSH
8681: LD_INT 22
8683: PUSH
8684: LD_VAR 0 9
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: LD_INT 2
8695: PUSH
8696: LD_INT 21
8698: PUSH
8699: LD_INT 1
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: LD_INT 33
8708: PUSH
8709: LD_INT 3
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: PPUSH
8725: CALL_OW 69
8729: PUSH
8730: FOR_IN
8731: IFFALSE 8744
// KillUnit ( i ) ;
8733: LD_VAR 0 3
8737: PPUSH
8738: CALL_OW 66
8742: GO 8730
8744: POP
8745: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 257
8755: PUSH
8756: LD_INT 12
8758: PUSH
8759: LD_INT 17
8761: PUSH
8762: LD_INT 15
8764: PUSH
8765: LD_INT 16
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: IN
8774: IFTRUE 8791
8776: PUSH
8777: LD_VAR 0 1
8781: PPUSH
8782: CALL_OW 263
8786: PUSH
8787: LD_INT 5
8789: EQUAL
8790: OR
8791: IFFALSE 9028
// begin tag := 0 ;
8793: LD_ADDR_VAR 0 5
8797: PUSH
8798: LD_INT 0
8800: ST_TO_ADDR
// for i := 1 to 8 do
8801: LD_ADDR_VAR 0 3
8805: PUSH
8806: DOUBLE
8807: LD_INT 1
8809: DEC
8810: ST_TO_ADDR
8811: LD_INT 8
8813: PUSH
8814: FOR_TO
8815: IFFALSE 8849
// if un in mpApePosIndex [ i ] then
8817: LD_VAR 0 1
8821: PUSH
8822: LD_EXP 34
8826: PUSH
8827: LD_VAR 0 3
8831: ARRAY
8832: IN
8833: IFFALSE 8847
// begin tag := i ;
8835: LD_ADDR_VAR 0 5
8839: PUSH
8840: LD_VAR 0 3
8844: ST_TO_ADDR
// break ;
8845: GO 8849
// end ;
8847: GO 8814
8849: POP
8850: POP
// if not tag then
8851: LD_VAR 0 5
8855: NOT
8856: IFFALSE 8860
// exit ;
8858: GO 9303
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8860: LD_ADDR_VAR 0 7
8864: PUSH
8865: LD_EXP 33
8869: PUSH
8870: LD_EXP 9
8874: PUSH
8875: LD_VAR 0 5
8879: ARRAY
8880: ARRAY
8881: ST_TO_ADDR
// if not area then
8882: LD_VAR 0 7
8886: NOT
8887: IFFALSE 8891
// exit ;
8889: GO 9303
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8891: LD_INT 14700
8893: PUSH
8894: LD_VAR 0 1
8898: PUSH
8899: LD_INT 5
8901: MOD
8902: PUSH
8903: LD_INT 1
8905: PLUS
8906: PUSH
8907: LD_INT 700
8909: MUL
8910: PLUS
8911: PPUSH
8912: CALL_OW 67
// repeat wait ( 10 ) ;
8916: LD_INT 10
8918: PPUSH
8919: CALL_OW 67
// until not mpBlockRespThread ;
8923: LD_EXP 49
8927: NOT
8928: IFFALSE 8916
// mpBlockRespThread := true ;
8930: LD_ADDR_EXP 49
8934: PUSH
8935: LD_INT 1
8937: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8938: LD_INT 0
8940: PPUSH
8941: CALL 45819 0 1
// ape := CreateHuman ;
8945: LD_ADDR_VAR 0 4
8949: PUSH
8950: CALL_OW 44
8954: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8955: LD_ADDR_EXP 34
8959: PUSH
8960: LD_EXP 34
8964: PPUSH
8965: LD_VAR 0 5
8969: PPUSH
8970: LD_EXP 34
8974: PUSH
8975: LD_VAR 0 5
8979: ARRAY
8980: PPUSH
8981: LD_VAR 0 4
8985: PPUSH
8986: CALL 49692 0 2
8990: PPUSH
8991: CALL_OW 1
8995: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8996: LD_VAR 0 4
9000: PPUSH
9001: LD_VAR 0 7
9005: PPUSH
9006: LD_INT 0
9008: PPUSH
9009: CALL_OW 49
// wait ( 10 ) ;
9013: LD_INT 10
9015: PPUSH
9016: CALL_OW 67
// mpBlockRespThread := false ;
9020: LD_ADDR_EXP 49
9024: PUSH
9025: LD_INT 0
9027: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
9028: LD_VAR 0 1
9032: PPUSH
9033: CALL_OW 247
9037: PUSH
9038: LD_INT 1
9040: EQUAL
9041: IFFALSE 9058
9043: PUSH
9044: LD_VAR 0 1
9048: PPUSH
9049: CALL_OW 248
9053: PUSH
9054: LD_INT 0
9056: GREATER
9057: AND
9058: IFFALSE 9303
// begin if not mpRespawn then
9060: LD_EXP 35
9064: NOT
9065: IFFALSE 9069
// exit ;
9067: GO 9303
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
9069: LD_VAR 0 9
9073: PPUSH
9074: CALL_OW 108
9078: NOT
9079: IFFALSE 9098
9081: PUSH
9082: LD_EXP 5
9086: PPUSH
9087: LD_VAR 0 9
9091: PPUSH
9092: CALL 7329 0 2
9096: NOT
9097: AND
9098: IFFALSE 9102
// exit ;
9100: GO 9303
// side := GetSide ( un ) ;
9102: LD_ADDR_VAR 0 9
9106: PUSH
9107: LD_VAR 0 1
9111: PPUSH
9112: CALL_OW 255
9116: ST_TO_ADDR
// nation := GetNation ( un ) ;
9117: LD_ADDR_VAR 0 8
9121: PUSH
9122: LD_VAR 0 1
9126: PPUSH
9127: CALL_OW 248
9131: ST_TO_ADDR
// class := GetClass ( un ) ;
9132: LD_ADDR_VAR 0 6
9136: PUSH
9137: LD_VAR 0 1
9141: PPUSH
9142: CALL_OW 257
9146: ST_TO_ADDR
// if class > 4 then
9147: LD_VAR 0 6
9151: PUSH
9152: LD_INT 4
9154: GREATER
9155: IFFALSE 9165
// class := 1 ;
9157: LD_ADDR_VAR 0 6
9161: PUSH
9162: LD_INT 1
9164: ST_TO_ADDR
// repeat wait ( 10 ) ;
9165: LD_INT 10
9167: PPUSH
9168: CALL_OW 67
// until not mpBlockRespThread ;
9172: LD_EXP 49
9176: NOT
9177: IFFALSE 9165
// mpBlockRespThread := true ;
9179: LD_ADDR_EXP 49
9183: PUSH
9184: LD_INT 1
9186: ST_TO_ADDR
// uc_side := side ;
9187: LD_ADDR_OWVAR 20
9191: PUSH
9192: LD_VAR 0 9
9196: ST_TO_ADDR
// uc_nation := nation ;
9197: LD_ADDR_OWVAR 21
9201: PUSH
9202: LD_VAR 0 8
9206: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
9207: LD_INT 0
9209: PPUSH
9210: LD_VAR 0 6
9214: PPUSH
9215: LD_INT 2
9217: PPUSH
9218: CALL_OW 380
// un := CreateHuman ;
9222: LD_ADDR_VAR 0 1
9226: PUSH
9227: CALL_OW 44
9231: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
9232: LD_ADDR_EXP 42
9236: PUSH
9237: LD_EXP 42
9241: PPUSH
9242: LD_VAR 0 9
9246: PPUSH
9247: LD_EXP 42
9251: PUSH
9252: LD_VAR 0 9
9256: ARRAY
9257: PPUSH
9258: LD_EXP 42
9262: PUSH
9263: LD_VAR 0 9
9267: ARRAY
9268: PUSH
9269: LD_INT 1
9271: PLUS
9272: PPUSH
9273: LD_VAR 0 1
9277: PPUSH
9278: CALL_OW 1
9282: PPUSH
9283: CALL_OW 1
9287: ST_TO_ADDR
// wait ( 10 ) ;
9288: LD_INT 10
9290: PPUSH
9291: CALL_OW 67
// mpBlockRespThread := false ;
9295: LD_ADDR_EXP 49
9299: PUSH
9300: LD_INT 0
9302: ST_TO_ADDR
// end ; end ;
9303: LD_VAR 0 2
9307: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
9308: LD_INT 0
9310: PPUSH
9311: PPUSH
9312: PPUSH
9313: PPUSH
9314: PPUSH
// tag := 0 ;
9315: LD_ADDR_VAR 0 5
9319: PUSH
9320: LD_INT 0
9322: ST_TO_ADDR
// for i := 1 to 8 do
9323: LD_ADDR_VAR 0 4
9327: PUSH
9328: DOUBLE
9329: LD_INT 1
9331: DEC
9332: ST_TO_ADDR
9333: LD_INT 8
9335: PUSH
9336: FOR_TO
9337: IFFALSE 9371
// if un in mpApePosIndex [ i ] then
9339: LD_VAR 0 2
9343: PUSH
9344: LD_EXP 34
9348: PUSH
9349: LD_VAR 0 4
9353: ARRAY
9354: IN
9355: IFFALSE 9369
// begin tag := i ;
9357: LD_ADDR_VAR 0 5
9361: PUSH
9362: LD_VAR 0 4
9366: ST_TO_ADDR
// break ;
9367: GO 9371
// end ;
9369: GO 9336
9371: POP
9372: POP
// if not tag then
9373: LD_VAR 0 5
9377: NOT
9378: IFFALSE 9382
// exit ;
9380: GO 9550
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9382: LD_ADDR_VAR 0 6
9386: PUSH
9387: LD_EXP 33
9391: PUSH
9392: LD_EXP 9
9396: PUSH
9397: LD_VAR 0 5
9401: ARRAY
9402: ARRAY
9403: ST_TO_ADDR
// if not area then
9404: LD_VAR 0 6
9408: NOT
9409: IFFALSE 9413
// exit ;
9411: GO 9550
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9413: LD_INT 14700
9415: PUSH
9416: LD_VAR 0 2
9420: PUSH
9421: LD_INT 5
9423: MOD
9424: PUSH
9425: LD_INT 1
9427: PLUS
9428: PUSH
9429: LD_INT 700
9431: MUL
9432: PLUS
9433: PPUSH
9434: CALL_OW 67
// repeat wait ( 10 ) ;
9438: LD_INT 10
9440: PPUSH
9441: CALL_OW 67
// until not mpBlockRespThread ;
9445: LD_EXP 49
9449: NOT
9450: IFFALSE 9438
// mpBlockRespThread := true ;
9452: LD_ADDR_EXP 49
9456: PUSH
9457: LD_INT 1
9459: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9460: LD_INT 0
9462: PPUSH
9463: CALL 45819 0 1
// ape := CreateHuman ;
9467: LD_ADDR_VAR 0 7
9471: PUSH
9472: CALL_OW 44
9476: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9477: LD_ADDR_EXP 34
9481: PUSH
9482: LD_EXP 34
9486: PPUSH
9487: LD_VAR 0 5
9491: PPUSH
9492: LD_EXP 34
9496: PUSH
9497: LD_VAR 0 5
9501: ARRAY
9502: PPUSH
9503: LD_VAR 0 7
9507: PPUSH
9508: CALL 49692 0 2
9512: PPUSH
9513: CALL_OW 1
9517: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9518: LD_VAR 0 7
9522: PPUSH
9523: LD_VAR 0 6
9527: PPUSH
9528: LD_INT 0
9530: PPUSH
9531: CALL_OW 49
// wait ( 10 ) ;
9535: LD_INT 10
9537: PPUSH
9538: CALL_OW 67
// mpBlockRespThread := false ;
9542: LD_ADDR_EXP 49
9546: PUSH
9547: LD_INT 0
9549: ST_TO_ADDR
// end ;
9550: LD_VAR 0 3
9554: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9555: LD_INT 0
9557: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9558: LD_VAR 0 1
9562: PPUSH
9563: CALL_OW 266
9567: PUSH
9568: LD_INT 0
9570: PUSH
9571: LD_INT 1
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: IN
9578: IFFALSE 9603
// SetBName ( building , @ & GetSide ( building ) ) ;
9580: LD_VAR 0 1
9584: PPUSH
9585: LD_STRING @
9587: PUSH
9588: LD_VAR 0 1
9592: PPUSH
9593: CALL_OW 255
9597: STR
9598: PPUSH
9599: CALL_OW 500
// end ;
9603: LD_VAR 0 2
9607: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9608: LD_INT 0
9610: PPUSH
9611: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
9612: LD_EXP 5
9616: PUSH
9617: LD_INT 2
9619: PUSH
9620: LD_INT 8
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: IN
9627: IFFALSE 9651
9629: PUSH
9630: LD_VAR 0 1
9634: PPUSH
9635: CALL_OW 266
9639: PUSH
9640: LD_INT 0
9642: PUSH
9643: LD_INT 1
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: IN
9650: AND
9651: IFFALSE 9730
// begin SetSide ( building , oldSide ) ;
9653: LD_VAR 0 1
9657: PPUSH
9658: LD_VAR 0 2
9662: PPUSH
9663: CALL_OW 235
// KillUnit ( building ) ;
9667: LD_VAR 0 1
9671: PPUSH
9672: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9676: LD_ADDR_VAR 0 5
9680: PUSH
9681: LD_INT 22
9683: PUSH
9684: LD_VAR 0 2
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 21
9695: PUSH
9696: LD_INT 1
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PPUSH
9707: CALL_OW 69
9711: PUSH
9712: FOR_IN
9713: IFFALSE 9726
// KillUnit ( i ) ;
9715: LD_VAR 0 5
9719: PPUSH
9720: CALL_OW 66
9724: GO 9712
9726: POP
9727: POP
// exit ;
9728: GO 9775
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9730: LD_VAR 0 1
9734: PPUSH
9735: CALL_OW 266
9739: PUSH
9740: LD_INT 0
9742: PUSH
9743: LD_INT 1
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: IN
9750: IFFALSE 9775
// SetBName ( building , @ & GetSide ( building ) ) ;
9752: LD_VAR 0 1
9756: PPUSH
9757: LD_STRING @
9759: PUSH
9760: LD_VAR 0 1
9764: PPUSH
9765: CALL_OW 255
9769: STR
9770: PPUSH
9771: CALL_OW 500
// end ;
9775: LD_VAR 0 4
9779: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9780: LD_INT 0
9782: PPUSH
9783: PPUSH
9784: PPUSH
// if mpGameType <> GameTypeFamine then
9785: LD_EXP 5
9789: PUSH
9790: LD_INT 5
9792: NONEQUAL
9793: IFFALSE 9797
// exit ;
9795: GO 10031
// for i := 1 to mpGlobalOilDeposits do
9797: LD_ADDR_VAR 0 6
9801: PUSH
9802: DOUBLE
9803: LD_INT 1
9805: DEC
9806: ST_TO_ADDR
9807: LD_EXP 44
9811: PUSH
9812: FOR_TO
9813: IFFALSE 10029
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9815: LD_EXP 44
9819: PUSH
9820: LD_VAR 0 6
9824: ARRAY
9825: PUSH
9826: LD_INT 1
9828: ARRAY
9829: PPUSH
9830: LD_EXP 44
9834: PUSH
9835: LD_VAR 0 6
9839: ARRAY
9840: PUSH
9841: LD_INT 2
9843: ARRAY
9844: PPUSH
9845: CALL_OW 428
9849: PUSH
9850: LD_VAR 0 1
9854: EQUAL
9855: IFFALSE 10027
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9857: LD_ADDR_VAR 0 7
9861: PUSH
9862: LD_EXP 44
9866: PUSH
9867: LD_VAR 0 6
9871: ARRAY
9872: PUSH
9873: LD_INT 3
9875: ARRAY
9876: ST_TO_ADDR
// value := value - amount ;
9877: LD_ADDR_VAR 0 7
9881: PUSH
9882: LD_VAR 0 7
9886: PUSH
9887: LD_VAR 0 4
9891: MINUS
9892: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9893: LD_ADDR_EXP 44
9897: PUSH
9898: LD_EXP 44
9902: PPUSH
9903: LD_VAR 0 6
9907: PPUSH
9908: LD_EXP 44
9912: PUSH
9913: LD_VAR 0 6
9917: ARRAY
9918: PPUSH
9919: LD_INT 3
9921: PPUSH
9922: LD_VAR 0 7
9926: PPUSH
9927: CALL_OW 1
9931: PPUSH
9932: CALL_OW 1
9936: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9937: LD_VAR 0 2
9941: PUSH
9942: LD_OWVAR 2
9946: PUSH
9947: LD_INT 9
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: IN
9954: IFFALSE 9970
// SetUnitDisplayNumber ( building , value ) ;
9956: LD_VAR 0 1
9960: PPUSH
9961: LD_VAR 0 7
9965: PPUSH
9966: CALL_OW 505
// if value <= 0 then
9970: LD_VAR 0 7
9974: PUSH
9975: LD_INT 0
9977: LESSEQUAL
9978: IFFALSE 10027
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9980: LD_EXP 44
9984: PUSH
9985: LD_VAR 0 6
9989: ARRAY
9990: PUSH
9991: LD_INT 1
9993: ARRAY
9994: PPUSH
9995: LD_EXP 44
9999: PUSH
10000: LD_VAR 0 6
10004: ARRAY
10005: PUSH
10006: LD_INT 2
10008: ARRAY
10009: PPUSH
10010: CALL_OW 63
// KillUnit ( building ) ;
10014: LD_VAR 0 1
10018: PPUSH
10019: CALL_OW 66
// exit ;
10023: POP
10024: POP
10025: GO 10031
// end ; end ; end ;
10027: GO 9812
10029: POP
10030: POP
// end ;
10031: LD_VAR 0 5
10035: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
10036: LD_INT 0
10038: PPUSH
10039: PPUSH
10040: PPUSH
// if mpGameType <> GameTypeFamine then
10041: LD_EXP 5
10045: PUSH
10046: LD_INT 5
10048: NONEQUAL
10049: IFFALSE 10053
// exit ;
10051: GO 10287
// for i := 1 to mpGlobalSibDeposits do
10053: LD_ADDR_VAR 0 6
10057: PUSH
10058: DOUBLE
10059: LD_INT 1
10061: DEC
10062: ST_TO_ADDR
10063: LD_EXP 45
10067: PUSH
10068: FOR_TO
10069: IFFALSE 10285
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
10071: LD_EXP 45
10075: PUSH
10076: LD_VAR 0 6
10080: ARRAY
10081: PUSH
10082: LD_INT 1
10084: ARRAY
10085: PPUSH
10086: LD_EXP 45
10090: PUSH
10091: LD_VAR 0 6
10095: ARRAY
10096: PUSH
10097: LD_INT 2
10099: ARRAY
10100: PPUSH
10101: CALL_OW 428
10105: PUSH
10106: LD_VAR 0 1
10110: EQUAL
10111: IFFALSE 10283
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
10113: LD_ADDR_VAR 0 7
10117: PUSH
10118: LD_EXP 45
10122: PUSH
10123: LD_VAR 0 6
10127: ARRAY
10128: PUSH
10129: LD_INT 3
10131: ARRAY
10132: ST_TO_ADDR
// value := value - amount ;
10133: LD_ADDR_VAR 0 7
10137: PUSH
10138: LD_VAR 0 7
10142: PUSH
10143: LD_VAR 0 4
10147: MINUS
10148: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
10149: LD_ADDR_EXP 45
10153: PUSH
10154: LD_EXP 45
10158: PPUSH
10159: LD_VAR 0 6
10163: PPUSH
10164: LD_EXP 45
10168: PUSH
10169: LD_VAR 0 6
10173: ARRAY
10174: PPUSH
10175: LD_INT 3
10177: PPUSH
10178: LD_VAR 0 7
10182: PPUSH
10183: CALL_OW 1
10187: PPUSH
10188: CALL_OW 1
10192: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10193: LD_VAR 0 2
10197: PUSH
10198: LD_OWVAR 2
10202: PUSH
10203: LD_INT 9
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: IN
10210: IFFALSE 10226
// SetUnitDisplayNumber ( building , value ) ;
10212: LD_VAR 0 1
10216: PPUSH
10217: LD_VAR 0 7
10221: PPUSH
10222: CALL_OW 505
// if value <= 0 then
10226: LD_VAR 0 7
10230: PUSH
10231: LD_INT 0
10233: LESSEQUAL
10234: IFFALSE 10283
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
10236: LD_EXP 45
10240: PUSH
10241: LD_VAR 0 6
10245: ARRAY
10246: PUSH
10247: LD_INT 1
10249: ARRAY
10250: PPUSH
10251: LD_EXP 45
10255: PUSH
10256: LD_VAR 0 6
10260: ARRAY
10261: PUSH
10262: LD_INT 2
10264: ARRAY
10265: PPUSH
10266: CALL_OW 63
// KillUnit ( building ) ;
10270: LD_VAR 0 1
10274: PPUSH
10275: CALL_OW 66
// exit ;
10279: POP
10280: POP
10281: GO 10287
// end ; end ; end ;
10283: GO 10068
10285: POP
10286: POP
// end ;
10287: LD_VAR 0 5
10291: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
10292: LD_INT 0
10294: PPUSH
10295: PPUSH
// side := GetSide ( factory ) ;
10296: LD_ADDR_VAR 0 7
10300: PUSH
10301: LD_VAR 0 1
10305: PPUSH
10306: CALL_OW 255
10310: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
10311: LD_VAR 0 5
10315: PUSH
10316: LD_INT 81
10318: EQUAL
10319: IFFALSE 10357
10321: PUSH
10322: LD_INT 22
10324: PUSH
10325: LD_VAR 0 7
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 34
10336: PUSH
10337: LD_INT 81
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PPUSH
10348: CALL_OW 69
10352: PUSH
10353: LD_INT 0
10355: GREATER
10356: AND
10357: IFFALSE 10390
// begin ComCancel ( factory ) ;
10359: LD_VAR 0 1
10363: PPUSH
10364: CALL_OW 127
// if side = your_side then
10368: LD_VAR 0 7
10372: PUSH
10373: LD_OWVAR 2
10377: EQUAL
10378: IFFALSE 10390
// HintSpec ( VehLimit , 2 ) ;
10380: LD_STRING VehLimit
10382: PPUSH
10383: LD_INT 2
10385: PPUSH
10386: CALL_OW 338
// end ; end ;
10390: LD_VAR 0 6
10394: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
10395: LD_INT 0
10397: PPUSH
10398: PPUSH
10399: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
10400: LD_VAR 0 1
10404: PPUSH
10405: CALL_OW 264
10409: PUSH
10410: LD_INT 81
10412: EQUAL
10413: IFFALSE 10430
10415: PUSH
10416: LD_VAR 0 1
10420: PPUSH
10421: CALL_OW 263
10425: PUSH
10426: LD_INT 1
10428: EQUAL
10429: AND
10430: IFFALSE 10710
// begin for i := 1 to Count ( minersList ) do
10432: LD_ADDR_VAR 0 6
10436: PUSH
10437: DOUBLE
10438: LD_INT 1
10440: DEC
10441: ST_TO_ADDR
10442: LD_EXP 59
10446: PPUSH
10447: CALL 13716 0 1
10451: PUSH
10452: FOR_TO
10453: IFFALSE 10571
// begin if minersList [ i ] = oldId then
10455: LD_EXP 59
10459: PUSH
10460: LD_VAR 0 6
10464: ARRAY
10465: PUSH
10466: LD_VAR 0 2
10470: EQUAL
10471: IFFALSE 10569
// begin for j := 1 to minerMinesList [ i ] do
10473: LD_ADDR_VAR 0 7
10477: PUSH
10478: DOUBLE
10479: LD_INT 1
10481: DEC
10482: ST_TO_ADDR
10483: LD_EXP 60
10487: PUSH
10488: LD_VAR 0 6
10492: ARRAY
10493: PUSH
10494: FOR_TO
10495: IFFALSE 10545
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
10497: LD_EXP 60
10501: PUSH
10502: LD_VAR 0 6
10506: ARRAY
10507: PUSH
10508: LD_VAR 0 7
10512: ARRAY
10513: PUSH
10514: LD_INT 1
10516: ARRAY
10517: PPUSH
10518: LD_EXP 60
10522: PUSH
10523: LD_VAR 0 6
10527: ARRAY
10528: PUSH
10529: LD_VAR 0 7
10533: ARRAY
10534: PUSH
10535: LD_INT 2
10537: ARRAY
10538: PPUSH
10539: CALL_OW 612
10543: GO 10494
10545: POP
10546: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
10547: LD_ADDR_EXP 60
10551: PUSH
10552: LD_EXP 60
10556: PPUSH
10557: LD_VAR 0 6
10561: PPUSH
10562: CALL_OW 3
10566: ST_TO_ADDR
// break ;
10567: GO 10571
// end ; end ;
10569: GO 10452
10571: POP
10572: POP
// minersList := minersList diff oldId ;
10573: LD_ADDR_EXP 59
10577: PUSH
10578: LD_EXP 59
10582: PUSH
10583: LD_VAR 0 2
10587: DIFF
10588: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10589: LD_INT 22
10591: PUSH
10592: LD_VAR 0 4
10596: PPUSH
10597: CALL_OW 255
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: PUSH
10606: LD_INT 34
10608: PUSH
10609: LD_INT 81
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PPUSH
10620: CALL_OW 69
10624: PUSH
10625: LD_INT 1
10627: GREATER
10628: IFFALSE 10655
// begin ComExit ( unit ) ;
10630: LD_VAR 0 4
10634: PPUSH
10635: CALL 50090 0 1
// SetSide ( newId , oldSide ) ;
10639: LD_VAR 0 1
10643: PPUSH
10644: LD_VAR 0 3
10648: PPUSH
10649: CALL_OW 235
// exit ;
10653: GO 10710
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10655: LD_ADDR_EXP 59
10659: PUSH
10660: LD_EXP 59
10664: PPUSH
10665: LD_EXP 59
10669: PUSH
10670: LD_INT 1
10672: PLUS
10673: PPUSH
10674: LD_VAR 0 1
10678: PPUSH
10679: CALL_OW 1
10683: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10684: LD_ADDR_EXP 60
10688: PUSH
10689: LD_EXP 60
10693: PPUSH
10694: LD_EXP 60
10698: PUSH
10699: LD_INT 1
10701: PLUS
10702: PPUSH
10703: EMPTY
10704: PPUSH
10705: CALL_OW 1
10709: ST_TO_ADDR
// end ; end ; end_of_file
10710: LD_VAR 0 5
10714: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10715: LD_EXP 41
10719: IFFALSE 10727
10721: PUSH
10722: CALL 10937 0 0
10726: AND
10727: IFFALSE 10735
10729: PUSH
10730: LD_OWVAR 4
10734: AND
10735: IFFALSE 10934
10737: GO 10739
10739: DISABLE
10740: LD_INT 0
10742: PPUSH
10743: PPUSH
// begin canWin := false ;
10744: LD_ADDR_VAR 0 2
10748: PUSH
10749: LD_INT 0
10751: ST_TO_ADDR
// if not HasPower ( your_side ) then
10752: LD_OWVAR 2
10756: PPUSH
10757: CALL 10979 0 1
10761: NOT
10762: IFFALSE 10773
// begin Multiplayer_Loose_Message ;
10764: CALL_OW 521
// enable ( mpLose ) ;
10768: LD_INT 102
10770: ENABLE_MARKED
// end else
10771: GO 10934
// begin canWin := true ;
10773: LD_ADDR_VAR 0 2
10777: PUSH
10778: LD_INT 1
10780: ST_TO_ADDR
// for i := 1 to 8 do
10781: LD_ADDR_VAR 0 1
10785: PUSH
10786: DOUBLE
10787: LD_INT 1
10789: DEC
10790: ST_TO_ADDR
10791: LD_INT 8
10793: PUSH
10794: FOR_TO
10795: IFFALSE 10920
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10797: LD_EXP 9
10801: PUSH
10802: LD_VAR 0 1
10806: ARRAY
10807: IFFALSE 10820
10809: PUSH
10810: LD_VAR 0 1
10814: PPUSH
10815: CALL_OW 108
10819: AND
10820: IFFALSE 10834
10822: PUSH
10823: LD_VAR 0 1
10827: PUSH
10828: LD_OWVAR 2
10832: NONEQUAL
10833: AND
10834: IFFALSE 10918
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10836: LD_EXP 10
10840: PUSH
10841: LD_VAR 0 1
10845: ARRAY
10846: NOT
10847: IFTRUE 10895
10849: PUSH
10850: LD_EXP 10
10854: PUSH
10855: LD_VAR 0 1
10859: ARRAY
10860: PUSH
10861: LD_EXP 10
10865: PUSH
10866: LD_OWVAR 2
10870: ARRAY
10871: NONEQUAL
10872: IFFALSE 10894
10874: PUSH
10875: LD_OWVAR 2
10879: PPUSH
10880: LD_VAR 0 1
10884: PPUSH
10885: CALL_OW 81
10889: PUSH
10890: LD_INT 1
10892: NONEQUAL
10893: AND
10894: OR
10895: IFFALSE 10918
// if HasPower ( i ) then
10897: LD_VAR 0 1
10901: PPUSH
10902: CALL 10979 0 1
10906: IFFALSE 10918
// begin canWin := false ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_INT 0
10915: ST_TO_ADDR
// break ;
10916: GO 10920
// end ;
10918: GO 10794
10920: POP
10921: POP
// if canWin then
10922: LD_VAR 0 2
10926: IFFALSE 10933
// enable ( mpWin ) else
10928: LD_INT 101
10930: ENABLE_MARKED
10931: GO 10934
// enable ;
10933: ENABLE
// end ; end ;
10934: PPOPN 2
10936: END
// function CanWinLoose ; begin
10937: LD_INT 0
10939: PPUSH
// result := true ;
10940: LD_ADDR_VAR 0 1
10944: PUSH
10945: LD_INT 1
10947: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10948: CALL_OW 531
10952: IFFALSE 10964
10954: PUSH
10955: CALL_OW 519
10959: PUSH
10960: LD_INT 1
10962: GREATER
10963: AND
10964: IFFALSE 10974
// result := false ;
10966: LD_ADDR_VAR 0 1
10970: PUSH
10971: LD_INT 0
10973: ST_TO_ADDR
// end ;
10974: LD_VAR 0 1
10978: RET
// function HasPower ( i ) ; begin
10979: LD_INT 0
10981: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10982: LD_ADDR_VAR 0 2
10986: PUSH
10987: LD_INT 22
10989: PUSH
10990: LD_VAR 0 1
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 2
11001: PUSH
11002: LD_INT 21
11004: PUSH
11005: LD_INT 1
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 33
11014: PUSH
11015: LD_INT 3
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PUSH
11022: LD_INT 33
11024: PUSH
11025: LD_INT 5
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PPUSH
11042: CALL_OW 69
11046: ST_TO_ADDR
// end ; end_of_file
11047: LD_VAR 0 2
11051: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
11052: LD_EXP 41
11056: IFFALSE 11099
11058: GO 11060
11060: DISABLE
11061: LD_INT 0
11063: PPUSH
// begin for i := 1 to 8 do
11064: LD_ADDR_VAR 0 1
11068: PUSH
11069: DOUBLE
11070: LD_INT 1
11072: DEC
11073: ST_TO_ADDR
11074: LD_INT 8
11076: PUSH
11077: FOR_TO
11078: IFFALSE 11097
// SetRestrict ( b_depot , i , state_disabled ) ;
11080: LD_INT 0
11082: PPUSH
11083: LD_VAR 0 1
11087: PPUSH
11088: LD_INT 0
11090: PPUSH
11091: CALL_OW 324
11095: GO 11077
11097: POP
11098: POP
// end ;
11099: PPOPN 1
11101: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
11102: LD_EXP 41
11106: IFFALSE 11114
11108: PUSH
11109: CALL 11324 0 0
11113: AND
11114: IFFALSE 11122
11116: PUSH
11117: LD_OWVAR 4
11121: AND
11122: IFFALSE 11321
11124: GO 11126
11126: DISABLE
11127: LD_INT 0
11129: PPUSH
11130: PPUSH
// begin canWin := false ;
11131: LD_ADDR_VAR 0 2
11135: PUSH
11136: LD_INT 0
11138: ST_TO_ADDR
// if not HasPower ( your_side ) then
11139: LD_OWVAR 2
11143: PPUSH
11144: CALL 11366 0 1
11148: NOT
11149: IFFALSE 11160
// begin Multiplayer_Loose_Message ;
11151: CALL_OW 521
// enable ( mpLose ) ;
11155: LD_INT 102
11157: ENABLE_MARKED
// end else
11158: GO 11321
// begin canWin := true ;
11160: LD_ADDR_VAR 0 2
11164: PUSH
11165: LD_INT 1
11167: ST_TO_ADDR
// for i := 1 to 8 do
11168: LD_ADDR_VAR 0 1
11172: PUSH
11173: DOUBLE
11174: LD_INT 1
11176: DEC
11177: ST_TO_ADDR
11178: LD_INT 8
11180: PUSH
11181: FOR_TO
11182: IFFALSE 11307
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11184: LD_EXP 9
11188: PUSH
11189: LD_VAR 0 1
11193: ARRAY
11194: IFFALSE 11207
11196: PUSH
11197: LD_VAR 0 1
11201: PPUSH
11202: CALL_OW 108
11206: AND
11207: IFFALSE 11221
11209: PUSH
11210: LD_VAR 0 1
11214: PUSH
11215: LD_OWVAR 2
11219: NONEQUAL
11220: AND
11221: IFFALSE 11305
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11223: LD_EXP 10
11227: PUSH
11228: LD_VAR 0 1
11232: ARRAY
11233: NOT
11234: IFTRUE 11282
11236: PUSH
11237: LD_EXP 10
11241: PUSH
11242: LD_VAR 0 1
11246: ARRAY
11247: PUSH
11248: LD_EXP 10
11252: PUSH
11253: LD_OWVAR 2
11257: ARRAY
11258: NONEQUAL
11259: IFFALSE 11281
11261: PUSH
11262: LD_OWVAR 2
11266: PPUSH
11267: LD_VAR 0 1
11271: PPUSH
11272: CALL_OW 81
11276: PUSH
11277: LD_INT 1
11279: NONEQUAL
11280: AND
11281: OR
11282: IFFALSE 11305
// if HasPower ( i ) then
11284: LD_VAR 0 1
11288: PPUSH
11289: CALL 11366 0 1
11293: IFFALSE 11305
// begin canWin := false ;
11295: LD_ADDR_VAR 0 2
11299: PUSH
11300: LD_INT 0
11302: ST_TO_ADDR
// break ;
11303: GO 11307
// end ;
11305: GO 11181
11307: POP
11308: POP
// if canWin then
11309: LD_VAR 0 2
11313: IFFALSE 11320
// enable ( mpWin ) else
11315: LD_INT 101
11317: ENABLE_MARKED
11318: GO 11321
// enable ;
11320: ENABLE
// end ; end ;
11321: PPOPN 2
11323: END
// function CanWinLoose ; begin
11324: LD_INT 0
11326: PPUSH
// result := true ;
11327: LD_ADDR_VAR 0 1
11331: PUSH
11332: LD_INT 1
11334: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11335: CALL_OW 531
11339: IFFALSE 11351
11341: PUSH
11342: CALL_OW 519
11346: PUSH
11347: LD_INT 1
11349: GREATER
11350: AND
11351: IFFALSE 11361
// result := false ;
11353: LD_ADDR_VAR 0 1
11357: PUSH
11358: LD_INT 0
11360: ST_TO_ADDR
// end ;
11361: LD_VAR 0 1
11365: RET
// function HasPower ( i ) ; begin
11366: LD_INT 0
11368: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11369: LD_INT 22
11371: PUSH
11372: LD_VAR 0 1
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 2
11383: PUSH
11384: LD_INT 30
11386: PUSH
11387: LD_INT 0
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 30
11396: PUSH
11397: LD_INT 1
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: LIST
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PPUSH
11413: CALL_OW 69
11417: NOT
11418: IFFALSE 11422
// exit ;
11420: GO 11487
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11422: LD_ADDR_VAR 0 2
11426: PUSH
11427: LD_INT 22
11429: PUSH
11430: LD_VAR 0 1
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: LD_INT 2
11441: PUSH
11442: LD_INT 21
11444: PUSH
11445: LD_INT 1
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 33
11454: PUSH
11455: LD_INT 3
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 33
11464: PUSH
11465: LD_INT 5
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PPUSH
11482: CALL_OW 69
11486: ST_TO_ADDR
// end ; end_of_file
11487: LD_VAR 0 2
11491: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11492: LD_INT 0
11494: PPUSH
11495: PPUSH
// if exist_mode then
11496: LD_VAR 0 2
11500: IFFALSE 11546
// begin unit := CreateCharacter ( prefix & ident ) ;
11502: LD_ADDR_VAR 0 5
11506: PUSH
11507: LD_VAR 0 3
11511: PUSH
11512: LD_VAR 0 1
11516: STR
11517: PPUSH
11518: CALL_OW 34
11522: ST_TO_ADDR
// if unit then
11523: LD_VAR 0 5
11527: IFFALSE 11544
// DeleteCharacters ( prefix & ident ) ;
11529: LD_VAR 0 3
11533: PUSH
11534: LD_VAR 0 1
11538: STR
11539: PPUSH
11540: CALL_OW 40
// end else
11544: GO 11561
// unit := NewCharacter ( ident ) ;
11546: LD_ADDR_VAR 0 5
11550: PUSH
11551: LD_VAR 0 1
11555: PPUSH
11556: CALL_OW 25
11560: ST_TO_ADDR
// result := unit ;
11561: LD_ADDR_VAR 0 4
11565: PUSH
11566: LD_VAR 0 5
11570: ST_TO_ADDR
// end ;
11571: LD_VAR 0 4
11575: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
11576: LD_INT 0
11578: PPUSH
11579: PPUSH
// if exist_mode then
11580: LD_VAR 0 2
11584: IFFALSE 11609
// unit := CreateCharacter ( prefix & ident ) else
11586: LD_ADDR_VAR 0 5
11590: PUSH
11591: LD_VAR 0 3
11595: PUSH
11596: LD_VAR 0 1
11600: STR
11601: PPUSH
11602: CALL_OW 34
11606: ST_TO_ADDR
11607: GO 11624
// unit := NewCharacter ( ident ) ;
11609: LD_ADDR_VAR 0 5
11613: PUSH
11614: LD_VAR 0 1
11618: PPUSH
11619: CALL_OW 25
11623: ST_TO_ADDR
// result := unit ;
11624: LD_ADDR_VAR 0 4
11628: PUSH
11629: LD_VAR 0 5
11633: ST_TO_ADDR
// end ;
11634: LD_VAR 0 4
11638: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11639: LD_INT 0
11641: PPUSH
11642: PPUSH
// if not side or not nation then
11643: LD_VAR 0 1
11647: NOT
11648: IFTRUE 11657
11650: PUSH
11651: LD_VAR 0 2
11655: NOT
11656: OR
11657: IFFALSE 11661
// exit ;
11659: GO 12455
// case nation of nation_american :
11661: LD_VAR 0 2
11665: PUSH
11666: LD_INT 1
11668: DOUBLE
11669: EQUAL
11670: IFTRUE 11674
11672: GO 11896
11674: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
11675: LD_ADDR_VAR 0 4
11679: PUSH
11680: LD_INT 35
11682: PUSH
11683: LD_INT 45
11685: PUSH
11686: LD_INT 46
11688: PUSH
11689: LD_INT 47
11691: PUSH
11692: LD_INT 82
11694: PUSH
11695: LD_INT 83
11697: PUSH
11698: LD_INT 84
11700: PUSH
11701: LD_INT 85
11703: PUSH
11704: LD_INT 86
11706: PUSH
11707: LD_INT 1
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: LD_INT 6
11715: PUSH
11716: LD_INT 15
11718: PUSH
11719: LD_INT 16
11721: PUSH
11722: LD_INT 7
11724: PUSH
11725: LD_INT 12
11727: PUSH
11728: LD_INT 13
11730: PUSH
11731: LD_INT 10
11733: PUSH
11734: LD_INT 14
11736: PUSH
11737: LD_INT 20
11739: PUSH
11740: LD_INT 21
11742: PUSH
11743: LD_INT 22
11745: PUSH
11746: LD_INT 25
11748: PUSH
11749: LD_INT 32
11751: PUSH
11752: LD_INT 27
11754: PUSH
11755: LD_INT 36
11757: PUSH
11758: LD_INT 69
11760: PUSH
11761: LD_INT 39
11763: PUSH
11764: LD_INT 34
11766: PUSH
11767: LD_INT 40
11769: PUSH
11770: LD_INT 48
11772: PUSH
11773: LD_INT 49
11775: PUSH
11776: LD_INT 50
11778: PUSH
11779: LD_INT 51
11781: PUSH
11782: LD_INT 52
11784: PUSH
11785: LD_INT 53
11787: PUSH
11788: LD_INT 54
11790: PUSH
11791: LD_INT 55
11793: PUSH
11794: LD_INT 56
11796: PUSH
11797: LD_INT 57
11799: PUSH
11800: LD_INT 58
11802: PUSH
11803: LD_INT 59
11805: PUSH
11806: LD_INT 60
11808: PUSH
11809: LD_INT 61
11811: PUSH
11812: LD_INT 62
11814: PUSH
11815: LD_INT 80
11817: PUSH
11818: LD_INT 82
11820: PUSH
11821: LD_INT 83
11823: PUSH
11824: LD_INT 84
11826: PUSH
11827: LD_INT 85
11829: PUSH
11830: LD_INT 86
11832: PUSH
11833: LD_INT 90
11835: PUSH
11836: LD_INT 93
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: ST_TO_ADDR
11894: GO 12377
11896: LD_INT 2
11898: DOUBLE
11899: EQUAL
11900: IFTRUE 11904
11902: GO 12138
11904: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11905: LD_ADDR_VAR 0 4
11909: PUSH
11910: LD_INT 35
11912: PUSH
11913: LD_INT 45
11915: PUSH
11916: LD_INT 46
11918: PUSH
11919: LD_INT 47
11921: PUSH
11922: LD_INT 82
11924: PUSH
11925: LD_INT 83
11927: PUSH
11928: LD_INT 84
11930: PUSH
11931: LD_INT 85
11933: PUSH
11934: LD_INT 87
11936: PUSH
11937: LD_INT 70
11939: PUSH
11940: LD_INT 1
11942: PUSH
11943: LD_INT 11
11945: PUSH
11946: LD_INT 3
11948: PUSH
11949: LD_INT 4
11951: PUSH
11952: LD_INT 5
11954: PUSH
11955: LD_INT 6
11957: PUSH
11958: LD_INT 15
11960: PUSH
11961: LD_INT 18
11963: PUSH
11964: LD_INT 7
11966: PUSH
11967: LD_INT 17
11969: PUSH
11970: LD_INT 8
11972: PUSH
11973: LD_INT 20
11975: PUSH
11976: LD_INT 21
11978: PUSH
11979: LD_INT 22
11981: PUSH
11982: LD_INT 72
11984: PUSH
11985: LD_INT 26
11987: PUSH
11988: LD_INT 69
11990: PUSH
11991: LD_INT 39
11993: PUSH
11994: LD_INT 40
11996: PUSH
11997: LD_INT 41
11999: PUSH
12000: LD_INT 42
12002: PUSH
12003: LD_INT 43
12005: PUSH
12006: LD_INT 48
12008: PUSH
12009: LD_INT 49
12011: PUSH
12012: LD_INT 50
12014: PUSH
12015: LD_INT 51
12017: PUSH
12018: LD_INT 52
12020: PUSH
12021: LD_INT 53
12023: PUSH
12024: LD_INT 54
12026: PUSH
12027: LD_INT 55
12029: PUSH
12030: LD_INT 56
12032: PUSH
12033: LD_INT 60
12035: PUSH
12036: LD_INT 61
12038: PUSH
12039: LD_INT 62
12041: PUSH
12042: LD_INT 66
12044: PUSH
12045: LD_INT 67
12047: PUSH
12048: LD_INT 68
12050: PUSH
12051: LD_INT 81
12053: PUSH
12054: LD_INT 82
12056: PUSH
12057: LD_INT 83
12059: PUSH
12060: LD_INT 84
12062: PUSH
12063: LD_INT 85
12065: PUSH
12066: LD_INT 87
12068: PUSH
12069: LD_INT 88
12071: PUSH
12072: LD_INT 92
12074: PUSH
12075: LD_INT 94
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: ST_TO_ADDR
12136: GO 12377
12138: LD_INT 3
12140: DOUBLE
12141: EQUAL
12142: IFTRUE 12146
12144: GO 12376
12146: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
12147: LD_ADDR_VAR 0 4
12151: PUSH
12152: LD_INT 46
12154: PUSH
12155: LD_INT 47
12157: PUSH
12158: LD_INT 1
12160: PUSH
12161: LD_INT 2
12163: PUSH
12164: LD_INT 82
12166: PUSH
12167: LD_INT 83
12169: PUSH
12170: LD_INT 84
12172: PUSH
12173: LD_INT 85
12175: PUSH
12176: LD_INT 86
12178: PUSH
12179: LD_INT 11
12181: PUSH
12182: LD_INT 9
12184: PUSH
12185: LD_INT 20
12187: PUSH
12188: LD_INT 19
12190: PUSH
12191: LD_INT 21
12193: PUSH
12194: LD_INT 24
12196: PUSH
12197: LD_INT 22
12199: PUSH
12200: LD_INT 25
12202: PUSH
12203: LD_INT 28
12205: PUSH
12206: LD_INT 29
12208: PUSH
12209: LD_INT 30
12211: PUSH
12212: LD_INT 31
12214: PUSH
12215: LD_INT 37
12217: PUSH
12218: LD_INT 38
12220: PUSH
12221: LD_INT 32
12223: PUSH
12224: LD_INT 27
12226: PUSH
12227: LD_INT 33
12229: PUSH
12230: LD_INT 69
12232: PUSH
12233: LD_INT 39
12235: PUSH
12236: LD_INT 34
12238: PUSH
12239: LD_INT 40
12241: PUSH
12242: LD_INT 71
12244: PUSH
12245: LD_INT 23
12247: PUSH
12248: LD_INT 44
12250: PUSH
12251: LD_INT 48
12253: PUSH
12254: LD_INT 49
12256: PUSH
12257: LD_INT 50
12259: PUSH
12260: LD_INT 51
12262: PUSH
12263: LD_INT 52
12265: PUSH
12266: LD_INT 53
12268: PUSH
12269: LD_INT 54
12271: PUSH
12272: LD_INT 55
12274: PUSH
12275: LD_INT 56
12277: PUSH
12278: LD_INT 57
12280: PUSH
12281: LD_INT 58
12283: PUSH
12284: LD_INT 59
12286: PUSH
12287: LD_INT 63
12289: PUSH
12290: LD_INT 64
12292: PUSH
12293: LD_INT 65
12295: PUSH
12296: LD_INT 82
12298: PUSH
12299: LD_INT 83
12301: PUSH
12302: LD_INT 84
12304: PUSH
12305: LD_INT 85
12307: PUSH
12308: LD_INT 86
12310: PUSH
12311: LD_INT 89
12313: PUSH
12314: LD_INT 91
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: ST_TO_ADDR
12374: GO 12377
12376: POP
// if state > - 1 and state < 3 then
12377: LD_VAR 0 3
12381: PUSH
12382: LD_INT 1
12384: NEG
12385: GREATER
12386: IFFALSE 12398
12388: PUSH
12389: LD_VAR 0 3
12393: PUSH
12394: LD_INT 3
12396: LESS
12397: AND
12398: IFFALSE 12455
// for i in result do
12400: LD_ADDR_VAR 0 5
12404: PUSH
12405: LD_VAR 0 4
12409: PUSH
12410: FOR_IN
12411: IFFALSE 12453
// if GetTech ( i , side ) <> state then
12413: LD_VAR 0 5
12417: PPUSH
12418: LD_VAR 0 1
12422: PPUSH
12423: CALL_OW 321
12427: PUSH
12428: LD_VAR 0 3
12432: NONEQUAL
12433: IFFALSE 12451
// result := result diff i ;
12435: LD_ADDR_VAR 0 4
12439: PUSH
12440: LD_VAR 0 4
12444: PUSH
12445: LD_VAR 0 5
12449: DIFF
12450: ST_TO_ADDR
12451: GO 12410
12453: POP
12454: POP
// end ;
12455: LD_VAR 0 4
12459: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12460: LD_INT 0
12462: PPUSH
12463: PPUSH
12464: PPUSH
// result := true ;
12465: LD_ADDR_VAR 0 3
12469: PUSH
12470: LD_INT 1
12472: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12473: LD_ADDR_VAR 0 5
12477: PUSH
12478: LD_VAR 0 2
12482: PPUSH
12483: CALL_OW 480
12487: ST_TO_ADDR
// if not tmp then
12488: LD_VAR 0 5
12492: NOT
12493: IFFALSE 12497
// exit ;
12495: GO 12546
// for i in tmp do
12497: LD_ADDR_VAR 0 4
12501: PUSH
12502: LD_VAR 0 5
12506: PUSH
12507: FOR_IN
12508: IFFALSE 12544
// if GetTech ( i , side ) <> state_researched then
12510: LD_VAR 0 4
12514: PPUSH
12515: LD_VAR 0 1
12519: PPUSH
12520: CALL_OW 321
12524: PUSH
12525: LD_INT 2
12527: NONEQUAL
12528: IFFALSE 12542
// begin result := false ;
12530: LD_ADDR_VAR 0 3
12534: PUSH
12535: LD_INT 0
12537: ST_TO_ADDR
// exit ;
12538: POP
12539: POP
12540: GO 12546
// end ;
12542: GO 12507
12544: POP
12545: POP
// end ;
12546: LD_VAR 0 3
12550: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12551: LD_INT 0
12553: PPUSH
12554: PPUSH
12555: PPUSH
12556: PPUSH
12557: PPUSH
12558: PPUSH
12559: PPUSH
12560: PPUSH
12561: PPUSH
12562: PPUSH
12563: PPUSH
12564: PPUSH
12565: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12566: LD_VAR 0 1
12570: NOT
12571: IFTRUE 12588
12573: PUSH
12574: LD_VAR 0 1
12578: PPUSH
12579: CALL_OW 257
12583: PUSH
12584: LD_INT 9
12586: NONEQUAL
12587: OR
12588: IFFALSE 12592
// exit ;
12590: GO 13171
// side := GetSide ( unit ) ;
12592: LD_ADDR_VAR 0 9
12596: PUSH
12597: LD_VAR 0 1
12601: PPUSH
12602: CALL_OW 255
12606: ST_TO_ADDR
// tech_space := tech_spacanom ;
12607: LD_ADDR_VAR 0 12
12611: PUSH
12612: LD_INT 29
12614: ST_TO_ADDR
// tech_time := tech_taurad ;
12615: LD_ADDR_VAR 0 13
12619: PUSH
12620: LD_INT 28
12622: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12623: LD_ADDR_VAR 0 11
12627: PUSH
12628: LD_VAR 0 1
12632: PPUSH
12633: CALL_OW 310
12637: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12638: LD_VAR 0 11
12642: PPUSH
12643: CALL_OW 247
12647: PUSH
12648: LD_INT 2
12650: EQUAL
12651: IFFALSE 12655
// exit ;
12653: GO 13171
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12655: LD_ADDR_VAR 0 8
12659: PUSH
12660: LD_INT 81
12662: PUSH
12663: LD_VAR 0 9
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 3
12674: PUSH
12675: LD_INT 21
12677: PUSH
12678: LD_INT 3
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PPUSH
12693: CALL_OW 69
12697: ST_TO_ADDR
// if not tmp then
12698: LD_VAR 0 8
12702: NOT
12703: IFFALSE 12707
// exit ;
12705: GO 13171
// if in_unit then
12707: LD_VAR 0 11
12711: IFFALSE 12735
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12713: LD_ADDR_VAR 0 10
12717: PUSH
12718: LD_VAR 0 8
12722: PPUSH
12723: LD_VAR 0 11
12727: PPUSH
12728: CALL_OW 74
12732: ST_TO_ADDR
12733: GO 12755
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12735: LD_ADDR_VAR 0 10
12739: PUSH
12740: LD_VAR 0 8
12744: PPUSH
12745: LD_VAR 0 1
12749: PPUSH
12750: CALL_OW 74
12754: ST_TO_ADDR
// if not enemy then
12755: LD_VAR 0 10
12759: NOT
12760: IFFALSE 12764
// exit ;
12762: GO 13171
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12764: LD_VAR 0 11
12768: IFFALSE 12790
12770: PUSH
12771: LD_VAR 0 11
12775: PPUSH
12776: LD_VAR 0 10
12780: PPUSH
12781: CALL_OW 296
12785: PUSH
12786: LD_INT 13
12788: GREATER
12789: AND
12790: IFTRUE 12812
12792: PUSH
12793: LD_VAR 0 1
12797: PPUSH
12798: LD_VAR 0 10
12802: PPUSH
12803: CALL_OW 296
12807: PUSH
12808: LD_INT 12
12810: GREATER
12811: OR
12812: IFFALSE 12816
// exit ;
12814: GO 13171
// missile := [ 1 ] ;
12816: LD_ADDR_VAR 0 14
12820: PUSH
12821: LD_INT 1
12823: PUSH
12824: EMPTY
12825: LIST
12826: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12827: LD_VAR 0 9
12831: PPUSH
12832: LD_VAR 0 12
12836: PPUSH
12837: CALL_OW 325
12841: IFFALSE 12870
// missile := Replace ( missile , missile + 1 , 2 ) ;
12843: LD_ADDR_VAR 0 14
12847: PUSH
12848: LD_VAR 0 14
12852: PPUSH
12853: LD_VAR 0 14
12857: PUSH
12858: LD_INT 1
12860: PLUS
12861: PPUSH
12862: LD_INT 2
12864: PPUSH
12865: CALL_OW 1
12869: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12870: LD_VAR 0 9
12874: PPUSH
12875: LD_VAR 0 13
12879: PPUSH
12880: CALL_OW 325
12884: IFFALSE 12908
12886: PUSH
12887: LD_VAR 0 10
12891: PPUSH
12892: CALL_OW 255
12896: PPUSH
12897: LD_VAR 0 13
12901: PPUSH
12902: CALL_OW 325
12906: NOT
12907: AND
12908: IFFALSE 12937
// missile := Replace ( missile , missile + 1 , 3 ) ;
12910: LD_ADDR_VAR 0 14
12914: PUSH
12915: LD_VAR 0 14
12919: PPUSH
12920: LD_VAR 0 14
12924: PUSH
12925: LD_INT 1
12927: PLUS
12928: PPUSH
12929: LD_INT 3
12931: PPUSH
12932: CALL_OW 1
12936: ST_TO_ADDR
// if missile < 2 then
12937: LD_VAR 0 14
12941: PUSH
12942: LD_INT 2
12944: LESS
12945: IFFALSE 12949
// exit ;
12947: GO 13171
// x := GetX ( enemy ) ;
12949: LD_ADDR_VAR 0 4
12953: PUSH
12954: LD_VAR 0 10
12958: PPUSH
12959: CALL_OW 250
12963: ST_TO_ADDR
// y := GetY ( enemy ) ;
12964: LD_ADDR_VAR 0 5
12968: PUSH
12969: LD_VAR 0 10
12973: PPUSH
12974: CALL_OW 251
12978: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12979: LD_ADDR_VAR 0 6
12983: PUSH
12984: LD_VAR 0 4
12988: PUSH
12989: LD_INT 1
12991: NEG
12992: PPUSH
12993: LD_INT 1
12995: PPUSH
12996: CALL_OW 12
13000: PLUS
13001: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
13002: LD_ADDR_VAR 0 7
13006: PUSH
13007: LD_VAR 0 5
13011: PUSH
13012: LD_INT 1
13014: NEG
13015: PPUSH
13016: LD_INT 1
13018: PPUSH
13019: CALL_OW 12
13023: PLUS
13024: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13025: LD_VAR 0 6
13029: PPUSH
13030: LD_VAR 0 7
13034: PPUSH
13035: CALL_OW 488
13039: NOT
13040: IFFALSE 13062
// begin _x := x ;
13042: LD_ADDR_VAR 0 6
13046: PUSH
13047: LD_VAR 0 4
13051: ST_TO_ADDR
// _y := y ;
13052: LD_ADDR_VAR 0 7
13056: PUSH
13057: LD_VAR 0 5
13061: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
13062: LD_ADDR_VAR 0 3
13066: PUSH
13067: LD_INT 1
13069: PPUSH
13070: LD_VAR 0 14
13074: PPUSH
13075: CALL_OW 12
13079: ST_TO_ADDR
// case i of 1 :
13080: LD_VAR 0 3
13084: PUSH
13085: LD_INT 1
13087: DOUBLE
13088: EQUAL
13089: IFTRUE 13093
13091: GO 13110
13093: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
13094: LD_VAR 0 1
13098: PPUSH
13099: LD_VAR 0 10
13103: PPUSH
13104: CALL_OW 115
13108: GO 13171
13110: LD_INT 2
13112: DOUBLE
13113: EQUAL
13114: IFTRUE 13118
13116: GO 13140
13118: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
13119: LD_VAR 0 1
13123: PPUSH
13124: LD_VAR 0 6
13128: PPUSH
13129: LD_VAR 0 7
13133: PPUSH
13134: CALL_OW 153
13138: GO 13171
13140: LD_INT 3
13142: DOUBLE
13143: EQUAL
13144: IFTRUE 13148
13146: GO 13170
13148: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
13149: LD_VAR 0 1
13153: PPUSH
13154: LD_VAR 0 6
13158: PPUSH
13159: LD_VAR 0 7
13163: PPUSH
13164: CALL_OW 154
13168: GO 13171
13170: POP
// end ;
13171: LD_VAR 0 2
13175: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
13176: LD_INT 0
13178: PPUSH
13179: PPUSH
13180: PPUSH
13181: PPUSH
13182: PPUSH
13183: PPUSH
// if not unit or not building then
13184: LD_VAR 0 1
13188: NOT
13189: IFTRUE 13198
13191: PUSH
13192: LD_VAR 0 2
13196: NOT
13197: OR
13198: IFFALSE 13202
// exit ;
13200: GO 13360
// x := GetX ( building ) ;
13202: LD_ADDR_VAR 0 5
13206: PUSH
13207: LD_VAR 0 2
13211: PPUSH
13212: CALL_OW 250
13216: ST_TO_ADDR
// y := GetY ( building ) ;
13217: LD_ADDR_VAR 0 6
13221: PUSH
13222: LD_VAR 0 2
13226: PPUSH
13227: CALL_OW 251
13231: ST_TO_ADDR
// for i := 0 to 5 do
13232: LD_ADDR_VAR 0 4
13236: PUSH
13237: DOUBLE
13238: LD_INT 0
13240: DEC
13241: ST_TO_ADDR
13242: LD_INT 5
13244: PUSH
13245: FOR_TO
13246: IFFALSE 13358
// begin _x := ShiftX ( x , i , 3 ) ;
13248: LD_ADDR_VAR 0 7
13252: PUSH
13253: LD_VAR 0 5
13257: PPUSH
13258: LD_VAR 0 4
13262: PPUSH
13263: LD_INT 3
13265: PPUSH
13266: CALL_OW 272
13270: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13271: LD_ADDR_VAR 0 8
13275: PUSH
13276: LD_VAR 0 6
13280: PPUSH
13281: LD_VAR 0 4
13285: PPUSH
13286: LD_INT 3
13288: PPUSH
13289: CALL_OW 273
13293: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13294: LD_VAR 0 7
13298: PPUSH
13299: LD_VAR 0 8
13303: PPUSH
13304: CALL_OW 488
13308: NOT
13309: IFFALSE 13313
// continue ;
13311: GO 13245
// if HexInfo ( _x , _y ) = 0 then
13313: LD_VAR 0 7
13317: PPUSH
13318: LD_VAR 0 8
13322: PPUSH
13323: CALL_OW 428
13327: PUSH
13328: LD_INT 0
13330: EQUAL
13331: IFFALSE 13356
// begin ComMoveXY ( unit , _x , _y ) ;
13333: LD_VAR 0 1
13337: PPUSH
13338: LD_VAR 0 7
13342: PPUSH
13343: LD_VAR 0 8
13347: PPUSH
13348: CALL_OW 111
// exit ;
13352: POP
13353: POP
13354: GO 13360
// end ; end ;
13356: GO 13245
13358: POP
13359: POP
// end ;
13360: LD_VAR 0 3
13364: RET
// export function ScanBase ( side , base_area ) ; begin
13365: LD_INT 0
13367: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13368: LD_ADDR_VAR 0 3
13372: PUSH
13373: LD_VAR 0 2
13377: PPUSH
13378: LD_INT 81
13380: PUSH
13381: LD_VAR 0 1
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PPUSH
13390: CALL_OW 70
13394: ST_TO_ADDR
// end ;
13395: LD_VAR 0 3
13399: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13400: LD_INT 0
13402: PPUSH
13403: PPUSH
13404: PPUSH
13405: PPUSH
// result := false ;
13406: LD_ADDR_VAR 0 2
13410: PUSH
13411: LD_INT 0
13413: ST_TO_ADDR
// side := GetSide ( unit ) ;
13414: LD_ADDR_VAR 0 3
13418: PUSH
13419: LD_VAR 0 1
13423: PPUSH
13424: CALL_OW 255
13428: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13429: LD_ADDR_VAR 0 4
13433: PUSH
13434: LD_VAR 0 1
13438: PPUSH
13439: CALL_OW 248
13443: ST_TO_ADDR
// case nat of 1 :
13444: LD_VAR 0 4
13448: PUSH
13449: LD_INT 1
13451: DOUBLE
13452: EQUAL
13453: IFTRUE 13457
13455: GO 13468
13457: POP
// tech := tech_lassight ; 2 :
13458: LD_ADDR_VAR 0 5
13462: PUSH
13463: LD_INT 12
13465: ST_TO_ADDR
13466: GO 13507
13468: LD_INT 2
13470: DOUBLE
13471: EQUAL
13472: IFTRUE 13476
13474: GO 13487
13476: POP
// tech := tech_mortar ; 3 :
13477: LD_ADDR_VAR 0 5
13481: PUSH
13482: LD_INT 41
13484: ST_TO_ADDR
13485: GO 13507
13487: LD_INT 3
13489: DOUBLE
13490: EQUAL
13491: IFTRUE 13495
13493: GO 13506
13495: POP
// tech := tech_bazooka ; end ;
13496: LD_ADDR_VAR 0 5
13500: PUSH
13501: LD_INT 44
13503: ST_TO_ADDR
13504: GO 13507
13506: POP
// if Researched ( side , tech ) then
13507: LD_VAR 0 3
13511: PPUSH
13512: LD_VAR 0 5
13516: PPUSH
13517: CALL_OW 325
13521: IFFALSE 13548
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13523: LD_ADDR_VAR 0 2
13527: PUSH
13528: LD_INT 5
13530: PUSH
13531: LD_INT 8
13533: PUSH
13534: LD_INT 9
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: LIST
13541: PUSH
13542: LD_VAR 0 4
13546: ARRAY
13547: ST_TO_ADDR
// end ;
13548: LD_VAR 0 2
13552: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13553: LD_INT 0
13555: PPUSH
13556: PPUSH
13557: PPUSH
// if not mines then
13558: LD_VAR 0 2
13562: NOT
13563: IFFALSE 13567
// exit ;
13565: GO 13711
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13567: LD_ADDR_VAR 0 5
13571: PUSH
13572: LD_INT 81
13574: PUSH
13575: LD_VAR 0 1
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 3
13586: PUSH
13587: LD_INT 21
13589: PUSH
13590: LD_INT 3
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PPUSH
13605: CALL_OW 69
13609: ST_TO_ADDR
// for i in mines do
13610: LD_ADDR_VAR 0 4
13614: PUSH
13615: LD_VAR 0 2
13619: PUSH
13620: FOR_IN
13621: IFFALSE 13709
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13623: LD_VAR 0 4
13627: PUSH
13628: LD_INT 1
13630: ARRAY
13631: PPUSH
13632: LD_VAR 0 4
13636: PUSH
13637: LD_INT 2
13639: ARRAY
13640: PPUSH
13641: CALL_OW 458
13645: NOT
13646: IFFALSE 13650
// continue ;
13648: GO 13620
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13650: LD_VAR 0 4
13654: PUSH
13655: LD_INT 1
13657: ARRAY
13658: PPUSH
13659: LD_VAR 0 4
13663: PUSH
13664: LD_INT 2
13666: ARRAY
13667: PPUSH
13668: CALL_OW 428
13672: PUSH
13673: LD_VAR 0 5
13677: IN
13678: IFFALSE 13707
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13680: LD_VAR 0 4
13684: PUSH
13685: LD_INT 1
13687: ARRAY
13688: PPUSH
13689: LD_VAR 0 4
13693: PUSH
13694: LD_INT 2
13696: ARRAY
13697: PPUSH
13698: LD_VAR 0 1
13702: PPUSH
13703: CALL_OW 456
// end ;
13707: GO 13620
13709: POP
13710: POP
// end ;
13711: LD_VAR 0 3
13715: RET
// export function Count ( array ) ; begin
13716: LD_INT 0
13718: PPUSH
// result := array + 0 ;
13719: LD_ADDR_VAR 0 2
13723: PUSH
13724: LD_VAR 0 1
13728: PUSH
13729: LD_INT 0
13731: PLUS
13732: ST_TO_ADDR
// end ;
13733: LD_VAR 0 2
13737: RET
// export function IsEmpty ( building ) ; begin
13738: LD_INT 0
13740: PPUSH
// if not building then
13741: LD_VAR 0 1
13745: NOT
13746: IFFALSE 13750
// exit ;
13748: GO 13793
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13750: LD_ADDR_VAR 0 2
13754: PUSH
13755: LD_VAR 0 1
13759: PUSH
13760: LD_INT 22
13762: PUSH
13763: LD_VAR 0 1
13767: PPUSH
13768: CALL_OW 255
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 58
13779: PUSH
13780: EMPTY
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PPUSH
13787: CALL_OW 69
13791: IN
13792: ST_TO_ADDR
// end ;
13793: LD_VAR 0 2
13797: RET
// export function IsNotFull ( building ) ; var places ; begin
13798: LD_INT 0
13800: PPUSH
13801: PPUSH
// if not building then
13802: LD_VAR 0 1
13806: NOT
13807: IFFALSE 13811
// exit ;
13809: GO 13839
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13811: LD_ADDR_VAR 0 2
13815: PUSH
13816: LD_VAR 0 1
13820: PPUSH
13821: LD_INT 3
13823: PUSH
13824: LD_INT 62
13826: PUSH
13827: EMPTY
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PPUSH
13834: CALL_OW 72
13838: ST_TO_ADDR
// end ;
13839: LD_VAR 0 2
13843: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13844: LD_INT 0
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
// tmp := [ ] ;
13850: LD_ADDR_VAR 0 3
13854: PUSH
13855: EMPTY
13856: ST_TO_ADDR
// list := [ ] ;
13857: LD_ADDR_VAR 0 5
13861: PUSH
13862: EMPTY
13863: ST_TO_ADDR
// for i = 16 to 25 do
13864: LD_ADDR_VAR 0 4
13868: PUSH
13869: DOUBLE
13870: LD_INT 16
13872: DEC
13873: ST_TO_ADDR
13874: LD_INT 25
13876: PUSH
13877: FOR_TO
13878: IFFALSE 13951
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13880: LD_ADDR_VAR 0 3
13884: PUSH
13885: LD_VAR 0 3
13889: PUSH
13890: LD_INT 22
13892: PUSH
13893: LD_VAR 0 1
13897: PPUSH
13898: CALL_OW 255
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 91
13909: PUSH
13910: LD_VAR 0 1
13914: PUSH
13915: LD_INT 6
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 30
13925: PUSH
13926: LD_VAR 0 4
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: PPUSH
13943: CALL_OW 69
13947: ADD
13948: ST_TO_ADDR
13949: GO 13877
13951: POP
13952: POP
// for i = 1 to tmp do
13953: LD_ADDR_VAR 0 4
13957: PUSH
13958: DOUBLE
13959: LD_INT 1
13961: DEC
13962: ST_TO_ADDR
13963: LD_VAR 0 3
13967: PUSH
13968: FOR_TO
13969: IFFALSE 14057
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13971: LD_ADDR_VAR 0 5
13975: PUSH
13976: LD_VAR 0 5
13980: PUSH
13981: LD_VAR 0 3
13985: PUSH
13986: LD_VAR 0 4
13990: ARRAY
13991: PPUSH
13992: CALL_OW 266
13996: PUSH
13997: LD_VAR 0 3
14001: PUSH
14002: LD_VAR 0 4
14006: ARRAY
14007: PPUSH
14008: CALL_OW 250
14012: PUSH
14013: LD_VAR 0 3
14017: PUSH
14018: LD_VAR 0 4
14022: ARRAY
14023: PPUSH
14024: CALL_OW 251
14028: PUSH
14029: LD_VAR 0 3
14033: PUSH
14034: LD_VAR 0 4
14038: ARRAY
14039: PPUSH
14040: CALL_OW 254
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: PUSH
14051: EMPTY
14052: LIST
14053: ADD
14054: ST_TO_ADDR
14055: GO 13968
14057: POP
14058: POP
// result := list ;
14059: LD_ADDR_VAR 0 2
14063: PUSH
14064: LD_VAR 0 5
14068: ST_TO_ADDR
// end ;
14069: LD_VAR 0 2
14073: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
14074: LD_INT 0
14076: PPUSH
14077: PPUSH
14078: PPUSH
14079: PPUSH
14080: PPUSH
14081: PPUSH
14082: PPUSH
// if not factory then
14083: LD_VAR 0 1
14087: NOT
14088: IFFALSE 14092
// exit ;
14090: GO 14695
// if control = control_apeman then
14092: LD_VAR 0 4
14096: PUSH
14097: LD_INT 5
14099: EQUAL
14100: IFFALSE 14209
// begin tmp := UnitsInside ( factory ) ;
14102: LD_ADDR_VAR 0 8
14106: PUSH
14107: LD_VAR 0 1
14111: PPUSH
14112: CALL_OW 313
14116: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
14117: LD_VAR 0 8
14121: PPUSH
14122: LD_INT 25
14124: PUSH
14125: LD_INT 12
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PPUSH
14132: CALL_OW 72
14136: NOT
14137: IFFALSE 14147
// control := control_manual ;
14139: LD_ADDR_VAR 0 4
14143: PUSH
14144: LD_INT 1
14146: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
14147: LD_ADDR_VAR 0 8
14151: PUSH
14152: LD_VAR 0 1
14156: PPUSH
14157: CALL 13844 0 1
14161: ST_TO_ADDR
// if tmp then
14162: LD_VAR 0 8
14166: IFFALSE 14209
// begin for i in tmp do
14168: LD_ADDR_VAR 0 7
14172: PUSH
14173: LD_VAR 0 8
14177: PUSH
14178: FOR_IN
14179: IFFALSE 14207
// if i [ 1 ] = b_ext_radio then
14181: LD_VAR 0 7
14185: PUSH
14186: LD_INT 1
14188: ARRAY
14189: PUSH
14190: LD_INT 22
14192: EQUAL
14193: IFFALSE 14205
// begin control := control_remote ;
14195: LD_ADDR_VAR 0 4
14199: PUSH
14200: LD_INT 2
14202: ST_TO_ADDR
// break ;
14203: GO 14207
// end ;
14205: GO 14178
14207: POP
14208: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14209: LD_VAR 0 1
14213: PPUSH
14214: LD_VAR 0 2
14218: PPUSH
14219: LD_VAR 0 3
14223: PPUSH
14224: LD_VAR 0 4
14228: PPUSH
14229: LD_VAR 0 5
14233: PPUSH
14234: CALL_OW 448
14238: IFFALSE 14273
// begin result := [ chassis , engine , control , weapon ] ;
14240: LD_ADDR_VAR 0 6
14244: PUSH
14245: LD_VAR 0 2
14249: PUSH
14250: LD_VAR 0 3
14254: PUSH
14255: LD_VAR 0 4
14259: PUSH
14260: LD_VAR 0 5
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: ST_TO_ADDR
// exit ;
14271: GO 14695
// end ; _chassis := AvailableChassisList ( factory ) ;
14273: LD_ADDR_VAR 0 9
14277: PUSH
14278: LD_VAR 0 1
14282: PPUSH
14283: CALL_OW 475
14287: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14288: LD_ADDR_VAR 0 11
14292: PUSH
14293: LD_VAR 0 1
14297: PPUSH
14298: CALL_OW 476
14302: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14303: LD_ADDR_VAR 0 12
14307: PUSH
14308: LD_VAR 0 1
14312: PPUSH
14313: CALL_OW 477
14317: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14318: LD_ADDR_VAR 0 10
14322: PUSH
14323: LD_VAR 0 1
14327: PPUSH
14328: CALL_OW 478
14332: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
14333: LD_VAR 0 9
14337: NOT
14338: IFTRUE 14347
14340: PUSH
14341: LD_VAR 0 11
14345: NOT
14346: OR
14347: IFTRUE 14356
14349: PUSH
14350: LD_VAR 0 12
14354: NOT
14355: OR
14356: IFTRUE 14365
14358: PUSH
14359: LD_VAR 0 10
14363: NOT
14364: OR
14365: IFFALSE 14400
// begin result := [ chassis , engine , control , weapon ] ;
14367: LD_ADDR_VAR 0 6
14371: PUSH
14372: LD_VAR 0 2
14376: PUSH
14377: LD_VAR 0 3
14381: PUSH
14382: LD_VAR 0 4
14386: PUSH
14387: LD_VAR 0 5
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: ST_TO_ADDR
// exit ;
14398: GO 14695
// end ; if not chassis in _chassis then
14400: LD_VAR 0 2
14404: PUSH
14405: LD_VAR 0 9
14409: IN
14410: NOT
14411: IFFALSE 14437
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14413: LD_ADDR_VAR 0 2
14417: PUSH
14418: LD_VAR 0 9
14422: PUSH
14423: LD_INT 1
14425: PPUSH
14426: LD_VAR 0 9
14430: PPUSH
14431: CALL_OW 12
14435: ARRAY
14436: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14437: LD_VAR 0 2
14441: PPUSH
14442: LD_VAR 0 3
14446: PPUSH
14447: CALL 14700 0 2
14451: NOT
14452: IFFALSE 14513
// repeat engine := _engine [ 1 ] ;
14454: LD_ADDR_VAR 0 3
14458: PUSH
14459: LD_VAR 0 11
14463: PUSH
14464: LD_INT 1
14466: ARRAY
14467: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14468: LD_ADDR_VAR 0 11
14472: PUSH
14473: LD_VAR 0 11
14477: PPUSH
14478: LD_INT 1
14480: PPUSH
14481: CALL_OW 3
14485: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14486: LD_VAR 0 2
14490: PPUSH
14491: LD_VAR 0 3
14495: PPUSH
14496: CALL 14700 0 2
14500: IFTRUE 14511
14502: PUSH
14503: LD_VAR 0 11
14507: PUSH
14508: EMPTY
14509: EQUAL
14510: OR
14511: IFFALSE 14454
// if not control in _control then
14513: LD_VAR 0 4
14517: PUSH
14518: LD_VAR 0 12
14522: IN
14523: NOT
14524: IFFALSE 14550
// control := _control [ rand ( 1 , _control ) ] ;
14526: LD_ADDR_VAR 0 4
14530: PUSH
14531: LD_VAR 0 12
14535: PUSH
14536: LD_INT 1
14538: PPUSH
14539: LD_VAR 0 12
14543: PPUSH
14544: CALL_OW 12
14548: ARRAY
14549: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14550: LD_VAR 0 2
14554: PPUSH
14555: LD_VAR 0 5
14559: PPUSH
14560: CALL 14922 0 2
14564: NOT
14565: IFFALSE 14626
// repeat weapon := _weapon [ 1 ] ;
14567: LD_ADDR_VAR 0 5
14571: PUSH
14572: LD_VAR 0 10
14576: PUSH
14577: LD_INT 1
14579: ARRAY
14580: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14581: LD_ADDR_VAR 0 10
14585: PUSH
14586: LD_VAR 0 10
14590: PPUSH
14591: LD_INT 1
14593: PPUSH
14594: CALL_OW 3
14598: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14599: LD_VAR 0 2
14603: PPUSH
14604: LD_VAR 0 5
14608: PPUSH
14609: CALL 14922 0 2
14613: IFTRUE 14624
14615: PUSH
14616: LD_VAR 0 10
14620: PUSH
14621: EMPTY
14622: EQUAL
14623: OR
14624: IFFALSE 14567
// result := [ ] ;
14626: LD_ADDR_VAR 0 6
14630: PUSH
14631: EMPTY
14632: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14633: LD_VAR 0 1
14637: PPUSH
14638: LD_VAR 0 2
14642: PPUSH
14643: LD_VAR 0 3
14647: PPUSH
14648: LD_VAR 0 4
14652: PPUSH
14653: LD_VAR 0 5
14657: PPUSH
14658: CALL_OW 448
14662: IFFALSE 14695
// result := [ chassis , engine , control , weapon ] ;
14664: LD_ADDR_VAR 0 6
14668: PUSH
14669: LD_VAR 0 2
14673: PUSH
14674: LD_VAR 0 3
14678: PUSH
14679: LD_VAR 0 4
14683: PUSH
14684: LD_VAR 0 5
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: ST_TO_ADDR
// end ;
14695: LD_VAR 0 6
14699: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14700: LD_INT 0
14702: PPUSH
// if not chassis or not engine then
14703: LD_VAR 0 1
14707: NOT
14708: IFTRUE 14717
14710: PUSH
14711: LD_VAR 0 2
14715: NOT
14716: OR
14717: IFFALSE 14721
// exit ;
14719: GO 14917
// case engine of engine_solar :
14721: LD_VAR 0 2
14725: PUSH
14726: LD_INT 2
14728: DOUBLE
14729: EQUAL
14730: IFTRUE 14734
14732: GO 14772
14734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14735: LD_ADDR_VAR 0 3
14739: PUSH
14740: LD_INT 11
14742: PUSH
14743: LD_INT 12
14745: PUSH
14746: LD_INT 13
14748: PUSH
14749: LD_INT 14
14751: PUSH
14752: LD_INT 1
14754: PUSH
14755: LD_INT 2
14757: PUSH
14758: LD_INT 3
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: ST_TO_ADDR
14770: GO 14901
14772: LD_INT 1
14774: DOUBLE
14775: EQUAL
14776: IFTRUE 14780
14778: GO 14842
14780: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14781: LD_ADDR_VAR 0 3
14785: PUSH
14786: LD_INT 11
14788: PUSH
14789: LD_INT 12
14791: PUSH
14792: LD_INT 13
14794: PUSH
14795: LD_INT 14
14797: PUSH
14798: LD_INT 1
14800: PUSH
14801: LD_INT 2
14803: PUSH
14804: LD_INT 3
14806: PUSH
14807: LD_INT 4
14809: PUSH
14810: LD_INT 5
14812: PUSH
14813: LD_INT 21
14815: PUSH
14816: LD_INT 23
14818: PUSH
14819: LD_INT 22
14821: PUSH
14822: LD_INT 24
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: ST_TO_ADDR
14840: GO 14901
14842: LD_INT 3
14844: DOUBLE
14845: EQUAL
14846: IFTRUE 14850
14848: GO 14900
14850: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14851: LD_ADDR_VAR 0 3
14855: PUSH
14856: LD_INT 13
14858: PUSH
14859: LD_INT 14
14861: PUSH
14862: LD_INT 2
14864: PUSH
14865: LD_INT 3
14867: PUSH
14868: LD_INT 4
14870: PUSH
14871: LD_INT 5
14873: PUSH
14874: LD_INT 21
14876: PUSH
14877: LD_INT 22
14879: PUSH
14880: LD_INT 23
14882: PUSH
14883: LD_INT 24
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: ST_TO_ADDR
14898: GO 14901
14900: POP
// result := ( chassis in result ) ;
14901: LD_ADDR_VAR 0 3
14905: PUSH
14906: LD_VAR 0 1
14910: PUSH
14911: LD_VAR 0 3
14915: IN
14916: ST_TO_ADDR
// end ;
14917: LD_VAR 0 3
14921: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14922: LD_INT 0
14924: PPUSH
// if not chassis or not weapon then
14925: LD_VAR 0 1
14929: NOT
14930: IFTRUE 14939
14932: PUSH
14933: LD_VAR 0 2
14937: NOT
14938: OR
14939: IFFALSE 14943
// exit ;
14941: GO 16037
// case weapon of us_machine_gun :
14943: LD_VAR 0 2
14947: PUSH
14948: LD_INT 2
14950: DOUBLE
14951: EQUAL
14952: IFTRUE 14956
14954: GO 14986
14956: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14957: LD_ADDR_VAR 0 3
14961: PUSH
14962: LD_INT 1
14964: PUSH
14965: LD_INT 2
14967: PUSH
14968: LD_INT 3
14970: PUSH
14971: LD_INT 4
14973: PUSH
14974: LD_INT 5
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: ST_TO_ADDR
14984: GO 16021
14986: LD_INT 3
14988: DOUBLE
14989: EQUAL
14990: IFTRUE 14994
14992: GO 15024
14994: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14995: LD_ADDR_VAR 0 3
14999: PUSH
15000: LD_INT 1
15002: PUSH
15003: LD_INT 2
15005: PUSH
15006: LD_INT 3
15008: PUSH
15009: LD_INT 4
15011: PUSH
15012: LD_INT 5
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: ST_TO_ADDR
15022: GO 16021
15024: LD_INT 11
15026: DOUBLE
15027: EQUAL
15028: IFTRUE 15032
15030: GO 15062
15032: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
15033: LD_ADDR_VAR 0 3
15037: PUSH
15038: LD_INT 1
15040: PUSH
15041: LD_INT 2
15043: PUSH
15044: LD_INT 3
15046: PUSH
15047: LD_INT 4
15049: PUSH
15050: LD_INT 5
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: ST_TO_ADDR
15060: GO 16021
15062: LD_INT 4
15064: DOUBLE
15065: EQUAL
15066: IFTRUE 15070
15068: GO 15096
15070: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
15071: LD_ADDR_VAR 0 3
15075: PUSH
15076: LD_INT 2
15078: PUSH
15079: LD_INT 3
15081: PUSH
15082: LD_INT 4
15084: PUSH
15085: LD_INT 5
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: ST_TO_ADDR
15094: GO 16021
15096: LD_INT 5
15098: DOUBLE
15099: EQUAL
15100: IFTRUE 15104
15102: GO 15130
15104: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
15105: LD_ADDR_VAR 0 3
15109: PUSH
15110: LD_INT 2
15112: PUSH
15113: LD_INT 3
15115: PUSH
15116: LD_INT 4
15118: PUSH
15119: LD_INT 5
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: ST_TO_ADDR
15128: GO 16021
15130: LD_INT 9
15132: DOUBLE
15133: EQUAL
15134: IFTRUE 15138
15136: GO 15164
15138: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
15139: LD_ADDR_VAR 0 3
15143: PUSH
15144: LD_INT 2
15146: PUSH
15147: LD_INT 3
15149: PUSH
15150: LD_INT 4
15152: PUSH
15153: LD_INT 5
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: ST_TO_ADDR
15162: GO 16021
15164: LD_INT 7
15166: DOUBLE
15167: EQUAL
15168: IFTRUE 15172
15170: GO 15198
15172: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_INT 2
15180: PUSH
15181: LD_INT 3
15183: PUSH
15184: LD_INT 4
15186: PUSH
15187: LD_INT 5
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: ST_TO_ADDR
15196: GO 16021
15198: LD_INT 12
15200: DOUBLE
15201: EQUAL
15202: IFTRUE 15206
15204: GO 15232
15206: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15207: LD_ADDR_VAR 0 3
15211: PUSH
15212: LD_INT 2
15214: PUSH
15215: LD_INT 3
15217: PUSH
15218: LD_INT 4
15220: PUSH
15221: LD_INT 5
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: ST_TO_ADDR
15230: GO 16021
15232: LD_INT 13
15234: DOUBLE
15235: EQUAL
15236: IFTRUE 15240
15238: GO 15266
15240: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15241: LD_ADDR_VAR 0 3
15245: PUSH
15246: LD_INT 2
15248: PUSH
15249: LD_INT 3
15251: PUSH
15252: LD_INT 4
15254: PUSH
15255: LD_INT 5
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: ST_TO_ADDR
15264: GO 16021
15266: LD_INT 14
15268: DOUBLE
15269: EQUAL
15270: IFTRUE 15274
15272: GO 15292
15274: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15275: LD_ADDR_VAR 0 3
15279: PUSH
15280: LD_INT 4
15282: PUSH
15283: LD_INT 5
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: ST_TO_ADDR
15290: GO 16021
15292: LD_INT 6
15294: DOUBLE
15295: EQUAL
15296: IFTRUE 15300
15298: GO 15318
15300: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15301: LD_ADDR_VAR 0 3
15305: PUSH
15306: LD_INT 4
15308: PUSH
15309: LD_INT 5
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: ST_TO_ADDR
15316: GO 16021
15318: LD_INT 10
15320: DOUBLE
15321: EQUAL
15322: IFTRUE 15326
15324: GO 15344
15326: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15327: LD_ADDR_VAR 0 3
15331: PUSH
15332: LD_INT 4
15334: PUSH
15335: LD_INT 5
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: ST_TO_ADDR
15342: GO 16021
15344: LD_INT 22
15346: DOUBLE
15347: EQUAL
15348: IFTRUE 15352
15350: GO 15378
15352: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15353: LD_ADDR_VAR 0 3
15357: PUSH
15358: LD_INT 11
15360: PUSH
15361: LD_INT 12
15363: PUSH
15364: LD_INT 13
15366: PUSH
15367: LD_INT 14
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: ST_TO_ADDR
15376: GO 16021
15378: LD_INT 23
15380: DOUBLE
15381: EQUAL
15382: IFTRUE 15386
15384: GO 15412
15386: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15387: LD_ADDR_VAR 0 3
15391: PUSH
15392: LD_INT 11
15394: PUSH
15395: LD_INT 12
15397: PUSH
15398: LD_INT 13
15400: PUSH
15401: LD_INT 14
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: ST_TO_ADDR
15410: GO 16021
15412: LD_INT 24
15414: DOUBLE
15415: EQUAL
15416: IFTRUE 15420
15418: GO 15446
15420: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15421: LD_ADDR_VAR 0 3
15425: PUSH
15426: LD_INT 11
15428: PUSH
15429: LD_INT 12
15431: PUSH
15432: LD_INT 13
15434: PUSH
15435: LD_INT 14
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: ST_TO_ADDR
15444: GO 16021
15446: LD_INT 30
15448: DOUBLE
15449: EQUAL
15450: IFTRUE 15454
15452: GO 15480
15454: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15455: LD_ADDR_VAR 0 3
15459: PUSH
15460: LD_INT 11
15462: PUSH
15463: LD_INT 12
15465: PUSH
15466: LD_INT 13
15468: PUSH
15469: LD_INT 14
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: ST_TO_ADDR
15478: GO 16021
15480: LD_INT 25
15482: DOUBLE
15483: EQUAL
15484: IFTRUE 15488
15486: GO 15506
15488: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15489: LD_ADDR_VAR 0 3
15493: PUSH
15494: LD_INT 13
15496: PUSH
15497: LD_INT 14
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: ST_TO_ADDR
15504: GO 16021
15506: LD_INT 27
15508: DOUBLE
15509: EQUAL
15510: IFTRUE 15514
15512: GO 15532
15514: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
15515: LD_ADDR_VAR 0 3
15519: PUSH
15520: LD_INT 13
15522: PUSH
15523: LD_INT 14
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: ST_TO_ADDR
15530: GO 16021
15532: LD_INT 92
15534: DOUBLE
15535: EQUAL
15536: IFTRUE 15540
15538: GO 15566
15540: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15541: LD_ADDR_VAR 0 3
15545: PUSH
15546: LD_INT 11
15548: PUSH
15549: LD_INT 12
15551: PUSH
15552: LD_INT 13
15554: PUSH
15555: LD_INT 14
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: ST_TO_ADDR
15564: GO 16021
15566: LD_INT 28
15568: DOUBLE
15569: EQUAL
15570: IFTRUE 15574
15572: GO 15592
15574: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15575: LD_ADDR_VAR 0 3
15579: PUSH
15580: LD_INT 13
15582: PUSH
15583: LD_INT 14
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: ST_TO_ADDR
15590: GO 16021
15592: LD_INT 29
15594: DOUBLE
15595: EQUAL
15596: IFTRUE 15600
15598: GO 15618
15600: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15601: LD_ADDR_VAR 0 3
15605: PUSH
15606: LD_INT 13
15608: PUSH
15609: LD_INT 14
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: ST_TO_ADDR
15616: GO 16021
15618: LD_INT 31
15620: DOUBLE
15621: EQUAL
15622: IFTRUE 15626
15624: GO 15644
15626: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15627: LD_ADDR_VAR 0 3
15631: PUSH
15632: LD_INT 13
15634: PUSH
15635: LD_INT 14
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: ST_TO_ADDR
15642: GO 16021
15644: LD_INT 26
15646: DOUBLE
15647: EQUAL
15648: IFTRUE 15652
15650: GO 15670
15652: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15653: LD_ADDR_VAR 0 3
15657: PUSH
15658: LD_INT 13
15660: PUSH
15661: LD_INT 14
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: ST_TO_ADDR
15668: GO 16021
15670: LD_INT 42
15672: DOUBLE
15673: EQUAL
15674: IFTRUE 15678
15676: GO 15704
15678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15679: LD_ADDR_VAR 0 3
15683: PUSH
15684: LD_INT 21
15686: PUSH
15687: LD_INT 22
15689: PUSH
15690: LD_INT 23
15692: PUSH
15693: LD_INT 24
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: ST_TO_ADDR
15702: GO 16021
15704: LD_INT 43
15706: DOUBLE
15707: EQUAL
15708: IFTRUE 15712
15710: GO 15738
15712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15713: LD_ADDR_VAR 0 3
15717: PUSH
15718: LD_INT 21
15720: PUSH
15721: LD_INT 22
15723: PUSH
15724: LD_INT 23
15726: PUSH
15727: LD_INT 24
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: ST_TO_ADDR
15736: GO 16021
15738: LD_INT 44
15740: DOUBLE
15741: EQUAL
15742: IFTRUE 15746
15744: GO 15772
15746: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15747: LD_ADDR_VAR 0 3
15751: PUSH
15752: LD_INT 21
15754: PUSH
15755: LD_INT 22
15757: PUSH
15758: LD_INT 23
15760: PUSH
15761: LD_INT 24
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: ST_TO_ADDR
15770: GO 16021
15772: LD_INT 45
15774: DOUBLE
15775: EQUAL
15776: IFTRUE 15780
15778: GO 15806
15780: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15781: LD_ADDR_VAR 0 3
15785: PUSH
15786: LD_INT 21
15788: PUSH
15789: LD_INT 22
15791: PUSH
15792: LD_INT 23
15794: PUSH
15795: LD_INT 24
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: ST_TO_ADDR
15804: GO 16021
15806: LD_INT 49
15808: DOUBLE
15809: EQUAL
15810: IFTRUE 15814
15812: GO 15840
15814: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15815: LD_ADDR_VAR 0 3
15819: PUSH
15820: LD_INT 21
15822: PUSH
15823: LD_INT 22
15825: PUSH
15826: LD_INT 23
15828: PUSH
15829: LD_INT 24
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: ST_TO_ADDR
15838: GO 16021
15840: LD_INT 51
15842: DOUBLE
15843: EQUAL
15844: IFTRUE 15848
15846: GO 15874
15848: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15849: LD_ADDR_VAR 0 3
15853: PUSH
15854: LD_INT 21
15856: PUSH
15857: LD_INT 22
15859: PUSH
15860: LD_INT 23
15862: PUSH
15863: LD_INT 24
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: ST_TO_ADDR
15872: GO 16021
15874: LD_INT 52
15876: DOUBLE
15877: EQUAL
15878: IFTRUE 15882
15880: GO 15908
15882: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15883: LD_ADDR_VAR 0 3
15887: PUSH
15888: LD_INT 21
15890: PUSH
15891: LD_INT 22
15893: PUSH
15894: LD_INT 23
15896: PUSH
15897: LD_INT 24
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: ST_TO_ADDR
15906: GO 16021
15908: LD_INT 53
15910: DOUBLE
15911: EQUAL
15912: IFTRUE 15916
15914: GO 15934
15916: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15917: LD_ADDR_VAR 0 3
15921: PUSH
15922: LD_INT 23
15924: PUSH
15925: LD_INT 24
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: ST_TO_ADDR
15932: GO 16021
15934: LD_INT 46
15936: DOUBLE
15937: EQUAL
15938: IFTRUE 15942
15940: GO 15960
15942: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15943: LD_ADDR_VAR 0 3
15947: PUSH
15948: LD_INT 23
15950: PUSH
15951: LD_INT 24
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: ST_TO_ADDR
15958: GO 16021
15960: LD_INT 47
15962: DOUBLE
15963: EQUAL
15964: IFTRUE 15968
15966: GO 15986
15968: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15969: LD_ADDR_VAR 0 3
15973: PUSH
15974: LD_INT 23
15976: PUSH
15977: LD_INT 24
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: ST_TO_ADDR
15984: GO 16021
15986: LD_INT 98
15988: DOUBLE
15989: EQUAL
15990: IFTRUE 15994
15992: GO 16020
15994: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15995: LD_ADDR_VAR 0 3
15999: PUSH
16000: LD_INT 21
16002: PUSH
16003: LD_INT 22
16005: PUSH
16006: LD_INT 23
16008: PUSH
16009: LD_INT 24
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: ST_TO_ADDR
16018: GO 16021
16020: POP
// result := ( chassis in result ) ;
16021: LD_ADDR_VAR 0 3
16025: PUSH
16026: LD_VAR 0 1
16030: PUSH
16031: LD_VAR 0 3
16035: IN
16036: ST_TO_ADDR
// end ;
16037: LD_VAR 0 3
16041: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
16042: LD_INT 0
16044: PPUSH
16045: PPUSH
16046: PPUSH
16047: PPUSH
16048: PPUSH
16049: PPUSH
16050: PPUSH
// result := array ;
16051: LD_ADDR_VAR 0 5
16055: PUSH
16056: LD_VAR 0 1
16060: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
16061: LD_VAR 0 1
16065: NOT
16066: IFTRUE 16075
16068: PUSH
16069: LD_VAR 0 2
16073: NOT
16074: OR
16075: IFTRUE 16084
16077: PUSH
16078: LD_VAR 0 3
16082: NOT
16083: OR
16084: IFTRUE 16098
16086: PUSH
16087: LD_VAR 0 2
16091: PUSH
16092: LD_VAR 0 1
16096: GREATER
16097: OR
16098: IFTRUE 16112
16100: PUSH
16101: LD_VAR 0 3
16105: PUSH
16106: LD_VAR 0 1
16110: GREATER
16111: OR
16112: IFFALSE 16116
// exit ;
16114: GO 16412
// if direction then
16116: LD_VAR 0 4
16120: IFFALSE 16184
// begin d := 1 ;
16122: LD_ADDR_VAR 0 9
16126: PUSH
16127: LD_INT 1
16129: ST_TO_ADDR
// if i_from > i_to then
16130: LD_VAR 0 2
16134: PUSH
16135: LD_VAR 0 3
16139: GREATER
16140: IFFALSE 16166
// length := ( array - i_from ) + i_to else
16142: LD_ADDR_VAR 0 11
16146: PUSH
16147: LD_VAR 0 1
16151: PUSH
16152: LD_VAR 0 2
16156: MINUS
16157: PUSH
16158: LD_VAR 0 3
16162: PLUS
16163: ST_TO_ADDR
16164: GO 16182
// length := i_to - i_from ;
16166: LD_ADDR_VAR 0 11
16170: PUSH
16171: LD_VAR 0 3
16175: PUSH
16176: LD_VAR 0 2
16180: MINUS
16181: ST_TO_ADDR
// end else
16182: GO 16245
// begin d := - 1 ;
16184: LD_ADDR_VAR 0 9
16188: PUSH
16189: LD_INT 1
16191: NEG
16192: ST_TO_ADDR
// if i_from > i_to then
16193: LD_VAR 0 2
16197: PUSH
16198: LD_VAR 0 3
16202: GREATER
16203: IFFALSE 16223
// length := i_from - i_to else
16205: LD_ADDR_VAR 0 11
16209: PUSH
16210: LD_VAR 0 2
16214: PUSH
16215: LD_VAR 0 3
16219: MINUS
16220: ST_TO_ADDR
16221: GO 16245
// length := ( array - i_to ) + i_from ;
16223: LD_ADDR_VAR 0 11
16227: PUSH
16228: LD_VAR 0 1
16232: PUSH
16233: LD_VAR 0 3
16237: MINUS
16238: PUSH
16239: LD_VAR 0 2
16243: PLUS
16244: ST_TO_ADDR
// end ; if not length then
16245: LD_VAR 0 11
16249: NOT
16250: IFFALSE 16254
// exit ;
16252: GO 16412
// tmp := array ;
16254: LD_ADDR_VAR 0 10
16258: PUSH
16259: LD_VAR 0 1
16263: ST_TO_ADDR
// for i = 1 to length do
16264: LD_ADDR_VAR 0 6
16268: PUSH
16269: DOUBLE
16270: LD_INT 1
16272: DEC
16273: ST_TO_ADDR
16274: LD_VAR 0 11
16278: PUSH
16279: FOR_TO
16280: IFFALSE 16400
// begin for j = 1 to array do
16282: LD_ADDR_VAR 0 7
16286: PUSH
16287: DOUBLE
16288: LD_INT 1
16290: DEC
16291: ST_TO_ADDR
16292: LD_VAR 0 1
16296: PUSH
16297: FOR_TO
16298: IFFALSE 16386
// begin k := j + d ;
16300: LD_ADDR_VAR 0 8
16304: PUSH
16305: LD_VAR 0 7
16309: PUSH
16310: LD_VAR 0 9
16314: PLUS
16315: ST_TO_ADDR
// if k > array then
16316: LD_VAR 0 8
16320: PUSH
16321: LD_VAR 0 1
16325: GREATER
16326: IFFALSE 16336
// k := 1 ;
16328: LD_ADDR_VAR 0 8
16332: PUSH
16333: LD_INT 1
16335: ST_TO_ADDR
// if not k then
16336: LD_VAR 0 8
16340: NOT
16341: IFFALSE 16353
// k := array ;
16343: LD_ADDR_VAR 0 8
16347: PUSH
16348: LD_VAR 0 1
16352: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16353: LD_ADDR_VAR 0 10
16357: PUSH
16358: LD_VAR 0 10
16362: PPUSH
16363: LD_VAR 0 8
16367: PPUSH
16368: LD_VAR 0 1
16372: PUSH
16373: LD_VAR 0 7
16377: ARRAY
16378: PPUSH
16379: CALL_OW 1
16383: ST_TO_ADDR
// end ;
16384: GO 16297
16386: POP
16387: POP
// array := tmp ;
16388: LD_ADDR_VAR 0 1
16392: PUSH
16393: LD_VAR 0 10
16397: ST_TO_ADDR
// end ;
16398: GO 16279
16400: POP
16401: POP
// result := array ;
16402: LD_ADDR_VAR 0 5
16406: PUSH
16407: LD_VAR 0 1
16411: ST_TO_ADDR
// end ;
16412: LD_VAR 0 5
16416: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16417: LD_INT 0
16419: PPUSH
16420: PPUSH
// result := 0 ;
16421: LD_ADDR_VAR 0 3
16425: PUSH
16426: LD_INT 0
16428: ST_TO_ADDR
// if not array or not value in array then
16429: LD_VAR 0 1
16433: NOT
16434: IFTRUE 16449
16436: PUSH
16437: LD_VAR 0 2
16441: PUSH
16442: LD_VAR 0 1
16446: IN
16447: NOT
16448: OR
16449: IFFALSE 16453
// exit ;
16451: GO 16507
// for i = 1 to array do
16453: LD_ADDR_VAR 0 4
16457: PUSH
16458: DOUBLE
16459: LD_INT 1
16461: DEC
16462: ST_TO_ADDR
16463: LD_VAR 0 1
16467: PUSH
16468: FOR_TO
16469: IFFALSE 16505
// if value = array [ i ] then
16471: LD_VAR 0 2
16475: PUSH
16476: LD_VAR 0 1
16480: PUSH
16481: LD_VAR 0 4
16485: ARRAY
16486: EQUAL
16487: IFFALSE 16503
// begin result := i ;
16489: LD_ADDR_VAR 0 3
16493: PUSH
16494: LD_VAR 0 4
16498: ST_TO_ADDR
// exit ;
16499: POP
16500: POP
16501: GO 16507
// end ;
16503: GO 16468
16505: POP
16506: POP
// end ;
16507: LD_VAR 0 3
16511: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16512: LD_INT 0
16514: PPUSH
// vc_chassis := chassis ;
16515: LD_ADDR_OWVAR 37
16519: PUSH
16520: LD_VAR 0 1
16524: ST_TO_ADDR
// vc_engine := engine ;
16525: LD_ADDR_OWVAR 39
16529: PUSH
16530: LD_VAR 0 2
16534: ST_TO_ADDR
// vc_control := control ;
16535: LD_ADDR_OWVAR 38
16539: PUSH
16540: LD_VAR 0 3
16544: ST_TO_ADDR
// vc_weapon := weapon ;
16545: LD_ADDR_OWVAR 40
16549: PUSH
16550: LD_VAR 0 4
16554: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16555: LD_ADDR_OWVAR 41
16559: PUSH
16560: LD_VAR 0 5
16564: ST_TO_ADDR
// end ;
16565: LD_VAR 0 6
16569: RET
// export function WantPlant ( unit ) ; var task ; begin
16570: LD_INT 0
16572: PPUSH
16573: PPUSH
// result := false ;
16574: LD_ADDR_VAR 0 2
16578: PUSH
16579: LD_INT 0
16581: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16582: LD_ADDR_VAR 0 3
16586: PUSH
16587: LD_VAR 0 1
16591: PPUSH
16592: CALL_OW 437
16596: ST_TO_ADDR
// if task then
16597: LD_VAR 0 3
16601: IFFALSE 16629
// if task [ 1 ] [ 1 ] = p then
16603: LD_VAR 0 3
16607: PUSH
16608: LD_INT 1
16610: ARRAY
16611: PUSH
16612: LD_INT 1
16614: ARRAY
16615: PUSH
16616: LD_STRING p
16618: EQUAL
16619: IFFALSE 16629
// result := true ;
16621: LD_ADDR_VAR 0 2
16625: PUSH
16626: LD_INT 1
16628: ST_TO_ADDR
// end ;
16629: LD_VAR 0 2
16633: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16634: LD_INT 0
16636: PPUSH
16637: PPUSH
16638: PPUSH
16639: PPUSH
// if pos < 1 then
16640: LD_VAR 0 2
16644: PUSH
16645: LD_INT 1
16647: LESS
16648: IFFALSE 16652
// exit ;
16650: GO 16955
// if pos = 1 then
16652: LD_VAR 0 2
16656: PUSH
16657: LD_INT 1
16659: EQUAL
16660: IFFALSE 16693
// result := Replace ( arr , pos [ 1 ] , value ) else
16662: LD_ADDR_VAR 0 4
16666: PUSH
16667: LD_VAR 0 1
16671: PPUSH
16672: LD_VAR 0 2
16676: PUSH
16677: LD_INT 1
16679: ARRAY
16680: PPUSH
16681: LD_VAR 0 3
16685: PPUSH
16686: CALL_OW 1
16690: ST_TO_ADDR
16691: GO 16955
// begin tmp := arr ;
16693: LD_ADDR_VAR 0 6
16697: PUSH
16698: LD_VAR 0 1
16702: ST_TO_ADDR
// s_arr := [ tmp ] ;
16703: LD_ADDR_VAR 0 7
16707: PUSH
16708: LD_VAR 0 6
16712: PUSH
16713: EMPTY
16714: LIST
16715: ST_TO_ADDR
// for i = 1 to pos - 1 do
16716: LD_ADDR_VAR 0 5
16720: PUSH
16721: DOUBLE
16722: LD_INT 1
16724: DEC
16725: ST_TO_ADDR
16726: LD_VAR 0 2
16730: PUSH
16731: LD_INT 1
16733: MINUS
16734: PUSH
16735: FOR_TO
16736: IFFALSE 16781
// begin tmp := tmp [ pos [ i ] ] ;
16738: LD_ADDR_VAR 0 6
16742: PUSH
16743: LD_VAR 0 6
16747: PUSH
16748: LD_VAR 0 2
16752: PUSH
16753: LD_VAR 0 5
16757: ARRAY
16758: ARRAY
16759: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16760: LD_ADDR_VAR 0 7
16764: PUSH
16765: LD_VAR 0 7
16769: PUSH
16770: LD_VAR 0 6
16774: PUSH
16775: EMPTY
16776: LIST
16777: ADD
16778: ST_TO_ADDR
// end ;
16779: GO 16735
16781: POP
16782: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16783: LD_ADDR_VAR 0 6
16787: PUSH
16788: LD_VAR 0 6
16792: PPUSH
16793: LD_VAR 0 2
16797: PUSH
16798: LD_VAR 0 2
16802: ARRAY
16803: PPUSH
16804: LD_VAR 0 3
16808: PPUSH
16809: CALL_OW 1
16813: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16814: LD_ADDR_VAR 0 7
16818: PUSH
16819: LD_VAR 0 7
16823: PPUSH
16824: LD_VAR 0 7
16828: PPUSH
16829: LD_VAR 0 6
16833: PPUSH
16834: CALL_OW 1
16838: ST_TO_ADDR
// for i = s_arr downto 2 do
16839: LD_ADDR_VAR 0 5
16843: PUSH
16844: DOUBLE
16845: LD_VAR 0 7
16849: INC
16850: ST_TO_ADDR
16851: LD_INT 2
16853: PUSH
16854: FOR_DOWNTO
16855: IFFALSE 16939
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16857: LD_ADDR_VAR 0 6
16861: PUSH
16862: LD_VAR 0 7
16866: PUSH
16867: LD_VAR 0 5
16871: PUSH
16872: LD_INT 1
16874: MINUS
16875: ARRAY
16876: PPUSH
16877: LD_VAR 0 2
16881: PUSH
16882: LD_VAR 0 5
16886: PUSH
16887: LD_INT 1
16889: MINUS
16890: ARRAY
16891: PPUSH
16892: LD_VAR 0 7
16896: PUSH
16897: LD_VAR 0 5
16901: ARRAY
16902: PPUSH
16903: CALL_OW 1
16907: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16908: LD_ADDR_VAR 0 7
16912: PUSH
16913: LD_VAR 0 7
16917: PPUSH
16918: LD_VAR 0 5
16922: PUSH
16923: LD_INT 1
16925: MINUS
16926: PPUSH
16927: LD_VAR 0 6
16931: PPUSH
16932: CALL_OW 1
16936: ST_TO_ADDR
// end ;
16937: GO 16854
16939: POP
16940: POP
// result := s_arr [ 1 ] ;
16941: LD_ADDR_VAR 0 4
16945: PUSH
16946: LD_VAR 0 7
16950: PUSH
16951: LD_INT 1
16953: ARRAY
16954: ST_TO_ADDR
// end ; end ;
16955: LD_VAR 0 4
16959: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16960: LD_INT 0
16962: PPUSH
16963: PPUSH
// if not list then
16964: LD_VAR 0 1
16968: NOT
16969: IFFALSE 16973
// exit ;
16971: GO 17064
// i := list [ pos1 ] ;
16973: LD_ADDR_VAR 0 5
16977: PUSH
16978: LD_VAR 0 1
16982: PUSH
16983: LD_VAR 0 2
16987: ARRAY
16988: ST_TO_ADDR
// if not i then
16989: LD_VAR 0 5
16993: NOT
16994: IFFALSE 16998
// exit ;
16996: GO 17064
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16998: LD_ADDR_VAR 0 1
17002: PUSH
17003: LD_VAR 0 1
17007: PPUSH
17008: LD_VAR 0 2
17012: PPUSH
17013: LD_VAR 0 1
17017: PUSH
17018: LD_VAR 0 3
17022: ARRAY
17023: PPUSH
17024: CALL_OW 1
17028: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
17029: LD_ADDR_VAR 0 1
17033: PUSH
17034: LD_VAR 0 1
17038: PPUSH
17039: LD_VAR 0 3
17043: PPUSH
17044: LD_VAR 0 5
17048: PPUSH
17049: CALL_OW 1
17053: ST_TO_ADDR
// result := list ;
17054: LD_ADDR_VAR 0 4
17058: PUSH
17059: LD_VAR 0 1
17063: ST_TO_ADDR
// end ;
17064: LD_VAR 0 4
17068: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
17069: LD_INT 0
17071: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
17072: LD_ADDR_VAR 0 5
17076: PUSH
17077: LD_VAR 0 1
17081: PPUSH
17082: CALL_OW 250
17086: PPUSH
17087: LD_VAR 0 1
17091: PPUSH
17092: CALL_OW 251
17096: PPUSH
17097: LD_VAR 0 2
17101: PPUSH
17102: LD_VAR 0 3
17106: PPUSH
17107: LD_VAR 0 4
17111: PPUSH
17112: CALL 17494 0 5
17116: ST_TO_ADDR
// end ;
17117: LD_VAR 0 5
17121: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
17122: LD_INT 0
17124: PPUSH
17125: PPUSH
17126: PPUSH
17127: PPUSH
// if not list or not unit then
17128: LD_VAR 0 2
17132: NOT
17133: IFTRUE 17142
17135: PUSH
17136: LD_VAR 0 1
17140: NOT
17141: OR
17142: IFFALSE 17146
// exit ;
17144: GO 17489
// result := [ ] ;
17146: LD_ADDR_VAR 0 5
17150: PUSH
17151: EMPTY
17152: ST_TO_ADDR
// for i in list do
17153: LD_ADDR_VAR 0 6
17157: PUSH
17158: LD_VAR 0 2
17162: PUSH
17163: FOR_IN
17164: IFFALSE 17382
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
17166: LD_ADDR_VAR 0 8
17170: PUSH
17171: LD_VAR 0 1
17175: PPUSH
17176: LD_VAR 0 6
17180: PUSH
17181: LD_INT 1
17183: ARRAY
17184: PPUSH
17185: LD_VAR 0 6
17189: PUSH
17190: LD_INT 2
17192: ARRAY
17193: PPUSH
17194: CALL_OW 297
17198: ST_TO_ADDR
// if not Count ( result ) then
17199: LD_VAR 0 5
17203: PPUSH
17204: CALL 13716 0 1
17208: NOT
17209: IFFALSE 17242
// begin result := Join ( result , [ i , tmp ] ) ;
17211: LD_ADDR_VAR 0 5
17215: PUSH
17216: LD_VAR 0 5
17220: PPUSH
17221: LD_VAR 0 6
17225: PUSH
17226: LD_VAR 0 8
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PPUSH
17235: CALL 49692 0 2
17239: ST_TO_ADDR
// continue ;
17240: GO 17163
// end ; if result [ result ] [ 2 ] <= tmp then
17242: LD_VAR 0 5
17246: PUSH
17247: LD_VAR 0 5
17251: ARRAY
17252: PUSH
17253: LD_INT 2
17255: ARRAY
17256: PUSH
17257: LD_VAR 0 8
17261: LESSEQUAL
17262: IFFALSE 17295
// result := Join ( result , [ i , tmp ] ) else
17264: LD_ADDR_VAR 0 5
17268: PUSH
17269: LD_VAR 0 5
17273: PPUSH
17274: LD_VAR 0 6
17278: PUSH
17279: LD_VAR 0 8
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PPUSH
17288: CALL 49692 0 2
17292: ST_TO_ADDR
17293: GO 17380
// begin for j := 1 to Count ( result ) do
17295: LD_ADDR_VAR 0 7
17299: PUSH
17300: DOUBLE
17301: LD_INT 1
17303: DEC
17304: ST_TO_ADDR
17305: LD_VAR 0 5
17309: PPUSH
17310: CALL 13716 0 1
17314: PUSH
17315: FOR_TO
17316: IFFALSE 17378
// begin if tmp < result [ j ] [ 2 ] then
17318: LD_VAR 0 8
17322: PUSH
17323: LD_VAR 0 5
17327: PUSH
17328: LD_VAR 0 7
17332: ARRAY
17333: PUSH
17334: LD_INT 2
17336: ARRAY
17337: LESS
17338: IFFALSE 17376
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17340: LD_ADDR_VAR 0 5
17344: PUSH
17345: LD_VAR 0 5
17349: PPUSH
17350: LD_VAR 0 7
17354: PPUSH
17355: LD_VAR 0 6
17359: PUSH
17360: LD_VAR 0 8
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL_OW 2
17373: ST_TO_ADDR
// break ;
17374: GO 17378
// end ; end ;
17376: GO 17315
17378: POP
17379: POP
// end ; end ;
17380: GO 17163
17382: POP
17383: POP
// if result and not asc then
17384: LD_VAR 0 5
17388: IFFALSE 17397
17390: PUSH
17391: LD_VAR 0 3
17395: NOT
17396: AND
17397: IFFALSE 17414
// result := ReverseArray ( result ) ;
17399: LD_ADDR_VAR 0 5
17403: PUSH
17404: LD_VAR 0 5
17408: PPUSH
17409: CALL 44772 0 1
17413: ST_TO_ADDR
// tmp := [ ] ;
17414: LD_ADDR_VAR 0 8
17418: PUSH
17419: EMPTY
17420: ST_TO_ADDR
// if mode then
17421: LD_VAR 0 4
17425: IFFALSE 17489
// begin for i := 1 to result do
17427: LD_ADDR_VAR 0 6
17431: PUSH
17432: DOUBLE
17433: LD_INT 1
17435: DEC
17436: ST_TO_ADDR
17437: LD_VAR 0 5
17441: PUSH
17442: FOR_TO
17443: IFFALSE 17477
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
17445: LD_ADDR_VAR 0 8
17449: PUSH
17450: LD_VAR 0 8
17454: PPUSH
17455: LD_VAR 0 5
17459: PUSH
17460: LD_VAR 0 6
17464: ARRAY
17465: PUSH
17466: LD_INT 1
17468: ARRAY
17469: PPUSH
17470: CALL 49692 0 2
17474: ST_TO_ADDR
17475: GO 17442
17477: POP
17478: POP
// result := tmp ;
17479: LD_ADDR_VAR 0 5
17483: PUSH
17484: LD_VAR 0 8
17488: ST_TO_ADDR
// end ; end ;
17489: LD_VAR 0 5
17493: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17494: LD_INT 0
17496: PPUSH
17497: PPUSH
17498: PPUSH
17499: PPUSH
// if not list then
17500: LD_VAR 0 3
17504: NOT
17505: IFFALSE 17509
// exit ;
17507: GO 17899
// result := [ ] ;
17509: LD_ADDR_VAR 0 6
17513: PUSH
17514: EMPTY
17515: ST_TO_ADDR
// for i in list do
17516: LD_ADDR_VAR 0 7
17520: PUSH
17521: LD_VAR 0 3
17525: PUSH
17526: FOR_IN
17527: IFFALSE 17729
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17529: LD_ADDR_VAR 0 9
17533: PUSH
17534: LD_VAR 0 7
17538: PPUSH
17539: LD_VAR 0 1
17543: PPUSH
17544: LD_VAR 0 2
17548: PPUSH
17549: CALL_OW 297
17553: ST_TO_ADDR
// if not result then
17554: LD_VAR 0 6
17558: NOT
17559: IFFALSE 17585
// result := [ [ i , tmp ] ] else
17561: LD_ADDR_VAR 0 6
17565: PUSH
17566: LD_VAR 0 7
17570: PUSH
17571: LD_VAR 0 9
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: EMPTY
17581: LIST
17582: ST_TO_ADDR
17583: GO 17727
// begin if result [ result ] [ 2 ] <= tmp then
17585: LD_VAR 0 6
17589: PUSH
17590: LD_VAR 0 6
17594: ARRAY
17595: PUSH
17596: LD_INT 2
17598: ARRAY
17599: PUSH
17600: LD_VAR 0 9
17604: LESSEQUAL
17605: IFFALSE 17647
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17607: LD_ADDR_VAR 0 6
17611: PUSH
17612: LD_VAR 0 6
17616: PPUSH
17617: LD_VAR 0 6
17621: PUSH
17622: LD_INT 1
17624: PLUS
17625: PPUSH
17626: LD_VAR 0 7
17630: PUSH
17631: LD_VAR 0 9
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PPUSH
17640: CALL_OW 2
17644: ST_TO_ADDR
17645: GO 17727
// for j := 1 to result do
17647: LD_ADDR_VAR 0 8
17651: PUSH
17652: DOUBLE
17653: LD_INT 1
17655: DEC
17656: ST_TO_ADDR
17657: LD_VAR 0 6
17661: PUSH
17662: FOR_TO
17663: IFFALSE 17725
// begin if tmp < result [ j ] [ 2 ] then
17665: LD_VAR 0 9
17669: PUSH
17670: LD_VAR 0 6
17674: PUSH
17675: LD_VAR 0 8
17679: ARRAY
17680: PUSH
17681: LD_INT 2
17683: ARRAY
17684: LESS
17685: IFFALSE 17723
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17687: LD_ADDR_VAR 0 6
17691: PUSH
17692: LD_VAR 0 6
17696: PPUSH
17697: LD_VAR 0 8
17701: PPUSH
17702: LD_VAR 0 7
17706: PUSH
17707: LD_VAR 0 9
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PPUSH
17716: CALL_OW 2
17720: ST_TO_ADDR
// break ;
17721: GO 17725
// end ; end ;
17723: GO 17662
17725: POP
17726: POP
// end ; end ;
17727: GO 17526
17729: POP
17730: POP
// if result and not asc then
17731: LD_VAR 0 6
17735: IFFALSE 17744
17737: PUSH
17738: LD_VAR 0 4
17742: NOT
17743: AND
17744: IFFALSE 17819
// begin tmp := result ;
17746: LD_ADDR_VAR 0 9
17750: PUSH
17751: LD_VAR 0 6
17755: ST_TO_ADDR
// for i = tmp downto 1 do
17756: LD_ADDR_VAR 0 7
17760: PUSH
17761: DOUBLE
17762: LD_VAR 0 9
17766: INC
17767: ST_TO_ADDR
17768: LD_INT 1
17770: PUSH
17771: FOR_DOWNTO
17772: IFFALSE 17817
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17774: LD_ADDR_VAR 0 6
17778: PUSH
17779: LD_VAR 0 6
17783: PPUSH
17784: LD_VAR 0 9
17788: PUSH
17789: LD_VAR 0 7
17793: MINUS
17794: PUSH
17795: LD_INT 1
17797: PLUS
17798: PPUSH
17799: LD_VAR 0 9
17803: PUSH
17804: LD_VAR 0 7
17808: ARRAY
17809: PPUSH
17810: CALL_OW 1
17814: ST_TO_ADDR
17815: GO 17771
17817: POP
17818: POP
// end ; tmp := [ ] ;
17819: LD_ADDR_VAR 0 9
17823: PUSH
17824: EMPTY
17825: ST_TO_ADDR
// if mode then
17826: LD_VAR 0 5
17830: IFFALSE 17899
// begin for i = 1 to result do
17832: LD_ADDR_VAR 0 7
17836: PUSH
17837: DOUBLE
17838: LD_INT 1
17840: DEC
17841: ST_TO_ADDR
17842: LD_VAR 0 6
17846: PUSH
17847: FOR_TO
17848: IFFALSE 17887
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17850: LD_ADDR_VAR 0 9
17854: PUSH
17855: LD_VAR 0 9
17859: PPUSH
17860: LD_VAR 0 7
17864: PPUSH
17865: LD_VAR 0 6
17869: PUSH
17870: LD_VAR 0 7
17874: ARRAY
17875: PUSH
17876: LD_INT 1
17878: ARRAY
17879: PPUSH
17880: CALL_OW 1
17884: ST_TO_ADDR
17885: GO 17847
17887: POP
17888: POP
// result := tmp ;
17889: LD_ADDR_VAR 0 6
17893: PUSH
17894: LD_VAR 0 9
17898: ST_TO_ADDR
// end ; end ;
17899: LD_VAR 0 6
17903: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17904: LD_INT 0
17906: PPUSH
17907: PPUSH
17908: PPUSH
17909: PPUSH
17910: PPUSH
17911: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17912: LD_ADDR_VAR 0 5
17916: PUSH
17917: LD_INT 0
17919: PUSH
17920: LD_INT 0
17922: PUSH
17923: LD_INT 0
17925: PUSH
17926: EMPTY
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: ST_TO_ADDR
// if not x or not y then
17934: LD_VAR 0 2
17938: NOT
17939: IFTRUE 17948
17941: PUSH
17942: LD_VAR 0 3
17946: NOT
17947: OR
17948: IFFALSE 17952
// exit ;
17950: GO 19608
// if not range then
17952: LD_VAR 0 4
17956: NOT
17957: IFFALSE 17967
// range := 10 ;
17959: LD_ADDR_VAR 0 4
17963: PUSH
17964: LD_INT 10
17966: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17967: LD_ADDR_VAR 0 8
17971: PUSH
17972: LD_INT 81
17974: PUSH
17975: LD_VAR 0 1
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 92
17986: PUSH
17987: LD_VAR 0 2
17991: PUSH
17992: LD_VAR 0 3
17996: PUSH
17997: LD_VAR 0 4
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 3
18010: PUSH
18011: LD_INT 21
18013: PUSH
18014: LD_INT 3
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: LIST
18029: PPUSH
18030: CALL_OW 69
18034: ST_TO_ADDR
// if not tmp then
18035: LD_VAR 0 8
18039: NOT
18040: IFFALSE 18044
// exit ;
18042: GO 19608
// for i in tmp do
18044: LD_ADDR_VAR 0 6
18048: PUSH
18049: LD_VAR 0 8
18053: PUSH
18054: FOR_IN
18055: IFFALSE 19583
// begin points := [ 0 , 0 , 0 ] ;
18057: LD_ADDR_VAR 0 9
18061: PUSH
18062: LD_INT 0
18064: PUSH
18065: LD_INT 0
18067: PUSH
18068: LD_INT 0
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: LIST
18075: ST_TO_ADDR
// bpoints := 1 ;
18076: LD_ADDR_VAR 0 10
18080: PUSH
18081: LD_INT 1
18083: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18084: LD_VAR 0 6
18088: PPUSH
18089: CALL_OW 247
18093: PUSH
18094: LD_INT 1
18096: DOUBLE
18097: EQUAL
18098: IFTRUE 18102
18100: GO 18684
18102: POP
// begin if GetClass ( i ) = 1 then
18103: LD_VAR 0 6
18107: PPUSH
18108: CALL_OW 257
18112: PUSH
18113: LD_INT 1
18115: EQUAL
18116: IFFALSE 18137
// points := [ 10 , 5 , 3 ] ;
18118: LD_ADDR_VAR 0 9
18122: PUSH
18123: LD_INT 10
18125: PUSH
18126: LD_INT 5
18128: PUSH
18129: LD_INT 3
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: LIST
18136: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18137: LD_VAR 0 6
18141: PPUSH
18142: CALL_OW 257
18146: PUSH
18147: LD_INT 2
18149: PUSH
18150: LD_INT 3
18152: PUSH
18153: LD_INT 4
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: IN
18161: IFFALSE 18182
// points := [ 3 , 2 , 1 ] ;
18163: LD_ADDR_VAR 0 9
18167: PUSH
18168: LD_INT 3
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: LD_INT 1
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: LIST
18181: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18182: LD_VAR 0 6
18186: PPUSH
18187: CALL_OW 257
18191: PUSH
18192: LD_INT 5
18194: EQUAL
18195: IFFALSE 18216
// points := [ 130 , 5 , 2 ] ;
18197: LD_ADDR_VAR 0 9
18201: PUSH
18202: LD_INT 130
18204: PUSH
18205: LD_INT 5
18207: PUSH
18208: LD_INT 2
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18216: LD_VAR 0 6
18220: PPUSH
18221: CALL_OW 257
18225: PUSH
18226: LD_INT 8
18228: EQUAL
18229: IFFALSE 18250
// points := [ 35 , 35 , 30 ] ;
18231: LD_ADDR_VAR 0 9
18235: PUSH
18236: LD_INT 35
18238: PUSH
18239: LD_INT 35
18241: PUSH
18242: LD_INT 30
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: LIST
18249: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18250: LD_VAR 0 6
18254: PPUSH
18255: CALL_OW 257
18259: PUSH
18260: LD_INT 9
18262: EQUAL
18263: IFFALSE 18284
// points := [ 20 , 55 , 40 ] ;
18265: LD_ADDR_VAR 0 9
18269: PUSH
18270: LD_INT 20
18272: PUSH
18273: LD_INT 55
18275: PUSH
18276: LD_INT 40
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: LIST
18283: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18284: LD_VAR 0 6
18288: PPUSH
18289: CALL_OW 257
18293: PUSH
18294: LD_INT 12
18296: PUSH
18297: LD_INT 16
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: IN
18304: IFFALSE 18325
// points := [ 5 , 3 , 2 ] ;
18306: LD_ADDR_VAR 0 9
18310: PUSH
18311: LD_INT 5
18313: PUSH
18314: LD_INT 3
18316: PUSH
18317: LD_INT 2
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: LIST
18324: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18325: LD_VAR 0 6
18329: PPUSH
18330: CALL_OW 257
18334: PUSH
18335: LD_INT 17
18337: EQUAL
18338: IFFALSE 18359
// points := [ 100 , 50 , 75 ] ;
18340: LD_ADDR_VAR 0 9
18344: PUSH
18345: LD_INT 100
18347: PUSH
18348: LD_INT 50
18350: PUSH
18351: LD_INT 75
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: LIST
18358: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18359: LD_VAR 0 6
18363: PPUSH
18364: CALL_OW 257
18368: PUSH
18369: LD_INT 15
18371: EQUAL
18372: IFFALSE 18393
// points := [ 10 , 5 , 3 ] ;
18374: LD_ADDR_VAR 0 9
18378: PUSH
18379: LD_INT 10
18381: PUSH
18382: LD_INT 5
18384: PUSH
18385: LD_INT 3
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: LIST
18392: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18393: LD_VAR 0 6
18397: PPUSH
18398: CALL_OW 257
18402: PUSH
18403: LD_INT 14
18405: EQUAL
18406: IFFALSE 18427
// points := [ 10 , 0 , 0 ] ;
18408: LD_ADDR_VAR 0 9
18412: PUSH
18413: LD_INT 10
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: LD_INT 0
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18427: LD_VAR 0 6
18431: PPUSH
18432: CALL_OW 257
18436: PUSH
18437: LD_INT 11
18439: EQUAL
18440: IFFALSE 18461
// points := [ 30 , 10 , 5 ] ;
18442: LD_ADDR_VAR 0 9
18446: PUSH
18447: LD_INT 30
18449: PUSH
18450: LD_INT 10
18452: PUSH
18453: LD_INT 5
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: LIST
18460: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18461: LD_VAR 0 1
18465: PPUSH
18466: LD_INT 5
18468: PPUSH
18469: CALL_OW 321
18473: PUSH
18474: LD_INT 2
18476: EQUAL
18477: IFFALSE 18494
// bpoints := bpoints * 1.8 ;
18479: LD_ADDR_VAR 0 10
18483: PUSH
18484: LD_VAR 0 10
18488: PUSH
18489: LD_REAL  1.80000000000000E+0000
18492: MUL
18493: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18494: LD_VAR 0 6
18498: PPUSH
18499: CALL_OW 257
18503: PUSH
18504: LD_INT 1
18506: PUSH
18507: LD_INT 2
18509: PUSH
18510: LD_INT 3
18512: PUSH
18513: LD_INT 4
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: IN
18522: IFFALSE 18542
18524: PUSH
18525: LD_VAR 0 1
18529: PPUSH
18530: LD_INT 51
18532: PPUSH
18533: CALL_OW 321
18537: PUSH
18538: LD_INT 2
18540: EQUAL
18541: AND
18542: IFFALSE 18559
// bpoints := bpoints * 1.2 ;
18544: LD_ADDR_VAR 0 10
18548: PUSH
18549: LD_VAR 0 10
18553: PUSH
18554: LD_REAL  1.20000000000000E+0000
18557: MUL
18558: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18559: LD_VAR 0 6
18563: PPUSH
18564: CALL_OW 257
18568: PUSH
18569: LD_INT 5
18571: PUSH
18572: LD_INT 7
18574: PUSH
18575: LD_INT 9
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: IN
18583: IFFALSE 18603
18585: PUSH
18586: LD_VAR 0 1
18590: PPUSH
18591: LD_INT 52
18593: PPUSH
18594: CALL_OW 321
18598: PUSH
18599: LD_INT 2
18601: EQUAL
18602: AND
18603: IFFALSE 18620
// bpoints := bpoints * 1.5 ;
18605: LD_ADDR_VAR 0 10
18609: PUSH
18610: LD_VAR 0 10
18614: PUSH
18615: LD_REAL  1.50000000000000E+0000
18618: MUL
18619: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18620: LD_VAR 0 1
18624: PPUSH
18625: LD_INT 66
18627: PPUSH
18628: CALL_OW 321
18632: PUSH
18633: LD_INT 2
18635: EQUAL
18636: IFFALSE 18653
// bpoints := bpoints * 1.1 ;
18638: LD_ADDR_VAR 0 10
18642: PUSH
18643: LD_VAR 0 10
18647: PUSH
18648: LD_REAL  1.10000000000000E+0000
18651: MUL
18652: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18653: LD_ADDR_VAR 0 10
18657: PUSH
18658: LD_VAR 0 10
18662: PUSH
18663: LD_VAR 0 6
18667: PPUSH
18668: LD_INT 1
18670: PPUSH
18671: CALL_OW 259
18675: PUSH
18676: LD_REAL  1.15000000000000E+0000
18679: MUL
18680: MUL
18681: ST_TO_ADDR
// end ; unit_vehicle :
18682: GO 19512
18684: LD_INT 2
18686: DOUBLE
18687: EQUAL
18688: IFTRUE 18692
18690: GO 19500
18692: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18693: LD_VAR 0 6
18697: PPUSH
18698: CALL_OW 264
18702: PUSH
18703: LD_INT 2
18705: PUSH
18706: LD_INT 42
18708: PUSH
18709: LD_INT 24
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: IN
18717: IFFALSE 18738
// points := [ 25 , 5 , 3 ] ;
18719: LD_ADDR_VAR 0 9
18723: PUSH
18724: LD_INT 25
18726: PUSH
18727: LD_INT 5
18729: PUSH
18730: LD_INT 3
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: LIST
18737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18738: LD_VAR 0 6
18742: PPUSH
18743: CALL_OW 264
18747: PUSH
18748: LD_INT 4
18750: PUSH
18751: LD_INT 43
18753: PUSH
18754: LD_INT 25
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: LIST
18761: IN
18762: IFFALSE 18783
// points := [ 40 , 15 , 5 ] ;
18764: LD_ADDR_VAR 0 9
18768: PUSH
18769: LD_INT 40
18771: PUSH
18772: LD_INT 15
18774: PUSH
18775: LD_INT 5
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: LIST
18782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18783: LD_VAR 0 6
18787: PPUSH
18788: CALL_OW 264
18792: PUSH
18793: LD_INT 3
18795: PUSH
18796: LD_INT 23
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: IN
18803: IFFALSE 18824
// points := [ 7 , 25 , 8 ] ;
18805: LD_ADDR_VAR 0 9
18809: PUSH
18810: LD_INT 7
18812: PUSH
18813: LD_INT 25
18815: PUSH
18816: LD_INT 8
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: LIST
18823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18824: LD_VAR 0 6
18828: PPUSH
18829: CALL_OW 264
18833: PUSH
18834: LD_INT 5
18836: PUSH
18837: LD_INT 27
18839: PUSH
18840: LD_INT 44
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: LIST
18847: IN
18848: IFFALSE 18869
// points := [ 14 , 50 , 16 ] ;
18850: LD_ADDR_VAR 0 9
18854: PUSH
18855: LD_INT 14
18857: PUSH
18858: LD_INT 50
18860: PUSH
18861: LD_INT 16
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: LIST
18868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18869: LD_VAR 0 6
18873: PPUSH
18874: CALL_OW 264
18878: PUSH
18879: LD_INT 6
18881: PUSH
18882: LD_INT 46
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: IN
18889: IFFALSE 18910
// points := [ 32 , 120 , 70 ] ;
18891: LD_ADDR_VAR 0 9
18895: PUSH
18896: LD_INT 32
18898: PUSH
18899: LD_INT 120
18901: PUSH
18902: LD_INT 70
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: LIST
18909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18910: LD_VAR 0 6
18914: PPUSH
18915: CALL_OW 264
18919: PUSH
18920: LD_INT 7
18922: PUSH
18923: LD_INT 28
18925: PUSH
18926: LD_INT 45
18928: PUSH
18929: LD_INT 92
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: IN
18938: IFFALSE 18959
// points := [ 35 , 20 , 45 ] ;
18940: LD_ADDR_VAR 0 9
18944: PUSH
18945: LD_INT 35
18947: PUSH
18948: LD_INT 20
18950: PUSH
18951: LD_INT 45
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: LIST
18958: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18959: LD_VAR 0 6
18963: PPUSH
18964: CALL_OW 264
18968: PUSH
18969: LD_INT 47
18971: PUSH
18972: EMPTY
18973: LIST
18974: IN
18975: IFFALSE 18996
// points := [ 67 , 45 , 75 ] ;
18977: LD_ADDR_VAR 0 9
18981: PUSH
18982: LD_INT 67
18984: PUSH
18985: LD_INT 45
18987: PUSH
18988: LD_INT 75
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: LIST
18995: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18996: LD_VAR 0 6
19000: PPUSH
19001: CALL_OW 264
19005: PUSH
19006: LD_INT 26
19008: PUSH
19009: EMPTY
19010: LIST
19011: IN
19012: IFFALSE 19033
// points := [ 120 , 30 , 80 ] ;
19014: LD_ADDR_VAR 0 9
19018: PUSH
19019: LD_INT 120
19021: PUSH
19022: LD_INT 30
19024: PUSH
19025: LD_INT 80
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: LIST
19032: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19033: LD_VAR 0 6
19037: PPUSH
19038: CALL_OW 264
19042: PUSH
19043: LD_INT 22
19045: PUSH
19046: EMPTY
19047: LIST
19048: IN
19049: IFFALSE 19070
// points := [ 40 , 1 , 1 ] ;
19051: LD_ADDR_VAR 0 9
19055: PUSH
19056: LD_INT 40
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: LD_INT 1
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: LIST
19069: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19070: LD_VAR 0 6
19074: PPUSH
19075: CALL_OW 264
19079: PUSH
19080: LD_INT 29
19082: PUSH
19083: EMPTY
19084: LIST
19085: IN
19086: IFFALSE 19107
// points := [ 70 , 200 , 400 ] ;
19088: LD_ADDR_VAR 0 9
19092: PUSH
19093: LD_INT 70
19095: PUSH
19096: LD_INT 200
19098: PUSH
19099: LD_INT 400
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: LIST
19106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19107: LD_VAR 0 6
19111: PPUSH
19112: CALL_OW 264
19116: PUSH
19117: LD_INT 14
19119: PUSH
19120: LD_INT 53
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: IN
19127: IFFALSE 19148
// points := [ 40 , 10 , 20 ] ;
19129: LD_ADDR_VAR 0 9
19133: PUSH
19134: LD_INT 40
19136: PUSH
19137: LD_INT 10
19139: PUSH
19140: LD_INT 20
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: LIST
19147: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19148: LD_VAR 0 6
19152: PPUSH
19153: CALL_OW 264
19157: PUSH
19158: LD_INT 9
19160: PUSH
19161: EMPTY
19162: LIST
19163: IN
19164: IFFALSE 19185
// points := [ 5 , 70 , 20 ] ;
19166: LD_ADDR_VAR 0 9
19170: PUSH
19171: LD_INT 5
19173: PUSH
19174: LD_INT 70
19176: PUSH
19177: LD_INT 20
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: LIST
19184: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19185: LD_VAR 0 6
19189: PPUSH
19190: CALL_OW 264
19194: PUSH
19195: LD_INT 10
19197: PUSH
19198: EMPTY
19199: LIST
19200: IN
19201: IFFALSE 19222
// points := [ 35 , 110 , 70 ] ;
19203: LD_ADDR_VAR 0 9
19207: PUSH
19208: LD_INT 35
19210: PUSH
19211: LD_INT 110
19213: PUSH
19214: LD_INT 70
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: LIST
19221: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19222: LD_VAR 0 6
19226: PPUSH
19227: CALL_OW 265
19231: PUSH
19232: LD_INT 25
19234: EQUAL
19235: IFFALSE 19256
// points := [ 80 , 65 , 100 ] ;
19237: LD_ADDR_VAR 0 9
19241: PUSH
19242: LD_INT 80
19244: PUSH
19245: LD_INT 65
19247: PUSH
19248: LD_INT 100
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: LIST
19255: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19256: LD_VAR 0 6
19260: PPUSH
19261: CALL_OW 263
19265: PUSH
19266: LD_INT 1
19268: EQUAL
19269: IFFALSE 19304
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19271: LD_ADDR_VAR 0 10
19275: PUSH
19276: LD_VAR 0 10
19280: PUSH
19281: LD_VAR 0 6
19285: PPUSH
19286: CALL_OW 311
19290: PPUSH
19291: LD_INT 3
19293: PPUSH
19294: CALL_OW 259
19298: PUSH
19299: LD_INT 4
19301: MUL
19302: MUL
19303: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19304: LD_VAR 0 6
19308: PPUSH
19309: CALL_OW 263
19313: PUSH
19314: LD_INT 2
19316: EQUAL
19317: IFFALSE 19368
// begin j := IsControledBy ( i ) ;
19319: LD_ADDR_VAR 0 7
19323: PUSH
19324: LD_VAR 0 6
19328: PPUSH
19329: CALL_OW 312
19333: ST_TO_ADDR
// if j then
19334: LD_VAR 0 7
19338: IFFALSE 19368
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19340: LD_ADDR_VAR 0 10
19344: PUSH
19345: LD_VAR 0 10
19349: PUSH
19350: LD_VAR 0 7
19354: PPUSH
19355: LD_INT 3
19357: PPUSH
19358: CALL_OW 259
19362: PUSH
19363: LD_INT 3
19365: MUL
19366: MUL
19367: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19368: LD_VAR 0 6
19372: PPUSH
19373: CALL_OW 264
19377: PUSH
19378: LD_INT 5
19380: PUSH
19381: LD_INT 6
19383: PUSH
19384: LD_INT 46
19386: PUSH
19387: LD_INT 44
19389: PUSH
19390: LD_INT 47
19392: PUSH
19393: LD_INT 45
19395: PUSH
19396: LD_INT 28
19398: PUSH
19399: LD_INT 7
19401: PUSH
19402: LD_INT 27
19404: PUSH
19405: LD_INT 29
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: IN
19420: IFFALSE 19440
19422: PUSH
19423: LD_VAR 0 1
19427: PPUSH
19428: LD_INT 52
19430: PPUSH
19431: CALL_OW 321
19435: PUSH
19436: LD_INT 2
19438: EQUAL
19439: AND
19440: IFFALSE 19457
// bpoints := bpoints * 1.2 ;
19442: LD_ADDR_VAR 0 10
19446: PUSH
19447: LD_VAR 0 10
19451: PUSH
19452: LD_REAL  1.20000000000000E+0000
19455: MUL
19456: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19457: LD_VAR 0 6
19461: PPUSH
19462: CALL_OW 264
19466: PUSH
19467: LD_INT 6
19469: PUSH
19470: LD_INT 46
19472: PUSH
19473: LD_INT 47
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: LIST
19480: IN
19481: IFFALSE 19498
// bpoints := bpoints * 1.2 ;
19483: LD_ADDR_VAR 0 10
19487: PUSH
19488: LD_VAR 0 10
19492: PUSH
19493: LD_REAL  1.20000000000000E+0000
19496: MUL
19497: ST_TO_ADDR
// end ; unit_building :
19498: GO 19512
19500: LD_INT 3
19502: DOUBLE
19503: EQUAL
19504: IFTRUE 19508
19506: GO 19511
19508: POP
// ; end ;
19509: GO 19512
19511: POP
// for j = 1 to 3 do
19512: LD_ADDR_VAR 0 7
19516: PUSH
19517: DOUBLE
19518: LD_INT 1
19520: DEC
19521: ST_TO_ADDR
19522: LD_INT 3
19524: PUSH
19525: FOR_TO
19526: IFFALSE 19579
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19528: LD_ADDR_VAR 0 5
19532: PUSH
19533: LD_VAR 0 5
19537: PPUSH
19538: LD_VAR 0 7
19542: PPUSH
19543: LD_VAR 0 5
19547: PUSH
19548: LD_VAR 0 7
19552: ARRAY
19553: PUSH
19554: LD_VAR 0 9
19558: PUSH
19559: LD_VAR 0 7
19563: ARRAY
19564: PUSH
19565: LD_VAR 0 10
19569: MUL
19570: PLUS
19571: PPUSH
19572: CALL_OW 1
19576: ST_TO_ADDR
19577: GO 19525
19579: POP
19580: POP
// end ;
19581: GO 18054
19583: POP
19584: POP
// result := Replace ( result , 4 , tmp ) ;
19585: LD_ADDR_VAR 0 5
19589: PUSH
19590: LD_VAR 0 5
19594: PPUSH
19595: LD_INT 4
19597: PPUSH
19598: LD_VAR 0 8
19602: PPUSH
19603: CALL_OW 1
19607: ST_TO_ADDR
// end ;
19608: LD_VAR 0 5
19612: RET
// export function DangerAtRange ( unit , range ) ; begin
19613: LD_INT 0
19615: PPUSH
// if not unit then
19616: LD_VAR 0 1
19620: NOT
19621: IFFALSE 19625
// exit ;
19623: GO 19670
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19625: LD_ADDR_VAR 0 3
19629: PUSH
19630: LD_VAR 0 1
19634: PPUSH
19635: CALL_OW 255
19639: PPUSH
19640: LD_VAR 0 1
19644: PPUSH
19645: CALL_OW 250
19649: PPUSH
19650: LD_VAR 0 1
19654: PPUSH
19655: CALL_OW 251
19659: PPUSH
19660: LD_VAR 0 2
19664: PPUSH
19665: CALL 17904 0 4
19669: ST_TO_ADDR
// end ;
19670: LD_VAR 0 3
19674: RET
// export function DangerInArea ( side , area ) ; begin
19675: LD_INT 0
19677: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19678: LD_ADDR_VAR 0 3
19682: PUSH
19683: LD_VAR 0 2
19687: PPUSH
19688: LD_INT 81
19690: PUSH
19691: LD_VAR 0 1
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PPUSH
19700: CALL_OW 70
19704: ST_TO_ADDR
// end ;
19705: LD_VAR 0 3
19709: RET
// export function IsExtension ( b ) ; begin
19710: LD_INT 0
19712: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19713: LD_ADDR_VAR 0 2
19717: PUSH
19718: LD_VAR 0 1
19722: PUSH
19723: LD_INT 23
19725: PUSH
19726: LD_INT 20
19728: PUSH
19729: LD_INT 22
19731: PUSH
19732: LD_INT 17
19734: PUSH
19735: LD_INT 24
19737: PUSH
19738: LD_INT 21
19740: PUSH
19741: LD_INT 19
19743: PUSH
19744: LD_INT 16
19746: PUSH
19747: LD_INT 25
19749: PUSH
19750: LD_INT 18
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: IN
19765: ST_TO_ADDR
// end ;
19766: LD_VAR 0 2
19770: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19771: LD_INT 0
19773: PPUSH
19774: PPUSH
19775: PPUSH
// result := [ ] ;
19776: LD_ADDR_VAR 0 4
19780: PUSH
19781: EMPTY
19782: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19783: LD_ADDR_VAR 0 5
19787: PUSH
19788: LD_VAR 0 2
19792: PPUSH
19793: LD_INT 21
19795: PUSH
19796: LD_INT 3
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PPUSH
19803: CALL_OW 70
19807: ST_TO_ADDR
// if not tmp then
19808: LD_VAR 0 5
19812: NOT
19813: IFFALSE 19817
// exit ;
19815: GO 19881
// if checkLink then
19817: LD_VAR 0 3
19821: IFFALSE 19871
// begin for i in tmp do
19823: LD_ADDR_VAR 0 6
19827: PUSH
19828: LD_VAR 0 5
19832: PUSH
19833: FOR_IN
19834: IFFALSE 19869
// if GetBase ( i ) <> base then
19836: LD_VAR 0 6
19840: PPUSH
19841: CALL_OW 274
19845: PUSH
19846: LD_VAR 0 1
19850: NONEQUAL
19851: IFFALSE 19867
// ComLinkToBase ( base , i ) ;
19853: LD_VAR 0 1
19857: PPUSH
19858: LD_VAR 0 6
19862: PPUSH
19863: CALL_OW 169
19867: GO 19833
19869: POP
19870: POP
// end ; result := tmp ;
19871: LD_ADDR_VAR 0 4
19875: PUSH
19876: LD_VAR 0 5
19880: ST_TO_ADDR
// end ;
19881: LD_VAR 0 4
19885: RET
// export function ComComplete ( units , b ) ; var i ; begin
19886: LD_INT 0
19888: PPUSH
19889: PPUSH
// if not units then
19890: LD_VAR 0 1
19894: NOT
19895: IFFALSE 19899
// exit ;
19897: GO 19989
// for i in units do
19899: LD_ADDR_VAR 0 4
19903: PUSH
19904: LD_VAR 0 1
19908: PUSH
19909: FOR_IN
19910: IFFALSE 19987
// if BuildingStatus ( b ) = bs_build then
19912: LD_VAR 0 2
19916: PPUSH
19917: CALL_OW 461
19921: PUSH
19922: LD_INT 1
19924: EQUAL
19925: IFFALSE 19985
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19927: LD_VAR 0 4
19931: PPUSH
19932: LD_STRING h
19934: PUSH
19935: LD_VAR 0 2
19939: PPUSH
19940: CALL_OW 250
19944: PUSH
19945: LD_VAR 0 2
19949: PPUSH
19950: CALL_OW 251
19954: PUSH
19955: LD_VAR 0 2
19959: PUSH
19960: LD_INT 0
19962: PUSH
19963: LD_INT 0
19965: PUSH
19966: LD_INT 0
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: PUSH
19978: EMPTY
19979: LIST
19980: PPUSH
19981: CALL_OW 446
19985: GO 19909
19987: POP
19988: POP
// end ;
19989: LD_VAR 0 3
19993: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19994: LD_INT 0
19996: PPUSH
19997: PPUSH
19998: PPUSH
19999: PPUSH
20000: PPUSH
20001: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
20002: LD_VAR 0 1
20006: NOT
20007: IFTRUE 20024
20009: PUSH
20010: LD_VAR 0 1
20014: PPUSH
20015: CALL_OW 263
20019: PUSH
20020: LD_INT 2
20022: NONEQUAL
20023: OR
20024: IFFALSE 20028
// exit ;
20026: GO 20344
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20028: LD_ADDR_VAR 0 6
20032: PUSH
20033: LD_INT 22
20035: PUSH
20036: LD_VAR 0 1
20040: PPUSH
20041: CALL_OW 255
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 2
20052: PUSH
20053: LD_INT 30
20055: PUSH
20056: LD_INT 36
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 34
20065: PUSH
20066: LD_INT 31
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: LIST
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PPUSH
20082: CALL_OW 69
20086: ST_TO_ADDR
// if not tmp then
20087: LD_VAR 0 6
20091: NOT
20092: IFFALSE 20096
// exit ;
20094: GO 20344
// result := [ ] ;
20096: LD_ADDR_VAR 0 2
20100: PUSH
20101: EMPTY
20102: ST_TO_ADDR
// for i in tmp do
20103: LD_ADDR_VAR 0 3
20107: PUSH
20108: LD_VAR 0 6
20112: PUSH
20113: FOR_IN
20114: IFFALSE 20185
// begin t := UnitsInside ( i ) ;
20116: LD_ADDR_VAR 0 4
20120: PUSH
20121: LD_VAR 0 3
20125: PPUSH
20126: CALL_OW 313
20130: ST_TO_ADDR
// if t then
20131: LD_VAR 0 4
20135: IFFALSE 20183
// for j in t do
20137: LD_ADDR_VAR 0 7
20141: PUSH
20142: LD_VAR 0 4
20146: PUSH
20147: FOR_IN
20148: IFFALSE 20181
// result := Replace ( result , result + 1 , j ) ;
20150: LD_ADDR_VAR 0 2
20154: PUSH
20155: LD_VAR 0 2
20159: PPUSH
20160: LD_VAR 0 2
20164: PUSH
20165: LD_INT 1
20167: PLUS
20168: PPUSH
20169: LD_VAR 0 7
20173: PPUSH
20174: CALL_OW 1
20178: ST_TO_ADDR
20179: GO 20147
20181: POP
20182: POP
// end ;
20183: GO 20113
20185: POP
20186: POP
// if not result then
20187: LD_VAR 0 2
20191: NOT
20192: IFFALSE 20196
// exit ;
20194: GO 20344
// mech := result [ 1 ] ;
20196: LD_ADDR_VAR 0 5
20200: PUSH
20201: LD_VAR 0 2
20205: PUSH
20206: LD_INT 1
20208: ARRAY
20209: ST_TO_ADDR
// if result > 1 then
20210: LD_VAR 0 2
20214: PUSH
20215: LD_INT 1
20217: GREATER
20218: IFFALSE 20330
// begin for i = 2 to result do
20220: LD_ADDR_VAR 0 3
20224: PUSH
20225: DOUBLE
20226: LD_INT 2
20228: DEC
20229: ST_TO_ADDR
20230: LD_VAR 0 2
20234: PUSH
20235: FOR_TO
20236: IFFALSE 20328
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20238: LD_ADDR_VAR 0 4
20242: PUSH
20243: LD_VAR 0 2
20247: PUSH
20248: LD_VAR 0 3
20252: ARRAY
20253: PPUSH
20254: LD_INT 3
20256: PPUSH
20257: CALL_OW 259
20261: PUSH
20262: LD_VAR 0 2
20266: PUSH
20267: LD_VAR 0 3
20271: ARRAY
20272: PPUSH
20273: CALL_OW 432
20277: MINUS
20278: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20279: LD_VAR 0 4
20283: PUSH
20284: LD_VAR 0 5
20288: PPUSH
20289: LD_INT 3
20291: PPUSH
20292: CALL_OW 259
20296: PUSH
20297: LD_VAR 0 5
20301: PPUSH
20302: CALL_OW 432
20306: MINUS
20307: GREATEREQUAL
20308: IFFALSE 20326
// mech := result [ i ] ;
20310: LD_ADDR_VAR 0 5
20314: PUSH
20315: LD_VAR 0 2
20319: PUSH
20320: LD_VAR 0 3
20324: ARRAY
20325: ST_TO_ADDR
// end ;
20326: GO 20235
20328: POP
20329: POP
// end ; ComLinkTo ( vehicle , mech ) ;
20330: LD_VAR 0 1
20334: PPUSH
20335: LD_VAR 0 5
20339: PPUSH
20340: CALL_OW 135
// end ;
20344: LD_VAR 0 2
20348: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20349: LD_INT 0
20351: PPUSH
20352: PPUSH
20353: PPUSH
20354: PPUSH
20355: PPUSH
20356: PPUSH
20357: PPUSH
20358: PPUSH
20359: PPUSH
20360: PPUSH
20361: PPUSH
20362: PPUSH
20363: PPUSH
// result := [ ] ;
20364: LD_ADDR_VAR 0 7
20368: PUSH
20369: EMPTY
20370: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20371: LD_VAR 0 1
20375: PPUSH
20376: CALL_OW 266
20380: PUSH
20381: LD_INT 0
20383: PUSH
20384: LD_INT 1
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: IN
20391: NOT
20392: IFFALSE 20396
// exit ;
20394: GO 22036
// if name then
20396: LD_VAR 0 3
20400: IFFALSE 20416
// SetBName ( base_dep , name ) ;
20402: LD_VAR 0 1
20406: PPUSH
20407: LD_VAR 0 3
20411: PPUSH
20412: CALL_OW 500
// base := GetBase ( base_dep ) ;
20416: LD_ADDR_VAR 0 15
20420: PUSH
20421: LD_VAR 0 1
20425: PPUSH
20426: CALL_OW 274
20430: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20431: LD_ADDR_VAR 0 16
20435: PUSH
20436: LD_VAR 0 1
20440: PPUSH
20441: CALL_OW 255
20445: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20446: LD_ADDR_VAR 0 17
20450: PUSH
20451: LD_VAR 0 1
20455: PPUSH
20456: CALL_OW 248
20460: ST_TO_ADDR
// if sources then
20461: LD_VAR 0 5
20465: IFFALSE 20512
// for i = 1 to 3 do
20467: LD_ADDR_VAR 0 8
20471: PUSH
20472: DOUBLE
20473: LD_INT 1
20475: DEC
20476: ST_TO_ADDR
20477: LD_INT 3
20479: PUSH
20480: FOR_TO
20481: IFFALSE 20510
// AddResourceType ( base , i , sources [ i ] ) ;
20483: LD_VAR 0 15
20487: PPUSH
20488: LD_VAR 0 8
20492: PPUSH
20493: LD_VAR 0 5
20497: PUSH
20498: LD_VAR 0 8
20502: ARRAY
20503: PPUSH
20504: CALL_OW 276
20508: GO 20480
20510: POP
20511: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
20512: LD_ADDR_VAR 0 18
20516: PUSH
20517: LD_VAR 0 15
20521: PPUSH
20522: LD_VAR 0 2
20526: PPUSH
20527: LD_INT 1
20529: PPUSH
20530: CALL 19771 0 3
20534: ST_TO_ADDR
// InitHc ;
20535: CALL_OW 19
// InitUc ;
20539: CALL_OW 18
// uc_side := side ;
20543: LD_ADDR_OWVAR 20
20547: PUSH
20548: LD_VAR 0 16
20552: ST_TO_ADDR
// uc_nation := nation ;
20553: LD_ADDR_OWVAR 21
20557: PUSH
20558: LD_VAR 0 17
20562: ST_TO_ADDR
// if buildings then
20563: LD_VAR 0 18
20567: IFFALSE 21895
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20569: LD_ADDR_VAR 0 19
20573: PUSH
20574: LD_VAR 0 18
20578: PPUSH
20579: LD_INT 2
20581: PUSH
20582: LD_INT 30
20584: PUSH
20585: LD_INT 29
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 30
20594: PUSH
20595: LD_INT 30
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: LIST
20606: PPUSH
20607: CALL_OW 72
20611: ST_TO_ADDR
// if tmp then
20612: LD_VAR 0 19
20616: IFFALSE 20664
// for i in tmp do
20618: LD_ADDR_VAR 0 8
20622: PUSH
20623: LD_VAR 0 19
20627: PUSH
20628: FOR_IN
20629: IFFALSE 20662
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20631: LD_VAR 0 8
20635: PPUSH
20636: CALL_OW 250
20640: PPUSH
20641: LD_VAR 0 8
20645: PPUSH
20646: CALL_OW 251
20650: PPUSH
20651: LD_VAR 0 16
20655: PPUSH
20656: CALL_OW 441
20660: GO 20628
20662: POP
20663: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20664: LD_VAR 0 18
20668: PPUSH
20669: LD_INT 2
20671: PUSH
20672: LD_INT 30
20674: PUSH
20675: LD_INT 32
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 30
20684: PUSH
20685: LD_INT 33
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: LIST
20696: PPUSH
20697: CALL_OW 72
20701: IFFALSE 20789
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20703: LD_ADDR_VAR 0 8
20707: PUSH
20708: LD_VAR 0 18
20712: PPUSH
20713: LD_INT 2
20715: PUSH
20716: LD_INT 30
20718: PUSH
20719: LD_INT 32
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 30
20728: PUSH
20729: LD_INT 33
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: LIST
20740: PPUSH
20741: CALL_OW 72
20745: PUSH
20746: FOR_IN
20747: IFFALSE 20787
// begin if not GetBWeapon ( i ) then
20749: LD_VAR 0 8
20753: PPUSH
20754: CALL_OW 269
20758: NOT
20759: IFFALSE 20785
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20761: LD_VAR 0 8
20765: PPUSH
20766: LD_VAR 0 8
20770: PPUSH
20771: LD_VAR 0 2
20775: PPUSH
20776: CALL 22041 0 2
20780: PPUSH
20781: CALL_OW 431
// end ;
20785: GO 20746
20787: POP
20788: POP
// end ; for i = 1 to personel do
20789: LD_ADDR_VAR 0 8
20793: PUSH
20794: DOUBLE
20795: LD_INT 1
20797: DEC
20798: ST_TO_ADDR
20799: LD_VAR 0 6
20803: PUSH
20804: FOR_TO
20805: IFFALSE 21875
// begin if i > 4 then
20807: LD_VAR 0 8
20811: PUSH
20812: LD_INT 4
20814: GREATER
20815: IFFALSE 20819
// break ;
20817: GO 21875
// case i of 1 :
20819: LD_VAR 0 8
20823: PUSH
20824: LD_INT 1
20826: DOUBLE
20827: EQUAL
20828: IFTRUE 20832
20830: GO 20912
20832: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20833: LD_ADDR_VAR 0 12
20837: PUSH
20838: LD_VAR 0 18
20842: PPUSH
20843: LD_INT 22
20845: PUSH
20846: LD_VAR 0 16
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 58
20857: PUSH
20858: EMPTY
20859: LIST
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: LD_INT 30
20866: PUSH
20867: LD_INT 32
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 30
20876: PUSH
20877: LD_INT 4
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 30
20886: PUSH
20887: LD_INT 5
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: PPUSH
20905: CALL_OW 72
20909: ST_TO_ADDR
20910: GO 21134
20912: LD_INT 2
20914: DOUBLE
20915: EQUAL
20916: IFTRUE 20920
20918: GO 20982
20920: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20921: LD_ADDR_VAR 0 12
20925: PUSH
20926: LD_VAR 0 18
20930: PPUSH
20931: LD_INT 22
20933: PUSH
20934: LD_VAR 0 16
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 2
20945: PUSH
20946: LD_INT 30
20948: PUSH
20949: LD_INT 0
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 30
20958: PUSH
20959: LD_INT 1
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: LIST
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PPUSH
20975: CALL_OW 72
20979: ST_TO_ADDR
20980: GO 21134
20982: LD_INT 3
20984: DOUBLE
20985: EQUAL
20986: IFTRUE 20990
20988: GO 21052
20990: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20991: LD_ADDR_VAR 0 12
20995: PUSH
20996: LD_VAR 0 18
21000: PPUSH
21001: LD_INT 22
21003: PUSH
21004: LD_VAR 0 16
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: LD_INT 30
21018: PUSH
21019: LD_INT 2
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 30
21028: PUSH
21029: LD_INT 3
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: LIST
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PPUSH
21045: CALL_OW 72
21049: ST_TO_ADDR
21050: GO 21134
21052: LD_INT 4
21054: DOUBLE
21055: EQUAL
21056: IFTRUE 21060
21058: GO 21133
21060: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21061: LD_ADDR_VAR 0 12
21065: PUSH
21066: LD_VAR 0 18
21070: PPUSH
21071: LD_INT 22
21073: PUSH
21074: LD_VAR 0 16
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 2
21085: PUSH
21086: LD_INT 30
21088: PUSH
21089: LD_INT 6
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 30
21098: PUSH
21099: LD_INT 7
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 30
21108: PUSH
21109: LD_INT 8
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PPUSH
21126: CALL_OW 72
21130: ST_TO_ADDR
21131: GO 21134
21133: POP
// if i = 1 then
21134: LD_VAR 0 8
21138: PUSH
21139: LD_INT 1
21141: EQUAL
21142: IFFALSE 21253
// begin tmp := [ ] ;
21144: LD_ADDR_VAR 0 19
21148: PUSH
21149: EMPTY
21150: ST_TO_ADDR
// for j in f do
21151: LD_ADDR_VAR 0 9
21155: PUSH
21156: LD_VAR 0 12
21160: PUSH
21161: FOR_IN
21162: IFFALSE 21235
// if GetBType ( j ) = b_bunker then
21164: LD_VAR 0 9
21168: PPUSH
21169: CALL_OW 266
21173: PUSH
21174: LD_INT 32
21176: EQUAL
21177: IFFALSE 21204
// tmp := Insert ( tmp , 1 , j ) else
21179: LD_ADDR_VAR 0 19
21183: PUSH
21184: LD_VAR 0 19
21188: PPUSH
21189: LD_INT 1
21191: PPUSH
21192: LD_VAR 0 9
21196: PPUSH
21197: CALL_OW 2
21201: ST_TO_ADDR
21202: GO 21233
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21204: LD_ADDR_VAR 0 19
21208: PUSH
21209: LD_VAR 0 19
21213: PPUSH
21214: LD_VAR 0 19
21218: PUSH
21219: LD_INT 1
21221: PLUS
21222: PPUSH
21223: LD_VAR 0 9
21227: PPUSH
21228: CALL_OW 2
21232: ST_TO_ADDR
21233: GO 21161
21235: POP
21236: POP
// if tmp then
21237: LD_VAR 0 19
21241: IFFALSE 21253
// f := tmp ;
21243: LD_ADDR_VAR 0 12
21247: PUSH
21248: LD_VAR 0 19
21252: ST_TO_ADDR
// end ; x := personel [ i ] ;
21253: LD_ADDR_VAR 0 13
21257: PUSH
21258: LD_VAR 0 6
21262: PUSH
21263: LD_VAR 0 8
21267: ARRAY
21268: ST_TO_ADDR
// if x = - 1 then
21269: LD_VAR 0 13
21273: PUSH
21274: LD_INT 1
21276: NEG
21277: EQUAL
21278: IFFALSE 21489
// begin for j in f do
21280: LD_ADDR_VAR 0 9
21284: PUSH
21285: LD_VAR 0 12
21289: PUSH
21290: FOR_IN
21291: IFFALSE 21485
// repeat InitHc ;
21293: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21297: LD_VAR 0 9
21301: PPUSH
21302: CALL_OW 266
21306: PUSH
21307: LD_INT 5
21309: EQUAL
21310: IFFALSE 21380
// begin if UnitsInside ( j ) < 3 then
21312: LD_VAR 0 9
21316: PPUSH
21317: CALL_OW 313
21321: PUSH
21322: LD_INT 3
21324: LESS
21325: IFFALSE 21361
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21327: LD_INT 0
21329: PPUSH
21330: LD_INT 5
21332: PUSH
21333: LD_INT 8
21335: PUSH
21336: LD_INT 9
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: LIST
21343: PUSH
21344: LD_VAR 0 17
21348: ARRAY
21349: PPUSH
21350: LD_VAR 0 4
21354: PPUSH
21355: CALL_OW 380
21359: GO 21378
// PrepareHuman ( false , i , skill ) ;
21361: LD_INT 0
21363: PPUSH
21364: LD_VAR 0 8
21368: PPUSH
21369: LD_VAR 0 4
21373: PPUSH
21374: CALL_OW 380
// end else
21378: GO 21397
// PrepareHuman ( false , i , skill ) ;
21380: LD_INT 0
21382: PPUSH
21383: LD_VAR 0 8
21387: PPUSH
21388: LD_VAR 0 4
21392: PPUSH
21393: CALL_OW 380
// un := CreateHuman ;
21397: LD_ADDR_VAR 0 14
21401: PUSH
21402: CALL_OW 44
21406: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21407: LD_ADDR_VAR 0 7
21411: PUSH
21412: LD_VAR 0 7
21416: PPUSH
21417: LD_INT 1
21419: PPUSH
21420: LD_VAR 0 14
21424: PPUSH
21425: CALL_OW 2
21429: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21430: LD_VAR 0 14
21434: PPUSH
21435: LD_VAR 0 9
21439: PPUSH
21440: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21444: LD_VAR 0 9
21448: PPUSH
21449: CALL_OW 313
21453: PUSH
21454: LD_INT 6
21456: EQUAL
21457: IFTRUE 21481
21459: PUSH
21460: LD_VAR 0 9
21464: PPUSH
21465: CALL_OW 266
21469: PUSH
21470: LD_INT 32
21472: PUSH
21473: LD_INT 31
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: IN
21480: OR
21481: IFFALSE 21293
21483: GO 21290
21485: POP
21486: POP
// end else
21487: GO 21873
// for j = 1 to x do
21489: LD_ADDR_VAR 0 9
21493: PUSH
21494: DOUBLE
21495: LD_INT 1
21497: DEC
21498: ST_TO_ADDR
21499: LD_VAR 0 13
21503: PUSH
21504: FOR_TO
21505: IFFALSE 21871
// begin InitHc ;
21507: CALL_OW 19
// if not f then
21511: LD_VAR 0 12
21515: NOT
21516: IFFALSE 21605
// begin PrepareHuman ( false , i , skill ) ;
21518: LD_INT 0
21520: PPUSH
21521: LD_VAR 0 8
21525: PPUSH
21526: LD_VAR 0 4
21530: PPUSH
21531: CALL_OW 380
// un := CreateHuman ;
21535: LD_ADDR_VAR 0 14
21539: PUSH
21540: CALL_OW 44
21544: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21545: LD_ADDR_VAR 0 7
21549: PUSH
21550: LD_VAR 0 7
21554: PPUSH
21555: LD_INT 1
21557: PPUSH
21558: LD_VAR 0 14
21562: PPUSH
21563: CALL_OW 2
21567: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21568: LD_VAR 0 14
21572: PPUSH
21573: LD_VAR 0 1
21577: PPUSH
21578: CALL_OW 250
21582: PPUSH
21583: LD_VAR 0 1
21587: PPUSH
21588: CALL_OW 251
21592: PPUSH
21593: LD_INT 10
21595: PPUSH
21596: LD_INT 0
21598: PPUSH
21599: CALL_OW 50
// continue ;
21603: GO 21504
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21605: LD_VAR 0 12
21609: PUSH
21610: LD_INT 1
21612: ARRAY
21613: PPUSH
21614: CALL_OW 313
21618: IFFALSE 21646
21620: PUSH
21621: LD_VAR 0 12
21625: PUSH
21626: LD_INT 1
21628: ARRAY
21629: PPUSH
21630: CALL_OW 266
21634: PUSH
21635: LD_INT 32
21637: PUSH
21638: LD_INT 31
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: IN
21645: AND
21646: IFTRUE 21667
21648: PUSH
21649: LD_VAR 0 12
21653: PUSH
21654: LD_INT 1
21656: ARRAY
21657: PPUSH
21658: CALL_OW 313
21662: PUSH
21663: LD_INT 6
21665: EQUAL
21666: OR
21667: IFFALSE 21687
// f := Delete ( f , 1 ) ;
21669: LD_ADDR_VAR 0 12
21673: PUSH
21674: LD_VAR 0 12
21678: PPUSH
21679: LD_INT 1
21681: PPUSH
21682: CALL_OW 3
21686: ST_TO_ADDR
// if not f then
21687: LD_VAR 0 12
21691: NOT
21692: IFFALSE 21710
// begin x := x + 2 ;
21694: LD_ADDR_VAR 0 13
21698: PUSH
21699: LD_VAR 0 13
21703: PUSH
21704: LD_INT 2
21706: PLUS
21707: ST_TO_ADDR
// continue ;
21708: GO 21504
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21710: LD_VAR 0 12
21714: PUSH
21715: LD_INT 1
21717: ARRAY
21718: PPUSH
21719: CALL_OW 266
21723: PUSH
21724: LD_INT 5
21726: EQUAL
21727: IFFALSE 21801
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21729: LD_VAR 0 12
21733: PUSH
21734: LD_INT 1
21736: ARRAY
21737: PPUSH
21738: CALL_OW 313
21742: PUSH
21743: LD_INT 3
21745: LESS
21746: IFFALSE 21782
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21748: LD_INT 0
21750: PPUSH
21751: LD_INT 5
21753: PUSH
21754: LD_INT 8
21756: PUSH
21757: LD_INT 9
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: LIST
21764: PUSH
21765: LD_VAR 0 17
21769: ARRAY
21770: PPUSH
21771: LD_VAR 0 4
21775: PPUSH
21776: CALL_OW 380
21780: GO 21799
// PrepareHuman ( false , i , skill ) ;
21782: LD_INT 0
21784: PPUSH
21785: LD_VAR 0 8
21789: PPUSH
21790: LD_VAR 0 4
21794: PPUSH
21795: CALL_OW 380
// end else
21799: GO 21818
// PrepareHuman ( false , i , skill ) ;
21801: LD_INT 0
21803: PPUSH
21804: LD_VAR 0 8
21808: PPUSH
21809: LD_VAR 0 4
21813: PPUSH
21814: CALL_OW 380
// un := CreateHuman ;
21818: LD_ADDR_VAR 0 14
21822: PUSH
21823: CALL_OW 44
21827: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21828: LD_ADDR_VAR 0 7
21832: PUSH
21833: LD_VAR 0 7
21837: PPUSH
21838: LD_INT 1
21840: PPUSH
21841: LD_VAR 0 14
21845: PPUSH
21846: CALL_OW 2
21850: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21851: LD_VAR 0 14
21855: PPUSH
21856: LD_VAR 0 12
21860: PUSH
21861: LD_INT 1
21863: ARRAY
21864: PPUSH
21865: CALL_OW 52
// end ;
21869: GO 21504
21871: POP
21872: POP
// end ;
21873: GO 20804
21875: POP
21876: POP
// result := result ^ buildings ;
21877: LD_ADDR_VAR 0 7
21881: PUSH
21882: LD_VAR 0 7
21886: PUSH
21887: LD_VAR 0 18
21891: ADD
21892: ST_TO_ADDR
// end else
21893: GO 22036
// begin for i = 1 to personel do
21895: LD_ADDR_VAR 0 8
21899: PUSH
21900: DOUBLE
21901: LD_INT 1
21903: DEC
21904: ST_TO_ADDR
21905: LD_VAR 0 6
21909: PUSH
21910: FOR_TO
21911: IFFALSE 22034
// begin if i > 4 then
21913: LD_VAR 0 8
21917: PUSH
21918: LD_INT 4
21920: GREATER
21921: IFFALSE 21925
// break ;
21923: GO 22034
// x := personel [ i ] ;
21925: LD_ADDR_VAR 0 13
21929: PUSH
21930: LD_VAR 0 6
21934: PUSH
21935: LD_VAR 0 8
21939: ARRAY
21940: ST_TO_ADDR
// if x = - 1 then
21941: LD_VAR 0 13
21945: PUSH
21946: LD_INT 1
21948: NEG
21949: EQUAL
21950: IFFALSE 21954
// continue ;
21952: GO 21910
// PrepareHuman ( false , i , skill ) ;
21954: LD_INT 0
21956: PPUSH
21957: LD_VAR 0 8
21961: PPUSH
21962: LD_VAR 0 4
21966: PPUSH
21967: CALL_OW 380
// un := CreateHuman ;
21971: LD_ADDR_VAR 0 14
21975: PUSH
21976: CALL_OW 44
21980: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21981: LD_VAR 0 14
21985: PPUSH
21986: LD_VAR 0 1
21990: PPUSH
21991: CALL_OW 250
21995: PPUSH
21996: LD_VAR 0 1
22000: PPUSH
22001: CALL_OW 251
22005: PPUSH
22006: LD_INT 10
22008: PPUSH
22009: LD_INT 0
22011: PPUSH
22012: CALL_OW 50
// result := result ^ un ;
22016: LD_ADDR_VAR 0 7
22020: PUSH
22021: LD_VAR 0 7
22025: PUSH
22026: LD_VAR 0 14
22030: ADD
22031: ST_TO_ADDR
// end ;
22032: GO 21910
22034: POP
22035: POP
// end ; end ;
22036: LD_VAR 0 7
22040: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22041: LD_INT 0
22043: PPUSH
22044: PPUSH
22045: PPUSH
22046: PPUSH
22047: PPUSH
22048: PPUSH
22049: PPUSH
22050: PPUSH
22051: PPUSH
22052: PPUSH
22053: PPUSH
22054: PPUSH
22055: PPUSH
22056: PPUSH
22057: PPUSH
22058: PPUSH
// result := false ;
22059: LD_ADDR_VAR 0 3
22063: PUSH
22064: LD_INT 0
22066: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22067: LD_VAR 0 1
22071: NOT
22072: IFTRUE 22097
22074: PUSH
22075: LD_VAR 0 1
22079: PPUSH
22080: CALL_OW 266
22084: PUSH
22085: LD_INT 32
22087: PUSH
22088: LD_INT 33
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: IN
22095: NOT
22096: OR
22097: IFFALSE 22101
// exit ;
22099: GO 23236
// nat := GetNation ( tower ) ;
22101: LD_ADDR_VAR 0 12
22105: PUSH
22106: LD_VAR 0 1
22110: PPUSH
22111: CALL_OW 248
22115: ST_TO_ADDR
// side := GetSide ( tower ) ;
22116: LD_ADDR_VAR 0 16
22120: PUSH
22121: LD_VAR 0 1
22125: PPUSH
22126: CALL_OW 255
22130: ST_TO_ADDR
// x := GetX ( tower ) ;
22131: LD_ADDR_VAR 0 10
22135: PUSH
22136: LD_VAR 0 1
22140: PPUSH
22141: CALL_OW 250
22145: ST_TO_ADDR
// y := GetY ( tower ) ;
22146: LD_ADDR_VAR 0 11
22150: PUSH
22151: LD_VAR 0 1
22155: PPUSH
22156: CALL_OW 251
22160: ST_TO_ADDR
// if not x or not y then
22161: LD_VAR 0 10
22165: NOT
22166: IFTRUE 22175
22168: PUSH
22169: LD_VAR 0 11
22173: NOT
22174: OR
22175: IFFALSE 22179
// exit ;
22177: GO 23236
// weapon := 0 ;
22179: LD_ADDR_VAR 0 18
22183: PUSH
22184: LD_INT 0
22186: ST_TO_ADDR
// fac_list := [ ] ;
22187: LD_ADDR_VAR 0 17
22191: PUSH
22192: EMPTY
22193: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22194: LD_ADDR_VAR 0 6
22198: PUSH
22199: LD_VAR 0 1
22203: PPUSH
22204: CALL_OW 274
22208: PPUSH
22209: LD_VAR 0 2
22213: PPUSH
22214: LD_INT 0
22216: PPUSH
22217: CALL 19771 0 3
22221: PPUSH
22222: LD_INT 30
22224: PUSH
22225: LD_INT 3
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PPUSH
22232: CALL_OW 72
22236: ST_TO_ADDR
// if not factories then
22237: LD_VAR 0 6
22241: NOT
22242: IFFALSE 22246
// exit ;
22244: GO 23236
// for i in factories do
22246: LD_ADDR_VAR 0 8
22250: PUSH
22251: LD_VAR 0 6
22255: PUSH
22256: FOR_IN
22257: IFFALSE 22282
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22259: LD_ADDR_VAR 0 17
22263: PUSH
22264: LD_VAR 0 17
22268: PUSH
22269: LD_VAR 0 8
22273: PPUSH
22274: CALL_OW 478
22278: UNION
22279: ST_TO_ADDR
22280: GO 22256
22282: POP
22283: POP
// if not fac_list then
22284: LD_VAR 0 17
22288: NOT
22289: IFFALSE 22293
// exit ;
22291: GO 23236
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22293: LD_ADDR_VAR 0 5
22297: PUSH
22298: LD_INT 4
22300: PUSH
22301: LD_INT 5
22303: PUSH
22304: LD_INT 9
22306: PUSH
22307: LD_INT 10
22309: PUSH
22310: LD_INT 6
22312: PUSH
22313: LD_INT 7
22315: PUSH
22316: LD_INT 11
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 27
22330: PUSH
22331: LD_INT 28
22333: PUSH
22334: LD_INT 26
22336: PUSH
22337: LD_INT 30
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 43
22348: PUSH
22349: LD_INT 44
22351: PUSH
22352: LD_INT 46
22354: PUSH
22355: LD_INT 45
22357: PUSH
22358: LD_INT 47
22360: PUSH
22361: LD_INT 49
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: LIST
22376: PUSH
22377: LD_VAR 0 12
22381: ARRAY
22382: ST_TO_ADDR
// list := list isect fac_list ;
22383: LD_ADDR_VAR 0 5
22387: PUSH
22388: LD_VAR 0 5
22392: PUSH
22393: LD_VAR 0 17
22397: ISECT
22398: ST_TO_ADDR
// if not list then
22399: LD_VAR 0 5
22403: NOT
22404: IFFALSE 22408
// exit ;
22406: GO 23236
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22408: LD_VAR 0 12
22412: PUSH
22413: LD_INT 3
22415: EQUAL
22416: IFFALSE 22428
22418: PUSH
22419: LD_INT 49
22421: PUSH
22422: LD_VAR 0 5
22426: IN
22427: AND
22428: IFFALSE 22448
22430: PUSH
22431: LD_INT 31
22433: PPUSH
22434: LD_VAR 0 16
22438: PPUSH
22439: CALL_OW 321
22443: PUSH
22444: LD_INT 2
22446: EQUAL
22447: AND
22448: IFFALSE 22508
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22450: LD_INT 22
22452: PUSH
22453: LD_VAR 0 16
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 35
22464: PUSH
22465: LD_INT 49
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 91
22474: PUSH
22475: LD_VAR 0 1
22479: PUSH
22480: LD_INT 10
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: LIST
22492: PPUSH
22493: CALL_OW 69
22497: NOT
22498: IFFALSE 22508
// weapon := ru_time_lapser ;
22500: LD_ADDR_VAR 0 18
22504: PUSH
22505: LD_INT 49
22507: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22508: LD_VAR 0 12
22512: PUSH
22513: LD_INT 1
22515: PUSH
22516: LD_INT 2
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: IN
22523: IFFALSE 22547
22525: PUSH
22526: LD_INT 11
22528: PUSH
22529: LD_VAR 0 5
22533: IN
22534: IFTRUE 22546
22536: PUSH
22537: LD_INT 30
22539: PUSH
22540: LD_VAR 0 5
22544: IN
22545: OR
22546: AND
22547: IFFALSE 22567
22549: PUSH
22550: LD_INT 6
22552: PPUSH
22553: LD_VAR 0 16
22557: PPUSH
22558: CALL_OW 321
22562: PUSH
22563: LD_INT 2
22565: EQUAL
22566: AND
22567: IFFALSE 22734
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22569: LD_INT 22
22571: PUSH
22572: LD_VAR 0 16
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 2
22583: PUSH
22584: LD_INT 35
22586: PUSH
22587: LD_INT 11
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 35
22596: PUSH
22597: LD_INT 30
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 91
22611: PUSH
22612: LD_VAR 0 1
22616: PUSH
22617: LD_INT 18
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: LIST
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: PPUSH
22630: CALL_OW 69
22634: NOT
22635: IFFALSE 22711
22637: PUSH
22638: LD_INT 22
22640: PUSH
22641: LD_VAR 0 16
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 2
22652: PUSH
22653: LD_INT 30
22655: PUSH
22656: LD_INT 32
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 30
22665: PUSH
22666: LD_INT 33
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 91
22680: PUSH
22681: LD_VAR 0 1
22685: PUSH
22686: LD_INT 12
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: LIST
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: PUSH
22699: EMPTY
22700: LIST
22701: PPUSH
22702: CALL_OW 69
22706: PUSH
22707: LD_INT 2
22709: GREATER
22710: AND
22711: IFFALSE 22734
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22713: LD_ADDR_VAR 0 18
22717: PUSH
22718: LD_INT 11
22720: PUSH
22721: LD_INT 30
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_VAR 0 12
22732: ARRAY
22733: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22734: LD_VAR 0 18
22738: NOT
22739: IFFALSE 22759
22741: PUSH
22742: LD_INT 40
22744: PPUSH
22745: LD_VAR 0 16
22749: PPUSH
22750: CALL_OW 321
22754: PUSH
22755: LD_INT 2
22757: EQUAL
22758: AND
22759: IFFALSE 22795
22761: PUSH
22762: LD_INT 7
22764: PUSH
22765: LD_VAR 0 5
22769: IN
22770: IFTRUE 22782
22772: PUSH
22773: LD_INT 28
22775: PUSH
22776: LD_VAR 0 5
22780: IN
22781: OR
22782: IFTRUE 22794
22784: PUSH
22785: LD_INT 45
22787: PUSH
22788: LD_VAR 0 5
22792: IN
22793: OR
22794: AND
22795: IFFALSE 23049
// begin hex := GetHexInfo ( x , y ) ;
22797: LD_ADDR_VAR 0 4
22801: PUSH
22802: LD_VAR 0 10
22806: PPUSH
22807: LD_VAR 0 11
22811: PPUSH
22812: CALL_OW 546
22816: ST_TO_ADDR
// if hex [ 1 ] then
22817: LD_VAR 0 4
22821: PUSH
22822: LD_INT 1
22824: ARRAY
22825: IFFALSE 22829
// exit ;
22827: GO 23236
// height := hex [ 2 ] ;
22829: LD_ADDR_VAR 0 15
22833: PUSH
22834: LD_VAR 0 4
22838: PUSH
22839: LD_INT 2
22841: ARRAY
22842: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22843: LD_ADDR_VAR 0 14
22847: PUSH
22848: LD_INT 0
22850: PUSH
22851: LD_INT 2
22853: PUSH
22854: LD_INT 3
22856: PUSH
22857: LD_INT 5
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: ST_TO_ADDR
// for i in tmp do
22866: LD_ADDR_VAR 0 8
22870: PUSH
22871: LD_VAR 0 14
22875: PUSH
22876: FOR_IN
22877: IFFALSE 23047
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22879: LD_ADDR_VAR 0 9
22883: PUSH
22884: LD_VAR 0 10
22888: PPUSH
22889: LD_VAR 0 8
22893: PPUSH
22894: LD_INT 5
22896: PPUSH
22897: CALL_OW 272
22901: PUSH
22902: LD_VAR 0 11
22906: PPUSH
22907: LD_VAR 0 8
22911: PPUSH
22912: LD_INT 5
22914: PPUSH
22915: CALL_OW 273
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22924: LD_VAR 0 9
22928: PUSH
22929: LD_INT 1
22931: ARRAY
22932: PPUSH
22933: LD_VAR 0 9
22937: PUSH
22938: LD_INT 2
22940: ARRAY
22941: PPUSH
22942: CALL_OW 488
22946: IFFALSE 23045
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22948: LD_ADDR_VAR 0 4
22952: PUSH
22953: LD_VAR 0 9
22957: PUSH
22958: LD_INT 1
22960: ARRAY
22961: PPUSH
22962: LD_VAR 0 9
22966: PUSH
22967: LD_INT 2
22969: ARRAY
22970: PPUSH
22971: CALL_OW 546
22975: ST_TO_ADDR
// if hex [ 1 ] then
22976: LD_VAR 0 4
22980: PUSH
22981: LD_INT 1
22983: ARRAY
22984: IFFALSE 22988
// continue ;
22986: GO 22876
// h := hex [ 2 ] ;
22988: LD_ADDR_VAR 0 13
22992: PUSH
22993: LD_VAR 0 4
22997: PUSH
22998: LD_INT 2
23000: ARRAY
23001: ST_TO_ADDR
// if h + 7 < height then
23002: LD_VAR 0 13
23006: PUSH
23007: LD_INT 7
23009: PLUS
23010: PUSH
23011: LD_VAR 0 15
23015: LESS
23016: IFFALSE 23045
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23018: LD_ADDR_VAR 0 18
23022: PUSH
23023: LD_INT 7
23025: PUSH
23026: LD_INT 28
23028: PUSH
23029: LD_INT 45
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: PUSH
23037: LD_VAR 0 12
23041: ARRAY
23042: ST_TO_ADDR
// break ;
23043: GO 23047
// end ; end ; end ;
23045: GO 22876
23047: POP
23048: POP
// end ; if not weapon then
23049: LD_VAR 0 18
23053: NOT
23054: IFFALSE 23114
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23056: LD_ADDR_VAR 0 5
23060: PUSH
23061: LD_VAR 0 5
23065: PUSH
23066: LD_INT 11
23068: PUSH
23069: LD_INT 30
23071: PUSH
23072: LD_INT 49
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: LIST
23079: DIFF
23080: ST_TO_ADDR
// if not list then
23081: LD_VAR 0 5
23085: NOT
23086: IFFALSE 23090
// exit ;
23088: GO 23236
// weapon := list [ rand ( 1 , list ) ] ;
23090: LD_ADDR_VAR 0 18
23094: PUSH
23095: LD_VAR 0 5
23099: PUSH
23100: LD_INT 1
23102: PPUSH
23103: LD_VAR 0 5
23107: PPUSH
23108: CALL_OW 12
23112: ARRAY
23113: ST_TO_ADDR
// end ; if weapon then
23114: LD_VAR 0 18
23118: IFFALSE 23236
// begin tmp := CostOfWeapon ( weapon ) ;
23120: LD_ADDR_VAR 0 14
23124: PUSH
23125: LD_VAR 0 18
23129: PPUSH
23130: CALL_OW 451
23134: ST_TO_ADDR
// j := GetBase ( tower ) ;
23135: LD_ADDR_VAR 0 9
23139: PUSH
23140: LD_VAR 0 1
23144: PPUSH
23145: CALL_OW 274
23149: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23150: LD_VAR 0 9
23154: PPUSH
23155: LD_INT 1
23157: PPUSH
23158: CALL_OW 275
23162: PUSH
23163: LD_VAR 0 14
23167: PUSH
23168: LD_INT 1
23170: ARRAY
23171: GREATEREQUAL
23172: IFFALSE 23198
23174: PUSH
23175: LD_VAR 0 9
23179: PPUSH
23180: LD_INT 2
23182: PPUSH
23183: CALL_OW 275
23187: PUSH
23188: LD_VAR 0 14
23192: PUSH
23193: LD_INT 2
23195: ARRAY
23196: GREATEREQUAL
23197: AND
23198: IFFALSE 23224
23200: PUSH
23201: LD_VAR 0 9
23205: PPUSH
23206: LD_INT 3
23208: PPUSH
23209: CALL_OW 275
23213: PUSH
23214: LD_VAR 0 14
23218: PUSH
23219: LD_INT 3
23221: ARRAY
23222: GREATEREQUAL
23223: AND
23224: IFFALSE 23236
// result := weapon ;
23226: LD_ADDR_VAR 0 3
23230: PUSH
23231: LD_VAR 0 18
23235: ST_TO_ADDR
// end ; end ;
23236: LD_VAR 0 3
23240: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23241: LD_INT 0
23243: PPUSH
23244: PPUSH
// result := true ;
23245: LD_ADDR_VAR 0 3
23249: PUSH
23250: LD_INT 1
23252: ST_TO_ADDR
// if array1 = array2 then
23253: LD_VAR 0 1
23257: PUSH
23258: LD_VAR 0 2
23262: EQUAL
23263: IFFALSE 23323
// begin for i = 1 to array1 do
23265: LD_ADDR_VAR 0 4
23269: PUSH
23270: DOUBLE
23271: LD_INT 1
23273: DEC
23274: ST_TO_ADDR
23275: LD_VAR 0 1
23279: PUSH
23280: FOR_TO
23281: IFFALSE 23319
// if array1 [ i ] <> array2 [ i ] then
23283: LD_VAR 0 1
23287: PUSH
23288: LD_VAR 0 4
23292: ARRAY
23293: PUSH
23294: LD_VAR 0 2
23298: PUSH
23299: LD_VAR 0 4
23303: ARRAY
23304: NONEQUAL
23305: IFFALSE 23317
// begin result := false ;
23307: LD_ADDR_VAR 0 3
23311: PUSH
23312: LD_INT 0
23314: ST_TO_ADDR
// break ;
23315: GO 23319
// end ;
23317: GO 23280
23319: POP
23320: POP
// end else
23321: GO 23331
// result := false ;
23323: LD_ADDR_VAR 0 3
23327: PUSH
23328: LD_INT 0
23330: ST_TO_ADDR
// end ;
23331: LD_VAR 0 3
23335: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
23336: LD_INT 0
23338: PPUSH
23339: PPUSH
// if not array1 or not array2 then
23340: LD_VAR 0 1
23344: NOT
23345: IFTRUE 23354
23347: PUSH
23348: LD_VAR 0 2
23352: NOT
23353: OR
23354: IFFALSE 23358
// exit ;
23356: GO 23422
// result := true ;
23358: LD_ADDR_VAR 0 3
23362: PUSH
23363: LD_INT 1
23365: ST_TO_ADDR
// for i = 1 to array1 do
23366: LD_ADDR_VAR 0 4
23370: PUSH
23371: DOUBLE
23372: LD_INT 1
23374: DEC
23375: ST_TO_ADDR
23376: LD_VAR 0 1
23380: PUSH
23381: FOR_TO
23382: IFFALSE 23420
// if array1 [ i ] <> array2 [ i ] then
23384: LD_VAR 0 1
23388: PUSH
23389: LD_VAR 0 4
23393: ARRAY
23394: PUSH
23395: LD_VAR 0 2
23399: PUSH
23400: LD_VAR 0 4
23404: ARRAY
23405: NONEQUAL
23406: IFFALSE 23418
// begin result := false ;
23408: LD_ADDR_VAR 0 3
23412: PUSH
23413: LD_INT 0
23415: ST_TO_ADDR
// break ;
23416: GO 23420
// end ;
23418: GO 23381
23420: POP
23421: POP
// end ;
23422: LD_VAR 0 3
23426: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23427: LD_INT 0
23429: PPUSH
23430: PPUSH
23431: PPUSH
// pom := GetBase ( fac ) ;
23432: LD_ADDR_VAR 0 5
23436: PUSH
23437: LD_VAR 0 1
23441: PPUSH
23442: CALL_OW 274
23446: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23447: LD_ADDR_VAR 0 4
23451: PUSH
23452: LD_VAR 0 2
23456: PUSH
23457: LD_INT 1
23459: ARRAY
23460: PPUSH
23461: LD_VAR 0 2
23465: PUSH
23466: LD_INT 2
23468: ARRAY
23469: PPUSH
23470: LD_VAR 0 2
23474: PUSH
23475: LD_INT 3
23477: ARRAY
23478: PPUSH
23479: LD_VAR 0 2
23483: PUSH
23484: LD_INT 4
23486: ARRAY
23487: PPUSH
23488: CALL_OW 449
23492: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23493: LD_ADDR_VAR 0 3
23497: PUSH
23498: LD_VAR 0 5
23502: PPUSH
23503: LD_INT 1
23505: PPUSH
23506: CALL_OW 275
23510: PUSH
23511: LD_VAR 0 4
23515: PUSH
23516: LD_INT 1
23518: ARRAY
23519: GREATEREQUAL
23520: IFFALSE 23546
23522: PUSH
23523: LD_VAR 0 5
23527: PPUSH
23528: LD_INT 2
23530: PPUSH
23531: CALL_OW 275
23535: PUSH
23536: LD_VAR 0 4
23540: PUSH
23541: LD_INT 2
23543: ARRAY
23544: GREATEREQUAL
23545: AND
23546: IFFALSE 23572
23548: PUSH
23549: LD_VAR 0 5
23553: PPUSH
23554: LD_INT 3
23556: PPUSH
23557: CALL_OW 275
23561: PUSH
23562: LD_VAR 0 4
23566: PUSH
23567: LD_INT 3
23569: ARRAY
23570: GREATEREQUAL
23571: AND
23572: ST_TO_ADDR
// end ;
23573: LD_VAR 0 3
23577: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23578: LD_INT 0
23580: PPUSH
23581: PPUSH
23582: PPUSH
23583: PPUSH
// pom := GetBase ( building ) ;
23584: LD_ADDR_VAR 0 3
23588: PUSH
23589: LD_VAR 0 1
23593: PPUSH
23594: CALL_OW 274
23598: ST_TO_ADDR
// if not pom then
23599: LD_VAR 0 3
23603: NOT
23604: IFFALSE 23608
// exit ;
23606: GO 23782
// btype := GetBType ( building ) ;
23608: LD_ADDR_VAR 0 5
23612: PUSH
23613: LD_VAR 0 1
23617: PPUSH
23618: CALL_OW 266
23622: ST_TO_ADDR
// if btype = b_armoury then
23623: LD_VAR 0 5
23627: PUSH
23628: LD_INT 4
23630: EQUAL
23631: IFFALSE 23641
// btype := b_barracks ;
23633: LD_ADDR_VAR 0 5
23637: PUSH
23638: LD_INT 5
23640: ST_TO_ADDR
// if btype = b_depot then
23641: LD_VAR 0 5
23645: PUSH
23646: LD_INT 0
23648: EQUAL
23649: IFFALSE 23659
// btype := b_warehouse ;
23651: LD_ADDR_VAR 0 5
23655: PUSH
23656: LD_INT 1
23658: ST_TO_ADDR
// if btype = b_workshop then
23659: LD_VAR 0 5
23663: PUSH
23664: LD_INT 2
23666: EQUAL
23667: IFFALSE 23677
// btype := b_factory ;
23669: LD_ADDR_VAR 0 5
23673: PUSH
23674: LD_INT 3
23676: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23677: LD_ADDR_VAR 0 4
23681: PUSH
23682: LD_VAR 0 5
23686: PPUSH
23687: LD_VAR 0 1
23691: PPUSH
23692: CALL_OW 248
23696: PPUSH
23697: CALL_OW 450
23701: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23702: LD_ADDR_VAR 0 2
23706: PUSH
23707: LD_VAR 0 3
23711: PPUSH
23712: LD_INT 1
23714: PPUSH
23715: CALL_OW 275
23719: PUSH
23720: LD_VAR 0 4
23724: PUSH
23725: LD_INT 1
23727: ARRAY
23728: GREATEREQUAL
23729: IFFALSE 23755
23731: PUSH
23732: LD_VAR 0 3
23736: PPUSH
23737: LD_INT 2
23739: PPUSH
23740: CALL_OW 275
23744: PUSH
23745: LD_VAR 0 4
23749: PUSH
23750: LD_INT 2
23752: ARRAY
23753: GREATEREQUAL
23754: AND
23755: IFFALSE 23781
23757: PUSH
23758: LD_VAR 0 3
23762: PPUSH
23763: LD_INT 3
23765: PPUSH
23766: CALL_OW 275
23770: PUSH
23771: LD_VAR 0 4
23775: PUSH
23776: LD_INT 3
23778: ARRAY
23779: GREATEREQUAL
23780: AND
23781: ST_TO_ADDR
// end ;
23782: LD_VAR 0 2
23786: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23787: LD_INT 0
23789: PPUSH
23790: PPUSH
23791: PPUSH
// pom := GetBase ( building ) ;
23792: LD_ADDR_VAR 0 4
23796: PUSH
23797: LD_VAR 0 1
23801: PPUSH
23802: CALL_OW 274
23806: ST_TO_ADDR
// if not pom then
23807: LD_VAR 0 4
23811: NOT
23812: IFFALSE 23816
// exit ;
23814: GO 23921
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23816: LD_ADDR_VAR 0 5
23820: PUSH
23821: LD_VAR 0 2
23825: PPUSH
23826: LD_VAR 0 1
23830: PPUSH
23831: CALL_OW 248
23835: PPUSH
23836: CALL_OW 450
23840: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23841: LD_ADDR_VAR 0 3
23845: PUSH
23846: LD_VAR 0 4
23850: PPUSH
23851: LD_INT 1
23853: PPUSH
23854: CALL_OW 275
23858: PUSH
23859: LD_VAR 0 5
23863: PUSH
23864: LD_INT 1
23866: ARRAY
23867: GREATEREQUAL
23868: IFFALSE 23894
23870: PUSH
23871: LD_VAR 0 4
23875: PPUSH
23876: LD_INT 2
23878: PPUSH
23879: CALL_OW 275
23883: PUSH
23884: LD_VAR 0 5
23888: PUSH
23889: LD_INT 2
23891: ARRAY
23892: GREATEREQUAL
23893: AND
23894: IFFALSE 23920
23896: PUSH
23897: LD_VAR 0 4
23901: PPUSH
23902: LD_INT 3
23904: PPUSH
23905: CALL_OW 275
23909: PUSH
23910: LD_VAR 0 5
23914: PUSH
23915: LD_INT 3
23917: ARRAY
23918: GREATEREQUAL
23919: AND
23920: ST_TO_ADDR
// end ;
23921: LD_VAR 0 3
23925: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23926: LD_INT 0
23928: PPUSH
23929: PPUSH
23930: PPUSH
23931: PPUSH
23932: PPUSH
23933: PPUSH
23934: PPUSH
23935: PPUSH
23936: PPUSH
23937: PPUSH
23938: PPUSH
// result := false ;
23939: LD_ADDR_VAR 0 8
23943: PUSH
23944: LD_INT 0
23946: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23947: LD_VAR 0 5
23951: NOT
23952: IFTRUE 23961
23954: PUSH
23955: LD_VAR 0 1
23959: NOT
23960: OR
23961: IFTRUE 23970
23963: PUSH
23964: LD_VAR 0 2
23968: NOT
23969: OR
23970: IFTRUE 23979
23972: PUSH
23973: LD_VAR 0 3
23977: NOT
23978: OR
23979: IFFALSE 23983
// exit ;
23981: GO 24809
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23983: LD_ADDR_VAR 0 14
23987: PUSH
23988: LD_VAR 0 1
23992: PPUSH
23993: LD_VAR 0 2
23997: PPUSH
23998: LD_VAR 0 3
24002: PPUSH
24003: LD_VAR 0 4
24007: PPUSH
24008: LD_VAR 0 5
24012: PUSH
24013: LD_INT 1
24015: ARRAY
24016: PPUSH
24017: CALL_OW 248
24021: PPUSH
24022: LD_INT 0
24024: PPUSH
24025: CALL 26090 0 6
24029: ST_TO_ADDR
// if not hexes then
24030: LD_VAR 0 14
24034: NOT
24035: IFFALSE 24039
// exit ;
24037: GO 24809
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24039: LD_ADDR_VAR 0 17
24043: PUSH
24044: LD_VAR 0 5
24048: PPUSH
24049: LD_INT 22
24051: PUSH
24052: LD_VAR 0 13
24056: PPUSH
24057: CALL_OW 255
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 2
24068: PUSH
24069: LD_INT 30
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 30
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PPUSH
24098: CALL_OW 72
24102: ST_TO_ADDR
// for i = 1 to hexes do
24103: LD_ADDR_VAR 0 9
24107: PUSH
24108: DOUBLE
24109: LD_INT 1
24111: DEC
24112: ST_TO_ADDR
24113: LD_VAR 0 14
24117: PUSH
24118: FOR_TO
24119: IFFALSE 24807
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24121: LD_ADDR_VAR 0 13
24125: PUSH
24126: LD_VAR 0 14
24130: PUSH
24131: LD_VAR 0 9
24135: ARRAY
24136: PUSH
24137: LD_INT 1
24139: ARRAY
24140: PPUSH
24141: LD_VAR 0 14
24145: PUSH
24146: LD_VAR 0 9
24150: ARRAY
24151: PUSH
24152: LD_INT 2
24154: ARRAY
24155: PPUSH
24156: CALL_OW 428
24160: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24161: LD_VAR 0 14
24165: PUSH
24166: LD_VAR 0 9
24170: ARRAY
24171: PUSH
24172: LD_INT 1
24174: ARRAY
24175: PPUSH
24176: LD_VAR 0 14
24180: PUSH
24181: LD_VAR 0 9
24185: ARRAY
24186: PUSH
24187: LD_INT 2
24189: ARRAY
24190: PPUSH
24191: CALL_OW 351
24195: IFTRUE 24234
24197: PUSH
24198: LD_VAR 0 14
24202: PUSH
24203: LD_VAR 0 9
24207: ARRAY
24208: PUSH
24209: LD_INT 1
24211: ARRAY
24212: PPUSH
24213: LD_VAR 0 14
24217: PUSH
24218: LD_VAR 0 9
24222: ARRAY
24223: PUSH
24224: LD_INT 2
24226: ARRAY
24227: PPUSH
24228: CALL_OW 488
24232: NOT
24233: OR
24234: IFTRUE 24251
24236: PUSH
24237: LD_VAR 0 13
24241: PPUSH
24242: CALL_OW 247
24246: PUSH
24247: LD_INT 3
24249: EQUAL
24250: OR
24251: IFFALSE 24257
// exit ;
24253: POP
24254: POP
24255: GO 24809
// if not tmp then
24257: LD_VAR 0 13
24261: NOT
24262: IFFALSE 24266
// continue ;
24264: GO 24118
// result := true ;
24266: LD_ADDR_VAR 0 8
24270: PUSH
24271: LD_INT 1
24273: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24274: LD_VAR 0 6
24278: IFFALSE 24295
24280: PUSH
24281: LD_VAR 0 13
24285: PPUSH
24286: CALL_OW 247
24290: PUSH
24291: LD_INT 2
24293: EQUAL
24294: AND
24295: IFFALSE 24312
24297: PUSH
24298: LD_VAR 0 13
24302: PPUSH
24303: CALL_OW 263
24307: PUSH
24308: LD_INT 1
24310: EQUAL
24311: AND
24312: IFFALSE 24476
// begin if IsDrivenBy ( tmp ) then
24314: LD_VAR 0 13
24318: PPUSH
24319: CALL_OW 311
24323: IFFALSE 24327
// continue ;
24325: GO 24118
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
24327: LD_VAR 0 6
24331: PPUSH
24332: LD_INT 3
24334: PUSH
24335: LD_INT 60
24337: PUSH
24338: EMPTY
24339: LIST
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 3
24347: PUSH
24348: LD_INT 55
24350: PUSH
24351: EMPTY
24352: LIST
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PPUSH
24362: CALL_OW 72
24366: IFFALSE 24474
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
24368: LD_ADDR_VAR 0 18
24372: PUSH
24373: LD_VAR 0 6
24377: PPUSH
24378: LD_INT 3
24380: PUSH
24381: LD_INT 60
24383: PUSH
24384: EMPTY
24385: LIST
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 3
24393: PUSH
24394: LD_INT 55
24396: PUSH
24397: EMPTY
24398: LIST
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PPUSH
24408: CALL_OW 72
24412: PUSH
24413: LD_INT 1
24415: ARRAY
24416: ST_TO_ADDR
// if IsInUnit ( driver ) then
24417: LD_VAR 0 18
24421: PPUSH
24422: CALL_OW 310
24426: IFFALSE 24437
// ComExit ( driver ) ;
24428: LD_VAR 0 18
24432: PPUSH
24433: CALL 50090 0 1
// AddComEnterUnit ( driver , tmp ) ;
24437: LD_VAR 0 18
24441: PPUSH
24442: LD_VAR 0 13
24446: PPUSH
24447: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
24451: LD_VAR 0 18
24455: PPUSH
24456: LD_VAR 0 7
24460: PPUSH
24461: CALL_OW 173
// AddComExitVehicle ( driver ) ;
24465: LD_VAR 0 18
24469: PPUSH
24470: CALL_OW 181
// end ; continue ;
24474: GO 24118
// end ; if not cleaners or not tmp in cleaners then
24476: LD_VAR 0 6
24480: NOT
24481: IFTRUE 24496
24483: PUSH
24484: LD_VAR 0 13
24488: PUSH
24489: LD_VAR 0 6
24493: IN
24494: NOT
24495: OR
24496: IFFALSE 24805
// begin if dep then
24498: LD_VAR 0 17
24502: IFFALSE 24638
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24504: LD_ADDR_VAR 0 16
24508: PUSH
24509: LD_VAR 0 17
24513: PUSH
24514: LD_INT 1
24516: ARRAY
24517: PPUSH
24518: CALL_OW 250
24522: PPUSH
24523: LD_VAR 0 17
24527: PUSH
24528: LD_INT 1
24530: ARRAY
24531: PPUSH
24532: CALL_OW 254
24536: PPUSH
24537: LD_INT 5
24539: PPUSH
24540: CALL_OW 272
24544: PUSH
24545: LD_VAR 0 17
24549: PUSH
24550: LD_INT 1
24552: ARRAY
24553: PPUSH
24554: CALL_OW 251
24558: PPUSH
24559: LD_VAR 0 17
24563: PUSH
24564: LD_INT 1
24566: ARRAY
24567: PPUSH
24568: CALL_OW 254
24572: PPUSH
24573: LD_INT 5
24575: PPUSH
24576: CALL_OW 273
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24585: LD_VAR 0 16
24589: PUSH
24590: LD_INT 1
24592: ARRAY
24593: PPUSH
24594: LD_VAR 0 16
24598: PUSH
24599: LD_INT 2
24601: ARRAY
24602: PPUSH
24603: CALL_OW 488
24607: IFFALSE 24638
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24609: LD_VAR 0 13
24613: PPUSH
24614: LD_VAR 0 16
24618: PUSH
24619: LD_INT 1
24621: ARRAY
24622: PPUSH
24623: LD_VAR 0 16
24627: PUSH
24628: LD_INT 2
24630: ARRAY
24631: PPUSH
24632: CALL_OW 111
// continue ;
24636: GO 24118
// end ; end ; r := GetDir ( tmp ) ;
24638: LD_ADDR_VAR 0 15
24642: PUSH
24643: LD_VAR 0 13
24647: PPUSH
24648: CALL_OW 254
24652: ST_TO_ADDR
// if r = 5 then
24653: LD_VAR 0 15
24657: PUSH
24658: LD_INT 5
24660: EQUAL
24661: IFFALSE 24671
// r := 0 ;
24663: LD_ADDR_VAR 0 15
24667: PUSH
24668: LD_INT 0
24670: ST_TO_ADDR
// for j = r to 5 do
24671: LD_ADDR_VAR 0 10
24675: PUSH
24676: DOUBLE
24677: LD_VAR 0 15
24681: DEC
24682: ST_TO_ADDR
24683: LD_INT 5
24685: PUSH
24686: FOR_TO
24687: IFFALSE 24803
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24689: LD_ADDR_VAR 0 11
24693: PUSH
24694: LD_VAR 0 13
24698: PPUSH
24699: CALL_OW 250
24703: PPUSH
24704: LD_VAR 0 10
24708: PPUSH
24709: LD_INT 2
24711: PPUSH
24712: CALL_OW 272
24716: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24717: LD_ADDR_VAR 0 12
24721: PUSH
24722: LD_VAR 0 13
24726: PPUSH
24727: CALL_OW 251
24731: PPUSH
24732: LD_VAR 0 10
24736: PPUSH
24737: LD_INT 2
24739: PPUSH
24740: CALL_OW 273
24744: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24745: LD_VAR 0 11
24749: PPUSH
24750: LD_VAR 0 12
24754: PPUSH
24755: CALL_OW 488
24759: IFFALSE 24778
24761: PUSH
24762: LD_VAR 0 11
24766: PPUSH
24767: LD_VAR 0 12
24771: PPUSH
24772: CALL_OW 428
24776: NOT
24777: AND
24778: IFFALSE 24801
// begin ComMoveXY ( tmp , _x , _y ) ;
24780: LD_VAR 0 13
24784: PPUSH
24785: LD_VAR 0 11
24789: PPUSH
24790: LD_VAR 0 12
24794: PPUSH
24795: CALL_OW 111
// break ;
24799: GO 24803
// end ; end ;
24801: GO 24686
24803: POP
24804: POP
// end ; end ;
24805: GO 24118
24807: POP
24808: POP
// end ;
24809: LD_VAR 0 8
24813: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24814: LD_INT 0
24816: PPUSH
// result := true ;
24817: LD_ADDR_VAR 0 3
24821: PUSH
24822: LD_INT 1
24824: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24825: LD_VAR 0 2
24829: PUSH
24830: LD_INT 24
24832: DOUBLE
24833: EQUAL
24834: IFTRUE 24844
24836: LD_INT 33
24838: DOUBLE
24839: EQUAL
24840: IFTRUE 24844
24842: GO 24869
24844: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24845: LD_ADDR_VAR 0 3
24849: PUSH
24850: LD_INT 32
24852: PPUSH
24853: LD_VAR 0 1
24857: PPUSH
24858: CALL_OW 321
24862: PUSH
24863: LD_INT 2
24865: EQUAL
24866: ST_TO_ADDR
24867: GO 25185
24869: LD_INT 20
24871: DOUBLE
24872: EQUAL
24873: IFTRUE 24877
24875: GO 24902
24877: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24878: LD_ADDR_VAR 0 3
24882: PUSH
24883: LD_INT 6
24885: PPUSH
24886: LD_VAR 0 1
24890: PPUSH
24891: CALL_OW 321
24895: PUSH
24896: LD_INT 2
24898: EQUAL
24899: ST_TO_ADDR
24900: GO 25185
24902: LD_INT 22
24904: DOUBLE
24905: EQUAL
24906: IFTRUE 24916
24908: LD_INT 36
24910: DOUBLE
24911: EQUAL
24912: IFTRUE 24916
24914: GO 24941
24916: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24917: LD_ADDR_VAR 0 3
24921: PUSH
24922: LD_INT 15
24924: PPUSH
24925: LD_VAR 0 1
24929: PPUSH
24930: CALL_OW 321
24934: PUSH
24935: LD_INT 2
24937: EQUAL
24938: ST_TO_ADDR
24939: GO 25185
24941: LD_INT 30
24943: DOUBLE
24944: EQUAL
24945: IFTRUE 24949
24947: GO 24974
24949: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24950: LD_ADDR_VAR 0 3
24954: PUSH
24955: LD_INT 20
24957: PPUSH
24958: LD_VAR 0 1
24962: PPUSH
24963: CALL_OW 321
24967: PUSH
24968: LD_INT 2
24970: EQUAL
24971: ST_TO_ADDR
24972: GO 25185
24974: LD_INT 28
24976: DOUBLE
24977: EQUAL
24978: IFTRUE 24988
24980: LD_INT 21
24982: DOUBLE
24983: EQUAL
24984: IFTRUE 24988
24986: GO 25013
24988: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24989: LD_ADDR_VAR 0 3
24993: PUSH
24994: LD_INT 21
24996: PPUSH
24997: LD_VAR 0 1
25001: PPUSH
25002: CALL_OW 321
25006: PUSH
25007: LD_INT 2
25009: EQUAL
25010: ST_TO_ADDR
25011: GO 25185
25013: LD_INT 16
25015: DOUBLE
25016: EQUAL
25017: IFTRUE 25021
25019: GO 25046
25021: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
25022: LD_ADDR_VAR 0 3
25026: PUSH
25027: LD_INT 84
25029: PPUSH
25030: LD_VAR 0 1
25034: PPUSH
25035: CALL_OW 321
25039: PUSH
25040: LD_INT 2
25042: EQUAL
25043: ST_TO_ADDR
25044: GO 25185
25046: LD_INT 19
25048: DOUBLE
25049: EQUAL
25050: IFTRUE 25060
25052: LD_INT 23
25054: DOUBLE
25055: EQUAL
25056: IFTRUE 25060
25058: GO 25085
25060: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
25061: LD_ADDR_VAR 0 3
25065: PUSH
25066: LD_INT 83
25068: PPUSH
25069: LD_VAR 0 1
25073: PPUSH
25074: CALL_OW 321
25078: PUSH
25079: LD_INT 2
25081: EQUAL
25082: ST_TO_ADDR
25083: GO 25185
25085: LD_INT 17
25087: DOUBLE
25088: EQUAL
25089: IFTRUE 25093
25091: GO 25118
25093: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
25094: LD_ADDR_VAR 0 3
25098: PUSH
25099: LD_INT 39
25101: PPUSH
25102: LD_VAR 0 1
25106: PPUSH
25107: CALL_OW 321
25111: PUSH
25112: LD_INT 2
25114: EQUAL
25115: ST_TO_ADDR
25116: GO 25185
25118: LD_INT 18
25120: DOUBLE
25121: EQUAL
25122: IFTRUE 25126
25124: GO 25151
25126: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
25127: LD_ADDR_VAR 0 3
25131: PUSH
25132: LD_INT 40
25134: PPUSH
25135: LD_VAR 0 1
25139: PPUSH
25140: CALL_OW 321
25144: PUSH
25145: LD_INT 2
25147: EQUAL
25148: ST_TO_ADDR
25149: GO 25185
25151: LD_INT 27
25153: DOUBLE
25154: EQUAL
25155: IFTRUE 25159
25157: GO 25184
25159: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25160: LD_ADDR_VAR 0 3
25164: PUSH
25165: LD_INT 35
25167: PPUSH
25168: LD_VAR 0 1
25172: PPUSH
25173: CALL_OW 321
25177: PUSH
25178: LD_INT 2
25180: EQUAL
25181: ST_TO_ADDR
25182: GO 25185
25184: POP
// end ;
25185: LD_VAR 0 3
25189: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25190: LD_INT 0
25192: PPUSH
25193: PPUSH
25194: PPUSH
25195: PPUSH
25196: PPUSH
25197: PPUSH
25198: PPUSH
25199: PPUSH
25200: PPUSH
25201: PPUSH
25202: PPUSH
// result := false ;
25203: LD_ADDR_VAR 0 6
25207: PUSH
25208: LD_INT 0
25210: ST_TO_ADDR
// if btype = b_depot then
25211: LD_VAR 0 2
25215: PUSH
25216: LD_INT 0
25218: EQUAL
25219: IFFALSE 25231
// begin result := true ;
25221: LD_ADDR_VAR 0 6
25225: PUSH
25226: LD_INT 1
25228: ST_TO_ADDR
// exit ;
25229: GO 26085
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25231: LD_VAR 0 1
25235: NOT
25236: IFTRUE 25261
25238: PUSH
25239: LD_VAR 0 1
25243: PPUSH
25244: CALL_OW 266
25248: PUSH
25249: LD_INT 0
25251: PUSH
25252: LD_INT 1
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: IN
25259: NOT
25260: OR
25261: IFTRUE 25270
25263: PUSH
25264: LD_VAR 0 2
25268: NOT
25269: OR
25270: IFTRUE 25306
25272: PUSH
25273: LD_VAR 0 5
25277: PUSH
25278: LD_INT 0
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: LD_INT 3
25289: PUSH
25290: LD_INT 4
25292: PUSH
25293: LD_INT 5
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: IN
25304: NOT
25305: OR
25306: IFTRUE 25325
25308: PUSH
25309: LD_VAR 0 3
25313: PPUSH
25314: LD_VAR 0 4
25318: PPUSH
25319: CALL_OW 488
25323: NOT
25324: OR
25325: IFFALSE 25329
// exit ;
25327: GO 26085
// side := GetSide ( depot ) ;
25329: LD_ADDR_VAR 0 9
25333: PUSH
25334: LD_VAR 0 1
25338: PPUSH
25339: CALL_OW 255
25343: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
25344: LD_VAR 0 9
25348: PPUSH
25349: LD_VAR 0 2
25353: PPUSH
25354: CALL 24814 0 2
25358: NOT
25359: IFFALSE 25363
// exit ;
25361: GO 26085
// pom := GetBase ( depot ) ;
25363: LD_ADDR_VAR 0 10
25367: PUSH
25368: LD_VAR 0 1
25372: PPUSH
25373: CALL_OW 274
25377: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25378: LD_ADDR_VAR 0 11
25382: PUSH
25383: LD_VAR 0 2
25387: PPUSH
25388: LD_VAR 0 1
25392: PPUSH
25393: CALL_OW 248
25397: PPUSH
25398: CALL_OW 450
25402: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25403: LD_VAR 0 10
25407: PPUSH
25408: LD_INT 1
25410: PPUSH
25411: CALL_OW 275
25415: PUSH
25416: LD_VAR 0 11
25420: PUSH
25421: LD_INT 1
25423: ARRAY
25424: GREATEREQUAL
25425: IFFALSE 25451
25427: PUSH
25428: LD_VAR 0 10
25432: PPUSH
25433: LD_INT 2
25435: PPUSH
25436: CALL_OW 275
25440: PUSH
25441: LD_VAR 0 11
25445: PUSH
25446: LD_INT 2
25448: ARRAY
25449: GREATEREQUAL
25450: AND
25451: IFFALSE 25477
25453: PUSH
25454: LD_VAR 0 10
25458: PPUSH
25459: LD_INT 3
25461: PPUSH
25462: CALL_OW 275
25466: PUSH
25467: LD_VAR 0 11
25471: PUSH
25472: LD_INT 3
25474: ARRAY
25475: GREATEREQUAL
25476: AND
25477: NOT
25478: IFFALSE 25482
// exit ;
25480: GO 26085
// if GetBType ( depot ) = b_depot then
25482: LD_VAR 0 1
25486: PPUSH
25487: CALL_OW 266
25491: PUSH
25492: LD_INT 0
25494: EQUAL
25495: IFFALSE 25507
// dist := 28 else
25497: LD_ADDR_VAR 0 14
25501: PUSH
25502: LD_INT 28
25504: ST_TO_ADDR
25505: GO 25515
// dist := 36 ;
25507: LD_ADDR_VAR 0 14
25511: PUSH
25512: LD_INT 36
25514: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25515: LD_VAR 0 1
25519: PPUSH
25520: LD_VAR 0 3
25524: PPUSH
25525: LD_VAR 0 4
25529: PPUSH
25530: CALL_OW 297
25534: PUSH
25535: LD_VAR 0 14
25539: GREATER
25540: IFFALSE 25544
// exit ;
25542: GO 26085
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25544: LD_ADDR_VAR 0 12
25548: PUSH
25549: LD_VAR 0 2
25553: PPUSH
25554: LD_VAR 0 3
25558: PPUSH
25559: LD_VAR 0 4
25563: PPUSH
25564: LD_VAR 0 5
25568: PPUSH
25569: LD_VAR 0 1
25573: PPUSH
25574: CALL_OW 248
25578: PPUSH
25579: LD_INT 0
25581: PPUSH
25582: CALL 26090 0 6
25586: ST_TO_ADDR
// if not hexes then
25587: LD_VAR 0 12
25591: NOT
25592: IFFALSE 25596
// exit ;
25594: GO 26085
// hex := GetHexInfo ( x , y ) ;
25596: LD_ADDR_VAR 0 15
25600: PUSH
25601: LD_VAR 0 3
25605: PPUSH
25606: LD_VAR 0 4
25610: PPUSH
25611: CALL_OW 546
25615: ST_TO_ADDR
// if hex [ 1 ] then
25616: LD_VAR 0 15
25620: PUSH
25621: LD_INT 1
25623: ARRAY
25624: IFFALSE 25628
// exit ;
25626: GO 26085
// height := hex [ 2 ] ;
25628: LD_ADDR_VAR 0 13
25632: PUSH
25633: LD_VAR 0 15
25637: PUSH
25638: LD_INT 2
25640: ARRAY
25641: ST_TO_ADDR
// for i = 1 to hexes do
25642: LD_ADDR_VAR 0 7
25646: PUSH
25647: DOUBLE
25648: LD_INT 1
25650: DEC
25651: ST_TO_ADDR
25652: LD_VAR 0 12
25656: PUSH
25657: FOR_TO
25658: IFFALSE 26002
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25660: LD_VAR 0 12
25664: PUSH
25665: LD_VAR 0 7
25669: ARRAY
25670: PUSH
25671: LD_INT 1
25673: ARRAY
25674: PPUSH
25675: LD_VAR 0 12
25679: PUSH
25680: LD_VAR 0 7
25684: ARRAY
25685: PUSH
25686: LD_INT 2
25688: ARRAY
25689: PPUSH
25690: CALL_OW 488
25694: NOT
25695: IFTRUE 25737
25697: PUSH
25698: LD_VAR 0 12
25702: PUSH
25703: LD_VAR 0 7
25707: ARRAY
25708: PUSH
25709: LD_INT 1
25711: ARRAY
25712: PPUSH
25713: LD_VAR 0 12
25717: PUSH
25718: LD_VAR 0 7
25722: ARRAY
25723: PUSH
25724: LD_INT 2
25726: ARRAY
25727: PPUSH
25728: CALL_OW 428
25732: PUSH
25733: LD_INT 0
25735: GREATER
25736: OR
25737: IFTRUE 25775
25739: PUSH
25740: LD_VAR 0 12
25744: PUSH
25745: LD_VAR 0 7
25749: ARRAY
25750: PUSH
25751: LD_INT 1
25753: ARRAY
25754: PPUSH
25755: LD_VAR 0 12
25759: PUSH
25760: LD_VAR 0 7
25764: ARRAY
25765: PUSH
25766: LD_INT 2
25768: ARRAY
25769: PPUSH
25770: CALL_OW 351
25774: OR
25775: IFFALSE 25781
// exit ;
25777: POP
25778: POP
25779: GO 26085
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25781: LD_ADDR_VAR 0 8
25785: PUSH
25786: LD_VAR 0 12
25790: PUSH
25791: LD_VAR 0 7
25795: ARRAY
25796: PUSH
25797: LD_INT 1
25799: ARRAY
25800: PPUSH
25801: LD_VAR 0 12
25805: PUSH
25806: LD_VAR 0 7
25810: ARRAY
25811: PUSH
25812: LD_INT 2
25814: ARRAY
25815: PPUSH
25816: CALL_OW 546
25820: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25821: LD_VAR 0 8
25825: PUSH
25826: LD_INT 1
25828: ARRAY
25829: IFTRUE 25851
25831: PUSH
25832: LD_VAR 0 8
25836: PUSH
25837: LD_INT 2
25839: ARRAY
25840: PUSH
25841: LD_VAR 0 13
25845: PUSH
25846: LD_INT 2
25848: PLUS
25849: GREATER
25850: OR
25851: IFTRUE 25873
25853: PUSH
25854: LD_VAR 0 8
25858: PUSH
25859: LD_INT 2
25861: ARRAY
25862: PUSH
25863: LD_VAR 0 13
25867: PUSH
25868: LD_INT 2
25870: MINUS
25871: LESS
25872: OR
25873: IFTRUE 25941
25875: PUSH
25876: LD_VAR 0 8
25880: PUSH
25881: LD_INT 3
25883: ARRAY
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: LD_INT 8
25890: PUSH
25891: LD_INT 9
25893: PUSH
25894: LD_INT 10
25896: PUSH
25897: LD_INT 11
25899: PUSH
25900: LD_INT 12
25902: PUSH
25903: LD_INT 13
25905: PUSH
25906: LD_INT 16
25908: PUSH
25909: LD_INT 17
25911: PUSH
25912: LD_INT 18
25914: PUSH
25915: LD_INT 19
25917: PUSH
25918: LD_INT 20
25920: PUSH
25921: LD_INT 21
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: IN
25939: NOT
25940: OR
25941: IFTRUE 25954
25943: PUSH
25944: LD_VAR 0 8
25948: PUSH
25949: LD_INT 5
25951: ARRAY
25952: NOT
25953: OR
25954: IFTRUE 25994
25956: PUSH
25957: LD_VAR 0 8
25961: PUSH
25962: LD_INT 6
25964: ARRAY
25965: PUSH
25966: LD_INT 1
25968: PUSH
25969: LD_INT 2
25971: PUSH
25972: LD_INT 7
25974: PUSH
25975: LD_INT 9
25977: PUSH
25978: LD_INT 10
25980: PUSH
25981: LD_INT 11
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: IN
25992: NOT
25993: OR
25994: IFFALSE 26000
// exit ;
25996: POP
25997: POP
25998: GO 26085
// end ;
26000: GO 25657
26002: POP
26003: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26004: LD_VAR 0 9
26008: PPUSH
26009: LD_VAR 0 3
26013: PPUSH
26014: LD_VAR 0 4
26018: PPUSH
26019: LD_INT 20
26021: PPUSH
26022: CALL 17904 0 4
26026: PUSH
26027: LD_INT 4
26029: ARRAY
26030: IFFALSE 26034
// exit ;
26032: GO 26085
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26034: LD_VAR 0 2
26038: PUSH
26039: LD_INT 29
26041: PUSH
26042: LD_INT 30
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: IN
26049: IFFALSE 26073
26051: PUSH
26052: LD_VAR 0 3
26056: PPUSH
26057: LD_VAR 0 4
26061: PPUSH
26062: LD_VAR 0 9
26066: PPUSH
26067: CALL_OW 440
26071: NOT
26072: AND
26073: IFFALSE 26077
// exit ;
26075: GO 26085
// result := true ;
26077: LD_ADDR_VAR 0 6
26081: PUSH
26082: LD_INT 1
26084: ST_TO_ADDR
// end ;
26085: LD_VAR 0 6
26089: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
26090: LD_INT 0
26092: PPUSH
26093: PPUSH
26094: PPUSH
26095: PPUSH
26096: PPUSH
26097: PPUSH
26098: PPUSH
26099: PPUSH
26100: PPUSH
26101: PPUSH
26102: PPUSH
26103: PPUSH
26104: PPUSH
26105: PPUSH
26106: PPUSH
26107: PPUSH
26108: PPUSH
26109: PPUSH
26110: PPUSH
26111: PPUSH
26112: PPUSH
26113: PPUSH
26114: PPUSH
26115: PPUSH
26116: PPUSH
26117: PPUSH
26118: PPUSH
26119: PPUSH
26120: PPUSH
26121: PPUSH
26122: PPUSH
26123: PPUSH
26124: PPUSH
26125: PPUSH
26126: PPUSH
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
26131: PPUSH
26132: PPUSH
26133: PPUSH
26134: PPUSH
26135: PPUSH
26136: PPUSH
26137: PPUSH
26138: PPUSH
26139: PPUSH
26140: PPUSH
26141: PPUSH
26142: PPUSH
26143: PPUSH
26144: PPUSH
26145: PPUSH
26146: PPUSH
26147: PPUSH
26148: PPUSH
26149: PPUSH
// result = [ ] ;
26150: LD_ADDR_VAR 0 7
26154: PUSH
26155: EMPTY
26156: ST_TO_ADDR
// temp_list = [ ] ;
26157: LD_ADDR_VAR 0 9
26161: PUSH
26162: EMPTY
26163: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26164: LD_VAR 0 4
26168: PUSH
26169: LD_INT 0
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: LD_INT 2
26177: PUSH
26178: LD_INT 3
26180: PUSH
26181: LD_INT 4
26183: PUSH
26184: LD_INT 5
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: IN
26195: NOT
26196: IFTRUE 26239
26198: PUSH
26199: LD_VAR 0 1
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: LD_INT 1
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: IN
26214: IFFALSE 26238
26216: PUSH
26217: LD_VAR 0 5
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 2
26227: PUSH
26228: LD_INT 3
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: LIST
26235: IN
26236: NOT
26237: AND
26238: OR
26239: IFFALSE 26243
// exit ;
26241: GO 44642
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26243: LD_VAR 0 1
26247: PUSH
26248: LD_INT 6
26250: PUSH
26251: LD_INT 7
26253: PUSH
26254: LD_INT 8
26256: PUSH
26257: LD_INT 13
26259: PUSH
26260: LD_INT 12
26262: PUSH
26263: LD_INT 15
26265: PUSH
26266: LD_INT 11
26268: PUSH
26269: LD_INT 14
26271: PUSH
26272: LD_INT 10
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: IN
26286: IFFALSE 26296
// btype = b_lab ;
26288: LD_ADDR_VAR 0 1
26292: PUSH
26293: LD_INT 6
26295: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26296: LD_VAR 0 6
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: LD_INT 1
26306: PUSH
26307: LD_INT 2
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: LIST
26314: IN
26315: NOT
26316: IFTRUE 26384
26318: PUSH
26319: LD_VAR 0 1
26323: PUSH
26324: LD_INT 0
26326: PUSH
26327: LD_INT 1
26329: PUSH
26330: LD_INT 2
26332: PUSH
26333: LD_INT 3
26335: PUSH
26336: LD_INT 6
26338: PUSH
26339: LD_INT 36
26341: PUSH
26342: LD_INT 4
26344: PUSH
26345: LD_INT 5
26347: PUSH
26348: LD_INT 31
26350: PUSH
26351: LD_INT 32
26353: PUSH
26354: LD_INT 33
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: IN
26370: NOT
26371: IFFALSE 26383
26373: PUSH
26374: LD_VAR 0 6
26378: PUSH
26379: LD_INT 1
26381: EQUAL
26382: AND
26383: OR
26384: IFTRUE 26416
26386: PUSH
26387: LD_VAR 0 1
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: LD_INT 3
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: IN
26402: NOT
26403: IFFALSE 26415
26405: PUSH
26406: LD_VAR 0 6
26410: PUSH
26411: LD_INT 2
26413: EQUAL
26414: AND
26415: OR
26416: IFFALSE 26426
// mode = 0 ;
26418: LD_ADDR_VAR 0 6
26422: PUSH
26423: LD_INT 0
26425: ST_TO_ADDR
// case mode of 0 :
26426: LD_VAR 0 6
26430: PUSH
26431: LD_INT 0
26433: DOUBLE
26434: EQUAL
26435: IFTRUE 26439
26437: GO 37892
26439: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26440: LD_ADDR_VAR 0 11
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 0
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: LD_INT 1
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: NEG
26510: PUSH
26511: LD_INT 1
26513: NEG
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 1
26521: NEG
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 0
26533: PUSH
26534: LD_INT 2
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: PUSH
26545: LD_INT 1
26547: NEG
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 1
26555: PUSH
26556: LD_INT 2
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 0
26565: PUSH
26566: LD_INT 2
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 1
26575: NEG
26576: PUSH
26577: LD_INT 1
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: LD_INT 3
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: LD_INT 3
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 1
26606: NEG
26607: PUSH
26608: LD_INT 2
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26633: LD_ADDR_VAR 0 12
26637: PUSH
26638: LD_INT 0
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 1
26661: PUSH
26662: LD_INT 0
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 1
26671: PUSH
26672: LD_INT 1
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: LD_INT 1
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: LD_INT 0
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 1
26702: NEG
26703: PUSH
26704: LD_INT 1
26706: NEG
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 1
26714: PUSH
26715: LD_INT 1
26717: NEG
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 2
26725: PUSH
26726: LD_INT 0
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 2
26735: PUSH
26736: LD_INT 1
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: NEG
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 2
26767: NEG
26768: PUSH
26769: LD_INT 1
26771: NEG
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 2
26779: NEG
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 3
26790: NEG
26791: PUSH
26792: LD_INT 0
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 3
26801: NEG
26802: PUSH
26803: LD_INT 1
26805: NEG
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26829: LD_ADDR_VAR 0 13
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: LD_INT 0
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 0
26846: PUSH
26847: LD_INT 1
26849: NEG
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 0
26877: PUSH
26878: LD_INT 1
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 1
26898: NEG
26899: PUSH
26900: LD_INT 1
26902: NEG
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: LD_INT 2
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 2
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 2
26932: PUSH
26933: LD_INT 2
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: LD_INT 2
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 2
26952: NEG
26953: PUSH
26954: LD_INT 1
26956: NEG
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 2
26964: NEG
26965: PUSH
26966: LD_INT 2
26968: NEG
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 2
26976: NEG
26977: PUSH
26978: LD_INT 3
26980: NEG
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 3
26988: NEG
26989: PUSH
26990: LD_INT 2
26992: NEG
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 3
27000: NEG
27001: PUSH
27002: LD_INT 3
27004: NEG
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27028: LD_ADDR_VAR 0 14
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: LD_INT 1
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 1
27086: NEG
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: NEG
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: NEG
27110: PUSH
27111: LD_INT 2
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: LD_INT 2
27124: NEG
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: LD_INT 1
27135: NEG
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 1
27143: PUSH
27144: LD_INT 2
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: LD_INT 2
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: LD_INT 1
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: LD_INT 3
27178: NEG
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 0
27186: PUSH
27187: LD_INT 3
27189: NEG
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 1
27197: PUSH
27198: LD_INT 2
27200: NEG
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27224: LD_ADDR_VAR 0 15
27228: PUSH
27229: LD_INT 0
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 0
27241: PUSH
27242: LD_INT 1
27244: NEG
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 1
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 1
27293: NEG
27294: PUSH
27295: LD_INT 1
27297: NEG
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 2
27316: PUSH
27317: LD_INT 0
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 2
27326: PUSH
27327: LD_INT 1
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 2
27347: NEG
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 2
27358: NEG
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: LD_INT 1
27373: NEG
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 3
27381: PUSH
27382: LD_INT 0
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 3
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27417: LD_ADDR_VAR 0 16
27421: PUSH
27422: LD_INT 0
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: LD_INT 1
27437: NEG
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 1
27475: NEG
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: NEG
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: NEG
27499: PUSH
27500: LD_INT 2
27502: NEG
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 2
27510: PUSH
27511: LD_INT 1
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 2
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 1
27530: PUSH
27531: LD_INT 2
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 2
27540: NEG
27541: PUSH
27542: LD_INT 1
27544: NEG
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 2
27552: NEG
27553: PUSH
27554: LD_INT 2
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 3
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 3
27574: PUSH
27575: LD_INT 3
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 2
27584: PUSH
27585: LD_INT 3
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27610: LD_ADDR_VAR 0 17
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 0
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: LD_INT 0
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 1
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 0
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 1
27668: NEG
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 1
27679: NEG
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: NEG
27692: PUSH
27693: LD_INT 2
27695: NEG
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: LD_INT 2
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: PUSH
27715: LD_INT 1
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 2
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 2
27745: PUSH
27746: LD_INT 2
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 0
27765: PUSH
27766: LD_INT 2
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 2
27786: NEG
27787: PUSH
27788: LD_INT 0
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 2
27797: NEG
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 2
27809: NEG
27810: PUSH
27811: LD_INT 2
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27840: LD_ADDR_VAR 0 18
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 0
27857: PUSH
27858: LD_INT 1
27860: NEG
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: LD_INT 0
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 1
27878: PUSH
27879: LD_INT 1
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 0
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 1
27898: NEG
27899: PUSH
27900: LD_INT 0
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 1
27909: NEG
27910: PUSH
27911: LD_INT 1
27913: NEG
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 1
27921: NEG
27922: PUSH
27923: LD_INT 2
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: LD_INT 2
27936: NEG
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: LD_INT 1
27947: NEG
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 0
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 2
27965: PUSH
27966: LD_INT 1
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 2
27975: PUSH
27976: LD_INT 2
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: PUSH
27986: LD_INT 2
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: LD_INT 2
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 1
28005: NEG
28006: PUSH
28007: LD_INT 1
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 2
28016: NEG
28017: PUSH
28018: LD_INT 0
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 2
28027: NEG
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 2
28039: NEG
28040: PUSH
28041: LD_INT 2
28043: NEG
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28070: LD_ADDR_VAR 0 19
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: LD_INT 0
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 0
28087: PUSH
28088: LD_INT 1
28090: NEG
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 1
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 0
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: LD_INT 1
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: LD_INT 2
28155: NEG
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: LD_INT 2
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: LD_INT 1
28177: NEG
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 2
28185: PUSH
28186: LD_INT 0
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 2
28195: PUSH
28196: LD_INT 1
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 2
28205: PUSH
28206: LD_INT 2
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: LD_INT 2
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 0
28225: PUSH
28226: LD_INT 2
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 2
28246: NEG
28247: PUSH
28248: LD_INT 0
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 2
28257: NEG
28258: PUSH
28259: LD_INT 1
28261: NEG
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 2
28269: NEG
28270: PUSH
28271: LD_INT 2
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28300: LD_ADDR_VAR 0 20
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: LD_INT 0
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: LD_INT 1
28320: NEG
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: NEG
28370: PUSH
28371: LD_INT 1
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 1
28381: NEG
28382: PUSH
28383: LD_INT 2
28385: NEG
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: LD_INT 2
28396: NEG
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 1
28404: PUSH
28405: LD_INT 1
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 2
28415: PUSH
28416: LD_INT 0
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 2
28425: PUSH
28426: LD_INT 1
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 2
28435: PUSH
28436: LD_INT 2
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: PUSH
28446: LD_INT 2
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 0
28455: PUSH
28456: LD_INT 2
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: LD_INT 1
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 2
28476: NEG
28477: PUSH
28478: LD_INT 0
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 2
28487: NEG
28488: PUSH
28489: LD_INT 1
28491: NEG
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 2
28499: NEG
28500: PUSH
28501: LD_INT 2
28503: NEG
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28530: LD_ADDR_VAR 0 21
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 0
28547: PUSH
28548: LD_INT 1
28550: NEG
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: LD_INT 0
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 0
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: LD_INT 1
28603: NEG
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: PUSH
28613: LD_INT 2
28615: NEG
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: LD_INT 2
28626: NEG
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: LD_INT 1
28637: NEG
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 2
28645: PUSH
28646: LD_INT 0
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 2
28655: PUSH
28656: LD_INT 1
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 2
28665: PUSH
28666: LD_INT 2
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 1
28675: PUSH
28676: LD_INT 2
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 0
28685: PUSH
28686: LD_INT 2
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: LD_INT 1
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 2
28706: NEG
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 2
28717: NEG
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 2
28729: NEG
28730: PUSH
28731: LD_INT 2
28733: NEG
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28760: LD_ADDR_VAR 0 22
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: LD_INT 0
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 0
28777: PUSH
28778: LD_INT 1
28780: NEG
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: LD_INT 0
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 0
28808: PUSH
28809: LD_INT 1
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 1
28818: NEG
28819: PUSH
28820: LD_INT 0
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 1
28829: NEG
28830: PUSH
28831: LD_INT 1
28833: NEG
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 1
28841: NEG
28842: PUSH
28843: LD_INT 2
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 2
28856: NEG
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: LD_INT 1
28867: NEG
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 2
28875: PUSH
28876: LD_INT 0
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 2
28885: PUSH
28886: LD_INT 1
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 2
28895: PUSH
28896: LD_INT 2
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 1
28905: PUSH
28906: LD_INT 2
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: LD_INT 2
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 2
28936: NEG
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 2
28947: NEG
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 2
28959: NEG
28960: PUSH
28961: LD_INT 2
28963: NEG
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28990: LD_ADDR_VAR 0 23
28994: PUSH
28995: LD_INT 0
28997: PUSH
28998: LD_INT 0
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: LD_INT 1
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 1
29018: PUSH
29019: LD_INT 0
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 1
29028: PUSH
29029: LD_INT 1
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: LD_INT 1
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 1
29048: NEG
29049: PUSH
29050: LD_INT 0
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: LD_INT 1
29063: NEG
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 1
29071: NEG
29072: PUSH
29073: LD_INT 2
29075: NEG
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 0
29083: PUSH
29084: LD_INT 2
29086: NEG
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 1
29094: PUSH
29095: LD_INT 1
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 2
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 2
29115: PUSH
29116: LD_INT 1
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 2
29125: PUSH
29126: LD_INT 2
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 1
29135: PUSH
29136: LD_INT 2
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: LD_INT 2
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 1
29155: NEG
29156: PUSH
29157: LD_INT 1
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 2
29166: NEG
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 2
29177: NEG
29178: PUSH
29179: LD_INT 1
29181: NEG
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 2
29189: NEG
29190: PUSH
29191: LD_INT 2
29193: NEG
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 2
29201: NEG
29202: PUSH
29203: LD_INT 3
29205: NEG
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: LD_INT 3
29217: NEG
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 1
29225: PUSH
29226: LD_INT 2
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 2
29236: PUSH
29237: LD_INT 1
29239: NEG
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29270: LD_ADDR_VAR 0 24
29274: PUSH
29275: LD_INT 0
29277: PUSH
29278: LD_INT 0
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: LD_INT 1
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: PUSH
29309: LD_INT 1
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 0
29318: PUSH
29319: LD_INT 1
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 1
29328: NEG
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 1
29339: NEG
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 1
29351: NEG
29352: PUSH
29353: LD_INT 2
29355: NEG
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: LD_INT 2
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 1
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 2
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: LD_INT 2
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 1
29415: PUSH
29416: LD_INT 2
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: LD_INT 2
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: NEG
29436: PUSH
29437: LD_INT 1
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 2
29446: NEG
29447: PUSH
29448: LD_INT 0
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 2
29457: NEG
29458: PUSH
29459: LD_INT 1
29461: NEG
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 2
29469: NEG
29470: PUSH
29471: LD_INT 2
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: PUSH
29482: LD_INT 2
29484: NEG
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: LD_INT 1
29495: NEG
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 3
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 3
29513: PUSH
29514: LD_INT 2
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29546: LD_ADDR_VAR 0 25
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: LD_INT 0
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 1
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: LD_INT 1
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 0
29594: PUSH
29595: LD_INT 1
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 1
29604: NEG
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 1
29615: NEG
29616: PUSH
29617: LD_INT 1
29619: NEG
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 1
29627: NEG
29628: PUSH
29629: LD_INT 2
29631: NEG
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: LD_INT 2
29642: NEG
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 1
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 2
29661: PUSH
29662: LD_INT 0
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 2
29671: PUSH
29672: LD_INT 1
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 2
29681: PUSH
29682: LD_INT 2
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 1
29691: PUSH
29692: LD_INT 2
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: LD_INT 2
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 1
29711: NEG
29712: PUSH
29713: LD_INT 1
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 2
29722: NEG
29723: PUSH
29724: LD_INT 0
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 2
29733: NEG
29734: PUSH
29735: LD_INT 1
29737: NEG
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 2
29745: NEG
29746: PUSH
29747: LD_INT 2
29749: NEG
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 3
29757: PUSH
29758: LD_INT 1
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 3
29767: PUSH
29768: LD_INT 2
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 2
29777: PUSH
29778: LD_INT 3
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: LD_INT 3
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29820: LD_ADDR_VAR 0 26
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: LD_INT 0
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 0
29837: PUSH
29838: LD_INT 1
29840: NEG
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 1
29848: PUSH
29849: LD_INT 0
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 1
29858: PUSH
29859: LD_INT 1
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 0
29868: PUSH
29869: LD_INT 1
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: LD_INT 0
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 1
29889: NEG
29890: PUSH
29891: LD_INT 1
29893: NEG
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 1
29901: NEG
29902: PUSH
29903: LD_INT 2
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 0
29913: PUSH
29914: LD_INT 2
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 1
29924: PUSH
29925: LD_INT 1
29927: NEG
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 2
29935: PUSH
29936: LD_INT 0
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 2
29945: PUSH
29946: LD_INT 1
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 2
29955: PUSH
29956: LD_INT 2
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 1
29965: PUSH
29966: LD_INT 2
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 0
29975: PUSH
29976: LD_INT 2
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 1
29985: NEG
29986: PUSH
29987: LD_INT 1
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 2
29996: NEG
29997: PUSH
29998: LD_INT 0
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 2
30007: NEG
30008: PUSH
30009: LD_INT 1
30011: NEG
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: LD_INT 2
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 2
30031: PUSH
30032: LD_INT 3
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: LD_INT 3
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 1
30051: NEG
30052: PUSH
30053: LD_INT 2
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 2
30062: NEG
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30096: LD_ADDR_VAR 0 27
30100: PUSH
30101: LD_INT 0
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: LD_INT 1
30116: NEG
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 1
30124: PUSH
30125: LD_INT 0
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 1
30134: PUSH
30135: LD_INT 1
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 0
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 1
30154: NEG
30155: PUSH
30156: LD_INT 0
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 1
30165: NEG
30166: PUSH
30167: LD_INT 1
30169: NEG
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 1
30177: NEG
30178: PUSH
30179: LD_INT 2
30181: NEG
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 0
30189: PUSH
30190: LD_INT 2
30192: NEG
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 1
30200: PUSH
30201: LD_INT 1
30203: NEG
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 2
30211: PUSH
30212: LD_INT 0
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 2
30221: PUSH
30222: LD_INT 1
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 2
30231: PUSH
30232: LD_INT 2
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: LD_INT 2
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: LD_INT 2
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: NEG
30262: PUSH
30263: LD_INT 1
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 2
30272: NEG
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 2
30283: NEG
30284: PUSH
30285: LD_INT 1
30287: NEG
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 2
30295: NEG
30296: PUSH
30297: LD_INT 2
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: NEG
30308: PUSH
30309: LD_INT 2
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 2
30318: NEG
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 3
30329: NEG
30330: PUSH
30331: LD_INT 1
30333: NEG
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 3
30341: NEG
30342: PUSH
30343: LD_INT 2
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30376: LD_ADDR_VAR 0 28
30380: PUSH
30381: LD_INT 0
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 1
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 1
30414: PUSH
30415: LD_INT 1
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 0
30424: PUSH
30425: LD_INT 1
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 1
30434: NEG
30435: PUSH
30436: LD_INT 0
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 1
30445: NEG
30446: PUSH
30447: LD_INT 1
30449: NEG
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 1
30457: NEG
30458: PUSH
30459: LD_INT 2
30461: NEG
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: LD_INT 2
30472: NEG
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: LD_INT 1
30483: NEG
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 2
30491: PUSH
30492: LD_INT 0
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 2
30501: PUSH
30502: LD_INT 1
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 2
30511: PUSH
30512: LD_INT 2
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 1
30521: PUSH
30522: LD_INT 2
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: LD_INT 2
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: LD_INT 1
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 2
30552: NEG
30553: PUSH
30554: LD_INT 0
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 2
30563: NEG
30564: PUSH
30565: LD_INT 1
30567: NEG
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 2
30575: NEG
30576: PUSH
30577: LD_INT 2
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 2
30587: NEG
30588: PUSH
30589: LD_INT 3
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: NEG
30600: PUSH
30601: LD_INT 3
30603: NEG
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 3
30611: NEG
30612: PUSH
30613: LD_INT 1
30615: NEG
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 3
30623: NEG
30624: PUSH
30625: LD_INT 2
30627: NEG
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30658: LD_ADDR_VAR 0 29
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: LD_INT 0
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: LD_INT 1
30678: NEG
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: LD_INT 0
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PUSH
30741: LD_INT 2
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 0
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: LD_INT 1
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 2
30773: PUSH
30774: LD_INT 0
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 2
30783: PUSH
30784: LD_INT 1
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: LD_INT 2
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: LD_INT 2
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 1
30813: NEG
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 2
30824: NEG
30825: PUSH
30826: LD_INT 1
30828: NEG
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 2
30836: NEG
30837: PUSH
30838: LD_INT 2
30840: NEG
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 2
30848: NEG
30849: PUSH
30850: LD_INT 3
30852: NEG
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 2
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 3
30871: PUSH
30872: LD_INT 1
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 1
30881: PUSH
30882: LD_INT 3
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 3
30902: NEG
30903: PUSH
30904: LD_INT 2
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30937: LD_ADDR_VAR 0 30
30941: PUSH
30942: LD_INT 0
30944: PUSH
30945: LD_INT 0
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: LD_INT 1
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: LD_INT 0
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: PUSH
30976: LD_INT 1
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 0
30985: PUSH
30986: LD_INT 1
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: LD_INT 0
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 1
31018: NEG
31019: PUSH
31020: LD_INT 2
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 0
31030: PUSH
31031: LD_INT 2
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: LD_INT 1
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 2
31052: PUSH
31053: LD_INT 0
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 2
31062: PUSH
31063: LD_INT 1
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 2
31072: PUSH
31073: LD_INT 2
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 1
31082: PUSH
31083: LD_INT 2
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 1
31092: NEG
31093: PUSH
31094: LD_INT 1
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 2
31103: NEG
31104: PUSH
31105: LD_INT 0
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 2
31114: NEG
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 1
31126: NEG
31127: PUSH
31128: LD_INT 3
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: LD_INT 2
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 3
31149: PUSH
31150: LD_INT 2
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 2
31159: PUSH
31160: LD_INT 3
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 2
31169: NEG
31170: PUSH
31171: LD_INT 1
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 3
31180: NEG
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31215: LD_ADDR_VAR 0 31
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: LD_INT 0
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: LD_INT 1
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 1
31284: NEG
31285: PUSH
31286: LD_INT 1
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: LD_INT 2
31300: NEG
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 1
31308: PUSH
31309: LD_INT 1
31311: NEG
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 2
31319: PUSH
31320: LD_INT 0
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 2
31329: PUSH
31330: LD_INT 1
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 2
31339: PUSH
31340: LD_INT 2
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: LD_INT 2
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: LD_INT 2
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 1
31369: NEG
31370: PUSH
31371: LD_INT 1
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 2
31380: NEG
31381: PUSH
31382: LD_INT 1
31384: NEG
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 2
31392: NEG
31393: PUSH
31394: LD_INT 2
31396: NEG
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 2
31404: NEG
31405: PUSH
31406: LD_INT 3
31408: NEG
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 3
31427: PUSH
31428: LD_INT 1
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: LD_INT 3
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 1
31447: NEG
31448: PUSH
31449: LD_INT 2
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 3
31458: NEG
31459: PUSH
31460: LD_INT 2
31462: NEG
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31493: LD_ADDR_VAR 0 32
31497: PUSH
31498: LD_INT 0
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 0
31510: PUSH
31511: LD_INT 1
31513: NEG
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 1
31521: PUSH
31522: LD_INT 0
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: LD_INT 1
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: LD_INT 1
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 1
31562: NEG
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 1
31574: NEG
31575: PUSH
31576: LD_INT 2
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 0
31586: PUSH
31587: LD_INT 2
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 1
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 2
31608: PUSH
31609: LD_INT 1
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 1
31628: PUSH
31629: LD_INT 2
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 0
31638: PUSH
31639: LD_INT 2
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 1
31648: NEG
31649: PUSH
31650: LD_INT 1
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 2
31659: NEG
31660: PUSH
31661: LD_INT 0
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 2
31670: NEG
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: LD_INT 3
31686: NEG
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 1
31694: PUSH
31695: LD_INT 2
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 3
31705: PUSH
31706: LD_INT 2
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 2
31715: PUSH
31716: LD_INT 3
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 2
31725: NEG
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 3
31736: NEG
31737: PUSH
31738: LD_INT 1
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31771: LD_ADDR_VAR 0 33
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 1
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 0
31819: PUSH
31820: LD_INT 1
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: NEG
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: NEG
31841: PUSH
31842: LD_INT 1
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: LD_INT 2
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: LD_INT 1
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 2
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 2
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: PUSH
31896: LD_INT 2
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 0
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: NEG
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: NEG
31950: PUSH
31951: LD_INT 2
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 2
31961: NEG
31962: PUSH
31963: LD_INT 3
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 3
31984: PUSH
31985: LD_INT 1
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: LD_INT 3
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: LD_INT 2
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 3
32015: NEG
32016: PUSH
32017: LD_INT 2
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32050: LD_ADDR_VAR 0 34
32054: PUSH
32055: LD_INT 0
32057: PUSH
32058: LD_INT 0
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: LD_INT 1
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 1
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: LD_INT 1
32123: NEG
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: NEG
32132: PUSH
32133: LD_INT 2
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 0
32143: PUSH
32144: LD_INT 2
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 1
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 2
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 2
32175: PUSH
32176: LD_INT 2
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: LD_INT 2
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 1
32195: NEG
32196: PUSH
32197: LD_INT 1
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 2
32206: NEG
32207: PUSH
32208: LD_INT 0
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 2
32217: NEG
32218: PUSH
32219: LD_INT 1
32221: NEG
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 2
32229: NEG
32230: PUSH
32231: LD_INT 2
32233: NEG
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: LD_INT 3
32245: NEG
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 1
32253: PUSH
32254: LD_INT 2
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 3
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 2
32274: PUSH
32275: LD_INT 3
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 2
32284: NEG
32285: PUSH
32286: LD_INT 1
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 3
32295: NEG
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32330: LD_ADDR_VAR 0 35
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: LD_INT 0
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: LD_INT 1
32350: NEG
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: PUSH
32359: LD_INT 0
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: LD_INT 1
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 1
32388: NEG
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 1
32399: NEG
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 2
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 2
32421: NEG
32422: PUSH
32423: LD_INT 1
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32442: LD_ADDR_VAR 0 36
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: LD_INT 1
32462: NEG
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: LD_INT 1
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: LD_INT 1
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 1
32500: NEG
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 1
32511: NEG
32512: PUSH
32513: LD_INT 1
32515: NEG
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: LD_INT 2
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 1
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32554: LD_ADDR_VAR 0 37
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: LD_INT 0
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 0
32571: PUSH
32572: LD_INT 1
32574: NEG
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 1
32592: PUSH
32593: LD_INT 1
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: LD_INT 1
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 1
32623: NEG
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: LD_INT 1
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: LD_INT 1
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32666: LD_ADDR_VAR 0 38
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: LD_INT 1
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 0
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: LD_INT 1
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 2
32747: PUSH
32748: LD_INT 1
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 2
32757: NEG
32758: PUSH
32759: LD_INT 1
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32778: LD_ADDR_VAR 0 39
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: LD_INT 0
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 0
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 0
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: LD_INT 1
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 1
32859: NEG
32860: PUSH
32861: LD_INT 2
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: LD_INT 2
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32890: LD_ADDR_VAR 0 40
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 0
32907: PUSH
32908: LD_INT 1
32910: NEG
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 1
32918: PUSH
32919: LD_INT 0
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: LD_INT 1
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: LD_INT 1
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: LD_INT 1
32963: NEG
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: LD_INT 1
32974: NEG
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 1
32982: NEG
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33002: LD_ADDR_VAR 0 41
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: LD_INT 1
33022: NEG
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 0
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: NEG
33061: PUSH
33062: LD_INT 0
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 1
33071: NEG
33072: PUSH
33073: LD_INT 1
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: LD_INT 2
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 1
33095: PUSH
33096: LD_INT 1
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 2
33106: PUSH
33107: LD_INT 0
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 2
33126: PUSH
33127: LD_INT 2
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: NEG
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 2
33157: NEG
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 2
33168: NEG
33169: PUSH
33170: LD_INT 1
33172: NEG
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 2
33180: NEG
33181: PUSH
33182: LD_INT 2
33184: NEG
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 2
33192: NEG
33193: PUSH
33194: LD_INT 3
33196: NEG
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 2
33204: PUSH
33205: LD_INT 1
33207: NEG
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 3
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 3
33225: PUSH
33226: LD_INT 1
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 3
33235: PUSH
33236: LD_INT 2
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 3
33245: PUSH
33246: LD_INT 3
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 2
33255: PUSH
33256: LD_INT 3
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 2
33265: NEG
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 3
33276: NEG
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 3
33287: NEG
33288: PUSH
33289: LD_INT 1
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 3
33299: NEG
33300: PUSH
33301: LD_INT 2
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 3
33311: NEG
33312: PUSH
33313: LD_INT 3
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33352: LD_ADDR_VAR 0 42
33356: PUSH
33357: LD_INT 0
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: LD_INT 1
33372: NEG
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: LD_INT 0
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 0
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: NEG
33411: PUSH
33412: LD_INT 0
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 1
33421: NEG
33422: PUSH
33423: LD_INT 1
33425: NEG
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 1
33433: NEG
33434: PUSH
33435: LD_INT 2
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: LD_INT 2
33448: NEG
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: LD_INT 1
33459: NEG
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 2
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 2
33477: PUSH
33478: LD_INT 2
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: LD_INT 2
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: LD_INT 2
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 1
33507: NEG
33508: PUSH
33509: LD_INT 1
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 2
33518: NEG
33519: PUSH
33520: LD_INT 1
33522: NEG
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 2
33530: NEG
33531: PUSH
33532: LD_INT 2
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 2
33542: NEG
33543: PUSH
33544: LD_INT 3
33546: NEG
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 1
33554: NEG
33555: PUSH
33556: LD_INT 3
33558: NEG
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: LD_INT 3
33569: NEG
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 1
33577: PUSH
33578: LD_INT 2
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 3
33588: PUSH
33589: LD_INT 2
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 3
33598: PUSH
33599: LD_INT 3
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: LD_INT 3
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: LD_INT 3
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: LD_INT 3
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 1
33638: NEG
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 3
33649: NEG
33650: PUSH
33651: LD_INT 2
33653: NEG
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 3
33661: NEG
33662: PUSH
33663: LD_INT 3
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33702: LD_ADDR_VAR 0 43
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 0
33719: PUSH
33720: LD_INT 1
33722: NEG
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: LD_INT 1
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 0
33750: PUSH
33751: LD_INT 1
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 1
33760: NEG
33761: PUSH
33762: LD_INT 0
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: LD_INT 1
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: NEG
33784: PUSH
33785: LD_INT 2
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 0
33795: PUSH
33796: LD_INT 2
33798: NEG
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 1
33806: PUSH
33807: LD_INT 1
33809: NEG
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 2
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 2
33827: PUSH
33828: LD_INT 1
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: LD_INT 2
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: LD_INT 2
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: LD_INT 1
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 2
33868: NEG
33869: PUSH
33870: LD_INT 0
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 2
33879: NEG
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: LD_INT 3
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 0
33903: PUSH
33904: LD_INT 3
33906: NEG
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: LD_INT 2
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 2
33925: PUSH
33926: LD_INT 1
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 3
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 3
33946: PUSH
33947: LD_INT 1
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: PUSH
33957: LD_INT 3
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: LD_INT 3
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: NEG
33977: PUSH
33978: LD_INT 2
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 2
33987: NEG
33988: PUSH
33989: LD_INT 1
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 3
33998: NEG
33999: PUSH
34000: LD_INT 0
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 3
34009: NEG
34010: PUSH
34011: LD_INT 1
34013: NEG
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34050: LD_ADDR_VAR 0 44
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: LD_INT 0
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: LD_INT 1
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 1
34088: PUSH
34089: LD_INT 1
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: LD_INT 1
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 1
34108: NEG
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: LD_INT 1
34123: NEG
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 1
34131: NEG
34132: PUSH
34133: LD_INT 2
34135: NEG
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: LD_INT 1
34146: NEG
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 2
34154: PUSH
34155: LD_INT 0
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 2
34164: PUSH
34165: LD_INT 1
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 2
34174: PUSH
34175: LD_INT 2
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: NEG
34195: PUSH
34196: LD_INT 1
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 2
34205: NEG
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 2
34216: NEG
34217: PUSH
34218: LD_INT 1
34220: NEG
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 2
34228: NEG
34229: PUSH
34230: LD_INT 2
34232: NEG
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 2
34240: NEG
34241: PUSH
34242: LD_INT 3
34244: NEG
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 2
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 3
34263: PUSH
34264: LD_INT 0
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 3
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 3
34283: PUSH
34284: LD_INT 2
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 3
34293: PUSH
34294: LD_INT 3
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 2
34303: PUSH
34304: LD_INT 3
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 2
34313: NEG
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 3
34324: NEG
34325: PUSH
34326: LD_INT 0
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 3
34335: NEG
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 3
34347: NEG
34348: PUSH
34349: LD_INT 2
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 3
34359: NEG
34360: PUSH
34361: LD_INT 3
34363: NEG
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34400: LD_ADDR_VAR 0 45
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: LD_INT 0
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: LD_INT 1
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: LD_INT 0
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 1
34438: PUSH
34439: LD_INT 1
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 0
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 1
34458: NEG
34459: PUSH
34460: LD_INT 0
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 1
34469: NEG
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 1
34481: NEG
34482: PUSH
34483: LD_INT 2
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: LD_INT 2
34496: NEG
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 2
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 2
34525: PUSH
34526: LD_INT 2
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 1
34535: PUSH
34536: LD_INT 2
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 0
34545: PUSH
34546: LD_INT 2
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 1
34555: NEG
34556: PUSH
34557: LD_INT 1
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 2
34566: NEG
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 2
34578: NEG
34579: PUSH
34580: LD_INT 2
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 2
34590: NEG
34591: PUSH
34592: LD_INT 3
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 1
34602: NEG
34603: PUSH
34604: LD_INT 3
34606: NEG
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 0
34614: PUSH
34615: LD_INT 3
34617: NEG
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 1
34625: PUSH
34626: LD_INT 2
34628: NEG
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 3
34636: PUSH
34637: LD_INT 2
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 3
34646: PUSH
34647: LD_INT 3
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 2
34656: PUSH
34657: LD_INT 3
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: PUSH
34667: LD_INT 3
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: LD_INT 3
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 1
34686: NEG
34687: PUSH
34688: LD_INT 2
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 3
34697: NEG
34698: PUSH
34699: LD_INT 2
34701: NEG
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 3
34709: NEG
34710: PUSH
34711: LD_INT 3
34713: NEG
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34750: LD_ADDR_VAR 0 46
34754: PUSH
34755: LD_INT 0
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: LD_INT 1
34770: NEG
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: LD_INT 0
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 1
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: LD_INT 1
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: NEG
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: LD_INT 2
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: LD_INT 1
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 2
34875: PUSH
34876: LD_INT 1
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: PUSH
34886: LD_INT 2
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 0
34895: PUSH
34896: LD_INT 2
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 1
34905: NEG
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 2
34916: NEG
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 2
34927: NEG
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: NEG
34940: PUSH
34941: LD_INT 3
34943: NEG
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 0
34951: PUSH
34952: LD_INT 3
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: LD_INT 2
34965: NEG
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 3
34984: PUSH
34985: LD_INT 0
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 3
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: PUSH
35005: LD_INT 3
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 0
35014: PUSH
35015: LD_INT 3
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 1
35024: NEG
35025: PUSH
35026: LD_INT 2
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 2
35035: NEG
35036: PUSH
35037: LD_INT 1
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 3
35046: NEG
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 3
35057: NEG
35058: PUSH
35059: LD_INT 1
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35098: LD_ADDR_VAR 0 47
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: LD_INT 1
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: LD_INT 1
35171: NEG
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 1
35179: NEG
35180: PUSH
35181: LD_INT 2
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 0
35191: PUSH
35192: LD_INT 2
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 1
35202: PUSH
35203: LD_INT 1
35205: NEG
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 2
35213: NEG
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 2
35225: NEG
35226: PUSH
35227: LD_INT 2
35229: NEG
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35249: LD_ADDR_VAR 0 48
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: LD_INT 1
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 1
35307: NEG
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 1
35318: NEG
35319: PUSH
35320: LD_INT 1
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 1
35330: NEG
35331: PUSH
35332: LD_INT 2
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 0
35342: PUSH
35343: LD_INT 2
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 1
35353: PUSH
35354: LD_INT 1
35356: NEG
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 2
35364: PUSH
35365: LD_INT 0
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 2
35374: PUSH
35375: LD_INT 1
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35396: LD_ADDR_VAR 0 49
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 0
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 1
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: LD_INT 1
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 1
35454: NEG
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 1
35465: NEG
35466: PUSH
35467: LD_INT 1
35469: NEG
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: LD_INT 1
35480: NEG
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 2
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 2
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 2
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: LD_INT 2
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35540: LD_ADDR_VAR 0 50
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: LD_INT 1
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: LD_INT 0
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 1
35598: NEG
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: NEG
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: LD_INT 1
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 2
35631: PUSH
35632: LD_INT 2
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 1
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: LD_INT 2
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35684: LD_ADDR_VAR 0 51
35688: PUSH
35689: LD_INT 0
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 0
35701: PUSH
35702: LD_INT 1
35704: NEG
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 1
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: LD_INT 1
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 1
35753: NEG
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: LD_INT 2
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 2
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 2
35796: NEG
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 2
35807: NEG
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35831: LD_ADDR_VAR 0 52
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: LD_INT 0
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 1
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: LD_INT 1
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: NEG
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 1
35912: NEG
35913: PUSH
35914: LD_INT 2
35916: NEG
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 1
35924: NEG
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 2
35935: NEG
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 2
35946: NEG
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 2
35958: NEG
35959: PUSH
35960: LD_INT 2
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35982: LD_ADDR_VAR 0 53
35986: PUSH
35987: LD_INT 0
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: LD_INT 1
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 1
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 1
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 1
36040: NEG
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: LD_INT 1
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 1
36063: NEG
36064: PUSH
36065: LD_INT 2
36067: NEG
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: LD_INT 2
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: LD_INT 1
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 2
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 2
36107: PUSH
36108: LD_INT 1
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 2
36117: PUSH
36118: LD_INT 2
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: LD_INT 2
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 2
36158: NEG
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 2
36169: NEG
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 2
36181: NEG
36182: PUSH
36183: LD_INT 2
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36212: LD_ADDR_VAR 0 54
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: NEG
36282: PUSH
36283: LD_INT 1
36285: NEG
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: LD_INT 2
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: LD_INT 2
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: LD_INT 1
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 2
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: NEG
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 2
36388: NEG
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 2
36399: NEG
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 2
36411: NEG
36412: PUSH
36413: LD_INT 2
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36442: LD_ADDR_VAR 0 55
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: LD_INT 1
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 1
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 1
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: LD_INT 1
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 1
36500: NEG
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: LD_INT 1
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: LD_INT 2
36527: NEG
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: LD_INT 2
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: LD_INT 1
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 2
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 2
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 2
36577: PUSH
36578: LD_INT 2
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: LD_INT 2
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: LD_INT 2
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 1
36607: NEG
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 2
36618: NEG
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 2
36629: NEG
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 2
36641: NEG
36642: PUSH
36643: LD_INT 2
36645: NEG
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36672: LD_ADDR_VAR 0 56
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: LD_INT 0
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: LD_INT 1
36692: NEG
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 1
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 1
36710: PUSH
36711: LD_INT 1
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: LD_INT 1
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: LD_INT 0
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: LD_INT 1
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: LD_INT 2
36757: NEG
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: LD_INT 2
36768: NEG
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 1
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 2
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 2
36797: PUSH
36798: LD_INT 1
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: LD_INT 2
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 1
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 0
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 1
36837: NEG
36838: PUSH
36839: LD_INT 1
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 2
36848: NEG
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 2
36859: NEG
36860: PUSH
36861: LD_INT 1
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 2
36871: NEG
36872: PUSH
36873: LD_INT 2
36875: NEG
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36902: LD_ADDR_VAR 0 57
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: LD_INT 0
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 1
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: LD_INT 1
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: LD_INT 2
36987: NEG
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 2
36998: NEG
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: LD_INT 1
37009: NEG
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 2
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 2
37027: PUSH
37028: LD_INT 1
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: LD_INT 2
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: LD_INT 2
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: LD_INT 2
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: LD_INT 1
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 2
37078: NEG
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 2
37089: NEG
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 2
37101: NEG
37102: PUSH
37103: LD_INT 2
37105: NEG
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37132: LD_ADDR_VAR 0 58
37136: PUSH
37137: LD_INT 0
37139: PUSH
37140: LD_INT 0
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: LD_INT 1
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 1
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 1
37170: PUSH
37171: LD_INT 1
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: LD_INT 1
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: NEG
37202: PUSH
37203: LD_INT 1
37205: NEG
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 1
37213: NEG
37214: PUSH
37215: LD_INT 2
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: LD_INT 2
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 1
37236: PUSH
37237: LD_INT 1
37239: NEG
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 2
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 2
37257: PUSH
37258: LD_INT 1
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 2
37267: PUSH
37268: LD_INT 2
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: LD_INT 2
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: LD_INT 2
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: LD_INT 1
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 2
37308: NEG
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 2
37319: NEG
37320: PUSH
37321: LD_INT 1
37323: NEG
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 2
37331: NEG
37332: PUSH
37333: LD_INT 2
37335: NEG
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37362: LD_ADDR_VAR 0 59
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: LD_INT 0
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 1
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 0
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: NEG
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37450: LD_ADDR_VAR 0 60
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 1
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 1
37519: NEG
37520: PUSH
37521: LD_INT 1
37523: NEG
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37538: LD_ADDR_VAR 0 61
37542: PUSH
37543: LD_INT 0
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: LD_INT 1
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 1
37607: NEG
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37626: LD_ADDR_VAR 0 62
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 1
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37714: LD_ADDR_VAR 0 63
37718: PUSH
37719: LD_INT 0
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 0
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: LD_INT 1
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 1
37783: NEG
37784: PUSH
37785: LD_INT 1
37787: NEG
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37802: LD_ADDR_VAR 0 64
37806: PUSH
37807: LD_INT 0
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 0
37819: PUSH
37820: LD_INT 1
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 1
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 1
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: LD_INT 1
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 1
37871: NEG
37872: PUSH
37873: LD_INT 1
37875: NEG
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: ST_TO_ADDR
// end ; 1 :
37890: GO 43787
37892: LD_INT 1
37894: DOUBLE
37895: EQUAL
37896: IFTRUE 37900
37898: GO 40523
37900: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37901: LD_ADDR_VAR 0 11
37905: PUSH
37906: LD_INT 1
37908: NEG
37909: PUSH
37910: LD_INT 3
37912: NEG
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 0
37920: PUSH
37921: LD_INT 3
37923: NEG
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: LD_INT 2
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37945: LD_ADDR_VAR 0 12
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 3
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 3
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: LIST
37985: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37986: LD_ADDR_VAR 0 13
37990: PUSH
37991: LD_INT 3
37993: PUSH
37994: LD_INT 2
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 3
38003: PUSH
38004: LD_INT 3
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 2
38013: PUSH
38014: LD_INT 3
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38026: LD_ADDR_VAR 0 14
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: LD_INT 3
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: LD_INT 3
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: LD_INT 2
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: LIST
38066: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38067: LD_ADDR_VAR 0 15
38071: PUSH
38072: LD_INT 2
38074: NEG
38075: PUSH
38076: LD_INT 1
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 3
38085: NEG
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 3
38096: NEG
38097: PUSH
38098: LD_INT 1
38100: NEG
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38111: LD_ADDR_VAR 0 16
38115: PUSH
38116: LD_INT 2
38118: NEG
38119: PUSH
38120: LD_INT 3
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 3
38130: NEG
38131: PUSH
38132: LD_INT 2
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 3
38142: NEG
38143: PUSH
38144: LD_INT 3
38146: NEG
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: LIST
38156: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38157: LD_ADDR_VAR 0 17
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: LD_INT 3
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 0
38176: PUSH
38177: LD_INT 3
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 1
38187: PUSH
38188: LD_INT 2
38190: NEG
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: LIST
38200: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38201: LD_ADDR_VAR 0 18
38205: PUSH
38206: LD_INT 2
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 3
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 3
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: LIST
38241: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38242: LD_ADDR_VAR 0 19
38246: PUSH
38247: LD_INT 3
38249: PUSH
38250: LD_INT 2
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 3
38259: PUSH
38260: LD_INT 3
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: LD_INT 3
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: LIST
38281: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38282: LD_ADDR_VAR 0 20
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: LD_INT 3
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: LD_INT 3
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: NEG
38310: PUSH
38311: LD_INT 2
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: LIST
38322: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38323: LD_ADDR_VAR 0 21
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 3
38341: NEG
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 3
38352: NEG
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38367: LD_ADDR_VAR 0 22
38371: PUSH
38372: LD_INT 2
38374: NEG
38375: PUSH
38376: LD_INT 3
38378: NEG
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 3
38386: NEG
38387: PUSH
38388: LD_INT 2
38390: NEG
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 3
38398: NEG
38399: PUSH
38400: LD_INT 3
38402: NEG
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: LIST
38412: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38413: LD_ADDR_VAR 0 23
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: LD_INT 3
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: LD_INT 4
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: LD_INT 3
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38457: LD_ADDR_VAR 0 24
38461: PUSH
38462: LD_INT 3
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 3
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 4
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: LIST
38497: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38498: LD_ADDR_VAR 0 25
38502: PUSH
38503: LD_INT 3
38505: PUSH
38506: LD_INT 3
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 4
38515: PUSH
38516: LD_INT 3
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 3
38525: PUSH
38526: LD_INT 4
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: LIST
38537: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38538: LD_ADDR_VAR 0 26
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: LD_INT 3
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: LD_INT 4
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: LD_INT 3
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: LIST
38578: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38579: LD_ADDR_VAR 0 27
38583: PUSH
38584: LD_INT 3
38586: NEG
38587: PUSH
38588: LD_INT 0
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 3
38597: NEG
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 4
38608: NEG
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38623: LD_ADDR_VAR 0 28
38627: PUSH
38628: LD_INT 3
38630: NEG
38631: PUSH
38632: LD_INT 3
38634: NEG
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 3
38642: NEG
38643: PUSH
38644: LD_INT 4
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 4
38654: NEG
38655: PUSH
38656: LD_INT 3
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38669: LD_ADDR_VAR 0 29
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: LD_INT 3
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: LD_INT 3
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: LD_INT 4
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: LD_INT 4
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 1
38733: PUSH
38734: LD_INT 3
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: LD_INT 5
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: LD_INT 5
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 1
38767: PUSH
38768: LD_INT 4
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: NEG
38779: PUSH
38780: LD_INT 6
38782: NEG
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: LD_INT 6
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: LD_INT 5
38804: NEG
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38824: LD_ADDR_VAR 0 30
38828: PUSH
38829: LD_INT 2
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 3
38842: PUSH
38843: LD_INT 0
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 3
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 3
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 4
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 4
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 4
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 5
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 5
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 5
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 6
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 6
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38967: LD_ADDR_VAR 0 31
38971: PUSH
38972: LD_INT 3
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 3
38984: PUSH
38985: LD_INT 3
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 2
38994: PUSH
38995: LD_INT 3
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 4
39004: PUSH
39005: LD_INT 3
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 4
39014: PUSH
39015: LD_INT 4
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 3
39024: PUSH
39025: LD_INT 4
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 5
39034: PUSH
39035: LD_INT 4
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 5
39044: PUSH
39045: LD_INT 5
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 4
39054: PUSH
39055: LD_INT 5
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 6
39064: PUSH
39065: LD_INT 5
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 6
39074: PUSH
39075: LD_INT 6
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 5
39084: PUSH
39085: LD_INT 6
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39106: LD_ADDR_VAR 0 32
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: LD_INT 3
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: LD_INT 3
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: LD_INT 2
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 1
39144: PUSH
39145: LD_INT 4
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: LD_INT 4
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: LD_INT 3
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 5
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: LD_INT 5
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: LD_INT 4
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: LD_INT 6
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: LD_INT 6
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: LD_INT 5
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39249: LD_ADDR_VAR 0 33
39253: PUSH
39254: LD_INT 2
39256: NEG
39257: PUSH
39258: LD_INT 1
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 3
39267: NEG
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 3
39278: NEG
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 3
39290: NEG
39291: PUSH
39292: LD_INT 1
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 4
39301: NEG
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 4
39312: NEG
39313: PUSH
39314: LD_INT 1
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 4
39324: NEG
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 5
39335: NEG
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 5
39346: NEG
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 5
39358: NEG
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 6
39369: NEG
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 6
39380: NEG
39381: PUSH
39382: LD_INT 1
39384: NEG
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39404: LD_ADDR_VAR 0 34
39408: PUSH
39409: LD_INT 2
39411: NEG
39412: PUSH
39413: LD_INT 3
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 3
39423: NEG
39424: PUSH
39425: LD_INT 2
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 3
39435: NEG
39436: PUSH
39437: LD_INT 3
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 3
39447: NEG
39448: PUSH
39449: LD_INT 4
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 4
39459: NEG
39460: PUSH
39461: LD_INT 3
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 4
39471: NEG
39472: PUSH
39473: LD_INT 4
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 4
39483: NEG
39484: PUSH
39485: LD_INT 5
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 5
39495: NEG
39496: PUSH
39497: LD_INT 4
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 5
39507: NEG
39508: PUSH
39509: LD_INT 5
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 5
39519: NEG
39520: PUSH
39521: LD_INT 6
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 6
39531: NEG
39532: PUSH
39533: LD_INT 5
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 6
39543: NEG
39544: PUSH
39545: LD_INT 6
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39567: LD_ADDR_VAR 0 41
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: LD_INT 2
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 3
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: LIST
39610: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39611: LD_ADDR_VAR 0 42
39615: PUSH
39616: LD_INT 2
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 3
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: LIST
39651: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39652: LD_ADDR_VAR 0 43
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 3
39669: PUSH
39670: LD_INT 2
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: LD_INT 3
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: LIST
39691: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39692: LD_ADDR_VAR 0 44
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 3
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39733: LD_ADDR_VAR 0 45
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 2
39751: NEG
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 3
39762: NEG
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: LIST
39776: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39777: LD_ADDR_VAR 0 46
39781: PUSH
39782: LD_INT 2
39784: NEG
39785: PUSH
39786: LD_INT 2
39788: NEG
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 2
39796: NEG
39797: PUSH
39798: LD_INT 3
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 3
39808: NEG
39809: PUSH
39810: LD_INT 2
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: LIST
39822: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39823: LD_ADDR_VAR 0 47
39827: PUSH
39828: LD_INT 2
39830: NEG
39831: PUSH
39832: LD_INT 3
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 1
39842: NEG
39843: PUSH
39844: LD_INT 3
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39856: LD_ADDR_VAR 0 48
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: LD_INT 2
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 2
39874: PUSH
39875: LD_INT 1
39877: NEG
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39887: LD_ADDR_VAR 0 49
39891: PUSH
39892: LD_INT 3
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 3
39904: PUSH
39905: LD_INT 2
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39916: LD_ADDR_VAR 0 50
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: LD_INT 3
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 3
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39945: LD_ADDR_VAR 0 51
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 2
39963: NEG
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39976: LD_ADDR_VAR 0 52
39980: PUSH
39981: LD_INT 3
39983: NEG
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 3
39995: NEG
39996: PUSH
39997: LD_INT 2
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40009: LD_ADDR_VAR 0 53
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: LD_INT 3
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: LD_INT 3
40031: NEG
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: LD_INT 2
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: LIST
40052: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40053: LD_ADDR_VAR 0 54
40057: PUSH
40058: LD_INT 2
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 3
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 3
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: LIST
40093: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40094: LD_ADDR_VAR 0 55
40098: PUSH
40099: LD_INT 3
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 3
40111: PUSH
40112: LD_INT 3
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 3
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40134: LD_ADDR_VAR 0 56
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: LD_INT 3
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: LD_INT 3
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: LD_INT 2
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: LIST
40174: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40175: LD_ADDR_VAR 0 57
40179: PUSH
40180: LD_INT 2
40182: NEG
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 3
40193: NEG
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 3
40204: NEG
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40219: LD_ADDR_VAR 0 58
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: LD_INT 3
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 3
40238: NEG
40239: PUSH
40240: LD_INT 2
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 3
40250: NEG
40251: PUSH
40252: LD_INT 3
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: LIST
40264: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40265: LD_ADDR_VAR 0 59
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: LD_INT 2
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: LD_INT 2
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: LIST
40308: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40309: LD_ADDR_VAR 0 60
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 2
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: LIST
40349: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40350: LD_ADDR_VAR 0 61
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: PUSH
40368: LD_INT 2
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: LD_INT 2
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: LIST
40389: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40390: LD_ADDR_VAR 0 62
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: LD_INT 2
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: LD_INT 2
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: NEG
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: LIST
40430: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40431: LD_ADDR_VAR 0 63
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: NEG
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: LIST
40474: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40475: LD_ADDR_VAR 0 64
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: LD_INT 2
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 2
40494: NEG
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: NEG
40507: PUSH
40508: LD_INT 2
40510: NEG
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: LIST
40520: ST_TO_ADDR
// end ; 2 :
40521: GO 43787
40523: LD_INT 2
40525: DOUBLE
40526: EQUAL
40527: IFTRUE 40531
40529: GO 43786
40531: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40532: LD_ADDR_VAR 0 29
40536: PUSH
40537: LD_INT 4
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 4
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 5
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 5
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 4
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 3
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 3
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 3
40611: PUSH
40612: LD_INT 2
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 5
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 3
40632: PUSH
40633: LD_INT 3
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 3
40642: PUSH
40643: LD_INT 2
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 4
40652: PUSH
40653: LD_INT 3
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 4
40662: PUSH
40663: LD_INT 4
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 3
40672: PUSH
40673: LD_INT 4
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: LD_INT 3
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 2
40692: PUSH
40693: LD_INT 2
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 4
40702: PUSH
40703: LD_INT 2
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 2
40712: PUSH
40713: LD_INT 4
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 0
40722: PUSH
40723: LD_INT 4
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_INT 3
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: LD_INT 4
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: LD_INT 5
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 5
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: LD_INT 4
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: LD_INT 3
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 2
40794: PUSH
40795: LD_INT 5
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 2
40804: NEG
40805: PUSH
40806: LD_INT 3
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 3
40815: NEG
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 3
40826: NEG
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 2
40849: NEG
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 3
40860: NEG
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 4
40871: NEG
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 4
40882: NEG
40883: PUSH
40884: LD_INT 1
40886: NEG
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 4
40894: NEG
40895: PUSH
40896: LD_INT 2
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 2
40906: NEG
40907: PUSH
40908: LD_INT 2
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 4
40917: NEG
40918: PUSH
40919: LD_INT 4
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 4
40929: NEG
40930: PUSH
40931: LD_INT 5
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 3
40941: NEG
40942: PUSH
40943: LD_INT 4
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 3
40953: NEG
40954: PUSH
40955: LD_INT 3
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 4
40965: NEG
40966: PUSH
40967: LD_INT 3
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 5
40977: NEG
40978: PUSH
40979: LD_INT 4
40981: NEG
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 5
40989: NEG
40990: PUSH
40991: LD_INT 5
40993: NEG
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 3
41001: NEG
41002: PUSH
41003: LD_INT 5
41005: NEG
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 5
41013: NEG
41014: PUSH
41015: LD_INT 3
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41070: LD_ADDR_VAR 0 30
41074: PUSH
41075: LD_INT 4
41077: PUSH
41078: LD_INT 4
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 4
41087: PUSH
41088: LD_INT 3
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 5
41097: PUSH
41098: LD_INT 4
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 5
41107: PUSH
41108: LD_INT 5
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 4
41117: PUSH
41118: LD_INT 5
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 3
41127: PUSH
41128: LD_INT 4
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 3
41137: PUSH
41138: LD_INT 3
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 5
41147: PUSH
41148: LD_INT 3
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 3
41157: PUSH
41158: LD_INT 5
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 3
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 2
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: LD_INT 3
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: LD_INT 4
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: LD_INT 4
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: LD_INT 3
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: PUSH
41240: LD_INT 4
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 2
41249: NEG
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 4
41260: NEG
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 4
41271: NEG
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 3
41283: NEG
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 3
41294: NEG
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 4
41305: NEG
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 5
41316: NEG
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 5
41327: NEG
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 5
41339: NEG
41340: PUSH
41341: LD_INT 2
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 3
41351: NEG
41352: PUSH
41353: LD_INT 2
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 3
41362: NEG
41363: PUSH
41364: LD_INT 3
41366: NEG
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 3
41374: NEG
41375: PUSH
41376: LD_INT 4
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: LD_INT 3
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 2
41398: NEG
41399: PUSH
41400: LD_INT 2
41402: NEG
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 3
41410: NEG
41411: PUSH
41412: LD_INT 2
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 4
41422: NEG
41423: PUSH
41424: LD_INT 3
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 4
41434: NEG
41435: PUSH
41436: LD_INT 4
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 2
41446: NEG
41447: PUSH
41448: LD_INT 4
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 4
41458: NEG
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: LD_INT 4
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: LD_INT 5
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 4
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: LD_INT 3
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: LD_INT 3
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: LD_INT 4
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: LD_INT 5
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 2
41549: PUSH
41550: LD_INT 3
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: LD_INT 5
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41617: LD_ADDR_VAR 0 31
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: LD_INT 4
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: LD_INT 3
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: LD_INT 4
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: LD_INT 5
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 5
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 4
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: LD_INT 3
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: LD_INT 5
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: LD_INT 3
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 3
41717: NEG
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 3
41728: NEG
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 3
41762: NEG
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 4
41773: NEG
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 4
41784: NEG
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 4
41796: NEG
41797: PUSH
41798: LD_INT 2
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: LD_INT 2
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 4
41819: NEG
41820: PUSH
41821: LD_INT 4
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 4
41831: NEG
41832: PUSH
41833: LD_INT 5
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 3
41843: NEG
41844: PUSH
41845: LD_INT 4
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 3
41855: NEG
41856: PUSH
41857: LD_INT 3
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 4
41867: NEG
41868: PUSH
41869: LD_INT 3
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 5
41879: NEG
41880: PUSH
41881: LD_INT 4
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 5
41891: NEG
41892: PUSH
41893: LD_INT 5
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 3
41903: NEG
41904: PUSH
41905: LD_INT 5
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 5
41915: NEG
41916: PUSH
41917: LD_INT 3
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 3
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: LD_INT 4
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: LD_INT 3
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: LD_INT 2
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: LD_INT 2
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: NEG
41983: PUSH
41984: LD_INT 3
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: NEG
41995: PUSH
41996: LD_INT 4
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 2
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 2
42017: NEG
42018: PUSH
42019: LD_INT 4
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 4
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 4
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 5
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 5
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 4
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 3
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 3
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 3
42101: PUSH
42102: LD_INT 2
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 5
42112: PUSH
42113: LD_INT 2
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42167: LD_ADDR_VAR 0 32
42171: PUSH
42172: LD_INT 4
42174: NEG
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 4
42185: NEG
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 3
42197: NEG
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 3
42208: NEG
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 4
42219: NEG
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 5
42230: NEG
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 5
42241: NEG
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 5
42253: NEG
42254: PUSH
42255: LD_INT 2
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 3
42265: NEG
42266: PUSH
42267: LD_INT 2
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 3
42276: NEG
42277: PUSH
42278: LD_INT 3
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 3
42288: NEG
42289: PUSH
42290: LD_INT 4
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 2
42300: NEG
42301: PUSH
42302: LD_INT 3
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 2
42312: NEG
42313: PUSH
42314: LD_INT 2
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 3
42324: NEG
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 4
42336: NEG
42337: PUSH
42338: LD_INT 3
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 4
42348: NEG
42349: PUSH
42350: LD_INT 4
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 2
42360: NEG
42361: PUSH
42362: LD_INT 4
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 4
42372: NEG
42373: PUSH
42374: LD_INT 2
42376: NEG
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: LD_INT 4
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 5
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 4
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 3
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 3
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: LD_INT 4
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: LD_INT 5
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: LD_INT 3
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: LD_INT 5
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 3
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 3
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 4
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 4
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 3
42527: PUSH
42528: LD_INT 1
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 2
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: LD_INT 1
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 2
42558: PUSH
42559: LD_INT 2
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 4
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 4
42579: PUSH
42580: LD_INT 4
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 4
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 5
42599: PUSH
42600: LD_INT 4
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 5
42609: PUSH
42610: LD_INT 5
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 4
42619: PUSH
42620: LD_INT 5
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 3
42629: PUSH
42630: LD_INT 4
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 3
42639: PUSH
42640: LD_INT 3
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 5
42649: PUSH
42650: LD_INT 3
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 3
42659: PUSH
42660: LD_INT 5
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42714: LD_ADDR_VAR 0 33
42718: PUSH
42719: LD_INT 4
42721: NEG
42722: PUSH
42723: LD_INT 4
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 4
42733: NEG
42734: PUSH
42735: LD_INT 5
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 3
42745: NEG
42746: PUSH
42747: LD_INT 4
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 3
42757: NEG
42758: PUSH
42759: LD_INT 3
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 4
42769: NEG
42770: PUSH
42771: LD_INT 3
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 5
42781: NEG
42782: PUSH
42783: LD_INT 4
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 5
42793: NEG
42794: PUSH
42795: LD_INT 5
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 3
42805: NEG
42806: PUSH
42807: LD_INT 5
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 5
42817: NEG
42818: PUSH
42819: LD_INT 3
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: LD_INT 3
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_INT 4
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: LD_INT 3
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: LD_INT 2
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 2
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: NEG
42885: PUSH
42886: LD_INT 3
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: LD_INT 4
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 2
42908: PUSH
42909: LD_INT 2
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: NEG
42920: PUSH
42921: LD_INT 4
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 4
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 4
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 5
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 5
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 4
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 3
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 3
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 3
43003: PUSH
43004: LD_INT 2
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 5
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 3
43024: PUSH
43025: LD_INT 3
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 3
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 4
43044: PUSH
43045: LD_INT 3
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 4
43054: PUSH
43055: LD_INT 4
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 3
43064: PUSH
43065: LD_INT 4
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: LD_INT 3
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 4
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: LD_INT 4
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 4
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: LD_INT 3
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: LD_INT 4
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 5
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 5
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: LD_INT 4
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: LD_INT 3
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 2
43186: PUSH
43187: LD_INT 5
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 2
43196: NEG
43197: PUSH
43198: LD_INT 3
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43252: LD_ADDR_VAR 0 34
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: LD_INT 4
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 5
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 4
43284: NEG
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: LD_INT 3
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: LD_INT 3
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: LD_INT 4
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 5
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: LD_INT 3
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: NEG
43350: PUSH
43351: LD_INT 5
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 3
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 3
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 4
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 4
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 3
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 2
43433: PUSH
43434: LD_INT 2
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 4
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 4
43454: PUSH
43455: LD_INT 4
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 4
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 5
43474: PUSH
43475: LD_INT 4
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 5
43484: PUSH
43485: LD_INT 5
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 4
43494: PUSH
43495: LD_INT 5
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 3
43504: PUSH
43505: LD_INT 4
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 3
43514: PUSH
43515: LD_INT 3
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 5
43524: PUSH
43525: LD_INT 3
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 3
43534: PUSH
43535: LD_INT 5
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 3
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: LD_INT 2
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: LD_INT 3
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 1
43574: PUSH
43575: LD_INT 4
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 4
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: LD_INT 3
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: LD_INT 4
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 2
43626: NEG
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 4
43637: NEG
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 4
43648: NEG
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 3
43660: NEG
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 3
43671: NEG
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 4
43682: NEG
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 5
43693: NEG
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 5
43704: NEG
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 5
43716: NEG
43717: PUSH
43718: LD_INT 2
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 3
43728: NEG
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: ST_TO_ADDR
// end ; end ;
43784: GO 43787
43786: POP
// case btype of b_depot , b_warehouse :
43787: LD_VAR 0 1
43791: PUSH
43792: LD_INT 0
43794: DOUBLE
43795: EQUAL
43796: IFTRUE 43806
43798: LD_INT 1
43800: DOUBLE
43801: EQUAL
43802: IFTRUE 43806
43804: GO 44007
43806: POP
// case nation of nation_american :
43807: LD_VAR 0 5
43811: PUSH
43812: LD_INT 1
43814: DOUBLE
43815: EQUAL
43816: IFTRUE 43820
43818: GO 43876
43820: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43821: LD_ADDR_VAR 0 9
43825: PUSH
43826: LD_VAR 0 11
43830: PUSH
43831: LD_VAR 0 12
43835: PUSH
43836: LD_VAR 0 13
43840: PUSH
43841: LD_VAR 0 14
43845: PUSH
43846: LD_VAR 0 15
43850: PUSH
43851: LD_VAR 0 16
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: PUSH
43864: LD_VAR 0 4
43868: PUSH
43869: LD_INT 1
43871: PLUS
43872: ARRAY
43873: ST_TO_ADDR
43874: GO 44005
43876: LD_INT 2
43878: DOUBLE
43879: EQUAL
43880: IFTRUE 43884
43882: GO 43940
43884: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43885: LD_ADDR_VAR 0 9
43889: PUSH
43890: LD_VAR 0 17
43894: PUSH
43895: LD_VAR 0 18
43899: PUSH
43900: LD_VAR 0 19
43904: PUSH
43905: LD_VAR 0 20
43909: PUSH
43910: LD_VAR 0 21
43914: PUSH
43915: LD_VAR 0 22
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: PUSH
43928: LD_VAR 0 4
43932: PUSH
43933: LD_INT 1
43935: PLUS
43936: ARRAY
43937: ST_TO_ADDR
43938: GO 44005
43940: LD_INT 3
43942: DOUBLE
43943: EQUAL
43944: IFTRUE 43948
43946: GO 44004
43948: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43949: LD_ADDR_VAR 0 9
43953: PUSH
43954: LD_VAR 0 23
43958: PUSH
43959: LD_VAR 0 24
43963: PUSH
43964: LD_VAR 0 25
43968: PUSH
43969: LD_VAR 0 26
43973: PUSH
43974: LD_VAR 0 27
43978: PUSH
43979: LD_VAR 0 28
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: PUSH
43992: LD_VAR 0 4
43996: PUSH
43997: LD_INT 1
43999: PLUS
44000: ARRAY
44001: ST_TO_ADDR
44002: GO 44005
44004: POP
44005: GO 44560
44007: LD_INT 2
44009: DOUBLE
44010: EQUAL
44011: IFTRUE 44021
44013: LD_INT 3
44015: DOUBLE
44016: EQUAL
44017: IFTRUE 44021
44019: GO 44077
44021: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44022: LD_ADDR_VAR 0 9
44026: PUSH
44027: LD_VAR 0 29
44031: PUSH
44032: LD_VAR 0 30
44036: PUSH
44037: LD_VAR 0 31
44041: PUSH
44042: LD_VAR 0 32
44046: PUSH
44047: LD_VAR 0 33
44051: PUSH
44052: LD_VAR 0 34
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: PUSH
44065: LD_VAR 0 4
44069: PUSH
44070: LD_INT 1
44072: PLUS
44073: ARRAY
44074: ST_TO_ADDR
44075: GO 44560
44077: LD_INT 16
44079: DOUBLE
44080: EQUAL
44081: IFTRUE 44139
44083: LD_INT 17
44085: DOUBLE
44086: EQUAL
44087: IFTRUE 44139
44089: LD_INT 18
44091: DOUBLE
44092: EQUAL
44093: IFTRUE 44139
44095: LD_INT 19
44097: DOUBLE
44098: EQUAL
44099: IFTRUE 44139
44101: LD_INT 22
44103: DOUBLE
44104: EQUAL
44105: IFTRUE 44139
44107: LD_INT 20
44109: DOUBLE
44110: EQUAL
44111: IFTRUE 44139
44113: LD_INT 21
44115: DOUBLE
44116: EQUAL
44117: IFTRUE 44139
44119: LD_INT 23
44121: DOUBLE
44122: EQUAL
44123: IFTRUE 44139
44125: LD_INT 24
44127: DOUBLE
44128: EQUAL
44129: IFTRUE 44139
44131: LD_INT 25
44133: DOUBLE
44134: EQUAL
44135: IFTRUE 44139
44137: GO 44195
44139: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44140: LD_ADDR_VAR 0 9
44144: PUSH
44145: LD_VAR 0 35
44149: PUSH
44150: LD_VAR 0 36
44154: PUSH
44155: LD_VAR 0 37
44159: PUSH
44160: LD_VAR 0 38
44164: PUSH
44165: LD_VAR 0 39
44169: PUSH
44170: LD_VAR 0 40
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: PUSH
44183: LD_VAR 0 4
44187: PUSH
44188: LD_INT 1
44190: PLUS
44191: ARRAY
44192: ST_TO_ADDR
44193: GO 44560
44195: LD_INT 6
44197: DOUBLE
44198: EQUAL
44199: IFTRUE 44251
44201: LD_INT 7
44203: DOUBLE
44204: EQUAL
44205: IFTRUE 44251
44207: LD_INT 8
44209: DOUBLE
44210: EQUAL
44211: IFTRUE 44251
44213: LD_INT 13
44215: DOUBLE
44216: EQUAL
44217: IFTRUE 44251
44219: LD_INT 12
44221: DOUBLE
44222: EQUAL
44223: IFTRUE 44251
44225: LD_INT 15
44227: DOUBLE
44228: EQUAL
44229: IFTRUE 44251
44231: LD_INT 11
44233: DOUBLE
44234: EQUAL
44235: IFTRUE 44251
44237: LD_INT 14
44239: DOUBLE
44240: EQUAL
44241: IFTRUE 44251
44243: LD_INT 10
44245: DOUBLE
44246: EQUAL
44247: IFTRUE 44251
44249: GO 44307
44251: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44252: LD_ADDR_VAR 0 9
44256: PUSH
44257: LD_VAR 0 41
44261: PUSH
44262: LD_VAR 0 42
44266: PUSH
44267: LD_VAR 0 43
44271: PUSH
44272: LD_VAR 0 44
44276: PUSH
44277: LD_VAR 0 45
44281: PUSH
44282: LD_VAR 0 46
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: PUSH
44295: LD_VAR 0 4
44299: PUSH
44300: LD_INT 1
44302: PLUS
44303: ARRAY
44304: ST_TO_ADDR
44305: GO 44560
44307: LD_INT 36
44309: DOUBLE
44310: EQUAL
44311: IFTRUE 44315
44313: GO 44371
44315: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44316: LD_ADDR_VAR 0 9
44320: PUSH
44321: LD_VAR 0 47
44325: PUSH
44326: LD_VAR 0 48
44330: PUSH
44331: LD_VAR 0 49
44335: PUSH
44336: LD_VAR 0 50
44340: PUSH
44341: LD_VAR 0 51
44345: PUSH
44346: LD_VAR 0 52
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: PUSH
44359: LD_VAR 0 4
44363: PUSH
44364: LD_INT 1
44366: PLUS
44367: ARRAY
44368: ST_TO_ADDR
44369: GO 44560
44371: LD_INT 4
44373: DOUBLE
44374: EQUAL
44375: IFTRUE 44397
44377: LD_INT 5
44379: DOUBLE
44380: EQUAL
44381: IFTRUE 44397
44383: LD_INT 34
44385: DOUBLE
44386: EQUAL
44387: IFTRUE 44397
44389: LD_INT 37
44391: DOUBLE
44392: EQUAL
44393: IFTRUE 44397
44395: GO 44453
44397: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44398: LD_ADDR_VAR 0 9
44402: PUSH
44403: LD_VAR 0 53
44407: PUSH
44408: LD_VAR 0 54
44412: PUSH
44413: LD_VAR 0 55
44417: PUSH
44418: LD_VAR 0 56
44422: PUSH
44423: LD_VAR 0 57
44427: PUSH
44428: LD_VAR 0 58
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: PUSH
44441: LD_VAR 0 4
44445: PUSH
44446: LD_INT 1
44448: PLUS
44449: ARRAY
44450: ST_TO_ADDR
44451: GO 44560
44453: LD_INT 31
44455: DOUBLE
44456: EQUAL
44457: IFTRUE 44503
44459: LD_INT 32
44461: DOUBLE
44462: EQUAL
44463: IFTRUE 44503
44465: LD_INT 33
44467: DOUBLE
44468: EQUAL
44469: IFTRUE 44503
44471: LD_INT 27
44473: DOUBLE
44474: EQUAL
44475: IFTRUE 44503
44477: LD_INT 26
44479: DOUBLE
44480: EQUAL
44481: IFTRUE 44503
44483: LD_INT 28
44485: DOUBLE
44486: EQUAL
44487: IFTRUE 44503
44489: LD_INT 29
44491: DOUBLE
44492: EQUAL
44493: IFTRUE 44503
44495: LD_INT 30
44497: DOUBLE
44498: EQUAL
44499: IFTRUE 44503
44501: GO 44559
44503: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
44504: LD_ADDR_VAR 0 9
44508: PUSH
44509: LD_VAR 0 59
44513: PUSH
44514: LD_VAR 0 60
44518: PUSH
44519: LD_VAR 0 61
44523: PUSH
44524: LD_VAR 0 62
44528: PUSH
44529: LD_VAR 0 63
44533: PUSH
44534: LD_VAR 0 64
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: PUSH
44547: LD_VAR 0 4
44551: PUSH
44552: LD_INT 1
44554: PLUS
44555: ARRAY
44556: ST_TO_ADDR
44557: GO 44560
44559: POP
// temp_list2 = [ ] ;
44560: LD_ADDR_VAR 0 10
44564: PUSH
44565: EMPTY
44566: ST_TO_ADDR
// for i in temp_list do
44567: LD_ADDR_VAR 0 8
44571: PUSH
44572: LD_VAR 0 9
44576: PUSH
44577: FOR_IN
44578: IFFALSE 44630
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44580: LD_ADDR_VAR 0 10
44584: PUSH
44585: LD_VAR 0 10
44589: PUSH
44590: LD_VAR 0 8
44594: PUSH
44595: LD_INT 1
44597: ARRAY
44598: PUSH
44599: LD_VAR 0 2
44603: PLUS
44604: PUSH
44605: LD_VAR 0 8
44609: PUSH
44610: LD_INT 2
44612: ARRAY
44613: PUSH
44614: LD_VAR 0 3
44618: PLUS
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: EMPTY
44625: LIST
44626: ADD
44627: ST_TO_ADDR
44628: GO 44577
44630: POP
44631: POP
// result = temp_list2 ;
44632: LD_ADDR_VAR 0 7
44636: PUSH
44637: LD_VAR 0 10
44641: ST_TO_ADDR
// end ;
44642: LD_VAR 0 7
44646: RET
// export function EnemyInRange ( unit , dist ) ; begin
44647: LD_INT 0
44649: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44650: LD_ADDR_VAR 0 3
44654: PUSH
44655: LD_VAR 0 1
44659: PPUSH
44660: CALL_OW 255
44664: PPUSH
44665: LD_VAR 0 1
44669: PPUSH
44670: CALL_OW 250
44674: PPUSH
44675: LD_VAR 0 1
44679: PPUSH
44680: CALL_OW 251
44684: PPUSH
44685: LD_VAR 0 2
44689: PPUSH
44690: CALL 17904 0 4
44694: PUSH
44695: LD_INT 4
44697: ARRAY
44698: ST_TO_ADDR
// end ;
44699: LD_VAR 0 3
44703: RET
// export function PlayerSeeMe ( unit ) ; begin
44704: LD_INT 0
44706: PPUSH
// result := See ( your_side , unit ) ;
44707: LD_ADDR_VAR 0 2
44711: PUSH
44712: LD_OWVAR 2
44716: PPUSH
44717: LD_VAR 0 1
44721: PPUSH
44722: CALL_OW 292
44726: ST_TO_ADDR
// end ;
44727: LD_VAR 0 2
44731: RET
// export function ReverseDir ( unit ) ; begin
44732: LD_INT 0
44734: PPUSH
// if not unit then
44735: LD_VAR 0 1
44739: NOT
44740: IFFALSE 44744
// exit ;
44742: GO 44767
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44744: LD_ADDR_VAR 0 2
44748: PUSH
44749: LD_VAR 0 1
44753: PPUSH
44754: CALL_OW 254
44758: PUSH
44759: LD_INT 3
44761: PLUS
44762: PUSH
44763: LD_INT 6
44765: MOD
44766: ST_TO_ADDR
// end ;
44767: LD_VAR 0 2
44771: RET
// export function ReverseArray ( array ) ; var i ; begin
44772: LD_INT 0
44774: PPUSH
44775: PPUSH
// if not array then
44776: LD_VAR 0 1
44780: NOT
44781: IFFALSE 44785
// exit ;
44783: GO 44840
// result := [ ] ;
44785: LD_ADDR_VAR 0 2
44789: PUSH
44790: EMPTY
44791: ST_TO_ADDR
// for i := array downto 1 do
44792: LD_ADDR_VAR 0 3
44796: PUSH
44797: DOUBLE
44798: LD_VAR 0 1
44802: INC
44803: ST_TO_ADDR
44804: LD_INT 1
44806: PUSH
44807: FOR_DOWNTO
44808: IFFALSE 44838
// result := Join ( result , array [ i ] ) ;
44810: LD_ADDR_VAR 0 2
44814: PUSH
44815: LD_VAR 0 2
44819: PPUSH
44820: LD_VAR 0 1
44824: PUSH
44825: LD_VAR 0 3
44829: ARRAY
44830: PPUSH
44831: CALL 49692 0 2
44835: ST_TO_ADDR
44836: GO 44807
44838: POP
44839: POP
// end ;
44840: LD_VAR 0 2
44844: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44845: LD_INT 0
44847: PPUSH
44848: PPUSH
44849: PPUSH
44850: PPUSH
44851: PPUSH
44852: PPUSH
// if not unit or not hexes then
44853: LD_VAR 0 1
44857: NOT
44858: IFTRUE 44867
44860: PUSH
44861: LD_VAR 0 2
44865: NOT
44866: OR
44867: IFFALSE 44871
// exit ;
44869: GO 44994
// dist := 9999 ;
44871: LD_ADDR_VAR 0 5
44875: PUSH
44876: LD_INT 9999
44878: ST_TO_ADDR
// for i = 1 to hexes do
44879: LD_ADDR_VAR 0 4
44883: PUSH
44884: DOUBLE
44885: LD_INT 1
44887: DEC
44888: ST_TO_ADDR
44889: LD_VAR 0 2
44893: PUSH
44894: FOR_TO
44895: IFFALSE 44982
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44897: LD_ADDR_VAR 0 6
44901: PUSH
44902: LD_VAR 0 1
44906: PPUSH
44907: LD_VAR 0 2
44911: PUSH
44912: LD_VAR 0 4
44916: ARRAY
44917: PUSH
44918: LD_INT 1
44920: ARRAY
44921: PPUSH
44922: LD_VAR 0 2
44926: PUSH
44927: LD_VAR 0 4
44931: ARRAY
44932: PUSH
44933: LD_INT 2
44935: ARRAY
44936: PPUSH
44937: CALL_OW 297
44941: ST_TO_ADDR
// if tdist < dist then
44942: LD_VAR 0 6
44946: PUSH
44947: LD_VAR 0 5
44951: LESS
44952: IFFALSE 44980
// begin hex := hexes [ i ] ;
44954: LD_ADDR_VAR 0 8
44958: PUSH
44959: LD_VAR 0 2
44963: PUSH
44964: LD_VAR 0 4
44968: ARRAY
44969: ST_TO_ADDR
// dist := tdist ;
44970: LD_ADDR_VAR 0 5
44974: PUSH
44975: LD_VAR 0 6
44979: ST_TO_ADDR
// end ; end ;
44980: GO 44894
44982: POP
44983: POP
// result := hex ;
44984: LD_ADDR_VAR 0 3
44988: PUSH
44989: LD_VAR 0 8
44993: ST_TO_ADDR
// end ;
44994: LD_VAR 0 3
44998: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44999: LD_INT 0
45001: PPUSH
45002: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45003: LD_VAR 0 1
45007: NOT
45008: IFTRUE 45047
45010: PUSH
45011: LD_VAR 0 1
45015: PUSH
45016: LD_INT 21
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 23
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PPUSH
45040: CALL_OW 69
45044: IN
45045: NOT
45046: OR
45047: IFFALSE 45051
// exit ;
45049: GO 45098
// for i = 1 to 3 do
45051: LD_ADDR_VAR 0 3
45055: PUSH
45056: DOUBLE
45057: LD_INT 1
45059: DEC
45060: ST_TO_ADDR
45061: LD_INT 3
45063: PUSH
45064: FOR_TO
45065: IFFALSE 45096
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45067: LD_VAR 0 1
45071: PPUSH
45072: CALL_OW 250
45076: PPUSH
45077: LD_VAR 0 1
45081: PPUSH
45082: CALL_OW 251
45086: PPUSH
45087: LD_INT 1
45089: PPUSH
45090: CALL_OW 453
45094: GO 45064
45096: POP
45097: POP
// end ;
45098: LD_VAR 0 2
45102: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45103: LD_INT 0
45105: PPUSH
45106: PPUSH
45107: PPUSH
45108: PPUSH
45109: PPUSH
45110: PPUSH
// if not unit or not enemy_unit then
45111: LD_VAR 0 1
45115: NOT
45116: IFTRUE 45125
45118: PUSH
45119: LD_VAR 0 2
45123: NOT
45124: OR
45125: IFFALSE 45129
// exit ;
45127: GO 45610
// if GetLives ( i ) < 250 then
45129: LD_VAR 0 4
45133: PPUSH
45134: CALL_OW 256
45138: PUSH
45139: LD_INT 250
45141: LESS
45142: IFFALSE 45155
// begin ComAutodestruct ( i ) ;
45144: LD_VAR 0 4
45148: PPUSH
45149: CALL 44999 0 1
// exit ;
45153: GO 45610
// end ; x := GetX ( enemy_unit ) ;
45155: LD_ADDR_VAR 0 7
45159: PUSH
45160: LD_VAR 0 2
45164: PPUSH
45165: CALL_OW 250
45169: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45170: LD_ADDR_VAR 0 8
45174: PUSH
45175: LD_VAR 0 2
45179: PPUSH
45180: CALL_OW 251
45184: ST_TO_ADDR
// if not x or not y then
45185: LD_VAR 0 7
45189: NOT
45190: IFTRUE 45199
45192: PUSH
45193: LD_VAR 0 8
45197: NOT
45198: OR
45199: IFFALSE 45203
// exit ;
45201: GO 45610
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45203: LD_ADDR_VAR 0 6
45207: PUSH
45208: LD_VAR 0 7
45212: PPUSH
45213: LD_INT 0
45215: PPUSH
45216: LD_INT 4
45218: PPUSH
45219: CALL_OW 272
45223: PUSH
45224: LD_VAR 0 8
45228: PPUSH
45229: LD_INT 0
45231: PPUSH
45232: LD_INT 4
45234: PPUSH
45235: CALL_OW 273
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_VAR 0 7
45248: PPUSH
45249: LD_INT 1
45251: PPUSH
45252: LD_INT 4
45254: PPUSH
45255: CALL_OW 272
45259: PUSH
45260: LD_VAR 0 8
45264: PPUSH
45265: LD_INT 1
45267: PPUSH
45268: LD_INT 4
45270: PPUSH
45271: CALL_OW 273
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_VAR 0 7
45284: PPUSH
45285: LD_INT 2
45287: PPUSH
45288: LD_INT 4
45290: PPUSH
45291: CALL_OW 272
45295: PUSH
45296: LD_VAR 0 8
45300: PPUSH
45301: LD_INT 2
45303: PPUSH
45304: LD_INT 4
45306: PPUSH
45307: CALL_OW 273
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_VAR 0 7
45320: PPUSH
45321: LD_INT 3
45323: PPUSH
45324: LD_INT 4
45326: PPUSH
45327: CALL_OW 272
45331: PUSH
45332: LD_VAR 0 8
45336: PPUSH
45337: LD_INT 3
45339: PPUSH
45340: LD_INT 4
45342: PPUSH
45343: CALL_OW 273
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_VAR 0 7
45356: PPUSH
45357: LD_INT 4
45359: PPUSH
45360: LD_INT 4
45362: PPUSH
45363: CALL_OW 272
45367: PUSH
45368: LD_VAR 0 8
45372: PPUSH
45373: LD_INT 4
45375: PPUSH
45376: LD_INT 4
45378: PPUSH
45379: CALL_OW 273
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_VAR 0 7
45392: PPUSH
45393: LD_INT 5
45395: PPUSH
45396: LD_INT 4
45398: PPUSH
45399: CALL_OW 272
45403: PUSH
45404: LD_VAR 0 8
45408: PPUSH
45409: LD_INT 5
45411: PPUSH
45412: LD_INT 4
45414: PPUSH
45415: CALL_OW 273
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: ST_TO_ADDR
// for i = tmp downto 1 do
45432: LD_ADDR_VAR 0 4
45436: PUSH
45437: DOUBLE
45438: LD_VAR 0 6
45442: INC
45443: ST_TO_ADDR
45444: LD_INT 1
45446: PUSH
45447: FOR_DOWNTO
45448: IFFALSE 45551
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45450: LD_VAR 0 6
45454: PUSH
45455: LD_VAR 0 4
45459: ARRAY
45460: PUSH
45461: LD_INT 1
45463: ARRAY
45464: PPUSH
45465: LD_VAR 0 6
45469: PUSH
45470: LD_VAR 0 4
45474: ARRAY
45475: PUSH
45476: LD_INT 2
45478: ARRAY
45479: PPUSH
45480: CALL_OW 488
45484: NOT
45485: IFTRUE 45527
45487: PUSH
45488: LD_VAR 0 6
45492: PUSH
45493: LD_VAR 0 4
45497: ARRAY
45498: PUSH
45499: LD_INT 1
45501: ARRAY
45502: PPUSH
45503: LD_VAR 0 6
45507: PUSH
45508: LD_VAR 0 4
45512: ARRAY
45513: PUSH
45514: LD_INT 2
45516: ARRAY
45517: PPUSH
45518: CALL_OW 428
45522: PUSH
45523: LD_INT 0
45525: NONEQUAL
45526: OR
45527: IFFALSE 45549
// tmp := Delete ( tmp , i ) ;
45529: LD_ADDR_VAR 0 6
45533: PUSH
45534: LD_VAR 0 6
45538: PPUSH
45539: LD_VAR 0 4
45543: PPUSH
45544: CALL_OW 3
45548: ST_TO_ADDR
45549: GO 45447
45551: POP
45552: POP
// j := GetClosestHex ( unit , tmp ) ;
45553: LD_ADDR_VAR 0 5
45557: PUSH
45558: LD_VAR 0 1
45562: PPUSH
45563: LD_VAR 0 6
45567: PPUSH
45568: CALL 44845 0 2
45572: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45573: LD_VAR 0 1
45577: PPUSH
45578: LD_VAR 0 5
45582: PUSH
45583: LD_INT 1
45585: ARRAY
45586: PPUSH
45587: LD_VAR 0 5
45591: PUSH
45592: LD_INT 2
45594: ARRAY
45595: PPUSH
45596: CALL_OW 111
// result := j ;
45600: LD_ADDR_VAR 0 3
45604: PUSH
45605: LD_VAR 0 5
45609: ST_TO_ADDR
// end ;
45610: LD_VAR 0 3
45614: RET
// export function PrepareApemanSoldier ( ) ; begin
45615: LD_INT 0
45617: PPUSH
// uc_nation := 0 ;
45618: LD_ADDR_OWVAR 21
45622: PUSH
45623: LD_INT 0
45625: ST_TO_ADDR
// hc_sex := sex_male ;
45626: LD_ADDR_OWVAR 27
45630: PUSH
45631: LD_INT 1
45633: ST_TO_ADDR
// hc_name :=  ;
45634: LD_ADDR_OWVAR 26
45638: PUSH
45639: LD_STRING 
45641: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
45642: LD_ADDR_OWVAR 28
45646: PUSH
45647: LD_INT 15
45649: ST_TO_ADDR
// hc_gallery :=  ;
45650: LD_ADDR_OWVAR 33
45654: PUSH
45655: LD_STRING 
45657: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45658: LD_ADDR_OWVAR 31
45662: PUSH
45663: LD_INT 0
45665: PPUSH
45666: LD_INT 3
45668: PPUSH
45669: CALL_OW 12
45673: PUSH
45674: LD_INT 0
45676: PPUSH
45677: LD_INT 3
45679: PPUSH
45680: CALL_OW 12
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45697: LD_ADDR_OWVAR 29
45701: PUSH
45702: LD_INT 10
45704: PUSH
45705: LD_INT 12
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: ST_TO_ADDR
// end ;
45712: LD_VAR 0 1
45716: RET
// export function PrepareApemanEngineer ( ) ; begin
45717: LD_INT 0
45719: PPUSH
// uc_nation := 0 ;
45720: LD_ADDR_OWVAR 21
45724: PUSH
45725: LD_INT 0
45727: ST_TO_ADDR
// hc_sex := sex_male ;
45728: LD_ADDR_OWVAR 27
45732: PUSH
45733: LD_INT 1
45735: ST_TO_ADDR
// hc_name :=  ;
45736: LD_ADDR_OWVAR 26
45740: PUSH
45741: LD_STRING 
45743: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
45744: LD_ADDR_OWVAR 28
45748: PUSH
45749: LD_INT 16
45751: ST_TO_ADDR
// hc_gallery :=  ;
45752: LD_ADDR_OWVAR 33
45756: PUSH
45757: LD_STRING 
45759: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45760: LD_ADDR_OWVAR 31
45764: PUSH
45765: LD_INT 0
45767: PPUSH
45768: LD_INT 3
45770: PPUSH
45771: CALL_OW 12
45775: PUSH
45776: LD_INT 0
45778: PPUSH
45779: LD_INT 3
45781: PPUSH
45782: CALL_OW 12
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45799: LD_ADDR_OWVAR 29
45803: PUSH
45804: LD_INT 10
45806: PUSH
45807: LD_INT 12
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: ST_TO_ADDR
// end ;
45814: LD_VAR 0 1
45818: RET
// export function PrepareApeman ( agressivity ) ; begin
45819: LD_INT 0
45821: PPUSH
// uc_side := 0 ;
45822: LD_ADDR_OWVAR 20
45826: PUSH
45827: LD_INT 0
45829: ST_TO_ADDR
// uc_nation := 0 ;
45830: LD_ADDR_OWVAR 21
45834: PUSH
45835: LD_INT 0
45837: ST_TO_ADDR
// hc_sex := sex_male ;
45838: LD_ADDR_OWVAR 27
45842: PUSH
45843: LD_INT 1
45845: ST_TO_ADDR
// hc_class := class_apeman ;
45846: LD_ADDR_OWVAR 28
45850: PUSH
45851: LD_INT 12
45853: ST_TO_ADDR
// hc_gallery :=  ;
45854: LD_ADDR_OWVAR 33
45858: PUSH
45859: LD_STRING 
45861: ST_TO_ADDR
// hc_name :=  ;
45862: LD_ADDR_OWVAR 26
45866: PUSH
45867: LD_STRING 
45869: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45870: LD_ADDR_OWVAR 29
45874: PUSH
45875: LD_INT 10
45877: PUSH
45878: LD_INT 12
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: ST_TO_ADDR
// if agressivity = 0 then
45885: LD_VAR 0 1
45889: PUSH
45890: LD_INT 0
45892: EQUAL
45893: IFFALSE 45905
// hc_agressivity := 0 else
45895: LD_ADDR_OWVAR 35
45899: PUSH
45900: LD_INT 0
45902: ST_TO_ADDR
45903: GO 45926
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45905: LD_ADDR_OWVAR 35
45909: PUSH
45910: LD_VAR 0 1
45914: NEG
45915: PPUSH
45916: LD_VAR 0 1
45920: PPUSH
45921: CALL_OW 12
45925: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45926: LD_ADDR_OWVAR 31
45930: PUSH
45931: LD_INT 0
45933: PPUSH
45934: LD_INT 3
45936: PPUSH
45937: CALL_OW 12
45941: PUSH
45942: LD_INT 0
45944: PPUSH
45945: LD_INT 3
45947: PPUSH
45948: CALL_OW 12
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: ST_TO_ADDR
// end ;
45965: LD_VAR 0 2
45969: RET
// export function PrepareTiger ( agressivity ) ; begin
45970: LD_INT 0
45972: PPUSH
// uc_side := 0 ;
45973: LD_ADDR_OWVAR 20
45977: PUSH
45978: LD_INT 0
45980: ST_TO_ADDR
// uc_nation := 0 ;
45981: LD_ADDR_OWVAR 21
45985: PUSH
45986: LD_INT 0
45988: ST_TO_ADDR
// InitHc ;
45989: CALL_OW 19
// hc_class := class_tiger ;
45993: LD_ADDR_OWVAR 28
45997: PUSH
45998: LD_INT 14
46000: ST_TO_ADDR
// hc_gallery :=  ;
46001: LD_ADDR_OWVAR 33
46005: PUSH
46006: LD_STRING 
46008: ST_TO_ADDR
// hc_name :=  ;
46009: LD_ADDR_OWVAR 26
46013: PUSH
46014: LD_STRING 
46016: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
46017: LD_ADDR_OWVAR 35
46021: PUSH
46022: LD_VAR 0 1
46026: NEG
46027: PPUSH
46028: LD_VAR 0 1
46032: PPUSH
46033: CALL_OW 12
46037: ST_TO_ADDR
// end ;
46038: LD_VAR 0 2
46042: RET
// export function PrepareEnchidna ( ) ; begin
46043: LD_INT 0
46045: PPUSH
// uc_side := 0 ;
46046: LD_ADDR_OWVAR 20
46050: PUSH
46051: LD_INT 0
46053: ST_TO_ADDR
// uc_nation := 0 ;
46054: LD_ADDR_OWVAR 21
46058: PUSH
46059: LD_INT 0
46061: ST_TO_ADDR
// InitHc ;
46062: CALL_OW 19
// hc_class := class_baggie ;
46066: LD_ADDR_OWVAR 28
46070: PUSH
46071: LD_INT 13
46073: ST_TO_ADDR
// hc_gallery :=  ;
46074: LD_ADDR_OWVAR 33
46078: PUSH
46079: LD_STRING 
46081: ST_TO_ADDR
// hc_name :=  ;
46082: LD_ADDR_OWVAR 26
46086: PUSH
46087: LD_STRING 
46089: ST_TO_ADDR
// end ;
46090: LD_VAR 0 1
46094: RET
// export function PrepareFrog ( ) ; begin
46095: LD_INT 0
46097: PPUSH
// uc_side := 0 ;
46098: LD_ADDR_OWVAR 20
46102: PUSH
46103: LD_INT 0
46105: ST_TO_ADDR
// uc_nation := 0 ;
46106: LD_ADDR_OWVAR 21
46110: PUSH
46111: LD_INT 0
46113: ST_TO_ADDR
// InitHc ;
46114: CALL_OW 19
// hc_class := class_frog ;
46118: LD_ADDR_OWVAR 28
46122: PUSH
46123: LD_INT 19
46125: ST_TO_ADDR
// hc_gallery :=  ;
46126: LD_ADDR_OWVAR 33
46130: PUSH
46131: LD_STRING 
46133: ST_TO_ADDR
// hc_name :=  ;
46134: LD_ADDR_OWVAR 26
46138: PUSH
46139: LD_STRING 
46141: ST_TO_ADDR
// end ;
46142: LD_VAR 0 1
46146: RET
// export function PrepareFish ( ) ; begin
46147: LD_INT 0
46149: PPUSH
// uc_side := 0 ;
46150: LD_ADDR_OWVAR 20
46154: PUSH
46155: LD_INT 0
46157: ST_TO_ADDR
// uc_nation := 0 ;
46158: LD_ADDR_OWVAR 21
46162: PUSH
46163: LD_INT 0
46165: ST_TO_ADDR
// InitHc ;
46166: CALL_OW 19
// hc_class := class_fish ;
46170: LD_ADDR_OWVAR 28
46174: PUSH
46175: LD_INT 20
46177: ST_TO_ADDR
// hc_gallery :=  ;
46178: LD_ADDR_OWVAR 33
46182: PUSH
46183: LD_STRING 
46185: ST_TO_ADDR
// hc_name :=  ;
46186: LD_ADDR_OWVAR 26
46190: PUSH
46191: LD_STRING 
46193: ST_TO_ADDR
// end ;
46194: LD_VAR 0 1
46198: RET
// export function PrepareBird ( ) ; begin
46199: LD_INT 0
46201: PPUSH
// uc_side := 0 ;
46202: LD_ADDR_OWVAR 20
46206: PUSH
46207: LD_INT 0
46209: ST_TO_ADDR
// uc_nation := 0 ;
46210: LD_ADDR_OWVAR 21
46214: PUSH
46215: LD_INT 0
46217: ST_TO_ADDR
// InitHc ;
46218: CALL_OW 19
// hc_class := class_phororhacos ;
46222: LD_ADDR_OWVAR 28
46226: PUSH
46227: LD_INT 18
46229: ST_TO_ADDR
// hc_gallery :=  ;
46230: LD_ADDR_OWVAR 33
46234: PUSH
46235: LD_STRING 
46237: ST_TO_ADDR
// hc_name :=  ;
46238: LD_ADDR_OWVAR 26
46242: PUSH
46243: LD_STRING 
46245: ST_TO_ADDR
// end ;
46246: LD_VAR 0 1
46250: RET
// export function PrepareHorse ( ) ; begin
46251: LD_INT 0
46253: PPUSH
// uc_side := 0 ;
46254: LD_ADDR_OWVAR 20
46258: PUSH
46259: LD_INT 0
46261: ST_TO_ADDR
// uc_nation := 0 ;
46262: LD_ADDR_OWVAR 21
46266: PUSH
46267: LD_INT 0
46269: ST_TO_ADDR
// InitHc ;
46270: CALL_OW 19
// hc_class := class_horse ;
46274: LD_ADDR_OWVAR 28
46278: PUSH
46279: LD_INT 21
46281: ST_TO_ADDR
// hc_gallery :=  ;
46282: LD_ADDR_OWVAR 33
46286: PUSH
46287: LD_STRING 
46289: ST_TO_ADDR
// hc_name :=  ;
46290: LD_ADDR_OWVAR 26
46294: PUSH
46295: LD_STRING 
46297: ST_TO_ADDR
// end ;
46298: LD_VAR 0 1
46302: RET
// export function PrepareMastodont ( ) ; begin
46303: LD_INT 0
46305: PPUSH
// uc_side := 0 ;
46306: LD_ADDR_OWVAR 20
46310: PUSH
46311: LD_INT 0
46313: ST_TO_ADDR
// uc_nation := 0 ;
46314: LD_ADDR_OWVAR 21
46318: PUSH
46319: LD_INT 0
46321: ST_TO_ADDR
// vc_chassis := class_mastodont ;
46322: LD_ADDR_OWVAR 37
46326: PUSH
46327: LD_INT 31
46329: ST_TO_ADDR
// vc_control := control_rider ;
46330: LD_ADDR_OWVAR 38
46334: PUSH
46335: LD_INT 4
46337: ST_TO_ADDR
// end ;
46338: LD_VAR 0 1
46342: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46343: LD_INT 0
46345: PPUSH
46346: PPUSH
46347: PPUSH
// uc_side = 0 ;
46348: LD_ADDR_OWVAR 20
46352: PUSH
46353: LD_INT 0
46355: ST_TO_ADDR
// uc_nation = 0 ;
46356: LD_ADDR_OWVAR 21
46360: PUSH
46361: LD_INT 0
46363: ST_TO_ADDR
// InitHc_All ( ) ;
46364: CALL_OW 584
// InitVc ;
46368: CALL_OW 20
// if mastodonts then
46372: LD_VAR 0 6
46376: IFFALSE 46443
// for i = 1 to mastodonts do
46378: LD_ADDR_VAR 0 11
46382: PUSH
46383: DOUBLE
46384: LD_INT 1
46386: DEC
46387: ST_TO_ADDR
46388: LD_VAR 0 6
46392: PUSH
46393: FOR_TO
46394: IFFALSE 46441
// begin vc_chassis := 31 ;
46396: LD_ADDR_OWVAR 37
46400: PUSH
46401: LD_INT 31
46403: ST_TO_ADDR
// vc_control := control_rider ;
46404: LD_ADDR_OWVAR 38
46408: PUSH
46409: LD_INT 4
46411: ST_TO_ADDR
// animal := CreateVehicle ;
46412: LD_ADDR_VAR 0 12
46416: PUSH
46417: CALL_OW 45
46421: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46422: LD_VAR 0 12
46426: PPUSH
46427: LD_VAR 0 8
46431: PPUSH
46432: LD_INT 0
46434: PPUSH
46435: CALL 48585 0 3
// end ;
46439: GO 46393
46441: POP
46442: POP
// if horses then
46443: LD_VAR 0 5
46447: IFFALSE 46514
// for i = 1 to horses do
46449: LD_ADDR_VAR 0 11
46453: PUSH
46454: DOUBLE
46455: LD_INT 1
46457: DEC
46458: ST_TO_ADDR
46459: LD_VAR 0 5
46463: PUSH
46464: FOR_TO
46465: IFFALSE 46512
// begin hc_class := 21 ;
46467: LD_ADDR_OWVAR 28
46471: PUSH
46472: LD_INT 21
46474: ST_TO_ADDR
// hc_gallery :=  ;
46475: LD_ADDR_OWVAR 33
46479: PUSH
46480: LD_STRING 
46482: ST_TO_ADDR
// animal := CreateHuman ;
46483: LD_ADDR_VAR 0 12
46487: PUSH
46488: CALL_OW 44
46492: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46493: LD_VAR 0 12
46497: PPUSH
46498: LD_VAR 0 8
46502: PPUSH
46503: LD_INT 0
46505: PPUSH
46506: CALL 48585 0 3
// end ;
46510: GO 46464
46512: POP
46513: POP
// if birds then
46514: LD_VAR 0 1
46518: IFFALSE 46585
// for i = 1 to birds do
46520: LD_ADDR_VAR 0 11
46524: PUSH
46525: DOUBLE
46526: LD_INT 1
46528: DEC
46529: ST_TO_ADDR
46530: LD_VAR 0 1
46534: PUSH
46535: FOR_TO
46536: IFFALSE 46583
// begin hc_class := 18 ;
46538: LD_ADDR_OWVAR 28
46542: PUSH
46543: LD_INT 18
46545: ST_TO_ADDR
// hc_gallery =  ;
46546: LD_ADDR_OWVAR 33
46550: PUSH
46551: LD_STRING 
46553: ST_TO_ADDR
// animal := CreateHuman ;
46554: LD_ADDR_VAR 0 12
46558: PUSH
46559: CALL_OW 44
46563: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46564: LD_VAR 0 12
46568: PPUSH
46569: LD_VAR 0 8
46573: PPUSH
46574: LD_INT 0
46576: PPUSH
46577: CALL 48585 0 3
// end ;
46581: GO 46535
46583: POP
46584: POP
// if tigers then
46585: LD_VAR 0 2
46589: IFFALSE 46673
// for i = 1 to tigers do
46591: LD_ADDR_VAR 0 11
46595: PUSH
46596: DOUBLE
46597: LD_INT 1
46599: DEC
46600: ST_TO_ADDR
46601: LD_VAR 0 2
46605: PUSH
46606: FOR_TO
46607: IFFALSE 46671
// begin hc_class = class_tiger ;
46609: LD_ADDR_OWVAR 28
46613: PUSH
46614: LD_INT 14
46616: ST_TO_ADDR
// hc_gallery =  ;
46617: LD_ADDR_OWVAR 33
46621: PUSH
46622: LD_STRING 
46624: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46625: LD_ADDR_OWVAR 35
46629: PUSH
46630: LD_INT 7
46632: NEG
46633: PPUSH
46634: LD_INT 7
46636: PPUSH
46637: CALL_OW 12
46641: ST_TO_ADDR
// animal := CreateHuman ;
46642: LD_ADDR_VAR 0 12
46646: PUSH
46647: CALL_OW 44
46651: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46652: LD_VAR 0 12
46656: PPUSH
46657: LD_VAR 0 8
46661: PPUSH
46662: LD_INT 0
46664: PPUSH
46665: CALL 48585 0 3
// end ;
46669: GO 46606
46671: POP
46672: POP
// if apemans then
46673: LD_VAR 0 3
46677: IFFALSE 46800
// for i = 1 to apemans do
46679: LD_ADDR_VAR 0 11
46683: PUSH
46684: DOUBLE
46685: LD_INT 1
46687: DEC
46688: ST_TO_ADDR
46689: LD_VAR 0 3
46693: PUSH
46694: FOR_TO
46695: IFFALSE 46798
// begin hc_class = class_apeman ;
46697: LD_ADDR_OWVAR 28
46701: PUSH
46702: LD_INT 12
46704: ST_TO_ADDR
// hc_gallery =  ;
46705: LD_ADDR_OWVAR 33
46709: PUSH
46710: LD_STRING 
46712: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46713: LD_ADDR_OWVAR 35
46717: PUSH
46718: LD_INT 2
46720: NEG
46721: PPUSH
46722: LD_INT 2
46724: PPUSH
46725: CALL_OW 12
46729: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46730: LD_ADDR_OWVAR 31
46734: PUSH
46735: LD_INT 1
46737: PPUSH
46738: LD_INT 3
46740: PPUSH
46741: CALL_OW 12
46745: PUSH
46746: LD_INT 1
46748: PPUSH
46749: LD_INT 3
46751: PPUSH
46752: CALL_OW 12
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: ST_TO_ADDR
// animal := CreateHuman ;
46769: LD_ADDR_VAR 0 12
46773: PUSH
46774: CALL_OW 44
46778: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46779: LD_VAR 0 12
46783: PPUSH
46784: LD_VAR 0 8
46788: PPUSH
46789: LD_INT 0
46791: PPUSH
46792: CALL 48585 0 3
// end ;
46796: GO 46694
46798: POP
46799: POP
// if enchidnas then
46800: LD_VAR 0 4
46804: IFFALSE 46871
// for i = 1 to enchidnas do
46806: LD_ADDR_VAR 0 11
46810: PUSH
46811: DOUBLE
46812: LD_INT 1
46814: DEC
46815: ST_TO_ADDR
46816: LD_VAR 0 4
46820: PUSH
46821: FOR_TO
46822: IFFALSE 46869
// begin hc_class = 13 ;
46824: LD_ADDR_OWVAR 28
46828: PUSH
46829: LD_INT 13
46831: ST_TO_ADDR
// hc_gallery =  ;
46832: LD_ADDR_OWVAR 33
46836: PUSH
46837: LD_STRING 
46839: ST_TO_ADDR
// animal := CreateHuman ;
46840: LD_ADDR_VAR 0 12
46844: PUSH
46845: CALL_OW 44
46849: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46850: LD_VAR 0 12
46854: PPUSH
46855: LD_VAR 0 8
46859: PPUSH
46860: LD_INT 0
46862: PPUSH
46863: CALL 48585 0 3
// end ;
46867: GO 46821
46869: POP
46870: POP
// if fishes then
46871: LD_VAR 0 7
46875: IFFALSE 46942
// for i = 1 to fishes do
46877: LD_ADDR_VAR 0 11
46881: PUSH
46882: DOUBLE
46883: LD_INT 1
46885: DEC
46886: ST_TO_ADDR
46887: LD_VAR 0 7
46891: PUSH
46892: FOR_TO
46893: IFFALSE 46940
// begin hc_class = 20 ;
46895: LD_ADDR_OWVAR 28
46899: PUSH
46900: LD_INT 20
46902: ST_TO_ADDR
// hc_gallery =  ;
46903: LD_ADDR_OWVAR 33
46907: PUSH
46908: LD_STRING 
46910: ST_TO_ADDR
// animal := CreateHuman ;
46911: LD_ADDR_VAR 0 12
46915: PUSH
46916: CALL_OW 44
46920: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46921: LD_VAR 0 12
46925: PPUSH
46926: LD_VAR 0 9
46930: PPUSH
46931: LD_INT 0
46933: PPUSH
46934: CALL 48585 0 3
// end ;
46938: GO 46892
46940: POP
46941: POP
// end ;
46942: LD_VAR 0 10
46946: RET
// export function WantHeal ( sci , unit ) ; begin
46947: LD_INT 0
46949: PPUSH
// if GetTaskList ( sci ) > 0 then
46950: LD_VAR 0 1
46954: PPUSH
46955: CALL_OW 437
46959: PUSH
46960: LD_INT 0
46962: GREATER
46963: IFFALSE 47035
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46965: LD_VAR 0 1
46969: PPUSH
46970: CALL_OW 437
46974: PUSH
46975: LD_INT 1
46977: ARRAY
46978: PUSH
46979: LD_INT 1
46981: ARRAY
46982: PUSH
46983: LD_STRING l
46985: EQUAL
46986: IFFALSE 47013
46988: PUSH
46989: LD_VAR 0 1
46993: PPUSH
46994: CALL_OW 437
46998: PUSH
46999: LD_INT 1
47001: ARRAY
47002: PUSH
47003: LD_INT 4
47005: ARRAY
47006: PUSH
47007: LD_VAR 0 2
47011: EQUAL
47012: AND
47013: IFFALSE 47025
// result := true else
47015: LD_ADDR_VAR 0 3
47019: PUSH
47020: LD_INT 1
47022: ST_TO_ADDR
47023: GO 47033
// result := false ;
47025: LD_ADDR_VAR 0 3
47029: PUSH
47030: LD_INT 0
47032: ST_TO_ADDR
// end else
47033: GO 47043
// result := false ;
47035: LD_ADDR_VAR 0 3
47039: PUSH
47040: LD_INT 0
47042: ST_TO_ADDR
// end ;
47043: LD_VAR 0 3
47047: RET
// export function HealTarget ( sci ) ; begin
47048: LD_INT 0
47050: PPUSH
// if not sci then
47051: LD_VAR 0 1
47055: NOT
47056: IFFALSE 47060
// exit ;
47058: GO 47125
// result := 0 ;
47060: LD_ADDR_VAR 0 2
47064: PUSH
47065: LD_INT 0
47067: ST_TO_ADDR
// if GetTaskList ( sci ) then
47068: LD_VAR 0 1
47072: PPUSH
47073: CALL_OW 437
47077: IFFALSE 47125
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
47079: LD_VAR 0 1
47083: PPUSH
47084: CALL_OW 437
47088: PUSH
47089: LD_INT 1
47091: ARRAY
47092: PUSH
47093: LD_INT 1
47095: ARRAY
47096: PUSH
47097: LD_STRING l
47099: EQUAL
47100: IFFALSE 47125
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
47102: LD_ADDR_VAR 0 2
47106: PUSH
47107: LD_VAR 0 1
47111: PPUSH
47112: CALL_OW 437
47116: PUSH
47117: LD_INT 1
47119: ARRAY
47120: PUSH
47121: LD_INT 4
47123: ARRAY
47124: ST_TO_ADDR
// end ;
47125: LD_VAR 0 2
47129: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
47130: LD_INT 0
47132: PPUSH
47133: PPUSH
47134: PPUSH
47135: PPUSH
// if not base_units then
47136: LD_VAR 0 1
47140: NOT
47141: IFFALSE 47145
// exit ;
47143: GO 47232
// result := false ;
47145: LD_ADDR_VAR 0 2
47149: PUSH
47150: LD_INT 0
47152: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47153: LD_ADDR_VAR 0 5
47157: PUSH
47158: LD_VAR 0 1
47162: PPUSH
47163: LD_INT 21
47165: PUSH
47166: LD_INT 3
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PPUSH
47173: CALL_OW 72
47177: ST_TO_ADDR
// if not tmp then
47178: LD_VAR 0 5
47182: NOT
47183: IFFALSE 47187
// exit ;
47185: GO 47232
// for i in tmp do
47187: LD_ADDR_VAR 0 3
47191: PUSH
47192: LD_VAR 0 5
47196: PUSH
47197: FOR_IN
47198: IFFALSE 47230
// begin result := EnemyInRange ( i , 22 ) ;
47200: LD_ADDR_VAR 0 2
47204: PUSH
47205: LD_VAR 0 3
47209: PPUSH
47210: LD_INT 22
47212: PPUSH
47213: CALL 44647 0 2
47217: ST_TO_ADDR
// if result then
47218: LD_VAR 0 2
47222: IFFALSE 47228
// exit ;
47224: POP
47225: POP
47226: GO 47232
// end ;
47228: GO 47197
47230: POP
47231: POP
// end ;
47232: LD_VAR 0 2
47236: RET
// export function FilterByTag ( units , tag ) ; begin
47237: LD_INT 0
47239: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47240: LD_ADDR_VAR 0 3
47244: PUSH
47245: LD_VAR 0 1
47249: PPUSH
47250: LD_INT 120
47252: PUSH
47253: LD_VAR 0 2
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PPUSH
47262: CALL_OW 72
47266: ST_TO_ADDR
// end ;
47267: LD_VAR 0 3
47271: RET
// export function IsDriver ( un ) ; begin
47272: LD_INT 0
47274: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47275: LD_ADDR_VAR 0 2
47279: PUSH
47280: LD_VAR 0 1
47284: PUSH
47285: LD_INT 55
47287: PUSH
47288: EMPTY
47289: LIST
47290: PPUSH
47291: CALL_OW 69
47295: IN
47296: ST_TO_ADDR
// end ;
47297: LD_VAR 0 2
47301: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47302: LD_INT 0
47304: PPUSH
47305: PPUSH
// list := [ ] ;
47306: LD_ADDR_VAR 0 5
47310: PUSH
47311: EMPTY
47312: ST_TO_ADDR
// case d of 0 :
47313: LD_VAR 0 3
47317: PUSH
47318: LD_INT 0
47320: DOUBLE
47321: EQUAL
47322: IFTRUE 47326
47324: GO 47459
47326: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47327: LD_ADDR_VAR 0 5
47331: PUSH
47332: LD_VAR 0 1
47336: PUSH
47337: LD_INT 4
47339: MINUS
47340: PUSH
47341: LD_VAR 0 2
47345: PUSH
47346: LD_INT 4
47348: MINUS
47349: PUSH
47350: LD_INT 2
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: LIST
47357: PUSH
47358: LD_VAR 0 1
47362: PUSH
47363: LD_INT 3
47365: MINUS
47366: PUSH
47367: LD_VAR 0 2
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: LIST
47379: PUSH
47380: LD_VAR 0 1
47384: PUSH
47385: LD_INT 4
47387: PLUS
47388: PUSH
47389: LD_VAR 0 2
47393: PUSH
47394: LD_INT 4
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: LIST
47401: PUSH
47402: LD_VAR 0 1
47406: PUSH
47407: LD_INT 3
47409: PLUS
47410: PUSH
47411: LD_VAR 0 2
47415: PUSH
47416: LD_INT 3
47418: PLUS
47419: PUSH
47420: LD_INT 5
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: LIST
47427: PUSH
47428: LD_VAR 0 1
47432: PUSH
47433: LD_VAR 0 2
47437: PUSH
47438: LD_INT 4
47440: PLUS
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: LIST
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: ST_TO_ADDR
// end ; 1 :
47457: GO 48157
47459: LD_INT 1
47461: DOUBLE
47462: EQUAL
47463: IFTRUE 47467
47465: GO 47600
47467: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47468: LD_ADDR_VAR 0 5
47472: PUSH
47473: LD_VAR 0 1
47477: PUSH
47478: LD_VAR 0 2
47482: PUSH
47483: LD_INT 4
47485: MINUS
47486: PUSH
47487: LD_INT 3
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: LIST
47494: PUSH
47495: LD_VAR 0 1
47499: PUSH
47500: LD_INT 3
47502: MINUS
47503: PUSH
47504: LD_VAR 0 2
47508: PUSH
47509: LD_INT 3
47511: MINUS
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: LIST
47520: PUSH
47521: LD_VAR 0 1
47525: PUSH
47526: LD_INT 4
47528: MINUS
47529: PUSH
47530: LD_VAR 0 2
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: LIST
47542: PUSH
47543: LD_VAR 0 1
47547: PUSH
47548: LD_VAR 0 2
47552: PUSH
47553: LD_INT 3
47555: PLUS
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: LIST
47564: PUSH
47565: LD_VAR 0 1
47569: PUSH
47570: LD_INT 4
47572: PLUS
47573: PUSH
47574: LD_VAR 0 2
47578: PUSH
47579: LD_INT 4
47581: PLUS
47582: PUSH
47583: LD_INT 5
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: LIST
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: ST_TO_ADDR
// end ; 2 :
47598: GO 48157
47600: LD_INT 2
47602: DOUBLE
47603: EQUAL
47604: IFTRUE 47608
47606: GO 47737
47608: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47609: LD_ADDR_VAR 0 5
47613: PUSH
47614: LD_VAR 0 1
47618: PUSH
47619: LD_VAR 0 2
47623: PUSH
47624: LD_INT 3
47626: MINUS
47627: PUSH
47628: LD_INT 3
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: LIST
47635: PUSH
47636: LD_VAR 0 1
47640: PUSH
47641: LD_INT 4
47643: PLUS
47644: PUSH
47645: LD_VAR 0 2
47649: PUSH
47650: LD_INT 4
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: LIST
47657: PUSH
47658: LD_VAR 0 1
47662: PUSH
47663: LD_VAR 0 2
47667: PUSH
47668: LD_INT 4
47670: PLUS
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: LIST
47679: PUSH
47680: LD_VAR 0 1
47684: PUSH
47685: LD_INT 3
47687: MINUS
47688: PUSH
47689: LD_VAR 0 2
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: LIST
47701: PUSH
47702: LD_VAR 0 1
47706: PUSH
47707: LD_INT 4
47709: MINUS
47710: PUSH
47711: LD_VAR 0 2
47715: PUSH
47716: LD_INT 4
47718: MINUS
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: ST_TO_ADDR
// end ; 3 :
47735: GO 48157
47737: LD_INT 3
47739: DOUBLE
47740: EQUAL
47741: IFTRUE 47745
47743: GO 47878
47745: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47746: LD_ADDR_VAR 0 5
47750: PUSH
47751: LD_VAR 0 1
47755: PUSH
47756: LD_INT 3
47758: PLUS
47759: PUSH
47760: LD_VAR 0 2
47764: PUSH
47765: LD_INT 4
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: PUSH
47773: LD_VAR 0 1
47777: PUSH
47778: LD_INT 4
47780: PLUS
47781: PUSH
47782: LD_VAR 0 2
47786: PUSH
47787: LD_INT 4
47789: PLUS
47790: PUSH
47791: LD_INT 5
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: LIST
47798: PUSH
47799: LD_VAR 0 1
47803: PUSH
47804: LD_INT 4
47806: MINUS
47807: PUSH
47808: LD_VAR 0 2
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: LIST
47820: PUSH
47821: LD_VAR 0 1
47825: PUSH
47826: LD_VAR 0 2
47830: PUSH
47831: LD_INT 4
47833: MINUS
47834: PUSH
47835: LD_INT 3
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: LIST
47842: PUSH
47843: LD_VAR 0 1
47847: PUSH
47848: LD_INT 3
47850: MINUS
47851: PUSH
47852: LD_VAR 0 2
47856: PUSH
47857: LD_INT 3
47859: MINUS
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: LIST
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: ST_TO_ADDR
// end ; 4 :
47876: GO 48157
47878: LD_INT 4
47880: DOUBLE
47881: EQUAL
47882: IFTRUE 47886
47884: GO 48019
47886: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47887: LD_ADDR_VAR 0 5
47891: PUSH
47892: LD_VAR 0 1
47896: PUSH
47897: LD_VAR 0 2
47901: PUSH
47902: LD_INT 4
47904: PLUS
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: PUSH
47914: LD_VAR 0 1
47918: PUSH
47919: LD_INT 3
47921: PLUS
47922: PUSH
47923: LD_VAR 0 2
47927: PUSH
47928: LD_INT 3
47930: PLUS
47931: PUSH
47932: LD_INT 5
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: LIST
47939: PUSH
47940: LD_VAR 0 1
47944: PUSH
47945: LD_INT 4
47947: PLUS
47948: PUSH
47949: LD_VAR 0 2
47953: PUSH
47954: LD_INT 4
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: LIST
47961: PUSH
47962: LD_VAR 0 1
47966: PUSH
47967: LD_VAR 0 2
47971: PUSH
47972: LD_INT 3
47974: MINUS
47975: PUSH
47976: LD_INT 3
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: LIST
47983: PUSH
47984: LD_VAR 0 1
47988: PUSH
47989: LD_INT 4
47991: MINUS
47992: PUSH
47993: LD_VAR 0 2
47997: PUSH
47998: LD_INT 4
48000: MINUS
48001: PUSH
48002: LD_INT 2
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: LIST
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// end ; 5 :
48017: GO 48157
48019: LD_INT 5
48021: DOUBLE
48022: EQUAL
48023: IFTRUE 48027
48025: GO 48156
48027: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
48028: LD_ADDR_VAR 0 5
48032: PUSH
48033: LD_VAR 0 1
48037: PUSH
48038: LD_INT 4
48040: MINUS
48041: PUSH
48042: LD_VAR 0 2
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: LIST
48054: PUSH
48055: LD_VAR 0 1
48059: PUSH
48060: LD_VAR 0 2
48064: PUSH
48065: LD_INT 4
48067: MINUS
48068: PUSH
48069: LD_INT 3
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: LIST
48076: PUSH
48077: LD_VAR 0 1
48081: PUSH
48082: LD_INT 4
48084: PLUS
48085: PUSH
48086: LD_VAR 0 2
48090: PUSH
48091: LD_INT 4
48093: PLUS
48094: PUSH
48095: LD_INT 5
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: LIST
48102: PUSH
48103: LD_VAR 0 1
48107: PUSH
48108: LD_INT 3
48110: PLUS
48111: PUSH
48112: LD_VAR 0 2
48116: PUSH
48117: LD_INT 4
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: LIST
48124: PUSH
48125: LD_VAR 0 1
48129: PUSH
48130: LD_VAR 0 2
48134: PUSH
48135: LD_INT 3
48137: PLUS
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: LIST
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: ST_TO_ADDR
// end ; end ;
48154: GO 48157
48156: POP
// result := list ;
48157: LD_ADDR_VAR 0 4
48161: PUSH
48162: LD_VAR 0 5
48166: ST_TO_ADDR
// end ;
48167: LD_VAR 0 4
48171: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48172: LD_INT 0
48174: PPUSH
48175: PPUSH
48176: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48177: LD_VAR 0 1
48181: NOT
48182: IFTRUE 48210
48184: PUSH
48185: LD_VAR 0 2
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: LD_INT 3
48198: PUSH
48199: LD_INT 4
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: IN
48208: NOT
48209: OR
48210: IFFALSE 48214
// exit ;
48212: GO 48297
// tmp := [ ] ;
48214: LD_ADDR_VAR 0 5
48218: PUSH
48219: EMPTY
48220: ST_TO_ADDR
// for i in units do
48221: LD_ADDR_VAR 0 4
48225: PUSH
48226: LD_VAR 0 1
48230: PUSH
48231: FOR_IN
48232: IFFALSE 48266
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
48234: LD_ADDR_VAR 0 5
48238: PUSH
48239: LD_VAR 0 5
48243: PPUSH
48244: LD_VAR 0 4
48248: PPUSH
48249: LD_VAR 0 2
48253: PPUSH
48254: CALL_OW 259
48258: PPUSH
48259: CALL 49692 0 2
48263: ST_TO_ADDR
48264: GO 48231
48266: POP
48267: POP
// if not tmp then
48268: LD_VAR 0 5
48272: NOT
48273: IFFALSE 48277
// exit ;
48275: GO 48297
// result := SortListByListDesc ( units , tmp ) ;
48277: LD_ADDR_VAR 0 3
48281: PUSH
48282: LD_VAR 0 1
48286: PPUSH
48287: LD_VAR 0 5
48291: PPUSH
48292: CALL_OW 77
48296: ST_TO_ADDR
// end ;
48297: LD_VAR 0 3
48301: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48302: LD_INT 0
48304: PPUSH
48305: PPUSH
48306: PPUSH
// result := false ;
48307: LD_ADDR_VAR 0 3
48311: PUSH
48312: LD_INT 0
48314: ST_TO_ADDR
// if not building then
48315: LD_VAR 0 2
48319: NOT
48320: IFFALSE 48324
// exit ;
48322: GO 48468
// x := GetX ( building ) ;
48324: LD_ADDR_VAR 0 4
48328: PUSH
48329: LD_VAR 0 2
48333: PPUSH
48334: CALL_OW 250
48338: ST_TO_ADDR
// y := GetY ( building ) ;
48339: LD_ADDR_VAR 0 5
48343: PUSH
48344: LD_VAR 0 2
48348: PPUSH
48349: CALL_OW 251
48353: ST_TO_ADDR
// if not x or not y then
48354: LD_VAR 0 4
48358: NOT
48359: IFTRUE 48368
48361: PUSH
48362: LD_VAR 0 5
48366: NOT
48367: OR
48368: IFFALSE 48372
// exit ;
48370: GO 48468
// if GetTaskList ( unit ) then
48372: LD_VAR 0 1
48376: PPUSH
48377: CALL_OW 437
48381: IFFALSE 48468
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48383: LD_STRING e
48385: PUSH
48386: LD_VAR 0 1
48390: PPUSH
48391: CALL_OW 437
48395: PUSH
48396: LD_INT 1
48398: ARRAY
48399: PUSH
48400: LD_INT 1
48402: ARRAY
48403: EQUAL
48404: IFFALSE 48431
48406: PUSH
48407: LD_VAR 0 4
48411: PUSH
48412: LD_VAR 0 1
48416: PPUSH
48417: CALL_OW 437
48421: PUSH
48422: LD_INT 1
48424: ARRAY
48425: PUSH
48426: LD_INT 2
48428: ARRAY
48429: EQUAL
48430: AND
48431: IFFALSE 48458
48433: PUSH
48434: LD_VAR 0 5
48438: PUSH
48439: LD_VAR 0 1
48443: PPUSH
48444: CALL_OW 437
48448: PUSH
48449: LD_INT 1
48451: ARRAY
48452: PUSH
48453: LD_INT 3
48455: ARRAY
48456: EQUAL
48457: AND
48458: IFFALSE 48468
// result := true end ;
48460: LD_ADDR_VAR 0 3
48464: PUSH
48465: LD_INT 1
48467: ST_TO_ADDR
// end ;
48468: LD_VAR 0 3
48472: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48473: LD_INT 0
48475: PPUSH
// result := false ;
48476: LD_ADDR_VAR 0 4
48480: PUSH
48481: LD_INT 0
48483: ST_TO_ADDR
// if GetTaskList ( unit ) then
48484: LD_VAR 0 1
48488: PPUSH
48489: CALL_OW 437
48493: IFFALSE 48580
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48495: LD_STRING M
48497: PUSH
48498: LD_VAR 0 1
48502: PPUSH
48503: CALL_OW 437
48507: PUSH
48508: LD_INT 1
48510: ARRAY
48511: PUSH
48512: LD_INT 1
48514: ARRAY
48515: EQUAL
48516: IFFALSE 48543
48518: PUSH
48519: LD_VAR 0 2
48523: PUSH
48524: LD_VAR 0 1
48528: PPUSH
48529: CALL_OW 437
48533: PUSH
48534: LD_INT 1
48536: ARRAY
48537: PUSH
48538: LD_INT 2
48540: ARRAY
48541: EQUAL
48542: AND
48543: IFFALSE 48570
48545: PUSH
48546: LD_VAR 0 3
48550: PUSH
48551: LD_VAR 0 1
48555: PPUSH
48556: CALL_OW 437
48560: PUSH
48561: LD_INT 1
48563: ARRAY
48564: PUSH
48565: LD_INT 3
48567: ARRAY
48568: EQUAL
48569: AND
48570: IFFALSE 48580
// result := true ;
48572: LD_ADDR_VAR 0 4
48576: PUSH
48577: LD_INT 1
48579: ST_TO_ADDR
// end ; end ;
48580: LD_VAR 0 4
48584: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48585: LD_INT 0
48587: PPUSH
48588: PPUSH
48589: PPUSH
48590: PPUSH
// if not unit or not area then
48591: LD_VAR 0 1
48595: NOT
48596: IFTRUE 48605
48598: PUSH
48599: LD_VAR 0 2
48603: NOT
48604: OR
48605: IFFALSE 48609
// exit ;
48607: GO 48785
// tmp := AreaToList ( area , i ) ;
48609: LD_ADDR_VAR 0 6
48613: PUSH
48614: LD_VAR 0 2
48618: PPUSH
48619: LD_VAR 0 5
48623: PPUSH
48624: CALL_OW 517
48628: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48629: LD_ADDR_VAR 0 5
48633: PUSH
48634: DOUBLE
48635: LD_INT 1
48637: DEC
48638: ST_TO_ADDR
48639: LD_VAR 0 6
48643: PUSH
48644: LD_INT 1
48646: ARRAY
48647: PUSH
48648: FOR_TO
48649: IFFALSE 48783
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48651: LD_ADDR_VAR 0 7
48655: PUSH
48656: LD_VAR 0 6
48660: PUSH
48661: LD_INT 1
48663: ARRAY
48664: PUSH
48665: LD_VAR 0 5
48669: ARRAY
48670: PUSH
48671: LD_VAR 0 6
48675: PUSH
48676: LD_INT 2
48678: ARRAY
48679: PUSH
48680: LD_VAR 0 5
48684: ARRAY
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
48690: LD_INT 92
48692: PUSH
48693: LD_VAR 0 7
48697: PUSH
48698: LD_INT 1
48700: ARRAY
48701: PUSH
48702: LD_VAR 0 7
48706: PUSH
48707: LD_INT 2
48709: ARRAY
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: PPUSH
48720: CALL_OW 69
48724: PUSH
48725: LD_INT 0
48727: EQUAL
48728: IFFALSE 48781
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48730: LD_VAR 0 1
48734: PPUSH
48735: LD_VAR 0 7
48739: PUSH
48740: LD_INT 1
48742: ARRAY
48743: PPUSH
48744: LD_VAR 0 7
48748: PUSH
48749: LD_INT 2
48751: ARRAY
48752: PPUSH
48753: LD_VAR 0 3
48757: PPUSH
48758: CALL_OW 48
// result := IsPlaced ( unit ) ;
48762: LD_ADDR_VAR 0 4
48766: PUSH
48767: LD_VAR 0 1
48771: PPUSH
48772: CALL_OW 305
48776: ST_TO_ADDR
// exit ;
48777: POP
48778: POP
48779: GO 48785
// end ; end ;
48781: GO 48648
48783: POP
48784: POP
// end ;
48785: LD_VAR 0 4
48789: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48790: LD_INT 0
48792: PPUSH
48793: PPUSH
48794: PPUSH
// if not side or side > 8 then
48795: LD_VAR 0 1
48799: NOT
48800: IFTRUE 48812
48802: PUSH
48803: LD_VAR 0 1
48807: PUSH
48808: LD_INT 8
48810: GREATER
48811: OR
48812: IFFALSE 48816
// exit ;
48814: GO 49003
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48816: LD_ADDR_VAR 0 4
48820: PUSH
48821: LD_INT 22
48823: PUSH
48824: LD_VAR 0 1
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 21
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PPUSH
48847: CALL_OW 69
48851: ST_TO_ADDR
// if not tmp then
48852: LD_VAR 0 4
48856: NOT
48857: IFFALSE 48861
// exit ;
48859: GO 49003
// enable_addtolog := true ;
48861: LD_ADDR_OWVAR 81
48865: PUSH
48866: LD_INT 1
48868: ST_TO_ADDR
// AddToLog ( [ ) ;
48869: LD_STRING [
48871: PPUSH
48872: CALL_OW 561
// for i in tmp do
48876: LD_ADDR_VAR 0 3
48880: PUSH
48881: LD_VAR 0 4
48885: PUSH
48886: FOR_IN
48887: IFFALSE 48994
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48889: LD_STRING [
48891: PUSH
48892: LD_VAR 0 3
48896: PPUSH
48897: CALL_OW 266
48901: STR
48902: PUSH
48903: LD_STRING , 
48905: STR
48906: PUSH
48907: LD_VAR 0 3
48911: PPUSH
48912: CALL_OW 250
48916: STR
48917: PUSH
48918: LD_STRING , 
48920: STR
48921: PUSH
48922: LD_VAR 0 3
48926: PPUSH
48927: CALL_OW 251
48931: STR
48932: PUSH
48933: LD_STRING , 
48935: STR
48936: PUSH
48937: LD_VAR 0 3
48941: PPUSH
48942: CALL_OW 254
48946: STR
48947: PUSH
48948: LD_STRING , 
48950: STR
48951: PUSH
48952: LD_VAR 0 3
48956: PPUSH
48957: LD_INT 1
48959: PPUSH
48960: CALL_OW 268
48964: STR
48965: PUSH
48966: LD_STRING , 
48968: STR
48969: PUSH
48970: LD_VAR 0 3
48974: PPUSH
48975: LD_INT 2
48977: PPUSH
48978: CALL_OW 268
48982: STR
48983: PUSH
48984: LD_STRING ],
48986: STR
48987: PPUSH
48988: CALL_OW 561
// end ;
48992: GO 48886
48994: POP
48995: POP
// AddToLog ( ]; ) ;
48996: LD_STRING ];
48998: PPUSH
48999: CALL_OW 561
// end ;
49003: LD_VAR 0 2
49007: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
49008: LD_INT 0
49010: PPUSH
49011: PPUSH
49012: PPUSH
49013: PPUSH
49014: PPUSH
// if not area or not rate or not max then
49015: LD_VAR 0 1
49019: NOT
49020: IFTRUE 49029
49022: PUSH
49023: LD_VAR 0 2
49027: NOT
49028: OR
49029: IFTRUE 49038
49031: PUSH
49032: LD_VAR 0 4
49036: NOT
49037: OR
49038: IFFALSE 49042
// exit ;
49040: GO 49231
// while 1 do
49042: LD_INT 1
49044: IFFALSE 49231
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
49046: LD_ADDR_VAR 0 9
49050: PUSH
49051: LD_VAR 0 1
49055: PPUSH
49056: LD_INT 1
49058: PPUSH
49059: CALL_OW 287
49063: PUSH
49064: LD_INT 10
49066: MUL
49067: ST_TO_ADDR
// r := rate / 10 ;
49068: LD_ADDR_VAR 0 7
49072: PUSH
49073: LD_VAR 0 2
49077: PUSH
49078: LD_INT 10
49080: DIVREAL
49081: ST_TO_ADDR
// time := 1 1$00 ;
49082: LD_ADDR_VAR 0 8
49086: PUSH
49087: LD_INT 2100
49089: ST_TO_ADDR
// if amount < min then
49090: LD_VAR 0 9
49094: PUSH
49095: LD_VAR 0 3
49099: LESS
49100: IFFALSE 49118
// r := r * 2 else
49102: LD_ADDR_VAR 0 7
49106: PUSH
49107: LD_VAR 0 7
49111: PUSH
49112: LD_INT 2
49114: MUL
49115: ST_TO_ADDR
49116: GO 49144
// if amount > max then
49118: LD_VAR 0 9
49122: PUSH
49123: LD_VAR 0 4
49127: GREATER
49128: IFFALSE 49144
// r := r / 2 ;
49130: LD_ADDR_VAR 0 7
49134: PUSH
49135: LD_VAR 0 7
49139: PUSH
49140: LD_INT 2
49142: DIVREAL
49143: ST_TO_ADDR
// time := time / r ;
49144: LD_ADDR_VAR 0 8
49148: PUSH
49149: LD_VAR 0 8
49153: PUSH
49154: LD_VAR 0 7
49158: DIVREAL
49159: ST_TO_ADDR
// if time < 0 then
49160: LD_VAR 0 8
49164: PUSH
49165: LD_INT 0
49167: LESS
49168: IFFALSE 49185
// time := time * - 1 ;
49170: LD_ADDR_VAR 0 8
49174: PUSH
49175: LD_VAR 0 8
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: MUL
49184: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
49185: LD_VAR 0 8
49189: PUSH
49190: LD_INT 35
49192: PPUSH
49193: LD_INT 875
49195: PPUSH
49196: CALL_OW 12
49200: PLUS
49201: PPUSH
49202: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49206: LD_INT 1
49208: PPUSH
49209: LD_INT 5
49211: PPUSH
49212: CALL_OW 12
49216: PPUSH
49217: LD_VAR 0 1
49221: PPUSH
49222: LD_INT 1
49224: PPUSH
49225: CALL_OW 55
// end ;
49229: GO 49042
// end ;
49231: LD_VAR 0 5
49235: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49236: LD_INT 0
49238: PPUSH
49239: PPUSH
49240: PPUSH
49241: PPUSH
49242: PPUSH
49243: PPUSH
49244: PPUSH
49245: PPUSH
// if not turrets or not factories then
49246: LD_VAR 0 1
49250: NOT
49251: IFTRUE 49260
49253: PUSH
49254: LD_VAR 0 2
49258: NOT
49259: OR
49260: IFFALSE 49264
// exit ;
49262: GO 49571
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49264: LD_ADDR_VAR 0 10
49268: PUSH
49269: LD_INT 5
49271: PUSH
49272: LD_INT 6
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: LD_INT 4
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 3
49291: PUSH
49292: LD_INT 5
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 24
49306: PUSH
49307: LD_INT 25
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 23
49316: PUSH
49317: LD_INT 27
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 42
49330: PUSH
49331: LD_INT 43
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 44
49340: PUSH
49341: LD_INT 46
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 45
49350: PUSH
49351: LD_INT 47
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: LIST
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: LIST
49367: ST_TO_ADDR
// result := [ ] ;
49368: LD_ADDR_VAR 0 3
49372: PUSH
49373: EMPTY
49374: ST_TO_ADDR
// for i in turrets do
49375: LD_ADDR_VAR 0 4
49379: PUSH
49380: LD_VAR 0 1
49384: PUSH
49385: FOR_IN
49386: IFFALSE 49569
// begin nat := GetNation ( i ) ;
49388: LD_ADDR_VAR 0 7
49392: PUSH
49393: LD_VAR 0 4
49397: PPUSH
49398: CALL_OW 248
49402: ST_TO_ADDR
// weapon := 0 ;
49403: LD_ADDR_VAR 0 8
49407: PUSH
49408: LD_INT 0
49410: ST_TO_ADDR
// if not nat then
49411: LD_VAR 0 7
49415: NOT
49416: IFFALSE 49420
// continue ;
49418: GO 49385
// for j in list [ nat ] do
49420: LD_ADDR_VAR 0 5
49424: PUSH
49425: LD_VAR 0 10
49429: PUSH
49430: LD_VAR 0 7
49434: ARRAY
49435: PUSH
49436: FOR_IN
49437: IFFALSE 49478
// if GetBWeapon ( i ) = j [ 1 ] then
49439: LD_VAR 0 4
49443: PPUSH
49444: CALL_OW 269
49448: PUSH
49449: LD_VAR 0 5
49453: PUSH
49454: LD_INT 1
49456: ARRAY
49457: EQUAL
49458: IFFALSE 49476
// begin weapon := j [ 2 ] ;
49460: LD_ADDR_VAR 0 8
49464: PUSH
49465: LD_VAR 0 5
49469: PUSH
49470: LD_INT 2
49472: ARRAY
49473: ST_TO_ADDR
// break ;
49474: GO 49478
// end ;
49476: GO 49436
49478: POP
49479: POP
// if not weapon then
49480: LD_VAR 0 8
49484: NOT
49485: IFFALSE 49489
// continue ;
49487: GO 49385
// for k in factories do
49489: LD_ADDR_VAR 0 6
49493: PUSH
49494: LD_VAR 0 2
49498: PUSH
49499: FOR_IN
49500: IFFALSE 49565
// begin weapons := AvailableWeaponList ( k ) ;
49502: LD_ADDR_VAR 0 9
49506: PUSH
49507: LD_VAR 0 6
49511: PPUSH
49512: CALL_OW 478
49516: ST_TO_ADDR
// if not weapons then
49517: LD_VAR 0 9
49521: NOT
49522: IFFALSE 49526
// continue ;
49524: GO 49499
// if weapon in weapons then
49526: LD_VAR 0 8
49530: PUSH
49531: LD_VAR 0 9
49535: IN
49536: IFFALSE 49563
// begin result := [ i , weapon ] ;
49538: LD_ADDR_VAR 0 3
49542: PUSH
49543: LD_VAR 0 4
49547: PUSH
49548: LD_VAR 0 8
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: ST_TO_ADDR
// exit ;
49557: POP
49558: POP
49559: POP
49560: POP
49561: GO 49571
// end ; end ;
49563: GO 49499
49565: POP
49566: POP
// end ;
49567: GO 49385
49569: POP
49570: POP
// end ;
49571: LD_VAR 0 3
49575: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49576: LD_INT 0
49578: PPUSH
// if not side or side > 8 then
49579: LD_VAR 0 3
49583: NOT
49584: IFTRUE 49596
49586: PUSH
49587: LD_VAR 0 3
49591: PUSH
49592: LD_INT 8
49594: GREATER
49595: OR
49596: IFFALSE 49600
// exit ;
49598: GO 49659
// if not range then
49600: LD_VAR 0 4
49604: NOT
49605: IFFALSE 49616
// range := - 12 ;
49607: LD_ADDR_VAR 0 4
49611: PUSH
49612: LD_INT 12
49614: NEG
49615: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49616: LD_VAR 0 1
49620: PPUSH
49621: LD_VAR 0 2
49625: PPUSH
49626: LD_VAR 0 3
49630: PPUSH
49631: LD_VAR 0 4
49635: PPUSH
49636: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49640: LD_VAR 0 1
49644: PPUSH
49645: LD_VAR 0 2
49649: PPUSH
49650: LD_VAR 0 3
49654: PPUSH
49655: CALL_OW 331
// end ;
49659: LD_VAR 0 5
49663: RET
// export function Video ( mode ) ; begin
49664: LD_INT 0
49666: PPUSH
// ingame_video = mode ;
49667: LD_ADDR_OWVAR 52
49671: PUSH
49672: LD_VAR 0 1
49676: ST_TO_ADDR
// interface_hidden = mode ;
49677: LD_ADDR_OWVAR 54
49681: PUSH
49682: LD_VAR 0 1
49686: ST_TO_ADDR
// end ;
49687: LD_VAR 0 2
49691: RET
// export function Join ( array , element ) ; begin
49692: LD_INT 0
49694: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49695: LD_ADDR_VAR 0 3
49699: PUSH
49700: LD_VAR 0 1
49704: PPUSH
49705: LD_VAR 0 1
49709: PUSH
49710: LD_INT 1
49712: PLUS
49713: PPUSH
49714: LD_VAR 0 2
49718: PPUSH
49719: CALL_OW 1
49723: ST_TO_ADDR
// end ;
49724: LD_VAR 0 3
49728: RET
// export function JoinUnion ( array , element ) ; begin
49729: LD_INT 0
49731: PPUSH
// result := array union element ;
49732: LD_ADDR_VAR 0 3
49736: PUSH
49737: LD_VAR 0 1
49741: PUSH
49742: LD_VAR 0 2
49746: UNION
49747: ST_TO_ADDR
// end ;
49748: LD_VAR 0 3
49752: RET
// export function GetBehemoths ( side ) ; begin
49753: LD_INT 0
49755: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
49756: LD_ADDR_VAR 0 2
49760: PUSH
49761: LD_INT 22
49763: PUSH
49764: LD_VAR 0 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 31
49775: PUSH
49776: LD_INT 25
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PPUSH
49787: CALL_OW 69
49791: ST_TO_ADDR
// end ;
49792: LD_VAR 0 2
49796: RET
// export function Shuffle ( array ) ; var i , index ; begin
49797: LD_INT 0
49799: PPUSH
49800: PPUSH
49801: PPUSH
// result := [ ] ;
49802: LD_ADDR_VAR 0 2
49806: PUSH
49807: EMPTY
49808: ST_TO_ADDR
// if not array then
49809: LD_VAR 0 1
49813: NOT
49814: IFFALSE 49818
// exit ;
49816: GO 49917
// Randomize ;
49818: CALL_OW 10
// for i = array downto 1 do
49822: LD_ADDR_VAR 0 3
49826: PUSH
49827: DOUBLE
49828: LD_VAR 0 1
49832: INC
49833: ST_TO_ADDR
49834: LD_INT 1
49836: PUSH
49837: FOR_DOWNTO
49838: IFFALSE 49915
// begin index := rand ( 1 , array ) ;
49840: LD_ADDR_VAR 0 4
49844: PUSH
49845: LD_INT 1
49847: PPUSH
49848: LD_VAR 0 1
49852: PPUSH
49853: CALL_OW 12
49857: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49858: LD_ADDR_VAR 0 2
49862: PUSH
49863: LD_VAR 0 2
49867: PPUSH
49868: LD_VAR 0 2
49872: PUSH
49873: LD_INT 1
49875: PLUS
49876: PPUSH
49877: LD_VAR 0 1
49881: PUSH
49882: LD_VAR 0 4
49886: ARRAY
49887: PPUSH
49888: CALL_OW 2
49892: ST_TO_ADDR
// array := Delete ( array , index ) ;
49893: LD_ADDR_VAR 0 1
49897: PUSH
49898: LD_VAR 0 1
49902: PPUSH
49903: LD_VAR 0 4
49907: PPUSH
49908: CALL_OW 3
49912: ST_TO_ADDR
// end ;
49913: GO 49837
49915: POP
49916: POP
// end ;
49917: LD_VAR 0 2
49921: RET
// export function GetBaseMaterials ( base ) ; begin
49922: LD_INT 0
49924: PPUSH
// result := [ 0 , 0 , 0 ] ;
49925: LD_ADDR_VAR 0 2
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: LIST
49943: ST_TO_ADDR
// if not base then
49944: LD_VAR 0 1
49948: NOT
49949: IFFALSE 49953
// exit ;
49951: GO 50002
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49953: LD_ADDR_VAR 0 2
49957: PUSH
49958: LD_VAR 0 1
49962: PPUSH
49963: LD_INT 1
49965: PPUSH
49966: CALL_OW 275
49970: PUSH
49971: LD_VAR 0 1
49975: PPUSH
49976: LD_INT 2
49978: PPUSH
49979: CALL_OW 275
49983: PUSH
49984: LD_VAR 0 1
49988: PPUSH
49989: LD_INT 3
49991: PPUSH
49992: CALL_OW 275
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: LIST
50001: ST_TO_ADDR
// end ;
50002: LD_VAR 0 2
50006: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
50007: LD_INT 0
50009: PPUSH
50010: PPUSH
// result := array ;
50011: LD_ADDR_VAR 0 3
50015: PUSH
50016: LD_VAR 0 1
50020: ST_TO_ADDR
// if size >= result then
50021: LD_VAR 0 2
50025: PUSH
50026: LD_VAR 0 3
50030: GREATEREQUAL
50031: IFFALSE 50035
// exit ;
50033: GO 50085
// if size then
50035: LD_VAR 0 2
50039: IFFALSE 50085
// for i := array downto size do
50041: LD_ADDR_VAR 0 4
50045: PUSH
50046: DOUBLE
50047: LD_VAR 0 1
50051: INC
50052: ST_TO_ADDR
50053: LD_VAR 0 2
50057: PUSH
50058: FOR_DOWNTO
50059: IFFALSE 50083
// result := Delete ( result , result ) ;
50061: LD_ADDR_VAR 0 3
50065: PUSH
50066: LD_VAR 0 3
50070: PPUSH
50071: LD_VAR 0 3
50075: PPUSH
50076: CALL_OW 3
50080: ST_TO_ADDR
50081: GO 50058
50083: POP
50084: POP
// end ;
50085: LD_VAR 0 3
50089: RET
// export function ComExit ( unit ) ; var tmp ; begin
50090: LD_INT 0
50092: PPUSH
50093: PPUSH
// if not IsInUnit ( unit ) then
50094: LD_VAR 0 1
50098: PPUSH
50099: CALL_OW 310
50103: NOT
50104: IFFALSE 50108
// exit ;
50106: GO 50168
// tmp := IsInUnit ( unit ) ;
50108: LD_ADDR_VAR 0 3
50112: PUSH
50113: LD_VAR 0 1
50117: PPUSH
50118: CALL_OW 310
50122: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
50123: LD_VAR 0 3
50127: PPUSH
50128: CALL_OW 247
50132: PUSH
50133: LD_INT 2
50135: EQUAL
50136: IFFALSE 50149
// ComExitVehicle ( unit ) else
50138: LD_VAR 0 1
50142: PPUSH
50143: CALL_OW 121
50147: GO 50158
// ComExitBuilding ( unit ) ;
50149: LD_VAR 0 1
50153: PPUSH
50154: CALL_OW 122
// result := tmp ;
50158: LD_ADDR_VAR 0 2
50162: PUSH
50163: LD_VAR 0 3
50167: ST_TO_ADDR
// end ;
50168: LD_VAR 0 2
50172: RET
// export function ComExitAll ( units ) ; var i ; begin
50173: LD_INT 0
50175: PPUSH
50176: PPUSH
// if not units then
50177: LD_VAR 0 1
50181: NOT
50182: IFFALSE 50186
// exit ;
50184: GO 50212
// for i in units do
50186: LD_ADDR_VAR 0 3
50190: PUSH
50191: LD_VAR 0 1
50195: PUSH
50196: FOR_IN
50197: IFFALSE 50210
// ComExit ( i ) ;
50199: LD_VAR 0 3
50203: PPUSH
50204: CALL 50090 0 1
50208: GO 50196
50210: POP
50211: POP
// end ;
50212: LD_VAR 0 2
50216: RET
// export function ResetHc ; begin
50217: LD_INT 0
50219: PPUSH
// InitHc ;
50220: CALL_OW 19
// hc_importance := 0 ;
50224: LD_ADDR_OWVAR 32
50228: PUSH
50229: LD_INT 0
50231: ST_TO_ADDR
// end ;
50232: LD_VAR 0 1
50236: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50237: LD_INT 0
50239: PPUSH
50240: PPUSH
50241: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50242: LD_ADDR_VAR 0 6
50246: PUSH
50247: LD_VAR 0 1
50251: PUSH
50252: LD_VAR 0 3
50256: PLUS
50257: PUSH
50258: LD_INT 2
50260: DIV
50261: ST_TO_ADDR
// if _x < 0 then
50262: LD_VAR 0 6
50266: PUSH
50267: LD_INT 0
50269: LESS
50270: IFFALSE 50287
// _x := _x * - 1 ;
50272: LD_ADDR_VAR 0 6
50276: PUSH
50277: LD_VAR 0 6
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: MUL
50286: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50287: LD_ADDR_VAR 0 7
50291: PUSH
50292: LD_VAR 0 2
50296: PUSH
50297: LD_VAR 0 4
50301: PLUS
50302: PUSH
50303: LD_INT 2
50305: DIV
50306: ST_TO_ADDR
// if _y < 0 then
50307: LD_VAR 0 7
50311: PUSH
50312: LD_INT 0
50314: LESS
50315: IFFALSE 50332
// _y := _y * - 1 ;
50317: LD_ADDR_VAR 0 7
50321: PUSH
50322: LD_VAR 0 7
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: MUL
50331: ST_TO_ADDR
// result := [ _x , _y ] ;
50332: LD_ADDR_VAR 0 5
50336: PUSH
50337: LD_VAR 0 6
50341: PUSH
50342: LD_VAR 0 7
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: ST_TO_ADDR
// end ;
50351: LD_VAR 0 5
50355: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50356: LD_INT 0
50358: PPUSH
50359: PPUSH
50360: PPUSH
50361: PPUSH
// task := GetTaskList ( unit ) ;
50362: LD_ADDR_VAR 0 7
50366: PUSH
50367: LD_VAR 0 1
50371: PPUSH
50372: CALL_OW 437
50376: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50377: LD_VAR 0 7
50381: NOT
50382: IFFALSE 50401
50384: PUSH
50385: LD_VAR 0 1
50389: PPUSH
50390: LD_VAR 0 2
50394: PPUSH
50395: CALL_OW 308
50399: NOT
50400: AND
50401: IFFALSE 50405
// exit ;
50403: GO 50523
// if IsInArea ( unit , area ) then
50405: LD_VAR 0 1
50409: PPUSH
50410: LD_VAR 0 2
50414: PPUSH
50415: CALL_OW 308
50419: IFFALSE 50437
// begin ComMoveToArea ( unit , goAway ) ;
50421: LD_VAR 0 1
50425: PPUSH
50426: LD_VAR 0 3
50430: PPUSH
50431: CALL_OW 113
// exit ;
50435: GO 50523
// end ; if task [ 1 ] [ 1 ] <> M then
50437: LD_VAR 0 7
50441: PUSH
50442: LD_INT 1
50444: ARRAY
50445: PUSH
50446: LD_INT 1
50448: ARRAY
50449: PUSH
50450: LD_STRING M
50452: NONEQUAL
50453: IFFALSE 50457
// exit ;
50455: GO 50523
// x := task [ 1 ] [ 2 ] ;
50457: LD_ADDR_VAR 0 5
50461: PUSH
50462: LD_VAR 0 7
50466: PUSH
50467: LD_INT 1
50469: ARRAY
50470: PUSH
50471: LD_INT 2
50473: ARRAY
50474: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50475: LD_ADDR_VAR 0 6
50479: PUSH
50480: LD_VAR 0 7
50484: PUSH
50485: LD_INT 1
50487: ARRAY
50488: PUSH
50489: LD_INT 3
50491: ARRAY
50492: ST_TO_ADDR
// if InArea ( x , y , area ) then
50493: LD_VAR 0 5
50497: PPUSH
50498: LD_VAR 0 6
50502: PPUSH
50503: LD_VAR 0 2
50507: PPUSH
50508: CALL_OW 309
50512: IFFALSE 50523
// ComStop ( unit ) ;
50514: LD_VAR 0 1
50518: PPUSH
50519: CALL_OW 141
// end ;
50523: LD_VAR 0 4
50527: RET
// export function Abs ( value ) ; begin
50528: LD_INT 0
50530: PPUSH
// result := value ;
50531: LD_ADDR_VAR 0 2
50535: PUSH
50536: LD_VAR 0 1
50540: ST_TO_ADDR
// if value < 0 then
50541: LD_VAR 0 1
50545: PUSH
50546: LD_INT 0
50548: LESS
50549: IFFALSE 50566
// result := value * - 1 ;
50551: LD_ADDR_VAR 0 2
50555: PUSH
50556: LD_VAR 0 1
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: MUL
50565: ST_TO_ADDR
// end ;
50566: LD_VAR 0 2
50570: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50571: LD_INT 0
50573: PPUSH
50574: PPUSH
50575: PPUSH
50576: PPUSH
50577: PPUSH
50578: PPUSH
50579: PPUSH
50580: PPUSH
// if not unit or not building then
50581: LD_VAR 0 1
50585: NOT
50586: IFTRUE 50595
50588: PUSH
50589: LD_VAR 0 2
50593: NOT
50594: OR
50595: IFFALSE 50599
// exit ;
50597: GO 50827
// x := GetX ( building ) ;
50599: LD_ADDR_VAR 0 4
50603: PUSH
50604: LD_VAR 0 2
50608: PPUSH
50609: CALL_OW 250
50613: ST_TO_ADDR
// y := GetY ( building ) ;
50614: LD_ADDR_VAR 0 6
50618: PUSH
50619: LD_VAR 0 2
50623: PPUSH
50624: CALL_OW 251
50628: ST_TO_ADDR
// d := GetDir ( building ) ;
50629: LD_ADDR_VAR 0 8
50633: PUSH
50634: LD_VAR 0 2
50638: PPUSH
50639: CALL_OW 254
50643: ST_TO_ADDR
// r := 4 ;
50644: LD_ADDR_VAR 0 9
50648: PUSH
50649: LD_INT 4
50651: ST_TO_ADDR
// for i := 1 to 5 do
50652: LD_ADDR_VAR 0 10
50656: PUSH
50657: DOUBLE
50658: LD_INT 1
50660: DEC
50661: ST_TO_ADDR
50662: LD_INT 5
50664: PUSH
50665: FOR_TO
50666: IFFALSE 50825
// begin _x := ShiftX ( x , d , r + i ) ;
50668: LD_ADDR_VAR 0 5
50672: PUSH
50673: LD_VAR 0 4
50677: PPUSH
50678: LD_VAR 0 8
50682: PPUSH
50683: LD_VAR 0 9
50687: PUSH
50688: LD_VAR 0 10
50692: PLUS
50693: PPUSH
50694: CALL_OW 272
50698: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50699: LD_ADDR_VAR 0 7
50703: PUSH
50704: LD_VAR 0 6
50708: PPUSH
50709: LD_VAR 0 8
50713: PPUSH
50714: LD_VAR 0 9
50718: PUSH
50719: LD_VAR 0 10
50723: PLUS
50724: PPUSH
50725: CALL_OW 273
50729: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50730: LD_VAR 0 5
50734: PPUSH
50735: LD_VAR 0 7
50739: PPUSH
50740: CALL_OW 488
50744: IFFALSE 50779
50746: PUSH
50747: LD_VAR 0 5
50751: PPUSH
50752: LD_VAR 0 7
50756: PPUSH
50757: CALL_OW 428
50761: PPUSH
50762: CALL_OW 247
50766: PUSH
50767: LD_INT 3
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: IN
50777: NOT
50778: AND
50779: IFFALSE 50823
// begin ComMoveXY ( unit , _x , _y ) ;
50781: LD_VAR 0 1
50785: PPUSH
50786: LD_VAR 0 5
50790: PPUSH
50791: LD_VAR 0 7
50795: PPUSH
50796: CALL_OW 111
// result := [ _x , _y ] ;
50800: LD_ADDR_VAR 0 3
50804: PUSH
50805: LD_VAR 0 5
50809: PUSH
50810: LD_VAR 0 7
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: ST_TO_ADDR
// exit ;
50819: POP
50820: POP
50821: GO 50827
// end ; end ;
50823: GO 50665
50825: POP
50826: POP
// end ;
50827: LD_VAR 0 3
50831: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50832: LD_INT 0
50834: PPUSH
50835: PPUSH
50836: PPUSH
// result := 0 ;
50837: LD_ADDR_VAR 0 3
50841: PUSH
50842: LD_INT 0
50844: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50845: LD_VAR 0 1
50849: PUSH
50850: LD_INT 0
50852: LESS
50853: IFTRUE 50865
50855: PUSH
50856: LD_VAR 0 1
50860: PUSH
50861: LD_INT 8
50863: GREATER
50864: OR
50865: IFTRUE 50877
50867: PUSH
50868: LD_VAR 0 2
50872: PUSH
50873: LD_INT 0
50875: LESS
50876: OR
50877: IFTRUE 50889
50879: PUSH
50880: LD_VAR 0 2
50884: PUSH
50885: LD_INT 8
50887: GREATER
50888: OR
50889: IFFALSE 50893
// exit ;
50891: GO 50968
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50893: LD_ADDR_VAR 0 4
50897: PUSH
50898: LD_INT 22
50900: PUSH
50901: LD_VAR 0 2
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PPUSH
50910: CALL_OW 69
50914: PUSH
50915: FOR_IN
50916: IFFALSE 50966
// begin un := UnitShoot ( i ) ;
50918: LD_ADDR_VAR 0 5
50922: PUSH
50923: LD_VAR 0 4
50927: PPUSH
50928: CALL_OW 504
50932: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50933: LD_VAR 0 5
50937: PPUSH
50938: CALL_OW 255
50942: PUSH
50943: LD_VAR 0 1
50947: EQUAL
50948: IFFALSE 50964
// begin result := un ;
50950: LD_ADDR_VAR 0 3
50954: PUSH
50955: LD_VAR 0 5
50959: ST_TO_ADDR
// exit ;
50960: POP
50961: POP
50962: GO 50968
// end ; end ;
50964: GO 50915
50966: POP
50967: POP
// end ;
50968: LD_VAR 0 3
50972: RET
// export function GetCargoBay ( units ) ; begin
50973: LD_INT 0
50975: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50976: LD_ADDR_VAR 0 2
50980: PUSH
50981: LD_VAR 0 1
50985: PPUSH
50986: LD_INT 2
50988: PUSH
50989: LD_INT 34
50991: PUSH
50992: LD_INT 12
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 34
51001: PUSH
51002: LD_INT 51
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 34
51011: PUSH
51012: LD_INT 32
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 34
51021: PUSH
51022: LD_INT 89
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: PPUSH
51036: CALL_OW 72
51040: ST_TO_ADDR
// end ;
51041: LD_VAR 0 2
51045: RET
// export function Negate ( value ) ; begin
51046: LD_INT 0
51048: PPUSH
// result := not value ;
51049: LD_ADDR_VAR 0 2
51053: PUSH
51054: LD_VAR 0 1
51058: NOT
51059: ST_TO_ADDR
// end ;
51060: LD_VAR 0 2
51064: RET
// export function Inc ( value ) ; begin
51065: LD_INT 0
51067: PPUSH
// result := value + 1 ;
51068: LD_ADDR_VAR 0 2
51072: PUSH
51073: LD_VAR 0 1
51077: PUSH
51078: LD_INT 1
51080: PLUS
51081: ST_TO_ADDR
// end ;
51082: LD_VAR 0 2
51086: RET
// export function Dec ( value ) ; begin
51087: LD_INT 0
51089: PPUSH
// result := value - 1 ;
51090: LD_ADDR_VAR 0 2
51094: PUSH
51095: LD_VAR 0 1
51099: PUSH
51100: LD_INT 1
51102: MINUS
51103: ST_TO_ADDR
// end ;
51104: LD_VAR 0 2
51108: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
51109: LD_INT 0
51111: PPUSH
51112: PPUSH
51113: PPUSH
51114: PPUSH
51115: PPUSH
51116: PPUSH
51117: PPUSH
51118: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
51119: LD_VAR 0 1
51123: PPUSH
51124: LD_VAR 0 2
51128: PPUSH
51129: CALL_OW 488
51133: NOT
51134: IFTRUE 51153
51136: PUSH
51137: LD_VAR 0 3
51141: PPUSH
51142: LD_VAR 0 4
51146: PPUSH
51147: CALL_OW 488
51151: NOT
51152: OR
51153: IFFALSE 51166
// begin result := - 1 ;
51155: LD_ADDR_VAR 0 5
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: ST_TO_ADDR
// exit ;
51164: GO 51401
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
51166: LD_ADDR_VAR 0 12
51170: PUSH
51171: LD_VAR 0 1
51175: PPUSH
51176: LD_VAR 0 2
51180: PPUSH
51181: LD_VAR 0 3
51185: PPUSH
51186: LD_VAR 0 4
51190: PPUSH
51191: CALL 50237 0 4
51195: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
51196: LD_ADDR_VAR 0 11
51200: PUSH
51201: LD_VAR 0 1
51205: PPUSH
51206: LD_VAR 0 2
51210: PPUSH
51211: LD_VAR 0 12
51215: PUSH
51216: LD_INT 1
51218: ARRAY
51219: PPUSH
51220: LD_VAR 0 12
51224: PUSH
51225: LD_INT 2
51227: ARRAY
51228: PPUSH
51229: CALL_OW 298
51233: ST_TO_ADDR
// distance := 9999 ;
51234: LD_ADDR_VAR 0 10
51238: PUSH
51239: LD_INT 9999
51241: ST_TO_ADDR
// for i := 0 to 5 do
51242: LD_ADDR_VAR 0 6
51246: PUSH
51247: DOUBLE
51248: LD_INT 0
51250: DEC
51251: ST_TO_ADDR
51252: LD_INT 5
51254: PUSH
51255: FOR_TO
51256: IFFALSE 51399
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51258: LD_ADDR_VAR 0 7
51262: PUSH
51263: LD_VAR 0 1
51267: PPUSH
51268: LD_VAR 0 6
51272: PPUSH
51273: LD_VAR 0 11
51277: PPUSH
51278: CALL_OW 272
51282: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51283: LD_ADDR_VAR 0 8
51287: PUSH
51288: LD_VAR 0 2
51292: PPUSH
51293: LD_VAR 0 6
51297: PPUSH
51298: LD_VAR 0 11
51302: PPUSH
51303: CALL_OW 273
51307: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51308: LD_VAR 0 7
51312: PPUSH
51313: LD_VAR 0 8
51317: PPUSH
51318: CALL_OW 488
51322: NOT
51323: IFFALSE 51327
// continue ;
51325: GO 51255
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51327: LD_ADDR_VAR 0 9
51331: PUSH
51332: LD_VAR 0 12
51336: PUSH
51337: LD_INT 1
51339: ARRAY
51340: PPUSH
51341: LD_VAR 0 12
51345: PUSH
51346: LD_INT 2
51348: ARRAY
51349: PPUSH
51350: LD_VAR 0 7
51354: PPUSH
51355: LD_VAR 0 8
51359: PPUSH
51360: CALL_OW 298
51364: ST_TO_ADDR
// if tmp < distance then
51365: LD_VAR 0 9
51369: PUSH
51370: LD_VAR 0 10
51374: LESS
51375: IFFALSE 51397
// begin result := i ;
51377: LD_ADDR_VAR 0 5
51381: PUSH
51382: LD_VAR 0 6
51386: ST_TO_ADDR
// distance := tmp ;
51387: LD_ADDR_VAR 0 10
51391: PUSH
51392: LD_VAR 0 9
51396: ST_TO_ADDR
// end ; end ;
51397: GO 51255
51399: POP
51400: POP
// end ;
51401: LD_VAR 0 5
51405: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51406: LD_INT 0
51408: PPUSH
51409: PPUSH
// if not driver or not IsInUnit ( driver ) then
51410: LD_VAR 0 1
51414: NOT
51415: IFTRUE 51429
51417: PUSH
51418: LD_VAR 0 1
51422: PPUSH
51423: CALL_OW 310
51427: NOT
51428: OR
51429: IFFALSE 51433
// exit ;
51431: GO 51523
// vehicle := IsInUnit ( driver ) ;
51433: LD_ADDR_VAR 0 3
51437: PUSH
51438: LD_VAR 0 1
51442: PPUSH
51443: CALL_OW 310
51447: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51448: LD_VAR 0 1
51452: PPUSH
51453: LD_STRING \
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: PUSH
51483: LD_STRING E
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: LD_VAR 0 3
51496: PUSH
51497: LD_INT 0
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PPUSH
51519: CALL_OW 446
// end ;
51523: LD_VAR 0 2
51527: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51528: LD_INT 0
51530: PPUSH
51531: PPUSH
// if not driver or not IsInUnit ( driver ) then
51532: LD_VAR 0 1
51536: NOT
51537: IFTRUE 51551
51539: PUSH
51540: LD_VAR 0 1
51544: PPUSH
51545: CALL_OW 310
51549: NOT
51550: OR
51551: IFFALSE 51555
// exit ;
51553: GO 51645
// vehicle := IsInUnit ( driver ) ;
51555: LD_ADDR_VAR 0 3
51559: PUSH
51560: LD_VAR 0 1
51564: PPUSH
51565: CALL_OW 310
51569: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51570: LD_VAR 0 1
51574: PPUSH
51575: LD_STRING \
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: PUSH
51605: LD_STRING E
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_VAR 0 3
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PPUSH
51641: CALL_OW 447
// end ;
51645: LD_VAR 0 2
51649: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51650: LD_INT 0
51652: PPUSH
51653: PPUSH
51654: PPUSH
// tmp := [ ] ;
51655: LD_ADDR_VAR 0 5
51659: PUSH
51660: EMPTY
51661: ST_TO_ADDR
// for i in units do
51662: LD_ADDR_VAR 0 4
51666: PUSH
51667: LD_VAR 0 1
51671: PUSH
51672: FOR_IN
51673: IFFALSE 51711
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51675: LD_ADDR_VAR 0 5
51679: PUSH
51680: LD_VAR 0 5
51684: PPUSH
51685: LD_VAR 0 5
51689: PUSH
51690: LD_INT 1
51692: PLUS
51693: PPUSH
51694: LD_VAR 0 4
51698: PPUSH
51699: CALL_OW 256
51703: PPUSH
51704: CALL_OW 2
51708: ST_TO_ADDR
51709: GO 51672
51711: POP
51712: POP
// if not tmp then
51713: LD_VAR 0 5
51717: NOT
51718: IFFALSE 51722
// exit ;
51720: GO 51770
// if asc then
51722: LD_VAR 0 2
51726: IFFALSE 51750
// result := SortListByListAsc ( units , tmp ) else
51728: LD_ADDR_VAR 0 3
51732: PUSH
51733: LD_VAR 0 1
51737: PPUSH
51738: LD_VAR 0 5
51742: PPUSH
51743: CALL_OW 76
51747: ST_TO_ADDR
51748: GO 51770
// result := SortListByListDesc ( units , tmp ) ;
51750: LD_ADDR_VAR 0 3
51754: PUSH
51755: LD_VAR 0 1
51759: PPUSH
51760: LD_VAR 0 5
51764: PPUSH
51765: CALL_OW 77
51769: ST_TO_ADDR
// end ;
51770: LD_VAR 0 3
51774: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51775: LD_INT 0
51777: PPUSH
51778: PPUSH
// task := GetTaskList ( mech ) ;
51779: LD_ADDR_VAR 0 4
51783: PUSH
51784: LD_VAR 0 1
51788: PPUSH
51789: CALL_OW 437
51793: ST_TO_ADDR
// if not task then
51794: LD_VAR 0 4
51798: NOT
51799: IFFALSE 51803
// exit ;
51801: GO 51847
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51803: LD_ADDR_VAR 0 3
51807: PUSH
51808: LD_VAR 0 4
51812: PUSH
51813: LD_INT 1
51815: ARRAY
51816: PUSH
51817: LD_INT 1
51819: ARRAY
51820: PUSH
51821: LD_STRING r
51823: EQUAL
51824: IFFALSE 51846
51826: PUSH
51827: LD_VAR 0 4
51831: PUSH
51832: LD_INT 1
51834: ARRAY
51835: PUSH
51836: LD_INT 4
51838: ARRAY
51839: PUSH
51840: LD_VAR 0 2
51844: EQUAL
51845: AND
51846: ST_TO_ADDR
// end ;
51847: LD_VAR 0 3
51851: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51852: LD_INT 0
51854: PPUSH
// SetDir ( unit , d ) ;
51855: LD_VAR 0 1
51859: PPUSH
51860: LD_VAR 0 4
51864: PPUSH
51865: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51869: LD_ADDR_VAR 0 6
51873: PUSH
51874: LD_VAR 0 1
51878: PPUSH
51879: LD_VAR 0 2
51883: PPUSH
51884: LD_VAR 0 3
51888: PPUSH
51889: LD_VAR 0 5
51893: PPUSH
51894: CALL_OW 48
51898: ST_TO_ADDR
// end ;
51899: LD_VAR 0 6
51903: RET
// export function ToNaturalNumber ( number ) ; begin
51904: LD_INT 0
51906: PPUSH
// result := number div 1 ;
51907: LD_ADDR_VAR 0 2
51911: PUSH
51912: LD_VAR 0 1
51916: PUSH
51917: LD_INT 1
51919: DIV
51920: ST_TO_ADDR
// if number < 0 then
51921: LD_VAR 0 1
51925: PUSH
51926: LD_INT 0
51928: LESS
51929: IFFALSE 51939
// result := 0 ;
51931: LD_ADDR_VAR 0 2
51935: PUSH
51936: LD_INT 0
51938: ST_TO_ADDR
// end ;
51939: LD_VAR 0 2
51943: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51944: LD_INT 0
51946: PPUSH
51947: PPUSH
51948: PPUSH
// if not buildings then
51949: LD_VAR 0 1
51953: NOT
51954: IFFALSE 51958
// exit ;
51956: GO 52073
// tmp := [ ] ;
51958: LD_ADDR_VAR 0 5
51962: PUSH
51963: EMPTY
51964: ST_TO_ADDR
// for b in buildings do
51965: LD_ADDR_VAR 0 4
51969: PUSH
51970: LD_VAR 0 1
51974: PUSH
51975: FOR_IN
51976: IFFALSE 52014
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51978: LD_ADDR_VAR 0 5
51982: PUSH
51983: LD_VAR 0 5
51987: PPUSH
51988: LD_VAR 0 5
51992: PUSH
51993: LD_INT 1
51995: PLUS
51996: PPUSH
51997: LD_VAR 0 4
52001: PPUSH
52002: CALL_OW 266
52006: PPUSH
52007: CALL_OW 1
52011: ST_TO_ADDR
52012: GO 51975
52014: POP
52015: POP
// if not tmp then
52016: LD_VAR 0 5
52020: NOT
52021: IFFALSE 52025
// exit ;
52023: GO 52073
// if asc then
52025: LD_VAR 0 2
52029: IFFALSE 52053
// result := SortListByListAsc ( buildings , tmp ) else
52031: LD_ADDR_VAR 0 3
52035: PUSH
52036: LD_VAR 0 1
52040: PPUSH
52041: LD_VAR 0 5
52045: PPUSH
52046: CALL_OW 76
52050: ST_TO_ADDR
52051: GO 52073
// result := SortListByListDesc ( buildings , tmp ) ;
52053: LD_ADDR_VAR 0 3
52057: PUSH
52058: LD_VAR 0 1
52062: PPUSH
52063: LD_VAR 0 5
52067: PPUSH
52068: CALL_OW 77
52072: ST_TO_ADDR
// end ;
52073: LD_VAR 0 3
52077: RET
// export function SortByClass ( units , class ) ; var un ; begin
52078: LD_INT 0
52080: PPUSH
52081: PPUSH
// if not units or not class then
52082: LD_VAR 0 1
52086: NOT
52087: IFTRUE 52096
52089: PUSH
52090: LD_VAR 0 2
52094: NOT
52095: OR
52096: IFFALSE 52100
// exit ;
52098: GO 52195
// result := [ ] ;
52100: LD_ADDR_VAR 0 3
52104: PUSH
52105: EMPTY
52106: ST_TO_ADDR
// for un in units do
52107: LD_ADDR_VAR 0 4
52111: PUSH
52112: LD_VAR 0 1
52116: PUSH
52117: FOR_IN
52118: IFFALSE 52193
// if GetClass ( un ) = class then
52120: LD_VAR 0 4
52124: PPUSH
52125: CALL_OW 257
52129: PUSH
52130: LD_VAR 0 2
52134: EQUAL
52135: IFFALSE 52162
// result := Insert ( result , 1 , un ) else
52137: LD_ADDR_VAR 0 3
52141: PUSH
52142: LD_VAR 0 3
52146: PPUSH
52147: LD_INT 1
52149: PPUSH
52150: LD_VAR 0 4
52154: PPUSH
52155: CALL_OW 2
52159: ST_TO_ADDR
52160: GO 52191
// result := Replace ( result , result + 1 , un ) ;
52162: LD_ADDR_VAR 0 3
52166: PUSH
52167: LD_VAR 0 3
52171: PPUSH
52172: LD_VAR 0 3
52176: PUSH
52177: LD_INT 1
52179: PLUS
52180: PPUSH
52181: LD_VAR 0 4
52185: PPUSH
52186: CALL_OW 1
52190: ST_TO_ADDR
52191: GO 52117
52193: POP
52194: POP
// end ;
52195: LD_VAR 0 3
52199: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
52200: LD_INT 0
52202: PPUSH
52203: PPUSH
52204: PPUSH
52205: PPUSH
52206: PPUSH
52207: PPUSH
52208: PPUSH
// result := [ ] ;
52209: LD_ADDR_VAR 0 4
52213: PUSH
52214: EMPTY
52215: ST_TO_ADDR
// if x - r < 0 then
52216: LD_VAR 0 1
52220: PUSH
52221: LD_VAR 0 3
52225: MINUS
52226: PUSH
52227: LD_INT 0
52229: LESS
52230: IFFALSE 52242
// min_x := 0 else
52232: LD_ADDR_VAR 0 8
52236: PUSH
52237: LD_INT 0
52239: ST_TO_ADDR
52240: GO 52258
// min_x := x - r ;
52242: LD_ADDR_VAR 0 8
52246: PUSH
52247: LD_VAR 0 1
52251: PUSH
52252: LD_VAR 0 3
52256: MINUS
52257: ST_TO_ADDR
// if y - r < 0 then
52258: LD_VAR 0 2
52262: PUSH
52263: LD_VAR 0 3
52267: MINUS
52268: PUSH
52269: LD_INT 0
52271: LESS
52272: IFFALSE 52284
// min_y := 0 else
52274: LD_ADDR_VAR 0 7
52278: PUSH
52279: LD_INT 0
52281: ST_TO_ADDR
52282: GO 52300
// min_y := y - r ;
52284: LD_ADDR_VAR 0 7
52288: PUSH
52289: LD_VAR 0 2
52293: PUSH
52294: LD_VAR 0 3
52298: MINUS
52299: ST_TO_ADDR
// max_x := x + r ;
52300: LD_ADDR_VAR 0 9
52304: PUSH
52305: LD_VAR 0 1
52309: PUSH
52310: LD_VAR 0 3
52314: PLUS
52315: ST_TO_ADDR
// max_y := y + r ;
52316: LD_ADDR_VAR 0 10
52320: PUSH
52321: LD_VAR 0 2
52325: PUSH
52326: LD_VAR 0 3
52330: PLUS
52331: ST_TO_ADDR
// for _x = min_x to max_x do
52332: LD_ADDR_VAR 0 5
52336: PUSH
52337: DOUBLE
52338: LD_VAR 0 8
52342: DEC
52343: ST_TO_ADDR
52344: LD_VAR 0 9
52348: PUSH
52349: FOR_TO
52350: IFFALSE 52451
// for _y = min_y to max_y do
52352: LD_ADDR_VAR 0 6
52356: PUSH
52357: DOUBLE
52358: LD_VAR 0 7
52362: DEC
52363: ST_TO_ADDR
52364: LD_VAR 0 10
52368: PUSH
52369: FOR_TO
52370: IFFALSE 52447
// begin if not ValidHex ( _x , _y ) then
52372: LD_VAR 0 5
52376: PPUSH
52377: LD_VAR 0 6
52381: PPUSH
52382: CALL_OW 488
52386: NOT
52387: IFFALSE 52391
// continue ;
52389: GO 52369
// if GetResourceTypeXY ( _x , _y ) then
52391: LD_VAR 0 5
52395: PPUSH
52396: LD_VAR 0 6
52400: PPUSH
52401: CALL_OW 283
52405: IFFALSE 52445
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52407: LD_ADDR_VAR 0 4
52411: PUSH
52412: LD_VAR 0 4
52416: PPUSH
52417: LD_VAR 0 4
52421: PUSH
52422: LD_INT 1
52424: PLUS
52425: PPUSH
52426: LD_VAR 0 5
52430: PUSH
52431: LD_VAR 0 6
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PPUSH
52440: CALL_OW 1
52444: ST_TO_ADDR
// end ;
52445: GO 52369
52447: POP
52448: POP
52449: GO 52349
52451: POP
52452: POP
// end ;
52453: LD_VAR 0 4
52457: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52458: LD_INT 0
52460: PPUSH
52461: PPUSH
52462: PPUSH
52463: PPUSH
52464: PPUSH
52465: PPUSH
52466: PPUSH
52467: PPUSH
// if not units then
52468: LD_VAR 0 1
52472: NOT
52473: IFFALSE 52477
// exit ;
52475: GO 53009
// result := UnitFilter ( units , [ f_ok ] ) ;
52477: LD_ADDR_VAR 0 3
52481: PUSH
52482: LD_VAR 0 1
52486: PPUSH
52487: LD_INT 50
52489: PUSH
52490: EMPTY
52491: LIST
52492: PPUSH
52493: CALL_OW 72
52497: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52498: LD_ADDR_VAR 0 8
52502: PUSH
52503: LD_VAR 0 1
52507: PUSH
52508: LD_INT 1
52510: ARRAY
52511: PPUSH
52512: CALL_OW 255
52516: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52517: LD_ADDR_VAR 0 10
52521: PUSH
52522: LD_INT 29
52524: PUSH
52525: LD_INT 91
52527: PUSH
52528: LD_INT 49
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: LIST
52535: ST_TO_ADDR
// if not result then
52536: LD_VAR 0 3
52540: NOT
52541: IFFALSE 52545
// exit ;
52543: GO 53009
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52545: LD_ADDR_VAR 0 5
52549: PUSH
52550: LD_INT 81
52552: PUSH
52553: LD_VAR 0 8
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PPUSH
52562: CALL_OW 69
52566: ST_TO_ADDR
// for i in result do
52567: LD_ADDR_VAR 0 4
52571: PUSH
52572: LD_VAR 0 3
52576: PUSH
52577: FOR_IN
52578: IFFALSE 53007
// begin tag := GetTag ( i ) + 1 ;
52580: LD_ADDR_VAR 0 9
52584: PUSH
52585: LD_VAR 0 4
52589: PPUSH
52590: CALL_OW 110
52594: PUSH
52595: LD_INT 1
52597: PLUS
52598: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
52599: LD_ADDR_VAR 0 7
52603: PUSH
52604: LD_VAR 0 4
52608: PPUSH
52609: CALL_OW 250
52613: PPUSH
52614: LD_VAR 0 4
52618: PPUSH
52619: CALL_OW 251
52623: PPUSH
52624: LD_INT 4
52626: PPUSH
52627: CALL 52200 0 3
52631: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
52632: LD_VAR 0 4
52636: PPUSH
52637: CALL_OW 247
52641: PUSH
52642: LD_INT 2
52644: EQUAL
52645: IFFALSE 52657
52647: PUSH
52648: LD_VAR 0 7
52652: PUSH
52653: LD_INT 2
52655: GREATER
52656: AND
52657: IFFALSE 52677
52659: PUSH
52660: LD_VAR 0 4
52664: PPUSH
52665: CALL_OW 264
52669: PUSH
52670: LD_VAR 0 10
52674: IN
52675: NOT
52676: AND
52677: IFFALSE 52716
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52679: LD_VAR 0 4
52683: PPUSH
52684: LD_VAR 0 7
52688: PUSH
52689: LD_INT 1
52691: ARRAY
52692: PUSH
52693: LD_INT 1
52695: ARRAY
52696: PPUSH
52697: LD_VAR 0 7
52701: PUSH
52702: LD_INT 1
52704: ARRAY
52705: PUSH
52706: LD_INT 2
52708: ARRAY
52709: PPUSH
52710: CALL_OW 116
52714: GO 53005
// if path > tag then
52716: LD_VAR 0 2
52720: PUSH
52721: LD_VAR 0 9
52725: GREATER
52726: IFFALSE 52934
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
52728: LD_ADDR_VAR 0 6
52732: PUSH
52733: LD_VAR 0 5
52737: PPUSH
52738: LD_INT 91
52740: PUSH
52741: LD_VAR 0 4
52745: PUSH
52746: LD_INT 8
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: LIST
52753: PPUSH
52754: CALL_OW 72
52758: ST_TO_ADDR
// if nearEnemy then
52759: LD_VAR 0 6
52763: IFFALSE 52832
// begin if GetWeapon ( i ) = ru_time_lapser then
52765: LD_VAR 0 4
52769: PPUSH
52770: CALL_OW 264
52774: PUSH
52775: LD_INT 49
52777: EQUAL
52778: IFFALSE 52806
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52780: LD_VAR 0 4
52784: PPUSH
52785: LD_VAR 0 6
52789: PPUSH
52790: LD_VAR 0 4
52794: PPUSH
52795: CALL_OW 74
52799: PPUSH
52800: CALL_OW 112
52804: GO 52830
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52806: LD_VAR 0 4
52810: PPUSH
52811: LD_VAR 0 6
52815: PPUSH
52816: LD_VAR 0 4
52820: PPUSH
52821: CALL_OW 74
52825: PPUSH
52826: CALL 54090 0 2
// end else
52830: GO 52932
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52832: LD_VAR 0 4
52836: PPUSH
52837: LD_VAR 0 2
52841: PUSH
52842: LD_VAR 0 9
52846: ARRAY
52847: PUSH
52848: LD_INT 1
52850: ARRAY
52851: PPUSH
52852: LD_VAR 0 2
52856: PUSH
52857: LD_VAR 0 9
52861: ARRAY
52862: PUSH
52863: LD_INT 2
52865: ARRAY
52866: PPUSH
52867: CALL_OW 297
52871: PUSH
52872: LD_INT 6
52874: GREATER
52875: IFFALSE 52918
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52877: LD_VAR 0 4
52881: PPUSH
52882: LD_VAR 0 2
52886: PUSH
52887: LD_VAR 0 9
52891: ARRAY
52892: PUSH
52893: LD_INT 1
52895: ARRAY
52896: PPUSH
52897: LD_VAR 0 2
52901: PUSH
52902: LD_VAR 0 9
52906: ARRAY
52907: PUSH
52908: LD_INT 2
52910: ARRAY
52911: PPUSH
52912: CALL_OW 114
52916: GO 52932
// SetTag ( i , tag ) ;
52918: LD_VAR 0 4
52922: PPUSH
52923: LD_VAR 0 9
52927: PPUSH
52928: CALL_OW 109
// end else
52932: GO 53005
// if enemy then
52934: LD_VAR 0 5
52938: IFFALSE 53005
// begin if GetWeapon ( i ) = ru_time_lapser then
52940: LD_VAR 0 4
52944: PPUSH
52945: CALL_OW 264
52949: PUSH
52950: LD_INT 49
52952: EQUAL
52953: IFFALSE 52981
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52955: LD_VAR 0 4
52959: PPUSH
52960: LD_VAR 0 5
52964: PPUSH
52965: LD_VAR 0 4
52969: PPUSH
52970: CALL_OW 74
52974: PPUSH
52975: CALL_OW 112
52979: GO 53005
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52981: LD_VAR 0 4
52985: PPUSH
52986: LD_VAR 0 5
52990: PPUSH
52991: LD_VAR 0 4
52995: PPUSH
52996: CALL_OW 74
53000: PPUSH
53001: CALL 54090 0 2
// end ; end ;
53005: GO 52577
53007: POP
53008: POP
// end ;
53009: LD_VAR 0 3
53013: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
53014: LD_INT 0
53016: PPUSH
53017: PPUSH
53018: PPUSH
// if not unit or IsInUnit ( unit ) then
53019: LD_VAR 0 1
53023: NOT
53024: IFTRUE 53037
53026: PUSH
53027: LD_VAR 0 1
53031: PPUSH
53032: CALL_OW 310
53036: OR
53037: IFFALSE 53041
// exit ;
53039: GO 53132
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
53041: LD_ADDR_VAR 0 4
53045: PUSH
53046: LD_VAR 0 1
53050: PPUSH
53051: CALL_OW 250
53055: PPUSH
53056: LD_VAR 0 2
53060: PPUSH
53061: LD_INT 1
53063: PPUSH
53064: CALL_OW 272
53068: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
53069: LD_ADDR_VAR 0 5
53073: PUSH
53074: LD_VAR 0 1
53078: PPUSH
53079: CALL_OW 251
53083: PPUSH
53084: LD_VAR 0 2
53088: PPUSH
53089: LD_INT 1
53091: PPUSH
53092: CALL_OW 273
53096: ST_TO_ADDR
// if ValidHex ( x , y ) then
53097: LD_VAR 0 4
53101: PPUSH
53102: LD_VAR 0 5
53106: PPUSH
53107: CALL_OW 488
53111: IFFALSE 53132
// ComTurnXY ( unit , x , y ) ;
53113: LD_VAR 0 1
53117: PPUSH
53118: LD_VAR 0 4
53122: PPUSH
53123: LD_VAR 0 5
53127: PPUSH
53128: CALL_OW 118
// end ;
53132: LD_VAR 0 3
53136: RET
// export function SeeUnits ( side , units ) ; var i ; begin
53137: LD_INT 0
53139: PPUSH
53140: PPUSH
// result := false ;
53141: LD_ADDR_VAR 0 3
53145: PUSH
53146: LD_INT 0
53148: ST_TO_ADDR
// if not units then
53149: LD_VAR 0 2
53153: NOT
53154: IFFALSE 53158
// exit ;
53156: GO 53203
// for i in units do
53158: LD_ADDR_VAR 0 4
53162: PUSH
53163: LD_VAR 0 2
53167: PUSH
53168: FOR_IN
53169: IFFALSE 53201
// if See ( side , i ) then
53171: LD_VAR 0 1
53175: PPUSH
53176: LD_VAR 0 4
53180: PPUSH
53181: CALL_OW 292
53185: IFFALSE 53199
// begin result := true ;
53187: LD_ADDR_VAR 0 3
53191: PUSH
53192: LD_INT 1
53194: ST_TO_ADDR
// exit ;
53195: POP
53196: POP
53197: GO 53203
// end ;
53199: GO 53168
53201: POP
53202: POP
// end ;
53203: LD_VAR 0 3
53207: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
53208: LD_INT 0
53210: PPUSH
53211: PPUSH
53212: PPUSH
53213: PPUSH
// if not unit or not points then
53214: LD_VAR 0 1
53218: NOT
53219: IFTRUE 53228
53221: PUSH
53222: LD_VAR 0 2
53226: NOT
53227: OR
53228: IFFALSE 53232
// exit ;
53230: GO 53322
// dist := 99999 ;
53232: LD_ADDR_VAR 0 5
53236: PUSH
53237: LD_INT 99999
53239: ST_TO_ADDR
// for i in points do
53240: LD_ADDR_VAR 0 4
53244: PUSH
53245: LD_VAR 0 2
53249: PUSH
53250: FOR_IN
53251: IFFALSE 53320
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53253: LD_ADDR_VAR 0 6
53257: PUSH
53258: LD_VAR 0 1
53262: PPUSH
53263: LD_VAR 0 4
53267: PUSH
53268: LD_INT 1
53270: ARRAY
53271: PPUSH
53272: LD_VAR 0 4
53276: PUSH
53277: LD_INT 2
53279: ARRAY
53280: PPUSH
53281: CALL_OW 297
53285: ST_TO_ADDR
// if tmpDist < dist then
53286: LD_VAR 0 6
53290: PUSH
53291: LD_VAR 0 5
53295: LESS
53296: IFFALSE 53318
// begin result := i ;
53298: LD_ADDR_VAR 0 3
53302: PUSH
53303: LD_VAR 0 4
53307: ST_TO_ADDR
// dist := tmpDist ;
53308: LD_ADDR_VAR 0 5
53312: PUSH
53313: LD_VAR 0 6
53317: ST_TO_ADDR
// end ; end ;
53318: GO 53250
53320: POP
53321: POP
// end ;
53322: LD_VAR 0 3
53326: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53327: LD_INT 0
53329: PPUSH
// uc_side := side ;
53330: LD_ADDR_OWVAR 20
53334: PUSH
53335: LD_VAR 0 1
53339: ST_TO_ADDR
// uc_nation := 3 ;
53340: LD_ADDR_OWVAR 21
53344: PUSH
53345: LD_INT 3
53347: ST_TO_ADDR
// vc_chassis := 25 ;
53348: LD_ADDR_OWVAR 37
53352: PUSH
53353: LD_INT 25
53355: ST_TO_ADDR
// vc_engine := engine_siberite ;
53356: LD_ADDR_OWVAR 39
53360: PUSH
53361: LD_INT 3
53363: ST_TO_ADDR
// vc_control := control_computer ;
53364: LD_ADDR_OWVAR 38
53368: PUSH
53369: LD_INT 3
53371: ST_TO_ADDR
// vc_weapon := 59 ;
53372: LD_ADDR_OWVAR 40
53376: PUSH
53377: LD_INT 59
53379: ST_TO_ADDR
// result := CreateVehicle ;
53380: LD_ADDR_VAR 0 5
53384: PUSH
53385: CALL_OW 45
53389: ST_TO_ADDR
// SetDir ( result , d ) ;
53390: LD_VAR 0 5
53394: PPUSH
53395: LD_VAR 0 4
53399: PPUSH
53400: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53404: LD_VAR 0 5
53408: PPUSH
53409: LD_VAR 0 2
53413: PPUSH
53414: LD_VAR 0 3
53418: PPUSH
53419: LD_INT 0
53421: PPUSH
53422: CALL_OW 48
// end ;
53426: LD_VAR 0 5
53430: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53431: LD_INT 0
53433: PPUSH
53434: PPUSH
53435: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53436: LD_ADDR_VAR 0 2
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53459: LD_VAR 0 1
53463: NOT
53464: IFTRUE 53497
53466: PUSH
53467: LD_VAR 0 1
53471: PPUSH
53472: CALL_OW 264
53476: PUSH
53477: LD_INT 12
53479: PUSH
53480: LD_INT 51
53482: PUSH
53483: LD_INT 32
53485: PUSH
53486: LD_INT 89
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: IN
53495: NOT
53496: OR
53497: IFFALSE 53501
// exit ;
53499: GO 53599
// for i := 1 to 3 do
53501: LD_ADDR_VAR 0 3
53505: PUSH
53506: DOUBLE
53507: LD_INT 1
53509: DEC
53510: ST_TO_ADDR
53511: LD_INT 3
53513: PUSH
53514: FOR_TO
53515: IFFALSE 53597
// begin tmp := GetCargo ( cargo , i ) ;
53517: LD_ADDR_VAR 0 4
53521: PUSH
53522: LD_VAR 0 1
53526: PPUSH
53527: LD_VAR 0 3
53531: PPUSH
53532: CALL_OW 289
53536: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53537: LD_ADDR_VAR 0 2
53541: PUSH
53542: LD_VAR 0 2
53546: PPUSH
53547: LD_VAR 0 3
53551: PPUSH
53552: LD_VAR 0 4
53556: PPUSH
53557: CALL_OW 1
53561: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53562: LD_ADDR_VAR 0 2
53566: PUSH
53567: LD_VAR 0 2
53571: PPUSH
53572: LD_INT 4
53574: PPUSH
53575: LD_VAR 0 2
53579: PUSH
53580: LD_INT 4
53582: ARRAY
53583: PUSH
53584: LD_VAR 0 4
53588: PLUS
53589: PPUSH
53590: CALL_OW 1
53594: ST_TO_ADDR
// end ;
53595: GO 53514
53597: POP
53598: POP
// end ;
53599: LD_VAR 0 2
53603: RET
// export function Length ( array ) ; begin
53604: LD_INT 0
53606: PPUSH
// result := array + 0 ;
53607: LD_ADDR_VAR 0 2
53611: PUSH
53612: LD_VAR 0 1
53616: PUSH
53617: LD_INT 0
53619: PLUS
53620: ST_TO_ADDR
// end ;
53621: LD_VAR 0 2
53625: RET
// export function PrepareArray ( array ) ; begin
53626: LD_INT 0
53628: PPUSH
// result := array diff 0 ;
53629: LD_ADDR_VAR 0 2
53633: PUSH
53634: LD_VAR 0 1
53638: PUSH
53639: LD_INT 0
53641: DIFF
53642: ST_TO_ADDR
// if not result [ 1 ] then
53643: LD_VAR 0 2
53647: PUSH
53648: LD_INT 1
53650: ARRAY
53651: NOT
53652: IFFALSE 53672
// result := Delete ( result , 1 ) ;
53654: LD_ADDR_VAR 0 2
53658: PUSH
53659: LD_VAR 0 2
53663: PPUSH
53664: LD_INT 1
53666: PPUSH
53667: CALL_OW 3
53671: ST_TO_ADDR
// end ;
53672: LD_VAR 0 2
53676: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
53677: LD_INT 0
53679: PPUSH
53680: PPUSH
53681: PPUSH
53682: PPUSH
// sibRocketRange := 25 ;
53683: LD_ADDR_VAR 0 6
53687: PUSH
53688: LD_INT 25
53690: ST_TO_ADDR
// result := false ;
53691: LD_ADDR_VAR 0 4
53695: PUSH
53696: LD_INT 0
53698: ST_TO_ADDR
// for i := 0 to 5 do
53699: LD_ADDR_VAR 0 5
53703: PUSH
53704: DOUBLE
53705: LD_INT 0
53707: DEC
53708: ST_TO_ADDR
53709: LD_INT 5
53711: PUSH
53712: FOR_TO
53713: IFFALSE 53780
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
53715: LD_VAR 0 1
53719: PPUSH
53720: LD_VAR 0 5
53724: PPUSH
53725: LD_VAR 0 6
53729: PPUSH
53730: CALL_OW 272
53734: PPUSH
53735: LD_VAR 0 2
53739: PPUSH
53740: LD_VAR 0 5
53744: PPUSH
53745: LD_VAR 0 6
53749: PPUSH
53750: CALL_OW 273
53754: PPUSH
53755: LD_VAR 0 3
53759: PPUSH
53760: CALL_OW 309
53764: IFFALSE 53778
// begin result := true ;
53766: LD_ADDR_VAR 0 4
53770: PUSH
53771: LD_INT 1
53773: ST_TO_ADDR
// exit ;
53774: POP
53775: POP
53776: GO 53782
// end ;
53778: GO 53712
53780: POP
53781: POP
// end ;
53782: LD_VAR 0 4
53786: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
53787: LD_INT 0
53789: PPUSH
53790: PPUSH
53791: PPUSH
// if btype = b_depot then
53792: LD_VAR 0 2
53796: PUSH
53797: LD_INT 0
53799: EQUAL
53800: IFFALSE 53812
// begin result := true ;
53802: LD_ADDR_VAR 0 3
53806: PUSH
53807: LD_INT 1
53809: ST_TO_ADDR
// exit ;
53810: GO 53932
// end ; pom := GetBase ( depot ) ;
53812: LD_ADDR_VAR 0 4
53816: PUSH
53817: LD_VAR 0 1
53821: PPUSH
53822: CALL_OW 274
53826: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53827: LD_ADDR_VAR 0 5
53831: PUSH
53832: LD_VAR 0 2
53836: PPUSH
53837: LD_VAR 0 1
53841: PPUSH
53842: CALL_OW 248
53846: PPUSH
53847: CALL_OW 450
53851: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53852: LD_ADDR_VAR 0 3
53856: PUSH
53857: LD_VAR 0 4
53861: PPUSH
53862: LD_INT 1
53864: PPUSH
53865: CALL_OW 275
53869: PUSH
53870: LD_VAR 0 5
53874: PUSH
53875: LD_INT 1
53877: ARRAY
53878: GREATEREQUAL
53879: IFFALSE 53905
53881: PUSH
53882: LD_VAR 0 4
53886: PPUSH
53887: LD_INT 2
53889: PPUSH
53890: CALL_OW 275
53894: PUSH
53895: LD_VAR 0 5
53899: PUSH
53900: LD_INT 2
53902: ARRAY
53903: GREATEREQUAL
53904: AND
53905: IFFALSE 53931
53907: PUSH
53908: LD_VAR 0 4
53912: PPUSH
53913: LD_INT 3
53915: PPUSH
53916: CALL_OW 275
53920: PUSH
53921: LD_VAR 0 5
53925: PUSH
53926: LD_INT 3
53928: ARRAY
53929: GREATEREQUAL
53930: AND
53931: ST_TO_ADDR
// end ;
53932: LD_VAR 0 3
53936: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53937: LD_INT 0
53939: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53940: LD_VAR 0 1
53944: PPUSH
53945: LD_VAR 0 2
53949: PPUSH
53950: LD_INT 0
53952: PPUSH
53953: LD_INT 0
53955: PPUSH
53956: LD_INT 1
53958: PPUSH
53959: LD_INT 0
53961: PPUSH
53962: CALL_OW 587
// end ;
53966: LD_VAR 0 3
53970: RET
// export function CenterOnNow ( unit ) ; begin
53971: LD_INT 0
53973: PPUSH
// result := IsInUnit ( unit ) ;
53974: LD_ADDR_VAR 0 2
53978: PUSH
53979: LD_VAR 0 1
53983: PPUSH
53984: CALL_OW 310
53988: ST_TO_ADDR
// if not result then
53989: LD_VAR 0 2
53993: NOT
53994: IFFALSE 54006
// result := unit ;
53996: LD_ADDR_VAR 0 2
54000: PUSH
54001: LD_VAR 0 1
54005: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
54006: LD_VAR 0 1
54010: PPUSH
54011: CALL_OW 87
// end ;
54015: LD_VAR 0 2
54019: RET
// export function ComMoveHex ( unit , hex ) ; begin
54020: LD_INT 0
54022: PPUSH
// if not hex then
54023: LD_VAR 0 2
54027: NOT
54028: IFFALSE 54032
// exit ;
54030: GO 54085
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
54032: LD_VAR 0 2
54036: PUSH
54037: LD_INT 1
54039: ARRAY
54040: PPUSH
54041: LD_VAR 0 2
54045: PUSH
54046: LD_INT 2
54048: ARRAY
54049: PPUSH
54050: CALL_OW 428
54054: IFFALSE 54058
// exit ;
54056: GO 54085
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
54058: LD_VAR 0 1
54062: PPUSH
54063: LD_VAR 0 2
54067: PUSH
54068: LD_INT 1
54070: ARRAY
54071: PPUSH
54072: LD_VAR 0 2
54076: PUSH
54077: LD_INT 2
54079: ARRAY
54080: PPUSH
54081: CALL_OW 111
// end ;
54085: LD_VAR 0 3
54089: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
54090: LD_INT 0
54092: PPUSH
54093: PPUSH
54094: PPUSH
// if not unit or not enemy then
54095: LD_VAR 0 1
54099: NOT
54100: IFTRUE 54109
54102: PUSH
54103: LD_VAR 0 2
54107: NOT
54108: OR
54109: IFFALSE 54113
// exit ;
54111: GO 54239
// x := GetX ( enemy ) ;
54113: LD_ADDR_VAR 0 4
54117: PUSH
54118: LD_VAR 0 2
54122: PPUSH
54123: CALL_OW 250
54127: ST_TO_ADDR
// y := GetY ( enemy ) ;
54128: LD_ADDR_VAR 0 5
54132: PUSH
54133: LD_VAR 0 2
54137: PPUSH
54138: CALL_OW 251
54142: ST_TO_ADDR
// if ValidHex ( x , y ) then
54143: LD_VAR 0 4
54147: PPUSH
54148: LD_VAR 0 5
54152: PPUSH
54153: CALL_OW 488
54157: IFFALSE 54239
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
54159: LD_VAR 0 2
54163: PPUSH
54164: CALL_OW 247
54168: PUSH
54169: LD_INT 3
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: IN
54179: IFTRUE 54202
54181: PUSH
54182: LD_VAR 0 1
54186: PPUSH
54187: CALL_OW 255
54191: PPUSH
54192: LD_VAR 0 2
54196: PPUSH
54197: CALL_OW 292
54201: OR
54202: IFFALSE 54220
// ComAttackUnit ( unit , enemy ) else
54204: LD_VAR 0 1
54208: PPUSH
54209: LD_VAR 0 2
54213: PPUSH
54214: CALL_OW 115
54218: GO 54239
// ComAgressiveMove ( unit , x , y ) ;
54220: LD_VAR 0 1
54224: PPUSH
54225: LD_VAR 0 4
54229: PPUSH
54230: LD_VAR 0 5
54234: PPUSH
54235: CALL_OW 114
// end ;
54239: LD_VAR 0 3
54243: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
54244: LD_INT 0
54246: PPUSH
54247: PPUSH
54248: PPUSH
// list := AreaToList ( area , 0 ) ;
54249: LD_ADDR_VAR 0 5
54253: PUSH
54254: LD_VAR 0 1
54258: PPUSH
54259: LD_INT 0
54261: PPUSH
54262: CALL_OW 517
54266: ST_TO_ADDR
// if not list then
54267: LD_VAR 0 5
54271: NOT
54272: IFFALSE 54276
// exit ;
54274: GO 54406
// if all then
54276: LD_VAR 0 2
54280: IFFALSE 54368
// begin for i := 1 to list [ 1 ] do
54282: LD_ADDR_VAR 0 4
54286: PUSH
54287: DOUBLE
54288: LD_INT 1
54290: DEC
54291: ST_TO_ADDR
54292: LD_VAR 0 5
54296: PUSH
54297: LD_INT 1
54299: ARRAY
54300: PUSH
54301: FOR_TO
54302: IFFALSE 54364
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54304: LD_ADDR_VAR 0 3
54308: PUSH
54309: LD_VAR 0 3
54313: PPUSH
54314: LD_VAR 0 3
54318: PUSH
54319: LD_INT 1
54321: PLUS
54322: PPUSH
54323: LD_VAR 0 5
54327: PUSH
54328: LD_INT 1
54330: ARRAY
54331: PUSH
54332: LD_VAR 0 4
54336: ARRAY
54337: PUSH
54338: LD_VAR 0 5
54342: PUSH
54343: LD_INT 2
54345: ARRAY
54346: PUSH
54347: LD_VAR 0 4
54351: ARRAY
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PPUSH
54357: CALL_OW 1
54361: ST_TO_ADDR
54362: GO 54301
54364: POP
54365: POP
// exit ;
54366: GO 54406
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
54368: LD_ADDR_VAR 0 3
54372: PUSH
54373: LD_VAR 0 5
54377: PUSH
54378: LD_INT 1
54380: ARRAY
54381: PUSH
54382: LD_INT 1
54384: ARRAY
54385: PUSH
54386: LD_VAR 0 5
54390: PUSH
54391: LD_INT 2
54393: ARRAY
54394: PUSH
54395: LD_INT 1
54397: ARRAY
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: EMPTY
54404: LIST
54405: ST_TO_ADDR
// end ;
54406: LD_VAR 0 3
54410: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
54411: LD_INT 0
54413: PPUSH
54414: PPUSH
// list := AreaToList ( area , 0 ) ;
54415: LD_ADDR_VAR 0 4
54419: PUSH
54420: LD_VAR 0 1
54424: PPUSH
54425: LD_INT 0
54427: PPUSH
54428: CALL_OW 517
54432: ST_TO_ADDR
// if not list then
54433: LD_VAR 0 4
54437: NOT
54438: IFFALSE 54442
// exit ;
54440: GO 54483
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
54442: LD_ADDR_VAR 0 3
54446: PUSH
54447: LD_VAR 0 4
54451: PUSH
54452: LD_INT 1
54454: ARRAY
54455: PUSH
54456: LD_INT 1
54458: ARRAY
54459: PUSH
54460: LD_VAR 0 4
54464: PUSH
54465: LD_INT 2
54467: ARRAY
54468: PUSH
54469: LD_INT 1
54471: ARRAY
54472: PUSH
54473: LD_VAR 0 2
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: LIST
54482: ST_TO_ADDR
// end ;
54483: LD_VAR 0 3
54487: RET
// export function First ( array ) ; begin
54488: LD_INT 0
54490: PPUSH
// if not array then
54491: LD_VAR 0 1
54495: NOT
54496: IFFALSE 54500
// exit ;
54498: GO 54514
// result := array [ 1 ] ;
54500: LD_ADDR_VAR 0 2
54504: PUSH
54505: LD_VAR 0 1
54509: PUSH
54510: LD_INT 1
54512: ARRAY
54513: ST_TO_ADDR
// end ;
54514: LD_VAR 0 2
54518: RET
// export function Last ( array ) ; begin
54519: LD_INT 0
54521: PPUSH
// if not array then
54522: LD_VAR 0 1
54526: NOT
54527: IFFALSE 54531
// exit ;
54529: GO 54547
// result := array [ array ] ;
54531: LD_ADDR_VAR 0 2
54535: PUSH
54536: LD_VAR 0 1
54540: PUSH
54541: LD_VAR 0 1
54545: ARRAY
54546: ST_TO_ADDR
// end ;
54547: LD_VAR 0 2
54551: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
54552: LD_INT 0
54554: PPUSH
54555: PPUSH
// result := [ ] ;
54556: LD_ADDR_VAR 0 5
54560: PUSH
54561: EMPTY
54562: ST_TO_ADDR
// if not array then
54563: LD_VAR 0 1
54567: NOT
54568: IFFALSE 54572
// exit ;
54570: GO 54684
// for i := 1 to array do
54572: LD_ADDR_VAR 0 6
54576: PUSH
54577: DOUBLE
54578: LD_INT 1
54580: DEC
54581: ST_TO_ADDR
54582: LD_VAR 0 1
54586: PUSH
54587: FOR_TO
54588: IFFALSE 54682
// if array [ i ] [ index ] = value then
54590: LD_VAR 0 1
54594: PUSH
54595: LD_VAR 0 6
54599: ARRAY
54600: PUSH
54601: LD_VAR 0 2
54605: ARRAY
54606: PUSH
54607: LD_VAR 0 3
54611: EQUAL
54612: IFFALSE 54680
// begin if indexColumn then
54614: LD_VAR 0 4
54618: IFFALSE 54654
// result := Join ( result , array [ i ] [ indexColumn ] ) else
54620: LD_ADDR_VAR 0 5
54624: PUSH
54625: LD_VAR 0 5
54629: PPUSH
54630: LD_VAR 0 1
54634: PUSH
54635: LD_VAR 0 6
54639: ARRAY
54640: PUSH
54641: LD_VAR 0 4
54645: ARRAY
54646: PPUSH
54647: CALL 49692 0 2
54651: ST_TO_ADDR
54652: GO 54680
// result := Join ( result , array [ i ] ) ;
54654: LD_ADDR_VAR 0 5
54658: PUSH
54659: LD_VAR 0 5
54663: PPUSH
54664: LD_VAR 0 1
54668: PUSH
54669: LD_VAR 0 6
54673: ARRAY
54674: PPUSH
54675: CALL 49692 0 2
54679: ST_TO_ADDR
// end ;
54680: GO 54587
54682: POP
54683: POP
// end ;
54684: LD_VAR 0 5
54688: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
54689: LD_INT 0
54691: PPUSH
// if not vehicles or not parkingPoint then
54692: LD_VAR 0 1
54696: NOT
54697: IFTRUE 54706
54699: PUSH
54700: LD_VAR 0 2
54704: NOT
54705: OR
54706: IFFALSE 54710
// exit ;
54708: GO 54808
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
54710: LD_ADDR_VAR 0 1
54714: PUSH
54715: LD_VAR 0 1
54719: PPUSH
54720: LD_INT 50
54722: PUSH
54723: EMPTY
54724: LIST
54725: PUSH
54726: LD_INT 3
54728: PUSH
54729: LD_INT 92
54731: PUSH
54732: LD_VAR 0 2
54736: PUSH
54737: LD_INT 1
54739: ARRAY
54740: PUSH
54741: LD_VAR 0 2
54745: PUSH
54746: LD_INT 2
54748: ARRAY
54749: PUSH
54750: LD_INT 8
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PPUSH
54767: CALL_OW 72
54771: ST_TO_ADDR
// if not vehicles then
54772: LD_VAR 0 1
54776: NOT
54777: IFFALSE 54781
// exit ;
54779: GO 54808
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
54781: LD_VAR 0 1
54785: PPUSH
54786: LD_VAR 0 2
54790: PUSH
54791: LD_INT 1
54793: ARRAY
54794: PPUSH
54795: LD_VAR 0 2
54799: PUSH
54800: LD_INT 2
54802: ARRAY
54803: PPUSH
54804: CALL_OW 111
// end ;
54808: LD_VAR 0 3
54812: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
54813: LD_INT 0
54815: PPUSH
54816: PPUSH
54817: PPUSH
// if not side or not area then
54818: LD_VAR 0 1
54822: NOT
54823: IFTRUE 54832
54825: PUSH
54826: LD_VAR 0 2
54830: NOT
54831: OR
54832: IFFALSE 54836
// exit ;
54834: GO 54955
// tmp := AreaToList ( area , 0 ) ;
54836: LD_ADDR_VAR 0 5
54840: PUSH
54841: LD_VAR 0 2
54845: PPUSH
54846: LD_INT 0
54848: PPUSH
54849: CALL_OW 517
54853: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54854: LD_ADDR_VAR 0 4
54858: PUSH
54859: DOUBLE
54860: LD_INT 1
54862: DEC
54863: ST_TO_ADDR
54864: LD_VAR 0 5
54868: PUSH
54869: LD_INT 1
54871: ARRAY
54872: PUSH
54873: FOR_TO
54874: IFFALSE 54953
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54876: LD_VAR 0 5
54880: PUSH
54881: LD_INT 1
54883: ARRAY
54884: PUSH
54885: LD_VAR 0 4
54889: ARRAY
54890: PPUSH
54891: LD_VAR 0 5
54895: PUSH
54896: LD_INT 2
54898: ARRAY
54899: PUSH
54900: LD_VAR 0 4
54904: ARRAY
54905: PPUSH
54906: CALL_OW 351
54910: IFFALSE 54951
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54912: LD_VAR 0 5
54916: PUSH
54917: LD_INT 1
54919: ARRAY
54920: PUSH
54921: LD_VAR 0 4
54925: ARRAY
54926: PPUSH
54927: LD_VAR 0 5
54931: PUSH
54932: LD_INT 2
54934: ARRAY
54935: PUSH
54936: LD_VAR 0 4
54940: ARRAY
54941: PPUSH
54942: LD_VAR 0 1
54946: PPUSH
54947: CALL_OW 244
// end ;
54951: GO 54873
54953: POP
54954: POP
// end ;
54955: LD_VAR 0 3
54959: RET
// export function UniqueArray ( array ) ; var i ; begin
54960: LD_INT 0
54962: PPUSH
54963: PPUSH
// result := [ ] ;
54964: LD_ADDR_VAR 0 2
54968: PUSH
54969: EMPTY
54970: ST_TO_ADDR
// if not array then
54971: LD_VAR 0 1
54975: NOT
54976: IFFALSE 54980
// exit ;
54978: GO 55041
// for i := 1 to array do
54980: LD_ADDR_VAR 0 3
54984: PUSH
54985: DOUBLE
54986: LD_INT 1
54988: DEC
54989: ST_TO_ADDR
54990: LD_VAR 0 1
54994: PUSH
54995: FOR_TO
54996: IFFALSE 55039
// if not array [ i ] in result then
54998: LD_VAR 0 1
55002: PUSH
55003: LD_VAR 0 3
55007: ARRAY
55008: PUSH
55009: LD_VAR 0 2
55013: IN
55014: NOT
55015: IFFALSE 55037
// result := Join ( result , i ) ;
55017: LD_ADDR_VAR 0 2
55021: PUSH
55022: LD_VAR 0 2
55026: PPUSH
55027: LD_VAR 0 3
55031: PPUSH
55032: CALL 49692 0 2
55036: ST_TO_ADDR
55037: GO 54995
55039: POP
55040: POP
// end ; end_of_file
55041: LD_VAR 0 2
55045: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55046: LD_VAR 0 1
55050: PUSH
55051: LD_INT 200
55053: DOUBLE
55054: GREATEREQUAL
55055: IFFALSE 55063
55057: LD_INT 299
55059: DOUBLE
55060: LESSEQUAL
55061: IFTRUE 55065
55063: GO 55097
55065: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55066: LD_VAR 0 1
55070: PPUSH
55071: LD_VAR 0 2
55075: PPUSH
55076: LD_VAR 0 3
55080: PPUSH
55081: LD_VAR 0 4
55085: PPUSH
55086: LD_VAR 0 5
55090: PPUSH
55091: CALL 55959 0 5
55095: GO 55174
55097: LD_INT 300
55099: DOUBLE
55100: GREATEREQUAL
55101: IFFALSE 55109
55103: LD_INT 399
55105: DOUBLE
55106: LESSEQUAL
55107: IFTRUE 55111
55109: GO 55173
55111: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55112: LD_VAR 0 1
55116: PPUSH
55117: LD_VAR 0 2
55121: PPUSH
55122: LD_VAR 0 3
55126: PPUSH
55127: LD_VAR 0 4
55131: PPUSH
55132: LD_VAR 0 5
55136: PPUSH
55137: LD_VAR 0 6
55141: PPUSH
55142: LD_VAR 0 7
55146: PPUSH
55147: LD_VAR 0 8
55151: PPUSH
55152: LD_VAR 0 9
55156: PPUSH
55157: LD_VAR 0 10
55161: PPUSH
55162: LD_VAR 0 11
55166: PPUSH
55167: CALL 64061 0 11
55171: GO 55174
55173: POP
// end ;
55174: PPOPN 11
55176: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55177: LD_VAR 0 1
55181: PPUSH
55182: LD_VAR 0 2
55186: PPUSH
55187: LD_VAR 0 3
55191: PPUSH
55192: LD_VAR 0 4
55196: PPUSH
55197: LD_VAR 0 5
55201: PPUSH
55202: CALL 55259 0 5
// end ; end_of_file
55206: PPOPN 5
55208: END
// export function SOS_UnitDestroyed ( un ) ; begin
55209: LD_INT 0
55211: PPUSH
// ComRadiation ( un ) ;
55212: LD_VAR 0 1
55216: PPUSH
55217: CALL 56379 0 1
// end ;
55221: LD_VAR 0 2
55225: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55226: LD_INT 0
55228: PPUSH
// ComRadiation ( un ) ;
55229: LD_VAR 0 1
55233: PPUSH
55234: CALL 56379 0 1
// end ;
55238: LD_VAR 0 2
55242: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55243: LD_INT 0
55245: PPUSH
// end ;
55246: LD_VAR 0 4
55250: RET
// export function SOS_Command ( cmd ) ; begin
55251: LD_INT 0
55253: PPUSH
// end ;
55254: LD_VAR 0 2
55258: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55259: LD_INT 0
55261: PPUSH
// end ;
55262: LD_VAR 0 6
55266: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
55267: LD_INT 0
55269: PPUSH
55270: PPUSH
55271: PPUSH
55272: PPUSH
55273: PPUSH
// if not vehicle or not factory then
55274: LD_VAR 0 1
55278: NOT
55279: IFTRUE 55288
55281: PUSH
55282: LD_VAR 0 2
55286: NOT
55287: OR
55288: IFFALSE 55292
// exit ;
55290: GO 55954
// weapon := GetWeapon ( vehicle ) ;
55292: LD_ADDR_VAR 0 7
55296: PUSH
55297: LD_VAR 0 1
55301: PPUSH
55302: CALL_OW 264
55306: ST_TO_ADDR
// if weapon = ar_miner then
55307: LD_VAR 0 7
55311: PUSH
55312: LD_INT 81
55314: EQUAL
55315: IFFALSE 55372
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
55317: LD_ADDR_EXP 59
55321: PUSH
55322: LD_EXP 59
55326: PPUSH
55327: LD_EXP 59
55331: PUSH
55332: LD_INT 1
55334: PLUS
55335: PPUSH
55336: LD_VAR 0 1
55340: PPUSH
55341: CALL_OW 1
55345: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55346: LD_ADDR_EXP 60
55350: PUSH
55351: LD_EXP 60
55355: PPUSH
55356: LD_EXP 60
55360: PUSH
55361: LD_INT 1
55363: PLUS
55364: PPUSH
55365: EMPTY
55366: PPUSH
55367: CALL_OW 1
55371: ST_TO_ADDR
// end ; if not factoryWaypoints then
55372: LD_EXP 63
55376: NOT
55377: IFFALSE 55381
// exit ;
55379: GO 55954
// for i := 1 to Count ( factoryWaypoints ) do
55381: LD_ADDR_VAR 0 4
55385: PUSH
55386: DOUBLE
55387: LD_INT 1
55389: DEC
55390: ST_TO_ADDR
55391: LD_EXP 63
55395: PPUSH
55396: CALL 13716 0 1
55400: PUSH
55401: FOR_TO
55402: IFFALSE 55952
// if factoryWaypoints [ i ] [ 2 ] = factory then
55404: LD_EXP 63
55408: PUSH
55409: LD_VAR 0 4
55413: ARRAY
55414: PUSH
55415: LD_INT 2
55417: ARRAY
55418: PUSH
55419: LD_VAR 0 2
55423: EQUAL
55424: IFFALSE 55950
// begin if GetControl ( vehicle ) = control_manual then
55426: LD_VAR 0 1
55430: PPUSH
55431: CALL_OW 263
55435: PUSH
55436: LD_INT 1
55438: EQUAL
55439: IFFALSE 55803
// begin driver := IsDrivenBy ( vehicle ) ;
55441: LD_ADDR_VAR 0 5
55445: PUSH
55446: LD_VAR 0 1
55450: PPUSH
55451: CALL_OW 311
55455: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55456: LD_VAR 0 5
55460: PUSH
55461: LD_EXP 64
55465: IN
55466: IFTRUE 55480
55468: PUSH
55469: LD_VAR 0 1
55473: PUSH
55474: LD_EXP 64
55478: IN
55479: OR
55480: IFFALSE 55486
// exit ;
55482: POP
55483: POP
55484: GO 55954
// if not HasTask ( driver ) then
55486: LD_VAR 0 5
55490: PPUSH
55491: CALL_OW 314
55495: NOT
55496: IFFALSE 55801
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55498: LD_ADDR_EXP 64
55502: PUSH
55503: LD_EXP 64
55507: PPUSH
55508: LD_VAR 0 5
55512: PPUSH
55513: CALL 49692 0 2
55517: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55518: LD_ADDR_EXP 64
55522: PUSH
55523: LD_EXP 64
55527: PPUSH
55528: LD_VAR 0 1
55532: PPUSH
55533: CALL 49692 0 2
55537: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55538: LD_ADDR_VAR 0 6
55542: PUSH
55543: LD_EXP 63
55547: PUSH
55548: LD_VAR 0 4
55552: ARRAY
55553: PUSH
55554: LD_INT 3
55556: ARRAY
55557: PPUSH
55558: LD_EXP 63
55562: PUSH
55563: LD_VAR 0 4
55567: ARRAY
55568: PUSH
55569: LD_INT 4
55571: ARRAY
55572: PPUSH
55573: CALL_OW 428
55577: ST_TO_ADDR
// if hex then
55578: LD_VAR 0 6
55582: IFFALSE 55600
// ComMoveUnit ( driver , hex ) else
55584: LD_VAR 0 5
55588: PPUSH
55589: LD_VAR 0 6
55593: PPUSH
55594: CALL_OW 112
55598: GO 55684
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55600: LD_VAR 0 1
55604: PPUSH
55605: LD_EXP 63
55609: PUSH
55610: LD_VAR 0 4
55614: ARRAY
55615: PUSH
55616: LD_INT 3
55618: ARRAY
55619: PPUSH
55620: LD_EXP 63
55624: PUSH
55625: LD_VAR 0 4
55629: ARRAY
55630: PUSH
55631: LD_INT 4
55633: ARRAY
55634: PPUSH
55635: CALL_OW 297
55639: PUSH
55640: LD_INT 0
55642: GREATER
55643: IFFALSE 55684
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55645: LD_VAR 0 5
55649: PPUSH
55650: LD_EXP 63
55654: PUSH
55655: LD_VAR 0 4
55659: ARRAY
55660: PUSH
55661: LD_INT 3
55663: ARRAY
55664: PPUSH
55665: LD_EXP 63
55669: PUSH
55670: LD_VAR 0 4
55674: ARRAY
55675: PUSH
55676: LD_INT 4
55678: ARRAY
55679: PPUSH
55680: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55684: LD_VAR 0 5
55688: PPUSH
55689: CALL_OW 181
// if Multiplayer then
55693: LD_OWVAR 4
55697: IFFALSE 55746
// begin repeat wait ( 10 ) ;
55699: LD_INT 10
55701: PPUSH
55702: CALL_OW 67
// until not IsInUnit ( driver ) ;
55706: LD_VAR 0 5
55710: PPUSH
55711: CALL_OW 310
55715: NOT
55716: IFFALSE 55699
// if not HasTask ( driver ) then
55718: LD_VAR 0 5
55722: PPUSH
55723: CALL_OW 314
55727: NOT
55728: IFFALSE 55744
// ComEnterUnit ( driver , factory ) ;
55730: LD_VAR 0 5
55734: PPUSH
55735: LD_VAR 0 2
55739: PPUSH
55740: CALL_OW 120
// end else
55744: GO 55760
// AddComEnterUnit ( driver , factory ) ;
55746: LD_VAR 0 5
55750: PPUSH
55751: LD_VAR 0 2
55755: PPUSH
55756: CALL_OW 180
// wait ( 0 0$1 ) ;
55760: LD_INT 35
55762: PPUSH
55763: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55767: LD_ADDR_EXP 64
55771: PUSH
55772: LD_EXP 64
55776: PUSH
55777: LD_VAR 0 5
55781: DIFF
55782: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55783: LD_ADDR_EXP 64
55787: PUSH
55788: LD_EXP 64
55792: PUSH
55793: LD_VAR 0 1
55797: DIFF
55798: ST_TO_ADDR
// break ;
55799: GO 55952
// end ; end else
55801: GO 55950
// if GetControl ( vehicle ) = control_remote then
55803: LD_VAR 0 1
55807: PPUSH
55808: CALL_OW 263
55812: PUSH
55813: LD_INT 2
55815: EQUAL
55816: IFFALSE 55902
// begin wait ( 0 0$2 ) ;
55818: LD_INT 70
55820: PPUSH
55821: CALL_OW 67
// repeat wait ( 10 ) ;
55825: LD_INT 10
55827: PPUSH
55828: CALL_OW 67
// Connect ( vehicle ) ;
55832: LD_VAR 0 1
55836: PPUSH
55837: CALL 19994 0 1
// until IsControledBy ( vehicle ) ;
55841: LD_VAR 0 1
55845: PPUSH
55846: CALL_OW 312
55850: IFFALSE 55825
// wait ( 10 ) ;
55852: LD_INT 10
55854: PPUSH
55855: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55859: LD_VAR 0 1
55863: PPUSH
55864: LD_EXP 63
55868: PUSH
55869: LD_VAR 0 4
55873: ARRAY
55874: PUSH
55875: LD_INT 3
55877: ARRAY
55878: PPUSH
55879: LD_EXP 63
55883: PUSH
55884: LD_VAR 0 4
55888: ARRAY
55889: PUSH
55890: LD_INT 4
55892: ARRAY
55893: PPUSH
55894: CALL_OW 111
// break ;
55898: GO 55952
// end else
55900: GO 55950
// begin wait ( 0 0$3 ) ;
55902: LD_INT 105
55904: PPUSH
55905: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55909: LD_VAR 0 1
55913: PPUSH
55914: LD_EXP 63
55918: PUSH
55919: LD_VAR 0 4
55923: ARRAY
55924: PUSH
55925: LD_INT 3
55927: ARRAY
55928: PPUSH
55929: LD_EXP 63
55933: PUSH
55934: LD_VAR 0 4
55938: ARRAY
55939: PUSH
55940: LD_INT 4
55942: ARRAY
55943: PPUSH
55944: CALL_OW 111
// break ;
55948: GO 55952
// end ; end ;
55950: GO 55401
55952: POP
55953: POP
// end ;
55954: LD_VAR 0 3
55958: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55959: LD_INT 0
55961: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55962: LD_VAR 0 1
55966: PUSH
55967: LD_INT 250
55969: EQUAL
55970: IFFALSE 55987
55972: PUSH
55973: LD_VAR 0 2
55977: PPUSH
55978: CALL_OW 264
55982: PUSH
55983: LD_INT 81
55985: EQUAL
55986: AND
55987: IFFALSE 56008
// MinerPlaceMine ( unit , x , y ) ;
55989: LD_VAR 0 2
55993: PPUSH
55994: LD_VAR 0 4
55998: PPUSH
55999: LD_VAR 0 5
56003: PPUSH
56004: CALL 59354 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56008: LD_VAR 0 1
56012: PUSH
56013: LD_INT 251
56015: EQUAL
56016: IFFALSE 56033
56018: PUSH
56019: LD_VAR 0 2
56023: PPUSH
56024: CALL_OW 264
56028: PUSH
56029: LD_INT 81
56031: EQUAL
56032: AND
56033: IFFALSE 56054
// MinerDetonateMine ( unit , x , y ) ;
56035: LD_VAR 0 2
56039: PPUSH
56040: LD_VAR 0 4
56044: PPUSH
56045: LD_VAR 0 5
56049: PPUSH
56050: CALL 59761 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56054: LD_VAR 0 1
56058: PUSH
56059: LD_INT 252
56061: EQUAL
56062: IFFALSE 56079
56064: PUSH
56065: LD_VAR 0 2
56069: PPUSH
56070: CALL_OW 264
56074: PUSH
56075: LD_INT 81
56077: EQUAL
56078: AND
56079: IFFALSE 56100
// MinerCreateMinefield ( unit , x , y ) ;
56081: LD_VAR 0 2
56085: PPUSH
56086: LD_VAR 0 4
56090: PPUSH
56091: LD_VAR 0 5
56095: PPUSH
56096: CALL 59993 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56100: LD_VAR 0 1
56104: PUSH
56105: LD_INT 253
56107: EQUAL
56108: IFFALSE 56125
56110: PUSH
56111: LD_VAR 0 2
56115: PPUSH
56116: CALL_OW 257
56120: PUSH
56121: LD_INT 5
56123: EQUAL
56124: AND
56125: IFFALSE 56146
// ComBinocular ( unit , x , y ) ;
56127: LD_VAR 0 2
56131: PPUSH
56132: LD_VAR 0 4
56136: PPUSH
56137: LD_VAR 0 5
56141: PPUSH
56142: CALL 60368 0 3
// if selectedUnit then
56146: LD_VAR 0 3
56150: IFFALSE 56210
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56152: LD_VAR 0 1
56156: PUSH
56157: LD_INT 254
56159: EQUAL
56160: IFFALSE 56177
56162: PUSH
56163: LD_VAR 0 2
56167: PPUSH
56168: CALL_OW 264
56172: PUSH
56173: LD_INT 99
56175: EQUAL
56176: AND
56177: IFFALSE 56194
56179: PUSH
56180: LD_VAR 0 3
56184: PPUSH
56185: CALL_OW 263
56189: PUSH
56190: LD_INT 3
56192: EQUAL
56193: AND
56194: IFFALSE 56210
// HackDestroyVehicle ( unit , selectedUnit ) ;
56196: LD_VAR 0 2
56200: PPUSH
56201: LD_VAR 0 3
56205: PPUSH
56206: CALL 58544 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56210: LD_VAR 0 1
56214: PUSH
56215: LD_INT 255
56217: EQUAL
56218: IFFALSE 56242
56220: PUSH
56221: LD_VAR 0 2
56225: PPUSH
56226: CALL_OW 264
56230: PUSH
56231: LD_INT 14
56233: PUSH
56234: LD_INT 53
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: IN
56241: AND
56242: IFFALSE 56260
56244: PUSH
56245: LD_VAR 0 4
56249: PPUSH
56250: LD_VAR 0 5
56254: PPUSH
56255: CALL_OW 488
56259: AND
56260: IFFALSE 56284
// CutTreeXYR ( unit , x , y , 12 ) ;
56262: LD_VAR 0 2
56266: PPUSH
56267: LD_VAR 0 4
56271: PPUSH
56272: LD_VAR 0 5
56276: PPUSH
56277: LD_INT 12
56279: PPUSH
56280: CALL 56475 0 4
// if cmd = 256 then
56284: LD_VAR 0 1
56288: PUSH
56289: LD_INT 256
56291: EQUAL
56292: IFFALSE 56313
// SetFactoryWaypoint ( unit , x , y ) ;
56294: LD_VAR 0 2
56298: PPUSH
56299: LD_VAR 0 4
56303: PPUSH
56304: LD_VAR 0 5
56308: PPUSH
56309: CALL 64069 0 3
// if cmd = 257 then
56313: LD_VAR 0 1
56317: PUSH
56318: LD_INT 257
56320: EQUAL
56321: IFFALSE 56342
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56323: LD_VAR 0 2
56327: PPUSH
56328: LD_VAR 0 4
56332: PPUSH
56333: LD_VAR 0 5
56337: PPUSH
56338: CALL 64565 0 3
// if cmd = 258 then
56342: LD_VAR 0 1
56346: PUSH
56347: LD_INT 258
56349: EQUAL
56350: IFFALSE 56374
// BurnTreeXYR ( unit , x , y , 8 ) ;
56352: LD_VAR 0 2
56356: PPUSH
56357: LD_VAR 0 4
56361: PPUSH
56362: LD_VAR 0 5
56366: PPUSH
56367: LD_INT 8
56369: PPUSH
56370: CALL 56897 0 4
// end ;
56374: LD_VAR 0 6
56378: RET
// export function ComRadiation ( un ) ; var eff ; begin
56379: LD_INT 0
56381: PPUSH
56382: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56383: LD_VAR 0 1
56387: PPUSH
56388: CALL_OW 264
56392: PUSH
56393: LD_INT 91
56395: NONEQUAL
56396: IFFALSE 56400
// exit ;
56398: GO 56470
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56400: LD_INT 68
56402: PPUSH
56403: LD_VAR 0 1
56407: PPUSH
56408: CALL_OW 255
56412: PPUSH
56413: CALL_OW 321
56417: PUSH
56418: LD_INT 2
56420: EQUAL
56421: IFFALSE 56433
// eff := 50 else
56423: LD_ADDR_VAR 0 3
56427: PUSH
56428: LD_INT 50
56430: ST_TO_ADDR
56431: GO 56441
// eff := 25 ;
56433: LD_ADDR_VAR 0 3
56437: PUSH
56438: LD_INT 25
56440: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56441: LD_VAR 0 1
56445: PPUSH
56446: CALL_OW 250
56450: PPUSH
56451: LD_VAR 0 1
56455: PPUSH
56456: CALL_OW 251
56460: PPUSH
56461: LD_VAR 0 3
56465: PPUSH
56466: CALL_OW 495
// end ;
56470: LD_VAR 0 2
56474: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56475: LD_INT 0
56477: PPUSH
56478: PPUSH
56479: PPUSH
56480: PPUSH
56481: PPUSH
56482: PPUSH
56483: PPUSH
56484: PPUSH
56485: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56486: LD_VAR 0 1
56490: PPUSH
56491: CALL_OW 302
56495: NOT
56496: IFTRUE 56515
56498: PUSH
56499: LD_VAR 0 2
56503: PPUSH
56504: LD_VAR 0 3
56508: PPUSH
56509: CALL_OW 488
56513: NOT
56514: OR
56515: IFTRUE 56524
56517: PUSH
56518: LD_VAR 0 4
56522: NOT
56523: OR
56524: IFFALSE 56528
// exit ;
56526: GO 56892
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
56528: LD_VAR 0 1
56532: PPUSH
56533: CALL_OW 437
56537: PPUSH
56538: CALL 13716 0 1
56542: PUSH
56543: LD_INT 10
56545: GREATER
56546: IFFALSE 56550
// exit ;
56548: GO 56892
// list := [ ] ;
56550: LD_ADDR_VAR 0 13
56554: PUSH
56555: EMPTY
56556: ST_TO_ADDR
// if x - r < 0 then
56557: LD_VAR 0 2
56561: PUSH
56562: LD_VAR 0 4
56566: MINUS
56567: PUSH
56568: LD_INT 0
56570: LESS
56571: IFFALSE 56583
// min_x := 0 else
56573: LD_ADDR_VAR 0 7
56577: PUSH
56578: LD_INT 0
56580: ST_TO_ADDR
56581: GO 56599
// min_x := x - r ;
56583: LD_ADDR_VAR 0 7
56587: PUSH
56588: LD_VAR 0 2
56592: PUSH
56593: LD_VAR 0 4
56597: MINUS
56598: ST_TO_ADDR
// if y - r < 0 then
56599: LD_VAR 0 3
56603: PUSH
56604: LD_VAR 0 4
56608: MINUS
56609: PUSH
56610: LD_INT 0
56612: LESS
56613: IFFALSE 56625
// min_y := 0 else
56615: LD_ADDR_VAR 0 8
56619: PUSH
56620: LD_INT 0
56622: ST_TO_ADDR
56623: GO 56641
// min_y := y - r ;
56625: LD_ADDR_VAR 0 8
56629: PUSH
56630: LD_VAR 0 3
56634: PUSH
56635: LD_VAR 0 4
56639: MINUS
56640: ST_TO_ADDR
// max_x := x + r ;
56641: LD_ADDR_VAR 0 9
56645: PUSH
56646: LD_VAR 0 2
56650: PUSH
56651: LD_VAR 0 4
56655: PLUS
56656: ST_TO_ADDR
// max_y := y + r ;
56657: LD_ADDR_VAR 0 10
56661: PUSH
56662: LD_VAR 0 3
56666: PUSH
56667: LD_VAR 0 4
56671: PLUS
56672: ST_TO_ADDR
// for _x = min_x to max_x do
56673: LD_ADDR_VAR 0 11
56677: PUSH
56678: DOUBLE
56679: LD_VAR 0 7
56683: DEC
56684: ST_TO_ADDR
56685: LD_VAR 0 9
56689: PUSH
56690: FOR_TO
56691: IFFALSE 56810
// for _y = min_y to max_y do
56693: LD_ADDR_VAR 0 12
56697: PUSH
56698: DOUBLE
56699: LD_VAR 0 8
56703: DEC
56704: ST_TO_ADDR
56705: LD_VAR 0 10
56709: PUSH
56710: FOR_TO
56711: IFFALSE 56806
// begin if not ValidHex ( _x , _y ) then
56713: LD_VAR 0 11
56717: PPUSH
56718: LD_VAR 0 12
56722: PPUSH
56723: CALL_OW 488
56727: NOT
56728: IFFALSE 56732
// continue ;
56730: GO 56710
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56732: LD_VAR 0 11
56736: PPUSH
56737: LD_VAR 0 12
56741: PPUSH
56742: CALL_OW 351
56746: IFFALSE 56764
56748: PUSH
56749: LD_VAR 0 11
56753: PPUSH
56754: LD_VAR 0 12
56758: PPUSH
56759: CALL_OW 554
56763: AND
56764: IFFALSE 56804
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56766: LD_ADDR_VAR 0 13
56770: PUSH
56771: LD_VAR 0 13
56775: PPUSH
56776: LD_VAR 0 13
56780: PUSH
56781: LD_INT 1
56783: PLUS
56784: PPUSH
56785: LD_VAR 0 11
56789: PUSH
56790: LD_VAR 0 12
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PPUSH
56799: CALL_OW 2
56803: ST_TO_ADDR
// end ;
56804: GO 56710
56806: POP
56807: POP
56808: GO 56690
56810: POP
56811: POP
// if not list then
56812: LD_VAR 0 13
56816: NOT
56817: IFFALSE 56821
// exit ;
56819: GO 56892
// for i in list do
56821: LD_ADDR_VAR 0 6
56825: PUSH
56826: LD_VAR 0 13
56830: PUSH
56831: FOR_IN
56832: IFFALSE 56890
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56834: LD_VAR 0 1
56838: PPUSH
56839: LD_STRING M
56841: PUSH
56842: LD_VAR 0 6
56846: PUSH
56847: LD_INT 1
56849: ARRAY
56850: PUSH
56851: LD_VAR 0 6
56855: PUSH
56856: LD_INT 2
56858: ARRAY
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: PUSH
56881: EMPTY
56882: LIST
56883: PPUSH
56884: CALL_OW 447
56888: GO 56831
56890: POP
56891: POP
// end ;
56892: LD_VAR 0 5
56896: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56897: LD_INT 0
56899: PPUSH
56900: PPUSH
56901: PPUSH
56902: PPUSH
56903: PPUSH
56904: PPUSH
56905: PPUSH
56906: PPUSH
56907: PPUSH
56908: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56909: LD_VAR 0 1
56913: PPUSH
56914: CALL_OW 302
56918: NOT
56919: IFTRUE 56938
56921: PUSH
56922: LD_VAR 0 2
56926: PPUSH
56927: LD_VAR 0 3
56931: PPUSH
56932: CALL_OW 488
56936: NOT
56937: OR
56938: IFTRUE 56947
56940: PUSH
56941: LD_VAR 0 4
56945: NOT
56946: OR
56947: IFFALSE 56951
// exit ;
56949: GO 57490
// if Count ( GetTaskList ( flame ) ) > 10 then
56951: LD_VAR 0 1
56955: PPUSH
56956: CALL_OW 437
56960: PPUSH
56961: CALL 13716 0 1
56965: PUSH
56966: LD_INT 10
56968: GREATER
56969: IFFALSE 56973
// exit ;
56971: GO 57490
// list := [ ] ;
56973: LD_ADDR_VAR 0 13
56977: PUSH
56978: EMPTY
56979: ST_TO_ADDR
// if x - r < 0 then
56980: LD_VAR 0 2
56984: PUSH
56985: LD_VAR 0 4
56989: MINUS
56990: PUSH
56991: LD_INT 0
56993: LESS
56994: IFFALSE 57006
// min_x := 0 else
56996: LD_ADDR_VAR 0 7
57000: PUSH
57001: LD_INT 0
57003: ST_TO_ADDR
57004: GO 57022
// min_x := x - r ;
57006: LD_ADDR_VAR 0 7
57010: PUSH
57011: LD_VAR 0 2
57015: PUSH
57016: LD_VAR 0 4
57020: MINUS
57021: ST_TO_ADDR
// if y - r < 0 then
57022: LD_VAR 0 3
57026: PUSH
57027: LD_VAR 0 4
57031: MINUS
57032: PUSH
57033: LD_INT 0
57035: LESS
57036: IFFALSE 57048
// min_y := 0 else
57038: LD_ADDR_VAR 0 8
57042: PUSH
57043: LD_INT 0
57045: ST_TO_ADDR
57046: GO 57064
// min_y := y - r ;
57048: LD_ADDR_VAR 0 8
57052: PUSH
57053: LD_VAR 0 3
57057: PUSH
57058: LD_VAR 0 4
57062: MINUS
57063: ST_TO_ADDR
// max_x := x + r ;
57064: LD_ADDR_VAR 0 9
57068: PUSH
57069: LD_VAR 0 2
57073: PUSH
57074: LD_VAR 0 4
57078: PLUS
57079: ST_TO_ADDR
// max_y := y + r ;
57080: LD_ADDR_VAR 0 10
57084: PUSH
57085: LD_VAR 0 3
57089: PUSH
57090: LD_VAR 0 4
57094: PLUS
57095: ST_TO_ADDR
// for _x = min_x to max_x do
57096: LD_ADDR_VAR 0 11
57100: PUSH
57101: DOUBLE
57102: LD_VAR 0 7
57106: DEC
57107: ST_TO_ADDR
57108: LD_VAR 0 9
57112: PUSH
57113: FOR_TO
57114: IFFALSE 57233
// for _y = min_y to max_y do
57116: LD_ADDR_VAR 0 12
57120: PUSH
57121: DOUBLE
57122: LD_VAR 0 8
57126: DEC
57127: ST_TO_ADDR
57128: LD_VAR 0 10
57132: PUSH
57133: FOR_TO
57134: IFFALSE 57229
// begin if not ValidHex ( _x , _y ) then
57136: LD_VAR 0 11
57140: PPUSH
57141: LD_VAR 0 12
57145: PPUSH
57146: CALL_OW 488
57150: NOT
57151: IFFALSE 57155
// continue ;
57153: GO 57133
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57155: LD_VAR 0 11
57159: PPUSH
57160: LD_VAR 0 12
57164: PPUSH
57165: CALL_OW 351
57169: IFFALSE 57187
57171: PUSH
57172: LD_VAR 0 11
57176: PPUSH
57177: LD_VAR 0 12
57181: PPUSH
57182: CALL_OW 554
57186: AND
57187: IFFALSE 57227
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57189: LD_ADDR_VAR 0 13
57193: PUSH
57194: LD_VAR 0 13
57198: PPUSH
57199: LD_VAR 0 13
57203: PUSH
57204: LD_INT 1
57206: PLUS
57207: PPUSH
57208: LD_VAR 0 11
57212: PUSH
57213: LD_VAR 0 12
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PPUSH
57222: CALL_OW 2
57226: ST_TO_ADDR
// end ;
57227: GO 57133
57229: POP
57230: POP
57231: GO 57113
57233: POP
57234: POP
// if not list then
57235: LD_VAR 0 13
57239: NOT
57240: IFFALSE 57244
// exit ;
57242: GO 57490
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57244: LD_ADDR_VAR 0 13
57248: PUSH
57249: LD_VAR 0 1
57253: PPUSH
57254: LD_VAR 0 13
57258: PPUSH
57259: LD_INT 1
57261: PPUSH
57262: LD_INT 1
57264: PPUSH
57265: CALL 17122 0 4
57269: ST_TO_ADDR
// ComStop ( flame ) ;
57270: LD_VAR 0 1
57274: PPUSH
57275: CALL_OW 141
// for i in list do
57279: LD_ADDR_VAR 0 6
57283: PUSH
57284: LD_VAR 0 13
57288: PUSH
57289: FOR_IN
57290: IFFALSE 57321
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57292: LD_VAR 0 1
57296: PPUSH
57297: LD_VAR 0 6
57301: PUSH
57302: LD_INT 1
57304: ARRAY
57305: PPUSH
57306: LD_VAR 0 6
57310: PUSH
57311: LD_INT 2
57313: ARRAY
57314: PPUSH
57315: CALL_OW 176
57319: GO 57289
57321: POP
57322: POP
// repeat wait ( 0 0$1 ) ;
57323: LD_INT 35
57325: PPUSH
57326: CALL_OW 67
// task := GetTaskList ( flame ) ;
57330: LD_ADDR_VAR 0 14
57334: PUSH
57335: LD_VAR 0 1
57339: PPUSH
57340: CALL_OW 437
57344: ST_TO_ADDR
// if not task then
57345: LD_VAR 0 14
57349: NOT
57350: IFFALSE 57354
// exit ;
57352: GO 57490
// if task [ 1 ] [ 1 ] <> | then
57354: LD_VAR 0 14
57358: PUSH
57359: LD_INT 1
57361: ARRAY
57362: PUSH
57363: LD_INT 1
57365: ARRAY
57366: PUSH
57367: LD_STRING |
57369: NONEQUAL
57370: IFFALSE 57374
// exit ;
57372: GO 57490
// _x := task [ 1 ] [ 2 ] ;
57374: LD_ADDR_VAR 0 11
57378: PUSH
57379: LD_VAR 0 14
57383: PUSH
57384: LD_INT 1
57386: ARRAY
57387: PUSH
57388: LD_INT 2
57390: ARRAY
57391: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57392: LD_ADDR_VAR 0 12
57396: PUSH
57397: LD_VAR 0 14
57401: PUSH
57402: LD_INT 1
57404: ARRAY
57405: PUSH
57406: LD_INT 3
57408: ARRAY
57409: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57410: LD_VAR 0 11
57414: PPUSH
57415: LD_VAR 0 12
57419: PPUSH
57420: CALL_OW 351
57424: NOT
57425: IFTRUE 57444
57427: PUSH
57428: LD_VAR 0 11
57432: PPUSH
57433: LD_VAR 0 12
57437: PPUSH
57438: CALL_OW 554
57442: NOT
57443: OR
57444: IFFALSE 57478
// begin task := Delete ( task , 1 ) ;
57446: LD_ADDR_VAR 0 14
57450: PUSH
57451: LD_VAR 0 14
57455: PPUSH
57456: LD_INT 1
57458: PPUSH
57459: CALL_OW 3
57463: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57464: LD_VAR 0 1
57468: PPUSH
57469: LD_VAR 0 14
57473: PPUSH
57474: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57478: LD_VAR 0 1
57482: PPUSH
57483: CALL_OW 314
57487: NOT
57488: IFFALSE 57323
// end ;
57490: LD_VAR 0 5
57494: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57495: LD_EXP 52
57499: NOT
57500: IFFALSE 57550
57502: GO 57504
57504: DISABLE
// begin initHack := true ;
57505: LD_ADDR_EXP 52
57509: PUSH
57510: LD_INT 1
57512: ST_TO_ADDR
// hackTanks := [ ] ;
57513: LD_ADDR_EXP 53
57517: PUSH
57518: EMPTY
57519: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57520: LD_ADDR_EXP 54
57524: PUSH
57525: EMPTY
57526: ST_TO_ADDR
// hackLimit := 3 ;
57527: LD_ADDR_EXP 55
57531: PUSH
57532: LD_INT 3
57534: ST_TO_ADDR
// hackDist := 12 ;
57535: LD_ADDR_EXP 56
57539: PUSH
57540: LD_INT 12
57542: ST_TO_ADDR
// hackCounter := [ ] ;
57543: LD_ADDR_EXP 57
57547: PUSH
57548: EMPTY
57549: ST_TO_ADDR
// end ;
57550: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57551: LD_EXP 52
57555: IFFALSE 57573
57557: PUSH
57558: LD_INT 34
57560: PUSH
57561: LD_INT 99
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PPUSH
57568: CALL_OW 69
57572: AND
57573: IFFALSE 57826
57575: GO 57577
57577: DISABLE
57578: LD_INT 0
57580: PPUSH
57581: PPUSH
// begin enable ;
57582: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57583: LD_ADDR_VAR 0 1
57587: PUSH
57588: LD_INT 34
57590: PUSH
57591: LD_INT 99
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PPUSH
57598: CALL_OW 69
57602: PUSH
57603: FOR_IN
57604: IFFALSE 57824
// begin if not i in hackTanks then
57606: LD_VAR 0 1
57610: PUSH
57611: LD_EXP 53
57615: IN
57616: NOT
57617: IFFALSE 57700
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57619: LD_ADDR_EXP 53
57623: PUSH
57624: LD_EXP 53
57628: PPUSH
57629: LD_EXP 53
57633: PUSH
57634: LD_INT 1
57636: PLUS
57637: PPUSH
57638: LD_VAR 0 1
57642: PPUSH
57643: CALL_OW 1
57647: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57648: LD_ADDR_EXP 54
57652: PUSH
57653: LD_EXP 54
57657: PPUSH
57658: LD_EXP 54
57662: PUSH
57663: LD_INT 1
57665: PLUS
57666: PPUSH
57667: EMPTY
57668: PPUSH
57669: CALL_OW 1
57673: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57674: LD_ADDR_EXP 57
57678: PUSH
57679: LD_EXP 57
57683: PPUSH
57684: LD_EXP 57
57688: PUSH
57689: LD_INT 1
57691: PLUS
57692: PPUSH
57693: EMPTY
57694: PPUSH
57695: CALL_OW 1
57699: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57700: LD_VAR 0 1
57704: PPUSH
57705: CALL_OW 302
57709: NOT
57710: IFFALSE 57723
// begin HackUnlinkAll ( i ) ;
57712: LD_VAR 0 1
57716: PPUSH
57717: CALL 57829 0 1
// continue ;
57721: GO 57603
// end ; HackCheckCapturedStatus ( i ) ;
57723: LD_VAR 0 1
57727: PPUSH
57728: CALL 58274 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57732: LD_ADDR_VAR 0 2
57736: PUSH
57737: LD_INT 81
57739: PUSH
57740: LD_VAR 0 1
57744: PPUSH
57745: CALL_OW 255
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 33
57756: PUSH
57757: LD_INT 3
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 91
57766: PUSH
57767: LD_VAR 0 1
57771: PUSH
57772: LD_EXP 56
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 50
57784: PUSH
57785: EMPTY
57786: LIST
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: PPUSH
57794: CALL_OW 69
57798: ST_TO_ADDR
// if not tmp then
57799: LD_VAR 0 2
57803: NOT
57804: IFFALSE 57808
// continue ;
57806: GO 57603
// HackLink ( i , tmp ) ;
57808: LD_VAR 0 1
57812: PPUSH
57813: LD_VAR 0 2
57817: PPUSH
57818: CALL 57965 0 2
// end ;
57822: GO 57603
57824: POP
57825: POP
// end ;
57826: PPOPN 2
57828: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57829: LD_INT 0
57831: PPUSH
57832: PPUSH
57833: PPUSH
// if not hack in hackTanks then
57834: LD_VAR 0 1
57838: PUSH
57839: LD_EXP 53
57843: IN
57844: NOT
57845: IFFALSE 57849
// exit ;
57847: GO 57960
// index := GetElementIndex ( hackTanks , hack ) ;
57849: LD_ADDR_VAR 0 4
57853: PUSH
57854: LD_EXP 53
57858: PPUSH
57859: LD_VAR 0 1
57863: PPUSH
57864: CALL 16417 0 2
57868: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57869: LD_EXP 54
57873: PUSH
57874: LD_VAR 0 4
57878: ARRAY
57879: IFFALSE 57960
// begin for i in hackTanksCaptured [ index ] do
57881: LD_ADDR_VAR 0 3
57885: PUSH
57886: LD_EXP 54
57890: PUSH
57891: LD_VAR 0 4
57895: ARRAY
57896: PUSH
57897: FOR_IN
57898: IFFALSE 57924
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57900: LD_VAR 0 3
57904: PUSH
57905: LD_INT 1
57907: ARRAY
57908: PPUSH
57909: LD_VAR 0 3
57913: PUSH
57914: LD_INT 2
57916: ARRAY
57917: PPUSH
57918: CALL_OW 235
57922: GO 57897
57924: POP
57925: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57926: LD_ADDR_EXP 54
57930: PUSH
57931: LD_EXP 54
57935: PPUSH
57936: LD_VAR 0 4
57940: PPUSH
57941: EMPTY
57942: PPUSH
57943: CALL_OW 1
57947: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57948: LD_VAR 0 1
57952: PPUSH
57953: LD_INT 0
57955: PPUSH
57956: CALL_OW 505
// end ; end ;
57960: LD_VAR 0 2
57964: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57965: LD_INT 0
57967: PPUSH
57968: PPUSH
57969: PPUSH
// if not hack in hackTanks or not vehicles then
57970: LD_VAR 0 1
57974: PUSH
57975: LD_EXP 53
57979: IN
57980: NOT
57981: IFTRUE 57990
57983: PUSH
57984: LD_VAR 0 2
57988: NOT
57989: OR
57990: IFFALSE 57994
// exit ;
57992: GO 58269
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57994: LD_ADDR_VAR 0 2
57998: PUSH
57999: LD_VAR 0 1
58003: PPUSH
58004: LD_VAR 0 2
58008: PPUSH
58009: LD_INT 1
58011: PPUSH
58012: LD_INT 1
58014: PPUSH
58015: CALL 17069 0 4
58019: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58020: LD_ADDR_VAR 0 5
58024: PUSH
58025: LD_EXP 53
58029: PPUSH
58030: LD_VAR 0 1
58034: PPUSH
58035: CALL 16417 0 2
58039: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58040: LD_EXP 54
58044: PUSH
58045: LD_VAR 0 5
58049: ARRAY
58050: PUSH
58051: LD_EXP 55
58055: LESS
58056: IFFALSE 58245
// begin for i := 1 to vehicles do
58058: LD_ADDR_VAR 0 4
58062: PUSH
58063: DOUBLE
58064: LD_INT 1
58066: DEC
58067: ST_TO_ADDR
58068: LD_VAR 0 2
58072: PUSH
58073: FOR_TO
58074: IFFALSE 58243
// begin if hackTanksCaptured [ index ] = hackLimit then
58076: LD_EXP 54
58080: PUSH
58081: LD_VAR 0 5
58085: ARRAY
58086: PUSH
58087: LD_EXP 55
58091: EQUAL
58092: IFFALSE 58096
// break ;
58094: GO 58243
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58096: LD_ADDR_EXP 57
58100: PUSH
58101: LD_EXP 57
58105: PPUSH
58106: LD_VAR 0 5
58110: PPUSH
58111: LD_EXP 57
58115: PUSH
58116: LD_VAR 0 5
58120: ARRAY
58121: PUSH
58122: LD_INT 1
58124: PLUS
58125: PPUSH
58126: CALL_OW 1
58130: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58131: LD_ADDR_EXP 54
58135: PUSH
58136: LD_EXP 54
58140: PPUSH
58141: LD_VAR 0 5
58145: PUSH
58146: LD_EXP 54
58150: PUSH
58151: LD_VAR 0 5
58155: ARRAY
58156: PUSH
58157: LD_INT 1
58159: PLUS
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PPUSH
58165: LD_VAR 0 2
58169: PUSH
58170: LD_VAR 0 4
58174: ARRAY
58175: PUSH
58176: LD_VAR 0 2
58180: PUSH
58181: LD_VAR 0 4
58185: ARRAY
58186: PPUSH
58187: CALL_OW 255
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PPUSH
58196: CALL 16634 0 3
58200: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58201: LD_VAR 0 2
58205: PUSH
58206: LD_VAR 0 4
58210: ARRAY
58211: PPUSH
58212: LD_VAR 0 1
58216: PPUSH
58217: CALL_OW 255
58221: PPUSH
58222: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58226: LD_VAR 0 2
58230: PUSH
58231: LD_VAR 0 4
58235: ARRAY
58236: PPUSH
58237: CALL_OW 141
// end ;
58241: GO 58073
58243: POP
58244: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58245: LD_VAR 0 1
58249: PPUSH
58250: LD_EXP 54
58254: PUSH
58255: LD_VAR 0 5
58259: ARRAY
58260: PUSH
58261: LD_INT 0
58263: PLUS
58264: PPUSH
58265: CALL_OW 505
// end ;
58269: LD_VAR 0 3
58273: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58274: LD_INT 0
58276: PPUSH
58277: PPUSH
58278: PPUSH
58279: PPUSH
// if not hack in hackTanks then
58280: LD_VAR 0 1
58284: PUSH
58285: LD_EXP 53
58289: IN
58290: NOT
58291: IFFALSE 58295
// exit ;
58293: GO 58539
// index := GetElementIndex ( hackTanks , hack ) ;
58295: LD_ADDR_VAR 0 4
58299: PUSH
58300: LD_EXP 53
58304: PPUSH
58305: LD_VAR 0 1
58309: PPUSH
58310: CALL 16417 0 2
58314: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58315: LD_ADDR_VAR 0 3
58319: PUSH
58320: DOUBLE
58321: LD_EXP 54
58325: PUSH
58326: LD_VAR 0 4
58330: ARRAY
58331: INC
58332: ST_TO_ADDR
58333: LD_INT 1
58335: PUSH
58336: FOR_DOWNTO
58337: IFFALSE 58513
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58339: LD_ADDR_VAR 0 5
58343: PUSH
58344: LD_EXP 54
58348: PUSH
58349: LD_VAR 0 4
58353: ARRAY
58354: PUSH
58355: LD_VAR 0 3
58359: ARRAY
58360: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58361: LD_VAR 0 5
58365: PUSH
58366: LD_INT 1
58368: ARRAY
58369: PPUSH
58370: CALL_OW 302
58374: NOT
58375: IFTRUE 58403
58377: PUSH
58378: LD_VAR 0 5
58382: PUSH
58383: LD_INT 1
58385: ARRAY
58386: PPUSH
58387: CALL_OW 255
58391: PUSH
58392: LD_VAR 0 1
58396: PPUSH
58397: CALL_OW 255
58401: NONEQUAL
58402: OR
58403: IFFALSE 58511
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58405: LD_VAR 0 5
58409: PUSH
58410: LD_INT 1
58412: ARRAY
58413: PPUSH
58414: CALL_OW 305
58418: IFFALSE 58446
58420: PUSH
58421: LD_VAR 0 5
58425: PUSH
58426: LD_INT 1
58428: ARRAY
58429: PPUSH
58430: CALL_OW 255
58434: PUSH
58435: LD_VAR 0 1
58439: PPUSH
58440: CALL_OW 255
58444: EQUAL
58445: AND
58446: IFFALSE 58470
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58448: LD_VAR 0 5
58452: PUSH
58453: LD_INT 1
58455: ARRAY
58456: PPUSH
58457: LD_VAR 0 5
58461: PUSH
58462: LD_INT 2
58464: ARRAY
58465: PPUSH
58466: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58470: LD_ADDR_EXP 54
58474: PUSH
58475: LD_EXP 54
58479: PPUSH
58480: LD_VAR 0 4
58484: PPUSH
58485: LD_EXP 54
58489: PUSH
58490: LD_VAR 0 4
58494: ARRAY
58495: PPUSH
58496: LD_VAR 0 3
58500: PPUSH
58501: CALL_OW 3
58505: PPUSH
58506: CALL_OW 1
58510: ST_TO_ADDR
// end ; end ;
58511: GO 58336
58513: POP
58514: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58515: LD_VAR 0 1
58519: PPUSH
58520: LD_EXP 54
58524: PUSH
58525: LD_VAR 0 4
58529: ARRAY
58530: PUSH
58531: LD_INT 0
58533: PLUS
58534: PPUSH
58535: CALL_OW 505
// end ;
58539: LD_VAR 0 2
58543: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58544: LD_INT 0
58546: PPUSH
58547: PPUSH
58548: PPUSH
58549: PPUSH
// if not hack in hackTanks then
58550: LD_VAR 0 1
58554: PUSH
58555: LD_EXP 53
58559: IN
58560: NOT
58561: IFFALSE 58565
// exit ;
58563: GO 58650
// index := GetElementIndex ( hackTanks , hack ) ;
58565: LD_ADDR_VAR 0 5
58569: PUSH
58570: LD_EXP 53
58574: PPUSH
58575: LD_VAR 0 1
58579: PPUSH
58580: CALL 16417 0 2
58584: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58585: LD_ADDR_VAR 0 4
58589: PUSH
58590: DOUBLE
58591: LD_INT 1
58593: DEC
58594: ST_TO_ADDR
58595: LD_EXP 54
58599: PUSH
58600: LD_VAR 0 5
58604: ARRAY
58605: PUSH
58606: FOR_TO
58607: IFFALSE 58648
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58609: LD_EXP 54
58613: PUSH
58614: LD_VAR 0 5
58618: ARRAY
58619: PUSH
58620: LD_VAR 0 4
58624: ARRAY
58625: PUSH
58626: LD_INT 1
58628: ARRAY
58629: PUSH
58630: LD_VAR 0 2
58634: EQUAL
58635: IFFALSE 58646
// KillUnit ( vehicle ) ;
58637: LD_VAR 0 2
58641: PPUSH
58642: CALL_OW 66
58646: GO 58606
58648: POP
58649: POP
// end ;
58650: LD_VAR 0 3
58654: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
58655: LD_EXP 58
58659: NOT
58660: IFFALSE 58793
58662: GO 58664
58664: DISABLE
58665: LD_INT 0
58667: PPUSH
// begin initMiner := true ;
58668: LD_ADDR_EXP 58
58672: PUSH
58673: LD_INT 1
58675: ST_TO_ADDR
// minersList := [ ] ;
58676: LD_ADDR_EXP 59
58680: PUSH
58681: EMPTY
58682: ST_TO_ADDR
// minerMinesList := [ ] ;
58683: LD_ADDR_EXP 60
58687: PUSH
58688: EMPTY
58689: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
58690: LD_ADDR_EXP 61
58694: PUSH
58695: LD_INT 10
58697: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58698: LD_ADDR_VAR 0 1
58702: PUSH
58703: LD_INT 34
58705: PUSH
58706: LD_INT 81
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PPUSH
58713: CALL_OW 69
58717: PUSH
58718: FOR_IN
58719: IFFALSE 58791
// begin if not i in minersList then
58721: LD_VAR 0 1
58725: PUSH
58726: LD_EXP 59
58730: IN
58731: NOT
58732: IFFALSE 58789
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58734: LD_ADDR_EXP 59
58738: PUSH
58739: LD_EXP 59
58743: PPUSH
58744: LD_EXP 59
58748: PUSH
58749: LD_INT 1
58751: PLUS
58752: PPUSH
58753: LD_VAR 0 1
58757: PPUSH
58758: CALL_OW 1
58762: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58763: LD_ADDR_EXP 60
58767: PUSH
58768: LD_EXP 60
58772: PPUSH
58773: LD_EXP 60
58777: PUSH
58778: LD_INT 1
58780: PLUS
58781: PPUSH
58782: EMPTY
58783: PPUSH
58784: CALL_OW 1
58788: ST_TO_ADDR
// end end ;
58789: GO 58718
58791: POP
58792: POP
// end ;
58793: PPOPN 1
58795: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
58796: LD_EXP 58
58800: IFFALSE 58831
58802: PUSH
58803: LD_EXP 60
58807: PPUSH
58808: CALL 13716 0 1
58812: IFTRUE 58830
58814: PUSH
58815: LD_INT 34
58817: PUSH
58818: LD_INT 81
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PPUSH
58825: CALL_OW 69
58829: OR
58830: AND
58831: IFFALSE 59351
58833: GO 58835
58835: DISABLE
58836: LD_INT 0
58838: PPUSH
58839: PPUSH
58840: PPUSH
58841: PPUSH
// begin enable ;
58842: ENABLE
// for i := minerMinesList downto 1 do
58843: LD_ADDR_VAR 0 1
58847: PUSH
58848: DOUBLE
58849: LD_EXP 60
58853: INC
58854: ST_TO_ADDR
58855: LD_INT 1
58857: PUSH
58858: FOR_DOWNTO
58859: IFFALSE 59349
// begin side := GetSide ( minersList [ i ] ) ;
58861: LD_ADDR_VAR 0 3
58865: PUSH
58866: LD_EXP 59
58870: PUSH
58871: LD_VAR 0 1
58875: ARRAY
58876: PPUSH
58877: CALL_OW 255
58881: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
58882: LD_EXP 59
58886: PUSH
58887: LD_VAR 0 1
58891: ARRAY
58892: PPUSH
58893: CALL_OW 300
58897: IFFALSE 58918
58899: PUSH
58900: LD_VAR 0 3
58904: PUSH
58905: LD_OWVAR 2
58909: PUSH
58910: LD_INT 9
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: IN
58917: AND
58918: IFFALSE 58951
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58920: LD_EXP 59
58924: PUSH
58925: LD_VAR 0 1
58929: ARRAY
58930: PPUSH
58931: LD_EXP 60
58935: PUSH
58936: LD_VAR 0 1
58940: ARRAY
58941: PPUSH
58942: CALL 13716 0 1
58946: PPUSH
58947: CALL_OW 505
// if not minerMinesList [ i ] then
58951: LD_EXP 60
58955: PUSH
58956: LD_VAR 0 1
58960: ARRAY
58961: NOT
58962: IFFALSE 58966
// continue ;
58964: GO 58858
// for j := minerMinesList [ i ] downto 1 do
58966: LD_ADDR_VAR 0 2
58970: PUSH
58971: DOUBLE
58972: LD_EXP 60
58976: PUSH
58977: LD_VAR 0 1
58981: ARRAY
58982: INC
58983: ST_TO_ADDR
58984: LD_INT 1
58986: PUSH
58987: FOR_DOWNTO
58988: IFFALSE 59345
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58990: LD_EXP 59
58994: PUSH
58995: LD_VAR 0 1
58999: ARRAY
59000: PPUSH
59001: CALL_OW 301
59005: IFTRUE 59025
59007: PUSH
59008: LD_EXP 59
59012: PUSH
59013: LD_VAR 0 1
59017: ARRAY
59018: PPUSH
59019: CALL_OW 305
59023: NOT
59024: OR
59025: IFFALSE 59116
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59027: LD_EXP 60
59031: PUSH
59032: LD_VAR 0 1
59036: ARRAY
59037: PUSH
59038: LD_VAR 0 2
59042: ARRAY
59043: PUSH
59044: LD_INT 1
59046: ARRAY
59047: PPUSH
59048: LD_EXP 60
59052: PUSH
59053: LD_VAR 0 1
59057: ARRAY
59058: PUSH
59059: LD_VAR 0 2
59063: ARRAY
59064: PUSH
59065: LD_INT 2
59067: ARRAY
59068: PPUSH
59069: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59073: LD_ADDR_EXP 60
59077: PUSH
59078: LD_EXP 60
59082: PPUSH
59083: LD_VAR 0 1
59087: PPUSH
59088: LD_EXP 60
59092: PUSH
59093: LD_VAR 0 1
59097: ARRAY
59098: PPUSH
59099: LD_VAR 0 2
59103: PPUSH
59104: CALL_OW 3
59108: PPUSH
59109: CALL_OW 1
59113: ST_TO_ADDR
// continue ;
59114: GO 58987
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59116: LD_ADDR_VAR 0 4
59120: PUSH
59121: LD_EXP 60
59125: PUSH
59126: LD_VAR 0 1
59130: ARRAY
59131: PUSH
59132: LD_VAR 0 2
59136: ARRAY
59137: PUSH
59138: LD_INT 1
59140: ARRAY
59141: PPUSH
59142: LD_EXP 60
59146: PUSH
59147: LD_VAR 0 1
59151: ARRAY
59152: PUSH
59153: LD_VAR 0 2
59157: ARRAY
59158: PUSH
59159: LD_INT 2
59161: ARRAY
59162: PPUSH
59163: CALL_OW 428
59167: ST_TO_ADDR
// if not tmp then
59168: LD_VAR 0 4
59172: NOT
59173: IFFALSE 59177
// continue ;
59175: GO 58987
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59177: LD_VAR 0 4
59181: PUSH
59182: LD_INT 81
59184: PUSH
59185: LD_VAR 0 3
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PPUSH
59194: CALL_OW 69
59198: IN
59199: IFFALSE 59249
59201: PUSH
59202: LD_EXP 60
59206: PUSH
59207: LD_VAR 0 1
59211: ARRAY
59212: PUSH
59213: LD_VAR 0 2
59217: ARRAY
59218: PUSH
59219: LD_INT 1
59221: ARRAY
59222: PPUSH
59223: LD_EXP 60
59227: PUSH
59228: LD_VAR 0 1
59232: ARRAY
59233: PUSH
59234: LD_VAR 0 2
59238: ARRAY
59239: PUSH
59240: LD_INT 2
59242: ARRAY
59243: PPUSH
59244: CALL_OW 458
59248: AND
59249: IFFALSE 59343
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59251: LD_EXP 60
59255: PUSH
59256: LD_VAR 0 1
59260: ARRAY
59261: PUSH
59262: LD_VAR 0 2
59266: ARRAY
59267: PUSH
59268: LD_INT 1
59270: ARRAY
59271: PPUSH
59272: LD_EXP 60
59276: PUSH
59277: LD_VAR 0 1
59281: ARRAY
59282: PUSH
59283: LD_VAR 0 2
59287: ARRAY
59288: PUSH
59289: LD_INT 2
59291: ARRAY
59292: PPUSH
59293: LD_VAR 0 3
59297: PPUSH
59298: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59302: LD_ADDR_EXP 60
59306: PUSH
59307: LD_EXP 60
59311: PPUSH
59312: LD_VAR 0 1
59316: PPUSH
59317: LD_EXP 60
59321: PUSH
59322: LD_VAR 0 1
59326: ARRAY
59327: PPUSH
59328: LD_VAR 0 2
59332: PPUSH
59333: CALL_OW 3
59337: PPUSH
59338: CALL_OW 1
59342: ST_TO_ADDR
// end ; end ;
59343: GO 58987
59345: POP
59346: POP
// end ;
59347: GO 58858
59349: POP
59350: POP
// end ;
59351: PPOPN 4
59353: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
59354: LD_INT 0
59356: PPUSH
59357: PPUSH
59358: PPUSH
59359: PPUSH
// result := false ;
59360: LD_ADDR_VAR 0 4
59364: PUSH
59365: LD_INT 0
59367: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59368: LD_VAR 0 1
59372: PPUSH
59373: CALL_OW 264
59377: PUSH
59378: LD_INT 81
59380: EQUAL
59381: NOT
59382: IFFALSE 59386
// exit ;
59384: GO 59756
// side := GetSide ( unit ) ;
59386: LD_ADDR_VAR 0 6
59390: PUSH
59391: LD_VAR 0 1
59395: PPUSH
59396: CALL_OW 255
59400: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
59401: LD_ADDR_VAR 0 5
59405: PUSH
59406: LD_EXP 59
59410: PPUSH
59411: LD_VAR 0 1
59415: PPUSH
59416: CALL 16417 0 2
59420: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59421: LD_EXP 60
59425: PUSH
59426: LD_VAR 0 5
59430: ARRAY
59431: PUSH
59432: LD_EXP 61
59436: GREATEREQUAL
59437: IFFALSE 59441
// exit ;
59439: GO 59756
// ComMoveXY ( unit , x , y ) ;
59441: LD_VAR 0 1
59445: PPUSH
59446: LD_VAR 0 2
59450: PPUSH
59451: LD_VAR 0 3
59455: PPUSH
59456: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59460: LD_INT 35
59462: PPUSH
59463: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59467: LD_VAR 0 1
59471: PPUSH
59472: LD_VAR 0 2
59476: PPUSH
59477: LD_VAR 0 3
59481: PPUSH
59482: CALL 48473 0 3
59486: NOT
59487: IFFALSE 59500
59489: PUSH
59490: LD_VAR 0 1
59494: PPUSH
59495: CALL_OW 314
59499: AND
59500: IFFALSE 59504
// exit ;
59502: GO 59756
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59504: LD_VAR 0 2
59508: PPUSH
59509: LD_VAR 0 3
59513: PPUSH
59514: CALL_OW 428
59518: PUSH
59519: LD_VAR 0 1
59523: EQUAL
59524: IFFALSE 59538
59526: PUSH
59527: LD_VAR 0 1
59531: PPUSH
59532: CALL_OW 314
59536: NOT
59537: AND
59538: IFFALSE 59460
// if MineAtPos ( x , y ) then
59540: LD_VAR 0 2
59544: PPUSH
59545: LD_VAR 0 3
59549: PPUSH
59550: CALL_OW 458
59554: IFFALSE 59558
// exit ;
59556: GO 59756
// if your_side = side then
59558: LD_OWVAR 2
59562: PUSH
59563: LD_VAR 0 6
59567: EQUAL
59568: IFFALSE 59587
// PlaySoundXY ( x , y , PlantMine ) ;
59570: LD_VAR 0 2
59574: PPUSH
59575: LD_VAR 0 3
59579: PPUSH
59580: LD_STRING PlantMine
59582: PPUSH
59583: CALL_OW 366
// repeat wait ( 1 ) ;
59587: LD_INT 1
59589: PPUSH
59590: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
59594: LD_VAR 0 2
59598: PPUSH
59599: LD_VAR 0 3
59603: PPUSH
59604: LD_VAR 0 6
59608: PPUSH
59609: LD_INT 0
59611: PPUSH
59612: CALL_OW 454
59616: IFFALSE 59587
// if MineAtPos ( x , y ) then
59618: LD_VAR 0 2
59622: PPUSH
59623: LD_VAR 0 3
59627: PPUSH
59628: CALL_OW 458
59632: IFFALSE 59748
// begin for i in minerMinesList [ index ] do
59634: LD_ADDR_VAR 0 7
59638: PUSH
59639: LD_EXP 60
59643: PUSH
59644: LD_VAR 0 5
59648: ARRAY
59649: PUSH
59650: FOR_IN
59651: IFFALSE 59693
// if i [ 1 ] = x and i [ 2 ] = y then
59653: LD_VAR 0 7
59657: PUSH
59658: LD_INT 1
59660: ARRAY
59661: PUSH
59662: LD_VAR 0 2
59666: EQUAL
59667: IFFALSE 59685
59669: PUSH
59670: LD_VAR 0 7
59674: PUSH
59675: LD_INT 2
59677: ARRAY
59678: PUSH
59679: LD_VAR 0 3
59683: EQUAL
59684: AND
59685: IFFALSE 59691
// exit ;
59687: POP
59688: POP
59689: GO 59756
59691: GO 59650
59693: POP
59694: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59695: LD_ADDR_EXP 60
59699: PUSH
59700: LD_EXP 60
59704: PPUSH
59705: LD_VAR 0 5
59709: PUSH
59710: LD_EXP 60
59714: PUSH
59715: LD_VAR 0 5
59719: ARRAY
59720: PUSH
59721: LD_INT 1
59723: PLUS
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PPUSH
59729: LD_VAR 0 2
59733: PUSH
59734: LD_VAR 0 3
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PPUSH
59743: CALL 16634 0 3
59747: ST_TO_ADDR
// end ; result := true ;
59748: LD_ADDR_VAR 0 4
59752: PUSH
59753: LD_INT 1
59755: ST_TO_ADDR
// end ;
59756: LD_VAR 0 4
59760: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59761: LD_INT 0
59763: PPUSH
59764: PPUSH
59765: PPUSH
// if not unit in minersList then
59766: LD_VAR 0 1
59770: PUSH
59771: LD_EXP 59
59775: IN
59776: NOT
59777: IFFALSE 59781
// exit ;
59779: GO 59988
// index := GetElementIndex ( minersList , unit ) ;
59781: LD_ADDR_VAR 0 6
59785: PUSH
59786: LD_EXP 59
59790: PPUSH
59791: LD_VAR 0 1
59795: PPUSH
59796: CALL 16417 0 2
59800: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59801: LD_ADDR_VAR 0 5
59805: PUSH
59806: DOUBLE
59807: LD_EXP 60
59811: PUSH
59812: LD_VAR 0 6
59816: ARRAY
59817: INC
59818: ST_TO_ADDR
59819: LD_INT 1
59821: PUSH
59822: FOR_DOWNTO
59823: IFFALSE 59986
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59825: LD_EXP 60
59829: PUSH
59830: LD_VAR 0 6
59834: ARRAY
59835: PUSH
59836: LD_VAR 0 5
59840: ARRAY
59841: PUSH
59842: LD_INT 1
59844: ARRAY
59845: PPUSH
59846: LD_EXP 60
59850: PUSH
59851: LD_VAR 0 6
59855: ARRAY
59856: PUSH
59857: LD_VAR 0 5
59861: ARRAY
59862: PUSH
59863: LD_INT 2
59865: ARRAY
59866: PPUSH
59867: LD_VAR 0 2
59871: PPUSH
59872: LD_VAR 0 3
59876: PPUSH
59877: CALL_OW 298
59881: PUSH
59882: LD_INT 6
59884: LESS
59885: IFFALSE 59984
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59887: LD_EXP 60
59891: PUSH
59892: LD_VAR 0 6
59896: ARRAY
59897: PUSH
59898: LD_VAR 0 5
59902: ARRAY
59903: PUSH
59904: LD_INT 1
59906: ARRAY
59907: PPUSH
59908: LD_EXP 60
59912: PUSH
59913: LD_VAR 0 6
59917: ARRAY
59918: PUSH
59919: LD_VAR 0 5
59923: ARRAY
59924: PUSH
59925: LD_INT 2
59927: ARRAY
59928: PPUSH
59929: LD_VAR 0 1
59933: PPUSH
59934: CALL_OW 255
59938: PPUSH
59939: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59943: LD_ADDR_EXP 60
59947: PUSH
59948: LD_EXP 60
59952: PPUSH
59953: LD_VAR 0 6
59957: PPUSH
59958: LD_EXP 60
59962: PUSH
59963: LD_VAR 0 6
59967: ARRAY
59968: PPUSH
59969: LD_VAR 0 5
59973: PPUSH
59974: CALL_OW 3
59978: PPUSH
59979: CALL_OW 1
59983: ST_TO_ADDR
// end ; end ;
59984: GO 59822
59986: POP
59987: POP
// end ;
59988: LD_VAR 0 4
59992: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59993: LD_INT 0
59995: PPUSH
59996: PPUSH
59997: PPUSH
59998: PPUSH
59999: PPUSH
60000: PPUSH
60001: PPUSH
60002: PPUSH
60003: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60004: LD_VAR 0 1
60008: PPUSH
60009: CALL_OW 264
60013: PUSH
60014: LD_INT 81
60016: EQUAL
60017: NOT
60018: IFTRUE 60033
60020: PUSH
60021: LD_VAR 0 1
60025: PUSH
60026: LD_EXP 59
60030: IN
60031: NOT
60032: OR
60033: IFFALSE 60037
// exit ;
60035: GO 60363
// index := GetElementIndex ( minersList , unit ) ;
60037: LD_ADDR_VAR 0 6
60041: PUSH
60042: LD_EXP 59
60046: PPUSH
60047: LD_VAR 0 1
60051: PPUSH
60052: CALL 16417 0 2
60056: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60057: LD_ADDR_VAR 0 8
60061: PUSH
60062: LD_EXP 61
60066: PUSH
60067: LD_EXP 60
60071: PUSH
60072: LD_VAR 0 6
60076: ARRAY
60077: MINUS
60078: ST_TO_ADDR
// if not minesFreeAmount then
60079: LD_VAR 0 8
60083: NOT
60084: IFFALSE 60088
// exit ;
60086: GO 60363
// tmp := [ ] ;
60088: LD_ADDR_VAR 0 7
60092: PUSH
60093: EMPTY
60094: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60095: LD_ADDR_VAR 0 5
60099: PUSH
60100: DOUBLE
60101: LD_INT 1
60103: DEC
60104: ST_TO_ADDR
60105: LD_VAR 0 8
60109: PUSH
60110: FOR_TO
60111: IFFALSE 60310
// begin _d := rand ( 0 , 5 ) ;
60113: LD_ADDR_VAR 0 11
60117: PUSH
60118: LD_INT 0
60120: PPUSH
60121: LD_INT 5
60123: PPUSH
60124: CALL_OW 12
60128: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60129: LD_ADDR_VAR 0 12
60133: PUSH
60134: LD_INT 2
60136: PPUSH
60137: LD_INT 6
60139: PPUSH
60140: CALL_OW 12
60144: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60145: LD_ADDR_VAR 0 9
60149: PUSH
60150: LD_VAR 0 2
60154: PPUSH
60155: LD_VAR 0 11
60159: PPUSH
60160: LD_VAR 0 12
60164: PPUSH
60165: CALL_OW 272
60169: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60170: LD_ADDR_VAR 0 10
60174: PUSH
60175: LD_VAR 0 3
60179: PPUSH
60180: LD_VAR 0 11
60184: PPUSH
60185: LD_VAR 0 12
60189: PPUSH
60190: CALL_OW 273
60194: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60195: LD_VAR 0 9
60199: PPUSH
60200: LD_VAR 0 10
60204: PPUSH
60205: CALL_OW 488
60209: IFFALSE 60233
60211: PUSH
60212: LD_VAR 0 9
60216: PUSH
60217: LD_VAR 0 10
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_VAR 0 7
60230: IN
60231: NOT
60232: AND
60233: IFFALSE 60252
60235: PUSH
60236: LD_VAR 0 9
60240: PPUSH
60241: LD_VAR 0 10
60245: PPUSH
60246: CALL_OW 458
60250: NOT
60251: AND
60252: IFFALSE 60294
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60254: LD_ADDR_VAR 0 7
60258: PUSH
60259: LD_VAR 0 7
60263: PPUSH
60264: LD_VAR 0 7
60268: PUSH
60269: LD_INT 1
60271: PLUS
60272: PPUSH
60273: LD_VAR 0 9
60277: PUSH
60278: LD_VAR 0 10
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PPUSH
60287: CALL_OW 1
60291: ST_TO_ADDR
60292: GO 60308
// i := i - 1 ;
60294: LD_ADDR_VAR 0 5
60298: PUSH
60299: LD_VAR 0 5
60303: PUSH
60304: LD_INT 1
60306: MINUS
60307: ST_TO_ADDR
// end ;
60308: GO 60110
60310: POP
60311: POP
// for i in tmp do
60312: LD_ADDR_VAR 0 5
60316: PUSH
60317: LD_VAR 0 7
60321: PUSH
60322: FOR_IN
60323: IFFALSE 60361
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60325: LD_VAR 0 1
60329: PPUSH
60330: LD_VAR 0 5
60334: PUSH
60335: LD_INT 1
60337: ARRAY
60338: PPUSH
60339: LD_VAR 0 5
60343: PUSH
60344: LD_INT 2
60346: ARRAY
60347: PPUSH
60348: CALL 59354 0 3
60352: NOT
60353: IFFALSE 60359
// exit ;
60355: POP
60356: POP
60357: GO 60363
60359: GO 60322
60361: POP
60362: POP
// end ;
60363: LD_VAR 0 4
60367: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60368: LD_INT 0
60370: PPUSH
60371: PPUSH
60372: PPUSH
60373: PPUSH
60374: PPUSH
60375: PPUSH
60376: PPUSH
60377: PPUSH
60378: PPUSH
// if GetClass ( unit ) <> class_sniper then
60379: LD_VAR 0 1
60383: PPUSH
60384: CALL_OW 257
60388: PUSH
60389: LD_INT 5
60391: NONEQUAL
60392: IFFALSE 60396
// exit ;
60394: GO 60866
// dist := 8 ;
60396: LD_ADDR_VAR 0 5
60400: PUSH
60401: LD_INT 8
60403: ST_TO_ADDR
// viewRange := 12 ;
60404: LD_ADDR_VAR 0 8
60408: PUSH
60409: LD_INT 12
60411: ST_TO_ADDR
// side := GetSide ( unit ) ;
60412: LD_ADDR_VAR 0 6
60416: PUSH
60417: LD_VAR 0 1
60421: PPUSH
60422: CALL_OW 255
60426: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60427: LD_INT 61
60429: PPUSH
60430: LD_VAR 0 6
60434: PPUSH
60435: CALL_OW 321
60439: PUSH
60440: LD_INT 2
60442: EQUAL
60443: IFFALSE 60453
// viewRange := 16 ;
60445: LD_ADDR_VAR 0 8
60449: PUSH
60450: LD_INT 16
60452: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60453: LD_VAR 0 1
60457: PPUSH
60458: LD_VAR 0 2
60462: PPUSH
60463: LD_VAR 0 3
60467: PPUSH
60468: CALL_OW 297
60472: PUSH
60473: LD_VAR 0 5
60477: GREATER
60478: IFFALSE 60557
// begin ComMoveXY ( unit , x , y ) ;
60480: LD_VAR 0 1
60484: PPUSH
60485: LD_VAR 0 2
60489: PPUSH
60490: LD_VAR 0 3
60494: PPUSH
60495: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60499: LD_INT 35
60501: PPUSH
60502: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60506: LD_VAR 0 1
60510: PPUSH
60511: LD_VAR 0 2
60515: PPUSH
60516: LD_VAR 0 3
60520: PPUSH
60521: CALL 48473 0 3
60525: NOT
60526: IFFALSE 60530
// exit ;
60528: GO 60866
// until GetDistUnitXY ( unit , x , y ) < dist ;
60530: LD_VAR 0 1
60534: PPUSH
60535: LD_VAR 0 2
60539: PPUSH
60540: LD_VAR 0 3
60544: PPUSH
60545: CALL_OW 297
60549: PUSH
60550: LD_VAR 0 5
60554: LESS
60555: IFFALSE 60499
// end ; ComTurnXY ( unit , x , y ) ;
60557: LD_VAR 0 1
60561: PPUSH
60562: LD_VAR 0 2
60566: PPUSH
60567: LD_VAR 0 3
60571: PPUSH
60572: CALL_OW 118
// repeat if Multiplayer then
60576: LD_OWVAR 4
60580: IFFALSE 60591
// wait ( 35 ) else
60582: LD_INT 35
60584: PPUSH
60585: CALL_OW 67
60589: GO 60598
// wait ( 5 ) ;
60591: LD_INT 5
60593: PPUSH
60594: CALL_OW 67
// _d := GetDir ( unit ) ;
60598: LD_ADDR_VAR 0 11
60602: PUSH
60603: LD_VAR 0 1
60607: PPUSH
60608: CALL_OW 254
60612: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60613: LD_ADDR_VAR 0 7
60617: PUSH
60618: LD_VAR 0 1
60622: PPUSH
60623: CALL_OW 250
60627: PPUSH
60628: LD_VAR 0 1
60632: PPUSH
60633: CALL_OW 251
60637: PPUSH
60638: LD_VAR 0 2
60642: PPUSH
60643: LD_VAR 0 3
60647: PPUSH
60648: CALL 51109 0 4
60652: ST_TO_ADDR
// until dir = _d ;
60653: LD_VAR 0 7
60657: PUSH
60658: LD_VAR 0 11
60662: EQUAL
60663: IFFALSE 60576
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60665: LD_ADDR_VAR 0 9
60669: PUSH
60670: LD_VAR 0 1
60674: PPUSH
60675: CALL_OW 250
60679: PPUSH
60680: LD_VAR 0 7
60684: PPUSH
60685: LD_VAR 0 5
60689: PPUSH
60690: CALL_OW 272
60694: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60695: LD_ADDR_VAR 0 10
60699: PUSH
60700: LD_VAR 0 1
60704: PPUSH
60705: CALL_OW 251
60709: PPUSH
60710: LD_VAR 0 7
60714: PPUSH
60715: LD_VAR 0 5
60719: PPUSH
60720: CALL_OW 273
60724: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60725: LD_VAR 0 9
60729: PPUSH
60730: LD_VAR 0 10
60734: PPUSH
60735: CALL_OW 488
60739: NOT
60740: IFFALSE 60744
// exit ;
60742: GO 60866
// ComAnimCustom ( unit , 1 ) ;
60744: LD_VAR 0 1
60748: PPUSH
60749: LD_INT 1
60751: PPUSH
60752: CALL_OW 592
// p := 0 ;
60756: LD_ADDR_VAR 0 12
60760: PUSH
60761: LD_INT 0
60763: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60764: LD_VAR 0 9
60768: PPUSH
60769: LD_VAR 0 10
60773: PPUSH
60774: LD_VAR 0 6
60778: PPUSH
60779: LD_VAR 0 8
60783: PPUSH
60784: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60788: LD_INT 35
60790: PPUSH
60791: CALL_OW 67
// p := Inc ( p ) ;
60795: LD_ADDR_VAR 0 12
60799: PUSH
60800: LD_VAR 0 12
60804: PPUSH
60805: CALL 51065 0 1
60809: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60810: LD_VAR 0 12
60814: PUSH
60815: LD_INT 3
60817: EQUAL
60818: IFTRUE 60832
60820: PUSH
60821: LD_VAR 0 1
60825: PPUSH
60826: CALL_OW 302
60830: NOT
60831: OR
60832: IFTRUE 60845
60834: PUSH
60835: LD_VAR 0 1
60839: PPUSH
60840: CALL_OW 301
60844: OR
60845: IFFALSE 60788
// RemoveSeeing ( _x , _y , side ) ;
60847: LD_VAR 0 9
60851: PPUSH
60852: LD_VAR 0 10
60856: PPUSH
60857: LD_VAR 0 6
60861: PPUSH
60862: CALL_OW 331
// end ;
60866: LD_VAR 0 4
60870: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
60871: LD_INT 0
60873: PPUSH
60874: PPUSH
60875: PPUSH
60876: PPUSH
60877: PPUSH
60878: PPUSH
60879: PPUSH
60880: PPUSH
60881: PPUSH
60882: PPUSH
60883: PPUSH
// if not unit then
60884: LD_VAR 0 1
60888: NOT
60889: IFFALSE 60893
// exit ;
60891: GO 61164
// side := GetSide ( unit ) ;
60893: LD_ADDR_VAR 0 3
60897: PUSH
60898: LD_VAR 0 1
60902: PPUSH
60903: CALL_OW 255
60907: ST_TO_ADDR
// x := GetX ( unit ) ;
60908: LD_ADDR_VAR 0 5
60912: PUSH
60913: LD_VAR 0 1
60917: PPUSH
60918: CALL_OW 250
60922: ST_TO_ADDR
// y := GetY ( unit ) ;
60923: LD_ADDR_VAR 0 6
60927: PUSH
60928: LD_VAR 0 1
60932: PPUSH
60933: CALL_OW 251
60937: ST_TO_ADDR
// r := 8 ;
60938: LD_ADDR_VAR 0 4
60942: PUSH
60943: LD_INT 8
60945: ST_TO_ADDR
// if x - r < 0 then
60946: LD_VAR 0 5
60950: PUSH
60951: LD_VAR 0 4
60955: MINUS
60956: PUSH
60957: LD_INT 0
60959: LESS
60960: IFFALSE 60972
// min_x := 0 else
60962: LD_ADDR_VAR 0 7
60966: PUSH
60967: LD_INT 0
60969: ST_TO_ADDR
60970: GO 60988
// min_x := x - r ;
60972: LD_ADDR_VAR 0 7
60976: PUSH
60977: LD_VAR 0 5
60981: PUSH
60982: LD_VAR 0 4
60986: MINUS
60987: ST_TO_ADDR
// if y - r < 0 then
60988: LD_VAR 0 6
60992: PUSH
60993: LD_VAR 0 4
60997: MINUS
60998: PUSH
60999: LD_INT 0
61001: LESS
61002: IFFALSE 61014
// min_y := 0 else
61004: LD_ADDR_VAR 0 8
61008: PUSH
61009: LD_INT 0
61011: ST_TO_ADDR
61012: GO 61030
// min_y := y - r ;
61014: LD_ADDR_VAR 0 8
61018: PUSH
61019: LD_VAR 0 6
61023: PUSH
61024: LD_VAR 0 4
61028: MINUS
61029: ST_TO_ADDR
// max_x := x + r ;
61030: LD_ADDR_VAR 0 9
61034: PUSH
61035: LD_VAR 0 5
61039: PUSH
61040: LD_VAR 0 4
61044: PLUS
61045: ST_TO_ADDR
// max_y := y + r ;
61046: LD_ADDR_VAR 0 10
61050: PUSH
61051: LD_VAR 0 6
61055: PUSH
61056: LD_VAR 0 4
61060: PLUS
61061: ST_TO_ADDR
// for _x = min_x to max_x do
61062: LD_ADDR_VAR 0 11
61066: PUSH
61067: DOUBLE
61068: LD_VAR 0 7
61072: DEC
61073: ST_TO_ADDR
61074: LD_VAR 0 9
61078: PUSH
61079: FOR_TO
61080: IFFALSE 61162
// for _y = min_y to max_y do
61082: LD_ADDR_VAR 0 12
61086: PUSH
61087: DOUBLE
61088: LD_VAR 0 8
61092: DEC
61093: ST_TO_ADDR
61094: LD_VAR 0 10
61098: PUSH
61099: FOR_TO
61100: IFFALSE 61158
// begin if not ValidHex ( _x , _y ) then
61102: LD_VAR 0 11
61106: PPUSH
61107: LD_VAR 0 12
61111: PPUSH
61112: CALL_OW 488
61116: NOT
61117: IFFALSE 61121
// continue ;
61119: GO 61099
// if MineAtPos ( _x , _y ) then
61121: LD_VAR 0 11
61125: PPUSH
61126: LD_VAR 0 12
61130: PPUSH
61131: CALL_OW 458
61135: IFFALSE 61156
// ViewMineAtPos ( _x , _y , side ) ;
61137: LD_VAR 0 11
61141: PPUSH
61142: LD_VAR 0 12
61146: PPUSH
61147: LD_VAR 0 3
61151: PPUSH
61152: CALL_OW 457
// end ;
61156: GO 61099
61158: POP
61159: POP
61160: GO 61079
61162: POP
61163: POP
// end ;
61164: LD_VAR 0 2
61168: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
61169: LD_INT 0
61171: PPUSH
61172: PPUSH
61173: PPUSH
61174: PPUSH
61175: PPUSH
61176: PPUSH
61177: PPUSH
// if not units then
61178: LD_VAR 0 1
61182: NOT
61183: IFFALSE 61187
// exit ;
61185: GO 61651
// scaners := [ ] ;
61187: LD_ADDR_VAR 0 6
61191: PUSH
61192: EMPTY
61193: ST_TO_ADDR
// for i in units do
61194: LD_ADDR_VAR 0 3
61198: PUSH
61199: LD_VAR 0 1
61203: PUSH
61204: FOR_IN
61205: IFFALSE 61362
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
61207: LD_VAR 0 3
61211: PPUSH
61212: CALL_OW 264
61216: PUSH
61217: LD_INT 11
61219: NONEQUAL
61220: IFTRUE 61234
61222: PUSH
61223: LD_VAR 0 3
61227: PPUSH
61228: CALL_OW 302
61232: NOT
61233: OR
61234: IFTRUE 61251
61236: PUSH
61237: LD_VAR 0 3
61241: PPUSH
61242: CALL_OW 110
61246: PUSH
61247: LD_INT 502
61249: EQUAL
61250: OR
61251: IFFALSE 61255
// continue ;
61253: GO 61204
// ComStop ( i ) ;
61255: LD_VAR 0 3
61259: PPUSH
61260: CALL_OW 141
// x := GetX ( i ) ;
61264: LD_ADDR_VAR 0 4
61268: PUSH
61269: LD_VAR 0 3
61273: PPUSH
61274: CALL_OW 250
61278: ST_TO_ADDR
// y := GetY ( i ) ;
61279: LD_ADDR_VAR 0 5
61283: PUSH
61284: LD_VAR 0 3
61288: PPUSH
61289: CALL_OW 251
61293: ST_TO_ADDR
// if GetSide ( i ) = your_side then
61294: LD_VAR 0 3
61298: PPUSH
61299: CALL_OW 255
61303: PUSH
61304: LD_OWVAR 2
61308: EQUAL
61309: IFFALSE 61328
// PlaySoundXY ( x , y , mineDetector ) ;
61311: LD_VAR 0 4
61315: PPUSH
61316: LD_VAR 0 5
61320: PPUSH
61321: LD_STRING mineDetector
61323: PPUSH
61324: CALL_OW 366
// scaners := Join ( scaners , i ) ;
61328: LD_ADDR_VAR 0 6
61332: PUSH
61333: LD_VAR 0 6
61337: PPUSH
61338: LD_VAR 0 3
61342: PPUSH
61343: CALL 49692 0 2
61347: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
61348: LD_VAR 0 3
61352: PPUSH
61353: LD_INT 502
61355: PPUSH
61356: CALL_OW 109
// end ;
61360: GO 61204
61362: POP
61363: POP
// if not scaners then
61364: LD_VAR 0 6
61368: NOT
61369: IFFALSE 61373
// exit ;
61371: GO 61651
// wait ( 3 ) ;
61373: LD_INT 3
61375: PPUSH
61376: CALL_OW 67
// timer := 6 ;
61380: LD_ADDR_VAR 0 7
61384: PUSH
61385: LD_INT 6
61387: ST_TO_ADDR
// repeat for i in scaners do
61388: LD_ADDR_VAR 0 3
61392: PUSH
61393: LD_VAR 0 6
61397: PUSH
61398: FOR_IN
61399: IFFALSE 61549
// begin side := GetSide ( i ) ;
61401: LD_ADDR_VAR 0 8
61405: PUSH
61406: LD_VAR 0 3
61410: PPUSH
61411: CALL_OW 255
61415: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
61416: LD_VAR 0 3
61420: PPUSH
61421: CALL_OW 302
61425: NOT
61426: IFTRUE 61439
61428: PUSH
61429: LD_VAR 0 3
61433: PPUSH
61434: CALL_OW 314
61438: OR
61439: IFTRUE 61470
61441: PUSH
61442: LD_VAR 0 3
61446: PPUSH
61447: CALL_OW 263
61451: PUSH
61452: LD_INT 1
61454: EQUAL
61455: IFFALSE 61469
61457: PUSH
61458: LD_VAR 0 3
61462: PPUSH
61463: CALL_OW 311
61467: NOT
61468: AND
61469: OR
61470: IFFALSE 61514
// begin SetUnitDisplayNumber ( i , 0 ) ;
61472: LD_VAR 0 3
61476: PPUSH
61477: LD_INT 0
61479: PPUSH
61480: CALL_OW 505
// SetTag ( i , 0 ) ;
61484: LD_VAR 0 3
61488: PPUSH
61489: LD_INT 0
61491: PPUSH
61492: CALL_OW 109
// scaners := scaners diff i ;
61496: LD_ADDR_VAR 0 6
61500: PUSH
61501: LD_VAR 0 6
61505: PUSH
61506: LD_VAR 0 3
61510: DIFF
61511: ST_TO_ADDR
// continue ;
61512: GO 61398
// end ; if side in [ your_side , 9 ] then
61514: LD_VAR 0 8
61518: PUSH
61519: LD_OWVAR 2
61523: PUSH
61524: LD_INT 9
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: IN
61531: IFFALSE 61547
// SetUnitDisplayNumber ( i , timer ) ;
61533: LD_VAR 0 3
61537: PPUSH
61538: LD_VAR 0 7
61542: PPUSH
61543: CALL_OW 505
// end ;
61547: GO 61398
61549: POP
61550: POP
// if not scaners then
61551: LD_VAR 0 6
61555: NOT
61556: IFFALSE 61560
// exit ;
61558: GO 61651
// timer := Dec ( timer ) ;
61560: LD_ADDR_VAR 0 7
61564: PUSH
61565: LD_VAR 0 7
61569: PPUSH
61570: CALL 51087 0 1
61574: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61575: LD_INT 35
61577: PPUSH
61578: CALL_OW 67
// until timer = 0 ;
61582: LD_VAR 0 7
61586: PUSH
61587: LD_INT 0
61589: EQUAL
61590: IFFALSE 61388
// if not scaners then
61592: LD_VAR 0 6
61596: NOT
61597: IFFALSE 61601
// exit ;
61599: GO 61651
// for i in scaners do
61601: LD_ADDR_VAR 0 3
61605: PUSH
61606: LD_VAR 0 6
61610: PUSH
61611: FOR_IN
61612: IFFALSE 61649
// begin SetUnitDisplayNumber ( i , 0 ) ;
61614: LD_VAR 0 3
61618: PPUSH
61619: LD_INT 0
61621: PPUSH
61622: CALL_OW 505
// SetTag ( i , 0 ) ;
61626: LD_VAR 0 3
61630: PPUSH
61631: LD_INT 0
61633: PPUSH
61634: CALL_OW 109
// RevealDetectorMine ( i ) ;
61638: LD_VAR 0 3
61642: PPUSH
61643: CALL 60871 0 1
// end ;
61647: GO 61611
61649: POP
61650: POP
// end ;
61651: LD_VAR 0 2
61655: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
61656: LD_INT 0
61658: PPUSH
// if p1 = mine_detector_mode then
61659: LD_VAR 0 2
61663: PUSH
61664: LD_INT 103
61666: EQUAL
61667: IFFALSE 61678
// DetectMine ( units ) ;
61669: LD_VAR 0 1
61673: PPUSH
61674: CALL 61169 0 1
// end ; end_of_file
61678: LD_VAR 0 7
61682: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
61683: LD_EXP 41
61687: IFFALSE 62028
61689: GO 61691
61691: DISABLE
61692: LD_INT 0
61694: PPUSH
61695: PPUSH
61696: PPUSH
// begin mpKingPoints := [ ] ;
61697: LD_ADDR_EXP 62
61701: PUSH
61702: EMPTY
61703: ST_TO_ADDR
// if mpTeamGame then
61704: LD_EXP 13
61708: IFFALSE 61762
// begin for i := 1 to Count ( mpTeams ) do
61710: LD_ADDR_VAR 0 1
61714: PUSH
61715: DOUBLE
61716: LD_INT 1
61718: DEC
61719: ST_TO_ADDR
61720: LD_EXP 12
61724: PPUSH
61725: CALL 13716 0 1
61729: PUSH
61730: FOR_TO
61731: IFFALSE 61758
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61733: LD_ADDR_EXP 62
61737: PUSH
61738: LD_EXP 62
61742: PPUSH
61743: LD_VAR 0 1
61747: PPUSH
61748: LD_INT 0
61750: PPUSH
61751: CALL_OW 1
61755: ST_TO_ADDR
61756: GO 61730
61758: POP
61759: POP
// end else
61760: GO 61805
// begin for i := 1 to 8 do
61762: LD_ADDR_VAR 0 1
61766: PUSH
61767: DOUBLE
61768: LD_INT 1
61770: DEC
61771: ST_TO_ADDR
61772: LD_INT 8
61774: PUSH
61775: FOR_TO
61776: IFFALSE 61803
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61778: LD_ADDR_EXP 62
61782: PUSH
61783: LD_EXP 62
61787: PPUSH
61788: LD_VAR 0 1
61792: PPUSH
61793: LD_INT 0
61795: PPUSH
61796: CALL_OW 1
61800: ST_TO_ADDR
61801: GO 61775
61803: POP
61804: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
61805: LD_ADDR_VAR 0 3
61809: PUSH
61810: LD_EXP 2
61814: PPUSH
61815: LD_INT 0
61817: PPUSH
61818: CALL_OW 517
61822: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61823: LD_ADDR_VAR 0 1
61827: PUSH
61828: DOUBLE
61829: LD_INT 1
61831: DEC
61832: ST_TO_ADDR
61833: LD_VAR 0 3
61837: PUSH
61838: LD_INT 1
61840: ARRAY
61841: PUSH
61842: FOR_TO
61843: IFFALSE 61910
// for j := 1 to 8 do
61845: LD_ADDR_VAR 0 2
61849: PUSH
61850: DOUBLE
61851: LD_INT 1
61853: DEC
61854: ST_TO_ADDR
61855: LD_INT 8
61857: PUSH
61858: FOR_TO
61859: IFFALSE 61906
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
61861: LD_VAR 0 3
61865: PUSH
61866: LD_INT 1
61868: ARRAY
61869: PUSH
61870: LD_VAR 0 1
61874: ARRAY
61875: PPUSH
61876: LD_VAR 0 3
61880: PUSH
61881: LD_INT 2
61883: ARRAY
61884: PUSH
61885: LD_VAR 0 1
61889: ARRAY
61890: PPUSH
61891: LD_VAR 0 2
61895: PPUSH
61896: LD_INT 12
61898: NEG
61899: PPUSH
61900: CALL_OW 330
61904: GO 61858
61906: POP
61907: POP
61908: GO 61842
61910: POP
61911: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
61912: LD_EXP 36
61916: PPUSH
61917: LD_INT 1
61919: PPUSH
61920: CALL_OW 424
// UpdateCounter ;
61924: CALL 62534 0 0
// repeat wait ( 0 0$1 ) ;
61928: LD_INT 35
61930: PPUSH
61931: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61935: LD_ADDR_VAR 0 3
61939: PUSH
61940: LD_EXP 36
61944: PPUSH
61945: LD_INT 3
61947: PUSH
61948: LD_INT 57
61950: PUSH
61951: EMPTY
61952: LIST
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 50
61960: PUSH
61961: EMPTY
61962: LIST
61963: PUSH
61964: LD_INT 2
61966: PUSH
61967: LD_INT 30
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 30
61979: PUSH
61980: LD_INT 1
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: LIST
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: LIST
61996: PPUSH
61997: CALL_OW 70
62001: ST_TO_ADDR
// if not tmp then
62002: LD_VAR 0 3
62006: NOT
62007: IFFALSE 62011
// continue ;
62009: GO 61928
// AddPoints ( tmp ) ;
62011: LD_VAR 0 3
62015: PPUSH
62016: CALL 62212 0 1
// UpdateCounter ;
62020: CALL 62534 0 0
// until false ;
62024: LD_INT 0
62026: IFFALSE 61928
// end ;
62028: PPOPN 3
62030: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
62031: LD_EXP 41
62035: IFFALSE 62043
62037: PUSH
62038: LD_EXP 39
62042: AND
62043: IFFALSE 62209
62045: GO 62047
62047: DISABLE
62048: LD_INT 0
62050: PPUSH
62051: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
62052: LD_ADDR_VAR 0 2
62056: PUSH
62057: LD_EXP 2
62061: PPUSH
62062: LD_INT 0
62064: PPUSH
62065: CALL_OW 517
62069: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
62070: LD_ADDR_VAR 0 1
62074: PUSH
62075: DOUBLE
62076: LD_INT 1
62078: DEC
62079: ST_TO_ADDR
62080: LD_VAR 0 2
62084: PUSH
62085: LD_INT 1
62087: ARRAY
62088: PUSH
62089: FOR_TO
62090: IFFALSE 62131
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
62092: LD_VAR 0 2
62096: PUSH
62097: LD_INT 1
62099: ARRAY
62100: PUSH
62101: LD_VAR 0 1
62105: ARRAY
62106: PPUSH
62107: LD_VAR 0 2
62111: PUSH
62112: LD_INT 2
62114: ARRAY
62115: PUSH
62116: LD_VAR 0 1
62120: ARRAY
62121: PPUSH
62122: LD_INT 125
62124: PPUSH
62125: CALL_OW 495
62129: GO 62089
62131: POP
62132: POP
// repeat wait ( mpEmissions ) ;
62133: LD_EXP 39
62137: PPUSH
62138: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
62142: LD_ADDR_VAR 0 1
62146: PUSH
62147: DOUBLE
62148: LD_INT 1
62150: DEC
62151: ST_TO_ADDR
62152: LD_VAR 0 2
62156: PUSH
62157: LD_INT 1
62159: ARRAY
62160: PUSH
62161: FOR_TO
62162: IFFALSE 62203
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
62164: LD_VAR 0 2
62168: PUSH
62169: LD_INT 1
62171: ARRAY
62172: PUSH
62173: LD_VAR 0 1
62177: ARRAY
62178: PPUSH
62179: LD_VAR 0 2
62183: PUSH
62184: LD_INT 2
62186: ARRAY
62187: PUSH
62188: LD_VAR 0 1
62192: ARRAY
62193: PPUSH
62194: LD_INT 15
62196: PPUSH
62197: CALL_OW 495
62201: GO 62161
62203: POP
62204: POP
// until false ;
62205: LD_INT 0
62207: IFFALSE 62133
// end ;
62209: PPOPN 2
62211: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
62212: LD_INT 0
62214: PPUSH
62215: PPUSH
62216: PPUSH
62217: PPUSH
62218: PPUSH
// if mpTeamGame then
62219: LD_EXP 13
62223: IFFALSE 62420
// begin first := depots [ 1 ] ;
62225: LD_ADDR_VAR 0 4
62229: PUSH
62230: LD_VAR 0 1
62234: PUSH
62235: LD_INT 1
62237: ARRAY
62238: ST_TO_ADDR
// side := GetSide ( first ) ;
62239: LD_ADDR_VAR 0 6
62243: PUSH
62244: LD_VAR 0 4
62248: PPUSH
62249: CALL_OW 255
62253: ST_TO_ADDR
// for i := 1 to mpTeams do
62254: LD_ADDR_VAR 0 3
62258: PUSH
62259: DOUBLE
62260: LD_INT 1
62262: DEC
62263: ST_TO_ADDR
62264: LD_EXP 12
62268: PUSH
62269: FOR_TO
62270: IFFALSE 62304
// if side in mpTeams [ i ] then
62272: LD_VAR 0 6
62276: PUSH
62277: LD_EXP 12
62281: PUSH
62282: LD_VAR 0 3
62286: ARRAY
62287: IN
62288: IFFALSE 62302
// begin team := i ;
62290: LD_ADDR_VAR 0 5
62294: PUSH
62295: LD_VAR 0 3
62299: ST_TO_ADDR
// break ;
62300: GO 62304
// end ;
62302: GO 62269
62304: POP
62305: POP
// if not team then
62306: LD_VAR 0 5
62310: NOT
62311: IFFALSE 62315
// exit ;
62313: GO 62529
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62315: LD_EXP 36
62319: PPUSH
62320: LD_INT 81
62322: PUSH
62323: LD_VAR 0 6
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PPUSH
62332: CALL_OW 70
62336: IFFALSE 62340
// exit ;
62338: GO 62529
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
62340: LD_ADDR_EXP 62
62344: PUSH
62345: LD_EXP 62
62349: PPUSH
62350: LD_VAR 0 5
62354: PPUSH
62355: LD_EXP 62
62359: PUSH
62360: LD_VAR 0 5
62364: ARRAY
62365: PUSH
62366: LD_INT 1
62368: PLUS
62369: PPUSH
62370: CALL_OW 1
62374: ST_TO_ADDR
// for i in mpTeams [ team ] do
62375: LD_ADDR_VAR 0 3
62379: PUSH
62380: LD_EXP 12
62384: PUSH
62385: LD_VAR 0 5
62389: ARRAY
62390: PUSH
62391: FOR_IN
62392: IFFALSE 62416
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
62394: LD_VAR 0 3
62398: PPUSH
62399: LD_EXP 62
62403: PUSH
62404: LD_VAR 0 5
62408: ARRAY
62409: PPUSH
62410: CALL_OW 506
62414: GO 62391
62416: POP
62417: POP
// end else
62418: GO 62529
// begin first := depots [ 1 ] ;
62420: LD_ADDR_VAR 0 4
62424: PUSH
62425: LD_VAR 0 1
62429: PUSH
62430: LD_INT 1
62432: ARRAY
62433: ST_TO_ADDR
// side := GetSide ( first ) ;
62434: LD_ADDR_VAR 0 6
62438: PUSH
62439: LD_VAR 0 4
62443: PPUSH
62444: CALL_OW 255
62448: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62449: LD_EXP 36
62453: PPUSH
62454: LD_INT 81
62456: PUSH
62457: LD_VAR 0 6
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PPUSH
62466: CALL_OW 70
62470: IFFALSE 62474
// exit ;
62472: GO 62529
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
62474: LD_ADDR_EXP 62
62478: PUSH
62479: LD_EXP 62
62483: PPUSH
62484: LD_VAR 0 6
62488: PPUSH
62489: LD_EXP 62
62493: PUSH
62494: LD_VAR 0 6
62498: ARRAY
62499: PUSH
62500: LD_INT 1
62502: PLUS
62503: PPUSH
62504: CALL_OW 1
62508: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
62509: LD_VAR 0 6
62513: PPUSH
62514: LD_EXP 62
62518: PUSH
62519: LD_VAR 0 6
62523: ARRAY
62524: PPUSH
62525: CALL_OW 506
// end ; end ;
62529: LD_VAR 0 2
62533: RET
// function UpdateCounter ; var i ; begin
62534: LD_INT 0
62536: PPUSH
62537: PPUSH
// result := [ ] ;
62538: LD_ADDR_VAR 0 1
62542: PUSH
62543: EMPTY
62544: ST_TO_ADDR
// if mpTeamGame then
62545: LD_EXP 13
62549: IFFALSE 62616
// begin for i := 1 to mpTeams do
62551: LD_ADDR_VAR 0 2
62555: PUSH
62556: DOUBLE
62557: LD_INT 1
62559: DEC
62560: ST_TO_ADDR
62561: LD_EXP 12
62565: PUSH
62566: FOR_TO
62567: IFFALSE 62612
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
62569: LD_ADDR_VAR 0 1
62573: PUSH
62574: LD_VAR 0 1
62578: PUSH
62579: LD_STRING #KingoftheHill-Team
62581: PUSH
62582: LD_VAR 0 2
62586: PUSH
62587: LD_EXP 62
62591: PUSH
62592: LD_VAR 0 2
62596: ARRAY
62597: PUSH
62598: LD_EXP 37
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: ADD
62609: ST_TO_ADDR
62610: GO 62566
62612: POP
62613: POP
// end else
62614: GO 62689
// begin for i := 1 to 8 do
62616: LD_ADDR_VAR 0 2
62620: PUSH
62621: DOUBLE
62622: LD_INT 1
62624: DEC
62625: ST_TO_ADDR
62626: LD_INT 8
62628: PUSH
62629: FOR_TO
62630: IFFALSE 62687
// if mpSidePositions [ i ] then
62632: LD_EXP 9
62636: PUSH
62637: LD_VAR 0 2
62641: ARRAY
62642: IFFALSE 62685
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
62644: LD_ADDR_VAR 0 1
62648: PUSH
62649: LD_VAR 0 1
62653: PUSH
62654: LD_STRING #KingoftheHill-Player
62656: PUSH
62657: LD_VAR 0 2
62661: PUSH
62662: LD_EXP 62
62666: PUSH
62667: LD_VAR 0 2
62671: ARRAY
62672: PUSH
62673: LD_EXP 37
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: ADD
62684: ST_TO_ADDR
62685: GO 62629
62687: POP
62688: POP
// end ; mpDisplayStrings := result ;
62689: LD_ADDR_EXP 40
62693: PUSH
62694: LD_VAR 0 1
62698: ST_TO_ADDR
// end ;
62699: LD_VAR 0 1
62703: RET
// export function HowMuchPointsKing ( side ) ; begin
62704: LD_INT 0
62706: PPUSH
// result := HowMuchPoints ( side ) ;
62707: LD_ADDR_VAR 0 2
62711: PUSH
62712: LD_VAR 0 1
62716: PPUSH
62717: CALL 62727 0 1
62721: ST_TO_ADDR
// end ;
62722: LD_VAR 0 2
62726: RET
// function HowMuchPoints ( side ) ; var i ; begin
62727: LD_INT 0
62729: PPUSH
62730: PPUSH
// if mpTeamGame then
62731: LD_EXP 13
62735: IFFALSE 62804
// begin for i := 1 to Count ( mpTeams ) do
62737: LD_ADDR_VAR 0 3
62741: PUSH
62742: DOUBLE
62743: LD_INT 1
62745: DEC
62746: ST_TO_ADDR
62747: LD_EXP 12
62751: PPUSH
62752: CALL 13716 0 1
62756: PUSH
62757: FOR_TO
62758: IFFALSE 62800
// begin if side in mpTeams [ i ] then
62760: LD_VAR 0 1
62764: PUSH
62765: LD_EXP 12
62769: PUSH
62770: LD_VAR 0 3
62774: ARRAY
62775: IN
62776: IFFALSE 62798
// begin result := mpKingPoints [ i ] ;
62778: LD_ADDR_VAR 0 2
62782: PUSH
62783: LD_EXP 62
62787: PUSH
62788: LD_VAR 0 3
62792: ARRAY
62793: ST_TO_ADDR
// exit ;
62794: POP
62795: POP
62796: GO 62820
// end ; end ;
62798: GO 62757
62800: POP
62801: POP
// end else
62802: GO 62820
// result := mpKingPoints [ side ] ;
62804: LD_ADDR_VAR 0 2
62808: PUSH
62809: LD_EXP 62
62813: PUSH
62814: LD_VAR 0 1
62818: ARRAY
62819: ST_TO_ADDR
// end ;
62820: LD_VAR 0 2
62824: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
62825: LD_EXP 41
62829: IFFALSE 62837
62831: PUSH
62832: CALL 63249 0 0
62836: AND
62837: IFFALSE 62845
62839: PUSH
62840: LD_OWVAR 4
62844: AND
62845: IFFALSE 63098
62847: GO 62849
62849: DISABLE
62850: LD_INT 0
62852: PPUSH
62853: PPUSH
// begin canWin := false ;
62854: LD_ADDR_VAR 0 2
62858: PUSH
62859: LD_INT 0
62861: ST_TO_ADDR
// if not HasPower ( your_side ) then
62862: LD_OWVAR 2
62866: PPUSH
62867: CALL 63291 0 1
62871: NOT
62872: IFFALSE 62883
// begin Multiplayer_Loose_Message ;
62874: CALL_OW 521
// enable ( mpLose ) ;
62878: LD_INT 102
62880: ENABLE_MARKED
// end else
62881: GO 63098
// begin if not EnemiesInGame then
62883: CALL 63101 0 0
62887: NOT
62888: IFFALSE 62895
// begin enable ( mpWin ) ;
62890: LD_INT 101
62892: ENABLE_MARKED
// exit ;
62893: GO 63098
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
62895: LD_ADDR_VAR 0 2
62899: PUSH
62900: LD_OWVAR 2
62904: PPUSH
62905: CALL 62727 0 1
62909: PUSH
62910: LD_EXP 37
62914: GREATEREQUAL
62915: IFFALSE 62928
62917: PUSH
62918: LD_OWVAR 2
62922: PPUSH
62923: CALL 63291 0 1
62927: AND
62928: ST_TO_ADDR
// for i := 1 to 8 do
62929: LD_ADDR_VAR 0 1
62933: PUSH
62934: DOUBLE
62935: LD_INT 1
62937: DEC
62938: ST_TO_ADDR
62939: LD_INT 8
62941: PUSH
62942: FOR_TO
62943: IFFALSE 63084
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62945: LD_EXP 9
62949: PUSH
62950: LD_VAR 0 1
62954: ARRAY
62955: IFFALSE 62968
62957: PUSH
62958: LD_VAR 0 1
62962: PPUSH
62963: CALL_OW 108
62967: AND
62968: IFFALSE 62982
62970: PUSH
62971: LD_VAR 0 1
62975: PUSH
62976: LD_OWVAR 2
62980: NONEQUAL
62981: AND
62982: IFFALSE 63082
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62984: LD_EXP 10
62988: PUSH
62989: LD_VAR 0 1
62993: ARRAY
62994: NOT
62995: IFTRUE 63043
62997: PUSH
62998: LD_EXP 10
63002: PUSH
63003: LD_VAR 0 1
63007: ARRAY
63008: PUSH
63009: LD_EXP 10
63013: PUSH
63014: LD_OWVAR 2
63018: ARRAY
63019: NONEQUAL
63020: IFFALSE 63042
63022: PUSH
63023: LD_OWVAR 2
63027: PPUSH
63028: LD_VAR 0 1
63032: PPUSH
63033: CALL_OW 81
63037: PUSH
63038: LD_INT 1
63040: NONEQUAL
63041: AND
63042: OR
63043: IFFALSE 63082
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
63045: LD_VAR 0 1
63049: PPUSH
63050: CALL 62727 0 1
63054: PUSH
63055: LD_EXP 37
63059: GREATEREQUAL
63060: IFFALSE 63073
63062: PUSH
63063: LD_VAR 0 1
63067: PPUSH
63068: CALL 63291 0 1
63072: AND
63073: IFFALSE 63082
// begin enable ( mpLose ) ;
63075: LD_INT 102
63077: ENABLE_MARKED
// exit ;
63078: POP
63079: POP
63080: GO 63098
// end ;
63082: GO 62942
63084: POP
63085: POP
// if canWin then
63086: LD_VAR 0 2
63090: IFFALSE 63097
// enable ( mpWin ) else
63092: LD_INT 101
63094: ENABLE_MARKED
63095: GO 63098
// enable ;
63097: ENABLE
// end ; end ;
63098: PPOPN 2
63100: END
// function EnemiesInGame ; var i ; begin
63101: LD_INT 0
63103: PPUSH
63104: PPUSH
// result := false ;
63105: LD_ADDR_VAR 0 1
63109: PUSH
63110: LD_INT 0
63112: ST_TO_ADDR
// for i := 1 to 8 do
63113: LD_ADDR_VAR 0 2
63117: PUSH
63118: DOUBLE
63119: LD_INT 1
63121: DEC
63122: ST_TO_ADDR
63123: LD_INT 8
63125: PUSH
63126: FOR_TO
63127: IFFALSE 63242
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
63129: LD_VAR 0 2
63133: PUSH
63134: LD_OWVAR 2
63138: NONEQUAL
63139: IFFALSE 63152
63141: PUSH
63142: LD_VAR 0 2
63146: PPUSH
63147: CALL 63291 0 1
63151: AND
63152: IFFALSE 63165
63154: PUSH
63155: LD_VAR 0 2
63159: PPUSH
63160: CALL_OW 108
63164: AND
63165: IFFALSE 63240
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
63167: LD_EXP 10
63171: PUSH
63172: LD_VAR 0 2
63176: ARRAY
63177: NOT
63178: IFTRUE 63226
63180: PUSH
63181: LD_EXP 10
63185: PUSH
63186: LD_VAR 0 2
63190: ARRAY
63191: PUSH
63192: LD_EXP 10
63196: PUSH
63197: LD_OWVAR 2
63201: ARRAY
63202: NONEQUAL
63203: IFFALSE 63225
63205: PUSH
63206: LD_OWVAR 2
63210: PPUSH
63211: LD_VAR 0 2
63215: PPUSH
63216: CALL_OW 81
63220: PUSH
63221: LD_INT 1
63223: NONEQUAL
63224: AND
63225: OR
63226: IFFALSE 63240
// begin result := true ;
63228: LD_ADDR_VAR 0 1
63232: PUSH
63233: LD_INT 1
63235: ST_TO_ADDR
// exit ;
63236: POP
63237: POP
63238: GO 63244
// end ;
63240: GO 63126
63242: POP
63243: POP
// end ;
63244: LD_VAR 0 1
63248: RET
// function CanWinLoose ; begin
63249: LD_INT 0
63251: PPUSH
// result := true ;
63252: LD_ADDR_VAR 0 1
63256: PUSH
63257: LD_INT 1
63259: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
63260: CALL_OW 531
63264: IFFALSE 63276
63266: PUSH
63267: CALL_OW 519
63271: PUSH
63272: LD_INT 1
63274: GREATER
63275: AND
63276: IFFALSE 63286
// result := false ;
63278: LD_ADDR_VAR 0 1
63282: PUSH
63283: LD_INT 0
63285: ST_TO_ADDR
// end ;
63286: LD_VAR 0 1
63290: RET
// function HasPower ( i ) ; begin
63291: LD_INT 0
63293: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
63294: LD_ADDR_VAR 0 2
63298: PUSH
63299: LD_INT 22
63301: PUSH
63302: LD_VAR 0 1
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 2
63313: PUSH
63314: LD_INT 21
63316: PUSH
63317: LD_INT 1
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 33
63326: PUSH
63327: LD_INT 3
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 33
63336: PUSH
63337: LD_INT 5
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PPUSH
63354: CALL_OW 69
63358: ST_TO_ADDR
// end ; end_of_file
63359: LD_VAR 0 2
63363: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63364: PPOPN 6
63366: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63367: LD_INT 0
63369: PPUSH
// begin if not units then
63370: LD_VAR 0 1
63374: NOT
63375: IFFALSE 63379
// exit ;
63377: GO 63413
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63379: LD_VAR 0 1
63383: PPUSH
63384: LD_VAR 0 2
63388: PPUSH
63389: LD_VAR 0 3
63393: PPUSH
63394: LD_VAR 0 4
63398: PPUSH
63399: LD_VAR 0 5
63403: PPUSH
63404: LD_VAR 0 6
63408: PPUSH
63409: CALL 61656 0 6
// end ;
63413: PPOPN 7
63415: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63416: LD_EXP 5
63420: PUSH
63421: LD_INT 4
63423: EQUAL
63424: IFFALSE 63460
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63426: LD_STRING setGameDifficulty(
63428: PUSH
63429: LD_OWVAR 67
63433: STR
63434: PUSH
63435: LD_STRING )
63437: STR
63438: PPUSH
63439: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63443: LD_STRING displayDifficulty(
63445: PUSH
63446: LD_OWVAR 67
63450: STR
63451: PUSH
63452: LD_STRING )
63454: STR
63455: PPUSH
63456: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63460: CALL 63489 0 0
// end ; end_of_file
63464: PPOPN 1
63466: END
// every 0 0$1 do
63467: GO 63469
63469: DISABLE
// begin enable ;
63470: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63471: LD_STRING updateTimer(
63473: PUSH
63474: LD_OWVAR 1
63478: STR
63479: PUSH
63480: LD_STRING );
63482: STR
63483: PPUSH
63484: CALL_OW 559
// end ;
63488: END
// export function SOS_MapStart ( ) ; begin
63489: LD_INT 0
63491: PPUSH
// UpdateFactoryWaypoints ( ) ;
63492: CALL 64423 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63496: CALL 64675 0 0
// ParseMultiDataToLua ( ) ;
63500: CALL 64822 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63504: LD_STRING setSpecLogoNumber(
63506: PUSH
63507: LD_INT 2
63509: STR
63510: PUSH
63511: LD_STRING ,
63513: STR
63514: PUSH
63515: LD_INT 1
63517: STR
63518: PUSH
63519: LD_STRING )
63521: STR
63522: PPUSH
63523: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63527: LD_STRING setSpecLogoNumber(
63529: PUSH
63530: LD_INT 3
63532: STR
63533: PUSH
63534: LD_STRING ,
63536: STR
63537: PUSH
63538: LD_INT 2
63540: STR
63541: PUSH
63542: LD_STRING )
63544: STR
63545: PPUSH
63546: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63550: LD_STRING setSpecLogoNumber(
63552: PUSH
63553: LD_INT 4
63555: STR
63556: PUSH
63557: LD_STRING ,
63559: STR
63560: PUSH
63561: LD_INT 3
63563: STR
63564: PUSH
63565: LD_STRING )
63567: STR
63568: PPUSH
63569: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63573: LD_STRING setSpecLogoNumber(
63575: PUSH
63576: LD_INT 5
63578: STR
63579: PUSH
63580: LD_STRING ,
63582: STR
63583: PUSH
63584: LD_INT 4
63586: STR
63587: PUSH
63588: LD_STRING )
63590: STR
63591: PPUSH
63592: CALL_OW 559
// end ;
63596: LD_VAR 0 1
63600: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63601: LD_INT 0
63603: PPUSH
63604: PPUSH
63605: PPUSH
63606: PPUSH
63607: PPUSH
63608: PPUSH
63609: PPUSH
63610: PPUSH
63611: PPUSH
// for i := 1 to 8 do
63612: LD_ADDR_VAR 0 2
63616: PUSH
63617: DOUBLE
63618: LD_INT 1
63620: DEC
63621: ST_TO_ADDR
63622: LD_INT 8
63624: PUSH
63625: FOR_TO
63626: IFFALSE 64011
// begin if mpSidePositions [ i ] then
63628: LD_EXP 9
63632: PUSH
63633: LD_VAR 0 2
63637: ARRAY
63638: IFFALSE 64009
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63640: LD_ADDR_VAR 0 7
63644: PUSH
63645: LD_INT 22
63647: PUSH
63648: LD_VAR 0 2
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 21
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PPUSH
63671: CALL_OW 69
63675: PPUSH
63676: CALL 13716 0 1
63680: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63681: LD_ADDR_VAR 0 9
63685: PUSH
63686: LD_INT 22
63688: PUSH
63689: LD_VAR 0 2
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 2
63700: PUSH
63701: LD_INT 30
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 30
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: LIST
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PPUSH
63730: CALL_OW 69
63734: ST_TO_ADDR
// crates := 0 ;
63735: LD_ADDR_VAR 0 4
63739: PUSH
63740: LD_INT 0
63742: ST_TO_ADDR
// oil := 0 ;
63743: LD_ADDR_VAR 0 5
63747: PUSH
63748: LD_INT 0
63750: ST_TO_ADDR
// sib := 0 ;
63751: LD_ADDR_VAR 0 6
63755: PUSH
63756: LD_INT 0
63758: ST_TO_ADDR
// if bases then
63759: LD_VAR 0 9
63763: IFFALSE 63869
// begin for j in bases do
63765: LD_ADDR_VAR 0 3
63769: PUSH
63770: LD_VAR 0 9
63774: PUSH
63775: FOR_IN
63776: IFFALSE 63867
// begin base := GetBase ( j ) ;
63778: LD_ADDR_VAR 0 8
63782: PUSH
63783: LD_VAR 0 3
63787: PPUSH
63788: CALL_OW 274
63792: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63793: LD_ADDR_VAR 0 4
63797: PUSH
63798: LD_VAR 0 4
63802: PUSH
63803: LD_VAR 0 8
63807: PPUSH
63808: LD_INT 1
63810: PPUSH
63811: CALL_OW 275
63815: PLUS
63816: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63817: LD_ADDR_VAR 0 5
63821: PUSH
63822: LD_VAR 0 5
63826: PUSH
63827: LD_VAR 0 8
63831: PPUSH
63832: LD_INT 2
63834: PPUSH
63835: CALL_OW 275
63839: PLUS
63840: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63841: LD_ADDR_VAR 0 6
63845: PUSH
63846: LD_VAR 0 6
63850: PUSH
63851: LD_VAR 0 8
63855: PPUSH
63856: LD_INT 3
63858: PPUSH
63859: CALL_OW 275
63863: PLUS
63864: ST_TO_ADDR
// end ;
63865: GO 63775
63867: POP
63868: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63869: LD_STRING setSpecText(
63871: PUSH
63872: LD_VAR 0 2
63876: STR
63877: PUSH
63878: LD_STRING ,
63880: STR
63881: PUSH
63882: LD_INT 2
63884: STR
63885: PUSH
63886: LD_STRING ,
63888: STR
63889: PUSH
63890: LD_VAR 0 4
63894: STR
63895: PUSH
63896: LD_STRING )
63898: STR
63899: PPUSH
63900: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63904: LD_STRING setSpecText(
63906: PUSH
63907: LD_VAR 0 2
63911: STR
63912: PUSH
63913: LD_STRING ,
63915: STR
63916: PUSH
63917: LD_INT 3
63919: STR
63920: PUSH
63921: LD_STRING ,
63923: STR
63924: PUSH
63925: LD_VAR 0 5
63929: STR
63930: PUSH
63931: LD_STRING )
63933: STR
63934: PPUSH
63935: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63939: LD_STRING setSpecText(
63941: PUSH
63942: LD_VAR 0 2
63946: STR
63947: PUSH
63948: LD_STRING ,
63950: STR
63951: PUSH
63952: LD_INT 4
63954: STR
63955: PUSH
63956: LD_STRING ,
63958: STR
63959: PUSH
63960: LD_VAR 0 6
63964: STR
63965: PUSH
63966: LD_STRING )
63968: STR
63969: PPUSH
63970: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63974: LD_STRING setSpecText(
63976: PUSH
63977: LD_VAR 0 2
63981: STR
63982: PUSH
63983: LD_STRING ,
63985: STR
63986: PUSH
63987: LD_INT 5
63989: STR
63990: PUSH
63991: LD_STRING ,
63993: STR
63994: PUSH
63995: LD_VAR 0 7
63999: STR
64000: PUSH
64001: LD_STRING )
64003: STR
64004: PPUSH
64005: CALL_OW 559
// end ; end ;
64009: GO 63625
64011: POP
64012: POP
// end ;
64013: LD_VAR 0 1
64017: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
64018: LD_INT 2
64020: PUSH
64021: LD_INT 30
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 30
64033: PUSH
64034: LD_INT 1
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: LIST
64045: PPUSH
64046: CALL_OW 69
64050: IFFALSE 64060
64052: GO 64054
64054: DISABLE
// begin enable ;
64055: ENABLE
// UpdateSpectatorBar ;
64056: CALL 63601 0 0
// end ;
64060: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64061: LD_INT 0
64063: PPUSH
// end ;
64064: LD_VAR 0 12
64068: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64069: LD_INT 0
64071: PPUSH
64072: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64073: LD_VAR 0 1
64077: NOT
64078: IFTRUE 64097
64080: PUSH
64081: LD_VAR 0 2
64085: PPUSH
64086: LD_VAR 0 3
64090: PPUSH
64091: CALL_OW 488
64095: NOT
64096: OR
64097: IFTRUE 64132
64099: PUSH
64100: LD_VAR 0 1
64104: PPUSH
64105: CALL_OW 266
64109: PUSH
64110: LD_INT 3
64112: NONEQUAL
64113: IFFALSE 64131
64115: PUSH
64116: LD_VAR 0 1
64120: PPUSH
64121: CALL_OW 247
64125: PUSH
64126: LD_INT 1
64128: EQUAL
64129: NOT
64130: AND
64131: OR
64132: IFFALSE 64136
// exit ;
64134: GO 64418
// if GetType ( factory ) = unit_human then
64136: LD_VAR 0 1
64140: PPUSH
64141: CALL_OW 247
64145: PUSH
64146: LD_INT 1
64148: EQUAL
64149: IFFALSE 64166
// factory := IsInUnit ( factory ) ;
64151: LD_ADDR_VAR 0 1
64155: PUSH
64156: LD_VAR 0 1
64160: PPUSH
64161: CALL_OW 310
64165: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64166: LD_VAR 0 1
64170: PPUSH
64171: CALL_OW 266
64175: PUSH
64176: LD_INT 3
64178: NONEQUAL
64179: IFFALSE 64183
// exit ;
64181: GO 64418
// for i := 1 to Count ( factoryWaypoints ) do
64183: LD_ADDR_VAR 0 5
64187: PUSH
64188: DOUBLE
64189: LD_INT 1
64191: DEC
64192: ST_TO_ADDR
64193: LD_EXP 63
64197: PPUSH
64198: CALL 13716 0 1
64202: PUSH
64203: FOR_TO
64204: IFFALSE 64366
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64206: LD_VAR 0 2
64210: PPUSH
64211: LD_VAR 0 3
64215: PPUSH
64216: CALL_OW 428
64220: PUSH
64221: LD_EXP 63
64225: PUSH
64226: LD_VAR 0 5
64230: ARRAY
64231: PUSH
64232: LD_INT 2
64234: ARRAY
64235: EQUAL
64236: IFFALSE 64268
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64238: LD_ADDR_EXP 63
64242: PUSH
64243: LD_EXP 63
64247: PPUSH
64248: LD_VAR 0 5
64252: PPUSH
64253: CALL_OW 3
64257: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64258: CALL 64423 0 0
// exit ;
64262: POP
64263: POP
64264: GO 64418
// end else
64266: GO 64364
// if factory = factoryWaypoints [ i ] [ 2 ] then
64268: LD_VAR 0 1
64272: PUSH
64273: LD_EXP 63
64277: PUSH
64278: LD_VAR 0 5
64282: ARRAY
64283: PUSH
64284: LD_INT 2
64286: ARRAY
64287: EQUAL
64288: IFFALSE 64364
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64290: LD_ADDR_EXP 63
64294: PUSH
64295: LD_EXP 63
64299: PPUSH
64300: LD_VAR 0 5
64304: PPUSH
64305: CALL_OW 3
64309: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64310: LD_ADDR_EXP 63
64314: PUSH
64315: LD_EXP 63
64319: PPUSH
64320: LD_VAR 0 1
64324: PPUSH
64325: CALL_OW 255
64329: PUSH
64330: LD_VAR 0 1
64334: PUSH
64335: LD_VAR 0 2
64339: PUSH
64340: LD_VAR 0 3
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: PPUSH
64351: CALL 49692 0 2
64355: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64356: CALL 64423 0 0
// exit ;
64360: POP
64361: POP
64362: GO 64418
// end ; end ;
64364: GO 64203
64366: POP
64367: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64368: LD_ADDR_EXP 63
64372: PUSH
64373: LD_EXP 63
64377: PPUSH
64378: LD_VAR 0 1
64382: PPUSH
64383: CALL_OW 255
64387: PUSH
64388: LD_VAR 0 1
64392: PUSH
64393: LD_VAR 0 2
64397: PUSH
64398: LD_VAR 0 3
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: PPUSH
64409: CALL 49692 0 2
64413: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64414: CALL 64423 0 0
// end ;
64418: LD_VAR 0 4
64422: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64423: LD_INT 0
64425: PPUSH
64426: PPUSH
64427: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64428: LD_STRING resetFactoryWaypoint();
64430: PPUSH
64431: CALL_OW 559
// if factoryWaypoints then
64435: LD_EXP 63
64439: IFFALSE 64560
// begin list := factoryWaypoints ;
64441: LD_ADDR_VAR 0 3
64445: PUSH
64446: LD_EXP 63
64450: ST_TO_ADDR
// for i := 1 to list do
64451: LD_ADDR_VAR 0 2
64455: PUSH
64456: DOUBLE
64457: LD_INT 1
64459: DEC
64460: ST_TO_ADDR
64461: LD_VAR 0 3
64465: PUSH
64466: FOR_TO
64467: IFFALSE 64558
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64469: LD_STRING setFactoryWaypointXY(
64471: PUSH
64472: LD_VAR 0 3
64476: PUSH
64477: LD_VAR 0 2
64481: ARRAY
64482: PUSH
64483: LD_INT 1
64485: ARRAY
64486: STR
64487: PUSH
64488: LD_STRING ,
64490: STR
64491: PUSH
64492: LD_VAR 0 3
64496: PUSH
64497: LD_VAR 0 2
64501: ARRAY
64502: PUSH
64503: LD_INT 2
64505: ARRAY
64506: STR
64507: PUSH
64508: LD_STRING ,
64510: STR
64511: PUSH
64512: LD_VAR 0 3
64516: PUSH
64517: LD_VAR 0 2
64521: ARRAY
64522: PUSH
64523: LD_INT 3
64525: ARRAY
64526: STR
64527: PUSH
64528: LD_STRING ,
64530: STR
64531: PUSH
64532: LD_VAR 0 3
64536: PUSH
64537: LD_VAR 0 2
64541: ARRAY
64542: PUSH
64543: LD_INT 4
64545: ARRAY
64546: STR
64547: PUSH
64548: LD_STRING )
64550: STR
64551: PPUSH
64552: CALL_OW 559
64556: GO 64466
64558: POP
64559: POP
// end ; end ;
64560: LD_VAR 0 1
64564: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64565: LD_INT 0
64567: PPUSH
// if HexInfo ( x , y ) = warehouse then
64568: LD_VAR 0 2
64572: PPUSH
64573: LD_VAR 0 3
64577: PPUSH
64578: CALL_OW 428
64582: PUSH
64583: LD_VAR 0 1
64587: EQUAL
64588: IFFALSE 64615
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64590: LD_ADDR_EXP 65
64594: PUSH
64595: LD_EXP 65
64599: PPUSH
64600: LD_VAR 0 1
64604: PPUSH
64605: LD_INT 0
64607: PPUSH
64608: CALL_OW 1
64612: ST_TO_ADDR
64613: GO 64666
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64615: LD_ADDR_EXP 65
64619: PUSH
64620: LD_EXP 65
64624: PPUSH
64625: LD_VAR 0 1
64629: PPUSH
64630: LD_VAR 0 1
64634: PPUSH
64635: CALL_OW 255
64639: PUSH
64640: LD_VAR 0 1
64644: PUSH
64645: LD_VAR 0 2
64649: PUSH
64650: LD_VAR 0 3
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: PPUSH
64661: CALL_OW 1
64665: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64666: CALL 64675 0 0
// end ;
64670: LD_VAR 0 4
64674: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64675: LD_INT 0
64677: PPUSH
64678: PPUSH
64679: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64680: LD_STRING resetWarehouseGatheringPoints();
64682: PPUSH
64683: CALL_OW 559
// if warehouseGatheringPoints then
64687: LD_EXP 65
64691: IFFALSE 64817
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64693: LD_ADDR_VAR 0 3
64697: PUSH
64698: LD_EXP 65
64702: PPUSH
64703: CALL 53626 0 1
64707: ST_TO_ADDR
// for i := 1 to list do
64708: LD_ADDR_VAR 0 2
64712: PUSH
64713: DOUBLE
64714: LD_INT 1
64716: DEC
64717: ST_TO_ADDR
64718: LD_VAR 0 3
64722: PUSH
64723: FOR_TO
64724: IFFALSE 64815
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64726: LD_STRING setWarehouseGatheringPointXY(
64728: PUSH
64729: LD_VAR 0 3
64733: PUSH
64734: LD_VAR 0 2
64738: ARRAY
64739: PUSH
64740: LD_INT 1
64742: ARRAY
64743: STR
64744: PUSH
64745: LD_STRING ,
64747: STR
64748: PUSH
64749: LD_VAR 0 3
64753: PUSH
64754: LD_VAR 0 2
64758: ARRAY
64759: PUSH
64760: LD_INT 2
64762: ARRAY
64763: STR
64764: PUSH
64765: LD_STRING ,
64767: STR
64768: PUSH
64769: LD_VAR 0 3
64773: PUSH
64774: LD_VAR 0 2
64778: ARRAY
64779: PUSH
64780: LD_INT 3
64782: ARRAY
64783: STR
64784: PUSH
64785: LD_STRING ,
64787: STR
64788: PUSH
64789: LD_VAR 0 3
64793: PUSH
64794: LD_VAR 0 2
64798: ARRAY
64799: PUSH
64800: LD_INT 4
64802: ARRAY
64803: STR
64804: PUSH
64805: LD_STRING )
64807: STR
64808: PPUSH
64809: CALL_OW 559
64813: GO 64723
64815: POP
64816: POP
// end ; end ;
64817: LD_VAR 0 1
64821: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64822: LD_INT 0
64824: PPUSH
64825: PPUSH
// if not mpSidePositions then
64826: LD_EXP 9
64830: NOT
64831: IFFALSE 64835
// exit ;
64833: GO 64906
// result :=  ;
64835: LD_ADDR_VAR 0 1
64839: PUSH
64840: LD_STRING 
64842: ST_TO_ADDR
// for i := 1 to 8 do
64843: LD_ADDR_VAR 0 2
64847: PUSH
64848: DOUBLE
64849: LD_INT 1
64851: DEC
64852: ST_TO_ADDR
64853: LD_INT 8
64855: PUSH
64856: FOR_TO
64857: IFFALSE 64887
// begin result := result & mpSidePositions [ i ] & ; ;
64859: LD_ADDR_VAR 0 1
64863: PUSH
64864: LD_VAR 0 1
64868: PUSH
64869: LD_EXP 9
64873: PUSH
64874: LD_VAR 0 2
64878: ARRAY
64879: STR
64880: PUSH
64881: LD_STRING ;
64883: STR
64884: ST_TO_ADDR
// end ;
64885: GO 64856
64887: POP
64888: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64889: LD_STRING setMultiplayerRealPosition("
64891: PUSH
64892: LD_VAR 0 1
64896: STR
64897: PUSH
64898: LD_STRING ");
64900: STR
64901: PPUSH
64902: CALL_OW 559
// end ; end_of_file
64906: LD_VAR 0 1
64910: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalH do var i ;
64911: LD_EXP 41
64915: IFFALSE 64958
64917: GO 64919
64919: DISABLE
64920: LD_INT 0
64922: PPUSH
// begin for i := 1 to 8 do
64923: LD_ADDR_VAR 0 1
64927: PUSH
64928: DOUBLE
64929: LD_INT 1
64931: DEC
64932: ST_TO_ADDR
64933: LD_INT 8
64935: PUSH
64936: FOR_TO
64937: IFFALSE 64956
// SetRestrict ( b_depot , i , state_disabled ) ;
64939: LD_INT 0
64941: PPUSH
64942: LD_VAR 0 1
64946: PPUSH
64947: LD_INT 0
64949: PPUSH
64950: CALL_OW 324
64954: GO 64936
64956: POP
64957: POP
// end ;
64958: PPOPN 1
64960: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalH do var i , canWin ;
64961: LD_EXP 41
64965: IFFALSE 64973
64967: PUSH
64968: CALL 65183 0 0
64972: AND
64973: IFFALSE 64981
64975: PUSH
64976: LD_OWVAR 4
64980: AND
64981: IFFALSE 65180
64983: GO 64985
64985: DISABLE
64986: LD_INT 0
64988: PPUSH
64989: PPUSH
// begin canWin := false ;
64990: LD_ADDR_VAR 0 2
64994: PUSH
64995: LD_INT 0
64997: ST_TO_ADDR
// if not HasPower ( your_side ) then
64998: LD_OWVAR 2
65002: PPUSH
65003: CALL 65225 0 1
65007: NOT
65008: IFFALSE 65019
// begin Multiplayer_Loose_Message ;
65010: CALL_OW 521
// enable ( mpLose ) ;
65014: LD_INT 102
65016: ENABLE_MARKED
// end else
65017: GO 65180
// begin canWin := true ;
65019: LD_ADDR_VAR 0 2
65023: PUSH
65024: LD_INT 1
65026: ST_TO_ADDR
// for i := 1 to 8 do
65027: LD_ADDR_VAR 0 1
65031: PUSH
65032: DOUBLE
65033: LD_INT 1
65035: DEC
65036: ST_TO_ADDR
65037: LD_INT 8
65039: PUSH
65040: FOR_TO
65041: IFFALSE 65166
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
65043: LD_EXP 9
65047: PUSH
65048: LD_VAR 0 1
65052: ARRAY
65053: IFFALSE 65066
65055: PUSH
65056: LD_VAR 0 1
65060: PPUSH
65061: CALL_OW 108
65065: AND
65066: IFFALSE 65080
65068: PUSH
65069: LD_VAR 0 1
65073: PUSH
65074: LD_OWVAR 2
65078: NONEQUAL
65079: AND
65080: IFFALSE 65164
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65082: LD_EXP 10
65086: PUSH
65087: LD_VAR 0 1
65091: ARRAY
65092: NOT
65093: IFTRUE 65141
65095: PUSH
65096: LD_EXP 10
65100: PUSH
65101: LD_VAR 0 1
65105: ARRAY
65106: PUSH
65107: LD_EXP 10
65111: PUSH
65112: LD_OWVAR 2
65116: ARRAY
65117: NONEQUAL
65118: IFFALSE 65140
65120: PUSH
65121: LD_OWVAR 2
65125: PPUSH
65126: LD_VAR 0 1
65130: PPUSH
65131: CALL_OW 81
65135: PUSH
65136: LD_INT 1
65138: NONEQUAL
65139: AND
65140: OR
65141: IFFALSE 65164
// if HasPower ( i ) then
65143: LD_VAR 0 1
65147: PPUSH
65148: CALL 65225 0 1
65152: IFFALSE 65164
// begin canWin := false ;
65154: LD_ADDR_VAR 0 2
65158: PUSH
65159: LD_INT 0
65161: ST_TO_ADDR
// break ;
65162: GO 65166
// end ;
65164: GO 65040
65166: POP
65167: POP
// if canWin then
65168: LD_VAR 0 2
65172: IFFALSE 65179
// enable ( mpWin ) else
65174: LD_INT 101
65176: ENABLE_MARKED
65177: GO 65180
// enable ;
65179: ENABLE
// end ; end ;
65180: PPOPN 2
65182: END
// function CanWinLoose ; begin
65183: LD_INT 0
65185: PPUSH
// result := true ;
65186: LD_ADDR_VAR 0 1
65190: PUSH
65191: LD_INT 1
65193: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65194: CALL_OW 531
65198: IFFALSE 65210
65200: PUSH
65201: CALL_OW 519
65205: PUSH
65206: LD_INT 1
65208: GREATER
65209: AND
65210: IFFALSE 65220
// result := false ;
65212: LD_ADDR_VAR 0 1
65216: PUSH
65217: LD_INT 0
65219: ST_TO_ADDR
// end ;
65220: LD_VAR 0 1
65224: RET
// function HasPower ( i ) ; begin
65225: LD_INT 0
65227: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
65228: LD_INT 22
65230: PUSH
65231: LD_VAR 0 1
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 2
65242: PUSH
65243: LD_INT 30
65245: PUSH
65246: LD_INT 0
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 30
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: LIST
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PPUSH
65272: CALL_OW 69
65276: NOT
65277: IFFALSE 65281
// exit ;
65279: GO 65346
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65281: LD_ADDR_VAR 0 2
65285: PUSH
65286: LD_INT 22
65288: PUSH
65289: LD_VAR 0 1
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 2
65300: PUSH
65301: LD_INT 21
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 33
65313: PUSH
65314: LD_INT 3
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 33
65323: PUSH
65324: LD_INT 5
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PPUSH
65341: CALL_OW 69
65345: ST_TO_ADDR
// end ;
65346: LD_VAR 0 2
65350: RET
