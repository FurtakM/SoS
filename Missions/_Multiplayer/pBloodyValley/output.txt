// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2880 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3256 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 6
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 7
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: LD_INT 2
 467: PUSH
 468: LD_INT 4
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 6300
 482: PUSH
 483: LD_INT 10500
 485: PUSH
 486: LD_INT 16800
 488: PUSH
 489: LD_INT 21000
 491: PUSH
 492: LD_INT 25200
 494: PUSH
 495: LD_INT 31500
 497: PUSH
 498: LD_INT 42000
 500: PUSH
 501: LD_INT 63000
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 4 , 3 3$0 ] ;
 538: LD_ADDR_EXP 8
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 15
 548: PUSH
 549: LD_INT 4
 551: PUSH
 552: LD_INT 100
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 250
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 10500
 583: PUSH
 584: LD_INT 1
 586: PUSH
 587: LD_INT 700
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 700
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 31500
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 4
 613: PUSH
 614: LD_INT 6300
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// your_side := 1 ;
 648: LD_ADDR_OWVAR 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 656: LD_ADDR_EXP 9
 660: PUSH
 661: LD_INT 1
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 0
 675: PUSH
 676: LD_INT 0
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 695: LD_ADDR_EXP 10
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 1
 705: PUSH
 706: LD_INT 2
 708: PUSH
 709: LD_INT 2
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: LD_INT 0
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// mpSideNations := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 734: LD_ADDR_EXP 11
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 1
 744: PUSH
 745: LD_INT 2
 747: PUSH
 748: LD_INT 2
 750: PUSH
 751: LD_INT 0
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 773: LD_ADDR_EXP 12
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 2
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 3
 790: PUSH
 791: LD_INT 4
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: ST_TO_ADDR
// mpTeamGame := true ;
 802: LD_ADDR_EXP 13
 806: PUSH
 807: LD_INT 1
 809: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 810: LD_ADDR_EXP 31
 814: PUSH
 815: LD_INT 100
 817: PUSH
 818: LD_INT 120
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: ST_TO_ADDR
// end ;
 825: LD_VAR 0 1
 829: RET
// export kingArea , kingCamArea , mpTree ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
 838: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
 839: LD_ADDR_EXP 21
 843: PUSH
 844: LD_INT 2
 846: PUSH
 847: LD_INT 3
 849: PUSH
 850: LD_INT 5
 852: PUSH
 853: LD_INT 4
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 20
 866: PUSH
 867: EMPTY
 868: PUSH
 869: LD_EXP 21
 873: UNION
 874: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 875: LD_VAR 0 1
 879: PUSH
 880: LD_INT 2
 882: EQUAL
 883: IFFALSE 895
// baseLevel := 1 else
 885: LD_ADDR_VAR 0 7
 889: PUSH
 890: LD_INT 1
 892: ST_TO_ADDR
 893: GO 909
// baseLevel := mpGameSettings [ 1 ] ;
 895: LD_ADDR_VAR 0 7
 899: PUSH
 900: LD_EXP 8
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 909: LD_ADDR_EXP 26
 913: PUSH
 914: LD_EXP 8
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 923: LD_ADDR_EXP 27
 927: PUSH
 928: LD_EXP 8
 932: PUSH
 933: LD_INT 3
 935: ARRAY
 936: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 937: LD_ADDR_EXP 17
 941: PUSH
 942: LD_EXP 8
 946: PUSH
 947: LD_INT 4
 949: ARRAY
 950: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 951: LD_ADDR_EXP 29
 955: PUSH
 956: LD_EXP 8
 960: PUSH
 961: LD_INT 5
 963: ARRAY
 964: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 965: LD_ADDR_VAR 0 5
 969: PUSH
 970: LD_EXP 8
 974: PUSH
 975: LD_INT 6
 977: ARRAY
 978: PUSH
 979: LD_INT 0
 981: GREATER
 982: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 983: LD_ADDR_VAR 0 6
 987: PUSH
 988: LD_EXP 8
 992: PUSH
 993: LD_INT 7
 995: ARRAY
 996: PUSH
 997: LD_INT 0
 999: GREATER
1000: ST_TO_ADDR
// mpKingArea := 0 ;
1001: LD_ADDR_EXP 36
1005: PUSH
1006: LD_INT 0
1008: ST_TO_ADDR
// mpPoints := 0 ;
1009: LD_ADDR_EXP 37
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpEmissions := 0 ;
1017: LD_ADDR_EXP 39
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// kingArea := 0 ;
1025: LD_ADDR_EXP 1
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// kingCamArea := 0 ;
1033: LD_ADDR_EXP 2
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1041: LD_EXP 8
1045: PUSH
1046: LD_INT 9
1048: ARRAY
1049: IFFALSE 1181
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1051: LD_ADDR_EXP 38
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 2
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 3
1085: PUSH
1086: EMPTY
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 12
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 24
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 12
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 23
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 21
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 42
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 21
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 42
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1181: LD_ADDR_EXP 18
1185: PUSH
1186: LD_EXP 8
1190: PUSH
1191: LD_INT 11
1193: ARRAY
1194: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1195: LD_ADDR_EXP 24
1199: PUSH
1200: LD_EXP 8
1204: PUSH
1205: LD_INT 12
1207: ARRAY
1208: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1209: LD_ADDR_EXP 28
1213: PUSH
1214: LD_EXP 8
1218: PUSH
1219: LD_INT 13
1221: ARRAY
1222: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1223: LD_ADDR_EXP 35
1227: PUSH
1228: LD_EXP 8
1232: PUSH
1233: LD_INT 14
1235: ARRAY
1236: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1237: LD_ADDR_EXP 32
1241: PUSH
1242: LD_EXP 8
1246: PUSH
1247: LD_INT 15
1249: ARRAY
1250: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1251: LD_ADDR_EXP 30
1255: PUSH
1256: LD_EXP 8
1260: PUSH
1261: LD_INT 18
1263: ARRAY
1264: ST_TO_ADDR
// mpTree := mpGameSettings [ 20 ] ;
1265: LD_ADDR_EXP 3
1269: PUSH
1270: LD_EXP 8
1274: PUSH
1275: LD_INT 20
1277: ARRAY
1278: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1279: LD_ADDR_EXP 22
1283: PUSH
1284: LD_EXP 8
1288: PUSH
1289: LD_INT 21
1291: ARRAY
1292: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 ] ;
1293: LD_ADDR_EXP 33
1297: PUSH
1298: LD_INT 7
1300: PUSH
1301: LD_INT 9
1303: PUSH
1304: LD_INT 8
1306: PUSH
1307: LD_INT 10
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 2 ) , GetBuildingFromArea ( DepotArea2 , 0 ) , GetBuildingFromArea ( DepotArea3 , 3 ) , GetBuildingFromArea ( DepotArea4 , 5 ) ] ;
1316: LD_ADDR_VAR 0 8
1320: PUSH
1321: LD_INT 11
1323: PPUSH
1324: LD_INT 2
1326: PPUSH
1327: CALL 53053 0 2
1331: PUSH
1332: LD_INT 12
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL 53053 0 2
1342: PUSH
1343: LD_INT 13
1345: PPUSH
1346: LD_INT 3
1348: PPUSH
1349: CALL 53053 0 2
1353: PUSH
1354: LD_INT 14
1356: PPUSH
1357: LD_INT 5
1359: PPUSH
1360: CALL 53053 0 2
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1371: LD_ADDR_VAR 0 3
1375: PUSH
1376: DOUBLE
1377: LD_INT 1
1379: DEC
1380: ST_TO_ADDR
1381: LD_VAR 0 8
1385: PPUSH
1386: CALL 12402 0 1
1390: PUSH
1391: FOR_TO
1392: IFFALSE 1496
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1394: LD_ADDR_EXP 23
1398: PUSH
1399: LD_EXP 23
1403: PPUSH
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_VAR 0 8
1413: PUSH
1414: LD_VAR 0 3
1418: ARRAY
1419: PUSH
1420: LD_INT 1
1422: ARRAY
1423: PPUSH
1424: LD_VAR 0 8
1428: PUSH
1429: LD_VAR 0 3
1433: ARRAY
1434: PUSH
1435: LD_INT 3
1437: ARRAY
1438: PPUSH
1439: LD_INT 10
1441: PPUSH
1442: CALL_OW 272
1446: PUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_VAR 0 3
1456: ARRAY
1457: PUSH
1458: LD_INT 2
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 3
1475: ARRAY
1476: PPUSH
1477: LD_INT 10
1479: PPUSH
1480: CALL_OW 273
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PPUSH
1489: CALL_OW 1
1493: ST_TO_ADDR
1494: GO 1391
1496: POP
1497: POP
// if hasOil then
1498: LD_VAR 0 5
1502: IFFALSE 1585
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1504: LD_ADDR_VAR 0 4
1508: PUSH
1509: LD_EXP 8
1513: PUSH
1514: LD_INT 6
1516: ARRAY
1517: PUSH
1518: LD_INT 2
1520: EQUAL
1521: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) ] ;
1522: LD_ADDR_EXP 14
1526: PUSH
1527: LD_INT 15
1529: PPUSH
1530: LD_VAR 0 4
1534: PPUSH
1535: CALL 52886 0 2
1539: PUSH
1540: LD_INT 17
1542: PPUSH
1543: LD_VAR 0 4
1547: PPUSH
1548: CALL 52886 0 2
1552: PUSH
1553: LD_INT 19
1555: PPUSH
1556: LD_VAR 0 4
1560: PPUSH
1561: CALL 52886 0 2
1565: PUSH
1566: LD_INT 21
1568: PPUSH
1569: LD_VAR 0 4
1573: PPUSH
1574: CALL 52886 0 2
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: ST_TO_ADDR
// end ; if hasSib then
1585: LD_VAR 0 6
1589: IFFALSE 1672
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1591: LD_ADDR_VAR 0 4
1595: PUSH
1596: LD_EXP 8
1600: PUSH
1601: LD_INT 7
1603: ARRAY
1604: PUSH
1605: LD_INT 2
1607: EQUAL
1608: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) ] ;
1609: LD_ADDR_EXP 15
1613: PUSH
1614: LD_INT 16
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 52886 0 2
1626: PUSH
1627: LD_INT 18
1629: PPUSH
1630: LD_VAR 0 4
1634: PPUSH
1635: CALL 52886 0 2
1639: PUSH
1640: LD_INT 20
1642: PPUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: CALL 52886 0 2
1652: PUSH
1653: LD_INT 22
1655: PPUSH
1656: LD_VAR 0 4
1660: PPUSH
1661: CALL 52886 0 2
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1672: LD_VAR 0 7
1676: PUSH
1677: LD_INT 1
1679: GREATEREQUAL
1680: IFFALSE 1692
// mpDepots := startPos ;
1682: LD_ADDR_EXP 16
1686: PUSH
1687: LD_VAR 0 8
1691: ST_TO_ADDR
// if baseLevel >= 2 then
1692: LD_VAR 0 7
1696: PUSH
1697: LD_INT 2
1699: GREATEREQUAL
1700: IFFALSE 1913
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( BunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( BunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( ArmArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( BunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea2 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea3a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( ArmArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( BunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea4 , 2 ) ] ] ;
1702: LD_ADDR_EXP 19
1706: PUSH
1707: LD_INT 31
1709: PUSH
1710: LD_INT 23
1712: PPUSH
1713: LD_INT 5
1715: PPUSH
1716: CALL 53053 0 2
1720: ADD
1721: PUSH
1722: LD_INT 31
1724: PUSH
1725: LD_INT 24
1727: PPUSH
1728: LD_INT 5
1730: PPUSH
1731: CALL 53053 0 2
1735: ADD
1736: PUSH
1737: LD_INT 4
1739: PUSH
1740: LD_INT 25
1742: PPUSH
1743: LD_INT 4
1745: PPUSH
1746: CALL 53053 0 2
1750: ADD
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 31
1759: PUSH
1760: LD_INT 26
1762: PPUSH
1763: LD_INT 3
1765: PPUSH
1766: CALL 53053 0 2
1770: ADD
1771: PUSH
1772: LD_INT 31
1774: PUSH
1775: LD_INT 27
1777: PPUSH
1778: LD_INT 4
1780: PPUSH
1781: CALL 53053 0 2
1785: ADD
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: LD_INT 28
1792: PPUSH
1793: LD_INT 3
1795: PPUSH
1796: CALL 53053 0 2
1800: ADD
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 31
1809: PUSH
1810: LD_INT 29
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: CALL 53053 0 2
1820: ADD
1821: PUSH
1822: LD_INT 31
1824: PUSH
1825: LD_INT 31
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL 53053 0 2
1835: ADD
1836: PUSH
1837: LD_INT 4
1839: PUSH
1840: LD_INT 30
1842: PPUSH
1843: LD_INT 0
1845: PPUSH
1846: CALL 53053 0 2
1850: ADD
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 31
1859: PUSH
1860: LD_INT 32
1862: PPUSH
1863: LD_INT 2
1865: PPUSH
1866: CALL 53053 0 2
1870: ADD
1871: PUSH
1872: LD_INT 31
1874: PUSH
1875: LD_INT 33
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: CALL 53053 0 2
1885: ADD
1886: PUSH
1887: LD_INT 4
1889: PUSH
1890: LD_INT 34
1892: PPUSH
1893: LD_INT 2
1895: PPUSH
1896: CALL 53053 0 2
1900: ADD
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: ST_TO_ADDR
// end ; if mpTree then
1913: LD_EXP 3
1917: IFFALSE 1929
// SetAreaMapShow ( TreeArea , 1 ) ;
1919: LD_INT 1
1921: PPUSH
1922: LD_INT 1
1924: PPUSH
1925: CALL_OW 424
// end ;
1929: LD_VAR 0 2
1933: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1934: GO 1936
1936: DISABLE
1937: LD_INT 0
1939: PPUSH
1940: PPUSH
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
1945: PPUSH
1946: PPUSH
// begin if not mpShipments then
1947: LD_EXP 29
1951: NOT
1952: IFFALSE 1956
// exit ;
1954: GO 2463
// case mpShipments of 1 :
1956: LD_EXP 29
1960: PUSH
1961: LD_INT 1
1963: DOUBLE
1964: EQUAL
1965: IFTRUE 1969
1967: GO 2004
1969: POP
// begin time := 0 0$30 ;
1970: LD_ADDR_VAR 0 4
1974: PUSH
1975: LD_INT 1050
1977: ST_TO_ADDR
// normalTime := 0 0$30 ;
1978: LD_ADDR_VAR 0 6
1982: PUSH
1983: LD_INT 1050
1985: ST_TO_ADDR
// maxTime := 1 1$20 ;
1986: LD_ADDR_VAR 0 8
1990: PUSH
1991: LD_INT 2800
1993: ST_TO_ADDR
// delayTime := 0 0$5 ;
1994: LD_ADDR_VAR 0 7
1998: PUSH
1999: LD_INT 175
2001: ST_TO_ADDR
// end ; 2 :
2002: GO 2134
2004: LD_INT 2
2006: DOUBLE
2007: EQUAL
2008: IFTRUE 2012
2010: GO 2047
2012: POP
// begin time := 0 0$25 ;
2013: LD_ADDR_VAR 0 4
2017: PUSH
2018: LD_INT 875
2020: ST_TO_ADDR
// normalTime := 0 0$25 ;
2021: LD_ADDR_VAR 0 6
2025: PUSH
2026: LD_INT 875
2028: ST_TO_ADDR
// maxTime := 1 1$10 ;
2029: LD_ADDR_VAR 0 8
2033: PUSH
2034: LD_INT 2450
2036: ST_TO_ADDR
// delayTime := 0 0$4 ;
2037: LD_ADDR_VAR 0 7
2041: PUSH
2042: LD_INT 140
2044: ST_TO_ADDR
// end ; 3 :
2045: GO 2134
2047: LD_INT 3
2049: DOUBLE
2050: EQUAL
2051: IFTRUE 2055
2053: GO 2090
2055: POP
// begin time := 0 0$20 ;
2056: LD_ADDR_VAR 0 4
2060: PUSH
2061: LD_INT 700
2063: ST_TO_ADDR
// normalTime := 0 0$20 ;
2064: LD_ADDR_VAR 0 6
2068: PUSH
2069: LD_INT 700
2071: ST_TO_ADDR
// maxTime := 1 1$00 ;
2072: LD_ADDR_VAR 0 8
2076: PUSH
2077: LD_INT 2100
2079: ST_TO_ADDR
// delayTime := 0 0$3 ;
2080: LD_ADDR_VAR 0 7
2084: PUSH
2085: LD_INT 105
2087: ST_TO_ADDR
// end ; 4 :
2088: GO 2134
2090: LD_INT 4
2092: DOUBLE
2093: EQUAL
2094: IFTRUE 2098
2096: GO 2133
2098: POP
// begin time := 0 0$15 ;
2099: LD_ADDR_VAR 0 4
2103: PUSH
2104: LD_INT 525
2106: ST_TO_ADDR
// normalTime := 0 0$15 ;
2107: LD_ADDR_VAR 0 6
2111: PUSH
2112: LD_INT 525
2114: ST_TO_ADDR
// maxTime := 0 0$55 ;
2115: LD_ADDR_VAR 0 8
2119: PUSH
2120: LD_INT 1925
2122: ST_TO_ADDR
// delayTime := 0 0$2 ;
2123: LD_ADDR_VAR 0 7
2127: PUSH
2128: LD_INT 70
2130: ST_TO_ADDR
// end ; end ;
2131: GO 2134
2133: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
2134: LD_ADDR_VAR 0 3
2138: PUSH
2139: LD_INT 2
2141: PUSH
2142: LD_INT 3
2144: PUSH
2145: LD_INT 5
2147: PUSH
2148: LD_INT 4
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: ST_TO_ADDR
// areas := [ Center1 , Center2 ] ;
2157: LD_ADDR_VAR 0 5
2161: PUSH
2162: LD_INT 36
2164: PUSH
2165: LD_INT 35
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: ST_TO_ADDR
// for i := 1 to 8 do
2172: LD_ADDR_VAR 0 1
2176: PUSH
2177: DOUBLE
2178: LD_INT 1
2180: DEC
2181: ST_TO_ADDR
2182: LD_INT 8
2184: PUSH
2185: FOR_TO
2186: IFFALSE 2233
// begin if not mpSidePositions [ i ] then
2188: LD_EXP 9
2192: PUSH
2193: LD_VAR 0 1
2197: ARRAY
2198: NOT
2199: IFFALSE 2203
// continue ;
2201: GO 2185
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2203: LD_ADDR_VAR 0 5
2207: PUSH
2208: LD_VAR 0 5
2212: PUSH
2213: LD_VAR 0 3
2217: PUSH
2218: LD_EXP 9
2222: PUSH
2223: LD_VAR 0 1
2227: ARRAY
2228: ARRAY
2229: ADD
2230: ST_TO_ADDR
// end ;
2231: GO 2185
2233: POP
2234: POP
// x := 1 ;
2235: LD_ADDR_VAR 0 2
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// repeat wait ( time ) ;
2243: LD_VAR 0 4
2247: PPUSH
2248: CALL_OW 67
// x := Inc ( x ) ;
2252: LD_ADDR_VAR 0 2
2256: PUSH
2257: LD_VAR 0 2
2261: PPUSH
2262: CALL 49707 0 1
2266: ST_TO_ADDR
// if x > 5 then
2267: LD_VAR 0 2
2271: PUSH
2272: LD_INT 5
2274: GREATER
2275: IFFALSE 2285
// x := 1 ;
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: LD_INT 1
2284: ST_TO_ADDR
// for i in areas do
2285: LD_ADDR_VAR 0 1
2289: PUSH
2290: LD_VAR 0 5
2294: PUSH
2295: FOR_IN
2296: IFFALSE 2335
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2298: LD_VAR 0 1
2302: PPUSH
2303: LD_INT 1
2305: PPUSH
2306: CALL_OW 287
2310: PUSH
2311: LD_INT 20
2313: LESS
2314: IFFALSE 2333
// begin CreateCratesArea ( x , i , true ) ;
2316: LD_VAR 0 2
2320: PPUSH
2321: LD_VAR 0 1
2325: PPUSH
2326: LD_INT 1
2328: PPUSH
2329: CALL_OW 55
// end ; end ;
2333: GO 2295
2335: POP
2336: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2337: LD_INT 37
2339: PPUSH
2340: LD_INT 1
2342: PPUSH
2343: CALL_OW 287
2347: PUSH
2348: LD_INT 0
2350: EQUAL
2351: IFFALSE 2390
// begin for i := 1 to 3 do
2353: LD_ADDR_VAR 0 1
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_INT 3
2365: PUSH
2366: FOR_TO
2367: IFFALSE 2386
// CreateCratesArea ( x , CenterArea , true ) ;
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_INT 37
2376: PPUSH
2377: LD_INT 1
2379: PPUSH
2380: CALL_OW 55
2384: GO 2366
2386: POP
2387: POP
// end else
2388: GO 2421
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2390: LD_INT 37
2392: PPUSH
2393: LD_INT 1
2395: PPUSH
2396: CALL_OW 287
2400: PUSH
2401: LD_INT 30
2403: LESS
2404: IFFALSE 2421
// CreateCratesArea ( x , CenterArea , true ) ;
2406: LD_VAR 0 2
2410: PPUSH
2411: LD_INT 37
2413: PPUSH
2414: LD_INT 1
2416: PPUSH
2417: CALL_OW 55
// time := time + delayTime ;
2421: LD_ADDR_VAR 0 4
2425: PUSH
2426: LD_VAR 0 4
2430: PUSH
2431: LD_VAR 0 7
2435: PLUS
2436: ST_TO_ADDR
// if time > maxTime then
2437: LD_VAR 0 4
2441: PUSH
2442: LD_VAR 0 8
2446: GREATER
2447: IFFALSE 2459
// time := normalTime ;
2449: LD_ADDR_VAR 0 4
2453: PUSH
2454: LD_VAR 0 6
2458: ST_TO_ADDR
// until false ;
2459: LD_INT 0
2461: IFFALSE 2243
// end ;
2463: PPOPN 8
2465: END
// export treeVisited ; every 0 0$2 trigger mpTree do var i , tmp , skill , power , bonus ;
2466: LD_EXP 3
2470: IFFALSE 2793
2472: GO 2474
2474: DISABLE
2475: LD_INT 0
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
// begin treeVisited := [ ] ;
2482: LD_ADDR_EXP 4
2486: PUSH
2487: EMPTY
2488: ST_TO_ADDR
// power := 1 ;
2489: LD_ADDR_VAR 0 4
2493: PUSH
2494: LD_INT 1
2496: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2497: LD_INT 35
2499: PPUSH
2500: CALL_OW 67
// if tick mod Round ( 20 20$0 div mpTree ) = 0 then
2504: LD_OWVAR 1
2508: PUSH
2509: LD_INT 42000
2511: PUSH
2512: LD_EXP 3
2516: DIV
2517: PPUSH
2518: CALL_OW 574
2522: MOD
2523: PUSH
2524: LD_INT 0
2526: EQUAL
2527: IFFALSE 2544
// power := Inc ( power ) ;
2529: LD_ADDR_VAR 0 4
2533: PUSH
2534: LD_VAR 0 4
2538: PPUSH
2539: CALL 49707 0 1
2543: ST_TO_ADDR
// if power > 10 then
2544: LD_VAR 0 4
2548: PUSH
2549: LD_INT 10
2551: GREATER
2552: IFFALSE 2562
// power := 10 ;
2554: LD_ADDR_VAR 0 4
2558: PUSH
2559: LD_INT 10
2561: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_inarea , TreeArea ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) diff treeVisited ;
2562: LD_ADDR_VAR 0 2
2566: PUSH
2567: LD_INT 95
2569: PUSH
2570: LD_INT 1
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 21
2579: PUSH
2580: LD_INT 1
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: LD_INT 3
2589: PUSH
2590: LD_INT 23
2592: PUSH
2593: LD_INT 0
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PPUSH
2609: CALL_OW 69
2613: PUSH
2614: LD_EXP 4
2618: DIFF
2619: ST_TO_ADDR
// if tmp then
2620: LD_VAR 0 2
2624: IFFALSE 2789
// begin for i in tmp do
2626: LD_ADDR_VAR 0 1
2630: PUSH
2631: LD_VAR 0 2
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2787
// begin treeVisited := Join ( treeVisited , i ) ;
2639: LD_ADDR_EXP 4
2643: PUSH
2644: LD_EXP 4
2648: PPUSH
2649: LD_VAR 0 1
2653: PPUSH
2654: CALL 48334 0 2
2658: ST_TO_ADDR
// bonus := GetSkill ( i , i mod 4 + 1 ) + power ;
2659: LD_ADDR_VAR 0 5
2663: PUSH
2664: LD_VAR 0 1
2668: PPUSH
2669: LD_VAR 0 1
2673: PUSH
2674: LD_INT 4
2676: MOD
2677: PUSH
2678: LD_INT 1
2680: PLUS
2681: PPUSH
2682: CALL_OW 259
2686: PUSH
2687: LD_VAR 0 4
2691: PLUS
2692: ST_TO_ADDR
// if bonus > 10 then
2693: LD_VAR 0 5
2697: PUSH
2698: LD_INT 10
2700: GREATER
2701: IFFALSE 2711
// bonus := 10 ;
2703: LD_ADDR_VAR 0 5
2707: PUSH
2708: LD_INT 10
2710: ST_TO_ADDR
// skill := i mod 4 + 1 ;
2711: LD_ADDR_VAR 0 3
2715: PUSH
2716: LD_VAR 0 1
2720: PUSH
2721: LD_INT 4
2723: MOD
2724: PUSH
2725: LD_INT 1
2727: PLUS
2728: ST_TO_ADDR
// SetSkill ( i , skill , bonus ) ;
2729: LD_VAR 0 1
2733: PPUSH
2734: LD_VAR 0 3
2738: PPUSH
2739: LD_VAR 0 5
2743: PPUSH
2744: CALL_OW 237
// ToLua ( displayTreeBonusDetails( & i & , & skill & , & power & ) ) ;
2748: LD_STRING displayTreeBonusDetails(
2750: PUSH
2751: LD_VAR 0 1
2755: STR
2756: PUSH
2757: LD_STRING ,
2759: STR
2760: PUSH
2761: LD_VAR 0 3
2765: STR
2766: PUSH
2767: LD_STRING ,
2769: STR
2770: PUSH
2771: LD_VAR 0 4
2775: STR
2776: PUSH
2777: LD_STRING )
2779: STR
2780: PPUSH
2781: CALL_OW 559
// end ;
2785: GO 2636
2787: POP
2788: POP
// end ; until false ;
2789: LD_INT 0
2791: IFFALSE 2497
// end ; end_of_file
2793: PPOPN 5
2795: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2796: LD_VAR 0 1
2800: PPUSH
2801: CALL 53851 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2805: LD_VAR 0 1
2809: PPUSH
2810: CALL 8028 0 1
// end ;
2814: PPOPN 1
2816: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2817: LD_VAR 0 1
2821: PPUSH
2822: CALL 53868 0 1
// end ;
2826: PPOPN 1
2828: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2829: LD_VAR 0 1
2833: PPUSH
2834: CALL 8735 0 1
2838: PPOPN 1
2840: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2841: LD_VAR 0 1
2845: PPUSH
2846: LD_VAR 0 2
2850: PPUSH
2851: CALL 53909 0 2
2855: PPOPN 2
2857: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2858: LD_VAR 0 1
2862: PPUSH
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_VAR 0 3
2872: PPUSH
2873: CALL 8788 0 3
2877: PPOPN 3
2879: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2880: LD_INT 0
2882: PPUSH
2883: PPUSH
// disable ( mpActive ) ;
2884: LD_INT 100
2886: DISABLE_MARKED
// disable ( mpWin ) ;
2887: LD_INT 101
2889: DISABLE_MARKED
// disable ( mpLose ) ;
2890: LD_INT 102
2892: DISABLE_MARKED
// mpGameType := 0 ;
2893: LD_ADDR_EXP 5
2897: PUSH
2898: LD_INT 0
2900: ST_TO_ADDR
// mpGameSettings := [ ] ;
2901: LD_ADDR_EXP 8
2905: PUSH
2906: EMPTY
2907: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2908: LD_ADDR_EXP 6
2912: PUSH
2913: EMPTY
2914: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2915: LD_ADDR_EXP 7
2919: PUSH
2920: EMPTY
2921: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2922: LD_ADDR_EXP 31
2926: PUSH
2927: LD_INT 2
2929: PUSH
2930: LD_INT 2
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2937: LD_ADDR_EXP 14
2941: PUSH
2942: EMPTY
2943: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2944: LD_ADDR_EXP 15
2948: PUSH
2949: EMPTY
2950: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2951: LD_ADDR_EXP 43
2955: PUSH
2956: EMPTY
2957: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2958: LD_ADDR_EXP 44
2962: PUSH
2963: EMPTY
2964: ST_TO_ADDR
// mpDepots := [ ] ;
2965: LD_ADDR_EXP 16
2969: PUSH
2970: EMPTY
2971: ST_TO_ADDR
// mpBuildings := [ ] ;
2972: LD_ADDR_EXP 19
2976: PUSH
2977: EMPTY
2978: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2979: LD_ADDR_EXP 20
2983: PUSH
2984: EMPTY
2985: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2986: LD_ADDR_EXP 21
2990: PUSH
2991: EMPTY
2992: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2993: LD_ADDR_EXP 22
2997: PUSH
2998: EMPTY
2999: ST_TO_ADDR
// mpStartingResources := [ ] ;
3000: LD_ADDR_EXP 17
3004: PUSH
3005: EMPTY
3006: ST_TO_ADDR
// mpStartPos := [ ] ;
3007: LD_ADDR_EXP 23
3011: PUSH
3012: EMPTY
3013: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3014: LD_ADDR_EXP 24
3018: PUSH
3019: LD_INT 1
3021: NEG
3022: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3023: LD_ADDR_EXP 25
3027: PUSH
3028: EMPTY
3029: ST_TO_ADDR
// mpApemans := [ ] ;
3030: LD_ADDR_EXP 32
3034: PUSH
3035: EMPTY
3036: ST_TO_ADDR
// mpApemansArea := [ ] ;
3037: LD_ADDR_EXP 33
3041: PUSH
3042: EMPTY
3043: ST_TO_ADDR
// mpRespawn := [ ] ;
3044: LD_ADDR_EXP 35
3048: PUSH
3049: EMPTY
3050: ST_TO_ADDR
// mpKingArea := 0 ;
3051: LD_ADDR_EXP 36
3055: PUSH
3056: LD_INT 0
3058: ST_TO_ADDR
// mpPoints := [ ] ;
3059: LD_ADDR_EXP 37
3063: PUSH
3064: EMPTY
3065: ST_TO_ADDR
// mpVehicles := 0 ;
3066: LD_ADDR_EXP 38
3070: PUSH
3071: LD_INT 0
3073: ST_TO_ADDR
// mpShipments := 0 ;
3074: LD_ADDR_EXP 29
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3082: LD_ADDR_EXP 42
3086: PUSH
3087: EMPTY
3088: PUSH
3089: EMPTY
3090: PUSH
3091: EMPTY
3092: PUSH
3093: EMPTY
3094: PUSH
3095: EMPTY
3096: PUSH
3097: EMPTY
3098: PUSH
3099: EMPTY
3100: PUSH
3101: EMPTY
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3113: LD_ADDR_EXP 34
3117: PUSH
3118: EMPTY
3119: PUSH
3120: EMPTY
3121: PUSH
3122: EMPTY
3123: PUSH
3124: EMPTY
3125: PUSH
3126: EMPTY
3127: PUSH
3128: EMPTY
3129: PUSH
3130: EMPTY
3131: PUSH
3132: EMPTY
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: ST_TO_ADDR
// mpEmissions := 0 ;
3144: LD_ADDR_EXP 39
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// mpTeleports := 0 ;
3152: LD_ADDR_EXP 45
3156: PUSH
3157: LD_INT 0
3159: ST_TO_ADDR
// mpArtifacts := 0 ;
3160: LD_ADDR_EXP 46
3164: PUSH
3165: LD_INT 0
3167: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3168: LD_ADDR_EXP 27
3172: PUSH
3173: LD_INT 3
3175: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3176: LD_ADDR_EXP 26
3180: PUSH
3181: LD_INT 15
3183: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3184: LD_ADDR_EXP 40
3188: PUSH
3189: LD_INT 0
3191: ST_TO_ADDR
// mpGameActive := false ;
3192: LD_ADDR_EXP 41
3196: PUSH
3197: LD_INT 0
3199: ST_TO_ADDR
// mpBlockRespThread := false ;
3200: LD_ADDR_EXP 47
3204: PUSH
3205: LD_INT 0
3207: ST_TO_ADDR
// for i := 1 to 32 do
3208: LD_ADDR_VAR 0 2
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_INT 32
3220: PUSH
3221: FOR_TO
3222: IFFALSE 3249
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3224: LD_ADDR_EXP 8
3228: PUSH
3229: LD_EXP 8
3233: PPUSH
3234: LD_VAR 0 2
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 1
3246: ST_TO_ADDR
3247: GO 3221
3249: POP
3250: POP
// end ;
3251: LD_VAR 0 1
3255: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3256: LD_INT 0
3258: PPUSH
3259: PPUSH
3260: PPUSH
3261: PPUSH
3262: PPUSH
3263: PPUSH
3264: PPUSH
3265: PPUSH
3266: PPUSH
3267: PPUSH
3268: PPUSH
3269: PPUSH
3270: PPUSH
3271: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3272: LD_ADDR_VAR 0 14
3276: PUSH
3277: LD_INT 1
3279: PUSH
3280: LD_INT 2
3282: PUSH
3283: LD_INT 3
3285: PUSH
3286: LD_INT 5
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: ST_TO_ADDR
// for i in gameTypes do
3295: LD_ADDR_VAR 0 2
3299: PUSH
3300: LD_VAR 0 14
3304: PUSH
3305: FOR_IN
3306: IFFALSE 3315
// disable ( i ) ;
3308: LD_VAR 0 2
3312: DISABLE_MARKED
3313: GO 3305
3315: POP
3316: POP
// if Multiplayer then
3317: LD_OWVAR 4
3321: IFFALSE 3505
// begin mpGameType := mp_game_type ;
3323: LD_ADDR_EXP 5
3327: PUSH
3328: LD_OWVAR 6
3332: ST_TO_ADDR
// your_side := mp_player_side ;
3333: LD_ADDR_OWVAR 2
3337: PUSH
3338: LD_OWVAR 7
3342: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3343: LD_ADDR_EXP 9
3347: PUSH
3348: LD_OWVAR 17
3352: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3353: LD_ADDR_EXP 10
3357: PUSH
3358: LD_OWVAR 15
3362: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3363: LD_ADDR_EXP 11
3367: PUSH
3368: LD_OWVAR 16
3372: ST_TO_ADDR
// mpTeams := mp_teams ;
3373: LD_ADDR_EXP 12
3377: PUSH
3378: LD_OWVAR 12
3382: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3383: LD_ADDR_VAR 0 2
3387: PUSH
3388: DOUBLE
3389: LD_INT 1
3391: DEC
3392: ST_TO_ADDR
3393: LD_EXP 6
3397: PPUSH
3398: CALL 12402 0 1
3402: PUSH
3403: FOR_TO
3404: IFFALSE 3480
// begin setting := mpGameSettingsKeys [ i ] ;
3406: LD_ADDR_VAR 0 12
3410: PUSH
3411: LD_EXP 6
3415: PUSH
3416: LD_VAR 0 2
3420: ARRAY
3421: ST_TO_ADDR
// if setting then
3422: LD_VAR 0 12
3426: IFFALSE 3478
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3428: LD_ADDR_EXP 8
3432: PUSH
3433: LD_EXP 8
3437: PPUSH
3438: LD_VAR 0 2
3442: PPUSH
3443: LD_EXP 7
3447: PUSH
3448: LD_VAR 0 2
3452: ARRAY
3453: PUSH
3454: LD_VAR 0 2
3458: PUSH
3459: LD_INT 1
3461: MINUS
3462: PPUSH
3463: CALL_OW 426
3467: PUSH
3468: LD_INT 1
3470: PLUS
3471: ARRAY
3472: PPUSH
3473: CALL_OW 1
3477: ST_TO_ADDR
// end ;
3478: GO 3403
3480: POP
3481: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3482: LD_ADDR_EXP 13
3486: PUSH
3487: LD_EXP 10
3491: PUSH
3492: LD_INT 0
3494: PUSH
3495: EMPTY
3496: LIST
3497: DIFF
3498: PUSH
3499: LD_INT 1
3501: GREATER
3502: ST_TO_ADDR
// end else
3503: GO 3505
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3505: LD_EXP 5
3509: PPUSH
3510: CALL 830 0 1
// if Count ( mpMarkedAreas ) then
3514: LD_EXP 20
3518: PPUSH
3519: CALL 12402 0 1
3523: IFFALSE 3554
// begin for i in mpMarkedAreas do
3525: LD_ADDR_VAR 0 2
3529: PUSH
3530: LD_EXP 20
3534: PUSH
3535: FOR_IN
3536: IFFALSE 3552
// SetAreaMapShow ( i , 0 ) ;
3538: LD_VAR 0 2
3542: PPUSH
3543: LD_INT 0
3545: PPUSH
3546: CALL_OW 424
3550: GO 3535
3552: POP
3553: POP
// end ; for i := 1 to 8 do
3554: LD_ADDR_VAR 0 2
3558: PUSH
3559: DOUBLE
3560: LD_INT 1
3562: DEC
3563: ST_TO_ADDR
3564: LD_INT 8
3566: PUSH
3567: FOR_TO
3568: IFFALSE 4904
// begin if not mpSidePositions [ i ] then
3570: LD_EXP 9
3574: PUSH
3575: LD_VAR 0 2
3579: ARRAY
3580: NOT
3581: IFFALSE 3585
// continue ;
3583: GO 3567
// side := i ;
3585: LD_ADDR_VAR 0 7
3589: PUSH
3590: LD_VAR 0 2
3594: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3595: LD_ADDR_VAR 0 9
3599: PUSH
3600: LD_EXP 11
3604: PUSH
3605: LD_VAR 0 2
3609: ARRAY
3610: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3611: LD_ADDR_VAR 0 8
3615: PUSH
3616: LD_EXP 9
3620: PUSH
3621: LD_VAR 0 2
3625: ARRAY
3626: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3627: LD_EXP 14
3631: PPUSH
3632: CALL 12402 0 1
3636: IFFALSE 3713
// begin for j in mpOilDeposits [ pos ] do
3638: LD_ADDR_VAR 0 3
3642: PUSH
3643: LD_EXP 14
3647: PUSH
3648: LD_VAR 0 8
3652: ARRAY
3653: PUSH
3654: FOR_IN
3655: IFFALSE 3711
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3657: LD_VAR 0 3
3661: PUSH
3662: LD_INT 1
3664: ARRAY
3665: PPUSH
3666: LD_VAR 0 3
3670: PUSH
3671: LD_INT 2
3673: ARRAY
3674: PPUSH
3675: LD_INT 2
3677: PPUSH
3678: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3682: LD_VAR 0 3
3686: PUSH
3687: LD_INT 1
3689: ARRAY
3690: PPUSH
3691: LD_VAR 0 3
3695: PUSH
3696: LD_INT 2
3698: ARRAY
3699: PPUSH
3700: LD_VAR 0 7
3704: PPUSH
3705: CALL_OW 441
// end ;
3709: GO 3654
3711: POP
3712: POP
// end ; if Count ( mpSibDeposits ) then
3713: LD_EXP 15
3717: PPUSH
3718: CALL 12402 0 1
3722: IFFALSE 3799
// begin for j in mpSibDeposits [ pos ] do
3724: LD_ADDR_VAR 0 3
3728: PUSH
3729: LD_EXP 15
3733: PUSH
3734: LD_VAR 0 8
3738: ARRAY
3739: PUSH
3740: FOR_IN
3741: IFFALSE 3797
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3743: LD_VAR 0 3
3747: PUSH
3748: LD_INT 1
3750: ARRAY
3751: PPUSH
3752: LD_VAR 0 3
3756: PUSH
3757: LD_INT 2
3759: ARRAY
3760: PPUSH
3761: LD_INT 3
3763: PPUSH
3764: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3768: LD_VAR 0 3
3772: PUSH
3773: LD_INT 1
3775: ARRAY
3776: PPUSH
3777: LD_VAR 0 3
3781: PUSH
3782: LD_INT 2
3784: ARRAY
3785: PPUSH
3786: LD_VAR 0 7
3790: PPUSH
3791: CALL_OW 441
// end ;
3795: GO 3740
3797: POP
3798: POP
// end ; InitBc ;
3799: CALL_OW 21
// InitUc ;
3803: CALL_OW 18
// uc_side := side ;
3807: LD_ADDR_OWVAR 20
3811: PUSH
3812: LD_VAR 0 7
3816: ST_TO_ADDR
// uc_nation := nation ;
3817: LD_ADDR_OWVAR 21
3821: PUSH
3822: LD_VAR 0 9
3826: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3827: LD_EXP 24
3831: PUSH
3832: LD_INT 1
3834: NEG
3835: GREATER
3836: IFFALSE 3995
// begin x := mpStartPos [ pos ] [ 1 ] ;
3838: LD_ADDR_VAR 0 5
3842: PUSH
3843: LD_EXP 23
3847: PUSH
3848: LD_VAR 0 8
3852: ARRAY
3853: PUSH
3854: LD_INT 1
3856: ARRAY
3857: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3858: LD_ADDR_VAR 0 6
3862: PUSH
3863: LD_EXP 23
3867: PUSH
3868: LD_VAR 0 8
3872: ARRAY
3873: PUSH
3874: LD_INT 2
3876: ARRAY
3877: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3878: LD_VAR 0 5
3882: PPUSH
3883: LD_VAR 0 6
3887: PPUSH
3888: LD_INT 12
3890: PPUSH
3891: LD_INT 2
3893: PPUSH
3894: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3898: LD_ADDR_EXP 25
3902: PUSH
3903: LD_EXP 25
3907: PPUSH
3908: LD_VAR 0 7
3912: PPUSH
3913: LD_VAR 0 7
3917: PPUSH
3918: LD_VAR 0 5
3922: PPUSH
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_INT 1
3930: PUSH
3931: LD_INT 100
3933: PUSH
3934: EMPTY
3935: LIST
3936: LIST
3937: PUSH
3938: LD_INT 2
3940: PUSH
3941: LD_INT 70
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 3
3950: PUSH
3951: LD_INT 40
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 10
3960: PUSH
3961: LD_INT 25
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: LD_INT 20
3970: PUSH
3971: LD_INT 100
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PPUSH
3985: CALL_OW 418
3989: PPUSH
3990: CALL_OW 1
3994: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3995: LD_EXP 16
3999: PPUSH
4000: CALL 12402 0 1
4004: IFFALSE 4188
// begin if mpGameType = GameTypeSurvival then
4006: LD_EXP 5
4010: PUSH
4011: LD_INT 2
4013: EQUAL
4014: IFFALSE 4034
// begin bc_level := 10 ;
4016: LD_ADDR_OWVAR 43
4020: PUSH
4021: LD_INT 10
4023: ST_TO_ADDR
// bc_type := b_warehouse ;
4024: LD_ADDR_OWVAR 42
4028: PUSH
4029: LD_INT 1
4031: ST_TO_ADDR
// end else
4032: GO 4050
// begin bc_level := 0 ;
4034: LD_ADDR_OWVAR 43
4038: PUSH
4039: LD_INT 0
4041: ST_TO_ADDR
// bc_type := b_depot ;
4042: LD_ADDR_OWVAR 42
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4050: LD_ADDR_VAR 0 4
4054: PUSH
4055: LD_EXP 16
4059: PUSH
4060: LD_VAR 0 8
4064: ARRAY
4065: PUSH
4066: LD_INT 1
4068: ARRAY
4069: PPUSH
4070: LD_EXP 16
4074: PUSH
4075: LD_VAR 0 8
4079: ARRAY
4080: PUSH
4081: LD_INT 2
4083: ARRAY
4084: PPUSH
4085: LD_EXP 16
4089: PUSH
4090: LD_VAR 0 8
4094: ARRAY
4095: PUSH
4096: LD_INT 3
4098: ARRAY
4099: PPUSH
4100: CALL_OW 47
4104: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4105: LD_VAR 0 4
4109: PPUSH
4110: LD_STRING @
4112: PUSH
4113: LD_VAR 0 7
4117: STR
4118: PPUSH
4119: CALL_OW 500
// if Count ( mpStartingResources ) then
4123: LD_EXP 17
4127: PPUSH
4128: CALL 12402 0 1
4132: IFFALSE 4186
// begin for j := 1 to mpStartingResources do
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: DOUBLE
4140: LD_INT 1
4142: DEC
4143: ST_TO_ADDR
4144: LD_EXP 17
4148: PUSH
4149: FOR_TO
4150: IFFALSE 4184
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4152: LD_VAR 0 4
4156: PPUSH
4157: CALL_OW 274
4161: PPUSH
4162: LD_VAR 0 3
4166: PPUSH
4167: LD_EXP 17
4171: PUSH
4172: LD_VAR 0 3
4176: ARRAY
4177: PPUSH
4178: CALL_OW 277
4182: GO 4149
4184: POP
4185: POP
// end ; end else
4186: GO 4395
// if Count ( mpStartingResources ) then
4188: LD_EXP 17
4192: PPUSH
4193: CALL 12402 0 1
4197: IFFALSE 4395
// begin x := mpStartPos [ pos ] [ 1 ] ;
4199: LD_ADDR_VAR 0 5
4203: PUSH
4204: LD_EXP 23
4208: PUSH
4209: LD_VAR 0 8
4213: ARRAY
4214: PUSH
4215: LD_INT 1
4217: ARRAY
4218: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4219: LD_ADDR_VAR 0 6
4223: PUSH
4224: LD_EXP 23
4228: PUSH
4229: LD_VAR 0 8
4233: ARRAY
4234: PUSH
4235: LD_INT 2
4237: ARRAY
4238: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4239: LD_ADDR_VAR 0 3
4243: PUSH
4244: DOUBLE
4245: LD_INT 1
4247: DEC
4248: ST_TO_ADDR
4249: LD_EXP 17
4253: PUSH
4254: FOR_TO
4255: IFFALSE 4393
// begin resources := mpStartingResources [ j ] ;
4257: LD_ADDR_VAR 0 13
4261: PUSH
4262: LD_EXP 17
4266: PUSH
4267: LD_VAR 0 3
4271: ARRAY
4272: ST_TO_ADDR
// if resources = 0 then
4273: LD_VAR 0 13
4277: PUSH
4278: LD_INT 0
4280: EQUAL
4281: IFFALSE 4285
// continue ;
4283: GO 4254
// repeat if resources >= 50 then
4285: LD_VAR 0 13
4289: PUSH
4290: LD_INT 50
4292: GREATEREQUAL
4293: IFFALSE 4339
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4295: LD_VAR 0 3
4299: PPUSH
4300: LD_INT 5
4302: PPUSH
4303: LD_VAR 0 5
4307: PPUSH
4308: LD_VAR 0 6
4312: PPUSH
4313: LD_INT 6
4315: PPUSH
4316: LD_INT 0
4318: PPUSH
4319: CALL_OW 60
// resources := resources - 50 ;
4323: LD_ADDR_VAR 0 13
4327: PUSH
4328: LD_VAR 0 13
4332: PUSH
4333: LD_INT 50
4335: MINUS
4336: ST_TO_ADDR
// end else
4337: GO 4381
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4339: LD_VAR 0 3
4343: PPUSH
4344: LD_VAR 0 13
4348: PUSH
4349: LD_INT 10
4351: DIV
4352: PPUSH
4353: LD_VAR 0 5
4357: PPUSH
4358: LD_VAR 0 6
4362: PPUSH
4363: LD_INT 6
4365: PPUSH
4366: LD_INT 0
4368: PPUSH
4369: CALL_OW 60
// resources := 0 ;
4373: LD_ADDR_VAR 0 13
4377: PUSH
4378: LD_INT 0
4380: ST_TO_ADDR
// end ; until resources <= 0 ;
4381: LD_VAR 0 13
4385: PUSH
4386: LD_INT 0
4388: LESSEQUAL
4389: IFFALSE 4285
// end ;
4391: GO 4254
4393: POP
4394: POP
// end ; if Count ( mpBuildings ) then
4395: LD_EXP 19
4399: PPUSH
4400: CALL 12402 0 1
4404: IFFALSE 4482
// begin for j in mpBuildings [ pos ] do
4406: LD_ADDR_VAR 0 3
4410: PUSH
4411: LD_EXP 19
4415: PUSH
4416: LD_VAR 0 8
4420: ARRAY
4421: PUSH
4422: FOR_IN
4423: IFFALSE 4480
// begin bc_level := 0 ;
4425: LD_ADDR_OWVAR 43
4429: PUSH
4430: LD_INT 0
4432: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4433: LD_ADDR_OWVAR 42
4437: PUSH
4438: LD_VAR 0 3
4442: PUSH
4443: LD_INT 1
4445: ARRAY
4446: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4447: LD_VAR 0 3
4451: PUSH
4452: LD_INT 2
4454: ARRAY
4455: PPUSH
4456: LD_VAR 0 3
4460: PUSH
4461: LD_INT 3
4463: ARRAY
4464: PPUSH
4465: LD_VAR 0 3
4469: PUSH
4470: LD_INT 4
4472: ARRAY
4473: PPUSH
4474: CALL_OW 47
// end ;
4478: GO 4422
4480: POP
4481: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4482: LD_EXP 28
4486: IFFALSE 4506
4488: PUSH
4489: LD_INT 20
4491: PPUSH
4492: LD_VAR 0 7
4496: PPUSH
4497: CALL_OW 321
4501: PUSH
4502: LD_INT 1
4504: EQUAL
4505: AND
4506: IFFALSE 4523
// SetTech ( tech_SibDet , side , state_researched ) ;
4508: LD_INT 20
4510: PPUSH
4511: LD_VAR 0 7
4515: PPUSH
4516: LD_INT 2
4518: PPUSH
4519: CALL_OW 322
// if not mpArtifacts then
4523: LD_EXP 46
4527: NOT
4528: IFFALSE 4545
// SetTech ( tech_artifact , side , state_disabled ) ;
4530: LD_INT 24
4532: PPUSH
4533: LD_VAR 0 7
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: CALL_OW 322
// if mpSibBomb = 1 then
4545: LD_EXP 30
4549: PUSH
4550: LD_INT 1
4552: EQUAL
4553: IFFALSE 4572
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4555: LD_INT 25
4557: PPUSH
4558: LD_VAR 0 7
4562: PPUSH
4563: LD_INT 1
4565: PPUSH
4566: CALL_OW 322
// end else
4570: GO 4587
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4572: LD_INT 25
4574: PPUSH
4575: LD_VAR 0 7
4579: PPUSH
4580: LD_INT 0
4582: PPUSH
4583: CALL_OW 322
// end ; if mpVehicles then
4587: LD_EXP 38
4591: IFFALSE 4690
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4593: LD_ADDR_VAR 0 3
4597: PUSH
4598: LD_VAR 0 7
4602: PPUSH
4603: LD_VAR 0 9
4607: PPUSH
4608: LD_EXP 38
4612: PPUSH
4613: CALL 5814 0 3
4617: PUSH
4618: FOR_IN
4619: IFFALSE 4688
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4621: LD_VAR 0 3
4625: PPUSH
4626: LD_INT 0
4628: PPUSH
4629: LD_INT 5
4631: PPUSH
4632: CALL_OW 12
4636: PPUSH
4637: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4641: LD_VAR 0 3
4645: PPUSH
4646: LD_EXP 23
4650: PUSH
4651: LD_VAR 0 8
4655: ARRAY
4656: PUSH
4657: LD_INT 1
4659: ARRAY
4660: PPUSH
4661: LD_EXP 23
4665: PUSH
4666: LD_VAR 0 8
4670: ARRAY
4671: PUSH
4672: LD_INT 2
4674: ARRAY
4675: PPUSH
4676: LD_INT 12
4678: PPUSH
4679: LD_INT 0
4681: PPUSH
4682: CALL_OW 50
// end ;
4686: GO 4618
4688: POP
4689: POP
// end ; uc_nation := nation ;
4690: LD_ADDR_OWVAR 21
4694: PUSH
4695: LD_VAR 0 9
4699: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4700: LD_ADDR_VAR 0 11
4704: PUSH
4705: LD_VAR 0 7
4709: PPUSH
4710: LD_VAR 0 9
4714: PPUSH
4715: LD_EXP 26
4719: PPUSH
4720: LD_EXP 27
4724: PPUSH
4725: CALL 5316 0 4
4729: ST_TO_ADDR
// for j in team do
4730: LD_ADDR_VAR 0 3
4734: PUSH
4735: LD_VAR 0 11
4739: PUSH
4740: FOR_IN
4741: IFFALSE 4790
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4743: LD_VAR 0 3
4747: PPUSH
4748: LD_EXP 23
4752: PUSH
4753: LD_VAR 0 8
4757: ARRAY
4758: PUSH
4759: LD_INT 1
4761: ARRAY
4762: PPUSH
4763: LD_EXP 23
4767: PUSH
4768: LD_VAR 0 8
4772: ARRAY
4773: PUSH
4774: LD_INT 2
4776: ARRAY
4777: PPUSH
4778: LD_INT 12
4780: PPUSH
4781: LD_INT 0
4783: PPUSH
4784: CALL_OW 50
4788: GO 4740
4790: POP
4791: POP
// if mpApemans then
4792: LD_EXP 32
4796: IFFALSE 4902
// begin for j := 1 to mpApemans do
4798: LD_ADDR_VAR 0 3
4802: PUSH
4803: DOUBLE
4804: LD_INT 1
4806: DEC
4807: ST_TO_ADDR
4808: LD_EXP 32
4812: PUSH
4813: FOR_TO
4814: IFFALSE 4900
// begin PrepareApeman ( - 5 ) ;
4816: LD_INT 5
4818: NEG
4819: PPUSH
4820: CALL 44461 0 1
// ape := CreateHuman ;
4824: LD_ADDR_VAR 0 10
4828: PUSH
4829: CALL_OW 44
4833: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4834: LD_ADDR_EXP 34
4838: PUSH
4839: LD_EXP 34
4843: PPUSH
4844: LD_VAR 0 8
4848: PPUSH
4849: LD_EXP 34
4853: PUSH
4854: LD_VAR 0 8
4858: ARRAY
4859: PPUSH
4860: LD_VAR 0 10
4864: PPUSH
4865: CALL 48334 0 2
4869: PPUSH
4870: CALL_OW 1
4874: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4875: LD_VAR 0 10
4879: PPUSH
4880: LD_EXP 33
4884: PUSH
4885: LD_VAR 0 8
4889: ARRAY
4890: PPUSH
4891: LD_INT 0
4893: PPUSH
4894: CALL_OW 49
// end ;
4898: GO 4813
4900: POP
4901: POP
// end ; end ;
4902: GO 3567
4904: POP
4905: POP
// if not mpTeamGame then
4906: LD_EXP 13
4910: NOT
4911: IFFALSE 5009
// begin for i := 1 to 8 do
4913: LD_ADDR_VAR 0 2
4917: PUSH
4918: DOUBLE
4919: LD_INT 1
4921: DEC
4922: ST_TO_ADDR
4923: LD_INT 8
4925: PUSH
4926: FOR_TO
4927: IFFALSE 5005
// for j := 1 to 8 do
4929: LD_ADDR_VAR 0 3
4933: PUSH
4934: DOUBLE
4935: LD_INT 1
4937: DEC
4938: ST_TO_ADDR
4939: LD_INT 8
4941: PUSH
4942: FOR_TO
4943: IFFALSE 5001
// if i <> j then
4945: LD_VAR 0 2
4949: PUSH
4950: LD_VAR 0 3
4954: NONEQUAL
4955: IFFALSE 4979
// SetAttitude ( i , j , att_neutral , true ) else
4957: LD_VAR 0 2
4961: PPUSH
4962: LD_VAR 0 3
4966: PPUSH
4967: LD_INT 0
4969: PPUSH
4970: LD_INT 1
4972: PPUSH
4973: CALL_OW 80
4977: GO 4999
// SetAttitude ( i , j , att_friend , true ) ;
4979: LD_VAR 0 2
4983: PPUSH
4984: LD_VAR 0 3
4988: PPUSH
4989: LD_INT 1
4991: PPUSH
4992: LD_INT 1
4994: PPUSH
4995: CALL_OW 80
4999: GO 4942
5001: POP
5002: POP
5003: GO 4926
5005: POP
5006: POP
// end else
5007: GO 5184
// begin if mpSharedVision then
5009: LD_EXP 18
5013: IFFALSE 5078
// begin for i in mpTeams do
5015: LD_ADDR_VAR 0 2
5019: PUSH
5020: LD_EXP 12
5024: PUSH
5025: FOR_IN
5026: IFFALSE 5076
// for j := 2 to i do
5028: LD_ADDR_VAR 0 3
5032: PUSH
5033: DOUBLE
5034: LD_INT 2
5036: DEC
5037: ST_TO_ADDR
5038: LD_VAR 0 2
5042: PUSH
5043: FOR_TO
5044: IFFALSE 5072
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5046: LD_VAR 0 2
5050: PUSH
5051: LD_VAR 0 3
5055: ARRAY
5056: PPUSH
5057: LD_VAR 0 2
5061: PUSH
5062: LD_INT 1
5064: ARRAY
5065: PPUSH
5066: CALL_OW 343
5070: GO 5043
5072: POP
5073: POP
5074: GO 5025
5076: POP
5077: POP
// end ; for i := 1 to 8 do
5078: LD_ADDR_VAR 0 2
5082: PUSH
5083: DOUBLE
5084: LD_INT 1
5086: DEC
5087: ST_TO_ADDR
5088: LD_INT 8
5090: PUSH
5091: FOR_TO
5092: IFFALSE 5182
// for j := 1 to 8 do
5094: LD_ADDR_VAR 0 3
5098: PUSH
5099: DOUBLE
5100: LD_INT 1
5102: DEC
5103: ST_TO_ADDR
5104: LD_INT 8
5106: PUSH
5107: FOR_TO
5108: IFFALSE 5178
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5110: LD_EXP 10
5114: PUSH
5115: LD_VAR 0 2
5119: ARRAY
5120: PUSH
5121: LD_EXP 10
5125: PUSH
5126: LD_VAR 0 3
5130: ARRAY
5131: EQUAL
5132: IFFALSE 5156
// SetAttitude ( i , j , att_friend , true ) else
5134: LD_VAR 0 2
5138: PPUSH
5139: LD_VAR 0 3
5143: PPUSH
5144: LD_INT 1
5146: PPUSH
5147: LD_INT 1
5149: PPUSH
5150: CALL_OW 80
5154: GO 5176
// SetAttitude ( i , j , att_enemy , true ) ;
5156: LD_VAR 0 2
5160: PPUSH
5161: LD_VAR 0 3
5165: PPUSH
5166: LD_INT 2
5168: PPUSH
5169: LD_INT 1
5171: PPUSH
5172: CALL_OW 80
5176: GO 5107
5178: POP
5179: POP
5180: GO 5091
5182: POP
5183: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5184: LD_ADDR_OWVAR 71
5188: PUSH
5189: LD_EXP 11
5193: PUSH
5194: LD_OWVAR 2
5198: ARRAY
5199: ST_TO_ADDR
// if IAmSpec then
5200: CALL_OW 531
5204: IFFALSE 5245
// begin FogOff ( true ) ;
5206: LD_INT 1
5208: PPUSH
5209: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5213: LD_EXP 31
5217: PUSH
5218: LD_INT 1
5220: ARRAY
5221: PUSH
5222: LD_INT 2
5224: DIV
5225: PPUSH
5226: LD_EXP 31
5230: PUSH
5231: LD_INT 2
5233: ARRAY
5234: PUSH
5235: LD_INT 2
5237: DIV
5238: PPUSH
5239: CALL_OW 86
// end else
5243: GO 5291
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5245: LD_EXP 23
5249: PUSH
5250: LD_EXP 9
5254: PUSH
5255: LD_OWVAR 2
5259: ARRAY
5260: ARRAY
5261: PUSH
5262: LD_INT 1
5264: ARRAY
5265: PPUSH
5266: LD_EXP 23
5270: PUSH
5271: LD_EXP 9
5275: PUSH
5276: LD_OWVAR 2
5280: ARRAY
5281: ARRAY
5282: PUSH
5283: LD_INT 2
5285: ARRAY
5286: PPUSH
5287: CALL_OW 86
// end ; BeginBuildUp ;
5291: CALL 6347 0 0
// enable ( mpActive ) ;
5295: LD_INT 100
5297: ENABLE_MARKED
// enable ( mpGameType ) ;
5298: LD_EXP 5
5302: ENABLE_MARKED
// mpGameActive := true ;
5303: LD_ADDR_EXP 41
5307: PUSH
5308: LD_INT 1
5310: ST_TO_ADDR
// end ;
5311: LD_VAR 0 1
5315: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5316: LD_INT 0
5318: PPUSH
5319: PPUSH
5320: PPUSH
5321: PPUSH
// result := [ ] ;
5322: LD_ADDR_VAR 0 5
5326: PUSH
5327: EMPTY
5328: ST_TO_ADDR
// class := class_soldier ;
5329: LD_ADDR_VAR 0 8
5333: PUSH
5334: LD_INT 1
5336: ST_TO_ADDR
// uc_side := side ;
5337: LD_ADDR_OWVAR 20
5341: PUSH
5342: LD_VAR 0 1
5346: ST_TO_ADDR
// uc_nation := nation ;
5347: LD_ADDR_OWVAR 21
5351: PUSH
5352: LD_VAR 0 2
5356: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5357: LD_ADDR_OWVAR 26
5361: PUSH
5362: LD_OWVAR 19
5366: PUSH
5367: LD_VAR 0 1
5371: ARRAY
5372: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5373: LD_INT 1
5375: PPUSH
5376: LD_INT 2
5378: PPUSH
5379: CALL_OW 12
5383: PPUSH
5384: LD_VAR 0 8
5388: PPUSH
5389: LD_VAR 0 4
5393: PUSH
5394: LD_INT 2
5396: PLUS
5397: PPUSH
5398: CALL_OW 380
// hc_importance := 105 ;
5402: LD_ADDR_OWVAR 32
5406: PUSH
5407: LD_INT 105
5409: ST_TO_ADDR
// if Multiplayer then
5410: LD_OWVAR 4
5414: IFFALSE 5454
// begin hc_gallery := MULTIAVATARS ;
5416: LD_ADDR_OWVAR 33
5420: PUSH
5421: LD_STRING MULTIAVATARS
5423: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5424: LD_ADDR_OWVAR 34
5428: PUSH
5429: LD_VAR 0 1
5433: PPUSH
5434: CALL_OW 525
5438: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5439: LD_ADDR_OWVAR 27
5443: PUSH
5444: LD_VAR 0 1
5448: PPUSH
5449: CALL_OW 526
5453: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5454: LD_ADDR_VAR 0 5
5458: PUSH
5459: LD_VAR 0 5
5463: PPUSH
5464: CALL_OW 44
5468: PPUSH
5469: CALL 48334 0 2
5473: ST_TO_ADDR
// if mpTeamPreset then
5474: LD_LOC 1
5478: IFFALSE 5574
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5480: LD_LOC 1
5484: PUSH
5485: LD_INT 1
5487: ARRAY
5488: PPUSH
5489: LD_VAR 0 5
5493: PUSH
5494: LD_VAR 0 5
5498: ARRAY
5499: PPUSH
5500: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5504: LD_VAR 0 5
5508: PUSH
5509: LD_VAR 0 5
5513: ARRAY
5514: PPUSH
5515: LD_INT 1
5517: PPUSH
5518: LD_LOC 1
5522: PUSH
5523: LD_INT 1
5525: ARRAY
5526: PPUSH
5527: LD_INT 1
5529: PPUSH
5530: CALL_OW 260
5534: PPUSH
5535: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5539: LD_VAR 0 5
5543: PUSH
5544: LD_VAR 0 5
5548: ARRAY
5549: PPUSH
5550: LD_INT 2
5552: PPUSH
5553: LD_LOC 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_INT 2
5564: PPUSH
5565: CALL_OW 260
5569: PPUSH
5570: CALL_OW 239
// end ; InitHc_All ( ) ;
5574: CALL_OW 584
// class := 2 ;
5578: LD_ADDR_VAR 0 8
5582: PUSH
5583: LD_INT 2
5585: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5586: LD_ADDR_VAR 0 6
5590: PUSH
5591: DOUBLE
5592: LD_INT 1
5594: DEC
5595: ST_TO_ADDR
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 1
5603: MINUS
5604: PUSH
5605: FOR_TO
5606: IFFALSE 5790
// begin PrepareHuman ( false , class , skill ) ;
5608: LD_INT 0
5610: PPUSH
5611: LD_VAR 0 8
5615: PPUSH
5616: LD_VAR 0 4
5620: PPUSH
5621: CALL_OW 380
// un := CreateHuman ;
5625: LD_ADDR_VAR 0 7
5629: PUSH
5630: CALL_OW 44
5634: ST_TO_ADDR
// result := Join ( result , un ) ;
5635: LD_ADDR_VAR 0 5
5639: PUSH
5640: LD_VAR 0 5
5644: PPUSH
5645: LD_VAR 0 7
5649: PPUSH
5650: CALL 48334 0 2
5654: ST_TO_ADDR
// if mpTeamPreset then
5655: LD_LOC 1
5659: IFFALSE 5755
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5661: LD_LOC 1
5665: PUSH
5666: LD_VAR 0 6
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: LD_VAR 0 7
5680: PPUSH
5681: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5685: LD_VAR 0 7
5689: PPUSH
5690: LD_INT 1
5692: PPUSH
5693: LD_LOC 1
5697: PUSH
5698: LD_VAR 0 6
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: ARRAY
5707: PPUSH
5708: LD_INT 1
5710: PPUSH
5711: CALL_OW 260
5715: PPUSH
5716: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5720: LD_VAR 0 7
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_LOC 1
5732: PUSH
5733: LD_VAR 0 6
5737: PUSH
5738: LD_INT 1
5740: PLUS
5741: ARRAY
5742: PPUSH
5743: LD_INT 2
5745: PPUSH
5746: CALL_OW 260
5750: PPUSH
5751: CALL_OW 239
// end ; class := Inc ( class ) ;
5755: LD_ADDR_VAR 0 8
5759: PUSH
5760: LD_VAR 0 8
5764: PPUSH
5765: CALL 49707 0 1
5769: ST_TO_ADDR
// if class = 5 then
5770: LD_VAR 0 8
5774: PUSH
5775: LD_INT 5
5777: EQUAL
5778: IFFALSE 5788
// class := 1 ;
5780: LD_ADDR_VAR 0 8
5784: PUSH
5785: LD_INT 1
5787: ST_TO_ADDR
// end ;
5788: GO 5605
5790: POP
5791: POP
// if not mpTeamPreset then
5792: LD_LOC 1
5796: NOT
5797: IFFALSE 5809
// mpTeamPreset := result ;
5799: LD_ADDR_LOC 1
5803: PUSH
5804: LD_VAR 0 5
5808: ST_TO_ADDR
// end ;
5809: LD_VAR 0 5
5813: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5814: LD_INT 0
5816: PPUSH
5817: PPUSH
// result := [ ] ;
5818: LD_ADDR_VAR 0 4
5822: PUSH
5823: EMPTY
5824: ST_TO_ADDR
// if not vehicles then
5825: LD_VAR 0 3
5829: NOT
5830: IFFALSE 5834
// exit ;
5832: GO 6048
// for i := 1 to vehicles [ nation ] do
5834: LD_ADDR_VAR 0 5
5838: PUSH
5839: DOUBLE
5840: LD_INT 1
5842: DEC
5843: ST_TO_ADDR
5844: LD_VAR 0 3
5848: PUSH
5849: LD_VAR 0 2
5853: ARRAY
5854: PUSH
5855: FOR_TO
5856: IFFALSE 6046
// begin uc_side := side ;
5858: LD_ADDR_OWVAR 20
5862: PUSH
5863: LD_VAR 0 1
5867: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5868: LD_VAR 0 3
5872: PUSH
5873: LD_VAR 0 2
5877: ARRAY
5878: PUSH
5879: LD_VAR 0 5
5883: ARRAY
5884: PPUSH
5885: CALL 12402 0 1
5889: PUSH
5890: LD_INT 4
5892: GREATER
5893: IFFALSE 5923
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5895: LD_ADDR_OWVAR 21
5899: PUSH
5900: LD_VAR 0 3
5904: PUSH
5905: LD_VAR 0 2
5909: ARRAY
5910: PUSH
5911: LD_VAR 0 5
5915: ARRAY
5916: PUSH
5917: LD_INT 5
5919: ARRAY
5920: ST_TO_ADDR
5921: GO 5933
// uc_nation := nation ;
5923: LD_ADDR_OWVAR 21
5927: PUSH
5928: LD_VAR 0 2
5932: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5933: LD_VAR 0 3
5937: PUSH
5938: LD_VAR 0 2
5942: ARRAY
5943: PUSH
5944: LD_VAR 0 5
5948: ARRAY
5949: PUSH
5950: LD_INT 1
5952: ARRAY
5953: PPUSH
5954: LD_VAR 0 3
5958: PUSH
5959: LD_VAR 0 2
5963: ARRAY
5964: PUSH
5965: LD_VAR 0 5
5969: ARRAY
5970: PUSH
5971: LD_INT 2
5973: ARRAY
5974: PPUSH
5975: LD_VAR 0 3
5979: PUSH
5980: LD_VAR 0 2
5984: ARRAY
5985: PUSH
5986: LD_VAR 0 5
5990: ARRAY
5991: PUSH
5992: LD_INT 3
5994: ARRAY
5995: PPUSH
5996: LD_VAR 0 3
6000: PUSH
6001: LD_VAR 0 2
6005: ARRAY
6006: PUSH
6007: LD_VAR 0 5
6011: ARRAY
6012: PUSH
6013: LD_INT 4
6015: ARRAY
6016: PPUSH
6017: LD_INT 80
6019: PPUSH
6020: CALL 15164 0 5
// result := Join ( result , CreateVehicle ) ;
6024: LD_ADDR_VAR 0 4
6028: PUSH
6029: LD_VAR 0 4
6033: PPUSH
6034: CALL_OW 45
6038: PPUSH
6039: CALL 48334 0 2
6043: ST_TO_ADDR
// end ;
6044: GO 5855
6046: POP
6047: POP
// end ;
6048: LD_VAR 0 4
6052: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6053: LD_INT 0
6055: PPUSH
6056: PPUSH
// for i in mpBattleFlags do
6057: LD_ADDR_VAR 0 3
6061: PUSH
6062: LD_EXP 25
6066: PUSH
6067: FOR_IN
6068: IFFALSE 6145
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6070: LD_VAR 0 3
6074: PPUSH
6075: LD_INT 1
6077: PUSH
6078: LD_VAR 0 1
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 2
6089: PUSH
6090: LD_VAR 0 1
6094: PUSH
6095: LD_REAL  7.00000000000000E-0001
6098: MUL
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 3
6106: PUSH
6107: LD_VAR 0 1
6111: PUSH
6112: LD_REAL  4.00000000000000E-0001
6115: MUL
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: PUSH
6121: LD_INT 20
6123: PUSH
6124: LD_VAR 0 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: PPUSH
6139: CALL_OW 423
6143: GO 6067
6145: POP
6146: POP
// end ;
6147: LD_VAR 0 2
6151: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6152: LD_INT 100
6154: IFFALSE 6249
6156: GO 6158
6158: DISABLE
6159: LD_INT 0
6161: PPUSH
6162: PPUSH
// begin if mpBattleFlag <= 0 then
6163: LD_EXP 24
6167: PUSH
6168: LD_INT 0
6170: LESSEQUAL
6171: IFFALSE 6175
// exit ;
6173: GO 6249
// strength := 100 ;
6175: LD_ADDR_VAR 0 2
6179: PUSH
6180: LD_INT 100
6182: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6183: LD_EXP 24
6187: PPUSH
6188: CALL_OW 67
// strength := Dec ( strength ) ;
6192: LD_ADDR_VAR 0 2
6196: PUSH
6197: LD_VAR 0 2
6201: PPUSH
6202: CALL 49729 0 1
6206: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6207: LD_VAR 0 2
6211: PPUSH
6212: CALL 6053 0 1
// until not strength ;
6216: LD_VAR 0 2
6220: NOT
6221: IFFALSE 6183
// for i in mpBattleFlags do
6223: LD_ADDR_VAR 0 1
6227: PUSH
6228: LD_EXP 25
6232: PUSH
6233: FOR_IN
6234: IFFALSE 6247
// KillBattleFlag ( i ) ;
6236: LD_VAR 0 1
6240: PPUSH
6241: CALL_OW 419
6245: GO 6233
6247: POP
6248: POP
// end ;
6249: PPOPN 2
6251: END
// every 0 0$1 marked mpActive do var side , tmp ;
6252: GO 6254
6254: DISABLE
6255: LD_INT 0
6257: PPUSH
6258: PPUSH
// begin if mpSibBomb <= 1 then
6259: LD_EXP 30
6263: PUSH
6264: LD_INT 1
6266: LESSEQUAL
6267: IFFALSE 6271
// exit ;
6269: GO 6344
// tmp := mpSibBomb ;
6271: LD_ADDR_VAR 0 2
6275: PUSH
6276: LD_EXP 30
6280: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6281: LD_INT 35
6283: PPUSH
6284: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6288: LD_ADDR_VAR 0 2
6292: PUSH
6293: LD_VAR 0 2
6297: PUSH
6298: LD_INT 35
6300: MINUS
6301: ST_TO_ADDR
// until not tmp ;
6302: LD_VAR 0 2
6306: NOT
6307: IFFALSE 6281
// for side := 1 to 8 do
6309: LD_ADDR_VAR 0 1
6313: PUSH
6314: DOUBLE
6315: LD_INT 1
6317: DEC
6318: ST_TO_ADDR
6319: LD_INT 8
6321: PUSH
6322: FOR_TO
6323: IFFALSE 6342
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6325: LD_INT 25
6327: PPUSH
6328: LD_VAR 0 1
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: CALL_OW 322
6340: GO 6322
6342: POP
6343: POP
// end ;
6344: PPOPN 2
6346: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6347: LD_INT 0
6349: PPUSH
6350: PPUSH
6351: PPUSH
// mpBuildUpTimeDelay := 0 ;
6352: LD_ADDR_EXP 48
6356: PUSH
6357: LD_INT 0
6359: ST_TO_ADDR
// if not mpBuildUpTime then
6360: LD_EXP 22
6364: NOT
6365: IFFALSE 6369
// exit ;
6367: GO 6558
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6369: LD_ADDR_EXP 48
6373: PUSH
6374: LD_INT 8400
6376: PUSH
6377: LD_INT 2100
6379: PUSH
6380: LD_EXP 22
6384: MUL
6385: PLUS
6386: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6387: LD_ADDR_EXP 49
6391: PUSH
6392: LD_INT 1
6394: ST_TO_ADDR
// for i := 1 to 8 do
6395: LD_ADDR_VAR 0 2
6399: PUSH
6400: DOUBLE
6401: LD_INT 1
6403: DEC
6404: ST_TO_ADDR
6405: LD_INT 8
6407: PUSH
6408: FOR_TO
6409: IFFALSE 6556
// if mpSidePositions [ i ] then
6411: LD_EXP 9
6415: PUSH
6416: LD_VAR 0 2
6420: ARRAY
6421: IFFALSE 6554
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6423: LD_EXP 21
6427: PUSH
6428: LD_EXP 9
6432: PUSH
6433: LD_VAR 0 2
6437: ARRAY
6438: ARRAY
6439: PPUSH
6440: LD_INT 5
6442: PPUSH
6443: CALL_OW 424
// for j := 1 to 8 do
6447: LD_ADDR_VAR 0 3
6451: PUSH
6452: DOUBLE
6453: LD_INT 1
6455: DEC
6456: ST_TO_ADDR
6457: LD_INT 8
6459: PUSH
6460: FOR_TO
6461: IFFALSE 6552
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6463: LD_EXP 9
6467: PUSH
6468: LD_VAR 0 3
6472: ARRAY
6473: IFFALSE 6522
6475: PUSH
6476: LD_EXP 10
6480: PUSH
6481: LD_VAR 0 2
6485: ARRAY
6486: PUSH
6487: LD_EXP 10
6491: PUSH
6492: LD_VAR 0 3
6496: ARRAY
6497: NONEQUAL
6498: IFTRUE 6521
6500: PUSH
6501: LD_EXP 13
6505: NOT
6506: IFFALSE 6520
6508: PUSH
6509: LD_VAR 0 2
6513: PUSH
6514: LD_VAR 0 3
6518: NONEQUAL
6519: AND
6520: OR
6521: AND
6522: IFFALSE 6550
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6524: LD_VAR 0 3
6528: PPUSH
6529: LD_EXP 21
6533: PUSH
6534: LD_EXP 9
6538: PUSH
6539: LD_VAR 0 2
6543: ARRAY
6544: ARRAY
6545: PPUSH
6546: CALL_OW 333
6550: GO 6460
6552: POP
6553: POP
// end ;
6554: GO 6408
6556: POP
6557: POP
// end ;
6558: LD_VAR 0 1
6562: RET
// function EndBuildUp ; var i , j ; begin
6563: LD_INT 0
6565: PPUSH
6566: PPUSH
6567: PPUSH
// mpBuildUpTimeActive := false ;
6568: LD_ADDR_EXP 49
6572: PUSH
6573: LD_INT 0
6575: ST_TO_ADDR
// for i := 1 to 8 do
6576: LD_ADDR_VAR 0 2
6580: PUSH
6581: DOUBLE
6582: LD_INT 1
6584: DEC
6585: ST_TO_ADDR
6586: LD_INT 8
6588: PUSH
6589: FOR_TO
6590: IFFALSE 6737
// if mpSidePositions [ i ] then
6592: LD_EXP 9
6596: PUSH
6597: LD_VAR 0 2
6601: ARRAY
6602: IFFALSE 6735
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6604: LD_EXP 21
6608: PUSH
6609: LD_EXP 9
6613: PUSH
6614: LD_VAR 0 2
6618: ARRAY
6619: ARRAY
6620: PPUSH
6621: LD_INT 0
6623: PPUSH
6624: CALL_OW 424
// for j := 1 to 8 do
6628: LD_ADDR_VAR 0 3
6632: PUSH
6633: DOUBLE
6634: LD_INT 1
6636: DEC
6637: ST_TO_ADDR
6638: LD_INT 8
6640: PUSH
6641: FOR_TO
6642: IFFALSE 6733
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6644: LD_EXP 9
6648: PUSH
6649: LD_VAR 0 3
6653: ARRAY
6654: IFFALSE 6703
6656: PUSH
6657: LD_EXP 10
6661: PUSH
6662: LD_VAR 0 2
6666: ARRAY
6667: PUSH
6668: LD_EXP 10
6672: PUSH
6673: LD_VAR 0 3
6677: ARRAY
6678: NONEQUAL
6679: IFTRUE 6702
6681: PUSH
6682: LD_EXP 13
6686: NOT
6687: IFFALSE 6701
6689: PUSH
6690: LD_VAR 0 2
6694: PUSH
6695: LD_VAR 0 3
6699: NONEQUAL
6700: AND
6701: OR
6702: AND
6703: IFFALSE 6731
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6705: LD_VAR 0 3
6709: PPUSH
6710: LD_EXP 21
6714: PUSH
6715: LD_EXP 9
6719: PUSH
6720: LD_VAR 0 2
6724: ARRAY
6725: ARRAY
6726: PPUSH
6727: CALL_OW 334
6731: GO 6641
6733: POP
6734: POP
// end ;
6735: GO 6589
6737: POP
6738: POP
// end ;
6739: LD_VAR 0 1
6743: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6744: LD_EXP 49
6748: IFFALSE 6927
6750: GO 6752
6752: DISABLE
6753: LD_INT 0
6755: PPUSH
6756: PPUSH
// begin for i := 1 to 8 do
6757: LD_ADDR_VAR 0 1
6761: PUSH
6762: DOUBLE
6763: LD_INT 1
6765: DEC
6766: ST_TO_ADDR
6767: LD_INT 8
6769: PUSH
6770: FOR_TO
6771: IFFALSE 6924
// if mpSidePositions [ i ] then
6773: LD_EXP 9
6777: PUSH
6778: LD_VAR 0 1
6782: ARRAY
6783: IFFALSE 6922
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6785: LD_ADDR_VAR 0 2
6789: PUSH
6790: LD_EXP 21
6794: PUSH
6795: LD_EXP 9
6799: PUSH
6800: LD_VAR 0 1
6804: ARRAY
6805: ARRAY
6806: PPUSH
6807: LD_INT 2
6809: PUSH
6810: LD_INT 21
6812: PUSH
6813: LD_INT 1
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: LD_INT 21
6822: PUSH
6823: LD_INT 2
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 22
6837: PUSH
6838: LD_OWVAR 2
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 70
6855: PUSH
6856: FOR_IN
6857: IFFALSE 6920
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6859: LD_EXP 10
6863: PUSH
6864: LD_VAR 0 1
6868: ARRAY
6869: PUSH
6870: LD_EXP 10
6874: PUSH
6875: LD_OWVAR 2
6879: ARRAY
6880: NONEQUAL
6881: IFTRUE 6904
6883: PUSH
6884: LD_EXP 13
6888: NOT
6889: IFFALSE 6903
6891: PUSH
6892: LD_VAR 0 1
6896: PUSH
6897: LD_OWVAR 2
6901: NONEQUAL
6902: AND
6903: OR
6904: IFFALSE 6918
// ComMoveToArea ( un , BuildUpEscape ) ;
6906: LD_VAR 0 2
6910: PPUSH
6911: LD_INT 6
6913: PPUSH
6914: CALL_OW 113
6918: GO 6856
6920: POP
6921: POP
6922: GO 6770
6924: POP
6925: POP
// enable ;
6926: ENABLE
// end ;
6927: PPOPN 2
6929: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6930: LD_EXP 22
6934: IFFALSE 6984
6936: GO 6938
6938: DISABLE
6939: LD_INT 0
6941: PPUSH
// begin tmp := mpBuildUpTime ;
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: LD_EXP 22
6951: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6952: LD_INT 35
6954: PPUSH
6955: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6959: LD_ADDR_VAR 0 1
6963: PUSH
6964: LD_VAR 0 1
6968: PUSH
6969: LD_INT 35
6971: MINUS
6972: ST_TO_ADDR
// until not tmp ;
6973: LD_VAR 0 1
6977: NOT
6978: IFFALSE 6952
// EndBuildUp ;
6980: CALL 6563 0 0
// end ;
6984: PPOPN 1
6986: END
// every 0 0$1 trigger mpActive marked mpWin do
6987: LD_INT 100
6989: IFFALSE 7023
6991: GO 6993
6993: DISABLE
// begin if IAmServer then
6994: CALL_OW 518
6998: IFFALSE 7007
// wait ( 0 0$3 ) ;
7000: LD_INT 105
7002: PPUSH
7003: CALL_OW 67
// if Multiplayer then
7007: LD_OWVAR 4
7011: IFFALSE 7019
// YouWinInMultiplayer else
7013: CALL_OW 106
7017: GO 7023
// YouWin ;
7019: CALL_OW 103
// end ;
7023: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7024: LD_INT 0
7026: PPUSH
// result := false ;
7027: LD_ADDR_VAR 0 3
7031: PUSH
7032: LD_INT 0
7034: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
7035: LD_VAR 0 1
7039: PUSH
7040: LD_INT 1
7042: DOUBLE
7043: EQUAL
7044: IFTRUE 7054
7046: LD_INT 5
7048: DOUBLE
7049: EQUAL
7050: IFTRUE 7054
7052: GO 7127
7054: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7055: LD_ADDR_VAR 0 3
7059: PUSH
7060: LD_INT 22
7062: PUSH
7063: LD_VAR 0 2
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: LD_INT 2
7074: PUSH
7075: LD_INT 21
7077: PUSH
7078: LD_INT 1
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: LD_INT 33
7087: PUSH
7088: LD_INT 3
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: LD_INT 33
7097: PUSH
7098: LD_INT 5
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PPUSH
7115: CALL_OW 69
7119: PPUSH
7120: CALL 12402 0 1
7124: ST_TO_ADDR
// end ; GameTypeSurvival :
7125: GO 7366
7127: LD_INT 2
7129: DOUBLE
7130: EQUAL
7131: IFTRUE 7135
7133: GO 7265
7135: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7136: LD_ADDR_VAR 0 3
7140: PUSH
7141: LD_INT 22
7143: PUSH
7144: LD_VAR 0 2
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: LD_INT 2
7155: PUSH
7156: LD_INT 30
7158: PUSH
7159: LD_INT 0
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 30
7168: PUSH
7169: LD_INT 1
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PPUSH
7185: CALL_OW 69
7189: PPUSH
7190: CALL 12402 0 1
7194: IFFALSE 7262
7196: PUSH
7197: LD_INT 22
7199: PUSH
7200: LD_VAR 0 2
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: LD_INT 2
7211: PUSH
7212: LD_INT 21
7214: PUSH
7215: LD_INT 1
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 33
7224: PUSH
7225: LD_INT 3
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: LD_INT 33
7234: PUSH
7235: LD_INT 5
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PPUSH
7252: CALL_OW 69
7256: PPUSH
7257: CALL 12402 0 1
7261: AND
7262: ST_TO_ADDR
// end ; GameTypeKing :
7263: GO 7366
7265: LD_INT 3
7267: DOUBLE
7268: EQUAL
7269: IFTRUE 7273
7271: GO 7365
7273: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7274: LD_ADDR_VAR 0 3
7278: PUSH
7279: LD_INT 22
7281: PUSH
7282: LD_VAR 0 2
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: LD_INT 2
7293: PUSH
7294: LD_INT 21
7296: PUSH
7297: LD_INT 1
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 33
7306: PUSH
7307: LD_INT 3
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 33
7316: PUSH
7317: LD_INT 5
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PPUSH
7334: CALL_OW 69
7338: PPUSH
7339: CALL 12402 0 1
7343: IFFALSE 7362
7345: PUSH
7346: LD_VAR 0 2
7350: PPUSH
7351: CALL 60298 0 1
7355: PUSH
7356: LD_EXP 37
7360: LESS
7361: AND
7362: ST_TO_ADDR
// end ; end ;
7363: GO 7366
7365: POP
// end ;
7366: LD_VAR 0 3
7370: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7371: LD_INT 100
7373: IFFALSE 7603
7375: GO 7377
7377: DISABLE
7378: LD_INT 0
7380: PPUSH
7381: PPUSH
// begin if Multiplayer then
7382: LD_OWVAR 4
7386: IFFALSE 7394
// SetPlayerSpectator ( ) else
7388: CALL_OW 572
7392: GO 7403
// FogOff ( your_side ) ;
7394: LD_OWVAR 2
7398: PPUSH
7399: CALL_OW 344
// repeat gameIsOn := false ;
7403: LD_ADDR_VAR 0 1
7407: PUSH
7408: LD_INT 0
7410: ST_TO_ADDR
// for i := 1 to 8 do
7411: LD_ADDR_VAR 0 2
7415: PUSH
7416: DOUBLE
7417: LD_INT 1
7419: DEC
7420: ST_TO_ADDR
7421: LD_INT 8
7423: PUSH
7424: FOR_TO
7425: IFFALSE 7555
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7427: LD_EXP 9
7431: PUSH
7432: LD_VAR 0 2
7436: ARRAY
7437: IFFALSE 7450
7439: PUSH
7440: LD_VAR 0 2
7444: PPUSH
7445: CALL_OW 108
7449: AND
7450: IFFALSE 7464
7452: PUSH
7453: LD_VAR 0 2
7457: PUSH
7458: LD_OWVAR 2
7462: NONEQUAL
7463: AND
7464: IFFALSE 7553
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7466: LD_EXP 10
7470: PUSH
7471: LD_VAR 0 2
7475: ARRAY
7476: NOT
7477: IFTRUE 7525
7479: PUSH
7480: LD_EXP 10
7484: PUSH
7485: LD_VAR 0 2
7489: ARRAY
7490: PUSH
7491: LD_EXP 10
7495: PUSH
7496: LD_OWVAR 2
7500: ARRAY
7501: NONEQUAL
7502: IFFALSE 7524
7504: PUSH
7505: LD_OWVAR 2
7509: PPUSH
7510: LD_VAR 0 2
7514: PPUSH
7515: CALL_OW 81
7519: PUSH
7520: LD_INT 1
7522: NONEQUAL
7523: AND
7524: OR
7525: IFFALSE 7553
// if HasPowerByGameType ( mpGameType , i ) then
7527: LD_EXP 5
7531: PPUSH
7532: LD_VAR 0 2
7536: PPUSH
7537: CALL 7024 0 2
7541: IFFALSE 7553
// begin gameIsOn := true ;
7543: LD_ADDR_VAR 0 1
7547: PUSH
7548: LD_INT 1
7550: ST_TO_ADDR
// break ;
7551: GO 7555
// end ;
7553: GO 7424
7555: POP
7556: POP
// wait ( 100 ) ;
7557: LD_INT 100
7559: PPUSH
7560: CALL_OW 67
// until not gameIsOn ;
7564: LD_VAR 0 1
7568: NOT
7569: IFFALSE 7403
// if IAmServer then
7571: CALL_OW 518
7575: IFFALSE 7584
// wait ( 0 0$3 ) ;
7577: LD_INT 105
7579: PPUSH
7580: CALL_OW 67
// if Multiplayer then
7584: LD_OWVAR 4
7588: IFFALSE 7596
// YouLostInMultiplayer else
7590: CALL_OW 107
7594: GO 7603
// YouLost (  ) ;
7596: LD_STRING 
7598: PPUSH
7599: CALL_OW 104
// end ;
7603: PPOPN 2
7605: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7606: LD_EXP 35
7610: IFFALSE 7994
7612: GO 7614
7614: DISABLE
7615: LD_INT 0
7617: PPUSH
7618: PPUSH
7619: PPUSH
7620: PPUSH
7621: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7622: LD_ADDR_VAR 0 5
7626: PUSH
7627: LD_INT 1
7629: PUSH
7630: LD_INT 2
7632: PUSH
7633: LD_INT 3
7635: PUSH
7636: LD_INT 4
7638: PUSH
7639: LD_INT 5
7641: PUSH
7642: LD_INT 6
7644: PUSH
7645: LD_INT 7
7647: PUSH
7648: LD_INT 8
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7661: LD_INT 350
7663: PPUSH
7664: CALL_OW 67
// for i := 1 to 8 do
7668: LD_ADDR_VAR 0 1
7672: PUSH
7673: DOUBLE
7674: LD_INT 1
7676: DEC
7677: ST_TO_ADDR
7678: LD_INT 8
7680: PUSH
7681: FOR_TO
7682: IFFALSE 7964
// begin j := sides [ i ] ;
7684: LD_ADDR_VAR 0 2
7688: PUSH
7689: LD_VAR 0 5
7693: PUSH
7694: LD_VAR 0 1
7698: ARRAY
7699: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7700: LD_EXP 42
7704: PUSH
7705: LD_VAR 0 2
7709: ARRAY
7710: PPUSH
7711: CALL 12402 0 1
7715: IFFALSE 7728
7717: PUSH
7718: LD_VAR 0 2
7722: PPUSH
7723: CALL_OW 108
7727: AND
7728: IFFALSE 7746
7730: PUSH
7731: LD_EXP 5
7735: PPUSH
7736: LD_VAR 0 2
7740: PPUSH
7741: CALL 7024 0 2
7745: AND
7746: IFFALSE 7962
// begin wait ( mpRespawn div 2 ) ;
7748: LD_EXP 35
7752: PUSH
7753: LD_INT 2
7755: DIV
7756: PPUSH
7757: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7761: LD_ADDR_VAR 0 3
7765: PUSH
7766: LD_INT 22
7768: PUSH
7769: LD_VAR 0 2
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: LD_INT 50
7780: PUSH
7781: EMPTY
7782: LIST
7783: PUSH
7784: LD_INT 2
7786: PUSH
7787: LD_INT 30
7789: PUSH
7790: LD_INT 0
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 30
7799: PUSH
7800: LD_INT 1
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: LIST
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL_OW 69
7821: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7822: LD_VAR 0 3
7826: NOT
7827: IFTRUE 7841
7829: PUSH
7830: LD_VAR 0 2
7834: PPUSH
7835: CALL_OW 108
7839: NOT
7840: OR
7841: IFTRUE 7860
7843: PUSH
7844: LD_EXP 5
7848: PPUSH
7849: LD_VAR 0 2
7853: PPUSH
7854: CALL 7024 0 2
7858: NOT
7859: OR
7860: IFFALSE 7864
// continue ;
7862: GO 7681
// spawn := tmp [ 1 ] ;
7864: LD_ADDR_VAR 0 4
7868: PUSH
7869: LD_VAR 0 3
7873: PUSH
7874: LD_INT 1
7876: ARRAY
7877: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7878: LD_EXP 42
7882: PUSH
7883: LD_VAR 0 2
7887: ARRAY
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PPUSH
7893: LD_VAR 0 4
7897: PPUSH
7898: CALL_OW 250
7902: PPUSH
7903: LD_VAR 0 4
7907: PPUSH
7908: CALL_OW 251
7912: PPUSH
7913: LD_INT 32
7915: PPUSH
7916: LD_INT 1
7918: PPUSH
7919: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7923: LD_ADDR_EXP 42
7927: PUSH
7928: LD_EXP 42
7932: PPUSH
7933: LD_VAR 0 2
7937: PPUSH
7938: LD_EXP 42
7942: PUSH
7943: LD_VAR 0 2
7947: ARRAY
7948: PPUSH
7949: LD_INT 1
7951: PPUSH
7952: CALL_OW 3
7956: PPUSH
7957: CALL_OW 1
7961: ST_TO_ADDR
// end ; end ;
7962: GO 7681
7964: POP
7965: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7966: LD_ADDR_VAR 0 5
7970: PUSH
7971: LD_VAR 0 5
7975: PPUSH
7976: LD_INT 1
7978: PPUSH
7979: LD_INT 8
7981: PPUSH
7982: LD_INT 1
7984: PPUSH
7985: CALL 14694 0 4
7989: ST_TO_ADDR
// until false ;
7990: LD_INT 0
7992: IFFALSE 7661
// end ;
7994: PPOPN 5
7996: END
// every 0 0$1 marked mpActive do
7997: GO 7999
7999: DISABLE
// begin enable ;
8000: ENABLE
// if not mpDisplayStrings then
8001: LD_EXP 40
8005: NOT
8006: IFFALSE 8017
// begin display_strings := [ ] ;
8008: LD_ADDR_OWVAR 47
8012: PUSH
8013: EMPTY
8014: ST_TO_ADDR
// exit ;
8015: GO 8027
// end ; display_strings := mpDisplayStrings ;
8017: LD_ADDR_OWVAR 47
8021: PUSH
8022: LD_EXP 40
8026: ST_TO_ADDR
// end ; end_of_file
8027: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8028: LD_INT 0
8030: PPUSH
8031: PPUSH
8032: PPUSH
8033: PPUSH
8034: PPUSH
8035: PPUSH
8036: PPUSH
8037: PPUSH
8038: PPUSH
// if GetType ( un ) = unit_vehicle then
8039: LD_VAR 0 1
8043: PPUSH
8044: CALL_OW 247
8048: PUSH
8049: LD_INT 2
8051: EQUAL
8052: IFFALSE 8056
// exit ;
8054: GO 8730
// side := GetSide ( un ) ;
8056: LD_ADDR_VAR 0 9
8060: PUSH
8061: LD_VAR 0 1
8065: PPUSH
8066: CALL_OW 255
8070: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
8071: LD_EXP 5
8075: PUSH
8076: LD_INT 2
8078: EQUAL
8079: IFFALSE 8173
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8081: LD_VAR 0 1
8085: PPUSH
8086: CALL_OW 266
8090: PUSH
8091: LD_INT 0
8093: PUSH
8094: LD_INT 1
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: IN
8101: IFFALSE 8173
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8103: LD_ADDR_VAR 0 3
8107: PUSH
8108: LD_INT 22
8110: PUSH
8111: LD_VAR 0 9
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: PUSH
8120: LD_INT 2
8122: PUSH
8123: LD_INT 21
8125: PUSH
8126: LD_INT 1
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: LD_INT 33
8135: PUSH
8136: LD_INT 3
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: LIST
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PPUSH
8152: CALL_OW 69
8156: PUSH
8157: FOR_IN
8158: IFFALSE 8171
// KillUnit ( i ) ;
8160: LD_VAR 0 3
8164: PPUSH
8165: CALL_OW 66
8169: GO 8157
8171: POP
8172: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8173: LD_VAR 0 1
8177: PPUSH
8178: CALL_OW 257
8182: PUSH
8183: LD_INT 12
8185: PUSH
8186: LD_INT 17
8188: PUSH
8189: LD_INT 15
8191: PUSH
8192: LD_INT 16
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: IN
8201: IFTRUE 8218
8203: PUSH
8204: LD_VAR 0 1
8208: PPUSH
8209: CALL_OW 263
8213: PUSH
8214: LD_INT 5
8216: EQUAL
8217: OR
8218: IFFALSE 8455
// begin tag := 0 ;
8220: LD_ADDR_VAR 0 5
8224: PUSH
8225: LD_INT 0
8227: ST_TO_ADDR
// for i := 1 to 8 do
8228: LD_ADDR_VAR 0 3
8232: PUSH
8233: DOUBLE
8234: LD_INT 1
8236: DEC
8237: ST_TO_ADDR
8238: LD_INT 8
8240: PUSH
8241: FOR_TO
8242: IFFALSE 8276
// if un in mpApePosIndex [ i ] then
8244: LD_VAR 0 1
8248: PUSH
8249: LD_EXP 34
8253: PUSH
8254: LD_VAR 0 3
8258: ARRAY
8259: IN
8260: IFFALSE 8274
// begin tag := i ;
8262: LD_ADDR_VAR 0 5
8266: PUSH
8267: LD_VAR 0 3
8271: ST_TO_ADDR
// break ;
8272: GO 8276
// end ;
8274: GO 8241
8276: POP
8277: POP
// if not tag then
8278: LD_VAR 0 5
8282: NOT
8283: IFFALSE 8287
// exit ;
8285: GO 8730
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8287: LD_ADDR_VAR 0 7
8291: PUSH
8292: LD_EXP 33
8296: PUSH
8297: LD_EXP 9
8301: PUSH
8302: LD_VAR 0 5
8306: ARRAY
8307: ARRAY
8308: ST_TO_ADDR
// if not area then
8309: LD_VAR 0 7
8313: NOT
8314: IFFALSE 8318
// exit ;
8316: GO 8730
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8318: LD_INT 14700
8320: PUSH
8321: LD_VAR 0 1
8325: PUSH
8326: LD_INT 5
8328: MOD
8329: PUSH
8330: LD_INT 1
8332: PLUS
8333: PUSH
8334: LD_INT 700
8336: MUL
8337: PLUS
8338: PPUSH
8339: CALL_OW 67
// repeat wait ( 10 ) ;
8343: LD_INT 10
8345: PPUSH
8346: CALL_OW 67
// until not mpBlockRespThread ;
8350: LD_EXP 47
8354: NOT
8355: IFFALSE 8343
// mpBlockRespThread := true ;
8357: LD_ADDR_EXP 47
8361: PUSH
8362: LD_INT 1
8364: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8365: LD_INT 0
8367: PPUSH
8368: CALL 44461 0 1
// ape := CreateHuman ;
8372: LD_ADDR_VAR 0 4
8376: PUSH
8377: CALL_OW 44
8381: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8382: LD_ADDR_EXP 34
8386: PUSH
8387: LD_EXP 34
8391: PPUSH
8392: LD_VAR 0 5
8396: PPUSH
8397: LD_EXP 34
8401: PUSH
8402: LD_VAR 0 5
8406: ARRAY
8407: PPUSH
8408: LD_VAR 0 4
8412: PPUSH
8413: CALL 48334 0 2
8417: PPUSH
8418: CALL_OW 1
8422: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8423: LD_VAR 0 4
8427: PPUSH
8428: LD_VAR 0 7
8432: PPUSH
8433: LD_INT 0
8435: PPUSH
8436: CALL_OW 49
// wait ( 10 ) ;
8440: LD_INT 10
8442: PPUSH
8443: CALL_OW 67
// mpBlockRespThread := false ;
8447: LD_ADDR_EXP 47
8451: PUSH
8452: LD_INT 0
8454: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8455: LD_VAR 0 1
8459: PPUSH
8460: CALL_OW 247
8464: PUSH
8465: LD_INT 1
8467: EQUAL
8468: IFFALSE 8485
8470: PUSH
8471: LD_VAR 0 1
8475: PPUSH
8476: CALL_OW 248
8480: PUSH
8481: LD_INT 0
8483: GREATER
8484: AND
8485: IFFALSE 8730
// begin if not mpRespawn then
8487: LD_EXP 35
8491: NOT
8492: IFFALSE 8496
// exit ;
8494: GO 8730
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8496: LD_VAR 0 9
8500: PPUSH
8501: CALL_OW 108
8505: NOT
8506: IFFALSE 8525
8508: PUSH
8509: LD_EXP 5
8513: PPUSH
8514: LD_VAR 0 9
8518: PPUSH
8519: CALL 7024 0 2
8523: NOT
8524: AND
8525: IFFALSE 8529
// exit ;
8527: GO 8730
// side := GetSide ( un ) ;
8529: LD_ADDR_VAR 0 9
8533: PUSH
8534: LD_VAR 0 1
8538: PPUSH
8539: CALL_OW 255
8543: ST_TO_ADDR
// nation := GetNation ( un ) ;
8544: LD_ADDR_VAR 0 8
8548: PUSH
8549: LD_VAR 0 1
8553: PPUSH
8554: CALL_OW 248
8558: ST_TO_ADDR
// class := GetClass ( un ) ;
8559: LD_ADDR_VAR 0 6
8563: PUSH
8564: LD_VAR 0 1
8568: PPUSH
8569: CALL_OW 257
8573: ST_TO_ADDR
// if class > 4 then
8574: LD_VAR 0 6
8578: PUSH
8579: LD_INT 4
8581: GREATER
8582: IFFALSE 8592
// class := 1 ;
8584: LD_ADDR_VAR 0 6
8588: PUSH
8589: LD_INT 1
8591: ST_TO_ADDR
// repeat wait ( 10 ) ;
8592: LD_INT 10
8594: PPUSH
8595: CALL_OW 67
// until not mpBlockRespThread ;
8599: LD_EXP 47
8603: NOT
8604: IFFALSE 8592
// mpBlockRespThread := true ;
8606: LD_ADDR_EXP 47
8610: PUSH
8611: LD_INT 1
8613: ST_TO_ADDR
// uc_side := side ;
8614: LD_ADDR_OWVAR 20
8618: PUSH
8619: LD_VAR 0 9
8623: ST_TO_ADDR
// uc_nation := nation ;
8624: LD_ADDR_OWVAR 21
8628: PUSH
8629: LD_VAR 0 8
8633: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8634: LD_INT 0
8636: PPUSH
8637: LD_VAR 0 6
8641: PPUSH
8642: LD_INT 2
8644: PPUSH
8645: CALL_OW 380
// un := CreateHuman ;
8649: LD_ADDR_VAR 0 1
8653: PUSH
8654: CALL_OW 44
8658: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8659: LD_ADDR_EXP 42
8663: PUSH
8664: LD_EXP 42
8668: PPUSH
8669: LD_VAR 0 9
8673: PPUSH
8674: LD_EXP 42
8678: PUSH
8679: LD_VAR 0 9
8683: ARRAY
8684: PPUSH
8685: LD_EXP 42
8689: PUSH
8690: LD_VAR 0 9
8694: ARRAY
8695: PUSH
8696: LD_INT 1
8698: PLUS
8699: PPUSH
8700: LD_VAR 0 1
8704: PPUSH
8705: CALL_OW 1
8709: PPUSH
8710: CALL_OW 1
8714: ST_TO_ADDR
// wait ( 10 ) ;
8715: LD_INT 10
8717: PPUSH
8718: CALL_OW 67
// mpBlockRespThread := false ;
8722: LD_ADDR_EXP 47
8726: PUSH
8727: LD_INT 0
8729: ST_TO_ADDR
// end ; end ;
8730: LD_VAR 0 2
8734: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8735: LD_INT 0
8737: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8738: LD_VAR 0 1
8742: PPUSH
8743: CALL_OW 266
8747: PUSH
8748: LD_INT 0
8750: PUSH
8751: LD_INT 1
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: IN
8758: IFFALSE 8783
// SetBName ( building , @ & GetSide ( building ) ) ;
8760: LD_VAR 0 1
8764: PPUSH
8765: LD_STRING @
8767: PUSH
8768: LD_VAR 0 1
8772: PPUSH
8773: CALL_OW 255
8777: STR
8778: PPUSH
8779: CALL_OW 500
// end ;
8783: LD_VAR 0 2
8787: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8788: LD_INT 0
8790: PPUSH
8791: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8792: LD_EXP 5
8796: PUSH
8797: LD_INT 2
8799: EQUAL
8800: IFFALSE 8824
8802: PUSH
8803: LD_VAR 0 1
8807: PPUSH
8808: CALL_OW 266
8812: PUSH
8813: LD_INT 0
8815: PUSH
8816: LD_INT 1
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: IN
8823: AND
8824: IFFALSE 8903
// begin SetSide ( building , oldSide ) ;
8826: LD_VAR 0 1
8830: PPUSH
8831: LD_VAR 0 2
8835: PPUSH
8836: CALL_OW 235
// KillUnit ( building ) ;
8840: LD_VAR 0 1
8844: PPUSH
8845: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8849: LD_ADDR_VAR 0 5
8853: PUSH
8854: LD_INT 22
8856: PUSH
8857: LD_VAR 0 2
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 21
8868: PUSH
8869: LD_INT 1
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PPUSH
8880: CALL_OW 69
8884: PUSH
8885: FOR_IN
8886: IFFALSE 8899
// KillUnit ( i ) ;
8888: LD_VAR 0 5
8892: PPUSH
8893: CALL_OW 66
8897: GO 8885
8899: POP
8900: POP
// exit ;
8901: GO 8948
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8903: LD_VAR 0 1
8907: PPUSH
8908: CALL_OW 266
8912: PUSH
8913: LD_INT 0
8915: PUSH
8916: LD_INT 1
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: IN
8923: IFFALSE 8948
// SetBName ( building , @ & GetSide ( building ) ) ;
8925: LD_VAR 0 1
8929: PPUSH
8930: LD_STRING @
8932: PUSH
8933: LD_VAR 0 1
8937: PPUSH
8938: CALL_OW 255
8942: STR
8943: PPUSH
8944: CALL_OW 500
// end ;
8948: LD_VAR 0 4
8952: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8953: LD_INT 0
8955: PPUSH
8956: PPUSH
8957: PPUSH
// if mpGameType <> GameTypeFamine then
8958: LD_EXP 5
8962: PUSH
8963: LD_INT 5
8965: NONEQUAL
8966: IFFALSE 8970
// exit ;
8968: GO 9184
// for i := 1 to mpGlobalOilDeposits do
8970: LD_ADDR_VAR 0 6
8974: PUSH
8975: DOUBLE
8976: LD_INT 1
8978: DEC
8979: ST_TO_ADDR
8980: LD_EXP 43
8984: PUSH
8985: FOR_TO
8986: IFFALSE 9182
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8988: LD_EXP 43
8992: PUSH
8993: LD_VAR 0 6
8997: ARRAY
8998: PUSH
8999: LD_INT 1
9001: ARRAY
9002: PPUSH
9003: LD_EXP 43
9007: PUSH
9008: LD_VAR 0 6
9012: ARRAY
9013: PUSH
9014: LD_INT 2
9016: ARRAY
9017: PPUSH
9018: CALL_OW 428
9022: PUSH
9023: LD_VAR 0 1
9027: EQUAL
9028: IFFALSE 9180
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9030: LD_ADDR_VAR 0 7
9034: PUSH
9035: LD_EXP 43
9039: PUSH
9040: LD_VAR 0 6
9044: ARRAY
9045: PUSH
9046: LD_INT 3
9048: ARRAY
9049: ST_TO_ADDR
// value := Dec ( value ) ;
9050: LD_ADDR_VAR 0 7
9054: PUSH
9055: LD_VAR 0 7
9059: PPUSH
9060: CALL 49729 0 1
9064: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9065: LD_ADDR_EXP 43
9069: PUSH
9070: LD_EXP 43
9074: PPUSH
9075: LD_VAR 0 6
9079: PPUSH
9080: LD_EXP 43
9084: PUSH
9085: LD_VAR 0 6
9089: ARRAY
9090: PPUSH
9091: LD_INT 3
9093: PPUSH
9094: LD_VAR 0 7
9098: PPUSH
9099: CALL_OW 1
9103: PPUSH
9104: CALL_OW 1
9108: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9109: LD_VAR 0 1
9113: PPUSH
9114: LD_VAR 0 7
9118: PPUSH
9119: CALL_OW 505
// if value = 0 then
9123: LD_VAR 0 7
9127: PUSH
9128: LD_INT 0
9130: EQUAL
9131: IFFALSE 9180
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9133: LD_EXP 43
9137: PUSH
9138: LD_VAR 0 6
9142: ARRAY
9143: PUSH
9144: LD_INT 1
9146: ARRAY
9147: PPUSH
9148: LD_EXP 43
9152: PUSH
9153: LD_VAR 0 6
9157: ARRAY
9158: PUSH
9159: LD_INT 2
9161: ARRAY
9162: PPUSH
9163: CALL_OW 63
// KillUnit ( building ) ;
9167: LD_VAR 0 1
9171: PPUSH
9172: CALL_OW 66
// exit ;
9176: POP
9177: POP
9178: GO 9184
// end ; end ; end ;
9180: GO 8985
9182: POP
9183: POP
// end ;
9184: LD_VAR 0 5
9188: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9189: LD_INT 0
9191: PPUSH
9192: PPUSH
9193: PPUSH
// if mpGameType <> GameTypeFamine then
9194: LD_EXP 5
9198: PUSH
9199: LD_INT 5
9201: NONEQUAL
9202: IFFALSE 9206
// exit ;
9204: GO 9420
// for i := 1 to mpGlobalSibDeposits do
9206: LD_ADDR_VAR 0 6
9210: PUSH
9211: DOUBLE
9212: LD_INT 1
9214: DEC
9215: ST_TO_ADDR
9216: LD_EXP 44
9220: PUSH
9221: FOR_TO
9222: IFFALSE 9418
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9224: LD_EXP 44
9228: PUSH
9229: LD_VAR 0 6
9233: ARRAY
9234: PUSH
9235: LD_INT 1
9237: ARRAY
9238: PPUSH
9239: LD_EXP 44
9243: PUSH
9244: LD_VAR 0 6
9248: ARRAY
9249: PUSH
9250: LD_INT 2
9252: ARRAY
9253: PPUSH
9254: CALL_OW 428
9258: PUSH
9259: LD_VAR 0 1
9263: EQUAL
9264: IFFALSE 9416
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9266: LD_ADDR_VAR 0 7
9270: PUSH
9271: LD_EXP 44
9275: PUSH
9276: LD_VAR 0 6
9280: ARRAY
9281: PUSH
9282: LD_INT 3
9284: ARRAY
9285: ST_TO_ADDR
// value := Dec ( value ) ;
9286: LD_ADDR_VAR 0 7
9290: PUSH
9291: LD_VAR 0 7
9295: PPUSH
9296: CALL 49729 0 1
9300: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9301: LD_ADDR_EXP 44
9305: PUSH
9306: LD_EXP 44
9310: PPUSH
9311: LD_VAR 0 6
9315: PPUSH
9316: LD_EXP 44
9320: PUSH
9321: LD_VAR 0 6
9325: ARRAY
9326: PPUSH
9327: LD_INT 3
9329: PPUSH
9330: LD_VAR 0 7
9334: PPUSH
9335: CALL_OW 1
9339: PPUSH
9340: CALL_OW 1
9344: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9345: LD_VAR 0 1
9349: PPUSH
9350: LD_VAR 0 7
9354: PPUSH
9355: CALL_OW 505
// if value = 0 then
9359: LD_VAR 0 7
9363: PUSH
9364: LD_INT 0
9366: EQUAL
9367: IFFALSE 9416
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9369: LD_EXP 44
9373: PUSH
9374: LD_VAR 0 6
9378: ARRAY
9379: PUSH
9380: LD_INT 1
9382: ARRAY
9383: PPUSH
9384: LD_EXP 44
9388: PUSH
9389: LD_VAR 0 6
9393: ARRAY
9394: PUSH
9395: LD_INT 2
9397: ARRAY
9398: PPUSH
9399: CALL_OW 63
// KillUnit ( building ) ;
9403: LD_VAR 0 1
9407: PPUSH
9408: CALL_OW 66
// exit ;
9412: POP
9413: POP
9414: GO 9420
// end ; end ; end ;
9416: GO 9221
9418: POP
9419: POP
// end ; end_of_file
9420: LD_VAR 0 5
9424: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9425: LD_EXP 41
9429: IFFALSE 9437
9431: PUSH
9432: CALL 9647 0 0
9436: AND
9437: IFFALSE 9445
9439: PUSH
9440: LD_OWVAR 4
9444: AND
9445: IFFALSE 9644
9447: GO 9449
9449: DISABLE
9450: LD_INT 0
9452: PPUSH
9453: PPUSH
// begin canWin := false ;
9454: LD_ADDR_VAR 0 2
9458: PUSH
9459: LD_INT 0
9461: ST_TO_ADDR
// if not HasPower ( your_side ) then
9462: LD_OWVAR 2
9466: PPUSH
9467: CALL 9689 0 1
9471: NOT
9472: IFFALSE 9483
// begin Multiplayer_Loose_Message ;
9474: CALL_OW 521
// enable ( mpLose ) ;
9478: LD_INT 102
9480: ENABLE_MARKED
// end else
9481: GO 9644
// begin canWin := true ;
9483: LD_ADDR_VAR 0 2
9487: PUSH
9488: LD_INT 1
9490: ST_TO_ADDR
// for i := 1 to 8 do
9491: LD_ADDR_VAR 0 1
9495: PUSH
9496: DOUBLE
9497: LD_INT 1
9499: DEC
9500: ST_TO_ADDR
9501: LD_INT 8
9503: PUSH
9504: FOR_TO
9505: IFFALSE 9630
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9507: LD_EXP 9
9511: PUSH
9512: LD_VAR 0 1
9516: ARRAY
9517: IFFALSE 9530
9519: PUSH
9520: LD_VAR 0 1
9524: PPUSH
9525: CALL_OW 108
9529: AND
9530: IFFALSE 9544
9532: PUSH
9533: LD_VAR 0 1
9537: PUSH
9538: LD_OWVAR 2
9542: NONEQUAL
9543: AND
9544: IFFALSE 9628
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9546: LD_EXP 10
9550: PUSH
9551: LD_VAR 0 1
9555: ARRAY
9556: NOT
9557: IFTRUE 9605
9559: PUSH
9560: LD_EXP 10
9564: PUSH
9565: LD_VAR 0 1
9569: ARRAY
9570: PUSH
9571: LD_EXP 10
9575: PUSH
9576: LD_OWVAR 2
9580: ARRAY
9581: NONEQUAL
9582: IFFALSE 9604
9584: PUSH
9585: LD_OWVAR 2
9589: PPUSH
9590: LD_VAR 0 1
9594: PPUSH
9595: CALL_OW 81
9599: PUSH
9600: LD_INT 1
9602: NONEQUAL
9603: AND
9604: OR
9605: IFFALSE 9628
// if HasPower ( i ) then
9607: LD_VAR 0 1
9611: PPUSH
9612: CALL 9689 0 1
9616: IFFALSE 9628
// begin canWin := false ;
9618: LD_ADDR_VAR 0 2
9622: PUSH
9623: LD_INT 0
9625: ST_TO_ADDR
// break ;
9626: GO 9630
// end ;
9628: GO 9504
9630: POP
9631: POP
// if canWin then
9632: LD_VAR 0 2
9636: IFFALSE 9643
// enable ( mpWin ) else
9638: LD_INT 101
9640: ENABLE_MARKED
9641: GO 9644
// enable ;
9643: ENABLE
// end ; end ;
9644: PPOPN 2
9646: END
// function CanWinLoose ; begin
9647: LD_INT 0
9649: PPUSH
// result := true ;
9650: LD_ADDR_VAR 0 1
9654: PUSH
9655: LD_INT 1
9657: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9658: CALL_OW 531
9662: IFFALSE 9674
9664: PUSH
9665: CALL_OW 519
9669: PUSH
9670: LD_INT 1
9672: GREATER
9673: AND
9674: IFFALSE 9684
// result := false ;
9676: LD_ADDR_VAR 0 1
9680: PUSH
9681: LD_INT 0
9683: ST_TO_ADDR
// end ;
9684: LD_VAR 0 1
9688: RET
// function HasPower ( i ) ; begin
9689: LD_INT 0
9691: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9692: LD_ADDR_VAR 0 2
9696: PUSH
9697: LD_INT 22
9699: PUSH
9700: LD_VAR 0 1
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: PUSH
9709: LD_INT 2
9711: PUSH
9712: LD_INT 21
9714: PUSH
9715: LD_INT 1
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: LD_INT 33
9724: PUSH
9725: LD_INT 3
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: PUSH
9732: LD_INT 33
9734: PUSH
9735: LD_INT 5
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: PPUSH
9752: CALL_OW 69
9756: ST_TO_ADDR
// end ; end_of_file
9757: LD_VAR 0 2
9761: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9762: LD_EXP 41
9766: IFFALSE 9809
9768: GO 9770
9770: DISABLE
9771: LD_INT 0
9773: PPUSH
// begin for i := 1 to 8 do
9774: LD_ADDR_VAR 0 1
9778: PUSH
9779: DOUBLE
9780: LD_INT 1
9782: DEC
9783: ST_TO_ADDR
9784: LD_INT 8
9786: PUSH
9787: FOR_TO
9788: IFFALSE 9807
// SetRestrict ( b_depot , i , state_disabled ) ;
9790: LD_INT 0
9792: PPUSH
9793: LD_VAR 0 1
9797: PPUSH
9798: LD_INT 0
9800: PPUSH
9801: CALL_OW 324
9805: GO 9787
9807: POP
9808: POP
// end ;
9809: PPOPN 1
9811: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9812: LD_EXP 41
9816: IFFALSE 9824
9818: PUSH
9819: CALL 10034 0 0
9823: AND
9824: IFFALSE 9832
9826: PUSH
9827: LD_OWVAR 4
9831: AND
9832: IFFALSE 10031
9834: GO 9836
9836: DISABLE
9837: LD_INT 0
9839: PPUSH
9840: PPUSH
// begin canWin := false ;
9841: LD_ADDR_VAR 0 2
9845: PUSH
9846: LD_INT 0
9848: ST_TO_ADDR
// if not HasPower ( your_side ) then
9849: LD_OWVAR 2
9853: PPUSH
9854: CALL 10076 0 1
9858: NOT
9859: IFFALSE 9870
// begin Multiplayer_Loose_Message ;
9861: CALL_OW 521
// enable ( mpLose ) ;
9865: LD_INT 102
9867: ENABLE_MARKED
// end else
9868: GO 10031
// begin canWin := true ;
9870: LD_ADDR_VAR 0 2
9874: PUSH
9875: LD_INT 1
9877: ST_TO_ADDR
// for i := 1 to 8 do
9878: LD_ADDR_VAR 0 1
9882: PUSH
9883: DOUBLE
9884: LD_INT 1
9886: DEC
9887: ST_TO_ADDR
9888: LD_INT 8
9890: PUSH
9891: FOR_TO
9892: IFFALSE 10017
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9894: LD_EXP 9
9898: PUSH
9899: LD_VAR 0 1
9903: ARRAY
9904: IFFALSE 9917
9906: PUSH
9907: LD_VAR 0 1
9911: PPUSH
9912: CALL_OW 108
9916: AND
9917: IFFALSE 9931
9919: PUSH
9920: LD_VAR 0 1
9924: PUSH
9925: LD_OWVAR 2
9929: NONEQUAL
9930: AND
9931: IFFALSE 10015
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9933: LD_EXP 10
9937: PUSH
9938: LD_VAR 0 1
9942: ARRAY
9943: NOT
9944: IFTRUE 9992
9946: PUSH
9947: LD_EXP 10
9951: PUSH
9952: LD_VAR 0 1
9956: ARRAY
9957: PUSH
9958: LD_EXP 10
9962: PUSH
9963: LD_OWVAR 2
9967: ARRAY
9968: NONEQUAL
9969: IFFALSE 9991
9971: PUSH
9972: LD_OWVAR 2
9976: PPUSH
9977: LD_VAR 0 1
9981: PPUSH
9982: CALL_OW 81
9986: PUSH
9987: LD_INT 1
9989: NONEQUAL
9990: AND
9991: OR
9992: IFFALSE 10015
// if HasPower ( i ) then
9994: LD_VAR 0 1
9998: PPUSH
9999: CALL 10076 0 1
10003: IFFALSE 10015
// begin canWin := false ;
10005: LD_ADDR_VAR 0 2
10009: PUSH
10010: LD_INT 0
10012: ST_TO_ADDR
// break ;
10013: GO 10017
// end ;
10015: GO 9891
10017: POP
10018: POP
// if canWin then
10019: LD_VAR 0 2
10023: IFFALSE 10030
// enable ( mpWin ) else
10025: LD_INT 101
10027: ENABLE_MARKED
10028: GO 10031
// enable ;
10030: ENABLE
// end ; end ;
10031: PPOPN 2
10033: END
// function CanWinLoose ; begin
10034: LD_INT 0
10036: PPUSH
// result := true ;
10037: LD_ADDR_VAR 0 1
10041: PUSH
10042: LD_INT 1
10044: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10045: CALL_OW 531
10049: IFFALSE 10061
10051: PUSH
10052: CALL_OW 519
10056: PUSH
10057: LD_INT 1
10059: GREATER
10060: AND
10061: IFFALSE 10071
// result := false ;
10063: LD_ADDR_VAR 0 1
10067: PUSH
10068: LD_INT 0
10070: ST_TO_ADDR
// end ;
10071: LD_VAR 0 1
10075: RET
// function HasPower ( i ) ; begin
10076: LD_INT 0
10078: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10079: LD_INT 22
10081: PUSH
10082: LD_VAR 0 1
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: LD_INT 2
10093: PUSH
10094: LD_INT 30
10096: PUSH
10097: LD_INT 0
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 30
10106: PUSH
10107: LD_INT 1
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PPUSH
10123: CALL_OW 69
10127: NOT
10128: IFFALSE 10132
// exit ;
10130: GO 10197
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10132: LD_ADDR_VAR 0 2
10136: PUSH
10137: LD_INT 22
10139: PUSH
10140: LD_VAR 0 1
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 2
10151: PUSH
10152: LD_INT 21
10154: PUSH
10155: LD_INT 1
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: LD_INT 33
10164: PUSH
10165: LD_INT 3
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 33
10174: PUSH
10175: LD_INT 5
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PPUSH
10192: CALL_OW 69
10196: ST_TO_ADDR
// end ; end_of_file
10197: LD_VAR 0 2
10201: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10202: LD_INT 0
10204: PPUSH
10205: PPUSH
// if exist_mode then
10206: LD_VAR 0 2
10210: IFFALSE 10256
// begin unit := CreateCharacter ( prefix & ident ) ;
10212: LD_ADDR_VAR 0 5
10216: PUSH
10217: LD_VAR 0 3
10221: PUSH
10222: LD_VAR 0 1
10226: STR
10227: PPUSH
10228: CALL_OW 34
10232: ST_TO_ADDR
// if unit then
10233: LD_VAR 0 5
10237: IFFALSE 10254
// DeleteCharacters ( prefix & ident ) ;
10239: LD_VAR 0 3
10243: PUSH
10244: LD_VAR 0 1
10248: STR
10249: PPUSH
10250: CALL_OW 40
// end else
10254: GO 10271
// unit := NewCharacter ( ident ) ;
10256: LD_ADDR_VAR 0 5
10260: PUSH
10261: LD_VAR 0 1
10265: PPUSH
10266: CALL_OW 25
10270: ST_TO_ADDR
// result := unit ;
10271: LD_ADDR_VAR 0 4
10275: PUSH
10276: LD_VAR 0 5
10280: ST_TO_ADDR
// end ;
10281: LD_VAR 0 4
10285: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10286: LD_INT 0
10288: PPUSH
10289: PPUSH
// if exist_mode then
10290: LD_VAR 0 2
10294: IFFALSE 10319
// unit := CreateCharacter ( prefix & ident ) else
10296: LD_ADDR_VAR 0 5
10300: PUSH
10301: LD_VAR 0 3
10305: PUSH
10306: LD_VAR 0 1
10310: STR
10311: PPUSH
10312: CALL_OW 34
10316: ST_TO_ADDR
10317: GO 10334
// unit := NewCharacter ( ident ) ;
10319: LD_ADDR_VAR 0 5
10323: PUSH
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 25
10333: ST_TO_ADDR
// result := unit ;
10334: LD_ADDR_VAR 0 4
10338: PUSH
10339: LD_VAR 0 5
10343: ST_TO_ADDR
// end ;
10344: LD_VAR 0 4
10348: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10349: LD_INT 0
10351: PPUSH
10352: PPUSH
// if not side or not nation then
10353: LD_VAR 0 1
10357: NOT
10358: IFTRUE 10367
10360: PUSH
10361: LD_VAR 0 2
10365: NOT
10366: OR
10367: IFFALSE 10371
// exit ;
10369: GO 11141
// case nation of nation_american :
10371: LD_VAR 0 2
10375: PUSH
10376: LD_INT 1
10378: DOUBLE
10379: EQUAL
10380: IFTRUE 10384
10382: GO 10598
10384: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10385: LD_ADDR_VAR 0 4
10389: PUSH
10390: LD_INT 35
10392: PUSH
10393: LD_INT 45
10395: PUSH
10396: LD_INT 46
10398: PUSH
10399: LD_INT 47
10401: PUSH
10402: LD_INT 82
10404: PUSH
10405: LD_INT 83
10407: PUSH
10408: LD_INT 84
10410: PUSH
10411: LD_INT 85
10413: PUSH
10414: LD_INT 86
10416: PUSH
10417: LD_INT 1
10419: PUSH
10420: LD_INT 2
10422: PUSH
10423: LD_INT 6
10425: PUSH
10426: LD_INT 15
10428: PUSH
10429: LD_INT 16
10431: PUSH
10432: LD_INT 7
10434: PUSH
10435: LD_INT 12
10437: PUSH
10438: LD_INT 13
10440: PUSH
10441: LD_INT 10
10443: PUSH
10444: LD_INT 14
10446: PUSH
10447: LD_INT 20
10449: PUSH
10450: LD_INT 21
10452: PUSH
10453: LD_INT 22
10455: PUSH
10456: LD_INT 25
10458: PUSH
10459: LD_INT 32
10461: PUSH
10462: LD_INT 27
10464: PUSH
10465: LD_INT 36
10467: PUSH
10468: LD_INT 69
10470: PUSH
10471: LD_INT 39
10473: PUSH
10474: LD_INT 34
10476: PUSH
10477: LD_INT 40
10479: PUSH
10480: LD_INT 48
10482: PUSH
10483: LD_INT 49
10485: PUSH
10486: LD_INT 50
10488: PUSH
10489: LD_INT 51
10491: PUSH
10492: LD_INT 52
10494: PUSH
10495: LD_INT 53
10497: PUSH
10498: LD_INT 54
10500: PUSH
10501: LD_INT 55
10503: PUSH
10504: LD_INT 56
10506: PUSH
10507: LD_INT 57
10509: PUSH
10510: LD_INT 58
10512: PUSH
10513: LD_INT 59
10515: PUSH
10516: LD_INT 60
10518: PUSH
10519: LD_INT 61
10521: PUSH
10522: LD_INT 62
10524: PUSH
10525: LD_INT 80
10527: PUSH
10528: LD_INT 82
10530: PUSH
10531: LD_INT 83
10533: PUSH
10534: LD_INT 84
10536: PUSH
10537: LD_INT 85
10539: PUSH
10540: LD_INT 86
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: ST_TO_ADDR
10596: GO 11063
10598: LD_INT 2
10600: DOUBLE
10601: EQUAL
10602: IFTRUE 10606
10604: GO 10832
10606: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10607: LD_ADDR_VAR 0 4
10611: PUSH
10612: LD_INT 35
10614: PUSH
10615: LD_INT 45
10617: PUSH
10618: LD_INT 46
10620: PUSH
10621: LD_INT 47
10623: PUSH
10624: LD_INT 82
10626: PUSH
10627: LD_INT 83
10629: PUSH
10630: LD_INT 84
10632: PUSH
10633: LD_INT 85
10635: PUSH
10636: LD_INT 87
10638: PUSH
10639: LD_INT 70
10641: PUSH
10642: LD_INT 1
10644: PUSH
10645: LD_INT 11
10647: PUSH
10648: LD_INT 3
10650: PUSH
10651: LD_INT 4
10653: PUSH
10654: LD_INT 5
10656: PUSH
10657: LD_INT 6
10659: PUSH
10660: LD_INT 15
10662: PUSH
10663: LD_INT 18
10665: PUSH
10666: LD_INT 7
10668: PUSH
10669: LD_INT 17
10671: PUSH
10672: LD_INT 8
10674: PUSH
10675: LD_INT 20
10677: PUSH
10678: LD_INT 21
10680: PUSH
10681: LD_INT 22
10683: PUSH
10684: LD_INT 72
10686: PUSH
10687: LD_INT 26
10689: PUSH
10690: LD_INT 69
10692: PUSH
10693: LD_INT 39
10695: PUSH
10696: LD_INT 40
10698: PUSH
10699: LD_INT 41
10701: PUSH
10702: LD_INT 42
10704: PUSH
10705: LD_INT 43
10707: PUSH
10708: LD_INT 48
10710: PUSH
10711: LD_INT 49
10713: PUSH
10714: LD_INT 50
10716: PUSH
10717: LD_INT 51
10719: PUSH
10720: LD_INT 52
10722: PUSH
10723: LD_INT 53
10725: PUSH
10726: LD_INT 54
10728: PUSH
10729: LD_INT 55
10731: PUSH
10732: LD_INT 56
10734: PUSH
10735: LD_INT 60
10737: PUSH
10738: LD_INT 61
10740: PUSH
10741: LD_INT 62
10743: PUSH
10744: LD_INT 66
10746: PUSH
10747: LD_INT 67
10749: PUSH
10750: LD_INT 68
10752: PUSH
10753: LD_INT 81
10755: PUSH
10756: LD_INT 82
10758: PUSH
10759: LD_INT 83
10761: PUSH
10762: LD_INT 84
10764: PUSH
10765: LD_INT 85
10767: PUSH
10768: LD_INT 87
10770: PUSH
10771: LD_INT 88
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: ST_TO_ADDR
10830: GO 11063
10832: LD_INT 3
10834: DOUBLE
10835: EQUAL
10836: IFTRUE 10840
10838: GO 11062
10840: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10841: LD_ADDR_VAR 0 4
10845: PUSH
10846: LD_INT 46
10848: PUSH
10849: LD_INT 47
10851: PUSH
10852: LD_INT 1
10854: PUSH
10855: LD_INT 2
10857: PUSH
10858: LD_INT 82
10860: PUSH
10861: LD_INT 83
10863: PUSH
10864: LD_INT 84
10866: PUSH
10867: LD_INT 85
10869: PUSH
10870: LD_INT 86
10872: PUSH
10873: LD_INT 11
10875: PUSH
10876: LD_INT 9
10878: PUSH
10879: LD_INT 20
10881: PUSH
10882: LD_INT 19
10884: PUSH
10885: LD_INT 21
10887: PUSH
10888: LD_INT 24
10890: PUSH
10891: LD_INT 22
10893: PUSH
10894: LD_INT 25
10896: PUSH
10897: LD_INT 28
10899: PUSH
10900: LD_INT 29
10902: PUSH
10903: LD_INT 30
10905: PUSH
10906: LD_INT 31
10908: PUSH
10909: LD_INT 37
10911: PUSH
10912: LD_INT 38
10914: PUSH
10915: LD_INT 32
10917: PUSH
10918: LD_INT 27
10920: PUSH
10921: LD_INT 33
10923: PUSH
10924: LD_INT 69
10926: PUSH
10927: LD_INT 39
10929: PUSH
10930: LD_INT 34
10932: PUSH
10933: LD_INT 40
10935: PUSH
10936: LD_INT 71
10938: PUSH
10939: LD_INT 23
10941: PUSH
10942: LD_INT 44
10944: PUSH
10945: LD_INT 48
10947: PUSH
10948: LD_INT 49
10950: PUSH
10951: LD_INT 50
10953: PUSH
10954: LD_INT 51
10956: PUSH
10957: LD_INT 52
10959: PUSH
10960: LD_INT 53
10962: PUSH
10963: LD_INT 54
10965: PUSH
10966: LD_INT 55
10968: PUSH
10969: LD_INT 56
10971: PUSH
10972: LD_INT 57
10974: PUSH
10975: LD_INT 58
10977: PUSH
10978: LD_INT 59
10980: PUSH
10981: LD_INT 63
10983: PUSH
10984: LD_INT 64
10986: PUSH
10987: LD_INT 65
10989: PUSH
10990: LD_INT 82
10992: PUSH
10993: LD_INT 83
10995: PUSH
10996: LD_INT 84
10998: PUSH
10999: LD_INT 85
11001: PUSH
11002: LD_INT 86
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: ST_TO_ADDR
11060: GO 11063
11062: POP
// if state > - 1 and state < 3 then
11063: LD_VAR 0 3
11067: PUSH
11068: LD_INT 1
11070: NEG
11071: GREATER
11072: IFFALSE 11084
11074: PUSH
11075: LD_VAR 0 3
11079: PUSH
11080: LD_INT 3
11082: LESS
11083: AND
11084: IFFALSE 11141
// for i in result do
11086: LD_ADDR_VAR 0 5
11090: PUSH
11091: LD_VAR 0 4
11095: PUSH
11096: FOR_IN
11097: IFFALSE 11139
// if GetTech ( i , side ) <> state then
11099: LD_VAR 0 5
11103: PPUSH
11104: LD_VAR 0 1
11108: PPUSH
11109: CALL_OW 321
11113: PUSH
11114: LD_VAR 0 3
11118: NONEQUAL
11119: IFFALSE 11137
// result := result diff i ;
11121: LD_ADDR_VAR 0 4
11125: PUSH
11126: LD_VAR 0 4
11130: PUSH
11131: LD_VAR 0 5
11135: DIFF
11136: ST_TO_ADDR
11137: GO 11096
11139: POP
11140: POP
// end ;
11141: LD_VAR 0 4
11145: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11146: LD_INT 0
11148: PPUSH
11149: PPUSH
11150: PPUSH
// result := true ;
11151: LD_ADDR_VAR 0 3
11155: PUSH
11156: LD_INT 1
11158: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11159: LD_ADDR_VAR 0 5
11163: PUSH
11164: LD_VAR 0 2
11168: PPUSH
11169: CALL_OW 480
11173: ST_TO_ADDR
// if not tmp then
11174: LD_VAR 0 5
11178: NOT
11179: IFFALSE 11183
// exit ;
11181: GO 11232
// for i in tmp do
11183: LD_ADDR_VAR 0 4
11187: PUSH
11188: LD_VAR 0 5
11192: PUSH
11193: FOR_IN
11194: IFFALSE 11230
// if GetTech ( i , side ) <> state_researched then
11196: LD_VAR 0 4
11200: PPUSH
11201: LD_VAR 0 1
11205: PPUSH
11206: CALL_OW 321
11210: PUSH
11211: LD_INT 2
11213: NONEQUAL
11214: IFFALSE 11228
// begin result := false ;
11216: LD_ADDR_VAR 0 3
11220: PUSH
11221: LD_INT 0
11223: ST_TO_ADDR
// exit ;
11224: POP
11225: POP
11226: GO 11232
// end ;
11228: GO 11193
11230: POP
11231: POP
// end ;
11232: LD_VAR 0 3
11236: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11237: LD_INT 0
11239: PPUSH
11240: PPUSH
11241: PPUSH
11242: PPUSH
11243: PPUSH
11244: PPUSH
11245: PPUSH
11246: PPUSH
11247: PPUSH
11248: PPUSH
11249: PPUSH
11250: PPUSH
11251: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11252: LD_VAR 0 1
11256: NOT
11257: IFTRUE 11274
11259: PUSH
11260: LD_VAR 0 1
11264: PPUSH
11265: CALL_OW 257
11269: PUSH
11270: LD_INT 9
11272: NONEQUAL
11273: OR
11274: IFFALSE 11278
// exit ;
11276: GO 11857
// side := GetSide ( unit ) ;
11278: LD_ADDR_VAR 0 9
11282: PUSH
11283: LD_VAR 0 1
11287: PPUSH
11288: CALL_OW 255
11292: ST_TO_ADDR
// tech_space := tech_spacanom ;
11293: LD_ADDR_VAR 0 12
11297: PUSH
11298: LD_INT 29
11300: ST_TO_ADDR
// tech_time := tech_taurad ;
11301: LD_ADDR_VAR 0 13
11305: PUSH
11306: LD_INT 28
11308: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11309: LD_ADDR_VAR 0 11
11313: PUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 310
11323: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11324: LD_VAR 0 11
11328: PPUSH
11329: CALL_OW 247
11333: PUSH
11334: LD_INT 2
11336: EQUAL
11337: IFFALSE 11341
// exit ;
11339: GO 11857
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11341: LD_ADDR_VAR 0 8
11345: PUSH
11346: LD_INT 81
11348: PUSH
11349: LD_VAR 0 9
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 3
11360: PUSH
11361: LD_INT 21
11363: PUSH
11364: LD_INT 3
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 69
11383: ST_TO_ADDR
// if not tmp then
11384: LD_VAR 0 8
11388: NOT
11389: IFFALSE 11393
// exit ;
11391: GO 11857
// if in_unit then
11393: LD_VAR 0 11
11397: IFFALSE 11421
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11399: LD_ADDR_VAR 0 10
11403: PUSH
11404: LD_VAR 0 8
11408: PPUSH
11409: LD_VAR 0 11
11413: PPUSH
11414: CALL_OW 74
11418: ST_TO_ADDR
11419: GO 11441
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11421: LD_ADDR_VAR 0 10
11425: PUSH
11426: LD_VAR 0 8
11430: PPUSH
11431: LD_VAR 0 1
11435: PPUSH
11436: CALL_OW 74
11440: ST_TO_ADDR
// if not enemy then
11441: LD_VAR 0 10
11445: NOT
11446: IFFALSE 11450
// exit ;
11448: GO 11857
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11450: LD_VAR 0 11
11454: IFFALSE 11476
11456: PUSH
11457: LD_VAR 0 11
11461: PPUSH
11462: LD_VAR 0 10
11466: PPUSH
11467: CALL_OW 296
11471: PUSH
11472: LD_INT 13
11474: GREATER
11475: AND
11476: IFTRUE 11498
11478: PUSH
11479: LD_VAR 0 1
11483: PPUSH
11484: LD_VAR 0 10
11488: PPUSH
11489: CALL_OW 296
11493: PUSH
11494: LD_INT 12
11496: GREATER
11497: OR
11498: IFFALSE 11502
// exit ;
11500: GO 11857
// missile := [ 1 ] ;
11502: LD_ADDR_VAR 0 14
11506: PUSH
11507: LD_INT 1
11509: PUSH
11510: EMPTY
11511: LIST
11512: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11513: LD_VAR 0 9
11517: PPUSH
11518: LD_VAR 0 12
11522: PPUSH
11523: CALL_OW 325
11527: IFFALSE 11556
// missile := Replace ( missile , missile + 1 , 2 ) ;
11529: LD_ADDR_VAR 0 14
11533: PUSH
11534: LD_VAR 0 14
11538: PPUSH
11539: LD_VAR 0 14
11543: PUSH
11544: LD_INT 1
11546: PLUS
11547: PPUSH
11548: LD_INT 2
11550: PPUSH
11551: CALL_OW 1
11555: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11556: LD_VAR 0 9
11560: PPUSH
11561: LD_VAR 0 13
11565: PPUSH
11566: CALL_OW 325
11570: IFFALSE 11594
11572: PUSH
11573: LD_VAR 0 10
11577: PPUSH
11578: CALL_OW 255
11582: PPUSH
11583: LD_VAR 0 13
11587: PPUSH
11588: CALL_OW 325
11592: NOT
11593: AND
11594: IFFALSE 11623
// missile := Replace ( missile , missile + 1 , 3 ) ;
11596: LD_ADDR_VAR 0 14
11600: PUSH
11601: LD_VAR 0 14
11605: PPUSH
11606: LD_VAR 0 14
11610: PUSH
11611: LD_INT 1
11613: PLUS
11614: PPUSH
11615: LD_INT 3
11617: PPUSH
11618: CALL_OW 1
11622: ST_TO_ADDR
// if missile < 2 then
11623: LD_VAR 0 14
11627: PUSH
11628: LD_INT 2
11630: LESS
11631: IFFALSE 11635
// exit ;
11633: GO 11857
// x := GetX ( enemy ) ;
11635: LD_ADDR_VAR 0 4
11639: PUSH
11640: LD_VAR 0 10
11644: PPUSH
11645: CALL_OW 250
11649: ST_TO_ADDR
// y := GetY ( enemy ) ;
11650: LD_ADDR_VAR 0 5
11654: PUSH
11655: LD_VAR 0 10
11659: PPUSH
11660: CALL_OW 251
11664: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11665: LD_ADDR_VAR 0 6
11669: PUSH
11670: LD_VAR 0 4
11674: PUSH
11675: LD_INT 1
11677: NEG
11678: PPUSH
11679: LD_INT 1
11681: PPUSH
11682: CALL_OW 12
11686: PLUS
11687: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11688: LD_ADDR_VAR 0 7
11692: PUSH
11693: LD_VAR 0 5
11697: PUSH
11698: LD_INT 1
11700: NEG
11701: PPUSH
11702: LD_INT 1
11704: PPUSH
11705: CALL_OW 12
11709: PLUS
11710: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11711: LD_VAR 0 6
11715: PPUSH
11716: LD_VAR 0 7
11720: PPUSH
11721: CALL_OW 488
11725: NOT
11726: IFFALSE 11748
// begin _x := x ;
11728: LD_ADDR_VAR 0 6
11732: PUSH
11733: LD_VAR 0 4
11737: ST_TO_ADDR
// _y := y ;
11738: LD_ADDR_VAR 0 7
11742: PUSH
11743: LD_VAR 0 5
11747: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11748: LD_ADDR_VAR 0 3
11752: PUSH
11753: LD_INT 1
11755: PPUSH
11756: LD_VAR 0 14
11760: PPUSH
11761: CALL_OW 12
11765: ST_TO_ADDR
// case i of 1 :
11766: LD_VAR 0 3
11770: PUSH
11771: LD_INT 1
11773: DOUBLE
11774: EQUAL
11775: IFTRUE 11779
11777: GO 11796
11779: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11780: LD_VAR 0 1
11784: PPUSH
11785: LD_VAR 0 10
11789: PPUSH
11790: CALL_OW 115
11794: GO 11857
11796: LD_INT 2
11798: DOUBLE
11799: EQUAL
11800: IFTRUE 11804
11802: GO 11826
11804: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11805: LD_VAR 0 1
11809: PPUSH
11810: LD_VAR 0 6
11814: PPUSH
11815: LD_VAR 0 7
11819: PPUSH
11820: CALL_OW 153
11824: GO 11857
11826: LD_INT 3
11828: DOUBLE
11829: EQUAL
11830: IFTRUE 11834
11832: GO 11856
11834: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11835: LD_VAR 0 1
11839: PPUSH
11840: LD_VAR 0 6
11844: PPUSH
11845: LD_VAR 0 7
11849: PPUSH
11850: CALL_OW 154
11854: GO 11857
11856: POP
// end ;
11857: LD_VAR 0 2
11861: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11862: LD_INT 0
11864: PPUSH
11865: PPUSH
11866: PPUSH
11867: PPUSH
11868: PPUSH
11869: PPUSH
// if not unit or not building then
11870: LD_VAR 0 1
11874: NOT
11875: IFTRUE 11884
11877: PUSH
11878: LD_VAR 0 2
11882: NOT
11883: OR
11884: IFFALSE 11888
// exit ;
11886: GO 12046
// x := GetX ( building ) ;
11888: LD_ADDR_VAR 0 5
11892: PUSH
11893: LD_VAR 0 2
11897: PPUSH
11898: CALL_OW 250
11902: ST_TO_ADDR
// y := GetY ( building ) ;
11903: LD_ADDR_VAR 0 6
11907: PUSH
11908: LD_VAR 0 2
11912: PPUSH
11913: CALL_OW 251
11917: ST_TO_ADDR
// for i := 0 to 5 do
11918: LD_ADDR_VAR 0 4
11922: PUSH
11923: DOUBLE
11924: LD_INT 0
11926: DEC
11927: ST_TO_ADDR
11928: LD_INT 5
11930: PUSH
11931: FOR_TO
11932: IFFALSE 12044
// begin _x := ShiftX ( x , i , 3 ) ;
11934: LD_ADDR_VAR 0 7
11938: PUSH
11939: LD_VAR 0 5
11943: PPUSH
11944: LD_VAR 0 4
11948: PPUSH
11949: LD_INT 3
11951: PPUSH
11952: CALL_OW 272
11956: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11957: LD_ADDR_VAR 0 8
11961: PUSH
11962: LD_VAR 0 6
11966: PPUSH
11967: LD_VAR 0 4
11971: PPUSH
11972: LD_INT 3
11974: PPUSH
11975: CALL_OW 273
11979: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11980: LD_VAR 0 7
11984: PPUSH
11985: LD_VAR 0 8
11989: PPUSH
11990: CALL_OW 488
11994: NOT
11995: IFFALSE 11999
// continue ;
11997: GO 11931
// if HexInfo ( _x , _y ) = 0 then
11999: LD_VAR 0 7
12003: PPUSH
12004: LD_VAR 0 8
12008: PPUSH
12009: CALL_OW 428
12013: PUSH
12014: LD_INT 0
12016: EQUAL
12017: IFFALSE 12042
// begin ComMoveXY ( unit , _x , _y ) ;
12019: LD_VAR 0 1
12023: PPUSH
12024: LD_VAR 0 7
12028: PPUSH
12029: LD_VAR 0 8
12033: PPUSH
12034: CALL_OW 111
// exit ;
12038: POP
12039: POP
12040: GO 12046
// end ; end ;
12042: GO 11931
12044: POP
12045: POP
// end ;
12046: LD_VAR 0 3
12050: RET
// export function ScanBase ( side , base_area ) ; begin
12051: LD_INT 0
12053: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12054: LD_ADDR_VAR 0 3
12058: PUSH
12059: LD_VAR 0 2
12063: PPUSH
12064: LD_INT 81
12066: PUSH
12067: LD_VAR 0 1
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PPUSH
12076: CALL_OW 70
12080: ST_TO_ADDR
// end ;
12081: LD_VAR 0 3
12085: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12086: LD_INT 0
12088: PPUSH
12089: PPUSH
12090: PPUSH
12091: PPUSH
// result := false ;
12092: LD_ADDR_VAR 0 2
12096: PUSH
12097: LD_INT 0
12099: ST_TO_ADDR
// side := GetSide ( unit ) ;
12100: LD_ADDR_VAR 0 3
12104: PUSH
12105: LD_VAR 0 1
12109: PPUSH
12110: CALL_OW 255
12114: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12115: LD_ADDR_VAR 0 4
12119: PUSH
12120: LD_VAR 0 1
12124: PPUSH
12125: CALL_OW 248
12129: ST_TO_ADDR
// case nat of 1 :
12130: LD_VAR 0 4
12134: PUSH
12135: LD_INT 1
12137: DOUBLE
12138: EQUAL
12139: IFTRUE 12143
12141: GO 12154
12143: POP
// tech := tech_lassight ; 2 :
12144: LD_ADDR_VAR 0 5
12148: PUSH
12149: LD_INT 12
12151: ST_TO_ADDR
12152: GO 12193
12154: LD_INT 2
12156: DOUBLE
12157: EQUAL
12158: IFTRUE 12162
12160: GO 12173
12162: POP
// tech := tech_mortar ; 3 :
12163: LD_ADDR_VAR 0 5
12167: PUSH
12168: LD_INT 41
12170: ST_TO_ADDR
12171: GO 12193
12173: LD_INT 3
12175: DOUBLE
12176: EQUAL
12177: IFTRUE 12181
12179: GO 12192
12181: POP
// tech := tech_bazooka ; end ;
12182: LD_ADDR_VAR 0 5
12186: PUSH
12187: LD_INT 44
12189: ST_TO_ADDR
12190: GO 12193
12192: POP
// if Researched ( side , tech ) then
12193: LD_VAR 0 3
12197: PPUSH
12198: LD_VAR 0 5
12202: PPUSH
12203: CALL_OW 325
12207: IFFALSE 12234
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12209: LD_ADDR_VAR 0 2
12213: PUSH
12214: LD_INT 5
12216: PUSH
12217: LD_INT 8
12219: PUSH
12220: LD_INT 9
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: PUSH
12228: LD_VAR 0 4
12232: ARRAY
12233: ST_TO_ADDR
// end ;
12234: LD_VAR 0 2
12238: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12239: LD_INT 0
12241: PPUSH
12242: PPUSH
12243: PPUSH
// if not mines then
12244: LD_VAR 0 2
12248: NOT
12249: IFFALSE 12253
// exit ;
12251: GO 12397
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12253: LD_ADDR_VAR 0 5
12257: PUSH
12258: LD_INT 81
12260: PUSH
12261: LD_VAR 0 1
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PUSH
12270: LD_INT 3
12272: PUSH
12273: LD_INT 21
12275: PUSH
12276: LD_INT 3
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PPUSH
12291: CALL_OW 69
12295: ST_TO_ADDR
// for i in mines do
12296: LD_ADDR_VAR 0 4
12300: PUSH
12301: LD_VAR 0 2
12305: PUSH
12306: FOR_IN
12307: IFFALSE 12395
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12309: LD_VAR 0 4
12313: PUSH
12314: LD_INT 1
12316: ARRAY
12317: PPUSH
12318: LD_VAR 0 4
12322: PUSH
12323: LD_INT 2
12325: ARRAY
12326: PPUSH
12327: CALL_OW 458
12331: NOT
12332: IFFALSE 12336
// continue ;
12334: GO 12306
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12336: LD_VAR 0 4
12340: PUSH
12341: LD_INT 1
12343: ARRAY
12344: PPUSH
12345: LD_VAR 0 4
12349: PUSH
12350: LD_INT 2
12352: ARRAY
12353: PPUSH
12354: CALL_OW 428
12358: PUSH
12359: LD_VAR 0 5
12363: IN
12364: IFFALSE 12393
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12366: LD_VAR 0 4
12370: PUSH
12371: LD_INT 1
12373: ARRAY
12374: PPUSH
12375: LD_VAR 0 4
12379: PUSH
12380: LD_INT 2
12382: ARRAY
12383: PPUSH
12384: LD_VAR 0 1
12388: PPUSH
12389: CALL_OW 456
// end ;
12393: GO 12306
12395: POP
12396: POP
// end ;
12397: LD_VAR 0 3
12401: RET
// export function Count ( array ) ; begin
12402: LD_INT 0
12404: PPUSH
// result := array + 0 ;
12405: LD_ADDR_VAR 0 2
12409: PUSH
12410: LD_VAR 0 1
12414: PUSH
12415: LD_INT 0
12417: PLUS
12418: ST_TO_ADDR
// end ;
12419: LD_VAR 0 2
12423: RET
// export function IsEmpty ( building ) ; begin
12424: LD_INT 0
12426: PPUSH
// if not building then
12427: LD_VAR 0 1
12431: NOT
12432: IFFALSE 12436
// exit ;
12434: GO 12479
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12436: LD_ADDR_VAR 0 2
12440: PUSH
12441: LD_VAR 0 1
12445: PUSH
12446: LD_INT 22
12448: PUSH
12449: LD_VAR 0 1
12453: PPUSH
12454: CALL_OW 255
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: LD_INT 58
12465: PUSH
12466: EMPTY
12467: LIST
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PPUSH
12473: CALL_OW 69
12477: IN
12478: ST_TO_ADDR
// end ;
12479: LD_VAR 0 2
12483: RET
// export function IsNotFull ( building ) ; var places ; begin
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
// if not building then
12488: LD_VAR 0 1
12492: NOT
12493: IFFALSE 12497
// exit ;
12495: GO 12525
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12497: LD_ADDR_VAR 0 2
12501: PUSH
12502: LD_VAR 0 1
12506: PPUSH
12507: LD_INT 3
12509: PUSH
12510: LD_INT 62
12512: PUSH
12513: EMPTY
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PPUSH
12520: CALL_OW 72
12524: ST_TO_ADDR
// end ;
12525: LD_VAR 0 2
12529: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12530: LD_INT 0
12532: PPUSH
12533: PPUSH
12534: PPUSH
12535: PPUSH
// tmp := [ ] ;
12536: LD_ADDR_VAR 0 3
12540: PUSH
12541: EMPTY
12542: ST_TO_ADDR
// list := [ ] ;
12543: LD_ADDR_VAR 0 5
12547: PUSH
12548: EMPTY
12549: ST_TO_ADDR
// for i = 16 to 25 do
12550: LD_ADDR_VAR 0 4
12554: PUSH
12555: DOUBLE
12556: LD_INT 16
12558: DEC
12559: ST_TO_ADDR
12560: LD_INT 25
12562: PUSH
12563: FOR_TO
12564: IFFALSE 12637
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12566: LD_ADDR_VAR 0 3
12570: PUSH
12571: LD_VAR 0 3
12575: PUSH
12576: LD_INT 22
12578: PUSH
12579: LD_VAR 0 1
12583: PPUSH
12584: CALL_OW 255
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: LD_INT 91
12595: PUSH
12596: LD_VAR 0 1
12600: PUSH
12601: LD_INT 6
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 30
12611: PUSH
12612: LD_VAR 0 4
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: PPUSH
12629: CALL_OW 69
12633: ADD
12634: ST_TO_ADDR
12635: GO 12563
12637: POP
12638: POP
// for i = 1 to tmp do
12639: LD_ADDR_VAR 0 4
12643: PUSH
12644: DOUBLE
12645: LD_INT 1
12647: DEC
12648: ST_TO_ADDR
12649: LD_VAR 0 3
12653: PUSH
12654: FOR_TO
12655: IFFALSE 12743
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12657: LD_ADDR_VAR 0 5
12661: PUSH
12662: LD_VAR 0 5
12666: PUSH
12667: LD_VAR 0 3
12671: PUSH
12672: LD_VAR 0 4
12676: ARRAY
12677: PPUSH
12678: CALL_OW 266
12682: PUSH
12683: LD_VAR 0 3
12687: PUSH
12688: LD_VAR 0 4
12692: ARRAY
12693: PPUSH
12694: CALL_OW 250
12698: PUSH
12699: LD_VAR 0 3
12703: PUSH
12704: LD_VAR 0 4
12708: ARRAY
12709: PPUSH
12710: CALL_OW 251
12714: PUSH
12715: LD_VAR 0 3
12719: PUSH
12720: LD_VAR 0 4
12724: ARRAY
12725: PPUSH
12726: CALL_OW 254
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: PUSH
12737: EMPTY
12738: LIST
12739: ADD
12740: ST_TO_ADDR
12741: GO 12654
12743: POP
12744: POP
// result := list ;
12745: LD_ADDR_VAR 0 2
12749: PUSH
12750: LD_VAR 0 5
12754: ST_TO_ADDR
// end ;
12755: LD_VAR 0 2
12759: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12760: LD_INT 0
12762: PPUSH
12763: PPUSH
12764: PPUSH
12765: PPUSH
12766: PPUSH
12767: PPUSH
12768: PPUSH
// if not factory then
12769: LD_VAR 0 1
12773: NOT
12774: IFFALSE 12778
// exit ;
12776: GO 13381
// if control = control_apeman then
12778: LD_VAR 0 4
12782: PUSH
12783: LD_INT 5
12785: EQUAL
12786: IFFALSE 12895
// begin tmp := UnitsInside ( factory ) ;
12788: LD_ADDR_VAR 0 8
12792: PUSH
12793: LD_VAR 0 1
12797: PPUSH
12798: CALL_OW 313
12802: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12803: LD_VAR 0 8
12807: PPUSH
12808: LD_INT 25
12810: PUSH
12811: LD_INT 12
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PPUSH
12818: CALL_OW 72
12822: NOT
12823: IFFALSE 12833
// control := control_manual ;
12825: LD_ADDR_VAR 0 4
12829: PUSH
12830: LD_INT 1
12832: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12833: LD_ADDR_VAR 0 8
12837: PUSH
12838: LD_VAR 0 1
12842: PPUSH
12843: CALL 12530 0 1
12847: ST_TO_ADDR
// if tmp then
12848: LD_VAR 0 8
12852: IFFALSE 12895
// begin for i in tmp do
12854: LD_ADDR_VAR 0 7
12858: PUSH
12859: LD_VAR 0 8
12863: PUSH
12864: FOR_IN
12865: IFFALSE 12893
// if i [ 1 ] = b_ext_radio then
12867: LD_VAR 0 7
12871: PUSH
12872: LD_INT 1
12874: ARRAY
12875: PUSH
12876: LD_INT 22
12878: EQUAL
12879: IFFALSE 12891
// begin control := control_remote ;
12881: LD_ADDR_VAR 0 4
12885: PUSH
12886: LD_INT 2
12888: ST_TO_ADDR
// break ;
12889: GO 12893
// end ;
12891: GO 12864
12893: POP
12894: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12895: LD_VAR 0 1
12899: PPUSH
12900: LD_VAR 0 2
12904: PPUSH
12905: LD_VAR 0 3
12909: PPUSH
12910: LD_VAR 0 4
12914: PPUSH
12915: LD_VAR 0 5
12919: PPUSH
12920: CALL_OW 448
12924: IFFALSE 12959
// begin result := [ chassis , engine , control , weapon ] ;
12926: LD_ADDR_VAR 0 6
12930: PUSH
12931: LD_VAR 0 2
12935: PUSH
12936: LD_VAR 0 3
12940: PUSH
12941: LD_VAR 0 4
12945: PUSH
12946: LD_VAR 0 5
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: ST_TO_ADDR
// exit ;
12957: GO 13381
// end ; _chassis := AvailableChassisList ( factory ) ;
12959: LD_ADDR_VAR 0 9
12963: PUSH
12964: LD_VAR 0 1
12968: PPUSH
12969: CALL_OW 475
12973: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12974: LD_ADDR_VAR 0 11
12978: PUSH
12979: LD_VAR 0 1
12983: PPUSH
12984: CALL_OW 476
12988: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12989: LD_ADDR_VAR 0 12
12993: PUSH
12994: LD_VAR 0 1
12998: PPUSH
12999: CALL_OW 477
13003: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13004: LD_ADDR_VAR 0 10
13008: PUSH
13009: LD_VAR 0 1
13013: PPUSH
13014: CALL_OW 478
13018: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13019: LD_VAR 0 9
13023: NOT
13024: IFTRUE 13033
13026: PUSH
13027: LD_VAR 0 11
13031: NOT
13032: OR
13033: IFTRUE 13042
13035: PUSH
13036: LD_VAR 0 12
13040: NOT
13041: OR
13042: IFTRUE 13051
13044: PUSH
13045: LD_VAR 0 10
13049: NOT
13050: OR
13051: IFFALSE 13086
// begin result := [ chassis , engine , control , weapon ] ;
13053: LD_ADDR_VAR 0 6
13057: PUSH
13058: LD_VAR 0 2
13062: PUSH
13063: LD_VAR 0 3
13067: PUSH
13068: LD_VAR 0 4
13072: PUSH
13073: LD_VAR 0 5
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: ST_TO_ADDR
// exit ;
13084: GO 13381
// end ; if not chassis in _chassis then
13086: LD_VAR 0 2
13090: PUSH
13091: LD_VAR 0 9
13095: IN
13096: NOT
13097: IFFALSE 13123
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13099: LD_ADDR_VAR 0 2
13103: PUSH
13104: LD_VAR 0 9
13108: PUSH
13109: LD_INT 1
13111: PPUSH
13112: LD_VAR 0 9
13116: PPUSH
13117: CALL_OW 12
13121: ARRAY
13122: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13123: LD_VAR 0 2
13127: PPUSH
13128: LD_VAR 0 3
13132: PPUSH
13133: CALL 13386 0 2
13137: NOT
13138: IFFALSE 13199
// repeat engine := _engine [ 1 ] ;
13140: LD_ADDR_VAR 0 3
13144: PUSH
13145: LD_VAR 0 11
13149: PUSH
13150: LD_INT 1
13152: ARRAY
13153: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13154: LD_ADDR_VAR 0 11
13158: PUSH
13159: LD_VAR 0 11
13163: PPUSH
13164: LD_INT 1
13166: PPUSH
13167: CALL_OW 3
13171: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13172: LD_VAR 0 2
13176: PPUSH
13177: LD_VAR 0 3
13181: PPUSH
13182: CALL 13386 0 2
13186: IFTRUE 13197
13188: PUSH
13189: LD_VAR 0 11
13193: PUSH
13194: EMPTY
13195: EQUAL
13196: OR
13197: IFFALSE 13140
// if not control in _control then
13199: LD_VAR 0 4
13203: PUSH
13204: LD_VAR 0 12
13208: IN
13209: NOT
13210: IFFALSE 13236
// control := _control [ rand ( 1 , _control ) ] ;
13212: LD_ADDR_VAR 0 4
13216: PUSH
13217: LD_VAR 0 12
13221: PUSH
13222: LD_INT 1
13224: PPUSH
13225: LD_VAR 0 12
13229: PPUSH
13230: CALL_OW 12
13234: ARRAY
13235: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13236: LD_VAR 0 2
13240: PPUSH
13241: LD_VAR 0 5
13245: PPUSH
13246: CALL 13608 0 2
13250: NOT
13251: IFFALSE 13312
// repeat weapon := _weapon [ 1 ] ;
13253: LD_ADDR_VAR 0 5
13257: PUSH
13258: LD_VAR 0 10
13262: PUSH
13263: LD_INT 1
13265: ARRAY
13266: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13267: LD_ADDR_VAR 0 10
13271: PUSH
13272: LD_VAR 0 10
13276: PPUSH
13277: LD_INT 1
13279: PPUSH
13280: CALL_OW 3
13284: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13285: LD_VAR 0 2
13289: PPUSH
13290: LD_VAR 0 5
13294: PPUSH
13295: CALL 13608 0 2
13299: IFTRUE 13310
13301: PUSH
13302: LD_VAR 0 10
13306: PUSH
13307: EMPTY
13308: EQUAL
13309: OR
13310: IFFALSE 13253
// result := [ ] ;
13312: LD_ADDR_VAR 0 6
13316: PUSH
13317: EMPTY
13318: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13319: LD_VAR 0 1
13323: PPUSH
13324: LD_VAR 0 2
13328: PPUSH
13329: LD_VAR 0 3
13333: PPUSH
13334: LD_VAR 0 4
13338: PPUSH
13339: LD_VAR 0 5
13343: PPUSH
13344: CALL_OW 448
13348: IFFALSE 13381
// result := [ chassis , engine , control , weapon ] ;
13350: LD_ADDR_VAR 0 6
13354: PUSH
13355: LD_VAR 0 2
13359: PUSH
13360: LD_VAR 0 3
13364: PUSH
13365: LD_VAR 0 4
13369: PUSH
13370: LD_VAR 0 5
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: ST_TO_ADDR
// end ;
13381: LD_VAR 0 6
13385: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13386: LD_INT 0
13388: PPUSH
// if not chassis or not engine then
13389: LD_VAR 0 1
13393: NOT
13394: IFTRUE 13403
13396: PUSH
13397: LD_VAR 0 2
13401: NOT
13402: OR
13403: IFFALSE 13407
// exit ;
13405: GO 13603
// case engine of engine_solar :
13407: LD_VAR 0 2
13411: PUSH
13412: LD_INT 2
13414: DOUBLE
13415: EQUAL
13416: IFTRUE 13420
13418: GO 13458
13420: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13421: LD_ADDR_VAR 0 3
13425: PUSH
13426: LD_INT 11
13428: PUSH
13429: LD_INT 12
13431: PUSH
13432: LD_INT 13
13434: PUSH
13435: LD_INT 14
13437: PUSH
13438: LD_INT 1
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: LD_INT 3
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: ST_TO_ADDR
13456: GO 13587
13458: LD_INT 1
13460: DOUBLE
13461: EQUAL
13462: IFTRUE 13466
13464: GO 13528
13466: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13467: LD_ADDR_VAR 0 3
13471: PUSH
13472: LD_INT 11
13474: PUSH
13475: LD_INT 12
13477: PUSH
13478: LD_INT 13
13480: PUSH
13481: LD_INT 14
13483: PUSH
13484: LD_INT 1
13486: PUSH
13487: LD_INT 2
13489: PUSH
13490: LD_INT 3
13492: PUSH
13493: LD_INT 4
13495: PUSH
13496: LD_INT 5
13498: PUSH
13499: LD_INT 21
13501: PUSH
13502: LD_INT 23
13504: PUSH
13505: LD_INT 22
13507: PUSH
13508: LD_INT 24
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: ST_TO_ADDR
13526: GO 13587
13528: LD_INT 3
13530: DOUBLE
13531: EQUAL
13532: IFTRUE 13536
13534: GO 13586
13536: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13537: LD_ADDR_VAR 0 3
13541: PUSH
13542: LD_INT 13
13544: PUSH
13545: LD_INT 14
13547: PUSH
13548: LD_INT 2
13550: PUSH
13551: LD_INT 3
13553: PUSH
13554: LD_INT 4
13556: PUSH
13557: LD_INT 5
13559: PUSH
13560: LD_INT 21
13562: PUSH
13563: LD_INT 22
13565: PUSH
13566: LD_INT 23
13568: PUSH
13569: LD_INT 24
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: ST_TO_ADDR
13584: GO 13587
13586: POP
// result := ( chassis in result ) ;
13587: LD_ADDR_VAR 0 3
13591: PUSH
13592: LD_VAR 0 1
13596: PUSH
13597: LD_VAR 0 3
13601: IN
13602: ST_TO_ADDR
// end ;
13603: LD_VAR 0 3
13607: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13608: LD_INT 0
13610: PPUSH
// if not chassis or not weapon then
13611: LD_VAR 0 1
13615: NOT
13616: IFTRUE 13625
13618: PUSH
13619: LD_VAR 0 2
13623: NOT
13624: OR
13625: IFFALSE 13629
// exit ;
13627: GO 14689
// case weapon of us_machine_gun :
13629: LD_VAR 0 2
13633: PUSH
13634: LD_INT 2
13636: DOUBLE
13637: EQUAL
13638: IFTRUE 13642
13640: GO 13672
13642: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13643: LD_ADDR_VAR 0 3
13647: PUSH
13648: LD_INT 1
13650: PUSH
13651: LD_INT 2
13653: PUSH
13654: LD_INT 3
13656: PUSH
13657: LD_INT 4
13659: PUSH
13660: LD_INT 5
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: ST_TO_ADDR
13670: GO 14673
13672: LD_INT 3
13674: DOUBLE
13675: EQUAL
13676: IFTRUE 13680
13678: GO 13710
13680: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13681: LD_ADDR_VAR 0 3
13685: PUSH
13686: LD_INT 1
13688: PUSH
13689: LD_INT 2
13691: PUSH
13692: LD_INT 3
13694: PUSH
13695: LD_INT 4
13697: PUSH
13698: LD_INT 5
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: ST_TO_ADDR
13708: GO 14673
13710: LD_INT 11
13712: DOUBLE
13713: EQUAL
13714: IFTRUE 13718
13716: GO 13748
13718: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13719: LD_ADDR_VAR 0 3
13723: PUSH
13724: LD_INT 1
13726: PUSH
13727: LD_INT 2
13729: PUSH
13730: LD_INT 3
13732: PUSH
13733: LD_INT 4
13735: PUSH
13736: LD_INT 5
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: ST_TO_ADDR
13746: GO 14673
13748: LD_INT 4
13750: DOUBLE
13751: EQUAL
13752: IFTRUE 13756
13754: GO 13782
13756: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13757: LD_ADDR_VAR 0 3
13761: PUSH
13762: LD_INT 2
13764: PUSH
13765: LD_INT 3
13767: PUSH
13768: LD_INT 4
13770: PUSH
13771: LD_INT 5
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: ST_TO_ADDR
13780: GO 14673
13782: LD_INT 5
13784: DOUBLE
13785: EQUAL
13786: IFTRUE 13790
13788: GO 13816
13790: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13791: LD_ADDR_VAR 0 3
13795: PUSH
13796: LD_INT 2
13798: PUSH
13799: LD_INT 3
13801: PUSH
13802: LD_INT 4
13804: PUSH
13805: LD_INT 5
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: ST_TO_ADDR
13814: GO 14673
13816: LD_INT 9
13818: DOUBLE
13819: EQUAL
13820: IFTRUE 13824
13822: GO 13850
13824: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13825: LD_ADDR_VAR 0 3
13829: PUSH
13830: LD_INT 2
13832: PUSH
13833: LD_INT 3
13835: PUSH
13836: LD_INT 4
13838: PUSH
13839: LD_INT 5
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: ST_TO_ADDR
13848: GO 14673
13850: LD_INT 7
13852: DOUBLE
13853: EQUAL
13854: IFTRUE 13858
13856: GO 13884
13858: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13859: LD_ADDR_VAR 0 3
13863: PUSH
13864: LD_INT 2
13866: PUSH
13867: LD_INT 3
13869: PUSH
13870: LD_INT 4
13872: PUSH
13873: LD_INT 5
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: ST_TO_ADDR
13882: GO 14673
13884: LD_INT 12
13886: DOUBLE
13887: EQUAL
13888: IFTRUE 13892
13890: GO 13918
13892: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13893: LD_ADDR_VAR 0 3
13897: PUSH
13898: LD_INT 2
13900: PUSH
13901: LD_INT 3
13903: PUSH
13904: LD_INT 4
13906: PUSH
13907: LD_INT 5
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: ST_TO_ADDR
13916: GO 14673
13918: LD_INT 13
13920: DOUBLE
13921: EQUAL
13922: IFTRUE 13926
13924: GO 13952
13926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13927: LD_ADDR_VAR 0 3
13931: PUSH
13932: LD_INT 2
13934: PUSH
13935: LD_INT 3
13937: PUSH
13938: LD_INT 4
13940: PUSH
13941: LD_INT 5
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: ST_TO_ADDR
13950: GO 14673
13952: LD_INT 14
13954: DOUBLE
13955: EQUAL
13956: IFTRUE 13960
13958: GO 13978
13960: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13961: LD_ADDR_VAR 0 3
13965: PUSH
13966: LD_INT 4
13968: PUSH
13969: LD_INT 5
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: ST_TO_ADDR
13976: GO 14673
13978: LD_INT 6
13980: DOUBLE
13981: EQUAL
13982: IFTRUE 13986
13984: GO 14004
13986: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13987: LD_ADDR_VAR 0 3
13991: PUSH
13992: LD_INT 4
13994: PUSH
13995: LD_INT 5
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: ST_TO_ADDR
14002: GO 14673
14004: LD_INT 10
14006: DOUBLE
14007: EQUAL
14008: IFTRUE 14012
14010: GO 14030
14012: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14013: LD_ADDR_VAR 0 3
14017: PUSH
14018: LD_INT 4
14020: PUSH
14021: LD_INT 5
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: ST_TO_ADDR
14028: GO 14673
14030: LD_INT 22
14032: DOUBLE
14033: EQUAL
14034: IFTRUE 14038
14036: GO 14064
14038: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14039: LD_ADDR_VAR 0 3
14043: PUSH
14044: LD_INT 11
14046: PUSH
14047: LD_INT 12
14049: PUSH
14050: LD_INT 13
14052: PUSH
14053: LD_INT 14
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: ST_TO_ADDR
14062: GO 14673
14064: LD_INT 23
14066: DOUBLE
14067: EQUAL
14068: IFTRUE 14072
14070: GO 14098
14072: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14073: LD_ADDR_VAR 0 3
14077: PUSH
14078: LD_INT 11
14080: PUSH
14081: LD_INT 12
14083: PUSH
14084: LD_INT 13
14086: PUSH
14087: LD_INT 14
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: ST_TO_ADDR
14096: GO 14673
14098: LD_INT 24
14100: DOUBLE
14101: EQUAL
14102: IFTRUE 14106
14104: GO 14132
14106: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14107: LD_ADDR_VAR 0 3
14111: PUSH
14112: LD_INT 11
14114: PUSH
14115: LD_INT 12
14117: PUSH
14118: LD_INT 13
14120: PUSH
14121: LD_INT 14
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: ST_TO_ADDR
14130: GO 14673
14132: LD_INT 30
14134: DOUBLE
14135: EQUAL
14136: IFTRUE 14140
14138: GO 14166
14140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14141: LD_ADDR_VAR 0 3
14145: PUSH
14146: LD_INT 11
14148: PUSH
14149: LD_INT 12
14151: PUSH
14152: LD_INT 13
14154: PUSH
14155: LD_INT 14
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: ST_TO_ADDR
14164: GO 14673
14166: LD_INT 25
14168: DOUBLE
14169: EQUAL
14170: IFTRUE 14174
14172: GO 14192
14174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14175: LD_ADDR_VAR 0 3
14179: PUSH
14180: LD_INT 13
14182: PUSH
14183: LD_INT 14
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: ST_TO_ADDR
14190: GO 14673
14192: LD_INT 27
14194: DOUBLE
14195: EQUAL
14196: IFTRUE 14200
14198: GO 14218
14200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14201: LD_ADDR_VAR 0 3
14205: PUSH
14206: LD_INT 13
14208: PUSH
14209: LD_INT 14
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: ST_TO_ADDR
14216: GO 14673
14218: LD_INT 92
14220: DOUBLE
14221: EQUAL
14222: IFTRUE 14226
14224: GO 14252
14226: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14227: LD_ADDR_VAR 0 3
14231: PUSH
14232: LD_INT 11
14234: PUSH
14235: LD_INT 12
14237: PUSH
14238: LD_INT 13
14240: PUSH
14241: LD_INT 14
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: ST_TO_ADDR
14250: GO 14673
14252: LD_INT 28
14254: DOUBLE
14255: EQUAL
14256: IFTRUE 14260
14258: GO 14278
14260: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14261: LD_ADDR_VAR 0 3
14265: PUSH
14266: LD_INT 13
14268: PUSH
14269: LD_INT 14
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: ST_TO_ADDR
14276: GO 14673
14278: LD_INT 29
14280: DOUBLE
14281: EQUAL
14282: IFTRUE 14286
14284: GO 14304
14286: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14287: LD_ADDR_VAR 0 3
14291: PUSH
14292: LD_INT 13
14294: PUSH
14295: LD_INT 14
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: ST_TO_ADDR
14302: GO 14673
14304: LD_INT 31
14306: DOUBLE
14307: EQUAL
14308: IFTRUE 14312
14310: GO 14330
14312: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14313: LD_ADDR_VAR 0 3
14317: PUSH
14318: LD_INT 13
14320: PUSH
14321: LD_INT 14
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: ST_TO_ADDR
14328: GO 14673
14330: LD_INT 26
14332: DOUBLE
14333: EQUAL
14334: IFTRUE 14338
14336: GO 14356
14338: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14339: LD_ADDR_VAR 0 3
14343: PUSH
14344: LD_INT 13
14346: PUSH
14347: LD_INT 14
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: ST_TO_ADDR
14354: GO 14673
14356: LD_INT 42
14358: DOUBLE
14359: EQUAL
14360: IFTRUE 14364
14362: GO 14390
14364: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14365: LD_ADDR_VAR 0 3
14369: PUSH
14370: LD_INT 21
14372: PUSH
14373: LD_INT 22
14375: PUSH
14376: LD_INT 23
14378: PUSH
14379: LD_INT 24
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: ST_TO_ADDR
14388: GO 14673
14390: LD_INT 43
14392: DOUBLE
14393: EQUAL
14394: IFTRUE 14398
14396: GO 14424
14398: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: LD_INT 21
14406: PUSH
14407: LD_INT 22
14409: PUSH
14410: LD_INT 23
14412: PUSH
14413: LD_INT 24
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: ST_TO_ADDR
14422: GO 14673
14424: LD_INT 44
14426: DOUBLE
14427: EQUAL
14428: IFTRUE 14432
14430: GO 14458
14432: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14433: LD_ADDR_VAR 0 3
14437: PUSH
14438: LD_INT 21
14440: PUSH
14441: LD_INT 22
14443: PUSH
14444: LD_INT 23
14446: PUSH
14447: LD_INT 24
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: ST_TO_ADDR
14456: GO 14673
14458: LD_INT 45
14460: DOUBLE
14461: EQUAL
14462: IFTRUE 14466
14464: GO 14492
14466: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14467: LD_ADDR_VAR 0 3
14471: PUSH
14472: LD_INT 21
14474: PUSH
14475: LD_INT 22
14477: PUSH
14478: LD_INT 23
14480: PUSH
14481: LD_INT 24
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: ST_TO_ADDR
14490: GO 14673
14492: LD_INT 49
14494: DOUBLE
14495: EQUAL
14496: IFTRUE 14500
14498: GO 14526
14500: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14501: LD_ADDR_VAR 0 3
14505: PUSH
14506: LD_INT 21
14508: PUSH
14509: LD_INT 22
14511: PUSH
14512: LD_INT 23
14514: PUSH
14515: LD_INT 24
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: ST_TO_ADDR
14524: GO 14673
14526: LD_INT 51
14528: DOUBLE
14529: EQUAL
14530: IFTRUE 14534
14532: GO 14560
14534: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14535: LD_ADDR_VAR 0 3
14539: PUSH
14540: LD_INT 21
14542: PUSH
14543: LD_INT 22
14545: PUSH
14546: LD_INT 23
14548: PUSH
14549: LD_INT 24
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: ST_TO_ADDR
14558: GO 14673
14560: LD_INT 52
14562: DOUBLE
14563: EQUAL
14564: IFTRUE 14568
14566: GO 14594
14568: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14569: LD_ADDR_VAR 0 3
14573: PUSH
14574: LD_INT 21
14576: PUSH
14577: LD_INT 22
14579: PUSH
14580: LD_INT 23
14582: PUSH
14583: LD_INT 24
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: ST_TO_ADDR
14592: GO 14673
14594: LD_INT 53
14596: DOUBLE
14597: EQUAL
14598: IFTRUE 14602
14600: GO 14620
14602: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14603: LD_ADDR_VAR 0 3
14607: PUSH
14608: LD_INT 23
14610: PUSH
14611: LD_INT 24
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: ST_TO_ADDR
14618: GO 14673
14620: LD_INT 46
14622: DOUBLE
14623: EQUAL
14624: IFTRUE 14628
14626: GO 14646
14628: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14629: LD_ADDR_VAR 0 3
14633: PUSH
14634: LD_INT 23
14636: PUSH
14637: LD_INT 24
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: ST_TO_ADDR
14644: GO 14673
14646: LD_INT 47
14648: DOUBLE
14649: EQUAL
14650: IFTRUE 14654
14652: GO 14672
14654: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14655: LD_ADDR_VAR 0 3
14659: PUSH
14660: LD_INT 23
14662: PUSH
14663: LD_INT 24
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: ST_TO_ADDR
14670: GO 14673
14672: POP
// result := ( chassis in result ) ;
14673: LD_ADDR_VAR 0 3
14677: PUSH
14678: LD_VAR 0 1
14682: PUSH
14683: LD_VAR 0 3
14687: IN
14688: ST_TO_ADDR
// end ;
14689: LD_VAR 0 3
14693: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14694: LD_INT 0
14696: PPUSH
14697: PPUSH
14698: PPUSH
14699: PPUSH
14700: PPUSH
14701: PPUSH
14702: PPUSH
// result := array ;
14703: LD_ADDR_VAR 0 5
14707: PUSH
14708: LD_VAR 0 1
14712: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14713: LD_VAR 0 1
14717: NOT
14718: IFTRUE 14727
14720: PUSH
14721: LD_VAR 0 2
14725: NOT
14726: OR
14727: IFTRUE 14736
14729: PUSH
14730: LD_VAR 0 3
14734: NOT
14735: OR
14736: IFTRUE 14750
14738: PUSH
14739: LD_VAR 0 2
14743: PUSH
14744: LD_VAR 0 1
14748: GREATER
14749: OR
14750: IFTRUE 14764
14752: PUSH
14753: LD_VAR 0 3
14757: PUSH
14758: LD_VAR 0 1
14762: GREATER
14763: OR
14764: IFFALSE 14768
// exit ;
14766: GO 15064
// if direction then
14768: LD_VAR 0 4
14772: IFFALSE 14836
// begin d := 1 ;
14774: LD_ADDR_VAR 0 9
14778: PUSH
14779: LD_INT 1
14781: ST_TO_ADDR
// if i_from > i_to then
14782: LD_VAR 0 2
14786: PUSH
14787: LD_VAR 0 3
14791: GREATER
14792: IFFALSE 14818
// length := ( array - i_from ) + i_to else
14794: LD_ADDR_VAR 0 11
14798: PUSH
14799: LD_VAR 0 1
14803: PUSH
14804: LD_VAR 0 2
14808: MINUS
14809: PUSH
14810: LD_VAR 0 3
14814: PLUS
14815: ST_TO_ADDR
14816: GO 14834
// length := i_to - i_from ;
14818: LD_ADDR_VAR 0 11
14822: PUSH
14823: LD_VAR 0 3
14827: PUSH
14828: LD_VAR 0 2
14832: MINUS
14833: ST_TO_ADDR
// end else
14834: GO 14897
// begin d := - 1 ;
14836: LD_ADDR_VAR 0 9
14840: PUSH
14841: LD_INT 1
14843: NEG
14844: ST_TO_ADDR
// if i_from > i_to then
14845: LD_VAR 0 2
14849: PUSH
14850: LD_VAR 0 3
14854: GREATER
14855: IFFALSE 14875
// length := i_from - i_to else
14857: LD_ADDR_VAR 0 11
14861: PUSH
14862: LD_VAR 0 2
14866: PUSH
14867: LD_VAR 0 3
14871: MINUS
14872: ST_TO_ADDR
14873: GO 14897
// length := ( array - i_to ) + i_from ;
14875: LD_ADDR_VAR 0 11
14879: PUSH
14880: LD_VAR 0 1
14884: PUSH
14885: LD_VAR 0 3
14889: MINUS
14890: PUSH
14891: LD_VAR 0 2
14895: PLUS
14896: ST_TO_ADDR
// end ; if not length then
14897: LD_VAR 0 11
14901: NOT
14902: IFFALSE 14906
// exit ;
14904: GO 15064
// tmp := array ;
14906: LD_ADDR_VAR 0 10
14910: PUSH
14911: LD_VAR 0 1
14915: ST_TO_ADDR
// for i = 1 to length do
14916: LD_ADDR_VAR 0 6
14920: PUSH
14921: DOUBLE
14922: LD_INT 1
14924: DEC
14925: ST_TO_ADDR
14926: LD_VAR 0 11
14930: PUSH
14931: FOR_TO
14932: IFFALSE 15052
// begin for j = 1 to array do
14934: LD_ADDR_VAR 0 7
14938: PUSH
14939: DOUBLE
14940: LD_INT 1
14942: DEC
14943: ST_TO_ADDR
14944: LD_VAR 0 1
14948: PUSH
14949: FOR_TO
14950: IFFALSE 15038
// begin k := j + d ;
14952: LD_ADDR_VAR 0 8
14956: PUSH
14957: LD_VAR 0 7
14961: PUSH
14962: LD_VAR 0 9
14966: PLUS
14967: ST_TO_ADDR
// if k > array then
14968: LD_VAR 0 8
14972: PUSH
14973: LD_VAR 0 1
14977: GREATER
14978: IFFALSE 14988
// k := 1 ;
14980: LD_ADDR_VAR 0 8
14984: PUSH
14985: LD_INT 1
14987: ST_TO_ADDR
// if not k then
14988: LD_VAR 0 8
14992: NOT
14993: IFFALSE 15005
// k := array ;
14995: LD_ADDR_VAR 0 8
14999: PUSH
15000: LD_VAR 0 1
15004: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15005: LD_ADDR_VAR 0 10
15009: PUSH
15010: LD_VAR 0 10
15014: PPUSH
15015: LD_VAR 0 8
15019: PPUSH
15020: LD_VAR 0 1
15024: PUSH
15025: LD_VAR 0 7
15029: ARRAY
15030: PPUSH
15031: CALL_OW 1
15035: ST_TO_ADDR
// end ;
15036: GO 14949
15038: POP
15039: POP
// array := tmp ;
15040: LD_ADDR_VAR 0 1
15044: PUSH
15045: LD_VAR 0 10
15049: ST_TO_ADDR
// end ;
15050: GO 14931
15052: POP
15053: POP
// result := array ;
15054: LD_ADDR_VAR 0 5
15058: PUSH
15059: LD_VAR 0 1
15063: ST_TO_ADDR
// end ;
15064: LD_VAR 0 5
15068: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15069: LD_INT 0
15071: PPUSH
15072: PPUSH
// result := 0 ;
15073: LD_ADDR_VAR 0 3
15077: PUSH
15078: LD_INT 0
15080: ST_TO_ADDR
// if not array or not value in array then
15081: LD_VAR 0 1
15085: NOT
15086: IFTRUE 15101
15088: PUSH
15089: LD_VAR 0 2
15093: PUSH
15094: LD_VAR 0 1
15098: IN
15099: NOT
15100: OR
15101: IFFALSE 15105
// exit ;
15103: GO 15159
// for i = 1 to array do
15105: LD_ADDR_VAR 0 4
15109: PUSH
15110: DOUBLE
15111: LD_INT 1
15113: DEC
15114: ST_TO_ADDR
15115: LD_VAR 0 1
15119: PUSH
15120: FOR_TO
15121: IFFALSE 15157
// if value = array [ i ] then
15123: LD_VAR 0 2
15127: PUSH
15128: LD_VAR 0 1
15132: PUSH
15133: LD_VAR 0 4
15137: ARRAY
15138: EQUAL
15139: IFFALSE 15155
// begin result := i ;
15141: LD_ADDR_VAR 0 3
15145: PUSH
15146: LD_VAR 0 4
15150: ST_TO_ADDR
// exit ;
15151: POP
15152: POP
15153: GO 15159
// end ;
15155: GO 15120
15157: POP
15158: POP
// end ;
15159: LD_VAR 0 3
15163: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15164: LD_INT 0
15166: PPUSH
// vc_chassis := chassis ;
15167: LD_ADDR_OWVAR 37
15171: PUSH
15172: LD_VAR 0 1
15176: ST_TO_ADDR
// vc_engine := engine ;
15177: LD_ADDR_OWVAR 39
15181: PUSH
15182: LD_VAR 0 2
15186: ST_TO_ADDR
// vc_control := control ;
15187: LD_ADDR_OWVAR 38
15191: PUSH
15192: LD_VAR 0 3
15196: ST_TO_ADDR
// vc_weapon := weapon ;
15197: LD_ADDR_OWVAR 40
15201: PUSH
15202: LD_VAR 0 4
15206: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15207: LD_ADDR_OWVAR 41
15211: PUSH
15212: LD_VAR 0 5
15216: ST_TO_ADDR
// end ;
15217: LD_VAR 0 6
15221: RET
// export function WantPlant ( unit ) ; var task ; begin
15222: LD_INT 0
15224: PPUSH
15225: PPUSH
// result := false ;
15226: LD_ADDR_VAR 0 2
15230: PUSH
15231: LD_INT 0
15233: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15234: LD_ADDR_VAR 0 3
15238: PUSH
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 437
15248: ST_TO_ADDR
// if task then
15249: LD_VAR 0 3
15253: IFFALSE 15281
// if task [ 1 ] [ 1 ] = p then
15255: LD_VAR 0 3
15259: PUSH
15260: LD_INT 1
15262: ARRAY
15263: PUSH
15264: LD_INT 1
15266: ARRAY
15267: PUSH
15268: LD_STRING p
15270: EQUAL
15271: IFFALSE 15281
// result := true ;
15273: LD_ADDR_VAR 0 2
15277: PUSH
15278: LD_INT 1
15280: ST_TO_ADDR
// end ;
15281: LD_VAR 0 2
15285: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15286: LD_INT 0
15288: PPUSH
15289: PPUSH
15290: PPUSH
15291: PPUSH
// if pos < 1 then
15292: LD_VAR 0 2
15296: PUSH
15297: LD_INT 1
15299: LESS
15300: IFFALSE 15304
// exit ;
15302: GO 15607
// if pos = 1 then
15304: LD_VAR 0 2
15308: PUSH
15309: LD_INT 1
15311: EQUAL
15312: IFFALSE 15345
// result := Replace ( arr , pos [ 1 ] , value ) else
15314: LD_ADDR_VAR 0 4
15318: PUSH
15319: LD_VAR 0 1
15323: PPUSH
15324: LD_VAR 0 2
15328: PUSH
15329: LD_INT 1
15331: ARRAY
15332: PPUSH
15333: LD_VAR 0 3
15337: PPUSH
15338: CALL_OW 1
15342: ST_TO_ADDR
15343: GO 15607
// begin tmp := arr ;
15345: LD_ADDR_VAR 0 6
15349: PUSH
15350: LD_VAR 0 1
15354: ST_TO_ADDR
// s_arr := [ tmp ] ;
15355: LD_ADDR_VAR 0 7
15359: PUSH
15360: LD_VAR 0 6
15364: PUSH
15365: EMPTY
15366: LIST
15367: ST_TO_ADDR
// for i = 1 to pos - 1 do
15368: LD_ADDR_VAR 0 5
15372: PUSH
15373: DOUBLE
15374: LD_INT 1
15376: DEC
15377: ST_TO_ADDR
15378: LD_VAR 0 2
15382: PUSH
15383: LD_INT 1
15385: MINUS
15386: PUSH
15387: FOR_TO
15388: IFFALSE 15433
// begin tmp := tmp [ pos [ i ] ] ;
15390: LD_ADDR_VAR 0 6
15394: PUSH
15395: LD_VAR 0 6
15399: PUSH
15400: LD_VAR 0 2
15404: PUSH
15405: LD_VAR 0 5
15409: ARRAY
15410: ARRAY
15411: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15412: LD_ADDR_VAR 0 7
15416: PUSH
15417: LD_VAR 0 7
15421: PUSH
15422: LD_VAR 0 6
15426: PUSH
15427: EMPTY
15428: LIST
15429: ADD
15430: ST_TO_ADDR
// end ;
15431: GO 15387
15433: POP
15434: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15435: LD_ADDR_VAR 0 6
15439: PUSH
15440: LD_VAR 0 6
15444: PPUSH
15445: LD_VAR 0 2
15449: PUSH
15450: LD_VAR 0 2
15454: ARRAY
15455: PPUSH
15456: LD_VAR 0 3
15460: PPUSH
15461: CALL_OW 1
15465: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15466: LD_ADDR_VAR 0 7
15470: PUSH
15471: LD_VAR 0 7
15475: PPUSH
15476: LD_VAR 0 7
15480: PPUSH
15481: LD_VAR 0 6
15485: PPUSH
15486: CALL_OW 1
15490: ST_TO_ADDR
// for i = s_arr downto 2 do
15491: LD_ADDR_VAR 0 5
15495: PUSH
15496: DOUBLE
15497: LD_VAR 0 7
15501: INC
15502: ST_TO_ADDR
15503: LD_INT 2
15505: PUSH
15506: FOR_DOWNTO
15507: IFFALSE 15591
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15509: LD_ADDR_VAR 0 6
15513: PUSH
15514: LD_VAR 0 7
15518: PUSH
15519: LD_VAR 0 5
15523: PUSH
15524: LD_INT 1
15526: MINUS
15527: ARRAY
15528: PPUSH
15529: LD_VAR 0 2
15533: PUSH
15534: LD_VAR 0 5
15538: PUSH
15539: LD_INT 1
15541: MINUS
15542: ARRAY
15543: PPUSH
15544: LD_VAR 0 7
15548: PUSH
15549: LD_VAR 0 5
15553: ARRAY
15554: PPUSH
15555: CALL_OW 1
15559: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15560: LD_ADDR_VAR 0 7
15564: PUSH
15565: LD_VAR 0 7
15569: PPUSH
15570: LD_VAR 0 5
15574: PUSH
15575: LD_INT 1
15577: MINUS
15578: PPUSH
15579: LD_VAR 0 6
15583: PPUSH
15584: CALL_OW 1
15588: ST_TO_ADDR
// end ;
15589: GO 15506
15591: POP
15592: POP
// result := s_arr [ 1 ] ;
15593: LD_ADDR_VAR 0 4
15597: PUSH
15598: LD_VAR 0 7
15602: PUSH
15603: LD_INT 1
15605: ARRAY
15606: ST_TO_ADDR
// end ; end ;
15607: LD_VAR 0 4
15611: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15612: LD_INT 0
15614: PPUSH
15615: PPUSH
// if not list then
15616: LD_VAR 0 1
15620: NOT
15621: IFFALSE 15625
// exit ;
15623: GO 15716
// i := list [ pos1 ] ;
15625: LD_ADDR_VAR 0 5
15629: PUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_VAR 0 2
15639: ARRAY
15640: ST_TO_ADDR
// if not i then
15641: LD_VAR 0 5
15645: NOT
15646: IFFALSE 15650
// exit ;
15648: GO 15716
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15650: LD_ADDR_VAR 0 1
15654: PUSH
15655: LD_VAR 0 1
15659: PPUSH
15660: LD_VAR 0 2
15664: PPUSH
15665: LD_VAR 0 1
15669: PUSH
15670: LD_VAR 0 3
15674: ARRAY
15675: PPUSH
15676: CALL_OW 1
15680: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15681: LD_ADDR_VAR 0 1
15685: PUSH
15686: LD_VAR 0 1
15690: PPUSH
15691: LD_VAR 0 3
15695: PPUSH
15696: LD_VAR 0 5
15700: PPUSH
15701: CALL_OW 1
15705: ST_TO_ADDR
// result := list ;
15706: LD_ADDR_VAR 0 4
15710: PUSH
15711: LD_VAR 0 1
15715: ST_TO_ADDR
// end ;
15716: LD_VAR 0 4
15720: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15721: LD_INT 0
15723: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15724: LD_ADDR_VAR 0 5
15728: PUSH
15729: LD_VAR 0 1
15733: PPUSH
15734: CALL_OW 250
15738: PPUSH
15739: LD_VAR 0 1
15743: PPUSH
15744: CALL_OW 251
15748: PPUSH
15749: LD_VAR 0 2
15753: PPUSH
15754: LD_VAR 0 3
15758: PPUSH
15759: LD_VAR 0 4
15763: PPUSH
15764: CALL 16146 0 5
15768: ST_TO_ADDR
// end ;
15769: LD_VAR 0 5
15773: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15774: LD_INT 0
15776: PPUSH
15777: PPUSH
15778: PPUSH
15779: PPUSH
// if not list or not unit then
15780: LD_VAR 0 2
15784: NOT
15785: IFTRUE 15794
15787: PUSH
15788: LD_VAR 0 1
15792: NOT
15793: OR
15794: IFFALSE 15798
// exit ;
15796: GO 16141
// result := [ ] ;
15798: LD_ADDR_VAR 0 5
15802: PUSH
15803: EMPTY
15804: ST_TO_ADDR
// for i in list do
15805: LD_ADDR_VAR 0 6
15809: PUSH
15810: LD_VAR 0 2
15814: PUSH
15815: FOR_IN
15816: IFFALSE 16034
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15818: LD_ADDR_VAR 0 8
15822: PUSH
15823: LD_VAR 0 1
15827: PPUSH
15828: LD_VAR 0 6
15832: PUSH
15833: LD_INT 1
15835: ARRAY
15836: PPUSH
15837: LD_VAR 0 6
15841: PUSH
15842: LD_INT 2
15844: ARRAY
15845: PPUSH
15846: CALL_OW 297
15850: ST_TO_ADDR
// if not Count ( result ) then
15851: LD_VAR 0 5
15855: PPUSH
15856: CALL 12402 0 1
15860: NOT
15861: IFFALSE 15894
// begin result := Join ( result , [ i , tmp ] ) ;
15863: LD_ADDR_VAR 0 5
15867: PUSH
15868: LD_VAR 0 5
15872: PPUSH
15873: LD_VAR 0 6
15877: PUSH
15878: LD_VAR 0 8
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PPUSH
15887: CALL 48334 0 2
15891: ST_TO_ADDR
// continue ;
15892: GO 15815
// end ; if result [ result ] [ 2 ] <= tmp then
15894: LD_VAR 0 5
15898: PUSH
15899: LD_VAR 0 5
15903: ARRAY
15904: PUSH
15905: LD_INT 2
15907: ARRAY
15908: PUSH
15909: LD_VAR 0 8
15913: LESSEQUAL
15914: IFFALSE 15947
// result := Join ( result , [ i , tmp ] ) else
15916: LD_ADDR_VAR 0 5
15920: PUSH
15921: LD_VAR 0 5
15925: PPUSH
15926: LD_VAR 0 6
15930: PUSH
15931: LD_VAR 0 8
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PPUSH
15940: CALL 48334 0 2
15944: ST_TO_ADDR
15945: GO 16032
// begin for j := 1 to Count ( result ) do
15947: LD_ADDR_VAR 0 7
15951: PUSH
15952: DOUBLE
15953: LD_INT 1
15955: DEC
15956: ST_TO_ADDR
15957: LD_VAR 0 5
15961: PPUSH
15962: CALL 12402 0 1
15966: PUSH
15967: FOR_TO
15968: IFFALSE 16030
// begin if tmp < result [ j ] [ 2 ] then
15970: LD_VAR 0 8
15974: PUSH
15975: LD_VAR 0 5
15979: PUSH
15980: LD_VAR 0 7
15984: ARRAY
15985: PUSH
15986: LD_INT 2
15988: ARRAY
15989: LESS
15990: IFFALSE 16028
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15992: LD_ADDR_VAR 0 5
15996: PUSH
15997: LD_VAR 0 5
16001: PPUSH
16002: LD_VAR 0 7
16006: PPUSH
16007: LD_VAR 0 6
16011: PUSH
16012: LD_VAR 0 8
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PPUSH
16021: CALL_OW 2
16025: ST_TO_ADDR
// break ;
16026: GO 16030
// end ; end ;
16028: GO 15967
16030: POP
16031: POP
// end ; end ;
16032: GO 15815
16034: POP
16035: POP
// if result and not asc then
16036: LD_VAR 0 5
16040: IFFALSE 16049
16042: PUSH
16043: LD_VAR 0 3
16047: NOT
16048: AND
16049: IFFALSE 16066
// result := ReverseArray ( result ) ;
16051: LD_ADDR_VAR 0 5
16055: PUSH
16056: LD_VAR 0 5
16060: PPUSH
16061: CALL 43424 0 1
16065: ST_TO_ADDR
// tmp := [ ] ;
16066: LD_ADDR_VAR 0 8
16070: PUSH
16071: EMPTY
16072: ST_TO_ADDR
// if mode then
16073: LD_VAR 0 4
16077: IFFALSE 16141
// begin for i := 1 to result do
16079: LD_ADDR_VAR 0 6
16083: PUSH
16084: DOUBLE
16085: LD_INT 1
16087: DEC
16088: ST_TO_ADDR
16089: LD_VAR 0 5
16093: PUSH
16094: FOR_TO
16095: IFFALSE 16129
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
16097: LD_ADDR_VAR 0 8
16101: PUSH
16102: LD_VAR 0 8
16106: PPUSH
16107: LD_VAR 0 5
16111: PUSH
16112: LD_VAR 0 6
16116: ARRAY
16117: PUSH
16118: LD_INT 1
16120: ARRAY
16121: PPUSH
16122: CALL 48334 0 2
16126: ST_TO_ADDR
16127: GO 16094
16129: POP
16130: POP
// result := tmp ;
16131: LD_ADDR_VAR 0 5
16135: PUSH
16136: LD_VAR 0 8
16140: ST_TO_ADDR
// end ; end ;
16141: LD_VAR 0 5
16145: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16146: LD_INT 0
16148: PPUSH
16149: PPUSH
16150: PPUSH
16151: PPUSH
// if not list then
16152: LD_VAR 0 3
16156: NOT
16157: IFFALSE 16161
// exit ;
16159: GO 16551
// result := [ ] ;
16161: LD_ADDR_VAR 0 6
16165: PUSH
16166: EMPTY
16167: ST_TO_ADDR
// for i in list do
16168: LD_ADDR_VAR 0 7
16172: PUSH
16173: LD_VAR 0 3
16177: PUSH
16178: FOR_IN
16179: IFFALSE 16381
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16181: LD_ADDR_VAR 0 9
16185: PUSH
16186: LD_VAR 0 7
16190: PPUSH
16191: LD_VAR 0 1
16195: PPUSH
16196: LD_VAR 0 2
16200: PPUSH
16201: CALL_OW 297
16205: ST_TO_ADDR
// if not result then
16206: LD_VAR 0 6
16210: NOT
16211: IFFALSE 16237
// result := [ [ i , tmp ] ] else
16213: LD_ADDR_VAR 0 6
16217: PUSH
16218: LD_VAR 0 7
16222: PUSH
16223: LD_VAR 0 9
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: EMPTY
16233: LIST
16234: ST_TO_ADDR
16235: GO 16379
// begin if result [ result ] [ 2 ] <= tmp then
16237: LD_VAR 0 6
16241: PUSH
16242: LD_VAR 0 6
16246: ARRAY
16247: PUSH
16248: LD_INT 2
16250: ARRAY
16251: PUSH
16252: LD_VAR 0 9
16256: LESSEQUAL
16257: IFFALSE 16299
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16259: LD_ADDR_VAR 0 6
16263: PUSH
16264: LD_VAR 0 6
16268: PPUSH
16269: LD_VAR 0 6
16273: PUSH
16274: LD_INT 1
16276: PLUS
16277: PPUSH
16278: LD_VAR 0 7
16282: PUSH
16283: LD_VAR 0 9
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PPUSH
16292: CALL_OW 2
16296: ST_TO_ADDR
16297: GO 16379
// for j := 1 to result do
16299: LD_ADDR_VAR 0 8
16303: PUSH
16304: DOUBLE
16305: LD_INT 1
16307: DEC
16308: ST_TO_ADDR
16309: LD_VAR 0 6
16313: PUSH
16314: FOR_TO
16315: IFFALSE 16377
// begin if tmp < result [ j ] [ 2 ] then
16317: LD_VAR 0 9
16321: PUSH
16322: LD_VAR 0 6
16326: PUSH
16327: LD_VAR 0 8
16331: ARRAY
16332: PUSH
16333: LD_INT 2
16335: ARRAY
16336: LESS
16337: IFFALSE 16375
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16339: LD_ADDR_VAR 0 6
16343: PUSH
16344: LD_VAR 0 6
16348: PPUSH
16349: LD_VAR 0 8
16353: PPUSH
16354: LD_VAR 0 7
16358: PUSH
16359: LD_VAR 0 9
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PPUSH
16368: CALL_OW 2
16372: ST_TO_ADDR
// break ;
16373: GO 16377
// end ; end ;
16375: GO 16314
16377: POP
16378: POP
// end ; end ;
16379: GO 16178
16381: POP
16382: POP
// if result and not asc then
16383: LD_VAR 0 6
16387: IFFALSE 16396
16389: PUSH
16390: LD_VAR 0 4
16394: NOT
16395: AND
16396: IFFALSE 16471
// begin tmp := result ;
16398: LD_ADDR_VAR 0 9
16402: PUSH
16403: LD_VAR 0 6
16407: ST_TO_ADDR
// for i = tmp downto 1 do
16408: LD_ADDR_VAR 0 7
16412: PUSH
16413: DOUBLE
16414: LD_VAR 0 9
16418: INC
16419: ST_TO_ADDR
16420: LD_INT 1
16422: PUSH
16423: FOR_DOWNTO
16424: IFFALSE 16469
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16426: LD_ADDR_VAR 0 6
16430: PUSH
16431: LD_VAR 0 6
16435: PPUSH
16436: LD_VAR 0 9
16440: PUSH
16441: LD_VAR 0 7
16445: MINUS
16446: PUSH
16447: LD_INT 1
16449: PLUS
16450: PPUSH
16451: LD_VAR 0 9
16455: PUSH
16456: LD_VAR 0 7
16460: ARRAY
16461: PPUSH
16462: CALL_OW 1
16466: ST_TO_ADDR
16467: GO 16423
16469: POP
16470: POP
// end ; tmp := [ ] ;
16471: LD_ADDR_VAR 0 9
16475: PUSH
16476: EMPTY
16477: ST_TO_ADDR
// if mode then
16478: LD_VAR 0 5
16482: IFFALSE 16551
// begin for i = 1 to result do
16484: LD_ADDR_VAR 0 7
16488: PUSH
16489: DOUBLE
16490: LD_INT 1
16492: DEC
16493: ST_TO_ADDR
16494: LD_VAR 0 6
16498: PUSH
16499: FOR_TO
16500: IFFALSE 16539
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16502: LD_ADDR_VAR 0 9
16506: PUSH
16507: LD_VAR 0 9
16511: PPUSH
16512: LD_VAR 0 7
16516: PPUSH
16517: LD_VAR 0 6
16521: PUSH
16522: LD_VAR 0 7
16526: ARRAY
16527: PUSH
16528: LD_INT 1
16530: ARRAY
16531: PPUSH
16532: CALL_OW 1
16536: ST_TO_ADDR
16537: GO 16499
16539: POP
16540: POP
// result := tmp ;
16541: LD_ADDR_VAR 0 6
16545: PUSH
16546: LD_VAR 0 9
16550: ST_TO_ADDR
// end ; end ;
16551: LD_VAR 0 6
16555: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16556: LD_INT 0
16558: PPUSH
16559: PPUSH
16560: PPUSH
16561: PPUSH
16562: PPUSH
16563: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16564: LD_ADDR_VAR 0 5
16568: PUSH
16569: LD_INT 0
16571: PUSH
16572: LD_INT 0
16574: PUSH
16575: LD_INT 0
16577: PUSH
16578: EMPTY
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: ST_TO_ADDR
// if not x or not y then
16586: LD_VAR 0 2
16590: NOT
16591: IFTRUE 16600
16593: PUSH
16594: LD_VAR 0 3
16598: NOT
16599: OR
16600: IFFALSE 16604
// exit ;
16602: GO 18260
// if not range then
16604: LD_VAR 0 4
16608: NOT
16609: IFFALSE 16619
// range := 10 ;
16611: LD_ADDR_VAR 0 4
16615: PUSH
16616: LD_INT 10
16618: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16619: LD_ADDR_VAR 0 8
16623: PUSH
16624: LD_INT 81
16626: PUSH
16627: LD_VAR 0 1
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 92
16638: PUSH
16639: LD_VAR 0 2
16643: PUSH
16644: LD_VAR 0 3
16648: PUSH
16649: LD_VAR 0 4
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 3
16662: PUSH
16663: LD_INT 21
16665: PUSH
16666: LD_INT 3
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: LIST
16681: PPUSH
16682: CALL_OW 69
16686: ST_TO_ADDR
// if not tmp then
16687: LD_VAR 0 8
16691: NOT
16692: IFFALSE 16696
// exit ;
16694: GO 18260
// for i in tmp do
16696: LD_ADDR_VAR 0 6
16700: PUSH
16701: LD_VAR 0 8
16705: PUSH
16706: FOR_IN
16707: IFFALSE 18235
// begin points := [ 0 , 0 , 0 ] ;
16709: LD_ADDR_VAR 0 9
16713: PUSH
16714: LD_INT 0
16716: PUSH
16717: LD_INT 0
16719: PUSH
16720: LD_INT 0
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: LIST
16727: ST_TO_ADDR
// bpoints := 1 ;
16728: LD_ADDR_VAR 0 10
16732: PUSH
16733: LD_INT 1
16735: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16736: LD_VAR 0 6
16740: PPUSH
16741: CALL_OW 247
16745: PUSH
16746: LD_INT 1
16748: DOUBLE
16749: EQUAL
16750: IFTRUE 16754
16752: GO 17336
16754: POP
// begin if GetClass ( i ) = 1 then
16755: LD_VAR 0 6
16759: PPUSH
16760: CALL_OW 257
16764: PUSH
16765: LD_INT 1
16767: EQUAL
16768: IFFALSE 16789
// points := [ 10 , 5 , 3 ] ;
16770: LD_ADDR_VAR 0 9
16774: PUSH
16775: LD_INT 10
16777: PUSH
16778: LD_INT 5
16780: PUSH
16781: LD_INT 3
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: LIST
16788: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16789: LD_VAR 0 6
16793: PPUSH
16794: CALL_OW 257
16798: PUSH
16799: LD_INT 2
16801: PUSH
16802: LD_INT 3
16804: PUSH
16805: LD_INT 4
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: LIST
16812: IN
16813: IFFALSE 16834
// points := [ 3 , 2 , 1 ] ;
16815: LD_ADDR_VAR 0 9
16819: PUSH
16820: LD_INT 3
16822: PUSH
16823: LD_INT 2
16825: PUSH
16826: LD_INT 1
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: LIST
16833: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16834: LD_VAR 0 6
16838: PPUSH
16839: CALL_OW 257
16843: PUSH
16844: LD_INT 5
16846: EQUAL
16847: IFFALSE 16868
// points := [ 130 , 5 , 2 ] ;
16849: LD_ADDR_VAR 0 9
16853: PUSH
16854: LD_INT 130
16856: PUSH
16857: LD_INT 5
16859: PUSH
16860: LD_INT 2
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: LIST
16867: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16868: LD_VAR 0 6
16872: PPUSH
16873: CALL_OW 257
16877: PUSH
16878: LD_INT 8
16880: EQUAL
16881: IFFALSE 16902
// points := [ 35 , 35 , 30 ] ;
16883: LD_ADDR_VAR 0 9
16887: PUSH
16888: LD_INT 35
16890: PUSH
16891: LD_INT 35
16893: PUSH
16894: LD_INT 30
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: LIST
16901: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16902: LD_VAR 0 6
16906: PPUSH
16907: CALL_OW 257
16911: PUSH
16912: LD_INT 9
16914: EQUAL
16915: IFFALSE 16936
// points := [ 20 , 55 , 40 ] ;
16917: LD_ADDR_VAR 0 9
16921: PUSH
16922: LD_INT 20
16924: PUSH
16925: LD_INT 55
16927: PUSH
16928: LD_INT 40
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: LIST
16935: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16936: LD_VAR 0 6
16940: PPUSH
16941: CALL_OW 257
16945: PUSH
16946: LD_INT 12
16948: PUSH
16949: LD_INT 16
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: IN
16956: IFFALSE 16977
// points := [ 5 , 3 , 2 ] ;
16958: LD_ADDR_VAR 0 9
16962: PUSH
16963: LD_INT 5
16965: PUSH
16966: LD_INT 3
16968: PUSH
16969: LD_INT 2
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16977: LD_VAR 0 6
16981: PPUSH
16982: CALL_OW 257
16986: PUSH
16987: LD_INT 17
16989: EQUAL
16990: IFFALSE 17011
// points := [ 100 , 50 , 75 ] ;
16992: LD_ADDR_VAR 0 9
16996: PUSH
16997: LD_INT 100
16999: PUSH
17000: LD_INT 50
17002: PUSH
17003: LD_INT 75
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: LIST
17010: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17011: LD_VAR 0 6
17015: PPUSH
17016: CALL_OW 257
17020: PUSH
17021: LD_INT 15
17023: EQUAL
17024: IFFALSE 17045
// points := [ 10 , 5 , 3 ] ;
17026: LD_ADDR_VAR 0 9
17030: PUSH
17031: LD_INT 10
17033: PUSH
17034: LD_INT 5
17036: PUSH
17037: LD_INT 3
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17045: LD_VAR 0 6
17049: PPUSH
17050: CALL_OW 257
17054: PUSH
17055: LD_INT 14
17057: EQUAL
17058: IFFALSE 17079
// points := [ 10 , 0 , 0 ] ;
17060: LD_ADDR_VAR 0 9
17064: PUSH
17065: LD_INT 10
17067: PUSH
17068: LD_INT 0
17070: PUSH
17071: LD_INT 0
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17079: LD_VAR 0 6
17083: PPUSH
17084: CALL_OW 257
17088: PUSH
17089: LD_INT 11
17091: EQUAL
17092: IFFALSE 17113
// points := [ 30 , 10 , 5 ] ;
17094: LD_ADDR_VAR 0 9
17098: PUSH
17099: LD_INT 30
17101: PUSH
17102: LD_INT 10
17104: PUSH
17105: LD_INT 5
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: LIST
17112: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17113: LD_VAR 0 1
17117: PPUSH
17118: LD_INT 5
17120: PPUSH
17121: CALL_OW 321
17125: PUSH
17126: LD_INT 2
17128: EQUAL
17129: IFFALSE 17146
// bpoints := bpoints * 1.8 ;
17131: LD_ADDR_VAR 0 10
17135: PUSH
17136: LD_VAR 0 10
17140: PUSH
17141: LD_REAL  1.80000000000000E+0000
17144: MUL
17145: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17146: LD_VAR 0 6
17150: PPUSH
17151: CALL_OW 257
17155: PUSH
17156: LD_INT 1
17158: PUSH
17159: LD_INT 2
17161: PUSH
17162: LD_INT 3
17164: PUSH
17165: LD_INT 4
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: IN
17174: IFFALSE 17194
17176: PUSH
17177: LD_VAR 0 1
17181: PPUSH
17182: LD_INT 51
17184: PPUSH
17185: CALL_OW 321
17189: PUSH
17190: LD_INT 2
17192: EQUAL
17193: AND
17194: IFFALSE 17211
// bpoints := bpoints * 1.2 ;
17196: LD_ADDR_VAR 0 10
17200: PUSH
17201: LD_VAR 0 10
17205: PUSH
17206: LD_REAL  1.20000000000000E+0000
17209: MUL
17210: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17211: LD_VAR 0 6
17215: PPUSH
17216: CALL_OW 257
17220: PUSH
17221: LD_INT 5
17223: PUSH
17224: LD_INT 7
17226: PUSH
17227: LD_INT 9
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: LIST
17234: IN
17235: IFFALSE 17255
17237: PUSH
17238: LD_VAR 0 1
17242: PPUSH
17243: LD_INT 52
17245: PPUSH
17246: CALL_OW 321
17250: PUSH
17251: LD_INT 2
17253: EQUAL
17254: AND
17255: IFFALSE 17272
// bpoints := bpoints * 1.5 ;
17257: LD_ADDR_VAR 0 10
17261: PUSH
17262: LD_VAR 0 10
17266: PUSH
17267: LD_REAL  1.50000000000000E+0000
17270: MUL
17271: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17272: LD_VAR 0 1
17276: PPUSH
17277: LD_INT 66
17279: PPUSH
17280: CALL_OW 321
17284: PUSH
17285: LD_INT 2
17287: EQUAL
17288: IFFALSE 17305
// bpoints := bpoints * 1.1 ;
17290: LD_ADDR_VAR 0 10
17294: PUSH
17295: LD_VAR 0 10
17299: PUSH
17300: LD_REAL  1.10000000000000E+0000
17303: MUL
17304: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17305: LD_ADDR_VAR 0 10
17309: PUSH
17310: LD_VAR 0 10
17314: PUSH
17315: LD_VAR 0 6
17319: PPUSH
17320: LD_INT 1
17322: PPUSH
17323: CALL_OW 259
17327: PUSH
17328: LD_REAL  1.15000000000000E+0000
17331: MUL
17332: MUL
17333: ST_TO_ADDR
// end ; unit_vehicle :
17334: GO 18164
17336: LD_INT 2
17338: DOUBLE
17339: EQUAL
17340: IFTRUE 17344
17342: GO 18152
17344: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17345: LD_VAR 0 6
17349: PPUSH
17350: CALL_OW 264
17354: PUSH
17355: LD_INT 2
17357: PUSH
17358: LD_INT 42
17360: PUSH
17361: LD_INT 24
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: LIST
17368: IN
17369: IFFALSE 17390
// points := [ 25 , 5 , 3 ] ;
17371: LD_ADDR_VAR 0 9
17375: PUSH
17376: LD_INT 25
17378: PUSH
17379: LD_INT 5
17381: PUSH
17382: LD_INT 3
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: LIST
17389: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17390: LD_VAR 0 6
17394: PPUSH
17395: CALL_OW 264
17399: PUSH
17400: LD_INT 4
17402: PUSH
17403: LD_INT 43
17405: PUSH
17406: LD_INT 25
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: IN
17414: IFFALSE 17435
// points := [ 40 , 15 , 5 ] ;
17416: LD_ADDR_VAR 0 9
17420: PUSH
17421: LD_INT 40
17423: PUSH
17424: LD_INT 15
17426: PUSH
17427: LD_INT 5
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17435: LD_VAR 0 6
17439: PPUSH
17440: CALL_OW 264
17444: PUSH
17445: LD_INT 3
17447: PUSH
17448: LD_INT 23
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: IN
17455: IFFALSE 17476
// points := [ 7 , 25 , 8 ] ;
17457: LD_ADDR_VAR 0 9
17461: PUSH
17462: LD_INT 7
17464: PUSH
17465: LD_INT 25
17467: PUSH
17468: LD_INT 8
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: LIST
17475: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17476: LD_VAR 0 6
17480: PPUSH
17481: CALL_OW 264
17485: PUSH
17486: LD_INT 5
17488: PUSH
17489: LD_INT 27
17491: PUSH
17492: LD_INT 44
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: LIST
17499: IN
17500: IFFALSE 17521
// points := [ 14 , 50 , 16 ] ;
17502: LD_ADDR_VAR 0 9
17506: PUSH
17507: LD_INT 14
17509: PUSH
17510: LD_INT 50
17512: PUSH
17513: LD_INT 16
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: LIST
17520: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17521: LD_VAR 0 6
17525: PPUSH
17526: CALL_OW 264
17530: PUSH
17531: LD_INT 6
17533: PUSH
17534: LD_INT 46
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: IN
17541: IFFALSE 17562
// points := [ 32 , 120 , 70 ] ;
17543: LD_ADDR_VAR 0 9
17547: PUSH
17548: LD_INT 32
17550: PUSH
17551: LD_INT 120
17553: PUSH
17554: LD_INT 70
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: LIST
17561: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17562: LD_VAR 0 6
17566: PPUSH
17567: CALL_OW 264
17571: PUSH
17572: LD_INT 7
17574: PUSH
17575: LD_INT 28
17577: PUSH
17578: LD_INT 45
17580: PUSH
17581: LD_INT 92
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: IN
17590: IFFALSE 17611
// points := [ 35 , 20 , 45 ] ;
17592: LD_ADDR_VAR 0 9
17596: PUSH
17597: LD_INT 35
17599: PUSH
17600: LD_INT 20
17602: PUSH
17603: LD_INT 45
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17611: LD_VAR 0 6
17615: PPUSH
17616: CALL_OW 264
17620: PUSH
17621: LD_INT 47
17623: PUSH
17624: EMPTY
17625: LIST
17626: IN
17627: IFFALSE 17648
// points := [ 67 , 45 , 75 ] ;
17629: LD_ADDR_VAR 0 9
17633: PUSH
17634: LD_INT 67
17636: PUSH
17637: LD_INT 45
17639: PUSH
17640: LD_INT 75
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: LIST
17647: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17648: LD_VAR 0 6
17652: PPUSH
17653: CALL_OW 264
17657: PUSH
17658: LD_INT 26
17660: PUSH
17661: EMPTY
17662: LIST
17663: IN
17664: IFFALSE 17685
// points := [ 120 , 30 , 80 ] ;
17666: LD_ADDR_VAR 0 9
17670: PUSH
17671: LD_INT 120
17673: PUSH
17674: LD_INT 30
17676: PUSH
17677: LD_INT 80
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: LIST
17684: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17685: LD_VAR 0 6
17689: PPUSH
17690: CALL_OW 264
17694: PUSH
17695: LD_INT 22
17697: PUSH
17698: EMPTY
17699: LIST
17700: IN
17701: IFFALSE 17722
// points := [ 40 , 1 , 1 ] ;
17703: LD_ADDR_VAR 0 9
17707: PUSH
17708: LD_INT 40
17710: PUSH
17711: LD_INT 1
17713: PUSH
17714: LD_INT 1
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17722: LD_VAR 0 6
17726: PPUSH
17727: CALL_OW 264
17731: PUSH
17732: LD_INT 29
17734: PUSH
17735: EMPTY
17736: LIST
17737: IN
17738: IFFALSE 17759
// points := [ 70 , 200 , 400 ] ;
17740: LD_ADDR_VAR 0 9
17744: PUSH
17745: LD_INT 70
17747: PUSH
17748: LD_INT 200
17750: PUSH
17751: LD_INT 400
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: LIST
17758: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17759: LD_VAR 0 6
17763: PPUSH
17764: CALL_OW 264
17768: PUSH
17769: LD_INT 14
17771: PUSH
17772: LD_INT 53
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: IN
17779: IFFALSE 17800
// points := [ 40 , 10 , 20 ] ;
17781: LD_ADDR_VAR 0 9
17785: PUSH
17786: LD_INT 40
17788: PUSH
17789: LD_INT 10
17791: PUSH
17792: LD_INT 20
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17800: LD_VAR 0 6
17804: PPUSH
17805: CALL_OW 264
17809: PUSH
17810: LD_INT 9
17812: PUSH
17813: EMPTY
17814: LIST
17815: IN
17816: IFFALSE 17837
// points := [ 5 , 70 , 20 ] ;
17818: LD_ADDR_VAR 0 9
17822: PUSH
17823: LD_INT 5
17825: PUSH
17826: LD_INT 70
17828: PUSH
17829: LD_INT 20
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: LIST
17836: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17837: LD_VAR 0 6
17841: PPUSH
17842: CALL_OW 264
17846: PUSH
17847: LD_INT 10
17849: PUSH
17850: EMPTY
17851: LIST
17852: IN
17853: IFFALSE 17874
// points := [ 35 , 110 , 70 ] ;
17855: LD_ADDR_VAR 0 9
17859: PUSH
17860: LD_INT 35
17862: PUSH
17863: LD_INT 110
17865: PUSH
17866: LD_INT 70
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: LIST
17873: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17874: LD_VAR 0 6
17878: PPUSH
17879: CALL_OW 265
17883: PUSH
17884: LD_INT 25
17886: EQUAL
17887: IFFALSE 17908
// points := [ 80 , 65 , 100 ] ;
17889: LD_ADDR_VAR 0 9
17893: PUSH
17894: LD_INT 80
17896: PUSH
17897: LD_INT 65
17899: PUSH
17900: LD_INT 100
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: LIST
17907: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17908: LD_VAR 0 6
17912: PPUSH
17913: CALL_OW 263
17917: PUSH
17918: LD_INT 1
17920: EQUAL
17921: IFFALSE 17956
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17923: LD_ADDR_VAR 0 10
17927: PUSH
17928: LD_VAR 0 10
17932: PUSH
17933: LD_VAR 0 6
17937: PPUSH
17938: CALL_OW 311
17942: PPUSH
17943: LD_INT 3
17945: PPUSH
17946: CALL_OW 259
17950: PUSH
17951: LD_INT 4
17953: MUL
17954: MUL
17955: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17956: LD_VAR 0 6
17960: PPUSH
17961: CALL_OW 263
17965: PUSH
17966: LD_INT 2
17968: EQUAL
17969: IFFALSE 18020
// begin j := IsControledBy ( i ) ;
17971: LD_ADDR_VAR 0 7
17975: PUSH
17976: LD_VAR 0 6
17980: PPUSH
17981: CALL_OW 312
17985: ST_TO_ADDR
// if j then
17986: LD_VAR 0 7
17990: IFFALSE 18020
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17992: LD_ADDR_VAR 0 10
17996: PUSH
17997: LD_VAR 0 10
18001: PUSH
18002: LD_VAR 0 7
18006: PPUSH
18007: LD_INT 3
18009: PPUSH
18010: CALL_OW 259
18014: PUSH
18015: LD_INT 3
18017: MUL
18018: MUL
18019: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18020: LD_VAR 0 6
18024: PPUSH
18025: CALL_OW 264
18029: PUSH
18030: LD_INT 5
18032: PUSH
18033: LD_INT 6
18035: PUSH
18036: LD_INT 46
18038: PUSH
18039: LD_INT 44
18041: PUSH
18042: LD_INT 47
18044: PUSH
18045: LD_INT 45
18047: PUSH
18048: LD_INT 28
18050: PUSH
18051: LD_INT 7
18053: PUSH
18054: LD_INT 27
18056: PUSH
18057: LD_INT 29
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: IN
18072: IFFALSE 18092
18074: PUSH
18075: LD_VAR 0 1
18079: PPUSH
18080: LD_INT 52
18082: PPUSH
18083: CALL_OW 321
18087: PUSH
18088: LD_INT 2
18090: EQUAL
18091: AND
18092: IFFALSE 18109
// bpoints := bpoints * 1.2 ;
18094: LD_ADDR_VAR 0 10
18098: PUSH
18099: LD_VAR 0 10
18103: PUSH
18104: LD_REAL  1.20000000000000E+0000
18107: MUL
18108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18109: LD_VAR 0 6
18113: PPUSH
18114: CALL_OW 264
18118: PUSH
18119: LD_INT 6
18121: PUSH
18122: LD_INT 46
18124: PUSH
18125: LD_INT 47
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: LIST
18132: IN
18133: IFFALSE 18150
// bpoints := bpoints * 1.2 ;
18135: LD_ADDR_VAR 0 10
18139: PUSH
18140: LD_VAR 0 10
18144: PUSH
18145: LD_REAL  1.20000000000000E+0000
18148: MUL
18149: ST_TO_ADDR
// end ; unit_building :
18150: GO 18164
18152: LD_INT 3
18154: DOUBLE
18155: EQUAL
18156: IFTRUE 18160
18158: GO 18163
18160: POP
// ; end ;
18161: GO 18164
18163: POP
// for j = 1 to 3 do
18164: LD_ADDR_VAR 0 7
18168: PUSH
18169: DOUBLE
18170: LD_INT 1
18172: DEC
18173: ST_TO_ADDR
18174: LD_INT 3
18176: PUSH
18177: FOR_TO
18178: IFFALSE 18231
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18180: LD_ADDR_VAR 0 5
18184: PUSH
18185: LD_VAR 0 5
18189: PPUSH
18190: LD_VAR 0 7
18194: PPUSH
18195: LD_VAR 0 5
18199: PUSH
18200: LD_VAR 0 7
18204: ARRAY
18205: PUSH
18206: LD_VAR 0 9
18210: PUSH
18211: LD_VAR 0 7
18215: ARRAY
18216: PUSH
18217: LD_VAR 0 10
18221: MUL
18222: PLUS
18223: PPUSH
18224: CALL_OW 1
18228: ST_TO_ADDR
18229: GO 18177
18231: POP
18232: POP
// end ;
18233: GO 16706
18235: POP
18236: POP
// result := Replace ( result , 4 , tmp ) ;
18237: LD_ADDR_VAR 0 5
18241: PUSH
18242: LD_VAR 0 5
18246: PPUSH
18247: LD_INT 4
18249: PPUSH
18250: LD_VAR 0 8
18254: PPUSH
18255: CALL_OW 1
18259: ST_TO_ADDR
// end ;
18260: LD_VAR 0 5
18264: RET
// export function DangerAtRange ( unit , range ) ; begin
18265: LD_INT 0
18267: PPUSH
// if not unit then
18268: LD_VAR 0 1
18272: NOT
18273: IFFALSE 18277
// exit ;
18275: GO 18322
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18277: LD_ADDR_VAR 0 3
18281: PUSH
18282: LD_VAR 0 1
18286: PPUSH
18287: CALL_OW 255
18291: PPUSH
18292: LD_VAR 0 1
18296: PPUSH
18297: CALL_OW 250
18301: PPUSH
18302: LD_VAR 0 1
18306: PPUSH
18307: CALL_OW 251
18311: PPUSH
18312: LD_VAR 0 2
18316: PPUSH
18317: CALL 16556 0 4
18321: ST_TO_ADDR
// end ;
18322: LD_VAR 0 3
18326: RET
// export function DangerInArea ( side , area ) ; begin
18327: LD_INT 0
18329: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18330: LD_ADDR_VAR 0 3
18334: PUSH
18335: LD_VAR 0 2
18339: PPUSH
18340: LD_INT 81
18342: PUSH
18343: LD_VAR 0 1
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PPUSH
18352: CALL_OW 70
18356: ST_TO_ADDR
// end ;
18357: LD_VAR 0 3
18361: RET
// export function IsExtension ( b ) ; begin
18362: LD_INT 0
18364: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18365: LD_ADDR_VAR 0 2
18369: PUSH
18370: LD_VAR 0 1
18374: PUSH
18375: LD_INT 23
18377: PUSH
18378: LD_INT 20
18380: PUSH
18381: LD_INT 22
18383: PUSH
18384: LD_INT 17
18386: PUSH
18387: LD_INT 24
18389: PUSH
18390: LD_INT 21
18392: PUSH
18393: LD_INT 19
18395: PUSH
18396: LD_INT 16
18398: PUSH
18399: LD_INT 25
18401: PUSH
18402: LD_INT 18
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: IN
18417: ST_TO_ADDR
// end ;
18418: LD_VAR 0 2
18422: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18423: LD_INT 0
18425: PPUSH
18426: PPUSH
18427: PPUSH
// result := [ ] ;
18428: LD_ADDR_VAR 0 4
18432: PUSH
18433: EMPTY
18434: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18435: LD_ADDR_VAR 0 5
18439: PUSH
18440: LD_VAR 0 2
18444: PPUSH
18445: LD_INT 21
18447: PUSH
18448: LD_INT 3
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 70
18459: ST_TO_ADDR
// if not tmp then
18460: LD_VAR 0 5
18464: NOT
18465: IFFALSE 18469
// exit ;
18467: GO 18533
// if checkLink then
18469: LD_VAR 0 3
18473: IFFALSE 18523
// begin for i in tmp do
18475: LD_ADDR_VAR 0 6
18479: PUSH
18480: LD_VAR 0 5
18484: PUSH
18485: FOR_IN
18486: IFFALSE 18521
// if GetBase ( i ) <> base then
18488: LD_VAR 0 6
18492: PPUSH
18493: CALL_OW 274
18497: PUSH
18498: LD_VAR 0 1
18502: NONEQUAL
18503: IFFALSE 18519
// ComLinkToBase ( base , i ) ;
18505: LD_VAR 0 1
18509: PPUSH
18510: LD_VAR 0 6
18514: PPUSH
18515: CALL_OW 169
18519: GO 18485
18521: POP
18522: POP
// end ; result := tmp ;
18523: LD_ADDR_VAR 0 4
18527: PUSH
18528: LD_VAR 0 5
18532: ST_TO_ADDR
// end ;
18533: LD_VAR 0 4
18537: RET
// export function ComComplete ( units , b ) ; var i ; begin
18538: LD_INT 0
18540: PPUSH
18541: PPUSH
// if not units then
18542: LD_VAR 0 1
18546: NOT
18547: IFFALSE 18551
// exit ;
18549: GO 18641
// for i in units do
18551: LD_ADDR_VAR 0 4
18555: PUSH
18556: LD_VAR 0 1
18560: PUSH
18561: FOR_IN
18562: IFFALSE 18639
// if BuildingStatus ( b ) = bs_build then
18564: LD_VAR 0 2
18568: PPUSH
18569: CALL_OW 461
18573: PUSH
18574: LD_INT 1
18576: EQUAL
18577: IFFALSE 18637
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18579: LD_VAR 0 4
18583: PPUSH
18584: LD_STRING h
18586: PUSH
18587: LD_VAR 0 2
18591: PPUSH
18592: CALL_OW 250
18596: PUSH
18597: LD_VAR 0 2
18601: PPUSH
18602: CALL_OW 251
18606: PUSH
18607: LD_VAR 0 2
18611: PUSH
18612: LD_INT 0
18614: PUSH
18615: LD_INT 0
18617: PUSH
18618: LD_INT 0
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: PUSH
18630: EMPTY
18631: LIST
18632: PPUSH
18633: CALL_OW 446
18637: GO 18561
18639: POP
18640: POP
// end ;
18641: LD_VAR 0 3
18645: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18646: LD_INT 0
18648: PPUSH
18649: PPUSH
18650: PPUSH
18651: PPUSH
18652: PPUSH
18653: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18654: LD_VAR 0 1
18658: NOT
18659: IFTRUE 18676
18661: PUSH
18662: LD_VAR 0 1
18666: PPUSH
18667: CALL_OW 263
18671: PUSH
18672: LD_INT 2
18674: NONEQUAL
18675: OR
18676: IFFALSE 18680
// exit ;
18678: GO 18996
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18680: LD_ADDR_VAR 0 6
18684: PUSH
18685: LD_INT 22
18687: PUSH
18688: LD_VAR 0 1
18692: PPUSH
18693: CALL_OW 255
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 2
18704: PUSH
18705: LD_INT 30
18707: PUSH
18708: LD_INT 36
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 34
18717: PUSH
18718: LD_INT 31
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: LIST
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PPUSH
18734: CALL_OW 69
18738: ST_TO_ADDR
// if not tmp then
18739: LD_VAR 0 6
18743: NOT
18744: IFFALSE 18748
// exit ;
18746: GO 18996
// result := [ ] ;
18748: LD_ADDR_VAR 0 2
18752: PUSH
18753: EMPTY
18754: ST_TO_ADDR
// for i in tmp do
18755: LD_ADDR_VAR 0 3
18759: PUSH
18760: LD_VAR 0 6
18764: PUSH
18765: FOR_IN
18766: IFFALSE 18837
// begin t := UnitsInside ( i ) ;
18768: LD_ADDR_VAR 0 4
18772: PUSH
18773: LD_VAR 0 3
18777: PPUSH
18778: CALL_OW 313
18782: ST_TO_ADDR
// if t then
18783: LD_VAR 0 4
18787: IFFALSE 18835
// for j in t do
18789: LD_ADDR_VAR 0 7
18793: PUSH
18794: LD_VAR 0 4
18798: PUSH
18799: FOR_IN
18800: IFFALSE 18833
// result := Replace ( result , result + 1 , j ) ;
18802: LD_ADDR_VAR 0 2
18806: PUSH
18807: LD_VAR 0 2
18811: PPUSH
18812: LD_VAR 0 2
18816: PUSH
18817: LD_INT 1
18819: PLUS
18820: PPUSH
18821: LD_VAR 0 7
18825: PPUSH
18826: CALL_OW 1
18830: ST_TO_ADDR
18831: GO 18799
18833: POP
18834: POP
// end ;
18835: GO 18765
18837: POP
18838: POP
// if not result then
18839: LD_VAR 0 2
18843: NOT
18844: IFFALSE 18848
// exit ;
18846: GO 18996
// mech := result [ 1 ] ;
18848: LD_ADDR_VAR 0 5
18852: PUSH
18853: LD_VAR 0 2
18857: PUSH
18858: LD_INT 1
18860: ARRAY
18861: ST_TO_ADDR
// if result > 1 then
18862: LD_VAR 0 2
18866: PUSH
18867: LD_INT 1
18869: GREATER
18870: IFFALSE 18982
// begin for i = 2 to result do
18872: LD_ADDR_VAR 0 3
18876: PUSH
18877: DOUBLE
18878: LD_INT 2
18880: DEC
18881: ST_TO_ADDR
18882: LD_VAR 0 2
18886: PUSH
18887: FOR_TO
18888: IFFALSE 18980
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18890: LD_ADDR_VAR 0 4
18894: PUSH
18895: LD_VAR 0 2
18899: PUSH
18900: LD_VAR 0 3
18904: ARRAY
18905: PPUSH
18906: LD_INT 3
18908: PPUSH
18909: CALL_OW 259
18913: PUSH
18914: LD_VAR 0 2
18918: PUSH
18919: LD_VAR 0 3
18923: ARRAY
18924: PPUSH
18925: CALL_OW 432
18929: MINUS
18930: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18931: LD_VAR 0 4
18935: PUSH
18936: LD_VAR 0 5
18940: PPUSH
18941: LD_INT 3
18943: PPUSH
18944: CALL_OW 259
18948: PUSH
18949: LD_VAR 0 5
18953: PPUSH
18954: CALL_OW 432
18958: MINUS
18959: GREATEREQUAL
18960: IFFALSE 18978
// mech := result [ i ] ;
18962: LD_ADDR_VAR 0 5
18966: PUSH
18967: LD_VAR 0 2
18971: PUSH
18972: LD_VAR 0 3
18976: ARRAY
18977: ST_TO_ADDR
// end ;
18978: GO 18887
18980: POP
18981: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18982: LD_VAR 0 1
18986: PPUSH
18987: LD_VAR 0 5
18991: PPUSH
18992: CALL_OW 135
// end ;
18996: LD_VAR 0 2
19000: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19001: LD_INT 0
19003: PPUSH
19004: PPUSH
19005: PPUSH
19006: PPUSH
19007: PPUSH
19008: PPUSH
19009: PPUSH
19010: PPUSH
19011: PPUSH
19012: PPUSH
19013: PPUSH
19014: PPUSH
19015: PPUSH
// result := [ ] ;
19016: LD_ADDR_VAR 0 7
19020: PUSH
19021: EMPTY
19022: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19023: LD_VAR 0 1
19027: PPUSH
19028: CALL_OW 266
19032: PUSH
19033: LD_INT 0
19035: PUSH
19036: LD_INT 1
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: IN
19043: NOT
19044: IFFALSE 19048
// exit ;
19046: GO 20688
// if name then
19048: LD_VAR 0 3
19052: IFFALSE 19068
// SetBName ( base_dep , name ) ;
19054: LD_VAR 0 1
19058: PPUSH
19059: LD_VAR 0 3
19063: PPUSH
19064: CALL_OW 500
// base := GetBase ( base_dep ) ;
19068: LD_ADDR_VAR 0 15
19072: PUSH
19073: LD_VAR 0 1
19077: PPUSH
19078: CALL_OW 274
19082: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19083: LD_ADDR_VAR 0 16
19087: PUSH
19088: LD_VAR 0 1
19092: PPUSH
19093: CALL_OW 255
19097: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19098: LD_ADDR_VAR 0 17
19102: PUSH
19103: LD_VAR 0 1
19107: PPUSH
19108: CALL_OW 248
19112: ST_TO_ADDR
// if sources then
19113: LD_VAR 0 5
19117: IFFALSE 19164
// for i = 1 to 3 do
19119: LD_ADDR_VAR 0 8
19123: PUSH
19124: DOUBLE
19125: LD_INT 1
19127: DEC
19128: ST_TO_ADDR
19129: LD_INT 3
19131: PUSH
19132: FOR_TO
19133: IFFALSE 19162
// AddResourceType ( base , i , sources [ i ] ) ;
19135: LD_VAR 0 15
19139: PPUSH
19140: LD_VAR 0 8
19144: PPUSH
19145: LD_VAR 0 5
19149: PUSH
19150: LD_VAR 0 8
19154: ARRAY
19155: PPUSH
19156: CALL_OW 276
19160: GO 19132
19162: POP
19163: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19164: LD_ADDR_VAR 0 18
19168: PUSH
19169: LD_VAR 0 15
19173: PPUSH
19174: LD_VAR 0 2
19178: PPUSH
19179: LD_INT 1
19181: PPUSH
19182: CALL 18423 0 3
19186: ST_TO_ADDR
// InitHc ;
19187: CALL_OW 19
// InitUc ;
19191: CALL_OW 18
// uc_side := side ;
19195: LD_ADDR_OWVAR 20
19199: PUSH
19200: LD_VAR 0 16
19204: ST_TO_ADDR
// uc_nation := nation ;
19205: LD_ADDR_OWVAR 21
19209: PUSH
19210: LD_VAR 0 17
19214: ST_TO_ADDR
// if buildings then
19215: LD_VAR 0 18
19219: IFFALSE 20547
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19221: LD_ADDR_VAR 0 19
19225: PUSH
19226: LD_VAR 0 18
19230: PPUSH
19231: LD_INT 2
19233: PUSH
19234: LD_INT 30
19236: PUSH
19237: LD_INT 29
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 30
19246: PUSH
19247: LD_INT 30
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: LIST
19258: PPUSH
19259: CALL_OW 72
19263: ST_TO_ADDR
// if tmp then
19264: LD_VAR 0 19
19268: IFFALSE 19316
// for i in tmp do
19270: LD_ADDR_VAR 0 8
19274: PUSH
19275: LD_VAR 0 19
19279: PUSH
19280: FOR_IN
19281: IFFALSE 19314
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19283: LD_VAR 0 8
19287: PPUSH
19288: CALL_OW 250
19292: PPUSH
19293: LD_VAR 0 8
19297: PPUSH
19298: CALL_OW 251
19302: PPUSH
19303: LD_VAR 0 16
19307: PPUSH
19308: CALL_OW 441
19312: GO 19280
19314: POP
19315: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19316: LD_VAR 0 18
19320: PPUSH
19321: LD_INT 2
19323: PUSH
19324: LD_INT 30
19326: PUSH
19327: LD_INT 32
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 30
19336: PUSH
19337: LD_INT 33
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: LIST
19348: PPUSH
19349: CALL_OW 72
19353: IFFALSE 19441
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19355: LD_ADDR_VAR 0 8
19359: PUSH
19360: LD_VAR 0 18
19364: PPUSH
19365: LD_INT 2
19367: PUSH
19368: LD_INT 30
19370: PUSH
19371: LD_INT 32
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 30
19380: PUSH
19381: LD_INT 33
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: LIST
19392: PPUSH
19393: CALL_OW 72
19397: PUSH
19398: FOR_IN
19399: IFFALSE 19439
// begin if not GetBWeapon ( i ) then
19401: LD_VAR 0 8
19405: PPUSH
19406: CALL_OW 269
19410: NOT
19411: IFFALSE 19437
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19413: LD_VAR 0 8
19417: PPUSH
19418: LD_VAR 0 8
19422: PPUSH
19423: LD_VAR 0 2
19427: PPUSH
19428: CALL 20693 0 2
19432: PPUSH
19433: CALL_OW 431
// end ;
19437: GO 19398
19439: POP
19440: POP
// end ; for i = 1 to personel do
19441: LD_ADDR_VAR 0 8
19445: PUSH
19446: DOUBLE
19447: LD_INT 1
19449: DEC
19450: ST_TO_ADDR
19451: LD_VAR 0 6
19455: PUSH
19456: FOR_TO
19457: IFFALSE 20527
// begin if i > 4 then
19459: LD_VAR 0 8
19463: PUSH
19464: LD_INT 4
19466: GREATER
19467: IFFALSE 19471
// break ;
19469: GO 20527
// case i of 1 :
19471: LD_VAR 0 8
19475: PUSH
19476: LD_INT 1
19478: DOUBLE
19479: EQUAL
19480: IFTRUE 19484
19482: GO 19564
19484: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19485: LD_ADDR_VAR 0 12
19489: PUSH
19490: LD_VAR 0 18
19494: PPUSH
19495: LD_INT 22
19497: PUSH
19498: LD_VAR 0 16
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 58
19509: PUSH
19510: EMPTY
19511: LIST
19512: PUSH
19513: LD_INT 2
19515: PUSH
19516: LD_INT 30
19518: PUSH
19519: LD_INT 32
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 30
19528: PUSH
19529: LD_INT 4
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 30
19538: PUSH
19539: LD_INT 5
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: PPUSH
19557: CALL_OW 72
19561: ST_TO_ADDR
19562: GO 19786
19564: LD_INT 2
19566: DOUBLE
19567: EQUAL
19568: IFTRUE 19572
19570: GO 19634
19572: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19573: LD_ADDR_VAR 0 12
19577: PUSH
19578: LD_VAR 0 18
19582: PPUSH
19583: LD_INT 22
19585: PUSH
19586: LD_VAR 0 16
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 2
19597: PUSH
19598: LD_INT 30
19600: PUSH
19601: LD_INT 0
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 30
19610: PUSH
19611: LD_INT 1
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: LIST
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PPUSH
19627: CALL_OW 72
19631: ST_TO_ADDR
19632: GO 19786
19634: LD_INT 3
19636: DOUBLE
19637: EQUAL
19638: IFTRUE 19642
19640: GO 19704
19642: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19643: LD_ADDR_VAR 0 12
19647: PUSH
19648: LD_VAR 0 18
19652: PPUSH
19653: LD_INT 22
19655: PUSH
19656: LD_VAR 0 16
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 2
19667: PUSH
19668: LD_INT 30
19670: PUSH
19671: LD_INT 2
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 30
19680: PUSH
19681: LD_INT 3
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: LIST
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PPUSH
19697: CALL_OW 72
19701: ST_TO_ADDR
19702: GO 19786
19704: LD_INT 4
19706: DOUBLE
19707: EQUAL
19708: IFTRUE 19712
19710: GO 19785
19712: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19713: LD_ADDR_VAR 0 12
19717: PUSH
19718: LD_VAR 0 18
19722: PPUSH
19723: LD_INT 22
19725: PUSH
19726: LD_VAR 0 16
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 2
19737: PUSH
19738: LD_INT 30
19740: PUSH
19741: LD_INT 6
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 30
19750: PUSH
19751: LD_INT 7
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 30
19760: PUSH
19761: LD_INT 8
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PPUSH
19778: CALL_OW 72
19782: ST_TO_ADDR
19783: GO 19786
19785: POP
// if i = 1 then
19786: LD_VAR 0 8
19790: PUSH
19791: LD_INT 1
19793: EQUAL
19794: IFFALSE 19905
// begin tmp := [ ] ;
19796: LD_ADDR_VAR 0 19
19800: PUSH
19801: EMPTY
19802: ST_TO_ADDR
// for j in f do
19803: LD_ADDR_VAR 0 9
19807: PUSH
19808: LD_VAR 0 12
19812: PUSH
19813: FOR_IN
19814: IFFALSE 19887
// if GetBType ( j ) = b_bunker then
19816: LD_VAR 0 9
19820: PPUSH
19821: CALL_OW 266
19825: PUSH
19826: LD_INT 32
19828: EQUAL
19829: IFFALSE 19856
// tmp := Insert ( tmp , 1 , j ) else
19831: LD_ADDR_VAR 0 19
19835: PUSH
19836: LD_VAR 0 19
19840: PPUSH
19841: LD_INT 1
19843: PPUSH
19844: LD_VAR 0 9
19848: PPUSH
19849: CALL_OW 2
19853: ST_TO_ADDR
19854: GO 19885
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19856: LD_ADDR_VAR 0 19
19860: PUSH
19861: LD_VAR 0 19
19865: PPUSH
19866: LD_VAR 0 19
19870: PUSH
19871: LD_INT 1
19873: PLUS
19874: PPUSH
19875: LD_VAR 0 9
19879: PPUSH
19880: CALL_OW 2
19884: ST_TO_ADDR
19885: GO 19813
19887: POP
19888: POP
// if tmp then
19889: LD_VAR 0 19
19893: IFFALSE 19905
// f := tmp ;
19895: LD_ADDR_VAR 0 12
19899: PUSH
19900: LD_VAR 0 19
19904: ST_TO_ADDR
// end ; x := personel [ i ] ;
19905: LD_ADDR_VAR 0 13
19909: PUSH
19910: LD_VAR 0 6
19914: PUSH
19915: LD_VAR 0 8
19919: ARRAY
19920: ST_TO_ADDR
// if x = - 1 then
19921: LD_VAR 0 13
19925: PUSH
19926: LD_INT 1
19928: NEG
19929: EQUAL
19930: IFFALSE 20141
// begin for j in f do
19932: LD_ADDR_VAR 0 9
19936: PUSH
19937: LD_VAR 0 12
19941: PUSH
19942: FOR_IN
19943: IFFALSE 20137
// repeat InitHc ;
19945: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19949: LD_VAR 0 9
19953: PPUSH
19954: CALL_OW 266
19958: PUSH
19959: LD_INT 5
19961: EQUAL
19962: IFFALSE 20032
// begin if UnitsInside ( j ) < 3 then
19964: LD_VAR 0 9
19968: PPUSH
19969: CALL_OW 313
19973: PUSH
19974: LD_INT 3
19976: LESS
19977: IFFALSE 20013
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19979: LD_INT 0
19981: PPUSH
19982: LD_INT 5
19984: PUSH
19985: LD_INT 8
19987: PUSH
19988: LD_INT 9
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: LIST
19995: PUSH
19996: LD_VAR 0 17
20000: ARRAY
20001: PPUSH
20002: LD_VAR 0 4
20006: PPUSH
20007: CALL_OW 380
20011: GO 20030
// PrepareHuman ( false , i , skill ) ;
20013: LD_INT 0
20015: PPUSH
20016: LD_VAR 0 8
20020: PPUSH
20021: LD_VAR 0 4
20025: PPUSH
20026: CALL_OW 380
// end else
20030: GO 20049
// PrepareHuman ( false , i , skill ) ;
20032: LD_INT 0
20034: PPUSH
20035: LD_VAR 0 8
20039: PPUSH
20040: LD_VAR 0 4
20044: PPUSH
20045: CALL_OW 380
// un := CreateHuman ;
20049: LD_ADDR_VAR 0 14
20053: PUSH
20054: CALL_OW 44
20058: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20059: LD_ADDR_VAR 0 7
20063: PUSH
20064: LD_VAR 0 7
20068: PPUSH
20069: LD_INT 1
20071: PPUSH
20072: LD_VAR 0 14
20076: PPUSH
20077: CALL_OW 2
20081: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20082: LD_VAR 0 14
20086: PPUSH
20087: LD_VAR 0 9
20091: PPUSH
20092: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20096: LD_VAR 0 9
20100: PPUSH
20101: CALL_OW 313
20105: PUSH
20106: LD_INT 6
20108: EQUAL
20109: IFTRUE 20133
20111: PUSH
20112: LD_VAR 0 9
20116: PPUSH
20117: CALL_OW 266
20121: PUSH
20122: LD_INT 32
20124: PUSH
20125: LD_INT 31
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: IN
20132: OR
20133: IFFALSE 19945
20135: GO 19942
20137: POP
20138: POP
// end else
20139: GO 20525
// for j = 1 to x do
20141: LD_ADDR_VAR 0 9
20145: PUSH
20146: DOUBLE
20147: LD_INT 1
20149: DEC
20150: ST_TO_ADDR
20151: LD_VAR 0 13
20155: PUSH
20156: FOR_TO
20157: IFFALSE 20523
// begin InitHc ;
20159: CALL_OW 19
// if not f then
20163: LD_VAR 0 12
20167: NOT
20168: IFFALSE 20257
// begin PrepareHuman ( false , i , skill ) ;
20170: LD_INT 0
20172: PPUSH
20173: LD_VAR 0 8
20177: PPUSH
20178: LD_VAR 0 4
20182: PPUSH
20183: CALL_OW 380
// un := CreateHuman ;
20187: LD_ADDR_VAR 0 14
20191: PUSH
20192: CALL_OW 44
20196: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20197: LD_ADDR_VAR 0 7
20201: PUSH
20202: LD_VAR 0 7
20206: PPUSH
20207: LD_INT 1
20209: PPUSH
20210: LD_VAR 0 14
20214: PPUSH
20215: CALL_OW 2
20219: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20220: LD_VAR 0 14
20224: PPUSH
20225: LD_VAR 0 1
20229: PPUSH
20230: CALL_OW 250
20234: PPUSH
20235: LD_VAR 0 1
20239: PPUSH
20240: CALL_OW 251
20244: PPUSH
20245: LD_INT 10
20247: PPUSH
20248: LD_INT 0
20250: PPUSH
20251: CALL_OW 50
// continue ;
20255: GO 20156
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20257: LD_VAR 0 12
20261: PUSH
20262: LD_INT 1
20264: ARRAY
20265: PPUSH
20266: CALL_OW 313
20270: IFFALSE 20298
20272: PUSH
20273: LD_VAR 0 12
20277: PUSH
20278: LD_INT 1
20280: ARRAY
20281: PPUSH
20282: CALL_OW 266
20286: PUSH
20287: LD_INT 32
20289: PUSH
20290: LD_INT 31
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: IN
20297: AND
20298: IFTRUE 20319
20300: PUSH
20301: LD_VAR 0 12
20305: PUSH
20306: LD_INT 1
20308: ARRAY
20309: PPUSH
20310: CALL_OW 313
20314: PUSH
20315: LD_INT 6
20317: EQUAL
20318: OR
20319: IFFALSE 20339
// f := Delete ( f , 1 ) ;
20321: LD_ADDR_VAR 0 12
20325: PUSH
20326: LD_VAR 0 12
20330: PPUSH
20331: LD_INT 1
20333: PPUSH
20334: CALL_OW 3
20338: ST_TO_ADDR
// if not f then
20339: LD_VAR 0 12
20343: NOT
20344: IFFALSE 20362
// begin x := x + 2 ;
20346: LD_ADDR_VAR 0 13
20350: PUSH
20351: LD_VAR 0 13
20355: PUSH
20356: LD_INT 2
20358: PLUS
20359: ST_TO_ADDR
// continue ;
20360: GO 20156
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20362: LD_VAR 0 12
20366: PUSH
20367: LD_INT 1
20369: ARRAY
20370: PPUSH
20371: CALL_OW 266
20375: PUSH
20376: LD_INT 5
20378: EQUAL
20379: IFFALSE 20453
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20381: LD_VAR 0 12
20385: PUSH
20386: LD_INT 1
20388: ARRAY
20389: PPUSH
20390: CALL_OW 313
20394: PUSH
20395: LD_INT 3
20397: LESS
20398: IFFALSE 20434
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20400: LD_INT 0
20402: PPUSH
20403: LD_INT 5
20405: PUSH
20406: LD_INT 8
20408: PUSH
20409: LD_INT 9
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: LIST
20416: PUSH
20417: LD_VAR 0 17
20421: ARRAY
20422: PPUSH
20423: LD_VAR 0 4
20427: PPUSH
20428: CALL_OW 380
20432: GO 20451
// PrepareHuman ( false , i , skill ) ;
20434: LD_INT 0
20436: PPUSH
20437: LD_VAR 0 8
20441: PPUSH
20442: LD_VAR 0 4
20446: PPUSH
20447: CALL_OW 380
// end else
20451: GO 20470
// PrepareHuman ( false , i , skill ) ;
20453: LD_INT 0
20455: PPUSH
20456: LD_VAR 0 8
20460: PPUSH
20461: LD_VAR 0 4
20465: PPUSH
20466: CALL_OW 380
// un := CreateHuman ;
20470: LD_ADDR_VAR 0 14
20474: PUSH
20475: CALL_OW 44
20479: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20480: LD_ADDR_VAR 0 7
20484: PUSH
20485: LD_VAR 0 7
20489: PPUSH
20490: LD_INT 1
20492: PPUSH
20493: LD_VAR 0 14
20497: PPUSH
20498: CALL_OW 2
20502: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20503: LD_VAR 0 14
20507: PPUSH
20508: LD_VAR 0 12
20512: PUSH
20513: LD_INT 1
20515: ARRAY
20516: PPUSH
20517: CALL_OW 52
// end ;
20521: GO 20156
20523: POP
20524: POP
// end ;
20525: GO 19456
20527: POP
20528: POP
// result := result ^ buildings ;
20529: LD_ADDR_VAR 0 7
20533: PUSH
20534: LD_VAR 0 7
20538: PUSH
20539: LD_VAR 0 18
20543: ADD
20544: ST_TO_ADDR
// end else
20545: GO 20688
// begin for i = 1 to personel do
20547: LD_ADDR_VAR 0 8
20551: PUSH
20552: DOUBLE
20553: LD_INT 1
20555: DEC
20556: ST_TO_ADDR
20557: LD_VAR 0 6
20561: PUSH
20562: FOR_TO
20563: IFFALSE 20686
// begin if i > 4 then
20565: LD_VAR 0 8
20569: PUSH
20570: LD_INT 4
20572: GREATER
20573: IFFALSE 20577
// break ;
20575: GO 20686
// x := personel [ i ] ;
20577: LD_ADDR_VAR 0 13
20581: PUSH
20582: LD_VAR 0 6
20586: PUSH
20587: LD_VAR 0 8
20591: ARRAY
20592: ST_TO_ADDR
// if x = - 1 then
20593: LD_VAR 0 13
20597: PUSH
20598: LD_INT 1
20600: NEG
20601: EQUAL
20602: IFFALSE 20606
// continue ;
20604: GO 20562
// PrepareHuman ( false , i , skill ) ;
20606: LD_INT 0
20608: PPUSH
20609: LD_VAR 0 8
20613: PPUSH
20614: LD_VAR 0 4
20618: PPUSH
20619: CALL_OW 380
// un := CreateHuman ;
20623: LD_ADDR_VAR 0 14
20627: PUSH
20628: CALL_OW 44
20632: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20633: LD_VAR 0 14
20637: PPUSH
20638: LD_VAR 0 1
20642: PPUSH
20643: CALL_OW 250
20647: PPUSH
20648: LD_VAR 0 1
20652: PPUSH
20653: CALL_OW 251
20657: PPUSH
20658: LD_INT 10
20660: PPUSH
20661: LD_INT 0
20663: PPUSH
20664: CALL_OW 50
// result := result ^ un ;
20668: LD_ADDR_VAR 0 7
20672: PUSH
20673: LD_VAR 0 7
20677: PUSH
20678: LD_VAR 0 14
20682: ADD
20683: ST_TO_ADDR
// end ;
20684: GO 20562
20686: POP
20687: POP
// end ; end ;
20688: LD_VAR 0 7
20692: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20693: LD_INT 0
20695: PPUSH
20696: PPUSH
20697: PPUSH
20698: PPUSH
20699: PPUSH
20700: PPUSH
20701: PPUSH
20702: PPUSH
20703: PPUSH
20704: PPUSH
20705: PPUSH
20706: PPUSH
20707: PPUSH
20708: PPUSH
20709: PPUSH
20710: PPUSH
// result := false ;
20711: LD_ADDR_VAR 0 3
20715: PUSH
20716: LD_INT 0
20718: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20719: LD_VAR 0 1
20723: NOT
20724: IFTRUE 20749
20726: PUSH
20727: LD_VAR 0 1
20731: PPUSH
20732: CALL_OW 266
20736: PUSH
20737: LD_INT 32
20739: PUSH
20740: LD_INT 33
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: IN
20747: NOT
20748: OR
20749: IFFALSE 20753
// exit ;
20751: GO 21888
// nat := GetNation ( tower ) ;
20753: LD_ADDR_VAR 0 12
20757: PUSH
20758: LD_VAR 0 1
20762: PPUSH
20763: CALL_OW 248
20767: ST_TO_ADDR
// side := GetSide ( tower ) ;
20768: LD_ADDR_VAR 0 16
20772: PUSH
20773: LD_VAR 0 1
20777: PPUSH
20778: CALL_OW 255
20782: ST_TO_ADDR
// x := GetX ( tower ) ;
20783: LD_ADDR_VAR 0 10
20787: PUSH
20788: LD_VAR 0 1
20792: PPUSH
20793: CALL_OW 250
20797: ST_TO_ADDR
// y := GetY ( tower ) ;
20798: LD_ADDR_VAR 0 11
20802: PUSH
20803: LD_VAR 0 1
20807: PPUSH
20808: CALL_OW 251
20812: ST_TO_ADDR
// if not x or not y then
20813: LD_VAR 0 10
20817: NOT
20818: IFTRUE 20827
20820: PUSH
20821: LD_VAR 0 11
20825: NOT
20826: OR
20827: IFFALSE 20831
// exit ;
20829: GO 21888
// weapon := 0 ;
20831: LD_ADDR_VAR 0 18
20835: PUSH
20836: LD_INT 0
20838: ST_TO_ADDR
// fac_list := [ ] ;
20839: LD_ADDR_VAR 0 17
20843: PUSH
20844: EMPTY
20845: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20846: LD_ADDR_VAR 0 6
20850: PUSH
20851: LD_VAR 0 1
20855: PPUSH
20856: CALL_OW 274
20860: PPUSH
20861: LD_VAR 0 2
20865: PPUSH
20866: LD_INT 0
20868: PPUSH
20869: CALL 18423 0 3
20873: PPUSH
20874: LD_INT 30
20876: PUSH
20877: LD_INT 3
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PPUSH
20884: CALL_OW 72
20888: ST_TO_ADDR
// if not factories then
20889: LD_VAR 0 6
20893: NOT
20894: IFFALSE 20898
// exit ;
20896: GO 21888
// for i in factories do
20898: LD_ADDR_VAR 0 8
20902: PUSH
20903: LD_VAR 0 6
20907: PUSH
20908: FOR_IN
20909: IFFALSE 20934
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20911: LD_ADDR_VAR 0 17
20915: PUSH
20916: LD_VAR 0 17
20920: PUSH
20921: LD_VAR 0 8
20925: PPUSH
20926: CALL_OW 478
20930: UNION
20931: ST_TO_ADDR
20932: GO 20908
20934: POP
20935: POP
// if not fac_list then
20936: LD_VAR 0 17
20940: NOT
20941: IFFALSE 20945
// exit ;
20943: GO 21888
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20945: LD_ADDR_VAR 0 5
20949: PUSH
20950: LD_INT 4
20952: PUSH
20953: LD_INT 5
20955: PUSH
20956: LD_INT 9
20958: PUSH
20959: LD_INT 10
20961: PUSH
20962: LD_INT 6
20964: PUSH
20965: LD_INT 7
20967: PUSH
20968: LD_INT 11
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 27
20982: PUSH
20983: LD_INT 28
20985: PUSH
20986: LD_INT 26
20988: PUSH
20989: LD_INT 30
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 43
21000: PUSH
21001: LD_INT 44
21003: PUSH
21004: LD_INT 46
21006: PUSH
21007: LD_INT 45
21009: PUSH
21010: LD_INT 47
21012: PUSH
21013: LD_INT 49
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: LIST
21028: PUSH
21029: LD_VAR 0 12
21033: ARRAY
21034: ST_TO_ADDR
// list := list isect fac_list ;
21035: LD_ADDR_VAR 0 5
21039: PUSH
21040: LD_VAR 0 5
21044: PUSH
21045: LD_VAR 0 17
21049: ISECT
21050: ST_TO_ADDR
// if not list then
21051: LD_VAR 0 5
21055: NOT
21056: IFFALSE 21060
// exit ;
21058: GO 21888
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21060: LD_VAR 0 12
21064: PUSH
21065: LD_INT 3
21067: EQUAL
21068: IFFALSE 21080
21070: PUSH
21071: LD_INT 49
21073: PUSH
21074: LD_VAR 0 5
21078: IN
21079: AND
21080: IFFALSE 21100
21082: PUSH
21083: LD_INT 31
21085: PPUSH
21086: LD_VAR 0 16
21090: PPUSH
21091: CALL_OW 321
21095: PUSH
21096: LD_INT 2
21098: EQUAL
21099: AND
21100: IFFALSE 21160
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21102: LD_INT 22
21104: PUSH
21105: LD_VAR 0 16
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 35
21116: PUSH
21117: LD_INT 49
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 91
21126: PUSH
21127: LD_VAR 0 1
21131: PUSH
21132: LD_INT 10
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: LIST
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: LIST
21144: PPUSH
21145: CALL_OW 69
21149: NOT
21150: IFFALSE 21160
// weapon := ru_time_lapser ;
21152: LD_ADDR_VAR 0 18
21156: PUSH
21157: LD_INT 49
21159: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21160: LD_VAR 0 12
21164: PUSH
21165: LD_INT 1
21167: PUSH
21168: LD_INT 2
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: IN
21175: IFFALSE 21199
21177: PUSH
21178: LD_INT 11
21180: PUSH
21181: LD_VAR 0 5
21185: IN
21186: IFTRUE 21198
21188: PUSH
21189: LD_INT 30
21191: PUSH
21192: LD_VAR 0 5
21196: IN
21197: OR
21198: AND
21199: IFFALSE 21219
21201: PUSH
21202: LD_INT 6
21204: PPUSH
21205: LD_VAR 0 16
21209: PPUSH
21210: CALL_OW 321
21214: PUSH
21215: LD_INT 2
21217: EQUAL
21218: AND
21219: IFFALSE 21386
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21221: LD_INT 22
21223: PUSH
21224: LD_VAR 0 16
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: LD_INT 35
21238: PUSH
21239: LD_INT 11
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 35
21248: PUSH
21249: LD_INT 30
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 91
21263: PUSH
21264: LD_VAR 0 1
21268: PUSH
21269: LD_INT 18
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: LIST
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: LIST
21281: PPUSH
21282: CALL_OW 69
21286: NOT
21287: IFFALSE 21363
21289: PUSH
21290: LD_INT 22
21292: PUSH
21293: LD_VAR 0 16
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 2
21304: PUSH
21305: LD_INT 30
21307: PUSH
21308: LD_INT 32
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 30
21317: PUSH
21318: LD_INT 33
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 91
21332: PUSH
21333: LD_VAR 0 1
21337: PUSH
21338: LD_INT 12
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: LIST
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: LIST
21350: PUSH
21351: EMPTY
21352: LIST
21353: PPUSH
21354: CALL_OW 69
21358: PUSH
21359: LD_INT 2
21361: GREATER
21362: AND
21363: IFFALSE 21386
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21365: LD_ADDR_VAR 0 18
21369: PUSH
21370: LD_INT 11
21372: PUSH
21373: LD_INT 30
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_VAR 0 12
21384: ARRAY
21385: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21386: LD_VAR 0 18
21390: NOT
21391: IFFALSE 21411
21393: PUSH
21394: LD_INT 40
21396: PPUSH
21397: LD_VAR 0 16
21401: PPUSH
21402: CALL_OW 321
21406: PUSH
21407: LD_INT 2
21409: EQUAL
21410: AND
21411: IFFALSE 21447
21413: PUSH
21414: LD_INT 7
21416: PUSH
21417: LD_VAR 0 5
21421: IN
21422: IFTRUE 21434
21424: PUSH
21425: LD_INT 28
21427: PUSH
21428: LD_VAR 0 5
21432: IN
21433: OR
21434: IFTRUE 21446
21436: PUSH
21437: LD_INT 45
21439: PUSH
21440: LD_VAR 0 5
21444: IN
21445: OR
21446: AND
21447: IFFALSE 21701
// begin hex := GetHexInfo ( x , y ) ;
21449: LD_ADDR_VAR 0 4
21453: PUSH
21454: LD_VAR 0 10
21458: PPUSH
21459: LD_VAR 0 11
21463: PPUSH
21464: CALL_OW 546
21468: ST_TO_ADDR
// if hex [ 1 ] then
21469: LD_VAR 0 4
21473: PUSH
21474: LD_INT 1
21476: ARRAY
21477: IFFALSE 21481
// exit ;
21479: GO 21888
// height := hex [ 2 ] ;
21481: LD_ADDR_VAR 0 15
21485: PUSH
21486: LD_VAR 0 4
21490: PUSH
21491: LD_INT 2
21493: ARRAY
21494: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21495: LD_ADDR_VAR 0 14
21499: PUSH
21500: LD_INT 0
21502: PUSH
21503: LD_INT 2
21505: PUSH
21506: LD_INT 3
21508: PUSH
21509: LD_INT 5
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: ST_TO_ADDR
// for i in tmp do
21518: LD_ADDR_VAR 0 8
21522: PUSH
21523: LD_VAR 0 14
21527: PUSH
21528: FOR_IN
21529: IFFALSE 21699
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21531: LD_ADDR_VAR 0 9
21535: PUSH
21536: LD_VAR 0 10
21540: PPUSH
21541: LD_VAR 0 8
21545: PPUSH
21546: LD_INT 5
21548: PPUSH
21549: CALL_OW 272
21553: PUSH
21554: LD_VAR 0 11
21558: PPUSH
21559: LD_VAR 0 8
21563: PPUSH
21564: LD_INT 5
21566: PPUSH
21567: CALL_OW 273
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21576: LD_VAR 0 9
21580: PUSH
21581: LD_INT 1
21583: ARRAY
21584: PPUSH
21585: LD_VAR 0 9
21589: PUSH
21590: LD_INT 2
21592: ARRAY
21593: PPUSH
21594: CALL_OW 488
21598: IFFALSE 21697
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21600: LD_ADDR_VAR 0 4
21604: PUSH
21605: LD_VAR 0 9
21609: PUSH
21610: LD_INT 1
21612: ARRAY
21613: PPUSH
21614: LD_VAR 0 9
21618: PUSH
21619: LD_INT 2
21621: ARRAY
21622: PPUSH
21623: CALL_OW 546
21627: ST_TO_ADDR
// if hex [ 1 ] then
21628: LD_VAR 0 4
21632: PUSH
21633: LD_INT 1
21635: ARRAY
21636: IFFALSE 21640
// continue ;
21638: GO 21528
// h := hex [ 2 ] ;
21640: LD_ADDR_VAR 0 13
21644: PUSH
21645: LD_VAR 0 4
21649: PUSH
21650: LD_INT 2
21652: ARRAY
21653: ST_TO_ADDR
// if h + 7 < height then
21654: LD_VAR 0 13
21658: PUSH
21659: LD_INT 7
21661: PLUS
21662: PUSH
21663: LD_VAR 0 15
21667: LESS
21668: IFFALSE 21697
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21670: LD_ADDR_VAR 0 18
21674: PUSH
21675: LD_INT 7
21677: PUSH
21678: LD_INT 28
21680: PUSH
21681: LD_INT 45
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: LIST
21688: PUSH
21689: LD_VAR 0 12
21693: ARRAY
21694: ST_TO_ADDR
// break ;
21695: GO 21699
// end ; end ; end ;
21697: GO 21528
21699: POP
21700: POP
// end ; if not weapon then
21701: LD_VAR 0 18
21705: NOT
21706: IFFALSE 21766
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21708: LD_ADDR_VAR 0 5
21712: PUSH
21713: LD_VAR 0 5
21717: PUSH
21718: LD_INT 11
21720: PUSH
21721: LD_INT 30
21723: PUSH
21724: LD_INT 49
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: LIST
21731: DIFF
21732: ST_TO_ADDR
// if not list then
21733: LD_VAR 0 5
21737: NOT
21738: IFFALSE 21742
// exit ;
21740: GO 21888
// weapon := list [ rand ( 1 , list ) ] ;
21742: LD_ADDR_VAR 0 18
21746: PUSH
21747: LD_VAR 0 5
21751: PUSH
21752: LD_INT 1
21754: PPUSH
21755: LD_VAR 0 5
21759: PPUSH
21760: CALL_OW 12
21764: ARRAY
21765: ST_TO_ADDR
// end ; if weapon then
21766: LD_VAR 0 18
21770: IFFALSE 21888
// begin tmp := CostOfWeapon ( weapon ) ;
21772: LD_ADDR_VAR 0 14
21776: PUSH
21777: LD_VAR 0 18
21781: PPUSH
21782: CALL_OW 451
21786: ST_TO_ADDR
// j := GetBase ( tower ) ;
21787: LD_ADDR_VAR 0 9
21791: PUSH
21792: LD_VAR 0 1
21796: PPUSH
21797: CALL_OW 274
21801: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21802: LD_VAR 0 9
21806: PPUSH
21807: LD_INT 1
21809: PPUSH
21810: CALL_OW 275
21814: PUSH
21815: LD_VAR 0 14
21819: PUSH
21820: LD_INT 1
21822: ARRAY
21823: GREATEREQUAL
21824: IFFALSE 21850
21826: PUSH
21827: LD_VAR 0 9
21831: PPUSH
21832: LD_INT 2
21834: PPUSH
21835: CALL_OW 275
21839: PUSH
21840: LD_VAR 0 14
21844: PUSH
21845: LD_INT 2
21847: ARRAY
21848: GREATEREQUAL
21849: AND
21850: IFFALSE 21876
21852: PUSH
21853: LD_VAR 0 9
21857: PPUSH
21858: LD_INT 3
21860: PPUSH
21861: CALL_OW 275
21865: PUSH
21866: LD_VAR 0 14
21870: PUSH
21871: LD_INT 3
21873: ARRAY
21874: GREATEREQUAL
21875: AND
21876: IFFALSE 21888
// result := weapon ;
21878: LD_ADDR_VAR 0 3
21882: PUSH
21883: LD_VAR 0 18
21887: ST_TO_ADDR
// end ; end ;
21888: LD_VAR 0 3
21892: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21893: LD_INT 0
21895: PPUSH
21896: PPUSH
// result := true ;
21897: LD_ADDR_VAR 0 3
21901: PUSH
21902: LD_INT 1
21904: ST_TO_ADDR
// if array1 = array2 then
21905: LD_VAR 0 1
21909: PUSH
21910: LD_VAR 0 2
21914: EQUAL
21915: IFFALSE 21975
// begin for i = 1 to array1 do
21917: LD_ADDR_VAR 0 4
21921: PUSH
21922: DOUBLE
21923: LD_INT 1
21925: DEC
21926: ST_TO_ADDR
21927: LD_VAR 0 1
21931: PUSH
21932: FOR_TO
21933: IFFALSE 21971
// if array1 [ i ] <> array2 [ i ] then
21935: LD_VAR 0 1
21939: PUSH
21940: LD_VAR 0 4
21944: ARRAY
21945: PUSH
21946: LD_VAR 0 2
21950: PUSH
21951: LD_VAR 0 4
21955: ARRAY
21956: NONEQUAL
21957: IFFALSE 21969
// begin result := false ;
21959: LD_ADDR_VAR 0 3
21963: PUSH
21964: LD_INT 0
21966: ST_TO_ADDR
// break ;
21967: GO 21971
// end ;
21969: GO 21932
21971: POP
21972: POP
// end else
21973: GO 21983
// result := false ;
21975: LD_ADDR_VAR 0 3
21979: PUSH
21980: LD_INT 0
21982: ST_TO_ADDR
// end ;
21983: LD_VAR 0 3
21987: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21988: LD_INT 0
21990: PPUSH
21991: PPUSH
// if not array1 or not array2 then
21992: LD_VAR 0 1
21996: NOT
21997: IFTRUE 22006
21999: PUSH
22000: LD_VAR 0 2
22004: NOT
22005: OR
22006: IFFALSE 22010
// exit ;
22008: GO 22074
// result := true ;
22010: LD_ADDR_VAR 0 3
22014: PUSH
22015: LD_INT 1
22017: ST_TO_ADDR
// for i = 1 to array1 do
22018: LD_ADDR_VAR 0 4
22022: PUSH
22023: DOUBLE
22024: LD_INT 1
22026: DEC
22027: ST_TO_ADDR
22028: LD_VAR 0 1
22032: PUSH
22033: FOR_TO
22034: IFFALSE 22072
// if array1 [ i ] <> array2 [ i ] then
22036: LD_VAR 0 1
22040: PUSH
22041: LD_VAR 0 4
22045: ARRAY
22046: PUSH
22047: LD_VAR 0 2
22051: PUSH
22052: LD_VAR 0 4
22056: ARRAY
22057: NONEQUAL
22058: IFFALSE 22070
// begin result := false ;
22060: LD_ADDR_VAR 0 3
22064: PUSH
22065: LD_INT 0
22067: ST_TO_ADDR
// break ;
22068: GO 22072
// end ;
22070: GO 22033
22072: POP
22073: POP
// end ;
22074: LD_VAR 0 3
22078: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22079: LD_INT 0
22081: PPUSH
22082: PPUSH
22083: PPUSH
// pom := GetBase ( fac ) ;
22084: LD_ADDR_VAR 0 5
22088: PUSH
22089: LD_VAR 0 1
22093: PPUSH
22094: CALL_OW 274
22098: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22099: LD_ADDR_VAR 0 4
22103: PUSH
22104: LD_VAR 0 2
22108: PUSH
22109: LD_INT 1
22111: ARRAY
22112: PPUSH
22113: LD_VAR 0 2
22117: PUSH
22118: LD_INT 2
22120: ARRAY
22121: PPUSH
22122: LD_VAR 0 2
22126: PUSH
22127: LD_INT 3
22129: ARRAY
22130: PPUSH
22131: LD_VAR 0 2
22135: PUSH
22136: LD_INT 4
22138: ARRAY
22139: PPUSH
22140: CALL_OW 449
22144: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22145: LD_ADDR_VAR 0 3
22149: PUSH
22150: LD_VAR 0 5
22154: PPUSH
22155: LD_INT 1
22157: PPUSH
22158: CALL_OW 275
22162: PUSH
22163: LD_VAR 0 4
22167: PUSH
22168: LD_INT 1
22170: ARRAY
22171: GREATEREQUAL
22172: IFFALSE 22198
22174: PUSH
22175: LD_VAR 0 5
22179: PPUSH
22180: LD_INT 2
22182: PPUSH
22183: CALL_OW 275
22187: PUSH
22188: LD_VAR 0 4
22192: PUSH
22193: LD_INT 2
22195: ARRAY
22196: GREATEREQUAL
22197: AND
22198: IFFALSE 22224
22200: PUSH
22201: LD_VAR 0 5
22205: PPUSH
22206: LD_INT 3
22208: PPUSH
22209: CALL_OW 275
22213: PUSH
22214: LD_VAR 0 4
22218: PUSH
22219: LD_INT 3
22221: ARRAY
22222: GREATEREQUAL
22223: AND
22224: ST_TO_ADDR
// end ;
22225: LD_VAR 0 3
22229: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22230: LD_INT 0
22232: PPUSH
22233: PPUSH
22234: PPUSH
22235: PPUSH
// pom := GetBase ( building ) ;
22236: LD_ADDR_VAR 0 3
22240: PUSH
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL_OW 274
22250: ST_TO_ADDR
// if not pom then
22251: LD_VAR 0 3
22255: NOT
22256: IFFALSE 22260
// exit ;
22258: GO 22434
// btype := GetBType ( building ) ;
22260: LD_ADDR_VAR 0 5
22264: PUSH
22265: LD_VAR 0 1
22269: PPUSH
22270: CALL_OW 266
22274: ST_TO_ADDR
// if btype = b_armoury then
22275: LD_VAR 0 5
22279: PUSH
22280: LD_INT 4
22282: EQUAL
22283: IFFALSE 22293
// btype := b_barracks ;
22285: LD_ADDR_VAR 0 5
22289: PUSH
22290: LD_INT 5
22292: ST_TO_ADDR
// if btype = b_depot then
22293: LD_VAR 0 5
22297: PUSH
22298: LD_INT 0
22300: EQUAL
22301: IFFALSE 22311
// btype := b_warehouse ;
22303: LD_ADDR_VAR 0 5
22307: PUSH
22308: LD_INT 1
22310: ST_TO_ADDR
// if btype = b_workshop then
22311: LD_VAR 0 5
22315: PUSH
22316: LD_INT 2
22318: EQUAL
22319: IFFALSE 22329
// btype := b_factory ;
22321: LD_ADDR_VAR 0 5
22325: PUSH
22326: LD_INT 3
22328: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22329: LD_ADDR_VAR 0 4
22333: PUSH
22334: LD_VAR 0 5
22338: PPUSH
22339: LD_VAR 0 1
22343: PPUSH
22344: CALL_OW 248
22348: PPUSH
22349: CALL_OW 450
22353: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22354: LD_ADDR_VAR 0 2
22358: PUSH
22359: LD_VAR 0 3
22363: PPUSH
22364: LD_INT 1
22366: PPUSH
22367: CALL_OW 275
22371: PUSH
22372: LD_VAR 0 4
22376: PUSH
22377: LD_INT 1
22379: ARRAY
22380: GREATEREQUAL
22381: IFFALSE 22407
22383: PUSH
22384: LD_VAR 0 3
22388: PPUSH
22389: LD_INT 2
22391: PPUSH
22392: CALL_OW 275
22396: PUSH
22397: LD_VAR 0 4
22401: PUSH
22402: LD_INT 2
22404: ARRAY
22405: GREATEREQUAL
22406: AND
22407: IFFALSE 22433
22409: PUSH
22410: LD_VAR 0 3
22414: PPUSH
22415: LD_INT 3
22417: PPUSH
22418: CALL_OW 275
22422: PUSH
22423: LD_VAR 0 4
22427: PUSH
22428: LD_INT 3
22430: ARRAY
22431: GREATEREQUAL
22432: AND
22433: ST_TO_ADDR
// end ;
22434: LD_VAR 0 2
22438: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22439: LD_INT 0
22441: PPUSH
22442: PPUSH
22443: PPUSH
// pom := GetBase ( building ) ;
22444: LD_ADDR_VAR 0 4
22448: PUSH
22449: LD_VAR 0 1
22453: PPUSH
22454: CALL_OW 274
22458: ST_TO_ADDR
// if not pom then
22459: LD_VAR 0 4
22463: NOT
22464: IFFALSE 22468
// exit ;
22466: GO 22573
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22468: LD_ADDR_VAR 0 5
22472: PUSH
22473: LD_VAR 0 2
22477: PPUSH
22478: LD_VAR 0 1
22482: PPUSH
22483: CALL_OW 248
22487: PPUSH
22488: CALL_OW 450
22492: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22493: LD_ADDR_VAR 0 3
22497: PUSH
22498: LD_VAR 0 4
22502: PPUSH
22503: LD_INT 1
22505: PPUSH
22506: CALL_OW 275
22510: PUSH
22511: LD_VAR 0 5
22515: PUSH
22516: LD_INT 1
22518: ARRAY
22519: GREATEREQUAL
22520: IFFALSE 22546
22522: PUSH
22523: LD_VAR 0 4
22527: PPUSH
22528: LD_INT 2
22530: PPUSH
22531: CALL_OW 275
22535: PUSH
22536: LD_VAR 0 5
22540: PUSH
22541: LD_INT 2
22543: ARRAY
22544: GREATEREQUAL
22545: AND
22546: IFFALSE 22572
22548: PUSH
22549: LD_VAR 0 4
22553: PPUSH
22554: LD_INT 3
22556: PPUSH
22557: CALL_OW 275
22561: PUSH
22562: LD_VAR 0 5
22566: PUSH
22567: LD_INT 3
22569: ARRAY
22570: GREATEREQUAL
22571: AND
22572: ST_TO_ADDR
// end ;
22573: LD_VAR 0 3
22577: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22578: LD_INT 0
22580: PPUSH
22581: PPUSH
22582: PPUSH
22583: PPUSH
22584: PPUSH
22585: PPUSH
22586: PPUSH
22587: PPUSH
22588: PPUSH
22589: PPUSH
22590: PPUSH
// result := false ;
22591: LD_ADDR_VAR 0 8
22595: PUSH
22596: LD_INT 0
22598: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22599: LD_VAR 0 5
22603: NOT
22604: IFTRUE 22613
22606: PUSH
22607: LD_VAR 0 1
22611: NOT
22612: OR
22613: IFTRUE 22622
22615: PUSH
22616: LD_VAR 0 2
22620: NOT
22621: OR
22622: IFTRUE 22631
22624: PUSH
22625: LD_VAR 0 3
22629: NOT
22630: OR
22631: IFFALSE 22635
// exit ;
22633: GO 23461
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22635: LD_ADDR_VAR 0 14
22639: PUSH
22640: LD_VAR 0 1
22644: PPUSH
22645: LD_VAR 0 2
22649: PPUSH
22650: LD_VAR 0 3
22654: PPUSH
22655: LD_VAR 0 4
22659: PPUSH
22660: LD_VAR 0 5
22664: PUSH
22665: LD_INT 1
22667: ARRAY
22668: PPUSH
22669: CALL_OW 248
22673: PPUSH
22674: LD_INT 0
22676: PPUSH
22677: CALL 24742 0 6
22681: ST_TO_ADDR
// if not hexes then
22682: LD_VAR 0 14
22686: NOT
22687: IFFALSE 22691
// exit ;
22689: GO 23461
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22691: LD_ADDR_VAR 0 17
22695: PUSH
22696: LD_VAR 0 5
22700: PPUSH
22701: LD_INT 22
22703: PUSH
22704: LD_VAR 0 13
22708: PPUSH
22709: CALL_OW 255
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 2
22720: PUSH
22721: LD_INT 30
22723: PUSH
22724: LD_INT 0
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 30
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: LIST
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PPUSH
22750: CALL_OW 72
22754: ST_TO_ADDR
// for i = 1 to hexes do
22755: LD_ADDR_VAR 0 9
22759: PUSH
22760: DOUBLE
22761: LD_INT 1
22763: DEC
22764: ST_TO_ADDR
22765: LD_VAR 0 14
22769: PUSH
22770: FOR_TO
22771: IFFALSE 23459
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22773: LD_ADDR_VAR 0 13
22777: PUSH
22778: LD_VAR 0 14
22782: PUSH
22783: LD_VAR 0 9
22787: ARRAY
22788: PUSH
22789: LD_INT 1
22791: ARRAY
22792: PPUSH
22793: LD_VAR 0 14
22797: PUSH
22798: LD_VAR 0 9
22802: ARRAY
22803: PUSH
22804: LD_INT 2
22806: ARRAY
22807: PPUSH
22808: CALL_OW 428
22812: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22813: LD_VAR 0 14
22817: PUSH
22818: LD_VAR 0 9
22822: ARRAY
22823: PUSH
22824: LD_INT 1
22826: ARRAY
22827: PPUSH
22828: LD_VAR 0 14
22832: PUSH
22833: LD_VAR 0 9
22837: ARRAY
22838: PUSH
22839: LD_INT 2
22841: ARRAY
22842: PPUSH
22843: CALL_OW 351
22847: IFTRUE 22886
22849: PUSH
22850: LD_VAR 0 14
22854: PUSH
22855: LD_VAR 0 9
22859: ARRAY
22860: PUSH
22861: LD_INT 1
22863: ARRAY
22864: PPUSH
22865: LD_VAR 0 14
22869: PUSH
22870: LD_VAR 0 9
22874: ARRAY
22875: PUSH
22876: LD_INT 2
22878: ARRAY
22879: PPUSH
22880: CALL_OW 488
22884: NOT
22885: OR
22886: IFTRUE 22903
22888: PUSH
22889: LD_VAR 0 13
22893: PPUSH
22894: CALL_OW 247
22898: PUSH
22899: LD_INT 3
22901: EQUAL
22902: OR
22903: IFFALSE 22909
// exit ;
22905: POP
22906: POP
22907: GO 23461
// if not tmp then
22909: LD_VAR 0 13
22913: NOT
22914: IFFALSE 22918
// continue ;
22916: GO 22770
// result := true ;
22918: LD_ADDR_VAR 0 8
22922: PUSH
22923: LD_INT 1
22925: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22926: LD_VAR 0 6
22930: IFFALSE 22947
22932: PUSH
22933: LD_VAR 0 13
22937: PPUSH
22938: CALL_OW 247
22942: PUSH
22943: LD_INT 2
22945: EQUAL
22946: AND
22947: IFFALSE 22964
22949: PUSH
22950: LD_VAR 0 13
22954: PPUSH
22955: CALL_OW 263
22959: PUSH
22960: LD_INT 1
22962: EQUAL
22963: AND
22964: IFFALSE 23128
// begin if IsDrivenBy ( tmp ) then
22966: LD_VAR 0 13
22970: PPUSH
22971: CALL_OW 311
22975: IFFALSE 22979
// continue ;
22977: GO 22770
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22979: LD_VAR 0 6
22983: PPUSH
22984: LD_INT 3
22986: PUSH
22987: LD_INT 60
22989: PUSH
22990: EMPTY
22991: LIST
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 3
22999: PUSH
23000: LD_INT 55
23002: PUSH
23003: EMPTY
23004: LIST
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PPUSH
23014: CALL_OW 72
23018: IFFALSE 23126
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23020: LD_ADDR_VAR 0 18
23024: PUSH
23025: LD_VAR 0 6
23029: PPUSH
23030: LD_INT 3
23032: PUSH
23033: LD_INT 60
23035: PUSH
23036: EMPTY
23037: LIST
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 3
23045: PUSH
23046: LD_INT 55
23048: PUSH
23049: EMPTY
23050: LIST
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PPUSH
23060: CALL_OW 72
23064: PUSH
23065: LD_INT 1
23067: ARRAY
23068: ST_TO_ADDR
// if IsInUnit ( driver ) then
23069: LD_VAR 0 18
23073: PPUSH
23074: CALL_OW 310
23078: IFFALSE 23089
// ComExit ( driver ) ;
23080: LD_VAR 0 18
23084: PPUSH
23085: CALL 48732 0 1
// AddComEnterUnit ( driver , tmp ) ;
23089: LD_VAR 0 18
23093: PPUSH
23094: LD_VAR 0 13
23098: PPUSH
23099: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23103: LD_VAR 0 18
23107: PPUSH
23108: LD_VAR 0 7
23112: PPUSH
23113: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23117: LD_VAR 0 18
23121: PPUSH
23122: CALL_OW 181
// end ; continue ;
23126: GO 22770
// end ; if not cleaners or not tmp in cleaners then
23128: LD_VAR 0 6
23132: NOT
23133: IFTRUE 23148
23135: PUSH
23136: LD_VAR 0 13
23140: PUSH
23141: LD_VAR 0 6
23145: IN
23146: NOT
23147: OR
23148: IFFALSE 23457
// begin if dep then
23150: LD_VAR 0 17
23154: IFFALSE 23290
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23156: LD_ADDR_VAR 0 16
23160: PUSH
23161: LD_VAR 0 17
23165: PUSH
23166: LD_INT 1
23168: ARRAY
23169: PPUSH
23170: CALL_OW 250
23174: PPUSH
23175: LD_VAR 0 17
23179: PUSH
23180: LD_INT 1
23182: ARRAY
23183: PPUSH
23184: CALL_OW 254
23188: PPUSH
23189: LD_INT 5
23191: PPUSH
23192: CALL_OW 272
23196: PUSH
23197: LD_VAR 0 17
23201: PUSH
23202: LD_INT 1
23204: ARRAY
23205: PPUSH
23206: CALL_OW 251
23210: PPUSH
23211: LD_VAR 0 17
23215: PUSH
23216: LD_INT 1
23218: ARRAY
23219: PPUSH
23220: CALL_OW 254
23224: PPUSH
23225: LD_INT 5
23227: PPUSH
23228: CALL_OW 273
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23237: LD_VAR 0 16
23241: PUSH
23242: LD_INT 1
23244: ARRAY
23245: PPUSH
23246: LD_VAR 0 16
23250: PUSH
23251: LD_INT 2
23253: ARRAY
23254: PPUSH
23255: CALL_OW 488
23259: IFFALSE 23290
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23261: LD_VAR 0 13
23265: PPUSH
23266: LD_VAR 0 16
23270: PUSH
23271: LD_INT 1
23273: ARRAY
23274: PPUSH
23275: LD_VAR 0 16
23279: PUSH
23280: LD_INT 2
23282: ARRAY
23283: PPUSH
23284: CALL_OW 111
// continue ;
23288: GO 22770
// end ; end ; r := GetDir ( tmp ) ;
23290: LD_ADDR_VAR 0 15
23294: PUSH
23295: LD_VAR 0 13
23299: PPUSH
23300: CALL_OW 254
23304: ST_TO_ADDR
// if r = 5 then
23305: LD_VAR 0 15
23309: PUSH
23310: LD_INT 5
23312: EQUAL
23313: IFFALSE 23323
// r := 0 ;
23315: LD_ADDR_VAR 0 15
23319: PUSH
23320: LD_INT 0
23322: ST_TO_ADDR
// for j = r to 5 do
23323: LD_ADDR_VAR 0 10
23327: PUSH
23328: DOUBLE
23329: LD_VAR 0 15
23333: DEC
23334: ST_TO_ADDR
23335: LD_INT 5
23337: PUSH
23338: FOR_TO
23339: IFFALSE 23455
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23341: LD_ADDR_VAR 0 11
23345: PUSH
23346: LD_VAR 0 13
23350: PPUSH
23351: CALL_OW 250
23355: PPUSH
23356: LD_VAR 0 10
23360: PPUSH
23361: LD_INT 2
23363: PPUSH
23364: CALL_OW 272
23368: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23369: LD_ADDR_VAR 0 12
23373: PUSH
23374: LD_VAR 0 13
23378: PPUSH
23379: CALL_OW 251
23383: PPUSH
23384: LD_VAR 0 10
23388: PPUSH
23389: LD_INT 2
23391: PPUSH
23392: CALL_OW 273
23396: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23397: LD_VAR 0 11
23401: PPUSH
23402: LD_VAR 0 12
23406: PPUSH
23407: CALL_OW 488
23411: IFFALSE 23430
23413: PUSH
23414: LD_VAR 0 11
23418: PPUSH
23419: LD_VAR 0 12
23423: PPUSH
23424: CALL_OW 428
23428: NOT
23429: AND
23430: IFFALSE 23453
// begin ComMoveXY ( tmp , _x , _y ) ;
23432: LD_VAR 0 13
23436: PPUSH
23437: LD_VAR 0 11
23441: PPUSH
23442: LD_VAR 0 12
23446: PPUSH
23447: CALL_OW 111
// break ;
23451: GO 23455
// end ; end ;
23453: GO 23338
23455: POP
23456: POP
// end ; end ;
23457: GO 22770
23459: POP
23460: POP
// end ;
23461: LD_VAR 0 8
23465: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23466: LD_INT 0
23468: PPUSH
// result := true ;
23469: LD_ADDR_VAR 0 3
23473: PUSH
23474: LD_INT 1
23476: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23477: LD_VAR 0 2
23481: PUSH
23482: LD_INT 24
23484: DOUBLE
23485: EQUAL
23486: IFTRUE 23496
23488: LD_INT 33
23490: DOUBLE
23491: EQUAL
23492: IFTRUE 23496
23494: GO 23521
23496: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23497: LD_ADDR_VAR 0 3
23501: PUSH
23502: LD_INT 32
23504: PPUSH
23505: LD_VAR 0 1
23509: PPUSH
23510: CALL_OW 321
23514: PUSH
23515: LD_INT 2
23517: EQUAL
23518: ST_TO_ADDR
23519: GO 23837
23521: LD_INT 20
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23529
23527: GO 23554
23529: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23530: LD_ADDR_VAR 0 3
23534: PUSH
23535: LD_INT 6
23537: PPUSH
23538: LD_VAR 0 1
23542: PPUSH
23543: CALL_OW 321
23547: PUSH
23548: LD_INT 2
23550: EQUAL
23551: ST_TO_ADDR
23552: GO 23837
23554: LD_INT 22
23556: DOUBLE
23557: EQUAL
23558: IFTRUE 23568
23560: LD_INT 36
23562: DOUBLE
23563: EQUAL
23564: IFTRUE 23568
23566: GO 23593
23568: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23569: LD_ADDR_VAR 0 3
23573: PUSH
23574: LD_INT 15
23576: PPUSH
23577: LD_VAR 0 1
23581: PPUSH
23582: CALL_OW 321
23586: PUSH
23587: LD_INT 2
23589: EQUAL
23590: ST_TO_ADDR
23591: GO 23837
23593: LD_INT 30
23595: DOUBLE
23596: EQUAL
23597: IFTRUE 23601
23599: GO 23626
23601: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23602: LD_ADDR_VAR 0 3
23606: PUSH
23607: LD_INT 20
23609: PPUSH
23610: LD_VAR 0 1
23614: PPUSH
23615: CALL_OW 321
23619: PUSH
23620: LD_INT 2
23622: EQUAL
23623: ST_TO_ADDR
23624: GO 23837
23626: LD_INT 28
23628: DOUBLE
23629: EQUAL
23630: IFTRUE 23640
23632: LD_INT 21
23634: DOUBLE
23635: EQUAL
23636: IFTRUE 23640
23638: GO 23665
23640: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23641: LD_ADDR_VAR 0 3
23645: PUSH
23646: LD_INT 21
23648: PPUSH
23649: LD_VAR 0 1
23653: PPUSH
23654: CALL_OW 321
23658: PUSH
23659: LD_INT 2
23661: EQUAL
23662: ST_TO_ADDR
23663: GO 23837
23665: LD_INT 16
23667: DOUBLE
23668: EQUAL
23669: IFTRUE 23673
23671: GO 23698
23673: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23674: LD_ADDR_VAR 0 3
23678: PUSH
23679: LD_INT 84
23681: PPUSH
23682: LD_VAR 0 1
23686: PPUSH
23687: CALL_OW 321
23691: PUSH
23692: LD_INT 2
23694: EQUAL
23695: ST_TO_ADDR
23696: GO 23837
23698: LD_INT 19
23700: DOUBLE
23701: EQUAL
23702: IFTRUE 23712
23704: LD_INT 23
23706: DOUBLE
23707: EQUAL
23708: IFTRUE 23712
23710: GO 23737
23712: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23713: LD_ADDR_VAR 0 3
23717: PUSH
23718: LD_INT 83
23720: PPUSH
23721: LD_VAR 0 1
23725: PPUSH
23726: CALL_OW 321
23730: PUSH
23731: LD_INT 2
23733: EQUAL
23734: ST_TO_ADDR
23735: GO 23837
23737: LD_INT 17
23739: DOUBLE
23740: EQUAL
23741: IFTRUE 23745
23743: GO 23770
23745: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23746: LD_ADDR_VAR 0 3
23750: PUSH
23751: LD_INT 39
23753: PPUSH
23754: LD_VAR 0 1
23758: PPUSH
23759: CALL_OW 321
23763: PUSH
23764: LD_INT 2
23766: EQUAL
23767: ST_TO_ADDR
23768: GO 23837
23770: LD_INT 18
23772: DOUBLE
23773: EQUAL
23774: IFTRUE 23778
23776: GO 23803
23778: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23779: LD_ADDR_VAR 0 3
23783: PUSH
23784: LD_INT 40
23786: PPUSH
23787: LD_VAR 0 1
23791: PPUSH
23792: CALL_OW 321
23796: PUSH
23797: LD_INT 2
23799: EQUAL
23800: ST_TO_ADDR
23801: GO 23837
23803: LD_INT 27
23805: DOUBLE
23806: EQUAL
23807: IFTRUE 23811
23809: GO 23836
23811: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23812: LD_ADDR_VAR 0 3
23816: PUSH
23817: LD_INT 35
23819: PPUSH
23820: LD_VAR 0 1
23824: PPUSH
23825: CALL_OW 321
23829: PUSH
23830: LD_INT 2
23832: EQUAL
23833: ST_TO_ADDR
23834: GO 23837
23836: POP
// end ;
23837: LD_VAR 0 3
23841: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23842: LD_INT 0
23844: PPUSH
23845: PPUSH
23846: PPUSH
23847: PPUSH
23848: PPUSH
23849: PPUSH
23850: PPUSH
23851: PPUSH
23852: PPUSH
23853: PPUSH
23854: PPUSH
// result := false ;
23855: LD_ADDR_VAR 0 6
23859: PUSH
23860: LD_INT 0
23862: ST_TO_ADDR
// if btype = b_depot then
23863: LD_VAR 0 2
23867: PUSH
23868: LD_INT 0
23870: EQUAL
23871: IFFALSE 23883
// begin result := true ;
23873: LD_ADDR_VAR 0 6
23877: PUSH
23878: LD_INT 1
23880: ST_TO_ADDR
// exit ;
23881: GO 24737
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23883: LD_VAR 0 1
23887: NOT
23888: IFTRUE 23913
23890: PUSH
23891: LD_VAR 0 1
23895: PPUSH
23896: CALL_OW 266
23900: PUSH
23901: LD_INT 0
23903: PUSH
23904: LD_INT 1
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: IN
23911: NOT
23912: OR
23913: IFTRUE 23922
23915: PUSH
23916: LD_VAR 0 2
23920: NOT
23921: OR
23922: IFTRUE 23958
23924: PUSH
23925: LD_VAR 0 5
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: LD_INT 1
23935: PUSH
23936: LD_INT 2
23938: PUSH
23939: LD_INT 3
23941: PUSH
23942: LD_INT 4
23944: PUSH
23945: LD_INT 5
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: IN
23956: NOT
23957: OR
23958: IFTRUE 23977
23960: PUSH
23961: LD_VAR 0 3
23965: PPUSH
23966: LD_VAR 0 4
23970: PPUSH
23971: CALL_OW 488
23975: NOT
23976: OR
23977: IFFALSE 23981
// exit ;
23979: GO 24737
// side := GetSide ( depot ) ;
23981: LD_ADDR_VAR 0 9
23985: PUSH
23986: LD_VAR 0 1
23990: PPUSH
23991: CALL_OW 255
23995: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23996: LD_VAR 0 9
24000: PPUSH
24001: LD_VAR 0 2
24005: PPUSH
24006: CALL 23466 0 2
24010: NOT
24011: IFFALSE 24015
// exit ;
24013: GO 24737
// pom := GetBase ( depot ) ;
24015: LD_ADDR_VAR 0 10
24019: PUSH
24020: LD_VAR 0 1
24024: PPUSH
24025: CALL_OW 274
24029: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24030: LD_ADDR_VAR 0 11
24034: PUSH
24035: LD_VAR 0 2
24039: PPUSH
24040: LD_VAR 0 1
24044: PPUSH
24045: CALL_OW 248
24049: PPUSH
24050: CALL_OW 450
24054: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24055: LD_VAR 0 10
24059: PPUSH
24060: LD_INT 1
24062: PPUSH
24063: CALL_OW 275
24067: PUSH
24068: LD_VAR 0 11
24072: PUSH
24073: LD_INT 1
24075: ARRAY
24076: GREATEREQUAL
24077: IFFALSE 24103
24079: PUSH
24080: LD_VAR 0 10
24084: PPUSH
24085: LD_INT 2
24087: PPUSH
24088: CALL_OW 275
24092: PUSH
24093: LD_VAR 0 11
24097: PUSH
24098: LD_INT 2
24100: ARRAY
24101: GREATEREQUAL
24102: AND
24103: IFFALSE 24129
24105: PUSH
24106: LD_VAR 0 10
24110: PPUSH
24111: LD_INT 3
24113: PPUSH
24114: CALL_OW 275
24118: PUSH
24119: LD_VAR 0 11
24123: PUSH
24124: LD_INT 3
24126: ARRAY
24127: GREATEREQUAL
24128: AND
24129: NOT
24130: IFFALSE 24134
// exit ;
24132: GO 24737
// if GetBType ( depot ) = b_depot then
24134: LD_VAR 0 1
24138: PPUSH
24139: CALL_OW 266
24143: PUSH
24144: LD_INT 0
24146: EQUAL
24147: IFFALSE 24159
// dist := 28 else
24149: LD_ADDR_VAR 0 14
24153: PUSH
24154: LD_INT 28
24156: ST_TO_ADDR
24157: GO 24167
// dist := 36 ;
24159: LD_ADDR_VAR 0 14
24163: PUSH
24164: LD_INT 36
24166: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24167: LD_VAR 0 1
24171: PPUSH
24172: LD_VAR 0 3
24176: PPUSH
24177: LD_VAR 0 4
24181: PPUSH
24182: CALL_OW 297
24186: PUSH
24187: LD_VAR 0 14
24191: GREATER
24192: IFFALSE 24196
// exit ;
24194: GO 24737
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24196: LD_ADDR_VAR 0 12
24200: PUSH
24201: LD_VAR 0 2
24205: PPUSH
24206: LD_VAR 0 3
24210: PPUSH
24211: LD_VAR 0 4
24215: PPUSH
24216: LD_VAR 0 5
24220: PPUSH
24221: LD_VAR 0 1
24225: PPUSH
24226: CALL_OW 248
24230: PPUSH
24231: LD_INT 0
24233: PPUSH
24234: CALL 24742 0 6
24238: ST_TO_ADDR
// if not hexes then
24239: LD_VAR 0 12
24243: NOT
24244: IFFALSE 24248
// exit ;
24246: GO 24737
// hex := GetHexInfo ( x , y ) ;
24248: LD_ADDR_VAR 0 15
24252: PUSH
24253: LD_VAR 0 3
24257: PPUSH
24258: LD_VAR 0 4
24262: PPUSH
24263: CALL_OW 546
24267: ST_TO_ADDR
// if hex [ 1 ] then
24268: LD_VAR 0 15
24272: PUSH
24273: LD_INT 1
24275: ARRAY
24276: IFFALSE 24280
// exit ;
24278: GO 24737
// height := hex [ 2 ] ;
24280: LD_ADDR_VAR 0 13
24284: PUSH
24285: LD_VAR 0 15
24289: PUSH
24290: LD_INT 2
24292: ARRAY
24293: ST_TO_ADDR
// for i = 1 to hexes do
24294: LD_ADDR_VAR 0 7
24298: PUSH
24299: DOUBLE
24300: LD_INT 1
24302: DEC
24303: ST_TO_ADDR
24304: LD_VAR 0 12
24308: PUSH
24309: FOR_TO
24310: IFFALSE 24654
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24312: LD_VAR 0 12
24316: PUSH
24317: LD_VAR 0 7
24321: ARRAY
24322: PUSH
24323: LD_INT 1
24325: ARRAY
24326: PPUSH
24327: LD_VAR 0 12
24331: PUSH
24332: LD_VAR 0 7
24336: ARRAY
24337: PUSH
24338: LD_INT 2
24340: ARRAY
24341: PPUSH
24342: CALL_OW 488
24346: NOT
24347: IFTRUE 24389
24349: PUSH
24350: LD_VAR 0 12
24354: PUSH
24355: LD_VAR 0 7
24359: ARRAY
24360: PUSH
24361: LD_INT 1
24363: ARRAY
24364: PPUSH
24365: LD_VAR 0 12
24369: PUSH
24370: LD_VAR 0 7
24374: ARRAY
24375: PUSH
24376: LD_INT 2
24378: ARRAY
24379: PPUSH
24380: CALL_OW 428
24384: PUSH
24385: LD_INT 0
24387: GREATER
24388: OR
24389: IFTRUE 24427
24391: PUSH
24392: LD_VAR 0 12
24396: PUSH
24397: LD_VAR 0 7
24401: ARRAY
24402: PUSH
24403: LD_INT 1
24405: ARRAY
24406: PPUSH
24407: LD_VAR 0 12
24411: PUSH
24412: LD_VAR 0 7
24416: ARRAY
24417: PUSH
24418: LD_INT 2
24420: ARRAY
24421: PPUSH
24422: CALL_OW 351
24426: OR
24427: IFFALSE 24433
// exit ;
24429: POP
24430: POP
24431: GO 24737
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24433: LD_ADDR_VAR 0 8
24437: PUSH
24438: LD_VAR 0 12
24442: PUSH
24443: LD_VAR 0 7
24447: ARRAY
24448: PUSH
24449: LD_INT 1
24451: ARRAY
24452: PPUSH
24453: LD_VAR 0 12
24457: PUSH
24458: LD_VAR 0 7
24462: ARRAY
24463: PUSH
24464: LD_INT 2
24466: ARRAY
24467: PPUSH
24468: CALL_OW 546
24472: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24473: LD_VAR 0 8
24477: PUSH
24478: LD_INT 1
24480: ARRAY
24481: IFTRUE 24503
24483: PUSH
24484: LD_VAR 0 8
24488: PUSH
24489: LD_INT 2
24491: ARRAY
24492: PUSH
24493: LD_VAR 0 13
24497: PUSH
24498: LD_INT 2
24500: PLUS
24501: GREATER
24502: OR
24503: IFTRUE 24525
24505: PUSH
24506: LD_VAR 0 8
24510: PUSH
24511: LD_INT 2
24513: ARRAY
24514: PUSH
24515: LD_VAR 0 13
24519: PUSH
24520: LD_INT 2
24522: MINUS
24523: LESS
24524: OR
24525: IFTRUE 24593
24527: PUSH
24528: LD_VAR 0 8
24532: PUSH
24533: LD_INT 3
24535: ARRAY
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: LD_INT 8
24542: PUSH
24543: LD_INT 9
24545: PUSH
24546: LD_INT 10
24548: PUSH
24549: LD_INT 11
24551: PUSH
24552: LD_INT 12
24554: PUSH
24555: LD_INT 13
24557: PUSH
24558: LD_INT 16
24560: PUSH
24561: LD_INT 17
24563: PUSH
24564: LD_INT 18
24566: PUSH
24567: LD_INT 19
24569: PUSH
24570: LD_INT 20
24572: PUSH
24573: LD_INT 21
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: IN
24591: NOT
24592: OR
24593: IFTRUE 24606
24595: PUSH
24596: LD_VAR 0 8
24600: PUSH
24601: LD_INT 5
24603: ARRAY
24604: NOT
24605: OR
24606: IFTRUE 24646
24608: PUSH
24609: LD_VAR 0 8
24613: PUSH
24614: LD_INT 6
24616: ARRAY
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: LD_INT 2
24623: PUSH
24624: LD_INT 7
24626: PUSH
24627: LD_INT 9
24629: PUSH
24630: LD_INT 10
24632: PUSH
24633: LD_INT 11
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: IN
24644: NOT
24645: OR
24646: IFFALSE 24652
// exit ;
24648: POP
24649: POP
24650: GO 24737
// end ;
24652: GO 24309
24654: POP
24655: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24656: LD_VAR 0 9
24660: PPUSH
24661: LD_VAR 0 3
24665: PPUSH
24666: LD_VAR 0 4
24670: PPUSH
24671: LD_INT 20
24673: PPUSH
24674: CALL 16556 0 4
24678: PUSH
24679: LD_INT 4
24681: ARRAY
24682: IFFALSE 24686
// exit ;
24684: GO 24737
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24686: LD_VAR 0 2
24690: PUSH
24691: LD_INT 29
24693: PUSH
24694: LD_INT 30
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: IN
24701: IFFALSE 24725
24703: PUSH
24704: LD_VAR 0 3
24708: PPUSH
24709: LD_VAR 0 4
24713: PPUSH
24714: LD_VAR 0 9
24718: PPUSH
24719: CALL_OW 440
24723: NOT
24724: AND
24725: IFFALSE 24729
// exit ;
24727: GO 24737
// result := true ;
24729: LD_ADDR_VAR 0 6
24733: PUSH
24734: LD_INT 1
24736: ST_TO_ADDR
// end ;
24737: LD_VAR 0 6
24741: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24742: LD_INT 0
24744: PPUSH
24745: PPUSH
24746: PPUSH
24747: PPUSH
24748: PPUSH
24749: PPUSH
24750: PPUSH
24751: PPUSH
24752: PPUSH
24753: PPUSH
24754: PPUSH
24755: PPUSH
24756: PPUSH
24757: PPUSH
24758: PPUSH
24759: PPUSH
24760: PPUSH
24761: PPUSH
24762: PPUSH
24763: PPUSH
24764: PPUSH
24765: PPUSH
24766: PPUSH
24767: PPUSH
24768: PPUSH
24769: PPUSH
24770: PPUSH
24771: PPUSH
24772: PPUSH
24773: PPUSH
24774: PPUSH
24775: PPUSH
24776: PPUSH
24777: PPUSH
24778: PPUSH
24779: PPUSH
24780: PPUSH
24781: PPUSH
24782: PPUSH
24783: PPUSH
24784: PPUSH
24785: PPUSH
24786: PPUSH
24787: PPUSH
24788: PPUSH
24789: PPUSH
24790: PPUSH
24791: PPUSH
24792: PPUSH
24793: PPUSH
24794: PPUSH
24795: PPUSH
24796: PPUSH
24797: PPUSH
24798: PPUSH
24799: PPUSH
24800: PPUSH
24801: PPUSH
// result = [ ] ;
24802: LD_ADDR_VAR 0 7
24806: PUSH
24807: EMPTY
24808: ST_TO_ADDR
// temp_list = [ ] ;
24809: LD_ADDR_VAR 0 9
24813: PUSH
24814: EMPTY
24815: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24816: LD_VAR 0 4
24820: PUSH
24821: LD_INT 0
24823: PUSH
24824: LD_INT 1
24826: PUSH
24827: LD_INT 2
24829: PUSH
24830: LD_INT 3
24832: PUSH
24833: LD_INT 4
24835: PUSH
24836: LD_INT 5
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: IN
24847: NOT
24848: IFTRUE 24891
24850: PUSH
24851: LD_VAR 0 1
24855: PUSH
24856: LD_INT 0
24858: PUSH
24859: LD_INT 1
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: IN
24866: IFFALSE 24890
24868: PUSH
24869: LD_VAR 0 5
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: LD_INT 2
24879: PUSH
24880: LD_INT 3
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: IN
24888: NOT
24889: AND
24890: OR
24891: IFFALSE 24895
// exit ;
24893: GO 43294
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24895: LD_VAR 0 1
24899: PUSH
24900: LD_INT 6
24902: PUSH
24903: LD_INT 7
24905: PUSH
24906: LD_INT 8
24908: PUSH
24909: LD_INT 13
24911: PUSH
24912: LD_INT 12
24914: PUSH
24915: LD_INT 15
24917: PUSH
24918: LD_INT 11
24920: PUSH
24921: LD_INT 14
24923: PUSH
24924: LD_INT 10
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: IN
24938: IFFALSE 24948
// btype = b_lab ;
24940: LD_ADDR_VAR 0 1
24944: PUSH
24945: LD_INT 6
24947: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24948: LD_VAR 0 6
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: LD_INT 2
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: LIST
24966: IN
24967: NOT
24968: IFTRUE 25036
24970: PUSH
24971: LD_VAR 0 1
24975: PUSH
24976: LD_INT 0
24978: PUSH
24979: LD_INT 1
24981: PUSH
24982: LD_INT 2
24984: PUSH
24985: LD_INT 3
24987: PUSH
24988: LD_INT 6
24990: PUSH
24991: LD_INT 36
24993: PUSH
24994: LD_INT 4
24996: PUSH
24997: LD_INT 5
24999: PUSH
25000: LD_INT 31
25002: PUSH
25003: LD_INT 32
25005: PUSH
25006: LD_INT 33
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: IN
25022: NOT
25023: IFFALSE 25035
25025: PUSH
25026: LD_VAR 0 6
25030: PUSH
25031: LD_INT 1
25033: EQUAL
25034: AND
25035: OR
25036: IFTRUE 25068
25038: PUSH
25039: LD_VAR 0 1
25043: PUSH
25044: LD_INT 2
25046: PUSH
25047: LD_INT 3
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: IN
25054: NOT
25055: IFFALSE 25067
25057: PUSH
25058: LD_VAR 0 6
25062: PUSH
25063: LD_INT 2
25065: EQUAL
25066: AND
25067: OR
25068: IFFALSE 25078
// mode = 0 ;
25070: LD_ADDR_VAR 0 6
25074: PUSH
25075: LD_INT 0
25077: ST_TO_ADDR
// case mode of 0 :
25078: LD_VAR 0 6
25082: PUSH
25083: LD_INT 0
25085: DOUBLE
25086: EQUAL
25087: IFTRUE 25091
25089: GO 36544
25091: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25092: LD_ADDR_VAR 0 11
25096: PUSH
25097: LD_INT 0
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: LD_INT 1
25112: NEG
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 1
25120: PUSH
25121: LD_INT 0
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 1
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 0
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 1
25150: NEG
25151: PUSH
25152: LD_INT 0
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 1
25161: NEG
25162: PUSH
25163: LD_INT 1
25165: NEG
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 1
25173: NEG
25174: PUSH
25175: LD_INT 2
25177: NEG
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: LD_INT 2
25188: NEG
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 1
25196: PUSH
25197: LD_INT 1
25199: NEG
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: LD_INT 2
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: LD_INT 2
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: LD_INT 1
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 1
25238: PUSH
25239: LD_INT 3
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 0
25248: PUSH
25249: LD_INT 3
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: LD_INT 2
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25285: LD_ADDR_VAR 0 12
25289: PUSH
25290: LD_INT 0
25292: PUSH
25293: LD_INT 0
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 0
25302: PUSH
25303: LD_INT 1
25305: NEG
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 1
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 1
25323: PUSH
25324: LD_INT 1
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 1
25343: NEG
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 1
25354: NEG
25355: PUSH
25356: LD_INT 1
25358: NEG
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 2
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 2
25387: PUSH
25388: LD_INT 1
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: LD_INT 1
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 2
25408: NEG
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 2
25419: NEG
25420: PUSH
25421: LD_INT 1
25423: NEG
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 2
25431: NEG
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 3
25442: NEG
25443: PUSH
25444: LD_INT 0
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 3
25453: NEG
25454: PUSH
25455: LD_INT 1
25457: NEG
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25481: LD_ADDR_VAR 0 13
25485: PUSH
25486: LD_INT 0
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 1
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 1
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 0
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 1
25539: NEG
25540: PUSH
25541: LD_INT 0
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 1
25550: NEG
25551: PUSH
25552: LD_INT 1
25554: NEG
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 1
25562: NEG
25563: PUSH
25564: LD_INT 2
25566: NEG
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 2
25574: PUSH
25575: LD_INT 1
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 2
25584: PUSH
25585: LD_INT 2
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: LD_INT 2
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 2
25604: NEG
25605: PUSH
25606: LD_INT 1
25608: NEG
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 2
25616: NEG
25617: PUSH
25618: LD_INT 2
25620: NEG
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 2
25628: NEG
25629: PUSH
25630: LD_INT 3
25632: NEG
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 3
25640: NEG
25641: PUSH
25642: LD_INT 2
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 3
25652: NEG
25653: PUSH
25654: LD_INT 3
25656: NEG
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25680: LD_ADDR_VAR 0 14
25684: PUSH
25685: LD_INT 0
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 0
25697: PUSH
25698: LD_INT 1
25700: NEG
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 1
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: LD_INT 1
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 0
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 1
25738: NEG
25739: PUSH
25740: LD_INT 0
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 1
25749: NEG
25750: PUSH
25751: LD_INT 1
25753: NEG
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 1
25761: NEG
25762: PUSH
25763: LD_INT 2
25765: NEG
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: LD_INT 2
25776: NEG
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 1
25784: PUSH
25785: LD_INT 1
25787: NEG
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: LD_INT 2
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 0
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 1
25826: NEG
25827: PUSH
25828: LD_INT 3
25830: NEG
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 0
25838: PUSH
25839: LD_INT 3
25841: NEG
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 1
25849: PUSH
25850: LD_INT 2
25852: NEG
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25876: LD_ADDR_VAR 0 15
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: LD_INT 1
25896: NEG
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 1
25914: PUSH
25915: LD_INT 1
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 0
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 1
25934: NEG
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 1
25945: NEG
25946: PUSH
25947: LD_INT 1
25949: NEG
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: LD_INT 1
25960: NEG
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 2
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 2
25978: PUSH
25979: LD_INT 1
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 1
25988: NEG
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 2
25999: NEG
26000: PUSH
26001: LD_INT 0
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 2
26010: NEG
26011: PUSH
26012: LD_INT 1
26014: NEG
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 2
26022: PUSH
26023: LD_INT 1
26025: NEG
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 3
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 3
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26069: LD_ADDR_VAR 0 16
26073: PUSH
26074: LD_INT 0
26076: PUSH
26077: LD_INT 0
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 0
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 1
26097: PUSH
26098: LD_INT 0
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 1
26107: PUSH
26108: LD_INT 1
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 0
26117: PUSH
26118: LD_INT 1
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 1
26127: NEG
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 1
26138: NEG
26139: PUSH
26140: LD_INT 1
26142: NEG
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 1
26150: NEG
26151: PUSH
26152: LD_INT 2
26154: NEG
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 2
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 2
26172: PUSH
26173: LD_INT 2
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 1
26182: PUSH
26183: LD_INT 2
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 2
26192: NEG
26193: PUSH
26194: LD_INT 1
26196: NEG
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 2
26204: NEG
26205: PUSH
26206: LD_INT 2
26208: NEG
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 3
26216: PUSH
26217: LD_INT 2
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 3
26226: PUSH
26227: LD_INT 3
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 2
26236: PUSH
26237: LD_INT 3
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26262: LD_ADDR_VAR 0 17
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: LD_INT 0
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: LD_INT 1
26282: NEG
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 1
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: LD_INT 1
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: LD_INT 1
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: LD_INT 0
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: LD_INT 1
26335: NEG
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 1
26343: NEG
26344: PUSH
26345: LD_INT 2
26347: NEG
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: LD_INT 2
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: LD_INT 1
26369: NEG
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 2
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 2
26387: PUSH
26388: LD_INT 1
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 2
26397: PUSH
26398: LD_INT 2
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: LD_INT 2
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 0
26417: PUSH
26418: LD_INT 2
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 2
26438: NEG
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 2
26449: NEG
26450: PUSH
26451: LD_INT 1
26453: NEG
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 2
26461: NEG
26462: PUSH
26463: LD_INT 2
26465: NEG
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26492: LD_ADDR_VAR 0 18
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: LD_INT 1
26512: NEG
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 1
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 1
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 1
26561: NEG
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: NEG
26574: PUSH
26575: LD_INT 2
26577: NEG
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: LD_INT 2
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: LD_INT 1
26599: NEG
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 2
26607: PUSH
26608: LD_INT 0
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 2
26617: PUSH
26618: LD_INT 1
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 2
26627: PUSH
26628: LD_INT 2
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: LD_INT 2
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: LD_INT 2
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: LD_INT 1
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 2
26668: NEG
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 2
26679: NEG
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 2
26691: NEG
26692: PUSH
26693: LD_INT 2
26695: NEG
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26722: LD_ADDR_VAR 0 19
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: LD_INT 1
26742: NEG
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 1
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: LD_INT 1
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: LD_INT 1
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 1
26780: NEG
26781: PUSH
26782: LD_INT 0
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 1
26791: NEG
26792: PUSH
26793: LD_INT 1
26795: NEG
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: NEG
26804: PUSH
26805: LD_INT 2
26807: NEG
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: LD_INT 2
26818: NEG
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 2
26837: PUSH
26838: LD_INT 0
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 2
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 2
26857: PUSH
26858: LD_INT 2
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: LD_INT 2
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 0
26877: PUSH
26878: LD_INT 2
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 2
26898: NEG
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 2
26909: NEG
26910: PUSH
26911: LD_INT 1
26913: NEG
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 2
26921: NEG
26922: PUSH
26923: LD_INT 2
26925: NEG
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26952: LD_ADDR_VAR 0 20
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: LD_INT 1
26972: NEG
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 1
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 1
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: LD_INT 1
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 1
27010: NEG
27011: PUSH
27012: LD_INT 0
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: LD_INT 1
27025: NEG
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: LD_INT 2
27037: NEG
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: LD_INT 2
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: LD_INT 1
27059: NEG
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 2
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: LD_INT 1
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 2
27087: PUSH
27088: LD_INT 2
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: LD_INT 2
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 2
27128: NEG
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 2
27139: NEG
27140: PUSH
27141: LD_INT 1
27143: NEG
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 2
27151: NEG
27152: PUSH
27153: LD_INT 2
27155: NEG
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27182: LD_ADDR_VAR 0 21
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 1
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 1
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: LD_INT 1
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 1
27240: NEG
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 1
27251: NEG
27252: PUSH
27253: LD_INT 1
27255: NEG
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: LD_INT 2
27267: NEG
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: LD_INT 2
27278: NEG
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 1
27286: PUSH
27287: LD_INT 1
27289: NEG
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 2
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 2
27307: PUSH
27308: LD_INT 1
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 2
27317: PUSH
27318: LD_INT 2
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: LD_INT 2
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: LD_INT 2
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: LD_INT 1
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 2
27358: NEG
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 2
27369: NEG
27370: PUSH
27371: LD_INT 1
27373: NEG
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 2
27381: NEG
27382: PUSH
27383: LD_INT 2
27385: NEG
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27412: LD_ADDR_VAR 0 22
27416: PUSH
27417: LD_INT 0
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: LD_INT 1
27432: NEG
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 1
27440: PUSH
27441: LD_INT 0
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 1
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: LD_INT 1
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 1
27470: NEG
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 1
27481: NEG
27482: PUSH
27483: LD_INT 1
27485: NEG
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 1
27493: NEG
27494: PUSH
27495: LD_INT 2
27497: NEG
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: LD_INT 2
27508: NEG
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 2
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 2
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 2
27547: PUSH
27548: LD_INT 2
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: PUSH
27558: LD_INT 2
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: LD_INT 2
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 2
27588: NEG
27589: PUSH
27590: LD_INT 0
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 2
27599: NEG
27600: PUSH
27601: LD_INT 1
27603: NEG
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 2
27611: NEG
27612: PUSH
27613: LD_INT 2
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27642: LD_ADDR_VAR 0 23
27646: PUSH
27647: LD_INT 0
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: LD_INT 1
27662: NEG
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 1
27670: PUSH
27671: LD_INT 0
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 1
27680: PUSH
27681: LD_INT 1
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: LD_INT 1
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 1
27700: NEG
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 1
27711: NEG
27712: PUSH
27713: LD_INT 1
27715: NEG
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: LD_INT 2
27727: NEG
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: LD_INT 2
27738: NEG
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 1
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 2
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 2
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 2
27777: PUSH
27778: LD_INT 2
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 1
27787: PUSH
27788: LD_INT 2
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 0
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 2
27818: NEG
27819: PUSH
27820: LD_INT 0
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 2
27829: NEG
27830: PUSH
27831: LD_INT 1
27833: NEG
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 2
27841: NEG
27842: PUSH
27843: LD_INT 2
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: NEG
27854: PUSH
27855: LD_INT 3
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 1
27865: NEG
27866: PUSH
27867: LD_INT 3
27869: NEG
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 1
27877: PUSH
27878: LD_INT 2
27880: NEG
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 2
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27922: LD_ADDR_VAR 0 24
27926: PUSH
27927: LD_INT 0
27929: PUSH
27930: LD_INT 0
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: LD_INT 1
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: LD_INT 0
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: LD_INT 0
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 1
27991: NEG
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: LD_INT 2
28007: NEG
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 0
28015: PUSH
28016: LD_INT 2
28018: NEG
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 1
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 2
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 1
28067: PUSH
28068: LD_INT 2
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: LD_INT 2
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: NEG
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 2
28098: NEG
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 2
28109: NEG
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 2
28121: NEG
28122: PUSH
28123: LD_INT 2
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: LD_INT 2
28136: NEG
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 2
28144: PUSH
28145: LD_INT 1
28147: NEG
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 3
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 3
28165: PUSH
28166: LD_INT 2
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28198: LD_ADDR_VAR 0 25
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: LD_INT 1
28218: NEG
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: LD_INT 0
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 0
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 1
28256: NEG
28257: PUSH
28258: LD_INT 0
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 1
28267: NEG
28268: PUSH
28269: LD_INT 1
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: NEG
28280: PUSH
28281: LD_INT 2
28283: NEG
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 0
28291: PUSH
28292: LD_INT 2
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 1
28302: PUSH
28303: LD_INT 1
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 2
28333: PUSH
28334: LD_INT 2
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: LD_INT 2
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: LD_INT 2
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: NEG
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 2
28374: NEG
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 2
28385: NEG
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 2
28397: NEG
28398: PUSH
28399: LD_INT 2
28401: NEG
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 3
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 3
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 2
28429: PUSH
28430: LD_INT 3
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: LD_INT 3
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28472: LD_ADDR_VAR 0 26
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 0
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 0
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 1
28530: NEG
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: LD_INT 1
28545: NEG
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: NEG
28554: PUSH
28555: LD_INT 2
28557: NEG
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: LD_INT 2
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: LD_INT 1
28579: NEG
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 2
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 2
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 2
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 1
28617: PUSH
28618: LD_INT 2
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 0
28627: PUSH
28628: LD_INT 2
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 1
28637: NEG
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 2
28648: NEG
28649: PUSH
28650: LD_INT 0
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 2
28659: NEG
28660: PUSH
28661: LD_INT 1
28663: NEG
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 2
28671: NEG
28672: PUSH
28673: LD_INT 2
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: LD_INT 3
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: LD_INT 3
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 1
28703: NEG
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 2
28714: NEG
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28748: LD_ADDR_VAR 0 27
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: LD_INT 1
28768: NEG
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 1
28776: PUSH
28777: LD_INT 0
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 1
28806: NEG
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: NEG
28818: PUSH
28819: LD_INT 1
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 1
28829: NEG
28830: PUSH
28831: LD_INT 2
28833: NEG
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 0
28841: PUSH
28842: LD_INT 2
28844: NEG
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: LD_INT 1
28855: NEG
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 2
28863: PUSH
28864: LD_INT 0
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 2
28873: PUSH
28874: LD_INT 1
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 2
28883: PUSH
28884: LD_INT 2
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: LD_INT 2
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: LD_INT 2
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: LD_INT 1
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 2
28924: NEG
28925: PUSH
28926: LD_INT 0
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 2
28935: NEG
28936: PUSH
28937: LD_INT 1
28939: NEG
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 2
28947: NEG
28948: PUSH
28949: LD_INT 2
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: LD_INT 2
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 2
28970: NEG
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 3
28981: NEG
28982: PUSH
28983: LD_INT 1
28985: NEG
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 3
28993: NEG
28994: PUSH
28995: LD_INT 2
28997: NEG
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29028: LD_ADDR_VAR 0 28
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: LD_INT 1
29048: NEG
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 1
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 0
29076: PUSH
29077: LD_INT 1
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 1
29086: NEG
29087: PUSH
29088: LD_INT 0
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 1
29097: NEG
29098: PUSH
29099: LD_INT 1
29101: NEG
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 1
29109: NEG
29110: PUSH
29111: LD_INT 2
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: LD_INT 2
29124: NEG
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: LD_INT 1
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 2
29143: PUSH
29144: LD_INT 0
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 2
29153: PUSH
29154: LD_INT 1
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 2
29163: PUSH
29164: LD_INT 2
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 1
29173: PUSH
29174: LD_INT 2
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: LD_INT 2
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: NEG
29194: PUSH
29195: LD_INT 1
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: LD_INT 0
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 2
29215: NEG
29216: PUSH
29217: LD_INT 1
29219: NEG
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 2
29227: NEG
29228: PUSH
29229: LD_INT 2
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 2
29239: NEG
29240: PUSH
29241: LD_INT 3
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 1
29251: NEG
29252: PUSH
29253: LD_INT 3
29255: NEG
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 3
29263: NEG
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 3
29275: NEG
29276: PUSH
29277: LD_INT 2
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29310: LD_ADDR_VAR 0 29
29314: PUSH
29315: LD_INT 0
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: LD_INT 1
29330: NEG
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 1
29338: PUSH
29339: LD_INT 0
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 0
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 1
29368: NEG
29369: PUSH
29370: LD_INT 0
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 1
29379: NEG
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 1
29391: NEG
29392: PUSH
29393: LD_INT 2
29395: NEG
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 0
29403: PUSH
29404: LD_INT 2
29406: NEG
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 1
29414: PUSH
29415: LD_INT 1
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 2
29425: PUSH
29426: LD_INT 0
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 2
29435: PUSH
29436: LD_INT 1
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: LD_INT 2
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 0
29455: PUSH
29456: LD_INT 2
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 1
29465: NEG
29466: PUSH
29467: LD_INT 1
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 2
29476: NEG
29477: PUSH
29478: LD_INT 1
29480: NEG
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 2
29488: NEG
29489: PUSH
29490: LD_INT 2
29492: NEG
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 2
29500: NEG
29501: PUSH
29502: LD_INT 3
29504: NEG
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 2
29512: PUSH
29513: LD_INT 1
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 3
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 1
29533: PUSH
29534: LD_INT 3
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 1
29543: NEG
29544: PUSH
29545: LD_INT 2
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 3
29554: NEG
29555: PUSH
29556: LD_INT 2
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29589: LD_ADDR_VAR 0 30
29593: PUSH
29594: LD_INT 0
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 0
29606: PUSH
29607: LD_INT 1
29609: NEG
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 1
29617: PUSH
29618: LD_INT 0
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 1
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 0
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 1
29647: NEG
29648: PUSH
29649: LD_INT 0
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 1
29658: NEG
29659: PUSH
29660: LD_INT 1
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 1
29670: NEG
29671: PUSH
29672: LD_INT 2
29674: NEG
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 0
29682: PUSH
29683: LD_INT 2
29685: NEG
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 1
29693: PUSH
29694: LD_INT 1
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 2
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 2
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: LD_INT 2
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: LD_INT 2
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 1
29744: NEG
29745: PUSH
29746: LD_INT 1
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 2
29755: NEG
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 2
29766: NEG
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 1
29778: NEG
29779: PUSH
29780: LD_INT 3
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: LD_INT 2
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 3
29801: PUSH
29802: LD_INT 2
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 2
29811: PUSH
29812: LD_INT 3
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 2
29821: NEG
29822: PUSH
29823: LD_INT 1
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 3
29832: NEG
29833: PUSH
29834: LD_INT 1
29836: NEG
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29867: LD_ADDR_VAR 0 31
29871: PUSH
29872: LD_INT 0
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 0
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 0
29915: PUSH
29916: LD_INT 1
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 1
29925: NEG
29926: PUSH
29927: LD_INT 0
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 1
29936: NEG
29937: PUSH
29938: LD_INT 1
29940: NEG
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 1
29948: NEG
29949: PUSH
29950: LD_INT 2
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: LD_INT 1
29963: NEG
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 2
29971: PUSH
29972: LD_INT 0
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 2
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 2
29991: PUSH
29992: LD_INT 2
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: LD_INT 2
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 1
30021: NEG
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 2
30032: NEG
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 2
30044: NEG
30045: PUSH
30046: LD_INT 2
30048: NEG
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 2
30056: NEG
30057: PUSH
30058: LD_INT 3
30060: NEG
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 2
30068: PUSH
30069: LD_INT 1
30071: NEG
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 3
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: LD_INT 3
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: LD_INT 2
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 3
30110: NEG
30111: PUSH
30112: LD_INT 2
30114: NEG
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30145: LD_ADDR_VAR 0 32
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: LD_INT 0
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 0
30162: PUSH
30163: LD_INT 1
30165: NEG
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: LD_INT 0
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: LD_INT 1
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 0
30193: PUSH
30194: LD_INT 1
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 1
30203: NEG
30204: PUSH
30205: LD_INT 0
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 1
30214: NEG
30215: PUSH
30216: LD_INT 1
30218: NEG
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 1
30226: NEG
30227: PUSH
30228: LD_INT 2
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 0
30238: PUSH
30239: LD_INT 2
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 1
30249: PUSH
30250: LD_INT 1
30252: NEG
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 2
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 2
30270: PUSH
30271: LD_INT 2
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: PUSH
30281: LD_INT 2
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 0
30290: PUSH
30291: LD_INT 2
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 2
30311: NEG
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 2
30322: NEG
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: PUSH
30336: LD_INT 3
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: LD_INT 2
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 3
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 2
30367: PUSH
30368: LD_INT 3
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 2
30377: NEG
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 3
30388: NEG
30389: PUSH
30390: LD_INT 1
30392: NEG
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30423: LD_ADDR_VAR 0 33
30427: PUSH
30428: LD_INT 0
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 0
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 1
30451: PUSH
30452: LD_INT 0
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 1
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: NEG
30482: PUSH
30483: LD_INT 0
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 1
30492: NEG
30493: PUSH
30494: LD_INT 1
30496: NEG
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 1
30504: NEG
30505: PUSH
30506: LD_INT 2
30508: NEG
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: LD_INT 1
30519: NEG
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 2
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: LD_INT 1
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 1
30547: PUSH
30548: LD_INT 2
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: LD_INT 2
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 1
30567: NEG
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 2
30578: NEG
30579: PUSH
30580: LD_INT 0
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 2
30589: NEG
30590: PUSH
30591: LD_INT 1
30593: NEG
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 2
30601: NEG
30602: PUSH
30603: LD_INT 2
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 2
30613: NEG
30614: PUSH
30615: LD_INT 3
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 2
30625: PUSH
30626: LD_INT 1
30628: NEG
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 3
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 1
30646: PUSH
30647: LD_INT 3
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 1
30656: NEG
30657: PUSH
30658: LD_INT 2
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 3
30667: NEG
30668: PUSH
30669: LD_INT 2
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30702: LD_ADDR_VAR 0 34
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 0
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: LD_INT 0
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 1
30740: PUSH
30741: LD_INT 1
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 0
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 1
30760: NEG
30761: PUSH
30762: LD_INT 0
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PUSH
30773: LD_INT 1
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 1
30783: NEG
30784: PUSH
30785: LD_INT 2
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: LD_INT 2
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 2
30817: PUSH
30818: LD_INT 1
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: LD_INT 2
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: LD_INT 2
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: LD_INT 1
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 2
30858: NEG
30859: PUSH
30860: LD_INT 0
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 2
30869: NEG
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 2
30881: NEG
30882: PUSH
30883: LD_INT 2
30885: NEG
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 1
30893: NEG
30894: PUSH
30895: LD_INT 3
30897: NEG
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 1
30905: PUSH
30906: LD_INT 2
30908: NEG
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 3
30916: PUSH
30917: LD_INT 2
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 2
30926: PUSH
30927: LD_INT 3
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 2
30936: NEG
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 3
30947: NEG
30948: PUSH
30949: LD_INT 1
30951: NEG
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30982: LD_ADDR_VAR 0 35
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 0
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 0
31030: PUSH
31031: LD_INT 1
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: NEG
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: NEG
31052: PUSH
31053: LD_INT 1
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 2
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 2
31073: NEG
31074: PUSH
31075: LD_INT 1
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31094: LD_ADDR_VAR 0 36
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 1
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 1
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 0
31142: PUSH
31143: LD_INT 1
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 1
31152: NEG
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 1
31163: NEG
31164: PUSH
31165: LD_INT 1
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: NEG
31176: PUSH
31177: LD_INT 2
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: LD_INT 2
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31206: LD_ADDR_VAR 0 37
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 1
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: LD_INT 0
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 1
31275: NEG
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31318: LD_ADDR_VAR 0 38
31322: PUSH
31323: LD_INT 0
31325: PUSH
31326: LD_INT 0
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: LD_INT 1
31338: NEG
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: LD_INT 0
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 1
31376: NEG
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: PUSH
31389: LD_INT 1
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: LD_INT 1
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 2
31409: NEG
31410: PUSH
31411: LD_INT 1
31413: NEG
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31430: LD_ADDR_VAR 0 39
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: LD_INT 0
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: LD_INT 0
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 0
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 1
31499: NEG
31500: PUSH
31501: LD_INT 1
31503: NEG
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 1
31511: NEG
31512: PUSH
31513: LD_INT 2
31515: NEG
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31542: LD_ADDR_VAR 0 40
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 0
31559: PUSH
31560: LD_INT 1
31562: NEG
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: PUSH
31581: LD_INT 1
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 0
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 1
31611: NEG
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: LD_INT 1
31626: NEG
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 1
31634: NEG
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31654: LD_ADDR_VAR 0 41
31658: PUSH
31659: LD_INT 0
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 0
31702: PUSH
31703: LD_INT 1
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 1
31712: NEG
31713: PUSH
31714: LD_INT 0
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 1
31723: NEG
31724: PUSH
31725: LD_INT 1
31727: NEG
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 1
31735: NEG
31736: PUSH
31737: LD_INT 2
31739: NEG
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 1
31747: PUSH
31748: LD_INT 1
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 2
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 2
31768: PUSH
31769: LD_INT 1
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 2
31778: PUSH
31779: LD_INT 2
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: PUSH
31789: LD_INT 2
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 2
31809: NEG
31810: PUSH
31811: LD_INT 0
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 2
31820: NEG
31821: PUSH
31822: LD_INT 1
31824: NEG
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 2
31832: NEG
31833: PUSH
31834: LD_INT 2
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 2
31844: NEG
31845: PUSH
31846: LD_INT 3
31848: NEG
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 2
31856: PUSH
31857: LD_INT 1
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 3
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 3
31877: PUSH
31878: LD_INT 1
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 3
31887: PUSH
31888: LD_INT 2
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 3
31897: PUSH
31898: LD_INT 3
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 2
31907: PUSH
31908: LD_INT 3
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 2
31917: NEG
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 3
31928: NEG
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 3
31939: NEG
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 3
31951: NEG
31952: PUSH
31953: LD_INT 2
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 3
31963: NEG
31964: PUSH
31965: LD_INT 3
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32004: LD_ADDR_VAR 0 42
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 0
32021: PUSH
32022: LD_INT 1
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: LD_INT 0
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 0
32052: PUSH
32053: LD_INT 1
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 1
32062: NEG
32063: PUSH
32064: LD_INT 0
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: PUSH
32075: LD_INT 1
32077: NEG
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: PUSH
32087: LD_INT 2
32089: NEG
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 0
32097: PUSH
32098: LD_INT 2
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: LD_INT 1
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 2
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 1
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: LD_INT 2
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 1
32159: NEG
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 2
32170: NEG
32171: PUSH
32172: LD_INT 1
32174: NEG
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 2
32182: NEG
32183: PUSH
32184: LD_INT 2
32186: NEG
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 2
32194: NEG
32195: PUSH
32196: LD_INT 3
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: PUSH
32208: LD_INT 3
32210: NEG
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: LD_INT 3
32221: NEG
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: LD_INT 2
32232: NEG
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 3
32240: PUSH
32241: LD_INT 2
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 3
32250: PUSH
32251: LD_INT 3
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 2
32260: PUSH
32261: LD_INT 3
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 1
32270: PUSH
32271: LD_INT 3
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 0
32280: PUSH
32281: LD_INT 3
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 1
32290: NEG
32291: PUSH
32292: LD_INT 2
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 3
32301: NEG
32302: PUSH
32303: LD_INT 2
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 3
32313: NEG
32314: PUSH
32315: LD_INT 3
32317: NEG
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32354: LD_ADDR_VAR 0 43
32358: PUSH
32359: LD_INT 0
32361: PUSH
32362: LD_INT 0
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 0
32371: PUSH
32372: LD_INT 1
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 1
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 1
32392: PUSH
32393: LD_INT 1
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 1
32412: NEG
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 1
32423: NEG
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 1
32435: NEG
32436: PUSH
32437: LD_INT 2
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 0
32447: PUSH
32448: LD_INT 2
32450: NEG
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 1
32458: PUSH
32459: LD_INT 1
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 2
32469: PUSH
32470: LD_INT 0
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 2
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: LD_INT 2
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: LD_INT 2
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 1
32509: NEG
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 2
32520: NEG
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 2
32531: NEG
32532: PUSH
32533: LD_INT 1
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: PUSH
32545: LD_INT 3
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: LD_INT 3
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 2
32569: NEG
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 2
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 3
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 3
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: LD_INT 3
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 3
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: LD_INT 2
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 2
32639: NEG
32640: PUSH
32641: LD_INT 1
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 3
32650: NEG
32651: PUSH
32652: LD_INT 0
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 3
32661: NEG
32662: PUSH
32663: LD_INT 1
32665: NEG
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32702: LD_ADDR_VAR 0 44
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: LD_INT 1
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: LD_INT 0
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 1
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: NEG
32761: PUSH
32762: LD_INT 0
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 1
32771: NEG
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: LD_INT 2
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 2
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 2
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 2
32826: PUSH
32827: LD_INT 2
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: PUSH
32837: LD_INT 2
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 1
32846: NEG
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 2
32857: NEG
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 2
32868: NEG
32869: PUSH
32870: LD_INT 1
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: NEG
32881: PUSH
32882: LD_INT 2
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 2
32892: NEG
32893: PUSH
32894: LD_INT 3
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 2
32904: PUSH
32905: LD_INT 1
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 3
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 3
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 3
32935: PUSH
32936: LD_INT 2
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 3
32945: PUSH
32946: LD_INT 3
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: LD_INT 3
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 2
32965: NEG
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 3
32976: NEG
32977: PUSH
32978: LD_INT 0
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 3
32987: NEG
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 3
32999: NEG
33000: PUSH
33001: LD_INT 2
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 3
33011: NEG
33012: PUSH
33013: LD_INT 3
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33052: LD_ADDR_VAR 0 45
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: LD_INT 1
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: LD_INT 1
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: NEG
33111: PUSH
33112: LD_INT 0
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: LD_INT 1
33125: NEG
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 1
33133: NEG
33134: PUSH
33135: LD_INT 2
33137: NEG
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 0
33145: PUSH
33146: LD_INT 2
33148: NEG
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 1
33159: NEG
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 2
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 1
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: LD_INT 2
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 1
33207: NEG
33208: PUSH
33209: LD_INT 1
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 2
33218: NEG
33219: PUSH
33220: LD_INT 1
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 2
33230: NEG
33231: PUSH
33232: LD_INT 2
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 2
33242: NEG
33243: PUSH
33244: LD_INT 3
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: LD_INT 3
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: LD_INT 3
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 1
33277: PUSH
33278: LD_INT 2
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 3
33288: PUSH
33289: LD_INT 2
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 3
33298: PUSH
33299: LD_INT 3
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 2
33308: PUSH
33309: LD_INT 3
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 1
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 0
33328: PUSH
33329: LD_INT 3
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 1
33338: NEG
33339: PUSH
33340: LD_INT 2
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 3
33349: NEG
33350: PUSH
33351: LD_INT 2
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 3
33361: NEG
33362: PUSH
33363: LD_INT 3
33365: NEG
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33402: LD_ADDR_VAR 0 46
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: LD_INT 0
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: LD_INT 1
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: NEG
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 1
33483: NEG
33484: PUSH
33485: LD_INT 2
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 2
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: LD_INT 1
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 2
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: LD_INT 1
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 1
33537: PUSH
33538: LD_INT 2
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 0
33547: PUSH
33548: LD_INT 2
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 1
33557: NEG
33558: PUSH
33559: LD_INT 1
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 2
33568: NEG
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 2
33579: NEG
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: LD_INT 3
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 0
33603: PUSH
33604: LD_INT 3
33606: NEG
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: LD_INT 2
33617: NEG
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 2
33625: PUSH
33626: LD_INT 1
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 3
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 3
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 1
33656: PUSH
33657: LD_INT 3
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: LD_INT 3
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 1
33676: NEG
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 2
33687: NEG
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 3
33698: NEG
33699: PUSH
33700: LD_INT 0
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 3
33709: NEG
33710: PUSH
33711: LD_INT 1
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33750: LD_ADDR_VAR 0 47
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 0
33767: PUSH
33768: LD_INT 1
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: LD_INT 0
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 1
33788: PUSH
33789: LD_INT 1
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 1
33819: NEG
33820: PUSH
33821: LD_INT 1
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: LD_INT 2
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: LD_INT 2
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 2
33865: NEG
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 2
33877: NEG
33878: PUSH
33879: LD_INT 2
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33901: LD_ADDR_VAR 0 48
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: LD_INT 1
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 0
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 1
33959: NEG
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 1
33970: NEG
33971: PUSH
33972: LD_INT 1
33974: NEG
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: LD_INT 2
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: LD_INT 2
33997: NEG
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 2
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 2
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34048: LD_ADDR_VAR 0 49
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: LD_INT 0
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: PUSH
34108: LD_INT 0
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: LD_INT 1
34132: NEG
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 2
34140: PUSH
34141: LD_INT 0
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 2
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 2
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 1
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34192: LD_ADDR_VAR 0 50
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: LD_INT 1
34212: NEG
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 1
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 1
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 0
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: NEG
34251: PUSH
34252: LD_INT 0
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: LD_INT 1
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 2
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 2
34283: PUSH
34284: LD_INT 2
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: LD_INT 2
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: LD_INT 2
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34336: LD_ADDR_VAR 0 51
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 0
34353: PUSH
34354: LD_INT 1
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: LD_INT 0
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 1
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 1
34394: NEG
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 1
34405: NEG
34406: PUSH
34407: LD_INT 1
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: LD_INT 2
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 0
34427: PUSH
34428: LD_INT 2
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: LD_INT 1
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 2
34448: NEG
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 2
34459: NEG
34460: PUSH
34461: LD_INT 1
34463: NEG
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34483: LD_ADDR_VAR 0 52
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: LD_INT 1
34503: NEG
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: PUSH
34512: LD_INT 0
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 1
34521: PUSH
34522: LD_INT 1
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: LD_INT 1
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 1
34541: NEG
34542: PUSH
34543: LD_INT 0
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 1
34552: NEG
34553: PUSH
34554: LD_INT 1
34556: NEG
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 1
34564: NEG
34565: PUSH
34566: LD_INT 2
34568: NEG
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 1
34576: NEG
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 2
34587: NEG
34588: PUSH
34589: LD_INT 0
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 2
34598: NEG
34599: PUSH
34600: LD_INT 1
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: NEG
34611: PUSH
34612: LD_INT 2
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34634: LD_ADDR_VAR 0 53
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: LD_INT 1
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 0
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 1
34692: NEG
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: LD_INT 2
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 2
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: LD_INT 1
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 2
34759: PUSH
34760: LD_INT 1
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 2
34769: PUSH
34770: LD_INT 2
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 1
34779: PUSH
34780: LD_INT 2
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 0
34789: PUSH
34790: LD_INT 2
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 1
34799: NEG
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 2
34810: NEG
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 2
34821: NEG
34822: PUSH
34823: LD_INT 1
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 2
34833: NEG
34834: PUSH
34835: LD_INT 2
34837: NEG
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34864: LD_ADDR_VAR 0 54
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: LD_INT 0
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 1
34922: NEG
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 1
34933: NEG
34934: PUSH
34935: LD_INT 1
34937: NEG
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: LD_INT 2
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: LD_INT 2
34960: NEG
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 2
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 2
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 1
35009: PUSH
35010: LD_INT 2
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: LD_INT 1
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 2
35040: NEG
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 2
35051: NEG
35052: PUSH
35053: LD_INT 1
35055: NEG
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 2
35063: NEG
35064: PUSH
35065: LD_INT 2
35067: NEG
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35094: LD_ADDR_VAR 0 55
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 0
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 1
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 1
35132: PUSH
35133: LD_INT 1
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 0
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 1
35152: NEG
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: NEG
35176: PUSH
35177: LD_INT 2
35179: NEG
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: LD_INT 2
35190: NEG
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: PUSH
35199: LD_INT 1
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 2
35209: PUSH
35210: LD_INT 0
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 2
35219: PUSH
35220: LD_INT 1
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 1
35239: PUSH
35240: LD_INT 2
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 2
35270: NEG
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 2
35281: NEG
35282: PUSH
35283: LD_INT 1
35285: NEG
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 2
35293: NEG
35294: PUSH
35295: LD_INT 2
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35324: LD_ADDR_VAR 0 56
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 0
35341: PUSH
35342: LD_INT 1
35344: NEG
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: LD_INT 1
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 1
35382: NEG
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: NEG
35394: PUSH
35395: LD_INT 1
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: NEG
35406: PUSH
35407: LD_INT 2
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: LD_INT 2
35420: NEG
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: LD_INT 1
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 2
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 2
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 2
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 1
35469: PUSH
35470: LD_INT 2
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 0
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: LD_INT 1
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 2
35500: NEG
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 2
35511: NEG
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 2
35523: NEG
35524: PUSH
35525: LD_INT 2
35527: NEG
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35554: LD_ADDR_VAR 0 57
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 0
35571: PUSH
35572: LD_INT 1
35574: NEG
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 1
35582: PUSH
35583: LD_INT 0
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 1
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 1
35612: NEG
35613: PUSH
35614: LD_INT 0
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 1
35623: NEG
35624: PUSH
35625: LD_INT 1
35627: NEG
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 1
35635: NEG
35636: PUSH
35637: LD_INT 2
35639: NEG
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 2
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 2
35679: PUSH
35680: LD_INT 1
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: LD_INT 2
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: LD_INT 2
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 2
35730: NEG
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 2
35741: NEG
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 2
35753: NEG
35754: PUSH
35755: LD_INT 2
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35784: LD_ADDR_VAR 0 58
35788: PUSH
35789: LD_INT 0
35791: PUSH
35792: LD_INT 0
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 0
35801: PUSH
35802: LD_INT 1
35804: NEG
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 1
35812: PUSH
35813: LD_INT 0
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 1
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 1
35842: NEG
35843: PUSH
35844: LD_INT 0
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 1
35853: NEG
35854: PUSH
35855: LD_INT 1
35857: NEG
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 1
35865: NEG
35866: PUSH
35867: LD_INT 2
35869: NEG
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 2
35880: NEG
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: PUSH
35889: LD_INT 1
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 2
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 2
35909: PUSH
35910: LD_INT 1
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 2
35919: PUSH
35920: LD_INT 2
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 1
35929: PUSH
35930: LD_INT 2
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: LD_INT 2
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 1
35949: NEG
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 2
35960: NEG
35961: PUSH
35962: LD_INT 0
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 2
35971: NEG
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 2
35983: NEG
35984: PUSH
35985: LD_INT 2
35987: NEG
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36014: LD_ADDR_VAR 0 59
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 0
36031: PUSH
36032: LD_INT 1
36034: NEG
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 1
36042: PUSH
36043: LD_INT 0
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: LD_INT 1
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 0
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 1
36072: NEG
36073: PUSH
36074: LD_INT 0
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 1
36083: NEG
36084: PUSH
36085: LD_INT 1
36087: NEG
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36102: LD_ADDR_VAR 0 60
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 0
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 0
36150: PUSH
36151: LD_INT 1
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 1
36160: NEG
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 1
36171: NEG
36172: PUSH
36173: LD_INT 1
36175: NEG
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36190: LD_ADDR_VAR 0 61
36194: PUSH
36195: LD_INT 0
36197: PUSH
36198: LD_INT 0
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: LD_INT 1
36210: NEG
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: LD_INT 1
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 1
36259: NEG
36260: PUSH
36261: LD_INT 1
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36278: LD_ADDR_VAR 0 62
36282: PUSH
36283: LD_INT 0
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: LD_INT 1
36298: NEG
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: LD_INT 0
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: LD_INT 1
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 1
36336: NEG
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: LD_INT 1
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36366: LD_ADDR_VAR 0 63
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: LD_INT 1
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: LD_INT 1
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: LD_INT 1
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 1
36435: NEG
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36454: LD_ADDR_VAR 0 64
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: LD_INT 0
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 0
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 1
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 1
36512: NEG
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: LD_INT 1
36527: NEG
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: ST_TO_ADDR
// end ; 1 :
36542: GO 42439
36544: LD_INT 1
36546: DOUBLE
36547: EQUAL
36548: IFTRUE 36552
36550: GO 39175
36552: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36553: LD_ADDR_VAR 0 11
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: LD_INT 3
36564: NEG
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: LD_INT 3
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: LD_INT 2
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36597: LD_ADDR_VAR 0 12
36601: PUSH
36602: LD_INT 2
36604: PUSH
36605: LD_INT 1
36607: NEG
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 3
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 3
36625: PUSH
36626: LD_INT 1
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: LIST
36637: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36638: LD_ADDR_VAR 0 13
36642: PUSH
36643: LD_INT 3
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 3
36655: PUSH
36656: LD_INT 3
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 2
36665: PUSH
36666: LD_INT 3
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36678: LD_ADDR_VAR 0 14
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: LD_INT 3
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 0
36695: PUSH
36696: LD_INT 3
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 1
36705: NEG
36706: PUSH
36707: LD_INT 2
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: LIST
36718: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36719: LD_ADDR_VAR 0 15
36723: PUSH
36724: LD_INT 2
36726: NEG
36727: PUSH
36728: LD_INT 1
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 3
36737: NEG
36738: PUSH
36739: LD_INT 0
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 3
36748: NEG
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: LIST
36762: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36763: LD_ADDR_VAR 0 16
36767: PUSH
36768: LD_INT 2
36770: NEG
36771: PUSH
36772: LD_INT 3
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 3
36782: NEG
36783: PUSH
36784: LD_INT 2
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 3
36794: NEG
36795: PUSH
36796: LD_INT 3
36798: NEG
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: LIST
36808: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36809: LD_ADDR_VAR 0 17
36813: PUSH
36814: LD_INT 1
36816: NEG
36817: PUSH
36818: LD_INT 3
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: LD_INT 3
36831: NEG
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: LD_INT 2
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: LIST
36852: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36853: LD_ADDR_VAR 0 18
36857: PUSH
36858: LD_INT 2
36860: PUSH
36861: LD_INT 1
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 3
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 3
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: LIST
36893: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36894: LD_ADDR_VAR 0 19
36898: PUSH
36899: LD_INT 3
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 3
36911: PUSH
36912: LD_INT 3
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 2
36921: PUSH
36922: LD_INT 3
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: LIST
36933: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36934: LD_ADDR_VAR 0 20
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: LD_INT 3
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: LD_INT 3
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: NEG
36962: PUSH
36963: LD_INT 2
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36975: LD_ADDR_VAR 0 21
36979: PUSH
36980: LD_INT 2
36982: NEG
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 3
36993: NEG
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 3
37004: NEG
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37019: LD_ADDR_VAR 0 22
37023: PUSH
37024: LD_INT 2
37026: NEG
37027: PUSH
37028: LD_INT 3
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 3
37038: NEG
37039: PUSH
37040: LD_INT 2
37042: NEG
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 3
37050: NEG
37051: PUSH
37052: LD_INT 3
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: LIST
37064: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37065: LD_ADDR_VAR 0 23
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: LD_INT 3
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: LD_INT 4
37087: NEG
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: PUSH
37096: LD_INT 3
37098: NEG
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: LIST
37108: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37109: LD_ADDR_VAR 0 24
37113: PUSH
37114: LD_INT 3
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 3
37126: PUSH
37127: LD_INT 1
37129: NEG
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 4
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: LIST
37149: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37150: LD_ADDR_VAR 0 25
37154: PUSH
37155: LD_INT 3
37157: PUSH
37158: LD_INT 3
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 4
37167: PUSH
37168: LD_INT 3
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 3
37177: PUSH
37178: LD_INT 4
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: LIST
37189: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37190: LD_ADDR_VAR 0 26
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: LD_INT 3
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: LD_INT 4
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 1
37217: NEG
37218: PUSH
37219: LD_INT 3
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: LIST
37230: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37231: LD_ADDR_VAR 0 27
37235: PUSH
37236: LD_INT 3
37238: NEG
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 3
37249: NEG
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 4
37260: NEG
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: LIST
37274: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37275: LD_ADDR_VAR 0 28
37279: PUSH
37280: LD_INT 3
37282: NEG
37283: PUSH
37284: LD_INT 3
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 3
37294: NEG
37295: PUSH
37296: LD_INT 4
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 4
37306: NEG
37307: PUSH
37308: LD_INT 3
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: LIST
37320: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37321: LD_ADDR_VAR 0 29
37325: PUSH
37326: LD_INT 1
37328: NEG
37329: PUSH
37330: LD_INT 3
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 0
37340: PUSH
37341: LD_INT 3
37343: NEG
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: LD_INT 2
37354: NEG
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: LD_INT 4
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: LD_INT 4
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: LD_INT 3
37388: NEG
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: LD_INT 5
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: LD_INT 5
37411: NEG
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: LD_INT 4
37422: NEG
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: LD_INT 6
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: LD_INT 6
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: LD_INT 5
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37476: LD_ADDR_VAR 0 30
37480: PUSH
37481: LD_INT 2
37483: PUSH
37484: LD_INT 1
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 3
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 3
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 3
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 4
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 4
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 4
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 5
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 5
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 5
37576: PUSH
37577: LD_INT 1
37579: NEG
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 6
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 6
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37619: LD_ADDR_VAR 0 31
37623: PUSH
37624: LD_INT 3
37626: PUSH
37627: LD_INT 2
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 3
37636: PUSH
37637: LD_INT 3
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: LD_INT 3
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 4
37656: PUSH
37657: LD_INT 3
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 4
37666: PUSH
37667: LD_INT 4
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 3
37676: PUSH
37677: LD_INT 4
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 5
37686: PUSH
37687: LD_INT 4
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 5
37696: PUSH
37697: LD_INT 5
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 4
37706: PUSH
37707: LD_INT 5
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 6
37716: PUSH
37717: LD_INT 5
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 6
37726: PUSH
37727: LD_INT 6
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 5
37736: PUSH
37737: LD_INT 6
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37758: LD_ADDR_VAR 0 32
37762: PUSH
37763: LD_INT 1
37765: PUSH
37766: LD_INT 3
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: LD_INT 3
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 1
37785: NEG
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: LD_INT 4
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: LD_INT 4
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 1
37816: NEG
37817: PUSH
37818: LD_INT 3
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 1
37827: PUSH
37828: LD_INT 5
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: LD_INT 5
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 1
37847: NEG
37848: PUSH
37849: LD_INT 4
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: LD_INT 6
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 6
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: LD_INT 5
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37901: LD_ADDR_VAR 0 33
37905: PUSH
37906: LD_INT 2
37908: NEG
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 3
37919: NEG
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 3
37930: NEG
37931: PUSH
37932: LD_INT 1
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 3
37942: NEG
37943: PUSH
37944: LD_INT 1
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 4
37953: NEG
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 4
37964: NEG
37965: PUSH
37966: LD_INT 1
37968: NEG
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 4
37976: NEG
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 5
37987: NEG
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 5
37998: NEG
37999: PUSH
38000: LD_INT 1
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 5
38010: NEG
38011: PUSH
38012: LD_INT 1
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 6
38021: NEG
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 6
38032: NEG
38033: PUSH
38034: LD_INT 1
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38056: LD_ADDR_VAR 0 34
38060: PUSH
38061: LD_INT 2
38063: NEG
38064: PUSH
38065: LD_INT 3
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 3
38075: NEG
38076: PUSH
38077: LD_INT 2
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 3
38087: NEG
38088: PUSH
38089: LD_INT 3
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 3
38099: NEG
38100: PUSH
38101: LD_INT 4
38103: NEG
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 4
38111: NEG
38112: PUSH
38113: LD_INT 3
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 4
38123: NEG
38124: PUSH
38125: LD_INT 4
38127: NEG
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 4
38135: NEG
38136: PUSH
38137: LD_INT 5
38139: NEG
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 5
38147: NEG
38148: PUSH
38149: LD_INT 4
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 5
38159: NEG
38160: PUSH
38161: LD_INT 5
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 5
38171: NEG
38172: PUSH
38173: LD_INT 6
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 6
38183: NEG
38184: PUSH
38185: LD_INT 5
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 6
38195: NEG
38196: PUSH
38197: LD_INT 6
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38219: LD_ADDR_VAR 0 41
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: LD_INT 2
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 3
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: LD_INT 2
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: LIST
38262: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38263: LD_ADDR_VAR 0 42
38267: PUSH
38268: LD_INT 2
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 2
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 3
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38304: LD_ADDR_VAR 0 43
38308: PUSH
38309: LD_INT 2
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 3
38321: PUSH
38322: LD_INT 2
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: LD_INT 3
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: LIST
38343: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38344: LD_ADDR_VAR 0 44
38348: PUSH
38349: LD_INT 0
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: PUSH
38362: LD_INT 3
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: LD_INT 2
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: LIST
38384: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38385: LD_ADDR_VAR 0 45
38389: PUSH
38390: LD_INT 2
38392: NEG
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 2
38403: NEG
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 3
38414: NEG
38415: PUSH
38416: LD_INT 1
38418: NEG
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: LIST
38428: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38429: LD_ADDR_VAR 0 46
38433: PUSH
38434: LD_INT 2
38436: NEG
38437: PUSH
38438: LD_INT 2
38440: NEG
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 2
38448: NEG
38449: PUSH
38450: LD_INT 3
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 3
38460: NEG
38461: PUSH
38462: LD_INT 2
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: LIST
38474: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38475: LD_ADDR_VAR 0 47
38479: PUSH
38480: LD_INT 2
38482: NEG
38483: PUSH
38484: LD_INT 3
38486: NEG
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: LD_INT 3
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38508: LD_ADDR_VAR 0 48
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: LD_INT 2
38518: NEG
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 2
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38539: LD_ADDR_VAR 0 49
38543: PUSH
38544: LD_INT 3
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 3
38556: PUSH
38557: LD_INT 2
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38568: LD_ADDR_VAR 0 50
38572: PUSH
38573: LD_INT 2
38575: PUSH
38576: LD_INT 3
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: LD_INT 3
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38597: LD_ADDR_VAR 0 51
38601: PUSH
38602: LD_INT 1
38604: NEG
38605: PUSH
38606: LD_INT 2
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: NEG
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38628: LD_ADDR_VAR 0 52
38632: PUSH
38633: LD_INT 3
38635: NEG
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 3
38647: NEG
38648: PUSH
38649: LD_INT 2
38651: NEG
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38661: LD_ADDR_VAR 0 53
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: LD_INT 3
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: LD_INT 3
38683: NEG
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: LD_INT 2
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: LIST
38704: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38705: LD_ADDR_VAR 0 54
38709: PUSH
38710: LD_INT 2
38712: PUSH
38713: LD_INT 1
38715: NEG
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 3
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 3
38733: PUSH
38734: LD_INT 1
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38746: LD_ADDR_VAR 0 55
38750: PUSH
38751: LD_INT 3
38753: PUSH
38754: LD_INT 2
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 3
38763: PUSH
38764: LD_INT 3
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: LD_INT 3
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38786: LD_ADDR_VAR 0 56
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 3
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: LD_INT 3
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: NEG
38814: PUSH
38815: LD_INT 2
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38827: LD_ADDR_VAR 0 57
38831: PUSH
38832: LD_INT 2
38834: NEG
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 3
38845: NEG
38846: PUSH
38847: LD_INT 0
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 3
38856: NEG
38857: PUSH
38858: LD_INT 1
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38871: LD_ADDR_VAR 0 58
38875: PUSH
38876: LD_INT 2
38878: NEG
38879: PUSH
38880: LD_INT 3
38882: NEG
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 3
38890: NEG
38891: PUSH
38892: LD_INT 2
38894: NEG
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 3
38902: NEG
38903: PUSH
38904: LD_INT 3
38906: NEG
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: LIST
38916: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38917: LD_ADDR_VAR 0 59
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: PUSH
38926: LD_INT 2
38928: NEG
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: LD_INT 2
38939: NEG
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: LIST
38960: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38961: LD_ADDR_VAR 0 60
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: LD_INT 0
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 2
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39002: LD_ADDR_VAR 0 61
39006: PUSH
39007: LD_INT 2
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: LIST
39041: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39042: LD_ADDR_VAR 0 62
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: LD_INT 2
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: LIST
39082: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39083: LD_ADDR_VAR 0 63
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: NEG
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 2
39112: NEG
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39127: LD_ADDR_VAR 0 64
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: LD_INT 2
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 2
39146: NEG
39147: PUSH
39148: LD_INT 1
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 2
39158: NEG
39159: PUSH
39160: LD_INT 2
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: LIST
39172: ST_TO_ADDR
// end ; 2 :
39173: GO 42439
39175: LD_INT 2
39177: DOUBLE
39178: EQUAL
39179: IFTRUE 39183
39181: GO 42438
39183: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39184: LD_ADDR_VAR 0 29
39188: PUSH
39189: LD_INT 4
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 4
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 5
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 5
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 4
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 3
39252: PUSH
39253: LD_INT 1
39255: NEG
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 3
39263: PUSH
39264: LD_INT 2
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 5
39274: PUSH
39275: LD_INT 2
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 3
39284: PUSH
39285: LD_INT 3
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 3
39294: PUSH
39295: LD_INT 2
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 4
39304: PUSH
39305: LD_INT 3
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 4
39314: PUSH
39315: LD_INT 4
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 3
39324: PUSH
39325: LD_INT 4
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: LD_INT 3
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: LD_INT 2
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 4
39354: PUSH
39355: LD_INT 2
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: LD_INT 4
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: LD_INT 4
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 3
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: LD_INT 4
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: LD_INT 5
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: LD_INT 5
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: LD_INT 4
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: LD_INT 3
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: LD_INT 5
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 2
39456: NEG
39457: PUSH
39458: LD_INT 3
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 3
39467: NEG
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 3
39478: NEG
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 2
39490: NEG
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 2
39501: NEG
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 3
39512: NEG
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 4
39523: NEG
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 4
39534: NEG
39535: PUSH
39536: LD_INT 1
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 4
39546: NEG
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 2
39558: NEG
39559: PUSH
39560: LD_INT 2
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 4
39569: NEG
39570: PUSH
39571: LD_INT 4
39573: NEG
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 4
39581: NEG
39582: PUSH
39583: LD_INT 5
39585: NEG
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 3
39593: NEG
39594: PUSH
39595: LD_INT 4
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 3
39605: NEG
39606: PUSH
39607: LD_INT 3
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 4
39617: NEG
39618: PUSH
39619: LD_INT 3
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 5
39629: NEG
39630: PUSH
39631: LD_INT 4
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 5
39641: NEG
39642: PUSH
39643: LD_INT 5
39645: NEG
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 3
39653: NEG
39654: PUSH
39655: LD_INT 5
39657: NEG
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 5
39665: NEG
39666: PUSH
39667: LD_INT 3
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39722: LD_ADDR_VAR 0 30
39726: PUSH
39727: LD_INT 4
39729: PUSH
39730: LD_INT 4
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 4
39739: PUSH
39740: LD_INT 3
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 5
39749: PUSH
39750: LD_INT 4
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 5
39759: PUSH
39760: LD_INT 5
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 4
39769: PUSH
39770: LD_INT 5
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 3
39779: PUSH
39780: LD_INT 4
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 3
39789: PUSH
39790: LD_INT 3
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 5
39799: PUSH
39800: LD_INT 3
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 3
39809: PUSH
39810: LD_INT 5
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: LD_INT 3
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: LD_INT 2
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: LD_INT 3
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: LD_INT 4
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: LD_INT 4
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: LD_INT 3
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: LD_INT 2
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 2
39891: PUSH
39892: LD_INT 4
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 2
39901: NEG
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 4
39912: NEG
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 4
39923: NEG
39924: PUSH
39925: LD_INT 1
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 3
39935: NEG
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 3
39946: NEG
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 4
39957: NEG
39958: PUSH
39959: LD_INT 1
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 5
39968: NEG
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 5
39979: NEG
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 5
39991: NEG
39992: PUSH
39993: LD_INT 2
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 3
40003: NEG
40004: PUSH
40005: LD_INT 2
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 3
40014: NEG
40015: PUSH
40016: LD_INT 3
40018: NEG
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 3
40026: NEG
40027: PUSH
40028: LD_INT 4
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: LD_INT 3
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 2
40050: NEG
40051: PUSH
40052: LD_INT 2
40054: NEG
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 3
40062: NEG
40063: PUSH
40064: LD_INT 2
40066: NEG
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 4
40074: NEG
40075: PUSH
40076: LD_INT 3
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 4
40086: NEG
40087: PUSH
40088: LD_INT 4
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 2
40098: NEG
40099: PUSH
40100: LD_INT 4
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 4
40110: NEG
40111: PUSH
40112: LD_INT 2
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: LD_INT 4
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: LD_INT 5
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: LD_INT 4
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: LD_INT 3
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: LD_INT 3
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: LD_INT 4
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: LD_INT 5
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 2
40201: PUSH
40202: LD_INT 3
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: LD_INT 5
40216: NEG
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40269: LD_ADDR_VAR 0 31
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: LD_INT 4
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: LD_INT 3
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: LD_INT 4
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: LD_INT 5
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 5
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 4
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 3
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: PUSH
40349: LD_INT 5
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 2
40358: NEG
40359: PUSH
40360: LD_INT 3
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 3
40369: NEG
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 3
40380: NEG
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 2
40403: NEG
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 3
40414: NEG
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 4
40425: NEG
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 4
40436: NEG
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 4
40448: NEG
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: LD_INT 2
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 4
40471: NEG
40472: PUSH
40473: LD_INT 4
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 4
40483: NEG
40484: PUSH
40485: LD_INT 5
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 3
40495: NEG
40496: PUSH
40497: LD_INT 4
40499: NEG
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 3
40507: NEG
40508: PUSH
40509: LD_INT 3
40511: NEG
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 4
40519: NEG
40520: PUSH
40521: LD_INT 3
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 5
40531: NEG
40532: PUSH
40533: LD_INT 4
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 5
40543: NEG
40544: PUSH
40545: LD_INT 5
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 3
40555: NEG
40556: PUSH
40557: LD_INT 5
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 5
40567: NEG
40568: PUSH
40569: LD_INT 3
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: LD_INT 3
40582: NEG
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: LD_INT 4
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: LD_INT 3
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: LD_INT 2
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: LD_INT 2
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: LD_INT 3
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: LD_INT 4
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 2
40658: PUSH
40659: LD_INT 2
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 2
40669: NEG
40670: PUSH
40671: LD_INT 4
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 4
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 4
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 5
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 5
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 4
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 3
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 3
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 3
40753: PUSH
40754: LD_INT 2
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 5
40764: PUSH
40765: LD_INT 2
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40819: LD_ADDR_VAR 0 32
40823: PUSH
40824: LD_INT 4
40826: NEG
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 4
40837: NEG
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 3
40849: NEG
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 3
40860: NEG
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 4
40871: NEG
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 5
40882: NEG
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 5
40893: NEG
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 5
40905: NEG
40906: PUSH
40907: LD_INT 2
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 3
40917: NEG
40918: PUSH
40919: LD_INT 2
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 3
40928: NEG
40929: PUSH
40930: LD_INT 3
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 3
40940: NEG
40941: PUSH
40942: LD_INT 4
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 2
40952: NEG
40953: PUSH
40954: LD_INT 3
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 2
40964: NEG
40965: PUSH
40966: LD_INT 2
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 3
40976: NEG
40977: PUSH
40978: LD_INT 2
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 4
40988: NEG
40989: PUSH
40990: LD_INT 3
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 4
41000: NEG
41001: PUSH
41002: LD_INT 4
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: LD_INT 4
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 4
41024: NEG
41025: PUSH
41026: LD_INT 2
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 4
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: LD_INT 5
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: LD_INT 4
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: LD_INT 3
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 3
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: LD_INT 4
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: LD_INT 5
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: LD_INT 3
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: LD_INT 5
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 3
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 3
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 4
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 4
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 3
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 2
41210: PUSH
41211: LD_INT 2
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 4
41221: PUSH
41222: LD_INT 2
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 4
41231: PUSH
41232: LD_INT 4
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 4
41241: PUSH
41242: LD_INT 3
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 5
41251: PUSH
41252: LD_INT 4
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 5
41261: PUSH
41262: LD_INT 5
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 4
41271: PUSH
41272: LD_INT 5
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 3
41281: PUSH
41282: LD_INT 4
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 3
41291: PUSH
41292: LD_INT 3
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 5
41301: PUSH
41302: LD_INT 3
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 3
41311: PUSH
41312: LD_INT 5
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41366: LD_ADDR_VAR 0 33
41370: PUSH
41371: LD_INT 4
41373: NEG
41374: PUSH
41375: LD_INT 4
41377: NEG
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 4
41385: NEG
41386: PUSH
41387: LD_INT 5
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 3
41397: NEG
41398: PUSH
41399: LD_INT 4
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 3
41409: NEG
41410: PUSH
41411: LD_INT 3
41413: NEG
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 4
41421: NEG
41422: PUSH
41423: LD_INT 3
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 5
41433: NEG
41434: PUSH
41435: LD_INT 4
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 5
41445: NEG
41446: PUSH
41447: LD_INT 5
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 3
41457: NEG
41458: PUSH
41459: LD_INT 5
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 5
41469: NEG
41470: PUSH
41471: LD_INT 3
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: LD_INT 3
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 4
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: LD_INT 3
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 1
41514: PUSH
41515: LD_INT 2
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: LD_INT 2
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: LD_INT 3
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: LD_INT 4
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: LD_INT 2
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: LD_INT 4
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 4
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 4
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 5
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 5
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 4
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 3
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 3
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 3
41655: PUSH
41656: LD_INT 2
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 5
41666: PUSH
41667: LD_INT 2
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 3
41676: PUSH
41677: LD_INT 3
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 3
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 4
41696: PUSH
41697: LD_INT 3
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 4
41706: PUSH
41707: LD_INT 4
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 3
41716: PUSH
41717: LD_INT 4
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: LD_INT 3
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 4
41746: PUSH
41747: LD_INT 2
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 2
41756: PUSH
41757: LD_INT 4
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: LD_INT 4
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: LD_INT 3
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: LD_INT 4
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: LD_INT 5
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: LD_INT 5
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: LD_INT 4
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: LD_INT 3
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: LD_INT 5
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: NEG
41849: PUSH
41850: LD_INT 3
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41904: LD_ADDR_VAR 0 34
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: LD_INT 4
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: LD_INT 5
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: LD_INT 4
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: LD_INT 3
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 3
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: LD_INT 4
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: LD_INT 5
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 2
41990: PUSH
41991: LD_INT 3
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 2
42001: NEG
42002: PUSH
42003: LD_INT 5
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 3
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 3
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 4
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 4
42044: PUSH
42045: LD_INT 1
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 3
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 2
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: LD_INT 2
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 4
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 4
42106: PUSH
42107: LD_INT 4
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 4
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 5
42126: PUSH
42127: LD_INT 4
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 5
42136: PUSH
42137: LD_INT 5
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 4
42146: PUSH
42147: LD_INT 5
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 3
42156: PUSH
42157: LD_INT 4
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 3
42166: PUSH
42167: LD_INT 3
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 5
42176: PUSH
42177: LD_INT 3
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 3
42186: PUSH
42187: LD_INT 5
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: LD_INT 3
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: LD_INT 3
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 1
42226: PUSH
42227: LD_INT 4
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: LD_INT 4
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: LD_INT 3
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: LD_INT 2
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 2
42268: PUSH
42269: LD_INT 4
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: LD_INT 2
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 4
42289: NEG
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 4
42300: NEG
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 3
42312: NEG
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 3
42323: NEG
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 4
42334: NEG
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 5
42345: NEG
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 5
42356: NEG
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 5
42368: NEG
42369: PUSH
42370: LD_INT 2
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 3
42380: NEG
42381: PUSH
42382: LD_INT 2
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: ST_TO_ADDR
// end ; end ;
42436: GO 42439
42438: POP
// case btype of b_depot , b_warehouse :
42439: LD_VAR 0 1
42443: PUSH
42444: LD_INT 0
42446: DOUBLE
42447: EQUAL
42448: IFTRUE 42458
42450: LD_INT 1
42452: DOUBLE
42453: EQUAL
42454: IFTRUE 42458
42456: GO 42659
42458: POP
// case nation of nation_american :
42459: LD_VAR 0 5
42463: PUSH
42464: LD_INT 1
42466: DOUBLE
42467: EQUAL
42468: IFTRUE 42472
42470: GO 42528
42472: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42473: LD_ADDR_VAR 0 9
42477: PUSH
42478: LD_VAR 0 11
42482: PUSH
42483: LD_VAR 0 12
42487: PUSH
42488: LD_VAR 0 13
42492: PUSH
42493: LD_VAR 0 14
42497: PUSH
42498: LD_VAR 0 15
42502: PUSH
42503: LD_VAR 0 16
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: PUSH
42516: LD_VAR 0 4
42520: PUSH
42521: LD_INT 1
42523: PLUS
42524: ARRAY
42525: ST_TO_ADDR
42526: GO 42657
42528: LD_INT 2
42530: DOUBLE
42531: EQUAL
42532: IFTRUE 42536
42534: GO 42592
42536: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42537: LD_ADDR_VAR 0 9
42541: PUSH
42542: LD_VAR 0 17
42546: PUSH
42547: LD_VAR 0 18
42551: PUSH
42552: LD_VAR 0 19
42556: PUSH
42557: LD_VAR 0 20
42561: PUSH
42562: LD_VAR 0 21
42566: PUSH
42567: LD_VAR 0 22
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: PUSH
42580: LD_VAR 0 4
42584: PUSH
42585: LD_INT 1
42587: PLUS
42588: ARRAY
42589: ST_TO_ADDR
42590: GO 42657
42592: LD_INT 3
42594: DOUBLE
42595: EQUAL
42596: IFTRUE 42600
42598: GO 42656
42600: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42601: LD_ADDR_VAR 0 9
42605: PUSH
42606: LD_VAR 0 23
42610: PUSH
42611: LD_VAR 0 24
42615: PUSH
42616: LD_VAR 0 25
42620: PUSH
42621: LD_VAR 0 26
42625: PUSH
42626: LD_VAR 0 27
42630: PUSH
42631: LD_VAR 0 28
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: PUSH
42644: LD_VAR 0 4
42648: PUSH
42649: LD_INT 1
42651: PLUS
42652: ARRAY
42653: ST_TO_ADDR
42654: GO 42657
42656: POP
42657: GO 43212
42659: LD_INT 2
42661: DOUBLE
42662: EQUAL
42663: IFTRUE 42673
42665: LD_INT 3
42667: DOUBLE
42668: EQUAL
42669: IFTRUE 42673
42671: GO 42729
42673: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42674: LD_ADDR_VAR 0 9
42678: PUSH
42679: LD_VAR 0 29
42683: PUSH
42684: LD_VAR 0 30
42688: PUSH
42689: LD_VAR 0 31
42693: PUSH
42694: LD_VAR 0 32
42698: PUSH
42699: LD_VAR 0 33
42703: PUSH
42704: LD_VAR 0 34
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: PUSH
42717: LD_VAR 0 4
42721: PUSH
42722: LD_INT 1
42724: PLUS
42725: ARRAY
42726: ST_TO_ADDR
42727: GO 43212
42729: LD_INT 16
42731: DOUBLE
42732: EQUAL
42733: IFTRUE 42791
42735: LD_INT 17
42737: DOUBLE
42738: EQUAL
42739: IFTRUE 42791
42741: LD_INT 18
42743: DOUBLE
42744: EQUAL
42745: IFTRUE 42791
42747: LD_INT 19
42749: DOUBLE
42750: EQUAL
42751: IFTRUE 42791
42753: LD_INT 22
42755: DOUBLE
42756: EQUAL
42757: IFTRUE 42791
42759: LD_INT 20
42761: DOUBLE
42762: EQUAL
42763: IFTRUE 42791
42765: LD_INT 21
42767: DOUBLE
42768: EQUAL
42769: IFTRUE 42791
42771: LD_INT 23
42773: DOUBLE
42774: EQUAL
42775: IFTRUE 42791
42777: LD_INT 24
42779: DOUBLE
42780: EQUAL
42781: IFTRUE 42791
42783: LD_INT 25
42785: DOUBLE
42786: EQUAL
42787: IFTRUE 42791
42789: GO 42847
42791: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42792: LD_ADDR_VAR 0 9
42796: PUSH
42797: LD_VAR 0 35
42801: PUSH
42802: LD_VAR 0 36
42806: PUSH
42807: LD_VAR 0 37
42811: PUSH
42812: LD_VAR 0 38
42816: PUSH
42817: LD_VAR 0 39
42821: PUSH
42822: LD_VAR 0 40
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: PUSH
42835: LD_VAR 0 4
42839: PUSH
42840: LD_INT 1
42842: PLUS
42843: ARRAY
42844: ST_TO_ADDR
42845: GO 43212
42847: LD_INT 6
42849: DOUBLE
42850: EQUAL
42851: IFTRUE 42903
42853: LD_INT 7
42855: DOUBLE
42856: EQUAL
42857: IFTRUE 42903
42859: LD_INT 8
42861: DOUBLE
42862: EQUAL
42863: IFTRUE 42903
42865: LD_INT 13
42867: DOUBLE
42868: EQUAL
42869: IFTRUE 42903
42871: LD_INT 12
42873: DOUBLE
42874: EQUAL
42875: IFTRUE 42903
42877: LD_INT 15
42879: DOUBLE
42880: EQUAL
42881: IFTRUE 42903
42883: LD_INT 11
42885: DOUBLE
42886: EQUAL
42887: IFTRUE 42903
42889: LD_INT 14
42891: DOUBLE
42892: EQUAL
42893: IFTRUE 42903
42895: LD_INT 10
42897: DOUBLE
42898: EQUAL
42899: IFTRUE 42903
42901: GO 42959
42903: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42904: LD_ADDR_VAR 0 9
42908: PUSH
42909: LD_VAR 0 41
42913: PUSH
42914: LD_VAR 0 42
42918: PUSH
42919: LD_VAR 0 43
42923: PUSH
42924: LD_VAR 0 44
42928: PUSH
42929: LD_VAR 0 45
42933: PUSH
42934: LD_VAR 0 46
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: PUSH
42947: LD_VAR 0 4
42951: PUSH
42952: LD_INT 1
42954: PLUS
42955: ARRAY
42956: ST_TO_ADDR
42957: GO 43212
42959: LD_INT 36
42961: DOUBLE
42962: EQUAL
42963: IFTRUE 42967
42965: GO 43023
42967: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42968: LD_ADDR_VAR 0 9
42972: PUSH
42973: LD_VAR 0 47
42977: PUSH
42978: LD_VAR 0 48
42982: PUSH
42983: LD_VAR 0 49
42987: PUSH
42988: LD_VAR 0 50
42992: PUSH
42993: LD_VAR 0 51
42997: PUSH
42998: LD_VAR 0 52
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: PUSH
43011: LD_VAR 0 4
43015: PUSH
43016: LD_INT 1
43018: PLUS
43019: ARRAY
43020: ST_TO_ADDR
43021: GO 43212
43023: LD_INT 4
43025: DOUBLE
43026: EQUAL
43027: IFTRUE 43049
43029: LD_INT 5
43031: DOUBLE
43032: EQUAL
43033: IFTRUE 43049
43035: LD_INT 34
43037: DOUBLE
43038: EQUAL
43039: IFTRUE 43049
43041: LD_INT 37
43043: DOUBLE
43044: EQUAL
43045: IFTRUE 43049
43047: GO 43105
43049: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43050: LD_ADDR_VAR 0 9
43054: PUSH
43055: LD_VAR 0 53
43059: PUSH
43060: LD_VAR 0 54
43064: PUSH
43065: LD_VAR 0 55
43069: PUSH
43070: LD_VAR 0 56
43074: PUSH
43075: LD_VAR 0 57
43079: PUSH
43080: LD_VAR 0 58
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: PUSH
43093: LD_VAR 0 4
43097: PUSH
43098: LD_INT 1
43100: PLUS
43101: ARRAY
43102: ST_TO_ADDR
43103: GO 43212
43105: LD_INT 31
43107: DOUBLE
43108: EQUAL
43109: IFTRUE 43155
43111: LD_INT 32
43113: DOUBLE
43114: EQUAL
43115: IFTRUE 43155
43117: LD_INT 33
43119: DOUBLE
43120: EQUAL
43121: IFTRUE 43155
43123: LD_INT 27
43125: DOUBLE
43126: EQUAL
43127: IFTRUE 43155
43129: LD_INT 26
43131: DOUBLE
43132: EQUAL
43133: IFTRUE 43155
43135: LD_INT 28
43137: DOUBLE
43138: EQUAL
43139: IFTRUE 43155
43141: LD_INT 29
43143: DOUBLE
43144: EQUAL
43145: IFTRUE 43155
43147: LD_INT 30
43149: DOUBLE
43150: EQUAL
43151: IFTRUE 43155
43153: GO 43211
43155: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43156: LD_ADDR_VAR 0 9
43160: PUSH
43161: LD_VAR 0 59
43165: PUSH
43166: LD_VAR 0 60
43170: PUSH
43171: LD_VAR 0 61
43175: PUSH
43176: LD_VAR 0 62
43180: PUSH
43181: LD_VAR 0 63
43185: PUSH
43186: LD_VAR 0 64
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: PUSH
43199: LD_VAR 0 4
43203: PUSH
43204: LD_INT 1
43206: PLUS
43207: ARRAY
43208: ST_TO_ADDR
43209: GO 43212
43211: POP
// temp_list2 = [ ] ;
43212: LD_ADDR_VAR 0 10
43216: PUSH
43217: EMPTY
43218: ST_TO_ADDR
// for i in temp_list do
43219: LD_ADDR_VAR 0 8
43223: PUSH
43224: LD_VAR 0 9
43228: PUSH
43229: FOR_IN
43230: IFFALSE 43282
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43232: LD_ADDR_VAR 0 10
43236: PUSH
43237: LD_VAR 0 10
43241: PUSH
43242: LD_VAR 0 8
43246: PUSH
43247: LD_INT 1
43249: ARRAY
43250: PUSH
43251: LD_VAR 0 2
43255: PLUS
43256: PUSH
43257: LD_VAR 0 8
43261: PUSH
43262: LD_INT 2
43264: ARRAY
43265: PUSH
43266: LD_VAR 0 3
43270: PLUS
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: EMPTY
43277: LIST
43278: ADD
43279: ST_TO_ADDR
43280: GO 43229
43282: POP
43283: POP
// result = temp_list2 ;
43284: LD_ADDR_VAR 0 7
43288: PUSH
43289: LD_VAR 0 10
43293: ST_TO_ADDR
// end ;
43294: LD_VAR 0 7
43298: RET
// export function EnemyInRange ( unit , dist ) ; begin
43299: LD_INT 0
43301: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43302: LD_ADDR_VAR 0 3
43306: PUSH
43307: LD_VAR 0 1
43311: PPUSH
43312: CALL_OW 255
43316: PPUSH
43317: LD_VAR 0 1
43321: PPUSH
43322: CALL_OW 250
43326: PPUSH
43327: LD_VAR 0 1
43331: PPUSH
43332: CALL_OW 251
43336: PPUSH
43337: LD_VAR 0 2
43341: PPUSH
43342: CALL 16556 0 4
43346: PUSH
43347: LD_INT 4
43349: ARRAY
43350: ST_TO_ADDR
// end ;
43351: LD_VAR 0 3
43355: RET
// export function PlayerSeeMe ( unit ) ; begin
43356: LD_INT 0
43358: PPUSH
// result := See ( your_side , unit ) ;
43359: LD_ADDR_VAR 0 2
43363: PUSH
43364: LD_OWVAR 2
43368: PPUSH
43369: LD_VAR 0 1
43373: PPUSH
43374: CALL_OW 292
43378: ST_TO_ADDR
// end ;
43379: LD_VAR 0 2
43383: RET
// export function ReverseDir ( unit ) ; begin
43384: LD_INT 0
43386: PPUSH
// if not unit then
43387: LD_VAR 0 1
43391: NOT
43392: IFFALSE 43396
// exit ;
43394: GO 43419
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43396: LD_ADDR_VAR 0 2
43400: PUSH
43401: LD_VAR 0 1
43405: PPUSH
43406: CALL_OW 254
43410: PUSH
43411: LD_INT 3
43413: PLUS
43414: PUSH
43415: LD_INT 6
43417: MOD
43418: ST_TO_ADDR
// end ;
43419: LD_VAR 0 2
43423: RET
// export function ReverseArray ( array ) ; var i ; begin
43424: LD_INT 0
43426: PPUSH
43427: PPUSH
// if not array then
43428: LD_VAR 0 1
43432: NOT
43433: IFFALSE 43437
// exit ;
43435: GO 43492
// result := [ ] ;
43437: LD_ADDR_VAR 0 2
43441: PUSH
43442: EMPTY
43443: ST_TO_ADDR
// for i := array downto 1 do
43444: LD_ADDR_VAR 0 3
43448: PUSH
43449: DOUBLE
43450: LD_VAR 0 1
43454: INC
43455: ST_TO_ADDR
43456: LD_INT 1
43458: PUSH
43459: FOR_DOWNTO
43460: IFFALSE 43490
// result := Join ( result , array [ i ] ) ;
43462: LD_ADDR_VAR 0 2
43466: PUSH
43467: LD_VAR 0 2
43471: PPUSH
43472: LD_VAR 0 1
43476: PUSH
43477: LD_VAR 0 3
43481: ARRAY
43482: PPUSH
43483: CALL 48334 0 2
43487: ST_TO_ADDR
43488: GO 43459
43490: POP
43491: POP
// end ;
43492: LD_VAR 0 2
43496: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43497: LD_INT 0
43499: PPUSH
43500: PPUSH
43501: PPUSH
43502: PPUSH
43503: PPUSH
43504: PPUSH
// if not unit or not hexes then
43505: LD_VAR 0 1
43509: NOT
43510: IFTRUE 43519
43512: PUSH
43513: LD_VAR 0 2
43517: NOT
43518: OR
43519: IFFALSE 43523
// exit ;
43521: GO 43646
// dist := 9999 ;
43523: LD_ADDR_VAR 0 5
43527: PUSH
43528: LD_INT 9999
43530: ST_TO_ADDR
// for i = 1 to hexes do
43531: LD_ADDR_VAR 0 4
43535: PUSH
43536: DOUBLE
43537: LD_INT 1
43539: DEC
43540: ST_TO_ADDR
43541: LD_VAR 0 2
43545: PUSH
43546: FOR_TO
43547: IFFALSE 43634
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43549: LD_ADDR_VAR 0 6
43553: PUSH
43554: LD_VAR 0 1
43558: PPUSH
43559: LD_VAR 0 2
43563: PUSH
43564: LD_VAR 0 4
43568: ARRAY
43569: PUSH
43570: LD_INT 1
43572: ARRAY
43573: PPUSH
43574: LD_VAR 0 2
43578: PUSH
43579: LD_VAR 0 4
43583: ARRAY
43584: PUSH
43585: LD_INT 2
43587: ARRAY
43588: PPUSH
43589: CALL_OW 297
43593: ST_TO_ADDR
// if tdist < dist then
43594: LD_VAR 0 6
43598: PUSH
43599: LD_VAR 0 5
43603: LESS
43604: IFFALSE 43632
// begin hex := hexes [ i ] ;
43606: LD_ADDR_VAR 0 8
43610: PUSH
43611: LD_VAR 0 2
43615: PUSH
43616: LD_VAR 0 4
43620: ARRAY
43621: ST_TO_ADDR
// dist := tdist ;
43622: LD_ADDR_VAR 0 5
43626: PUSH
43627: LD_VAR 0 6
43631: ST_TO_ADDR
// end ; end ;
43632: GO 43546
43634: POP
43635: POP
// result := hex ;
43636: LD_ADDR_VAR 0 3
43640: PUSH
43641: LD_VAR 0 8
43645: ST_TO_ADDR
// end ;
43646: LD_VAR 0 3
43650: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43651: LD_INT 0
43653: PPUSH
43654: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43655: LD_VAR 0 1
43659: NOT
43660: IFTRUE 43699
43662: PUSH
43663: LD_VAR 0 1
43667: PUSH
43668: LD_INT 21
43670: PUSH
43671: LD_INT 2
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 23
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PPUSH
43692: CALL_OW 69
43696: IN
43697: NOT
43698: OR
43699: IFFALSE 43703
// exit ;
43701: GO 43750
// for i = 1 to 3 do
43703: LD_ADDR_VAR 0 3
43707: PUSH
43708: DOUBLE
43709: LD_INT 1
43711: DEC
43712: ST_TO_ADDR
43713: LD_INT 3
43715: PUSH
43716: FOR_TO
43717: IFFALSE 43748
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43719: LD_VAR 0 1
43723: PPUSH
43724: CALL_OW 250
43728: PPUSH
43729: LD_VAR 0 1
43733: PPUSH
43734: CALL_OW 251
43738: PPUSH
43739: LD_INT 1
43741: PPUSH
43742: CALL_OW 453
43746: GO 43716
43748: POP
43749: POP
// end ;
43750: LD_VAR 0 2
43754: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43755: LD_INT 0
43757: PPUSH
43758: PPUSH
43759: PPUSH
43760: PPUSH
43761: PPUSH
43762: PPUSH
// if not unit or not enemy_unit then
43763: LD_VAR 0 1
43767: NOT
43768: IFTRUE 43777
43770: PUSH
43771: LD_VAR 0 2
43775: NOT
43776: OR
43777: IFFALSE 43781
// exit ;
43779: GO 44252
// if GetLives ( i ) < 250 then
43781: LD_VAR 0 4
43785: PPUSH
43786: CALL_OW 256
43790: PUSH
43791: LD_INT 250
43793: LESS
43794: IFFALSE 43807
// begin ComAutodestruct ( i ) ;
43796: LD_VAR 0 4
43800: PPUSH
43801: CALL 43651 0 1
// exit ;
43805: GO 44252
// end ; x := GetX ( enemy_unit ) ;
43807: LD_ADDR_VAR 0 7
43811: PUSH
43812: LD_VAR 0 2
43816: PPUSH
43817: CALL_OW 250
43821: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43822: LD_ADDR_VAR 0 8
43826: PUSH
43827: LD_VAR 0 2
43831: PPUSH
43832: CALL_OW 251
43836: ST_TO_ADDR
// if not x or not y then
43837: LD_VAR 0 7
43841: NOT
43842: IFTRUE 43851
43844: PUSH
43845: LD_VAR 0 8
43849: NOT
43850: OR
43851: IFFALSE 43855
// exit ;
43853: GO 44252
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43855: LD_ADDR_VAR 0 6
43859: PUSH
43860: LD_VAR 0 7
43864: PPUSH
43865: LD_INT 0
43867: PPUSH
43868: LD_INT 4
43870: PPUSH
43871: CALL_OW 272
43875: PUSH
43876: LD_VAR 0 8
43880: PPUSH
43881: LD_INT 0
43883: PPUSH
43884: LD_INT 4
43886: PPUSH
43887: CALL_OW 273
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_VAR 0 7
43900: PPUSH
43901: LD_INT 1
43903: PPUSH
43904: LD_INT 4
43906: PPUSH
43907: CALL_OW 272
43911: PUSH
43912: LD_VAR 0 8
43916: PPUSH
43917: LD_INT 1
43919: PPUSH
43920: LD_INT 4
43922: PPUSH
43923: CALL_OW 273
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_VAR 0 7
43936: PPUSH
43937: LD_INT 2
43939: PPUSH
43940: LD_INT 4
43942: PPUSH
43943: CALL_OW 272
43947: PUSH
43948: LD_VAR 0 8
43952: PPUSH
43953: LD_INT 2
43955: PPUSH
43956: LD_INT 4
43958: PPUSH
43959: CALL_OW 273
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_VAR 0 7
43972: PPUSH
43973: LD_INT 3
43975: PPUSH
43976: LD_INT 4
43978: PPUSH
43979: CALL_OW 272
43983: PUSH
43984: LD_VAR 0 8
43988: PPUSH
43989: LD_INT 3
43991: PPUSH
43992: LD_INT 4
43994: PPUSH
43995: CALL_OW 273
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_VAR 0 7
44008: PPUSH
44009: LD_INT 4
44011: PPUSH
44012: LD_INT 4
44014: PPUSH
44015: CALL_OW 272
44019: PUSH
44020: LD_VAR 0 8
44024: PPUSH
44025: LD_INT 4
44027: PPUSH
44028: LD_INT 4
44030: PPUSH
44031: CALL_OW 273
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_VAR 0 7
44044: PPUSH
44045: LD_INT 5
44047: PPUSH
44048: LD_INT 4
44050: PPUSH
44051: CALL_OW 272
44055: PUSH
44056: LD_VAR 0 8
44060: PPUSH
44061: LD_INT 5
44063: PPUSH
44064: LD_INT 4
44066: PPUSH
44067: CALL_OW 273
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: ST_TO_ADDR
// for i = tmp downto 1 do
44084: LD_ADDR_VAR 0 4
44088: PUSH
44089: DOUBLE
44090: LD_VAR 0 6
44094: INC
44095: ST_TO_ADDR
44096: LD_INT 1
44098: PUSH
44099: FOR_DOWNTO
44100: IFFALSE 44203
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44102: LD_VAR 0 6
44106: PUSH
44107: LD_VAR 0 4
44111: ARRAY
44112: PUSH
44113: LD_INT 1
44115: ARRAY
44116: PPUSH
44117: LD_VAR 0 6
44121: PUSH
44122: LD_VAR 0 4
44126: ARRAY
44127: PUSH
44128: LD_INT 2
44130: ARRAY
44131: PPUSH
44132: CALL_OW 488
44136: NOT
44137: IFTRUE 44179
44139: PUSH
44140: LD_VAR 0 6
44144: PUSH
44145: LD_VAR 0 4
44149: ARRAY
44150: PUSH
44151: LD_INT 1
44153: ARRAY
44154: PPUSH
44155: LD_VAR 0 6
44159: PUSH
44160: LD_VAR 0 4
44164: ARRAY
44165: PUSH
44166: LD_INT 2
44168: ARRAY
44169: PPUSH
44170: CALL_OW 428
44174: PUSH
44175: LD_INT 0
44177: NONEQUAL
44178: OR
44179: IFFALSE 44201
// tmp := Delete ( tmp , i ) ;
44181: LD_ADDR_VAR 0 6
44185: PUSH
44186: LD_VAR 0 6
44190: PPUSH
44191: LD_VAR 0 4
44195: PPUSH
44196: CALL_OW 3
44200: ST_TO_ADDR
44201: GO 44099
44203: POP
44204: POP
// j := GetClosestHex ( unit , tmp ) ;
44205: LD_ADDR_VAR 0 5
44209: PUSH
44210: LD_VAR 0 1
44214: PPUSH
44215: LD_VAR 0 6
44219: PPUSH
44220: CALL 43497 0 2
44224: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44225: LD_VAR 0 1
44229: PPUSH
44230: LD_VAR 0 5
44234: PUSH
44235: LD_INT 1
44237: ARRAY
44238: PPUSH
44239: LD_VAR 0 5
44243: PUSH
44244: LD_INT 2
44246: ARRAY
44247: PPUSH
44248: CALL_OW 111
// end ;
44252: LD_VAR 0 3
44256: RET
// export function PrepareApemanSoldier ( ) ; begin
44257: LD_INT 0
44259: PPUSH
// uc_nation := 0 ;
44260: LD_ADDR_OWVAR 21
44264: PUSH
44265: LD_INT 0
44267: ST_TO_ADDR
// hc_sex := sex_male ;
44268: LD_ADDR_OWVAR 27
44272: PUSH
44273: LD_INT 1
44275: ST_TO_ADDR
// hc_name :=  ;
44276: LD_ADDR_OWVAR 26
44280: PUSH
44281: LD_STRING 
44283: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44284: LD_ADDR_OWVAR 28
44288: PUSH
44289: LD_INT 15
44291: ST_TO_ADDR
// hc_gallery :=  ;
44292: LD_ADDR_OWVAR 33
44296: PUSH
44297: LD_STRING 
44299: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44300: LD_ADDR_OWVAR 31
44304: PUSH
44305: LD_INT 0
44307: PPUSH
44308: LD_INT 3
44310: PPUSH
44311: CALL_OW 12
44315: PUSH
44316: LD_INT 0
44318: PPUSH
44319: LD_INT 3
44321: PPUSH
44322: CALL_OW 12
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44339: LD_ADDR_OWVAR 29
44343: PUSH
44344: LD_INT 12
44346: PUSH
44347: LD_INT 12
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: ST_TO_ADDR
// end ;
44354: LD_VAR 0 1
44358: RET
// export function PrepareApemanEngineer ( ) ; begin
44359: LD_INT 0
44361: PPUSH
// uc_nation := 0 ;
44362: LD_ADDR_OWVAR 21
44366: PUSH
44367: LD_INT 0
44369: ST_TO_ADDR
// hc_sex := sex_male ;
44370: LD_ADDR_OWVAR 27
44374: PUSH
44375: LD_INT 1
44377: ST_TO_ADDR
// hc_name :=  ;
44378: LD_ADDR_OWVAR 26
44382: PUSH
44383: LD_STRING 
44385: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44386: LD_ADDR_OWVAR 28
44390: PUSH
44391: LD_INT 16
44393: ST_TO_ADDR
// hc_gallery :=  ;
44394: LD_ADDR_OWVAR 33
44398: PUSH
44399: LD_STRING 
44401: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44402: LD_ADDR_OWVAR 31
44406: PUSH
44407: LD_INT 0
44409: PPUSH
44410: LD_INT 3
44412: PPUSH
44413: CALL_OW 12
44417: PUSH
44418: LD_INT 0
44420: PPUSH
44421: LD_INT 3
44423: PPUSH
44424: CALL_OW 12
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44441: LD_ADDR_OWVAR 29
44445: PUSH
44446: LD_INT 12
44448: PUSH
44449: LD_INT 12
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: ST_TO_ADDR
// end ;
44456: LD_VAR 0 1
44460: RET
// export function PrepareApeman ( agressivity ) ; begin
44461: LD_INT 0
44463: PPUSH
// uc_side := 0 ;
44464: LD_ADDR_OWVAR 20
44468: PUSH
44469: LD_INT 0
44471: ST_TO_ADDR
// uc_nation := 0 ;
44472: LD_ADDR_OWVAR 21
44476: PUSH
44477: LD_INT 0
44479: ST_TO_ADDR
// hc_sex := sex_male ;
44480: LD_ADDR_OWVAR 27
44484: PUSH
44485: LD_INT 1
44487: ST_TO_ADDR
// hc_class := class_apeman ;
44488: LD_ADDR_OWVAR 28
44492: PUSH
44493: LD_INT 12
44495: ST_TO_ADDR
// hc_gallery :=  ;
44496: LD_ADDR_OWVAR 33
44500: PUSH
44501: LD_STRING 
44503: ST_TO_ADDR
// hc_name :=  ;
44504: LD_ADDR_OWVAR 26
44508: PUSH
44509: LD_STRING 
44511: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44512: LD_ADDR_OWVAR 29
44516: PUSH
44517: LD_INT 12
44519: PUSH
44520: LD_INT 12
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: ST_TO_ADDR
// if agressivity = 0 then
44527: LD_VAR 0 1
44531: PUSH
44532: LD_INT 0
44534: EQUAL
44535: IFFALSE 44547
// hc_agressivity := 0 else
44537: LD_ADDR_OWVAR 35
44541: PUSH
44542: LD_INT 0
44544: ST_TO_ADDR
44545: GO 44568
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44547: LD_ADDR_OWVAR 35
44551: PUSH
44552: LD_VAR 0 1
44556: NEG
44557: PPUSH
44558: LD_VAR 0 1
44562: PPUSH
44563: CALL_OW 12
44567: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44568: LD_ADDR_OWVAR 31
44572: PUSH
44573: LD_INT 0
44575: PPUSH
44576: LD_INT 3
44578: PPUSH
44579: CALL_OW 12
44583: PUSH
44584: LD_INT 0
44586: PPUSH
44587: LD_INT 3
44589: PPUSH
44590: CALL_OW 12
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: ST_TO_ADDR
// end ;
44607: LD_VAR 0 2
44611: RET
// export function PrepareTiger ( agressivity ) ; begin
44612: LD_INT 0
44614: PPUSH
// uc_side := 0 ;
44615: LD_ADDR_OWVAR 20
44619: PUSH
44620: LD_INT 0
44622: ST_TO_ADDR
// uc_nation := 0 ;
44623: LD_ADDR_OWVAR 21
44627: PUSH
44628: LD_INT 0
44630: ST_TO_ADDR
// InitHc ;
44631: CALL_OW 19
// hc_class := class_tiger ;
44635: LD_ADDR_OWVAR 28
44639: PUSH
44640: LD_INT 14
44642: ST_TO_ADDR
// hc_gallery :=  ;
44643: LD_ADDR_OWVAR 33
44647: PUSH
44648: LD_STRING 
44650: ST_TO_ADDR
// hc_name :=  ;
44651: LD_ADDR_OWVAR 26
44655: PUSH
44656: LD_STRING 
44658: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44659: LD_ADDR_OWVAR 35
44663: PUSH
44664: LD_VAR 0 1
44668: NEG
44669: PPUSH
44670: LD_VAR 0 1
44674: PPUSH
44675: CALL_OW 12
44679: ST_TO_ADDR
// end ;
44680: LD_VAR 0 2
44684: RET
// export function PrepareEnchidna ( ) ; begin
44685: LD_INT 0
44687: PPUSH
// uc_side := 0 ;
44688: LD_ADDR_OWVAR 20
44692: PUSH
44693: LD_INT 0
44695: ST_TO_ADDR
// uc_nation := 0 ;
44696: LD_ADDR_OWVAR 21
44700: PUSH
44701: LD_INT 0
44703: ST_TO_ADDR
// InitHc ;
44704: CALL_OW 19
// hc_class := class_baggie ;
44708: LD_ADDR_OWVAR 28
44712: PUSH
44713: LD_INT 13
44715: ST_TO_ADDR
// hc_gallery :=  ;
44716: LD_ADDR_OWVAR 33
44720: PUSH
44721: LD_STRING 
44723: ST_TO_ADDR
// hc_name :=  ;
44724: LD_ADDR_OWVAR 26
44728: PUSH
44729: LD_STRING 
44731: ST_TO_ADDR
// end ;
44732: LD_VAR 0 1
44736: RET
// export function PrepareFrog ( ) ; begin
44737: LD_INT 0
44739: PPUSH
// uc_side := 0 ;
44740: LD_ADDR_OWVAR 20
44744: PUSH
44745: LD_INT 0
44747: ST_TO_ADDR
// uc_nation := 0 ;
44748: LD_ADDR_OWVAR 21
44752: PUSH
44753: LD_INT 0
44755: ST_TO_ADDR
// InitHc ;
44756: CALL_OW 19
// hc_class := class_frog ;
44760: LD_ADDR_OWVAR 28
44764: PUSH
44765: LD_INT 19
44767: ST_TO_ADDR
// hc_gallery :=  ;
44768: LD_ADDR_OWVAR 33
44772: PUSH
44773: LD_STRING 
44775: ST_TO_ADDR
// hc_name :=  ;
44776: LD_ADDR_OWVAR 26
44780: PUSH
44781: LD_STRING 
44783: ST_TO_ADDR
// end ;
44784: LD_VAR 0 1
44788: RET
// export function PrepareFish ( ) ; begin
44789: LD_INT 0
44791: PPUSH
// uc_side := 0 ;
44792: LD_ADDR_OWVAR 20
44796: PUSH
44797: LD_INT 0
44799: ST_TO_ADDR
// uc_nation := 0 ;
44800: LD_ADDR_OWVAR 21
44804: PUSH
44805: LD_INT 0
44807: ST_TO_ADDR
// InitHc ;
44808: CALL_OW 19
// hc_class := class_fish ;
44812: LD_ADDR_OWVAR 28
44816: PUSH
44817: LD_INT 20
44819: ST_TO_ADDR
// hc_gallery :=  ;
44820: LD_ADDR_OWVAR 33
44824: PUSH
44825: LD_STRING 
44827: ST_TO_ADDR
// hc_name :=  ;
44828: LD_ADDR_OWVAR 26
44832: PUSH
44833: LD_STRING 
44835: ST_TO_ADDR
// end ;
44836: LD_VAR 0 1
44840: RET
// export function PrepareBird ( ) ; begin
44841: LD_INT 0
44843: PPUSH
// uc_side := 0 ;
44844: LD_ADDR_OWVAR 20
44848: PUSH
44849: LD_INT 0
44851: ST_TO_ADDR
// uc_nation := 0 ;
44852: LD_ADDR_OWVAR 21
44856: PUSH
44857: LD_INT 0
44859: ST_TO_ADDR
// InitHc ;
44860: CALL_OW 19
// hc_class := class_phororhacos ;
44864: LD_ADDR_OWVAR 28
44868: PUSH
44869: LD_INT 18
44871: ST_TO_ADDR
// hc_gallery :=  ;
44872: LD_ADDR_OWVAR 33
44876: PUSH
44877: LD_STRING 
44879: ST_TO_ADDR
// hc_name :=  ;
44880: LD_ADDR_OWVAR 26
44884: PUSH
44885: LD_STRING 
44887: ST_TO_ADDR
// end ;
44888: LD_VAR 0 1
44892: RET
// export function PrepareHorse ( ) ; begin
44893: LD_INT 0
44895: PPUSH
// uc_side := 0 ;
44896: LD_ADDR_OWVAR 20
44900: PUSH
44901: LD_INT 0
44903: ST_TO_ADDR
// uc_nation := 0 ;
44904: LD_ADDR_OWVAR 21
44908: PUSH
44909: LD_INT 0
44911: ST_TO_ADDR
// InitHc ;
44912: CALL_OW 19
// hc_class := class_horse ;
44916: LD_ADDR_OWVAR 28
44920: PUSH
44921: LD_INT 21
44923: ST_TO_ADDR
// hc_gallery :=  ;
44924: LD_ADDR_OWVAR 33
44928: PUSH
44929: LD_STRING 
44931: ST_TO_ADDR
// hc_name :=  ;
44932: LD_ADDR_OWVAR 26
44936: PUSH
44937: LD_STRING 
44939: ST_TO_ADDR
// end ;
44940: LD_VAR 0 1
44944: RET
// export function PrepareMastodont ( ) ; begin
44945: LD_INT 0
44947: PPUSH
// uc_side := 0 ;
44948: LD_ADDR_OWVAR 20
44952: PUSH
44953: LD_INT 0
44955: ST_TO_ADDR
// uc_nation := 0 ;
44956: LD_ADDR_OWVAR 21
44960: PUSH
44961: LD_INT 0
44963: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44964: LD_ADDR_OWVAR 37
44968: PUSH
44969: LD_INT 31
44971: ST_TO_ADDR
// vc_control := control_rider ;
44972: LD_ADDR_OWVAR 38
44976: PUSH
44977: LD_INT 4
44979: ST_TO_ADDR
// end ;
44980: LD_VAR 0 1
44984: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44985: LD_INT 0
44987: PPUSH
44988: PPUSH
44989: PPUSH
// uc_side = 0 ;
44990: LD_ADDR_OWVAR 20
44994: PUSH
44995: LD_INT 0
44997: ST_TO_ADDR
// uc_nation = 0 ;
44998: LD_ADDR_OWVAR 21
45002: PUSH
45003: LD_INT 0
45005: ST_TO_ADDR
// InitHc_All ( ) ;
45006: CALL_OW 584
// InitVc ;
45010: CALL_OW 20
// if mastodonts then
45014: LD_VAR 0 6
45018: IFFALSE 45085
// for i = 1 to mastodonts do
45020: LD_ADDR_VAR 0 11
45024: PUSH
45025: DOUBLE
45026: LD_INT 1
45028: DEC
45029: ST_TO_ADDR
45030: LD_VAR 0 6
45034: PUSH
45035: FOR_TO
45036: IFFALSE 45083
// begin vc_chassis := 31 ;
45038: LD_ADDR_OWVAR 37
45042: PUSH
45043: LD_INT 31
45045: ST_TO_ADDR
// vc_control := control_rider ;
45046: LD_ADDR_OWVAR 38
45050: PUSH
45051: LD_INT 4
45053: ST_TO_ADDR
// animal := CreateVehicle ;
45054: LD_ADDR_VAR 0 12
45058: PUSH
45059: CALL_OW 45
45063: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45064: LD_VAR 0 12
45068: PPUSH
45069: LD_VAR 0 8
45073: PPUSH
45074: LD_INT 0
45076: PPUSH
45077: CALL 47227 0 3
// end ;
45081: GO 45035
45083: POP
45084: POP
// if horses then
45085: LD_VAR 0 5
45089: IFFALSE 45156
// for i = 1 to horses do
45091: LD_ADDR_VAR 0 11
45095: PUSH
45096: DOUBLE
45097: LD_INT 1
45099: DEC
45100: ST_TO_ADDR
45101: LD_VAR 0 5
45105: PUSH
45106: FOR_TO
45107: IFFALSE 45154
// begin hc_class := 21 ;
45109: LD_ADDR_OWVAR 28
45113: PUSH
45114: LD_INT 21
45116: ST_TO_ADDR
// hc_gallery :=  ;
45117: LD_ADDR_OWVAR 33
45121: PUSH
45122: LD_STRING 
45124: ST_TO_ADDR
// animal := CreateHuman ;
45125: LD_ADDR_VAR 0 12
45129: PUSH
45130: CALL_OW 44
45134: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45135: LD_VAR 0 12
45139: PPUSH
45140: LD_VAR 0 8
45144: PPUSH
45145: LD_INT 0
45147: PPUSH
45148: CALL 47227 0 3
// end ;
45152: GO 45106
45154: POP
45155: POP
// if birds then
45156: LD_VAR 0 1
45160: IFFALSE 45227
// for i = 1 to birds do
45162: LD_ADDR_VAR 0 11
45166: PUSH
45167: DOUBLE
45168: LD_INT 1
45170: DEC
45171: ST_TO_ADDR
45172: LD_VAR 0 1
45176: PUSH
45177: FOR_TO
45178: IFFALSE 45225
// begin hc_class := 18 ;
45180: LD_ADDR_OWVAR 28
45184: PUSH
45185: LD_INT 18
45187: ST_TO_ADDR
// hc_gallery =  ;
45188: LD_ADDR_OWVAR 33
45192: PUSH
45193: LD_STRING 
45195: ST_TO_ADDR
// animal := CreateHuman ;
45196: LD_ADDR_VAR 0 12
45200: PUSH
45201: CALL_OW 44
45205: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45206: LD_VAR 0 12
45210: PPUSH
45211: LD_VAR 0 8
45215: PPUSH
45216: LD_INT 0
45218: PPUSH
45219: CALL 47227 0 3
// end ;
45223: GO 45177
45225: POP
45226: POP
// if tigers then
45227: LD_VAR 0 2
45231: IFFALSE 45315
// for i = 1 to tigers do
45233: LD_ADDR_VAR 0 11
45237: PUSH
45238: DOUBLE
45239: LD_INT 1
45241: DEC
45242: ST_TO_ADDR
45243: LD_VAR 0 2
45247: PUSH
45248: FOR_TO
45249: IFFALSE 45313
// begin hc_class = class_tiger ;
45251: LD_ADDR_OWVAR 28
45255: PUSH
45256: LD_INT 14
45258: ST_TO_ADDR
// hc_gallery =  ;
45259: LD_ADDR_OWVAR 33
45263: PUSH
45264: LD_STRING 
45266: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45267: LD_ADDR_OWVAR 35
45271: PUSH
45272: LD_INT 7
45274: NEG
45275: PPUSH
45276: LD_INT 7
45278: PPUSH
45279: CALL_OW 12
45283: ST_TO_ADDR
// animal := CreateHuman ;
45284: LD_ADDR_VAR 0 12
45288: PUSH
45289: CALL_OW 44
45293: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45294: LD_VAR 0 12
45298: PPUSH
45299: LD_VAR 0 8
45303: PPUSH
45304: LD_INT 0
45306: PPUSH
45307: CALL 47227 0 3
// end ;
45311: GO 45248
45313: POP
45314: POP
// if apemans then
45315: LD_VAR 0 3
45319: IFFALSE 45442
// for i = 1 to apemans do
45321: LD_ADDR_VAR 0 11
45325: PUSH
45326: DOUBLE
45327: LD_INT 1
45329: DEC
45330: ST_TO_ADDR
45331: LD_VAR 0 3
45335: PUSH
45336: FOR_TO
45337: IFFALSE 45440
// begin hc_class = class_apeman ;
45339: LD_ADDR_OWVAR 28
45343: PUSH
45344: LD_INT 12
45346: ST_TO_ADDR
// hc_gallery =  ;
45347: LD_ADDR_OWVAR 33
45351: PUSH
45352: LD_STRING 
45354: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45355: LD_ADDR_OWVAR 35
45359: PUSH
45360: LD_INT 2
45362: NEG
45363: PPUSH
45364: LD_INT 2
45366: PPUSH
45367: CALL_OW 12
45371: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45372: LD_ADDR_OWVAR 31
45376: PUSH
45377: LD_INT 1
45379: PPUSH
45380: LD_INT 3
45382: PPUSH
45383: CALL_OW 12
45387: PUSH
45388: LD_INT 1
45390: PPUSH
45391: LD_INT 3
45393: PPUSH
45394: CALL_OW 12
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: ST_TO_ADDR
// animal := CreateHuman ;
45411: LD_ADDR_VAR 0 12
45415: PUSH
45416: CALL_OW 44
45420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45421: LD_VAR 0 12
45425: PPUSH
45426: LD_VAR 0 8
45430: PPUSH
45431: LD_INT 0
45433: PPUSH
45434: CALL 47227 0 3
// end ;
45438: GO 45336
45440: POP
45441: POP
// if enchidnas then
45442: LD_VAR 0 4
45446: IFFALSE 45513
// for i = 1 to enchidnas do
45448: LD_ADDR_VAR 0 11
45452: PUSH
45453: DOUBLE
45454: LD_INT 1
45456: DEC
45457: ST_TO_ADDR
45458: LD_VAR 0 4
45462: PUSH
45463: FOR_TO
45464: IFFALSE 45511
// begin hc_class = 13 ;
45466: LD_ADDR_OWVAR 28
45470: PUSH
45471: LD_INT 13
45473: ST_TO_ADDR
// hc_gallery =  ;
45474: LD_ADDR_OWVAR 33
45478: PUSH
45479: LD_STRING 
45481: ST_TO_ADDR
// animal := CreateHuman ;
45482: LD_ADDR_VAR 0 12
45486: PUSH
45487: CALL_OW 44
45491: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45492: LD_VAR 0 12
45496: PPUSH
45497: LD_VAR 0 8
45501: PPUSH
45502: LD_INT 0
45504: PPUSH
45505: CALL 47227 0 3
// end ;
45509: GO 45463
45511: POP
45512: POP
// if fishes then
45513: LD_VAR 0 7
45517: IFFALSE 45584
// for i = 1 to fishes do
45519: LD_ADDR_VAR 0 11
45523: PUSH
45524: DOUBLE
45525: LD_INT 1
45527: DEC
45528: ST_TO_ADDR
45529: LD_VAR 0 7
45533: PUSH
45534: FOR_TO
45535: IFFALSE 45582
// begin hc_class = 20 ;
45537: LD_ADDR_OWVAR 28
45541: PUSH
45542: LD_INT 20
45544: ST_TO_ADDR
// hc_gallery =  ;
45545: LD_ADDR_OWVAR 33
45549: PUSH
45550: LD_STRING 
45552: ST_TO_ADDR
// animal := CreateHuman ;
45553: LD_ADDR_VAR 0 12
45557: PUSH
45558: CALL_OW 44
45562: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45563: LD_VAR 0 12
45567: PPUSH
45568: LD_VAR 0 9
45572: PPUSH
45573: LD_INT 0
45575: PPUSH
45576: CALL 47227 0 3
// end ;
45580: GO 45534
45582: POP
45583: POP
// end ;
45584: LD_VAR 0 10
45588: RET
// export function WantHeal ( sci , unit ) ; begin
45589: LD_INT 0
45591: PPUSH
// if GetTaskList ( sci ) > 0 then
45592: LD_VAR 0 1
45596: PPUSH
45597: CALL_OW 437
45601: PUSH
45602: LD_INT 0
45604: GREATER
45605: IFFALSE 45677
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45607: LD_VAR 0 1
45611: PPUSH
45612: CALL_OW 437
45616: PUSH
45617: LD_INT 1
45619: ARRAY
45620: PUSH
45621: LD_INT 1
45623: ARRAY
45624: PUSH
45625: LD_STRING l
45627: EQUAL
45628: IFFALSE 45655
45630: PUSH
45631: LD_VAR 0 1
45635: PPUSH
45636: CALL_OW 437
45640: PUSH
45641: LD_INT 1
45643: ARRAY
45644: PUSH
45645: LD_INT 4
45647: ARRAY
45648: PUSH
45649: LD_VAR 0 2
45653: EQUAL
45654: AND
45655: IFFALSE 45667
// result := true else
45657: LD_ADDR_VAR 0 3
45661: PUSH
45662: LD_INT 1
45664: ST_TO_ADDR
45665: GO 45675
// result := false ;
45667: LD_ADDR_VAR 0 3
45671: PUSH
45672: LD_INT 0
45674: ST_TO_ADDR
// end else
45675: GO 45685
// result := false ;
45677: LD_ADDR_VAR 0 3
45681: PUSH
45682: LD_INT 0
45684: ST_TO_ADDR
// end ;
45685: LD_VAR 0 3
45689: RET
// export function HealTarget ( sci ) ; begin
45690: LD_INT 0
45692: PPUSH
// if not sci then
45693: LD_VAR 0 1
45697: NOT
45698: IFFALSE 45702
// exit ;
45700: GO 45767
// result := 0 ;
45702: LD_ADDR_VAR 0 2
45706: PUSH
45707: LD_INT 0
45709: ST_TO_ADDR
// if GetTaskList ( sci ) then
45710: LD_VAR 0 1
45714: PPUSH
45715: CALL_OW 437
45719: IFFALSE 45767
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45721: LD_VAR 0 1
45725: PPUSH
45726: CALL_OW 437
45730: PUSH
45731: LD_INT 1
45733: ARRAY
45734: PUSH
45735: LD_INT 1
45737: ARRAY
45738: PUSH
45739: LD_STRING l
45741: EQUAL
45742: IFFALSE 45767
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45744: LD_ADDR_VAR 0 2
45748: PUSH
45749: LD_VAR 0 1
45753: PPUSH
45754: CALL_OW 437
45758: PUSH
45759: LD_INT 1
45761: ARRAY
45762: PUSH
45763: LD_INT 4
45765: ARRAY
45766: ST_TO_ADDR
// end ;
45767: LD_VAR 0 2
45771: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45772: LD_INT 0
45774: PPUSH
45775: PPUSH
45776: PPUSH
45777: PPUSH
// if not base_units then
45778: LD_VAR 0 1
45782: NOT
45783: IFFALSE 45787
// exit ;
45785: GO 45874
// result := false ;
45787: LD_ADDR_VAR 0 2
45791: PUSH
45792: LD_INT 0
45794: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45795: LD_ADDR_VAR 0 5
45799: PUSH
45800: LD_VAR 0 1
45804: PPUSH
45805: LD_INT 21
45807: PUSH
45808: LD_INT 3
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PPUSH
45815: CALL_OW 72
45819: ST_TO_ADDR
// if not tmp then
45820: LD_VAR 0 5
45824: NOT
45825: IFFALSE 45829
// exit ;
45827: GO 45874
// for i in tmp do
45829: LD_ADDR_VAR 0 3
45833: PUSH
45834: LD_VAR 0 5
45838: PUSH
45839: FOR_IN
45840: IFFALSE 45872
// begin result := EnemyInRange ( i , 22 ) ;
45842: LD_ADDR_VAR 0 2
45846: PUSH
45847: LD_VAR 0 3
45851: PPUSH
45852: LD_INT 22
45854: PPUSH
45855: CALL 43299 0 2
45859: ST_TO_ADDR
// if result then
45860: LD_VAR 0 2
45864: IFFALSE 45870
// exit ;
45866: POP
45867: POP
45868: GO 45874
// end ;
45870: GO 45839
45872: POP
45873: POP
// end ;
45874: LD_VAR 0 2
45878: RET
// export function FilterByTag ( units , tag ) ; begin
45879: LD_INT 0
45881: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45882: LD_ADDR_VAR 0 3
45886: PUSH
45887: LD_VAR 0 1
45891: PPUSH
45892: LD_INT 120
45894: PUSH
45895: LD_VAR 0 2
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PPUSH
45904: CALL_OW 72
45908: ST_TO_ADDR
// end ;
45909: LD_VAR 0 3
45913: RET
// export function IsDriver ( un ) ; begin
45914: LD_INT 0
45916: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45917: LD_ADDR_VAR 0 2
45921: PUSH
45922: LD_VAR 0 1
45926: PUSH
45927: LD_INT 55
45929: PUSH
45930: EMPTY
45931: LIST
45932: PPUSH
45933: CALL_OW 69
45937: IN
45938: ST_TO_ADDR
// end ;
45939: LD_VAR 0 2
45943: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45944: LD_INT 0
45946: PPUSH
45947: PPUSH
// list := [ ] ;
45948: LD_ADDR_VAR 0 5
45952: PUSH
45953: EMPTY
45954: ST_TO_ADDR
// case d of 0 :
45955: LD_VAR 0 3
45959: PUSH
45960: LD_INT 0
45962: DOUBLE
45963: EQUAL
45964: IFTRUE 45968
45966: GO 46101
45968: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45969: LD_ADDR_VAR 0 5
45973: PUSH
45974: LD_VAR 0 1
45978: PUSH
45979: LD_INT 4
45981: MINUS
45982: PUSH
45983: LD_VAR 0 2
45987: PUSH
45988: LD_INT 4
45990: MINUS
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: LIST
45999: PUSH
46000: LD_VAR 0 1
46004: PUSH
46005: LD_INT 3
46007: MINUS
46008: PUSH
46009: LD_VAR 0 2
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: LIST
46021: PUSH
46022: LD_VAR 0 1
46026: PUSH
46027: LD_INT 4
46029: PLUS
46030: PUSH
46031: LD_VAR 0 2
46035: PUSH
46036: LD_INT 4
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: LIST
46043: PUSH
46044: LD_VAR 0 1
46048: PUSH
46049: LD_INT 3
46051: PLUS
46052: PUSH
46053: LD_VAR 0 2
46057: PUSH
46058: LD_INT 3
46060: PLUS
46061: PUSH
46062: LD_INT 5
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: LIST
46069: PUSH
46070: LD_VAR 0 1
46074: PUSH
46075: LD_VAR 0 2
46079: PUSH
46080: LD_INT 4
46082: PLUS
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: LIST
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: ST_TO_ADDR
// end ; 1 :
46099: GO 46799
46101: LD_INT 1
46103: DOUBLE
46104: EQUAL
46105: IFTRUE 46109
46107: GO 46242
46109: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46110: LD_ADDR_VAR 0 5
46114: PUSH
46115: LD_VAR 0 1
46119: PUSH
46120: LD_VAR 0 2
46124: PUSH
46125: LD_INT 4
46127: MINUS
46128: PUSH
46129: LD_INT 3
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: LIST
46136: PUSH
46137: LD_VAR 0 1
46141: PUSH
46142: LD_INT 3
46144: MINUS
46145: PUSH
46146: LD_VAR 0 2
46150: PUSH
46151: LD_INT 3
46153: MINUS
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: LIST
46162: PUSH
46163: LD_VAR 0 1
46167: PUSH
46168: LD_INT 4
46170: MINUS
46171: PUSH
46172: LD_VAR 0 2
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: LIST
46184: PUSH
46185: LD_VAR 0 1
46189: PUSH
46190: LD_VAR 0 2
46194: PUSH
46195: LD_INT 3
46197: PLUS
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: LIST
46206: PUSH
46207: LD_VAR 0 1
46211: PUSH
46212: LD_INT 4
46214: PLUS
46215: PUSH
46216: LD_VAR 0 2
46220: PUSH
46221: LD_INT 4
46223: PLUS
46224: PUSH
46225: LD_INT 5
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: LIST
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: ST_TO_ADDR
// end ; 2 :
46240: GO 46799
46242: LD_INT 2
46244: DOUBLE
46245: EQUAL
46246: IFTRUE 46250
46248: GO 46379
46250: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46251: LD_ADDR_VAR 0 5
46255: PUSH
46256: LD_VAR 0 1
46260: PUSH
46261: LD_VAR 0 2
46265: PUSH
46266: LD_INT 3
46268: MINUS
46269: PUSH
46270: LD_INT 3
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: LIST
46277: PUSH
46278: LD_VAR 0 1
46282: PUSH
46283: LD_INT 4
46285: PLUS
46286: PUSH
46287: LD_VAR 0 2
46291: PUSH
46292: LD_INT 4
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: LIST
46299: PUSH
46300: LD_VAR 0 1
46304: PUSH
46305: LD_VAR 0 2
46309: PUSH
46310: LD_INT 4
46312: PLUS
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: LIST
46321: PUSH
46322: LD_VAR 0 1
46326: PUSH
46327: LD_INT 3
46329: MINUS
46330: PUSH
46331: LD_VAR 0 2
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: LIST
46343: PUSH
46344: LD_VAR 0 1
46348: PUSH
46349: LD_INT 4
46351: MINUS
46352: PUSH
46353: LD_VAR 0 2
46357: PUSH
46358: LD_INT 4
46360: MINUS
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: LIST
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: ST_TO_ADDR
// end ; 3 :
46377: GO 46799
46379: LD_INT 3
46381: DOUBLE
46382: EQUAL
46383: IFTRUE 46387
46385: GO 46520
46387: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46388: LD_ADDR_VAR 0 5
46392: PUSH
46393: LD_VAR 0 1
46397: PUSH
46398: LD_INT 3
46400: PLUS
46401: PUSH
46402: LD_VAR 0 2
46406: PUSH
46407: LD_INT 4
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: LIST
46414: PUSH
46415: LD_VAR 0 1
46419: PUSH
46420: LD_INT 4
46422: PLUS
46423: PUSH
46424: LD_VAR 0 2
46428: PUSH
46429: LD_INT 4
46431: PLUS
46432: PUSH
46433: LD_INT 5
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: LIST
46440: PUSH
46441: LD_VAR 0 1
46445: PUSH
46446: LD_INT 4
46448: MINUS
46449: PUSH
46450: LD_VAR 0 2
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: LIST
46462: PUSH
46463: LD_VAR 0 1
46467: PUSH
46468: LD_VAR 0 2
46472: PUSH
46473: LD_INT 4
46475: MINUS
46476: PUSH
46477: LD_INT 3
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: LIST
46484: PUSH
46485: LD_VAR 0 1
46489: PUSH
46490: LD_INT 3
46492: MINUS
46493: PUSH
46494: LD_VAR 0 2
46498: PUSH
46499: LD_INT 3
46501: MINUS
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: LIST
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: ST_TO_ADDR
// end ; 4 :
46518: GO 46799
46520: LD_INT 4
46522: DOUBLE
46523: EQUAL
46524: IFTRUE 46528
46526: GO 46661
46528: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46529: LD_ADDR_VAR 0 5
46533: PUSH
46534: LD_VAR 0 1
46538: PUSH
46539: LD_VAR 0 2
46543: PUSH
46544: LD_INT 4
46546: PLUS
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: LIST
46555: PUSH
46556: LD_VAR 0 1
46560: PUSH
46561: LD_INT 3
46563: PLUS
46564: PUSH
46565: LD_VAR 0 2
46569: PUSH
46570: LD_INT 3
46572: PLUS
46573: PUSH
46574: LD_INT 5
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: LIST
46581: PUSH
46582: LD_VAR 0 1
46586: PUSH
46587: LD_INT 4
46589: PLUS
46590: PUSH
46591: LD_VAR 0 2
46595: PUSH
46596: LD_INT 4
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: LIST
46603: PUSH
46604: LD_VAR 0 1
46608: PUSH
46609: LD_VAR 0 2
46613: PUSH
46614: LD_INT 3
46616: MINUS
46617: PUSH
46618: LD_INT 3
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: LIST
46625: PUSH
46626: LD_VAR 0 1
46630: PUSH
46631: LD_INT 4
46633: MINUS
46634: PUSH
46635: LD_VAR 0 2
46639: PUSH
46640: LD_INT 4
46642: MINUS
46643: PUSH
46644: LD_INT 2
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: LIST
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: ST_TO_ADDR
// end ; 5 :
46659: GO 46799
46661: LD_INT 5
46663: DOUBLE
46664: EQUAL
46665: IFTRUE 46669
46667: GO 46798
46669: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46670: LD_ADDR_VAR 0 5
46674: PUSH
46675: LD_VAR 0 1
46679: PUSH
46680: LD_INT 4
46682: MINUS
46683: PUSH
46684: LD_VAR 0 2
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: PUSH
46697: LD_VAR 0 1
46701: PUSH
46702: LD_VAR 0 2
46706: PUSH
46707: LD_INT 4
46709: MINUS
46710: PUSH
46711: LD_INT 3
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: LIST
46718: PUSH
46719: LD_VAR 0 1
46723: PUSH
46724: LD_INT 4
46726: PLUS
46727: PUSH
46728: LD_VAR 0 2
46732: PUSH
46733: LD_INT 4
46735: PLUS
46736: PUSH
46737: LD_INT 5
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: LIST
46744: PUSH
46745: LD_VAR 0 1
46749: PUSH
46750: LD_INT 3
46752: PLUS
46753: PUSH
46754: LD_VAR 0 2
46758: PUSH
46759: LD_INT 4
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: LIST
46766: PUSH
46767: LD_VAR 0 1
46771: PUSH
46772: LD_VAR 0 2
46776: PUSH
46777: LD_INT 3
46779: PLUS
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: LIST
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: ST_TO_ADDR
// end ; end ;
46796: GO 46799
46798: POP
// result := list ;
46799: LD_ADDR_VAR 0 4
46803: PUSH
46804: LD_VAR 0 5
46808: ST_TO_ADDR
// end ;
46809: LD_VAR 0 4
46813: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46814: LD_INT 0
46816: PPUSH
46817: PPUSH
46818: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46819: LD_VAR 0 1
46823: NOT
46824: IFTRUE 46852
46826: PUSH
46827: LD_VAR 0 2
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: LD_INT 3
46840: PUSH
46841: LD_INT 4
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: IN
46850: NOT
46851: OR
46852: IFFALSE 46856
// exit ;
46854: GO 46939
// tmp := [ ] ;
46856: LD_ADDR_VAR 0 5
46860: PUSH
46861: EMPTY
46862: ST_TO_ADDR
// for i in units do
46863: LD_ADDR_VAR 0 4
46867: PUSH
46868: LD_VAR 0 1
46872: PUSH
46873: FOR_IN
46874: IFFALSE 46908
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46876: LD_ADDR_VAR 0 5
46880: PUSH
46881: LD_VAR 0 5
46885: PPUSH
46886: LD_VAR 0 4
46890: PPUSH
46891: LD_VAR 0 2
46895: PPUSH
46896: CALL_OW 259
46900: PPUSH
46901: CALL 48334 0 2
46905: ST_TO_ADDR
46906: GO 46873
46908: POP
46909: POP
// if not tmp then
46910: LD_VAR 0 5
46914: NOT
46915: IFFALSE 46919
// exit ;
46917: GO 46939
// result := SortListByListDesc ( units , tmp ) ;
46919: LD_ADDR_VAR 0 3
46923: PUSH
46924: LD_VAR 0 1
46928: PPUSH
46929: LD_VAR 0 5
46933: PPUSH
46934: CALL_OW 77
46938: ST_TO_ADDR
// end ;
46939: LD_VAR 0 3
46943: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46944: LD_INT 0
46946: PPUSH
46947: PPUSH
46948: PPUSH
// result := false ;
46949: LD_ADDR_VAR 0 3
46953: PUSH
46954: LD_INT 0
46956: ST_TO_ADDR
// if not building then
46957: LD_VAR 0 2
46961: NOT
46962: IFFALSE 46966
// exit ;
46964: GO 47110
// x := GetX ( building ) ;
46966: LD_ADDR_VAR 0 4
46970: PUSH
46971: LD_VAR 0 2
46975: PPUSH
46976: CALL_OW 250
46980: ST_TO_ADDR
// y := GetY ( building ) ;
46981: LD_ADDR_VAR 0 5
46985: PUSH
46986: LD_VAR 0 2
46990: PPUSH
46991: CALL_OW 251
46995: ST_TO_ADDR
// if not x or not y then
46996: LD_VAR 0 4
47000: NOT
47001: IFTRUE 47010
47003: PUSH
47004: LD_VAR 0 5
47008: NOT
47009: OR
47010: IFFALSE 47014
// exit ;
47012: GO 47110
// if GetTaskList ( unit ) then
47014: LD_VAR 0 1
47018: PPUSH
47019: CALL_OW 437
47023: IFFALSE 47110
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47025: LD_STRING e
47027: PUSH
47028: LD_VAR 0 1
47032: PPUSH
47033: CALL_OW 437
47037: PUSH
47038: LD_INT 1
47040: ARRAY
47041: PUSH
47042: LD_INT 1
47044: ARRAY
47045: EQUAL
47046: IFFALSE 47073
47048: PUSH
47049: LD_VAR 0 4
47053: PUSH
47054: LD_VAR 0 1
47058: PPUSH
47059: CALL_OW 437
47063: PUSH
47064: LD_INT 1
47066: ARRAY
47067: PUSH
47068: LD_INT 2
47070: ARRAY
47071: EQUAL
47072: AND
47073: IFFALSE 47100
47075: PUSH
47076: LD_VAR 0 5
47080: PUSH
47081: LD_VAR 0 1
47085: PPUSH
47086: CALL_OW 437
47090: PUSH
47091: LD_INT 1
47093: ARRAY
47094: PUSH
47095: LD_INT 3
47097: ARRAY
47098: EQUAL
47099: AND
47100: IFFALSE 47110
// result := true end ;
47102: LD_ADDR_VAR 0 3
47106: PUSH
47107: LD_INT 1
47109: ST_TO_ADDR
// end ;
47110: LD_VAR 0 3
47114: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47115: LD_INT 0
47117: PPUSH
// result := false ;
47118: LD_ADDR_VAR 0 4
47122: PUSH
47123: LD_INT 0
47125: ST_TO_ADDR
// if GetTaskList ( unit ) then
47126: LD_VAR 0 1
47130: PPUSH
47131: CALL_OW 437
47135: IFFALSE 47222
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47137: LD_STRING M
47139: PUSH
47140: LD_VAR 0 1
47144: PPUSH
47145: CALL_OW 437
47149: PUSH
47150: LD_INT 1
47152: ARRAY
47153: PUSH
47154: LD_INT 1
47156: ARRAY
47157: EQUAL
47158: IFFALSE 47185
47160: PUSH
47161: LD_VAR 0 2
47165: PUSH
47166: LD_VAR 0 1
47170: PPUSH
47171: CALL_OW 437
47175: PUSH
47176: LD_INT 1
47178: ARRAY
47179: PUSH
47180: LD_INT 2
47182: ARRAY
47183: EQUAL
47184: AND
47185: IFFALSE 47212
47187: PUSH
47188: LD_VAR 0 3
47192: PUSH
47193: LD_VAR 0 1
47197: PPUSH
47198: CALL_OW 437
47202: PUSH
47203: LD_INT 1
47205: ARRAY
47206: PUSH
47207: LD_INT 3
47209: ARRAY
47210: EQUAL
47211: AND
47212: IFFALSE 47222
// result := true ;
47214: LD_ADDR_VAR 0 4
47218: PUSH
47219: LD_INT 1
47221: ST_TO_ADDR
// end ; end ;
47222: LD_VAR 0 4
47226: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47227: LD_INT 0
47229: PPUSH
47230: PPUSH
47231: PPUSH
47232: PPUSH
// if not unit or not area then
47233: LD_VAR 0 1
47237: NOT
47238: IFTRUE 47247
47240: PUSH
47241: LD_VAR 0 2
47245: NOT
47246: OR
47247: IFFALSE 47251
// exit ;
47249: GO 47427
// tmp := AreaToList ( area , i ) ;
47251: LD_ADDR_VAR 0 6
47255: PUSH
47256: LD_VAR 0 2
47260: PPUSH
47261: LD_VAR 0 5
47265: PPUSH
47266: CALL_OW 517
47270: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47271: LD_ADDR_VAR 0 5
47275: PUSH
47276: DOUBLE
47277: LD_INT 1
47279: DEC
47280: ST_TO_ADDR
47281: LD_VAR 0 6
47285: PUSH
47286: LD_INT 1
47288: ARRAY
47289: PUSH
47290: FOR_TO
47291: IFFALSE 47425
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47293: LD_ADDR_VAR 0 7
47297: PUSH
47298: LD_VAR 0 6
47302: PUSH
47303: LD_INT 1
47305: ARRAY
47306: PUSH
47307: LD_VAR 0 5
47311: ARRAY
47312: PUSH
47313: LD_VAR 0 6
47317: PUSH
47318: LD_INT 2
47320: ARRAY
47321: PUSH
47322: LD_VAR 0 5
47326: ARRAY
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47332: LD_INT 92
47334: PUSH
47335: LD_VAR 0 7
47339: PUSH
47340: LD_INT 1
47342: ARRAY
47343: PUSH
47344: LD_VAR 0 7
47348: PUSH
47349: LD_INT 2
47351: ARRAY
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: PPUSH
47362: CALL_OW 69
47366: PUSH
47367: LD_INT 0
47369: EQUAL
47370: IFFALSE 47423
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47372: LD_VAR 0 1
47376: PPUSH
47377: LD_VAR 0 7
47381: PUSH
47382: LD_INT 1
47384: ARRAY
47385: PPUSH
47386: LD_VAR 0 7
47390: PUSH
47391: LD_INT 2
47393: ARRAY
47394: PPUSH
47395: LD_VAR 0 3
47399: PPUSH
47400: CALL_OW 48
// result := IsPlaced ( unit ) ;
47404: LD_ADDR_VAR 0 4
47408: PUSH
47409: LD_VAR 0 1
47413: PPUSH
47414: CALL_OW 305
47418: ST_TO_ADDR
// exit ;
47419: POP
47420: POP
47421: GO 47427
// end ; end ;
47423: GO 47290
47425: POP
47426: POP
// end ;
47427: LD_VAR 0 4
47431: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47432: LD_INT 0
47434: PPUSH
47435: PPUSH
47436: PPUSH
// if not side or side > 8 then
47437: LD_VAR 0 1
47441: NOT
47442: IFTRUE 47454
47444: PUSH
47445: LD_VAR 0 1
47449: PUSH
47450: LD_INT 8
47452: GREATER
47453: OR
47454: IFFALSE 47458
// exit ;
47456: GO 47645
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47458: LD_ADDR_VAR 0 4
47462: PUSH
47463: LD_INT 22
47465: PUSH
47466: LD_VAR 0 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 21
47477: PUSH
47478: LD_INT 3
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PPUSH
47489: CALL_OW 69
47493: ST_TO_ADDR
// if not tmp then
47494: LD_VAR 0 4
47498: NOT
47499: IFFALSE 47503
// exit ;
47501: GO 47645
// enable_addtolog := true ;
47503: LD_ADDR_OWVAR 81
47507: PUSH
47508: LD_INT 1
47510: ST_TO_ADDR
// AddToLog ( [ ) ;
47511: LD_STRING [
47513: PPUSH
47514: CALL_OW 561
// for i in tmp do
47518: LD_ADDR_VAR 0 3
47522: PUSH
47523: LD_VAR 0 4
47527: PUSH
47528: FOR_IN
47529: IFFALSE 47636
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47531: LD_STRING [
47533: PUSH
47534: LD_VAR 0 3
47538: PPUSH
47539: CALL_OW 266
47543: STR
47544: PUSH
47545: LD_STRING , 
47547: STR
47548: PUSH
47549: LD_VAR 0 3
47553: PPUSH
47554: CALL_OW 250
47558: STR
47559: PUSH
47560: LD_STRING , 
47562: STR
47563: PUSH
47564: LD_VAR 0 3
47568: PPUSH
47569: CALL_OW 251
47573: STR
47574: PUSH
47575: LD_STRING , 
47577: STR
47578: PUSH
47579: LD_VAR 0 3
47583: PPUSH
47584: CALL_OW 254
47588: STR
47589: PUSH
47590: LD_STRING , 
47592: STR
47593: PUSH
47594: LD_VAR 0 3
47598: PPUSH
47599: LD_INT 1
47601: PPUSH
47602: CALL_OW 268
47606: STR
47607: PUSH
47608: LD_STRING , 
47610: STR
47611: PUSH
47612: LD_VAR 0 3
47616: PPUSH
47617: LD_INT 2
47619: PPUSH
47620: CALL_OW 268
47624: STR
47625: PUSH
47626: LD_STRING ],
47628: STR
47629: PPUSH
47630: CALL_OW 561
// end ;
47634: GO 47528
47636: POP
47637: POP
// AddToLog ( ]; ) ;
47638: LD_STRING ];
47640: PPUSH
47641: CALL_OW 561
// end ;
47645: LD_VAR 0 2
47649: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47650: LD_INT 0
47652: PPUSH
47653: PPUSH
47654: PPUSH
47655: PPUSH
47656: PPUSH
// if not area or not rate or not max then
47657: LD_VAR 0 1
47661: NOT
47662: IFTRUE 47671
47664: PUSH
47665: LD_VAR 0 2
47669: NOT
47670: OR
47671: IFTRUE 47680
47673: PUSH
47674: LD_VAR 0 4
47678: NOT
47679: OR
47680: IFFALSE 47684
// exit ;
47682: GO 47873
// while 1 do
47684: LD_INT 1
47686: IFFALSE 47873
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47688: LD_ADDR_VAR 0 9
47692: PUSH
47693: LD_VAR 0 1
47697: PPUSH
47698: LD_INT 1
47700: PPUSH
47701: CALL_OW 287
47705: PUSH
47706: LD_INT 10
47708: MUL
47709: ST_TO_ADDR
// r := rate / 10 ;
47710: LD_ADDR_VAR 0 7
47714: PUSH
47715: LD_VAR 0 2
47719: PUSH
47720: LD_INT 10
47722: DIVREAL
47723: ST_TO_ADDR
// time := 1 1$00 ;
47724: LD_ADDR_VAR 0 8
47728: PUSH
47729: LD_INT 2100
47731: ST_TO_ADDR
// if amount < min then
47732: LD_VAR 0 9
47736: PUSH
47737: LD_VAR 0 3
47741: LESS
47742: IFFALSE 47760
// r := r * 2 else
47744: LD_ADDR_VAR 0 7
47748: PUSH
47749: LD_VAR 0 7
47753: PUSH
47754: LD_INT 2
47756: MUL
47757: ST_TO_ADDR
47758: GO 47786
// if amount > max then
47760: LD_VAR 0 9
47764: PUSH
47765: LD_VAR 0 4
47769: GREATER
47770: IFFALSE 47786
// r := r / 2 ;
47772: LD_ADDR_VAR 0 7
47776: PUSH
47777: LD_VAR 0 7
47781: PUSH
47782: LD_INT 2
47784: DIVREAL
47785: ST_TO_ADDR
// time := time / r ;
47786: LD_ADDR_VAR 0 8
47790: PUSH
47791: LD_VAR 0 8
47795: PUSH
47796: LD_VAR 0 7
47800: DIVREAL
47801: ST_TO_ADDR
// if time < 0 then
47802: LD_VAR 0 8
47806: PUSH
47807: LD_INT 0
47809: LESS
47810: IFFALSE 47827
// time := time * - 1 ;
47812: LD_ADDR_VAR 0 8
47816: PUSH
47817: LD_VAR 0 8
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: MUL
47826: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47827: LD_VAR 0 8
47831: PUSH
47832: LD_INT 35
47834: PPUSH
47835: LD_INT 875
47837: PPUSH
47838: CALL_OW 12
47842: PLUS
47843: PPUSH
47844: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47848: LD_INT 1
47850: PPUSH
47851: LD_INT 5
47853: PPUSH
47854: CALL_OW 12
47858: PPUSH
47859: LD_VAR 0 1
47863: PPUSH
47864: LD_INT 1
47866: PPUSH
47867: CALL_OW 55
// end ;
47871: GO 47684
// end ;
47873: LD_VAR 0 5
47877: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47878: LD_INT 0
47880: PPUSH
47881: PPUSH
47882: PPUSH
47883: PPUSH
47884: PPUSH
47885: PPUSH
47886: PPUSH
47887: PPUSH
// if not turrets or not factories then
47888: LD_VAR 0 1
47892: NOT
47893: IFTRUE 47902
47895: PUSH
47896: LD_VAR 0 2
47900: NOT
47901: OR
47902: IFFALSE 47906
// exit ;
47904: GO 48213
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47906: LD_ADDR_VAR 0 10
47910: PUSH
47911: LD_INT 5
47913: PUSH
47914: LD_INT 6
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: LD_INT 4
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: LD_INT 5
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 24
47948: PUSH
47949: LD_INT 25
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 23
47958: PUSH
47959: LD_INT 27
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 42
47972: PUSH
47973: LD_INT 43
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 44
47982: PUSH
47983: LD_INT 46
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 45
47992: PUSH
47993: LD_INT 47
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: LIST
48009: ST_TO_ADDR
// result := [ ] ;
48010: LD_ADDR_VAR 0 3
48014: PUSH
48015: EMPTY
48016: ST_TO_ADDR
// for i in turrets do
48017: LD_ADDR_VAR 0 4
48021: PUSH
48022: LD_VAR 0 1
48026: PUSH
48027: FOR_IN
48028: IFFALSE 48211
// begin nat := GetNation ( i ) ;
48030: LD_ADDR_VAR 0 7
48034: PUSH
48035: LD_VAR 0 4
48039: PPUSH
48040: CALL_OW 248
48044: ST_TO_ADDR
// weapon := 0 ;
48045: LD_ADDR_VAR 0 8
48049: PUSH
48050: LD_INT 0
48052: ST_TO_ADDR
// if not nat then
48053: LD_VAR 0 7
48057: NOT
48058: IFFALSE 48062
// continue ;
48060: GO 48027
// for j in list [ nat ] do
48062: LD_ADDR_VAR 0 5
48066: PUSH
48067: LD_VAR 0 10
48071: PUSH
48072: LD_VAR 0 7
48076: ARRAY
48077: PUSH
48078: FOR_IN
48079: IFFALSE 48120
// if GetBWeapon ( i ) = j [ 1 ] then
48081: LD_VAR 0 4
48085: PPUSH
48086: CALL_OW 269
48090: PUSH
48091: LD_VAR 0 5
48095: PUSH
48096: LD_INT 1
48098: ARRAY
48099: EQUAL
48100: IFFALSE 48118
// begin weapon := j [ 2 ] ;
48102: LD_ADDR_VAR 0 8
48106: PUSH
48107: LD_VAR 0 5
48111: PUSH
48112: LD_INT 2
48114: ARRAY
48115: ST_TO_ADDR
// break ;
48116: GO 48120
// end ;
48118: GO 48078
48120: POP
48121: POP
// if not weapon then
48122: LD_VAR 0 8
48126: NOT
48127: IFFALSE 48131
// continue ;
48129: GO 48027
// for k in factories do
48131: LD_ADDR_VAR 0 6
48135: PUSH
48136: LD_VAR 0 2
48140: PUSH
48141: FOR_IN
48142: IFFALSE 48207
// begin weapons := AvailableWeaponList ( k ) ;
48144: LD_ADDR_VAR 0 9
48148: PUSH
48149: LD_VAR 0 6
48153: PPUSH
48154: CALL_OW 478
48158: ST_TO_ADDR
// if not weapons then
48159: LD_VAR 0 9
48163: NOT
48164: IFFALSE 48168
// continue ;
48166: GO 48141
// if weapon in weapons then
48168: LD_VAR 0 8
48172: PUSH
48173: LD_VAR 0 9
48177: IN
48178: IFFALSE 48205
// begin result := [ i , weapon ] ;
48180: LD_ADDR_VAR 0 3
48184: PUSH
48185: LD_VAR 0 4
48189: PUSH
48190: LD_VAR 0 8
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: ST_TO_ADDR
// exit ;
48199: POP
48200: POP
48201: POP
48202: POP
48203: GO 48213
// end ; end ;
48205: GO 48141
48207: POP
48208: POP
// end ;
48209: GO 48027
48211: POP
48212: POP
// end ;
48213: LD_VAR 0 3
48217: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48218: LD_INT 0
48220: PPUSH
// if not side or side > 8 then
48221: LD_VAR 0 3
48225: NOT
48226: IFTRUE 48238
48228: PUSH
48229: LD_VAR 0 3
48233: PUSH
48234: LD_INT 8
48236: GREATER
48237: OR
48238: IFFALSE 48242
// exit ;
48240: GO 48301
// if not range then
48242: LD_VAR 0 4
48246: NOT
48247: IFFALSE 48258
// range := - 12 ;
48249: LD_ADDR_VAR 0 4
48253: PUSH
48254: LD_INT 12
48256: NEG
48257: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48258: LD_VAR 0 1
48262: PPUSH
48263: LD_VAR 0 2
48267: PPUSH
48268: LD_VAR 0 3
48272: PPUSH
48273: LD_VAR 0 4
48277: PPUSH
48278: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48282: LD_VAR 0 1
48286: PPUSH
48287: LD_VAR 0 2
48291: PPUSH
48292: LD_VAR 0 3
48296: PPUSH
48297: CALL_OW 331
// end ;
48301: LD_VAR 0 5
48305: RET
// export function Video ( mode ) ; begin
48306: LD_INT 0
48308: PPUSH
// ingame_video = mode ;
48309: LD_ADDR_OWVAR 52
48313: PUSH
48314: LD_VAR 0 1
48318: ST_TO_ADDR
// interface_hidden = mode ;
48319: LD_ADDR_OWVAR 54
48323: PUSH
48324: LD_VAR 0 1
48328: ST_TO_ADDR
// end ;
48329: LD_VAR 0 2
48333: RET
// export function Join ( array , element ) ; begin
48334: LD_INT 0
48336: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48337: LD_ADDR_VAR 0 3
48341: PUSH
48342: LD_VAR 0 1
48346: PPUSH
48347: LD_VAR 0 1
48351: PUSH
48352: LD_INT 1
48354: PLUS
48355: PPUSH
48356: LD_VAR 0 2
48360: PPUSH
48361: CALL_OW 1
48365: ST_TO_ADDR
// end ;
48366: LD_VAR 0 3
48370: RET
// export function JoinUnion ( array , element ) ; begin
48371: LD_INT 0
48373: PPUSH
// result := array union element ;
48374: LD_ADDR_VAR 0 3
48378: PUSH
48379: LD_VAR 0 1
48383: PUSH
48384: LD_VAR 0 2
48388: UNION
48389: ST_TO_ADDR
// end ;
48390: LD_VAR 0 3
48394: RET
// export function GetBehemoths ( side ) ; begin
48395: LD_INT 0
48397: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48398: LD_ADDR_VAR 0 2
48402: PUSH
48403: LD_INT 22
48405: PUSH
48406: LD_VAR 0 1
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 31
48417: PUSH
48418: LD_INT 25
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PPUSH
48429: CALL_OW 69
48433: ST_TO_ADDR
// end ;
48434: LD_VAR 0 2
48438: RET
// export function Shuffle ( array ) ; var i , index ; begin
48439: LD_INT 0
48441: PPUSH
48442: PPUSH
48443: PPUSH
// result := [ ] ;
48444: LD_ADDR_VAR 0 2
48448: PUSH
48449: EMPTY
48450: ST_TO_ADDR
// if not array then
48451: LD_VAR 0 1
48455: NOT
48456: IFFALSE 48460
// exit ;
48458: GO 48559
// Randomize ;
48460: CALL_OW 10
// for i = array downto 1 do
48464: LD_ADDR_VAR 0 3
48468: PUSH
48469: DOUBLE
48470: LD_VAR 0 1
48474: INC
48475: ST_TO_ADDR
48476: LD_INT 1
48478: PUSH
48479: FOR_DOWNTO
48480: IFFALSE 48557
// begin index := rand ( 1 , array ) ;
48482: LD_ADDR_VAR 0 4
48486: PUSH
48487: LD_INT 1
48489: PPUSH
48490: LD_VAR 0 1
48494: PPUSH
48495: CALL_OW 12
48499: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48500: LD_ADDR_VAR 0 2
48504: PUSH
48505: LD_VAR 0 2
48509: PPUSH
48510: LD_VAR 0 2
48514: PUSH
48515: LD_INT 1
48517: PLUS
48518: PPUSH
48519: LD_VAR 0 1
48523: PUSH
48524: LD_VAR 0 4
48528: ARRAY
48529: PPUSH
48530: CALL_OW 2
48534: ST_TO_ADDR
// array := Delete ( array , index ) ;
48535: LD_ADDR_VAR 0 1
48539: PUSH
48540: LD_VAR 0 1
48544: PPUSH
48545: LD_VAR 0 4
48549: PPUSH
48550: CALL_OW 3
48554: ST_TO_ADDR
// end ;
48555: GO 48479
48557: POP
48558: POP
// end ;
48559: LD_VAR 0 2
48563: RET
// export function GetBaseMaterials ( base ) ; begin
48564: LD_INT 0
48566: PPUSH
// result := [ 0 , 0 , 0 ] ;
48567: LD_ADDR_VAR 0 2
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: LIST
48585: ST_TO_ADDR
// if not base then
48586: LD_VAR 0 1
48590: NOT
48591: IFFALSE 48595
// exit ;
48593: GO 48644
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48595: LD_ADDR_VAR 0 2
48599: PUSH
48600: LD_VAR 0 1
48604: PPUSH
48605: LD_INT 1
48607: PPUSH
48608: CALL_OW 275
48612: PUSH
48613: LD_VAR 0 1
48617: PPUSH
48618: LD_INT 2
48620: PPUSH
48621: CALL_OW 275
48625: PUSH
48626: LD_VAR 0 1
48630: PPUSH
48631: LD_INT 3
48633: PPUSH
48634: CALL_OW 275
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: LIST
48643: ST_TO_ADDR
// end ;
48644: LD_VAR 0 2
48648: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48649: LD_INT 0
48651: PPUSH
48652: PPUSH
// result := array ;
48653: LD_ADDR_VAR 0 3
48657: PUSH
48658: LD_VAR 0 1
48662: ST_TO_ADDR
// if size >= result then
48663: LD_VAR 0 2
48667: PUSH
48668: LD_VAR 0 3
48672: GREATEREQUAL
48673: IFFALSE 48677
// exit ;
48675: GO 48727
// if size then
48677: LD_VAR 0 2
48681: IFFALSE 48727
// for i := array downto size do
48683: LD_ADDR_VAR 0 4
48687: PUSH
48688: DOUBLE
48689: LD_VAR 0 1
48693: INC
48694: ST_TO_ADDR
48695: LD_VAR 0 2
48699: PUSH
48700: FOR_DOWNTO
48701: IFFALSE 48725
// result := Delete ( result , result ) ;
48703: LD_ADDR_VAR 0 3
48707: PUSH
48708: LD_VAR 0 3
48712: PPUSH
48713: LD_VAR 0 3
48717: PPUSH
48718: CALL_OW 3
48722: ST_TO_ADDR
48723: GO 48700
48725: POP
48726: POP
// end ;
48727: LD_VAR 0 3
48731: RET
// export function ComExit ( unit ) ; var tmp ; begin
48732: LD_INT 0
48734: PPUSH
48735: PPUSH
// if not IsInUnit ( unit ) then
48736: LD_VAR 0 1
48740: PPUSH
48741: CALL_OW 310
48745: NOT
48746: IFFALSE 48750
// exit ;
48748: GO 48810
// tmp := IsInUnit ( unit ) ;
48750: LD_ADDR_VAR 0 3
48754: PUSH
48755: LD_VAR 0 1
48759: PPUSH
48760: CALL_OW 310
48764: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48765: LD_VAR 0 3
48769: PPUSH
48770: CALL_OW 247
48774: PUSH
48775: LD_INT 2
48777: EQUAL
48778: IFFALSE 48791
// ComExitVehicle ( unit ) else
48780: LD_VAR 0 1
48784: PPUSH
48785: CALL_OW 121
48789: GO 48800
// ComExitBuilding ( unit ) ;
48791: LD_VAR 0 1
48795: PPUSH
48796: CALL_OW 122
// result := tmp ;
48800: LD_ADDR_VAR 0 2
48804: PUSH
48805: LD_VAR 0 3
48809: ST_TO_ADDR
// end ;
48810: LD_VAR 0 2
48814: RET
// export function ComExitAll ( units ) ; var i ; begin
48815: LD_INT 0
48817: PPUSH
48818: PPUSH
// if not units then
48819: LD_VAR 0 1
48823: NOT
48824: IFFALSE 48828
// exit ;
48826: GO 48854
// for i in units do
48828: LD_ADDR_VAR 0 3
48832: PUSH
48833: LD_VAR 0 1
48837: PUSH
48838: FOR_IN
48839: IFFALSE 48852
// ComExit ( i ) ;
48841: LD_VAR 0 3
48845: PPUSH
48846: CALL 48732 0 1
48850: GO 48838
48852: POP
48853: POP
// end ;
48854: LD_VAR 0 2
48858: RET
// export function ResetHc ; begin
48859: LD_INT 0
48861: PPUSH
// InitHc ;
48862: CALL_OW 19
// hc_importance := 0 ;
48866: LD_ADDR_OWVAR 32
48870: PUSH
48871: LD_INT 0
48873: ST_TO_ADDR
// end ;
48874: LD_VAR 0 1
48878: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48879: LD_INT 0
48881: PPUSH
48882: PPUSH
48883: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48884: LD_ADDR_VAR 0 6
48888: PUSH
48889: LD_VAR 0 1
48893: PUSH
48894: LD_VAR 0 3
48898: PLUS
48899: PUSH
48900: LD_INT 2
48902: DIV
48903: ST_TO_ADDR
// if _x < 0 then
48904: LD_VAR 0 6
48908: PUSH
48909: LD_INT 0
48911: LESS
48912: IFFALSE 48929
// _x := _x * - 1 ;
48914: LD_ADDR_VAR 0 6
48918: PUSH
48919: LD_VAR 0 6
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: MUL
48928: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48929: LD_ADDR_VAR 0 7
48933: PUSH
48934: LD_VAR 0 2
48938: PUSH
48939: LD_VAR 0 4
48943: PLUS
48944: PUSH
48945: LD_INT 2
48947: DIV
48948: ST_TO_ADDR
// if _y < 0 then
48949: LD_VAR 0 7
48953: PUSH
48954: LD_INT 0
48956: LESS
48957: IFFALSE 48974
// _y := _y * - 1 ;
48959: LD_ADDR_VAR 0 7
48963: PUSH
48964: LD_VAR 0 7
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: MUL
48973: ST_TO_ADDR
// result := [ _x , _y ] ;
48974: LD_ADDR_VAR 0 5
48978: PUSH
48979: LD_VAR 0 6
48983: PUSH
48984: LD_VAR 0 7
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: ST_TO_ADDR
// end ;
48993: LD_VAR 0 5
48997: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48998: LD_INT 0
49000: PPUSH
49001: PPUSH
49002: PPUSH
49003: PPUSH
// task := GetTaskList ( unit ) ;
49004: LD_ADDR_VAR 0 7
49008: PUSH
49009: LD_VAR 0 1
49013: PPUSH
49014: CALL_OW 437
49018: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
49019: LD_VAR 0 7
49023: NOT
49024: IFFALSE 49043
49026: PUSH
49027: LD_VAR 0 1
49031: PPUSH
49032: LD_VAR 0 2
49036: PPUSH
49037: CALL_OW 308
49041: NOT
49042: AND
49043: IFFALSE 49047
// exit ;
49045: GO 49165
// if IsInArea ( unit , area ) then
49047: LD_VAR 0 1
49051: PPUSH
49052: LD_VAR 0 2
49056: PPUSH
49057: CALL_OW 308
49061: IFFALSE 49079
// begin ComMoveToArea ( unit , goAway ) ;
49063: LD_VAR 0 1
49067: PPUSH
49068: LD_VAR 0 3
49072: PPUSH
49073: CALL_OW 113
// exit ;
49077: GO 49165
// end ; if task [ 1 ] [ 1 ] <> M then
49079: LD_VAR 0 7
49083: PUSH
49084: LD_INT 1
49086: ARRAY
49087: PUSH
49088: LD_INT 1
49090: ARRAY
49091: PUSH
49092: LD_STRING M
49094: NONEQUAL
49095: IFFALSE 49099
// exit ;
49097: GO 49165
// x := task [ 1 ] [ 2 ] ;
49099: LD_ADDR_VAR 0 5
49103: PUSH
49104: LD_VAR 0 7
49108: PUSH
49109: LD_INT 1
49111: ARRAY
49112: PUSH
49113: LD_INT 2
49115: ARRAY
49116: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49117: LD_ADDR_VAR 0 6
49121: PUSH
49122: LD_VAR 0 7
49126: PUSH
49127: LD_INT 1
49129: ARRAY
49130: PUSH
49131: LD_INT 3
49133: ARRAY
49134: ST_TO_ADDR
// if InArea ( x , y , area ) then
49135: LD_VAR 0 5
49139: PPUSH
49140: LD_VAR 0 6
49144: PPUSH
49145: LD_VAR 0 2
49149: PPUSH
49150: CALL_OW 309
49154: IFFALSE 49165
// ComStop ( unit ) ;
49156: LD_VAR 0 1
49160: PPUSH
49161: CALL_OW 141
// end ;
49165: LD_VAR 0 4
49169: RET
// export function Abs ( value ) ; begin
49170: LD_INT 0
49172: PPUSH
// result := value ;
49173: LD_ADDR_VAR 0 2
49177: PUSH
49178: LD_VAR 0 1
49182: ST_TO_ADDR
// if value < 0 then
49183: LD_VAR 0 1
49187: PUSH
49188: LD_INT 0
49190: LESS
49191: IFFALSE 49208
// result := value * - 1 ;
49193: LD_ADDR_VAR 0 2
49197: PUSH
49198: LD_VAR 0 1
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: MUL
49207: ST_TO_ADDR
// end ;
49208: LD_VAR 0 2
49212: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49213: LD_INT 0
49215: PPUSH
49216: PPUSH
49217: PPUSH
49218: PPUSH
49219: PPUSH
49220: PPUSH
49221: PPUSH
49222: PPUSH
// if not unit or not building then
49223: LD_VAR 0 1
49227: NOT
49228: IFTRUE 49237
49230: PUSH
49231: LD_VAR 0 2
49235: NOT
49236: OR
49237: IFFALSE 49241
// exit ;
49239: GO 49469
// x := GetX ( building ) ;
49241: LD_ADDR_VAR 0 4
49245: PUSH
49246: LD_VAR 0 2
49250: PPUSH
49251: CALL_OW 250
49255: ST_TO_ADDR
// y := GetY ( building ) ;
49256: LD_ADDR_VAR 0 6
49260: PUSH
49261: LD_VAR 0 2
49265: PPUSH
49266: CALL_OW 251
49270: ST_TO_ADDR
// d := GetDir ( building ) ;
49271: LD_ADDR_VAR 0 8
49275: PUSH
49276: LD_VAR 0 2
49280: PPUSH
49281: CALL_OW 254
49285: ST_TO_ADDR
// r := 4 ;
49286: LD_ADDR_VAR 0 9
49290: PUSH
49291: LD_INT 4
49293: ST_TO_ADDR
// for i := 1 to 5 do
49294: LD_ADDR_VAR 0 10
49298: PUSH
49299: DOUBLE
49300: LD_INT 1
49302: DEC
49303: ST_TO_ADDR
49304: LD_INT 5
49306: PUSH
49307: FOR_TO
49308: IFFALSE 49467
// begin _x := ShiftX ( x , d , r + i ) ;
49310: LD_ADDR_VAR 0 5
49314: PUSH
49315: LD_VAR 0 4
49319: PPUSH
49320: LD_VAR 0 8
49324: PPUSH
49325: LD_VAR 0 9
49329: PUSH
49330: LD_VAR 0 10
49334: PLUS
49335: PPUSH
49336: CALL_OW 272
49340: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49341: LD_ADDR_VAR 0 7
49345: PUSH
49346: LD_VAR 0 6
49350: PPUSH
49351: LD_VAR 0 8
49355: PPUSH
49356: LD_VAR 0 9
49360: PUSH
49361: LD_VAR 0 10
49365: PLUS
49366: PPUSH
49367: CALL_OW 273
49371: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49372: LD_VAR 0 5
49376: PPUSH
49377: LD_VAR 0 7
49381: PPUSH
49382: CALL_OW 488
49386: IFFALSE 49421
49388: PUSH
49389: LD_VAR 0 5
49393: PPUSH
49394: LD_VAR 0 7
49398: PPUSH
49399: CALL_OW 428
49403: PPUSH
49404: CALL_OW 247
49408: PUSH
49409: LD_INT 3
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: IN
49419: NOT
49420: AND
49421: IFFALSE 49465
// begin ComMoveXY ( unit , _x , _y ) ;
49423: LD_VAR 0 1
49427: PPUSH
49428: LD_VAR 0 5
49432: PPUSH
49433: LD_VAR 0 7
49437: PPUSH
49438: CALL_OW 111
// result := [ _x , _y ] ;
49442: LD_ADDR_VAR 0 3
49446: PUSH
49447: LD_VAR 0 5
49451: PUSH
49452: LD_VAR 0 7
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: ST_TO_ADDR
// exit ;
49461: POP
49462: POP
49463: GO 49469
// end ; end ;
49465: GO 49307
49467: POP
49468: POP
// end ;
49469: LD_VAR 0 3
49473: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49474: LD_INT 0
49476: PPUSH
49477: PPUSH
49478: PPUSH
// result := 0 ;
49479: LD_ADDR_VAR 0 3
49483: PUSH
49484: LD_INT 0
49486: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49487: LD_VAR 0 1
49491: PUSH
49492: LD_INT 0
49494: LESS
49495: IFTRUE 49507
49497: PUSH
49498: LD_VAR 0 1
49502: PUSH
49503: LD_INT 8
49505: GREATER
49506: OR
49507: IFTRUE 49519
49509: PUSH
49510: LD_VAR 0 2
49514: PUSH
49515: LD_INT 0
49517: LESS
49518: OR
49519: IFTRUE 49531
49521: PUSH
49522: LD_VAR 0 2
49526: PUSH
49527: LD_INT 8
49529: GREATER
49530: OR
49531: IFFALSE 49535
// exit ;
49533: GO 49610
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49535: LD_ADDR_VAR 0 4
49539: PUSH
49540: LD_INT 22
49542: PUSH
49543: LD_VAR 0 2
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PPUSH
49552: CALL_OW 69
49556: PUSH
49557: FOR_IN
49558: IFFALSE 49608
// begin un := UnitShoot ( i ) ;
49560: LD_ADDR_VAR 0 5
49564: PUSH
49565: LD_VAR 0 4
49569: PPUSH
49570: CALL_OW 504
49574: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49575: LD_VAR 0 5
49579: PPUSH
49580: CALL_OW 255
49584: PUSH
49585: LD_VAR 0 1
49589: EQUAL
49590: IFFALSE 49606
// begin result := un ;
49592: LD_ADDR_VAR 0 3
49596: PUSH
49597: LD_VAR 0 5
49601: ST_TO_ADDR
// exit ;
49602: POP
49603: POP
49604: GO 49610
// end ; end ;
49606: GO 49557
49608: POP
49609: POP
// end ;
49610: LD_VAR 0 3
49614: RET
// export function GetCargoBay ( units ) ; begin
49615: LD_INT 0
49617: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49618: LD_ADDR_VAR 0 2
49622: PUSH
49623: LD_VAR 0 1
49627: PPUSH
49628: LD_INT 2
49630: PUSH
49631: LD_INT 34
49633: PUSH
49634: LD_INT 12
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 34
49643: PUSH
49644: LD_INT 51
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 34
49653: PUSH
49654: LD_INT 32
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 34
49663: PUSH
49664: LD_INT 89
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: PPUSH
49678: CALL_OW 72
49682: ST_TO_ADDR
// end ;
49683: LD_VAR 0 2
49687: RET
// export function Negate ( value ) ; begin
49688: LD_INT 0
49690: PPUSH
// result := not value ;
49691: LD_ADDR_VAR 0 2
49695: PUSH
49696: LD_VAR 0 1
49700: NOT
49701: ST_TO_ADDR
// end ;
49702: LD_VAR 0 2
49706: RET
// export function Inc ( value ) ; begin
49707: LD_INT 0
49709: PPUSH
// result := value + 1 ;
49710: LD_ADDR_VAR 0 2
49714: PUSH
49715: LD_VAR 0 1
49719: PUSH
49720: LD_INT 1
49722: PLUS
49723: ST_TO_ADDR
// end ;
49724: LD_VAR 0 2
49728: RET
// export function Dec ( value ) ; begin
49729: LD_INT 0
49731: PPUSH
// result := value - 1 ;
49732: LD_ADDR_VAR 0 2
49736: PUSH
49737: LD_VAR 0 1
49741: PUSH
49742: LD_INT 1
49744: MINUS
49745: ST_TO_ADDR
// end ;
49746: LD_VAR 0 2
49750: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49751: LD_INT 0
49753: PPUSH
49754: PPUSH
49755: PPUSH
49756: PPUSH
49757: PPUSH
49758: PPUSH
49759: PPUSH
49760: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49761: LD_VAR 0 1
49765: PPUSH
49766: LD_VAR 0 2
49770: PPUSH
49771: CALL_OW 488
49775: NOT
49776: IFTRUE 49795
49778: PUSH
49779: LD_VAR 0 3
49783: PPUSH
49784: LD_VAR 0 4
49788: PPUSH
49789: CALL_OW 488
49793: NOT
49794: OR
49795: IFFALSE 49808
// begin result := - 1 ;
49797: LD_ADDR_VAR 0 5
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: ST_TO_ADDR
// exit ;
49806: GO 50043
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49808: LD_ADDR_VAR 0 12
49812: PUSH
49813: LD_VAR 0 1
49817: PPUSH
49818: LD_VAR 0 2
49822: PPUSH
49823: LD_VAR 0 3
49827: PPUSH
49828: LD_VAR 0 4
49832: PPUSH
49833: CALL 48879 0 4
49837: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49838: LD_ADDR_VAR 0 11
49842: PUSH
49843: LD_VAR 0 1
49847: PPUSH
49848: LD_VAR 0 2
49852: PPUSH
49853: LD_VAR 0 12
49857: PUSH
49858: LD_INT 1
49860: ARRAY
49861: PPUSH
49862: LD_VAR 0 12
49866: PUSH
49867: LD_INT 2
49869: ARRAY
49870: PPUSH
49871: CALL_OW 298
49875: ST_TO_ADDR
// distance := 9999 ;
49876: LD_ADDR_VAR 0 10
49880: PUSH
49881: LD_INT 9999
49883: ST_TO_ADDR
// for i := 0 to 5 do
49884: LD_ADDR_VAR 0 6
49888: PUSH
49889: DOUBLE
49890: LD_INT 0
49892: DEC
49893: ST_TO_ADDR
49894: LD_INT 5
49896: PUSH
49897: FOR_TO
49898: IFFALSE 50041
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49900: LD_ADDR_VAR 0 7
49904: PUSH
49905: LD_VAR 0 1
49909: PPUSH
49910: LD_VAR 0 6
49914: PPUSH
49915: LD_VAR 0 11
49919: PPUSH
49920: CALL_OW 272
49924: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49925: LD_ADDR_VAR 0 8
49929: PUSH
49930: LD_VAR 0 2
49934: PPUSH
49935: LD_VAR 0 6
49939: PPUSH
49940: LD_VAR 0 11
49944: PPUSH
49945: CALL_OW 273
49949: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49950: LD_VAR 0 7
49954: PPUSH
49955: LD_VAR 0 8
49959: PPUSH
49960: CALL_OW 488
49964: NOT
49965: IFFALSE 49969
// continue ;
49967: GO 49897
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49969: LD_ADDR_VAR 0 9
49973: PUSH
49974: LD_VAR 0 12
49978: PUSH
49979: LD_INT 1
49981: ARRAY
49982: PPUSH
49983: LD_VAR 0 12
49987: PUSH
49988: LD_INT 2
49990: ARRAY
49991: PPUSH
49992: LD_VAR 0 7
49996: PPUSH
49997: LD_VAR 0 8
50001: PPUSH
50002: CALL_OW 298
50006: ST_TO_ADDR
// if tmp < distance then
50007: LD_VAR 0 9
50011: PUSH
50012: LD_VAR 0 10
50016: LESS
50017: IFFALSE 50039
// begin result := i ;
50019: LD_ADDR_VAR 0 5
50023: PUSH
50024: LD_VAR 0 6
50028: ST_TO_ADDR
// distance := tmp ;
50029: LD_ADDR_VAR 0 10
50033: PUSH
50034: LD_VAR 0 9
50038: ST_TO_ADDR
// end ; end ;
50039: GO 49897
50041: POP
50042: POP
// end ;
50043: LD_VAR 0 5
50047: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50048: LD_INT 0
50050: PPUSH
50051: PPUSH
// if not driver or not IsInUnit ( driver ) then
50052: LD_VAR 0 1
50056: NOT
50057: IFTRUE 50071
50059: PUSH
50060: LD_VAR 0 1
50064: PPUSH
50065: CALL_OW 310
50069: NOT
50070: OR
50071: IFFALSE 50075
// exit ;
50073: GO 50165
// vehicle := IsInUnit ( driver ) ;
50075: LD_ADDR_VAR 0 3
50079: PUSH
50080: LD_VAR 0 1
50084: PPUSH
50085: CALL_OW 310
50089: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50090: LD_VAR 0 1
50094: PPUSH
50095: LD_STRING \
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: PUSH
50125: LD_STRING E
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: LD_VAR 0 3
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PPUSH
50161: CALL_OW 446
// end ;
50165: LD_VAR 0 2
50169: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50170: LD_INT 0
50172: PPUSH
50173: PPUSH
// if not driver or not IsInUnit ( driver ) then
50174: LD_VAR 0 1
50178: NOT
50179: IFTRUE 50193
50181: PUSH
50182: LD_VAR 0 1
50186: PPUSH
50187: CALL_OW 310
50191: NOT
50192: OR
50193: IFFALSE 50197
// exit ;
50195: GO 50287
// vehicle := IsInUnit ( driver ) ;
50197: LD_ADDR_VAR 0 3
50201: PUSH
50202: LD_VAR 0 1
50206: PPUSH
50207: CALL_OW 310
50211: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50212: LD_VAR 0 1
50216: PPUSH
50217: LD_STRING \
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: PUSH
50247: LD_STRING E
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: LD_VAR 0 3
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PPUSH
50283: CALL_OW 447
// end ;
50287: LD_VAR 0 2
50291: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50292: LD_INT 0
50294: PPUSH
50295: PPUSH
50296: PPUSH
// tmp := [ ] ;
50297: LD_ADDR_VAR 0 5
50301: PUSH
50302: EMPTY
50303: ST_TO_ADDR
// for i in units do
50304: LD_ADDR_VAR 0 4
50308: PUSH
50309: LD_VAR 0 1
50313: PUSH
50314: FOR_IN
50315: IFFALSE 50353
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50317: LD_ADDR_VAR 0 5
50321: PUSH
50322: LD_VAR 0 5
50326: PPUSH
50327: LD_VAR 0 5
50331: PUSH
50332: LD_INT 1
50334: PLUS
50335: PPUSH
50336: LD_VAR 0 4
50340: PPUSH
50341: CALL_OW 256
50345: PPUSH
50346: CALL_OW 2
50350: ST_TO_ADDR
50351: GO 50314
50353: POP
50354: POP
// if not tmp then
50355: LD_VAR 0 5
50359: NOT
50360: IFFALSE 50364
// exit ;
50362: GO 50412
// if asc then
50364: LD_VAR 0 2
50368: IFFALSE 50392
// result := SortListByListAsc ( units , tmp ) else
50370: LD_ADDR_VAR 0 3
50374: PUSH
50375: LD_VAR 0 1
50379: PPUSH
50380: LD_VAR 0 5
50384: PPUSH
50385: CALL_OW 76
50389: ST_TO_ADDR
50390: GO 50412
// result := SortListByListDesc ( units , tmp ) ;
50392: LD_ADDR_VAR 0 3
50396: PUSH
50397: LD_VAR 0 1
50401: PPUSH
50402: LD_VAR 0 5
50406: PPUSH
50407: CALL_OW 77
50411: ST_TO_ADDR
// end ;
50412: LD_VAR 0 3
50416: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50417: LD_INT 0
50419: PPUSH
50420: PPUSH
// task := GetTaskList ( mech ) ;
50421: LD_ADDR_VAR 0 4
50425: PUSH
50426: LD_VAR 0 1
50430: PPUSH
50431: CALL_OW 437
50435: ST_TO_ADDR
// if not task then
50436: LD_VAR 0 4
50440: NOT
50441: IFFALSE 50445
// exit ;
50443: GO 50489
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50445: LD_ADDR_VAR 0 3
50449: PUSH
50450: LD_VAR 0 4
50454: PUSH
50455: LD_INT 1
50457: ARRAY
50458: PUSH
50459: LD_INT 1
50461: ARRAY
50462: PUSH
50463: LD_STRING r
50465: EQUAL
50466: IFFALSE 50488
50468: PUSH
50469: LD_VAR 0 4
50473: PUSH
50474: LD_INT 1
50476: ARRAY
50477: PUSH
50478: LD_INT 4
50480: ARRAY
50481: PUSH
50482: LD_VAR 0 2
50486: EQUAL
50487: AND
50488: ST_TO_ADDR
// end ;
50489: LD_VAR 0 3
50493: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50494: LD_INT 0
50496: PPUSH
// SetDir ( unit , d ) ;
50497: LD_VAR 0 1
50501: PPUSH
50502: LD_VAR 0 4
50506: PPUSH
50507: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50511: LD_ADDR_VAR 0 6
50515: PUSH
50516: LD_VAR 0 1
50520: PPUSH
50521: LD_VAR 0 2
50525: PPUSH
50526: LD_VAR 0 3
50530: PPUSH
50531: LD_VAR 0 5
50535: PPUSH
50536: CALL_OW 48
50540: ST_TO_ADDR
// end ;
50541: LD_VAR 0 6
50545: RET
// export function ToNaturalNumber ( number ) ; begin
50546: LD_INT 0
50548: PPUSH
// result := number div 1 ;
50549: LD_ADDR_VAR 0 2
50553: PUSH
50554: LD_VAR 0 1
50558: PUSH
50559: LD_INT 1
50561: DIV
50562: ST_TO_ADDR
// if number < 0 then
50563: LD_VAR 0 1
50567: PUSH
50568: LD_INT 0
50570: LESS
50571: IFFALSE 50581
// result := 0 ;
50573: LD_ADDR_VAR 0 2
50577: PUSH
50578: LD_INT 0
50580: ST_TO_ADDR
// end ;
50581: LD_VAR 0 2
50585: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50586: LD_INT 0
50588: PPUSH
50589: PPUSH
50590: PPUSH
// if not buildings then
50591: LD_VAR 0 1
50595: NOT
50596: IFFALSE 50600
// exit ;
50598: GO 50715
// tmp := [ ] ;
50600: LD_ADDR_VAR 0 5
50604: PUSH
50605: EMPTY
50606: ST_TO_ADDR
// for b in buildings do
50607: LD_ADDR_VAR 0 4
50611: PUSH
50612: LD_VAR 0 1
50616: PUSH
50617: FOR_IN
50618: IFFALSE 50656
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50620: LD_ADDR_VAR 0 5
50624: PUSH
50625: LD_VAR 0 5
50629: PPUSH
50630: LD_VAR 0 5
50634: PUSH
50635: LD_INT 1
50637: PLUS
50638: PPUSH
50639: LD_VAR 0 4
50643: PPUSH
50644: CALL_OW 266
50648: PPUSH
50649: CALL_OW 1
50653: ST_TO_ADDR
50654: GO 50617
50656: POP
50657: POP
// if not tmp then
50658: LD_VAR 0 5
50662: NOT
50663: IFFALSE 50667
// exit ;
50665: GO 50715
// if asc then
50667: LD_VAR 0 2
50671: IFFALSE 50695
// result := SortListByListAsc ( buildings , tmp ) else
50673: LD_ADDR_VAR 0 3
50677: PUSH
50678: LD_VAR 0 1
50682: PPUSH
50683: LD_VAR 0 5
50687: PPUSH
50688: CALL_OW 76
50692: ST_TO_ADDR
50693: GO 50715
// result := SortListByListDesc ( buildings , tmp ) ;
50695: LD_ADDR_VAR 0 3
50699: PUSH
50700: LD_VAR 0 1
50704: PPUSH
50705: LD_VAR 0 5
50709: PPUSH
50710: CALL_OW 77
50714: ST_TO_ADDR
// end ;
50715: LD_VAR 0 3
50719: RET
// export function SortByClass ( units , class ) ; var un ; begin
50720: LD_INT 0
50722: PPUSH
50723: PPUSH
// if not units or not class then
50724: LD_VAR 0 1
50728: NOT
50729: IFTRUE 50738
50731: PUSH
50732: LD_VAR 0 2
50736: NOT
50737: OR
50738: IFFALSE 50742
// exit ;
50740: GO 50837
// result := [ ] ;
50742: LD_ADDR_VAR 0 3
50746: PUSH
50747: EMPTY
50748: ST_TO_ADDR
// for un in units do
50749: LD_ADDR_VAR 0 4
50753: PUSH
50754: LD_VAR 0 1
50758: PUSH
50759: FOR_IN
50760: IFFALSE 50835
// if GetClass ( un ) = class then
50762: LD_VAR 0 4
50766: PPUSH
50767: CALL_OW 257
50771: PUSH
50772: LD_VAR 0 2
50776: EQUAL
50777: IFFALSE 50804
// result := Insert ( result , 1 , un ) else
50779: LD_ADDR_VAR 0 3
50783: PUSH
50784: LD_VAR 0 3
50788: PPUSH
50789: LD_INT 1
50791: PPUSH
50792: LD_VAR 0 4
50796: PPUSH
50797: CALL_OW 2
50801: ST_TO_ADDR
50802: GO 50833
// result := Replace ( result , result + 1 , un ) ;
50804: LD_ADDR_VAR 0 3
50808: PUSH
50809: LD_VAR 0 3
50813: PPUSH
50814: LD_VAR 0 3
50818: PUSH
50819: LD_INT 1
50821: PLUS
50822: PPUSH
50823: LD_VAR 0 4
50827: PPUSH
50828: CALL_OW 1
50832: ST_TO_ADDR
50833: GO 50759
50835: POP
50836: POP
// end ;
50837: LD_VAR 0 3
50841: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50842: LD_INT 0
50844: PPUSH
50845: PPUSH
50846: PPUSH
50847: PPUSH
50848: PPUSH
50849: PPUSH
50850: PPUSH
// result := [ ] ;
50851: LD_ADDR_VAR 0 4
50855: PUSH
50856: EMPTY
50857: ST_TO_ADDR
// if x - r < 0 then
50858: LD_VAR 0 1
50862: PUSH
50863: LD_VAR 0 3
50867: MINUS
50868: PUSH
50869: LD_INT 0
50871: LESS
50872: IFFALSE 50884
// min_x := 0 else
50874: LD_ADDR_VAR 0 8
50878: PUSH
50879: LD_INT 0
50881: ST_TO_ADDR
50882: GO 50900
// min_x := x - r ;
50884: LD_ADDR_VAR 0 8
50888: PUSH
50889: LD_VAR 0 1
50893: PUSH
50894: LD_VAR 0 3
50898: MINUS
50899: ST_TO_ADDR
// if y - r < 0 then
50900: LD_VAR 0 2
50904: PUSH
50905: LD_VAR 0 3
50909: MINUS
50910: PUSH
50911: LD_INT 0
50913: LESS
50914: IFFALSE 50926
// min_y := 0 else
50916: LD_ADDR_VAR 0 7
50920: PUSH
50921: LD_INT 0
50923: ST_TO_ADDR
50924: GO 50942
// min_y := y - r ;
50926: LD_ADDR_VAR 0 7
50930: PUSH
50931: LD_VAR 0 2
50935: PUSH
50936: LD_VAR 0 3
50940: MINUS
50941: ST_TO_ADDR
// max_x := x + r ;
50942: LD_ADDR_VAR 0 9
50946: PUSH
50947: LD_VAR 0 1
50951: PUSH
50952: LD_VAR 0 3
50956: PLUS
50957: ST_TO_ADDR
// max_y := y + r ;
50958: LD_ADDR_VAR 0 10
50962: PUSH
50963: LD_VAR 0 2
50967: PUSH
50968: LD_VAR 0 3
50972: PLUS
50973: ST_TO_ADDR
// for _x = min_x to max_x do
50974: LD_ADDR_VAR 0 5
50978: PUSH
50979: DOUBLE
50980: LD_VAR 0 8
50984: DEC
50985: ST_TO_ADDR
50986: LD_VAR 0 9
50990: PUSH
50991: FOR_TO
50992: IFFALSE 51093
// for _y = min_y to max_y do
50994: LD_ADDR_VAR 0 6
50998: PUSH
50999: DOUBLE
51000: LD_VAR 0 7
51004: DEC
51005: ST_TO_ADDR
51006: LD_VAR 0 10
51010: PUSH
51011: FOR_TO
51012: IFFALSE 51089
// begin if not ValidHex ( _x , _y ) then
51014: LD_VAR 0 5
51018: PPUSH
51019: LD_VAR 0 6
51023: PPUSH
51024: CALL_OW 488
51028: NOT
51029: IFFALSE 51033
// continue ;
51031: GO 51011
// if GetResourceTypeXY ( _x , _y ) then
51033: LD_VAR 0 5
51037: PPUSH
51038: LD_VAR 0 6
51042: PPUSH
51043: CALL_OW 283
51047: IFFALSE 51087
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51049: LD_ADDR_VAR 0 4
51053: PUSH
51054: LD_VAR 0 4
51058: PPUSH
51059: LD_VAR 0 4
51063: PUSH
51064: LD_INT 1
51066: PLUS
51067: PPUSH
51068: LD_VAR 0 5
51072: PUSH
51073: LD_VAR 0 6
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PPUSH
51082: CALL_OW 1
51086: ST_TO_ADDR
// end ;
51087: GO 51011
51089: POP
51090: POP
51091: GO 50991
51093: POP
51094: POP
// end ;
51095: LD_VAR 0 4
51099: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
51100: LD_INT 0
51102: PPUSH
51103: PPUSH
51104: PPUSH
51105: PPUSH
51106: PPUSH
51107: PPUSH
51108: PPUSH
51109: PPUSH
// if not units then
51110: LD_VAR 0 1
51114: NOT
51115: IFFALSE 51119
// exit ;
51117: GO 51651
// result := UnitFilter ( units , [ f_ok ] ) ;
51119: LD_ADDR_VAR 0 3
51123: PUSH
51124: LD_VAR 0 1
51128: PPUSH
51129: LD_INT 50
51131: PUSH
51132: EMPTY
51133: LIST
51134: PPUSH
51135: CALL_OW 72
51139: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
51140: LD_ADDR_VAR 0 8
51144: PUSH
51145: LD_VAR 0 1
51149: PUSH
51150: LD_INT 1
51152: ARRAY
51153: PPUSH
51154: CALL_OW 255
51158: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51159: LD_ADDR_VAR 0 10
51163: PUSH
51164: LD_INT 29
51166: PUSH
51167: LD_INT 91
51169: PUSH
51170: LD_INT 49
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: LIST
51177: ST_TO_ADDR
// if not result then
51178: LD_VAR 0 3
51182: NOT
51183: IFFALSE 51187
// exit ;
51185: GO 51651
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51187: LD_ADDR_VAR 0 5
51191: PUSH
51192: LD_INT 81
51194: PUSH
51195: LD_VAR 0 8
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PPUSH
51204: CALL_OW 69
51208: ST_TO_ADDR
// for i in result do
51209: LD_ADDR_VAR 0 4
51213: PUSH
51214: LD_VAR 0 3
51218: PUSH
51219: FOR_IN
51220: IFFALSE 51649
// begin tag := GetTag ( i ) + 1 ;
51222: LD_ADDR_VAR 0 9
51226: PUSH
51227: LD_VAR 0 4
51231: PPUSH
51232: CALL_OW 110
51236: PUSH
51237: LD_INT 1
51239: PLUS
51240: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51241: LD_ADDR_VAR 0 7
51245: PUSH
51246: LD_VAR 0 4
51250: PPUSH
51251: CALL_OW 250
51255: PPUSH
51256: LD_VAR 0 4
51260: PPUSH
51261: CALL_OW 251
51265: PPUSH
51266: LD_INT 4
51268: PPUSH
51269: CALL 50842 0 3
51273: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51274: LD_VAR 0 4
51278: PPUSH
51279: CALL_OW 247
51283: PUSH
51284: LD_INT 2
51286: EQUAL
51287: IFFALSE 51299
51289: PUSH
51290: LD_VAR 0 7
51294: PUSH
51295: LD_INT 2
51297: GREATER
51298: AND
51299: IFFALSE 51319
51301: PUSH
51302: LD_VAR 0 4
51306: PPUSH
51307: CALL_OW 264
51311: PUSH
51312: LD_VAR 0 10
51316: IN
51317: NOT
51318: AND
51319: IFFALSE 51358
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51321: LD_VAR 0 4
51325: PPUSH
51326: LD_VAR 0 7
51330: PUSH
51331: LD_INT 1
51333: ARRAY
51334: PUSH
51335: LD_INT 1
51337: ARRAY
51338: PPUSH
51339: LD_VAR 0 7
51343: PUSH
51344: LD_INT 1
51346: ARRAY
51347: PUSH
51348: LD_INT 2
51350: ARRAY
51351: PPUSH
51352: CALL_OW 116
51356: GO 51647
// if path > tag then
51358: LD_VAR 0 2
51362: PUSH
51363: LD_VAR 0 9
51367: GREATER
51368: IFFALSE 51576
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51370: LD_ADDR_VAR 0 6
51374: PUSH
51375: LD_VAR 0 5
51379: PPUSH
51380: LD_INT 91
51382: PUSH
51383: LD_VAR 0 4
51387: PUSH
51388: LD_INT 8
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: LIST
51395: PPUSH
51396: CALL_OW 72
51400: ST_TO_ADDR
// if nearEnemy then
51401: LD_VAR 0 6
51405: IFFALSE 51474
// begin if GetWeapon ( i ) = ru_time_lapser then
51407: LD_VAR 0 4
51411: PPUSH
51412: CALL_OW 264
51416: PUSH
51417: LD_INT 49
51419: EQUAL
51420: IFFALSE 51448
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51422: LD_VAR 0 4
51426: PPUSH
51427: LD_VAR 0 6
51431: PPUSH
51432: LD_VAR 0 4
51436: PPUSH
51437: CALL_OW 74
51441: PPUSH
51442: CALL_OW 112
51446: GO 51472
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51448: LD_VAR 0 4
51452: PPUSH
51453: LD_VAR 0 6
51457: PPUSH
51458: LD_VAR 0 4
51462: PPUSH
51463: CALL_OW 74
51467: PPUSH
51468: CALL 52732 0 2
// end else
51472: GO 51574
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51474: LD_VAR 0 4
51478: PPUSH
51479: LD_VAR 0 2
51483: PUSH
51484: LD_VAR 0 9
51488: ARRAY
51489: PUSH
51490: LD_INT 1
51492: ARRAY
51493: PPUSH
51494: LD_VAR 0 2
51498: PUSH
51499: LD_VAR 0 9
51503: ARRAY
51504: PUSH
51505: LD_INT 2
51507: ARRAY
51508: PPUSH
51509: CALL_OW 297
51513: PUSH
51514: LD_INT 6
51516: GREATER
51517: IFFALSE 51560
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51519: LD_VAR 0 4
51523: PPUSH
51524: LD_VAR 0 2
51528: PUSH
51529: LD_VAR 0 9
51533: ARRAY
51534: PUSH
51535: LD_INT 1
51537: ARRAY
51538: PPUSH
51539: LD_VAR 0 2
51543: PUSH
51544: LD_VAR 0 9
51548: ARRAY
51549: PUSH
51550: LD_INT 2
51552: ARRAY
51553: PPUSH
51554: CALL_OW 114
51558: GO 51574
// SetTag ( i , tag ) ;
51560: LD_VAR 0 4
51564: PPUSH
51565: LD_VAR 0 9
51569: PPUSH
51570: CALL_OW 109
// end else
51574: GO 51647
// if enemy then
51576: LD_VAR 0 5
51580: IFFALSE 51647
// begin if GetWeapon ( i ) = ru_time_lapser then
51582: LD_VAR 0 4
51586: PPUSH
51587: CALL_OW 264
51591: PUSH
51592: LD_INT 49
51594: EQUAL
51595: IFFALSE 51623
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51597: LD_VAR 0 4
51601: PPUSH
51602: LD_VAR 0 5
51606: PPUSH
51607: LD_VAR 0 4
51611: PPUSH
51612: CALL_OW 74
51616: PPUSH
51617: CALL_OW 112
51621: GO 51647
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51623: LD_VAR 0 4
51627: PPUSH
51628: LD_VAR 0 5
51632: PPUSH
51633: LD_VAR 0 4
51637: PPUSH
51638: CALL_OW 74
51642: PPUSH
51643: CALL 52732 0 2
// end ; end ;
51647: GO 51219
51649: POP
51650: POP
// end ;
51651: LD_VAR 0 3
51655: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51656: LD_INT 0
51658: PPUSH
51659: PPUSH
51660: PPUSH
// if not unit or IsInUnit ( unit ) then
51661: LD_VAR 0 1
51665: NOT
51666: IFTRUE 51679
51668: PUSH
51669: LD_VAR 0 1
51673: PPUSH
51674: CALL_OW 310
51678: OR
51679: IFFALSE 51683
// exit ;
51681: GO 51774
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51683: LD_ADDR_VAR 0 4
51687: PUSH
51688: LD_VAR 0 1
51692: PPUSH
51693: CALL_OW 250
51697: PPUSH
51698: LD_VAR 0 2
51702: PPUSH
51703: LD_INT 1
51705: PPUSH
51706: CALL_OW 272
51710: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51711: LD_ADDR_VAR 0 5
51715: PUSH
51716: LD_VAR 0 1
51720: PPUSH
51721: CALL_OW 251
51725: PPUSH
51726: LD_VAR 0 2
51730: PPUSH
51731: LD_INT 1
51733: PPUSH
51734: CALL_OW 273
51738: ST_TO_ADDR
// if ValidHex ( x , y ) then
51739: LD_VAR 0 4
51743: PPUSH
51744: LD_VAR 0 5
51748: PPUSH
51749: CALL_OW 488
51753: IFFALSE 51774
// ComTurnXY ( unit , x , y ) ;
51755: LD_VAR 0 1
51759: PPUSH
51760: LD_VAR 0 4
51764: PPUSH
51765: LD_VAR 0 5
51769: PPUSH
51770: CALL_OW 118
// end ;
51774: LD_VAR 0 3
51778: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51779: LD_INT 0
51781: PPUSH
51782: PPUSH
// result := false ;
51783: LD_ADDR_VAR 0 3
51787: PUSH
51788: LD_INT 0
51790: ST_TO_ADDR
// if not units then
51791: LD_VAR 0 2
51795: NOT
51796: IFFALSE 51800
// exit ;
51798: GO 51845
// for i in units do
51800: LD_ADDR_VAR 0 4
51804: PUSH
51805: LD_VAR 0 2
51809: PUSH
51810: FOR_IN
51811: IFFALSE 51843
// if See ( side , i ) then
51813: LD_VAR 0 1
51817: PPUSH
51818: LD_VAR 0 4
51822: PPUSH
51823: CALL_OW 292
51827: IFFALSE 51841
// begin result := true ;
51829: LD_ADDR_VAR 0 3
51833: PUSH
51834: LD_INT 1
51836: ST_TO_ADDR
// exit ;
51837: POP
51838: POP
51839: GO 51845
// end ;
51841: GO 51810
51843: POP
51844: POP
// end ;
51845: LD_VAR 0 3
51849: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51850: LD_INT 0
51852: PPUSH
51853: PPUSH
51854: PPUSH
51855: PPUSH
// if not unit or not points then
51856: LD_VAR 0 1
51860: NOT
51861: IFTRUE 51870
51863: PUSH
51864: LD_VAR 0 2
51868: NOT
51869: OR
51870: IFFALSE 51874
// exit ;
51872: GO 51964
// dist := 99999 ;
51874: LD_ADDR_VAR 0 5
51878: PUSH
51879: LD_INT 99999
51881: ST_TO_ADDR
// for i in points do
51882: LD_ADDR_VAR 0 4
51886: PUSH
51887: LD_VAR 0 2
51891: PUSH
51892: FOR_IN
51893: IFFALSE 51962
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51895: LD_ADDR_VAR 0 6
51899: PUSH
51900: LD_VAR 0 1
51904: PPUSH
51905: LD_VAR 0 4
51909: PUSH
51910: LD_INT 1
51912: ARRAY
51913: PPUSH
51914: LD_VAR 0 4
51918: PUSH
51919: LD_INT 2
51921: ARRAY
51922: PPUSH
51923: CALL_OW 297
51927: ST_TO_ADDR
// if tmpDist < dist then
51928: LD_VAR 0 6
51932: PUSH
51933: LD_VAR 0 5
51937: LESS
51938: IFFALSE 51960
// begin result := i ;
51940: LD_ADDR_VAR 0 3
51944: PUSH
51945: LD_VAR 0 4
51949: ST_TO_ADDR
// dist := tmpDist ;
51950: LD_ADDR_VAR 0 5
51954: PUSH
51955: LD_VAR 0 6
51959: ST_TO_ADDR
// end ; end ;
51960: GO 51892
51962: POP
51963: POP
// end ;
51964: LD_VAR 0 3
51968: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51969: LD_INT 0
51971: PPUSH
// uc_side := side ;
51972: LD_ADDR_OWVAR 20
51976: PUSH
51977: LD_VAR 0 1
51981: ST_TO_ADDR
// uc_nation := 3 ;
51982: LD_ADDR_OWVAR 21
51986: PUSH
51987: LD_INT 3
51989: ST_TO_ADDR
// vc_chassis := 25 ;
51990: LD_ADDR_OWVAR 37
51994: PUSH
51995: LD_INT 25
51997: ST_TO_ADDR
// vc_engine := engine_siberite ;
51998: LD_ADDR_OWVAR 39
52002: PUSH
52003: LD_INT 3
52005: ST_TO_ADDR
// vc_control := control_computer ;
52006: LD_ADDR_OWVAR 38
52010: PUSH
52011: LD_INT 3
52013: ST_TO_ADDR
// vc_weapon := 59 ;
52014: LD_ADDR_OWVAR 40
52018: PUSH
52019: LD_INT 59
52021: ST_TO_ADDR
// result := CreateVehicle ;
52022: LD_ADDR_VAR 0 5
52026: PUSH
52027: CALL_OW 45
52031: ST_TO_ADDR
// SetDir ( result , d ) ;
52032: LD_VAR 0 5
52036: PPUSH
52037: LD_VAR 0 4
52041: PPUSH
52042: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
52046: LD_VAR 0 5
52050: PPUSH
52051: LD_VAR 0 2
52055: PPUSH
52056: LD_VAR 0 3
52060: PPUSH
52061: LD_INT 0
52063: PPUSH
52064: CALL_OW 48
// end ;
52068: LD_VAR 0 5
52072: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
52073: LD_INT 0
52075: PPUSH
52076: PPUSH
52077: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
52078: LD_ADDR_VAR 0 2
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
52101: LD_VAR 0 1
52105: NOT
52106: IFTRUE 52139
52108: PUSH
52109: LD_VAR 0 1
52113: PPUSH
52114: CALL_OW 264
52118: PUSH
52119: LD_INT 12
52121: PUSH
52122: LD_INT 51
52124: PUSH
52125: LD_INT 32
52127: PUSH
52128: LD_INT 89
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: IN
52137: NOT
52138: OR
52139: IFFALSE 52143
// exit ;
52141: GO 52241
// for i := 1 to 3 do
52143: LD_ADDR_VAR 0 3
52147: PUSH
52148: DOUBLE
52149: LD_INT 1
52151: DEC
52152: ST_TO_ADDR
52153: LD_INT 3
52155: PUSH
52156: FOR_TO
52157: IFFALSE 52239
// begin tmp := GetCargo ( cargo , i ) ;
52159: LD_ADDR_VAR 0 4
52163: PUSH
52164: LD_VAR 0 1
52168: PPUSH
52169: LD_VAR 0 3
52173: PPUSH
52174: CALL_OW 289
52178: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52179: LD_ADDR_VAR 0 2
52183: PUSH
52184: LD_VAR 0 2
52188: PPUSH
52189: LD_VAR 0 3
52193: PPUSH
52194: LD_VAR 0 4
52198: PPUSH
52199: CALL_OW 1
52203: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52204: LD_ADDR_VAR 0 2
52208: PUSH
52209: LD_VAR 0 2
52213: PPUSH
52214: LD_INT 4
52216: PPUSH
52217: LD_VAR 0 2
52221: PUSH
52222: LD_INT 4
52224: ARRAY
52225: PUSH
52226: LD_VAR 0 4
52230: PLUS
52231: PPUSH
52232: CALL_OW 1
52236: ST_TO_ADDR
// end ;
52237: GO 52156
52239: POP
52240: POP
// end ;
52241: LD_VAR 0 2
52245: RET
// export function Length ( array ) ; begin
52246: LD_INT 0
52248: PPUSH
// result := array + 0 ;
52249: LD_ADDR_VAR 0 2
52253: PUSH
52254: LD_VAR 0 1
52258: PUSH
52259: LD_INT 0
52261: PLUS
52262: ST_TO_ADDR
// end ;
52263: LD_VAR 0 2
52267: RET
// export function PrepareArray ( array ) ; begin
52268: LD_INT 0
52270: PPUSH
// result := array diff 0 ;
52271: LD_ADDR_VAR 0 2
52275: PUSH
52276: LD_VAR 0 1
52280: PUSH
52281: LD_INT 0
52283: DIFF
52284: ST_TO_ADDR
// if not result [ 1 ] then
52285: LD_VAR 0 2
52289: PUSH
52290: LD_INT 1
52292: ARRAY
52293: NOT
52294: IFFALSE 52314
// result := Delete ( result , 1 ) ;
52296: LD_ADDR_VAR 0 2
52300: PUSH
52301: LD_VAR 0 2
52305: PPUSH
52306: LD_INT 1
52308: PPUSH
52309: CALL_OW 3
52313: ST_TO_ADDR
// end ;
52314: LD_VAR 0 2
52318: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52319: LD_INT 0
52321: PPUSH
52322: PPUSH
52323: PPUSH
52324: PPUSH
// sibRocketRange := 25 ;
52325: LD_ADDR_VAR 0 6
52329: PUSH
52330: LD_INT 25
52332: ST_TO_ADDR
// result := false ;
52333: LD_ADDR_VAR 0 4
52337: PUSH
52338: LD_INT 0
52340: ST_TO_ADDR
// for i := 0 to 5 do
52341: LD_ADDR_VAR 0 5
52345: PUSH
52346: DOUBLE
52347: LD_INT 0
52349: DEC
52350: ST_TO_ADDR
52351: LD_INT 5
52353: PUSH
52354: FOR_TO
52355: IFFALSE 52422
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52357: LD_VAR 0 1
52361: PPUSH
52362: LD_VAR 0 5
52366: PPUSH
52367: LD_VAR 0 6
52371: PPUSH
52372: CALL_OW 272
52376: PPUSH
52377: LD_VAR 0 2
52381: PPUSH
52382: LD_VAR 0 5
52386: PPUSH
52387: LD_VAR 0 6
52391: PPUSH
52392: CALL_OW 273
52396: PPUSH
52397: LD_VAR 0 3
52401: PPUSH
52402: CALL_OW 309
52406: IFFALSE 52420
// begin result := true ;
52408: LD_ADDR_VAR 0 4
52412: PUSH
52413: LD_INT 1
52415: ST_TO_ADDR
// exit ;
52416: POP
52417: POP
52418: GO 52424
// end ;
52420: GO 52354
52422: POP
52423: POP
// end ;
52424: LD_VAR 0 4
52428: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52429: LD_INT 0
52431: PPUSH
52432: PPUSH
52433: PPUSH
// if btype = b_depot then
52434: LD_VAR 0 2
52438: PUSH
52439: LD_INT 0
52441: EQUAL
52442: IFFALSE 52454
// begin result := true ;
52444: LD_ADDR_VAR 0 3
52448: PUSH
52449: LD_INT 1
52451: ST_TO_ADDR
// exit ;
52452: GO 52574
// end ; pom := GetBase ( depot ) ;
52454: LD_ADDR_VAR 0 4
52458: PUSH
52459: LD_VAR 0 1
52463: PPUSH
52464: CALL_OW 274
52468: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52469: LD_ADDR_VAR 0 5
52473: PUSH
52474: LD_VAR 0 2
52478: PPUSH
52479: LD_VAR 0 1
52483: PPUSH
52484: CALL_OW 248
52488: PPUSH
52489: CALL_OW 450
52493: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52494: LD_ADDR_VAR 0 3
52498: PUSH
52499: LD_VAR 0 4
52503: PPUSH
52504: LD_INT 1
52506: PPUSH
52507: CALL_OW 275
52511: PUSH
52512: LD_VAR 0 5
52516: PUSH
52517: LD_INT 1
52519: ARRAY
52520: GREATEREQUAL
52521: IFFALSE 52547
52523: PUSH
52524: LD_VAR 0 4
52528: PPUSH
52529: LD_INT 2
52531: PPUSH
52532: CALL_OW 275
52536: PUSH
52537: LD_VAR 0 5
52541: PUSH
52542: LD_INT 2
52544: ARRAY
52545: GREATEREQUAL
52546: AND
52547: IFFALSE 52573
52549: PUSH
52550: LD_VAR 0 4
52554: PPUSH
52555: LD_INT 3
52557: PPUSH
52558: CALL_OW 275
52562: PUSH
52563: LD_VAR 0 5
52567: PUSH
52568: LD_INT 3
52570: ARRAY
52571: GREATEREQUAL
52572: AND
52573: ST_TO_ADDR
// end ;
52574: LD_VAR 0 3
52578: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52579: LD_INT 0
52581: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52582: LD_VAR 0 1
52586: PPUSH
52587: LD_VAR 0 2
52591: PPUSH
52592: LD_INT 0
52594: PPUSH
52595: LD_INT 0
52597: PPUSH
52598: LD_INT 1
52600: PPUSH
52601: LD_INT 0
52603: PPUSH
52604: CALL_OW 587
// end ;
52608: LD_VAR 0 3
52612: RET
// export function CenterOnNow ( unit ) ; begin
52613: LD_INT 0
52615: PPUSH
// result := IsInUnit ( unit ) ;
52616: LD_ADDR_VAR 0 2
52620: PUSH
52621: LD_VAR 0 1
52625: PPUSH
52626: CALL_OW 310
52630: ST_TO_ADDR
// if not result then
52631: LD_VAR 0 2
52635: NOT
52636: IFFALSE 52648
// result := unit ;
52638: LD_ADDR_VAR 0 2
52642: PUSH
52643: LD_VAR 0 1
52647: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52648: LD_VAR 0 1
52652: PPUSH
52653: CALL_OW 87
// end ;
52657: LD_VAR 0 2
52661: RET
// export function ComMoveHex ( unit , hex ) ; begin
52662: LD_INT 0
52664: PPUSH
// if not hex then
52665: LD_VAR 0 2
52669: NOT
52670: IFFALSE 52674
// exit ;
52672: GO 52727
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52674: LD_VAR 0 2
52678: PUSH
52679: LD_INT 1
52681: ARRAY
52682: PPUSH
52683: LD_VAR 0 2
52687: PUSH
52688: LD_INT 2
52690: ARRAY
52691: PPUSH
52692: CALL_OW 428
52696: IFFALSE 52700
// exit ;
52698: GO 52727
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52700: LD_VAR 0 1
52704: PPUSH
52705: LD_VAR 0 2
52709: PUSH
52710: LD_INT 1
52712: ARRAY
52713: PPUSH
52714: LD_VAR 0 2
52718: PUSH
52719: LD_INT 2
52721: ARRAY
52722: PPUSH
52723: CALL_OW 111
// end ;
52727: LD_VAR 0 3
52731: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52732: LD_INT 0
52734: PPUSH
52735: PPUSH
52736: PPUSH
// if not unit or not enemy then
52737: LD_VAR 0 1
52741: NOT
52742: IFTRUE 52751
52744: PUSH
52745: LD_VAR 0 2
52749: NOT
52750: OR
52751: IFFALSE 52755
// exit ;
52753: GO 52881
// x := GetX ( enemy ) ;
52755: LD_ADDR_VAR 0 4
52759: PUSH
52760: LD_VAR 0 2
52764: PPUSH
52765: CALL_OW 250
52769: ST_TO_ADDR
// y := GetY ( enemy ) ;
52770: LD_ADDR_VAR 0 5
52774: PUSH
52775: LD_VAR 0 2
52779: PPUSH
52780: CALL_OW 251
52784: ST_TO_ADDR
// if ValidHex ( x , y ) then
52785: LD_VAR 0 4
52789: PPUSH
52790: LD_VAR 0 5
52794: PPUSH
52795: CALL_OW 488
52799: IFFALSE 52881
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52801: LD_VAR 0 2
52805: PPUSH
52806: CALL_OW 247
52810: PUSH
52811: LD_INT 3
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: IN
52821: IFTRUE 52844
52823: PUSH
52824: LD_VAR 0 1
52828: PPUSH
52829: CALL_OW 255
52833: PPUSH
52834: LD_VAR 0 2
52838: PPUSH
52839: CALL_OW 292
52843: OR
52844: IFFALSE 52862
// ComAttackUnit ( unit , enemy ) else
52846: LD_VAR 0 1
52850: PPUSH
52851: LD_VAR 0 2
52855: PPUSH
52856: CALL_OW 115
52860: GO 52881
// ComAgressiveMove ( unit , x , y ) ;
52862: LD_VAR 0 1
52866: PPUSH
52867: LD_VAR 0 4
52871: PPUSH
52872: LD_VAR 0 5
52876: PPUSH
52877: CALL_OW 114
// end ;
52881: LD_VAR 0 3
52885: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52886: LD_INT 0
52888: PPUSH
52889: PPUSH
52890: PPUSH
// list := AreaToList ( area , 0 ) ;
52891: LD_ADDR_VAR 0 5
52895: PUSH
52896: LD_VAR 0 1
52900: PPUSH
52901: LD_INT 0
52903: PPUSH
52904: CALL_OW 517
52908: ST_TO_ADDR
// if not list then
52909: LD_VAR 0 5
52913: NOT
52914: IFFALSE 52918
// exit ;
52916: GO 53048
// if all then
52918: LD_VAR 0 2
52922: IFFALSE 53010
// begin for i := 1 to list [ 1 ] do
52924: LD_ADDR_VAR 0 4
52928: PUSH
52929: DOUBLE
52930: LD_INT 1
52932: DEC
52933: ST_TO_ADDR
52934: LD_VAR 0 5
52938: PUSH
52939: LD_INT 1
52941: ARRAY
52942: PUSH
52943: FOR_TO
52944: IFFALSE 53006
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52946: LD_ADDR_VAR 0 3
52950: PUSH
52951: LD_VAR 0 3
52955: PPUSH
52956: LD_VAR 0 3
52960: PUSH
52961: LD_INT 1
52963: PLUS
52964: PPUSH
52965: LD_VAR 0 5
52969: PUSH
52970: LD_INT 1
52972: ARRAY
52973: PUSH
52974: LD_VAR 0 4
52978: ARRAY
52979: PUSH
52980: LD_VAR 0 5
52984: PUSH
52985: LD_INT 2
52987: ARRAY
52988: PUSH
52989: LD_VAR 0 4
52993: ARRAY
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PPUSH
52999: CALL_OW 1
53003: ST_TO_ADDR
53004: GO 52943
53006: POP
53007: POP
// exit ;
53008: GO 53048
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
53010: LD_ADDR_VAR 0 3
53014: PUSH
53015: LD_VAR 0 5
53019: PUSH
53020: LD_INT 1
53022: ARRAY
53023: PUSH
53024: LD_INT 1
53026: ARRAY
53027: PUSH
53028: LD_VAR 0 5
53032: PUSH
53033: LD_INT 2
53035: ARRAY
53036: PUSH
53037: LD_INT 1
53039: ARRAY
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: EMPTY
53046: LIST
53047: ST_TO_ADDR
// end ;
53048: LD_VAR 0 3
53052: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
53053: LD_INT 0
53055: PPUSH
53056: PPUSH
// list := AreaToList ( area , 0 ) ;
53057: LD_ADDR_VAR 0 4
53061: PUSH
53062: LD_VAR 0 1
53066: PPUSH
53067: LD_INT 0
53069: PPUSH
53070: CALL_OW 517
53074: ST_TO_ADDR
// if not list then
53075: LD_VAR 0 4
53079: NOT
53080: IFFALSE 53084
// exit ;
53082: GO 53125
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
53084: LD_ADDR_VAR 0 3
53088: PUSH
53089: LD_VAR 0 4
53093: PUSH
53094: LD_INT 1
53096: ARRAY
53097: PUSH
53098: LD_INT 1
53100: ARRAY
53101: PUSH
53102: LD_VAR 0 4
53106: PUSH
53107: LD_INT 2
53109: ARRAY
53110: PUSH
53111: LD_INT 1
53113: ARRAY
53114: PUSH
53115: LD_VAR 0 2
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: LIST
53124: ST_TO_ADDR
// end ;
53125: LD_VAR 0 3
53129: RET
// export function First ( array ) ; begin
53130: LD_INT 0
53132: PPUSH
// if not array then
53133: LD_VAR 0 1
53137: NOT
53138: IFFALSE 53142
// exit ;
53140: GO 53156
// result := array [ 1 ] ;
53142: LD_ADDR_VAR 0 2
53146: PUSH
53147: LD_VAR 0 1
53151: PUSH
53152: LD_INT 1
53154: ARRAY
53155: ST_TO_ADDR
// end ;
53156: LD_VAR 0 2
53160: RET
// export function Last ( array ) ; begin
53161: LD_INT 0
53163: PPUSH
// if not array then
53164: LD_VAR 0 1
53168: NOT
53169: IFFALSE 53173
// exit ;
53171: GO 53189
// result := array [ array ] ;
53173: LD_ADDR_VAR 0 2
53177: PUSH
53178: LD_VAR 0 1
53182: PUSH
53183: LD_VAR 0 1
53187: ARRAY
53188: ST_TO_ADDR
// end ;
53189: LD_VAR 0 2
53193: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53194: LD_INT 0
53196: PPUSH
53197: PPUSH
// result := [ ] ;
53198: LD_ADDR_VAR 0 5
53202: PUSH
53203: EMPTY
53204: ST_TO_ADDR
// if not array then
53205: LD_VAR 0 1
53209: NOT
53210: IFFALSE 53214
// exit ;
53212: GO 53326
// for i := 1 to array do
53214: LD_ADDR_VAR 0 6
53218: PUSH
53219: DOUBLE
53220: LD_INT 1
53222: DEC
53223: ST_TO_ADDR
53224: LD_VAR 0 1
53228: PUSH
53229: FOR_TO
53230: IFFALSE 53324
// if array [ i ] [ index ] = value then
53232: LD_VAR 0 1
53236: PUSH
53237: LD_VAR 0 6
53241: ARRAY
53242: PUSH
53243: LD_VAR 0 2
53247: ARRAY
53248: PUSH
53249: LD_VAR 0 3
53253: EQUAL
53254: IFFALSE 53322
// begin if indexColumn then
53256: LD_VAR 0 4
53260: IFFALSE 53296
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53262: LD_ADDR_VAR 0 5
53266: PUSH
53267: LD_VAR 0 5
53271: PPUSH
53272: LD_VAR 0 1
53276: PUSH
53277: LD_VAR 0 6
53281: ARRAY
53282: PUSH
53283: LD_VAR 0 4
53287: ARRAY
53288: PPUSH
53289: CALL 48334 0 2
53293: ST_TO_ADDR
53294: GO 53322
// result := Join ( result , array [ i ] ) ;
53296: LD_ADDR_VAR 0 5
53300: PUSH
53301: LD_VAR 0 5
53305: PPUSH
53306: LD_VAR 0 1
53310: PUSH
53311: LD_VAR 0 6
53315: ARRAY
53316: PPUSH
53317: CALL 48334 0 2
53321: ST_TO_ADDR
// end ;
53322: GO 53229
53324: POP
53325: POP
// end ;
53326: LD_VAR 0 5
53330: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53331: LD_INT 0
53333: PPUSH
// if not vehicles or not parkingPoint then
53334: LD_VAR 0 1
53338: NOT
53339: IFTRUE 53348
53341: PUSH
53342: LD_VAR 0 2
53346: NOT
53347: OR
53348: IFFALSE 53352
// exit ;
53350: GO 53450
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53352: LD_ADDR_VAR 0 1
53356: PUSH
53357: LD_VAR 0 1
53361: PPUSH
53362: LD_INT 50
53364: PUSH
53365: EMPTY
53366: LIST
53367: PUSH
53368: LD_INT 3
53370: PUSH
53371: LD_INT 92
53373: PUSH
53374: LD_VAR 0 2
53378: PUSH
53379: LD_INT 1
53381: ARRAY
53382: PUSH
53383: LD_VAR 0 2
53387: PUSH
53388: LD_INT 2
53390: ARRAY
53391: PUSH
53392: LD_INT 8
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PPUSH
53409: CALL_OW 72
53413: ST_TO_ADDR
// if not vehicles then
53414: LD_VAR 0 1
53418: NOT
53419: IFFALSE 53423
// exit ;
53421: GO 53450
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53423: LD_VAR 0 1
53427: PPUSH
53428: LD_VAR 0 2
53432: PUSH
53433: LD_INT 1
53435: ARRAY
53436: PPUSH
53437: LD_VAR 0 2
53441: PUSH
53442: LD_INT 2
53444: ARRAY
53445: PPUSH
53446: CALL_OW 111
// end ;
53450: LD_VAR 0 3
53454: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53455: LD_INT 0
53457: PPUSH
53458: PPUSH
53459: PPUSH
// if not side or not area then
53460: LD_VAR 0 1
53464: NOT
53465: IFTRUE 53474
53467: PUSH
53468: LD_VAR 0 2
53472: NOT
53473: OR
53474: IFFALSE 53478
// exit ;
53476: GO 53597
// tmp := AreaToList ( area , 0 ) ;
53478: LD_ADDR_VAR 0 5
53482: PUSH
53483: LD_VAR 0 2
53487: PPUSH
53488: LD_INT 0
53490: PPUSH
53491: CALL_OW 517
53495: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53496: LD_ADDR_VAR 0 4
53500: PUSH
53501: DOUBLE
53502: LD_INT 1
53504: DEC
53505: ST_TO_ADDR
53506: LD_VAR 0 5
53510: PUSH
53511: LD_INT 1
53513: ARRAY
53514: PUSH
53515: FOR_TO
53516: IFFALSE 53595
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53518: LD_VAR 0 5
53522: PUSH
53523: LD_INT 1
53525: ARRAY
53526: PUSH
53527: LD_VAR 0 4
53531: ARRAY
53532: PPUSH
53533: LD_VAR 0 5
53537: PUSH
53538: LD_INT 2
53540: ARRAY
53541: PUSH
53542: LD_VAR 0 4
53546: ARRAY
53547: PPUSH
53548: CALL_OW 351
53552: IFFALSE 53593
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53554: LD_VAR 0 5
53558: PUSH
53559: LD_INT 1
53561: ARRAY
53562: PUSH
53563: LD_VAR 0 4
53567: ARRAY
53568: PPUSH
53569: LD_VAR 0 5
53573: PUSH
53574: LD_INT 2
53576: ARRAY
53577: PUSH
53578: LD_VAR 0 4
53582: ARRAY
53583: PPUSH
53584: LD_VAR 0 1
53588: PPUSH
53589: CALL_OW 244
// end ;
53593: GO 53515
53595: POP
53596: POP
// end ;
53597: LD_VAR 0 3
53601: RET
// export function UniqueArray ( array ) ; var i ; begin
53602: LD_INT 0
53604: PPUSH
53605: PPUSH
// result := [ ] ;
53606: LD_ADDR_VAR 0 2
53610: PUSH
53611: EMPTY
53612: ST_TO_ADDR
// if not array then
53613: LD_VAR 0 1
53617: NOT
53618: IFFALSE 53622
// exit ;
53620: GO 53683
// for i := 1 to array do
53622: LD_ADDR_VAR 0 3
53626: PUSH
53627: DOUBLE
53628: LD_INT 1
53630: DEC
53631: ST_TO_ADDR
53632: LD_VAR 0 1
53636: PUSH
53637: FOR_TO
53638: IFFALSE 53681
// if not array [ i ] in result then
53640: LD_VAR 0 1
53644: PUSH
53645: LD_VAR 0 3
53649: ARRAY
53650: PUSH
53651: LD_VAR 0 2
53655: IN
53656: NOT
53657: IFFALSE 53679
// result := Join ( result , i ) ;
53659: LD_ADDR_VAR 0 2
53663: PUSH
53664: LD_VAR 0 2
53668: PPUSH
53669: LD_VAR 0 3
53673: PPUSH
53674: CALL 48334 0 2
53678: ST_TO_ADDR
53679: GO 53637
53681: POP
53682: POP
// end ; end_of_file
53683: LD_VAR 0 2
53687: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53688: LD_VAR 0 1
53692: PUSH
53693: LD_INT 200
53695: DOUBLE
53696: GREATEREQUAL
53697: IFFALSE 53705
53699: LD_INT 299
53701: DOUBLE
53702: LESSEQUAL
53703: IFTRUE 53707
53705: GO 53739
53707: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53708: LD_VAR 0 1
53712: PPUSH
53713: LD_VAR 0 2
53717: PPUSH
53718: LD_VAR 0 3
53722: PPUSH
53723: LD_VAR 0 4
53727: PPUSH
53728: LD_VAR 0 5
53732: PPUSH
53733: CALL 54520 0 5
53737: GO 53816
53739: LD_INT 300
53741: DOUBLE
53742: GREATEREQUAL
53743: IFFALSE 53751
53745: LD_INT 399
53747: DOUBLE
53748: LESSEQUAL
53749: IFTRUE 53753
53751: GO 53815
53753: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53754: LD_VAR 0 1
53758: PPUSH
53759: LD_VAR 0 2
53763: PPUSH
53764: LD_VAR 0 3
53768: PPUSH
53769: LD_VAR 0 4
53773: PPUSH
53774: LD_VAR 0 5
53778: PPUSH
53779: LD_VAR 0 6
53783: PPUSH
53784: LD_VAR 0 7
53788: PPUSH
53789: LD_VAR 0 8
53793: PPUSH
53794: LD_VAR 0 9
53798: PPUSH
53799: LD_VAR 0 10
53803: PPUSH
53804: LD_VAR 0 11
53808: PPUSH
53809: CALL 61606 0 11
53813: GO 53816
53815: POP
// end ;
53816: PPOPN 11
53818: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53819: LD_VAR 0 1
53823: PPUSH
53824: LD_VAR 0 2
53828: PPUSH
53829: LD_VAR 0 3
53833: PPUSH
53834: LD_VAR 0 4
53838: PPUSH
53839: LD_VAR 0 5
53843: PPUSH
53844: CALL 53901 0 5
// end ; end_of_file
53848: PPOPN 5
53850: END
// export function SOS_UnitDestroyed ( un ) ; begin
53851: LD_INT 0
53853: PPUSH
// ComRadiation ( un ) ;
53854: LD_VAR 0 1
53858: PPUSH
53859: CALL 54940 0 1
// end ;
53863: LD_VAR 0 2
53867: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53868: LD_INT 0
53870: PPUSH
// ComRadiation ( un ) ;
53871: LD_VAR 0 1
53875: PPUSH
53876: CALL 54940 0 1
// end ;
53880: LD_VAR 0 2
53884: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53885: LD_INT 0
53887: PPUSH
// end ;
53888: LD_VAR 0 4
53892: RET
// export function SOS_Command ( cmd ) ; begin
53893: LD_INT 0
53895: PPUSH
// end ;
53896: LD_VAR 0 2
53900: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53901: LD_INT 0
53903: PPUSH
// end ;
53904: LD_VAR 0 6
53908: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53909: LD_INT 0
53911: PPUSH
53912: PPUSH
53913: PPUSH
53914: PPUSH
// if not vehicle or not factory then
53915: LD_VAR 0 1
53919: NOT
53920: IFTRUE 53929
53922: PUSH
53923: LD_VAR 0 2
53927: NOT
53928: OR
53929: IFFALSE 53933
// exit ;
53931: GO 54515
// if not factoryWaypoints then
53933: LD_EXP 61
53937: NOT
53938: IFFALSE 53942
// exit ;
53940: GO 54515
// for i := 1 to Count ( factoryWaypoints ) do
53942: LD_ADDR_VAR 0 4
53946: PUSH
53947: DOUBLE
53948: LD_INT 1
53950: DEC
53951: ST_TO_ADDR
53952: LD_EXP 61
53956: PPUSH
53957: CALL 12402 0 1
53961: PUSH
53962: FOR_TO
53963: IFFALSE 54513
// if factoryWaypoints [ i ] [ 2 ] = factory then
53965: LD_EXP 61
53969: PUSH
53970: LD_VAR 0 4
53974: ARRAY
53975: PUSH
53976: LD_INT 2
53978: ARRAY
53979: PUSH
53980: LD_VAR 0 2
53984: EQUAL
53985: IFFALSE 54511
// begin if GetControl ( vehicle ) = control_manual then
53987: LD_VAR 0 1
53991: PPUSH
53992: CALL_OW 263
53996: PUSH
53997: LD_INT 1
53999: EQUAL
54000: IFFALSE 54364
// begin driver := IsDrivenBy ( vehicle ) ;
54002: LD_ADDR_VAR 0 5
54006: PUSH
54007: LD_VAR 0 1
54011: PPUSH
54012: CALL_OW 311
54016: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
54017: LD_VAR 0 5
54021: PUSH
54022: LD_EXP 62
54026: IN
54027: IFTRUE 54041
54029: PUSH
54030: LD_VAR 0 1
54034: PUSH
54035: LD_EXP 62
54039: IN
54040: OR
54041: IFFALSE 54047
// exit ;
54043: POP
54044: POP
54045: GO 54515
// if not HasTask ( driver ) then
54047: LD_VAR 0 5
54051: PPUSH
54052: CALL_OW 314
54056: NOT
54057: IFFALSE 54362
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
54059: LD_ADDR_EXP 62
54063: PUSH
54064: LD_EXP 62
54068: PPUSH
54069: LD_VAR 0 5
54073: PPUSH
54074: CALL 48334 0 2
54078: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
54079: LD_ADDR_EXP 62
54083: PUSH
54084: LD_EXP 62
54088: PPUSH
54089: LD_VAR 0 1
54093: PPUSH
54094: CALL 48334 0 2
54098: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54099: LD_ADDR_VAR 0 6
54103: PUSH
54104: LD_EXP 61
54108: PUSH
54109: LD_VAR 0 4
54113: ARRAY
54114: PUSH
54115: LD_INT 3
54117: ARRAY
54118: PPUSH
54119: LD_EXP 61
54123: PUSH
54124: LD_VAR 0 4
54128: ARRAY
54129: PUSH
54130: LD_INT 4
54132: ARRAY
54133: PPUSH
54134: CALL_OW 428
54138: ST_TO_ADDR
// if hex then
54139: LD_VAR 0 6
54143: IFFALSE 54161
// ComMoveUnit ( driver , hex ) else
54145: LD_VAR 0 5
54149: PPUSH
54150: LD_VAR 0 6
54154: PPUSH
54155: CALL_OW 112
54159: GO 54245
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54161: LD_VAR 0 1
54165: PPUSH
54166: LD_EXP 61
54170: PUSH
54171: LD_VAR 0 4
54175: ARRAY
54176: PUSH
54177: LD_INT 3
54179: ARRAY
54180: PPUSH
54181: LD_EXP 61
54185: PUSH
54186: LD_VAR 0 4
54190: ARRAY
54191: PUSH
54192: LD_INT 4
54194: ARRAY
54195: PPUSH
54196: CALL_OW 297
54200: PUSH
54201: LD_INT 0
54203: GREATER
54204: IFFALSE 54245
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54206: LD_VAR 0 5
54210: PPUSH
54211: LD_EXP 61
54215: PUSH
54216: LD_VAR 0 4
54220: ARRAY
54221: PUSH
54222: LD_INT 3
54224: ARRAY
54225: PPUSH
54226: LD_EXP 61
54230: PUSH
54231: LD_VAR 0 4
54235: ARRAY
54236: PUSH
54237: LD_INT 4
54239: ARRAY
54240: PPUSH
54241: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54245: LD_VAR 0 5
54249: PPUSH
54250: CALL_OW 181
// if Multiplayer then
54254: LD_OWVAR 4
54258: IFFALSE 54307
// begin repeat wait ( 10 ) ;
54260: LD_INT 10
54262: PPUSH
54263: CALL_OW 67
// until not IsInUnit ( driver ) ;
54267: LD_VAR 0 5
54271: PPUSH
54272: CALL_OW 310
54276: NOT
54277: IFFALSE 54260
// if not HasTask ( driver ) then
54279: LD_VAR 0 5
54283: PPUSH
54284: CALL_OW 314
54288: NOT
54289: IFFALSE 54305
// ComEnterUnit ( driver , factory ) ;
54291: LD_VAR 0 5
54295: PPUSH
54296: LD_VAR 0 2
54300: PPUSH
54301: CALL_OW 120
// end else
54305: GO 54321
// AddComEnterUnit ( driver , factory ) ;
54307: LD_VAR 0 5
54311: PPUSH
54312: LD_VAR 0 2
54316: PPUSH
54317: CALL_OW 180
// wait ( 0 0$1 ) ;
54321: LD_INT 35
54323: PPUSH
54324: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54328: LD_ADDR_EXP 62
54332: PUSH
54333: LD_EXP 62
54337: PUSH
54338: LD_VAR 0 5
54342: DIFF
54343: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54344: LD_ADDR_EXP 62
54348: PUSH
54349: LD_EXP 62
54353: PUSH
54354: LD_VAR 0 1
54358: DIFF
54359: ST_TO_ADDR
// break ;
54360: GO 54513
// end ; end else
54362: GO 54511
// if GetControl ( vehicle ) = control_remote then
54364: LD_VAR 0 1
54368: PPUSH
54369: CALL_OW 263
54373: PUSH
54374: LD_INT 2
54376: EQUAL
54377: IFFALSE 54463
// begin wait ( 0 0$2 ) ;
54379: LD_INT 70
54381: PPUSH
54382: CALL_OW 67
// repeat wait ( 10 ) ;
54386: LD_INT 10
54388: PPUSH
54389: CALL_OW 67
// Connect ( vehicle ) ;
54393: LD_VAR 0 1
54397: PPUSH
54398: CALL 18646 0 1
// until IsControledBy ( vehicle ) ;
54402: LD_VAR 0 1
54406: PPUSH
54407: CALL_OW 312
54411: IFFALSE 54386
// wait ( 10 ) ;
54413: LD_INT 10
54415: PPUSH
54416: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54420: LD_VAR 0 1
54424: PPUSH
54425: LD_EXP 61
54429: PUSH
54430: LD_VAR 0 4
54434: ARRAY
54435: PUSH
54436: LD_INT 3
54438: ARRAY
54439: PPUSH
54440: LD_EXP 61
54444: PUSH
54445: LD_VAR 0 4
54449: ARRAY
54450: PUSH
54451: LD_INT 4
54453: ARRAY
54454: PPUSH
54455: CALL_OW 111
// break ;
54459: GO 54513
// end else
54461: GO 54511
// begin wait ( 0 0$3 ) ;
54463: LD_INT 105
54465: PPUSH
54466: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54470: LD_VAR 0 1
54474: PPUSH
54475: LD_EXP 61
54479: PUSH
54480: LD_VAR 0 4
54484: ARRAY
54485: PUSH
54486: LD_INT 3
54488: ARRAY
54489: PPUSH
54490: LD_EXP 61
54494: PUSH
54495: LD_VAR 0 4
54499: ARRAY
54500: PUSH
54501: LD_INT 4
54503: ARRAY
54504: PPUSH
54505: CALL_OW 111
// break ;
54509: GO 54513
// end ; end ;
54511: GO 53962
54513: POP
54514: POP
// end ;
54515: LD_VAR 0 3
54519: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54520: LD_INT 0
54522: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54523: LD_VAR 0 1
54527: PUSH
54528: LD_INT 250
54530: EQUAL
54531: IFFALSE 54548
54533: PUSH
54534: LD_VAR 0 2
54538: PPUSH
54539: CALL_OW 264
54543: PUSH
54544: LD_INT 81
54546: EQUAL
54547: AND
54548: IFFALSE 54569
// MinerPlaceMine ( unit , x , y ) ;
54550: LD_VAR 0 2
54554: PPUSH
54555: LD_VAR 0 4
54559: PPUSH
54560: LD_VAR 0 5
54564: PPUSH
54565: CALL 57701 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54569: LD_VAR 0 1
54573: PUSH
54574: LD_INT 251
54576: EQUAL
54577: IFFALSE 54594
54579: PUSH
54580: LD_VAR 0 2
54584: PPUSH
54585: CALL_OW 264
54589: PUSH
54590: LD_INT 81
54592: EQUAL
54593: AND
54594: IFFALSE 54615
// MinerDetonateMine ( unit , x , y ) ;
54596: LD_VAR 0 2
54600: PPUSH
54601: LD_VAR 0 4
54605: PPUSH
54606: LD_VAR 0 5
54610: PPUSH
54611: CALL 57980 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54615: LD_VAR 0 1
54619: PUSH
54620: LD_INT 252
54622: EQUAL
54623: IFFALSE 54640
54625: PUSH
54626: LD_VAR 0 2
54630: PPUSH
54631: CALL_OW 264
54635: PUSH
54636: LD_INT 81
54638: EQUAL
54639: AND
54640: IFFALSE 54661
// MinerCreateMinefield ( unit , x , y ) ;
54642: LD_VAR 0 2
54646: PPUSH
54647: LD_VAR 0 4
54651: PPUSH
54652: LD_VAR 0 5
54656: PPUSH
54657: CALL 58399 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54661: LD_VAR 0 1
54665: PUSH
54666: LD_INT 253
54668: EQUAL
54669: IFFALSE 54686
54671: PUSH
54672: LD_VAR 0 2
54676: PPUSH
54677: CALL_OW 257
54681: PUSH
54682: LD_INT 5
54684: EQUAL
54685: AND
54686: IFFALSE 54707
// ComBinocular ( unit , x , y ) ;
54688: LD_VAR 0 2
54692: PPUSH
54693: LD_VAR 0 4
54697: PPUSH
54698: LD_VAR 0 5
54702: PPUSH
54703: CALL 58774 0 3
// if selectedUnit then
54707: LD_VAR 0 3
54711: IFFALSE 54771
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54713: LD_VAR 0 1
54717: PUSH
54718: LD_INT 254
54720: EQUAL
54721: IFFALSE 54738
54723: PUSH
54724: LD_VAR 0 2
54728: PPUSH
54729: CALL_OW 264
54733: PUSH
54734: LD_INT 99
54736: EQUAL
54737: AND
54738: IFFALSE 54755
54740: PUSH
54741: LD_VAR 0 3
54745: PPUSH
54746: CALL_OW 263
54750: PUSH
54751: LD_INT 3
54753: EQUAL
54754: AND
54755: IFFALSE 54771
// HackDestroyVehicle ( unit , selectedUnit ) ;
54757: LD_VAR 0 2
54761: PPUSH
54762: LD_VAR 0 3
54766: PPUSH
54767: CALL 57061 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54771: LD_VAR 0 1
54775: PUSH
54776: LD_INT 255
54778: EQUAL
54779: IFFALSE 54803
54781: PUSH
54782: LD_VAR 0 2
54786: PPUSH
54787: CALL_OW 264
54791: PUSH
54792: LD_INT 14
54794: PUSH
54795: LD_INT 53
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: IN
54802: AND
54803: IFFALSE 54821
54805: PUSH
54806: LD_VAR 0 4
54810: PPUSH
54811: LD_VAR 0 5
54815: PPUSH
54816: CALL_OW 488
54820: AND
54821: IFFALSE 54845
// CutTreeXYR ( unit , x , y , 12 ) ;
54823: LD_VAR 0 2
54827: PPUSH
54828: LD_VAR 0 4
54832: PPUSH
54833: LD_VAR 0 5
54837: PPUSH
54838: LD_INT 12
54840: PPUSH
54841: CALL 55036 0 4
// if cmd = 256 then
54845: LD_VAR 0 1
54849: PUSH
54850: LD_INT 256
54852: EQUAL
54853: IFFALSE 54874
// SetFactoryWaypoint ( unit , x , y ) ;
54855: LD_VAR 0 2
54859: PPUSH
54860: LD_VAR 0 4
54864: PPUSH
54865: LD_VAR 0 5
54869: PPUSH
54870: CALL 61614 0 3
// if cmd = 257 then
54874: LD_VAR 0 1
54878: PUSH
54879: LD_INT 257
54881: EQUAL
54882: IFFALSE 54903
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54884: LD_VAR 0 2
54888: PPUSH
54889: LD_VAR 0 4
54893: PPUSH
54894: LD_VAR 0 5
54898: PPUSH
54899: CALL 62110 0 3
// if cmd = 258 then
54903: LD_VAR 0 1
54907: PUSH
54908: LD_INT 258
54910: EQUAL
54911: IFFALSE 54935
// BurnTreeXYR ( unit , x , y , 8 ) ;
54913: LD_VAR 0 2
54917: PPUSH
54918: LD_VAR 0 4
54922: PPUSH
54923: LD_VAR 0 5
54927: PPUSH
54928: LD_INT 8
54930: PPUSH
54931: CALL 55436 0 4
// end ;
54935: LD_VAR 0 6
54939: RET
// export function ComRadiation ( un ) ; var eff ; begin
54940: LD_INT 0
54942: PPUSH
54943: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54944: LD_VAR 0 1
54948: PPUSH
54949: CALL_OW 264
54953: PUSH
54954: LD_INT 91
54956: NONEQUAL
54957: IFFALSE 54961
// exit ;
54959: GO 55031
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54961: LD_INT 68
54963: PPUSH
54964: LD_VAR 0 1
54968: PPUSH
54969: CALL_OW 255
54973: PPUSH
54974: CALL_OW 321
54978: PUSH
54979: LD_INT 2
54981: EQUAL
54982: IFFALSE 54994
// eff := 50 else
54984: LD_ADDR_VAR 0 3
54988: PUSH
54989: LD_INT 50
54991: ST_TO_ADDR
54992: GO 55002
// eff := 25 ;
54994: LD_ADDR_VAR 0 3
54998: PUSH
54999: LD_INT 25
55001: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55002: LD_VAR 0 1
55006: PPUSH
55007: CALL_OW 250
55011: PPUSH
55012: LD_VAR 0 1
55016: PPUSH
55017: CALL_OW 251
55021: PPUSH
55022: LD_VAR 0 3
55026: PPUSH
55027: CALL_OW 495
// end ;
55031: LD_VAR 0 2
55035: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55036: LD_INT 0
55038: PPUSH
55039: PPUSH
55040: PPUSH
55041: PPUSH
55042: PPUSH
55043: PPUSH
55044: PPUSH
55045: PPUSH
55046: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
55047: LD_VAR 0 1
55051: PPUSH
55052: CALL_OW 302
55056: NOT
55057: IFTRUE 55076
55059: PUSH
55060: LD_VAR 0 2
55064: PPUSH
55065: LD_VAR 0 3
55069: PPUSH
55070: CALL_OW 488
55074: NOT
55075: OR
55076: IFTRUE 55085
55078: PUSH
55079: LD_VAR 0 4
55083: NOT
55084: OR
55085: IFFALSE 55089
// exit ;
55087: GO 55431
// list := [ ] ;
55089: LD_ADDR_VAR 0 13
55093: PUSH
55094: EMPTY
55095: ST_TO_ADDR
// if x - r < 0 then
55096: LD_VAR 0 2
55100: PUSH
55101: LD_VAR 0 4
55105: MINUS
55106: PUSH
55107: LD_INT 0
55109: LESS
55110: IFFALSE 55122
// min_x := 0 else
55112: LD_ADDR_VAR 0 7
55116: PUSH
55117: LD_INT 0
55119: ST_TO_ADDR
55120: GO 55138
// min_x := x - r ;
55122: LD_ADDR_VAR 0 7
55126: PUSH
55127: LD_VAR 0 2
55131: PUSH
55132: LD_VAR 0 4
55136: MINUS
55137: ST_TO_ADDR
// if y - r < 0 then
55138: LD_VAR 0 3
55142: PUSH
55143: LD_VAR 0 4
55147: MINUS
55148: PUSH
55149: LD_INT 0
55151: LESS
55152: IFFALSE 55164
// min_y := 0 else
55154: LD_ADDR_VAR 0 8
55158: PUSH
55159: LD_INT 0
55161: ST_TO_ADDR
55162: GO 55180
// min_y := y - r ;
55164: LD_ADDR_VAR 0 8
55168: PUSH
55169: LD_VAR 0 3
55173: PUSH
55174: LD_VAR 0 4
55178: MINUS
55179: ST_TO_ADDR
// max_x := x + r ;
55180: LD_ADDR_VAR 0 9
55184: PUSH
55185: LD_VAR 0 2
55189: PUSH
55190: LD_VAR 0 4
55194: PLUS
55195: ST_TO_ADDR
// max_y := y + r ;
55196: LD_ADDR_VAR 0 10
55200: PUSH
55201: LD_VAR 0 3
55205: PUSH
55206: LD_VAR 0 4
55210: PLUS
55211: ST_TO_ADDR
// for _x = min_x to max_x do
55212: LD_ADDR_VAR 0 11
55216: PUSH
55217: DOUBLE
55218: LD_VAR 0 7
55222: DEC
55223: ST_TO_ADDR
55224: LD_VAR 0 9
55228: PUSH
55229: FOR_TO
55230: IFFALSE 55349
// for _y = min_y to max_y do
55232: LD_ADDR_VAR 0 12
55236: PUSH
55237: DOUBLE
55238: LD_VAR 0 8
55242: DEC
55243: ST_TO_ADDR
55244: LD_VAR 0 10
55248: PUSH
55249: FOR_TO
55250: IFFALSE 55345
// begin if not ValidHex ( _x , _y ) then
55252: LD_VAR 0 11
55256: PPUSH
55257: LD_VAR 0 12
55261: PPUSH
55262: CALL_OW 488
55266: NOT
55267: IFFALSE 55271
// continue ;
55269: GO 55249
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55271: LD_VAR 0 11
55275: PPUSH
55276: LD_VAR 0 12
55280: PPUSH
55281: CALL_OW 351
55285: IFFALSE 55303
55287: PUSH
55288: LD_VAR 0 11
55292: PPUSH
55293: LD_VAR 0 12
55297: PPUSH
55298: CALL_OW 554
55302: AND
55303: IFFALSE 55343
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55305: LD_ADDR_VAR 0 13
55309: PUSH
55310: LD_VAR 0 13
55314: PPUSH
55315: LD_VAR 0 13
55319: PUSH
55320: LD_INT 1
55322: PLUS
55323: PPUSH
55324: LD_VAR 0 11
55328: PUSH
55329: LD_VAR 0 12
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PPUSH
55338: CALL_OW 2
55342: ST_TO_ADDR
// end ;
55343: GO 55249
55345: POP
55346: POP
55347: GO 55229
55349: POP
55350: POP
// if not list then
55351: LD_VAR 0 13
55355: NOT
55356: IFFALSE 55360
// exit ;
55358: GO 55431
// for i in list do
55360: LD_ADDR_VAR 0 6
55364: PUSH
55365: LD_VAR 0 13
55369: PUSH
55370: FOR_IN
55371: IFFALSE 55429
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55373: LD_VAR 0 1
55377: PPUSH
55378: LD_STRING M
55380: PUSH
55381: LD_VAR 0 6
55385: PUSH
55386: LD_INT 1
55388: ARRAY
55389: PUSH
55390: LD_VAR 0 6
55394: PUSH
55395: LD_INT 2
55397: ARRAY
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: PUSH
55420: EMPTY
55421: LIST
55422: PPUSH
55423: CALL_OW 447
55427: GO 55370
55429: POP
55430: POP
// end ;
55431: LD_VAR 0 5
55435: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55436: LD_INT 0
55438: PPUSH
55439: PPUSH
55440: PPUSH
55441: PPUSH
55442: PPUSH
55443: PPUSH
55444: PPUSH
55445: PPUSH
55446: PPUSH
55447: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55448: LD_VAR 0 1
55452: PPUSH
55453: CALL_OW 302
55457: NOT
55458: IFTRUE 55477
55460: PUSH
55461: LD_VAR 0 2
55465: PPUSH
55466: LD_VAR 0 3
55470: PPUSH
55471: CALL_OW 488
55475: NOT
55476: OR
55477: IFTRUE 55486
55479: PUSH
55480: LD_VAR 0 4
55484: NOT
55485: OR
55486: IFFALSE 55490
// exit ;
55488: GO 56007
// list := [ ] ;
55490: LD_ADDR_VAR 0 13
55494: PUSH
55495: EMPTY
55496: ST_TO_ADDR
// if x - r < 0 then
55497: LD_VAR 0 2
55501: PUSH
55502: LD_VAR 0 4
55506: MINUS
55507: PUSH
55508: LD_INT 0
55510: LESS
55511: IFFALSE 55523
// min_x := 0 else
55513: LD_ADDR_VAR 0 7
55517: PUSH
55518: LD_INT 0
55520: ST_TO_ADDR
55521: GO 55539
// min_x := x - r ;
55523: LD_ADDR_VAR 0 7
55527: PUSH
55528: LD_VAR 0 2
55532: PUSH
55533: LD_VAR 0 4
55537: MINUS
55538: ST_TO_ADDR
// if y - r < 0 then
55539: LD_VAR 0 3
55543: PUSH
55544: LD_VAR 0 4
55548: MINUS
55549: PUSH
55550: LD_INT 0
55552: LESS
55553: IFFALSE 55565
// min_y := 0 else
55555: LD_ADDR_VAR 0 8
55559: PUSH
55560: LD_INT 0
55562: ST_TO_ADDR
55563: GO 55581
// min_y := y - r ;
55565: LD_ADDR_VAR 0 8
55569: PUSH
55570: LD_VAR 0 3
55574: PUSH
55575: LD_VAR 0 4
55579: MINUS
55580: ST_TO_ADDR
// max_x := x + r ;
55581: LD_ADDR_VAR 0 9
55585: PUSH
55586: LD_VAR 0 2
55590: PUSH
55591: LD_VAR 0 4
55595: PLUS
55596: ST_TO_ADDR
// max_y := y + r ;
55597: LD_ADDR_VAR 0 10
55601: PUSH
55602: LD_VAR 0 3
55606: PUSH
55607: LD_VAR 0 4
55611: PLUS
55612: ST_TO_ADDR
// for _x = min_x to max_x do
55613: LD_ADDR_VAR 0 11
55617: PUSH
55618: DOUBLE
55619: LD_VAR 0 7
55623: DEC
55624: ST_TO_ADDR
55625: LD_VAR 0 9
55629: PUSH
55630: FOR_TO
55631: IFFALSE 55750
// for _y = min_y to max_y do
55633: LD_ADDR_VAR 0 12
55637: PUSH
55638: DOUBLE
55639: LD_VAR 0 8
55643: DEC
55644: ST_TO_ADDR
55645: LD_VAR 0 10
55649: PUSH
55650: FOR_TO
55651: IFFALSE 55746
// begin if not ValidHex ( _x , _y ) then
55653: LD_VAR 0 11
55657: PPUSH
55658: LD_VAR 0 12
55662: PPUSH
55663: CALL_OW 488
55667: NOT
55668: IFFALSE 55672
// continue ;
55670: GO 55650
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55672: LD_VAR 0 11
55676: PPUSH
55677: LD_VAR 0 12
55681: PPUSH
55682: CALL_OW 351
55686: IFFALSE 55704
55688: PUSH
55689: LD_VAR 0 11
55693: PPUSH
55694: LD_VAR 0 12
55698: PPUSH
55699: CALL_OW 554
55703: AND
55704: IFFALSE 55744
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55706: LD_ADDR_VAR 0 13
55710: PUSH
55711: LD_VAR 0 13
55715: PPUSH
55716: LD_VAR 0 13
55720: PUSH
55721: LD_INT 1
55723: PLUS
55724: PPUSH
55725: LD_VAR 0 11
55729: PUSH
55730: LD_VAR 0 12
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PPUSH
55739: CALL_OW 2
55743: ST_TO_ADDR
// end ;
55744: GO 55650
55746: POP
55747: POP
55748: GO 55630
55750: POP
55751: POP
// if not list then
55752: LD_VAR 0 13
55756: NOT
55757: IFFALSE 55761
// exit ;
55759: GO 56007
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55761: LD_ADDR_VAR 0 13
55765: PUSH
55766: LD_VAR 0 1
55770: PPUSH
55771: LD_VAR 0 13
55775: PPUSH
55776: LD_INT 1
55778: PPUSH
55779: LD_INT 1
55781: PPUSH
55782: CALL 15774 0 4
55786: ST_TO_ADDR
// ComStop ( flame ) ;
55787: LD_VAR 0 1
55791: PPUSH
55792: CALL_OW 141
// for i in list do
55796: LD_ADDR_VAR 0 6
55800: PUSH
55801: LD_VAR 0 13
55805: PUSH
55806: FOR_IN
55807: IFFALSE 55838
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55809: LD_VAR 0 1
55813: PPUSH
55814: LD_VAR 0 6
55818: PUSH
55819: LD_INT 1
55821: ARRAY
55822: PPUSH
55823: LD_VAR 0 6
55827: PUSH
55828: LD_INT 2
55830: ARRAY
55831: PPUSH
55832: CALL_OW 176
55836: GO 55806
55838: POP
55839: POP
// repeat wait ( 0 0$1 ) ;
55840: LD_INT 35
55842: PPUSH
55843: CALL_OW 67
// task := GetTaskList ( flame ) ;
55847: LD_ADDR_VAR 0 14
55851: PUSH
55852: LD_VAR 0 1
55856: PPUSH
55857: CALL_OW 437
55861: ST_TO_ADDR
// if not task then
55862: LD_VAR 0 14
55866: NOT
55867: IFFALSE 55871
// exit ;
55869: GO 56007
// if task [ 1 ] [ 1 ] <> | then
55871: LD_VAR 0 14
55875: PUSH
55876: LD_INT 1
55878: ARRAY
55879: PUSH
55880: LD_INT 1
55882: ARRAY
55883: PUSH
55884: LD_STRING |
55886: NONEQUAL
55887: IFFALSE 55891
// exit ;
55889: GO 56007
// _x := task [ 1 ] [ 2 ] ;
55891: LD_ADDR_VAR 0 11
55895: PUSH
55896: LD_VAR 0 14
55900: PUSH
55901: LD_INT 1
55903: ARRAY
55904: PUSH
55905: LD_INT 2
55907: ARRAY
55908: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55909: LD_ADDR_VAR 0 12
55913: PUSH
55914: LD_VAR 0 14
55918: PUSH
55919: LD_INT 1
55921: ARRAY
55922: PUSH
55923: LD_INT 3
55925: ARRAY
55926: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55927: LD_VAR 0 11
55931: PPUSH
55932: LD_VAR 0 12
55936: PPUSH
55937: CALL_OW 351
55941: NOT
55942: IFTRUE 55961
55944: PUSH
55945: LD_VAR 0 11
55949: PPUSH
55950: LD_VAR 0 12
55954: PPUSH
55955: CALL_OW 554
55959: NOT
55960: OR
55961: IFFALSE 55995
// begin task := Delete ( task , 1 ) ;
55963: LD_ADDR_VAR 0 14
55967: PUSH
55968: LD_VAR 0 14
55972: PPUSH
55973: LD_INT 1
55975: PPUSH
55976: CALL_OW 3
55980: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55981: LD_VAR 0 1
55985: PPUSH
55986: LD_VAR 0 14
55990: PPUSH
55991: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55995: LD_VAR 0 1
55999: PPUSH
56000: CALL_OW 314
56004: NOT
56005: IFFALSE 55840
// end ;
56007: LD_VAR 0 5
56011: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56012: LD_EXP 50
56016: NOT
56017: IFFALSE 56067
56019: GO 56021
56021: DISABLE
// begin initHack := true ;
56022: LD_ADDR_EXP 50
56026: PUSH
56027: LD_INT 1
56029: ST_TO_ADDR
// hackTanks := [ ] ;
56030: LD_ADDR_EXP 51
56034: PUSH
56035: EMPTY
56036: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56037: LD_ADDR_EXP 52
56041: PUSH
56042: EMPTY
56043: ST_TO_ADDR
// hackLimit := 3 ;
56044: LD_ADDR_EXP 53
56048: PUSH
56049: LD_INT 3
56051: ST_TO_ADDR
// hackDist := 12 ;
56052: LD_ADDR_EXP 54
56056: PUSH
56057: LD_INT 12
56059: ST_TO_ADDR
// hackCounter := [ ] ;
56060: LD_ADDR_EXP 55
56064: PUSH
56065: EMPTY
56066: ST_TO_ADDR
// end ;
56067: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56068: LD_EXP 50
56072: IFFALSE 56090
56074: PUSH
56075: LD_INT 34
56077: PUSH
56078: LD_INT 99
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PPUSH
56085: CALL_OW 69
56089: AND
56090: IFFALSE 56343
56092: GO 56094
56094: DISABLE
56095: LD_INT 0
56097: PPUSH
56098: PPUSH
// begin enable ;
56099: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56100: LD_ADDR_VAR 0 1
56104: PUSH
56105: LD_INT 34
56107: PUSH
56108: LD_INT 99
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PPUSH
56115: CALL_OW 69
56119: PUSH
56120: FOR_IN
56121: IFFALSE 56341
// begin if not i in hackTanks then
56123: LD_VAR 0 1
56127: PUSH
56128: LD_EXP 51
56132: IN
56133: NOT
56134: IFFALSE 56217
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56136: LD_ADDR_EXP 51
56140: PUSH
56141: LD_EXP 51
56145: PPUSH
56146: LD_EXP 51
56150: PUSH
56151: LD_INT 1
56153: PLUS
56154: PPUSH
56155: LD_VAR 0 1
56159: PPUSH
56160: CALL_OW 1
56164: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56165: LD_ADDR_EXP 52
56169: PUSH
56170: LD_EXP 52
56174: PPUSH
56175: LD_EXP 52
56179: PUSH
56180: LD_INT 1
56182: PLUS
56183: PPUSH
56184: EMPTY
56185: PPUSH
56186: CALL_OW 1
56190: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56191: LD_ADDR_EXP 55
56195: PUSH
56196: LD_EXP 55
56200: PPUSH
56201: LD_EXP 55
56205: PUSH
56206: LD_INT 1
56208: PLUS
56209: PPUSH
56210: EMPTY
56211: PPUSH
56212: CALL_OW 1
56216: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56217: LD_VAR 0 1
56221: PPUSH
56222: CALL_OW 302
56226: NOT
56227: IFFALSE 56240
// begin HackUnlinkAll ( i ) ;
56229: LD_VAR 0 1
56233: PPUSH
56234: CALL 56346 0 1
// continue ;
56238: GO 56120
// end ; HackCheckCapturedStatus ( i ) ;
56240: LD_VAR 0 1
56244: PPUSH
56245: CALL 56791 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56249: LD_ADDR_VAR 0 2
56253: PUSH
56254: LD_INT 81
56256: PUSH
56257: LD_VAR 0 1
56261: PPUSH
56262: CALL_OW 255
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 33
56273: PUSH
56274: LD_INT 3
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 91
56283: PUSH
56284: LD_VAR 0 1
56288: PUSH
56289: LD_EXP 54
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 50
56301: PUSH
56302: EMPTY
56303: LIST
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: PPUSH
56311: CALL_OW 69
56315: ST_TO_ADDR
// if not tmp then
56316: LD_VAR 0 2
56320: NOT
56321: IFFALSE 56325
// continue ;
56323: GO 56120
// HackLink ( i , tmp ) ;
56325: LD_VAR 0 1
56329: PPUSH
56330: LD_VAR 0 2
56334: PPUSH
56335: CALL 56482 0 2
// end ;
56339: GO 56120
56341: POP
56342: POP
// end ;
56343: PPOPN 2
56345: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56346: LD_INT 0
56348: PPUSH
56349: PPUSH
56350: PPUSH
// if not hack in hackTanks then
56351: LD_VAR 0 1
56355: PUSH
56356: LD_EXP 51
56360: IN
56361: NOT
56362: IFFALSE 56366
// exit ;
56364: GO 56477
// index := GetElementIndex ( hackTanks , hack ) ;
56366: LD_ADDR_VAR 0 4
56370: PUSH
56371: LD_EXP 51
56375: PPUSH
56376: LD_VAR 0 1
56380: PPUSH
56381: CALL 15069 0 2
56385: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56386: LD_EXP 52
56390: PUSH
56391: LD_VAR 0 4
56395: ARRAY
56396: IFFALSE 56477
// begin for i in hackTanksCaptured [ index ] do
56398: LD_ADDR_VAR 0 3
56402: PUSH
56403: LD_EXP 52
56407: PUSH
56408: LD_VAR 0 4
56412: ARRAY
56413: PUSH
56414: FOR_IN
56415: IFFALSE 56441
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56417: LD_VAR 0 3
56421: PUSH
56422: LD_INT 1
56424: ARRAY
56425: PPUSH
56426: LD_VAR 0 3
56430: PUSH
56431: LD_INT 2
56433: ARRAY
56434: PPUSH
56435: CALL_OW 235
56439: GO 56414
56441: POP
56442: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56443: LD_ADDR_EXP 52
56447: PUSH
56448: LD_EXP 52
56452: PPUSH
56453: LD_VAR 0 4
56457: PPUSH
56458: EMPTY
56459: PPUSH
56460: CALL_OW 1
56464: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56465: LD_VAR 0 1
56469: PPUSH
56470: LD_INT 0
56472: PPUSH
56473: CALL_OW 505
// end ; end ;
56477: LD_VAR 0 2
56481: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56482: LD_INT 0
56484: PPUSH
56485: PPUSH
56486: PPUSH
// if not hack in hackTanks or not vehicles then
56487: LD_VAR 0 1
56491: PUSH
56492: LD_EXP 51
56496: IN
56497: NOT
56498: IFTRUE 56507
56500: PUSH
56501: LD_VAR 0 2
56505: NOT
56506: OR
56507: IFFALSE 56511
// exit ;
56509: GO 56786
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56511: LD_ADDR_VAR 0 2
56515: PUSH
56516: LD_VAR 0 1
56520: PPUSH
56521: LD_VAR 0 2
56525: PPUSH
56526: LD_INT 1
56528: PPUSH
56529: LD_INT 1
56531: PPUSH
56532: CALL 15721 0 4
56536: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56537: LD_ADDR_VAR 0 5
56541: PUSH
56542: LD_EXP 51
56546: PPUSH
56547: LD_VAR 0 1
56551: PPUSH
56552: CALL 15069 0 2
56556: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56557: LD_EXP 52
56561: PUSH
56562: LD_VAR 0 5
56566: ARRAY
56567: PUSH
56568: LD_EXP 53
56572: LESS
56573: IFFALSE 56762
// begin for i := 1 to vehicles do
56575: LD_ADDR_VAR 0 4
56579: PUSH
56580: DOUBLE
56581: LD_INT 1
56583: DEC
56584: ST_TO_ADDR
56585: LD_VAR 0 2
56589: PUSH
56590: FOR_TO
56591: IFFALSE 56760
// begin if hackTanksCaptured [ index ] = hackLimit then
56593: LD_EXP 52
56597: PUSH
56598: LD_VAR 0 5
56602: ARRAY
56603: PUSH
56604: LD_EXP 53
56608: EQUAL
56609: IFFALSE 56613
// break ;
56611: GO 56760
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56613: LD_ADDR_EXP 55
56617: PUSH
56618: LD_EXP 55
56622: PPUSH
56623: LD_VAR 0 5
56627: PPUSH
56628: LD_EXP 55
56632: PUSH
56633: LD_VAR 0 5
56637: ARRAY
56638: PUSH
56639: LD_INT 1
56641: PLUS
56642: PPUSH
56643: CALL_OW 1
56647: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56648: LD_ADDR_EXP 52
56652: PUSH
56653: LD_EXP 52
56657: PPUSH
56658: LD_VAR 0 5
56662: PUSH
56663: LD_EXP 52
56667: PUSH
56668: LD_VAR 0 5
56672: ARRAY
56673: PUSH
56674: LD_INT 1
56676: PLUS
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PPUSH
56682: LD_VAR 0 2
56686: PUSH
56687: LD_VAR 0 4
56691: ARRAY
56692: PUSH
56693: LD_VAR 0 2
56697: PUSH
56698: LD_VAR 0 4
56702: ARRAY
56703: PPUSH
56704: CALL_OW 255
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PPUSH
56713: CALL 15286 0 3
56717: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56718: LD_VAR 0 2
56722: PUSH
56723: LD_VAR 0 4
56727: ARRAY
56728: PPUSH
56729: LD_VAR 0 1
56733: PPUSH
56734: CALL_OW 255
56738: PPUSH
56739: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56743: LD_VAR 0 2
56747: PUSH
56748: LD_VAR 0 4
56752: ARRAY
56753: PPUSH
56754: CALL_OW 141
// end ;
56758: GO 56590
56760: POP
56761: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56762: LD_VAR 0 1
56766: PPUSH
56767: LD_EXP 52
56771: PUSH
56772: LD_VAR 0 5
56776: ARRAY
56777: PUSH
56778: LD_INT 0
56780: PLUS
56781: PPUSH
56782: CALL_OW 505
// end ;
56786: LD_VAR 0 3
56790: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56791: LD_INT 0
56793: PPUSH
56794: PPUSH
56795: PPUSH
56796: PPUSH
// if not hack in hackTanks then
56797: LD_VAR 0 1
56801: PUSH
56802: LD_EXP 51
56806: IN
56807: NOT
56808: IFFALSE 56812
// exit ;
56810: GO 57056
// index := GetElementIndex ( hackTanks , hack ) ;
56812: LD_ADDR_VAR 0 4
56816: PUSH
56817: LD_EXP 51
56821: PPUSH
56822: LD_VAR 0 1
56826: PPUSH
56827: CALL 15069 0 2
56831: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56832: LD_ADDR_VAR 0 3
56836: PUSH
56837: DOUBLE
56838: LD_EXP 52
56842: PUSH
56843: LD_VAR 0 4
56847: ARRAY
56848: INC
56849: ST_TO_ADDR
56850: LD_INT 1
56852: PUSH
56853: FOR_DOWNTO
56854: IFFALSE 57030
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56856: LD_ADDR_VAR 0 5
56860: PUSH
56861: LD_EXP 52
56865: PUSH
56866: LD_VAR 0 4
56870: ARRAY
56871: PUSH
56872: LD_VAR 0 3
56876: ARRAY
56877: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56878: LD_VAR 0 5
56882: PUSH
56883: LD_INT 1
56885: ARRAY
56886: PPUSH
56887: CALL_OW 302
56891: NOT
56892: IFTRUE 56920
56894: PUSH
56895: LD_VAR 0 5
56899: PUSH
56900: LD_INT 1
56902: ARRAY
56903: PPUSH
56904: CALL_OW 255
56908: PUSH
56909: LD_VAR 0 1
56913: PPUSH
56914: CALL_OW 255
56918: NONEQUAL
56919: OR
56920: IFFALSE 57028
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56922: LD_VAR 0 5
56926: PUSH
56927: LD_INT 1
56929: ARRAY
56930: PPUSH
56931: CALL_OW 305
56935: IFFALSE 56963
56937: PUSH
56938: LD_VAR 0 5
56942: PUSH
56943: LD_INT 1
56945: ARRAY
56946: PPUSH
56947: CALL_OW 255
56951: PUSH
56952: LD_VAR 0 1
56956: PPUSH
56957: CALL_OW 255
56961: EQUAL
56962: AND
56963: IFFALSE 56987
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56965: LD_VAR 0 5
56969: PUSH
56970: LD_INT 1
56972: ARRAY
56973: PPUSH
56974: LD_VAR 0 5
56978: PUSH
56979: LD_INT 2
56981: ARRAY
56982: PPUSH
56983: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56987: LD_ADDR_EXP 52
56991: PUSH
56992: LD_EXP 52
56996: PPUSH
56997: LD_VAR 0 4
57001: PPUSH
57002: LD_EXP 52
57006: PUSH
57007: LD_VAR 0 4
57011: ARRAY
57012: PPUSH
57013: LD_VAR 0 3
57017: PPUSH
57018: CALL_OW 3
57022: PPUSH
57023: CALL_OW 1
57027: ST_TO_ADDR
// end ; end ;
57028: GO 56853
57030: POP
57031: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57032: LD_VAR 0 1
57036: PPUSH
57037: LD_EXP 52
57041: PUSH
57042: LD_VAR 0 4
57046: ARRAY
57047: PUSH
57048: LD_INT 0
57050: PLUS
57051: PPUSH
57052: CALL_OW 505
// end ;
57056: LD_VAR 0 2
57060: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57061: LD_INT 0
57063: PPUSH
57064: PPUSH
57065: PPUSH
57066: PPUSH
// if not hack in hackTanks then
57067: LD_VAR 0 1
57071: PUSH
57072: LD_EXP 51
57076: IN
57077: NOT
57078: IFFALSE 57082
// exit ;
57080: GO 57167
// index := GetElementIndex ( hackTanks , hack ) ;
57082: LD_ADDR_VAR 0 5
57086: PUSH
57087: LD_EXP 51
57091: PPUSH
57092: LD_VAR 0 1
57096: PPUSH
57097: CALL 15069 0 2
57101: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57102: LD_ADDR_VAR 0 4
57106: PUSH
57107: DOUBLE
57108: LD_INT 1
57110: DEC
57111: ST_TO_ADDR
57112: LD_EXP 52
57116: PUSH
57117: LD_VAR 0 5
57121: ARRAY
57122: PUSH
57123: FOR_TO
57124: IFFALSE 57165
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57126: LD_EXP 52
57130: PUSH
57131: LD_VAR 0 5
57135: ARRAY
57136: PUSH
57137: LD_VAR 0 4
57141: ARRAY
57142: PUSH
57143: LD_INT 1
57145: ARRAY
57146: PUSH
57147: LD_VAR 0 2
57151: EQUAL
57152: IFFALSE 57163
// KillUnit ( vehicle ) ;
57154: LD_VAR 0 2
57158: PPUSH
57159: CALL_OW 66
57163: GO 57123
57165: POP
57166: POP
// end ;
57167: LD_VAR 0 3
57171: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57172: LD_EXP 56
57176: NOT
57177: IFFALSE 57212
57179: GO 57181
57181: DISABLE
// begin initMiner := true ;
57182: LD_ADDR_EXP 56
57186: PUSH
57187: LD_INT 1
57189: ST_TO_ADDR
// minersList := [ ] ;
57190: LD_ADDR_EXP 57
57194: PUSH
57195: EMPTY
57196: ST_TO_ADDR
// minerMinesList := [ ] ;
57197: LD_ADDR_EXP 58
57201: PUSH
57202: EMPTY
57203: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57204: LD_ADDR_EXP 59
57208: PUSH
57209: LD_INT 5
57211: ST_TO_ADDR
// end ;
57212: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57213: LD_EXP 56
57217: IFFALSE 57235
57219: PUSH
57220: LD_INT 34
57222: PUSH
57223: LD_INT 81
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PPUSH
57230: CALL_OW 69
57234: AND
57235: IFFALSE 57698
57237: GO 57239
57239: DISABLE
57240: LD_INT 0
57242: PPUSH
57243: PPUSH
57244: PPUSH
57245: PPUSH
// begin enable ;
57246: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57247: LD_ADDR_VAR 0 1
57251: PUSH
57252: LD_INT 34
57254: PUSH
57255: LD_INT 81
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PPUSH
57262: CALL_OW 69
57266: PUSH
57267: FOR_IN
57268: IFFALSE 57340
// begin if not i in minersList then
57270: LD_VAR 0 1
57274: PUSH
57275: LD_EXP 57
57279: IN
57280: NOT
57281: IFFALSE 57338
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57283: LD_ADDR_EXP 57
57287: PUSH
57288: LD_EXP 57
57292: PPUSH
57293: LD_EXP 57
57297: PUSH
57298: LD_INT 1
57300: PLUS
57301: PPUSH
57302: LD_VAR 0 1
57306: PPUSH
57307: CALL_OW 1
57311: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57312: LD_ADDR_EXP 58
57316: PUSH
57317: LD_EXP 58
57321: PPUSH
57322: LD_EXP 58
57326: PUSH
57327: LD_INT 1
57329: PLUS
57330: PPUSH
57331: EMPTY
57332: PPUSH
57333: CALL_OW 1
57337: ST_TO_ADDR
// end end ;
57338: GO 57267
57340: POP
57341: POP
// for i := minerMinesList downto 1 do
57342: LD_ADDR_VAR 0 1
57346: PUSH
57347: DOUBLE
57348: LD_EXP 58
57352: INC
57353: ST_TO_ADDR
57354: LD_INT 1
57356: PUSH
57357: FOR_DOWNTO
57358: IFFALSE 57696
// begin if IsLive ( minersList [ i ] ) then
57360: LD_EXP 57
57364: PUSH
57365: LD_VAR 0 1
57369: ARRAY
57370: PPUSH
57371: CALL_OW 300
57375: IFFALSE 57403
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57377: LD_EXP 57
57381: PUSH
57382: LD_VAR 0 1
57386: ARRAY
57387: PPUSH
57388: LD_EXP 58
57392: PUSH
57393: LD_VAR 0 1
57397: ARRAY
57398: PPUSH
57399: CALL_OW 505
// if not minerMinesList [ i ] then
57403: LD_EXP 58
57407: PUSH
57408: LD_VAR 0 1
57412: ARRAY
57413: NOT
57414: IFFALSE 57418
// continue ;
57416: GO 57357
// for j := minerMinesList [ i ] downto 1 do
57418: LD_ADDR_VAR 0 2
57422: PUSH
57423: DOUBLE
57424: LD_EXP 58
57428: PUSH
57429: LD_VAR 0 1
57433: ARRAY
57434: INC
57435: ST_TO_ADDR
57436: LD_INT 1
57438: PUSH
57439: FOR_DOWNTO
57440: IFFALSE 57692
// begin side := GetSide ( minersList [ i ] ) ;
57442: LD_ADDR_VAR 0 3
57446: PUSH
57447: LD_EXP 57
57451: PUSH
57452: LD_VAR 0 1
57456: ARRAY
57457: PPUSH
57458: CALL_OW 255
57462: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57463: LD_ADDR_VAR 0 4
57467: PUSH
57468: LD_EXP 58
57472: PUSH
57473: LD_VAR 0 1
57477: ARRAY
57478: PUSH
57479: LD_VAR 0 2
57483: ARRAY
57484: PUSH
57485: LD_INT 1
57487: ARRAY
57488: PPUSH
57489: LD_EXP 58
57493: PUSH
57494: LD_VAR 0 1
57498: ARRAY
57499: PUSH
57500: LD_VAR 0 2
57504: ARRAY
57505: PUSH
57506: LD_INT 2
57508: ARRAY
57509: PPUSH
57510: CALL_OW 428
57514: ST_TO_ADDR
// if not tmp then
57515: LD_VAR 0 4
57519: NOT
57520: IFFALSE 57524
// continue ;
57522: GO 57439
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57524: LD_VAR 0 4
57528: PUSH
57529: LD_INT 81
57531: PUSH
57532: LD_VAR 0 3
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PPUSH
57541: CALL_OW 69
57545: IN
57546: IFFALSE 57596
57548: PUSH
57549: LD_EXP 58
57553: PUSH
57554: LD_VAR 0 1
57558: ARRAY
57559: PUSH
57560: LD_VAR 0 2
57564: ARRAY
57565: PUSH
57566: LD_INT 1
57568: ARRAY
57569: PPUSH
57570: LD_EXP 58
57574: PUSH
57575: LD_VAR 0 1
57579: ARRAY
57580: PUSH
57581: LD_VAR 0 2
57585: ARRAY
57586: PUSH
57587: LD_INT 2
57589: ARRAY
57590: PPUSH
57591: CALL_OW 458
57595: AND
57596: IFFALSE 57690
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57598: LD_EXP 58
57602: PUSH
57603: LD_VAR 0 1
57607: ARRAY
57608: PUSH
57609: LD_VAR 0 2
57613: ARRAY
57614: PUSH
57615: LD_INT 1
57617: ARRAY
57618: PPUSH
57619: LD_EXP 58
57623: PUSH
57624: LD_VAR 0 1
57628: ARRAY
57629: PUSH
57630: LD_VAR 0 2
57634: ARRAY
57635: PUSH
57636: LD_INT 2
57638: ARRAY
57639: PPUSH
57640: LD_VAR 0 3
57644: PPUSH
57645: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57649: LD_ADDR_EXP 58
57653: PUSH
57654: LD_EXP 58
57658: PPUSH
57659: LD_VAR 0 1
57663: PPUSH
57664: LD_EXP 58
57668: PUSH
57669: LD_VAR 0 1
57673: ARRAY
57674: PPUSH
57675: LD_VAR 0 2
57679: PPUSH
57680: CALL_OW 3
57684: PPUSH
57685: CALL_OW 1
57689: ST_TO_ADDR
// end ; end ;
57690: GO 57439
57692: POP
57693: POP
// end ;
57694: GO 57357
57696: POP
57697: POP
// end ;
57698: PPOPN 4
57700: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57701: LD_INT 0
57703: PPUSH
57704: PPUSH
// result := false ;
57705: LD_ADDR_VAR 0 4
57709: PUSH
57710: LD_INT 0
57712: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57713: LD_VAR 0 1
57717: PPUSH
57718: CALL_OW 264
57722: PUSH
57723: LD_INT 81
57725: EQUAL
57726: NOT
57727: IFFALSE 57731
// exit ;
57729: GO 57975
// index := GetElementIndex ( minersList , unit ) ;
57731: LD_ADDR_VAR 0 5
57735: PUSH
57736: LD_EXP 57
57740: PPUSH
57741: LD_VAR 0 1
57745: PPUSH
57746: CALL 15069 0 2
57750: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57751: LD_EXP 58
57755: PUSH
57756: LD_VAR 0 5
57760: ARRAY
57761: PUSH
57762: LD_EXP 59
57766: GREATEREQUAL
57767: IFFALSE 57771
// exit ;
57769: GO 57975
// ComMoveXY ( unit , x , y ) ;
57771: LD_VAR 0 1
57775: PPUSH
57776: LD_VAR 0 2
57780: PPUSH
57781: LD_VAR 0 3
57785: PPUSH
57786: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57790: LD_INT 35
57792: PPUSH
57793: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57797: LD_VAR 0 1
57801: PPUSH
57802: LD_VAR 0 2
57806: PPUSH
57807: LD_VAR 0 3
57811: PPUSH
57812: CALL 47115 0 3
57816: NOT
57817: IFFALSE 57830
57819: PUSH
57820: LD_VAR 0 1
57824: PPUSH
57825: CALL_OW 314
57829: AND
57830: IFFALSE 57834
// exit ;
57832: GO 57975
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57834: LD_VAR 0 2
57838: PPUSH
57839: LD_VAR 0 3
57843: PPUSH
57844: CALL_OW 428
57848: PUSH
57849: LD_VAR 0 1
57853: EQUAL
57854: IFFALSE 57868
57856: PUSH
57857: LD_VAR 0 1
57861: PPUSH
57862: CALL_OW 314
57866: NOT
57867: AND
57868: IFFALSE 57790
// PlaySoundXY ( x , y , PlantMine ) ;
57870: LD_VAR 0 2
57874: PPUSH
57875: LD_VAR 0 3
57879: PPUSH
57880: LD_STRING PlantMine
57882: PPUSH
57883: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57887: LD_VAR 0 2
57891: PPUSH
57892: LD_VAR 0 3
57896: PPUSH
57897: LD_VAR 0 1
57901: PPUSH
57902: CALL_OW 255
57906: PPUSH
57907: LD_INT 0
57909: PPUSH
57910: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57914: LD_ADDR_EXP 58
57918: PUSH
57919: LD_EXP 58
57923: PPUSH
57924: LD_VAR 0 5
57928: PUSH
57929: LD_EXP 58
57933: PUSH
57934: LD_VAR 0 5
57938: ARRAY
57939: PUSH
57940: LD_INT 1
57942: PLUS
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PPUSH
57948: LD_VAR 0 2
57952: PUSH
57953: LD_VAR 0 3
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PPUSH
57962: CALL 15286 0 3
57966: ST_TO_ADDR
// result := true ;
57967: LD_ADDR_VAR 0 4
57971: PUSH
57972: LD_INT 1
57974: ST_TO_ADDR
// end ;
57975: LD_VAR 0 4
57979: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57980: LD_INT 0
57982: PPUSH
57983: PPUSH
57984: PPUSH
// if not unit in minersList then
57985: LD_VAR 0 1
57989: PUSH
57990: LD_EXP 57
57994: IN
57995: NOT
57996: IFFALSE 58000
// exit ;
57998: GO 58394
// index := GetElementIndex ( minersList , unit ) ;
58000: LD_ADDR_VAR 0 6
58004: PUSH
58005: LD_EXP 57
58009: PPUSH
58010: LD_VAR 0 1
58014: PPUSH
58015: CALL 15069 0 2
58019: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58020: LD_ADDR_VAR 0 5
58024: PUSH
58025: DOUBLE
58026: LD_EXP 58
58030: PUSH
58031: LD_VAR 0 6
58035: ARRAY
58036: INC
58037: ST_TO_ADDR
58038: LD_INT 1
58040: PUSH
58041: FOR_DOWNTO
58042: IFFALSE 58205
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
58044: LD_EXP 58
58048: PUSH
58049: LD_VAR 0 6
58053: ARRAY
58054: PUSH
58055: LD_VAR 0 5
58059: ARRAY
58060: PUSH
58061: LD_INT 1
58063: ARRAY
58064: PUSH
58065: LD_VAR 0 2
58069: EQUAL
58070: IFFALSE 58100
58072: PUSH
58073: LD_EXP 58
58077: PUSH
58078: LD_VAR 0 6
58082: ARRAY
58083: PUSH
58084: LD_VAR 0 5
58088: ARRAY
58089: PUSH
58090: LD_INT 2
58092: ARRAY
58093: PUSH
58094: LD_VAR 0 3
58098: EQUAL
58099: AND
58100: IFFALSE 58203
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58102: LD_EXP 58
58106: PUSH
58107: LD_VAR 0 6
58111: ARRAY
58112: PUSH
58113: LD_VAR 0 5
58117: ARRAY
58118: PUSH
58119: LD_INT 1
58121: ARRAY
58122: PPUSH
58123: LD_EXP 58
58127: PUSH
58128: LD_VAR 0 6
58132: ARRAY
58133: PUSH
58134: LD_VAR 0 5
58138: ARRAY
58139: PUSH
58140: LD_INT 2
58142: ARRAY
58143: PPUSH
58144: LD_VAR 0 1
58148: PPUSH
58149: CALL_OW 255
58153: PPUSH
58154: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58158: LD_ADDR_EXP 58
58162: PUSH
58163: LD_EXP 58
58167: PPUSH
58168: LD_VAR 0 6
58172: PPUSH
58173: LD_EXP 58
58177: PUSH
58178: LD_VAR 0 6
58182: ARRAY
58183: PPUSH
58184: LD_VAR 0 5
58188: PPUSH
58189: CALL_OW 3
58193: PPUSH
58194: CALL_OW 1
58198: ST_TO_ADDR
// exit ;
58199: POP
58200: POP
58201: GO 58394
// end ; end ;
58203: GO 58041
58205: POP
58206: POP
// for i := minerMinesList [ index ] downto 1 do
58207: LD_ADDR_VAR 0 5
58211: PUSH
58212: DOUBLE
58213: LD_EXP 58
58217: PUSH
58218: LD_VAR 0 6
58222: ARRAY
58223: INC
58224: ST_TO_ADDR
58225: LD_INT 1
58227: PUSH
58228: FOR_DOWNTO
58229: IFFALSE 58392
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58231: LD_EXP 58
58235: PUSH
58236: LD_VAR 0 6
58240: ARRAY
58241: PUSH
58242: LD_VAR 0 5
58246: ARRAY
58247: PUSH
58248: LD_INT 1
58250: ARRAY
58251: PPUSH
58252: LD_EXP 58
58256: PUSH
58257: LD_VAR 0 6
58261: ARRAY
58262: PUSH
58263: LD_VAR 0 5
58267: ARRAY
58268: PUSH
58269: LD_INT 2
58271: ARRAY
58272: PPUSH
58273: LD_VAR 0 2
58277: PPUSH
58278: LD_VAR 0 3
58282: PPUSH
58283: CALL_OW 298
58287: PUSH
58288: LD_INT 6
58290: LESS
58291: IFFALSE 58390
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58293: LD_EXP 58
58297: PUSH
58298: LD_VAR 0 6
58302: ARRAY
58303: PUSH
58304: LD_VAR 0 5
58308: ARRAY
58309: PUSH
58310: LD_INT 1
58312: ARRAY
58313: PPUSH
58314: LD_EXP 58
58318: PUSH
58319: LD_VAR 0 6
58323: ARRAY
58324: PUSH
58325: LD_VAR 0 5
58329: ARRAY
58330: PUSH
58331: LD_INT 2
58333: ARRAY
58334: PPUSH
58335: LD_VAR 0 1
58339: PPUSH
58340: CALL_OW 255
58344: PPUSH
58345: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58349: LD_ADDR_EXP 58
58353: PUSH
58354: LD_EXP 58
58358: PPUSH
58359: LD_VAR 0 6
58363: PPUSH
58364: LD_EXP 58
58368: PUSH
58369: LD_VAR 0 6
58373: ARRAY
58374: PPUSH
58375: LD_VAR 0 5
58379: PPUSH
58380: CALL_OW 3
58384: PPUSH
58385: CALL_OW 1
58389: ST_TO_ADDR
// end ; end ;
58390: GO 58228
58392: POP
58393: POP
// end ;
58394: LD_VAR 0 4
58398: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58399: LD_INT 0
58401: PPUSH
58402: PPUSH
58403: PPUSH
58404: PPUSH
58405: PPUSH
58406: PPUSH
58407: PPUSH
58408: PPUSH
58409: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58410: LD_VAR 0 1
58414: PPUSH
58415: CALL_OW 264
58419: PUSH
58420: LD_INT 81
58422: EQUAL
58423: NOT
58424: IFTRUE 58439
58426: PUSH
58427: LD_VAR 0 1
58431: PUSH
58432: LD_EXP 57
58436: IN
58437: NOT
58438: OR
58439: IFFALSE 58443
// exit ;
58441: GO 58769
// index := GetElementIndex ( minersList , unit ) ;
58443: LD_ADDR_VAR 0 6
58447: PUSH
58448: LD_EXP 57
58452: PPUSH
58453: LD_VAR 0 1
58457: PPUSH
58458: CALL 15069 0 2
58462: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58463: LD_ADDR_VAR 0 8
58467: PUSH
58468: LD_EXP 59
58472: PUSH
58473: LD_EXP 58
58477: PUSH
58478: LD_VAR 0 6
58482: ARRAY
58483: MINUS
58484: ST_TO_ADDR
// if not minesFreeAmount then
58485: LD_VAR 0 8
58489: NOT
58490: IFFALSE 58494
// exit ;
58492: GO 58769
// tmp := [ ] ;
58494: LD_ADDR_VAR 0 7
58498: PUSH
58499: EMPTY
58500: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58501: LD_ADDR_VAR 0 5
58505: PUSH
58506: DOUBLE
58507: LD_INT 1
58509: DEC
58510: ST_TO_ADDR
58511: LD_VAR 0 8
58515: PUSH
58516: FOR_TO
58517: IFFALSE 58716
// begin _d := rand ( 0 , 5 ) ;
58519: LD_ADDR_VAR 0 11
58523: PUSH
58524: LD_INT 0
58526: PPUSH
58527: LD_INT 5
58529: PPUSH
58530: CALL_OW 12
58534: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58535: LD_ADDR_VAR 0 12
58539: PUSH
58540: LD_INT 2
58542: PPUSH
58543: LD_INT 6
58545: PPUSH
58546: CALL_OW 12
58550: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58551: LD_ADDR_VAR 0 9
58555: PUSH
58556: LD_VAR 0 2
58560: PPUSH
58561: LD_VAR 0 11
58565: PPUSH
58566: LD_VAR 0 12
58570: PPUSH
58571: CALL_OW 272
58575: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58576: LD_ADDR_VAR 0 10
58580: PUSH
58581: LD_VAR 0 3
58585: PPUSH
58586: LD_VAR 0 11
58590: PPUSH
58591: LD_VAR 0 12
58595: PPUSH
58596: CALL_OW 273
58600: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58601: LD_VAR 0 9
58605: PPUSH
58606: LD_VAR 0 10
58610: PPUSH
58611: CALL_OW 488
58615: IFFALSE 58639
58617: PUSH
58618: LD_VAR 0 9
58622: PUSH
58623: LD_VAR 0 10
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_VAR 0 7
58636: IN
58637: NOT
58638: AND
58639: IFFALSE 58658
58641: PUSH
58642: LD_VAR 0 9
58646: PPUSH
58647: LD_VAR 0 10
58651: PPUSH
58652: CALL_OW 458
58656: NOT
58657: AND
58658: IFFALSE 58700
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58660: LD_ADDR_VAR 0 7
58664: PUSH
58665: LD_VAR 0 7
58669: PPUSH
58670: LD_VAR 0 7
58674: PUSH
58675: LD_INT 1
58677: PLUS
58678: PPUSH
58679: LD_VAR 0 9
58683: PUSH
58684: LD_VAR 0 10
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PPUSH
58693: CALL_OW 1
58697: ST_TO_ADDR
58698: GO 58714
// i := i - 1 ;
58700: LD_ADDR_VAR 0 5
58704: PUSH
58705: LD_VAR 0 5
58709: PUSH
58710: LD_INT 1
58712: MINUS
58713: ST_TO_ADDR
// end ;
58714: GO 58516
58716: POP
58717: POP
// for i in tmp do
58718: LD_ADDR_VAR 0 5
58722: PUSH
58723: LD_VAR 0 7
58727: PUSH
58728: FOR_IN
58729: IFFALSE 58767
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58731: LD_VAR 0 1
58735: PPUSH
58736: LD_VAR 0 5
58740: PUSH
58741: LD_INT 1
58743: ARRAY
58744: PPUSH
58745: LD_VAR 0 5
58749: PUSH
58750: LD_INT 2
58752: ARRAY
58753: PPUSH
58754: CALL 57701 0 3
58758: NOT
58759: IFFALSE 58765
// exit ;
58761: POP
58762: POP
58763: GO 58769
58765: GO 58728
58767: POP
58768: POP
// end ;
58769: LD_VAR 0 4
58773: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58774: LD_INT 0
58776: PPUSH
58777: PPUSH
58778: PPUSH
58779: PPUSH
58780: PPUSH
58781: PPUSH
58782: PPUSH
58783: PPUSH
58784: PPUSH
// if GetClass ( unit ) <> class_sniper then
58785: LD_VAR 0 1
58789: PPUSH
58790: CALL_OW 257
58794: PUSH
58795: LD_INT 5
58797: NONEQUAL
58798: IFFALSE 58802
// exit ;
58800: GO 59272
// dist := 8 ;
58802: LD_ADDR_VAR 0 5
58806: PUSH
58807: LD_INT 8
58809: ST_TO_ADDR
// viewRange := 12 ;
58810: LD_ADDR_VAR 0 8
58814: PUSH
58815: LD_INT 12
58817: ST_TO_ADDR
// side := GetSide ( unit ) ;
58818: LD_ADDR_VAR 0 6
58822: PUSH
58823: LD_VAR 0 1
58827: PPUSH
58828: CALL_OW 255
58832: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58833: LD_INT 61
58835: PPUSH
58836: LD_VAR 0 6
58840: PPUSH
58841: CALL_OW 321
58845: PUSH
58846: LD_INT 2
58848: EQUAL
58849: IFFALSE 58859
// viewRange := 16 ;
58851: LD_ADDR_VAR 0 8
58855: PUSH
58856: LD_INT 16
58858: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58859: LD_VAR 0 1
58863: PPUSH
58864: LD_VAR 0 2
58868: PPUSH
58869: LD_VAR 0 3
58873: PPUSH
58874: CALL_OW 297
58878: PUSH
58879: LD_VAR 0 5
58883: GREATER
58884: IFFALSE 58963
// begin ComMoveXY ( unit , x , y ) ;
58886: LD_VAR 0 1
58890: PPUSH
58891: LD_VAR 0 2
58895: PPUSH
58896: LD_VAR 0 3
58900: PPUSH
58901: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58905: LD_INT 35
58907: PPUSH
58908: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58912: LD_VAR 0 1
58916: PPUSH
58917: LD_VAR 0 2
58921: PPUSH
58922: LD_VAR 0 3
58926: PPUSH
58927: CALL 47115 0 3
58931: NOT
58932: IFFALSE 58936
// exit ;
58934: GO 59272
// until GetDistUnitXY ( unit , x , y ) < dist ;
58936: LD_VAR 0 1
58940: PPUSH
58941: LD_VAR 0 2
58945: PPUSH
58946: LD_VAR 0 3
58950: PPUSH
58951: CALL_OW 297
58955: PUSH
58956: LD_VAR 0 5
58960: LESS
58961: IFFALSE 58905
// end ; ComTurnXY ( unit , x , y ) ;
58963: LD_VAR 0 1
58967: PPUSH
58968: LD_VAR 0 2
58972: PPUSH
58973: LD_VAR 0 3
58977: PPUSH
58978: CALL_OW 118
// repeat if Multiplayer then
58982: LD_OWVAR 4
58986: IFFALSE 58997
// wait ( 35 ) else
58988: LD_INT 35
58990: PPUSH
58991: CALL_OW 67
58995: GO 59004
// wait ( 5 ) ;
58997: LD_INT 5
58999: PPUSH
59000: CALL_OW 67
// _d := GetDir ( unit ) ;
59004: LD_ADDR_VAR 0 11
59008: PUSH
59009: LD_VAR 0 1
59013: PPUSH
59014: CALL_OW 254
59018: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
59019: LD_ADDR_VAR 0 7
59023: PUSH
59024: LD_VAR 0 1
59028: PPUSH
59029: CALL_OW 250
59033: PPUSH
59034: LD_VAR 0 1
59038: PPUSH
59039: CALL_OW 251
59043: PPUSH
59044: LD_VAR 0 2
59048: PPUSH
59049: LD_VAR 0 3
59053: PPUSH
59054: CALL 49751 0 4
59058: ST_TO_ADDR
// until dir = _d ;
59059: LD_VAR 0 7
59063: PUSH
59064: LD_VAR 0 11
59068: EQUAL
59069: IFFALSE 58982
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
59071: LD_ADDR_VAR 0 9
59075: PUSH
59076: LD_VAR 0 1
59080: PPUSH
59081: CALL_OW 250
59085: PPUSH
59086: LD_VAR 0 7
59090: PPUSH
59091: LD_VAR 0 5
59095: PPUSH
59096: CALL_OW 272
59100: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59101: LD_ADDR_VAR 0 10
59105: PUSH
59106: LD_VAR 0 1
59110: PPUSH
59111: CALL_OW 251
59115: PPUSH
59116: LD_VAR 0 7
59120: PPUSH
59121: LD_VAR 0 5
59125: PPUSH
59126: CALL_OW 273
59130: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59131: LD_VAR 0 9
59135: PPUSH
59136: LD_VAR 0 10
59140: PPUSH
59141: CALL_OW 488
59145: NOT
59146: IFFALSE 59150
// exit ;
59148: GO 59272
// ComAnimCustom ( unit , 1 ) ;
59150: LD_VAR 0 1
59154: PPUSH
59155: LD_INT 1
59157: PPUSH
59158: CALL_OW 592
// p := 0 ;
59162: LD_ADDR_VAR 0 12
59166: PUSH
59167: LD_INT 0
59169: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59170: LD_VAR 0 9
59174: PPUSH
59175: LD_VAR 0 10
59179: PPUSH
59180: LD_VAR 0 6
59184: PPUSH
59185: LD_VAR 0 8
59189: PPUSH
59190: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59194: LD_INT 35
59196: PPUSH
59197: CALL_OW 67
// p := Inc ( p ) ;
59201: LD_ADDR_VAR 0 12
59205: PUSH
59206: LD_VAR 0 12
59210: PPUSH
59211: CALL 49707 0 1
59215: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59216: LD_VAR 0 12
59220: PUSH
59221: LD_INT 3
59223: EQUAL
59224: IFTRUE 59238
59226: PUSH
59227: LD_VAR 0 1
59231: PPUSH
59232: CALL_OW 302
59236: NOT
59237: OR
59238: IFTRUE 59251
59240: PUSH
59241: LD_VAR 0 1
59245: PPUSH
59246: CALL_OW 301
59250: OR
59251: IFFALSE 59194
// RemoveSeeing ( _x , _y , side ) ;
59253: LD_VAR 0 9
59257: PPUSH
59258: LD_VAR 0 10
59262: PPUSH
59263: LD_VAR 0 6
59267: PPUSH
59268: CALL_OW 331
// end ; end_of_file
59272: LD_VAR 0 4
59276: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
59277: LD_EXP 41
59281: IFFALSE 59622
59283: GO 59285
59285: DISABLE
59286: LD_INT 0
59288: PPUSH
59289: PPUSH
59290: PPUSH
// begin mpKingPoints := [ ] ;
59291: LD_ADDR_EXP 60
59295: PUSH
59296: EMPTY
59297: ST_TO_ADDR
// if mpTeamGame then
59298: LD_EXP 13
59302: IFFALSE 59356
// begin for i := 1 to Count ( mpTeams ) do
59304: LD_ADDR_VAR 0 1
59308: PUSH
59309: DOUBLE
59310: LD_INT 1
59312: DEC
59313: ST_TO_ADDR
59314: LD_EXP 12
59318: PPUSH
59319: CALL 12402 0 1
59323: PUSH
59324: FOR_TO
59325: IFFALSE 59352
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59327: LD_ADDR_EXP 60
59331: PUSH
59332: LD_EXP 60
59336: PPUSH
59337: LD_VAR 0 1
59341: PPUSH
59342: LD_INT 0
59344: PPUSH
59345: CALL_OW 1
59349: ST_TO_ADDR
59350: GO 59324
59352: POP
59353: POP
// end else
59354: GO 59399
// begin for i := 1 to 8 do
59356: LD_ADDR_VAR 0 1
59360: PUSH
59361: DOUBLE
59362: LD_INT 1
59364: DEC
59365: ST_TO_ADDR
59366: LD_INT 8
59368: PUSH
59369: FOR_TO
59370: IFFALSE 59397
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59372: LD_ADDR_EXP 60
59376: PUSH
59377: LD_EXP 60
59381: PPUSH
59382: LD_VAR 0 1
59386: PPUSH
59387: LD_INT 0
59389: PPUSH
59390: CALL_OW 1
59394: ST_TO_ADDR
59395: GO 59369
59397: POP
59398: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
59399: LD_ADDR_VAR 0 3
59403: PUSH
59404: LD_EXP 2
59408: PPUSH
59409: LD_INT 0
59411: PPUSH
59412: CALL_OW 517
59416: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59417: LD_ADDR_VAR 0 1
59421: PUSH
59422: DOUBLE
59423: LD_INT 1
59425: DEC
59426: ST_TO_ADDR
59427: LD_VAR 0 3
59431: PUSH
59432: LD_INT 1
59434: ARRAY
59435: PUSH
59436: FOR_TO
59437: IFFALSE 59504
// for j := 1 to 8 do
59439: LD_ADDR_VAR 0 2
59443: PUSH
59444: DOUBLE
59445: LD_INT 1
59447: DEC
59448: ST_TO_ADDR
59449: LD_INT 8
59451: PUSH
59452: FOR_TO
59453: IFFALSE 59500
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
59455: LD_VAR 0 3
59459: PUSH
59460: LD_INT 1
59462: ARRAY
59463: PUSH
59464: LD_VAR 0 1
59468: ARRAY
59469: PPUSH
59470: LD_VAR 0 3
59474: PUSH
59475: LD_INT 2
59477: ARRAY
59478: PUSH
59479: LD_VAR 0 1
59483: ARRAY
59484: PPUSH
59485: LD_VAR 0 2
59489: PPUSH
59490: LD_INT 12
59492: NEG
59493: PPUSH
59494: CALL_OW 330
59498: GO 59452
59500: POP
59501: POP
59502: GO 59436
59504: POP
59505: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
59506: LD_EXP 36
59510: PPUSH
59511: LD_INT 1
59513: PPUSH
59514: CALL_OW 424
// UpdateCounter ;
59518: CALL 60128 0 0
// repeat wait ( 0 0$1 ) ;
59522: LD_INT 35
59524: PPUSH
59525: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59529: LD_ADDR_VAR 0 3
59533: PUSH
59534: LD_EXP 36
59538: PPUSH
59539: LD_INT 3
59541: PUSH
59542: LD_INT 57
59544: PUSH
59545: EMPTY
59546: LIST
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 50
59554: PUSH
59555: EMPTY
59556: LIST
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: LD_INT 30
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 30
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: LIST
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: LIST
59590: PPUSH
59591: CALL_OW 70
59595: ST_TO_ADDR
// if not tmp then
59596: LD_VAR 0 3
59600: NOT
59601: IFFALSE 59605
// continue ;
59603: GO 59522
// AddPoints ( tmp ) ;
59605: LD_VAR 0 3
59609: PPUSH
59610: CALL 59806 0 1
// UpdateCounter ;
59614: CALL 60128 0 0
// until false ;
59618: LD_INT 0
59620: IFFALSE 59522
// end ;
59622: PPOPN 3
59624: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
59625: LD_EXP 41
59629: IFFALSE 59637
59631: PUSH
59632: LD_EXP 39
59636: AND
59637: IFFALSE 59803
59639: GO 59641
59641: DISABLE
59642: LD_INT 0
59644: PPUSH
59645: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
59646: LD_ADDR_VAR 0 2
59650: PUSH
59651: LD_EXP 2
59655: PPUSH
59656: LD_INT 0
59658: PPUSH
59659: CALL_OW 517
59663: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59664: LD_ADDR_VAR 0 1
59668: PUSH
59669: DOUBLE
59670: LD_INT 1
59672: DEC
59673: ST_TO_ADDR
59674: LD_VAR 0 2
59678: PUSH
59679: LD_INT 1
59681: ARRAY
59682: PUSH
59683: FOR_TO
59684: IFFALSE 59725
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
59686: LD_VAR 0 2
59690: PUSH
59691: LD_INT 1
59693: ARRAY
59694: PUSH
59695: LD_VAR 0 1
59699: ARRAY
59700: PPUSH
59701: LD_VAR 0 2
59705: PUSH
59706: LD_INT 2
59708: ARRAY
59709: PUSH
59710: LD_VAR 0 1
59714: ARRAY
59715: PPUSH
59716: LD_INT 125
59718: PPUSH
59719: CALL_OW 495
59723: GO 59683
59725: POP
59726: POP
// repeat wait ( mpEmissions ) ;
59727: LD_EXP 39
59731: PPUSH
59732: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
59736: LD_ADDR_VAR 0 1
59740: PUSH
59741: DOUBLE
59742: LD_INT 1
59744: DEC
59745: ST_TO_ADDR
59746: LD_VAR 0 2
59750: PUSH
59751: LD_INT 1
59753: ARRAY
59754: PUSH
59755: FOR_TO
59756: IFFALSE 59797
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
59758: LD_VAR 0 2
59762: PUSH
59763: LD_INT 1
59765: ARRAY
59766: PUSH
59767: LD_VAR 0 1
59771: ARRAY
59772: PPUSH
59773: LD_VAR 0 2
59777: PUSH
59778: LD_INT 2
59780: ARRAY
59781: PUSH
59782: LD_VAR 0 1
59786: ARRAY
59787: PPUSH
59788: LD_INT 15
59790: PPUSH
59791: CALL_OW 495
59795: GO 59755
59797: POP
59798: POP
// until false ;
59799: LD_INT 0
59801: IFFALSE 59727
// end ;
59803: PPOPN 2
59805: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
59806: LD_INT 0
59808: PPUSH
59809: PPUSH
59810: PPUSH
59811: PPUSH
59812: PPUSH
// if mpTeamGame then
59813: LD_EXP 13
59817: IFFALSE 60014
// begin first := depots [ 1 ] ;
59819: LD_ADDR_VAR 0 4
59823: PUSH
59824: LD_VAR 0 1
59828: PUSH
59829: LD_INT 1
59831: ARRAY
59832: ST_TO_ADDR
// side := GetSide ( first ) ;
59833: LD_ADDR_VAR 0 6
59837: PUSH
59838: LD_VAR 0 4
59842: PPUSH
59843: CALL_OW 255
59847: ST_TO_ADDR
// for i := 1 to mpTeams do
59848: LD_ADDR_VAR 0 3
59852: PUSH
59853: DOUBLE
59854: LD_INT 1
59856: DEC
59857: ST_TO_ADDR
59858: LD_EXP 12
59862: PUSH
59863: FOR_TO
59864: IFFALSE 59898
// if side in mpTeams [ i ] then
59866: LD_VAR 0 6
59870: PUSH
59871: LD_EXP 12
59875: PUSH
59876: LD_VAR 0 3
59880: ARRAY
59881: IN
59882: IFFALSE 59896
// begin team := i ;
59884: LD_ADDR_VAR 0 5
59888: PUSH
59889: LD_VAR 0 3
59893: ST_TO_ADDR
// break ;
59894: GO 59898
// end ;
59896: GO 59863
59898: POP
59899: POP
// if not team then
59900: LD_VAR 0 5
59904: NOT
59905: IFFALSE 59909
// exit ;
59907: GO 60123
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59909: LD_EXP 36
59913: PPUSH
59914: LD_INT 81
59916: PUSH
59917: LD_VAR 0 6
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PPUSH
59926: CALL_OW 70
59930: IFFALSE 59934
// exit ;
59932: GO 60123
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59934: LD_ADDR_EXP 60
59938: PUSH
59939: LD_EXP 60
59943: PPUSH
59944: LD_VAR 0 5
59948: PPUSH
59949: LD_EXP 60
59953: PUSH
59954: LD_VAR 0 5
59958: ARRAY
59959: PUSH
59960: LD_INT 1
59962: PLUS
59963: PPUSH
59964: CALL_OW 1
59968: ST_TO_ADDR
// for i in mpTeams [ team ] do
59969: LD_ADDR_VAR 0 3
59973: PUSH
59974: LD_EXP 12
59978: PUSH
59979: LD_VAR 0 5
59983: ARRAY
59984: PUSH
59985: FOR_IN
59986: IFFALSE 60010
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59988: LD_VAR 0 3
59992: PPUSH
59993: LD_EXP 60
59997: PUSH
59998: LD_VAR 0 5
60002: ARRAY
60003: PPUSH
60004: CALL_OW 506
60008: GO 59985
60010: POP
60011: POP
// end else
60012: GO 60123
// begin first := depots [ 1 ] ;
60014: LD_ADDR_VAR 0 4
60018: PUSH
60019: LD_VAR 0 1
60023: PUSH
60024: LD_INT 1
60026: ARRAY
60027: ST_TO_ADDR
// side := GetSide ( first ) ;
60028: LD_ADDR_VAR 0 6
60032: PUSH
60033: LD_VAR 0 4
60037: PPUSH
60038: CALL_OW 255
60042: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
60043: LD_EXP 36
60047: PPUSH
60048: LD_INT 81
60050: PUSH
60051: LD_VAR 0 6
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PPUSH
60060: CALL_OW 70
60064: IFFALSE 60068
// exit ;
60066: GO 60123
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
60068: LD_ADDR_EXP 60
60072: PUSH
60073: LD_EXP 60
60077: PPUSH
60078: LD_VAR 0 6
60082: PPUSH
60083: LD_EXP 60
60087: PUSH
60088: LD_VAR 0 6
60092: ARRAY
60093: PUSH
60094: LD_INT 1
60096: PLUS
60097: PPUSH
60098: CALL_OW 1
60102: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
60103: LD_VAR 0 6
60107: PPUSH
60108: LD_EXP 60
60112: PUSH
60113: LD_VAR 0 6
60117: ARRAY
60118: PPUSH
60119: CALL_OW 506
// end ; end ;
60123: LD_VAR 0 2
60127: RET
// function UpdateCounter ; var i ; begin
60128: LD_INT 0
60130: PPUSH
60131: PPUSH
// result := [ ] ;
60132: LD_ADDR_VAR 0 1
60136: PUSH
60137: EMPTY
60138: ST_TO_ADDR
// if mpTeamGame then
60139: LD_EXP 13
60143: IFFALSE 60210
// begin for i := 1 to mpTeams do
60145: LD_ADDR_VAR 0 2
60149: PUSH
60150: DOUBLE
60151: LD_INT 1
60153: DEC
60154: ST_TO_ADDR
60155: LD_EXP 12
60159: PUSH
60160: FOR_TO
60161: IFFALSE 60206
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
60163: LD_ADDR_VAR 0 1
60167: PUSH
60168: LD_VAR 0 1
60172: PUSH
60173: LD_STRING #KingoftheHill-Team
60175: PUSH
60176: LD_VAR 0 2
60180: PUSH
60181: LD_EXP 60
60185: PUSH
60186: LD_VAR 0 2
60190: ARRAY
60191: PUSH
60192: LD_EXP 37
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: ADD
60203: ST_TO_ADDR
60204: GO 60160
60206: POP
60207: POP
// end else
60208: GO 60283
// begin for i := 1 to 8 do
60210: LD_ADDR_VAR 0 2
60214: PUSH
60215: DOUBLE
60216: LD_INT 1
60218: DEC
60219: ST_TO_ADDR
60220: LD_INT 8
60222: PUSH
60223: FOR_TO
60224: IFFALSE 60281
// if mpSidePositions [ i ] then
60226: LD_EXP 9
60230: PUSH
60231: LD_VAR 0 2
60235: ARRAY
60236: IFFALSE 60279
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
60238: LD_ADDR_VAR 0 1
60242: PUSH
60243: LD_VAR 0 1
60247: PUSH
60248: LD_STRING #KingoftheHill-Player
60250: PUSH
60251: LD_VAR 0 2
60255: PUSH
60256: LD_EXP 60
60260: PUSH
60261: LD_VAR 0 2
60265: ARRAY
60266: PUSH
60267: LD_EXP 37
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: ADD
60278: ST_TO_ADDR
60279: GO 60223
60281: POP
60282: POP
// end ; mpDisplayStrings := result ;
60283: LD_ADDR_EXP 40
60287: PUSH
60288: LD_VAR 0 1
60292: ST_TO_ADDR
// end ;
60293: LD_VAR 0 1
60297: RET
// export function HowMuchPointsKing ( side ) ; begin
60298: LD_INT 0
60300: PPUSH
// result := HowMuchPoints ( side ) ;
60301: LD_ADDR_VAR 0 2
60305: PUSH
60306: LD_VAR 0 1
60310: PPUSH
60311: CALL 60321 0 1
60315: ST_TO_ADDR
// end ;
60316: LD_VAR 0 2
60320: RET
// function HowMuchPoints ( side ) ; var i ; begin
60321: LD_INT 0
60323: PPUSH
60324: PPUSH
// if mpTeamGame then
60325: LD_EXP 13
60329: IFFALSE 60398
// begin for i := 1 to Count ( mpTeams ) do
60331: LD_ADDR_VAR 0 3
60335: PUSH
60336: DOUBLE
60337: LD_INT 1
60339: DEC
60340: ST_TO_ADDR
60341: LD_EXP 12
60345: PPUSH
60346: CALL 12402 0 1
60350: PUSH
60351: FOR_TO
60352: IFFALSE 60394
// begin if side in mpTeams [ i ] then
60354: LD_VAR 0 1
60358: PUSH
60359: LD_EXP 12
60363: PUSH
60364: LD_VAR 0 3
60368: ARRAY
60369: IN
60370: IFFALSE 60392
// begin result := mpKingPoints [ i ] ;
60372: LD_ADDR_VAR 0 2
60376: PUSH
60377: LD_EXP 60
60381: PUSH
60382: LD_VAR 0 3
60386: ARRAY
60387: ST_TO_ADDR
// exit ;
60388: POP
60389: POP
60390: GO 60414
// end ; end ;
60392: GO 60351
60394: POP
60395: POP
// end else
60396: GO 60414
// result := mpKingPoints [ side ] ;
60398: LD_ADDR_VAR 0 2
60402: PUSH
60403: LD_EXP 60
60407: PUSH
60408: LD_VAR 0 1
60412: ARRAY
60413: ST_TO_ADDR
// end ;
60414: LD_VAR 0 2
60418: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
60419: LD_EXP 41
60423: IFFALSE 60431
60425: PUSH
60426: CALL 60843 0 0
60430: AND
60431: IFFALSE 60439
60433: PUSH
60434: LD_OWVAR 4
60438: AND
60439: IFFALSE 60692
60441: GO 60443
60443: DISABLE
60444: LD_INT 0
60446: PPUSH
60447: PPUSH
// begin canWin := false ;
60448: LD_ADDR_VAR 0 2
60452: PUSH
60453: LD_INT 0
60455: ST_TO_ADDR
// if not HasPower ( your_side ) then
60456: LD_OWVAR 2
60460: PPUSH
60461: CALL 60885 0 1
60465: NOT
60466: IFFALSE 60477
// begin Multiplayer_Loose_Message ;
60468: CALL_OW 521
// enable ( mpLose ) ;
60472: LD_INT 102
60474: ENABLE_MARKED
// end else
60475: GO 60692
// begin if not EnemiesInGame then
60477: CALL 60695 0 0
60481: NOT
60482: IFFALSE 60489
// begin enable ( mpWin ) ;
60484: LD_INT 101
60486: ENABLE_MARKED
// exit ;
60487: GO 60692
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
60489: LD_ADDR_VAR 0 2
60493: PUSH
60494: LD_OWVAR 2
60498: PPUSH
60499: CALL 60321 0 1
60503: PUSH
60504: LD_EXP 37
60508: GREATEREQUAL
60509: IFFALSE 60522
60511: PUSH
60512: LD_OWVAR 2
60516: PPUSH
60517: CALL 60885 0 1
60521: AND
60522: ST_TO_ADDR
// for i := 1 to 8 do
60523: LD_ADDR_VAR 0 1
60527: PUSH
60528: DOUBLE
60529: LD_INT 1
60531: DEC
60532: ST_TO_ADDR
60533: LD_INT 8
60535: PUSH
60536: FOR_TO
60537: IFFALSE 60678
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
60539: LD_EXP 9
60543: PUSH
60544: LD_VAR 0 1
60548: ARRAY
60549: IFFALSE 60562
60551: PUSH
60552: LD_VAR 0 1
60556: PPUSH
60557: CALL_OW 108
60561: AND
60562: IFFALSE 60576
60564: PUSH
60565: LD_VAR 0 1
60569: PUSH
60570: LD_OWVAR 2
60574: NONEQUAL
60575: AND
60576: IFFALSE 60676
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60578: LD_EXP 10
60582: PUSH
60583: LD_VAR 0 1
60587: ARRAY
60588: NOT
60589: IFTRUE 60637
60591: PUSH
60592: LD_EXP 10
60596: PUSH
60597: LD_VAR 0 1
60601: ARRAY
60602: PUSH
60603: LD_EXP 10
60607: PUSH
60608: LD_OWVAR 2
60612: ARRAY
60613: NONEQUAL
60614: IFFALSE 60636
60616: PUSH
60617: LD_OWVAR 2
60621: PPUSH
60622: LD_VAR 0 1
60626: PPUSH
60627: CALL_OW 81
60631: PUSH
60632: LD_INT 1
60634: NONEQUAL
60635: AND
60636: OR
60637: IFFALSE 60676
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
60639: LD_VAR 0 1
60643: PPUSH
60644: CALL 60321 0 1
60648: PUSH
60649: LD_EXP 37
60653: GREATEREQUAL
60654: IFFALSE 60667
60656: PUSH
60657: LD_VAR 0 1
60661: PPUSH
60662: CALL 60885 0 1
60666: AND
60667: IFFALSE 60676
// begin enable ( mpLose ) ;
60669: LD_INT 102
60671: ENABLE_MARKED
// exit ;
60672: POP
60673: POP
60674: GO 60692
// end ;
60676: GO 60536
60678: POP
60679: POP
// if canWin then
60680: LD_VAR 0 2
60684: IFFALSE 60691
// enable ( mpWin ) else
60686: LD_INT 101
60688: ENABLE_MARKED
60689: GO 60692
// enable ;
60691: ENABLE
// end ; end ;
60692: PPOPN 2
60694: END
// function EnemiesInGame ; var i ; begin
60695: LD_INT 0
60697: PPUSH
60698: PPUSH
// result := false ;
60699: LD_ADDR_VAR 0 1
60703: PUSH
60704: LD_INT 0
60706: ST_TO_ADDR
// for i := 1 to 8 do
60707: LD_ADDR_VAR 0 2
60711: PUSH
60712: DOUBLE
60713: LD_INT 1
60715: DEC
60716: ST_TO_ADDR
60717: LD_INT 8
60719: PUSH
60720: FOR_TO
60721: IFFALSE 60836
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
60723: LD_VAR 0 2
60727: PUSH
60728: LD_OWVAR 2
60732: NONEQUAL
60733: IFFALSE 60746
60735: PUSH
60736: LD_VAR 0 2
60740: PPUSH
60741: CALL 60885 0 1
60745: AND
60746: IFFALSE 60759
60748: PUSH
60749: LD_VAR 0 2
60753: PPUSH
60754: CALL_OW 108
60758: AND
60759: IFFALSE 60834
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60761: LD_EXP 10
60765: PUSH
60766: LD_VAR 0 2
60770: ARRAY
60771: NOT
60772: IFTRUE 60820
60774: PUSH
60775: LD_EXP 10
60779: PUSH
60780: LD_VAR 0 2
60784: ARRAY
60785: PUSH
60786: LD_EXP 10
60790: PUSH
60791: LD_OWVAR 2
60795: ARRAY
60796: NONEQUAL
60797: IFFALSE 60819
60799: PUSH
60800: LD_OWVAR 2
60804: PPUSH
60805: LD_VAR 0 2
60809: PPUSH
60810: CALL_OW 81
60814: PUSH
60815: LD_INT 1
60817: NONEQUAL
60818: AND
60819: OR
60820: IFFALSE 60834
// begin result := true ;
60822: LD_ADDR_VAR 0 1
60826: PUSH
60827: LD_INT 1
60829: ST_TO_ADDR
// exit ;
60830: POP
60831: POP
60832: GO 60838
// end ;
60834: GO 60720
60836: POP
60837: POP
// end ;
60838: LD_VAR 0 1
60842: RET
// function CanWinLoose ; begin
60843: LD_INT 0
60845: PPUSH
// result := true ;
60846: LD_ADDR_VAR 0 1
60850: PUSH
60851: LD_INT 1
60853: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
60854: CALL_OW 531
60858: IFFALSE 60870
60860: PUSH
60861: CALL_OW 519
60865: PUSH
60866: LD_INT 1
60868: GREATER
60869: AND
60870: IFFALSE 60880
// result := false ;
60872: LD_ADDR_VAR 0 1
60876: PUSH
60877: LD_INT 0
60879: ST_TO_ADDR
// end ;
60880: LD_VAR 0 1
60884: RET
// function HasPower ( i ) ; begin
60885: LD_INT 0
60887: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
60888: LD_ADDR_VAR 0 2
60892: PUSH
60893: LD_INT 22
60895: PUSH
60896: LD_VAR 0 1
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: PUSH
60908: LD_INT 21
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 33
60920: PUSH
60921: LD_INT 3
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 33
60930: PUSH
60931: LD_INT 5
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PPUSH
60948: CALL_OW 69
60952: ST_TO_ADDR
// end ; end_of_file
60953: LD_VAR 0 2
60957: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60958: PPOPN 6
60960: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60961: LD_EXP 5
60965: PUSH
60966: LD_INT 4
60968: EQUAL
60969: IFFALSE 61005
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60971: LD_STRING setGameDifficulty(
60973: PUSH
60974: LD_OWVAR 67
60978: STR
60979: PUSH
60980: LD_STRING )
60982: STR
60983: PPUSH
60984: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60988: LD_STRING displayDifficulty(
60990: PUSH
60991: LD_OWVAR 67
60995: STR
60996: PUSH
60997: LD_STRING )
60999: STR
61000: PPUSH
61001: CALL_OW 559
// end ; SOS_MapStart ( ) ;
61005: CALL 61034 0 0
// end ; end_of_file
61009: PPOPN 1
61011: END
// every 0 0$1 do
61012: GO 61014
61014: DISABLE
// begin enable ;
61015: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61016: LD_STRING updateTimer(
61018: PUSH
61019: LD_OWVAR 1
61023: STR
61024: PUSH
61025: LD_STRING );
61027: STR
61028: PPUSH
61029: CALL_OW 559
// end ;
61033: END
// export function SOS_MapStart ( ) ; begin
61034: LD_INT 0
61036: PPUSH
// UpdateFactoryWaypoints ( ) ;
61037: CALL 61968 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61041: CALL 62220 0 0
// ParseMultiDataToLua ( ) ;
61045: CALL 62367 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
61049: LD_STRING setSpecLogoNumber(
61051: PUSH
61052: LD_INT 2
61054: STR
61055: PUSH
61056: LD_STRING ,
61058: STR
61059: PUSH
61060: LD_INT 1
61062: STR
61063: PUSH
61064: LD_STRING )
61066: STR
61067: PPUSH
61068: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
61072: LD_STRING setSpecLogoNumber(
61074: PUSH
61075: LD_INT 3
61077: STR
61078: PUSH
61079: LD_STRING ,
61081: STR
61082: PUSH
61083: LD_INT 2
61085: STR
61086: PUSH
61087: LD_STRING )
61089: STR
61090: PPUSH
61091: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
61095: LD_STRING setSpecLogoNumber(
61097: PUSH
61098: LD_INT 4
61100: STR
61101: PUSH
61102: LD_STRING ,
61104: STR
61105: PUSH
61106: LD_INT 3
61108: STR
61109: PUSH
61110: LD_STRING )
61112: STR
61113: PPUSH
61114: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
61118: LD_STRING setSpecLogoNumber(
61120: PUSH
61121: LD_INT 5
61123: STR
61124: PUSH
61125: LD_STRING ,
61127: STR
61128: PUSH
61129: LD_INT 4
61131: STR
61132: PUSH
61133: LD_STRING )
61135: STR
61136: PPUSH
61137: CALL_OW 559
// end ;
61141: LD_VAR 0 1
61145: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61146: LD_INT 0
61148: PPUSH
61149: PPUSH
61150: PPUSH
61151: PPUSH
61152: PPUSH
61153: PPUSH
61154: PPUSH
61155: PPUSH
61156: PPUSH
// for i := 1 to 8 do
61157: LD_ADDR_VAR 0 2
61161: PUSH
61162: DOUBLE
61163: LD_INT 1
61165: DEC
61166: ST_TO_ADDR
61167: LD_INT 8
61169: PUSH
61170: FOR_TO
61171: IFFALSE 61556
// begin if mpSidePositions [ i ] then
61173: LD_EXP 9
61177: PUSH
61178: LD_VAR 0 2
61182: ARRAY
61183: IFFALSE 61554
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61185: LD_ADDR_VAR 0 7
61189: PUSH
61190: LD_INT 22
61192: PUSH
61193: LD_VAR 0 2
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 21
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PPUSH
61216: CALL_OW 69
61220: PPUSH
61221: CALL 12402 0 1
61225: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61226: LD_ADDR_VAR 0 9
61230: PUSH
61231: LD_INT 22
61233: PUSH
61234: LD_VAR 0 2
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: LD_INT 30
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 30
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: LIST
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PPUSH
61275: CALL_OW 69
61279: ST_TO_ADDR
// crates := 0 ;
61280: LD_ADDR_VAR 0 4
61284: PUSH
61285: LD_INT 0
61287: ST_TO_ADDR
// oil := 0 ;
61288: LD_ADDR_VAR 0 5
61292: PUSH
61293: LD_INT 0
61295: ST_TO_ADDR
// sib := 0 ;
61296: LD_ADDR_VAR 0 6
61300: PUSH
61301: LD_INT 0
61303: ST_TO_ADDR
// if bases then
61304: LD_VAR 0 9
61308: IFFALSE 61414
// begin for j in bases do
61310: LD_ADDR_VAR 0 3
61314: PUSH
61315: LD_VAR 0 9
61319: PUSH
61320: FOR_IN
61321: IFFALSE 61412
// begin base := GetBase ( j ) ;
61323: LD_ADDR_VAR 0 8
61327: PUSH
61328: LD_VAR 0 3
61332: PPUSH
61333: CALL_OW 274
61337: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61338: LD_ADDR_VAR 0 4
61342: PUSH
61343: LD_VAR 0 4
61347: PUSH
61348: LD_VAR 0 8
61352: PPUSH
61353: LD_INT 1
61355: PPUSH
61356: CALL_OW 275
61360: PLUS
61361: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61362: LD_ADDR_VAR 0 5
61366: PUSH
61367: LD_VAR 0 5
61371: PUSH
61372: LD_VAR 0 8
61376: PPUSH
61377: LD_INT 2
61379: PPUSH
61380: CALL_OW 275
61384: PLUS
61385: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61386: LD_ADDR_VAR 0 6
61390: PUSH
61391: LD_VAR 0 6
61395: PUSH
61396: LD_VAR 0 8
61400: PPUSH
61401: LD_INT 3
61403: PPUSH
61404: CALL_OW 275
61408: PLUS
61409: ST_TO_ADDR
// end ;
61410: GO 61320
61412: POP
61413: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61414: LD_STRING setSpecText(
61416: PUSH
61417: LD_VAR 0 2
61421: STR
61422: PUSH
61423: LD_STRING ,
61425: STR
61426: PUSH
61427: LD_INT 2
61429: STR
61430: PUSH
61431: LD_STRING ,
61433: STR
61434: PUSH
61435: LD_VAR 0 4
61439: STR
61440: PUSH
61441: LD_STRING )
61443: STR
61444: PPUSH
61445: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61449: LD_STRING setSpecText(
61451: PUSH
61452: LD_VAR 0 2
61456: STR
61457: PUSH
61458: LD_STRING ,
61460: STR
61461: PUSH
61462: LD_INT 3
61464: STR
61465: PUSH
61466: LD_STRING ,
61468: STR
61469: PUSH
61470: LD_VAR 0 5
61474: STR
61475: PUSH
61476: LD_STRING )
61478: STR
61479: PPUSH
61480: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61484: LD_STRING setSpecText(
61486: PUSH
61487: LD_VAR 0 2
61491: STR
61492: PUSH
61493: LD_STRING ,
61495: STR
61496: PUSH
61497: LD_INT 4
61499: STR
61500: PUSH
61501: LD_STRING ,
61503: STR
61504: PUSH
61505: LD_VAR 0 6
61509: STR
61510: PUSH
61511: LD_STRING )
61513: STR
61514: PPUSH
61515: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61519: LD_STRING setSpecText(
61521: PUSH
61522: LD_VAR 0 2
61526: STR
61527: PUSH
61528: LD_STRING ,
61530: STR
61531: PUSH
61532: LD_INT 5
61534: STR
61535: PUSH
61536: LD_STRING ,
61538: STR
61539: PUSH
61540: LD_VAR 0 7
61544: STR
61545: PUSH
61546: LD_STRING )
61548: STR
61549: PPUSH
61550: CALL_OW 559
// end ; end ;
61554: GO 61170
61556: POP
61557: POP
// end ;
61558: LD_VAR 0 1
61562: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61563: LD_INT 2
61565: PUSH
61566: LD_INT 30
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 30
61578: PUSH
61579: LD_INT 1
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: LIST
61590: PPUSH
61591: CALL_OW 69
61595: IFFALSE 61605
61597: GO 61599
61599: DISABLE
// begin enable ;
61600: ENABLE
// UpdateSpectatorBar ;
61601: CALL 61146 0 0
// end ;
61605: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61606: LD_INT 0
61608: PPUSH
// end ;
61609: LD_VAR 0 12
61613: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61614: LD_INT 0
61616: PPUSH
61617: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61618: LD_VAR 0 1
61622: NOT
61623: IFTRUE 61642
61625: PUSH
61626: LD_VAR 0 2
61630: PPUSH
61631: LD_VAR 0 3
61635: PPUSH
61636: CALL_OW 488
61640: NOT
61641: OR
61642: IFTRUE 61677
61644: PUSH
61645: LD_VAR 0 1
61649: PPUSH
61650: CALL_OW 266
61654: PUSH
61655: LD_INT 3
61657: NONEQUAL
61658: IFFALSE 61676
61660: PUSH
61661: LD_VAR 0 1
61665: PPUSH
61666: CALL_OW 247
61670: PUSH
61671: LD_INT 1
61673: EQUAL
61674: NOT
61675: AND
61676: OR
61677: IFFALSE 61681
// exit ;
61679: GO 61963
// if GetType ( factory ) = unit_human then
61681: LD_VAR 0 1
61685: PPUSH
61686: CALL_OW 247
61690: PUSH
61691: LD_INT 1
61693: EQUAL
61694: IFFALSE 61711
// factory := IsInUnit ( factory ) ;
61696: LD_ADDR_VAR 0 1
61700: PUSH
61701: LD_VAR 0 1
61705: PPUSH
61706: CALL_OW 310
61710: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61711: LD_VAR 0 1
61715: PPUSH
61716: CALL_OW 266
61720: PUSH
61721: LD_INT 3
61723: NONEQUAL
61724: IFFALSE 61728
// exit ;
61726: GO 61963
// for i := 1 to Count ( factoryWaypoints ) do
61728: LD_ADDR_VAR 0 5
61732: PUSH
61733: DOUBLE
61734: LD_INT 1
61736: DEC
61737: ST_TO_ADDR
61738: LD_EXP 61
61742: PPUSH
61743: CALL 12402 0 1
61747: PUSH
61748: FOR_TO
61749: IFFALSE 61911
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61751: LD_VAR 0 2
61755: PPUSH
61756: LD_VAR 0 3
61760: PPUSH
61761: CALL_OW 428
61765: PUSH
61766: LD_EXP 61
61770: PUSH
61771: LD_VAR 0 5
61775: ARRAY
61776: PUSH
61777: LD_INT 2
61779: ARRAY
61780: EQUAL
61781: IFFALSE 61813
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61783: LD_ADDR_EXP 61
61787: PUSH
61788: LD_EXP 61
61792: PPUSH
61793: LD_VAR 0 5
61797: PPUSH
61798: CALL_OW 3
61802: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61803: CALL 61968 0 0
// exit ;
61807: POP
61808: POP
61809: GO 61963
// end else
61811: GO 61909
// if factory = factoryWaypoints [ i ] [ 2 ] then
61813: LD_VAR 0 1
61817: PUSH
61818: LD_EXP 61
61822: PUSH
61823: LD_VAR 0 5
61827: ARRAY
61828: PUSH
61829: LD_INT 2
61831: ARRAY
61832: EQUAL
61833: IFFALSE 61909
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61835: LD_ADDR_EXP 61
61839: PUSH
61840: LD_EXP 61
61844: PPUSH
61845: LD_VAR 0 5
61849: PPUSH
61850: CALL_OW 3
61854: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61855: LD_ADDR_EXP 61
61859: PUSH
61860: LD_EXP 61
61864: PPUSH
61865: LD_VAR 0 1
61869: PPUSH
61870: CALL_OW 255
61874: PUSH
61875: LD_VAR 0 1
61879: PUSH
61880: LD_VAR 0 2
61884: PUSH
61885: LD_VAR 0 3
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: PPUSH
61896: CALL 48334 0 2
61900: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61901: CALL 61968 0 0
// exit ;
61905: POP
61906: POP
61907: GO 61963
// end ; end ;
61909: GO 61748
61911: POP
61912: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61913: LD_ADDR_EXP 61
61917: PUSH
61918: LD_EXP 61
61922: PPUSH
61923: LD_VAR 0 1
61927: PPUSH
61928: CALL_OW 255
61932: PUSH
61933: LD_VAR 0 1
61937: PUSH
61938: LD_VAR 0 2
61942: PUSH
61943: LD_VAR 0 3
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: PPUSH
61954: CALL 48334 0 2
61958: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61959: CALL 61968 0 0
// end ;
61963: LD_VAR 0 4
61967: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61968: LD_INT 0
61970: PPUSH
61971: PPUSH
61972: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61973: LD_STRING resetFactoryWaypoint();
61975: PPUSH
61976: CALL_OW 559
// if factoryWaypoints then
61980: LD_EXP 61
61984: IFFALSE 62105
// begin list := factoryWaypoints ;
61986: LD_ADDR_VAR 0 3
61990: PUSH
61991: LD_EXP 61
61995: ST_TO_ADDR
// for i := 1 to list do
61996: LD_ADDR_VAR 0 2
62000: PUSH
62001: DOUBLE
62002: LD_INT 1
62004: DEC
62005: ST_TO_ADDR
62006: LD_VAR 0 3
62010: PUSH
62011: FOR_TO
62012: IFFALSE 62103
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62014: LD_STRING setFactoryWaypointXY(
62016: PUSH
62017: LD_VAR 0 3
62021: PUSH
62022: LD_VAR 0 2
62026: ARRAY
62027: PUSH
62028: LD_INT 1
62030: ARRAY
62031: STR
62032: PUSH
62033: LD_STRING ,
62035: STR
62036: PUSH
62037: LD_VAR 0 3
62041: PUSH
62042: LD_VAR 0 2
62046: ARRAY
62047: PUSH
62048: LD_INT 2
62050: ARRAY
62051: STR
62052: PUSH
62053: LD_STRING ,
62055: STR
62056: PUSH
62057: LD_VAR 0 3
62061: PUSH
62062: LD_VAR 0 2
62066: ARRAY
62067: PUSH
62068: LD_INT 3
62070: ARRAY
62071: STR
62072: PUSH
62073: LD_STRING ,
62075: STR
62076: PUSH
62077: LD_VAR 0 3
62081: PUSH
62082: LD_VAR 0 2
62086: ARRAY
62087: PUSH
62088: LD_INT 4
62090: ARRAY
62091: STR
62092: PUSH
62093: LD_STRING )
62095: STR
62096: PPUSH
62097: CALL_OW 559
62101: GO 62011
62103: POP
62104: POP
// end ; end ;
62105: LD_VAR 0 1
62109: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62110: LD_INT 0
62112: PPUSH
// if HexInfo ( x , y ) = warehouse then
62113: LD_VAR 0 2
62117: PPUSH
62118: LD_VAR 0 3
62122: PPUSH
62123: CALL_OW 428
62127: PUSH
62128: LD_VAR 0 1
62132: EQUAL
62133: IFFALSE 62160
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62135: LD_ADDR_EXP 63
62139: PUSH
62140: LD_EXP 63
62144: PPUSH
62145: LD_VAR 0 1
62149: PPUSH
62150: LD_INT 0
62152: PPUSH
62153: CALL_OW 1
62157: ST_TO_ADDR
62158: GO 62211
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62160: LD_ADDR_EXP 63
62164: PUSH
62165: LD_EXP 63
62169: PPUSH
62170: LD_VAR 0 1
62174: PPUSH
62175: LD_VAR 0 1
62179: PPUSH
62180: CALL_OW 255
62184: PUSH
62185: LD_VAR 0 1
62189: PUSH
62190: LD_VAR 0 2
62194: PUSH
62195: LD_VAR 0 3
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: PPUSH
62206: CALL_OW 1
62210: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62211: CALL 62220 0 0
// end ;
62215: LD_VAR 0 4
62219: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62220: LD_INT 0
62222: PPUSH
62223: PPUSH
62224: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62225: LD_STRING resetWarehouseGatheringPoints();
62227: PPUSH
62228: CALL_OW 559
// if warehouseGatheringPoints then
62232: LD_EXP 63
62236: IFFALSE 62362
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62238: LD_ADDR_VAR 0 3
62242: PUSH
62243: LD_EXP 63
62247: PPUSH
62248: CALL 52268 0 1
62252: ST_TO_ADDR
// for i := 1 to list do
62253: LD_ADDR_VAR 0 2
62257: PUSH
62258: DOUBLE
62259: LD_INT 1
62261: DEC
62262: ST_TO_ADDR
62263: LD_VAR 0 3
62267: PUSH
62268: FOR_TO
62269: IFFALSE 62360
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62271: LD_STRING setWarehouseGatheringPointXY(
62273: PUSH
62274: LD_VAR 0 3
62278: PUSH
62279: LD_VAR 0 2
62283: ARRAY
62284: PUSH
62285: LD_INT 1
62287: ARRAY
62288: STR
62289: PUSH
62290: LD_STRING ,
62292: STR
62293: PUSH
62294: LD_VAR 0 3
62298: PUSH
62299: LD_VAR 0 2
62303: ARRAY
62304: PUSH
62305: LD_INT 2
62307: ARRAY
62308: STR
62309: PUSH
62310: LD_STRING ,
62312: STR
62313: PUSH
62314: LD_VAR 0 3
62318: PUSH
62319: LD_VAR 0 2
62323: ARRAY
62324: PUSH
62325: LD_INT 3
62327: ARRAY
62328: STR
62329: PUSH
62330: LD_STRING ,
62332: STR
62333: PUSH
62334: LD_VAR 0 3
62338: PUSH
62339: LD_VAR 0 2
62343: ARRAY
62344: PUSH
62345: LD_INT 4
62347: ARRAY
62348: STR
62349: PUSH
62350: LD_STRING )
62352: STR
62353: PPUSH
62354: CALL_OW 559
62358: GO 62268
62360: POP
62361: POP
// end ; end ;
62362: LD_VAR 0 1
62366: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62367: LD_INT 0
62369: PPUSH
62370: PPUSH
// if not mpSidePositions then
62371: LD_EXP 9
62375: NOT
62376: IFFALSE 62380
// exit ;
62378: GO 62451
// result :=  ;
62380: LD_ADDR_VAR 0 1
62384: PUSH
62385: LD_STRING 
62387: ST_TO_ADDR
// for i := 1 to 8 do
62388: LD_ADDR_VAR 0 2
62392: PUSH
62393: DOUBLE
62394: LD_INT 1
62396: DEC
62397: ST_TO_ADDR
62398: LD_INT 8
62400: PUSH
62401: FOR_TO
62402: IFFALSE 62432
// begin result := result & mpSidePositions [ i ] & ; ;
62404: LD_ADDR_VAR 0 1
62408: PUSH
62409: LD_VAR 0 1
62413: PUSH
62414: LD_EXP 9
62418: PUSH
62419: LD_VAR 0 2
62423: ARRAY
62424: STR
62425: PUSH
62426: LD_STRING ;
62428: STR
62429: ST_TO_ADDR
// end ;
62430: GO 62401
62432: POP
62433: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62434: LD_STRING setMultiplayerRealPosition("
62436: PUSH
62437: LD_VAR 0 1
62441: STR
62442: PUSH
62443: LD_STRING ");
62445: STR
62446: PPUSH
62447: CALL_OW 559
// end ;
62451: LD_VAR 0 1
62455: RET
