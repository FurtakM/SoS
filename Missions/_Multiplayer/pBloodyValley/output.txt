// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2939 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3323 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 6
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 7
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: LD_INT 2
 467: PUSH
 468: LD_INT 4
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 6300
 482: PUSH
 483: LD_INT 10500
 485: PUSH
 486: LD_INT 16800
 488: PUSH
 489: LD_INT 21000
 491: PUSH
 492: LD_INT 25200
 494: PUSH
 495: LD_INT 31500
 497: PUSH
 498: LD_INT 42000
 500: PUSH
 501: LD_INT 63000
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 4 , 3 3$0 ] ;
 538: LD_ADDR_EXP 8
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 15
 548: PUSH
 549: LD_INT 4
 551: PUSH
 552: LD_INT 100
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 250
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 10500
 583: PUSH
 584: LD_INT 1
 586: PUSH
 587: LD_INT 700
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 700
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 31500
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 4
 613: PUSH
 614: LD_INT 6300
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// your_side := 1 ;
 648: LD_ADDR_OWVAR 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 656: LD_ADDR_EXP 9
 660: PUSH
 661: LD_INT 1
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 0
 675: PUSH
 676: LD_INT 0
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 695: LD_ADDR_EXP 10
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 1
 705: PUSH
 706: LD_INT 2
 708: PUSH
 709: LD_INT 2
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: LD_INT 0
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// mpSideNations := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 734: LD_ADDR_EXP 11
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 1
 744: PUSH
 745: LD_INT 2
 747: PUSH
 748: LD_INT 2
 750: PUSH
 751: LD_INT 0
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 773: LD_ADDR_EXP 12
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 2
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 3
 790: PUSH
 791: LD_INT 4
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: ST_TO_ADDR
// mpTeamGame := true ;
 802: LD_ADDR_EXP 13
 806: PUSH
 807: LD_INT 1
 809: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 810: LD_ADDR_EXP 31
 814: PUSH
 815: LD_INT 100
 817: PUSH
 818: LD_INT 120
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: ST_TO_ADDR
// end ;
 825: LD_VAR 0 1
 829: RET
// export kingArea , kingCamArea , mpTree ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
 838: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
 839: LD_ADDR_EXP 21
 843: PUSH
 844: LD_INT 2
 846: PUSH
 847: LD_INT 3
 849: PUSH
 850: LD_INT 5
 852: PUSH
 853: LD_INT 4
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 20
 866: PUSH
 867: EMPTY
 868: PUSH
 869: LD_EXP 21
 873: UNION
 874: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 875: LD_VAR 0 1
 879: PUSH
 880: LD_INT 2
 882: EQUAL
 883: IFFALSE 895
// baseLevel := 1 else
 885: LD_ADDR_VAR 0 7
 889: PUSH
 890: LD_INT 1
 892: ST_TO_ADDR
 893: GO 909
// baseLevel := mpGameSettings [ 1 ] ;
 895: LD_ADDR_VAR 0 7
 899: PUSH
 900: LD_EXP 8
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 909: LD_ADDR_EXP 26
 913: PUSH
 914: LD_EXP 8
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 923: LD_ADDR_EXP 27
 927: PUSH
 928: LD_EXP 8
 932: PUSH
 933: LD_INT 3
 935: ARRAY
 936: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 937: LD_ADDR_EXP 17
 941: PUSH
 942: LD_EXP 8
 946: PUSH
 947: LD_INT 4
 949: ARRAY
 950: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 951: LD_ADDR_EXP 29
 955: PUSH
 956: LD_EXP 8
 960: PUSH
 961: LD_INT 5
 963: ARRAY
 964: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 965: LD_ADDR_VAR 0 5
 969: PUSH
 970: LD_EXP 8
 974: PUSH
 975: LD_INT 6
 977: ARRAY
 978: PUSH
 979: LD_INT 0
 981: GREATER
 982: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 983: LD_ADDR_VAR 0 6
 987: PUSH
 988: LD_EXP 8
 992: PUSH
 993: LD_INT 7
 995: ARRAY
 996: PUSH
 997: LD_INT 0
 999: GREATER
1000: ST_TO_ADDR
// mpKingArea := 0 ;
1001: LD_ADDR_EXP 36
1005: PUSH
1006: LD_INT 0
1008: ST_TO_ADDR
// mpPoints := 0 ;
1009: LD_ADDR_EXP 37
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpEmissions := 0 ;
1017: LD_ADDR_EXP 39
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// kingArea := 0 ;
1025: LD_ADDR_EXP 1
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// kingCamArea := 0 ;
1033: LD_ADDR_EXP 2
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1041: LD_EXP 8
1045: PUSH
1046: LD_INT 9
1048: ARRAY
1049: IFFALSE 1181
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1051: LD_ADDR_EXP 38
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 2
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 3
1085: PUSH
1086: EMPTY
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 12
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 24
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 12
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 23
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 21
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 42
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 21
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 42
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1181: LD_ADDR_EXP 18
1185: PUSH
1186: LD_EXP 8
1190: PUSH
1191: LD_INT 11
1193: ARRAY
1194: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1195: LD_ADDR_EXP 24
1199: PUSH
1200: LD_EXP 8
1204: PUSH
1205: LD_INT 12
1207: ARRAY
1208: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1209: LD_ADDR_EXP 28
1213: PUSH
1214: LD_EXP 8
1218: PUSH
1219: LD_INT 13
1221: ARRAY
1222: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1223: LD_ADDR_EXP 35
1227: PUSH
1228: LD_EXP 8
1232: PUSH
1233: LD_INT 14
1235: ARRAY
1236: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1237: LD_ADDR_EXP 32
1241: PUSH
1242: LD_EXP 8
1246: PUSH
1247: LD_INT 15
1249: ARRAY
1250: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1251: LD_ADDR_EXP 30
1255: PUSH
1256: LD_EXP 8
1260: PUSH
1261: LD_INT 18
1263: ARRAY
1264: ST_TO_ADDR
// mpTree := mpGameSettings [ 20 ] ;
1265: LD_ADDR_EXP 3
1269: PUSH
1270: LD_EXP 8
1274: PUSH
1275: LD_INT 20
1277: ARRAY
1278: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1279: LD_ADDR_EXP 22
1283: PUSH
1284: LD_EXP 8
1288: PUSH
1289: LD_INT 21
1291: ARRAY
1292: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 ] ;
1293: LD_ADDR_EXP 33
1297: PUSH
1298: LD_INT 7
1300: PUSH
1301: LD_INT 9
1303: PUSH
1304: LD_INT 8
1306: PUSH
1307: LD_INT 10
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 2 ) , GetBuildingFromArea ( DepotArea2 , 0 ) , GetBuildingFromArea ( DepotArea3 , 3 ) , GetBuildingFromArea ( DepotArea4 , 5 ) ] ;
1316: LD_ADDR_VAR 0 8
1320: PUSH
1321: LD_INT 11
1323: PPUSH
1324: LD_INT 2
1326: PPUSH
1327: CALL 53733 0 2
1331: PUSH
1332: LD_INT 12
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL 53733 0 2
1342: PUSH
1343: LD_INT 13
1345: PPUSH
1346: LD_INT 3
1348: PPUSH
1349: CALL 53733 0 2
1353: PUSH
1354: LD_INT 14
1356: PPUSH
1357: LD_INT 5
1359: PPUSH
1360: CALL 53733 0 2
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1371: LD_ADDR_VAR 0 3
1375: PUSH
1376: DOUBLE
1377: LD_INT 1
1379: DEC
1380: ST_TO_ADDR
1381: LD_VAR 0 8
1385: PPUSH
1386: CALL 13048 0 1
1390: PUSH
1391: FOR_TO
1392: IFFALSE 1496
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1394: LD_ADDR_EXP 23
1398: PUSH
1399: LD_EXP 23
1403: PPUSH
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_VAR 0 8
1413: PUSH
1414: LD_VAR 0 3
1418: ARRAY
1419: PUSH
1420: LD_INT 1
1422: ARRAY
1423: PPUSH
1424: LD_VAR 0 8
1428: PUSH
1429: LD_VAR 0 3
1433: ARRAY
1434: PUSH
1435: LD_INT 3
1437: ARRAY
1438: PPUSH
1439: LD_INT 10
1441: PPUSH
1442: CALL_OW 272
1446: PUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_VAR 0 3
1456: ARRAY
1457: PUSH
1458: LD_INT 2
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 3
1475: ARRAY
1476: PPUSH
1477: LD_INT 10
1479: PPUSH
1480: CALL_OW 273
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PPUSH
1489: CALL_OW 1
1493: ST_TO_ADDR
1494: GO 1391
1496: POP
1497: POP
// if hasOil then
1498: LD_VAR 0 5
1502: IFFALSE 1585
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1504: LD_ADDR_VAR 0 4
1508: PUSH
1509: LD_EXP 8
1513: PUSH
1514: LD_INT 6
1516: ARRAY
1517: PUSH
1518: LD_INT 2
1520: EQUAL
1521: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) ] ;
1522: LD_ADDR_EXP 14
1526: PUSH
1527: LD_INT 15
1529: PPUSH
1530: LD_VAR 0 4
1534: PPUSH
1535: CALL 53566 0 2
1539: PUSH
1540: LD_INT 17
1542: PPUSH
1543: LD_VAR 0 4
1547: PPUSH
1548: CALL 53566 0 2
1552: PUSH
1553: LD_INT 19
1555: PPUSH
1556: LD_VAR 0 4
1560: PPUSH
1561: CALL 53566 0 2
1565: PUSH
1566: LD_INT 21
1568: PPUSH
1569: LD_VAR 0 4
1573: PPUSH
1574: CALL 53566 0 2
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: ST_TO_ADDR
// end ; if hasSib then
1585: LD_VAR 0 6
1589: IFFALSE 1672
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1591: LD_ADDR_VAR 0 4
1595: PUSH
1596: LD_EXP 8
1600: PUSH
1601: LD_INT 7
1603: ARRAY
1604: PUSH
1605: LD_INT 2
1607: EQUAL
1608: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) ] ;
1609: LD_ADDR_EXP 15
1613: PUSH
1614: LD_INT 16
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 53566 0 2
1626: PUSH
1627: LD_INT 18
1629: PPUSH
1630: LD_VAR 0 4
1634: PPUSH
1635: CALL 53566 0 2
1639: PUSH
1640: LD_INT 20
1642: PPUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: CALL 53566 0 2
1652: PUSH
1653: LD_INT 22
1655: PPUSH
1656: LD_VAR 0 4
1660: PPUSH
1661: CALL 53566 0 2
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1672: LD_VAR 0 7
1676: PUSH
1677: LD_INT 1
1679: GREATEREQUAL
1680: IFFALSE 1692
// mpDepots := startPos ;
1682: LD_ADDR_EXP 16
1686: PUSH
1687: LD_VAR 0 8
1691: ST_TO_ADDR
// if baseLevel >= 2 then
1692: LD_VAR 0 7
1696: PUSH
1697: LD_INT 2
1699: GREATEREQUAL
1700: IFFALSE 1913
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( BunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( BunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( ArmArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( BunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea2 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea3a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( ArmArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( BunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea4 , 2 ) ] ] ;
1702: LD_ADDR_EXP 19
1706: PUSH
1707: LD_INT 31
1709: PUSH
1710: LD_INT 23
1712: PPUSH
1713: LD_INT 5
1715: PPUSH
1716: CALL 53733 0 2
1720: ADD
1721: PUSH
1722: LD_INT 31
1724: PUSH
1725: LD_INT 24
1727: PPUSH
1728: LD_INT 5
1730: PPUSH
1731: CALL 53733 0 2
1735: ADD
1736: PUSH
1737: LD_INT 4
1739: PUSH
1740: LD_INT 25
1742: PPUSH
1743: LD_INT 4
1745: PPUSH
1746: CALL 53733 0 2
1750: ADD
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 31
1759: PUSH
1760: LD_INT 26
1762: PPUSH
1763: LD_INT 3
1765: PPUSH
1766: CALL 53733 0 2
1770: ADD
1771: PUSH
1772: LD_INT 31
1774: PUSH
1775: LD_INT 27
1777: PPUSH
1778: LD_INT 4
1780: PPUSH
1781: CALL 53733 0 2
1785: ADD
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: LD_INT 28
1792: PPUSH
1793: LD_INT 3
1795: PPUSH
1796: CALL 53733 0 2
1800: ADD
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 31
1809: PUSH
1810: LD_INT 29
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: CALL 53733 0 2
1820: ADD
1821: PUSH
1822: LD_INT 31
1824: PUSH
1825: LD_INT 31
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL 53733 0 2
1835: ADD
1836: PUSH
1837: LD_INT 4
1839: PUSH
1840: LD_INT 30
1842: PPUSH
1843: LD_INT 0
1845: PPUSH
1846: CALL 53733 0 2
1850: ADD
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 31
1859: PUSH
1860: LD_INT 32
1862: PPUSH
1863: LD_INT 2
1865: PPUSH
1866: CALL 53733 0 2
1870: ADD
1871: PUSH
1872: LD_INT 31
1874: PUSH
1875: LD_INT 33
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: CALL 53733 0 2
1885: ADD
1886: PUSH
1887: LD_INT 4
1889: PUSH
1890: LD_INT 34
1892: PPUSH
1893: LD_INT 2
1895: PPUSH
1896: CALL 53733 0 2
1900: ADD
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: ST_TO_ADDR
// end ; if mpTree then
1913: LD_EXP 3
1917: IFFALSE 1929
// SetAreaMapShow ( TreeArea , 1 ) ;
1919: LD_INT 1
1921: PPUSH
1922: LD_INT 1
1924: PPUSH
1925: CALL_OW 424
// end ;
1929: LD_VAR 0 2
1933: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1934: GO 1936
1936: DISABLE
1937: LD_INT 0
1939: PPUSH
1940: PPUSH
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
1945: PPUSH
1946: PPUSH
// begin if not mpShipments then
1947: LD_EXP 29
1951: NOT
1952: IFFALSE 1956
// exit ;
1954: GO 2463
// case mpShipments of 1 :
1956: LD_EXP 29
1960: PUSH
1961: LD_INT 1
1963: DOUBLE
1964: EQUAL
1965: IFTRUE 1969
1967: GO 2004
1969: POP
// begin time := 0 0$30 ;
1970: LD_ADDR_VAR 0 4
1974: PUSH
1975: LD_INT 1050
1977: ST_TO_ADDR
// normalTime := 0 0$30 ;
1978: LD_ADDR_VAR 0 6
1982: PUSH
1983: LD_INT 1050
1985: ST_TO_ADDR
// maxTime := 1 1$20 ;
1986: LD_ADDR_VAR 0 8
1990: PUSH
1991: LD_INT 2800
1993: ST_TO_ADDR
// delayTime := 0 0$5 ;
1994: LD_ADDR_VAR 0 7
1998: PUSH
1999: LD_INT 175
2001: ST_TO_ADDR
// end ; 2 :
2002: GO 2134
2004: LD_INT 2
2006: DOUBLE
2007: EQUAL
2008: IFTRUE 2012
2010: GO 2047
2012: POP
// begin time := 0 0$25 ;
2013: LD_ADDR_VAR 0 4
2017: PUSH
2018: LD_INT 875
2020: ST_TO_ADDR
// normalTime := 0 0$25 ;
2021: LD_ADDR_VAR 0 6
2025: PUSH
2026: LD_INT 875
2028: ST_TO_ADDR
// maxTime := 1 1$10 ;
2029: LD_ADDR_VAR 0 8
2033: PUSH
2034: LD_INT 2450
2036: ST_TO_ADDR
// delayTime := 0 0$4 ;
2037: LD_ADDR_VAR 0 7
2041: PUSH
2042: LD_INT 140
2044: ST_TO_ADDR
// end ; 3 :
2045: GO 2134
2047: LD_INT 3
2049: DOUBLE
2050: EQUAL
2051: IFTRUE 2055
2053: GO 2090
2055: POP
// begin time := 0 0$20 ;
2056: LD_ADDR_VAR 0 4
2060: PUSH
2061: LD_INT 700
2063: ST_TO_ADDR
// normalTime := 0 0$20 ;
2064: LD_ADDR_VAR 0 6
2068: PUSH
2069: LD_INT 700
2071: ST_TO_ADDR
// maxTime := 1 1$00 ;
2072: LD_ADDR_VAR 0 8
2076: PUSH
2077: LD_INT 2100
2079: ST_TO_ADDR
// delayTime := 0 0$3 ;
2080: LD_ADDR_VAR 0 7
2084: PUSH
2085: LD_INT 105
2087: ST_TO_ADDR
// end ; 4 :
2088: GO 2134
2090: LD_INT 4
2092: DOUBLE
2093: EQUAL
2094: IFTRUE 2098
2096: GO 2133
2098: POP
// begin time := 0 0$15 ;
2099: LD_ADDR_VAR 0 4
2103: PUSH
2104: LD_INT 525
2106: ST_TO_ADDR
// normalTime := 0 0$15 ;
2107: LD_ADDR_VAR 0 6
2111: PUSH
2112: LD_INT 525
2114: ST_TO_ADDR
// maxTime := 0 0$55 ;
2115: LD_ADDR_VAR 0 8
2119: PUSH
2120: LD_INT 1925
2122: ST_TO_ADDR
// delayTime := 0 0$2 ;
2123: LD_ADDR_VAR 0 7
2127: PUSH
2128: LD_INT 70
2130: ST_TO_ADDR
// end ; end ;
2131: GO 2134
2133: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
2134: LD_ADDR_VAR 0 3
2138: PUSH
2139: LD_INT 2
2141: PUSH
2142: LD_INT 3
2144: PUSH
2145: LD_INT 5
2147: PUSH
2148: LD_INT 4
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: ST_TO_ADDR
// areas := [ Center1 , Center2 ] ;
2157: LD_ADDR_VAR 0 5
2161: PUSH
2162: LD_INT 36
2164: PUSH
2165: LD_INT 35
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: ST_TO_ADDR
// for i := 1 to 8 do
2172: LD_ADDR_VAR 0 1
2176: PUSH
2177: DOUBLE
2178: LD_INT 1
2180: DEC
2181: ST_TO_ADDR
2182: LD_INT 8
2184: PUSH
2185: FOR_TO
2186: IFFALSE 2233
// begin if not mpSidePositions [ i ] then
2188: LD_EXP 9
2192: PUSH
2193: LD_VAR 0 1
2197: ARRAY
2198: NOT
2199: IFFALSE 2203
// continue ;
2201: GO 2185
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2203: LD_ADDR_VAR 0 5
2207: PUSH
2208: LD_VAR 0 5
2212: PUSH
2213: LD_VAR 0 3
2217: PUSH
2218: LD_EXP 9
2222: PUSH
2223: LD_VAR 0 1
2227: ARRAY
2228: ARRAY
2229: ADD
2230: ST_TO_ADDR
// end ;
2231: GO 2185
2233: POP
2234: POP
// x := 1 ;
2235: LD_ADDR_VAR 0 2
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// repeat wait ( time ) ;
2243: LD_VAR 0 4
2247: PPUSH
2248: CALL_OW 67
// x := Inc ( x ) ;
2252: LD_ADDR_VAR 0 2
2256: PUSH
2257: LD_VAR 0 2
2261: PPUSH
2262: CALL 50387 0 1
2266: ST_TO_ADDR
// if x > 5 then
2267: LD_VAR 0 2
2271: PUSH
2272: LD_INT 5
2274: GREATER
2275: IFFALSE 2285
// x := 1 ;
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: LD_INT 1
2284: ST_TO_ADDR
// for i in areas do
2285: LD_ADDR_VAR 0 1
2289: PUSH
2290: LD_VAR 0 5
2294: PUSH
2295: FOR_IN
2296: IFFALSE 2335
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2298: LD_VAR 0 1
2302: PPUSH
2303: LD_INT 1
2305: PPUSH
2306: CALL_OW 287
2310: PUSH
2311: LD_INT 20
2313: LESS
2314: IFFALSE 2333
// begin CreateCratesArea ( x , i , true ) ;
2316: LD_VAR 0 2
2320: PPUSH
2321: LD_VAR 0 1
2325: PPUSH
2326: LD_INT 1
2328: PPUSH
2329: CALL_OW 55
// end ; end ;
2333: GO 2295
2335: POP
2336: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2337: LD_INT 37
2339: PPUSH
2340: LD_INT 1
2342: PPUSH
2343: CALL_OW 287
2347: PUSH
2348: LD_INT 0
2350: EQUAL
2351: IFFALSE 2390
// begin for i := 1 to 3 do
2353: LD_ADDR_VAR 0 1
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_INT 3
2365: PUSH
2366: FOR_TO
2367: IFFALSE 2386
// CreateCratesArea ( x , CenterArea , true ) ;
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_INT 37
2376: PPUSH
2377: LD_INT 1
2379: PPUSH
2380: CALL_OW 55
2384: GO 2366
2386: POP
2387: POP
// end else
2388: GO 2421
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2390: LD_INT 37
2392: PPUSH
2393: LD_INT 1
2395: PPUSH
2396: CALL_OW 287
2400: PUSH
2401: LD_INT 30
2403: LESS
2404: IFFALSE 2421
// CreateCratesArea ( x , CenterArea , true ) ;
2406: LD_VAR 0 2
2410: PPUSH
2411: LD_INT 37
2413: PPUSH
2414: LD_INT 1
2416: PPUSH
2417: CALL_OW 55
// time := time + delayTime ;
2421: LD_ADDR_VAR 0 4
2425: PUSH
2426: LD_VAR 0 4
2430: PUSH
2431: LD_VAR 0 7
2435: PLUS
2436: ST_TO_ADDR
// if time > maxTime then
2437: LD_VAR 0 4
2441: PUSH
2442: LD_VAR 0 8
2446: GREATER
2447: IFFALSE 2459
// time := normalTime ;
2449: LD_ADDR_VAR 0 4
2453: PUSH
2454: LD_VAR 0 6
2458: ST_TO_ADDR
// until false ;
2459: LD_INT 0
2461: IFFALSE 2243
// end ;
2463: PPOPN 8
2465: END
// export treeVisited ; every 0 0$2 trigger mpTree do var i , tmp , skill , power , bonus ;
2466: LD_EXP 3
2470: IFFALSE 2793
2472: GO 2474
2474: DISABLE
2475: LD_INT 0
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
// begin treeVisited := [ ] ;
2482: LD_ADDR_EXP 4
2486: PUSH
2487: EMPTY
2488: ST_TO_ADDR
// power := 1 ;
2489: LD_ADDR_VAR 0 4
2493: PUSH
2494: LD_INT 1
2496: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2497: LD_INT 35
2499: PPUSH
2500: CALL_OW 67
// if tick mod Round ( 20 20$0 div mpTree ) = 0 then
2504: LD_OWVAR 1
2508: PUSH
2509: LD_INT 42000
2511: PUSH
2512: LD_EXP 3
2516: DIV
2517: PPUSH
2518: CALL_OW 574
2522: MOD
2523: PUSH
2524: LD_INT 0
2526: EQUAL
2527: IFFALSE 2544
// power := Inc ( power ) ;
2529: LD_ADDR_VAR 0 4
2533: PUSH
2534: LD_VAR 0 4
2538: PPUSH
2539: CALL 50387 0 1
2543: ST_TO_ADDR
// if power > 10 then
2544: LD_VAR 0 4
2548: PUSH
2549: LD_INT 10
2551: GREATER
2552: IFFALSE 2562
// power := 10 ;
2554: LD_ADDR_VAR 0 4
2558: PUSH
2559: LD_INT 10
2561: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_inarea , TreeArea ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) diff treeVisited ;
2562: LD_ADDR_VAR 0 2
2566: PUSH
2567: LD_INT 95
2569: PUSH
2570: LD_INT 1
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 21
2579: PUSH
2580: LD_INT 1
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: LD_INT 3
2589: PUSH
2590: LD_INT 23
2592: PUSH
2593: LD_INT 0
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PPUSH
2609: CALL_OW 69
2613: PUSH
2614: LD_EXP 4
2618: DIFF
2619: ST_TO_ADDR
// if tmp then
2620: LD_VAR 0 2
2624: IFFALSE 2789
// begin for i in tmp do
2626: LD_ADDR_VAR 0 1
2630: PUSH
2631: LD_VAR 0 2
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2787
// begin treeVisited := Join ( treeVisited , i ) ;
2639: LD_ADDR_EXP 4
2643: PUSH
2644: LD_EXP 4
2648: PPUSH
2649: LD_VAR 0 1
2653: PPUSH
2654: CALL 49014 0 2
2658: ST_TO_ADDR
// bonus := GetSkill ( i , i mod 4 + 1 ) + power ;
2659: LD_ADDR_VAR 0 5
2663: PUSH
2664: LD_VAR 0 1
2668: PPUSH
2669: LD_VAR 0 1
2673: PUSH
2674: LD_INT 4
2676: MOD
2677: PUSH
2678: LD_INT 1
2680: PLUS
2681: PPUSH
2682: CALL_OW 259
2686: PUSH
2687: LD_VAR 0 4
2691: PLUS
2692: ST_TO_ADDR
// if bonus > 10 then
2693: LD_VAR 0 5
2697: PUSH
2698: LD_INT 10
2700: GREATER
2701: IFFALSE 2711
// bonus := 10 ;
2703: LD_ADDR_VAR 0 5
2707: PUSH
2708: LD_INT 10
2710: ST_TO_ADDR
// skill := i mod 4 + 1 ;
2711: LD_ADDR_VAR 0 3
2715: PUSH
2716: LD_VAR 0 1
2720: PUSH
2721: LD_INT 4
2723: MOD
2724: PUSH
2725: LD_INT 1
2727: PLUS
2728: ST_TO_ADDR
// SetSkill ( i , skill , bonus ) ;
2729: LD_VAR 0 1
2733: PPUSH
2734: LD_VAR 0 3
2738: PPUSH
2739: LD_VAR 0 5
2743: PPUSH
2744: CALL_OW 237
// ToLua ( displayTreeBonusDetails( & i & , & skill & , & power & ) ) ;
2748: LD_STRING displayTreeBonusDetails(
2750: PUSH
2751: LD_VAR 0 1
2755: STR
2756: PUSH
2757: LD_STRING ,
2759: STR
2760: PUSH
2761: LD_VAR 0 3
2765: STR
2766: PUSH
2767: LD_STRING ,
2769: STR
2770: PUSH
2771: LD_VAR 0 4
2775: STR
2776: PUSH
2777: LD_STRING )
2779: STR
2780: PPUSH
2781: CALL_OW 559
// end ;
2785: GO 2636
2787: POP
2788: POP
// end ; until false ;
2789: LD_INT 0
2791: IFFALSE 2497
// end ; end_of_file
2793: PPOPN 5
2795: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2796: LD_VAR 0 1
2800: PPUSH
2801: CALL 54531 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2805: LD_VAR 0 1
2809: PPUSH
2810: CALL 8225 0 1
// end ;
2814: PPOPN 1
2816: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2817: LD_VAR 0 1
2821: PPUSH
2822: CALL 54548 0 1
// end ;
2826: PPOPN 1
2828: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2829: LD_VAR 0 1
2833: PPUSH
2834: CALL 8932 0 1
2838: PPOPN 1
2840: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2841: LD_VAR 0 1
2845: PPUSH
2846: LD_VAR 0 2
2850: PPUSH
2851: CALL 54589 0 2
2855: PPOPN 2
2857: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_VAR 0 3
2872: PPUSH
2873: CALL 8985 0 3
2877: PPOPN 3
2879: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2880: LD_VAR 0 1
2884: PPUSH
2885: LD_VAR 0 2
2889: PPUSH
2890: LD_VAR 0 3
2894: PPUSH
2895: LD_VAR 0 4
2899: PPUSH
2900: LD_VAR 0 5
2904: PPUSH
2905: CALL 9624 0 5
// end ;
2909: PPOPN 5
2911: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2912: LD_VAR 0 1
2916: PPUSH
2917: LD_VAR 0 2
2921: PPUSH
2922: LD_VAR 0 3
2926: PPUSH
2927: LD_VAR 0 4
2931: PPUSH
2932: CALL 9727 0 4
2936: PPOPN 4
2938: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2939: LD_INT 0
2941: PPUSH
2942: PPUSH
// disable ( mpActive ) ;
2943: LD_INT 100
2945: DISABLE_MARKED
// disable ( mpWin ) ;
2946: LD_INT 101
2948: DISABLE_MARKED
// disable ( mpLose ) ;
2949: LD_INT 102
2951: DISABLE_MARKED
// mpGameType := 0 ;
2952: LD_ADDR_EXP 5
2956: PUSH
2957: LD_INT 0
2959: ST_TO_ADDR
// mpGameSettings := [ ] ;
2960: LD_ADDR_EXP 8
2964: PUSH
2965: EMPTY
2966: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2967: LD_ADDR_EXP 6
2971: PUSH
2972: EMPTY
2973: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2974: LD_ADDR_EXP 7
2978: PUSH
2979: EMPTY
2980: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2981: LD_ADDR_EXP 31
2985: PUSH
2986: LD_INT 2
2988: PUSH
2989: LD_INT 2
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2996: LD_ADDR_EXP 14
3000: PUSH
3001: EMPTY
3002: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3003: LD_ADDR_EXP 15
3007: PUSH
3008: EMPTY
3009: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
3010: LD_ADDR_EXP 43
3014: PUSH
3015: EMPTY
3016: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
3017: LD_ADDR_EXP 44
3021: PUSH
3022: EMPTY
3023: ST_TO_ADDR
// mpDepots := [ ] ;
3024: LD_ADDR_EXP 16
3028: PUSH
3029: EMPTY
3030: ST_TO_ADDR
// mpBuildings := [ ] ;
3031: LD_ADDR_EXP 19
3035: PUSH
3036: EMPTY
3037: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3038: LD_ADDR_EXP 20
3042: PUSH
3043: EMPTY
3044: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3045: LD_ADDR_EXP 21
3049: PUSH
3050: EMPTY
3051: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3052: LD_ADDR_EXP 22
3056: PUSH
3057: EMPTY
3058: ST_TO_ADDR
// mpStartingResources := [ ] ;
3059: LD_ADDR_EXP 17
3063: PUSH
3064: EMPTY
3065: ST_TO_ADDR
// mpStartPos := [ ] ;
3066: LD_ADDR_EXP 23
3070: PUSH
3071: EMPTY
3072: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3073: LD_ADDR_EXP 24
3077: PUSH
3078: LD_INT 1
3080: NEG
3081: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3082: LD_ADDR_EXP 25
3086: PUSH
3087: EMPTY
3088: ST_TO_ADDR
// mpApemans := [ ] ;
3089: LD_ADDR_EXP 32
3093: PUSH
3094: EMPTY
3095: ST_TO_ADDR
// mpApemansArea := [ ] ;
3096: LD_ADDR_EXP 33
3100: PUSH
3101: EMPTY
3102: ST_TO_ADDR
// mpRespawn := [ ] ;
3103: LD_ADDR_EXP 35
3107: PUSH
3108: EMPTY
3109: ST_TO_ADDR
// mpKingArea := 0 ;
3110: LD_ADDR_EXP 36
3114: PUSH
3115: LD_INT 0
3117: ST_TO_ADDR
// mpPoints := [ ] ;
3118: LD_ADDR_EXP 37
3122: PUSH
3123: EMPTY
3124: ST_TO_ADDR
// mpVehicles := 0 ;
3125: LD_ADDR_EXP 38
3129: PUSH
3130: LD_INT 0
3132: ST_TO_ADDR
// mpShipments := 0 ;
3133: LD_ADDR_EXP 29
3137: PUSH
3138: LD_INT 0
3140: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3141: LD_ADDR_EXP 42
3145: PUSH
3146: EMPTY
3147: PUSH
3148: EMPTY
3149: PUSH
3150: EMPTY
3151: PUSH
3152: EMPTY
3153: PUSH
3154: EMPTY
3155: PUSH
3156: EMPTY
3157: PUSH
3158: EMPTY
3159: PUSH
3160: EMPTY
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3172: LD_ADDR_EXP 34
3176: PUSH
3177: EMPTY
3178: PUSH
3179: EMPTY
3180: PUSH
3181: EMPTY
3182: PUSH
3183: EMPTY
3184: PUSH
3185: EMPTY
3186: PUSH
3187: EMPTY
3188: PUSH
3189: EMPTY
3190: PUSH
3191: EMPTY
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: ST_TO_ADDR
// mpEmissions := 0 ;
3203: LD_ADDR_EXP 39
3207: PUSH
3208: LD_INT 0
3210: ST_TO_ADDR
// mpTeleports := 0 ;
3211: LD_ADDR_EXP 45
3215: PUSH
3216: LD_INT 0
3218: ST_TO_ADDR
// mpArtifacts := 0 ;
3219: LD_ADDR_EXP 46
3223: PUSH
3224: LD_INT 0
3226: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3227: LD_ADDR_EXP 47
3231: PUSH
3232: LD_INT 0
3234: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3235: LD_ADDR_EXP 27
3239: PUSH
3240: LD_INT 3
3242: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3243: LD_ADDR_EXP 26
3247: PUSH
3248: LD_INT 15
3250: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3251: LD_ADDR_EXP 40
3255: PUSH
3256: LD_INT 0
3258: ST_TO_ADDR
// mpGameActive := false ;
3259: LD_ADDR_EXP 41
3263: PUSH
3264: LD_INT 0
3266: ST_TO_ADDR
// mpBlockRespThread := false ;
3267: LD_ADDR_EXP 48
3271: PUSH
3272: LD_INT 0
3274: ST_TO_ADDR
// for i := 1 to 32 do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 32
3287: PUSH
3288: FOR_TO
3289: IFFALSE 3316
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3291: LD_ADDR_EXP 8
3295: PUSH
3296: LD_EXP 8
3300: PPUSH
3301: LD_VAR 0 2
3305: PPUSH
3306: LD_INT 0
3308: PPUSH
3309: CALL_OW 1
3313: ST_TO_ADDR
3314: GO 3288
3316: POP
3317: POP
// end ;
3318: LD_VAR 0 1
3322: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3323: LD_INT 0
3325: PPUSH
3326: PPUSH
3327: PPUSH
3328: PPUSH
3329: PPUSH
3330: PPUSH
3331: PPUSH
3332: PPUSH
3333: PPUSH
3334: PPUSH
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
3339: LD_ADDR_VAR 0 14
3343: PUSH
3344: LD_INT 1
3346: PUSH
3347: LD_INT 2
3349: PUSH
3350: LD_INT 3
3352: PUSH
3353: LD_INT 5
3355: PUSH
3356: LD_INT 6
3358: PUSH
3359: LD_INT 7
3361: PUSH
3362: EMPTY
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: ST_TO_ADDR
// for i in gameTypes do
3370: LD_ADDR_VAR 0 2
3374: PUSH
3375: LD_VAR 0 14
3379: PUSH
3380: FOR_IN
3381: IFFALSE 3390
// disable ( i ) ;
3383: LD_VAR 0 2
3387: DISABLE_MARKED
3388: GO 3380
3390: POP
3391: POP
// if Multiplayer then
3392: LD_OWVAR 4
3396: IFFALSE 3580
// begin mpGameType := mp_game_type ;
3398: LD_ADDR_EXP 5
3402: PUSH
3403: LD_OWVAR 6
3407: ST_TO_ADDR
// your_side := mp_player_side ;
3408: LD_ADDR_OWVAR 2
3412: PUSH
3413: LD_OWVAR 7
3417: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3418: LD_ADDR_EXP 9
3422: PUSH
3423: LD_OWVAR 17
3427: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3428: LD_ADDR_EXP 10
3432: PUSH
3433: LD_OWVAR 15
3437: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3438: LD_ADDR_EXP 11
3442: PUSH
3443: LD_OWVAR 16
3447: ST_TO_ADDR
// mpTeams := mp_teams ;
3448: LD_ADDR_EXP 12
3452: PUSH
3453: LD_OWVAR 12
3457: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3458: LD_ADDR_VAR 0 2
3462: PUSH
3463: DOUBLE
3464: LD_INT 1
3466: DEC
3467: ST_TO_ADDR
3468: LD_EXP 6
3472: PPUSH
3473: CALL 13048 0 1
3477: PUSH
3478: FOR_TO
3479: IFFALSE 3555
// begin setting := mpGameSettingsKeys [ i ] ;
3481: LD_ADDR_VAR 0 12
3485: PUSH
3486: LD_EXP 6
3490: PUSH
3491: LD_VAR 0 2
3495: ARRAY
3496: ST_TO_ADDR
// if setting then
3497: LD_VAR 0 12
3501: IFFALSE 3553
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3503: LD_ADDR_EXP 8
3507: PUSH
3508: LD_EXP 8
3512: PPUSH
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_EXP 7
3522: PUSH
3523: LD_VAR 0 2
3527: ARRAY
3528: PUSH
3529: LD_VAR 0 2
3533: PUSH
3534: LD_INT 1
3536: MINUS
3537: PPUSH
3538: CALL_OW 426
3542: PUSH
3543: LD_INT 1
3545: PLUS
3546: ARRAY
3547: PPUSH
3548: CALL_OW 1
3552: ST_TO_ADDR
// end ;
3553: GO 3478
3555: POP
3556: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3557: LD_ADDR_EXP 13
3561: PUSH
3562: LD_EXP 10
3566: PUSH
3567: LD_INT 0
3569: PUSH
3570: EMPTY
3571: LIST
3572: DIFF
3573: PUSH
3574: LD_INT 1
3576: GREATER
3577: ST_TO_ADDR
// end else
3578: GO 3580
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3580: LD_EXP 5
3584: PPUSH
3585: CALL 830 0 1
// if Count ( mpMarkedAreas ) then
3589: LD_EXP 20
3593: PPUSH
3594: CALL 13048 0 1
3598: IFFALSE 3629
// begin for i in mpMarkedAreas do
3600: LD_ADDR_VAR 0 2
3604: PUSH
3605: LD_EXP 20
3609: PUSH
3610: FOR_IN
3611: IFFALSE 3627
// SetAreaMapShow ( i , 0 ) ;
3613: LD_VAR 0 2
3617: PPUSH
3618: LD_INT 0
3620: PPUSH
3621: CALL_OW 424
3625: GO 3610
3627: POP
3628: POP
// end ; for i := 1 to 8 do
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: DOUBLE
3635: LD_INT 1
3637: DEC
3638: ST_TO_ADDR
3639: LD_INT 8
3641: PUSH
3642: FOR_TO
3643: IFFALSE 5078
// begin if not mpSidePositions [ i ] then
3645: LD_EXP 9
3649: PUSH
3650: LD_VAR 0 2
3654: ARRAY
3655: NOT
3656: IFFALSE 3660
// continue ;
3658: GO 3642
// side := i ;
3660: LD_ADDR_VAR 0 7
3664: PUSH
3665: LD_VAR 0 2
3669: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3670: LD_ADDR_VAR 0 9
3674: PUSH
3675: LD_EXP 11
3679: PUSH
3680: LD_VAR 0 2
3684: ARRAY
3685: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3686: LD_ADDR_VAR 0 8
3690: PUSH
3691: LD_EXP 9
3695: PUSH
3696: LD_VAR 0 2
3700: ARRAY
3701: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3702: LD_EXP 14
3706: PPUSH
3707: CALL 13048 0 1
3711: IFFALSE 3788
// begin for j in mpOilDeposits [ pos ] do
3713: LD_ADDR_VAR 0 3
3717: PUSH
3718: LD_EXP 14
3722: PUSH
3723: LD_VAR 0 8
3727: ARRAY
3728: PUSH
3729: FOR_IN
3730: IFFALSE 3786
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3732: LD_VAR 0 3
3736: PUSH
3737: LD_INT 1
3739: ARRAY
3740: PPUSH
3741: LD_VAR 0 3
3745: PUSH
3746: LD_INT 2
3748: ARRAY
3749: PPUSH
3750: LD_INT 2
3752: PPUSH
3753: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3757: LD_VAR 0 3
3761: PUSH
3762: LD_INT 1
3764: ARRAY
3765: PPUSH
3766: LD_VAR 0 3
3770: PUSH
3771: LD_INT 2
3773: ARRAY
3774: PPUSH
3775: LD_VAR 0 7
3779: PPUSH
3780: CALL_OW 441
// end ;
3784: GO 3729
3786: POP
3787: POP
// end ; if Count ( mpSibDeposits ) then
3788: LD_EXP 15
3792: PPUSH
3793: CALL 13048 0 1
3797: IFFALSE 3874
// begin for j in mpSibDeposits [ pos ] do
3799: LD_ADDR_VAR 0 3
3803: PUSH
3804: LD_EXP 15
3808: PUSH
3809: LD_VAR 0 8
3813: ARRAY
3814: PUSH
3815: FOR_IN
3816: IFFALSE 3872
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3818: LD_VAR 0 3
3822: PUSH
3823: LD_INT 1
3825: ARRAY
3826: PPUSH
3827: LD_VAR 0 3
3831: PUSH
3832: LD_INT 2
3834: ARRAY
3835: PPUSH
3836: LD_INT 3
3838: PPUSH
3839: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3843: LD_VAR 0 3
3847: PUSH
3848: LD_INT 1
3850: ARRAY
3851: PPUSH
3852: LD_VAR 0 3
3856: PUSH
3857: LD_INT 2
3859: ARRAY
3860: PPUSH
3861: LD_VAR 0 7
3865: PPUSH
3866: CALL_OW 441
// end ;
3870: GO 3815
3872: POP
3873: POP
// end ; InitBc ;
3874: CALL_OW 21
// InitUc ;
3878: CALL_OW 18
// uc_side := side ;
3882: LD_ADDR_OWVAR 20
3886: PUSH
3887: LD_VAR 0 7
3891: ST_TO_ADDR
// uc_nation := nation ;
3892: LD_ADDR_OWVAR 21
3896: PUSH
3897: LD_VAR 0 9
3901: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3902: LD_EXP 24
3906: PUSH
3907: LD_INT 1
3909: NEG
3910: GREATER
3911: IFFALSE 4070
// begin x := mpStartPos [ pos ] [ 1 ] ;
3913: LD_ADDR_VAR 0 5
3917: PUSH
3918: LD_EXP 23
3922: PUSH
3923: LD_VAR 0 8
3927: ARRAY
3928: PUSH
3929: LD_INT 1
3931: ARRAY
3932: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3933: LD_ADDR_VAR 0 6
3937: PUSH
3938: LD_EXP 23
3942: PUSH
3943: LD_VAR 0 8
3947: ARRAY
3948: PUSH
3949: LD_INT 2
3951: ARRAY
3952: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3953: LD_VAR 0 5
3957: PPUSH
3958: LD_VAR 0 6
3962: PPUSH
3963: LD_INT 12
3965: PPUSH
3966: LD_INT 2
3968: PPUSH
3969: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3973: LD_ADDR_EXP 25
3977: PUSH
3978: LD_EXP 25
3982: PPUSH
3983: LD_VAR 0 7
3987: PPUSH
3988: LD_VAR 0 7
3992: PPUSH
3993: LD_VAR 0 5
3997: PPUSH
3998: LD_VAR 0 6
4002: PPUSH
4003: LD_INT 1
4005: PUSH
4006: LD_INT 100
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 70
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: LD_INT 3
4025: PUSH
4026: LD_INT 40
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: LD_INT 10
4035: PUSH
4036: LD_INT 25
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 20
4045: PUSH
4046: LD_INT 100
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 418
4064: PPUSH
4065: CALL_OW 1
4069: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
4070: LD_EXP 16
4074: PPUSH
4075: CALL 13048 0 1
4079: IFFALSE 4274
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
4081: LD_EXP 5
4085: PUSH
4086: LD_INT 2
4088: PUSH
4089: LD_INT 6
4091: PUSH
4092: LD_INT 7
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: LIST
4099: IN
4100: IFFALSE 4120
// begin bc_level := 10 ;
4102: LD_ADDR_OWVAR 43
4106: PUSH
4107: LD_INT 10
4109: ST_TO_ADDR
// bc_type := b_warehouse ;
4110: LD_ADDR_OWVAR 42
4114: PUSH
4115: LD_INT 1
4117: ST_TO_ADDR
// end else
4118: GO 4136
// begin bc_level := 0 ;
4120: LD_ADDR_OWVAR 43
4124: PUSH
4125: LD_INT 0
4127: ST_TO_ADDR
// bc_type := b_depot ;
4128: LD_ADDR_OWVAR 42
4132: PUSH
4133: LD_INT 0
4135: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4136: LD_ADDR_VAR 0 4
4140: PUSH
4141: LD_EXP 16
4145: PUSH
4146: LD_VAR 0 8
4150: ARRAY
4151: PUSH
4152: LD_INT 1
4154: ARRAY
4155: PPUSH
4156: LD_EXP 16
4160: PUSH
4161: LD_VAR 0 8
4165: ARRAY
4166: PUSH
4167: LD_INT 2
4169: ARRAY
4170: PPUSH
4171: LD_EXP 16
4175: PUSH
4176: LD_VAR 0 8
4180: ARRAY
4181: PUSH
4182: LD_INT 3
4184: ARRAY
4185: PPUSH
4186: CALL_OW 47
4190: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4191: LD_VAR 0 4
4195: PPUSH
4196: LD_STRING @
4198: PUSH
4199: LD_VAR 0 7
4203: STR
4204: PPUSH
4205: CALL_OW 500
// if Count ( mpStartingResources ) then
4209: LD_EXP 17
4213: PPUSH
4214: CALL 13048 0 1
4218: IFFALSE 4272
// begin for j := 1 to mpStartingResources do
4220: LD_ADDR_VAR 0 3
4224: PUSH
4225: DOUBLE
4226: LD_INT 1
4228: DEC
4229: ST_TO_ADDR
4230: LD_EXP 17
4234: PUSH
4235: FOR_TO
4236: IFFALSE 4270
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4238: LD_VAR 0 4
4242: PPUSH
4243: CALL_OW 274
4247: PPUSH
4248: LD_VAR 0 3
4252: PPUSH
4253: LD_EXP 17
4257: PUSH
4258: LD_VAR 0 3
4262: ARRAY
4263: PPUSH
4264: CALL_OW 277
4268: GO 4235
4270: POP
4271: POP
// end ; end else
4272: GO 4481
// if Count ( mpStartingResources ) then
4274: LD_EXP 17
4278: PPUSH
4279: CALL 13048 0 1
4283: IFFALSE 4481
// begin x := mpStartPos [ pos ] [ 1 ] ;
4285: LD_ADDR_VAR 0 5
4289: PUSH
4290: LD_EXP 23
4294: PUSH
4295: LD_VAR 0 8
4299: ARRAY
4300: PUSH
4301: LD_INT 1
4303: ARRAY
4304: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4305: LD_ADDR_VAR 0 6
4309: PUSH
4310: LD_EXP 23
4314: PUSH
4315: LD_VAR 0 8
4319: ARRAY
4320: PUSH
4321: LD_INT 2
4323: ARRAY
4324: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4325: LD_ADDR_VAR 0 3
4329: PUSH
4330: DOUBLE
4331: LD_INT 1
4333: DEC
4334: ST_TO_ADDR
4335: LD_EXP 17
4339: PUSH
4340: FOR_TO
4341: IFFALSE 4479
// begin resources := mpStartingResources [ j ] ;
4343: LD_ADDR_VAR 0 13
4347: PUSH
4348: LD_EXP 17
4352: PUSH
4353: LD_VAR 0 3
4357: ARRAY
4358: ST_TO_ADDR
// if resources = 0 then
4359: LD_VAR 0 13
4363: PUSH
4364: LD_INT 0
4366: EQUAL
4367: IFFALSE 4371
// continue ;
4369: GO 4340
// repeat if resources >= 50 then
4371: LD_VAR 0 13
4375: PUSH
4376: LD_INT 50
4378: GREATEREQUAL
4379: IFFALSE 4425
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4381: LD_VAR 0 3
4385: PPUSH
4386: LD_INT 5
4388: PPUSH
4389: LD_VAR 0 5
4393: PPUSH
4394: LD_VAR 0 6
4398: PPUSH
4399: LD_INT 6
4401: PPUSH
4402: LD_INT 0
4404: PPUSH
4405: CALL_OW 60
// resources := resources - 50 ;
4409: LD_ADDR_VAR 0 13
4413: PUSH
4414: LD_VAR 0 13
4418: PUSH
4419: LD_INT 50
4421: MINUS
4422: ST_TO_ADDR
// end else
4423: GO 4467
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4425: LD_VAR 0 3
4429: PPUSH
4430: LD_VAR 0 13
4434: PUSH
4435: LD_INT 10
4437: DIV
4438: PPUSH
4439: LD_VAR 0 5
4443: PPUSH
4444: LD_VAR 0 6
4448: PPUSH
4449: LD_INT 6
4451: PPUSH
4452: LD_INT 0
4454: PPUSH
4455: CALL_OW 60
// resources := 0 ;
4459: LD_ADDR_VAR 0 13
4463: PUSH
4464: LD_INT 0
4466: ST_TO_ADDR
// end ; until resources <= 0 ;
4467: LD_VAR 0 13
4471: PUSH
4472: LD_INT 0
4474: LESSEQUAL
4475: IFFALSE 4371
// end ;
4477: GO 4340
4479: POP
4480: POP
// end ; if Count ( mpBuildings ) then
4481: LD_EXP 19
4485: PPUSH
4486: CALL 13048 0 1
4490: IFFALSE 4568
// begin for j in mpBuildings [ pos ] do
4492: LD_ADDR_VAR 0 3
4496: PUSH
4497: LD_EXP 19
4501: PUSH
4502: LD_VAR 0 8
4506: ARRAY
4507: PUSH
4508: FOR_IN
4509: IFFALSE 4566
// begin bc_level := 0 ;
4511: LD_ADDR_OWVAR 43
4515: PUSH
4516: LD_INT 0
4518: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4519: LD_ADDR_OWVAR 42
4523: PUSH
4524: LD_VAR 0 3
4528: PUSH
4529: LD_INT 1
4531: ARRAY
4532: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4533: LD_VAR 0 3
4537: PUSH
4538: LD_INT 2
4540: ARRAY
4541: PPUSH
4542: LD_VAR 0 3
4546: PUSH
4547: LD_INT 3
4549: ARRAY
4550: PPUSH
4551: LD_VAR 0 3
4555: PUSH
4556: LD_INT 4
4558: ARRAY
4559: PPUSH
4560: CALL_OW 47
// end ;
4564: GO 4508
4566: POP
4567: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4568: LD_EXP 28
4572: IFFALSE 4592
4574: PUSH
4575: LD_INT 20
4577: PPUSH
4578: LD_VAR 0 7
4582: PPUSH
4583: CALL_OW 321
4587: PUSH
4588: LD_INT 1
4590: EQUAL
4591: AND
4592: IFFALSE 4609
// SetTech ( tech_SibDet , side , state_researched ) ;
4594: LD_INT 20
4596: PPUSH
4597: LD_VAR 0 7
4601: PPUSH
4602: LD_INT 2
4604: PPUSH
4605: CALL_OW 322
// if not mpArtifacts then
4609: LD_EXP 46
4613: NOT
4614: IFFALSE 4631
// SetTech ( tech_artifact , side , state_disabled ) ;
4616: LD_INT 24
4618: PPUSH
4619: LD_VAR 0 7
4623: PPUSH
4624: LD_INT 0
4626: PPUSH
4627: CALL_OW 322
// if mpSibBomb = 1 then
4631: LD_EXP 30
4635: PUSH
4636: LD_INT 1
4638: EQUAL
4639: IFFALSE 4658
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4641: LD_INT 25
4643: PPUSH
4644: LD_VAR 0 7
4648: PPUSH
4649: LD_INT 1
4651: PPUSH
4652: CALL_OW 322
// end else
4656: GO 4673
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4658: LD_INT 25
4660: PPUSH
4661: LD_VAR 0 7
4665: PPUSH
4666: LD_INT 0
4668: PPUSH
4669: CALL_OW 322
// end ; if mpVehicles then
4673: LD_EXP 38
4677: IFFALSE 4776
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4679: LD_ADDR_VAR 0 3
4683: PUSH
4684: LD_VAR 0 7
4688: PPUSH
4689: LD_VAR 0 9
4693: PPUSH
4694: LD_EXP 38
4698: PPUSH
4699: CALL 5999 0 3
4703: PUSH
4704: FOR_IN
4705: IFFALSE 4774
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4707: LD_VAR 0 3
4711: PPUSH
4712: LD_INT 0
4714: PPUSH
4715: LD_INT 5
4717: PPUSH
4718: CALL_OW 12
4722: PPUSH
4723: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4727: LD_VAR 0 3
4731: PPUSH
4732: LD_EXP 23
4736: PUSH
4737: LD_VAR 0 8
4741: ARRAY
4742: PUSH
4743: LD_INT 1
4745: ARRAY
4746: PPUSH
4747: LD_EXP 23
4751: PUSH
4752: LD_VAR 0 8
4756: ARRAY
4757: PUSH
4758: LD_INT 2
4760: ARRAY
4761: PPUSH
4762: LD_INT 12
4764: PPUSH
4765: LD_INT 0
4767: PPUSH
4768: CALL_OW 50
// end ;
4772: GO 4704
4774: POP
4775: POP
// end ; uc_nation := nation ;
4776: LD_ADDR_OWVAR 21
4780: PUSH
4781: LD_VAR 0 9
4785: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4786: LD_EXP 5
4790: PUSH
4791: LD_INT 6
4793: PUSH
4794: LD_INT 7
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: IN
4801: IFFALSE 4826
4803: PUSH
4804: LD_EXP 9
4808: PUSH
4809: LD_VAR 0 2
4813: ARRAY
4814: PUSH
4815: LD_INT 1
4817: PUSH
4818: LD_INT 2
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: IN
4825: AND
4826: IFFALSE 4874
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4828: LD_ADDR_VAR 0 11
4832: PUSH
4833: LD_VAR 0 7
4837: PPUSH
4838: LD_VAR 0 9
4842: PPUSH
4843: LD_EXP 26
4847: PUSH
4848: LD_EXP 26
4852: PUSH
4853: LD_INT 2
4855: DIV
4856: PLUS
4857: PPUSH
4858: LD_EXP 27
4862: PUSH
4863: LD_INT 1
4865: PLUS
4866: PPUSH
4867: CALL 5490 0 4
4871: ST_TO_ADDR
4872: GO 4904
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4874: LD_ADDR_VAR 0 11
4878: PUSH
4879: LD_VAR 0 7
4883: PPUSH
4884: LD_VAR 0 9
4888: PPUSH
4889: LD_EXP 26
4893: PPUSH
4894: LD_EXP 27
4898: PPUSH
4899: CALL 5490 0 4
4903: ST_TO_ADDR
// for j in team do
4904: LD_ADDR_VAR 0 3
4908: PUSH
4909: LD_VAR 0 11
4913: PUSH
4914: FOR_IN
4915: IFFALSE 4964
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4917: LD_VAR 0 3
4921: PPUSH
4922: LD_EXP 23
4926: PUSH
4927: LD_VAR 0 8
4931: ARRAY
4932: PUSH
4933: LD_INT 1
4935: ARRAY
4936: PPUSH
4937: LD_EXP 23
4941: PUSH
4942: LD_VAR 0 8
4946: ARRAY
4947: PUSH
4948: LD_INT 2
4950: ARRAY
4951: PPUSH
4952: LD_INT 12
4954: PPUSH
4955: LD_INT 0
4957: PPUSH
4958: CALL_OW 50
4962: GO 4914
4964: POP
4965: POP
// if mpApemans then
4966: LD_EXP 32
4970: IFFALSE 5076
// begin for j := 1 to mpApemans do
4972: LD_ADDR_VAR 0 3
4976: PUSH
4977: DOUBLE
4978: LD_INT 1
4980: DEC
4981: ST_TO_ADDR
4982: LD_EXP 32
4986: PUSH
4987: FOR_TO
4988: IFFALSE 5074
// begin PrepareApeman ( - 5 ) ;
4990: LD_INT 5
4992: NEG
4993: PPUSH
4994: CALL 45141 0 1
// ape := CreateHuman ;
4998: LD_ADDR_VAR 0 10
5002: PUSH
5003: CALL_OW 44
5007: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
5008: LD_ADDR_EXP 34
5012: PUSH
5013: LD_EXP 34
5017: PPUSH
5018: LD_VAR 0 8
5022: PPUSH
5023: LD_EXP 34
5027: PUSH
5028: LD_VAR 0 8
5032: ARRAY
5033: PPUSH
5034: LD_VAR 0 10
5038: PPUSH
5039: CALL 49014 0 2
5043: PPUSH
5044: CALL_OW 1
5048: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
5049: LD_VAR 0 10
5053: PPUSH
5054: LD_EXP 33
5058: PUSH
5059: LD_VAR 0 8
5063: ARRAY
5064: PPUSH
5065: LD_INT 0
5067: PPUSH
5068: CALL_OW 49
// end ;
5072: GO 4987
5074: POP
5075: POP
// end ; end ;
5076: GO 3642
5078: POP
5079: POP
// if not mpTeamGame then
5080: LD_EXP 13
5084: NOT
5085: IFFALSE 5183
// begin for i := 1 to 8 do
5087: LD_ADDR_VAR 0 2
5091: PUSH
5092: DOUBLE
5093: LD_INT 1
5095: DEC
5096: ST_TO_ADDR
5097: LD_INT 8
5099: PUSH
5100: FOR_TO
5101: IFFALSE 5179
// for j := 1 to 8 do
5103: LD_ADDR_VAR 0 3
5107: PUSH
5108: DOUBLE
5109: LD_INT 1
5111: DEC
5112: ST_TO_ADDR
5113: LD_INT 8
5115: PUSH
5116: FOR_TO
5117: IFFALSE 5175
// if i <> j then
5119: LD_VAR 0 2
5123: PUSH
5124: LD_VAR 0 3
5128: NONEQUAL
5129: IFFALSE 5153
// SetAttitude ( i , j , att_neutral , true ) else
5131: LD_VAR 0 2
5135: PPUSH
5136: LD_VAR 0 3
5140: PPUSH
5141: LD_INT 0
5143: PPUSH
5144: LD_INT 1
5146: PPUSH
5147: CALL_OW 80
5151: GO 5173
// SetAttitude ( i , j , att_friend , true ) ;
5153: LD_VAR 0 2
5157: PPUSH
5158: LD_VAR 0 3
5162: PPUSH
5163: LD_INT 1
5165: PPUSH
5166: LD_INT 1
5168: PPUSH
5169: CALL_OW 80
5173: GO 5116
5175: POP
5176: POP
5177: GO 5100
5179: POP
5180: POP
// end else
5181: GO 5358
// begin if mpSharedVision then
5183: LD_EXP 18
5187: IFFALSE 5252
// begin for i in mpTeams do
5189: LD_ADDR_VAR 0 2
5193: PUSH
5194: LD_EXP 12
5198: PUSH
5199: FOR_IN
5200: IFFALSE 5250
// for j := 2 to i do
5202: LD_ADDR_VAR 0 3
5206: PUSH
5207: DOUBLE
5208: LD_INT 2
5210: DEC
5211: ST_TO_ADDR
5212: LD_VAR 0 2
5216: PUSH
5217: FOR_TO
5218: IFFALSE 5246
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5220: LD_VAR 0 2
5224: PUSH
5225: LD_VAR 0 3
5229: ARRAY
5230: PPUSH
5231: LD_VAR 0 2
5235: PUSH
5236: LD_INT 1
5238: ARRAY
5239: PPUSH
5240: CALL_OW 343
5244: GO 5217
5246: POP
5247: POP
5248: GO 5199
5250: POP
5251: POP
// end ; for i := 1 to 8 do
5252: LD_ADDR_VAR 0 2
5256: PUSH
5257: DOUBLE
5258: LD_INT 1
5260: DEC
5261: ST_TO_ADDR
5262: LD_INT 8
5264: PUSH
5265: FOR_TO
5266: IFFALSE 5356
// for j := 1 to 8 do
5268: LD_ADDR_VAR 0 3
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_INT 8
5280: PUSH
5281: FOR_TO
5282: IFFALSE 5352
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5284: LD_EXP 10
5288: PUSH
5289: LD_VAR 0 2
5293: ARRAY
5294: PUSH
5295: LD_EXP 10
5299: PUSH
5300: LD_VAR 0 3
5304: ARRAY
5305: EQUAL
5306: IFFALSE 5330
// SetAttitude ( i , j , att_friend , true ) else
5308: LD_VAR 0 2
5312: PPUSH
5313: LD_VAR 0 3
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: LD_INT 1
5323: PPUSH
5324: CALL_OW 80
5328: GO 5350
// SetAttitude ( i , j , att_enemy , true ) ;
5330: LD_VAR 0 2
5334: PPUSH
5335: LD_VAR 0 3
5339: PPUSH
5340: LD_INT 2
5342: PPUSH
5343: LD_INT 1
5345: PPUSH
5346: CALL_OW 80
5350: GO 5281
5352: POP
5353: POP
5354: GO 5265
5356: POP
5357: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5358: LD_ADDR_OWVAR 71
5362: PUSH
5363: LD_EXP 11
5367: PUSH
5368: LD_OWVAR 2
5372: ARRAY
5373: ST_TO_ADDR
// if IAmSpec then
5374: CALL_OW 531
5378: IFFALSE 5419
// begin FogOff ( true ) ;
5380: LD_INT 1
5382: PPUSH
5383: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5387: LD_EXP 31
5391: PUSH
5392: LD_INT 1
5394: ARRAY
5395: PUSH
5396: LD_INT 2
5398: DIV
5399: PPUSH
5400: LD_EXP 31
5404: PUSH
5405: LD_INT 2
5407: ARRAY
5408: PUSH
5409: LD_INT 2
5411: DIV
5412: PPUSH
5413: CALL_OW 86
// end else
5417: GO 5465
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5419: LD_EXP 23
5423: PUSH
5424: LD_EXP 9
5428: PUSH
5429: LD_OWVAR 2
5433: ARRAY
5434: ARRAY
5435: PUSH
5436: LD_INT 1
5438: ARRAY
5439: PPUSH
5440: LD_EXP 23
5444: PUSH
5445: LD_EXP 9
5449: PUSH
5450: LD_OWVAR 2
5454: ARRAY
5455: ARRAY
5456: PUSH
5457: LD_INT 2
5459: ARRAY
5460: PPUSH
5461: CALL_OW 86
// end ; BeginBuildUp ;
5465: CALL 6532 0 0
// enable ( mpActive ) ;
5469: LD_INT 100
5471: ENABLE_MARKED
// enable ( mpGameType ) ;
5472: LD_EXP 5
5476: ENABLE_MARKED
// mpGameActive := true ;
5477: LD_ADDR_EXP 41
5481: PUSH
5482: LD_INT 1
5484: ST_TO_ADDR
// end ;
5485: LD_VAR 0 1
5489: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5490: LD_INT 0
5492: PPUSH
5493: PPUSH
5494: PPUSH
5495: PPUSH
// result := [ ] ;
5496: LD_ADDR_VAR 0 5
5500: PUSH
5501: EMPTY
5502: ST_TO_ADDR
// class := class_soldier ;
5503: LD_ADDR_VAR 0 8
5507: PUSH
5508: LD_INT 1
5510: ST_TO_ADDR
// uc_side := side ;
5511: LD_ADDR_OWVAR 20
5515: PUSH
5516: LD_VAR 0 1
5520: ST_TO_ADDR
// uc_nation := nation ;
5521: LD_ADDR_OWVAR 21
5525: PUSH
5526: LD_VAR 0 2
5530: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5531: LD_ADDR_OWVAR 26
5535: PUSH
5536: LD_OWVAR 19
5540: PUSH
5541: LD_VAR 0 1
5545: ARRAY
5546: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5547: LD_INT 1
5549: PPUSH
5550: LD_INT 2
5552: PPUSH
5553: CALL_OW 12
5557: PPUSH
5558: LD_VAR 0 8
5562: PPUSH
5563: LD_VAR 0 4
5567: PUSH
5568: LD_INT 2
5570: PLUS
5571: PPUSH
5572: CALL_OW 380
// hc_importance := 105 ;
5576: LD_ADDR_OWVAR 32
5580: PUSH
5581: LD_INT 105
5583: ST_TO_ADDR
// if Multiplayer then
5584: LD_OWVAR 4
5588: IFFALSE 5628
// begin hc_gallery := MULTIAVATARS ;
5590: LD_ADDR_OWVAR 33
5594: PUSH
5595: LD_STRING MULTIAVATARS
5597: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5598: LD_ADDR_OWVAR 34
5602: PUSH
5603: LD_VAR 0 1
5607: PPUSH
5608: CALL_OW 525
5612: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5613: LD_ADDR_OWVAR 27
5617: PUSH
5618: LD_VAR 0 1
5622: PPUSH
5623: CALL_OW 526
5627: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5628: LD_ADDR_VAR 0 5
5632: PUSH
5633: LD_VAR 0 5
5637: PPUSH
5638: CALL_OW 44
5642: PPUSH
5643: CALL 49014 0 2
5647: ST_TO_ADDR
// if mpTeamPreset then
5648: LD_LOC 1
5652: IFFALSE 5748
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5654: LD_LOC 1
5658: PUSH
5659: LD_INT 1
5661: ARRAY
5662: PPUSH
5663: LD_VAR 0 5
5667: PUSH
5668: LD_VAR 0 5
5672: ARRAY
5673: PPUSH
5674: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5678: LD_VAR 0 5
5682: PUSH
5683: LD_VAR 0 5
5687: ARRAY
5688: PPUSH
5689: LD_INT 1
5691: PPUSH
5692: LD_LOC 1
5696: PUSH
5697: LD_INT 1
5699: ARRAY
5700: PPUSH
5701: LD_INT 1
5703: PPUSH
5704: CALL_OW 260
5708: PPUSH
5709: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5713: LD_VAR 0 5
5717: PUSH
5718: LD_VAR 0 5
5722: ARRAY
5723: PPUSH
5724: LD_INT 2
5726: PPUSH
5727: LD_LOC 1
5731: PUSH
5732: LD_INT 1
5734: ARRAY
5735: PPUSH
5736: LD_INT 2
5738: PPUSH
5739: CALL_OW 260
5743: PPUSH
5744: CALL_OW 239
// end ; InitHc_All ( ) ;
5748: CALL_OW 584
// class := 2 ;
5752: LD_ADDR_VAR 0 8
5756: PUSH
5757: LD_INT 2
5759: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5760: LD_ADDR_VAR 0 6
5764: PUSH
5765: DOUBLE
5766: LD_INT 1
5768: DEC
5769: ST_TO_ADDR
5770: LD_VAR 0 3
5774: PUSH
5775: LD_INT 1
5777: MINUS
5778: PUSH
5779: FOR_TO
5780: IFFALSE 5975
// begin PrepareHuman ( false , class , skill ) ;
5782: LD_INT 0
5784: PPUSH
5785: LD_VAR 0 8
5789: PPUSH
5790: LD_VAR 0 4
5794: PPUSH
5795: CALL_OW 380
// un := CreateHuman ;
5799: LD_ADDR_VAR 0 7
5803: PUSH
5804: CALL_OW 44
5808: ST_TO_ADDR
// result := Join ( result , un ) ;
5809: LD_ADDR_VAR 0 5
5813: PUSH
5814: LD_VAR 0 5
5818: PPUSH
5819: LD_VAR 0 7
5823: PPUSH
5824: CALL 49014 0 2
5828: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5829: LD_LOC 1
5833: PPUSH
5834: CALL 13048 0 1
5838: PUSH
5839: LD_VAR 0 3
5843: GREATEREQUAL
5844: IFFALSE 5940
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5846: LD_LOC 1
5850: PUSH
5851: LD_VAR 0 6
5855: PUSH
5856: LD_INT 1
5858: PLUS
5859: ARRAY
5860: PPUSH
5861: LD_VAR 0 7
5865: PPUSH
5866: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5870: LD_VAR 0 7
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: LD_LOC 1
5882: PUSH
5883: LD_VAR 0 6
5887: PUSH
5888: LD_INT 1
5890: PLUS
5891: ARRAY
5892: PPUSH
5893: LD_INT 1
5895: PPUSH
5896: CALL_OW 260
5900: PPUSH
5901: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5905: LD_VAR 0 7
5909: PPUSH
5910: LD_INT 2
5912: PPUSH
5913: LD_LOC 1
5917: PUSH
5918: LD_VAR 0 6
5922: PUSH
5923: LD_INT 1
5925: PLUS
5926: ARRAY
5927: PPUSH
5928: LD_INT 2
5930: PPUSH
5931: CALL_OW 260
5935: PPUSH
5936: CALL_OW 239
// end ; class := Inc ( class ) ;
5940: LD_ADDR_VAR 0 8
5944: PUSH
5945: LD_VAR 0 8
5949: PPUSH
5950: CALL 50387 0 1
5954: ST_TO_ADDR
// if class = 5 then
5955: LD_VAR 0 8
5959: PUSH
5960: LD_INT 5
5962: EQUAL
5963: IFFALSE 5973
// class := 1 ;
5965: LD_ADDR_VAR 0 8
5969: PUSH
5970: LD_INT 1
5972: ST_TO_ADDR
// end ;
5973: GO 5779
5975: POP
5976: POP
// if not mpTeamPreset then
5977: LD_LOC 1
5981: NOT
5982: IFFALSE 5994
// mpTeamPreset := result ;
5984: LD_ADDR_LOC 1
5988: PUSH
5989: LD_VAR 0 5
5993: ST_TO_ADDR
// end ;
5994: LD_VAR 0 5
5998: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5999: LD_INT 0
6001: PPUSH
6002: PPUSH
// result := [ ] ;
6003: LD_ADDR_VAR 0 4
6007: PUSH
6008: EMPTY
6009: ST_TO_ADDR
// if not vehicles then
6010: LD_VAR 0 3
6014: NOT
6015: IFFALSE 6019
// exit ;
6017: GO 6233
// for i := 1 to vehicles [ nation ] do
6019: LD_ADDR_VAR 0 5
6023: PUSH
6024: DOUBLE
6025: LD_INT 1
6027: DEC
6028: ST_TO_ADDR
6029: LD_VAR 0 3
6033: PUSH
6034: LD_VAR 0 2
6038: ARRAY
6039: PUSH
6040: FOR_TO
6041: IFFALSE 6231
// begin uc_side := side ;
6043: LD_ADDR_OWVAR 20
6047: PUSH
6048: LD_VAR 0 1
6052: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6053: LD_VAR 0 3
6057: PUSH
6058: LD_VAR 0 2
6062: ARRAY
6063: PUSH
6064: LD_VAR 0 5
6068: ARRAY
6069: PPUSH
6070: CALL 13048 0 1
6074: PUSH
6075: LD_INT 4
6077: GREATER
6078: IFFALSE 6108
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6080: LD_ADDR_OWVAR 21
6084: PUSH
6085: LD_VAR 0 3
6089: PUSH
6090: LD_VAR 0 2
6094: ARRAY
6095: PUSH
6096: LD_VAR 0 5
6100: ARRAY
6101: PUSH
6102: LD_INT 5
6104: ARRAY
6105: ST_TO_ADDR
6106: GO 6118
// uc_nation := nation ;
6108: LD_ADDR_OWVAR 21
6112: PUSH
6113: LD_VAR 0 2
6117: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6118: LD_VAR 0 3
6122: PUSH
6123: LD_VAR 0 2
6127: ARRAY
6128: PUSH
6129: LD_VAR 0 5
6133: ARRAY
6134: PUSH
6135: LD_INT 1
6137: ARRAY
6138: PPUSH
6139: LD_VAR 0 3
6143: PUSH
6144: LD_VAR 0 2
6148: ARRAY
6149: PUSH
6150: LD_VAR 0 5
6154: ARRAY
6155: PUSH
6156: LD_INT 2
6158: ARRAY
6159: PPUSH
6160: LD_VAR 0 3
6164: PUSH
6165: LD_VAR 0 2
6169: ARRAY
6170: PUSH
6171: LD_VAR 0 5
6175: ARRAY
6176: PUSH
6177: LD_INT 3
6179: ARRAY
6180: PPUSH
6181: LD_VAR 0 3
6185: PUSH
6186: LD_VAR 0 2
6190: ARRAY
6191: PUSH
6192: LD_VAR 0 5
6196: ARRAY
6197: PUSH
6198: LD_INT 4
6200: ARRAY
6201: PPUSH
6202: LD_INT 80
6204: PPUSH
6205: CALL 15844 0 5
// result := Join ( result , CreateVehicle ) ;
6209: LD_ADDR_VAR 0 4
6213: PUSH
6214: LD_VAR 0 4
6218: PPUSH
6219: CALL_OW 45
6223: PPUSH
6224: CALL 49014 0 2
6228: ST_TO_ADDR
// end ;
6229: GO 6040
6231: POP
6232: POP
// end ;
6233: LD_VAR 0 4
6237: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
// for i in mpBattleFlags do
6242: LD_ADDR_VAR 0 3
6246: PUSH
6247: LD_EXP 25
6251: PUSH
6252: FOR_IN
6253: IFFALSE 6330
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6255: LD_VAR 0 3
6259: PPUSH
6260: LD_INT 1
6262: PUSH
6263: LD_VAR 0 1
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: PUSH
6272: LD_INT 2
6274: PUSH
6275: LD_VAR 0 1
6279: PUSH
6280: LD_REAL  7.00000000000000E-0001
6283: MUL
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: PUSH
6289: LD_INT 3
6291: PUSH
6292: LD_VAR 0 1
6296: PUSH
6297: LD_REAL  4.00000000000000E-0001
6300: MUL
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: PUSH
6306: LD_INT 20
6308: PUSH
6309: LD_VAR 0 1
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: PPUSH
6324: CALL_OW 423
6328: GO 6252
6330: POP
6331: POP
// end ;
6332: LD_VAR 0 2
6336: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6337: LD_INT 100
6339: IFFALSE 6434
6341: GO 6343
6343: DISABLE
6344: LD_INT 0
6346: PPUSH
6347: PPUSH
// begin if mpBattleFlag <= 0 then
6348: LD_EXP 24
6352: PUSH
6353: LD_INT 0
6355: LESSEQUAL
6356: IFFALSE 6360
// exit ;
6358: GO 6434
// strength := 100 ;
6360: LD_ADDR_VAR 0 2
6364: PUSH
6365: LD_INT 100
6367: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6368: LD_EXP 24
6372: PPUSH
6373: CALL_OW 67
// strength := Dec ( strength ) ;
6377: LD_ADDR_VAR 0 2
6381: PUSH
6382: LD_VAR 0 2
6386: PPUSH
6387: CALL 50409 0 1
6391: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6392: LD_VAR 0 2
6396: PPUSH
6397: CALL 6238 0 1
// until not strength ;
6401: LD_VAR 0 2
6405: NOT
6406: IFFALSE 6368
// for i in mpBattleFlags do
6408: LD_ADDR_VAR 0 1
6412: PUSH
6413: LD_EXP 25
6417: PUSH
6418: FOR_IN
6419: IFFALSE 6432
// KillBattleFlag ( i ) ;
6421: LD_VAR 0 1
6425: PPUSH
6426: CALL_OW 419
6430: GO 6418
6432: POP
6433: POP
// end ;
6434: PPOPN 2
6436: END
// every 0 0$1 marked mpActive do var side , tmp ;
6437: GO 6439
6439: DISABLE
6440: LD_INT 0
6442: PPUSH
6443: PPUSH
// begin if mpSibBomb <= 1 then
6444: LD_EXP 30
6448: PUSH
6449: LD_INT 1
6451: LESSEQUAL
6452: IFFALSE 6456
// exit ;
6454: GO 6529
// tmp := mpSibBomb ;
6456: LD_ADDR_VAR 0 2
6460: PUSH
6461: LD_EXP 30
6465: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6466: LD_INT 35
6468: PPUSH
6469: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6473: LD_ADDR_VAR 0 2
6477: PUSH
6478: LD_VAR 0 2
6482: PUSH
6483: LD_INT 35
6485: MINUS
6486: ST_TO_ADDR
// until not tmp ;
6487: LD_VAR 0 2
6491: NOT
6492: IFFALSE 6466
// for side := 1 to 8 do
6494: LD_ADDR_VAR 0 1
6498: PUSH
6499: DOUBLE
6500: LD_INT 1
6502: DEC
6503: ST_TO_ADDR
6504: LD_INT 8
6506: PUSH
6507: FOR_TO
6508: IFFALSE 6527
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6510: LD_INT 25
6512: PPUSH
6513: LD_VAR 0 1
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: CALL_OW 322
6525: GO 6507
6527: POP
6528: POP
// end ;
6529: PPOPN 2
6531: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6532: LD_INT 0
6534: PPUSH
6535: PPUSH
6536: PPUSH
// mpBuildUpTimeDelay := 0 ;
6537: LD_ADDR_EXP 49
6541: PUSH
6542: LD_INT 0
6544: ST_TO_ADDR
// if not mpBuildUpTime then
6545: LD_EXP 22
6549: NOT
6550: IFFALSE 6554
// exit ;
6552: GO 6743
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6554: LD_ADDR_EXP 49
6558: PUSH
6559: LD_INT 8400
6561: PUSH
6562: LD_INT 2100
6564: PUSH
6565: LD_EXP 22
6569: MUL
6570: PLUS
6571: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6572: LD_ADDR_EXP 50
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// for i := 1 to 8 do
6580: LD_ADDR_VAR 0 2
6584: PUSH
6585: DOUBLE
6586: LD_INT 1
6588: DEC
6589: ST_TO_ADDR
6590: LD_INT 8
6592: PUSH
6593: FOR_TO
6594: IFFALSE 6741
// if mpSidePositions [ i ] then
6596: LD_EXP 9
6600: PUSH
6601: LD_VAR 0 2
6605: ARRAY
6606: IFFALSE 6739
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6608: LD_EXP 21
6612: PUSH
6613: LD_EXP 9
6617: PUSH
6618: LD_VAR 0 2
6622: ARRAY
6623: ARRAY
6624: PPUSH
6625: LD_INT 5
6627: PPUSH
6628: CALL_OW 424
// for j := 1 to 8 do
6632: LD_ADDR_VAR 0 3
6636: PUSH
6637: DOUBLE
6638: LD_INT 1
6640: DEC
6641: ST_TO_ADDR
6642: LD_INT 8
6644: PUSH
6645: FOR_TO
6646: IFFALSE 6737
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6648: LD_EXP 9
6652: PUSH
6653: LD_VAR 0 3
6657: ARRAY
6658: IFFALSE 6707
6660: PUSH
6661: LD_EXP 10
6665: PUSH
6666: LD_VAR 0 2
6670: ARRAY
6671: PUSH
6672: LD_EXP 10
6676: PUSH
6677: LD_VAR 0 3
6681: ARRAY
6682: NONEQUAL
6683: IFTRUE 6706
6685: PUSH
6686: LD_EXP 13
6690: NOT
6691: IFFALSE 6705
6693: PUSH
6694: LD_VAR 0 2
6698: PUSH
6699: LD_VAR 0 3
6703: NONEQUAL
6704: AND
6705: OR
6706: AND
6707: IFFALSE 6735
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6709: LD_VAR 0 3
6713: PPUSH
6714: LD_EXP 21
6718: PUSH
6719: LD_EXP 9
6723: PUSH
6724: LD_VAR 0 2
6728: ARRAY
6729: ARRAY
6730: PPUSH
6731: CALL_OW 333
6735: GO 6645
6737: POP
6738: POP
// end ;
6739: GO 6593
6741: POP
6742: POP
// end ;
6743: LD_VAR 0 1
6747: RET
// function EndBuildUp ; var i , j ; begin
6748: LD_INT 0
6750: PPUSH
6751: PPUSH
6752: PPUSH
// mpBuildUpTimeActive := false ;
6753: LD_ADDR_EXP 50
6757: PUSH
6758: LD_INT 0
6760: ST_TO_ADDR
// for i := 1 to 8 do
6761: LD_ADDR_VAR 0 2
6765: PUSH
6766: DOUBLE
6767: LD_INT 1
6769: DEC
6770: ST_TO_ADDR
6771: LD_INT 8
6773: PUSH
6774: FOR_TO
6775: IFFALSE 6922
// if mpSidePositions [ i ] then
6777: LD_EXP 9
6781: PUSH
6782: LD_VAR 0 2
6786: ARRAY
6787: IFFALSE 6920
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6789: LD_EXP 21
6793: PUSH
6794: LD_EXP 9
6798: PUSH
6799: LD_VAR 0 2
6803: ARRAY
6804: ARRAY
6805: PPUSH
6806: LD_INT 0
6808: PPUSH
6809: CALL_OW 424
// for j := 1 to 8 do
6813: LD_ADDR_VAR 0 3
6817: PUSH
6818: DOUBLE
6819: LD_INT 1
6821: DEC
6822: ST_TO_ADDR
6823: LD_INT 8
6825: PUSH
6826: FOR_TO
6827: IFFALSE 6918
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6829: LD_EXP 9
6833: PUSH
6834: LD_VAR 0 3
6838: ARRAY
6839: IFFALSE 6888
6841: PUSH
6842: LD_EXP 10
6846: PUSH
6847: LD_VAR 0 2
6851: ARRAY
6852: PUSH
6853: LD_EXP 10
6857: PUSH
6858: LD_VAR 0 3
6862: ARRAY
6863: NONEQUAL
6864: IFTRUE 6887
6866: PUSH
6867: LD_EXP 13
6871: NOT
6872: IFFALSE 6886
6874: PUSH
6875: LD_VAR 0 2
6879: PUSH
6880: LD_VAR 0 3
6884: NONEQUAL
6885: AND
6886: OR
6887: AND
6888: IFFALSE 6916
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6890: LD_VAR 0 3
6894: PPUSH
6895: LD_EXP 21
6899: PUSH
6900: LD_EXP 9
6904: PUSH
6905: LD_VAR 0 2
6909: ARRAY
6910: ARRAY
6911: PPUSH
6912: CALL_OW 334
6916: GO 6826
6918: POP
6919: POP
// end ;
6920: GO 6774
6922: POP
6923: POP
// end ;
6924: LD_VAR 0 1
6928: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6929: LD_EXP 50
6933: IFFALSE 7112
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin for i := 1 to 8 do
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: DOUBLE
6948: LD_INT 1
6950: DEC
6951: ST_TO_ADDR
6952: LD_INT 8
6954: PUSH
6955: FOR_TO
6956: IFFALSE 7109
// if mpSidePositions [ i ] then
6958: LD_EXP 9
6962: PUSH
6963: LD_VAR 0 1
6967: ARRAY
6968: IFFALSE 7107
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6970: LD_ADDR_VAR 0 2
6974: PUSH
6975: LD_EXP 21
6979: PUSH
6980: LD_EXP 9
6984: PUSH
6985: LD_VAR 0 1
6989: ARRAY
6990: ARRAY
6991: PPUSH
6992: LD_INT 2
6994: PUSH
6995: LD_INT 21
6997: PUSH
6998: LD_INT 1
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 21
7007: PUSH
7008: LD_INT 2
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 22
7022: PUSH
7023: LD_OWVAR 2
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 70
7040: PUSH
7041: FOR_IN
7042: IFFALSE 7105
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7044: LD_EXP 10
7048: PUSH
7049: LD_VAR 0 1
7053: ARRAY
7054: PUSH
7055: LD_EXP 10
7059: PUSH
7060: LD_OWVAR 2
7064: ARRAY
7065: NONEQUAL
7066: IFTRUE 7089
7068: PUSH
7069: LD_EXP 13
7073: NOT
7074: IFFALSE 7088
7076: PUSH
7077: LD_VAR 0 1
7081: PUSH
7082: LD_OWVAR 2
7086: NONEQUAL
7087: AND
7088: OR
7089: IFFALSE 7103
// ComMoveToArea ( un , BuildUpEscape ) ;
7091: LD_VAR 0 2
7095: PPUSH
7096: LD_INT 6
7098: PPUSH
7099: CALL_OW 113
7103: GO 7041
7105: POP
7106: POP
7107: GO 6955
7109: POP
7110: POP
// enable ;
7111: ENABLE
// end ;
7112: PPOPN 2
7114: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7115: LD_EXP 22
7119: IFFALSE 7169
7121: GO 7123
7123: DISABLE
7124: LD_INT 0
7126: PPUSH
// begin tmp := mpBuildUpTime ;
7127: LD_ADDR_VAR 0 1
7131: PUSH
7132: LD_EXP 22
7136: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7137: LD_INT 35
7139: PPUSH
7140: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7144: LD_ADDR_VAR 0 1
7148: PUSH
7149: LD_VAR 0 1
7153: PUSH
7154: LD_INT 35
7156: MINUS
7157: ST_TO_ADDR
// until not tmp ;
7158: LD_VAR 0 1
7162: NOT
7163: IFFALSE 7137
// EndBuildUp ;
7165: CALL 6748 0 0
// end ;
7169: PPOPN 1
7171: END
// every 0 0$1 trigger mpActive marked mpWin do
7172: LD_INT 100
7174: IFFALSE 7208
7176: GO 7178
7178: DISABLE
// begin if IAmServer then
7179: CALL_OW 518
7183: IFFALSE 7192
// wait ( 0 0$3 ) ;
7185: LD_INT 105
7187: PPUSH
7188: CALL_OW 67
// if Multiplayer then
7192: LD_OWVAR 4
7196: IFFALSE 7204
// YouWinInMultiplayer else
7198: CALL_OW 106
7202: GO 7208
// YouWin ;
7204: CALL_OW 103
// end ;
7208: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7209: LD_INT 0
7211: PPUSH
// result := false ;
7212: LD_ADDR_VAR 0 3
7216: PUSH
7217: LD_INT 0
7219: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7220: LD_VAR 0 1
7224: PUSH
7225: LD_INT 1
7227: DOUBLE
7228: EQUAL
7229: IFTRUE 7251
7231: LD_INT 5
7233: DOUBLE
7234: EQUAL
7235: IFTRUE 7251
7237: LD_INT 6
7239: DOUBLE
7240: EQUAL
7241: IFTRUE 7251
7243: LD_INT 7
7245: DOUBLE
7246: EQUAL
7247: IFTRUE 7251
7249: GO 7324
7251: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7252: LD_ADDR_VAR 0 3
7256: PUSH
7257: LD_INT 22
7259: PUSH
7260: LD_VAR 0 2
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 2
7271: PUSH
7272: LD_INT 21
7274: PUSH
7275: LD_INT 1
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 33
7284: PUSH
7285: LD_INT 3
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: PUSH
7292: LD_INT 33
7294: PUSH
7295: LD_INT 5
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: PPUSH
7312: CALL_OW 69
7316: PPUSH
7317: CALL 13048 0 1
7321: ST_TO_ADDR
// end ; GameTypeSurvival :
7322: GO 7563
7324: LD_INT 2
7326: DOUBLE
7327: EQUAL
7328: IFTRUE 7332
7330: GO 7462
7332: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7333: LD_ADDR_VAR 0 3
7337: PUSH
7338: LD_INT 22
7340: PUSH
7341: LD_VAR 0 2
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 2
7352: PUSH
7353: LD_INT 30
7355: PUSH
7356: LD_INT 0
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 30
7365: PUSH
7366: LD_INT 1
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PPUSH
7382: CALL_OW 69
7386: PPUSH
7387: CALL 13048 0 1
7391: IFFALSE 7459
7393: PUSH
7394: LD_INT 22
7396: PUSH
7397: LD_VAR 0 2
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: PUSH
7406: LD_INT 2
7408: PUSH
7409: LD_INT 21
7411: PUSH
7412: LD_INT 1
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PUSH
7419: LD_INT 33
7421: PUSH
7422: LD_INT 3
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: PUSH
7429: LD_INT 33
7431: PUSH
7432: LD_INT 5
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PPUSH
7449: CALL_OW 69
7453: PPUSH
7454: CALL 13048 0 1
7458: AND
7459: ST_TO_ADDR
// end ; GameTypeKing :
7460: GO 7563
7462: LD_INT 3
7464: DOUBLE
7465: EQUAL
7466: IFTRUE 7470
7468: GO 7562
7470: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7471: LD_ADDR_VAR 0 3
7475: PUSH
7476: LD_INT 22
7478: PUSH
7479: LD_VAR 0 2
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PUSH
7488: LD_INT 2
7490: PUSH
7491: LD_INT 21
7493: PUSH
7494: LD_INT 1
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 33
7503: PUSH
7504: LD_INT 3
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PUSH
7511: LD_INT 33
7513: PUSH
7514: LD_INT 5
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PPUSH
7531: CALL_OW 69
7535: PPUSH
7536: CALL 13048 0 1
7540: IFFALSE 7559
7542: PUSH
7543: LD_VAR 0 2
7547: PPUSH
7548: CALL 61926 0 1
7552: PUSH
7553: LD_EXP 37
7557: LESS
7558: AND
7559: ST_TO_ADDR
// end ; end ;
7560: GO 7563
7562: POP
// end ;
7563: LD_VAR 0 3
7567: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7568: LD_INT 100
7570: IFFALSE 7800
7572: GO 7574
7574: DISABLE
7575: LD_INT 0
7577: PPUSH
7578: PPUSH
// begin if Multiplayer then
7579: LD_OWVAR 4
7583: IFFALSE 7591
// SetPlayerSpectator ( ) else
7585: CALL_OW 572
7589: GO 7600
// FogOff ( your_side ) ;
7591: LD_OWVAR 2
7595: PPUSH
7596: CALL_OW 344
// repeat gameIsOn := false ;
7600: LD_ADDR_VAR 0 1
7604: PUSH
7605: LD_INT 0
7607: ST_TO_ADDR
// for i := 1 to 8 do
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: DOUBLE
7614: LD_INT 1
7616: DEC
7617: ST_TO_ADDR
7618: LD_INT 8
7620: PUSH
7621: FOR_TO
7622: IFFALSE 7752
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7624: LD_EXP 9
7628: PUSH
7629: LD_VAR 0 2
7633: ARRAY
7634: IFFALSE 7647
7636: PUSH
7637: LD_VAR 0 2
7641: PPUSH
7642: CALL_OW 108
7646: AND
7647: IFFALSE 7661
7649: PUSH
7650: LD_VAR 0 2
7654: PUSH
7655: LD_OWVAR 2
7659: NONEQUAL
7660: AND
7661: IFFALSE 7750
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7663: LD_EXP 10
7667: PUSH
7668: LD_VAR 0 2
7672: ARRAY
7673: NOT
7674: IFTRUE 7722
7676: PUSH
7677: LD_EXP 10
7681: PUSH
7682: LD_VAR 0 2
7686: ARRAY
7687: PUSH
7688: LD_EXP 10
7692: PUSH
7693: LD_OWVAR 2
7697: ARRAY
7698: NONEQUAL
7699: IFFALSE 7721
7701: PUSH
7702: LD_OWVAR 2
7706: PPUSH
7707: LD_VAR 0 2
7711: PPUSH
7712: CALL_OW 81
7716: PUSH
7717: LD_INT 1
7719: NONEQUAL
7720: AND
7721: OR
7722: IFFALSE 7750
// if HasPowerByGameType ( mpGameType , i ) then
7724: LD_EXP 5
7728: PPUSH
7729: LD_VAR 0 2
7733: PPUSH
7734: CALL 7209 0 2
7738: IFFALSE 7750
// begin gameIsOn := true ;
7740: LD_ADDR_VAR 0 1
7744: PUSH
7745: LD_INT 1
7747: ST_TO_ADDR
// break ;
7748: GO 7752
// end ;
7750: GO 7621
7752: POP
7753: POP
// wait ( 100 ) ;
7754: LD_INT 100
7756: PPUSH
7757: CALL_OW 67
// until not gameIsOn ;
7761: LD_VAR 0 1
7765: NOT
7766: IFFALSE 7600
// if IAmServer then
7768: CALL_OW 518
7772: IFFALSE 7781
// wait ( 0 0$3 ) ;
7774: LD_INT 105
7776: PPUSH
7777: CALL_OW 67
// if Multiplayer then
7781: LD_OWVAR 4
7785: IFFALSE 7793
// YouLostInMultiplayer else
7787: CALL_OW 107
7791: GO 7800
// YouLost (  ) ;
7793: LD_STRING 
7795: PPUSH
7796: CALL_OW 104
// end ;
7800: PPOPN 2
7802: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7803: LD_EXP 35
7807: IFFALSE 8191
7809: GO 7811
7811: DISABLE
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
7818: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7819: LD_ADDR_VAR 0 5
7823: PUSH
7824: LD_INT 1
7826: PUSH
7827: LD_INT 2
7829: PUSH
7830: LD_INT 3
7832: PUSH
7833: LD_INT 4
7835: PUSH
7836: LD_INT 5
7838: PUSH
7839: LD_INT 6
7841: PUSH
7842: LD_INT 7
7844: PUSH
7845: LD_INT 8
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7858: LD_INT 350
7860: PPUSH
7861: CALL_OW 67
// for i := 1 to 8 do
7865: LD_ADDR_VAR 0 1
7869: PUSH
7870: DOUBLE
7871: LD_INT 1
7873: DEC
7874: ST_TO_ADDR
7875: LD_INT 8
7877: PUSH
7878: FOR_TO
7879: IFFALSE 8161
// begin j := sides [ i ] ;
7881: LD_ADDR_VAR 0 2
7885: PUSH
7886: LD_VAR 0 5
7890: PUSH
7891: LD_VAR 0 1
7895: ARRAY
7896: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7897: LD_EXP 42
7901: PUSH
7902: LD_VAR 0 2
7906: ARRAY
7907: PPUSH
7908: CALL 13048 0 1
7912: IFFALSE 7925
7914: PUSH
7915: LD_VAR 0 2
7919: PPUSH
7920: CALL_OW 108
7924: AND
7925: IFFALSE 7943
7927: PUSH
7928: LD_EXP 5
7932: PPUSH
7933: LD_VAR 0 2
7937: PPUSH
7938: CALL 7209 0 2
7942: AND
7943: IFFALSE 8159
// begin wait ( mpRespawn div 2 ) ;
7945: LD_EXP 35
7949: PUSH
7950: LD_INT 2
7952: DIV
7953: PPUSH
7954: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7958: LD_ADDR_VAR 0 3
7962: PUSH
7963: LD_INT 22
7965: PUSH
7966: LD_VAR 0 2
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 50
7977: PUSH
7978: EMPTY
7979: LIST
7980: PUSH
7981: LD_INT 2
7983: PUSH
7984: LD_INT 30
7986: PUSH
7987: LD_INT 0
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PUSH
7994: LD_INT 30
7996: PUSH
7997: LD_INT 1
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: LIST
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: PPUSH
8014: CALL_OW 69
8018: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8019: LD_VAR 0 3
8023: NOT
8024: IFTRUE 8038
8026: PUSH
8027: LD_VAR 0 2
8031: PPUSH
8032: CALL_OW 108
8036: NOT
8037: OR
8038: IFTRUE 8057
8040: PUSH
8041: LD_EXP 5
8045: PPUSH
8046: LD_VAR 0 2
8050: PPUSH
8051: CALL 7209 0 2
8055: NOT
8056: OR
8057: IFFALSE 8061
// continue ;
8059: GO 7878
// spawn := tmp [ 1 ] ;
8061: LD_ADDR_VAR 0 4
8065: PUSH
8066: LD_VAR 0 3
8070: PUSH
8071: LD_INT 1
8073: ARRAY
8074: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8075: LD_EXP 42
8079: PUSH
8080: LD_VAR 0 2
8084: ARRAY
8085: PUSH
8086: LD_INT 1
8088: ARRAY
8089: PPUSH
8090: LD_VAR 0 4
8094: PPUSH
8095: CALL_OW 250
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: CALL_OW 251
8109: PPUSH
8110: LD_INT 32
8112: PPUSH
8113: LD_INT 1
8115: PPUSH
8116: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8120: LD_ADDR_EXP 42
8124: PUSH
8125: LD_EXP 42
8129: PPUSH
8130: LD_VAR 0 2
8134: PPUSH
8135: LD_EXP 42
8139: PUSH
8140: LD_VAR 0 2
8144: ARRAY
8145: PPUSH
8146: LD_INT 1
8148: PPUSH
8149: CALL_OW 3
8153: PPUSH
8154: CALL_OW 1
8158: ST_TO_ADDR
// end ; end ;
8159: GO 7878
8161: POP
8162: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8163: LD_ADDR_VAR 0 5
8167: PUSH
8168: LD_VAR 0 5
8172: PPUSH
8173: LD_INT 1
8175: PPUSH
8176: LD_INT 8
8178: PPUSH
8179: LD_INT 1
8181: PPUSH
8182: CALL 15374 0 4
8186: ST_TO_ADDR
// until false ;
8187: LD_INT 0
8189: IFFALSE 7858
// end ;
8191: PPOPN 5
8193: END
// every 0 0$1 marked mpActive do
8194: GO 8196
8196: DISABLE
// begin enable ;
8197: ENABLE
// if not mpDisplayStrings then
8198: LD_EXP 40
8202: NOT
8203: IFFALSE 8214
// begin display_strings := [ ] ;
8205: LD_ADDR_OWVAR 47
8209: PUSH
8210: EMPTY
8211: ST_TO_ADDR
// exit ;
8212: GO 8224
// end ; display_strings := mpDisplayStrings ;
8214: LD_ADDR_OWVAR 47
8218: PUSH
8219: LD_EXP 40
8223: ST_TO_ADDR
// end ; end_of_file
8224: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8225: LD_INT 0
8227: PPUSH
8228: PPUSH
8229: PPUSH
8230: PPUSH
8231: PPUSH
8232: PPUSH
8233: PPUSH
8234: PPUSH
8235: PPUSH
// if GetType ( un ) = unit_vehicle then
8236: LD_VAR 0 1
8240: PPUSH
8241: CALL_OW 247
8245: PUSH
8246: LD_INT 2
8248: EQUAL
8249: IFFALSE 8253
// exit ;
8251: GO 8927
// side := GetSide ( un ) ;
8253: LD_ADDR_VAR 0 9
8257: PUSH
8258: LD_VAR 0 1
8262: PPUSH
8263: CALL_OW 255
8267: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
8268: LD_EXP 5
8272: PUSH
8273: LD_INT 2
8275: EQUAL
8276: IFFALSE 8370
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8278: LD_VAR 0 1
8282: PPUSH
8283: CALL_OW 266
8287: PUSH
8288: LD_INT 0
8290: PUSH
8291: LD_INT 1
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: IN
8298: IFFALSE 8370
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8300: LD_ADDR_VAR 0 3
8304: PUSH
8305: LD_INT 22
8307: PUSH
8308: LD_VAR 0 9
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 2
8319: PUSH
8320: LD_INT 21
8322: PUSH
8323: LD_INT 1
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 33
8332: PUSH
8333: LD_INT 3
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: LIST
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: PUSH
8354: FOR_IN
8355: IFFALSE 8368
// KillUnit ( i ) ;
8357: LD_VAR 0 3
8361: PPUSH
8362: CALL_OW 66
8366: GO 8354
8368: POP
8369: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8370: LD_VAR 0 1
8374: PPUSH
8375: CALL_OW 257
8379: PUSH
8380: LD_INT 12
8382: PUSH
8383: LD_INT 17
8385: PUSH
8386: LD_INT 15
8388: PUSH
8389: LD_INT 16
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: IN
8398: IFTRUE 8415
8400: PUSH
8401: LD_VAR 0 1
8405: PPUSH
8406: CALL_OW 263
8410: PUSH
8411: LD_INT 5
8413: EQUAL
8414: OR
8415: IFFALSE 8652
// begin tag := 0 ;
8417: LD_ADDR_VAR 0 5
8421: PUSH
8422: LD_INT 0
8424: ST_TO_ADDR
// for i := 1 to 8 do
8425: LD_ADDR_VAR 0 3
8429: PUSH
8430: DOUBLE
8431: LD_INT 1
8433: DEC
8434: ST_TO_ADDR
8435: LD_INT 8
8437: PUSH
8438: FOR_TO
8439: IFFALSE 8473
// if un in mpApePosIndex [ i ] then
8441: LD_VAR 0 1
8445: PUSH
8446: LD_EXP 34
8450: PUSH
8451: LD_VAR 0 3
8455: ARRAY
8456: IN
8457: IFFALSE 8471
// begin tag := i ;
8459: LD_ADDR_VAR 0 5
8463: PUSH
8464: LD_VAR 0 3
8468: ST_TO_ADDR
// break ;
8469: GO 8473
// end ;
8471: GO 8438
8473: POP
8474: POP
// if not tag then
8475: LD_VAR 0 5
8479: NOT
8480: IFFALSE 8484
// exit ;
8482: GO 8927
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8484: LD_ADDR_VAR 0 7
8488: PUSH
8489: LD_EXP 33
8493: PUSH
8494: LD_EXP 9
8498: PUSH
8499: LD_VAR 0 5
8503: ARRAY
8504: ARRAY
8505: ST_TO_ADDR
// if not area then
8506: LD_VAR 0 7
8510: NOT
8511: IFFALSE 8515
// exit ;
8513: GO 8927
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8515: LD_INT 14700
8517: PUSH
8518: LD_VAR 0 1
8522: PUSH
8523: LD_INT 5
8525: MOD
8526: PUSH
8527: LD_INT 1
8529: PLUS
8530: PUSH
8531: LD_INT 700
8533: MUL
8534: PLUS
8535: PPUSH
8536: CALL_OW 67
// repeat wait ( 10 ) ;
8540: LD_INT 10
8542: PPUSH
8543: CALL_OW 67
// until not mpBlockRespThread ;
8547: LD_EXP 48
8551: NOT
8552: IFFALSE 8540
// mpBlockRespThread := true ;
8554: LD_ADDR_EXP 48
8558: PUSH
8559: LD_INT 1
8561: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8562: LD_INT 0
8564: PPUSH
8565: CALL 45141 0 1
// ape := CreateHuman ;
8569: LD_ADDR_VAR 0 4
8573: PUSH
8574: CALL_OW 44
8578: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8579: LD_ADDR_EXP 34
8583: PUSH
8584: LD_EXP 34
8588: PPUSH
8589: LD_VAR 0 5
8593: PPUSH
8594: LD_EXP 34
8598: PUSH
8599: LD_VAR 0 5
8603: ARRAY
8604: PPUSH
8605: LD_VAR 0 4
8609: PPUSH
8610: CALL 49014 0 2
8614: PPUSH
8615: CALL_OW 1
8619: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8620: LD_VAR 0 4
8624: PPUSH
8625: LD_VAR 0 7
8629: PPUSH
8630: LD_INT 0
8632: PPUSH
8633: CALL_OW 49
// wait ( 10 ) ;
8637: LD_INT 10
8639: PPUSH
8640: CALL_OW 67
// mpBlockRespThread := false ;
8644: LD_ADDR_EXP 48
8648: PUSH
8649: LD_INT 0
8651: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8652: LD_VAR 0 1
8656: PPUSH
8657: CALL_OW 247
8661: PUSH
8662: LD_INT 1
8664: EQUAL
8665: IFFALSE 8682
8667: PUSH
8668: LD_VAR 0 1
8672: PPUSH
8673: CALL_OW 248
8677: PUSH
8678: LD_INT 0
8680: GREATER
8681: AND
8682: IFFALSE 8927
// begin if not mpRespawn then
8684: LD_EXP 35
8688: NOT
8689: IFFALSE 8693
// exit ;
8691: GO 8927
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8693: LD_VAR 0 9
8697: PPUSH
8698: CALL_OW 108
8702: NOT
8703: IFFALSE 8722
8705: PUSH
8706: LD_EXP 5
8710: PPUSH
8711: LD_VAR 0 9
8715: PPUSH
8716: CALL 7209 0 2
8720: NOT
8721: AND
8722: IFFALSE 8726
// exit ;
8724: GO 8927
// side := GetSide ( un ) ;
8726: LD_ADDR_VAR 0 9
8730: PUSH
8731: LD_VAR 0 1
8735: PPUSH
8736: CALL_OW 255
8740: ST_TO_ADDR
// nation := GetNation ( un ) ;
8741: LD_ADDR_VAR 0 8
8745: PUSH
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 248
8755: ST_TO_ADDR
// class := GetClass ( un ) ;
8756: LD_ADDR_VAR 0 6
8760: PUSH
8761: LD_VAR 0 1
8765: PPUSH
8766: CALL_OW 257
8770: ST_TO_ADDR
// if class > 4 then
8771: LD_VAR 0 6
8775: PUSH
8776: LD_INT 4
8778: GREATER
8779: IFFALSE 8789
// class := 1 ;
8781: LD_ADDR_VAR 0 6
8785: PUSH
8786: LD_INT 1
8788: ST_TO_ADDR
// repeat wait ( 10 ) ;
8789: LD_INT 10
8791: PPUSH
8792: CALL_OW 67
// until not mpBlockRespThread ;
8796: LD_EXP 48
8800: NOT
8801: IFFALSE 8789
// mpBlockRespThread := true ;
8803: LD_ADDR_EXP 48
8807: PUSH
8808: LD_INT 1
8810: ST_TO_ADDR
// uc_side := side ;
8811: LD_ADDR_OWVAR 20
8815: PUSH
8816: LD_VAR 0 9
8820: ST_TO_ADDR
// uc_nation := nation ;
8821: LD_ADDR_OWVAR 21
8825: PUSH
8826: LD_VAR 0 8
8830: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8831: LD_INT 0
8833: PPUSH
8834: LD_VAR 0 6
8838: PPUSH
8839: LD_INT 2
8841: PPUSH
8842: CALL_OW 380
// un := CreateHuman ;
8846: LD_ADDR_VAR 0 1
8850: PUSH
8851: CALL_OW 44
8855: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8856: LD_ADDR_EXP 42
8860: PUSH
8861: LD_EXP 42
8865: PPUSH
8866: LD_VAR 0 9
8870: PPUSH
8871: LD_EXP 42
8875: PUSH
8876: LD_VAR 0 9
8880: ARRAY
8881: PPUSH
8882: LD_EXP 42
8886: PUSH
8887: LD_VAR 0 9
8891: ARRAY
8892: PUSH
8893: LD_INT 1
8895: PLUS
8896: PPUSH
8897: LD_VAR 0 1
8901: PPUSH
8902: CALL_OW 1
8906: PPUSH
8907: CALL_OW 1
8911: ST_TO_ADDR
// wait ( 10 ) ;
8912: LD_INT 10
8914: PPUSH
8915: CALL_OW 67
// mpBlockRespThread := false ;
8919: LD_ADDR_EXP 48
8923: PUSH
8924: LD_INT 0
8926: ST_TO_ADDR
// end ; end ;
8927: LD_VAR 0 2
8931: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8932: LD_INT 0
8934: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8935: LD_VAR 0 1
8939: PPUSH
8940: CALL_OW 266
8944: PUSH
8945: LD_INT 0
8947: PUSH
8948: LD_INT 1
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: IN
8955: IFFALSE 8980
// SetBName ( building , @ & GetSide ( building ) ) ;
8957: LD_VAR 0 1
8961: PPUSH
8962: LD_STRING @
8964: PUSH
8965: LD_VAR 0 1
8969: PPUSH
8970: CALL_OW 255
8974: STR
8975: PPUSH
8976: CALL_OW 500
// end ;
8980: LD_VAR 0 2
8984: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8985: LD_INT 0
8987: PPUSH
8988: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8989: LD_EXP 5
8993: PUSH
8994: LD_INT 2
8996: EQUAL
8997: IFFALSE 9021
8999: PUSH
9000: LD_VAR 0 1
9004: PPUSH
9005: CALL_OW 266
9009: PUSH
9010: LD_INT 0
9012: PUSH
9013: LD_INT 1
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: IN
9020: AND
9021: IFFALSE 9100
// begin SetSide ( building , oldSide ) ;
9023: LD_VAR 0 1
9027: PPUSH
9028: LD_VAR 0 2
9032: PPUSH
9033: CALL_OW 235
// KillUnit ( building ) ;
9037: LD_VAR 0 1
9041: PPUSH
9042: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9046: LD_ADDR_VAR 0 5
9050: PUSH
9051: LD_INT 22
9053: PUSH
9054: LD_VAR 0 2
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: LD_INT 21
9065: PUSH
9066: LD_INT 1
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PPUSH
9077: CALL_OW 69
9081: PUSH
9082: FOR_IN
9083: IFFALSE 9096
// KillUnit ( i ) ;
9085: LD_VAR 0 5
9089: PPUSH
9090: CALL_OW 66
9094: GO 9082
9096: POP
9097: POP
// exit ;
9098: GO 9145
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9100: LD_VAR 0 1
9104: PPUSH
9105: CALL_OW 266
9109: PUSH
9110: LD_INT 0
9112: PUSH
9113: LD_INT 1
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: IN
9120: IFFALSE 9145
// SetBName ( building , @ & GetSide ( building ) ) ;
9122: LD_VAR 0 1
9126: PPUSH
9127: LD_STRING @
9129: PUSH
9130: LD_VAR 0 1
9134: PPUSH
9135: CALL_OW 255
9139: STR
9140: PPUSH
9141: CALL_OW 500
// end ;
9145: LD_VAR 0 4
9149: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9150: LD_INT 0
9152: PPUSH
9153: PPUSH
9154: PPUSH
// if mpGameType <> GameTypeFamine then
9155: LD_EXP 5
9159: PUSH
9160: LD_INT 5
9162: NONEQUAL
9163: IFFALSE 9167
// exit ;
9165: GO 9382
// for i := 1 to mpGlobalOilDeposits do
9167: LD_ADDR_VAR 0 6
9171: PUSH
9172: DOUBLE
9173: LD_INT 1
9175: DEC
9176: ST_TO_ADDR
9177: LD_EXP 43
9181: PUSH
9182: FOR_TO
9183: IFFALSE 9380
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9185: LD_EXP 43
9189: PUSH
9190: LD_VAR 0 6
9194: ARRAY
9195: PUSH
9196: LD_INT 1
9198: ARRAY
9199: PPUSH
9200: LD_EXP 43
9204: PUSH
9205: LD_VAR 0 6
9209: ARRAY
9210: PUSH
9211: LD_INT 2
9213: ARRAY
9214: PPUSH
9215: CALL_OW 428
9219: PUSH
9220: LD_VAR 0 1
9224: EQUAL
9225: IFFALSE 9378
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9227: LD_ADDR_VAR 0 7
9231: PUSH
9232: LD_EXP 43
9236: PUSH
9237: LD_VAR 0 6
9241: ARRAY
9242: PUSH
9243: LD_INT 3
9245: ARRAY
9246: ST_TO_ADDR
// value := value - amount ;
9247: LD_ADDR_VAR 0 7
9251: PUSH
9252: LD_VAR 0 7
9256: PUSH
9257: LD_VAR 0 4
9261: MINUS
9262: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9263: LD_ADDR_EXP 43
9267: PUSH
9268: LD_EXP 43
9272: PPUSH
9273: LD_VAR 0 6
9277: PPUSH
9278: LD_EXP 43
9282: PUSH
9283: LD_VAR 0 6
9287: ARRAY
9288: PPUSH
9289: LD_INT 3
9291: PPUSH
9292: LD_VAR 0 7
9296: PPUSH
9297: CALL_OW 1
9301: PPUSH
9302: CALL_OW 1
9306: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9307: LD_VAR 0 1
9311: PPUSH
9312: LD_VAR 0 7
9316: PPUSH
9317: CALL_OW 505
// if value <= 0 then
9321: LD_VAR 0 7
9325: PUSH
9326: LD_INT 0
9328: LESSEQUAL
9329: IFFALSE 9378
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9331: LD_EXP 43
9335: PUSH
9336: LD_VAR 0 6
9340: ARRAY
9341: PUSH
9342: LD_INT 1
9344: ARRAY
9345: PPUSH
9346: LD_EXP 43
9350: PUSH
9351: LD_VAR 0 6
9355: ARRAY
9356: PUSH
9357: LD_INT 2
9359: ARRAY
9360: PPUSH
9361: CALL_OW 63
// KillUnit ( building ) ;
9365: LD_VAR 0 1
9369: PPUSH
9370: CALL_OW 66
// exit ;
9374: POP
9375: POP
9376: GO 9382
// end ; end ; end ;
9378: GO 9182
9380: POP
9381: POP
// end ;
9382: LD_VAR 0 5
9386: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9387: LD_INT 0
9389: PPUSH
9390: PPUSH
9391: PPUSH
// if mpGameType <> GameTypeFamine then
9392: LD_EXP 5
9396: PUSH
9397: LD_INT 5
9399: NONEQUAL
9400: IFFALSE 9404
// exit ;
9402: GO 9619
// for i := 1 to mpGlobalSibDeposits do
9404: LD_ADDR_VAR 0 6
9408: PUSH
9409: DOUBLE
9410: LD_INT 1
9412: DEC
9413: ST_TO_ADDR
9414: LD_EXP 44
9418: PUSH
9419: FOR_TO
9420: IFFALSE 9617
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9422: LD_EXP 44
9426: PUSH
9427: LD_VAR 0 6
9431: ARRAY
9432: PUSH
9433: LD_INT 1
9435: ARRAY
9436: PPUSH
9437: LD_EXP 44
9441: PUSH
9442: LD_VAR 0 6
9446: ARRAY
9447: PUSH
9448: LD_INT 2
9450: ARRAY
9451: PPUSH
9452: CALL_OW 428
9456: PUSH
9457: LD_VAR 0 1
9461: EQUAL
9462: IFFALSE 9615
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9464: LD_ADDR_VAR 0 7
9468: PUSH
9469: LD_EXP 44
9473: PUSH
9474: LD_VAR 0 6
9478: ARRAY
9479: PUSH
9480: LD_INT 3
9482: ARRAY
9483: ST_TO_ADDR
// value := value - amount ;
9484: LD_ADDR_VAR 0 7
9488: PUSH
9489: LD_VAR 0 7
9493: PUSH
9494: LD_VAR 0 4
9498: MINUS
9499: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9500: LD_ADDR_EXP 44
9504: PUSH
9505: LD_EXP 44
9509: PPUSH
9510: LD_VAR 0 6
9514: PPUSH
9515: LD_EXP 44
9519: PUSH
9520: LD_VAR 0 6
9524: ARRAY
9525: PPUSH
9526: LD_INT 3
9528: PPUSH
9529: LD_VAR 0 7
9533: PPUSH
9534: CALL_OW 1
9538: PPUSH
9539: CALL_OW 1
9543: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9544: LD_VAR 0 1
9548: PPUSH
9549: LD_VAR 0 7
9553: PPUSH
9554: CALL_OW 505
// if value <= 0 then
9558: LD_VAR 0 7
9562: PUSH
9563: LD_INT 0
9565: LESSEQUAL
9566: IFFALSE 9615
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9568: LD_EXP 44
9572: PUSH
9573: LD_VAR 0 6
9577: ARRAY
9578: PUSH
9579: LD_INT 1
9581: ARRAY
9582: PPUSH
9583: LD_EXP 44
9587: PUSH
9588: LD_VAR 0 6
9592: ARRAY
9593: PUSH
9594: LD_INT 2
9596: ARRAY
9597: PPUSH
9598: CALL_OW 63
// KillUnit ( building ) ;
9602: LD_VAR 0 1
9606: PPUSH
9607: CALL_OW 66
// exit ;
9611: POP
9612: POP
9613: GO 9619
// end ; end ; end ;
9615: GO 9419
9617: POP
9618: POP
// end ;
9619: LD_VAR 0 5
9623: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9624: LD_INT 0
9626: PPUSH
9627: PPUSH
// side := GetSide ( factory ) ;
9628: LD_ADDR_VAR 0 7
9632: PUSH
9633: LD_VAR 0 1
9637: PPUSH
9638: CALL_OW 255
9642: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9643: LD_VAR 0 5
9647: PUSH
9648: LD_INT 81
9650: EQUAL
9651: IFFALSE 9689
9653: PUSH
9654: LD_INT 22
9656: PUSH
9657: LD_VAR 0 7
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: LD_INT 34
9668: PUSH
9669: LD_INT 81
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PPUSH
9680: CALL_OW 69
9684: PUSH
9685: LD_INT 0
9687: GREATER
9688: AND
9689: IFFALSE 9722
// begin ComCancel ( factory ) ;
9691: LD_VAR 0 1
9695: PPUSH
9696: CALL_OW 127
// if side = your_side then
9700: LD_VAR 0 7
9704: PUSH
9705: LD_OWVAR 2
9709: EQUAL
9710: IFFALSE 9722
// HintSpec ( VehLimit , 2 ) ;
9712: LD_STRING VehLimit
9714: PPUSH
9715: LD_INT 2
9717: PPUSH
9718: CALL_OW 338
// end ; end ;
9722: LD_VAR 0 6
9726: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
9727: LD_INT 0
9729: PPUSH
9730: PPUSH
9731: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
9732: LD_VAR 0 1
9736: PPUSH
9737: CALL_OW 264
9741: PUSH
9742: LD_INT 81
9744: EQUAL
9745: IFFALSE 9762
9747: PUSH
9748: LD_VAR 0 1
9752: PPUSH
9753: CALL_OW 263
9757: PUSH
9758: LD_INT 1
9760: EQUAL
9761: AND
9762: IFFALSE 10042
// begin for i := 1 to Count ( minersList ) do
9764: LD_ADDR_VAR 0 6
9768: PUSH
9769: DOUBLE
9770: LD_INT 1
9772: DEC
9773: ST_TO_ADDR
9774: LD_EXP 58
9778: PPUSH
9779: CALL 13048 0 1
9783: PUSH
9784: FOR_TO
9785: IFFALSE 9903
// begin if minersList [ i ] = oldId then
9787: LD_EXP 58
9791: PUSH
9792: LD_VAR 0 6
9796: ARRAY
9797: PUSH
9798: LD_VAR 0 2
9802: EQUAL
9803: IFFALSE 9901
// begin for j := 1 to minerMinesList [ i ] do
9805: LD_ADDR_VAR 0 7
9809: PUSH
9810: DOUBLE
9811: LD_INT 1
9813: DEC
9814: ST_TO_ADDR
9815: LD_EXP 59
9819: PUSH
9820: LD_VAR 0 6
9824: ARRAY
9825: PUSH
9826: FOR_TO
9827: IFFALSE 9877
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
9829: LD_EXP 59
9833: PUSH
9834: LD_VAR 0 6
9838: ARRAY
9839: PUSH
9840: LD_VAR 0 7
9844: ARRAY
9845: PUSH
9846: LD_INT 1
9848: ARRAY
9849: PPUSH
9850: LD_EXP 59
9854: PUSH
9855: LD_VAR 0 6
9859: ARRAY
9860: PUSH
9861: LD_VAR 0 7
9865: ARRAY
9866: PUSH
9867: LD_INT 2
9869: ARRAY
9870: PPUSH
9871: CALL_OW 612
9875: GO 9826
9877: POP
9878: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
9879: LD_ADDR_EXP 59
9883: PUSH
9884: LD_EXP 59
9888: PPUSH
9889: LD_VAR 0 6
9893: PPUSH
9894: CALL_OW 3
9898: ST_TO_ADDR
// break ;
9899: GO 9903
// end ; end ;
9901: GO 9784
9903: POP
9904: POP
// minersList := minersList diff oldId ;
9905: LD_ADDR_EXP 58
9909: PUSH
9910: LD_EXP 58
9914: PUSH
9915: LD_VAR 0 2
9919: DIFF
9920: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
9921: LD_INT 22
9923: PUSH
9924: LD_VAR 0 4
9928: PPUSH
9929: CALL_OW 255
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 34
9940: PUSH
9941: LD_INT 81
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PPUSH
9952: CALL_OW 69
9956: PUSH
9957: LD_INT 1
9959: GREATER
9960: IFFALSE 9987
// begin ComExit ( unit ) ;
9962: LD_VAR 0 4
9966: PPUSH
9967: CALL 49412 0 1
// SetSide ( newId , oldSide ) ;
9971: LD_VAR 0 1
9975: PPUSH
9976: LD_VAR 0 3
9980: PPUSH
9981: CALL_OW 235
// exit ;
9985: GO 10042
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
9987: LD_ADDR_EXP 58
9991: PUSH
9992: LD_EXP 58
9996: PPUSH
9997: LD_EXP 58
10001: PUSH
10002: LD_INT 1
10004: PLUS
10005: PPUSH
10006: LD_VAR 0 1
10010: PPUSH
10011: CALL_OW 1
10015: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10016: LD_ADDR_EXP 59
10020: PUSH
10021: LD_EXP 59
10025: PPUSH
10026: LD_EXP 59
10030: PUSH
10031: LD_INT 1
10033: PLUS
10034: PPUSH
10035: EMPTY
10036: PPUSH
10037: CALL_OW 1
10041: ST_TO_ADDR
// end ; end ; end_of_file
10042: LD_VAR 0 5
10046: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10047: LD_EXP 41
10051: IFFALSE 10059
10053: PUSH
10054: CALL 10269 0 0
10058: AND
10059: IFFALSE 10067
10061: PUSH
10062: LD_OWVAR 4
10066: AND
10067: IFFALSE 10266
10069: GO 10071
10071: DISABLE
10072: LD_INT 0
10074: PPUSH
10075: PPUSH
// begin canWin := false ;
10076: LD_ADDR_VAR 0 2
10080: PUSH
10081: LD_INT 0
10083: ST_TO_ADDR
// if not HasPower ( your_side ) then
10084: LD_OWVAR 2
10088: PPUSH
10089: CALL 10311 0 1
10093: NOT
10094: IFFALSE 10105
// begin Multiplayer_Loose_Message ;
10096: CALL_OW 521
// enable ( mpLose ) ;
10100: LD_INT 102
10102: ENABLE_MARKED
// end else
10103: GO 10266
// begin canWin := true ;
10105: LD_ADDR_VAR 0 2
10109: PUSH
10110: LD_INT 1
10112: ST_TO_ADDR
// for i := 1 to 8 do
10113: LD_ADDR_VAR 0 1
10117: PUSH
10118: DOUBLE
10119: LD_INT 1
10121: DEC
10122: ST_TO_ADDR
10123: LD_INT 8
10125: PUSH
10126: FOR_TO
10127: IFFALSE 10252
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10129: LD_EXP 9
10133: PUSH
10134: LD_VAR 0 1
10138: ARRAY
10139: IFFALSE 10152
10141: PUSH
10142: LD_VAR 0 1
10146: PPUSH
10147: CALL_OW 108
10151: AND
10152: IFFALSE 10166
10154: PUSH
10155: LD_VAR 0 1
10159: PUSH
10160: LD_OWVAR 2
10164: NONEQUAL
10165: AND
10166: IFFALSE 10250
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10168: LD_EXP 10
10172: PUSH
10173: LD_VAR 0 1
10177: ARRAY
10178: NOT
10179: IFTRUE 10227
10181: PUSH
10182: LD_EXP 10
10186: PUSH
10187: LD_VAR 0 1
10191: ARRAY
10192: PUSH
10193: LD_EXP 10
10197: PUSH
10198: LD_OWVAR 2
10202: ARRAY
10203: NONEQUAL
10204: IFFALSE 10226
10206: PUSH
10207: LD_OWVAR 2
10211: PPUSH
10212: LD_VAR 0 1
10216: PPUSH
10217: CALL_OW 81
10221: PUSH
10222: LD_INT 1
10224: NONEQUAL
10225: AND
10226: OR
10227: IFFALSE 10250
// if HasPower ( i ) then
10229: LD_VAR 0 1
10233: PPUSH
10234: CALL 10311 0 1
10238: IFFALSE 10250
// begin canWin := false ;
10240: LD_ADDR_VAR 0 2
10244: PUSH
10245: LD_INT 0
10247: ST_TO_ADDR
// break ;
10248: GO 10252
// end ;
10250: GO 10126
10252: POP
10253: POP
// if canWin then
10254: LD_VAR 0 2
10258: IFFALSE 10265
// enable ( mpWin ) else
10260: LD_INT 101
10262: ENABLE_MARKED
10263: GO 10266
// enable ;
10265: ENABLE
// end ; end ;
10266: PPOPN 2
10268: END
// function CanWinLoose ; begin
10269: LD_INT 0
10271: PPUSH
// result := true ;
10272: LD_ADDR_VAR 0 1
10276: PUSH
10277: LD_INT 1
10279: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10280: CALL_OW 531
10284: IFFALSE 10296
10286: PUSH
10287: CALL_OW 519
10291: PUSH
10292: LD_INT 1
10294: GREATER
10295: AND
10296: IFFALSE 10306
// result := false ;
10298: LD_ADDR_VAR 0 1
10302: PUSH
10303: LD_INT 0
10305: ST_TO_ADDR
// end ;
10306: LD_VAR 0 1
10310: RET
// function HasPower ( i ) ; begin
10311: LD_INT 0
10313: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10314: LD_ADDR_VAR 0 2
10318: PUSH
10319: LD_INT 22
10321: PUSH
10322: LD_VAR 0 1
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 2
10333: PUSH
10334: LD_INT 21
10336: PUSH
10337: LD_INT 1
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 33
10346: PUSH
10347: LD_INT 3
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 33
10356: PUSH
10357: LD_INT 5
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PPUSH
10374: CALL_OW 69
10378: ST_TO_ADDR
// end ; end_of_file
10379: LD_VAR 0 2
10383: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10384: LD_EXP 41
10388: IFFALSE 10431
10390: GO 10392
10392: DISABLE
10393: LD_INT 0
10395: PPUSH
// begin for i := 1 to 8 do
10396: LD_ADDR_VAR 0 1
10400: PUSH
10401: DOUBLE
10402: LD_INT 1
10404: DEC
10405: ST_TO_ADDR
10406: LD_INT 8
10408: PUSH
10409: FOR_TO
10410: IFFALSE 10429
// SetRestrict ( b_depot , i , state_disabled ) ;
10412: LD_INT 0
10414: PPUSH
10415: LD_VAR 0 1
10419: PPUSH
10420: LD_INT 0
10422: PPUSH
10423: CALL_OW 324
10427: GO 10409
10429: POP
10430: POP
// end ;
10431: PPOPN 1
10433: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10434: LD_EXP 41
10438: IFFALSE 10446
10440: PUSH
10441: CALL 10656 0 0
10445: AND
10446: IFFALSE 10454
10448: PUSH
10449: LD_OWVAR 4
10453: AND
10454: IFFALSE 10653
10456: GO 10458
10458: DISABLE
10459: LD_INT 0
10461: PPUSH
10462: PPUSH
// begin canWin := false ;
10463: LD_ADDR_VAR 0 2
10467: PUSH
10468: LD_INT 0
10470: ST_TO_ADDR
// if not HasPower ( your_side ) then
10471: LD_OWVAR 2
10475: PPUSH
10476: CALL 10698 0 1
10480: NOT
10481: IFFALSE 10492
// begin Multiplayer_Loose_Message ;
10483: CALL_OW 521
// enable ( mpLose ) ;
10487: LD_INT 102
10489: ENABLE_MARKED
// end else
10490: GO 10653
// begin canWin := true ;
10492: LD_ADDR_VAR 0 2
10496: PUSH
10497: LD_INT 1
10499: ST_TO_ADDR
// for i := 1 to 8 do
10500: LD_ADDR_VAR 0 1
10504: PUSH
10505: DOUBLE
10506: LD_INT 1
10508: DEC
10509: ST_TO_ADDR
10510: LD_INT 8
10512: PUSH
10513: FOR_TO
10514: IFFALSE 10639
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10516: LD_EXP 9
10520: PUSH
10521: LD_VAR 0 1
10525: ARRAY
10526: IFFALSE 10539
10528: PUSH
10529: LD_VAR 0 1
10533: PPUSH
10534: CALL_OW 108
10538: AND
10539: IFFALSE 10553
10541: PUSH
10542: LD_VAR 0 1
10546: PUSH
10547: LD_OWVAR 2
10551: NONEQUAL
10552: AND
10553: IFFALSE 10637
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10555: LD_EXP 10
10559: PUSH
10560: LD_VAR 0 1
10564: ARRAY
10565: NOT
10566: IFTRUE 10614
10568: PUSH
10569: LD_EXP 10
10573: PUSH
10574: LD_VAR 0 1
10578: ARRAY
10579: PUSH
10580: LD_EXP 10
10584: PUSH
10585: LD_OWVAR 2
10589: ARRAY
10590: NONEQUAL
10591: IFFALSE 10613
10593: PUSH
10594: LD_OWVAR 2
10598: PPUSH
10599: LD_VAR 0 1
10603: PPUSH
10604: CALL_OW 81
10608: PUSH
10609: LD_INT 1
10611: NONEQUAL
10612: AND
10613: OR
10614: IFFALSE 10637
// if HasPower ( i ) then
10616: LD_VAR 0 1
10620: PPUSH
10621: CALL 10698 0 1
10625: IFFALSE 10637
// begin canWin := false ;
10627: LD_ADDR_VAR 0 2
10631: PUSH
10632: LD_INT 0
10634: ST_TO_ADDR
// break ;
10635: GO 10639
// end ;
10637: GO 10513
10639: POP
10640: POP
// if canWin then
10641: LD_VAR 0 2
10645: IFFALSE 10652
// enable ( mpWin ) else
10647: LD_INT 101
10649: ENABLE_MARKED
10650: GO 10653
// enable ;
10652: ENABLE
// end ; end ;
10653: PPOPN 2
10655: END
// function CanWinLoose ; begin
10656: LD_INT 0
10658: PPUSH
// result := true ;
10659: LD_ADDR_VAR 0 1
10663: PUSH
10664: LD_INT 1
10666: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10667: CALL_OW 531
10671: IFFALSE 10683
10673: PUSH
10674: CALL_OW 519
10678: PUSH
10679: LD_INT 1
10681: GREATER
10682: AND
10683: IFFALSE 10693
// result := false ;
10685: LD_ADDR_VAR 0 1
10689: PUSH
10690: LD_INT 0
10692: ST_TO_ADDR
// end ;
10693: LD_VAR 0 1
10697: RET
// function HasPower ( i ) ; begin
10698: LD_INT 0
10700: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10701: LD_INT 22
10703: PUSH
10704: LD_VAR 0 1
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PUSH
10713: LD_INT 2
10715: PUSH
10716: LD_INT 30
10718: PUSH
10719: LD_INT 0
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: LD_INT 30
10728: PUSH
10729: LD_INT 1
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: PPUSH
10745: CALL_OW 69
10749: NOT
10750: IFFALSE 10754
// exit ;
10752: GO 10819
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10754: LD_ADDR_VAR 0 2
10758: PUSH
10759: LD_INT 22
10761: PUSH
10762: LD_VAR 0 1
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: LD_INT 21
10776: PUSH
10777: LD_INT 1
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PUSH
10784: LD_INT 33
10786: PUSH
10787: LD_INT 3
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: LD_INT 33
10796: PUSH
10797: LD_INT 5
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 69
10818: ST_TO_ADDR
// end ; end_of_file
10819: LD_VAR 0 2
10823: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10824: LD_INT 0
10826: PPUSH
10827: PPUSH
// if exist_mode then
10828: LD_VAR 0 2
10832: IFFALSE 10878
// begin unit := CreateCharacter ( prefix & ident ) ;
10834: LD_ADDR_VAR 0 5
10838: PUSH
10839: LD_VAR 0 3
10843: PUSH
10844: LD_VAR 0 1
10848: STR
10849: PPUSH
10850: CALL_OW 34
10854: ST_TO_ADDR
// if unit then
10855: LD_VAR 0 5
10859: IFFALSE 10876
// DeleteCharacters ( prefix & ident ) ;
10861: LD_VAR 0 3
10865: PUSH
10866: LD_VAR 0 1
10870: STR
10871: PPUSH
10872: CALL_OW 40
// end else
10876: GO 10893
// unit := NewCharacter ( ident ) ;
10878: LD_ADDR_VAR 0 5
10882: PUSH
10883: LD_VAR 0 1
10887: PPUSH
10888: CALL_OW 25
10892: ST_TO_ADDR
// result := unit ;
10893: LD_ADDR_VAR 0 4
10897: PUSH
10898: LD_VAR 0 5
10902: ST_TO_ADDR
// end ;
10903: LD_VAR 0 4
10907: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10908: LD_INT 0
10910: PPUSH
10911: PPUSH
// if exist_mode then
10912: LD_VAR 0 2
10916: IFFALSE 10941
// unit := CreateCharacter ( prefix & ident ) else
10918: LD_ADDR_VAR 0 5
10922: PUSH
10923: LD_VAR 0 3
10927: PUSH
10928: LD_VAR 0 1
10932: STR
10933: PPUSH
10934: CALL_OW 34
10938: ST_TO_ADDR
10939: GO 10956
// unit := NewCharacter ( ident ) ;
10941: LD_ADDR_VAR 0 5
10945: PUSH
10946: LD_VAR 0 1
10950: PPUSH
10951: CALL_OW 25
10955: ST_TO_ADDR
// result := unit ;
10956: LD_ADDR_VAR 0 4
10960: PUSH
10961: LD_VAR 0 5
10965: ST_TO_ADDR
// end ;
10966: LD_VAR 0 4
10970: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10971: LD_INT 0
10973: PPUSH
10974: PPUSH
// if not side or not nation then
10975: LD_VAR 0 1
10979: NOT
10980: IFTRUE 10989
10982: PUSH
10983: LD_VAR 0 2
10987: NOT
10988: OR
10989: IFFALSE 10993
// exit ;
10991: GO 11787
// case nation of nation_american :
10993: LD_VAR 0 2
10997: PUSH
10998: LD_INT 1
11000: DOUBLE
11001: EQUAL
11002: IFTRUE 11006
11004: GO 11228
11006: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
11007: LD_ADDR_VAR 0 4
11011: PUSH
11012: LD_INT 35
11014: PUSH
11015: LD_INT 45
11017: PUSH
11018: LD_INT 46
11020: PUSH
11021: LD_INT 47
11023: PUSH
11024: LD_INT 82
11026: PUSH
11027: LD_INT 83
11029: PUSH
11030: LD_INT 84
11032: PUSH
11033: LD_INT 85
11035: PUSH
11036: LD_INT 86
11038: PUSH
11039: LD_INT 1
11041: PUSH
11042: LD_INT 2
11044: PUSH
11045: LD_INT 6
11047: PUSH
11048: LD_INT 15
11050: PUSH
11051: LD_INT 16
11053: PUSH
11054: LD_INT 7
11056: PUSH
11057: LD_INT 12
11059: PUSH
11060: LD_INT 13
11062: PUSH
11063: LD_INT 10
11065: PUSH
11066: LD_INT 14
11068: PUSH
11069: LD_INT 20
11071: PUSH
11072: LD_INT 21
11074: PUSH
11075: LD_INT 22
11077: PUSH
11078: LD_INT 25
11080: PUSH
11081: LD_INT 32
11083: PUSH
11084: LD_INT 27
11086: PUSH
11087: LD_INT 36
11089: PUSH
11090: LD_INT 69
11092: PUSH
11093: LD_INT 39
11095: PUSH
11096: LD_INT 34
11098: PUSH
11099: LD_INT 40
11101: PUSH
11102: LD_INT 48
11104: PUSH
11105: LD_INT 49
11107: PUSH
11108: LD_INT 50
11110: PUSH
11111: LD_INT 51
11113: PUSH
11114: LD_INT 52
11116: PUSH
11117: LD_INT 53
11119: PUSH
11120: LD_INT 54
11122: PUSH
11123: LD_INT 55
11125: PUSH
11126: LD_INT 56
11128: PUSH
11129: LD_INT 57
11131: PUSH
11132: LD_INT 58
11134: PUSH
11135: LD_INT 59
11137: PUSH
11138: LD_INT 60
11140: PUSH
11141: LD_INT 61
11143: PUSH
11144: LD_INT 62
11146: PUSH
11147: LD_INT 80
11149: PUSH
11150: LD_INT 82
11152: PUSH
11153: LD_INT 83
11155: PUSH
11156: LD_INT 84
11158: PUSH
11159: LD_INT 85
11161: PUSH
11162: LD_INT 86
11164: PUSH
11165: LD_INT 90
11167: PUSH
11168: LD_INT 93
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: ST_TO_ADDR
11226: GO 11709
11228: LD_INT 2
11230: DOUBLE
11231: EQUAL
11232: IFTRUE 11236
11234: GO 11470
11236: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11237: LD_ADDR_VAR 0 4
11241: PUSH
11242: LD_INT 35
11244: PUSH
11245: LD_INT 45
11247: PUSH
11248: LD_INT 46
11250: PUSH
11251: LD_INT 47
11253: PUSH
11254: LD_INT 82
11256: PUSH
11257: LD_INT 83
11259: PUSH
11260: LD_INT 84
11262: PUSH
11263: LD_INT 85
11265: PUSH
11266: LD_INT 87
11268: PUSH
11269: LD_INT 70
11271: PUSH
11272: LD_INT 1
11274: PUSH
11275: LD_INT 11
11277: PUSH
11278: LD_INT 3
11280: PUSH
11281: LD_INT 4
11283: PUSH
11284: LD_INT 5
11286: PUSH
11287: LD_INT 6
11289: PUSH
11290: LD_INT 15
11292: PUSH
11293: LD_INT 18
11295: PUSH
11296: LD_INT 7
11298: PUSH
11299: LD_INT 17
11301: PUSH
11302: LD_INT 8
11304: PUSH
11305: LD_INT 20
11307: PUSH
11308: LD_INT 21
11310: PUSH
11311: LD_INT 22
11313: PUSH
11314: LD_INT 72
11316: PUSH
11317: LD_INT 26
11319: PUSH
11320: LD_INT 69
11322: PUSH
11323: LD_INT 39
11325: PUSH
11326: LD_INT 40
11328: PUSH
11329: LD_INT 41
11331: PUSH
11332: LD_INT 42
11334: PUSH
11335: LD_INT 43
11337: PUSH
11338: LD_INT 48
11340: PUSH
11341: LD_INT 49
11343: PUSH
11344: LD_INT 50
11346: PUSH
11347: LD_INT 51
11349: PUSH
11350: LD_INT 52
11352: PUSH
11353: LD_INT 53
11355: PUSH
11356: LD_INT 54
11358: PUSH
11359: LD_INT 55
11361: PUSH
11362: LD_INT 56
11364: PUSH
11365: LD_INT 60
11367: PUSH
11368: LD_INT 61
11370: PUSH
11371: LD_INT 62
11373: PUSH
11374: LD_INT 66
11376: PUSH
11377: LD_INT 67
11379: PUSH
11380: LD_INT 68
11382: PUSH
11383: LD_INT 81
11385: PUSH
11386: LD_INT 82
11388: PUSH
11389: LD_INT 83
11391: PUSH
11392: LD_INT 84
11394: PUSH
11395: LD_INT 85
11397: PUSH
11398: LD_INT 87
11400: PUSH
11401: LD_INT 88
11403: PUSH
11404: LD_INT 92
11406: PUSH
11407: LD_INT 94
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: ST_TO_ADDR
11468: GO 11709
11470: LD_INT 3
11472: DOUBLE
11473: EQUAL
11474: IFTRUE 11478
11476: GO 11708
11478: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11479: LD_ADDR_VAR 0 4
11483: PUSH
11484: LD_INT 46
11486: PUSH
11487: LD_INT 47
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: LD_INT 2
11495: PUSH
11496: LD_INT 82
11498: PUSH
11499: LD_INT 83
11501: PUSH
11502: LD_INT 84
11504: PUSH
11505: LD_INT 85
11507: PUSH
11508: LD_INT 86
11510: PUSH
11511: LD_INT 11
11513: PUSH
11514: LD_INT 9
11516: PUSH
11517: LD_INT 20
11519: PUSH
11520: LD_INT 19
11522: PUSH
11523: LD_INT 21
11525: PUSH
11526: LD_INT 24
11528: PUSH
11529: LD_INT 22
11531: PUSH
11532: LD_INT 25
11534: PUSH
11535: LD_INT 28
11537: PUSH
11538: LD_INT 29
11540: PUSH
11541: LD_INT 30
11543: PUSH
11544: LD_INT 31
11546: PUSH
11547: LD_INT 37
11549: PUSH
11550: LD_INT 38
11552: PUSH
11553: LD_INT 32
11555: PUSH
11556: LD_INT 27
11558: PUSH
11559: LD_INT 33
11561: PUSH
11562: LD_INT 69
11564: PUSH
11565: LD_INT 39
11567: PUSH
11568: LD_INT 34
11570: PUSH
11571: LD_INT 40
11573: PUSH
11574: LD_INT 71
11576: PUSH
11577: LD_INT 23
11579: PUSH
11580: LD_INT 44
11582: PUSH
11583: LD_INT 48
11585: PUSH
11586: LD_INT 49
11588: PUSH
11589: LD_INT 50
11591: PUSH
11592: LD_INT 51
11594: PUSH
11595: LD_INT 52
11597: PUSH
11598: LD_INT 53
11600: PUSH
11601: LD_INT 54
11603: PUSH
11604: LD_INT 55
11606: PUSH
11607: LD_INT 56
11609: PUSH
11610: LD_INT 57
11612: PUSH
11613: LD_INT 58
11615: PUSH
11616: LD_INT 59
11618: PUSH
11619: LD_INT 63
11621: PUSH
11622: LD_INT 64
11624: PUSH
11625: LD_INT 65
11627: PUSH
11628: LD_INT 82
11630: PUSH
11631: LD_INT 83
11633: PUSH
11634: LD_INT 84
11636: PUSH
11637: LD_INT 85
11639: PUSH
11640: LD_INT 86
11642: PUSH
11643: LD_INT 89
11645: PUSH
11646: LD_INT 91
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: ST_TO_ADDR
11706: GO 11709
11708: POP
// if state > - 1 and state < 3 then
11709: LD_VAR 0 3
11713: PUSH
11714: LD_INT 1
11716: NEG
11717: GREATER
11718: IFFALSE 11730
11720: PUSH
11721: LD_VAR 0 3
11725: PUSH
11726: LD_INT 3
11728: LESS
11729: AND
11730: IFFALSE 11787
// for i in result do
11732: LD_ADDR_VAR 0 5
11736: PUSH
11737: LD_VAR 0 4
11741: PUSH
11742: FOR_IN
11743: IFFALSE 11785
// if GetTech ( i , side ) <> state then
11745: LD_VAR 0 5
11749: PPUSH
11750: LD_VAR 0 1
11754: PPUSH
11755: CALL_OW 321
11759: PUSH
11760: LD_VAR 0 3
11764: NONEQUAL
11765: IFFALSE 11783
// result := result diff i ;
11767: LD_ADDR_VAR 0 4
11771: PUSH
11772: LD_VAR 0 4
11776: PUSH
11777: LD_VAR 0 5
11781: DIFF
11782: ST_TO_ADDR
11783: GO 11742
11785: POP
11786: POP
// end ;
11787: LD_VAR 0 4
11791: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11792: LD_INT 0
11794: PPUSH
11795: PPUSH
11796: PPUSH
// result := true ;
11797: LD_ADDR_VAR 0 3
11801: PUSH
11802: LD_INT 1
11804: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11805: LD_ADDR_VAR 0 5
11809: PUSH
11810: LD_VAR 0 2
11814: PPUSH
11815: CALL_OW 480
11819: ST_TO_ADDR
// if not tmp then
11820: LD_VAR 0 5
11824: NOT
11825: IFFALSE 11829
// exit ;
11827: GO 11878
// for i in tmp do
11829: LD_ADDR_VAR 0 4
11833: PUSH
11834: LD_VAR 0 5
11838: PUSH
11839: FOR_IN
11840: IFFALSE 11876
// if GetTech ( i , side ) <> state_researched then
11842: LD_VAR 0 4
11846: PPUSH
11847: LD_VAR 0 1
11851: PPUSH
11852: CALL_OW 321
11856: PUSH
11857: LD_INT 2
11859: NONEQUAL
11860: IFFALSE 11874
// begin result := false ;
11862: LD_ADDR_VAR 0 3
11866: PUSH
11867: LD_INT 0
11869: ST_TO_ADDR
// exit ;
11870: POP
11871: POP
11872: GO 11878
// end ;
11874: GO 11839
11876: POP
11877: POP
// end ;
11878: LD_VAR 0 3
11882: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11883: LD_INT 0
11885: PPUSH
11886: PPUSH
11887: PPUSH
11888: PPUSH
11889: PPUSH
11890: PPUSH
11891: PPUSH
11892: PPUSH
11893: PPUSH
11894: PPUSH
11895: PPUSH
11896: PPUSH
11897: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11898: LD_VAR 0 1
11902: NOT
11903: IFTRUE 11920
11905: PUSH
11906: LD_VAR 0 1
11910: PPUSH
11911: CALL_OW 257
11915: PUSH
11916: LD_INT 9
11918: NONEQUAL
11919: OR
11920: IFFALSE 11924
// exit ;
11922: GO 12503
// side := GetSide ( unit ) ;
11924: LD_ADDR_VAR 0 9
11928: PUSH
11929: LD_VAR 0 1
11933: PPUSH
11934: CALL_OW 255
11938: ST_TO_ADDR
// tech_space := tech_spacanom ;
11939: LD_ADDR_VAR 0 12
11943: PUSH
11944: LD_INT 29
11946: ST_TO_ADDR
// tech_time := tech_taurad ;
11947: LD_ADDR_VAR 0 13
11951: PUSH
11952: LD_INT 28
11954: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11955: LD_ADDR_VAR 0 11
11959: PUSH
11960: LD_VAR 0 1
11964: PPUSH
11965: CALL_OW 310
11969: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11970: LD_VAR 0 11
11974: PPUSH
11975: CALL_OW 247
11979: PUSH
11980: LD_INT 2
11982: EQUAL
11983: IFFALSE 11987
// exit ;
11985: GO 12503
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11987: LD_ADDR_VAR 0 8
11991: PUSH
11992: LD_INT 81
11994: PUSH
11995: LD_VAR 0 9
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 3
12006: PUSH
12007: LD_INT 21
12009: PUSH
12010: LD_INT 3
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PPUSH
12025: CALL_OW 69
12029: ST_TO_ADDR
// if not tmp then
12030: LD_VAR 0 8
12034: NOT
12035: IFFALSE 12039
// exit ;
12037: GO 12503
// if in_unit then
12039: LD_VAR 0 11
12043: IFFALSE 12067
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12045: LD_ADDR_VAR 0 10
12049: PUSH
12050: LD_VAR 0 8
12054: PPUSH
12055: LD_VAR 0 11
12059: PPUSH
12060: CALL_OW 74
12064: ST_TO_ADDR
12065: GO 12087
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12067: LD_ADDR_VAR 0 10
12071: PUSH
12072: LD_VAR 0 8
12076: PPUSH
12077: LD_VAR 0 1
12081: PPUSH
12082: CALL_OW 74
12086: ST_TO_ADDR
// if not enemy then
12087: LD_VAR 0 10
12091: NOT
12092: IFFALSE 12096
// exit ;
12094: GO 12503
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12096: LD_VAR 0 11
12100: IFFALSE 12122
12102: PUSH
12103: LD_VAR 0 11
12107: PPUSH
12108: LD_VAR 0 10
12112: PPUSH
12113: CALL_OW 296
12117: PUSH
12118: LD_INT 13
12120: GREATER
12121: AND
12122: IFTRUE 12144
12124: PUSH
12125: LD_VAR 0 1
12129: PPUSH
12130: LD_VAR 0 10
12134: PPUSH
12135: CALL_OW 296
12139: PUSH
12140: LD_INT 12
12142: GREATER
12143: OR
12144: IFFALSE 12148
// exit ;
12146: GO 12503
// missile := [ 1 ] ;
12148: LD_ADDR_VAR 0 14
12152: PUSH
12153: LD_INT 1
12155: PUSH
12156: EMPTY
12157: LIST
12158: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12159: LD_VAR 0 9
12163: PPUSH
12164: LD_VAR 0 12
12168: PPUSH
12169: CALL_OW 325
12173: IFFALSE 12202
// missile := Replace ( missile , missile + 1 , 2 ) ;
12175: LD_ADDR_VAR 0 14
12179: PUSH
12180: LD_VAR 0 14
12184: PPUSH
12185: LD_VAR 0 14
12189: PUSH
12190: LD_INT 1
12192: PLUS
12193: PPUSH
12194: LD_INT 2
12196: PPUSH
12197: CALL_OW 1
12201: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12202: LD_VAR 0 9
12206: PPUSH
12207: LD_VAR 0 13
12211: PPUSH
12212: CALL_OW 325
12216: IFFALSE 12240
12218: PUSH
12219: LD_VAR 0 10
12223: PPUSH
12224: CALL_OW 255
12228: PPUSH
12229: LD_VAR 0 13
12233: PPUSH
12234: CALL_OW 325
12238: NOT
12239: AND
12240: IFFALSE 12269
// missile := Replace ( missile , missile + 1 , 3 ) ;
12242: LD_ADDR_VAR 0 14
12246: PUSH
12247: LD_VAR 0 14
12251: PPUSH
12252: LD_VAR 0 14
12256: PUSH
12257: LD_INT 1
12259: PLUS
12260: PPUSH
12261: LD_INT 3
12263: PPUSH
12264: CALL_OW 1
12268: ST_TO_ADDR
// if missile < 2 then
12269: LD_VAR 0 14
12273: PUSH
12274: LD_INT 2
12276: LESS
12277: IFFALSE 12281
// exit ;
12279: GO 12503
// x := GetX ( enemy ) ;
12281: LD_ADDR_VAR 0 4
12285: PUSH
12286: LD_VAR 0 10
12290: PPUSH
12291: CALL_OW 250
12295: ST_TO_ADDR
// y := GetY ( enemy ) ;
12296: LD_ADDR_VAR 0 5
12300: PUSH
12301: LD_VAR 0 10
12305: PPUSH
12306: CALL_OW 251
12310: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12311: LD_ADDR_VAR 0 6
12315: PUSH
12316: LD_VAR 0 4
12320: PUSH
12321: LD_INT 1
12323: NEG
12324: PPUSH
12325: LD_INT 1
12327: PPUSH
12328: CALL_OW 12
12332: PLUS
12333: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12334: LD_ADDR_VAR 0 7
12338: PUSH
12339: LD_VAR 0 5
12343: PUSH
12344: LD_INT 1
12346: NEG
12347: PPUSH
12348: LD_INT 1
12350: PPUSH
12351: CALL_OW 12
12355: PLUS
12356: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12357: LD_VAR 0 6
12361: PPUSH
12362: LD_VAR 0 7
12366: PPUSH
12367: CALL_OW 488
12371: NOT
12372: IFFALSE 12394
// begin _x := x ;
12374: LD_ADDR_VAR 0 6
12378: PUSH
12379: LD_VAR 0 4
12383: ST_TO_ADDR
// _y := y ;
12384: LD_ADDR_VAR 0 7
12388: PUSH
12389: LD_VAR 0 5
12393: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12394: LD_ADDR_VAR 0 3
12398: PUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_VAR 0 14
12406: PPUSH
12407: CALL_OW 12
12411: ST_TO_ADDR
// case i of 1 :
12412: LD_VAR 0 3
12416: PUSH
12417: LD_INT 1
12419: DOUBLE
12420: EQUAL
12421: IFTRUE 12425
12423: GO 12442
12425: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12426: LD_VAR 0 1
12430: PPUSH
12431: LD_VAR 0 10
12435: PPUSH
12436: CALL_OW 115
12440: GO 12503
12442: LD_INT 2
12444: DOUBLE
12445: EQUAL
12446: IFTRUE 12450
12448: GO 12472
12450: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12451: LD_VAR 0 1
12455: PPUSH
12456: LD_VAR 0 6
12460: PPUSH
12461: LD_VAR 0 7
12465: PPUSH
12466: CALL_OW 153
12470: GO 12503
12472: LD_INT 3
12474: DOUBLE
12475: EQUAL
12476: IFTRUE 12480
12478: GO 12502
12480: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12481: LD_VAR 0 1
12485: PPUSH
12486: LD_VAR 0 6
12490: PPUSH
12491: LD_VAR 0 7
12495: PPUSH
12496: CALL_OW 154
12500: GO 12503
12502: POP
// end ;
12503: LD_VAR 0 2
12507: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12508: LD_INT 0
12510: PPUSH
12511: PPUSH
12512: PPUSH
12513: PPUSH
12514: PPUSH
12515: PPUSH
// if not unit or not building then
12516: LD_VAR 0 1
12520: NOT
12521: IFTRUE 12530
12523: PUSH
12524: LD_VAR 0 2
12528: NOT
12529: OR
12530: IFFALSE 12534
// exit ;
12532: GO 12692
// x := GetX ( building ) ;
12534: LD_ADDR_VAR 0 5
12538: PUSH
12539: LD_VAR 0 2
12543: PPUSH
12544: CALL_OW 250
12548: ST_TO_ADDR
// y := GetY ( building ) ;
12549: LD_ADDR_VAR 0 6
12553: PUSH
12554: LD_VAR 0 2
12558: PPUSH
12559: CALL_OW 251
12563: ST_TO_ADDR
// for i := 0 to 5 do
12564: LD_ADDR_VAR 0 4
12568: PUSH
12569: DOUBLE
12570: LD_INT 0
12572: DEC
12573: ST_TO_ADDR
12574: LD_INT 5
12576: PUSH
12577: FOR_TO
12578: IFFALSE 12690
// begin _x := ShiftX ( x , i , 3 ) ;
12580: LD_ADDR_VAR 0 7
12584: PUSH
12585: LD_VAR 0 5
12589: PPUSH
12590: LD_VAR 0 4
12594: PPUSH
12595: LD_INT 3
12597: PPUSH
12598: CALL_OW 272
12602: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12603: LD_ADDR_VAR 0 8
12607: PUSH
12608: LD_VAR 0 6
12612: PPUSH
12613: LD_VAR 0 4
12617: PPUSH
12618: LD_INT 3
12620: PPUSH
12621: CALL_OW 273
12625: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12626: LD_VAR 0 7
12630: PPUSH
12631: LD_VAR 0 8
12635: PPUSH
12636: CALL_OW 488
12640: NOT
12641: IFFALSE 12645
// continue ;
12643: GO 12577
// if HexInfo ( _x , _y ) = 0 then
12645: LD_VAR 0 7
12649: PPUSH
12650: LD_VAR 0 8
12654: PPUSH
12655: CALL_OW 428
12659: PUSH
12660: LD_INT 0
12662: EQUAL
12663: IFFALSE 12688
// begin ComMoveXY ( unit , _x , _y ) ;
12665: LD_VAR 0 1
12669: PPUSH
12670: LD_VAR 0 7
12674: PPUSH
12675: LD_VAR 0 8
12679: PPUSH
12680: CALL_OW 111
// exit ;
12684: POP
12685: POP
12686: GO 12692
// end ; end ;
12688: GO 12577
12690: POP
12691: POP
// end ;
12692: LD_VAR 0 3
12696: RET
// export function ScanBase ( side , base_area ) ; begin
12697: LD_INT 0
12699: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12700: LD_ADDR_VAR 0 3
12704: PUSH
12705: LD_VAR 0 2
12709: PPUSH
12710: LD_INT 81
12712: PUSH
12713: LD_VAR 0 1
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PPUSH
12722: CALL_OW 70
12726: ST_TO_ADDR
// end ;
12727: LD_VAR 0 3
12731: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12732: LD_INT 0
12734: PPUSH
12735: PPUSH
12736: PPUSH
12737: PPUSH
// result := false ;
12738: LD_ADDR_VAR 0 2
12742: PUSH
12743: LD_INT 0
12745: ST_TO_ADDR
// side := GetSide ( unit ) ;
12746: LD_ADDR_VAR 0 3
12750: PUSH
12751: LD_VAR 0 1
12755: PPUSH
12756: CALL_OW 255
12760: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12761: LD_ADDR_VAR 0 4
12765: PUSH
12766: LD_VAR 0 1
12770: PPUSH
12771: CALL_OW 248
12775: ST_TO_ADDR
// case nat of 1 :
12776: LD_VAR 0 4
12780: PUSH
12781: LD_INT 1
12783: DOUBLE
12784: EQUAL
12785: IFTRUE 12789
12787: GO 12800
12789: POP
// tech := tech_lassight ; 2 :
12790: LD_ADDR_VAR 0 5
12794: PUSH
12795: LD_INT 12
12797: ST_TO_ADDR
12798: GO 12839
12800: LD_INT 2
12802: DOUBLE
12803: EQUAL
12804: IFTRUE 12808
12806: GO 12819
12808: POP
// tech := tech_mortar ; 3 :
12809: LD_ADDR_VAR 0 5
12813: PUSH
12814: LD_INT 41
12816: ST_TO_ADDR
12817: GO 12839
12819: LD_INT 3
12821: DOUBLE
12822: EQUAL
12823: IFTRUE 12827
12825: GO 12838
12827: POP
// tech := tech_bazooka ; end ;
12828: LD_ADDR_VAR 0 5
12832: PUSH
12833: LD_INT 44
12835: ST_TO_ADDR
12836: GO 12839
12838: POP
// if Researched ( side , tech ) then
12839: LD_VAR 0 3
12843: PPUSH
12844: LD_VAR 0 5
12848: PPUSH
12849: CALL_OW 325
12853: IFFALSE 12880
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12855: LD_ADDR_VAR 0 2
12859: PUSH
12860: LD_INT 5
12862: PUSH
12863: LD_INT 8
12865: PUSH
12866: LD_INT 9
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: LIST
12873: PUSH
12874: LD_VAR 0 4
12878: ARRAY
12879: ST_TO_ADDR
// end ;
12880: LD_VAR 0 2
12884: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12885: LD_INT 0
12887: PPUSH
12888: PPUSH
12889: PPUSH
// if not mines then
12890: LD_VAR 0 2
12894: NOT
12895: IFFALSE 12899
// exit ;
12897: GO 13043
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12899: LD_ADDR_VAR 0 5
12903: PUSH
12904: LD_INT 81
12906: PUSH
12907: LD_VAR 0 1
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: LD_INT 3
12918: PUSH
12919: LD_INT 21
12921: PUSH
12922: LD_INT 3
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PPUSH
12937: CALL_OW 69
12941: ST_TO_ADDR
// for i in mines do
12942: LD_ADDR_VAR 0 4
12946: PUSH
12947: LD_VAR 0 2
12951: PUSH
12952: FOR_IN
12953: IFFALSE 13041
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12955: LD_VAR 0 4
12959: PUSH
12960: LD_INT 1
12962: ARRAY
12963: PPUSH
12964: LD_VAR 0 4
12968: PUSH
12969: LD_INT 2
12971: ARRAY
12972: PPUSH
12973: CALL_OW 458
12977: NOT
12978: IFFALSE 12982
// continue ;
12980: GO 12952
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12982: LD_VAR 0 4
12986: PUSH
12987: LD_INT 1
12989: ARRAY
12990: PPUSH
12991: LD_VAR 0 4
12995: PUSH
12996: LD_INT 2
12998: ARRAY
12999: PPUSH
13000: CALL_OW 428
13004: PUSH
13005: LD_VAR 0 5
13009: IN
13010: IFFALSE 13039
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13012: LD_VAR 0 4
13016: PUSH
13017: LD_INT 1
13019: ARRAY
13020: PPUSH
13021: LD_VAR 0 4
13025: PUSH
13026: LD_INT 2
13028: ARRAY
13029: PPUSH
13030: LD_VAR 0 1
13034: PPUSH
13035: CALL_OW 456
// end ;
13039: GO 12952
13041: POP
13042: POP
// end ;
13043: LD_VAR 0 3
13047: RET
// export function Count ( array ) ; begin
13048: LD_INT 0
13050: PPUSH
// result := array + 0 ;
13051: LD_ADDR_VAR 0 2
13055: PUSH
13056: LD_VAR 0 1
13060: PUSH
13061: LD_INT 0
13063: PLUS
13064: ST_TO_ADDR
// end ;
13065: LD_VAR 0 2
13069: RET
// export function IsEmpty ( building ) ; begin
13070: LD_INT 0
13072: PPUSH
// if not building then
13073: LD_VAR 0 1
13077: NOT
13078: IFFALSE 13082
// exit ;
13080: GO 13125
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13082: LD_ADDR_VAR 0 2
13086: PUSH
13087: LD_VAR 0 1
13091: PUSH
13092: LD_INT 22
13094: PUSH
13095: LD_VAR 0 1
13099: PPUSH
13100: CALL_OW 255
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 58
13111: PUSH
13112: EMPTY
13113: LIST
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PPUSH
13119: CALL_OW 69
13123: IN
13124: ST_TO_ADDR
// end ;
13125: LD_VAR 0 2
13129: RET
// export function IsNotFull ( building ) ; var places ; begin
13130: LD_INT 0
13132: PPUSH
13133: PPUSH
// if not building then
13134: LD_VAR 0 1
13138: NOT
13139: IFFALSE 13143
// exit ;
13141: GO 13171
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13143: LD_ADDR_VAR 0 2
13147: PUSH
13148: LD_VAR 0 1
13152: PPUSH
13153: LD_INT 3
13155: PUSH
13156: LD_INT 62
13158: PUSH
13159: EMPTY
13160: LIST
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PPUSH
13166: CALL_OW 72
13170: ST_TO_ADDR
// end ;
13171: LD_VAR 0 2
13175: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13176: LD_INT 0
13178: PPUSH
13179: PPUSH
13180: PPUSH
13181: PPUSH
// tmp := [ ] ;
13182: LD_ADDR_VAR 0 3
13186: PUSH
13187: EMPTY
13188: ST_TO_ADDR
// list := [ ] ;
13189: LD_ADDR_VAR 0 5
13193: PUSH
13194: EMPTY
13195: ST_TO_ADDR
// for i = 16 to 25 do
13196: LD_ADDR_VAR 0 4
13200: PUSH
13201: DOUBLE
13202: LD_INT 16
13204: DEC
13205: ST_TO_ADDR
13206: LD_INT 25
13208: PUSH
13209: FOR_TO
13210: IFFALSE 13283
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13212: LD_ADDR_VAR 0 3
13216: PUSH
13217: LD_VAR 0 3
13221: PUSH
13222: LD_INT 22
13224: PUSH
13225: LD_VAR 0 1
13229: PPUSH
13230: CALL_OW 255
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: PUSH
13239: LD_INT 91
13241: PUSH
13242: LD_VAR 0 1
13246: PUSH
13247: LD_INT 6
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 30
13257: PUSH
13258: LD_VAR 0 4
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: LIST
13271: PUSH
13272: EMPTY
13273: LIST
13274: PPUSH
13275: CALL_OW 69
13279: ADD
13280: ST_TO_ADDR
13281: GO 13209
13283: POP
13284: POP
// for i = 1 to tmp do
13285: LD_ADDR_VAR 0 4
13289: PUSH
13290: DOUBLE
13291: LD_INT 1
13293: DEC
13294: ST_TO_ADDR
13295: LD_VAR 0 3
13299: PUSH
13300: FOR_TO
13301: IFFALSE 13389
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13303: LD_ADDR_VAR 0 5
13307: PUSH
13308: LD_VAR 0 5
13312: PUSH
13313: LD_VAR 0 3
13317: PUSH
13318: LD_VAR 0 4
13322: ARRAY
13323: PPUSH
13324: CALL_OW 266
13328: PUSH
13329: LD_VAR 0 3
13333: PUSH
13334: LD_VAR 0 4
13338: ARRAY
13339: PPUSH
13340: CALL_OW 250
13344: PUSH
13345: LD_VAR 0 3
13349: PUSH
13350: LD_VAR 0 4
13354: ARRAY
13355: PPUSH
13356: CALL_OW 251
13360: PUSH
13361: LD_VAR 0 3
13365: PUSH
13366: LD_VAR 0 4
13370: ARRAY
13371: PPUSH
13372: CALL_OW 254
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: PUSH
13383: EMPTY
13384: LIST
13385: ADD
13386: ST_TO_ADDR
13387: GO 13300
13389: POP
13390: POP
// result := list ;
13391: LD_ADDR_VAR 0 2
13395: PUSH
13396: LD_VAR 0 5
13400: ST_TO_ADDR
// end ;
13401: LD_VAR 0 2
13405: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13406: LD_INT 0
13408: PPUSH
13409: PPUSH
13410: PPUSH
13411: PPUSH
13412: PPUSH
13413: PPUSH
13414: PPUSH
// if not factory then
13415: LD_VAR 0 1
13419: NOT
13420: IFFALSE 13424
// exit ;
13422: GO 14027
// if control = control_apeman then
13424: LD_VAR 0 4
13428: PUSH
13429: LD_INT 5
13431: EQUAL
13432: IFFALSE 13541
// begin tmp := UnitsInside ( factory ) ;
13434: LD_ADDR_VAR 0 8
13438: PUSH
13439: LD_VAR 0 1
13443: PPUSH
13444: CALL_OW 313
13448: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13449: LD_VAR 0 8
13453: PPUSH
13454: LD_INT 25
13456: PUSH
13457: LD_INT 12
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PPUSH
13464: CALL_OW 72
13468: NOT
13469: IFFALSE 13479
// control := control_manual ;
13471: LD_ADDR_VAR 0 4
13475: PUSH
13476: LD_INT 1
13478: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13479: LD_ADDR_VAR 0 8
13483: PUSH
13484: LD_VAR 0 1
13488: PPUSH
13489: CALL 13176 0 1
13493: ST_TO_ADDR
// if tmp then
13494: LD_VAR 0 8
13498: IFFALSE 13541
// begin for i in tmp do
13500: LD_ADDR_VAR 0 7
13504: PUSH
13505: LD_VAR 0 8
13509: PUSH
13510: FOR_IN
13511: IFFALSE 13539
// if i [ 1 ] = b_ext_radio then
13513: LD_VAR 0 7
13517: PUSH
13518: LD_INT 1
13520: ARRAY
13521: PUSH
13522: LD_INT 22
13524: EQUAL
13525: IFFALSE 13537
// begin control := control_remote ;
13527: LD_ADDR_VAR 0 4
13531: PUSH
13532: LD_INT 2
13534: ST_TO_ADDR
// break ;
13535: GO 13539
// end ;
13537: GO 13510
13539: POP
13540: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13541: LD_VAR 0 1
13545: PPUSH
13546: LD_VAR 0 2
13550: PPUSH
13551: LD_VAR 0 3
13555: PPUSH
13556: LD_VAR 0 4
13560: PPUSH
13561: LD_VAR 0 5
13565: PPUSH
13566: CALL_OW 448
13570: IFFALSE 13605
// begin result := [ chassis , engine , control , weapon ] ;
13572: LD_ADDR_VAR 0 6
13576: PUSH
13577: LD_VAR 0 2
13581: PUSH
13582: LD_VAR 0 3
13586: PUSH
13587: LD_VAR 0 4
13591: PUSH
13592: LD_VAR 0 5
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: ST_TO_ADDR
// exit ;
13603: GO 14027
// end ; _chassis := AvailableChassisList ( factory ) ;
13605: LD_ADDR_VAR 0 9
13609: PUSH
13610: LD_VAR 0 1
13614: PPUSH
13615: CALL_OW 475
13619: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13620: LD_ADDR_VAR 0 11
13624: PUSH
13625: LD_VAR 0 1
13629: PPUSH
13630: CALL_OW 476
13634: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13635: LD_ADDR_VAR 0 12
13639: PUSH
13640: LD_VAR 0 1
13644: PPUSH
13645: CALL_OW 477
13649: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13650: LD_ADDR_VAR 0 10
13654: PUSH
13655: LD_VAR 0 1
13659: PPUSH
13660: CALL_OW 478
13664: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13665: LD_VAR 0 9
13669: NOT
13670: IFTRUE 13679
13672: PUSH
13673: LD_VAR 0 11
13677: NOT
13678: OR
13679: IFTRUE 13688
13681: PUSH
13682: LD_VAR 0 12
13686: NOT
13687: OR
13688: IFTRUE 13697
13690: PUSH
13691: LD_VAR 0 10
13695: NOT
13696: OR
13697: IFFALSE 13732
// begin result := [ chassis , engine , control , weapon ] ;
13699: LD_ADDR_VAR 0 6
13703: PUSH
13704: LD_VAR 0 2
13708: PUSH
13709: LD_VAR 0 3
13713: PUSH
13714: LD_VAR 0 4
13718: PUSH
13719: LD_VAR 0 5
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: ST_TO_ADDR
// exit ;
13730: GO 14027
// end ; if not chassis in _chassis then
13732: LD_VAR 0 2
13736: PUSH
13737: LD_VAR 0 9
13741: IN
13742: NOT
13743: IFFALSE 13769
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13745: LD_ADDR_VAR 0 2
13749: PUSH
13750: LD_VAR 0 9
13754: PUSH
13755: LD_INT 1
13757: PPUSH
13758: LD_VAR 0 9
13762: PPUSH
13763: CALL_OW 12
13767: ARRAY
13768: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13769: LD_VAR 0 2
13773: PPUSH
13774: LD_VAR 0 3
13778: PPUSH
13779: CALL 14032 0 2
13783: NOT
13784: IFFALSE 13845
// repeat engine := _engine [ 1 ] ;
13786: LD_ADDR_VAR 0 3
13790: PUSH
13791: LD_VAR 0 11
13795: PUSH
13796: LD_INT 1
13798: ARRAY
13799: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13800: LD_ADDR_VAR 0 11
13804: PUSH
13805: LD_VAR 0 11
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 3
13817: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13818: LD_VAR 0 2
13822: PPUSH
13823: LD_VAR 0 3
13827: PPUSH
13828: CALL 14032 0 2
13832: IFTRUE 13843
13834: PUSH
13835: LD_VAR 0 11
13839: PUSH
13840: EMPTY
13841: EQUAL
13842: OR
13843: IFFALSE 13786
// if not control in _control then
13845: LD_VAR 0 4
13849: PUSH
13850: LD_VAR 0 12
13854: IN
13855: NOT
13856: IFFALSE 13882
// control := _control [ rand ( 1 , _control ) ] ;
13858: LD_ADDR_VAR 0 4
13862: PUSH
13863: LD_VAR 0 12
13867: PUSH
13868: LD_INT 1
13870: PPUSH
13871: LD_VAR 0 12
13875: PPUSH
13876: CALL_OW 12
13880: ARRAY
13881: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13882: LD_VAR 0 2
13886: PPUSH
13887: LD_VAR 0 5
13891: PPUSH
13892: CALL 14254 0 2
13896: NOT
13897: IFFALSE 13958
// repeat weapon := _weapon [ 1 ] ;
13899: LD_ADDR_VAR 0 5
13903: PUSH
13904: LD_VAR 0 10
13908: PUSH
13909: LD_INT 1
13911: ARRAY
13912: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13913: LD_ADDR_VAR 0 10
13917: PUSH
13918: LD_VAR 0 10
13922: PPUSH
13923: LD_INT 1
13925: PPUSH
13926: CALL_OW 3
13930: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13931: LD_VAR 0 2
13935: PPUSH
13936: LD_VAR 0 5
13940: PPUSH
13941: CALL 14254 0 2
13945: IFTRUE 13956
13947: PUSH
13948: LD_VAR 0 10
13952: PUSH
13953: EMPTY
13954: EQUAL
13955: OR
13956: IFFALSE 13899
// result := [ ] ;
13958: LD_ADDR_VAR 0 6
13962: PUSH
13963: EMPTY
13964: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13965: LD_VAR 0 1
13969: PPUSH
13970: LD_VAR 0 2
13974: PPUSH
13975: LD_VAR 0 3
13979: PPUSH
13980: LD_VAR 0 4
13984: PPUSH
13985: LD_VAR 0 5
13989: PPUSH
13990: CALL_OW 448
13994: IFFALSE 14027
// result := [ chassis , engine , control , weapon ] ;
13996: LD_ADDR_VAR 0 6
14000: PUSH
14001: LD_VAR 0 2
14005: PUSH
14006: LD_VAR 0 3
14010: PUSH
14011: LD_VAR 0 4
14015: PUSH
14016: LD_VAR 0 5
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: ST_TO_ADDR
// end ;
14027: LD_VAR 0 6
14031: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14032: LD_INT 0
14034: PPUSH
// if not chassis or not engine then
14035: LD_VAR 0 1
14039: NOT
14040: IFTRUE 14049
14042: PUSH
14043: LD_VAR 0 2
14047: NOT
14048: OR
14049: IFFALSE 14053
// exit ;
14051: GO 14249
// case engine of engine_solar :
14053: LD_VAR 0 2
14057: PUSH
14058: LD_INT 2
14060: DOUBLE
14061: EQUAL
14062: IFTRUE 14066
14064: GO 14104
14066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14067: LD_ADDR_VAR 0 3
14071: PUSH
14072: LD_INT 11
14074: PUSH
14075: LD_INT 12
14077: PUSH
14078: LD_INT 13
14080: PUSH
14081: LD_INT 14
14083: PUSH
14084: LD_INT 1
14086: PUSH
14087: LD_INT 2
14089: PUSH
14090: LD_INT 3
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: ST_TO_ADDR
14102: GO 14233
14104: LD_INT 1
14106: DOUBLE
14107: EQUAL
14108: IFTRUE 14112
14110: GO 14174
14112: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14113: LD_ADDR_VAR 0 3
14117: PUSH
14118: LD_INT 11
14120: PUSH
14121: LD_INT 12
14123: PUSH
14124: LD_INT 13
14126: PUSH
14127: LD_INT 14
14129: PUSH
14130: LD_INT 1
14132: PUSH
14133: LD_INT 2
14135: PUSH
14136: LD_INT 3
14138: PUSH
14139: LD_INT 4
14141: PUSH
14142: LD_INT 5
14144: PUSH
14145: LD_INT 21
14147: PUSH
14148: LD_INT 23
14150: PUSH
14151: LD_INT 22
14153: PUSH
14154: LD_INT 24
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: ST_TO_ADDR
14172: GO 14233
14174: LD_INT 3
14176: DOUBLE
14177: EQUAL
14178: IFTRUE 14182
14180: GO 14232
14182: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14183: LD_ADDR_VAR 0 3
14187: PUSH
14188: LD_INT 13
14190: PUSH
14191: LD_INT 14
14193: PUSH
14194: LD_INT 2
14196: PUSH
14197: LD_INT 3
14199: PUSH
14200: LD_INT 4
14202: PUSH
14203: LD_INT 5
14205: PUSH
14206: LD_INT 21
14208: PUSH
14209: LD_INT 22
14211: PUSH
14212: LD_INT 23
14214: PUSH
14215: LD_INT 24
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: ST_TO_ADDR
14230: GO 14233
14232: POP
// result := ( chassis in result ) ;
14233: LD_ADDR_VAR 0 3
14237: PUSH
14238: LD_VAR 0 1
14242: PUSH
14243: LD_VAR 0 3
14247: IN
14248: ST_TO_ADDR
// end ;
14249: LD_VAR 0 3
14253: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14254: LD_INT 0
14256: PPUSH
// if not chassis or not weapon then
14257: LD_VAR 0 1
14261: NOT
14262: IFTRUE 14271
14264: PUSH
14265: LD_VAR 0 2
14269: NOT
14270: OR
14271: IFFALSE 14275
// exit ;
14273: GO 15369
// case weapon of us_machine_gun :
14275: LD_VAR 0 2
14279: PUSH
14280: LD_INT 2
14282: DOUBLE
14283: EQUAL
14284: IFTRUE 14288
14286: GO 14318
14288: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14289: LD_ADDR_VAR 0 3
14293: PUSH
14294: LD_INT 1
14296: PUSH
14297: LD_INT 2
14299: PUSH
14300: LD_INT 3
14302: PUSH
14303: LD_INT 4
14305: PUSH
14306: LD_INT 5
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: ST_TO_ADDR
14316: GO 15353
14318: LD_INT 3
14320: DOUBLE
14321: EQUAL
14322: IFTRUE 14326
14324: GO 14356
14326: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14327: LD_ADDR_VAR 0 3
14331: PUSH
14332: LD_INT 1
14334: PUSH
14335: LD_INT 2
14337: PUSH
14338: LD_INT 3
14340: PUSH
14341: LD_INT 4
14343: PUSH
14344: LD_INT 5
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: ST_TO_ADDR
14354: GO 15353
14356: LD_INT 11
14358: DOUBLE
14359: EQUAL
14360: IFTRUE 14364
14362: GO 14394
14364: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14365: LD_ADDR_VAR 0 3
14369: PUSH
14370: LD_INT 1
14372: PUSH
14373: LD_INT 2
14375: PUSH
14376: LD_INT 3
14378: PUSH
14379: LD_INT 4
14381: PUSH
14382: LD_INT 5
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: ST_TO_ADDR
14392: GO 15353
14394: LD_INT 4
14396: DOUBLE
14397: EQUAL
14398: IFTRUE 14402
14400: GO 14428
14402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14403: LD_ADDR_VAR 0 3
14407: PUSH
14408: LD_INT 2
14410: PUSH
14411: LD_INT 3
14413: PUSH
14414: LD_INT 4
14416: PUSH
14417: LD_INT 5
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: ST_TO_ADDR
14426: GO 15353
14428: LD_INT 5
14430: DOUBLE
14431: EQUAL
14432: IFTRUE 14436
14434: GO 14462
14436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14437: LD_ADDR_VAR 0 3
14441: PUSH
14442: LD_INT 2
14444: PUSH
14445: LD_INT 3
14447: PUSH
14448: LD_INT 4
14450: PUSH
14451: LD_INT 5
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: ST_TO_ADDR
14460: GO 15353
14462: LD_INT 9
14464: DOUBLE
14465: EQUAL
14466: IFTRUE 14470
14468: GO 14496
14470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14471: LD_ADDR_VAR 0 3
14475: PUSH
14476: LD_INT 2
14478: PUSH
14479: LD_INT 3
14481: PUSH
14482: LD_INT 4
14484: PUSH
14485: LD_INT 5
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: ST_TO_ADDR
14494: GO 15353
14496: LD_INT 7
14498: DOUBLE
14499: EQUAL
14500: IFTRUE 14504
14502: GO 14530
14504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14505: LD_ADDR_VAR 0 3
14509: PUSH
14510: LD_INT 2
14512: PUSH
14513: LD_INT 3
14515: PUSH
14516: LD_INT 4
14518: PUSH
14519: LD_INT 5
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: ST_TO_ADDR
14528: GO 15353
14530: LD_INT 12
14532: DOUBLE
14533: EQUAL
14534: IFTRUE 14538
14536: GO 14564
14538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14539: LD_ADDR_VAR 0 3
14543: PUSH
14544: LD_INT 2
14546: PUSH
14547: LD_INT 3
14549: PUSH
14550: LD_INT 4
14552: PUSH
14553: LD_INT 5
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: ST_TO_ADDR
14562: GO 15353
14564: LD_INT 13
14566: DOUBLE
14567: EQUAL
14568: IFTRUE 14572
14570: GO 14598
14572: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14573: LD_ADDR_VAR 0 3
14577: PUSH
14578: LD_INT 2
14580: PUSH
14581: LD_INT 3
14583: PUSH
14584: LD_INT 4
14586: PUSH
14587: LD_INT 5
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: ST_TO_ADDR
14596: GO 15353
14598: LD_INT 14
14600: DOUBLE
14601: EQUAL
14602: IFTRUE 14606
14604: GO 14624
14606: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14607: LD_ADDR_VAR 0 3
14611: PUSH
14612: LD_INT 4
14614: PUSH
14615: LD_INT 5
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: ST_TO_ADDR
14622: GO 15353
14624: LD_INT 6
14626: DOUBLE
14627: EQUAL
14628: IFTRUE 14632
14630: GO 14650
14632: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14633: LD_ADDR_VAR 0 3
14637: PUSH
14638: LD_INT 4
14640: PUSH
14641: LD_INT 5
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: ST_TO_ADDR
14648: GO 15353
14650: LD_INT 10
14652: DOUBLE
14653: EQUAL
14654: IFTRUE 14658
14656: GO 14676
14658: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14659: LD_ADDR_VAR 0 3
14663: PUSH
14664: LD_INT 4
14666: PUSH
14667: LD_INT 5
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: ST_TO_ADDR
14674: GO 15353
14676: LD_INT 22
14678: DOUBLE
14679: EQUAL
14680: IFTRUE 14684
14682: GO 14710
14684: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14685: LD_ADDR_VAR 0 3
14689: PUSH
14690: LD_INT 11
14692: PUSH
14693: LD_INT 12
14695: PUSH
14696: LD_INT 13
14698: PUSH
14699: LD_INT 14
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: ST_TO_ADDR
14708: GO 15353
14710: LD_INT 23
14712: DOUBLE
14713: EQUAL
14714: IFTRUE 14718
14716: GO 14744
14718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14719: LD_ADDR_VAR 0 3
14723: PUSH
14724: LD_INT 11
14726: PUSH
14727: LD_INT 12
14729: PUSH
14730: LD_INT 13
14732: PUSH
14733: LD_INT 14
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: ST_TO_ADDR
14742: GO 15353
14744: LD_INT 24
14746: DOUBLE
14747: EQUAL
14748: IFTRUE 14752
14750: GO 14778
14752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14753: LD_ADDR_VAR 0 3
14757: PUSH
14758: LD_INT 11
14760: PUSH
14761: LD_INT 12
14763: PUSH
14764: LD_INT 13
14766: PUSH
14767: LD_INT 14
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: ST_TO_ADDR
14776: GO 15353
14778: LD_INT 30
14780: DOUBLE
14781: EQUAL
14782: IFTRUE 14786
14784: GO 14812
14786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14787: LD_ADDR_VAR 0 3
14791: PUSH
14792: LD_INT 11
14794: PUSH
14795: LD_INT 12
14797: PUSH
14798: LD_INT 13
14800: PUSH
14801: LD_INT 14
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: ST_TO_ADDR
14810: GO 15353
14812: LD_INT 25
14814: DOUBLE
14815: EQUAL
14816: IFTRUE 14820
14818: GO 14838
14820: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14821: LD_ADDR_VAR 0 3
14825: PUSH
14826: LD_INT 13
14828: PUSH
14829: LD_INT 14
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: ST_TO_ADDR
14836: GO 15353
14838: LD_INT 27
14840: DOUBLE
14841: EQUAL
14842: IFTRUE 14846
14844: GO 14864
14846: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14847: LD_ADDR_VAR 0 3
14851: PUSH
14852: LD_INT 13
14854: PUSH
14855: LD_INT 14
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: ST_TO_ADDR
14862: GO 15353
14864: LD_INT 92
14866: DOUBLE
14867: EQUAL
14868: IFTRUE 14872
14870: GO 14898
14872: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14873: LD_ADDR_VAR 0 3
14877: PUSH
14878: LD_INT 11
14880: PUSH
14881: LD_INT 12
14883: PUSH
14884: LD_INT 13
14886: PUSH
14887: LD_INT 14
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: ST_TO_ADDR
14896: GO 15353
14898: LD_INT 28
14900: DOUBLE
14901: EQUAL
14902: IFTRUE 14906
14904: GO 14924
14906: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14907: LD_ADDR_VAR 0 3
14911: PUSH
14912: LD_INT 13
14914: PUSH
14915: LD_INT 14
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: ST_TO_ADDR
14922: GO 15353
14924: LD_INT 29
14926: DOUBLE
14927: EQUAL
14928: IFTRUE 14932
14930: GO 14950
14932: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14933: LD_ADDR_VAR 0 3
14937: PUSH
14938: LD_INT 13
14940: PUSH
14941: LD_INT 14
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: ST_TO_ADDR
14948: GO 15353
14950: LD_INT 31
14952: DOUBLE
14953: EQUAL
14954: IFTRUE 14958
14956: GO 14976
14958: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14959: LD_ADDR_VAR 0 3
14963: PUSH
14964: LD_INT 13
14966: PUSH
14967: LD_INT 14
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: ST_TO_ADDR
14974: GO 15353
14976: LD_INT 26
14978: DOUBLE
14979: EQUAL
14980: IFTRUE 14984
14982: GO 15002
14984: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14985: LD_ADDR_VAR 0 3
14989: PUSH
14990: LD_INT 13
14992: PUSH
14993: LD_INT 14
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: ST_TO_ADDR
15000: GO 15353
15002: LD_INT 42
15004: DOUBLE
15005: EQUAL
15006: IFTRUE 15010
15008: GO 15036
15010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15011: LD_ADDR_VAR 0 3
15015: PUSH
15016: LD_INT 21
15018: PUSH
15019: LD_INT 22
15021: PUSH
15022: LD_INT 23
15024: PUSH
15025: LD_INT 24
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: ST_TO_ADDR
15034: GO 15353
15036: LD_INT 43
15038: DOUBLE
15039: EQUAL
15040: IFTRUE 15044
15042: GO 15070
15044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15045: LD_ADDR_VAR 0 3
15049: PUSH
15050: LD_INT 21
15052: PUSH
15053: LD_INT 22
15055: PUSH
15056: LD_INT 23
15058: PUSH
15059: LD_INT 24
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: ST_TO_ADDR
15068: GO 15353
15070: LD_INT 44
15072: DOUBLE
15073: EQUAL
15074: IFTRUE 15078
15076: GO 15104
15078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15079: LD_ADDR_VAR 0 3
15083: PUSH
15084: LD_INT 21
15086: PUSH
15087: LD_INT 22
15089: PUSH
15090: LD_INT 23
15092: PUSH
15093: LD_INT 24
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: ST_TO_ADDR
15102: GO 15353
15104: LD_INT 45
15106: DOUBLE
15107: EQUAL
15108: IFTRUE 15112
15110: GO 15138
15112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15113: LD_ADDR_VAR 0 3
15117: PUSH
15118: LD_INT 21
15120: PUSH
15121: LD_INT 22
15123: PUSH
15124: LD_INT 23
15126: PUSH
15127: LD_INT 24
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: ST_TO_ADDR
15136: GO 15353
15138: LD_INT 49
15140: DOUBLE
15141: EQUAL
15142: IFTRUE 15146
15144: GO 15172
15146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15147: LD_ADDR_VAR 0 3
15151: PUSH
15152: LD_INT 21
15154: PUSH
15155: LD_INT 22
15157: PUSH
15158: LD_INT 23
15160: PUSH
15161: LD_INT 24
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: ST_TO_ADDR
15170: GO 15353
15172: LD_INT 51
15174: DOUBLE
15175: EQUAL
15176: IFTRUE 15180
15178: GO 15206
15180: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15181: LD_ADDR_VAR 0 3
15185: PUSH
15186: LD_INT 21
15188: PUSH
15189: LD_INT 22
15191: PUSH
15192: LD_INT 23
15194: PUSH
15195: LD_INT 24
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: ST_TO_ADDR
15204: GO 15353
15206: LD_INT 52
15208: DOUBLE
15209: EQUAL
15210: IFTRUE 15214
15212: GO 15240
15214: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15215: LD_ADDR_VAR 0 3
15219: PUSH
15220: LD_INT 21
15222: PUSH
15223: LD_INT 22
15225: PUSH
15226: LD_INT 23
15228: PUSH
15229: LD_INT 24
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: ST_TO_ADDR
15238: GO 15353
15240: LD_INT 53
15242: DOUBLE
15243: EQUAL
15244: IFTRUE 15248
15246: GO 15266
15248: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15249: LD_ADDR_VAR 0 3
15253: PUSH
15254: LD_INT 23
15256: PUSH
15257: LD_INT 24
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: ST_TO_ADDR
15264: GO 15353
15266: LD_INT 46
15268: DOUBLE
15269: EQUAL
15270: IFTRUE 15274
15272: GO 15292
15274: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15275: LD_ADDR_VAR 0 3
15279: PUSH
15280: LD_INT 23
15282: PUSH
15283: LD_INT 24
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: ST_TO_ADDR
15290: GO 15353
15292: LD_INT 47
15294: DOUBLE
15295: EQUAL
15296: IFTRUE 15300
15298: GO 15318
15300: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15301: LD_ADDR_VAR 0 3
15305: PUSH
15306: LD_INT 23
15308: PUSH
15309: LD_INT 24
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: ST_TO_ADDR
15316: GO 15353
15318: LD_INT 98
15320: DOUBLE
15321: EQUAL
15322: IFTRUE 15326
15324: GO 15352
15326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15327: LD_ADDR_VAR 0 3
15331: PUSH
15332: LD_INT 21
15334: PUSH
15335: LD_INT 22
15337: PUSH
15338: LD_INT 23
15340: PUSH
15341: LD_INT 24
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: ST_TO_ADDR
15350: GO 15353
15352: POP
// result := ( chassis in result ) ;
15353: LD_ADDR_VAR 0 3
15357: PUSH
15358: LD_VAR 0 1
15362: PUSH
15363: LD_VAR 0 3
15367: IN
15368: ST_TO_ADDR
// end ;
15369: LD_VAR 0 3
15373: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15374: LD_INT 0
15376: PPUSH
15377: PPUSH
15378: PPUSH
15379: PPUSH
15380: PPUSH
15381: PPUSH
15382: PPUSH
// result := array ;
15383: LD_ADDR_VAR 0 5
15387: PUSH
15388: LD_VAR 0 1
15392: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15393: LD_VAR 0 1
15397: NOT
15398: IFTRUE 15407
15400: PUSH
15401: LD_VAR 0 2
15405: NOT
15406: OR
15407: IFTRUE 15416
15409: PUSH
15410: LD_VAR 0 3
15414: NOT
15415: OR
15416: IFTRUE 15430
15418: PUSH
15419: LD_VAR 0 2
15423: PUSH
15424: LD_VAR 0 1
15428: GREATER
15429: OR
15430: IFTRUE 15444
15432: PUSH
15433: LD_VAR 0 3
15437: PUSH
15438: LD_VAR 0 1
15442: GREATER
15443: OR
15444: IFFALSE 15448
// exit ;
15446: GO 15744
// if direction then
15448: LD_VAR 0 4
15452: IFFALSE 15516
// begin d := 1 ;
15454: LD_ADDR_VAR 0 9
15458: PUSH
15459: LD_INT 1
15461: ST_TO_ADDR
// if i_from > i_to then
15462: LD_VAR 0 2
15466: PUSH
15467: LD_VAR 0 3
15471: GREATER
15472: IFFALSE 15498
// length := ( array - i_from ) + i_to else
15474: LD_ADDR_VAR 0 11
15478: PUSH
15479: LD_VAR 0 1
15483: PUSH
15484: LD_VAR 0 2
15488: MINUS
15489: PUSH
15490: LD_VAR 0 3
15494: PLUS
15495: ST_TO_ADDR
15496: GO 15514
// length := i_to - i_from ;
15498: LD_ADDR_VAR 0 11
15502: PUSH
15503: LD_VAR 0 3
15507: PUSH
15508: LD_VAR 0 2
15512: MINUS
15513: ST_TO_ADDR
// end else
15514: GO 15577
// begin d := - 1 ;
15516: LD_ADDR_VAR 0 9
15520: PUSH
15521: LD_INT 1
15523: NEG
15524: ST_TO_ADDR
// if i_from > i_to then
15525: LD_VAR 0 2
15529: PUSH
15530: LD_VAR 0 3
15534: GREATER
15535: IFFALSE 15555
// length := i_from - i_to else
15537: LD_ADDR_VAR 0 11
15541: PUSH
15542: LD_VAR 0 2
15546: PUSH
15547: LD_VAR 0 3
15551: MINUS
15552: ST_TO_ADDR
15553: GO 15577
// length := ( array - i_to ) + i_from ;
15555: LD_ADDR_VAR 0 11
15559: PUSH
15560: LD_VAR 0 1
15564: PUSH
15565: LD_VAR 0 3
15569: MINUS
15570: PUSH
15571: LD_VAR 0 2
15575: PLUS
15576: ST_TO_ADDR
// end ; if not length then
15577: LD_VAR 0 11
15581: NOT
15582: IFFALSE 15586
// exit ;
15584: GO 15744
// tmp := array ;
15586: LD_ADDR_VAR 0 10
15590: PUSH
15591: LD_VAR 0 1
15595: ST_TO_ADDR
// for i = 1 to length do
15596: LD_ADDR_VAR 0 6
15600: PUSH
15601: DOUBLE
15602: LD_INT 1
15604: DEC
15605: ST_TO_ADDR
15606: LD_VAR 0 11
15610: PUSH
15611: FOR_TO
15612: IFFALSE 15732
// begin for j = 1 to array do
15614: LD_ADDR_VAR 0 7
15618: PUSH
15619: DOUBLE
15620: LD_INT 1
15622: DEC
15623: ST_TO_ADDR
15624: LD_VAR 0 1
15628: PUSH
15629: FOR_TO
15630: IFFALSE 15718
// begin k := j + d ;
15632: LD_ADDR_VAR 0 8
15636: PUSH
15637: LD_VAR 0 7
15641: PUSH
15642: LD_VAR 0 9
15646: PLUS
15647: ST_TO_ADDR
// if k > array then
15648: LD_VAR 0 8
15652: PUSH
15653: LD_VAR 0 1
15657: GREATER
15658: IFFALSE 15668
// k := 1 ;
15660: LD_ADDR_VAR 0 8
15664: PUSH
15665: LD_INT 1
15667: ST_TO_ADDR
// if not k then
15668: LD_VAR 0 8
15672: NOT
15673: IFFALSE 15685
// k := array ;
15675: LD_ADDR_VAR 0 8
15679: PUSH
15680: LD_VAR 0 1
15684: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15685: LD_ADDR_VAR 0 10
15689: PUSH
15690: LD_VAR 0 10
15694: PPUSH
15695: LD_VAR 0 8
15699: PPUSH
15700: LD_VAR 0 1
15704: PUSH
15705: LD_VAR 0 7
15709: ARRAY
15710: PPUSH
15711: CALL_OW 1
15715: ST_TO_ADDR
// end ;
15716: GO 15629
15718: POP
15719: POP
// array := tmp ;
15720: LD_ADDR_VAR 0 1
15724: PUSH
15725: LD_VAR 0 10
15729: ST_TO_ADDR
// end ;
15730: GO 15611
15732: POP
15733: POP
// result := array ;
15734: LD_ADDR_VAR 0 5
15738: PUSH
15739: LD_VAR 0 1
15743: ST_TO_ADDR
// end ;
15744: LD_VAR 0 5
15748: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15749: LD_INT 0
15751: PPUSH
15752: PPUSH
// result := 0 ;
15753: LD_ADDR_VAR 0 3
15757: PUSH
15758: LD_INT 0
15760: ST_TO_ADDR
// if not array or not value in array then
15761: LD_VAR 0 1
15765: NOT
15766: IFTRUE 15781
15768: PUSH
15769: LD_VAR 0 2
15773: PUSH
15774: LD_VAR 0 1
15778: IN
15779: NOT
15780: OR
15781: IFFALSE 15785
// exit ;
15783: GO 15839
// for i = 1 to array do
15785: LD_ADDR_VAR 0 4
15789: PUSH
15790: DOUBLE
15791: LD_INT 1
15793: DEC
15794: ST_TO_ADDR
15795: LD_VAR 0 1
15799: PUSH
15800: FOR_TO
15801: IFFALSE 15837
// if value = array [ i ] then
15803: LD_VAR 0 2
15807: PUSH
15808: LD_VAR 0 1
15812: PUSH
15813: LD_VAR 0 4
15817: ARRAY
15818: EQUAL
15819: IFFALSE 15835
// begin result := i ;
15821: LD_ADDR_VAR 0 3
15825: PUSH
15826: LD_VAR 0 4
15830: ST_TO_ADDR
// exit ;
15831: POP
15832: POP
15833: GO 15839
// end ;
15835: GO 15800
15837: POP
15838: POP
// end ;
15839: LD_VAR 0 3
15843: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15844: LD_INT 0
15846: PPUSH
// vc_chassis := chassis ;
15847: LD_ADDR_OWVAR 37
15851: PUSH
15852: LD_VAR 0 1
15856: ST_TO_ADDR
// vc_engine := engine ;
15857: LD_ADDR_OWVAR 39
15861: PUSH
15862: LD_VAR 0 2
15866: ST_TO_ADDR
// vc_control := control ;
15867: LD_ADDR_OWVAR 38
15871: PUSH
15872: LD_VAR 0 3
15876: ST_TO_ADDR
// vc_weapon := weapon ;
15877: LD_ADDR_OWVAR 40
15881: PUSH
15882: LD_VAR 0 4
15886: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15887: LD_ADDR_OWVAR 41
15891: PUSH
15892: LD_VAR 0 5
15896: ST_TO_ADDR
// end ;
15897: LD_VAR 0 6
15901: RET
// export function WantPlant ( unit ) ; var task ; begin
15902: LD_INT 0
15904: PPUSH
15905: PPUSH
// result := false ;
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: LD_INT 0
15913: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15914: LD_ADDR_VAR 0 3
15918: PUSH
15919: LD_VAR 0 1
15923: PPUSH
15924: CALL_OW 437
15928: ST_TO_ADDR
// if task then
15929: LD_VAR 0 3
15933: IFFALSE 15961
// if task [ 1 ] [ 1 ] = p then
15935: LD_VAR 0 3
15939: PUSH
15940: LD_INT 1
15942: ARRAY
15943: PUSH
15944: LD_INT 1
15946: ARRAY
15947: PUSH
15948: LD_STRING p
15950: EQUAL
15951: IFFALSE 15961
// result := true ;
15953: LD_ADDR_VAR 0 2
15957: PUSH
15958: LD_INT 1
15960: ST_TO_ADDR
// end ;
15961: LD_VAR 0 2
15965: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15966: LD_INT 0
15968: PPUSH
15969: PPUSH
15970: PPUSH
15971: PPUSH
// if pos < 1 then
15972: LD_VAR 0 2
15976: PUSH
15977: LD_INT 1
15979: LESS
15980: IFFALSE 15984
// exit ;
15982: GO 16287
// if pos = 1 then
15984: LD_VAR 0 2
15988: PUSH
15989: LD_INT 1
15991: EQUAL
15992: IFFALSE 16025
// result := Replace ( arr , pos [ 1 ] , value ) else
15994: LD_ADDR_VAR 0 4
15998: PUSH
15999: LD_VAR 0 1
16003: PPUSH
16004: LD_VAR 0 2
16008: PUSH
16009: LD_INT 1
16011: ARRAY
16012: PPUSH
16013: LD_VAR 0 3
16017: PPUSH
16018: CALL_OW 1
16022: ST_TO_ADDR
16023: GO 16287
// begin tmp := arr ;
16025: LD_ADDR_VAR 0 6
16029: PUSH
16030: LD_VAR 0 1
16034: ST_TO_ADDR
// s_arr := [ tmp ] ;
16035: LD_ADDR_VAR 0 7
16039: PUSH
16040: LD_VAR 0 6
16044: PUSH
16045: EMPTY
16046: LIST
16047: ST_TO_ADDR
// for i = 1 to pos - 1 do
16048: LD_ADDR_VAR 0 5
16052: PUSH
16053: DOUBLE
16054: LD_INT 1
16056: DEC
16057: ST_TO_ADDR
16058: LD_VAR 0 2
16062: PUSH
16063: LD_INT 1
16065: MINUS
16066: PUSH
16067: FOR_TO
16068: IFFALSE 16113
// begin tmp := tmp [ pos [ i ] ] ;
16070: LD_ADDR_VAR 0 6
16074: PUSH
16075: LD_VAR 0 6
16079: PUSH
16080: LD_VAR 0 2
16084: PUSH
16085: LD_VAR 0 5
16089: ARRAY
16090: ARRAY
16091: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16092: LD_ADDR_VAR 0 7
16096: PUSH
16097: LD_VAR 0 7
16101: PUSH
16102: LD_VAR 0 6
16106: PUSH
16107: EMPTY
16108: LIST
16109: ADD
16110: ST_TO_ADDR
// end ;
16111: GO 16067
16113: POP
16114: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16115: LD_ADDR_VAR 0 6
16119: PUSH
16120: LD_VAR 0 6
16124: PPUSH
16125: LD_VAR 0 2
16129: PUSH
16130: LD_VAR 0 2
16134: ARRAY
16135: PPUSH
16136: LD_VAR 0 3
16140: PPUSH
16141: CALL_OW 1
16145: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16146: LD_ADDR_VAR 0 7
16150: PUSH
16151: LD_VAR 0 7
16155: PPUSH
16156: LD_VAR 0 7
16160: PPUSH
16161: LD_VAR 0 6
16165: PPUSH
16166: CALL_OW 1
16170: ST_TO_ADDR
// for i = s_arr downto 2 do
16171: LD_ADDR_VAR 0 5
16175: PUSH
16176: DOUBLE
16177: LD_VAR 0 7
16181: INC
16182: ST_TO_ADDR
16183: LD_INT 2
16185: PUSH
16186: FOR_DOWNTO
16187: IFFALSE 16271
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16189: LD_ADDR_VAR 0 6
16193: PUSH
16194: LD_VAR 0 7
16198: PUSH
16199: LD_VAR 0 5
16203: PUSH
16204: LD_INT 1
16206: MINUS
16207: ARRAY
16208: PPUSH
16209: LD_VAR 0 2
16213: PUSH
16214: LD_VAR 0 5
16218: PUSH
16219: LD_INT 1
16221: MINUS
16222: ARRAY
16223: PPUSH
16224: LD_VAR 0 7
16228: PUSH
16229: LD_VAR 0 5
16233: ARRAY
16234: PPUSH
16235: CALL_OW 1
16239: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16240: LD_ADDR_VAR 0 7
16244: PUSH
16245: LD_VAR 0 7
16249: PPUSH
16250: LD_VAR 0 5
16254: PUSH
16255: LD_INT 1
16257: MINUS
16258: PPUSH
16259: LD_VAR 0 6
16263: PPUSH
16264: CALL_OW 1
16268: ST_TO_ADDR
// end ;
16269: GO 16186
16271: POP
16272: POP
// result := s_arr [ 1 ] ;
16273: LD_ADDR_VAR 0 4
16277: PUSH
16278: LD_VAR 0 7
16282: PUSH
16283: LD_INT 1
16285: ARRAY
16286: ST_TO_ADDR
// end ; end ;
16287: LD_VAR 0 4
16291: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16292: LD_INT 0
16294: PPUSH
16295: PPUSH
// if not list then
16296: LD_VAR 0 1
16300: NOT
16301: IFFALSE 16305
// exit ;
16303: GO 16396
// i := list [ pos1 ] ;
16305: LD_ADDR_VAR 0 5
16309: PUSH
16310: LD_VAR 0 1
16314: PUSH
16315: LD_VAR 0 2
16319: ARRAY
16320: ST_TO_ADDR
// if not i then
16321: LD_VAR 0 5
16325: NOT
16326: IFFALSE 16330
// exit ;
16328: GO 16396
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16330: LD_ADDR_VAR 0 1
16334: PUSH
16335: LD_VAR 0 1
16339: PPUSH
16340: LD_VAR 0 2
16344: PPUSH
16345: LD_VAR 0 1
16349: PUSH
16350: LD_VAR 0 3
16354: ARRAY
16355: PPUSH
16356: CALL_OW 1
16360: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16361: LD_ADDR_VAR 0 1
16365: PUSH
16366: LD_VAR 0 1
16370: PPUSH
16371: LD_VAR 0 3
16375: PPUSH
16376: LD_VAR 0 5
16380: PPUSH
16381: CALL_OW 1
16385: ST_TO_ADDR
// result := list ;
16386: LD_ADDR_VAR 0 4
16390: PUSH
16391: LD_VAR 0 1
16395: ST_TO_ADDR
// end ;
16396: LD_VAR 0 4
16400: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16401: LD_INT 0
16403: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16404: LD_ADDR_VAR 0 5
16408: PUSH
16409: LD_VAR 0 1
16413: PPUSH
16414: CALL_OW 250
16418: PPUSH
16419: LD_VAR 0 1
16423: PPUSH
16424: CALL_OW 251
16428: PPUSH
16429: LD_VAR 0 2
16433: PPUSH
16434: LD_VAR 0 3
16438: PPUSH
16439: LD_VAR 0 4
16443: PPUSH
16444: CALL 16826 0 5
16448: ST_TO_ADDR
// end ;
16449: LD_VAR 0 5
16453: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16454: LD_INT 0
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
// if not list or not unit then
16460: LD_VAR 0 2
16464: NOT
16465: IFTRUE 16474
16467: PUSH
16468: LD_VAR 0 1
16472: NOT
16473: OR
16474: IFFALSE 16478
// exit ;
16476: GO 16821
// result := [ ] ;
16478: LD_ADDR_VAR 0 5
16482: PUSH
16483: EMPTY
16484: ST_TO_ADDR
// for i in list do
16485: LD_ADDR_VAR 0 6
16489: PUSH
16490: LD_VAR 0 2
16494: PUSH
16495: FOR_IN
16496: IFFALSE 16714
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
16498: LD_ADDR_VAR 0 8
16502: PUSH
16503: LD_VAR 0 1
16507: PPUSH
16508: LD_VAR 0 6
16512: PUSH
16513: LD_INT 1
16515: ARRAY
16516: PPUSH
16517: LD_VAR 0 6
16521: PUSH
16522: LD_INT 2
16524: ARRAY
16525: PPUSH
16526: CALL_OW 297
16530: ST_TO_ADDR
// if not Count ( result ) then
16531: LD_VAR 0 5
16535: PPUSH
16536: CALL 13048 0 1
16540: NOT
16541: IFFALSE 16574
// begin result := Join ( result , [ i , tmp ] ) ;
16543: LD_ADDR_VAR 0 5
16547: PUSH
16548: LD_VAR 0 5
16552: PPUSH
16553: LD_VAR 0 6
16557: PUSH
16558: LD_VAR 0 8
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PPUSH
16567: CALL 49014 0 2
16571: ST_TO_ADDR
// continue ;
16572: GO 16495
// end ; if result [ result ] [ 2 ] <= tmp then
16574: LD_VAR 0 5
16578: PUSH
16579: LD_VAR 0 5
16583: ARRAY
16584: PUSH
16585: LD_INT 2
16587: ARRAY
16588: PUSH
16589: LD_VAR 0 8
16593: LESSEQUAL
16594: IFFALSE 16627
// result := Join ( result , [ i , tmp ] ) else
16596: LD_ADDR_VAR 0 5
16600: PUSH
16601: LD_VAR 0 5
16605: PPUSH
16606: LD_VAR 0 6
16610: PUSH
16611: LD_VAR 0 8
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PPUSH
16620: CALL 49014 0 2
16624: ST_TO_ADDR
16625: GO 16712
// begin for j := 1 to Count ( result ) do
16627: LD_ADDR_VAR 0 7
16631: PUSH
16632: DOUBLE
16633: LD_INT 1
16635: DEC
16636: ST_TO_ADDR
16637: LD_VAR 0 5
16641: PPUSH
16642: CALL 13048 0 1
16646: PUSH
16647: FOR_TO
16648: IFFALSE 16710
// begin if tmp < result [ j ] [ 2 ] then
16650: LD_VAR 0 8
16654: PUSH
16655: LD_VAR 0 5
16659: PUSH
16660: LD_VAR 0 7
16664: ARRAY
16665: PUSH
16666: LD_INT 2
16668: ARRAY
16669: LESS
16670: IFFALSE 16708
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16672: LD_ADDR_VAR 0 5
16676: PUSH
16677: LD_VAR 0 5
16681: PPUSH
16682: LD_VAR 0 7
16686: PPUSH
16687: LD_VAR 0 6
16691: PUSH
16692: LD_VAR 0 8
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PPUSH
16701: CALL_OW 2
16705: ST_TO_ADDR
// break ;
16706: GO 16710
// end ; end ;
16708: GO 16647
16710: POP
16711: POP
// end ; end ;
16712: GO 16495
16714: POP
16715: POP
// if result and not asc then
16716: LD_VAR 0 5
16720: IFFALSE 16729
16722: PUSH
16723: LD_VAR 0 3
16727: NOT
16728: AND
16729: IFFALSE 16746
// result := ReverseArray ( result ) ;
16731: LD_ADDR_VAR 0 5
16735: PUSH
16736: LD_VAR 0 5
16740: PPUSH
16741: CALL 44104 0 1
16745: ST_TO_ADDR
// tmp := [ ] ;
16746: LD_ADDR_VAR 0 8
16750: PUSH
16751: EMPTY
16752: ST_TO_ADDR
// if mode then
16753: LD_VAR 0 4
16757: IFFALSE 16821
// begin for i := 1 to result do
16759: LD_ADDR_VAR 0 6
16763: PUSH
16764: DOUBLE
16765: LD_INT 1
16767: DEC
16768: ST_TO_ADDR
16769: LD_VAR 0 5
16773: PUSH
16774: FOR_TO
16775: IFFALSE 16809
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
16777: LD_ADDR_VAR 0 8
16781: PUSH
16782: LD_VAR 0 8
16786: PPUSH
16787: LD_VAR 0 5
16791: PUSH
16792: LD_VAR 0 6
16796: ARRAY
16797: PUSH
16798: LD_INT 1
16800: ARRAY
16801: PPUSH
16802: CALL 49014 0 2
16806: ST_TO_ADDR
16807: GO 16774
16809: POP
16810: POP
// result := tmp ;
16811: LD_ADDR_VAR 0 5
16815: PUSH
16816: LD_VAR 0 8
16820: ST_TO_ADDR
// end ; end ;
16821: LD_VAR 0 5
16825: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16826: LD_INT 0
16828: PPUSH
16829: PPUSH
16830: PPUSH
16831: PPUSH
// if not list then
16832: LD_VAR 0 3
16836: NOT
16837: IFFALSE 16841
// exit ;
16839: GO 17231
// result := [ ] ;
16841: LD_ADDR_VAR 0 6
16845: PUSH
16846: EMPTY
16847: ST_TO_ADDR
// for i in list do
16848: LD_ADDR_VAR 0 7
16852: PUSH
16853: LD_VAR 0 3
16857: PUSH
16858: FOR_IN
16859: IFFALSE 17061
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16861: LD_ADDR_VAR 0 9
16865: PUSH
16866: LD_VAR 0 7
16870: PPUSH
16871: LD_VAR 0 1
16875: PPUSH
16876: LD_VAR 0 2
16880: PPUSH
16881: CALL_OW 297
16885: ST_TO_ADDR
// if not result then
16886: LD_VAR 0 6
16890: NOT
16891: IFFALSE 16917
// result := [ [ i , tmp ] ] else
16893: LD_ADDR_VAR 0 6
16897: PUSH
16898: LD_VAR 0 7
16902: PUSH
16903: LD_VAR 0 9
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: EMPTY
16913: LIST
16914: ST_TO_ADDR
16915: GO 17059
// begin if result [ result ] [ 2 ] <= tmp then
16917: LD_VAR 0 6
16921: PUSH
16922: LD_VAR 0 6
16926: ARRAY
16927: PUSH
16928: LD_INT 2
16930: ARRAY
16931: PUSH
16932: LD_VAR 0 9
16936: LESSEQUAL
16937: IFFALSE 16979
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16939: LD_ADDR_VAR 0 6
16943: PUSH
16944: LD_VAR 0 6
16948: PPUSH
16949: LD_VAR 0 6
16953: PUSH
16954: LD_INT 1
16956: PLUS
16957: PPUSH
16958: LD_VAR 0 7
16962: PUSH
16963: LD_VAR 0 9
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PPUSH
16972: CALL_OW 2
16976: ST_TO_ADDR
16977: GO 17059
// for j := 1 to result do
16979: LD_ADDR_VAR 0 8
16983: PUSH
16984: DOUBLE
16985: LD_INT 1
16987: DEC
16988: ST_TO_ADDR
16989: LD_VAR 0 6
16993: PUSH
16994: FOR_TO
16995: IFFALSE 17057
// begin if tmp < result [ j ] [ 2 ] then
16997: LD_VAR 0 9
17001: PUSH
17002: LD_VAR 0 6
17006: PUSH
17007: LD_VAR 0 8
17011: ARRAY
17012: PUSH
17013: LD_INT 2
17015: ARRAY
17016: LESS
17017: IFFALSE 17055
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17019: LD_ADDR_VAR 0 6
17023: PUSH
17024: LD_VAR 0 6
17028: PPUSH
17029: LD_VAR 0 8
17033: PPUSH
17034: LD_VAR 0 7
17038: PUSH
17039: LD_VAR 0 9
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PPUSH
17048: CALL_OW 2
17052: ST_TO_ADDR
// break ;
17053: GO 17057
// end ; end ;
17055: GO 16994
17057: POP
17058: POP
// end ; end ;
17059: GO 16858
17061: POP
17062: POP
// if result and not asc then
17063: LD_VAR 0 6
17067: IFFALSE 17076
17069: PUSH
17070: LD_VAR 0 4
17074: NOT
17075: AND
17076: IFFALSE 17151
// begin tmp := result ;
17078: LD_ADDR_VAR 0 9
17082: PUSH
17083: LD_VAR 0 6
17087: ST_TO_ADDR
// for i = tmp downto 1 do
17088: LD_ADDR_VAR 0 7
17092: PUSH
17093: DOUBLE
17094: LD_VAR 0 9
17098: INC
17099: ST_TO_ADDR
17100: LD_INT 1
17102: PUSH
17103: FOR_DOWNTO
17104: IFFALSE 17149
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17106: LD_ADDR_VAR 0 6
17110: PUSH
17111: LD_VAR 0 6
17115: PPUSH
17116: LD_VAR 0 9
17120: PUSH
17121: LD_VAR 0 7
17125: MINUS
17126: PUSH
17127: LD_INT 1
17129: PLUS
17130: PPUSH
17131: LD_VAR 0 9
17135: PUSH
17136: LD_VAR 0 7
17140: ARRAY
17141: PPUSH
17142: CALL_OW 1
17146: ST_TO_ADDR
17147: GO 17103
17149: POP
17150: POP
// end ; tmp := [ ] ;
17151: LD_ADDR_VAR 0 9
17155: PUSH
17156: EMPTY
17157: ST_TO_ADDR
// if mode then
17158: LD_VAR 0 5
17162: IFFALSE 17231
// begin for i = 1 to result do
17164: LD_ADDR_VAR 0 7
17168: PUSH
17169: DOUBLE
17170: LD_INT 1
17172: DEC
17173: ST_TO_ADDR
17174: LD_VAR 0 6
17178: PUSH
17179: FOR_TO
17180: IFFALSE 17219
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17182: LD_ADDR_VAR 0 9
17186: PUSH
17187: LD_VAR 0 9
17191: PPUSH
17192: LD_VAR 0 7
17196: PPUSH
17197: LD_VAR 0 6
17201: PUSH
17202: LD_VAR 0 7
17206: ARRAY
17207: PUSH
17208: LD_INT 1
17210: ARRAY
17211: PPUSH
17212: CALL_OW 1
17216: ST_TO_ADDR
17217: GO 17179
17219: POP
17220: POP
// result := tmp ;
17221: LD_ADDR_VAR 0 6
17225: PUSH
17226: LD_VAR 0 9
17230: ST_TO_ADDR
// end ; end ;
17231: LD_VAR 0 6
17235: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17236: LD_INT 0
17238: PPUSH
17239: PPUSH
17240: PPUSH
17241: PPUSH
17242: PPUSH
17243: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17244: LD_ADDR_VAR 0 5
17248: PUSH
17249: LD_INT 0
17251: PUSH
17252: LD_INT 0
17254: PUSH
17255: LD_INT 0
17257: PUSH
17258: EMPTY
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: ST_TO_ADDR
// if not x or not y then
17266: LD_VAR 0 2
17270: NOT
17271: IFTRUE 17280
17273: PUSH
17274: LD_VAR 0 3
17278: NOT
17279: OR
17280: IFFALSE 17284
// exit ;
17282: GO 18940
// if not range then
17284: LD_VAR 0 4
17288: NOT
17289: IFFALSE 17299
// range := 10 ;
17291: LD_ADDR_VAR 0 4
17295: PUSH
17296: LD_INT 10
17298: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17299: LD_ADDR_VAR 0 8
17303: PUSH
17304: LD_INT 81
17306: PUSH
17307: LD_VAR 0 1
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 92
17318: PUSH
17319: LD_VAR 0 2
17323: PUSH
17324: LD_VAR 0 3
17328: PUSH
17329: LD_VAR 0 4
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 3
17342: PUSH
17343: LD_INT 21
17345: PUSH
17346: LD_INT 3
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: LIST
17361: PPUSH
17362: CALL_OW 69
17366: ST_TO_ADDR
// if not tmp then
17367: LD_VAR 0 8
17371: NOT
17372: IFFALSE 17376
// exit ;
17374: GO 18940
// for i in tmp do
17376: LD_ADDR_VAR 0 6
17380: PUSH
17381: LD_VAR 0 8
17385: PUSH
17386: FOR_IN
17387: IFFALSE 18915
// begin points := [ 0 , 0 , 0 ] ;
17389: LD_ADDR_VAR 0 9
17393: PUSH
17394: LD_INT 0
17396: PUSH
17397: LD_INT 0
17399: PUSH
17400: LD_INT 0
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: LIST
17407: ST_TO_ADDR
// bpoints := 1 ;
17408: LD_ADDR_VAR 0 10
17412: PUSH
17413: LD_INT 1
17415: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17416: LD_VAR 0 6
17420: PPUSH
17421: CALL_OW 247
17425: PUSH
17426: LD_INT 1
17428: DOUBLE
17429: EQUAL
17430: IFTRUE 17434
17432: GO 18016
17434: POP
// begin if GetClass ( i ) = 1 then
17435: LD_VAR 0 6
17439: PPUSH
17440: CALL_OW 257
17444: PUSH
17445: LD_INT 1
17447: EQUAL
17448: IFFALSE 17469
// points := [ 10 , 5 , 3 ] ;
17450: LD_ADDR_VAR 0 9
17454: PUSH
17455: LD_INT 10
17457: PUSH
17458: LD_INT 5
17460: PUSH
17461: LD_INT 3
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17469: LD_VAR 0 6
17473: PPUSH
17474: CALL_OW 257
17478: PUSH
17479: LD_INT 2
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: LD_INT 4
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: IN
17493: IFFALSE 17514
// points := [ 3 , 2 , 1 ] ;
17495: LD_ADDR_VAR 0 9
17499: PUSH
17500: LD_INT 3
17502: PUSH
17503: LD_INT 2
17505: PUSH
17506: LD_INT 1
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17514: LD_VAR 0 6
17518: PPUSH
17519: CALL_OW 257
17523: PUSH
17524: LD_INT 5
17526: EQUAL
17527: IFFALSE 17548
// points := [ 130 , 5 , 2 ] ;
17529: LD_ADDR_VAR 0 9
17533: PUSH
17534: LD_INT 130
17536: PUSH
17537: LD_INT 5
17539: PUSH
17540: LD_INT 2
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17548: LD_VAR 0 6
17552: PPUSH
17553: CALL_OW 257
17557: PUSH
17558: LD_INT 8
17560: EQUAL
17561: IFFALSE 17582
// points := [ 35 , 35 , 30 ] ;
17563: LD_ADDR_VAR 0 9
17567: PUSH
17568: LD_INT 35
17570: PUSH
17571: LD_INT 35
17573: PUSH
17574: LD_INT 30
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: LIST
17581: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17582: LD_VAR 0 6
17586: PPUSH
17587: CALL_OW 257
17591: PUSH
17592: LD_INT 9
17594: EQUAL
17595: IFFALSE 17616
// points := [ 20 , 55 , 40 ] ;
17597: LD_ADDR_VAR 0 9
17601: PUSH
17602: LD_INT 20
17604: PUSH
17605: LD_INT 55
17607: PUSH
17608: LD_INT 40
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: LIST
17615: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17616: LD_VAR 0 6
17620: PPUSH
17621: CALL_OW 257
17625: PUSH
17626: LD_INT 12
17628: PUSH
17629: LD_INT 16
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: IN
17636: IFFALSE 17657
// points := [ 5 , 3 , 2 ] ;
17638: LD_ADDR_VAR 0 9
17642: PUSH
17643: LD_INT 5
17645: PUSH
17646: LD_INT 3
17648: PUSH
17649: LD_INT 2
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: LIST
17656: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17657: LD_VAR 0 6
17661: PPUSH
17662: CALL_OW 257
17666: PUSH
17667: LD_INT 17
17669: EQUAL
17670: IFFALSE 17691
// points := [ 100 , 50 , 75 ] ;
17672: LD_ADDR_VAR 0 9
17676: PUSH
17677: LD_INT 100
17679: PUSH
17680: LD_INT 50
17682: PUSH
17683: LD_INT 75
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: LIST
17690: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17691: LD_VAR 0 6
17695: PPUSH
17696: CALL_OW 257
17700: PUSH
17701: LD_INT 15
17703: EQUAL
17704: IFFALSE 17725
// points := [ 10 , 5 , 3 ] ;
17706: LD_ADDR_VAR 0 9
17710: PUSH
17711: LD_INT 10
17713: PUSH
17714: LD_INT 5
17716: PUSH
17717: LD_INT 3
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: LIST
17724: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17725: LD_VAR 0 6
17729: PPUSH
17730: CALL_OW 257
17734: PUSH
17735: LD_INT 14
17737: EQUAL
17738: IFFALSE 17759
// points := [ 10 , 0 , 0 ] ;
17740: LD_ADDR_VAR 0 9
17744: PUSH
17745: LD_INT 10
17747: PUSH
17748: LD_INT 0
17750: PUSH
17751: LD_INT 0
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: LIST
17758: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17759: LD_VAR 0 6
17763: PPUSH
17764: CALL_OW 257
17768: PUSH
17769: LD_INT 11
17771: EQUAL
17772: IFFALSE 17793
// points := [ 30 , 10 , 5 ] ;
17774: LD_ADDR_VAR 0 9
17778: PUSH
17779: LD_INT 30
17781: PUSH
17782: LD_INT 10
17784: PUSH
17785: LD_INT 5
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: LIST
17792: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17793: LD_VAR 0 1
17797: PPUSH
17798: LD_INT 5
17800: PPUSH
17801: CALL_OW 321
17805: PUSH
17806: LD_INT 2
17808: EQUAL
17809: IFFALSE 17826
// bpoints := bpoints * 1.8 ;
17811: LD_ADDR_VAR 0 10
17815: PUSH
17816: LD_VAR 0 10
17820: PUSH
17821: LD_REAL  1.80000000000000E+0000
17824: MUL
17825: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17826: LD_VAR 0 6
17830: PPUSH
17831: CALL_OW 257
17835: PUSH
17836: LD_INT 1
17838: PUSH
17839: LD_INT 2
17841: PUSH
17842: LD_INT 3
17844: PUSH
17845: LD_INT 4
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: IN
17854: IFFALSE 17874
17856: PUSH
17857: LD_VAR 0 1
17861: PPUSH
17862: LD_INT 51
17864: PPUSH
17865: CALL_OW 321
17869: PUSH
17870: LD_INT 2
17872: EQUAL
17873: AND
17874: IFFALSE 17891
// bpoints := bpoints * 1.2 ;
17876: LD_ADDR_VAR 0 10
17880: PUSH
17881: LD_VAR 0 10
17885: PUSH
17886: LD_REAL  1.20000000000000E+0000
17889: MUL
17890: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17891: LD_VAR 0 6
17895: PPUSH
17896: CALL_OW 257
17900: PUSH
17901: LD_INT 5
17903: PUSH
17904: LD_INT 7
17906: PUSH
17907: LD_INT 9
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: LIST
17914: IN
17915: IFFALSE 17935
17917: PUSH
17918: LD_VAR 0 1
17922: PPUSH
17923: LD_INT 52
17925: PPUSH
17926: CALL_OW 321
17930: PUSH
17931: LD_INT 2
17933: EQUAL
17934: AND
17935: IFFALSE 17952
// bpoints := bpoints * 1.5 ;
17937: LD_ADDR_VAR 0 10
17941: PUSH
17942: LD_VAR 0 10
17946: PUSH
17947: LD_REAL  1.50000000000000E+0000
17950: MUL
17951: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17952: LD_VAR 0 1
17956: PPUSH
17957: LD_INT 66
17959: PPUSH
17960: CALL_OW 321
17964: PUSH
17965: LD_INT 2
17967: EQUAL
17968: IFFALSE 17985
// bpoints := bpoints * 1.1 ;
17970: LD_ADDR_VAR 0 10
17974: PUSH
17975: LD_VAR 0 10
17979: PUSH
17980: LD_REAL  1.10000000000000E+0000
17983: MUL
17984: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17985: LD_ADDR_VAR 0 10
17989: PUSH
17990: LD_VAR 0 10
17994: PUSH
17995: LD_VAR 0 6
17999: PPUSH
18000: LD_INT 1
18002: PPUSH
18003: CALL_OW 259
18007: PUSH
18008: LD_REAL  1.15000000000000E+0000
18011: MUL
18012: MUL
18013: ST_TO_ADDR
// end ; unit_vehicle :
18014: GO 18844
18016: LD_INT 2
18018: DOUBLE
18019: EQUAL
18020: IFTRUE 18024
18022: GO 18832
18024: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18025: LD_VAR 0 6
18029: PPUSH
18030: CALL_OW 264
18034: PUSH
18035: LD_INT 2
18037: PUSH
18038: LD_INT 42
18040: PUSH
18041: LD_INT 24
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: LIST
18048: IN
18049: IFFALSE 18070
// points := [ 25 , 5 , 3 ] ;
18051: LD_ADDR_VAR 0 9
18055: PUSH
18056: LD_INT 25
18058: PUSH
18059: LD_INT 5
18061: PUSH
18062: LD_INT 3
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18070: LD_VAR 0 6
18074: PPUSH
18075: CALL_OW 264
18079: PUSH
18080: LD_INT 4
18082: PUSH
18083: LD_INT 43
18085: PUSH
18086: LD_INT 25
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: LIST
18093: IN
18094: IFFALSE 18115
// points := [ 40 , 15 , 5 ] ;
18096: LD_ADDR_VAR 0 9
18100: PUSH
18101: LD_INT 40
18103: PUSH
18104: LD_INT 15
18106: PUSH
18107: LD_INT 5
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: LIST
18114: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18115: LD_VAR 0 6
18119: PPUSH
18120: CALL_OW 264
18124: PUSH
18125: LD_INT 3
18127: PUSH
18128: LD_INT 23
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: IN
18135: IFFALSE 18156
// points := [ 7 , 25 , 8 ] ;
18137: LD_ADDR_VAR 0 9
18141: PUSH
18142: LD_INT 7
18144: PUSH
18145: LD_INT 25
18147: PUSH
18148: LD_INT 8
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: LIST
18155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18156: LD_VAR 0 6
18160: PPUSH
18161: CALL_OW 264
18165: PUSH
18166: LD_INT 5
18168: PUSH
18169: LD_INT 27
18171: PUSH
18172: LD_INT 44
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: LIST
18179: IN
18180: IFFALSE 18201
// points := [ 14 , 50 , 16 ] ;
18182: LD_ADDR_VAR 0 9
18186: PUSH
18187: LD_INT 14
18189: PUSH
18190: LD_INT 50
18192: PUSH
18193: LD_INT 16
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: LIST
18200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18201: LD_VAR 0 6
18205: PPUSH
18206: CALL_OW 264
18210: PUSH
18211: LD_INT 6
18213: PUSH
18214: LD_INT 46
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: IN
18221: IFFALSE 18242
// points := [ 32 , 120 , 70 ] ;
18223: LD_ADDR_VAR 0 9
18227: PUSH
18228: LD_INT 32
18230: PUSH
18231: LD_INT 120
18233: PUSH
18234: LD_INT 70
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: LIST
18241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18242: LD_VAR 0 6
18246: PPUSH
18247: CALL_OW 264
18251: PUSH
18252: LD_INT 7
18254: PUSH
18255: LD_INT 28
18257: PUSH
18258: LD_INT 45
18260: PUSH
18261: LD_INT 92
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: IN
18270: IFFALSE 18291
// points := [ 35 , 20 , 45 ] ;
18272: LD_ADDR_VAR 0 9
18276: PUSH
18277: LD_INT 35
18279: PUSH
18280: LD_INT 20
18282: PUSH
18283: LD_INT 45
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18291: LD_VAR 0 6
18295: PPUSH
18296: CALL_OW 264
18300: PUSH
18301: LD_INT 47
18303: PUSH
18304: EMPTY
18305: LIST
18306: IN
18307: IFFALSE 18328
// points := [ 67 , 45 , 75 ] ;
18309: LD_ADDR_VAR 0 9
18313: PUSH
18314: LD_INT 67
18316: PUSH
18317: LD_INT 45
18319: PUSH
18320: LD_INT 75
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18328: LD_VAR 0 6
18332: PPUSH
18333: CALL_OW 264
18337: PUSH
18338: LD_INT 26
18340: PUSH
18341: EMPTY
18342: LIST
18343: IN
18344: IFFALSE 18365
// points := [ 120 , 30 , 80 ] ;
18346: LD_ADDR_VAR 0 9
18350: PUSH
18351: LD_INT 120
18353: PUSH
18354: LD_INT 30
18356: PUSH
18357: LD_INT 80
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: LIST
18364: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18365: LD_VAR 0 6
18369: PPUSH
18370: CALL_OW 264
18374: PUSH
18375: LD_INT 22
18377: PUSH
18378: EMPTY
18379: LIST
18380: IN
18381: IFFALSE 18402
// points := [ 40 , 1 , 1 ] ;
18383: LD_ADDR_VAR 0 9
18387: PUSH
18388: LD_INT 40
18390: PUSH
18391: LD_INT 1
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: LIST
18401: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18402: LD_VAR 0 6
18406: PPUSH
18407: CALL_OW 264
18411: PUSH
18412: LD_INT 29
18414: PUSH
18415: EMPTY
18416: LIST
18417: IN
18418: IFFALSE 18439
// points := [ 70 , 200 , 400 ] ;
18420: LD_ADDR_VAR 0 9
18424: PUSH
18425: LD_INT 70
18427: PUSH
18428: LD_INT 200
18430: PUSH
18431: LD_INT 400
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: LIST
18438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18439: LD_VAR 0 6
18443: PPUSH
18444: CALL_OW 264
18448: PUSH
18449: LD_INT 14
18451: PUSH
18452: LD_INT 53
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: IN
18459: IFFALSE 18480
// points := [ 40 , 10 , 20 ] ;
18461: LD_ADDR_VAR 0 9
18465: PUSH
18466: LD_INT 40
18468: PUSH
18469: LD_INT 10
18471: PUSH
18472: LD_INT 20
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: LIST
18479: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18480: LD_VAR 0 6
18484: PPUSH
18485: CALL_OW 264
18489: PUSH
18490: LD_INT 9
18492: PUSH
18493: EMPTY
18494: LIST
18495: IN
18496: IFFALSE 18517
// points := [ 5 , 70 , 20 ] ;
18498: LD_ADDR_VAR 0 9
18502: PUSH
18503: LD_INT 5
18505: PUSH
18506: LD_INT 70
18508: PUSH
18509: LD_INT 20
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: LIST
18516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18517: LD_VAR 0 6
18521: PPUSH
18522: CALL_OW 264
18526: PUSH
18527: LD_INT 10
18529: PUSH
18530: EMPTY
18531: LIST
18532: IN
18533: IFFALSE 18554
// points := [ 35 , 110 , 70 ] ;
18535: LD_ADDR_VAR 0 9
18539: PUSH
18540: LD_INT 35
18542: PUSH
18543: LD_INT 110
18545: PUSH
18546: LD_INT 70
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: LIST
18553: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18554: LD_VAR 0 6
18558: PPUSH
18559: CALL_OW 265
18563: PUSH
18564: LD_INT 25
18566: EQUAL
18567: IFFALSE 18588
// points := [ 80 , 65 , 100 ] ;
18569: LD_ADDR_VAR 0 9
18573: PUSH
18574: LD_INT 80
18576: PUSH
18577: LD_INT 65
18579: PUSH
18580: LD_INT 100
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: LIST
18587: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18588: LD_VAR 0 6
18592: PPUSH
18593: CALL_OW 263
18597: PUSH
18598: LD_INT 1
18600: EQUAL
18601: IFFALSE 18636
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18603: LD_ADDR_VAR 0 10
18607: PUSH
18608: LD_VAR 0 10
18612: PUSH
18613: LD_VAR 0 6
18617: PPUSH
18618: CALL_OW 311
18622: PPUSH
18623: LD_INT 3
18625: PPUSH
18626: CALL_OW 259
18630: PUSH
18631: LD_INT 4
18633: MUL
18634: MUL
18635: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18636: LD_VAR 0 6
18640: PPUSH
18641: CALL_OW 263
18645: PUSH
18646: LD_INT 2
18648: EQUAL
18649: IFFALSE 18700
// begin j := IsControledBy ( i ) ;
18651: LD_ADDR_VAR 0 7
18655: PUSH
18656: LD_VAR 0 6
18660: PPUSH
18661: CALL_OW 312
18665: ST_TO_ADDR
// if j then
18666: LD_VAR 0 7
18670: IFFALSE 18700
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18672: LD_ADDR_VAR 0 10
18676: PUSH
18677: LD_VAR 0 10
18681: PUSH
18682: LD_VAR 0 7
18686: PPUSH
18687: LD_INT 3
18689: PPUSH
18690: CALL_OW 259
18694: PUSH
18695: LD_INT 3
18697: MUL
18698: MUL
18699: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18700: LD_VAR 0 6
18704: PPUSH
18705: CALL_OW 264
18709: PUSH
18710: LD_INT 5
18712: PUSH
18713: LD_INT 6
18715: PUSH
18716: LD_INT 46
18718: PUSH
18719: LD_INT 44
18721: PUSH
18722: LD_INT 47
18724: PUSH
18725: LD_INT 45
18727: PUSH
18728: LD_INT 28
18730: PUSH
18731: LD_INT 7
18733: PUSH
18734: LD_INT 27
18736: PUSH
18737: LD_INT 29
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: IN
18752: IFFALSE 18772
18754: PUSH
18755: LD_VAR 0 1
18759: PPUSH
18760: LD_INT 52
18762: PPUSH
18763: CALL_OW 321
18767: PUSH
18768: LD_INT 2
18770: EQUAL
18771: AND
18772: IFFALSE 18789
// bpoints := bpoints * 1.2 ;
18774: LD_ADDR_VAR 0 10
18778: PUSH
18779: LD_VAR 0 10
18783: PUSH
18784: LD_REAL  1.20000000000000E+0000
18787: MUL
18788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18789: LD_VAR 0 6
18793: PPUSH
18794: CALL_OW 264
18798: PUSH
18799: LD_INT 6
18801: PUSH
18802: LD_INT 46
18804: PUSH
18805: LD_INT 47
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: LIST
18812: IN
18813: IFFALSE 18830
// bpoints := bpoints * 1.2 ;
18815: LD_ADDR_VAR 0 10
18819: PUSH
18820: LD_VAR 0 10
18824: PUSH
18825: LD_REAL  1.20000000000000E+0000
18828: MUL
18829: ST_TO_ADDR
// end ; unit_building :
18830: GO 18844
18832: LD_INT 3
18834: DOUBLE
18835: EQUAL
18836: IFTRUE 18840
18838: GO 18843
18840: POP
// ; end ;
18841: GO 18844
18843: POP
// for j = 1 to 3 do
18844: LD_ADDR_VAR 0 7
18848: PUSH
18849: DOUBLE
18850: LD_INT 1
18852: DEC
18853: ST_TO_ADDR
18854: LD_INT 3
18856: PUSH
18857: FOR_TO
18858: IFFALSE 18911
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18860: LD_ADDR_VAR 0 5
18864: PUSH
18865: LD_VAR 0 5
18869: PPUSH
18870: LD_VAR 0 7
18874: PPUSH
18875: LD_VAR 0 5
18879: PUSH
18880: LD_VAR 0 7
18884: ARRAY
18885: PUSH
18886: LD_VAR 0 9
18890: PUSH
18891: LD_VAR 0 7
18895: ARRAY
18896: PUSH
18897: LD_VAR 0 10
18901: MUL
18902: PLUS
18903: PPUSH
18904: CALL_OW 1
18908: ST_TO_ADDR
18909: GO 18857
18911: POP
18912: POP
// end ;
18913: GO 17386
18915: POP
18916: POP
// result := Replace ( result , 4 , tmp ) ;
18917: LD_ADDR_VAR 0 5
18921: PUSH
18922: LD_VAR 0 5
18926: PPUSH
18927: LD_INT 4
18929: PPUSH
18930: LD_VAR 0 8
18934: PPUSH
18935: CALL_OW 1
18939: ST_TO_ADDR
// end ;
18940: LD_VAR 0 5
18944: RET
// export function DangerAtRange ( unit , range ) ; begin
18945: LD_INT 0
18947: PPUSH
// if not unit then
18948: LD_VAR 0 1
18952: NOT
18953: IFFALSE 18957
// exit ;
18955: GO 19002
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18957: LD_ADDR_VAR 0 3
18961: PUSH
18962: LD_VAR 0 1
18966: PPUSH
18967: CALL_OW 255
18971: PPUSH
18972: LD_VAR 0 1
18976: PPUSH
18977: CALL_OW 250
18981: PPUSH
18982: LD_VAR 0 1
18986: PPUSH
18987: CALL_OW 251
18991: PPUSH
18992: LD_VAR 0 2
18996: PPUSH
18997: CALL 17236 0 4
19001: ST_TO_ADDR
// end ;
19002: LD_VAR 0 3
19006: RET
// export function DangerInArea ( side , area ) ; begin
19007: LD_INT 0
19009: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19010: LD_ADDR_VAR 0 3
19014: PUSH
19015: LD_VAR 0 2
19019: PPUSH
19020: LD_INT 81
19022: PUSH
19023: LD_VAR 0 1
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PPUSH
19032: CALL_OW 70
19036: ST_TO_ADDR
// end ;
19037: LD_VAR 0 3
19041: RET
// export function IsExtension ( b ) ; begin
19042: LD_INT 0
19044: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19045: LD_ADDR_VAR 0 2
19049: PUSH
19050: LD_VAR 0 1
19054: PUSH
19055: LD_INT 23
19057: PUSH
19058: LD_INT 20
19060: PUSH
19061: LD_INT 22
19063: PUSH
19064: LD_INT 17
19066: PUSH
19067: LD_INT 24
19069: PUSH
19070: LD_INT 21
19072: PUSH
19073: LD_INT 19
19075: PUSH
19076: LD_INT 16
19078: PUSH
19079: LD_INT 25
19081: PUSH
19082: LD_INT 18
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: IN
19097: ST_TO_ADDR
// end ;
19098: LD_VAR 0 2
19102: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19103: LD_INT 0
19105: PPUSH
19106: PPUSH
19107: PPUSH
// result := [ ] ;
19108: LD_ADDR_VAR 0 4
19112: PUSH
19113: EMPTY
19114: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19115: LD_ADDR_VAR 0 5
19119: PUSH
19120: LD_VAR 0 2
19124: PPUSH
19125: LD_INT 21
19127: PUSH
19128: LD_INT 3
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PPUSH
19135: CALL_OW 70
19139: ST_TO_ADDR
// if not tmp then
19140: LD_VAR 0 5
19144: NOT
19145: IFFALSE 19149
// exit ;
19147: GO 19213
// if checkLink then
19149: LD_VAR 0 3
19153: IFFALSE 19203
// begin for i in tmp do
19155: LD_ADDR_VAR 0 6
19159: PUSH
19160: LD_VAR 0 5
19164: PUSH
19165: FOR_IN
19166: IFFALSE 19201
// if GetBase ( i ) <> base then
19168: LD_VAR 0 6
19172: PPUSH
19173: CALL_OW 274
19177: PUSH
19178: LD_VAR 0 1
19182: NONEQUAL
19183: IFFALSE 19199
// ComLinkToBase ( base , i ) ;
19185: LD_VAR 0 1
19189: PPUSH
19190: LD_VAR 0 6
19194: PPUSH
19195: CALL_OW 169
19199: GO 19165
19201: POP
19202: POP
// end ; result := tmp ;
19203: LD_ADDR_VAR 0 4
19207: PUSH
19208: LD_VAR 0 5
19212: ST_TO_ADDR
// end ;
19213: LD_VAR 0 4
19217: RET
// export function ComComplete ( units , b ) ; var i ; begin
19218: LD_INT 0
19220: PPUSH
19221: PPUSH
// if not units then
19222: LD_VAR 0 1
19226: NOT
19227: IFFALSE 19231
// exit ;
19229: GO 19321
// for i in units do
19231: LD_ADDR_VAR 0 4
19235: PUSH
19236: LD_VAR 0 1
19240: PUSH
19241: FOR_IN
19242: IFFALSE 19319
// if BuildingStatus ( b ) = bs_build then
19244: LD_VAR 0 2
19248: PPUSH
19249: CALL_OW 461
19253: PUSH
19254: LD_INT 1
19256: EQUAL
19257: IFFALSE 19317
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19259: LD_VAR 0 4
19263: PPUSH
19264: LD_STRING h
19266: PUSH
19267: LD_VAR 0 2
19271: PPUSH
19272: CALL_OW 250
19276: PUSH
19277: LD_VAR 0 2
19281: PPUSH
19282: CALL_OW 251
19286: PUSH
19287: LD_VAR 0 2
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: LD_INT 0
19297: PUSH
19298: LD_INT 0
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: PPUSH
19313: CALL_OW 446
19317: GO 19241
19319: POP
19320: POP
// end ;
19321: LD_VAR 0 3
19325: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19326: LD_INT 0
19328: PPUSH
19329: PPUSH
19330: PPUSH
19331: PPUSH
19332: PPUSH
19333: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19334: LD_VAR 0 1
19338: NOT
19339: IFTRUE 19356
19341: PUSH
19342: LD_VAR 0 1
19346: PPUSH
19347: CALL_OW 263
19351: PUSH
19352: LD_INT 2
19354: NONEQUAL
19355: OR
19356: IFFALSE 19360
// exit ;
19358: GO 19676
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19360: LD_ADDR_VAR 0 6
19364: PUSH
19365: LD_INT 22
19367: PUSH
19368: LD_VAR 0 1
19372: PPUSH
19373: CALL_OW 255
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 2
19384: PUSH
19385: LD_INT 30
19387: PUSH
19388: LD_INT 36
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 34
19397: PUSH
19398: LD_INT 31
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: LIST
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PPUSH
19414: CALL_OW 69
19418: ST_TO_ADDR
// if not tmp then
19419: LD_VAR 0 6
19423: NOT
19424: IFFALSE 19428
// exit ;
19426: GO 19676
// result := [ ] ;
19428: LD_ADDR_VAR 0 2
19432: PUSH
19433: EMPTY
19434: ST_TO_ADDR
// for i in tmp do
19435: LD_ADDR_VAR 0 3
19439: PUSH
19440: LD_VAR 0 6
19444: PUSH
19445: FOR_IN
19446: IFFALSE 19517
// begin t := UnitsInside ( i ) ;
19448: LD_ADDR_VAR 0 4
19452: PUSH
19453: LD_VAR 0 3
19457: PPUSH
19458: CALL_OW 313
19462: ST_TO_ADDR
// if t then
19463: LD_VAR 0 4
19467: IFFALSE 19515
// for j in t do
19469: LD_ADDR_VAR 0 7
19473: PUSH
19474: LD_VAR 0 4
19478: PUSH
19479: FOR_IN
19480: IFFALSE 19513
// result := Replace ( result , result + 1 , j ) ;
19482: LD_ADDR_VAR 0 2
19486: PUSH
19487: LD_VAR 0 2
19491: PPUSH
19492: LD_VAR 0 2
19496: PUSH
19497: LD_INT 1
19499: PLUS
19500: PPUSH
19501: LD_VAR 0 7
19505: PPUSH
19506: CALL_OW 1
19510: ST_TO_ADDR
19511: GO 19479
19513: POP
19514: POP
// end ;
19515: GO 19445
19517: POP
19518: POP
// if not result then
19519: LD_VAR 0 2
19523: NOT
19524: IFFALSE 19528
// exit ;
19526: GO 19676
// mech := result [ 1 ] ;
19528: LD_ADDR_VAR 0 5
19532: PUSH
19533: LD_VAR 0 2
19537: PUSH
19538: LD_INT 1
19540: ARRAY
19541: ST_TO_ADDR
// if result > 1 then
19542: LD_VAR 0 2
19546: PUSH
19547: LD_INT 1
19549: GREATER
19550: IFFALSE 19662
// begin for i = 2 to result do
19552: LD_ADDR_VAR 0 3
19556: PUSH
19557: DOUBLE
19558: LD_INT 2
19560: DEC
19561: ST_TO_ADDR
19562: LD_VAR 0 2
19566: PUSH
19567: FOR_TO
19568: IFFALSE 19660
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19570: LD_ADDR_VAR 0 4
19574: PUSH
19575: LD_VAR 0 2
19579: PUSH
19580: LD_VAR 0 3
19584: ARRAY
19585: PPUSH
19586: LD_INT 3
19588: PPUSH
19589: CALL_OW 259
19593: PUSH
19594: LD_VAR 0 2
19598: PUSH
19599: LD_VAR 0 3
19603: ARRAY
19604: PPUSH
19605: CALL_OW 432
19609: MINUS
19610: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19611: LD_VAR 0 4
19615: PUSH
19616: LD_VAR 0 5
19620: PPUSH
19621: LD_INT 3
19623: PPUSH
19624: CALL_OW 259
19628: PUSH
19629: LD_VAR 0 5
19633: PPUSH
19634: CALL_OW 432
19638: MINUS
19639: GREATEREQUAL
19640: IFFALSE 19658
// mech := result [ i ] ;
19642: LD_ADDR_VAR 0 5
19646: PUSH
19647: LD_VAR 0 2
19651: PUSH
19652: LD_VAR 0 3
19656: ARRAY
19657: ST_TO_ADDR
// end ;
19658: GO 19567
19660: POP
19661: POP
// end ; ComLinkTo ( vehicle , mech ) ;
19662: LD_VAR 0 1
19666: PPUSH
19667: LD_VAR 0 5
19671: PPUSH
19672: CALL_OW 135
// end ;
19676: LD_VAR 0 2
19680: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19681: LD_INT 0
19683: PPUSH
19684: PPUSH
19685: PPUSH
19686: PPUSH
19687: PPUSH
19688: PPUSH
19689: PPUSH
19690: PPUSH
19691: PPUSH
19692: PPUSH
19693: PPUSH
19694: PPUSH
19695: PPUSH
// result := [ ] ;
19696: LD_ADDR_VAR 0 7
19700: PUSH
19701: EMPTY
19702: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19703: LD_VAR 0 1
19707: PPUSH
19708: CALL_OW 266
19712: PUSH
19713: LD_INT 0
19715: PUSH
19716: LD_INT 1
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: IN
19723: NOT
19724: IFFALSE 19728
// exit ;
19726: GO 21368
// if name then
19728: LD_VAR 0 3
19732: IFFALSE 19748
// SetBName ( base_dep , name ) ;
19734: LD_VAR 0 1
19738: PPUSH
19739: LD_VAR 0 3
19743: PPUSH
19744: CALL_OW 500
// base := GetBase ( base_dep ) ;
19748: LD_ADDR_VAR 0 15
19752: PUSH
19753: LD_VAR 0 1
19757: PPUSH
19758: CALL_OW 274
19762: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19763: LD_ADDR_VAR 0 16
19767: PUSH
19768: LD_VAR 0 1
19772: PPUSH
19773: CALL_OW 255
19777: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19778: LD_ADDR_VAR 0 17
19782: PUSH
19783: LD_VAR 0 1
19787: PPUSH
19788: CALL_OW 248
19792: ST_TO_ADDR
// if sources then
19793: LD_VAR 0 5
19797: IFFALSE 19844
// for i = 1 to 3 do
19799: LD_ADDR_VAR 0 8
19803: PUSH
19804: DOUBLE
19805: LD_INT 1
19807: DEC
19808: ST_TO_ADDR
19809: LD_INT 3
19811: PUSH
19812: FOR_TO
19813: IFFALSE 19842
// AddResourceType ( base , i , sources [ i ] ) ;
19815: LD_VAR 0 15
19819: PPUSH
19820: LD_VAR 0 8
19824: PPUSH
19825: LD_VAR 0 5
19829: PUSH
19830: LD_VAR 0 8
19834: ARRAY
19835: PPUSH
19836: CALL_OW 276
19840: GO 19812
19842: POP
19843: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19844: LD_ADDR_VAR 0 18
19848: PUSH
19849: LD_VAR 0 15
19853: PPUSH
19854: LD_VAR 0 2
19858: PPUSH
19859: LD_INT 1
19861: PPUSH
19862: CALL 19103 0 3
19866: ST_TO_ADDR
// InitHc ;
19867: CALL_OW 19
// InitUc ;
19871: CALL_OW 18
// uc_side := side ;
19875: LD_ADDR_OWVAR 20
19879: PUSH
19880: LD_VAR 0 16
19884: ST_TO_ADDR
// uc_nation := nation ;
19885: LD_ADDR_OWVAR 21
19889: PUSH
19890: LD_VAR 0 17
19894: ST_TO_ADDR
// if buildings then
19895: LD_VAR 0 18
19899: IFFALSE 21227
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19901: LD_ADDR_VAR 0 19
19905: PUSH
19906: LD_VAR 0 18
19910: PPUSH
19911: LD_INT 2
19913: PUSH
19914: LD_INT 30
19916: PUSH
19917: LD_INT 29
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 30
19926: PUSH
19927: LD_INT 30
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: LIST
19938: PPUSH
19939: CALL_OW 72
19943: ST_TO_ADDR
// if tmp then
19944: LD_VAR 0 19
19948: IFFALSE 19996
// for i in tmp do
19950: LD_ADDR_VAR 0 8
19954: PUSH
19955: LD_VAR 0 19
19959: PUSH
19960: FOR_IN
19961: IFFALSE 19994
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19963: LD_VAR 0 8
19967: PPUSH
19968: CALL_OW 250
19972: PPUSH
19973: LD_VAR 0 8
19977: PPUSH
19978: CALL_OW 251
19982: PPUSH
19983: LD_VAR 0 16
19987: PPUSH
19988: CALL_OW 441
19992: GO 19960
19994: POP
19995: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19996: LD_VAR 0 18
20000: PPUSH
20001: LD_INT 2
20003: PUSH
20004: LD_INT 30
20006: PUSH
20007: LD_INT 32
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 30
20016: PUSH
20017: LD_INT 33
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: LIST
20028: PPUSH
20029: CALL_OW 72
20033: IFFALSE 20121
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20035: LD_ADDR_VAR 0 8
20039: PUSH
20040: LD_VAR 0 18
20044: PPUSH
20045: LD_INT 2
20047: PUSH
20048: LD_INT 30
20050: PUSH
20051: LD_INT 32
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 30
20060: PUSH
20061: LD_INT 33
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: PPUSH
20073: CALL_OW 72
20077: PUSH
20078: FOR_IN
20079: IFFALSE 20119
// begin if not GetBWeapon ( i ) then
20081: LD_VAR 0 8
20085: PPUSH
20086: CALL_OW 269
20090: NOT
20091: IFFALSE 20117
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20093: LD_VAR 0 8
20097: PPUSH
20098: LD_VAR 0 8
20102: PPUSH
20103: LD_VAR 0 2
20107: PPUSH
20108: CALL 21373 0 2
20112: PPUSH
20113: CALL_OW 431
// end ;
20117: GO 20078
20119: POP
20120: POP
// end ; for i = 1 to personel do
20121: LD_ADDR_VAR 0 8
20125: PUSH
20126: DOUBLE
20127: LD_INT 1
20129: DEC
20130: ST_TO_ADDR
20131: LD_VAR 0 6
20135: PUSH
20136: FOR_TO
20137: IFFALSE 21207
// begin if i > 4 then
20139: LD_VAR 0 8
20143: PUSH
20144: LD_INT 4
20146: GREATER
20147: IFFALSE 20151
// break ;
20149: GO 21207
// case i of 1 :
20151: LD_VAR 0 8
20155: PUSH
20156: LD_INT 1
20158: DOUBLE
20159: EQUAL
20160: IFTRUE 20164
20162: GO 20244
20164: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20165: LD_ADDR_VAR 0 12
20169: PUSH
20170: LD_VAR 0 18
20174: PPUSH
20175: LD_INT 22
20177: PUSH
20178: LD_VAR 0 16
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 58
20189: PUSH
20190: EMPTY
20191: LIST
20192: PUSH
20193: LD_INT 2
20195: PUSH
20196: LD_INT 30
20198: PUSH
20199: LD_INT 32
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 30
20208: PUSH
20209: LD_INT 4
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 30
20218: PUSH
20219: LD_INT 5
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: LIST
20236: PPUSH
20237: CALL_OW 72
20241: ST_TO_ADDR
20242: GO 20466
20244: LD_INT 2
20246: DOUBLE
20247: EQUAL
20248: IFTRUE 20252
20250: GO 20314
20252: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20253: LD_ADDR_VAR 0 12
20257: PUSH
20258: LD_VAR 0 18
20262: PPUSH
20263: LD_INT 22
20265: PUSH
20266: LD_VAR 0 16
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 2
20277: PUSH
20278: LD_INT 30
20280: PUSH
20281: LD_INT 0
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 30
20290: PUSH
20291: LD_INT 1
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: LIST
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PPUSH
20307: CALL_OW 72
20311: ST_TO_ADDR
20312: GO 20466
20314: LD_INT 3
20316: DOUBLE
20317: EQUAL
20318: IFTRUE 20322
20320: GO 20384
20322: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20323: LD_ADDR_VAR 0 12
20327: PUSH
20328: LD_VAR 0 18
20332: PPUSH
20333: LD_INT 22
20335: PUSH
20336: LD_VAR 0 16
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 2
20347: PUSH
20348: LD_INT 30
20350: PUSH
20351: LD_INT 2
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 30
20360: PUSH
20361: LD_INT 3
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: LIST
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PPUSH
20377: CALL_OW 72
20381: ST_TO_ADDR
20382: GO 20466
20384: LD_INT 4
20386: DOUBLE
20387: EQUAL
20388: IFTRUE 20392
20390: GO 20465
20392: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20393: LD_ADDR_VAR 0 12
20397: PUSH
20398: LD_VAR 0 18
20402: PPUSH
20403: LD_INT 22
20405: PUSH
20406: LD_VAR 0 16
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 2
20417: PUSH
20418: LD_INT 30
20420: PUSH
20421: LD_INT 6
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 30
20430: PUSH
20431: LD_INT 7
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 30
20440: PUSH
20441: LD_INT 8
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PPUSH
20458: CALL_OW 72
20462: ST_TO_ADDR
20463: GO 20466
20465: POP
// if i = 1 then
20466: LD_VAR 0 8
20470: PUSH
20471: LD_INT 1
20473: EQUAL
20474: IFFALSE 20585
// begin tmp := [ ] ;
20476: LD_ADDR_VAR 0 19
20480: PUSH
20481: EMPTY
20482: ST_TO_ADDR
// for j in f do
20483: LD_ADDR_VAR 0 9
20487: PUSH
20488: LD_VAR 0 12
20492: PUSH
20493: FOR_IN
20494: IFFALSE 20567
// if GetBType ( j ) = b_bunker then
20496: LD_VAR 0 9
20500: PPUSH
20501: CALL_OW 266
20505: PUSH
20506: LD_INT 32
20508: EQUAL
20509: IFFALSE 20536
// tmp := Insert ( tmp , 1 , j ) else
20511: LD_ADDR_VAR 0 19
20515: PUSH
20516: LD_VAR 0 19
20520: PPUSH
20521: LD_INT 1
20523: PPUSH
20524: LD_VAR 0 9
20528: PPUSH
20529: CALL_OW 2
20533: ST_TO_ADDR
20534: GO 20565
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20536: LD_ADDR_VAR 0 19
20540: PUSH
20541: LD_VAR 0 19
20545: PPUSH
20546: LD_VAR 0 19
20550: PUSH
20551: LD_INT 1
20553: PLUS
20554: PPUSH
20555: LD_VAR 0 9
20559: PPUSH
20560: CALL_OW 2
20564: ST_TO_ADDR
20565: GO 20493
20567: POP
20568: POP
// if tmp then
20569: LD_VAR 0 19
20573: IFFALSE 20585
// f := tmp ;
20575: LD_ADDR_VAR 0 12
20579: PUSH
20580: LD_VAR 0 19
20584: ST_TO_ADDR
// end ; x := personel [ i ] ;
20585: LD_ADDR_VAR 0 13
20589: PUSH
20590: LD_VAR 0 6
20594: PUSH
20595: LD_VAR 0 8
20599: ARRAY
20600: ST_TO_ADDR
// if x = - 1 then
20601: LD_VAR 0 13
20605: PUSH
20606: LD_INT 1
20608: NEG
20609: EQUAL
20610: IFFALSE 20821
// begin for j in f do
20612: LD_ADDR_VAR 0 9
20616: PUSH
20617: LD_VAR 0 12
20621: PUSH
20622: FOR_IN
20623: IFFALSE 20817
// repeat InitHc ;
20625: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20629: LD_VAR 0 9
20633: PPUSH
20634: CALL_OW 266
20638: PUSH
20639: LD_INT 5
20641: EQUAL
20642: IFFALSE 20712
// begin if UnitsInside ( j ) < 3 then
20644: LD_VAR 0 9
20648: PPUSH
20649: CALL_OW 313
20653: PUSH
20654: LD_INT 3
20656: LESS
20657: IFFALSE 20693
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20659: LD_INT 0
20661: PPUSH
20662: LD_INT 5
20664: PUSH
20665: LD_INT 8
20667: PUSH
20668: LD_INT 9
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: PUSH
20676: LD_VAR 0 17
20680: ARRAY
20681: PPUSH
20682: LD_VAR 0 4
20686: PPUSH
20687: CALL_OW 380
20691: GO 20710
// PrepareHuman ( false , i , skill ) ;
20693: LD_INT 0
20695: PPUSH
20696: LD_VAR 0 8
20700: PPUSH
20701: LD_VAR 0 4
20705: PPUSH
20706: CALL_OW 380
// end else
20710: GO 20729
// PrepareHuman ( false , i , skill ) ;
20712: LD_INT 0
20714: PPUSH
20715: LD_VAR 0 8
20719: PPUSH
20720: LD_VAR 0 4
20724: PPUSH
20725: CALL_OW 380
// un := CreateHuman ;
20729: LD_ADDR_VAR 0 14
20733: PUSH
20734: CALL_OW 44
20738: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20739: LD_ADDR_VAR 0 7
20743: PUSH
20744: LD_VAR 0 7
20748: PPUSH
20749: LD_INT 1
20751: PPUSH
20752: LD_VAR 0 14
20756: PPUSH
20757: CALL_OW 2
20761: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20762: LD_VAR 0 14
20766: PPUSH
20767: LD_VAR 0 9
20771: PPUSH
20772: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20776: LD_VAR 0 9
20780: PPUSH
20781: CALL_OW 313
20785: PUSH
20786: LD_INT 6
20788: EQUAL
20789: IFTRUE 20813
20791: PUSH
20792: LD_VAR 0 9
20796: PPUSH
20797: CALL_OW 266
20801: PUSH
20802: LD_INT 32
20804: PUSH
20805: LD_INT 31
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: IN
20812: OR
20813: IFFALSE 20625
20815: GO 20622
20817: POP
20818: POP
// end else
20819: GO 21205
// for j = 1 to x do
20821: LD_ADDR_VAR 0 9
20825: PUSH
20826: DOUBLE
20827: LD_INT 1
20829: DEC
20830: ST_TO_ADDR
20831: LD_VAR 0 13
20835: PUSH
20836: FOR_TO
20837: IFFALSE 21203
// begin InitHc ;
20839: CALL_OW 19
// if not f then
20843: LD_VAR 0 12
20847: NOT
20848: IFFALSE 20937
// begin PrepareHuman ( false , i , skill ) ;
20850: LD_INT 0
20852: PPUSH
20853: LD_VAR 0 8
20857: PPUSH
20858: LD_VAR 0 4
20862: PPUSH
20863: CALL_OW 380
// un := CreateHuman ;
20867: LD_ADDR_VAR 0 14
20871: PUSH
20872: CALL_OW 44
20876: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20877: LD_ADDR_VAR 0 7
20881: PUSH
20882: LD_VAR 0 7
20886: PPUSH
20887: LD_INT 1
20889: PPUSH
20890: LD_VAR 0 14
20894: PPUSH
20895: CALL_OW 2
20899: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20900: LD_VAR 0 14
20904: PPUSH
20905: LD_VAR 0 1
20909: PPUSH
20910: CALL_OW 250
20914: PPUSH
20915: LD_VAR 0 1
20919: PPUSH
20920: CALL_OW 251
20924: PPUSH
20925: LD_INT 10
20927: PPUSH
20928: LD_INT 0
20930: PPUSH
20931: CALL_OW 50
// continue ;
20935: GO 20836
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20937: LD_VAR 0 12
20941: PUSH
20942: LD_INT 1
20944: ARRAY
20945: PPUSH
20946: CALL_OW 313
20950: IFFALSE 20978
20952: PUSH
20953: LD_VAR 0 12
20957: PUSH
20958: LD_INT 1
20960: ARRAY
20961: PPUSH
20962: CALL_OW 266
20966: PUSH
20967: LD_INT 32
20969: PUSH
20970: LD_INT 31
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: IN
20977: AND
20978: IFTRUE 20999
20980: PUSH
20981: LD_VAR 0 12
20985: PUSH
20986: LD_INT 1
20988: ARRAY
20989: PPUSH
20990: CALL_OW 313
20994: PUSH
20995: LD_INT 6
20997: EQUAL
20998: OR
20999: IFFALSE 21019
// f := Delete ( f , 1 ) ;
21001: LD_ADDR_VAR 0 12
21005: PUSH
21006: LD_VAR 0 12
21010: PPUSH
21011: LD_INT 1
21013: PPUSH
21014: CALL_OW 3
21018: ST_TO_ADDR
// if not f then
21019: LD_VAR 0 12
21023: NOT
21024: IFFALSE 21042
// begin x := x + 2 ;
21026: LD_ADDR_VAR 0 13
21030: PUSH
21031: LD_VAR 0 13
21035: PUSH
21036: LD_INT 2
21038: PLUS
21039: ST_TO_ADDR
// continue ;
21040: GO 20836
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21042: LD_VAR 0 12
21046: PUSH
21047: LD_INT 1
21049: ARRAY
21050: PPUSH
21051: CALL_OW 266
21055: PUSH
21056: LD_INT 5
21058: EQUAL
21059: IFFALSE 21133
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21061: LD_VAR 0 12
21065: PUSH
21066: LD_INT 1
21068: ARRAY
21069: PPUSH
21070: CALL_OW 313
21074: PUSH
21075: LD_INT 3
21077: LESS
21078: IFFALSE 21114
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21080: LD_INT 0
21082: PPUSH
21083: LD_INT 5
21085: PUSH
21086: LD_INT 8
21088: PUSH
21089: LD_INT 9
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: LIST
21096: PUSH
21097: LD_VAR 0 17
21101: ARRAY
21102: PPUSH
21103: LD_VAR 0 4
21107: PPUSH
21108: CALL_OW 380
21112: GO 21131
// PrepareHuman ( false , i , skill ) ;
21114: LD_INT 0
21116: PPUSH
21117: LD_VAR 0 8
21121: PPUSH
21122: LD_VAR 0 4
21126: PPUSH
21127: CALL_OW 380
// end else
21131: GO 21150
// PrepareHuman ( false , i , skill ) ;
21133: LD_INT 0
21135: PPUSH
21136: LD_VAR 0 8
21140: PPUSH
21141: LD_VAR 0 4
21145: PPUSH
21146: CALL_OW 380
// un := CreateHuman ;
21150: LD_ADDR_VAR 0 14
21154: PUSH
21155: CALL_OW 44
21159: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21160: LD_ADDR_VAR 0 7
21164: PUSH
21165: LD_VAR 0 7
21169: PPUSH
21170: LD_INT 1
21172: PPUSH
21173: LD_VAR 0 14
21177: PPUSH
21178: CALL_OW 2
21182: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21183: LD_VAR 0 14
21187: PPUSH
21188: LD_VAR 0 12
21192: PUSH
21193: LD_INT 1
21195: ARRAY
21196: PPUSH
21197: CALL_OW 52
// end ;
21201: GO 20836
21203: POP
21204: POP
// end ;
21205: GO 20136
21207: POP
21208: POP
// result := result ^ buildings ;
21209: LD_ADDR_VAR 0 7
21213: PUSH
21214: LD_VAR 0 7
21218: PUSH
21219: LD_VAR 0 18
21223: ADD
21224: ST_TO_ADDR
// end else
21225: GO 21368
// begin for i = 1 to personel do
21227: LD_ADDR_VAR 0 8
21231: PUSH
21232: DOUBLE
21233: LD_INT 1
21235: DEC
21236: ST_TO_ADDR
21237: LD_VAR 0 6
21241: PUSH
21242: FOR_TO
21243: IFFALSE 21366
// begin if i > 4 then
21245: LD_VAR 0 8
21249: PUSH
21250: LD_INT 4
21252: GREATER
21253: IFFALSE 21257
// break ;
21255: GO 21366
// x := personel [ i ] ;
21257: LD_ADDR_VAR 0 13
21261: PUSH
21262: LD_VAR 0 6
21266: PUSH
21267: LD_VAR 0 8
21271: ARRAY
21272: ST_TO_ADDR
// if x = - 1 then
21273: LD_VAR 0 13
21277: PUSH
21278: LD_INT 1
21280: NEG
21281: EQUAL
21282: IFFALSE 21286
// continue ;
21284: GO 21242
// PrepareHuman ( false , i , skill ) ;
21286: LD_INT 0
21288: PPUSH
21289: LD_VAR 0 8
21293: PPUSH
21294: LD_VAR 0 4
21298: PPUSH
21299: CALL_OW 380
// un := CreateHuman ;
21303: LD_ADDR_VAR 0 14
21307: PUSH
21308: CALL_OW 44
21312: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21313: LD_VAR 0 14
21317: PPUSH
21318: LD_VAR 0 1
21322: PPUSH
21323: CALL_OW 250
21327: PPUSH
21328: LD_VAR 0 1
21332: PPUSH
21333: CALL_OW 251
21337: PPUSH
21338: LD_INT 10
21340: PPUSH
21341: LD_INT 0
21343: PPUSH
21344: CALL_OW 50
// result := result ^ un ;
21348: LD_ADDR_VAR 0 7
21352: PUSH
21353: LD_VAR 0 7
21357: PUSH
21358: LD_VAR 0 14
21362: ADD
21363: ST_TO_ADDR
// end ;
21364: GO 21242
21366: POP
21367: POP
// end ; end ;
21368: LD_VAR 0 7
21372: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21373: LD_INT 0
21375: PPUSH
21376: PPUSH
21377: PPUSH
21378: PPUSH
21379: PPUSH
21380: PPUSH
21381: PPUSH
21382: PPUSH
21383: PPUSH
21384: PPUSH
21385: PPUSH
21386: PPUSH
21387: PPUSH
21388: PPUSH
21389: PPUSH
21390: PPUSH
// result := false ;
21391: LD_ADDR_VAR 0 3
21395: PUSH
21396: LD_INT 0
21398: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21399: LD_VAR 0 1
21403: NOT
21404: IFTRUE 21429
21406: PUSH
21407: LD_VAR 0 1
21411: PPUSH
21412: CALL_OW 266
21416: PUSH
21417: LD_INT 32
21419: PUSH
21420: LD_INT 33
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: IN
21427: NOT
21428: OR
21429: IFFALSE 21433
// exit ;
21431: GO 22568
// nat := GetNation ( tower ) ;
21433: LD_ADDR_VAR 0 12
21437: PUSH
21438: LD_VAR 0 1
21442: PPUSH
21443: CALL_OW 248
21447: ST_TO_ADDR
// side := GetSide ( tower ) ;
21448: LD_ADDR_VAR 0 16
21452: PUSH
21453: LD_VAR 0 1
21457: PPUSH
21458: CALL_OW 255
21462: ST_TO_ADDR
// x := GetX ( tower ) ;
21463: LD_ADDR_VAR 0 10
21467: PUSH
21468: LD_VAR 0 1
21472: PPUSH
21473: CALL_OW 250
21477: ST_TO_ADDR
// y := GetY ( tower ) ;
21478: LD_ADDR_VAR 0 11
21482: PUSH
21483: LD_VAR 0 1
21487: PPUSH
21488: CALL_OW 251
21492: ST_TO_ADDR
// if not x or not y then
21493: LD_VAR 0 10
21497: NOT
21498: IFTRUE 21507
21500: PUSH
21501: LD_VAR 0 11
21505: NOT
21506: OR
21507: IFFALSE 21511
// exit ;
21509: GO 22568
// weapon := 0 ;
21511: LD_ADDR_VAR 0 18
21515: PUSH
21516: LD_INT 0
21518: ST_TO_ADDR
// fac_list := [ ] ;
21519: LD_ADDR_VAR 0 17
21523: PUSH
21524: EMPTY
21525: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21526: LD_ADDR_VAR 0 6
21530: PUSH
21531: LD_VAR 0 1
21535: PPUSH
21536: CALL_OW 274
21540: PPUSH
21541: LD_VAR 0 2
21545: PPUSH
21546: LD_INT 0
21548: PPUSH
21549: CALL 19103 0 3
21553: PPUSH
21554: LD_INT 30
21556: PUSH
21557: LD_INT 3
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PPUSH
21564: CALL_OW 72
21568: ST_TO_ADDR
// if not factories then
21569: LD_VAR 0 6
21573: NOT
21574: IFFALSE 21578
// exit ;
21576: GO 22568
// for i in factories do
21578: LD_ADDR_VAR 0 8
21582: PUSH
21583: LD_VAR 0 6
21587: PUSH
21588: FOR_IN
21589: IFFALSE 21614
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21591: LD_ADDR_VAR 0 17
21595: PUSH
21596: LD_VAR 0 17
21600: PUSH
21601: LD_VAR 0 8
21605: PPUSH
21606: CALL_OW 478
21610: UNION
21611: ST_TO_ADDR
21612: GO 21588
21614: POP
21615: POP
// if not fac_list then
21616: LD_VAR 0 17
21620: NOT
21621: IFFALSE 21625
// exit ;
21623: GO 22568
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21625: LD_ADDR_VAR 0 5
21629: PUSH
21630: LD_INT 4
21632: PUSH
21633: LD_INT 5
21635: PUSH
21636: LD_INT 9
21638: PUSH
21639: LD_INT 10
21641: PUSH
21642: LD_INT 6
21644: PUSH
21645: LD_INT 7
21647: PUSH
21648: LD_INT 11
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 27
21662: PUSH
21663: LD_INT 28
21665: PUSH
21666: LD_INT 26
21668: PUSH
21669: LD_INT 30
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 43
21680: PUSH
21681: LD_INT 44
21683: PUSH
21684: LD_INT 46
21686: PUSH
21687: LD_INT 45
21689: PUSH
21690: LD_INT 47
21692: PUSH
21693: LD_INT 49
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: LIST
21708: PUSH
21709: LD_VAR 0 12
21713: ARRAY
21714: ST_TO_ADDR
// list := list isect fac_list ;
21715: LD_ADDR_VAR 0 5
21719: PUSH
21720: LD_VAR 0 5
21724: PUSH
21725: LD_VAR 0 17
21729: ISECT
21730: ST_TO_ADDR
// if not list then
21731: LD_VAR 0 5
21735: NOT
21736: IFFALSE 21740
// exit ;
21738: GO 22568
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21740: LD_VAR 0 12
21744: PUSH
21745: LD_INT 3
21747: EQUAL
21748: IFFALSE 21760
21750: PUSH
21751: LD_INT 49
21753: PUSH
21754: LD_VAR 0 5
21758: IN
21759: AND
21760: IFFALSE 21780
21762: PUSH
21763: LD_INT 31
21765: PPUSH
21766: LD_VAR 0 16
21770: PPUSH
21771: CALL_OW 321
21775: PUSH
21776: LD_INT 2
21778: EQUAL
21779: AND
21780: IFFALSE 21840
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21782: LD_INT 22
21784: PUSH
21785: LD_VAR 0 16
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 35
21796: PUSH
21797: LD_INT 49
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 91
21806: PUSH
21807: LD_VAR 0 1
21811: PUSH
21812: LD_INT 10
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: LIST
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: LIST
21824: PPUSH
21825: CALL_OW 69
21829: NOT
21830: IFFALSE 21840
// weapon := ru_time_lapser ;
21832: LD_ADDR_VAR 0 18
21836: PUSH
21837: LD_INT 49
21839: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21840: LD_VAR 0 12
21844: PUSH
21845: LD_INT 1
21847: PUSH
21848: LD_INT 2
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: IN
21855: IFFALSE 21879
21857: PUSH
21858: LD_INT 11
21860: PUSH
21861: LD_VAR 0 5
21865: IN
21866: IFTRUE 21878
21868: PUSH
21869: LD_INT 30
21871: PUSH
21872: LD_VAR 0 5
21876: IN
21877: OR
21878: AND
21879: IFFALSE 21899
21881: PUSH
21882: LD_INT 6
21884: PPUSH
21885: LD_VAR 0 16
21889: PPUSH
21890: CALL_OW 321
21894: PUSH
21895: LD_INT 2
21897: EQUAL
21898: AND
21899: IFFALSE 22066
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21901: LD_INT 22
21903: PUSH
21904: LD_VAR 0 16
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 2
21915: PUSH
21916: LD_INT 35
21918: PUSH
21919: LD_INT 11
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 35
21928: PUSH
21929: LD_INT 30
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 91
21943: PUSH
21944: LD_VAR 0 1
21948: PUSH
21949: LD_INT 18
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: LIST
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: LIST
21961: PPUSH
21962: CALL_OW 69
21966: NOT
21967: IFFALSE 22043
21969: PUSH
21970: LD_INT 22
21972: PUSH
21973: LD_VAR 0 16
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 2
21984: PUSH
21985: LD_INT 30
21987: PUSH
21988: LD_INT 32
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 30
21997: PUSH
21998: LD_INT 33
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 91
22012: PUSH
22013: LD_VAR 0 1
22017: PUSH
22018: LD_INT 12
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: LIST
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: LIST
22030: PUSH
22031: EMPTY
22032: LIST
22033: PPUSH
22034: CALL_OW 69
22038: PUSH
22039: LD_INT 2
22041: GREATER
22042: AND
22043: IFFALSE 22066
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22045: LD_ADDR_VAR 0 18
22049: PUSH
22050: LD_INT 11
22052: PUSH
22053: LD_INT 30
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_VAR 0 12
22064: ARRAY
22065: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22066: LD_VAR 0 18
22070: NOT
22071: IFFALSE 22091
22073: PUSH
22074: LD_INT 40
22076: PPUSH
22077: LD_VAR 0 16
22081: PPUSH
22082: CALL_OW 321
22086: PUSH
22087: LD_INT 2
22089: EQUAL
22090: AND
22091: IFFALSE 22127
22093: PUSH
22094: LD_INT 7
22096: PUSH
22097: LD_VAR 0 5
22101: IN
22102: IFTRUE 22114
22104: PUSH
22105: LD_INT 28
22107: PUSH
22108: LD_VAR 0 5
22112: IN
22113: OR
22114: IFTRUE 22126
22116: PUSH
22117: LD_INT 45
22119: PUSH
22120: LD_VAR 0 5
22124: IN
22125: OR
22126: AND
22127: IFFALSE 22381
// begin hex := GetHexInfo ( x , y ) ;
22129: LD_ADDR_VAR 0 4
22133: PUSH
22134: LD_VAR 0 10
22138: PPUSH
22139: LD_VAR 0 11
22143: PPUSH
22144: CALL_OW 546
22148: ST_TO_ADDR
// if hex [ 1 ] then
22149: LD_VAR 0 4
22153: PUSH
22154: LD_INT 1
22156: ARRAY
22157: IFFALSE 22161
// exit ;
22159: GO 22568
// height := hex [ 2 ] ;
22161: LD_ADDR_VAR 0 15
22165: PUSH
22166: LD_VAR 0 4
22170: PUSH
22171: LD_INT 2
22173: ARRAY
22174: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22175: LD_ADDR_VAR 0 14
22179: PUSH
22180: LD_INT 0
22182: PUSH
22183: LD_INT 2
22185: PUSH
22186: LD_INT 3
22188: PUSH
22189: LD_INT 5
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: ST_TO_ADDR
// for i in tmp do
22198: LD_ADDR_VAR 0 8
22202: PUSH
22203: LD_VAR 0 14
22207: PUSH
22208: FOR_IN
22209: IFFALSE 22379
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22211: LD_ADDR_VAR 0 9
22215: PUSH
22216: LD_VAR 0 10
22220: PPUSH
22221: LD_VAR 0 8
22225: PPUSH
22226: LD_INT 5
22228: PPUSH
22229: CALL_OW 272
22233: PUSH
22234: LD_VAR 0 11
22238: PPUSH
22239: LD_VAR 0 8
22243: PPUSH
22244: LD_INT 5
22246: PPUSH
22247: CALL_OW 273
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22256: LD_VAR 0 9
22260: PUSH
22261: LD_INT 1
22263: ARRAY
22264: PPUSH
22265: LD_VAR 0 9
22269: PUSH
22270: LD_INT 2
22272: ARRAY
22273: PPUSH
22274: CALL_OW 488
22278: IFFALSE 22377
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22280: LD_ADDR_VAR 0 4
22284: PUSH
22285: LD_VAR 0 9
22289: PUSH
22290: LD_INT 1
22292: ARRAY
22293: PPUSH
22294: LD_VAR 0 9
22298: PUSH
22299: LD_INT 2
22301: ARRAY
22302: PPUSH
22303: CALL_OW 546
22307: ST_TO_ADDR
// if hex [ 1 ] then
22308: LD_VAR 0 4
22312: PUSH
22313: LD_INT 1
22315: ARRAY
22316: IFFALSE 22320
// continue ;
22318: GO 22208
// h := hex [ 2 ] ;
22320: LD_ADDR_VAR 0 13
22324: PUSH
22325: LD_VAR 0 4
22329: PUSH
22330: LD_INT 2
22332: ARRAY
22333: ST_TO_ADDR
// if h + 7 < height then
22334: LD_VAR 0 13
22338: PUSH
22339: LD_INT 7
22341: PLUS
22342: PUSH
22343: LD_VAR 0 15
22347: LESS
22348: IFFALSE 22377
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22350: LD_ADDR_VAR 0 18
22354: PUSH
22355: LD_INT 7
22357: PUSH
22358: LD_INT 28
22360: PUSH
22361: LD_INT 45
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: LIST
22368: PUSH
22369: LD_VAR 0 12
22373: ARRAY
22374: ST_TO_ADDR
// break ;
22375: GO 22379
// end ; end ; end ;
22377: GO 22208
22379: POP
22380: POP
// end ; if not weapon then
22381: LD_VAR 0 18
22385: NOT
22386: IFFALSE 22446
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22388: LD_ADDR_VAR 0 5
22392: PUSH
22393: LD_VAR 0 5
22397: PUSH
22398: LD_INT 11
22400: PUSH
22401: LD_INT 30
22403: PUSH
22404: LD_INT 49
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: LIST
22411: DIFF
22412: ST_TO_ADDR
// if not list then
22413: LD_VAR 0 5
22417: NOT
22418: IFFALSE 22422
// exit ;
22420: GO 22568
// weapon := list [ rand ( 1 , list ) ] ;
22422: LD_ADDR_VAR 0 18
22426: PUSH
22427: LD_VAR 0 5
22431: PUSH
22432: LD_INT 1
22434: PPUSH
22435: LD_VAR 0 5
22439: PPUSH
22440: CALL_OW 12
22444: ARRAY
22445: ST_TO_ADDR
// end ; if weapon then
22446: LD_VAR 0 18
22450: IFFALSE 22568
// begin tmp := CostOfWeapon ( weapon ) ;
22452: LD_ADDR_VAR 0 14
22456: PUSH
22457: LD_VAR 0 18
22461: PPUSH
22462: CALL_OW 451
22466: ST_TO_ADDR
// j := GetBase ( tower ) ;
22467: LD_ADDR_VAR 0 9
22471: PUSH
22472: LD_VAR 0 1
22476: PPUSH
22477: CALL_OW 274
22481: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22482: LD_VAR 0 9
22486: PPUSH
22487: LD_INT 1
22489: PPUSH
22490: CALL_OW 275
22494: PUSH
22495: LD_VAR 0 14
22499: PUSH
22500: LD_INT 1
22502: ARRAY
22503: GREATEREQUAL
22504: IFFALSE 22530
22506: PUSH
22507: LD_VAR 0 9
22511: PPUSH
22512: LD_INT 2
22514: PPUSH
22515: CALL_OW 275
22519: PUSH
22520: LD_VAR 0 14
22524: PUSH
22525: LD_INT 2
22527: ARRAY
22528: GREATEREQUAL
22529: AND
22530: IFFALSE 22556
22532: PUSH
22533: LD_VAR 0 9
22537: PPUSH
22538: LD_INT 3
22540: PPUSH
22541: CALL_OW 275
22545: PUSH
22546: LD_VAR 0 14
22550: PUSH
22551: LD_INT 3
22553: ARRAY
22554: GREATEREQUAL
22555: AND
22556: IFFALSE 22568
// result := weapon ;
22558: LD_ADDR_VAR 0 3
22562: PUSH
22563: LD_VAR 0 18
22567: ST_TO_ADDR
// end ; end ;
22568: LD_VAR 0 3
22572: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22573: LD_INT 0
22575: PPUSH
22576: PPUSH
// result := true ;
22577: LD_ADDR_VAR 0 3
22581: PUSH
22582: LD_INT 1
22584: ST_TO_ADDR
// if array1 = array2 then
22585: LD_VAR 0 1
22589: PUSH
22590: LD_VAR 0 2
22594: EQUAL
22595: IFFALSE 22655
// begin for i = 1 to array1 do
22597: LD_ADDR_VAR 0 4
22601: PUSH
22602: DOUBLE
22603: LD_INT 1
22605: DEC
22606: ST_TO_ADDR
22607: LD_VAR 0 1
22611: PUSH
22612: FOR_TO
22613: IFFALSE 22651
// if array1 [ i ] <> array2 [ i ] then
22615: LD_VAR 0 1
22619: PUSH
22620: LD_VAR 0 4
22624: ARRAY
22625: PUSH
22626: LD_VAR 0 2
22630: PUSH
22631: LD_VAR 0 4
22635: ARRAY
22636: NONEQUAL
22637: IFFALSE 22649
// begin result := false ;
22639: LD_ADDR_VAR 0 3
22643: PUSH
22644: LD_INT 0
22646: ST_TO_ADDR
// break ;
22647: GO 22651
// end ;
22649: GO 22612
22651: POP
22652: POP
// end else
22653: GO 22663
// result := false ;
22655: LD_ADDR_VAR 0 3
22659: PUSH
22660: LD_INT 0
22662: ST_TO_ADDR
// end ;
22663: LD_VAR 0 3
22667: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22668: LD_INT 0
22670: PPUSH
22671: PPUSH
// if not array1 or not array2 then
22672: LD_VAR 0 1
22676: NOT
22677: IFTRUE 22686
22679: PUSH
22680: LD_VAR 0 2
22684: NOT
22685: OR
22686: IFFALSE 22690
// exit ;
22688: GO 22754
// result := true ;
22690: LD_ADDR_VAR 0 3
22694: PUSH
22695: LD_INT 1
22697: ST_TO_ADDR
// for i = 1 to array1 do
22698: LD_ADDR_VAR 0 4
22702: PUSH
22703: DOUBLE
22704: LD_INT 1
22706: DEC
22707: ST_TO_ADDR
22708: LD_VAR 0 1
22712: PUSH
22713: FOR_TO
22714: IFFALSE 22752
// if array1 [ i ] <> array2 [ i ] then
22716: LD_VAR 0 1
22720: PUSH
22721: LD_VAR 0 4
22725: ARRAY
22726: PUSH
22727: LD_VAR 0 2
22731: PUSH
22732: LD_VAR 0 4
22736: ARRAY
22737: NONEQUAL
22738: IFFALSE 22750
// begin result := false ;
22740: LD_ADDR_VAR 0 3
22744: PUSH
22745: LD_INT 0
22747: ST_TO_ADDR
// break ;
22748: GO 22752
// end ;
22750: GO 22713
22752: POP
22753: POP
// end ;
22754: LD_VAR 0 3
22758: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22759: LD_INT 0
22761: PPUSH
22762: PPUSH
22763: PPUSH
// pom := GetBase ( fac ) ;
22764: LD_ADDR_VAR 0 5
22768: PUSH
22769: LD_VAR 0 1
22773: PPUSH
22774: CALL_OW 274
22778: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22779: LD_ADDR_VAR 0 4
22783: PUSH
22784: LD_VAR 0 2
22788: PUSH
22789: LD_INT 1
22791: ARRAY
22792: PPUSH
22793: LD_VAR 0 2
22797: PUSH
22798: LD_INT 2
22800: ARRAY
22801: PPUSH
22802: LD_VAR 0 2
22806: PUSH
22807: LD_INT 3
22809: ARRAY
22810: PPUSH
22811: LD_VAR 0 2
22815: PUSH
22816: LD_INT 4
22818: ARRAY
22819: PPUSH
22820: CALL_OW 449
22824: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22825: LD_ADDR_VAR 0 3
22829: PUSH
22830: LD_VAR 0 5
22834: PPUSH
22835: LD_INT 1
22837: PPUSH
22838: CALL_OW 275
22842: PUSH
22843: LD_VAR 0 4
22847: PUSH
22848: LD_INT 1
22850: ARRAY
22851: GREATEREQUAL
22852: IFFALSE 22878
22854: PUSH
22855: LD_VAR 0 5
22859: PPUSH
22860: LD_INT 2
22862: PPUSH
22863: CALL_OW 275
22867: PUSH
22868: LD_VAR 0 4
22872: PUSH
22873: LD_INT 2
22875: ARRAY
22876: GREATEREQUAL
22877: AND
22878: IFFALSE 22904
22880: PUSH
22881: LD_VAR 0 5
22885: PPUSH
22886: LD_INT 3
22888: PPUSH
22889: CALL_OW 275
22893: PUSH
22894: LD_VAR 0 4
22898: PUSH
22899: LD_INT 3
22901: ARRAY
22902: GREATEREQUAL
22903: AND
22904: ST_TO_ADDR
// end ;
22905: LD_VAR 0 3
22909: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22910: LD_INT 0
22912: PPUSH
22913: PPUSH
22914: PPUSH
22915: PPUSH
// pom := GetBase ( building ) ;
22916: LD_ADDR_VAR 0 3
22920: PUSH
22921: LD_VAR 0 1
22925: PPUSH
22926: CALL_OW 274
22930: ST_TO_ADDR
// if not pom then
22931: LD_VAR 0 3
22935: NOT
22936: IFFALSE 22940
// exit ;
22938: GO 23114
// btype := GetBType ( building ) ;
22940: LD_ADDR_VAR 0 5
22944: PUSH
22945: LD_VAR 0 1
22949: PPUSH
22950: CALL_OW 266
22954: ST_TO_ADDR
// if btype = b_armoury then
22955: LD_VAR 0 5
22959: PUSH
22960: LD_INT 4
22962: EQUAL
22963: IFFALSE 22973
// btype := b_barracks ;
22965: LD_ADDR_VAR 0 5
22969: PUSH
22970: LD_INT 5
22972: ST_TO_ADDR
// if btype = b_depot then
22973: LD_VAR 0 5
22977: PUSH
22978: LD_INT 0
22980: EQUAL
22981: IFFALSE 22991
// btype := b_warehouse ;
22983: LD_ADDR_VAR 0 5
22987: PUSH
22988: LD_INT 1
22990: ST_TO_ADDR
// if btype = b_workshop then
22991: LD_VAR 0 5
22995: PUSH
22996: LD_INT 2
22998: EQUAL
22999: IFFALSE 23009
// btype := b_factory ;
23001: LD_ADDR_VAR 0 5
23005: PUSH
23006: LD_INT 3
23008: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23009: LD_ADDR_VAR 0 4
23013: PUSH
23014: LD_VAR 0 5
23018: PPUSH
23019: LD_VAR 0 1
23023: PPUSH
23024: CALL_OW 248
23028: PPUSH
23029: CALL_OW 450
23033: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23034: LD_ADDR_VAR 0 2
23038: PUSH
23039: LD_VAR 0 3
23043: PPUSH
23044: LD_INT 1
23046: PPUSH
23047: CALL_OW 275
23051: PUSH
23052: LD_VAR 0 4
23056: PUSH
23057: LD_INT 1
23059: ARRAY
23060: GREATEREQUAL
23061: IFFALSE 23087
23063: PUSH
23064: LD_VAR 0 3
23068: PPUSH
23069: LD_INT 2
23071: PPUSH
23072: CALL_OW 275
23076: PUSH
23077: LD_VAR 0 4
23081: PUSH
23082: LD_INT 2
23084: ARRAY
23085: GREATEREQUAL
23086: AND
23087: IFFALSE 23113
23089: PUSH
23090: LD_VAR 0 3
23094: PPUSH
23095: LD_INT 3
23097: PPUSH
23098: CALL_OW 275
23102: PUSH
23103: LD_VAR 0 4
23107: PUSH
23108: LD_INT 3
23110: ARRAY
23111: GREATEREQUAL
23112: AND
23113: ST_TO_ADDR
// end ;
23114: LD_VAR 0 2
23118: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23119: LD_INT 0
23121: PPUSH
23122: PPUSH
23123: PPUSH
// pom := GetBase ( building ) ;
23124: LD_ADDR_VAR 0 4
23128: PUSH
23129: LD_VAR 0 1
23133: PPUSH
23134: CALL_OW 274
23138: ST_TO_ADDR
// if not pom then
23139: LD_VAR 0 4
23143: NOT
23144: IFFALSE 23148
// exit ;
23146: GO 23253
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23148: LD_ADDR_VAR 0 5
23152: PUSH
23153: LD_VAR 0 2
23157: PPUSH
23158: LD_VAR 0 1
23162: PPUSH
23163: CALL_OW 248
23167: PPUSH
23168: CALL_OW 450
23172: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23173: LD_ADDR_VAR 0 3
23177: PUSH
23178: LD_VAR 0 4
23182: PPUSH
23183: LD_INT 1
23185: PPUSH
23186: CALL_OW 275
23190: PUSH
23191: LD_VAR 0 5
23195: PUSH
23196: LD_INT 1
23198: ARRAY
23199: GREATEREQUAL
23200: IFFALSE 23226
23202: PUSH
23203: LD_VAR 0 4
23207: PPUSH
23208: LD_INT 2
23210: PPUSH
23211: CALL_OW 275
23215: PUSH
23216: LD_VAR 0 5
23220: PUSH
23221: LD_INT 2
23223: ARRAY
23224: GREATEREQUAL
23225: AND
23226: IFFALSE 23252
23228: PUSH
23229: LD_VAR 0 4
23233: PPUSH
23234: LD_INT 3
23236: PPUSH
23237: CALL_OW 275
23241: PUSH
23242: LD_VAR 0 5
23246: PUSH
23247: LD_INT 3
23249: ARRAY
23250: GREATEREQUAL
23251: AND
23252: ST_TO_ADDR
// end ;
23253: LD_VAR 0 3
23257: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23258: LD_INT 0
23260: PPUSH
23261: PPUSH
23262: PPUSH
23263: PPUSH
23264: PPUSH
23265: PPUSH
23266: PPUSH
23267: PPUSH
23268: PPUSH
23269: PPUSH
23270: PPUSH
// result := false ;
23271: LD_ADDR_VAR 0 8
23275: PUSH
23276: LD_INT 0
23278: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23279: LD_VAR 0 5
23283: NOT
23284: IFTRUE 23293
23286: PUSH
23287: LD_VAR 0 1
23291: NOT
23292: OR
23293: IFTRUE 23302
23295: PUSH
23296: LD_VAR 0 2
23300: NOT
23301: OR
23302: IFTRUE 23311
23304: PUSH
23305: LD_VAR 0 3
23309: NOT
23310: OR
23311: IFFALSE 23315
// exit ;
23313: GO 24141
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23315: LD_ADDR_VAR 0 14
23319: PUSH
23320: LD_VAR 0 1
23324: PPUSH
23325: LD_VAR 0 2
23329: PPUSH
23330: LD_VAR 0 3
23334: PPUSH
23335: LD_VAR 0 4
23339: PPUSH
23340: LD_VAR 0 5
23344: PUSH
23345: LD_INT 1
23347: ARRAY
23348: PPUSH
23349: CALL_OW 248
23353: PPUSH
23354: LD_INT 0
23356: PPUSH
23357: CALL 25422 0 6
23361: ST_TO_ADDR
// if not hexes then
23362: LD_VAR 0 14
23366: NOT
23367: IFFALSE 23371
// exit ;
23369: GO 24141
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23371: LD_ADDR_VAR 0 17
23375: PUSH
23376: LD_VAR 0 5
23380: PPUSH
23381: LD_INT 22
23383: PUSH
23384: LD_VAR 0 13
23388: PPUSH
23389: CALL_OW 255
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 2
23400: PUSH
23401: LD_INT 30
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 30
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: LIST
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PPUSH
23430: CALL_OW 72
23434: ST_TO_ADDR
// for i = 1 to hexes do
23435: LD_ADDR_VAR 0 9
23439: PUSH
23440: DOUBLE
23441: LD_INT 1
23443: DEC
23444: ST_TO_ADDR
23445: LD_VAR 0 14
23449: PUSH
23450: FOR_TO
23451: IFFALSE 24139
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23453: LD_ADDR_VAR 0 13
23457: PUSH
23458: LD_VAR 0 14
23462: PUSH
23463: LD_VAR 0 9
23467: ARRAY
23468: PUSH
23469: LD_INT 1
23471: ARRAY
23472: PPUSH
23473: LD_VAR 0 14
23477: PUSH
23478: LD_VAR 0 9
23482: ARRAY
23483: PUSH
23484: LD_INT 2
23486: ARRAY
23487: PPUSH
23488: CALL_OW 428
23492: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23493: LD_VAR 0 14
23497: PUSH
23498: LD_VAR 0 9
23502: ARRAY
23503: PUSH
23504: LD_INT 1
23506: ARRAY
23507: PPUSH
23508: LD_VAR 0 14
23512: PUSH
23513: LD_VAR 0 9
23517: ARRAY
23518: PUSH
23519: LD_INT 2
23521: ARRAY
23522: PPUSH
23523: CALL_OW 351
23527: IFTRUE 23566
23529: PUSH
23530: LD_VAR 0 14
23534: PUSH
23535: LD_VAR 0 9
23539: ARRAY
23540: PUSH
23541: LD_INT 1
23543: ARRAY
23544: PPUSH
23545: LD_VAR 0 14
23549: PUSH
23550: LD_VAR 0 9
23554: ARRAY
23555: PUSH
23556: LD_INT 2
23558: ARRAY
23559: PPUSH
23560: CALL_OW 488
23564: NOT
23565: OR
23566: IFTRUE 23583
23568: PUSH
23569: LD_VAR 0 13
23573: PPUSH
23574: CALL_OW 247
23578: PUSH
23579: LD_INT 3
23581: EQUAL
23582: OR
23583: IFFALSE 23589
// exit ;
23585: POP
23586: POP
23587: GO 24141
// if not tmp then
23589: LD_VAR 0 13
23593: NOT
23594: IFFALSE 23598
// continue ;
23596: GO 23450
// result := true ;
23598: LD_ADDR_VAR 0 8
23602: PUSH
23603: LD_INT 1
23605: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23606: LD_VAR 0 6
23610: IFFALSE 23627
23612: PUSH
23613: LD_VAR 0 13
23617: PPUSH
23618: CALL_OW 247
23622: PUSH
23623: LD_INT 2
23625: EQUAL
23626: AND
23627: IFFALSE 23644
23629: PUSH
23630: LD_VAR 0 13
23634: PPUSH
23635: CALL_OW 263
23639: PUSH
23640: LD_INT 1
23642: EQUAL
23643: AND
23644: IFFALSE 23808
// begin if IsDrivenBy ( tmp ) then
23646: LD_VAR 0 13
23650: PPUSH
23651: CALL_OW 311
23655: IFFALSE 23659
// continue ;
23657: GO 23450
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23659: LD_VAR 0 6
23663: PPUSH
23664: LD_INT 3
23666: PUSH
23667: LD_INT 60
23669: PUSH
23670: EMPTY
23671: LIST
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 3
23679: PUSH
23680: LD_INT 55
23682: PUSH
23683: EMPTY
23684: LIST
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PPUSH
23694: CALL_OW 72
23698: IFFALSE 23806
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23700: LD_ADDR_VAR 0 18
23704: PUSH
23705: LD_VAR 0 6
23709: PPUSH
23710: LD_INT 3
23712: PUSH
23713: LD_INT 60
23715: PUSH
23716: EMPTY
23717: LIST
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 3
23725: PUSH
23726: LD_INT 55
23728: PUSH
23729: EMPTY
23730: LIST
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PPUSH
23740: CALL_OW 72
23744: PUSH
23745: LD_INT 1
23747: ARRAY
23748: ST_TO_ADDR
// if IsInUnit ( driver ) then
23749: LD_VAR 0 18
23753: PPUSH
23754: CALL_OW 310
23758: IFFALSE 23769
// ComExit ( driver ) ;
23760: LD_VAR 0 18
23764: PPUSH
23765: CALL 49412 0 1
// AddComEnterUnit ( driver , tmp ) ;
23769: LD_VAR 0 18
23773: PPUSH
23774: LD_VAR 0 13
23778: PPUSH
23779: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23783: LD_VAR 0 18
23787: PPUSH
23788: LD_VAR 0 7
23792: PPUSH
23793: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23797: LD_VAR 0 18
23801: PPUSH
23802: CALL_OW 181
// end ; continue ;
23806: GO 23450
// end ; if not cleaners or not tmp in cleaners then
23808: LD_VAR 0 6
23812: NOT
23813: IFTRUE 23828
23815: PUSH
23816: LD_VAR 0 13
23820: PUSH
23821: LD_VAR 0 6
23825: IN
23826: NOT
23827: OR
23828: IFFALSE 24137
// begin if dep then
23830: LD_VAR 0 17
23834: IFFALSE 23970
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23836: LD_ADDR_VAR 0 16
23840: PUSH
23841: LD_VAR 0 17
23845: PUSH
23846: LD_INT 1
23848: ARRAY
23849: PPUSH
23850: CALL_OW 250
23854: PPUSH
23855: LD_VAR 0 17
23859: PUSH
23860: LD_INT 1
23862: ARRAY
23863: PPUSH
23864: CALL_OW 254
23868: PPUSH
23869: LD_INT 5
23871: PPUSH
23872: CALL_OW 272
23876: PUSH
23877: LD_VAR 0 17
23881: PUSH
23882: LD_INT 1
23884: ARRAY
23885: PPUSH
23886: CALL_OW 251
23890: PPUSH
23891: LD_VAR 0 17
23895: PUSH
23896: LD_INT 1
23898: ARRAY
23899: PPUSH
23900: CALL_OW 254
23904: PPUSH
23905: LD_INT 5
23907: PPUSH
23908: CALL_OW 273
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23917: LD_VAR 0 16
23921: PUSH
23922: LD_INT 1
23924: ARRAY
23925: PPUSH
23926: LD_VAR 0 16
23930: PUSH
23931: LD_INT 2
23933: ARRAY
23934: PPUSH
23935: CALL_OW 488
23939: IFFALSE 23970
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23941: LD_VAR 0 13
23945: PPUSH
23946: LD_VAR 0 16
23950: PUSH
23951: LD_INT 1
23953: ARRAY
23954: PPUSH
23955: LD_VAR 0 16
23959: PUSH
23960: LD_INT 2
23962: ARRAY
23963: PPUSH
23964: CALL_OW 111
// continue ;
23968: GO 23450
// end ; end ; r := GetDir ( tmp ) ;
23970: LD_ADDR_VAR 0 15
23974: PUSH
23975: LD_VAR 0 13
23979: PPUSH
23980: CALL_OW 254
23984: ST_TO_ADDR
// if r = 5 then
23985: LD_VAR 0 15
23989: PUSH
23990: LD_INT 5
23992: EQUAL
23993: IFFALSE 24003
// r := 0 ;
23995: LD_ADDR_VAR 0 15
23999: PUSH
24000: LD_INT 0
24002: ST_TO_ADDR
// for j = r to 5 do
24003: LD_ADDR_VAR 0 10
24007: PUSH
24008: DOUBLE
24009: LD_VAR 0 15
24013: DEC
24014: ST_TO_ADDR
24015: LD_INT 5
24017: PUSH
24018: FOR_TO
24019: IFFALSE 24135
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24021: LD_ADDR_VAR 0 11
24025: PUSH
24026: LD_VAR 0 13
24030: PPUSH
24031: CALL_OW 250
24035: PPUSH
24036: LD_VAR 0 10
24040: PPUSH
24041: LD_INT 2
24043: PPUSH
24044: CALL_OW 272
24048: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24049: LD_ADDR_VAR 0 12
24053: PUSH
24054: LD_VAR 0 13
24058: PPUSH
24059: CALL_OW 251
24063: PPUSH
24064: LD_VAR 0 10
24068: PPUSH
24069: LD_INT 2
24071: PPUSH
24072: CALL_OW 273
24076: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24077: LD_VAR 0 11
24081: PPUSH
24082: LD_VAR 0 12
24086: PPUSH
24087: CALL_OW 488
24091: IFFALSE 24110
24093: PUSH
24094: LD_VAR 0 11
24098: PPUSH
24099: LD_VAR 0 12
24103: PPUSH
24104: CALL_OW 428
24108: NOT
24109: AND
24110: IFFALSE 24133
// begin ComMoveXY ( tmp , _x , _y ) ;
24112: LD_VAR 0 13
24116: PPUSH
24117: LD_VAR 0 11
24121: PPUSH
24122: LD_VAR 0 12
24126: PPUSH
24127: CALL_OW 111
// break ;
24131: GO 24135
// end ; end ;
24133: GO 24018
24135: POP
24136: POP
// end ; end ;
24137: GO 23450
24139: POP
24140: POP
// end ;
24141: LD_VAR 0 8
24145: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24146: LD_INT 0
24148: PPUSH
// result := true ;
24149: LD_ADDR_VAR 0 3
24153: PUSH
24154: LD_INT 1
24156: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24157: LD_VAR 0 2
24161: PUSH
24162: LD_INT 24
24164: DOUBLE
24165: EQUAL
24166: IFTRUE 24176
24168: LD_INT 33
24170: DOUBLE
24171: EQUAL
24172: IFTRUE 24176
24174: GO 24201
24176: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24177: LD_ADDR_VAR 0 3
24181: PUSH
24182: LD_INT 32
24184: PPUSH
24185: LD_VAR 0 1
24189: PPUSH
24190: CALL_OW 321
24194: PUSH
24195: LD_INT 2
24197: EQUAL
24198: ST_TO_ADDR
24199: GO 24517
24201: LD_INT 20
24203: DOUBLE
24204: EQUAL
24205: IFTRUE 24209
24207: GO 24234
24209: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24210: LD_ADDR_VAR 0 3
24214: PUSH
24215: LD_INT 6
24217: PPUSH
24218: LD_VAR 0 1
24222: PPUSH
24223: CALL_OW 321
24227: PUSH
24228: LD_INT 2
24230: EQUAL
24231: ST_TO_ADDR
24232: GO 24517
24234: LD_INT 22
24236: DOUBLE
24237: EQUAL
24238: IFTRUE 24248
24240: LD_INT 36
24242: DOUBLE
24243: EQUAL
24244: IFTRUE 24248
24246: GO 24273
24248: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24249: LD_ADDR_VAR 0 3
24253: PUSH
24254: LD_INT 15
24256: PPUSH
24257: LD_VAR 0 1
24261: PPUSH
24262: CALL_OW 321
24266: PUSH
24267: LD_INT 2
24269: EQUAL
24270: ST_TO_ADDR
24271: GO 24517
24273: LD_INT 30
24275: DOUBLE
24276: EQUAL
24277: IFTRUE 24281
24279: GO 24306
24281: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24282: LD_ADDR_VAR 0 3
24286: PUSH
24287: LD_INT 20
24289: PPUSH
24290: LD_VAR 0 1
24294: PPUSH
24295: CALL_OW 321
24299: PUSH
24300: LD_INT 2
24302: EQUAL
24303: ST_TO_ADDR
24304: GO 24517
24306: LD_INT 28
24308: DOUBLE
24309: EQUAL
24310: IFTRUE 24320
24312: LD_INT 21
24314: DOUBLE
24315: EQUAL
24316: IFTRUE 24320
24318: GO 24345
24320: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24321: LD_ADDR_VAR 0 3
24325: PUSH
24326: LD_INT 21
24328: PPUSH
24329: LD_VAR 0 1
24333: PPUSH
24334: CALL_OW 321
24338: PUSH
24339: LD_INT 2
24341: EQUAL
24342: ST_TO_ADDR
24343: GO 24517
24345: LD_INT 16
24347: DOUBLE
24348: EQUAL
24349: IFTRUE 24353
24351: GO 24378
24353: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24354: LD_ADDR_VAR 0 3
24358: PUSH
24359: LD_INT 84
24361: PPUSH
24362: LD_VAR 0 1
24366: PPUSH
24367: CALL_OW 321
24371: PUSH
24372: LD_INT 2
24374: EQUAL
24375: ST_TO_ADDR
24376: GO 24517
24378: LD_INT 19
24380: DOUBLE
24381: EQUAL
24382: IFTRUE 24392
24384: LD_INT 23
24386: DOUBLE
24387: EQUAL
24388: IFTRUE 24392
24390: GO 24417
24392: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24393: LD_ADDR_VAR 0 3
24397: PUSH
24398: LD_INT 83
24400: PPUSH
24401: LD_VAR 0 1
24405: PPUSH
24406: CALL_OW 321
24410: PUSH
24411: LD_INT 2
24413: EQUAL
24414: ST_TO_ADDR
24415: GO 24517
24417: LD_INT 17
24419: DOUBLE
24420: EQUAL
24421: IFTRUE 24425
24423: GO 24450
24425: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24426: LD_ADDR_VAR 0 3
24430: PUSH
24431: LD_INT 39
24433: PPUSH
24434: LD_VAR 0 1
24438: PPUSH
24439: CALL_OW 321
24443: PUSH
24444: LD_INT 2
24446: EQUAL
24447: ST_TO_ADDR
24448: GO 24517
24450: LD_INT 18
24452: DOUBLE
24453: EQUAL
24454: IFTRUE 24458
24456: GO 24483
24458: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24459: LD_ADDR_VAR 0 3
24463: PUSH
24464: LD_INT 40
24466: PPUSH
24467: LD_VAR 0 1
24471: PPUSH
24472: CALL_OW 321
24476: PUSH
24477: LD_INT 2
24479: EQUAL
24480: ST_TO_ADDR
24481: GO 24517
24483: LD_INT 27
24485: DOUBLE
24486: EQUAL
24487: IFTRUE 24491
24489: GO 24516
24491: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
24492: LD_ADDR_VAR 0 3
24496: PUSH
24497: LD_INT 35
24499: PPUSH
24500: LD_VAR 0 1
24504: PPUSH
24505: CALL_OW 321
24509: PUSH
24510: LD_INT 2
24512: EQUAL
24513: ST_TO_ADDR
24514: GO 24517
24516: POP
// end ;
24517: LD_VAR 0 3
24521: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24522: LD_INT 0
24524: PPUSH
24525: PPUSH
24526: PPUSH
24527: PPUSH
24528: PPUSH
24529: PPUSH
24530: PPUSH
24531: PPUSH
24532: PPUSH
24533: PPUSH
24534: PPUSH
// result := false ;
24535: LD_ADDR_VAR 0 6
24539: PUSH
24540: LD_INT 0
24542: ST_TO_ADDR
// if btype = b_depot then
24543: LD_VAR 0 2
24547: PUSH
24548: LD_INT 0
24550: EQUAL
24551: IFFALSE 24563
// begin result := true ;
24553: LD_ADDR_VAR 0 6
24557: PUSH
24558: LD_INT 1
24560: ST_TO_ADDR
// exit ;
24561: GO 25417
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24563: LD_VAR 0 1
24567: NOT
24568: IFTRUE 24593
24570: PUSH
24571: LD_VAR 0 1
24575: PPUSH
24576: CALL_OW 266
24580: PUSH
24581: LD_INT 0
24583: PUSH
24584: LD_INT 1
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: IN
24591: NOT
24592: OR
24593: IFTRUE 24602
24595: PUSH
24596: LD_VAR 0 2
24600: NOT
24601: OR
24602: IFTRUE 24638
24604: PUSH
24605: LD_VAR 0 5
24609: PUSH
24610: LD_INT 0
24612: PUSH
24613: LD_INT 1
24615: PUSH
24616: LD_INT 2
24618: PUSH
24619: LD_INT 3
24621: PUSH
24622: LD_INT 4
24624: PUSH
24625: LD_INT 5
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: IN
24636: NOT
24637: OR
24638: IFTRUE 24657
24640: PUSH
24641: LD_VAR 0 3
24645: PPUSH
24646: LD_VAR 0 4
24650: PPUSH
24651: CALL_OW 488
24655: NOT
24656: OR
24657: IFFALSE 24661
// exit ;
24659: GO 25417
// side := GetSide ( depot ) ;
24661: LD_ADDR_VAR 0 9
24665: PUSH
24666: LD_VAR 0 1
24670: PPUSH
24671: CALL_OW 255
24675: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24676: LD_VAR 0 9
24680: PPUSH
24681: LD_VAR 0 2
24685: PPUSH
24686: CALL 24146 0 2
24690: NOT
24691: IFFALSE 24695
// exit ;
24693: GO 25417
// pom := GetBase ( depot ) ;
24695: LD_ADDR_VAR 0 10
24699: PUSH
24700: LD_VAR 0 1
24704: PPUSH
24705: CALL_OW 274
24709: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24710: LD_ADDR_VAR 0 11
24714: PUSH
24715: LD_VAR 0 2
24719: PPUSH
24720: LD_VAR 0 1
24724: PPUSH
24725: CALL_OW 248
24729: PPUSH
24730: CALL_OW 450
24734: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24735: LD_VAR 0 10
24739: PPUSH
24740: LD_INT 1
24742: PPUSH
24743: CALL_OW 275
24747: PUSH
24748: LD_VAR 0 11
24752: PUSH
24753: LD_INT 1
24755: ARRAY
24756: GREATEREQUAL
24757: IFFALSE 24783
24759: PUSH
24760: LD_VAR 0 10
24764: PPUSH
24765: LD_INT 2
24767: PPUSH
24768: CALL_OW 275
24772: PUSH
24773: LD_VAR 0 11
24777: PUSH
24778: LD_INT 2
24780: ARRAY
24781: GREATEREQUAL
24782: AND
24783: IFFALSE 24809
24785: PUSH
24786: LD_VAR 0 10
24790: PPUSH
24791: LD_INT 3
24793: PPUSH
24794: CALL_OW 275
24798: PUSH
24799: LD_VAR 0 11
24803: PUSH
24804: LD_INT 3
24806: ARRAY
24807: GREATEREQUAL
24808: AND
24809: NOT
24810: IFFALSE 24814
// exit ;
24812: GO 25417
// if GetBType ( depot ) = b_depot then
24814: LD_VAR 0 1
24818: PPUSH
24819: CALL_OW 266
24823: PUSH
24824: LD_INT 0
24826: EQUAL
24827: IFFALSE 24839
// dist := 28 else
24829: LD_ADDR_VAR 0 14
24833: PUSH
24834: LD_INT 28
24836: ST_TO_ADDR
24837: GO 24847
// dist := 36 ;
24839: LD_ADDR_VAR 0 14
24843: PUSH
24844: LD_INT 36
24846: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24847: LD_VAR 0 1
24851: PPUSH
24852: LD_VAR 0 3
24856: PPUSH
24857: LD_VAR 0 4
24861: PPUSH
24862: CALL_OW 297
24866: PUSH
24867: LD_VAR 0 14
24871: GREATER
24872: IFFALSE 24876
// exit ;
24874: GO 25417
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24876: LD_ADDR_VAR 0 12
24880: PUSH
24881: LD_VAR 0 2
24885: PPUSH
24886: LD_VAR 0 3
24890: PPUSH
24891: LD_VAR 0 4
24895: PPUSH
24896: LD_VAR 0 5
24900: PPUSH
24901: LD_VAR 0 1
24905: PPUSH
24906: CALL_OW 248
24910: PPUSH
24911: LD_INT 0
24913: PPUSH
24914: CALL 25422 0 6
24918: ST_TO_ADDR
// if not hexes then
24919: LD_VAR 0 12
24923: NOT
24924: IFFALSE 24928
// exit ;
24926: GO 25417
// hex := GetHexInfo ( x , y ) ;
24928: LD_ADDR_VAR 0 15
24932: PUSH
24933: LD_VAR 0 3
24937: PPUSH
24938: LD_VAR 0 4
24942: PPUSH
24943: CALL_OW 546
24947: ST_TO_ADDR
// if hex [ 1 ] then
24948: LD_VAR 0 15
24952: PUSH
24953: LD_INT 1
24955: ARRAY
24956: IFFALSE 24960
// exit ;
24958: GO 25417
// height := hex [ 2 ] ;
24960: LD_ADDR_VAR 0 13
24964: PUSH
24965: LD_VAR 0 15
24969: PUSH
24970: LD_INT 2
24972: ARRAY
24973: ST_TO_ADDR
// for i = 1 to hexes do
24974: LD_ADDR_VAR 0 7
24978: PUSH
24979: DOUBLE
24980: LD_INT 1
24982: DEC
24983: ST_TO_ADDR
24984: LD_VAR 0 12
24988: PUSH
24989: FOR_TO
24990: IFFALSE 25334
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24992: LD_VAR 0 12
24996: PUSH
24997: LD_VAR 0 7
25001: ARRAY
25002: PUSH
25003: LD_INT 1
25005: ARRAY
25006: PPUSH
25007: LD_VAR 0 12
25011: PUSH
25012: LD_VAR 0 7
25016: ARRAY
25017: PUSH
25018: LD_INT 2
25020: ARRAY
25021: PPUSH
25022: CALL_OW 488
25026: NOT
25027: IFTRUE 25069
25029: PUSH
25030: LD_VAR 0 12
25034: PUSH
25035: LD_VAR 0 7
25039: ARRAY
25040: PUSH
25041: LD_INT 1
25043: ARRAY
25044: PPUSH
25045: LD_VAR 0 12
25049: PUSH
25050: LD_VAR 0 7
25054: ARRAY
25055: PUSH
25056: LD_INT 2
25058: ARRAY
25059: PPUSH
25060: CALL_OW 428
25064: PUSH
25065: LD_INT 0
25067: GREATER
25068: OR
25069: IFTRUE 25107
25071: PUSH
25072: LD_VAR 0 12
25076: PUSH
25077: LD_VAR 0 7
25081: ARRAY
25082: PUSH
25083: LD_INT 1
25085: ARRAY
25086: PPUSH
25087: LD_VAR 0 12
25091: PUSH
25092: LD_VAR 0 7
25096: ARRAY
25097: PUSH
25098: LD_INT 2
25100: ARRAY
25101: PPUSH
25102: CALL_OW 351
25106: OR
25107: IFFALSE 25113
// exit ;
25109: POP
25110: POP
25111: GO 25417
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25113: LD_ADDR_VAR 0 8
25117: PUSH
25118: LD_VAR 0 12
25122: PUSH
25123: LD_VAR 0 7
25127: ARRAY
25128: PUSH
25129: LD_INT 1
25131: ARRAY
25132: PPUSH
25133: LD_VAR 0 12
25137: PUSH
25138: LD_VAR 0 7
25142: ARRAY
25143: PUSH
25144: LD_INT 2
25146: ARRAY
25147: PPUSH
25148: CALL_OW 546
25152: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25153: LD_VAR 0 8
25157: PUSH
25158: LD_INT 1
25160: ARRAY
25161: IFTRUE 25183
25163: PUSH
25164: LD_VAR 0 8
25168: PUSH
25169: LD_INT 2
25171: ARRAY
25172: PUSH
25173: LD_VAR 0 13
25177: PUSH
25178: LD_INT 2
25180: PLUS
25181: GREATER
25182: OR
25183: IFTRUE 25205
25185: PUSH
25186: LD_VAR 0 8
25190: PUSH
25191: LD_INT 2
25193: ARRAY
25194: PUSH
25195: LD_VAR 0 13
25199: PUSH
25200: LD_INT 2
25202: MINUS
25203: LESS
25204: OR
25205: IFTRUE 25273
25207: PUSH
25208: LD_VAR 0 8
25212: PUSH
25213: LD_INT 3
25215: ARRAY
25216: PUSH
25217: LD_INT 0
25219: PUSH
25220: LD_INT 8
25222: PUSH
25223: LD_INT 9
25225: PUSH
25226: LD_INT 10
25228: PUSH
25229: LD_INT 11
25231: PUSH
25232: LD_INT 12
25234: PUSH
25235: LD_INT 13
25237: PUSH
25238: LD_INT 16
25240: PUSH
25241: LD_INT 17
25243: PUSH
25244: LD_INT 18
25246: PUSH
25247: LD_INT 19
25249: PUSH
25250: LD_INT 20
25252: PUSH
25253: LD_INT 21
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: IN
25271: NOT
25272: OR
25273: IFTRUE 25286
25275: PUSH
25276: LD_VAR 0 8
25280: PUSH
25281: LD_INT 5
25283: ARRAY
25284: NOT
25285: OR
25286: IFTRUE 25326
25288: PUSH
25289: LD_VAR 0 8
25293: PUSH
25294: LD_INT 6
25296: ARRAY
25297: PUSH
25298: LD_INT 1
25300: PUSH
25301: LD_INT 2
25303: PUSH
25304: LD_INT 7
25306: PUSH
25307: LD_INT 9
25309: PUSH
25310: LD_INT 10
25312: PUSH
25313: LD_INT 11
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: IN
25324: NOT
25325: OR
25326: IFFALSE 25332
// exit ;
25328: POP
25329: POP
25330: GO 25417
// end ;
25332: GO 24989
25334: POP
25335: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25336: LD_VAR 0 9
25340: PPUSH
25341: LD_VAR 0 3
25345: PPUSH
25346: LD_VAR 0 4
25350: PPUSH
25351: LD_INT 20
25353: PPUSH
25354: CALL 17236 0 4
25358: PUSH
25359: LD_INT 4
25361: ARRAY
25362: IFFALSE 25366
// exit ;
25364: GO 25417
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25366: LD_VAR 0 2
25370: PUSH
25371: LD_INT 29
25373: PUSH
25374: LD_INT 30
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: IN
25381: IFFALSE 25405
25383: PUSH
25384: LD_VAR 0 3
25388: PPUSH
25389: LD_VAR 0 4
25393: PPUSH
25394: LD_VAR 0 9
25398: PPUSH
25399: CALL_OW 440
25403: NOT
25404: AND
25405: IFFALSE 25409
// exit ;
25407: GO 25417
// result := true ;
25409: LD_ADDR_VAR 0 6
25413: PUSH
25414: LD_INT 1
25416: ST_TO_ADDR
// end ;
25417: LD_VAR 0 6
25421: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25422: LD_INT 0
25424: PPUSH
25425: PPUSH
25426: PPUSH
25427: PPUSH
25428: PPUSH
25429: PPUSH
25430: PPUSH
25431: PPUSH
25432: PPUSH
25433: PPUSH
25434: PPUSH
25435: PPUSH
25436: PPUSH
25437: PPUSH
25438: PPUSH
25439: PPUSH
25440: PPUSH
25441: PPUSH
25442: PPUSH
25443: PPUSH
25444: PPUSH
25445: PPUSH
25446: PPUSH
25447: PPUSH
25448: PPUSH
25449: PPUSH
25450: PPUSH
25451: PPUSH
25452: PPUSH
25453: PPUSH
25454: PPUSH
25455: PPUSH
25456: PPUSH
25457: PPUSH
25458: PPUSH
25459: PPUSH
25460: PPUSH
25461: PPUSH
25462: PPUSH
25463: PPUSH
25464: PPUSH
25465: PPUSH
25466: PPUSH
25467: PPUSH
25468: PPUSH
25469: PPUSH
25470: PPUSH
25471: PPUSH
25472: PPUSH
25473: PPUSH
25474: PPUSH
25475: PPUSH
25476: PPUSH
25477: PPUSH
25478: PPUSH
25479: PPUSH
25480: PPUSH
25481: PPUSH
// result = [ ] ;
25482: LD_ADDR_VAR 0 7
25486: PUSH
25487: EMPTY
25488: ST_TO_ADDR
// temp_list = [ ] ;
25489: LD_ADDR_VAR 0 9
25493: PUSH
25494: EMPTY
25495: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25496: LD_VAR 0 4
25500: PUSH
25501: LD_INT 0
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: LD_INT 3
25512: PUSH
25513: LD_INT 4
25515: PUSH
25516: LD_INT 5
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: IN
25527: NOT
25528: IFTRUE 25571
25530: PUSH
25531: LD_VAR 0 1
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: LD_INT 1
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: IN
25546: IFFALSE 25570
25548: PUSH
25549: LD_VAR 0 5
25553: PUSH
25554: LD_INT 1
25556: PUSH
25557: LD_INT 2
25559: PUSH
25560: LD_INT 3
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: LIST
25567: IN
25568: NOT
25569: AND
25570: OR
25571: IFFALSE 25575
// exit ;
25573: GO 43974
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25575: LD_VAR 0 1
25579: PUSH
25580: LD_INT 6
25582: PUSH
25583: LD_INT 7
25585: PUSH
25586: LD_INT 8
25588: PUSH
25589: LD_INT 13
25591: PUSH
25592: LD_INT 12
25594: PUSH
25595: LD_INT 15
25597: PUSH
25598: LD_INT 11
25600: PUSH
25601: LD_INT 14
25603: PUSH
25604: LD_INT 10
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: IN
25618: IFFALSE 25628
// btype = b_lab ;
25620: LD_ADDR_VAR 0 1
25624: PUSH
25625: LD_INT 6
25627: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25628: LD_VAR 0 6
25632: PUSH
25633: LD_INT 0
25635: PUSH
25636: LD_INT 1
25638: PUSH
25639: LD_INT 2
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: LIST
25646: IN
25647: NOT
25648: IFTRUE 25716
25650: PUSH
25651: LD_VAR 0 1
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: LD_INT 3
25667: PUSH
25668: LD_INT 6
25670: PUSH
25671: LD_INT 36
25673: PUSH
25674: LD_INT 4
25676: PUSH
25677: LD_INT 5
25679: PUSH
25680: LD_INT 31
25682: PUSH
25683: LD_INT 32
25685: PUSH
25686: LD_INT 33
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: IN
25702: NOT
25703: IFFALSE 25715
25705: PUSH
25706: LD_VAR 0 6
25710: PUSH
25711: LD_INT 1
25713: EQUAL
25714: AND
25715: OR
25716: IFTRUE 25748
25718: PUSH
25719: LD_VAR 0 1
25723: PUSH
25724: LD_INT 2
25726: PUSH
25727: LD_INT 3
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: IN
25734: NOT
25735: IFFALSE 25747
25737: PUSH
25738: LD_VAR 0 6
25742: PUSH
25743: LD_INT 2
25745: EQUAL
25746: AND
25747: OR
25748: IFFALSE 25758
// mode = 0 ;
25750: LD_ADDR_VAR 0 6
25754: PUSH
25755: LD_INT 0
25757: ST_TO_ADDR
// case mode of 0 :
25758: LD_VAR 0 6
25762: PUSH
25763: LD_INT 0
25765: DOUBLE
25766: EQUAL
25767: IFTRUE 25771
25769: GO 37224
25771: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25772: LD_ADDR_VAR 0 11
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 0
25789: PUSH
25790: LD_INT 1
25792: NEG
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 1
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 1
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 0
25820: PUSH
25821: LD_INT 1
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 1
25830: NEG
25831: PUSH
25832: LD_INT 0
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 1
25841: NEG
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 1
25853: NEG
25854: PUSH
25855: LD_INT 2
25857: NEG
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 0
25865: PUSH
25866: LD_INT 2
25868: NEG
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: LD_INT 1
25879: NEG
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: LD_INT 2
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: LD_INT 3
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 0
25928: PUSH
25929: LD_INT 3
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: LD_INT 2
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25965: LD_ADDR_VAR 0 12
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 0
25982: PUSH
25983: LD_INT 1
25985: NEG
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 1
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 1
26003: PUSH
26004: LD_INT 1
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: LD_INT 1
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 1
26023: NEG
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 1
26034: NEG
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: LD_INT 1
26049: NEG
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 2
26057: PUSH
26058: LD_INT 0
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 2
26067: PUSH
26068: LD_INT 1
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: LD_INT 1
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 2
26088: NEG
26089: PUSH
26090: LD_INT 0
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 2
26099: NEG
26100: PUSH
26101: LD_INT 1
26103: NEG
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 2
26111: NEG
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 3
26122: NEG
26123: PUSH
26124: LD_INT 0
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 3
26133: NEG
26134: PUSH
26135: LD_INT 1
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26161: LD_ADDR_VAR 0 13
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: LD_INT 0
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 0
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: LD_INT 0
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 1
26199: PUSH
26200: LD_INT 1
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 0
26209: PUSH
26210: LD_INT 1
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 1
26219: NEG
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 1
26230: NEG
26231: PUSH
26232: LD_INT 1
26234: NEG
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 1
26242: NEG
26243: PUSH
26244: LD_INT 2
26246: NEG
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 2
26264: PUSH
26265: LD_INT 2
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 2
26284: NEG
26285: PUSH
26286: LD_INT 1
26288: NEG
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 2
26296: NEG
26297: PUSH
26298: LD_INT 2
26300: NEG
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 2
26308: NEG
26309: PUSH
26310: LD_INT 3
26312: NEG
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 3
26320: NEG
26321: PUSH
26322: LD_INT 2
26324: NEG
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 3
26332: NEG
26333: PUSH
26334: LD_INT 3
26336: NEG
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26360: LD_ADDR_VAR 0 14
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: LD_INT 1
26433: NEG
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: LD_INT 2
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: LD_INT 2
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: LD_INT 1
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 1
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: LD_INT 3
26510: NEG
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 0
26518: PUSH
26519: LD_INT 3
26521: NEG
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: LD_INT 2
26532: NEG
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26556: LD_ADDR_VAR 0 15
26560: PUSH
26561: LD_INT 0
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 0
26573: PUSH
26574: LD_INT 1
26576: NEG
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 1
26584: PUSH
26585: LD_INT 0
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 1
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 0
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: LD_INT 0
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 1
26625: NEG
26626: PUSH
26627: LD_INT 1
26629: NEG
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: LD_INT 1
26640: NEG
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 2
26648: PUSH
26649: LD_INT 0
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 2
26658: PUSH
26659: LD_INT 1
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 1
26668: NEG
26669: PUSH
26670: LD_INT 1
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 2
26679: NEG
26680: PUSH
26681: LD_INT 0
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 2
26690: NEG
26691: PUSH
26692: LD_INT 1
26694: NEG
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 2
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 3
26713: PUSH
26714: LD_INT 0
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 3
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26749: LD_ADDR_VAR 0 16
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: LD_INT 1
26769: NEG
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 1
26807: NEG
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 1
26818: NEG
26819: PUSH
26820: LD_INT 1
26822: NEG
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: LD_INT 2
26834: NEG
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 2
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 2
26852: PUSH
26853: LD_INT 2
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 1
26862: PUSH
26863: LD_INT 2
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 2
26872: NEG
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 2
26884: NEG
26885: PUSH
26886: LD_INT 2
26888: NEG
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 3
26896: PUSH
26897: LD_INT 2
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 3
26906: PUSH
26907: LD_INT 3
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 2
26916: PUSH
26917: LD_INT 3
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26942: LD_ADDR_VAR 0 17
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 1
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: NEG
27012: PUSH
27013: LD_INT 1
27015: NEG
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: NEG
27024: PUSH
27025: LD_INT 2
27027: NEG
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: LD_INT 2
27038: NEG
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: LD_INT 1
27049: NEG
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 2
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 2
27067: PUSH
27068: LD_INT 1
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: LD_INT 2
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: LD_INT 2
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: NEG
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 2
27118: NEG
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 2
27129: NEG
27130: PUSH
27131: LD_INT 1
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 2
27141: NEG
27142: PUSH
27143: LD_INT 2
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27172: LD_ADDR_VAR 0 18
27176: PUSH
27177: LD_INT 0
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: LD_INT 1
27192: NEG
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 1
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 1
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: LD_INT 1
27245: NEG
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: LD_INT 2
27257: NEG
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 0
27265: PUSH
27266: LD_INT 2
27268: NEG
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 1
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 2
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 2
27297: PUSH
27298: LD_INT 1
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 2
27307: PUSH
27308: LD_INT 2
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: LD_INT 2
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: LD_INT 2
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: NEG
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 2
27348: NEG
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 2
27359: NEG
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 2
27371: NEG
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27402: LD_ADDR_VAR 0 19
27406: PUSH
27407: LD_INT 0
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 0
27419: PUSH
27420: LD_INT 1
27422: NEG
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 1
27430: PUSH
27431: LD_INT 0
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 1
27440: PUSH
27441: LD_INT 1
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 1
27460: NEG
27461: PUSH
27462: LD_INT 0
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 1
27471: NEG
27472: PUSH
27473: LD_INT 1
27475: NEG
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 1
27483: NEG
27484: PUSH
27485: LD_INT 2
27487: NEG
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 0
27495: PUSH
27496: LD_INT 2
27498: NEG
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: LD_INT 1
27509: NEG
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 2
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 2
27527: PUSH
27528: LD_INT 1
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 2
27537: PUSH
27538: LD_INT 2
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: LD_INT 2
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: LD_INT 2
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 1
27567: NEG
27568: PUSH
27569: LD_INT 1
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 2
27578: NEG
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 2
27589: NEG
27590: PUSH
27591: LD_INT 1
27593: NEG
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 2
27601: NEG
27602: PUSH
27603: LD_INT 2
27605: NEG
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27632: LD_ADDR_VAR 0 20
27636: PUSH
27637: LD_INT 0
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 0
27649: PUSH
27650: LD_INT 1
27652: NEG
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 1
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 1
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: LD_INT 1
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 1
27690: NEG
27691: PUSH
27692: LD_INT 0
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: LD_INT 1
27705: NEG
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 1
27713: NEG
27714: PUSH
27715: LD_INT 2
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: LD_INT 2
27728: NEG
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 1
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 2
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 2
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 2
27767: PUSH
27768: LD_INT 2
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 1
27777: PUSH
27778: LD_INT 2
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 0
27787: PUSH
27788: LD_INT 2
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 1
27797: NEG
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 2
27808: NEG
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 2
27819: NEG
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 2
27831: NEG
27832: PUSH
27833: LD_INT 2
27835: NEG
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27862: LD_ADDR_VAR 0 21
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 0
27879: PUSH
27880: LD_INT 1
27882: NEG
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 1
27890: PUSH
27891: LD_INT 0
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: LD_INT 1
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 1
27920: NEG
27921: PUSH
27922: LD_INT 0
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: LD_INT 1
27935: NEG
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: LD_INT 2
27947: NEG
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: LD_INT 2
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 2
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 2
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 2
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: LD_INT 2
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: LD_INT 2
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 1
28027: NEG
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 2
28038: NEG
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 2
28049: NEG
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 2
28061: NEG
28062: PUSH
28063: LD_INT 2
28065: NEG
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28092: LD_ADDR_VAR 0 22
28096: PUSH
28097: LD_INT 0
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 0
28109: PUSH
28110: LD_INT 1
28112: NEG
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 1
28120: PUSH
28121: LD_INT 0
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: LD_INT 1
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 1
28150: NEG
28151: PUSH
28152: LD_INT 0
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 1
28161: NEG
28162: PUSH
28163: LD_INT 1
28165: NEG
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 1
28173: NEG
28174: PUSH
28175: LD_INT 2
28177: NEG
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: LD_INT 2
28188: NEG
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 1
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 2
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 2
28217: PUSH
28218: LD_INT 1
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 2
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: LD_INT 2
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: NEG
28258: PUSH
28259: LD_INT 1
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 2
28268: NEG
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 2
28279: NEG
28280: PUSH
28281: LD_INT 1
28283: NEG
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 2
28291: NEG
28292: PUSH
28293: LD_INT 2
28295: NEG
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28322: LD_ADDR_VAR 0 23
28326: PUSH
28327: LD_INT 0
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 0
28339: PUSH
28340: LD_INT 1
28342: NEG
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: LD_INT 1
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: LD_INT 1
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 1
28380: NEG
28381: PUSH
28382: LD_INT 0
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 1
28403: NEG
28404: PUSH
28405: LD_INT 2
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: LD_INT 2
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 2
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 2
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 2
28457: PUSH
28458: LD_INT 2
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: LD_INT 2
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: LD_INT 2
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 1
28487: NEG
28488: PUSH
28489: LD_INT 1
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 2
28498: NEG
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 2
28509: NEG
28510: PUSH
28511: LD_INT 1
28513: NEG
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 2
28521: NEG
28522: PUSH
28523: LD_INT 2
28525: NEG
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 2
28533: NEG
28534: PUSH
28535: LD_INT 3
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: NEG
28546: PUSH
28547: LD_INT 3
28549: NEG
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 1
28557: PUSH
28558: LD_INT 2
28560: NEG
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 2
28568: PUSH
28569: LD_INT 1
28571: NEG
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28602: LD_ADDR_VAR 0 24
28606: PUSH
28607: LD_INT 0
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 1
28683: NEG
28684: PUSH
28685: LD_INT 2
28687: NEG
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 0
28695: PUSH
28696: LD_INT 2
28698: NEG
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 1
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 2
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 2
28727: PUSH
28728: LD_INT 1
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 2
28737: PUSH
28738: LD_INT 2
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: LD_INT 2
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: LD_INT 1
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 2
28778: NEG
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 2
28789: NEG
28790: PUSH
28791: LD_INT 1
28793: NEG
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: NEG
28802: PUSH
28803: LD_INT 2
28805: NEG
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 1
28813: PUSH
28814: LD_INT 2
28816: NEG
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 2
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 3
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 3
28845: PUSH
28846: LD_INT 2
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28878: LD_ADDR_VAR 0 25
28882: PUSH
28883: LD_INT 0
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: LD_INT 1
28898: NEG
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: LD_INT 0
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: LD_INT 1
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 1
28936: NEG
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 1
28947: NEG
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: LD_INT 2
28963: NEG
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: LD_INT 2
28974: NEG
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: LD_INT 1
28985: NEG
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 2
28993: PUSH
28994: LD_INT 0
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 2
29003: PUSH
29004: LD_INT 1
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 2
29013: PUSH
29014: LD_INT 2
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 1
29023: PUSH
29024: LD_INT 2
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 0
29033: PUSH
29034: LD_INT 2
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 1
29043: NEG
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 2
29054: NEG
29055: PUSH
29056: LD_INT 0
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 2
29065: NEG
29066: PUSH
29067: LD_INT 1
29069: NEG
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 2
29077: NEG
29078: PUSH
29079: LD_INT 2
29081: NEG
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 3
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 3
29099: PUSH
29100: LD_INT 2
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 2
29109: PUSH
29110: LD_INT 3
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 1
29119: PUSH
29120: LD_INT 3
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29152: LD_ADDR_VAR 0 26
29156: PUSH
29157: LD_INT 0
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 0
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 1
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 0
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: NEG
29211: PUSH
29212: LD_INT 0
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 1
29221: NEG
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: LD_INT 2
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: LD_INT 2
29248: NEG
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 2
29267: PUSH
29268: LD_INT 0
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 2
29277: PUSH
29278: LD_INT 1
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 2
29287: PUSH
29288: LD_INT 2
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 1
29297: PUSH
29298: LD_INT 2
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 0
29307: PUSH
29308: LD_INT 2
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: LD_INT 1
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 2
29328: NEG
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 2
29339: NEG
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 2
29351: NEG
29352: PUSH
29353: LD_INT 2
29355: NEG
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 2
29363: PUSH
29364: LD_INT 3
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 1
29373: PUSH
29374: LD_INT 3
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: LD_INT 2
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 2
29394: NEG
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29428: LD_ADDR_VAR 0 27
29432: PUSH
29433: LD_INT 0
29435: PUSH
29436: LD_INT 0
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: LD_INT 1
29448: NEG
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: LD_INT 0
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 1
29466: PUSH
29467: LD_INT 1
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: LD_INT 1
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 1
29486: NEG
29487: PUSH
29488: LD_INT 0
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: PUSH
29499: LD_INT 1
29501: NEG
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 1
29509: NEG
29510: PUSH
29511: LD_INT 2
29513: NEG
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 0
29521: PUSH
29522: LD_INT 2
29524: NEG
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 1
29532: PUSH
29533: LD_INT 1
29535: NEG
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 2
29543: PUSH
29544: LD_INT 0
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 2
29553: PUSH
29554: LD_INT 1
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 2
29563: PUSH
29564: LD_INT 2
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 1
29573: PUSH
29574: LD_INT 2
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 0
29583: PUSH
29584: LD_INT 2
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: LD_INT 1
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 2
29604: NEG
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 2
29615: NEG
29616: PUSH
29617: LD_INT 1
29619: NEG
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 2
29627: NEG
29628: PUSH
29629: LD_INT 2
29631: NEG
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 1
29639: NEG
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 2
29650: NEG
29651: PUSH
29652: LD_INT 1
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 3
29661: NEG
29662: PUSH
29663: LD_INT 1
29665: NEG
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 3
29673: NEG
29674: PUSH
29675: LD_INT 2
29677: NEG
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29708: LD_ADDR_VAR 0 28
29712: PUSH
29713: LD_INT 0
29715: PUSH
29716: LD_INT 0
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: LD_INT 1
29728: NEG
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: LD_INT 0
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 1
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: LD_INT 1
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: LD_INT 0
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 1
29777: NEG
29778: PUSH
29779: LD_INT 1
29781: NEG
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 1
29789: NEG
29790: PUSH
29791: LD_INT 2
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 0
29801: PUSH
29802: LD_INT 2
29804: NEG
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 1
29812: PUSH
29813: LD_INT 1
29815: NEG
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 2
29823: PUSH
29824: LD_INT 0
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 2
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 2
29843: PUSH
29844: LD_INT 2
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 1
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 0
29863: PUSH
29864: LD_INT 2
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 1
29873: NEG
29874: PUSH
29875: LD_INT 1
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 2
29884: NEG
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 2
29895: NEG
29896: PUSH
29897: LD_INT 1
29899: NEG
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 2
29907: NEG
29908: PUSH
29909: LD_INT 2
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 2
29919: NEG
29920: PUSH
29921: LD_INT 3
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: LD_INT 3
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 3
29943: NEG
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 3
29955: NEG
29956: PUSH
29957: LD_INT 2
29959: NEG
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29990: LD_ADDR_VAR 0 29
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: LD_INT 0
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: LD_INT 1
30010: NEG
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: LD_INT 0
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 1
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 0
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 1
30048: NEG
30049: PUSH
30050: LD_INT 0
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 1
30059: NEG
30060: PUSH
30061: LD_INT 1
30063: NEG
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 1
30071: NEG
30072: PUSH
30073: LD_INT 2
30075: NEG
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 2
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: LD_INT 1
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 2
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 2
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 1
30125: PUSH
30126: LD_INT 2
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 0
30135: PUSH
30136: LD_INT 2
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 1
30145: NEG
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 2
30156: NEG
30157: PUSH
30158: LD_INT 1
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 2
30168: NEG
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 2
30180: NEG
30181: PUSH
30182: LD_INT 3
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: LD_INT 1
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 3
30203: PUSH
30204: LD_INT 1
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: LD_INT 3
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: LD_INT 2
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 3
30234: NEG
30235: PUSH
30236: LD_INT 2
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30269: LD_ADDR_VAR 0 30
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: LD_INT 1
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 0
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: LD_INT 2
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: LD_INT 2
30365: NEG
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 1
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 2
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 2
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 2
30404: PUSH
30405: LD_INT 2
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 1
30414: PUSH
30415: LD_INT 2
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 1
30424: NEG
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 2
30435: NEG
30436: PUSH
30437: LD_INT 0
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 2
30446: NEG
30447: PUSH
30448: LD_INT 1
30450: NEG
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PUSH
30460: LD_INT 3
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 1
30470: PUSH
30471: LD_INT 2
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 3
30481: PUSH
30482: LD_INT 2
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 2
30491: PUSH
30492: LD_INT 3
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 2
30501: NEG
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 3
30512: NEG
30513: PUSH
30514: LD_INT 1
30516: NEG
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30547: LD_ADDR_VAR 0 31
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 0
30564: PUSH
30565: LD_INT 1
30567: NEG
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: LD_INT 1
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 1
30616: NEG
30617: PUSH
30618: LD_INT 1
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 1
30628: NEG
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 1
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 2
30651: PUSH
30652: LD_INT 0
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 2
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 2
30671: PUSH
30672: LD_INT 2
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: LD_INT 2
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 0
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 2
30712: NEG
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 2
30724: NEG
30725: PUSH
30726: LD_INT 2
30728: NEG
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 2
30736: NEG
30737: PUSH
30738: LD_INT 3
30740: NEG
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 2
30748: PUSH
30749: LD_INT 1
30751: NEG
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 3
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: LD_INT 3
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: LD_INT 2
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 3
30790: NEG
30791: PUSH
30792: LD_INT 2
30794: NEG
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30825: LD_ADDR_VAR 0 32
30829: PUSH
30830: LD_INT 0
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 0
30842: PUSH
30843: LD_INT 1
30845: NEG
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 1
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 0
30873: PUSH
30874: LD_INT 1
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 1
30883: NEG
30884: PUSH
30885: LD_INT 0
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PUSH
30896: LD_INT 1
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 1
30906: NEG
30907: PUSH
30908: LD_INT 2
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 0
30918: PUSH
30919: LD_INT 2
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: LD_INT 1
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 2
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 2
30950: PUSH
30951: LD_INT 2
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: LD_INT 2
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: LD_INT 2
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 1
30980: NEG
30981: PUSH
30982: LD_INT 1
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 2
30991: NEG
30992: PUSH
30993: LD_INT 0
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 2
31002: NEG
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 1
31014: NEG
31015: PUSH
31016: LD_INT 3
31018: NEG
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 1
31026: PUSH
31027: LD_INT 2
31029: NEG
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 3
31037: PUSH
31038: LD_INT 2
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 2
31047: PUSH
31048: LD_INT 3
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 2
31057: NEG
31058: PUSH
31059: LD_INT 1
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 3
31068: NEG
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31103: LD_ADDR_VAR 0 33
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: LD_INT 1
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 1
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 0
31151: PUSH
31152: LD_INT 1
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 1
31172: NEG
31173: PUSH
31174: LD_INT 1
31176: NEG
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: LD_INT 2
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 2
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: LD_INT 2
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 2
31258: NEG
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 2
31269: NEG
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: LD_INT 2
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 2
31293: NEG
31294: PUSH
31295: LD_INT 3
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 2
31305: PUSH
31306: LD_INT 1
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 3
31316: PUSH
31317: LD_INT 1
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: LD_INT 3
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 1
31336: NEG
31337: PUSH
31338: LD_INT 2
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 3
31347: NEG
31348: PUSH
31349: LD_INT 2
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31382: LD_ADDR_VAR 0 34
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: LD_INT 1
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 1
31451: NEG
31452: PUSH
31453: LD_INT 1
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 1
31463: NEG
31464: PUSH
31465: LD_INT 2
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 0
31475: PUSH
31476: LD_INT 2
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: LD_INT 1
31489: NEG
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 2
31507: PUSH
31508: LD_INT 2
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: LD_INT 2
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 1
31527: NEG
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 2
31538: NEG
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 2
31549: NEG
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 2
31561: NEG
31562: PUSH
31563: LD_INT 2
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 1
31573: NEG
31574: PUSH
31575: LD_INT 3
31577: NEG
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: LD_INT 2
31588: NEG
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 3
31596: PUSH
31597: LD_INT 2
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 2
31606: PUSH
31607: LD_INT 3
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 2
31616: NEG
31617: PUSH
31618: LD_INT 1
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 3
31627: NEG
31628: PUSH
31629: LD_INT 1
31631: NEG
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31662: LD_ADDR_VAR 0 35
31666: PUSH
31667: LD_INT 0
31669: PUSH
31670: LD_INT 0
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 1
31690: PUSH
31691: LD_INT 0
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 1
31700: PUSH
31701: LD_INT 1
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 0
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 1
31720: NEG
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 1
31731: NEG
31732: PUSH
31733: LD_INT 1
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 2
31753: NEG
31754: PUSH
31755: LD_INT 1
31757: NEG
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31774: LD_ADDR_VAR 0 36
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: LD_INT 1
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: LD_INT 0
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: LD_INT 1
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 1
31832: NEG
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: LD_INT 1
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 1
31855: NEG
31856: PUSH
31857: LD_INT 2
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31886: LD_ADDR_VAR 0 37
31890: PUSH
31891: LD_INT 0
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: LD_INT 1
31906: NEG
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: LD_INT 0
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 1
31924: PUSH
31925: LD_INT 1
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: LD_INT 1
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: LD_INT 1
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 1
31978: NEG
31979: PUSH
31980: LD_INT 1
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31998: LD_ADDR_VAR 0 38
32002: PUSH
32003: LD_INT 0
32005: PUSH
32006: LD_INT 0
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: LD_INT 1
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 1
32056: NEG
32057: PUSH
32058: LD_INT 0
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: LD_INT 1
32071: NEG
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 2
32089: NEG
32090: PUSH
32091: LD_INT 1
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32110: LD_ADDR_VAR 0 39
32114: PUSH
32115: LD_INT 0
32117: PUSH
32118: LD_INT 0
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 1
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 1
32148: PUSH
32149: LD_INT 1
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: LD_INT 1
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 1
32168: NEG
32169: PUSH
32170: LD_INT 0
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: NEG
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: LD_INT 2
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: LD_INT 2
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32222: LD_ADDR_VAR 0 40
32226: PUSH
32227: LD_INT 0
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 0
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 1
32250: PUSH
32251: LD_INT 0
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: LD_INT 1
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: NEG
32281: PUSH
32282: LD_INT 0
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: LD_INT 1
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: LD_INT 1
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32334: LD_ADDR_VAR 0 41
32338: PUSH
32339: LD_INT 0
32341: PUSH
32342: LD_INT 0
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: LD_INT 1
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 1
32372: PUSH
32373: LD_INT 1
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: LD_INT 1
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 1
32392: NEG
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: LD_INT 1
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 1
32415: NEG
32416: PUSH
32417: LD_INT 2
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 1
32427: PUSH
32428: LD_INT 1
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 2
32438: PUSH
32439: LD_INT 0
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 2
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 2
32458: PUSH
32459: LD_INT 2
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 1
32468: PUSH
32469: LD_INT 2
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 1
32478: NEG
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 2
32489: NEG
32490: PUSH
32491: LD_INT 0
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 2
32500: NEG
32501: PUSH
32502: LD_INT 1
32504: NEG
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 2
32512: NEG
32513: PUSH
32514: LD_INT 2
32516: NEG
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 2
32524: NEG
32525: PUSH
32526: LD_INT 3
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 3
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 3
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 3
32567: PUSH
32568: LD_INT 2
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 3
32577: PUSH
32578: LD_INT 3
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 2
32587: PUSH
32588: LD_INT 3
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 2
32597: NEG
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 3
32608: NEG
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 3
32619: NEG
32620: PUSH
32621: LD_INT 1
32623: NEG
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 3
32631: NEG
32632: PUSH
32633: LD_INT 2
32635: NEG
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 3
32643: NEG
32644: PUSH
32645: LD_INT 3
32647: NEG
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32684: LD_ADDR_VAR 0 42
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: NEG
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: LD_INT 1
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: LD_INT 2
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: PUSH
32789: LD_INT 1
32791: NEG
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: LD_INT 2
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: LD_INT 2
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: LD_INT 2
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 1
32839: NEG
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 2
32850: NEG
32851: PUSH
32852: LD_INT 1
32854: NEG
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 2
32862: NEG
32863: PUSH
32864: LD_INT 2
32866: NEG
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 2
32874: NEG
32875: PUSH
32876: LD_INT 3
32878: NEG
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 1
32886: NEG
32887: PUSH
32888: LD_INT 3
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: LD_INT 3
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: LD_INT 2
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 3
32920: PUSH
32921: LD_INT 2
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 3
32930: PUSH
32931: LD_INT 3
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 2
32940: PUSH
32941: LD_INT 3
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: LD_INT 3
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: LD_INT 3
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 1
32970: NEG
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 3
32981: NEG
32982: PUSH
32983: LD_INT 2
32985: NEG
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 3
32993: NEG
32994: PUSH
32995: LD_INT 3
32997: NEG
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33034: LD_ADDR_VAR 0 43
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 0
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 1
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 1
33072: PUSH
33073: LD_INT 1
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 1
33115: NEG
33116: PUSH
33117: LD_INT 2
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: LD_INT 2
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 1
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 2
33149: PUSH
33150: LD_INT 0
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 2
33159: PUSH
33160: LD_INT 1
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: LD_INT 2
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 1
33189: NEG
33190: PUSH
33191: LD_INT 1
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 2
33200: NEG
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 2
33211: NEG
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: NEG
33224: PUSH
33225: LD_INT 3
33227: NEG
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: LD_INT 3
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: LD_INT 2
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 2
33257: PUSH
33258: LD_INT 1
33260: NEG
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 3
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 3
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 1
33288: PUSH
33289: LD_INT 3
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: LD_INT 3
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 1
33308: NEG
33309: PUSH
33310: LD_INT 2
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 2
33319: NEG
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 3
33330: NEG
33331: PUSH
33332: LD_INT 0
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 3
33341: NEG
33342: PUSH
33343: LD_INT 1
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33382: LD_ADDR_VAR 0 44
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: LD_INT 0
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: LD_INT 1
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: LD_INT 1
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 1
33451: NEG
33452: PUSH
33453: LD_INT 1
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 1
33463: NEG
33464: PUSH
33465: LD_INT 2
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: LD_INT 1
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 2
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 2
33496: PUSH
33497: LD_INT 1
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 2
33506: PUSH
33507: LD_INT 2
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: LD_INT 2
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 1
33526: NEG
33527: PUSH
33528: LD_INT 1
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 2
33537: NEG
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 2
33548: NEG
33549: PUSH
33550: LD_INT 1
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 2
33560: NEG
33561: PUSH
33562: LD_INT 2
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: NEG
33573: PUSH
33574: LD_INT 3
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 2
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 3
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 3
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 3
33615: PUSH
33616: LD_INT 2
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 3
33625: PUSH
33626: LD_INT 3
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 2
33635: PUSH
33636: LD_INT 3
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 3
33656: NEG
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 3
33667: NEG
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 3
33679: NEG
33680: PUSH
33681: LD_INT 2
33683: NEG
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 3
33691: NEG
33692: PUSH
33693: LD_INT 3
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33732: LD_ADDR_VAR 0 45
33736: PUSH
33737: LD_INT 0
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: LD_INT 0
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: LD_INT 1
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: NEG
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: LD_INT 1
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 1
33813: NEG
33814: PUSH
33815: LD_INT 2
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 0
33825: PUSH
33826: LD_INT 2
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: PUSH
33837: LD_INT 1
33839: NEG
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 2
33847: PUSH
33848: LD_INT 1
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 2
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 2
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: LD_INT 1
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 2
33898: NEG
33899: PUSH
33900: LD_INT 1
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 2
33910: NEG
33911: PUSH
33912: LD_INT 2
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 2
33922: NEG
33923: PUSH
33924: LD_INT 3
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: LD_INT 3
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: LD_INT 3
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: LD_INT 2
33960: NEG
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 3
33968: PUSH
33969: LD_INT 2
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 3
33978: PUSH
33979: LD_INT 3
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 2
33988: PUSH
33989: LD_INT 3
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 1
33998: PUSH
33999: LD_INT 3
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 0
34008: PUSH
34009: LD_INT 3
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 1
34018: NEG
34019: PUSH
34020: LD_INT 2
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 3
34029: NEG
34030: PUSH
34031: LD_INT 2
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 3
34041: NEG
34042: PUSH
34043: LD_INT 3
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34082: LD_ADDR_VAR 0 46
34086: PUSH
34087: LD_INT 0
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: LD_INT 1
34102: NEG
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 1
34110: PUSH
34111: LD_INT 0
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 1
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 1
34140: NEG
34141: PUSH
34142: LD_INT 0
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: LD_INT 1
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: LD_INT 2
34167: NEG
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: LD_INT 2
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 2
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: LD_INT 1
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: LD_INT 2
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 0
34227: PUSH
34228: LD_INT 2
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 1
34237: NEG
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 2
34248: NEG
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 2
34259: NEG
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: LD_INT 3
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: LD_INT 3
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: LD_INT 2
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 2
34305: PUSH
34306: LD_INT 1
34308: NEG
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 3
34316: PUSH
34317: LD_INT 0
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 3
34326: PUSH
34327: LD_INT 1
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: LD_INT 3
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: LD_INT 3
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 1
34356: NEG
34357: PUSH
34358: LD_INT 2
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 2
34367: NEG
34368: PUSH
34369: LD_INT 1
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 3
34378: NEG
34379: PUSH
34380: LD_INT 0
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 3
34389: NEG
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34430: LD_ADDR_VAR 0 47
34434: PUSH
34435: LD_INT 0
34437: PUSH
34438: LD_INT 0
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 0
34447: PUSH
34448: LD_INT 1
34450: NEG
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: LD_INT 0
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: LD_INT 1
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: LD_INT 1
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 1
34488: NEG
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 1
34499: NEG
34500: PUSH
34501: LD_INT 1
34503: NEG
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: LD_INT 2
34515: NEG
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: LD_INT 2
34526: NEG
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 1
34534: PUSH
34535: LD_INT 1
34537: NEG
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 2
34545: NEG
34546: PUSH
34547: LD_INT 1
34549: NEG
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 2
34557: NEG
34558: PUSH
34559: LD_INT 2
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34581: LD_ADDR_VAR 0 48
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: LD_INT 0
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: LD_INT 1
34601: NEG
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 1
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 0
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 1
34639: NEG
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 1
34650: NEG
34651: PUSH
34652: LD_INT 1
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 1
34662: NEG
34663: PUSH
34664: LD_INT 2
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: LD_INT 2
34677: NEG
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: LD_INT 1
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 2
34706: PUSH
34707: LD_INT 1
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34728: LD_ADDR_VAR 0 49
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: LD_INT 1
34748: NEG
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 1
34766: PUSH
34767: LD_INT 1
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: LD_INT 1
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 1
34786: NEG
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 1
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 2
34840: PUSH
34841: LD_INT 2
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: LD_INT 2
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34872: LD_ADDR_VAR 0 50
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: LD_INT 0
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: LD_INT 1
34892: NEG
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: LD_INT 0
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: LD_INT 1
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: LD_INT 0
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: LD_INT 1
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 2
34963: PUSH
34964: LD_INT 2
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: LD_INT 2
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: NEG
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35016: LD_ADDR_VAR 0 51
35020: PUSH
35021: LD_INT 0
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 0
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 1
35054: PUSH
35055: LD_INT 1
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 1
35074: NEG
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 1
35085: NEG
35086: PUSH
35087: LD_INT 1
35089: NEG
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: LD_INT 2
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 2
35128: NEG
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 2
35139: NEG
35140: PUSH
35141: LD_INT 1
35143: NEG
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35163: LD_ADDR_VAR 0 52
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 0
35180: PUSH
35181: LD_INT 1
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 1
35191: PUSH
35192: LD_INT 0
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 1
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: LD_INT 1
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: NEG
35233: PUSH
35234: LD_INT 1
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: LD_INT 2
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 1
35256: NEG
35257: PUSH
35258: LD_INT 1
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 2
35267: NEG
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 2
35278: NEG
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 2
35290: NEG
35291: PUSH
35292: LD_INT 2
35294: NEG
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35314: LD_ADDR_VAR 0 53
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: LD_INT 1
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 0
35362: PUSH
35363: LD_INT 1
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 1
35372: NEG
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 1
35383: NEG
35384: PUSH
35385: LD_INT 1
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: NEG
35396: PUSH
35397: LD_INT 2
35399: NEG
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: LD_INT 2
35410: NEG
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: LD_INT 1
35421: NEG
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 2
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 2
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 2
35449: PUSH
35450: LD_INT 2
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: LD_INT 2
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: LD_INT 1
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 2
35490: NEG
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 2
35501: NEG
35502: PUSH
35503: LD_INT 1
35505: NEG
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 2
35513: NEG
35514: PUSH
35515: LD_INT 2
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35544: LD_ADDR_VAR 0 54
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 1
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PUSH
35627: LD_INT 2
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 2
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: LD_INT 1
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 2
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: LD_INT 1
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 2
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 1
35689: PUSH
35690: LD_INT 2
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 1
35709: NEG
35710: PUSH
35711: LD_INT 1
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 2
35720: NEG
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 2
35731: NEG
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 2
35743: NEG
35744: PUSH
35745: LD_INT 2
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35774: LD_ADDR_VAR 0 55
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 0
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 1
35812: PUSH
35813: LD_INT 1
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 0
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: NEG
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: LD_INT 1
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 1
35855: NEG
35856: PUSH
35857: LD_INT 2
35859: NEG
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: LD_INT 2
35870: NEG
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 2
35899: PUSH
35900: LD_INT 1
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 2
35909: PUSH
35910: LD_INT 2
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: LD_INT 2
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: LD_INT 2
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 2
35950: NEG
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 2
35961: NEG
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 2
35973: NEG
35974: PUSH
35975: LD_INT 2
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36004: LD_ADDR_VAR 0 56
36008: PUSH
36009: LD_INT 0
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: LD_INT 1
36024: NEG
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 1
36032: PUSH
36033: LD_INT 0
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 1
36042: PUSH
36043: LD_INT 1
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: LD_INT 1
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: LD_INT 2
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 2
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 2
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 2
36139: PUSH
36140: LD_INT 2
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: LD_INT 2
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 1
36169: NEG
36170: PUSH
36171: LD_INT 1
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 2
36180: NEG
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: LD_INT 1
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 2
36203: NEG
36204: PUSH
36205: LD_INT 2
36207: NEG
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36234: LD_ADDR_VAR 0 57
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: LD_INT 2
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: LD_INT 2
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 2
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 2
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 2
36369: PUSH
36370: LD_INT 2
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: LD_INT 2
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 1
36399: NEG
36400: PUSH
36401: LD_INT 1
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 2
36410: NEG
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: NEG
36422: PUSH
36423: LD_INT 1
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 2
36433: NEG
36434: PUSH
36435: LD_INT 2
36437: NEG
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36464: LD_ADDR_VAR 0 58
36468: PUSH
36469: LD_INT 0
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: LD_INT 1
36484: NEG
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 1
36492: PUSH
36493: LD_INT 0
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: LD_INT 1
36537: NEG
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: LD_INT 2
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: LD_INT 2
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 2
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 2
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 2
36599: PUSH
36600: LD_INT 2
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: LD_INT 2
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: LD_INT 2
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: NEG
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 2
36651: NEG
36652: PUSH
36653: LD_INT 1
36655: NEG
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 2
36663: NEG
36664: PUSH
36665: LD_INT 2
36667: NEG
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36694: LD_ADDR_VAR 0 59
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36782: LD_ADDR_VAR 0 60
36786: PUSH
36787: LD_INT 0
36789: PUSH
36790: LD_INT 0
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36870: LD_ADDR_VAR 0 61
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: LD_INT 1
36890: NEG
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: LD_INT 1
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: LD_INT 1
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: NEG
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 1
36939: NEG
36940: PUSH
36941: LD_INT 1
36943: NEG
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36958: LD_ADDR_VAR 0 62
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: LD_INT 0
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: NEG
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37046: LD_ADDR_VAR 0 63
37050: PUSH
37051: LD_INT 0
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 1
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 0
37094: PUSH
37095: LD_INT 1
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: NEG
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 1
37115: NEG
37116: PUSH
37117: LD_INT 1
37119: NEG
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37134: LD_ADDR_VAR 0 64
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 0
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: NEG
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: LD_INT 1
37207: NEG
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: ST_TO_ADDR
// end ; 1 :
37222: GO 43119
37224: LD_INT 1
37226: DOUBLE
37227: EQUAL
37228: IFTRUE 37232
37230: GO 39855
37232: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37233: LD_ADDR_VAR 0 11
37237: PUSH
37238: LD_INT 1
37240: NEG
37241: PUSH
37242: LD_INT 3
37244: NEG
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: LD_INT 3
37255: NEG
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: LD_INT 2
37266: NEG
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: LIST
37276: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37277: LD_ADDR_VAR 0 12
37281: PUSH
37282: LD_INT 2
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 3
37295: PUSH
37296: LD_INT 0
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 3
37305: PUSH
37306: LD_INT 1
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: LIST
37317: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37318: LD_ADDR_VAR 0 13
37322: PUSH
37323: LD_INT 3
37325: PUSH
37326: LD_INT 2
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 3
37335: PUSH
37336: LD_INT 3
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 2
37345: PUSH
37346: LD_INT 3
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37358: LD_ADDR_VAR 0 14
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: LD_INT 3
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: LD_INT 3
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: NEG
37386: PUSH
37387: LD_INT 2
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: LIST
37398: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37399: LD_ADDR_VAR 0 15
37403: PUSH
37404: LD_INT 2
37406: NEG
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 3
37417: NEG
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 3
37428: NEG
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37443: LD_ADDR_VAR 0 16
37447: PUSH
37448: LD_INT 2
37450: NEG
37451: PUSH
37452: LD_INT 3
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 3
37462: NEG
37463: PUSH
37464: LD_INT 2
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 3
37474: NEG
37475: PUSH
37476: LD_INT 3
37478: NEG
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: LIST
37488: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37489: LD_ADDR_VAR 0 17
37493: PUSH
37494: LD_INT 1
37496: NEG
37497: PUSH
37498: LD_INT 3
37500: NEG
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: LD_INT 3
37511: NEG
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: LD_INT 2
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: LIST
37532: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37533: LD_ADDR_VAR 0 18
37537: PUSH
37538: LD_INT 2
37540: PUSH
37541: LD_INT 1
37543: NEG
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 3
37551: PUSH
37552: LD_INT 0
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 3
37561: PUSH
37562: LD_INT 1
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37574: LD_ADDR_VAR 0 19
37578: PUSH
37579: LD_INT 3
37581: PUSH
37582: LD_INT 2
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 3
37591: PUSH
37592: LD_INT 3
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 2
37601: PUSH
37602: LD_INT 3
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: LIST
37613: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37614: LD_ADDR_VAR 0 20
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: LD_INT 3
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: LD_INT 2
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37655: LD_ADDR_VAR 0 21
37659: PUSH
37660: LD_INT 2
37662: NEG
37663: PUSH
37664: LD_INT 1
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 3
37673: NEG
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 3
37684: NEG
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: LIST
37698: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37699: LD_ADDR_VAR 0 22
37703: PUSH
37704: LD_INT 2
37706: NEG
37707: PUSH
37708: LD_INT 3
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 3
37718: NEG
37719: PUSH
37720: LD_INT 2
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 3
37730: NEG
37731: PUSH
37732: LD_INT 3
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: LIST
37744: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37745: LD_ADDR_VAR 0 23
37749: PUSH
37750: LD_INT 0
37752: PUSH
37753: LD_INT 3
37755: NEG
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 1
37763: NEG
37764: PUSH
37765: LD_INT 4
37767: NEG
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: LD_INT 3
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: LIST
37788: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37789: LD_ADDR_VAR 0 24
37793: PUSH
37794: LD_INT 3
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 3
37806: PUSH
37807: LD_INT 1
37809: NEG
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 4
37817: PUSH
37818: LD_INT 1
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: LIST
37829: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37830: LD_ADDR_VAR 0 25
37834: PUSH
37835: LD_INT 3
37837: PUSH
37838: LD_INT 3
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 4
37847: PUSH
37848: LD_INT 3
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 3
37857: PUSH
37858: LD_INT 4
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37870: LD_ADDR_VAR 0 26
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: LD_INT 3
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: LD_INT 4
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: NEG
37898: PUSH
37899: LD_INT 3
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: LIST
37910: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37911: LD_ADDR_VAR 0 27
37915: PUSH
37916: LD_INT 3
37918: NEG
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 3
37929: NEG
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 4
37940: NEG
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: LIST
37954: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37955: LD_ADDR_VAR 0 28
37959: PUSH
37960: LD_INT 3
37962: NEG
37963: PUSH
37964: LD_INT 3
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 3
37974: NEG
37975: PUSH
37976: LD_INT 4
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 4
37986: NEG
37987: PUSH
37988: LD_INT 3
37990: NEG
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: LIST
38000: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38001: LD_ADDR_VAR 0 29
38005: PUSH
38006: LD_INT 1
38008: NEG
38009: PUSH
38010: LD_INT 3
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: LD_INT 3
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 1
38031: PUSH
38032: LD_INT 2
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 1
38042: NEG
38043: PUSH
38044: LD_INT 4
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: LD_INT 4
38057: NEG
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: LD_INT 3
38068: NEG
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: LD_INT 5
38080: NEG
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: LD_INT 5
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 1
38099: PUSH
38100: LD_INT 4
38102: NEG
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: NEG
38111: PUSH
38112: LD_INT 6
38114: NEG
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: LD_INT 6
38125: NEG
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: LD_INT 5
38136: NEG
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38156: LD_ADDR_VAR 0 30
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 3
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 3
38184: PUSH
38185: LD_INT 1
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 3
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 4
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 4
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 4
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 5
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 5
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 5
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 6
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 6
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38299: LD_ADDR_VAR 0 31
38303: PUSH
38304: LD_INT 3
38306: PUSH
38307: LD_INT 2
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 3
38316: PUSH
38317: LD_INT 3
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: PUSH
38327: LD_INT 3
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 4
38336: PUSH
38337: LD_INT 3
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 4
38346: PUSH
38347: LD_INT 4
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 3
38356: PUSH
38357: LD_INT 4
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 5
38366: PUSH
38367: LD_INT 4
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 5
38376: PUSH
38377: LD_INT 5
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 4
38386: PUSH
38387: LD_INT 5
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 6
38396: PUSH
38397: LD_INT 5
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 6
38406: PUSH
38407: LD_INT 6
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 5
38416: PUSH
38417: LD_INT 6
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38438: LD_ADDR_VAR 0 32
38442: PUSH
38443: LD_INT 1
38445: PUSH
38446: LD_INT 3
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 0
38455: PUSH
38456: LD_INT 3
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: LD_INT 2
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: LD_INT 4
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 0
38486: PUSH
38487: LD_INT 4
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: NEG
38497: PUSH
38498: LD_INT 3
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 1
38507: PUSH
38508: LD_INT 5
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: LD_INT 5
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 1
38527: NEG
38528: PUSH
38529: LD_INT 4
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: LD_INT 6
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: LD_INT 6
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: LD_INT 5
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38581: LD_ADDR_VAR 0 33
38585: PUSH
38586: LD_INT 2
38588: NEG
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 3
38599: NEG
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 3
38610: NEG
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 3
38622: NEG
38623: PUSH
38624: LD_INT 1
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 4
38633: NEG
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 4
38644: NEG
38645: PUSH
38646: LD_INT 1
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 4
38656: NEG
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 5
38667: NEG
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 5
38678: NEG
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 5
38690: NEG
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 6
38701: NEG
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 6
38712: NEG
38713: PUSH
38714: LD_INT 1
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38736: LD_ADDR_VAR 0 34
38740: PUSH
38741: LD_INT 2
38743: NEG
38744: PUSH
38745: LD_INT 3
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 3
38755: NEG
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 3
38767: NEG
38768: PUSH
38769: LD_INT 3
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 3
38779: NEG
38780: PUSH
38781: LD_INT 4
38783: NEG
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 4
38791: NEG
38792: PUSH
38793: LD_INT 3
38795: NEG
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 4
38803: NEG
38804: PUSH
38805: LD_INT 4
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 4
38815: NEG
38816: PUSH
38817: LD_INT 5
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 5
38827: NEG
38828: PUSH
38829: LD_INT 4
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 5
38839: NEG
38840: PUSH
38841: LD_INT 5
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 5
38851: NEG
38852: PUSH
38853: LD_INT 6
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 6
38863: NEG
38864: PUSH
38865: LD_INT 5
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 6
38875: NEG
38876: PUSH
38877: LD_INT 6
38879: NEG
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38899: LD_ADDR_VAR 0 41
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: LD_INT 2
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: NEG
38918: PUSH
38919: LD_INT 3
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: LD_INT 2
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38943: LD_ADDR_VAR 0 42
38947: PUSH
38948: LD_INT 2
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 2
38960: PUSH
38961: LD_INT 1
38963: NEG
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 3
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: LIST
38983: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38984: LD_ADDR_VAR 0 43
38988: PUSH
38989: LD_INT 2
38991: PUSH
38992: LD_INT 2
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 3
39001: PUSH
39002: LD_INT 2
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 2
39011: PUSH
39012: LD_INT 3
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39024: LD_ADDR_VAR 0 44
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: LD_INT 2
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 3
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: LD_INT 2
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: LIST
39064: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39065: LD_ADDR_VAR 0 45
39069: PUSH
39070: LD_INT 2
39072: NEG
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: NEG
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 3
39094: NEG
39095: PUSH
39096: LD_INT 1
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: LIST
39108: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39109: LD_ADDR_VAR 0 46
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: LD_INT 2
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 2
39128: NEG
39129: PUSH
39130: LD_INT 3
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 3
39140: NEG
39141: PUSH
39142: LD_INT 2
39144: NEG
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: LIST
39154: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39155: LD_ADDR_VAR 0 47
39159: PUSH
39160: LD_INT 2
39162: NEG
39163: PUSH
39164: LD_INT 3
39166: NEG
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: LD_INT 3
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39188: LD_ADDR_VAR 0 48
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: LD_INT 2
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39219: LD_ADDR_VAR 0 49
39223: PUSH
39224: LD_INT 3
39226: PUSH
39227: LD_INT 1
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 3
39236: PUSH
39237: LD_INT 2
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39248: LD_ADDR_VAR 0 50
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: LD_INT 3
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: LD_INT 3
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39277: LD_ADDR_VAR 0 51
39281: PUSH
39282: LD_INT 1
39284: NEG
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 2
39295: NEG
39296: PUSH
39297: LD_INT 1
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39308: LD_ADDR_VAR 0 52
39312: PUSH
39313: LD_INT 3
39315: NEG
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 3
39327: NEG
39328: PUSH
39329: LD_INT 2
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39341: LD_ADDR_VAR 0 53
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: LD_INT 3
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: LD_INT 3
39363: NEG
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39385: LD_ADDR_VAR 0 54
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: LD_INT 1
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 3
39403: PUSH
39404: LD_INT 0
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 3
39413: PUSH
39414: LD_INT 1
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: LIST
39425: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39426: LD_ADDR_VAR 0 55
39430: PUSH
39431: LD_INT 3
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 3
39443: PUSH
39444: LD_INT 3
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: LD_INT 3
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: LIST
39465: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39466: LD_ADDR_VAR 0 56
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: LD_INT 3
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: LD_INT 3
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: LD_INT 2
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: LIST
39506: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39507: LD_ADDR_VAR 0 57
39511: PUSH
39512: LD_INT 2
39514: NEG
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 3
39525: NEG
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 3
39536: NEG
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: LIST
39550: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39551: LD_ADDR_VAR 0 58
39555: PUSH
39556: LD_INT 2
39558: NEG
39559: PUSH
39560: LD_INT 3
39562: NEG
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 3
39570: NEG
39571: PUSH
39572: LD_INT 2
39574: NEG
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 3
39582: NEG
39583: PUSH
39584: LD_INT 3
39586: NEG
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: LIST
39596: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39597: LD_ADDR_VAR 0 59
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: LD_INT 2
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 2
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39641: LD_ADDR_VAR 0 60
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 2
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39682: LD_ADDR_VAR 0 61
39686: PUSH
39687: LD_INT 2
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 2
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: LIST
39721: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39722: LD_ADDR_VAR 0 62
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: LD_INT 2
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: LIST
39762: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39763: LD_ADDR_VAR 0 63
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 2
39781: NEG
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 2
39792: NEG
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: LIST
39806: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39807: LD_ADDR_VAR 0 64
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: LD_INT 2
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 2
39826: NEG
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 2
39838: NEG
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: LIST
39852: ST_TO_ADDR
// end ; 2 :
39853: GO 43119
39855: LD_INT 2
39857: DOUBLE
39858: EQUAL
39859: IFTRUE 39863
39861: GO 43118
39863: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39864: LD_ADDR_VAR 0 29
39868: PUSH
39869: LD_INT 4
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 4
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 5
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 5
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 4
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 3
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 3
39932: PUSH
39933: LD_INT 1
39935: NEG
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 3
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 5
39954: PUSH
39955: LD_INT 2
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 3
39964: PUSH
39965: LD_INT 3
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 3
39974: PUSH
39975: LD_INT 2
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 4
39984: PUSH
39985: LD_INT 3
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 4
39994: PUSH
39995: LD_INT 4
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 3
40004: PUSH
40005: LD_INT 4
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: LD_INT 3
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: LD_INT 2
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 4
40034: PUSH
40035: LD_INT 2
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 2
40044: PUSH
40045: LD_INT 4
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: LD_INT 4
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 0
40064: PUSH
40065: LD_INT 3
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 1
40074: PUSH
40075: LD_INT 4
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: LD_INT 5
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: LD_INT 5
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: LD_INT 4
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: LD_INT 3
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 2
40126: PUSH
40127: LD_INT 5
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 2
40136: NEG
40137: PUSH
40138: LD_INT 3
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 3
40147: NEG
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 3
40158: NEG
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: NEG
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 2
40181: NEG
40182: PUSH
40183: LD_INT 1
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 3
40192: NEG
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 4
40203: NEG
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 4
40214: NEG
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 4
40226: NEG
40227: PUSH
40228: LD_INT 2
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 2
40238: NEG
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 4
40249: NEG
40250: PUSH
40251: LD_INT 4
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 4
40261: NEG
40262: PUSH
40263: LD_INT 5
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 3
40273: NEG
40274: PUSH
40275: LD_INT 4
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 3
40285: NEG
40286: PUSH
40287: LD_INT 3
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 4
40297: NEG
40298: PUSH
40299: LD_INT 3
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 5
40309: NEG
40310: PUSH
40311: LD_INT 4
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 5
40321: NEG
40322: PUSH
40323: LD_INT 5
40325: NEG
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 3
40333: NEG
40334: PUSH
40335: LD_INT 5
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 5
40345: NEG
40346: PUSH
40347: LD_INT 3
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40402: LD_ADDR_VAR 0 30
40406: PUSH
40407: LD_INT 4
40409: PUSH
40410: LD_INT 4
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 4
40419: PUSH
40420: LD_INT 3
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 5
40429: PUSH
40430: LD_INT 4
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 5
40439: PUSH
40440: LD_INT 5
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 4
40449: PUSH
40450: LD_INT 5
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 3
40459: PUSH
40460: LD_INT 4
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 3
40469: PUSH
40470: LD_INT 3
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 5
40479: PUSH
40480: LD_INT 3
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 3
40489: PUSH
40490: LD_INT 5
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: LD_INT 3
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: LD_INT 3
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 4
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_INT 4
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 1
40549: NEG
40550: PUSH
40551: LD_INT 3
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: LD_INT 2
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: LD_INT 4
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: LD_INT 2
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 4
40592: NEG
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 4
40603: NEG
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 3
40615: NEG
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 3
40626: NEG
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 4
40637: NEG
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 5
40648: NEG
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 5
40659: NEG
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 5
40671: NEG
40672: PUSH
40673: LD_INT 2
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 3
40683: NEG
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 3
40694: NEG
40695: PUSH
40696: LD_INT 3
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 3
40706: NEG
40707: PUSH
40708: LD_INT 4
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: LD_INT 3
40722: NEG
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 2
40730: NEG
40731: PUSH
40732: LD_INT 2
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 3
40742: NEG
40743: PUSH
40744: LD_INT 2
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 4
40754: NEG
40755: PUSH
40756: LD_INT 3
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 4
40766: NEG
40767: PUSH
40768: LD_INT 4
40770: NEG
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 2
40778: NEG
40779: PUSH
40780: LD_INT 4
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 4
40790: NEG
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 4
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: LD_INT 5
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: LD_INT 4
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: LD_INT 3
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 3
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: LD_INT 4
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: LD_INT 5
40873: NEG
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 2
40881: PUSH
40882: LD_INT 3
40884: NEG
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 2
40892: NEG
40893: PUSH
40894: LD_INT 5
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40949: LD_ADDR_VAR 0 31
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: LD_INT 4
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: LD_INT 3
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: PUSH
40977: LD_INT 4
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: LD_INT 5
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 5
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: LD_INT 4
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: LD_INT 3
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: LD_INT 5
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: NEG
41039: PUSH
41040: LD_INT 3
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 3
41049: NEG
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 3
41060: NEG
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 2
41072: NEG
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 2
41083: NEG
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 3
41094: NEG
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 4
41105: NEG
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 4
41116: NEG
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 4
41128: NEG
41129: PUSH
41130: LD_INT 2
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: LD_INT 2
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 4
41151: NEG
41152: PUSH
41153: LD_INT 4
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 4
41163: NEG
41164: PUSH
41165: LD_INT 5
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 3
41175: NEG
41176: PUSH
41177: LD_INT 4
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 3
41187: NEG
41188: PUSH
41189: LD_INT 3
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 4
41199: NEG
41200: PUSH
41201: LD_INT 3
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 5
41211: NEG
41212: PUSH
41213: LD_INT 4
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 5
41223: NEG
41224: PUSH
41225: LD_INT 5
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 3
41235: NEG
41236: PUSH
41237: LD_INT 5
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 5
41247: NEG
41248: PUSH
41249: LD_INT 3
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: LD_INT 3
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 4
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: LD_INT 3
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: LD_INT 2
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 2
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: LD_INT 3
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: LD_INT 4
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 2
41338: PUSH
41339: LD_INT 2
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: NEG
41350: PUSH
41351: LD_INT 4
41353: NEG
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 4
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 4
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 5
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 5
41392: PUSH
41393: LD_INT 1
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 4
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 3
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 3
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 3
41433: PUSH
41434: LD_INT 2
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 5
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41499: LD_ADDR_VAR 0 32
41503: PUSH
41504: LD_INT 4
41506: NEG
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 4
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 3
41529: NEG
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 3
41540: NEG
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 4
41551: NEG
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 5
41562: NEG
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 5
41573: NEG
41574: PUSH
41575: LD_INT 1
41577: NEG
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 5
41585: NEG
41586: PUSH
41587: LD_INT 2
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 3
41597: NEG
41598: PUSH
41599: LD_INT 2
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 3
41608: NEG
41609: PUSH
41610: LD_INT 3
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 3
41620: NEG
41621: PUSH
41622: LD_INT 4
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 2
41632: NEG
41633: PUSH
41634: LD_INT 3
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: LD_INT 2
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 3
41656: NEG
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 4
41668: NEG
41669: PUSH
41670: LD_INT 3
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 4
41680: NEG
41681: PUSH
41682: LD_INT 4
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 2
41692: NEG
41693: PUSH
41694: LD_INT 4
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 4
41704: NEG
41705: PUSH
41706: LD_INT 2
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 4
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: LD_INT 5
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: PUSH
41739: LD_INT 4
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: LD_INT 3
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: LD_INT 3
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: LD_INT 4
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: LD_INT 5
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: LD_INT 3
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: LD_INT 5
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 3
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 3
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 4
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 4
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 3
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 2
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: PUSH
41891: LD_INT 2
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 4
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 4
41911: PUSH
41912: LD_INT 4
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 4
41921: PUSH
41922: LD_INT 3
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 5
41931: PUSH
41932: LD_INT 4
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 5
41941: PUSH
41942: LD_INT 5
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 4
41951: PUSH
41952: LD_INT 5
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 3
41961: PUSH
41962: LD_INT 4
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 3
41971: PUSH
41972: LD_INT 3
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 5
41981: PUSH
41982: LD_INT 3
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 3
41991: PUSH
41992: LD_INT 5
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42046: LD_ADDR_VAR 0 33
42050: PUSH
42051: LD_INT 4
42053: NEG
42054: PUSH
42055: LD_INT 4
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 4
42065: NEG
42066: PUSH
42067: LD_INT 5
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 3
42077: NEG
42078: PUSH
42079: LD_INT 4
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 3
42089: NEG
42090: PUSH
42091: LD_INT 3
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 4
42101: NEG
42102: PUSH
42103: LD_INT 3
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 5
42113: NEG
42114: PUSH
42115: LD_INT 4
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 5
42125: NEG
42126: PUSH
42127: LD_INT 5
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 3
42137: NEG
42138: PUSH
42139: LD_INT 5
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 5
42149: NEG
42150: PUSH
42151: LD_INT 3
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: LD_INT 3
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 4
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: LD_INT 3
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: LD_INT 2
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: LD_INT 2
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: NEG
42217: PUSH
42218: LD_INT 3
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: LD_INT 4
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: LD_INT 2
42243: NEG
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 2
42251: NEG
42252: PUSH
42253: LD_INT 4
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 4
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 4
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 5
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 5
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 4
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 3
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 3
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 3
42335: PUSH
42336: LD_INT 2
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 5
42346: PUSH
42347: LD_INT 2
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 3
42356: PUSH
42357: LD_INT 3
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 3
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 4
42376: PUSH
42377: LD_INT 3
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 4
42386: PUSH
42387: LD_INT 4
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 3
42396: PUSH
42397: LD_INT 4
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: LD_INT 3
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 4
42426: PUSH
42427: LD_INT 2
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: LD_INT 4
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 4
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 3
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: LD_INT 4
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: LD_INT 5
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: LD_INT 5
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: LD_INT 4
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: LD_INT 3
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: PUSH
42519: LD_INT 5
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: LD_INT 3
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42584: LD_ADDR_VAR 0 34
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 4
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 5
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: LD_INT 4
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: LD_INT 3
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: LD_INT 3
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 4
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: LD_INT 5
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 2
42670: PUSH
42671: LD_INT 3
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: LD_INT 5
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 3
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 3
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 4
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 4
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 3
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 2
42765: PUSH
42766: LD_INT 2
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 4
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 4
42786: PUSH
42787: LD_INT 4
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 4
42796: PUSH
42797: LD_INT 3
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 5
42806: PUSH
42807: LD_INT 4
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 5
42816: PUSH
42817: LD_INT 5
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 4
42826: PUSH
42827: LD_INT 5
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 3
42836: PUSH
42837: LD_INT 4
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 3
42846: PUSH
42847: LD_INT 3
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 5
42856: PUSH
42857: LD_INT 3
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 3
42866: PUSH
42867: LD_INT 5
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: LD_INT 3
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 2
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: LD_INT 3
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: LD_INT 4
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: LD_INT 4
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: LD_INT 3
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: NEG
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 2
42948: PUSH
42949: LD_INT 4
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 4
42969: NEG
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 4
42980: NEG
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 3
42992: NEG
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 3
43003: NEG
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 4
43014: NEG
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 5
43025: NEG
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 5
43036: NEG
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 5
43048: NEG
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 3
43060: NEG
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: ST_TO_ADDR
// end ; end ;
43116: GO 43119
43118: POP
// case btype of b_depot , b_warehouse :
43119: LD_VAR 0 1
43123: PUSH
43124: LD_INT 0
43126: DOUBLE
43127: EQUAL
43128: IFTRUE 43138
43130: LD_INT 1
43132: DOUBLE
43133: EQUAL
43134: IFTRUE 43138
43136: GO 43339
43138: POP
// case nation of nation_american :
43139: LD_VAR 0 5
43143: PUSH
43144: LD_INT 1
43146: DOUBLE
43147: EQUAL
43148: IFTRUE 43152
43150: GO 43208
43152: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43153: LD_ADDR_VAR 0 9
43157: PUSH
43158: LD_VAR 0 11
43162: PUSH
43163: LD_VAR 0 12
43167: PUSH
43168: LD_VAR 0 13
43172: PUSH
43173: LD_VAR 0 14
43177: PUSH
43178: LD_VAR 0 15
43182: PUSH
43183: LD_VAR 0 16
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: PUSH
43196: LD_VAR 0 4
43200: PUSH
43201: LD_INT 1
43203: PLUS
43204: ARRAY
43205: ST_TO_ADDR
43206: GO 43337
43208: LD_INT 2
43210: DOUBLE
43211: EQUAL
43212: IFTRUE 43216
43214: GO 43272
43216: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43217: LD_ADDR_VAR 0 9
43221: PUSH
43222: LD_VAR 0 17
43226: PUSH
43227: LD_VAR 0 18
43231: PUSH
43232: LD_VAR 0 19
43236: PUSH
43237: LD_VAR 0 20
43241: PUSH
43242: LD_VAR 0 21
43246: PUSH
43247: LD_VAR 0 22
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: PUSH
43260: LD_VAR 0 4
43264: PUSH
43265: LD_INT 1
43267: PLUS
43268: ARRAY
43269: ST_TO_ADDR
43270: GO 43337
43272: LD_INT 3
43274: DOUBLE
43275: EQUAL
43276: IFTRUE 43280
43278: GO 43336
43280: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43281: LD_ADDR_VAR 0 9
43285: PUSH
43286: LD_VAR 0 23
43290: PUSH
43291: LD_VAR 0 24
43295: PUSH
43296: LD_VAR 0 25
43300: PUSH
43301: LD_VAR 0 26
43305: PUSH
43306: LD_VAR 0 27
43310: PUSH
43311: LD_VAR 0 28
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: PUSH
43324: LD_VAR 0 4
43328: PUSH
43329: LD_INT 1
43331: PLUS
43332: ARRAY
43333: ST_TO_ADDR
43334: GO 43337
43336: POP
43337: GO 43892
43339: LD_INT 2
43341: DOUBLE
43342: EQUAL
43343: IFTRUE 43353
43345: LD_INT 3
43347: DOUBLE
43348: EQUAL
43349: IFTRUE 43353
43351: GO 43409
43353: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43354: LD_ADDR_VAR 0 9
43358: PUSH
43359: LD_VAR 0 29
43363: PUSH
43364: LD_VAR 0 30
43368: PUSH
43369: LD_VAR 0 31
43373: PUSH
43374: LD_VAR 0 32
43378: PUSH
43379: LD_VAR 0 33
43383: PUSH
43384: LD_VAR 0 34
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: PUSH
43397: LD_VAR 0 4
43401: PUSH
43402: LD_INT 1
43404: PLUS
43405: ARRAY
43406: ST_TO_ADDR
43407: GO 43892
43409: LD_INT 16
43411: DOUBLE
43412: EQUAL
43413: IFTRUE 43471
43415: LD_INT 17
43417: DOUBLE
43418: EQUAL
43419: IFTRUE 43471
43421: LD_INT 18
43423: DOUBLE
43424: EQUAL
43425: IFTRUE 43471
43427: LD_INT 19
43429: DOUBLE
43430: EQUAL
43431: IFTRUE 43471
43433: LD_INT 22
43435: DOUBLE
43436: EQUAL
43437: IFTRUE 43471
43439: LD_INT 20
43441: DOUBLE
43442: EQUAL
43443: IFTRUE 43471
43445: LD_INT 21
43447: DOUBLE
43448: EQUAL
43449: IFTRUE 43471
43451: LD_INT 23
43453: DOUBLE
43454: EQUAL
43455: IFTRUE 43471
43457: LD_INT 24
43459: DOUBLE
43460: EQUAL
43461: IFTRUE 43471
43463: LD_INT 25
43465: DOUBLE
43466: EQUAL
43467: IFTRUE 43471
43469: GO 43527
43471: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43472: LD_ADDR_VAR 0 9
43476: PUSH
43477: LD_VAR 0 35
43481: PUSH
43482: LD_VAR 0 36
43486: PUSH
43487: LD_VAR 0 37
43491: PUSH
43492: LD_VAR 0 38
43496: PUSH
43497: LD_VAR 0 39
43501: PUSH
43502: LD_VAR 0 40
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: PUSH
43515: LD_VAR 0 4
43519: PUSH
43520: LD_INT 1
43522: PLUS
43523: ARRAY
43524: ST_TO_ADDR
43525: GO 43892
43527: LD_INT 6
43529: DOUBLE
43530: EQUAL
43531: IFTRUE 43583
43533: LD_INT 7
43535: DOUBLE
43536: EQUAL
43537: IFTRUE 43583
43539: LD_INT 8
43541: DOUBLE
43542: EQUAL
43543: IFTRUE 43583
43545: LD_INT 13
43547: DOUBLE
43548: EQUAL
43549: IFTRUE 43583
43551: LD_INT 12
43553: DOUBLE
43554: EQUAL
43555: IFTRUE 43583
43557: LD_INT 15
43559: DOUBLE
43560: EQUAL
43561: IFTRUE 43583
43563: LD_INT 11
43565: DOUBLE
43566: EQUAL
43567: IFTRUE 43583
43569: LD_INT 14
43571: DOUBLE
43572: EQUAL
43573: IFTRUE 43583
43575: LD_INT 10
43577: DOUBLE
43578: EQUAL
43579: IFTRUE 43583
43581: GO 43639
43583: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
43584: LD_ADDR_VAR 0 9
43588: PUSH
43589: LD_VAR 0 41
43593: PUSH
43594: LD_VAR 0 42
43598: PUSH
43599: LD_VAR 0 43
43603: PUSH
43604: LD_VAR 0 44
43608: PUSH
43609: LD_VAR 0 45
43613: PUSH
43614: LD_VAR 0 46
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: PUSH
43627: LD_VAR 0 4
43631: PUSH
43632: LD_INT 1
43634: PLUS
43635: ARRAY
43636: ST_TO_ADDR
43637: GO 43892
43639: LD_INT 36
43641: DOUBLE
43642: EQUAL
43643: IFTRUE 43647
43645: GO 43703
43647: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43648: LD_ADDR_VAR 0 9
43652: PUSH
43653: LD_VAR 0 47
43657: PUSH
43658: LD_VAR 0 48
43662: PUSH
43663: LD_VAR 0 49
43667: PUSH
43668: LD_VAR 0 50
43672: PUSH
43673: LD_VAR 0 51
43677: PUSH
43678: LD_VAR 0 52
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: PUSH
43691: LD_VAR 0 4
43695: PUSH
43696: LD_INT 1
43698: PLUS
43699: ARRAY
43700: ST_TO_ADDR
43701: GO 43892
43703: LD_INT 4
43705: DOUBLE
43706: EQUAL
43707: IFTRUE 43729
43709: LD_INT 5
43711: DOUBLE
43712: EQUAL
43713: IFTRUE 43729
43715: LD_INT 34
43717: DOUBLE
43718: EQUAL
43719: IFTRUE 43729
43721: LD_INT 37
43723: DOUBLE
43724: EQUAL
43725: IFTRUE 43729
43727: GO 43785
43729: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43730: LD_ADDR_VAR 0 9
43734: PUSH
43735: LD_VAR 0 53
43739: PUSH
43740: LD_VAR 0 54
43744: PUSH
43745: LD_VAR 0 55
43749: PUSH
43750: LD_VAR 0 56
43754: PUSH
43755: LD_VAR 0 57
43759: PUSH
43760: LD_VAR 0 58
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: PUSH
43773: LD_VAR 0 4
43777: PUSH
43778: LD_INT 1
43780: PLUS
43781: ARRAY
43782: ST_TO_ADDR
43783: GO 43892
43785: LD_INT 31
43787: DOUBLE
43788: EQUAL
43789: IFTRUE 43835
43791: LD_INT 32
43793: DOUBLE
43794: EQUAL
43795: IFTRUE 43835
43797: LD_INT 33
43799: DOUBLE
43800: EQUAL
43801: IFTRUE 43835
43803: LD_INT 27
43805: DOUBLE
43806: EQUAL
43807: IFTRUE 43835
43809: LD_INT 26
43811: DOUBLE
43812: EQUAL
43813: IFTRUE 43835
43815: LD_INT 28
43817: DOUBLE
43818: EQUAL
43819: IFTRUE 43835
43821: LD_INT 29
43823: DOUBLE
43824: EQUAL
43825: IFTRUE 43835
43827: LD_INT 30
43829: DOUBLE
43830: EQUAL
43831: IFTRUE 43835
43833: GO 43891
43835: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43836: LD_ADDR_VAR 0 9
43840: PUSH
43841: LD_VAR 0 59
43845: PUSH
43846: LD_VAR 0 60
43850: PUSH
43851: LD_VAR 0 61
43855: PUSH
43856: LD_VAR 0 62
43860: PUSH
43861: LD_VAR 0 63
43865: PUSH
43866: LD_VAR 0 64
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: PUSH
43879: LD_VAR 0 4
43883: PUSH
43884: LD_INT 1
43886: PLUS
43887: ARRAY
43888: ST_TO_ADDR
43889: GO 43892
43891: POP
// temp_list2 = [ ] ;
43892: LD_ADDR_VAR 0 10
43896: PUSH
43897: EMPTY
43898: ST_TO_ADDR
// for i in temp_list do
43899: LD_ADDR_VAR 0 8
43903: PUSH
43904: LD_VAR 0 9
43908: PUSH
43909: FOR_IN
43910: IFFALSE 43962
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43912: LD_ADDR_VAR 0 10
43916: PUSH
43917: LD_VAR 0 10
43921: PUSH
43922: LD_VAR 0 8
43926: PUSH
43927: LD_INT 1
43929: ARRAY
43930: PUSH
43931: LD_VAR 0 2
43935: PLUS
43936: PUSH
43937: LD_VAR 0 8
43941: PUSH
43942: LD_INT 2
43944: ARRAY
43945: PUSH
43946: LD_VAR 0 3
43950: PLUS
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: EMPTY
43957: LIST
43958: ADD
43959: ST_TO_ADDR
43960: GO 43909
43962: POP
43963: POP
// result = temp_list2 ;
43964: LD_ADDR_VAR 0 7
43968: PUSH
43969: LD_VAR 0 10
43973: ST_TO_ADDR
// end ;
43974: LD_VAR 0 7
43978: RET
// export function EnemyInRange ( unit , dist ) ; begin
43979: LD_INT 0
43981: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43982: LD_ADDR_VAR 0 3
43986: PUSH
43987: LD_VAR 0 1
43991: PPUSH
43992: CALL_OW 255
43996: PPUSH
43997: LD_VAR 0 1
44001: PPUSH
44002: CALL_OW 250
44006: PPUSH
44007: LD_VAR 0 1
44011: PPUSH
44012: CALL_OW 251
44016: PPUSH
44017: LD_VAR 0 2
44021: PPUSH
44022: CALL 17236 0 4
44026: PUSH
44027: LD_INT 4
44029: ARRAY
44030: ST_TO_ADDR
// end ;
44031: LD_VAR 0 3
44035: RET
// export function PlayerSeeMe ( unit ) ; begin
44036: LD_INT 0
44038: PPUSH
// result := See ( your_side , unit ) ;
44039: LD_ADDR_VAR 0 2
44043: PUSH
44044: LD_OWVAR 2
44048: PPUSH
44049: LD_VAR 0 1
44053: PPUSH
44054: CALL_OW 292
44058: ST_TO_ADDR
// end ;
44059: LD_VAR 0 2
44063: RET
// export function ReverseDir ( unit ) ; begin
44064: LD_INT 0
44066: PPUSH
// if not unit then
44067: LD_VAR 0 1
44071: NOT
44072: IFFALSE 44076
// exit ;
44074: GO 44099
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44076: LD_ADDR_VAR 0 2
44080: PUSH
44081: LD_VAR 0 1
44085: PPUSH
44086: CALL_OW 254
44090: PUSH
44091: LD_INT 3
44093: PLUS
44094: PUSH
44095: LD_INT 6
44097: MOD
44098: ST_TO_ADDR
// end ;
44099: LD_VAR 0 2
44103: RET
// export function ReverseArray ( array ) ; var i ; begin
44104: LD_INT 0
44106: PPUSH
44107: PPUSH
// if not array then
44108: LD_VAR 0 1
44112: NOT
44113: IFFALSE 44117
// exit ;
44115: GO 44172
// result := [ ] ;
44117: LD_ADDR_VAR 0 2
44121: PUSH
44122: EMPTY
44123: ST_TO_ADDR
// for i := array downto 1 do
44124: LD_ADDR_VAR 0 3
44128: PUSH
44129: DOUBLE
44130: LD_VAR 0 1
44134: INC
44135: ST_TO_ADDR
44136: LD_INT 1
44138: PUSH
44139: FOR_DOWNTO
44140: IFFALSE 44170
// result := Join ( result , array [ i ] ) ;
44142: LD_ADDR_VAR 0 2
44146: PUSH
44147: LD_VAR 0 2
44151: PPUSH
44152: LD_VAR 0 1
44156: PUSH
44157: LD_VAR 0 3
44161: ARRAY
44162: PPUSH
44163: CALL 49014 0 2
44167: ST_TO_ADDR
44168: GO 44139
44170: POP
44171: POP
// end ;
44172: LD_VAR 0 2
44176: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44177: LD_INT 0
44179: PPUSH
44180: PPUSH
44181: PPUSH
44182: PPUSH
44183: PPUSH
44184: PPUSH
// if not unit or not hexes then
44185: LD_VAR 0 1
44189: NOT
44190: IFTRUE 44199
44192: PUSH
44193: LD_VAR 0 2
44197: NOT
44198: OR
44199: IFFALSE 44203
// exit ;
44201: GO 44326
// dist := 9999 ;
44203: LD_ADDR_VAR 0 5
44207: PUSH
44208: LD_INT 9999
44210: ST_TO_ADDR
// for i = 1 to hexes do
44211: LD_ADDR_VAR 0 4
44215: PUSH
44216: DOUBLE
44217: LD_INT 1
44219: DEC
44220: ST_TO_ADDR
44221: LD_VAR 0 2
44225: PUSH
44226: FOR_TO
44227: IFFALSE 44314
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44229: LD_ADDR_VAR 0 6
44233: PUSH
44234: LD_VAR 0 1
44238: PPUSH
44239: LD_VAR 0 2
44243: PUSH
44244: LD_VAR 0 4
44248: ARRAY
44249: PUSH
44250: LD_INT 1
44252: ARRAY
44253: PPUSH
44254: LD_VAR 0 2
44258: PUSH
44259: LD_VAR 0 4
44263: ARRAY
44264: PUSH
44265: LD_INT 2
44267: ARRAY
44268: PPUSH
44269: CALL_OW 297
44273: ST_TO_ADDR
// if tdist < dist then
44274: LD_VAR 0 6
44278: PUSH
44279: LD_VAR 0 5
44283: LESS
44284: IFFALSE 44312
// begin hex := hexes [ i ] ;
44286: LD_ADDR_VAR 0 8
44290: PUSH
44291: LD_VAR 0 2
44295: PUSH
44296: LD_VAR 0 4
44300: ARRAY
44301: ST_TO_ADDR
// dist := tdist ;
44302: LD_ADDR_VAR 0 5
44306: PUSH
44307: LD_VAR 0 6
44311: ST_TO_ADDR
// end ; end ;
44312: GO 44226
44314: POP
44315: POP
// result := hex ;
44316: LD_ADDR_VAR 0 3
44320: PUSH
44321: LD_VAR 0 8
44325: ST_TO_ADDR
// end ;
44326: LD_VAR 0 3
44330: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44331: LD_INT 0
44333: PPUSH
44334: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44335: LD_VAR 0 1
44339: NOT
44340: IFTRUE 44379
44342: PUSH
44343: LD_VAR 0 1
44347: PUSH
44348: LD_INT 21
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 23
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PPUSH
44372: CALL_OW 69
44376: IN
44377: NOT
44378: OR
44379: IFFALSE 44383
// exit ;
44381: GO 44430
// for i = 1 to 3 do
44383: LD_ADDR_VAR 0 3
44387: PUSH
44388: DOUBLE
44389: LD_INT 1
44391: DEC
44392: ST_TO_ADDR
44393: LD_INT 3
44395: PUSH
44396: FOR_TO
44397: IFFALSE 44428
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44399: LD_VAR 0 1
44403: PPUSH
44404: CALL_OW 250
44408: PPUSH
44409: LD_VAR 0 1
44413: PPUSH
44414: CALL_OW 251
44418: PPUSH
44419: LD_INT 1
44421: PPUSH
44422: CALL_OW 453
44426: GO 44396
44428: POP
44429: POP
// end ;
44430: LD_VAR 0 2
44434: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44435: LD_INT 0
44437: PPUSH
44438: PPUSH
44439: PPUSH
44440: PPUSH
44441: PPUSH
44442: PPUSH
// if not unit or not enemy_unit then
44443: LD_VAR 0 1
44447: NOT
44448: IFTRUE 44457
44450: PUSH
44451: LD_VAR 0 2
44455: NOT
44456: OR
44457: IFFALSE 44461
// exit ;
44459: GO 44932
// if GetLives ( i ) < 250 then
44461: LD_VAR 0 4
44465: PPUSH
44466: CALL_OW 256
44470: PUSH
44471: LD_INT 250
44473: LESS
44474: IFFALSE 44487
// begin ComAutodestruct ( i ) ;
44476: LD_VAR 0 4
44480: PPUSH
44481: CALL 44331 0 1
// exit ;
44485: GO 44932
// end ; x := GetX ( enemy_unit ) ;
44487: LD_ADDR_VAR 0 7
44491: PUSH
44492: LD_VAR 0 2
44496: PPUSH
44497: CALL_OW 250
44501: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44502: LD_ADDR_VAR 0 8
44506: PUSH
44507: LD_VAR 0 2
44511: PPUSH
44512: CALL_OW 251
44516: ST_TO_ADDR
// if not x or not y then
44517: LD_VAR 0 7
44521: NOT
44522: IFTRUE 44531
44524: PUSH
44525: LD_VAR 0 8
44529: NOT
44530: OR
44531: IFFALSE 44535
// exit ;
44533: GO 44932
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44535: LD_ADDR_VAR 0 6
44539: PUSH
44540: LD_VAR 0 7
44544: PPUSH
44545: LD_INT 0
44547: PPUSH
44548: LD_INT 4
44550: PPUSH
44551: CALL_OW 272
44555: PUSH
44556: LD_VAR 0 8
44560: PPUSH
44561: LD_INT 0
44563: PPUSH
44564: LD_INT 4
44566: PPUSH
44567: CALL_OW 273
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_VAR 0 7
44580: PPUSH
44581: LD_INT 1
44583: PPUSH
44584: LD_INT 4
44586: PPUSH
44587: CALL_OW 272
44591: PUSH
44592: LD_VAR 0 8
44596: PPUSH
44597: LD_INT 1
44599: PPUSH
44600: LD_INT 4
44602: PPUSH
44603: CALL_OW 273
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_VAR 0 7
44616: PPUSH
44617: LD_INT 2
44619: PPUSH
44620: LD_INT 4
44622: PPUSH
44623: CALL_OW 272
44627: PUSH
44628: LD_VAR 0 8
44632: PPUSH
44633: LD_INT 2
44635: PPUSH
44636: LD_INT 4
44638: PPUSH
44639: CALL_OW 273
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_VAR 0 7
44652: PPUSH
44653: LD_INT 3
44655: PPUSH
44656: LD_INT 4
44658: PPUSH
44659: CALL_OW 272
44663: PUSH
44664: LD_VAR 0 8
44668: PPUSH
44669: LD_INT 3
44671: PPUSH
44672: LD_INT 4
44674: PPUSH
44675: CALL_OW 273
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_VAR 0 7
44688: PPUSH
44689: LD_INT 4
44691: PPUSH
44692: LD_INT 4
44694: PPUSH
44695: CALL_OW 272
44699: PUSH
44700: LD_VAR 0 8
44704: PPUSH
44705: LD_INT 4
44707: PPUSH
44708: LD_INT 4
44710: PPUSH
44711: CALL_OW 273
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_VAR 0 7
44724: PPUSH
44725: LD_INT 5
44727: PPUSH
44728: LD_INT 4
44730: PPUSH
44731: CALL_OW 272
44735: PUSH
44736: LD_VAR 0 8
44740: PPUSH
44741: LD_INT 5
44743: PPUSH
44744: LD_INT 4
44746: PPUSH
44747: CALL_OW 273
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: ST_TO_ADDR
// for i = tmp downto 1 do
44764: LD_ADDR_VAR 0 4
44768: PUSH
44769: DOUBLE
44770: LD_VAR 0 6
44774: INC
44775: ST_TO_ADDR
44776: LD_INT 1
44778: PUSH
44779: FOR_DOWNTO
44780: IFFALSE 44883
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44782: LD_VAR 0 6
44786: PUSH
44787: LD_VAR 0 4
44791: ARRAY
44792: PUSH
44793: LD_INT 1
44795: ARRAY
44796: PPUSH
44797: LD_VAR 0 6
44801: PUSH
44802: LD_VAR 0 4
44806: ARRAY
44807: PUSH
44808: LD_INT 2
44810: ARRAY
44811: PPUSH
44812: CALL_OW 488
44816: NOT
44817: IFTRUE 44859
44819: PUSH
44820: LD_VAR 0 6
44824: PUSH
44825: LD_VAR 0 4
44829: ARRAY
44830: PUSH
44831: LD_INT 1
44833: ARRAY
44834: PPUSH
44835: LD_VAR 0 6
44839: PUSH
44840: LD_VAR 0 4
44844: ARRAY
44845: PUSH
44846: LD_INT 2
44848: ARRAY
44849: PPUSH
44850: CALL_OW 428
44854: PUSH
44855: LD_INT 0
44857: NONEQUAL
44858: OR
44859: IFFALSE 44881
// tmp := Delete ( tmp , i ) ;
44861: LD_ADDR_VAR 0 6
44865: PUSH
44866: LD_VAR 0 6
44870: PPUSH
44871: LD_VAR 0 4
44875: PPUSH
44876: CALL_OW 3
44880: ST_TO_ADDR
44881: GO 44779
44883: POP
44884: POP
// j := GetClosestHex ( unit , tmp ) ;
44885: LD_ADDR_VAR 0 5
44889: PUSH
44890: LD_VAR 0 1
44894: PPUSH
44895: LD_VAR 0 6
44899: PPUSH
44900: CALL 44177 0 2
44904: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44905: LD_VAR 0 1
44909: PPUSH
44910: LD_VAR 0 5
44914: PUSH
44915: LD_INT 1
44917: ARRAY
44918: PPUSH
44919: LD_VAR 0 5
44923: PUSH
44924: LD_INT 2
44926: ARRAY
44927: PPUSH
44928: CALL_OW 111
// end ;
44932: LD_VAR 0 3
44936: RET
// export function PrepareApemanSoldier ( ) ; begin
44937: LD_INT 0
44939: PPUSH
// uc_nation := 0 ;
44940: LD_ADDR_OWVAR 21
44944: PUSH
44945: LD_INT 0
44947: ST_TO_ADDR
// hc_sex := sex_male ;
44948: LD_ADDR_OWVAR 27
44952: PUSH
44953: LD_INT 1
44955: ST_TO_ADDR
// hc_name :=  ;
44956: LD_ADDR_OWVAR 26
44960: PUSH
44961: LD_STRING 
44963: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44964: LD_ADDR_OWVAR 28
44968: PUSH
44969: LD_INT 15
44971: ST_TO_ADDR
// hc_gallery :=  ;
44972: LD_ADDR_OWVAR 33
44976: PUSH
44977: LD_STRING 
44979: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44980: LD_ADDR_OWVAR 31
44984: PUSH
44985: LD_INT 0
44987: PPUSH
44988: LD_INT 3
44990: PPUSH
44991: CALL_OW 12
44995: PUSH
44996: LD_INT 0
44998: PPUSH
44999: LD_INT 3
45001: PPUSH
45002: CALL_OW 12
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
45019: LD_ADDR_OWVAR 29
45023: PUSH
45024: LD_INT 12
45026: PUSH
45027: LD_INT 12
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: ST_TO_ADDR
// end ;
45034: LD_VAR 0 1
45038: RET
// export function PrepareApemanEngineer ( ) ; begin
45039: LD_INT 0
45041: PPUSH
// uc_nation := 0 ;
45042: LD_ADDR_OWVAR 21
45046: PUSH
45047: LD_INT 0
45049: ST_TO_ADDR
// hc_sex := sex_male ;
45050: LD_ADDR_OWVAR 27
45054: PUSH
45055: LD_INT 1
45057: ST_TO_ADDR
// hc_name :=  ;
45058: LD_ADDR_OWVAR 26
45062: PUSH
45063: LD_STRING 
45065: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
45066: LD_ADDR_OWVAR 28
45070: PUSH
45071: LD_INT 16
45073: ST_TO_ADDR
// hc_gallery :=  ;
45074: LD_ADDR_OWVAR 33
45078: PUSH
45079: LD_STRING 
45081: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45082: LD_ADDR_OWVAR 31
45086: PUSH
45087: LD_INT 0
45089: PPUSH
45090: LD_INT 3
45092: PPUSH
45093: CALL_OW 12
45097: PUSH
45098: LD_INT 0
45100: PPUSH
45101: LD_INT 3
45103: PPUSH
45104: CALL_OW 12
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
45121: LD_ADDR_OWVAR 29
45125: PUSH
45126: LD_INT 12
45128: PUSH
45129: LD_INT 12
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: ST_TO_ADDR
// end ;
45136: LD_VAR 0 1
45140: RET
// export function PrepareApeman ( agressivity ) ; begin
45141: LD_INT 0
45143: PPUSH
// uc_side := 0 ;
45144: LD_ADDR_OWVAR 20
45148: PUSH
45149: LD_INT 0
45151: ST_TO_ADDR
// uc_nation := 0 ;
45152: LD_ADDR_OWVAR 21
45156: PUSH
45157: LD_INT 0
45159: ST_TO_ADDR
// hc_sex := sex_male ;
45160: LD_ADDR_OWVAR 27
45164: PUSH
45165: LD_INT 1
45167: ST_TO_ADDR
// hc_class := class_apeman ;
45168: LD_ADDR_OWVAR 28
45172: PUSH
45173: LD_INT 12
45175: ST_TO_ADDR
// hc_gallery :=  ;
45176: LD_ADDR_OWVAR 33
45180: PUSH
45181: LD_STRING 
45183: ST_TO_ADDR
// hc_name :=  ;
45184: LD_ADDR_OWVAR 26
45188: PUSH
45189: LD_STRING 
45191: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
45192: LD_ADDR_OWVAR 29
45196: PUSH
45197: LD_INT 12
45199: PUSH
45200: LD_INT 12
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: ST_TO_ADDR
// if agressivity = 0 then
45207: LD_VAR 0 1
45211: PUSH
45212: LD_INT 0
45214: EQUAL
45215: IFFALSE 45227
// hc_agressivity := 0 else
45217: LD_ADDR_OWVAR 35
45221: PUSH
45222: LD_INT 0
45224: ST_TO_ADDR
45225: GO 45248
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45227: LD_ADDR_OWVAR 35
45231: PUSH
45232: LD_VAR 0 1
45236: NEG
45237: PPUSH
45238: LD_VAR 0 1
45242: PPUSH
45243: CALL_OW 12
45247: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45248: LD_ADDR_OWVAR 31
45252: PUSH
45253: LD_INT 0
45255: PPUSH
45256: LD_INT 3
45258: PPUSH
45259: CALL_OW 12
45263: PUSH
45264: LD_INT 0
45266: PPUSH
45267: LD_INT 3
45269: PPUSH
45270: CALL_OW 12
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: ST_TO_ADDR
// end ;
45287: LD_VAR 0 2
45291: RET
// export function PrepareTiger ( agressivity ) ; begin
45292: LD_INT 0
45294: PPUSH
// uc_side := 0 ;
45295: LD_ADDR_OWVAR 20
45299: PUSH
45300: LD_INT 0
45302: ST_TO_ADDR
// uc_nation := 0 ;
45303: LD_ADDR_OWVAR 21
45307: PUSH
45308: LD_INT 0
45310: ST_TO_ADDR
// InitHc ;
45311: CALL_OW 19
// hc_class := class_tiger ;
45315: LD_ADDR_OWVAR 28
45319: PUSH
45320: LD_INT 14
45322: ST_TO_ADDR
// hc_gallery :=  ;
45323: LD_ADDR_OWVAR 33
45327: PUSH
45328: LD_STRING 
45330: ST_TO_ADDR
// hc_name :=  ;
45331: LD_ADDR_OWVAR 26
45335: PUSH
45336: LD_STRING 
45338: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45339: LD_ADDR_OWVAR 35
45343: PUSH
45344: LD_VAR 0 1
45348: NEG
45349: PPUSH
45350: LD_VAR 0 1
45354: PPUSH
45355: CALL_OW 12
45359: ST_TO_ADDR
// end ;
45360: LD_VAR 0 2
45364: RET
// export function PrepareEnchidna ( ) ; begin
45365: LD_INT 0
45367: PPUSH
// uc_side := 0 ;
45368: LD_ADDR_OWVAR 20
45372: PUSH
45373: LD_INT 0
45375: ST_TO_ADDR
// uc_nation := 0 ;
45376: LD_ADDR_OWVAR 21
45380: PUSH
45381: LD_INT 0
45383: ST_TO_ADDR
// InitHc ;
45384: CALL_OW 19
// hc_class := class_baggie ;
45388: LD_ADDR_OWVAR 28
45392: PUSH
45393: LD_INT 13
45395: ST_TO_ADDR
// hc_gallery :=  ;
45396: LD_ADDR_OWVAR 33
45400: PUSH
45401: LD_STRING 
45403: ST_TO_ADDR
// hc_name :=  ;
45404: LD_ADDR_OWVAR 26
45408: PUSH
45409: LD_STRING 
45411: ST_TO_ADDR
// end ;
45412: LD_VAR 0 1
45416: RET
// export function PrepareFrog ( ) ; begin
45417: LD_INT 0
45419: PPUSH
// uc_side := 0 ;
45420: LD_ADDR_OWVAR 20
45424: PUSH
45425: LD_INT 0
45427: ST_TO_ADDR
// uc_nation := 0 ;
45428: LD_ADDR_OWVAR 21
45432: PUSH
45433: LD_INT 0
45435: ST_TO_ADDR
// InitHc ;
45436: CALL_OW 19
// hc_class := class_frog ;
45440: LD_ADDR_OWVAR 28
45444: PUSH
45445: LD_INT 19
45447: ST_TO_ADDR
// hc_gallery :=  ;
45448: LD_ADDR_OWVAR 33
45452: PUSH
45453: LD_STRING 
45455: ST_TO_ADDR
// hc_name :=  ;
45456: LD_ADDR_OWVAR 26
45460: PUSH
45461: LD_STRING 
45463: ST_TO_ADDR
// end ;
45464: LD_VAR 0 1
45468: RET
// export function PrepareFish ( ) ; begin
45469: LD_INT 0
45471: PPUSH
// uc_side := 0 ;
45472: LD_ADDR_OWVAR 20
45476: PUSH
45477: LD_INT 0
45479: ST_TO_ADDR
// uc_nation := 0 ;
45480: LD_ADDR_OWVAR 21
45484: PUSH
45485: LD_INT 0
45487: ST_TO_ADDR
// InitHc ;
45488: CALL_OW 19
// hc_class := class_fish ;
45492: LD_ADDR_OWVAR 28
45496: PUSH
45497: LD_INT 20
45499: ST_TO_ADDR
// hc_gallery :=  ;
45500: LD_ADDR_OWVAR 33
45504: PUSH
45505: LD_STRING 
45507: ST_TO_ADDR
// hc_name :=  ;
45508: LD_ADDR_OWVAR 26
45512: PUSH
45513: LD_STRING 
45515: ST_TO_ADDR
// end ;
45516: LD_VAR 0 1
45520: RET
// export function PrepareBird ( ) ; begin
45521: LD_INT 0
45523: PPUSH
// uc_side := 0 ;
45524: LD_ADDR_OWVAR 20
45528: PUSH
45529: LD_INT 0
45531: ST_TO_ADDR
// uc_nation := 0 ;
45532: LD_ADDR_OWVAR 21
45536: PUSH
45537: LD_INT 0
45539: ST_TO_ADDR
// InitHc ;
45540: CALL_OW 19
// hc_class := class_phororhacos ;
45544: LD_ADDR_OWVAR 28
45548: PUSH
45549: LD_INT 18
45551: ST_TO_ADDR
// hc_gallery :=  ;
45552: LD_ADDR_OWVAR 33
45556: PUSH
45557: LD_STRING 
45559: ST_TO_ADDR
// hc_name :=  ;
45560: LD_ADDR_OWVAR 26
45564: PUSH
45565: LD_STRING 
45567: ST_TO_ADDR
// end ;
45568: LD_VAR 0 1
45572: RET
// export function PrepareHorse ( ) ; begin
45573: LD_INT 0
45575: PPUSH
// uc_side := 0 ;
45576: LD_ADDR_OWVAR 20
45580: PUSH
45581: LD_INT 0
45583: ST_TO_ADDR
// uc_nation := 0 ;
45584: LD_ADDR_OWVAR 21
45588: PUSH
45589: LD_INT 0
45591: ST_TO_ADDR
// InitHc ;
45592: CALL_OW 19
// hc_class := class_horse ;
45596: LD_ADDR_OWVAR 28
45600: PUSH
45601: LD_INT 21
45603: ST_TO_ADDR
// hc_gallery :=  ;
45604: LD_ADDR_OWVAR 33
45608: PUSH
45609: LD_STRING 
45611: ST_TO_ADDR
// hc_name :=  ;
45612: LD_ADDR_OWVAR 26
45616: PUSH
45617: LD_STRING 
45619: ST_TO_ADDR
// end ;
45620: LD_VAR 0 1
45624: RET
// export function PrepareMastodont ( ) ; begin
45625: LD_INT 0
45627: PPUSH
// uc_side := 0 ;
45628: LD_ADDR_OWVAR 20
45632: PUSH
45633: LD_INT 0
45635: ST_TO_ADDR
// uc_nation := 0 ;
45636: LD_ADDR_OWVAR 21
45640: PUSH
45641: LD_INT 0
45643: ST_TO_ADDR
// vc_chassis := class_mastodont ;
45644: LD_ADDR_OWVAR 37
45648: PUSH
45649: LD_INT 31
45651: ST_TO_ADDR
// vc_control := control_rider ;
45652: LD_ADDR_OWVAR 38
45656: PUSH
45657: LD_INT 4
45659: ST_TO_ADDR
// end ;
45660: LD_VAR 0 1
45664: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45665: LD_INT 0
45667: PPUSH
45668: PPUSH
45669: PPUSH
// uc_side = 0 ;
45670: LD_ADDR_OWVAR 20
45674: PUSH
45675: LD_INT 0
45677: ST_TO_ADDR
// uc_nation = 0 ;
45678: LD_ADDR_OWVAR 21
45682: PUSH
45683: LD_INT 0
45685: ST_TO_ADDR
// InitHc_All ( ) ;
45686: CALL_OW 584
// InitVc ;
45690: CALL_OW 20
// if mastodonts then
45694: LD_VAR 0 6
45698: IFFALSE 45765
// for i = 1 to mastodonts do
45700: LD_ADDR_VAR 0 11
45704: PUSH
45705: DOUBLE
45706: LD_INT 1
45708: DEC
45709: ST_TO_ADDR
45710: LD_VAR 0 6
45714: PUSH
45715: FOR_TO
45716: IFFALSE 45763
// begin vc_chassis := 31 ;
45718: LD_ADDR_OWVAR 37
45722: PUSH
45723: LD_INT 31
45725: ST_TO_ADDR
// vc_control := control_rider ;
45726: LD_ADDR_OWVAR 38
45730: PUSH
45731: LD_INT 4
45733: ST_TO_ADDR
// animal := CreateVehicle ;
45734: LD_ADDR_VAR 0 12
45738: PUSH
45739: CALL_OW 45
45743: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45744: LD_VAR 0 12
45748: PPUSH
45749: LD_VAR 0 8
45753: PPUSH
45754: LD_INT 0
45756: PPUSH
45757: CALL 47907 0 3
// end ;
45761: GO 45715
45763: POP
45764: POP
// if horses then
45765: LD_VAR 0 5
45769: IFFALSE 45836
// for i = 1 to horses do
45771: LD_ADDR_VAR 0 11
45775: PUSH
45776: DOUBLE
45777: LD_INT 1
45779: DEC
45780: ST_TO_ADDR
45781: LD_VAR 0 5
45785: PUSH
45786: FOR_TO
45787: IFFALSE 45834
// begin hc_class := 21 ;
45789: LD_ADDR_OWVAR 28
45793: PUSH
45794: LD_INT 21
45796: ST_TO_ADDR
// hc_gallery :=  ;
45797: LD_ADDR_OWVAR 33
45801: PUSH
45802: LD_STRING 
45804: ST_TO_ADDR
// animal := CreateHuman ;
45805: LD_ADDR_VAR 0 12
45809: PUSH
45810: CALL_OW 44
45814: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45815: LD_VAR 0 12
45819: PPUSH
45820: LD_VAR 0 8
45824: PPUSH
45825: LD_INT 0
45827: PPUSH
45828: CALL 47907 0 3
// end ;
45832: GO 45786
45834: POP
45835: POP
// if birds then
45836: LD_VAR 0 1
45840: IFFALSE 45907
// for i = 1 to birds do
45842: LD_ADDR_VAR 0 11
45846: PUSH
45847: DOUBLE
45848: LD_INT 1
45850: DEC
45851: ST_TO_ADDR
45852: LD_VAR 0 1
45856: PUSH
45857: FOR_TO
45858: IFFALSE 45905
// begin hc_class := 18 ;
45860: LD_ADDR_OWVAR 28
45864: PUSH
45865: LD_INT 18
45867: ST_TO_ADDR
// hc_gallery =  ;
45868: LD_ADDR_OWVAR 33
45872: PUSH
45873: LD_STRING 
45875: ST_TO_ADDR
// animal := CreateHuman ;
45876: LD_ADDR_VAR 0 12
45880: PUSH
45881: CALL_OW 44
45885: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45886: LD_VAR 0 12
45890: PPUSH
45891: LD_VAR 0 8
45895: PPUSH
45896: LD_INT 0
45898: PPUSH
45899: CALL 47907 0 3
// end ;
45903: GO 45857
45905: POP
45906: POP
// if tigers then
45907: LD_VAR 0 2
45911: IFFALSE 45995
// for i = 1 to tigers do
45913: LD_ADDR_VAR 0 11
45917: PUSH
45918: DOUBLE
45919: LD_INT 1
45921: DEC
45922: ST_TO_ADDR
45923: LD_VAR 0 2
45927: PUSH
45928: FOR_TO
45929: IFFALSE 45993
// begin hc_class = class_tiger ;
45931: LD_ADDR_OWVAR 28
45935: PUSH
45936: LD_INT 14
45938: ST_TO_ADDR
// hc_gallery =  ;
45939: LD_ADDR_OWVAR 33
45943: PUSH
45944: LD_STRING 
45946: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45947: LD_ADDR_OWVAR 35
45951: PUSH
45952: LD_INT 7
45954: NEG
45955: PPUSH
45956: LD_INT 7
45958: PPUSH
45959: CALL_OW 12
45963: ST_TO_ADDR
// animal := CreateHuman ;
45964: LD_ADDR_VAR 0 12
45968: PUSH
45969: CALL_OW 44
45973: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45974: LD_VAR 0 12
45978: PPUSH
45979: LD_VAR 0 8
45983: PPUSH
45984: LD_INT 0
45986: PPUSH
45987: CALL 47907 0 3
// end ;
45991: GO 45928
45993: POP
45994: POP
// if apemans then
45995: LD_VAR 0 3
45999: IFFALSE 46122
// for i = 1 to apemans do
46001: LD_ADDR_VAR 0 11
46005: PUSH
46006: DOUBLE
46007: LD_INT 1
46009: DEC
46010: ST_TO_ADDR
46011: LD_VAR 0 3
46015: PUSH
46016: FOR_TO
46017: IFFALSE 46120
// begin hc_class = class_apeman ;
46019: LD_ADDR_OWVAR 28
46023: PUSH
46024: LD_INT 12
46026: ST_TO_ADDR
// hc_gallery =  ;
46027: LD_ADDR_OWVAR 33
46031: PUSH
46032: LD_STRING 
46034: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46035: LD_ADDR_OWVAR 35
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PPUSH
46044: LD_INT 2
46046: PPUSH
46047: CALL_OW 12
46051: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46052: LD_ADDR_OWVAR 31
46056: PUSH
46057: LD_INT 1
46059: PPUSH
46060: LD_INT 3
46062: PPUSH
46063: CALL_OW 12
46067: PUSH
46068: LD_INT 1
46070: PPUSH
46071: LD_INT 3
46073: PPUSH
46074: CALL_OW 12
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: ST_TO_ADDR
// animal := CreateHuman ;
46091: LD_ADDR_VAR 0 12
46095: PUSH
46096: CALL_OW 44
46100: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46101: LD_VAR 0 12
46105: PPUSH
46106: LD_VAR 0 8
46110: PPUSH
46111: LD_INT 0
46113: PPUSH
46114: CALL 47907 0 3
// end ;
46118: GO 46016
46120: POP
46121: POP
// if enchidnas then
46122: LD_VAR 0 4
46126: IFFALSE 46193
// for i = 1 to enchidnas do
46128: LD_ADDR_VAR 0 11
46132: PUSH
46133: DOUBLE
46134: LD_INT 1
46136: DEC
46137: ST_TO_ADDR
46138: LD_VAR 0 4
46142: PUSH
46143: FOR_TO
46144: IFFALSE 46191
// begin hc_class = 13 ;
46146: LD_ADDR_OWVAR 28
46150: PUSH
46151: LD_INT 13
46153: ST_TO_ADDR
// hc_gallery =  ;
46154: LD_ADDR_OWVAR 33
46158: PUSH
46159: LD_STRING 
46161: ST_TO_ADDR
// animal := CreateHuman ;
46162: LD_ADDR_VAR 0 12
46166: PUSH
46167: CALL_OW 44
46171: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46172: LD_VAR 0 12
46176: PPUSH
46177: LD_VAR 0 8
46181: PPUSH
46182: LD_INT 0
46184: PPUSH
46185: CALL 47907 0 3
// end ;
46189: GO 46143
46191: POP
46192: POP
// if fishes then
46193: LD_VAR 0 7
46197: IFFALSE 46264
// for i = 1 to fishes do
46199: LD_ADDR_VAR 0 11
46203: PUSH
46204: DOUBLE
46205: LD_INT 1
46207: DEC
46208: ST_TO_ADDR
46209: LD_VAR 0 7
46213: PUSH
46214: FOR_TO
46215: IFFALSE 46262
// begin hc_class = 20 ;
46217: LD_ADDR_OWVAR 28
46221: PUSH
46222: LD_INT 20
46224: ST_TO_ADDR
// hc_gallery =  ;
46225: LD_ADDR_OWVAR 33
46229: PUSH
46230: LD_STRING 
46232: ST_TO_ADDR
// animal := CreateHuman ;
46233: LD_ADDR_VAR 0 12
46237: PUSH
46238: CALL_OW 44
46242: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46243: LD_VAR 0 12
46247: PPUSH
46248: LD_VAR 0 9
46252: PPUSH
46253: LD_INT 0
46255: PPUSH
46256: CALL 47907 0 3
// end ;
46260: GO 46214
46262: POP
46263: POP
// end ;
46264: LD_VAR 0 10
46268: RET
// export function WantHeal ( sci , unit ) ; begin
46269: LD_INT 0
46271: PPUSH
// if GetTaskList ( sci ) > 0 then
46272: LD_VAR 0 1
46276: PPUSH
46277: CALL_OW 437
46281: PUSH
46282: LD_INT 0
46284: GREATER
46285: IFFALSE 46357
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46287: LD_VAR 0 1
46291: PPUSH
46292: CALL_OW 437
46296: PUSH
46297: LD_INT 1
46299: ARRAY
46300: PUSH
46301: LD_INT 1
46303: ARRAY
46304: PUSH
46305: LD_STRING l
46307: EQUAL
46308: IFFALSE 46335
46310: PUSH
46311: LD_VAR 0 1
46315: PPUSH
46316: CALL_OW 437
46320: PUSH
46321: LD_INT 1
46323: ARRAY
46324: PUSH
46325: LD_INT 4
46327: ARRAY
46328: PUSH
46329: LD_VAR 0 2
46333: EQUAL
46334: AND
46335: IFFALSE 46347
// result := true else
46337: LD_ADDR_VAR 0 3
46341: PUSH
46342: LD_INT 1
46344: ST_TO_ADDR
46345: GO 46355
// result := false ;
46347: LD_ADDR_VAR 0 3
46351: PUSH
46352: LD_INT 0
46354: ST_TO_ADDR
// end else
46355: GO 46365
// result := false ;
46357: LD_ADDR_VAR 0 3
46361: PUSH
46362: LD_INT 0
46364: ST_TO_ADDR
// end ;
46365: LD_VAR 0 3
46369: RET
// export function HealTarget ( sci ) ; begin
46370: LD_INT 0
46372: PPUSH
// if not sci then
46373: LD_VAR 0 1
46377: NOT
46378: IFFALSE 46382
// exit ;
46380: GO 46447
// result := 0 ;
46382: LD_ADDR_VAR 0 2
46386: PUSH
46387: LD_INT 0
46389: ST_TO_ADDR
// if GetTaskList ( sci ) then
46390: LD_VAR 0 1
46394: PPUSH
46395: CALL_OW 437
46399: IFFALSE 46447
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46401: LD_VAR 0 1
46405: PPUSH
46406: CALL_OW 437
46410: PUSH
46411: LD_INT 1
46413: ARRAY
46414: PUSH
46415: LD_INT 1
46417: ARRAY
46418: PUSH
46419: LD_STRING l
46421: EQUAL
46422: IFFALSE 46447
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46424: LD_ADDR_VAR 0 2
46428: PUSH
46429: LD_VAR 0 1
46433: PPUSH
46434: CALL_OW 437
46438: PUSH
46439: LD_INT 1
46441: ARRAY
46442: PUSH
46443: LD_INT 4
46445: ARRAY
46446: ST_TO_ADDR
// end ;
46447: LD_VAR 0 2
46451: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46452: LD_INT 0
46454: PPUSH
46455: PPUSH
46456: PPUSH
46457: PPUSH
// if not base_units then
46458: LD_VAR 0 1
46462: NOT
46463: IFFALSE 46467
// exit ;
46465: GO 46554
// result := false ;
46467: LD_ADDR_VAR 0 2
46471: PUSH
46472: LD_INT 0
46474: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46475: LD_ADDR_VAR 0 5
46479: PUSH
46480: LD_VAR 0 1
46484: PPUSH
46485: LD_INT 21
46487: PUSH
46488: LD_INT 3
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PPUSH
46495: CALL_OW 72
46499: ST_TO_ADDR
// if not tmp then
46500: LD_VAR 0 5
46504: NOT
46505: IFFALSE 46509
// exit ;
46507: GO 46554
// for i in tmp do
46509: LD_ADDR_VAR 0 3
46513: PUSH
46514: LD_VAR 0 5
46518: PUSH
46519: FOR_IN
46520: IFFALSE 46552
// begin result := EnemyInRange ( i , 22 ) ;
46522: LD_ADDR_VAR 0 2
46526: PUSH
46527: LD_VAR 0 3
46531: PPUSH
46532: LD_INT 22
46534: PPUSH
46535: CALL 43979 0 2
46539: ST_TO_ADDR
// if result then
46540: LD_VAR 0 2
46544: IFFALSE 46550
// exit ;
46546: POP
46547: POP
46548: GO 46554
// end ;
46550: GO 46519
46552: POP
46553: POP
// end ;
46554: LD_VAR 0 2
46558: RET
// export function FilterByTag ( units , tag ) ; begin
46559: LD_INT 0
46561: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
46562: LD_ADDR_VAR 0 3
46566: PUSH
46567: LD_VAR 0 1
46571: PPUSH
46572: LD_INT 120
46574: PUSH
46575: LD_VAR 0 2
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PPUSH
46584: CALL_OW 72
46588: ST_TO_ADDR
// end ;
46589: LD_VAR 0 3
46593: RET
// export function IsDriver ( un ) ; begin
46594: LD_INT 0
46596: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46597: LD_ADDR_VAR 0 2
46601: PUSH
46602: LD_VAR 0 1
46606: PUSH
46607: LD_INT 55
46609: PUSH
46610: EMPTY
46611: LIST
46612: PPUSH
46613: CALL_OW 69
46617: IN
46618: ST_TO_ADDR
// end ;
46619: LD_VAR 0 2
46623: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46624: LD_INT 0
46626: PPUSH
46627: PPUSH
// list := [ ] ;
46628: LD_ADDR_VAR 0 5
46632: PUSH
46633: EMPTY
46634: ST_TO_ADDR
// case d of 0 :
46635: LD_VAR 0 3
46639: PUSH
46640: LD_INT 0
46642: DOUBLE
46643: EQUAL
46644: IFTRUE 46648
46646: GO 46781
46648: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46649: LD_ADDR_VAR 0 5
46653: PUSH
46654: LD_VAR 0 1
46658: PUSH
46659: LD_INT 4
46661: MINUS
46662: PUSH
46663: LD_VAR 0 2
46667: PUSH
46668: LD_INT 4
46670: MINUS
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: LIST
46679: PUSH
46680: LD_VAR 0 1
46684: PUSH
46685: LD_INT 3
46687: MINUS
46688: PUSH
46689: LD_VAR 0 2
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: PUSH
46702: LD_VAR 0 1
46706: PUSH
46707: LD_INT 4
46709: PLUS
46710: PUSH
46711: LD_VAR 0 2
46715: PUSH
46716: LD_INT 4
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: LIST
46723: PUSH
46724: LD_VAR 0 1
46728: PUSH
46729: LD_INT 3
46731: PLUS
46732: PUSH
46733: LD_VAR 0 2
46737: PUSH
46738: LD_INT 3
46740: PLUS
46741: PUSH
46742: LD_INT 5
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: LIST
46749: PUSH
46750: LD_VAR 0 1
46754: PUSH
46755: LD_VAR 0 2
46759: PUSH
46760: LD_INT 4
46762: PLUS
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: LIST
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: ST_TO_ADDR
// end ; 1 :
46779: GO 47479
46781: LD_INT 1
46783: DOUBLE
46784: EQUAL
46785: IFTRUE 46789
46787: GO 46922
46789: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46790: LD_ADDR_VAR 0 5
46794: PUSH
46795: LD_VAR 0 1
46799: PUSH
46800: LD_VAR 0 2
46804: PUSH
46805: LD_INT 4
46807: MINUS
46808: PUSH
46809: LD_INT 3
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: LIST
46816: PUSH
46817: LD_VAR 0 1
46821: PUSH
46822: LD_INT 3
46824: MINUS
46825: PUSH
46826: LD_VAR 0 2
46830: PUSH
46831: LD_INT 3
46833: MINUS
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: LIST
46842: PUSH
46843: LD_VAR 0 1
46847: PUSH
46848: LD_INT 4
46850: MINUS
46851: PUSH
46852: LD_VAR 0 2
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: LIST
46864: PUSH
46865: LD_VAR 0 1
46869: PUSH
46870: LD_VAR 0 2
46874: PUSH
46875: LD_INT 3
46877: PLUS
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: PUSH
46887: LD_VAR 0 1
46891: PUSH
46892: LD_INT 4
46894: PLUS
46895: PUSH
46896: LD_VAR 0 2
46900: PUSH
46901: LD_INT 4
46903: PLUS
46904: PUSH
46905: LD_INT 5
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: LIST
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: ST_TO_ADDR
// end ; 2 :
46920: GO 47479
46922: LD_INT 2
46924: DOUBLE
46925: EQUAL
46926: IFTRUE 46930
46928: GO 47059
46930: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46931: LD_ADDR_VAR 0 5
46935: PUSH
46936: LD_VAR 0 1
46940: PUSH
46941: LD_VAR 0 2
46945: PUSH
46946: LD_INT 3
46948: MINUS
46949: PUSH
46950: LD_INT 3
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: LIST
46957: PUSH
46958: LD_VAR 0 1
46962: PUSH
46963: LD_INT 4
46965: PLUS
46966: PUSH
46967: LD_VAR 0 2
46971: PUSH
46972: LD_INT 4
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: LIST
46979: PUSH
46980: LD_VAR 0 1
46984: PUSH
46985: LD_VAR 0 2
46989: PUSH
46990: LD_INT 4
46992: PLUS
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: PUSH
47002: LD_VAR 0 1
47006: PUSH
47007: LD_INT 3
47009: MINUS
47010: PUSH
47011: LD_VAR 0 2
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: LIST
47023: PUSH
47024: LD_VAR 0 1
47028: PUSH
47029: LD_INT 4
47031: MINUS
47032: PUSH
47033: LD_VAR 0 2
47037: PUSH
47038: LD_INT 4
47040: MINUS
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: ST_TO_ADDR
// end ; 3 :
47057: GO 47479
47059: LD_INT 3
47061: DOUBLE
47062: EQUAL
47063: IFTRUE 47067
47065: GO 47200
47067: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47068: LD_ADDR_VAR 0 5
47072: PUSH
47073: LD_VAR 0 1
47077: PUSH
47078: LD_INT 3
47080: PLUS
47081: PUSH
47082: LD_VAR 0 2
47086: PUSH
47087: LD_INT 4
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: LIST
47094: PUSH
47095: LD_VAR 0 1
47099: PUSH
47100: LD_INT 4
47102: PLUS
47103: PUSH
47104: LD_VAR 0 2
47108: PUSH
47109: LD_INT 4
47111: PLUS
47112: PUSH
47113: LD_INT 5
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: LIST
47120: PUSH
47121: LD_VAR 0 1
47125: PUSH
47126: LD_INT 4
47128: MINUS
47129: PUSH
47130: LD_VAR 0 2
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: LIST
47142: PUSH
47143: LD_VAR 0 1
47147: PUSH
47148: LD_VAR 0 2
47152: PUSH
47153: LD_INT 4
47155: MINUS
47156: PUSH
47157: LD_INT 3
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: LIST
47164: PUSH
47165: LD_VAR 0 1
47169: PUSH
47170: LD_INT 3
47172: MINUS
47173: PUSH
47174: LD_VAR 0 2
47178: PUSH
47179: LD_INT 3
47181: MINUS
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: ST_TO_ADDR
// end ; 4 :
47198: GO 47479
47200: LD_INT 4
47202: DOUBLE
47203: EQUAL
47204: IFTRUE 47208
47206: GO 47341
47208: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47209: LD_ADDR_VAR 0 5
47213: PUSH
47214: LD_VAR 0 1
47218: PUSH
47219: LD_VAR 0 2
47223: PUSH
47224: LD_INT 4
47226: PLUS
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: LIST
47235: PUSH
47236: LD_VAR 0 1
47240: PUSH
47241: LD_INT 3
47243: PLUS
47244: PUSH
47245: LD_VAR 0 2
47249: PUSH
47250: LD_INT 3
47252: PLUS
47253: PUSH
47254: LD_INT 5
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: LIST
47261: PUSH
47262: LD_VAR 0 1
47266: PUSH
47267: LD_INT 4
47269: PLUS
47270: PUSH
47271: LD_VAR 0 2
47275: PUSH
47276: LD_INT 4
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: PUSH
47284: LD_VAR 0 1
47288: PUSH
47289: LD_VAR 0 2
47293: PUSH
47294: LD_INT 3
47296: MINUS
47297: PUSH
47298: LD_INT 3
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: LIST
47305: PUSH
47306: LD_VAR 0 1
47310: PUSH
47311: LD_INT 4
47313: MINUS
47314: PUSH
47315: LD_VAR 0 2
47319: PUSH
47320: LD_INT 4
47322: MINUS
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: LIST
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
// end ; 5 :
47339: GO 47479
47341: LD_INT 5
47343: DOUBLE
47344: EQUAL
47345: IFTRUE 47349
47347: GO 47478
47349: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47350: LD_ADDR_VAR 0 5
47354: PUSH
47355: LD_VAR 0 1
47359: PUSH
47360: LD_INT 4
47362: MINUS
47363: PUSH
47364: LD_VAR 0 2
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: LIST
47376: PUSH
47377: LD_VAR 0 1
47381: PUSH
47382: LD_VAR 0 2
47386: PUSH
47387: LD_INT 4
47389: MINUS
47390: PUSH
47391: LD_INT 3
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: LIST
47398: PUSH
47399: LD_VAR 0 1
47403: PUSH
47404: LD_INT 4
47406: PLUS
47407: PUSH
47408: LD_VAR 0 2
47412: PUSH
47413: LD_INT 4
47415: PLUS
47416: PUSH
47417: LD_INT 5
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: LIST
47424: PUSH
47425: LD_VAR 0 1
47429: PUSH
47430: LD_INT 3
47432: PLUS
47433: PUSH
47434: LD_VAR 0 2
47438: PUSH
47439: LD_INT 4
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: LIST
47446: PUSH
47447: LD_VAR 0 1
47451: PUSH
47452: LD_VAR 0 2
47456: PUSH
47457: LD_INT 3
47459: PLUS
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: LIST
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: ST_TO_ADDR
// end ; end ;
47476: GO 47479
47478: POP
// result := list ;
47479: LD_ADDR_VAR 0 4
47483: PUSH
47484: LD_VAR 0 5
47488: ST_TO_ADDR
// end ;
47489: LD_VAR 0 4
47493: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47494: LD_INT 0
47496: PPUSH
47497: PPUSH
47498: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47499: LD_VAR 0 1
47503: NOT
47504: IFTRUE 47532
47506: PUSH
47507: LD_VAR 0 2
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: LD_INT 3
47520: PUSH
47521: LD_INT 4
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: IN
47530: NOT
47531: OR
47532: IFFALSE 47536
// exit ;
47534: GO 47619
// tmp := [ ] ;
47536: LD_ADDR_VAR 0 5
47540: PUSH
47541: EMPTY
47542: ST_TO_ADDR
// for i in units do
47543: LD_ADDR_VAR 0 4
47547: PUSH
47548: LD_VAR 0 1
47552: PUSH
47553: FOR_IN
47554: IFFALSE 47588
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
47556: LD_ADDR_VAR 0 5
47560: PUSH
47561: LD_VAR 0 5
47565: PPUSH
47566: LD_VAR 0 4
47570: PPUSH
47571: LD_VAR 0 2
47575: PPUSH
47576: CALL_OW 259
47580: PPUSH
47581: CALL 49014 0 2
47585: ST_TO_ADDR
47586: GO 47553
47588: POP
47589: POP
// if not tmp then
47590: LD_VAR 0 5
47594: NOT
47595: IFFALSE 47599
// exit ;
47597: GO 47619
// result := SortListByListDesc ( units , tmp ) ;
47599: LD_ADDR_VAR 0 3
47603: PUSH
47604: LD_VAR 0 1
47608: PPUSH
47609: LD_VAR 0 5
47613: PPUSH
47614: CALL_OW 77
47618: ST_TO_ADDR
// end ;
47619: LD_VAR 0 3
47623: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47624: LD_INT 0
47626: PPUSH
47627: PPUSH
47628: PPUSH
// result := false ;
47629: LD_ADDR_VAR 0 3
47633: PUSH
47634: LD_INT 0
47636: ST_TO_ADDR
// if not building then
47637: LD_VAR 0 2
47641: NOT
47642: IFFALSE 47646
// exit ;
47644: GO 47790
// x := GetX ( building ) ;
47646: LD_ADDR_VAR 0 4
47650: PUSH
47651: LD_VAR 0 2
47655: PPUSH
47656: CALL_OW 250
47660: ST_TO_ADDR
// y := GetY ( building ) ;
47661: LD_ADDR_VAR 0 5
47665: PUSH
47666: LD_VAR 0 2
47670: PPUSH
47671: CALL_OW 251
47675: ST_TO_ADDR
// if not x or not y then
47676: LD_VAR 0 4
47680: NOT
47681: IFTRUE 47690
47683: PUSH
47684: LD_VAR 0 5
47688: NOT
47689: OR
47690: IFFALSE 47694
// exit ;
47692: GO 47790
// if GetTaskList ( unit ) then
47694: LD_VAR 0 1
47698: PPUSH
47699: CALL_OW 437
47703: IFFALSE 47790
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47705: LD_STRING e
47707: PUSH
47708: LD_VAR 0 1
47712: PPUSH
47713: CALL_OW 437
47717: PUSH
47718: LD_INT 1
47720: ARRAY
47721: PUSH
47722: LD_INT 1
47724: ARRAY
47725: EQUAL
47726: IFFALSE 47753
47728: PUSH
47729: LD_VAR 0 4
47733: PUSH
47734: LD_VAR 0 1
47738: PPUSH
47739: CALL_OW 437
47743: PUSH
47744: LD_INT 1
47746: ARRAY
47747: PUSH
47748: LD_INT 2
47750: ARRAY
47751: EQUAL
47752: AND
47753: IFFALSE 47780
47755: PUSH
47756: LD_VAR 0 5
47760: PUSH
47761: LD_VAR 0 1
47765: PPUSH
47766: CALL_OW 437
47770: PUSH
47771: LD_INT 1
47773: ARRAY
47774: PUSH
47775: LD_INT 3
47777: ARRAY
47778: EQUAL
47779: AND
47780: IFFALSE 47790
// result := true end ;
47782: LD_ADDR_VAR 0 3
47786: PUSH
47787: LD_INT 1
47789: ST_TO_ADDR
// end ;
47790: LD_VAR 0 3
47794: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47795: LD_INT 0
47797: PPUSH
// result := false ;
47798: LD_ADDR_VAR 0 4
47802: PUSH
47803: LD_INT 0
47805: ST_TO_ADDR
// if GetTaskList ( unit ) then
47806: LD_VAR 0 1
47810: PPUSH
47811: CALL_OW 437
47815: IFFALSE 47902
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47817: LD_STRING M
47819: PUSH
47820: LD_VAR 0 1
47824: PPUSH
47825: CALL_OW 437
47829: PUSH
47830: LD_INT 1
47832: ARRAY
47833: PUSH
47834: LD_INT 1
47836: ARRAY
47837: EQUAL
47838: IFFALSE 47865
47840: PUSH
47841: LD_VAR 0 2
47845: PUSH
47846: LD_VAR 0 1
47850: PPUSH
47851: CALL_OW 437
47855: PUSH
47856: LD_INT 1
47858: ARRAY
47859: PUSH
47860: LD_INT 2
47862: ARRAY
47863: EQUAL
47864: AND
47865: IFFALSE 47892
47867: PUSH
47868: LD_VAR 0 3
47872: PUSH
47873: LD_VAR 0 1
47877: PPUSH
47878: CALL_OW 437
47882: PUSH
47883: LD_INT 1
47885: ARRAY
47886: PUSH
47887: LD_INT 3
47889: ARRAY
47890: EQUAL
47891: AND
47892: IFFALSE 47902
// result := true ;
47894: LD_ADDR_VAR 0 4
47898: PUSH
47899: LD_INT 1
47901: ST_TO_ADDR
// end ; end ;
47902: LD_VAR 0 4
47906: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47907: LD_INT 0
47909: PPUSH
47910: PPUSH
47911: PPUSH
47912: PPUSH
// if not unit or not area then
47913: LD_VAR 0 1
47917: NOT
47918: IFTRUE 47927
47920: PUSH
47921: LD_VAR 0 2
47925: NOT
47926: OR
47927: IFFALSE 47931
// exit ;
47929: GO 48107
// tmp := AreaToList ( area , i ) ;
47931: LD_ADDR_VAR 0 6
47935: PUSH
47936: LD_VAR 0 2
47940: PPUSH
47941: LD_VAR 0 5
47945: PPUSH
47946: CALL_OW 517
47950: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47951: LD_ADDR_VAR 0 5
47955: PUSH
47956: DOUBLE
47957: LD_INT 1
47959: DEC
47960: ST_TO_ADDR
47961: LD_VAR 0 6
47965: PUSH
47966: LD_INT 1
47968: ARRAY
47969: PUSH
47970: FOR_TO
47971: IFFALSE 48105
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47973: LD_ADDR_VAR 0 7
47977: PUSH
47978: LD_VAR 0 6
47982: PUSH
47983: LD_INT 1
47985: ARRAY
47986: PUSH
47987: LD_VAR 0 5
47991: ARRAY
47992: PUSH
47993: LD_VAR 0 6
47997: PUSH
47998: LD_INT 2
48000: ARRAY
48001: PUSH
48002: LD_VAR 0 5
48006: ARRAY
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
48012: LD_INT 92
48014: PUSH
48015: LD_VAR 0 7
48019: PUSH
48020: LD_INT 1
48022: ARRAY
48023: PUSH
48024: LD_VAR 0 7
48028: PUSH
48029: LD_INT 2
48031: ARRAY
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: PPUSH
48042: CALL_OW 69
48046: PUSH
48047: LD_INT 0
48049: EQUAL
48050: IFFALSE 48103
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48052: LD_VAR 0 1
48056: PPUSH
48057: LD_VAR 0 7
48061: PUSH
48062: LD_INT 1
48064: ARRAY
48065: PPUSH
48066: LD_VAR 0 7
48070: PUSH
48071: LD_INT 2
48073: ARRAY
48074: PPUSH
48075: LD_VAR 0 3
48079: PPUSH
48080: CALL_OW 48
// result := IsPlaced ( unit ) ;
48084: LD_ADDR_VAR 0 4
48088: PUSH
48089: LD_VAR 0 1
48093: PPUSH
48094: CALL_OW 305
48098: ST_TO_ADDR
// exit ;
48099: POP
48100: POP
48101: GO 48107
// end ; end ;
48103: GO 47970
48105: POP
48106: POP
// end ;
48107: LD_VAR 0 4
48111: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48112: LD_INT 0
48114: PPUSH
48115: PPUSH
48116: PPUSH
// if not side or side > 8 then
48117: LD_VAR 0 1
48121: NOT
48122: IFTRUE 48134
48124: PUSH
48125: LD_VAR 0 1
48129: PUSH
48130: LD_INT 8
48132: GREATER
48133: OR
48134: IFFALSE 48138
// exit ;
48136: GO 48325
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48138: LD_ADDR_VAR 0 4
48142: PUSH
48143: LD_INT 22
48145: PUSH
48146: LD_VAR 0 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 21
48157: PUSH
48158: LD_INT 3
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PPUSH
48169: CALL_OW 69
48173: ST_TO_ADDR
// if not tmp then
48174: LD_VAR 0 4
48178: NOT
48179: IFFALSE 48183
// exit ;
48181: GO 48325
// enable_addtolog := true ;
48183: LD_ADDR_OWVAR 81
48187: PUSH
48188: LD_INT 1
48190: ST_TO_ADDR
// AddToLog ( [ ) ;
48191: LD_STRING [
48193: PPUSH
48194: CALL_OW 561
// for i in tmp do
48198: LD_ADDR_VAR 0 3
48202: PUSH
48203: LD_VAR 0 4
48207: PUSH
48208: FOR_IN
48209: IFFALSE 48316
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48211: LD_STRING [
48213: PUSH
48214: LD_VAR 0 3
48218: PPUSH
48219: CALL_OW 266
48223: STR
48224: PUSH
48225: LD_STRING , 
48227: STR
48228: PUSH
48229: LD_VAR 0 3
48233: PPUSH
48234: CALL_OW 250
48238: STR
48239: PUSH
48240: LD_STRING , 
48242: STR
48243: PUSH
48244: LD_VAR 0 3
48248: PPUSH
48249: CALL_OW 251
48253: STR
48254: PUSH
48255: LD_STRING , 
48257: STR
48258: PUSH
48259: LD_VAR 0 3
48263: PPUSH
48264: CALL_OW 254
48268: STR
48269: PUSH
48270: LD_STRING , 
48272: STR
48273: PUSH
48274: LD_VAR 0 3
48278: PPUSH
48279: LD_INT 1
48281: PPUSH
48282: CALL_OW 268
48286: STR
48287: PUSH
48288: LD_STRING , 
48290: STR
48291: PUSH
48292: LD_VAR 0 3
48296: PPUSH
48297: LD_INT 2
48299: PPUSH
48300: CALL_OW 268
48304: STR
48305: PUSH
48306: LD_STRING ],
48308: STR
48309: PPUSH
48310: CALL_OW 561
// end ;
48314: GO 48208
48316: POP
48317: POP
// AddToLog ( ]; ) ;
48318: LD_STRING ];
48320: PPUSH
48321: CALL_OW 561
// end ;
48325: LD_VAR 0 2
48329: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48330: LD_INT 0
48332: PPUSH
48333: PPUSH
48334: PPUSH
48335: PPUSH
48336: PPUSH
// if not area or not rate or not max then
48337: LD_VAR 0 1
48341: NOT
48342: IFTRUE 48351
48344: PUSH
48345: LD_VAR 0 2
48349: NOT
48350: OR
48351: IFTRUE 48360
48353: PUSH
48354: LD_VAR 0 4
48358: NOT
48359: OR
48360: IFFALSE 48364
// exit ;
48362: GO 48553
// while 1 do
48364: LD_INT 1
48366: IFFALSE 48553
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48368: LD_ADDR_VAR 0 9
48372: PUSH
48373: LD_VAR 0 1
48377: PPUSH
48378: LD_INT 1
48380: PPUSH
48381: CALL_OW 287
48385: PUSH
48386: LD_INT 10
48388: MUL
48389: ST_TO_ADDR
// r := rate / 10 ;
48390: LD_ADDR_VAR 0 7
48394: PUSH
48395: LD_VAR 0 2
48399: PUSH
48400: LD_INT 10
48402: DIVREAL
48403: ST_TO_ADDR
// time := 1 1$00 ;
48404: LD_ADDR_VAR 0 8
48408: PUSH
48409: LD_INT 2100
48411: ST_TO_ADDR
// if amount < min then
48412: LD_VAR 0 9
48416: PUSH
48417: LD_VAR 0 3
48421: LESS
48422: IFFALSE 48440
// r := r * 2 else
48424: LD_ADDR_VAR 0 7
48428: PUSH
48429: LD_VAR 0 7
48433: PUSH
48434: LD_INT 2
48436: MUL
48437: ST_TO_ADDR
48438: GO 48466
// if amount > max then
48440: LD_VAR 0 9
48444: PUSH
48445: LD_VAR 0 4
48449: GREATER
48450: IFFALSE 48466
// r := r / 2 ;
48452: LD_ADDR_VAR 0 7
48456: PUSH
48457: LD_VAR 0 7
48461: PUSH
48462: LD_INT 2
48464: DIVREAL
48465: ST_TO_ADDR
// time := time / r ;
48466: LD_ADDR_VAR 0 8
48470: PUSH
48471: LD_VAR 0 8
48475: PUSH
48476: LD_VAR 0 7
48480: DIVREAL
48481: ST_TO_ADDR
// if time < 0 then
48482: LD_VAR 0 8
48486: PUSH
48487: LD_INT 0
48489: LESS
48490: IFFALSE 48507
// time := time * - 1 ;
48492: LD_ADDR_VAR 0 8
48496: PUSH
48497: LD_VAR 0 8
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: MUL
48506: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48507: LD_VAR 0 8
48511: PUSH
48512: LD_INT 35
48514: PPUSH
48515: LD_INT 875
48517: PPUSH
48518: CALL_OW 12
48522: PLUS
48523: PPUSH
48524: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48528: LD_INT 1
48530: PPUSH
48531: LD_INT 5
48533: PPUSH
48534: CALL_OW 12
48538: PPUSH
48539: LD_VAR 0 1
48543: PPUSH
48544: LD_INT 1
48546: PPUSH
48547: CALL_OW 55
// end ;
48551: GO 48364
// end ;
48553: LD_VAR 0 5
48557: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48558: LD_INT 0
48560: PPUSH
48561: PPUSH
48562: PPUSH
48563: PPUSH
48564: PPUSH
48565: PPUSH
48566: PPUSH
48567: PPUSH
// if not turrets or not factories then
48568: LD_VAR 0 1
48572: NOT
48573: IFTRUE 48582
48575: PUSH
48576: LD_VAR 0 2
48580: NOT
48581: OR
48582: IFFALSE 48586
// exit ;
48584: GO 48893
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48586: LD_ADDR_VAR 0 10
48590: PUSH
48591: LD_INT 5
48593: PUSH
48594: LD_INT 6
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: LD_INT 4
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 3
48613: PUSH
48614: LD_INT 5
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 24
48628: PUSH
48629: LD_INT 25
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 23
48638: PUSH
48639: LD_INT 27
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 42
48652: PUSH
48653: LD_INT 43
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 44
48662: PUSH
48663: LD_INT 46
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 45
48672: PUSH
48673: LD_INT 47
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: LIST
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: LIST
48689: ST_TO_ADDR
// result := [ ] ;
48690: LD_ADDR_VAR 0 3
48694: PUSH
48695: EMPTY
48696: ST_TO_ADDR
// for i in turrets do
48697: LD_ADDR_VAR 0 4
48701: PUSH
48702: LD_VAR 0 1
48706: PUSH
48707: FOR_IN
48708: IFFALSE 48891
// begin nat := GetNation ( i ) ;
48710: LD_ADDR_VAR 0 7
48714: PUSH
48715: LD_VAR 0 4
48719: PPUSH
48720: CALL_OW 248
48724: ST_TO_ADDR
// weapon := 0 ;
48725: LD_ADDR_VAR 0 8
48729: PUSH
48730: LD_INT 0
48732: ST_TO_ADDR
// if not nat then
48733: LD_VAR 0 7
48737: NOT
48738: IFFALSE 48742
// continue ;
48740: GO 48707
// for j in list [ nat ] do
48742: LD_ADDR_VAR 0 5
48746: PUSH
48747: LD_VAR 0 10
48751: PUSH
48752: LD_VAR 0 7
48756: ARRAY
48757: PUSH
48758: FOR_IN
48759: IFFALSE 48800
// if GetBWeapon ( i ) = j [ 1 ] then
48761: LD_VAR 0 4
48765: PPUSH
48766: CALL_OW 269
48770: PUSH
48771: LD_VAR 0 5
48775: PUSH
48776: LD_INT 1
48778: ARRAY
48779: EQUAL
48780: IFFALSE 48798
// begin weapon := j [ 2 ] ;
48782: LD_ADDR_VAR 0 8
48786: PUSH
48787: LD_VAR 0 5
48791: PUSH
48792: LD_INT 2
48794: ARRAY
48795: ST_TO_ADDR
// break ;
48796: GO 48800
// end ;
48798: GO 48758
48800: POP
48801: POP
// if not weapon then
48802: LD_VAR 0 8
48806: NOT
48807: IFFALSE 48811
// continue ;
48809: GO 48707
// for k in factories do
48811: LD_ADDR_VAR 0 6
48815: PUSH
48816: LD_VAR 0 2
48820: PUSH
48821: FOR_IN
48822: IFFALSE 48887
// begin weapons := AvailableWeaponList ( k ) ;
48824: LD_ADDR_VAR 0 9
48828: PUSH
48829: LD_VAR 0 6
48833: PPUSH
48834: CALL_OW 478
48838: ST_TO_ADDR
// if not weapons then
48839: LD_VAR 0 9
48843: NOT
48844: IFFALSE 48848
// continue ;
48846: GO 48821
// if weapon in weapons then
48848: LD_VAR 0 8
48852: PUSH
48853: LD_VAR 0 9
48857: IN
48858: IFFALSE 48885
// begin result := [ i , weapon ] ;
48860: LD_ADDR_VAR 0 3
48864: PUSH
48865: LD_VAR 0 4
48869: PUSH
48870: LD_VAR 0 8
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: ST_TO_ADDR
// exit ;
48879: POP
48880: POP
48881: POP
48882: POP
48883: GO 48893
// end ; end ;
48885: GO 48821
48887: POP
48888: POP
// end ;
48889: GO 48707
48891: POP
48892: POP
// end ;
48893: LD_VAR 0 3
48897: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48898: LD_INT 0
48900: PPUSH
// if not side or side > 8 then
48901: LD_VAR 0 3
48905: NOT
48906: IFTRUE 48918
48908: PUSH
48909: LD_VAR 0 3
48913: PUSH
48914: LD_INT 8
48916: GREATER
48917: OR
48918: IFFALSE 48922
// exit ;
48920: GO 48981
// if not range then
48922: LD_VAR 0 4
48926: NOT
48927: IFFALSE 48938
// range := - 12 ;
48929: LD_ADDR_VAR 0 4
48933: PUSH
48934: LD_INT 12
48936: NEG
48937: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48938: LD_VAR 0 1
48942: PPUSH
48943: LD_VAR 0 2
48947: PPUSH
48948: LD_VAR 0 3
48952: PPUSH
48953: LD_VAR 0 4
48957: PPUSH
48958: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48962: LD_VAR 0 1
48966: PPUSH
48967: LD_VAR 0 2
48971: PPUSH
48972: LD_VAR 0 3
48976: PPUSH
48977: CALL_OW 331
// end ;
48981: LD_VAR 0 5
48985: RET
// export function Video ( mode ) ; begin
48986: LD_INT 0
48988: PPUSH
// ingame_video = mode ;
48989: LD_ADDR_OWVAR 52
48993: PUSH
48994: LD_VAR 0 1
48998: ST_TO_ADDR
// interface_hidden = mode ;
48999: LD_ADDR_OWVAR 54
49003: PUSH
49004: LD_VAR 0 1
49008: ST_TO_ADDR
// end ;
49009: LD_VAR 0 2
49013: RET
// export function Join ( array , element ) ; begin
49014: LD_INT 0
49016: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49017: LD_ADDR_VAR 0 3
49021: PUSH
49022: LD_VAR 0 1
49026: PPUSH
49027: LD_VAR 0 1
49031: PUSH
49032: LD_INT 1
49034: PLUS
49035: PPUSH
49036: LD_VAR 0 2
49040: PPUSH
49041: CALL_OW 1
49045: ST_TO_ADDR
// end ;
49046: LD_VAR 0 3
49050: RET
// export function JoinUnion ( array , element ) ; begin
49051: LD_INT 0
49053: PPUSH
// result := array union element ;
49054: LD_ADDR_VAR 0 3
49058: PUSH
49059: LD_VAR 0 1
49063: PUSH
49064: LD_VAR 0 2
49068: UNION
49069: ST_TO_ADDR
// end ;
49070: LD_VAR 0 3
49074: RET
// export function GetBehemoths ( side ) ; begin
49075: LD_INT 0
49077: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
49078: LD_ADDR_VAR 0 2
49082: PUSH
49083: LD_INT 22
49085: PUSH
49086: LD_VAR 0 1
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 31
49097: PUSH
49098: LD_INT 25
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PPUSH
49109: CALL_OW 69
49113: ST_TO_ADDR
// end ;
49114: LD_VAR 0 2
49118: RET
// export function Shuffle ( array ) ; var i , index ; begin
49119: LD_INT 0
49121: PPUSH
49122: PPUSH
49123: PPUSH
// result := [ ] ;
49124: LD_ADDR_VAR 0 2
49128: PUSH
49129: EMPTY
49130: ST_TO_ADDR
// if not array then
49131: LD_VAR 0 1
49135: NOT
49136: IFFALSE 49140
// exit ;
49138: GO 49239
// Randomize ;
49140: CALL_OW 10
// for i = array downto 1 do
49144: LD_ADDR_VAR 0 3
49148: PUSH
49149: DOUBLE
49150: LD_VAR 0 1
49154: INC
49155: ST_TO_ADDR
49156: LD_INT 1
49158: PUSH
49159: FOR_DOWNTO
49160: IFFALSE 49237
// begin index := rand ( 1 , array ) ;
49162: LD_ADDR_VAR 0 4
49166: PUSH
49167: LD_INT 1
49169: PPUSH
49170: LD_VAR 0 1
49174: PPUSH
49175: CALL_OW 12
49179: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49180: LD_ADDR_VAR 0 2
49184: PUSH
49185: LD_VAR 0 2
49189: PPUSH
49190: LD_VAR 0 2
49194: PUSH
49195: LD_INT 1
49197: PLUS
49198: PPUSH
49199: LD_VAR 0 1
49203: PUSH
49204: LD_VAR 0 4
49208: ARRAY
49209: PPUSH
49210: CALL_OW 2
49214: ST_TO_ADDR
// array := Delete ( array , index ) ;
49215: LD_ADDR_VAR 0 1
49219: PUSH
49220: LD_VAR 0 1
49224: PPUSH
49225: LD_VAR 0 4
49229: PPUSH
49230: CALL_OW 3
49234: ST_TO_ADDR
// end ;
49235: GO 49159
49237: POP
49238: POP
// end ;
49239: LD_VAR 0 2
49243: RET
// export function GetBaseMaterials ( base ) ; begin
49244: LD_INT 0
49246: PPUSH
// result := [ 0 , 0 , 0 ] ;
49247: LD_ADDR_VAR 0 2
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: LIST
49265: ST_TO_ADDR
// if not base then
49266: LD_VAR 0 1
49270: NOT
49271: IFFALSE 49275
// exit ;
49273: GO 49324
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49275: LD_ADDR_VAR 0 2
49279: PUSH
49280: LD_VAR 0 1
49284: PPUSH
49285: LD_INT 1
49287: PPUSH
49288: CALL_OW 275
49292: PUSH
49293: LD_VAR 0 1
49297: PPUSH
49298: LD_INT 2
49300: PPUSH
49301: CALL_OW 275
49305: PUSH
49306: LD_VAR 0 1
49310: PPUSH
49311: LD_INT 3
49313: PPUSH
49314: CALL_OW 275
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: LIST
49323: ST_TO_ADDR
// end ;
49324: LD_VAR 0 2
49328: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49329: LD_INT 0
49331: PPUSH
49332: PPUSH
// result := array ;
49333: LD_ADDR_VAR 0 3
49337: PUSH
49338: LD_VAR 0 1
49342: ST_TO_ADDR
// if size >= result then
49343: LD_VAR 0 2
49347: PUSH
49348: LD_VAR 0 3
49352: GREATEREQUAL
49353: IFFALSE 49357
// exit ;
49355: GO 49407
// if size then
49357: LD_VAR 0 2
49361: IFFALSE 49407
// for i := array downto size do
49363: LD_ADDR_VAR 0 4
49367: PUSH
49368: DOUBLE
49369: LD_VAR 0 1
49373: INC
49374: ST_TO_ADDR
49375: LD_VAR 0 2
49379: PUSH
49380: FOR_DOWNTO
49381: IFFALSE 49405
// result := Delete ( result , result ) ;
49383: LD_ADDR_VAR 0 3
49387: PUSH
49388: LD_VAR 0 3
49392: PPUSH
49393: LD_VAR 0 3
49397: PPUSH
49398: CALL_OW 3
49402: ST_TO_ADDR
49403: GO 49380
49405: POP
49406: POP
// end ;
49407: LD_VAR 0 3
49411: RET
// export function ComExit ( unit ) ; var tmp ; begin
49412: LD_INT 0
49414: PPUSH
49415: PPUSH
// if not IsInUnit ( unit ) then
49416: LD_VAR 0 1
49420: PPUSH
49421: CALL_OW 310
49425: NOT
49426: IFFALSE 49430
// exit ;
49428: GO 49490
// tmp := IsInUnit ( unit ) ;
49430: LD_ADDR_VAR 0 3
49434: PUSH
49435: LD_VAR 0 1
49439: PPUSH
49440: CALL_OW 310
49444: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49445: LD_VAR 0 3
49449: PPUSH
49450: CALL_OW 247
49454: PUSH
49455: LD_INT 2
49457: EQUAL
49458: IFFALSE 49471
// ComExitVehicle ( unit ) else
49460: LD_VAR 0 1
49464: PPUSH
49465: CALL_OW 121
49469: GO 49480
// ComExitBuilding ( unit ) ;
49471: LD_VAR 0 1
49475: PPUSH
49476: CALL_OW 122
// result := tmp ;
49480: LD_ADDR_VAR 0 2
49484: PUSH
49485: LD_VAR 0 3
49489: ST_TO_ADDR
// end ;
49490: LD_VAR 0 2
49494: RET
// export function ComExitAll ( units ) ; var i ; begin
49495: LD_INT 0
49497: PPUSH
49498: PPUSH
// if not units then
49499: LD_VAR 0 1
49503: NOT
49504: IFFALSE 49508
// exit ;
49506: GO 49534
// for i in units do
49508: LD_ADDR_VAR 0 3
49512: PUSH
49513: LD_VAR 0 1
49517: PUSH
49518: FOR_IN
49519: IFFALSE 49532
// ComExit ( i ) ;
49521: LD_VAR 0 3
49525: PPUSH
49526: CALL 49412 0 1
49530: GO 49518
49532: POP
49533: POP
// end ;
49534: LD_VAR 0 2
49538: RET
// export function ResetHc ; begin
49539: LD_INT 0
49541: PPUSH
// InitHc ;
49542: CALL_OW 19
// hc_importance := 0 ;
49546: LD_ADDR_OWVAR 32
49550: PUSH
49551: LD_INT 0
49553: ST_TO_ADDR
// end ;
49554: LD_VAR 0 1
49558: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49559: LD_INT 0
49561: PPUSH
49562: PPUSH
49563: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49564: LD_ADDR_VAR 0 6
49568: PUSH
49569: LD_VAR 0 1
49573: PUSH
49574: LD_VAR 0 3
49578: PLUS
49579: PUSH
49580: LD_INT 2
49582: DIV
49583: ST_TO_ADDR
// if _x < 0 then
49584: LD_VAR 0 6
49588: PUSH
49589: LD_INT 0
49591: LESS
49592: IFFALSE 49609
// _x := _x * - 1 ;
49594: LD_ADDR_VAR 0 6
49598: PUSH
49599: LD_VAR 0 6
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: MUL
49608: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
49609: LD_ADDR_VAR 0 7
49613: PUSH
49614: LD_VAR 0 2
49618: PUSH
49619: LD_VAR 0 4
49623: PLUS
49624: PUSH
49625: LD_INT 2
49627: DIV
49628: ST_TO_ADDR
// if _y < 0 then
49629: LD_VAR 0 7
49633: PUSH
49634: LD_INT 0
49636: LESS
49637: IFFALSE 49654
// _y := _y * - 1 ;
49639: LD_ADDR_VAR 0 7
49643: PUSH
49644: LD_VAR 0 7
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: MUL
49653: ST_TO_ADDR
// result := [ _x , _y ] ;
49654: LD_ADDR_VAR 0 5
49658: PUSH
49659: LD_VAR 0 6
49663: PUSH
49664: LD_VAR 0 7
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: ST_TO_ADDR
// end ;
49673: LD_VAR 0 5
49677: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
49678: LD_INT 0
49680: PPUSH
49681: PPUSH
49682: PPUSH
49683: PPUSH
// task := GetTaskList ( unit ) ;
49684: LD_ADDR_VAR 0 7
49688: PUSH
49689: LD_VAR 0 1
49693: PPUSH
49694: CALL_OW 437
49698: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
49699: LD_VAR 0 7
49703: NOT
49704: IFFALSE 49723
49706: PUSH
49707: LD_VAR 0 1
49711: PPUSH
49712: LD_VAR 0 2
49716: PPUSH
49717: CALL_OW 308
49721: NOT
49722: AND
49723: IFFALSE 49727
// exit ;
49725: GO 49845
// if IsInArea ( unit , area ) then
49727: LD_VAR 0 1
49731: PPUSH
49732: LD_VAR 0 2
49736: PPUSH
49737: CALL_OW 308
49741: IFFALSE 49759
// begin ComMoveToArea ( unit , goAway ) ;
49743: LD_VAR 0 1
49747: PPUSH
49748: LD_VAR 0 3
49752: PPUSH
49753: CALL_OW 113
// exit ;
49757: GO 49845
// end ; if task [ 1 ] [ 1 ] <> M then
49759: LD_VAR 0 7
49763: PUSH
49764: LD_INT 1
49766: ARRAY
49767: PUSH
49768: LD_INT 1
49770: ARRAY
49771: PUSH
49772: LD_STRING M
49774: NONEQUAL
49775: IFFALSE 49779
// exit ;
49777: GO 49845
// x := task [ 1 ] [ 2 ] ;
49779: LD_ADDR_VAR 0 5
49783: PUSH
49784: LD_VAR 0 7
49788: PUSH
49789: LD_INT 1
49791: ARRAY
49792: PUSH
49793: LD_INT 2
49795: ARRAY
49796: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49797: LD_ADDR_VAR 0 6
49801: PUSH
49802: LD_VAR 0 7
49806: PUSH
49807: LD_INT 1
49809: ARRAY
49810: PUSH
49811: LD_INT 3
49813: ARRAY
49814: ST_TO_ADDR
// if InArea ( x , y , area ) then
49815: LD_VAR 0 5
49819: PPUSH
49820: LD_VAR 0 6
49824: PPUSH
49825: LD_VAR 0 2
49829: PPUSH
49830: CALL_OW 309
49834: IFFALSE 49845
// ComStop ( unit ) ;
49836: LD_VAR 0 1
49840: PPUSH
49841: CALL_OW 141
// end ;
49845: LD_VAR 0 4
49849: RET
// export function Abs ( value ) ; begin
49850: LD_INT 0
49852: PPUSH
// result := value ;
49853: LD_ADDR_VAR 0 2
49857: PUSH
49858: LD_VAR 0 1
49862: ST_TO_ADDR
// if value < 0 then
49863: LD_VAR 0 1
49867: PUSH
49868: LD_INT 0
49870: LESS
49871: IFFALSE 49888
// result := value * - 1 ;
49873: LD_ADDR_VAR 0 2
49877: PUSH
49878: LD_VAR 0 1
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: MUL
49887: ST_TO_ADDR
// end ;
49888: LD_VAR 0 2
49892: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49893: LD_INT 0
49895: PPUSH
49896: PPUSH
49897: PPUSH
49898: PPUSH
49899: PPUSH
49900: PPUSH
49901: PPUSH
49902: PPUSH
// if not unit or not building then
49903: LD_VAR 0 1
49907: NOT
49908: IFTRUE 49917
49910: PUSH
49911: LD_VAR 0 2
49915: NOT
49916: OR
49917: IFFALSE 49921
// exit ;
49919: GO 50149
// x := GetX ( building ) ;
49921: LD_ADDR_VAR 0 4
49925: PUSH
49926: LD_VAR 0 2
49930: PPUSH
49931: CALL_OW 250
49935: ST_TO_ADDR
// y := GetY ( building ) ;
49936: LD_ADDR_VAR 0 6
49940: PUSH
49941: LD_VAR 0 2
49945: PPUSH
49946: CALL_OW 251
49950: ST_TO_ADDR
// d := GetDir ( building ) ;
49951: LD_ADDR_VAR 0 8
49955: PUSH
49956: LD_VAR 0 2
49960: PPUSH
49961: CALL_OW 254
49965: ST_TO_ADDR
// r := 4 ;
49966: LD_ADDR_VAR 0 9
49970: PUSH
49971: LD_INT 4
49973: ST_TO_ADDR
// for i := 1 to 5 do
49974: LD_ADDR_VAR 0 10
49978: PUSH
49979: DOUBLE
49980: LD_INT 1
49982: DEC
49983: ST_TO_ADDR
49984: LD_INT 5
49986: PUSH
49987: FOR_TO
49988: IFFALSE 50147
// begin _x := ShiftX ( x , d , r + i ) ;
49990: LD_ADDR_VAR 0 5
49994: PUSH
49995: LD_VAR 0 4
49999: PPUSH
50000: LD_VAR 0 8
50004: PPUSH
50005: LD_VAR 0 9
50009: PUSH
50010: LD_VAR 0 10
50014: PLUS
50015: PPUSH
50016: CALL_OW 272
50020: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50021: LD_ADDR_VAR 0 7
50025: PUSH
50026: LD_VAR 0 6
50030: PPUSH
50031: LD_VAR 0 8
50035: PPUSH
50036: LD_VAR 0 9
50040: PUSH
50041: LD_VAR 0 10
50045: PLUS
50046: PPUSH
50047: CALL_OW 273
50051: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50052: LD_VAR 0 5
50056: PPUSH
50057: LD_VAR 0 7
50061: PPUSH
50062: CALL_OW 488
50066: IFFALSE 50101
50068: PUSH
50069: LD_VAR 0 5
50073: PPUSH
50074: LD_VAR 0 7
50078: PPUSH
50079: CALL_OW 428
50083: PPUSH
50084: CALL_OW 247
50088: PUSH
50089: LD_INT 3
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: IN
50099: NOT
50100: AND
50101: IFFALSE 50145
// begin ComMoveXY ( unit , _x , _y ) ;
50103: LD_VAR 0 1
50107: PPUSH
50108: LD_VAR 0 5
50112: PPUSH
50113: LD_VAR 0 7
50117: PPUSH
50118: CALL_OW 111
// result := [ _x , _y ] ;
50122: LD_ADDR_VAR 0 3
50126: PUSH
50127: LD_VAR 0 5
50131: PUSH
50132: LD_VAR 0 7
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: ST_TO_ADDR
// exit ;
50141: POP
50142: POP
50143: GO 50149
// end ; end ;
50145: GO 49987
50147: POP
50148: POP
// end ;
50149: LD_VAR 0 3
50153: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50154: LD_INT 0
50156: PPUSH
50157: PPUSH
50158: PPUSH
// result := 0 ;
50159: LD_ADDR_VAR 0 3
50163: PUSH
50164: LD_INT 0
50166: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50167: LD_VAR 0 1
50171: PUSH
50172: LD_INT 0
50174: LESS
50175: IFTRUE 50187
50177: PUSH
50178: LD_VAR 0 1
50182: PUSH
50183: LD_INT 8
50185: GREATER
50186: OR
50187: IFTRUE 50199
50189: PUSH
50190: LD_VAR 0 2
50194: PUSH
50195: LD_INT 0
50197: LESS
50198: OR
50199: IFTRUE 50211
50201: PUSH
50202: LD_VAR 0 2
50206: PUSH
50207: LD_INT 8
50209: GREATER
50210: OR
50211: IFFALSE 50215
// exit ;
50213: GO 50290
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50215: LD_ADDR_VAR 0 4
50219: PUSH
50220: LD_INT 22
50222: PUSH
50223: LD_VAR 0 2
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PPUSH
50232: CALL_OW 69
50236: PUSH
50237: FOR_IN
50238: IFFALSE 50288
// begin un := UnitShoot ( i ) ;
50240: LD_ADDR_VAR 0 5
50244: PUSH
50245: LD_VAR 0 4
50249: PPUSH
50250: CALL_OW 504
50254: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50255: LD_VAR 0 5
50259: PPUSH
50260: CALL_OW 255
50264: PUSH
50265: LD_VAR 0 1
50269: EQUAL
50270: IFFALSE 50286
// begin result := un ;
50272: LD_ADDR_VAR 0 3
50276: PUSH
50277: LD_VAR 0 5
50281: ST_TO_ADDR
// exit ;
50282: POP
50283: POP
50284: GO 50290
// end ; end ;
50286: GO 50237
50288: POP
50289: POP
// end ;
50290: LD_VAR 0 3
50294: RET
// export function GetCargoBay ( units ) ; begin
50295: LD_INT 0
50297: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50298: LD_ADDR_VAR 0 2
50302: PUSH
50303: LD_VAR 0 1
50307: PPUSH
50308: LD_INT 2
50310: PUSH
50311: LD_INT 34
50313: PUSH
50314: LD_INT 12
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 34
50323: PUSH
50324: LD_INT 51
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 34
50333: PUSH
50334: LD_INT 32
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 34
50343: PUSH
50344: LD_INT 89
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: PPUSH
50358: CALL_OW 72
50362: ST_TO_ADDR
// end ;
50363: LD_VAR 0 2
50367: RET
// export function Negate ( value ) ; begin
50368: LD_INT 0
50370: PPUSH
// result := not value ;
50371: LD_ADDR_VAR 0 2
50375: PUSH
50376: LD_VAR 0 1
50380: NOT
50381: ST_TO_ADDR
// end ;
50382: LD_VAR 0 2
50386: RET
// export function Inc ( value ) ; begin
50387: LD_INT 0
50389: PPUSH
// result := value + 1 ;
50390: LD_ADDR_VAR 0 2
50394: PUSH
50395: LD_VAR 0 1
50399: PUSH
50400: LD_INT 1
50402: PLUS
50403: ST_TO_ADDR
// end ;
50404: LD_VAR 0 2
50408: RET
// export function Dec ( value ) ; begin
50409: LD_INT 0
50411: PPUSH
// result := value - 1 ;
50412: LD_ADDR_VAR 0 2
50416: PUSH
50417: LD_VAR 0 1
50421: PUSH
50422: LD_INT 1
50424: MINUS
50425: ST_TO_ADDR
// end ;
50426: LD_VAR 0 2
50430: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50431: LD_INT 0
50433: PPUSH
50434: PPUSH
50435: PPUSH
50436: PPUSH
50437: PPUSH
50438: PPUSH
50439: PPUSH
50440: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50441: LD_VAR 0 1
50445: PPUSH
50446: LD_VAR 0 2
50450: PPUSH
50451: CALL_OW 488
50455: NOT
50456: IFTRUE 50475
50458: PUSH
50459: LD_VAR 0 3
50463: PPUSH
50464: LD_VAR 0 4
50468: PPUSH
50469: CALL_OW 488
50473: NOT
50474: OR
50475: IFFALSE 50488
// begin result := - 1 ;
50477: LD_ADDR_VAR 0 5
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: ST_TO_ADDR
// exit ;
50486: GO 50723
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50488: LD_ADDR_VAR 0 12
50492: PUSH
50493: LD_VAR 0 1
50497: PPUSH
50498: LD_VAR 0 2
50502: PPUSH
50503: LD_VAR 0 3
50507: PPUSH
50508: LD_VAR 0 4
50512: PPUSH
50513: CALL 49559 0 4
50517: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50518: LD_ADDR_VAR 0 11
50522: PUSH
50523: LD_VAR 0 1
50527: PPUSH
50528: LD_VAR 0 2
50532: PPUSH
50533: LD_VAR 0 12
50537: PUSH
50538: LD_INT 1
50540: ARRAY
50541: PPUSH
50542: LD_VAR 0 12
50546: PUSH
50547: LD_INT 2
50549: ARRAY
50550: PPUSH
50551: CALL_OW 298
50555: ST_TO_ADDR
// distance := 9999 ;
50556: LD_ADDR_VAR 0 10
50560: PUSH
50561: LD_INT 9999
50563: ST_TO_ADDR
// for i := 0 to 5 do
50564: LD_ADDR_VAR 0 6
50568: PUSH
50569: DOUBLE
50570: LD_INT 0
50572: DEC
50573: ST_TO_ADDR
50574: LD_INT 5
50576: PUSH
50577: FOR_TO
50578: IFFALSE 50721
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50580: LD_ADDR_VAR 0 7
50584: PUSH
50585: LD_VAR 0 1
50589: PPUSH
50590: LD_VAR 0 6
50594: PPUSH
50595: LD_VAR 0 11
50599: PPUSH
50600: CALL_OW 272
50604: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
50605: LD_ADDR_VAR 0 8
50609: PUSH
50610: LD_VAR 0 2
50614: PPUSH
50615: LD_VAR 0 6
50619: PPUSH
50620: LD_VAR 0 11
50624: PPUSH
50625: CALL_OW 273
50629: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50630: LD_VAR 0 7
50634: PPUSH
50635: LD_VAR 0 8
50639: PPUSH
50640: CALL_OW 488
50644: NOT
50645: IFFALSE 50649
// continue ;
50647: GO 50577
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
50649: LD_ADDR_VAR 0 9
50653: PUSH
50654: LD_VAR 0 12
50658: PUSH
50659: LD_INT 1
50661: ARRAY
50662: PPUSH
50663: LD_VAR 0 12
50667: PUSH
50668: LD_INT 2
50670: ARRAY
50671: PPUSH
50672: LD_VAR 0 7
50676: PPUSH
50677: LD_VAR 0 8
50681: PPUSH
50682: CALL_OW 298
50686: ST_TO_ADDR
// if tmp < distance then
50687: LD_VAR 0 9
50691: PUSH
50692: LD_VAR 0 10
50696: LESS
50697: IFFALSE 50719
// begin result := i ;
50699: LD_ADDR_VAR 0 5
50703: PUSH
50704: LD_VAR 0 6
50708: ST_TO_ADDR
// distance := tmp ;
50709: LD_ADDR_VAR 0 10
50713: PUSH
50714: LD_VAR 0 9
50718: ST_TO_ADDR
// end ; end ;
50719: GO 50577
50721: POP
50722: POP
// end ;
50723: LD_VAR 0 5
50727: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50728: LD_INT 0
50730: PPUSH
50731: PPUSH
// if not driver or not IsInUnit ( driver ) then
50732: LD_VAR 0 1
50736: NOT
50737: IFTRUE 50751
50739: PUSH
50740: LD_VAR 0 1
50744: PPUSH
50745: CALL_OW 310
50749: NOT
50750: OR
50751: IFFALSE 50755
// exit ;
50753: GO 50845
// vehicle := IsInUnit ( driver ) ;
50755: LD_ADDR_VAR 0 3
50759: PUSH
50760: LD_VAR 0 1
50764: PPUSH
50765: CALL_OW 310
50769: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50770: LD_VAR 0 1
50774: PPUSH
50775: LD_STRING \
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: PUSH
50805: LD_STRING E
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: LD_VAR 0 3
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PPUSH
50841: CALL_OW 446
// end ;
50845: LD_VAR 0 2
50849: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50850: LD_INT 0
50852: PPUSH
50853: PPUSH
// if not driver or not IsInUnit ( driver ) then
50854: LD_VAR 0 1
50858: NOT
50859: IFTRUE 50873
50861: PUSH
50862: LD_VAR 0 1
50866: PPUSH
50867: CALL_OW 310
50871: NOT
50872: OR
50873: IFFALSE 50877
// exit ;
50875: GO 50967
// vehicle := IsInUnit ( driver ) ;
50877: LD_ADDR_VAR 0 3
50881: PUSH
50882: LD_VAR 0 1
50886: PPUSH
50887: CALL_OW 310
50891: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50892: LD_VAR 0 1
50896: PPUSH
50897: LD_STRING \
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: PUSH
50927: LD_STRING E
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_VAR 0 3
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PPUSH
50963: CALL_OW 447
// end ;
50967: LD_VAR 0 2
50971: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50972: LD_INT 0
50974: PPUSH
50975: PPUSH
50976: PPUSH
// tmp := [ ] ;
50977: LD_ADDR_VAR 0 5
50981: PUSH
50982: EMPTY
50983: ST_TO_ADDR
// for i in units do
50984: LD_ADDR_VAR 0 4
50988: PUSH
50989: LD_VAR 0 1
50993: PUSH
50994: FOR_IN
50995: IFFALSE 51033
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50997: LD_ADDR_VAR 0 5
51001: PUSH
51002: LD_VAR 0 5
51006: PPUSH
51007: LD_VAR 0 5
51011: PUSH
51012: LD_INT 1
51014: PLUS
51015: PPUSH
51016: LD_VAR 0 4
51020: PPUSH
51021: CALL_OW 256
51025: PPUSH
51026: CALL_OW 2
51030: ST_TO_ADDR
51031: GO 50994
51033: POP
51034: POP
// if not tmp then
51035: LD_VAR 0 5
51039: NOT
51040: IFFALSE 51044
// exit ;
51042: GO 51092
// if asc then
51044: LD_VAR 0 2
51048: IFFALSE 51072
// result := SortListByListAsc ( units , tmp ) else
51050: LD_ADDR_VAR 0 3
51054: PUSH
51055: LD_VAR 0 1
51059: PPUSH
51060: LD_VAR 0 5
51064: PPUSH
51065: CALL_OW 76
51069: ST_TO_ADDR
51070: GO 51092
// result := SortListByListDesc ( units , tmp ) ;
51072: LD_ADDR_VAR 0 3
51076: PUSH
51077: LD_VAR 0 1
51081: PPUSH
51082: LD_VAR 0 5
51086: PPUSH
51087: CALL_OW 77
51091: ST_TO_ADDR
// end ;
51092: LD_VAR 0 3
51096: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51097: LD_INT 0
51099: PPUSH
51100: PPUSH
// task := GetTaskList ( mech ) ;
51101: LD_ADDR_VAR 0 4
51105: PUSH
51106: LD_VAR 0 1
51110: PPUSH
51111: CALL_OW 437
51115: ST_TO_ADDR
// if not task then
51116: LD_VAR 0 4
51120: NOT
51121: IFFALSE 51125
// exit ;
51123: GO 51169
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51125: LD_ADDR_VAR 0 3
51129: PUSH
51130: LD_VAR 0 4
51134: PUSH
51135: LD_INT 1
51137: ARRAY
51138: PUSH
51139: LD_INT 1
51141: ARRAY
51142: PUSH
51143: LD_STRING r
51145: EQUAL
51146: IFFALSE 51168
51148: PUSH
51149: LD_VAR 0 4
51153: PUSH
51154: LD_INT 1
51156: ARRAY
51157: PUSH
51158: LD_INT 4
51160: ARRAY
51161: PUSH
51162: LD_VAR 0 2
51166: EQUAL
51167: AND
51168: ST_TO_ADDR
// end ;
51169: LD_VAR 0 3
51173: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51174: LD_INT 0
51176: PPUSH
// SetDir ( unit , d ) ;
51177: LD_VAR 0 1
51181: PPUSH
51182: LD_VAR 0 4
51186: PPUSH
51187: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51191: LD_ADDR_VAR 0 6
51195: PUSH
51196: LD_VAR 0 1
51200: PPUSH
51201: LD_VAR 0 2
51205: PPUSH
51206: LD_VAR 0 3
51210: PPUSH
51211: LD_VAR 0 5
51215: PPUSH
51216: CALL_OW 48
51220: ST_TO_ADDR
// end ;
51221: LD_VAR 0 6
51225: RET
// export function ToNaturalNumber ( number ) ; begin
51226: LD_INT 0
51228: PPUSH
// result := number div 1 ;
51229: LD_ADDR_VAR 0 2
51233: PUSH
51234: LD_VAR 0 1
51238: PUSH
51239: LD_INT 1
51241: DIV
51242: ST_TO_ADDR
// if number < 0 then
51243: LD_VAR 0 1
51247: PUSH
51248: LD_INT 0
51250: LESS
51251: IFFALSE 51261
// result := 0 ;
51253: LD_ADDR_VAR 0 2
51257: PUSH
51258: LD_INT 0
51260: ST_TO_ADDR
// end ;
51261: LD_VAR 0 2
51265: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51266: LD_INT 0
51268: PPUSH
51269: PPUSH
51270: PPUSH
// if not buildings then
51271: LD_VAR 0 1
51275: NOT
51276: IFFALSE 51280
// exit ;
51278: GO 51395
// tmp := [ ] ;
51280: LD_ADDR_VAR 0 5
51284: PUSH
51285: EMPTY
51286: ST_TO_ADDR
// for b in buildings do
51287: LD_ADDR_VAR 0 4
51291: PUSH
51292: LD_VAR 0 1
51296: PUSH
51297: FOR_IN
51298: IFFALSE 51336
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51300: LD_ADDR_VAR 0 5
51304: PUSH
51305: LD_VAR 0 5
51309: PPUSH
51310: LD_VAR 0 5
51314: PUSH
51315: LD_INT 1
51317: PLUS
51318: PPUSH
51319: LD_VAR 0 4
51323: PPUSH
51324: CALL_OW 266
51328: PPUSH
51329: CALL_OW 1
51333: ST_TO_ADDR
51334: GO 51297
51336: POP
51337: POP
// if not tmp then
51338: LD_VAR 0 5
51342: NOT
51343: IFFALSE 51347
// exit ;
51345: GO 51395
// if asc then
51347: LD_VAR 0 2
51351: IFFALSE 51375
// result := SortListByListAsc ( buildings , tmp ) else
51353: LD_ADDR_VAR 0 3
51357: PUSH
51358: LD_VAR 0 1
51362: PPUSH
51363: LD_VAR 0 5
51367: PPUSH
51368: CALL_OW 76
51372: ST_TO_ADDR
51373: GO 51395
// result := SortListByListDesc ( buildings , tmp ) ;
51375: LD_ADDR_VAR 0 3
51379: PUSH
51380: LD_VAR 0 1
51384: PPUSH
51385: LD_VAR 0 5
51389: PPUSH
51390: CALL_OW 77
51394: ST_TO_ADDR
// end ;
51395: LD_VAR 0 3
51399: RET
// export function SortByClass ( units , class ) ; var un ; begin
51400: LD_INT 0
51402: PPUSH
51403: PPUSH
// if not units or not class then
51404: LD_VAR 0 1
51408: NOT
51409: IFTRUE 51418
51411: PUSH
51412: LD_VAR 0 2
51416: NOT
51417: OR
51418: IFFALSE 51422
// exit ;
51420: GO 51517
// result := [ ] ;
51422: LD_ADDR_VAR 0 3
51426: PUSH
51427: EMPTY
51428: ST_TO_ADDR
// for un in units do
51429: LD_ADDR_VAR 0 4
51433: PUSH
51434: LD_VAR 0 1
51438: PUSH
51439: FOR_IN
51440: IFFALSE 51515
// if GetClass ( un ) = class then
51442: LD_VAR 0 4
51446: PPUSH
51447: CALL_OW 257
51451: PUSH
51452: LD_VAR 0 2
51456: EQUAL
51457: IFFALSE 51484
// result := Insert ( result , 1 , un ) else
51459: LD_ADDR_VAR 0 3
51463: PUSH
51464: LD_VAR 0 3
51468: PPUSH
51469: LD_INT 1
51471: PPUSH
51472: LD_VAR 0 4
51476: PPUSH
51477: CALL_OW 2
51481: ST_TO_ADDR
51482: GO 51513
// result := Replace ( result , result + 1 , un ) ;
51484: LD_ADDR_VAR 0 3
51488: PUSH
51489: LD_VAR 0 3
51493: PPUSH
51494: LD_VAR 0 3
51498: PUSH
51499: LD_INT 1
51501: PLUS
51502: PPUSH
51503: LD_VAR 0 4
51507: PPUSH
51508: CALL_OW 1
51512: ST_TO_ADDR
51513: GO 51439
51515: POP
51516: POP
// end ;
51517: LD_VAR 0 3
51521: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51522: LD_INT 0
51524: PPUSH
51525: PPUSH
51526: PPUSH
51527: PPUSH
51528: PPUSH
51529: PPUSH
51530: PPUSH
// result := [ ] ;
51531: LD_ADDR_VAR 0 4
51535: PUSH
51536: EMPTY
51537: ST_TO_ADDR
// if x - r < 0 then
51538: LD_VAR 0 1
51542: PUSH
51543: LD_VAR 0 3
51547: MINUS
51548: PUSH
51549: LD_INT 0
51551: LESS
51552: IFFALSE 51564
// min_x := 0 else
51554: LD_ADDR_VAR 0 8
51558: PUSH
51559: LD_INT 0
51561: ST_TO_ADDR
51562: GO 51580
// min_x := x - r ;
51564: LD_ADDR_VAR 0 8
51568: PUSH
51569: LD_VAR 0 1
51573: PUSH
51574: LD_VAR 0 3
51578: MINUS
51579: ST_TO_ADDR
// if y - r < 0 then
51580: LD_VAR 0 2
51584: PUSH
51585: LD_VAR 0 3
51589: MINUS
51590: PUSH
51591: LD_INT 0
51593: LESS
51594: IFFALSE 51606
// min_y := 0 else
51596: LD_ADDR_VAR 0 7
51600: PUSH
51601: LD_INT 0
51603: ST_TO_ADDR
51604: GO 51622
// min_y := y - r ;
51606: LD_ADDR_VAR 0 7
51610: PUSH
51611: LD_VAR 0 2
51615: PUSH
51616: LD_VAR 0 3
51620: MINUS
51621: ST_TO_ADDR
// max_x := x + r ;
51622: LD_ADDR_VAR 0 9
51626: PUSH
51627: LD_VAR 0 1
51631: PUSH
51632: LD_VAR 0 3
51636: PLUS
51637: ST_TO_ADDR
// max_y := y + r ;
51638: LD_ADDR_VAR 0 10
51642: PUSH
51643: LD_VAR 0 2
51647: PUSH
51648: LD_VAR 0 3
51652: PLUS
51653: ST_TO_ADDR
// for _x = min_x to max_x do
51654: LD_ADDR_VAR 0 5
51658: PUSH
51659: DOUBLE
51660: LD_VAR 0 8
51664: DEC
51665: ST_TO_ADDR
51666: LD_VAR 0 9
51670: PUSH
51671: FOR_TO
51672: IFFALSE 51773
// for _y = min_y to max_y do
51674: LD_ADDR_VAR 0 6
51678: PUSH
51679: DOUBLE
51680: LD_VAR 0 7
51684: DEC
51685: ST_TO_ADDR
51686: LD_VAR 0 10
51690: PUSH
51691: FOR_TO
51692: IFFALSE 51769
// begin if not ValidHex ( _x , _y ) then
51694: LD_VAR 0 5
51698: PPUSH
51699: LD_VAR 0 6
51703: PPUSH
51704: CALL_OW 488
51708: NOT
51709: IFFALSE 51713
// continue ;
51711: GO 51691
// if GetResourceTypeXY ( _x , _y ) then
51713: LD_VAR 0 5
51717: PPUSH
51718: LD_VAR 0 6
51722: PPUSH
51723: CALL_OW 283
51727: IFFALSE 51767
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51729: LD_ADDR_VAR 0 4
51733: PUSH
51734: LD_VAR 0 4
51738: PPUSH
51739: LD_VAR 0 4
51743: PUSH
51744: LD_INT 1
51746: PLUS
51747: PPUSH
51748: LD_VAR 0 5
51752: PUSH
51753: LD_VAR 0 6
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PPUSH
51762: CALL_OW 1
51766: ST_TO_ADDR
// end ;
51767: GO 51691
51769: POP
51770: POP
51771: GO 51671
51773: POP
51774: POP
// end ;
51775: LD_VAR 0 4
51779: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
51780: LD_INT 0
51782: PPUSH
51783: PPUSH
51784: PPUSH
51785: PPUSH
51786: PPUSH
51787: PPUSH
51788: PPUSH
51789: PPUSH
// if not units then
51790: LD_VAR 0 1
51794: NOT
51795: IFFALSE 51799
// exit ;
51797: GO 52331
// result := UnitFilter ( units , [ f_ok ] ) ;
51799: LD_ADDR_VAR 0 3
51803: PUSH
51804: LD_VAR 0 1
51808: PPUSH
51809: LD_INT 50
51811: PUSH
51812: EMPTY
51813: LIST
51814: PPUSH
51815: CALL_OW 72
51819: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
51820: LD_ADDR_VAR 0 8
51824: PUSH
51825: LD_VAR 0 1
51829: PUSH
51830: LD_INT 1
51832: ARRAY
51833: PPUSH
51834: CALL_OW 255
51838: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51839: LD_ADDR_VAR 0 10
51843: PUSH
51844: LD_INT 29
51846: PUSH
51847: LD_INT 91
51849: PUSH
51850: LD_INT 49
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: LIST
51857: ST_TO_ADDR
// if not result then
51858: LD_VAR 0 3
51862: NOT
51863: IFFALSE 51867
// exit ;
51865: GO 52331
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51867: LD_ADDR_VAR 0 5
51871: PUSH
51872: LD_INT 81
51874: PUSH
51875: LD_VAR 0 8
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PPUSH
51884: CALL_OW 69
51888: ST_TO_ADDR
// for i in result do
51889: LD_ADDR_VAR 0 4
51893: PUSH
51894: LD_VAR 0 3
51898: PUSH
51899: FOR_IN
51900: IFFALSE 52329
// begin tag := GetTag ( i ) + 1 ;
51902: LD_ADDR_VAR 0 9
51906: PUSH
51907: LD_VAR 0 4
51911: PPUSH
51912: CALL_OW 110
51916: PUSH
51917: LD_INT 1
51919: PLUS
51920: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51921: LD_ADDR_VAR 0 7
51925: PUSH
51926: LD_VAR 0 4
51930: PPUSH
51931: CALL_OW 250
51935: PPUSH
51936: LD_VAR 0 4
51940: PPUSH
51941: CALL_OW 251
51945: PPUSH
51946: LD_INT 4
51948: PPUSH
51949: CALL 51522 0 3
51953: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51954: LD_VAR 0 4
51958: PPUSH
51959: CALL_OW 247
51963: PUSH
51964: LD_INT 2
51966: EQUAL
51967: IFFALSE 51979
51969: PUSH
51970: LD_VAR 0 7
51974: PUSH
51975: LD_INT 2
51977: GREATER
51978: AND
51979: IFFALSE 51999
51981: PUSH
51982: LD_VAR 0 4
51986: PPUSH
51987: CALL_OW 264
51991: PUSH
51992: LD_VAR 0 10
51996: IN
51997: NOT
51998: AND
51999: IFFALSE 52038
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52001: LD_VAR 0 4
52005: PPUSH
52006: LD_VAR 0 7
52010: PUSH
52011: LD_INT 1
52013: ARRAY
52014: PUSH
52015: LD_INT 1
52017: ARRAY
52018: PPUSH
52019: LD_VAR 0 7
52023: PUSH
52024: LD_INT 1
52026: ARRAY
52027: PUSH
52028: LD_INT 2
52030: ARRAY
52031: PPUSH
52032: CALL_OW 116
52036: GO 52327
// if path > tag then
52038: LD_VAR 0 2
52042: PUSH
52043: LD_VAR 0 9
52047: GREATER
52048: IFFALSE 52256
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
52050: LD_ADDR_VAR 0 6
52054: PUSH
52055: LD_VAR 0 5
52059: PPUSH
52060: LD_INT 91
52062: PUSH
52063: LD_VAR 0 4
52067: PUSH
52068: LD_INT 8
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: LIST
52075: PPUSH
52076: CALL_OW 72
52080: ST_TO_ADDR
// if nearEnemy then
52081: LD_VAR 0 6
52085: IFFALSE 52154
// begin if GetWeapon ( i ) = ru_time_lapser then
52087: LD_VAR 0 4
52091: PPUSH
52092: CALL_OW 264
52096: PUSH
52097: LD_INT 49
52099: EQUAL
52100: IFFALSE 52128
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52102: LD_VAR 0 4
52106: PPUSH
52107: LD_VAR 0 6
52111: PPUSH
52112: LD_VAR 0 4
52116: PPUSH
52117: CALL_OW 74
52121: PPUSH
52122: CALL_OW 112
52126: GO 52152
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52128: LD_VAR 0 4
52132: PPUSH
52133: LD_VAR 0 6
52137: PPUSH
52138: LD_VAR 0 4
52142: PPUSH
52143: CALL_OW 74
52147: PPUSH
52148: CALL 53412 0 2
// end else
52152: GO 52254
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52154: LD_VAR 0 4
52158: PPUSH
52159: LD_VAR 0 2
52163: PUSH
52164: LD_VAR 0 9
52168: ARRAY
52169: PUSH
52170: LD_INT 1
52172: ARRAY
52173: PPUSH
52174: LD_VAR 0 2
52178: PUSH
52179: LD_VAR 0 9
52183: ARRAY
52184: PUSH
52185: LD_INT 2
52187: ARRAY
52188: PPUSH
52189: CALL_OW 297
52193: PUSH
52194: LD_INT 6
52196: GREATER
52197: IFFALSE 52240
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52199: LD_VAR 0 4
52203: PPUSH
52204: LD_VAR 0 2
52208: PUSH
52209: LD_VAR 0 9
52213: ARRAY
52214: PUSH
52215: LD_INT 1
52217: ARRAY
52218: PPUSH
52219: LD_VAR 0 2
52223: PUSH
52224: LD_VAR 0 9
52228: ARRAY
52229: PUSH
52230: LD_INT 2
52232: ARRAY
52233: PPUSH
52234: CALL_OW 114
52238: GO 52254
// SetTag ( i , tag ) ;
52240: LD_VAR 0 4
52244: PPUSH
52245: LD_VAR 0 9
52249: PPUSH
52250: CALL_OW 109
// end else
52254: GO 52327
// if enemy then
52256: LD_VAR 0 5
52260: IFFALSE 52327
// begin if GetWeapon ( i ) = ru_time_lapser then
52262: LD_VAR 0 4
52266: PPUSH
52267: CALL_OW 264
52271: PUSH
52272: LD_INT 49
52274: EQUAL
52275: IFFALSE 52303
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52277: LD_VAR 0 4
52281: PPUSH
52282: LD_VAR 0 5
52286: PPUSH
52287: LD_VAR 0 4
52291: PPUSH
52292: CALL_OW 74
52296: PPUSH
52297: CALL_OW 112
52301: GO 52327
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52303: LD_VAR 0 4
52307: PPUSH
52308: LD_VAR 0 5
52312: PPUSH
52313: LD_VAR 0 4
52317: PPUSH
52318: CALL_OW 74
52322: PPUSH
52323: CALL 53412 0 2
// end ; end ;
52327: GO 51899
52329: POP
52330: POP
// end ;
52331: LD_VAR 0 3
52335: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52336: LD_INT 0
52338: PPUSH
52339: PPUSH
52340: PPUSH
// if not unit or IsInUnit ( unit ) then
52341: LD_VAR 0 1
52345: NOT
52346: IFTRUE 52359
52348: PUSH
52349: LD_VAR 0 1
52353: PPUSH
52354: CALL_OW 310
52358: OR
52359: IFFALSE 52363
// exit ;
52361: GO 52454
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52363: LD_ADDR_VAR 0 4
52367: PUSH
52368: LD_VAR 0 1
52372: PPUSH
52373: CALL_OW 250
52377: PPUSH
52378: LD_VAR 0 2
52382: PPUSH
52383: LD_INT 1
52385: PPUSH
52386: CALL_OW 272
52390: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52391: LD_ADDR_VAR 0 5
52395: PUSH
52396: LD_VAR 0 1
52400: PPUSH
52401: CALL_OW 251
52405: PPUSH
52406: LD_VAR 0 2
52410: PPUSH
52411: LD_INT 1
52413: PPUSH
52414: CALL_OW 273
52418: ST_TO_ADDR
// if ValidHex ( x , y ) then
52419: LD_VAR 0 4
52423: PPUSH
52424: LD_VAR 0 5
52428: PPUSH
52429: CALL_OW 488
52433: IFFALSE 52454
// ComTurnXY ( unit , x , y ) ;
52435: LD_VAR 0 1
52439: PPUSH
52440: LD_VAR 0 4
52444: PPUSH
52445: LD_VAR 0 5
52449: PPUSH
52450: CALL_OW 118
// end ;
52454: LD_VAR 0 3
52458: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52459: LD_INT 0
52461: PPUSH
52462: PPUSH
// result := false ;
52463: LD_ADDR_VAR 0 3
52467: PUSH
52468: LD_INT 0
52470: ST_TO_ADDR
// if not units then
52471: LD_VAR 0 2
52475: NOT
52476: IFFALSE 52480
// exit ;
52478: GO 52525
// for i in units do
52480: LD_ADDR_VAR 0 4
52484: PUSH
52485: LD_VAR 0 2
52489: PUSH
52490: FOR_IN
52491: IFFALSE 52523
// if See ( side , i ) then
52493: LD_VAR 0 1
52497: PPUSH
52498: LD_VAR 0 4
52502: PPUSH
52503: CALL_OW 292
52507: IFFALSE 52521
// begin result := true ;
52509: LD_ADDR_VAR 0 3
52513: PUSH
52514: LD_INT 1
52516: ST_TO_ADDR
// exit ;
52517: POP
52518: POP
52519: GO 52525
// end ;
52521: GO 52490
52523: POP
52524: POP
// end ;
52525: LD_VAR 0 3
52529: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52530: LD_INT 0
52532: PPUSH
52533: PPUSH
52534: PPUSH
52535: PPUSH
// if not unit or not points then
52536: LD_VAR 0 1
52540: NOT
52541: IFTRUE 52550
52543: PUSH
52544: LD_VAR 0 2
52548: NOT
52549: OR
52550: IFFALSE 52554
// exit ;
52552: GO 52644
// dist := 99999 ;
52554: LD_ADDR_VAR 0 5
52558: PUSH
52559: LD_INT 99999
52561: ST_TO_ADDR
// for i in points do
52562: LD_ADDR_VAR 0 4
52566: PUSH
52567: LD_VAR 0 2
52571: PUSH
52572: FOR_IN
52573: IFFALSE 52642
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52575: LD_ADDR_VAR 0 6
52579: PUSH
52580: LD_VAR 0 1
52584: PPUSH
52585: LD_VAR 0 4
52589: PUSH
52590: LD_INT 1
52592: ARRAY
52593: PPUSH
52594: LD_VAR 0 4
52598: PUSH
52599: LD_INT 2
52601: ARRAY
52602: PPUSH
52603: CALL_OW 297
52607: ST_TO_ADDR
// if tmpDist < dist then
52608: LD_VAR 0 6
52612: PUSH
52613: LD_VAR 0 5
52617: LESS
52618: IFFALSE 52640
// begin result := i ;
52620: LD_ADDR_VAR 0 3
52624: PUSH
52625: LD_VAR 0 4
52629: ST_TO_ADDR
// dist := tmpDist ;
52630: LD_ADDR_VAR 0 5
52634: PUSH
52635: LD_VAR 0 6
52639: ST_TO_ADDR
// end ; end ;
52640: GO 52572
52642: POP
52643: POP
// end ;
52644: LD_VAR 0 3
52648: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52649: LD_INT 0
52651: PPUSH
// uc_side := side ;
52652: LD_ADDR_OWVAR 20
52656: PUSH
52657: LD_VAR 0 1
52661: ST_TO_ADDR
// uc_nation := 3 ;
52662: LD_ADDR_OWVAR 21
52666: PUSH
52667: LD_INT 3
52669: ST_TO_ADDR
// vc_chassis := 25 ;
52670: LD_ADDR_OWVAR 37
52674: PUSH
52675: LD_INT 25
52677: ST_TO_ADDR
// vc_engine := engine_siberite ;
52678: LD_ADDR_OWVAR 39
52682: PUSH
52683: LD_INT 3
52685: ST_TO_ADDR
// vc_control := control_computer ;
52686: LD_ADDR_OWVAR 38
52690: PUSH
52691: LD_INT 3
52693: ST_TO_ADDR
// vc_weapon := 59 ;
52694: LD_ADDR_OWVAR 40
52698: PUSH
52699: LD_INT 59
52701: ST_TO_ADDR
// result := CreateVehicle ;
52702: LD_ADDR_VAR 0 5
52706: PUSH
52707: CALL_OW 45
52711: ST_TO_ADDR
// SetDir ( result , d ) ;
52712: LD_VAR 0 5
52716: PPUSH
52717: LD_VAR 0 4
52721: PPUSH
52722: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
52726: LD_VAR 0 5
52730: PPUSH
52731: LD_VAR 0 2
52735: PPUSH
52736: LD_VAR 0 3
52740: PPUSH
52741: LD_INT 0
52743: PPUSH
52744: CALL_OW 48
// end ;
52748: LD_VAR 0 5
52752: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
52753: LD_INT 0
52755: PPUSH
52756: PPUSH
52757: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
52758: LD_ADDR_VAR 0 2
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
52781: LD_VAR 0 1
52785: NOT
52786: IFTRUE 52819
52788: PUSH
52789: LD_VAR 0 1
52793: PPUSH
52794: CALL_OW 264
52798: PUSH
52799: LD_INT 12
52801: PUSH
52802: LD_INT 51
52804: PUSH
52805: LD_INT 32
52807: PUSH
52808: LD_INT 89
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: IN
52817: NOT
52818: OR
52819: IFFALSE 52823
// exit ;
52821: GO 52921
// for i := 1 to 3 do
52823: LD_ADDR_VAR 0 3
52827: PUSH
52828: DOUBLE
52829: LD_INT 1
52831: DEC
52832: ST_TO_ADDR
52833: LD_INT 3
52835: PUSH
52836: FOR_TO
52837: IFFALSE 52919
// begin tmp := GetCargo ( cargo , i ) ;
52839: LD_ADDR_VAR 0 4
52843: PUSH
52844: LD_VAR 0 1
52848: PPUSH
52849: LD_VAR 0 3
52853: PPUSH
52854: CALL_OW 289
52858: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52859: LD_ADDR_VAR 0 2
52863: PUSH
52864: LD_VAR 0 2
52868: PPUSH
52869: LD_VAR 0 3
52873: PPUSH
52874: LD_VAR 0 4
52878: PPUSH
52879: CALL_OW 1
52883: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52884: LD_ADDR_VAR 0 2
52888: PUSH
52889: LD_VAR 0 2
52893: PPUSH
52894: LD_INT 4
52896: PPUSH
52897: LD_VAR 0 2
52901: PUSH
52902: LD_INT 4
52904: ARRAY
52905: PUSH
52906: LD_VAR 0 4
52910: PLUS
52911: PPUSH
52912: CALL_OW 1
52916: ST_TO_ADDR
// end ;
52917: GO 52836
52919: POP
52920: POP
// end ;
52921: LD_VAR 0 2
52925: RET
// export function Length ( array ) ; begin
52926: LD_INT 0
52928: PPUSH
// result := array + 0 ;
52929: LD_ADDR_VAR 0 2
52933: PUSH
52934: LD_VAR 0 1
52938: PUSH
52939: LD_INT 0
52941: PLUS
52942: ST_TO_ADDR
// end ;
52943: LD_VAR 0 2
52947: RET
// export function PrepareArray ( array ) ; begin
52948: LD_INT 0
52950: PPUSH
// result := array diff 0 ;
52951: LD_ADDR_VAR 0 2
52955: PUSH
52956: LD_VAR 0 1
52960: PUSH
52961: LD_INT 0
52963: DIFF
52964: ST_TO_ADDR
// if not result [ 1 ] then
52965: LD_VAR 0 2
52969: PUSH
52970: LD_INT 1
52972: ARRAY
52973: NOT
52974: IFFALSE 52994
// result := Delete ( result , 1 ) ;
52976: LD_ADDR_VAR 0 2
52980: PUSH
52981: LD_VAR 0 2
52985: PPUSH
52986: LD_INT 1
52988: PPUSH
52989: CALL_OW 3
52993: ST_TO_ADDR
// end ;
52994: LD_VAR 0 2
52998: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52999: LD_INT 0
53001: PPUSH
53002: PPUSH
53003: PPUSH
53004: PPUSH
// sibRocketRange := 25 ;
53005: LD_ADDR_VAR 0 6
53009: PUSH
53010: LD_INT 25
53012: ST_TO_ADDR
// result := false ;
53013: LD_ADDR_VAR 0 4
53017: PUSH
53018: LD_INT 0
53020: ST_TO_ADDR
// for i := 0 to 5 do
53021: LD_ADDR_VAR 0 5
53025: PUSH
53026: DOUBLE
53027: LD_INT 0
53029: DEC
53030: ST_TO_ADDR
53031: LD_INT 5
53033: PUSH
53034: FOR_TO
53035: IFFALSE 53102
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
53037: LD_VAR 0 1
53041: PPUSH
53042: LD_VAR 0 5
53046: PPUSH
53047: LD_VAR 0 6
53051: PPUSH
53052: CALL_OW 272
53056: PPUSH
53057: LD_VAR 0 2
53061: PPUSH
53062: LD_VAR 0 5
53066: PPUSH
53067: LD_VAR 0 6
53071: PPUSH
53072: CALL_OW 273
53076: PPUSH
53077: LD_VAR 0 3
53081: PPUSH
53082: CALL_OW 309
53086: IFFALSE 53100
// begin result := true ;
53088: LD_ADDR_VAR 0 4
53092: PUSH
53093: LD_INT 1
53095: ST_TO_ADDR
// exit ;
53096: POP
53097: POP
53098: GO 53104
// end ;
53100: GO 53034
53102: POP
53103: POP
// end ;
53104: LD_VAR 0 4
53108: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
53109: LD_INT 0
53111: PPUSH
53112: PPUSH
53113: PPUSH
// if btype = b_depot then
53114: LD_VAR 0 2
53118: PUSH
53119: LD_INT 0
53121: EQUAL
53122: IFFALSE 53134
// begin result := true ;
53124: LD_ADDR_VAR 0 3
53128: PUSH
53129: LD_INT 1
53131: ST_TO_ADDR
// exit ;
53132: GO 53254
// end ; pom := GetBase ( depot ) ;
53134: LD_ADDR_VAR 0 4
53138: PUSH
53139: LD_VAR 0 1
53143: PPUSH
53144: CALL_OW 274
53148: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53149: LD_ADDR_VAR 0 5
53153: PUSH
53154: LD_VAR 0 2
53158: PPUSH
53159: LD_VAR 0 1
53163: PPUSH
53164: CALL_OW 248
53168: PPUSH
53169: CALL_OW 450
53173: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53174: LD_ADDR_VAR 0 3
53178: PUSH
53179: LD_VAR 0 4
53183: PPUSH
53184: LD_INT 1
53186: PPUSH
53187: CALL_OW 275
53191: PUSH
53192: LD_VAR 0 5
53196: PUSH
53197: LD_INT 1
53199: ARRAY
53200: GREATEREQUAL
53201: IFFALSE 53227
53203: PUSH
53204: LD_VAR 0 4
53208: PPUSH
53209: LD_INT 2
53211: PPUSH
53212: CALL_OW 275
53216: PUSH
53217: LD_VAR 0 5
53221: PUSH
53222: LD_INT 2
53224: ARRAY
53225: GREATEREQUAL
53226: AND
53227: IFFALSE 53253
53229: PUSH
53230: LD_VAR 0 4
53234: PPUSH
53235: LD_INT 3
53237: PPUSH
53238: CALL_OW 275
53242: PUSH
53243: LD_VAR 0 5
53247: PUSH
53248: LD_INT 3
53250: ARRAY
53251: GREATEREQUAL
53252: AND
53253: ST_TO_ADDR
// end ;
53254: LD_VAR 0 3
53258: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53259: LD_INT 0
53261: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53262: LD_VAR 0 1
53266: PPUSH
53267: LD_VAR 0 2
53271: PPUSH
53272: LD_INT 0
53274: PPUSH
53275: LD_INT 0
53277: PPUSH
53278: LD_INT 1
53280: PPUSH
53281: LD_INT 0
53283: PPUSH
53284: CALL_OW 587
// end ;
53288: LD_VAR 0 3
53292: RET
// export function CenterOnNow ( unit ) ; begin
53293: LD_INT 0
53295: PPUSH
// result := IsInUnit ( unit ) ;
53296: LD_ADDR_VAR 0 2
53300: PUSH
53301: LD_VAR 0 1
53305: PPUSH
53306: CALL_OW 310
53310: ST_TO_ADDR
// if not result then
53311: LD_VAR 0 2
53315: NOT
53316: IFFALSE 53328
// result := unit ;
53318: LD_ADDR_VAR 0 2
53322: PUSH
53323: LD_VAR 0 1
53327: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53328: LD_VAR 0 1
53332: PPUSH
53333: CALL_OW 87
// end ;
53337: LD_VAR 0 2
53341: RET
// export function ComMoveHex ( unit , hex ) ; begin
53342: LD_INT 0
53344: PPUSH
// if not hex then
53345: LD_VAR 0 2
53349: NOT
53350: IFFALSE 53354
// exit ;
53352: GO 53407
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53354: LD_VAR 0 2
53358: PUSH
53359: LD_INT 1
53361: ARRAY
53362: PPUSH
53363: LD_VAR 0 2
53367: PUSH
53368: LD_INT 2
53370: ARRAY
53371: PPUSH
53372: CALL_OW 428
53376: IFFALSE 53380
// exit ;
53378: GO 53407
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53380: LD_VAR 0 1
53384: PPUSH
53385: LD_VAR 0 2
53389: PUSH
53390: LD_INT 1
53392: ARRAY
53393: PPUSH
53394: LD_VAR 0 2
53398: PUSH
53399: LD_INT 2
53401: ARRAY
53402: PPUSH
53403: CALL_OW 111
// end ;
53407: LD_VAR 0 3
53411: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53412: LD_INT 0
53414: PPUSH
53415: PPUSH
53416: PPUSH
// if not unit or not enemy then
53417: LD_VAR 0 1
53421: NOT
53422: IFTRUE 53431
53424: PUSH
53425: LD_VAR 0 2
53429: NOT
53430: OR
53431: IFFALSE 53435
// exit ;
53433: GO 53561
// x := GetX ( enemy ) ;
53435: LD_ADDR_VAR 0 4
53439: PUSH
53440: LD_VAR 0 2
53444: PPUSH
53445: CALL_OW 250
53449: ST_TO_ADDR
// y := GetY ( enemy ) ;
53450: LD_ADDR_VAR 0 5
53454: PUSH
53455: LD_VAR 0 2
53459: PPUSH
53460: CALL_OW 251
53464: ST_TO_ADDR
// if ValidHex ( x , y ) then
53465: LD_VAR 0 4
53469: PPUSH
53470: LD_VAR 0 5
53474: PPUSH
53475: CALL_OW 488
53479: IFFALSE 53561
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
53481: LD_VAR 0 2
53485: PPUSH
53486: CALL_OW 247
53490: PUSH
53491: LD_INT 3
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: IN
53501: IFTRUE 53524
53503: PUSH
53504: LD_VAR 0 1
53508: PPUSH
53509: CALL_OW 255
53513: PPUSH
53514: LD_VAR 0 2
53518: PPUSH
53519: CALL_OW 292
53523: OR
53524: IFFALSE 53542
// ComAttackUnit ( unit , enemy ) else
53526: LD_VAR 0 1
53530: PPUSH
53531: LD_VAR 0 2
53535: PPUSH
53536: CALL_OW 115
53540: GO 53561
// ComAgressiveMove ( unit , x , y ) ;
53542: LD_VAR 0 1
53546: PPUSH
53547: LD_VAR 0 4
53551: PPUSH
53552: LD_VAR 0 5
53556: PPUSH
53557: CALL_OW 114
// end ;
53561: LD_VAR 0 3
53565: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
53566: LD_INT 0
53568: PPUSH
53569: PPUSH
53570: PPUSH
// list := AreaToList ( area , 0 ) ;
53571: LD_ADDR_VAR 0 5
53575: PUSH
53576: LD_VAR 0 1
53580: PPUSH
53581: LD_INT 0
53583: PPUSH
53584: CALL_OW 517
53588: ST_TO_ADDR
// if not list then
53589: LD_VAR 0 5
53593: NOT
53594: IFFALSE 53598
// exit ;
53596: GO 53728
// if all then
53598: LD_VAR 0 2
53602: IFFALSE 53690
// begin for i := 1 to list [ 1 ] do
53604: LD_ADDR_VAR 0 4
53608: PUSH
53609: DOUBLE
53610: LD_INT 1
53612: DEC
53613: ST_TO_ADDR
53614: LD_VAR 0 5
53618: PUSH
53619: LD_INT 1
53621: ARRAY
53622: PUSH
53623: FOR_TO
53624: IFFALSE 53686
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
53626: LD_ADDR_VAR 0 3
53630: PUSH
53631: LD_VAR 0 3
53635: PPUSH
53636: LD_VAR 0 3
53640: PUSH
53641: LD_INT 1
53643: PLUS
53644: PPUSH
53645: LD_VAR 0 5
53649: PUSH
53650: LD_INT 1
53652: ARRAY
53653: PUSH
53654: LD_VAR 0 4
53658: ARRAY
53659: PUSH
53660: LD_VAR 0 5
53664: PUSH
53665: LD_INT 2
53667: ARRAY
53668: PUSH
53669: LD_VAR 0 4
53673: ARRAY
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PPUSH
53679: CALL_OW 1
53683: ST_TO_ADDR
53684: GO 53623
53686: POP
53687: POP
// exit ;
53688: GO 53728
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
53690: LD_ADDR_VAR 0 3
53694: PUSH
53695: LD_VAR 0 5
53699: PUSH
53700: LD_INT 1
53702: ARRAY
53703: PUSH
53704: LD_INT 1
53706: ARRAY
53707: PUSH
53708: LD_VAR 0 5
53712: PUSH
53713: LD_INT 2
53715: ARRAY
53716: PUSH
53717: LD_INT 1
53719: ARRAY
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: EMPTY
53726: LIST
53727: ST_TO_ADDR
// end ;
53728: LD_VAR 0 3
53732: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
53733: LD_INT 0
53735: PPUSH
53736: PPUSH
// list := AreaToList ( area , 0 ) ;
53737: LD_ADDR_VAR 0 4
53741: PUSH
53742: LD_VAR 0 1
53746: PPUSH
53747: LD_INT 0
53749: PPUSH
53750: CALL_OW 517
53754: ST_TO_ADDR
// if not list then
53755: LD_VAR 0 4
53759: NOT
53760: IFFALSE 53764
// exit ;
53762: GO 53805
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
53764: LD_ADDR_VAR 0 3
53768: PUSH
53769: LD_VAR 0 4
53773: PUSH
53774: LD_INT 1
53776: ARRAY
53777: PUSH
53778: LD_INT 1
53780: ARRAY
53781: PUSH
53782: LD_VAR 0 4
53786: PUSH
53787: LD_INT 2
53789: ARRAY
53790: PUSH
53791: LD_INT 1
53793: ARRAY
53794: PUSH
53795: LD_VAR 0 2
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: LIST
53804: ST_TO_ADDR
// end ;
53805: LD_VAR 0 3
53809: RET
// export function First ( array ) ; begin
53810: LD_INT 0
53812: PPUSH
// if not array then
53813: LD_VAR 0 1
53817: NOT
53818: IFFALSE 53822
// exit ;
53820: GO 53836
// result := array [ 1 ] ;
53822: LD_ADDR_VAR 0 2
53826: PUSH
53827: LD_VAR 0 1
53831: PUSH
53832: LD_INT 1
53834: ARRAY
53835: ST_TO_ADDR
// end ;
53836: LD_VAR 0 2
53840: RET
// export function Last ( array ) ; begin
53841: LD_INT 0
53843: PPUSH
// if not array then
53844: LD_VAR 0 1
53848: NOT
53849: IFFALSE 53853
// exit ;
53851: GO 53869
// result := array [ array ] ;
53853: LD_ADDR_VAR 0 2
53857: PUSH
53858: LD_VAR 0 1
53862: PUSH
53863: LD_VAR 0 1
53867: ARRAY
53868: ST_TO_ADDR
// end ;
53869: LD_VAR 0 2
53873: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53874: LD_INT 0
53876: PPUSH
53877: PPUSH
// result := [ ] ;
53878: LD_ADDR_VAR 0 5
53882: PUSH
53883: EMPTY
53884: ST_TO_ADDR
// if not array then
53885: LD_VAR 0 1
53889: NOT
53890: IFFALSE 53894
// exit ;
53892: GO 54006
// for i := 1 to array do
53894: LD_ADDR_VAR 0 6
53898: PUSH
53899: DOUBLE
53900: LD_INT 1
53902: DEC
53903: ST_TO_ADDR
53904: LD_VAR 0 1
53908: PUSH
53909: FOR_TO
53910: IFFALSE 54004
// if array [ i ] [ index ] = value then
53912: LD_VAR 0 1
53916: PUSH
53917: LD_VAR 0 6
53921: ARRAY
53922: PUSH
53923: LD_VAR 0 2
53927: ARRAY
53928: PUSH
53929: LD_VAR 0 3
53933: EQUAL
53934: IFFALSE 54002
// begin if indexColumn then
53936: LD_VAR 0 4
53940: IFFALSE 53976
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53942: LD_ADDR_VAR 0 5
53946: PUSH
53947: LD_VAR 0 5
53951: PPUSH
53952: LD_VAR 0 1
53956: PUSH
53957: LD_VAR 0 6
53961: ARRAY
53962: PUSH
53963: LD_VAR 0 4
53967: ARRAY
53968: PPUSH
53969: CALL 49014 0 2
53973: ST_TO_ADDR
53974: GO 54002
// result := Join ( result , array [ i ] ) ;
53976: LD_ADDR_VAR 0 5
53980: PUSH
53981: LD_VAR 0 5
53985: PPUSH
53986: LD_VAR 0 1
53990: PUSH
53991: LD_VAR 0 6
53995: ARRAY
53996: PPUSH
53997: CALL 49014 0 2
54001: ST_TO_ADDR
// end ;
54002: GO 53909
54004: POP
54005: POP
// end ;
54006: LD_VAR 0 5
54010: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
54011: LD_INT 0
54013: PPUSH
// if not vehicles or not parkingPoint then
54014: LD_VAR 0 1
54018: NOT
54019: IFTRUE 54028
54021: PUSH
54022: LD_VAR 0 2
54026: NOT
54027: OR
54028: IFFALSE 54032
// exit ;
54030: GO 54130
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
54032: LD_ADDR_VAR 0 1
54036: PUSH
54037: LD_VAR 0 1
54041: PPUSH
54042: LD_INT 50
54044: PUSH
54045: EMPTY
54046: LIST
54047: PUSH
54048: LD_INT 3
54050: PUSH
54051: LD_INT 92
54053: PUSH
54054: LD_VAR 0 2
54058: PUSH
54059: LD_INT 1
54061: ARRAY
54062: PUSH
54063: LD_VAR 0 2
54067: PUSH
54068: LD_INT 2
54070: ARRAY
54071: PUSH
54072: LD_INT 8
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PPUSH
54089: CALL_OW 72
54093: ST_TO_ADDR
// if not vehicles then
54094: LD_VAR 0 1
54098: NOT
54099: IFFALSE 54103
// exit ;
54101: GO 54130
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
54103: LD_VAR 0 1
54107: PPUSH
54108: LD_VAR 0 2
54112: PUSH
54113: LD_INT 1
54115: ARRAY
54116: PPUSH
54117: LD_VAR 0 2
54121: PUSH
54122: LD_INT 2
54124: ARRAY
54125: PPUSH
54126: CALL_OW 111
// end ;
54130: LD_VAR 0 3
54134: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
54135: LD_INT 0
54137: PPUSH
54138: PPUSH
54139: PPUSH
// if not side or not area then
54140: LD_VAR 0 1
54144: NOT
54145: IFTRUE 54154
54147: PUSH
54148: LD_VAR 0 2
54152: NOT
54153: OR
54154: IFFALSE 54158
// exit ;
54156: GO 54277
// tmp := AreaToList ( area , 0 ) ;
54158: LD_ADDR_VAR 0 5
54162: PUSH
54163: LD_VAR 0 2
54167: PPUSH
54168: LD_INT 0
54170: PPUSH
54171: CALL_OW 517
54175: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54176: LD_ADDR_VAR 0 4
54180: PUSH
54181: DOUBLE
54182: LD_INT 1
54184: DEC
54185: ST_TO_ADDR
54186: LD_VAR 0 5
54190: PUSH
54191: LD_INT 1
54193: ARRAY
54194: PUSH
54195: FOR_TO
54196: IFFALSE 54275
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54198: LD_VAR 0 5
54202: PUSH
54203: LD_INT 1
54205: ARRAY
54206: PUSH
54207: LD_VAR 0 4
54211: ARRAY
54212: PPUSH
54213: LD_VAR 0 5
54217: PUSH
54218: LD_INT 2
54220: ARRAY
54221: PUSH
54222: LD_VAR 0 4
54226: ARRAY
54227: PPUSH
54228: CALL_OW 351
54232: IFFALSE 54273
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54234: LD_VAR 0 5
54238: PUSH
54239: LD_INT 1
54241: ARRAY
54242: PUSH
54243: LD_VAR 0 4
54247: ARRAY
54248: PPUSH
54249: LD_VAR 0 5
54253: PUSH
54254: LD_INT 2
54256: ARRAY
54257: PUSH
54258: LD_VAR 0 4
54262: ARRAY
54263: PPUSH
54264: LD_VAR 0 1
54268: PPUSH
54269: CALL_OW 244
// end ;
54273: GO 54195
54275: POP
54276: POP
// end ;
54277: LD_VAR 0 3
54281: RET
// export function UniqueArray ( array ) ; var i ; begin
54282: LD_INT 0
54284: PPUSH
54285: PPUSH
// result := [ ] ;
54286: LD_ADDR_VAR 0 2
54290: PUSH
54291: EMPTY
54292: ST_TO_ADDR
// if not array then
54293: LD_VAR 0 1
54297: NOT
54298: IFFALSE 54302
// exit ;
54300: GO 54363
// for i := 1 to array do
54302: LD_ADDR_VAR 0 3
54306: PUSH
54307: DOUBLE
54308: LD_INT 1
54310: DEC
54311: ST_TO_ADDR
54312: LD_VAR 0 1
54316: PUSH
54317: FOR_TO
54318: IFFALSE 54361
// if not array [ i ] in result then
54320: LD_VAR 0 1
54324: PUSH
54325: LD_VAR 0 3
54329: ARRAY
54330: PUSH
54331: LD_VAR 0 2
54335: IN
54336: NOT
54337: IFFALSE 54359
// result := Join ( result , i ) ;
54339: LD_ADDR_VAR 0 2
54343: PUSH
54344: LD_VAR 0 2
54348: PPUSH
54349: LD_VAR 0 3
54353: PPUSH
54354: CALL 49014 0 2
54358: ST_TO_ADDR
54359: GO 54317
54361: POP
54362: POP
// end ; end_of_file
54363: LD_VAR 0 2
54367: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54368: LD_VAR 0 1
54372: PUSH
54373: LD_INT 200
54375: DOUBLE
54376: GREATEREQUAL
54377: IFFALSE 54385
54379: LD_INT 299
54381: DOUBLE
54382: LESSEQUAL
54383: IFTRUE 54387
54385: GO 54419
54387: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54388: LD_VAR 0 1
54392: PPUSH
54393: LD_VAR 0 2
54397: PPUSH
54398: LD_VAR 0 3
54402: PPUSH
54403: LD_VAR 0 4
54407: PPUSH
54408: LD_VAR 0 5
54412: PPUSH
54413: CALL 55281 0 5
54417: GO 54496
54419: LD_INT 300
54421: DOUBLE
54422: GREATEREQUAL
54423: IFFALSE 54431
54425: LD_INT 399
54427: DOUBLE
54428: LESSEQUAL
54429: IFTRUE 54433
54431: GO 54495
54433: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54434: LD_VAR 0 1
54438: PPUSH
54439: LD_VAR 0 2
54443: PPUSH
54444: LD_VAR 0 3
54448: PPUSH
54449: LD_VAR 0 4
54453: PPUSH
54454: LD_VAR 0 5
54458: PPUSH
54459: LD_VAR 0 6
54463: PPUSH
54464: LD_VAR 0 7
54468: PPUSH
54469: LD_VAR 0 8
54473: PPUSH
54474: LD_VAR 0 9
54478: PPUSH
54479: LD_VAR 0 10
54483: PPUSH
54484: LD_VAR 0 11
54488: PPUSH
54489: CALL 63283 0 11
54493: GO 54496
54495: POP
// end ;
54496: PPOPN 11
54498: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54499: LD_VAR 0 1
54503: PPUSH
54504: LD_VAR 0 2
54508: PPUSH
54509: LD_VAR 0 3
54513: PPUSH
54514: LD_VAR 0 4
54518: PPUSH
54519: LD_VAR 0 5
54523: PPUSH
54524: CALL 54581 0 5
// end ; end_of_file
54528: PPOPN 5
54530: END
// export function SOS_UnitDestroyed ( un ) ; begin
54531: LD_INT 0
54533: PPUSH
// ComRadiation ( un ) ;
54534: LD_VAR 0 1
54538: PPUSH
54539: CALL 55701 0 1
// end ;
54543: LD_VAR 0 2
54547: RET
// export function SOS_UnitKamikazed ( un ) ; begin
54548: LD_INT 0
54550: PPUSH
// ComRadiation ( un ) ;
54551: LD_VAR 0 1
54555: PPUSH
54556: CALL 55701 0 1
// end ;
54560: LD_VAR 0 2
54564: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54565: LD_INT 0
54567: PPUSH
// end ;
54568: LD_VAR 0 4
54572: RET
// export function SOS_Command ( cmd ) ; begin
54573: LD_INT 0
54575: PPUSH
// end ;
54576: LD_VAR 0 2
54580: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54581: LD_INT 0
54583: PPUSH
// end ;
54584: LD_VAR 0 6
54588: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
54589: LD_INT 0
54591: PPUSH
54592: PPUSH
54593: PPUSH
54594: PPUSH
54595: PPUSH
// if not vehicle or not factory then
54596: LD_VAR 0 1
54600: NOT
54601: IFTRUE 54610
54603: PUSH
54604: LD_VAR 0 2
54608: NOT
54609: OR
54610: IFFALSE 54614
// exit ;
54612: GO 55276
// weapon := GetWeapon ( vehicle ) ;
54614: LD_ADDR_VAR 0 7
54618: PUSH
54619: LD_VAR 0 1
54623: PPUSH
54624: CALL_OW 264
54628: ST_TO_ADDR
// if weapon = ar_miner then
54629: LD_VAR 0 7
54633: PUSH
54634: LD_INT 81
54636: EQUAL
54637: IFFALSE 54694
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
54639: LD_ADDR_EXP 58
54643: PUSH
54644: LD_EXP 58
54648: PPUSH
54649: LD_EXP 58
54653: PUSH
54654: LD_INT 1
54656: PLUS
54657: PPUSH
54658: LD_VAR 0 1
54662: PPUSH
54663: CALL_OW 1
54667: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54668: LD_ADDR_EXP 59
54672: PUSH
54673: LD_EXP 59
54677: PPUSH
54678: LD_EXP 59
54682: PUSH
54683: LD_INT 1
54685: PLUS
54686: PPUSH
54687: EMPTY
54688: PPUSH
54689: CALL_OW 1
54693: ST_TO_ADDR
// end ; if not factoryWaypoints then
54694: LD_EXP 62
54698: NOT
54699: IFFALSE 54703
// exit ;
54701: GO 55276
// for i := 1 to Count ( factoryWaypoints ) do
54703: LD_ADDR_VAR 0 4
54707: PUSH
54708: DOUBLE
54709: LD_INT 1
54711: DEC
54712: ST_TO_ADDR
54713: LD_EXP 62
54717: PPUSH
54718: CALL 13048 0 1
54722: PUSH
54723: FOR_TO
54724: IFFALSE 55274
// if factoryWaypoints [ i ] [ 2 ] = factory then
54726: LD_EXP 62
54730: PUSH
54731: LD_VAR 0 4
54735: ARRAY
54736: PUSH
54737: LD_INT 2
54739: ARRAY
54740: PUSH
54741: LD_VAR 0 2
54745: EQUAL
54746: IFFALSE 55272
// begin if GetControl ( vehicle ) = control_manual then
54748: LD_VAR 0 1
54752: PPUSH
54753: CALL_OW 263
54757: PUSH
54758: LD_INT 1
54760: EQUAL
54761: IFFALSE 55125
// begin driver := IsDrivenBy ( vehicle ) ;
54763: LD_ADDR_VAR 0 5
54767: PUSH
54768: LD_VAR 0 1
54772: PPUSH
54773: CALL_OW 311
54777: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
54778: LD_VAR 0 5
54782: PUSH
54783: LD_EXP 63
54787: IN
54788: IFTRUE 54802
54790: PUSH
54791: LD_VAR 0 1
54795: PUSH
54796: LD_EXP 63
54800: IN
54801: OR
54802: IFFALSE 54808
// exit ;
54804: POP
54805: POP
54806: GO 55276
// if not HasTask ( driver ) then
54808: LD_VAR 0 5
54812: PPUSH
54813: CALL_OW 314
54817: NOT
54818: IFFALSE 55123
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
54820: LD_ADDR_EXP 63
54824: PUSH
54825: LD_EXP 63
54829: PPUSH
54830: LD_VAR 0 5
54834: PPUSH
54835: CALL 49014 0 2
54839: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
54840: LD_ADDR_EXP 63
54844: PUSH
54845: LD_EXP 63
54849: PPUSH
54850: LD_VAR 0 1
54854: PPUSH
54855: CALL 49014 0 2
54859: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54860: LD_ADDR_VAR 0 6
54864: PUSH
54865: LD_EXP 62
54869: PUSH
54870: LD_VAR 0 4
54874: ARRAY
54875: PUSH
54876: LD_INT 3
54878: ARRAY
54879: PPUSH
54880: LD_EXP 62
54884: PUSH
54885: LD_VAR 0 4
54889: ARRAY
54890: PUSH
54891: LD_INT 4
54893: ARRAY
54894: PPUSH
54895: CALL_OW 428
54899: ST_TO_ADDR
// if hex then
54900: LD_VAR 0 6
54904: IFFALSE 54922
// ComMoveUnit ( driver , hex ) else
54906: LD_VAR 0 5
54910: PPUSH
54911: LD_VAR 0 6
54915: PPUSH
54916: CALL_OW 112
54920: GO 55006
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54922: LD_VAR 0 1
54926: PPUSH
54927: LD_EXP 62
54931: PUSH
54932: LD_VAR 0 4
54936: ARRAY
54937: PUSH
54938: LD_INT 3
54940: ARRAY
54941: PPUSH
54942: LD_EXP 62
54946: PUSH
54947: LD_VAR 0 4
54951: ARRAY
54952: PUSH
54953: LD_INT 4
54955: ARRAY
54956: PPUSH
54957: CALL_OW 297
54961: PUSH
54962: LD_INT 0
54964: GREATER
54965: IFFALSE 55006
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54967: LD_VAR 0 5
54971: PPUSH
54972: LD_EXP 62
54976: PUSH
54977: LD_VAR 0 4
54981: ARRAY
54982: PUSH
54983: LD_INT 3
54985: ARRAY
54986: PPUSH
54987: LD_EXP 62
54991: PUSH
54992: LD_VAR 0 4
54996: ARRAY
54997: PUSH
54998: LD_INT 4
55000: ARRAY
55001: PPUSH
55002: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55006: LD_VAR 0 5
55010: PPUSH
55011: CALL_OW 181
// if Multiplayer then
55015: LD_OWVAR 4
55019: IFFALSE 55068
// begin repeat wait ( 10 ) ;
55021: LD_INT 10
55023: PPUSH
55024: CALL_OW 67
// until not IsInUnit ( driver ) ;
55028: LD_VAR 0 5
55032: PPUSH
55033: CALL_OW 310
55037: NOT
55038: IFFALSE 55021
// if not HasTask ( driver ) then
55040: LD_VAR 0 5
55044: PPUSH
55045: CALL_OW 314
55049: NOT
55050: IFFALSE 55066
// ComEnterUnit ( driver , factory ) ;
55052: LD_VAR 0 5
55056: PPUSH
55057: LD_VAR 0 2
55061: PPUSH
55062: CALL_OW 120
// end else
55066: GO 55082
// AddComEnterUnit ( driver , factory ) ;
55068: LD_VAR 0 5
55072: PPUSH
55073: LD_VAR 0 2
55077: PPUSH
55078: CALL_OW 180
// wait ( 0 0$1 ) ;
55082: LD_INT 35
55084: PPUSH
55085: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55089: LD_ADDR_EXP 63
55093: PUSH
55094: LD_EXP 63
55098: PUSH
55099: LD_VAR 0 5
55103: DIFF
55104: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55105: LD_ADDR_EXP 63
55109: PUSH
55110: LD_EXP 63
55114: PUSH
55115: LD_VAR 0 1
55119: DIFF
55120: ST_TO_ADDR
// break ;
55121: GO 55274
// end ; end else
55123: GO 55272
// if GetControl ( vehicle ) = control_remote then
55125: LD_VAR 0 1
55129: PPUSH
55130: CALL_OW 263
55134: PUSH
55135: LD_INT 2
55137: EQUAL
55138: IFFALSE 55224
// begin wait ( 0 0$2 ) ;
55140: LD_INT 70
55142: PPUSH
55143: CALL_OW 67
// repeat wait ( 10 ) ;
55147: LD_INT 10
55149: PPUSH
55150: CALL_OW 67
// Connect ( vehicle ) ;
55154: LD_VAR 0 1
55158: PPUSH
55159: CALL 19326 0 1
// until IsControledBy ( vehicle ) ;
55163: LD_VAR 0 1
55167: PPUSH
55168: CALL_OW 312
55172: IFFALSE 55147
// wait ( 10 ) ;
55174: LD_INT 10
55176: PPUSH
55177: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55181: LD_VAR 0 1
55185: PPUSH
55186: LD_EXP 62
55190: PUSH
55191: LD_VAR 0 4
55195: ARRAY
55196: PUSH
55197: LD_INT 3
55199: ARRAY
55200: PPUSH
55201: LD_EXP 62
55205: PUSH
55206: LD_VAR 0 4
55210: ARRAY
55211: PUSH
55212: LD_INT 4
55214: ARRAY
55215: PPUSH
55216: CALL_OW 111
// break ;
55220: GO 55274
// end else
55222: GO 55272
// begin wait ( 0 0$3 ) ;
55224: LD_INT 105
55226: PPUSH
55227: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55231: LD_VAR 0 1
55235: PPUSH
55236: LD_EXP 62
55240: PUSH
55241: LD_VAR 0 4
55245: ARRAY
55246: PUSH
55247: LD_INT 3
55249: ARRAY
55250: PPUSH
55251: LD_EXP 62
55255: PUSH
55256: LD_VAR 0 4
55260: ARRAY
55261: PUSH
55262: LD_INT 4
55264: ARRAY
55265: PPUSH
55266: CALL_OW 111
// break ;
55270: GO 55274
// end ; end ;
55272: GO 54723
55274: POP
55275: POP
// end ;
55276: LD_VAR 0 3
55280: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55281: LD_INT 0
55283: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55284: LD_VAR 0 1
55288: PUSH
55289: LD_INT 250
55291: EQUAL
55292: IFFALSE 55309
55294: PUSH
55295: LD_VAR 0 2
55299: PPUSH
55300: CALL_OW 264
55304: PUSH
55305: LD_INT 81
55307: EQUAL
55308: AND
55309: IFFALSE 55330
// MinerPlaceMine ( unit , x , y ) ;
55311: LD_VAR 0 2
55315: PPUSH
55316: LD_VAR 0 4
55320: PPUSH
55321: LD_VAR 0 5
55325: PPUSH
55326: CALL 58611 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55330: LD_VAR 0 1
55334: PUSH
55335: LD_INT 251
55337: EQUAL
55338: IFFALSE 55355
55340: PUSH
55341: LD_VAR 0 2
55345: PPUSH
55346: CALL_OW 264
55350: PUSH
55351: LD_INT 81
55353: EQUAL
55354: AND
55355: IFFALSE 55376
// MinerDetonateMine ( unit , x , y ) ;
55357: LD_VAR 0 2
55361: PPUSH
55362: LD_VAR 0 4
55366: PPUSH
55367: LD_VAR 0 5
55371: PPUSH
55372: CALL 59018 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55376: LD_VAR 0 1
55380: PUSH
55381: LD_INT 252
55383: EQUAL
55384: IFFALSE 55401
55386: PUSH
55387: LD_VAR 0 2
55391: PPUSH
55392: CALL_OW 264
55396: PUSH
55397: LD_INT 81
55399: EQUAL
55400: AND
55401: IFFALSE 55422
// MinerCreateMinefield ( unit , x , y ) ;
55403: LD_VAR 0 2
55407: PPUSH
55408: LD_VAR 0 4
55412: PPUSH
55413: LD_VAR 0 5
55417: PPUSH
55418: CALL 59250 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55422: LD_VAR 0 1
55426: PUSH
55427: LD_INT 253
55429: EQUAL
55430: IFFALSE 55447
55432: PUSH
55433: LD_VAR 0 2
55437: PPUSH
55438: CALL_OW 257
55442: PUSH
55443: LD_INT 5
55445: EQUAL
55446: AND
55447: IFFALSE 55468
// ComBinocular ( unit , x , y ) ;
55449: LD_VAR 0 2
55453: PPUSH
55454: LD_VAR 0 4
55458: PPUSH
55459: LD_VAR 0 5
55463: PPUSH
55464: CALL 59625 0 3
// if selectedUnit then
55468: LD_VAR 0 3
55472: IFFALSE 55532
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55474: LD_VAR 0 1
55478: PUSH
55479: LD_INT 254
55481: EQUAL
55482: IFFALSE 55499
55484: PUSH
55485: LD_VAR 0 2
55489: PPUSH
55490: CALL_OW 264
55494: PUSH
55495: LD_INT 99
55497: EQUAL
55498: AND
55499: IFFALSE 55516
55501: PUSH
55502: LD_VAR 0 3
55506: PPUSH
55507: CALL_OW 263
55511: PUSH
55512: LD_INT 3
55514: EQUAL
55515: AND
55516: IFFALSE 55532
// HackDestroyVehicle ( unit , selectedUnit ) ;
55518: LD_VAR 0 2
55522: PPUSH
55523: LD_VAR 0 3
55527: PPUSH
55528: CALL 57822 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55532: LD_VAR 0 1
55536: PUSH
55537: LD_INT 255
55539: EQUAL
55540: IFFALSE 55564
55542: PUSH
55543: LD_VAR 0 2
55547: PPUSH
55548: CALL_OW 264
55552: PUSH
55553: LD_INT 14
55555: PUSH
55556: LD_INT 53
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: IN
55563: AND
55564: IFFALSE 55582
55566: PUSH
55567: LD_VAR 0 4
55571: PPUSH
55572: LD_VAR 0 5
55576: PPUSH
55577: CALL_OW 488
55581: AND
55582: IFFALSE 55606
// CutTreeXYR ( unit , x , y , 12 ) ;
55584: LD_VAR 0 2
55588: PPUSH
55589: LD_VAR 0 4
55593: PPUSH
55594: LD_VAR 0 5
55598: PPUSH
55599: LD_INT 12
55601: PPUSH
55602: CALL 55797 0 4
// if cmd = 256 then
55606: LD_VAR 0 1
55610: PUSH
55611: LD_INT 256
55613: EQUAL
55614: IFFALSE 55635
// SetFactoryWaypoint ( unit , x , y ) ;
55616: LD_VAR 0 2
55620: PPUSH
55621: LD_VAR 0 4
55625: PPUSH
55626: LD_VAR 0 5
55630: PPUSH
55631: CALL 63291 0 3
// if cmd = 257 then
55635: LD_VAR 0 1
55639: PUSH
55640: LD_INT 257
55642: EQUAL
55643: IFFALSE 55664
// SetWarehouseGatheringPoint ( unit , x , y ) ;
55645: LD_VAR 0 2
55649: PPUSH
55650: LD_VAR 0 4
55654: PPUSH
55655: LD_VAR 0 5
55659: PPUSH
55660: CALL 63787 0 3
// if cmd = 258 then
55664: LD_VAR 0 1
55668: PUSH
55669: LD_INT 258
55671: EQUAL
55672: IFFALSE 55696
// BurnTreeXYR ( unit , x , y , 8 ) ;
55674: LD_VAR 0 2
55678: PPUSH
55679: LD_VAR 0 4
55683: PPUSH
55684: LD_VAR 0 5
55688: PPUSH
55689: LD_INT 8
55691: PPUSH
55692: CALL 56197 0 4
// end ;
55696: LD_VAR 0 6
55700: RET
// export function ComRadiation ( un ) ; var eff ; begin
55701: LD_INT 0
55703: PPUSH
55704: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
55705: LD_VAR 0 1
55709: PPUSH
55710: CALL_OW 264
55714: PUSH
55715: LD_INT 91
55717: NONEQUAL
55718: IFFALSE 55722
// exit ;
55720: GO 55792
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55722: LD_INT 68
55724: PPUSH
55725: LD_VAR 0 1
55729: PPUSH
55730: CALL_OW 255
55734: PPUSH
55735: CALL_OW 321
55739: PUSH
55740: LD_INT 2
55742: EQUAL
55743: IFFALSE 55755
// eff := 50 else
55745: LD_ADDR_VAR 0 3
55749: PUSH
55750: LD_INT 50
55752: ST_TO_ADDR
55753: GO 55763
// eff := 25 ;
55755: LD_ADDR_VAR 0 3
55759: PUSH
55760: LD_INT 25
55762: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55763: LD_VAR 0 1
55767: PPUSH
55768: CALL_OW 250
55772: PPUSH
55773: LD_VAR 0 1
55777: PPUSH
55778: CALL_OW 251
55782: PPUSH
55783: LD_VAR 0 3
55787: PPUSH
55788: CALL_OW 495
// end ;
55792: LD_VAR 0 2
55796: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55797: LD_INT 0
55799: PPUSH
55800: PPUSH
55801: PPUSH
55802: PPUSH
55803: PPUSH
55804: PPUSH
55805: PPUSH
55806: PPUSH
55807: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
55808: LD_VAR 0 1
55812: PPUSH
55813: CALL_OW 302
55817: NOT
55818: IFTRUE 55837
55820: PUSH
55821: LD_VAR 0 2
55825: PPUSH
55826: LD_VAR 0 3
55830: PPUSH
55831: CALL_OW 488
55835: NOT
55836: OR
55837: IFTRUE 55846
55839: PUSH
55840: LD_VAR 0 4
55844: NOT
55845: OR
55846: IFFALSE 55850
// exit ;
55848: GO 56192
// list := [ ] ;
55850: LD_ADDR_VAR 0 13
55854: PUSH
55855: EMPTY
55856: ST_TO_ADDR
// if x - r < 0 then
55857: LD_VAR 0 2
55861: PUSH
55862: LD_VAR 0 4
55866: MINUS
55867: PUSH
55868: LD_INT 0
55870: LESS
55871: IFFALSE 55883
// min_x := 0 else
55873: LD_ADDR_VAR 0 7
55877: PUSH
55878: LD_INT 0
55880: ST_TO_ADDR
55881: GO 55899
// min_x := x - r ;
55883: LD_ADDR_VAR 0 7
55887: PUSH
55888: LD_VAR 0 2
55892: PUSH
55893: LD_VAR 0 4
55897: MINUS
55898: ST_TO_ADDR
// if y - r < 0 then
55899: LD_VAR 0 3
55903: PUSH
55904: LD_VAR 0 4
55908: MINUS
55909: PUSH
55910: LD_INT 0
55912: LESS
55913: IFFALSE 55925
// min_y := 0 else
55915: LD_ADDR_VAR 0 8
55919: PUSH
55920: LD_INT 0
55922: ST_TO_ADDR
55923: GO 55941
// min_y := y - r ;
55925: LD_ADDR_VAR 0 8
55929: PUSH
55930: LD_VAR 0 3
55934: PUSH
55935: LD_VAR 0 4
55939: MINUS
55940: ST_TO_ADDR
// max_x := x + r ;
55941: LD_ADDR_VAR 0 9
55945: PUSH
55946: LD_VAR 0 2
55950: PUSH
55951: LD_VAR 0 4
55955: PLUS
55956: ST_TO_ADDR
// max_y := y + r ;
55957: LD_ADDR_VAR 0 10
55961: PUSH
55962: LD_VAR 0 3
55966: PUSH
55967: LD_VAR 0 4
55971: PLUS
55972: ST_TO_ADDR
// for _x = min_x to max_x do
55973: LD_ADDR_VAR 0 11
55977: PUSH
55978: DOUBLE
55979: LD_VAR 0 7
55983: DEC
55984: ST_TO_ADDR
55985: LD_VAR 0 9
55989: PUSH
55990: FOR_TO
55991: IFFALSE 56110
// for _y = min_y to max_y do
55993: LD_ADDR_VAR 0 12
55997: PUSH
55998: DOUBLE
55999: LD_VAR 0 8
56003: DEC
56004: ST_TO_ADDR
56005: LD_VAR 0 10
56009: PUSH
56010: FOR_TO
56011: IFFALSE 56106
// begin if not ValidHex ( _x , _y ) then
56013: LD_VAR 0 11
56017: PPUSH
56018: LD_VAR 0 12
56022: PPUSH
56023: CALL_OW 488
56027: NOT
56028: IFFALSE 56032
// continue ;
56030: GO 56010
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56032: LD_VAR 0 11
56036: PPUSH
56037: LD_VAR 0 12
56041: PPUSH
56042: CALL_OW 351
56046: IFFALSE 56064
56048: PUSH
56049: LD_VAR 0 11
56053: PPUSH
56054: LD_VAR 0 12
56058: PPUSH
56059: CALL_OW 554
56063: AND
56064: IFFALSE 56104
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56066: LD_ADDR_VAR 0 13
56070: PUSH
56071: LD_VAR 0 13
56075: PPUSH
56076: LD_VAR 0 13
56080: PUSH
56081: LD_INT 1
56083: PLUS
56084: PPUSH
56085: LD_VAR 0 11
56089: PUSH
56090: LD_VAR 0 12
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PPUSH
56099: CALL_OW 2
56103: ST_TO_ADDR
// end ;
56104: GO 56010
56106: POP
56107: POP
56108: GO 55990
56110: POP
56111: POP
// if not list then
56112: LD_VAR 0 13
56116: NOT
56117: IFFALSE 56121
// exit ;
56119: GO 56192
// for i in list do
56121: LD_ADDR_VAR 0 6
56125: PUSH
56126: LD_VAR 0 13
56130: PUSH
56131: FOR_IN
56132: IFFALSE 56190
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56134: LD_VAR 0 1
56138: PPUSH
56139: LD_STRING M
56141: PUSH
56142: LD_VAR 0 6
56146: PUSH
56147: LD_INT 1
56149: ARRAY
56150: PUSH
56151: LD_VAR 0 6
56155: PUSH
56156: LD_INT 2
56158: ARRAY
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: PUSH
56181: EMPTY
56182: LIST
56183: PPUSH
56184: CALL_OW 447
56188: GO 56131
56190: POP
56191: POP
// end ;
56192: LD_VAR 0 5
56196: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56197: LD_INT 0
56199: PPUSH
56200: PPUSH
56201: PPUSH
56202: PPUSH
56203: PPUSH
56204: PPUSH
56205: PPUSH
56206: PPUSH
56207: PPUSH
56208: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56209: LD_VAR 0 1
56213: PPUSH
56214: CALL_OW 302
56218: NOT
56219: IFTRUE 56238
56221: PUSH
56222: LD_VAR 0 2
56226: PPUSH
56227: LD_VAR 0 3
56231: PPUSH
56232: CALL_OW 488
56236: NOT
56237: OR
56238: IFTRUE 56247
56240: PUSH
56241: LD_VAR 0 4
56245: NOT
56246: OR
56247: IFFALSE 56251
// exit ;
56249: GO 56768
// list := [ ] ;
56251: LD_ADDR_VAR 0 13
56255: PUSH
56256: EMPTY
56257: ST_TO_ADDR
// if x - r < 0 then
56258: LD_VAR 0 2
56262: PUSH
56263: LD_VAR 0 4
56267: MINUS
56268: PUSH
56269: LD_INT 0
56271: LESS
56272: IFFALSE 56284
// min_x := 0 else
56274: LD_ADDR_VAR 0 7
56278: PUSH
56279: LD_INT 0
56281: ST_TO_ADDR
56282: GO 56300
// min_x := x - r ;
56284: LD_ADDR_VAR 0 7
56288: PUSH
56289: LD_VAR 0 2
56293: PUSH
56294: LD_VAR 0 4
56298: MINUS
56299: ST_TO_ADDR
// if y - r < 0 then
56300: LD_VAR 0 3
56304: PUSH
56305: LD_VAR 0 4
56309: MINUS
56310: PUSH
56311: LD_INT 0
56313: LESS
56314: IFFALSE 56326
// min_y := 0 else
56316: LD_ADDR_VAR 0 8
56320: PUSH
56321: LD_INT 0
56323: ST_TO_ADDR
56324: GO 56342
// min_y := y - r ;
56326: LD_ADDR_VAR 0 8
56330: PUSH
56331: LD_VAR 0 3
56335: PUSH
56336: LD_VAR 0 4
56340: MINUS
56341: ST_TO_ADDR
// max_x := x + r ;
56342: LD_ADDR_VAR 0 9
56346: PUSH
56347: LD_VAR 0 2
56351: PUSH
56352: LD_VAR 0 4
56356: PLUS
56357: ST_TO_ADDR
// max_y := y + r ;
56358: LD_ADDR_VAR 0 10
56362: PUSH
56363: LD_VAR 0 3
56367: PUSH
56368: LD_VAR 0 4
56372: PLUS
56373: ST_TO_ADDR
// for _x = min_x to max_x do
56374: LD_ADDR_VAR 0 11
56378: PUSH
56379: DOUBLE
56380: LD_VAR 0 7
56384: DEC
56385: ST_TO_ADDR
56386: LD_VAR 0 9
56390: PUSH
56391: FOR_TO
56392: IFFALSE 56511
// for _y = min_y to max_y do
56394: LD_ADDR_VAR 0 12
56398: PUSH
56399: DOUBLE
56400: LD_VAR 0 8
56404: DEC
56405: ST_TO_ADDR
56406: LD_VAR 0 10
56410: PUSH
56411: FOR_TO
56412: IFFALSE 56507
// begin if not ValidHex ( _x , _y ) then
56414: LD_VAR 0 11
56418: PPUSH
56419: LD_VAR 0 12
56423: PPUSH
56424: CALL_OW 488
56428: NOT
56429: IFFALSE 56433
// continue ;
56431: GO 56411
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56433: LD_VAR 0 11
56437: PPUSH
56438: LD_VAR 0 12
56442: PPUSH
56443: CALL_OW 351
56447: IFFALSE 56465
56449: PUSH
56450: LD_VAR 0 11
56454: PPUSH
56455: LD_VAR 0 12
56459: PPUSH
56460: CALL_OW 554
56464: AND
56465: IFFALSE 56505
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56467: LD_ADDR_VAR 0 13
56471: PUSH
56472: LD_VAR 0 13
56476: PPUSH
56477: LD_VAR 0 13
56481: PUSH
56482: LD_INT 1
56484: PLUS
56485: PPUSH
56486: LD_VAR 0 11
56490: PUSH
56491: LD_VAR 0 12
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PPUSH
56500: CALL_OW 2
56504: ST_TO_ADDR
// end ;
56505: GO 56411
56507: POP
56508: POP
56509: GO 56391
56511: POP
56512: POP
// if not list then
56513: LD_VAR 0 13
56517: NOT
56518: IFFALSE 56522
// exit ;
56520: GO 56768
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
56522: LD_ADDR_VAR 0 13
56526: PUSH
56527: LD_VAR 0 1
56531: PPUSH
56532: LD_VAR 0 13
56536: PPUSH
56537: LD_INT 1
56539: PPUSH
56540: LD_INT 1
56542: PPUSH
56543: CALL 16454 0 4
56547: ST_TO_ADDR
// ComStop ( flame ) ;
56548: LD_VAR 0 1
56552: PPUSH
56553: CALL_OW 141
// for i in list do
56557: LD_ADDR_VAR 0 6
56561: PUSH
56562: LD_VAR 0 13
56566: PUSH
56567: FOR_IN
56568: IFFALSE 56599
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
56570: LD_VAR 0 1
56574: PPUSH
56575: LD_VAR 0 6
56579: PUSH
56580: LD_INT 1
56582: ARRAY
56583: PPUSH
56584: LD_VAR 0 6
56588: PUSH
56589: LD_INT 2
56591: ARRAY
56592: PPUSH
56593: CALL_OW 176
56597: GO 56567
56599: POP
56600: POP
// repeat wait ( 0 0$1 ) ;
56601: LD_INT 35
56603: PPUSH
56604: CALL_OW 67
// task := GetTaskList ( flame ) ;
56608: LD_ADDR_VAR 0 14
56612: PUSH
56613: LD_VAR 0 1
56617: PPUSH
56618: CALL_OW 437
56622: ST_TO_ADDR
// if not task then
56623: LD_VAR 0 14
56627: NOT
56628: IFFALSE 56632
// exit ;
56630: GO 56768
// if task [ 1 ] [ 1 ] <> | then
56632: LD_VAR 0 14
56636: PUSH
56637: LD_INT 1
56639: ARRAY
56640: PUSH
56641: LD_INT 1
56643: ARRAY
56644: PUSH
56645: LD_STRING |
56647: NONEQUAL
56648: IFFALSE 56652
// exit ;
56650: GO 56768
// _x := task [ 1 ] [ 2 ] ;
56652: LD_ADDR_VAR 0 11
56656: PUSH
56657: LD_VAR 0 14
56661: PUSH
56662: LD_INT 1
56664: ARRAY
56665: PUSH
56666: LD_INT 2
56668: ARRAY
56669: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
56670: LD_ADDR_VAR 0 12
56674: PUSH
56675: LD_VAR 0 14
56679: PUSH
56680: LD_INT 1
56682: ARRAY
56683: PUSH
56684: LD_INT 3
56686: ARRAY
56687: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
56688: LD_VAR 0 11
56692: PPUSH
56693: LD_VAR 0 12
56697: PPUSH
56698: CALL_OW 351
56702: NOT
56703: IFTRUE 56722
56705: PUSH
56706: LD_VAR 0 11
56710: PPUSH
56711: LD_VAR 0 12
56715: PPUSH
56716: CALL_OW 554
56720: NOT
56721: OR
56722: IFFALSE 56756
// begin task := Delete ( task , 1 ) ;
56724: LD_ADDR_VAR 0 14
56728: PUSH
56729: LD_VAR 0 14
56733: PPUSH
56734: LD_INT 1
56736: PPUSH
56737: CALL_OW 3
56741: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
56742: LD_VAR 0 1
56746: PPUSH
56747: LD_VAR 0 14
56751: PPUSH
56752: CALL_OW 446
// end ; until not HasTask ( flame ) ;
56756: LD_VAR 0 1
56760: PPUSH
56761: CALL_OW 314
56765: NOT
56766: IFFALSE 56601
// end ;
56768: LD_VAR 0 5
56772: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56773: LD_EXP 51
56777: NOT
56778: IFFALSE 56828
56780: GO 56782
56782: DISABLE
// begin initHack := true ;
56783: LD_ADDR_EXP 51
56787: PUSH
56788: LD_INT 1
56790: ST_TO_ADDR
// hackTanks := [ ] ;
56791: LD_ADDR_EXP 52
56795: PUSH
56796: EMPTY
56797: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56798: LD_ADDR_EXP 53
56802: PUSH
56803: EMPTY
56804: ST_TO_ADDR
// hackLimit := 3 ;
56805: LD_ADDR_EXP 54
56809: PUSH
56810: LD_INT 3
56812: ST_TO_ADDR
// hackDist := 12 ;
56813: LD_ADDR_EXP 55
56817: PUSH
56818: LD_INT 12
56820: ST_TO_ADDR
// hackCounter := [ ] ;
56821: LD_ADDR_EXP 56
56825: PUSH
56826: EMPTY
56827: ST_TO_ADDR
// end ;
56828: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56829: LD_EXP 51
56833: IFFALSE 56851
56835: PUSH
56836: LD_INT 34
56838: PUSH
56839: LD_INT 99
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PPUSH
56846: CALL_OW 69
56850: AND
56851: IFFALSE 57104
56853: GO 56855
56855: DISABLE
56856: LD_INT 0
56858: PPUSH
56859: PPUSH
// begin enable ;
56860: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56861: LD_ADDR_VAR 0 1
56865: PUSH
56866: LD_INT 34
56868: PUSH
56869: LD_INT 99
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PPUSH
56876: CALL_OW 69
56880: PUSH
56881: FOR_IN
56882: IFFALSE 57102
// begin if not i in hackTanks then
56884: LD_VAR 0 1
56888: PUSH
56889: LD_EXP 52
56893: IN
56894: NOT
56895: IFFALSE 56978
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56897: LD_ADDR_EXP 52
56901: PUSH
56902: LD_EXP 52
56906: PPUSH
56907: LD_EXP 52
56911: PUSH
56912: LD_INT 1
56914: PLUS
56915: PPUSH
56916: LD_VAR 0 1
56920: PPUSH
56921: CALL_OW 1
56925: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56926: LD_ADDR_EXP 53
56930: PUSH
56931: LD_EXP 53
56935: PPUSH
56936: LD_EXP 53
56940: PUSH
56941: LD_INT 1
56943: PLUS
56944: PPUSH
56945: EMPTY
56946: PPUSH
56947: CALL_OW 1
56951: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56952: LD_ADDR_EXP 56
56956: PUSH
56957: LD_EXP 56
56961: PPUSH
56962: LD_EXP 56
56966: PUSH
56967: LD_INT 1
56969: PLUS
56970: PPUSH
56971: EMPTY
56972: PPUSH
56973: CALL_OW 1
56977: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56978: LD_VAR 0 1
56982: PPUSH
56983: CALL_OW 302
56987: NOT
56988: IFFALSE 57001
// begin HackUnlinkAll ( i ) ;
56990: LD_VAR 0 1
56994: PPUSH
56995: CALL 57107 0 1
// continue ;
56999: GO 56881
// end ; HackCheckCapturedStatus ( i ) ;
57001: LD_VAR 0 1
57005: PPUSH
57006: CALL 57552 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57010: LD_ADDR_VAR 0 2
57014: PUSH
57015: LD_INT 81
57017: PUSH
57018: LD_VAR 0 1
57022: PPUSH
57023: CALL_OW 255
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 33
57034: PUSH
57035: LD_INT 3
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 91
57044: PUSH
57045: LD_VAR 0 1
57049: PUSH
57050: LD_EXP 55
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 50
57062: PUSH
57063: EMPTY
57064: LIST
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: PPUSH
57072: CALL_OW 69
57076: ST_TO_ADDR
// if not tmp then
57077: LD_VAR 0 2
57081: NOT
57082: IFFALSE 57086
// continue ;
57084: GO 56881
// HackLink ( i , tmp ) ;
57086: LD_VAR 0 1
57090: PPUSH
57091: LD_VAR 0 2
57095: PPUSH
57096: CALL 57243 0 2
// end ;
57100: GO 56881
57102: POP
57103: POP
// end ;
57104: PPOPN 2
57106: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57107: LD_INT 0
57109: PPUSH
57110: PPUSH
57111: PPUSH
// if not hack in hackTanks then
57112: LD_VAR 0 1
57116: PUSH
57117: LD_EXP 52
57121: IN
57122: NOT
57123: IFFALSE 57127
// exit ;
57125: GO 57238
// index := GetElementIndex ( hackTanks , hack ) ;
57127: LD_ADDR_VAR 0 4
57131: PUSH
57132: LD_EXP 52
57136: PPUSH
57137: LD_VAR 0 1
57141: PPUSH
57142: CALL 15749 0 2
57146: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57147: LD_EXP 53
57151: PUSH
57152: LD_VAR 0 4
57156: ARRAY
57157: IFFALSE 57238
// begin for i in hackTanksCaptured [ index ] do
57159: LD_ADDR_VAR 0 3
57163: PUSH
57164: LD_EXP 53
57168: PUSH
57169: LD_VAR 0 4
57173: ARRAY
57174: PUSH
57175: FOR_IN
57176: IFFALSE 57202
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57178: LD_VAR 0 3
57182: PUSH
57183: LD_INT 1
57185: ARRAY
57186: PPUSH
57187: LD_VAR 0 3
57191: PUSH
57192: LD_INT 2
57194: ARRAY
57195: PPUSH
57196: CALL_OW 235
57200: GO 57175
57202: POP
57203: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57204: LD_ADDR_EXP 53
57208: PUSH
57209: LD_EXP 53
57213: PPUSH
57214: LD_VAR 0 4
57218: PPUSH
57219: EMPTY
57220: PPUSH
57221: CALL_OW 1
57225: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57226: LD_VAR 0 1
57230: PPUSH
57231: LD_INT 0
57233: PPUSH
57234: CALL_OW 505
// end ; end ;
57238: LD_VAR 0 2
57242: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57243: LD_INT 0
57245: PPUSH
57246: PPUSH
57247: PPUSH
// if not hack in hackTanks or not vehicles then
57248: LD_VAR 0 1
57252: PUSH
57253: LD_EXP 52
57257: IN
57258: NOT
57259: IFTRUE 57268
57261: PUSH
57262: LD_VAR 0 2
57266: NOT
57267: OR
57268: IFFALSE 57272
// exit ;
57270: GO 57547
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57272: LD_ADDR_VAR 0 2
57276: PUSH
57277: LD_VAR 0 1
57281: PPUSH
57282: LD_VAR 0 2
57286: PPUSH
57287: LD_INT 1
57289: PPUSH
57290: LD_INT 1
57292: PPUSH
57293: CALL 16401 0 4
57297: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57298: LD_ADDR_VAR 0 5
57302: PUSH
57303: LD_EXP 52
57307: PPUSH
57308: LD_VAR 0 1
57312: PPUSH
57313: CALL 15749 0 2
57317: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57318: LD_EXP 53
57322: PUSH
57323: LD_VAR 0 5
57327: ARRAY
57328: PUSH
57329: LD_EXP 54
57333: LESS
57334: IFFALSE 57523
// begin for i := 1 to vehicles do
57336: LD_ADDR_VAR 0 4
57340: PUSH
57341: DOUBLE
57342: LD_INT 1
57344: DEC
57345: ST_TO_ADDR
57346: LD_VAR 0 2
57350: PUSH
57351: FOR_TO
57352: IFFALSE 57521
// begin if hackTanksCaptured [ index ] = hackLimit then
57354: LD_EXP 53
57358: PUSH
57359: LD_VAR 0 5
57363: ARRAY
57364: PUSH
57365: LD_EXP 54
57369: EQUAL
57370: IFFALSE 57374
// break ;
57372: GO 57521
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57374: LD_ADDR_EXP 56
57378: PUSH
57379: LD_EXP 56
57383: PPUSH
57384: LD_VAR 0 5
57388: PPUSH
57389: LD_EXP 56
57393: PUSH
57394: LD_VAR 0 5
57398: ARRAY
57399: PUSH
57400: LD_INT 1
57402: PLUS
57403: PPUSH
57404: CALL_OW 1
57408: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57409: LD_ADDR_EXP 53
57413: PUSH
57414: LD_EXP 53
57418: PPUSH
57419: LD_VAR 0 5
57423: PUSH
57424: LD_EXP 53
57428: PUSH
57429: LD_VAR 0 5
57433: ARRAY
57434: PUSH
57435: LD_INT 1
57437: PLUS
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PPUSH
57443: LD_VAR 0 2
57447: PUSH
57448: LD_VAR 0 4
57452: ARRAY
57453: PUSH
57454: LD_VAR 0 2
57458: PUSH
57459: LD_VAR 0 4
57463: ARRAY
57464: PPUSH
57465: CALL_OW 255
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PPUSH
57474: CALL 15966 0 3
57478: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57479: LD_VAR 0 2
57483: PUSH
57484: LD_VAR 0 4
57488: ARRAY
57489: PPUSH
57490: LD_VAR 0 1
57494: PPUSH
57495: CALL_OW 255
57499: PPUSH
57500: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57504: LD_VAR 0 2
57508: PUSH
57509: LD_VAR 0 4
57513: ARRAY
57514: PPUSH
57515: CALL_OW 141
// end ;
57519: GO 57351
57521: POP
57522: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57523: LD_VAR 0 1
57527: PPUSH
57528: LD_EXP 53
57532: PUSH
57533: LD_VAR 0 5
57537: ARRAY
57538: PUSH
57539: LD_INT 0
57541: PLUS
57542: PPUSH
57543: CALL_OW 505
// end ;
57547: LD_VAR 0 3
57551: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57552: LD_INT 0
57554: PPUSH
57555: PPUSH
57556: PPUSH
57557: PPUSH
// if not hack in hackTanks then
57558: LD_VAR 0 1
57562: PUSH
57563: LD_EXP 52
57567: IN
57568: NOT
57569: IFFALSE 57573
// exit ;
57571: GO 57817
// index := GetElementIndex ( hackTanks , hack ) ;
57573: LD_ADDR_VAR 0 4
57577: PUSH
57578: LD_EXP 52
57582: PPUSH
57583: LD_VAR 0 1
57587: PPUSH
57588: CALL 15749 0 2
57592: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57593: LD_ADDR_VAR 0 3
57597: PUSH
57598: DOUBLE
57599: LD_EXP 53
57603: PUSH
57604: LD_VAR 0 4
57608: ARRAY
57609: INC
57610: ST_TO_ADDR
57611: LD_INT 1
57613: PUSH
57614: FOR_DOWNTO
57615: IFFALSE 57791
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57617: LD_ADDR_VAR 0 5
57621: PUSH
57622: LD_EXP 53
57626: PUSH
57627: LD_VAR 0 4
57631: ARRAY
57632: PUSH
57633: LD_VAR 0 3
57637: ARRAY
57638: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57639: LD_VAR 0 5
57643: PUSH
57644: LD_INT 1
57646: ARRAY
57647: PPUSH
57648: CALL_OW 302
57652: NOT
57653: IFTRUE 57681
57655: PUSH
57656: LD_VAR 0 5
57660: PUSH
57661: LD_INT 1
57663: ARRAY
57664: PPUSH
57665: CALL_OW 255
57669: PUSH
57670: LD_VAR 0 1
57674: PPUSH
57675: CALL_OW 255
57679: NONEQUAL
57680: OR
57681: IFFALSE 57789
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57683: LD_VAR 0 5
57687: PUSH
57688: LD_INT 1
57690: ARRAY
57691: PPUSH
57692: CALL_OW 305
57696: IFFALSE 57724
57698: PUSH
57699: LD_VAR 0 5
57703: PUSH
57704: LD_INT 1
57706: ARRAY
57707: PPUSH
57708: CALL_OW 255
57712: PUSH
57713: LD_VAR 0 1
57717: PPUSH
57718: CALL_OW 255
57722: EQUAL
57723: AND
57724: IFFALSE 57748
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57726: LD_VAR 0 5
57730: PUSH
57731: LD_INT 1
57733: ARRAY
57734: PPUSH
57735: LD_VAR 0 5
57739: PUSH
57740: LD_INT 2
57742: ARRAY
57743: PPUSH
57744: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57748: LD_ADDR_EXP 53
57752: PUSH
57753: LD_EXP 53
57757: PPUSH
57758: LD_VAR 0 4
57762: PPUSH
57763: LD_EXP 53
57767: PUSH
57768: LD_VAR 0 4
57772: ARRAY
57773: PPUSH
57774: LD_VAR 0 3
57778: PPUSH
57779: CALL_OW 3
57783: PPUSH
57784: CALL_OW 1
57788: ST_TO_ADDR
// end ; end ;
57789: GO 57614
57791: POP
57792: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57793: LD_VAR 0 1
57797: PPUSH
57798: LD_EXP 53
57802: PUSH
57803: LD_VAR 0 4
57807: ARRAY
57808: PUSH
57809: LD_INT 0
57811: PLUS
57812: PPUSH
57813: CALL_OW 505
// end ;
57817: LD_VAR 0 2
57821: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57822: LD_INT 0
57824: PPUSH
57825: PPUSH
57826: PPUSH
57827: PPUSH
// if not hack in hackTanks then
57828: LD_VAR 0 1
57832: PUSH
57833: LD_EXP 52
57837: IN
57838: NOT
57839: IFFALSE 57843
// exit ;
57841: GO 57928
// index := GetElementIndex ( hackTanks , hack ) ;
57843: LD_ADDR_VAR 0 5
57847: PUSH
57848: LD_EXP 52
57852: PPUSH
57853: LD_VAR 0 1
57857: PPUSH
57858: CALL 15749 0 2
57862: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57863: LD_ADDR_VAR 0 4
57867: PUSH
57868: DOUBLE
57869: LD_INT 1
57871: DEC
57872: ST_TO_ADDR
57873: LD_EXP 53
57877: PUSH
57878: LD_VAR 0 5
57882: ARRAY
57883: PUSH
57884: FOR_TO
57885: IFFALSE 57926
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57887: LD_EXP 53
57891: PUSH
57892: LD_VAR 0 5
57896: ARRAY
57897: PUSH
57898: LD_VAR 0 4
57902: ARRAY
57903: PUSH
57904: LD_INT 1
57906: ARRAY
57907: PUSH
57908: LD_VAR 0 2
57912: EQUAL
57913: IFFALSE 57924
// KillUnit ( vehicle ) ;
57915: LD_VAR 0 2
57919: PPUSH
57920: CALL_OW 66
57924: GO 57884
57926: POP
57927: POP
// end ;
57928: LD_VAR 0 3
57932: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
57933: LD_EXP 57
57937: NOT
57938: IFFALSE 58071
57940: GO 57942
57942: DISABLE
57943: LD_INT 0
57945: PPUSH
// begin initMiner := true ;
57946: LD_ADDR_EXP 57
57950: PUSH
57951: LD_INT 1
57953: ST_TO_ADDR
// minersList := [ ] ;
57954: LD_ADDR_EXP 58
57958: PUSH
57959: EMPTY
57960: ST_TO_ADDR
// minerMinesList := [ ] ;
57961: LD_ADDR_EXP 59
57965: PUSH
57966: EMPTY
57967: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
57968: LD_ADDR_EXP 60
57972: PUSH
57973: LD_INT 6
57975: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57976: LD_ADDR_VAR 0 1
57980: PUSH
57981: LD_INT 34
57983: PUSH
57984: LD_INT 81
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PPUSH
57991: CALL_OW 69
57995: PUSH
57996: FOR_IN
57997: IFFALSE 58069
// begin if not i in minersList then
57999: LD_VAR 0 1
58003: PUSH
58004: LD_EXP 58
58008: IN
58009: NOT
58010: IFFALSE 58067
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58012: LD_ADDR_EXP 58
58016: PUSH
58017: LD_EXP 58
58021: PPUSH
58022: LD_EXP 58
58026: PUSH
58027: LD_INT 1
58029: PLUS
58030: PPUSH
58031: LD_VAR 0 1
58035: PPUSH
58036: CALL_OW 1
58040: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58041: LD_ADDR_EXP 59
58045: PUSH
58046: LD_EXP 59
58050: PPUSH
58051: LD_EXP 59
58055: PUSH
58056: LD_INT 1
58058: PLUS
58059: PPUSH
58060: EMPTY
58061: PPUSH
58062: CALL_OW 1
58066: ST_TO_ADDR
// end end ;
58067: GO 57996
58069: POP
58070: POP
// end ;
58071: PPOPN 1
58073: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
58074: LD_EXP 57
58078: IFFALSE 58109
58080: PUSH
58081: LD_EXP 59
58085: PPUSH
58086: CALL 13048 0 1
58090: IFTRUE 58108
58092: PUSH
58093: LD_INT 34
58095: PUSH
58096: LD_INT 81
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PPUSH
58103: CALL_OW 69
58107: OR
58108: AND
58109: IFFALSE 58608
58111: GO 58113
58113: DISABLE
58114: LD_INT 0
58116: PPUSH
58117: PPUSH
58118: PPUSH
58119: PPUSH
// begin enable ;
58120: ENABLE
// for i := minerMinesList downto 1 do
58121: LD_ADDR_VAR 0 1
58125: PUSH
58126: DOUBLE
58127: LD_EXP 59
58131: INC
58132: ST_TO_ADDR
58133: LD_INT 1
58135: PUSH
58136: FOR_DOWNTO
58137: IFFALSE 58606
// begin if IsLive ( minersList [ i ] ) then
58139: LD_EXP 58
58143: PUSH
58144: LD_VAR 0 1
58148: ARRAY
58149: PPUSH
58150: CALL_OW 300
58154: IFFALSE 58187
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58156: LD_EXP 58
58160: PUSH
58161: LD_VAR 0 1
58165: ARRAY
58166: PPUSH
58167: LD_EXP 59
58171: PUSH
58172: LD_VAR 0 1
58176: ARRAY
58177: PPUSH
58178: CALL 13048 0 1
58182: PPUSH
58183: CALL_OW 505
// if not minerMinesList [ i ] then
58187: LD_EXP 59
58191: PUSH
58192: LD_VAR 0 1
58196: ARRAY
58197: NOT
58198: IFFALSE 58202
// continue ;
58200: GO 58136
// for j := minerMinesList [ i ] downto 1 do
58202: LD_ADDR_VAR 0 2
58206: PUSH
58207: DOUBLE
58208: LD_EXP 59
58212: PUSH
58213: LD_VAR 0 1
58217: ARRAY
58218: INC
58219: ST_TO_ADDR
58220: LD_INT 1
58222: PUSH
58223: FOR_DOWNTO
58224: IFFALSE 58602
// begin side := GetSide ( minersList [ i ] ) ;
58226: LD_ADDR_VAR 0 3
58230: PUSH
58231: LD_EXP 58
58235: PUSH
58236: LD_VAR 0 1
58240: ARRAY
58241: PPUSH
58242: CALL_OW 255
58246: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58247: LD_EXP 58
58251: PUSH
58252: LD_VAR 0 1
58256: ARRAY
58257: PPUSH
58258: CALL_OW 301
58262: IFTRUE 58282
58264: PUSH
58265: LD_EXP 58
58269: PUSH
58270: LD_VAR 0 1
58274: ARRAY
58275: PPUSH
58276: CALL_OW 305
58280: NOT
58281: OR
58282: IFFALSE 58373
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58284: LD_EXP 59
58288: PUSH
58289: LD_VAR 0 1
58293: ARRAY
58294: PUSH
58295: LD_VAR 0 2
58299: ARRAY
58300: PUSH
58301: LD_INT 1
58303: ARRAY
58304: PPUSH
58305: LD_EXP 59
58309: PUSH
58310: LD_VAR 0 1
58314: ARRAY
58315: PUSH
58316: LD_VAR 0 2
58320: ARRAY
58321: PUSH
58322: LD_INT 2
58324: ARRAY
58325: PPUSH
58326: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58330: LD_ADDR_EXP 59
58334: PUSH
58335: LD_EXP 59
58339: PPUSH
58340: LD_VAR 0 1
58344: PPUSH
58345: LD_EXP 59
58349: PUSH
58350: LD_VAR 0 1
58354: ARRAY
58355: PPUSH
58356: LD_VAR 0 2
58360: PPUSH
58361: CALL_OW 3
58365: PPUSH
58366: CALL_OW 1
58370: ST_TO_ADDR
// continue ;
58371: GO 58223
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58373: LD_ADDR_VAR 0 4
58377: PUSH
58378: LD_EXP 59
58382: PUSH
58383: LD_VAR 0 1
58387: ARRAY
58388: PUSH
58389: LD_VAR 0 2
58393: ARRAY
58394: PUSH
58395: LD_INT 1
58397: ARRAY
58398: PPUSH
58399: LD_EXP 59
58403: PUSH
58404: LD_VAR 0 1
58408: ARRAY
58409: PUSH
58410: LD_VAR 0 2
58414: ARRAY
58415: PUSH
58416: LD_INT 2
58418: ARRAY
58419: PPUSH
58420: CALL_OW 428
58424: ST_TO_ADDR
// if not tmp then
58425: LD_VAR 0 4
58429: NOT
58430: IFFALSE 58434
// continue ;
58432: GO 58223
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58434: LD_VAR 0 4
58438: PUSH
58439: LD_INT 81
58441: PUSH
58442: LD_VAR 0 3
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PPUSH
58451: CALL_OW 69
58455: IN
58456: IFFALSE 58506
58458: PUSH
58459: LD_EXP 59
58463: PUSH
58464: LD_VAR 0 1
58468: ARRAY
58469: PUSH
58470: LD_VAR 0 2
58474: ARRAY
58475: PUSH
58476: LD_INT 1
58478: ARRAY
58479: PPUSH
58480: LD_EXP 59
58484: PUSH
58485: LD_VAR 0 1
58489: ARRAY
58490: PUSH
58491: LD_VAR 0 2
58495: ARRAY
58496: PUSH
58497: LD_INT 2
58499: ARRAY
58500: PPUSH
58501: CALL_OW 458
58505: AND
58506: IFFALSE 58600
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
58508: LD_EXP 59
58512: PUSH
58513: LD_VAR 0 1
58517: ARRAY
58518: PUSH
58519: LD_VAR 0 2
58523: ARRAY
58524: PUSH
58525: LD_INT 1
58527: ARRAY
58528: PPUSH
58529: LD_EXP 59
58533: PUSH
58534: LD_VAR 0 1
58538: ARRAY
58539: PUSH
58540: LD_VAR 0 2
58544: ARRAY
58545: PUSH
58546: LD_INT 2
58548: ARRAY
58549: PPUSH
58550: LD_VAR 0 3
58554: PPUSH
58555: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58559: LD_ADDR_EXP 59
58563: PUSH
58564: LD_EXP 59
58568: PPUSH
58569: LD_VAR 0 1
58573: PPUSH
58574: LD_EXP 59
58578: PUSH
58579: LD_VAR 0 1
58583: ARRAY
58584: PPUSH
58585: LD_VAR 0 2
58589: PPUSH
58590: CALL_OW 3
58594: PPUSH
58595: CALL_OW 1
58599: ST_TO_ADDR
// end ; end ;
58600: GO 58223
58602: POP
58603: POP
// end ;
58604: GO 58136
58606: POP
58607: POP
// end ;
58608: PPOPN 4
58610: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
58611: LD_INT 0
58613: PPUSH
58614: PPUSH
58615: PPUSH
58616: PPUSH
// result := false ;
58617: LD_ADDR_VAR 0 4
58621: PUSH
58622: LD_INT 0
58624: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
58625: LD_VAR 0 1
58629: PPUSH
58630: CALL_OW 264
58634: PUSH
58635: LD_INT 81
58637: EQUAL
58638: NOT
58639: IFFALSE 58643
// exit ;
58641: GO 59013
// side := GetSide ( unit ) ;
58643: LD_ADDR_VAR 0 6
58647: PUSH
58648: LD_VAR 0 1
58652: PPUSH
58653: CALL_OW 255
58657: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
58658: LD_ADDR_VAR 0 5
58662: PUSH
58663: LD_EXP 58
58667: PPUSH
58668: LD_VAR 0 1
58672: PPUSH
58673: CALL 15749 0 2
58677: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
58678: LD_EXP 59
58682: PUSH
58683: LD_VAR 0 5
58687: ARRAY
58688: PUSH
58689: LD_EXP 60
58693: GREATEREQUAL
58694: IFFALSE 58698
// exit ;
58696: GO 59013
// ComMoveXY ( unit , x , y ) ;
58698: LD_VAR 0 1
58702: PPUSH
58703: LD_VAR 0 2
58707: PPUSH
58708: LD_VAR 0 3
58712: PPUSH
58713: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58717: LD_INT 35
58719: PPUSH
58720: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58724: LD_VAR 0 1
58728: PPUSH
58729: LD_VAR 0 2
58733: PPUSH
58734: LD_VAR 0 3
58738: PPUSH
58739: CALL 47795 0 3
58743: NOT
58744: IFFALSE 58757
58746: PUSH
58747: LD_VAR 0 1
58751: PPUSH
58752: CALL_OW 314
58756: AND
58757: IFFALSE 58761
// exit ;
58759: GO 59013
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58761: LD_VAR 0 2
58765: PPUSH
58766: LD_VAR 0 3
58770: PPUSH
58771: CALL_OW 428
58775: PUSH
58776: LD_VAR 0 1
58780: EQUAL
58781: IFFALSE 58795
58783: PUSH
58784: LD_VAR 0 1
58788: PPUSH
58789: CALL_OW 314
58793: NOT
58794: AND
58795: IFFALSE 58717
// if MineAtPos ( x , y ) then
58797: LD_VAR 0 2
58801: PPUSH
58802: LD_VAR 0 3
58806: PPUSH
58807: CALL_OW 458
58811: IFFALSE 58815
// exit ;
58813: GO 59013
// if your_side = side then
58815: LD_OWVAR 2
58819: PUSH
58820: LD_VAR 0 6
58824: EQUAL
58825: IFFALSE 58844
// PlaySoundXY ( x , y , PlantMine ) ;
58827: LD_VAR 0 2
58831: PPUSH
58832: LD_VAR 0 3
58836: PPUSH
58837: LD_STRING PlantMine
58839: PPUSH
58840: CALL_OW 366
// repeat wait ( 1 ) ;
58844: LD_INT 1
58846: PPUSH
58847: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
58851: LD_VAR 0 2
58855: PPUSH
58856: LD_VAR 0 3
58860: PPUSH
58861: LD_VAR 0 6
58865: PPUSH
58866: LD_INT 0
58868: PPUSH
58869: CALL_OW 454
58873: IFFALSE 58844
// if MineAtPos ( x , y ) then
58875: LD_VAR 0 2
58879: PPUSH
58880: LD_VAR 0 3
58884: PPUSH
58885: CALL_OW 458
58889: IFFALSE 59005
// begin for i in minerMinesList [ index ] do
58891: LD_ADDR_VAR 0 7
58895: PUSH
58896: LD_EXP 59
58900: PUSH
58901: LD_VAR 0 5
58905: ARRAY
58906: PUSH
58907: FOR_IN
58908: IFFALSE 58950
// if i [ 1 ] = x and i [ 2 ] = y then
58910: LD_VAR 0 7
58914: PUSH
58915: LD_INT 1
58917: ARRAY
58918: PUSH
58919: LD_VAR 0 2
58923: EQUAL
58924: IFFALSE 58942
58926: PUSH
58927: LD_VAR 0 7
58931: PUSH
58932: LD_INT 2
58934: ARRAY
58935: PUSH
58936: LD_VAR 0 3
58940: EQUAL
58941: AND
58942: IFFALSE 58948
// exit ;
58944: POP
58945: POP
58946: GO 59013
58948: GO 58907
58950: POP
58951: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
58952: LD_ADDR_EXP 59
58956: PUSH
58957: LD_EXP 59
58961: PPUSH
58962: LD_VAR 0 5
58966: PUSH
58967: LD_EXP 59
58971: PUSH
58972: LD_VAR 0 5
58976: ARRAY
58977: PUSH
58978: LD_INT 1
58980: PLUS
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PPUSH
58986: LD_VAR 0 2
58990: PUSH
58991: LD_VAR 0 3
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PPUSH
59000: CALL 15966 0 3
59004: ST_TO_ADDR
// end ; result := true ;
59005: LD_ADDR_VAR 0 4
59009: PUSH
59010: LD_INT 1
59012: ST_TO_ADDR
// end ;
59013: LD_VAR 0 4
59017: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59018: LD_INT 0
59020: PPUSH
59021: PPUSH
59022: PPUSH
// if not unit in minersList then
59023: LD_VAR 0 1
59027: PUSH
59028: LD_EXP 58
59032: IN
59033: NOT
59034: IFFALSE 59038
// exit ;
59036: GO 59245
// index := GetElementIndex ( minersList , unit ) ;
59038: LD_ADDR_VAR 0 6
59042: PUSH
59043: LD_EXP 58
59047: PPUSH
59048: LD_VAR 0 1
59052: PPUSH
59053: CALL 15749 0 2
59057: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59058: LD_ADDR_VAR 0 5
59062: PUSH
59063: DOUBLE
59064: LD_EXP 59
59068: PUSH
59069: LD_VAR 0 6
59073: ARRAY
59074: INC
59075: ST_TO_ADDR
59076: LD_INT 1
59078: PUSH
59079: FOR_DOWNTO
59080: IFFALSE 59243
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59082: LD_EXP 59
59086: PUSH
59087: LD_VAR 0 6
59091: ARRAY
59092: PUSH
59093: LD_VAR 0 5
59097: ARRAY
59098: PUSH
59099: LD_INT 1
59101: ARRAY
59102: PPUSH
59103: LD_EXP 59
59107: PUSH
59108: LD_VAR 0 6
59112: ARRAY
59113: PUSH
59114: LD_VAR 0 5
59118: ARRAY
59119: PUSH
59120: LD_INT 2
59122: ARRAY
59123: PPUSH
59124: LD_VAR 0 2
59128: PPUSH
59129: LD_VAR 0 3
59133: PPUSH
59134: CALL_OW 298
59138: PUSH
59139: LD_INT 6
59141: LESS
59142: IFFALSE 59241
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59144: LD_EXP 59
59148: PUSH
59149: LD_VAR 0 6
59153: ARRAY
59154: PUSH
59155: LD_VAR 0 5
59159: ARRAY
59160: PUSH
59161: LD_INT 1
59163: ARRAY
59164: PPUSH
59165: LD_EXP 59
59169: PUSH
59170: LD_VAR 0 6
59174: ARRAY
59175: PUSH
59176: LD_VAR 0 5
59180: ARRAY
59181: PUSH
59182: LD_INT 2
59184: ARRAY
59185: PPUSH
59186: LD_VAR 0 1
59190: PPUSH
59191: CALL_OW 255
59195: PPUSH
59196: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59200: LD_ADDR_EXP 59
59204: PUSH
59205: LD_EXP 59
59209: PPUSH
59210: LD_VAR 0 6
59214: PPUSH
59215: LD_EXP 59
59219: PUSH
59220: LD_VAR 0 6
59224: ARRAY
59225: PPUSH
59226: LD_VAR 0 5
59230: PPUSH
59231: CALL_OW 3
59235: PPUSH
59236: CALL_OW 1
59240: ST_TO_ADDR
// end ; end ;
59241: GO 59079
59243: POP
59244: POP
// end ;
59245: LD_VAR 0 4
59249: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59250: LD_INT 0
59252: PPUSH
59253: PPUSH
59254: PPUSH
59255: PPUSH
59256: PPUSH
59257: PPUSH
59258: PPUSH
59259: PPUSH
59260: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59261: LD_VAR 0 1
59265: PPUSH
59266: CALL_OW 264
59270: PUSH
59271: LD_INT 81
59273: EQUAL
59274: NOT
59275: IFTRUE 59290
59277: PUSH
59278: LD_VAR 0 1
59282: PUSH
59283: LD_EXP 58
59287: IN
59288: NOT
59289: OR
59290: IFFALSE 59294
// exit ;
59292: GO 59620
// index := GetElementIndex ( minersList , unit ) ;
59294: LD_ADDR_VAR 0 6
59298: PUSH
59299: LD_EXP 58
59303: PPUSH
59304: LD_VAR 0 1
59308: PPUSH
59309: CALL 15749 0 2
59313: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59314: LD_ADDR_VAR 0 8
59318: PUSH
59319: LD_EXP 60
59323: PUSH
59324: LD_EXP 59
59328: PUSH
59329: LD_VAR 0 6
59333: ARRAY
59334: MINUS
59335: ST_TO_ADDR
// if not minesFreeAmount then
59336: LD_VAR 0 8
59340: NOT
59341: IFFALSE 59345
// exit ;
59343: GO 59620
// tmp := [ ] ;
59345: LD_ADDR_VAR 0 7
59349: PUSH
59350: EMPTY
59351: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59352: LD_ADDR_VAR 0 5
59356: PUSH
59357: DOUBLE
59358: LD_INT 1
59360: DEC
59361: ST_TO_ADDR
59362: LD_VAR 0 8
59366: PUSH
59367: FOR_TO
59368: IFFALSE 59567
// begin _d := rand ( 0 , 5 ) ;
59370: LD_ADDR_VAR 0 11
59374: PUSH
59375: LD_INT 0
59377: PPUSH
59378: LD_INT 5
59380: PPUSH
59381: CALL_OW 12
59385: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59386: LD_ADDR_VAR 0 12
59390: PUSH
59391: LD_INT 2
59393: PPUSH
59394: LD_INT 6
59396: PPUSH
59397: CALL_OW 12
59401: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59402: LD_ADDR_VAR 0 9
59406: PUSH
59407: LD_VAR 0 2
59411: PPUSH
59412: LD_VAR 0 11
59416: PPUSH
59417: LD_VAR 0 12
59421: PPUSH
59422: CALL_OW 272
59426: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59427: LD_ADDR_VAR 0 10
59431: PUSH
59432: LD_VAR 0 3
59436: PPUSH
59437: LD_VAR 0 11
59441: PPUSH
59442: LD_VAR 0 12
59446: PPUSH
59447: CALL_OW 273
59451: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59452: LD_VAR 0 9
59456: PPUSH
59457: LD_VAR 0 10
59461: PPUSH
59462: CALL_OW 488
59466: IFFALSE 59490
59468: PUSH
59469: LD_VAR 0 9
59473: PUSH
59474: LD_VAR 0 10
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_VAR 0 7
59487: IN
59488: NOT
59489: AND
59490: IFFALSE 59509
59492: PUSH
59493: LD_VAR 0 9
59497: PPUSH
59498: LD_VAR 0 10
59502: PPUSH
59503: CALL_OW 458
59507: NOT
59508: AND
59509: IFFALSE 59551
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
59511: LD_ADDR_VAR 0 7
59515: PUSH
59516: LD_VAR 0 7
59520: PPUSH
59521: LD_VAR 0 7
59525: PUSH
59526: LD_INT 1
59528: PLUS
59529: PPUSH
59530: LD_VAR 0 9
59534: PUSH
59535: LD_VAR 0 10
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PPUSH
59544: CALL_OW 1
59548: ST_TO_ADDR
59549: GO 59565
// i := i - 1 ;
59551: LD_ADDR_VAR 0 5
59555: PUSH
59556: LD_VAR 0 5
59560: PUSH
59561: LD_INT 1
59563: MINUS
59564: ST_TO_ADDR
// end ;
59565: GO 59367
59567: POP
59568: POP
// for i in tmp do
59569: LD_ADDR_VAR 0 5
59573: PUSH
59574: LD_VAR 0 7
59578: PUSH
59579: FOR_IN
59580: IFFALSE 59618
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59582: LD_VAR 0 1
59586: PPUSH
59587: LD_VAR 0 5
59591: PUSH
59592: LD_INT 1
59594: ARRAY
59595: PPUSH
59596: LD_VAR 0 5
59600: PUSH
59601: LD_INT 2
59603: ARRAY
59604: PPUSH
59605: CALL 58611 0 3
59609: NOT
59610: IFFALSE 59616
// exit ;
59612: POP
59613: POP
59614: GO 59620
59616: GO 59579
59618: POP
59619: POP
// end ;
59620: LD_VAR 0 4
59624: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
59625: LD_INT 0
59627: PPUSH
59628: PPUSH
59629: PPUSH
59630: PPUSH
59631: PPUSH
59632: PPUSH
59633: PPUSH
59634: PPUSH
59635: PPUSH
// if GetClass ( unit ) <> class_sniper then
59636: LD_VAR 0 1
59640: PPUSH
59641: CALL_OW 257
59645: PUSH
59646: LD_INT 5
59648: NONEQUAL
59649: IFFALSE 59653
// exit ;
59651: GO 60123
// dist := 8 ;
59653: LD_ADDR_VAR 0 5
59657: PUSH
59658: LD_INT 8
59660: ST_TO_ADDR
// viewRange := 12 ;
59661: LD_ADDR_VAR 0 8
59665: PUSH
59666: LD_INT 12
59668: ST_TO_ADDR
// side := GetSide ( unit ) ;
59669: LD_ADDR_VAR 0 6
59673: PUSH
59674: LD_VAR 0 1
59678: PPUSH
59679: CALL_OW 255
59683: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59684: LD_INT 61
59686: PPUSH
59687: LD_VAR 0 6
59691: PPUSH
59692: CALL_OW 321
59696: PUSH
59697: LD_INT 2
59699: EQUAL
59700: IFFALSE 59710
// viewRange := 16 ;
59702: LD_ADDR_VAR 0 8
59706: PUSH
59707: LD_INT 16
59709: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59710: LD_VAR 0 1
59714: PPUSH
59715: LD_VAR 0 2
59719: PPUSH
59720: LD_VAR 0 3
59724: PPUSH
59725: CALL_OW 297
59729: PUSH
59730: LD_VAR 0 5
59734: GREATER
59735: IFFALSE 59814
// begin ComMoveXY ( unit , x , y ) ;
59737: LD_VAR 0 1
59741: PPUSH
59742: LD_VAR 0 2
59746: PPUSH
59747: LD_VAR 0 3
59751: PPUSH
59752: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59756: LD_INT 35
59758: PPUSH
59759: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59763: LD_VAR 0 1
59767: PPUSH
59768: LD_VAR 0 2
59772: PPUSH
59773: LD_VAR 0 3
59777: PPUSH
59778: CALL 47795 0 3
59782: NOT
59783: IFFALSE 59787
// exit ;
59785: GO 60123
// until GetDistUnitXY ( unit , x , y ) < dist ;
59787: LD_VAR 0 1
59791: PPUSH
59792: LD_VAR 0 2
59796: PPUSH
59797: LD_VAR 0 3
59801: PPUSH
59802: CALL_OW 297
59806: PUSH
59807: LD_VAR 0 5
59811: LESS
59812: IFFALSE 59756
// end ; ComTurnXY ( unit , x , y ) ;
59814: LD_VAR 0 1
59818: PPUSH
59819: LD_VAR 0 2
59823: PPUSH
59824: LD_VAR 0 3
59828: PPUSH
59829: CALL_OW 118
// repeat if Multiplayer then
59833: LD_OWVAR 4
59837: IFFALSE 59848
// wait ( 35 ) else
59839: LD_INT 35
59841: PPUSH
59842: CALL_OW 67
59846: GO 59855
// wait ( 5 ) ;
59848: LD_INT 5
59850: PPUSH
59851: CALL_OW 67
// _d := GetDir ( unit ) ;
59855: LD_ADDR_VAR 0 11
59859: PUSH
59860: LD_VAR 0 1
59864: PPUSH
59865: CALL_OW 254
59869: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
59870: LD_ADDR_VAR 0 7
59874: PUSH
59875: LD_VAR 0 1
59879: PPUSH
59880: CALL_OW 250
59884: PPUSH
59885: LD_VAR 0 1
59889: PPUSH
59890: CALL_OW 251
59894: PPUSH
59895: LD_VAR 0 2
59899: PPUSH
59900: LD_VAR 0 3
59904: PPUSH
59905: CALL 50431 0 4
59909: ST_TO_ADDR
// until dir = _d ;
59910: LD_VAR 0 7
59914: PUSH
59915: LD_VAR 0 11
59919: EQUAL
59920: IFFALSE 59833
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
59922: LD_ADDR_VAR 0 9
59926: PUSH
59927: LD_VAR 0 1
59931: PPUSH
59932: CALL_OW 250
59936: PPUSH
59937: LD_VAR 0 7
59941: PPUSH
59942: LD_VAR 0 5
59946: PPUSH
59947: CALL_OW 272
59951: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59952: LD_ADDR_VAR 0 10
59956: PUSH
59957: LD_VAR 0 1
59961: PPUSH
59962: CALL_OW 251
59966: PPUSH
59967: LD_VAR 0 7
59971: PPUSH
59972: LD_VAR 0 5
59976: PPUSH
59977: CALL_OW 273
59981: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59982: LD_VAR 0 9
59986: PPUSH
59987: LD_VAR 0 10
59991: PPUSH
59992: CALL_OW 488
59996: NOT
59997: IFFALSE 60001
// exit ;
59999: GO 60123
// ComAnimCustom ( unit , 1 ) ;
60001: LD_VAR 0 1
60005: PPUSH
60006: LD_INT 1
60008: PPUSH
60009: CALL_OW 592
// p := 0 ;
60013: LD_ADDR_VAR 0 12
60017: PUSH
60018: LD_INT 0
60020: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60021: LD_VAR 0 9
60025: PPUSH
60026: LD_VAR 0 10
60030: PPUSH
60031: LD_VAR 0 6
60035: PPUSH
60036: LD_VAR 0 8
60040: PPUSH
60041: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60045: LD_INT 35
60047: PPUSH
60048: CALL_OW 67
// p := Inc ( p ) ;
60052: LD_ADDR_VAR 0 12
60056: PUSH
60057: LD_VAR 0 12
60061: PPUSH
60062: CALL 50387 0 1
60066: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60067: LD_VAR 0 12
60071: PUSH
60072: LD_INT 3
60074: EQUAL
60075: IFTRUE 60089
60077: PUSH
60078: LD_VAR 0 1
60082: PPUSH
60083: CALL_OW 302
60087: NOT
60088: OR
60089: IFTRUE 60102
60091: PUSH
60092: LD_VAR 0 1
60096: PPUSH
60097: CALL_OW 301
60101: OR
60102: IFFALSE 60045
// RemoveSeeing ( _x , _y , side ) ;
60104: LD_VAR 0 9
60108: PPUSH
60109: LD_VAR 0 10
60113: PPUSH
60114: LD_VAR 0 6
60118: PPUSH
60119: CALL_OW 331
// end ;
60123: LD_VAR 0 4
60127: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
60128: LD_INT 0
60130: PPUSH
60131: PPUSH
60132: PPUSH
60133: PPUSH
60134: PPUSH
60135: PPUSH
60136: PPUSH
60137: PPUSH
60138: PPUSH
60139: PPUSH
60140: PPUSH
// if not unit then
60141: LD_VAR 0 1
60145: NOT
60146: IFFALSE 60150
// exit ;
60148: GO 60421
// side := GetSide ( unit ) ;
60150: LD_ADDR_VAR 0 3
60154: PUSH
60155: LD_VAR 0 1
60159: PPUSH
60160: CALL_OW 255
60164: ST_TO_ADDR
// x := GetX ( unit ) ;
60165: LD_ADDR_VAR 0 5
60169: PUSH
60170: LD_VAR 0 1
60174: PPUSH
60175: CALL_OW 250
60179: ST_TO_ADDR
// y := GetY ( unit ) ;
60180: LD_ADDR_VAR 0 6
60184: PUSH
60185: LD_VAR 0 1
60189: PPUSH
60190: CALL_OW 251
60194: ST_TO_ADDR
// r := 8 ;
60195: LD_ADDR_VAR 0 4
60199: PUSH
60200: LD_INT 8
60202: ST_TO_ADDR
// if x - r < 0 then
60203: LD_VAR 0 5
60207: PUSH
60208: LD_VAR 0 4
60212: MINUS
60213: PUSH
60214: LD_INT 0
60216: LESS
60217: IFFALSE 60229
// min_x := 0 else
60219: LD_ADDR_VAR 0 7
60223: PUSH
60224: LD_INT 0
60226: ST_TO_ADDR
60227: GO 60245
// min_x := x - r ;
60229: LD_ADDR_VAR 0 7
60233: PUSH
60234: LD_VAR 0 5
60238: PUSH
60239: LD_VAR 0 4
60243: MINUS
60244: ST_TO_ADDR
// if y - r < 0 then
60245: LD_VAR 0 6
60249: PUSH
60250: LD_VAR 0 4
60254: MINUS
60255: PUSH
60256: LD_INT 0
60258: LESS
60259: IFFALSE 60271
// min_y := 0 else
60261: LD_ADDR_VAR 0 8
60265: PUSH
60266: LD_INT 0
60268: ST_TO_ADDR
60269: GO 60287
// min_y := y - r ;
60271: LD_ADDR_VAR 0 8
60275: PUSH
60276: LD_VAR 0 6
60280: PUSH
60281: LD_VAR 0 4
60285: MINUS
60286: ST_TO_ADDR
// max_x := x + r ;
60287: LD_ADDR_VAR 0 9
60291: PUSH
60292: LD_VAR 0 5
60296: PUSH
60297: LD_VAR 0 4
60301: PLUS
60302: ST_TO_ADDR
// max_y := y + r ;
60303: LD_ADDR_VAR 0 10
60307: PUSH
60308: LD_VAR 0 6
60312: PUSH
60313: LD_VAR 0 4
60317: PLUS
60318: ST_TO_ADDR
// for _x = min_x to max_x do
60319: LD_ADDR_VAR 0 11
60323: PUSH
60324: DOUBLE
60325: LD_VAR 0 7
60329: DEC
60330: ST_TO_ADDR
60331: LD_VAR 0 9
60335: PUSH
60336: FOR_TO
60337: IFFALSE 60419
// for _y = min_y to max_y do
60339: LD_ADDR_VAR 0 12
60343: PUSH
60344: DOUBLE
60345: LD_VAR 0 8
60349: DEC
60350: ST_TO_ADDR
60351: LD_VAR 0 10
60355: PUSH
60356: FOR_TO
60357: IFFALSE 60415
// begin if not ValidHex ( _x , _y ) then
60359: LD_VAR 0 11
60363: PPUSH
60364: LD_VAR 0 12
60368: PPUSH
60369: CALL_OW 488
60373: NOT
60374: IFFALSE 60378
// continue ;
60376: GO 60356
// if MineAtPos ( _x , _y ) then
60378: LD_VAR 0 11
60382: PPUSH
60383: LD_VAR 0 12
60387: PPUSH
60388: CALL_OW 458
60392: IFFALSE 60413
// ViewMineAtPos ( _x , _y , side ) ;
60394: LD_VAR 0 11
60398: PPUSH
60399: LD_VAR 0 12
60403: PPUSH
60404: LD_VAR 0 3
60408: PPUSH
60409: CALL_OW 457
// end ;
60413: GO 60356
60415: POP
60416: POP
60417: GO 60336
60419: POP
60420: POP
// end ;
60421: LD_VAR 0 2
60425: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
60426: LD_INT 0
60428: PPUSH
60429: PPUSH
60430: PPUSH
60431: PPUSH
60432: PPUSH
60433: PPUSH
// if not units then
60434: LD_VAR 0 1
60438: NOT
60439: IFFALSE 60443
// exit ;
60441: GO 60873
// scaners := [ ] ;
60443: LD_ADDR_VAR 0 6
60447: PUSH
60448: EMPTY
60449: ST_TO_ADDR
// for i in units do
60450: LD_ADDR_VAR 0 3
60454: PUSH
60455: LD_VAR 0 1
60459: PUSH
60460: FOR_IN
60461: IFFALSE 60618
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
60463: LD_VAR 0 3
60467: PPUSH
60468: CALL_OW 264
60472: PUSH
60473: LD_INT 11
60475: NONEQUAL
60476: IFTRUE 60490
60478: PUSH
60479: LD_VAR 0 3
60483: PPUSH
60484: CALL_OW 302
60488: NOT
60489: OR
60490: IFTRUE 60507
60492: PUSH
60493: LD_VAR 0 3
60497: PPUSH
60498: CALL_OW 110
60502: PUSH
60503: LD_INT 502
60505: EQUAL
60506: OR
60507: IFFALSE 60511
// continue ;
60509: GO 60460
// ComStop ( i ) ;
60511: LD_VAR 0 3
60515: PPUSH
60516: CALL_OW 141
// x := GetX ( i ) ;
60520: LD_ADDR_VAR 0 4
60524: PUSH
60525: LD_VAR 0 3
60529: PPUSH
60530: CALL_OW 250
60534: ST_TO_ADDR
// y := GetY ( i ) ;
60535: LD_ADDR_VAR 0 5
60539: PUSH
60540: LD_VAR 0 3
60544: PPUSH
60545: CALL_OW 251
60549: ST_TO_ADDR
// if GetSide ( i ) = your_side then
60550: LD_VAR 0 3
60554: PPUSH
60555: CALL_OW 255
60559: PUSH
60560: LD_OWVAR 2
60564: EQUAL
60565: IFFALSE 60584
// PlaySoundXY ( x , y , mineDetector ) ;
60567: LD_VAR 0 4
60571: PPUSH
60572: LD_VAR 0 5
60576: PPUSH
60577: LD_STRING mineDetector
60579: PPUSH
60580: CALL_OW 366
// scaners := Join ( scaners , i ) ;
60584: LD_ADDR_VAR 0 6
60588: PUSH
60589: LD_VAR 0 6
60593: PPUSH
60594: LD_VAR 0 3
60598: PPUSH
60599: CALL 49014 0 2
60603: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
60604: LD_VAR 0 3
60608: PPUSH
60609: LD_INT 502
60611: PPUSH
60612: CALL_OW 109
// end ;
60616: GO 60460
60618: POP
60619: POP
// if not scaners then
60620: LD_VAR 0 6
60624: NOT
60625: IFFALSE 60629
// exit ;
60627: GO 60873
// wait ( 3 ) ;
60629: LD_INT 3
60631: PPUSH
60632: CALL_OW 67
// timer := 6 ;
60636: LD_ADDR_VAR 0 7
60640: PUSH
60641: LD_INT 6
60643: ST_TO_ADDR
// repeat for i in scaners do
60644: LD_ADDR_VAR 0 3
60648: PUSH
60649: LD_VAR 0 6
60653: PUSH
60654: FOR_IN
60655: IFFALSE 60771
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
60657: LD_VAR 0 3
60661: PPUSH
60662: CALL_OW 302
60666: NOT
60667: IFTRUE 60680
60669: PUSH
60670: LD_VAR 0 3
60674: PPUSH
60675: CALL_OW 314
60679: OR
60680: IFTRUE 60711
60682: PUSH
60683: LD_VAR 0 3
60687: PPUSH
60688: CALL_OW 263
60692: PUSH
60693: LD_INT 1
60695: EQUAL
60696: IFFALSE 60710
60698: PUSH
60699: LD_VAR 0 3
60703: PPUSH
60704: CALL_OW 311
60708: NOT
60709: AND
60710: OR
60711: IFFALSE 60755
// begin SetUnitDisplayNumber ( i , 0 ) ;
60713: LD_VAR 0 3
60717: PPUSH
60718: LD_INT 0
60720: PPUSH
60721: CALL_OW 505
// SetTag ( i , 0 ) ;
60725: LD_VAR 0 3
60729: PPUSH
60730: LD_INT 0
60732: PPUSH
60733: CALL_OW 109
// scaners := scaners diff i ;
60737: LD_ADDR_VAR 0 6
60741: PUSH
60742: LD_VAR 0 6
60746: PUSH
60747: LD_VAR 0 3
60751: DIFF
60752: ST_TO_ADDR
// continue ;
60753: GO 60654
// end ; SetUnitDisplayNumber ( i , timer ) ;
60755: LD_VAR 0 3
60759: PPUSH
60760: LD_VAR 0 7
60764: PPUSH
60765: CALL_OW 505
// end ;
60769: GO 60654
60771: POP
60772: POP
// if not scaners then
60773: LD_VAR 0 6
60777: NOT
60778: IFFALSE 60782
// exit ;
60780: GO 60873
// timer := Dec ( timer ) ;
60782: LD_ADDR_VAR 0 7
60786: PUSH
60787: LD_VAR 0 7
60791: PPUSH
60792: CALL 50409 0 1
60796: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60797: LD_INT 35
60799: PPUSH
60800: CALL_OW 67
// until timer = 0 ;
60804: LD_VAR 0 7
60808: PUSH
60809: LD_INT 0
60811: EQUAL
60812: IFFALSE 60644
// if not scaners then
60814: LD_VAR 0 6
60818: NOT
60819: IFFALSE 60823
// exit ;
60821: GO 60873
// for i in scaners do
60823: LD_ADDR_VAR 0 3
60827: PUSH
60828: LD_VAR 0 6
60832: PUSH
60833: FOR_IN
60834: IFFALSE 60871
// begin SetUnitDisplayNumber ( i , 0 ) ;
60836: LD_VAR 0 3
60840: PPUSH
60841: LD_INT 0
60843: PPUSH
60844: CALL_OW 505
// SetTag ( i , 0 ) ;
60848: LD_VAR 0 3
60852: PPUSH
60853: LD_INT 0
60855: PPUSH
60856: CALL_OW 109
// RevealDetectorMine ( i ) ;
60860: LD_VAR 0 3
60864: PPUSH
60865: CALL 60128 0 1
// end ;
60869: GO 60833
60871: POP
60872: POP
// end ;
60873: LD_VAR 0 2
60877: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
60878: LD_INT 0
60880: PPUSH
// if p1 = mine_detector_mode then
60881: LD_VAR 0 2
60885: PUSH
60886: LD_INT 103
60888: EQUAL
60889: IFFALSE 60900
// DetectMine ( units ) ;
60891: LD_VAR 0 1
60895: PPUSH
60896: CALL 60426 0 1
// end ; end_of_file
60900: LD_VAR 0 7
60904: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
60905: LD_EXP 41
60909: IFFALSE 61250
60911: GO 60913
60913: DISABLE
60914: LD_INT 0
60916: PPUSH
60917: PPUSH
60918: PPUSH
// begin mpKingPoints := [ ] ;
60919: LD_ADDR_EXP 61
60923: PUSH
60924: EMPTY
60925: ST_TO_ADDR
// if mpTeamGame then
60926: LD_EXP 13
60930: IFFALSE 60984
// begin for i := 1 to Count ( mpTeams ) do
60932: LD_ADDR_VAR 0 1
60936: PUSH
60937: DOUBLE
60938: LD_INT 1
60940: DEC
60941: ST_TO_ADDR
60942: LD_EXP 12
60946: PPUSH
60947: CALL 13048 0 1
60951: PUSH
60952: FOR_TO
60953: IFFALSE 60980
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
60955: LD_ADDR_EXP 61
60959: PUSH
60960: LD_EXP 61
60964: PPUSH
60965: LD_VAR 0 1
60969: PPUSH
60970: LD_INT 0
60972: PPUSH
60973: CALL_OW 1
60977: ST_TO_ADDR
60978: GO 60952
60980: POP
60981: POP
// end else
60982: GO 61027
// begin for i := 1 to 8 do
60984: LD_ADDR_VAR 0 1
60988: PUSH
60989: DOUBLE
60990: LD_INT 1
60992: DEC
60993: ST_TO_ADDR
60994: LD_INT 8
60996: PUSH
60997: FOR_TO
60998: IFFALSE 61025
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61000: LD_ADDR_EXP 61
61004: PUSH
61005: LD_EXP 61
61009: PPUSH
61010: LD_VAR 0 1
61014: PPUSH
61015: LD_INT 0
61017: PPUSH
61018: CALL_OW 1
61022: ST_TO_ADDR
61023: GO 60997
61025: POP
61026: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
61027: LD_ADDR_VAR 0 3
61031: PUSH
61032: LD_EXP 2
61036: PPUSH
61037: LD_INT 0
61039: PPUSH
61040: CALL_OW 517
61044: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61045: LD_ADDR_VAR 0 1
61049: PUSH
61050: DOUBLE
61051: LD_INT 1
61053: DEC
61054: ST_TO_ADDR
61055: LD_VAR 0 3
61059: PUSH
61060: LD_INT 1
61062: ARRAY
61063: PUSH
61064: FOR_TO
61065: IFFALSE 61132
// for j := 1 to 8 do
61067: LD_ADDR_VAR 0 2
61071: PUSH
61072: DOUBLE
61073: LD_INT 1
61075: DEC
61076: ST_TO_ADDR
61077: LD_INT 8
61079: PUSH
61080: FOR_TO
61081: IFFALSE 61128
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
61083: LD_VAR 0 3
61087: PUSH
61088: LD_INT 1
61090: ARRAY
61091: PUSH
61092: LD_VAR 0 1
61096: ARRAY
61097: PPUSH
61098: LD_VAR 0 3
61102: PUSH
61103: LD_INT 2
61105: ARRAY
61106: PUSH
61107: LD_VAR 0 1
61111: ARRAY
61112: PPUSH
61113: LD_VAR 0 2
61117: PPUSH
61118: LD_INT 12
61120: NEG
61121: PPUSH
61122: CALL_OW 330
61126: GO 61080
61128: POP
61129: POP
61130: GO 61064
61132: POP
61133: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
61134: LD_EXP 36
61138: PPUSH
61139: LD_INT 1
61141: PPUSH
61142: CALL_OW 424
// UpdateCounter ;
61146: CALL 61756 0 0
// repeat wait ( 0 0$1 ) ;
61150: LD_INT 35
61152: PPUSH
61153: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61157: LD_ADDR_VAR 0 3
61161: PUSH
61162: LD_EXP 36
61166: PPUSH
61167: LD_INT 3
61169: PUSH
61170: LD_INT 57
61172: PUSH
61173: EMPTY
61174: LIST
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 50
61182: PUSH
61183: EMPTY
61184: LIST
61185: PUSH
61186: LD_INT 2
61188: PUSH
61189: LD_INT 30
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 30
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: LIST
61218: PPUSH
61219: CALL_OW 70
61223: ST_TO_ADDR
// if not tmp then
61224: LD_VAR 0 3
61228: NOT
61229: IFFALSE 61233
// continue ;
61231: GO 61150
// AddPoints ( tmp ) ;
61233: LD_VAR 0 3
61237: PPUSH
61238: CALL 61434 0 1
// UpdateCounter ;
61242: CALL 61756 0 0
// until false ;
61246: LD_INT 0
61248: IFFALSE 61150
// end ;
61250: PPOPN 3
61252: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61253: LD_EXP 41
61257: IFFALSE 61265
61259: PUSH
61260: LD_EXP 39
61264: AND
61265: IFFALSE 61431
61267: GO 61269
61269: DISABLE
61270: LD_INT 0
61272: PPUSH
61273: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61274: LD_ADDR_VAR 0 2
61278: PUSH
61279: LD_EXP 2
61283: PPUSH
61284: LD_INT 0
61286: PPUSH
61287: CALL_OW 517
61291: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61292: LD_ADDR_VAR 0 1
61296: PUSH
61297: DOUBLE
61298: LD_INT 1
61300: DEC
61301: ST_TO_ADDR
61302: LD_VAR 0 2
61306: PUSH
61307: LD_INT 1
61309: ARRAY
61310: PUSH
61311: FOR_TO
61312: IFFALSE 61353
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61314: LD_VAR 0 2
61318: PUSH
61319: LD_INT 1
61321: ARRAY
61322: PUSH
61323: LD_VAR 0 1
61327: ARRAY
61328: PPUSH
61329: LD_VAR 0 2
61333: PUSH
61334: LD_INT 2
61336: ARRAY
61337: PUSH
61338: LD_VAR 0 1
61342: ARRAY
61343: PPUSH
61344: LD_INT 125
61346: PPUSH
61347: CALL_OW 495
61351: GO 61311
61353: POP
61354: POP
// repeat wait ( mpEmissions ) ;
61355: LD_EXP 39
61359: PPUSH
61360: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
61364: LD_ADDR_VAR 0 1
61368: PUSH
61369: DOUBLE
61370: LD_INT 1
61372: DEC
61373: ST_TO_ADDR
61374: LD_VAR 0 2
61378: PUSH
61379: LD_INT 1
61381: ARRAY
61382: PUSH
61383: FOR_TO
61384: IFFALSE 61425
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
61386: LD_VAR 0 2
61390: PUSH
61391: LD_INT 1
61393: ARRAY
61394: PUSH
61395: LD_VAR 0 1
61399: ARRAY
61400: PPUSH
61401: LD_VAR 0 2
61405: PUSH
61406: LD_INT 2
61408: ARRAY
61409: PUSH
61410: LD_VAR 0 1
61414: ARRAY
61415: PPUSH
61416: LD_INT 15
61418: PPUSH
61419: CALL_OW 495
61423: GO 61383
61425: POP
61426: POP
// until false ;
61427: LD_INT 0
61429: IFFALSE 61355
// end ;
61431: PPOPN 2
61433: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
61434: LD_INT 0
61436: PPUSH
61437: PPUSH
61438: PPUSH
61439: PPUSH
61440: PPUSH
// if mpTeamGame then
61441: LD_EXP 13
61445: IFFALSE 61642
// begin first := depots [ 1 ] ;
61447: LD_ADDR_VAR 0 4
61451: PUSH
61452: LD_VAR 0 1
61456: PUSH
61457: LD_INT 1
61459: ARRAY
61460: ST_TO_ADDR
// side := GetSide ( first ) ;
61461: LD_ADDR_VAR 0 6
61465: PUSH
61466: LD_VAR 0 4
61470: PPUSH
61471: CALL_OW 255
61475: ST_TO_ADDR
// for i := 1 to mpTeams do
61476: LD_ADDR_VAR 0 3
61480: PUSH
61481: DOUBLE
61482: LD_INT 1
61484: DEC
61485: ST_TO_ADDR
61486: LD_EXP 12
61490: PUSH
61491: FOR_TO
61492: IFFALSE 61526
// if side in mpTeams [ i ] then
61494: LD_VAR 0 6
61498: PUSH
61499: LD_EXP 12
61503: PUSH
61504: LD_VAR 0 3
61508: ARRAY
61509: IN
61510: IFFALSE 61524
// begin team := i ;
61512: LD_ADDR_VAR 0 5
61516: PUSH
61517: LD_VAR 0 3
61521: ST_TO_ADDR
// break ;
61522: GO 61526
// end ;
61524: GO 61491
61526: POP
61527: POP
// if not team then
61528: LD_VAR 0 5
61532: NOT
61533: IFFALSE 61537
// exit ;
61535: GO 61751
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61537: LD_EXP 36
61541: PPUSH
61542: LD_INT 81
61544: PUSH
61545: LD_VAR 0 6
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PPUSH
61554: CALL_OW 70
61558: IFFALSE 61562
// exit ;
61560: GO 61751
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
61562: LD_ADDR_EXP 61
61566: PUSH
61567: LD_EXP 61
61571: PPUSH
61572: LD_VAR 0 5
61576: PPUSH
61577: LD_EXP 61
61581: PUSH
61582: LD_VAR 0 5
61586: ARRAY
61587: PUSH
61588: LD_INT 1
61590: PLUS
61591: PPUSH
61592: CALL_OW 1
61596: ST_TO_ADDR
// for i in mpTeams [ team ] do
61597: LD_ADDR_VAR 0 3
61601: PUSH
61602: LD_EXP 12
61606: PUSH
61607: LD_VAR 0 5
61611: ARRAY
61612: PUSH
61613: FOR_IN
61614: IFFALSE 61638
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
61616: LD_VAR 0 3
61620: PPUSH
61621: LD_EXP 61
61625: PUSH
61626: LD_VAR 0 5
61630: ARRAY
61631: PPUSH
61632: CALL_OW 506
61636: GO 61613
61638: POP
61639: POP
// end else
61640: GO 61751
// begin first := depots [ 1 ] ;
61642: LD_ADDR_VAR 0 4
61646: PUSH
61647: LD_VAR 0 1
61651: PUSH
61652: LD_INT 1
61654: ARRAY
61655: ST_TO_ADDR
// side := GetSide ( first ) ;
61656: LD_ADDR_VAR 0 6
61660: PUSH
61661: LD_VAR 0 4
61665: PPUSH
61666: CALL_OW 255
61670: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61671: LD_EXP 36
61675: PPUSH
61676: LD_INT 81
61678: PUSH
61679: LD_VAR 0 6
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PPUSH
61688: CALL_OW 70
61692: IFFALSE 61696
// exit ;
61694: GO 61751
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
61696: LD_ADDR_EXP 61
61700: PUSH
61701: LD_EXP 61
61705: PPUSH
61706: LD_VAR 0 6
61710: PPUSH
61711: LD_EXP 61
61715: PUSH
61716: LD_VAR 0 6
61720: ARRAY
61721: PUSH
61722: LD_INT 1
61724: PLUS
61725: PPUSH
61726: CALL_OW 1
61730: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
61731: LD_VAR 0 6
61735: PPUSH
61736: LD_EXP 61
61740: PUSH
61741: LD_VAR 0 6
61745: ARRAY
61746: PPUSH
61747: CALL_OW 506
// end ; end ;
61751: LD_VAR 0 2
61755: RET
// function UpdateCounter ; var i ; begin
61756: LD_INT 0
61758: PPUSH
61759: PPUSH
// result := [ ] ;
61760: LD_ADDR_VAR 0 1
61764: PUSH
61765: EMPTY
61766: ST_TO_ADDR
// if mpTeamGame then
61767: LD_EXP 13
61771: IFFALSE 61838
// begin for i := 1 to mpTeams do
61773: LD_ADDR_VAR 0 2
61777: PUSH
61778: DOUBLE
61779: LD_INT 1
61781: DEC
61782: ST_TO_ADDR
61783: LD_EXP 12
61787: PUSH
61788: FOR_TO
61789: IFFALSE 61834
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
61791: LD_ADDR_VAR 0 1
61795: PUSH
61796: LD_VAR 0 1
61800: PUSH
61801: LD_STRING #KingoftheHill-Team
61803: PUSH
61804: LD_VAR 0 2
61808: PUSH
61809: LD_EXP 61
61813: PUSH
61814: LD_VAR 0 2
61818: ARRAY
61819: PUSH
61820: LD_EXP 37
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: ADD
61831: ST_TO_ADDR
61832: GO 61788
61834: POP
61835: POP
// end else
61836: GO 61911
// begin for i := 1 to 8 do
61838: LD_ADDR_VAR 0 2
61842: PUSH
61843: DOUBLE
61844: LD_INT 1
61846: DEC
61847: ST_TO_ADDR
61848: LD_INT 8
61850: PUSH
61851: FOR_TO
61852: IFFALSE 61909
// if mpSidePositions [ i ] then
61854: LD_EXP 9
61858: PUSH
61859: LD_VAR 0 2
61863: ARRAY
61864: IFFALSE 61907
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
61866: LD_ADDR_VAR 0 1
61870: PUSH
61871: LD_VAR 0 1
61875: PUSH
61876: LD_STRING #KingoftheHill-Player
61878: PUSH
61879: LD_VAR 0 2
61883: PUSH
61884: LD_EXP 61
61888: PUSH
61889: LD_VAR 0 2
61893: ARRAY
61894: PUSH
61895: LD_EXP 37
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: ADD
61906: ST_TO_ADDR
61907: GO 61851
61909: POP
61910: POP
// end ; mpDisplayStrings := result ;
61911: LD_ADDR_EXP 40
61915: PUSH
61916: LD_VAR 0 1
61920: ST_TO_ADDR
// end ;
61921: LD_VAR 0 1
61925: RET
// export function HowMuchPointsKing ( side ) ; begin
61926: LD_INT 0
61928: PPUSH
// result := HowMuchPoints ( side ) ;
61929: LD_ADDR_VAR 0 2
61933: PUSH
61934: LD_VAR 0 1
61938: PPUSH
61939: CALL 61949 0 1
61943: ST_TO_ADDR
// end ;
61944: LD_VAR 0 2
61948: RET
// function HowMuchPoints ( side ) ; var i ; begin
61949: LD_INT 0
61951: PPUSH
61952: PPUSH
// if mpTeamGame then
61953: LD_EXP 13
61957: IFFALSE 62026
// begin for i := 1 to Count ( mpTeams ) do
61959: LD_ADDR_VAR 0 3
61963: PUSH
61964: DOUBLE
61965: LD_INT 1
61967: DEC
61968: ST_TO_ADDR
61969: LD_EXP 12
61973: PPUSH
61974: CALL 13048 0 1
61978: PUSH
61979: FOR_TO
61980: IFFALSE 62022
// begin if side in mpTeams [ i ] then
61982: LD_VAR 0 1
61986: PUSH
61987: LD_EXP 12
61991: PUSH
61992: LD_VAR 0 3
61996: ARRAY
61997: IN
61998: IFFALSE 62020
// begin result := mpKingPoints [ i ] ;
62000: LD_ADDR_VAR 0 2
62004: PUSH
62005: LD_EXP 61
62009: PUSH
62010: LD_VAR 0 3
62014: ARRAY
62015: ST_TO_ADDR
// exit ;
62016: POP
62017: POP
62018: GO 62042
// end ; end ;
62020: GO 61979
62022: POP
62023: POP
// end else
62024: GO 62042
// result := mpKingPoints [ side ] ;
62026: LD_ADDR_VAR 0 2
62030: PUSH
62031: LD_EXP 61
62035: PUSH
62036: LD_VAR 0 1
62040: ARRAY
62041: ST_TO_ADDR
// end ;
62042: LD_VAR 0 2
62046: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
62047: LD_EXP 41
62051: IFFALSE 62059
62053: PUSH
62054: CALL 62471 0 0
62058: AND
62059: IFFALSE 62067
62061: PUSH
62062: LD_OWVAR 4
62066: AND
62067: IFFALSE 62320
62069: GO 62071
62071: DISABLE
62072: LD_INT 0
62074: PPUSH
62075: PPUSH
// begin canWin := false ;
62076: LD_ADDR_VAR 0 2
62080: PUSH
62081: LD_INT 0
62083: ST_TO_ADDR
// if not HasPower ( your_side ) then
62084: LD_OWVAR 2
62088: PPUSH
62089: CALL 62513 0 1
62093: NOT
62094: IFFALSE 62105
// begin Multiplayer_Loose_Message ;
62096: CALL_OW 521
// enable ( mpLose ) ;
62100: LD_INT 102
62102: ENABLE_MARKED
// end else
62103: GO 62320
// begin if not EnemiesInGame then
62105: CALL 62323 0 0
62109: NOT
62110: IFFALSE 62117
// begin enable ( mpWin ) ;
62112: LD_INT 101
62114: ENABLE_MARKED
// exit ;
62115: GO 62320
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
62117: LD_ADDR_VAR 0 2
62121: PUSH
62122: LD_OWVAR 2
62126: PPUSH
62127: CALL 61949 0 1
62131: PUSH
62132: LD_EXP 37
62136: GREATEREQUAL
62137: IFFALSE 62150
62139: PUSH
62140: LD_OWVAR 2
62144: PPUSH
62145: CALL 62513 0 1
62149: AND
62150: ST_TO_ADDR
// for i := 1 to 8 do
62151: LD_ADDR_VAR 0 1
62155: PUSH
62156: DOUBLE
62157: LD_INT 1
62159: DEC
62160: ST_TO_ADDR
62161: LD_INT 8
62163: PUSH
62164: FOR_TO
62165: IFFALSE 62306
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62167: LD_EXP 9
62171: PUSH
62172: LD_VAR 0 1
62176: ARRAY
62177: IFFALSE 62190
62179: PUSH
62180: LD_VAR 0 1
62184: PPUSH
62185: CALL_OW 108
62189: AND
62190: IFFALSE 62204
62192: PUSH
62193: LD_VAR 0 1
62197: PUSH
62198: LD_OWVAR 2
62202: NONEQUAL
62203: AND
62204: IFFALSE 62304
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62206: LD_EXP 10
62210: PUSH
62211: LD_VAR 0 1
62215: ARRAY
62216: NOT
62217: IFTRUE 62265
62219: PUSH
62220: LD_EXP 10
62224: PUSH
62225: LD_VAR 0 1
62229: ARRAY
62230: PUSH
62231: LD_EXP 10
62235: PUSH
62236: LD_OWVAR 2
62240: ARRAY
62241: NONEQUAL
62242: IFFALSE 62264
62244: PUSH
62245: LD_OWVAR 2
62249: PPUSH
62250: LD_VAR 0 1
62254: PPUSH
62255: CALL_OW 81
62259: PUSH
62260: LD_INT 1
62262: NONEQUAL
62263: AND
62264: OR
62265: IFFALSE 62304
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62267: LD_VAR 0 1
62271: PPUSH
62272: CALL 61949 0 1
62276: PUSH
62277: LD_EXP 37
62281: GREATEREQUAL
62282: IFFALSE 62295
62284: PUSH
62285: LD_VAR 0 1
62289: PPUSH
62290: CALL 62513 0 1
62294: AND
62295: IFFALSE 62304
// begin enable ( mpLose ) ;
62297: LD_INT 102
62299: ENABLE_MARKED
// exit ;
62300: POP
62301: POP
62302: GO 62320
// end ;
62304: GO 62164
62306: POP
62307: POP
// if canWin then
62308: LD_VAR 0 2
62312: IFFALSE 62319
// enable ( mpWin ) else
62314: LD_INT 101
62316: ENABLE_MARKED
62317: GO 62320
// enable ;
62319: ENABLE
// end ; end ;
62320: PPOPN 2
62322: END
// function EnemiesInGame ; var i ; begin
62323: LD_INT 0
62325: PPUSH
62326: PPUSH
// result := false ;
62327: LD_ADDR_VAR 0 1
62331: PUSH
62332: LD_INT 0
62334: ST_TO_ADDR
// for i := 1 to 8 do
62335: LD_ADDR_VAR 0 2
62339: PUSH
62340: DOUBLE
62341: LD_INT 1
62343: DEC
62344: ST_TO_ADDR
62345: LD_INT 8
62347: PUSH
62348: FOR_TO
62349: IFFALSE 62464
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62351: LD_VAR 0 2
62355: PUSH
62356: LD_OWVAR 2
62360: NONEQUAL
62361: IFFALSE 62374
62363: PUSH
62364: LD_VAR 0 2
62368: PPUSH
62369: CALL 62513 0 1
62373: AND
62374: IFFALSE 62387
62376: PUSH
62377: LD_VAR 0 2
62381: PPUSH
62382: CALL_OW 108
62386: AND
62387: IFFALSE 62462
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62389: LD_EXP 10
62393: PUSH
62394: LD_VAR 0 2
62398: ARRAY
62399: NOT
62400: IFTRUE 62448
62402: PUSH
62403: LD_EXP 10
62407: PUSH
62408: LD_VAR 0 2
62412: ARRAY
62413: PUSH
62414: LD_EXP 10
62418: PUSH
62419: LD_OWVAR 2
62423: ARRAY
62424: NONEQUAL
62425: IFFALSE 62447
62427: PUSH
62428: LD_OWVAR 2
62432: PPUSH
62433: LD_VAR 0 2
62437: PPUSH
62438: CALL_OW 81
62442: PUSH
62443: LD_INT 1
62445: NONEQUAL
62446: AND
62447: OR
62448: IFFALSE 62462
// begin result := true ;
62450: LD_ADDR_VAR 0 1
62454: PUSH
62455: LD_INT 1
62457: ST_TO_ADDR
// exit ;
62458: POP
62459: POP
62460: GO 62466
// end ;
62462: GO 62348
62464: POP
62465: POP
// end ;
62466: LD_VAR 0 1
62470: RET
// function CanWinLoose ; begin
62471: LD_INT 0
62473: PPUSH
// result := true ;
62474: LD_ADDR_VAR 0 1
62478: PUSH
62479: LD_INT 1
62481: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
62482: CALL_OW 531
62486: IFFALSE 62498
62488: PUSH
62489: CALL_OW 519
62493: PUSH
62494: LD_INT 1
62496: GREATER
62497: AND
62498: IFFALSE 62508
// result := false ;
62500: LD_ADDR_VAR 0 1
62504: PUSH
62505: LD_INT 0
62507: ST_TO_ADDR
// end ;
62508: LD_VAR 0 1
62512: RET
// function HasPower ( i ) ; begin
62513: LD_INT 0
62515: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
62516: LD_ADDR_VAR 0 2
62520: PUSH
62521: LD_INT 22
62523: PUSH
62524: LD_VAR 0 1
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 2
62535: PUSH
62536: LD_INT 21
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 33
62548: PUSH
62549: LD_INT 3
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 33
62558: PUSH
62559: LD_INT 5
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PPUSH
62576: CALL_OW 69
62580: ST_TO_ADDR
// end ; end_of_file
62581: LD_VAR 0 2
62585: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62586: PPOPN 6
62588: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62589: LD_INT 0
62591: PPUSH
// begin if not units then
62592: LD_VAR 0 1
62596: NOT
62597: IFFALSE 62601
// exit ;
62599: GO 62635
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62601: LD_VAR 0 1
62605: PPUSH
62606: LD_VAR 0 2
62610: PPUSH
62611: LD_VAR 0 3
62615: PPUSH
62616: LD_VAR 0 4
62620: PPUSH
62621: LD_VAR 0 5
62625: PPUSH
62626: LD_VAR 0 6
62630: PPUSH
62631: CALL 60878 0 6
// end ;
62635: PPOPN 7
62637: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62638: LD_EXP 5
62642: PUSH
62643: LD_INT 4
62645: EQUAL
62646: IFFALSE 62682
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62648: LD_STRING setGameDifficulty(
62650: PUSH
62651: LD_OWVAR 67
62655: STR
62656: PUSH
62657: LD_STRING )
62659: STR
62660: PPUSH
62661: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62665: LD_STRING displayDifficulty(
62667: PUSH
62668: LD_OWVAR 67
62672: STR
62673: PUSH
62674: LD_STRING )
62676: STR
62677: PPUSH
62678: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62682: CALL 62711 0 0
// end ; end_of_file
62686: PPOPN 1
62688: END
// every 0 0$1 do
62689: GO 62691
62691: DISABLE
// begin enable ;
62692: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62693: LD_STRING updateTimer(
62695: PUSH
62696: LD_OWVAR 1
62700: STR
62701: PUSH
62702: LD_STRING );
62704: STR
62705: PPUSH
62706: CALL_OW 559
// end ;
62710: END
// export function SOS_MapStart ( ) ; begin
62711: LD_INT 0
62713: PPUSH
// UpdateFactoryWaypoints ( ) ;
62714: CALL 63645 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62718: CALL 63897 0 0
// ParseMultiDataToLua ( ) ;
62722: CALL 64044 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62726: LD_STRING setSpecLogoNumber(
62728: PUSH
62729: LD_INT 2
62731: STR
62732: PUSH
62733: LD_STRING ,
62735: STR
62736: PUSH
62737: LD_INT 1
62739: STR
62740: PUSH
62741: LD_STRING )
62743: STR
62744: PPUSH
62745: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62749: LD_STRING setSpecLogoNumber(
62751: PUSH
62752: LD_INT 3
62754: STR
62755: PUSH
62756: LD_STRING ,
62758: STR
62759: PUSH
62760: LD_INT 2
62762: STR
62763: PUSH
62764: LD_STRING )
62766: STR
62767: PPUSH
62768: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62772: LD_STRING setSpecLogoNumber(
62774: PUSH
62775: LD_INT 4
62777: STR
62778: PUSH
62779: LD_STRING ,
62781: STR
62782: PUSH
62783: LD_INT 3
62785: STR
62786: PUSH
62787: LD_STRING )
62789: STR
62790: PPUSH
62791: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62795: LD_STRING setSpecLogoNumber(
62797: PUSH
62798: LD_INT 5
62800: STR
62801: PUSH
62802: LD_STRING ,
62804: STR
62805: PUSH
62806: LD_INT 4
62808: STR
62809: PUSH
62810: LD_STRING )
62812: STR
62813: PPUSH
62814: CALL_OW 559
// end ;
62818: LD_VAR 0 1
62822: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62823: LD_INT 0
62825: PPUSH
62826: PPUSH
62827: PPUSH
62828: PPUSH
62829: PPUSH
62830: PPUSH
62831: PPUSH
62832: PPUSH
62833: PPUSH
// for i := 1 to 8 do
62834: LD_ADDR_VAR 0 2
62838: PUSH
62839: DOUBLE
62840: LD_INT 1
62842: DEC
62843: ST_TO_ADDR
62844: LD_INT 8
62846: PUSH
62847: FOR_TO
62848: IFFALSE 63233
// begin if mpSidePositions [ i ] then
62850: LD_EXP 9
62854: PUSH
62855: LD_VAR 0 2
62859: ARRAY
62860: IFFALSE 63231
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62862: LD_ADDR_VAR 0 7
62866: PUSH
62867: LD_INT 22
62869: PUSH
62870: LD_VAR 0 2
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 21
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PPUSH
62893: CALL_OW 69
62897: PPUSH
62898: CALL 13048 0 1
62902: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62903: LD_ADDR_VAR 0 9
62907: PUSH
62908: LD_INT 22
62910: PUSH
62911: LD_VAR 0 2
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 2
62922: PUSH
62923: LD_INT 30
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 30
62935: PUSH
62936: LD_INT 1
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: LIST
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PPUSH
62952: CALL_OW 69
62956: ST_TO_ADDR
// crates := 0 ;
62957: LD_ADDR_VAR 0 4
62961: PUSH
62962: LD_INT 0
62964: ST_TO_ADDR
// oil := 0 ;
62965: LD_ADDR_VAR 0 5
62969: PUSH
62970: LD_INT 0
62972: ST_TO_ADDR
// sib := 0 ;
62973: LD_ADDR_VAR 0 6
62977: PUSH
62978: LD_INT 0
62980: ST_TO_ADDR
// if bases then
62981: LD_VAR 0 9
62985: IFFALSE 63091
// begin for j in bases do
62987: LD_ADDR_VAR 0 3
62991: PUSH
62992: LD_VAR 0 9
62996: PUSH
62997: FOR_IN
62998: IFFALSE 63089
// begin base := GetBase ( j ) ;
63000: LD_ADDR_VAR 0 8
63004: PUSH
63005: LD_VAR 0 3
63009: PPUSH
63010: CALL_OW 274
63014: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63015: LD_ADDR_VAR 0 4
63019: PUSH
63020: LD_VAR 0 4
63024: PUSH
63025: LD_VAR 0 8
63029: PPUSH
63030: LD_INT 1
63032: PPUSH
63033: CALL_OW 275
63037: PLUS
63038: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63039: LD_ADDR_VAR 0 5
63043: PUSH
63044: LD_VAR 0 5
63048: PUSH
63049: LD_VAR 0 8
63053: PPUSH
63054: LD_INT 2
63056: PPUSH
63057: CALL_OW 275
63061: PLUS
63062: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63063: LD_ADDR_VAR 0 6
63067: PUSH
63068: LD_VAR 0 6
63072: PUSH
63073: LD_VAR 0 8
63077: PPUSH
63078: LD_INT 3
63080: PPUSH
63081: CALL_OW 275
63085: PLUS
63086: ST_TO_ADDR
// end ;
63087: GO 62997
63089: POP
63090: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63091: LD_STRING setSpecText(
63093: PUSH
63094: LD_VAR 0 2
63098: STR
63099: PUSH
63100: LD_STRING ,
63102: STR
63103: PUSH
63104: LD_INT 2
63106: STR
63107: PUSH
63108: LD_STRING ,
63110: STR
63111: PUSH
63112: LD_VAR 0 4
63116: STR
63117: PUSH
63118: LD_STRING )
63120: STR
63121: PPUSH
63122: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63126: LD_STRING setSpecText(
63128: PUSH
63129: LD_VAR 0 2
63133: STR
63134: PUSH
63135: LD_STRING ,
63137: STR
63138: PUSH
63139: LD_INT 3
63141: STR
63142: PUSH
63143: LD_STRING ,
63145: STR
63146: PUSH
63147: LD_VAR 0 5
63151: STR
63152: PUSH
63153: LD_STRING )
63155: STR
63156: PPUSH
63157: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63161: LD_STRING setSpecText(
63163: PUSH
63164: LD_VAR 0 2
63168: STR
63169: PUSH
63170: LD_STRING ,
63172: STR
63173: PUSH
63174: LD_INT 4
63176: STR
63177: PUSH
63178: LD_STRING ,
63180: STR
63181: PUSH
63182: LD_VAR 0 6
63186: STR
63187: PUSH
63188: LD_STRING )
63190: STR
63191: PPUSH
63192: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63196: LD_STRING setSpecText(
63198: PUSH
63199: LD_VAR 0 2
63203: STR
63204: PUSH
63205: LD_STRING ,
63207: STR
63208: PUSH
63209: LD_INT 5
63211: STR
63212: PUSH
63213: LD_STRING ,
63215: STR
63216: PUSH
63217: LD_VAR 0 7
63221: STR
63222: PUSH
63223: LD_STRING )
63225: STR
63226: PPUSH
63227: CALL_OW 559
// end ; end ;
63231: GO 62847
63233: POP
63234: POP
// end ;
63235: LD_VAR 0 1
63239: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63240: LD_INT 2
63242: PUSH
63243: LD_INT 30
63245: PUSH
63246: LD_INT 0
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 30
63255: PUSH
63256: LD_INT 1
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: LIST
63267: PPUSH
63268: CALL_OW 69
63272: IFFALSE 63282
63274: GO 63276
63276: DISABLE
// begin enable ;
63277: ENABLE
// UpdateSpectatorBar ;
63278: CALL 62823 0 0
// end ;
63282: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63283: LD_INT 0
63285: PPUSH
// end ;
63286: LD_VAR 0 12
63290: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63291: LD_INT 0
63293: PPUSH
63294: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63295: LD_VAR 0 1
63299: NOT
63300: IFTRUE 63319
63302: PUSH
63303: LD_VAR 0 2
63307: PPUSH
63308: LD_VAR 0 3
63312: PPUSH
63313: CALL_OW 488
63317: NOT
63318: OR
63319: IFTRUE 63354
63321: PUSH
63322: LD_VAR 0 1
63326: PPUSH
63327: CALL_OW 266
63331: PUSH
63332: LD_INT 3
63334: NONEQUAL
63335: IFFALSE 63353
63337: PUSH
63338: LD_VAR 0 1
63342: PPUSH
63343: CALL_OW 247
63347: PUSH
63348: LD_INT 1
63350: EQUAL
63351: NOT
63352: AND
63353: OR
63354: IFFALSE 63358
// exit ;
63356: GO 63640
// if GetType ( factory ) = unit_human then
63358: LD_VAR 0 1
63362: PPUSH
63363: CALL_OW 247
63367: PUSH
63368: LD_INT 1
63370: EQUAL
63371: IFFALSE 63388
// factory := IsInUnit ( factory ) ;
63373: LD_ADDR_VAR 0 1
63377: PUSH
63378: LD_VAR 0 1
63382: PPUSH
63383: CALL_OW 310
63387: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63388: LD_VAR 0 1
63392: PPUSH
63393: CALL_OW 266
63397: PUSH
63398: LD_INT 3
63400: NONEQUAL
63401: IFFALSE 63405
// exit ;
63403: GO 63640
// for i := 1 to Count ( factoryWaypoints ) do
63405: LD_ADDR_VAR 0 5
63409: PUSH
63410: DOUBLE
63411: LD_INT 1
63413: DEC
63414: ST_TO_ADDR
63415: LD_EXP 62
63419: PPUSH
63420: CALL 13048 0 1
63424: PUSH
63425: FOR_TO
63426: IFFALSE 63588
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63428: LD_VAR 0 2
63432: PPUSH
63433: LD_VAR 0 3
63437: PPUSH
63438: CALL_OW 428
63442: PUSH
63443: LD_EXP 62
63447: PUSH
63448: LD_VAR 0 5
63452: ARRAY
63453: PUSH
63454: LD_INT 2
63456: ARRAY
63457: EQUAL
63458: IFFALSE 63490
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63460: LD_ADDR_EXP 62
63464: PUSH
63465: LD_EXP 62
63469: PPUSH
63470: LD_VAR 0 5
63474: PPUSH
63475: CALL_OW 3
63479: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63480: CALL 63645 0 0
// exit ;
63484: POP
63485: POP
63486: GO 63640
// end else
63488: GO 63586
// if factory = factoryWaypoints [ i ] [ 2 ] then
63490: LD_VAR 0 1
63494: PUSH
63495: LD_EXP 62
63499: PUSH
63500: LD_VAR 0 5
63504: ARRAY
63505: PUSH
63506: LD_INT 2
63508: ARRAY
63509: EQUAL
63510: IFFALSE 63586
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63512: LD_ADDR_EXP 62
63516: PUSH
63517: LD_EXP 62
63521: PPUSH
63522: LD_VAR 0 5
63526: PPUSH
63527: CALL_OW 3
63531: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63532: LD_ADDR_EXP 62
63536: PUSH
63537: LD_EXP 62
63541: PPUSH
63542: LD_VAR 0 1
63546: PPUSH
63547: CALL_OW 255
63551: PUSH
63552: LD_VAR 0 1
63556: PUSH
63557: LD_VAR 0 2
63561: PUSH
63562: LD_VAR 0 3
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: PPUSH
63573: CALL 49014 0 2
63577: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63578: CALL 63645 0 0
// exit ;
63582: POP
63583: POP
63584: GO 63640
// end ; end ;
63586: GO 63425
63588: POP
63589: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63590: LD_ADDR_EXP 62
63594: PUSH
63595: LD_EXP 62
63599: PPUSH
63600: LD_VAR 0 1
63604: PPUSH
63605: CALL_OW 255
63609: PUSH
63610: LD_VAR 0 1
63614: PUSH
63615: LD_VAR 0 2
63619: PUSH
63620: LD_VAR 0 3
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: PPUSH
63631: CALL 49014 0 2
63635: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63636: CALL 63645 0 0
// end ;
63640: LD_VAR 0 4
63644: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63645: LD_INT 0
63647: PPUSH
63648: PPUSH
63649: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63650: LD_STRING resetFactoryWaypoint();
63652: PPUSH
63653: CALL_OW 559
// if factoryWaypoints then
63657: LD_EXP 62
63661: IFFALSE 63782
// begin list := factoryWaypoints ;
63663: LD_ADDR_VAR 0 3
63667: PUSH
63668: LD_EXP 62
63672: ST_TO_ADDR
// for i := 1 to list do
63673: LD_ADDR_VAR 0 2
63677: PUSH
63678: DOUBLE
63679: LD_INT 1
63681: DEC
63682: ST_TO_ADDR
63683: LD_VAR 0 3
63687: PUSH
63688: FOR_TO
63689: IFFALSE 63780
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63691: LD_STRING setFactoryWaypointXY(
63693: PUSH
63694: LD_VAR 0 3
63698: PUSH
63699: LD_VAR 0 2
63703: ARRAY
63704: PUSH
63705: LD_INT 1
63707: ARRAY
63708: STR
63709: PUSH
63710: LD_STRING ,
63712: STR
63713: PUSH
63714: LD_VAR 0 3
63718: PUSH
63719: LD_VAR 0 2
63723: ARRAY
63724: PUSH
63725: LD_INT 2
63727: ARRAY
63728: STR
63729: PUSH
63730: LD_STRING ,
63732: STR
63733: PUSH
63734: LD_VAR 0 3
63738: PUSH
63739: LD_VAR 0 2
63743: ARRAY
63744: PUSH
63745: LD_INT 3
63747: ARRAY
63748: STR
63749: PUSH
63750: LD_STRING ,
63752: STR
63753: PUSH
63754: LD_VAR 0 3
63758: PUSH
63759: LD_VAR 0 2
63763: ARRAY
63764: PUSH
63765: LD_INT 4
63767: ARRAY
63768: STR
63769: PUSH
63770: LD_STRING )
63772: STR
63773: PPUSH
63774: CALL_OW 559
63778: GO 63688
63780: POP
63781: POP
// end ; end ;
63782: LD_VAR 0 1
63786: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63787: LD_INT 0
63789: PPUSH
// if HexInfo ( x , y ) = warehouse then
63790: LD_VAR 0 2
63794: PPUSH
63795: LD_VAR 0 3
63799: PPUSH
63800: CALL_OW 428
63804: PUSH
63805: LD_VAR 0 1
63809: EQUAL
63810: IFFALSE 63837
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63812: LD_ADDR_EXP 64
63816: PUSH
63817: LD_EXP 64
63821: PPUSH
63822: LD_VAR 0 1
63826: PPUSH
63827: LD_INT 0
63829: PPUSH
63830: CALL_OW 1
63834: ST_TO_ADDR
63835: GO 63888
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63837: LD_ADDR_EXP 64
63841: PUSH
63842: LD_EXP 64
63846: PPUSH
63847: LD_VAR 0 1
63851: PPUSH
63852: LD_VAR 0 1
63856: PPUSH
63857: CALL_OW 255
63861: PUSH
63862: LD_VAR 0 1
63866: PUSH
63867: LD_VAR 0 2
63871: PUSH
63872: LD_VAR 0 3
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: PPUSH
63883: CALL_OW 1
63887: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63888: CALL 63897 0 0
// end ;
63892: LD_VAR 0 4
63896: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63897: LD_INT 0
63899: PPUSH
63900: PPUSH
63901: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63902: LD_STRING resetWarehouseGatheringPoints();
63904: PPUSH
63905: CALL_OW 559
// if warehouseGatheringPoints then
63909: LD_EXP 64
63913: IFFALSE 64039
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63915: LD_ADDR_VAR 0 3
63919: PUSH
63920: LD_EXP 64
63924: PPUSH
63925: CALL 52948 0 1
63929: ST_TO_ADDR
// for i := 1 to list do
63930: LD_ADDR_VAR 0 2
63934: PUSH
63935: DOUBLE
63936: LD_INT 1
63938: DEC
63939: ST_TO_ADDR
63940: LD_VAR 0 3
63944: PUSH
63945: FOR_TO
63946: IFFALSE 64037
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63948: LD_STRING setWarehouseGatheringPointXY(
63950: PUSH
63951: LD_VAR 0 3
63955: PUSH
63956: LD_VAR 0 2
63960: ARRAY
63961: PUSH
63962: LD_INT 1
63964: ARRAY
63965: STR
63966: PUSH
63967: LD_STRING ,
63969: STR
63970: PUSH
63971: LD_VAR 0 3
63975: PUSH
63976: LD_VAR 0 2
63980: ARRAY
63981: PUSH
63982: LD_INT 2
63984: ARRAY
63985: STR
63986: PUSH
63987: LD_STRING ,
63989: STR
63990: PUSH
63991: LD_VAR 0 3
63995: PUSH
63996: LD_VAR 0 2
64000: ARRAY
64001: PUSH
64002: LD_INT 3
64004: ARRAY
64005: STR
64006: PUSH
64007: LD_STRING ,
64009: STR
64010: PUSH
64011: LD_VAR 0 3
64015: PUSH
64016: LD_VAR 0 2
64020: ARRAY
64021: PUSH
64022: LD_INT 4
64024: ARRAY
64025: STR
64026: PUSH
64027: LD_STRING )
64029: STR
64030: PPUSH
64031: CALL_OW 559
64035: GO 63945
64037: POP
64038: POP
// end ; end ;
64039: LD_VAR 0 1
64043: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64044: LD_INT 0
64046: PPUSH
64047: PPUSH
// if not mpSidePositions then
64048: LD_EXP 9
64052: NOT
64053: IFFALSE 64057
// exit ;
64055: GO 64128
// result :=  ;
64057: LD_ADDR_VAR 0 1
64061: PUSH
64062: LD_STRING 
64064: ST_TO_ADDR
// for i := 1 to 8 do
64065: LD_ADDR_VAR 0 2
64069: PUSH
64070: DOUBLE
64071: LD_INT 1
64073: DEC
64074: ST_TO_ADDR
64075: LD_INT 8
64077: PUSH
64078: FOR_TO
64079: IFFALSE 64109
// begin result := result & mpSidePositions [ i ] & ; ;
64081: LD_ADDR_VAR 0 1
64085: PUSH
64086: LD_VAR 0 1
64090: PUSH
64091: LD_EXP 9
64095: PUSH
64096: LD_VAR 0 2
64100: ARRAY
64101: STR
64102: PUSH
64103: LD_STRING ;
64105: STR
64106: ST_TO_ADDR
// end ;
64107: GO 64078
64109: POP
64110: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64111: LD_STRING setMultiplayerRealPosition("
64113: PUSH
64114: LD_VAR 0 1
64118: STR
64119: PUSH
64120: LD_STRING ");
64122: STR
64123: PPUSH
64124: CALL_OW 559
// end ;
64128: LD_VAR 0 1
64132: RET
