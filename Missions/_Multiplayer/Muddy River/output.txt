// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 323 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 1628 0 1
  44: PPUSH
  45: CALL 5211 0 1
// Multiplayer_Start ;
  49: CALL 3533 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 3649 0 0
// end ;
  69: END
// export debug , game , side_bot , artifact_get , base_names ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// side_bot := 2 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: ST_TO_ADDR
// artifact_get := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// base_names := [ base_a , base_b , base_c , base_d , base_e , base_f , base_g , base_h , base_i , base_j , base_k , base_l , base_m , base_n , base_o , base_p , base_r , base_s , base_t , base_u , base_w , base_x , base_y , base_z ] ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_STRING base_a
 104: PUSH
 105: LD_STRING base_b
 107: PUSH
 108: LD_STRING base_c
 110: PUSH
 111: LD_STRING base_d
 113: PUSH
 114: LD_STRING base_e
 116: PUSH
 117: LD_STRING base_f
 119: PUSH
 120: LD_STRING base_g
 122: PUSH
 123: LD_STRING base_h
 125: PUSH
 126: LD_STRING base_i
 128: PUSH
 129: LD_STRING base_j
 131: PUSH
 132: LD_STRING base_k
 134: PUSH
 135: LD_STRING base_l
 137: PUSH
 138: LD_STRING base_m
 140: PUSH
 141: LD_STRING base_n
 143: PUSH
 144: LD_STRING base_o
 146: PUSH
 147: LD_STRING base_p
 149: PUSH
 150: LD_STRING base_r
 152: PUSH
 153: LD_STRING base_s
 155: PUSH
 156: LD_STRING base_t
 158: PUSH
 159: LD_STRING base_u
 161: PUSH
 162: LD_STRING base_w
 164: PUSH
 165: LD_STRING base_x
 167: PUSH
 168: LD_STRING base_y
 170: PUSH
 171: LD_STRING base_z
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: LIST
 197: LIST
 198: LIST
 199: ST_TO_ADDR
// end ;
 200: LD_VAR 0 1
 204: RET
// every 0 0$01 trigger game and not debug_strings do
 205: LD_EXP 2
 209: PUSH
 210: LD_OWVAR 48
 214: NOT
 215: AND
 216: IFFALSE 232
 218: GO 220
 220: DISABLE
// begin enable ;
 221: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 222: LD_ADDR_OWVAR 47
 226: PUSH
 227: CALL 4147 0 0
 231: ST_TO_ADDR
// end ;
 232: END
// function Debuger ; var i ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
// if not debug then
 237: LD_EXP 1
 241: NOT
 242: IFFALSE 246
// exit ;
 244: GO 318
// game_speed := 5 ;
 246: LD_ADDR_OWVAR 65
 250: PUSH
 251: LD_INT 5
 253: ST_TO_ADDR
// uc_side := 1 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 1
 261: ST_TO_ADDR
// uc_nation := 1 ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 1
 269: ST_TO_ADDR
// for i = 1 to 10 do
 270: LD_ADDR_VAR 0 2
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_INT 10
 282: PUSH
 283: FOR_TO
 284: IFFALSE 316
// begin PrepareHuman ( false , 1 , 10 ) ;
 286: LD_INT 0
 288: PPUSH
 289: LD_INT 1
 291: PPUSH
 292: LD_INT 10
 294: PPUSH
 295: CALL_OW 380
// PlaceUnitArea ( CreateHuman , player_1_hum , false ) ;
 299: CALL_OW 44
 303: PPUSH
 304: LD_INT 9
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: CALL_OW 49
// end ;
 314: GO 283
 316: POP
 317: POP
// end ; end_of_file
 318: LD_VAR 0 1
 322: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_ape_amount , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_reinforcements_spawned , multi_support_arrive_time ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 323: LD_INT 0
 325: PPUSH
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
// multi_settings_counter := 6 ;
 330: LD_ADDR_EXP 18
 334: PUSH
 335: LD_INT 6
 337: ST_TO_ADDR
// if Multiplayer then
 338: LD_OWVAR 4
 342: IFFALSE 522
// begin your_side := mp_player_side ;
 344: LD_ADDR_OWVAR 2
 348: PUSH
 349: LD_OWVAR 7
 353: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 354: LD_ADDR_EXP 6
 358: PUSH
 359: LD_OWVAR 6
 363: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 364: LD_ADDR_EXP 7
 368: PUSH
 369: LD_OWVAR 17
 373: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 374: LD_ADDR_EXP 8
 378: PUSH
 379: LD_OWVAR 15
 383: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 384: LD_ADDR_EXP 9
 388: PUSH
 389: LD_OWVAR 16
 393: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 394: LD_ADDR_EXP 10
 398: PUSH
 399: EMPTY
 400: PUSH
 401: EMPTY
 402: LIST
 403: ST_TO_ADDR
// for i in mp_teams do
 404: LD_ADDR_VAR 0 2
 408: PUSH
 409: LD_OWVAR 12
 413: PUSH
 414: FOR_IN
 415: IFFALSE 458
// if i then
 417: LD_VAR 0 2
 421: IFFALSE 456
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 423: LD_ADDR_EXP 10
 427: PUSH
 428: LD_EXP 10
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: LD_EXP 10
 440: PUSH
 441: LD_INT 1
 443: ARRAY
 444: PUSH
 445: LD_VAR 0 2
 449: UNION
 450: PPUSH
 451: CALL_OW 1
 455: ST_TO_ADDR
 456: GO 414
 458: POP
 459: POP
// for i := 1 to multi_settings_counter do
 460: LD_ADDR_VAR 0 2
 464: PUSH
 465: DOUBLE
 466: LD_INT 1
 468: DEC
 469: ST_TO_ADDR
 470: LD_EXP 18
 474: PUSH
 475: FOR_TO
 476: IFFALSE 518
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 478: LD_ADDR_EXP 17
 482: PUSH
 483: LD_EXP 17
 487: PPUSH
 488: LD_EXP 17
 492: PUSH
 493: LD_INT 1
 495: PLUS
 496: PPUSH
 497: LD_VAR 0 2
 501: PPUSH
 502: CALL_OW 426
 506: PUSH
 507: LD_INT 1
 509: PLUS
 510: PPUSH
 511: CALL_OW 1
 515: ST_TO_ADDR
 516: GO 475
 518: POP
 519: POP
// end else
 520: GO 704
// begin your_side := 1 ;
 522: LD_ADDR_OWVAR 2
 526: PUSH
 527: LD_INT 1
 529: ST_TO_ADDR
// multi_gametype := 1 ;
 530: LD_ADDR_EXP 6
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// multi_sides := [ 2 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 538: LD_ADDR_EXP 7
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: LD_INT 0
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: LD_INT 0
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: ST_TO_ADDR
// multi_side_teams := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 577: LD_ADDR_EXP 8
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: LD_INT 0
 587: PUSH
 588: LD_INT 1
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 0
 602: PUSH
 603: LD_INT 0
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// multi_nations := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 616: LD_ADDR_EXP 9
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: LD_INT 1
 629: PUSH
 630: LD_INT 0
 632: PUSH
 633: LD_INT 0
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: ST_TO_ADDR
// multi_teams := [ [ 1 , 3 ] ] ;
 655: LD_ADDR_EXP 10
 659: PUSH
 660: LD_INT 1
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: ST_TO_ADDR
// multi_settings := [ 2 , 2 , 1 , 3 , 1 , 3 ] ;
 673: LD_ADDR_EXP 17
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: LD_INT 2
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 3
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 704: LD_ADDR_EXP 11
 708: PUSH
 709: LD_INT 0
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: LD_INT 0
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 0
 729: PUSH
 730: LD_INT 0
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 743: LD_ADDR_EXP 14
 747: PUSH
 748: LD_INT 0
 750: PUSH
 751: LD_INT 0
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 0
 765: PUSH
 766: LD_INT 0
 768: PUSH
 769: LD_INT 0
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 782: LD_ADDR_EXP 25
 786: PUSH
 787: LD_INT 0
 789: PUSH
 790: LD_INT 0
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: LD_INT 0
 798: PUSH
 799: LD_INT 0
 801: PUSH
 802: LD_INT 0
 804: PUSH
 805: LD_INT 0
 807: PUSH
 808: LD_INT 0
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: ST_TO_ADDR
// multi_teamgame := true ;
 821: LD_ADDR_EXP 15
 825: PUSH
 826: LD_INT 1
 828: ST_TO_ADDR
// multi_allowed_nations := [ 1 ] ;
 829: LD_ADDR_EXP 13
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: ST_TO_ADDR
// multi_custom_commanders := true ;
 840: LD_ADDR_EXP 16
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// multi_commanders := [ ] ;
 848: LD_ADDR_EXP 24
 852: PUSH
 853: EMPTY
 854: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 855: LD_ADDR_EXP 27
 859: PUSH
 860: EMPTY
 861: ST_TO_ADDR
// multi_reinforcements_spawned := 0 ;
 862: LD_ADDR_EXP 28
 866: PUSH
 867: LD_INT 0
 869: ST_TO_ADDR
// multi_players_amount := 0 ;
 870: LD_ADDR_EXP 26
 874: PUSH
 875: LD_INT 0
 877: ST_TO_ADDR
// multi_pos_area := [ [ player_1_hum , player_1_veh ] , [ player_2_hum , player_2_veh ] , [ player_3_hum , player_3_veh ] ] ;
 878: LD_ADDR_EXP 12
 882: PUSH
 883: LD_INT 9
 885: PUSH
 886: LD_INT 8
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 27
 895: PUSH
 896: LD_INT 26
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PUSH
 903: LD_INT 29
 905: PUSH
 906: LD_INT 28
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
// for i := 1 to 8 do
 918: LD_ADDR_VAR 0 2
 922: PUSH
 923: DOUBLE
 924: LD_INT 1
 926: DEC
 927: ST_TO_ADDR
 928: LD_INT 8
 930: PUSH
 931: FOR_TO
 932: IFFALSE 1261
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
 934: LD_VAR 0 2
 938: PPUSH
 939: CALL_OW 530
 943: IFFALSE 1101
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
 945: LD_ADDR_EXP 11
 949: PUSH
 950: LD_EXP 11
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_INT 1
 962: PPUSH
 963: CALL_OW 1
 967: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
 968: LD_ADDR_EXP 9
 972: PUSH
 973: LD_EXP 9
 977: PPUSH
 978: LD_VAR 0 2
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 1
 990: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
 991: LD_ADDR_EXP 7
 995: PUSH
 996: LD_EXP 7
1000: PPUSH
1001: LD_VAR 0 2
1005: PPUSH
1006: LD_INT 0
1008: PPUSH
1009: CALL_OW 1
1013: ST_TO_ADDR
// for j = 1 to multi_teams do
1014: LD_ADDR_VAR 0 3
1018: PUSH
1019: DOUBLE
1020: LD_INT 1
1022: DEC
1023: ST_TO_ADDR
1024: LD_EXP 10
1028: PUSH
1029: FOR_TO
1030: IFFALSE 1099
// begin if i in multi_teams [ j ] then
1032: LD_VAR 0 2
1036: PUSH
1037: LD_EXP 10
1041: PUSH
1042: LD_VAR 0 3
1046: ARRAY
1047: IN
1048: IFFALSE 1097
// begin tmp := multi_teams [ j ] diff i ;
1050: LD_ADDR_VAR 0 5
1054: PUSH
1055: LD_EXP 10
1059: PUSH
1060: LD_VAR 0 3
1064: ARRAY
1065: PUSH
1066: LD_VAR 0 2
1070: DIFF
1071: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1072: LD_ADDR_EXP 10
1076: PUSH
1077: LD_EXP 10
1081: PPUSH
1082: LD_VAR 0 3
1086: PPUSH
1087: LD_VAR 0 5
1091: PPUSH
1092: CALL_OW 1
1096: ST_TO_ADDR
// end ; end ;
1097: GO 1029
1099: POP
1100: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1101: LD_EXP 9
1105: PUSH
1106: LD_VAR 0 2
1110: ARRAY
1111: PUSH
1112: LD_EXP 9
1116: PUSH
1117: LD_VAR 0 2
1121: ARRAY
1122: PUSH
1123: LD_EXP 13
1127: IN
1128: NOT
1129: AND
1130: IFFALSE 1171
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1132: LD_ADDR_EXP 9
1136: PUSH
1137: LD_EXP 9
1141: PPUSH
1142: LD_VAR 0 2
1146: PPUSH
1147: LD_EXP 13
1151: PUSH
1152: LD_INT 1
1154: PPUSH
1155: LD_EXP 13
1159: PPUSH
1160: CALL_OW 12
1164: ARRAY
1165: PPUSH
1166: CALL_OW 1
1170: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1171: LD_EXP 9
1175: PUSH
1176: LD_VAR 0 2
1180: ARRAY
1181: NOT
1182: PUSH
1183: LD_EXP 7
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: NOT
1194: AND
1195: PUSH
1196: LD_EXP 11
1200: PUSH
1201: LD_VAR 0 2
1205: ARRAY
1206: NOT
1207: AND
1208: IFFALSE 1233
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1210: LD_ADDR_EXP 14
1214: PUSH
1215: LD_EXP 14
1219: PPUSH
1220: LD_VAR 0 2
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: CALL_OW 1
1232: ST_TO_ADDR
// if multi_sides [ i ] then
1233: LD_EXP 7
1237: PUSH
1238: LD_VAR 0 2
1242: ARRAY
1243: IFFALSE 1259
// multi_players_amount := multi_players_amount + 1 ;
1245: LD_ADDR_EXP 26
1249: PUSH
1250: LD_EXP 26
1254: PUSH
1255: LD_INT 1
1257: PLUS
1258: ST_TO_ADDR
// end ;
1259: GO 931
1261: POP
1262: POP
// for i in multi_teams do
1263: LD_ADDR_VAR 0 2
1267: PUSH
1268: LD_EXP 10
1272: PUSH
1273: FOR_IN
1274: IFFALSE 1382
// begin for j = 2 to i do
1276: LD_ADDR_VAR 0 3
1280: PUSH
1281: DOUBLE
1282: LD_INT 2
1284: DEC
1285: ST_TO_ADDR
1286: LD_VAR 0 2
1290: PUSH
1291: FOR_TO
1292: IFFALSE 1378
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1294: LD_VAR 0 2
1298: PUSH
1299: LD_VAR 0 3
1303: ARRAY
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 343
// for x = 1 to j - 1 do
1318: LD_ADDR_VAR 0 4
1322: PUSH
1323: DOUBLE
1324: LD_INT 1
1326: DEC
1327: ST_TO_ADDR
1328: LD_VAR 0 3
1332: PUSH
1333: LD_INT 1
1335: MINUS
1336: PUSH
1337: FOR_TO
1338: IFFALSE 1374
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1340: LD_VAR 0 2
1344: PUSH
1345: LD_VAR 0 3
1349: ARRAY
1350: PPUSH
1351: LD_VAR 0 2
1355: PUSH
1356: LD_VAR 0 4
1360: ARRAY
1361: PPUSH
1362: LD_INT 1
1364: PPUSH
1365: LD_INT 1
1367: PPUSH
1368: CALL_OW 80
1372: GO 1337
1374: POP
1375: POP
// end ;
1376: GO 1291
1378: POP
1379: POP
// end ;
1380: GO 1273
1382: POP
1383: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1384: LD_ADDR_OWVAR 67
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: LD_INT 2
1394: PUSH
1395: LD_INT 3
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_EXP 17
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: ARRAY
1412: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
1413: LD_ADDR_EXP 19
1417: PUSH
1418: LD_INT 9
1420: PUSH
1421: LD_INT 12
1423: PUSH
1424: LD_INT 15
1426: PUSH
1427: LD_INT 18
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: PUSH
1436: LD_EXP 17
1440: PUSH
1441: LD_INT 2
1443: ARRAY
1444: ARRAY
1445: ST_TO_ADDR
// multi_skill_level := [ 5 , 6 , 8 , 10 ] [ multi_settings [ 3 ] ] ;
1446: LD_ADDR_EXP 20
1450: PUSH
1451: LD_INT 5
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 8
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: PUSH
1469: LD_EXP 17
1473: PUSH
1474: LD_INT 3
1476: ARRAY
1477: ARRAY
1478: ST_TO_ADDR
// multi_crates_spawn := [ [ 9000 , 0 0$32 ] , [ 12000 , 0 0$22 ] , [ 14000 , 0 0$14 ] , [ 16000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1479: LD_ADDR_EXP 21
1483: PUSH
1484: LD_INT 9000
1486: PUSH
1487: LD_INT 1120
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 12000
1496: PUSH
1497: LD_INT 770
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 14000
1506: PUSH
1507: LD_INT 490
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: PUSH
1514: LD_INT 16000
1516: PUSH
1517: LD_INT 420
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_EXP 17
1534: PUSH
1535: LD_INT 4
1537: ARRAY
1538: ARRAY
1539: ST_TO_ADDR
// multi_ape_amount := [ 6 , 8 , 10 ] [ multi_settings [ 5 ] ] ;
1540: LD_ADDR_EXP 22
1544: PUSH
1545: LD_INT 6
1547: PUSH
1548: LD_INT 8
1550: PUSH
1551: LD_INT 10
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: LIST
1558: PUSH
1559: LD_EXP 17
1563: PUSH
1564: LD_INT 5
1566: ARRAY
1567: ARRAY
1568: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1569: LD_ADDR_EXP 23
1573: PUSH
1574: LD_INT 0
1576: PUSH
1577: LD_INT 1
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: PUSH
1588: LD_EXP 17
1592: PUSH
1593: LD_INT 6
1595: ARRAY
1596: ARRAY
1597: ST_TO_ADDR
// multi_support_arrive_time := [ 15 15$0 , 18 18$0 , 21 21$0 ] [ Difficulty ] ;
1598: LD_ADDR_EXP 29
1602: PUSH
1603: LD_INT 31500
1605: PUSH
1606: LD_INT 37800
1608: PUSH
1609: LD_INT 44100
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: PUSH
1617: LD_OWVAR 67
1621: ARRAY
1622: ST_TO_ADDR
// end ;
1623: LD_VAR 0 1
1627: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1628: LD_INT 0
1630: PPUSH
1631: PPUSH
// if not multi_sides [ 2 ] then
1632: LD_EXP 7
1636: PUSH
1637: LD_INT 2
1639: ARRAY
1640: NOT
1641: IFFALSE 1655
// begin result := preferSide ;
1643: LD_ADDR_VAR 0 2
1647: PUSH
1648: LD_VAR 0 1
1652: ST_TO_ADDR
// exit ;
1653: GO 1702
// end ; for i := 1 to 8 do
1655: LD_ADDR_VAR 0 3
1659: PUSH
1660: DOUBLE
1661: LD_INT 1
1663: DEC
1664: ST_TO_ADDR
1665: LD_INT 8
1667: PUSH
1668: FOR_TO
1669: IFFALSE 1700
// if not multi_sides [ i ] then
1671: LD_EXP 7
1675: PUSH
1676: LD_VAR 0 3
1680: ARRAY
1681: NOT
1682: IFFALSE 1698
// begin result := i ;
1684: LD_ADDR_VAR 0 2
1688: PUSH
1689: LD_VAR 0 3
1693: ST_TO_ADDR
// exit ;
1694: POP
1695: POP
1696: GO 1702
// end ;
1698: GO 1668
1700: POP
1701: POP
// end ;
1702: LD_VAR 0 2
1706: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1707: LD_INT 0
1709: PPUSH
// uc_side := side ;
1710: LD_ADDR_OWVAR 20
1714: PUSH
1715: LD_VAR 0 1
1719: ST_TO_ADDR
// uc_nation := 1 ;
1720: LD_ADDR_OWVAR 21
1724: PUSH
1725: LD_INT 1
1727: ST_TO_ADDR
// hc_importance := 100 ;
1728: LD_ADDR_OWVAR 32
1732: PUSH
1733: LD_INT 100
1735: ST_TO_ADDR
// hc_class := 1 ;
1736: LD_ADDR_OWVAR 28
1740: PUSH
1741: LD_INT 1
1743: ST_TO_ADDR
// if num = 1 then
1744: LD_VAR 0 2
1748: PUSH
1749: LD_INT 1
1751: EQUAL
1752: IFFALSE 1834
// begin hc_gallery := us ;
1754: LD_ADDR_OWVAR 33
1758: PUSH
1759: LD_STRING us
1761: ST_TO_ADDR
// hc_face_number := 5 ;
1762: LD_ADDR_OWVAR 34
1766: PUSH
1767: LD_INT 5
1769: ST_TO_ADDR
// hc_name := John Macmilan ;
1770: LD_ADDR_OWVAR 26
1774: PUSH
1775: LD_STRING John Macmilan
1777: ST_TO_ADDR
// hc_sex := sex_male ;
1778: LD_ADDR_OWVAR 27
1782: PUSH
1783: LD_INT 1
1785: ST_TO_ADDR
// hc_skills := [ 7 , 2 , 4 , 4 ] ;
1786: LD_ADDR_OWVAR 31
1790: PUSH
1791: LD_INT 7
1793: PUSH
1794: LD_INT 2
1796: PUSH
1797: LD_INT 4
1799: PUSH
1800: LD_INT 4
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1809: LD_ADDR_OWVAR 29
1813: PUSH
1814: LD_INT 11
1816: PUSH
1817: LD_INT 10
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: ST_TO_ADDR
// result := CreateHuman ;
1824: LD_ADDR_VAR 0 3
1828: PUSH
1829: CALL_OW 44
1833: ST_TO_ADDR
// end ; if num = 2 then
1834: LD_VAR 0 2
1838: PUSH
1839: LD_INT 2
1841: EQUAL
1842: IFFALSE 1924
// begin hc_gallery := us ;
1844: LD_ADDR_OWVAR 33
1848: PUSH
1849: LD_STRING us
1851: ST_TO_ADDR
// hc_face_number := 2 ;
1852: LD_ADDR_OWVAR 34
1856: PUSH
1857: LD_INT 2
1859: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
1860: LD_ADDR_OWVAR 26
1864: PUSH
1865: LD_STRING Lucy Donaldson
1867: ST_TO_ADDR
// hc_sex := sex_female ;
1868: LD_ADDR_OWVAR 27
1872: PUSH
1873: LD_INT 2
1875: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 3 ] ;
1876: LD_ADDR_OWVAR 31
1880: PUSH
1881: LD_INT 6
1883: PUSH
1884: LD_INT 3
1886: PUSH
1887: LD_INT 4
1889: PUSH
1890: LD_INT 3
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: ST_TO_ADDR
// hc_attr := [ 9 , 12 ] ;
1899: LD_ADDR_OWVAR 29
1903: PUSH
1904: LD_INT 9
1906: PUSH
1907: LD_INT 12
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: ST_TO_ADDR
// result := CreateHuman ;
1914: LD_ADDR_VAR 0 3
1918: PUSH
1919: CALL_OW 44
1923: ST_TO_ADDR
// end ; if num = 3 then
1924: LD_VAR 0 2
1928: PUSH
1929: LD_INT 3
1931: EQUAL
1932: IFFALSE 2014
// begin hc_gallery := us ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING us
1941: ST_TO_ADDR
// hc_face_number := 7 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 7
1949: ST_TO_ADDR
// hc_name := Arthur Powell ;
1950: LD_ADDR_OWVAR 26
1954: PUSH
1955: LD_STRING Arthur Powell
1957: ST_TO_ADDR
// hc_sex := sex_male ;
1958: LD_ADDR_OWVAR 27
1962: PUSH
1963: LD_INT 1
1965: ST_TO_ADDR
// hc_skills := [ 8 , 2 , 5 , 2 ] ;
1966: LD_ADDR_OWVAR 31
1970: PUSH
1971: LD_INT 8
1973: PUSH
1974: LD_INT 2
1976: PUSH
1977: LD_INT 5
1979: PUSH
1980: LD_INT 2
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1989: LD_ADDR_OWVAR 29
1993: PUSH
1994: LD_INT 10
1996: PUSH
1997: LD_INT 11
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: ST_TO_ADDR
// result := CreateHuman ;
2004: LD_ADDR_VAR 0 3
2008: PUSH
2009: CALL_OW 44
2013: ST_TO_ADDR
// end ; end ;
2014: LD_VAR 0 3
2018: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , cl , un , veh , tmp , copy , people_amount ; begin
2019: LD_INT 0
2021: PPUSH
2022: PPUSH
2023: PPUSH
2024: PPUSH
2025: PPUSH
2026: PPUSH
2027: PPUSH
2028: PPUSH
2029: PPUSH
// for i := 1 to 8 do
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: DOUBLE
2036: LD_INT 1
2038: DEC
2039: ST_TO_ADDR
2040: LD_INT 8
2042: PUSH
2043: FOR_TO
2044: IFFALSE 2934
// begin if not multi_sides [ i ] then
2046: LD_EXP 7
2050: PUSH
2051: LD_VAR 0 2
2055: ARRAY
2056: NOT
2057: IFFALSE 2061
// continue ;
2059: GO 2043
// if multi_custom_commanders then
2061: LD_EXP 16
2065: IFFALSE 2157
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2067: LD_ADDR_VAR 0 5
2071: PUSH
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_EXP 7
2081: PUSH
2082: LD_VAR 0 2
2086: ARRAY
2087: PPUSH
2088: CALL 1707 0 2
2092: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2093: LD_ADDR_EXP 24
2097: PUSH
2098: LD_EXP 24
2102: PPUSH
2103: LD_EXP 24
2107: PUSH
2108: LD_INT 1
2110: PLUS
2111: PPUSH
2112: LD_VAR 0 5
2116: PPUSH
2117: CALL_OW 2
2121: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2122: LD_VAR 0 5
2126: PPUSH
2127: LD_EXP 12
2131: PUSH
2132: LD_EXP 7
2136: PUSH
2137: LD_VAR 0 2
2141: ARRAY
2142: ARRAY
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end else
2155: GO 2368
// begin uc_side := i ;
2157: LD_ADDR_OWVAR 20
2161: PUSH
2162: LD_VAR 0 2
2166: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2167: LD_ADDR_OWVAR 21
2171: PUSH
2172: LD_EXP 9
2176: PUSH
2177: LD_VAR 0 2
2181: ARRAY
2182: ST_TO_ADDR
// hc_importance := 100 ;
2183: LD_ADDR_OWVAR 32
2187: PUSH
2188: LD_INT 100
2190: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2191: LD_INT 0
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: LD_EXP 20
2201: PPUSH
2202: CALL_OW 380
// if multiplayer then
2206: LD_OWVAR 4
2210: IFFALSE 2268
// begin hc_name := mp_sides_players_names [ i ] ;
2212: LD_ADDR_OWVAR 26
2216: PUSH
2217: LD_OWVAR 19
2221: PUSH
2222: LD_VAR 0 2
2226: ARRAY
2227: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2228: LD_ADDR_OWVAR 33
2232: PUSH
2233: LD_STRING MULTIAVATARS
2235: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2236: LD_ADDR_OWVAR 34
2240: PUSH
2241: LD_VAR 0 2
2245: PPUSH
2246: CALL_OW 525
2250: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2251: LD_ADDR_OWVAR 27
2255: PUSH
2256: LD_VAR 0 2
2260: PPUSH
2261: CALL_OW 526
2265: ST_TO_ADDR
// end else
2266: GO 2300
// begin hc_gallery :=  ;
2268: LD_ADDR_OWVAR 33
2272: PUSH
2273: LD_STRING 
2275: ST_TO_ADDR
// hc_name :=  ;
2276: LD_ADDR_OWVAR 26
2280: PUSH
2281: LD_STRING 
2283: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2284: LD_ADDR_OWVAR 27
2288: PUSH
2289: LD_INT 1
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: CALL_OW 12
2299: ST_TO_ADDR
// end ; un := CreateHuman ;
2300: LD_ADDR_VAR 0 5
2304: PUSH
2305: CALL_OW 44
2309: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2310: LD_VAR 0 5
2314: PPUSH
2315: LD_EXP 12
2319: PUSH
2320: LD_EXP 7
2324: PUSH
2325: LD_VAR 0 2
2329: ARRAY
2330: ARRAY
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: LD_INT 0
2338: PPUSH
2339: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2343: LD_ADDR_EXP 24
2347: PUSH
2348: LD_EXP 24
2352: PPUSH
2353: LD_VAR 0 2
2357: PPUSH
2358: LD_VAR 0 5
2362: PPUSH
2363: CALL_OW 1
2367: ST_TO_ADDR
// end ; InitHc ;
2368: CALL_OW 19
// InitUc ;
2372: CALL_OW 18
// uc_side := i ;
2376: LD_ADDR_OWVAR 20
2380: PUSH
2381: LD_VAR 0 2
2385: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2386: LD_ADDR_OWVAR 21
2390: PUSH
2391: LD_EXP 9
2395: PUSH
2396: LD_VAR 0 2
2400: ARRAY
2401: ST_TO_ADDR
// hc_gallery :=  ;
2402: LD_ADDR_OWVAR 33
2406: PUSH
2407: LD_STRING 
2409: ST_TO_ADDR
// hc_name :=  ;
2410: LD_ADDR_OWVAR 26
2414: PUSH
2415: LD_STRING 
2417: ST_TO_ADDR
// hc_importance := 0 ;
2418: LD_ADDR_OWVAR 32
2422: PUSH
2423: LD_INT 0
2425: ST_TO_ADDR
// cl := 1 ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: LD_INT 1
2433: ST_TO_ADDR
// for j = 2 to multi_pep_amount do
2434: LD_ADDR_VAR 0 3
2438: PUSH
2439: DOUBLE
2440: LD_INT 2
2442: DEC
2443: ST_TO_ADDR
2444: LD_EXP 19
2448: PUSH
2449: FOR_TO
2450: IFFALSE 2822
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2452: LD_VAR 0 3
2456: PUSH
2457: LD_INT 1
2459: MINUS
2460: PUSH
2461: LD_EXP 19
2465: PUSH
2466: LD_INT 1
2468: MINUS
2469: PUSH
2470: LD_INT 4
2472: DIVREAL
2473: MOD
2474: PUSH
2475: LD_INT 0
2477: EQUAL
2478: IFFALSE 2494
// cl := cl + 1 ;
2480: LD_ADDR_VAR 0 4
2484: PUSH
2485: LD_VAR 0 4
2489: PUSH
2490: LD_INT 1
2492: PLUS
2493: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2494: LD_INT 0
2496: PPUSH
2497: LD_VAR 0 4
2501: PPUSH
2502: LD_EXP 20
2506: PPUSH
2507: CALL_OW 380
// un := CreateHuman ;
2511: LD_ADDR_VAR 0 5
2515: PUSH
2516: CALL_OW 44
2520: ST_TO_ADDR
// if j > copy then
2521: LD_VAR 0 3
2525: PUSH
2526: LD_VAR 0 8
2530: GREATER
2531: IFFALSE 2560
// copy := Replace ( copy , j , un ) else
2533: LD_ADDR_VAR 0 8
2537: PUSH
2538: LD_VAR 0 8
2542: PPUSH
2543: LD_VAR 0 3
2547: PPUSH
2548: LD_VAR 0 5
2552: PPUSH
2553: CALL_OW 1
2557: ST_TO_ADDR
2558: GO 2642
// begin CopySkills ( copy [ j ] , un ) ;
2560: LD_VAR 0 8
2564: PUSH
2565: LD_VAR 0 3
2569: ARRAY
2570: PPUSH
2571: LD_VAR 0 5
2575: PPUSH
2576: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2580: LD_VAR 0 5
2584: PPUSH
2585: LD_INT 2
2587: PPUSH
2588: LD_VAR 0 8
2592: PUSH
2593: LD_VAR 0 3
2597: ARRAY
2598: PPUSH
2599: LD_INT 2
2601: PPUSH
2602: CALL_OW 260
2606: PPUSH
2607: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2611: LD_VAR 0 5
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_VAR 0 8
2623: PUSH
2624: LD_VAR 0 3
2628: ARRAY
2629: PPUSH
2630: LD_INT 1
2632: PPUSH
2633: CALL_OW 260
2637: PPUSH
2638: CALL_OW 239
// end ; if multi_pos_area then
2642: LD_EXP 12
2646: IFFALSE 2820
// begin if GetClass ( un ) = 3 then
2648: LD_VAR 0 5
2652: PPUSH
2653: CALL_OW 257
2657: PUSH
2658: LD_INT 3
2660: EQUAL
2661: IFFALSE 2787
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ j mod 2 + 1 ] , engine_solar , control_manual , [ us_double_gun , us_gatling_gun , us_light_gun ] [ j mod 3 + 1 ] , 100 ) ;
2663: LD_INT 3
2665: PUSH
2666: LD_INT 2
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 2
2680: MOD
2681: PUSH
2682: LD_INT 1
2684: PLUS
2685: ARRAY
2686: PPUSH
2687: LD_INT 2
2689: PPUSH
2690: LD_INT 1
2692: PPUSH
2693: LD_INT 5
2695: PUSH
2696: LD_INT 4
2698: PUSH
2699: LD_INT 3
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: PUSH
2707: LD_VAR 0 3
2711: PUSH
2712: LD_INT 3
2714: MOD
2715: PUSH
2716: LD_INT 1
2718: PLUS
2719: ARRAY
2720: PPUSH
2721: LD_INT 100
2723: PPUSH
2724: CALL 21555 0 5
// veh := CreateVehicle ;
2728: LD_ADDR_VAR 0 6
2732: PUSH
2733: CALL_OW 45
2737: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2738: LD_VAR 0 6
2742: PPUSH
2743: LD_EXP 12
2747: PUSH
2748: LD_EXP 7
2752: PUSH
2753: LD_VAR 0 2
2757: ARRAY
2758: ARRAY
2759: PUSH
2760: LD_INT 2
2762: ARRAY
2763: PPUSH
2764: LD_INT 0
2766: PPUSH
2767: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2771: LD_VAR 0 5
2775: PPUSH
2776: LD_VAR 0 6
2780: PPUSH
2781: CALL_OW 52
// continue ;
2785: GO 2449
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2787: LD_VAR 0 5
2791: PPUSH
2792: LD_EXP 12
2796: PUSH
2797: LD_EXP 7
2801: PUSH
2802: LD_VAR 0 2
2806: ARRAY
2807: ARRAY
2808: PUSH
2809: LD_INT 1
2811: ARRAY
2812: PPUSH
2813: LD_INT 0
2815: PPUSH
2816: CALL_OW 49
// end ; end ;
2820: GO 2449
2822: POP
2823: POP
// for j = 1 to 3 do
2824: LD_ADDR_VAR 0 3
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2930
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_solar , control_computer , [ us_radar , us_rocket_launcher , us_gatling_gun ] [ j ] , 100 ) ;
2840: LD_INT 2
2842: PUSH
2843: LD_INT 3
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: LD_INT 1
2852: PPUSH
2853: LD_INT 2
2855: PPUSH
2856: CALL_OW 12
2860: ARRAY
2861: PPUSH
2862: LD_INT 2
2864: PPUSH
2865: LD_INT 3
2867: PPUSH
2868: LD_INT 11
2870: PUSH
2871: LD_INT 7
2873: PUSH
2874: LD_INT 4
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_VAR 0 3
2886: ARRAY
2887: PPUSH
2888: LD_INT 100
2890: PPUSH
2891: CALL 21555 0 5
// PlaceUnitArea ( CreateVehicle , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2895: CALL_OW 45
2899: PPUSH
2900: LD_EXP 12
2904: PUSH
2905: LD_EXP 7
2909: PUSH
2910: LD_VAR 0 2
2914: ARRAY
2915: ARRAY
2916: PUSH
2917: LD_INT 1
2919: ARRAY
2920: PPUSH
2921: LD_INT 0
2923: PPUSH
2924: CALL_OW 49
// end ;
2928: GO 2837
2930: POP
2931: POP
// end ;
2932: GO 2043
2934: POP
2935: POP
// end ;
2936: LD_VAR 0 1
2940: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
2941: LD_INT 0
2943: PPUSH
2944: PPUSH
2945: PPUSH
2946: PPUSH
2947: PPUSH
// if not multi_support then
2948: LD_EXP 23
2952: NOT
2953: IFFALSE 2957
// exit ;
2955: GO 3528
// result := [ ] ;
2957: LD_ADDR_VAR 0 1
2961: PUSH
2962: EMPTY
2963: ST_TO_ADDR
// for i := 1 to 8 do
2964: LD_ADDR_VAR 0 2
2968: PUSH
2969: DOUBLE
2970: LD_INT 1
2972: DEC
2973: ST_TO_ADDR
2974: LD_INT 8
2976: PUSH
2977: FOR_TO
2978: IFFALSE 3526
// begin result := Replace ( result , i , [ ] ) ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 1
2989: PPUSH
2990: LD_VAR 0 2
2994: PPUSH
2995: EMPTY
2996: PPUSH
2997: CALL_OW 1
3001: ST_TO_ADDR
// if multi_sides [ i ] then
3002: LD_EXP 7
3006: PUSH
3007: LD_VAR 0 2
3011: ARRAY
3012: IFFALSE 3524
// begin tmp := [ ] ;
3014: LD_ADDR_VAR 0 5
3018: PUSH
3019: EMPTY
3020: ST_TO_ADDR
// if multi_support = 1 then
3021: LD_EXP 23
3025: PUSH
3026: LD_INT 1
3028: EQUAL
3029: IFFALSE 3197
// begin uc_side := i ;
3031: LD_ADDR_OWVAR 20
3035: PUSH
3036: LD_VAR 0 2
3040: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3041: LD_ADDR_OWVAR 21
3045: PUSH
3046: LD_EXP 9
3050: PUSH
3051: LD_VAR 0 2
3055: ARRAY
3056: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3057: LD_INT 3
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: LD_INT 3
3065: PPUSH
3066: LD_INT 11
3068: PPUSH
3069: LD_INT 40
3071: PPUSH
3072: CALL 21555 0 5
// tmp := tmp ^ CreateVehicle ;
3076: LD_ADDR_VAR 0 5
3080: PUSH
3081: LD_VAR 0 5
3085: PUSH
3086: CALL_OW 45
3090: ADD
3091: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_double_gun , 40 ) ;
3092: LD_INT 2
3094: PPUSH
3095: LD_INT 1
3097: PPUSH
3098: LD_INT 3
3100: PPUSH
3101: LD_INT 5
3103: PPUSH
3104: LD_INT 40
3106: PPUSH
3107: CALL 21555 0 5
// tmp := tmp ^ CreateVehicle ;
3111: LD_ADDR_VAR 0 5
3115: PUSH
3116: LD_VAR 0 5
3120: PUSH
3121: CALL_OW 45
3125: ADD
3126: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_gatling_gun , 40 ) ;
3127: LD_INT 2
3129: PPUSH
3130: LD_INT 3
3132: PPUSH
3133: LD_INT 3
3135: PPUSH
3136: LD_INT 4
3138: PPUSH
3139: LD_INT 40
3141: PPUSH
3142: CALL 21555 0 5
// tmp := tmp ^ CreateVehicle ;
3146: LD_ADDR_VAR 0 5
3150: PUSH
3151: LD_VAR 0 5
3155: PUSH
3156: CALL_OW 45
3160: ADD
3161: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_solar , control_computer , us_laser , 40 ) ;
3162: LD_INT 3
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: LD_INT 3
3170: PPUSH
3171: LD_INT 9
3173: PPUSH
3174: LD_INT 40
3176: PPUSH
3177: CALL 21555 0 5
// tmp := tmp ^ CreateVehicle ;
3181: LD_ADDR_VAR 0 5
3185: PUSH
3186: LD_VAR 0 5
3190: PUSH
3191: CALL_OW 45
3195: ADD
3196: ST_TO_ADDR
// end ; if multi_support = 2 then
3197: LD_EXP 23
3201: PUSH
3202: LD_INT 2
3204: EQUAL
3205: IFFALSE 3499
// begin uc_side := i ;
3207: LD_ADDR_OWVAR 20
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3217: LD_ADDR_OWVAR 21
3221: PUSH
3222: LD_EXP 9
3226: PUSH
3227: LD_VAR 0 2
3231: ARRAY
3232: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3233: LD_INT 3
3235: PPUSH
3236: LD_INT 1
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 11
3244: PPUSH
3245: LD_INT 40
3247: PPUSH
3248: CALL 21555 0 5
// tmp := tmp ^ CreateVehicle ;
3252: LD_ADDR_VAR 0 5
3256: PUSH
3257: LD_VAR 0 5
3261: PUSH
3262: CALL_OW 45
3266: ADD
3267: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 40 ) ;
3268: LD_INT 3
3270: PPUSH
3271: LD_INT 3
3273: PPUSH
3274: LD_INT 3
3276: PPUSH
3277: LD_INT 12
3279: PPUSH
3280: LD_INT 40
3282: PPUSH
3283: CALL 21555 0 5
// tmp := tmp ^ CreateVehicle ;
3287: LD_ADDR_VAR 0 5
3291: PUSH
3292: LD_VAR 0 5
3296: PUSH
3297: CALL_OW 45
3301: ADD
3302: ST_TO_ADDR
// SetCargo ( tmp [ tmp ] , mat_cans , 100 ) ;
3303: LD_VAR 0 5
3307: PUSH
3308: LD_VAR 0 5
3312: ARRAY
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 100
3319: PPUSH
3320: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_double_gun , 40 ) ;
3324: LD_INT 2
3326: PPUSH
3327: LD_INT 3
3329: PPUSH
3330: LD_INT 3
3332: PPUSH
3333: LD_INT 5
3335: PPUSH
3336: LD_INT 40
3338: PPUSH
3339: CALL 21555 0 5
// tmp := tmp ^ CreateVehicle ;
3343: LD_ADDR_VAR 0 5
3347: PUSH
3348: LD_VAR 0 5
3352: PUSH
3353: CALL_OW 45
3357: ADD
3358: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3359: LD_INT 4
3361: PPUSH
3362: LD_INT 1
3364: PPUSH
3365: LD_INT 3
3367: PPUSH
3368: LD_INT 6
3370: PPUSH
3371: LD_INT 40
3373: PPUSH
3374: CALL 21555 0 5
// tmp := tmp ^ CreateVehicle ;
3378: LD_ADDR_VAR 0 5
3382: PUSH
3383: LD_VAR 0 5
3387: PUSH
3388: CALL_OW 45
3392: ADD
3393: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3394: LD_INT 2
3396: PPUSH
3397: LD_INT 3
3399: PPUSH
3400: LD_INT 3
3402: PPUSH
3403: LD_INT 9
3405: PPUSH
3406: LD_INT 40
3408: PPUSH
3409: CALL 21555 0 5
// tmp := tmp ^ CreateVehicle ;
3413: LD_ADDR_VAR 0 5
3417: PUSH
3418: LD_VAR 0 5
3422: PUSH
3423: CALL_OW 45
3427: ADD
3428: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 3
3434: PPUSH
3435: LD_INT 3
3437: PPUSH
3438: LD_INT 9
3440: PPUSH
3441: LD_INT 40
3443: PPUSH
3444: CALL 21555 0 5
// tmp := tmp ^ CreateVehicle ;
3448: LD_ADDR_VAR 0 5
3452: PUSH
3453: LD_VAR 0 5
3457: PUSH
3458: CALL_OW 45
3462: ADD
3463: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3464: LD_INT 4
3466: PPUSH
3467: LD_INT 1
3469: PPUSH
3470: LD_INT 3
3472: PPUSH
3473: LD_INT 6
3475: PPUSH
3476: LD_INT 40
3478: PPUSH
3479: CALL 21555 0 5
// tmp := tmp ^ CreateVehicle ;
3483: LD_ADDR_VAR 0 5
3487: PUSH
3488: LD_VAR 0 5
3492: PUSH
3493: CALL_OW 45
3497: ADD
3498: ST_TO_ADDR
// end ; result := Replace ( result , i , tmp ) ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: LD_VAR 0 1
3508: PPUSH
3509: LD_VAR 0 2
3513: PPUSH
3514: LD_VAR 0 5
3518: PPUSH
3519: CALL_OW 1
3523: ST_TO_ADDR
// end ; end ;
3524: GO 2977
3526: POP
3527: POP
// end ;
3528: LD_VAR 0 1
3532: RET
// export function Multiplayer_Start ( ) ; begin
3533: LD_INT 0
3535: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3536: CALL 2019 0 0
// Multiplayer_InitPointSystem ( ) ;
3540: CALL 4236 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3544: LD_INT 20
3546: PPUSH
3547: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3551: LD_INT 150
3553: PPUSH
3554: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3558: LD_INT 5
3560: PPUSH
3561: CALL 4412 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3565: LD_INT 40
3567: NEG
3568: PPUSH
3569: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3573: LD_INT 200
3575: PPUSH
3576: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3580: LD_INT 2
3582: PPUSH
3583: CALL 4412 0 1
// Multiplayer_SpawnArtifact ;
3587: CALL 4852 0 0
// if multi_support then
3591: LD_EXP 23
3595: IFFALSE 3607
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3597: LD_ADDR_EXP 27
3601: PUSH
3602: CALL 2941 0 0
3606: ST_TO_ADDR
// if multi_sides [ your_side ] then
3607: LD_EXP 7
3611: PUSH
3612: LD_OWVAR 2
3616: ARRAY
3617: IFFALSE 3644
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3619: LD_INT 22
3621: PUSH
3622: LD_OWVAR 2
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: PPUSH
3631: CALL_OW 69
3635: PUSH
3636: LD_INT 1
3638: ARRAY
3639: PPUSH
3640: CALL_OW 87
// end ;
3644: LD_VAR 0 1
3648: RET
// export function Multiplayer_End ( ) ; var i , j , tmp , reinforcements_arrive ; begin
3649: LD_INT 0
3651: PPUSH
3652: PPUSH
3653: PPUSH
3654: PPUSH
3655: PPUSH
// reinforcements_arrive := 0 ;
3656: LD_ADDR_VAR 0 5
3660: PUSH
3661: LD_INT 0
3663: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3664: LD_INT 35
3666: PPUSH
3667: CALL_OW 67
// if tick > multi_support_arrive_time and not multi_reinforcements_spawned and multi_support then
3671: LD_OWVAR 1
3675: PUSH
3676: LD_EXP 29
3680: GREATER
3681: PUSH
3682: LD_EXP 28
3686: NOT
3687: AND
3688: PUSH
3689: LD_EXP 23
3693: AND
3694: IFFALSE 3859
// begin multi_reinforcements_spawned := true ;
3696: LD_ADDR_EXP 28
3700: PUSH
3701: LD_INT 1
3703: ST_TO_ADDR
// for i := 1 to 8 do
3704: LD_ADDR_VAR 0 2
3708: PUSH
3709: DOUBLE
3710: LD_INT 1
3712: DEC
3713: ST_TO_ADDR
3714: LD_INT 8
3716: PUSH
3717: FOR_TO
3718: IFFALSE 3847
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
3720: LD_EXP 7
3724: PUSH
3725: LD_VAR 0 2
3729: ARRAY
3730: PUSH
3731: LD_EXP 25
3735: PUSH
3736: LD_VAR 0 2
3740: ARRAY
3741: NOT
3742: AND
3743: PUSH
3744: LD_EXP 27
3748: PUSH
3749: LD_VAR 0 2
3753: ARRAY
3754: AND
3755: IFFALSE 3845
// begin tmp := multi_reinforcements [ i ] ;
3757: LD_ADDR_VAR 0 4
3761: PUSH
3762: LD_EXP 27
3766: PUSH
3767: LD_VAR 0 2
3771: ARRAY
3772: ST_TO_ADDR
// for j in tmp do
3773: LD_ADDR_VAR 0 3
3777: PUSH
3778: LD_VAR 0 4
3782: PUSH
3783: FOR_IN
3784: IFFALSE 3821
// PlaceUnitArea ( j , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3786: LD_VAR 0 3
3790: PPUSH
3791: LD_EXP 12
3795: PUSH
3796: LD_EXP 7
3800: PUSH
3801: LD_VAR 0 2
3805: ARRAY
3806: ARRAY
3807: PUSH
3808: LD_INT 2
3810: ARRAY
3811: PPUSH
3812: LD_INT 0
3814: PPUSH
3815: CALL_OW 49
3819: GO 3783
3821: POP
3822: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , [ ] ) ;
3823: LD_ADDR_EXP 27
3827: PUSH
3828: LD_EXP 27
3832: PPUSH
3833: LD_VAR 0 2
3837: PPUSH
3838: EMPTY
3839: PPUSH
3840: CALL_OW 1
3844: ST_TO_ADDR
// end ; end ;
3845: GO 3717
3847: POP
3848: POP
// reinforcements_arrive := tick ;
3849: LD_ADDR_VAR 0 5
3853: PUSH
3854: LD_OWVAR 1
3858: ST_TO_ADDR
// end ; if not multi_custom_commanders then
3859: LD_EXP 16
3863: NOT
3864: IFFALSE 3977
// begin for i = 1 to 8 do
3866: LD_ADDR_VAR 0 2
3870: PUSH
3871: DOUBLE
3872: LD_INT 1
3874: DEC
3875: ST_TO_ADDR
3876: LD_INT 8
3878: PUSH
3879: FOR_TO
3880: IFFALSE 3951
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
3882: LD_INT 22
3884: PUSH
3885: LD_VAR 0 2
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PPUSH
3894: CALL_OW 69
3898: PUSH
3899: LD_INT 0
3901: EQUAL
3902: PUSH
3903: LD_EXP 25
3907: PUSH
3908: LD_VAR 0 2
3912: ARRAY
3913: NOT
3914: AND
3915: IFFALSE 3949
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
3917: LD_ADDR_EXP 25
3921: PUSH
3922: LD_EXP 25
3926: PPUSH
3927: LD_VAR 0 2
3931: PPUSH
3932: LD_INT 1
3934: PPUSH
3935: CALL_OW 1
3939: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
3940: LD_VAR 0 2
3944: PPUSH
3945: CALL 4482 0 1
// end ; end ;
3949: GO 3879
3951: POP
3952: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
3953: LD_EXP 25
3957: PPUSH
3958: CALL 18817 0 1
3962: PUSH
3963: LD_EXP 7
3967: PPUSH
3968: CALL 18817 0 1
3972: EQUAL
3973: IFFALSE 3977
// break ;
3975: GO 4033
// end ; until ( FilterAllUnits ( [ [ f_side , side_bot ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 and game ) or not multi_commanders ;
3977: LD_INT 22
3979: PUSH
3980: LD_EXP 3
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: PUSH
3989: LD_INT 21
3991: PUSH
3992: LD_INT 1
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 50
4001: PUSH
4002: EMPTY
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: PPUSH
4010: CALL_OW 69
4014: PUSH
4015: LD_INT 0
4017: EQUAL
4018: PUSH
4019: LD_EXP 2
4023: AND
4024: PUSH
4025: LD_EXP 24
4029: NOT
4030: OR
4031: IFFALSE 3664
// game := false ;
4033: LD_ADDR_EXP 2
4037: PUSH
4038: LD_INT 0
4040: ST_TO_ADDR
// for i := 1 to 8 do
4041: LD_ADDR_VAR 0 2
4045: PUSH
4046: DOUBLE
4047: LD_INT 1
4049: DEC
4050: ST_TO_ADDR
4051: LD_INT 8
4053: PUSH
4054: FOR_TO
4055: IFFALSE 4091
// begin if multi_sides [ i ] then
4057: LD_EXP 7
4061: PUSH
4062: LD_VAR 0 2
4066: ARRAY
4067: IFFALSE 4089
// SetMultiScore ( i , multi_points [ i ] ) ;
4069: LD_VAR 0 2
4073: PPUSH
4074: LD_EXP 30
4078: PUSH
4079: LD_VAR 0 2
4083: ARRAY
4084: PPUSH
4085: CALL_OW 506
// end ;
4089: GO 4054
4091: POP
4092: POP
// if multi_loosers [ your_side ] then
4093: LD_EXP 25
4097: PUSH
4098: LD_OWVAR 2
4102: ARRAY
4103: IFFALSE 4126
// begin if Multiplayer then
4105: LD_OWVAR 4
4109: IFFALSE 4117
// YouLostInMultiplayer else
4111: CALL_OW 107
4115: GO 4124
// YouLost (  ) ;
4117: LD_STRING 
4119: PPUSH
4120: CALL_OW 104
// end else
4124: GO 4142
// begin if Multiplayer then
4126: LD_OWVAR 4
4130: IFFALSE 4138
// YouWinInMultiplayer else
4132: CALL_OW 106
4136: GO 4142
// YouWin ;
4138: CALL_OW 103
// end ; end ;
4142: LD_VAR 0 1
4146: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4147: LD_INT 0
4149: PPUSH
4150: PPUSH
// result := [ ] ;
4151: LD_ADDR_VAR 0 1
4155: PUSH
4156: EMPTY
4157: ST_TO_ADDR
// for i := 1 to 8 do
4158: LD_ADDR_VAR 0 2
4162: PUSH
4163: DOUBLE
4164: LD_INT 1
4166: DEC
4167: ST_TO_ADDR
4168: LD_INT 8
4170: PUSH
4171: FOR_TO
4172: IFFALSE 4229
// begin if multi_sides [ i ] then
4174: LD_EXP 7
4178: PUSH
4179: LD_VAR 0 2
4183: ARRAY
4184: IFFALSE 4227
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4186: LD_ADDR_VAR 0 1
4190: PUSH
4191: LD_VAR 0 1
4195: PUSH
4196: LD_STRING #coop-points
4198: PUSH
4199: LD_VAR 0 2
4203: PUSH
4204: LD_VAR 0 2
4208: PUSH
4209: LD_EXP 30
4213: PUSH
4214: LD_VAR 0 2
4218: ARRAY
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: ADD
4226: ST_TO_ADDR
// end ; end ;
4227: GO 4171
4229: POP
4230: POP
// end ;
4231: LD_VAR 0 1
4235: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4236: LD_INT 0
4238: PPUSH
4239: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4240: LD_ADDR_EXP 30
4244: PUSH
4245: LD_INT 0
4247: PUSH
4248: LD_INT 0
4250: PUSH
4251: LD_INT 0
4253: PUSH
4254: LD_INT 0
4256: PUSH
4257: LD_INT 0
4259: PUSH
4260: LD_INT 0
4262: PUSH
4263: LD_INT 0
4265: PUSH
4266: LD_INT 0
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4279: LD_ADDR_EXP 31
4283: PUSH
4284: EMPTY
4285: ST_TO_ADDR
// end ;
4286: LD_VAR 0 1
4290: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4291: LD_INT 0
4293: PPUSH
// if not multi_points or not side or side > 8 then
4294: LD_EXP 30
4298: NOT
4299: PUSH
4300: LD_VAR 0 1
4304: NOT
4305: OR
4306: PUSH
4307: LD_VAR 0 1
4311: PUSH
4312: LD_INT 8
4314: GREATER
4315: OR
4316: IFFALSE 4320
// exit ;
4318: GO 4357
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4320: LD_ADDR_EXP 30
4324: PUSH
4325: LD_EXP 30
4329: PPUSH
4330: LD_VAR 0 1
4334: PPUSH
4335: LD_EXP 30
4339: PUSH
4340: LD_VAR 0 1
4344: ARRAY
4345: PUSH
4346: LD_VAR 0 2
4350: PLUS
4351: PPUSH
4352: CALL_OW 1
4356: ST_TO_ADDR
// end ;
4357: LD_VAR 0 3
4361: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4362: LD_INT 0
4364: PPUSH
// if not multi_points or not side or side > 8 then
4365: LD_EXP 30
4369: NOT
4370: PUSH
4371: LD_VAR 0 1
4375: NOT
4376: OR
4377: PUSH
4378: LD_VAR 0 1
4382: PUSH
4383: LD_INT 8
4385: GREATER
4386: OR
4387: IFFALSE 4391
// exit ;
4389: GO 4407
// result := multi_points [ side ] ;
4391: LD_ADDR_VAR 0 2
4395: PUSH
4396: LD_EXP 30
4400: PUSH
4401: LD_VAR 0 1
4405: ARRAY
4406: ST_TO_ADDR
// end ;
4407: LD_VAR 0 2
4411: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4412: LD_INT 0
4414: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4415: LD_ADDR_EXP 31
4419: PUSH
4420: LD_EXP 31
4424: PPUSH
4425: LD_EXP 31
4429: PUSH
4430: LD_INT 1
4432: PLUS
4433: PPUSH
4434: LD_VAR 0 1
4438: PPUSH
4439: CALL_OW 1
4443: ST_TO_ADDR
// end ;
4444: LD_VAR 0 2
4448: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4449: LD_INT 0
4451: PPUSH
// if not id then
4452: LD_VAR 0 1
4456: NOT
4457: IFFALSE 4461
// exit ;
4459: GO 4477
// result := multi_points_conditions [ id ] ;
4461: LD_ADDR_VAR 0 2
4465: PUSH
4466: LD_EXP 31
4470: PUSH
4471: LD_VAR 0 1
4475: ARRAY
4476: ST_TO_ADDR
// end ;
4477: LD_VAR 0 2
4481: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4482: LD_INT 0
4484: PPUSH
4485: PPUSH
4486: PPUSH
4487: PPUSH
4488: PPUSH
// players := [ ] ;
4489: LD_ADDR_VAR 0 3
4493: PUSH
4494: EMPTY
4495: ST_TO_ADDR
// for i = 1 to 8 do
4496: LD_ADDR_VAR 0 4
4500: PUSH
4501: DOUBLE
4502: LD_INT 1
4504: DEC
4505: ST_TO_ADDR
4506: LD_INT 8
4508: PUSH
4509: FOR_TO
4510: IFFALSE 4569
// begin if i = side then
4512: LD_VAR 0 4
4516: PUSH
4517: LD_VAR 0 1
4521: EQUAL
4522: IFFALSE 4526
// continue ;
4524: GO 4509
// if multi_sides [ i ] and not multi_loosers [ i ] then
4526: LD_EXP 7
4530: PUSH
4531: LD_VAR 0 4
4535: ARRAY
4536: PUSH
4537: LD_EXP 25
4541: PUSH
4542: LD_VAR 0 4
4546: ARRAY
4547: NOT
4548: AND
4549: IFFALSE 4567
// players := players ^ i ;
4551: LD_ADDR_VAR 0 3
4555: PUSH
4556: LD_VAR 0 3
4560: PUSH
4561: LD_VAR 0 4
4565: ADD
4566: ST_TO_ADDR
// end ;
4567: GO 4509
4569: POP
4570: POP
// if not players then
4571: LD_VAR 0 3
4575: NOT
4576: IFFALSE 4580
// exit ;
4578: GO 4847
// if players = 1 then
4580: LD_VAR 0 3
4584: PUSH
4585: LD_INT 1
4587: EQUAL
4588: IFFALSE 4649
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4590: LD_ADDR_VAR 0 4
4594: PUSH
4595: LD_INT 22
4597: PUSH
4598: LD_VAR 0 1
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 51
4609: PUSH
4610: EMPTY
4611: LIST
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL_OW 69
4621: PUSH
4622: FOR_IN
4623: IFFALSE 4645
// SetSide ( i , players [ 1 ] ) ;
4625: LD_VAR 0 4
4629: PPUSH
4630: LD_VAR 0 3
4634: PUSH
4635: LD_INT 1
4637: ARRAY
4638: PPUSH
4639: CALL_OW 235
4643: GO 4622
4645: POP
4646: POP
// end else
4647: GO 4847
// begin j := 1 ;
4649: LD_ADDR_VAR 0 5
4653: PUSH
4654: LD_INT 1
4656: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
4657: LD_ADDR_VAR 0 4
4661: PUSH
4662: LD_INT 22
4664: PUSH
4665: LD_VAR 0 1
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PUSH
4674: LD_INT 2
4676: PUSH
4677: LD_INT 21
4679: PUSH
4680: LD_INT 1
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: LD_INT 51
4689: PUSH
4690: EMPTY
4691: LIST
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PUSH
4697: LD_INT 21
4699: PUSH
4700: LD_INT 2
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PPUSH
4716: CALL_OW 69
4720: PUSH
4721: FOR_IN
4722: IFFALSE 4845
// begin SetSide ( i , players [ j ] ) ;
4724: LD_VAR 0 4
4728: PPUSH
4729: LD_VAR 0 3
4733: PUSH
4734: LD_VAR 0 5
4738: ARRAY
4739: PPUSH
4740: CALL_OW 235
// if IsDrivenBy ( i ) then
4744: LD_VAR 0 4
4748: PPUSH
4749: CALL_OW 311
4753: IFFALSE 4780
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
4755: LD_VAR 0 4
4759: PPUSH
4760: CALL_OW 311
4764: PPUSH
4765: LD_VAR 0 3
4769: PUSH
4770: LD_VAR 0 5
4774: ARRAY
4775: PPUSH
4776: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
4780: LD_VAR 0 4
4784: PPUSH
4785: CALL_OW 310
4789: PPUSH
4790: CALL_OW 247
4794: PUSH
4795: LD_INT 3
4797: EQUAL
4798: IFFALSE 4809
// ComExitBuilding ( i ) ;
4800: LD_VAR 0 4
4804: PPUSH
4805: CALL_OW 122
// j := j + 1 ;
4809: LD_ADDR_VAR 0 5
4813: PUSH
4814: LD_VAR 0 5
4818: PUSH
4819: LD_INT 1
4821: PLUS
4822: ST_TO_ADDR
// if j > players then
4823: LD_VAR 0 5
4827: PUSH
4828: LD_VAR 0 3
4832: GREATER
4833: IFFALSE 4843
// j := 1 ;
4835: LD_ADDR_VAR 0 5
4839: PUSH
4840: LD_INT 1
4842: ST_TO_ADDR
// end ;
4843: GO 4721
4845: POP
4846: POP
// end ; end ;
4847: LD_VAR 0 2
4851: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
4852: LD_INT 0
4854: PPUSH
4855: PPUSH
4856: PPUSH
// i := 3 ;
4857: LD_ADDR_VAR 0 2
4861: PUSH
4862: LD_INT 3
4864: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
4865: LD_ADDR_VAR 0 3
4869: PUSH
4870: LD_INT 5
4872: PUSH
4873: LD_INT 10
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 120
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 101
4892: PUSH
4893: LD_INT 8
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: LD_INT 27
4902: PUSH
4903: LD_INT 4
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
4916: LD_INT 4
4918: PPUSH
4919: LD_INT 5
4921: PPUSH
4922: LD_VAR 0 3
4926: PUSH
4927: LD_VAR 0 2
4931: ARRAY
4932: PUSH
4933: LD_INT 1
4935: ARRAY
4936: PPUSH
4937: LD_VAR 0 3
4941: PUSH
4942: LD_VAR 0 2
4946: ARRAY
4947: PUSH
4948: LD_INT 2
4950: ARRAY
4951: PPUSH
4952: LD_INT 0
4954: PPUSH
4955: CALL_OW 58
// end ;
4959: LD_VAR 0 1
4963: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
4964: LD_INT 0
4966: PPUSH
// if not side or side > 8 then
4967: LD_VAR 0 1
4971: NOT
4972: PUSH
4973: LD_VAR 0 1
4977: PUSH
4978: LD_INT 8
4980: GREATER
4981: OR
4982: IFFALSE 4986
// exit ;
4984: GO 5003
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
4986: LD_VAR 0 1
4990: PPUSH
4991: LD_INT 6
4993: PPUSH
4994: CALL 4449 0 1
4998: PPUSH
4999: CALL 4291 0 2
// end ;
5003: LD_VAR 0 2
5007: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5008: LD_INT 0
5010: PPUSH
// if not side or side > 8 then
5011: LD_VAR 0 1
5015: NOT
5016: PUSH
5017: LD_VAR 0 1
5021: PUSH
5022: LD_INT 8
5024: GREATER
5025: OR
5026: IFFALSE 5030
// exit ;
5028: GO 5047
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5030: LD_VAR 0 1
5034: PPUSH
5035: LD_INT 4
5037: PPUSH
5038: CALL 4449 0 1
5042: PPUSH
5043: CALL 4291 0 2
// end ;
5047: LD_VAR 0 2
5051: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5052: LD_INT 0
5054: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5055: LD_VAR 0 1
5059: NOT
5060: PUSH
5061: LD_VAR 0 1
5065: PUSH
5066: LD_INT 8
5068: GREATER
5069: OR
5070: PUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_INT 2
5078: PUSH
5079: LD_INT 6
5081: PUSH
5082: LD_INT 36
5084: PUSH
5085: LD_INT 0
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: IN
5094: NOT
5095: OR
5096: IFFALSE 5100
// exit ;
5098: GO 5117
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_INT 3
5107: PPUSH
5108: CALL 4449 0 1
5112: PPUSH
5113: CALL 4291 0 2
// end ;
5117: LD_VAR 0 3
5121: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5122: LD_INT 0
5124: PPUSH
5125: PPUSH
// if not un then
5126: LD_VAR 0 1
5130: NOT
5131: IFFALSE 5135
// exit ;
5133: GO 5181
// if not points then
5135: LD_VAR 0 3
5139: NOT
5140: IFFALSE 5157
// gained_points := Multiplayer_GetCondition ( 1 ) else
5142: LD_ADDR_VAR 0 5
5146: PUSH
5147: LD_INT 1
5149: PPUSH
5150: CALL 4449 0 1
5154: ST_TO_ADDR
5155: GO 5167
// gained_points := points ;
5157: LD_ADDR_VAR 0 5
5161: PUSH
5162: LD_VAR 0 3
5166: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5167: LD_VAR 0 2
5171: PPUSH
5172: LD_VAR 0 5
5176: PPUSH
5177: CALL 4291 0 2
5181: LD_VAR 0 4
5185: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5186: LD_INT 0
5188: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5189: LD_VAR 0 1
5193: PPUSH
5194: LD_INT 2
5196: PPUSH
5197: CALL 4449 0 1
5201: PPUSH
5202: CALL 4291 0 2
// end ; end_of_file
5206: LD_VAR 0 2
5210: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp ; export Saliba , Gensher , Shariff ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , techs , fac ; begin
5211: LD_INT 0
5213: PPUSH
5214: PPUSH
5215: PPUSH
5216: PPUSH
5217: PPUSH
5218: PPUSH
5219: PPUSH
5220: PPUSH
5221: PPUSH
5222: PPUSH
// side_bot := side ;
5223: LD_ADDR_EXP 3
5227: PUSH
5228: LD_VAR 0 1
5232: ST_TO_ADDR
// techs := [ tech_ApeAgres , tech_ApeBrain , tech_ApeNeural , tech_StimDrugs , tech_Bio1 , tech_Bio2 , tech_Weap3 , tech_RemCharge , tech_Rocket , tech_SibEng , tech_SibImplosion , tech_Sib2 ] ;
5233: LD_ADDR_VAR 0 10
5237: PUSH
5238: LD_INT 11
5240: PUSH
5241: LD_INT 4
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: LD_INT 5
5249: PUSH
5250: LD_INT 66
5252: PUSH
5253: LD_INT 67
5255: PUSH
5256: LD_INT 53
5258: PUSH
5259: LD_INT 18
5261: PUSH
5262: LD_INT 40
5264: PUSH
5265: LD_INT 22
5267: PUSH
5268: LD_INT 72
5270: PUSH
5271: LD_INT 55
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: ST_TO_ADDR
// for i in techs do
5288: LD_ADDR_VAR 0 3
5292: PUSH
5293: LD_VAR 0 10
5297: PUSH
5298: FOR_IN
5299: IFFALSE 5320
// SetTech ( i , side , state_researched ) ;
5301: LD_VAR 0 3
5305: PPUSH
5306: LD_VAR 0 1
5310: PPUSH
5311: LD_INT 2
5313: PPUSH
5314: CALL_OW 322
5318: GO 5298
5320: POP
5321: POP
// InitScriptBases ;
5322: CALL 7261 0 0
// skill := [ 5 , 7 , 10 ] [ Difficulty ] ;
5326: LD_ADDR_VAR 0 8
5330: PUSH
5331: LD_INT 5
5333: PUSH
5334: LD_INT 7
5336: PUSH
5337: LD_INT 10
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: PUSH
5345: LD_OWVAR 67
5349: ARRAY
5350: ST_TO_ADDR
// uc_side := side ;
5351: LD_ADDR_OWVAR 20
5355: PUSH
5356: LD_VAR 0 1
5360: ST_TO_ADDR
// uc_nation := 2 ;
5361: LD_ADDR_OWVAR 21
5365: PUSH
5366: LD_INT 2
5368: ST_TO_ADDR
// ar_force_north := PrepareBase ( ar_dep_n , area_base_north , dammam , skill , [ 10000 , 1000 , 900 ] , [ 12 , 4 , - 1 , 4 ] ) ;
5369: LD_ADDR_EXP 34
5373: PUSH
5374: LD_INT 94
5376: PPUSH
5377: LD_INT 35
5379: PPUSH
5380: LD_STRING dammam
5382: PPUSH
5383: LD_VAR 0 8
5387: PPUSH
5388: LD_INT 10000
5390: PUSH
5391: LD_INT 1000
5393: PUSH
5394: LD_INT 900
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: LIST
5401: PPUSH
5402: LD_INT 12
5404: PUSH
5405: LD_INT 4
5407: PUSH
5408: LD_INT 1
5410: NEG
5411: PUSH
5412: LD_INT 4
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: PPUSH
5421: CALL 25376 0 6
5425: ST_TO_ADDR
// ar_force_north2 := PrepareBase ( ar_dep_n2 , area_base_north2 ,  , skill , [ 500 , 130 , 0 ] , [ 16 , 4 , 3 , 1 ] ) ;
5426: LD_ADDR_EXP 35
5430: PUSH
5431: LD_INT 122
5433: PPUSH
5434: LD_INT 38
5436: PPUSH
5437: LD_STRING 
5439: PPUSH
5440: LD_VAR 0 8
5444: PPUSH
5445: LD_INT 500
5447: PUSH
5448: LD_INT 130
5450: PUSH
5451: LD_INT 0
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: PPUSH
5459: LD_INT 16
5461: PUSH
5462: LD_INT 4
5464: PUSH
5465: LD_INT 3
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: PPUSH
5477: CALL 25376 0 6
5481: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , area_base_west , jeddah , skill , [ 2100 , 300 , 10 ] , [ 12 , 4 , 3 , 2 ] ) ;
5482: LD_ADDR_EXP 32
5486: PUSH
5487: LD_INT 45
5489: PPUSH
5490: LD_INT 34
5492: PPUSH
5493: LD_STRING jeddah
5495: PPUSH
5496: LD_VAR 0 8
5500: PPUSH
5501: LD_INT 2100
5503: PUSH
5504: LD_INT 300
5506: PUSH
5507: LD_INT 10
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: PPUSH
5515: LD_INT 12
5517: PUSH
5518: LD_INT 4
5520: PUSH
5521: LD_INT 3
5523: PUSH
5524: LD_INT 2
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL 25376 0 6
5537: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , area_base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 8 , 2 , 3 , 1 ] ) ;
5538: LD_ADDR_EXP 33
5542: PUSH
5543: LD_INT 7
5545: PPUSH
5546: LD_INT 33
5548: PPUSH
5549: LD_STRING riyadh
5551: PPUSH
5552: LD_VAR 0 8
5556: PPUSH
5557: LD_INT 500
5559: PUSH
5560: LD_INT 60
5562: PUSH
5563: LD_INT 0
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: PPUSH
5571: LD_INT 8
5573: PUSH
5574: LD_INT 2
5576: PUSH
5577: LD_INT 3
5579: PUSH
5580: LD_INT 1
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL 25376 0 6
5593: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , area_base_east ,  , skill , [ 500 , 50 , 0 ] , [ 11 , 2 , 4 , 1 ] ) ;
5594: LD_ADDR_EXP 36
5598: PUSH
5599: LD_INT 69
5601: PPUSH
5602: LD_INT 36
5604: PPUSH
5605: LD_STRING 
5607: PPUSH
5608: LD_VAR 0 8
5612: PPUSH
5613: LD_INT 500
5615: PUSH
5616: LD_INT 50
5618: PUSH
5619: LD_INT 0
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: PPUSH
5627: LD_INT 11
5629: PUSH
5630: LD_INT 2
5632: PUSH
5633: LD_INT 4
5635: PUSH
5636: LD_INT 1
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: PPUSH
5645: CALL 25376 0 6
5649: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5650: LD_ADDR_OWVAR 37
5654: PUSH
5655: LD_INT 14
5657: ST_TO_ADDR
// vc_engine := engine_siberite ;
5658: LD_ADDR_OWVAR 39
5662: PUSH
5663: LD_INT 3
5665: ST_TO_ADDR
// vc_control := control_manual ;
5666: LD_ADDR_OWVAR 38
5670: PUSH
5671: LD_INT 1
5673: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5674: LD_ADDR_OWVAR 40
5678: PUSH
5679: LD_INT 31
5681: ST_TO_ADDR
// for i = 1 to 4 do
5682: LD_ADDR_VAR 0 3
5686: PUSH
5687: DOUBLE
5688: LD_INT 1
5690: DEC
5691: ST_TO_ADDR
5692: LD_INT 4
5694: PUSH
5695: FOR_TO
5696: IFFALSE 5845
// begin xy := [ [ 156 , 15 ] , [ 12 , 7 ] ] [ i mod 2 + 1 ] ;
5698: LD_ADDR_VAR 0 5
5702: PUSH
5703: LD_INT 156
5705: PUSH
5706: LD_INT 15
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PUSH
5713: LD_INT 12
5715: PUSH
5716: LD_INT 7
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: LD_VAR 0 3
5731: PUSH
5732: LD_INT 2
5734: MOD
5735: PUSH
5736: LD_INT 1
5738: PLUS
5739: ARRAY
5740: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
5741: LD_INT 0
5743: PPUSH
5744: LD_INT 3
5746: PPUSH
5747: LD_VAR 0 8
5751: PPUSH
5752: CALL_OW 380
// un := CreateVehicle ;
5756: LD_ADDR_VAR 0 6
5760: PUSH
5761: CALL_OW 45
5765: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
5766: LD_VAR 0 6
5770: PPUSH
5771: LD_INT 0
5773: PPUSH
5774: LD_INT 5
5776: PPUSH
5777: CALL_OW 12
5781: PPUSH
5782: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
5786: LD_VAR 0 6
5790: PPUSH
5791: LD_VAR 0 5
5795: PUSH
5796: LD_INT 1
5798: ARRAY
5799: PPUSH
5800: LD_VAR 0 5
5804: PUSH
5805: LD_INT 2
5807: ARRAY
5808: PPUSH
5809: LD_INT 6
5811: PPUSH
5812: LD_INT 0
5814: PPUSH
5815: CALL_OW 50
// un2 := CreateHuman ;
5819: LD_ADDR_VAR 0 7
5823: PUSH
5824: CALL_OW 44
5828: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
5829: LD_VAR 0 7
5833: PPUSH
5834: LD_VAR 0 6
5838: PPUSH
5839: CALL_OW 52
// end ;
5843: GO 5695
5845: POP
5846: POP
// for i in FilterAllUnits ( [ [ f_side , side_bot ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
5847: LD_ADDR_VAR 0 3
5851: PUSH
5852: LD_INT 22
5854: PUSH
5855: LD_EXP 3
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 30
5866: PUSH
5867: LD_INT 31
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: LD_INT 58
5876: PUSH
5877: EMPTY
5878: LIST
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: LIST
5884: PPUSH
5885: CALL_OW 69
5889: PUSH
5890: FOR_IN
5891: IFFALSE 6003
// begin d := GetDir ( i ) ;
5893: LD_ADDR_VAR 0 4
5897: PUSH
5898: LD_VAR 0 3
5902: PPUSH
5903: CALL_OW 254
5907: ST_TO_ADDR
// if d < 3 then
5908: LD_VAR 0 4
5912: PUSH
5913: LD_INT 3
5915: LESS
5916: IFFALSE 5934
// d := d + 3 else
5918: LD_ADDR_VAR 0 4
5922: PUSH
5923: LD_VAR 0 4
5927: PUSH
5928: LD_INT 3
5930: PLUS
5931: ST_TO_ADDR
5932: GO 5948
// d := d - 3 ;
5934: LD_ADDR_VAR 0 4
5938: PUSH
5939: LD_VAR 0 4
5943: PUSH
5944: LD_INT 3
5946: MINUS
5947: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
5948: LD_INT 0
5950: PPUSH
5951: LD_INT 8
5953: PPUSH
5954: LD_VAR 0 8
5958: PPUSH
5959: CALL_OW 380
// un := CreateHuman ;
5963: LD_ADDR_VAR 0 6
5967: PUSH
5968: CALL_OW 44
5972: ST_TO_ADDR
// SetDir ( un , d ) ;
5973: LD_VAR 0 6
5977: PPUSH
5978: LD_VAR 0 4
5982: PPUSH
5983: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5987: LD_VAR 0 6
5991: PPUSH
5992: LD_VAR 0 3
5996: PPUSH
5997: CALL_OW 52
// end ;
6001: GO 5890
6003: POP
6004: POP
// ar_force_tmp := [ ] ;
6005: LD_ADDR_EXP 37
6009: PUSH
6010: EMPTY
6011: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
6012: LD_INT 1
6014: PPUSH
6015: LD_INT 1
6017: PPUSH
6018: LD_VAR 0 8
6022: PPUSH
6023: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6027: LD_ADDR_OWVAR 33
6031: PUSH
6032: LD_STRING SecondCharsGal
6034: ST_TO_ADDR
// hc_face_number := 4 ;
6035: LD_ADDR_OWVAR 34
6039: PUSH
6040: LD_INT 4
6042: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
6043: LD_ADDR_EXP 37
6047: PUSH
6048: LD_EXP 37
6052: PPUSH
6053: LD_INT 1
6055: PPUSH
6056: CALL_OW 44
6060: PPUSH
6061: CALL_OW 1
6065: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6066: LD_INT 2
6068: PPUSH
6069: LD_INT 4
6071: PPUSH
6072: LD_VAR 0 8
6076: PPUSH
6077: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6081: LD_ADDR_OWVAR 33
6085: PUSH
6086: LD_STRING SecondCharsGal
6088: ST_TO_ADDR
// hc_face_number := 15 ;
6089: LD_ADDR_OWVAR 34
6093: PUSH
6094: LD_INT 15
6096: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
6097: LD_ADDR_EXP 37
6101: PUSH
6102: LD_EXP 37
6106: PPUSH
6107: LD_INT 2
6109: PPUSH
6110: CALL_OW 44
6114: PPUSH
6115: CALL_OW 1
6119: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6120: LD_INT 2
6122: PPUSH
6123: LD_INT 4
6125: PPUSH
6126: LD_VAR 0 8
6130: PPUSH
6131: CALL_OW 380
// hc_gallery :=  ;
6135: LD_ADDR_OWVAR 33
6139: PUSH
6140: LD_STRING 
6142: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
6143: LD_ADDR_EXP 37
6147: PUSH
6148: LD_EXP 37
6152: PPUSH
6153: LD_INT 3
6155: PPUSH
6156: CALL_OW 44
6160: PPUSH
6161: CALL_OW 1
6165: ST_TO_ADDR
// hc_sex := sex_male ;
6166: LD_ADDR_OWVAR 27
6170: PUSH
6171: LD_INT 1
6173: ST_TO_ADDR
// hc_class = 11 ;
6174: LD_ADDR_OWVAR 28
6178: PUSH
6179: LD_INT 11
6181: ST_TO_ADDR
// hc_gallery = sandar ;
6182: LD_ADDR_OWVAR 33
6186: PUSH
6187: LD_STRING sandar
6189: ST_TO_ADDR
// hc_face_number = 33 ;
6190: LD_ADDR_OWVAR 34
6194: PUSH
6195: LD_INT 33
6197: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
6198: LD_ADDR_OWVAR 26
6202: PUSH
6203: LD_STRING Thabit Muhair Saliba
6205: ST_TO_ADDR
// hc_skills = [ 5 , 5 , 3 , 3 ] ;
6206: LD_ADDR_OWVAR 31
6210: PUSH
6211: LD_INT 5
6213: PUSH
6214: LD_INT 5
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 3
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: ST_TO_ADDR
// Saliba := CreateHuman ;
6229: LD_ADDR_EXP 39
6233: PUSH
6234: CALL_OW 44
6238: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
6239: LD_EXP 39
6243: PPUSH
6244: LD_INT 7
6246: PPUSH
6247: CALL_OW 52
// hc_name := Dietrich Gensher ;
6251: LD_ADDR_OWVAR 26
6255: PUSH
6256: LD_STRING Dietrich Gensher
6258: ST_TO_ADDR
// hc_class := 1 ;
6259: LD_ADDR_OWVAR 28
6263: PUSH
6264: LD_INT 1
6266: ST_TO_ADDR
// hc_gallery := sandar ;
6267: LD_ADDR_OWVAR 33
6271: PUSH
6272: LD_STRING sandar
6274: ST_TO_ADDR
// hc_face_number := 4 ;
6275: LD_ADDR_OWVAR 34
6279: PUSH
6280: LD_INT 4
6282: ST_TO_ADDR
// hc_skills := [ 10 , 6 , 5 , 4 ] ;
6283: LD_ADDR_OWVAR 31
6287: PUSH
6288: LD_INT 10
6290: PUSH
6291: LD_INT 6
6293: PUSH
6294: LD_INT 5
6296: PUSH
6297: LD_INT 4
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: ST_TO_ADDR
// Gensher := CreateHuman ;
6306: LD_ADDR_EXP 40
6310: PUSH
6311: CALL_OW 44
6315: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_w ) ;
6316: LD_EXP 40
6320: PPUSH
6321: LD_INT 45
6323: PPUSH
6324: CALL_OW 52
// hc_name := Abdul Shariff ;
6328: LD_ADDR_OWVAR 26
6332: PUSH
6333: LD_STRING Abdul Shariff
6335: ST_TO_ADDR
// hc_class := 11 ;
6336: LD_ADDR_OWVAR 28
6340: PUSH
6341: LD_INT 11
6343: ST_TO_ADDR
// hc_gallery := sandar ;
6344: LD_ADDR_OWVAR 33
6348: PUSH
6349: LD_STRING sandar
6351: ST_TO_ADDR
// hc_face_number := 5 ;
6352: LD_ADDR_OWVAR 34
6356: PUSH
6357: LD_INT 5
6359: ST_TO_ADDR
// hc_skills := [ 6 , 5 , 3 , 3 ] ;
6360: LD_ADDR_OWVAR 31
6364: PUSH
6365: LD_INT 6
6367: PUSH
6368: LD_INT 5
6370: PUSH
6371: LD_INT 3
6373: PUSH
6374: LD_INT 3
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: ST_TO_ADDR
// Shariff := CreateHuman ;
6383: LD_ADDR_EXP 41
6387: PUSH
6388: CALL_OW 44
6392: ST_TO_ADDR
// PlaceHumanInUnit ( Shariff , ar_dep_n ) ;
6393: LD_EXP 41
6397: PPUSH
6398: LD_INT 94
6400: PPUSH
6401: CALL_OW 52
// InitHc ;
6405: CALL_OW 19
// for d := 1 to 5 do
6409: LD_ADDR_VAR 0 4
6413: PUSH
6414: DOUBLE
6415: LD_INT 1
6417: DEC
6418: ST_TO_ADDR
6419: LD_INT 5
6421: PUSH
6422: FOR_TO
6423: IFFALSE 6907
// begin fac := FilterUnitsInArea ( arAreas [ d ] , [ f_btype , b_factory ] ) ;
6425: LD_ADDR_VAR 0 11
6429: PUSH
6430: LD_EXP 49
6434: PUSH
6435: LD_VAR 0 4
6439: ARRAY
6440: PPUSH
6441: LD_INT 30
6443: PUSH
6444: LD_INT 3
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PPUSH
6451: CALL_OW 70
6455: ST_TO_ADDR
// if fac then
6456: LD_VAR 0 11
6460: IFFALSE 6493
// arFactories := Replace ( arFactories , d , fac [ 1 ] ) else
6462: LD_ADDR_EXP 48
6466: PUSH
6467: LD_EXP 48
6471: PPUSH
6472: LD_VAR 0 4
6476: PPUSH
6477: LD_VAR 0 11
6481: PUSH
6482: LD_INT 1
6484: ARRAY
6485: PPUSH
6486: CALL_OW 1
6490: ST_TO_ADDR
6491: GO 6516
// arFactories := Replace ( arFactories , d , 0 ) ;
6493: LD_ADDR_EXP 48
6497: PUSH
6498: LD_EXP 48
6502: PPUSH
6503: LD_VAR 0 4
6507: PPUSH
6508: LD_INT 0
6510: PPUSH
6511: CALL_OW 1
6515: ST_TO_ADDR
// for i := 1 to 2 do
6516: LD_ADDR_VAR 0 3
6520: PUSH
6521: DOUBLE
6522: LD_INT 1
6524: DEC
6525: ST_TO_ADDR
6526: LD_INT 2
6528: PUSH
6529: FOR_TO
6530: IFFALSE 6673
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_remote , ar_crane , 100 ) ;
6532: LD_INT 14
6534: PPUSH
6535: LD_INT 3
6537: PPUSH
6538: LD_INT 2
6540: PPUSH
6541: LD_INT 88
6543: PPUSH
6544: LD_INT 100
6546: PPUSH
6547: CALL 21555 0 5
// un := CreateVehicle ;
6551: LD_ADDR_VAR 0 6
6555: PUSH
6556: CALL_OW 45
6560: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6561: LD_ADDR_EXP 45
6565: PUSH
6566: LD_EXP 45
6570: PPUSH
6571: LD_EXP 45
6575: PUSH
6576: LD_INT 1
6578: PLUS
6579: PPUSH
6580: LD_VAR 0 4
6584: PUSH
6585: LD_VAR 0 6
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PPUSH
6594: CALL_OW 1
6598: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6599: LD_VAR 0 6
6603: PPUSH
6604: LD_INT 0
6606: PPUSH
6607: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6611: LD_VAR 0 6
6615: PPUSH
6616: LD_INT 0
6618: PPUSH
6619: LD_INT 5
6621: PPUSH
6622: CALL_OW 12
6626: PPUSH
6627: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6631: LD_VAR 0 6
6635: PPUSH
6636: LD_INT 24
6638: PUSH
6639: LD_INT 20
6641: PUSH
6642: LD_INT 21
6644: PUSH
6645: LD_INT 22
6647: PUSH
6648: LD_INT 46
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: PUSH
6658: LD_VAR 0 4
6662: ARRAY
6663: PPUSH
6664: LD_INT 0
6666: PPUSH
6667: CALL_OW 49
// end ;
6671: GO 6529
6673: POP
6674: POP
// for i := 1 to 4 do
6675: LD_ADDR_VAR 0 3
6679: PUSH
6680: DOUBLE
6681: LD_INT 1
6683: DEC
6684: ST_TO_ADDR
6685: LD_INT 4
6687: PUSH
6688: FOR_TO
6689: IFFALSE 6903
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_siberite , engine_solar ] [ rand ( 1 , 3 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
6691: LD_INT 14
6693: PPUSH
6694: LD_INT 3
6696: PUSH
6697: LD_INT 3
6699: PUSH
6700: LD_INT 2
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 1
6710: PPUSH
6711: LD_INT 3
6713: PPUSH
6714: CALL_OW 12
6718: ARRAY
6719: PPUSH
6720: LD_INT 1
6722: PUSH
6723: LD_INT 5
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: LD_INT 1
6732: PPUSH
6733: LD_INT 2
6735: PPUSH
6736: CALL_OW 12
6740: ARRAY
6741: PPUSH
6742: LD_INT 25
6744: PUSH
6745: LD_INT 27
6747: PUSH
6748: LD_INT 26
6750: PUSH
6751: LD_INT 28
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: PUSH
6760: LD_VAR 0 3
6764: PUSH
6765: LD_INT 4
6767: MOD
6768: PUSH
6769: LD_INT 1
6771: PLUS
6772: ARRAY
6773: PPUSH
6774: LD_INT 100
6776: PPUSH
6777: CALL 21555 0 5
// un := CreateVehicle ;
6781: LD_ADDR_VAR 0 6
6785: PUSH
6786: CALL_OW 45
6790: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6791: LD_ADDR_EXP 45
6795: PUSH
6796: LD_EXP 45
6800: PPUSH
6801: LD_EXP 45
6805: PUSH
6806: LD_INT 1
6808: PLUS
6809: PPUSH
6810: LD_VAR 0 4
6814: PUSH
6815: LD_VAR 0 6
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PPUSH
6824: CALL_OW 1
6828: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6829: LD_VAR 0 6
6833: PPUSH
6834: LD_INT 0
6836: PPUSH
6837: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6841: LD_VAR 0 6
6845: PPUSH
6846: LD_INT 0
6848: PPUSH
6849: LD_INT 5
6851: PPUSH
6852: CALL_OW 12
6856: PPUSH
6857: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6861: LD_VAR 0 6
6865: PPUSH
6866: LD_INT 24
6868: PUSH
6869: LD_INT 20
6871: PUSH
6872: LD_INT 21
6874: PUSH
6875: LD_INT 22
6877: PUSH
6878: LD_INT 46
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: PUSH
6888: LD_VAR 0 4
6892: ARRAY
6893: PPUSH
6894: LD_INT 0
6896: PPUSH
6897: CALL_OW 49
// end ;
6901: GO 6688
6903: POP
6904: POP
// end ;
6905: GO 6422
6907: POP
6908: POP
// InitHc ;
6909: CALL_OW 19
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
6913: LD_ADDR_VAR 0 9
6917: PUSH
6918: LD_INT 22
6920: PUSH
6921: LD_INT 2
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PPUSH
6928: CALL_OW 69
6932: ST_TO_ADDR
// if tmp and side <> 2 then
6933: LD_VAR 0 9
6937: PUSH
6938: LD_VAR 0 1
6942: PUSH
6943: LD_INT 2
6945: NONEQUAL
6946: AND
6947: IFFALSE 6980
// begin for i in tmp do
6949: LD_ADDR_VAR 0 3
6953: PUSH
6954: LD_VAR 0 9
6958: PUSH
6959: FOR_IN
6960: IFFALSE 6978
// SetSide ( i , side ) ;
6962: LD_VAR 0 3
6966: PPUSH
6967: LD_VAR 0 1
6971: PPUSH
6972: CALL_OW 235
6976: GO 6959
6978: POP
6979: POP
// end ; end ;
6980: LD_VAR 0 2
6984: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
6985: LD_INT 0
6987: PPUSH
6988: PPUSH
6989: PPUSH
6990: PPUSH
// tmp := AreaToList ( area , 0 ) ;
6991: LD_ADDR_VAR 0 5
6995: PUSH
6996: LD_VAR 0 1
7000: PPUSH
7001: LD_INT 0
7003: PPUSH
7004: CALL_OW 517
7008: ST_TO_ADDR
// if not tmp then
7009: LD_VAR 0 5
7013: NOT
7014: IFFALSE 7018
// exit ;
7016: GO 7256
// for i := 1 to n do
7018: LD_ADDR_VAR 0 4
7022: PUSH
7023: DOUBLE
7024: LD_INT 1
7026: DEC
7027: ST_TO_ADDR
7028: LD_VAR 0 2
7032: PUSH
7033: FOR_TO
7034: IFFALSE 7254
// begin r := rand ( 1 , tmp [ 1 ] ) ;
7036: LD_ADDR_VAR 0 6
7040: PUSH
7041: LD_INT 1
7043: PPUSH
7044: LD_VAR 0 5
7048: PUSH
7049: LD_INT 1
7051: ARRAY
7052: PPUSH
7053: CALL_OW 12
7057: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , side_bot , 0 ) ;
7058: LD_VAR 0 5
7062: PUSH
7063: LD_INT 1
7065: ARRAY
7066: PUSH
7067: LD_VAR 0 6
7071: ARRAY
7072: PPUSH
7073: LD_VAR 0 5
7077: PUSH
7078: LD_INT 2
7080: ARRAY
7081: PUSH
7082: LD_VAR 0 6
7086: ARRAY
7087: PPUSH
7088: LD_EXP 3
7092: PPUSH
7093: LD_INT 0
7095: PPUSH
7096: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
7100: LD_ADDR_EXP 51
7104: PUSH
7105: LD_EXP 51
7109: PPUSH
7110: LD_EXP 51
7114: PUSH
7115: LD_INT 1
7117: PLUS
7118: PPUSH
7119: LD_VAR 0 5
7123: PUSH
7124: LD_INT 1
7126: ARRAY
7127: PUSH
7128: LD_VAR 0 6
7132: ARRAY
7133: PPUSH
7134: CALL_OW 2
7138: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
7139: LD_ADDR_EXP 51
7143: PUSH
7144: LD_EXP 51
7148: PPUSH
7149: LD_EXP 51
7153: PUSH
7154: LD_INT 1
7156: PLUS
7157: PPUSH
7158: LD_VAR 0 5
7162: PUSH
7163: LD_INT 2
7165: ARRAY
7166: PUSH
7167: LD_VAR 0 6
7171: ARRAY
7172: PPUSH
7173: CALL_OW 2
7177: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
7178: LD_ADDR_VAR 0 5
7182: PUSH
7183: LD_VAR 0 5
7187: PPUSH
7188: LD_INT 1
7190: PPUSH
7191: LD_VAR 0 5
7195: PUSH
7196: LD_INT 1
7198: ARRAY
7199: PPUSH
7200: LD_VAR 0 6
7204: PPUSH
7205: CALL_OW 3
7209: PPUSH
7210: CALL_OW 1
7214: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
7215: LD_ADDR_VAR 0 5
7219: PUSH
7220: LD_VAR 0 5
7224: PPUSH
7225: LD_INT 2
7227: PPUSH
7228: LD_VAR 0 5
7232: PUSH
7233: LD_INT 2
7235: ARRAY
7236: PPUSH
7237: LD_VAR 0 6
7241: PPUSH
7242: CALL_OW 3
7246: PPUSH
7247: CALL_OW 1
7251: ST_TO_ADDR
// end ;
7252: GO 7033
7254: POP
7255: POP
// end ;
7256: LD_VAR 0 3
7260: RET
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arFactories , arAreas , arVehiclesCounter , arMinesList ; function InitScriptBases ; begin
7261: LD_INT 0
7263: PPUSH
// arTech := GetTechNation ( side_bot , nation_arabian , state_enabled ) ;
7264: LD_ADDR_EXP 42
7268: PUSH
7269: LD_EXP 3
7273: PPUSH
7274: LD_INT 2
7276: PPUSH
7277: LD_INT 1
7279: PPUSH
7280: CALL 16778 0 3
7284: ST_TO_ADDR
// arConstructList := [ ] ;
7285: LD_ADDR_EXP 43
7289: PUSH
7290: EMPTY
7291: ST_TO_ADDR
// arBuildings := [ ] ;
7292: LD_ADDR_EXP 44
7296: PUSH
7297: EMPTY
7298: ST_TO_ADDR
// arVehicles := [ ] ;
7299: LD_ADDR_EXP 45
7303: PUSH
7304: EMPTY
7305: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
7306: LD_ADDR_EXP 46
7310: PUSH
7311: EMPTY
7312: ST_TO_ADDR
// arDrivers := [ ] ;
7313: LD_ADDR_EXP 47
7317: PUSH
7318: EMPTY
7319: ST_TO_ADDR
// arFactories := [ ] ;
7320: LD_ADDR_EXP 48
7324: PUSH
7325: EMPTY
7326: ST_TO_ADDR
// arAreas := [ area_base_south , area_base_north , area_base_west , area_base_east , area_base_north2 ] ;
7327: LD_ADDR_EXP 49
7331: PUSH
7332: LD_INT 33
7334: PUSH
7335: LD_INT 35
7337: PUSH
7338: LD_INT 34
7340: PUSH
7341: LD_INT 36
7343: PUSH
7344: LD_INT 38
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: ST_TO_ADDR
// arVehiclesCounter := [ 6 , 6 , 6 , 6 , 2 ] ;
7354: LD_ADDR_EXP 50
7358: PUSH
7359: LD_INT 6
7361: PUSH
7362: LD_INT 6
7364: PUSH
7365: LD_INT 6
7367: PUSH
7368: LD_INT 6
7370: PUSH
7371: LD_INT 2
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: ST_TO_ADDR
// arMinesList := [ ] ;
7381: LD_ADDR_EXP 51
7385: PUSH
7386: EMPTY
7387: ST_TO_ADDR
// PlaceMines ( minefield_east , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
7388: LD_INT 1
7390: PPUSH
7391: LD_INT 7
7393: PUSH
7394: LD_INT 9
7396: PUSH
7397: LD_INT 11
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: PUSH
7405: LD_OWVAR 67
7409: ARRAY
7410: PPUSH
7411: CALL 6985 0 2
// PlaceMines ( minefield_north , [ 7 , 9 , 9 ] [ Difficulty ] ) ;
7415: LD_INT 3
7417: PPUSH
7418: LD_INT 7
7420: PUSH
7421: LD_INT 9
7423: PUSH
7424: LD_INT 9
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: LIST
7431: PUSH
7432: LD_OWVAR 67
7436: ARRAY
7437: PPUSH
7438: CALL 6985 0 2
// PlaceMines ( minefield_west , [ 6 , 8 , 12 ] [ Difficulty ] ) ;
7442: LD_INT 2
7444: PPUSH
7445: LD_INT 6
7447: PUSH
7448: LD_INT 8
7450: PUSH
7451: LD_INT 12
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: PUSH
7459: LD_OWVAR 67
7463: ARRAY
7464: PPUSH
7465: CALL 6985 0 2
// PlaceMines ( minefield_north2 , [ 5 , 7 , 9 ] [ Difficulty ] ) ;
7469: LD_INT 39
7471: PPUSH
7472: LD_INT 5
7474: PUSH
7475: LD_INT 7
7477: PUSH
7478: LD_INT 9
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: LIST
7485: PUSH
7486: LD_OWVAR 67
7490: ARRAY
7491: PPUSH
7492: CALL 6985 0 2
// PlaceMines ( minefield_south , [ 4 , 6 , 8 ] [ Difficulty ] ) ;
7496: LD_INT 25
7498: PPUSH
7499: LD_INT 4
7501: PUSH
7502: LD_INT 6
7504: PUSH
7505: LD_INT 8
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: PUSH
7513: LD_OWVAR 67
7517: ARRAY
7518: PPUSH
7519: CALL 6985 0 2
// PlaceMines ( minefield_extra , [ 12 , 14 , 16 ] [ Difficulty ] ) ;
7523: LD_INT 41
7525: PPUSH
7526: LD_INT 12
7528: PUSH
7529: LD_INT 14
7531: PUSH
7532: LD_INT 16
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: PUSH
7540: LD_OWVAR 67
7544: ARRAY
7545: PPUSH
7546: CALL 6985 0 2
// end ;
7550: LD_VAR 0 1
7554: RET
// function ArabianBaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
7555: LD_INT 0
7557: PPUSH
7558: PPUSH
7559: PPUSH
7560: PPUSH
7561: PPUSH
7562: PPUSH
7563: PPUSH
7564: PPUSH
7565: PPUSH
7566: PPUSH
7567: PPUSH
7568: PPUSH
7569: PPUSH
7570: PPUSH
7571: PPUSH
7572: PPUSH
7573: PPUSH
7574: PPUSH
7575: PPUSH
7576: PPUSH
7577: PPUSH
7578: PPUSH
7579: PPUSH
7580: PPUSH
7581: PPUSH
7582: PPUSH
7583: PPUSH
// enable ;
7584: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
7585: LD_ADDR_VAR 0 10
7589: PUSH
7590: LD_INT 81
7592: PUSH
7593: LD_VAR 0 1
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PPUSH
7602: CALL_OW 69
7606: ST_TO_ADDR
// if tmp then
7607: LD_VAR 0 10
7611: IFFALSE 7632
// enemySide := GetSide ( tmp [ 1 ] ) ;
7613: LD_ADDR_VAR 0 34
7617: PUSH
7618: LD_VAR 0 10
7622: PUSH
7623: LD_INT 1
7625: ARRAY
7626: PPUSH
7627: CALL_OW 255
7631: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7632: LD_ADDR_VAR 0 22
7636: PUSH
7637: LD_VAR 0 3
7641: PPUSH
7642: LD_INT 81
7644: PUSH
7645: LD_VAR 0 1
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 70
7658: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
7659: LD_ADDR_VAR 0 23
7663: PUSH
7664: LD_VAR 0 4
7668: PPUSH
7669: LD_INT 81
7671: PUSH
7672: LD_VAR 0 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PPUSH
7681: CALL_OW 70
7685: ST_TO_ADDR
// vehicles := CheckByIndex ( arVehicles , 1 , base , 2 ) ;
7686: LD_ADDR_VAR 0 26
7690: PUSH
7691: LD_EXP 45
7695: PPUSH
7696: LD_INT 1
7698: PPUSH
7699: LD_VAR 0 2
7703: PPUSH
7704: LD_INT 2
7706: PPUSH
7707: CALL 59082 0 4
7711: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7712: LD_ADDR_VAR 0 32
7716: PUSH
7717: LD_VAR 0 3
7721: PPUSH
7722: LD_INT 22
7724: PUSH
7725: LD_VAR 0 1
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 2
7736: PUSH
7737: LD_INT 30
7739: PUSH
7740: LD_INT 0
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 30
7749: PUSH
7750: LD_INT 1
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 70
7770: ST_TO_ADDR
// if depot then
7771: LD_VAR 0 32
7775: IFFALSE 7791
// depot := depot [ 1 ] ;
7777: LD_ADDR_VAR 0 32
7781: PUSH
7782: LD_VAR 0 32
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: ST_TO_ADDR
// if arTech then
7791: LD_EXP 42
7795: IFFALSE 7954
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7797: LD_ADDR_VAR 0 12
7801: PUSH
7802: LD_VAR 0 3
7806: PPUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 50
7821: PUSH
7822: EMPTY
7823: LIST
7824: PUSH
7825: LD_INT 2
7827: PUSH
7828: LD_INT 30
7830: PUSH
7831: LD_INT 6
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 30
7840: PUSH
7841: LD_INT 7
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 30
7850: PUSH
7851: LD_INT 8
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: LIST
7868: PPUSH
7869: CALL_OW 70
7873: ST_TO_ADDR
// if lab then
7874: LD_VAR 0 12
7878: IFFALSE 7954
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7880: LD_VAR 0 12
7884: PUSH
7885: LD_INT 1
7887: ARRAY
7888: PPUSH
7889: CALL_OW 461
7893: PUSH
7894: LD_INT 2
7896: EQUAL
7897: IFFALSE 7954
// begin for i in arTech do
7899: LD_ADDR_VAR 0 9
7903: PUSH
7904: LD_EXP 42
7908: PUSH
7909: FOR_IN
7910: IFFALSE 7952
// if CanBeResearched ( lab [ 1 ] , i ) then
7912: LD_VAR 0 12
7916: PUSH
7917: LD_INT 1
7919: ARRAY
7920: PPUSH
7921: LD_VAR 0 9
7925: PPUSH
7926: CALL_OW 430
7930: IFFALSE 7950
// begin AddComResearch ( lab [ 1 ] , i ) ;
7932: LD_VAR 0 12
7936: PUSH
7937: LD_INT 1
7939: ARRAY
7940: PPUSH
7941: LD_VAR 0 9
7945: PPUSH
7946: CALL_OW 184
// end ;
7950: GO 7909
7952: POP
7953: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7954: LD_ADDR_VAR 0 29
7958: PUSH
7959: LD_VAR 0 3
7963: PPUSH
7964: LD_INT 22
7966: PUSH
7967: LD_VAR 0 1
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: LD_INT 30
7978: PUSH
7979: LD_INT 3
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: LD_INT 50
7988: PUSH
7989: EMPTY
7990: LIST
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: PPUSH
7997: CALL_OW 70
8001: ST_TO_ADDR
// if fac then
8002: LD_VAR 0 29
8006: IFFALSE 8395
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
8008: LD_VAR 0 29
8012: PUSH
8013: LD_INT 1
8015: ARRAY
8016: PPUSH
8017: CALL_OW 461
8021: PUSH
8022: LD_INT 2
8024: EQUAL
8025: IFFALSE 8395
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
8027: LD_ADDR_VAR 0 30
8031: PUSH
8032: LD_VAR 0 3
8036: PPUSH
8037: LD_INT 2
8039: PUSH
8040: LD_INT 30
8042: PUSH
8043: LD_INT 32
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 30
8052: PUSH
8053: LD_INT 33
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 35
8067: PUSH
8068: LD_INT 0
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 70
8083: ST_TO_ADDR
// if emptyTowers then
8084: LD_VAR 0 30
8088: IFFALSE 8138
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
8090: LD_ADDR_VAR 0 31
8094: PUSH
8095: LD_VAR 0 30
8099: PUSH
8100: LD_INT 1
8102: ARRAY
8103: PPUSH
8104: LD_VAR 0 3
8108: PPUSH
8109: CALL 27062 0 2
8113: ST_TO_ADDR
// if weapon then
8114: LD_VAR 0 31
8118: IFFALSE 8138
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
8120: LD_VAR 0 30
8124: PUSH
8125: LD_INT 1
8127: ARRAY
8128: PPUSH
8129: LD_VAR 0 31
8133: PPUSH
8134: CALL_OW 148
// end ; if arConstructList then
8138: LD_EXP 43
8142: IFFALSE 8395
// for i := 1 to Count ( arConstructList ) do
8144: LD_ADDR_VAR 0 9
8148: PUSH
8149: DOUBLE
8150: LD_INT 1
8152: DEC
8153: ST_TO_ADDR
8154: LD_EXP 43
8158: PPUSH
8159: CALL 18817 0 1
8163: PUSH
8164: FOR_TO
8165: IFFALSE 8393
// begin if arConstructList [ i ] [ 1 ] = base then
8167: LD_EXP 43
8171: PUSH
8172: LD_VAR 0 9
8176: ARRAY
8177: PUSH
8178: LD_INT 1
8180: ARRAY
8181: PUSH
8182: LD_VAR 0 2
8186: EQUAL
8187: IFFALSE 8391
// if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) then
8189: LD_VAR 0 29
8193: PUSH
8194: LD_INT 1
8196: ARRAY
8197: PPUSH
8198: LD_EXP 43
8202: PUSH
8203: LD_VAR 0 9
8207: ARRAY
8208: PUSH
8209: LD_INT 2
8211: ARRAY
8212: PUSH
8213: LD_INT 1
8215: ARRAY
8216: PPUSH
8217: LD_EXP 43
8221: PUSH
8222: LD_VAR 0 9
8226: ARRAY
8227: PUSH
8228: LD_INT 2
8230: ARRAY
8231: PUSH
8232: LD_INT 2
8234: ARRAY
8235: PPUSH
8236: LD_EXP 43
8240: PUSH
8241: LD_VAR 0 9
8245: ARRAY
8246: PUSH
8247: LD_INT 2
8249: ARRAY
8250: PUSH
8251: LD_INT 3
8253: ARRAY
8254: PPUSH
8255: LD_EXP 43
8259: PUSH
8260: LD_VAR 0 9
8264: ARRAY
8265: PUSH
8266: LD_INT 2
8268: ARRAY
8269: PUSH
8270: LD_INT 4
8272: ARRAY
8273: PPUSH
8274: CALL_OW 448
8278: IFFALSE 8391
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) ;
8280: LD_VAR 0 29
8284: PUSH
8285: LD_INT 1
8287: ARRAY
8288: PPUSH
8289: LD_EXP 43
8293: PUSH
8294: LD_VAR 0 9
8298: ARRAY
8299: PUSH
8300: LD_INT 2
8302: ARRAY
8303: PUSH
8304: LD_INT 1
8306: ARRAY
8307: PPUSH
8308: LD_EXP 43
8312: PUSH
8313: LD_VAR 0 9
8317: ARRAY
8318: PUSH
8319: LD_INT 2
8321: ARRAY
8322: PUSH
8323: LD_INT 2
8325: ARRAY
8326: PPUSH
8327: LD_EXP 43
8331: PUSH
8332: LD_VAR 0 9
8336: ARRAY
8337: PUSH
8338: LD_INT 2
8340: ARRAY
8341: PUSH
8342: LD_INT 3
8344: ARRAY
8345: PPUSH
8346: LD_EXP 43
8350: PUSH
8351: LD_VAR 0 9
8355: ARRAY
8356: PUSH
8357: LD_INT 2
8359: ARRAY
8360: PUSH
8361: LD_INT 4
8363: ARRAY
8364: PPUSH
8365: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
8369: LD_ADDR_EXP 43
8373: PUSH
8374: LD_EXP 43
8378: PPUSH
8379: LD_VAR 0 9
8383: PPUSH
8384: CALL_OW 3
8388: ST_TO_ADDR
// break ;
8389: GO 8393
// end ; end ;
8391: GO 8164
8393: POP
8394: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8395: LD_ADDR_VAR 0 10
8399: PUSH
8400: LD_VAR 0 3
8404: PPUSH
8405: LD_INT 21
8407: PUSH
8408: LD_INT 3
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PUSH
8415: LD_INT 3
8417: PUSH
8418: LD_INT 57
8420: PUSH
8421: EMPTY
8422: LIST
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 3
8430: PUSH
8431: LD_INT 24
8433: PUSH
8434: LD_INT 1000
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 70
8454: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
8455: LD_ADDR_VAR 0 17
8459: PUSH
8460: LD_VAR 0 3
8464: PPUSH
8465: CALL_OW 435
8469: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
8470: LD_ADDR_VAR 0 14
8474: PUSH
8475: LD_VAR 0 5
8479: PPUSH
8480: LD_INT 25
8482: PUSH
8483: LD_INT 3
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 50
8492: PUSH
8493: EMPTY
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PPUSH
8500: CALL_OW 72
8504: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( arFactories [ base ] ) then
8505: LD_VAR 0 14
8509: PPUSH
8510: LD_INT 3
8512: PUSH
8513: LD_INT 120
8515: PUSH
8516: LD_INT 7
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: PUSH
8527: LD_INT 3
8529: PUSH
8530: LD_INT 54
8532: PUSH
8533: EMPTY
8534: LIST
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 72
8548: PUSH
8549: LD_EXP 48
8553: PUSH
8554: LD_VAR 0 2
8558: ARRAY
8559: PPUSH
8560: CALL_OW 302
8564: AND
8565: IFFALSE 8626
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , arFactories [ base ] ) ;
8567: LD_VAR 0 14
8571: PPUSH
8572: LD_INT 3
8574: PUSH
8575: LD_INT 120
8577: PUSH
8578: LD_INT 7
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: LD_INT 3
8591: PUSH
8592: LD_INT 54
8594: PUSH
8595: EMPTY
8596: LIST
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PPUSH
8606: CALL_OW 72
8610: PPUSH
8611: LD_EXP 48
8615: PUSH
8616: LD_VAR 0 2
8620: ARRAY
8621: PPUSH
8622: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
8626: LD_ADDR_VAR 0 18
8630: PUSH
8631: LD_VAR 0 5
8635: PPUSH
8636: LD_INT 25
8638: PUSH
8639: LD_INT 4
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: LD_INT 50
8648: PUSH
8649: EMPTY
8650: LIST
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PPUSH
8656: CALL_OW 72
8660: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
8661: LD_ADDR_VAR 0 12
8665: PUSH
8666: LD_VAR 0 3
8670: PPUSH
8671: LD_INT 2
8673: PUSH
8674: LD_INT 30
8676: PUSH
8677: LD_INT 6
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 30
8686: PUSH
8687: LD_INT 7
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 30
8696: PUSH
8697: LD_INT 8
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: PPUSH
8710: CALL_OW 70
8714: ST_TO_ADDR
// if sci then
8715: LD_VAR 0 18
8719: IFFALSE 8880
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
8721: LD_ADDR_VAR 0 20
8725: PUSH
8726: LD_VAR 0 5
8730: PPUSH
8731: LD_INT 95
8733: PUSH
8734: LD_VAR 0 3
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PUSH
8743: LD_INT 120
8745: PUSH
8746: LD_INT 1
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PPUSH
8757: CALL_OW 72
8761: ST_TO_ADDR
// if hurtUnits then
8762: LD_VAR 0 20
8766: IFFALSE 8827
// begin for i in sci do
8768: LD_ADDR_VAR 0 9
8772: PUSH
8773: LD_VAR 0 18
8777: PUSH
8778: FOR_IN
8779: IFFALSE 8823
// if IsInUnit ( i ) then
8781: LD_VAR 0 9
8785: PPUSH
8786: CALL_OW 310
8790: IFFALSE 8803
// ComExitBuilding ( i ) else
8792: LD_VAR 0 9
8796: PPUSH
8797: CALL_OW 122
8801: GO 8821
// ComHeal ( i , hurtUnits [ 1 ] ) ;
8803: LD_VAR 0 9
8807: PPUSH
8808: LD_VAR 0 20
8812: PUSH
8813: LD_INT 1
8815: ARRAY
8816: PPUSH
8817: CALL_OW 128
8821: GO 8778
8823: POP
8824: POP
// end else
8825: GO 8880
// if lab then
8827: LD_VAR 0 12
8831: IFFALSE 8880
// begin for i in sci do
8833: LD_ADDR_VAR 0 9
8837: PUSH
8838: LD_VAR 0 18
8842: PUSH
8843: FOR_IN
8844: IFFALSE 8878
// if not IsInUnit ( i ) then
8846: LD_VAR 0 9
8850: PPUSH
8851: CALL_OW 310
8855: NOT
8856: IFFALSE 8876
// ComEnterUnit ( i , lab [ 1 ] ) ;
8858: LD_VAR 0 9
8862: PPUSH
8863: LD_VAR 0 12
8867: PUSH
8868: LD_INT 1
8870: ARRAY
8871: PPUSH
8872: CALL_OW 120
8876: GO 8843
8878: POP
8879: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8880: LD_ADDR_VAR 0 13
8884: PUSH
8885: LD_VAR 0 5
8889: PPUSH
8890: LD_INT 25
8892: PUSH
8893: LD_INT 2
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PPUSH
8900: CALL_OW 72
8904: ST_TO_ADDR
// buildingsToBuild := CheckByIndex ( arBuildings , 1 , base , 2 ) ;
8905: LD_ADDR_VAR 0 33
8909: PUSH
8910: LD_EXP 44
8914: PPUSH
8915: LD_INT 1
8917: PPUSH
8918: LD_VAR 0 2
8922: PPUSH
8923: LD_INT 2
8925: PPUSH
8926: CALL 59082 0 4
8930: ST_TO_ADDR
// if eng then
8931: LD_VAR 0 13
8935: IFFALSE 9769
// begin for i in eng do
8937: LD_ADDR_VAR 0 9
8941: PUSH
8942: LD_VAR 0 13
8946: PUSH
8947: FOR_IN
8948: IFFALSE 9767
// begin tag := GetTag ( i ) ;
8950: LD_ADDR_VAR 0 15
8954: PUSH
8955: LD_VAR 0 9
8959: PPUSH
8960: CALL_OW 110
8964: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
8965: LD_VAR 0 9
8969: PPUSH
8970: LD_VAR 0 4
8974: PPUSH
8975: CALL_OW 308
8979: IFFALSE 9010
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8981: LD_VAR 0 9
8985: PPUSH
8986: LD_VAR 0 7
8990: PUSH
8991: LD_INT 1
8993: ARRAY
8994: PPUSH
8995: LD_VAR 0 7
8999: PUSH
9000: LD_INT 2
9002: ARRAY
9003: PPUSH
9004: CALL_OW 111
// continue ;
9008: GO 8947
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
9010: LD_VAR 0 9
9014: PPUSH
9015: CALL_OW 256
9019: PUSH
9020: LD_INT 800
9022: LESS
9023: PUSH
9024: LD_VAR 0 15
9028: PUSH
9029: LD_INT 1
9031: NONEQUAL
9032: AND
9033: IFFALSE 9083
// begin SetTag ( i , tHeal ) ;
9035: LD_VAR 0 9
9039: PPUSH
9040: LD_INT 1
9042: PPUSH
9043: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9047: LD_VAR 0 9
9051: PPUSH
9052: LD_VAR 0 6
9056: PUSH
9057: LD_INT 1
9059: ARRAY
9060: PPUSH
9061: LD_VAR 0 6
9065: PUSH
9066: LD_INT 2
9068: ARRAY
9069: PPUSH
9070: CALL_OW 111
// AddComHold ( i ) ;
9074: LD_VAR 0 9
9078: PPUSH
9079: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
9083: LD_VAR 0 15
9087: PUSH
9088: LD_INT 1
9090: EQUAL
9091: PUSH
9092: LD_VAR 0 9
9096: PPUSH
9097: CALL_OW 256
9101: PUSH
9102: LD_INT 1000
9104: EQUAL
9105: AND
9106: IFFALSE 9120
// SetTag ( i , 0 ) ;
9108: LD_VAR 0 9
9112: PPUSH
9113: LD_INT 0
9115: PPUSH
9116: CALL_OW 109
// if not tag then
9120: LD_VAR 0 15
9124: NOT
9125: IFFALSE 9292
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9127: LD_ADDR_VAR 0 11
9131: PUSH
9132: LD_VAR 0 3
9136: PPUSH
9137: LD_INT 57
9139: PUSH
9140: EMPTY
9141: LIST
9142: PPUSH
9143: CALL_OW 70
9147: ST_TO_ADDR
// if undone then
9148: LD_VAR 0 11
9152: IFFALSE 9174
// begin ComComplete ( i , undone [ 1 ] ) ;
9154: LD_VAR 0 9
9158: PPUSH
9159: LD_VAR 0 11
9163: PUSH
9164: LD_INT 1
9166: ARRAY
9167: PPUSH
9168: CALL 24915 0 2
// continue ;
9172: GO 8947
// end ; if cr or tmp or buildingsToBuild then
9174: LD_VAR 0 17
9178: PUSH
9179: LD_VAR 0 10
9183: OR
9184: PUSH
9185: LD_VAR 0 33
9189: OR
9190: IFFALSE 9266
// begin if IsInUnit ( i ) then
9192: LD_VAR 0 9
9196: PPUSH
9197: CALL_OW 310
9201: IFFALSE 9212
// ComExitBuilding ( i ) ;
9203: LD_VAR 0 9
9207: PPUSH
9208: CALL_OW 122
// if tmp then
9212: LD_VAR 0 10
9216: IFFALSE 9232
// SetTag ( i , tRepair ) else
9218: LD_VAR 0 9
9222: PPUSH
9223: LD_INT 3
9225: PPUSH
9226: CALL_OW 109
9230: GO 9264
// if cr then
9232: LD_VAR 0 17
9236: IFFALSE 9252
// SetTag ( i , tCrates ) else
9238: LD_VAR 0 9
9242: PPUSH
9243: LD_INT 2
9245: PPUSH
9246: CALL_OW 109
9250: GO 9264
// SetTag ( i , tBuild ) ;
9252: LD_VAR 0 9
9256: PPUSH
9257: LD_INT 5
9259: PPUSH
9260: CALL_OW 109
// end else
9264: GO 9292
// if not IsInUnit ( i ) then
9266: LD_VAR 0 9
9270: PPUSH
9271: CALL_OW 310
9275: NOT
9276: IFFALSE 9292
// ComEnterUnit ( i , depot ) ;
9278: LD_VAR 0 9
9282: PPUSH
9283: LD_VAR 0 32
9287: PPUSH
9288: CALL_OW 120
// end ; if tag = tRepair then
9292: LD_VAR 0 15
9296: PUSH
9297: LD_INT 3
9299: EQUAL
9300: IFFALSE 9406
// begin if IsInUnit ( i ) then
9302: LD_VAR 0 9
9306: PPUSH
9307: CALL_OW 310
9311: IFFALSE 9324
// begin ComExitBuilding ( i ) ;
9313: LD_VAR 0 9
9317: PPUSH
9318: CALL_OW 122
// continue ;
9322: GO 8947
// end ; if not tmp then
9324: LD_VAR 0 10
9328: NOT
9329: IFFALSE 9345
// begin SetTag ( i , 0 ) ;
9331: LD_VAR 0 9
9335: PPUSH
9336: LD_INT 0
9338: PPUSH
9339: CALL_OW 109
// continue ;
9343: GO 8947
// end ; if not HasTask ( i ) then
9345: LD_VAR 0 9
9349: PPUSH
9350: CALL_OW 314
9354: NOT
9355: IFFALSE 9375
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
9357: LD_VAR 0 9
9361: PPUSH
9362: LD_VAR 0 10
9366: PUSH
9367: LD_INT 1
9369: ARRAY
9370: PPUSH
9371: CALL_OW 130
// if not IsInArea ( i , area ) then
9375: LD_VAR 0 9
9379: PPUSH
9380: LD_VAR 0 3
9384: PPUSH
9385: CALL_OW 308
9389: NOT
9390: IFFALSE 9406
// ComMoveToArea ( i , area ) ;
9392: LD_VAR 0 9
9396: PPUSH
9397: LD_VAR 0 3
9401: PPUSH
9402: CALL_OW 113
// end ; if tag = tBuild then
9406: LD_VAR 0 15
9410: PUSH
9411: LD_INT 5
9413: EQUAL
9414: IFFALSE 9620
// begin if IsInUnit ( i ) then
9416: LD_VAR 0 9
9420: PPUSH
9421: CALL_OW 310
9425: IFFALSE 9438
// begin ComExitBuilding ( i ) ;
9427: LD_VAR 0 9
9431: PPUSH
9432: CALL_OW 122
// continue ;
9436: GO 8947
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
9438: LD_VAR 0 33
9442: NOT
9443: PUSH
9444: LD_VAR 0 22
9448: OR
9449: PUSH
9450: LD_VAR 0 23
9454: OR
9455: IFFALSE 9473
// begin SetTag ( i , 0 ) ;
9457: LD_VAR 0 9
9461: PPUSH
9462: LD_INT 0
9464: PPUSH
9465: CALL_OW 109
// continue ;
9469: GO 8947
// end else
9471: GO 9512
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
9473: LD_VAR 0 32
9477: PPUSH
9478: LD_VAR 0 33
9482: PUSH
9483: LD_INT 1
9485: ARRAY
9486: PUSH
9487: LD_INT 1
9489: ARRAY
9490: PPUSH
9491: CALL 58325 0 2
9495: NOT
9496: IFFALSE 9512
// begin SetTag ( i , 0 ) ;
9498: LD_VAR 0 9
9502: PPUSH
9503: LD_INT 0
9505: PPUSH
9506: CALL_OW 109
// continue ;
9510: GO 8947
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9512: LD_ADDR_VAR 0 11
9516: PUSH
9517: LD_VAR 0 3
9521: PPUSH
9522: LD_INT 57
9524: PUSH
9525: EMPTY
9526: LIST
9527: PPUSH
9528: CALL_OW 70
9532: ST_TO_ADDR
// if undone then
9533: LD_VAR 0 11
9537: IFFALSE 9559
// begin ComComplete ( i , undone [ 1 ] ) ;
9539: LD_VAR 0 9
9543: PPUSH
9544: LD_VAR 0 11
9548: PUSH
9549: LD_INT 1
9551: ARRAY
9552: PPUSH
9553: CALL 24915 0 2
// continue ;
9557: GO 8947
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
9559: LD_VAR 0 9
9563: PPUSH
9564: LD_VAR 0 33
9568: PUSH
9569: LD_INT 1
9571: ARRAY
9572: PUSH
9573: LD_INT 1
9575: ARRAY
9576: PPUSH
9577: LD_VAR 0 33
9581: PUSH
9582: LD_INT 1
9584: ARRAY
9585: PUSH
9586: LD_INT 2
9588: ARRAY
9589: PPUSH
9590: LD_VAR 0 33
9594: PUSH
9595: LD_INT 1
9597: ARRAY
9598: PUSH
9599: LD_INT 3
9601: ARRAY
9602: PPUSH
9603: LD_VAR 0 33
9607: PUSH
9608: LD_INT 1
9610: ARRAY
9611: PUSH
9612: LD_INT 4
9614: ARRAY
9615: PPUSH
9616: CALL_OW 145
// end ; if tag = tCrates then
9620: LD_VAR 0 15
9624: PUSH
9625: LD_INT 2
9627: EQUAL
9628: IFFALSE 9765
// begin if IsInUnit ( i ) then
9630: LD_VAR 0 9
9634: PPUSH
9635: CALL_OW 310
9639: IFFALSE 9652
// begin ComExitBuilding ( i ) ;
9641: LD_VAR 0 9
9645: PPUSH
9646: CALL_OW 122
// continue ;
9650: GO 8947
// end ; if not cr then
9652: LD_VAR 0 17
9656: NOT
9657: IFFALSE 9673
// begin SetTag ( i , 0 ) ;
9659: LD_VAR 0 9
9663: PPUSH
9664: LD_INT 0
9666: PPUSH
9667: CALL_OW 109
// continue ;
9671: GO 8947
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
9673: LD_VAR 0 9
9677: PPUSH
9678: CALL_OW 314
9682: NOT
9683: PUSH
9684: LD_INT 81
9686: PUSH
9687: LD_VAR 0 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 92
9698: PUSH
9699: LD_VAR 0 17
9703: PUSH
9704: LD_INT 1
9706: ARRAY
9707: PUSH
9708: LD_VAR 0 17
9712: PUSH
9713: LD_INT 2
9715: ARRAY
9716: PUSH
9717: LD_INT 12
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PPUSH
9730: CALL_OW 69
9734: NOT
9735: AND
9736: IFFALSE 9765
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
9738: LD_VAR 0 9
9742: PPUSH
9743: LD_VAR 0 17
9747: PUSH
9748: LD_INT 1
9750: ARRAY
9751: PPUSH
9752: LD_VAR 0 17
9756: PUSH
9757: LD_INT 2
9759: ARRAY
9760: PPUSH
9761: CALL_OW 117
// end ; end ;
9765: GO 8947
9767: POP
9768: POP
// end ; cranes := UnitFilter ( vehicles , [ [ f_weapon , ar_crane ] , [ f_ok ] ] ) ;
9769: LD_ADDR_VAR 0 25
9773: PUSH
9774: LD_VAR 0 26
9778: PPUSH
9779: LD_INT 34
9781: PUSH
9782: LD_INT 88
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 50
9791: PUSH
9792: EMPTY
9793: LIST
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PPUSH
9799: CALL_OW 72
9803: ST_TO_ADDR
// if cranes then
9804: LD_VAR 0 25
9808: IFFALSE 9873
// begin if tmp then
9810: LD_VAR 0 10
9814: IFFALSE 9859
// begin for i in cranes do
9816: LD_ADDR_VAR 0 9
9820: PUSH
9821: LD_VAR 0 25
9825: PUSH
9826: FOR_IN
9827: IFFALSE 9855
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
9829: LD_VAR 0 9
9833: PPUSH
9834: LD_VAR 0 10
9838: PPUSH
9839: LD_VAR 0 9
9843: PPUSH
9844: CALL_OW 74
9848: PPUSH
9849: CALL_OW 130
9853: GO 9826
9855: POP
9856: POP
// end else
9857: GO 9873
// ComBackOnParking ( cranes , parkingPoint ) ;
9859: LD_VAR 0 25
9863: PPUSH
9864: LD_VAR 0 7
9868: PPUSH
9869: CALL 59219 0 2
// end ; vehicles2 := CheckByIndex ( arVehiclesAtttackers , 1 , base , 2 ) ;
9873: LD_ADDR_VAR 0 27
9877: PUSH
9878: LD_EXP 46
9882: PPUSH
9883: LD_INT 1
9885: PPUSH
9886: LD_VAR 0 2
9890: PPUSH
9891: LD_INT 2
9893: PPUSH
9894: CALL 59082 0 4
9898: ST_TO_ADDR
// if vehicles2 then
9899: LD_VAR 0 27
9903: IFFALSE 9970
// for i in UnitFilter ( vehicles2 , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
9905: LD_ADDR_VAR 0 9
9909: PUSH
9910: LD_VAR 0 27
9914: PPUSH
9915: LD_INT 33
9917: PUSH
9918: LD_INT 2
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 50
9927: PUSH
9928: EMPTY
9929: LIST
9930: PUSH
9931: LD_INT 3
9933: PUSH
9934: LD_INT 61
9936: PUSH
9937: EMPTY
9938: LIST
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: PPUSH
9949: CALL_OW 72
9953: PUSH
9954: FOR_IN
9955: IFFALSE 9968
// Connect ( i ) ;
9957: LD_VAR 0 9
9961: PPUSH
9962: CALL 25023 0 1
9966: GO 9954
9968: POP
9969: POP
// if vehicles then
9970: LD_VAR 0 26
9974: IFFALSE 10880
// begin for i in UnitFilter ( vehicles , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
9976: LD_ADDR_VAR 0 9
9980: PUSH
9981: LD_VAR 0 26
9985: PPUSH
9986: LD_INT 33
9988: PUSH
9989: LD_INT 2
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 50
9998: PUSH
9999: EMPTY
10000: LIST
10001: PUSH
10002: LD_INT 3
10004: PUSH
10005: LD_INT 61
10007: PUSH
10008: EMPTY
10009: LIST
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: PPUSH
10020: CALL_OW 72
10024: PUSH
10025: FOR_IN
10026: IFFALSE 10039
// Connect ( i ) ;
10028: LD_VAR 0 9
10032: PPUSH
10033: CALL 25023 0 1
10037: GO 10025
10039: POP
10040: POP
// vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
10041: LD_ADDR_VAR 0 26
10045: PUSH
10046: LD_VAR 0 26
10050: PPUSH
10051: LD_INT 3
10053: PUSH
10054: LD_INT 2
10056: PUSH
10057: LD_INT 34
10059: PUSH
10060: LD_INT 88
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PUSH
10067: LD_INT 34
10069: PUSH
10070: LD_INT 32
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 50
10088: PUSH
10089: EMPTY
10090: LIST
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PPUSH
10096: CALL_OW 72
10100: ST_TO_ADDR
// if vehicles then
10101: LD_VAR 0 26
10105: IFFALSE 10880
// begin for i in vehicles do
10107: LD_ADDR_VAR 0 9
10111: PUSH
10112: LD_VAR 0 26
10116: PUSH
10117: FOR_IN
10118: IFFALSE 10878
// begin tag := GetTag ( i ) ;
10120: LD_ADDR_VAR 0 15
10124: PUSH
10125: LD_VAR 0 9
10129: PPUSH
10130: CALL_OW 110
10134: ST_TO_ADDR
// if not tag then
10135: LD_VAR 0 15
10139: NOT
10140: IFFALSE 10311
// begin if GetControl ( i ) = control_manual then
10142: LD_VAR 0 9
10146: PPUSH
10147: CALL_OW 263
10151: PUSH
10152: LD_INT 1
10154: EQUAL
10155: IFFALSE 10297
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10157: LD_ADDR_VAR 0 24
10161: PUSH
10162: LD_EXP 47
10166: PPUSH
10167: LD_INT 1
10169: PPUSH
10170: LD_VAR 0 9
10174: PPUSH
10175: LD_INT 2
10177: PPUSH
10178: CALL 59082 0 4
10182: ST_TO_ADDR
// if not drivers then
10183: LD_VAR 0 24
10187: NOT
10188: IFFALSE 10277
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
10190: LD_ADDR_VAR 0 24
10194: PUSH
10195: LD_VAR 0 14
10199: PPUSH
10200: LD_INT 3
10202: PUSH
10203: LD_INT 120
10205: PUSH
10206: LD_INT 7
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PPUSH
10217: CALL_OW 72
10221: ST_TO_ADDR
// if drivers then
10222: LD_VAR 0 24
10226: IFFALSE 10277
// begin SetTag ( drivers [ 1 ] , tMech ) ;
10228: LD_VAR 0 24
10232: PUSH
10233: LD_INT 1
10235: ARRAY
10236: PPUSH
10237: LD_INT 7
10239: PPUSH
10240: CALL_OW 109
// arDrivers := Join ( arDrivers , [ i , drivers [ 1 ] ] ) ;
10244: LD_ADDR_EXP 47
10248: PUSH
10249: LD_EXP 47
10253: PPUSH
10254: LD_VAR 0 9
10258: PUSH
10259: LD_VAR 0 24
10263: PUSH
10264: LD_INT 1
10266: ARRAY
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PPUSH
10272: CALL 54406 0 2
10276: ST_TO_ADDR
// end ; end ; if drivers then
10277: LD_VAR 0 24
10281: IFFALSE 10295
// SetTag ( i , tBusy ) ;
10283: LD_VAR 0 9
10287: PPUSH
10288: LD_INT 8
10290: PPUSH
10291: CALL_OW 109
// continue ;
10295: GO 10117
// end ; SetTag ( i , tBusy ) ;
10297: LD_VAR 0 9
10301: PPUSH
10302: LD_INT 8
10304: PPUSH
10305: CALL_OW 109
// end else
10309: GO 10876
// if tag = tBusy then
10311: LD_VAR 0 15
10315: PUSH
10316: LD_INT 8
10318: EQUAL
10319: IFFALSE 10547
// begin if GetLives ( i ) = 1000 then
10321: LD_VAR 0 9
10325: PPUSH
10326: CALL_OW 256
10330: PUSH
10331: LD_INT 1000
10333: EQUAL
10334: IFFALSE 10545
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
10336: LD_VAR 0 9
10340: PPUSH
10341: CALL_OW 263
10345: PUSH
10346: LD_INT 1
10348: EQUAL
10349: PUSH
10350: LD_VAR 0 9
10354: PPUSH
10355: CALL_OW 311
10359: NOT
10360: AND
10361: IFFALSE 10533
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10363: LD_ADDR_VAR 0 24
10367: PUSH
10368: LD_EXP 47
10372: PPUSH
10373: LD_INT 1
10375: PPUSH
10376: LD_VAR 0 9
10380: PPUSH
10381: LD_INT 2
10383: PPUSH
10384: CALL 59082 0 4
10388: ST_TO_ADDR
// if not drivers then
10389: LD_VAR 0 24
10393: NOT
10394: IFFALSE 10410
// begin SetTag ( i , 0 ) ;
10396: LD_VAR 0 9
10400: PPUSH
10401: LD_INT 0
10403: PPUSH
10404: CALL_OW 109
// continue ;
10408: GO 10117
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
10410: LD_VAR 0 24
10414: PUSH
10415: LD_INT 1
10417: ARRAY
10418: PPUSH
10419: CALL_OW 310
10423: PUSH
10424: LD_VAR 0 24
10428: PUSH
10429: LD_INT 1
10431: ARRAY
10432: PPUSH
10433: CALL 52010 0 1
10437: NOT
10438: AND
10439: IFFALSE 10454
// ComExitBuilding ( drivers [ 1 ] ) ;
10441: LD_VAR 0 24
10445: PUSH
10446: LD_INT 1
10448: ARRAY
10449: PPUSH
10450: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
10454: LD_VAR 0 26
10458: PPUSH
10459: LD_INT 120
10461: PUSH
10462: LD_INT 3
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PPUSH
10469: CALL_OW 72
10473: PUSH
10474: LD_VAR 0 24
10478: PUSH
10479: LD_INT 1
10481: ARRAY
10482: PPUSH
10483: CALL_OW 314
10487: NOT
10488: AND
10489: PUSH
10490: LD_VAR 0 26
10494: PPUSH
10495: LD_INT 120
10497: PUSH
10498: LD_INT 3
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PPUSH
10505: CALL_OW 72
10509: NOT
10510: OR
10511: IFFALSE 10531
// ComEnterUnit ( drivers [ 1 ] , i ) ;
10513: LD_VAR 0 24
10517: PUSH
10518: LD_INT 1
10520: ARRAY
10521: PPUSH
10522: LD_VAR 0 9
10526: PPUSH
10527: CALL_OW 120
// continue ;
10531: GO 10117
// end ; SetTag ( i , tAttack ) ;
10533: LD_VAR 0 9
10537: PPUSH
10538: LD_INT 13
10540: PPUSH
10541: CALL_OW 109
// end ; end else
10545: GO 10876
// if tag = tAttack then
10547: LD_VAR 0 15
10551: PUSH
10552: LD_INT 13
10554: EQUAL
10555: IFFALSE 10735
// begin enemy := enemyInBase ;
10557: LD_ADDR_VAR 0 21
10561: PUSH
10562: LD_VAR 0 22
10566: ST_TO_ADDR
// if not enemy then
10567: LD_VAR 0 21
10571: NOT
10572: IFFALSE 10584
// enemy := enemyOuterBase ;
10574: LD_ADDR_VAR 0 21
10578: PUSH
10579: LD_VAR 0 23
10583: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10584: LD_VAR 0 21
10588: NOT
10589: PUSH
10590: LD_VAR 0 9
10594: PPUSH
10595: LD_VAR 0 7
10599: PUSH
10600: LD_INT 1
10602: ARRAY
10603: PPUSH
10604: LD_VAR 0 7
10608: PUSH
10609: LD_INT 2
10611: ARRAY
10612: PPUSH
10613: CALL_OW 297
10617: PUSH
10618: LD_INT 10
10620: GREATER
10621: AND
10622: IFFALSE 10653
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10624: LD_VAR 0 9
10628: PPUSH
10629: LD_VAR 0 7
10633: PUSH
10634: LD_INT 1
10636: ARRAY
10637: PPUSH
10638: LD_VAR 0 7
10642: PUSH
10643: LD_INT 2
10645: ARRAY
10646: PPUSH
10647: CALL_OW 111
// continue ;
10651: GO 10117
// end ; if GetLives ( i ) < 650 then
10653: LD_VAR 0 9
10657: PPUSH
10658: CALL_OW 256
10662: PUSH
10663: LD_INT 650
10665: LESS
10666: IFFALSE 10709
// begin SetTag ( i , tVehRepair ) ;
10668: LD_VAR 0 9
10672: PPUSH
10673: LD_INT 9
10675: PPUSH
10676: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10680: LD_VAR 0 9
10684: PPUSH
10685: LD_VAR 0 7
10689: PUSH
10690: LD_INT 1
10692: ARRAY
10693: PPUSH
10694: LD_VAR 0 7
10698: PUSH
10699: LD_INT 2
10701: ARRAY
10702: PPUSH
10703: CALL_OW 111
// continue ;
10707: GO 10117
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10709: LD_VAR 0 9
10713: PPUSH
10714: LD_VAR 0 21
10718: PPUSH
10719: LD_VAR 0 9
10723: PPUSH
10724: CALL_OW 74
10728: PPUSH
10729: CALL_OW 115
// end else
10733: GO 10876
// if tag = tVehRepair then
10735: LD_VAR 0 15
10739: PUSH
10740: LD_INT 9
10742: EQUAL
10743: IFFALSE 10876
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10745: LD_VAR 0 9
10749: PPUSH
10750: LD_VAR 0 7
10754: PUSH
10755: LD_INT 1
10757: ARRAY
10758: PPUSH
10759: LD_VAR 0 7
10763: PUSH
10764: LD_INT 2
10766: ARRAY
10767: PPUSH
10768: CALL_OW 297
10772: PUSH
10773: LD_INT 10
10775: GREATER
10776: IFFALSE 10807
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10778: LD_VAR 0 9
10782: PPUSH
10783: LD_VAR 0 7
10787: PUSH
10788: LD_INT 1
10790: ARRAY
10791: PPUSH
10792: LD_VAR 0 7
10796: PUSH
10797: LD_INT 2
10799: ARRAY
10800: PPUSH
10801: CALL_OW 111
// continue ;
10805: GO 10117
// end ; if GetLives ( i ) = 1000 then
10807: LD_VAR 0 9
10811: PPUSH
10812: CALL_OW 256
10816: PUSH
10817: LD_INT 1000
10819: EQUAL
10820: IFFALSE 10836
// begin SetTag ( i , tBusy ) ;
10822: LD_VAR 0 9
10826: PPUSH
10827: LD_INT 8
10829: PPUSH
10830: CALL_OW 109
// continue ;
10834: GO 10117
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
10836: LD_VAR 0 9
10840: PPUSH
10841: CALL_OW 263
10845: PUSH
10846: LD_INT 1
10848: EQUAL
10849: PUSH
10850: LD_VAR 0 9
10854: PPUSH
10855: CALL_OW 311
10859: AND
10860: IFFALSE 10876
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10862: LD_VAR 0 9
10866: PPUSH
10867: CALL_OW 311
10871: PPUSH
10872: CALL 56106 0 1
// end ; end ;
10876: GO 10117
10878: POP
10879: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
10880: LD_ADDR_VAR 0 19
10884: PUSH
10885: LD_VAR 0 5
10889: PPUSH
10890: LD_INT 2
10892: PUSH
10893: LD_INT 25
10895: PUSH
10896: LD_INT 1
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: LD_INT 25
10905: PUSH
10906: LD_INT 8
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 25
10915: PUSH
10916: LD_INT 5
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 25
10925: PUSH
10926: LD_INT 9
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 50
10942: PUSH
10943: EMPTY
10944: LIST
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PPUSH
10950: CALL_OW 72
10954: ST_TO_ADDR
// if sol then
10955: LD_VAR 0 19
10959: IFFALSE 11507
// begin if enemyInBase then
10961: LD_VAR 0 22
10965: IFFALSE 11144
// begin for i in sol do
10967: LD_ADDR_VAR 0 9
10971: PUSH
10972: LD_VAR 0 19
10976: PUSH
10977: FOR_IN
10978: IFFALSE 11140
// begin tw := IsInUnit ( i ) ;
10980: LD_ADDR_VAR 0 16
10984: PUSH
10985: LD_VAR 0 9
10989: PPUSH
10990: CALL_OW 310
10994: ST_TO_ADDR
// if tw then
10995: LD_VAR 0 16
10999: IFFALSE 11082
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
11001: LD_VAR 0 16
11005: PUSH
11006: LD_INT 22
11008: PUSH
11009: LD_VAR 0 1
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 101
11020: PUSH
11021: LD_VAR 0 34
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 2
11032: PUSH
11033: LD_INT 30
11035: PUSH
11036: LD_INT 32
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 30
11045: PUSH
11046: LD_INT 31
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: PPUSH
11063: CALL_OW 69
11067: IN
11068: NOT
11069: IFFALSE 11080
// ComExitBuilding ( i ) ;
11071: LD_VAR 0 9
11075: PPUSH
11076: CALL_OW 122
// end else
11080: GO 11138
// if IsInArea ( i , area ) then
11082: LD_VAR 0 9
11086: PPUSH
11087: LD_VAR 0 3
11091: PPUSH
11092: CALL_OW 308
11096: IFFALSE 11124
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
11098: LD_VAR 0 9
11102: PPUSH
11103: LD_VAR 0 22
11107: PPUSH
11108: LD_VAR 0 9
11112: PPUSH
11113: CALL_OW 74
11117: PPUSH
11118: CALL_OW 115
11122: GO 11138
// ComMoveToArea ( i , area ) ;
11124: LD_VAR 0 9
11128: PPUSH
11129: LD_VAR 0 3
11133: PPUSH
11134: CALL_OW 113
// end ;
11138: GO 10977
11140: POP
11141: POP
// end else
11142: GO 11507
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
11144: LD_ADDR_VAR 0 28
11148: PUSH
11149: LD_VAR 0 3
11153: PPUSH
11154: LD_INT 3
11156: PUSH
11157: LD_INT 62
11159: PUSH
11160: EMPTY
11161: LIST
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: LD_INT 2
11169: PUSH
11170: LD_INT 30
11172: PUSH
11173: LD_INT 32
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 30
11182: PUSH
11183: LD_INT 4
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 30
11192: PUSH
11193: LD_INT 5
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PUSH
11200: LD_INT 30
11202: PUSH
11203: LD_INT 31
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PPUSH
11221: CALL_OW 70
11225: ST_TO_ADDR
// if empty then
11226: LD_VAR 0 28
11230: IFFALSE 11247
// empty := ReverseArray ( empty ) ;
11232: LD_ADDR_VAR 0 28
11236: PUSH
11237: LD_VAR 0 28
11241: PPUSH
11242: CALL 49693 0 1
11246: ST_TO_ADDR
// for i in sol do
11247: LD_ADDR_VAR 0 9
11251: PUSH
11252: LD_VAR 0 19
11256: PUSH
11257: FOR_IN
11258: IFFALSE 11505
// begin tag := GetTag ( i ) ;
11260: LD_ADDR_VAR 0 15
11264: PUSH
11265: LD_VAR 0 9
11269: PPUSH
11270: CALL_OW 110
11274: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
11275: LD_VAR 0 9
11279: PPUSH
11280: CALL_OW 256
11284: PUSH
11285: LD_INT 1000
11287: LESS
11288: PUSH
11289: LD_VAR 0 15
11293: PUSH
11294: LD_INT 1
11296: NONEQUAL
11297: AND
11298: IFFALSE 11350
// begin SetTag ( i , tHeal ) ;
11300: LD_VAR 0 9
11304: PPUSH
11305: LD_INT 1
11307: PPUSH
11308: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
11312: LD_VAR 0 9
11316: PPUSH
11317: LD_VAR 0 6
11321: PUSH
11322: LD_INT 1
11324: ARRAY
11325: PPUSH
11326: LD_VAR 0 6
11330: PUSH
11331: LD_INT 2
11333: ARRAY
11334: PPUSH
11335: CALL_OW 111
// AddComHold ( i ) ;
11339: LD_VAR 0 9
11343: PPUSH
11344: CALL_OW 200
// continue ;
11348: GO 11257
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
11350: LD_VAR 0 9
11354: PPUSH
11355: CALL_OW 256
11359: PUSH
11360: LD_INT 1000
11362: EQUAL
11363: PUSH
11364: LD_VAR 0 15
11368: PUSH
11369: LD_INT 1
11371: EQUAL
11372: AND
11373: IFFALSE 11389
// begin SetTag ( i , 0 ) ;
11375: LD_VAR 0 9
11379: PPUSH
11380: LD_INT 0
11382: PPUSH
11383: CALL_OW 109
// continue ;
11387: GO 11257
// end ; if HasTask ( i ) then
11389: LD_VAR 0 9
11393: PPUSH
11394: CALL_OW 314
11398: IFFALSE 11402
// continue ;
11400: GO 11257
// if not IsInUnit ( i ) and not tag and empty then
11402: LD_VAR 0 9
11406: PPUSH
11407: CALL_OW 310
11411: NOT
11412: PUSH
11413: LD_VAR 0 15
11417: NOT
11418: AND
11419: PUSH
11420: LD_VAR 0 28
11424: AND
11425: IFFALSE 11503
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
11427: LD_VAR 0 9
11431: PPUSH
11432: LD_VAR 0 28
11436: PUSH
11437: LD_INT 1
11439: ARRAY
11440: PPUSH
11441: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
11445: LD_VAR 0 28
11449: PUSH
11450: LD_INT 1
11452: ARRAY
11453: PPUSH
11454: CALL_OW 266
11458: PUSH
11459: LD_INT 5
11461: EQUAL
11462: PUSH
11463: LD_INT 50
11465: PPUSH
11466: CALL_OW 13
11470: AND
11471: IFFALSE 11485
// AddComChangeProfession ( i , class_mortar ) ;
11473: LD_VAR 0 9
11477: PPUSH
11478: LD_INT 8
11480: PPUSH
11481: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
11485: LD_ADDR_VAR 0 28
11489: PUSH
11490: LD_VAR 0 28
11494: PPUSH
11495: LD_INT 1
11497: PPUSH
11498: CALL_OW 3
11502: ST_TO_ADDR
// end ; end ;
11503: GO 11257
11505: POP
11506: POP
// end ; end ; end ;
11507: LD_VAR 0 8
11511: RET
// every 0 0$2 trigger UnitFilter ( ar_force_south , [ f_ok ] ) do
11512: LD_EXP 33
11516: PPUSH
11517: LD_INT 50
11519: PUSH
11520: EMPTY
11521: LIST
11522: PPUSH
11523: CALL_OW 72
11527: IFFALSE 11576
11529: GO 11531
11531: DISABLE
// begin enable ;
11532: ENABLE
// ArabianBaseScript ( side_bot , 1 , area_base_south , area_base_south_outer , ar_force_south , [ 120 , 129 ] , [ 126 , 136 ] ) ;
11533: LD_EXP 3
11537: PPUSH
11538: LD_INT 1
11540: PPUSH
11541: LD_INT 33
11543: PPUSH
11544: LD_INT 40
11546: PPUSH
11547: LD_EXP 33
11551: PPUSH
11552: LD_INT 120
11554: PUSH
11555: LD_INT 129
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PPUSH
11562: LD_INT 126
11564: PUSH
11565: LD_INT 136
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PPUSH
11572: CALL 7555 0 7
// end ;
11576: END
// every 0 0$2 trigger UnitFilter ( ar_force_north , [ f_ok ] ) do
11577: LD_EXP 34
11581: PPUSH
11582: LD_INT 50
11584: PUSH
11585: EMPTY
11586: LIST
11587: PPUSH
11588: CALL_OW 72
11592: IFFALSE 11641
11594: GO 11596
11596: DISABLE
// begin enable ;
11597: ENABLE
// ArabianBaseScript ( side_bot , 2 , area_base_north , area_base_north_outer , ar_force_north , [ 116 , 9 ] , [ 123 , 12 ] ) ;
11598: LD_EXP 3
11602: PPUSH
11603: LD_INT 2
11605: PPUSH
11606: LD_INT 35
11608: PPUSH
11609: LD_INT 43
11611: PPUSH
11612: LD_EXP 34
11616: PPUSH
11617: LD_INT 116
11619: PUSH
11620: LD_INT 9
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PPUSH
11627: LD_INT 123
11629: PUSH
11630: LD_INT 12
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PPUSH
11637: CALL 7555 0 7
// end ;
11641: END
// every 0 0$2 trigger UnitFilter ( ar_force_west , [ f_ok ] ) do
11642: LD_EXP 32
11646: PPUSH
11647: LD_INT 50
11649: PUSH
11650: EMPTY
11651: LIST
11652: PPUSH
11653: CALL_OW 72
11657: IFFALSE 11706
11659: GO 11661
11661: DISABLE
// begin enable ;
11662: ENABLE
// ArabianBaseScript ( side_bot , 3 , area_base_west , area_base_west_outer , ar_force_west , [ 28 , 10 ] , [ 26 , 17 ] ) ;
11663: LD_EXP 3
11667: PPUSH
11668: LD_INT 3
11670: PPUSH
11671: LD_INT 34
11673: PPUSH
11674: LD_INT 42
11676: PPUSH
11677: LD_EXP 32
11681: PPUSH
11682: LD_INT 28
11684: PUSH
11685: LD_INT 10
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PPUSH
11692: LD_INT 26
11694: PUSH
11695: LD_INT 17
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PPUSH
11702: CALL 7555 0 7
// end ;
11706: END
// every 0 0$2 trigger UnitFilter ( ar_force_east , [ f_ok ] ) do
11707: LD_EXP 36
11711: PPUSH
11712: LD_INT 50
11714: PUSH
11715: EMPTY
11716: LIST
11717: PPUSH
11718: CALL_OW 72
11722: IFFALSE 11771
11724: GO 11726
11726: DISABLE
// begin enable ;
11727: ENABLE
// ArabianBaseScript ( side_bot , 4 , area_base_east , area_base_east_outer , ar_force_east , [ 173 , 72 ] , [ 167 , 83 ] ) ;
11728: LD_EXP 3
11732: PPUSH
11733: LD_INT 4
11735: PPUSH
11736: LD_INT 36
11738: PPUSH
11739: LD_INT 44
11741: PPUSH
11742: LD_EXP 36
11746: PPUSH
11747: LD_INT 173
11749: PUSH
11750: LD_INT 72
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PPUSH
11757: LD_INT 167
11759: PUSH
11760: LD_INT 83
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PPUSH
11767: CALL 7555 0 7
// end ;
11771: END
// every 0 0$2 trigger UnitFilter ( ar_force_north2 , [ f_ok ] ) do
11772: LD_EXP 35
11776: PPUSH
11777: LD_INT 50
11779: PUSH
11780: EMPTY
11781: LIST
11782: PPUSH
11783: CALL_OW 72
11787: IFFALSE 11836
11789: GO 11791
11791: DISABLE
// begin enable ;
11792: ENABLE
// ArabianBaseScript ( side_bot , 5 , area_base_north2 , area_base_north2_outer , ar_force_north2 , [ 147 , 50 ] , [ 159 , 40 ] ) ;
11793: LD_EXP 3
11797: PPUSH
11798: LD_INT 5
11800: PPUSH
11801: LD_INT 38
11803: PPUSH
11804: LD_INT 45
11806: PPUSH
11807: LD_EXP 35
11811: PPUSH
11812: LD_INT 147
11814: PUSH
11815: LD_INT 50
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PPUSH
11822: LD_INT 159
11824: PUSH
11825: LD_INT 40
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PPUSH
11832: CALL 7555 0 7
// end ;
11836: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
11837: LD_EXP 51
11841: IFFALSE 12053
11843: GO 11845
11845: DISABLE
11846: LD_INT 0
11848: PPUSH
11849: PPUSH
11850: PPUSH
// begin enable ;
11851: ENABLE
// p := 1 ;
11852: LD_ADDR_VAR 0 2
11856: PUSH
11857: LD_INT 1
11859: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
11860: LD_ADDR_VAR 0 1
11864: PUSH
11865: DOUBLE
11866: LD_INT 1
11868: DEC
11869: ST_TO_ADDR
11870: LD_EXP 51
11874: PPUSH
11875: CALL 18817 0 1
11879: PUSH
11880: LD_INT 2
11882: DIV
11883: PUSH
11884: FOR_TO
11885: IFFALSE 12051
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
11887: LD_ADDR_VAR 0 3
11891: PUSH
11892: LD_EXP 51
11896: PUSH
11897: LD_VAR 0 2
11901: ARRAY
11902: PPUSH
11903: LD_EXP 51
11907: PUSH
11908: LD_VAR 0 2
11912: PUSH
11913: LD_INT 1
11915: PLUS
11916: ARRAY
11917: PPUSH
11918: CALL_OW 428
11922: ST_TO_ADDR
// if tmp then
11923: LD_VAR 0 3
11927: IFFALSE 12035
// if GetSide ( tmp ) <> side_bot then
11929: LD_VAR 0 3
11933: PPUSH
11934: CALL_OW 255
11938: PUSH
11939: LD_EXP 3
11943: NONEQUAL
11944: IFFALSE 12035
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , side_bot ) ;
11946: LD_EXP 51
11950: PUSH
11951: LD_VAR 0 2
11955: ARRAY
11956: PPUSH
11957: LD_EXP 51
11961: PUSH
11962: LD_VAR 0 2
11966: PUSH
11967: LD_INT 1
11969: PLUS
11970: ARRAY
11971: PPUSH
11972: LD_EXP 3
11976: PPUSH
11977: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
11981: LD_ADDR_EXP 51
11985: PUSH
11986: LD_EXP 51
11990: PPUSH
11991: LD_VAR 0 2
11995: PPUSH
11996: CALL_OW 3
12000: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
12001: LD_ADDR_EXP 51
12005: PUSH
12006: LD_EXP 51
12010: PPUSH
12011: LD_VAR 0 2
12015: PPUSH
12016: CALL_OW 3
12020: ST_TO_ADDR
// p := p - 2 ;
12021: LD_ADDR_VAR 0 2
12025: PUSH
12026: LD_VAR 0 2
12030: PUSH
12031: LD_INT 2
12033: MINUS
12034: ST_TO_ADDR
// end ; p := p + 2 ;
12035: LD_ADDR_VAR 0 2
12039: PUSH
12040: LD_VAR 0 2
12044: PUSH
12045: LD_INT 2
12047: PLUS
12048: ST_TO_ADDR
// end ;
12049: GO 11884
12051: POP
12052: POP
// end ; end_of_file
12053: PPOPN 3
12055: END
// on ArtifactLoaded ( cargo , artifact ) do var i , j ;
12056: LD_INT 0
12058: PPUSH
12059: PPUSH
// begin if artifact_get then
12060: LD_EXP 4
12064: IFFALSE 12068
// exit ;
12066: GO 12090
// MultiplayerEvent_ArtifactCaptured ( GetSide ( cargo ) ) ;
12068: LD_VAR 0 1
12072: PPUSH
12073: CALL_OW 255
12077: PPUSH
12078: CALL 5186 0 1
// artifact_get := true ;
12082: LD_ADDR_EXP 4
12086: PUSH
12087: LD_INT 1
12089: ST_TO_ADDR
// end ;
12090: PPOPN 4
12092: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetSide ( un ) <> side_bot then
12093: LD_VAR 0 1
12097: PPUSH
12098: CALL_OW 255
12102: PUSH
12103: LD_EXP 3
12107: NONEQUAL
12108: IFFALSE 12112
// exit ;
12110: GO 12181
// if not un in [ Saliba , Gensher , Shariff ] then
12112: LD_VAR 0 1
12116: PUSH
12117: LD_EXP 39
12121: PUSH
12122: LD_EXP 40
12126: PUSH
12127: LD_EXP 41
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: IN
12137: NOT
12138: IFFALSE 12159
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
12140: LD_VAR 0 1
12144: PPUSH
12145: LD_VAR 0 2
12149: PPUSH
12150: LD_INT 0
12152: PPUSH
12153: CALL 5122 0 3
12157: GO 12181
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
12159: LD_VAR 0 1
12163: PPUSH
12164: LD_VAR 0 2
12168: PPUSH
12169: LD_INT 5
12171: PPUSH
12172: CALL 4449 0 1
12176: PPUSH
12177: CALL 5122 0 3
// end ;
12181: PPOPN 3
12183: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
12184: LD_INT 0
12186: PPUSH
12187: PPUSH
12188: PPUSH
12189: PPUSH
12190: PPUSH
12191: PPUSH
12192: PPUSH
12193: PPUSH
12194: PPUSH
12195: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
12196: LD_VAR 0 1
12200: PPUSH
12201: CALL 59486 0 1
// side := GetSide ( un ) ;
12205: LD_ADDR_VAR 0 3
12209: PUSH
12210: LD_VAR 0 1
12214: PPUSH
12215: CALL_OW 255
12219: ST_TO_ADDR
// if multi_sides [ side ] then
12220: LD_EXP 7
12224: PUSH
12225: LD_VAR 0 3
12229: ARRAY
12230: IFFALSE 12256
// if GetType ( un ) = unit_human then
12232: LD_VAR 0 1
12236: PPUSH
12237: CALL_OW 247
12241: PUSH
12242: LD_INT 1
12244: EQUAL
12245: IFFALSE 12256
// MultiplayerEvent_HumanLost ( side ) ;
12247: LD_VAR 0 3
12251: PPUSH
12252: CALL 5008 0 1
// if side = side_bot then
12256: LD_VAR 0 3
12260: PUSH
12261: LD_EXP 3
12265: EQUAL
12266: IFFALSE 12712
// begin if GetType ( un ) = unit_building then
12268: LD_VAR 0 1
12272: PPUSH
12273: CALL_OW 247
12277: PUSH
12278: LD_INT 3
12280: EQUAL
12281: IFFALSE 12511
// begin base := 0 ;
12283: LD_ADDR_VAR 0 4
12287: PUSH
12288: LD_INT 0
12290: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
12291: LD_ADDR_VAR 0 2
12295: PUSH
12296: DOUBLE
12297: LD_INT 1
12299: DEC
12300: ST_TO_ADDR
12301: LD_EXP 49
12305: PPUSH
12306: CALL 18817 0 1
12310: PUSH
12311: FOR_TO
12312: IFFALSE 12350
// if IsInArea ( un , arAreas [ i ] ) then
12314: LD_VAR 0 1
12318: PPUSH
12319: LD_EXP 49
12323: PUSH
12324: LD_VAR 0 2
12328: ARRAY
12329: PPUSH
12330: CALL_OW 308
12334: IFFALSE 12348
// begin base := i ;
12336: LD_ADDR_VAR 0 4
12340: PUSH
12341: LD_VAR 0 2
12345: ST_TO_ADDR
// break ;
12346: GO 12350
// end ;
12348: GO 12311
12350: POP
12351: POP
// if not base then
12352: LD_VAR 0 4
12356: NOT
12357: IFFALSE 12361
// exit ;
12359: GO 12784
// btype := GetBType ( un ) ;
12361: LD_ADDR_VAR 0 11
12365: PUSH
12366: LD_VAR 0 1
12370: PPUSH
12371: CALL_OW 266
12375: ST_TO_ADDR
// if btype = b_barracks then
12376: LD_VAR 0 11
12380: PUSH
12381: LD_INT 5
12383: EQUAL
12384: IFFALSE 12394
// btype := b_armoury ;
12386: LD_ADDR_VAR 0 11
12390: PUSH
12391: LD_INT 4
12393: ST_TO_ADDR
// if btype = b_factory then
12394: LD_VAR 0 11
12398: PUSH
12399: LD_INT 3
12401: EQUAL
12402: IFFALSE 12412
// btype := b_workshop ;
12404: LD_ADDR_VAR 0 11
12408: PUSH
12409: LD_INT 2
12411: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
12412: LD_VAR 0 11
12416: PUSH
12417: LD_INT 8
12419: PUSH
12420: LD_INT 7
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: IN
12427: IFFALSE 12437
// btype := b_lab ;
12429: LD_ADDR_VAR 0 11
12433: PUSH
12434: LD_INT 6
12436: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ base , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ] ) ;
12437: LD_ADDR_EXP 44
12441: PUSH
12442: LD_EXP 44
12446: PPUSH
12447: LD_EXP 44
12451: PUSH
12452: LD_INT 1
12454: PLUS
12455: PPUSH
12456: LD_VAR 0 4
12460: PUSH
12461: LD_VAR 0 11
12465: PUSH
12466: LD_VAR 0 1
12470: PPUSH
12471: CALL_OW 250
12475: PUSH
12476: LD_VAR 0 1
12480: PPUSH
12481: CALL_OW 251
12485: PUSH
12486: LD_VAR 0 1
12490: PPUSH
12491: CALL_OW 254
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PPUSH
12506: CALL_OW 1
12510: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12511: LD_VAR 0 1
12515: PPUSH
12516: CALL_OW 247
12520: PUSH
12521: LD_INT 2
12523: EQUAL
12524: IFFALSE 12712
// begin base := CheckByIndex ( arVehicles , 2 , un , 1 ) ;
12526: LD_ADDR_VAR 0 4
12530: PUSH
12531: LD_EXP 45
12535: PPUSH
12536: LD_INT 2
12538: PPUSH
12539: LD_VAR 0 1
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: CALL 59082 0 4
12551: ST_TO_ADDR
// if not base then
12552: LD_VAR 0 4
12556: NOT
12557: IFFALSE 12561
// exit ;
12559: GO 12784
// factory := arFactories [ base ] ;
12561: LD_ADDR_VAR 0 10
12565: PUSH
12566: LD_EXP 48
12570: PUSH
12571: LD_VAR 0 4
12575: ARRAY
12576: ST_TO_ADDR
// if not factory then
12577: LD_VAR 0 10
12581: NOT
12582: IFFALSE 12586
// exit ;
12584: GO 12784
// chassis := GetChassis ( un ) ;
12586: LD_ADDR_VAR 0 5
12590: PUSH
12591: LD_VAR 0 1
12595: PPUSH
12596: CALL_OW 265
12600: ST_TO_ADDR
// engine := GetEngine ( un ) ;
12601: LD_ADDR_VAR 0 6
12605: PUSH
12606: LD_VAR 0 1
12610: PPUSH
12611: CALL_OW 262
12615: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
12616: LD_ADDR_VAR 0 8
12620: PUSH
12621: LD_VAR 0 1
12625: PPUSH
12626: CALL_OW 264
12630: ST_TO_ADDR
// control := control_remote ;
12631: LD_ADDR_VAR 0 7
12635: PUSH
12636: LD_INT 2
12638: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
12639: LD_ADDR_VAR 0 9
12643: PUSH
12644: LD_VAR 0 10
12648: PPUSH
12649: LD_VAR 0 5
12653: PPUSH
12654: LD_VAR 0 6
12658: PPUSH
12659: LD_VAR 0 7
12663: PPUSH
12664: LD_VAR 0 8
12668: PPUSH
12669: CALL 19175 0 5
12673: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ base , tmp ] ) ;
12674: LD_ADDR_EXP 43
12678: PUSH
12679: LD_EXP 43
12683: PPUSH
12684: LD_EXP 43
12688: PUSH
12689: LD_INT 1
12691: PLUS
12692: PPUSH
12693: LD_VAR 0 4
12697: PUSH
12698: LD_VAR 0 9
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PPUSH
12707: CALL_OW 1
12711: ST_TO_ADDR
// end ; end ; if multi_commanders and multi_custom_commanders then
12712: LD_EXP 24
12716: PUSH
12717: LD_EXP 16
12721: AND
12722: IFFALSE 12784
// if un in multi_commanders then
12724: LD_VAR 0 1
12728: PUSH
12729: LD_EXP 24
12733: IN
12734: IFFALSE 12784
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
12736: LD_ADDR_EXP 25
12740: PUSH
12741: LD_EXP 25
12745: PPUSH
12746: LD_VAR 0 3
12750: PPUSH
12751: LD_INT 1
12753: PPUSH
12754: CALL_OW 1
12758: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
12759: LD_ADDR_EXP 24
12763: PUSH
12764: LD_EXP 24
12768: PUSH
12769: LD_VAR 0 1
12773: DIFF
12774: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
12775: LD_VAR 0 3
12779: PPUSH
12780: CALL 4482 0 1
// end ; end ;
12784: PPOPN 11
12786: END
// on BuildingComplete ( building ) do var i , j , side , base , btype ;
12787: LD_INT 0
12789: PPUSH
12790: PPUSH
12791: PPUSH
12792: PPUSH
12793: PPUSH
// begin side := GetSide ( building ) ;
12794: LD_ADDR_VAR 0 4
12798: PUSH
12799: LD_VAR 0 1
12803: PPUSH
12804: CALL_OW 255
12808: ST_TO_ADDR
// if multi_sides [ side ] then
12809: LD_EXP 7
12813: PUSH
12814: LD_VAR 0 4
12818: ARRAY
12819: IFFALSE 12840
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
12821: LD_VAR 0 4
12825: PPUSH
12826: LD_VAR 0 1
12830: PPUSH
12831: CALL_OW 266
12835: PPUSH
12836: CALL 5052 0 2
// if GetBType ( building ) = b_depot and not multi_sides [ side ] and base_names then
12840: LD_VAR 0 1
12844: PPUSH
12845: CALL_OW 266
12849: PUSH
12850: LD_INT 0
12852: EQUAL
12853: PUSH
12854: LD_EXP 7
12858: PUSH
12859: LD_VAR 0 4
12863: ARRAY
12864: NOT
12865: AND
12866: PUSH
12867: LD_EXP 5
12871: AND
12872: IFFALSE 12910
// begin SetBName ( building , base_names [ 1 ] ) ;
12874: LD_VAR 0 1
12878: PPUSH
12879: LD_EXP 5
12883: PUSH
12884: LD_INT 1
12886: ARRAY
12887: PPUSH
12888: CALL_OW 500
// base_names := Delete ( base_names , 1 ) ;
12892: LD_ADDR_EXP 5
12896: PUSH
12897: LD_EXP 5
12901: PPUSH
12902: LD_INT 1
12904: PPUSH
12905: CALL_OW 3
12909: ST_TO_ADDR
// end ; if side = side_bot then
12910: LD_VAR 0 4
12914: PUSH
12915: LD_EXP 3
12919: EQUAL
12920: IFFALSE 13171
// begin base := 0 ;
12922: LD_ADDR_VAR 0 5
12926: PUSH
12927: LD_INT 0
12929: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
12930: LD_ADDR_VAR 0 2
12934: PUSH
12935: DOUBLE
12936: LD_INT 1
12938: DEC
12939: ST_TO_ADDR
12940: LD_EXP 49
12944: PPUSH
12945: CALL 18817 0 1
12949: PUSH
12950: FOR_TO
12951: IFFALSE 12989
// if IsInArea ( building , arAreas [ i ] ) then
12953: LD_VAR 0 1
12957: PPUSH
12958: LD_EXP 49
12962: PUSH
12963: LD_VAR 0 2
12967: ARRAY
12968: PPUSH
12969: CALL_OW 308
12973: IFFALSE 12987
// begin base := i ;
12975: LD_ADDR_VAR 0 5
12979: PUSH
12980: LD_VAR 0 2
12984: ST_TO_ADDR
// break ;
12985: GO 12989
// end ;
12987: GO 12950
12989: POP
12990: POP
// if not base then
12991: LD_VAR 0 5
12995: NOT
12996: IFFALSE 13000
// exit ;
12998: GO 13171
// for i := 1 to Count ( arBuildings ) do
13000: LD_ADDR_VAR 0 2
13004: PUSH
13005: DOUBLE
13006: LD_INT 1
13008: DEC
13009: ST_TO_ADDR
13010: LD_EXP 44
13014: PPUSH
13015: CALL 18817 0 1
13019: PUSH
13020: FOR_TO
13021: IFFALSE 13073
// if arBuildings [ i ] [ 1 ] [ 1 ] = base then
13023: LD_EXP 44
13027: PUSH
13028: LD_VAR 0 2
13032: ARRAY
13033: PUSH
13034: LD_INT 1
13036: ARRAY
13037: PUSH
13038: LD_INT 1
13040: ARRAY
13041: PUSH
13042: LD_VAR 0 5
13046: EQUAL
13047: IFFALSE 13071
// begin arBuildings := Delete ( arBuildings , i ) ;
13049: LD_ADDR_EXP 44
13053: PUSH
13054: LD_EXP 44
13058: PPUSH
13059: LD_VAR 0 2
13063: PPUSH
13064: CALL_OW 3
13068: ST_TO_ADDR
// break ;
13069: GO 13073
// end ;
13071: GO 13020
13073: POP
13074: POP
// btype := GetBType ( building ) ;
13075: LD_ADDR_VAR 0 6
13079: PUSH
13080: LD_VAR 0 1
13084: PPUSH
13085: CALL_OW 266
13089: ST_TO_ADDR
// case btype of b_armoury :
13090: LD_VAR 0 6
13094: PUSH
13095: LD_INT 4
13097: DOUBLE
13098: EQUAL
13099: IFTRUE 13103
13101: GO 13115
13103: POP
// ComUpgrade ( building ) ; b_workshop :
13104: LD_VAR 0 1
13108: PPUSH
13109: CALL_OW 146
13113: GO 13171
13115: LD_INT 2
13117: DOUBLE
13118: EQUAL
13119: IFTRUE 13123
13121: GO 13135
13123: POP
// ComUpgrade ( building ) ; b_lab :
13124: LD_VAR 0 1
13128: PPUSH
13129: CALL_OW 146
13133: GO 13171
13135: LD_INT 6
13137: DOUBLE
13138: EQUAL
13139: IFTRUE 13143
13141: GO 13170
13143: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
13144: LD_VAR 0 1
13148: PPUSH
13149: LD_INT 10
13151: PPUSH
13152: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
13156: LD_VAR 0 1
13160: PPUSH
13161: LD_INT 15
13163: PPUSH
13164: CALL_OW 207
// end ; end ;
13168: GO 13171
13170: POP
// end ; end ;
13171: PPOPN 6
13173: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount ;
13174: LD_INT 0
13176: PPUSH
13177: PPUSH
13178: PPUSH
13179: PPUSH
13180: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
13181: LD_VAR 0 1
13185: PPUSH
13186: LD_VAR 0 2
13190: PPUSH
13191: CALL 59606 0 2
// side := GetSide ( vehicle ) ;
13195: LD_ADDR_VAR 0 4
13199: PUSH
13200: LD_VAR 0 1
13204: PPUSH
13205: CALL_OW 255
13209: ST_TO_ADDR
// if multi_sides [ side ] then
13210: LD_EXP 7
13214: PUSH
13215: LD_VAR 0 4
13219: ARRAY
13220: IFFALSE 13231
// MultiplayerEvent_Produced ( side ) ;
13222: LD_VAR 0 4
13226: PPUSH
13227: CALL 4964 0 1
// if side_bot = side then
13231: LD_EXP 3
13235: PUSH
13236: LD_VAR 0 4
13240: EQUAL
13241: IFFALSE 13433
// begin base := 0 ;
13243: LD_ADDR_VAR 0 6
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// for i := 1 to Count ( arFactories ) do
13251: LD_ADDR_VAR 0 3
13255: PUSH
13256: DOUBLE
13257: LD_INT 1
13259: DEC
13260: ST_TO_ADDR
13261: LD_EXP 48
13265: PPUSH
13266: CALL 18817 0 1
13270: PUSH
13271: FOR_TO
13272: IFFALSE 13306
// if arFactories [ i ] = factory then
13274: LD_EXP 48
13278: PUSH
13279: LD_VAR 0 3
13283: ARRAY
13284: PUSH
13285: LD_VAR 0 2
13289: EQUAL
13290: IFFALSE 13304
// begin base := i ;
13292: LD_ADDR_VAR 0 6
13296: PUSH
13297: LD_VAR 0 3
13301: ST_TO_ADDR
// break ;
13302: GO 13306
// end ;
13304: GO 13271
13306: POP
13307: POP
// if not base then
13308: LD_VAR 0 6
13312: NOT
13313: IFFALSE 13317
// exit ;
13315: GO 13433
// if arVehiclesCounter [ base ] > CheckByIndex ( arVehicles , 1 , base , 2 ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
13317: LD_EXP 50
13321: PUSH
13322: LD_VAR 0 6
13326: ARRAY
13327: PUSH
13328: LD_EXP 45
13332: PPUSH
13333: LD_INT 1
13335: PPUSH
13336: LD_VAR 0 6
13340: PPUSH
13341: LD_INT 2
13343: PPUSH
13344: CALL 59082 0 4
13348: GREATER
13349: PUSH
13350: LD_VAR 0 1
13354: PPUSH
13355: CALL_OW 266
13359: PUSH
13360: LD_INT 32
13362: PUSH
13363: LD_INT 88
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: IN
13370: OR
13371: IFFALSE 13404
// arVehicles := Join ( arVehicles , [ base , vehicle ] ) else
13373: LD_ADDR_EXP 45
13377: PUSH
13378: LD_EXP 45
13382: PPUSH
13383: LD_VAR 0 6
13387: PUSH
13388: LD_VAR 0 1
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PPUSH
13397: CALL 54406 0 2
13401: ST_TO_ADDR
13402: GO 13433
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , [ base , vehicle ] ) ;
13404: LD_ADDR_EXP 46
13408: PUSH
13409: LD_EXP 46
13413: PPUSH
13414: LD_VAR 0 6
13418: PUSH
13419: LD_VAR 0 1
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PPUSH
13428: CALL 54406 0 2
13432: ST_TO_ADDR
// end ; end ;
13433: PPOPN 7
13435: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
13436: LD_VAR 0 1
13440: PPUSH
13441: CALL_OW 110
13445: PUSH
13446: LD_INT 7
13448: EQUAL
13449: IFFALSE 13463
// SetTag ( driver , 0 ) ;
13451: LD_VAR 0 1
13455: PPUSH
13456: LD_INT 0
13458: PPUSH
13459: CALL_OW 109
// end ;
13463: PPOPN 4
13465: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = side_bot then
13466: LD_VAR 0 2
13470: PPUSH
13471: CALL_OW 255
13475: PUSH
13476: LD_EXP 3
13480: EQUAL
13481: IFFALSE 13511
// if tech in arTech then
13483: LD_VAR 0 1
13487: PUSH
13488: LD_EXP 42
13492: IN
13493: IFFALSE 13511
// arTech := arTech diff tech ;
13495: LD_ADDR_EXP 42
13499: PUSH
13500: LD_EXP 42
13504: PUSH
13505: LD_VAR 0 1
13509: DIFF
13510: ST_TO_ADDR
// end ; end_of_file
13511: PPOPN 2
13513: END
// every 0 0$20 trigger game do
13514: LD_EXP 2
13518: IFFALSE 13563
13520: GO 13522
13522: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
13523: LD_INT 7
13525: PUSH
13526: LD_INT 6
13528: PUSH
13529: LD_INT 4
13531: PUSH
13532: LD_INT 6
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: PPUSH
13541: LD_EXP 21
13545: PUSH
13546: LD_INT 2
13548: ARRAY
13549: PPUSH
13550: LD_EXP 21
13554: PUSH
13555: LD_INT 1
13557: ARRAY
13558: PPUSH
13559: CALL 13564 0 3
13563: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , players_areas ; begin
13564: LD_INT 0
13566: PPUSH
13567: PPUSH
13568: PPUSH
13569: PPUSH
// if not areas then
13570: LD_VAR 0 1
13574: NOT
13575: IFFALSE 13579
// exit ;
13577: GO 13956
// players_areas := [ crates_player_west , crates_player_south , crates_player_east ] ;
13579: LD_ADDR_VAR 0 7
13583: PUSH
13584: LD_INT 31
13586: PUSH
13587: LD_INT 32
13589: PUSH
13590: LD_INT 30
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: LIST
13597: ST_TO_ADDR
// x := 5 ;
13598: LD_ADDR_VAR 0 6
13602: PUSH
13603: LD_INT 5
13605: ST_TO_ADDR
// repeat wait ( time ) ;
13606: LD_VAR 0 2
13610: PPUSH
13611: CALL_OW 67
// if tick < [ 25 25$00 , 23 23$00 , 21 21$00 ] [ Difficulty ] then
13615: LD_OWVAR 1
13619: PUSH
13620: LD_INT 52500
13622: PUSH
13623: LD_INT 48300
13625: PUSH
13626: LD_INT 44100
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: LIST
13633: PUSH
13634: LD_OWVAR 67
13638: ARRAY
13639: LESS
13640: IFFALSE 13779
// begin for i := 1 to multi_sides do
13642: LD_ADDR_VAR 0 5
13646: PUSH
13647: DOUBLE
13648: LD_INT 1
13650: DEC
13651: ST_TO_ADDR
13652: LD_EXP 7
13656: PUSH
13657: FOR_TO
13658: IFFALSE 13770
// if multi_sides [ i ] then
13660: LD_EXP 7
13664: PUSH
13665: LD_VAR 0 5
13669: ARRAY
13670: IFFALSE 13768
// begin if GetResourceArea ( players_areas [ multi_sides [ i ] ] , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
13672: LD_VAR 0 7
13676: PUSH
13677: LD_EXP 7
13681: PUSH
13682: LD_VAR 0 5
13686: ARRAY
13687: ARRAY
13688: PPUSH
13689: LD_INT 1
13691: PPUSH
13692: CALL_OW 287
13696: PUSH
13697: LD_INT 25
13699: PUSH
13700: LD_INT 22
13702: PUSH
13703: LD_INT 20
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: LIST
13710: PUSH
13711: LD_OWVAR 67
13715: ARRAY
13716: LESS
13717: IFFALSE 13768
// begin amount := amount - ( x * 10 ) ;
13719: LD_ADDR_VAR 0 3
13723: PUSH
13724: LD_VAR 0 3
13728: PUSH
13729: LD_VAR 0 6
13733: PUSH
13734: LD_INT 10
13736: MUL
13737: MINUS
13738: ST_TO_ADDR
// CreateCratesArea ( x , players_areas [ multi_sides [ i ] ] , true ) ;
13739: LD_VAR 0 6
13743: PPUSH
13744: LD_VAR 0 7
13748: PUSH
13749: LD_EXP 7
13753: PUSH
13754: LD_VAR 0 5
13758: ARRAY
13759: ARRAY
13760: PPUSH
13761: LD_INT 1
13763: PPUSH
13764: CALL_OW 55
// end ; end ;
13768: GO 13657
13770: POP
13771: POP
// wait ( 0 0$2 ) ;
13772: LD_INT 70
13774: PPUSH
13775: CALL_OW 67
// end ; for i in areas do
13779: LD_ADDR_VAR 0 5
13783: PUSH
13784: LD_VAR 0 1
13788: PUSH
13789: FOR_IN
13790: IFFALSE 13873
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
13792: LD_VAR 0 5
13796: PPUSH
13797: LD_INT 1
13799: PPUSH
13800: CALL_OW 287
13804: PUSH
13805: LD_INT 25
13807: PUSH
13808: LD_INT 22
13810: PUSH
13811: LD_INT 20
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: LIST
13818: PUSH
13819: LD_OWVAR 67
13823: ARRAY
13824: LESS
13825: IFFALSE 13871
// begin wait ( 0 0$5 ) ;
13827: LD_INT 175
13829: PPUSH
13830: CALL_OW 67
// amount := amount - ( x * 10 ) ;
13834: LD_ADDR_VAR 0 3
13838: PUSH
13839: LD_VAR 0 3
13843: PUSH
13844: LD_VAR 0 6
13848: PUSH
13849: LD_INT 10
13851: MUL
13852: MINUS
13853: ST_TO_ADDR
// CreateCratesArea ( x , i , true ) ;
13854: LD_VAR 0 6
13858: PPUSH
13859: LD_VAR 0 5
13863: PPUSH
13864: LD_INT 1
13866: PPUSH
13867: CALL_OW 55
// end ; end ;
13871: GO 13789
13873: POP
13874: POP
// time := time + 0 0$2 ;
13875: LD_ADDR_VAR 0 2
13879: PUSH
13880: LD_VAR 0 2
13884: PUSH
13885: LD_INT 70
13887: PLUS
13888: ST_TO_ADDR
// x := x - 1 ;
13889: LD_ADDR_VAR 0 6
13893: PUSH
13894: LD_VAR 0 6
13898: PUSH
13899: LD_INT 1
13901: MINUS
13902: ST_TO_ADDR
// if x = 0 then
13903: LD_VAR 0 6
13907: PUSH
13908: LD_INT 0
13910: EQUAL
13911: IFFALSE 13921
// x := 5 ;
13913: LD_ADDR_VAR 0 6
13917: PUSH
13918: LD_INT 5
13920: ST_TO_ADDR
// if time > 2 2$00 then
13921: LD_VAR 0 2
13925: PUSH
13926: LD_INT 4200
13928: GREATER
13929: IFFALSE 13939
// time := 0 0$30 ;
13931: LD_ADDR_VAR 0 2
13935: PUSH
13936: LD_INT 1050
13938: ST_TO_ADDR
// until not game or amount <= 0 ;
13939: LD_EXP 2
13943: NOT
13944: PUSH
13945: LD_VAR 0 3
13949: PUSH
13950: LD_INT 0
13952: LESSEQUAL
13953: OR
13954: IFFALSE 13606
// end ; end_of_file
13956: LD_VAR 0 4
13960: RET
// var NorthBase , WestBase ; every 0 0$1 do var i ;
13961: GO 13963
13963: DISABLE
13964: LD_INT 0
13966: PPUSH
// begin NorthBase := 2 ;
13967: LD_ADDR_LOC 1
13971: PUSH
13972: LD_INT 2
13974: ST_TO_ADDR
// WestBase := 3 ;
13975: LD_ADDR_LOC 2
13979: PUSH
13980: LD_INT 3
13982: ST_TO_ADDR
// end ;
13983: PPOPN 1
13985: END
// every 10 10$00 do var i ;
13986: GO 13988
13988: DISABLE
13989: LD_INT 0
13991: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
13992: LD_ADDR_VAR 0 1
13996: PUSH
13997: DOUBLE
13998: LD_INT 1
14000: DEC
14001: ST_TO_ADDR
14002: LD_INT 3
14004: PUSH
14005: LD_INT 4
14007: PUSH
14008: LD_INT 5
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: LIST
14015: PUSH
14016: LD_OWVAR 67
14020: ARRAY
14021: PUSH
14022: FOR_TO
14023: IFFALSE 14124
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14025: LD_ADDR_EXP 43
14029: PUSH
14030: LD_EXP 43
14034: PPUSH
14035: LD_EXP 43
14039: PUSH
14040: LD_INT 1
14042: PLUS
14043: PPUSH
14044: LD_LOC 1
14048: PUSH
14049: LD_INT 14
14051: PUSH
14052: LD_INT 3
14054: PUSH
14055: LD_INT 1
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 1
14064: PPUSH
14065: LD_INT 2
14067: PPUSH
14068: CALL_OW 12
14072: ARRAY
14073: PUSH
14074: LD_INT 2
14076: PUSH
14077: LD_INT 27
14079: PUSH
14080: LD_INT 25
14082: PUSH
14083: LD_INT 28
14085: PUSH
14086: LD_INT 29
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: PUSH
14095: LD_INT 1
14097: PPUSH
14098: LD_INT 4
14100: PPUSH
14101: CALL_OW 12
14105: ARRAY
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 1
14121: ST_TO_ADDR
// end ;
14122: GO 14022
14124: POP
14125: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
14126: LD_ADDR_VAR 0 1
14130: PUSH
14131: DOUBLE
14132: LD_INT 1
14134: DEC
14135: ST_TO_ADDR
14136: LD_INT 3
14138: PUSH
14139: LD_INT 4
14141: PUSH
14142: LD_INT 5
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: LIST
14149: PUSH
14150: LD_OWVAR 67
14154: ARRAY
14155: PUSH
14156: FOR_TO
14157: IFFALSE 14239
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14159: LD_ADDR_EXP 43
14163: PUSH
14164: LD_EXP 43
14168: PPUSH
14169: LD_EXP 43
14173: PUSH
14174: LD_INT 1
14176: PLUS
14177: PPUSH
14178: LD_LOC 2
14182: PUSH
14183: LD_INT 14
14185: PUSH
14186: LD_INT 1
14188: PUSH
14189: LD_INT 2
14191: PUSH
14192: LD_INT 27
14194: PUSH
14195: LD_INT 25
14197: PUSH
14198: LD_INT 28
14200: PUSH
14201: LD_INT 26
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: PUSH
14210: LD_INT 1
14212: PPUSH
14213: LD_INT 4
14215: PPUSH
14216: CALL_OW 12
14220: ARRAY
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: PPUSH
14232: CALL_OW 1
14236: ST_TO_ADDR
// end ;
14237: GO 14156
14239: POP
14240: POP
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
14241: LD_INT 16800
14243: PUSH
14244: LD_INT 2100
14246: PUSH
14247: LD_OWVAR 67
14251: MUL
14252: MINUS
14253: PPUSH
14254: CALL_OW 67
// for i := 1 to [ 5 , 5 , 6 ] [ Difficulty ] do
14258: LD_ADDR_VAR 0 1
14262: PUSH
14263: DOUBLE
14264: LD_INT 1
14266: DEC
14267: ST_TO_ADDR
14268: LD_INT 5
14270: PUSH
14271: LD_INT 5
14273: PUSH
14274: LD_INT 6
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: LD_OWVAR 67
14286: ARRAY
14287: PUSH
14288: FOR_TO
14289: IFFALSE 14390
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14291: LD_ADDR_EXP 43
14295: PUSH
14296: LD_EXP 43
14300: PPUSH
14301: LD_EXP 43
14305: PUSH
14306: LD_INT 1
14308: PLUS
14309: PPUSH
14310: LD_LOC 1
14314: PUSH
14315: LD_INT 14
14317: PUSH
14318: LD_INT 3
14320: PUSH
14321: LD_INT 1
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 1
14330: PPUSH
14331: LD_INT 2
14333: PPUSH
14334: CALL_OW 12
14338: ARRAY
14339: PUSH
14340: LD_INT 2
14342: PUSH
14343: LD_INT 27
14345: PUSH
14346: LD_INT 25
14348: PUSH
14349: LD_INT 28
14351: PUSH
14352: LD_INT 29
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 1
14363: PPUSH
14364: LD_INT 4
14366: PPUSH
14367: CALL_OW 12
14371: ARRAY
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PPUSH
14383: CALL_OW 1
14387: ST_TO_ADDR
// end ;
14388: GO 14288
14390: POP
14391: POP
// if tick > 30 30$0 then
14392: LD_OWVAR 1
14396: PUSH
14397: LD_INT 63000
14399: GREATER
14400: IFFALSE 14476
// begin for i := 1 to tick div 30 30$0 do
14402: LD_ADDR_VAR 0 1
14406: PUSH
14407: DOUBLE
14408: LD_INT 1
14410: DEC
14411: ST_TO_ADDR
14412: LD_OWVAR 1
14416: PUSH
14417: LD_INT 63000
14419: DIV
14420: PUSH
14421: FOR_TO
14422: IFFALSE 14474
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
14424: LD_ADDR_EXP 43
14428: PUSH
14429: LD_EXP 43
14433: PPUSH
14434: LD_EXP 43
14438: PUSH
14439: LD_INT 1
14441: PLUS
14442: PPUSH
14443: LD_LOC 1
14447: PUSH
14448: LD_INT 14
14450: PUSH
14451: LD_INT 3
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: LD_INT 29
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 1
14471: ST_TO_ADDR
14472: GO 14421
14474: POP
14475: POP
// end ; for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
14476: LD_ADDR_VAR 0 1
14480: PUSH
14481: DOUBLE
14482: LD_INT 1
14484: DEC
14485: ST_TO_ADDR
14486: LD_INT 5
14488: PUSH
14489: LD_INT 6
14491: PUSH
14492: LD_INT 6
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: PUSH
14500: LD_OWVAR 67
14504: ARRAY
14505: PUSH
14506: FOR_TO
14507: IFFALSE 14589
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14509: LD_ADDR_EXP 43
14513: PUSH
14514: LD_EXP 43
14518: PPUSH
14519: LD_EXP 43
14523: PUSH
14524: LD_INT 1
14526: PLUS
14527: PPUSH
14528: LD_LOC 2
14532: PUSH
14533: LD_INT 14
14535: PUSH
14536: LD_INT 1
14538: PUSH
14539: LD_INT 2
14541: PUSH
14542: LD_INT 27
14544: PUSH
14545: LD_INT 25
14547: PUSH
14548: LD_INT 28
14550: PUSH
14551: LD_INT 26
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: PUSH
14560: LD_INT 1
14562: PPUSH
14563: LD_INT 4
14565: PPUSH
14566: CALL_OW 12
14570: ARRAY
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PPUSH
14582: CALL_OW 1
14586: ST_TO_ADDR
// end ;
14587: GO 14506
14589: POP
14590: POP
// repeat wait ( [ 10 10$0 , 9 9$0 , 8 8$0 ] [ Difficulty ] ) ;
14591: LD_INT 21000
14593: PUSH
14594: LD_INT 18900
14596: PUSH
14597: LD_INT 16800
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: LIST
14604: PUSH
14605: LD_OWVAR 67
14609: ARRAY
14610: PPUSH
14611: CALL_OW 67
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
14615: LD_ADDR_VAR 0 1
14619: PUSH
14620: DOUBLE
14621: LD_INT 1
14623: DEC
14624: ST_TO_ADDR
14625: LD_INT 5
14627: PUSH
14628: LD_INT 6
14630: PUSH
14631: LD_INT 7
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: LIST
14638: PUSH
14639: LD_OWVAR 67
14643: ARRAY
14644: PUSH
14645: FOR_TO
14646: IFFALSE 14747
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14648: LD_ADDR_EXP 43
14652: PUSH
14653: LD_EXP 43
14657: PPUSH
14658: LD_EXP 43
14662: PUSH
14663: LD_INT 1
14665: PLUS
14666: PPUSH
14667: LD_LOC 1
14671: PUSH
14672: LD_INT 14
14674: PUSH
14675: LD_INT 3
14677: PUSH
14678: LD_INT 1
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 1
14687: PPUSH
14688: LD_INT 2
14690: PPUSH
14691: CALL_OW 12
14695: ARRAY
14696: PUSH
14697: LD_INT 2
14699: PUSH
14700: LD_INT 27
14702: PUSH
14703: LD_INT 25
14705: PUSH
14706: LD_INT 28
14708: PUSH
14709: LD_INT 29
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 1
14720: PPUSH
14721: LD_INT 4
14723: PPUSH
14724: CALL_OW 12
14728: ARRAY
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PPUSH
14740: CALL_OW 1
14744: ST_TO_ADDR
// end ;
14745: GO 14645
14747: POP
14748: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
14749: LD_ADDR_VAR 0 1
14753: PUSH
14754: DOUBLE
14755: LD_INT 1
14757: DEC
14758: ST_TO_ADDR
14759: LD_INT 4
14761: PUSH
14762: LD_INT 5
14764: PUSH
14765: LD_INT 6
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: LIST
14772: PUSH
14773: LD_OWVAR 67
14777: ARRAY
14778: PUSH
14779: FOR_TO
14780: IFFALSE 14862
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14782: LD_ADDR_EXP 43
14786: PUSH
14787: LD_EXP 43
14791: PPUSH
14792: LD_EXP 43
14796: PUSH
14797: LD_INT 1
14799: PLUS
14800: PPUSH
14801: LD_LOC 2
14805: PUSH
14806: LD_INT 14
14808: PUSH
14809: LD_INT 1
14811: PUSH
14812: LD_INT 2
14814: PUSH
14815: LD_INT 27
14817: PUSH
14818: LD_INT 25
14820: PUSH
14821: LD_INT 28
14823: PUSH
14824: LD_INT 26
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 1
14835: PPUSH
14836: LD_INT 4
14838: PPUSH
14839: CALL_OW 12
14843: ARRAY
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PPUSH
14855: CALL_OW 1
14859: ST_TO_ADDR
// end ;
14860: GO 14779
14862: POP
14863: POP
// until false ;
14864: LD_INT 0
14866: IFFALSE 14591
// end ;
14868: PPOPN 1
14870: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) do var i , tmp ;
14871: LD_EXP 46
14875: PPUSH
14876: LD_INT 1
14878: PPUSH
14879: LD_LOC 1
14883: PPUSH
14884: LD_INT 2
14886: PPUSH
14887: CALL 59082 0 4
14891: IFFALSE 15060
14893: GO 14895
14895: DISABLE
14896: LD_INT 0
14898: PPUSH
14899: PPUSH
// begin enable ;
14900: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) ;
14901: LD_ADDR_VAR 0 2
14905: PUSH
14906: LD_EXP 46
14910: PPUSH
14911: LD_INT 1
14913: PPUSH
14914: LD_LOC 1
14918: PPUSH
14919: LD_INT 2
14921: PPUSH
14922: CALL 59082 0 4
14926: ST_TO_ADDR
// if not tmp then
14927: LD_VAR 0 2
14931: NOT
14932: IFFALSE 14936
// exit ;
14934: GO 15060
// for i := Count ( arVehiclesAtttackers ) downto 1 do
14936: LD_ADDR_VAR 0 1
14940: PUSH
14941: DOUBLE
14942: LD_EXP 46
14946: PPUSH
14947: CALL 18817 0 1
14951: INC
14952: ST_TO_ADDR
14953: LD_INT 1
14955: PUSH
14956: FOR_DOWNTO
14957: IFFALSE 15003
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
14959: LD_EXP 46
14963: PUSH
14964: LD_VAR 0 1
14968: ARRAY
14969: PUSH
14970: LD_INT 2
14972: ARRAY
14973: PUSH
14974: LD_VAR 0 2
14978: IN
14979: IFFALSE 15001
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
14981: LD_ADDR_EXP 46
14985: PUSH
14986: LD_EXP 46
14990: PPUSH
14991: LD_VAR 0 1
14995: PPUSH
14996: CALL_OW 3
15000: ST_TO_ADDR
15001: GO 14956
15003: POP
15004: POP
// SendToAttack ( tmp , [ [ 164 , 40 ] , [ 174 , 72 ] , [ 174 , 93 ] , [ 196 , 110 ] ] ) ;
15005: LD_VAR 0 2
15009: PPUSH
15010: LD_INT 164
15012: PUSH
15013: LD_INT 40
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PUSH
15020: LD_INT 174
15022: PUSH
15023: LD_INT 72
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: LD_INT 174
15032: PUSH
15033: LD_INT 93
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: LD_INT 196
15042: PUSH
15043: LD_INT 110
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: PPUSH
15056: CALL 15255 0 2
// end ;
15060: PPOPN 2
15062: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) do var i , tmp ;
15063: LD_EXP 46
15067: PPUSH
15068: LD_INT 1
15070: PPUSH
15071: LD_LOC 2
15075: PPUSH
15076: LD_INT 2
15078: PPUSH
15079: CALL 59082 0 4
15083: IFFALSE 15252
15085: GO 15087
15087: DISABLE
15088: LD_INT 0
15090: PPUSH
15091: PPUSH
// begin enable ;
15092: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) ;
15093: LD_ADDR_VAR 0 2
15097: PUSH
15098: LD_EXP 46
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: LD_LOC 2
15110: PPUSH
15111: LD_INT 2
15113: PPUSH
15114: CALL 59082 0 4
15118: ST_TO_ADDR
// if not tmp then
15119: LD_VAR 0 2
15123: NOT
15124: IFFALSE 15128
// exit ;
15126: GO 15252
// for i := Count ( arVehiclesAtttackers ) downto 1 do
15128: LD_ADDR_VAR 0 1
15132: PUSH
15133: DOUBLE
15134: LD_EXP 46
15138: PPUSH
15139: CALL 18817 0 1
15143: INC
15144: ST_TO_ADDR
15145: LD_INT 1
15147: PUSH
15148: FOR_DOWNTO
15149: IFFALSE 15195
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
15151: LD_EXP 46
15155: PUSH
15156: LD_VAR 0 1
15160: ARRAY
15161: PUSH
15162: LD_INT 2
15164: ARRAY
15165: PUSH
15166: LD_VAR 0 2
15170: IN
15171: IFFALSE 15193
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
15173: LD_ADDR_EXP 46
15177: PUSH
15178: LD_EXP 46
15182: PPUSH
15183: LD_VAR 0 1
15187: PPUSH
15188: CALL_OW 3
15192: ST_TO_ADDR
15193: GO 15148
15195: POP
15196: POP
// SendToAttack ( tmp , [ [ 49 , 37 ] , [ 54 , 68 ] , [ 77 , 91 ] , [ 95 , 104 ] ] ) ;
15197: LD_VAR 0 2
15201: PPUSH
15202: LD_INT 49
15204: PUSH
15205: LD_INT 37
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 54
15214: PUSH
15215: LD_INT 68
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: LD_INT 77
15224: PUSH
15225: LD_INT 91
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 95
15234: PUSH
15235: LD_INT 104
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: PPUSH
15248: CALL 15255 0 2
// end ;
15252: PPOPN 2
15254: END
// function SendToAttack ( attackers , path ) ; var i ; begin
15255: LD_INT 0
15257: PPUSH
15258: PPUSH
// repeat wait ( 0 0$1 ) ;
15259: LD_INT 35
15261: PPUSH
15262: CALL_OW 67
// for i in attackers do
15266: LD_ADDR_VAR 0 4
15270: PUSH
15271: LD_VAR 0 1
15275: PUSH
15276: FOR_IN
15277: IFFALSE 15334
// begin if not IsOk ( i ) then
15279: LD_VAR 0 4
15283: PPUSH
15284: CALL_OW 302
15288: NOT
15289: IFFALSE 15318
// begin ComUnlink ( i ) ;
15291: LD_VAR 0 4
15295: PPUSH
15296: CALL_OW 136
// attackers := attackers diff i ;
15300: LD_ADDR_VAR 0 1
15304: PUSH
15305: LD_VAR 0 1
15309: PUSH
15310: LD_VAR 0 4
15314: DIFF
15315: ST_TO_ADDR
// continue ;
15316: GO 15276
// end ; AgressiveMove ( i , path ) ;
15318: LD_VAR 0 4
15322: PPUSH
15323: LD_VAR 0 2
15327: PPUSH
15328: CALL 57010 0 2
// end ;
15332: GO 15276
15334: POP
15335: POP
// until not UnitFilter ( attackers , [ f_ok ] ) ;
15336: LD_VAR 0 1
15340: PPUSH
15341: LD_INT 50
15343: PUSH
15344: EMPTY
15345: LIST
15346: PPUSH
15347: CALL_OW 72
15351: NOT
15352: IFFALSE 15259
// end ;
15354: LD_VAR 0 3
15358: RET
// every 0 0$10 trigger not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot do var i , un , tmp , enemy ;
15359: LD_INT 7
15361: PPUSH
15362: CALL_OW 302
15366: NOT
15367: PUSH
15368: LD_INT 7
15370: PPUSH
15371: CALL_OW 255
15375: PUSH
15376: LD_EXP 3
15380: NONEQUAL
15381: OR
15382: IFFALSE 15747
15384: GO 15386
15386: DISABLE
15387: LD_INT 0
15389: PPUSH
15390: PPUSH
15391: PPUSH
15392: PPUSH
// begin for i := 1 to 3 do
15393: LD_ADDR_VAR 0 1
15397: PUSH
15398: DOUBLE
15399: LD_INT 1
15401: DEC
15402: ST_TO_ADDR
15403: LD_INT 3
15405: PUSH
15406: FOR_TO
15407: IFFALSE 15557
// begin uc_side := 2 ;
15409: LD_ADDR_OWVAR 20
15413: PUSH
15414: LD_INT 2
15416: ST_TO_ADDR
// uc_nation := nation_arabian ;
15417: LD_ADDR_OWVAR 21
15421: PUSH
15422: LD_INT 2
15424: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_remote , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
15425: LD_INT 11
15427: PPUSH
15428: LD_INT 1
15430: PPUSH
15431: LD_INT 2
15433: PPUSH
15434: LD_INT 24
15436: PUSH
15437: LD_INT 23
15439: PUSH
15440: LD_INT 92
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 1
15450: PPUSH
15451: LD_INT 3
15453: PPUSH
15454: CALL_OW 12
15458: ARRAY
15459: PPUSH
15460: LD_INT 100
15462: PPUSH
15463: CALL 21555 0 5
// un := CreateVehicle ;
15467: LD_ADDR_VAR 0 2
15471: PUSH
15472: CALL_OW 45
15476: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15477: LD_VAR 0 2
15481: PPUSH
15482: LD_INT 2
15484: PPUSH
15485: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
15489: LD_VAR 0 2
15493: PPUSH
15494: LD_INT 47
15496: PPUSH
15497: LD_INT 0
15499: PPUSH
15500: CALL_OW 49
// Connect ( un ) ;
15504: LD_VAR 0 2
15508: PPUSH
15509: CALL 25023 0 1
// wait ( 0 0$0.3 ) ;
15513: LD_INT 10
15515: PPUSH
15516: CALL_OW 67
// ComMoveXY ( un , 73 , 17 ) ;
15520: LD_VAR 0 2
15524: PPUSH
15525: LD_INT 73
15527: PPUSH
15528: LD_INT 17
15530: PPUSH
15531: CALL_OW 111
// tmp := Join ( tmp , un ) ;
15535: LD_ADDR_VAR 0 3
15539: PUSH
15540: LD_VAR 0 3
15544: PPUSH
15545: LD_VAR 0 2
15549: PPUSH
15550: CALL 54406 0 2
15554: ST_TO_ADDR
// end ;
15555: GO 15406
15557: POP
15558: POP
// repeat wait ( 0 0$1 ) ;
15559: LD_INT 35
15561: PPUSH
15562: CALL_OW 67
// for i in tmp do
15566: LD_ADDR_VAR 0 1
15570: PUSH
15571: LD_VAR 0 3
15575: PUSH
15576: FOR_IN
15577: IFFALSE 15738
// begin if not IsOk ( i ) then
15579: LD_VAR 0 1
15583: PPUSH
15584: CALL_OW 302
15588: NOT
15589: IFFALSE 15618
// begin ComAutodestruct ( i ) ;
15591: LD_VAR 0 1
15595: PPUSH
15596: CALL 49918 0 1
// tmp := tmp diff i ;
15600: LD_ADDR_VAR 0 3
15604: PUSH
15605: LD_VAR 0 3
15609: PUSH
15610: LD_VAR 0 1
15614: DIFF
15615: ST_TO_ADDR
// continue ;
15616: GO 15576
// end ; if GetLives ( i ) < 750 then
15618: LD_VAR 0 1
15622: PPUSH
15623: CALL_OW 256
15627: PUSH
15628: LD_INT 750
15630: LESS
15631: IFFALSE 15692
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
15633: LD_ADDR_VAR 0 4
15637: PUSH
15638: LD_INT 81
15640: PUSH
15641: LD_VAR 0 1
15645: PPUSH
15646: CALL_OW 255
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PPUSH
15655: CALL_OW 69
15659: PPUSH
15660: LD_VAR 0 1
15664: PPUSH
15665: CALL_OW 74
15669: ST_TO_ADDR
// if enemy then
15670: LD_VAR 0 4
15674: IFFALSE 15690
// ComMoveUnit ( i , enemy ) ;
15676: LD_VAR 0 1
15680: PPUSH
15681: LD_VAR 0 4
15685: PPUSH
15686: CALL_OW 112
// end else
15690: GO 15736
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
15692: LD_VAR 0 1
15696: PPUSH
15697: LD_INT 76
15699: PUSH
15700: LD_INT 31
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 93
15709: PUSH
15710: LD_INT 67
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 108
15719: PUSH
15720: LD_INT 97
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: PPUSH
15732: CALL 57010 0 2
// end ;
15736: GO 15576
15738: POP
15739: POP
// until not tmp ;
15740: LD_VAR 0 3
15744: NOT
15745: IFFALSE 15559
// end ;
15747: PPOPN 4
15749: END
// every 18 18$00 trigger ( not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot ) and ( IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) = side_bot ) do var i , un , tmp , enemy ;
15750: LD_INT 7
15752: PPUSH
15753: CALL_OW 302
15757: NOT
15758: PUSH
15759: LD_INT 7
15761: PPUSH
15762: CALL_OW 255
15766: PUSH
15767: LD_EXP 3
15771: NONEQUAL
15772: OR
15773: PUSH
15774: LD_INT 45
15776: PPUSH
15777: CALL_OW 302
15781: PUSH
15782: LD_INT 45
15784: PPUSH
15785: CALL_OW 255
15789: PUSH
15790: LD_EXP 3
15794: EQUAL
15795: AND
15796: AND
15797: IFFALSE 16154
15799: GO 15801
15801: DISABLE
15802: LD_INT 0
15804: PPUSH
15805: PPUSH
15806: PPUSH
15807: PPUSH
// begin enable ;
15808: ENABLE
// for i := 1 to 3 do
15809: LD_ADDR_VAR 0 1
15813: PUSH
15814: DOUBLE
15815: LD_INT 1
15817: DEC
15818: ST_TO_ADDR
15819: LD_INT 3
15821: PUSH
15822: FOR_TO
15823: IFFALSE 15964
// begin uc_side := 2 ;
15825: LD_ADDR_OWVAR 20
15829: PUSH
15830: LD_INT 2
15832: ST_TO_ADDR
// uc_nation := nation_arabian ;
15833: LD_ADDR_OWVAR 21
15837: PUSH
15838: LD_INT 2
15840: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
15841: LD_INT 11
15843: PPUSH
15844: LD_INT 1
15846: PPUSH
15847: LD_INT 5
15849: PPUSH
15850: LD_INT 24
15852: PUSH
15853: LD_INT 23
15855: PUSH
15856: LD_INT 92
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 1
15866: PPUSH
15867: LD_INT 3
15869: PPUSH
15870: CALL_OW 12
15874: ARRAY
15875: PPUSH
15876: LD_INT 100
15878: PPUSH
15879: CALL 21555 0 5
// un := CreateVehicle ;
15883: LD_ADDR_VAR 0 2
15887: PUSH
15888: CALL_OW 45
15892: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15893: LD_VAR 0 2
15897: PPUSH
15898: LD_INT 2
15900: PPUSH
15901: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
15905: LD_VAR 0 2
15909: PPUSH
15910: LD_INT 47
15912: PPUSH
15913: LD_INT 0
15915: PPUSH
15916: CALL_OW 49
// wait ( 0 0$0.3 ) ;
15920: LD_INT 10
15922: PPUSH
15923: CALL_OW 67
// ComMoveXY ( un , 73 , 17 ) ;
15927: LD_VAR 0 2
15931: PPUSH
15932: LD_INT 73
15934: PPUSH
15935: LD_INT 17
15937: PPUSH
15938: CALL_OW 111
// tmp := Join ( tmp , un ) ;
15942: LD_ADDR_VAR 0 3
15946: PUSH
15947: LD_VAR 0 3
15951: PPUSH
15952: LD_VAR 0 2
15956: PPUSH
15957: CALL 54406 0 2
15961: ST_TO_ADDR
// end ;
15962: GO 15822
15964: POP
15965: POP
// repeat wait ( 0 0$1 ) ;
15966: LD_INT 35
15968: PPUSH
15969: CALL_OW 67
// for i in tmp do
15973: LD_ADDR_VAR 0 1
15977: PUSH
15978: LD_VAR 0 3
15982: PUSH
15983: FOR_IN
15984: IFFALSE 16145
// begin if not IsOk ( i ) then
15986: LD_VAR 0 1
15990: PPUSH
15991: CALL_OW 302
15995: NOT
15996: IFFALSE 16025
// begin ComAutodestruct ( i ) ;
15998: LD_VAR 0 1
16002: PPUSH
16003: CALL 49918 0 1
// tmp := tmp diff i ;
16007: LD_ADDR_VAR 0 3
16011: PUSH
16012: LD_VAR 0 3
16016: PUSH
16017: LD_VAR 0 1
16021: DIFF
16022: ST_TO_ADDR
// continue ;
16023: GO 15983
// end ; if GetLives ( i ) < 750 then
16025: LD_VAR 0 1
16029: PPUSH
16030: CALL_OW 256
16034: PUSH
16035: LD_INT 750
16037: LESS
16038: IFFALSE 16099
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16040: LD_ADDR_VAR 0 4
16044: PUSH
16045: LD_INT 81
16047: PUSH
16048: LD_VAR 0 1
16052: PPUSH
16053: CALL_OW 255
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PPUSH
16062: CALL_OW 69
16066: PPUSH
16067: LD_VAR 0 1
16071: PPUSH
16072: CALL_OW 74
16076: ST_TO_ADDR
// if enemy then
16077: LD_VAR 0 4
16081: IFFALSE 16097
// ComMoveUnit ( i , enemy ) ;
16083: LD_VAR 0 1
16087: PPUSH
16088: LD_VAR 0 4
16092: PPUSH
16093: CALL_OW 112
// end else
16097: GO 16143
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
16099: LD_VAR 0 1
16103: PPUSH
16104: LD_INT 76
16106: PUSH
16107: LD_INT 31
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 93
16116: PUSH
16117: LD_INT 67
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 108
16126: PUSH
16127: LD_INT 97
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: PPUSH
16139: CALL 57010 0 2
// end ;
16143: GO 15983
16145: POP
16146: POP
// until not tmp ;
16147: LD_VAR 0 3
16151: NOT
16152: IFFALSE 15966
// end ;
16154: PPOPN 4
16156: END
// every 0 0$10 trigger not IsOk ( ar_dep_e ) or GetSide ( ar_dep_e ) <> side_bot do var i , un , tmp , enemy ;
16157: LD_INT 69
16159: PPUSH
16160: CALL_OW 302
16164: NOT
16165: PUSH
16166: LD_INT 69
16168: PPUSH
16169: CALL_OW 255
16173: PUSH
16174: LD_EXP 3
16178: NONEQUAL
16179: OR
16180: IFFALSE 16433
16182: GO 16184
16184: DISABLE
16185: LD_INT 0
16187: PPUSH
16188: PPUSH
16189: PPUSH
16190: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
16191: LD_ADDR_VAR 0 1
16195: PUSH
16196: DOUBLE
16197: LD_INT 1
16199: DEC
16200: ST_TO_ADDR
16201: LD_INT 2
16203: PUSH
16204: LD_INT 3
16206: PUSH
16207: LD_INT 4
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: PUSH
16215: LD_OWVAR 67
16219: ARRAY
16220: PUSH
16221: FOR_TO
16222: IFFALSE 16313
// begin uc_side := side_bot ;
16224: LD_ADDR_OWVAR 20
16228: PUSH
16229: LD_EXP 3
16233: ST_TO_ADDR
// uc_nation := nation_nature ;
16234: LD_ADDR_OWVAR 21
16238: PUSH
16239: LD_INT 0
16241: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16242: CALL 50516 0 0
// hc_class := class_apeman_kamikaze ;
16246: LD_ADDR_OWVAR 28
16250: PUSH
16251: LD_INT 17
16253: ST_TO_ADDR
// un := CreateHuman ;
16254: LD_ADDR_VAR 0 2
16258: PUSH
16259: CALL_OW 44
16263: ST_TO_ADDR
// SetDir ( un , 4 ) ;
16264: LD_VAR 0 2
16268: PPUSH
16269: LD_INT 4
16271: PPUSH
16272: CALL_OW 233
// PlaceUnitArea ( un , east_ape_spawn , false ) ;
16276: LD_VAR 0 2
16280: PPUSH
16281: LD_INT 48
16283: PPUSH
16284: LD_INT 0
16286: PPUSH
16287: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16291: LD_ADDR_VAR 0 3
16295: PUSH
16296: LD_VAR 0 3
16300: PPUSH
16301: LD_VAR 0 2
16305: PPUSH
16306: CALL 54406 0 2
16310: ST_TO_ADDR
// end ;
16311: GO 16221
16313: POP
16314: POP
// repeat wait ( 0 0$1 ) ;
16315: LD_INT 35
16317: PPUSH
16318: CALL_OW 67
// for i in tmp do
16322: LD_ADDR_VAR 0 1
16326: PUSH
16327: LD_VAR 0 3
16331: PUSH
16332: FOR_IN
16333: IFFALSE 16424
// begin if not IsOk ( i ) then
16335: LD_VAR 0 1
16339: PPUSH
16340: CALL_OW 302
16344: NOT
16345: IFFALSE 16365
// begin tmp := tmp diff i ;
16347: LD_ADDR_VAR 0 3
16351: PUSH
16352: LD_VAR 0 3
16356: PUSH
16357: LD_VAR 0 1
16361: DIFF
16362: ST_TO_ADDR
// continue ;
16363: GO 16332
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16365: LD_ADDR_VAR 0 4
16369: PUSH
16370: LD_INT 81
16372: PUSH
16373: LD_VAR 0 1
16377: PPUSH
16378: CALL_OW 255
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PPUSH
16387: CALL_OW 69
16391: PPUSH
16392: LD_VAR 0 1
16396: PPUSH
16397: CALL_OW 74
16401: ST_TO_ADDR
// if enemy then
16402: LD_VAR 0 4
16406: IFFALSE 16422
// ComAttackUnit ( i , enemy ) ;
16408: LD_VAR 0 1
16412: PPUSH
16413: LD_VAR 0 4
16417: PPUSH
16418: CALL_OW 115
// end ;
16422: GO 16332
16424: POP
16425: POP
// until not tmp ;
16426: LD_VAR 0 3
16430: NOT
16431: IFFALSE 16315
// end ;
16433: PPOPN 4
16435: END
// every 0 0$10 trigger not IsOk ( ar_dep_w ) or GetSide ( ar_dep_w ) <> side_bot do var i , un , tmp , enemy ;
16436: LD_INT 45
16438: PPUSH
16439: CALL_OW 302
16443: NOT
16444: PUSH
16445: LD_INT 45
16447: PPUSH
16448: CALL_OW 255
16452: PUSH
16453: LD_EXP 3
16457: NONEQUAL
16458: OR
16459: IFFALSE 16712
16461: GO 16463
16463: DISABLE
16464: LD_INT 0
16466: PPUSH
16467: PPUSH
16468: PPUSH
16469: PPUSH
// begin for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
16470: LD_ADDR_VAR 0 1
16474: PUSH
16475: DOUBLE
16476: LD_INT 1
16478: DEC
16479: ST_TO_ADDR
16480: LD_INT 2
16482: PUSH
16483: LD_INT 3
16485: PUSH
16486: LD_INT 3
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: PUSH
16494: LD_OWVAR 67
16498: ARRAY
16499: PUSH
16500: FOR_TO
16501: IFFALSE 16592
// begin uc_side := side_bot ;
16503: LD_ADDR_OWVAR 20
16507: PUSH
16508: LD_EXP 3
16512: ST_TO_ADDR
// uc_nation := nation_nature ;
16513: LD_ADDR_OWVAR 21
16517: PUSH
16518: LD_INT 0
16520: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16521: CALL 50516 0 0
// hc_class := class_apeman_kamikaze ;
16525: LD_ADDR_OWVAR 28
16529: PUSH
16530: LD_INT 17
16532: ST_TO_ADDR
// un := CreateHuman ;
16533: LD_ADDR_VAR 0 2
16537: PUSH
16538: CALL_OW 44
16542: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16543: LD_VAR 0 2
16547: PPUSH
16548: LD_INT 2
16550: PPUSH
16551: CALL_OW 233
// PlaceUnitArea ( un , west_ape_spawn , false ) ;
16555: LD_VAR 0 2
16559: PPUSH
16560: LD_INT 49
16562: PPUSH
16563: LD_INT 0
16565: PPUSH
16566: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16570: LD_ADDR_VAR 0 3
16574: PUSH
16575: LD_VAR 0 3
16579: PPUSH
16580: LD_VAR 0 2
16584: PPUSH
16585: CALL 54406 0 2
16589: ST_TO_ADDR
// end ;
16590: GO 16500
16592: POP
16593: POP
// repeat wait ( 0 0$1 ) ;
16594: LD_INT 35
16596: PPUSH
16597: CALL_OW 67
// for i in tmp do
16601: LD_ADDR_VAR 0 1
16605: PUSH
16606: LD_VAR 0 3
16610: PUSH
16611: FOR_IN
16612: IFFALSE 16703
// begin if not IsOk ( i ) then
16614: LD_VAR 0 1
16618: PPUSH
16619: CALL_OW 302
16623: NOT
16624: IFFALSE 16644
// begin tmp := tmp diff i ;
16626: LD_ADDR_VAR 0 3
16630: PUSH
16631: LD_VAR 0 3
16635: PUSH
16636: LD_VAR 0 1
16640: DIFF
16641: ST_TO_ADDR
// continue ;
16642: GO 16611
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16644: LD_ADDR_VAR 0 4
16648: PUSH
16649: LD_INT 81
16651: PUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 255
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PPUSH
16666: CALL_OW 69
16670: PPUSH
16671: LD_VAR 0 1
16675: PPUSH
16676: CALL_OW 74
16680: ST_TO_ADDR
// if enemy then
16681: LD_VAR 0 4
16685: IFFALSE 16701
// ComAttackUnit ( i , enemy ) ;
16687: LD_VAR 0 1
16691: PPUSH
16692: LD_VAR 0 4
16696: PPUSH
16697: CALL_OW 115
// end ;
16701: GO 16611
16703: POP
16704: POP
// until not tmp ;
16705: LD_VAR 0 3
16709: NOT
16710: IFFALSE 16594
// end ; end_of_file
16712: PPOPN 4
16714: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16715: LD_INT 0
16717: PPUSH
16718: PPUSH
// if exist_mode then
16719: LD_VAR 0 2
16723: IFFALSE 16748
// unit := CreateCharacter ( prefix & ident ) else
16725: LD_ADDR_VAR 0 5
16729: PUSH
16730: LD_VAR 0 3
16734: PUSH
16735: LD_VAR 0 1
16739: STR
16740: PPUSH
16741: CALL_OW 34
16745: ST_TO_ADDR
16746: GO 16763
// unit := NewCharacter ( ident ) ;
16748: LD_ADDR_VAR 0 5
16752: PUSH
16753: LD_VAR 0 1
16757: PPUSH
16758: CALL_OW 25
16762: ST_TO_ADDR
// result := unit ;
16763: LD_ADDR_VAR 0 4
16767: PUSH
16768: LD_VAR 0 5
16772: ST_TO_ADDR
// end ;
16773: LD_VAR 0 4
16777: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16778: LD_INT 0
16780: PPUSH
16781: PPUSH
// if not side or not nation then
16782: LD_VAR 0 1
16786: NOT
16787: PUSH
16788: LD_VAR 0 2
16792: NOT
16793: OR
16794: IFFALSE 16798
// exit ;
16796: GO 17566
// case nation of nation_american :
16798: LD_VAR 0 2
16802: PUSH
16803: LD_INT 1
16805: DOUBLE
16806: EQUAL
16807: IFTRUE 16811
16809: GO 17025
16811: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16812: LD_ADDR_VAR 0 4
16816: PUSH
16817: LD_INT 35
16819: PUSH
16820: LD_INT 45
16822: PUSH
16823: LD_INT 46
16825: PUSH
16826: LD_INT 47
16828: PUSH
16829: LD_INT 82
16831: PUSH
16832: LD_INT 83
16834: PUSH
16835: LD_INT 84
16837: PUSH
16838: LD_INT 85
16840: PUSH
16841: LD_INT 86
16843: PUSH
16844: LD_INT 1
16846: PUSH
16847: LD_INT 2
16849: PUSH
16850: LD_INT 6
16852: PUSH
16853: LD_INT 15
16855: PUSH
16856: LD_INT 16
16858: PUSH
16859: LD_INT 7
16861: PUSH
16862: LD_INT 12
16864: PUSH
16865: LD_INT 13
16867: PUSH
16868: LD_INT 10
16870: PUSH
16871: LD_INT 14
16873: PUSH
16874: LD_INT 20
16876: PUSH
16877: LD_INT 21
16879: PUSH
16880: LD_INT 22
16882: PUSH
16883: LD_INT 25
16885: PUSH
16886: LD_INT 32
16888: PUSH
16889: LD_INT 27
16891: PUSH
16892: LD_INT 36
16894: PUSH
16895: LD_INT 69
16897: PUSH
16898: LD_INT 39
16900: PUSH
16901: LD_INT 34
16903: PUSH
16904: LD_INT 40
16906: PUSH
16907: LD_INT 48
16909: PUSH
16910: LD_INT 49
16912: PUSH
16913: LD_INT 50
16915: PUSH
16916: LD_INT 51
16918: PUSH
16919: LD_INT 52
16921: PUSH
16922: LD_INT 53
16924: PUSH
16925: LD_INT 54
16927: PUSH
16928: LD_INT 55
16930: PUSH
16931: LD_INT 56
16933: PUSH
16934: LD_INT 57
16936: PUSH
16937: LD_INT 58
16939: PUSH
16940: LD_INT 59
16942: PUSH
16943: LD_INT 60
16945: PUSH
16946: LD_INT 61
16948: PUSH
16949: LD_INT 62
16951: PUSH
16952: LD_INT 80
16954: PUSH
16955: LD_INT 82
16957: PUSH
16958: LD_INT 83
16960: PUSH
16961: LD_INT 84
16963: PUSH
16964: LD_INT 85
16966: PUSH
16967: LD_INT 86
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: ST_TO_ADDR
17023: GO 17490
17025: LD_INT 2
17027: DOUBLE
17028: EQUAL
17029: IFTRUE 17033
17031: GO 17259
17033: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17034: LD_ADDR_VAR 0 4
17038: PUSH
17039: LD_INT 35
17041: PUSH
17042: LD_INT 45
17044: PUSH
17045: LD_INT 46
17047: PUSH
17048: LD_INT 47
17050: PUSH
17051: LD_INT 82
17053: PUSH
17054: LD_INT 83
17056: PUSH
17057: LD_INT 84
17059: PUSH
17060: LD_INT 85
17062: PUSH
17063: LD_INT 87
17065: PUSH
17066: LD_INT 70
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: LD_INT 11
17074: PUSH
17075: LD_INT 3
17077: PUSH
17078: LD_INT 4
17080: PUSH
17081: LD_INT 5
17083: PUSH
17084: LD_INT 6
17086: PUSH
17087: LD_INT 15
17089: PUSH
17090: LD_INT 18
17092: PUSH
17093: LD_INT 7
17095: PUSH
17096: LD_INT 17
17098: PUSH
17099: LD_INT 8
17101: PUSH
17102: LD_INT 20
17104: PUSH
17105: LD_INT 21
17107: PUSH
17108: LD_INT 22
17110: PUSH
17111: LD_INT 72
17113: PUSH
17114: LD_INT 26
17116: PUSH
17117: LD_INT 69
17119: PUSH
17120: LD_INT 39
17122: PUSH
17123: LD_INT 40
17125: PUSH
17126: LD_INT 41
17128: PUSH
17129: LD_INT 42
17131: PUSH
17132: LD_INT 43
17134: PUSH
17135: LD_INT 48
17137: PUSH
17138: LD_INT 49
17140: PUSH
17141: LD_INT 50
17143: PUSH
17144: LD_INT 51
17146: PUSH
17147: LD_INT 52
17149: PUSH
17150: LD_INT 53
17152: PUSH
17153: LD_INT 54
17155: PUSH
17156: LD_INT 55
17158: PUSH
17159: LD_INT 56
17161: PUSH
17162: LD_INT 60
17164: PUSH
17165: LD_INT 61
17167: PUSH
17168: LD_INT 62
17170: PUSH
17171: LD_INT 66
17173: PUSH
17174: LD_INT 67
17176: PUSH
17177: LD_INT 68
17179: PUSH
17180: LD_INT 81
17182: PUSH
17183: LD_INT 82
17185: PUSH
17186: LD_INT 83
17188: PUSH
17189: LD_INT 84
17191: PUSH
17192: LD_INT 85
17194: PUSH
17195: LD_INT 87
17197: PUSH
17198: LD_INT 88
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: ST_TO_ADDR
17257: GO 17490
17259: LD_INT 3
17261: DOUBLE
17262: EQUAL
17263: IFTRUE 17267
17265: GO 17489
17267: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17268: LD_ADDR_VAR 0 4
17272: PUSH
17273: LD_INT 46
17275: PUSH
17276: LD_INT 47
17278: PUSH
17279: LD_INT 1
17281: PUSH
17282: LD_INT 2
17284: PUSH
17285: LD_INT 82
17287: PUSH
17288: LD_INT 83
17290: PUSH
17291: LD_INT 84
17293: PUSH
17294: LD_INT 85
17296: PUSH
17297: LD_INT 86
17299: PUSH
17300: LD_INT 11
17302: PUSH
17303: LD_INT 9
17305: PUSH
17306: LD_INT 20
17308: PUSH
17309: LD_INT 19
17311: PUSH
17312: LD_INT 21
17314: PUSH
17315: LD_INT 24
17317: PUSH
17318: LD_INT 22
17320: PUSH
17321: LD_INT 25
17323: PUSH
17324: LD_INT 28
17326: PUSH
17327: LD_INT 29
17329: PUSH
17330: LD_INT 30
17332: PUSH
17333: LD_INT 31
17335: PUSH
17336: LD_INT 37
17338: PUSH
17339: LD_INT 38
17341: PUSH
17342: LD_INT 32
17344: PUSH
17345: LD_INT 27
17347: PUSH
17348: LD_INT 33
17350: PUSH
17351: LD_INT 69
17353: PUSH
17354: LD_INT 39
17356: PUSH
17357: LD_INT 34
17359: PUSH
17360: LD_INT 40
17362: PUSH
17363: LD_INT 71
17365: PUSH
17366: LD_INT 23
17368: PUSH
17369: LD_INT 44
17371: PUSH
17372: LD_INT 48
17374: PUSH
17375: LD_INT 49
17377: PUSH
17378: LD_INT 50
17380: PUSH
17381: LD_INT 51
17383: PUSH
17384: LD_INT 52
17386: PUSH
17387: LD_INT 53
17389: PUSH
17390: LD_INT 54
17392: PUSH
17393: LD_INT 55
17395: PUSH
17396: LD_INT 56
17398: PUSH
17399: LD_INT 57
17401: PUSH
17402: LD_INT 58
17404: PUSH
17405: LD_INT 59
17407: PUSH
17408: LD_INT 63
17410: PUSH
17411: LD_INT 64
17413: PUSH
17414: LD_INT 65
17416: PUSH
17417: LD_INT 82
17419: PUSH
17420: LD_INT 83
17422: PUSH
17423: LD_INT 84
17425: PUSH
17426: LD_INT 85
17428: PUSH
17429: LD_INT 86
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: ST_TO_ADDR
17487: GO 17490
17489: POP
// if state > - 1 and state < 3 then
17490: LD_VAR 0 3
17494: PUSH
17495: LD_INT 1
17497: NEG
17498: GREATER
17499: PUSH
17500: LD_VAR 0 3
17504: PUSH
17505: LD_INT 3
17507: LESS
17508: AND
17509: IFFALSE 17566
// for i in result do
17511: LD_ADDR_VAR 0 5
17515: PUSH
17516: LD_VAR 0 4
17520: PUSH
17521: FOR_IN
17522: IFFALSE 17564
// if GetTech ( i , side ) <> state then
17524: LD_VAR 0 5
17528: PPUSH
17529: LD_VAR 0 1
17533: PPUSH
17534: CALL_OW 321
17538: PUSH
17539: LD_VAR 0 3
17543: NONEQUAL
17544: IFFALSE 17562
// result := result diff i ;
17546: LD_ADDR_VAR 0 4
17550: PUSH
17551: LD_VAR 0 4
17555: PUSH
17556: LD_VAR 0 5
17560: DIFF
17561: ST_TO_ADDR
17562: GO 17521
17564: POP
17565: POP
// end ;
17566: LD_VAR 0 4
17570: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17571: LD_INT 0
17573: PPUSH
17574: PPUSH
17575: PPUSH
// result := true ;
17576: LD_ADDR_VAR 0 3
17580: PUSH
17581: LD_INT 1
17583: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17584: LD_ADDR_VAR 0 5
17588: PUSH
17589: LD_VAR 0 2
17593: PPUSH
17594: CALL_OW 480
17598: ST_TO_ADDR
// if not tmp then
17599: LD_VAR 0 5
17603: NOT
17604: IFFALSE 17608
// exit ;
17606: GO 17657
// for i in tmp do
17608: LD_ADDR_VAR 0 4
17612: PUSH
17613: LD_VAR 0 5
17617: PUSH
17618: FOR_IN
17619: IFFALSE 17655
// if GetTech ( i , side ) <> state_researched then
17621: LD_VAR 0 4
17625: PPUSH
17626: LD_VAR 0 1
17630: PPUSH
17631: CALL_OW 321
17635: PUSH
17636: LD_INT 2
17638: NONEQUAL
17639: IFFALSE 17653
// begin result := false ;
17641: LD_ADDR_VAR 0 3
17645: PUSH
17646: LD_INT 0
17648: ST_TO_ADDR
// exit ;
17649: POP
17650: POP
17651: GO 17657
// end ;
17653: GO 17618
17655: POP
17656: POP
// end ;
17657: LD_VAR 0 3
17661: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17662: LD_INT 0
17664: PPUSH
17665: PPUSH
17666: PPUSH
17667: PPUSH
17668: PPUSH
17669: PPUSH
17670: PPUSH
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
17675: PPUSH
17676: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17677: LD_VAR 0 1
17681: NOT
17682: PUSH
17683: LD_VAR 0 1
17687: PPUSH
17688: CALL_OW 257
17692: PUSH
17693: LD_INT 9
17695: NONEQUAL
17696: OR
17697: IFFALSE 17701
// exit ;
17699: GO 18274
// side := GetSide ( unit ) ;
17701: LD_ADDR_VAR 0 9
17705: PUSH
17706: LD_VAR 0 1
17710: PPUSH
17711: CALL_OW 255
17715: ST_TO_ADDR
// tech_space := tech_spacanom ;
17716: LD_ADDR_VAR 0 12
17720: PUSH
17721: LD_INT 29
17723: ST_TO_ADDR
// tech_time := tech_taurad ;
17724: LD_ADDR_VAR 0 13
17728: PUSH
17729: LD_INT 28
17731: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17732: LD_ADDR_VAR 0 11
17736: PUSH
17737: LD_VAR 0 1
17741: PPUSH
17742: CALL_OW 310
17746: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17747: LD_VAR 0 11
17751: PPUSH
17752: CALL_OW 247
17756: PUSH
17757: LD_INT 2
17759: EQUAL
17760: IFFALSE 17764
// exit ;
17762: GO 18274
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17764: LD_ADDR_VAR 0 8
17768: PUSH
17769: LD_INT 81
17771: PUSH
17772: LD_VAR 0 9
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 3
17783: PUSH
17784: LD_INT 21
17786: PUSH
17787: LD_INT 3
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PPUSH
17802: CALL_OW 69
17806: ST_TO_ADDR
// if not tmp then
17807: LD_VAR 0 8
17811: NOT
17812: IFFALSE 17816
// exit ;
17814: GO 18274
// if in_unit then
17816: LD_VAR 0 11
17820: IFFALSE 17844
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17822: LD_ADDR_VAR 0 10
17826: PUSH
17827: LD_VAR 0 8
17831: PPUSH
17832: LD_VAR 0 11
17836: PPUSH
17837: CALL_OW 74
17841: ST_TO_ADDR
17842: GO 17864
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17844: LD_ADDR_VAR 0 10
17848: PUSH
17849: LD_VAR 0 8
17853: PPUSH
17854: LD_VAR 0 1
17858: PPUSH
17859: CALL_OW 74
17863: ST_TO_ADDR
// if not enemy then
17864: LD_VAR 0 10
17868: NOT
17869: IFFALSE 17873
// exit ;
17871: GO 18274
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17873: LD_VAR 0 11
17877: PUSH
17878: LD_VAR 0 11
17882: PPUSH
17883: LD_VAR 0 10
17887: PPUSH
17888: CALL_OW 296
17892: PUSH
17893: LD_INT 13
17895: GREATER
17896: AND
17897: PUSH
17898: LD_VAR 0 1
17902: PPUSH
17903: LD_VAR 0 10
17907: PPUSH
17908: CALL_OW 296
17912: PUSH
17913: LD_INT 12
17915: GREATER
17916: OR
17917: IFFALSE 17921
// exit ;
17919: GO 18274
// missile := [ 1 ] ;
17921: LD_ADDR_VAR 0 14
17925: PUSH
17926: LD_INT 1
17928: PUSH
17929: EMPTY
17930: LIST
17931: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17932: LD_VAR 0 9
17936: PPUSH
17937: LD_VAR 0 12
17941: PPUSH
17942: CALL_OW 325
17946: IFFALSE 17975
// missile := Replace ( missile , missile + 1 , 2 ) ;
17948: LD_ADDR_VAR 0 14
17952: PUSH
17953: LD_VAR 0 14
17957: PPUSH
17958: LD_VAR 0 14
17962: PUSH
17963: LD_INT 1
17965: PLUS
17966: PPUSH
17967: LD_INT 2
17969: PPUSH
17970: CALL_OW 1
17974: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17975: LD_VAR 0 9
17979: PPUSH
17980: LD_VAR 0 13
17984: PPUSH
17985: CALL_OW 325
17989: PUSH
17990: LD_VAR 0 10
17994: PPUSH
17995: CALL_OW 255
17999: PPUSH
18000: LD_VAR 0 13
18004: PPUSH
18005: CALL_OW 325
18009: NOT
18010: AND
18011: IFFALSE 18040
// missile := Replace ( missile , missile + 1 , 3 ) ;
18013: LD_ADDR_VAR 0 14
18017: PUSH
18018: LD_VAR 0 14
18022: PPUSH
18023: LD_VAR 0 14
18027: PUSH
18028: LD_INT 1
18030: PLUS
18031: PPUSH
18032: LD_INT 3
18034: PPUSH
18035: CALL_OW 1
18039: ST_TO_ADDR
// if missile < 2 then
18040: LD_VAR 0 14
18044: PUSH
18045: LD_INT 2
18047: LESS
18048: IFFALSE 18052
// exit ;
18050: GO 18274
// x := GetX ( enemy ) ;
18052: LD_ADDR_VAR 0 4
18056: PUSH
18057: LD_VAR 0 10
18061: PPUSH
18062: CALL_OW 250
18066: ST_TO_ADDR
// y := GetY ( enemy ) ;
18067: LD_ADDR_VAR 0 5
18071: PUSH
18072: LD_VAR 0 10
18076: PPUSH
18077: CALL_OW 251
18081: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18082: LD_ADDR_VAR 0 6
18086: PUSH
18087: LD_VAR 0 4
18091: PUSH
18092: LD_INT 1
18094: NEG
18095: PPUSH
18096: LD_INT 1
18098: PPUSH
18099: CALL_OW 12
18103: PLUS
18104: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18105: LD_ADDR_VAR 0 7
18109: PUSH
18110: LD_VAR 0 5
18114: PUSH
18115: LD_INT 1
18117: NEG
18118: PPUSH
18119: LD_INT 1
18121: PPUSH
18122: CALL_OW 12
18126: PLUS
18127: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18128: LD_VAR 0 6
18132: PPUSH
18133: LD_VAR 0 7
18137: PPUSH
18138: CALL_OW 488
18142: NOT
18143: IFFALSE 18165
// begin _x := x ;
18145: LD_ADDR_VAR 0 6
18149: PUSH
18150: LD_VAR 0 4
18154: ST_TO_ADDR
// _y := y ;
18155: LD_ADDR_VAR 0 7
18159: PUSH
18160: LD_VAR 0 5
18164: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18165: LD_ADDR_VAR 0 3
18169: PUSH
18170: LD_INT 1
18172: PPUSH
18173: LD_VAR 0 14
18177: PPUSH
18178: CALL_OW 12
18182: ST_TO_ADDR
// case i of 1 :
18183: LD_VAR 0 3
18187: PUSH
18188: LD_INT 1
18190: DOUBLE
18191: EQUAL
18192: IFTRUE 18196
18194: GO 18213
18196: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18197: LD_VAR 0 1
18201: PPUSH
18202: LD_VAR 0 10
18206: PPUSH
18207: CALL_OW 115
18211: GO 18274
18213: LD_INT 2
18215: DOUBLE
18216: EQUAL
18217: IFTRUE 18221
18219: GO 18243
18221: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18222: LD_VAR 0 1
18226: PPUSH
18227: LD_VAR 0 6
18231: PPUSH
18232: LD_VAR 0 7
18236: PPUSH
18237: CALL_OW 153
18241: GO 18274
18243: LD_INT 3
18245: DOUBLE
18246: EQUAL
18247: IFTRUE 18251
18249: GO 18273
18251: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18252: LD_VAR 0 1
18256: PPUSH
18257: LD_VAR 0 6
18261: PPUSH
18262: LD_VAR 0 7
18266: PPUSH
18267: CALL_OW 154
18271: GO 18274
18273: POP
// end ;
18274: LD_VAR 0 2
18278: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18279: LD_INT 0
18281: PPUSH
18282: PPUSH
18283: PPUSH
18284: PPUSH
18285: PPUSH
18286: PPUSH
// if not unit or not building then
18287: LD_VAR 0 1
18291: NOT
18292: PUSH
18293: LD_VAR 0 2
18297: NOT
18298: OR
18299: IFFALSE 18303
// exit ;
18301: GO 18461
// x := GetX ( building ) ;
18303: LD_ADDR_VAR 0 5
18307: PUSH
18308: LD_VAR 0 2
18312: PPUSH
18313: CALL_OW 250
18317: ST_TO_ADDR
// y := GetY ( building ) ;
18318: LD_ADDR_VAR 0 6
18322: PUSH
18323: LD_VAR 0 2
18327: PPUSH
18328: CALL_OW 251
18332: ST_TO_ADDR
// for i = 0 to 5 do
18333: LD_ADDR_VAR 0 4
18337: PUSH
18338: DOUBLE
18339: LD_INT 0
18341: DEC
18342: ST_TO_ADDR
18343: LD_INT 5
18345: PUSH
18346: FOR_TO
18347: IFFALSE 18459
// begin _x := ShiftX ( x , i , 3 ) ;
18349: LD_ADDR_VAR 0 7
18353: PUSH
18354: LD_VAR 0 5
18358: PPUSH
18359: LD_VAR 0 4
18363: PPUSH
18364: LD_INT 3
18366: PPUSH
18367: CALL_OW 272
18371: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18372: LD_ADDR_VAR 0 8
18376: PUSH
18377: LD_VAR 0 6
18381: PPUSH
18382: LD_VAR 0 4
18386: PPUSH
18387: LD_INT 3
18389: PPUSH
18390: CALL_OW 273
18394: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18395: LD_VAR 0 7
18399: PPUSH
18400: LD_VAR 0 8
18404: PPUSH
18405: CALL_OW 488
18409: NOT
18410: IFFALSE 18414
// continue ;
18412: GO 18346
// if HexInfo ( _x , _y ) = 0 then
18414: LD_VAR 0 7
18418: PPUSH
18419: LD_VAR 0 8
18423: PPUSH
18424: CALL_OW 428
18428: PUSH
18429: LD_INT 0
18431: EQUAL
18432: IFFALSE 18457
// begin ComMoveXY ( unit , _x , _y ) ;
18434: LD_VAR 0 1
18438: PPUSH
18439: LD_VAR 0 7
18443: PPUSH
18444: LD_VAR 0 8
18448: PPUSH
18449: CALL_OW 111
// exit ;
18453: POP
18454: POP
18455: GO 18461
// end ; end ;
18457: GO 18346
18459: POP
18460: POP
// end ;
18461: LD_VAR 0 3
18465: RET
// export function ScanBase ( side , base_area ) ; begin
18466: LD_INT 0
18468: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18469: LD_ADDR_VAR 0 3
18473: PUSH
18474: LD_VAR 0 2
18478: PPUSH
18479: LD_INT 81
18481: PUSH
18482: LD_VAR 0 1
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PPUSH
18491: CALL_OW 70
18495: ST_TO_ADDR
// end ;
18496: LD_VAR 0 3
18500: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18501: LD_INT 0
18503: PPUSH
18504: PPUSH
18505: PPUSH
18506: PPUSH
// result := false ;
18507: LD_ADDR_VAR 0 2
18511: PUSH
18512: LD_INT 0
18514: ST_TO_ADDR
// side := GetSide ( unit ) ;
18515: LD_ADDR_VAR 0 3
18519: PUSH
18520: LD_VAR 0 1
18524: PPUSH
18525: CALL_OW 255
18529: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18530: LD_ADDR_VAR 0 4
18534: PUSH
18535: LD_VAR 0 1
18539: PPUSH
18540: CALL_OW 248
18544: ST_TO_ADDR
// case nat of 1 :
18545: LD_VAR 0 4
18549: PUSH
18550: LD_INT 1
18552: DOUBLE
18553: EQUAL
18554: IFTRUE 18558
18556: GO 18569
18558: POP
// tech := tech_lassight ; 2 :
18559: LD_ADDR_VAR 0 5
18563: PUSH
18564: LD_INT 12
18566: ST_TO_ADDR
18567: GO 18608
18569: LD_INT 2
18571: DOUBLE
18572: EQUAL
18573: IFTRUE 18577
18575: GO 18588
18577: POP
// tech := tech_mortar ; 3 :
18578: LD_ADDR_VAR 0 5
18582: PUSH
18583: LD_INT 41
18585: ST_TO_ADDR
18586: GO 18608
18588: LD_INT 3
18590: DOUBLE
18591: EQUAL
18592: IFTRUE 18596
18594: GO 18607
18596: POP
// tech := tech_bazooka ; end ;
18597: LD_ADDR_VAR 0 5
18601: PUSH
18602: LD_INT 44
18604: ST_TO_ADDR
18605: GO 18608
18607: POP
// if Researched ( side , tech ) then
18608: LD_VAR 0 3
18612: PPUSH
18613: LD_VAR 0 5
18617: PPUSH
18618: CALL_OW 325
18622: IFFALSE 18649
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18624: LD_ADDR_VAR 0 2
18628: PUSH
18629: LD_INT 5
18631: PUSH
18632: LD_INT 8
18634: PUSH
18635: LD_INT 9
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: LIST
18642: PUSH
18643: LD_VAR 0 4
18647: ARRAY
18648: ST_TO_ADDR
// end ;
18649: LD_VAR 0 2
18653: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18654: LD_INT 0
18656: PPUSH
18657: PPUSH
18658: PPUSH
// if not mines then
18659: LD_VAR 0 2
18663: NOT
18664: IFFALSE 18668
// exit ;
18666: GO 18812
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18668: LD_ADDR_VAR 0 5
18672: PUSH
18673: LD_INT 81
18675: PUSH
18676: LD_VAR 0 1
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 3
18687: PUSH
18688: LD_INT 21
18690: PUSH
18691: LD_INT 3
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PPUSH
18706: CALL_OW 69
18710: ST_TO_ADDR
// for i in mines do
18711: LD_ADDR_VAR 0 4
18715: PUSH
18716: LD_VAR 0 2
18720: PUSH
18721: FOR_IN
18722: IFFALSE 18810
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18724: LD_VAR 0 4
18728: PUSH
18729: LD_INT 1
18731: ARRAY
18732: PPUSH
18733: LD_VAR 0 4
18737: PUSH
18738: LD_INT 2
18740: ARRAY
18741: PPUSH
18742: CALL_OW 458
18746: NOT
18747: IFFALSE 18751
// continue ;
18749: GO 18721
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18751: LD_VAR 0 4
18755: PUSH
18756: LD_INT 1
18758: ARRAY
18759: PPUSH
18760: LD_VAR 0 4
18764: PUSH
18765: LD_INT 2
18767: ARRAY
18768: PPUSH
18769: CALL_OW 428
18773: PUSH
18774: LD_VAR 0 5
18778: IN
18779: IFFALSE 18808
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18781: LD_VAR 0 4
18785: PUSH
18786: LD_INT 1
18788: ARRAY
18789: PPUSH
18790: LD_VAR 0 4
18794: PUSH
18795: LD_INT 2
18797: ARRAY
18798: PPUSH
18799: LD_VAR 0 1
18803: PPUSH
18804: CALL_OW 456
// end ;
18808: GO 18721
18810: POP
18811: POP
// end ;
18812: LD_VAR 0 3
18816: RET
// export function Count ( array ) ; begin
18817: LD_INT 0
18819: PPUSH
// result := array + 0 ;
18820: LD_ADDR_VAR 0 2
18824: PUSH
18825: LD_VAR 0 1
18829: PUSH
18830: LD_INT 0
18832: PLUS
18833: ST_TO_ADDR
// end ;
18834: LD_VAR 0 2
18838: RET
// export function IsEmpty ( building ) ; begin
18839: LD_INT 0
18841: PPUSH
// if not building then
18842: LD_VAR 0 1
18846: NOT
18847: IFFALSE 18851
// exit ;
18849: GO 18894
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18851: LD_ADDR_VAR 0 2
18855: PUSH
18856: LD_VAR 0 1
18860: PUSH
18861: LD_INT 22
18863: PUSH
18864: LD_VAR 0 1
18868: PPUSH
18869: CALL_OW 255
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 58
18880: PUSH
18881: EMPTY
18882: LIST
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PPUSH
18888: CALL_OW 69
18892: IN
18893: ST_TO_ADDR
// end ;
18894: LD_VAR 0 2
18898: RET
// export function IsNotFull ( building ) ; var places ; begin
18899: LD_INT 0
18901: PPUSH
18902: PPUSH
// if not building then
18903: LD_VAR 0 1
18907: NOT
18908: IFFALSE 18912
// exit ;
18910: GO 18940
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18912: LD_ADDR_VAR 0 2
18916: PUSH
18917: LD_VAR 0 1
18921: PPUSH
18922: LD_INT 3
18924: PUSH
18925: LD_INT 62
18927: PUSH
18928: EMPTY
18929: LIST
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PPUSH
18935: CALL_OW 72
18939: ST_TO_ADDR
// end ;
18940: LD_VAR 0 2
18944: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18945: LD_INT 0
18947: PPUSH
18948: PPUSH
18949: PPUSH
18950: PPUSH
// tmp := [ ] ;
18951: LD_ADDR_VAR 0 3
18955: PUSH
18956: EMPTY
18957: ST_TO_ADDR
// list := [ ] ;
18958: LD_ADDR_VAR 0 5
18962: PUSH
18963: EMPTY
18964: ST_TO_ADDR
// for i = 16 to 25 do
18965: LD_ADDR_VAR 0 4
18969: PUSH
18970: DOUBLE
18971: LD_INT 16
18973: DEC
18974: ST_TO_ADDR
18975: LD_INT 25
18977: PUSH
18978: FOR_TO
18979: IFFALSE 19052
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18981: LD_ADDR_VAR 0 3
18985: PUSH
18986: LD_VAR 0 3
18990: PUSH
18991: LD_INT 22
18993: PUSH
18994: LD_VAR 0 1
18998: PPUSH
18999: CALL_OW 255
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 91
19010: PUSH
19011: LD_VAR 0 1
19015: PUSH
19016: LD_INT 6
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 30
19026: PUSH
19027: LD_VAR 0 4
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: LIST
19040: PUSH
19041: EMPTY
19042: LIST
19043: PPUSH
19044: CALL_OW 69
19048: ADD
19049: ST_TO_ADDR
19050: GO 18978
19052: POP
19053: POP
// for i = 1 to tmp do
19054: LD_ADDR_VAR 0 4
19058: PUSH
19059: DOUBLE
19060: LD_INT 1
19062: DEC
19063: ST_TO_ADDR
19064: LD_VAR 0 3
19068: PUSH
19069: FOR_TO
19070: IFFALSE 19158
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19072: LD_ADDR_VAR 0 5
19076: PUSH
19077: LD_VAR 0 5
19081: PUSH
19082: LD_VAR 0 3
19086: PUSH
19087: LD_VAR 0 4
19091: ARRAY
19092: PPUSH
19093: CALL_OW 266
19097: PUSH
19098: LD_VAR 0 3
19102: PUSH
19103: LD_VAR 0 4
19107: ARRAY
19108: PPUSH
19109: CALL_OW 250
19113: PUSH
19114: LD_VAR 0 3
19118: PUSH
19119: LD_VAR 0 4
19123: ARRAY
19124: PPUSH
19125: CALL_OW 251
19129: PUSH
19130: LD_VAR 0 3
19134: PUSH
19135: LD_VAR 0 4
19139: ARRAY
19140: PPUSH
19141: CALL_OW 254
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: PUSH
19152: EMPTY
19153: LIST
19154: ADD
19155: ST_TO_ADDR
19156: GO 19069
19158: POP
19159: POP
// result := list ;
19160: LD_ADDR_VAR 0 2
19164: PUSH
19165: LD_VAR 0 5
19169: ST_TO_ADDR
// end ;
19170: LD_VAR 0 2
19174: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19175: LD_INT 0
19177: PPUSH
19178: PPUSH
19179: PPUSH
19180: PPUSH
19181: PPUSH
19182: PPUSH
19183: PPUSH
// if not factory then
19184: LD_VAR 0 1
19188: NOT
19189: IFFALSE 19193
// exit ;
19191: GO 19786
// if control = control_apeman then
19193: LD_VAR 0 4
19197: PUSH
19198: LD_INT 5
19200: EQUAL
19201: IFFALSE 19310
// begin tmp := UnitsInside ( factory ) ;
19203: LD_ADDR_VAR 0 8
19207: PUSH
19208: LD_VAR 0 1
19212: PPUSH
19213: CALL_OW 313
19217: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19218: LD_VAR 0 8
19222: PPUSH
19223: LD_INT 25
19225: PUSH
19226: LD_INT 12
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PPUSH
19233: CALL_OW 72
19237: NOT
19238: IFFALSE 19248
// control := control_manual ;
19240: LD_ADDR_VAR 0 4
19244: PUSH
19245: LD_INT 1
19247: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19248: LD_ADDR_VAR 0 8
19252: PUSH
19253: LD_VAR 0 1
19257: PPUSH
19258: CALL 18945 0 1
19262: ST_TO_ADDR
// if tmp then
19263: LD_VAR 0 8
19267: IFFALSE 19310
// begin for i in tmp do
19269: LD_ADDR_VAR 0 7
19273: PUSH
19274: LD_VAR 0 8
19278: PUSH
19279: FOR_IN
19280: IFFALSE 19308
// if i [ 1 ] = b_ext_radio then
19282: LD_VAR 0 7
19286: PUSH
19287: LD_INT 1
19289: ARRAY
19290: PUSH
19291: LD_INT 22
19293: EQUAL
19294: IFFALSE 19306
// begin control := control_remote ;
19296: LD_ADDR_VAR 0 4
19300: PUSH
19301: LD_INT 2
19303: ST_TO_ADDR
// break ;
19304: GO 19308
// end ;
19306: GO 19279
19308: POP
19309: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19310: LD_VAR 0 1
19314: PPUSH
19315: LD_VAR 0 2
19319: PPUSH
19320: LD_VAR 0 3
19324: PPUSH
19325: LD_VAR 0 4
19329: PPUSH
19330: LD_VAR 0 5
19334: PPUSH
19335: CALL_OW 448
19339: IFFALSE 19374
// begin result := [ chassis , engine , control , weapon ] ;
19341: LD_ADDR_VAR 0 6
19345: PUSH
19346: LD_VAR 0 2
19350: PUSH
19351: LD_VAR 0 3
19355: PUSH
19356: LD_VAR 0 4
19360: PUSH
19361: LD_VAR 0 5
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: ST_TO_ADDR
// exit ;
19372: GO 19786
// end ; _chassis := AvailableChassisList ( factory ) ;
19374: LD_ADDR_VAR 0 9
19378: PUSH
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 475
19388: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19389: LD_ADDR_VAR 0 11
19393: PUSH
19394: LD_VAR 0 1
19398: PPUSH
19399: CALL_OW 476
19403: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19404: LD_ADDR_VAR 0 12
19408: PUSH
19409: LD_VAR 0 1
19413: PPUSH
19414: CALL_OW 477
19418: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19419: LD_ADDR_VAR 0 10
19423: PUSH
19424: LD_VAR 0 1
19428: PPUSH
19429: CALL_OW 478
19433: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19434: LD_VAR 0 9
19438: NOT
19439: PUSH
19440: LD_VAR 0 11
19444: NOT
19445: OR
19446: PUSH
19447: LD_VAR 0 12
19451: NOT
19452: OR
19453: PUSH
19454: LD_VAR 0 10
19458: NOT
19459: OR
19460: IFFALSE 19495
// begin result := [ chassis , engine , control , weapon ] ;
19462: LD_ADDR_VAR 0 6
19466: PUSH
19467: LD_VAR 0 2
19471: PUSH
19472: LD_VAR 0 3
19476: PUSH
19477: LD_VAR 0 4
19481: PUSH
19482: LD_VAR 0 5
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: ST_TO_ADDR
// exit ;
19493: GO 19786
// end ; if not chassis in _chassis then
19495: LD_VAR 0 2
19499: PUSH
19500: LD_VAR 0 9
19504: IN
19505: NOT
19506: IFFALSE 19532
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19508: LD_ADDR_VAR 0 2
19512: PUSH
19513: LD_VAR 0 9
19517: PUSH
19518: LD_INT 1
19520: PPUSH
19521: LD_VAR 0 9
19525: PPUSH
19526: CALL_OW 12
19530: ARRAY
19531: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19532: LD_VAR 0 2
19536: PPUSH
19537: LD_VAR 0 3
19541: PPUSH
19542: CALL 19791 0 2
19546: NOT
19547: IFFALSE 19606
// repeat engine := _engine [ 1 ] ;
19549: LD_ADDR_VAR 0 3
19553: PUSH
19554: LD_VAR 0 11
19558: PUSH
19559: LD_INT 1
19561: ARRAY
19562: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19563: LD_ADDR_VAR 0 11
19567: PUSH
19568: LD_VAR 0 11
19572: PPUSH
19573: LD_INT 1
19575: PPUSH
19576: CALL_OW 3
19580: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19581: LD_VAR 0 2
19585: PPUSH
19586: LD_VAR 0 3
19590: PPUSH
19591: CALL 19791 0 2
19595: PUSH
19596: LD_VAR 0 11
19600: PUSH
19601: EMPTY
19602: EQUAL
19603: OR
19604: IFFALSE 19549
// if not control in _control then
19606: LD_VAR 0 4
19610: PUSH
19611: LD_VAR 0 12
19615: IN
19616: NOT
19617: IFFALSE 19643
// control := _control [ rand ( 1 , _control ) ] ;
19619: LD_ADDR_VAR 0 4
19623: PUSH
19624: LD_VAR 0 12
19628: PUSH
19629: LD_INT 1
19631: PPUSH
19632: LD_VAR 0 12
19636: PPUSH
19637: CALL_OW 12
19641: ARRAY
19642: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19643: LD_VAR 0 2
19647: PPUSH
19648: LD_VAR 0 5
19652: PPUSH
19653: CALL 20011 0 2
19657: NOT
19658: IFFALSE 19717
// repeat weapon := _weapon [ 1 ] ;
19660: LD_ADDR_VAR 0 5
19664: PUSH
19665: LD_VAR 0 10
19669: PUSH
19670: LD_INT 1
19672: ARRAY
19673: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19674: LD_ADDR_VAR 0 10
19678: PUSH
19679: LD_VAR 0 10
19683: PPUSH
19684: LD_INT 1
19686: PPUSH
19687: CALL_OW 3
19691: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19692: LD_VAR 0 2
19696: PPUSH
19697: LD_VAR 0 5
19701: PPUSH
19702: CALL 20011 0 2
19706: PUSH
19707: LD_VAR 0 10
19711: PUSH
19712: EMPTY
19713: EQUAL
19714: OR
19715: IFFALSE 19660
// result := [ ] ;
19717: LD_ADDR_VAR 0 6
19721: PUSH
19722: EMPTY
19723: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19724: LD_VAR 0 1
19728: PPUSH
19729: LD_VAR 0 2
19733: PPUSH
19734: LD_VAR 0 3
19738: PPUSH
19739: LD_VAR 0 4
19743: PPUSH
19744: LD_VAR 0 5
19748: PPUSH
19749: CALL_OW 448
19753: IFFALSE 19786
// result := [ chassis , engine , control , weapon ] ;
19755: LD_ADDR_VAR 0 6
19759: PUSH
19760: LD_VAR 0 2
19764: PUSH
19765: LD_VAR 0 3
19769: PUSH
19770: LD_VAR 0 4
19774: PUSH
19775: LD_VAR 0 5
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: ST_TO_ADDR
// end ;
19786: LD_VAR 0 6
19790: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19791: LD_INT 0
19793: PPUSH
// if not chassis or not engine then
19794: LD_VAR 0 1
19798: NOT
19799: PUSH
19800: LD_VAR 0 2
19804: NOT
19805: OR
19806: IFFALSE 19810
// exit ;
19808: GO 20006
// case engine of engine_solar :
19810: LD_VAR 0 2
19814: PUSH
19815: LD_INT 2
19817: DOUBLE
19818: EQUAL
19819: IFTRUE 19823
19821: GO 19861
19823: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19824: LD_ADDR_VAR 0 3
19828: PUSH
19829: LD_INT 11
19831: PUSH
19832: LD_INT 12
19834: PUSH
19835: LD_INT 13
19837: PUSH
19838: LD_INT 14
19840: PUSH
19841: LD_INT 1
19843: PUSH
19844: LD_INT 2
19846: PUSH
19847: LD_INT 3
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: ST_TO_ADDR
19859: GO 19990
19861: LD_INT 1
19863: DOUBLE
19864: EQUAL
19865: IFTRUE 19869
19867: GO 19931
19869: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19870: LD_ADDR_VAR 0 3
19874: PUSH
19875: LD_INT 11
19877: PUSH
19878: LD_INT 12
19880: PUSH
19881: LD_INT 13
19883: PUSH
19884: LD_INT 14
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: LD_INT 2
19892: PUSH
19893: LD_INT 3
19895: PUSH
19896: LD_INT 4
19898: PUSH
19899: LD_INT 5
19901: PUSH
19902: LD_INT 21
19904: PUSH
19905: LD_INT 23
19907: PUSH
19908: LD_INT 22
19910: PUSH
19911: LD_INT 24
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: ST_TO_ADDR
19929: GO 19990
19931: LD_INT 3
19933: DOUBLE
19934: EQUAL
19935: IFTRUE 19939
19937: GO 19989
19939: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19940: LD_ADDR_VAR 0 3
19944: PUSH
19945: LD_INT 13
19947: PUSH
19948: LD_INT 14
19950: PUSH
19951: LD_INT 2
19953: PUSH
19954: LD_INT 3
19956: PUSH
19957: LD_INT 4
19959: PUSH
19960: LD_INT 5
19962: PUSH
19963: LD_INT 21
19965: PUSH
19966: LD_INT 22
19968: PUSH
19969: LD_INT 23
19971: PUSH
19972: LD_INT 24
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: ST_TO_ADDR
19987: GO 19990
19989: POP
// result := ( chassis in result ) ;
19990: LD_ADDR_VAR 0 3
19994: PUSH
19995: LD_VAR 0 1
19999: PUSH
20000: LD_VAR 0 3
20004: IN
20005: ST_TO_ADDR
// end ;
20006: LD_VAR 0 3
20010: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20011: LD_INT 0
20013: PPUSH
// if not chassis or not weapon then
20014: LD_VAR 0 1
20018: NOT
20019: PUSH
20020: LD_VAR 0 2
20024: NOT
20025: OR
20026: IFFALSE 20030
// exit ;
20028: GO 21090
// case weapon of us_machine_gun :
20030: LD_VAR 0 2
20034: PUSH
20035: LD_INT 2
20037: DOUBLE
20038: EQUAL
20039: IFTRUE 20043
20041: GO 20073
20043: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20044: LD_ADDR_VAR 0 3
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: LD_INT 2
20054: PUSH
20055: LD_INT 3
20057: PUSH
20058: LD_INT 4
20060: PUSH
20061: LD_INT 5
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: ST_TO_ADDR
20071: GO 21074
20073: LD_INT 3
20075: DOUBLE
20076: EQUAL
20077: IFTRUE 20081
20079: GO 20111
20081: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20082: LD_ADDR_VAR 0 3
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: LD_INT 2
20092: PUSH
20093: LD_INT 3
20095: PUSH
20096: LD_INT 4
20098: PUSH
20099: LD_INT 5
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: ST_TO_ADDR
20109: GO 21074
20111: LD_INT 11
20113: DOUBLE
20114: EQUAL
20115: IFTRUE 20119
20117: GO 20149
20119: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20120: LD_ADDR_VAR 0 3
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: LD_INT 2
20130: PUSH
20131: LD_INT 3
20133: PUSH
20134: LD_INT 4
20136: PUSH
20137: LD_INT 5
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: ST_TO_ADDR
20147: GO 21074
20149: LD_INT 4
20151: DOUBLE
20152: EQUAL
20153: IFTRUE 20157
20155: GO 20183
20157: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20158: LD_ADDR_VAR 0 3
20162: PUSH
20163: LD_INT 2
20165: PUSH
20166: LD_INT 3
20168: PUSH
20169: LD_INT 4
20171: PUSH
20172: LD_INT 5
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: ST_TO_ADDR
20181: GO 21074
20183: LD_INT 5
20185: DOUBLE
20186: EQUAL
20187: IFTRUE 20191
20189: GO 20217
20191: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20192: LD_ADDR_VAR 0 3
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: LD_INT 3
20202: PUSH
20203: LD_INT 4
20205: PUSH
20206: LD_INT 5
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: ST_TO_ADDR
20215: GO 21074
20217: LD_INT 9
20219: DOUBLE
20220: EQUAL
20221: IFTRUE 20225
20223: GO 20251
20225: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20226: LD_ADDR_VAR 0 3
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: LD_INT 3
20236: PUSH
20237: LD_INT 4
20239: PUSH
20240: LD_INT 5
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: ST_TO_ADDR
20249: GO 21074
20251: LD_INT 7
20253: DOUBLE
20254: EQUAL
20255: IFTRUE 20259
20257: GO 20285
20259: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20260: LD_ADDR_VAR 0 3
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: LD_INT 3
20270: PUSH
20271: LD_INT 4
20273: PUSH
20274: LD_INT 5
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: ST_TO_ADDR
20283: GO 21074
20285: LD_INT 12
20287: DOUBLE
20288: EQUAL
20289: IFTRUE 20293
20291: GO 20319
20293: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20294: LD_ADDR_VAR 0 3
20298: PUSH
20299: LD_INT 2
20301: PUSH
20302: LD_INT 3
20304: PUSH
20305: LD_INT 4
20307: PUSH
20308: LD_INT 5
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: ST_TO_ADDR
20317: GO 21074
20319: LD_INT 13
20321: DOUBLE
20322: EQUAL
20323: IFTRUE 20327
20325: GO 20353
20327: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20328: LD_ADDR_VAR 0 3
20332: PUSH
20333: LD_INT 2
20335: PUSH
20336: LD_INT 3
20338: PUSH
20339: LD_INT 4
20341: PUSH
20342: LD_INT 5
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: ST_TO_ADDR
20351: GO 21074
20353: LD_INT 14
20355: DOUBLE
20356: EQUAL
20357: IFTRUE 20361
20359: GO 20379
20361: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20362: LD_ADDR_VAR 0 3
20366: PUSH
20367: LD_INT 4
20369: PUSH
20370: LD_INT 5
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: ST_TO_ADDR
20377: GO 21074
20379: LD_INT 6
20381: DOUBLE
20382: EQUAL
20383: IFTRUE 20387
20385: GO 20405
20387: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20388: LD_ADDR_VAR 0 3
20392: PUSH
20393: LD_INT 4
20395: PUSH
20396: LD_INT 5
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: ST_TO_ADDR
20403: GO 21074
20405: LD_INT 10
20407: DOUBLE
20408: EQUAL
20409: IFTRUE 20413
20411: GO 20431
20413: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20414: LD_ADDR_VAR 0 3
20418: PUSH
20419: LD_INT 4
20421: PUSH
20422: LD_INT 5
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: ST_TO_ADDR
20429: GO 21074
20431: LD_INT 22
20433: DOUBLE
20434: EQUAL
20435: IFTRUE 20439
20437: GO 20465
20439: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20440: LD_ADDR_VAR 0 3
20444: PUSH
20445: LD_INT 11
20447: PUSH
20448: LD_INT 12
20450: PUSH
20451: LD_INT 13
20453: PUSH
20454: LD_INT 14
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: ST_TO_ADDR
20463: GO 21074
20465: LD_INT 23
20467: DOUBLE
20468: EQUAL
20469: IFTRUE 20473
20471: GO 20499
20473: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20474: LD_ADDR_VAR 0 3
20478: PUSH
20479: LD_INT 11
20481: PUSH
20482: LD_INT 12
20484: PUSH
20485: LD_INT 13
20487: PUSH
20488: LD_INT 14
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: ST_TO_ADDR
20497: GO 21074
20499: LD_INT 24
20501: DOUBLE
20502: EQUAL
20503: IFTRUE 20507
20505: GO 20533
20507: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20508: LD_ADDR_VAR 0 3
20512: PUSH
20513: LD_INT 11
20515: PUSH
20516: LD_INT 12
20518: PUSH
20519: LD_INT 13
20521: PUSH
20522: LD_INT 14
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: ST_TO_ADDR
20531: GO 21074
20533: LD_INT 30
20535: DOUBLE
20536: EQUAL
20537: IFTRUE 20541
20539: GO 20567
20541: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20542: LD_ADDR_VAR 0 3
20546: PUSH
20547: LD_INT 11
20549: PUSH
20550: LD_INT 12
20552: PUSH
20553: LD_INT 13
20555: PUSH
20556: LD_INT 14
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: ST_TO_ADDR
20565: GO 21074
20567: LD_INT 25
20569: DOUBLE
20570: EQUAL
20571: IFTRUE 20575
20573: GO 20593
20575: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20576: LD_ADDR_VAR 0 3
20580: PUSH
20581: LD_INT 13
20583: PUSH
20584: LD_INT 14
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: ST_TO_ADDR
20591: GO 21074
20593: LD_INT 27
20595: DOUBLE
20596: EQUAL
20597: IFTRUE 20601
20599: GO 20619
20601: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20602: LD_ADDR_VAR 0 3
20606: PUSH
20607: LD_INT 13
20609: PUSH
20610: LD_INT 14
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: ST_TO_ADDR
20617: GO 21074
20619: LD_INT 92
20621: DOUBLE
20622: EQUAL
20623: IFTRUE 20627
20625: GO 20653
20627: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20628: LD_ADDR_VAR 0 3
20632: PUSH
20633: LD_INT 11
20635: PUSH
20636: LD_INT 12
20638: PUSH
20639: LD_INT 13
20641: PUSH
20642: LD_INT 14
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: ST_TO_ADDR
20651: GO 21074
20653: LD_INT 28
20655: DOUBLE
20656: EQUAL
20657: IFTRUE 20661
20659: GO 20679
20661: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20662: LD_ADDR_VAR 0 3
20666: PUSH
20667: LD_INT 13
20669: PUSH
20670: LD_INT 14
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: ST_TO_ADDR
20677: GO 21074
20679: LD_INT 29
20681: DOUBLE
20682: EQUAL
20683: IFTRUE 20687
20685: GO 20705
20687: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20688: LD_ADDR_VAR 0 3
20692: PUSH
20693: LD_INT 13
20695: PUSH
20696: LD_INT 14
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: ST_TO_ADDR
20703: GO 21074
20705: LD_INT 31
20707: DOUBLE
20708: EQUAL
20709: IFTRUE 20713
20711: GO 20731
20713: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20714: LD_ADDR_VAR 0 3
20718: PUSH
20719: LD_INT 13
20721: PUSH
20722: LD_INT 14
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: ST_TO_ADDR
20729: GO 21074
20731: LD_INT 26
20733: DOUBLE
20734: EQUAL
20735: IFTRUE 20739
20737: GO 20757
20739: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20740: LD_ADDR_VAR 0 3
20744: PUSH
20745: LD_INT 13
20747: PUSH
20748: LD_INT 14
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: ST_TO_ADDR
20755: GO 21074
20757: LD_INT 42
20759: DOUBLE
20760: EQUAL
20761: IFTRUE 20765
20763: GO 20791
20765: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20766: LD_ADDR_VAR 0 3
20770: PUSH
20771: LD_INT 21
20773: PUSH
20774: LD_INT 22
20776: PUSH
20777: LD_INT 23
20779: PUSH
20780: LD_INT 24
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: ST_TO_ADDR
20789: GO 21074
20791: LD_INT 43
20793: DOUBLE
20794: EQUAL
20795: IFTRUE 20799
20797: GO 20825
20799: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20800: LD_ADDR_VAR 0 3
20804: PUSH
20805: LD_INT 21
20807: PUSH
20808: LD_INT 22
20810: PUSH
20811: LD_INT 23
20813: PUSH
20814: LD_INT 24
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: ST_TO_ADDR
20823: GO 21074
20825: LD_INT 44
20827: DOUBLE
20828: EQUAL
20829: IFTRUE 20833
20831: GO 20859
20833: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20834: LD_ADDR_VAR 0 3
20838: PUSH
20839: LD_INT 21
20841: PUSH
20842: LD_INT 22
20844: PUSH
20845: LD_INT 23
20847: PUSH
20848: LD_INT 24
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: ST_TO_ADDR
20857: GO 21074
20859: LD_INT 45
20861: DOUBLE
20862: EQUAL
20863: IFTRUE 20867
20865: GO 20893
20867: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20868: LD_ADDR_VAR 0 3
20872: PUSH
20873: LD_INT 21
20875: PUSH
20876: LD_INT 22
20878: PUSH
20879: LD_INT 23
20881: PUSH
20882: LD_INT 24
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: ST_TO_ADDR
20891: GO 21074
20893: LD_INT 49
20895: DOUBLE
20896: EQUAL
20897: IFTRUE 20901
20899: GO 20927
20901: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20902: LD_ADDR_VAR 0 3
20906: PUSH
20907: LD_INT 21
20909: PUSH
20910: LD_INT 22
20912: PUSH
20913: LD_INT 23
20915: PUSH
20916: LD_INT 24
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: ST_TO_ADDR
20925: GO 21074
20927: LD_INT 51
20929: DOUBLE
20930: EQUAL
20931: IFTRUE 20935
20933: GO 20961
20935: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20936: LD_ADDR_VAR 0 3
20940: PUSH
20941: LD_INT 21
20943: PUSH
20944: LD_INT 22
20946: PUSH
20947: LD_INT 23
20949: PUSH
20950: LD_INT 24
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: ST_TO_ADDR
20959: GO 21074
20961: LD_INT 52
20963: DOUBLE
20964: EQUAL
20965: IFTRUE 20969
20967: GO 20995
20969: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20970: LD_ADDR_VAR 0 3
20974: PUSH
20975: LD_INT 21
20977: PUSH
20978: LD_INT 22
20980: PUSH
20981: LD_INT 23
20983: PUSH
20984: LD_INT 24
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: ST_TO_ADDR
20993: GO 21074
20995: LD_INT 53
20997: DOUBLE
20998: EQUAL
20999: IFTRUE 21003
21001: GO 21021
21003: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21004: LD_ADDR_VAR 0 3
21008: PUSH
21009: LD_INT 23
21011: PUSH
21012: LD_INT 24
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: ST_TO_ADDR
21019: GO 21074
21021: LD_INT 46
21023: DOUBLE
21024: EQUAL
21025: IFTRUE 21029
21027: GO 21047
21029: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21030: LD_ADDR_VAR 0 3
21034: PUSH
21035: LD_INT 23
21037: PUSH
21038: LD_INT 24
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: ST_TO_ADDR
21045: GO 21074
21047: LD_INT 47
21049: DOUBLE
21050: EQUAL
21051: IFTRUE 21055
21053: GO 21073
21055: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21056: LD_ADDR_VAR 0 3
21060: PUSH
21061: LD_INT 23
21063: PUSH
21064: LD_INT 24
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: ST_TO_ADDR
21071: GO 21074
21073: POP
// result := ( chassis in result ) ;
21074: LD_ADDR_VAR 0 3
21078: PUSH
21079: LD_VAR 0 1
21083: PUSH
21084: LD_VAR 0 3
21088: IN
21089: ST_TO_ADDR
// end ;
21090: LD_VAR 0 3
21094: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21095: LD_INT 0
21097: PPUSH
21098: PPUSH
21099: PPUSH
21100: PPUSH
21101: PPUSH
21102: PPUSH
21103: PPUSH
// result := array ;
21104: LD_ADDR_VAR 0 5
21108: PUSH
21109: LD_VAR 0 1
21113: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21114: LD_VAR 0 1
21118: NOT
21119: PUSH
21120: LD_VAR 0 2
21124: NOT
21125: OR
21126: PUSH
21127: LD_VAR 0 3
21131: NOT
21132: OR
21133: PUSH
21134: LD_VAR 0 2
21138: PUSH
21139: LD_VAR 0 1
21143: GREATER
21144: OR
21145: PUSH
21146: LD_VAR 0 3
21150: PUSH
21151: LD_VAR 0 1
21155: GREATER
21156: OR
21157: IFFALSE 21161
// exit ;
21159: GO 21457
// if direction then
21161: LD_VAR 0 4
21165: IFFALSE 21229
// begin d := 1 ;
21167: LD_ADDR_VAR 0 9
21171: PUSH
21172: LD_INT 1
21174: ST_TO_ADDR
// if i_from > i_to then
21175: LD_VAR 0 2
21179: PUSH
21180: LD_VAR 0 3
21184: GREATER
21185: IFFALSE 21211
// length := ( array - i_from ) + i_to else
21187: LD_ADDR_VAR 0 11
21191: PUSH
21192: LD_VAR 0 1
21196: PUSH
21197: LD_VAR 0 2
21201: MINUS
21202: PUSH
21203: LD_VAR 0 3
21207: PLUS
21208: ST_TO_ADDR
21209: GO 21227
// length := i_to - i_from ;
21211: LD_ADDR_VAR 0 11
21215: PUSH
21216: LD_VAR 0 3
21220: PUSH
21221: LD_VAR 0 2
21225: MINUS
21226: ST_TO_ADDR
// end else
21227: GO 21290
// begin d := - 1 ;
21229: LD_ADDR_VAR 0 9
21233: PUSH
21234: LD_INT 1
21236: NEG
21237: ST_TO_ADDR
// if i_from > i_to then
21238: LD_VAR 0 2
21242: PUSH
21243: LD_VAR 0 3
21247: GREATER
21248: IFFALSE 21268
// length := i_from - i_to else
21250: LD_ADDR_VAR 0 11
21254: PUSH
21255: LD_VAR 0 2
21259: PUSH
21260: LD_VAR 0 3
21264: MINUS
21265: ST_TO_ADDR
21266: GO 21290
// length := ( array - i_to ) + i_from ;
21268: LD_ADDR_VAR 0 11
21272: PUSH
21273: LD_VAR 0 1
21277: PUSH
21278: LD_VAR 0 3
21282: MINUS
21283: PUSH
21284: LD_VAR 0 2
21288: PLUS
21289: ST_TO_ADDR
// end ; if not length then
21290: LD_VAR 0 11
21294: NOT
21295: IFFALSE 21299
// exit ;
21297: GO 21457
// tmp := array ;
21299: LD_ADDR_VAR 0 10
21303: PUSH
21304: LD_VAR 0 1
21308: ST_TO_ADDR
// for i = 1 to length do
21309: LD_ADDR_VAR 0 6
21313: PUSH
21314: DOUBLE
21315: LD_INT 1
21317: DEC
21318: ST_TO_ADDR
21319: LD_VAR 0 11
21323: PUSH
21324: FOR_TO
21325: IFFALSE 21445
// begin for j = 1 to array do
21327: LD_ADDR_VAR 0 7
21331: PUSH
21332: DOUBLE
21333: LD_INT 1
21335: DEC
21336: ST_TO_ADDR
21337: LD_VAR 0 1
21341: PUSH
21342: FOR_TO
21343: IFFALSE 21431
// begin k := j + d ;
21345: LD_ADDR_VAR 0 8
21349: PUSH
21350: LD_VAR 0 7
21354: PUSH
21355: LD_VAR 0 9
21359: PLUS
21360: ST_TO_ADDR
// if k > array then
21361: LD_VAR 0 8
21365: PUSH
21366: LD_VAR 0 1
21370: GREATER
21371: IFFALSE 21381
// k := 1 ;
21373: LD_ADDR_VAR 0 8
21377: PUSH
21378: LD_INT 1
21380: ST_TO_ADDR
// if not k then
21381: LD_VAR 0 8
21385: NOT
21386: IFFALSE 21398
// k := array ;
21388: LD_ADDR_VAR 0 8
21392: PUSH
21393: LD_VAR 0 1
21397: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21398: LD_ADDR_VAR 0 10
21402: PUSH
21403: LD_VAR 0 10
21407: PPUSH
21408: LD_VAR 0 8
21412: PPUSH
21413: LD_VAR 0 1
21417: PUSH
21418: LD_VAR 0 7
21422: ARRAY
21423: PPUSH
21424: CALL_OW 1
21428: ST_TO_ADDR
// end ;
21429: GO 21342
21431: POP
21432: POP
// array := tmp ;
21433: LD_ADDR_VAR 0 1
21437: PUSH
21438: LD_VAR 0 10
21442: ST_TO_ADDR
// end ;
21443: GO 21324
21445: POP
21446: POP
// result := array ;
21447: LD_ADDR_VAR 0 5
21451: PUSH
21452: LD_VAR 0 1
21456: ST_TO_ADDR
// end ;
21457: LD_VAR 0 5
21461: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21462: LD_INT 0
21464: PPUSH
21465: PPUSH
// result := 0 ;
21466: LD_ADDR_VAR 0 3
21470: PUSH
21471: LD_INT 0
21473: ST_TO_ADDR
// if not array or not value in array then
21474: LD_VAR 0 1
21478: NOT
21479: PUSH
21480: LD_VAR 0 2
21484: PUSH
21485: LD_VAR 0 1
21489: IN
21490: NOT
21491: OR
21492: IFFALSE 21496
// exit ;
21494: GO 21550
// for i = 1 to array do
21496: LD_ADDR_VAR 0 4
21500: PUSH
21501: DOUBLE
21502: LD_INT 1
21504: DEC
21505: ST_TO_ADDR
21506: LD_VAR 0 1
21510: PUSH
21511: FOR_TO
21512: IFFALSE 21548
// if value = array [ i ] then
21514: LD_VAR 0 2
21518: PUSH
21519: LD_VAR 0 1
21523: PUSH
21524: LD_VAR 0 4
21528: ARRAY
21529: EQUAL
21530: IFFALSE 21546
// begin result := i ;
21532: LD_ADDR_VAR 0 3
21536: PUSH
21537: LD_VAR 0 4
21541: ST_TO_ADDR
// exit ;
21542: POP
21543: POP
21544: GO 21550
// end ;
21546: GO 21511
21548: POP
21549: POP
// end ;
21550: LD_VAR 0 3
21554: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21555: LD_INT 0
21557: PPUSH
// vc_chassis := chassis ;
21558: LD_ADDR_OWVAR 37
21562: PUSH
21563: LD_VAR 0 1
21567: ST_TO_ADDR
// vc_engine := engine ;
21568: LD_ADDR_OWVAR 39
21572: PUSH
21573: LD_VAR 0 2
21577: ST_TO_ADDR
// vc_control := control ;
21578: LD_ADDR_OWVAR 38
21582: PUSH
21583: LD_VAR 0 3
21587: ST_TO_ADDR
// vc_weapon := weapon ;
21588: LD_ADDR_OWVAR 40
21592: PUSH
21593: LD_VAR 0 4
21597: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21598: LD_ADDR_OWVAR 41
21602: PUSH
21603: LD_VAR 0 5
21607: ST_TO_ADDR
// end ;
21608: LD_VAR 0 6
21612: RET
// export function WantPlant ( unit ) ; var task ; begin
21613: LD_INT 0
21615: PPUSH
21616: PPUSH
// result := false ;
21617: LD_ADDR_VAR 0 2
21621: PUSH
21622: LD_INT 0
21624: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21625: LD_ADDR_VAR 0 3
21629: PUSH
21630: LD_VAR 0 1
21634: PPUSH
21635: CALL_OW 437
21639: ST_TO_ADDR
// if task then
21640: LD_VAR 0 3
21644: IFFALSE 21672
// if task [ 1 ] [ 1 ] = p then
21646: LD_VAR 0 3
21650: PUSH
21651: LD_INT 1
21653: ARRAY
21654: PUSH
21655: LD_INT 1
21657: ARRAY
21658: PUSH
21659: LD_STRING p
21661: EQUAL
21662: IFFALSE 21672
// result := true ;
21664: LD_ADDR_VAR 0 2
21668: PUSH
21669: LD_INT 1
21671: ST_TO_ADDR
// end ;
21672: LD_VAR 0 2
21676: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21677: LD_INT 0
21679: PPUSH
21680: PPUSH
21681: PPUSH
21682: PPUSH
// if pos < 1 then
21683: LD_VAR 0 2
21687: PUSH
21688: LD_INT 1
21690: LESS
21691: IFFALSE 21695
// exit ;
21693: GO 21998
// if pos = 1 then
21695: LD_VAR 0 2
21699: PUSH
21700: LD_INT 1
21702: EQUAL
21703: IFFALSE 21736
// result := Replace ( arr , pos [ 1 ] , value ) else
21705: LD_ADDR_VAR 0 4
21709: PUSH
21710: LD_VAR 0 1
21714: PPUSH
21715: LD_VAR 0 2
21719: PUSH
21720: LD_INT 1
21722: ARRAY
21723: PPUSH
21724: LD_VAR 0 3
21728: PPUSH
21729: CALL_OW 1
21733: ST_TO_ADDR
21734: GO 21998
// begin tmp := arr ;
21736: LD_ADDR_VAR 0 6
21740: PUSH
21741: LD_VAR 0 1
21745: ST_TO_ADDR
// s_arr := [ tmp ] ;
21746: LD_ADDR_VAR 0 7
21750: PUSH
21751: LD_VAR 0 6
21755: PUSH
21756: EMPTY
21757: LIST
21758: ST_TO_ADDR
// for i = 1 to pos - 1 do
21759: LD_ADDR_VAR 0 5
21763: PUSH
21764: DOUBLE
21765: LD_INT 1
21767: DEC
21768: ST_TO_ADDR
21769: LD_VAR 0 2
21773: PUSH
21774: LD_INT 1
21776: MINUS
21777: PUSH
21778: FOR_TO
21779: IFFALSE 21824
// begin tmp := tmp [ pos [ i ] ] ;
21781: LD_ADDR_VAR 0 6
21785: PUSH
21786: LD_VAR 0 6
21790: PUSH
21791: LD_VAR 0 2
21795: PUSH
21796: LD_VAR 0 5
21800: ARRAY
21801: ARRAY
21802: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21803: LD_ADDR_VAR 0 7
21807: PUSH
21808: LD_VAR 0 7
21812: PUSH
21813: LD_VAR 0 6
21817: PUSH
21818: EMPTY
21819: LIST
21820: ADD
21821: ST_TO_ADDR
// end ;
21822: GO 21778
21824: POP
21825: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21826: LD_ADDR_VAR 0 6
21830: PUSH
21831: LD_VAR 0 6
21835: PPUSH
21836: LD_VAR 0 2
21840: PUSH
21841: LD_VAR 0 2
21845: ARRAY
21846: PPUSH
21847: LD_VAR 0 3
21851: PPUSH
21852: CALL_OW 1
21856: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21857: LD_ADDR_VAR 0 7
21861: PUSH
21862: LD_VAR 0 7
21866: PPUSH
21867: LD_VAR 0 7
21871: PPUSH
21872: LD_VAR 0 6
21876: PPUSH
21877: CALL_OW 1
21881: ST_TO_ADDR
// for i = s_arr downto 2 do
21882: LD_ADDR_VAR 0 5
21886: PUSH
21887: DOUBLE
21888: LD_VAR 0 7
21892: INC
21893: ST_TO_ADDR
21894: LD_INT 2
21896: PUSH
21897: FOR_DOWNTO
21898: IFFALSE 21982
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21900: LD_ADDR_VAR 0 6
21904: PUSH
21905: LD_VAR 0 7
21909: PUSH
21910: LD_VAR 0 5
21914: PUSH
21915: LD_INT 1
21917: MINUS
21918: ARRAY
21919: PPUSH
21920: LD_VAR 0 2
21924: PUSH
21925: LD_VAR 0 5
21929: PUSH
21930: LD_INT 1
21932: MINUS
21933: ARRAY
21934: PPUSH
21935: LD_VAR 0 7
21939: PUSH
21940: LD_VAR 0 5
21944: ARRAY
21945: PPUSH
21946: CALL_OW 1
21950: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21951: LD_ADDR_VAR 0 7
21955: PUSH
21956: LD_VAR 0 7
21960: PPUSH
21961: LD_VAR 0 5
21965: PUSH
21966: LD_INT 1
21968: MINUS
21969: PPUSH
21970: LD_VAR 0 6
21974: PPUSH
21975: CALL_OW 1
21979: ST_TO_ADDR
// end ;
21980: GO 21897
21982: POP
21983: POP
// result := s_arr [ 1 ] ;
21984: LD_ADDR_VAR 0 4
21988: PUSH
21989: LD_VAR 0 7
21993: PUSH
21994: LD_INT 1
21996: ARRAY
21997: ST_TO_ADDR
// end ; end ;
21998: LD_VAR 0 4
22002: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22003: LD_INT 0
22005: PPUSH
22006: PPUSH
// if not list then
22007: LD_VAR 0 1
22011: NOT
22012: IFFALSE 22016
// exit ;
22014: GO 22107
// i := list [ pos1 ] ;
22016: LD_ADDR_VAR 0 5
22020: PUSH
22021: LD_VAR 0 1
22025: PUSH
22026: LD_VAR 0 2
22030: ARRAY
22031: ST_TO_ADDR
// if not i then
22032: LD_VAR 0 5
22036: NOT
22037: IFFALSE 22041
// exit ;
22039: GO 22107
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22041: LD_ADDR_VAR 0 1
22045: PUSH
22046: LD_VAR 0 1
22050: PPUSH
22051: LD_VAR 0 2
22055: PPUSH
22056: LD_VAR 0 1
22060: PUSH
22061: LD_VAR 0 3
22065: ARRAY
22066: PPUSH
22067: CALL_OW 1
22071: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22072: LD_ADDR_VAR 0 1
22076: PUSH
22077: LD_VAR 0 1
22081: PPUSH
22082: LD_VAR 0 3
22086: PPUSH
22087: LD_VAR 0 5
22091: PPUSH
22092: CALL_OW 1
22096: ST_TO_ADDR
// result := list ;
22097: LD_ADDR_VAR 0 4
22101: PUSH
22102: LD_VAR 0 1
22106: ST_TO_ADDR
// end ;
22107: LD_VAR 0 4
22111: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22112: LD_INT 0
22114: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22115: LD_ADDR_VAR 0 5
22119: PUSH
22120: LD_VAR 0 1
22124: PPUSH
22125: CALL_OW 250
22129: PPUSH
22130: LD_VAR 0 1
22134: PPUSH
22135: CALL_OW 251
22139: PPUSH
22140: LD_VAR 0 2
22144: PPUSH
22145: LD_VAR 0 3
22149: PPUSH
22150: LD_VAR 0 4
22154: PPUSH
22155: CALL 22533 0 5
22159: ST_TO_ADDR
// end ;
22160: LD_VAR 0 5
22164: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22165: LD_INT 0
22167: PPUSH
22168: PPUSH
22169: PPUSH
22170: PPUSH
// if not list or not unit then
22171: LD_VAR 0 2
22175: NOT
22176: PUSH
22177: LD_VAR 0 1
22181: NOT
22182: OR
22183: IFFALSE 22187
// exit ;
22185: GO 22528
// result := [ ] ;
22187: LD_ADDR_VAR 0 5
22191: PUSH
22192: EMPTY
22193: ST_TO_ADDR
// for i in list do
22194: LD_ADDR_VAR 0 6
22198: PUSH
22199: LD_VAR 0 2
22203: PUSH
22204: FOR_IN
22205: IFFALSE 22423
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22207: LD_ADDR_VAR 0 8
22211: PUSH
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_VAR 0 6
22221: PUSH
22222: LD_INT 1
22224: ARRAY
22225: PPUSH
22226: LD_VAR 0 6
22230: PUSH
22231: LD_INT 2
22233: ARRAY
22234: PPUSH
22235: CALL_OW 297
22239: ST_TO_ADDR
// if not Count ( result ) then
22240: LD_VAR 0 5
22244: PPUSH
22245: CALL 18817 0 1
22249: NOT
22250: IFFALSE 22283
// begin result := Join ( result , [ i , tmp ] ) ;
22252: LD_ADDR_VAR 0 5
22256: PUSH
22257: LD_VAR 0 5
22261: PPUSH
22262: LD_VAR 0 6
22266: PUSH
22267: LD_VAR 0 8
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PPUSH
22276: CALL 54406 0 2
22280: ST_TO_ADDR
// continue ;
22281: GO 22204
// end ; if result [ result ] [ 2 ] <= tmp then
22283: LD_VAR 0 5
22287: PUSH
22288: LD_VAR 0 5
22292: ARRAY
22293: PUSH
22294: LD_INT 2
22296: ARRAY
22297: PUSH
22298: LD_VAR 0 8
22302: LESSEQUAL
22303: IFFALSE 22336
// result := Join ( result , [ i , tmp ] ) else
22305: LD_ADDR_VAR 0 5
22309: PUSH
22310: LD_VAR 0 5
22314: PPUSH
22315: LD_VAR 0 6
22319: PUSH
22320: LD_VAR 0 8
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PPUSH
22329: CALL 54406 0 2
22333: ST_TO_ADDR
22334: GO 22421
// begin for j := 1 to Count ( result ) do
22336: LD_ADDR_VAR 0 7
22340: PUSH
22341: DOUBLE
22342: LD_INT 1
22344: DEC
22345: ST_TO_ADDR
22346: LD_VAR 0 5
22350: PPUSH
22351: CALL 18817 0 1
22355: PUSH
22356: FOR_TO
22357: IFFALSE 22419
// begin if tmp < result [ j ] [ 2 ] then
22359: LD_VAR 0 8
22363: PUSH
22364: LD_VAR 0 5
22368: PUSH
22369: LD_VAR 0 7
22373: ARRAY
22374: PUSH
22375: LD_INT 2
22377: ARRAY
22378: LESS
22379: IFFALSE 22417
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22381: LD_ADDR_VAR 0 5
22385: PUSH
22386: LD_VAR 0 5
22390: PPUSH
22391: LD_VAR 0 7
22395: PPUSH
22396: LD_VAR 0 6
22400: PUSH
22401: LD_VAR 0 8
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PPUSH
22410: CALL_OW 2
22414: ST_TO_ADDR
// break ;
22415: GO 22419
// end ; end ;
22417: GO 22356
22419: POP
22420: POP
// end ; end ;
22421: GO 22204
22423: POP
22424: POP
// if result and not asc then
22425: LD_VAR 0 5
22429: PUSH
22430: LD_VAR 0 3
22434: NOT
22435: AND
22436: IFFALSE 22453
// result := ReverseArray ( result ) ;
22438: LD_ADDR_VAR 0 5
22442: PUSH
22443: LD_VAR 0 5
22447: PPUSH
22448: CALL 49693 0 1
22452: ST_TO_ADDR
// tmp := [ ] ;
22453: LD_ADDR_VAR 0 8
22457: PUSH
22458: EMPTY
22459: ST_TO_ADDR
// if mode then
22460: LD_VAR 0 4
22464: IFFALSE 22528
// begin for i := 1 to result do
22466: LD_ADDR_VAR 0 6
22470: PUSH
22471: DOUBLE
22472: LD_INT 1
22474: DEC
22475: ST_TO_ADDR
22476: LD_VAR 0 5
22480: PUSH
22481: FOR_TO
22482: IFFALSE 22516
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22484: LD_ADDR_VAR 0 8
22488: PUSH
22489: LD_VAR 0 8
22493: PPUSH
22494: LD_VAR 0 5
22498: PUSH
22499: LD_VAR 0 6
22503: ARRAY
22504: PUSH
22505: LD_INT 1
22507: ARRAY
22508: PPUSH
22509: CALL 54406 0 2
22513: ST_TO_ADDR
22514: GO 22481
22516: POP
22517: POP
// result := tmp ;
22518: LD_ADDR_VAR 0 5
22522: PUSH
22523: LD_VAR 0 8
22527: ST_TO_ADDR
// end ; end ;
22528: LD_VAR 0 5
22532: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22533: LD_INT 0
22535: PPUSH
22536: PPUSH
22537: PPUSH
22538: PPUSH
// if not list then
22539: LD_VAR 0 3
22543: NOT
22544: IFFALSE 22548
// exit ;
22546: GO 22936
// result := [ ] ;
22548: LD_ADDR_VAR 0 6
22552: PUSH
22553: EMPTY
22554: ST_TO_ADDR
// for i in list do
22555: LD_ADDR_VAR 0 7
22559: PUSH
22560: LD_VAR 0 3
22564: PUSH
22565: FOR_IN
22566: IFFALSE 22768
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22568: LD_ADDR_VAR 0 9
22572: PUSH
22573: LD_VAR 0 7
22577: PPUSH
22578: LD_VAR 0 1
22582: PPUSH
22583: LD_VAR 0 2
22587: PPUSH
22588: CALL_OW 297
22592: ST_TO_ADDR
// if not result then
22593: LD_VAR 0 6
22597: NOT
22598: IFFALSE 22624
// result := [ [ i , tmp ] ] else
22600: LD_ADDR_VAR 0 6
22604: PUSH
22605: LD_VAR 0 7
22609: PUSH
22610: LD_VAR 0 9
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: EMPTY
22620: LIST
22621: ST_TO_ADDR
22622: GO 22766
// begin if result [ result ] [ 2 ] < tmp then
22624: LD_VAR 0 6
22628: PUSH
22629: LD_VAR 0 6
22633: ARRAY
22634: PUSH
22635: LD_INT 2
22637: ARRAY
22638: PUSH
22639: LD_VAR 0 9
22643: LESS
22644: IFFALSE 22686
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22646: LD_ADDR_VAR 0 6
22650: PUSH
22651: LD_VAR 0 6
22655: PPUSH
22656: LD_VAR 0 6
22660: PUSH
22661: LD_INT 1
22663: PLUS
22664: PPUSH
22665: LD_VAR 0 7
22669: PUSH
22670: LD_VAR 0 9
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PPUSH
22679: CALL_OW 2
22683: ST_TO_ADDR
22684: GO 22766
// for j = 1 to result do
22686: LD_ADDR_VAR 0 8
22690: PUSH
22691: DOUBLE
22692: LD_INT 1
22694: DEC
22695: ST_TO_ADDR
22696: LD_VAR 0 6
22700: PUSH
22701: FOR_TO
22702: IFFALSE 22764
// begin if tmp < result [ j ] [ 2 ] then
22704: LD_VAR 0 9
22708: PUSH
22709: LD_VAR 0 6
22713: PUSH
22714: LD_VAR 0 8
22718: ARRAY
22719: PUSH
22720: LD_INT 2
22722: ARRAY
22723: LESS
22724: IFFALSE 22762
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22726: LD_ADDR_VAR 0 6
22730: PUSH
22731: LD_VAR 0 6
22735: PPUSH
22736: LD_VAR 0 8
22740: PPUSH
22741: LD_VAR 0 7
22745: PUSH
22746: LD_VAR 0 9
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PPUSH
22755: CALL_OW 2
22759: ST_TO_ADDR
// break ;
22760: GO 22764
// end ; end ;
22762: GO 22701
22764: POP
22765: POP
// end ; end ;
22766: GO 22565
22768: POP
22769: POP
// if result and not asc then
22770: LD_VAR 0 6
22774: PUSH
22775: LD_VAR 0 4
22779: NOT
22780: AND
22781: IFFALSE 22856
// begin tmp := result ;
22783: LD_ADDR_VAR 0 9
22787: PUSH
22788: LD_VAR 0 6
22792: ST_TO_ADDR
// for i = tmp downto 1 do
22793: LD_ADDR_VAR 0 7
22797: PUSH
22798: DOUBLE
22799: LD_VAR 0 9
22803: INC
22804: ST_TO_ADDR
22805: LD_INT 1
22807: PUSH
22808: FOR_DOWNTO
22809: IFFALSE 22854
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22811: LD_ADDR_VAR 0 6
22815: PUSH
22816: LD_VAR 0 6
22820: PPUSH
22821: LD_VAR 0 9
22825: PUSH
22826: LD_VAR 0 7
22830: MINUS
22831: PUSH
22832: LD_INT 1
22834: PLUS
22835: PPUSH
22836: LD_VAR 0 9
22840: PUSH
22841: LD_VAR 0 7
22845: ARRAY
22846: PPUSH
22847: CALL_OW 1
22851: ST_TO_ADDR
22852: GO 22808
22854: POP
22855: POP
// end ; tmp := [ ] ;
22856: LD_ADDR_VAR 0 9
22860: PUSH
22861: EMPTY
22862: ST_TO_ADDR
// if mode then
22863: LD_VAR 0 5
22867: IFFALSE 22936
// begin for i = 1 to result do
22869: LD_ADDR_VAR 0 7
22873: PUSH
22874: DOUBLE
22875: LD_INT 1
22877: DEC
22878: ST_TO_ADDR
22879: LD_VAR 0 6
22883: PUSH
22884: FOR_TO
22885: IFFALSE 22924
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22887: LD_ADDR_VAR 0 9
22891: PUSH
22892: LD_VAR 0 9
22896: PPUSH
22897: LD_VAR 0 7
22901: PPUSH
22902: LD_VAR 0 6
22906: PUSH
22907: LD_VAR 0 7
22911: ARRAY
22912: PUSH
22913: LD_INT 1
22915: ARRAY
22916: PPUSH
22917: CALL_OW 1
22921: ST_TO_ADDR
22922: GO 22884
22924: POP
22925: POP
// result := tmp ;
22926: LD_ADDR_VAR 0 6
22930: PUSH
22931: LD_VAR 0 9
22935: ST_TO_ADDR
// end ; end ;
22936: LD_VAR 0 6
22940: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22941: LD_INT 0
22943: PPUSH
22944: PPUSH
22945: PPUSH
22946: PPUSH
22947: PPUSH
22948: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22949: LD_ADDR_VAR 0 5
22953: PUSH
22954: LD_INT 0
22956: PUSH
22957: LD_INT 0
22959: PUSH
22960: LD_INT 0
22962: PUSH
22963: EMPTY
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: ST_TO_ADDR
// if not x or not y then
22971: LD_VAR 0 2
22975: NOT
22976: PUSH
22977: LD_VAR 0 3
22981: NOT
22982: OR
22983: IFFALSE 22987
// exit ;
22985: GO 24637
// if not range then
22987: LD_VAR 0 4
22991: NOT
22992: IFFALSE 23002
// range := 10 ;
22994: LD_ADDR_VAR 0 4
22998: PUSH
22999: LD_INT 10
23001: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23002: LD_ADDR_VAR 0 8
23006: PUSH
23007: LD_INT 81
23009: PUSH
23010: LD_VAR 0 1
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 92
23021: PUSH
23022: LD_VAR 0 2
23026: PUSH
23027: LD_VAR 0 3
23031: PUSH
23032: LD_VAR 0 4
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 3
23045: PUSH
23046: LD_INT 21
23048: PUSH
23049: LD_INT 3
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: LIST
23064: PPUSH
23065: CALL_OW 69
23069: ST_TO_ADDR
// if not tmp then
23070: LD_VAR 0 8
23074: NOT
23075: IFFALSE 23079
// exit ;
23077: GO 24637
// for i in tmp do
23079: LD_ADDR_VAR 0 6
23083: PUSH
23084: LD_VAR 0 8
23088: PUSH
23089: FOR_IN
23090: IFFALSE 24612
// begin points := [ 0 , 0 , 0 ] ;
23092: LD_ADDR_VAR 0 9
23096: PUSH
23097: LD_INT 0
23099: PUSH
23100: LD_INT 0
23102: PUSH
23103: LD_INT 0
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: LIST
23110: ST_TO_ADDR
// bpoints := 1 ;
23111: LD_ADDR_VAR 0 10
23115: PUSH
23116: LD_INT 1
23118: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23119: LD_VAR 0 6
23123: PPUSH
23124: CALL_OW 247
23128: PUSH
23129: LD_INT 1
23131: DOUBLE
23132: EQUAL
23133: IFTRUE 23137
23135: GO 23715
23137: POP
// begin if GetClass ( i ) = 1 then
23138: LD_VAR 0 6
23142: PPUSH
23143: CALL_OW 257
23147: PUSH
23148: LD_INT 1
23150: EQUAL
23151: IFFALSE 23172
// points := [ 10 , 5 , 3 ] ;
23153: LD_ADDR_VAR 0 9
23157: PUSH
23158: LD_INT 10
23160: PUSH
23161: LD_INT 5
23163: PUSH
23164: LD_INT 3
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: LIST
23171: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23172: LD_VAR 0 6
23176: PPUSH
23177: CALL_OW 257
23181: PUSH
23182: LD_INT 2
23184: PUSH
23185: LD_INT 3
23187: PUSH
23188: LD_INT 4
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: IN
23196: IFFALSE 23217
// points := [ 3 , 2 , 1 ] ;
23198: LD_ADDR_VAR 0 9
23202: PUSH
23203: LD_INT 3
23205: PUSH
23206: LD_INT 2
23208: PUSH
23209: LD_INT 1
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: LIST
23216: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23217: LD_VAR 0 6
23221: PPUSH
23222: CALL_OW 257
23226: PUSH
23227: LD_INT 5
23229: EQUAL
23230: IFFALSE 23251
// points := [ 130 , 5 , 2 ] ;
23232: LD_ADDR_VAR 0 9
23236: PUSH
23237: LD_INT 130
23239: PUSH
23240: LD_INT 5
23242: PUSH
23243: LD_INT 2
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: LIST
23250: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23251: LD_VAR 0 6
23255: PPUSH
23256: CALL_OW 257
23260: PUSH
23261: LD_INT 8
23263: EQUAL
23264: IFFALSE 23285
// points := [ 35 , 35 , 30 ] ;
23266: LD_ADDR_VAR 0 9
23270: PUSH
23271: LD_INT 35
23273: PUSH
23274: LD_INT 35
23276: PUSH
23277: LD_INT 30
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23285: LD_VAR 0 6
23289: PPUSH
23290: CALL_OW 257
23294: PUSH
23295: LD_INT 9
23297: EQUAL
23298: IFFALSE 23319
// points := [ 20 , 55 , 40 ] ;
23300: LD_ADDR_VAR 0 9
23304: PUSH
23305: LD_INT 20
23307: PUSH
23308: LD_INT 55
23310: PUSH
23311: LD_INT 40
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: LIST
23318: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23319: LD_VAR 0 6
23323: PPUSH
23324: CALL_OW 257
23328: PUSH
23329: LD_INT 12
23331: PUSH
23332: LD_INT 16
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: IN
23339: IFFALSE 23360
// points := [ 5 , 3 , 2 ] ;
23341: LD_ADDR_VAR 0 9
23345: PUSH
23346: LD_INT 5
23348: PUSH
23349: LD_INT 3
23351: PUSH
23352: LD_INT 2
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: LIST
23359: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23360: LD_VAR 0 6
23364: PPUSH
23365: CALL_OW 257
23369: PUSH
23370: LD_INT 17
23372: EQUAL
23373: IFFALSE 23394
// points := [ 100 , 50 , 75 ] ;
23375: LD_ADDR_VAR 0 9
23379: PUSH
23380: LD_INT 100
23382: PUSH
23383: LD_INT 50
23385: PUSH
23386: LD_INT 75
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: LIST
23393: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23394: LD_VAR 0 6
23398: PPUSH
23399: CALL_OW 257
23403: PUSH
23404: LD_INT 15
23406: EQUAL
23407: IFFALSE 23428
// points := [ 10 , 5 , 3 ] ;
23409: LD_ADDR_VAR 0 9
23413: PUSH
23414: LD_INT 10
23416: PUSH
23417: LD_INT 5
23419: PUSH
23420: LD_INT 3
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: LIST
23427: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23428: LD_VAR 0 6
23432: PPUSH
23433: CALL_OW 257
23437: PUSH
23438: LD_INT 14
23440: EQUAL
23441: IFFALSE 23462
// points := [ 10 , 0 , 0 ] ;
23443: LD_ADDR_VAR 0 9
23447: PUSH
23448: LD_INT 10
23450: PUSH
23451: LD_INT 0
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: LIST
23461: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23462: LD_VAR 0 6
23466: PPUSH
23467: CALL_OW 257
23471: PUSH
23472: LD_INT 11
23474: EQUAL
23475: IFFALSE 23496
// points := [ 30 , 10 , 5 ] ;
23477: LD_ADDR_VAR 0 9
23481: PUSH
23482: LD_INT 30
23484: PUSH
23485: LD_INT 10
23487: PUSH
23488: LD_INT 5
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: LIST
23495: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23496: LD_VAR 0 1
23500: PPUSH
23501: LD_INT 5
23503: PPUSH
23504: CALL_OW 321
23508: PUSH
23509: LD_INT 2
23511: EQUAL
23512: IFFALSE 23529
// bpoints := bpoints * 1.8 ;
23514: LD_ADDR_VAR 0 10
23518: PUSH
23519: LD_VAR 0 10
23523: PUSH
23524: LD_REAL  1.80000000000000E+0000
23527: MUL
23528: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23529: LD_VAR 0 6
23533: PPUSH
23534: CALL_OW 257
23538: PUSH
23539: LD_INT 1
23541: PUSH
23542: LD_INT 2
23544: PUSH
23545: LD_INT 3
23547: PUSH
23548: LD_INT 4
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: IN
23557: PUSH
23558: LD_VAR 0 1
23562: PPUSH
23563: LD_INT 51
23565: PPUSH
23566: CALL_OW 321
23570: PUSH
23571: LD_INT 2
23573: EQUAL
23574: AND
23575: IFFALSE 23592
// bpoints := bpoints * 1.2 ;
23577: LD_ADDR_VAR 0 10
23581: PUSH
23582: LD_VAR 0 10
23586: PUSH
23587: LD_REAL  1.20000000000000E+0000
23590: MUL
23591: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23592: LD_VAR 0 6
23596: PPUSH
23597: CALL_OW 257
23601: PUSH
23602: LD_INT 5
23604: PUSH
23605: LD_INT 7
23607: PUSH
23608: LD_INT 9
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: IN
23616: PUSH
23617: LD_VAR 0 1
23621: PPUSH
23622: LD_INT 52
23624: PPUSH
23625: CALL_OW 321
23629: PUSH
23630: LD_INT 2
23632: EQUAL
23633: AND
23634: IFFALSE 23651
// bpoints := bpoints * 1.5 ;
23636: LD_ADDR_VAR 0 10
23640: PUSH
23641: LD_VAR 0 10
23645: PUSH
23646: LD_REAL  1.50000000000000E+0000
23649: MUL
23650: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23651: LD_VAR 0 1
23655: PPUSH
23656: LD_INT 66
23658: PPUSH
23659: CALL_OW 321
23663: PUSH
23664: LD_INT 2
23666: EQUAL
23667: IFFALSE 23684
// bpoints := bpoints * 1.1 ;
23669: LD_ADDR_VAR 0 10
23673: PUSH
23674: LD_VAR 0 10
23678: PUSH
23679: LD_REAL  1.10000000000000E+0000
23682: MUL
23683: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23684: LD_ADDR_VAR 0 10
23688: PUSH
23689: LD_VAR 0 10
23693: PUSH
23694: LD_VAR 0 6
23698: PPUSH
23699: LD_INT 1
23701: PPUSH
23702: CALL_OW 259
23706: PUSH
23707: LD_REAL  1.15000000000000E+0000
23710: MUL
23711: MUL
23712: ST_TO_ADDR
// end ; unit_vehicle :
23713: GO 24541
23715: LD_INT 2
23717: DOUBLE
23718: EQUAL
23719: IFTRUE 23723
23721: GO 24529
23723: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23724: LD_VAR 0 6
23728: PPUSH
23729: CALL_OW 264
23733: PUSH
23734: LD_INT 2
23736: PUSH
23737: LD_INT 42
23739: PUSH
23740: LD_INT 24
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: IN
23748: IFFALSE 23769
// points := [ 25 , 5 , 3 ] ;
23750: LD_ADDR_VAR 0 9
23754: PUSH
23755: LD_INT 25
23757: PUSH
23758: LD_INT 5
23760: PUSH
23761: LD_INT 3
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: LIST
23768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23769: LD_VAR 0 6
23773: PPUSH
23774: CALL_OW 264
23778: PUSH
23779: LD_INT 4
23781: PUSH
23782: LD_INT 43
23784: PUSH
23785: LD_INT 25
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: IN
23793: IFFALSE 23814
// points := [ 40 , 15 , 5 ] ;
23795: LD_ADDR_VAR 0 9
23799: PUSH
23800: LD_INT 40
23802: PUSH
23803: LD_INT 15
23805: PUSH
23806: LD_INT 5
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: LIST
23813: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23814: LD_VAR 0 6
23818: PPUSH
23819: CALL_OW 264
23823: PUSH
23824: LD_INT 3
23826: PUSH
23827: LD_INT 23
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: IN
23834: IFFALSE 23855
// points := [ 7 , 25 , 8 ] ;
23836: LD_ADDR_VAR 0 9
23840: PUSH
23841: LD_INT 7
23843: PUSH
23844: LD_INT 25
23846: PUSH
23847: LD_INT 8
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23855: LD_VAR 0 6
23859: PPUSH
23860: CALL_OW 264
23864: PUSH
23865: LD_INT 5
23867: PUSH
23868: LD_INT 27
23870: PUSH
23871: LD_INT 44
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: LIST
23878: IN
23879: IFFALSE 23900
// points := [ 14 , 50 , 16 ] ;
23881: LD_ADDR_VAR 0 9
23885: PUSH
23886: LD_INT 14
23888: PUSH
23889: LD_INT 50
23891: PUSH
23892: LD_INT 16
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: LIST
23899: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23900: LD_VAR 0 6
23904: PPUSH
23905: CALL_OW 264
23909: PUSH
23910: LD_INT 6
23912: PUSH
23913: LD_INT 46
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: IN
23920: IFFALSE 23941
// points := [ 32 , 120 , 70 ] ;
23922: LD_ADDR_VAR 0 9
23926: PUSH
23927: LD_INT 32
23929: PUSH
23930: LD_INT 120
23932: PUSH
23933: LD_INT 70
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: LIST
23940: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23941: LD_VAR 0 6
23945: PPUSH
23946: CALL_OW 264
23950: PUSH
23951: LD_INT 7
23953: PUSH
23954: LD_INT 28
23956: PUSH
23957: LD_INT 45
23959: PUSH
23960: LD_INT 92
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: IN
23969: IFFALSE 23990
// points := [ 35 , 20 , 45 ] ;
23971: LD_ADDR_VAR 0 9
23975: PUSH
23976: LD_INT 35
23978: PUSH
23979: LD_INT 20
23981: PUSH
23982: LD_INT 45
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: LIST
23989: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23990: LD_VAR 0 6
23994: PPUSH
23995: CALL_OW 264
23999: PUSH
24000: LD_INT 47
24002: PUSH
24003: EMPTY
24004: LIST
24005: IN
24006: IFFALSE 24027
// points := [ 67 , 45 , 75 ] ;
24008: LD_ADDR_VAR 0 9
24012: PUSH
24013: LD_INT 67
24015: PUSH
24016: LD_INT 45
24018: PUSH
24019: LD_INT 75
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: LIST
24026: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24027: LD_VAR 0 6
24031: PPUSH
24032: CALL_OW 264
24036: PUSH
24037: LD_INT 26
24039: PUSH
24040: EMPTY
24041: LIST
24042: IN
24043: IFFALSE 24064
// points := [ 120 , 30 , 80 ] ;
24045: LD_ADDR_VAR 0 9
24049: PUSH
24050: LD_INT 120
24052: PUSH
24053: LD_INT 30
24055: PUSH
24056: LD_INT 80
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: LIST
24063: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24064: LD_VAR 0 6
24068: PPUSH
24069: CALL_OW 264
24073: PUSH
24074: LD_INT 22
24076: PUSH
24077: EMPTY
24078: LIST
24079: IN
24080: IFFALSE 24101
// points := [ 40 , 1 , 1 ] ;
24082: LD_ADDR_VAR 0 9
24086: PUSH
24087: LD_INT 40
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: LIST
24100: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24101: LD_VAR 0 6
24105: PPUSH
24106: CALL_OW 264
24110: PUSH
24111: LD_INT 29
24113: PUSH
24114: EMPTY
24115: LIST
24116: IN
24117: IFFALSE 24138
// points := [ 70 , 200 , 400 ] ;
24119: LD_ADDR_VAR 0 9
24123: PUSH
24124: LD_INT 70
24126: PUSH
24127: LD_INT 200
24129: PUSH
24130: LD_INT 400
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: LIST
24137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24138: LD_VAR 0 6
24142: PPUSH
24143: CALL_OW 264
24147: PUSH
24148: LD_INT 14
24150: PUSH
24151: LD_INT 53
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: IN
24158: IFFALSE 24179
// points := [ 40 , 10 , 20 ] ;
24160: LD_ADDR_VAR 0 9
24164: PUSH
24165: LD_INT 40
24167: PUSH
24168: LD_INT 10
24170: PUSH
24171: LD_INT 20
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: LIST
24178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24179: LD_VAR 0 6
24183: PPUSH
24184: CALL_OW 264
24188: PUSH
24189: LD_INT 9
24191: PUSH
24192: EMPTY
24193: LIST
24194: IN
24195: IFFALSE 24216
// points := [ 5 , 70 , 20 ] ;
24197: LD_ADDR_VAR 0 9
24201: PUSH
24202: LD_INT 5
24204: PUSH
24205: LD_INT 70
24207: PUSH
24208: LD_INT 20
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: LIST
24215: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24216: LD_VAR 0 6
24220: PPUSH
24221: CALL_OW 264
24225: PUSH
24226: LD_INT 10
24228: PUSH
24229: EMPTY
24230: LIST
24231: IN
24232: IFFALSE 24253
// points := [ 35 , 110 , 70 ] ;
24234: LD_ADDR_VAR 0 9
24238: PUSH
24239: LD_INT 35
24241: PUSH
24242: LD_INT 110
24244: PUSH
24245: LD_INT 70
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: LIST
24252: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24253: LD_VAR 0 6
24257: PPUSH
24258: CALL_OW 265
24262: PUSH
24263: LD_INT 25
24265: EQUAL
24266: IFFALSE 24287
// points := [ 80 , 65 , 100 ] ;
24268: LD_ADDR_VAR 0 9
24272: PUSH
24273: LD_INT 80
24275: PUSH
24276: LD_INT 65
24278: PUSH
24279: LD_INT 100
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: LIST
24286: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24287: LD_VAR 0 6
24291: PPUSH
24292: CALL_OW 263
24296: PUSH
24297: LD_INT 1
24299: EQUAL
24300: IFFALSE 24335
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24302: LD_ADDR_VAR 0 10
24306: PUSH
24307: LD_VAR 0 10
24311: PUSH
24312: LD_VAR 0 6
24316: PPUSH
24317: CALL_OW 311
24321: PPUSH
24322: LD_INT 3
24324: PPUSH
24325: CALL_OW 259
24329: PUSH
24330: LD_INT 4
24332: MUL
24333: MUL
24334: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24335: LD_VAR 0 6
24339: PPUSH
24340: CALL_OW 263
24344: PUSH
24345: LD_INT 2
24347: EQUAL
24348: IFFALSE 24399
// begin j := IsControledBy ( i ) ;
24350: LD_ADDR_VAR 0 7
24354: PUSH
24355: LD_VAR 0 6
24359: PPUSH
24360: CALL_OW 312
24364: ST_TO_ADDR
// if j then
24365: LD_VAR 0 7
24369: IFFALSE 24399
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24371: LD_ADDR_VAR 0 10
24375: PUSH
24376: LD_VAR 0 10
24380: PUSH
24381: LD_VAR 0 7
24385: PPUSH
24386: LD_INT 3
24388: PPUSH
24389: CALL_OW 259
24393: PUSH
24394: LD_INT 3
24396: MUL
24397: MUL
24398: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24399: LD_VAR 0 6
24403: PPUSH
24404: CALL_OW 264
24408: PUSH
24409: LD_INT 5
24411: PUSH
24412: LD_INT 6
24414: PUSH
24415: LD_INT 46
24417: PUSH
24418: LD_INT 44
24420: PUSH
24421: LD_INT 47
24423: PUSH
24424: LD_INT 45
24426: PUSH
24427: LD_INT 28
24429: PUSH
24430: LD_INT 7
24432: PUSH
24433: LD_INT 27
24435: PUSH
24436: LD_INT 29
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: IN
24451: PUSH
24452: LD_VAR 0 1
24456: PPUSH
24457: LD_INT 52
24459: PPUSH
24460: CALL_OW 321
24464: PUSH
24465: LD_INT 2
24467: EQUAL
24468: AND
24469: IFFALSE 24486
// bpoints := bpoints * 1.2 ;
24471: LD_ADDR_VAR 0 10
24475: PUSH
24476: LD_VAR 0 10
24480: PUSH
24481: LD_REAL  1.20000000000000E+0000
24484: MUL
24485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24486: LD_VAR 0 6
24490: PPUSH
24491: CALL_OW 264
24495: PUSH
24496: LD_INT 6
24498: PUSH
24499: LD_INT 46
24501: PUSH
24502: LD_INT 47
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: LIST
24509: IN
24510: IFFALSE 24527
// bpoints := bpoints * 1.2 ;
24512: LD_ADDR_VAR 0 10
24516: PUSH
24517: LD_VAR 0 10
24521: PUSH
24522: LD_REAL  1.20000000000000E+0000
24525: MUL
24526: ST_TO_ADDR
// end ; unit_building :
24527: GO 24541
24529: LD_INT 3
24531: DOUBLE
24532: EQUAL
24533: IFTRUE 24537
24535: GO 24540
24537: POP
// ; end ;
24538: GO 24541
24540: POP
// for j = 1 to 3 do
24541: LD_ADDR_VAR 0 7
24545: PUSH
24546: DOUBLE
24547: LD_INT 1
24549: DEC
24550: ST_TO_ADDR
24551: LD_INT 3
24553: PUSH
24554: FOR_TO
24555: IFFALSE 24608
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24557: LD_ADDR_VAR 0 5
24561: PUSH
24562: LD_VAR 0 5
24566: PPUSH
24567: LD_VAR 0 7
24571: PPUSH
24572: LD_VAR 0 5
24576: PUSH
24577: LD_VAR 0 7
24581: ARRAY
24582: PUSH
24583: LD_VAR 0 9
24587: PUSH
24588: LD_VAR 0 7
24592: ARRAY
24593: PUSH
24594: LD_VAR 0 10
24598: MUL
24599: PLUS
24600: PPUSH
24601: CALL_OW 1
24605: ST_TO_ADDR
24606: GO 24554
24608: POP
24609: POP
// end ;
24610: GO 23089
24612: POP
24613: POP
// result := Replace ( result , 4 , tmp ) ;
24614: LD_ADDR_VAR 0 5
24618: PUSH
24619: LD_VAR 0 5
24623: PPUSH
24624: LD_INT 4
24626: PPUSH
24627: LD_VAR 0 8
24631: PPUSH
24632: CALL_OW 1
24636: ST_TO_ADDR
// end ;
24637: LD_VAR 0 5
24641: RET
// export function DangerAtRange ( unit , range ) ; begin
24642: LD_INT 0
24644: PPUSH
// if not unit then
24645: LD_VAR 0 1
24649: NOT
24650: IFFALSE 24654
// exit ;
24652: GO 24699
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24654: LD_ADDR_VAR 0 3
24658: PUSH
24659: LD_VAR 0 1
24663: PPUSH
24664: CALL_OW 255
24668: PPUSH
24669: LD_VAR 0 1
24673: PPUSH
24674: CALL_OW 250
24678: PPUSH
24679: LD_VAR 0 1
24683: PPUSH
24684: CALL_OW 251
24688: PPUSH
24689: LD_VAR 0 2
24693: PPUSH
24694: CALL 22941 0 4
24698: ST_TO_ADDR
// end ;
24699: LD_VAR 0 3
24703: RET
// export function DangerInArea ( side , area ) ; begin
24704: LD_INT 0
24706: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24707: LD_ADDR_VAR 0 3
24711: PUSH
24712: LD_VAR 0 2
24716: PPUSH
24717: LD_INT 81
24719: PUSH
24720: LD_VAR 0 1
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PPUSH
24729: CALL_OW 70
24733: ST_TO_ADDR
// end ;
24734: LD_VAR 0 3
24738: RET
// export function IsExtension ( b ) ; begin
24739: LD_INT 0
24741: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24742: LD_ADDR_VAR 0 2
24746: PUSH
24747: LD_VAR 0 1
24751: PUSH
24752: LD_INT 23
24754: PUSH
24755: LD_INT 20
24757: PUSH
24758: LD_INT 22
24760: PUSH
24761: LD_INT 17
24763: PUSH
24764: LD_INT 24
24766: PUSH
24767: LD_INT 21
24769: PUSH
24770: LD_INT 19
24772: PUSH
24773: LD_INT 16
24775: PUSH
24776: LD_INT 25
24778: PUSH
24779: LD_INT 18
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: IN
24794: ST_TO_ADDR
// end ;
24795: LD_VAR 0 2
24799: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24800: LD_INT 0
24802: PPUSH
24803: PPUSH
24804: PPUSH
// result := [ ] ;
24805: LD_ADDR_VAR 0 4
24809: PUSH
24810: EMPTY
24811: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24812: LD_ADDR_VAR 0 5
24816: PUSH
24817: LD_VAR 0 2
24821: PPUSH
24822: LD_INT 21
24824: PUSH
24825: LD_INT 3
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PPUSH
24832: CALL_OW 70
24836: ST_TO_ADDR
// if not tmp then
24837: LD_VAR 0 5
24841: NOT
24842: IFFALSE 24846
// exit ;
24844: GO 24910
// if checkLink then
24846: LD_VAR 0 3
24850: IFFALSE 24900
// begin for i in tmp do
24852: LD_ADDR_VAR 0 6
24856: PUSH
24857: LD_VAR 0 5
24861: PUSH
24862: FOR_IN
24863: IFFALSE 24898
// if GetBase ( i ) <> base then
24865: LD_VAR 0 6
24869: PPUSH
24870: CALL_OW 274
24874: PUSH
24875: LD_VAR 0 1
24879: NONEQUAL
24880: IFFALSE 24896
// ComLinkToBase ( base , i ) ;
24882: LD_VAR 0 1
24886: PPUSH
24887: LD_VAR 0 6
24891: PPUSH
24892: CALL_OW 169
24896: GO 24862
24898: POP
24899: POP
// end ; result := tmp ;
24900: LD_ADDR_VAR 0 4
24904: PUSH
24905: LD_VAR 0 5
24909: ST_TO_ADDR
// end ;
24910: LD_VAR 0 4
24914: RET
// export function ComComplete ( units , b ) ; var i ; begin
24915: LD_INT 0
24917: PPUSH
24918: PPUSH
// if not units then
24919: LD_VAR 0 1
24923: NOT
24924: IFFALSE 24928
// exit ;
24926: GO 25018
// for i in units do
24928: LD_ADDR_VAR 0 4
24932: PUSH
24933: LD_VAR 0 1
24937: PUSH
24938: FOR_IN
24939: IFFALSE 25016
// if BuildingStatus ( b ) = bs_build then
24941: LD_VAR 0 2
24945: PPUSH
24946: CALL_OW 461
24950: PUSH
24951: LD_INT 1
24953: EQUAL
24954: IFFALSE 25014
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24956: LD_VAR 0 4
24960: PPUSH
24961: LD_STRING h
24963: PUSH
24964: LD_VAR 0 2
24968: PPUSH
24969: CALL_OW 250
24973: PUSH
24974: LD_VAR 0 2
24978: PPUSH
24979: CALL_OW 251
24983: PUSH
24984: LD_VAR 0 2
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: LD_INT 0
24994: PUSH
24995: LD_INT 0
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: PUSH
25007: EMPTY
25008: LIST
25009: PPUSH
25010: CALL_OW 446
25014: GO 24938
25016: POP
25017: POP
// end ;
25018: LD_VAR 0 3
25022: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25023: LD_INT 0
25025: PPUSH
25026: PPUSH
25027: PPUSH
25028: PPUSH
25029: PPUSH
25030: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25031: LD_VAR 0 1
25035: NOT
25036: PUSH
25037: LD_VAR 0 1
25041: PPUSH
25042: CALL_OW 263
25046: PUSH
25047: LD_INT 2
25049: NONEQUAL
25050: OR
25051: IFFALSE 25055
// exit ;
25053: GO 25371
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25055: LD_ADDR_VAR 0 6
25059: PUSH
25060: LD_INT 22
25062: PUSH
25063: LD_VAR 0 1
25067: PPUSH
25068: CALL_OW 255
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: LD_INT 30
25082: PUSH
25083: LD_INT 36
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 34
25092: PUSH
25093: LD_INT 31
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: LIST
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PPUSH
25109: CALL_OW 69
25113: ST_TO_ADDR
// if not tmp then
25114: LD_VAR 0 6
25118: NOT
25119: IFFALSE 25123
// exit ;
25121: GO 25371
// result := [ ] ;
25123: LD_ADDR_VAR 0 2
25127: PUSH
25128: EMPTY
25129: ST_TO_ADDR
// for i in tmp do
25130: LD_ADDR_VAR 0 3
25134: PUSH
25135: LD_VAR 0 6
25139: PUSH
25140: FOR_IN
25141: IFFALSE 25212
// begin t := UnitsInside ( i ) ;
25143: LD_ADDR_VAR 0 4
25147: PUSH
25148: LD_VAR 0 3
25152: PPUSH
25153: CALL_OW 313
25157: ST_TO_ADDR
// if t then
25158: LD_VAR 0 4
25162: IFFALSE 25210
// for j in t do
25164: LD_ADDR_VAR 0 7
25168: PUSH
25169: LD_VAR 0 4
25173: PUSH
25174: FOR_IN
25175: IFFALSE 25208
// result := Replace ( result , result + 1 , j ) ;
25177: LD_ADDR_VAR 0 2
25181: PUSH
25182: LD_VAR 0 2
25186: PPUSH
25187: LD_VAR 0 2
25191: PUSH
25192: LD_INT 1
25194: PLUS
25195: PPUSH
25196: LD_VAR 0 7
25200: PPUSH
25201: CALL_OW 1
25205: ST_TO_ADDR
25206: GO 25174
25208: POP
25209: POP
// end ;
25210: GO 25140
25212: POP
25213: POP
// if not result then
25214: LD_VAR 0 2
25218: NOT
25219: IFFALSE 25223
// exit ;
25221: GO 25371
// mech := result [ 1 ] ;
25223: LD_ADDR_VAR 0 5
25227: PUSH
25228: LD_VAR 0 2
25232: PUSH
25233: LD_INT 1
25235: ARRAY
25236: ST_TO_ADDR
// if result > 1 then
25237: LD_VAR 0 2
25241: PUSH
25242: LD_INT 1
25244: GREATER
25245: IFFALSE 25357
// begin for i = 2 to result do
25247: LD_ADDR_VAR 0 3
25251: PUSH
25252: DOUBLE
25253: LD_INT 2
25255: DEC
25256: ST_TO_ADDR
25257: LD_VAR 0 2
25261: PUSH
25262: FOR_TO
25263: IFFALSE 25355
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25265: LD_ADDR_VAR 0 4
25269: PUSH
25270: LD_VAR 0 2
25274: PUSH
25275: LD_VAR 0 3
25279: ARRAY
25280: PPUSH
25281: LD_INT 3
25283: PPUSH
25284: CALL_OW 259
25288: PUSH
25289: LD_VAR 0 2
25293: PUSH
25294: LD_VAR 0 3
25298: ARRAY
25299: PPUSH
25300: CALL_OW 432
25304: MINUS
25305: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25306: LD_VAR 0 4
25310: PUSH
25311: LD_VAR 0 5
25315: PPUSH
25316: LD_INT 3
25318: PPUSH
25319: CALL_OW 259
25323: PUSH
25324: LD_VAR 0 5
25328: PPUSH
25329: CALL_OW 432
25333: MINUS
25334: GREATEREQUAL
25335: IFFALSE 25353
// mech := result [ i ] ;
25337: LD_ADDR_VAR 0 5
25341: PUSH
25342: LD_VAR 0 2
25346: PUSH
25347: LD_VAR 0 3
25351: ARRAY
25352: ST_TO_ADDR
// end ;
25353: GO 25262
25355: POP
25356: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25357: LD_VAR 0 1
25361: PPUSH
25362: LD_VAR 0 5
25366: PPUSH
25367: CALL_OW 135
// end ;
25371: LD_VAR 0 2
25375: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25376: LD_INT 0
25378: PPUSH
25379: PPUSH
25380: PPUSH
25381: PPUSH
25382: PPUSH
25383: PPUSH
25384: PPUSH
25385: PPUSH
25386: PPUSH
25387: PPUSH
25388: PPUSH
25389: PPUSH
25390: PPUSH
// result := [ ] ;
25391: LD_ADDR_VAR 0 7
25395: PUSH
25396: EMPTY
25397: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25398: LD_VAR 0 1
25402: PPUSH
25403: CALL_OW 266
25407: PUSH
25408: LD_INT 0
25410: PUSH
25411: LD_INT 1
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: IN
25418: NOT
25419: IFFALSE 25423
// exit ;
25421: GO 27057
// if name then
25423: LD_VAR 0 3
25427: IFFALSE 25443
// SetBName ( base_dep , name ) ;
25429: LD_VAR 0 1
25433: PPUSH
25434: LD_VAR 0 3
25438: PPUSH
25439: CALL_OW 500
// base := GetBase ( base_dep ) ;
25443: LD_ADDR_VAR 0 15
25447: PUSH
25448: LD_VAR 0 1
25452: PPUSH
25453: CALL_OW 274
25457: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25458: LD_ADDR_VAR 0 16
25462: PUSH
25463: LD_VAR 0 1
25467: PPUSH
25468: CALL_OW 255
25472: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25473: LD_ADDR_VAR 0 17
25477: PUSH
25478: LD_VAR 0 1
25482: PPUSH
25483: CALL_OW 248
25487: ST_TO_ADDR
// if sources then
25488: LD_VAR 0 5
25492: IFFALSE 25539
// for i = 1 to 3 do
25494: LD_ADDR_VAR 0 8
25498: PUSH
25499: DOUBLE
25500: LD_INT 1
25502: DEC
25503: ST_TO_ADDR
25504: LD_INT 3
25506: PUSH
25507: FOR_TO
25508: IFFALSE 25537
// AddResourceType ( base , i , sources [ i ] ) ;
25510: LD_VAR 0 15
25514: PPUSH
25515: LD_VAR 0 8
25519: PPUSH
25520: LD_VAR 0 5
25524: PUSH
25525: LD_VAR 0 8
25529: ARRAY
25530: PPUSH
25531: CALL_OW 276
25535: GO 25507
25537: POP
25538: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25539: LD_ADDR_VAR 0 18
25543: PUSH
25544: LD_VAR 0 15
25548: PPUSH
25549: LD_VAR 0 2
25553: PPUSH
25554: LD_INT 1
25556: PPUSH
25557: CALL 24800 0 3
25561: ST_TO_ADDR
// InitHc ;
25562: CALL_OW 19
// InitUc ;
25566: CALL_OW 18
// uc_side := side ;
25570: LD_ADDR_OWVAR 20
25574: PUSH
25575: LD_VAR 0 16
25579: ST_TO_ADDR
// uc_nation := nation ;
25580: LD_ADDR_OWVAR 21
25584: PUSH
25585: LD_VAR 0 17
25589: ST_TO_ADDR
// if buildings then
25590: LD_VAR 0 18
25594: IFFALSE 26916
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25596: LD_ADDR_VAR 0 19
25600: PUSH
25601: LD_VAR 0 18
25605: PPUSH
25606: LD_INT 2
25608: PUSH
25609: LD_INT 30
25611: PUSH
25612: LD_INT 29
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 30
25621: PUSH
25622: LD_INT 30
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: LIST
25633: PPUSH
25634: CALL_OW 72
25638: ST_TO_ADDR
// if tmp then
25639: LD_VAR 0 19
25643: IFFALSE 25691
// for i in tmp do
25645: LD_ADDR_VAR 0 8
25649: PUSH
25650: LD_VAR 0 19
25654: PUSH
25655: FOR_IN
25656: IFFALSE 25689
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25658: LD_VAR 0 8
25662: PPUSH
25663: CALL_OW 250
25667: PPUSH
25668: LD_VAR 0 8
25672: PPUSH
25673: CALL_OW 251
25677: PPUSH
25678: LD_VAR 0 16
25682: PPUSH
25683: CALL_OW 441
25687: GO 25655
25689: POP
25690: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25691: LD_VAR 0 18
25695: PPUSH
25696: LD_INT 2
25698: PUSH
25699: LD_INT 30
25701: PUSH
25702: LD_INT 32
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 30
25711: PUSH
25712: LD_INT 33
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: LIST
25723: PPUSH
25724: CALL_OW 72
25728: IFFALSE 25816
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25730: LD_ADDR_VAR 0 8
25734: PUSH
25735: LD_VAR 0 18
25739: PPUSH
25740: LD_INT 2
25742: PUSH
25743: LD_INT 30
25745: PUSH
25746: LD_INT 32
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 30
25755: PUSH
25756: LD_INT 33
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: LIST
25767: PPUSH
25768: CALL_OW 72
25772: PUSH
25773: FOR_IN
25774: IFFALSE 25814
// begin if not GetBWeapon ( i ) then
25776: LD_VAR 0 8
25780: PPUSH
25781: CALL_OW 269
25785: NOT
25786: IFFALSE 25812
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25788: LD_VAR 0 8
25792: PPUSH
25793: LD_VAR 0 8
25797: PPUSH
25798: LD_VAR 0 2
25802: PPUSH
25803: CALL 27062 0 2
25807: PPUSH
25808: CALL_OW 431
// end ;
25812: GO 25773
25814: POP
25815: POP
// end ; for i = 1 to personel do
25816: LD_ADDR_VAR 0 8
25820: PUSH
25821: DOUBLE
25822: LD_INT 1
25824: DEC
25825: ST_TO_ADDR
25826: LD_VAR 0 6
25830: PUSH
25831: FOR_TO
25832: IFFALSE 26896
// begin if i > 4 then
25834: LD_VAR 0 8
25838: PUSH
25839: LD_INT 4
25841: GREATER
25842: IFFALSE 25846
// break ;
25844: GO 26896
// case i of 1 :
25846: LD_VAR 0 8
25850: PUSH
25851: LD_INT 1
25853: DOUBLE
25854: EQUAL
25855: IFTRUE 25859
25857: GO 25939
25859: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25860: LD_ADDR_VAR 0 12
25864: PUSH
25865: LD_VAR 0 18
25869: PPUSH
25870: LD_INT 22
25872: PUSH
25873: LD_VAR 0 16
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 58
25884: PUSH
25885: EMPTY
25886: LIST
25887: PUSH
25888: LD_INT 2
25890: PUSH
25891: LD_INT 30
25893: PUSH
25894: LD_INT 32
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 30
25903: PUSH
25904: LD_INT 4
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 30
25913: PUSH
25914: LD_INT 5
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: LIST
25931: PPUSH
25932: CALL_OW 72
25936: ST_TO_ADDR
25937: GO 26161
25939: LD_INT 2
25941: DOUBLE
25942: EQUAL
25943: IFTRUE 25947
25945: GO 26009
25947: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25948: LD_ADDR_VAR 0 12
25952: PUSH
25953: LD_VAR 0 18
25957: PPUSH
25958: LD_INT 22
25960: PUSH
25961: LD_VAR 0 16
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 2
25972: PUSH
25973: LD_INT 30
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 30
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: LIST
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PPUSH
26002: CALL_OW 72
26006: ST_TO_ADDR
26007: GO 26161
26009: LD_INT 3
26011: DOUBLE
26012: EQUAL
26013: IFTRUE 26017
26015: GO 26079
26017: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26018: LD_ADDR_VAR 0 12
26022: PUSH
26023: LD_VAR 0 18
26027: PPUSH
26028: LD_INT 22
26030: PUSH
26031: LD_VAR 0 16
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: LD_INT 30
26045: PUSH
26046: LD_INT 2
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 30
26055: PUSH
26056: LD_INT 3
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: LIST
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PPUSH
26072: CALL_OW 72
26076: ST_TO_ADDR
26077: GO 26161
26079: LD_INT 4
26081: DOUBLE
26082: EQUAL
26083: IFTRUE 26087
26085: GO 26160
26087: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26088: LD_ADDR_VAR 0 12
26092: PUSH
26093: LD_VAR 0 18
26097: PPUSH
26098: LD_INT 22
26100: PUSH
26101: LD_VAR 0 16
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 2
26112: PUSH
26113: LD_INT 30
26115: PUSH
26116: LD_INT 6
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 30
26125: PUSH
26126: LD_INT 7
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 30
26135: PUSH
26136: LD_INT 8
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PPUSH
26153: CALL_OW 72
26157: ST_TO_ADDR
26158: GO 26161
26160: POP
// if i = 1 then
26161: LD_VAR 0 8
26165: PUSH
26166: LD_INT 1
26168: EQUAL
26169: IFFALSE 26280
// begin tmp := [ ] ;
26171: LD_ADDR_VAR 0 19
26175: PUSH
26176: EMPTY
26177: ST_TO_ADDR
// for j in f do
26178: LD_ADDR_VAR 0 9
26182: PUSH
26183: LD_VAR 0 12
26187: PUSH
26188: FOR_IN
26189: IFFALSE 26262
// if GetBType ( j ) = b_bunker then
26191: LD_VAR 0 9
26195: PPUSH
26196: CALL_OW 266
26200: PUSH
26201: LD_INT 32
26203: EQUAL
26204: IFFALSE 26231
// tmp := Insert ( tmp , 1 , j ) else
26206: LD_ADDR_VAR 0 19
26210: PUSH
26211: LD_VAR 0 19
26215: PPUSH
26216: LD_INT 1
26218: PPUSH
26219: LD_VAR 0 9
26223: PPUSH
26224: CALL_OW 2
26228: ST_TO_ADDR
26229: GO 26260
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26231: LD_ADDR_VAR 0 19
26235: PUSH
26236: LD_VAR 0 19
26240: PPUSH
26241: LD_VAR 0 19
26245: PUSH
26246: LD_INT 1
26248: PLUS
26249: PPUSH
26250: LD_VAR 0 9
26254: PPUSH
26255: CALL_OW 2
26259: ST_TO_ADDR
26260: GO 26188
26262: POP
26263: POP
// if tmp then
26264: LD_VAR 0 19
26268: IFFALSE 26280
// f := tmp ;
26270: LD_ADDR_VAR 0 12
26274: PUSH
26275: LD_VAR 0 19
26279: ST_TO_ADDR
// end ; x := personel [ i ] ;
26280: LD_ADDR_VAR 0 13
26284: PUSH
26285: LD_VAR 0 6
26289: PUSH
26290: LD_VAR 0 8
26294: ARRAY
26295: ST_TO_ADDR
// if x = - 1 then
26296: LD_VAR 0 13
26300: PUSH
26301: LD_INT 1
26303: NEG
26304: EQUAL
26305: IFFALSE 26514
// begin for j in f do
26307: LD_ADDR_VAR 0 9
26311: PUSH
26312: LD_VAR 0 12
26316: PUSH
26317: FOR_IN
26318: IFFALSE 26510
// repeat InitHc ;
26320: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26324: LD_VAR 0 9
26328: PPUSH
26329: CALL_OW 266
26333: PUSH
26334: LD_INT 5
26336: EQUAL
26337: IFFALSE 26407
// begin if UnitsInside ( j ) < 3 then
26339: LD_VAR 0 9
26343: PPUSH
26344: CALL_OW 313
26348: PUSH
26349: LD_INT 3
26351: LESS
26352: IFFALSE 26388
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26354: LD_INT 0
26356: PPUSH
26357: LD_INT 5
26359: PUSH
26360: LD_INT 8
26362: PUSH
26363: LD_INT 9
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: LIST
26370: PUSH
26371: LD_VAR 0 17
26375: ARRAY
26376: PPUSH
26377: LD_VAR 0 4
26381: PPUSH
26382: CALL_OW 380
26386: GO 26405
// PrepareHuman ( false , i , skill ) ;
26388: LD_INT 0
26390: PPUSH
26391: LD_VAR 0 8
26395: PPUSH
26396: LD_VAR 0 4
26400: PPUSH
26401: CALL_OW 380
// end else
26405: GO 26424
// PrepareHuman ( false , i , skill ) ;
26407: LD_INT 0
26409: PPUSH
26410: LD_VAR 0 8
26414: PPUSH
26415: LD_VAR 0 4
26419: PPUSH
26420: CALL_OW 380
// un := CreateHuman ;
26424: LD_ADDR_VAR 0 14
26428: PUSH
26429: CALL_OW 44
26433: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26434: LD_ADDR_VAR 0 7
26438: PUSH
26439: LD_VAR 0 7
26443: PPUSH
26444: LD_INT 1
26446: PPUSH
26447: LD_VAR 0 14
26451: PPUSH
26452: CALL_OW 2
26456: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26457: LD_VAR 0 14
26461: PPUSH
26462: LD_VAR 0 9
26466: PPUSH
26467: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26471: LD_VAR 0 9
26475: PPUSH
26476: CALL_OW 313
26480: PUSH
26481: LD_INT 6
26483: EQUAL
26484: PUSH
26485: LD_VAR 0 9
26489: PPUSH
26490: CALL_OW 266
26494: PUSH
26495: LD_INT 32
26497: PUSH
26498: LD_INT 31
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: IN
26505: OR
26506: IFFALSE 26320
26508: GO 26317
26510: POP
26511: POP
// end else
26512: GO 26894
// for j = 1 to x do
26514: LD_ADDR_VAR 0 9
26518: PUSH
26519: DOUBLE
26520: LD_INT 1
26522: DEC
26523: ST_TO_ADDR
26524: LD_VAR 0 13
26528: PUSH
26529: FOR_TO
26530: IFFALSE 26892
// begin InitHc ;
26532: CALL_OW 19
// if not f then
26536: LD_VAR 0 12
26540: NOT
26541: IFFALSE 26630
// begin PrepareHuman ( false , i , skill ) ;
26543: LD_INT 0
26545: PPUSH
26546: LD_VAR 0 8
26550: PPUSH
26551: LD_VAR 0 4
26555: PPUSH
26556: CALL_OW 380
// un := CreateHuman ;
26560: LD_ADDR_VAR 0 14
26564: PUSH
26565: CALL_OW 44
26569: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26570: LD_ADDR_VAR 0 7
26574: PUSH
26575: LD_VAR 0 7
26579: PPUSH
26580: LD_INT 1
26582: PPUSH
26583: LD_VAR 0 14
26587: PPUSH
26588: CALL_OW 2
26592: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26593: LD_VAR 0 14
26597: PPUSH
26598: LD_VAR 0 1
26602: PPUSH
26603: CALL_OW 250
26607: PPUSH
26608: LD_VAR 0 1
26612: PPUSH
26613: CALL_OW 251
26617: PPUSH
26618: LD_INT 10
26620: PPUSH
26621: LD_INT 0
26623: PPUSH
26624: CALL_OW 50
// continue ;
26628: GO 26529
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26630: LD_VAR 0 12
26634: PUSH
26635: LD_INT 1
26637: ARRAY
26638: PPUSH
26639: CALL_OW 313
26643: PUSH
26644: LD_VAR 0 12
26648: PUSH
26649: LD_INT 1
26651: ARRAY
26652: PPUSH
26653: CALL_OW 266
26657: PUSH
26658: LD_INT 32
26660: PUSH
26661: LD_INT 31
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: IN
26668: AND
26669: PUSH
26670: LD_VAR 0 12
26674: PUSH
26675: LD_INT 1
26677: ARRAY
26678: PPUSH
26679: CALL_OW 313
26683: PUSH
26684: LD_INT 6
26686: EQUAL
26687: OR
26688: IFFALSE 26708
// f := Delete ( f , 1 ) ;
26690: LD_ADDR_VAR 0 12
26694: PUSH
26695: LD_VAR 0 12
26699: PPUSH
26700: LD_INT 1
26702: PPUSH
26703: CALL_OW 3
26707: ST_TO_ADDR
// if not f then
26708: LD_VAR 0 12
26712: NOT
26713: IFFALSE 26731
// begin x := x + 2 ;
26715: LD_ADDR_VAR 0 13
26719: PUSH
26720: LD_VAR 0 13
26724: PUSH
26725: LD_INT 2
26727: PLUS
26728: ST_TO_ADDR
// continue ;
26729: GO 26529
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26731: LD_VAR 0 12
26735: PUSH
26736: LD_INT 1
26738: ARRAY
26739: PPUSH
26740: CALL_OW 266
26744: PUSH
26745: LD_INT 5
26747: EQUAL
26748: IFFALSE 26822
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26750: LD_VAR 0 12
26754: PUSH
26755: LD_INT 1
26757: ARRAY
26758: PPUSH
26759: CALL_OW 313
26763: PUSH
26764: LD_INT 3
26766: LESS
26767: IFFALSE 26803
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26769: LD_INT 0
26771: PPUSH
26772: LD_INT 5
26774: PUSH
26775: LD_INT 8
26777: PUSH
26778: LD_INT 9
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: LIST
26785: PUSH
26786: LD_VAR 0 17
26790: ARRAY
26791: PPUSH
26792: LD_VAR 0 4
26796: PPUSH
26797: CALL_OW 380
26801: GO 26820
// PrepareHuman ( false , i , skill ) ;
26803: LD_INT 0
26805: PPUSH
26806: LD_VAR 0 8
26810: PPUSH
26811: LD_VAR 0 4
26815: PPUSH
26816: CALL_OW 380
// end else
26820: GO 26839
// PrepareHuman ( false , i , skill ) ;
26822: LD_INT 0
26824: PPUSH
26825: LD_VAR 0 8
26829: PPUSH
26830: LD_VAR 0 4
26834: PPUSH
26835: CALL_OW 380
// un := CreateHuman ;
26839: LD_ADDR_VAR 0 14
26843: PUSH
26844: CALL_OW 44
26848: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26849: LD_ADDR_VAR 0 7
26853: PUSH
26854: LD_VAR 0 7
26858: PPUSH
26859: LD_INT 1
26861: PPUSH
26862: LD_VAR 0 14
26866: PPUSH
26867: CALL_OW 2
26871: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26872: LD_VAR 0 14
26876: PPUSH
26877: LD_VAR 0 12
26881: PUSH
26882: LD_INT 1
26884: ARRAY
26885: PPUSH
26886: CALL_OW 52
// end ;
26890: GO 26529
26892: POP
26893: POP
// end ;
26894: GO 25831
26896: POP
26897: POP
// result := result ^ buildings ;
26898: LD_ADDR_VAR 0 7
26902: PUSH
26903: LD_VAR 0 7
26907: PUSH
26908: LD_VAR 0 18
26912: ADD
26913: ST_TO_ADDR
// end else
26914: GO 27057
// begin for i = 1 to personel do
26916: LD_ADDR_VAR 0 8
26920: PUSH
26921: DOUBLE
26922: LD_INT 1
26924: DEC
26925: ST_TO_ADDR
26926: LD_VAR 0 6
26930: PUSH
26931: FOR_TO
26932: IFFALSE 27055
// begin if i > 4 then
26934: LD_VAR 0 8
26938: PUSH
26939: LD_INT 4
26941: GREATER
26942: IFFALSE 26946
// break ;
26944: GO 27055
// x := personel [ i ] ;
26946: LD_ADDR_VAR 0 13
26950: PUSH
26951: LD_VAR 0 6
26955: PUSH
26956: LD_VAR 0 8
26960: ARRAY
26961: ST_TO_ADDR
// if x = - 1 then
26962: LD_VAR 0 13
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: EQUAL
26971: IFFALSE 26975
// continue ;
26973: GO 26931
// PrepareHuman ( false , i , skill ) ;
26975: LD_INT 0
26977: PPUSH
26978: LD_VAR 0 8
26982: PPUSH
26983: LD_VAR 0 4
26987: PPUSH
26988: CALL_OW 380
// un := CreateHuman ;
26992: LD_ADDR_VAR 0 14
26996: PUSH
26997: CALL_OW 44
27001: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27002: LD_VAR 0 14
27006: PPUSH
27007: LD_VAR 0 1
27011: PPUSH
27012: CALL_OW 250
27016: PPUSH
27017: LD_VAR 0 1
27021: PPUSH
27022: CALL_OW 251
27026: PPUSH
27027: LD_INT 10
27029: PPUSH
27030: LD_INT 0
27032: PPUSH
27033: CALL_OW 50
// result := result ^ un ;
27037: LD_ADDR_VAR 0 7
27041: PUSH
27042: LD_VAR 0 7
27046: PUSH
27047: LD_VAR 0 14
27051: ADD
27052: ST_TO_ADDR
// end ;
27053: GO 26931
27055: POP
27056: POP
// end ; end ;
27057: LD_VAR 0 7
27061: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27062: LD_INT 0
27064: PPUSH
27065: PPUSH
27066: PPUSH
27067: PPUSH
27068: PPUSH
27069: PPUSH
27070: PPUSH
27071: PPUSH
27072: PPUSH
27073: PPUSH
27074: PPUSH
27075: PPUSH
27076: PPUSH
27077: PPUSH
27078: PPUSH
27079: PPUSH
// result := false ;
27080: LD_ADDR_VAR 0 3
27084: PUSH
27085: LD_INT 0
27087: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27088: LD_VAR 0 1
27092: NOT
27093: PUSH
27094: LD_VAR 0 1
27098: PPUSH
27099: CALL_OW 266
27103: PUSH
27104: LD_INT 32
27106: PUSH
27107: LD_INT 33
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: IN
27114: NOT
27115: OR
27116: IFFALSE 27120
// exit ;
27118: GO 28229
// nat := GetNation ( tower ) ;
27120: LD_ADDR_VAR 0 12
27124: PUSH
27125: LD_VAR 0 1
27129: PPUSH
27130: CALL_OW 248
27134: ST_TO_ADDR
// side := GetSide ( tower ) ;
27135: LD_ADDR_VAR 0 16
27139: PUSH
27140: LD_VAR 0 1
27144: PPUSH
27145: CALL_OW 255
27149: ST_TO_ADDR
// x := GetX ( tower ) ;
27150: LD_ADDR_VAR 0 10
27154: PUSH
27155: LD_VAR 0 1
27159: PPUSH
27160: CALL_OW 250
27164: ST_TO_ADDR
// y := GetY ( tower ) ;
27165: LD_ADDR_VAR 0 11
27169: PUSH
27170: LD_VAR 0 1
27174: PPUSH
27175: CALL_OW 251
27179: ST_TO_ADDR
// if not x or not y then
27180: LD_VAR 0 10
27184: NOT
27185: PUSH
27186: LD_VAR 0 11
27190: NOT
27191: OR
27192: IFFALSE 27196
// exit ;
27194: GO 28229
// weapon := 0 ;
27196: LD_ADDR_VAR 0 18
27200: PUSH
27201: LD_INT 0
27203: ST_TO_ADDR
// fac_list := [ ] ;
27204: LD_ADDR_VAR 0 17
27208: PUSH
27209: EMPTY
27210: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27211: LD_ADDR_VAR 0 6
27215: PUSH
27216: LD_VAR 0 1
27220: PPUSH
27221: CALL_OW 274
27225: PPUSH
27226: LD_VAR 0 2
27230: PPUSH
27231: LD_INT 0
27233: PPUSH
27234: CALL 24800 0 3
27238: PPUSH
27239: LD_INT 30
27241: PUSH
27242: LD_INT 3
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PPUSH
27249: CALL_OW 72
27253: ST_TO_ADDR
// if not factories then
27254: LD_VAR 0 6
27258: NOT
27259: IFFALSE 27263
// exit ;
27261: GO 28229
// for i in factories do
27263: LD_ADDR_VAR 0 8
27267: PUSH
27268: LD_VAR 0 6
27272: PUSH
27273: FOR_IN
27274: IFFALSE 27299
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27276: LD_ADDR_VAR 0 17
27280: PUSH
27281: LD_VAR 0 17
27285: PUSH
27286: LD_VAR 0 8
27290: PPUSH
27291: CALL_OW 478
27295: UNION
27296: ST_TO_ADDR
27297: GO 27273
27299: POP
27300: POP
// if not fac_list then
27301: LD_VAR 0 17
27305: NOT
27306: IFFALSE 27310
// exit ;
27308: GO 28229
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27310: LD_ADDR_VAR 0 5
27314: PUSH
27315: LD_INT 4
27317: PUSH
27318: LD_INT 5
27320: PUSH
27321: LD_INT 9
27323: PUSH
27324: LD_INT 10
27326: PUSH
27327: LD_INT 6
27329: PUSH
27330: LD_INT 7
27332: PUSH
27333: LD_INT 11
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 27
27347: PUSH
27348: LD_INT 28
27350: PUSH
27351: LD_INT 26
27353: PUSH
27354: LD_INT 30
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 43
27365: PUSH
27366: LD_INT 44
27368: PUSH
27369: LD_INT 46
27371: PUSH
27372: LD_INT 45
27374: PUSH
27375: LD_INT 47
27377: PUSH
27378: LD_INT 49
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: LIST
27393: PUSH
27394: LD_VAR 0 12
27398: ARRAY
27399: ST_TO_ADDR
// list := list isect fac_list ;
27400: LD_ADDR_VAR 0 5
27404: PUSH
27405: LD_VAR 0 5
27409: PUSH
27410: LD_VAR 0 17
27414: ISECT
27415: ST_TO_ADDR
// if not list then
27416: LD_VAR 0 5
27420: NOT
27421: IFFALSE 27425
// exit ;
27423: GO 28229
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27425: LD_VAR 0 12
27429: PUSH
27430: LD_INT 3
27432: EQUAL
27433: PUSH
27434: LD_INT 49
27436: PUSH
27437: LD_VAR 0 5
27441: IN
27442: AND
27443: PUSH
27444: LD_INT 31
27446: PPUSH
27447: LD_VAR 0 16
27451: PPUSH
27452: CALL_OW 321
27456: PUSH
27457: LD_INT 2
27459: EQUAL
27460: AND
27461: IFFALSE 27521
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27463: LD_INT 22
27465: PUSH
27466: LD_VAR 0 16
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 35
27477: PUSH
27478: LD_INT 49
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 91
27487: PUSH
27488: LD_VAR 0 1
27492: PUSH
27493: LD_INT 10
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: LIST
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: LIST
27505: PPUSH
27506: CALL_OW 69
27510: NOT
27511: IFFALSE 27521
// weapon := ru_time_lapser ;
27513: LD_ADDR_VAR 0 18
27517: PUSH
27518: LD_INT 49
27520: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27521: LD_VAR 0 12
27525: PUSH
27526: LD_INT 1
27528: PUSH
27529: LD_INT 2
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: IN
27536: PUSH
27537: LD_INT 11
27539: PUSH
27540: LD_VAR 0 5
27544: IN
27545: PUSH
27546: LD_INT 30
27548: PUSH
27549: LD_VAR 0 5
27553: IN
27554: OR
27555: AND
27556: PUSH
27557: LD_INT 6
27559: PPUSH
27560: LD_VAR 0 16
27564: PPUSH
27565: CALL_OW 321
27569: PUSH
27570: LD_INT 2
27572: EQUAL
27573: AND
27574: IFFALSE 27739
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27576: LD_INT 22
27578: PUSH
27579: LD_VAR 0 16
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: LD_INT 35
27593: PUSH
27594: LD_INT 11
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 35
27603: PUSH
27604: LD_INT 30
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 91
27618: PUSH
27619: LD_VAR 0 1
27623: PUSH
27624: LD_INT 18
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: LIST
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: PPUSH
27637: CALL_OW 69
27641: NOT
27642: PUSH
27643: LD_INT 22
27645: PUSH
27646: LD_VAR 0 16
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 2
27657: PUSH
27658: LD_INT 30
27660: PUSH
27661: LD_INT 32
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 30
27670: PUSH
27671: LD_INT 33
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 91
27685: PUSH
27686: LD_VAR 0 1
27690: PUSH
27691: LD_INT 12
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: LIST
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: LIST
27703: PUSH
27704: EMPTY
27705: LIST
27706: PPUSH
27707: CALL_OW 69
27711: PUSH
27712: LD_INT 2
27714: GREATER
27715: AND
27716: IFFALSE 27739
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27718: LD_ADDR_VAR 0 18
27722: PUSH
27723: LD_INT 11
27725: PUSH
27726: LD_INT 30
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_VAR 0 12
27737: ARRAY
27738: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27739: LD_VAR 0 18
27743: NOT
27744: PUSH
27745: LD_INT 40
27747: PPUSH
27748: LD_VAR 0 16
27752: PPUSH
27753: CALL_OW 321
27757: PUSH
27758: LD_INT 2
27760: EQUAL
27761: AND
27762: PUSH
27763: LD_INT 7
27765: PUSH
27766: LD_VAR 0 5
27770: IN
27771: PUSH
27772: LD_INT 28
27774: PUSH
27775: LD_VAR 0 5
27779: IN
27780: OR
27781: PUSH
27782: LD_INT 45
27784: PUSH
27785: LD_VAR 0 5
27789: IN
27790: OR
27791: AND
27792: IFFALSE 28046
// begin hex := GetHexInfo ( x , y ) ;
27794: LD_ADDR_VAR 0 4
27798: PUSH
27799: LD_VAR 0 10
27803: PPUSH
27804: LD_VAR 0 11
27808: PPUSH
27809: CALL_OW 546
27813: ST_TO_ADDR
// if hex [ 1 ] then
27814: LD_VAR 0 4
27818: PUSH
27819: LD_INT 1
27821: ARRAY
27822: IFFALSE 27826
// exit ;
27824: GO 28229
// height := hex [ 2 ] ;
27826: LD_ADDR_VAR 0 15
27830: PUSH
27831: LD_VAR 0 4
27835: PUSH
27836: LD_INT 2
27838: ARRAY
27839: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27840: LD_ADDR_VAR 0 14
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: LD_INT 2
27850: PUSH
27851: LD_INT 3
27853: PUSH
27854: LD_INT 5
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: ST_TO_ADDR
// for i in tmp do
27863: LD_ADDR_VAR 0 8
27867: PUSH
27868: LD_VAR 0 14
27872: PUSH
27873: FOR_IN
27874: IFFALSE 28044
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27876: LD_ADDR_VAR 0 9
27880: PUSH
27881: LD_VAR 0 10
27885: PPUSH
27886: LD_VAR 0 8
27890: PPUSH
27891: LD_INT 5
27893: PPUSH
27894: CALL_OW 272
27898: PUSH
27899: LD_VAR 0 11
27903: PPUSH
27904: LD_VAR 0 8
27908: PPUSH
27909: LD_INT 5
27911: PPUSH
27912: CALL_OW 273
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27921: LD_VAR 0 9
27925: PUSH
27926: LD_INT 1
27928: ARRAY
27929: PPUSH
27930: LD_VAR 0 9
27934: PUSH
27935: LD_INT 2
27937: ARRAY
27938: PPUSH
27939: CALL_OW 488
27943: IFFALSE 28042
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27945: LD_ADDR_VAR 0 4
27949: PUSH
27950: LD_VAR 0 9
27954: PUSH
27955: LD_INT 1
27957: ARRAY
27958: PPUSH
27959: LD_VAR 0 9
27963: PUSH
27964: LD_INT 2
27966: ARRAY
27967: PPUSH
27968: CALL_OW 546
27972: ST_TO_ADDR
// if hex [ 1 ] then
27973: LD_VAR 0 4
27977: PUSH
27978: LD_INT 1
27980: ARRAY
27981: IFFALSE 27985
// continue ;
27983: GO 27873
// h := hex [ 2 ] ;
27985: LD_ADDR_VAR 0 13
27989: PUSH
27990: LD_VAR 0 4
27994: PUSH
27995: LD_INT 2
27997: ARRAY
27998: ST_TO_ADDR
// if h + 7 < height then
27999: LD_VAR 0 13
28003: PUSH
28004: LD_INT 7
28006: PLUS
28007: PUSH
28008: LD_VAR 0 15
28012: LESS
28013: IFFALSE 28042
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28015: LD_ADDR_VAR 0 18
28019: PUSH
28020: LD_INT 7
28022: PUSH
28023: LD_INT 28
28025: PUSH
28026: LD_INT 45
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: LIST
28033: PUSH
28034: LD_VAR 0 12
28038: ARRAY
28039: ST_TO_ADDR
// break ;
28040: GO 28044
// end ; end ; end ;
28042: GO 27873
28044: POP
28045: POP
// end ; if not weapon then
28046: LD_VAR 0 18
28050: NOT
28051: IFFALSE 28111
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28053: LD_ADDR_VAR 0 5
28057: PUSH
28058: LD_VAR 0 5
28062: PUSH
28063: LD_INT 11
28065: PUSH
28066: LD_INT 30
28068: PUSH
28069: LD_INT 49
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: LIST
28076: DIFF
28077: ST_TO_ADDR
// if not list then
28078: LD_VAR 0 5
28082: NOT
28083: IFFALSE 28087
// exit ;
28085: GO 28229
// weapon := list [ rand ( 1 , list ) ] ;
28087: LD_ADDR_VAR 0 18
28091: PUSH
28092: LD_VAR 0 5
28096: PUSH
28097: LD_INT 1
28099: PPUSH
28100: LD_VAR 0 5
28104: PPUSH
28105: CALL_OW 12
28109: ARRAY
28110: ST_TO_ADDR
// end ; if weapon then
28111: LD_VAR 0 18
28115: IFFALSE 28229
// begin tmp := CostOfWeapon ( weapon ) ;
28117: LD_ADDR_VAR 0 14
28121: PUSH
28122: LD_VAR 0 18
28126: PPUSH
28127: CALL_OW 451
28131: ST_TO_ADDR
// j := GetBase ( tower ) ;
28132: LD_ADDR_VAR 0 9
28136: PUSH
28137: LD_VAR 0 1
28141: PPUSH
28142: CALL_OW 274
28146: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28147: LD_VAR 0 9
28151: PPUSH
28152: LD_INT 1
28154: PPUSH
28155: CALL_OW 275
28159: PUSH
28160: LD_VAR 0 14
28164: PUSH
28165: LD_INT 1
28167: ARRAY
28168: GREATEREQUAL
28169: PUSH
28170: LD_VAR 0 9
28174: PPUSH
28175: LD_INT 2
28177: PPUSH
28178: CALL_OW 275
28182: PUSH
28183: LD_VAR 0 14
28187: PUSH
28188: LD_INT 2
28190: ARRAY
28191: GREATEREQUAL
28192: AND
28193: PUSH
28194: LD_VAR 0 9
28198: PPUSH
28199: LD_INT 3
28201: PPUSH
28202: CALL_OW 275
28206: PUSH
28207: LD_VAR 0 14
28211: PUSH
28212: LD_INT 3
28214: ARRAY
28215: GREATEREQUAL
28216: AND
28217: IFFALSE 28229
// result := weapon ;
28219: LD_ADDR_VAR 0 3
28223: PUSH
28224: LD_VAR 0 18
28228: ST_TO_ADDR
// end ; end ;
28229: LD_VAR 0 3
28233: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28234: LD_INT 0
28236: PPUSH
28237: PPUSH
// result := true ;
28238: LD_ADDR_VAR 0 3
28242: PUSH
28243: LD_INT 1
28245: ST_TO_ADDR
// if array1 = array2 then
28246: LD_VAR 0 1
28250: PUSH
28251: LD_VAR 0 2
28255: EQUAL
28256: IFFALSE 28316
// begin for i = 1 to array1 do
28258: LD_ADDR_VAR 0 4
28262: PUSH
28263: DOUBLE
28264: LD_INT 1
28266: DEC
28267: ST_TO_ADDR
28268: LD_VAR 0 1
28272: PUSH
28273: FOR_TO
28274: IFFALSE 28312
// if array1 [ i ] <> array2 [ i ] then
28276: LD_VAR 0 1
28280: PUSH
28281: LD_VAR 0 4
28285: ARRAY
28286: PUSH
28287: LD_VAR 0 2
28291: PUSH
28292: LD_VAR 0 4
28296: ARRAY
28297: NONEQUAL
28298: IFFALSE 28310
// begin result := false ;
28300: LD_ADDR_VAR 0 3
28304: PUSH
28305: LD_INT 0
28307: ST_TO_ADDR
// break ;
28308: GO 28312
// end ;
28310: GO 28273
28312: POP
28313: POP
// end else
28314: GO 28324
// result := false ;
28316: LD_ADDR_VAR 0 3
28320: PUSH
28321: LD_INT 0
28323: ST_TO_ADDR
// end ;
28324: LD_VAR 0 3
28328: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28329: LD_INT 0
28331: PPUSH
28332: PPUSH
// if not array1 or not array2 then
28333: LD_VAR 0 1
28337: NOT
28338: PUSH
28339: LD_VAR 0 2
28343: NOT
28344: OR
28345: IFFALSE 28349
// exit ;
28347: GO 28413
// result := true ;
28349: LD_ADDR_VAR 0 3
28353: PUSH
28354: LD_INT 1
28356: ST_TO_ADDR
// for i = 1 to array1 do
28357: LD_ADDR_VAR 0 4
28361: PUSH
28362: DOUBLE
28363: LD_INT 1
28365: DEC
28366: ST_TO_ADDR
28367: LD_VAR 0 1
28371: PUSH
28372: FOR_TO
28373: IFFALSE 28411
// if array1 [ i ] <> array2 [ i ] then
28375: LD_VAR 0 1
28379: PUSH
28380: LD_VAR 0 4
28384: ARRAY
28385: PUSH
28386: LD_VAR 0 2
28390: PUSH
28391: LD_VAR 0 4
28395: ARRAY
28396: NONEQUAL
28397: IFFALSE 28409
// begin result := false ;
28399: LD_ADDR_VAR 0 3
28403: PUSH
28404: LD_INT 0
28406: ST_TO_ADDR
// break ;
28407: GO 28411
// end ;
28409: GO 28372
28411: POP
28412: POP
// end ;
28413: LD_VAR 0 3
28417: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28418: LD_INT 0
28420: PPUSH
28421: PPUSH
28422: PPUSH
// pom := GetBase ( fac ) ;
28423: LD_ADDR_VAR 0 5
28427: PUSH
28428: LD_VAR 0 1
28432: PPUSH
28433: CALL_OW 274
28437: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28438: LD_ADDR_VAR 0 4
28442: PUSH
28443: LD_VAR 0 2
28447: PUSH
28448: LD_INT 1
28450: ARRAY
28451: PPUSH
28452: LD_VAR 0 2
28456: PUSH
28457: LD_INT 2
28459: ARRAY
28460: PPUSH
28461: LD_VAR 0 2
28465: PUSH
28466: LD_INT 3
28468: ARRAY
28469: PPUSH
28470: LD_VAR 0 2
28474: PUSH
28475: LD_INT 4
28477: ARRAY
28478: PPUSH
28479: CALL_OW 449
28483: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28484: LD_ADDR_VAR 0 3
28488: PUSH
28489: LD_VAR 0 5
28493: PPUSH
28494: LD_INT 1
28496: PPUSH
28497: CALL_OW 275
28501: PUSH
28502: LD_VAR 0 4
28506: PUSH
28507: LD_INT 1
28509: ARRAY
28510: GREATEREQUAL
28511: PUSH
28512: LD_VAR 0 5
28516: PPUSH
28517: LD_INT 2
28519: PPUSH
28520: CALL_OW 275
28524: PUSH
28525: LD_VAR 0 4
28529: PUSH
28530: LD_INT 2
28532: ARRAY
28533: GREATEREQUAL
28534: AND
28535: PUSH
28536: LD_VAR 0 5
28540: PPUSH
28541: LD_INT 3
28543: PPUSH
28544: CALL_OW 275
28548: PUSH
28549: LD_VAR 0 4
28553: PUSH
28554: LD_INT 3
28556: ARRAY
28557: GREATEREQUAL
28558: AND
28559: ST_TO_ADDR
// end ;
28560: LD_VAR 0 3
28564: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28565: LD_INT 0
28567: PPUSH
28568: PPUSH
28569: PPUSH
28570: PPUSH
// pom := GetBase ( building ) ;
28571: LD_ADDR_VAR 0 3
28575: PUSH
28576: LD_VAR 0 1
28580: PPUSH
28581: CALL_OW 274
28585: ST_TO_ADDR
// if not pom then
28586: LD_VAR 0 3
28590: NOT
28591: IFFALSE 28595
// exit ;
28593: GO 28765
// btype := GetBType ( building ) ;
28595: LD_ADDR_VAR 0 5
28599: PUSH
28600: LD_VAR 0 1
28604: PPUSH
28605: CALL_OW 266
28609: ST_TO_ADDR
// if btype = b_armoury then
28610: LD_VAR 0 5
28614: PUSH
28615: LD_INT 4
28617: EQUAL
28618: IFFALSE 28628
// btype := b_barracks ;
28620: LD_ADDR_VAR 0 5
28624: PUSH
28625: LD_INT 5
28627: ST_TO_ADDR
// if btype = b_depot then
28628: LD_VAR 0 5
28632: PUSH
28633: LD_INT 0
28635: EQUAL
28636: IFFALSE 28646
// btype := b_warehouse ;
28638: LD_ADDR_VAR 0 5
28642: PUSH
28643: LD_INT 1
28645: ST_TO_ADDR
// if btype = b_workshop then
28646: LD_VAR 0 5
28650: PUSH
28651: LD_INT 2
28653: EQUAL
28654: IFFALSE 28664
// btype := b_factory ;
28656: LD_ADDR_VAR 0 5
28660: PUSH
28661: LD_INT 3
28663: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28664: LD_ADDR_VAR 0 4
28668: PUSH
28669: LD_VAR 0 5
28673: PPUSH
28674: LD_VAR 0 1
28678: PPUSH
28679: CALL_OW 248
28683: PPUSH
28684: CALL_OW 450
28688: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28689: LD_ADDR_VAR 0 2
28693: PUSH
28694: LD_VAR 0 3
28698: PPUSH
28699: LD_INT 1
28701: PPUSH
28702: CALL_OW 275
28706: PUSH
28707: LD_VAR 0 4
28711: PUSH
28712: LD_INT 1
28714: ARRAY
28715: GREATEREQUAL
28716: PUSH
28717: LD_VAR 0 3
28721: PPUSH
28722: LD_INT 2
28724: PPUSH
28725: CALL_OW 275
28729: PUSH
28730: LD_VAR 0 4
28734: PUSH
28735: LD_INT 2
28737: ARRAY
28738: GREATEREQUAL
28739: AND
28740: PUSH
28741: LD_VAR 0 3
28745: PPUSH
28746: LD_INT 3
28748: PPUSH
28749: CALL_OW 275
28753: PUSH
28754: LD_VAR 0 4
28758: PUSH
28759: LD_INT 3
28761: ARRAY
28762: GREATEREQUAL
28763: AND
28764: ST_TO_ADDR
// end ;
28765: LD_VAR 0 2
28769: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28770: LD_INT 0
28772: PPUSH
28773: PPUSH
28774: PPUSH
// pom := GetBase ( building ) ;
28775: LD_ADDR_VAR 0 4
28779: PUSH
28780: LD_VAR 0 1
28784: PPUSH
28785: CALL_OW 274
28789: ST_TO_ADDR
// if not pom then
28790: LD_VAR 0 4
28794: NOT
28795: IFFALSE 28799
// exit ;
28797: GO 28900
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28799: LD_ADDR_VAR 0 5
28803: PUSH
28804: LD_VAR 0 2
28808: PPUSH
28809: LD_VAR 0 1
28813: PPUSH
28814: CALL_OW 248
28818: PPUSH
28819: CALL_OW 450
28823: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28824: LD_ADDR_VAR 0 3
28828: PUSH
28829: LD_VAR 0 4
28833: PPUSH
28834: LD_INT 1
28836: PPUSH
28837: CALL_OW 275
28841: PUSH
28842: LD_VAR 0 5
28846: PUSH
28847: LD_INT 1
28849: ARRAY
28850: GREATEREQUAL
28851: PUSH
28852: LD_VAR 0 4
28856: PPUSH
28857: LD_INT 2
28859: PPUSH
28860: CALL_OW 275
28864: PUSH
28865: LD_VAR 0 5
28869: PUSH
28870: LD_INT 2
28872: ARRAY
28873: GREATEREQUAL
28874: AND
28875: PUSH
28876: LD_VAR 0 4
28880: PPUSH
28881: LD_INT 3
28883: PPUSH
28884: CALL_OW 275
28888: PUSH
28889: LD_VAR 0 5
28893: PUSH
28894: LD_INT 3
28896: ARRAY
28897: GREATEREQUAL
28898: AND
28899: ST_TO_ADDR
// end ;
28900: LD_VAR 0 3
28904: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28905: LD_INT 0
28907: PPUSH
28908: PPUSH
28909: PPUSH
28910: PPUSH
28911: PPUSH
28912: PPUSH
28913: PPUSH
28914: PPUSH
28915: PPUSH
28916: PPUSH
28917: PPUSH
// result := false ;
28918: LD_ADDR_VAR 0 8
28922: PUSH
28923: LD_INT 0
28925: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28926: LD_VAR 0 5
28930: NOT
28931: PUSH
28932: LD_VAR 0 1
28936: NOT
28937: OR
28938: PUSH
28939: LD_VAR 0 2
28943: NOT
28944: OR
28945: PUSH
28946: LD_VAR 0 3
28950: NOT
28951: OR
28952: IFFALSE 28956
// exit ;
28954: GO 29770
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28956: LD_ADDR_VAR 0 14
28960: PUSH
28961: LD_VAR 0 1
28965: PPUSH
28966: LD_VAR 0 2
28970: PPUSH
28971: LD_VAR 0 3
28975: PPUSH
28976: LD_VAR 0 4
28980: PPUSH
28981: LD_VAR 0 5
28985: PUSH
28986: LD_INT 1
28988: ARRAY
28989: PPUSH
28990: CALL_OW 248
28994: PPUSH
28995: LD_INT 0
28997: PPUSH
28998: CALL 31023 0 6
29002: ST_TO_ADDR
// if not hexes then
29003: LD_VAR 0 14
29007: NOT
29008: IFFALSE 29012
// exit ;
29010: GO 29770
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29012: LD_ADDR_VAR 0 17
29016: PUSH
29017: LD_VAR 0 5
29021: PPUSH
29022: LD_INT 22
29024: PUSH
29025: LD_VAR 0 13
29029: PPUSH
29030: CALL_OW 255
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 2
29041: PUSH
29042: LD_INT 30
29044: PUSH
29045: LD_INT 0
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 30
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: LIST
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PPUSH
29071: CALL_OW 72
29075: ST_TO_ADDR
// for i = 1 to hexes do
29076: LD_ADDR_VAR 0 9
29080: PUSH
29081: DOUBLE
29082: LD_INT 1
29084: DEC
29085: ST_TO_ADDR
29086: LD_VAR 0 14
29090: PUSH
29091: FOR_TO
29092: IFFALSE 29768
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29094: LD_ADDR_VAR 0 13
29098: PUSH
29099: LD_VAR 0 14
29103: PUSH
29104: LD_VAR 0 9
29108: ARRAY
29109: PUSH
29110: LD_INT 1
29112: ARRAY
29113: PPUSH
29114: LD_VAR 0 14
29118: PUSH
29119: LD_VAR 0 9
29123: ARRAY
29124: PUSH
29125: LD_INT 2
29127: ARRAY
29128: PPUSH
29129: CALL_OW 428
29133: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29134: LD_VAR 0 14
29138: PUSH
29139: LD_VAR 0 9
29143: ARRAY
29144: PUSH
29145: LD_INT 1
29147: ARRAY
29148: PPUSH
29149: LD_VAR 0 14
29153: PUSH
29154: LD_VAR 0 9
29158: ARRAY
29159: PUSH
29160: LD_INT 2
29162: ARRAY
29163: PPUSH
29164: CALL_OW 351
29168: PUSH
29169: LD_VAR 0 14
29173: PUSH
29174: LD_VAR 0 9
29178: ARRAY
29179: PUSH
29180: LD_INT 1
29182: ARRAY
29183: PPUSH
29184: LD_VAR 0 14
29188: PUSH
29189: LD_VAR 0 9
29193: ARRAY
29194: PUSH
29195: LD_INT 2
29197: ARRAY
29198: PPUSH
29199: CALL_OW 488
29203: NOT
29204: OR
29205: PUSH
29206: LD_VAR 0 13
29210: PPUSH
29211: CALL_OW 247
29215: PUSH
29216: LD_INT 3
29218: EQUAL
29219: OR
29220: IFFALSE 29226
// exit ;
29222: POP
29223: POP
29224: GO 29770
// if not tmp then
29226: LD_VAR 0 13
29230: NOT
29231: IFFALSE 29235
// continue ;
29233: GO 29091
// result := true ;
29235: LD_ADDR_VAR 0 8
29239: PUSH
29240: LD_INT 1
29242: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29243: LD_VAR 0 6
29247: PUSH
29248: LD_VAR 0 13
29252: PPUSH
29253: CALL_OW 247
29257: PUSH
29258: LD_INT 2
29260: EQUAL
29261: AND
29262: PUSH
29263: LD_VAR 0 13
29267: PPUSH
29268: CALL_OW 263
29272: PUSH
29273: LD_INT 1
29275: EQUAL
29276: AND
29277: IFFALSE 29441
// begin if IsDrivenBy ( tmp ) then
29279: LD_VAR 0 13
29283: PPUSH
29284: CALL_OW 311
29288: IFFALSE 29292
// continue ;
29290: GO 29091
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29292: LD_VAR 0 6
29296: PPUSH
29297: LD_INT 3
29299: PUSH
29300: LD_INT 60
29302: PUSH
29303: EMPTY
29304: LIST
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 3
29312: PUSH
29313: LD_INT 55
29315: PUSH
29316: EMPTY
29317: LIST
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PPUSH
29327: CALL_OW 72
29331: IFFALSE 29439
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29333: LD_ADDR_VAR 0 18
29337: PUSH
29338: LD_VAR 0 6
29342: PPUSH
29343: LD_INT 3
29345: PUSH
29346: LD_INT 60
29348: PUSH
29349: EMPTY
29350: LIST
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 3
29358: PUSH
29359: LD_INT 55
29361: PUSH
29362: EMPTY
29363: LIST
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PPUSH
29373: CALL_OW 72
29377: PUSH
29378: LD_INT 1
29380: ARRAY
29381: ST_TO_ADDR
// if IsInUnit ( driver ) then
29382: LD_VAR 0 18
29386: PPUSH
29387: CALL_OW 310
29391: IFFALSE 29402
// ComExit ( driver ) ;
29393: LD_VAR 0 18
29397: PPUSH
29398: CALL 54804 0 1
// AddComEnterUnit ( driver , tmp ) ;
29402: LD_VAR 0 18
29406: PPUSH
29407: LD_VAR 0 13
29411: PPUSH
29412: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29416: LD_VAR 0 18
29420: PPUSH
29421: LD_VAR 0 7
29425: PPUSH
29426: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29430: LD_VAR 0 18
29434: PPUSH
29435: CALL_OW 181
// end ; continue ;
29439: GO 29091
// end ; if not cleaners or not tmp in cleaners then
29441: LD_VAR 0 6
29445: NOT
29446: PUSH
29447: LD_VAR 0 13
29451: PUSH
29452: LD_VAR 0 6
29456: IN
29457: NOT
29458: OR
29459: IFFALSE 29766
// begin if dep then
29461: LD_VAR 0 17
29465: IFFALSE 29601
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29467: LD_ADDR_VAR 0 16
29471: PUSH
29472: LD_VAR 0 17
29476: PUSH
29477: LD_INT 1
29479: ARRAY
29480: PPUSH
29481: CALL_OW 250
29485: PPUSH
29486: LD_VAR 0 17
29490: PUSH
29491: LD_INT 1
29493: ARRAY
29494: PPUSH
29495: CALL_OW 254
29499: PPUSH
29500: LD_INT 5
29502: PPUSH
29503: CALL_OW 272
29507: PUSH
29508: LD_VAR 0 17
29512: PUSH
29513: LD_INT 1
29515: ARRAY
29516: PPUSH
29517: CALL_OW 251
29521: PPUSH
29522: LD_VAR 0 17
29526: PUSH
29527: LD_INT 1
29529: ARRAY
29530: PPUSH
29531: CALL_OW 254
29535: PPUSH
29536: LD_INT 5
29538: PPUSH
29539: CALL_OW 273
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29548: LD_VAR 0 16
29552: PUSH
29553: LD_INT 1
29555: ARRAY
29556: PPUSH
29557: LD_VAR 0 16
29561: PUSH
29562: LD_INT 2
29564: ARRAY
29565: PPUSH
29566: CALL_OW 488
29570: IFFALSE 29601
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29572: LD_VAR 0 13
29576: PPUSH
29577: LD_VAR 0 16
29581: PUSH
29582: LD_INT 1
29584: ARRAY
29585: PPUSH
29586: LD_VAR 0 16
29590: PUSH
29591: LD_INT 2
29593: ARRAY
29594: PPUSH
29595: CALL_OW 111
// continue ;
29599: GO 29091
// end ; end ; r := GetDir ( tmp ) ;
29601: LD_ADDR_VAR 0 15
29605: PUSH
29606: LD_VAR 0 13
29610: PPUSH
29611: CALL_OW 254
29615: ST_TO_ADDR
// if r = 5 then
29616: LD_VAR 0 15
29620: PUSH
29621: LD_INT 5
29623: EQUAL
29624: IFFALSE 29634
// r := 0 ;
29626: LD_ADDR_VAR 0 15
29630: PUSH
29631: LD_INT 0
29633: ST_TO_ADDR
// for j = r to 5 do
29634: LD_ADDR_VAR 0 10
29638: PUSH
29639: DOUBLE
29640: LD_VAR 0 15
29644: DEC
29645: ST_TO_ADDR
29646: LD_INT 5
29648: PUSH
29649: FOR_TO
29650: IFFALSE 29764
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29652: LD_ADDR_VAR 0 11
29656: PUSH
29657: LD_VAR 0 13
29661: PPUSH
29662: CALL_OW 250
29666: PPUSH
29667: LD_VAR 0 10
29671: PPUSH
29672: LD_INT 2
29674: PPUSH
29675: CALL_OW 272
29679: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29680: LD_ADDR_VAR 0 12
29684: PUSH
29685: LD_VAR 0 13
29689: PPUSH
29690: CALL_OW 251
29694: PPUSH
29695: LD_VAR 0 10
29699: PPUSH
29700: LD_INT 2
29702: PPUSH
29703: CALL_OW 273
29707: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29708: LD_VAR 0 11
29712: PPUSH
29713: LD_VAR 0 12
29717: PPUSH
29718: CALL_OW 488
29722: PUSH
29723: LD_VAR 0 11
29727: PPUSH
29728: LD_VAR 0 12
29732: PPUSH
29733: CALL_OW 428
29737: NOT
29738: AND
29739: IFFALSE 29762
// begin ComMoveXY ( tmp , _x , _y ) ;
29741: LD_VAR 0 13
29745: PPUSH
29746: LD_VAR 0 11
29750: PPUSH
29751: LD_VAR 0 12
29755: PPUSH
29756: CALL_OW 111
// break ;
29760: GO 29764
// end ; end ;
29762: GO 29649
29764: POP
29765: POP
// end ; end ;
29766: GO 29091
29768: POP
29769: POP
// end ;
29770: LD_VAR 0 8
29774: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29775: LD_INT 0
29777: PPUSH
// result := true ;
29778: LD_ADDR_VAR 0 3
29782: PUSH
29783: LD_INT 1
29785: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29786: LD_VAR 0 2
29790: PUSH
29791: LD_INT 24
29793: DOUBLE
29794: EQUAL
29795: IFTRUE 29805
29797: LD_INT 33
29799: DOUBLE
29800: EQUAL
29801: IFTRUE 29805
29803: GO 29830
29805: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29806: LD_ADDR_VAR 0 3
29810: PUSH
29811: LD_INT 32
29813: PPUSH
29814: LD_VAR 0 1
29818: PPUSH
29819: CALL_OW 321
29823: PUSH
29824: LD_INT 2
29826: EQUAL
29827: ST_TO_ADDR
29828: GO 30146
29830: LD_INT 20
29832: DOUBLE
29833: EQUAL
29834: IFTRUE 29838
29836: GO 29863
29838: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29839: LD_ADDR_VAR 0 3
29843: PUSH
29844: LD_INT 6
29846: PPUSH
29847: LD_VAR 0 1
29851: PPUSH
29852: CALL_OW 321
29856: PUSH
29857: LD_INT 2
29859: EQUAL
29860: ST_TO_ADDR
29861: GO 30146
29863: LD_INT 22
29865: DOUBLE
29866: EQUAL
29867: IFTRUE 29877
29869: LD_INT 36
29871: DOUBLE
29872: EQUAL
29873: IFTRUE 29877
29875: GO 29902
29877: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29878: LD_ADDR_VAR 0 3
29882: PUSH
29883: LD_INT 15
29885: PPUSH
29886: LD_VAR 0 1
29890: PPUSH
29891: CALL_OW 321
29895: PUSH
29896: LD_INT 2
29898: EQUAL
29899: ST_TO_ADDR
29900: GO 30146
29902: LD_INT 30
29904: DOUBLE
29905: EQUAL
29906: IFTRUE 29910
29908: GO 29935
29910: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29911: LD_ADDR_VAR 0 3
29915: PUSH
29916: LD_INT 20
29918: PPUSH
29919: LD_VAR 0 1
29923: PPUSH
29924: CALL_OW 321
29928: PUSH
29929: LD_INT 2
29931: EQUAL
29932: ST_TO_ADDR
29933: GO 30146
29935: LD_INT 28
29937: DOUBLE
29938: EQUAL
29939: IFTRUE 29949
29941: LD_INT 21
29943: DOUBLE
29944: EQUAL
29945: IFTRUE 29949
29947: GO 29974
29949: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29950: LD_ADDR_VAR 0 3
29954: PUSH
29955: LD_INT 21
29957: PPUSH
29958: LD_VAR 0 1
29962: PPUSH
29963: CALL_OW 321
29967: PUSH
29968: LD_INT 2
29970: EQUAL
29971: ST_TO_ADDR
29972: GO 30146
29974: LD_INT 16
29976: DOUBLE
29977: EQUAL
29978: IFTRUE 29982
29980: GO 30007
29982: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29983: LD_ADDR_VAR 0 3
29987: PUSH
29988: LD_INT 84
29990: PPUSH
29991: LD_VAR 0 1
29995: PPUSH
29996: CALL_OW 321
30000: PUSH
30001: LD_INT 2
30003: EQUAL
30004: ST_TO_ADDR
30005: GO 30146
30007: LD_INT 19
30009: DOUBLE
30010: EQUAL
30011: IFTRUE 30021
30013: LD_INT 23
30015: DOUBLE
30016: EQUAL
30017: IFTRUE 30021
30019: GO 30046
30021: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30022: LD_ADDR_VAR 0 3
30026: PUSH
30027: LD_INT 83
30029: PPUSH
30030: LD_VAR 0 1
30034: PPUSH
30035: CALL_OW 321
30039: PUSH
30040: LD_INT 2
30042: EQUAL
30043: ST_TO_ADDR
30044: GO 30146
30046: LD_INT 17
30048: DOUBLE
30049: EQUAL
30050: IFTRUE 30054
30052: GO 30079
30054: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30055: LD_ADDR_VAR 0 3
30059: PUSH
30060: LD_INT 39
30062: PPUSH
30063: LD_VAR 0 1
30067: PPUSH
30068: CALL_OW 321
30072: PUSH
30073: LD_INT 2
30075: EQUAL
30076: ST_TO_ADDR
30077: GO 30146
30079: LD_INT 18
30081: DOUBLE
30082: EQUAL
30083: IFTRUE 30087
30085: GO 30112
30087: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30088: LD_ADDR_VAR 0 3
30092: PUSH
30093: LD_INT 40
30095: PPUSH
30096: LD_VAR 0 1
30100: PPUSH
30101: CALL_OW 321
30105: PUSH
30106: LD_INT 2
30108: EQUAL
30109: ST_TO_ADDR
30110: GO 30146
30112: LD_INT 27
30114: DOUBLE
30115: EQUAL
30116: IFTRUE 30120
30118: GO 30145
30120: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30121: LD_ADDR_VAR 0 3
30125: PUSH
30126: LD_INT 35
30128: PPUSH
30129: LD_VAR 0 1
30133: PPUSH
30134: CALL_OW 321
30138: PUSH
30139: LD_INT 2
30141: EQUAL
30142: ST_TO_ADDR
30143: GO 30146
30145: POP
// end ;
30146: LD_VAR 0 3
30150: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30151: LD_INT 0
30153: PPUSH
30154: PPUSH
30155: PPUSH
30156: PPUSH
30157: PPUSH
30158: PPUSH
30159: PPUSH
30160: PPUSH
30161: PPUSH
30162: PPUSH
30163: PPUSH
// result := false ;
30164: LD_ADDR_VAR 0 6
30168: PUSH
30169: LD_INT 0
30171: ST_TO_ADDR
// if btype = b_depot then
30172: LD_VAR 0 2
30176: PUSH
30177: LD_INT 0
30179: EQUAL
30180: IFFALSE 30192
// begin result := true ;
30182: LD_ADDR_VAR 0 6
30186: PUSH
30187: LD_INT 1
30189: ST_TO_ADDR
// exit ;
30190: GO 31018
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30192: LD_VAR 0 1
30196: NOT
30197: PUSH
30198: LD_VAR 0 1
30202: PPUSH
30203: CALL_OW 266
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: IN
30218: NOT
30219: OR
30220: PUSH
30221: LD_VAR 0 2
30225: NOT
30226: OR
30227: PUSH
30228: LD_VAR 0 5
30232: PUSH
30233: LD_INT 0
30235: PUSH
30236: LD_INT 1
30238: PUSH
30239: LD_INT 2
30241: PUSH
30242: LD_INT 3
30244: PUSH
30245: LD_INT 4
30247: PUSH
30248: LD_INT 5
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: IN
30259: NOT
30260: OR
30261: PUSH
30262: LD_VAR 0 3
30266: PPUSH
30267: LD_VAR 0 4
30271: PPUSH
30272: CALL_OW 488
30276: NOT
30277: OR
30278: IFFALSE 30282
// exit ;
30280: GO 31018
// side := GetSide ( depot ) ;
30282: LD_ADDR_VAR 0 9
30286: PUSH
30287: LD_VAR 0 1
30291: PPUSH
30292: CALL_OW 255
30296: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30297: LD_VAR 0 9
30301: PPUSH
30302: LD_VAR 0 2
30306: PPUSH
30307: CALL 29775 0 2
30311: NOT
30312: IFFALSE 30316
// exit ;
30314: GO 31018
// pom := GetBase ( depot ) ;
30316: LD_ADDR_VAR 0 10
30320: PUSH
30321: LD_VAR 0 1
30325: PPUSH
30326: CALL_OW 274
30330: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30331: LD_ADDR_VAR 0 11
30335: PUSH
30336: LD_VAR 0 2
30340: PPUSH
30341: LD_VAR 0 1
30345: PPUSH
30346: CALL_OW 248
30350: PPUSH
30351: CALL_OW 450
30355: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30356: LD_VAR 0 10
30360: PPUSH
30361: LD_INT 1
30363: PPUSH
30364: CALL_OW 275
30368: PUSH
30369: LD_VAR 0 11
30373: PUSH
30374: LD_INT 1
30376: ARRAY
30377: GREATEREQUAL
30378: PUSH
30379: LD_VAR 0 10
30383: PPUSH
30384: LD_INT 2
30386: PPUSH
30387: CALL_OW 275
30391: PUSH
30392: LD_VAR 0 11
30396: PUSH
30397: LD_INT 2
30399: ARRAY
30400: GREATEREQUAL
30401: AND
30402: PUSH
30403: LD_VAR 0 10
30407: PPUSH
30408: LD_INT 3
30410: PPUSH
30411: CALL_OW 275
30415: PUSH
30416: LD_VAR 0 11
30420: PUSH
30421: LD_INT 3
30423: ARRAY
30424: GREATEREQUAL
30425: AND
30426: NOT
30427: IFFALSE 30431
// exit ;
30429: GO 31018
// if GetBType ( depot ) = b_depot then
30431: LD_VAR 0 1
30435: PPUSH
30436: CALL_OW 266
30440: PUSH
30441: LD_INT 0
30443: EQUAL
30444: IFFALSE 30456
// dist := 28 else
30446: LD_ADDR_VAR 0 14
30450: PUSH
30451: LD_INT 28
30453: ST_TO_ADDR
30454: GO 30464
// dist := 36 ;
30456: LD_ADDR_VAR 0 14
30460: PUSH
30461: LD_INT 36
30463: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30464: LD_VAR 0 1
30468: PPUSH
30469: LD_VAR 0 3
30473: PPUSH
30474: LD_VAR 0 4
30478: PPUSH
30479: CALL_OW 297
30483: PUSH
30484: LD_VAR 0 14
30488: GREATER
30489: IFFALSE 30493
// exit ;
30491: GO 31018
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30493: LD_ADDR_VAR 0 12
30497: PUSH
30498: LD_VAR 0 2
30502: PPUSH
30503: LD_VAR 0 3
30507: PPUSH
30508: LD_VAR 0 4
30512: PPUSH
30513: LD_VAR 0 5
30517: PPUSH
30518: LD_VAR 0 1
30522: PPUSH
30523: CALL_OW 248
30527: PPUSH
30528: LD_INT 0
30530: PPUSH
30531: CALL 31023 0 6
30535: ST_TO_ADDR
// if not hexes then
30536: LD_VAR 0 12
30540: NOT
30541: IFFALSE 30545
// exit ;
30543: GO 31018
// hex := GetHexInfo ( x , y ) ;
30545: LD_ADDR_VAR 0 15
30549: PUSH
30550: LD_VAR 0 3
30554: PPUSH
30555: LD_VAR 0 4
30559: PPUSH
30560: CALL_OW 546
30564: ST_TO_ADDR
// if hex [ 1 ] then
30565: LD_VAR 0 15
30569: PUSH
30570: LD_INT 1
30572: ARRAY
30573: IFFALSE 30577
// exit ;
30575: GO 31018
// height := hex [ 2 ] ;
30577: LD_ADDR_VAR 0 13
30581: PUSH
30582: LD_VAR 0 15
30586: PUSH
30587: LD_INT 2
30589: ARRAY
30590: ST_TO_ADDR
// for i = 1 to hexes do
30591: LD_ADDR_VAR 0 7
30595: PUSH
30596: DOUBLE
30597: LD_INT 1
30599: DEC
30600: ST_TO_ADDR
30601: LD_VAR 0 12
30605: PUSH
30606: FOR_TO
30607: IFFALSE 30937
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30609: LD_VAR 0 12
30613: PUSH
30614: LD_VAR 0 7
30618: ARRAY
30619: PUSH
30620: LD_INT 1
30622: ARRAY
30623: PPUSH
30624: LD_VAR 0 12
30628: PUSH
30629: LD_VAR 0 7
30633: ARRAY
30634: PUSH
30635: LD_INT 2
30637: ARRAY
30638: PPUSH
30639: CALL_OW 488
30643: NOT
30644: PUSH
30645: LD_VAR 0 12
30649: PUSH
30650: LD_VAR 0 7
30654: ARRAY
30655: PUSH
30656: LD_INT 1
30658: ARRAY
30659: PPUSH
30660: LD_VAR 0 12
30664: PUSH
30665: LD_VAR 0 7
30669: ARRAY
30670: PUSH
30671: LD_INT 2
30673: ARRAY
30674: PPUSH
30675: CALL_OW 428
30679: PUSH
30680: LD_INT 0
30682: GREATER
30683: OR
30684: PUSH
30685: LD_VAR 0 12
30689: PUSH
30690: LD_VAR 0 7
30694: ARRAY
30695: PUSH
30696: LD_INT 1
30698: ARRAY
30699: PPUSH
30700: LD_VAR 0 12
30704: PUSH
30705: LD_VAR 0 7
30709: ARRAY
30710: PUSH
30711: LD_INT 2
30713: ARRAY
30714: PPUSH
30715: CALL_OW 351
30719: OR
30720: IFFALSE 30726
// exit ;
30722: POP
30723: POP
30724: GO 31018
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30726: LD_ADDR_VAR 0 8
30730: PUSH
30731: LD_VAR 0 12
30735: PUSH
30736: LD_VAR 0 7
30740: ARRAY
30741: PUSH
30742: LD_INT 1
30744: ARRAY
30745: PPUSH
30746: LD_VAR 0 12
30750: PUSH
30751: LD_VAR 0 7
30755: ARRAY
30756: PUSH
30757: LD_INT 2
30759: ARRAY
30760: PPUSH
30761: CALL_OW 546
30765: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30766: LD_VAR 0 8
30770: PUSH
30771: LD_INT 1
30773: ARRAY
30774: PUSH
30775: LD_VAR 0 8
30779: PUSH
30780: LD_INT 2
30782: ARRAY
30783: PUSH
30784: LD_VAR 0 13
30788: PUSH
30789: LD_INT 2
30791: PLUS
30792: GREATER
30793: OR
30794: PUSH
30795: LD_VAR 0 8
30799: PUSH
30800: LD_INT 2
30802: ARRAY
30803: PUSH
30804: LD_VAR 0 13
30808: PUSH
30809: LD_INT 2
30811: MINUS
30812: LESS
30813: OR
30814: PUSH
30815: LD_VAR 0 8
30819: PUSH
30820: LD_INT 3
30822: ARRAY
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: LD_INT 8
30829: PUSH
30830: LD_INT 9
30832: PUSH
30833: LD_INT 10
30835: PUSH
30836: LD_INT 11
30838: PUSH
30839: LD_INT 12
30841: PUSH
30842: LD_INT 13
30844: PUSH
30845: LD_INT 16
30847: PUSH
30848: LD_INT 17
30850: PUSH
30851: LD_INT 18
30853: PUSH
30854: LD_INT 19
30856: PUSH
30857: LD_INT 20
30859: PUSH
30860: LD_INT 21
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: IN
30878: NOT
30879: OR
30880: PUSH
30881: LD_VAR 0 8
30885: PUSH
30886: LD_INT 5
30888: ARRAY
30889: NOT
30890: OR
30891: PUSH
30892: LD_VAR 0 8
30896: PUSH
30897: LD_INT 6
30899: ARRAY
30900: PUSH
30901: LD_INT 1
30903: PUSH
30904: LD_INT 2
30906: PUSH
30907: LD_INT 7
30909: PUSH
30910: LD_INT 9
30912: PUSH
30913: LD_INT 10
30915: PUSH
30916: LD_INT 11
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: IN
30927: NOT
30928: OR
30929: IFFALSE 30935
// exit ;
30931: POP
30932: POP
30933: GO 31018
// end ;
30935: GO 30606
30937: POP
30938: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30939: LD_VAR 0 9
30943: PPUSH
30944: LD_VAR 0 3
30948: PPUSH
30949: LD_VAR 0 4
30953: PPUSH
30954: LD_INT 20
30956: PPUSH
30957: CALL 22941 0 4
30961: PUSH
30962: LD_INT 4
30964: ARRAY
30965: IFFALSE 30969
// exit ;
30967: GO 31018
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30969: LD_VAR 0 2
30973: PUSH
30974: LD_INT 29
30976: PUSH
30977: LD_INT 30
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: IN
30984: PUSH
30985: LD_VAR 0 3
30989: PPUSH
30990: LD_VAR 0 4
30994: PPUSH
30995: LD_VAR 0 9
30999: PPUSH
31000: CALL_OW 440
31004: NOT
31005: AND
31006: IFFALSE 31010
// exit ;
31008: GO 31018
// result := true ;
31010: LD_ADDR_VAR 0 6
31014: PUSH
31015: LD_INT 1
31017: ST_TO_ADDR
// end ;
31018: LD_VAR 0 6
31022: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31023: LD_INT 0
31025: PPUSH
31026: PPUSH
31027: PPUSH
31028: PPUSH
31029: PPUSH
31030: PPUSH
31031: PPUSH
31032: PPUSH
31033: PPUSH
31034: PPUSH
31035: PPUSH
31036: PPUSH
31037: PPUSH
31038: PPUSH
31039: PPUSH
31040: PPUSH
31041: PPUSH
31042: PPUSH
31043: PPUSH
31044: PPUSH
31045: PPUSH
31046: PPUSH
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
31053: PPUSH
31054: PPUSH
31055: PPUSH
31056: PPUSH
31057: PPUSH
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
31063: PPUSH
31064: PPUSH
31065: PPUSH
31066: PPUSH
31067: PPUSH
31068: PPUSH
31069: PPUSH
31070: PPUSH
31071: PPUSH
31072: PPUSH
31073: PPUSH
31074: PPUSH
31075: PPUSH
31076: PPUSH
31077: PPUSH
31078: PPUSH
31079: PPUSH
31080: PPUSH
31081: PPUSH
31082: PPUSH
// result = [ ] ;
31083: LD_ADDR_VAR 0 7
31087: PUSH
31088: EMPTY
31089: ST_TO_ADDR
// temp_list = [ ] ;
31090: LD_ADDR_VAR 0 9
31094: PUSH
31095: EMPTY
31096: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31097: LD_VAR 0 4
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: LD_INT 2
31110: PUSH
31111: LD_INT 3
31113: PUSH
31114: LD_INT 4
31116: PUSH
31117: LD_INT 5
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: IN
31128: NOT
31129: PUSH
31130: LD_VAR 0 1
31134: PUSH
31135: LD_INT 0
31137: PUSH
31138: LD_INT 1
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: IN
31145: PUSH
31146: LD_VAR 0 5
31150: PUSH
31151: LD_INT 1
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: LD_INT 3
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: LIST
31164: IN
31165: NOT
31166: AND
31167: OR
31168: IFFALSE 31172
// exit ;
31170: GO 49563
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31172: LD_VAR 0 1
31176: PUSH
31177: LD_INT 6
31179: PUSH
31180: LD_INT 7
31182: PUSH
31183: LD_INT 8
31185: PUSH
31186: LD_INT 13
31188: PUSH
31189: LD_INT 12
31191: PUSH
31192: LD_INT 15
31194: PUSH
31195: LD_INT 11
31197: PUSH
31198: LD_INT 14
31200: PUSH
31201: LD_INT 10
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: IN
31215: IFFALSE 31225
// btype = b_lab ;
31217: LD_ADDR_VAR 0 1
31221: PUSH
31222: LD_INT 6
31224: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31225: LD_VAR 0 6
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: LD_INT 1
31235: PUSH
31236: LD_INT 2
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: LIST
31243: IN
31244: NOT
31245: PUSH
31246: LD_VAR 0 1
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: LD_INT 2
31259: PUSH
31260: LD_INT 3
31262: PUSH
31263: LD_INT 6
31265: PUSH
31266: LD_INT 36
31268: PUSH
31269: LD_INT 4
31271: PUSH
31272: LD_INT 5
31274: PUSH
31275: LD_INT 31
31277: PUSH
31278: LD_INT 32
31280: PUSH
31281: LD_INT 33
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: IN
31297: NOT
31298: PUSH
31299: LD_VAR 0 6
31303: PUSH
31304: LD_INT 1
31306: EQUAL
31307: AND
31308: OR
31309: PUSH
31310: LD_VAR 0 1
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: LD_INT 3
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: IN
31325: NOT
31326: PUSH
31327: LD_VAR 0 6
31331: PUSH
31332: LD_INT 2
31334: EQUAL
31335: AND
31336: OR
31337: IFFALSE 31347
// mode = 0 ;
31339: LD_ADDR_VAR 0 6
31343: PUSH
31344: LD_INT 0
31346: ST_TO_ADDR
// case mode of 0 :
31347: LD_VAR 0 6
31351: PUSH
31352: LD_INT 0
31354: DOUBLE
31355: EQUAL
31356: IFTRUE 31360
31358: GO 42813
31360: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31361: LD_ADDR_VAR 0 11
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: LD_INT 0
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 0
31378: PUSH
31379: LD_INT 1
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 1
31399: PUSH
31400: LD_INT 1
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: LD_INT 0
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 1
31430: NEG
31431: PUSH
31432: LD_INT 1
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 1
31442: NEG
31443: PUSH
31444: LD_INT 2
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 0
31454: PUSH
31455: LD_INT 2
31457: NEG
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: LD_INT 2
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 0
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: LD_INT 3
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: LD_INT 3
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 1
31527: NEG
31528: PUSH
31529: LD_INT 2
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31554: LD_ADDR_VAR 0 12
31558: PUSH
31559: LD_INT 0
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 0
31571: PUSH
31572: LD_INT 1
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: LD_INT 1
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: LD_INT 1
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: NEG
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: LD_INT 1
31638: NEG
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 2
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 2
31656: PUSH
31657: LD_INT 1
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 2
31677: NEG
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 2
31688: NEG
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 2
31700: NEG
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 3
31711: NEG
31712: PUSH
31713: LD_INT 0
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 3
31722: NEG
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31750: LD_ADDR_VAR 0 13
31754: PUSH
31755: LD_INT 0
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: LD_INT 1
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: PUSH
31789: LD_INT 1
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: LD_INT 1
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 1
31808: NEG
31809: PUSH
31810: LD_INT 0
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: NEG
31820: PUSH
31821: LD_INT 1
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 1
31831: NEG
31832: PUSH
31833: LD_INT 2
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: LD_INT 1
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: LD_INT 2
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 1
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 2
31873: NEG
31874: PUSH
31875: LD_INT 1
31877: NEG
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 2
31885: NEG
31886: PUSH
31887: LD_INT 2
31889: NEG
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: NEG
31898: PUSH
31899: LD_INT 3
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 3
31909: NEG
31910: PUSH
31911: LD_INT 2
31913: NEG
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 3
31921: NEG
31922: PUSH
31923: LD_INT 3
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31949: LD_ADDR_VAR 0 14
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 0
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: LD_INT 0
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 1
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: LD_INT 1
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 1
32030: NEG
32031: PUSH
32032: LD_INT 2
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: LD_INT 2
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: LD_INT 1
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 1
32064: PUSH
32065: LD_INT 2
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: LD_INT 2
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 1
32084: NEG
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: NEG
32096: PUSH
32097: LD_INT 3
32099: NEG
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: LD_INT 3
32110: NEG
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 1
32118: PUSH
32119: LD_INT 2
32121: NEG
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32145: LD_ADDR_VAR 0 15
32149: PUSH
32150: LD_INT 0
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 0
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: LD_INT 0
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: LD_INT 1
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: LD_INT 1
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 1
32203: NEG
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 1
32214: NEG
32215: PUSH
32216: LD_INT 1
32218: NEG
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 1
32226: PUSH
32227: LD_INT 1
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 2
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 2
32247: PUSH
32248: LD_INT 1
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 2
32268: NEG
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 2
32279: NEG
32280: PUSH
32281: LD_INT 1
32283: NEG
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 1
32294: NEG
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 3
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 3
32312: PUSH
32313: LD_INT 1
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32338: LD_ADDR_VAR 0 16
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 0
32355: PUSH
32356: LD_INT 1
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: LD_INT 0
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 1
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 0
32386: PUSH
32387: LD_INT 1
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 1
32407: NEG
32408: PUSH
32409: LD_INT 1
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: LD_INT 2
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 2
32431: PUSH
32432: LD_INT 1
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 2
32441: PUSH
32442: LD_INT 2
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 2
32461: NEG
32462: PUSH
32463: LD_INT 1
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 2
32473: NEG
32474: PUSH
32475: LD_INT 2
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 3
32485: PUSH
32486: LD_INT 2
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 3
32495: PUSH
32496: LD_INT 3
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: PUSH
32506: LD_INT 3
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32531: LD_ADDR_VAR 0 17
32535: PUSH
32536: LD_INT 0
32538: PUSH
32539: LD_INT 0
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 0
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 1
32569: PUSH
32570: LD_INT 1
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: LD_INT 1
32604: NEG
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: LD_INT 2
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 0
32624: PUSH
32625: LD_INT 2
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: LD_INT 1
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 2
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 2
32656: PUSH
32657: LD_INT 1
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 2
32666: PUSH
32667: LD_INT 2
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: PUSH
32677: LD_INT 2
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: LD_INT 2
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: LD_INT 1
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 2
32707: NEG
32708: PUSH
32709: LD_INT 0
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 2
32718: NEG
32719: PUSH
32720: LD_INT 1
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 2
32730: NEG
32731: PUSH
32732: LD_INT 2
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32761: LD_ADDR_VAR 0 18
32765: PUSH
32766: LD_INT 0
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 1
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: LD_INT 1
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: NEG
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 1
32830: NEG
32831: PUSH
32832: LD_INT 1
32834: NEG
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 1
32842: NEG
32843: PUSH
32844: LD_INT 2
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: LD_INT 2
32857: NEG
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 1
32865: PUSH
32866: LD_INT 1
32868: NEG
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 2
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 2
32886: PUSH
32887: LD_INT 1
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 2
32896: PUSH
32897: LD_INT 2
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: PUSH
32907: LD_INT 2
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: LD_INT 2
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 2
32937: NEG
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 2
32948: NEG
32949: PUSH
32950: LD_INT 1
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 2
32960: NEG
32961: PUSH
32962: LD_INT 2
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32991: LD_ADDR_VAR 0 19
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: LD_INT 0
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: LD_INT 1
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: NEG
33061: PUSH
33062: LD_INT 1
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 1
33072: NEG
33073: PUSH
33074: LD_INT 2
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: LD_INT 2
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 1
33095: PUSH
33096: LD_INT 1
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 2
33106: PUSH
33107: LD_INT 0
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 2
33126: PUSH
33127: LD_INT 2
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 2
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 2
33167: NEG
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 2
33178: NEG
33179: PUSH
33180: LD_INT 1
33182: NEG
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 2
33190: NEG
33191: PUSH
33192: LD_INT 2
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33221: LD_ADDR_VAR 0 20
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 0
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 1
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 0
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 1
33290: NEG
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: LD_INT 2
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: LD_INT 2
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: LD_INT 1
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 1
33366: PUSH
33367: LD_INT 2
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: LD_INT 2
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 2
33397: NEG
33398: PUSH
33399: LD_INT 0
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 2
33408: NEG
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: LD_INT 2
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33451: LD_ADDR_VAR 0 21
33455: PUSH
33456: LD_INT 0
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 1
33489: PUSH
33490: LD_INT 1
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 0
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 1
33509: NEG
33510: PUSH
33511: LD_INT 0
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 1
33520: NEG
33521: PUSH
33522: LD_INT 1
33524: NEG
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 1
33532: NEG
33533: PUSH
33534: LD_INT 2
33536: NEG
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 0
33544: PUSH
33545: LD_INT 2
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: LD_INT 1
33558: NEG
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 2
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 2
33576: PUSH
33577: LD_INT 1
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 2
33586: PUSH
33587: LD_INT 2
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: LD_INT 2
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: LD_INT 2
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: NEG
33617: PUSH
33618: LD_INT 1
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 2
33627: NEG
33628: PUSH
33629: LD_INT 0
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 2
33638: NEG
33639: PUSH
33640: LD_INT 1
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 2
33650: NEG
33651: PUSH
33652: LD_INT 2
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33681: LD_ADDR_VAR 0 22
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 0
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 0
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 1
33750: NEG
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 1
33762: NEG
33763: PUSH
33764: LD_INT 2
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: LD_INT 2
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 1
33785: PUSH
33786: LD_INT 1
33788: NEG
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 2
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 2
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: LD_INT 2
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: LD_INT 2
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: LD_INT 1
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 2
33857: NEG
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 2
33868: NEG
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: LD_INT 2
33884: NEG
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33911: LD_ADDR_VAR 0 23
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 0
33928: PUSH
33929: LD_INT 1
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: LD_INT 0
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 1
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 0
33959: PUSH
33960: LD_INT 1
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 1
33969: NEG
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 1
33980: NEG
33981: PUSH
33982: LD_INT 1
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: PUSH
33994: LD_INT 2
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 0
34004: PUSH
34005: LD_INT 2
34007: NEG
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 1
34015: PUSH
34016: LD_INT 1
34018: NEG
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 2
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 2
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 2
34046: PUSH
34047: LD_INT 2
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: LD_INT 2
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: LD_INT 2
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: LD_INT 1
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 2
34087: NEG
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 2
34098: NEG
34099: PUSH
34100: LD_INT 1
34102: NEG
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 2
34110: NEG
34111: PUSH
34112: LD_INT 2
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 2
34122: NEG
34123: PUSH
34124: LD_INT 3
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 1
34134: NEG
34135: PUSH
34136: LD_INT 3
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 1
34146: PUSH
34147: LD_INT 2
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 2
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34191: LD_ADDR_VAR 0 24
34195: PUSH
34196: LD_INT 0
34198: PUSH
34199: LD_INT 0
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 0
34208: PUSH
34209: LD_INT 1
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 1
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 1
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: LD_INT 1
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 1
34249: NEG
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: LD_INT 1
34264: NEG
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: LD_INT 2
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: LD_INT 2
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 2
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 2
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 2
34326: PUSH
34327: LD_INT 2
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: LD_INT 2
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 1
34356: NEG
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 2
34367: NEG
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 2
34378: NEG
34379: PUSH
34380: LD_INT 1
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 2
34390: NEG
34391: PUSH
34392: LD_INT 2
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: LD_INT 2
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 2
34413: PUSH
34414: LD_INT 1
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 3
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 3
34434: PUSH
34435: LD_INT 2
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34467: LD_ADDR_VAR 0 25
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: LD_INT 0
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: LD_INT 1
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: LD_INT 0
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 1
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 0
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 1
34525: NEG
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 1
34548: NEG
34549: PUSH
34550: LD_INT 2
34552: NEG
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: LD_INT 2
34563: NEG
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 1
34571: PUSH
34572: LD_INT 1
34574: NEG
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 2
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 2
34602: PUSH
34603: LD_INT 2
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: LD_INT 2
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 0
34622: PUSH
34623: LD_INT 2
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: LD_INT 1
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 2
34643: NEG
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 2
34654: NEG
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 2
34666: NEG
34667: PUSH
34668: LD_INT 2
34670: NEG
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 3
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 3
34688: PUSH
34689: LD_INT 2
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 2
34698: PUSH
34699: LD_INT 3
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 1
34708: PUSH
34709: LD_INT 3
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34741: LD_ADDR_VAR 0 26
34745: PUSH
34746: LD_INT 0
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 0
34758: PUSH
34759: LD_INT 1
34761: NEG
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 1
34769: PUSH
34770: LD_INT 0
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 1
34779: PUSH
34780: LD_INT 1
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 0
34789: PUSH
34790: LD_INT 1
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 1
34799: NEG
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 1
34810: NEG
34811: PUSH
34812: LD_INT 1
34814: NEG
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: LD_INT 2
34826: NEG
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: LD_INT 2
34837: NEG
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: LD_INT 1
34848: NEG
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 2
34856: PUSH
34857: LD_INT 0
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: LD_INT 1
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 2
34876: PUSH
34877: LD_INT 2
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 1
34886: PUSH
34887: LD_INT 2
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: LD_INT 2
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 1
34906: NEG
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 2
34917: NEG
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 2
34928: NEG
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 2
34940: NEG
34941: PUSH
34942: LD_INT 2
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: LD_INT 3
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: LD_INT 3
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 2
34983: NEG
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35017: LD_ADDR_VAR 0 27
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 1
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 1
35055: PUSH
35056: LD_INT 1
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: NEG
35076: PUSH
35077: LD_INT 0
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 1
35086: NEG
35087: PUSH
35088: LD_INT 1
35090: NEG
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: LD_INT 2
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: LD_INT 2
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 2
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 2
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 2
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 1
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 0
35172: PUSH
35173: LD_INT 2
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 2
35193: NEG
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 2
35204: NEG
35205: PUSH
35206: LD_INT 1
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 2
35216: NEG
35217: PUSH
35218: LD_INT 2
35220: NEG
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 1
35228: NEG
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 2
35239: NEG
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 3
35250: NEG
35251: PUSH
35252: LD_INT 1
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 3
35262: NEG
35263: PUSH
35264: LD_INT 2
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35297: LD_ADDR_VAR 0 28
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: LD_INT 0
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: LD_INT 1
35317: NEG
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: LD_INT 1
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: LD_INT 1
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: LD_INT 0
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 1
35378: NEG
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: LD_INT 2
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: LD_INT 1
35404: NEG
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 2
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 2
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 2
35432: PUSH
35433: LD_INT 2
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: LD_INT 2
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 1
35462: NEG
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 2
35473: NEG
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 2
35484: NEG
35485: PUSH
35486: LD_INT 1
35488: NEG
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 2
35496: NEG
35497: PUSH
35498: LD_INT 2
35500: NEG
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 2
35508: NEG
35509: PUSH
35510: LD_INT 3
35512: NEG
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 1
35520: NEG
35521: PUSH
35522: LD_INT 3
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 3
35532: NEG
35533: PUSH
35534: LD_INT 1
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 3
35544: NEG
35545: PUSH
35546: LD_INT 2
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35579: LD_ADDR_VAR 0 29
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: LD_INT 1
35599: NEG
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 1
35607: PUSH
35608: LD_INT 0
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 1
35617: PUSH
35618: LD_INT 1
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: LD_INT 1
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 1
35637: NEG
35638: PUSH
35639: LD_INT 0
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: NEG
35649: PUSH
35650: LD_INT 1
35652: NEG
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: NEG
35661: PUSH
35662: LD_INT 2
35664: NEG
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: LD_INT 2
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 2
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 2
35704: PUSH
35705: LD_INT 1
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: LD_INT 2
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: LD_INT 2
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 2
35745: NEG
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: NEG
35758: PUSH
35759: LD_INT 2
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 2
35769: NEG
35770: PUSH
35771: LD_INT 3
35773: NEG
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 2
35781: PUSH
35782: LD_INT 1
35784: NEG
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 3
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: LD_INT 3
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: LD_INT 2
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 3
35823: NEG
35824: PUSH
35825: LD_INT 2
35827: NEG
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35858: LD_ADDR_VAR 0 30
35862: PUSH
35863: LD_INT 0
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: LD_INT 1
35878: NEG
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 1
35916: NEG
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: LD_INT 2
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: LD_INT 2
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 2
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 2
35983: PUSH
35984: LD_INT 1
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 2
35993: PUSH
35994: LD_INT 2
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: LD_INT 2
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 2
36024: NEG
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 2
36035: NEG
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: LD_INT 3
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 1
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 3
36070: PUSH
36071: LD_INT 2
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 2
36080: PUSH
36081: LD_INT 3
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 2
36090: NEG
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 3
36101: NEG
36102: PUSH
36103: LD_INT 1
36105: NEG
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36136: LD_ADDR_VAR 0 31
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: LD_INT 1
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 1
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: LD_INT 2
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 2
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 2
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 2
36260: PUSH
36261: LD_INT 2
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: NEG
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 2
36301: NEG
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 2
36313: NEG
36314: PUSH
36315: LD_INT 2
36317: NEG
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 2
36325: NEG
36326: PUSH
36327: LD_INT 3
36329: NEG
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 3
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: PUSH
36359: LD_INT 3
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: LD_INT 2
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 3
36379: NEG
36380: PUSH
36381: LD_INT 2
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36414: LD_ADDR_VAR 0 32
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 0
36431: PUSH
36432: LD_INT 1
36434: NEG
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: LD_INT 1
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 0
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: NEG
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: NEG
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: LD_INT 2
36510: NEG
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 2
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 2
36539: PUSH
36540: LD_INT 2
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 1
36549: PUSH
36550: LD_INT 2
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: LD_INT 2
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 1
36569: NEG
36570: PUSH
36571: LD_INT 1
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 2
36580: NEG
36581: PUSH
36582: LD_INT 0
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 2
36591: NEG
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 1
36603: NEG
36604: PUSH
36605: LD_INT 3
36607: NEG
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 1
36615: PUSH
36616: LD_INT 2
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 3
36626: PUSH
36627: LD_INT 2
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 2
36636: PUSH
36637: LD_INT 3
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 2
36646: NEG
36647: PUSH
36648: LD_INT 1
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 3
36657: NEG
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36692: LD_ADDR_VAR 0 33
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: LD_INT 0
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 0
36709: PUSH
36710: LD_INT 1
36712: NEG
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 1
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: PUSH
36731: LD_INT 1
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 1
36750: NEG
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: NEG
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: LD_INT 2
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 1
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 2
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 2
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: LD_INT 2
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: LD_INT 2
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: LD_INT 1
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 2
36847: NEG
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 2
36858: NEG
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 2
36870: NEG
36871: PUSH
36872: LD_INT 2
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 2
36882: NEG
36883: PUSH
36884: LD_INT 3
36886: NEG
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: LD_INT 1
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 3
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: LD_INT 3
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: LD_INT 2
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 3
36936: NEG
36937: PUSH
36938: LD_INT 2
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36971: LD_ADDR_VAR 0 34
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: LD_INT 1
36991: NEG
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 1
37040: NEG
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 1
37052: NEG
37053: PUSH
37054: LD_INT 2
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: LD_INT 2
37067: NEG
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: PUSH
37076: LD_INT 1
37078: NEG
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 2
37086: PUSH
37087: LD_INT 1
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 2
37096: PUSH
37097: LD_INT 2
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: LD_INT 2
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: LD_INT 1
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 2
37127: NEG
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 2
37138: NEG
37139: PUSH
37140: LD_INT 1
37142: NEG
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 2
37150: NEG
37151: PUSH
37152: LD_INT 2
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: NEG
37163: PUSH
37164: LD_INT 3
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: LD_INT 2
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 3
37185: PUSH
37186: LD_INT 2
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: LD_INT 3
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 2
37205: NEG
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 3
37216: NEG
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37251: LD_ADDR_VAR 0 35
37255: PUSH
37256: LD_INT 0
37258: PUSH
37259: LD_INT 0
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: LD_INT 1
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 1
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 1
37320: NEG
37321: PUSH
37322: LD_INT 1
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 2
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 2
37342: NEG
37343: PUSH
37344: LD_INT 1
37346: NEG
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37363: LD_ADDR_VAR 0 36
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: LD_INT 1
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: LD_INT 1
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: LD_INT 2
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: LD_INT 2
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37475: LD_ADDR_VAR 0 37
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: LD_INT 0
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 0
37492: PUSH
37493: LD_INT 1
37495: NEG
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 1
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 1
37533: NEG
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 1
37544: NEG
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 1
37567: NEG
37568: PUSH
37569: LD_INT 1
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37587: LD_ADDR_VAR 0 38
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: LD_INT 1
37607: NEG
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 2
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 2
37678: NEG
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37699: LD_ADDR_VAR 0 39
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: LD_INT 1
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 1
37768: NEG
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: LD_INT 2
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: LD_INT 2
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37811: LD_ADDR_VAR 0 40
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: LD_INT 0
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: PUSH
37850: LD_INT 1
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 1
37880: NEG
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: LD_INT 1
37895: NEG
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 1
37903: NEG
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37923: LD_ADDR_VAR 0 41
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 0
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 1
37992: NEG
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: LD_INT 2
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: LD_INT 1
38019: NEG
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 2
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 2
38037: PUSH
38038: LD_INT 1
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 2
38047: PUSH
38048: LD_INT 2
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 2
38078: NEG
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 2
38089: NEG
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 2
38101: NEG
38102: PUSH
38103: LD_INT 2
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 2
38113: NEG
38114: PUSH
38115: LD_INT 3
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 2
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 3
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 3
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 3
38156: PUSH
38157: LD_INT 2
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 3
38166: PUSH
38167: LD_INT 3
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: LD_INT 3
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 2
38186: NEG
38187: PUSH
38188: LD_INT 1
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 3
38197: NEG
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 3
38208: NEG
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 3
38220: NEG
38221: PUSH
38222: LD_INT 2
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 3
38232: NEG
38233: PUSH
38234: LD_INT 3
38236: NEG
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38273: LD_ADDR_VAR 0 42
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: LD_INT 1
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: LD_INT 0
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 1
38331: NEG
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: LD_INT 2
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: LD_INT 2
38369: NEG
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 1
38377: PUSH
38378: LD_INT 1
38380: NEG
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 2
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: PUSH
38399: LD_INT 2
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: LD_INT 2
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: LD_INT 2
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: NEG
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 2
38439: NEG
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 2
38451: NEG
38452: PUSH
38453: LD_INT 2
38455: NEG
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: LD_INT 3
38467: NEG
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 1
38475: NEG
38476: PUSH
38477: LD_INT 3
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 0
38487: PUSH
38488: LD_INT 3
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 1
38498: PUSH
38499: LD_INT 2
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: LD_INT 2
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 3
38519: PUSH
38520: LD_INT 3
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 2
38529: PUSH
38530: LD_INT 3
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 1
38539: PUSH
38540: LD_INT 3
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: LD_INT 3
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 3
38570: NEG
38571: PUSH
38572: LD_INT 2
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 3
38582: NEG
38583: PUSH
38584: LD_INT 3
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38623: LD_ADDR_VAR 0 43
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: NEG
38705: PUSH
38706: LD_INT 2
38708: NEG
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: LD_INT 2
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 2
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 2
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: LD_INT 2
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: NEG
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 2
38789: NEG
38790: PUSH
38791: LD_INT 0
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 2
38800: NEG
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: LD_INT 3
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 0
38824: PUSH
38825: LD_INT 3
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: LD_INT 2
38838: NEG
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 2
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 3
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 3
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: LD_INT 3
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: LD_INT 3
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: LD_INT 2
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: NEG
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 3
38919: NEG
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 3
38930: NEG
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38971: LD_ADDR_VAR 0 44
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 1
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 1
39040: NEG
39041: PUSH
39042: LD_INT 1
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: LD_INT 2
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: LD_INT 1
39067: NEG
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: LD_INT 2
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 2
39126: NEG
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 2
39137: NEG
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 2
39161: NEG
39162: PUSH
39163: LD_INT 3
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 2
39173: PUSH
39174: LD_INT 1
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 3
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 3
39194: PUSH
39195: LD_INT 1
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 3
39204: PUSH
39205: LD_INT 2
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 3
39214: PUSH
39215: LD_INT 3
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: LD_INT 3
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 2
39234: NEG
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 3
39245: NEG
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 3
39256: NEG
39257: PUSH
39258: LD_INT 1
39260: NEG
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 3
39268: NEG
39269: PUSH
39270: LD_INT 2
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 3
39280: NEG
39281: PUSH
39282: LD_INT 3
39284: NEG
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39321: LD_ADDR_VAR 0 45
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: NEG
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 1
39390: NEG
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: LD_INT 2
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: LD_INT 2
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: LD_INT 2
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 2
39487: NEG
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: NEG
39500: PUSH
39501: LD_INT 2
39503: NEG
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: LD_INT 3
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 1
39523: NEG
39524: PUSH
39525: LD_INT 3
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: LD_INT 3
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: LD_INT 2
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 3
39557: PUSH
39558: LD_INT 2
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 3
39567: PUSH
39568: LD_INT 3
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 2
39577: PUSH
39578: LD_INT 3
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: LD_INT 3
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: LD_INT 3
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 3
39618: NEG
39619: PUSH
39620: LD_INT 2
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 3
39630: NEG
39631: PUSH
39632: LD_INT 3
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39671: LD_ADDR_VAR 0 46
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 2
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 2
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 2
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: LD_INT 2
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: LD_INT 2
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 2
39837: NEG
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 2
39848: NEG
39849: PUSH
39850: LD_INT 1
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: PUSH
39862: LD_INT 3
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: LD_INT 3
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 2
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 3
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 3
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: LD_INT 3
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: LD_INT 3
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: LD_INT 2
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 2
39956: NEG
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 3
39967: NEG
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 3
39978: NEG
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40019: LD_ADDR_VAR 0 47
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 2
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 2
40134: NEG
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 2
40146: NEG
40147: PUSH
40148: LD_INT 2
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40170: LD_ADDR_VAR 0 48
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40317: LD_ADDR_VAR 0 49
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: LD_INT 2
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40461: LD_ADDR_VAR 0 50
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 2
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 1
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40605: LD_ADDR_VAR 0 51
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 0
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: LD_INT 2
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: LD_INT 2
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 2
40717: NEG
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: NEG
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40752: LD_ADDR_VAR 0 52
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 2
40856: NEG
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 2
40867: NEG
40868: PUSH
40869: LD_INT 1
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40903: LD_ADDR_VAR 0 53
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: LD_INT 2
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 2
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: LD_INT 2
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: LD_INT 2
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 2
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: NEG
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41133: LD_ADDR_VAR 0 54
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: LD_INT 2
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: LD_INT 2
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: LD_INT 2
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: LD_INT 2
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41363: LD_ADDR_VAR 0 55
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: LD_INT 2
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: LD_INT 2
41459: NEG
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: LD_INT 2
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 2
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 2
41539: NEG
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: NEG
41551: PUSH
41552: LD_INT 1
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 2
41562: NEG
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41593: LD_ADDR_VAR 0 56
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 2
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 2
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: LD_INT 1
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: LD_INT 0
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: PUSH
41739: LD_INT 2
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 2
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: LD_INT 1
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 2
41769: NEG
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 2
41780: NEG
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 2
41792: NEG
41793: PUSH
41794: LD_INT 2
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41823: LD_ADDR_VAR 0 57
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: LD_INT 2
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 2
41999: NEG
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42053: LD_ADDR_VAR 0 58
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: LD_INT 2
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: LD_INT 2
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: LD_INT 1
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 2
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 2
42188: PUSH
42189: LD_INT 2
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 1
42198: PUSH
42199: LD_INT 2
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 2
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 2
42229: NEG
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 2
42240: NEG
42241: PUSH
42242: LD_INT 1
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 2
42252: NEG
42253: PUSH
42254: LD_INT 2
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42283: LD_ADDR_VAR 0 59
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 1
42341: NEG
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42371: LD_ADDR_VAR 0 60
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42459: LD_ADDR_VAR 0 61
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42547: LD_ADDR_VAR 0 62
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42635: LD_ADDR_VAR 0 63
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42723: LD_ADDR_VAR 0 64
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: ST_TO_ADDR
// end ; 1 :
42811: GO 48708
42813: LD_INT 1
42815: DOUBLE
42816: EQUAL
42817: IFTRUE 42821
42819: GO 45444
42821: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42822: LD_ADDR_VAR 0 11
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: LD_INT 3
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 3
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: LD_INT 2
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42866: LD_ADDR_VAR 0 12
42870: PUSH
42871: LD_INT 2
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 3
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 3
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: LIST
42906: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42907: LD_ADDR_VAR 0 13
42911: PUSH
42912: LD_INT 3
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 3
42924: PUSH
42925: LD_INT 3
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: LD_INT 3
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42947: LD_ADDR_VAR 0 14
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 3
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: LD_INT 3
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: LIST
42987: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42988: LD_ADDR_VAR 0 15
42992: PUSH
42993: LD_INT 2
42995: NEG
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 3
43006: NEG
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 3
43017: NEG
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: LIST
43031: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43032: LD_ADDR_VAR 0 16
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: LD_INT 3
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 3
43051: NEG
43052: PUSH
43053: LD_INT 2
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 3
43063: NEG
43064: PUSH
43065: LD_INT 3
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: LIST
43077: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43078: LD_ADDR_VAR 0 17
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: LD_INT 3
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: LD_INT 3
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: LIST
43121: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43122: LD_ADDR_VAR 0 18
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 3
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: LIST
43162: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43163: LD_ADDR_VAR 0 19
43167: PUSH
43168: LD_INT 3
43170: PUSH
43171: LD_INT 2
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 3
43180: PUSH
43181: LD_INT 3
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 2
43190: PUSH
43191: LD_INT 3
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43203: LD_ADDR_VAR 0 20
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43244: LD_ADDR_VAR 0 21
43248: PUSH
43249: LD_INT 2
43251: NEG
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 3
43262: NEG
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 3
43273: NEG
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: LIST
43287: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43288: LD_ADDR_VAR 0 22
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: LD_INT 3
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 3
43307: NEG
43308: PUSH
43309: LD_INT 2
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 3
43319: NEG
43320: PUSH
43321: LD_INT 3
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: LIST
43333: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43334: LD_ADDR_VAR 0 23
43338: PUSH
43339: LD_INT 0
43341: PUSH
43342: LD_INT 3
43344: NEG
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: LD_INT 4
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: LD_INT 3
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: LIST
43377: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43378: LD_ADDR_VAR 0 24
43382: PUSH
43383: LD_INT 3
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 3
43395: PUSH
43396: LD_INT 1
43398: NEG
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 4
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43419: LD_ADDR_VAR 0 25
43423: PUSH
43424: LD_INT 3
43426: PUSH
43427: LD_INT 3
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 4
43436: PUSH
43437: LD_INT 3
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 3
43446: PUSH
43447: LD_INT 4
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43459: LD_ADDR_VAR 0 26
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: LD_INT 3
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: LD_INT 4
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: LD_INT 3
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: LIST
43499: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43500: LD_ADDR_VAR 0 27
43504: PUSH
43505: LD_INT 3
43507: NEG
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 3
43518: NEG
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 4
43529: NEG
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43544: LD_ADDR_VAR 0 28
43548: PUSH
43549: LD_INT 3
43551: NEG
43552: PUSH
43553: LD_INT 3
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 3
43563: NEG
43564: PUSH
43565: LD_INT 4
43567: NEG
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 4
43575: NEG
43576: PUSH
43577: LD_INT 3
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: LIST
43589: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43590: LD_ADDR_VAR 0 29
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: LD_INT 3
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: LD_INT 3
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: LD_INT 4
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: LD_INT 4
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 3
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: LD_INT 5
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 5
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: LD_INT 4
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: LD_INT 6
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: LD_INT 6
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 5
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43745: LD_ADDR_VAR 0 30
43749: PUSH
43750: LD_INT 2
43752: PUSH
43753: LD_INT 1
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 3
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 3
43783: PUSH
43784: LD_INT 1
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 4
43794: PUSH
43795: LD_INT 0
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 4
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 4
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 5
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 5
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 5
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 6
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 6
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43888: LD_ADDR_VAR 0 31
43892: PUSH
43893: LD_INT 3
43895: PUSH
43896: LD_INT 2
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 3
43905: PUSH
43906: LD_INT 3
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 2
43915: PUSH
43916: LD_INT 3
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 4
43925: PUSH
43926: LD_INT 3
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 4
43935: PUSH
43936: LD_INT 4
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 3
43945: PUSH
43946: LD_INT 4
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 5
43955: PUSH
43956: LD_INT 4
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 5
43965: PUSH
43966: LD_INT 5
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 4
43975: PUSH
43976: LD_INT 5
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 6
43985: PUSH
43986: LD_INT 5
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 6
43995: PUSH
43996: LD_INT 6
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 5
44005: PUSH
44006: LD_INT 6
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44027: LD_ADDR_VAR 0 32
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: LD_INT 3
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 3
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 4
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 4
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 3
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: LD_INT 5
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 5
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: LD_INT 4
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: LD_INT 6
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 6
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: LD_INT 5
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44170: LD_ADDR_VAR 0 33
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 3
44188: NEG
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 3
44199: NEG
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 3
44211: NEG
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 4
44222: NEG
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 4
44233: NEG
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 4
44245: NEG
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 5
44256: NEG
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 5
44267: NEG
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 5
44279: NEG
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 6
44290: NEG
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 6
44301: NEG
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44325: LD_ADDR_VAR 0 34
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: LD_INT 3
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 3
44344: NEG
44345: PUSH
44346: LD_INT 2
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 3
44356: NEG
44357: PUSH
44358: LD_INT 3
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 3
44368: NEG
44369: PUSH
44370: LD_INT 4
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 4
44380: NEG
44381: PUSH
44382: LD_INT 3
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 4
44392: NEG
44393: PUSH
44394: LD_INT 4
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 4
44404: NEG
44405: PUSH
44406: LD_INT 5
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 5
44416: NEG
44417: PUSH
44418: LD_INT 4
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 5
44428: NEG
44429: PUSH
44430: LD_INT 5
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 5
44440: NEG
44441: PUSH
44442: LD_INT 6
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 6
44452: NEG
44453: PUSH
44454: LD_INT 5
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 6
44464: NEG
44465: PUSH
44466: LD_INT 6
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44488: LD_ADDR_VAR 0 41
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 3
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: LIST
44531: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44532: LD_ADDR_VAR 0 42
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 3
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: LIST
44572: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44573: LD_ADDR_VAR 0 43
44577: PUSH
44578: LD_INT 2
44580: PUSH
44581: LD_INT 2
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 3
44590: PUSH
44591: LD_INT 2
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: LD_INT 3
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44613: LD_ADDR_VAR 0 44
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: LD_INT 3
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 2
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: LIST
44653: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44654: LD_ADDR_VAR 0 45
44658: PUSH
44659: LD_INT 2
44661: NEG
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 3
44683: NEG
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: LIST
44697: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44698: LD_ADDR_VAR 0 46
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: LD_INT 3
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 3
44729: NEG
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: LIST
44743: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44744: LD_ADDR_VAR 0 47
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: LD_INT 3
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: LD_INT 3
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44777: LD_ADDR_VAR 0 48
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: LD_INT 2
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44808: LD_ADDR_VAR 0 49
44812: PUSH
44813: LD_INT 3
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 3
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44837: LD_ADDR_VAR 0 50
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: LD_INT 3
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: LD_INT 3
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44866: LD_ADDR_VAR 0 51
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: NEG
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44897: LD_ADDR_VAR 0 52
44901: PUSH
44902: LD_INT 3
44904: NEG
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 3
44916: NEG
44917: PUSH
44918: LD_INT 2
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44930: LD_ADDR_VAR 0 53
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: LD_INT 3
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 3
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: LD_INT 2
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44974: LD_ADDR_VAR 0 54
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 3
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 3
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: LIST
45014: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45015: LD_ADDR_VAR 0 55
45019: PUSH
45020: LD_INT 3
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 3
45032: PUSH
45033: LD_INT 3
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: LD_INT 3
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45055: LD_ADDR_VAR 0 56
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 3
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 3
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45096: LD_ADDR_VAR 0 57
45100: PUSH
45101: LD_INT 2
45103: NEG
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 3
45114: NEG
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 3
45125: NEG
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: LIST
45139: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45140: LD_ADDR_VAR 0 58
45144: PUSH
45145: LD_INT 2
45147: NEG
45148: PUSH
45149: LD_INT 3
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 3
45159: NEG
45160: PUSH
45161: LD_INT 2
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 3
45171: NEG
45172: PUSH
45173: LD_INT 3
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: LIST
45185: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45186: LD_ADDR_VAR 0 59
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: LIST
45229: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45230: LD_ADDR_VAR 0 60
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: LIST
45270: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45271: LD_ADDR_VAR 0 61
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: LIST
45310: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45311: LD_ADDR_VAR 0 62
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: LD_INT 2
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 2
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: LIST
45351: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45352: LD_ADDR_VAR 0 63
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: NEG
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 2
45381: NEG
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: LIST
45395: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45396: LD_ADDR_VAR 0 64
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 2
45415: NEG
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: LIST
45441: ST_TO_ADDR
// end ; 2 :
45442: GO 48708
45444: LD_INT 2
45446: DOUBLE
45447: EQUAL
45448: IFTRUE 45452
45450: GO 48707
45452: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45453: LD_ADDR_VAR 0 29
45457: PUSH
45458: LD_INT 4
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 4
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 5
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 5
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 4
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 3
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 3
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 3
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 5
45543: PUSH
45544: LD_INT 2
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: LD_INT 3
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 3
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 4
45573: PUSH
45574: LD_INT 3
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 4
45583: PUSH
45584: LD_INT 4
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 3
45593: PUSH
45594: LD_INT 4
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 2
45603: PUSH
45604: LD_INT 3
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: LD_INT 2
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 4
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 2
45633: PUSH
45634: LD_INT 4
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: LD_INT 4
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 3
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 4
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 5
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 5
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: LD_INT 4
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: LD_INT 3
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: LD_INT 5
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: LD_INT 3
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 3
45736: NEG
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 3
45747: NEG
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 3
45781: NEG
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 4
45792: NEG
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 4
45803: NEG
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 4
45815: NEG
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 4
45838: NEG
45839: PUSH
45840: LD_INT 4
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 4
45850: NEG
45851: PUSH
45852: LD_INT 5
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: LD_INT 4
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 3
45874: NEG
45875: PUSH
45876: LD_INT 3
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 4
45886: NEG
45887: PUSH
45888: LD_INT 3
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 5
45898: NEG
45899: PUSH
45900: LD_INT 4
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 5
45910: NEG
45911: PUSH
45912: LD_INT 5
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 3
45922: NEG
45923: PUSH
45924: LD_INT 5
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 5
45934: NEG
45935: PUSH
45936: LD_INT 3
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45991: LD_ADDR_VAR 0 30
45995: PUSH
45996: LD_INT 4
45998: PUSH
45999: LD_INT 4
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 4
46008: PUSH
46009: LD_INT 3
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 5
46018: PUSH
46019: LD_INT 4
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 5
46028: PUSH
46029: LD_INT 5
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 4
46038: PUSH
46039: LD_INT 5
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 3
46048: PUSH
46049: LD_INT 4
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 3
46058: PUSH
46059: LD_INT 3
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 5
46068: PUSH
46069: LD_INT 3
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: LD_INT 5
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: LD_INT 3
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 4
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 4
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 3
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: LD_INT 2
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: PUSH
46161: LD_INT 4
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 4
46181: NEG
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 4
46192: NEG
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 3
46204: NEG
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 3
46215: NEG
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 4
46226: NEG
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 5
46237: NEG
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 5
46248: NEG
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 5
46260: NEG
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 3
46272: NEG
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 3
46283: NEG
46284: PUSH
46285: LD_INT 3
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 3
46295: NEG
46296: PUSH
46297: LD_INT 4
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 2
46307: NEG
46308: PUSH
46309: LD_INT 3
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: NEG
46320: PUSH
46321: LD_INT 2
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 3
46331: NEG
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 4
46343: NEG
46344: PUSH
46345: LD_INT 3
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 4
46355: NEG
46356: PUSH
46357: LD_INT 4
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: NEG
46368: PUSH
46369: LD_INT 4
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 4
46379: NEG
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: LD_INT 4
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 5
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 4
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: LD_INT 3
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 3
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: LD_INT 4
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 5
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: LD_INT 3
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: LD_INT 5
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46538: LD_ADDR_VAR 0 31
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 4
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 3
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 4
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: LD_INT 5
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 5
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: LD_INT 4
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: LD_INT 3
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 5
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: LD_INT 3
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 3
46638: NEG
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 3
46649: NEG
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 3
46683: NEG
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 4
46694: NEG
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 4
46705: NEG
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 4
46717: NEG
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 2
46729: NEG
46730: PUSH
46731: LD_INT 2
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 4
46740: NEG
46741: PUSH
46742: LD_INT 4
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 4
46752: NEG
46753: PUSH
46754: LD_INT 5
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 3
46764: NEG
46765: PUSH
46766: LD_INT 4
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 3
46776: NEG
46777: PUSH
46778: LD_INT 3
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 4
46788: NEG
46789: PUSH
46790: LD_INT 3
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 5
46800: NEG
46801: PUSH
46802: LD_INT 4
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 5
46812: NEG
46813: PUSH
46814: LD_INT 5
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 3
46824: NEG
46825: PUSH
46826: LD_INT 5
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 5
46836: NEG
46837: PUSH
46838: LD_INT 3
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: LD_INT 3
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 4
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: LD_INT 3
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: LD_INT 3
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: LD_INT 4
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: LD_INT 2
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: LD_INT 4
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 4
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 4
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 5
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 5
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 4
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 3
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 3
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 3
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 5
47033: PUSH
47034: LD_INT 2
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47088: LD_ADDR_VAR 0 32
47092: PUSH
47093: LD_INT 4
47095: NEG
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 4
47106: NEG
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 3
47118: NEG
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 3
47129: NEG
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 4
47140: NEG
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 5
47151: NEG
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 5
47162: NEG
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 5
47174: NEG
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 3
47186: NEG
47187: PUSH
47188: LD_INT 2
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 3
47197: NEG
47198: PUSH
47199: LD_INT 3
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 3
47209: NEG
47210: PUSH
47211: LD_INT 4
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: LD_INT 3
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 3
47245: NEG
47246: PUSH
47247: LD_INT 2
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 4
47257: NEG
47258: PUSH
47259: LD_INT 3
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 4
47269: NEG
47270: PUSH
47271: LD_INT 4
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 2
47281: NEG
47282: PUSH
47283: LD_INT 4
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 4
47293: NEG
47294: PUSH
47295: LD_INT 2
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 4
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 5
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 4
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: LD_INT 3
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 3
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 4
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: LD_INT 5
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 2
47384: PUSH
47385: LD_INT 3
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: LD_INT 5
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 3
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 3
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 4
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 4
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 3
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 2
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 4
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 4
47500: PUSH
47501: LD_INT 4
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 4
47510: PUSH
47511: LD_INT 3
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 5
47520: PUSH
47521: LD_INT 4
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 5
47530: PUSH
47531: LD_INT 5
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 4
47540: PUSH
47541: LD_INT 5
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 3
47550: PUSH
47551: LD_INT 4
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 3
47560: PUSH
47561: LD_INT 3
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 5
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 3
47580: PUSH
47581: LD_INT 5
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47635: LD_ADDR_VAR 0 33
47639: PUSH
47640: LD_INT 4
47642: NEG
47643: PUSH
47644: LD_INT 4
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 4
47654: NEG
47655: PUSH
47656: LD_INT 5
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 3
47666: NEG
47667: PUSH
47668: LD_INT 4
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 3
47678: NEG
47679: PUSH
47680: LD_INT 3
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 4
47690: NEG
47691: PUSH
47692: LD_INT 3
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 5
47702: NEG
47703: PUSH
47704: LD_INT 4
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 5
47714: NEG
47715: PUSH
47716: LD_INT 5
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 3
47726: NEG
47727: PUSH
47728: LD_INT 5
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 5
47738: NEG
47739: PUSH
47740: LD_INT 3
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 3
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 4
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: LD_INT 3
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 2
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 3
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: LD_INT 4
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: LD_INT 4
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 4
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 4
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 5
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 5
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 4
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 3
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 3
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 3
47924: PUSH
47925: LD_INT 2
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 5
47935: PUSH
47936: LD_INT 2
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 3
47945: PUSH
47946: LD_INT 3
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 3
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 4
47965: PUSH
47966: LD_INT 3
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 4
47975: PUSH
47976: LD_INT 4
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: LD_INT 4
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: LD_INT 3
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 4
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: LD_INT 4
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 4
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 3
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 4
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: LD_INT 5
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 5
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 4
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: LD_INT 5
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: LD_INT 3
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48173: LD_ADDR_VAR 0 34
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 4
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 5
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 4
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: LD_INT 3
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 3
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: LD_INT 4
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 5
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 2
48259: PUSH
48260: LD_INT 3
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: LD_INT 5
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 3
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 3
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 4
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 4
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 3
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 4
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 4
48375: PUSH
48376: LD_INT 4
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 4
48385: PUSH
48386: LD_INT 3
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 5
48395: PUSH
48396: LD_INT 4
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 5
48405: PUSH
48406: LD_INT 5
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 4
48415: PUSH
48416: LD_INT 5
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 3
48425: PUSH
48426: LD_INT 4
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 3
48435: PUSH
48436: LD_INT 3
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 5
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 3
48455: PUSH
48456: LD_INT 5
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: LD_INT 3
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: LD_INT 3
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: LD_INT 4
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: LD_INT 4
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 3
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: LD_INT 2
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: LD_INT 4
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 4
48558: NEG
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 4
48569: NEG
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 3
48581: NEG
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 3
48592: NEG
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 4
48603: NEG
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 5
48614: NEG
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 5
48625: NEG
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 5
48637: NEG
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: ST_TO_ADDR
// end ; end ;
48705: GO 48708
48707: POP
// case btype of b_depot , b_warehouse :
48708: LD_VAR 0 1
48712: PUSH
48713: LD_INT 0
48715: DOUBLE
48716: EQUAL
48717: IFTRUE 48727
48719: LD_INT 1
48721: DOUBLE
48722: EQUAL
48723: IFTRUE 48727
48725: GO 48928
48727: POP
// case nation of nation_american :
48728: LD_VAR 0 5
48732: PUSH
48733: LD_INT 1
48735: DOUBLE
48736: EQUAL
48737: IFTRUE 48741
48739: GO 48797
48741: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48742: LD_ADDR_VAR 0 9
48746: PUSH
48747: LD_VAR 0 11
48751: PUSH
48752: LD_VAR 0 12
48756: PUSH
48757: LD_VAR 0 13
48761: PUSH
48762: LD_VAR 0 14
48766: PUSH
48767: LD_VAR 0 15
48771: PUSH
48772: LD_VAR 0 16
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: PUSH
48785: LD_VAR 0 4
48789: PUSH
48790: LD_INT 1
48792: PLUS
48793: ARRAY
48794: ST_TO_ADDR
48795: GO 48926
48797: LD_INT 2
48799: DOUBLE
48800: EQUAL
48801: IFTRUE 48805
48803: GO 48861
48805: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48806: LD_ADDR_VAR 0 9
48810: PUSH
48811: LD_VAR 0 17
48815: PUSH
48816: LD_VAR 0 18
48820: PUSH
48821: LD_VAR 0 19
48825: PUSH
48826: LD_VAR 0 20
48830: PUSH
48831: LD_VAR 0 21
48835: PUSH
48836: LD_VAR 0 22
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: PUSH
48849: LD_VAR 0 4
48853: PUSH
48854: LD_INT 1
48856: PLUS
48857: ARRAY
48858: ST_TO_ADDR
48859: GO 48926
48861: LD_INT 3
48863: DOUBLE
48864: EQUAL
48865: IFTRUE 48869
48867: GO 48925
48869: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48870: LD_ADDR_VAR 0 9
48874: PUSH
48875: LD_VAR 0 23
48879: PUSH
48880: LD_VAR 0 24
48884: PUSH
48885: LD_VAR 0 25
48889: PUSH
48890: LD_VAR 0 26
48894: PUSH
48895: LD_VAR 0 27
48899: PUSH
48900: LD_VAR 0 28
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: PUSH
48913: LD_VAR 0 4
48917: PUSH
48918: LD_INT 1
48920: PLUS
48921: ARRAY
48922: ST_TO_ADDR
48923: GO 48926
48925: POP
48926: GO 49481
48928: LD_INT 2
48930: DOUBLE
48931: EQUAL
48932: IFTRUE 48942
48934: LD_INT 3
48936: DOUBLE
48937: EQUAL
48938: IFTRUE 48942
48940: GO 48998
48942: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48943: LD_ADDR_VAR 0 9
48947: PUSH
48948: LD_VAR 0 29
48952: PUSH
48953: LD_VAR 0 30
48957: PUSH
48958: LD_VAR 0 31
48962: PUSH
48963: LD_VAR 0 32
48967: PUSH
48968: LD_VAR 0 33
48972: PUSH
48973: LD_VAR 0 34
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: PUSH
48986: LD_VAR 0 4
48990: PUSH
48991: LD_INT 1
48993: PLUS
48994: ARRAY
48995: ST_TO_ADDR
48996: GO 49481
48998: LD_INT 16
49000: DOUBLE
49001: EQUAL
49002: IFTRUE 49060
49004: LD_INT 17
49006: DOUBLE
49007: EQUAL
49008: IFTRUE 49060
49010: LD_INT 18
49012: DOUBLE
49013: EQUAL
49014: IFTRUE 49060
49016: LD_INT 19
49018: DOUBLE
49019: EQUAL
49020: IFTRUE 49060
49022: LD_INT 22
49024: DOUBLE
49025: EQUAL
49026: IFTRUE 49060
49028: LD_INT 20
49030: DOUBLE
49031: EQUAL
49032: IFTRUE 49060
49034: LD_INT 21
49036: DOUBLE
49037: EQUAL
49038: IFTRUE 49060
49040: LD_INT 23
49042: DOUBLE
49043: EQUAL
49044: IFTRUE 49060
49046: LD_INT 24
49048: DOUBLE
49049: EQUAL
49050: IFTRUE 49060
49052: LD_INT 25
49054: DOUBLE
49055: EQUAL
49056: IFTRUE 49060
49058: GO 49116
49060: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49061: LD_ADDR_VAR 0 9
49065: PUSH
49066: LD_VAR 0 35
49070: PUSH
49071: LD_VAR 0 36
49075: PUSH
49076: LD_VAR 0 37
49080: PUSH
49081: LD_VAR 0 38
49085: PUSH
49086: LD_VAR 0 39
49090: PUSH
49091: LD_VAR 0 40
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: PUSH
49104: LD_VAR 0 4
49108: PUSH
49109: LD_INT 1
49111: PLUS
49112: ARRAY
49113: ST_TO_ADDR
49114: GO 49481
49116: LD_INT 6
49118: DOUBLE
49119: EQUAL
49120: IFTRUE 49172
49122: LD_INT 7
49124: DOUBLE
49125: EQUAL
49126: IFTRUE 49172
49128: LD_INT 8
49130: DOUBLE
49131: EQUAL
49132: IFTRUE 49172
49134: LD_INT 13
49136: DOUBLE
49137: EQUAL
49138: IFTRUE 49172
49140: LD_INT 12
49142: DOUBLE
49143: EQUAL
49144: IFTRUE 49172
49146: LD_INT 15
49148: DOUBLE
49149: EQUAL
49150: IFTRUE 49172
49152: LD_INT 11
49154: DOUBLE
49155: EQUAL
49156: IFTRUE 49172
49158: LD_INT 14
49160: DOUBLE
49161: EQUAL
49162: IFTRUE 49172
49164: LD_INT 10
49166: DOUBLE
49167: EQUAL
49168: IFTRUE 49172
49170: GO 49228
49172: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49173: LD_ADDR_VAR 0 9
49177: PUSH
49178: LD_VAR 0 41
49182: PUSH
49183: LD_VAR 0 42
49187: PUSH
49188: LD_VAR 0 43
49192: PUSH
49193: LD_VAR 0 44
49197: PUSH
49198: LD_VAR 0 45
49202: PUSH
49203: LD_VAR 0 46
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: PUSH
49216: LD_VAR 0 4
49220: PUSH
49221: LD_INT 1
49223: PLUS
49224: ARRAY
49225: ST_TO_ADDR
49226: GO 49481
49228: LD_INT 36
49230: DOUBLE
49231: EQUAL
49232: IFTRUE 49236
49234: GO 49292
49236: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49237: LD_ADDR_VAR 0 9
49241: PUSH
49242: LD_VAR 0 47
49246: PUSH
49247: LD_VAR 0 48
49251: PUSH
49252: LD_VAR 0 49
49256: PUSH
49257: LD_VAR 0 50
49261: PUSH
49262: LD_VAR 0 51
49266: PUSH
49267: LD_VAR 0 52
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: PUSH
49280: LD_VAR 0 4
49284: PUSH
49285: LD_INT 1
49287: PLUS
49288: ARRAY
49289: ST_TO_ADDR
49290: GO 49481
49292: LD_INT 4
49294: DOUBLE
49295: EQUAL
49296: IFTRUE 49318
49298: LD_INT 5
49300: DOUBLE
49301: EQUAL
49302: IFTRUE 49318
49304: LD_INT 34
49306: DOUBLE
49307: EQUAL
49308: IFTRUE 49318
49310: LD_INT 37
49312: DOUBLE
49313: EQUAL
49314: IFTRUE 49318
49316: GO 49374
49318: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49319: LD_ADDR_VAR 0 9
49323: PUSH
49324: LD_VAR 0 53
49328: PUSH
49329: LD_VAR 0 54
49333: PUSH
49334: LD_VAR 0 55
49338: PUSH
49339: LD_VAR 0 56
49343: PUSH
49344: LD_VAR 0 57
49348: PUSH
49349: LD_VAR 0 58
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: PUSH
49362: LD_VAR 0 4
49366: PUSH
49367: LD_INT 1
49369: PLUS
49370: ARRAY
49371: ST_TO_ADDR
49372: GO 49481
49374: LD_INT 31
49376: DOUBLE
49377: EQUAL
49378: IFTRUE 49424
49380: LD_INT 32
49382: DOUBLE
49383: EQUAL
49384: IFTRUE 49424
49386: LD_INT 33
49388: DOUBLE
49389: EQUAL
49390: IFTRUE 49424
49392: LD_INT 27
49394: DOUBLE
49395: EQUAL
49396: IFTRUE 49424
49398: LD_INT 26
49400: DOUBLE
49401: EQUAL
49402: IFTRUE 49424
49404: LD_INT 28
49406: DOUBLE
49407: EQUAL
49408: IFTRUE 49424
49410: LD_INT 29
49412: DOUBLE
49413: EQUAL
49414: IFTRUE 49424
49416: LD_INT 30
49418: DOUBLE
49419: EQUAL
49420: IFTRUE 49424
49422: GO 49480
49424: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49425: LD_ADDR_VAR 0 9
49429: PUSH
49430: LD_VAR 0 59
49434: PUSH
49435: LD_VAR 0 60
49439: PUSH
49440: LD_VAR 0 61
49444: PUSH
49445: LD_VAR 0 62
49449: PUSH
49450: LD_VAR 0 63
49454: PUSH
49455: LD_VAR 0 64
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: PUSH
49468: LD_VAR 0 4
49472: PUSH
49473: LD_INT 1
49475: PLUS
49476: ARRAY
49477: ST_TO_ADDR
49478: GO 49481
49480: POP
// temp_list2 = [ ] ;
49481: LD_ADDR_VAR 0 10
49485: PUSH
49486: EMPTY
49487: ST_TO_ADDR
// for i in temp_list do
49488: LD_ADDR_VAR 0 8
49492: PUSH
49493: LD_VAR 0 9
49497: PUSH
49498: FOR_IN
49499: IFFALSE 49551
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49501: LD_ADDR_VAR 0 10
49505: PUSH
49506: LD_VAR 0 10
49510: PUSH
49511: LD_VAR 0 8
49515: PUSH
49516: LD_INT 1
49518: ARRAY
49519: PUSH
49520: LD_VAR 0 2
49524: PLUS
49525: PUSH
49526: LD_VAR 0 8
49530: PUSH
49531: LD_INT 2
49533: ARRAY
49534: PUSH
49535: LD_VAR 0 3
49539: PLUS
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: EMPTY
49546: LIST
49547: ADD
49548: ST_TO_ADDR
49549: GO 49498
49551: POP
49552: POP
// result = temp_list2 ;
49553: LD_ADDR_VAR 0 7
49557: PUSH
49558: LD_VAR 0 10
49562: ST_TO_ADDR
// end ;
49563: LD_VAR 0 7
49567: RET
// export function EnemyInRange ( unit , dist ) ; begin
49568: LD_INT 0
49570: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49571: LD_ADDR_VAR 0 3
49575: PUSH
49576: LD_VAR 0 1
49580: PPUSH
49581: CALL_OW 255
49585: PPUSH
49586: LD_VAR 0 1
49590: PPUSH
49591: CALL_OW 250
49595: PPUSH
49596: LD_VAR 0 1
49600: PPUSH
49601: CALL_OW 251
49605: PPUSH
49606: LD_VAR 0 2
49610: PPUSH
49611: CALL 22941 0 4
49615: PUSH
49616: LD_INT 4
49618: ARRAY
49619: ST_TO_ADDR
// end ;
49620: LD_VAR 0 3
49624: RET
// export function PlayerSeeMe ( unit ) ; begin
49625: LD_INT 0
49627: PPUSH
// result := See ( your_side , unit ) ;
49628: LD_ADDR_VAR 0 2
49632: PUSH
49633: LD_OWVAR 2
49637: PPUSH
49638: LD_VAR 0 1
49642: PPUSH
49643: CALL_OW 292
49647: ST_TO_ADDR
// end ;
49648: LD_VAR 0 2
49652: RET
// export function ReverseDir ( unit ) ; begin
49653: LD_INT 0
49655: PPUSH
// if not unit then
49656: LD_VAR 0 1
49660: NOT
49661: IFFALSE 49665
// exit ;
49663: GO 49688
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49665: LD_ADDR_VAR 0 2
49669: PUSH
49670: LD_VAR 0 1
49674: PPUSH
49675: CALL_OW 254
49679: PUSH
49680: LD_INT 3
49682: PLUS
49683: PUSH
49684: LD_INT 6
49686: MOD
49687: ST_TO_ADDR
// end ;
49688: LD_VAR 0 2
49692: RET
// export function ReverseArray ( array ) ; var i ; begin
49693: LD_INT 0
49695: PPUSH
49696: PPUSH
// if not array then
49697: LD_VAR 0 1
49701: NOT
49702: IFFALSE 49706
// exit ;
49704: GO 49761
// result := [ ] ;
49706: LD_ADDR_VAR 0 2
49710: PUSH
49711: EMPTY
49712: ST_TO_ADDR
// for i := array downto 1 do
49713: LD_ADDR_VAR 0 3
49717: PUSH
49718: DOUBLE
49719: LD_VAR 0 1
49723: INC
49724: ST_TO_ADDR
49725: LD_INT 1
49727: PUSH
49728: FOR_DOWNTO
49729: IFFALSE 49759
// result := Join ( result , array [ i ] ) ;
49731: LD_ADDR_VAR 0 2
49735: PUSH
49736: LD_VAR 0 2
49740: PPUSH
49741: LD_VAR 0 1
49745: PUSH
49746: LD_VAR 0 3
49750: ARRAY
49751: PPUSH
49752: CALL 54406 0 2
49756: ST_TO_ADDR
49757: GO 49728
49759: POP
49760: POP
// end ;
49761: LD_VAR 0 2
49765: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49766: LD_INT 0
49768: PPUSH
49769: PPUSH
49770: PPUSH
49771: PPUSH
49772: PPUSH
49773: PPUSH
// if not unit or not hexes then
49774: LD_VAR 0 1
49778: NOT
49779: PUSH
49780: LD_VAR 0 2
49784: NOT
49785: OR
49786: IFFALSE 49790
// exit ;
49788: GO 49913
// dist := 9999 ;
49790: LD_ADDR_VAR 0 5
49794: PUSH
49795: LD_INT 9999
49797: ST_TO_ADDR
// for i = 1 to hexes do
49798: LD_ADDR_VAR 0 4
49802: PUSH
49803: DOUBLE
49804: LD_INT 1
49806: DEC
49807: ST_TO_ADDR
49808: LD_VAR 0 2
49812: PUSH
49813: FOR_TO
49814: IFFALSE 49901
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49816: LD_ADDR_VAR 0 6
49820: PUSH
49821: LD_VAR 0 1
49825: PPUSH
49826: LD_VAR 0 2
49830: PUSH
49831: LD_VAR 0 4
49835: ARRAY
49836: PUSH
49837: LD_INT 1
49839: ARRAY
49840: PPUSH
49841: LD_VAR 0 2
49845: PUSH
49846: LD_VAR 0 4
49850: ARRAY
49851: PUSH
49852: LD_INT 2
49854: ARRAY
49855: PPUSH
49856: CALL_OW 297
49860: ST_TO_ADDR
// if tdist < dist then
49861: LD_VAR 0 6
49865: PUSH
49866: LD_VAR 0 5
49870: LESS
49871: IFFALSE 49899
// begin hex := hexes [ i ] ;
49873: LD_ADDR_VAR 0 8
49877: PUSH
49878: LD_VAR 0 2
49882: PUSH
49883: LD_VAR 0 4
49887: ARRAY
49888: ST_TO_ADDR
// dist := tdist ;
49889: LD_ADDR_VAR 0 5
49893: PUSH
49894: LD_VAR 0 6
49898: ST_TO_ADDR
// end ; end ;
49899: GO 49813
49901: POP
49902: POP
// result := hex ;
49903: LD_ADDR_VAR 0 3
49907: PUSH
49908: LD_VAR 0 8
49912: ST_TO_ADDR
// end ;
49913: LD_VAR 0 3
49917: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49918: LD_INT 0
49920: PPUSH
49921: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49922: LD_VAR 0 1
49926: NOT
49927: PUSH
49928: LD_VAR 0 1
49932: PUSH
49933: LD_INT 21
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 23
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PPUSH
49957: CALL_OW 69
49961: IN
49962: NOT
49963: OR
49964: IFFALSE 49968
// exit ;
49966: GO 50015
// for i = 1 to 3 do
49968: LD_ADDR_VAR 0 3
49972: PUSH
49973: DOUBLE
49974: LD_INT 1
49976: DEC
49977: ST_TO_ADDR
49978: LD_INT 3
49980: PUSH
49981: FOR_TO
49982: IFFALSE 50013
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49984: LD_VAR 0 1
49988: PPUSH
49989: CALL_OW 250
49993: PPUSH
49994: LD_VAR 0 1
49998: PPUSH
49999: CALL_OW 251
50003: PPUSH
50004: LD_INT 1
50006: PPUSH
50007: CALL_OW 453
50011: GO 49981
50013: POP
50014: POP
// end ;
50015: LD_VAR 0 2
50019: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50020: LD_INT 0
50022: PPUSH
50023: PPUSH
50024: PPUSH
50025: PPUSH
50026: PPUSH
50027: PPUSH
// if not unit or not enemy_unit then
50028: LD_VAR 0 1
50032: NOT
50033: PUSH
50034: LD_VAR 0 2
50038: NOT
50039: OR
50040: IFFALSE 50044
// exit ;
50042: GO 50511
// if GetLives ( i ) < 250 then
50044: LD_VAR 0 4
50048: PPUSH
50049: CALL_OW 256
50053: PUSH
50054: LD_INT 250
50056: LESS
50057: IFFALSE 50070
// begin ComAutodestruct ( i ) ;
50059: LD_VAR 0 4
50063: PPUSH
50064: CALL 49918 0 1
// exit ;
50068: GO 50511
// end ; x := GetX ( enemy_unit ) ;
50070: LD_ADDR_VAR 0 7
50074: PUSH
50075: LD_VAR 0 2
50079: PPUSH
50080: CALL_OW 250
50084: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50085: LD_ADDR_VAR 0 8
50089: PUSH
50090: LD_VAR 0 2
50094: PPUSH
50095: CALL_OW 251
50099: ST_TO_ADDR
// if not x or not y then
50100: LD_VAR 0 7
50104: NOT
50105: PUSH
50106: LD_VAR 0 8
50110: NOT
50111: OR
50112: IFFALSE 50116
// exit ;
50114: GO 50511
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50116: LD_ADDR_VAR 0 6
50120: PUSH
50121: LD_VAR 0 7
50125: PPUSH
50126: LD_INT 0
50128: PPUSH
50129: LD_INT 4
50131: PPUSH
50132: CALL_OW 272
50136: PUSH
50137: LD_VAR 0 8
50141: PPUSH
50142: LD_INT 0
50144: PPUSH
50145: LD_INT 4
50147: PPUSH
50148: CALL_OW 273
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_VAR 0 7
50161: PPUSH
50162: LD_INT 1
50164: PPUSH
50165: LD_INT 4
50167: PPUSH
50168: CALL_OW 272
50172: PUSH
50173: LD_VAR 0 8
50177: PPUSH
50178: LD_INT 1
50180: PPUSH
50181: LD_INT 4
50183: PPUSH
50184: CALL_OW 273
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_VAR 0 7
50197: PPUSH
50198: LD_INT 2
50200: PPUSH
50201: LD_INT 4
50203: PPUSH
50204: CALL_OW 272
50208: PUSH
50209: LD_VAR 0 8
50213: PPUSH
50214: LD_INT 2
50216: PPUSH
50217: LD_INT 4
50219: PPUSH
50220: CALL_OW 273
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_VAR 0 7
50233: PPUSH
50234: LD_INT 3
50236: PPUSH
50237: LD_INT 4
50239: PPUSH
50240: CALL_OW 272
50244: PUSH
50245: LD_VAR 0 8
50249: PPUSH
50250: LD_INT 3
50252: PPUSH
50253: LD_INT 4
50255: PPUSH
50256: CALL_OW 273
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_VAR 0 7
50269: PPUSH
50270: LD_INT 4
50272: PPUSH
50273: LD_INT 4
50275: PPUSH
50276: CALL_OW 272
50280: PUSH
50281: LD_VAR 0 8
50285: PPUSH
50286: LD_INT 4
50288: PPUSH
50289: LD_INT 4
50291: PPUSH
50292: CALL_OW 273
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_VAR 0 7
50305: PPUSH
50306: LD_INT 5
50308: PPUSH
50309: LD_INT 4
50311: PPUSH
50312: CALL_OW 272
50316: PUSH
50317: LD_VAR 0 8
50321: PPUSH
50322: LD_INT 5
50324: PPUSH
50325: LD_INT 4
50327: PPUSH
50328: CALL_OW 273
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: ST_TO_ADDR
// for i = tmp downto 1 do
50345: LD_ADDR_VAR 0 4
50349: PUSH
50350: DOUBLE
50351: LD_VAR 0 6
50355: INC
50356: ST_TO_ADDR
50357: LD_INT 1
50359: PUSH
50360: FOR_DOWNTO
50361: IFFALSE 50462
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50363: LD_VAR 0 6
50367: PUSH
50368: LD_VAR 0 4
50372: ARRAY
50373: PUSH
50374: LD_INT 1
50376: ARRAY
50377: PPUSH
50378: LD_VAR 0 6
50382: PUSH
50383: LD_VAR 0 4
50387: ARRAY
50388: PUSH
50389: LD_INT 2
50391: ARRAY
50392: PPUSH
50393: CALL_OW 488
50397: NOT
50398: PUSH
50399: LD_VAR 0 6
50403: PUSH
50404: LD_VAR 0 4
50408: ARRAY
50409: PUSH
50410: LD_INT 1
50412: ARRAY
50413: PPUSH
50414: LD_VAR 0 6
50418: PUSH
50419: LD_VAR 0 4
50423: ARRAY
50424: PUSH
50425: LD_INT 2
50427: ARRAY
50428: PPUSH
50429: CALL_OW 428
50433: PUSH
50434: LD_INT 0
50436: NONEQUAL
50437: OR
50438: IFFALSE 50460
// tmp := Delete ( tmp , i ) ;
50440: LD_ADDR_VAR 0 6
50444: PUSH
50445: LD_VAR 0 6
50449: PPUSH
50450: LD_VAR 0 4
50454: PPUSH
50455: CALL_OW 3
50459: ST_TO_ADDR
50460: GO 50360
50462: POP
50463: POP
// j := GetClosestHex ( unit , tmp ) ;
50464: LD_ADDR_VAR 0 5
50468: PUSH
50469: LD_VAR 0 1
50473: PPUSH
50474: LD_VAR 0 6
50478: PPUSH
50479: CALL 49766 0 2
50483: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50484: LD_VAR 0 1
50488: PPUSH
50489: LD_VAR 0 5
50493: PUSH
50494: LD_INT 1
50496: ARRAY
50497: PPUSH
50498: LD_VAR 0 5
50502: PUSH
50503: LD_INT 2
50505: ARRAY
50506: PPUSH
50507: CALL_OW 111
// end ;
50511: LD_VAR 0 3
50515: RET
// export function PrepareApemanSoldier ( ) ; begin
50516: LD_INT 0
50518: PPUSH
// uc_nation := 0 ;
50519: LD_ADDR_OWVAR 21
50523: PUSH
50524: LD_INT 0
50526: ST_TO_ADDR
// hc_sex := sex_male ;
50527: LD_ADDR_OWVAR 27
50531: PUSH
50532: LD_INT 1
50534: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50535: LD_ADDR_OWVAR 28
50539: PUSH
50540: LD_INT 15
50542: ST_TO_ADDR
// hc_gallery :=  ;
50543: LD_ADDR_OWVAR 33
50547: PUSH
50548: LD_STRING 
50550: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50551: LD_ADDR_OWVAR 31
50555: PUSH
50556: LD_INT 0
50558: PPUSH
50559: LD_INT 3
50561: PPUSH
50562: CALL_OW 12
50566: PUSH
50567: LD_INT 0
50569: PPUSH
50570: LD_INT 3
50572: PPUSH
50573: CALL_OW 12
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: ST_TO_ADDR
// end ;
50590: LD_VAR 0 1
50594: RET
// export function PrepareApemanEngineer ( ) ; begin
50595: LD_INT 0
50597: PPUSH
// uc_nation := 0 ;
50598: LD_ADDR_OWVAR 21
50602: PUSH
50603: LD_INT 0
50605: ST_TO_ADDR
// hc_sex := sex_male ;
50606: LD_ADDR_OWVAR 27
50610: PUSH
50611: LD_INT 1
50613: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50614: LD_ADDR_OWVAR 28
50618: PUSH
50619: LD_INT 16
50621: ST_TO_ADDR
// hc_gallery :=  ;
50622: LD_ADDR_OWVAR 33
50626: PUSH
50627: LD_STRING 
50629: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50630: LD_ADDR_OWVAR 31
50634: PUSH
50635: LD_INT 0
50637: PPUSH
50638: LD_INT 3
50640: PPUSH
50641: CALL_OW 12
50645: PUSH
50646: LD_INT 0
50648: PPUSH
50649: LD_INT 3
50651: PPUSH
50652: CALL_OW 12
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: ST_TO_ADDR
// end ;
50669: LD_VAR 0 1
50673: RET
// export function PrepareApeman ( agressivity ) ; begin
50674: LD_INT 0
50676: PPUSH
// uc_side := 0 ;
50677: LD_ADDR_OWVAR 20
50681: PUSH
50682: LD_INT 0
50684: ST_TO_ADDR
// uc_nation := 0 ;
50685: LD_ADDR_OWVAR 21
50689: PUSH
50690: LD_INT 0
50692: ST_TO_ADDR
// hc_sex := sex_male ;
50693: LD_ADDR_OWVAR 27
50697: PUSH
50698: LD_INT 1
50700: ST_TO_ADDR
// hc_class := class_apeman ;
50701: LD_ADDR_OWVAR 28
50705: PUSH
50706: LD_INT 12
50708: ST_TO_ADDR
// hc_gallery :=  ;
50709: LD_ADDR_OWVAR 33
50713: PUSH
50714: LD_STRING 
50716: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50717: LD_ADDR_OWVAR 35
50721: PUSH
50722: LD_VAR 0 1
50726: NEG
50727: PPUSH
50728: LD_VAR 0 1
50732: PPUSH
50733: CALL_OW 12
50737: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50738: LD_ADDR_OWVAR 31
50742: PUSH
50743: LD_INT 0
50745: PPUSH
50746: LD_INT 3
50748: PPUSH
50749: CALL_OW 12
50753: PUSH
50754: LD_INT 0
50756: PPUSH
50757: LD_INT 3
50759: PPUSH
50760: CALL_OW 12
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: ST_TO_ADDR
// end ;
50777: LD_VAR 0 2
50781: RET
// export function PrepareTiger ( agressivity ) ; begin
50782: LD_INT 0
50784: PPUSH
// uc_side := 0 ;
50785: LD_ADDR_OWVAR 20
50789: PUSH
50790: LD_INT 0
50792: ST_TO_ADDR
// uc_nation := 0 ;
50793: LD_ADDR_OWVAR 21
50797: PUSH
50798: LD_INT 0
50800: ST_TO_ADDR
// hc_class := class_tiger ;
50801: LD_ADDR_OWVAR 28
50805: PUSH
50806: LD_INT 14
50808: ST_TO_ADDR
// hc_gallery :=  ;
50809: LD_ADDR_OWVAR 33
50813: PUSH
50814: LD_STRING 
50816: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50817: LD_ADDR_OWVAR 35
50821: PUSH
50822: LD_VAR 0 1
50826: NEG
50827: PPUSH
50828: LD_VAR 0 1
50832: PPUSH
50833: CALL_OW 12
50837: ST_TO_ADDR
// end ;
50838: LD_VAR 0 2
50842: RET
// export function PrepareEnchidna ( ) ; begin
50843: LD_INT 0
50845: PPUSH
// uc_side := 0 ;
50846: LD_ADDR_OWVAR 20
50850: PUSH
50851: LD_INT 0
50853: ST_TO_ADDR
// uc_nation := 0 ;
50854: LD_ADDR_OWVAR 21
50858: PUSH
50859: LD_INT 0
50861: ST_TO_ADDR
// hc_class := class_baggie ;
50862: LD_ADDR_OWVAR 28
50866: PUSH
50867: LD_INT 13
50869: ST_TO_ADDR
// hc_gallery :=  ;
50870: LD_ADDR_OWVAR 33
50874: PUSH
50875: LD_STRING 
50877: ST_TO_ADDR
// end ;
50878: LD_VAR 0 1
50882: RET
// export function PrepareFrog ( ) ; begin
50883: LD_INT 0
50885: PPUSH
// uc_side := 0 ;
50886: LD_ADDR_OWVAR 20
50890: PUSH
50891: LD_INT 0
50893: ST_TO_ADDR
// uc_nation := 0 ;
50894: LD_ADDR_OWVAR 21
50898: PUSH
50899: LD_INT 0
50901: ST_TO_ADDR
// hc_class := class_frog ;
50902: LD_ADDR_OWVAR 28
50906: PUSH
50907: LD_INT 19
50909: ST_TO_ADDR
// hc_gallery :=  ;
50910: LD_ADDR_OWVAR 33
50914: PUSH
50915: LD_STRING 
50917: ST_TO_ADDR
// end ;
50918: LD_VAR 0 1
50922: RET
// export function PrepareFish ( ) ; begin
50923: LD_INT 0
50925: PPUSH
// uc_side := 0 ;
50926: LD_ADDR_OWVAR 20
50930: PUSH
50931: LD_INT 0
50933: ST_TO_ADDR
// uc_nation := 0 ;
50934: LD_ADDR_OWVAR 21
50938: PUSH
50939: LD_INT 0
50941: ST_TO_ADDR
// hc_class := class_fish ;
50942: LD_ADDR_OWVAR 28
50946: PUSH
50947: LD_INT 20
50949: ST_TO_ADDR
// hc_gallery :=  ;
50950: LD_ADDR_OWVAR 33
50954: PUSH
50955: LD_STRING 
50957: ST_TO_ADDR
// end ;
50958: LD_VAR 0 1
50962: RET
// export function PrepareBird ( ) ; begin
50963: LD_INT 0
50965: PPUSH
// uc_side := 0 ;
50966: LD_ADDR_OWVAR 20
50970: PUSH
50971: LD_INT 0
50973: ST_TO_ADDR
// uc_nation := 0 ;
50974: LD_ADDR_OWVAR 21
50978: PUSH
50979: LD_INT 0
50981: ST_TO_ADDR
// hc_class := class_phororhacos ;
50982: LD_ADDR_OWVAR 28
50986: PUSH
50987: LD_INT 18
50989: ST_TO_ADDR
// hc_gallery :=  ;
50990: LD_ADDR_OWVAR 33
50994: PUSH
50995: LD_STRING 
50997: ST_TO_ADDR
// end ;
50998: LD_VAR 0 1
51002: RET
// export function PrepareHorse ( ) ; begin
51003: LD_INT 0
51005: PPUSH
// uc_side := 0 ;
51006: LD_ADDR_OWVAR 20
51010: PUSH
51011: LD_INT 0
51013: ST_TO_ADDR
// uc_nation := 0 ;
51014: LD_ADDR_OWVAR 21
51018: PUSH
51019: LD_INT 0
51021: ST_TO_ADDR
// hc_class := class_horse ;
51022: LD_ADDR_OWVAR 28
51026: PUSH
51027: LD_INT 21
51029: ST_TO_ADDR
// hc_gallery :=  ;
51030: LD_ADDR_OWVAR 33
51034: PUSH
51035: LD_STRING 
51037: ST_TO_ADDR
// end ;
51038: LD_VAR 0 1
51042: RET
// export function PrepareMastodont ( ) ; begin
51043: LD_INT 0
51045: PPUSH
// uc_side := 0 ;
51046: LD_ADDR_OWVAR 20
51050: PUSH
51051: LD_INT 0
51053: ST_TO_ADDR
// uc_nation := 0 ;
51054: LD_ADDR_OWVAR 21
51058: PUSH
51059: LD_INT 0
51061: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51062: LD_ADDR_OWVAR 37
51066: PUSH
51067: LD_INT 31
51069: ST_TO_ADDR
// vc_control := control_rider ;
51070: LD_ADDR_OWVAR 38
51074: PUSH
51075: LD_INT 4
51077: ST_TO_ADDR
// end ;
51078: LD_VAR 0 1
51082: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51083: LD_INT 0
51085: PPUSH
51086: PPUSH
51087: PPUSH
// uc_side = 0 ;
51088: LD_ADDR_OWVAR 20
51092: PUSH
51093: LD_INT 0
51095: ST_TO_ADDR
// uc_nation = 0 ;
51096: LD_ADDR_OWVAR 21
51100: PUSH
51101: LD_INT 0
51103: ST_TO_ADDR
// InitHc_All ( ) ;
51104: CALL_OW 584
// InitVc ;
51108: CALL_OW 20
// if mastodonts then
51112: LD_VAR 0 6
51116: IFFALSE 51183
// for i = 1 to mastodonts do
51118: LD_ADDR_VAR 0 11
51122: PUSH
51123: DOUBLE
51124: LD_INT 1
51126: DEC
51127: ST_TO_ADDR
51128: LD_VAR 0 6
51132: PUSH
51133: FOR_TO
51134: IFFALSE 51181
// begin vc_chassis := 31 ;
51136: LD_ADDR_OWVAR 37
51140: PUSH
51141: LD_INT 31
51143: ST_TO_ADDR
// vc_control := control_rider ;
51144: LD_ADDR_OWVAR 38
51148: PUSH
51149: LD_INT 4
51151: ST_TO_ADDR
// animal := CreateVehicle ;
51152: LD_ADDR_VAR 0 12
51156: PUSH
51157: CALL_OW 45
51161: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51162: LD_VAR 0 12
51166: PPUSH
51167: LD_VAR 0 8
51171: PPUSH
51172: LD_INT 0
51174: PPUSH
51175: CALL 53311 0 3
// end ;
51179: GO 51133
51181: POP
51182: POP
// if horses then
51183: LD_VAR 0 5
51187: IFFALSE 51254
// for i = 1 to horses do
51189: LD_ADDR_VAR 0 11
51193: PUSH
51194: DOUBLE
51195: LD_INT 1
51197: DEC
51198: ST_TO_ADDR
51199: LD_VAR 0 5
51203: PUSH
51204: FOR_TO
51205: IFFALSE 51252
// begin hc_class := 21 ;
51207: LD_ADDR_OWVAR 28
51211: PUSH
51212: LD_INT 21
51214: ST_TO_ADDR
// hc_gallery :=  ;
51215: LD_ADDR_OWVAR 33
51219: PUSH
51220: LD_STRING 
51222: ST_TO_ADDR
// animal := CreateHuman ;
51223: LD_ADDR_VAR 0 12
51227: PUSH
51228: CALL_OW 44
51232: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51233: LD_VAR 0 12
51237: PPUSH
51238: LD_VAR 0 8
51242: PPUSH
51243: LD_INT 0
51245: PPUSH
51246: CALL 53311 0 3
// end ;
51250: GO 51204
51252: POP
51253: POP
// if birds then
51254: LD_VAR 0 1
51258: IFFALSE 51325
// for i = 1 to birds do
51260: LD_ADDR_VAR 0 11
51264: PUSH
51265: DOUBLE
51266: LD_INT 1
51268: DEC
51269: ST_TO_ADDR
51270: LD_VAR 0 1
51274: PUSH
51275: FOR_TO
51276: IFFALSE 51323
// begin hc_class := 18 ;
51278: LD_ADDR_OWVAR 28
51282: PUSH
51283: LD_INT 18
51285: ST_TO_ADDR
// hc_gallery =  ;
51286: LD_ADDR_OWVAR 33
51290: PUSH
51291: LD_STRING 
51293: ST_TO_ADDR
// animal := CreateHuman ;
51294: LD_ADDR_VAR 0 12
51298: PUSH
51299: CALL_OW 44
51303: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51304: LD_VAR 0 12
51308: PPUSH
51309: LD_VAR 0 8
51313: PPUSH
51314: LD_INT 0
51316: PPUSH
51317: CALL 53311 0 3
// end ;
51321: GO 51275
51323: POP
51324: POP
// if tigers then
51325: LD_VAR 0 2
51329: IFFALSE 51413
// for i = 1 to tigers do
51331: LD_ADDR_VAR 0 11
51335: PUSH
51336: DOUBLE
51337: LD_INT 1
51339: DEC
51340: ST_TO_ADDR
51341: LD_VAR 0 2
51345: PUSH
51346: FOR_TO
51347: IFFALSE 51411
// begin hc_class = class_tiger ;
51349: LD_ADDR_OWVAR 28
51353: PUSH
51354: LD_INT 14
51356: ST_TO_ADDR
// hc_gallery =  ;
51357: LD_ADDR_OWVAR 33
51361: PUSH
51362: LD_STRING 
51364: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51365: LD_ADDR_OWVAR 35
51369: PUSH
51370: LD_INT 7
51372: NEG
51373: PPUSH
51374: LD_INT 7
51376: PPUSH
51377: CALL_OW 12
51381: ST_TO_ADDR
// animal := CreateHuman ;
51382: LD_ADDR_VAR 0 12
51386: PUSH
51387: CALL_OW 44
51391: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51392: LD_VAR 0 12
51396: PPUSH
51397: LD_VAR 0 8
51401: PPUSH
51402: LD_INT 0
51404: PPUSH
51405: CALL 53311 0 3
// end ;
51409: GO 51346
51411: POP
51412: POP
// if apemans then
51413: LD_VAR 0 3
51417: IFFALSE 51540
// for i = 1 to apemans do
51419: LD_ADDR_VAR 0 11
51423: PUSH
51424: DOUBLE
51425: LD_INT 1
51427: DEC
51428: ST_TO_ADDR
51429: LD_VAR 0 3
51433: PUSH
51434: FOR_TO
51435: IFFALSE 51538
// begin hc_class = class_apeman ;
51437: LD_ADDR_OWVAR 28
51441: PUSH
51442: LD_INT 12
51444: ST_TO_ADDR
// hc_gallery =  ;
51445: LD_ADDR_OWVAR 33
51449: PUSH
51450: LD_STRING 
51452: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51453: LD_ADDR_OWVAR 35
51457: PUSH
51458: LD_INT 2
51460: NEG
51461: PPUSH
51462: LD_INT 2
51464: PPUSH
51465: CALL_OW 12
51469: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51470: LD_ADDR_OWVAR 31
51474: PUSH
51475: LD_INT 1
51477: PPUSH
51478: LD_INT 3
51480: PPUSH
51481: CALL_OW 12
51485: PUSH
51486: LD_INT 1
51488: PPUSH
51489: LD_INT 3
51491: PPUSH
51492: CALL_OW 12
51496: PUSH
51497: LD_INT 0
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: ST_TO_ADDR
// animal := CreateHuman ;
51509: LD_ADDR_VAR 0 12
51513: PUSH
51514: CALL_OW 44
51518: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51519: LD_VAR 0 12
51523: PPUSH
51524: LD_VAR 0 8
51528: PPUSH
51529: LD_INT 0
51531: PPUSH
51532: CALL 53311 0 3
// end ;
51536: GO 51434
51538: POP
51539: POP
// if enchidnas then
51540: LD_VAR 0 4
51544: IFFALSE 51611
// for i = 1 to enchidnas do
51546: LD_ADDR_VAR 0 11
51550: PUSH
51551: DOUBLE
51552: LD_INT 1
51554: DEC
51555: ST_TO_ADDR
51556: LD_VAR 0 4
51560: PUSH
51561: FOR_TO
51562: IFFALSE 51609
// begin hc_class = 13 ;
51564: LD_ADDR_OWVAR 28
51568: PUSH
51569: LD_INT 13
51571: ST_TO_ADDR
// hc_gallery =  ;
51572: LD_ADDR_OWVAR 33
51576: PUSH
51577: LD_STRING 
51579: ST_TO_ADDR
// animal := CreateHuman ;
51580: LD_ADDR_VAR 0 12
51584: PUSH
51585: CALL_OW 44
51589: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51590: LD_VAR 0 12
51594: PPUSH
51595: LD_VAR 0 8
51599: PPUSH
51600: LD_INT 0
51602: PPUSH
51603: CALL 53311 0 3
// end ;
51607: GO 51561
51609: POP
51610: POP
// if fishes then
51611: LD_VAR 0 7
51615: IFFALSE 51682
// for i = 1 to fishes do
51617: LD_ADDR_VAR 0 11
51621: PUSH
51622: DOUBLE
51623: LD_INT 1
51625: DEC
51626: ST_TO_ADDR
51627: LD_VAR 0 7
51631: PUSH
51632: FOR_TO
51633: IFFALSE 51680
// begin hc_class = 20 ;
51635: LD_ADDR_OWVAR 28
51639: PUSH
51640: LD_INT 20
51642: ST_TO_ADDR
// hc_gallery =  ;
51643: LD_ADDR_OWVAR 33
51647: PUSH
51648: LD_STRING 
51650: ST_TO_ADDR
// animal := CreateHuman ;
51651: LD_ADDR_VAR 0 12
51655: PUSH
51656: CALL_OW 44
51660: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51661: LD_VAR 0 12
51665: PPUSH
51666: LD_VAR 0 9
51670: PPUSH
51671: LD_INT 0
51673: PPUSH
51674: CALL 53311 0 3
// end ;
51678: GO 51632
51680: POP
51681: POP
// end ;
51682: LD_VAR 0 10
51686: RET
// export function WantHeal ( sci , unit ) ; begin
51687: LD_INT 0
51689: PPUSH
// if GetTaskList ( sci ) > 0 then
51690: LD_VAR 0 1
51694: PPUSH
51695: CALL_OW 437
51699: PUSH
51700: LD_INT 0
51702: GREATER
51703: IFFALSE 51773
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51705: LD_VAR 0 1
51709: PPUSH
51710: CALL_OW 437
51714: PUSH
51715: LD_INT 1
51717: ARRAY
51718: PUSH
51719: LD_INT 1
51721: ARRAY
51722: PUSH
51723: LD_STRING l
51725: EQUAL
51726: PUSH
51727: LD_VAR 0 1
51731: PPUSH
51732: CALL_OW 437
51736: PUSH
51737: LD_INT 1
51739: ARRAY
51740: PUSH
51741: LD_INT 4
51743: ARRAY
51744: PUSH
51745: LD_VAR 0 2
51749: EQUAL
51750: AND
51751: IFFALSE 51763
// result := true else
51753: LD_ADDR_VAR 0 3
51757: PUSH
51758: LD_INT 1
51760: ST_TO_ADDR
51761: GO 51771
// result := false ;
51763: LD_ADDR_VAR 0 3
51767: PUSH
51768: LD_INT 0
51770: ST_TO_ADDR
// end else
51771: GO 51781
// result := false ;
51773: LD_ADDR_VAR 0 3
51777: PUSH
51778: LD_INT 0
51780: ST_TO_ADDR
// end ;
51781: LD_VAR 0 3
51785: RET
// export function HealTarget ( sci ) ; begin
51786: LD_INT 0
51788: PPUSH
// if not sci then
51789: LD_VAR 0 1
51793: NOT
51794: IFFALSE 51798
// exit ;
51796: GO 51863
// result := 0 ;
51798: LD_ADDR_VAR 0 2
51802: PUSH
51803: LD_INT 0
51805: ST_TO_ADDR
// if GetTaskList ( sci ) then
51806: LD_VAR 0 1
51810: PPUSH
51811: CALL_OW 437
51815: IFFALSE 51863
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51817: LD_VAR 0 1
51821: PPUSH
51822: CALL_OW 437
51826: PUSH
51827: LD_INT 1
51829: ARRAY
51830: PUSH
51831: LD_INT 1
51833: ARRAY
51834: PUSH
51835: LD_STRING l
51837: EQUAL
51838: IFFALSE 51863
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51840: LD_ADDR_VAR 0 2
51844: PUSH
51845: LD_VAR 0 1
51849: PPUSH
51850: CALL_OW 437
51854: PUSH
51855: LD_INT 1
51857: ARRAY
51858: PUSH
51859: LD_INT 4
51861: ARRAY
51862: ST_TO_ADDR
// end ;
51863: LD_VAR 0 2
51867: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51868: LD_INT 0
51870: PPUSH
51871: PPUSH
51872: PPUSH
51873: PPUSH
// if not base_units then
51874: LD_VAR 0 1
51878: NOT
51879: IFFALSE 51883
// exit ;
51881: GO 51970
// result := false ;
51883: LD_ADDR_VAR 0 2
51887: PUSH
51888: LD_INT 0
51890: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51891: LD_ADDR_VAR 0 5
51895: PUSH
51896: LD_VAR 0 1
51900: PPUSH
51901: LD_INT 21
51903: PUSH
51904: LD_INT 3
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PPUSH
51911: CALL_OW 72
51915: ST_TO_ADDR
// if not tmp then
51916: LD_VAR 0 5
51920: NOT
51921: IFFALSE 51925
// exit ;
51923: GO 51970
// for i in tmp do
51925: LD_ADDR_VAR 0 3
51929: PUSH
51930: LD_VAR 0 5
51934: PUSH
51935: FOR_IN
51936: IFFALSE 51968
// begin result := EnemyInRange ( i , 22 ) ;
51938: LD_ADDR_VAR 0 2
51942: PUSH
51943: LD_VAR 0 3
51947: PPUSH
51948: LD_INT 22
51950: PPUSH
51951: CALL 49568 0 2
51955: ST_TO_ADDR
// if result then
51956: LD_VAR 0 2
51960: IFFALSE 51966
// exit ;
51962: POP
51963: POP
51964: GO 51970
// end ;
51966: GO 51935
51968: POP
51969: POP
// end ;
51970: LD_VAR 0 2
51974: RET
// export function FilterByTag ( units , tag ) ; begin
51975: LD_INT 0
51977: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51978: LD_ADDR_VAR 0 3
51982: PUSH
51983: LD_VAR 0 1
51987: PPUSH
51988: LD_INT 120
51990: PUSH
51991: LD_VAR 0 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PPUSH
52000: CALL_OW 72
52004: ST_TO_ADDR
// end ;
52005: LD_VAR 0 3
52009: RET
// export function IsDriver ( un ) ; begin
52010: LD_INT 0
52012: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52013: LD_ADDR_VAR 0 2
52017: PUSH
52018: LD_VAR 0 1
52022: PUSH
52023: LD_INT 55
52025: PUSH
52026: EMPTY
52027: LIST
52028: PPUSH
52029: CALL_OW 69
52033: IN
52034: ST_TO_ADDR
// end ;
52035: LD_VAR 0 2
52039: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52040: LD_INT 0
52042: PPUSH
52043: PPUSH
// list := [ ] ;
52044: LD_ADDR_VAR 0 5
52048: PUSH
52049: EMPTY
52050: ST_TO_ADDR
// case d of 0 :
52051: LD_VAR 0 3
52055: PUSH
52056: LD_INT 0
52058: DOUBLE
52059: EQUAL
52060: IFTRUE 52064
52062: GO 52197
52064: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52065: LD_ADDR_VAR 0 5
52069: PUSH
52070: LD_VAR 0 1
52074: PUSH
52075: LD_INT 4
52077: MINUS
52078: PUSH
52079: LD_VAR 0 2
52083: PUSH
52084: LD_INT 4
52086: MINUS
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: LIST
52095: PUSH
52096: LD_VAR 0 1
52100: PUSH
52101: LD_INT 3
52103: MINUS
52104: PUSH
52105: LD_VAR 0 2
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: PUSH
52118: LD_VAR 0 1
52122: PUSH
52123: LD_INT 4
52125: PLUS
52126: PUSH
52127: LD_VAR 0 2
52131: PUSH
52132: LD_INT 4
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: LIST
52139: PUSH
52140: LD_VAR 0 1
52144: PUSH
52145: LD_INT 3
52147: PLUS
52148: PUSH
52149: LD_VAR 0 2
52153: PUSH
52154: LD_INT 3
52156: PLUS
52157: PUSH
52158: LD_INT 5
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: LIST
52165: PUSH
52166: LD_VAR 0 1
52170: PUSH
52171: LD_VAR 0 2
52175: PUSH
52176: LD_INT 4
52178: PLUS
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: LIST
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: ST_TO_ADDR
// end ; 1 :
52195: GO 52895
52197: LD_INT 1
52199: DOUBLE
52200: EQUAL
52201: IFTRUE 52205
52203: GO 52338
52205: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52206: LD_ADDR_VAR 0 5
52210: PUSH
52211: LD_VAR 0 1
52215: PUSH
52216: LD_VAR 0 2
52220: PUSH
52221: LD_INT 4
52223: MINUS
52224: PUSH
52225: LD_INT 3
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: LIST
52232: PUSH
52233: LD_VAR 0 1
52237: PUSH
52238: LD_INT 3
52240: MINUS
52241: PUSH
52242: LD_VAR 0 2
52246: PUSH
52247: LD_INT 3
52249: MINUS
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: LIST
52258: PUSH
52259: LD_VAR 0 1
52263: PUSH
52264: LD_INT 4
52266: MINUS
52267: PUSH
52268: LD_VAR 0 2
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: LIST
52280: PUSH
52281: LD_VAR 0 1
52285: PUSH
52286: LD_VAR 0 2
52290: PUSH
52291: LD_INT 3
52293: PLUS
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: LIST
52302: PUSH
52303: LD_VAR 0 1
52307: PUSH
52308: LD_INT 4
52310: PLUS
52311: PUSH
52312: LD_VAR 0 2
52316: PUSH
52317: LD_INT 4
52319: PLUS
52320: PUSH
52321: LD_INT 5
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: LIST
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: ST_TO_ADDR
// end ; 2 :
52336: GO 52895
52338: LD_INT 2
52340: DOUBLE
52341: EQUAL
52342: IFTRUE 52346
52344: GO 52475
52346: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52347: LD_ADDR_VAR 0 5
52351: PUSH
52352: LD_VAR 0 1
52356: PUSH
52357: LD_VAR 0 2
52361: PUSH
52362: LD_INT 3
52364: MINUS
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: LIST
52373: PUSH
52374: LD_VAR 0 1
52378: PUSH
52379: LD_INT 4
52381: PLUS
52382: PUSH
52383: LD_VAR 0 2
52387: PUSH
52388: LD_INT 4
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: LIST
52395: PUSH
52396: LD_VAR 0 1
52400: PUSH
52401: LD_VAR 0 2
52405: PUSH
52406: LD_INT 4
52408: PLUS
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: LIST
52417: PUSH
52418: LD_VAR 0 1
52422: PUSH
52423: LD_INT 3
52425: MINUS
52426: PUSH
52427: LD_VAR 0 2
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: LIST
52439: PUSH
52440: LD_VAR 0 1
52444: PUSH
52445: LD_INT 4
52447: MINUS
52448: PUSH
52449: LD_VAR 0 2
52453: PUSH
52454: LD_INT 4
52456: MINUS
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: LIST
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: ST_TO_ADDR
// end ; 3 :
52473: GO 52895
52475: LD_INT 3
52477: DOUBLE
52478: EQUAL
52479: IFTRUE 52483
52481: GO 52616
52483: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52484: LD_ADDR_VAR 0 5
52488: PUSH
52489: LD_VAR 0 1
52493: PUSH
52494: LD_INT 3
52496: PLUS
52497: PUSH
52498: LD_VAR 0 2
52502: PUSH
52503: LD_INT 4
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: LIST
52510: PUSH
52511: LD_VAR 0 1
52515: PUSH
52516: LD_INT 4
52518: PLUS
52519: PUSH
52520: LD_VAR 0 2
52524: PUSH
52525: LD_INT 4
52527: PLUS
52528: PUSH
52529: LD_INT 5
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: LIST
52536: PUSH
52537: LD_VAR 0 1
52541: PUSH
52542: LD_INT 4
52544: MINUS
52545: PUSH
52546: LD_VAR 0 2
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: LIST
52558: PUSH
52559: LD_VAR 0 1
52563: PUSH
52564: LD_VAR 0 2
52568: PUSH
52569: LD_INT 4
52571: MINUS
52572: PUSH
52573: LD_INT 3
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: LIST
52580: PUSH
52581: LD_VAR 0 1
52585: PUSH
52586: LD_INT 3
52588: MINUS
52589: PUSH
52590: LD_VAR 0 2
52594: PUSH
52595: LD_INT 3
52597: MINUS
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: LIST
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: ST_TO_ADDR
// end ; 4 :
52614: GO 52895
52616: LD_INT 4
52618: DOUBLE
52619: EQUAL
52620: IFTRUE 52624
52622: GO 52757
52624: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52625: LD_ADDR_VAR 0 5
52629: PUSH
52630: LD_VAR 0 1
52634: PUSH
52635: LD_VAR 0 2
52639: PUSH
52640: LD_INT 4
52642: PLUS
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: LIST
52651: PUSH
52652: LD_VAR 0 1
52656: PUSH
52657: LD_INT 3
52659: PLUS
52660: PUSH
52661: LD_VAR 0 2
52665: PUSH
52666: LD_INT 3
52668: PLUS
52669: PUSH
52670: LD_INT 5
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: LIST
52677: PUSH
52678: LD_VAR 0 1
52682: PUSH
52683: LD_INT 4
52685: PLUS
52686: PUSH
52687: LD_VAR 0 2
52691: PUSH
52692: LD_INT 4
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: LIST
52699: PUSH
52700: LD_VAR 0 1
52704: PUSH
52705: LD_VAR 0 2
52709: PUSH
52710: LD_INT 3
52712: MINUS
52713: PUSH
52714: LD_INT 3
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: LIST
52721: PUSH
52722: LD_VAR 0 1
52726: PUSH
52727: LD_INT 4
52729: MINUS
52730: PUSH
52731: LD_VAR 0 2
52735: PUSH
52736: LD_INT 4
52738: MINUS
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: LIST
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: ST_TO_ADDR
// end ; 5 :
52755: GO 52895
52757: LD_INT 5
52759: DOUBLE
52760: EQUAL
52761: IFTRUE 52765
52763: GO 52894
52765: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52766: LD_ADDR_VAR 0 5
52770: PUSH
52771: LD_VAR 0 1
52775: PUSH
52776: LD_INT 4
52778: MINUS
52779: PUSH
52780: LD_VAR 0 2
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: LIST
52792: PUSH
52793: LD_VAR 0 1
52797: PUSH
52798: LD_VAR 0 2
52802: PUSH
52803: LD_INT 4
52805: MINUS
52806: PUSH
52807: LD_INT 3
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: LIST
52814: PUSH
52815: LD_VAR 0 1
52819: PUSH
52820: LD_INT 4
52822: PLUS
52823: PUSH
52824: LD_VAR 0 2
52828: PUSH
52829: LD_INT 4
52831: PLUS
52832: PUSH
52833: LD_INT 5
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: LIST
52840: PUSH
52841: LD_VAR 0 1
52845: PUSH
52846: LD_INT 3
52848: PLUS
52849: PUSH
52850: LD_VAR 0 2
52854: PUSH
52855: LD_INT 4
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: LIST
52862: PUSH
52863: LD_VAR 0 1
52867: PUSH
52868: LD_VAR 0 2
52872: PUSH
52873: LD_INT 3
52875: PLUS
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: LIST
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: ST_TO_ADDR
// end ; end ;
52892: GO 52895
52894: POP
// result := list ;
52895: LD_ADDR_VAR 0 4
52899: PUSH
52900: LD_VAR 0 5
52904: ST_TO_ADDR
// end ;
52905: LD_VAR 0 4
52909: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52910: LD_INT 0
52912: PPUSH
52913: PPUSH
52914: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52915: LD_VAR 0 1
52919: NOT
52920: PUSH
52921: LD_VAR 0 2
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: LD_INT 3
52934: PUSH
52935: LD_INT 4
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: IN
52944: NOT
52945: OR
52946: IFFALSE 52950
// exit ;
52948: GO 53033
// tmp := [ ] ;
52950: LD_ADDR_VAR 0 5
52954: PUSH
52955: EMPTY
52956: ST_TO_ADDR
// for i in units do
52957: LD_ADDR_VAR 0 4
52961: PUSH
52962: LD_VAR 0 1
52966: PUSH
52967: FOR_IN
52968: IFFALSE 53002
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52970: LD_ADDR_VAR 0 5
52974: PUSH
52975: LD_VAR 0 5
52979: PPUSH
52980: LD_VAR 0 4
52984: PPUSH
52985: LD_VAR 0 2
52989: PPUSH
52990: CALL_OW 259
52994: PPUSH
52995: CALL 54406 0 2
52999: ST_TO_ADDR
53000: GO 52967
53002: POP
53003: POP
// if not tmp then
53004: LD_VAR 0 5
53008: NOT
53009: IFFALSE 53013
// exit ;
53011: GO 53033
// result := SortListByListDesc ( units , tmp ) ;
53013: LD_ADDR_VAR 0 3
53017: PUSH
53018: LD_VAR 0 1
53022: PPUSH
53023: LD_VAR 0 5
53027: PPUSH
53028: CALL_OW 77
53032: ST_TO_ADDR
// end ;
53033: LD_VAR 0 3
53037: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53038: LD_INT 0
53040: PPUSH
53041: PPUSH
53042: PPUSH
// result := false ;
53043: LD_ADDR_VAR 0 3
53047: PUSH
53048: LD_INT 0
53050: ST_TO_ADDR
// if not building then
53051: LD_VAR 0 2
53055: NOT
53056: IFFALSE 53060
// exit ;
53058: GO 53198
// x := GetX ( building ) ;
53060: LD_ADDR_VAR 0 4
53064: PUSH
53065: LD_VAR 0 2
53069: PPUSH
53070: CALL_OW 250
53074: ST_TO_ADDR
// y := GetY ( building ) ;
53075: LD_ADDR_VAR 0 5
53079: PUSH
53080: LD_VAR 0 2
53084: PPUSH
53085: CALL_OW 251
53089: ST_TO_ADDR
// if not x or not y then
53090: LD_VAR 0 4
53094: NOT
53095: PUSH
53096: LD_VAR 0 5
53100: NOT
53101: OR
53102: IFFALSE 53106
// exit ;
53104: GO 53198
// if GetTaskList ( unit ) then
53106: LD_VAR 0 1
53110: PPUSH
53111: CALL_OW 437
53115: IFFALSE 53198
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53117: LD_STRING e
53119: PUSH
53120: LD_VAR 0 1
53124: PPUSH
53125: CALL_OW 437
53129: PUSH
53130: LD_INT 1
53132: ARRAY
53133: PUSH
53134: LD_INT 1
53136: ARRAY
53137: EQUAL
53138: PUSH
53139: LD_VAR 0 4
53143: PUSH
53144: LD_VAR 0 1
53148: PPUSH
53149: CALL_OW 437
53153: PUSH
53154: LD_INT 1
53156: ARRAY
53157: PUSH
53158: LD_INT 2
53160: ARRAY
53161: EQUAL
53162: AND
53163: PUSH
53164: LD_VAR 0 5
53168: PUSH
53169: LD_VAR 0 1
53173: PPUSH
53174: CALL_OW 437
53178: PUSH
53179: LD_INT 1
53181: ARRAY
53182: PUSH
53183: LD_INT 3
53185: ARRAY
53186: EQUAL
53187: AND
53188: IFFALSE 53198
// result := true end ;
53190: LD_ADDR_VAR 0 3
53194: PUSH
53195: LD_INT 1
53197: ST_TO_ADDR
// end ;
53198: LD_VAR 0 3
53202: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53203: LD_INT 0
53205: PPUSH
// result := false ;
53206: LD_ADDR_VAR 0 4
53210: PUSH
53211: LD_INT 0
53213: ST_TO_ADDR
// if GetTaskList ( unit ) then
53214: LD_VAR 0 1
53218: PPUSH
53219: CALL_OW 437
53223: IFFALSE 53306
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53225: LD_STRING M
53227: PUSH
53228: LD_VAR 0 1
53232: PPUSH
53233: CALL_OW 437
53237: PUSH
53238: LD_INT 1
53240: ARRAY
53241: PUSH
53242: LD_INT 1
53244: ARRAY
53245: EQUAL
53246: PUSH
53247: LD_VAR 0 2
53251: PUSH
53252: LD_VAR 0 1
53256: PPUSH
53257: CALL_OW 437
53261: PUSH
53262: LD_INT 1
53264: ARRAY
53265: PUSH
53266: LD_INT 2
53268: ARRAY
53269: EQUAL
53270: AND
53271: PUSH
53272: LD_VAR 0 3
53276: PUSH
53277: LD_VAR 0 1
53281: PPUSH
53282: CALL_OW 437
53286: PUSH
53287: LD_INT 1
53289: ARRAY
53290: PUSH
53291: LD_INT 3
53293: ARRAY
53294: EQUAL
53295: AND
53296: IFFALSE 53306
// result := true ;
53298: LD_ADDR_VAR 0 4
53302: PUSH
53303: LD_INT 1
53305: ST_TO_ADDR
// end ; end ;
53306: LD_VAR 0 4
53310: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53311: LD_INT 0
53313: PPUSH
53314: PPUSH
53315: PPUSH
53316: PPUSH
// if not unit or not area then
53317: LD_VAR 0 1
53321: NOT
53322: PUSH
53323: LD_VAR 0 2
53327: NOT
53328: OR
53329: IFFALSE 53333
// exit ;
53331: GO 53509
// tmp := AreaToList ( area , i ) ;
53333: LD_ADDR_VAR 0 6
53337: PUSH
53338: LD_VAR 0 2
53342: PPUSH
53343: LD_VAR 0 5
53347: PPUSH
53348: CALL_OW 517
53352: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53353: LD_ADDR_VAR 0 5
53357: PUSH
53358: DOUBLE
53359: LD_INT 1
53361: DEC
53362: ST_TO_ADDR
53363: LD_VAR 0 6
53367: PUSH
53368: LD_INT 1
53370: ARRAY
53371: PUSH
53372: FOR_TO
53373: IFFALSE 53507
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53375: LD_ADDR_VAR 0 7
53379: PUSH
53380: LD_VAR 0 6
53384: PUSH
53385: LD_INT 1
53387: ARRAY
53388: PUSH
53389: LD_VAR 0 5
53393: ARRAY
53394: PUSH
53395: LD_VAR 0 6
53399: PUSH
53400: LD_INT 2
53402: ARRAY
53403: PUSH
53404: LD_VAR 0 5
53408: ARRAY
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53414: LD_INT 92
53416: PUSH
53417: LD_VAR 0 7
53421: PUSH
53422: LD_INT 1
53424: ARRAY
53425: PUSH
53426: LD_VAR 0 7
53430: PUSH
53431: LD_INT 2
53433: ARRAY
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: PPUSH
53444: CALL_OW 69
53448: PUSH
53449: LD_INT 0
53451: EQUAL
53452: IFFALSE 53505
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53454: LD_VAR 0 1
53458: PPUSH
53459: LD_VAR 0 7
53463: PUSH
53464: LD_INT 1
53466: ARRAY
53467: PPUSH
53468: LD_VAR 0 7
53472: PUSH
53473: LD_INT 2
53475: ARRAY
53476: PPUSH
53477: LD_VAR 0 3
53481: PPUSH
53482: CALL_OW 48
// result := IsPlaced ( unit ) ;
53486: LD_ADDR_VAR 0 4
53490: PUSH
53491: LD_VAR 0 1
53495: PPUSH
53496: CALL_OW 305
53500: ST_TO_ADDR
// exit ;
53501: POP
53502: POP
53503: GO 53509
// end ; end ;
53505: GO 53372
53507: POP
53508: POP
// end ;
53509: LD_VAR 0 4
53513: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53514: LD_INT 0
53516: PPUSH
53517: PPUSH
53518: PPUSH
// if not side or side > 8 then
53519: LD_VAR 0 1
53523: NOT
53524: PUSH
53525: LD_VAR 0 1
53529: PUSH
53530: LD_INT 8
53532: GREATER
53533: OR
53534: IFFALSE 53538
// exit ;
53536: GO 53725
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53538: LD_ADDR_VAR 0 4
53542: PUSH
53543: LD_INT 22
53545: PUSH
53546: LD_VAR 0 1
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 21
53557: PUSH
53558: LD_INT 3
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PPUSH
53569: CALL_OW 69
53573: ST_TO_ADDR
// if not tmp then
53574: LD_VAR 0 4
53578: NOT
53579: IFFALSE 53583
// exit ;
53581: GO 53725
// enable_addtolog := true ;
53583: LD_ADDR_OWVAR 81
53587: PUSH
53588: LD_INT 1
53590: ST_TO_ADDR
// AddToLog ( [ ) ;
53591: LD_STRING [
53593: PPUSH
53594: CALL_OW 561
// for i in tmp do
53598: LD_ADDR_VAR 0 3
53602: PUSH
53603: LD_VAR 0 4
53607: PUSH
53608: FOR_IN
53609: IFFALSE 53716
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53611: LD_STRING [
53613: PUSH
53614: LD_VAR 0 3
53618: PPUSH
53619: CALL_OW 266
53623: STR
53624: PUSH
53625: LD_STRING , 
53627: STR
53628: PUSH
53629: LD_VAR 0 3
53633: PPUSH
53634: CALL_OW 250
53638: STR
53639: PUSH
53640: LD_STRING , 
53642: STR
53643: PUSH
53644: LD_VAR 0 3
53648: PPUSH
53649: CALL_OW 251
53653: STR
53654: PUSH
53655: LD_STRING , 
53657: STR
53658: PUSH
53659: LD_VAR 0 3
53663: PPUSH
53664: CALL_OW 254
53668: STR
53669: PUSH
53670: LD_STRING , 
53672: STR
53673: PUSH
53674: LD_VAR 0 3
53678: PPUSH
53679: LD_INT 1
53681: PPUSH
53682: CALL_OW 268
53686: STR
53687: PUSH
53688: LD_STRING , 
53690: STR
53691: PUSH
53692: LD_VAR 0 3
53696: PPUSH
53697: LD_INT 2
53699: PPUSH
53700: CALL_OW 268
53704: STR
53705: PUSH
53706: LD_STRING ],
53708: STR
53709: PPUSH
53710: CALL_OW 561
// end ;
53714: GO 53608
53716: POP
53717: POP
// AddToLog ( ]; ) ;
53718: LD_STRING ];
53720: PPUSH
53721: CALL_OW 561
// end ;
53725: LD_VAR 0 2
53729: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53730: LD_INT 0
53732: PPUSH
53733: PPUSH
53734: PPUSH
53735: PPUSH
53736: PPUSH
// if not area or not rate or not max then
53737: LD_VAR 0 1
53741: NOT
53742: PUSH
53743: LD_VAR 0 2
53747: NOT
53748: OR
53749: PUSH
53750: LD_VAR 0 4
53754: NOT
53755: OR
53756: IFFALSE 53760
// exit ;
53758: GO 53949
// while 1 do
53760: LD_INT 1
53762: IFFALSE 53949
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53764: LD_ADDR_VAR 0 9
53768: PUSH
53769: LD_VAR 0 1
53773: PPUSH
53774: LD_INT 1
53776: PPUSH
53777: CALL_OW 287
53781: PUSH
53782: LD_INT 10
53784: MUL
53785: ST_TO_ADDR
// r := rate / 10 ;
53786: LD_ADDR_VAR 0 7
53790: PUSH
53791: LD_VAR 0 2
53795: PUSH
53796: LD_INT 10
53798: DIVREAL
53799: ST_TO_ADDR
// time := 1 1$00 ;
53800: LD_ADDR_VAR 0 8
53804: PUSH
53805: LD_INT 2100
53807: ST_TO_ADDR
// if amount < min then
53808: LD_VAR 0 9
53812: PUSH
53813: LD_VAR 0 3
53817: LESS
53818: IFFALSE 53836
// r := r * 2 else
53820: LD_ADDR_VAR 0 7
53824: PUSH
53825: LD_VAR 0 7
53829: PUSH
53830: LD_INT 2
53832: MUL
53833: ST_TO_ADDR
53834: GO 53862
// if amount > max then
53836: LD_VAR 0 9
53840: PUSH
53841: LD_VAR 0 4
53845: GREATER
53846: IFFALSE 53862
// r := r / 2 ;
53848: LD_ADDR_VAR 0 7
53852: PUSH
53853: LD_VAR 0 7
53857: PUSH
53858: LD_INT 2
53860: DIVREAL
53861: ST_TO_ADDR
// time := time / r ;
53862: LD_ADDR_VAR 0 8
53866: PUSH
53867: LD_VAR 0 8
53871: PUSH
53872: LD_VAR 0 7
53876: DIVREAL
53877: ST_TO_ADDR
// if time < 0 then
53878: LD_VAR 0 8
53882: PUSH
53883: LD_INT 0
53885: LESS
53886: IFFALSE 53903
// time := time * - 1 ;
53888: LD_ADDR_VAR 0 8
53892: PUSH
53893: LD_VAR 0 8
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: MUL
53902: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53903: LD_VAR 0 8
53907: PUSH
53908: LD_INT 35
53910: PPUSH
53911: LD_INT 875
53913: PPUSH
53914: CALL_OW 12
53918: PLUS
53919: PPUSH
53920: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53924: LD_INT 1
53926: PPUSH
53927: LD_INT 5
53929: PPUSH
53930: CALL_OW 12
53934: PPUSH
53935: LD_VAR 0 1
53939: PPUSH
53940: LD_INT 1
53942: PPUSH
53943: CALL_OW 55
// end ;
53947: GO 53760
// end ;
53949: LD_VAR 0 5
53953: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53954: LD_INT 0
53956: PPUSH
53957: PPUSH
53958: PPUSH
53959: PPUSH
53960: PPUSH
53961: PPUSH
53962: PPUSH
53963: PPUSH
// if not turrets or not factories then
53964: LD_VAR 0 1
53968: NOT
53969: PUSH
53970: LD_VAR 0 2
53974: NOT
53975: OR
53976: IFFALSE 53980
// exit ;
53978: GO 54287
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53980: LD_ADDR_VAR 0 10
53984: PUSH
53985: LD_INT 5
53987: PUSH
53988: LD_INT 6
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: LD_INT 4
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 3
54007: PUSH
54008: LD_INT 5
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 24
54022: PUSH
54023: LD_INT 25
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 23
54032: PUSH
54033: LD_INT 27
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 42
54046: PUSH
54047: LD_INT 43
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 44
54056: PUSH
54057: LD_INT 46
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 45
54066: PUSH
54067: LD_INT 47
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: LIST
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: LIST
54083: ST_TO_ADDR
// result := [ ] ;
54084: LD_ADDR_VAR 0 3
54088: PUSH
54089: EMPTY
54090: ST_TO_ADDR
// for i in turrets do
54091: LD_ADDR_VAR 0 4
54095: PUSH
54096: LD_VAR 0 1
54100: PUSH
54101: FOR_IN
54102: IFFALSE 54285
// begin nat := GetNation ( i ) ;
54104: LD_ADDR_VAR 0 7
54108: PUSH
54109: LD_VAR 0 4
54113: PPUSH
54114: CALL_OW 248
54118: ST_TO_ADDR
// weapon := 0 ;
54119: LD_ADDR_VAR 0 8
54123: PUSH
54124: LD_INT 0
54126: ST_TO_ADDR
// if not nat then
54127: LD_VAR 0 7
54131: NOT
54132: IFFALSE 54136
// continue ;
54134: GO 54101
// for j in list [ nat ] do
54136: LD_ADDR_VAR 0 5
54140: PUSH
54141: LD_VAR 0 10
54145: PUSH
54146: LD_VAR 0 7
54150: ARRAY
54151: PUSH
54152: FOR_IN
54153: IFFALSE 54194
// if GetBWeapon ( i ) = j [ 1 ] then
54155: LD_VAR 0 4
54159: PPUSH
54160: CALL_OW 269
54164: PUSH
54165: LD_VAR 0 5
54169: PUSH
54170: LD_INT 1
54172: ARRAY
54173: EQUAL
54174: IFFALSE 54192
// begin weapon := j [ 2 ] ;
54176: LD_ADDR_VAR 0 8
54180: PUSH
54181: LD_VAR 0 5
54185: PUSH
54186: LD_INT 2
54188: ARRAY
54189: ST_TO_ADDR
// break ;
54190: GO 54194
// end ;
54192: GO 54152
54194: POP
54195: POP
// if not weapon then
54196: LD_VAR 0 8
54200: NOT
54201: IFFALSE 54205
// continue ;
54203: GO 54101
// for k in factories do
54205: LD_ADDR_VAR 0 6
54209: PUSH
54210: LD_VAR 0 2
54214: PUSH
54215: FOR_IN
54216: IFFALSE 54281
// begin weapons := AvailableWeaponList ( k ) ;
54218: LD_ADDR_VAR 0 9
54222: PUSH
54223: LD_VAR 0 6
54227: PPUSH
54228: CALL_OW 478
54232: ST_TO_ADDR
// if not weapons then
54233: LD_VAR 0 9
54237: NOT
54238: IFFALSE 54242
// continue ;
54240: GO 54215
// if weapon in weapons then
54242: LD_VAR 0 8
54246: PUSH
54247: LD_VAR 0 9
54251: IN
54252: IFFALSE 54279
// begin result := [ i , weapon ] ;
54254: LD_ADDR_VAR 0 3
54258: PUSH
54259: LD_VAR 0 4
54263: PUSH
54264: LD_VAR 0 8
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: ST_TO_ADDR
// exit ;
54273: POP
54274: POP
54275: POP
54276: POP
54277: GO 54287
// end ; end ;
54279: GO 54215
54281: POP
54282: POP
// end ;
54283: GO 54101
54285: POP
54286: POP
// end ;
54287: LD_VAR 0 3
54291: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54292: LD_INT 0
54294: PPUSH
// if not side or side > 8 then
54295: LD_VAR 0 3
54299: NOT
54300: PUSH
54301: LD_VAR 0 3
54305: PUSH
54306: LD_INT 8
54308: GREATER
54309: OR
54310: IFFALSE 54314
// exit ;
54312: GO 54373
// if not range then
54314: LD_VAR 0 4
54318: NOT
54319: IFFALSE 54330
// range := - 12 ;
54321: LD_ADDR_VAR 0 4
54325: PUSH
54326: LD_INT 12
54328: NEG
54329: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54330: LD_VAR 0 1
54334: PPUSH
54335: LD_VAR 0 2
54339: PPUSH
54340: LD_VAR 0 3
54344: PPUSH
54345: LD_VAR 0 4
54349: PPUSH
54350: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54354: LD_VAR 0 1
54358: PPUSH
54359: LD_VAR 0 2
54363: PPUSH
54364: LD_VAR 0 3
54368: PPUSH
54369: CALL_OW 331
// end ;
54373: LD_VAR 0 5
54377: RET
// export function Video ( mode ) ; begin
54378: LD_INT 0
54380: PPUSH
// ingame_video = mode ;
54381: LD_ADDR_OWVAR 52
54385: PUSH
54386: LD_VAR 0 1
54390: ST_TO_ADDR
// interface_hidden = mode ;
54391: LD_ADDR_OWVAR 54
54395: PUSH
54396: LD_VAR 0 1
54400: ST_TO_ADDR
// end ;
54401: LD_VAR 0 2
54405: RET
// export function Join ( array , element ) ; begin
54406: LD_INT 0
54408: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54409: LD_ADDR_VAR 0 3
54413: PUSH
54414: LD_VAR 0 1
54418: PPUSH
54419: LD_VAR 0 1
54423: PUSH
54424: LD_INT 1
54426: PLUS
54427: PPUSH
54428: LD_VAR 0 2
54432: PPUSH
54433: CALL_OW 1
54437: ST_TO_ADDR
// end ;
54438: LD_VAR 0 3
54442: RET
// export function JoinUnion ( array , element ) ; begin
54443: LD_INT 0
54445: PPUSH
// result := array union element ;
54446: LD_ADDR_VAR 0 3
54450: PUSH
54451: LD_VAR 0 1
54455: PUSH
54456: LD_VAR 0 2
54460: UNION
54461: ST_TO_ADDR
// end ;
54462: LD_VAR 0 3
54466: RET
// export function GetBehemoths ( side ) ; begin
54467: LD_INT 0
54469: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54470: LD_ADDR_VAR 0 2
54474: PUSH
54475: LD_INT 22
54477: PUSH
54478: LD_VAR 0 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 31
54489: PUSH
54490: LD_INT 25
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PPUSH
54501: CALL_OW 69
54505: ST_TO_ADDR
// end ;
54506: LD_VAR 0 2
54510: RET
// export function Shuffle ( array ) ; var i , index ; begin
54511: LD_INT 0
54513: PPUSH
54514: PPUSH
54515: PPUSH
// result := [ ] ;
54516: LD_ADDR_VAR 0 2
54520: PUSH
54521: EMPTY
54522: ST_TO_ADDR
// if not array then
54523: LD_VAR 0 1
54527: NOT
54528: IFFALSE 54532
// exit ;
54530: GO 54631
// Randomize ;
54532: CALL_OW 10
// for i = array downto 1 do
54536: LD_ADDR_VAR 0 3
54540: PUSH
54541: DOUBLE
54542: LD_VAR 0 1
54546: INC
54547: ST_TO_ADDR
54548: LD_INT 1
54550: PUSH
54551: FOR_DOWNTO
54552: IFFALSE 54629
// begin index := rand ( 1 , array ) ;
54554: LD_ADDR_VAR 0 4
54558: PUSH
54559: LD_INT 1
54561: PPUSH
54562: LD_VAR 0 1
54566: PPUSH
54567: CALL_OW 12
54571: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54572: LD_ADDR_VAR 0 2
54576: PUSH
54577: LD_VAR 0 2
54581: PPUSH
54582: LD_VAR 0 2
54586: PUSH
54587: LD_INT 1
54589: PLUS
54590: PPUSH
54591: LD_VAR 0 1
54595: PUSH
54596: LD_VAR 0 4
54600: ARRAY
54601: PPUSH
54602: CALL_OW 2
54606: ST_TO_ADDR
// array := Delete ( array , index ) ;
54607: LD_ADDR_VAR 0 1
54611: PUSH
54612: LD_VAR 0 1
54616: PPUSH
54617: LD_VAR 0 4
54621: PPUSH
54622: CALL_OW 3
54626: ST_TO_ADDR
// end ;
54627: GO 54551
54629: POP
54630: POP
// end ;
54631: LD_VAR 0 2
54635: RET
// export function GetBaseMaterials ( base ) ; begin
54636: LD_INT 0
54638: PPUSH
// result := [ 0 , 0 , 0 ] ;
54639: LD_ADDR_VAR 0 2
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: LIST
54657: ST_TO_ADDR
// if not base then
54658: LD_VAR 0 1
54662: NOT
54663: IFFALSE 54667
// exit ;
54665: GO 54716
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54667: LD_ADDR_VAR 0 2
54671: PUSH
54672: LD_VAR 0 1
54676: PPUSH
54677: LD_INT 1
54679: PPUSH
54680: CALL_OW 275
54684: PUSH
54685: LD_VAR 0 1
54689: PPUSH
54690: LD_INT 2
54692: PPUSH
54693: CALL_OW 275
54697: PUSH
54698: LD_VAR 0 1
54702: PPUSH
54703: LD_INT 3
54705: PPUSH
54706: CALL_OW 275
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: ST_TO_ADDR
// end ;
54716: LD_VAR 0 2
54720: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54721: LD_INT 0
54723: PPUSH
54724: PPUSH
// result := array ;
54725: LD_ADDR_VAR 0 3
54729: PUSH
54730: LD_VAR 0 1
54734: ST_TO_ADDR
// if size >= result then
54735: LD_VAR 0 2
54739: PUSH
54740: LD_VAR 0 3
54744: GREATEREQUAL
54745: IFFALSE 54749
// exit ;
54747: GO 54799
// if size then
54749: LD_VAR 0 2
54753: IFFALSE 54799
// for i := array downto size do
54755: LD_ADDR_VAR 0 4
54759: PUSH
54760: DOUBLE
54761: LD_VAR 0 1
54765: INC
54766: ST_TO_ADDR
54767: LD_VAR 0 2
54771: PUSH
54772: FOR_DOWNTO
54773: IFFALSE 54797
// result := Delete ( result , result ) ;
54775: LD_ADDR_VAR 0 3
54779: PUSH
54780: LD_VAR 0 3
54784: PPUSH
54785: LD_VAR 0 3
54789: PPUSH
54790: CALL_OW 3
54794: ST_TO_ADDR
54795: GO 54772
54797: POP
54798: POP
// end ;
54799: LD_VAR 0 3
54803: RET
// export function ComExit ( unit ) ; var tmp ; begin
54804: LD_INT 0
54806: PPUSH
54807: PPUSH
// if not IsInUnit ( unit ) then
54808: LD_VAR 0 1
54812: PPUSH
54813: CALL_OW 310
54817: NOT
54818: IFFALSE 54822
// exit ;
54820: GO 54882
// tmp := IsInUnit ( unit ) ;
54822: LD_ADDR_VAR 0 3
54826: PUSH
54827: LD_VAR 0 1
54831: PPUSH
54832: CALL_OW 310
54836: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54837: LD_VAR 0 3
54841: PPUSH
54842: CALL_OW 247
54846: PUSH
54847: LD_INT 2
54849: EQUAL
54850: IFFALSE 54863
// ComExitVehicle ( unit ) else
54852: LD_VAR 0 1
54856: PPUSH
54857: CALL_OW 121
54861: GO 54872
// ComExitBuilding ( unit ) ;
54863: LD_VAR 0 1
54867: PPUSH
54868: CALL_OW 122
// result := tmp ;
54872: LD_ADDR_VAR 0 2
54876: PUSH
54877: LD_VAR 0 3
54881: ST_TO_ADDR
// end ;
54882: LD_VAR 0 2
54886: RET
// export function ComExitAll ( units ) ; var i ; begin
54887: LD_INT 0
54889: PPUSH
54890: PPUSH
// if not units then
54891: LD_VAR 0 1
54895: NOT
54896: IFFALSE 54900
// exit ;
54898: GO 54926
// for i in units do
54900: LD_ADDR_VAR 0 3
54904: PUSH
54905: LD_VAR 0 1
54909: PUSH
54910: FOR_IN
54911: IFFALSE 54924
// ComExit ( i ) ;
54913: LD_VAR 0 3
54917: PPUSH
54918: CALL 54804 0 1
54922: GO 54910
54924: POP
54925: POP
// end ;
54926: LD_VAR 0 2
54930: RET
// export function ResetHc ; begin
54931: LD_INT 0
54933: PPUSH
// InitHc ;
54934: CALL_OW 19
// hc_importance := 0 ;
54938: LD_ADDR_OWVAR 32
54942: PUSH
54943: LD_INT 0
54945: ST_TO_ADDR
// end ;
54946: LD_VAR 0 1
54950: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54951: LD_INT 0
54953: PPUSH
54954: PPUSH
54955: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54956: LD_ADDR_VAR 0 6
54960: PUSH
54961: LD_VAR 0 1
54965: PUSH
54966: LD_VAR 0 3
54970: PLUS
54971: PUSH
54972: LD_INT 2
54974: DIV
54975: ST_TO_ADDR
// if _x < 0 then
54976: LD_VAR 0 6
54980: PUSH
54981: LD_INT 0
54983: LESS
54984: IFFALSE 55001
// _x := _x * - 1 ;
54986: LD_ADDR_VAR 0 6
54990: PUSH
54991: LD_VAR 0 6
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: MUL
55000: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55001: LD_ADDR_VAR 0 7
55005: PUSH
55006: LD_VAR 0 2
55010: PUSH
55011: LD_VAR 0 4
55015: PLUS
55016: PUSH
55017: LD_INT 2
55019: DIV
55020: ST_TO_ADDR
// if _y < 0 then
55021: LD_VAR 0 7
55025: PUSH
55026: LD_INT 0
55028: LESS
55029: IFFALSE 55046
// _y := _y * - 1 ;
55031: LD_ADDR_VAR 0 7
55035: PUSH
55036: LD_VAR 0 7
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: MUL
55045: ST_TO_ADDR
// result := [ _x , _y ] ;
55046: LD_ADDR_VAR 0 5
55050: PUSH
55051: LD_VAR 0 6
55055: PUSH
55056: LD_VAR 0 7
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: ST_TO_ADDR
// end ;
55065: LD_VAR 0 5
55069: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55070: LD_INT 0
55072: PPUSH
55073: PPUSH
55074: PPUSH
55075: PPUSH
// task := GetTaskList ( unit ) ;
55076: LD_ADDR_VAR 0 7
55080: PUSH
55081: LD_VAR 0 1
55085: PPUSH
55086: CALL_OW 437
55090: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55091: LD_VAR 0 7
55095: NOT
55096: PUSH
55097: LD_VAR 0 1
55101: PPUSH
55102: LD_VAR 0 2
55106: PPUSH
55107: CALL_OW 308
55111: NOT
55112: AND
55113: IFFALSE 55117
// exit ;
55115: GO 55235
// if IsInArea ( unit , area ) then
55117: LD_VAR 0 1
55121: PPUSH
55122: LD_VAR 0 2
55126: PPUSH
55127: CALL_OW 308
55131: IFFALSE 55149
// begin ComMoveToArea ( unit , goAway ) ;
55133: LD_VAR 0 1
55137: PPUSH
55138: LD_VAR 0 3
55142: PPUSH
55143: CALL_OW 113
// exit ;
55147: GO 55235
// end ; if task [ 1 ] [ 1 ] <> M then
55149: LD_VAR 0 7
55153: PUSH
55154: LD_INT 1
55156: ARRAY
55157: PUSH
55158: LD_INT 1
55160: ARRAY
55161: PUSH
55162: LD_STRING M
55164: NONEQUAL
55165: IFFALSE 55169
// exit ;
55167: GO 55235
// x := task [ 1 ] [ 2 ] ;
55169: LD_ADDR_VAR 0 5
55173: PUSH
55174: LD_VAR 0 7
55178: PUSH
55179: LD_INT 1
55181: ARRAY
55182: PUSH
55183: LD_INT 2
55185: ARRAY
55186: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55187: LD_ADDR_VAR 0 6
55191: PUSH
55192: LD_VAR 0 7
55196: PUSH
55197: LD_INT 1
55199: ARRAY
55200: PUSH
55201: LD_INT 3
55203: ARRAY
55204: ST_TO_ADDR
// if InArea ( x , y , area ) then
55205: LD_VAR 0 5
55209: PPUSH
55210: LD_VAR 0 6
55214: PPUSH
55215: LD_VAR 0 2
55219: PPUSH
55220: CALL_OW 309
55224: IFFALSE 55235
// ComStop ( unit ) ;
55226: LD_VAR 0 1
55230: PPUSH
55231: CALL_OW 141
// end ;
55235: LD_VAR 0 4
55239: RET
// export function Abs ( value ) ; begin
55240: LD_INT 0
55242: PPUSH
// result := value ;
55243: LD_ADDR_VAR 0 2
55247: PUSH
55248: LD_VAR 0 1
55252: ST_TO_ADDR
// if value < 0 then
55253: LD_VAR 0 1
55257: PUSH
55258: LD_INT 0
55260: LESS
55261: IFFALSE 55278
// result := value * - 1 ;
55263: LD_ADDR_VAR 0 2
55267: PUSH
55268: LD_VAR 0 1
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: MUL
55277: ST_TO_ADDR
// end ;
55278: LD_VAR 0 2
55282: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55283: LD_INT 0
55285: PPUSH
55286: PPUSH
55287: PPUSH
55288: PPUSH
55289: PPUSH
55290: PPUSH
55291: PPUSH
55292: PPUSH
// if not unit or not building then
55293: LD_VAR 0 1
55297: NOT
55298: PUSH
55299: LD_VAR 0 2
55303: NOT
55304: OR
55305: IFFALSE 55309
// exit ;
55307: GO 55535
// x := GetX ( building ) ;
55309: LD_ADDR_VAR 0 4
55313: PUSH
55314: LD_VAR 0 2
55318: PPUSH
55319: CALL_OW 250
55323: ST_TO_ADDR
// y := GetY ( building ) ;
55324: LD_ADDR_VAR 0 6
55328: PUSH
55329: LD_VAR 0 2
55333: PPUSH
55334: CALL_OW 251
55338: ST_TO_ADDR
// d := GetDir ( building ) ;
55339: LD_ADDR_VAR 0 8
55343: PUSH
55344: LD_VAR 0 2
55348: PPUSH
55349: CALL_OW 254
55353: ST_TO_ADDR
// r := 4 ;
55354: LD_ADDR_VAR 0 9
55358: PUSH
55359: LD_INT 4
55361: ST_TO_ADDR
// for i := 1 to 5 do
55362: LD_ADDR_VAR 0 10
55366: PUSH
55367: DOUBLE
55368: LD_INT 1
55370: DEC
55371: ST_TO_ADDR
55372: LD_INT 5
55374: PUSH
55375: FOR_TO
55376: IFFALSE 55533
// begin _x := ShiftX ( x , d , r + i ) ;
55378: LD_ADDR_VAR 0 5
55382: PUSH
55383: LD_VAR 0 4
55387: PPUSH
55388: LD_VAR 0 8
55392: PPUSH
55393: LD_VAR 0 9
55397: PUSH
55398: LD_VAR 0 10
55402: PLUS
55403: PPUSH
55404: CALL_OW 272
55408: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55409: LD_ADDR_VAR 0 7
55413: PUSH
55414: LD_VAR 0 6
55418: PPUSH
55419: LD_VAR 0 8
55423: PPUSH
55424: LD_VAR 0 9
55428: PUSH
55429: LD_VAR 0 10
55433: PLUS
55434: PPUSH
55435: CALL_OW 273
55439: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55440: LD_VAR 0 5
55444: PPUSH
55445: LD_VAR 0 7
55449: PPUSH
55450: CALL_OW 488
55454: PUSH
55455: LD_VAR 0 5
55459: PPUSH
55460: LD_VAR 0 7
55464: PPUSH
55465: CALL_OW 428
55469: PPUSH
55470: CALL_OW 247
55474: PUSH
55475: LD_INT 3
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: IN
55485: NOT
55486: AND
55487: IFFALSE 55531
// begin ComMoveXY ( unit , _x , _y ) ;
55489: LD_VAR 0 1
55493: PPUSH
55494: LD_VAR 0 5
55498: PPUSH
55499: LD_VAR 0 7
55503: PPUSH
55504: CALL_OW 111
// result := [ _x , _y ] ;
55508: LD_ADDR_VAR 0 3
55512: PUSH
55513: LD_VAR 0 5
55517: PUSH
55518: LD_VAR 0 7
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: ST_TO_ADDR
// exit ;
55527: POP
55528: POP
55529: GO 55535
// end ; end ;
55531: GO 55375
55533: POP
55534: POP
// end ;
55535: LD_VAR 0 3
55539: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55540: LD_INT 0
55542: PPUSH
55543: PPUSH
55544: PPUSH
// result := 0 ;
55545: LD_ADDR_VAR 0 3
55549: PUSH
55550: LD_INT 0
55552: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55553: LD_VAR 0 1
55557: PUSH
55558: LD_INT 0
55560: LESS
55561: PUSH
55562: LD_VAR 0 1
55566: PUSH
55567: LD_INT 8
55569: GREATER
55570: OR
55571: PUSH
55572: LD_VAR 0 2
55576: PUSH
55577: LD_INT 0
55579: LESS
55580: OR
55581: PUSH
55582: LD_VAR 0 2
55586: PUSH
55587: LD_INT 8
55589: GREATER
55590: OR
55591: IFFALSE 55595
// exit ;
55593: GO 55670
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55595: LD_ADDR_VAR 0 4
55599: PUSH
55600: LD_INT 22
55602: PUSH
55603: LD_VAR 0 2
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PPUSH
55612: CALL_OW 69
55616: PUSH
55617: FOR_IN
55618: IFFALSE 55668
// begin un := UnitShoot ( i ) ;
55620: LD_ADDR_VAR 0 5
55624: PUSH
55625: LD_VAR 0 4
55629: PPUSH
55630: CALL_OW 504
55634: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55635: LD_VAR 0 5
55639: PPUSH
55640: CALL_OW 255
55644: PUSH
55645: LD_VAR 0 1
55649: EQUAL
55650: IFFALSE 55666
// begin result := un ;
55652: LD_ADDR_VAR 0 3
55656: PUSH
55657: LD_VAR 0 5
55661: ST_TO_ADDR
// exit ;
55662: POP
55663: POP
55664: GO 55670
// end ; end ;
55666: GO 55617
55668: POP
55669: POP
// end ;
55670: LD_VAR 0 3
55674: RET
// export function GetCargoBay ( units ) ; begin
55675: LD_INT 0
55677: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55678: LD_ADDR_VAR 0 2
55682: PUSH
55683: LD_VAR 0 1
55687: PPUSH
55688: LD_INT 2
55690: PUSH
55691: LD_INT 34
55693: PUSH
55694: LD_INT 12
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 34
55703: PUSH
55704: LD_INT 51
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 34
55713: PUSH
55714: LD_INT 32
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 34
55723: PUSH
55724: LD_INT 89
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: PPUSH
55738: CALL_OW 72
55742: ST_TO_ADDR
// end ;
55743: LD_VAR 0 2
55747: RET
// export function Negate ( value ) ; begin
55748: LD_INT 0
55750: PPUSH
// result := not value ;
55751: LD_ADDR_VAR 0 2
55755: PUSH
55756: LD_VAR 0 1
55760: NOT
55761: ST_TO_ADDR
// end ;
55762: LD_VAR 0 2
55766: RET
// export function Inc ( value ) ; begin
55767: LD_INT 0
55769: PPUSH
// result := value + 1 ;
55770: LD_ADDR_VAR 0 2
55774: PUSH
55775: LD_VAR 0 1
55779: PUSH
55780: LD_INT 1
55782: PLUS
55783: ST_TO_ADDR
// end ;
55784: LD_VAR 0 2
55788: RET
// export function Dec ( value ) ; begin
55789: LD_INT 0
55791: PPUSH
// result := value - 1 ;
55792: LD_ADDR_VAR 0 2
55796: PUSH
55797: LD_VAR 0 1
55801: PUSH
55802: LD_INT 1
55804: MINUS
55805: ST_TO_ADDR
// end ;
55806: LD_VAR 0 2
55810: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55811: LD_INT 0
55813: PPUSH
55814: PPUSH
55815: PPUSH
55816: PPUSH
55817: PPUSH
55818: PPUSH
55819: PPUSH
55820: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55821: LD_VAR 0 1
55825: PPUSH
55826: LD_VAR 0 2
55830: PPUSH
55831: CALL_OW 488
55835: NOT
55836: PUSH
55837: LD_VAR 0 3
55841: PPUSH
55842: LD_VAR 0 4
55846: PPUSH
55847: CALL_OW 488
55851: NOT
55852: OR
55853: IFFALSE 55866
// begin result := - 1 ;
55855: LD_ADDR_VAR 0 5
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: ST_TO_ADDR
// exit ;
55864: GO 56101
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55866: LD_ADDR_VAR 0 12
55870: PUSH
55871: LD_VAR 0 1
55875: PPUSH
55876: LD_VAR 0 2
55880: PPUSH
55881: LD_VAR 0 3
55885: PPUSH
55886: LD_VAR 0 4
55890: PPUSH
55891: CALL 54951 0 4
55895: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55896: LD_ADDR_VAR 0 11
55900: PUSH
55901: LD_VAR 0 1
55905: PPUSH
55906: LD_VAR 0 2
55910: PPUSH
55911: LD_VAR 0 12
55915: PUSH
55916: LD_INT 1
55918: ARRAY
55919: PPUSH
55920: LD_VAR 0 12
55924: PUSH
55925: LD_INT 2
55927: ARRAY
55928: PPUSH
55929: CALL_OW 298
55933: ST_TO_ADDR
// distance := 9999 ;
55934: LD_ADDR_VAR 0 10
55938: PUSH
55939: LD_INT 9999
55941: ST_TO_ADDR
// for i := 0 to 5 do
55942: LD_ADDR_VAR 0 6
55946: PUSH
55947: DOUBLE
55948: LD_INT 0
55950: DEC
55951: ST_TO_ADDR
55952: LD_INT 5
55954: PUSH
55955: FOR_TO
55956: IFFALSE 56099
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55958: LD_ADDR_VAR 0 7
55962: PUSH
55963: LD_VAR 0 1
55967: PPUSH
55968: LD_VAR 0 6
55972: PPUSH
55973: LD_VAR 0 11
55977: PPUSH
55978: CALL_OW 272
55982: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55983: LD_ADDR_VAR 0 8
55987: PUSH
55988: LD_VAR 0 2
55992: PPUSH
55993: LD_VAR 0 6
55997: PPUSH
55998: LD_VAR 0 11
56002: PPUSH
56003: CALL_OW 273
56007: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56008: LD_VAR 0 7
56012: PPUSH
56013: LD_VAR 0 8
56017: PPUSH
56018: CALL_OW 488
56022: NOT
56023: IFFALSE 56027
// continue ;
56025: GO 55955
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56027: LD_ADDR_VAR 0 9
56031: PUSH
56032: LD_VAR 0 12
56036: PUSH
56037: LD_INT 1
56039: ARRAY
56040: PPUSH
56041: LD_VAR 0 12
56045: PUSH
56046: LD_INT 2
56048: ARRAY
56049: PPUSH
56050: LD_VAR 0 7
56054: PPUSH
56055: LD_VAR 0 8
56059: PPUSH
56060: CALL_OW 298
56064: ST_TO_ADDR
// if tmp < distance then
56065: LD_VAR 0 9
56069: PUSH
56070: LD_VAR 0 10
56074: LESS
56075: IFFALSE 56097
// begin result := i ;
56077: LD_ADDR_VAR 0 5
56081: PUSH
56082: LD_VAR 0 6
56086: ST_TO_ADDR
// distance := tmp ;
56087: LD_ADDR_VAR 0 10
56091: PUSH
56092: LD_VAR 0 9
56096: ST_TO_ADDR
// end ; end ;
56097: GO 55955
56099: POP
56100: POP
// end ;
56101: LD_VAR 0 5
56105: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56106: LD_INT 0
56108: PPUSH
56109: PPUSH
// if not driver or not IsInUnit ( driver ) then
56110: LD_VAR 0 1
56114: NOT
56115: PUSH
56116: LD_VAR 0 1
56120: PPUSH
56121: CALL_OW 310
56125: NOT
56126: OR
56127: IFFALSE 56131
// exit ;
56129: GO 56221
// vehicle := IsInUnit ( driver ) ;
56131: LD_ADDR_VAR 0 3
56135: PUSH
56136: LD_VAR 0 1
56140: PPUSH
56141: CALL_OW 310
56145: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56146: LD_VAR 0 1
56150: PPUSH
56151: LD_STRING \
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: PUSH
56181: LD_STRING E
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: LD_VAR 0 3
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PPUSH
56217: CALL_OW 446
// end ;
56221: LD_VAR 0 2
56225: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56226: LD_INT 0
56228: PPUSH
56229: PPUSH
// if not driver or not IsInUnit ( driver ) then
56230: LD_VAR 0 1
56234: NOT
56235: PUSH
56236: LD_VAR 0 1
56240: PPUSH
56241: CALL_OW 310
56245: NOT
56246: OR
56247: IFFALSE 56251
// exit ;
56249: GO 56341
// vehicle := IsInUnit ( driver ) ;
56251: LD_ADDR_VAR 0 3
56255: PUSH
56256: LD_VAR 0 1
56260: PPUSH
56261: CALL_OW 310
56265: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56266: LD_VAR 0 1
56270: PPUSH
56271: LD_STRING \
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: PUSH
56301: LD_STRING E
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_VAR 0 3
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PPUSH
56337: CALL_OW 447
// end ;
56341: LD_VAR 0 2
56345: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56346: LD_INT 0
56348: PPUSH
56349: PPUSH
56350: PPUSH
// tmp := [ ] ;
56351: LD_ADDR_VAR 0 5
56355: PUSH
56356: EMPTY
56357: ST_TO_ADDR
// for i in units do
56358: LD_ADDR_VAR 0 4
56362: PUSH
56363: LD_VAR 0 1
56367: PUSH
56368: FOR_IN
56369: IFFALSE 56407
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56371: LD_ADDR_VAR 0 5
56375: PUSH
56376: LD_VAR 0 5
56380: PPUSH
56381: LD_VAR 0 5
56385: PUSH
56386: LD_INT 1
56388: PLUS
56389: PPUSH
56390: LD_VAR 0 4
56394: PPUSH
56395: CALL_OW 256
56399: PPUSH
56400: CALL_OW 2
56404: ST_TO_ADDR
56405: GO 56368
56407: POP
56408: POP
// if not tmp then
56409: LD_VAR 0 5
56413: NOT
56414: IFFALSE 56418
// exit ;
56416: GO 56466
// if asc then
56418: LD_VAR 0 2
56422: IFFALSE 56446
// result := SortListByListAsc ( units , tmp ) else
56424: LD_ADDR_VAR 0 3
56428: PUSH
56429: LD_VAR 0 1
56433: PPUSH
56434: LD_VAR 0 5
56438: PPUSH
56439: CALL_OW 76
56443: ST_TO_ADDR
56444: GO 56466
// result := SortListByListDesc ( units , tmp ) ;
56446: LD_ADDR_VAR 0 3
56450: PUSH
56451: LD_VAR 0 1
56455: PPUSH
56456: LD_VAR 0 5
56460: PPUSH
56461: CALL_OW 77
56465: ST_TO_ADDR
// end ;
56466: LD_VAR 0 3
56470: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56471: LD_INT 0
56473: PPUSH
56474: PPUSH
// task := GetTaskList ( mech ) ;
56475: LD_ADDR_VAR 0 4
56479: PUSH
56480: LD_VAR 0 1
56484: PPUSH
56485: CALL_OW 437
56489: ST_TO_ADDR
// if not task then
56490: LD_VAR 0 4
56494: NOT
56495: IFFALSE 56499
// exit ;
56497: GO 56541
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56499: LD_ADDR_VAR 0 3
56503: PUSH
56504: LD_VAR 0 4
56508: PUSH
56509: LD_INT 1
56511: ARRAY
56512: PUSH
56513: LD_INT 1
56515: ARRAY
56516: PUSH
56517: LD_STRING r
56519: EQUAL
56520: PUSH
56521: LD_VAR 0 4
56525: PUSH
56526: LD_INT 1
56528: ARRAY
56529: PUSH
56530: LD_INT 4
56532: ARRAY
56533: PUSH
56534: LD_VAR 0 2
56538: EQUAL
56539: AND
56540: ST_TO_ADDR
// end ;
56541: LD_VAR 0 3
56545: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56546: LD_INT 0
56548: PPUSH
// SetDir ( unit , d ) ;
56549: LD_VAR 0 1
56553: PPUSH
56554: LD_VAR 0 4
56558: PPUSH
56559: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56563: LD_VAR 0 1
56567: PPUSH
56568: LD_VAR 0 2
56572: PPUSH
56573: LD_VAR 0 3
56577: PPUSH
56578: LD_VAR 0 5
56582: PPUSH
56583: CALL_OW 48
// end ;
56587: LD_VAR 0 6
56591: RET
// export function ToNaturalNumber ( number ) ; begin
56592: LD_INT 0
56594: PPUSH
// result := number div 1 ;
56595: LD_ADDR_VAR 0 2
56599: PUSH
56600: LD_VAR 0 1
56604: PUSH
56605: LD_INT 1
56607: DIV
56608: ST_TO_ADDR
// if number < 0 then
56609: LD_VAR 0 1
56613: PUSH
56614: LD_INT 0
56616: LESS
56617: IFFALSE 56627
// result := 0 ;
56619: LD_ADDR_VAR 0 2
56623: PUSH
56624: LD_INT 0
56626: ST_TO_ADDR
// end ;
56627: LD_VAR 0 2
56631: RET
// export function SortByClass ( units , class ) ; var un ; begin
56632: LD_INT 0
56634: PPUSH
56635: PPUSH
// if not units or not class then
56636: LD_VAR 0 1
56640: NOT
56641: PUSH
56642: LD_VAR 0 2
56646: NOT
56647: OR
56648: IFFALSE 56652
// exit ;
56650: GO 56747
// result := [ ] ;
56652: LD_ADDR_VAR 0 3
56656: PUSH
56657: EMPTY
56658: ST_TO_ADDR
// for un in units do
56659: LD_ADDR_VAR 0 4
56663: PUSH
56664: LD_VAR 0 1
56668: PUSH
56669: FOR_IN
56670: IFFALSE 56745
// if GetClass ( un ) = class then
56672: LD_VAR 0 4
56676: PPUSH
56677: CALL_OW 257
56681: PUSH
56682: LD_VAR 0 2
56686: EQUAL
56687: IFFALSE 56714
// result := Insert ( result , 1 , un ) else
56689: LD_ADDR_VAR 0 3
56693: PUSH
56694: LD_VAR 0 3
56698: PPUSH
56699: LD_INT 1
56701: PPUSH
56702: LD_VAR 0 4
56706: PPUSH
56707: CALL_OW 2
56711: ST_TO_ADDR
56712: GO 56743
// result := Replace ( result , result + 1 , un ) ;
56714: LD_ADDR_VAR 0 3
56718: PUSH
56719: LD_VAR 0 3
56723: PPUSH
56724: LD_VAR 0 3
56728: PUSH
56729: LD_INT 1
56731: PLUS
56732: PPUSH
56733: LD_VAR 0 4
56737: PPUSH
56738: CALL_OW 1
56742: ST_TO_ADDR
56743: GO 56669
56745: POP
56746: POP
// end ;
56747: LD_VAR 0 3
56751: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56752: LD_INT 0
56754: PPUSH
56755: PPUSH
56756: PPUSH
56757: PPUSH
56758: PPUSH
56759: PPUSH
56760: PPUSH
// result := [ ] ;
56761: LD_ADDR_VAR 0 4
56765: PUSH
56766: EMPTY
56767: ST_TO_ADDR
// if x - r < 0 then
56768: LD_VAR 0 1
56772: PUSH
56773: LD_VAR 0 3
56777: MINUS
56778: PUSH
56779: LD_INT 0
56781: LESS
56782: IFFALSE 56794
// min_x := 0 else
56784: LD_ADDR_VAR 0 8
56788: PUSH
56789: LD_INT 0
56791: ST_TO_ADDR
56792: GO 56810
// min_x := x - r ;
56794: LD_ADDR_VAR 0 8
56798: PUSH
56799: LD_VAR 0 1
56803: PUSH
56804: LD_VAR 0 3
56808: MINUS
56809: ST_TO_ADDR
// if y - r < 0 then
56810: LD_VAR 0 2
56814: PUSH
56815: LD_VAR 0 3
56819: MINUS
56820: PUSH
56821: LD_INT 0
56823: LESS
56824: IFFALSE 56836
// min_y := 0 else
56826: LD_ADDR_VAR 0 7
56830: PUSH
56831: LD_INT 0
56833: ST_TO_ADDR
56834: GO 56852
// min_y := y - r ;
56836: LD_ADDR_VAR 0 7
56840: PUSH
56841: LD_VAR 0 2
56845: PUSH
56846: LD_VAR 0 3
56850: MINUS
56851: ST_TO_ADDR
// max_x := x + r ;
56852: LD_ADDR_VAR 0 9
56856: PUSH
56857: LD_VAR 0 1
56861: PUSH
56862: LD_VAR 0 3
56866: PLUS
56867: ST_TO_ADDR
// max_y := y + r ;
56868: LD_ADDR_VAR 0 10
56872: PUSH
56873: LD_VAR 0 2
56877: PUSH
56878: LD_VAR 0 3
56882: PLUS
56883: ST_TO_ADDR
// for _x = min_x to max_x do
56884: LD_ADDR_VAR 0 5
56888: PUSH
56889: DOUBLE
56890: LD_VAR 0 8
56894: DEC
56895: ST_TO_ADDR
56896: LD_VAR 0 9
56900: PUSH
56901: FOR_TO
56902: IFFALSE 57003
// for _y = min_y to max_y do
56904: LD_ADDR_VAR 0 6
56908: PUSH
56909: DOUBLE
56910: LD_VAR 0 7
56914: DEC
56915: ST_TO_ADDR
56916: LD_VAR 0 10
56920: PUSH
56921: FOR_TO
56922: IFFALSE 56999
// begin if not ValidHex ( _x , _y ) then
56924: LD_VAR 0 5
56928: PPUSH
56929: LD_VAR 0 6
56933: PPUSH
56934: CALL_OW 488
56938: NOT
56939: IFFALSE 56943
// continue ;
56941: GO 56921
// if GetResourceTypeXY ( _x , _y ) then
56943: LD_VAR 0 5
56947: PPUSH
56948: LD_VAR 0 6
56952: PPUSH
56953: CALL_OW 283
56957: IFFALSE 56997
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56959: LD_ADDR_VAR 0 4
56963: PUSH
56964: LD_VAR 0 4
56968: PPUSH
56969: LD_VAR 0 4
56973: PUSH
56974: LD_INT 1
56976: PLUS
56977: PPUSH
56978: LD_VAR 0 5
56982: PUSH
56983: LD_VAR 0 6
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PPUSH
56992: CALL_OW 1
56996: ST_TO_ADDR
// end ;
56997: GO 56921
56999: POP
57000: POP
57001: GO 56901
57003: POP
57004: POP
// end ;
57005: LD_VAR 0 4
57009: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57010: LD_INT 0
57012: PPUSH
57013: PPUSH
57014: PPUSH
57015: PPUSH
57016: PPUSH
57017: PPUSH
57018: PPUSH
57019: PPUSH
// if not units then
57020: LD_VAR 0 1
57024: NOT
57025: IFFALSE 57029
// exit ;
57027: GO 57553
// result := UnitFilter ( units , [ f_ok ] ) ;
57029: LD_ADDR_VAR 0 3
57033: PUSH
57034: LD_VAR 0 1
57038: PPUSH
57039: LD_INT 50
57041: PUSH
57042: EMPTY
57043: LIST
57044: PPUSH
57045: CALL_OW 72
57049: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57050: LD_ADDR_VAR 0 8
57054: PUSH
57055: LD_VAR 0 1
57059: PUSH
57060: LD_INT 1
57062: ARRAY
57063: PPUSH
57064: CALL_OW 255
57068: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57069: LD_ADDR_VAR 0 10
57073: PUSH
57074: LD_INT 29
57076: PUSH
57077: LD_INT 91
57079: PUSH
57080: LD_INT 49
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: LIST
57087: ST_TO_ADDR
// if not result then
57088: LD_VAR 0 3
57092: NOT
57093: IFFALSE 57097
// exit ;
57095: GO 57553
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57097: LD_ADDR_VAR 0 5
57101: PUSH
57102: LD_INT 81
57104: PUSH
57105: LD_VAR 0 8
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PPUSH
57114: CALL_OW 69
57118: ST_TO_ADDR
// for i in result do
57119: LD_ADDR_VAR 0 4
57123: PUSH
57124: LD_VAR 0 3
57128: PUSH
57129: FOR_IN
57130: IFFALSE 57551
// begin tag := GetTag ( i ) + 1 ;
57132: LD_ADDR_VAR 0 9
57136: PUSH
57137: LD_VAR 0 4
57141: PPUSH
57142: CALL_OW 110
57146: PUSH
57147: LD_INT 1
57149: PLUS
57150: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
57151: LD_ADDR_VAR 0 7
57155: PUSH
57156: LD_VAR 0 4
57160: PPUSH
57161: CALL_OW 250
57165: PPUSH
57166: LD_VAR 0 4
57170: PPUSH
57171: CALL_OW 251
57175: PPUSH
57176: LD_INT 6
57178: PPUSH
57179: CALL 56752 0 3
57183: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
57184: LD_VAR 0 4
57188: PPUSH
57189: CALL_OW 247
57193: PUSH
57194: LD_INT 2
57196: EQUAL
57197: PUSH
57198: LD_VAR 0 7
57202: AND
57203: PUSH
57204: LD_VAR 0 4
57208: PPUSH
57209: CALL_OW 264
57213: PUSH
57214: LD_VAR 0 10
57218: IN
57219: NOT
57220: AND
57221: IFFALSE 57260
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57223: LD_VAR 0 4
57227: PPUSH
57228: LD_VAR 0 7
57232: PUSH
57233: LD_INT 1
57235: ARRAY
57236: PUSH
57237: LD_INT 1
57239: ARRAY
57240: PPUSH
57241: LD_VAR 0 7
57245: PUSH
57246: LD_INT 1
57248: ARRAY
57249: PUSH
57250: LD_INT 2
57252: ARRAY
57253: PPUSH
57254: CALL_OW 116
57258: GO 57549
// if path > tag then
57260: LD_VAR 0 2
57264: PUSH
57265: LD_VAR 0 9
57269: GREATER
57270: IFFALSE 57478
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57272: LD_ADDR_VAR 0 6
57276: PUSH
57277: LD_VAR 0 5
57281: PPUSH
57282: LD_INT 91
57284: PUSH
57285: LD_VAR 0 4
57289: PUSH
57290: LD_INT 8
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: PPUSH
57298: CALL_OW 72
57302: ST_TO_ADDR
// if nearEnemy then
57303: LD_VAR 0 6
57307: IFFALSE 57376
// begin if GetWeapon ( i ) = ru_time_lapser then
57309: LD_VAR 0 4
57313: PPUSH
57314: CALL_OW 264
57318: PUSH
57319: LD_INT 49
57321: EQUAL
57322: IFFALSE 57350
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57324: LD_VAR 0 4
57328: PPUSH
57329: LD_VAR 0 6
57333: PPUSH
57334: LD_VAR 0 4
57338: PPUSH
57339: CALL_OW 74
57343: PPUSH
57344: CALL_OW 112
57348: GO 57374
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57350: LD_VAR 0 4
57354: PPUSH
57355: LD_VAR 0 6
57359: PPUSH
57360: LD_VAR 0 4
57364: PPUSH
57365: CALL_OW 74
57369: PPUSH
57370: CALL 58624 0 2
// end else
57374: GO 57476
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57376: LD_VAR 0 4
57380: PPUSH
57381: LD_VAR 0 2
57385: PUSH
57386: LD_VAR 0 9
57390: ARRAY
57391: PUSH
57392: LD_INT 1
57394: ARRAY
57395: PPUSH
57396: LD_VAR 0 2
57400: PUSH
57401: LD_VAR 0 9
57405: ARRAY
57406: PUSH
57407: LD_INT 2
57409: ARRAY
57410: PPUSH
57411: CALL_OW 297
57415: PUSH
57416: LD_INT 6
57418: GREATER
57419: IFFALSE 57462
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57421: LD_VAR 0 4
57425: PPUSH
57426: LD_VAR 0 2
57430: PUSH
57431: LD_VAR 0 9
57435: ARRAY
57436: PUSH
57437: LD_INT 1
57439: ARRAY
57440: PPUSH
57441: LD_VAR 0 2
57445: PUSH
57446: LD_VAR 0 9
57450: ARRAY
57451: PUSH
57452: LD_INT 2
57454: ARRAY
57455: PPUSH
57456: CALL_OW 114
57460: GO 57476
// SetTag ( i , tag ) ;
57462: LD_VAR 0 4
57466: PPUSH
57467: LD_VAR 0 9
57471: PPUSH
57472: CALL_OW 109
// end else
57476: GO 57549
// if enemy then
57478: LD_VAR 0 5
57482: IFFALSE 57549
// begin if GetWeapon ( i ) = ru_time_lapser then
57484: LD_VAR 0 4
57488: PPUSH
57489: CALL_OW 264
57493: PUSH
57494: LD_INT 49
57496: EQUAL
57497: IFFALSE 57525
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57499: LD_VAR 0 4
57503: PPUSH
57504: LD_VAR 0 5
57508: PPUSH
57509: LD_VAR 0 4
57513: PPUSH
57514: CALL_OW 74
57518: PPUSH
57519: CALL_OW 112
57523: GO 57549
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57525: LD_VAR 0 4
57529: PPUSH
57530: LD_VAR 0 5
57534: PPUSH
57535: LD_VAR 0 4
57539: PPUSH
57540: CALL_OW 74
57544: PPUSH
57545: CALL 58624 0 2
// end ; end ;
57549: GO 57129
57551: POP
57552: POP
// end ;
57553: LD_VAR 0 3
57557: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57558: LD_INT 0
57560: PPUSH
57561: PPUSH
57562: PPUSH
// if not unit or IsInUnit ( unit ) then
57563: LD_VAR 0 1
57567: NOT
57568: PUSH
57569: LD_VAR 0 1
57573: PPUSH
57574: CALL_OW 310
57578: OR
57579: IFFALSE 57583
// exit ;
57581: GO 57674
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57583: LD_ADDR_VAR 0 4
57587: PUSH
57588: LD_VAR 0 1
57592: PPUSH
57593: CALL_OW 250
57597: PPUSH
57598: LD_VAR 0 2
57602: PPUSH
57603: LD_INT 1
57605: PPUSH
57606: CALL_OW 272
57610: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57611: LD_ADDR_VAR 0 5
57615: PUSH
57616: LD_VAR 0 1
57620: PPUSH
57621: CALL_OW 251
57625: PPUSH
57626: LD_VAR 0 2
57630: PPUSH
57631: LD_INT 1
57633: PPUSH
57634: CALL_OW 273
57638: ST_TO_ADDR
// if ValidHex ( x , y ) then
57639: LD_VAR 0 4
57643: PPUSH
57644: LD_VAR 0 5
57648: PPUSH
57649: CALL_OW 488
57653: IFFALSE 57674
// ComTurnXY ( unit , x , y ) ;
57655: LD_VAR 0 1
57659: PPUSH
57660: LD_VAR 0 4
57664: PPUSH
57665: LD_VAR 0 5
57669: PPUSH
57670: CALL_OW 118
// end ;
57674: LD_VAR 0 3
57678: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57679: LD_INT 0
57681: PPUSH
57682: PPUSH
// result := false ;
57683: LD_ADDR_VAR 0 3
57687: PUSH
57688: LD_INT 0
57690: ST_TO_ADDR
// if not units then
57691: LD_VAR 0 2
57695: NOT
57696: IFFALSE 57700
// exit ;
57698: GO 57745
// for i in units do
57700: LD_ADDR_VAR 0 4
57704: PUSH
57705: LD_VAR 0 2
57709: PUSH
57710: FOR_IN
57711: IFFALSE 57743
// if See ( side , i ) then
57713: LD_VAR 0 1
57717: PPUSH
57718: LD_VAR 0 4
57722: PPUSH
57723: CALL_OW 292
57727: IFFALSE 57741
// begin result := true ;
57729: LD_ADDR_VAR 0 3
57733: PUSH
57734: LD_INT 1
57736: ST_TO_ADDR
// exit ;
57737: POP
57738: POP
57739: GO 57745
// end ;
57741: GO 57710
57743: POP
57744: POP
// end ;
57745: LD_VAR 0 3
57749: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57750: LD_INT 0
57752: PPUSH
57753: PPUSH
57754: PPUSH
57755: PPUSH
// if not unit or not points then
57756: LD_VAR 0 1
57760: NOT
57761: PUSH
57762: LD_VAR 0 2
57766: NOT
57767: OR
57768: IFFALSE 57772
// exit ;
57770: GO 57862
// dist := 99999 ;
57772: LD_ADDR_VAR 0 5
57776: PUSH
57777: LD_INT 99999
57779: ST_TO_ADDR
// for i in points do
57780: LD_ADDR_VAR 0 4
57784: PUSH
57785: LD_VAR 0 2
57789: PUSH
57790: FOR_IN
57791: IFFALSE 57860
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57793: LD_ADDR_VAR 0 6
57797: PUSH
57798: LD_VAR 0 1
57802: PPUSH
57803: LD_VAR 0 4
57807: PUSH
57808: LD_INT 1
57810: ARRAY
57811: PPUSH
57812: LD_VAR 0 4
57816: PUSH
57817: LD_INT 2
57819: ARRAY
57820: PPUSH
57821: CALL_OW 297
57825: ST_TO_ADDR
// if tmpDist < dist then
57826: LD_VAR 0 6
57830: PUSH
57831: LD_VAR 0 5
57835: LESS
57836: IFFALSE 57858
// begin result := i ;
57838: LD_ADDR_VAR 0 3
57842: PUSH
57843: LD_VAR 0 4
57847: ST_TO_ADDR
// dist := tmpDist ;
57848: LD_ADDR_VAR 0 5
57852: PUSH
57853: LD_VAR 0 6
57857: ST_TO_ADDR
// end ; end ;
57858: GO 57790
57860: POP
57861: POP
// end ;
57862: LD_VAR 0 3
57866: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57867: LD_INT 0
57869: PPUSH
// uc_side := side ;
57870: LD_ADDR_OWVAR 20
57874: PUSH
57875: LD_VAR 0 1
57879: ST_TO_ADDR
// uc_nation := 3 ;
57880: LD_ADDR_OWVAR 21
57884: PUSH
57885: LD_INT 3
57887: ST_TO_ADDR
// vc_chassis := 25 ;
57888: LD_ADDR_OWVAR 37
57892: PUSH
57893: LD_INT 25
57895: ST_TO_ADDR
// vc_engine := engine_siberite ;
57896: LD_ADDR_OWVAR 39
57900: PUSH
57901: LD_INT 3
57903: ST_TO_ADDR
// vc_control := control_computer ;
57904: LD_ADDR_OWVAR 38
57908: PUSH
57909: LD_INT 3
57911: ST_TO_ADDR
// vc_weapon := 59 ;
57912: LD_ADDR_OWVAR 40
57916: PUSH
57917: LD_INT 59
57919: ST_TO_ADDR
// result := CreateVehicle ;
57920: LD_ADDR_VAR 0 5
57924: PUSH
57925: CALL_OW 45
57929: ST_TO_ADDR
// SetDir ( result , d ) ;
57930: LD_VAR 0 5
57934: PPUSH
57935: LD_VAR 0 4
57939: PPUSH
57940: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57944: LD_VAR 0 5
57948: PPUSH
57949: LD_VAR 0 2
57953: PPUSH
57954: LD_VAR 0 3
57958: PPUSH
57959: LD_INT 0
57961: PPUSH
57962: CALL_OW 48
// end ;
57966: LD_VAR 0 5
57970: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57971: LD_INT 0
57973: PPUSH
57974: PPUSH
57975: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57976: LD_ADDR_VAR 0 2
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57999: LD_VAR 0 1
58003: NOT
58004: PUSH
58005: LD_VAR 0 1
58009: PPUSH
58010: CALL_OW 264
58014: PUSH
58015: LD_INT 12
58017: PUSH
58018: LD_INT 51
58020: PUSH
58021: LD_INT 32
58023: PUSH
58024: LD_INT 89
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: IN
58033: NOT
58034: OR
58035: IFFALSE 58039
// exit ;
58037: GO 58137
// for i := 1 to 3 do
58039: LD_ADDR_VAR 0 3
58043: PUSH
58044: DOUBLE
58045: LD_INT 1
58047: DEC
58048: ST_TO_ADDR
58049: LD_INT 3
58051: PUSH
58052: FOR_TO
58053: IFFALSE 58135
// begin tmp := GetCargo ( cargo , i ) ;
58055: LD_ADDR_VAR 0 4
58059: PUSH
58060: LD_VAR 0 1
58064: PPUSH
58065: LD_VAR 0 3
58069: PPUSH
58070: CALL_OW 289
58074: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58075: LD_ADDR_VAR 0 2
58079: PUSH
58080: LD_VAR 0 2
58084: PPUSH
58085: LD_VAR 0 3
58089: PPUSH
58090: LD_VAR 0 4
58094: PPUSH
58095: CALL_OW 1
58099: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58100: LD_ADDR_VAR 0 2
58104: PUSH
58105: LD_VAR 0 2
58109: PPUSH
58110: LD_INT 4
58112: PPUSH
58113: LD_VAR 0 2
58117: PUSH
58118: LD_INT 4
58120: ARRAY
58121: PUSH
58122: LD_VAR 0 4
58126: PLUS
58127: PPUSH
58128: CALL_OW 1
58132: ST_TO_ADDR
// end ;
58133: GO 58052
58135: POP
58136: POP
// end ;
58137: LD_VAR 0 2
58141: RET
// export function Length ( array ) ; begin
58142: LD_INT 0
58144: PPUSH
// result := array + 0 ;
58145: LD_ADDR_VAR 0 2
58149: PUSH
58150: LD_VAR 0 1
58154: PUSH
58155: LD_INT 0
58157: PLUS
58158: ST_TO_ADDR
// end ;
58159: LD_VAR 0 2
58163: RET
// export function PrepareArray ( array ) ; begin
58164: LD_INT 0
58166: PPUSH
// result := array diff 0 ;
58167: LD_ADDR_VAR 0 2
58171: PUSH
58172: LD_VAR 0 1
58176: PUSH
58177: LD_INT 0
58179: DIFF
58180: ST_TO_ADDR
// if not result [ 1 ] then
58181: LD_VAR 0 2
58185: PUSH
58186: LD_INT 1
58188: ARRAY
58189: NOT
58190: IFFALSE 58210
// result := Delete ( result , 1 ) ;
58192: LD_ADDR_VAR 0 2
58196: PUSH
58197: LD_VAR 0 2
58201: PPUSH
58202: LD_INT 1
58204: PPUSH
58205: CALL_OW 3
58209: ST_TO_ADDR
// end ;
58210: LD_VAR 0 2
58214: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58215: LD_INT 0
58217: PPUSH
58218: PPUSH
58219: PPUSH
58220: PPUSH
// sibRocketRange := 25 ;
58221: LD_ADDR_VAR 0 6
58225: PUSH
58226: LD_INT 25
58228: ST_TO_ADDR
// result := false ;
58229: LD_ADDR_VAR 0 4
58233: PUSH
58234: LD_INT 0
58236: ST_TO_ADDR
// for i := 0 to 5 do
58237: LD_ADDR_VAR 0 5
58241: PUSH
58242: DOUBLE
58243: LD_INT 0
58245: DEC
58246: ST_TO_ADDR
58247: LD_INT 5
58249: PUSH
58250: FOR_TO
58251: IFFALSE 58318
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58253: LD_VAR 0 1
58257: PPUSH
58258: LD_VAR 0 5
58262: PPUSH
58263: LD_VAR 0 6
58267: PPUSH
58268: CALL_OW 272
58272: PPUSH
58273: LD_VAR 0 2
58277: PPUSH
58278: LD_VAR 0 5
58282: PPUSH
58283: LD_VAR 0 6
58287: PPUSH
58288: CALL_OW 273
58292: PPUSH
58293: LD_VAR 0 3
58297: PPUSH
58298: CALL_OW 309
58302: IFFALSE 58316
// begin result := true ;
58304: LD_ADDR_VAR 0 4
58308: PUSH
58309: LD_INT 1
58311: ST_TO_ADDR
// exit ;
58312: POP
58313: POP
58314: GO 58320
// end ;
58316: GO 58250
58318: POP
58319: POP
// end ;
58320: LD_VAR 0 4
58324: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58325: LD_INT 0
58327: PPUSH
58328: PPUSH
58329: PPUSH
// if btype = b_depot then
58330: LD_VAR 0 2
58334: PUSH
58335: LD_INT 0
58337: EQUAL
58338: IFFALSE 58350
// begin result := true ;
58340: LD_ADDR_VAR 0 3
58344: PUSH
58345: LD_INT 1
58347: ST_TO_ADDR
// exit ;
58348: GO 58466
// end ; pom := GetBase ( depot ) ;
58350: LD_ADDR_VAR 0 4
58354: PUSH
58355: LD_VAR 0 1
58359: PPUSH
58360: CALL_OW 274
58364: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58365: LD_ADDR_VAR 0 5
58369: PUSH
58370: LD_VAR 0 2
58374: PPUSH
58375: LD_VAR 0 1
58379: PPUSH
58380: CALL_OW 248
58384: PPUSH
58385: CALL_OW 450
58389: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58390: LD_ADDR_VAR 0 3
58394: PUSH
58395: LD_VAR 0 4
58399: PPUSH
58400: LD_INT 1
58402: PPUSH
58403: CALL_OW 275
58407: PUSH
58408: LD_VAR 0 5
58412: PUSH
58413: LD_INT 1
58415: ARRAY
58416: GREATEREQUAL
58417: PUSH
58418: LD_VAR 0 4
58422: PPUSH
58423: LD_INT 2
58425: PPUSH
58426: CALL_OW 275
58430: PUSH
58431: LD_VAR 0 5
58435: PUSH
58436: LD_INT 2
58438: ARRAY
58439: GREATEREQUAL
58440: AND
58441: PUSH
58442: LD_VAR 0 4
58446: PPUSH
58447: LD_INT 3
58449: PPUSH
58450: CALL_OW 275
58454: PUSH
58455: LD_VAR 0 5
58459: PUSH
58460: LD_INT 3
58462: ARRAY
58463: GREATEREQUAL
58464: AND
58465: ST_TO_ADDR
// end ;
58466: LD_VAR 0 3
58470: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58471: LD_INT 0
58473: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58474: LD_VAR 0 1
58478: PPUSH
58479: LD_VAR 0 2
58483: PPUSH
58484: LD_INT 0
58486: PPUSH
58487: LD_INT 0
58489: PPUSH
58490: LD_INT 1
58492: PPUSH
58493: LD_INT 0
58495: PPUSH
58496: CALL_OW 587
// end ;
58500: LD_VAR 0 3
58504: RET
// export function CenterOnNow ( unit ) ; begin
58505: LD_INT 0
58507: PPUSH
// result := IsInUnit ( unit ) ;
58508: LD_ADDR_VAR 0 2
58512: PUSH
58513: LD_VAR 0 1
58517: PPUSH
58518: CALL_OW 310
58522: ST_TO_ADDR
// if not result then
58523: LD_VAR 0 2
58527: NOT
58528: IFFALSE 58540
// result := unit ;
58530: LD_ADDR_VAR 0 2
58534: PUSH
58535: LD_VAR 0 1
58539: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58540: LD_VAR 0 1
58544: PPUSH
58545: CALL_OW 87
// end ;
58549: LD_VAR 0 2
58553: RET
// export function ComMoveHex ( unit , hex ) ; begin
58554: LD_INT 0
58556: PPUSH
// if not hex then
58557: LD_VAR 0 2
58561: NOT
58562: IFFALSE 58566
// exit ;
58564: GO 58619
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58566: LD_VAR 0 2
58570: PUSH
58571: LD_INT 1
58573: ARRAY
58574: PPUSH
58575: LD_VAR 0 2
58579: PUSH
58580: LD_INT 2
58582: ARRAY
58583: PPUSH
58584: CALL_OW 428
58588: IFFALSE 58592
// exit ;
58590: GO 58619
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58592: LD_VAR 0 1
58596: PPUSH
58597: LD_VAR 0 2
58601: PUSH
58602: LD_INT 1
58604: ARRAY
58605: PPUSH
58606: LD_VAR 0 2
58610: PUSH
58611: LD_INT 2
58613: ARRAY
58614: PPUSH
58615: CALL_OW 111
// end ;
58619: LD_VAR 0 3
58623: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58624: LD_INT 0
58626: PPUSH
58627: PPUSH
58628: PPUSH
// if not unit or not enemy then
58629: LD_VAR 0 1
58633: NOT
58634: PUSH
58635: LD_VAR 0 2
58639: NOT
58640: OR
58641: IFFALSE 58645
// exit ;
58643: GO 58769
// x := GetX ( enemy ) ;
58645: LD_ADDR_VAR 0 4
58649: PUSH
58650: LD_VAR 0 2
58654: PPUSH
58655: CALL_OW 250
58659: ST_TO_ADDR
// y := GetY ( enemy ) ;
58660: LD_ADDR_VAR 0 5
58664: PUSH
58665: LD_VAR 0 2
58669: PPUSH
58670: CALL_OW 251
58674: ST_TO_ADDR
// if ValidHex ( x , y ) then
58675: LD_VAR 0 4
58679: PPUSH
58680: LD_VAR 0 5
58684: PPUSH
58685: CALL_OW 488
58689: IFFALSE 58769
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58691: LD_VAR 0 2
58695: PPUSH
58696: CALL_OW 247
58700: PUSH
58701: LD_INT 3
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: IN
58711: PUSH
58712: LD_VAR 0 1
58716: PPUSH
58717: CALL_OW 255
58721: PPUSH
58722: LD_VAR 0 2
58726: PPUSH
58727: CALL_OW 292
58731: OR
58732: IFFALSE 58750
// ComAttackUnit ( unit , enemy ) else
58734: LD_VAR 0 1
58738: PPUSH
58739: LD_VAR 0 2
58743: PPUSH
58744: CALL_OW 115
58748: GO 58769
// ComAgressiveMove ( unit , x , y ) ;
58750: LD_VAR 0 1
58754: PPUSH
58755: LD_VAR 0 4
58759: PPUSH
58760: LD_VAR 0 5
58764: PPUSH
58765: CALL_OW 114
// end ;
58769: LD_VAR 0 3
58773: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58774: LD_INT 0
58776: PPUSH
58777: PPUSH
58778: PPUSH
// list := AreaToList ( area , 0 ) ;
58779: LD_ADDR_VAR 0 5
58783: PUSH
58784: LD_VAR 0 1
58788: PPUSH
58789: LD_INT 0
58791: PPUSH
58792: CALL_OW 517
58796: ST_TO_ADDR
// if not list then
58797: LD_VAR 0 5
58801: NOT
58802: IFFALSE 58806
// exit ;
58804: GO 58936
// if all then
58806: LD_VAR 0 2
58810: IFFALSE 58898
// begin for i := 1 to list [ 1 ] do
58812: LD_ADDR_VAR 0 4
58816: PUSH
58817: DOUBLE
58818: LD_INT 1
58820: DEC
58821: ST_TO_ADDR
58822: LD_VAR 0 5
58826: PUSH
58827: LD_INT 1
58829: ARRAY
58830: PUSH
58831: FOR_TO
58832: IFFALSE 58894
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58834: LD_ADDR_VAR 0 3
58838: PUSH
58839: LD_VAR 0 3
58843: PPUSH
58844: LD_VAR 0 3
58848: PUSH
58849: LD_INT 1
58851: PLUS
58852: PPUSH
58853: LD_VAR 0 5
58857: PUSH
58858: LD_INT 1
58860: ARRAY
58861: PUSH
58862: LD_VAR 0 4
58866: ARRAY
58867: PUSH
58868: LD_VAR 0 5
58872: PUSH
58873: LD_INT 2
58875: ARRAY
58876: PUSH
58877: LD_VAR 0 4
58881: ARRAY
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PPUSH
58887: CALL_OW 1
58891: ST_TO_ADDR
58892: GO 58831
58894: POP
58895: POP
// exit ;
58896: GO 58936
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58898: LD_ADDR_VAR 0 3
58902: PUSH
58903: LD_VAR 0 5
58907: PUSH
58908: LD_INT 1
58910: ARRAY
58911: PUSH
58912: LD_INT 1
58914: ARRAY
58915: PUSH
58916: LD_VAR 0 5
58920: PUSH
58921: LD_INT 2
58923: ARRAY
58924: PUSH
58925: LD_INT 1
58927: ARRAY
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: EMPTY
58934: LIST
58935: ST_TO_ADDR
// end ;
58936: LD_VAR 0 3
58940: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58941: LD_INT 0
58943: PPUSH
58944: PPUSH
// list := AreaToList ( area , 0 ) ;
58945: LD_ADDR_VAR 0 4
58949: PUSH
58950: LD_VAR 0 1
58954: PPUSH
58955: LD_INT 0
58957: PPUSH
58958: CALL_OW 517
58962: ST_TO_ADDR
// if not list then
58963: LD_VAR 0 4
58967: NOT
58968: IFFALSE 58972
// exit ;
58970: GO 59013
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58972: LD_ADDR_VAR 0 3
58976: PUSH
58977: LD_VAR 0 4
58981: PUSH
58982: LD_INT 1
58984: ARRAY
58985: PUSH
58986: LD_INT 1
58988: ARRAY
58989: PUSH
58990: LD_VAR 0 4
58994: PUSH
58995: LD_INT 2
58997: ARRAY
58998: PUSH
58999: LD_INT 1
59001: ARRAY
59002: PUSH
59003: LD_VAR 0 2
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: LIST
59012: ST_TO_ADDR
// end ;
59013: LD_VAR 0 3
59017: RET
// export function First ( array ) ; begin
59018: LD_INT 0
59020: PPUSH
// if not array then
59021: LD_VAR 0 1
59025: NOT
59026: IFFALSE 59030
// exit ;
59028: GO 59044
// result := array [ 1 ] ;
59030: LD_ADDR_VAR 0 2
59034: PUSH
59035: LD_VAR 0 1
59039: PUSH
59040: LD_INT 1
59042: ARRAY
59043: ST_TO_ADDR
// end ;
59044: LD_VAR 0 2
59048: RET
// export function Last ( array ) ; begin
59049: LD_INT 0
59051: PPUSH
// if not array then
59052: LD_VAR 0 1
59056: NOT
59057: IFFALSE 59061
// exit ;
59059: GO 59077
// result := array [ array ] ;
59061: LD_ADDR_VAR 0 2
59065: PUSH
59066: LD_VAR 0 1
59070: PUSH
59071: LD_VAR 0 1
59075: ARRAY
59076: ST_TO_ADDR
// end ;
59077: LD_VAR 0 2
59081: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59082: LD_INT 0
59084: PPUSH
59085: PPUSH
// result := [ ] ;
59086: LD_ADDR_VAR 0 5
59090: PUSH
59091: EMPTY
59092: ST_TO_ADDR
// if not array then
59093: LD_VAR 0 1
59097: NOT
59098: IFFALSE 59102
// exit ;
59100: GO 59214
// for i := 1 to array do
59102: LD_ADDR_VAR 0 6
59106: PUSH
59107: DOUBLE
59108: LD_INT 1
59110: DEC
59111: ST_TO_ADDR
59112: LD_VAR 0 1
59116: PUSH
59117: FOR_TO
59118: IFFALSE 59212
// if array [ i ] [ index ] = value then
59120: LD_VAR 0 1
59124: PUSH
59125: LD_VAR 0 6
59129: ARRAY
59130: PUSH
59131: LD_VAR 0 2
59135: ARRAY
59136: PUSH
59137: LD_VAR 0 3
59141: EQUAL
59142: IFFALSE 59210
// begin if indexColumn then
59144: LD_VAR 0 4
59148: IFFALSE 59184
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59150: LD_ADDR_VAR 0 5
59154: PUSH
59155: LD_VAR 0 5
59159: PPUSH
59160: LD_VAR 0 1
59164: PUSH
59165: LD_VAR 0 6
59169: ARRAY
59170: PUSH
59171: LD_VAR 0 4
59175: ARRAY
59176: PPUSH
59177: CALL 54406 0 2
59181: ST_TO_ADDR
59182: GO 59210
// result := Join ( result , array [ i ] ) ;
59184: LD_ADDR_VAR 0 5
59188: PUSH
59189: LD_VAR 0 5
59193: PPUSH
59194: LD_VAR 0 1
59198: PUSH
59199: LD_VAR 0 6
59203: ARRAY
59204: PPUSH
59205: CALL 54406 0 2
59209: ST_TO_ADDR
// end ;
59210: GO 59117
59212: POP
59213: POP
// end ;
59214: LD_VAR 0 5
59218: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59219: LD_INT 0
59221: PPUSH
// if not vehicles or not parkingPoint then
59222: LD_VAR 0 1
59226: NOT
59227: PUSH
59228: LD_VAR 0 2
59232: NOT
59233: OR
59234: IFFALSE 59238
// exit ;
59236: GO 59336
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59238: LD_ADDR_VAR 0 1
59242: PUSH
59243: LD_VAR 0 1
59247: PPUSH
59248: LD_INT 50
59250: PUSH
59251: EMPTY
59252: LIST
59253: PUSH
59254: LD_INT 3
59256: PUSH
59257: LD_INT 92
59259: PUSH
59260: LD_VAR 0 2
59264: PUSH
59265: LD_INT 1
59267: ARRAY
59268: PUSH
59269: LD_VAR 0 2
59273: PUSH
59274: LD_INT 2
59276: ARRAY
59277: PUSH
59278: LD_INT 8
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PPUSH
59295: CALL_OW 72
59299: ST_TO_ADDR
// if not vehicles then
59300: LD_VAR 0 1
59304: NOT
59305: IFFALSE 59309
// exit ;
59307: GO 59336
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59309: LD_VAR 0 1
59313: PPUSH
59314: LD_VAR 0 2
59318: PUSH
59319: LD_INT 1
59321: ARRAY
59322: PPUSH
59323: LD_VAR 0 2
59327: PUSH
59328: LD_INT 2
59330: ARRAY
59331: PPUSH
59332: CALL_OW 111
// end ;
59336: LD_VAR 0 3
59340: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59341: LD_INT 0
59343: PPUSH
59344: PPUSH
59345: PPUSH
// if not side or not area then
59346: LD_VAR 0 1
59350: NOT
59351: PUSH
59352: LD_VAR 0 2
59356: NOT
59357: OR
59358: IFFALSE 59362
// exit ;
59360: GO 59481
// tmp := AreaToList ( area , 0 ) ;
59362: LD_ADDR_VAR 0 5
59366: PUSH
59367: LD_VAR 0 2
59371: PPUSH
59372: LD_INT 0
59374: PPUSH
59375: CALL_OW 517
59379: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59380: LD_ADDR_VAR 0 4
59384: PUSH
59385: DOUBLE
59386: LD_INT 1
59388: DEC
59389: ST_TO_ADDR
59390: LD_VAR 0 5
59394: PUSH
59395: LD_INT 1
59397: ARRAY
59398: PUSH
59399: FOR_TO
59400: IFFALSE 59479
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59402: LD_VAR 0 5
59406: PUSH
59407: LD_INT 1
59409: ARRAY
59410: PUSH
59411: LD_VAR 0 4
59415: ARRAY
59416: PPUSH
59417: LD_VAR 0 5
59421: PUSH
59422: LD_INT 2
59424: ARRAY
59425: PUSH
59426: LD_VAR 0 4
59430: ARRAY
59431: PPUSH
59432: CALL_OW 351
59436: IFFALSE 59477
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59438: LD_VAR 0 5
59442: PUSH
59443: LD_INT 1
59445: ARRAY
59446: PUSH
59447: LD_VAR 0 4
59451: ARRAY
59452: PPUSH
59453: LD_VAR 0 5
59457: PUSH
59458: LD_INT 2
59460: ARRAY
59461: PUSH
59462: LD_VAR 0 4
59466: ARRAY
59467: PPUSH
59468: LD_VAR 0 1
59472: PPUSH
59473: CALL_OW 244
// end ;
59477: GO 59399
59479: POP
59480: POP
// end ; end_of_file
59481: LD_VAR 0 3
59485: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
59486: LD_INT 0
59488: PPUSH
59489: PPUSH
59490: PPUSH
59491: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
59492: LD_VAR 0 1
59496: PPUSH
59497: CALL_OW 264
59501: PUSH
59502: LD_INT 91
59504: EQUAL
59505: IFFALSE 59577
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59507: LD_INT 68
59509: PPUSH
59510: LD_VAR 0 1
59514: PPUSH
59515: CALL_OW 255
59519: PPUSH
59520: CALL_OW 321
59524: PUSH
59525: LD_INT 2
59527: EQUAL
59528: IFFALSE 59540
// eff := 70 else
59530: LD_ADDR_VAR 0 4
59534: PUSH
59535: LD_INT 70
59537: ST_TO_ADDR
59538: GO 59548
// eff := 30 ;
59540: LD_ADDR_VAR 0 4
59544: PUSH
59545: LD_INT 30
59547: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59548: LD_VAR 0 1
59552: PPUSH
59553: CALL_OW 250
59557: PPUSH
59558: LD_VAR 0 1
59562: PPUSH
59563: CALL_OW 251
59567: PPUSH
59568: LD_VAR 0 4
59572: PPUSH
59573: CALL_OW 495
// end ; end ;
59577: LD_VAR 0 2
59581: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59582: LD_INT 0
59584: PPUSH
// end ;
59585: LD_VAR 0 4
59589: RET
// export function SOS_Command ( cmd ) ; begin
59590: LD_INT 0
59592: PPUSH
// end ;
59593: LD_VAR 0 2
59597: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59598: LD_INT 0
59600: PPUSH
// end ;
59601: LD_VAR 0 6
59605: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
59606: LD_INT 0
59608: PPUSH
59609: PPUSH
// if not vehicle or not factory then
59610: LD_VAR 0 1
59614: NOT
59615: PUSH
59616: LD_VAR 0 2
59620: NOT
59621: OR
59622: IFFALSE 59626
// exit ;
59624: GO 59857
// if factoryWaypoints >= factory then
59626: LD_EXP 121
59630: PUSH
59631: LD_VAR 0 2
59635: GREATEREQUAL
59636: IFFALSE 59857
// if factoryWaypoints [ factory ] then
59638: LD_EXP 121
59642: PUSH
59643: LD_VAR 0 2
59647: ARRAY
59648: IFFALSE 59857
// begin if GetControl ( vehicle ) = control_manual then
59650: LD_VAR 0 1
59654: PPUSH
59655: CALL_OW 263
59659: PUSH
59660: LD_INT 1
59662: EQUAL
59663: IFFALSE 59744
// begin driver := IsDrivenBy ( vehicle ) ;
59665: LD_ADDR_VAR 0 4
59669: PUSH
59670: LD_VAR 0 1
59674: PPUSH
59675: CALL_OW 311
59679: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59680: LD_VAR 0 4
59684: PPUSH
59685: LD_EXP 121
59689: PUSH
59690: LD_VAR 0 2
59694: ARRAY
59695: PUSH
59696: LD_INT 3
59698: ARRAY
59699: PPUSH
59700: LD_EXP 121
59704: PUSH
59705: LD_VAR 0 2
59709: ARRAY
59710: PUSH
59711: LD_INT 4
59713: ARRAY
59714: PPUSH
59715: CALL_OW 171
// AddComExitVehicle ( driver ) ;
59719: LD_VAR 0 4
59723: PPUSH
59724: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
59728: LD_VAR 0 4
59732: PPUSH
59733: LD_VAR 0 2
59737: PPUSH
59738: CALL_OW 180
// end else
59742: GO 59857
// if GetControl ( vehicle ) = control_remote then
59744: LD_VAR 0 1
59748: PPUSH
59749: CALL_OW 263
59753: PUSH
59754: LD_INT 2
59756: EQUAL
59757: IFFALSE 59818
// begin wait ( 0 0$2 ) ;
59759: LD_INT 70
59761: PPUSH
59762: CALL_OW 67
// if Connect ( vehicle ) then
59766: LD_VAR 0 1
59770: PPUSH
59771: CALL 25023 0 1
59775: IFFALSE 59816
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59777: LD_VAR 0 1
59781: PPUSH
59782: LD_EXP 121
59786: PUSH
59787: LD_VAR 0 2
59791: ARRAY
59792: PUSH
59793: LD_INT 3
59795: ARRAY
59796: PPUSH
59797: LD_EXP 121
59801: PUSH
59802: LD_VAR 0 2
59806: ARRAY
59807: PUSH
59808: LD_INT 4
59810: ARRAY
59811: PPUSH
59812: CALL_OW 171
// end else
59816: GO 59857
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59818: LD_VAR 0 1
59822: PPUSH
59823: LD_EXP 121
59827: PUSH
59828: LD_VAR 0 2
59832: ARRAY
59833: PUSH
59834: LD_INT 3
59836: ARRAY
59837: PPUSH
59838: LD_EXP 121
59842: PUSH
59843: LD_VAR 0 2
59847: ARRAY
59848: PUSH
59849: LD_INT 4
59851: ARRAY
59852: PPUSH
59853: CALL_OW 171
// end ; end ;
59857: LD_VAR 0 3
59861: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59862: LD_INT 0
59864: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59865: LD_VAR 0 1
59869: PUSH
59870: LD_INT 250
59872: EQUAL
59873: PUSH
59874: LD_VAR 0 2
59878: PPUSH
59879: CALL_OW 264
59883: PUSH
59884: LD_INT 81
59886: EQUAL
59887: AND
59888: IFFALSE 59909
// MinerPlaceMine ( unit , x , y ) ;
59890: LD_VAR 0 2
59894: PPUSH
59895: LD_VAR 0 4
59899: PPUSH
59900: LD_VAR 0 5
59904: PPUSH
59905: CALL 62899 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59909: LD_VAR 0 1
59913: PUSH
59914: LD_INT 251
59916: EQUAL
59917: PUSH
59918: LD_VAR 0 2
59922: PPUSH
59923: CALL_OW 264
59927: PUSH
59928: LD_INT 81
59930: EQUAL
59931: AND
59932: IFFALSE 59953
// MinerDetonateMine ( unit , x , y ) ;
59934: LD_VAR 0 2
59938: PPUSH
59939: LD_VAR 0 4
59943: PPUSH
59944: LD_VAR 0 5
59948: PPUSH
59949: CALL 63174 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59953: LD_VAR 0 1
59957: PUSH
59958: LD_INT 252
59960: EQUAL
59961: PUSH
59962: LD_VAR 0 2
59966: PPUSH
59967: CALL_OW 264
59971: PUSH
59972: LD_INT 81
59974: EQUAL
59975: AND
59976: IFFALSE 59997
// MinerCreateMinefield ( unit , x , y ) ;
59978: LD_VAR 0 2
59982: PPUSH
59983: LD_VAR 0 4
59987: PPUSH
59988: LD_VAR 0 5
59992: PPUSH
59993: CALL 63591 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59997: LD_VAR 0 1
60001: PUSH
60002: LD_INT 253
60004: EQUAL
60005: PUSH
60006: LD_VAR 0 2
60010: PPUSH
60011: CALL_OW 257
60015: PUSH
60016: LD_INT 5
60018: EQUAL
60019: AND
60020: IFFALSE 60041
// ComBinocular ( unit , x , y ) ;
60022: LD_VAR 0 2
60026: PPUSH
60027: LD_VAR 0 4
60031: PPUSH
60032: LD_VAR 0 5
60036: PPUSH
60037: CALL 63960 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60041: LD_VAR 0 1
60045: PUSH
60046: LD_INT 254
60048: EQUAL
60049: PUSH
60050: LD_VAR 0 2
60054: PPUSH
60055: CALL_OW 264
60059: PUSH
60060: LD_INT 99
60062: EQUAL
60063: AND
60064: PUSH
60065: LD_VAR 0 3
60069: PPUSH
60070: CALL_OW 263
60074: PUSH
60075: LD_INT 3
60077: EQUAL
60078: AND
60079: IFFALSE 60095
// HackDestroyVehicle ( unit , selectedUnit ) ;
60081: LD_VAR 0 2
60085: PPUSH
60086: LD_VAR 0 3
60090: PPUSH
60091: CALL 62263 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60095: LD_VAR 0 1
60099: PUSH
60100: LD_INT 255
60102: EQUAL
60103: PUSH
60104: LD_VAR 0 2
60108: PPUSH
60109: CALL_OW 264
60113: PUSH
60114: LD_INT 14
60116: PUSH
60117: LD_INT 53
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: IN
60124: AND
60125: PUSH
60126: LD_VAR 0 4
60130: PPUSH
60131: LD_VAR 0 5
60135: PPUSH
60136: CALL_OW 488
60140: AND
60141: IFFALSE 60165
// CutTreeXYR ( unit , x , y , 12 ) ;
60143: LD_VAR 0 2
60147: PPUSH
60148: LD_VAR 0 4
60152: PPUSH
60153: LD_VAR 0 5
60157: PPUSH
60158: LD_INT 12
60160: PPUSH
60161: CALL 60260 0 4
// if cmd = 256 then
60165: LD_VAR 0 1
60169: PUSH
60170: LD_INT 256
60172: EQUAL
60173: IFFALSE 60194
// SetFactoryWaypoint ( unit , x , y ) ;
60175: LD_VAR 0 2
60179: PPUSH
60180: LD_VAR 0 4
60184: PPUSH
60185: LD_VAR 0 5
60189: PPUSH
60190: CALL 79051 0 3
// if cmd = 257 then
60194: LD_VAR 0 1
60198: PUSH
60199: LD_INT 257
60201: EQUAL
60202: IFFALSE 60223
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60204: LD_VAR 0 2
60208: PPUSH
60209: LD_VAR 0 4
60213: PPUSH
60214: LD_VAR 0 5
60218: PPUSH
60219: CALL 79413 0 3
// if cmd = 258 then
60223: LD_VAR 0 1
60227: PUSH
60228: LD_INT 258
60230: EQUAL
60231: IFFALSE 60255
// BurnTreeXYR ( unit , x , y , 8 ) ;
60233: LD_VAR 0 2
60237: PPUSH
60238: LD_VAR 0 4
60242: PPUSH
60243: LD_VAR 0 5
60247: PPUSH
60248: LD_INT 8
60250: PPUSH
60251: CALL 60654 0 4
// end ;
60255: LD_VAR 0 6
60259: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60260: LD_INT 0
60262: PPUSH
60263: PPUSH
60264: PPUSH
60265: PPUSH
60266: PPUSH
60267: PPUSH
60268: PPUSH
60269: PPUSH
60270: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60271: LD_VAR 0 1
60275: PPUSH
60276: CALL_OW 302
60280: NOT
60281: PUSH
60282: LD_VAR 0 2
60286: PPUSH
60287: LD_VAR 0 3
60291: PPUSH
60292: CALL_OW 488
60296: NOT
60297: OR
60298: PUSH
60299: LD_VAR 0 4
60303: NOT
60304: OR
60305: IFFALSE 60309
// exit ;
60307: GO 60649
// list := [ ] ;
60309: LD_ADDR_VAR 0 13
60313: PUSH
60314: EMPTY
60315: ST_TO_ADDR
// if x - r < 0 then
60316: LD_VAR 0 2
60320: PUSH
60321: LD_VAR 0 4
60325: MINUS
60326: PUSH
60327: LD_INT 0
60329: LESS
60330: IFFALSE 60342
// min_x := 0 else
60332: LD_ADDR_VAR 0 7
60336: PUSH
60337: LD_INT 0
60339: ST_TO_ADDR
60340: GO 60358
// min_x := x - r ;
60342: LD_ADDR_VAR 0 7
60346: PUSH
60347: LD_VAR 0 2
60351: PUSH
60352: LD_VAR 0 4
60356: MINUS
60357: ST_TO_ADDR
// if y - r < 0 then
60358: LD_VAR 0 3
60362: PUSH
60363: LD_VAR 0 4
60367: MINUS
60368: PUSH
60369: LD_INT 0
60371: LESS
60372: IFFALSE 60384
// min_y := 0 else
60374: LD_ADDR_VAR 0 8
60378: PUSH
60379: LD_INT 0
60381: ST_TO_ADDR
60382: GO 60400
// min_y := y - r ;
60384: LD_ADDR_VAR 0 8
60388: PUSH
60389: LD_VAR 0 3
60393: PUSH
60394: LD_VAR 0 4
60398: MINUS
60399: ST_TO_ADDR
// max_x := x + r ;
60400: LD_ADDR_VAR 0 9
60404: PUSH
60405: LD_VAR 0 2
60409: PUSH
60410: LD_VAR 0 4
60414: PLUS
60415: ST_TO_ADDR
// max_y := y + r ;
60416: LD_ADDR_VAR 0 10
60420: PUSH
60421: LD_VAR 0 3
60425: PUSH
60426: LD_VAR 0 4
60430: PLUS
60431: ST_TO_ADDR
// for _x = min_x to max_x do
60432: LD_ADDR_VAR 0 11
60436: PUSH
60437: DOUBLE
60438: LD_VAR 0 7
60442: DEC
60443: ST_TO_ADDR
60444: LD_VAR 0 9
60448: PUSH
60449: FOR_TO
60450: IFFALSE 60567
// for _y = min_y to max_y do
60452: LD_ADDR_VAR 0 12
60456: PUSH
60457: DOUBLE
60458: LD_VAR 0 8
60462: DEC
60463: ST_TO_ADDR
60464: LD_VAR 0 10
60468: PUSH
60469: FOR_TO
60470: IFFALSE 60563
// begin if not ValidHex ( _x , _y ) then
60472: LD_VAR 0 11
60476: PPUSH
60477: LD_VAR 0 12
60481: PPUSH
60482: CALL_OW 488
60486: NOT
60487: IFFALSE 60491
// continue ;
60489: GO 60469
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60491: LD_VAR 0 11
60495: PPUSH
60496: LD_VAR 0 12
60500: PPUSH
60501: CALL_OW 351
60505: PUSH
60506: LD_VAR 0 11
60510: PPUSH
60511: LD_VAR 0 12
60515: PPUSH
60516: CALL_OW 554
60520: AND
60521: IFFALSE 60561
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60523: LD_ADDR_VAR 0 13
60527: PUSH
60528: LD_VAR 0 13
60532: PPUSH
60533: LD_VAR 0 13
60537: PUSH
60538: LD_INT 1
60540: PLUS
60541: PPUSH
60542: LD_VAR 0 11
60546: PUSH
60547: LD_VAR 0 12
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PPUSH
60556: CALL_OW 2
60560: ST_TO_ADDR
// end ;
60561: GO 60469
60563: POP
60564: POP
60565: GO 60449
60567: POP
60568: POP
// if not list then
60569: LD_VAR 0 13
60573: NOT
60574: IFFALSE 60578
// exit ;
60576: GO 60649
// for i in list do
60578: LD_ADDR_VAR 0 6
60582: PUSH
60583: LD_VAR 0 13
60587: PUSH
60588: FOR_IN
60589: IFFALSE 60647
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60591: LD_VAR 0 1
60595: PPUSH
60596: LD_STRING M
60598: PUSH
60599: LD_VAR 0 6
60603: PUSH
60604: LD_INT 1
60606: ARRAY
60607: PUSH
60608: LD_VAR 0 6
60612: PUSH
60613: LD_INT 2
60615: ARRAY
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: PUSH
60638: EMPTY
60639: LIST
60640: PPUSH
60641: CALL_OW 447
60645: GO 60588
60647: POP
60648: POP
// end ;
60649: LD_VAR 0 5
60653: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
60654: LD_INT 0
60656: PPUSH
60657: PPUSH
60658: PPUSH
60659: PPUSH
60660: PPUSH
60661: PPUSH
60662: PPUSH
60663: PPUSH
60664: PPUSH
60665: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60666: LD_VAR 0 1
60670: PPUSH
60671: CALL_OW 302
60675: NOT
60676: PUSH
60677: LD_VAR 0 2
60681: PPUSH
60682: LD_VAR 0 3
60686: PPUSH
60687: CALL_OW 488
60691: NOT
60692: OR
60693: PUSH
60694: LD_VAR 0 4
60698: NOT
60699: OR
60700: IFFALSE 60704
// exit ;
60702: GO 61217
// list := [ ] ;
60704: LD_ADDR_VAR 0 13
60708: PUSH
60709: EMPTY
60710: ST_TO_ADDR
// if x - r < 0 then
60711: LD_VAR 0 2
60715: PUSH
60716: LD_VAR 0 4
60720: MINUS
60721: PUSH
60722: LD_INT 0
60724: LESS
60725: IFFALSE 60737
// min_x := 0 else
60727: LD_ADDR_VAR 0 7
60731: PUSH
60732: LD_INT 0
60734: ST_TO_ADDR
60735: GO 60753
// min_x := x - r ;
60737: LD_ADDR_VAR 0 7
60741: PUSH
60742: LD_VAR 0 2
60746: PUSH
60747: LD_VAR 0 4
60751: MINUS
60752: ST_TO_ADDR
// if y - r < 0 then
60753: LD_VAR 0 3
60757: PUSH
60758: LD_VAR 0 4
60762: MINUS
60763: PUSH
60764: LD_INT 0
60766: LESS
60767: IFFALSE 60779
// min_y := 0 else
60769: LD_ADDR_VAR 0 8
60773: PUSH
60774: LD_INT 0
60776: ST_TO_ADDR
60777: GO 60795
// min_y := y - r ;
60779: LD_ADDR_VAR 0 8
60783: PUSH
60784: LD_VAR 0 3
60788: PUSH
60789: LD_VAR 0 4
60793: MINUS
60794: ST_TO_ADDR
// max_x := x + r ;
60795: LD_ADDR_VAR 0 9
60799: PUSH
60800: LD_VAR 0 2
60804: PUSH
60805: LD_VAR 0 4
60809: PLUS
60810: ST_TO_ADDR
// max_y := y + r ;
60811: LD_ADDR_VAR 0 10
60815: PUSH
60816: LD_VAR 0 3
60820: PUSH
60821: LD_VAR 0 4
60825: PLUS
60826: ST_TO_ADDR
// for _x = min_x to max_x do
60827: LD_ADDR_VAR 0 11
60831: PUSH
60832: DOUBLE
60833: LD_VAR 0 7
60837: DEC
60838: ST_TO_ADDR
60839: LD_VAR 0 9
60843: PUSH
60844: FOR_TO
60845: IFFALSE 60962
// for _y = min_y to max_y do
60847: LD_ADDR_VAR 0 12
60851: PUSH
60852: DOUBLE
60853: LD_VAR 0 8
60857: DEC
60858: ST_TO_ADDR
60859: LD_VAR 0 10
60863: PUSH
60864: FOR_TO
60865: IFFALSE 60958
// begin if not ValidHex ( _x , _y ) then
60867: LD_VAR 0 11
60871: PPUSH
60872: LD_VAR 0 12
60876: PPUSH
60877: CALL_OW 488
60881: NOT
60882: IFFALSE 60886
// continue ;
60884: GO 60864
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60886: LD_VAR 0 11
60890: PPUSH
60891: LD_VAR 0 12
60895: PPUSH
60896: CALL_OW 351
60900: PUSH
60901: LD_VAR 0 11
60905: PPUSH
60906: LD_VAR 0 12
60910: PPUSH
60911: CALL_OW 554
60915: AND
60916: IFFALSE 60956
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60918: LD_ADDR_VAR 0 13
60922: PUSH
60923: LD_VAR 0 13
60927: PPUSH
60928: LD_VAR 0 13
60932: PUSH
60933: LD_INT 1
60935: PLUS
60936: PPUSH
60937: LD_VAR 0 11
60941: PUSH
60942: LD_VAR 0 12
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PPUSH
60951: CALL_OW 2
60955: ST_TO_ADDR
// end ;
60956: GO 60864
60958: POP
60959: POP
60960: GO 60844
60962: POP
60963: POP
// if not list then
60964: LD_VAR 0 13
60968: NOT
60969: IFFALSE 60973
// exit ;
60971: GO 61217
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
60973: LD_ADDR_VAR 0 13
60977: PUSH
60978: LD_VAR 0 1
60982: PPUSH
60983: LD_VAR 0 13
60987: PPUSH
60988: LD_INT 1
60990: PPUSH
60991: LD_INT 1
60993: PPUSH
60994: CALL 22165 0 4
60998: ST_TO_ADDR
// ComStop ( flame ) ;
60999: LD_VAR 0 1
61003: PPUSH
61004: CALL_OW 141
// for i in list do
61008: LD_ADDR_VAR 0 6
61012: PUSH
61013: LD_VAR 0 13
61017: PUSH
61018: FOR_IN
61019: IFFALSE 61050
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61021: LD_VAR 0 1
61025: PPUSH
61026: LD_VAR 0 6
61030: PUSH
61031: LD_INT 1
61033: ARRAY
61034: PPUSH
61035: LD_VAR 0 6
61039: PUSH
61040: LD_INT 2
61042: ARRAY
61043: PPUSH
61044: CALL_OW 176
61048: GO 61018
61050: POP
61051: POP
// repeat wait ( 0 0$1 ) ;
61052: LD_INT 35
61054: PPUSH
61055: CALL_OW 67
// task := GetTaskList ( flame ) ;
61059: LD_ADDR_VAR 0 14
61063: PUSH
61064: LD_VAR 0 1
61068: PPUSH
61069: CALL_OW 437
61073: ST_TO_ADDR
// if not task then
61074: LD_VAR 0 14
61078: NOT
61079: IFFALSE 61083
// exit ;
61081: GO 61217
// if task [ 1 ] [ 1 ] <> | then
61083: LD_VAR 0 14
61087: PUSH
61088: LD_INT 1
61090: ARRAY
61091: PUSH
61092: LD_INT 1
61094: ARRAY
61095: PUSH
61096: LD_STRING |
61098: NONEQUAL
61099: IFFALSE 61103
// exit ;
61101: GO 61217
// _x := task [ 1 ] [ 2 ] ;
61103: LD_ADDR_VAR 0 11
61107: PUSH
61108: LD_VAR 0 14
61112: PUSH
61113: LD_INT 1
61115: ARRAY
61116: PUSH
61117: LD_INT 2
61119: ARRAY
61120: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61121: LD_ADDR_VAR 0 12
61125: PUSH
61126: LD_VAR 0 14
61130: PUSH
61131: LD_INT 1
61133: ARRAY
61134: PUSH
61135: LD_INT 3
61137: ARRAY
61138: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61139: LD_VAR 0 11
61143: PPUSH
61144: LD_VAR 0 12
61148: PPUSH
61149: CALL_OW 351
61153: NOT
61154: PUSH
61155: LD_VAR 0 11
61159: PPUSH
61160: LD_VAR 0 12
61164: PPUSH
61165: CALL_OW 554
61169: NOT
61170: OR
61171: IFFALSE 61205
// begin task := Delete ( task , 1 ) ;
61173: LD_ADDR_VAR 0 14
61177: PUSH
61178: LD_VAR 0 14
61182: PPUSH
61183: LD_INT 1
61185: PPUSH
61186: CALL_OW 3
61190: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61191: LD_VAR 0 1
61195: PPUSH
61196: LD_VAR 0 14
61200: PPUSH
61201: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61205: LD_VAR 0 1
61209: PPUSH
61210: CALL_OW 314
61214: NOT
61215: IFFALSE 61052
// end ;
61217: LD_VAR 0 5
61221: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61222: LD_EXP 52
61226: NOT
61227: IFFALSE 61277
61229: GO 61231
61231: DISABLE
// begin initHack := true ;
61232: LD_ADDR_EXP 52
61236: PUSH
61237: LD_INT 1
61239: ST_TO_ADDR
// hackTanks := [ ] ;
61240: LD_ADDR_EXP 53
61244: PUSH
61245: EMPTY
61246: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61247: LD_ADDR_EXP 54
61251: PUSH
61252: EMPTY
61253: ST_TO_ADDR
// hackLimit := 3 ;
61254: LD_ADDR_EXP 55
61258: PUSH
61259: LD_INT 3
61261: ST_TO_ADDR
// hackDist := 12 ;
61262: LD_ADDR_EXP 56
61266: PUSH
61267: LD_INT 12
61269: ST_TO_ADDR
// hackCounter := [ ] ;
61270: LD_ADDR_EXP 57
61274: PUSH
61275: EMPTY
61276: ST_TO_ADDR
// end ;
61277: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61278: LD_EXP 52
61282: PUSH
61283: LD_INT 34
61285: PUSH
61286: LD_INT 99
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PPUSH
61293: CALL_OW 69
61297: AND
61298: IFFALSE 61551
61300: GO 61302
61302: DISABLE
61303: LD_INT 0
61305: PPUSH
61306: PPUSH
// begin enable ;
61307: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61308: LD_ADDR_VAR 0 1
61312: PUSH
61313: LD_INT 34
61315: PUSH
61316: LD_INT 99
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PPUSH
61323: CALL_OW 69
61327: PUSH
61328: FOR_IN
61329: IFFALSE 61549
// begin if not i in hackTanks then
61331: LD_VAR 0 1
61335: PUSH
61336: LD_EXP 53
61340: IN
61341: NOT
61342: IFFALSE 61425
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61344: LD_ADDR_EXP 53
61348: PUSH
61349: LD_EXP 53
61353: PPUSH
61354: LD_EXP 53
61358: PUSH
61359: LD_INT 1
61361: PLUS
61362: PPUSH
61363: LD_VAR 0 1
61367: PPUSH
61368: CALL_OW 1
61372: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61373: LD_ADDR_EXP 54
61377: PUSH
61378: LD_EXP 54
61382: PPUSH
61383: LD_EXP 54
61387: PUSH
61388: LD_INT 1
61390: PLUS
61391: PPUSH
61392: EMPTY
61393: PPUSH
61394: CALL_OW 1
61398: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61399: LD_ADDR_EXP 57
61403: PUSH
61404: LD_EXP 57
61408: PPUSH
61409: LD_EXP 57
61413: PUSH
61414: LD_INT 1
61416: PLUS
61417: PPUSH
61418: EMPTY
61419: PPUSH
61420: CALL_OW 1
61424: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61425: LD_VAR 0 1
61429: PPUSH
61430: CALL_OW 302
61434: NOT
61435: IFFALSE 61448
// begin HackUnlinkAll ( i ) ;
61437: LD_VAR 0 1
61441: PPUSH
61442: CALL 61554 0 1
// continue ;
61446: GO 61328
// end ; HackCheckCapturedStatus ( i ) ;
61448: LD_VAR 0 1
61452: PPUSH
61453: CALL 61997 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61457: LD_ADDR_VAR 0 2
61461: PUSH
61462: LD_INT 81
61464: PUSH
61465: LD_VAR 0 1
61469: PPUSH
61470: CALL_OW 255
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 33
61481: PUSH
61482: LD_INT 3
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 91
61491: PUSH
61492: LD_VAR 0 1
61496: PUSH
61497: LD_EXP 56
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 50
61509: PUSH
61510: EMPTY
61511: LIST
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: PPUSH
61519: CALL_OW 69
61523: ST_TO_ADDR
// if not tmp then
61524: LD_VAR 0 2
61528: NOT
61529: IFFALSE 61533
// continue ;
61531: GO 61328
// HackLink ( i , tmp ) ;
61533: LD_VAR 0 1
61537: PPUSH
61538: LD_VAR 0 2
61542: PPUSH
61543: CALL 61690 0 2
// end ;
61547: GO 61328
61549: POP
61550: POP
// end ;
61551: PPOPN 2
61553: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61554: LD_INT 0
61556: PPUSH
61557: PPUSH
61558: PPUSH
// if not hack in hackTanks then
61559: LD_VAR 0 1
61563: PUSH
61564: LD_EXP 53
61568: IN
61569: NOT
61570: IFFALSE 61574
// exit ;
61572: GO 61685
// index := GetElementIndex ( hackTanks , hack ) ;
61574: LD_ADDR_VAR 0 4
61578: PUSH
61579: LD_EXP 53
61583: PPUSH
61584: LD_VAR 0 1
61588: PPUSH
61589: CALL 21462 0 2
61593: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61594: LD_EXP 54
61598: PUSH
61599: LD_VAR 0 4
61603: ARRAY
61604: IFFALSE 61685
// begin for i in hackTanksCaptured [ index ] do
61606: LD_ADDR_VAR 0 3
61610: PUSH
61611: LD_EXP 54
61615: PUSH
61616: LD_VAR 0 4
61620: ARRAY
61621: PUSH
61622: FOR_IN
61623: IFFALSE 61649
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61625: LD_VAR 0 3
61629: PUSH
61630: LD_INT 1
61632: ARRAY
61633: PPUSH
61634: LD_VAR 0 3
61638: PUSH
61639: LD_INT 2
61641: ARRAY
61642: PPUSH
61643: CALL_OW 235
61647: GO 61622
61649: POP
61650: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61651: LD_ADDR_EXP 54
61655: PUSH
61656: LD_EXP 54
61660: PPUSH
61661: LD_VAR 0 4
61665: PPUSH
61666: EMPTY
61667: PPUSH
61668: CALL_OW 1
61672: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61673: LD_VAR 0 1
61677: PPUSH
61678: LD_INT 0
61680: PPUSH
61681: CALL_OW 505
// end ; end ;
61685: LD_VAR 0 2
61689: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61690: LD_INT 0
61692: PPUSH
61693: PPUSH
61694: PPUSH
// if not hack in hackTanks or not vehicles then
61695: LD_VAR 0 1
61699: PUSH
61700: LD_EXP 53
61704: IN
61705: NOT
61706: PUSH
61707: LD_VAR 0 2
61711: NOT
61712: OR
61713: IFFALSE 61717
// exit ;
61715: GO 61992
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
61717: LD_ADDR_VAR 0 2
61721: PUSH
61722: LD_VAR 0 1
61726: PPUSH
61727: LD_VAR 0 2
61731: PPUSH
61732: LD_INT 1
61734: PPUSH
61735: LD_INT 1
61737: PPUSH
61738: CALL 22112 0 4
61742: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
61743: LD_ADDR_VAR 0 5
61747: PUSH
61748: LD_EXP 53
61752: PPUSH
61753: LD_VAR 0 1
61757: PPUSH
61758: CALL 21462 0 2
61762: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
61763: LD_EXP 54
61767: PUSH
61768: LD_VAR 0 5
61772: ARRAY
61773: PUSH
61774: LD_EXP 55
61778: LESS
61779: IFFALSE 61968
// begin for i := 1 to vehicles do
61781: LD_ADDR_VAR 0 4
61785: PUSH
61786: DOUBLE
61787: LD_INT 1
61789: DEC
61790: ST_TO_ADDR
61791: LD_VAR 0 2
61795: PUSH
61796: FOR_TO
61797: IFFALSE 61966
// begin if hackTanksCaptured [ index ] = hackLimit then
61799: LD_EXP 54
61803: PUSH
61804: LD_VAR 0 5
61808: ARRAY
61809: PUSH
61810: LD_EXP 55
61814: EQUAL
61815: IFFALSE 61819
// break ;
61817: GO 61966
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61819: LD_ADDR_EXP 57
61823: PUSH
61824: LD_EXP 57
61828: PPUSH
61829: LD_VAR 0 5
61833: PPUSH
61834: LD_EXP 57
61838: PUSH
61839: LD_VAR 0 5
61843: ARRAY
61844: PUSH
61845: LD_INT 1
61847: PLUS
61848: PPUSH
61849: CALL_OW 1
61853: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61854: LD_ADDR_EXP 54
61858: PUSH
61859: LD_EXP 54
61863: PPUSH
61864: LD_VAR 0 5
61868: PUSH
61869: LD_EXP 54
61873: PUSH
61874: LD_VAR 0 5
61878: ARRAY
61879: PUSH
61880: LD_INT 1
61882: PLUS
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PPUSH
61888: LD_VAR 0 2
61892: PUSH
61893: LD_VAR 0 4
61897: ARRAY
61898: PUSH
61899: LD_VAR 0 2
61903: PUSH
61904: LD_VAR 0 4
61908: ARRAY
61909: PPUSH
61910: CALL_OW 255
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PPUSH
61919: CALL 21677 0 3
61923: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61924: LD_VAR 0 2
61928: PUSH
61929: LD_VAR 0 4
61933: ARRAY
61934: PPUSH
61935: LD_VAR 0 1
61939: PPUSH
61940: CALL_OW 255
61944: PPUSH
61945: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61949: LD_VAR 0 2
61953: PUSH
61954: LD_VAR 0 4
61958: ARRAY
61959: PPUSH
61960: CALL_OW 141
// end ;
61964: GO 61796
61966: POP
61967: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61968: LD_VAR 0 1
61972: PPUSH
61973: LD_EXP 54
61977: PUSH
61978: LD_VAR 0 5
61982: ARRAY
61983: PUSH
61984: LD_INT 0
61986: PLUS
61987: PPUSH
61988: CALL_OW 505
// end ;
61992: LD_VAR 0 3
61996: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61997: LD_INT 0
61999: PPUSH
62000: PPUSH
62001: PPUSH
62002: PPUSH
// if not hack in hackTanks then
62003: LD_VAR 0 1
62007: PUSH
62008: LD_EXP 53
62012: IN
62013: NOT
62014: IFFALSE 62018
// exit ;
62016: GO 62258
// index := GetElementIndex ( hackTanks , hack ) ;
62018: LD_ADDR_VAR 0 4
62022: PUSH
62023: LD_EXP 53
62027: PPUSH
62028: LD_VAR 0 1
62032: PPUSH
62033: CALL 21462 0 2
62037: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62038: LD_ADDR_VAR 0 3
62042: PUSH
62043: DOUBLE
62044: LD_EXP 54
62048: PUSH
62049: LD_VAR 0 4
62053: ARRAY
62054: INC
62055: ST_TO_ADDR
62056: LD_INT 1
62058: PUSH
62059: FOR_DOWNTO
62060: IFFALSE 62232
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62062: LD_ADDR_VAR 0 5
62066: PUSH
62067: LD_EXP 54
62071: PUSH
62072: LD_VAR 0 4
62076: ARRAY
62077: PUSH
62078: LD_VAR 0 3
62082: ARRAY
62083: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62084: LD_VAR 0 5
62088: PUSH
62089: LD_INT 1
62091: ARRAY
62092: PPUSH
62093: CALL_OW 302
62097: NOT
62098: PUSH
62099: LD_VAR 0 5
62103: PUSH
62104: LD_INT 1
62106: ARRAY
62107: PPUSH
62108: CALL_OW 255
62112: PUSH
62113: LD_VAR 0 1
62117: PPUSH
62118: CALL_OW 255
62122: NONEQUAL
62123: OR
62124: IFFALSE 62230
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62126: LD_VAR 0 5
62130: PUSH
62131: LD_INT 1
62133: ARRAY
62134: PPUSH
62135: CALL_OW 305
62139: PUSH
62140: LD_VAR 0 5
62144: PUSH
62145: LD_INT 1
62147: ARRAY
62148: PPUSH
62149: CALL_OW 255
62153: PUSH
62154: LD_VAR 0 1
62158: PPUSH
62159: CALL_OW 255
62163: EQUAL
62164: AND
62165: IFFALSE 62189
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62167: LD_VAR 0 5
62171: PUSH
62172: LD_INT 1
62174: ARRAY
62175: PPUSH
62176: LD_VAR 0 5
62180: PUSH
62181: LD_INT 2
62183: ARRAY
62184: PPUSH
62185: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62189: LD_ADDR_EXP 54
62193: PUSH
62194: LD_EXP 54
62198: PPUSH
62199: LD_VAR 0 4
62203: PPUSH
62204: LD_EXP 54
62208: PUSH
62209: LD_VAR 0 4
62213: ARRAY
62214: PPUSH
62215: LD_VAR 0 3
62219: PPUSH
62220: CALL_OW 3
62224: PPUSH
62225: CALL_OW 1
62229: ST_TO_ADDR
// end ; end ;
62230: GO 62059
62232: POP
62233: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62234: LD_VAR 0 1
62238: PPUSH
62239: LD_EXP 54
62243: PUSH
62244: LD_VAR 0 4
62248: ARRAY
62249: PUSH
62250: LD_INT 0
62252: PLUS
62253: PPUSH
62254: CALL_OW 505
// end ;
62258: LD_VAR 0 2
62262: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62263: LD_INT 0
62265: PPUSH
62266: PPUSH
62267: PPUSH
62268: PPUSH
// if not hack in hackTanks then
62269: LD_VAR 0 1
62273: PUSH
62274: LD_EXP 53
62278: IN
62279: NOT
62280: IFFALSE 62284
// exit ;
62282: GO 62369
// index := GetElementIndex ( hackTanks , hack ) ;
62284: LD_ADDR_VAR 0 5
62288: PUSH
62289: LD_EXP 53
62293: PPUSH
62294: LD_VAR 0 1
62298: PPUSH
62299: CALL 21462 0 2
62303: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62304: LD_ADDR_VAR 0 4
62308: PUSH
62309: DOUBLE
62310: LD_INT 1
62312: DEC
62313: ST_TO_ADDR
62314: LD_EXP 54
62318: PUSH
62319: LD_VAR 0 5
62323: ARRAY
62324: PUSH
62325: FOR_TO
62326: IFFALSE 62367
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62328: LD_EXP 54
62332: PUSH
62333: LD_VAR 0 5
62337: ARRAY
62338: PUSH
62339: LD_VAR 0 4
62343: ARRAY
62344: PUSH
62345: LD_INT 1
62347: ARRAY
62348: PUSH
62349: LD_VAR 0 2
62353: EQUAL
62354: IFFALSE 62365
// KillUnit ( vehicle ) ;
62356: LD_VAR 0 2
62360: PPUSH
62361: CALL_OW 66
62365: GO 62325
62367: POP
62368: POP
// end ;
62369: LD_VAR 0 3
62373: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62374: LD_EXP 58
62378: NOT
62379: IFFALSE 62414
62381: GO 62383
62383: DISABLE
// begin initMiner := true ;
62384: LD_ADDR_EXP 58
62388: PUSH
62389: LD_INT 1
62391: ST_TO_ADDR
// minersList := [ ] ;
62392: LD_ADDR_EXP 59
62396: PUSH
62397: EMPTY
62398: ST_TO_ADDR
// minerMinesList := [ ] ;
62399: LD_ADDR_EXP 60
62403: PUSH
62404: EMPTY
62405: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62406: LD_ADDR_EXP 61
62410: PUSH
62411: LD_INT 5
62413: ST_TO_ADDR
// end ;
62414: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62415: LD_EXP 58
62419: PUSH
62420: LD_INT 34
62422: PUSH
62423: LD_INT 81
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PPUSH
62430: CALL_OW 69
62434: AND
62435: IFFALSE 62896
62437: GO 62439
62439: DISABLE
62440: LD_INT 0
62442: PPUSH
62443: PPUSH
62444: PPUSH
62445: PPUSH
// begin enable ;
62446: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62447: LD_ADDR_VAR 0 1
62451: PUSH
62452: LD_INT 34
62454: PUSH
62455: LD_INT 81
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PPUSH
62462: CALL_OW 69
62466: PUSH
62467: FOR_IN
62468: IFFALSE 62540
// begin if not i in minersList then
62470: LD_VAR 0 1
62474: PUSH
62475: LD_EXP 59
62479: IN
62480: NOT
62481: IFFALSE 62538
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62483: LD_ADDR_EXP 59
62487: PUSH
62488: LD_EXP 59
62492: PPUSH
62493: LD_EXP 59
62497: PUSH
62498: LD_INT 1
62500: PLUS
62501: PPUSH
62502: LD_VAR 0 1
62506: PPUSH
62507: CALL_OW 1
62511: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62512: LD_ADDR_EXP 60
62516: PUSH
62517: LD_EXP 60
62521: PPUSH
62522: LD_EXP 60
62526: PUSH
62527: LD_INT 1
62529: PLUS
62530: PPUSH
62531: EMPTY
62532: PPUSH
62533: CALL_OW 1
62537: ST_TO_ADDR
// end end ;
62538: GO 62467
62540: POP
62541: POP
// for i := minerMinesList downto 1 do
62542: LD_ADDR_VAR 0 1
62546: PUSH
62547: DOUBLE
62548: LD_EXP 60
62552: INC
62553: ST_TO_ADDR
62554: LD_INT 1
62556: PUSH
62557: FOR_DOWNTO
62558: IFFALSE 62894
// begin if IsLive ( minersList [ i ] ) then
62560: LD_EXP 59
62564: PUSH
62565: LD_VAR 0 1
62569: ARRAY
62570: PPUSH
62571: CALL_OW 300
62575: IFFALSE 62603
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62577: LD_EXP 59
62581: PUSH
62582: LD_VAR 0 1
62586: ARRAY
62587: PPUSH
62588: LD_EXP 60
62592: PUSH
62593: LD_VAR 0 1
62597: ARRAY
62598: PPUSH
62599: CALL_OW 505
// if not minerMinesList [ i ] then
62603: LD_EXP 60
62607: PUSH
62608: LD_VAR 0 1
62612: ARRAY
62613: NOT
62614: IFFALSE 62618
// continue ;
62616: GO 62557
// for j := minerMinesList [ i ] downto 1 do
62618: LD_ADDR_VAR 0 2
62622: PUSH
62623: DOUBLE
62624: LD_EXP 60
62628: PUSH
62629: LD_VAR 0 1
62633: ARRAY
62634: INC
62635: ST_TO_ADDR
62636: LD_INT 1
62638: PUSH
62639: FOR_DOWNTO
62640: IFFALSE 62890
// begin side := GetSide ( minersList [ i ] ) ;
62642: LD_ADDR_VAR 0 3
62646: PUSH
62647: LD_EXP 59
62651: PUSH
62652: LD_VAR 0 1
62656: ARRAY
62657: PPUSH
62658: CALL_OW 255
62662: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62663: LD_ADDR_VAR 0 4
62667: PUSH
62668: LD_EXP 60
62672: PUSH
62673: LD_VAR 0 1
62677: ARRAY
62678: PUSH
62679: LD_VAR 0 2
62683: ARRAY
62684: PUSH
62685: LD_INT 1
62687: ARRAY
62688: PPUSH
62689: LD_EXP 60
62693: PUSH
62694: LD_VAR 0 1
62698: ARRAY
62699: PUSH
62700: LD_VAR 0 2
62704: ARRAY
62705: PUSH
62706: LD_INT 2
62708: ARRAY
62709: PPUSH
62710: CALL_OW 428
62714: ST_TO_ADDR
// if not tmp then
62715: LD_VAR 0 4
62719: NOT
62720: IFFALSE 62724
// continue ;
62722: GO 62639
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
62724: LD_VAR 0 4
62728: PUSH
62729: LD_INT 81
62731: PUSH
62732: LD_VAR 0 3
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PPUSH
62741: CALL_OW 69
62745: IN
62746: PUSH
62747: LD_EXP 60
62751: PUSH
62752: LD_VAR 0 1
62756: ARRAY
62757: PUSH
62758: LD_VAR 0 2
62762: ARRAY
62763: PUSH
62764: LD_INT 1
62766: ARRAY
62767: PPUSH
62768: LD_EXP 60
62772: PUSH
62773: LD_VAR 0 1
62777: ARRAY
62778: PUSH
62779: LD_VAR 0 2
62783: ARRAY
62784: PUSH
62785: LD_INT 2
62787: ARRAY
62788: PPUSH
62789: CALL_OW 458
62793: AND
62794: IFFALSE 62888
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62796: LD_EXP 60
62800: PUSH
62801: LD_VAR 0 1
62805: ARRAY
62806: PUSH
62807: LD_VAR 0 2
62811: ARRAY
62812: PUSH
62813: LD_INT 1
62815: ARRAY
62816: PPUSH
62817: LD_EXP 60
62821: PUSH
62822: LD_VAR 0 1
62826: ARRAY
62827: PUSH
62828: LD_VAR 0 2
62832: ARRAY
62833: PUSH
62834: LD_INT 2
62836: ARRAY
62837: PPUSH
62838: LD_VAR 0 3
62842: PPUSH
62843: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62847: LD_ADDR_EXP 60
62851: PUSH
62852: LD_EXP 60
62856: PPUSH
62857: LD_VAR 0 1
62861: PPUSH
62862: LD_EXP 60
62866: PUSH
62867: LD_VAR 0 1
62871: ARRAY
62872: PPUSH
62873: LD_VAR 0 2
62877: PPUSH
62878: CALL_OW 3
62882: PPUSH
62883: CALL_OW 1
62887: ST_TO_ADDR
// end ; end ;
62888: GO 62639
62890: POP
62891: POP
// end ;
62892: GO 62557
62894: POP
62895: POP
// end ;
62896: PPOPN 4
62898: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62899: LD_INT 0
62901: PPUSH
62902: PPUSH
// result := false ;
62903: LD_ADDR_VAR 0 4
62907: PUSH
62908: LD_INT 0
62910: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62911: LD_VAR 0 1
62915: PPUSH
62916: CALL_OW 264
62920: PUSH
62921: LD_INT 81
62923: EQUAL
62924: NOT
62925: IFFALSE 62929
// exit ;
62927: GO 63169
// index := GetElementIndex ( minersList , unit ) ;
62929: LD_ADDR_VAR 0 5
62933: PUSH
62934: LD_EXP 59
62938: PPUSH
62939: LD_VAR 0 1
62943: PPUSH
62944: CALL 21462 0 2
62948: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62949: LD_EXP 60
62953: PUSH
62954: LD_VAR 0 5
62958: ARRAY
62959: PUSH
62960: LD_EXP 61
62964: GREATEREQUAL
62965: IFFALSE 62969
// exit ;
62967: GO 63169
// ComMoveXY ( unit , x , y ) ;
62969: LD_VAR 0 1
62973: PPUSH
62974: LD_VAR 0 2
62978: PPUSH
62979: LD_VAR 0 3
62983: PPUSH
62984: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62988: LD_INT 35
62990: PPUSH
62991: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62995: LD_VAR 0 1
62999: PPUSH
63000: LD_VAR 0 2
63004: PPUSH
63005: LD_VAR 0 3
63009: PPUSH
63010: CALL 53203 0 3
63014: NOT
63015: PUSH
63016: LD_VAR 0 1
63020: PPUSH
63021: CALL_OW 314
63025: AND
63026: IFFALSE 63030
// exit ;
63028: GO 63169
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63030: LD_VAR 0 2
63034: PPUSH
63035: LD_VAR 0 3
63039: PPUSH
63040: CALL_OW 428
63044: PUSH
63045: LD_VAR 0 1
63049: EQUAL
63050: PUSH
63051: LD_VAR 0 1
63055: PPUSH
63056: CALL_OW 314
63060: NOT
63061: AND
63062: IFFALSE 62988
// PlaySoundXY ( x , y , PlantMine ) ;
63064: LD_VAR 0 2
63068: PPUSH
63069: LD_VAR 0 3
63073: PPUSH
63074: LD_STRING PlantMine
63076: PPUSH
63077: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63081: LD_VAR 0 2
63085: PPUSH
63086: LD_VAR 0 3
63090: PPUSH
63091: LD_VAR 0 1
63095: PPUSH
63096: CALL_OW 255
63100: PPUSH
63101: LD_INT 0
63103: PPUSH
63104: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63108: LD_ADDR_EXP 60
63112: PUSH
63113: LD_EXP 60
63117: PPUSH
63118: LD_VAR 0 5
63122: PUSH
63123: LD_EXP 60
63127: PUSH
63128: LD_VAR 0 5
63132: ARRAY
63133: PUSH
63134: LD_INT 1
63136: PLUS
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PPUSH
63142: LD_VAR 0 2
63146: PUSH
63147: LD_VAR 0 3
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PPUSH
63156: CALL 21677 0 3
63160: ST_TO_ADDR
// result := true ;
63161: LD_ADDR_VAR 0 4
63165: PUSH
63166: LD_INT 1
63168: ST_TO_ADDR
// end ;
63169: LD_VAR 0 4
63173: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63174: LD_INT 0
63176: PPUSH
63177: PPUSH
63178: PPUSH
// if not unit in minersList then
63179: LD_VAR 0 1
63183: PUSH
63184: LD_EXP 59
63188: IN
63189: NOT
63190: IFFALSE 63194
// exit ;
63192: GO 63586
// index := GetElementIndex ( minersList , unit ) ;
63194: LD_ADDR_VAR 0 6
63198: PUSH
63199: LD_EXP 59
63203: PPUSH
63204: LD_VAR 0 1
63208: PPUSH
63209: CALL 21462 0 2
63213: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63214: LD_ADDR_VAR 0 5
63218: PUSH
63219: DOUBLE
63220: LD_EXP 60
63224: PUSH
63225: LD_VAR 0 6
63229: ARRAY
63230: INC
63231: ST_TO_ADDR
63232: LD_INT 1
63234: PUSH
63235: FOR_DOWNTO
63236: IFFALSE 63397
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63238: LD_EXP 60
63242: PUSH
63243: LD_VAR 0 6
63247: ARRAY
63248: PUSH
63249: LD_VAR 0 5
63253: ARRAY
63254: PUSH
63255: LD_INT 1
63257: ARRAY
63258: PUSH
63259: LD_VAR 0 2
63263: EQUAL
63264: PUSH
63265: LD_EXP 60
63269: PUSH
63270: LD_VAR 0 6
63274: ARRAY
63275: PUSH
63276: LD_VAR 0 5
63280: ARRAY
63281: PUSH
63282: LD_INT 2
63284: ARRAY
63285: PUSH
63286: LD_VAR 0 3
63290: EQUAL
63291: AND
63292: IFFALSE 63395
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63294: LD_EXP 60
63298: PUSH
63299: LD_VAR 0 6
63303: ARRAY
63304: PUSH
63305: LD_VAR 0 5
63309: ARRAY
63310: PUSH
63311: LD_INT 1
63313: ARRAY
63314: PPUSH
63315: LD_EXP 60
63319: PUSH
63320: LD_VAR 0 6
63324: ARRAY
63325: PUSH
63326: LD_VAR 0 5
63330: ARRAY
63331: PUSH
63332: LD_INT 2
63334: ARRAY
63335: PPUSH
63336: LD_VAR 0 1
63340: PPUSH
63341: CALL_OW 255
63345: PPUSH
63346: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63350: LD_ADDR_EXP 60
63354: PUSH
63355: LD_EXP 60
63359: PPUSH
63360: LD_VAR 0 6
63364: PPUSH
63365: LD_EXP 60
63369: PUSH
63370: LD_VAR 0 6
63374: ARRAY
63375: PPUSH
63376: LD_VAR 0 5
63380: PPUSH
63381: CALL_OW 3
63385: PPUSH
63386: CALL_OW 1
63390: ST_TO_ADDR
// exit ;
63391: POP
63392: POP
63393: GO 63586
// end ; end ;
63395: GO 63235
63397: POP
63398: POP
// for i := minerMinesList [ index ] downto 1 do
63399: LD_ADDR_VAR 0 5
63403: PUSH
63404: DOUBLE
63405: LD_EXP 60
63409: PUSH
63410: LD_VAR 0 6
63414: ARRAY
63415: INC
63416: ST_TO_ADDR
63417: LD_INT 1
63419: PUSH
63420: FOR_DOWNTO
63421: IFFALSE 63584
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63423: LD_EXP 60
63427: PUSH
63428: LD_VAR 0 6
63432: ARRAY
63433: PUSH
63434: LD_VAR 0 5
63438: ARRAY
63439: PUSH
63440: LD_INT 1
63442: ARRAY
63443: PPUSH
63444: LD_EXP 60
63448: PUSH
63449: LD_VAR 0 6
63453: ARRAY
63454: PUSH
63455: LD_VAR 0 5
63459: ARRAY
63460: PUSH
63461: LD_INT 2
63463: ARRAY
63464: PPUSH
63465: LD_VAR 0 2
63469: PPUSH
63470: LD_VAR 0 3
63474: PPUSH
63475: CALL_OW 298
63479: PUSH
63480: LD_INT 6
63482: LESS
63483: IFFALSE 63582
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63485: LD_EXP 60
63489: PUSH
63490: LD_VAR 0 6
63494: ARRAY
63495: PUSH
63496: LD_VAR 0 5
63500: ARRAY
63501: PUSH
63502: LD_INT 1
63504: ARRAY
63505: PPUSH
63506: LD_EXP 60
63510: PUSH
63511: LD_VAR 0 6
63515: ARRAY
63516: PUSH
63517: LD_VAR 0 5
63521: ARRAY
63522: PUSH
63523: LD_INT 2
63525: ARRAY
63526: PPUSH
63527: LD_VAR 0 1
63531: PPUSH
63532: CALL_OW 255
63536: PPUSH
63537: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63541: LD_ADDR_EXP 60
63545: PUSH
63546: LD_EXP 60
63550: PPUSH
63551: LD_VAR 0 6
63555: PPUSH
63556: LD_EXP 60
63560: PUSH
63561: LD_VAR 0 6
63565: ARRAY
63566: PPUSH
63567: LD_VAR 0 5
63571: PPUSH
63572: CALL_OW 3
63576: PPUSH
63577: CALL_OW 1
63581: ST_TO_ADDR
// end ; end ;
63582: GO 63420
63584: POP
63585: POP
// end ;
63586: LD_VAR 0 4
63590: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63591: LD_INT 0
63593: PPUSH
63594: PPUSH
63595: PPUSH
63596: PPUSH
63597: PPUSH
63598: PPUSH
63599: PPUSH
63600: PPUSH
63601: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63602: LD_VAR 0 1
63606: PPUSH
63607: CALL_OW 264
63611: PUSH
63612: LD_INT 81
63614: EQUAL
63615: NOT
63616: PUSH
63617: LD_VAR 0 1
63621: PUSH
63622: LD_EXP 59
63626: IN
63627: NOT
63628: OR
63629: IFFALSE 63633
// exit ;
63631: GO 63955
// index := GetElementIndex ( minersList , unit ) ;
63633: LD_ADDR_VAR 0 6
63637: PUSH
63638: LD_EXP 59
63642: PPUSH
63643: LD_VAR 0 1
63647: PPUSH
63648: CALL 21462 0 2
63652: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
63653: LD_ADDR_VAR 0 8
63657: PUSH
63658: LD_EXP 61
63662: PUSH
63663: LD_EXP 60
63667: PUSH
63668: LD_VAR 0 6
63672: ARRAY
63673: MINUS
63674: ST_TO_ADDR
// if not minesFreeAmount then
63675: LD_VAR 0 8
63679: NOT
63680: IFFALSE 63684
// exit ;
63682: GO 63955
// tmp := [ ] ;
63684: LD_ADDR_VAR 0 7
63688: PUSH
63689: EMPTY
63690: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
63691: LD_ADDR_VAR 0 5
63695: PUSH
63696: DOUBLE
63697: LD_INT 1
63699: DEC
63700: ST_TO_ADDR
63701: LD_VAR 0 8
63705: PUSH
63706: FOR_TO
63707: IFFALSE 63902
// begin _d := rand ( 0 , 5 ) ;
63709: LD_ADDR_VAR 0 11
63713: PUSH
63714: LD_INT 0
63716: PPUSH
63717: LD_INT 5
63719: PPUSH
63720: CALL_OW 12
63724: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
63725: LD_ADDR_VAR 0 12
63729: PUSH
63730: LD_INT 2
63732: PPUSH
63733: LD_INT 6
63735: PPUSH
63736: CALL_OW 12
63740: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
63741: LD_ADDR_VAR 0 9
63745: PUSH
63746: LD_VAR 0 2
63750: PPUSH
63751: LD_VAR 0 11
63755: PPUSH
63756: LD_VAR 0 12
63760: PPUSH
63761: CALL_OW 272
63765: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
63766: LD_ADDR_VAR 0 10
63770: PUSH
63771: LD_VAR 0 3
63775: PPUSH
63776: LD_VAR 0 11
63780: PPUSH
63781: LD_VAR 0 12
63785: PPUSH
63786: CALL_OW 273
63790: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
63791: LD_VAR 0 9
63795: PPUSH
63796: LD_VAR 0 10
63800: PPUSH
63801: CALL_OW 488
63805: PUSH
63806: LD_VAR 0 9
63810: PUSH
63811: LD_VAR 0 10
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_VAR 0 7
63824: IN
63825: NOT
63826: AND
63827: PUSH
63828: LD_VAR 0 9
63832: PPUSH
63833: LD_VAR 0 10
63837: PPUSH
63838: CALL_OW 458
63842: NOT
63843: AND
63844: IFFALSE 63886
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63846: LD_ADDR_VAR 0 7
63850: PUSH
63851: LD_VAR 0 7
63855: PPUSH
63856: LD_VAR 0 7
63860: PUSH
63861: LD_INT 1
63863: PLUS
63864: PPUSH
63865: LD_VAR 0 9
63869: PUSH
63870: LD_VAR 0 10
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PPUSH
63879: CALL_OW 1
63883: ST_TO_ADDR
63884: GO 63900
// i := i - 1 ;
63886: LD_ADDR_VAR 0 5
63890: PUSH
63891: LD_VAR 0 5
63895: PUSH
63896: LD_INT 1
63898: MINUS
63899: ST_TO_ADDR
// end ;
63900: GO 63706
63902: POP
63903: POP
// for i in tmp do
63904: LD_ADDR_VAR 0 5
63908: PUSH
63909: LD_VAR 0 7
63913: PUSH
63914: FOR_IN
63915: IFFALSE 63953
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63917: LD_VAR 0 1
63921: PPUSH
63922: LD_VAR 0 5
63926: PUSH
63927: LD_INT 1
63929: ARRAY
63930: PPUSH
63931: LD_VAR 0 5
63935: PUSH
63936: LD_INT 2
63938: ARRAY
63939: PPUSH
63940: CALL 62899 0 3
63944: NOT
63945: IFFALSE 63951
// exit ;
63947: POP
63948: POP
63949: GO 63955
63951: GO 63914
63953: POP
63954: POP
// end ;
63955: LD_VAR 0 4
63959: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
63960: LD_INT 0
63962: PPUSH
63963: PPUSH
63964: PPUSH
63965: PPUSH
63966: PPUSH
63967: PPUSH
63968: PPUSH
// if not GetClass ( unit ) = class_sniper then
63969: LD_VAR 0 1
63973: PPUSH
63974: CALL_OW 257
63978: PUSH
63979: LD_INT 5
63981: EQUAL
63982: NOT
63983: IFFALSE 63987
// exit ;
63985: GO 64375
// dist := 8 ;
63987: LD_ADDR_VAR 0 5
63991: PUSH
63992: LD_INT 8
63994: ST_TO_ADDR
// viewRange := 12 ;
63995: LD_ADDR_VAR 0 7
63999: PUSH
64000: LD_INT 12
64002: ST_TO_ADDR
// side := GetSide ( unit ) ;
64003: LD_ADDR_VAR 0 6
64007: PUSH
64008: LD_VAR 0 1
64012: PPUSH
64013: CALL_OW 255
64017: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64018: LD_INT 61
64020: PPUSH
64021: LD_VAR 0 6
64025: PPUSH
64026: CALL_OW 321
64030: PUSH
64031: LD_INT 2
64033: EQUAL
64034: IFFALSE 64044
// viewRange := 16 ;
64036: LD_ADDR_VAR 0 7
64040: PUSH
64041: LD_INT 16
64043: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64044: LD_VAR 0 1
64048: PPUSH
64049: LD_VAR 0 2
64053: PPUSH
64054: LD_VAR 0 3
64058: PPUSH
64059: CALL_OW 297
64063: PUSH
64064: LD_VAR 0 5
64068: GREATER
64069: IFFALSE 64148
// begin ComMoveXY ( unit , x , y ) ;
64071: LD_VAR 0 1
64075: PPUSH
64076: LD_VAR 0 2
64080: PPUSH
64081: LD_VAR 0 3
64085: PPUSH
64086: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64090: LD_INT 35
64092: PPUSH
64093: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64097: LD_VAR 0 1
64101: PPUSH
64102: LD_VAR 0 2
64106: PPUSH
64107: LD_VAR 0 3
64111: PPUSH
64112: CALL 53203 0 3
64116: NOT
64117: IFFALSE 64121
// exit ;
64119: GO 64375
// until GetDistUnitXY ( unit , x , y ) < dist ;
64121: LD_VAR 0 1
64125: PPUSH
64126: LD_VAR 0 2
64130: PPUSH
64131: LD_VAR 0 3
64135: PPUSH
64136: CALL_OW 297
64140: PUSH
64141: LD_VAR 0 5
64145: LESS
64146: IFFALSE 64090
// end ; ComTurnXY ( unit , x , y ) ;
64148: LD_VAR 0 1
64152: PPUSH
64153: LD_VAR 0 2
64157: PPUSH
64158: LD_VAR 0 3
64162: PPUSH
64163: CALL_OW 118
// wait ( 5 ) ;
64167: LD_INT 5
64169: PPUSH
64170: CALL_OW 67
// _d := GetDir ( unit ) ;
64174: LD_ADDR_VAR 0 10
64178: PUSH
64179: LD_VAR 0 1
64183: PPUSH
64184: CALL_OW 254
64188: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
64189: LD_ADDR_VAR 0 8
64193: PUSH
64194: LD_VAR 0 1
64198: PPUSH
64199: CALL_OW 250
64203: PPUSH
64204: LD_VAR 0 10
64208: PPUSH
64209: LD_VAR 0 5
64213: PPUSH
64214: CALL_OW 272
64218: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
64219: LD_ADDR_VAR 0 9
64223: PUSH
64224: LD_VAR 0 1
64228: PPUSH
64229: CALL_OW 251
64233: PPUSH
64234: LD_VAR 0 10
64238: PPUSH
64239: LD_VAR 0 5
64243: PPUSH
64244: CALL_OW 273
64248: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64249: LD_VAR 0 8
64253: PPUSH
64254: LD_VAR 0 9
64258: PPUSH
64259: CALL_OW 488
64263: NOT
64264: IFFALSE 64268
// exit ;
64266: GO 64375
// ComAnimCustom ( unit , 1 ) ;
64268: LD_VAR 0 1
64272: PPUSH
64273: LD_INT 1
64275: PPUSH
64276: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64280: LD_VAR 0 8
64284: PPUSH
64285: LD_VAR 0 9
64289: PPUSH
64290: LD_VAR 0 6
64294: PPUSH
64295: LD_VAR 0 7
64299: PPUSH
64300: CALL_OW 330
// repeat wait ( 1 ) ;
64304: LD_INT 1
64306: PPUSH
64307: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
64311: LD_VAR 0 1
64315: PPUSH
64316: CALL_OW 316
64320: PUSH
64321: LD_VAR 0 1
64325: PPUSH
64326: CALL_OW 314
64330: OR
64331: PUSH
64332: LD_VAR 0 1
64336: PPUSH
64337: CALL_OW 302
64341: NOT
64342: OR
64343: PUSH
64344: LD_VAR 0 1
64348: PPUSH
64349: CALL_OW 301
64353: OR
64354: IFFALSE 64304
// RemoveSeeing ( _x , _y , side ) ;
64356: LD_VAR 0 8
64360: PPUSH
64361: LD_VAR 0 9
64365: PPUSH
64366: LD_VAR 0 6
64370: PPUSH
64371: CALL_OW 331
// end ; end_of_file
64375: LD_VAR 0 4
64379: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64380: LD_VAR 0 1
64384: PUSH
64385: LD_INT 200
64387: DOUBLE
64388: GREATEREQUAL
64389: IFFALSE 64397
64391: LD_INT 299
64393: DOUBLE
64394: LESSEQUAL
64395: IFTRUE 64399
64397: GO 64431
64399: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64400: LD_VAR 0 1
64404: PPUSH
64405: LD_VAR 0 2
64409: PPUSH
64410: LD_VAR 0 3
64414: PPUSH
64415: LD_VAR 0 4
64419: PPUSH
64420: LD_VAR 0 5
64424: PPUSH
64425: CALL 59862 0 5
64429: GO 64508
64431: LD_INT 300
64433: DOUBLE
64434: GREATEREQUAL
64435: IFFALSE 64443
64437: LD_INT 399
64439: DOUBLE
64440: LESSEQUAL
64441: IFTRUE 64445
64443: GO 64507
64445: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64446: LD_VAR 0 1
64450: PPUSH
64451: LD_VAR 0 2
64455: PPUSH
64456: LD_VAR 0 3
64460: PPUSH
64461: LD_VAR 0 4
64465: PPUSH
64466: LD_VAR 0 5
64470: PPUSH
64471: LD_VAR 0 6
64475: PPUSH
64476: LD_VAR 0 7
64480: PPUSH
64481: LD_VAR 0 8
64485: PPUSH
64486: LD_VAR 0 9
64490: PPUSH
64491: LD_VAR 0 10
64495: PPUSH
64496: LD_VAR 0 11
64500: PPUSH
64501: CALL 77063 0 11
64505: GO 64508
64507: POP
// end ;
64508: PPOPN 11
64510: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64511: LD_VAR 0 1
64515: PPUSH
64516: LD_VAR 0 2
64520: PPUSH
64521: LD_VAR 0 3
64525: PPUSH
64526: LD_VAR 0 4
64530: PPUSH
64531: LD_VAR 0 5
64535: PPUSH
64536: CALL 59598 0 5
// end ; end_of_file
64540: PPOPN 5
64542: END
// export globalGameSaveCounter ; every 0 0$1 do
64543: GO 64545
64545: DISABLE
// begin enable ;
64546: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64547: LD_STRING updateTimer(
64549: PUSH
64550: LD_OWVAR 1
64554: STR
64555: PUSH
64556: LD_STRING );
64558: STR
64559: PPUSH
64560: CALL_OW 559
// end ;
64564: END
// every 0 0$1 do
64565: GO 64567
64567: DISABLE
// begin globalGameSaveCounter := 0 ;
64568: LD_ADDR_EXP 62
64572: PUSH
64573: LD_INT 0
64575: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
64576: LD_STRING setGameSaveCounter(0)
64578: PPUSH
64579: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
64583: LD_STRING initStreamRollete();
64585: PPUSH
64586: CALL_OW 559
// InitStreamMode ;
64590: CALL 65933 0 0
// DefineStreamItems ( false ) ;
64594: LD_INT 0
64596: PPUSH
64597: CALL 66397 0 1
// end ;
64601: END
// export function SOS_MapStart ( ) ; begin
64602: LD_INT 0
64604: PPUSH
// if streamModeActive then
64605: LD_EXP 63
64609: IFFALSE 64618
// DefineStreamItems ( true ) ;
64611: LD_INT 1
64613: PPUSH
64614: CALL 66397 0 1
// UpdateLuaVariables ( ) ;
64618: CALL 64635 0 0
// UpdateFactoryWaypoints ( ) ;
64622: CALL 79266 0 0
// UpdateWarehouseGatheringPoints ( ) ;
64626: CALL 79523 0 0
// end ;
64630: LD_VAR 0 1
64634: RET
// function UpdateLuaVariables ( ) ; begin
64635: LD_INT 0
64637: PPUSH
// if globalGameSaveCounter then
64638: LD_EXP 62
64642: IFFALSE 64676
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
64644: LD_ADDR_EXP 62
64648: PUSH
64649: LD_EXP 62
64653: PPUSH
64654: CALL 55767 0 1
64658: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
64659: LD_STRING setGameSaveCounter(
64661: PUSH
64662: LD_EXP 62
64666: STR
64667: PUSH
64668: LD_STRING )
64670: STR
64671: PPUSH
64672: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64676: LD_STRING setGameDifficulty(
64678: PUSH
64679: LD_OWVAR 67
64683: STR
64684: PUSH
64685: LD_STRING )
64687: STR
64688: PPUSH
64689: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
64693: LD_STRING displayDifficulty(
64695: PUSH
64696: LD_OWVAR 67
64700: STR
64701: PUSH
64702: LD_STRING )
64704: STR
64705: PPUSH
64706: CALL_OW 559
// end ;
64710: LD_VAR 0 1
64714: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64715: LD_INT 0
64717: PPUSH
// if p2 = stream_mode then
64718: LD_VAR 0 2
64722: PUSH
64723: LD_INT 100
64725: EQUAL
64726: IFFALSE 65729
// begin if not StreamModeActive then
64728: LD_EXP 63
64732: NOT
64733: IFFALSE 64743
// StreamModeActive := true ;
64735: LD_ADDR_EXP 63
64739: PUSH
64740: LD_INT 1
64742: ST_TO_ADDR
// if p3 = 0 then
64743: LD_VAR 0 3
64747: PUSH
64748: LD_INT 0
64750: EQUAL
64751: IFFALSE 64757
// InitStreamMode ;
64753: CALL 65933 0 0
// if p3 = 1 then
64757: LD_VAR 0 3
64761: PUSH
64762: LD_INT 1
64764: EQUAL
64765: IFFALSE 64775
// sRocket := true ;
64767: LD_ADDR_EXP 68
64771: PUSH
64772: LD_INT 1
64774: ST_TO_ADDR
// if p3 = 2 then
64775: LD_VAR 0 3
64779: PUSH
64780: LD_INT 2
64782: EQUAL
64783: IFFALSE 64793
// sSpeed := true ;
64785: LD_ADDR_EXP 67
64789: PUSH
64790: LD_INT 1
64792: ST_TO_ADDR
// if p3 = 3 then
64793: LD_VAR 0 3
64797: PUSH
64798: LD_INT 3
64800: EQUAL
64801: IFFALSE 64811
// sEngine := true ;
64803: LD_ADDR_EXP 69
64807: PUSH
64808: LD_INT 1
64810: ST_TO_ADDR
// if p3 = 4 then
64811: LD_VAR 0 3
64815: PUSH
64816: LD_INT 4
64818: EQUAL
64819: IFFALSE 64829
// sSpec := true ;
64821: LD_ADDR_EXP 66
64825: PUSH
64826: LD_INT 1
64828: ST_TO_ADDR
// if p3 = 5 then
64829: LD_VAR 0 3
64833: PUSH
64834: LD_INT 5
64836: EQUAL
64837: IFFALSE 64847
// sLevel := true ;
64839: LD_ADDR_EXP 70
64843: PUSH
64844: LD_INT 1
64846: ST_TO_ADDR
// if p3 = 6 then
64847: LD_VAR 0 3
64851: PUSH
64852: LD_INT 6
64854: EQUAL
64855: IFFALSE 64865
// sArmoury := true ;
64857: LD_ADDR_EXP 71
64861: PUSH
64862: LD_INT 1
64864: ST_TO_ADDR
// if p3 = 7 then
64865: LD_VAR 0 3
64869: PUSH
64870: LD_INT 7
64872: EQUAL
64873: IFFALSE 64883
// sRadar := true ;
64875: LD_ADDR_EXP 72
64879: PUSH
64880: LD_INT 1
64882: ST_TO_ADDR
// if p3 = 8 then
64883: LD_VAR 0 3
64887: PUSH
64888: LD_INT 8
64890: EQUAL
64891: IFFALSE 64901
// sBunker := true ;
64893: LD_ADDR_EXP 73
64897: PUSH
64898: LD_INT 1
64900: ST_TO_ADDR
// if p3 = 9 then
64901: LD_VAR 0 3
64905: PUSH
64906: LD_INT 9
64908: EQUAL
64909: IFFALSE 64919
// sHack := true ;
64911: LD_ADDR_EXP 74
64915: PUSH
64916: LD_INT 1
64918: ST_TO_ADDR
// if p3 = 10 then
64919: LD_VAR 0 3
64923: PUSH
64924: LD_INT 10
64926: EQUAL
64927: IFFALSE 64937
// sFire := true ;
64929: LD_ADDR_EXP 75
64933: PUSH
64934: LD_INT 1
64936: ST_TO_ADDR
// if p3 = 11 then
64937: LD_VAR 0 3
64941: PUSH
64942: LD_INT 11
64944: EQUAL
64945: IFFALSE 64955
// sRefresh := true ;
64947: LD_ADDR_EXP 76
64951: PUSH
64952: LD_INT 1
64954: ST_TO_ADDR
// if p3 = 12 then
64955: LD_VAR 0 3
64959: PUSH
64960: LD_INT 12
64962: EQUAL
64963: IFFALSE 64973
// sExp := true ;
64965: LD_ADDR_EXP 77
64969: PUSH
64970: LD_INT 1
64972: ST_TO_ADDR
// if p3 = 13 then
64973: LD_VAR 0 3
64977: PUSH
64978: LD_INT 13
64980: EQUAL
64981: IFFALSE 64991
// sDepot := true ;
64983: LD_ADDR_EXP 78
64987: PUSH
64988: LD_INT 1
64990: ST_TO_ADDR
// if p3 = 14 then
64991: LD_VAR 0 3
64995: PUSH
64996: LD_INT 14
64998: EQUAL
64999: IFFALSE 65009
// sFlag := true ;
65001: LD_ADDR_EXP 79
65005: PUSH
65006: LD_INT 1
65008: ST_TO_ADDR
// if p3 = 15 then
65009: LD_VAR 0 3
65013: PUSH
65014: LD_INT 15
65016: EQUAL
65017: IFFALSE 65027
// sKamikadze := true ;
65019: LD_ADDR_EXP 87
65023: PUSH
65024: LD_INT 1
65026: ST_TO_ADDR
// if p3 = 16 then
65027: LD_VAR 0 3
65031: PUSH
65032: LD_INT 16
65034: EQUAL
65035: IFFALSE 65045
// sTroll := true ;
65037: LD_ADDR_EXP 88
65041: PUSH
65042: LD_INT 1
65044: ST_TO_ADDR
// if p3 = 17 then
65045: LD_VAR 0 3
65049: PUSH
65050: LD_INT 17
65052: EQUAL
65053: IFFALSE 65063
// sSlow := true ;
65055: LD_ADDR_EXP 89
65059: PUSH
65060: LD_INT 1
65062: ST_TO_ADDR
// if p3 = 18 then
65063: LD_VAR 0 3
65067: PUSH
65068: LD_INT 18
65070: EQUAL
65071: IFFALSE 65081
// sLack := true ;
65073: LD_ADDR_EXP 90
65077: PUSH
65078: LD_INT 1
65080: ST_TO_ADDR
// if p3 = 19 then
65081: LD_VAR 0 3
65085: PUSH
65086: LD_INT 19
65088: EQUAL
65089: IFFALSE 65099
// sTank := true ;
65091: LD_ADDR_EXP 92
65095: PUSH
65096: LD_INT 1
65098: ST_TO_ADDR
// if p3 = 20 then
65099: LD_VAR 0 3
65103: PUSH
65104: LD_INT 20
65106: EQUAL
65107: IFFALSE 65117
// sRemote := true ;
65109: LD_ADDR_EXP 93
65113: PUSH
65114: LD_INT 1
65116: ST_TO_ADDR
// if p3 = 21 then
65117: LD_VAR 0 3
65121: PUSH
65122: LD_INT 21
65124: EQUAL
65125: IFFALSE 65135
// sPowell := true ;
65127: LD_ADDR_EXP 94
65131: PUSH
65132: LD_INT 1
65134: ST_TO_ADDR
// if p3 = 22 then
65135: LD_VAR 0 3
65139: PUSH
65140: LD_INT 22
65142: EQUAL
65143: IFFALSE 65153
// sTeleport := true ;
65145: LD_ADDR_EXP 97
65149: PUSH
65150: LD_INT 1
65152: ST_TO_ADDR
// if p3 = 23 then
65153: LD_VAR 0 3
65157: PUSH
65158: LD_INT 23
65160: EQUAL
65161: IFFALSE 65171
// sOilTower := true ;
65163: LD_ADDR_EXP 99
65167: PUSH
65168: LD_INT 1
65170: ST_TO_ADDR
// if p3 = 24 then
65171: LD_VAR 0 3
65175: PUSH
65176: LD_INT 24
65178: EQUAL
65179: IFFALSE 65189
// sShovel := true ;
65181: LD_ADDR_EXP 100
65185: PUSH
65186: LD_INT 1
65188: ST_TO_ADDR
// if p3 = 25 then
65189: LD_VAR 0 3
65193: PUSH
65194: LD_INT 25
65196: EQUAL
65197: IFFALSE 65207
// sSheik := true ;
65199: LD_ADDR_EXP 101
65203: PUSH
65204: LD_INT 1
65206: ST_TO_ADDR
// if p3 = 26 then
65207: LD_VAR 0 3
65211: PUSH
65212: LD_INT 26
65214: EQUAL
65215: IFFALSE 65225
// sEarthquake := true ;
65217: LD_ADDR_EXP 103
65221: PUSH
65222: LD_INT 1
65224: ST_TO_ADDR
// if p3 = 27 then
65225: LD_VAR 0 3
65229: PUSH
65230: LD_INT 27
65232: EQUAL
65233: IFFALSE 65243
// sAI := true ;
65235: LD_ADDR_EXP 104
65239: PUSH
65240: LD_INT 1
65242: ST_TO_ADDR
// if p3 = 28 then
65243: LD_VAR 0 3
65247: PUSH
65248: LD_INT 28
65250: EQUAL
65251: IFFALSE 65261
// sCargo := true ;
65253: LD_ADDR_EXP 107
65257: PUSH
65258: LD_INT 1
65260: ST_TO_ADDR
// if p3 = 29 then
65261: LD_VAR 0 3
65265: PUSH
65266: LD_INT 29
65268: EQUAL
65269: IFFALSE 65279
// sDLaser := true ;
65271: LD_ADDR_EXP 108
65275: PUSH
65276: LD_INT 1
65278: ST_TO_ADDR
// if p3 = 30 then
65279: LD_VAR 0 3
65283: PUSH
65284: LD_INT 30
65286: EQUAL
65287: IFFALSE 65297
// sExchange := true ;
65289: LD_ADDR_EXP 109
65293: PUSH
65294: LD_INT 1
65296: ST_TO_ADDR
// if p3 = 31 then
65297: LD_VAR 0 3
65301: PUSH
65302: LD_INT 31
65304: EQUAL
65305: IFFALSE 65315
// sFac := true ;
65307: LD_ADDR_EXP 110
65311: PUSH
65312: LD_INT 1
65314: ST_TO_ADDR
// if p3 = 32 then
65315: LD_VAR 0 3
65319: PUSH
65320: LD_INT 32
65322: EQUAL
65323: IFFALSE 65333
// sPower := true ;
65325: LD_ADDR_EXP 111
65329: PUSH
65330: LD_INT 1
65332: ST_TO_ADDR
// if p3 = 33 then
65333: LD_VAR 0 3
65337: PUSH
65338: LD_INT 33
65340: EQUAL
65341: IFFALSE 65351
// sRandom := true ;
65343: LD_ADDR_EXP 112
65347: PUSH
65348: LD_INT 1
65350: ST_TO_ADDR
// if p3 = 34 then
65351: LD_VAR 0 3
65355: PUSH
65356: LD_INT 34
65358: EQUAL
65359: IFFALSE 65369
// sShield := true ;
65361: LD_ADDR_EXP 113
65365: PUSH
65366: LD_INT 1
65368: ST_TO_ADDR
// if p3 = 35 then
65369: LD_VAR 0 3
65373: PUSH
65374: LD_INT 35
65376: EQUAL
65377: IFFALSE 65387
// sTime := true ;
65379: LD_ADDR_EXP 114
65383: PUSH
65384: LD_INT 1
65386: ST_TO_ADDR
// if p3 = 36 then
65387: LD_VAR 0 3
65391: PUSH
65392: LD_INT 36
65394: EQUAL
65395: IFFALSE 65405
// sTools := true ;
65397: LD_ADDR_EXP 115
65401: PUSH
65402: LD_INT 1
65404: ST_TO_ADDR
// if p3 = 101 then
65405: LD_VAR 0 3
65409: PUSH
65410: LD_INT 101
65412: EQUAL
65413: IFFALSE 65423
// sSold := true ;
65415: LD_ADDR_EXP 80
65419: PUSH
65420: LD_INT 1
65422: ST_TO_ADDR
// if p3 = 102 then
65423: LD_VAR 0 3
65427: PUSH
65428: LD_INT 102
65430: EQUAL
65431: IFFALSE 65441
// sDiff := true ;
65433: LD_ADDR_EXP 81
65437: PUSH
65438: LD_INT 1
65440: ST_TO_ADDR
// if p3 = 103 then
65441: LD_VAR 0 3
65445: PUSH
65446: LD_INT 103
65448: EQUAL
65449: IFFALSE 65459
// sFog := true ;
65451: LD_ADDR_EXP 84
65455: PUSH
65456: LD_INT 1
65458: ST_TO_ADDR
// if p3 = 104 then
65459: LD_VAR 0 3
65463: PUSH
65464: LD_INT 104
65466: EQUAL
65467: IFFALSE 65477
// sReset := true ;
65469: LD_ADDR_EXP 85
65473: PUSH
65474: LD_INT 1
65476: ST_TO_ADDR
// if p3 = 105 then
65477: LD_VAR 0 3
65481: PUSH
65482: LD_INT 105
65484: EQUAL
65485: IFFALSE 65495
// sSun := true ;
65487: LD_ADDR_EXP 86
65491: PUSH
65492: LD_INT 1
65494: ST_TO_ADDR
// if p3 = 106 then
65495: LD_VAR 0 3
65499: PUSH
65500: LD_INT 106
65502: EQUAL
65503: IFFALSE 65513
// sTiger := true ;
65505: LD_ADDR_EXP 82
65509: PUSH
65510: LD_INT 1
65512: ST_TO_ADDR
// if p3 = 107 then
65513: LD_VAR 0 3
65517: PUSH
65518: LD_INT 107
65520: EQUAL
65521: IFFALSE 65531
// sBomb := true ;
65523: LD_ADDR_EXP 83
65527: PUSH
65528: LD_INT 1
65530: ST_TO_ADDR
// if p3 = 108 then
65531: LD_VAR 0 3
65535: PUSH
65536: LD_INT 108
65538: EQUAL
65539: IFFALSE 65549
// sWound := true ;
65541: LD_ADDR_EXP 91
65545: PUSH
65546: LD_INT 1
65548: ST_TO_ADDR
// if p3 = 109 then
65549: LD_VAR 0 3
65553: PUSH
65554: LD_INT 109
65556: EQUAL
65557: IFFALSE 65567
// sBetray := true ;
65559: LD_ADDR_EXP 95
65563: PUSH
65564: LD_INT 1
65566: ST_TO_ADDR
// if p3 = 110 then
65567: LD_VAR 0 3
65571: PUSH
65572: LD_INT 110
65574: EQUAL
65575: IFFALSE 65585
// sContamin := true ;
65577: LD_ADDR_EXP 96
65581: PUSH
65582: LD_INT 1
65584: ST_TO_ADDR
// if p3 = 111 then
65585: LD_VAR 0 3
65589: PUSH
65590: LD_INT 111
65592: EQUAL
65593: IFFALSE 65603
// sOil := true ;
65595: LD_ADDR_EXP 98
65599: PUSH
65600: LD_INT 1
65602: ST_TO_ADDR
// if p3 = 112 then
65603: LD_VAR 0 3
65607: PUSH
65608: LD_INT 112
65610: EQUAL
65611: IFFALSE 65621
// sStu := true ;
65613: LD_ADDR_EXP 102
65617: PUSH
65618: LD_INT 1
65620: ST_TO_ADDR
// if p3 = 113 then
65621: LD_VAR 0 3
65625: PUSH
65626: LD_INT 113
65628: EQUAL
65629: IFFALSE 65639
// sBazooka := true ;
65631: LD_ADDR_EXP 105
65635: PUSH
65636: LD_INT 1
65638: ST_TO_ADDR
// if p3 = 114 then
65639: LD_VAR 0 3
65643: PUSH
65644: LD_INT 114
65646: EQUAL
65647: IFFALSE 65657
// sMortar := true ;
65649: LD_ADDR_EXP 106
65653: PUSH
65654: LD_INT 1
65656: ST_TO_ADDR
// if p3 = 115 then
65657: LD_VAR 0 3
65661: PUSH
65662: LD_INT 115
65664: EQUAL
65665: IFFALSE 65675
// sRanger := true ;
65667: LD_ADDR_EXP 116
65671: PUSH
65672: LD_INT 1
65674: ST_TO_ADDR
// if p3 = 116 then
65675: LD_VAR 0 3
65679: PUSH
65680: LD_INT 116
65682: EQUAL
65683: IFFALSE 65693
// sComputer := true ;
65685: LD_ADDR_EXP 117
65689: PUSH
65690: LD_INT 1
65692: ST_TO_ADDR
// if p3 = 117 then
65693: LD_VAR 0 3
65697: PUSH
65698: LD_INT 117
65700: EQUAL
65701: IFFALSE 65711
// s30 := true ;
65703: LD_ADDR_EXP 118
65707: PUSH
65708: LD_INT 1
65710: ST_TO_ADDR
// if p3 = 118 then
65711: LD_VAR 0 3
65715: PUSH
65716: LD_INT 118
65718: EQUAL
65719: IFFALSE 65729
// s60 := true ;
65721: LD_ADDR_EXP 119
65725: PUSH
65726: LD_INT 1
65728: ST_TO_ADDR
// end ; if p2 = hack_mode then
65729: LD_VAR 0 2
65733: PUSH
65734: LD_INT 101
65736: EQUAL
65737: IFFALSE 65865
// begin case p3 of 1 :
65739: LD_VAR 0 3
65743: PUSH
65744: LD_INT 1
65746: DOUBLE
65747: EQUAL
65748: IFTRUE 65752
65750: GO 65759
65752: POP
// hHackUnlimitedResources ; 2 :
65753: CALL 78012 0 0
65757: GO 65865
65759: LD_INT 2
65761: DOUBLE
65762: EQUAL
65763: IFTRUE 65767
65765: GO 65774
65767: POP
// hHackSetLevel10 ; 3 :
65768: CALL 78145 0 0
65772: GO 65865
65774: LD_INT 3
65776: DOUBLE
65777: EQUAL
65778: IFTRUE 65782
65780: GO 65789
65782: POP
// hHackSetLevel10YourUnits ; 4 :
65783: CALL 78230 0 0
65787: GO 65865
65789: LD_INT 4
65791: DOUBLE
65792: EQUAL
65793: IFTRUE 65797
65795: GO 65804
65797: POP
// hHackInvincible ; 5 :
65798: CALL 78678 0 0
65802: GO 65865
65804: LD_INT 5
65806: DOUBLE
65807: EQUAL
65808: IFTRUE 65812
65810: GO 65819
65812: POP
// hHackInvisible ; 6 :
65813: CALL 78789 0 0
65817: GO 65865
65819: LD_INT 6
65821: DOUBLE
65822: EQUAL
65823: IFTRUE 65827
65825: GO 65834
65827: POP
// hHackChangeYourSide ; 7 :
65828: CALL 78846 0 0
65832: GO 65865
65834: LD_INT 7
65836: DOUBLE
65837: EQUAL
65838: IFTRUE 65842
65840: GO 65849
65842: POP
// hHackChangeUnitSide ; 8 :
65843: CALL 78888 0 0
65847: GO 65865
65849: LD_INT 8
65851: DOUBLE
65852: EQUAL
65853: IFTRUE 65857
65855: GO 65864
65857: POP
// hHackFog ; end ;
65858: CALL 78989 0 0
65862: GO 65865
65864: POP
// end ; if p2 = game_save_mode then
65865: LD_VAR 0 2
65869: PUSH
65870: LD_INT 102
65872: EQUAL
65873: IFFALSE 65928
// begin if p3 = 1 then
65875: LD_VAR 0 3
65879: PUSH
65880: LD_INT 1
65882: EQUAL
65883: IFFALSE 65895
// globalGameSaveCounter := p4 ;
65885: LD_ADDR_EXP 62
65889: PUSH
65890: LD_VAR 0 4
65894: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
65895: LD_VAR 0 3
65899: PUSH
65900: LD_INT 2
65902: EQUAL
65903: PUSH
65904: LD_EXP 62
65908: AND
65909: IFFALSE 65928
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
65911: LD_STRING setGameSaveCounter(
65913: PUSH
65914: LD_EXP 62
65918: STR
65919: PUSH
65920: LD_STRING )
65922: STR
65923: PPUSH
65924: CALL_OW 559
// end ; end ;
65928: LD_VAR 0 7
65932: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
65933: LD_INT 0
65935: PPUSH
// streamModeActive := false ;
65936: LD_ADDR_EXP 63
65940: PUSH
65941: LD_INT 0
65943: ST_TO_ADDR
// normalCounter := 36 ;
65944: LD_ADDR_EXP 64
65948: PUSH
65949: LD_INT 36
65951: ST_TO_ADDR
// hardcoreCounter := 18 ;
65952: LD_ADDR_EXP 65
65956: PUSH
65957: LD_INT 18
65959: ST_TO_ADDR
// sRocket := false ;
65960: LD_ADDR_EXP 68
65964: PUSH
65965: LD_INT 0
65967: ST_TO_ADDR
// sSpeed := false ;
65968: LD_ADDR_EXP 67
65972: PUSH
65973: LD_INT 0
65975: ST_TO_ADDR
// sEngine := false ;
65976: LD_ADDR_EXP 69
65980: PUSH
65981: LD_INT 0
65983: ST_TO_ADDR
// sSpec := false ;
65984: LD_ADDR_EXP 66
65988: PUSH
65989: LD_INT 0
65991: ST_TO_ADDR
// sLevel := false ;
65992: LD_ADDR_EXP 70
65996: PUSH
65997: LD_INT 0
65999: ST_TO_ADDR
// sArmoury := false ;
66000: LD_ADDR_EXP 71
66004: PUSH
66005: LD_INT 0
66007: ST_TO_ADDR
// sRadar := false ;
66008: LD_ADDR_EXP 72
66012: PUSH
66013: LD_INT 0
66015: ST_TO_ADDR
// sBunker := false ;
66016: LD_ADDR_EXP 73
66020: PUSH
66021: LD_INT 0
66023: ST_TO_ADDR
// sHack := false ;
66024: LD_ADDR_EXP 74
66028: PUSH
66029: LD_INT 0
66031: ST_TO_ADDR
// sFire := false ;
66032: LD_ADDR_EXP 75
66036: PUSH
66037: LD_INT 0
66039: ST_TO_ADDR
// sRefresh := false ;
66040: LD_ADDR_EXP 76
66044: PUSH
66045: LD_INT 0
66047: ST_TO_ADDR
// sExp := false ;
66048: LD_ADDR_EXP 77
66052: PUSH
66053: LD_INT 0
66055: ST_TO_ADDR
// sDepot := false ;
66056: LD_ADDR_EXP 78
66060: PUSH
66061: LD_INT 0
66063: ST_TO_ADDR
// sFlag := false ;
66064: LD_ADDR_EXP 79
66068: PUSH
66069: LD_INT 0
66071: ST_TO_ADDR
// sKamikadze := false ;
66072: LD_ADDR_EXP 87
66076: PUSH
66077: LD_INT 0
66079: ST_TO_ADDR
// sTroll := false ;
66080: LD_ADDR_EXP 88
66084: PUSH
66085: LD_INT 0
66087: ST_TO_ADDR
// sSlow := false ;
66088: LD_ADDR_EXP 89
66092: PUSH
66093: LD_INT 0
66095: ST_TO_ADDR
// sLack := false ;
66096: LD_ADDR_EXP 90
66100: PUSH
66101: LD_INT 0
66103: ST_TO_ADDR
// sTank := false ;
66104: LD_ADDR_EXP 92
66108: PUSH
66109: LD_INT 0
66111: ST_TO_ADDR
// sRemote := false ;
66112: LD_ADDR_EXP 93
66116: PUSH
66117: LD_INT 0
66119: ST_TO_ADDR
// sPowell := false ;
66120: LD_ADDR_EXP 94
66124: PUSH
66125: LD_INT 0
66127: ST_TO_ADDR
// sTeleport := false ;
66128: LD_ADDR_EXP 97
66132: PUSH
66133: LD_INT 0
66135: ST_TO_ADDR
// sOilTower := false ;
66136: LD_ADDR_EXP 99
66140: PUSH
66141: LD_INT 0
66143: ST_TO_ADDR
// sShovel := false ;
66144: LD_ADDR_EXP 100
66148: PUSH
66149: LD_INT 0
66151: ST_TO_ADDR
// sSheik := false ;
66152: LD_ADDR_EXP 101
66156: PUSH
66157: LD_INT 0
66159: ST_TO_ADDR
// sEarthquake := false ;
66160: LD_ADDR_EXP 103
66164: PUSH
66165: LD_INT 0
66167: ST_TO_ADDR
// sAI := false ;
66168: LD_ADDR_EXP 104
66172: PUSH
66173: LD_INT 0
66175: ST_TO_ADDR
// sCargo := false ;
66176: LD_ADDR_EXP 107
66180: PUSH
66181: LD_INT 0
66183: ST_TO_ADDR
// sDLaser := false ;
66184: LD_ADDR_EXP 108
66188: PUSH
66189: LD_INT 0
66191: ST_TO_ADDR
// sExchange := false ;
66192: LD_ADDR_EXP 109
66196: PUSH
66197: LD_INT 0
66199: ST_TO_ADDR
// sFac := false ;
66200: LD_ADDR_EXP 110
66204: PUSH
66205: LD_INT 0
66207: ST_TO_ADDR
// sPower := false ;
66208: LD_ADDR_EXP 111
66212: PUSH
66213: LD_INT 0
66215: ST_TO_ADDR
// sRandom := false ;
66216: LD_ADDR_EXP 112
66220: PUSH
66221: LD_INT 0
66223: ST_TO_ADDR
// sShield := false ;
66224: LD_ADDR_EXP 113
66228: PUSH
66229: LD_INT 0
66231: ST_TO_ADDR
// sTime := false ;
66232: LD_ADDR_EXP 114
66236: PUSH
66237: LD_INT 0
66239: ST_TO_ADDR
// sTools := false ;
66240: LD_ADDR_EXP 115
66244: PUSH
66245: LD_INT 0
66247: ST_TO_ADDR
// sSold := false ;
66248: LD_ADDR_EXP 80
66252: PUSH
66253: LD_INT 0
66255: ST_TO_ADDR
// sDiff := false ;
66256: LD_ADDR_EXP 81
66260: PUSH
66261: LD_INT 0
66263: ST_TO_ADDR
// sFog := false ;
66264: LD_ADDR_EXP 84
66268: PUSH
66269: LD_INT 0
66271: ST_TO_ADDR
// sReset := false ;
66272: LD_ADDR_EXP 85
66276: PUSH
66277: LD_INT 0
66279: ST_TO_ADDR
// sSun := false ;
66280: LD_ADDR_EXP 86
66284: PUSH
66285: LD_INT 0
66287: ST_TO_ADDR
// sTiger := false ;
66288: LD_ADDR_EXP 82
66292: PUSH
66293: LD_INT 0
66295: ST_TO_ADDR
// sBomb := false ;
66296: LD_ADDR_EXP 83
66300: PUSH
66301: LD_INT 0
66303: ST_TO_ADDR
// sWound := false ;
66304: LD_ADDR_EXP 91
66308: PUSH
66309: LD_INT 0
66311: ST_TO_ADDR
// sBetray := false ;
66312: LD_ADDR_EXP 95
66316: PUSH
66317: LD_INT 0
66319: ST_TO_ADDR
// sContamin := false ;
66320: LD_ADDR_EXP 96
66324: PUSH
66325: LD_INT 0
66327: ST_TO_ADDR
// sOil := false ;
66328: LD_ADDR_EXP 98
66332: PUSH
66333: LD_INT 0
66335: ST_TO_ADDR
// sStu := false ;
66336: LD_ADDR_EXP 102
66340: PUSH
66341: LD_INT 0
66343: ST_TO_ADDR
// sBazooka := false ;
66344: LD_ADDR_EXP 105
66348: PUSH
66349: LD_INT 0
66351: ST_TO_ADDR
// sMortar := false ;
66352: LD_ADDR_EXP 106
66356: PUSH
66357: LD_INT 0
66359: ST_TO_ADDR
// sRanger := false ;
66360: LD_ADDR_EXP 116
66364: PUSH
66365: LD_INT 0
66367: ST_TO_ADDR
// sComputer := false ;
66368: LD_ADDR_EXP 117
66372: PUSH
66373: LD_INT 0
66375: ST_TO_ADDR
// s30 := false ;
66376: LD_ADDR_EXP 118
66380: PUSH
66381: LD_INT 0
66383: ST_TO_ADDR
// s60 := false ;
66384: LD_ADDR_EXP 119
66388: PUSH
66389: LD_INT 0
66391: ST_TO_ADDR
// end ;
66392: LD_VAR 0 1
66396: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
66397: LD_INT 0
66399: PPUSH
66400: PPUSH
66401: PPUSH
66402: PPUSH
66403: PPUSH
66404: PPUSH
66405: PPUSH
// result := [ ] ;
66406: LD_ADDR_VAR 0 2
66410: PUSH
66411: EMPTY
66412: ST_TO_ADDR
// if campaign_id = 1 then
66413: LD_OWVAR 69
66417: PUSH
66418: LD_INT 1
66420: EQUAL
66421: IFFALSE 69587
// begin case mission_number of 1 :
66423: LD_OWVAR 70
66427: PUSH
66428: LD_INT 1
66430: DOUBLE
66431: EQUAL
66432: IFTRUE 66436
66434: GO 66512
66436: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
66437: LD_ADDR_VAR 0 2
66441: PUSH
66442: LD_INT 2
66444: PUSH
66445: LD_INT 4
66447: PUSH
66448: LD_INT 11
66450: PUSH
66451: LD_INT 12
66453: PUSH
66454: LD_INT 15
66456: PUSH
66457: LD_INT 16
66459: PUSH
66460: LD_INT 22
66462: PUSH
66463: LD_INT 23
66465: PUSH
66466: LD_INT 26
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 101
66482: PUSH
66483: LD_INT 102
66485: PUSH
66486: LD_INT 106
66488: PUSH
66489: LD_INT 116
66491: PUSH
66492: LD_INT 117
66494: PUSH
66495: LD_INT 118
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: ST_TO_ADDR
66510: GO 69585
66512: LD_INT 2
66514: DOUBLE
66515: EQUAL
66516: IFTRUE 66520
66518: GO 66604
66520: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
66521: LD_ADDR_VAR 0 2
66525: PUSH
66526: LD_INT 2
66528: PUSH
66529: LD_INT 4
66531: PUSH
66532: LD_INT 11
66534: PUSH
66535: LD_INT 12
66537: PUSH
66538: LD_INT 15
66540: PUSH
66541: LD_INT 16
66543: PUSH
66544: LD_INT 22
66546: PUSH
66547: LD_INT 23
66549: PUSH
66550: LD_INT 26
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 101
66566: PUSH
66567: LD_INT 102
66569: PUSH
66570: LD_INT 105
66572: PUSH
66573: LD_INT 106
66575: PUSH
66576: LD_INT 108
66578: PUSH
66579: LD_INT 116
66581: PUSH
66582: LD_INT 117
66584: PUSH
66585: LD_INT 118
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: ST_TO_ADDR
66602: GO 69585
66604: LD_INT 3
66606: DOUBLE
66607: EQUAL
66608: IFTRUE 66612
66610: GO 66700
66612: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
66613: LD_ADDR_VAR 0 2
66617: PUSH
66618: LD_INT 2
66620: PUSH
66621: LD_INT 4
66623: PUSH
66624: LD_INT 5
66626: PUSH
66627: LD_INT 11
66629: PUSH
66630: LD_INT 12
66632: PUSH
66633: LD_INT 15
66635: PUSH
66636: LD_INT 16
66638: PUSH
66639: LD_INT 22
66641: PUSH
66642: LD_INT 26
66644: PUSH
66645: LD_INT 36
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 101
66662: PUSH
66663: LD_INT 102
66665: PUSH
66666: LD_INT 105
66668: PUSH
66669: LD_INT 106
66671: PUSH
66672: LD_INT 108
66674: PUSH
66675: LD_INT 116
66677: PUSH
66678: LD_INT 117
66680: PUSH
66681: LD_INT 118
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: ST_TO_ADDR
66698: GO 69585
66700: LD_INT 4
66702: DOUBLE
66703: EQUAL
66704: IFTRUE 66708
66706: GO 66804
66708: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
66709: LD_ADDR_VAR 0 2
66713: PUSH
66714: LD_INT 2
66716: PUSH
66717: LD_INT 4
66719: PUSH
66720: LD_INT 5
66722: PUSH
66723: LD_INT 8
66725: PUSH
66726: LD_INT 11
66728: PUSH
66729: LD_INT 12
66731: PUSH
66732: LD_INT 15
66734: PUSH
66735: LD_INT 16
66737: PUSH
66738: LD_INT 22
66740: PUSH
66741: LD_INT 23
66743: PUSH
66744: LD_INT 26
66746: PUSH
66747: LD_INT 36
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 101
66766: PUSH
66767: LD_INT 102
66769: PUSH
66770: LD_INT 105
66772: PUSH
66773: LD_INT 106
66775: PUSH
66776: LD_INT 108
66778: PUSH
66779: LD_INT 116
66781: PUSH
66782: LD_INT 117
66784: PUSH
66785: LD_INT 118
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: ST_TO_ADDR
66802: GO 69585
66804: LD_INT 5
66806: DOUBLE
66807: EQUAL
66808: IFTRUE 66812
66810: GO 66924
66812: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
66813: LD_ADDR_VAR 0 2
66817: PUSH
66818: LD_INT 2
66820: PUSH
66821: LD_INT 4
66823: PUSH
66824: LD_INT 5
66826: PUSH
66827: LD_INT 6
66829: PUSH
66830: LD_INT 8
66832: PUSH
66833: LD_INT 11
66835: PUSH
66836: LD_INT 12
66838: PUSH
66839: LD_INT 15
66841: PUSH
66842: LD_INT 16
66844: PUSH
66845: LD_INT 22
66847: PUSH
66848: LD_INT 23
66850: PUSH
66851: LD_INT 25
66853: PUSH
66854: LD_INT 26
66856: PUSH
66857: LD_INT 36
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 101
66878: PUSH
66879: LD_INT 102
66881: PUSH
66882: LD_INT 105
66884: PUSH
66885: LD_INT 106
66887: PUSH
66888: LD_INT 108
66890: PUSH
66891: LD_INT 109
66893: PUSH
66894: LD_INT 112
66896: PUSH
66897: LD_INT 116
66899: PUSH
66900: LD_INT 117
66902: PUSH
66903: LD_INT 118
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: ST_TO_ADDR
66922: GO 69585
66924: LD_INT 6
66926: DOUBLE
66927: EQUAL
66928: IFTRUE 66932
66930: GO 67064
66932: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
66933: LD_ADDR_VAR 0 2
66937: PUSH
66938: LD_INT 2
66940: PUSH
66941: LD_INT 4
66943: PUSH
66944: LD_INT 5
66946: PUSH
66947: LD_INT 6
66949: PUSH
66950: LD_INT 8
66952: PUSH
66953: LD_INT 11
66955: PUSH
66956: LD_INT 12
66958: PUSH
66959: LD_INT 15
66961: PUSH
66962: LD_INT 16
66964: PUSH
66965: LD_INT 20
66967: PUSH
66968: LD_INT 21
66970: PUSH
66971: LD_INT 22
66973: PUSH
66974: LD_INT 23
66976: PUSH
66977: LD_INT 25
66979: PUSH
66980: LD_INT 26
66982: PUSH
66983: LD_INT 30
66985: PUSH
66986: LD_INT 31
66988: PUSH
66989: LD_INT 32
66991: PUSH
66992: LD_INT 36
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 101
67018: PUSH
67019: LD_INT 102
67021: PUSH
67022: LD_INT 105
67024: PUSH
67025: LD_INT 106
67027: PUSH
67028: LD_INT 108
67030: PUSH
67031: LD_INT 109
67033: PUSH
67034: LD_INT 112
67036: PUSH
67037: LD_INT 116
67039: PUSH
67040: LD_INT 117
67042: PUSH
67043: LD_INT 118
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: ST_TO_ADDR
67062: GO 69585
67064: LD_INT 7
67066: DOUBLE
67067: EQUAL
67068: IFTRUE 67072
67070: GO 67184
67072: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
67073: LD_ADDR_VAR 0 2
67077: PUSH
67078: LD_INT 2
67080: PUSH
67081: LD_INT 4
67083: PUSH
67084: LD_INT 5
67086: PUSH
67087: LD_INT 7
67089: PUSH
67090: LD_INT 11
67092: PUSH
67093: LD_INT 12
67095: PUSH
67096: LD_INT 15
67098: PUSH
67099: LD_INT 16
67101: PUSH
67102: LD_INT 20
67104: PUSH
67105: LD_INT 21
67107: PUSH
67108: LD_INT 22
67110: PUSH
67111: LD_INT 23
67113: PUSH
67114: LD_INT 25
67116: PUSH
67117: LD_INT 26
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 101
67138: PUSH
67139: LD_INT 102
67141: PUSH
67142: LD_INT 103
67144: PUSH
67145: LD_INT 105
67147: PUSH
67148: LD_INT 106
67150: PUSH
67151: LD_INT 108
67153: PUSH
67154: LD_INT 112
67156: PUSH
67157: LD_INT 116
67159: PUSH
67160: LD_INT 117
67162: PUSH
67163: LD_INT 118
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: ST_TO_ADDR
67182: GO 69585
67184: LD_INT 8
67186: DOUBLE
67187: EQUAL
67188: IFTRUE 67192
67190: GO 67332
67192: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
67193: LD_ADDR_VAR 0 2
67197: PUSH
67198: LD_INT 2
67200: PUSH
67201: LD_INT 4
67203: PUSH
67204: LD_INT 5
67206: PUSH
67207: LD_INT 6
67209: PUSH
67210: LD_INT 7
67212: PUSH
67213: LD_INT 8
67215: PUSH
67216: LD_INT 11
67218: PUSH
67219: LD_INT 12
67221: PUSH
67222: LD_INT 15
67224: PUSH
67225: LD_INT 16
67227: PUSH
67228: LD_INT 20
67230: PUSH
67231: LD_INT 21
67233: PUSH
67234: LD_INT 22
67236: PUSH
67237: LD_INT 23
67239: PUSH
67240: LD_INT 25
67242: PUSH
67243: LD_INT 26
67245: PUSH
67246: LD_INT 30
67248: PUSH
67249: LD_INT 31
67251: PUSH
67252: LD_INT 32
67254: PUSH
67255: LD_INT 36
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 101
67282: PUSH
67283: LD_INT 102
67285: PUSH
67286: LD_INT 103
67288: PUSH
67289: LD_INT 105
67291: PUSH
67292: LD_INT 106
67294: PUSH
67295: LD_INT 108
67297: PUSH
67298: LD_INT 109
67300: PUSH
67301: LD_INT 112
67303: PUSH
67304: LD_INT 116
67306: PUSH
67307: LD_INT 117
67309: PUSH
67310: LD_INT 118
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: ST_TO_ADDR
67330: GO 69585
67332: LD_INT 9
67334: DOUBLE
67335: EQUAL
67336: IFTRUE 67340
67338: GO 67488
67340: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
67341: LD_ADDR_VAR 0 2
67345: PUSH
67346: LD_INT 2
67348: PUSH
67349: LD_INT 4
67351: PUSH
67352: LD_INT 5
67354: PUSH
67355: LD_INT 6
67357: PUSH
67358: LD_INT 7
67360: PUSH
67361: LD_INT 8
67363: PUSH
67364: LD_INT 11
67366: PUSH
67367: LD_INT 12
67369: PUSH
67370: LD_INT 15
67372: PUSH
67373: LD_INT 16
67375: PUSH
67376: LD_INT 20
67378: PUSH
67379: LD_INT 21
67381: PUSH
67382: LD_INT 22
67384: PUSH
67385: LD_INT 23
67387: PUSH
67388: LD_INT 25
67390: PUSH
67391: LD_INT 26
67393: PUSH
67394: LD_INT 28
67396: PUSH
67397: LD_INT 30
67399: PUSH
67400: LD_INT 31
67402: PUSH
67403: LD_INT 32
67405: PUSH
67406: LD_INT 36
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 101
67434: PUSH
67435: LD_INT 102
67437: PUSH
67438: LD_INT 103
67440: PUSH
67441: LD_INT 105
67443: PUSH
67444: LD_INT 106
67446: PUSH
67447: LD_INT 108
67449: PUSH
67450: LD_INT 109
67452: PUSH
67453: LD_INT 112
67455: PUSH
67456: LD_INT 114
67458: PUSH
67459: LD_INT 116
67461: PUSH
67462: LD_INT 117
67464: PUSH
67465: LD_INT 118
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: ST_TO_ADDR
67486: GO 69585
67488: LD_INT 10
67490: DOUBLE
67491: EQUAL
67492: IFTRUE 67496
67494: GO 67692
67496: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
67497: LD_ADDR_VAR 0 2
67501: PUSH
67502: LD_INT 2
67504: PUSH
67505: LD_INT 4
67507: PUSH
67508: LD_INT 5
67510: PUSH
67511: LD_INT 6
67513: PUSH
67514: LD_INT 7
67516: PUSH
67517: LD_INT 8
67519: PUSH
67520: LD_INT 9
67522: PUSH
67523: LD_INT 10
67525: PUSH
67526: LD_INT 11
67528: PUSH
67529: LD_INT 12
67531: PUSH
67532: LD_INT 13
67534: PUSH
67535: LD_INT 14
67537: PUSH
67538: LD_INT 15
67540: PUSH
67541: LD_INT 16
67543: PUSH
67544: LD_INT 17
67546: PUSH
67547: LD_INT 18
67549: PUSH
67550: LD_INT 19
67552: PUSH
67553: LD_INT 20
67555: PUSH
67556: LD_INT 21
67558: PUSH
67559: LD_INT 22
67561: PUSH
67562: LD_INT 23
67564: PUSH
67565: LD_INT 24
67567: PUSH
67568: LD_INT 25
67570: PUSH
67571: LD_INT 26
67573: PUSH
67574: LD_INT 28
67576: PUSH
67577: LD_INT 30
67579: PUSH
67580: LD_INT 31
67582: PUSH
67583: LD_INT 32
67585: PUSH
67586: LD_INT 36
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 101
67622: PUSH
67623: LD_INT 102
67625: PUSH
67626: LD_INT 103
67628: PUSH
67629: LD_INT 104
67631: PUSH
67632: LD_INT 105
67634: PUSH
67635: LD_INT 106
67637: PUSH
67638: LD_INT 107
67640: PUSH
67641: LD_INT 108
67643: PUSH
67644: LD_INT 109
67646: PUSH
67647: LD_INT 110
67649: PUSH
67650: LD_INT 111
67652: PUSH
67653: LD_INT 112
67655: PUSH
67656: LD_INT 114
67658: PUSH
67659: LD_INT 116
67661: PUSH
67662: LD_INT 117
67664: PUSH
67665: LD_INT 118
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: ST_TO_ADDR
67690: GO 69585
67692: LD_INT 11
67694: DOUBLE
67695: EQUAL
67696: IFTRUE 67700
67698: GO 67904
67700: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
67701: LD_ADDR_VAR 0 2
67705: PUSH
67706: LD_INT 2
67708: PUSH
67709: LD_INT 3
67711: PUSH
67712: LD_INT 4
67714: PUSH
67715: LD_INT 5
67717: PUSH
67718: LD_INT 6
67720: PUSH
67721: LD_INT 7
67723: PUSH
67724: LD_INT 8
67726: PUSH
67727: LD_INT 9
67729: PUSH
67730: LD_INT 10
67732: PUSH
67733: LD_INT 11
67735: PUSH
67736: LD_INT 12
67738: PUSH
67739: LD_INT 13
67741: PUSH
67742: LD_INT 14
67744: PUSH
67745: LD_INT 15
67747: PUSH
67748: LD_INT 16
67750: PUSH
67751: LD_INT 17
67753: PUSH
67754: LD_INT 18
67756: PUSH
67757: LD_INT 19
67759: PUSH
67760: LD_INT 20
67762: PUSH
67763: LD_INT 21
67765: PUSH
67766: LD_INT 22
67768: PUSH
67769: LD_INT 23
67771: PUSH
67772: LD_INT 24
67774: PUSH
67775: LD_INT 25
67777: PUSH
67778: LD_INT 26
67780: PUSH
67781: LD_INT 28
67783: PUSH
67784: LD_INT 30
67786: PUSH
67787: LD_INT 31
67789: PUSH
67790: LD_INT 32
67792: PUSH
67793: LD_INT 34
67795: PUSH
67796: LD_INT 36
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 101
67834: PUSH
67835: LD_INT 102
67837: PUSH
67838: LD_INT 103
67840: PUSH
67841: LD_INT 104
67843: PUSH
67844: LD_INT 105
67846: PUSH
67847: LD_INT 106
67849: PUSH
67850: LD_INT 107
67852: PUSH
67853: LD_INT 108
67855: PUSH
67856: LD_INT 109
67858: PUSH
67859: LD_INT 110
67861: PUSH
67862: LD_INT 111
67864: PUSH
67865: LD_INT 112
67867: PUSH
67868: LD_INT 114
67870: PUSH
67871: LD_INT 116
67873: PUSH
67874: LD_INT 117
67876: PUSH
67877: LD_INT 118
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: ST_TO_ADDR
67902: GO 69585
67904: LD_INT 12
67906: DOUBLE
67907: EQUAL
67908: IFTRUE 67912
67910: GO 68132
67912: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
67913: LD_ADDR_VAR 0 2
67917: PUSH
67918: LD_INT 1
67920: PUSH
67921: LD_INT 2
67923: PUSH
67924: LD_INT 3
67926: PUSH
67927: LD_INT 4
67929: PUSH
67930: LD_INT 5
67932: PUSH
67933: LD_INT 6
67935: PUSH
67936: LD_INT 7
67938: PUSH
67939: LD_INT 8
67941: PUSH
67942: LD_INT 9
67944: PUSH
67945: LD_INT 10
67947: PUSH
67948: LD_INT 11
67950: PUSH
67951: LD_INT 12
67953: PUSH
67954: LD_INT 13
67956: PUSH
67957: LD_INT 14
67959: PUSH
67960: LD_INT 15
67962: PUSH
67963: LD_INT 16
67965: PUSH
67966: LD_INT 17
67968: PUSH
67969: LD_INT 18
67971: PUSH
67972: LD_INT 19
67974: PUSH
67975: LD_INT 20
67977: PUSH
67978: LD_INT 21
67980: PUSH
67981: LD_INT 22
67983: PUSH
67984: LD_INT 23
67986: PUSH
67987: LD_INT 24
67989: PUSH
67990: LD_INT 25
67992: PUSH
67993: LD_INT 26
67995: PUSH
67996: LD_INT 27
67998: PUSH
67999: LD_INT 28
68001: PUSH
68002: LD_INT 30
68004: PUSH
68005: LD_INT 31
68007: PUSH
68008: LD_INT 32
68010: PUSH
68011: LD_INT 33
68013: PUSH
68014: LD_INT 34
68016: PUSH
68017: LD_INT 36
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 101
68058: PUSH
68059: LD_INT 102
68061: PUSH
68062: LD_INT 103
68064: PUSH
68065: LD_INT 104
68067: PUSH
68068: LD_INT 105
68070: PUSH
68071: LD_INT 106
68073: PUSH
68074: LD_INT 107
68076: PUSH
68077: LD_INT 108
68079: PUSH
68080: LD_INT 109
68082: PUSH
68083: LD_INT 110
68085: PUSH
68086: LD_INT 111
68088: PUSH
68089: LD_INT 112
68091: PUSH
68092: LD_INT 113
68094: PUSH
68095: LD_INT 114
68097: PUSH
68098: LD_INT 116
68100: PUSH
68101: LD_INT 117
68103: PUSH
68104: LD_INT 118
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: ST_TO_ADDR
68130: GO 69585
68132: LD_INT 13
68134: DOUBLE
68135: EQUAL
68136: IFTRUE 68140
68138: GO 68348
68140: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
68141: LD_ADDR_VAR 0 2
68145: PUSH
68146: LD_INT 1
68148: PUSH
68149: LD_INT 2
68151: PUSH
68152: LD_INT 3
68154: PUSH
68155: LD_INT 4
68157: PUSH
68158: LD_INT 5
68160: PUSH
68161: LD_INT 8
68163: PUSH
68164: LD_INT 9
68166: PUSH
68167: LD_INT 10
68169: PUSH
68170: LD_INT 11
68172: PUSH
68173: LD_INT 12
68175: PUSH
68176: LD_INT 14
68178: PUSH
68179: LD_INT 15
68181: PUSH
68182: LD_INT 16
68184: PUSH
68185: LD_INT 17
68187: PUSH
68188: LD_INT 18
68190: PUSH
68191: LD_INT 19
68193: PUSH
68194: LD_INT 20
68196: PUSH
68197: LD_INT 21
68199: PUSH
68200: LD_INT 22
68202: PUSH
68203: LD_INT 23
68205: PUSH
68206: LD_INT 24
68208: PUSH
68209: LD_INT 25
68211: PUSH
68212: LD_INT 26
68214: PUSH
68215: LD_INT 27
68217: PUSH
68218: LD_INT 28
68220: PUSH
68221: LD_INT 30
68223: PUSH
68224: LD_INT 31
68226: PUSH
68227: LD_INT 32
68229: PUSH
68230: LD_INT 33
68232: PUSH
68233: LD_INT 34
68235: PUSH
68236: LD_INT 36
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 101
68274: PUSH
68275: LD_INT 102
68277: PUSH
68278: LD_INT 103
68280: PUSH
68281: LD_INT 104
68283: PUSH
68284: LD_INT 105
68286: PUSH
68287: LD_INT 106
68289: PUSH
68290: LD_INT 107
68292: PUSH
68293: LD_INT 108
68295: PUSH
68296: LD_INT 109
68298: PUSH
68299: LD_INT 110
68301: PUSH
68302: LD_INT 111
68304: PUSH
68305: LD_INT 112
68307: PUSH
68308: LD_INT 113
68310: PUSH
68311: LD_INT 114
68313: PUSH
68314: LD_INT 116
68316: PUSH
68317: LD_INT 117
68319: PUSH
68320: LD_INT 118
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: ST_TO_ADDR
68346: GO 69585
68348: LD_INT 14
68350: DOUBLE
68351: EQUAL
68352: IFTRUE 68356
68354: GO 68580
68356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
68357: LD_ADDR_VAR 0 2
68361: PUSH
68362: LD_INT 1
68364: PUSH
68365: LD_INT 2
68367: PUSH
68368: LD_INT 3
68370: PUSH
68371: LD_INT 4
68373: PUSH
68374: LD_INT 5
68376: PUSH
68377: LD_INT 6
68379: PUSH
68380: LD_INT 7
68382: PUSH
68383: LD_INT 8
68385: PUSH
68386: LD_INT 9
68388: PUSH
68389: LD_INT 10
68391: PUSH
68392: LD_INT 11
68394: PUSH
68395: LD_INT 12
68397: PUSH
68398: LD_INT 13
68400: PUSH
68401: LD_INT 14
68403: PUSH
68404: LD_INT 15
68406: PUSH
68407: LD_INT 16
68409: PUSH
68410: LD_INT 17
68412: PUSH
68413: LD_INT 18
68415: PUSH
68416: LD_INT 19
68418: PUSH
68419: LD_INT 20
68421: PUSH
68422: LD_INT 21
68424: PUSH
68425: LD_INT 22
68427: PUSH
68428: LD_INT 23
68430: PUSH
68431: LD_INT 24
68433: PUSH
68434: LD_INT 25
68436: PUSH
68437: LD_INT 26
68439: PUSH
68440: LD_INT 27
68442: PUSH
68443: LD_INT 28
68445: PUSH
68446: LD_INT 29
68448: PUSH
68449: LD_INT 30
68451: PUSH
68452: LD_INT 31
68454: PUSH
68455: LD_INT 32
68457: PUSH
68458: LD_INT 33
68460: PUSH
68461: LD_INT 34
68463: PUSH
68464: LD_INT 36
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 101
68506: PUSH
68507: LD_INT 102
68509: PUSH
68510: LD_INT 103
68512: PUSH
68513: LD_INT 104
68515: PUSH
68516: LD_INT 105
68518: PUSH
68519: LD_INT 106
68521: PUSH
68522: LD_INT 107
68524: PUSH
68525: LD_INT 108
68527: PUSH
68528: LD_INT 109
68530: PUSH
68531: LD_INT 110
68533: PUSH
68534: LD_INT 111
68536: PUSH
68537: LD_INT 112
68539: PUSH
68540: LD_INT 113
68542: PUSH
68543: LD_INT 114
68545: PUSH
68546: LD_INT 116
68548: PUSH
68549: LD_INT 117
68551: PUSH
68552: LD_INT 118
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: ST_TO_ADDR
68578: GO 69585
68580: LD_INT 15
68582: DOUBLE
68583: EQUAL
68584: IFTRUE 68588
68586: GO 68812
68588: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
68589: LD_ADDR_VAR 0 2
68593: PUSH
68594: LD_INT 1
68596: PUSH
68597: LD_INT 2
68599: PUSH
68600: LD_INT 3
68602: PUSH
68603: LD_INT 4
68605: PUSH
68606: LD_INT 5
68608: PUSH
68609: LD_INT 6
68611: PUSH
68612: LD_INT 7
68614: PUSH
68615: LD_INT 8
68617: PUSH
68618: LD_INT 9
68620: PUSH
68621: LD_INT 10
68623: PUSH
68624: LD_INT 11
68626: PUSH
68627: LD_INT 12
68629: PUSH
68630: LD_INT 13
68632: PUSH
68633: LD_INT 14
68635: PUSH
68636: LD_INT 15
68638: PUSH
68639: LD_INT 16
68641: PUSH
68642: LD_INT 17
68644: PUSH
68645: LD_INT 18
68647: PUSH
68648: LD_INT 19
68650: PUSH
68651: LD_INT 20
68653: PUSH
68654: LD_INT 21
68656: PUSH
68657: LD_INT 22
68659: PUSH
68660: LD_INT 23
68662: PUSH
68663: LD_INT 24
68665: PUSH
68666: LD_INT 25
68668: PUSH
68669: LD_INT 26
68671: PUSH
68672: LD_INT 27
68674: PUSH
68675: LD_INT 28
68677: PUSH
68678: LD_INT 29
68680: PUSH
68681: LD_INT 30
68683: PUSH
68684: LD_INT 31
68686: PUSH
68687: LD_INT 32
68689: PUSH
68690: LD_INT 33
68692: PUSH
68693: LD_INT 34
68695: PUSH
68696: LD_INT 36
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 101
68738: PUSH
68739: LD_INT 102
68741: PUSH
68742: LD_INT 103
68744: PUSH
68745: LD_INT 104
68747: PUSH
68748: LD_INT 105
68750: PUSH
68751: LD_INT 106
68753: PUSH
68754: LD_INT 107
68756: PUSH
68757: LD_INT 108
68759: PUSH
68760: LD_INT 109
68762: PUSH
68763: LD_INT 110
68765: PUSH
68766: LD_INT 111
68768: PUSH
68769: LD_INT 112
68771: PUSH
68772: LD_INT 113
68774: PUSH
68775: LD_INT 114
68777: PUSH
68778: LD_INT 116
68780: PUSH
68781: LD_INT 117
68783: PUSH
68784: LD_INT 118
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: ST_TO_ADDR
68810: GO 69585
68812: LD_INT 16
68814: DOUBLE
68815: EQUAL
68816: IFTRUE 68820
68818: GO 68956
68820: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
68821: LD_ADDR_VAR 0 2
68825: PUSH
68826: LD_INT 2
68828: PUSH
68829: LD_INT 4
68831: PUSH
68832: LD_INT 5
68834: PUSH
68835: LD_INT 7
68837: PUSH
68838: LD_INT 11
68840: PUSH
68841: LD_INT 12
68843: PUSH
68844: LD_INT 15
68846: PUSH
68847: LD_INT 16
68849: PUSH
68850: LD_INT 20
68852: PUSH
68853: LD_INT 21
68855: PUSH
68856: LD_INT 22
68858: PUSH
68859: LD_INT 23
68861: PUSH
68862: LD_INT 25
68864: PUSH
68865: LD_INT 26
68867: PUSH
68868: LD_INT 30
68870: PUSH
68871: LD_INT 31
68873: PUSH
68874: LD_INT 32
68876: PUSH
68877: LD_INT 33
68879: PUSH
68880: LD_INT 34
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 101
68906: PUSH
68907: LD_INT 102
68909: PUSH
68910: LD_INT 103
68912: PUSH
68913: LD_INT 106
68915: PUSH
68916: LD_INT 108
68918: PUSH
68919: LD_INT 112
68921: PUSH
68922: LD_INT 113
68924: PUSH
68925: LD_INT 114
68927: PUSH
68928: LD_INT 116
68930: PUSH
68931: LD_INT 117
68933: PUSH
68934: LD_INT 118
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: ST_TO_ADDR
68954: GO 69585
68956: LD_INT 17
68958: DOUBLE
68959: EQUAL
68960: IFTRUE 68964
68962: GO 69188
68964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
68965: LD_ADDR_VAR 0 2
68969: PUSH
68970: LD_INT 1
68972: PUSH
68973: LD_INT 2
68975: PUSH
68976: LD_INT 3
68978: PUSH
68979: LD_INT 4
68981: PUSH
68982: LD_INT 5
68984: PUSH
68985: LD_INT 6
68987: PUSH
68988: LD_INT 7
68990: PUSH
68991: LD_INT 8
68993: PUSH
68994: LD_INT 9
68996: PUSH
68997: LD_INT 10
68999: PUSH
69000: LD_INT 11
69002: PUSH
69003: LD_INT 12
69005: PUSH
69006: LD_INT 13
69008: PUSH
69009: LD_INT 14
69011: PUSH
69012: LD_INT 15
69014: PUSH
69015: LD_INT 16
69017: PUSH
69018: LD_INT 17
69020: PUSH
69021: LD_INT 18
69023: PUSH
69024: LD_INT 19
69026: PUSH
69027: LD_INT 20
69029: PUSH
69030: LD_INT 21
69032: PUSH
69033: LD_INT 22
69035: PUSH
69036: LD_INT 23
69038: PUSH
69039: LD_INT 24
69041: PUSH
69042: LD_INT 25
69044: PUSH
69045: LD_INT 26
69047: PUSH
69048: LD_INT 27
69050: PUSH
69051: LD_INT 28
69053: PUSH
69054: LD_INT 29
69056: PUSH
69057: LD_INT 30
69059: PUSH
69060: LD_INT 31
69062: PUSH
69063: LD_INT 32
69065: PUSH
69066: LD_INT 33
69068: PUSH
69069: LD_INT 34
69071: PUSH
69072: LD_INT 36
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 101
69114: PUSH
69115: LD_INT 102
69117: PUSH
69118: LD_INT 103
69120: PUSH
69121: LD_INT 104
69123: PUSH
69124: LD_INT 105
69126: PUSH
69127: LD_INT 106
69129: PUSH
69130: LD_INT 107
69132: PUSH
69133: LD_INT 108
69135: PUSH
69136: LD_INT 109
69138: PUSH
69139: LD_INT 110
69141: PUSH
69142: LD_INT 111
69144: PUSH
69145: LD_INT 112
69147: PUSH
69148: LD_INT 113
69150: PUSH
69151: LD_INT 114
69153: PUSH
69154: LD_INT 116
69156: PUSH
69157: LD_INT 117
69159: PUSH
69160: LD_INT 118
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: ST_TO_ADDR
69186: GO 69585
69188: LD_INT 18
69190: DOUBLE
69191: EQUAL
69192: IFTRUE 69196
69194: GO 69344
69196: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
69197: LD_ADDR_VAR 0 2
69201: PUSH
69202: LD_INT 2
69204: PUSH
69205: LD_INT 4
69207: PUSH
69208: LD_INT 5
69210: PUSH
69211: LD_INT 7
69213: PUSH
69214: LD_INT 11
69216: PUSH
69217: LD_INT 12
69219: PUSH
69220: LD_INT 15
69222: PUSH
69223: LD_INT 16
69225: PUSH
69226: LD_INT 20
69228: PUSH
69229: LD_INT 21
69231: PUSH
69232: LD_INT 22
69234: PUSH
69235: LD_INT 23
69237: PUSH
69238: LD_INT 25
69240: PUSH
69241: LD_INT 26
69243: PUSH
69244: LD_INT 30
69246: PUSH
69247: LD_INT 31
69249: PUSH
69250: LD_INT 32
69252: PUSH
69253: LD_INT 33
69255: PUSH
69256: LD_INT 34
69258: PUSH
69259: LD_INT 35
69261: PUSH
69262: LD_INT 36
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 101
69290: PUSH
69291: LD_INT 102
69293: PUSH
69294: LD_INT 103
69296: PUSH
69297: LD_INT 106
69299: PUSH
69300: LD_INT 108
69302: PUSH
69303: LD_INT 112
69305: PUSH
69306: LD_INT 113
69308: PUSH
69309: LD_INT 114
69311: PUSH
69312: LD_INT 115
69314: PUSH
69315: LD_INT 116
69317: PUSH
69318: LD_INT 117
69320: PUSH
69321: LD_INT 118
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: ST_TO_ADDR
69342: GO 69585
69344: LD_INT 19
69346: DOUBLE
69347: EQUAL
69348: IFTRUE 69352
69350: GO 69584
69352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
69353: LD_ADDR_VAR 0 2
69357: PUSH
69358: LD_INT 1
69360: PUSH
69361: LD_INT 2
69363: PUSH
69364: LD_INT 3
69366: PUSH
69367: LD_INT 4
69369: PUSH
69370: LD_INT 5
69372: PUSH
69373: LD_INT 6
69375: PUSH
69376: LD_INT 7
69378: PUSH
69379: LD_INT 8
69381: PUSH
69382: LD_INT 9
69384: PUSH
69385: LD_INT 10
69387: PUSH
69388: LD_INT 11
69390: PUSH
69391: LD_INT 12
69393: PUSH
69394: LD_INT 13
69396: PUSH
69397: LD_INT 14
69399: PUSH
69400: LD_INT 15
69402: PUSH
69403: LD_INT 16
69405: PUSH
69406: LD_INT 17
69408: PUSH
69409: LD_INT 18
69411: PUSH
69412: LD_INT 19
69414: PUSH
69415: LD_INT 20
69417: PUSH
69418: LD_INT 21
69420: PUSH
69421: LD_INT 22
69423: PUSH
69424: LD_INT 23
69426: PUSH
69427: LD_INT 24
69429: PUSH
69430: LD_INT 25
69432: PUSH
69433: LD_INT 26
69435: PUSH
69436: LD_INT 27
69438: PUSH
69439: LD_INT 28
69441: PUSH
69442: LD_INT 29
69444: PUSH
69445: LD_INT 30
69447: PUSH
69448: LD_INT 31
69450: PUSH
69451: LD_INT 32
69453: PUSH
69454: LD_INT 33
69456: PUSH
69457: LD_INT 34
69459: PUSH
69460: LD_INT 35
69462: PUSH
69463: LD_INT 36
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 101
69506: PUSH
69507: LD_INT 102
69509: PUSH
69510: LD_INT 103
69512: PUSH
69513: LD_INT 104
69515: PUSH
69516: LD_INT 105
69518: PUSH
69519: LD_INT 106
69521: PUSH
69522: LD_INT 107
69524: PUSH
69525: LD_INT 108
69527: PUSH
69528: LD_INT 109
69530: PUSH
69531: LD_INT 110
69533: PUSH
69534: LD_INT 111
69536: PUSH
69537: LD_INT 112
69539: PUSH
69540: LD_INT 113
69542: PUSH
69543: LD_INT 114
69545: PUSH
69546: LD_INT 115
69548: PUSH
69549: LD_INT 116
69551: PUSH
69552: LD_INT 117
69554: PUSH
69555: LD_INT 118
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: ST_TO_ADDR
69582: GO 69585
69584: POP
// end else
69585: GO 69816
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
69587: LD_ADDR_VAR 0 2
69591: PUSH
69592: LD_INT 1
69594: PUSH
69595: LD_INT 2
69597: PUSH
69598: LD_INT 3
69600: PUSH
69601: LD_INT 4
69603: PUSH
69604: LD_INT 5
69606: PUSH
69607: LD_INT 6
69609: PUSH
69610: LD_INT 7
69612: PUSH
69613: LD_INT 8
69615: PUSH
69616: LD_INT 9
69618: PUSH
69619: LD_INT 10
69621: PUSH
69622: LD_INT 11
69624: PUSH
69625: LD_INT 12
69627: PUSH
69628: LD_INT 13
69630: PUSH
69631: LD_INT 14
69633: PUSH
69634: LD_INT 15
69636: PUSH
69637: LD_INT 16
69639: PUSH
69640: LD_INT 17
69642: PUSH
69643: LD_INT 18
69645: PUSH
69646: LD_INT 19
69648: PUSH
69649: LD_INT 20
69651: PUSH
69652: LD_INT 21
69654: PUSH
69655: LD_INT 22
69657: PUSH
69658: LD_INT 23
69660: PUSH
69661: LD_INT 24
69663: PUSH
69664: LD_INT 25
69666: PUSH
69667: LD_INT 26
69669: PUSH
69670: LD_INT 27
69672: PUSH
69673: LD_INT 28
69675: PUSH
69676: LD_INT 29
69678: PUSH
69679: LD_INT 30
69681: PUSH
69682: LD_INT 31
69684: PUSH
69685: LD_INT 32
69687: PUSH
69688: LD_INT 33
69690: PUSH
69691: LD_INT 34
69693: PUSH
69694: LD_INT 35
69696: PUSH
69697: LD_INT 36
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 101
69740: PUSH
69741: LD_INT 102
69743: PUSH
69744: LD_INT 103
69746: PUSH
69747: LD_INT 104
69749: PUSH
69750: LD_INT 105
69752: PUSH
69753: LD_INT 106
69755: PUSH
69756: LD_INT 107
69758: PUSH
69759: LD_INT 108
69761: PUSH
69762: LD_INT 109
69764: PUSH
69765: LD_INT 110
69767: PUSH
69768: LD_INT 111
69770: PUSH
69771: LD_INT 112
69773: PUSH
69774: LD_INT 113
69776: PUSH
69777: LD_INT 114
69779: PUSH
69780: LD_INT 115
69782: PUSH
69783: LD_INT 116
69785: PUSH
69786: LD_INT 117
69788: PUSH
69789: LD_INT 118
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: ST_TO_ADDR
// if result then
69816: LD_VAR 0 2
69820: IFFALSE 70606
// begin normal :=  ;
69822: LD_ADDR_VAR 0 5
69826: PUSH
69827: LD_STRING 
69829: ST_TO_ADDR
// hardcore :=  ;
69830: LD_ADDR_VAR 0 6
69834: PUSH
69835: LD_STRING 
69837: ST_TO_ADDR
// active :=  ;
69838: LD_ADDR_VAR 0 7
69842: PUSH
69843: LD_STRING 
69845: ST_TO_ADDR
// for i = 1 to normalCounter do
69846: LD_ADDR_VAR 0 8
69850: PUSH
69851: DOUBLE
69852: LD_INT 1
69854: DEC
69855: ST_TO_ADDR
69856: LD_EXP 64
69860: PUSH
69861: FOR_TO
69862: IFFALSE 69963
// begin tmp := 0 ;
69864: LD_ADDR_VAR 0 3
69868: PUSH
69869: LD_STRING 0
69871: ST_TO_ADDR
// if result [ 1 ] then
69872: LD_VAR 0 2
69876: PUSH
69877: LD_INT 1
69879: ARRAY
69880: IFFALSE 69945
// if result [ 1 ] [ 1 ] = i then
69882: LD_VAR 0 2
69886: PUSH
69887: LD_INT 1
69889: ARRAY
69890: PUSH
69891: LD_INT 1
69893: ARRAY
69894: PUSH
69895: LD_VAR 0 8
69899: EQUAL
69900: IFFALSE 69945
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
69902: LD_ADDR_VAR 0 2
69906: PUSH
69907: LD_VAR 0 2
69911: PPUSH
69912: LD_INT 1
69914: PPUSH
69915: LD_VAR 0 2
69919: PUSH
69920: LD_INT 1
69922: ARRAY
69923: PPUSH
69924: LD_INT 1
69926: PPUSH
69927: CALL_OW 3
69931: PPUSH
69932: CALL_OW 1
69936: ST_TO_ADDR
// tmp := 1 ;
69937: LD_ADDR_VAR 0 3
69941: PUSH
69942: LD_STRING 1
69944: ST_TO_ADDR
// end ; normal := normal & tmp ;
69945: LD_ADDR_VAR 0 5
69949: PUSH
69950: LD_VAR 0 5
69954: PUSH
69955: LD_VAR 0 3
69959: STR
69960: ST_TO_ADDR
// end ;
69961: GO 69861
69963: POP
69964: POP
// for i = 1 to hardcoreCounter do
69965: LD_ADDR_VAR 0 8
69969: PUSH
69970: DOUBLE
69971: LD_INT 1
69973: DEC
69974: ST_TO_ADDR
69975: LD_EXP 65
69979: PUSH
69980: FOR_TO
69981: IFFALSE 70086
// begin tmp := 0 ;
69983: LD_ADDR_VAR 0 3
69987: PUSH
69988: LD_STRING 0
69990: ST_TO_ADDR
// if result [ 2 ] then
69991: LD_VAR 0 2
69995: PUSH
69996: LD_INT 2
69998: ARRAY
69999: IFFALSE 70068
// if result [ 2 ] [ 1 ] = 100 + i then
70001: LD_VAR 0 2
70005: PUSH
70006: LD_INT 2
70008: ARRAY
70009: PUSH
70010: LD_INT 1
70012: ARRAY
70013: PUSH
70014: LD_INT 100
70016: PUSH
70017: LD_VAR 0 8
70021: PLUS
70022: EQUAL
70023: IFFALSE 70068
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
70025: LD_ADDR_VAR 0 2
70029: PUSH
70030: LD_VAR 0 2
70034: PPUSH
70035: LD_INT 2
70037: PPUSH
70038: LD_VAR 0 2
70042: PUSH
70043: LD_INT 2
70045: ARRAY
70046: PPUSH
70047: LD_INT 1
70049: PPUSH
70050: CALL_OW 3
70054: PPUSH
70055: CALL_OW 1
70059: ST_TO_ADDR
// tmp := 1 ;
70060: LD_ADDR_VAR 0 3
70064: PUSH
70065: LD_STRING 1
70067: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
70068: LD_ADDR_VAR 0 6
70072: PUSH
70073: LD_VAR 0 6
70077: PUSH
70078: LD_VAR 0 3
70082: STR
70083: ST_TO_ADDR
// end ;
70084: GO 69980
70086: POP
70087: POP
// if isGameLoad then
70088: LD_VAR 0 1
70092: IFFALSE 70567
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
70094: LD_ADDR_VAR 0 4
70098: PUSH
70099: LD_EXP 68
70103: PUSH
70104: LD_EXP 67
70108: PUSH
70109: LD_EXP 69
70113: PUSH
70114: LD_EXP 66
70118: PUSH
70119: LD_EXP 70
70123: PUSH
70124: LD_EXP 71
70128: PUSH
70129: LD_EXP 72
70133: PUSH
70134: LD_EXP 73
70138: PUSH
70139: LD_EXP 74
70143: PUSH
70144: LD_EXP 75
70148: PUSH
70149: LD_EXP 76
70153: PUSH
70154: LD_EXP 77
70158: PUSH
70159: LD_EXP 78
70163: PUSH
70164: LD_EXP 79
70168: PUSH
70169: LD_EXP 87
70173: PUSH
70174: LD_EXP 88
70178: PUSH
70179: LD_EXP 89
70183: PUSH
70184: LD_EXP 90
70188: PUSH
70189: LD_EXP 92
70193: PUSH
70194: LD_EXP 93
70198: PUSH
70199: LD_EXP 94
70203: PUSH
70204: LD_EXP 97
70208: PUSH
70209: LD_EXP 99
70213: PUSH
70214: LD_EXP 100
70218: PUSH
70219: LD_EXP 101
70223: PUSH
70224: LD_EXP 103
70228: PUSH
70229: LD_EXP 104
70233: PUSH
70234: LD_EXP 107
70238: PUSH
70239: LD_EXP 108
70243: PUSH
70244: LD_EXP 109
70248: PUSH
70249: LD_EXP 110
70253: PUSH
70254: LD_EXP 111
70258: PUSH
70259: LD_EXP 112
70263: PUSH
70264: LD_EXP 113
70268: PUSH
70269: LD_EXP 114
70273: PUSH
70274: LD_EXP 115
70278: PUSH
70279: LD_EXP 80
70283: PUSH
70284: LD_EXP 81
70288: PUSH
70289: LD_EXP 84
70293: PUSH
70294: LD_EXP 85
70298: PUSH
70299: LD_EXP 86
70303: PUSH
70304: LD_EXP 82
70308: PUSH
70309: LD_EXP 83
70313: PUSH
70314: LD_EXP 91
70318: PUSH
70319: LD_EXP 95
70323: PUSH
70324: LD_EXP 96
70328: PUSH
70329: LD_EXP 98
70333: PUSH
70334: LD_EXP 102
70338: PUSH
70339: LD_EXP 105
70343: PUSH
70344: LD_EXP 106
70348: PUSH
70349: LD_EXP 116
70353: PUSH
70354: LD_EXP 117
70358: PUSH
70359: LD_EXP 118
70363: PUSH
70364: LD_EXP 119
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: ST_TO_ADDR
// tmp :=  ;
70425: LD_ADDR_VAR 0 3
70429: PUSH
70430: LD_STRING 
70432: ST_TO_ADDR
// for i = 1 to normalCounter do
70433: LD_ADDR_VAR 0 8
70437: PUSH
70438: DOUBLE
70439: LD_INT 1
70441: DEC
70442: ST_TO_ADDR
70443: LD_EXP 64
70447: PUSH
70448: FOR_TO
70449: IFFALSE 70485
// begin if flags [ i ] then
70451: LD_VAR 0 4
70455: PUSH
70456: LD_VAR 0 8
70460: ARRAY
70461: IFFALSE 70483
// tmp := tmp & i & ; ;
70463: LD_ADDR_VAR 0 3
70467: PUSH
70468: LD_VAR 0 3
70472: PUSH
70473: LD_VAR 0 8
70477: STR
70478: PUSH
70479: LD_STRING ;
70481: STR
70482: ST_TO_ADDR
// end ;
70483: GO 70448
70485: POP
70486: POP
// for i = 1 to hardcoreCounter do
70487: LD_ADDR_VAR 0 8
70491: PUSH
70492: DOUBLE
70493: LD_INT 1
70495: DEC
70496: ST_TO_ADDR
70497: LD_EXP 65
70501: PUSH
70502: FOR_TO
70503: IFFALSE 70549
// begin if flags [ normalCounter + i ] then
70505: LD_VAR 0 4
70509: PUSH
70510: LD_EXP 64
70514: PUSH
70515: LD_VAR 0 8
70519: PLUS
70520: ARRAY
70521: IFFALSE 70547
// tmp := tmp & ( 100 + i ) & ; ;
70523: LD_ADDR_VAR 0 3
70527: PUSH
70528: LD_VAR 0 3
70532: PUSH
70533: LD_INT 100
70535: PUSH
70536: LD_VAR 0 8
70540: PLUS
70541: STR
70542: PUSH
70543: LD_STRING ;
70545: STR
70546: ST_TO_ADDR
// end ;
70547: GO 70502
70549: POP
70550: POP
// if tmp then
70551: LD_VAR 0 3
70555: IFFALSE 70567
// active := tmp ;
70557: LD_ADDR_VAR 0 7
70561: PUSH
70562: LD_VAR 0 3
70566: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
70567: LD_STRING getStreamItemsFromMission("
70569: PUSH
70570: LD_VAR 0 5
70574: STR
70575: PUSH
70576: LD_STRING ","
70578: STR
70579: PUSH
70580: LD_VAR 0 6
70584: STR
70585: PUSH
70586: LD_STRING ","
70588: STR
70589: PUSH
70590: LD_VAR 0 7
70594: STR
70595: PUSH
70596: LD_STRING ")
70598: STR
70599: PPUSH
70600: CALL_OW 559
// end else
70604: GO 70613
// ToLua ( getStreamItemsFromMission("","","") ) ;
70606: LD_STRING getStreamItemsFromMission("","","")
70608: PPUSH
70609: CALL_OW 559
// end ;
70613: LD_VAR 0 2
70617: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
70618: LD_EXP 63
70622: PUSH
70623: LD_EXP 68
70627: AND
70628: IFFALSE 70752
70630: GO 70632
70632: DISABLE
70633: LD_INT 0
70635: PPUSH
70636: PPUSH
// begin enable ;
70637: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
70638: LD_ADDR_VAR 0 2
70642: PUSH
70643: LD_INT 22
70645: PUSH
70646: LD_OWVAR 2
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 2
70657: PUSH
70658: LD_INT 34
70660: PUSH
70661: LD_INT 7
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 34
70670: PUSH
70671: LD_INT 45
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 34
70680: PUSH
70681: LD_INT 28
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 34
70690: PUSH
70691: LD_INT 47
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PPUSH
70709: CALL_OW 69
70713: ST_TO_ADDR
// if not tmp then
70714: LD_VAR 0 2
70718: NOT
70719: IFFALSE 70723
// exit ;
70721: GO 70752
// for i in tmp do
70723: LD_ADDR_VAR 0 1
70727: PUSH
70728: LD_VAR 0 2
70732: PUSH
70733: FOR_IN
70734: IFFALSE 70750
// begin SetLives ( i , 0 ) ;
70736: LD_VAR 0 1
70740: PPUSH
70741: LD_INT 0
70743: PPUSH
70744: CALL_OW 234
// end ;
70748: GO 70733
70750: POP
70751: POP
// end ;
70752: PPOPN 2
70754: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
70755: LD_EXP 63
70759: PUSH
70760: LD_EXP 69
70764: AND
70765: IFFALSE 70849
70767: GO 70769
70769: DISABLE
70770: LD_INT 0
70772: PPUSH
70773: PPUSH
// begin enable ;
70774: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
70775: LD_ADDR_VAR 0 2
70779: PUSH
70780: LD_INT 22
70782: PUSH
70783: LD_OWVAR 2
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 32
70794: PUSH
70795: LD_INT 3
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PPUSH
70806: CALL_OW 69
70810: ST_TO_ADDR
// if not tmp then
70811: LD_VAR 0 2
70815: NOT
70816: IFFALSE 70820
// exit ;
70818: GO 70849
// for i in tmp do
70820: LD_ADDR_VAR 0 1
70824: PUSH
70825: LD_VAR 0 2
70829: PUSH
70830: FOR_IN
70831: IFFALSE 70847
// begin SetLives ( i , 0 ) ;
70833: LD_VAR 0 1
70837: PPUSH
70838: LD_INT 0
70840: PPUSH
70841: CALL_OW 234
// end ;
70845: GO 70830
70847: POP
70848: POP
// end ;
70849: PPOPN 2
70851: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
70852: LD_EXP 63
70856: PUSH
70857: LD_EXP 66
70861: AND
70862: IFFALSE 70955
70864: GO 70866
70866: DISABLE
70867: LD_INT 0
70869: PPUSH
// begin enable ;
70870: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
70871: LD_ADDR_VAR 0 1
70875: PUSH
70876: LD_INT 22
70878: PUSH
70879: LD_OWVAR 2
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 2
70890: PUSH
70891: LD_INT 25
70893: PUSH
70894: LD_INT 5
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 25
70903: PUSH
70904: LD_INT 9
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 25
70913: PUSH
70914: LD_INT 8
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PPUSH
70931: CALL_OW 69
70935: PUSH
70936: FOR_IN
70937: IFFALSE 70953
// begin SetClass ( i , 1 ) ;
70939: LD_VAR 0 1
70943: PPUSH
70944: LD_INT 1
70946: PPUSH
70947: CALL_OW 336
// end ;
70951: GO 70936
70953: POP
70954: POP
// end ;
70955: PPOPN 1
70957: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
70958: LD_EXP 63
70962: PUSH
70963: LD_EXP 67
70967: AND
70968: PUSH
70969: LD_OWVAR 65
70973: PUSH
70974: LD_INT 7
70976: LESS
70977: AND
70978: IFFALSE 70992
70980: GO 70982
70982: DISABLE
// begin enable ;
70983: ENABLE
// game_speed := 7 ;
70984: LD_ADDR_OWVAR 65
70988: PUSH
70989: LD_INT 7
70991: ST_TO_ADDR
// end ;
70992: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
70993: LD_EXP 63
70997: PUSH
70998: LD_EXP 70
71002: AND
71003: IFFALSE 71205
71005: GO 71007
71007: DISABLE
71008: LD_INT 0
71010: PPUSH
71011: PPUSH
71012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
71013: LD_ADDR_VAR 0 3
71017: PUSH
71018: LD_INT 81
71020: PUSH
71021: LD_OWVAR 2
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 21
71032: PUSH
71033: LD_INT 1
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PPUSH
71044: CALL_OW 69
71048: ST_TO_ADDR
// if not tmp then
71049: LD_VAR 0 3
71053: NOT
71054: IFFALSE 71058
// exit ;
71056: GO 71205
// if tmp > 5 then
71058: LD_VAR 0 3
71062: PUSH
71063: LD_INT 5
71065: GREATER
71066: IFFALSE 71078
// k := 5 else
71068: LD_ADDR_VAR 0 2
71072: PUSH
71073: LD_INT 5
71075: ST_TO_ADDR
71076: GO 71088
// k := tmp ;
71078: LD_ADDR_VAR 0 2
71082: PUSH
71083: LD_VAR 0 3
71087: ST_TO_ADDR
// for i := 1 to k do
71088: LD_ADDR_VAR 0 1
71092: PUSH
71093: DOUBLE
71094: LD_INT 1
71096: DEC
71097: ST_TO_ADDR
71098: LD_VAR 0 2
71102: PUSH
71103: FOR_TO
71104: IFFALSE 71203
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
71106: LD_VAR 0 3
71110: PUSH
71111: LD_VAR 0 1
71115: ARRAY
71116: PPUSH
71117: LD_VAR 0 1
71121: PUSH
71122: LD_INT 4
71124: MOD
71125: PUSH
71126: LD_INT 1
71128: PLUS
71129: PPUSH
71130: CALL_OW 259
71134: PUSH
71135: LD_INT 10
71137: LESS
71138: IFFALSE 71201
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
71140: LD_VAR 0 3
71144: PUSH
71145: LD_VAR 0 1
71149: ARRAY
71150: PPUSH
71151: LD_VAR 0 1
71155: PUSH
71156: LD_INT 4
71158: MOD
71159: PUSH
71160: LD_INT 1
71162: PLUS
71163: PPUSH
71164: LD_VAR 0 3
71168: PUSH
71169: LD_VAR 0 1
71173: ARRAY
71174: PPUSH
71175: LD_VAR 0 1
71179: PUSH
71180: LD_INT 4
71182: MOD
71183: PUSH
71184: LD_INT 1
71186: PLUS
71187: PPUSH
71188: CALL_OW 259
71192: PUSH
71193: LD_INT 1
71195: PLUS
71196: PPUSH
71197: CALL_OW 237
71201: GO 71103
71203: POP
71204: POP
// end ;
71205: PPOPN 3
71207: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
71208: LD_EXP 63
71212: PUSH
71213: LD_EXP 71
71217: AND
71218: IFFALSE 71238
71220: GO 71222
71222: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
71223: LD_INT 4
71225: PPUSH
71226: LD_OWVAR 2
71230: PPUSH
71231: LD_INT 0
71233: PPUSH
71234: CALL_OW 324
71238: END
// every 0 0$1 trigger StreamModeActive and sShovel do
71239: LD_EXP 63
71243: PUSH
71244: LD_EXP 100
71248: AND
71249: IFFALSE 71269
71251: GO 71253
71253: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
71254: LD_INT 19
71256: PPUSH
71257: LD_OWVAR 2
71261: PPUSH
71262: LD_INT 0
71264: PPUSH
71265: CALL_OW 324
71269: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
71270: LD_EXP 63
71274: PUSH
71275: LD_EXP 72
71279: AND
71280: IFFALSE 71382
71282: GO 71284
71284: DISABLE
71285: LD_INT 0
71287: PPUSH
71288: PPUSH
// begin enable ;
71289: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
71290: LD_ADDR_VAR 0 2
71294: PUSH
71295: LD_INT 22
71297: PUSH
71298: LD_OWVAR 2
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 2
71309: PUSH
71310: LD_INT 34
71312: PUSH
71313: LD_INT 11
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 34
71322: PUSH
71323: LD_INT 30
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: LIST
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: PPUSH
71339: CALL_OW 69
71343: ST_TO_ADDR
// if not tmp then
71344: LD_VAR 0 2
71348: NOT
71349: IFFALSE 71353
// exit ;
71351: GO 71382
// for i in tmp do
71353: LD_ADDR_VAR 0 1
71357: PUSH
71358: LD_VAR 0 2
71362: PUSH
71363: FOR_IN
71364: IFFALSE 71380
// begin SetLives ( i , 0 ) ;
71366: LD_VAR 0 1
71370: PPUSH
71371: LD_INT 0
71373: PPUSH
71374: CALL_OW 234
// end ;
71378: GO 71363
71380: POP
71381: POP
// end ;
71382: PPOPN 2
71384: END
// every 0 0$1 trigger StreamModeActive and sBunker do
71385: LD_EXP 63
71389: PUSH
71390: LD_EXP 73
71394: AND
71395: IFFALSE 71415
71397: GO 71399
71399: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
71400: LD_INT 32
71402: PPUSH
71403: LD_OWVAR 2
71407: PPUSH
71408: LD_INT 0
71410: PPUSH
71411: CALL_OW 324
71415: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
71416: LD_EXP 63
71420: PUSH
71421: LD_EXP 74
71425: AND
71426: IFFALSE 71607
71428: GO 71430
71430: DISABLE
71431: LD_INT 0
71433: PPUSH
71434: PPUSH
71435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
71436: LD_ADDR_VAR 0 2
71440: PUSH
71441: LD_INT 22
71443: PUSH
71444: LD_OWVAR 2
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: LD_INT 33
71455: PUSH
71456: LD_INT 3
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PPUSH
71467: CALL_OW 69
71471: ST_TO_ADDR
// if not tmp then
71472: LD_VAR 0 2
71476: NOT
71477: IFFALSE 71481
// exit ;
71479: GO 71607
// side := 0 ;
71481: LD_ADDR_VAR 0 3
71485: PUSH
71486: LD_INT 0
71488: ST_TO_ADDR
// for i := 1 to 8 do
71489: LD_ADDR_VAR 0 1
71493: PUSH
71494: DOUBLE
71495: LD_INT 1
71497: DEC
71498: ST_TO_ADDR
71499: LD_INT 8
71501: PUSH
71502: FOR_TO
71503: IFFALSE 71551
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
71505: LD_OWVAR 2
71509: PUSH
71510: LD_VAR 0 1
71514: NONEQUAL
71515: PUSH
71516: LD_OWVAR 2
71520: PPUSH
71521: LD_VAR 0 1
71525: PPUSH
71526: CALL_OW 81
71530: PUSH
71531: LD_INT 2
71533: EQUAL
71534: AND
71535: IFFALSE 71549
// begin side := i ;
71537: LD_ADDR_VAR 0 3
71541: PUSH
71542: LD_VAR 0 1
71546: ST_TO_ADDR
// break ;
71547: GO 71551
// end ;
71549: GO 71502
71551: POP
71552: POP
// if not side then
71553: LD_VAR 0 3
71557: NOT
71558: IFFALSE 71562
// exit ;
71560: GO 71607
// for i := 1 to tmp do
71562: LD_ADDR_VAR 0 1
71566: PUSH
71567: DOUBLE
71568: LD_INT 1
71570: DEC
71571: ST_TO_ADDR
71572: LD_VAR 0 2
71576: PUSH
71577: FOR_TO
71578: IFFALSE 71605
// if Prob ( 60 ) then
71580: LD_INT 60
71582: PPUSH
71583: CALL_OW 13
71587: IFFALSE 71603
// SetSide ( i , side ) ;
71589: LD_VAR 0 1
71593: PPUSH
71594: LD_VAR 0 3
71598: PPUSH
71599: CALL_OW 235
71603: GO 71577
71605: POP
71606: POP
// end ;
71607: PPOPN 3
71609: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
71610: LD_EXP 63
71614: PUSH
71615: LD_EXP 76
71619: AND
71620: IFFALSE 71739
71622: GO 71624
71624: DISABLE
71625: LD_INT 0
71627: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
71628: LD_ADDR_VAR 0 1
71632: PUSH
71633: LD_INT 22
71635: PUSH
71636: LD_OWVAR 2
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: PUSH
71645: LD_INT 21
71647: PUSH
71648: LD_INT 1
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 3
71657: PUSH
71658: LD_INT 23
71660: PUSH
71661: LD_INT 0
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: LIST
71676: PPUSH
71677: CALL_OW 69
71681: PUSH
71682: FOR_IN
71683: IFFALSE 71737
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
71685: LD_VAR 0 1
71689: PPUSH
71690: CALL_OW 257
71694: PUSH
71695: LD_INT 1
71697: PUSH
71698: LD_INT 2
71700: PUSH
71701: LD_INT 3
71703: PUSH
71704: LD_INT 4
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: IN
71713: IFFALSE 71735
// SetClass ( un , rand ( 1 , 4 ) ) ;
71715: LD_VAR 0 1
71719: PPUSH
71720: LD_INT 1
71722: PPUSH
71723: LD_INT 4
71725: PPUSH
71726: CALL_OW 12
71730: PPUSH
71731: CALL_OW 336
71735: GO 71682
71737: POP
71738: POP
// end ;
71739: PPOPN 1
71741: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
71742: LD_EXP 63
71746: PUSH
71747: LD_EXP 75
71751: AND
71752: IFFALSE 71831
71754: GO 71756
71756: DISABLE
71757: LD_INT 0
71759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71760: LD_ADDR_VAR 0 1
71764: PUSH
71765: LD_INT 22
71767: PUSH
71768: LD_OWVAR 2
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 21
71779: PUSH
71780: LD_INT 3
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PPUSH
71791: CALL_OW 69
71795: ST_TO_ADDR
// if not tmp then
71796: LD_VAR 0 1
71800: NOT
71801: IFFALSE 71805
// exit ;
71803: GO 71831
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
71805: LD_VAR 0 1
71809: PUSH
71810: LD_INT 1
71812: PPUSH
71813: LD_VAR 0 1
71817: PPUSH
71818: CALL_OW 12
71822: ARRAY
71823: PPUSH
71824: LD_INT 100
71826: PPUSH
71827: CALL_OW 234
// end ;
71831: PPOPN 1
71833: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
71834: LD_EXP 63
71838: PUSH
71839: LD_EXP 77
71843: AND
71844: IFFALSE 71942
71846: GO 71848
71848: DISABLE
71849: LD_INT 0
71851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71852: LD_ADDR_VAR 0 1
71856: PUSH
71857: LD_INT 22
71859: PUSH
71860: LD_OWVAR 2
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 21
71871: PUSH
71872: LD_INT 1
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PPUSH
71883: CALL_OW 69
71887: ST_TO_ADDR
// if not tmp then
71888: LD_VAR 0 1
71892: NOT
71893: IFFALSE 71897
// exit ;
71895: GO 71942
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
71897: LD_VAR 0 1
71901: PUSH
71902: LD_INT 1
71904: PPUSH
71905: LD_VAR 0 1
71909: PPUSH
71910: CALL_OW 12
71914: ARRAY
71915: PPUSH
71916: LD_INT 1
71918: PPUSH
71919: LD_INT 4
71921: PPUSH
71922: CALL_OW 12
71926: PPUSH
71927: LD_INT 3000
71929: PPUSH
71930: LD_INT 9000
71932: PPUSH
71933: CALL_OW 12
71937: PPUSH
71938: CALL_OW 492
// end ;
71942: PPOPN 1
71944: END
// every 0 0$1 trigger StreamModeActive and sDepot do
71945: LD_EXP 63
71949: PUSH
71950: LD_EXP 78
71954: AND
71955: IFFALSE 71975
71957: GO 71959
71959: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
71960: LD_INT 1
71962: PPUSH
71963: LD_OWVAR 2
71967: PPUSH
71968: LD_INT 0
71970: PPUSH
71971: CALL_OW 324
71975: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
71976: LD_EXP 63
71980: PUSH
71981: LD_EXP 79
71985: AND
71986: IFFALSE 72069
71988: GO 71990
71990: DISABLE
71991: LD_INT 0
71993: PPUSH
71994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71995: LD_ADDR_VAR 0 2
71999: PUSH
72000: LD_INT 22
72002: PUSH
72003: LD_OWVAR 2
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: LD_INT 21
72014: PUSH
72015: LD_INT 3
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: PPUSH
72026: CALL_OW 69
72030: ST_TO_ADDR
// if not tmp then
72031: LD_VAR 0 2
72035: NOT
72036: IFFALSE 72040
// exit ;
72038: GO 72069
// for i in tmp do
72040: LD_ADDR_VAR 0 1
72044: PUSH
72045: LD_VAR 0 2
72049: PUSH
72050: FOR_IN
72051: IFFALSE 72067
// SetBLevel ( i , 10 ) ;
72053: LD_VAR 0 1
72057: PPUSH
72058: LD_INT 10
72060: PPUSH
72061: CALL_OW 241
72065: GO 72050
72067: POP
72068: POP
// end ;
72069: PPOPN 2
72071: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
72072: LD_EXP 63
72076: PUSH
72077: LD_EXP 80
72081: AND
72082: IFFALSE 72193
72084: GO 72086
72086: DISABLE
72087: LD_INT 0
72089: PPUSH
72090: PPUSH
72091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72092: LD_ADDR_VAR 0 3
72096: PUSH
72097: LD_INT 22
72099: PUSH
72100: LD_OWVAR 2
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 25
72111: PUSH
72112: LD_INT 1
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PPUSH
72123: CALL_OW 69
72127: ST_TO_ADDR
// if not tmp then
72128: LD_VAR 0 3
72132: NOT
72133: IFFALSE 72137
// exit ;
72135: GO 72193
// un := tmp [ rand ( 1 , tmp ) ] ;
72137: LD_ADDR_VAR 0 2
72141: PUSH
72142: LD_VAR 0 3
72146: PUSH
72147: LD_INT 1
72149: PPUSH
72150: LD_VAR 0 3
72154: PPUSH
72155: CALL_OW 12
72159: ARRAY
72160: ST_TO_ADDR
// if Crawls ( un ) then
72161: LD_VAR 0 2
72165: PPUSH
72166: CALL_OW 318
72170: IFFALSE 72181
// ComWalk ( un ) ;
72172: LD_VAR 0 2
72176: PPUSH
72177: CALL_OW 138
// SetClass ( un , class_sniper ) ;
72181: LD_VAR 0 2
72185: PPUSH
72186: LD_INT 5
72188: PPUSH
72189: CALL_OW 336
// end ;
72193: PPOPN 3
72195: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
72196: LD_EXP 63
72200: PUSH
72201: LD_EXP 81
72205: AND
72206: PUSH
72207: LD_OWVAR 67
72211: PUSH
72212: LD_INT 4
72214: LESS
72215: AND
72216: IFFALSE 72235
72218: GO 72220
72220: DISABLE
// begin Difficulty := Difficulty + 1 ;
72221: LD_ADDR_OWVAR 67
72225: PUSH
72226: LD_OWVAR 67
72230: PUSH
72231: LD_INT 1
72233: PLUS
72234: ST_TO_ADDR
// end ;
72235: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
72236: LD_EXP 63
72240: PUSH
72241: LD_EXP 82
72245: AND
72246: IFFALSE 72349
72248: GO 72250
72250: DISABLE
72251: LD_INT 0
72253: PPUSH
// begin for i := 1 to 5 do
72254: LD_ADDR_VAR 0 1
72258: PUSH
72259: DOUBLE
72260: LD_INT 1
72262: DEC
72263: ST_TO_ADDR
72264: LD_INT 5
72266: PUSH
72267: FOR_TO
72268: IFFALSE 72347
// begin uc_nation := nation_nature ;
72270: LD_ADDR_OWVAR 21
72274: PUSH
72275: LD_INT 0
72277: ST_TO_ADDR
// uc_side := 0 ;
72278: LD_ADDR_OWVAR 20
72282: PUSH
72283: LD_INT 0
72285: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72286: LD_ADDR_OWVAR 29
72290: PUSH
72291: LD_INT 12
72293: PUSH
72294: LD_INT 12
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: ST_TO_ADDR
// hc_agressivity := 20 ;
72301: LD_ADDR_OWVAR 35
72305: PUSH
72306: LD_INT 20
72308: ST_TO_ADDR
// hc_class := class_tiger ;
72309: LD_ADDR_OWVAR 28
72313: PUSH
72314: LD_INT 14
72316: ST_TO_ADDR
// hc_gallery :=  ;
72317: LD_ADDR_OWVAR 33
72321: PUSH
72322: LD_STRING 
72324: ST_TO_ADDR
// hc_name :=  ;
72325: LD_ADDR_OWVAR 26
72329: PUSH
72330: LD_STRING 
72332: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
72333: CALL_OW 44
72337: PPUSH
72338: LD_INT 0
72340: PPUSH
72341: CALL_OW 51
// end ;
72345: GO 72267
72347: POP
72348: POP
// end ;
72349: PPOPN 1
72351: END
// every 0 0$1 trigger StreamModeActive and sBomb do
72352: LD_EXP 63
72356: PUSH
72357: LD_EXP 83
72361: AND
72362: IFFALSE 72371
72364: GO 72366
72366: DISABLE
// StreamSibBomb ;
72367: CALL 72372 0 0
72371: END
// export function StreamSibBomb ; var i , x , y ; begin
72372: LD_INT 0
72374: PPUSH
72375: PPUSH
72376: PPUSH
72377: PPUSH
// result := false ;
72378: LD_ADDR_VAR 0 1
72382: PUSH
72383: LD_INT 0
72385: ST_TO_ADDR
// for i := 1 to 16 do
72386: LD_ADDR_VAR 0 2
72390: PUSH
72391: DOUBLE
72392: LD_INT 1
72394: DEC
72395: ST_TO_ADDR
72396: LD_INT 16
72398: PUSH
72399: FOR_TO
72400: IFFALSE 72599
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72402: LD_ADDR_VAR 0 3
72406: PUSH
72407: LD_INT 10
72409: PUSH
72410: LD_INT 20
72412: PUSH
72413: LD_INT 30
72415: PUSH
72416: LD_INT 40
72418: PUSH
72419: LD_INT 50
72421: PUSH
72422: LD_INT 60
72424: PUSH
72425: LD_INT 70
72427: PUSH
72428: LD_INT 80
72430: PUSH
72431: LD_INT 90
72433: PUSH
72434: LD_INT 100
72436: PUSH
72437: LD_INT 110
72439: PUSH
72440: LD_INT 120
72442: PUSH
72443: LD_INT 130
72445: PUSH
72446: LD_INT 140
72448: PUSH
72449: LD_INT 150
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: PUSH
72469: LD_INT 1
72471: PPUSH
72472: LD_INT 15
72474: PPUSH
72475: CALL_OW 12
72479: ARRAY
72480: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72481: LD_ADDR_VAR 0 4
72485: PUSH
72486: LD_INT 10
72488: PUSH
72489: LD_INT 20
72491: PUSH
72492: LD_INT 30
72494: PUSH
72495: LD_INT 40
72497: PUSH
72498: LD_INT 50
72500: PUSH
72501: LD_INT 60
72503: PUSH
72504: LD_INT 70
72506: PUSH
72507: LD_INT 80
72509: PUSH
72510: LD_INT 90
72512: PUSH
72513: LD_INT 100
72515: PUSH
72516: LD_INT 110
72518: PUSH
72519: LD_INT 120
72521: PUSH
72522: LD_INT 130
72524: PUSH
72525: LD_INT 140
72527: PUSH
72528: LD_INT 150
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 1
72550: PPUSH
72551: LD_INT 15
72553: PPUSH
72554: CALL_OW 12
72558: ARRAY
72559: ST_TO_ADDR
// if ValidHex ( x , y ) then
72560: LD_VAR 0 3
72564: PPUSH
72565: LD_VAR 0 4
72569: PPUSH
72570: CALL_OW 488
72574: IFFALSE 72597
// begin result := [ x , y ] ;
72576: LD_ADDR_VAR 0 1
72580: PUSH
72581: LD_VAR 0 3
72585: PUSH
72586: LD_VAR 0 4
72590: PUSH
72591: EMPTY
72592: LIST
72593: LIST
72594: ST_TO_ADDR
// break ;
72595: GO 72599
// end ; end ;
72597: GO 72399
72599: POP
72600: POP
// if result then
72601: LD_VAR 0 1
72605: IFFALSE 72665
// begin ToLua ( playSibBomb() ) ;
72607: LD_STRING playSibBomb()
72609: PPUSH
72610: CALL_OW 559
// wait ( 0 0$14 ) ;
72614: LD_INT 490
72616: PPUSH
72617: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
72621: LD_VAR 0 1
72625: PUSH
72626: LD_INT 1
72628: ARRAY
72629: PPUSH
72630: LD_VAR 0 1
72634: PUSH
72635: LD_INT 2
72637: ARRAY
72638: PPUSH
72639: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
72643: LD_VAR 0 1
72647: PUSH
72648: LD_INT 1
72650: ARRAY
72651: PPUSH
72652: LD_VAR 0 1
72656: PUSH
72657: LD_INT 2
72659: ARRAY
72660: PPUSH
72661: CALL_OW 429
// end ; end ;
72665: LD_VAR 0 1
72669: RET
// every 0 0$1 trigger StreamModeActive and sReset do
72670: LD_EXP 63
72674: PUSH
72675: LD_EXP 85
72679: AND
72680: IFFALSE 72692
72682: GO 72684
72684: DISABLE
// YouLost (  ) ;
72685: LD_STRING 
72687: PPUSH
72688: CALL_OW 104
72692: END
// every 0 0$1 trigger StreamModeActive and sFog do
72693: LD_EXP 63
72697: PUSH
72698: LD_EXP 84
72702: AND
72703: IFFALSE 72717
72705: GO 72707
72707: DISABLE
// FogOff ( your_side ) ;
72708: LD_OWVAR 2
72712: PPUSH
72713: CALL_OW 344
72717: END
// every 0 0$1 trigger StreamModeActive and sSun do
72718: LD_EXP 63
72722: PUSH
72723: LD_EXP 86
72727: AND
72728: IFFALSE 72756
72730: GO 72732
72732: DISABLE
// begin solar_recharge_percent := 0 ;
72733: LD_ADDR_OWVAR 79
72737: PUSH
72738: LD_INT 0
72740: ST_TO_ADDR
// wait ( 5 5$00 ) ;
72741: LD_INT 10500
72743: PPUSH
72744: CALL_OW 67
// solar_recharge_percent := 100 ;
72748: LD_ADDR_OWVAR 79
72752: PUSH
72753: LD_INT 100
72755: ST_TO_ADDR
// end ;
72756: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
72757: LD_EXP 63
72761: PUSH
72762: LD_EXP 87
72766: AND
72767: IFFALSE 73006
72769: GO 72771
72771: DISABLE
72772: LD_INT 0
72774: PPUSH
72775: PPUSH
72776: PPUSH
// begin tmp := [ ] ;
72777: LD_ADDR_VAR 0 3
72781: PUSH
72782: EMPTY
72783: ST_TO_ADDR
// for i := 1 to 6 do
72784: LD_ADDR_VAR 0 1
72788: PUSH
72789: DOUBLE
72790: LD_INT 1
72792: DEC
72793: ST_TO_ADDR
72794: LD_INT 6
72796: PUSH
72797: FOR_TO
72798: IFFALSE 72903
// begin uc_nation := nation_nature ;
72800: LD_ADDR_OWVAR 21
72804: PUSH
72805: LD_INT 0
72807: ST_TO_ADDR
// uc_side := 0 ;
72808: LD_ADDR_OWVAR 20
72812: PUSH
72813: LD_INT 0
72815: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72816: LD_ADDR_OWVAR 29
72820: PUSH
72821: LD_INT 12
72823: PUSH
72824: LD_INT 12
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: ST_TO_ADDR
// hc_agressivity := 20 ;
72831: LD_ADDR_OWVAR 35
72835: PUSH
72836: LD_INT 20
72838: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
72839: LD_ADDR_OWVAR 28
72843: PUSH
72844: LD_INT 17
72846: ST_TO_ADDR
// hc_gallery :=  ;
72847: LD_ADDR_OWVAR 33
72851: PUSH
72852: LD_STRING 
72854: ST_TO_ADDR
// hc_name :=  ;
72855: LD_ADDR_OWVAR 26
72859: PUSH
72860: LD_STRING 
72862: ST_TO_ADDR
// un := CreateHuman ;
72863: LD_ADDR_VAR 0 2
72867: PUSH
72868: CALL_OW 44
72872: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
72873: LD_VAR 0 2
72877: PPUSH
72878: LD_INT 1
72880: PPUSH
72881: CALL_OW 51
// tmp := tmp ^ un ;
72885: LD_ADDR_VAR 0 3
72889: PUSH
72890: LD_VAR 0 3
72894: PUSH
72895: LD_VAR 0 2
72899: ADD
72900: ST_TO_ADDR
// end ;
72901: GO 72797
72903: POP
72904: POP
// repeat wait ( 0 0$1 ) ;
72905: LD_INT 35
72907: PPUSH
72908: CALL_OW 67
// for un in tmp do
72912: LD_ADDR_VAR 0 2
72916: PUSH
72917: LD_VAR 0 3
72921: PUSH
72922: FOR_IN
72923: IFFALSE 72997
// begin if IsDead ( un ) then
72925: LD_VAR 0 2
72929: PPUSH
72930: CALL_OW 301
72934: IFFALSE 72954
// begin tmp := tmp diff un ;
72936: LD_ADDR_VAR 0 3
72940: PUSH
72941: LD_VAR 0 3
72945: PUSH
72946: LD_VAR 0 2
72950: DIFF
72951: ST_TO_ADDR
// continue ;
72952: GO 72922
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
72954: LD_VAR 0 2
72958: PPUSH
72959: LD_INT 3
72961: PUSH
72962: LD_INT 22
72964: PUSH
72965: LD_INT 0
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: PPUSH
72976: CALL_OW 69
72980: PPUSH
72981: LD_VAR 0 2
72985: PPUSH
72986: CALL_OW 74
72990: PPUSH
72991: CALL_OW 115
// end ;
72995: GO 72922
72997: POP
72998: POP
// until not tmp ;
72999: LD_VAR 0 3
73003: NOT
73004: IFFALSE 72905
// end ;
73006: PPOPN 3
73008: END
// every 0 0$1 trigger StreamModeActive and sTroll do
73009: LD_EXP 63
73013: PUSH
73014: LD_EXP 88
73018: AND
73019: IFFALSE 73073
73021: GO 73023
73023: DISABLE
// begin ToLua ( displayTroll(); ) ;
73024: LD_STRING displayTroll();
73026: PPUSH
73027: CALL_OW 559
// wait ( 3 3$00 ) ;
73031: LD_INT 6300
73033: PPUSH
73034: CALL_OW 67
// ToLua ( hideTroll(); ) ;
73038: LD_STRING hideTroll();
73040: PPUSH
73041: CALL_OW 559
// wait ( 1 1$00 ) ;
73045: LD_INT 2100
73047: PPUSH
73048: CALL_OW 67
// ToLua ( displayTroll(); ) ;
73052: LD_STRING displayTroll();
73054: PPUSH
73055: CALL_OW 559
// wait ( 1 1$00 ) ;
73059: LD_INT 2100
73061: PPUSH
73062: CALL_OW 67
// ToLua ( hideTroll(); ) ;
73066: LD_STRING hideTroll();
73068: PPUSH
73069: CALL_OW 559
// end ;
73073: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
73074: LD_EXP 63
73078: PUSH
73079: LD_EXP 89
73083: AND
73084: IFFALSE 73147
73086: GO 73088
73088: DISABLE
73089: LD_INT 0
73091: PPUSH
// begin p := 0 ;
73092: LD_ADDR_VAR 0 1
73096: PUSH
73097: LD_INT 0
73099: ST_TO_ADDR
// repeat game_speed := 1 ;
73100: LD_ADDR_OWVAR 65
73104: PUSH
73105: LD_INT 1
73107: ST_TO_ADDR
// wait ( 0 0$1 ) ;
73108: LD_INT 35
73110: PPUSH
73111: CALL_OW 67
// p := p + 1 ;
73115: LD_ADDR_VAR 0 1
73119: PUSH
73120: LD_VAR 0 1
73124: PUSH
73125: LD_INT 1
73127: PLUS
73128: ST_TO_ADDR
// until p >= 60 ;
73129: LD_VAR 0 1
73133: PUSH
73134: LD_INT 60
73136: GREATEREQUAL
73137: IFFALSE 73100
// game_speed := 4 ;
73139: LD_ADDR_OWVAR 65
73143: PUSH
73144: LD_INT 4
73146: ST_TO_ADDR
// end ;
73147: PPOPN 1
73149: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
73150: LD_EXP 63
73154: PUSH
73155: LD_EXP 90
73159: AND
73160: IFFALSE 73306
73162: GO 73164
73164: DISABLE
73165: LD_INT 0
73167: PPUSH
73168: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73169: LD_ADDR_VAR 0 1
73173: PUSH
73174: LD_INT 22
73176: PUSH
73177: LD_OWVAR 2
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: PUSH
73186: LD_INT 2
73188: PUSH
73189: LD_INT 30
73191: PUSH
73192: LD_INT 0
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: PUSH
73199: LD_INT 30
73201: PUSH
73202: LD_INT 1
73204: PUSH
73205: EMPTY
73206: LIST
73207: LIST
73208: PUSH
73209: EMPTY
73210: LIST
73211: LIST
73212: LIST
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: PPUSH
73218: CALL_OW 69
73222: ST_TO_ADDR
// if not depot then
73223: LD_VAR 0 1
73227: NOT
73228: IFFALSE 73232
// exit ;
73230: GO 73306
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
73232: LD_ADDR_VAR 0 2
73236: PUSH
73237: LD_VAR 0 1
73241: PUSH
73242: LD_INT 1
73244: PPUSH
73245: LD_VAR 0 1
73249: PPUSH
73250: CALL_OW 12
73254: ARRAY
73255: PPUSH
73256: CALL_OW 274
73260: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
73261: LD_VAR 0 2
73265: PPUSH
73266: LD_INT 1
73268: PPUSH
73269: LD_INT 0
73271: PPUSH
73272: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
73276: LD_VAR 0 2
73280: PPUSH
73281: LD_INT 2
73283: PPUSH
73284: LD_INT 0
73286: PPUSH
73287: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
73291: LD_VAR 0 2
73295: PPUSH
73296: LD_INT 3
73298: PPUSH
73299: LD_INT 0
73301: PPUSH
73302: CALL_OW 277
// end ;
73306: PPOPN 2
73308: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
73309: LD_EXP 63
73313: PUSH
73314: LD_EXP 91
73318: AND
73319: IFFALSE 73416
73321: GO 73323
73323: DISABLE
73324: LD_INT 0
73326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73327: LD_ADDR_VAR 0 1
73331: PUSH
73332: LD_INT 22
73334: PUSH
73335: LD_OWVAR 2
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: LD_INT 21
73346: PUSH
73347: LD_INT 1
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PUSH
73354: LD_INT 3
73356: PUSH
73357: LD_INT 23
73359: PUSH
73360: LD_INT 0
73362: PUSH
73363: EMPTY
73364: LIST
73365: LIST
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: LIST
73375: PPUSH
73376: CALL_OW 69
73380: ST_TO_ADDR
// if not tmp then
73381: LD_VAR 0 1
73385: NOT
73386: IFFALSE 73390
// exit ;
73388: GO 73416
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
73390: LD_VAR 0 1
73394: PUSH
73395: LD_INT 1
73397: PPUSH
73398: LD_VAR 0 1
73402: PPUSH
73403: CALL_OW 12
73407: ARRAY
73408: PPUSH
73409: LD_INT 200
73411: PPUSH
73412: CALL_OW 234
// end ;
73416: PPOPN 1
73418: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
73419: LD_EXP 63
73423: PUSH
73424: LD_EXP 92
73428: AND
73429: IFFALSE 73508
73431: GO 73433
73433: DISABLE
73434: LD_INT 0
73436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
73437: LD_ADDR_VAR 0 1
73441: PUSH
73442: LD_INT 22
73444: PUSH
73445: LD_OWVAR 2
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: PUSH
73454: LD_INT 21
73456: PUSH
73457: LD_INT 2
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: EMPTY
73465: LIST
73466: LIST
73467: PPUSH
73468: CALL_OW 69
73472: ST_TO_ADDR
// if not tmp then
73473: LD_VAR 0 1
73477: NOT
73478: IFFALSE 73482
// exit ;
73480: GO 73508
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
73482: LD_VAR 0 1
73486: PUSH
73487: LD_INT 1
73489: PPUSH
73490: LD_VAR 0 1
73494: PPUSH
73495: CALL_OW 12
73499: ARRAY
73500: PPUSH
73501: LD_INT 60
73503: PPUSH
73504: CALL_OW 234
// end ;
73508: PPOPN 1
73510: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
73511: LD_EXP 63
73515: PUSH
73516: LD_EXP 93
73520: AND
73521: IFFALSE 73620
73523: GO 73525
73525: DISABLE
73526: LD_INT 0
73528: PPUSH
73529: PPUSH
// begin enable ;
73530: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
73531: LD_ADDR_VAR 0 1
73535: PUSH
73536: LD_INT 22
73538: PUSH
73539: LD_OWVAR 2
73543: PUSH
73544: EMPTY
73545: LIST
73546: LIST
73547: PUSH
73548: LD_INT 61
73550: PUSH
73551: EMPTY
73552: LIST
73553: PUSH
73554: LD_INT 33
73556: PUSH
73557: LD_INT 2
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: LIST
73568: PPUSH
73569: CALL_OW 69
73573: ST_TO_ADDR
// if not tmp then
73574: LD_VAR 0 1
73578: NOT
73579: IFFALSE 73583
// exit ;
73581: GO 73620
// for i in tmp do
73583: LD_ADDR_VAR 0 2
73587: PUSH
73588: LD_VAR 0 1
73592: PUSH
73593: FOR_IN
73594: IFFALSE 73618
// if IsControledBy ( i ) then
73596: LD_VAR 0 2
73600: PPUSH
73601: CALL_OW 312
73605: IFFALSE 73616
// ComUnlink ( i ) ;
73607: LD_VAR 0 2
73611: PPUSH
73612: CALL_OW 136
73616: GO 73593
73618: POP
73619: POP
// end ;
73620: PPOPN 2
73622: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
73623: LD_EXP 63
73627: PUSH
73628: LD_EXP 94
73632: AND
73633: IFFALSE 73773
73635: GO 73637
73637: DISABLE
73638: LD_INT 0
73640: PPUSH
73641: PPUSH
// begin ToLua ( displayPowell(); ) ;
73642: LD_STRING displayPowell();
73644: PPUSH
73645: CALL_OW 559
// uc_side := 0 ;
73649: LD_ADDR_OWVAR 20
73653: PUSH
73654: LD_INT 0
73656: ST_TO_ADDR
// uc_nation := 2 ;
73657: LD_ADDR_OWVAR 21
73661: PUSH
73662: LD_INT 2
73664: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
73665: LD_ADDR_OWVAR 37
73669: PUSH
73670: LD_INT 14
73672: ST_TO_ADDR
// vc_engine := engine_siberite ;
73673: LD_ADDR_OWVAR 39
73677: PUSH
73678: LD_INT 3
73680: ST_TO_ADDR
// vc_control := control_apeman ;
73681: LD_ADDR_OWVAR 38
73685: PUSH
73686: LD_INT 5
73688: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
73689: LD_ADDR_OWVAR 40
73693: PUSH
73694: LD_INT 29
73696: ST_TO_ADDR
// un := CreateVehicle ;
73697: LD_ADDR_VAR 0 2
73701: PUSH
73702: CALL_OW 45
73706: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73707: LD_VAR 0 2
73711: PPUSH
73712: LD_INT 1
73714: PPUSH
73715: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73719: LD_INT 35
73721: PPUSH
73722: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73726: LD_VAR 0 2
73730: PPUSH
73731: LD_INT 22
73733: PUSH
73734: LD_OWVAR 2
73738: PUSH
73739: EMPTY
73740: LIST
73741: LIST
73742: PPUSH
73743: CALL_OW 69
73747: PPUSH
73748: LD_VAR 0 2
73752: PPUSH
73753: CALL_OW 74
73757: PPUSH
73758: CALL_OW 115
// until IsDead ( un ) ;
73762: LD_VAR 0 2
73766: PPUSH
73767: CALL_OW 301
73771: IFFALSE 73719
// end ;
73773: PPOPN 2
73775: END
// every 0 0$1 trigger StreamModeActive and sStu do
73776: LD_EXP 63
73780: PUSH
73781: LD_EXP 102
73785: AND
73786: IFFALSE 73802
73788: GO 73790
73790: DISABLE
// begin ToLua ( displayStucuk(); ) ;
73791: LD_STRING displayStucuk();
73793: PPUSH
73794: CALL_OW 559
// ResetFog ;
73798: CALL_OW 335
// end ;
73802: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
73803: LD_EXP 63
73807: PUSH
73808: LD_EXP 95
73812: AND
73813: IFFALSE 73954
73815: GO 73817
73817: DISABLE
73818: LD_INT 0
73820: PPUSH
73821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73822: LD_ADDR_VAR 0 2
73826: PUSH
73827: LD_INT 22
73829: PUSH
73830: LD_OWVAR 2
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: PUSH
73839: LD_INT 21
73841: PUSH
73842: LD_INT 1
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: PUSH
73849: EMPTY
73850: LIST
73851: LIST
73852: PPUSH
73853: CALL_OW 69
73857: ST_TO_ADDR
// if not tmp then
73858: LD_VAR 0 2
73862: NOT
73863: IFFALSE 73867
// exit ;
73865: GO 73954
// un := tmp [ rand ( 1 , tmp ) ] ;
73867: LD_ADDR_VAR 0 1
73871: PUSH
73872: LD_VAR 0 2
73876: PUSH
73877: LD_INT 1
73879: PPUSH
73880: LD_VAR 0 2
73884: PPUSH
73885: CALL_OW 12
73889: ARRAY
73890: ST_TO_ADDR
// SetSide ( un , 0 ) ;
73891: LD_VAR 0 1
73895: PPUSH
73896: LD_INT 0
73898: PPUSH
73899: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
73903: LD_VAR 0 1
73907: PPUSH
73908: LD_OWVAR 3
73912: PUSH
73913: LD_VAR 0 1
73917: DIFF
73918: PPUSH
73919: LD_VAR 0 1
73923: PPUSH
73924: CALL_OW 74
73928: PPUSH
73929: CALL_OW 115
// wait ( 0 0$20 ) ;
73933: LD_INT 700
73935: PPUSH
73936: CALL_OW 67
// SetSide ( un , your_side ) ;
73940: LD_VAR 0 1
73944: PPUSH
73945: LD_OWVAR 2
73949: PPUSH
73950: CALL_OW 235
// end ;
73954: PPOPN 2
73956: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
73957: LD_EXP 63
73961: PUSH
73962: LD_EXP 96
73966: AND
73967: IFFALSE 74073
73969: GO 73971
73971: DISABLE
73972: LD_INT 0
73974: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73975: LD_ADDR_VAR 0 1
73979: PUSH
73980: LD_INT 22
73982: PUSH
73983: LD_OWVAR 2
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: PUSH
73992: LD_INT 2
73994: PUSH
73995: LD_INT 30
73997: PUSH
73998: LD_INT 0
74000: PUSH
74001: EMPTY
74002: LIST
74003: LIST
74004: PUSH
74005: LD_INT 30
74007: PUSH
74008: LD_INT 1
74010: PUSH
74011: EMPTY
74012: LIST
74013: LIST
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: LIST
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: PPUSH
74024: CALL_OW 69
74028: ST_TO_ADDR
// if not depot then
74029: LD_VAR 0 1
74033: NOT
74034: IFFALSE 74038
// exit ;
74036: GO 74073
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
74038: LD_VAR 0 1
74042: PUSH
74043: LD_INT 1
74045: ARRAY
74046: PPUSH
74047: CALL_OW 250
74051: PPUSH
74052: LD_VAR 0 1
74056: PUSH
74057: LD_INT 1
74059: ARRAY
74060: PPUSH
74061: CALL_OW 251
74065: PPUSH
74066: LD_INT 70
74068: PPUSH
74069: CALL_OW 495
// end ;
74073: PPOPN 1
74075: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
74076: LD_EXP 63
74080: PUSH
74081: LD_EXP 97
74085: AND
74086: IFFALSE 74297
74088: GO 74090
74090: DISABLE
74091: LD_INT 0
74093: PPUSH
74094: PPUSH
74095: PPUSH
74096: PPUSH
74097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74098: LD_ADDR_VAR 0 5
74102: PUSH
74103: LD_INT 22
74105: PUSH
74106: LD_OWVAR 2
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: PUSH
74115: LD_INT 21
74117: PUSH
74118: LD_INT 1
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PPUSH
74129: CALL_OW 69
74133: ST_TO_ADDR
// if not tmp then
74134: LD_VAR 0 5
74138: NOT
74139: IFFALSE 74143
// exit ;
74141: GO 74297
// for i in tmp do
74143: LD_ADDR_VAR 0 1
74147: PUSH
74148: LD_VAR 0 5
74152: PUSH
74153: FOR_IN
74154: IFFALSE 74295
// begin d := rand ( 0 , 5 ) ;
74156: LD_ADDR_VAR 0 4
74160: PUSH
74161: LD_INT 0
74163: PPUSH
74164: LD_INT 5
74166: PPUSH
74167: CALL_OW 12
74171: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
74172: LD_ADDR_VAR 0 2
74176: PUSH
74177: LD_VAR 0 1
74181: PPUSH
74182: CALL_OW 250
74186: PPUSH
74187: LD_VAR 0 4
74191: PPUSH
74192: LD_INT 3
74194: PPUSH
74195: LD_INT 12
74197: PPUSH
74198: CALL_OW 12
74202: PPUSH
74203: CALL_OW 272
74207: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
74208: LD_ADDR_VAR 0 3
74212: PUSH
74213: LD_VAR 0 1
74217: PPUSH
74218: CALL_OW 251
74222: PPUSH
74223: LD_VAR 0 4
74227: PPUSH
74228: LD_INT 3
74230: PPUSH
74231: LD_INT 12
74233: PPUSH
74234: CALL_OW 12
74238: PPUSH
74239: CALL_OW 273
74243: ST_TO_ADDR
// if ValidHex ( x , y ) then
74244: LD_VAR 0 2
74248: PPUSH
74249: LD_VAR 0 3
74253: PPUSH
74254: CALL_OW 488
74258: IFFALSE 74293
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
74260: LD_VAR 0 1
74264: PPUSH
74265: LD_VAR 0 2
74269: PPUSH
74270: LD_VAR 0 3
74274: PPUSH
74275: LD_INT 3
74277: PPUSH
74278: LD_INT 6
74280: PPUSH
74281: CALL_OW 12
74285: PPUSH
74286: LD_INT 1
74288: PPUSH
74289: CALL_OW 483
// end ;
74293: GO 74153
74295: POP
74296: POP
// end ;
74297: PPOPN 5
74299: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
74300: LD_EXP 63
74304: PUSH
74305: LD_EXP 98
74309: AND
74310: IFFALSE 74404
74312: GO 74314
74314: DISABLE
74315: LD_INT 0
74317: PPUSH
74318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
74319: LD_ADDR_VAR 0 2
74323: PUSH
74324: LD_INT 22
74326: PUSH
74327: LD_OWVAR 2
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: PUSH
74336: LD_INT 32
74338: PUSH
74339: LD_INT 1
74341: PUSH
74342: EMPTY
74343: LIST
74344: LIST
74345: PUSH
74346: LD_INT 21
74348: PUSH
74349: LD_INT 2
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: PUSH
74356: EMPTY
74357: LIST
74358: LIST
74359: LIST
74360: PPUSH
74361: CALL_OW 69
74365: ST_TO_ADDR
// if not tmp then
74366: LD_VAR 0 2
74370: NOT
74371: IFFALSE 74375
// exit ;
74373: GO 74404
// for i in tmp do
74375: LD_ADDR_VAR 0 1
74379: PUSH
74380: LD_VAR 0 2
74384: PUSH
74385: FOR_IN
74386: IFFALSE 74402
// SetFuel ( i , 0 ) ;
74388: LD_VAR 0 1
74392: PPUSH
74393: LD_INT 0
74395: PPUSH
74396: CALL_OW 240
74400: GO 74385
74402: POP
74403: POP
// end ;
74404: PPOPN 2
74406: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
74407: LD_EXP 63
74411: PUSH
74412: LD_EXP 99
74416: AND
74417: IFFALSE 74483
74419: GO 74421
74421: DISABLE
74422: LD_INT 0
74424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74425: LD_ADDR_VAR 0 1
74429: PUSH
74430: LD_INT 22
74432: PUSH
74433: LD_OWVAR 2
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: PUSH
74442: LD_INT 30
74444: PUSH
74445: LD_INT 29
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PPUSH
74456: CALL_OW 69
74460: ST_TO_ADDR
// if not tmp then
74461: LD_VAR 0 1
74465: NOT
74466: IFFALSE 74470
// exit ;
74468: GO 74483
// DestroyUnit ( tmp [ 1 ] ) ;
74470: LD_VAR 0 1
74474: PUSH
74475: LD_INT 1
74477: ARRAY
74478: PPUSH
74479: CALL_OW 65
// end ;
74483: PPOPN 1
74485: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
74486: LD_EXP 63
74490: PUSH
74491: LD_EXP 101
74495: AND
74496: IFFALSE 74625
74498: GO 74500
74500: DISABLE
74501: LD_INT 0
74503: PPUSH
// begin uc_side := 0 ;
74504: LD_ADDR_OWVAR 20
74508: PUSH
74509: LD_INT 0
74511: ST_TO_ADDR
// uc_nation := nation_arabian ;
74512: LD_ADDR_OWVAR 21
74516: PUSH
74517: LD_INT 2
74519: ST_TO_ADDR
// hc_gallery :=  ;
74520: LD_ADDR_OWVAR 33
74524: PUSH
74525: LD_STRING 
74527: ST_TO_ADDR
// hc_name :=  ;
74528: LD_ADDR_OWVAR 26
74532: PUSH
74533: LD_STRING 
74535: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
74536: LD_INT 1
74538: PPUSH
74539: LD_INT 11
74541: PPUSH
74542: LD_INT 10
74544: PPUSH
74545: CALL_OW 380
// un := CreateHuman ;
74549: LD_ADDR_VAR 0 1
74553: PUSH
74554: CALL_OW 44
74558: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74559: LD_VAR 0 1
74563: PPUSH
74564: LD_INT 1
74566: PPUSH
74567: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
74571: LD_INT 35
74573: PPUSH
74574: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74578: LD_VAR 0 1
74582: PPUSH
74583: LD_INT 22
74585: PUSH
74586: LD_OWVAR 2
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: PPUSH
74595: CALL_OW 69
74599: PPUSH
74600: LD_VAR 0 1
74604: PPUSH
74605: CALL_OW 74
74609: PPUSH
74610: CALL_OW 115
// until IsDead ( un ) ;
74614: LD_VAR 0 1
74618: PPUSH
74619: CALL_OW 301
74623: IFFALSE 74571
// end ;
74625: PPOPN 1
74627: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
74628: LD_EXP 63
74632: PUSH
74633: LD_EXP 103
74637: AND
74638: IFFALSE 74650
74640: GO 74642
74642: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
74643: LD_STRING earthquake(getX(game), 0, 32)
74645: PPUSH
74646: CALL_OW 559
74650: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
74651: LD_EXP 63
74655: PUSH
74656: LD_EXP 104
74660: AND
74661: IFFALSE 74752
74663: GO 74665
74665: DISABLE
74666: LD_INT 0
74668: PPUSH
// begin enable ;
74669: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
74670: LD_ADDR_VAR 0 1
74674: PUSH
74675: LD_INT 22
74677: PUSH
74678: LD_OWVAR 2
74682: PUSH
74683: EMPTY
74684: LIST
74685: LIST
74686: PUSH
74687: LD_INT 21
74689: PUSH
74690: LD_INT 2
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: PUSH
74697: LD_INT 33
74699: PUSH
74700: LD_INT 3
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: LIST
74711: PPUSH
74712: CALL_OW 69
74716: ST_TO_ADDR
// if not tmp then
74717: LD_VAR 0 1
74721: NOT
74722: IFFALSE 74726
// exit ;
74724: GO 74752
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74726: LD_VAR 0 1
74730: PUSH
74731: LD_INT 1
74733: PPUSH
74734: LD_VAR 0 1
74738: PPUSH
74739: CALL_OW 12
74743: ARRAY
74744: PPUSH
74745: LD_INT 1
74747: PPUSH
74748: CALL_OW 234
// end ;
74752: PPOPN 1
74754: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
74755: LD_EXP 63
74759: PUSH
74760: LD_EXP 105
74764: AND
74765: IFFALSE 74906
74767: GO 74769
74769: DISABLE
74770: LD_INT 0
74772: PPUSH
74773: PPUSH
74774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74775: LD_ADDR_VAR 0 3
74779: PUSH
74780: LD_INT 22
74782: PUSH
74783: LD_OWVAR 2
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PUSH
74792: LD_INT 25
74794: PUSH
74795: LD_INT 1
74797: PUSH
74798: EMPTY
74799: LIST
74800: LIST
74801: PUSH
74802: EMPTY
74803: LIST
74804: LIST
74805: PPUSH
74806: CALL_OW 69
74810: ST_TO_ADDR
// if not tmp then
74811: LD_VAR 0 3
74815: NOT
74816: IFFALSE 74820
// exit ;
74818: GO 74906
// un := tmp [ rand ( 1 , tmp ) ] ;
74820: LD_ADDR_VAR 0 2
74824: PUSH
74825: LD_VAR 0 3
74829: PUSH
74830: LD_INT 1
74832: PPUSH
74833: LD_VAR 0 3
74837: PPUSH
74838: CALL_OW 12
74842: ARRAY
74843: ST_TO_ADDR
// if Crawls ( un ) then
74844: LD_VAR 0 2
74848: PPUSH
74849: CALL_OW 318
74853: IFFALSE 74864
// ComWalk ( un ) ;
74855: LD_VAR 0 2
74859: PPUSH
74860: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
74864: LD_VAR 0 2
74868: PPUSH
74869: LD_INT 9
74871: PPUSH
74872: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
74876: LD_INT 28
74878: PPUSH
74879: LD_OWVAR 2
74883: PPUSH
74884: LD_INT 2
74886: PPUSH
74887: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
74891: LD_INT 29
74893: PPUSH
74894: LD_OWVAR 2
74898: PPUSH
74899: LD_INT 2
74901: PPUSH
74902: CALL_OW 322
// end ;
74906: PPOPN 3
74908: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
74909: LD_EXP 63
74913: PUSH
74914: LD_EXP 106
74918: AND
74919: IFFALSE 75030
74921: GO 74923
74923: DISABLE
74924: LD_INT 0
74926: PPUSH
74927: PPUSH
74928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74929: LD_ADDR_VAR 0 3
74933: PUSH
74934: LD_INT 22
74936: PUSH
74937: LD_OWVAR 2
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: PUSH
74946: LD_INT 25
74948: PUSH
74949: LD_INT 1
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: PPUSH
74960: CALL_OW 69
74964: ST_TO_ADDR
// if not tmp then
74965: LD_VAR 0 3
74969: NOT
74970: IFFALSE 74974
// exit ;
74972: GO 75030
// un := tmp [ rand ( 1 , tmp ) ] ;
74974: LD_ADDR_VAR 0 2
74978: PUSH
74979: LD_VAR 0 3
74983: PUSH
74984: LD_INT 1
74986: PPUSH
74987: LD_VAR 0 3
74991: PPUSH
74992: CALL_OW 12
74996: ARRAY
74997: ST_TO_ADDR
// if Crawls ( un ) then
74998: LD_VAR 0 2
75002: PPUSH
75003: CALL_OW 318
75007: IFFALSE 75018
// ComWalk ( un ) ;
75009: LD_VAR 0 2
75013: PPUSH
75014: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75018: LD_VAR 0 2
75022: PPUSH
75023: LD_INT 8
75025: PPUSH
75026: CALL_OW 336
// end ;
75030: PPOPN 3
75032: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
75033: LD_EXP 63
75037: PUSH
75038: LD_EXP 107
75042: AND
75043: IFFALSE 75187
75045: GO 75047
75047: DISABLE
75048: LD_INT 0
75050: PPUSH
75051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
75052: LD_ADDR_VAR 0 2
75056: PUSH
75057: LD_INT 22
75059: PUSH
75060: LD_OWVAR 2
75064: PUSH
75065: EMPTY
75066: LIST
75067: LIST
75068: PUSH
75069: LD_INT 21
75071: PUSH
75072: LD_INT 2
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: PUSH
75079: LD_INT 2
75081: PUSH
75082: LD_INT 34
75084: PUSH
75085: LD_INT 12
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: PUSH
75092: LD_INT 34
75094: PUSH
75095: LD_INT 51
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: PUSH
75102: LD_INT 34
75104: PUSH
75105: LD_INT 32
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: LIST
75122: PPUSH
75123: CALL_OW 69
75127: ST_TO_ADDR
// if not tmp then
75128: LD_VAR 0 2
75132: NOT
75133: IFFALSE 75137
// exit ;
75135: GO 75187
// for i in tmp do
75137: LD_ADDR_VAR 0 1
75141: PUSH
75142: LD_VAR 0 2
75146: PUSH
75147: FOR_IN
75148: IFFALSE 75185
// if GetCargo ( i , mat_artifact ) = 0 then
75150: LD_VAR 0 1
75154: PPUSH
75155: LD_INT 4
75157: PPUSH
75158: CALL_OW 289
75162: PUSH
75163: LD_INT 0
75165: EQUAL
75166: IFFALSE 75183
// SetCargo ( i , mat_siberit , 100 ) ;
75168: LD_VAR 0 1
75172: PPUSH
75173: LD_INT 3
75175: PPUSH
75176: LD_INT 100
75178: PPUSH
75179: CALL_OW 290
75183: GO 75147
75185: POP
75186: POP
// end ;
75187: PPOPN 2
75189: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
75190: LD_EXP 63
75194: PUSH
75195: LD_EXP 108
75199: AND
75200: IFFALSE 75383
75202: GO 75204
75204: DISABLE
75205: LD_INT 0
75207: PPUSH
75208: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75209: LD_ADDR_VAR 0 2
75213: PUSH
75214: LD_INT 22
75216: PUSH
75217: LD_OWVAR 2
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: PPUSH
75226: CALL_OW 69
75230: ST_TO_ADDR
// if not tmp then
75231: LD_VAR 0 2
75235: NOT
75236: IFFALSE 75240
// exit ;
75238: GO 75383
// for i := 1 to 2 do
75240: LD_ADDR_VAR 0 1
75244: PUSH
75245: DOUBLE
75246: LD_INT 1
75248: DEC
75249: ST_TO_ADDR
75250: LD_INT 2
75252: PUSH
75253: FOR_TO
75254: IFFALSE 75381
// begin uc_side := your_side ;
75256: LD_ADDR_OWVAR 20
75260: PUSH
75261: LD_OWVAR 2
75265: ST_TO_ADDR
// uc_nation := nation_american ;
75266: LD_ADDR_OWVAR 21
75270: PUSH
75271: LD_INT 1
75273: ST_TO_ADDR
// vc_chassis := us_morphling ;
75274: LD_ADDR_OWVAR 37
75278: PUSH
75279: LD_INT 5
75281: ST_TO_ADDR
// vc_engine := engine_siberite ;
75282: LD_ADDR_OWVAR 39
75286: PUSH
75287: LD_INT 3
75289: ST_TO_ADDR
// vc_control := control_computer ;
75290: LD_ADDR_OWVAR 38
75294: PUSH
75295: LD_INT 3
75297: ST_TO_ADDR
// vc_weapon := us_double_laser ;
75298: LD_ADDR_OWVAR 40
75302: PUSH
75303: LD_INT 10
75305: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
75306: LD_VAR 0 2
75310: PUSH
75311: LD_INT 1
75313: ARRAY
75314: PPUSH
75315: CALL_OW 310
75319: NOT
75320: IFFALSE 75367
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
75322: CALL_OW 45
75326: PPUSH
75327: LD_VAR 0 2
75331: PUSH
75332: LD_INT 1
75334: ARRAY
75335: PPUSH
75336: CALL_OW 250
75340: PPUSH
75341: LD_VAR 0 2
75345: PUSH
75346: LD_INT 1
75348: ARRAY
75349: PPUSH
75350: CALL_OW 251
75354: PPUSH
75355: LD_INT 12
75357: PPUSH
75358: LD_INT 1
75360: PPUSH
75361: CALL_OW 50
75365: GO 75379
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
75367: CALL_OW 45
75371: PPUSH
75372: LD_INT 1
75374: PPUSH
75375: CALL_OW 51
// end ;
75379: GO 75253
75381: POP
75382: POP
// end ;
75383: PPOPN 2
75385: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
75386: LD_EXP 63
75390: PUSH
75391: LD_EXP 109
75395: AND
75396: IFFALSE 75618
75398: GO 75400
75400: DISABLE
75401: LD_INT 0
75403: PPUSH
75404: PPUSH
75405: PPUSH
75406: PPUSH
75407: PPUSH
75408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75409: LD_ADDR_VAR 0 6
75413: PUSH
75414: LD_INT 22
75416: PUSH
75417: LD_OWVAR 2
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 21
75428: PUSH
75429: LD_INT 1
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: LD_INT 3
75438: PUSH
75439: LD_INT 23
75441: PUSH
75442: LD_INT 0
75444: PUSH
75445: EMPTY
75446: LIST
75447: LIST
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: PUSH
75453: EMPTY
75454: LIST
75455: LIST
75456: LIST
75457: PPUSH
75458: CALL_OW 69
75462: ST_TO_ADDR
// if not tmp then
75463: LD_VAR 0 6
75467: NOT
75468: IFFALSE 75472
// exit ;
75470: GO 75618
// s1 := rand ( 1 , 4 ) ;
75472: LD_ADDR_VAR 0 2
75476: PUSH
75477: LD_INT 1
75479: PPUSH
75480: LD_INT 4
75482: PPUSH
75483: CALL_OW 12
75487: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
75488: LD_ADDR_VAR 0 4
75492: PUSH
75493: LD_VAR 0 6
75497: PUSH
75498: LD_INT 1
75500: ARRAY
75501: PPUSH
75502: LD_VAR 0 2
75506: PPUSH
75507: CALL_OW 259
75511: ST_TO_ADDR
// if s1 = 1 then
75512: LD_VAR 0 2
75516: PUSH
75517: LD_INT 1
75519: EQUAL
75520: IFFALSE 75540
// s2 := rand ( 2 , 4 ) else
75522: LD_ADDR_VAR 0 3
75526: PUSH
75527: LD_INT 2
75529: PPUSH
75530: LD_INT 4
75532: PPUSH
75533: CALL_OW 12
75537: ST_TO_ADDR
75538: GO 75548
// s2 := 1 ;
75540: LD_ADDR_VAR 0 3
75544: PUSH
75545: LD_INT 1
75547: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
75548: LD_ADDR_VAR 0 5
75552: PUSH
75553: LD_VAR 0 6
75557: PUSH
75558: LD_INT 1
75560: ARRAY
75561: PPUSH
75562: LD_VAR 0 3
75566: PPUSH
75567: CALL_OW 259
75571: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
75572: LD_VAR 0 6
75576: PUSH
75577: LD_INT 1
75579: ARRAY
75580: PPUSH
75581: LD_VAR 0 2
75585: PPUSH
75586: LD_VAR 0 5
75590: PPUSH
75591: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
75595: LD_VAR 0 6
75599: PUSH
75600: LD_INT 1
75602: ARRAY
75603: PPUSH
75604: LD_VAR 0 3
75608: PPUSH
75609: LD_VAR 0 4
75613: PPUSH
75614: CALL_OW 237
// end ;
75618: PPOPN 6
75620: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
75621: LD_EXP 63
75625: PUSH
75626: LD_EXP 110
75630: AND
75631: IFFALSE 75710
75633: GO 75635
75635: DISABLE
75636: LD_INT 0
75638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
75639: LD_ADDR_VAR 0 1
75643: PUSH
75644: LD_INT 22
75646: PUSH
75647: LD_OWVAR 2
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: PUSH
75656: LD_INT 30
75658: PUSH
75659: LD_INT 3
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: PUSH
75666: EMPTY
75667: LIST
75668: LIST
75669: PPUSH
75670: CALL_OW 69
75674: ST_TO_ADDR
// if not tmp then
75675: LD_VAR 0 1
75679: NOT
75680: IFFALSE 75684
// exit ;
75682: GO 75710
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75684: LD_VAR 0 1
75688: PUSH
75689: LD_INT 1
75691: PPUSH
75692: LD_VAR 0 1
75696: PPUSH
75697: CALL_OW 12
75701: ARRAY
75702: PPUSH
75703: LD_INT 1
75705: PPUSH
75706: CALL_OW 234
// end ;
75710: PPOPN 1
75712: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
75713: LD_EXP 63
75717: PUSH
75718: LD_EXP 111
75722: AND
75723: IFFALSE 75835
75725: GO 75727
75727: DISABLE
75728: LD_INT 0
75730: PPUSH
75731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
75732: LD_ADDR_VAR 0 2
75736: PUSH
75737: LD_INT 22
75739: PUSH
75740: LD_OWVAR 2
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: PUSH
75749: LD_INT 2
75751: PUSH
75752: LD_INT 30
75754: PUSH
75755: LD_INT 27
75757: PUSH
75758: EMPTY
75759: LIST
75760: LIST
75761: PUSH
75762: LD_INT 30
75764: PUSH
75765: LD_INT 26
75767: PUSH
75768: EMPTY
75769: LIST
75770: LIST
75771: PUSH
75772: LD_INT 30
75774: PUSH
75775: LD_INT 28
75777: PUSH
75778: EMPTY
75779: LIST
75780: LIST
75781: PUSH
75782: EMPTY
75783: LIST
75784: LIST
75785: LIST
75786: LIST
75787: PUSH
75788: EMPTY
75789: LIST
75790: LIST
75791: PPUSH
75792: CALL_OW 69
75796: ST_TO_ADDR
// if not tmp then
75797: LD_VAR 0 2
75801: NOT
75802: IFFALSE 75806
// exit ;
75804: GO 75835
// for i in tmp do
75806: LD_ADDR_VAR 0 1
75810: PUSH
75811: LD_VAR 0 2
75815: PUSH
75816: FOR_IN
75817: IFFALSE 75833
// SetLives ( i , 1 ) ;
75819: LD_VAR 0 1
75823: PPUSH
75824: LD_INT 1
75826: PPUSH
75827: CALL_OW 234
75831: GO 75816
75833: POP
75834: POP
// end ;
75835: PPOPN 2
75837: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
75838: LD_EXP 63
75842: PUSH
75843: LD_EXP 112
75847: AND
75848: IFFALSE 76135
75850: GO 75852
75852: DISABLE
75853: LD_INT 0
75855: PPUSH
75856: PPUSH
75857: PPUSH
// begin i := rand ( 1 , 7 ) ;
75858: LD_ADDR_VAR 0 1
75862: PUSH
75863: LD_INT 1
75865: PPUSH
75866: LD_INT 7
75868: PPUSH
75869: CALL_OW 12
75873: ST_TO_ADDR
// case i of 1 :
75874: LD_VAR 0 1
75878: PUSH
75879: LD_INT 1
75881: DOUBLE
75882: EQUAL
75883: IFTRUE 75887
75885: GO 75897
75887: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
75888: LD_STRING earthquake(getX(game), 0, 32)
75890: PPUSH
75891: CALL_OW 559
75895: GO 76135
75897: LD_INT 2
75899: DOUBLE
75900: EQUAL
75901: IFTRUE 75905
75903: GO 75919
75905: POP
// begin ToLua ( displayStucuk(); ) ;
75906: LD_STRING displayStucuk();
75908: PPUSH
75909: CALL_OW 559
// ResetFog ;
75913: CALL_OW 335
// end ; 3 :
75917: GO 76135
75919: LD_INT 3
75921: DOUBLE
75922: EQUAL
75923: IFTRUE 75927
75925: GO 76031
75927: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75928: LD_ADDR_VAR 0 2
75932: PUSH
75933: LD_INT 22
75935: PUSH
75936: LD_OWVAR 2
75940: PUSH
75941: EMPTY
75942: LIST
75943: LIST
75944: PUSH
75945: LD_INT 25
75947: PUSH
75948: LD_INT 1
75950: PUSH
75951: EMPTY
75952: LIST
75953: LIST
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: PPUSH
75959: CALL_OW 69
75963: ST_TO_ADDR
// if not tmp then
75964: LD_VAR 0 2
75968: NOT
75969: IFFALSE 75973
// exit ;
75971: GO 76135
// un := tmp [ rand ( 1 , tmp ) ] ;
75973: LD_ADDR_VAR 0 3
75977: PUSH
75978: LD_VAR 0 2
75982: PUSH
75983: LD_INT 1
75985: PPUSH
75986: LD_VAR 0 2
75990: PPUSH
75991: CALL_OW 12
75995: ARRAY
75996: ST_TO_ADDR
// if Crawls ( un ) then
75997: LD_VAR 0 3
76001: PPUSH
76002: CALL_OW 318
76006: IFFALSE 76017
// ComWalk ( un ) ;
76008: LD_VAR 0 3
76012: PPUSH
76013: CALL_OW 138
// SetClass ( un , class_mortar ) ;
76017: LD_VAR 0 3
76021: PPUSH
76022: LD_INT 8
76024: PPUSH
76025: CALL_OW 336
// end ; 4 :
76029: GO 76135
76031: LD_INT 4
76033: DOUBLE
76034: EQUAL
76035: IFTRUE 76039
76037: GO 76113
76039: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76040: LD_ADDR_VAR 0 2
76044: PUSH
76045: LD_INT 22
76047: PUSH
76048: LD_OWVAR 2
76052: PUSH
76053: EMPTY
76054: LIST
76055: LIST
76056: PUSH
76057: LD_INT 30
76059: PUSH
76060: LD_INT 29
76062: PUSH
76063: EMPTY
76064: LIST
76065: LIST
76066: PUSH
76067: EMPTY
76068: LIST
76069: LIST
76070: PPUSH
76071: CALL_OW 69
76075: ST_TO_ADDR
// if not tmp then
76076: LD_VAR 0 2
76080: NOT
76081: IFFALSE 76085
// exit ;
76083: GO 76135
// CenterNowOnUnits ( tmp [ 1 ] ) ;
76085: LD_VAR 0 2
76089: PUSH
76090: LD_INT 1
76092: ARRAY
76093: PPUSH
76094: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
76098: LD_VAR 0 2
76102: PUSH
76103: LD_INT 1
76105: ARRAY
76106: PPUSH
76107: CALL_OW 65
// end ; 5 .. 7 :
76111: GO 76135
76113: LD_INT 5
76115: DOUBLE
76116: GREATEREQUAL
76117: IFFALSE 76125
76119: LD_INT 7
76121: DOUBLE
76122: LESSEQUAL
76123: IFTRUE 76127
76125: GO 76134
76127: POP
// StreamSibBomb ; end ;
76128: CALL 72372 0 0
76132: GO 76135
76134: POP
// end ;
76135: PPOPN 3
76137: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
76138: LD_EXP 63
76142: PUSH
76143: LD_EXP 113
76147: AND
76148: IFFALSE 76304
76150: GO 76152
76152: DISABLE
76153: LD_INT 0
76155: PPUSH
76156: PPUSH
76157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
76158: LD_ADDR_VAR 0 2
76162: PUSH
76163: LD_INT 81
76165: PUSH
76166: LD_OWVAR 2
76170: PUSH
76171: EMPTY
76172: LIST
76173: LIST
76174: PUSH
76175: LD_INT 2
76177: PUSH
76178: LD_INT 21
76180: PUSH
76181: LD_INT 1
76183: PUSH
76184: EMPTY
76185: LIST
76186: LIST
76187: PUSH
76188: LD_INT 21
76190: PUSH
76191: LD_INT 2
76193: PUSH
76194: EMPTY
76195: LIST
76196: LIST
76197: PUSH
76198: EMPTY
76199: LIST
76200: LIST
76201: LIST
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PPUSH
76207: CALL_OW 69
76211: ST_TO_ADDR
// if not tmp then
76212: LD_VAR 0 2
76216: NOT
76217: IFFALSE 76221
// exit ;
76219: GO 76304
// p := 0 ;
76221: LD_ADDR_VAR 0 3
76225: PUSH
76226: LD_INT 0
76228: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76229: LD_INT 35
76231: PPUSH
76232: CALL_OW 67
// p := p + 1 ;
76236: LD_ADDR_VAR 0 3
76240: PUSH
76241: LD_VAR 0 3
76245: PUSH
76246: LD_INT 1
76248: PLUS
76249: ST_TO_ADDR
// for i in tmp do
76250: LD_ADDR_VAR 0 1
76254: PUSH
76255: LD_VAR 0 2
76259: PUSH
76260: FOR_IN
76261: IFFALSE 76292
// if GetLives ( i ) < 1000 then
76263: LD_VAR 0 1
76267: PPUSH
76268: CALL_OW 256
76272: PUSH
76273: LD_INT 1000
76275: LESS
76276: IFFALSE 76290
// SetLives ( i , 1000 ) ;
76278: LD_VAR 0 1
76282: PPUSH
76283: LD_INT 1000
76285: PPUSH
76286: CALL_OW 234
76290: GO 76260
76292: POP
76293: POP
// until p > 20 ;
76294: LD_VAR 0 3
76298: PUSH
76299: LD_INT 20
76301: GREATER
76302: IFFALSE 76229
// end ;
76304: PPOPN 3
76306: END
// every 0 0$1 trigger StreamModeActive and sTime do
76307: LD_EXP 63
76311: PUSH
76312: LD_EXP 114
76316: AND
76317: IFFALSE 76352
76319: GO 76321
76321: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
76322: LD_INT 28
76324: PPUSH
76325: LD_OWVAR 2
76329: PPUSH
76330: LD_INT 2
76332: PPUSH
76333: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
76337: LD_INT 30
76339: PPUSH
76340: LD_OWVAR 2
76344: PPUSH
76345: LD_INT 2
76347: PPUSH
76348: CALL_OW 322
// end ;
76352: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
76353: LD_EXP 63
76357: PUSH
76358: LD_EXP 115
76362: AND
76363: IFFALSE 76484
76365: GO 76367
76367: DISABLE
76368: LD_INT 0
76370: PPUSH
76371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76372: LD_ADDR_VAR 0 2
76376: PUSH
76377: LD_INT 22
76379: PUSH
76380: LD_OWVAR 2
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: PUSH
76389: LD_INT 21
76391: PUSH
76392: LD_INT 1
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: PUSH
76399: LD_INT 3
76401: PUSH
76402: LD_INT 23
76404: PUSH
76405: LD_INT 0
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: LIST
76420: PPUSH
76421: CALL_OW 69
76425: ST_TO_ADDR
// if not tmp then
76426: LD_VAR 0 2
76430: NOT
76431: IFFALSE 76435
// exit ;
76433: GO 76484
// for i in tmp do
76435: LD_ADDR_VAR 0 1
76439: PUSH
76440: LD_VAR 0 2
76444: PUSH
76445: FOR_IN
76446: IFFALSE 76482
// begin if Crawls ( i ) then
76448: LD_VAR 0 1
76452: PPUSH
76453: CALL_OW 318
76457: IFFALSE 76468
// ComWalk ( i ) ;
76459: LD_VAR 0 1
76463: PPUSH
76464: CALL_OW 138
// SetClass ( i , 2 ) ;
76468: LD_VAR 0 1
76472: PPUSH
76473: LD_INT 2
76475: PPUSH
76476: CALL_OW 336
// end ;
76480: GO 76445
76482: POP
76483: POP
// end ;
76484: PPOPN 2
76486: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
76487: LD_EXP 63
76491: PUSH
76492: LD_EXP 116
76496: AND
76497: IFFALSE 76785
76499: GO 76501
76501: DISABLE
76502: LD_INT 0
76504: PPUSH
76505: PPUSH
76506: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
76507: LD_OWVAR 2
76511: PPUSH
76512: LD_INT 9
76514: PPUSH
76515: LD_INT 1
76517: PPUSH
76518: LD_INT 1
76520: PPUSH
76521: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
76525: LD_INT 9
76527: PPUSH
76528: LD_OWVAR 2
76532: PPUSH
76533: CALL_OW 343
// uc_side := 9 ;
76537: LD_ADDR_OWVAR 20
76541: PUSH
76542: LD_INT 9
76544: ST_TO_ADDR
// uc_nation := 2 ;
76545: LD_ADDR_OWVAR 21
76549: PUSH
76550: LD_INT 2
76552: ST_TO_ADDR
// hc_name := Dark Warrior ;
76553: LD_ADDR_OWVAR 26
76557: PUSH
76558: LD_STRING Dark Warrior
76560: ST_TO_ADDR
// hc_gallery :=  ;
76561: LD_ADDR_OWVAR 33
76565: PUSH
76566: LD_STRING 
76568: ST_TO_ADDR
// hc_noskilllimit := true ;
76569: LD_ADDR_OWVAR 76
76573: PUSH
76574: LD_INT 1
76576: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
76577: LD_ADDR_OWVAR 31
76581: PUSH
76582: LD_INT 30
76584: PUSH
76585: LD_INT 30
76587: PUSH
76588: LD_INT 30
76590: PUSH
76591: LD_INT 30
76593: PUSH
76594: EMPTY
76595: LIST
76596: LIST
76597: LIST
76598: LIST
76599: ST_TO_ADDR
// un := CreateHuman ;
76600: LD_ADDR_VAR 0 3
76604: PUSH
76605: CALL_OW 44
76609: ST_TO_ADDR
// hc_noskilllimit := false ;
76610: LD_ADDR_OWVAR 76
76614: PUSH
76615: LD_INT 0
76617: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76618: LD_VAR 0 3
76622: PPUSH
76623: LD_INT 1
76625: PPUSH
76626: CALL_OW 51
// ToLua ( playRanger() ) ;
76630: LD_STRING playRanger()
76632: PPUSH
76633: CALL_OW 559
// p := 0 ;
76637: LD_ADDR_VAR 0 2
76641: PUSH
76642: LD_INT 0
76644: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76645: LD_INT 35
76647: PPUSH
76648: CALL_OW 67
// p := p + 1 ;
76652: LD_ADDR_VAR 0 2
76656: PUSH
76657: LD_VAR 0 2
76661: PUSH
76662: LD_INT 1
76664: PLUS
76665: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
76666: LD_VAR 0 3
76670: PPUSH
76671: CALL_OW 256
76675: PUSH
76676: LD_INT 1000
76678: LESS
76679: IFFALSE 76693
// SetLives ( un , 1000 ) ;
76681: LD_VAR 0 3
76685: PPUSH
76686: LD_INT 1000
76688: PPUSH
76689: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
76693: LD_VAR 0 3
76697: PPUSH
76698: LD_INT 81
76700: PUSH
76701: LD_OWVAR 2
76705: PUSH
76706: EMPTY
76707: LIST
76708: LIST
76709: PUSH
76710: LD_INT 91
76712: PUSH
76713: LD_VAR 0 3
76717: PUSH
76718: LD_INT 30
76720: PUSH
76721: EMPTY
76722: LIST
76723: LIST
76724: LIST
76725: PUSH
76726: EMPTY
76727: LIST
76728: LIST
76729: PPUSH
76730: CALL_OW 69
76734: PPUSH
76735: LD_VAR 0 3
76739: PPUSH
76740: CALL_OW 74
76744: PPUSH
76745: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
76749: LD_VAR 0 2
76753: PUSH
76754: LD_INT 80
76756: GREATER
76757: PUSH
76758: LD_VAR 0 3
76762: PPUSH
76763: CALL_OW 301
76767: OR
76768: IFFALSE 76645
// if un then
76770: LD_VAR 0 3
76774: IFFALSE 76785
// RemoveUnit ( un ) ;
76776: LD_VAR 0 3
76780: PPUSH
76781: CALL_OW 64
// end ;
76785: PPOPN 3
76787: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
76788: LD_EXP 117
76792: IFFALSE 76908
76794: GO 76796
76796: DISABLE
76797: LD_INT 0
76799: PPUSH
76800: PPUSH
76801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
76802: LD_ADDR_VAR 0 2
76806: PUSH
76807: LD_INT 81
76809: PUSH
76810: LD_OWVAR 2
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: PUSH
76819: LD_INT 21
76821: PUSH
76822: LD_INT 1
76824: PUSH
76825: EMPTY
76826: LIST
76827: LIST
76828: PUSH
76829: EMPTY
76830: LIST
76831: LIST
76832: PPUSH
76833: CALL_OW 69
76837: ST_TO_ADDR
// ToLua ( playComputer() ) ;
76838: LD_STRING playComputer()
76840: PPUSH
76841: CALL_OW 559
// if not tmp then
76845: LD_VAR 0 2
76849: NOT
76850: IFFALSE 76854
// exit ;
76852: GO 76908
// for i in tmp do
76854: LD_ADDR_VAR 0 1
76858: PUSH
76859: LD_VAR 0 2
76863: PUSH
76864: FOR_IN
76865: IFFALSE 76906
// for j := 1 to 4 do
76867: LD_ADDR_VAR 0 3
76871: PUSH
76872: DOUBLE
76873: LD_INT 1
76875: DEC
76876: ST_TO_ADDR
76877: LD_INT 4
76879: PUSH
76880: FOR_TO
76881: IFFALSE 76902
// SetSkill ( i , j , 10 ) ;
76883: LD_VAR 0 1
76887: PPUSH
76888: LD_VAR 0 3
76892: PPUSH
76893: LD_INT 10
76895: PPUSH
76896: CALL_OW 237
76900: GO 76880
76902: POP
76903: POP
76904: GO 76864
76906: POP
76907: POP
// end ;
76908: PPOPN 3
76910: END
// every 0 0$1 trigger s30 do var i , tmp ;
76911: LD_EXP 118
76915: IFFALSE 76984
76917: GO 76919
76919: DISABLE
76920: LD_INT 0
76922: PPUSH
76923: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76924: LD_ADDR_VAR 0 2
76928: PUSH
76929: LD_INT 22
76931: PUSH
76932: LD_OWVAR 2
76936: PUSH
76937: EMPTY
76938: LIST
76939: LIST
76940: PPUSH
76941: CALL_OW 69
76945: ST_TO_ADDR
// if not tmp then
76946: LD_VAR 0 2
76950: NOT
76951: IFFALSE 76955
// exit ;
76953: GO 76984
// for i in tmp do
76955: LD_ADDR_VAR 0 1
76959: PUSH
76960: LD_VAR 0 2
76964: PUSH
76965: FOR_IN
76966: IFFALSE 76982
// SetLives ( i , 300 ) ;
76968: LD_VAR 0 1
76972: PPUSH
76973: LD_INT 300
76975: PPUSH
76976: CALL_OW 234
76980: GO 76965
76982: POP
76983: POP
// end ;
76984: PPOPN 2
76986: END
// every 0 0$1 trigger s60 do var i , tmp ;
76987: LD_EXP 119
76991: IFFALSE 77060
76993: GO 76995
76995: DISABLE
76996: LD_INT 0
76998: PPUSH
76999: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77000: LD_ADDR_VAR 0 2
77004: PUSH
77005: LD_INT 22
77007: PUSH
77008: LD_OWVAR 2
77012: PUSH
77013: EMPTY
77014: LIST
77015: LIST
77016: PPUSH
77017: CALL_OW 69
77021: ST_TO_ADDR
// if not tmp then
77022: LD_VAR 0 2
77026: NOT
77027: IFFALSE 77031
// exit ;
77029: GO 77060
// for i in tmp do
77031: LD_ADDR_VAR 0 1
77035: PUSH
77036: LD_VAR 0 2
77040: PUSH
77041: FOR_IN
77042: IFFALSE 77058
// SetLives ( i , 600 ) ;
77044: LD_VAR 0 1
77048: PPUSH
77049: LD_INT 600
77051: PPUSH
77052: CALL_OW 234
77056: GO 77041
77058: POP
77059: POP
// end ;
77060: PPOPN 2
77062: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
77063: LD_INT 0
77065: PPUSH
// case cmd of 301 :
77066: LD_VAR 0 1
77070: PUSH
77071: LD_INT 301
77073: DOUBLE
77074: EQUAL
77075: IFTRUE 77079
77077: GO 77111
77079: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
77080: LD_VAR 0 6
77084: PPUSH
77085: LD_VAR 0 7
77089: PPUSH
77090: LD_VAR 0 8
77094: PPUSH
77095: LD_VAR 0 4
77099: PPUSH
77100: LD_VAR 0 5
77104: PPUSH
77105: CALL 78320 0 5
77109: GO 77232
77111: LD_INT 302
77113: DOUBLE
77114: EQUAL
77115: IFTRUE 77119
77117: GO 77156
77119: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
77120: LD_VAR 0 6
77124: PPUSH
77125: LD_VAR 0 7
77129: PPUSH
77130: LD_VAR 0 8
77134: PPUSH
77135: LD_VAR 0 9
77139: PPUSH
77140: LD_VAR 0 4
77144: PPUSH
77145: LD_VAR 0 5
77149: PPUSH
77150: CALL 78411 0 6
77154: GO 77232
77156: LD_INT 303
77158: DOUBLE
77159: EQUAL
77160: IFTRUE 77164
77162: GO 77201
77164: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
77165: LD_VAR 0 6
77169: PPUSH
77170: LD_VAR 0 7
77174: PPUSH
77175: LD_VAR 0 8
77179: PPUSH
77180: LD_VAR 0 9
77184: PPUSH
77185: LD_VAR 0 4
77189: PPUSH
77190: LD_VAR 0 5
77194: PPUSH
77195: CALL 77237 0 6
77199: GO 77232
77201: LD_INT 304
77203: DOUBLE
77204: EQUAL
77205: IFTRUE 77209
77207: GO 77231
77209: POP
// hHackTeleport ( unit , x , y ) ; end ;
77210: LD_VAR 0 2
77214: PPUSH
77215: LD_VAR 0 4
77219: PPUSH
77220: LD_VAR 0 5
77224: PPUSH
77225: CALL 79004 0 3
77229: GO 77232
77231: POP
// end ;
77232: LD_VAR 0 12
77236: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
77237: LD_INT 0
77239: PPUSH
77240: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
77241: LD_VAR 0 1
77245: PUSH
77246: LD_INT 1
77248: LESS
77249: PUSH
77250: LD_VAR 0 1
77254: PUSH
77255: LD_INT 3
77257: GREATER
77258: OR
77259: PUSH
77260: LD_VAR 0 5
77264: PPUSH
77265: LD_VAR 0 6
77269: PPUSH
77270: CALL_OW 428
77274: OR
77275: IFFALSE 77279
// exit ;
77277: GO 78007
// uc_side := your_side ;
77279: LD_ADDR_OWVAR 20
77283: PUSH
77284: LD_OWVAR 2
77288: ST_TO_ADDR
// uc_nation := nation ;
77289: LD_ADDR_OWVAR 21
77293: PUSH
77294: LD_VAR 0 1
77298: ST_TO_ADDR
// bc_level = 1 ;
77299: LD_ADDR_OWVAR 43
77303: PUSH
77304: LD_INT 1
77306: ST_TO_ADDR
// case btype of 1 :
77307: LD_VAR 0 2
77311: PUSH
77312: LD_INT 1
77314: DOUBLE
77315: EQUAL
77316: IFTRUE 77320
77318: GO 77331
77320: POP
// bc_type := b_depot ; 2 :
77321: LD_ADDR_OWVAR 42
77325: PUSH
77326: LD_INT 0
77328: ST_TO_ADDR
77329: GO 77951
77331: LD_INT 2
77333: DOUBLE
77334: EQUAL
77335: IFTRUE 77339
77337: GO 77350
77339: POP
// bc_type := b_warehouse ; 3 :
77340: LD_ADDR_OWVAR 42
77344: PUSH
77345: LD_INT 1
77347: ST_TO_ADDR
77348: GO 77951
77350: LD_INT 3
77352: DOUBLE
77353: EQUAL
77354: IFTRUE 77358
77356: GO 77369
77358: POP
// bc_type := b_lab ; 4 .. 9 :
77359: LD_ADDR_OWVAR 42
77363: PUSH
77364: LD_INT 6
77366: ST_TO_ADDR
77367: GO 77951
77369: LD_INT 4
77371: DOUBLE
77372: GREATEREQUAL
77373: IFFALSE 77381
77375: LD_INT 9
77377: DOUBLE
77378: LESSEQUAL
77379: IFTRUE 77383
77381: GO 77443
77383: POP
// begin bc_type := b_lab_half ;
77384: LD_ADDR_OWVAR 42
77388: PUSH
77389: LD_INT 7
77391: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
77392: LD_ADDR_OWVAR 44
77396: PUSH
77397: LD_INT 10
77399: PUSH
77400: LD_INT 11
77402: PUSH
77403: LD_INT 12
77405: PUSH
77406: LD_INT 15
77408: PUSH
77409: LD_INT 14
77411: PUSH
77412: LD_INT 13
77414: PUSH
77415: EMPTY
77416: LIST
77417: LIST
77418: LIST
77419: LIST
77420: LIST
77421: LIST
77422: PUSH
77423: LD_VAR 0 2
77427: PUSH
77428: LD_INT 3
77430: MINUS
77431: ARRAY
77432: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
77433: LD_ADDR_OWVAR 45
77437: PUSH
77438: LD_INT 9
77440: ST_TO_ADDR
// end ; 10 .. 13 :
77441: GO 77951
77443: LD_INT 10
77445: DOUBLE
77446: GREATEREQUAL
77447: IFFALSE 77455
77449: LD_INT 13
77451: DOUBLE
77452: LESSEQUAL
77453: IFTRUE 77457
77455: GO 77534
77457: POP
// begin bc_type := b_lab_full ;
77458: LD_ADDR_OWVAR 42
77462: PUSH
77463: LD_INT 8
77465: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
77466: LD_ADDR_OWVAR 44
77470: PUSH
77471: LD_INT 10
77473: PUSH
77474: LD_INT 12
77476: PUSH
77477: LD_INT 14
77479: PUSH
77480: LD_INT 13
77482: PUSH
77483: EMPTY
77484: LIST
77485: LIST
77486: LIST
77487: LIST
77488: PUSH
77489: LD_VAR 0 2
77493: PUSH
77494: LD_INT 9
77496: MINUS
77497: ARRAY
77498: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
77499: LD_ADDR_OWVAR 45
77503: PUSH
77504: LD_INT 11
77506: PUSH
77507: LD_INT 15
77509: PUSH
77510: LD_INT 12
77512: PUSH
77513: LD_INT 15
77515: PUSH
77516: EMPTY
77517: LIST
77518: LIST
77519: LIST
77520: LIST
77521: PUSH
77522: LD_VAR 0 2
77526: PUSH
77527: LD_INT 9
77529: MINUS
77530: ARRAY
77531: ST_TO_ADDR
// end ; 14 :
77532: GO 77951
77534: LD_INT 14
77536: DOUBLE
77537: EQUAL
77538: IFTRUE 77542
77540: GO 77553
77542: POP
// bc_type := b_workshop ; 15 :
77543: LD_ADDR_OWVAR 42
77547: PUSH
77548: LD_INT 2
77550: ST_TO_ADDR
77551: GO 77951
77553: LD_INT 15
77555: DOUBLE
77556: EQUAL
77557: IFTRUE 77561
77559: GO 77572
77561: POP
// bc_type := b_factory ; 16 :
77562: LD_ADDR_OWVAR 42
77566: PUSH
77567: LD_INT 3
77569: ST_TO_ADDR
77570: GO 77951
77572: LD_INT 16
77574: DOUBLE
77575: EQUAL
77576: IFTRUE 77580
77578: GO 77591
77580: POP
// bc_type := b_ext_gun ; 17 :
77581: LD_ADDR_OWVAR 42
77585: PUSH
77586: LD_INT 17
77588: ST_TO_ADDR
77589: GO 77951
77591: LD_INT 17
77593: DOUBLE
77594: EQUAL
77595: IFTRUE 77599
77597: GO 77627
77599: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
77600: LD_ADDR_OWVAR 42
77604: PUSH
77605: LD_INT 19
77607: PUSH
77608: LD_INT 23
77610: PUSH
77611: LD_INT 19
77613: PUSH
77614: EMPTY
77615: LIST
77616: LIST
77617: LIST
77618: PUSH
77619: LD_VAR 0 1
77623: ARRAY
77624: ST_TO_ADDR
77625: GO 77951
77627: LD_INT 18
77629: DOUBLE
77630: EQUAL
77631: IFTRUE 77635
77633: GO 77646
77635: POP
// bc_type := b_ext_radar ; 19 :
77636: LD_ADDR_OWVAR 42
77640: PUSH
77641: LD_INT 20
77643: ST_TO_ADDR
77644: GO 77951
77646: LD_INT 19
77648: DOUBLE
77649: EQUAL
77650: IFTRUE 77654
77652: GO 77665
77654: POP
// bc_type := b_ext_radio ; 20 :
77655: LD_ADDR_OWVAR 42
77659: PUSH
77660: LD_INT 22
77662: ST_TO_ADDR
77663: GO 77951
77665: LD_INT 20
77667: DOUBLE
77668: EQUAL
77669: IFTRUE 77673
77671: GO 77684
77673: POP
// bc_type := b_ext_siberium ; 21 :
77674: LD_ADDR_OWVAR 42
77678: PUSH
77679: LD_INT 21
77681: ST_TO_ADDR
77682: GO 77951
77684: LD_INT 21
77686: DOUBLE
77687: EQUAL
77688: IFTRUE 77692
77690: GO 77703
77692: POP
// bc_type := b_ext_computer ; 22 :
77693: LD_ADDR_OWVAR 42
77697: PUSH
77698: LD_INT 24
77700: ST_TO_ADDR
77701: GO 77951
77703: LD_INT 22
77705: DOUBLE
77706: EQUAL
77707: IFTRUE 77711
77709: GO 77722
77711: POP
// bc_type := b_ext_track ; 23 :
77712: LD_ADDR_OWVAR 42
77716: PUSH
77717: LD_INT 16
77719: ST_TO_ADDR
77720: GO 77951
77722: LD_INT 23
77724: DOUBLE
77725: EQUAL
77726: IFTRUE 77730
77728: GO 77741
77730: POP
// bc_type := b_ext_laser ; 24 :
77731: LD_ADDR_OWVAR 42
77735: PUSH
77736: LD_INT 25
77738: ST_TO_ADDR
77739: GO 77951
77741: LD_INT 24
77743: DOUBLE
77744: EQUAL
77745: IFTRUE 77749
77747: GO 77760
77749: POP
// bc_type := b_control_tower ; 25 :
77750: LD_ADDR_OWVAR 42
77754: PUSH
77755: LD_INT 36
77757: ST_TO_ADDR
77758: GO 77951
77760: LD_INT 25
77762: DOUBLE
77763: EQUAL
77764: IFTRUE 77768
77766: GO 77779
77768: POP
// bc_type := b_breastwork ; 26 :
77769: LD_ADDR_OWVAR 42
77773: PUSH
77774: LD_INT 31
77776: ST_TO_ADDR
77777: GO 77951
77779: LD_INT 26
77781: DOUBLE
77782: EQUAL
77783: IFTRUE 77787
77785: GO 77798
77787: POP
// bc_type := b_bunker ; 27 :
77788: LD_ADDR_OWVAR 42
77792: PUSH
77793: LD_INT 32
77795: ST_TO_ADDR
77796: GO 77951
77798: LD_INT 27
77800: DOUBLE
77801: EQUAL
77802: IFTRUE 77806
77804: GO 77817
77806: POP
// bc_type := b_turret ; 28 :
77807: LD_ADDR_OWVAR 42
77811: PUSH
77812: LD_INT 33
77814: ST_TO_ADDR
77815: GO 77951
77817: LD_INT 28
77819: DOUBLE
77820: EQUAL
77821: IFTRUE 77825
77823: GO 77836
77825: POP
// bc_type := b_armoury ; 29 :
77826: LD_ADDR_OWVAR 42
77830: PUSH
77831: LD_INT 4
77833: ST_TO_ADDR
77834: GO 77951
77836: LD_INT 29
77838: DOUBLE
77839: EQUAL
77840: IFTRUE 77844
77842: GO 77855
77844: POP
// bc_type := b_barracks ; 30 :
77845: LD_ADDR_OWVAR 42
77849: PUSH
77850: LD_INT 5
77852: ST_TO_ADDR
77853: GO 77951
77855: LD_INT 30
77857: DOUBLE
77858: EQUAL
77859: IFTRUE 77863
77861: GO 77874
77863: POP
// bc_type := b_solar_power ; 31 :
77864: LD_ADDR_OWVAR 42
77868: PUSH
77869: LD_INT 27
77871: ST_TO_ADDR
77872: GO 77951
77874: LD_INT 31
77876: DOUBLE
77877: EQUAL
77878: IFTRUE 77882
77880: GO 77893
77882: POP
// bc_type := b_oil_power ; 32 :
77883: LD_ADDR_OWVAR 42
77887: PUSH
77888: LD_INT 26
77890: ST_TO_ADDR
77891: GO 77951
77893: LD_INT 32
77895: DOUBLE
77896: EQUAL
77897: IFTRUE 77901
77899: GO 77912
77901: POP
// bc_type := b_siberite_power ; 33 :
77902: LD_ADDR_OWVAR 42
77906: PUSH
77907: LD_INT 28
77909: ST_TO_ADDR
77910: GO 77951
77912: LD_INT 33
77914: DOUBLE
77915: EQUAL
77916: IFTRUE 77920
77918: GO 77931
77920: POP
// bc_type := b_oil_mine ; 34 :
77921: LD_ADDR_OWVAR 42
77925: PUSH
77926: LD_INT 29
77928: ST_TO_ADDR
77929: GO 77951
77931: LD_INT 34
77933: DOUBLE
77934: EQUAL
77935: IFTRUE 77939
77937: GO 77950
77939: POP
// bc_type := b_siberite_mine ; end ;
77940: LD_ADDR_OWVAR 42
77944: PUSH
77945: LD_INT 30
77947: ST_TO_ADDR
77948: GO 77951
77950: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
77951: LD_ADDR_VAR 0 8
77955: PUSH
77956: LD_VAR 0 5
77960: PPUSH
77961: LD_VAR 0 6
77965: PPUSH
77966: LD_VAR 0 3
77970: PPUSH
77971: CALL_OW 47
77975: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
77976: LD_OWVAR 42
77980: PUSH
77981: LD_INT 32
77983: PUSH
77984: LD_INT 33
77986: PUSH
77987: EMPTY
77988: LIST
77989: LIST
77990: IN
77991: IFFALSE 78007
// PlaceWeaponTurret ( b , weapon ) ;
77993: LD_VAR 0 8
77997: PPUSH
77998: LD_VAR 0 4
78002: PPUSH
78003: CALL_OW 431
// end ;
78007: LD_VAR 0 7
78011: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
78012: LD_INT 0
78014: PPUSH
78015: PPUSH
78016: PPUSH
78017: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78018: LD_ADDR_VAR 0 4
78022: PUSH
78023: LD_INT 22
78025: PUSH
78026: LD_OWVAR 2
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: PUSH
78035: LD_INT 2
78037: PUSH
78038: LD_INT 30
78040: PUSH
78041: LD_INT 0
78043: PUSH
78044: EMPTY
78045: LIST
78046: LIST
78047: PUSH
78048: LD_INT 30
78050: PUSH
78051: LD_INT 1
78053: PUSH
78054: EMPTY
78055: LIST
78056: LIST
78057: PUSH
78058: EMPTY
78059: LIST
78060: LIST
78061: LIST
78062: PUSH
78063: EMPTY
78064: LIST
78065: LIST
78066: PPUSH
78067: CALL_OW 69
78071: ST_TO_ADDR
// if not tmp then
78072: LD_VAR 0 4
78076: NOT
78077: IFFALSE 78081
// exit ;
78079: GO 78140
// for i in tmp do
78081: LD_ADDR_VAR 0 2
78085: PUSH
78086: LD_VAR 0 4
78090: PUSH
78091: FOR_IN
78092: IFFALSE 78138
// for j = 1 to 3 do
78094: LD_ADDR_VAR 0 3
78098: PUSH
78099: DOUBLE
78100: LD_INT 1
78102: DEC
78103: ST_TO_ADDR
78104: LD_INT 3
78106: PUSH
78107: FOR_TO
78108: IFFALSE 78134
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
78110: LD_VAR 0 2
78114: PPUSH
78115: CALL_OW 274
78119: PPUSH
78120: LD_VAR 0 3
78124: PPUSH
78125: LD_INT 99999
78127: PPUSH
78128: CALL_OW 277
78132: GO 78107
78134: POP
78135: POP
78136: GO 78091
78138: POP
78139: POP
// end ;
78140: LD_VAR 0 1
78144: RET
// export function hHackSetLevel10 ; var i , j ; begin
78145: LD_INT 0
78147: PPUSH
78148: PPUSH
78149: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
78150: LD_ADDR_VAR 0 2
78154: PUSH
78155: LD_INT 21
78157: PUSH
78158: LD_INT 1
78160: PUSH
78161: EMPTY
78162: LIST
78163: LIST
78164: PPUSH
78165: CALL_OW 69
78169: PUSH
78170: FOR_IN
78171: IFFALSE 78223
// if IsSelected ( i ) then
78173: LD_VAR 0 2
78177: PPUSH
78178: CALL_OW 306
78182: IFFALSE 78221
// begin for j := 1 to 4 do
78184: LD_ADDR_VAR 0 3
78188: PUSH
78189: DOUBLE
78190: LD_INT 1
78192: DEC
78193: ST_TO_ADDR
78194: LD_INT 4
78196: PUSH
78197: FOR_TO
78198: IFFALSE 78219
// SetSkill ( i , j , 10 ) ;
78200: LD_VAR 0 2
78204: PPUSH
78205: LD_VAR 0 3
78209: PPUSH
78210: LD_INT 10
78212: PPUSH
78213: CALL_OW 237
78217: GO 78197
78219: POP
78220: POP
// end ;
78221: GO 78170
78223: POP
78224: POP
// end ;
78225: LD_VAR 0 1
78229: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
78230: LD_INT 0
78232: PPUSH
78233: PPUSH
78234: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
78235: LD_ADDR_VAR 0 2
78239: PUSH
78240: LD_INT 22
78242: PUSH
78243: LD_OWVAR 2
78247: PUSH
78248: EMPTY
78249: LIST
78250: LIST
78251: PUSH
78252: LD_INT 21
78254: PUSH
78255: LD_INT 1
78257: PUSH
78258: EMPTY
78259: LIST
78260: LIST
78261: PUSH
78262: EMPTY
78263: LIST
78264: LIST
78265: PPUSH
78266: CALL_OW 69
78270: PUSH
78271: FOR_IN
78272: IFFALSE 78313
// begin for j := 1 to 4 do
78274: LD_ADDR_VAR 0 3
78278: PUSH
78279: DOUBLE
78280: LD_INT 1
78282: DEC
78283: ST_TO_ADDR
78284: LD_INT 4
78286: PUSH
78287: FOR_TO
78288: IFFALSE 78309
// SetSkill ( i , j , 10 ) ;
78290: LD_VAR 0 2
78294: PPUSH
78295: LD_VAR 0 3
78299: PPUSH
78300: LD_INT 10
78302: PPUSH
78303: CALL_OW 237
78307: GO 78287
78309: POP
78310: POP
// end ;
78311: GO 78271
78313: POP
78314: POP
// end ;
78315: LD_VAR 0 1
78319: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
78320: LD_INT 0
78322: PPUSH
// uc_side := your_side ;
78323: LD_ADDR_OWVAR 20
78327: PUSH
78328: LD_OWVAR 2
78332: ST_TO_ADDR
// uc_nation := nation ;
78333: LD_ADDR_OWVAR 21
78337: PUSH
78338: LD_VAR 0 1
78342: ST_TO_ADDR
// InitHc ;
78343: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
78347: LD_INT 0
78349: PPUSH
78350: LD_VAR 0 2
78354: PPUSH
78355: LD_VAR 0 3
78359: PPUSH
78360: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
78364: LD_VAR 0 4
78368: PPUSH
78369: LD_VAR 0 5
78373: PPUSH
78374: CALL_OW 428
78378: PUSH
78379: LD_INT 0
78381: EQUAL
78382: IFFALSE 78406
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
78384: CALL_OW 44
78388: PPUSH
78389: LD_VAR 0 4
78393: PPUSH
78394: LD_VAR 0 5
78398: PPUSH
78399: LD_INT 1
78401: PPUSH
78402: CALL_OW 48
// end ;
78406: LD_VAR 0 6
78410: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
78411: LD_INT 0
78413: PPUSH
78414: PPUSH
// uc_side := your_side ;
78415: LD_ADDR_OWVAR 20
78419: PUSH
78420: LD_OWVAR 2
78424: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
78425: LD_VAR 0 1
78429: PUSH
78430: LD_INT 1
78432: PUSH
78433: LD_INT 2
78435: PUSH
78436: LD_INT 3
78438: PUSH
78439: LD_INT 4
78441: PUSH
78442: LD_INT 5
78444: PUSH
78445: EMPTY
78446: LIST
78447: LIST
78448: LIST
78449: LIST
78450: LIST
78451: IN
78452: IFFALSE 78464
// uc_nation := nation_american else
78454: LD_ADDR_OWVAR 21
78458: PUSH
78459: LD_INT 1
78461: ST_TO_ADDR
78462: GO 78507
// if chassis in [ 11 , 12 , 13 , 14 ] then
78464: LD_VAR 0 1
78468: PUSH
78469: LD_INT 11
78471: PUSH
78472: LD_INT 12
78474: PUSH
78475: LD_INT 13
78477: PUSH
78478: LD_INT 14
78480: PUSH
78481: EMPTY
78482: LIST
78483: LIST
78484: LIST
78485: LIST
78486: IN
78487: IFFALSE 78499
// uc_nation := nation_arabian else
78489: LD_ADDR_OWVAR 21
78493: PUSH
78494: LD_INT 2
78496: ST_TO_ADDR
78497: GO 78507
// uc_nation := nation_russian ;
78499: LD_ADDR_OWVAR 21
78503: PUSH
78504: LD_INT 3
78506: ST_TO_ADDR
// vc_chassis := chassis ;
78507: LD_ADDR_OWVAR 37
78511: PUSH
78512: LD_VAR 0 1
78516: ST_TO_ADDR
// vc_engine := engine ;
78517: LD_ADDR_OWVAR 39
78521: PUSH
78522: LD_VAR 0 2
78526: ST_TO_ADDR
// vc_control := control ;
78527: LD_ADDR_OWVAR 38
78531: PUSH
78532: LD_VAR 0 3
78536: ST_TO_ADDR
// vc_weapon := weapon ;
78537: LD_ADDR_OWVAR 40
78541: PUSH
78542: LD_VAR 0 4
78546: ST_TO_ADDR
// un := CreateVehicle ;
78547: LD_ADDR_VAR 0 8
78551: PUSH
78552: CALL_OW 45
78556: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
78557: LD_VAR 0 8
78561: PPUSH
78562: LD_INT 0
78564: PPUSH
78565: LD_INT 5
78567: PPUSH
78568: CALL_OW 12
78572: PPUSH
78573: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
78577: LD_VAR 0 8
78581: PPUSH
78582: LD_VAR 0 5
78586: PPUSH
78587: LD_VAR 0 6
78591: PPUSH
78592: LD_INT 1
78594: PPUSH
78595: CALL_OW 48
// end ;
78599: LD_VAR 0 7
78603: RET
// export hInvincible ; every 1 do
78604: GO 78606
78606: DISABLE
// hInvincible := [ ] ;
78607: LD_ADDR_EXP 120
78611: PUSH
78612: EMPTY
78613: ST_TO_ADDR
78614: END
// every 10 do var i ;
78615: GO 78617
78617: DISABLE
78618: LD_INT 0
78620: PPUSH
// begin enable ;
78621: ENABLE
// if not hInvincible then
78622: LD_EXP 120
78626: NOT
78627: IFFALSE 78631
// exit ;
78629: GO 78675
// for i in hInvincible do
78631: LD_ADDR_VAR 0 1
78635: PUSH
78636: LD_EXP 120
78640: PUSH
78641: FOR_IN
78642: IFFALSE 78673
// if GetLives ( i ) < 1000 then
78644: LD_VAR 0 1
78648: PPUSH
78649: CALL_OW 256
78653: PUSH
78654: LD_INT 1000
78656: LESS
78657: IFFALSE 78671
// SetLives ( i , 1000 ) ;
78659: LD_VAR 0 1
78663: PPUSH
78664: LD_INT 1000
78666: PPUSH
78667: CALL_OW 234
78671: GO 78641
78673: POP
78674: POP
// end ;
78675: PPOPN 1
78677: END
// export function hHackInvincible ; var i ; begin
78678: LD_INT 0
78680: PPUSH
78681: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
78682: LD_ADDR_VAR 0 2
78686: PUSH
78687: LD_INT 2
78689: PUSH
78690: LD_INT 21
78692: PUSH
78693: LD_INT 1
78695: PUSH
78696: EMPTY
78697: LIST
78698: LIST
78699: PUSH
78700: LD_INT 21
78702: PUSH
78703: LD_INT 2
78705: PUSH
78706: EMPTY
78707: LIST
78708: LIST
78709: PUSH
78710: EMPTY
78711: LIST
78712: LIST
78713: LIST
78714: PPUSH
78715: CALL_OW 69
78719: PUSH
78720: FOR_IN
78721: IFFALSE 78782
// if IsSelected ( i ) then
78723: LD_VAR 0 2
78727: PPUSH
78728: CALL_OW 306
78732: IFFALSE 78780
// begin if i in hInvincible then
78734: LD_VAR 0 2
78738: PUSH
78739: LD_EXP 120
78743: IN
78744: IFFALSE 78764
// hInvincible := hInvincible diff i else
78746: LD_ADDR_EXP 120
78750: PUSH
78751: LD_EXP 120
78755: PUSH
78756: LD_VAR 0 2
78760: DIFF
78761: ST_TO_ADDR
78762: GO 78780
// hInvincible := hInvincible union i ;
78764: LD_ADDR_EXP 120
78768: PUSH
78769: LD_EXP 120
78773: PUSH
78774: LD_VAR 0 2
78778: UNION
78779: ST_TO_ADDR
// end ;
78780: GO 78720
78782: POP
78783: POP
// end ;
78784: LD_VAR 0 1
78788: RET
// export function hHackInvisible ; var i , j ; begin
78789: LD_INT 0
78791: PPUSH
78792: PPUSH
78793: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
78794: LD_ADDR_VAR 0 2
78798: PUSH
78799: LD_INT 21
78801: PUSH
78802: LD_INT 1
78804: PUSH
78805: EMPTY
78806: LIST
78807: LIST
78808: PPUSH
78809: CALL_OW 69
78813: PUSH
78814: FOR_IN
78815: IFFALSE 78839
// if IsSelected ( i ) then
78817: LD_VAR 0 2
78821: PPUSH
78822: CALL_OW 306
78826: IFFALSE 78837
// ComForceInvisible ( i ) ;
78828: LD_VAR 0 2
78832: PPUSH
78833: CALL_OW 496
78837: GO 78814
78839: POP
78840: POP
// end ;
78841: LD_VAR 0 1
78845: RET
// export function hHackChangeYourSide ; begin
78846: LD_INT 0
78848: PPUSH
// if your_side = 8 then
78849: LD_OWVAR 2
78853: PUSH
78854: LD_INT 8
78856: EQUAL
78857: IFFALSE 78869
// your_side := 0 else
78859: LD_ADDR_OWVAR 2
78863: PUSH
78864: LD_INT 0
78866: ST_TO_ADDR
78867: GO 78883
// your_side := your_side + 1 ;
78869: LD_ADDR_OWVAR 2
78873: PUSH
78874: LD_OWVAR 2
78878: PUSH
78879: LD_INT 1
78881: PLUS
78882: ST_TO_ADDR
// end ;
78883: LD_VAR 0 1
78887: RET
// export function hHackChangeUnitSide ; var i , j ; begin
78888: LD_INT 0
78890: PPUSH
78891: PPUSH
78892: PPUSH
// for i in all_units do
78893: LD_ADDR_VAR 0 2
78897: PUSH
78898: LD_OWVAR 3
78902: PUSH
78903: FOR_IN
78904: IFFALSE 78982
// if IsSelected ( i ) then
78906: LD_VAR 0 2
78910: PPUSH
78911: CALL_OW 306
78915: IFFALSE 78980
// begin j := GetSide ( i ) ;
78917: LD_ADDR_VAR 0 3
78921: PUSH
78922: LD_VAR 0 2
78926: PPUSH
78927: CALL_OW 255
78931: ST_TO_ADDR
// if j = 8 then
78932: LD_VAR 0 3
78936: PUSH
78937: LD_INT 8
78939: EQUAL
78940: IFFALSE 78952
// j := 0 else
78942: LD_ADDR_VAR 0 3
78946: PUSH
78947: LD_INT 0
78949: ST_TO_ADDR
78950: GO 78966
// j := j + 1 ;
78952: LD_ADDR_VAR 0 3
78956: PUSH
78957: LD_VAR 0 3
78961: PUSH
78962: LD_INT 1
78964: PLUS
78965: ST_TO_ADDR
// SetSide ( i , j ) ;
78966: LD_VAR 0 2
78970: PPUSH
78971: LD_VAR 0 3
78975: PPUSH
78976: CALL_OW 235
// end ;
78980: GO 78903
78982: POP
78983: POP
// end ;
78984: LD_VAR 0 1
78988: RET
// export function hHackFog ; begin
78989: LD_INT 0
78991: PPUSH
// FogOff ( true ) ;
78992: LD_INT 1
78994: PPUSH
78995: CALL_OW 344
// end ;
78999: LD_VAR 0 1
79003: RET
// export function hHackTeleport ( unit , x , y ) ; begin
79004: LD_INT 0
79006: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
79007: LD_VAR 0 1
79011: PPUSH
79012: LD_VAR 0 2
79016: PPUSH
79017: LD_VAR 0 3
79021: PPUSH
79022: LD_INT 1
79024: PPUSH
79025: LD_INT 1
79027: PPUSH
79028: CALL_OW 483
// CenterOnXY ( x , y ) ;
79032: LD_VAR 0 2
79036: PPUSH
79037: LD_VAR 0 3
79041: PPUSH
79042: CALL_OW 84
// end ;
79046: LD_VAR 0 4
79050: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
79051: LD_INT 0
79053: PPUSH
79054: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
79055: LD_VAR 0 1
79059: NOT
79060: PUSH
79061: LD_VAR 0 2
79065: PPUSH
79066: LD_VAR 0 3
79070: PPUSH
79071: CALL_OW 488
79075: NOT
79076: OR
79077: PUSH
79078: LD_VAR 0 1
79082: PPUSH
79083: CALL_OW 266
79087: PUSH
79088: LD_INT 3
79090: NONEQUAL
79091: PUSH
79092: LD_VAR 0 1
79096: PPUSH
79097: CALL_OW 247
79101: PUSH
79102: LD_INT 1
79104: EQUAL
79105: NOT
79106: AND
79107: OR
79108: IFFALSE 79112
// exit ;
79110: GO 79261
// if GetType ( factory ) = unit_human then
79112: LD_VAR 0 1
79116: PPUSH
79117: CALL_OW 247
79121: PUSH
79122: LD_INT 1
79124: EQUAL
79125: IFFALSE 79142
// factory := IsInUnit ( factory ) ;
79127: LD_ADDR_VAR 0 1
79131: PUSH
79132: LD_VAR 0 1
79136: PPUSH
79137: CALL_OW 310
79141: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
79142: LD_VAR 0 1
79146: PPUSH
79147: CALL_OW 266
79151: PUSH
79152: LD_INT 3
79154: NONEQUAL
79155: IFFALSE 79159
// exit ;
79157: GO 79261
// if HexInfo ( x , y ) = factory then
79159: LD_VAR 0 2
79163: PPUSH
79164: LD_VAR 0 3
79168: PPUSH
79169: CALL_OW 428
79173: PUSH
79174: LD_VAR 0 1
79178: EQUAL
79179: IFFALSE 79206
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
79181: LD_ADDR_EXP 121
79185: PUSH
79186: LD_EXP 121
79190: PPUSH
79191: LD_VAR 0 1
79195: PPUSH
79196: LD_INT 0
79198: PPUSH
79199: CALL_OW 1
79203: ST_TO_ADDR
79204: GO 79257
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
79206: LD_ADDR_EXP 121
79210: PUSH
79211: LD_EXP 121
79215: PPUSH
79216: LD_VAR 0 1
79220: PPUSH
79221: LD_VAR 0 1
79225: PPUSH
79226: CALL_OW 255
79230: PUSH
79231: LD_VAR 0 1
79235: PUSH
79236: LD_VAR 0 2
79240: PUSH
79241: LD_VAR 0 3
79245: PUSH
79246: EMPTY
79247: LIST
79248: LIST
79249: LIST
79250: LIST
79251: PPUSH
79252: CALL_OW 1
79256: ST_TO_ADDR
// UpdateFactoryWaypoints ;
79257: CALL 79266 0 0
// end ;
79261: LD_VAR 0 4
79265: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
79266: LD_INT 0
79268: PPUSH
79269: PPUSH
79270: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
79271: LD_STRING resetFactoryWaypoint();
79273: PPUSH
79274: CALL_OW 559
// if factoryWaypoints then
79278: LD_EXP 121
79282: IFFALSE 79408
// begin list := PrepareArray ( factoryWaypoints ) ;
79284: LD_ADDR_VAR 0 3
79288: PUSH
79289: LD_EXP 121
79293: PPUSH
79294: CALL 58164 0 1
79298: ST_TO_ADDR
// for i := 1 to list do
79299: LD_ADDR_VAR 0 2
79303: PUSH
79304: DOUBLE
79305: LD_INT 1
79307: DEC
79308: ST_TO_ADDR
79309: LD_VAR 0 3
79313: PUSH
79314: FOR_TO
79315: IFFALSE 79406
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
79317: LD_STRING setFactoryWaypointXY(
79319: PUSH
79320: LD_VAR 0 3
79324: PUSH
79325: LD_VAR 0 2
79329: ARRAY
79330: PUSH
79331: LD_INT 1
79333: ARRAY
79334: STR
79335: PUSH
79336: LD_STRING ,
79338: STR
79339: PUSH
79340: LD_VAR 0 3
79344: PUSH
79345: LD_VAR 0 2
79349: ARRAY
79350: PUSH
79351: LD_INT 2
79353: ARRAY
79354: STR
79355: PUSH
79356: LD_STRING ,
79358: STR
79359: PUSH
79360: LD_VAR 0 3
79364: PUSH
79365: LD_VAR 0 2
79369: ARRAY
79370: PUSH
79371: LD_INT 3
79373: ARRAY
79374: STR
79375: PUSH
79376: LD_STRING ,
79378: STR
79379: PUSH
79380: LD_VAR 0 3
79384: PUSH
79385: LD_VAR 0 2
79389: ARRAY
79390: PUSH
79391: LD_INT 4
79393: ARRAY
79394: STR
79395: PUSH
79396: LD_STRING )
79398: STR
79399: PPUSH
79400: CALL_OW 559
79404: GO 79314
79406: POP
79407: POP
// end ; end ;
79408: LD_VAR 0 1
79412: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
79413: LD_INT 0
79415: PPUSH
// if HexInfo ( x , y ) = warehouse then
79416: LD_VAR 0 2
79420: PPUSH
79421: LD_VAR 0 3
79425: PPUSH
79426: CALL_OW 428
79430: PUSH
79431: LD_VAR 0 1
79435: EQUAL
79436: IFFALSE 79463
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
79438: LD_ADDR_EXP 122
79442: PUSH
79443: LD_EXP 122
79447: PPUSH
79448: LD_VAR 0 1
79452: PPUSH
79453: LD_INT 0
79455: PPUSH
79456: CALL_OW 1
79460: ST_TO_ADDR
79461: GO 79514
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
79463: LD_ADDR_EXP 122
79467: PUSH
79468: LD_EXP 122
79472: PPUSH
79473: LD_VAR 0 1
79477: PPUSH
79478: LD_VAR 0 1
79482: PPUSH
79483: CALL_OW 255
79487: PUSH
79488: LD_VAR 0 1
79492: PUSH
79493: LD_VAR 0 2
79497: PUSH
79498: LD_VAR 0 3
79502: PUSH
79503: EMPTY
79504: LIST
79505: LIST
79506: LIST
79507: LIST
79508: PPUSH
79509: CALL_OW 1
79513: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
79514: CALL 79523 0 0
// end ;
79518: LD_VAR 0 4
79522: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
79523: LD_INT 0
79525: PPUSH
79526: PPUSH
79527: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
79528: LD_STRING resetWarehouseGatheringPoints();
79530: PPUSH
79531: CALL_OW 559
// if warehouseGatheringPoints then
79535: LD_EXP 122
79539: IFFALSE 79665
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
79541: LD_ADDR_VAR 0 3
79545: PUSH
79546: LD_EXP 122
79550: PPUSH
79551: CALL 58164 0 1
79555: ST_TO_ADDR
// for i := 1 to list do
79556: LD_ADDR_VAR 0 2
79560: PUSH
79561: DOUBLE
79562: LD_INT 1
79564: DEC
79565: ST_TO_ADDR
79566: LD_VAR 0 3
79570: PUSH
79571: FOR_TO
79572: IFFALSE 79663
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
79574: LD_STRING setWarehouseGatheringPointXY(
79576: PUSH
79577: LD_VAR 0 3
79581: PUSH
79582: LD_VAR 0 2
79586: ARRAY
79587: PUSH
79588: LD_INT 1
79590: ARRAY
79591: STR
79592: PUSH
79593: LD_STRING ,
79595: STR
79596: PUSH
79597: LD_VAR 0 3
79601: PUSH
79602: LD_VAR 0 2
79606: ARRAY
79607: PUSH
79608: LD_INT 2
79610: ARRAY
79611: STR
79612: PUSH
79613: LD_STRING ,
79615: STR
79616: PUSH
79617: LD_VAR 0 3
79621: PUSH
79622: LD_VAR 0 2
79626: ARRAY
79627: PUSH
79628: LD_INT 3
79630: ARRAY
79631: STR
79632: PUSH
79633: LD_STRING ,
79635: STR
79636: PUSH
79637: LD_VAR 0 3
79641: PUSH
79642: LD_VAR 0 2
79646: ARRAY
79647: PUSH
79648: LD_INT 4
79650: ARRAY
79651: STR
79652: PUSH
79653: LD_STRING )
79655: STR
79656: PPUSH
79657: CALL_OW 559
79661: GO 79571
79663: POP
79664: POP
// end ; end ;
79665: LD_VAR 0 1
79669: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
79670: LD_EXP 122
79674: IFFALSE 80359
79676: GO 79678
79678: DISABLE
79679: LD_INT 0
79681: PPUSH
79682: PPUSH
79683: PPUSH
79684: PPUSH
79685: PPUSH
79686: PPUSH
79687: PPUSH
79688: PPUSH
79689: PPUSH
// begin enable ;
79690: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
79691: LD_ADDR_VAR 0 3
79695: PUSH
79696: LD_EXP 122
79700: PPUSH
79701: CALL 58164 0 1
79705: ST_TO_ADDR
// if not list then
79706: LD_VAR 0 3
79710: NOT
79711: IFFALSE 79715
// exit ;
79713: GO 80359
// for i := 1 to list do
79715: LD_ADDR_VAR 0 1
79719: PUSH
79720: DOUBLE
79721: LD_INT 1
79723: DEC
79724: ST_TO_ADDR
79725: LD_VAR 0 3
79729: PUSH
79730: FOR_TO
79731: IFFALSE 80357
// begin depot := list [ i ] [ 2 ] ;
79733: LD_ADDR_VAR 0 8
79737: PUSH
79738: LD_VAR 0 3
79742: PUSH
79743: LD_VAR 0 1
79747: ARRAY
79748: PUSH
79749: LD_INT 2
79751: ARRAY
79752: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
79753: LD_ADDR_VAR 0 5
79757: PUSH
79758: LD_VAR 0 3
79762: PUSH
79763: LD_VAR 0 1
79767: ARRAY
79768: PUSH
79769: LD_INT 1
79771: ARRAY
79772: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
79773: LD_VAR 0 8
79777: PPUSH
79778: CALL_OW 301
79782: PUSH
79783: LD_VAR 0 5
79787: PUSH
79788: LD_VAR 0 8
79792: PPUSH
79793: CALL_OW 255
79797: NONEQUAL
79798: OR
79799: IFFALSE 79828
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
79801: LD_ADDR_EXP 122
79805: PUSH
79806: LD_EXP 122
79810: PPUSH
79811: LD_VAR 0 8
79815: PPUSH
79816: LD_INT 0
79818: PPUSH
79819: CALL_OW 1
79823: ST_TO_ADDR
// exit ;
79824: POP
79825: POP
79826: GO 80359
// end ; x := list [ i ] [ 3 ] ;
79828: LD_ADDR_VAR 0 6
79832: PUSH
79833: LD_VAR 0 3
79837: PUSH
79838: LD_VAR 0 1
79842: ARRAY
79843: PUSH
79844: LD_INT 3
79846: ARRAY
79847: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
79848: LD_ADDR_VAR 0 7
79852: PUSH
79853: LD_VAR 0 3
79857: PUSH
79858: LD_VAR 0 1
79862: ARRAY
79863: PUSH
79864: LD_INT 4
79866: ARRAY
79867: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
79868: LD_ADDR_VAR 0 9
79872: PUSH
79873: LD_VAR 0 6
79877: PPUSH
79878: LD_VAR 0 7
79882: PPUSH
79883: LD_INT 16
79885: PPUSH
79886: CALL 56752 0 3
79890: ST_TO_ADDR
// if not cratesNearbyPoint then
79891: LD_VAR 0 9
79895: NOT
79896: IFFALSE 79902
// exit ;
79898: POP
79899: POP
79900: GO 80359
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
79902: LD_ADDR_VAR 0 4
79906: PUSH
79907: LD_INT 22
79909: PUSH
79910: LD_VAR 0 5
79914: PUSH
79915: EMPTY
79916: LIST
79917: LIST
79918: PUSH
79919: LD_INT 3
79921: PUSH
79922: LD_INT 60
79924: PUSH
79925: EMPTY
79926: LIST
79927: PUSH
79928: EMPTY
79929: LIST
79930: LIST
79931: PUSH
79932: LD_INT 91
79934: PUSH
79935: LD_VAR 0 8
79939: PUSH
79940: LD_INT 6
79942: PUSH
79943: EMPTY
79944: LIST
79945: LIST
79946: LIST
79947: PUSH
79948: LD_INT 2
79950: PUSH
79951: LD_INT 25
79953: PUSH
79954: LD_INT 2
79956: PUSH
79957: EMPTY
79958: LIST
79959: LIST
79960: PUSH
79961: LD_INT 25
79963: PUSH
79964: LD_INT 16
79966: PUSH
79967: EMPTY
79968: LIST
79969: LIST
79970: PUSH
79971: EMPTY
79972: LIST
79973: LIST
79974: LIST
79975: PUSH
79976: EMPTY
79977: LIST
79978: LIST
79979: LIST
79980: LIST
79981: PPUSH
79982: CALL_OW 69
79986: PUSH
79987: LD_VAR 0 8
79991: PPUSH
79992: CALL_OW 313
79996: PPUSH
79997: LD_INT 3
79999: PUSH
80000: LD_INT 60
80002: PUSH
80003: EMPTY
80004: LIST
80005: PUSH
80006: EMPTY
80007: LIST
80008: LIST
80009: PUSH
80010: LD_INT 2
80012: PUSH
80013: LD_INT 25
80015: PUSH
80016: LD_INT 2
80018: PUSH
80019: EMPTY
80020: LIST
80021: LIST
80022: PUSH
80023: LD_INT 25
80025: PUSH
80026: LD_INT 16
80028: PUSH
80029: EMPTY
80030: LIST
80031: LIST
80032: PUSH
80033: EMPTY
80034: LIST
80035: LIST
80036: LIST
80037: PUSH
80038: EMPTY
80039: LIST
80040: LIST
80041: PPUSH
80042: CALL_OW 72
80046: UNION
80047: ST_TO_ADDR
// if tmp then
80048: LD_VAR 0 4
80052: IFFALSE 80132
// begin tmp := ShrinkArray ( tmp , 3 ) ;
80054: LD_ADDR_VAR 0 4
80058: PUSH
80059: LD_VAR 0 4
80063: PPUSH
80064: LD_INT 3
80066: PPUSH
80067: CALL 54721 0 2
80071: ST_TO_ADDR
// for j in tmp do
80072: LD_ADDR_VAR 0 2
80076: PUSH
80077: LD_VAR 0 4
80081: PUSH
80082: FOR_IN
80083: IFFALSE 80126
// begin if IsInUnit ( j ) then
80085: LD_VAR 0 2
80089: PPUSH
80090: CALL_OW 310
80094: IFFALSE 80105
// ComExit ( j ) ;
80096: LD_VAR 0 2
80100: PPUSH
80101: CALL 54804 0 1
// AddComCollect ( j , x , y ) ;
80105: LD_VAR 0 2
80109: PPUSH
80110: LD_VAR 0 6
80114: PPUSH
80115: LD_VAR 0 7
80119: PPUSH
80120: CALL_OW 177
// end ;
80124: GO 80082
80126: POP
80127: POP
// exit ;
80128: POP
80129: POP
80130: GO 80359
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
80132: LD_ADDR_VAR 0 4
80136: PUSH
80137: LD_INT 22
80139: PUSH
80140: LD_VAR 0 5
80144: PUSH
80145: EMPTY
80146: LIST
80147: LIST
80148: PUSH
80149: LD_INT 91
80151: PUSH
80152: LD_VAR 0 8
80156: PUSH
80157: LD_INT 8
80159: PUSH
80160: EMPTY
80161: LIST
80162: LIST
80163: LIST
80164: PUSH
80165: LD_INT 2
80167: PUSH
80168: LD_INT 34
80170: PUSH
80171: LD_INT 12
80173: PUSH
80174: EMPTY
80175: LIST
80176: LIST
80177: PUSH
80178: LD_INT 34
80180: PUSH
80181: LD_INT 51
80183: PUSH
80184: EMPTY
80185: LIST
80186: LIST
80187: PUSH
80188: LD_INT 34
80190: PUSH
80191: LD_INT 32
80193: PUSH
80194: EMPTY
80195: LIST
80196: LIST
80197: PUSH
80198: LD_INT 34
80200: PUSH
80201: LD_INT 89
80203: PUSH
80204: EMPTY
80205: LIST
80206: LIST
80207: PUSH
80208: EMPTY
80209: LIST
80210: LIST
80211: LIST
80212: LIST
80213: LIST
80214: PUSH
80215: EMPTY
80216: LIST
80217: LIST
80218: LIST
80219: PPUSH
80220: CALL_OW 69
80224: ST_TO_ADDR
// if tmp then
80225: LD_VAR 0 4
80229: IFFALSE 80355
// begin for j in tmp do
80231: LD_ADDR_VAR 0 2
80235: PUSH
80236: LD_VAR 0 4
80240: PUSH
80241: FOR_IN
80242: IFFALSE 80353
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
80244: LD_VAR 0 2
80248: PPUSH
80249: CALL_OW 262
80253: PUSH
80254: LD_INT 3
80256: EQUAL
80257: PUSH
80258: LD_VAR 0 2
80262: PPUSH
80263: CALL_OW 261
80267: PUSH
80268: LD_INT 20
80270: GREATER
80271: OR
80272: PUSH
80273: LD_VAR 0 2
80277: PPUSH
80278: CALL_OW 314
80282: NOT
80283: AND
80284: PUSH
80285: LD_VAR 0 2
80289: PPUSH
80290: CALL_OW 263
80294: PUSH
80295: LD_INT 1
80297: NONEQUAL
80298: PUSH
80299: LD_VAR 0 2
80303: PPUSH
80304: CALL_OW 311
80308: OR
80309: AND
80310: IFFALSE 80351
// begin ComCollect ( j , x , y ) ;
80312: LD_VAR 0 2
80316: PPUSH
80317: LD_VAR 0 6
80321: PPUSH
80322: LD_VAR 0 7
80326: PPUSH
80327: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
80331: LD_VAR 0 2
80335: PPUSH
80336: LD_VAR 0 8
80340: PPUSH
80341: CALL_OW 172
// exit ;
80345: POP
80346: POP
80347: POP
80348: POP
80349: GO 80359
// end ;
80351: GO 80241
80353: POP
80354: POP
// end ; end ;
80355: GO 79730
80357: POP
80358: POP
// end ; end_of_file
80359: PPOPN 9
80361: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80362: LD_VAR 0 1
80366: PPUSH
80367: LD_VAR 0 2
80371: PPUSH
80372: LD_VAR 0 3
80376: PPUSH
80377: LD_VAR 0 4
80381: PPUSH
80382: LD_VAR 0 5
80386: PPUSH
80387: LD_VAR 0 6
80391: PPUSH
80392: CALL 64715 0 6
// end ;
80396: PPOPN 6
80398: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80399: LD_INT 0
80401: PPUSH
// begin if not units then
80402: LD_VAR 0 1
80406: NOT
80407: IFFALSE 80411
// exit ;
80409: GO 80411
// end ;
80411: PPOPN 7
80413: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80414: CALL 64602 0 0
// end ;
80418: PPOPN 1
80420: END
