// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 323 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 1628 0 1
  44: PPUSH
  45: CALL 5211 0 1
// Multiplayer_Start ;
  49: CALL 3533 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 3649 0 0
// end ;
  69: END
// export debug , game , side_bot , artifact_get , base_names ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// side_bot := 2 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: ST_TO_ADDR
// artifact_get := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// base_names := [ base_a , base_b , base_c , base_d , base_e , base_f , base_g , base_h , base_i , base_j , base_k , base_l , base_m , base_n , base_o , base_p , base_r , base_s , base_t , base_u , base_w , base_x , base_y , base_z ] ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_STRING base_a
 104: PUSH
 105: LD_STRING base_b
 107: PUSH
 108: LD_STRING base_c
 110: PUSH
 111: LD_STRING base_d
 113: PUSH
 114: LD_STRING base_e
 116: PUSH
 117: LD_STRING base_f
 119: PUSH
 120: LD_STRING base_g
 122: PUSH
 123: LD_STRING base_h
 125: PUSH
 126: LD_STRING base_i
 128: PUSH
 129: LD_STRING base_j
 131: PUSH
 132: LD_STRING base_k
 134: PUSH
 135: LD_STRING base_l
 137: PUSH
 138: LD_STRING base_m
 140: PUSH
 141: LD_STRING base_n
 143: PUSH
 144: LD_STRING base_o
 146: PUSH
 147: LD_STRING base_p
 149: PUSH
 150: LD_STRING base_r
 152: PUSH
 153: LD_STRING base_s
 155: PUSH
 156: LD_STRING base_t
 158: PUSH
 159: LD_STRING base_u
 161: PUSH
 162: LD_STRING base_w
 164: PUSH
 165: LD_STRING base_x
 167: PUSH
 168: LD_STRING base_y
 170: PUSH
 171: LD_STRING base_z
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: LIST
 197: LIST
 198: LIST
 199: ST_TO_ADDR
// end ;
 200: LD_VAR 0 1
 204: RET
// every 0 0$01 trigger game and not debug_strings do
 205: LD_EXP 2
 209: PUSH
 210: LD_OWVAR 48
 214: NOT
 215: AND
 216: IFFALSE 232
 218: GO 220
 220: DISABLE
// begin enable ;
 221: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 222: LD_ADDR_OWVAR 47
 226: PUSH
 227: CALL 4147 0 0
 231: ST_TO_ADDR
// end ;
 232: END
// function Debuger ; var i ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
// if not debug then
 237: LD_EXP 1
 241: NOT
 242: IFFALSE 246
// exit ;
 244: GO 318
// game_speed := 5 ;
 246: LD_ADDR_OWVAR 65
 250: PUSH
 251: LD_INT 5
 253: ST_TO_ADDR
// uc_side := 1 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 1
 261: ST_TO_ADDR
// uc_nation := 1 ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 1
 269: ST_TO_ADDR
// for i = 1 to 10 do
 270: LD_ADDR_VAR 0 2
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_INT 10
 282: PUSH
 283: FOR_TO
 284: IFFALSE 316
// begin PrepareHuman ( false , 1 , 10 ) ;
 286: LD_INT 0
 288: PPUSH
 289: LD_INT 1
 291: PPUSH
 292: LD_INT 10
 294: PPUSH
 295: CALL_OW 380
// PlaceUnitArea ( CreateHuman , player_1_hum , false ) ;
 299: CALL_OW 44
 303: PPUSH
 304: LD_INT 9
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: CALL_OW 49
// end ;
 314: GO 283
 316: POP
 317: POP
// end ; end_of_file
 318: LD_VAR 0 1
 322: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_ape_amount , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_reinforcements_spawned , multi_support_arrive_time ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 323: LD_INT 0
 325: PPUSH
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
// multi_settings_counter := 6 ;
 330: LD_ADDR_EXP 18
 334: PUSH
 335: LD_INT 6
 337: ST_TO_ADDR
// if Multiplayer then
 338: LD_OWVAR 4
 342: IFFALSE 522
// begin your_side := mp_player_side ;
 344: LD_ADDR_OWVAR 2
 348: PUSH
 349: LD_OWVAR 7
 353: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 354: LD_ADDR_EXP 6
 358: PUSH
 359: LD_OWVAR 6
 363: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 364: LD_ADDR_EXP 7
 368: PUSH
 369: LD_OWVAR 17
 373: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 374: LD_ADDR_EXP 8
 378: PUSH
 379: LD_OWVAR 15
 383: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 384: LD_ADDR_EXP 9
 388: PUSH
 389: LD_OWVAR 16
 393: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 394: LD_ADDR_EXP 10
 398: PUSH
 399: EMPTY
 400: PUSH
 401: EMPTY
 402: LIST
 403: ST_TO_ADDR
// for i in mp_teams do
 404: LD_ADDR_VAR 0 2
 408: PUSH
 409: LD_OWVAR 12
 413: PUSH
 414: FOR_IN
 415: IFFALSE 458
// if i then
 417: LD_VAR 0 2
 421: IFFALSE 456
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 423: LD_ADDR_EXP 10
 427: PUSH
 428: LD_EXP 10
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: LD_EXP 10
 440: PUSH
 441: LD_INT 1
 443: ARRAY
 444: PUSH
 445: LD_VAR 0 2
 449: UNION
 450: PPUSH
 451: CALL_OW 1
 455: ST_TO_ADDR
 456: GO 414
 458: POP
 459: POP
// for i := 1 to multi_settings_counter do
 460: LD_ADDR_VAR 0 2
 464: PUSH
 465: DOUBLE
 466: LD_INT 1
 468: DEC
 469: ST_TO_ADDR
 470: LD_EXP 18
 474: PUSH
 475: FOR_TO
 476: IFFALSE 518
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 478: LD_ADDR_EXP 17
 482: PUSH
 483: LD_EXP 17
 487: PPUSH
 488: LD_EXP 17
 492: PUSH
 493: LD_INT 1
 495: PLUS
 496: PPUSH
 497: LD_VAR 0 2
 501: PPUSH
 502: CALL_OW 426
 506: PUSH
 507: LD_INT 1
 509: PLUS
 510: PPUSH
 511: CALL_OW 1
 515: ST_TO_ADDR
 516: GO 475
 518: POP
 519: POP
// end else
 520: GO 704
// begin your_side := 1 ;
 522: LD_ADDR_OWVAR 2
 526: PUSH
 527: LD_INT 1
 529: ST_TO_ADDR
// multi_gametype := 1 ;
 530: LD_ADDR_EXP 6
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// multi_sides := [ 2 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 538: LD_ADDR_EXP 7
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: LD_INT 0
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: LD_INT 0
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: ST_TO_ADDR
// multi_side_teams := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 577: LD_ADDR_EXP 8
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: LD_INT 0
 587: PUSH
 588: LD_INT 1
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 0
 602: PUSH
 603: LD_INT 0
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// multi_nations := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 616: LD_ADDR_EXP 9
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: LD_INT 1
 629: PUSH
 630: LD_INT 0
 632: PUSH
 633: LD_INT 0
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: ST_TO_ADDR
// multi_teams := [ [ 1 , 3 ] ] ;
 655: LD_ADDR_EXP 10
 659: PUSH
 660: LD_INT 1
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: ST_TO_ADDR
// multi_settings := [ 2 , 2 , 1 , 3 , 1 , 3 ] ;
 673: LD_ADDR_EXP 17
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: LD_INT 2
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 3
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 704: LD_ADDR_EXP 11
 708: PUSH
 709: LD_INT 0
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: LD_INT 0
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 0
 729: PUSH
 730: LD_INT 0
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 743: LD_ADDR_EXP 14
 747: PUSH
 748: LD_INT 0
 750: PUSH
 751: LD_INT 0
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 0
 765: PUSH
 766: LD_INT 0
 768: PUSH
 769: LD_INT 0
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 782: LD_ADDR_EXP 25
 786: PUSH
 787: LD_INT 0
 789: PUSH
 790: LD_INT 0
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: LD_INT 0
 798: PUSH
 799: LD_INT 0
 801: PUSH
 802: LD_INT 0
 804: PUSH
 805: LD_INT 0
 807: PUSH
 808: LD_INT 0
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: ST_TO_ADDR
// multi_teamgame := true ;
 821: LD_ADDR_EXP 15
 825: PUSH
 826: LD_INT 1
 828: ST_TO_ADDR
// multi_allowed_nations := [ 1 ] ;
 829: LD_ADDR_EXP 13
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: ST_TO_ADDR
// multi_custom_commanders := true ;
 840: LD_ADDR_EXP 16
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// multi_commanders := [ ] ;
 848: LD_ADDR_EXP 24
 852: PUSH
 853: EMPTY
 854: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 855: LD_ADDR_EXP 27
 859: PUSH
 860: EMPTY
 861: ST_TO_ADDR
// multi_reinforcements_spawned := 0 ;
 862: LD_ADDR_EXP 28
 866: PUSH
 867: LD_INT 0
 869: ST_TO_ADDR
// multi_players_amount := 0 ;
 870: LD_ADDR_EXP 26
 874: PUSH
 875: LD_INT 0
 877: ST_TO_ADDR
// multi_pos_area := [ [ player_1_hum , player_1_veh ] , [ player_2_hum , player_2_veh ] , [ player_3_hum , player_3_veh ] ] ;
 878: LD_ADDR_EXP 12
 882: PUSH
 883: LD_INT 9
 885: PUSH
 886: LD_INT 8
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 27
 895: PUSH
 896: LD_INT 26
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PUSH
 903: LD_INT 29
 905: PUSH
 906: LD_INT 28
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
// for i := 1 to 8 do
 918: LD_ADDR_VAR 0 2
 922: PUSH
 923: DOUBLE
 924: LD_INT 1
 926: DEC
 927: ST_TO_ADDR
 928: LD_INT 8
 930: PUSH
 931: FOR_TO
 932: IFFALSE 1261
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
 934: LD_VAR 0 2
 938: PPUSH
 939: CALL_OW 530
 943: IFFALSE 1101
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
 945: LD_ADDR_EXP 11
 949: PUSH
 950: LD_EXP 11
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_INT 1
 962: PPUSH
 963: CALL_OW 1
 967: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
 968: LD_ADDR_EXP 9
 972: PUSH
 973: LD_EXP 9
 977: PPUSH
 978: LD_VAR 0 2
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 1
 990: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
 991: LD_ADDR_EXP 7
 995: PUSH
 996: LD_EXP 7
1000: PPUSH
1001: LD_VAR 0 2
1005: PPUSH
1006: LD_INT 0
1008: PPUSH
1009: CALL_OW 1
1013: ST_TO_ADDR
// for j = 1 to multi_teams do
1014: LD_ADDR_VAR 0 3
1018: PUSH
1019: DOUBLE
1020: LD_INT 1
1022: DEC
1023: ST_TO_ADDR
1024: LD_EXP 10
1028: PUSH
1029: FOR_TO
1030: IFFALSE 1099
// begin if i in multi_teams [ j ] then
1032: LD_VAR 0 2
1036: PUSH
1037: LD_EXP 10
1041: PUSH
1042: LD_VAR 0 3
1046: ARRAY
1047: IN
1048: IFFALSE 1097
// begin tmp := multi_teams [ j ] diff i ;
1050: LD_ADDR_VAR 0 5
1054: PUSH
1055: LD_EXP 10
1059: PUSH
1060: LD_VAR 0 3
1064: ARRAY
1065: PUSH
1066: LD_VAR 0 2
1070: DIFF
1071: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1072: LD_ADDR_EXP 10
1076: PUSH
1077: LD_EXP 10
1081: PPUSH
1082: LD_VAR 0 3
1086: PPUSH
1087: LD_VAR 0 5
1091: PPUSH
1092: CALL_OW 1
1096: ST_TO_ADDR
// end ; end ;
1097: GO 1029
1099: POP
1100: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1101: LD_EXP 9
1105: PUSH
1106: LD_VAR 0 2
1110: ARRAY
1111: PUSH
1112: LD_EXP 9
1116: PUSH
1117: LD_VAR 0 2
1121: ARRAY
1122: PUSH
1123: LD_EXP 13
1127: IN
1128: NOT
1129: AND
1130: IFFALSE 1171
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1132: LD_ADDR_EXP 9
1136: PUSH
1137: LD_EXP 9
1141: PPUSH
1142: LD_VAR 0 2
1146: PPUSH
1147: LD_EXP 13
1151: PUSH
1152: LD_INT 1
1154: PPUSH
1155: LD_EXP 13
1159: PPUSH
1160: CALL_OW 12
1164: ARRAY
1165: PPUSH
1166: CALL_OW 1
1170: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1171: LD_EXP 9
1175: PUSH
1176: LD_VAR 0 2
1180: ARRAY
1181: NOT
1182: PUSH
1183: LD_EXP 7
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: NOT
1194: AND
1195: PUSH
1196: LD_EXP 11
1200: PUSH
1201: LD_VAR 0 2
1205: ARRAY
1206: NOT
1207: AND
1208: IFFALSE 1233
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1210: LD_ADDR_EXP 14
1214: PUSH
1215: LD_EXP 14
1219: PPUSH
1220: LD_VAR 0 2
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: CALL_OW 1
1232: ST_TO_ADDR
// if multi_sides [ i ] then
1233: LD_EXP 7
1237: PUSH
1238: LD_VAR 0 2
1242: ARRAY
1243: IFFALSE 1259
// multi_players_amount := multi_players_amount + 1 ;
1245: LD_ADDR_EXP 26
1249: PUSH
1250: LD_EXP 26
1254: PUSH
1255: LD_INT 1
1257: PLUS
1258: ST_TO_ADDR
// end ;
1259: GO 931
1261: POP
1262: POP
// for i in multi_teams do
1263: LD_ADDR_VAR 0 2
1267: PUSH
1268: LD_EXP 10
1272: PUSH
1273: FOR_IN
1274: IFFALSE 1382
// begin for j = 2 to i do
1276: LD_ADDR_VAR 0 3
1280: PUSH
1281: DOUBLE
1282: LD_INT 2
1284: DEC
1285: ST_TO_ADDR
1286: LD_VAR 0 2
1290: PUSH
1291: FOR_TO
1292: IFFALSE 1378
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1294: LD_VAR 0 2
1298: PUSH
1299: LD_VAR 0 3
1303: ARRAY
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 343
// for x = 1 to j - 1 do
1318: LD_ADDR_VAR 0 4
1322: PUSH
1323: DOUBLE
1324: LD_INT 1
1326: DEC
1327: ST_TO_ADDR
1328: LD_VAR 0 3
1332: PUSH
1333: LD_INT 1
1335: MINUS
1336: PUSH
1337: FOR_TO
1338: IFFALSE 1374
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1340: LD_VAR 0 2
1344: PUSH
1345: LD_VAR 0 3
1349: ARRAY
1350: PPUSH
1351: LD_VAR 0 2
1355: PUSH
1356: LD_VAR 0 4
1360: ARRAY
1361: PPUSH
1362: LD_INT 1
1364: PPUSH
1365: LD_INT 1
1367: PPUSH
1368: CALL_OW 80
1372: GO 1337
1374: POP
1375: POP
// end ;
1376: GO 1291
1378: POP
1379: POP
// end ;
1380: GO 1273
1382: POP
1383: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1384: LD_ADDR_OWVAR 67
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: LD_INT 2
1394: PUSH
1395: LD_INT 3
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_EXP 17
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: ARRAY
1412: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
1413: LD_ADDR_EXP 19
1417: PUSH
1418: LD_INT 9
1420: PUSH
1421: LD_INT 12
1423: PUSH
1424: LD_INT 15
1426: PUSH
1427: LD_INT 18
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: PUSH
1436: LD_EXP 17
1440: PUSH
1441: LD_INT 2
1443: ARRAY
1444: ARRAY
1445: ST_TO_ADDR
// multi_skill_level := [ 5 , 6 , 8 , 10 ] [ multi_settings [ 3 ] ] ;
1446: LD_ADDR_EXP 20
1450: PUSH
1451: LD_INT 5
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 8
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: PUSH
1469: LD_EXP 17
1473: PUSH
1474: LD_INT 3
1476: ARRAY
1477: ARRAY
1478: ST_TO_ADDR
// multi_crates_spawn := [ [ 9000 , 0 0$32 ] , [ 12000 , 0 0$22 ] , [ 14000 , 0 0$14 ] , [ 16000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1479: LD_ADDR_EXP 21
1483: PUSH
1484: LD_INT 9000
1486: PUSH
1487: LD_INT 1120
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 12000
1496: PUSH
1497: LD_INT 770
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 14000
1506: PUSH
1507: LD_INT 490
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: PUSH
1514: LD_INT 16000
1516: PUSH
1517: LD_INT 420
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_EXP 17
1534: PUSH
1535: LD_INT 4
1537: ARRAY
1538: ARRAY
1539: ST_TO_ADDR
// multi_ape_amount := [ 6 , 8 , 10 ] [ multi_settings [ 5 ] ] ;
1540: LD_ADDR_EXP 22
1544: PUSH
1545: LD_INT 6
1547: PUSH
1548: LD_INT 8
1550: PUSH
1551: LD_INT 10
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: LIST
1558: PUSH
1559: LD_EXP 17
1563: PUSH
1564: LD_INT 5
1566: ARRAY
1567: ARRAY
1568: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1569: LD_ADDR_EXP 23
1573: PUSH
1574: LD_INT 0
1576: PUSH
1577: LD_INT 1
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: PUSH
1588: LD_EXP 17
1592: PUSH
1593: LD_INT 6
1595: ARRAY
1596: ARRAY
1597: ST_TO_ADDR
// multi_support_arrive_time := [ 15 15$0 , 18 18$0 , 21 21$0 ] [ Difficulty ] ;
1598: LD_ADDR_EXP 29
1602: PUSH
1603: LD_INT 31500
1605: PUSH
1606: LD_INT 37800
1608: PUSH
1609: LD_INT 44100
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: PUSH
1617: LD_OWVAR 67
1621: ARRAY
1622: ST_TO_ADDR
// end ;
1623: LD_VAR 0 1
1627: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1628: LD_INT 0
1630: PPUSH
1631: PPUSH
// if not multi_sides [ 2 ] then
1632: LD_EXP 7
1636: PUSH
1637: LD_INT 2
1639: ARRAY
1640: NOT
1641: IFFALSE 1655
// begin result := preferSide ;
1643: LD_ADDR_VAR 0 2
1647: PUSH
1648: LD_VAR 0 1
1652: ST_TO_ADDR
// exit ;
1653: GO 1702
// end ; for i := 1 to 8 do
1655: LD_ADDR_VAR 0 3
1659: PUSH
1660: DOUBLE
1661: LD_INT 1
1663: DEC
1664: ST_TO_ADDR
1665: LD_INT 8
1667: PUSH
1668: FOR_TO
1669: IFFALSE 1700
// if not multi_sides [ i ] then
1671: LD_EXP 7
1675: PUSH
1676: LD_VAR 0 3
1680: ARRAY
1681: NOT
1682: IFFALSE 1698
// begin result := i ;
1684: LD_ADDR_VAR 0 2
1688: PUSH
1689: LD_VAR 0 3
1693: ST_TO_ADDR
// exit ;
1694: POP
1695: POP
1696: GO 1702
// end ;
1698: GO 1668
1700: POP
1701: POP
// end ;
1702: LD_VAR 0 2
1706: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1707: LD_INT 0
1709: PPUSH
// uc_side := side ;
1710: LD_ADDR_OWVAR 20
1714: PUSH
1715: LD_VAR 0 1
1719: ST_TO_ADDR
// uc_nation := 1 ;
1720: LD_ADDR_OWVAR 21
1724: PUSH
1725: LD_INT 1
1727: ST_TO_ADDR
// hc_importance := 100 ;
1728: LD_ADDR_OWVAR 32
1732: PUSH
1733: LD_INT 100
1735: ST_TO_ADDR
// hc_class := 1 ;
1736: LD_ADDR_OWVAR 28
1740: PUSH
1741: LD_INT 1
1743: ST_TO_ADDR
// if num = 1 then
1744: LD_VAR 0 2
1748: PUSH
1749: LD_INT 1
1751: EQUAL
1752: IFFALSE 1834
// begin hc_gallery := us ;
1754: LD_ADDR_OWVAR 33
1758: PUSH
1759: LD_STRING us
1761: ST_TO_ADDR
// hc_face_number := 5 ;
1762: LD_ADDR_OWVAR 34
1766: PUSH
1767: LD_INT 5
1769: ST_TO_ADDR
// hc_name := John Macmilan ;
1770: LD_ADDR_OWVAR 26
1774: PUSH
1775: LD_STRING John Macmilan
1777: ST_TO_ADDR
// hc_sex := sex_male ;
1778: LD_ADDR_OWVAR 27
1782: PUSH
1783: LD_INT 1
1785: ST_TO_ADDR
// hc_skills := [ 7 , 2 , 4 , 4 ] ;
1786: LD_ADDR_OWVAR 31
1790: PUSH
1791: LD_INT 7
1793: PUSH
1794: LD_INT 2
1796: PUSH
1797: LD_INT 4
1799: PUSH
1800: LD_INT 4
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1809: LD_ADDR_OWVAR 29
1813: PUSH
1814: LD_INT 11
1816: PUSH
1817: LD_INT 10
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: ST_TO_ADDR
// result := CreateHuman ;
1824: LD_ADDR_VAR 0 3
1828: PUSH
1829: CALL_OW 44
1833: ST_TO_ADDR
// end ; if num = 2 then
1834: LD_VAR 0 2
1838: PUSH
1839: LD_INT 2
1841: EQUAL
1842: IFFALSE 1924
// begin hc_gallery := us ;
1844: LD_ADDR_OWVAR 33
1848: PUSH
1849: LD_STRING us
1851: ST_TO_ADDR
// hc_face_number := 2 ;
1852: LD_ADDR_OWVAR 34
1856: PUSH
1857: LD_INT 2
1859: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
1860: LD_ADDR_OWVAR 26
1864: PUSH
1865: LD_STRING Lucy Donaldson
1867: ST_TO_ADDR
// hc_sex := sex_female ;
1868: LD_ADDR_OWVAR 27
1872: PUSH
1873: LD_INT 2
1875: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 3 ] ;
1876: LD_ADDR_OWVAR 31
1880: PUSH
1881: LD_INT 6
1883: PUSH
1884: LD_INT 3
1886: PUSH
1887: LD_INT 4
1889: PUSH
1890: LD_INT 3
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: ST_TO_ADDR
// hc_attr := [ 9 , 12 ] ;
1899: LD_ADDR_OWVAR 29
1903: PUSH
1904: LD_INT 9
1906: PUSH
1907: LD_INT 12
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: ST_TO_ADDR
// result := CreateHuman ;
1914: LD_ADDR_VAR 0 3
1918: PUSH
1919: CALL_OW 44
1923: ST_TO_ADDR
// end ; if num = 3 then
1924: LD_VAR 0 2
1928: PUSH
1929: LD_INT 3
1931: EQUAL
1932: IFFALSE 2014
// begin hc_gallery := us ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING us
1941: ST_TO_ADDR
// hc_face_number := 7 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 7
1949: ST_TO_ADDR
// hc_name := Arthur Powell ;
1950: LD_ADDR_OWVAR 26
1954: PUSH
1955: LD_STRING Arthur Powell
1957: ST_TO_ADDR
// hc_sex := sex_male ;
1958: LD_ADDR_OWVAR 27
1962: PUSH
1963: LD_INT 1
1965: ST_TO_ADDR
// hc_skills := [ 8 , 2 , 5 , 2 ] ;
1966: LD_ADDR_OWVAR 31
1970: PUSH
1971: LD_INT 8
1973: PUSH
1974: LD_INT 2
1976: PUSH
1977: LD_INT 5
1979: PUSH
1980: LD_INT 2
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1989: LD_ADDR_OWVAR 29
1993: PUSH
1994: LD_INT 10
1996: PUSH
1997: LD_INT 11
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: ST_TO_ADDR
// result := CreateHuman ;
2004: LD_ADDR_VAR 0 3
2008: PUSH
2009: CALL_OW 44
2013: ST_TO_ADDR
// end ; end ;
2014: LD_VAR 0 3
2018: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , cl , un , veh , tmp , copy , people_amount ; begin
2019: LD_INT 0
2021: PPUSH
2022: PPUSH
2023: PPUSH
2024: PPUSH
2025: PPUSH
2026: PPUSH
2027: PPUSH
2028: PPUSH
2029: PPUSH
// for i := 1 to 8 do
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: DOUBLE
2036: LD_INT 1
2038: DEC
2039: ST_TO_ADDR
2040: LD_INT 8
2042: PUSH
2043: FOR_TO
2044: IFFALSE 2934
// begin if not multi_sides [ i ] then
2046: LD_EXP 7
2050: PUSH
2051: LD_VAR 0 2
2055: ARRAY
2056: NOT
2057: IFFALSE 2061
// continue ;
2059: GO 2043
// if multi_custom_commanders then
2061: LD_EXP 16
2065: IFFALSE 2157
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2067: LD_ADDR_VAR 0 5
2071: PUSH
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_EXP 7
2081: PUSH
2082: LD_VAR 0 2
2086: ARRAY
2087: PPUSH
2088: CALL 1707 0 2
2092: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2093: LD_ADDR_EXP 24
2097: PUSH
2098: LD_EXP 24
2102: PPUSH
2103: LD_EXP 24
2107: PUSH
2108: LD_INT 1
2110: PLUS
2111: PPUSH
2112: LD_VAR 0 5
2116: PPUSH
2117: CALL_OW 2
2121: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2122: LD_VAR 0 5
2126: PPUSH
2127: LD_EXP 12
2131: PUSH
2132: LD_EXP 7
2136: PUSH
2137: LD_VAR 0 2
2141: ARRAY
2142: ARRAY
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end else
2155: GO 2368
// begin uc_side := i ;
2157: LD_ADDR_OWVAR 20
2161: PUSH
2162: LD_VAR 0 2
2166: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2167: LD_ADDR_OWVAR 21
2171: PUSH
2172: LD_EXP 9
2176: PUSH
2177: LD_VAR 0 2
2181: ARRAY
2182: ST_TO_ADDR
// hc_importance := 100 ;
2183: LD_ADDR_OWVAR 32
2187: PUSH
2188: LD_INT 100
2190: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2191: LD_INT 0
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: LD_EXP 20
2201: PPUSH
2202: CALL_OW 380
// if multiplayer then
2206: LD_OWVAR 4
2210: IFFALSE 2268
// begin hc_name := mp_sides_players_names [ i ] ;
2212: LD_ADDR_OWVAR 26
2216: PUSH
2217: LD_OWVAR 19
2221: PUSH
2222: LD_VAR 0 2
2226: ARRAY
2227: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2228: LD_ADDR_OWVAR 33
2232: PUSH
2233: LD_STRING MULTIAVATARS
2235: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2236: LD_ADDR_OWVAR 34
2240: PUSH
2241: LD_VAR 0 2
2245: PPUSH
2246: CALL_OW 525
2250: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2251: LD_ADDR_OWVAR 27
2255: PUSH
2256: LD_VAR 0 2
2260: PPUSH
2261: CALL_OW 526
2265: ST_TO_ADDR
// end else
2266: GO 2300
// begin hc_gallery :=  ;
2268: LD_ADDR_OWVAR 33
2272: PUSH
2273: LD_STRING 
2275: ST_TO_ADDR
// hc_name :=  ;
2276: LD_ADDR_OWVAR 26
2280: PUSH
2281: LD_STRING 
2283: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2284: LD_ADDR_OWVAR 27
2288: PUSH
2289: LD_INT 1
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: CALL_OW 12
2299: ST_TO_ADDR
// end ; un := CreateHuman ;
2300: LD_ADDR_VAR 0 5
2304: PUSH
2305: CALL_OW 44
2309: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2310: LD_VAR 0 5
2314: PPUSH
2315: LD_EXP 12
2319: PUSH
2320: LD_EXP 7
2324: PUSH
2325: LD_VAR 0 2
2329: ARRAY
2330: ARRAY
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: LD_INT 0
2338: PPUSH
2339: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2343: LD_ADDR_EXP 24
2347: PUSH
2348: LD_EXP 24
2352: PPUSH
2353: LD_VAR 0 2
2357: PPUSH
2358: LD_VAR 0 5
2362: PPUSH
2363: CALL_OW 1
2367: ST_TO_ADDR
// end ; InitHc ;
2368: CALL_OW 19
// InitUc ;
2372: CALL_OW 18
// uc_side := i ;
2376: LD_ADDR_OWVAR 20
2380: PUSH
2381: LD_VAR 0 2
2385: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2386: LD_ADDR_OWVAR 21
2390: PUSH
2391: LD_EXP 9
2395: PUSH
2396: LD_VAR 0 2
2400: ARRAY
2401: ST_TO_ADDR
// hc_gallery :=  ;
2402: LD_ADDR_OWVAR 33
2406: PUSH
2407: LD_STRING 
2409: ST_TO_ADDR
// hc_name :=  ;
2410: LD_ADDR_OWVAR 26
2414: PUSH
2415: LD_STRING 
2417: ST_TO_ADDR
// hc_importance := 0 ;
2418: LD_ADDR_OWVAR 32
2422: PUSH
2423: LD_INT 0
2425: ST_TO_ADDR
// cl := 1 ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: LD_INT 1
2433: ST_TO_ADDR
// for j = 2 to multi_pep_amount do
2434: LD_ADDR_VAR 0 3
2438: PUSH
2439: DOUBLE
2440: LD_INT 2
2442: DEC
2443: ST_TO_ADDR
2444: LD_EXP 19
2448: PUSH
2449: FOR_TO
2450: IFFALSE 2822
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2452: LD_VAR 0 3
2456: PUSH
2457: LD_INT 1
2459: MINUS
2460: PUSH
2461: LD_EXP 19
2465: PUSH
2466: LD_INT 1
2468: MINUS
2469: PUSH
2470: LD_INT 4
2472: DIVREAL
2473: MOD
2474: PUSH
2475: LD_INT 0
2477: EQUAL
2478: IFFALSE 2494
// cl := cl + 1 ;
2480: LD_ADDR_VAR 0 4
2484: PUSH
2485: LD_VAR 0 4
2489: PUSH
2490: LD_INT 1
2492: PLUS
2493: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2494: LD_INT 0
2496: PPUSH
2497: LD_VAR 0 4
2501: PPUSH
2502: LD_EXP 20
2506: PPUSH
2507: CALL_OW 380
// un := CreateHuman ;
2511: LD_ADDR_VAR 0 5
2515: PUSH
2516: CALL_OW 44
2520: ST_TO_ADDR
// if j > copy then
2521: LD_VAR 0 3
2525: PUSH
2526: LD_VAR 0 8
2530: GREATER
2531: IFFALSE 2560
// copy := Replace ( copy , j , un ) else
2533: LD_ADDR_VAR 0 8
2537: PUSH
2538: LD_VAR 0 8
2542: PPUSH
2543: LD_VAR 0 3
2547: PPUSH
2548: LD_VAR 0 5
2552: PPUSH
2553: CALL_OW 1
2557: ST_TO_ADDR
2558: GO 2642
// begin CopySkills ( copy [ j ] , un ) ;
2560: LD_VAR 0 8
2564: PUSH
2565: LD_VAR 0 3
2569: ARRAY
2570: PPUSH
2571: LD_VAR 0 5
2575: PPUSH
2576: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2580: LD_VAR 0 5
2584: PPUSH
2585: LD_INT 2
2587: PPUSH
2588: LD_VAR 0 8
2592: PUSH
2593: LD_VAR 0 3
2597: ARRAY
2598: PPUSH
2599: LD_INT 2
2601: PPUSH
2602: CALL_OW 260
2606: PPUSH
2607: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2611: LD_VAR 0 5
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_VAR 0 8
2623: PUSH
2624: LD_VAR 0 3
2628: ARRAY
2629: PPUSH
2630: LD_INT 1
2632: PPUSH
2633: CALL_OW 260
2637: PPUSH
2638: CALL_OW 239
// end ; if multi_pos_area then
2642: LD_EXP 12
2646: IFFALSE 2820
// begin if GetClass ( un ) = 3 then
2648: LD_VAR 0 5
2652: PPUSH
2653: CALL_OW 257
2657: PUSH
2658: LD_INT 3
2660: EQUAL
2661: IFFALSE 2787
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ j mod 2 + 1 ] , engine_solar , control_manual , [ us_double_gun , us_gatling_gun , us_light_gun ] [ j mod 3 + 1 ] , 100 ) ;
2663: LD_INT 3
2665: PUSH
2666: LD_INT 2
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 2
2680: MOD
2681: PUSH
2682: LD_INT 1
2684: PLUS
2685: ARRAY
2686: PPUSH
2687: LD_INT 2
2689: PPUSH
2690: LD_INT 1
2692: PPUSH
2693: LD_INT 5
2695: PUSH
2696: LD_INT 4
2698: PUSH
2699: LD_INT 3
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: PUSH
2707: LD_VAR 0 3
2711: PUSH
2712: LD_INT 3
2714: MOD
2715: PUSH
2716: LD_INT 1
2718: PLUS
2719: ARRAY
2720: PPUSH
2721: LD_INT 100
2723: PPUSH
2724: CALL 21557 0 5
// veh := CreateVehicle ;
2728: LD_ADDR_VAR 0 6
2732: PUSH
2733: CALL_OW 45
2737: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2738: LD_VAR 0 6
2742: PPUSH
2743: LD_EXP 12
2747: PUSH
2748: LD_EXP 7
2752: PUSH
2753: LD_VAR 0 2
2757: ARRAY
2758: ARRAY
2759: PUSH
2760: LD_INT 2
2762: ARRAY
2763: PPUSH
2764: LD_INT 0
2766: PPUSH
2767: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2771: LD_VAR 0 5
2775: PPUSH
2776: LD_VAR 0 6
2780: PPUSH
2781: CALL_OW 52
// continue ;
2785: GO 2449
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2787: LD_VAR 0 5
2791: PPUSH
2792: LD_EXP 12
2796: PUSH
2797: LD_EXP 7
2801: PUSH
2802: LD_VAR 0 2
2806: ARRAY
2807: ARRAY
2808: PUSH
2809: LD_INT 1
2811: ARRAY
2812: PPUSH
2813: LD_INT 0
2815: PPUSH
2816: CALL_OW 49
// end ; end ;
2820: GO 2449
2822: POP
2823: POP
// for j = 1 to 3 do
2824: LD_ADDR_VAR 0 3
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2930
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_solar , control_computer , [ us_radar , us_rocket_launcher , us_gatling_gun ] [ j ] , 100 ) ;
2840: LD_INT 2
2842: PUSH
2843: LD_INT 3
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: LD_INT 1
2852: PPUSH
2853: LD_INT 2
2855: PPUSH
2856: CALL_OW 12
2860: ARRAY
2861: PPUSH
2862: LD_INT 2
2864: PPUSH
2865: LD_INT 3
2867: PPUSH
2868: LD_INT 11
2870: PUSH
2871: LD_INT 7
2873: PUSH
2874: LD_INT 4
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_VAR 0 3
2886: ARRAY
2887: PPUSH
2888: LD_INT 100
2890: PPUSH
2891: CALL 21557 0 5
// PlaceUnitArea ( CreateVehicle , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2895: CALL_OW 45
2899: PPUSH
2900: LD_EXP 12
2904: PUSH
2905: LD_EXP 7
2909: PUSH
2910: LD_VAR 0 2
2914: ARRAY
2915: ARRAY
2916: PUSH
2917: LD_INT 1
2919: ARRAY
2920: PPUSH
2921: LD_INT 0
2923: PPUSH
2924: CALL_OW 49
// end ;
2928: GO 2837
2930: POP
2931: POP
// end ;
2932: GO 2043
2934: POP
2935: POP
// end ;
2936: LD_VAR 0 1
2940: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
2941: LD_INT 0
2943: PPUSH
2944: PPUSH
2945: PPUSH
2946: PPUSH
2947: PPUSH
// if not multi_support then
2948: LD_EXP 23
2952: NOT
2953: IFFALSE 2957
// exit ;
2955: GO 3528
// result := [ ] ;
2957: LD_ADDR_VAR 0 1
2961: PUSH
2962: EMPTY
2963: ST_TO_ADDR
// for i := 1 to 8 do
2964: LD_ADDR_VAR 0 2
2968: PUSH
2969: DOUBLE
2970: LD_INT 1
2972: DEC
2973: ST_TO_ADDR
2974: LD_INT 8
2976: PUSH
2977: FOR_TO
2978: IFFALSE 3526
// begin result := Replace ( result , i , [ ] ) ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 1
2989: PPUSH
2990: LD_VAR 0 2
2994: PPUSH
2995: EMPTY
2996: PPUSH
2997: CALL_OW 1
3001: ST_TO_ADDR
// if multi_sides [ i ] then
3002: LD_EXP 7
3006: PUSH
3007: LD_VAR 0 2
3011: ARRAY
3012: IFFALSE 3524
// begin tmp := [ ] ;
3014: LD_ADDR_VAR 0 5
3018: PUSH
3019: EMPTY
3020: ST_TO_ADDR
// if multi_support = 1 then
3021: LD_EXP 23
3025: PUSH
3026: LD_INT 1
3028: EQUAL
3029: IFFALSE 3197
// begin uc_side := i ;
3031: LD_ADDR_OWVAR 20
3035: PUSH
3036: LD_VAR 0 2
3040: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3041: LD_ADDR_OWVAR 21
3045: PUSH
3046: LD_EXP 9
3050: PUSH
3051: LD_VAR 0 2
3055: ARRAY
3056: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3057: LD_INT 3
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: LD_INT 3
3065: PPUSH
3066: LD_INT 11
3068: PPUSH
3069: LD_INT 40
3071: PPUSH
3072: CALL 21557 0 5
// tmp := tmp ^ CreateVehicle ;
3076: LD_ADDR_VAR 0 5
3080: PUSH
3081: LD_VAR 0 5
3085: PUSH
3086: CALL_OW 45
3090: ADD
3091: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_double_gun , 40 ) ;
3092: LD_INT 2
3094: PPUSH
3095: LD_INT 1
3097: PPUSH
3098: LD_INT 3
3100: PPUSH
3101: LD_INT 5
3103: PPUSH
3104: LD_INT 40
3106: PPUSH
3107: CALL 21557 0 5
// tmp := tmp ^ CreateVehicle ;
3111: LD_ADDR_VAR 0 5
3115: PUSH
3116: LD_VAR 0 5
3120: PUSH
3121: CALL_OW 45
3125: ADD
3126: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_gatling_gun , 40 ) ;
3127: LD_INT 2
3129: PPUSH
3130: LD_INT 3
3132: PPUSH
3133: LD_INT 3
3135: PPUSH
3136: LD_INT 4
3138: PPUSH
3139: LD_INT 40
3141: PPUSH
3142: CALL 21557 0 5
// tmp := tmp ^ CreateVehicle ;
3146: LD_ADDR_VAR 0 5
3150: PUSH
3151: LD_VAR 0 5
3155: PUSH
3156: CALL_OW 45
3160: ADD
3161: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_solar , control_computer , us_laser , 40 ) ;
3162: LD_INT 3
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: LD_INT 3
3170: PPUSH
3171: LD_INT 9
3173: PPUSH
3174: LD_INT 40
3176: PPUSH
3177: CALL 21557 0 5
// tmp := tmp ^ CreateVehicle ;
3181: LD_ADDR_VAR 0 5
3185: PUSH
3186: LD_VAR 0 5
3190: PUSH
3191: CALL_OW 45
3195: ADD
3196: ST_TO_ADDR
// end ; if multi_support = 2 then
3197: LD_EXP 23
3201: PUSH
3202: LD_INT 2
3204: EQUAL
3205: IFFALSE 3499
// begin uc_side := i ;
3207: LD_ADDR_OWVAR 20
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3217: LD_ADDR_OWVAR 21
3221: PUSH
3222: LD_EXP 9
3226: PUSH
3227: LD_VAR 0 2
3231: ARRAY
3232: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3233: LD_INT 3
3235: PPUSH
3236: LD_INT 1
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 11
3244: PPUSH
3245: LD_INT 40
3247: PPUSH
3248: CALL 21557 0 5
// tmp := tmp ^ CreateVehicle ;
3252: LD_ADDR_VAR 0 5
3256: PUSH
3257: LD_VAR 0 5
3261: PUSH
3262: CALL_OW 45
3266: ADD
3267: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 40 ) ;
3268: LD_INT 3
3270: PPUSH
3271: LD_INT 3
3273: PPUSH
3274: LD_INT 3
3276: PPUSH
3277: LD_INT 12
3279: PPUSH
3280: LD_INT 40
3282: PPUSH
3283: CALL 21557 0 5
// tmp := tmp ^ CreateVehicle ;
3287: LD_ADDR_VAR 0 5
3291: PUSH
3292: LD_VAR 0 5
3296: PUSH
3297: CALL_OW 45
3301: ADD
3302: ST_TO_ADDR
// SetCargo ( tmp [ tmp ] , mat_cans , 100 ) ;
3303: LD_VAR 0 5
3307: PUSH
3308: LD_VAR 0 5
3312: ARRAY
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 100
3319: PPUSH
3320: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_double_gun , 40 ) ;
3324: LD_INT 2
3326: PPUSH
3327: LD_INT 3
3329: PPUSH
3330: LD_INT 3
3332: PPUSH
3333: LD_INT 5
3335: PPUSH
3336: LD_INT 40
3338: PPUSH
3339: CALL 21557 0 5
// tmp := tmp ^ CreateVehicle ;
3343: LD_ADDR_VAR 0 5
3347: PUSH
3348: LD_VAR 0 5
3352: PUSH
3353: CALL_OW 45
3357: ADD
3358: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3359: LD_INT 4
3361: PPUSH
3362: LD_INT 1
3364: PPUSH
3365: LD_INT 3
3367: PPUSH
3368: LD_INT 6
3370: PPUSH
3371: LD_INT 40
3373: PPUSH
3374: CALL 21557 0 5
// tmp := tmp ^ CreateVehicle ;
3378: LD_ADDR_VAR 0 5
3382: PUSH
3383: LD_VAR 0 5
3387: PUSH
3388: CALL_OW 45
3392: ADD
3393: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3394: LD_INT 2
3396: PPUSH
3397: LD_INT 3
3399: PPUSH
3400: LD_INT 3
3402: PPUSH
3403: LD_INT 9
3405: PPUSH
3406: LD_INT 40
3408: PPUSH
3409: CALL 21557 0 5
// tmp := tmp ^ CreateVehicle ;
3413: LD_ADDR_VAR 0 5
3417: PUSH
3418: LD_VAR 0 5
3422: PUSH
3423: CALL_OW 45
3427: ADD
3428: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 3
3434: PPUSH
3435: LD_INT 3
3437: PPUSH
3438: LD_INT 9
3440: PPUSH
3441: LD_INT 40
3443: PPUSH
3444: CALL 21557 0 5
// tmp := tmp ^ CreateVehicle ;
3448: LD_ADDR_VAR 0 5
3452: PUSH
3453: LD_VAR 0 5
3457: PUSH
3458: CALL_OW 45
3462: ADD
3463: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3464: LD_INT 4
3466: PPUSH
3467: LD_INT 1
3469: PPUSH
3470: LD_INT 3
3472: PPUSH
3473: LD_INT 6
3475: PPUSH
3476: LD_INT 40
3478: PPUSH
3479: CALL 21557 0 5
// tmp := tmp ^ CreateVehicle ;
3483: LD_ADDR_VAR 0 5
3487: PUSH
3488: LD_VAR 0 5
3492: PUSH
3493: CALL_OW 45
3497: ADD
3498: ST_TO_ADDR
// end ; result := Replace ( result , i , tmp ) ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: LD_VAR 0 1
3508: PPUSH
3509: LD_VAR 0 2
3513: PPUSH
3514: LD_VAR 0 5
3518: PPUSH
3519: CALL_OW 1
3523: ST_TO_ADDR
// end ; end ;
3524: GO 2977
3526: POP
3527: POP
// end ;
3528: LD_VAR 0 1
3532: RET
// export function Multiplayer_Start ( ) ; begin
3533: LD_INT 0
3535: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3536: CALL 2019 0 0
// Multiplayer_InitPointSystem ( ) ;
3540: CALL 4236 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3544: LD_INT 20
3546: PPUSH
3547: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3551: LD_INT 150
3553: PPUSH
3554: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3558: LD_INT 5
3560: PPUSH
3561: CALL 4412 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3565: LD_INT 40
3567: NEG
3568: PPUSH
3569: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3573: LD_INT 200
3575: PPUSH
3576: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3580: LD_INT 2
3582: PPUSH
3583: CALL 4412 0 1
// Multiplayer_SpawnArtifact ;
3587: CALL 4852 0 0
// if multi_support then
3591: LD_EXP 23
3595: IFFALSE 3607
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3597: LD_ADDR_EXP 27
3601: PUSH
3602: CALL 2941 0 0
3606: ST_TO_ADDR
// if multi_sides [ your_side ] then
3607: LD_EXP 7
3611: PUSH
3612: LD_OWVAR 2
3616: ARRAY
3617: IFFALSE 3644
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3619: LD_INT 22
3621: PUSH
3622: LD_OWVAR 2
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: PPUSH
3631: CALL_OW 69
3635: PUSH
3636: LD_INT 1
3638: ARRAY
3639: PPUSH
3640: CALL_OW 87
// end ;
3644: LD_VAR 0 1
3648: RET
// export function Multiplayer_End ( ) ; var i , j , tmp , reinforcements_arrive ; begin
3649: LD_INT 0
3651: PPUSH
3652: PPUSH
3653: PPUSH
3654: PPUSH
3655: PPUSH
// reinforcements_arrive := 0 ;
3656: LD_ADDR_VAR 0 5
3660: PUSH
3661: LD_INT 0
3663: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3664: LD_INT 35
3666: PPUSH
3667: CALL_OW 67
// if tick > multi_support_arrive_time and not multi_reinforcements_spawned and multi_support then
3671: LD_OWVAR 1
3675: PUSH
3676: LD_EXP 29
3680: GREATER
3681: PUSH
3682: LD_EXP 28
3686: NOT
3687: AND
3688: PUSH
3689: LD_EXP 23
3693: AND
3694: IFFALSE 3859
// begin multi_reinforcements_spawned := true ;
3696: LD_ADDR_EXP 28
3700: PUSH
3701: LD_INT 1
3703: ST_TO_ADDR
// for i := 1 to 8 do
3704: LD_ADDR_VAR 0 2
3708: PUSH
3709: DOUBLE
3710: LD_INT 1
3712: DEC
3713: ST_TO_ADDR
3714: LD_INT 8
3716: PUSH
3717: FOR_TO
3718: IFFALSE 3847
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
3720: LD_EXP 7
3724: PUSH
3725: LD_VAR 0 2
3729: ARRAY
3730: PUSH
3731: LD_EXP 25
3735: PUSH
3736: LD_VAR 0 2
3740: ARRAY
3741: NOT
3742: AND
3743: PUSH
3744: LD_EXP 27
3748: PUSH
3749: LD_VAR 0 2
3753: ARRAY
3754: AND
3755: IFFALSE 3845
// begin tmp := multi_reinforcements [ i ] ;
3757: LD_ADDR_VAR 0 4
3761: PUSH
3762: LD_EXP 27
3766: PUSH
3767: LD_VAR 0 2
3771: ARRAY
3772: ST_TO_ADDR
// for j in tmp do
3773: LD_ADDR_VAR 0 3
3777: PUSH
3778: LD_VAR 0 4
3782: PUSH
3783: FOR_IN
3784: IFFALSE 3821
// PlaceUnitArea ( j , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3786: LD_VAR 0 3
3790: PPUSH
3791: LD_EXP 12
3795: PUSH
3796: LD_EXP 7
3800: PUSH
3801: LD_VAR 0 2
3805: ARRAY
3806: ARRAY
3807: PUSH
3808: LD_INT 2
3810: ARRAY
3811: PPUSH
3812: LD_INT 0
3814: PPUSH
3815: CALL_OW 49
3819: GO 3783
3821: POP
3822: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , [ ] ) ;
3823: LD_ADDR_EXP 27
3827: PUSH
3828: LD_EXP 27
3832: PPUSH
3833: LD_VAR 0 2
3837: PPUSH
3838: EMPTY
3839: PPUSH
3840: CALL_OW 1
3844: ST_TO_ADDR
// end ; end ;
3845: GO 3717
3847: POP
3848: POP
// reinforcements_arrive := tick ;
3849: LD_ADDR_VAR 0 5
3853: PUSH
3854: LD_OWVAR 1
3858: ST_TO_ADDR
// end ; if not multi_custom_commanders then
3859: LD_EXP 16
3863: NOT
3864: IFFALSE 3977
// begin for i = 1 to 8 do
3866: LD_ADDR_VAR 0 2
3870: PUSH
3871: DOUBLE
3872: LD_INT 1
3874: DEC
3875: ST_TO_ADDR
3876: LD_INT 8
3878: PUSH
3879: FOR_TO
3880: IFFALSE 3951
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
3882: LD_INT 22
3884: PUSH
3885: LD_VAR 0 2
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PPUSH
3894: CALL_OW 69
3898: PUSH
3899: LD_INT 0
3901: EQUAL
3902: PUSH
3903: LD_EXP 25
3907: PUSH
3908: LD_VAR 0 2
3912: ARRAY
3913: NOT
3914: AND
3915: IFFALSE 3949
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
3917: LD_ADDR_EXP 25
3921: PUSH
3922: LD_EXP 25
3926: PPUSH
3927: LD_VAR 0 2
3931: PPUSH
3932: LD_INT 1
3934: PPUSH
3935: CALL_OW 1
3939: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
3940: LD_VAR 0 2
3944: PPUSH
3945: CALL 4482 0 1
// end ; end ;
3949: GO 3879
3951: POP
3952: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
3953: LD_EXP 25
3957: PPUSH
3958: CALL 18819 0 1
3962: PUSH
3963: LD_EXP 7
3967: PPUSH
3968: CALL 18819 0 1
3972: EQUAL
3973: IFFALSE 3977
// break ;
3975: GO 4033
// end ; until ( FilterAllUnits ( [ [ f_side , side_bot ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 and game ) or not multi_commanders ;
3977: LD_INT 22
3979: PUSH
3980: LD_EXP 3
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: PUSH
3989: LD_INT 21
3991: PUSH
3992: LD_INT 1
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 50
4001: PUSH
4002: EMPTY
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: PPUSH
4010: CALL_OW 69
4014: PUSH
4015: LD_INT 0
4017: EQUAL
4018: PUSH
4019: LD_EXP 2
4023: AND
4024: PUSH
4025: LD_EXP 24
4029: NOT
4030: OR
4031: IFFALSE 3664
// game := false ;
4033: LD_ADDR_EXP 2
4037: PUSH
4038: LD_INT 0
4040: ST_TO_ADDR
// for i := 1 to 8 do
4041: LD_ADDR_VAR 0 2
4045: PUSH
4046: DOUBLE
4047: LD_INT 1
4049: DEC
4050: ST_TO_ADDR
4051: LD_INT 8
4053: PUSH
4054: FOR_TO
4055: IFFALSE 4091
// begin if multi_sides [ i ] then
4057: LD_EXP 7
4061: PUSH
4062: LD_VAR 0 2
4066: ARRAY
4067: IFFALSE 4089
// SetMultiScore ( i , multi_points [ i ] ) ;
4069: LD_VAR 0 2
4073: PPUSH
4074: LD_EXP 30
4078: PUSH
4079: LD_VAR 0 2
4083: ARRAY
4084: PPUSH
4085: CALL_OW 506
// end ;
4089: GO 4054
4091: POP
4092: POP
// if multi_loosers [ your_side ] then
4093: LD_EXP 25
4097: PUSH
4098: LD_OWVAR 2
4102: ARRAY
4103: IFFALSE 4126
// begin if Multiplayer then
4105: LD_OWVAR 4
4109: IFFALSE 4117
// YouLostInMultiplayer else
4111: CALL_OW 107
4115: GO 4124
// YouLost (  ) ;
4117: LD_STRING 
4119: PPUSH
4120: CALL_OW 104
// end else
4124: GO 4142
// begin if Multiplayer then
4126: LD_OWVAR 4
4130: IFFALSE 4138
// YouWinInMultiplayer else
4132: CALL_OW 106
4136: GO 4142
// YouWin ;
4138: CALL_OW 103
// end ; end ;
4142: LD_VAR 0 1
4146: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4147: LD_INT 0
4149: PPUSH
4150: PPUSH
// result := [ ] ;
4151: LD_ADDR_VAR 0 1
4155: PUSH
4156: EMPTY
4157: ST_TO_ADDR
// for i := 1 to 8 do
4158: LD_ADDR_VAR 0 2
4162: PUSH
4163: DOUBLE
4164: LD_INT 1
4166: DEC
4167: ST_TO_ADDR
4168: LD_INT 8
4170: PUSH
4171: FOR_TO
4172: IFFALSE 4229
// begin if multi_sides [ i ] then
4174: LD_EXP 7
4178: PUSH
4179: LD_VAR 0 2
4183: ARRAY
4184: IFFALSE 4227
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4186: LD_ADDR_VAR 0 1
4190: PUSH
4191: LD_VAR 0 1
4195: PUSH
4196: LD_STRING #coop-points
4198: PUSH
4199: LD_VAR 0 2
4203: PUSH
4204: LD_VAR 0 2
4208: PUSH
4209: LD_EXP 30
4213: PUSH
4214: LD_VAR 0 2
4218: ARRAY
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: ADD
4226: ST_TO_ADDR
// end ; end ;
4227: GO 4171
4229: POP
4230: POP
// end ;
4231: LD_VAR 0 1
4235: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4236: LD_INT 0
4238: PPUSH
4239: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4240: LD_ADDR_EXP 30
4244: PUSH
4245: LD_INT 0
4247: PUSH
4248: LD_INT 0
4250: PUSH
4251: LD_INT 0
4253: PUSH
4254: LD_INT 0
4256: PUSH
4257: LD_INT 0
4259: PUSH
4260: LD_INT 0
4262: PUSH
4263: LD_INT 0
4265: PUSH
4266: LD_INT 0
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4279: LD_ADDR_EXP 31
4283: PUSH
4284: EMPTY
4285: ST_TO_ADDR
// end ;
4286: LD_VAR 0 1
4290: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4291: LD_INT 0
4293: PPUSH
// if not multi_points or not side or side > 8 then
4294: LD_EXP 30
4298: NOT
4299: PUSH
4300: LD_VAR 0 1
4304: NOT
4305: OR
4306: PUSH
4307: LD_VAR 0 1
4311: PUSH
4312: LD_INT 8
4314: GREATER
4315: OR
4316: IFFALSE 4320
// exit ;
4318: GO 4357
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4320: LD_ADDR_EXP 30
4324: PUSH
4325: LD_EXP 30
4329: PPUSH
4330: LD_VAR 0 1
4334: PPUSH
4335: LD_EXP 30
4339: PUSH
4340: LD_VAR 0 1
4344: ARRAY
4345: PUSH
4346: LD_VAR 0 2
4350: PLUS
4351: PPUSH
4352: CALL_OW 1
4356: ST_TO_ADDR
// end ;
4357: LD_VAR 0 3
4361: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4362: LD_INT 0
4364: PPUSH
// if not multi_points or not side or side > 8 then
4365: LD_EXP 30
4369: NOT
4370: PUSH
4371: LD_VAR 0 1
4375: NOT
4376: OR
4377: PUSH
4378: LD_VAR 0 1
4382: PUSH
4383: LD_INT 8
4385: GREATER
4386: OR
4387: IFFALSE 4391
// exit ;
4389: GO 4407
// result := multi_points [ side ] ;
4391: LD_ADDR_VAR 0 2
4395: PUSH
4396: LD_EXP 30
4400: PUSH
4401: LD_VAR 0 1
4405: ARRAY
4406: ST_TO_ADDR
// end ;
4407: LD_VAR 0 2
4411: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4412: LD_INT 0
4414: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4415: LD_ADDR_EXP 31
4419: PUSH
4420: LD_EXP 31
4424: PPUSH
4425: LD_EXP 31
4429: PUSH
4430: LD_INT 1
4432: PLUS
4433: PPUSH
4434: LD_VAR 0 1
4438: PPUSH
4439: CALL_OW 1
4443: ST_TO_ADDR
// end ;
4444: LD_VAR 0 2
4448: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4449: LD_INT 0
4451: PPUSH
// if not id then
4452: LD_VAR 0 1
4456: NOT
4457: IFFALSE 4461
// exit ;
4459: GO 4477
// result := multi_points_conditions [ id ] ;
4461: LD_ADDR_VAR 0 2
4465: PUSH
4466: LD_EXP 31
4470: PUSH
4471: LD_VAR 0 1
4475: ARRAY
4476: ST_TO_ADDR
// end ;
4477: LD_VAR 0 2
4481: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4482: LD_INT 0
4484: PPUSH
4485: PPUSH
4486: PPUSH
4487: PPUSH
4488: PPUSH
// players := [ ] ;
4489: LD_ADDR_VAR 0 3
4493: PUSH
4494: EMPTY
4495: ST_TO_ADDR
// for i = 1 to 8 do
4496: LD_ADDR_VAR 0 4
4500: PUSH
4501: DOUBLE
4502: LD_INT 1
4504: DEC
4505: ST_TO_ADDR
4506: LD_INT 8
4508: PUSH
4509: FOR_TO
4510: IFFALSE 4569
// begin if i = side then
4512: LD_VAR 0 4
4516: PUSH
4517: LD_VAR 0 1
4521: EQUAL
4522: IFFALSE 4526
// continue ;
4524: GO 4509
// if multi_sides [ i ] and not multi_loosers [ i ] then
4526: LD_EXP 7
4530: PUSH
4531: LD_VAR 0 4
4535: ARRAY
4536: PUSH
4537: LD_EXP 25
4541: PUSH
4542: LD_VAR 0 4
4546: ARRAY
4547: NOT
4548: AND
4549: IFFALSE 4567
// players := players ^ i ;
4551: LD_ADDR_VAR 0 3
4555: PUSH
4556: LD_VAR 0 3
4560: PUSH
4561: LD_VAR 0 4
4565: ADD
4566: ST_TO_ADDR
// end ;
4567: GO 4509
4569: POP
4570: POP
// if not players then
4571: LD_VAR 0 3
4575: NOT
4576: IFFALSE 4580
// exit ;
4578: GO 4847
// if players = 1 then
4580: LD_VAR 0 3
4584: PUSH
4585: LD_INT 1
4587: EQUAL
4588: IFFALSE 4649
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4590: LD_ADDR_VAR 0 4
4594: PUSH
4595: LD_INT 22
4597: PUSH
4598: LD_VAR 0 1
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 51
4609: PUSH
4610: EMPTY
4611: LIST
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL_OW 69
4621: PUSH
4622: FOR_IN
4623: IFFALSE 4645
// SetSide ( i , players [ 1 ] ) ;
4625: LD_VAR 0 4
4629: PPUSH
4630: LD_VAR 0 3
4634: PUSH
4635: LD_INT 1
4637: ARRAY
4638: PPUSH
4639: CALL_OW 235
4643: GO 4622
4645: POP
4646: POP
// end else
4647: GO 4847
// begin j := 1 ;
4649: LD_ADDR_VAR 0 5
4653: PUSH
4654: LD_INT 1
4656: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
4657: LD_ADDR_VAR 0 4
4661: PUSH
4662: LD_INT 22
4664: PUSH
4665: LD_VAR 0 1
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PUSH
4674: LD_INT 2
4676: PUSH
4677: LD_INT 21
4679: PUSH
4680: LD_INT 1
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: LD_INT 51
4689: PUSH
4690: EMPTY
4691: LIST
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PUSH
4697: LD_INT 21
4699: PUSH
4700: LD_INT 2
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PPUSH
4716: CALL_OW 69
4720: PUSH
4721: FOR_IN
4722: IFFALSE 4845
// begin SetSide ( i , players [ j ] ) ;
4724: LD_VAR 0 4
4728: PPUSH
4729: LD_VAR 0 3
4733: PUSH
4734: LD_VAR 0 5
4738: ARRAY
4739: PPUSH
4740: CALL_OW 235
// if IsDrivenBy ( i ) then
4744: LD_VAR 0 4
4748: PPUSH
4749: CALL_OW 311
4753: IFFALSE 4780
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
4755: LD_VAR 0 4
4759: PPUSH
4760: CALL_OW 311
4764: PPUSH
4765: LD_VAR 0 3
4769: PUSH
4770: LD_VAR 0 5
4774: ARRAY
4775: PPUSH
4776: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
4780: LD_VAR 0 4
4784: PPUSH
4785: CALL_OW 310
4789: PPUSH
4790: CALL_OW 247
4794: PUSH
4795: LD_INT 3
4797: EQUAL
4798: IFFALSE 4809
// ComExitBuilding ( i ) ;
4800: LD_VAR 0 4
4804: PPUSH
4805: CALL_OW 122
// j := j + 1 ;
4809: LD_ADDR_VAR 0 5
4813: PUSH
4814: LD_VAR 0 5
4818: PUSH
4819: LD_INT 1
4821: PLUS
4822: ST_TO_ADDR
// if j > players then
4823: LD_VAR 0 5
4827: PUSH
4828: LD_VAR 0 3
4832: GREATER
4833: IFFALSE 4843
// j := 1 ;
4835: LD_ADDR_VAR 0 5
4839: PUSH
4840: LD_INT 1
4842: ST_TO_ADDR
// end ;
4843: GO 4721
4845: POP
4846: POP
// end ; end ;
4847: LD_VAR 0 2
4851: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
4852: LD_INT 0
4854: PPUSH
4855: PPUSH
4856: PPUSH
// i := 3 ;
4857: LD_ADDR_VAR 0 2
4861: PUSH
4862: LD_INT 3
4864: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
4865: LD_ADDR_VAR 0 3
4869: PUSH
4870: LD_INT 5
4872: PUSH
4873: LD_INT 10
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 120
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 101
4892: PUSH
4893: LD_INT 8
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: LD_INT 27
4902: PUSH
4903: LD_INT 4
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
4916: LD_INT 4
4918: PPUSH
4919: LD_INT 5
4921: PPUSH
4922: LD_VAR 0 3
4926: PUSH
4927: LD_VAR 0 2
4931: ARRAY
4932: PUSH
4933: LD_INT 1
4935: ARRAY
4936: PPUSH
4937: LD_VAR 0 3
4941: PUSH
4942: LD_VAR 0 2
4946: ARRAY
4947: PUSH
4948: LD_INT 2
4950: ARRAY
4951: PPUSH
4952: LD_INT 0
4954: PPUSH
4955: CALL_OW 58
// end ;
4959: LD_VAR 0 1
4963: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
4964: LD_INT 0
4966: PPUSH
// if not side or side > 8 then
4967: LD_VAR 0 1
4971: NOT
4972: PUSH
4973: LD_VAR 0 1
4977: PUSH
4978: LD_INT 8
4980: GREATER
4981: OR
4982: IFFALSE 4986
// exit ;
4984: GO 5003
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
4986: LD_VAR 0 1
4990: PPUSH
4991: LD_INT 6
4993: PPUSH
4994: CALL 4449 0 1
4998: PPUSH
4999: CALL 4291 0 2
// end ;
5003: LD_VAR 0 2
5007: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5008: LD_INT 0
5010: PPUSH
// if not side or side > 8 then
5011: LD_VAR 0 1
5015: NOT
5016: PUSH
5017: LD_VAR 0 1
5021: PUSH
5022: LD_INT 8
5024: GREATER
5025: OR
5026: IFFALSE 5030
// exit ;
5028: GO 5047
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5030: LD_VAR 0 1
5034: PPUSH
5035: LD_INT 4
5037: PPUSH
5038: CALL 4449 0 1
5042: PPUSH
5043: CALL 4291 0 2
// end ;
5047: LD_VAR 0 2
5051: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5052: LD_INT 0
5054: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5055: LD_VAR 0 1
5059: NOT
5060: PUSH
5061: LD_VAR 0 1
5065: PUSH
5066: LD_INT 8
5068: GREATER
5069: OR
5070: PUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_INT 2
5078: PUSH
5079: LD_INT 6
5081: PUSH
5082: LD_INT 36
5084: PUSH
5085: LD_INT 0
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: IN
5094: NOT
5095: OR
5096: IFFALSE 5100
// exit ;
5098: GO 5117
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_INT 3
5107: PPUSH
5108: CALL 4449 0 1
5112: PPUSH
5113: CALL 4291 0 2
// end ;
5117: LD_VAR 0 3
5121: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5122: LD_INT 0
5124: PPUSH
5125: PPUSH
// if not un then
5126: LD_VAR 0 1
5130: NOT
5131: IFFALSE 5135
// exit ;
5133: GO 5181
// if not points then
5135: LD_VAR 0 3
5139: NOT
5140: IFFALSE 5157
// gained_points := Multiplayer_GetCondition ( 1 ) else
5142: LD_ADDR_VAR 0 5
5146: PUSH
5147: LD_INT 1
5149: PPUSH
5150: CALL 4449 0 1
5154: ST_TO_ADDR
5155: GO 5167
// gained_points := points ;
5157: LD_ADDR_VAR 0 5
5161: PUSH
5162: LD_VAR 0 3
5166: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5167: LD_VAR 0 2
5171: PPUSH
5172: LD_VAR 0 5
5176: PPUSH
5177: CALL 4291 0 2
5181: LD_VAR 0 4
5185: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5186: LD_INT 0
5188: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5189: LD_VAR 0 1
5193: PPUSH
5194: LD_INT 2
5196: PPUSH
5197: CALL 4449 0 1
5201: PPUSH
5202: CALL 4291 0 2
// end ; end_of_file
5206: LD_VAR 0 2
5210: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp ; export Saliba , Gensher , Shariff ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , techs , fac ; begin
5211: LD_INT 0
5213: PPUSH
5214: PPUSH
5215: PPUSH
5216: PPUSH
5217: PPUSH
5218: PPUSH
5219: PPUSH
5220: PPUSH
5221: PPUSH
5222: PPUSH
// side_bot := side ;
5223: LD_ADDR_EXP 3
5227: PUSH
5228: LD_VAR 0 1
5232: ST_TO_ADDR
// techs := [ tech_ApeAgres , tech_ApeBrain , tech_ApeNeural , tech_StimDrugs , tech_Bio1 , tech_Bio2 , tech_Weap3 , tech_RemCharge , tech_Rocket , tech_SibEng , tech_SibImplosion , tech_Sib2 ] ;
5233: LD_ADDR_VAR 0 10
5237: PUSH
5238: LD_INT 11
5240: PUSH
5241: LD_INT 4
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: LD_INT 5
5249: PUSH
5250: LD_INT 66
5252: PUSH
5253: LD_INT 67
5255: PUSH
5256: LD_INT 53
5258: PUSH
5259: LD_INT 18
5261: PUSH
5262: LD_INT 40
5264: PUSH
5265: LD_INT 22
5267: PUSH
5268: LD_INT 72
5270: PUSH
5271: LD_INT 55
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: ST_TO_ADDR
// for i in techs do
5288: LD_ADDR_VAR 0 3
5292: PUSH
5293: LD_VAR 0 10
5297: PUSH
5298: FOR_IN
5299: IFFALSE 5320
// SetTech ( i , side , state_researched ) ;
5301: LD_VAR 0 3
5305: PPUSH
5306: LD_VAR 0 1
5310: PPUSH
5311: LD_INT 2
5313: PPUSH
5314: CALL_OW 322
5318: GO 5298
5320: POP
5321: POP
// InitScriptBases ;
5322: CALL 7261 0 0
// skill := [ 5 , 7 , 10 ] [ Difficulty ] ;
5326: LD_ADDR_VAR 0 8
5330: PUSH
5331: LD_INT 5
5333: PUSH
5334: LD_INT 7
5336: PUSH
5337: LD_INT 10
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: PUSH
5345: LD_OWVAR 67
5349: ARRAY
5350: ST_TO_ADDR
// uc_side := side ;
5351: LD_ADDR_OWVAR 20
5355: PUSH
5356: LD_VAR 0 1
5360: ST_TO_ADDR
// uc_nation := 2 ;
5361: LD_ADDR_OWVAR 21
5365: PUSH
5366: LD_INT 2
5368: ST_TO_ADDR
// ar_force_north := PrepareBase ( ar_dep_n , area_base_north , dammam , skill , [ 10000 , 1000 , 900 ] , [ 12 , 4 , - 1 , 4 ] ) ;
5369: LD_ADDR_EXP 34
5373: PUSH
5374: LD_INT 94
5376: PPUSH
5377: LD_INT 35
5379: PPUSH
5380: LD_STRING dammam
5382: PPUSH
5383: LD_VAR 0 8
5387: PPUSH
5388: LD_INT 10000
5390: PUSH
5391: LD_INT 1000
5393: PUSH
5394: LD_INT 900
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: LIST
5401: PPUSH
5402: LD_INT 12
5404: PUSH
5405: LD_INT 4
5407: PUSH
5408: LD_INT 1
5410: NEG
5411: PUSH
5412: LD_INT 4
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: PPUSH
5421: CALL 25378 0 6
5425: ST_TO_ADDR
// ar_force_north2 := PrepareBase ( ar_dep_n2 , area_base_north2 ,  , skill , [ 500 , 130 , 0 ] , [ 16 , 4 , 3 , 1 ] ) ;
5426: LD_ADDR_EXP 35
5430: PUSH
5431: LD_INT 122
5433: PPUSH
5434: LD_INT 38
5436: PPUSH
5437: LD_STRING 
5439: PPUSH
5440: LD_VAR 0 8
5444: PPUSH
5445: LD_INT 500
5447: PUSH
5448: LD_INT 130
5450: PUSH
5451: LD_INT 0
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: PPUSH
5459: LD_INT 16
5461: PUSH
5462: LD_INT 4
5464: PUSH
5465: LD_INT 3
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: PPUSH
5477: CALL 25378 0 6
5481: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , area_base_west , jeddah , skill , [ 2100 , 300 , 10 ] , [ 12 , 4 , 3 , 2 ] ) ;
5482: LD_ADDR_EXP 32
5486: PUSH
5487: LD_INT 45
5489: PPUSH
5490: LD_INT 34
5492: PPUSH
5493: LD_STRING jeddah
5495: PPUSH
5496: LD_VAR 0 8
5500: PPUSH
5501: LD_INT 2100
5503: PUSH
5504: LD_INT 300
5506: PUSH
5507: LD_INT 10
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: PPUSH
5515: LD_INT 12
5517: PUSH
5518: LD_INT 4
5520: PUSH
5521: LD_INT 3
5523: PUSH
5524: LD_INT 2
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL 25378 0 6
5537: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , area_base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 8 , 2 , 3 , 1 ] ) ;
5538: LD_ADDR_EXP 33
5542: PUSH
5543: LD_INT 7
5545: PPUSH
5546: LD_INT 33
5548: PPUSH
5549: LD_STRING riyadh
5551: PPUSH
5552: LD_VAR 0 8
5556: PPUSH
5557: LD_INT 500
5559: PUSH
5560: LD_INT 60
5562: PUSH
5563: LD_INT 0
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: PPUSH
5571: LD_INT 8
5573: PUSH
5574: LD_INT 2
5576: PUSH
5577: LD_INT 3
5579: PUSH
5580: LD_INT 1
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL 25378 0 6
5593: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , area_base_east ,  , skill , [ 500 , 50 , 0 ] , [ 11 , 2 , 4 , 1 ] ) ;
5594: LD_ADDR_EXP 36
5598: PUSH
5599: LD_INT 69
5601: PPUSH
5602: LD_INT 36
5604: PPUSH
5605: LD_STRING 
5607: PPUSH
5608: LD_VAR 0 8
5612: PPUSH
5613: LD_INT 500
5615: PUSH
5616: LD_INT 50
5618: PUSH
5619: LD_INT 0
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: PPUSH
5627: LD_INT 11
5629: PUSH
5630: LD_INT 2
5632: PUSH
5633: LD_INT 4
5635: PUSH
5636: LD_INT 1
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: PPUSH
5645: CALL 25378 0 6
5649: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5650: LD_ADDR_OWVAR 37
5654: PUSH
5655: LD_INT 14
5657: ST_TO_ADDR
// vc_engine := engine_siberite ;
5658: LD_ADDR_OWVAR 39
5662: PUSH
5663: LD_INT 3
5665: ST_TO_ADDR
// vc_control := control_manual ;
5666: LD_ADDR_OWVAR 38
5670: PUSH
5671: LD_INT 1
5673: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5674: LD_ADDR_OWVAR 40
5678: PUSH
5679: LD_INT 31
5681: ST_TO_ADDR
// for i = 1 to 4 do
5682: LD_ADDR_VAR 0 3
5686: PUSH
5687: DOUBLE
5688: LD_INT 1
5690: DEC
5691: ST_TO_ADDR
5692: LD_INT 4
5694: PUSH
5695: FOR_TO
5696: IFFALSE 5845
// begin xy := [ [ 156 , 15 ] , [ 12 , 7 ] ] [ i mod 2 + 1 ] ;
5698: LD_ADDR_VAR 0 5
5702: PUSH
5703: LD_INT 156
5705: PUSH
5706: LD_INT 15
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PUSH
5713: LD_INT 12
5715: PUSH
5716: LD_INT 7
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: LD_VAR 0 3
5731: PUSH
5732: LD_INT 2
5734: MOD
5735: PUSH
5736: LD_INT 1
5738: PLUS
5739: ARRAY
5740: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
5741: LD_INT 0
5743: PPUSH
5744: LD_INT 3
5746: PPUSH
5747: LD_VAR 0 8
5751: PPUSH
5752: CALL_OW 380
// un := CreateVehicle ;
5756: LD_ADDR_VAR 0 6
5760: PUSH
5761: CALL_OW 45
5765: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
5766: LD_VAR 0 6
5770: PPUSH
5771: LD_INT 0
5773: PPUSH
5774: LD_INT 5
5776: PPUSH
5777: CALL_OW 12
5781: PPUSH
5782: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
5786: LD_VAR 0 6
5790: PPUSH
5791: LD_VAR 0 5
5795: PUSH
5796: LD_INT 1
5798: ARRAY
5799: PPUSH
5800: LD_VAR 0 5
5804: PUSH
5805: LD_INT 2
5807: ARRAY
5808: PPUSH
5809: LD_INT 6
5811: PPUSH
5812: LD_INT 0
5814: PPUSH
5815: CALL_OW 50
// un2 := CreateHuman ;
5819: LD_ADDR_VAR 0 7
5823: PUSH
5824: CALL_OW 44
5828: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
5829: LD_VAR 0 7
5833: PPUSH
5834: LD_VAR 0 6
5838: PPUSH
5839: CALL_OW 52
// end ;
5843: GO 5695
5845: POP
5846: POP
// for i in FilterAllUnits ( [ [ f_side , side_bot ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
5847: LD_ADDR_VAR 0 3
5851: PUSH
5852: LD_INT 22
5854: PUSH
5855: LD_EXP 3
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 30
5866: PUSH
5867: LD_INT 31
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: LD_INT 58
5876: PUSH
5877: EMPTY
5878: LIST
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: LIST
5884: PPUSH
5885: CALL_OW 69
5889: PUSH
5890: FOR_IN
5891: IFFALSE 6003
// begin d := GetDir ( i ) ;
5893: LD_ADDR_VAR 0 4
5897: PUSH
5898: LD_VAR 0 3
5902: PPUSH
5903: CALL_OW 254
5907: ST_TO_ADDR
// if d < 3 then
5908: LD_VAR 0 4
5912: PUSH
5913: LD_INT 3
5915: LESS
5916: IFFALSE 5934
// d := d + 3 else
5918: LD_ADDR_VAR 0 4
5922: PUSH
5923: LD_VAR 0 4
5927: PUSH
5928: LD_INT 3
5930: PLUS
5931: ST_TO_ADDR
5932: GO 5948
// d := d - 3 ;
5934: LD_ADDR_VAR 0 4
5938: PUSH
5939: LD_VAR 0 4
5943: PUSH
5944: LD_INT 3
5946: MINUS
5947: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
5948: LD_INT 0
5950: PPUSH
5951: LD_INT 8
5953: PPUSH
5954: LD_VAR 0 8
5958: PPUSH
5959: CALL_OW 380
// un := CreateHuman ;
5963: LD_ADDR_VAR 0 6
5967: PUSH
5968: CALL_OW 44
5972: ST_TO_ADDR
// SetDir ( un , d ) ;
5973: LD_VAR 0 6
5977: PPUSH
5978: LD_VAR 0 4
5982: PPUSH
5983: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5987: LD_VAR 0 6
5991: PPUSH
5992: LD_VAR 0 3
5996: PPUSH
5997: CALL_OW 52
// end ;
6001: GO 5890
6003: POP
6004: POP
// ar_force_tmp := [ ] ;
6005: LD_ADDR_EXP 37
6009: PUSH
6010: EMPTY
6011: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
6012: LD_INT 1
6014: PPUSH
6015: LD_INT 1
6017: PPUSH
6018: LD_VAR 0 8
6022: PPUSH
6023: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6027: LD_ADDR_OWVAR 33
6031: PUSH
6032: LD_STRING SecondCharsGal
6034: ST_TO_ADDR
// hc_face_number := 4 ;
6035: LD_ADDR_OWVAR 34
6039: PUSH
6040: LD_INT 4
6042: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
6043: LD_ADDR_EXP 37
6047: PUSH
6048: LD_EXP 37
6052: PPUSH
6053: LD_INT 1
6055: PPUSH
6056: CALL_OW 44
6060: PPUSH
6061: CALL_OW 1
6065: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6066: LD_INT 2
6068: PPUSH
6069: LD_INT 4
6071: PPUSH
6072: LD_VAR 0 8
6076: PPUSH
6077: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6081: LD_ADDR_OWVAR 33
6085: PUSH
6086: LD_STRING SecondCharsGal
6088: ST_TO_ADDR
// hc_face_number := 15 ;
6089: LD_ADDR_OWVAR 34
6093: PUSH
6094: LD_INT 15
6096: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
6097: LD_ADDR_EXP 37
6101: PUSH
6102: LD_EXP 37
6106: PPUSH
6107: LD_INT 2
6109: PPUSH
6110: CALL_OW 44
6114: PPUSH
6115: CALL_OW 1
6119: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6120: LD_INT 2
6122: PPUSH
6123: LD_INT 4
6125: PPUSH
6126: LD_VAR 0 8
6130: PPUSH
6131: CALL_OW 380
// hc_gallery :=  ;
6135: LD_ADDR_OWVAR 33
6139: PUSH
6140: LD_STRING 
6142: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
6143: LD_ADDR_EXP 37
6147: PUSH
6148: LD_EXP 37
6152: PPUSH
6153: LD_INT 3
6155: PPUSH
6156: CALL_OW 44
6160: PPUSH
6161: CALL_OW 1
6165: ST_TO_ADDR
// hc_sex := sex_male ;
6166: LD_ADDR_OWVAR 27
6170: PUSH
6171: LD_INT 1
6173: ST_TO_ADDR
// hc_class = 11 ;
6174: LD_ADDR_OWVAR 28
6178: PUSH
6179: LD_INT 11
6181: ST_TO_ADDR
// hc_gallery = sandar ;
6182: LD_ADDR_OWVAR 33
6186: PUSH
6187: LD_STRING sandar
6189: ST_TO_ADDR
// hc_face_number = 33 ;
6190: LD_ADDR_OWVAR 34
6194: PUSH
6195: LD_INT 33
6197: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
6198: LD_ADDR_OWVAR 26
6202: PUSH
6203: LD_STRING Thabit Muhair Saliba
6205: ST_TO_ADDR
// hc_skills = [ 5 , 5 , 3 , 3 ] ;
6206: LD_ADDR_OWVAR 31
6210: PUSH
6211: LD_INT 5
6213: PUSH
6214: LD_INT 5
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 3
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: ST_TO_ADDR
// Saliba := CreateHuman ;
6229: LD_ADDR_EXP 39
6233: PUSH
6234: CALL_OW 44
6238: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
6239: LD_EXP 39
6243: PPUSH
6244: LD_INT 7
6246: PPUSH
6247: CALL_OW 52
// hc_name := Dietrich Gensher ;
6251: LD_ADDR_OWVAR 26
6255: PUSH
6256: LD_STRING Dietrich Gensher
6258: ST_TO_ADDR
// hc_class := 1 ;
6259: LD_ADDR_OWVAR 28
6263: PUSH
6264: LD_INT 1
6266: ST_TO_ADDR
// hc_gallery := sandar ;
6267: LD_ADDR_OWVAR 33
6271: PUSH
6272: LD_STRING sandar
6274: ST_TO_ADDR
// hc_face_number := 4 ;
6275: LD_ADDR_OWVAR 34
6279: PUSH
6280: LD_INT 4
6282: ST_TO_ADDR
// hc_skills := [ 10 , 6 , 5 , 4 ] ;
6283: LD_ADDR_OWVAR 31
6287: PUSH
6288: LD_INT 10
6290: PUSH
6291: LD_INT 6
6293: PUSH
6294: LD_INT 5
6296: PUSH
6297: LD_INT 4
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: ST_TO_ADDR
// Gensher := CreateHuman ;
6306: LD_ADDR_EXP 40
6310: PUSH
6311: CALL_OW 44
6315: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_w ) ;
6316: LD_EXP 40
6320: PPUSH
6321: LD_INT 45
6323: PPUSH
6324: CALL_OW 52
// hc_name := Abdul Shariff ;
6328: LD_ADDR_OWVAR 26
6332: PUSH
6333: LD_STRING Abdul Shariff
6335: ST_TO_ADDR
// hc_class := 11 ;
6336: LD_ADDR_OWVAR 28
6340: PUSH
6341: LD_INT 11
6343: ST_TO_ADDR
// hc_gallery := sandar ;
6344: LD_ADDR_OWVAR 33
6348: PUSH
6349: LD_STRING sandar
6351: ST_TO_ADDR
// hc_face_number := 5 ;
6352: LD_ADDR_OWVAR 34
6356: PUSH
6357: LD_INT 5
6359: ST_TO_ADDR
// hc_skills := [ 6 , 5 , 3 , 3 ] ;
6360: LD_ADDR_OWVAR 31
6364: PUSH
6365: LD_INT 6
6367: PUSH
6368: LD_INT 5
6370: PUSH
6371: LD_INT 3
6373: PUSH
6374: LD_INT 3
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: ST_TO_ADDR
// Shariff := CreateHuman ;
6383: LD_ADDR_EXP 41
6387: PUSH
6388: CALL_OW 44
6392: ST_TO_ADDR
// PlaceHumanInUnit ( Shariff , ar_dep_n ) ;
6393: LD_EXP 41
6397: PPUSH
6398: LD_INT 94
6400: PPUSH
6401: CALL_OW 52
// InitHc ;
6405: CALL_OW 19
// for d := 1 to 5 do
6409: LD_ADDR_VAR 0 4
6413: PUSH
6414: DOUBLE
6415: LD_INT 1
6417: DEC
6418: ST_TO_ADDR
6419: LD_INT 5
6421: PUSH
6422: FOR_TO
6423: IFFALSE 6907
// begin fac := FilterUnitsInArea ( arAreas [ d ] , [ f_btype , b_factory ] ) ;
6425: LD_ADDR_VAR 0 11
6429: PUSH
6430: LD_EXP 49
6434: PUSH
6435: LD_VAR 0 4
6439: ARRAY
6440: PPUSH
6441: LD_INT 30
6443: PUSH
6444: LD_INT 3
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PPUSH
6451: CALL_OW 70
6455: ST_TO_ADDR
// if fac then
6456: LD_VAR 0 11
6460: IFFALSE 6493
// arFactories := Replace ( arFactories , d , fac [ 1 ] ) else
6462: LD_ADDR_EXP 48
6466: PUSH
6467: LD_EXP 48
6471: PPUSH
6472: LD_VAR 0 4
6476: PPUSH
6477: LD_VAR 0 11
6481: PUSH
6482: LD_INT 1
6484: ARRAY
6485: PPUSH
6486: CALL_OW 1
6490: ST_TO_ADDR
6491: GO 6516
// arFactories := Replace ( arFactories , d , 0 ) ;
6493: LD_ADDR_EXP 48
6497: PUSH
6498: LD_EXP 48
6502: PPUSH
6503: LD_VAR 0 4
6507: PPUSH
6508: LD_INT 0
6510: PPUSH
6511: CALL_OW 1
6515: ST_TO_ADDR
// for i := 1 to 2 do
6516: LD_ADDR_VAR 0 3
6520: PUSH
6521: DOUBLE
6522: LD_INT 1
6524: DEC
6525: ST_TO_ADDR
6526: LD_INT 2
6528: PUSH
6529: FOR_TO
6530: IFFALSE 6673
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_remote , ar_crane , 100 ) ;
6532: LD_INT 14
6534: PPUSH
6535: LD_INT 3
6537: PPUSH
6538: LD_INT 2
6540: PPUSH
6541: LD_INT 88
6543: PPUSH
6544: LD_INT 100
6546: PPUSH
6547: CALL 21557 0 5
// un := CreateVehicle ;
6551: LD_ADDR_VAR 0 6
6555: PUSH
6556: CALL_OW 45
6560: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6561: LD_ADDR_EXP 45
6565: PUSH
6566: LD_EXP 45
6570: PPUSH
6571: LD_EXP 45
6575: PUSH
6576: LD_INT 1
6578: PLUS
6579: PPUSH
6580: LD_VAR 0 4
6584: PUSH
6585: LD_VAR 0 6
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PPUSH
6594: CALL_OW 1
6598: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6599: LD_VAR 0 6
6603: PPUSH
6604: LD_INT 0
6606: PPUSH
6607: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6611: LD_VAR 0 6
6615: PPUSH
6616: LD_INT 0
6618: PPUSH
6619: LD_INT 5
6621: PPUSH
6622: CALL_OW 12
6626: PPUSH
6627: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6631: LD_VAR 0 6
6635: PPUSH
6636: LD_INT 24
6638: PUSH
6639: LD_INT 20
6641: PUSH
6642: LD_INT 21
6644: PUSH
6645: LD_INT 22
6647: PUSH
6648: LD_INT 46
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: PUSH
6658: LD_VAR 0 4
6662: ARRAY
6663: PPUSH
6664: LD_INT 0
6666: PPUSH
6667: CALL_OW 49
// end ;
6671: GO 6529
6673: POP
6674: POP
// for i := 1 to 4 do
6675: LD_ADDR_VAR 0 3
6679: PUSH
6680: DOUBLE
6681: LD_INT 1
6683: DEC
6684: ST_TO_ADDR
6685: LD_INT 4
6687: PUSH
6688: FOR_TO
6689: IFFALSE 6903
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_siberite , engine_solar ] [ rand ( 1 , 3 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
6691: LD_INT 14
6693: PPUSH
6694: LD_INT 3
6696: PUSH
6697: LD_INT 3
6699: PUSH
6700: LD_INT 2
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 1
6710: PPUSH
6711: LD_INT 3
6713: PPUSH
6714: CALL_OW 12
6718: ARRAY
6719: PPUSH
6720: LD_INT 1
6722: PUSH
6723: LD_INT 5
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: LD_INT 1
6732: PPUSH
6733: LD_INT 2
6735: PPUSH
6736: CALL_OW 12
6740: ARRAY
6741: PPUSH
6742: LD_INT 25
6744: PUSH
6745: LD_INT 27
6747: PUSH
6748: LD_INT 26
6750: PUSH
6751: LD_INT 28
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: PUSH
6760: LD_VAR 0 3
6764: PUSH
6765: LD_INT 4
6767: MOD
6768: PUSH
6769: LD_INT 1
6771: PLUS
6772: ARRAY
6773: PPUSH
6774: LD_INT 100
6776: PPUSH
6777: CALL 21557 0 5
// un := CreateVehicle ;
6781: LD_ADDR_VAR 0 6
6785: PUSH
6786: CALL_OW 45
6790: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6791: LD_ADDR_EXP 45
6795: PUSH
6796: LD_EXP 45
6800: PPUSH
6801: LD_EXP 45
6805: PUSH
6806: LD_INT 1
6808: PLUS
6809: PPUSH
6810: LD_VAR 0 4
6814: PUSH
6815: LD_VAR 0 6
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PPUSH
6824: CALL_OW 1
6828: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6829: LD_VAR 0 6
6833: PPUSH
6834: LD_INT 0
6836: PPUSH
6837: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6841: LD_VAR 0 6
6845: PPUSH
6846: LD_INT 0
6848: PPUSH
6849: LD_INT 5
6851: PPUSH
6852: CALL_OW 12
6856: PPUSH
6857: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6861: LD_VAR 0 6
6865: PPUSH
6866: LD_INT 24
6868: PUSH
6869: LD_INT 20
6871: PUSH
6872: LD_INT 21
6874: PUSH
6875: LD_INT 22
6877: PUSH
6878: LD_INT 46
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: PUSH
6888: LD_VAR 0 4
6892: ARRAY
6893: PPUSH
6894: LD_INT 0
6896: PPUSH
6897: CALL_OW 49
// end ;
6901: GO 6688
6903: POP
6904: POP
// end ;
6905: GO 6422
6907: POP
6908: POP
// InitHc ;
6909: CALL_OW 19
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
6913: LD_ADDR_VAR 0 9
6917: PUSH
6918: LD_INT 22
6920: PUSH
6921: LD_INT 2
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PPUSH
6928: CALL_OW 69
6932: ST_TO_ADDR
// if tmp and side <> 2 then
6933: LD_VAR 0 9
6937: PUSH
6938: LD_VAR 0 1
6942: PUSH
6943: LD_INT 2
6945: NONEQUAL
6946: AND
6947: IFFALSE 6980
// begin for i in tmp do
6949: LD_ADDR_VAR 0 3
6953: PUSH
6954: LD_VAR 0 9
6958: PUSH
6959: FOR_IN
6960: IFFALSE 6978
// SetSide ( i , side ) ;
6962: LD_VAR 0 3
6966: PPUSH
6967: LD_VAR 0 1
6971: PPUSH
6972: CALL_OW 235
6976: GO 6959
6978: POP
6979: POP
// end ; end ;
6980: LD_VAR 0 2
6984: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
6985: LD_INT 0
6987: PPUSH
6988: PPUSH
6989: PPUSH
6990: PPUSH
// tmp := AreaToList ( area , 0 ) ;
6991: LD_ADDR_VAR 0 5
6995: PUSH
6996: LD_VAR 0 1
7000: PPUSH
7001: LD_INT 0
7003: PPUSH
7004: CALL_OW 517
7008: ST_TO_ADDR
// if not tmp then
7009: LD_VAR 0 5
7013: NOT
7014: IFFALSE 7018
// exit ;
7016: GO 7256
// for i := 1 to n do
7018: LD_ADDR_VAR 0 4
7022: PUSH
7023: DOUBLE
7024: LD_INT 1
7026: DEC
7027: ST_TO_ADDR
7028: LD_VAR 0 2
7032: PUSH
7033: FOR_TO
7034: IFFALSE 7254
// begin r := rand ( 1 , tmp [ 1 ] ) ;
7036: LD_ADDR_VAR 0 6
7040: PUSH
7041: LD_INT 1
7043: PPUSH
7044: LD_VAR 0 5
7048: PUSH
7049: LD_INT 1
7051: ARRAY
7052: PPUSH
7053: CALL_OW 12
7057: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , side_bot , 0 ) ;
7058: LD_VAR 0 5
7062: PUSH
7063: LD_INT 1
7065: ARRAY
7066: PUSH
7067: LD_VAR 0 6
7071: ARRAY
7072: PPUSH
7073: LD_VAR 0 5
7077: PUSH
7078: LD_INT 2
7080: ARRAY
7081: PUSH
7082: LD_VAR 0 6
7086: ARRAY
7087: PPUSH
7088: LD_EXP 3
7092: PPUSH
7093: LD_INT 0
7095: PPUSH
7096: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
7100: LD_ADDR_EXP 51
7104: PUSH
7105: LD_EXP 51
7109: PPUSH
7110: LD_EXP 51
7114: PUSH
7115: LD_INT 1
7117: PLUS
7118: PPUSH
7119: LD_VAR 0 5
7123: PUSH
7124: LD_INT 1
7126: ARRAY
7127: PUSH
7128: LD_VAR 0 6
7132: ARRAY
7133: PPUSH
7134: CALL_OW 2
7138: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
7139: LD_ADDR_EXP 51
7143: PUSH
7144: LD_EXP 51
7148: PPUSH
7149: LD_EXP 51
7153: PUSH
7154: LD_INT 1
7156: PLUS
7157: PPUSH
7158: LD_VAR 0 5
7162: PUSH
7163: LD_INT 2
7165: ARRAY
7166: PUSH
7167: LD_VAR 0 6
7171: ARRAY
7172: PPUSH
7173: CALL_OW 2
7177: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
7178: LD_ADDR_VAR 0 5
7182: PUSH
7183: LD_VAR 0 5
7187: PPUSH
7188: LD_INT 1
7190: PPUSH
7191: LD_VAR 0 5
7195: PUSH
7196: LD_INT 1
7198: ARRAY
7199: PPUSH
7200: LD_VAR 0 6
7204: PPUSH
7205: CALL_OW 3
7209: PPUSH
7210: CALL_OW 1
7214: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
7215: LD_ADDR_VAR 0 5
7219: PUSH
7220: LD_VAR 0 5
7224: PPUSH
7225: LD_INT 2
7227: PPUSH
7228: LD_VAR 0 5
7232: PUSH
7233: LD_INT 2
7235: ARRAY
7236: PPUSH
7237: LD_VAR 0 6
7241: PPUSH
7242: CALL_OW 3
7246: PPUSH
7247: CALL_OW 1
7251: ST_TO_ADDR
// end ;
7252: GO 7033
7254: POP
7255: POP
// end ;
7256: LD_VAR 0 3
7260: RET
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arFactories , arAreas , arVehiclesCounter , arMinesList ; function InitScriptBases ; begin
7261: LD_INT 0
7263: PPUSH
// arTech := GetTechNation ( side_bot , nation_arabian , state_enabled ) ;
7264: LD_ADDR_EXP 42
7268: PUSH
7269: LD_EXP 3
7273: PPUSH
7274: LD_INT 2
7276: PPUSH
7277: LD_INT 1
7279: PPUSH
7280: CALL 16780 0 3
7284: ST_TO_ADDR
// arConstructList := [ ] ;
7285: LD_ADDR_EXP 43
7289: PUSH
7290: EMPTY
7291: ST_TO_ADDR
// arBuildings := [ ] ;
7292: LD_ADDR_EXP 44
7296: PUSH
7297: EMPTY
7298: ST_TO_ADDR
// arVehicles := [ ] ;
7299: LD_ADDR_EXP 45
7303: PUSH
7304: EMPTY
7305: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
7306: LD_ADDR_EXP 46
7310: PUSH
7311: EMPTY
7312: ST_TO_ADDR
// arDrivers := [ ] ;
7313: LD_ADDR_EXP 47
7317: PUSH
7318: EMPTY
7319: ST_TO_ADDR
// arFactories := [ ] ;
7320: LD_ADDR_EXP 48
7324: PUSH
7325: EMPTY
7326: ST_TO_ADDR
// arAreas := [ area_base_south , area_base_north , area_base_west , area_base_east , area_base_north2 ] ;
7327: LD_ADDR_EXP 49
7331: PUSH
7332: LD_INT 33
7334: PUSH
7335: LD_INT 35
7337: PUSH
7338: LD_INT 34
7340: PUSH
7341: LD_INT 36
7343: PUSH
7344: LD_INT 38
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: ST_TO_ADDR
// arVehiclesCounter := [ 6 , 6 , 6 , 6 , 2 ] ;
7354: LD_ADDR_EXP 50
7358: PUSH
7359: LD_INT 6
7361: PUSH
7362: LD_INT 6
7364: PUSH
7365: LD_INT 6
7367: PUSH
7368: LD_INT 6
7370: PUSH
7371: LD_INT 2
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: ST_TO_ADDR
// arMinesList := [ ] ;
7381: LD_ADDR_EXP 51
7385: PUSH
7386: EMPTY
7387: ST_TO_ADDR
// PlaceMines ( minefield_east , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
7388: LD_INT 1
7390: PPUSH
7391: LD_INT 7
7393: PUSH
7394: LD_INT 9
7396: PUSH
7397: LD_INT 11
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: PUSH
7405: LD_OWVAR 67
7409: ARRAY
7410: PPUSH
7411: CALL 6985 0 2
// PlaceMines ( minefield_north , [ 7 , 9 , 9 ] [ Difficulty ] ) ;
7415: LD_INT 3
7417: PPUSH
7418: LD_INT 7
7420: PUSH
7421: LD_INT 9
7423: PUSH
7424: LD_INT 9
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: LIST
7431: PUSH
7432: LD_OWVAR 67
7436: ARRAY
7437: PPUSH
7438: CALL 6985 0 2
// PlaceMines ( minefield_west , [ 6 , 8 , 12 ] [ Difficulty ] ) ;
7442: LD_INT 2
7444: PPUSH
7445: LD_INT 6
7447: PUSH
7448: LD_INT 8
7450: PUSH
7451: LD_INT 12
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: PUSH
7459: LD_OWVAR 67
7463: ARRAY
7464: PPUSH
7465: CALL 6985 0 2
// PlaceMines ( minefield_north2 , [ 5 , 7 , 9 ] [ Difficulty ] ) ;
7469: LD_INT 39
7471: PPUSH
7472: LD_INT 5
7474: PUSH
7475: LD_INT 7
7477: PUSH
7478: LD_INT 9
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: LIST
7485: PUSH
7486: LD_OWVAR 67
7490: ARRAY
7491: PPUSH
7492: CALL 6985 0 2
// PlaceMines ( minefield_south , [ 4 , 6 , 8 ] [ Difficulty ] ) ;
7496: LD_INT 25
7498: PPUSH
7499: LD_INT 4
7501: PUSH
7502: LD_INT 6
7504: PUSH
7505: LD_INT 8
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: PUSH
7513: LD_OWVAR 67
7517: ARRAY
7518: PPUSH
7519: CALL 6985 0 2
// PlaceMines ( minefield_extra , [ 12 , 14 , 16 ] [ Difficulty ] ) ;
7523: LD_INT 41
7525: PPUSH
7526: LD_INT 12
7528: PUSH
7529: LD_INT 14
7531: PUSH
7532: LD_INT 16
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: PUSH
7540: LD_OWVAR 67
7544: ARRAY
7545: PPUSH
7546: CALL 6985 0 2
// end ;
7550: LD_VAR 0 1
7554: RET
// function ArabianBaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
7555: LD_INT 0
7557: PPUSH
7558: PPUSH
7559: PPUSH
7560: PPUSH
7561: PPUSH
7562: PPUSH
7563: PPUSH
7564: PPUSH
7565: PPUSH
7566: PPUSH
7567: PPUSH
7568: PPUSH
7569: PPUSH
7570: PPUSH
7571: PPUSH
7572: PPUSH
7573: PPUSH
7574: PPUSH
7575: PPUSH
7576: PPUSH
7577: PPUSH
7578: PPUSH
7579: PPUSH
7580: PPUSH
7581: PPUSH
7582: PPUSH
7583: PPUSH
// enable ;
7584: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
7585: LD_ADDR_VAR 0 10
7589: PUSH
7590: LD_INT 81
7592: PUSH
7593: LD_VAR 0 1
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PPUSH
7602: CALL_OW 69
7606: ST_TO_ADDR
// if tmp then
7607: LD_VAR 0 10
7611: IFFALSE 7632
// enemySide := GetSide ( tmp [ 1 ] ) ;
7613: LD_ADDR_VAR 0 34
7617: PUSH
7618: LD_VAR 0 10
7622: PUSH
7623: LD_INT 1
7625: ARRAY
7626: PPUSH
7627: CALL_OW 255
7631: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7632: LD_ADDR_VAR 0 22
7636: PUSH
7637: LD_VAR 0 3
7641: PPUSH
7642: LD_INT 81
7644: PUSH
7645: LD_VAR 0 1
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 70
7658: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
7659: LD_ADDR_VAR 0 23
7663: PUSH
7664: LD_VAR 0 4
7668: PPUSH
7669: LD_INT 81
7671: PUSH
7672: LD_VAR 0 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PPUSH
7681: CALL_OW 70
7685: ST_TO_ADDR
// vehicles := CheckByIndex ( arVehicles , 1 , base , 2 ) ;
7686: LD_ADDR_VAR 0 26
7690: PUSH
7691: LD_EXP 45
7695: PPUSH
7696: LD_INT 1
7698: PPUSH
7699: LD_VAR 0 2
7703: PPUSH
7704: LD_INT 2
7706: PPUSH
7707: CALL 58938 0 4
7711: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7712: LD_ADDR_VAR 0 32
7716: PUSH
7717: LD_VAR 0 3
7721: PPUSH
7722: LD_INT 22
7724: PUSH
7725: LD_VAR 0 1
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 2
7736: PUSH
7737: LD_INT 30
7739: PUSH
7740: LD_INT 0
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 30
7749: PUSH
7750: LD_INT 1
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 70
7770: ST_TO_ADDR
// if depot then
7771: LD_VAR 0 32
7775: IFFALSE 7791
// depot := depot [ 1 ] ;
7777: LD_ADDR_VAR 0 32
7781: PUSH
7782: LD_VAR 0 32
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: ST_TO_ADDR
// if arTech then
7791: LD_EXP 42
7795: IFFALSE 7956
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7797: LD_ADDR_VAR 0 12
7801: PUSH
7802: LD_VAR 0 3
7806: PPUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 50
7821: PUSH
7822: EMPTY
7823: LIST
7824: PUSH
7825: LD_INT 2
7827: PUSH
7828: LD_INT 30
7830: PUSH
7831: LD_INT 6
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 30
7840: PUSH
7841: LD_INT 7
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 30
7850: PUSH
7851: LD_INT 8
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: LIST
7868: PPUSH
7869: CALL_OW 70
7873: ST_TO_ADDR
// if lab then
7874: LD_VAR 0 12
7878: IFFALSE 7956
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7880: LD_VAR 0 12
7884: PUSH
7885: LD_INT 1
7887: ARRAY
7888: PPUSH
7889: CALL_OW 461
7893: PUSH
7894: LD_INT 2
7896: EQUAL
7897: IFFALSE 7956
// begin for i in arTech do
7899: LD_ADDR_VAR 0 9
7903: PUSH
7904: LD_EXP 42
7908: PUSH
7909: FOR_IN
7910: IFFALSE 7954
// if CanBeResearched ( lab [ 1 ] , i ) then
7912: LD_VAR 0 12
7916: PUSH
7917: LD_INT 1
7919: ARRAY
7920: PPUSH
7921: LD_VAR 0 9
7925: PPUSH
7926: CALL_OW 430
7930: IFFALSE 7952
// begin ComResearch ( lab [ 1 ] , i ) ;
7932: LD_VAR 0 12
7936: PUSH
7937: LD_INT 1
7939: ARRAY
7940: PPUSH
7941: LD_VAR 0 9
7945: PPUSH
7946: CALL_OW 124
// break ;
7950: GO 7954
// end ;
7952: GO 7909
7954: POP
7955: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7956: LD_ADDR_VAR 0 29
7960: PUSH
7961: LD_VAR 0 3
7965: PPUSH
7966: LD_INT 22
7968: PUSH
7969: LD_VAR 0 1
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 30
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 50
7990: PUSH
7991: EMPTY
7992: LIST
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: LIST
7998: PPUSH
7999: CALL_OW 70
8003: ST_TO_ADDR
// if fac then
8004: LD_VAR 0 29
8008: IFFALSE 8397
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
8010: LD_VAR 0 29
8014: PUSH
8015: LD_INT 1
8017: ARRAY
8018: PPUSH
8019: CALL_OW 461
8023: PUSH
8024: LD_INT 2
8026: EQUAL
8027: IFFALSE 8397
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
8029: LD_ADDR_VAR 0 30
8033: PUSH
8034: LD_VAR 0 3
8038: PPUSH
8039: LD_INT 2
8041: PUSH
8042: LD_INT 30
8044: PUSH
8045: LD_INT 32
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: LD_INT 30
8054: PUSH
8055: LD_INT 33
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 35
8069: PUSH
8070: LD_INT 0
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PPUSH
8081: CALL_OW 70
8085: ST_TO_ADDR
// if emptyTowers then
8086: LD_VAR 0 30
8090: IFFALSE 8140
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
8092: LD_ADDR_VAR 0 31
8096: PUSH
8097: LD_VAR 0 30
8101: PUSH
8102: LD_INT 1
8104: ARRAY
8105: PPUSH
8106: LD_VAR 0 3
8110: PPUSH
8111: CALL 27064 0 2
8115: ST_TO_ADDR
// if weapon then
8116: LD_VAR 0 31
8120: IFFALSE 8140
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
8122: LD_VAR 0 30
8126: PUSH
8127: LD_INT 1
8129: ARRAY
8130: PPUSH
8131: LD_VAR 0 31
8135: PPUSH
8136: CALL_OW 148
// end ; if arConstructList then
8140: LD_EXP 43
8144: IFFALSE 8397
// for i := 1 to Count ( arConstructList ) do
8146: LD_ADDR_VAR 0 9
8150: PUSH
8151: DOUBLE
8152: LD_INT 1
8154: DEC
8155: ST_TO_ADDR
8156: LD_EXP 43
8160: PPUSH
8161: CALL 18819 0 1
8165: PUSH
8166: FOR_TO
8167: IFFALSE 8395
// begin if arConstructList [ i ] [ 1 ] = base then
8169: LD_EXP 43
8173: PUSH
8174: LD_VAR 0 9
8178: ARRAY
8179: PUSH
8180: LD_INT 1
8182: ARRAY
8183: PUSH
8184: LD_VAR 0 2
8188: EQUAL
8189: IFFALSE 8393
// if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) then
8191: LD_VAR 0 29
8195: PUSH
8196: LD_INT 1
8198: ARRAY
8199: PPUSH
8200: LD_EXP 43
8204: PUSH
8205: LD_VAR 0 9
8209: ARRAY
8210: PUSH
8211: LD_INT 2
8213: ARRAY
8214: PUSH
8215: LD_INT 1
8217: ARRAY
8218: PPUSH
8219: LD_EXP 43
8223: PUSH
8224: LD_VAR 0 9
8228: ARRAY
8229: PUSH
8230: LD_INT 2
8232: ARRAY
8233: PUSH
8234: LD_INT 2
8236: ARRAY
8237: PPUSH
8238: LD_EXP 43
8242: PUSH
8243: LD_VAR 0 9
8247: ARRAY
8248: PUSH
8249: LD_INT 2
8251: ARRAY
8252: PUSH
8253: LD_INT 3
8255: ARRAY
8256: PPUSH
8257: LD_EXP 43
8261: PUSH
8262: LD_VAR 0 9
8266: ARRAY
8267: PUSH
8268: LD_INT 2
8270: ARRAY
8271: PUSH
8272: LD_INT 4
8274: ARRAY
8275: PPUSH
8276: CALL_OW 448
8280: IFFALSE 8393
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) ;
8282: LD_VAR 0 29
8286: PUSH
8287: LD_INT 1
8289: ARRAY
8290: PPUSH
8291: LD_EXP 43
8295: PUSH
8296: LD_VAR 0 9
8300: ARRAY
8301: PUSH
8302: LD_INT 2
8304: ARRAY
8305: PUSH
8306: LD_INT 1
8308: ARRAY
8309: PPUSH
8310: LD_EXP 43
8314: PUSH
8315: LD_VAR 0 9
8319: ARRAY
8320: PUSH
8321: LD_INT 2
8323: ARRAY
8324: PUSH
8325: LD_INT 2
8327: ARRAY
8328: PPUSH
8329: LD_EXP 43
8333: PUSH
8334: LD_VAR 0 9
8338: ARRAY
8339: PUSH
8340: LD_INT 2
8342: ARRAY
8343: PUSH
8344: LD_INT 3
8346: ARRAY
8347: PPUSH
8348: LD_EXP 43
8352: PUSH
8353: LD_VAR 0 9
8357: ARRAY
8358: PUSH
8359: LD_INT 2
8361: ARRAY
8362: PUSH
8363: LD_INT 4
8365: ARRAY
8366: PPUSH
8367: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
8371: LD_ADDR_EXP 43
8375: PUSH
8376: LD_EXP 43
8380: PPUSH
8381: LD_VAR 0 9
8385: PPUSH
8386: CALL_OW 3
8390: ST_TO_ADDR
// break ;
8391: GO 8395
// end ; end ;
8393: GO 8166
8395: POP
8396: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8397: LD_ADDR_VAR 0 10
8401: PUSH
8402: LD_VAR 0 3
8406: PPUSH
8407: LD_INT 21
8409: PUSH
8410: LD_INT 3
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: LD_INT 3
8419: PUSH
8420: LD_INT 57
8422: PUSH
8423: EMPTY
8424: LIST
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_INT 3
8432: PUSH
8433: LD_INT 24
8435: PUSH
8436: LD_INT 1000
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: LIST
8451: PPUSH
8452: CALL_OW 70
8456: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
8457: LD_ADDR_VAR 0 17
8461: PUSH
8462: LD_VAR 0 3
8466: PPUSH
8467: CALL_OW 435
8471: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
8472: LD_ADDR_VAR 0 14
8476: PUSH
8477: LD_VAR 0 5
8481: PPUSH
8482: LD_INT 25
8484: PUSH
8485: LD_INT 3
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: LD_INT 50
8494: PUSH
8495: EMPTY
8496: LIST
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 72
8506: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( arFactories [ base ] ) then
8507: LD_VAR 0 14
8511: PPUSH
8512: LD_INT 3
8514: PUSH
8515: LD_INT 120
8517: PUSH
8518: LD_INT 7
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 3
8531: PUSH
8532: LD_INT 54
8534: PUSH
8535: EMPTY
8536: LIST
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PPUSH
8546: CALL_OW 72
8550: PUSH
8551: LD_EXP 48
8555: PUSH
8556: LD_VAR 0 2
8560: ARRAY
8561: PPUSH
8562: CALL_OW 302
8566: AND
8567: IFFALSE 8628
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , arFactories [ base ] ) ;
8569: LD_VAR 0 14
8573: PPUSH
8574: LD_INT 3
8576: PUSH
8577: LD_INT 120
8579: PUSH
8580: LD_INT 7
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PUSH
8591: LD_INT 3
8593: PUSH
8594: LD_INT 54
8596: PUSH
8597: EMPTY
8598: LIST
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PPUSH
8608: CALL_OW 72
8612: PPUSH
8613: LD_EXP 48
8617: PUSH
8618: LD_VAR 0 2
8622: ARRAY
8623: PPUSH
8624: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
8628: LD_ADDR_VAR 0 18
8632: PUSH
8633: LD_VAR 0 5
8637: PPUSH
8638: LD_INT 25
8640: PUSH
8641: LD_INT 4
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PUSH
8648: LD_INT 50
8650: PUSH
8651: EMPTY
8652: LIST
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PPUSH
8658: CALL_OW 72
8662: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
8663: LD_ADDR_VAR 0 12
8667: PUSH
8668: LD_VAR 0 3
8672: PPUSH
8673: LD_INT 2
8675: PUSH
8676: LD_INT 30
8678: PUSH
8679: LD_INT 6
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 30
8688: PUSH
8689: LD_INT 7
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 30
8698: PUSH
8699: LD_INT 8
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: PPUSH
8712: CALL_OW 70
8716: ST_TO_ADDR
// if sci then
8717: LD_VAR 0 18
8721: IFFALSE 8882
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
8723: LD_ADDR_VAR 0 20
8727: PUSH
8728: LD_VAR 0 5
8732: PPUSH
8733: LD_INT 95
8735: PUSH
8736: LD_VAR 0 3
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_INT 120
8747: PUSH
8748: LD_INT 1
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PPUSH
8759: CALL_OW 72
8763: ST_TO_ADDR
// if hurtUnits then
8764: LD_VAR 0 20
8768: IFFALSE 8829
// begin for i in sci do
8770: LD_ADDR_VAR 0 9
8774: PUSH
8775: LD_VAR 0 18
8779: PUSH
8780: FOR_IN
8781: IFFALSE 8825
// if IsInUnit ( i ) then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 310
8792: IFFALSE 8805
// ComExitBuilding ( i ) else
8794: LD_VAR 0 9
8798: PPUSH
8799: CALL_OW 122
8803: GO 8823
// ComHeal ( i , hurtUnits [ 1 ] ) ;
8805: LD_VAR 0 9
8809: PPUSH
8810: LD_VAR 0 20
8814: PUSH
8815: LD_INT 1
8817: ARRAY
8818: PPUSH
8819: CALL_OW 128
8823: GO 8780
8825: POP
8826: POP
// end else
8827: GO 8882
// if lab then
8829: LD_VAR 0 12
8833: IFFALSE 8882
// begin for i in sci do
8835: LD_ADDR_VAR 0 9
8839: PUSH
8840: LD_VAR 0 18
8844: PUSH
8845: FOR_IN
8846: IFFALSE 8880
// if not IsInUnit ( i ) then
8848: LD_VAR 0 9
8852: PPUSH
8853: CALL_OW 310
8857: NOT
8858: IFFALSE 8878
// ComEnterUnit ( i , lab [ 1 ] ) ;
8860: LD_VAR 0 9
8864: PPUSH
8865: LD_VAR 0 12
8869: PUSH
8870: LD_INT 1
8872: ARRAY
8873: PPUSH
8874: CALL_OW 120
8878: GO 8845
8880: POP
8881: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8882: LD_ADDR_VAR 0 13
8886: PUSH
8887: LD_VAR 0 5
8891: PPUSH
8892: LD_INT 25
8894: PUSH
8895: LD_INT 2
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PPUSH
8902: CALL_OW 72
8906: ST_TO_ADDR
// buildingsToBuild := CheckByIndex ( arBuildings , 1 , base , 2 ) ;
8907: LD_ADDR_VAR 0 33
8911: PUSH
8912: LD_EXP 44
8916: PPUSH
8917: LD_INT 1
8919: PPUSH
8920: LD_VAR 0 2
8924: PPUSH
8925: LD_INT 2
8927: PPUSH
8928: CALL 58938 0 4
8932: ST_TO_ADDR
// if eng then
8933: LD_VAR 0 13
8937: IFFALSE 9771
// begin for i in eng do
8939: LD_ADDR_VAR 0 9
8943: PUSH
8944: LD_VAR 0 13
8948: PUSH
8949: FOR_IN
8950: IFFALSE 9769
// begin tag := GetTag ( i ) ;
8952: LD_ADDR_VAR 0 15
8956: PUSH
8957: LD_VAR 0 9
8961: PPUSH
8962: CALL_OW 110
8966: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
8967: LD_VAR 0 9
8971: PPUSH
8972: LD_VAR 0 4
8976: PPUSH
8977: CALL_OW 308
8981: IFFALSE 9012
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8983: LD_VAR 0 9
8987: PPUSH
8988: LD_VAR 0 7
8992: PUSH
8993: LD_INT 1
8995: ARRAY
8996: PPUSH
8997: LD_VAR 0 7
9001: PUSH
9002: LD_INT 2
9004: ARRAY
9005: PPUSH
9006: CALL_OW 111
// continue ;
9010: GO 8949
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
9012: LD_VAR 0 9
9016: PPUSH
9017: CALL_OW 256
9021: PUSH
9022: LD_INT 800
9024: LESS
9025: PUSH
9026: LD_VAR 0 15
9030: PUSH
9031: LD_INT 1
9033: NONEQUAL
9034: AND
9035: IFFALSE 9085
// begin SetTag ( i , tHeal ) ;
9037: LD_VAR 0 9
9041: PPUSH
9042: LD_INT 1
9044: PPUSH
9045: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9049: LD_VAR 0 9
9053: PPUSH
9054: LD_VAR 0 6
9058: PUSH
9059: LD_INT 1
9061: ARRAY
9062: PPUSH
9063: LD_VAR 0 6
9067: PUSH
9068: LD_INT 2
9070: ARRAY
9071: PPUSH
9072: CALL_OW 111
// AddComHold ( i ) ;
9076: LD_VAR 0 9
9080: PPUSH
9081: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
9085: LD_VAR 0 15
9089: PUSH
9090: LD_INT 1
9092: EQUAL
9093: PUSH
9094: LD_VAR 0 9
9098: PPUSH
9099: CALL_OW 256
9103: PUSH
9104: LD_INT 1000
9106: EQUAL
9107: AND
9108: IFFALSE 9122
// SetTag ( i , 0 ) ;
9110: LD_VAR 0 9
9114: PPUSH
9115: LD_INT 0
9117: PPUSH
9118: CALL_OW 109
// if not tag then
9122: LD_VAR 0 15
9126: NOT
9127: IFFALSE 9294
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9129: LD_ADDR_VAR 0 11
9133: PUSH
9134: LD_VAR 0 3
9138: PPUSH
9139: LD_INT 57
9141: PUSH
9142: EMPTY
9143: LIST
9144: PPUSH
9145: CALL_OW 70
9149: ST_TO_ADDR
// if undone then
9150: LD_VAR 0 11
9154: IFFALSE 9176
// begin ComComplete ( i , undone [ 1 ] ) ;
9156: LD_VAR 0 9
9160: PPUSH
9161: LD_VAR 0 11
9165: PUSH
9166: LD_INT 1
9168: ARRAY
9169: PPUSH
9170: CALL 24917 0 2
// continue ;
9174: GO 8949
// end ; if cr or tmp or buildingsToBuild then
9176: LD_VAR 0 17
9180: PUSH
9181: LD_VAR 0 10
9185: OR
9186: PUSH
9187: LD_VAR 0 33
9191: OR
9192: IFFALSE 9268
// begin if IsInUnit ( i ) then
9194: LD_VAR 0 9
9198: PPUSH
9199: CALL_OW 310
9203: IFFALSE 9214
// ComExitBuilding ( i ) ;
9205: LD_VAR 0 9
9209: PPUSH
9210: CALL_OW 122
// if tmp then
9214: LD_VAR 0 10
9218: IFFALSE 9234
// SetTag ( i , tRepair ) else
9220: LD_VAR 0 9
9224: PPUSH
9225: LD_INT 3
9227: PPUSH
9228: CALL_OW 109
9232: GO 9266
// if cr then
9234: LD_VAR 0 17
9238: IFFALSE 9254
// SetTag ( i , tCrates ) else
9240: LD_VAR 0 9
9244: PPUSH
9245: LD_INT 2
9247: PPUSH
9248: CALL_OW 109
9252: GO 9266
// SetTag ( i , tBuild ) ;
9254: LD_VAR 0 9
9258: PPUSH
9259: LD_INT 5
9261: PPUSH
9262: CALL_OW 109
// end else
9266: GO 9294
// if not IsInUnit ( i ) then
9268: LD_VAR 0 9
9272: PPUSH
9273: CALL_OW 310
9277: NOT
9278: IFFALSE 9294
// ComEnterUnit ( i , depot ) ;
9280: LD_VAR 0 9
9284: PPUSH
9285: LD_VAR 0 32
9289: PPUSH
9290: CALL_OW 120
// end ; if tag = tRepair then
9294: LD_VAR 0 15
9298: PUSH
9299: LD_INT 3
9301: EQUAL
9302: IFFALSE 9408
// begin if IsInUnit ( i ) then
9304: LD_VAR 0 9
9308: PPUSH
9309: CALL_OW 310
9313: IFFALSE 9326
// begin ComExitBuilding ( i ) ;
9315: LD_VAR 0 9
9319: PPUSH
9320: CALL_OW 122
// continue ;
9324: GO 8949
// end ; if not tmp then
9326: LD_VAR 0 10
9330: NOT
9331: IFFALSE 9347
// begin SetTag ( i , 0 ) ;
9333: LD_VAR 0 9
9337: PPUSH
9338: LD_INT 0
9340: PPUSH
9341: CALL_OW 109
// continue ;
9345: GO 8949
// end ; if not HasTask ( i ) then
9347: LD_VAR 0 9
9351: PPUSH
9352: CALL_OW 314
9356: NOT
9357: IFFALSE 9377
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
9359: LD_VAR 0 9
9363: PPUSH
9364: LD_VAR 0 10
9368: PUSH
9369: LD_INT 1
9371: ARRAY
9372: PPUSH
9373: CALL_OW 130
// if not IsInArea ( i , area ) then
9377: LD_VAR 0 9
9381: PPUSH
9382: LD_VAR 0 3
9386: PPUSH
9387: CALL_OW 308
9391: NOT
9392: IFFALSE 9408
// ComMoveToArea ( i , area ) ;
9394: LD_VAR 0 9
9398: PPUSH
9399: LD_VAR 0 3
9403: PPUSH
9404: CALL_OW 113
// end ; if tag = tBuild then
9408: LD_VAR 0 15
9412: PUSH
9413: LD_INT 5
9415: EQUAL
9416: IFFALSE 9622
// begin if IsInUnit ( i ) then
9418: LD_VAR 0 9
9422: PPUSH
9423: CALL_OW 310
9427: IFFALSE 9440
// begin ComExitBuilding ( i ) ;
9429: LD_VAR 0 9
9433: PPUSH
9434: CALL_OW 122
// continue ;
9438: GO 8949
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
9440: LD_VAR 0 33
9444: NOT
9445: PUSH
9446: LD_VAR 0 22
9450: OR
9451: PUSH
9452: LD_VAR 0 23
9456: OR
9457: IFFALSE 9475
// begin SetTag ( i , 0 ) ;
9459: LD_VAR 0 9
9463: PPUSH
9464: LD_INT 0
9466: PPUSH
9467: CALL_OW 109
// continue ;
9471: GO 8949
// end else
9473: GO 9514
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
9475: LD_VAR 0 32
9479: PPUSH
9480: LD_VAR 0 33
9484: PUSH
9485: LD_INT 1
9487: ARRAY
9488: PUSH
9489: LD_INT 1
9491: ARRAY
9492: PPUSH
9493: CALL 59075 0 2
9497: NOT
9498: IFFALSE 9514
// begin SetTag ( i , 0 ) ;
9500: LD_VAR 0 9
9504: PPUSH
9505: LD_INT 0
9507: PPUSH
9508: CALL_OW 109
// continue ;
9512: GO 8949
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9514: LD_ADDR_VAR 0 11
9518: PUSH
9519: LD_VAR 0 3
9523: PPUSH
9524: LD_INT 57
9526: PUSH
9527: EMPTY
9528: LIST
9529: PPUSH
9530: CALL_OW 70
9534: ST_TO_ADDR
// if undone then
9535: LD_VAR 0 11
9539: IFFALSE 9561
// begin ComComplete ( i , undone [ 1 ] ) ;
9541: LD_VAR 0 9
9545: PPUSH
9546: LD_VAR 0 11
9550: PUSH
9551: LD_INT 1
9553: ARRAY
9554: PPUSH
9555: CALL 24917 0 2
// continue ;
9559: GO 8949
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
9561: LD_VAR 0 9
9565: PPUSH
9566: LD_VAR 0 33
9570: PUSH
9571: LD_INT 1
9573: ARRAY
9574: PUSH
9575: LD_INT 1
9577: ARRAY
9578: PPUSH
9579: LD_VAR 0 33
9583: PUSH
9584: LD_INT 1
9586: ARRAY
9587: PUSH
9588: LD_INT 2
9590: ARRAY
9591: PPUSH
9592: LD_VAR 0 33
9596: PUSH
9597: LD_INT 1
9599: ARRAY
9600: PUSH
9601: LD_INT 3
9603: ARRAY
9604: PPUSH
9605: LD_VAR 0 33
9609: PUSH
9610: LD_INT 1
9612: ARRAY
9613: PUSH
9614: LD_INT 4
9616: ARRAY
9617: PPUSH
9618: CALL_OW 145
// end ; if tag = tCrates then
9622: LD_VAR 0 15
9626: PUSH
9627: LD_INT 2
9629: EQUAL
9630: IFFALSE 9767
// begin if IsInUnit ( i ) then
9632: LD_VAR 0 9
9636: PPUSH
9637: CALL_OW 310
9641: IFFALSE 9654
// begin ComExitBuilding ( i ) ;
9643: LD_VAR 0 9
9647: PPUSH
9648: CALL_OW 122
// continue ;
9652: GO 8949
// end ; if not cr then
9654: LD_VAR 0 17
9658: NOT
9659: IFFALSE 9675
// begin SetTag ( i , 0 ) ;
9661: LD_VAR 0 9
9665: PPUSH
9666: LD_INT 0
9668: PPUSH
9669: CALL_OW 109
// continue ;
9673: GO 8949
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
9675: LD_VAR 0 9
9679: PPUSH
9680: CALL_OW 314
9684: NOT
9685: PUSH
9686: LD_INT 81
9688: PUSH
9689: LD_VAR 0 1
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 92
9700: PUSH
9701: LD_VAR 0 17
9705: PUSH
9706: LD_INT 1
9708: ARRAY
9709: PUSH
9710: LD_VAR 0 17
9714: PUSH
9715: LD_INT 2
9717: ARRAY
9718: PUSH
9719: LD_INT 12
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: PPUSH
9732: CALL_OW 69
9736: NOT
9737: AND
9738: IFFALSE 9767
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
9740: LD_VAR 0 9
9744: PPUSH
9745: LD_VAR 0 17
9749: PUSH
9750: LD_INT 1
9752: ARRAY
9753: PPUSH
9754: LD_VAR 0 17
9758: PUSH
9759: LD_INT 2
9761: ARRAY
9762: PPUSH
9763: CALL_OW 117
// end ; end ;
9767: GO 8949
9769: POP
9770: POP
// end ; cranes := UnitFilter ( vehicles , [ [ f_weapon , ar_crane ] , [ f_ok ] ] ) ;
9771: LD_ADDR_VAR 0 25
9775: PUSH
9776: LD_VAR 0 26
9780: PPUSH
9781: LD_INT 34
9783: PUSH
9784: LD_INT 88
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: LD_INT 50
9793: PUSH
9794: EMPTY
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 72
9805: ST_TO_ADDR
// if cranes then
9806: LD_VAR 0 25
9810: IFFALSE 9875
// begin if tmp then
9812: LD_VAR 0 10
9816: IFFALSE 9861
// begin for i in cranes do
9818: LD_ADDR_VAR 0 9
9822: PUSH
9823: LD_VAR 0 25
9827: PUSH
9828: FOR_IN
9829: IFFALSE 9857
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
9831: LD_VAR 0 9
9835: PPUSH
9836: LD_VAR 0 10
9840: PPUSH
9841: LD_VAR 0 9
9845: PPUSH
9846: CALL_OW 74
9850: PPUSH
9851: CALL_OW 130
9855: GO 9828
9857: POP
9858: POP
// end else
9859: GO 9875
// ComBackOnParking ( cranes , parkingPoint ) ;
9861: LD_VAR 0 25
9865: PPUSH
9866: LD_VAR 0 7
9870: PPUSH
9871: CALL 59221 0 2
// end ; vehicles2 := CheckByIndex ( arVehiclesAtttackers , 1 , base , 2 ) ;
9875: LD_ADDR_VAR 0 27
9879: PUSH
9880: LD_EXP 46
9884: PPUSH
9885: LD_INT 1
9887: PPUSH
9888: LD_VAR 0 2
9892: PPUSH
9893: LD_INT 2
9895: PPUSH
9896: CALL 58938 0 4
9900: ST_TO_ADDR
// if vehicles2 then
9901: LD_VAR 0 27
9905: IFFALSE 9972
// for i in UnitFilter ( vehicles2 , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
9907: LD_ADDR_VAR 0 9
9911: PUSH
9912: LD_VAR 0 27
9916: PPUSH
9917: LD_INT 33
9919: PUSH
9920: LD_INT 2
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 50
9929: PUSH
9930: EMPTY
9931: LIST
9932: PUSH
9933: LD_INT 3
9935: PUSH
9936: LD_INT 61
9938: PUSH
9939: EMPTY
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: LIST
9950: PPUSH
9951: CALL_OW 72
9955: PUSH
9956: FOR_IN
9957: IFFALSE 9970
// Connect ( i ) ;
9959: LD_VAR 0 9
9963: PPUSH
9964: CALL 25025 0 1
9968: GO 9956
9970: POP
9971: POP
// if vehicles then
9972: LD_VAR 0 26
9976: IFFALSE 10882
// begin for i in UnitFilter ( vehicles , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
9978: LD_ADDR_VAR 0 9
9982: PUSH
9983: LD_VAR 0 26
9987: PPUSH
9988: LD_INT 33
9990: PUSH
9991: LD_INT 2
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 50
10000: PUSH
10001: EMPTY
10002: LIST
10003: PUSH
10004: LD_INT 3
10006: PUSH
10007: LD_INT 61
10009: PUSH
10010: EMPTY
10011: LIST
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: PPUSH
10022: CALL_OW 72
10026: PUSH
10027: FOR_IN
10028: IFFALSE 10041
// Connect ( i ) ;
10030: LD_VAR 0 9
10034: PPUSH
10035: CALL 25025 0 1
10039: GO 10027
10041: POP
10042: POP
// vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
10043: LD_ADDR_VAR 0 26
10047: PUSH
10048: LD_VAR 0 26
10052: PPUSH
10053: LD_INT 3
10055: PUSH
10056: LD_INT 2
10058: PUSH
10059: LD_INT 34
10061: PUSH
10062: LD_INT 88
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 34
10071: PUSH
10072: LD_INT 32
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: LIST
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 50
10090: PUSH
10091: EMPTY
10092: LIST
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PPUSH
10098: CALL_OW 72
10102: ST_TO_ADDR
// if vehicles then
10103: LD_VAR 0 26
10107: IFFALSE 10882
// begin for i in vehicles do
10109: LD_ADDR_VAR 0 9
10113: PUSH
10114: LD_VAR 0 26
10118: PUSH
10119: FOR_IN
10120: IFFALSE 10880
// begin tag := GetTag ( i ) ;
10122: LD_ADDR_VAR 0 15
10126: PUSH
10127: LD_VAR 0 9
10131: PPUSH
10132: CALL_OW 110
10136: ST_TO_ADDR
// if not tag then
10137: LD_VAR 0 15
10141: NOT
10142: IFFALSE 10313
// begin if GetControl ( i ) = control_manual then
10144: LD_VAR 0 9
10148: PPUSH
10149: CALL_OW 263
10153: PUSH
10154: LD_INT 1
10156: EQUAL
10157: IFFALSE 10299
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10159: LD_ADDR_VAR 0 24
10163: PUSH
10164: LD_EXP 47
10168: PPUSH
10169: LD_INT 1
10171: PPUSH
10172: LD_VAR 0 9
10176: PPUSH
10177: LD_INT 2
10179: PPUSH
10180: CALL 58938 0 4
10184: ST_TO_ADDR
// if not drivers then
10185: LD_VAR 0 24
10189: NOT
10190: IFFALSE 10279
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
10192: LD_ADDR_VAR 0 24
10196: PUSH
10197: LD_VAR 0 14
10201: PPUSH
10202: LD_INT 3
10204: PUSH
10205: LD_INT 120
10207: PUSH
10208: LD_INT 7
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PPUSH
10219: CALL_OW 72
10223: ST_TO_ADDR
// if drivers then
10224: LD_VAR 0 24
10228: IFFALSE 10279
// begin SetTag ( drivers [ 1 ] , tMech ) ;
10230: LD_VAR 0 24
10234: PUSH
10235: LD_INT 1
10237: ARRAY
10238: PPUSH
10239: LD_INT 7
10241: PPUSH
10242: CALL_OW 109
// arDrivers := Join ( arDrivers , [ i , drivers [ 1 ] ] ) ;
10246: LD_ADDR_EXP 47
10250: PUSH
10251: LD_EXP 47
10255: PPUSH
10256: LD_VAR 0 9
10260: PUSH
10261: LD_VAR 0 24
10265: PUSH
10266: LD_INT 1
10268: ARRAY
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PPUSH
10274: CALL 54408 0 2
10278: ST_TO_ADDR
// end ; end ; if drivers then
10279: LD_VAR 0 24
10283: IFFALSE 10297
// SetTag ( i , tBusy ) ;
10285: LD_VAR 0 9
10289: PPUSH
10290: LD_INT 8
10292: PPUSH
10293: CALL_OW 109
// continue ;
10297: GO 10119
// end ; SetTag ( i , tBusy ) ;
10299: LD_VAR 0 9
10303: PPUSH
10304: LD_INT 8
10306: PPUSH
10307: CALL_OW 109
// end else
10311: GO 10878
// if tag = tBusy then
10313: LD_VAR 0 15
10317: PUSH
10318: LD_INT 8
10320: EQUAL
10321: IFFALSE 10549
// begin if GetLives ( i ) = 1000 then
10323: LD_VAR 0 9
10327: PPUSH
10328: CALL_OW 256
10332: PUSH
10333: LD_INT 1000
10335: EQUAL
10336: IFFALSE 10547
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
10338: LD_VAR 0 9
10342: PPUSH
10343: CALL_OW 263
10347: PUSH
10348: LD_INT 1
10350: EQUAL
10351: PUSH
10352: LD_VAR 0 9
10356: PPUSH
10357: CALL_OW 311
10361: NOT
10362: AND
10363: IFFALSE 10535
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10365: LD_ADDR_VAR 0 24
10369: PUSH
10370: LD_EXP 47
10374: PPUSH
10375: LD_INT 1
10377: PPUSH
10378: LD_VAR 0 9
10382: PPUSH
10383: LD_INT 2
10385: PPUSH
10386: CALL 58938 0 4
10390: ST_TO_ADDR
// if not drivers then
10391: LD_VAR 0 24
10395: NOT
10396: IFFALSE 10412
// begin SetTag ( i , 0 ) ;
10398: LD_VAR 0 9
10402: PPUSH
10403: LD_INT 0
10405: PPUSH
10406: CALL_OW 109
// continue ;
10410: GO 10119
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
10412: LD_VAR 0 24
10416: PUSH
10417: LD_INT 1
10419: ARRAY
10420: PPUSH
10421: CALL_OW 310
10425: PUSH
10426: LD_VAR 0 24
10430: PUSH
10431: LD_INT 1
10433: ARRAY
10434: PPUSH
10435: CALL 52012 0 1
10439: NOT
10440: AND
10441: IFFALSE 10456
// ComExitBuilding ( drivers [ 1 ] ) ;
10443: LD_VAR 0 24
10447: PUSH
10448: LD_INT 1
10450: ARRAY
10451: PPUSH
10452: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
10456: LD_VAR 0 26
10460: PPUSH
10461: LD_INT 120
10463: PUSH
10464: LD_INT 3
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PPUSH
10471: CALL_OW 72
10475: PUSH
10476: LD_VAR 0 24
10480: PUSH
10481: LD_INT 1
10483: ARRAY
10484: PPUSH
10485: CALL_OW 314
10489: NOT
10490: AND
10491: PUSH
10492: LD_VAR 0 26
10496: PPUSH
10497: LD_INT 120
10499: PUSH
10500: LD_INT 3
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PPUSH
10507: CALL_OW 72
10511: NOT
10512: OR
10513: IFFALSE 10533
// ComEnterUnit ( drivers [ 1 ] , i ) ;
10515: LD_VAR 0 24
10519: PUSH
10520: LD_INT 1
10522: ARRAY
10523: PPUSH
10524: LD_VAR 0 9
10528: PPUSH
10529: CALL_OW 120
// continue ;
10533: GO 10119
// end ; SetTag ( i , tAttack ) ;
10535: LD_VAR 0 9
10539: PPUSH
10540: LD_INT 13
10542: PPUSH
10543: CALL_OW 109
// end ; end else
10547: GO 10878
// if tag = tAttack then
10549: LD_VAR 0 15
10553: PUSH
10554: LD_INT 13
10556: EQUAL
10557: IFFALSE 10737
// begin enemy := enemyInBase ;
10559: LD_ADDR_VAR 0 21
10563: PUSH
10564: LD_VAR 0 22
10568: ST_TO_ADDR
// if not enemy then
10569: LD_VAR 0 21
10573: NOT
10574: IFFALSE 10586
// enemy := enemyOuterBase ;
10576: LD_ADDR_VAR 0 21
10580: PUSH
10581: LD_VAR 0 23
10585: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10586: LD_VAR 0 21
10590: NOT
10591: PUSH
10592: LD_VAR 0 9
10596: PPUSH
10597: LD_VAR 0 7
10601: PUSH
10602: LD_INT 1
10604: ARRAY
10605: PPUSH
10606: LD_VAR 0 7
10610: PUSH
10611: LD_INT 2
10613: ARRAY
10614: PPUSH
10615: CALL_OW 297
10619: PUSH
10620: LD_INT 10
10622: GREATER
10623: AND
10624: IFFALSE 10655
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10626: LD_VAR 0 9
10630: PPUSH
10631: LD_VAR 0 7
10635: PUSH
10636: LD_INT 1
10638: ARRAY
10639: PPUSH
10640: LD_VAR 0 7
10644: PUSH
10645: LD_INT 2
10647: ARRAY
10648: PPUSH
10649: CALL_OW 111
// continue ;
10653: GO 10119
// end ; if GetLives ( i ) < 650 then
10655: LD_VAR 0 9
10659: PPUSH
10660: CALL_OW 256
10664: PUSH
10665: LD_INT 650
10667: LESS
10668: IFFALSE 10711
// begin SetTag ( i , tVehRepair ) ;
10670: LD_VAR 0 9
10674: PPUSH
10675: LD_INT 9
10677: PPUSH
10678: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10682: LD_VAR 0 9
10686: PPUSH
10687: LD_VAR 0 7
10691: PUSH
10692: LD_INT 1
10694: ARRAY
10695: PPUSH
10696: LD_VAR 0 7
10700: PUSH
10701: LD_INT 2
10703: ARRAY
10704: PPUSH
10705: CALL_OW 111
// continue ;
10709: GO 10119
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10711: LD_VAR 0 9
10715: PPUSH
10716: LD_VAR 0 21
10720: PPUSH
10721: LD_VAR 0 9
10725: PPUSH
10726: CALL_OW 74
10730: PPUSH
10731: CALL_OW 115
// end else
10735: GO 10878
// if tag = tVehRepair then
10737: LD_VAR 0 15
10741: PUSH
10742: LD_INT 9
10744: EQUAL
10745: IFFALSE 10878
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10747: LD_VAR 0 9
10751: PPUSH
10752: LD_VAR 0 7
10756: PUSH
10757: LD_INT 1
10759: ARRAY
10760: PPUSH
10761: LD_VAR 0 7
10765: PUSH
10766: LD_INT 2
10768: ARRAY
10769: PPUSH
10770: CALL_OW 297
10774: PUSH
10775: LD_INT 10
10777: GREATER
10778: IFFALSE 10809
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10780: LD_VAR 0 9
10784: PPUSH
10785: LD_VAR 0 7
10789: PUSH
10790: LD_INT 1
10792: ARRAY
10793: PPUSH
10794: LD_VAR 0 7
10798: PUSH
10799: LD_INT 2
10801: ARRAY
10802: PPUSH
10803: CALL_OW 111
// continue ;
10807: GO 10119
// end ; if GetLives ( i ) = 1000 then
10809: LD_VAR 0 9
10813: PPUSH
10814: CALL_OW 256
10818: PUSH
10819: LD_INT 1000
10821: EQUAL
10822: IFFALSE 10838
// begin SetTag ( i , tBusy ) ;
10824: LD_VAR 0 9
10828: PPUSH
10829: LD_INT 8
10831: PPUSH
10832: CALL_OW 109
// continue ;
10836: GO 10119
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
10838: LD_VAR 0 9
10842: PPUSH
10843: CALL_OW 263
10847: PUSH
10848: LD_INT 1
10850: EQUAL
10851: PUSH
10852: LD_VAR 0 9
10856: PPUSH
10857: CALL_OW 311
10861: AND
10862: IFFALSE 10878
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10864: LD_VAR 0 9
10868: PPUSH
10869: CALL_OW 311
10873: PPUSH
10874: CALL 56108 0 1
// end ; end ;
10878: GO 10119
10880: POP
10881: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
10882: LD_ADDR_VAR 0 19
10886: PUSH
10887: LD_VAR 0 5
10891: PPUSH
10892: LD_INT 2
10894: PUSH
10895: LD_INT 25
10897: PUSH
10898: LD_INT 1
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 25
10907: PUSH
10908: LD_INT 8
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 25
10917: PUSH
10918: LD_INT 5
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 25
10927: PUSH
10928: LD_INT 9
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 50
10944: PUSH
10945: EMPTY
10946: LIST
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PPUSH
10952: CALL_OW 72
10956: ST_TO_ADDR
// if sol then
10957: LD_VAR 0 19
10961: IFFALSE 11509
// begin if enemyInBase then
10963: LD_VAR 0 22
10967: IFFALSE 11146
// begin for i in sol do
10969: LD_ADDR_VAR 0 9
10973: PUSH
10974: LD_VAR 0 19
10978: PUSH
10979: FOR_IN
10980: IFFALSE 11142
// begin tw := IsInUnit ( i ) ;
10982: LD_ADDR_VAR 0 16
10986: PUSH
10987: LD_VAR 0 9
10991: PPUSH
10992: CALL_OW 310
10996: ST_TO_ADDR
// if tw then
10997: LD_VAR 0 16
11001: IFFALSE 11084
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
11003: LD_VAR 0 16
11007: PUSH
11008: LD_INT 22
11010: PUSH
11011: LD_VAR 0 1
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: LD_INT 101
11022: PUSH
11023: LD_VAR 0 34
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 2
11034: PUSH
11035: LD_INT 30
11037: PUSH
11038: LD_INT 32
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 30
11047: PUSH
11048: LD_INT 31
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: PPUSH
11065: CALL_OW 69
11069: IN
11070: NOT
11071: IFFALSE 11082
// ComExitBuilding ( i ) ;
11073: LD_VAR 0 9
11077: PPUSH
11078: CALL_OW 122
// end else
11082: GO 11140
// if IsInArea ( i , area ) then
11084: LD_VAR 0 9
11088: PPUSH
11089: LD_VAR 0 3
11093: PPUSH
11094: CALL_OW 308
11098: IFFALSE 11126
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
11100: LD_VAR 0 9
11104: PPUSH
11105: LD_VAR 0 22
11109: PPUSH
11110: LD_VAR 0 9
11114: PPUSH
11115: CALL_OW 74
11119: PPUSH
11120: CALL_OW 115
11124: GO 11140
// ComMoveToArea ( i , area ) ;
11126: LD_VAR 0 9
11130: PPUSH
11131: LD_VAR 0 3
11135: PPUSH
11136: CALL_OW 113
// end ;
11140: GO 10979
11142: POP
11143: POP
// end else
11144: GO 11509
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
11146: LD_ADDR_VAR 0 28
11150: PUSH
11151: LD_VAR 0 3
11155: PPUSH
11156: LD_INT 3
11158: PUSH
11159: LD_INT 62
11161: PUSH
11162: EMPTY
11163: LIST
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 2
11171: PUSH
11172: LD_INT 30
11174: PUSH
11175: LD_INT 32
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: LD_INT 30
11184: PUSH
11185: LD_INT 4
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 30
11194: PUSH
11195: LD_INT 5
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 30
11204: PUSH
11205: LD_INT 31
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PPUSH
11223: CALL_OW 70
11227: ST_TO_ADDR
// if empty then
11228: LD_VAR 0 28
11232: IFFALSE 11249
// empty := ReverseArray ( empty ) ;
11234: LD_ADDR_VAR 0 28
11238: PUSH
11239: LD_VAR 0 28
11243: PPUSH
11244: CALL 49695 0 1
11248: ST_TO_ADDR
// for i in sol do
11249: LD_ADDR_VAR 0 9
11253: PUSH
11254: LD_VAR 0 19
11258: PUSH
11259: FOR_IN
11260: IFFALSE 11507
// begin tag := GetTag ( i ) ;
11262: LD_ADDR_VAR 0 15
11266: PUSH
11267: LD_VAR 0 9
11271: PPUSH
11272: CALL_OW 110
11276: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
11277: LD_VAR 0 9
11281: PPUSH
11282: CALL_OW 256
11286: PUSH
11287: LD_INT 1000
11289: LESS
11290: PUSH
11291: LD_VAR 0 15
11295: PUSH
11296: LD_INT 1
11298: NONEQUAL
11299: AND
11300: IFFALSE 11352
// begin SetTag ( i , tHeal ) ;
11302: LD_VAR 0 9
11306: PPUSH
11307: LD_INT 1
11309: PPUSH
11310: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
11314: LD_VAR 0 9
11318: PPUSH
11319: LD_VAR 0 6
11323: PUSH
11324: LD_INT 1
11326: ARRAY
11327: PPUSH
11328: LD_VAR 0 6
11332: PUSH
11333: LD_INT 2
11335: ARRAY
11336: PPUSH
11337: CALL_OW 111
// AddComHold ( i ) ;
11341: LD_VAR 0 9
11345: PPUSH
11346: CALL_OW 200
// continue ;
11350: GO 11259
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
11352: LD_VAR 0 9
11356: PPUSH
11357: CALL_OW 256
11361: PUSH
11362: LD_INT 1000
11364: EQUAL
11365: PUSH
11366: LD_VAR 0 15
11370: PUSH
11371: LD_INT 1
11373: EQUAL
11374: AND
11375: IFFALSE 11391
// begin SetTag ( i , 0 ) ;
11377: LD_VAR 0 9
11381: PPUSH
11382: LD_INT 0
11384: PPUSH
11385: CALL_OW 109
// continue ;
11389: GO 11259
// end ; if HasTask ( i ) then
11391: LD_VAR 0 9
11395: PPUSH
11396: CALL_OW 314
11400: IFFALSE 11404
// continue ;
11402: GO 11259
// if not IsInUnit ( i ) and not tag and empty then
11404: LD_VAR 0 9
11408: PPUSH
11409: CALL_OW 310
11413: NOT
11414: PUSH
11415: LD_VAR 0 15
11419: NOT
11420: AND
11421: PUSH
11422: LD_VAR 0 28
11426: AND
11427: IFFALSE 11505
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
11429: LD_VAR 0 9
11433: PPUSH
11434: LD_VAR 0 28
11438: PUSH
11439: LD_INT 1
11441: ARRAY
11442: PPUSH
11443: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
11447: LD_VAR 0 28
11451: PUSH
11452: LD_INT 1
11454: ARRAY
11455: PPUSH
11456: CALL_OW 266
11460: PUSH
11461: LD_INT 5
11463: EQUAL
11464: PUSH
11465: LD_INT 50
11467: PPUSH
11468: CALL_OW 13
11472: AND
11473: IFFALSE 11487
// AddComChangeProfession ( i , class_mortar ) ;
11475: LD_VAR 0 9
11479: PPUSH
11480: LD_INT 8
11482: PPUSH
11483: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
11487: LD_ADDR_VAR 0 28
11491: PUSH
11492: LD_VAR 0 28
11496: PPUSH
11497: LD_INT 1
11499: PPUSH
11500: CALL_OW 3
11504: ST_TO_ADDR
// end ; end ;
11505: GO 11259
11507: POP
11508: POP
// end ; end ; end ;
11509: LD_VAR 0 8
11513: RET
// every 0 0$2 trigger UnitFilter ( ar_force_south , [ f_ok ] ) do
11514: LD_EXP 33
11518: PPUSH
11519: LD_INT 50
11521: PUSH
11522: EMPTY
11523: LIST
11524: PPUSH
11525: CALL_OW 72
11529: IFFALSE 11578
11531: GO 11533
11533: DISABLE
// begin enable ;
11534: ENABLE
// ArabianBaseScript ( side_bot , 1 , area_base_south , area_base_south_outer , ar_force_south , [ 120 , 129 ] , [ 126 , 136 ] ) ;
11535: LD_EXP 3
11539: PPUSH
11540: LD_INT 1
11542: PPUSH
11543: LD_INT 33
11545: PPUSH
11546: LD_INT 40
11548: PPUSH
11549: LD_EXP 33
11553: PPUSH
11554: LD_INT 120
11556: PUSH
11557: LD_INT 129
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PPUSH
11564: LD_INT 126
11566: PUSH
11567: LD_INT 136
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PPUSH
11574: CALL 7555 0 7
// end ;
11578: END
// every 0 0$2 trigger UnitFilter ( ar_force_north , [ f_ok ] ) do
11579: LD_EXP 34
11583: PPUSH
11584: LD_INT 50
11586: PUSH
11587: EMPTY
11588: LIST
11589: PPUSH
11590: CALL_OW 72
11594: IFFALSE 11643
11596: GO 11598
11598: DISABLE
// begin enable ;
11599: ENABLE
// ArabianBaseScript ( side_bot , 2 , area_base_north , area_base_north_outer , ar_force_north , [ 116 , 9 ] , [ 123 , 12 ] ) ;
11600: LD_EXP 3
11604: PPUSH
11605: LD_INT 2
11607: PPUSH
11608: LD_INT 35
11610: PPUSH
11611: LD_INT 43
11613: PPUSH
11614: LD_EXP 34
11618: PPUSH
11619: LD_INT 116
11621: PUSH
11622: LD_INT 9
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PPUSH
11629: LD_INT 123
11631: PUSH
11632: LD_INT 12
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PPUSH
11639: CALL 7555 0 7
// end ;
11643: END
// every 0 0$2 trigger UnitFilter ( ar_force_west , [ f_ok ] ) do
11644: LD_EXP 32
11648: PPUSH
11649: LD_INT 50
11651: PUSH
11652: EMPTY
11653: LIST
11654: PPUSH
11655: CALL_OW 72
11659: IFFALSE 11708
11661: GO 11663
11663: DISABLE
// begin enable ;
11664: ENABLE
// ArabianBaseScript ( side_bot , 3 , area_base_west , area_base_west_outer , ar_force_west , [ 28 , 10 ] , [ 26 , 17 ] ) ;
11665: LD_EXP 3
11669: PPUSH
11670: LD_INT 3
11672: PPUSH
11673: LD_INT 34
11675: PPUSH
11676: LD_INT 42
11678: PPUSH
11679: LD_EXP 32
11683: PPUSH
11684: LD_INT 28
11686: PUSH
11687: LD_INT 10
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PPUSH
11694: LD_INT 26
11696: PUSH
11697: LD_INT 17
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PPUSH
11704: CALL 7555 0 7
// end ;
11708: END
// every 0 0$2 trigger UnitFilter ( ar_force_east , [ f_ok ] ) do
11709: LD_EXP 36
11713: PPUSH
11714: LD_INT 50
11716: PUSH
11717: EMPTY
11718: LIST
11719: PPUSH
11720: CALL_OW 72
11724: IFFALSE 11773
11726: GO 11728
11728: DISABLE
// begin enable ;
11729: ENABLE
// ArabianBaseScript ( side_bot , 4 , area_base_east , area_base_east_outer , ar_force_east , [ 173 , 72 ] , [ 167 , 83 ] ) ;
11730: LD_EXP 3
11734: PPUSH
11735: LD_INT 4
11737: PPUSH
11738: LD_INT 36
11740: PPUSH
11741: LD_INT 44
11743: PPUSH
11744: LD_EXP 36
11748: PPUSH
11749: LD_INT 173
11751: PUSH
11752: LD_INT 72
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PPUSH
11759: LD_INT 167
11761: PUSH
11762: LD_INT 83
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PPUSH
11769: CALL 7555 0 7
// end ;
11773: END
// every 0 0$2 trigger UnitFilter ( ar_force_north2 , [ f_ok ] ) do
11774: LD_EXP 35
11778: PPUSH
11779: LD_INT 50
11781: PUSH
11782: EMPTY
11783: LIST
11784: PPUSH
11785: CALL_OW 72
11789: IFFALSE 11838
11791: GO 11793
11793: DISABLE
// begin enable ;
11794: ENABLE
// ArabianBaseScript ( side_bot , 5 , area_base_north2 , area_base_north2_outer , ar_force_north2 , [ 147 , 50 ] , [ 159 , 40 ] ) ;
11795: LD_EXP 3
11799: PPUSH
11800: LD_INT 5
11802: PPUSH
11803: LD_INT 38
11805: PPUSH
11806: LD_INT 45
11808: PPUSH
11809: LD_EXP 35
11813: PPUSH
11814: LD_INT 147
11816: PUSH
11817: LD_INT 50
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PPUSH
11824: LD_INT 159
11826: PUSH
11827: LD_INT 40
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PPUSH
11834: CALL 7555 0 7
// end ;
11838: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
11839: LD_EXP 51
11843: IFFALSE 12055
11845: GO 11847
11847: DISABLE
11848: LD_INT 0
11850: PPUSH
11851: PPUSH
11852: PPUSH
// begin enable ;
11853: ENABLE
// p := 1 ;
11854: LD_ADDR_VAR 0 2
11858: PUSH
11859: LD_INT 1
11861: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
11862: LD_ADDR_VAR 0 1
11866: PUSH
11867: DOUBLE
11868: LD_INT 1
11870: DEC
11871: ST_TO_ADDR
11872: LD_EXP 51
11876: PPUSH
11877: CALL 18819 0 1
11881: PUSH
11882: LD_INT 2
11884: DIV
11885: PUSH
11886: FOR_TO
11887: IFFALSE 12053
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
11889: LD_ADDR_VAR 0 3
11893: PUSH
11894: LD_EXP 51
11898: PUSH
11899: LD_VAR 0 2
11903: ARRAY
11904: PPUSH
11905: LD_EXP 51
11909: PUSH
11910: LD_VAR 0 2
11914: PUSH
11915: LD_INT 1
11917: PLUS
11918: ARRAY
11919: PPUSH
11920: CALL_OW 428
11924: ST_TO_ADDR
// if tmp then
11925: LD_VAR 0 3
11929: IFFALSE 12037
// if GetSide ( tmp ) <> side_bot then
11931: LD_VAR 0 3
11935: PPUSH
11936: CALL_OW 255
11940: PUSH
11941: LD_EXP 3
11945: NONEQUAL
11946: IFFALSE 12037
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , side_bot ) ;
11948: LD_EXP 51
11952: PUSH
11953: LD_VAR 0 2
11957: ARRAY
11958: PPUSH
11959: LD_EXP 51
11963: PUSH
11964: LD_VAR 0 2
11968: PUSH
11969: LD_INT 1
11971: PLUS
11972: ARRAY
11973: PPUSH
11974: LD_EXP 3
11978: PPUSH
11979: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
11983: LD_ADDR_EXP 51
11987: PUSH
11988: LD_EXP 51
11992: PPUSH
11993: LD_VAR 0 2
11997: PPUSH
11998: CALL_OW 3
12002: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
12003: LD_ADDR_EXP 51
12007: PUSH
12008: LD_EXP 51
12012: PPUSH
12013: LD_VAR 0 2
12017: PPUSH
12018: CALL_OW 3
12022: ST_TO_ADDR
// p := p - 2 ;
12023: LD_ADDR_VAR 0 2
12027: PUSH
12028: LD_VAR 0 2
12032: PUSH
12033: LD_INT 2
12035: MINUS
12036: ST_TO_ADDR
// end ; p := p + 2 ;
12037: LD_ADDR_VAR 0 2
12041: PUSH
12042: LD_VAR 0 2
12046: PUSH
12047: LD_INT 2
12049: PLUS
12050: ST_TO_ADDR
// end ;
12051: GO 11886
12053: POP
12054: POP
// end ; end_of_file
12055: PPOPN 3
12057: END
// on ArtifactLoaded ( cargo , artifact ) do var i , j ;
12058: LD_INT 0
12060: PPUSH
12061: PPUSH
// begin if artifact_get then
12062: LD_EXP 4
12066: IFFALSE 12070
// exit ;
12068: GO 12092
// MultiplayerEvent_ArtifactCaptured ( GetSide ( cargo ) ) ;
12070: LD_VAR 0 1
12074: PPUSH
12075: CALL_OW 255
12079: PPUSH
12080: CALL 5186 0 1
// artifact_get := true ;
12084: LD_ADDR_EXP 4
12088: PUSH
12089: LD_INT 1
12091: ST_TO_ADDR
// end ;
12092: PPOPN 4
12094: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetSide ( un ) <> side_bot then
12095: LD_VAR 0 1
12099: PPUSH
12100: CALL_OW 255
12104: PUSH
12105: LD_EXP 3
12109: NONEQUAL
12110: IFFALSE 12114
// exit ;
12112: GO 12183
// if not un in [ Saliba , Gensher , Shariff ] then
12114: LD_VAR 0 1
12118: PUSH
12119: LD_EXP 39
12123: PUSH
12124: LD_EXP 40
12128: PUSH
12129: LD_EXP 41
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: LIST
12138: IN
12139: NOT
12140: IFFALSE 12161
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
12142: LD_VAR 0 1
12146: PPUSH
12147: LD_VAR 0 2
12151: PPUSH
12152: LD_INT 0
12154: PPUSH
12155: CALL 5122 0 3
12159: GO 12183
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
12161: LD_VAR 0 1
12165: PPUSH
12166: LD_VAR 0 2
12170: PPUSH
12171: LD_INT 5
12173: PPUSH
12174: CALL 4449 0 1
12178: PPUSH
12179: CALL 5122 0 3
// end ;
12183: PPOPN 3
12185: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
12186: LD_INT 0
12188: PPUSH
12189: PPUSH
12190: PPUSH
12191: PPUSH
12192: PPUSH
12193: PPUSH
12194: PPUSH
12195: PPUSH
12196: PPUSH
12197: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
12198: LD_VAR 0 1
12202: PPUSH
12203: CALL 59488 0 1
// side := GetSide ( un ) ;
12207: LD_ADDR_VAR 0 3
12211: PUSH
12212: LD_VAR 0 1
12216: PPUSH
12217: CALL_OW 255
12221: ST_TO_ADDR
// if multi_sides [ side ] then
12222: LD_EXP 7
12226: PUSH
12227: LD_VAR 0 3
12231: ARRAY
12232: IFFALSE 12258
// if GetType ( un ) = unit_human then
12234: LD_VAR 0 1
12238: PPUSH
12239: CALL_OW 247
12243: PUSH
12244: LD_INT 1
12246: EQUAL
12247: IFFALSE 12258
// MultiplayerEvent_HumanLost ( side ) ;
12249: LD_VAR 0 3
12253: PPUSH
12254: CALL 5008 0 1
// if side = side_bot then
12258: LD_VAR 0 3
12262: PUSH
12263: LD_EXP 3
12267: EQUAL
12268: IFFALSE 12714
// begin if GetType ( un ) = unit_building then
12270: LD_VAR 0 1
12274: PPUSH
12275: CALL_OW 247
12279: PUSH
12280: LD_INT 3
12282: EQUAL
12283: IFFALSE 12513
// begin base := 0 ;
12285: LD_ADDR_VAR 0 4
12289: PUSH
12290: LD_INT 0
12292: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
12293: LD_ADDR_VAR 0 2
12297: PUSH
12298: DOUBLE
12299: LD_INT 1
12301: DEC
12302: ST_TO_ADDR
12303: LD_EXP 49
12307: PPUSH
12308: CALL 18819 0 1
12312: PUSH
12313: FOR_TO
12314: IFFALSE 12352
// if IsInArea ( un , arAreas [ i ] ) then
12316: LD_VAR 0 1
12320: PPUSH
12321: LD_EXP 49
12325: PUSH
12326: LD_VAR 0 2
12330: ARRAY
12331: PPUSH
12332: CALL_OW 308
12336: IFFALSE 12350
// begin base := i ;
12338: LD_ADDR_VAR 0 4
12342: PUSH
12343: LD_VAR 0 2
12347: ST_TO_ADDR
// break ;
12348: GO 12352
// end ;
12350: GO 12313
12352: POP
12353: POP
// if not base then
12354: LD_VAR 0 4
12358: NOT
12359: IFFALSE 12363
// exit ;
12361: GO 12786
// btype := GetBType ( un ) ;
12363: LD_ADDR_VAR 0 11
12367: PUSH
12368: LD_VAR 0 1
12372: PPUSH
12373: CALL_OW 266
12377: ST_TO_ADDR
// if btype = b_barracks then
12378: LD_VAR 0 11
12382: PUSH
12383: LD_INT 5
12385: EQUAL
12386: IFFALSE 12396
// btype := b_armoury ;
12388: LD_ADDR_VAR 0 11
12392: PUSH
12393: LD_INT 4
12395: ST_TO_ADDR
// if btype = b_factory then
12396: LD_VAR 0 11
12400: PUSH
12401: LD_INT 3
12403: EQUAL
12404: IFFALSE 12414
// btype := b_workshop ;
12406: LD_ADDR_VAR 0 11
12410: PUSH
12411: LD_INT 2
12413: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
12414: LD_VAR 0 11
12418: PUSH
12419: LD_INT 8
12421: PUSH
12422: LD_INT 7
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: IN
12429: IFFALSE 12439
// btype := b_lab ;
12431: LD_ADDR_VAR 0 11
12435: PUSH
12436: LD_INT 6
12438: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ base , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ] ) ;
12439: LD_ADDR_EXP 44
12443: PUSH
12444: LD_EXP 44
12448: PPUSH
12449: LD_EXP 44
12453: PUSH
12454: LD_INT 1
12456: PLUS
12457: PPUSH
12458: LD_VAR 0 4
12462: PUSH
12463: LD_VAR 0 11
12467: PUSH
12468: LD_VAR 0 1
12472: PPUSH
12473: CALL_OW 250
12477: PUSH
12478: LD_VAR 0 1
12482: PPUSH
12483: CALL_OW 251
12487: PUSH
12488: LD_VAR 0 1
12492: PPUSH
12493: CALL_OW 254
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PPUSH
12508: CALL_OW 1
12512: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12513: LD_VAR 0 1
12517: PPUSH
12518: CALL_OW 247
12522: PUSH
12523: LD_INT 2
12525: EQUAL
12526: IFFALSE 12714
// begin base := CheckByIndex ( arVehicles , 2 , un , 1 ) ;
12528: LD_ADDR_VAR 0 4
12532: PUSH
12533: LD_EXP 45
12537: PPUSH
12538: LD_INT 2
12540: PPUSH
12541: LD_VAR 0 1
12545: PPUSH
12546: LD_INT 1
12548: PPUSH
12549: CALL 58938 0 4
12553: ST_TO_ADDR
// if not base then
12554: LD_VAR 0 4
12558: NOT
12559: IFFALSE 12563
// exit ;
12561: GO 12786
// factory := arFactories [ base ] ;
12563: LD_ADDR_VAR 0 10
12567: PUSH
12568: LD_EXP 48
12572: PUSH
12573: LD_VAR 0 4
12577: ARRAY
12578: ST_TO_ADDR
// if not factory then
12579: LD_VAR 0 10
12583: NOT
12584: IFFALSE 12588
// exit ;
12586: GO 12786
// chassis := GetChassis ( un ) ;
12588: LD_ADDR_VAR 0 5
12592: PUSH
12593: LD_VAR 0 1
12597: PPUSH
12598: CALL_OW 265
12602: ST_TO_ADDR
// engine := GetEngine ( un ) ;
12603: LD_ADDR_VAR 0 6
12607: PUSH
12608: LD_VAR 0 1
12612: PPUSH
12613: CALL_OW 262
12617: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
12618: LD_ADDR_VAR 0 8
12622: PUSH
12623: LD_VAR 0 1
12627: PPUSH
12628: CALL_OW 264
12632: ST_TO_ADDR
// control := control_remote ;
12633: LD_ADDR_VAR 0 7
12637: PUSH
12638: LD_INT 2
12640: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
12641: LD_ADDR_VAR 0 9
12645: PUSH
12646: LD_VAR 0 10
12650: PPUSH
12651: LD_VAR 0 5
12655: PPUSH
12656: LD_VAR 0 6
12660: PPUSH
12661: LD_VAR 0 7
12665: PPUSH
12666: LD_VAR 0 8
12670: PPUSH
12671: CALL 19177 0 5
12675: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ base , tmp ] ) ;
12676: LD_ADDR_EXP 43
12680: PUSH
12681: LD_EXP 43
12685: PPUSH
12686: LD_EXP 43
12690: PUSH
12691: LD_INT 1
12693: PLUS
12694: PPUSH
12695: LD_VAR 0 4
12699: PUSH
12700: LD_VAR 0 9
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PPUSH
12709: CALL_OW 1
12713: ST_TO_ADDR
// end ; end ; if multi_commanders and multi_custom_commanders then
12714: LD_EXP 24
12718: PUSH
12719: LD_EXP 16
12723: AND
12724: IFFALSE 12786
// if un in multi_commanders then
12726: LD_VAR 0 1
12730: PUSH
12731: LD_EXP 24
12735: IN
12736: IFFALSE 12786
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
12738: LD_ADDR_EXP 25
12742: PUSH
12743: LD_EXP 25
12747: PPUSH
12748: LD_VAR 0 3
12752: PPUSH
12753: LD_INT 1
12755: PPUSH
12756: CALL_OW 1
12760: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
12761: LD_ADDR_EXP 24
12765: PUSH
12766: LD_EXP 24
12770: PUSH
12771: LD_VAR 0 1
12775: DIFF
12776: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
12777: LD_VAR 0 3
12781: PPUSH
12782: CALL 4482 0 1
// end ; end ;
12786: PPOPN 11
12788: END
// on BuildingComplete ( building ) do var i , j , side , base , btype ;
12789: LD_INT 0
12791: PPUSH
12792: PPUSH
12793: PPUSH
12794: PPUSH
12795: PPUSH
// begin side := GetSide ( building ) ;
12796: LD_ADDR_VAR 0 4
12800: PUSH
12801: LD_VAR 0 1
12805: PPUSH
12806: CALL_OW 255
12810: ST_TO_ADDR
// if multi_sides [ side ] then
12811: LD_EXP 7
12815: PUSH
12816: LD_VAR 0 4
12820: ARRAY
12821: IFFALSE 12842
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
12823: LD_VAR 0 4
12827: PPUSH
12828: LD_VAR 0 1
12832: PPUSH
12833: CALL_OW 266
12837: PPUSH
12838: CALL 5052 0 2
// if GetBType ( building ) = b_depot and not multi_sides [ side ] and base_names then
12842: LD_VAR 0 1
12846: PPUSH
12847: CALL_OW 266
12851: PUSH
12852: LD_INT 0
12854: EQUAL
12855: PUSH
12856: LD_EXP 7
12860: PUSH
12861: LD_VAR 0 4
12865: ARRAY
12866: NOT
12867: AND
12868: PUSH
12869: LD_EXP 5
12873: AND
12874: IFFALSE 12912
// begin SetBName ( building , base_names [ 1 ] ) ;
12876: LD_VAR 0 1
12880: PPUSH
12881: LD_EXP 5
12885: PUSH
12886: LD_INT 1
12888: ARRAY
12889: PPUSH
12890: CALL_OW 500
// base_names := Delete ( base_names , 1 ) ;
12894: LD_ADDR_EXP 5
12898: PUSH
12899: LD_EXP 5
12903: PPUSH
12904: LD_INT 1
12906: PPUSH
12907: CALL_OW 3
12911: ST_TO_ADDR
// end ; if side = side_bot then
12912: LD_VAR 0 4
12916: PUSH
12917: LD_EXP 3
12921: EQUAL
12922: IFFALSE 13173
// begin base := 0 ;
12924: LD_ADDR_VAR 0 5
12928: PUSH
12929: LD_INT 0
12931: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
12932: LD_ADDR_VAR 0 2
12936: PUSH
12937: DOUBLE
12938: LD_INT 1
12940: DEC
12941: ST_TO_ADDR
12942: LD_EXP 49
12946: PPUSH
12947: CALL 18819 0 1
12951: PUSH
12952: FOR_TO
12953: IFFALSE 12991
// if IsInArea ( building , arAreas [ i ] ) then
12955: LD_VAR 0 1
12959: PPUSH
12960: LD_EXP 49
12964: PUSH
12965: LD_VAR 0 2
12969: ARRAY
12970: PPUSH
12971: CALL_OW 308
12975: IFFALSE 12989
// begin base := i ;
12977: LD_ADDR_VAR 0 5
12981: PUSH
12982: LD_VAR 0 2
12986: ST_TO_ADDR
// break ;
12987: GO 12991
// end ;
12989: GO 12952
12991: POP
12992: POP
// if not base then
12993: LD_VAR 0 5
12997: NOT
12998: IFFALSE 13002
// exit ;
13000: GO 13173
// for i := 1 to Count ( arBuildings ) do
13002: LD_ADDR_VAR 0 2
13006: PUSH
13007: DOUBLE
13008: LD_INT 1
13010: DEC
13011: ST_TO_ADDR
13012: LD_EXP 44
13016: PPUSH
13017: CALL 18819 0 1
13021: PUSH
13022: FOR_TO
13023: IFFALSE 13075
// if arBuildings [ i ] [ 1 ] [ 1 ] = base then
13025: LD_EXP 44
13029: PUSH
13030: LD_VAR 0 2
13034: ARRAY
13035: PUSH
13036: LD_INT 1
13038: ARRAY
13039: PUSH
13040: LD_INT 1
13042: ARRAY
13043: PUSH
13044: LD_VAR 0 5
13048: EQUAL
13049: IFFALSE 13073
// begin arBuildings := Delete ( arBuildings , i ) ;
13051: LD_ADDR_EXP 44
13055: PUSH
13056: LD_EXP 44
13060: PPUSH
13061: LD_VAR 0 2
13065: PPUSH
13066: CALL_OW 3
13070: ST_TO_ADDR
// break ;
13071: GO 13075
// end ;
13073: GO 13022
13075: POP
13076: POP
// btype := GetBType ( building ) ;
13077: LD_ADDR_VAR 0 6
13081: PUSH
13082: LD_VAR 0 1
13086: PPUSH
13087: CALL_OW 266
13091: ST_TO_ADDR
// case btype of b_armoury :
13092: LD_VAR 0 6
13096: PUSH
13097: LD_INT 4
13099: DOUBLE
13100: EQUAL
13101: IFTRUE 13105
13103: GO 13117
13105: POP
// ComUpgrade ( building ) ; b_workshop :
13106: LD_VAR 0 1
13110: PPUSH
13111: CALL_OW 146
13115: GO 13173
13117: LD_INT 2
13119: DOUBLE
13120: EQUAL
13121: IFTRUE 13125
13123: GO 13137
13125: POP
// ComUpgrade ( building ) ; b_lab :
13126: LD_VAR 0 1
13130: PPUSH
13131: CALL_OW 146
13135: GO 13173
13137: LD_INT 6
13139: DOUBLE
13140: EQUAL
13141: IFTRUE 13145
13143: GO 13172
13145: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
13146: LD_VAR 0 1
13150: PPUSH
13151: LD_INT 10
13153: PPUSH
13154: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
13158: LD_VAR 0 1
13162: PPUSH
13163: LD_INT 15
13165: PPUSH
13166: CALL_OW 207
// end ; end ;
13170: GO 13173
13172: POP
// end ; end ;
13173: PPOPN 6
13175: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount ;
13176: LD_INT 0
13178: PPUSH
13179: PPUSH
13180: PPUSH
13181: PPUSH
13182: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
13183: LD_VAR 0 1
13187: PPUSH
13188: LD_VAR 0 2
13192: PPUSH
13193: CALL 59608 0 2
// side := GetSide ( vehicle ) ;
13197: LD_ADDR_VAR 0 4
13201: PUSH
13202: LD_VAR 0 1
13206: PPUSH
13207: CALL_OW 255
13211: ST_TO_ADDR
// if multi_sides [ side ] then
13212: LD_EXP 7
13216: PUSH
13217: LD_VAR 0 4
13221: ARRAY
13222: IFFALSE 13233
// MultiplayerEvent_Produced ( side ) ;
13224: LD_VAR 0 4
13228: PPUSH
13229: CALL 4964 0 1
// if side_bot = side then
13233: LD_EXP 3
13237: PUSH
13238: LD_VAR 0 4
13242: EQUAL
13243: IFFALSE 13435
// begin base := 0 ;
13245: LD_ADDR_VAR 0 6
13249: PUSH
13250: LD_INT 0
13252: ST_TO_ADDR
// for i := 1 to Count ( arFactories ) do
13253: LD_ADDR_VAR 0 3
13257: PUSH
13258: DOUBLE
13259: LD_INT 1
13261: DEC
13262: ST_TO_ADDR
13263: LD_EXP 48
13267: PPUSH
13268: CALL 18819 0 1
13272: PUSH
13273: FOR_TO
13274: IFFALSE 13308
// if arFactories [ i ] = factory then
13276: LD_EXP 48
13280: PUSH
13281: LD_VAR 0 3
13285: ARRAY
13286: PUSH
13287: LD_VAR 0 2
13291: EQUAL
13292: IFFALSE 13306
// begin base := i ;
13294: LD_ADDR_VAR 0 6
13298: PUSH
13299: LD_VAR 0 3
13303: ST_TO_ADDR
// break ;
13304: GO 13308
// end ;
13306: GO 13273
13308: POP
13309: POP
// if not base then
13310: LD_VAR 0 6
13314: NOT
13315: IFFALSE 13319
// exit ;
13317: GO 13435
// if arVehiclesCounter [ base ] > CheckByIndex ( arVehicles , 1 , base , 2 ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
13319: LD_EXP 50
13323: PUSH
13324: LD_VAR 0 6
13328: ARRAY
13329: PUSH
13330: LD_EXP 45
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: LD_VAR 0 6
13342: PPUSH
13343: LD_INT 2
13345: PPUSH
13346: CALL 58938 0 4
13350: GREATER
13351: PUSH
13352: LD_VAR 0 1
13356: PPUSH
13357: CALL_OW 266
13361: PUSH
13362: LD_INT 32
13364: PUSH
13365: LD_INT 88
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: IN
13372: OR
13373: IFFALSE 13406
// arVehicles := Join ( arVehicles , [ base , vehicle ] ) else
13375: LD_ADDR_EXP 45
13379: PUSH
13380: LD_EXP 45
13384: PPUSH
13385: LD_VAR 0 6
13389: PUSH
13390: LD_VAR 0 1
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL 54408 0 2
13403: ST_TO_ADDR
13404: GO 13435
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , [ base , vehicle ] ) ;
13406: LD_ADDR_EXP 46
13410: PUSH
13411: LD_EXP 46
13415: PPUSH
13416: LD_VAR 0 6
13420: PUSH
13421: LD_VAR 0 1
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PPUSH
13430: CALL 54408 0 2
13434: ST_TO_ADDR
// end ; end ;
13435: PPOPN 7
13437: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
13438: LD_VAR 0 1
13442: PPUSH
13443: CALL_OW 110
13447: PUSH
13448: LD_INT 7
13450: EQUAL
13451: IFFALSE 13465
// SetTag ( driver , 0 ) ;
13453: LD_VAR 0 1
13457: PPUSH
13458: LD_INT 0
13460: PPUSH
13461: CALL_OW 109
// end ;
13465: PPOPN 4
13467: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = side_bot then
13468: LD_VAR 0 2
13472: PPUSH
13473: CALL_OW 255
13477: PUSH
13478: LD_EXP 3
13482: EQUAL
13483: IFFALSE 13513
// if tech in arTech then
13485: LD_VAR 0 1
13489: PUSH
13490: LD_EXP 42
13494: IN
13495: IFFALSE 13513
// arTech := arTech diff tech ;
13497: LD_ADDR_EXP 42
13501: PUSH
13502: LD_EXP 42
13506: PUSH
13507: LD_VAR 0 1
13511: DIFF
13512: ST_TO_ADDR
// end ; end_of_file
13513: PPOPN 2
13515: END
// every 0 0$20 trigger game do
13516: LD_EXP 2
13520: IFFALSE 13565
13522: GO 13524
13524: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
13525: LD_INT 7
13527: PUSH
13528: LD_INT 6
13530: PUSH
13531: LD_INT 4
13533: PUSH
13534: LD_INT 6
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: PPUSH
13543: LD_EXP 21
13547: PUSH
13548: LD_INT 2
13550: ARRAY
13551: PPUSH
13552: LD_EXP 21
13556: PUSH
13557: LD_INT 1
13559: ARRAY
13560: PPUSH
13561: CALL 13566 0 3
13565: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , players_areas ; begin
13566: LD_INT 0
13568: PPUSH
13569: PPUSH
13570: PPUSH
13571: PPUSH
// if not areas then
13572: LD_VAR 0 1
13576: NOT
13577: IFFALSE 13581
// exit ;
13579: GO 13958
// players_areas := [ crates_player_west , crates_player_south , crates_player_east ] ;
13581: LD_ADDR_VAR 0 7
13585: PUSH
13586: LD_INT 31
13588: PUSH
13589: LD_INT 32
13591: PUSH
13592: LD_INT 30
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: LIST
13599: ST_TO_ADDR
// x := 5 ;
13600: LD_ADDR_VAR 0 6
13604: PUSH
13605: LD_INT 5
13607: ST_TO_ADDR
// repeat wait ( time ) ;
13608: LD_VAR 0 2
13612: PPUSH
13613: CALL_OW 67
// if tick < [ 25 25$00 , 23 23$00 , 21 21$00 ] [ Difficulty ] then
13617: LD_OWVAR 1
13621: PUSH
13622: LD_INT 52500
13624: PUSH
13625: LD_INT 48300
13627: PUSH
13628: LD_INT 44100
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: LIST
13635: PUSH
13636: LD_OWVAR 67
13640: ARRAY
13641: LESS
13642: IFFALSE 13781
// begin for i := 1 to multi_sides do
13644: LD_ADDR_VAR 0 5
13648: PUSH
13649: DOUBLE
13650: LD_INT 1
13652: DEC
13653: ST_TO_ADDR
13654: LD_EXP 7
13658: PUSH
13659: FOR_TO
13660: IFFALSE 13772
// if multi_sides [ i ] then
13662: LD_EXP 7
13666: PUSH
13667: LD_VAR 0 5
13671: ARRAY
13672: IFFALSE 13770
// begin if GetResourceArea ( players_areas [ multi_sides [ i ] ] , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
13674: LD_VAR 0 7
13678: PUSH
13679: LD_EXP 7
13683: PUSH
13684: LD_VAR 0 5
13688: ARRAY
13689: ARRAY
13690: PPUSH
13691: LD_INT 1
13693: PPUSH
13694: CALL_OW 287
13698: PUSH
13699: LD_INT 25
13701: PUSH
13702: LD_INT 22
13704: PUSH
13705: LD_INT 20
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: LIST
13712: PUSH
13713: LD_OWVAR 67
13717: ARRAY
13718: LESS
13719: IFFALSE 13770
// begin amount := amount - ( x * 10 ) ;
13721: LD_ADDR_VAR 0 3
13725: PUSH
13726: LD_VAR 0 3
13730: PUSH
13731: LD_VAR 0 6
13735: PUSH
13736: LD_INT 10
13738: MUL
13739: MINUS
13740: ST_TO_ADDR
// CreateCratesArea ( x , players_areas [ multi_sides [ i ] ] , true ) ;
13741: LD_VAR 0 6
13745: PPUSH
13746: LD_VAR 0 7
13750: PUSH
13751: LD_EXP 7
13755: PUSH
13756: LD_VAR 0 5
13760: ARRAY
13761: ARRAY
13762: PPUSH
13763: LD_INT 1
13765: PPUSH
13766: CALL_OW 55
// end ; end ;
13770: GO 13659
13772: POP
13773: POP
// wait ( 0 0$2 ) ;
13774: LD_INT 70
13776: PPUSH
13777: CALL_OW 67
// end ; for i in areas do
13781: LD_ADDR_VAR 0 5
13785: PUSH
13786: LD_VAR 0 1
13790: PUSH
13791: FOR_IN
13792: IFFALSE 13875
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
13794: LD_VAR 0 5
13798: PPUSH
13799: LD_INT 1
13801: PPUSH
13802: CALL_OW 287
13806: PUSH
13807: LD_INT 25
13809: PUSH
13810: LD_INT 22
13812: PUSH
13813: LD_INT 20
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: LIST
13820: PUSH
13821: LD_OWVAR 67
13825: ARRAY
13826: LESS
13827: IFFALSE 13873
// begin wait ( 0 0$5 ) ;
13829: LD_INT 175
13831: PPUSH
13832: CALL_OW 67
// amount := amount - ( x * 10 ) ;
13836: LD_ADDR_VAR 0 3
13840: PUSH
13841: LD_VAR 0 3
13845: PUSH
13846: LD_VAR 0 6
13850: PUSH
13851: LD_INT 10
13853: MUL
13854: MINUS
13855: ST_TO_ADDR
// CreateCratesArea ( x , i , true ) ;
13856: LD_VAR 0 6
13860: PPUSH
13861: LD_VAR 0 5
13865: PPUSH
13866: LD_INT 1
13868: PPUSH
13869: CALL_OW 55
// end ; end ;
13873: GO 13791
13875: POP
13876: POP
// time := time + 0 0$2 ;
13877: LD_ADDR_VAR 0 2
13881: PUSH
13882: LD_VAR 0 2
13886: PUSH
13887: LD_INT 70
13889: PLUS
13890: ST_TO_ADDR
// x := x - 1 ;
13891: LD_ADDR_VAR 0 6
13895: PUSH
13896: LD_VAR 0 6
13900: PUSH
13901: LD_INT 1
13903: MINUS
13904: ST_TO_ADDR
// if x = 0 then
13905: LD_VAR 0 6
13909: PUSH
13910: LD_INT 0
13912: EQUAL
13913: IFFALSE 13923
// x := 5 ;
13915: LD_ADDR_VAR 0 6
13919: PUSH
13920: LD_INT 5
13922: ST_TO_ADDR
// if time > 2 2$00 then
13923: LD_VAR 0 2
13927: PUSH
13928: LD_INT 4200
13930: GREATER
13931: IFFALSE 13941
// time := 0 0$30 ;
13933: LD_ADDR_VAR 0 2
13937: PUSH
13938: LD_INT 1050
13940: ST_TO_ADDR
// until not game or amount <= 0 ;
13941: LD_EXP 2
13945: NOT
13946: PUSH
13947: LD_VAR 0 3
13951: PUSH
13952: LD_INT 0
13954: LESSEQUAL
13955: OR
13956: IFFALSE 13608
// end ; end_of_file
13958: LD_VAR 0 4
13962: RET
// var NorthBase , WestBase ; every 0 0$1 do var i ;
13963: GO 13965
13965: DISABLE
13966: LD_INT 0
13968: PPUSH
// begin NorthBase := 2 ;
13969: LD_ADDR_LOC 1
13973: PUSH
13974: LD_INT 2
13976: ST_TO_ADDR
// WestBase := 3 ;
13977: LD_ADDR_LOC 2
13981: PUSH
13982: LD_INT 3
13984: ST_TO_ADDR
// end ;
13985: PPOPN 1
13987: END
// every 10 10$00 do var i ;
13988: GO 13990
13990: DISABLE
13991: LD_INT 0
13993: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
13994: LD_ADDR_VAR 0 1
13998: PUSH
13999: DOUBLE
14000: LD_INT 1
14002: DEC
14003: ST_TO_ADDR
14004: LD_INT 3
14006: PUSH
14007: LD_INT 4
14009: PUSH
14010: LD_INT 5
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: PUSH
14018: LD_OWVAR 67
14022: ARRAY
14023: PUSH
14024: FOR_TO
14025: IFFALSE 14126
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14027: LD_ADDR_EXP 43
14031: PUSH
14032: LD_EXP 43
14036: PPUSH
14037: LD_EXP 43
14041: PUSH
14042: LD_INT 1
14044: PLUS
14045: PPUSH
14046: LD_LOC 1
14050: PUSH
14051: LD_INT 14
14053: PUSH
14054: LD_INT 3
14056: PUSH
14057: LD_INT 1
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 1
14066: PPUSH
14067: LD_INT 2
14069: PPUSH
14070: CALL_OW 12
14074: ARRAY
14075: PUSH
14076: LD_INT 2
14078: PUSH
14079: LD_INT 27
14081: PUSH
14082: LD_INT 25
14084: PUSH
14085: LD_INT 28
14087: PUSH
14088: LD_INT 29
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: PUSH
14097: LD_INT 1
14099: PPUSH
14100: LD_INT 4
14102: PPUSH
14103: CALL_OW 12
14107: ARRAY
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 1
14123: ST_TO_ADDR
// end ;
14124: GO 14024
14126: POP
14127: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
14128: LD_ADDR_VAR 0 1
14132: PUSH
14133: DOUBLE
14134: LD_INT 1
14136: DEC
14137: ST_TO_ADDR
14138: LD_INT 3
14140: PUSH
14141: LD_INT 4
14143: PUSH
14144: LD_INT 5
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: LIST
14151: PUSH
14152: LD_OWVAR 67
14156: ARRAY
14157: PUSH
14158: FOR_TO
14159: IFFALSE 14241
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14161: LD_ADDR_EXP 43
14165: PUSH
14166: LD_EXP 43
14170: PPUSH
14171: LD_EXP 43
14175: PUSH
14176: LD_INT 1
14178: PLUS
14179: PPUSH
14180: LD_LOC 2
14184: PUSH
14185: LD_INT 14
14187: PUSH
14188: LD_INT 1
14190: PUSH
14191: LD_INT 2
14193: PUSH
14194: LD_INT 27
14196: PUSH
14197: LD_INT 25
14199: PUSH
14200: LD_INT 28
14202: PUSH
14203: LD_INT 26
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: PUSH
14212: LD_INT 1
14214: PPUSH
14215: LD_INT 4
14217: PPUSH
14218: CALL_OW 12
14222: ARRAY
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PPUSH
14234: CALL_OW 1
14238: ST_TO_ADDR
// end ;
14239: GO 14158
14241: POP
14242: POP
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
14243: LD_INT 16800
14245: PUSH
14246: LD_INT 2100
14248: PUSH
14249: LD_OWVAR 67
14253: MUL
14254: MINUS
14255: PPUSH
14256: CALL_OW 67
// for i := 1 to [ 5 , 5 , 6 ] [ Difficulty ] do
14260: LD_ADDR_VAR 0 1
14264: PUSH
14265: DOUBLE
14266: LD_INT 1
14268: DEC
14269: ST_TO_ADDR
14270: LD_INT 5
14272: PUSH
14273: LD_INT 5
14275: PUSH
14276: LD_INT 6
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: LIST
14283: PUSH
14284: LD_OWVAR 67
14288: ARRAY
14289: PUSH
14290: FOR_TO
14291: IFFALSE 14392
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14293: LD_ADDR_EXP 43
14297: PUSH
14298: LD_EXP 43
14302: PPUSH
14303: LD_EXP 43
14307: PUSH
14308: LD_INT 1
14310: PLUS
14311: PPUSH
14312: LD_LOC 1
14316: PUSH
14317: LD_INT 14
14319: PUSH
14320: LD_INT 3
14322: PUSH
14323: LD_INT 1
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 1
14332: PPUSH
14333: LD_INT 2
14335: PPUSH
14336: CALL_OW 12
14340: ARRAY
14341: PUSH
14342: LD_INT 2
14344: PUSH
14345: LD_INT 27
14347: PUSH
14348: LD_INT 25
14350: PUSH
14351: LD_INT 28
14353: PUSH
14354: LD_INT 29
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 1
14365: PPUSH
14366: LD_INT 4
14368: PPUSH
14369: CALL_OW 12
14373: ARRAY
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PPUSH
14385: CALL_OW 1
14389: ST_TO_ADDR
// end ;
14390: GO 14290
14392: POP
14393: POP
// if tick > 30 30$0 then
14394: LD_OWVAR 1
14398: PUSH
14399: LD_INT 63000
14401: GREATER
14402: IFFALSE 14478
// begin for i := 1 to tick div 30 30$0 do
14404: LD_ADDR_VAR 0 1
14408: PUSH
14409: DOUBLE
14410: LD_INT 1
14412: DEC
14413: ST_TO_ADDR
14414: LD_OWVAR 1
14418: PUSH
14419: LD_INT 63000
14421: DIV
14422: PUSH
14423: FOR_TO
14424: IFFALSE 14476
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
14426: LD_ADDR_EXP 43
14430: PUSH
14431: LD_EXP 43
14435: PPUSH
14436: LD_EXP 43
14440: PUSH
14441: LD_INT 1
14443: PLUS
14444: PPUSH
14445: LD_LOC 1
14449: PUSH
14450: LD_INT 14
14452: PUSH
14453: LD_INT 3
14455: PUSH
14456: LD_INT 2
14458: PUSH
14459: LD_INT 29
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 1
14473: ST_TO_ADDR
14474: GO 14423
14476: POP
14477: POP
// end ; for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
14478: LD_ADDR_VAR 0 1
14482: PUSH
14483: DOUBLE
14484: LD_INT 1
14486: DEC
14487: ST_TO_ADDR
14488: LD_INT 5
14490: PUSH
14491: LD_INT 6
14493: PUSH
14494: LD_INT 6
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: LIST
14501: PUSH
14502: LD_OWVAR 67
14506: ARRAY
14507: PUSH
14508: FOR_TO
14509: IFFALSE 14591
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14511: LD_ADDR_EXP 43
14515: PUSH
14516: LD_EXP 43
14520: PPUSH
14521: LD_EXP 43
14525: PUSH
14526: LD_INT 1
14528: PLUS
14529: PPUSH
14530: LD_LOC 2
14534: PUSH
14535: LD_INT 14
14537: PUSH
14538: LD_INT 1
14540: PUSH
14541: LD_INT 2
14543: PUSH
14544: LD_INT 27
14546: PUSH
14547: LD_INT 25
14549: PUSH
14550: LD_INT 28
14552: PUSH
14553: LD_INT 26
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: PUSH
14562: LD_INT 1
14564: PPUSH
14565: LD_INT 4
14567: PPUSH
14568: CALL_OW 12
14572: ARRAY
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PPUSH
14584: CALL_OW 1
14588: ST_TO_ADDR
// end ;
14589: GO 14508
14591: POP
14592: POP
// repeat wait ( [ 10 10$0 , 9 9$0 , 8 8$0 ] [ Difficulty ] ) ;
14593: LD_INT 21000
14595: PUSH
14596: LD_INT 18900
14598: PUSH
14599: LD_INT 16800
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: LIST
14606: PUSH
14607: LD_OWVAR 67
14611: ARRAY
14612: PPUSH
14613: CALL_OW 67
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
14617: LD_ADDR_VAR 0 1
14621: PUSH
14622: DOUBLE
14623: LD_INT 1
14625: DEC
14626: ST_TO_ADDR
14627: LD_INT 5
14629: PUSH
14630: LD_INT 6
14632: PUSH
14633: LD_INT 7
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: LIST
14640: PUSH
14641: LD_OWVAR 67
14645: ARRAY
14646: PUSH
14647: FOR_TO
14648: IFFALSE 14749
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14650: LD_ADDR_EXP 43
14654: PUSH
14655: LD_EXP 43
14659: PPUSH
14660: LD_EXP 43
14664: PUSH
14665: LD_INT 1
14667: PLUS
14668: PPUSH
14669: LD_LOC 1
14673: PUSH
14674: LD_INT 14
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: LD_INT 1
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 1
14689: PPUSH
14690: LD_INT 2
14692: PPUSH
14693: CALL_OW 12
14697: ARRAY
14698: PUSH
14699: LD_INT 2
14701: PUSH
14702: LD_INT 27
14704: PUSH
14705: LD_INT 25
14707: PUSH
14708: LD_INT 28
14710: PUSH
14711: LD_INT 29
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: PUSH
14720: LD_INT 1
14722: PPUSH
14723: LD_INT 4
14725: PPUSH
14726: CALL_OW 12
14730: ARRAY
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PPUSH
14742: CALL_OW 1
14746: ST_TO_ADDR
// end ;
14747: GO 14647
14749: POP
14750: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
14751: LD_ADDR_VAR 0 1
14755: PUSH
14756: DOUBLE
14757: LD_INT 1
14759: DEC
14760: ST_TO_ADDR
14761: LD_INT 4
14763: PUSH
14764: LD_INT 5
14766: PUSH
14767: LD_INT 6
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: LIST
14774: PUSH
14775: LD_OWVAR 67
14779: ARRAY
14780: PUSH
14781: FOR_TO
14782: IFFALSE 14864
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14784: LD_ADDR_EXP 43
14788: PUSH
14789: LD_EXP 43
14793: PPUSH
14794: LD_EXP 43
14798: PUSH
14799: LD_INT 1
14801: PLUS
14802: PPUSH
14803: LD_LOC 2
14807: PUSH
14808: LD_INT 14
14810: PUSH
14811: LD_INT 1
14813: PUSH
14814: LD_INT 2
14816: PUSH
14817: LD_INT 27
14819: PUSH
14820: LD_INT 25
14822: PUSH
14823: LD_INT 28
14825: PUSH
14826: LD_INT 26
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 1
14837: PPUSH
14838: LD_INT 4
14840: PPUSH
14841: CALL_OW 12
14845: ARRAY
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PPUSH
14857: CALL_OW 1
14861: ST_TO_ADDR
// end ;
14862: GO 14781
14864: POP
14865: POP
// until false ;
14866: LD_INT 0
14868: IFFALSE 14593
// end ;
14870: PPOPN 1
14872: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) do var i , tmp ;
14873: LD_EXP 46
14877: PPUSH
14878: LD_INT 1
14880: PPUSH
14881: LD_LOC 1
14885: PPUSH
14886: LD_INT 2
14888: PPUSH
14889: CALL 58938 0 4
14893: IFFALSE 15062
14895: GO 14897
14897: DISABLE
14898: LD_INT 0
14900: PPUSH
14901: PPUSH
// begin enable ;
14902: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) ;
14903: LD_ADDR_VAR 0 2
14907: PUSH
14908: LD_EXP 46
14912: PPUSH
14913: LD_INT 1
14915: PPUSH
14916: LD_LOC 1
14920: PPUSH
14921: LD_INT 2
14923: PPUSH
14924: CALL 58938 0 4
14928: ST_TO_ADDR
// if not tmp then
14929: LD_VAR 0 2
14933: NOT
14934: IFFALSE 14938
// exit ;
14936: GO 15062
// for i := Count ( arVehiclesAtttackers ) downto 1 do
14938: LD_ADDR_VAR 0 1
14942: PUSH
14943: DOUBLE
14944: LD_EXP 46
14948: PPUSH
14949: CALL 18819 0 1
14953: INC
14954: ST_TO_ADDR
14955: LD_INT 1
14957: PUSH
14958: FOR_DOWNTO
14959: IFFALSE 15005
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
14961: LD_EXP 46
14965: PUSH
14966: LD_VAR 0 1
14970: ARRAY
14971: PUSH
14972: LD_INT 2
14974: ARRAY
14975: PUSH
14976: LD_VAR 0 2
14980: IN
14981: IFFALSE 15003
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
14983: LD_ADDR_EXP 46
14987: PUSH
14988: LD_EXP 46
14992: PPUSH
14993: LD_VAR 0 1
14997: PPUSH
14998: CALL_OW 3
15002: ST_TO_ADDR
15003: GO 14958
15005: POP
15006: POP
// SendToAttack ( tmp , [ [ 164 , 40 ] , [ 174 , 72 ] , [ 174 , 93 ] , [ 196 , 110 ] ] ) ;
15007: LD_VAR 0 2
15011: PPUSH
15012: LD_INT 164
15014: PUSH
15015: LD_INT 40
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 174
15024: PUSH
15025: LD_INT 72
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 174
15034: PUSH
15035: LD_INT 93
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: LD_INT 196
15044: PUSH
15045: LD_INT 110
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: PPUSH
15058: CALL 15257 0 2
// end ;
15062: PPOPN 2
15064: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) do var i , tmp ;
15065: LD_EXP 46
15069: PPUSH
15070: LD_INT 1
15072: PPUSH
15073: LD_LOC 2
15077: PPUSH
15078: LD_INT 2
15080: PPUSH
15081: CALL 58938 0 4
15085: IFFALSE 15254
15087: GO 15089
15089: DISABLE
15090: LD_INT 0
15092: PPUSH
15093: PPUSH
// begin enable ;
15094: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) ;
15095: LD_ADDR_VAR 0 2
15099: PUSH
15100: LD_EXP 46
15104: PPUSH
15105: LD_INT 1
15107: PPUSH
15108: LD_LOC 2
15112: PPUSH
15113: LD_INT 2
15115: PPUSH
15116: CALL 58938 0 4
15120: ST_TO_ADDR
// if not tmp then
15121: LD_VAR 0 2
15125: NOT
15126: IFFALSE 15130
// exit ;
15128: GO 15254
// for i := Count ( arVehiclesAtttackers ) downto 1 do
15130: LD_ADDR_VAR 0 1
15134: PUSH
15135: DOUBLE
15136: LD_EXP 46
15140: PPUSH
15141: CALL 18819 0 1
15145: INC
15146: ST_TO_ADDR
15147: LD_INT 1
15149: PUSH
15150: FOR_DOWNTO
15151: IFFALSE 15197
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
15153: LD_EXP 46
15157: PUSH
15158: LD_VAR 0 1
15162: ARRAY
15163: PUSH
15164: LD_INT 2
15166: ARRAY
15167: PUSH
15168: LD_VAR 0 2
15172: IN
15173: IFFALSE 15195
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
15175: LD_ADDR_EXP 46
15179: PUSH
15180: LD_EXP 46
15184: PPUSH
15185: LD_VAR 0 1
15189: PPUSH
15190: CALL_OW 3
15194: ST_TO_ADDR
15195: GO 15150
15197: POP
15198: POP
// SendToAttack ( tmp , [ [ 49 , 37 ] , [ 54 , 68 ] , [ 77 , 91 ] , [ 95 , 104 ] ] ) ;
15199: LD_VAR 0 2
15203: PPUSH
15204: LD_INT 49
15206: PUSH
15207: LD_INT 37
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 54
15216: PUSH
15217: LD_INT 68
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 77
15226: PUSH
15227: LD_INT 91
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: LD_INT 95
15236: PUSH
15237: LD_INT 104
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: PPUSH
15250: CALL 15257 0 2
// end ;
15254: PPOPN 2
15256: END
// function SendToAttack ( attackers , path ) ; var i ; begin
15257: LD_INT 0
15259: PPUSH
15260: PPUSH
// repeat wait ( 0 0$1 ) ;
15261: LD_INT 35
15263: PPUSH
15264: CALL_OW 67
// for i in attackers do
15268: LD_ADDR_VAR 0 4
15272: PUSH
15273: LD_VAR 0 1
15277: PUSH
15278: FOR_IN
15279: IFFALSE 15336
// begin if not IsOk ( i ) then
15281: LD_VAR 0 4
15285: PPUSH
15286: CALL_OW 302
15290: NOT
15291: IFFALSE 15320
// begin ComUnlink ( i ) ;
15293: LD_VAR 0 4
15297: PPUSH
15298: CALL_OW 136
// attackers := attackers diff i ;
15302: LD_ADDR_VAR 0 1
15306: PUSH
15307: LD_VAR 0 1
15311: PUSH
15312: LD_VAR 0 4
15316: DIFF
15317: ST_TO_ADDR
// continue ;
15318: GO 15278
// end ; AgressiveMove ( i , path ) ;
15320: LD_VAR 0 4
15324: PPUSH
15325: LD_VAR 0 2
15329: PPUSH
15330: CALL 57012 0 2
// end ;
15334: GO 15278
15336: POP
15337: POP
// until not UnitFilter ( attackers , [ f_ok ] ) ;
15338: LD_VAR 0 1
15342: PPUSH
15343: LD_INT 50
15345: PUSH
15346: EMPTY
15347: LIST
15348: PPUSH
15349: CALL_OW 72
15353: NOT
15354: IFFALSE 15261
// end ;
15356: LD_VAR 0 3
15360: RET
// every 0 0$10 trigger not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot do var i , un , tmp , enemy ;
15361: LD_INT 7
15363: PPUSH
15364: CALL_OW 302
15368: NOT
15369: PUSH
15370: LD_INT 7
15372: PPUSH
15373: CALL_OW 255
15377: PUSH
15378: LD_EXP 3
15382: NONEQUAL
15383: OR
15384: IFFALSE 15749
15386: GO 15388
15388: DISABLE
15389: LD_INT 0
15391: PPUSH
15392: PPUSH
15393: PPUSH
15394: PPUSH
// begin for i := 1 to 3 do
15395: LD_ADDR_VAR 0 1
15399: PUSH
15400: DOUBLE
15401: LD_INT 1
15403: DEC
15404: ST_TO_ADDR
15405: LD_INT 3
15407: PUSH
15408: FOR_TO
15409: IFFALSE 15559
// begin uc_side := 2 ;
15411: LD_ADDR_OWVAR 20
15415: PUSH
15416: LD_INT 2
15418: ST_TO_ADDR
// uc_nation := nation_arabian ;
15419: LD_ADDR_OWVAR 21
15423: PUSH
15424: LD_INT 2
15426: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_remote , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
15427: LD_INT 11
15429: PPUSH
15430: LD_INT 1
15432: PPUSH
15433: LD_INT 2
15435: PPUSH
15436: LD_INT 24
15438: PUSH
15439: LD_INT 23
15441: PUSH
15442: LD_INT 92
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: LIST
15449: PUSH
15450: LD_INT 1
15452: PPUSH
15453: LD_INT 3
15455: PPUSH
15456: CALL_OW 12
15460: ARRAY
15461: PPUSH
15462: LD_INT 100
15464: PPUSH
15465: CALL 21557 0 5
// un := CreateVehicle ;
15469: LD_ADDR_VAR 0 2
15473: PUSH
15474: CALL_OW 45
15478: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15479: LD_VAR 0 2
15483: PPUSH
15484: LD_INT 2
15486: PPUSH
15487: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
15491: LD_VAR 0 2
15495: PPUSH
15496: LD_INT 47
15498: PPUSH
15499: LD_INT 0
15501: PPUSH
15502: CALL_OW 49
// Connect ( un ) ;
15506: LD_VAR 0 2
15510: PPUSH
15511: CALL 25025 0 1
// wait ( 0 0$0.3 ) ;
15515: LD_INT 10
15517: PPUSH
15518: CALL_OW 67
// ComMoveXY ( un , 73 , 17 ) ;
15522: LD_VAR 0 2
15526: PPUSH
15527: LD_INT 73
15529: PPUSH
15530: LD_INT 17
15532: PPUSH
15533: CALL_OW 111
// tmp := Join ( tmp , un ) ;
15537: LD_ADDR_VAR 0 3
15541: PUSH
15542: LD_VAR 0 3
15546: PPUSH
15547: LD_VAR 0 2
15551: PPUSH
15552: CALL 54408 0 2
15556: ST_TO_ADDR
// end ;
15557: GO 15408
15559: POP
15560: POP
// repeat wait ( 0 0$1 ) ;
15561: LD_INT 35
15563: PPUSH
15564: CALL_OW 67
// for i in tmp do
15568: LD_ADDR_VAR 0 1
15572: PUSH
15573: LD_VAR 0 3
15577: PUSH
15578: FOR_IN
15579: IFFALSE 15740
// begin if not IsOk ( i ) then
15581: LD_VAR 0 1
15585: PPUSH
15586: CALL_OW 302
15590: NOT
15591: IFFALSE 15620
// begin ComAutodestruct ( i ) ;
15593: LD_VAR 0 1
15597: PPUSH
15598: CALL 49920 0 1
// tmp := tmp diff i ;
15602: LD_ADDR_VAR 0 3
15606: PUSH
15607: LD_VAR 0 3
15611: PUSH
15612: LD_VAR 0 1
15616: DIFF
15617: ST_TO_ADDR
// continue ;
15618: GO 15578
// end ; if GetLives ( i ) < 750 then
15620: LD_VAR 0 1
15624: PPUSH
15625: CALL_OW 256
15629: PUSH
15630: LD_INT 750
15632: LESS
15633: IFFALSE 15694
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
15635: LD_ADDR_VAR 0 4
15639: PUSH
15640: LD_INT 81
15642: PUSH
15643: LD_VAR 0 1
15647: PPUSH
15648: CALL_OW 255
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PPUSH
15657: CALL_OW 69
15661: PPUSH
15662: LD_VAR 0 1
15666: PPUSH
15667: CALL_OW 74
15671: ST_TO_ADDR
// if enemy then
15672: LD_VAR 0 4
15676: IFFALSE 15692
// ComMoveUnit ( i , enemy ) ;
15678: LD_VAR 0 1
15682: PPUSH
15683: LD_VAR 0 4
15687: PPUSH
15688: CALL_OW 112
// end else
15692: GO 15738
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
15694: LD_VAR 0 1
15698: PPUSH
15699: LD_INT 76
15701: PUSH
15702: LD_INT 31
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 93
15711: PUSH
15712: LD_INT 67
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 108
15721: PUSH
15722: LD_INT 97
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: PPUSH
15734: CALL 57012 0 2
// end ;
15738: GO 15578
15740: POP
15741: POP
// until not tmp ;
15742: LD_VAR 0 3
15746: NOT
15747: IFFALSE 15561
// end ;
15749: PPOPN 4
15751: END
// every 18 18$00 trigger ( not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot ) and ( IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) = side_bot ) do var i , un , tmp , enemy ;
15752: LD_INT 7
15754: PPUSH
15755: CALL_OW 302
15759: NOT
15760: PUSH
15761: LD_INT 7
15763: PPUSH
15764: CALL_OW 255
15768: PUSH
15769: LD_EXP 3
15773: NONEQUAL
15774: OR
15775: PUSH
15776: LD_INT 45
15778: PPUSH
15779: CALL_OW 302
15783: PUSH
15784: LD_INT 45
15786: PPUSH
15787: CALL_OW 255
15791: PUSH
15792: LD_EXP 3
15796: EQUAL
15797: AND
15798: AND
15799: IFFALSE 16156
15801: GO 15803
15803: DISABLE
15804: LD_INT 0
15806: PPUSH
15807: PPUSH
15808: PPUSH
15809: PPUSH
// begin enable ;
15810: ENABLE
// for i := 1 to 3 do
15811: LD_ADDR_VAR 0 1
15815: PUSH
15816: DOUBLE
15817: LD_INT 1
15819: DEC
15820: ST_TO_ADDR
15821: LD_INT 3
15823: PUSH
15824: FOR_TO
15825: IFFALSE 15966
// begin uc_side := 2 ;
15827: LD_ADDR_OWVAR 20
15831: PUSH
15832: LD_INT 2
15834: ST_TO_ADDR
// uc_nation := nation_arabian ;
15835: LD_ADDR_OWVAR 21
15839: PUSH
15840: LD_INT 2
15842: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
15843: LD_INT 11
15845: PPUSH
15846: LD_INT 1
15848: PPUSH
15849: LD_INT 5
15851: PPUSH
15852: LD_INT 24
15854: PUSH
15855: LD_INT 23
15857: PUSH
15858: LD_INT 92
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 1
15868: PPUSH
15869: LD_INT 3
15871: PPUSH
15872: CALL_OW 12
15876: ARRAY
15877: PPUSH
15878: LD_INT 100
15880: PPUSH
15881: CALL 21557 0 5
// un := CreateVehicle ;
15885: LD_ADDR_VAR 0 2
15889: PUSH
15890: CALL_OW 45
15894: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15895: LD_VAR 0 2
15899: PPUSH
15900: LD_INT 2
15902: PPUSH
15903: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
15907: LD_VAR 0 2
15911: PPUSH
15912: LD_INT 47
15914: PPUSH
15915: LD_INT 0
15917: PPUSH
15918: CALL_OW 49
// wait ( 0 0$0.3 ) ;
15922: LD_INT 10
15924: PPUSH
15925: CALL_OW 67
// ComMoveXY ( un , 73 , 17 ) ;
15929: LD_VAR 0 2
15933: PPUSH
15934: LD_INT 73
15936: PPUSH
15937: LD_INT 17
15939: PPUSH
15940: CALL_OW 111
// tmp := Join ( tmp , un ) ;
15944: LD_ADDR_VAR 0 3
15948: PUSH
15949: LD_VAR 0 3
15953: PPUSH
15954: LD_VAR 0 2
15958: PPUSH
15959: CALL 54408 0 2
15963: ST_TO_ADDR
// end ;
15964: GO 15824
15966: POP
15967: POP
// repeat wait ( 0 0$1 ) ;
15968: LD_INT 35
15970: PPUSH
15971: CALL_OW 67
// for i in tmp do
15975: LD_ADDR_VAR 0 1
15979: PUSH
15980: LD_VAR 0 3
15984: PUSH
15985: FOR_IN
15986: IFFALSE 16147
// begin if not IsOk ( i ) then
15988: LD_VAR 0 1
15992: PPUSH
15993: CALL_OW 302
15997: NOT
15998: IFFALSE 16027
// begin ComAutodestruct ( i ) ;
16000: LD_VAR 0 1
16004: PPUSH
16005: CALL 49920 0 1
// tmp := tmp diff i ;
16009: LD_ADDR_VAR 0 3
16013: PUSH
16014: LD_VAR 0 3
16018: PUSH
16019: LD_VAR 0 1
16023: DIFF
16024: ST_TO_ADDR
// continue ;
16025: GO 15985
// end ; if GetLives ( i ) < 750 then
16027: LD_VAR 0 1
16031: PPUSH
16032: CALL_OW 256
16036: PUSH
16037: LD_INT 750
16039: LESS
16040: IFFALSE 16101
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16042: LD_ADDR_VAR 0 4
16046: PUSH
16047: LD_INT 81
16049: PUSH
16050: LD_VAR 0 1
16054: PPUSH
16055: CALL_OW 255
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 69
16068: PPUSH
16069: LD_VAR 0 1
16073: PPUSH
16074: CALL_OW 74
16078: ST_TO_ADDR
// if enemy then
16079: LD_VAR 0 4
16083: IFFALSE 16099
// ComMoveUnit ( i , enemy ) ;
16085: LD_VAR 0 1
16089: PPUSH
16090: LD_VAR 0 4
16094: PPUSH
16095: CALL_OW 112
// end else
16099: GO 16145
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
16101: LD_VAR 0 1
16105: PPUSH
16106: LD_INT 76
16108: PUSH
16109: LD_INT 31
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: LD_INT 93
16118: PUSH
16119: LD_INT 67
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PUSH
16126: LD_INT 108
16128: PUSH
16129: LD_INT 97
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: LIST
16140: PPUSH
16141: CALL 57012 0 2
// end ;
16145: GO 15985
16147: POP
16148: POP
// until not tmp ;
16149: LD_VAR 0 3
16153: NOT
16154: IFFALSE 15968
// end ;
16156: PPOPN 4
16158: END
// every 0 0$10 trigger not IsOk ( ar_dep_e ) or GetSide ( ar_dep_e ) <> side_bot do var i , un , tmp , enemy ;
16159: LD_INT 69
16161: PPUSH
16162: CALL_OW 302
16166: NOT
16167: PUSH
16168: LD_INT 69
16170: PPUSH
16171: CALL_OW 255
16175: PUSH
16176: LD_EXP 3
16180: NONEQUAL
16181: OR
16182: IFFALSE 16435
16184: GO 16186
16186: DISABLE
16187: LD_INT 0
16189: PPUSH
16190: PPUSH
16191: PPUSH
16192: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
16193: LD_ADDR_VAR 0 1
16197: PUSH
16198: DOUBLE
16199: LD_INT 1
16201: DEC
16202: ST_TO_ADDR
16203: LD_INT 2
16205: PUSH
16206: LD_INT 3
16208: PUSH
16209: LD_INT 4
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: LIST
16216: PUSH
16217: LD_OWVAR 67
16221: ARRAY
16222: PUSH
16223: FOR_TO
16224: IFFALSE 16315
// begin uc_side := side_bot ;
16226: LD_ADDR_OWVAR 20
16230: PUSH
16231: LD_EXP 3
16235: ST_TO_ADDR
// uc_nation := nation_nature ;
16236: LD_ADDR_OWVAR 21
16240: PUSH
16241: LD_INT 0
16243: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16244: CALL 50518 0 0
// hc_class := class_apeman_kamikaze ;
16248: LD_ADDR_OWVAR 28
16252: PUSH
16253: LD_INT 17
16255: ST_TO_ADDR
// un := CreateHuman ;
16256: LD_ADDR_VAR 0 2
16260: PUSH
16261: CALL_OW 44
16265: ST_TO_ADDR
// SetDir ( un , 4 ) ;
16266: LD_VAR 0 2
16270: PPUSH
16271: LD_INT 4
16273: PPUSH
16274: CALL_OW 233
// PlaceUnitArea ( un , east_ape_spawn , false ) ;
16278: LD_VAR 0 2
16282: PPUSH
16283: LD_INT 48
16285: PPUSH
16286: LD_INT 0
16288: PPUSH
16289: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16293: LD_ADDR_VAR 0 3
16297: PUSH
16298: LD_VAR 0 3
16302: PPUSH
16303: LD_VAR 0 2
16307: PPUSH
16308: CALL 54408 0 2
16312: ST_TO_ADDR
// end ;
16313: GO 16223
16315: POP
16316: POP
// repeat wait ( 0 0$1 ) ;
16317: LD_INT 35
16319: PPUSH
16320: CALL_OW 67
// for i in tmp do
16324: LD_ADDR_VAR 0 1
16328: PUSH
16329: LD_VAR 0 3
16333: PUSH
16334: FOR_IN
16335: IFFALSE 16426
// begin if not IsOk ( i ) then
16337: LD_VAR 0 1
16341: PPUSH
16342: CALL_OW 302
16346: NOT
16347: IFFALSE 16367
// begin tmp := tmp diff i ;
16349: LD_ADDR_VAR 0 3
16353: PUSH
16354: LD_VAR 0 3
16358: PUSH
16359: LD_VAR 0 1
16363: DIFF
16364: ST_TO_ADDR
// continue ;
16365: GO 16334
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16367: LD_ADDR_VAR 0 4
16371: PUSH
16372: LD_INT 81
16374: PUSH
16375: LD_VAR 0 1
16379: PPUSH
16380: CALL_OW 255
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PPUSH
16389: CALL_OW 69
16393: PPUSH
16394: LD_VAR 0 1
16398: PPUSH
16399: CALL_OW 74
16403: ST_TO_ADDR
// if enemy then
16404: LD_VAR 0 4
16408: IFFALSE 16424
// ComAttackUnit ( i , enemy ) ;
16410: LD_VAR 0 1
16414: PPUSH
16415: LD_VAR 0 4
16419: PPUSH
16420: CALL_OW 115
// end ;
16424: GO 16334
16426: POP
16427: POP
// until not tmp ;
16428: LD_VAR 0 3
16432: NOT
16433: IFFALSE 16317
// end ;
16435: PPOPN 4
16437: END
// every 0 0$10 trigger not IsOk ( ar_dep_w ) or GetSide ( ar_dep_w ) <> side_bot do var i , un , tmp , enemy ;
16438: LD_INT 45
16440: PPUSH
16441: CALL_OW 302
16445: NOT
16446: PUSH
16447: LD_INT 45
16449: PPUSH
16450: CALL_OW 255
16454: PUSH
16455: LD_EXP 3
16459: NONEQUAL
16460: OR
16461: IFFALSE 16714
16463: GO 16465
16465: DISABLE
16466: LD_INT 0
16468: PPUSH
16469: PPUSH
16470: PPUSH
16471: PPUSH
// begin for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
16472: LD_ADDR_VAR 0 1
16476: PUSH
16477: DOUBLE
16478: LD_INT 1
16480: DEC
16481: ST_TO_ADDR
16482: LD_INT 2
16484: PUSH
16485: LD_INT 3
16487: PUSH
16488: LD_INT 3
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: PUSH
16496: LD_OWVAR 67
16500: ARRAY
16501: PUSH
16502: FOR_TO
16503: IFFALSE 16594
// begin uc_side := side_bot ;
16505: LD_ADDR_OWVAR 20
16509: PUSH
16510: LD_EXP 3
16514: ST_TO_ADDR
// uc_nation := nation_nature ;
16515: LD_ADDR_OWVAR 21
16519: PUSH
16520: LD_INT 0
16522: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16523: CALL 50518 0 0
// hc_class := class_apeman_kamikaze ;
16527: LD_ADDR_OWVAR 28
16531: PUSH
16532: LD_INT 17
16534: ST_TO_ADDR
// un := CreateHuman ;
16535: LD_ADDR_VAR 0 2
16539: PUSH
16540: CALL_OW 44
16544: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16545: LD_VAR 0 2
16549: PPUSH
16550: LD_INT 2
16552: PPUSH
16553: CALL_OW 233
// PlaceUnitArea ( un , west_ape_spawn , false ) ;
16557: LD_VAR 0 2
16561: PPUSH
16562: LD_INT 49
16564: PPUSH
16565: LD_INT 0
16567: PPUSH
16568: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16572: LD_ADDR_VAR 0 3
16576: PUSH
16577: LD_VAR 0 3
16581: PPUSH
16582: LD_VAR 0 2
16586: PPUSH
16587: CALL 54408 0 2
16591: ST_TO_ADDR
// end ;
16592: GO 16502
16594: POP
16595: POP
// repeat wait ( 0 0$1 ) ;
16596: LD_INT 35
16598: PPUSH
16599: CALL_OW 67
// for i in tmp do
16603: LD_ADDR_VAR 0 1
16607: PUSH
16608: LD_VAR 0 3
16612: PUSH
16613: FOR_IN
16614: IFFALSE 16705
// begin if not IsOk ( i ) then
16616: LD_VAR 0 1
16620: PPUSH
16621: CALL_OW 302
16625: NOT
16626: IFFALSE 16646
// begin tmp := tmp diff i ;
16628: LD_ADDR_VAR 0 3
16632: PUSH
16633: LD_VAR 0 3
16637: PUSH
16638: LD_VAR 0 1
16642: DIFF
16643: ST_TO_ADDR
// continue ;
16644: GO 16613
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16646: LD_ADDR_VAR 0 4
16650: PUSH
16651: LD_INT 81
16653: PUSH
16654: LD_VAR 0 1
16658: PPUSH
16659: CALL_OW 255
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PPUSH
16668: CALL_OW 69
16672: PPUSH
16673: LD_VAR 0 1
16677: PPUSH
16678: CALL_OW 74
16682: ST_TO_ADDR
// if enemy then
16683: LD_VAR 0 4
16687: IFFALSE 16703
// ComAttackUnit ( i , enemy ) ;
16689: LD_VAR 0 1
16693: PPUSH
16694: LD_VAR 0 4
16698: PPUSH
16699: CALL_OW 115
// end ;
16703: GO 16613
16705: POP
16706: POP
// until not tmp ;
16707: LD_VAR 0 3
16711: NOT
16712: IFFALSE 16596
// end ; end_of_file
16714: PPOPN 4
16716: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16717: LD_INT 0
16719: PPUSH
16720: PPUSH
// if exist_mode then
16721: LD_VAR 0 2
16725: IFFALSE 16750
// unit := CreateCharacter ( prefix & ident ) else
16727: LD_ADDR_VAR 0 5
16731: PUSH
16732: LD_VAR 0 3
16736: PUSH
16737: LD_VAR 0 1
16741: STR
16742: PPUSH
16743: CALL_OW 34
16747: ST_TO_ADDR
16748: GO 16765
// unit := NewCharacter ( ident ) ;
16750: LD_ADDR_VAR 0 5
16754: PUSH
16755: LD_VAR 0 1
16759: PPUSH
16760: CALL_OW 25
16764: ST_TO_ADDR
// result := unit ;
16765: LD_ADDR_VAR 0 4
16769: PUSH
16770: LD_VAR 0 5
16774: ST_TO_ADDR
// end ;
16775: LD_VAR 0 4
16779: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16780: LD_INT 0
16782: PPUSH
16783: PPUSH
// if not side or not nation then
16784: LD_VAR 0 1
16788: NOT
16789: PUSH
16790: LD_VAR 0 2
16794: NOT
16795: OR
16796: IFFALSE 16800
// exit ;
16798: GO 17568
// case nation of nation_american :
16800: LD_VAR 0 2
16804: PUSH
16805: LD_INT 1
16807: DOUBLE
16808: EQUAL
16809: IFTRUE 16813
16811: GO 17027
16813: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16814: LD_ADDR_VAR 0 4
16818: PUSH
16819: LD_INT 35
16821: PUSH
16822: LD_INT 45
16824: PUSH
16825: LD_INT 46
16827: PUSH
16828: LD_INT 47
16830: PUSH
16831: LD_INT 82
16833: PUSH
16834: LD_INT 83
16836: PUSH
16837: LD_INT 84
16839: PUSH
16840: LD_INT 85
16842: PUSH
16843: LD_INT 86
16845: PUSH
16846: LD_INT 1
16848: PUSH
16849: LD_INT 2
16851: PUSH
16852: LD_INT 6
16854: PUSH
16855: LD_INT 15
16857: PUSH
16858: LD_INT 16
16860: PUSH
16861: LD_INT 7
16863: PUSH
16864: LD_INT 12
16866: PUSH
16867: LD_INT 13
16869: PUSH
16870: LD_INT 10
16872: PUSH
16873: LD_INT 14
16875: PUSH
16876: LD_INT 20
16878: PUSH
16879: LD_INT 21
16881: PUSH
16882: LD_INT 22
16884: PUSH
16885: LD_INT 25
16887: PUSH
16888: LD_INT 32
16890: PUSH
16891: LD_INT 27
16893: PUSH
16894: LD_INT 36
16896: PUSH
16897: LD_INT 69
16899: PUSH
16900: LD_INT 39
16902: PUSH
16903: LD_INT 34
16905: PUSH
16906: LD_INT 40
16908: PUSH
16909: LD_INT 48
16911: PUSH
16912: LD_INT 49
16914: PUSH
16915: LD_INT 50
16917: PUSH
16918: LD_INT 51
16920: PUSH
16921: LD_INT 52
16923: PUSH
16924: LD_INT 53
16926: PUSH
16927: LD_INT 54
16929: PUSH
16930: LD_INT 55
16932: PUSH
16933: LD_INT 56
16935: PUSH
16936: LD_INT 57
16938: PUSH
16939: LD_INT 58
16941: PUSH
16942: LD_INT 59
16944: PUSH
16945: LD_INT 60
16947: PUSH
16948: LD_INT 61
16950: PUSH
16951: LD_INT 62
16953: PUSH
16954: LD_INT 80
16956: PUSH
16957: LD_INT 82
16959: PUSH
16960: LD_INT 83
16962: PUSH
16963: LD_INT 84
16965: PUSH
16966: LD_INT 85
16968: PUSH
16969: LD_INT 86
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: ST_TO_ADDR
17025: GO 17492
17027: LD_INT 2
17029: DOUBLE
17030: EQUAL
17031: IFTRUE 17035
17033: GO 17261
17035: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17036: LD_ADDR_VAR 0 4
17040: PUSH
17041: LD_INT 35
17043: PUSH
17044: LD_INT 45
17046: PUSH
17047: LD_INT 46
17049: PUSH
17050: LD_INT 47
17052: PUSH
17053: LD_INT 82
17055: PUSH
17056: LD_INT 83
17058: PUSH
17059: LD_INT 84
17061: PUSH
17062: LD_INT 85
17064: PUSH
17065: LD_INT 87
17067: PUSH
17068: LD_INT 70
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: LD_INT 11
17076: PUSH
17077: LD_INT 3
17079: PUSH
17080: LD_INT 4
17082: PUSH
17083: LD_INT 5
17085: PUSH
17086: LD_INT 6
17088: PUSH
17089: LD_INT 15
17091: PUSH
17092: LD_INT 18
17094: PUSH
17095: LD_INT 7
17097: PUSH
17098: LD_INT 17
17100: PUSH
17101: LD_INT 8
17103: PUSH
17104: LD_INT 20
17106: PUSH
17107: LD_INT 21
17109: PUSH
17110: LD_INT 22
17112: PUSH
17113: LD_INT 72
17115: PUSH
17116: LD_INT 26
17118: PUSH
17119: LD_INT 69
17121: PUSH
17122: LD_INT 39
17124: PUSH
17125: LD_INT 40
17127: PUSH
17128: LD_INT 41
17130: PUSH
17131: LD_INT 42
17133: PUSH
17134: LD_INT 43
17136: PUSH
17137: LD_INT 48
17139: PUSH
17140: LD_INT 49
17142: PUSH
17143: LD_INT 50
17145: PUSH
17146: LD_INT 51
17148: PUSH
17149: LD_INT 52
17151: PUSH
17152: LD_INT 53
17154: PUSH
17155: LD_INT 54
17157: PUSH
17158: LD_INT 55
17160: PUSH
17161: LD_INT 56
17163: PUSH
17164: LD_INT 60
17166: PUSH
17167: LD_INT 61
17169: PUSH
17170: LD_INT 62
17172: PUSH
17173: LD_INT 66
17175: PUSH
17176: LD_INT 67
17178: PUSH
17179: LD_INT 68
17181: PUSH
17182: LD_INT 81
17184: PUSH
17185: LD_INT 82
17187: PUSH
17188: LD_INT 83
17190: PUSH
17191: LD_INT 84
17193: PUSH
17194: LD_INT 85
17196: PUSH
17197: LD_INT 87
17199: PUSH
17200: LD_INT 88
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: ST_TO_ADDR
17259: GO 17492
17261: LD_INT 3
17263: DOUBLE
17264: EQUAL
17265: IFTRUE 17269
17267: GO 17491
17269: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17270: LD_ADDR_VAR 0 4
17274: PUSH
17275: LD_INT 46
17277: PUSH
17278: LD_INT 47
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: LD_INT 2
17286: PUSH
17287: LD_INT 82
17289: PUSH
17290: LD_INT 83
17292: PUSH
17293: LD_INT 84
17295: PUSH
17296: LD_INT 85
17298: PUSH
17299: LD_INT 86
17301: PUSH
17302: LD_INT 11
17304: PUSH
17305: LD_INT 9
17307: PUSH
17308: LD_INT 20
17310: PUSH
17311: LD_INT 19
17313: PUSH
17314: LD_INT 21
17316: PUSH
17317: LD_INT 24
17319: PUSH
17320: LD_INT 22
17322: PUSH
17323: LD_INT 25
17325: PUSH
17326: LD_INT 28
17328: PUSH
17329: LD_INT 29
17331: PUSH
17332: LD_INT 30
17334: PUSH
17335: LD_INT 31
17337: PUSH
17338: LD_INT 37
17340: PUSH
17341: LD_INT 38
17343: PUSH
17344: LD_INT 32
17346: PUSH
17347: LD_INT 27
17349: PUSH
17350: LD_INT 33
17352: PUSH
17353: LD_INT 69
17355: PUSH
17356: LD_INT 39
17358: PUSH
17359: LD_INT 34
17361: PUSH
17362: LD_INT 40
17364: PUSH
17365: LD_INT 71
17367: PUSH
17368: LD_INT 23
17370: PUSH
17371: LD_INT 44
17373: PUSH
17374: LD_INT 48
17376: PUSH
17377: LD_INT 49
17379: PUSH
17380: LD_INT 50
17382: PUSH
17383: LD_INT 51
17385: PUSH
17386: LD_INT 52
17388: PUSH
17389: LD_INT 53
17391: PUSH
17392: LD_INT 54
17394: PUSH
17395: LD_INT 55
17397: PUSH
17398: LD_INT 56
17400: PUSH
17401: LD_INT 57
17403: PUSH
17404: LD_INT 58
17406: PUSH
17407: LD_INT 59
17409: PUSH
17410: LD_INT 63
17412: PUSH
17413: LD_INT 64
17415: PUSH
17416: LD_INT 65
17418: PUSH
17419: LD_INT 82
17421: PUSH
17422: LD_INT 83
17424: PUSH
17425: LD_INT 84
17427: PUSH
17428: LD_INT 85
17430: PUSH
17431: LD_INT 86
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: ST_TO_ADDR
17489: GO 17492
17491: POP
// if state > - 1 and state < 3 then
17492: LD_VAR 0 3
17496: PUSH
17497: LD_INT 1
17499: NEG
17500: GREATER
17501: PUSH
17502: LD_VAR 0 3
17506: PUSH
17507: LD_INT 3
17509: LESS
17510: AND
17511: IFFALSE 17568
// for i in result do
17513: LD_ADDR_VAR 0 5
17517: PUSH
17518: LD_VAR 0 4
17522: PUSH
17523: FOR_IN
17524: IFFALSE 17566
// if GetTech ( i , side ) <> state then
17526: LD_VAR 0 5
17530: PPUSH
17531: LD_VAR 0 1
17535: PPUSH
17536: CALL_OW 321
17540: PUSH
17541: LD_VAR 0 3
17545: NONEQUAL
17546: IFFALSE 17564
// result := result diff i ;
17548: LD_ADDR_VAR 0 4
17552: PUSH
17553: LD_VAR 0 4
17557: PUSH
17558: LD_VAR 0 5
17562: DIFF
17563: ST_TO_ADDR
17564: GO 17523
17566: POP
17567: POP
// end ;
17568: LD_VAR 0 4
17572: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17573: LD_INT 0
17575: PPUSH
17576: PPUSH
17577: PPUSH
// result := true ;
17578: LD_ADDR_VAR 0 3
17582: PUSH
17583: LD_INT 1
17585: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17586: LD_ADDR_VAR 0 5
17590: PUSH
17591: LD_VAR 0 2
17595: PPUSH
17596: CALL_OW 480
17600: ST_TO_ADDR
// if not tmp then
17601: LD_VAR 0 5
17605: NOT
17606: IFFALSE 17610
// exit ;
17608: GO 17659
// for i in tmp do
17610: LD_ADDR_VAR 0 4
17614: PUSH
17615: LD_VAR 0 5
17619: PUSH
17620: FOR_IN
17621: IFFALSE 17657
// if GetTech ( i , side ) <> state_researched then
17623: LD_VAR 0 4
17627: PPUSH
17628: LD_VAR 0 1
17632: PPUSH
17633: CALL_OW 321
17637: PUSH
17638: LD_INT 2
17640: NONEQUAL
17641: IFFALSE 17655
// begin result := false ;
17643: LD_ADDR_VAR 0 3
17647: PUSH
17648: LD_INT 0
17650: ST_TO_ADDR
// exit ;
17651: POP
17652: POP
17653: GO 17659
// end ;
17655: GO 17620
17657: POP
17658: POP
// end ;
17659: LD_VAR 0 3
17663: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17664: LD_INT 0
17666: PPUSH
17667: PPUSH
17668: PPUSH
17669: PPUSH
17670: PPUSH
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
17675: PPUSH
17676: PPUSH
17677: PPUSH
17678: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17679: LD_VAR 0 1
17683: NOT
17684: PUSH
17685: LD_VAR 0 1
17689: PPUSH
17690: CALL_OW 257
17694: PUSH
17695: LD_INT 9
17697: NONEQUAL
17698: OR
17699: IFFALSE 17703
// exit ;
17701: GO 18276
// side := GetSide ( unit ) ;
17703: LD_ADDR_VAR 0 9
17707: PUSH
17708: LD_VAR 0 1
17712: PPUSH
17713: CALL_OW 255
17717: ST_TO_ADDR
// tech_space := tech_spacanom ;
17718: LD_ADDR_VAR 0 12
17722: PUSH
17723: LD_INT 29
17725: ST_TO_ADDR
// tech_time := tech_taurad ;
17726: LD_ADDR_VAR 0 13
17730: PUSH
17731: LD_INT 28
17733: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17734: LD_ADDR_VAR 0 11
17738: PUSH
17739: LD_VAR 0 1
17743: PPUSH
17744: CALL_OW 310
17748: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17749: LD_VAR 0 11
17753: PPUSH
17754: CALL_OW 247
17758: PUSH
17759: LD_INT 2
17761: EQUAL
17762: IFFALSE 17766
// exit ;
17764: GO 18276
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17766: LD_ADDR_VAR 0 8
17770: PUSH
17771: LD_INT 81
17773: PUSH
17774: LD_VAR 0 9
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 3
17785: PUSH
17786: LD_INT 21
17788: PUSH
17789: LD_INT 3
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PPUSH
17804: CALL_OW 69
17808: ST_TO_ADDR
// if not tmp then
17809: LD_VAR 0 8
17813: NOT
17814: IFFALSE 17818
// exit ;
17816: GO 18276
// if in_unit then
17818: LD_VAR 0 11
17822: IFFALSE 17846
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17824: LD_ADDR_VAR 0 10
17828: PUSH
17829: LD_VAR 0 8
17833: PPUSH
17834: LD_VAR 0 11
17838: PPUSH
17839: CALL_OW 74
17843: ST_TO_ADDR
17844: GO 17866
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17846: LD_ADDR_VAR 0 10
17850: PUSH
17851: LD_VAR 0 8
17855: PPUSH
17856: LD_VAR 0 1
17860: PPUSH
17861: CALL_OW 74
17865: ST_TO_ADDR
// if not enemy then
17866: LD_VAR 0 10
17870: NOT
17871: IFFALSE 17875
// exit ;
17873: GO 18276
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17875: LD_VAR 0 11
17879: PUSH
17880: LD_VAR 0 11
17884: PPUSH
17885: LD_VAR 0 10
17889: PPUSH
17890: CALL_OW 296
17894: PUSH
17895: LD_INT 13
17897: GREATER
17898: AND
17899: PUSH
17900: LD_VAR 0 1
17904: PPUSH
17905: LD_VAR 0 10
17909: PPUSH
17910: CALL_OW 296
17914: PUSH
17915: LD_INT 12
17917: GREATER
17918: OR
17919: IFFALSE 17923
// exit ;
17921: GO 18276
// missile := [ 1 ] ;
17923: LD_ADDR_VAR 0 14
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: EMPTY
17932: LIST
17933: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17934: LD_VAR 0 9
17938: PPUSH
17939: LD_VAR 0 12
17943: PPUSH
17944: CALL_OW 325
17948: IFFALSE 17977
// missile := Replace ( missile , missile + 1 , 2 ) ;
17950: LD_ADDR_VAR 0 14
17954: PUSH
17955: LD_VAR 0 14
17959: PPUSH
17960: LD_VAR 0 14
17964: PUSH
17965: LD_INT 1
17967: PLUS
17968: PPUSH
17969: LD_INT 2
17971: PPUSH
17972: CALL_OW 1
17976: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17977: LD_VAR 0 9
17981: PPUSH
17982: LD_VAR 0 13
17986: PPUSH
17987: CALL_OW 325
17991: PUSH
17992: LD_VAR 0 10
17996: PPUSH
17997: CALL_OW 255
18001: PPUSH
18002: LD_VAR 0 13
18006: PPUSH
18007: CALL_OW 325
18011: NOT
18012: AND
18013: IFFALSE 18042
// missile := Replace ( missile , missile + 1 , 3 ) ;
18015: LD_ADDR_VAR 0 14
18019: PUSH
18020: LD_VAR 0 14
18024: PPUSH
18025: LD_VAR 0 14
18029: PUSH
18030: LD_INT 1
18032: PLUS
18033: PPUSH
18034: LD_INT 3
18036: PPUSH
18037: CALL_OW 1
18041: ST_TO_ADDR
// if missile < 2 then
18042: LD_VAR 0 14
18046: PUSH
18047: LD_INT 2
18049: LESS
18050: IFFALSE 18054
// exit ;
18052: GO 18276
// x := GetX ( enemy ) ;
18054: LD_ADDR_VAR 0 4
18058: PUSH
18059: LD_VAR 0 10
18063: PPUSH
18064: CALL_OW 250
18068: ST_TO_ADDR
// y := GetY ( enemy ) ;
18069: LD_ADDR_VAR 0 5
18073: PUSH
18074: LD_VAR 0 10
18078: PPUSH
18079: CALL_OW 251
18083: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18084: LD_ADDR_VAR 0 6
18088: PUSH
18089: LD_VAR 0 4
18093: PUSH
18094: LD_INT 1
18096: NEG
18097: PPUSH
18098: LD_INT 1
18100: PPUSH
18101: CALL_OW 12
18105: PLUS
18106: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18107: LD_ADDR_VAR 0 7
18111: PUSH
18112: LD_VAR 0 5
18116: PUSH
18117: LD_INT 1
18119: NEG
18120: PPUSH
18121: LD_INT 1
18123: PPUSH
18124: CALL_OW 12
18128: PLUS
18129: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18130: LD_VAR 0 6
18134: PPUSH
18135: LD_VAR 0 7
18139: PPUSH
18140: CALL_OW 488
18144: NOT
18145: IFFALSE 18167
// begin _x := x ;
18147: LD_ADDR_VAR 0 6
18151: PUSH
18152: LD_VAR 0 4
18156: ST_TO_ADDR
// _y := y ;
18157: LD_ADDR_VAR 0 7
18161: PUSH
18162: LD_VAR 0 5
18166: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18167: LD_ADDR_VAR 0 3
18171: PUSH
18172: LD_INT 1
18174: PPUSH
18175: LD_VAR 0 14
18179: PPUSH
18180: CALL_OW 12
18184: ST_TO_ADDR
// case i of 1 :
18185: LD_VAR 0 3
18189: PUSH
18190: LD_INT 1
18192: DOUBLE
18193: EQUAL
18194: IFTRUE 18198
18196: GO 18215
18198: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18199: LD_VAR 0 1
18203: PPUSH
18204: LD_VAR 0 10
18208: PPUSH
18209: CALL_OW 115
18213: GO 18276
18215: LD_INT 2
18217: DOUBLE
18218: EQUAL
18219: IFTRUE 18223
18221: GO 18245
18223: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18224: LD_VAR 0 1
18228: PPUSH
18229: LD_VAR 0 6
18233: PPUSH
18234: LD_VAR 0 7
18238: PPUSH
18239: CALL_OW 153
18243: GO 18276
18245: LD_INT 3
18247: DOUBLE
18248: EQUAL
18249: IFTRUE 18253
18251: GO 18275
18253: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18254: LD_VAR 0 1
18258: PPUSH
18259: LD_VAR 0 6
18263: PPUSH
18264: LD_VAR 0 7
18268: PPUSH
18269: CALL_OW 154
18273: GO 18276
18275: POP
// end ;
18276: LD_VAR 0 2
18280: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18281: LD_INT 0
18283: PPUSH
18284: PPUSH
18285: PPUSH
18286: PPUSH
18287: PPUSH
18288: PPUSH
// if not unit or not building then
18289: LD_VAR 0 1
18293: NOT
18294: PUSH
18295: LD_VAR 0 2
18299: NOT
18300: OR
18301: IFFALSE 18305
// exit ;
18303: GO 18463
// x := GetX ( building ) ;
18305: LD_ADDR_VAR 0 5
18309: PUSH
18310: LD_VAR 0 2
18314: PPUSH
18315: CALL_OW 250
18319: ST_TO_ADDR
// y := GetY ( building ) ;
18320: LD_ADDR_VAR 0 6
18324: PUSH
18325: LD_VAR 0 2
18329: PPUSH
18330: CALL_OW 251
18334: ST_TO_ADDR
// for i = 0 to 5 do
18335: LD_ADDR_VAR 0 4
18339: PUSH
18340: DOUBLE
18341: LD_INT 0
18343: DEC
18344: ST_TO_ADDR
18345: LD_INT 5
18347: PUSH
18348: FOR_TO
18349: IFFALSE 18461
// begin _x := ShiftX ( x , i , 3 ) ;
18351: LD_ADDR_VAR 0 7
18355: PUSH
18356: LD_VAR 0 5
18360: PPUSH
18361: LD_VAR 0 4
18365: PPUSH
18366: LD_INT 3
18368: PPUSH
18369: CALL_OW 272
18373: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18374: LD_ADDR_VAR 0 8
18378: PUSH
18379: LD_VAR 0 6
18383: PPUSH
18384: LD_VAR 0 4
18388: PPUSH
18389: LD_INT 3
18391: PPUSH
18392: CALL_OW 273
18396: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18397: LD_VAR 0 7
18401: PPUSH
18402: LD_VAR 0 8
18406: PPUSH
18407: CALL_OW 488
18411: NOT
18412: IFFALSE 18416
// continue ;
18414: GO 18348
// if HexInfo ( _x , _y ) = 0 then
18416: LD_VAR 0 7
18420: PPUSH
18421: LD_VAR 0 8
18425: PPUSH
18426: CALL_OW 428
18430: PUSH
18431: LD_INT 0
18433: EQUAL
18434: IFFALSE 18459
// begin ComMoveXY ( unit , _x , _y ) ;
18436: LD_VAR 0 1
18440: PPUSH
18441: LD_VAR 0 7
18445: PPUSH
18446: LD_VAR 0 8
18450: PPUSH
18451: CALL_OW 111
// exit ;
18455: POP
18456: POP
18457: GO 18463
// end ; end ;
18459: GO 18348
18461: POP
18462: POP
// end ;
18463: LD_VAR 0 3
18467: RET
// export function ScanBase ( side , base_area ) ; begin
18468: LD_INT 0
18470: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18471: LD_ADDR_VAR 0 3
18475: PUSH
18476: LD_VAR 0 2
18480: PPUSH
18481: LD_INT 81
18483: PUSH
18484: LD_VAR 0 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PPUSH
18493: CALL_OW 70
18497: ST_TO_ADDR
// end ;
18498: LD_VAR 0 3
18502: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18503: LD_INT 0
18505: PPUSH
18506: PPUSH
18507: PPUSH
18508: PPUSH
// result := false ;
18509: LD_ADDR_VAR 0 2
18513: PUSH
18514: LD_INT 0
18516: ST_TO_ADDR
// side := GetSide ( unit ) ;
18517: LD_ADDR_VAR 0 3
18521: PUSH
18522: LD_VAR 0 1
18526: PPUSH
18527: CALL_OW 255
18531: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18532: LD_ADDR_VAR 0 4
18536: PUSH
18537: LD_VAR 0 1
18541: PPUSH
18542: CALL_OW 248
18546: ST_TO_ADDR
// case nat of 1 :
18547: LD_VAR 0 4
18551: PUSH
18552: LD_INT 1
18554: DOUBLE
18555: EQUAL
18556: IFTRUE 18560
18558: GO 18571
18560: POP
// tech := tech_lassight ; 2 :
18561: LD_ADDR_VAR 0 5
18565: PUSH
18566: LD_INT 12
18568: ST_TO_ADDR
18569: GO 18610
18571: LD_INT 2
18573: DOUBLE
18574: EQUAL
18575: IFTRUE 18579
18577: GO 18590
18579: POP
// tech := tech_mortar ; 3 :
18580: LD_ADDR_VAR 0 5
18584: PUSH
18585: LD_INT 41
18587: ST_TO_ADDR
18588: GO 18610
18590: LD_INT 3
18592: DOUBLE
18593: EQUAL
18594: IFTRUE 18598
18596: GO 18609
18598: POP
// tech := tech_bazooka ; end ;
18599: LD_ADDR_VAR 0 5
18603: PUSH
18604: LD_INT 44
18606: ST_TO_ADDR
18607: GO 18610
18609: POP
// if Researched ( side , tech ) then
18610: LD_VAR 0 3
18614: PPUSH
18615: LD_VAR 0 5
18619: PPUSH
18620: CALL_OW 325
18624: IFFALSE 18651
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18626: LD_ADDR_VAR 0 2
18630: PUSH
18631: LD_INT 5
18633: PUSH
18634: LD_INT 8
18636: PUSH
18637: LD_INT 9
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: LIST
18644: PUSH
18645: LD_VAR 0 4
18649: ARRAY
18650: ST_TO_ADDR
// end ;
18651: LD_VAR 0 2
18655: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18656: LD_INT 0
18658: PPUSH
18659: PPUSH
18660: PPUSH
// if not mines then
18661: LD_VAR 0 2
18665: NOT
18666: IFFALSE 18670
// exit ;
18668: GO 18814
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18670: LD_ADDR_VAR 0 5
18674: PUSH
18675: LD_INT 81
18677: PUSH
18678: LD_VAR 0 1
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 3
18689: PUSH
18690: LD_INT 21
18692: PUSH
18693: LD_INT 3
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PPUSH
18708: CALL_OW 69
18712: ST_TO_ADDR
// for i in mines do
18713: LD_ADDR_VAR 0 4
18717: PUSH
18718: LD_VAR 0 2
18722: PUSH
18723: FOR_IN
18724: IFFALSE 18812
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18726: LD_VAR 0 4
18730: PUSH
18731: LD_INT 1
18733: ARRAY
18734: PPUSH
18735: LD_VAR 0 4
18739: PUSH
18740: LD_INT 2
18742: ARRAY
18743: PPUSH
18744: CALL_OW 458
18748: NOT
18749: IFFALSE 18753
// continue ;
18751: GO 18723
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18753: LD_VAR 0 4
18757: PUSH
18758: LD_INT 1
18760: ARRAY
18761: PPUSH
18762: LD_VAR 0 4
18766: PUSH
18767: LD_INT 2
18769: ARRAY
18770: PPUSH
18771: CALL_OW 428
18775: PUSH
18776: LD_VAR 0 5
18780: IN
18781: IFFALSE 18810
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18783: LD_VAR 0 4
18787: PUSH
18788: LD_INT 1
18790: ARRAY
18791: PPUSH
18792: LD_VAR 0 4
18796: PUSH
18797: LD_INT 2
18799: ARRAY
18800: PPUSH
18801: LD_VAR 0 1
18805: PPUSH
18806: CALL_OW 456
// end ;
18810: GO 18723
18812: POP
18813: POP
// end ;
18814: LD_VAR 0 3
18818: RET
// export function Count ( array ) ; begin
18819: LD_INT 0
18821: PPUSH
// result := array + 0 ;
18822: LD_ADDR_VAR 0 2
18826: PUSH
18827: LD_VAR 0 1
18831: PUSH
18832: LD_INT 0
18834: PLUS
18835: ST_TO_ADDR
// end ;
18836: LD_VAR 0 2
18840: RET
// export function IsEmpty ( building ) ; begin
18841: LD_INT 0
18843: PPUSH
// if not building then
18844: LD_VAR 0 1
18848: NOT
18849: IFFALSE 18853
// exit ;
18851: GO 18896
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18853: LD_ADDR_VAR 0 2
18857: PUSH
18858: LD_VAR 0 1
18862: PUSH
18863: LD_INT 22
18865: PUSH
18866: LD_VAR 0 1
18870: PPUSH
18871: CALL_OW 255
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 58
18882: PUSH
18883: EMPTY
18884: LIST
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PPUSH
18890: CALL_OW 69
18894: IN
18895: ST_TO_ADDR
// end ;
18896: LD_VAR 0 2
18900: RET
// export function IsNotFull ( building ) ; var places ; begin
18901: LD_INT 0
18903: PPUSH
18904: PPUSH
// if not building then
18905: LD_VAR 0 1
18909: NOT
18910: IFFALSE 18914
// exit ;
18912: GO 18942
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18914: LD_ADDR_VAR 0 2
18918: PUSH
18919: LD_VAR 0 1
18923: PPUSH
18924: LD_INT 3
18926: PUSH
18927: LD_INT 62
18929: PUSH
18930: EMPTY
18931: LIST
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PPUSH
18937: CALL_OW 72
18941: ST_TO_ADDR
// end ;
18942: LD_VAR 0 2
18946: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18947: LD_INT 0
18949: PPUSH
18950: PPUSH
18951: PPUSH
18952: PPUSH
// tmp := [ ] ;
18953: LD_ADDR_VAR 0 3
18957: PUSH
18958: EMPTY
18959: ST_TO_ADDR
// list := [ ] ;
18960: LD_ADDR_VAR 0 5
18964: PUSH
18965: EMPTY
18966: ST_TO_ADDR
// for i = 16 to 25 do
18967: LD_ADDR_VAR 0 4
18971: PUSH
18972: DOUBLE
18973: LD_INT 16
18975: DEC
18976: ST_TO_ADDR
18977: LD_INT 25
18979: PUSH
18980: FOR_TO
18981: IFFALSE 19054
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18983: LD_ADDR_VAR 0 3
18987: PUSH
18988: LD_VAR 0 3
18992: PUSH
18993: LD_INT 22
18995: PUSH
18996: LD_VAR 0 1
19000: PPUSH
19001: CALL_OW 255
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 91
19012: PUSH
19013: LD_VAR 0 1
19017: PUSH
19018: LD_INT 6
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 30
19028: PUSH
19029: LD_VAR 0 4
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: PUSH
19043: EMPTY
19044: LIST
19045: PPUSH
19046: CALL_OW 69
19050: ADD
19051: ST_TO_ADDR
19052: GO 18980
19054: POP
19055: POP
// for i = 1 to tmp do
19056: LD_ADDR_VAR 0 4
19060: PUSH
19061: DOUBLE
19062: LD_INT 1
19064: DEC
19065: ST_TO_ADDR
19066: LD_VAR 0 3
19070: PUSH
19071: FOR_TO
19072: IFFALSE 19160
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19074: LD_ADDR_VAR 0 5
19078: PUSH
19079: LD_VAR 0 5
19083: PUSH
19084: LD_VAR 0 3
19088: PUSH
19089: LD_VAR 0 4
19093: ARRAY
19094: PPUSH
19095: CALL_OW 266
19099: PUSH
19100: LD_VAR 0 3
19104: PUSH
19105: LD_VAR 0 4
19109: ARRAY
19110: PPUSH
19111: CALL_OW 250
19115: PUSH
19116: LD_VAR 0 3
19120: PUSH
19121: LD_VAR 0 4
19125: ARRAY
19126: PPUSH
19127: CALL_OW 251
19131: PUSH
19132: LD_VAR 0 3
19136: PUSH
19137: LD_VAR 0 4
19141: ARRAY
19142: PPUSH
19143: CALL_OW 254
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: PUSH
19154: EMPTY
19155: LIST
19156: ADD
19157: ST_TO_ADDR
19158: GO 19071
19160: POP
19161: POP
// result := list ;
19162: LD_ADDR_VAR 0 2
19166: PUSH
19167: LD_VAR 0 5
19171: ST_TO_ADDR
// end ;
19172: LD_VAR 0 2
19176: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19177: LD_INT 0
19179: PPUSH
19180: PPUSH
19181: PPUSH
19182: PPUSH
19183: PPUSH
19184: PPUSH
19185: PPUSH
// if not factory then
19186: LD_VAR 0 1
19190: NOT
19191: IFFALSE 19195
// exit ;
19193: GO 19788
// if control = control_apeman then
19195: LD_VAR 0 4
19199: PUSH
19200: LD_INT 5
19202: EQUAL
19203: IFFALSE 19312
// begin tmp := UnitsInside ( factory ) ;
19205: LD_ADDR_VAR 0 8
19209: PUSH
19210: LD_VAR 0 1
19214: PPUSH
19215: CALL_OW 313
19219: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19220: LD_VAR 0 8
19224: PPUSH
19225: LD_INT 25
19227: PUSH
19228: LD_INT 12
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PPUSH
19235: CALL_OW 72
19239: NOT
19240: IFFALSE 19250
// control := control_manual ;
19242: LD_ADDR_VAR 0 4
19246: PUSH
19247: LD_INT 1
19249: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19250: LD_ADDR_VAR 0 8
19254: PUSH
19255: LD_VAR 0 1
19259: PPUSH
19260: CALL 18947 0 1
19264: ST_TO_ADDR
// if tmp then
19265: LD_VAR 0 8
19269: IFFALSE 19312
// begin for i in tmp do
19271: LD_ADDR_VAR 0 7
19275: PUSH
19276: LD_VAR 0 8
19280: PUSH
19281: FOR_IN
19282: IFFALSE 19310
// if i [ 1 ] = b_ext_radio then
19284: LD_VAR 0 7
19288: PUSH
19289: LD_INT 1
19291: ARRAY
19292: PUSH
19293: LD_INT 22
19295: EQUAL
19296: IFFALSE 19308
// begin control := control_remote ;
19298: LD_ADDR_VAR 0 4
19302: PUSH
19303: LD_INT 2
19305: ST_TO_ADDR
// break ;
19306: GO 19310
// end ;
19308: GO 19281
19310: POP
19311: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19312: LD_VAR 0 1
19316: PPUSH
19317: LD_VAR 0 2
19321: PPUSH
19322: LD_VAR 0 3
19326: PPUSH
19327: LD_VAR 0 4
19331: PPUSH
19332: LD_VAR 0 5
19336: PPUSH
19337: CALL_OW 448
19341: IFFALSE 19376
// begin result := [ chassis , engine , control , weapon ] ;
19343: LD_ADDR_VAR 0 6
19347: PUSH
19348: LD_VAR 0 2
19352: PUSH
19353: LD_VAR 0 3
19357: PUSH
19358: LD_VAR 0 4
19362: PUSH
19363: LD_VAR 0 5
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: ST_TO_ADDR
// exit ;
19374: GO 19788
// end ; _chassis := AvailableChassisList ( factory ) ;
19376: LD_ADDR_VAR 0 9
19380: PUSH
19381: LD_VAR 0 1
19385: PPUSH
19386: CALL_OW 475
19390: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19391: LD_ADDR_VAR 0 11
19395: PUSH
19396: LD_VAR 0 1
19400: PPUSH
19401: CALL_OW 476
19405: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19406: LD_ADDR_VAR 0 12
19410: PUSH
19411: LD_VAR 0 1
19415: PPUSH
19416: CALL_OW 477
19420: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19421: LD_ADDR_VAR 0 10
19425: PUSH
19426: LD_VAR 0 1
19430: PPUSH
19431: CALL_OW 478
19435: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19436: LD_VAR 0 9
19440: NOT
19441: PUSH
19442: LD_VAR 0 11
19446: NOT
19447: OR
19448: PUSH
19449: LD_VAR 0 12
19453: NOT
19454: OR
19455: PUSH
19456: LD_VAR 0 10
19460: NOT
19461: OR
19462: IFFALSE 19497
// begin result := [ chassis , engine , control , weapon ] ;
19464: LD_ADDR_VAR 0 6
19468: PUSH
19469: LD_VAR 0 2
19473: PUSH
19474: LD_VAR 0 3
19478: PUSH
19479: LD_VAR 0 4
19483: PUSH
19484: LD_VAR 0 5
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: ST_TO_ADDR
// exit ;
19495: GO 19788
// end ; if not chassis in _chassis then
19497: LD_VAR 0 2
19501: PUSH
19502: LD_VAR 0 9
19506: IN
19507: NOT
19508: IFFALSE 19534
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19510: LD_ADDR_VAR 0 2
19514: PUSH
19515: LD_VAR 0 9
19519: PUSH
19520: LD_INT 1
19522: PPUSH
19523: LD_VAR 0 9
19527: PPUSH
19528: CALL_OW 12
19532: ARRAY
19533: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19534: LD_VAR 0 2
19538: PPUSH
19539: LD_VAR 0 3
19543: PPUSH
19544: CALL 19793 0 2
19548: NOT
19549: IFFALSE 19608
// repeat engine := _engine [ 1 ] ;
19551: LD_ADDR_VAR 0 3
19555: PUSH
19556: LD_VAR 0 11
19560: PUSH
19561: LD_INT 1
19563: ARRAY
19564: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19565: LD_ADDR_VAR 0 11
19569: PUSH
19570: LD_VAR 0 11
19574: PPUSH
19575: LD_INT 1
19577: PPUSH
19578: CALL_OW 3
19582: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19583: LD_VAR 0 2
19587: PPUSH
19588: LD_VAR 0 3
19592: PPUSH
19593: CALL 19793 0 2
19597: PUSH
19598: LD_VAR 0 11
19602: PUSH
19603: EMPTY
19604: EQUAL
19605: OR
19606: IFFALSE 19551
// if not control in _control then
19608: LD_VAR 0 4
19612: PUSH
19613: LD_VAR 0 12
19617: IN
19618: NOT
19619: IFFALSE 19645
// control := _control [ rand ( 1 , _control ) ] ;
19621: LD_ADDR_VAR 0 4
19625: PUSH
19626: LD_VAR 0 12
19630: PUSH
19631: LD_INT 1
19633: PPUSH
19634: LD_VAR 0 12
19638: PPUSH
19639: CALL_OW 12
19643: ARRAY
19644: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19645: LD_VAR 0 2
19649: PPUSH
19650: LD_VAR 0 5
19654: PPUSH
19655: CALL 20013 0 2
19659: NOT
19660: IFFALSE 19719
// repeat weapon := _weapon [ 1 ] ;
19662: LD_ADDR_VAR 0 5
19666: PUSH
19667: LD_VAR 0 10
19671: PUSH
19672: LD_INT 1
19674: ARRAY
19675: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19676: LD_ADDR_VAR 0 10
19680: PUSH
19681: LD_VAR 0 10
19685: PPUSH
19686: LD_INT 1
19688: PPUSH
19689: CALL_OW 3
19693: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19694: LD_VAR 0 2
19698: PPUSH
19699: LD_VAR 0 5
19703: PPUSH
19704: CALL 20013 0 2
19708: PUSH
19709: LD_VAR 0 10
19713: PUSH
19714: EMPTY
19715: EQUAL
19716: OR
19717: IFFALSE 19662
// result := [ ] ;
19719: LD_ADDR_VAR 0 6
19723: PUSH
19724: EMPTY
19725: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19726: LD_VAR 0 1
19730: PPUSH
19731: LD_VAR 0 2
19735: PPUSH
19736: LD_VAR 0 3
19740: PPUSH
19741: LD_VAR 0 4
19745: PPUSH
19746: LD_VAR 0 5
19750: PPUSH
19751: CALL_OW 448
19755: IFFALSE 19788
// result := [ chassis , engine , control , weapon ] ;
19757: LD_ADDR_VAR 0 6
19761: PUSH
19762: LD_VAR 0 2
19766: PUSH
19767: LD_VAR 0 3
19771: PUSH
19772: LD_VAR 0 4
19776: PUSH
19777: LD_VAR 0 5
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: ST_TO_ADDR
// end ;
19788: LD_VAR 0 6
19792: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19793: LD_INT 0
19795: PPUSH
// if not chassis or not engine then
19796: LD_VAR 0 1
19800: NOT
19801: PUSH
19802: LD_VAR 0 2
19806: NOT
19807: OR
19808: IFFALSE 19812
// exit ;
19810: GO 20008
// case engine of engine_solar :
19812: LD_VAR 0 2
19816: PUSH
19817: LD_INT 2
19819: DOUBLE
19820: EQUAL
19821: IFTRUE 19825
19823: GO 19863
19825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19826: LD_ADDR_VAR 0 3
19830: PUSH
19831: LD_INT 11
19833: PUSH
19834: LD_INT 12
19836: PUSH
19837: LD_INT 13
19839: PUSH
19840: LD_INT 14
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: LD_INT 3
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: ST_TO_ADDR
19861: GO 19992
19863: LD_INT 1
19865: DOUBLE
19866: EQUAL
19867: IFTRUE 19871
19869: GO 19933
19871: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19872: LD_ADDR_VAR 0 3
19876: PUSH
19877: LD_INT 11
19879: PUSH
19880: LD_INT 12
19882: PUSH
19883: LD_INT 13
19885: PUSH
19886: LD_INT 14
19888: PUSH
19889: LD_INT 1
19891: PUSH
19892: LD_INT 2
19894: PUSH
19895: LD_INT 3
19897: PUSH
19898: LD_INT 4
19900: PUSH
19901: LD_INT 5
19903: PUSH
19904: LD_INT 21
19906: PUSH
19907: LD_INT 23
19909: PUSH
19910: LD_INT 22
19912: PUSH
19913: LD_INT 24
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: ST_TO_ADDR
19931: GO 19992
19933: LD_INT 3
19935: DOUBLE
19936: EQUAL
19937: IFTRUE 19941
19939: GO 19991
19941: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19942: LD_ADDR_VAR 0 3
19946: PUSH
19947: LD_INT 13
19949: PUSH
19950: LD_INT 14
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: LD_INT 3
19958: PUSH
19959: LD_INT 4
19961: PUSH
19962: LD_INT 5
19964: PUSH
19965: LD_INT 21
19967: PUSH
19968: LD_INT 22
19970: PUSH
19971: LD_INT 23
19973: PUSH
19974: LD_INT 24
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: ST_TO_ADDR
19989: GO 19992
19991: POP
// result := ( chassis in result ) ;
19992: LD_ADDR_VAR 0 3
19996: PUSH
19997: LD_VAR 0 1
20001: PUSH
20002: LD_VAR 0 3
20006: IN
20007: ST_TO_ADDR
// end ;
20008: LD_VAR 0 3
20012: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20013: LD_INT 0
20015: PPUSH
// if not chassis or not weapon then
20016: LD_VAR 0 1
20020: NOT
20021: PUSH
20022: LD_VAR 0 2
20026: NOT
20027: OR
20028: IFFALSE 20032
// exit ;
20030: GO 21092
// case weapon of us_machine_gun :
20032: LD_VAR 0 2
20036: PUSH
20037: LD_INT 2
20039: DOUBLE
20040: EQUAL
20041: IFTRUE 20045
20043: GO 20075
20045: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_INT 1
20053: PUSH
20054: LD_INT 2
20056: PUSH
20057: LD_INT 3
20059: PUSH
20060: LD_INT 4
20062: PUSH
20063: LD_INT 5
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: ST_TO_ADDR
20073: GO 21076
20075: LD_INT 3
20077: DOUBLE
20078: EQUAL
20079: IFTRUE 20083
20081: GO 20113
20083: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20084: LD_ADDR_VAR 0 3
20088: PUSH
20089: LD_INT 1
20091: PUSH
20092: LD_INT 2
20094: PUSH
20095: LD_INT 3
20097: PUSH
20098: LD_INT 4
20100: PUSH
20101: LD_INT 5
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: ST_TO_ADDR
20111: GO 21076
20113: LD_INT 11
20115: DOUBLE
20116: EQUAL
20117: IFTRUE 20121
20119: GO 20151
20121: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20122: LD_ADDR_VAR 0 3
20126: PUSH
20127: LD_INT 1
20129: PUSH
20130: LD_INT 2
20132: PUSH
20133: LD_INT 3
20135: PUSH
20136: LD_INT 4
20138: PUSH
20139: LD_INT 5
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: ST_TO_ADDR
20149: GO 21076
20151: LD_INT 4
20153: DOUBLE
20154: EQUAL
20155: IFTRUE 20159
20157: GO 20185
20159: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20160: LD_ADDR_VAR 0 3
20164: PUSH
20165: LD_INT 2
20167: PUSH
20168: LD_INT 3
20170: PUSH
20171: LD_INT 4
20173: PUSH
20174: LD_INT 5
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: ST_TO_ADDR
20183: GO 21076
20185: LD_INT 5
20187: DOUBLE
20188: EQUAL
20189: IFTRUE 20193
20191: GO 20219
20193: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20194: LD_ADDR_VAR 0 3
20198: PUSH
20199: LD_INT 2
20201: PUSH
20202: LD_INT 3
20204: PUSH
20205: LD_INT 4
20207: PUSH
20208: LD_INT 5
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: ST_TO_ADDR
20217: GO 21076
20219: LD_INT 9
20221: DOUBLE
20222: EQUAL
20223: IFTRUE 20227
20225: GO 20253
20227: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20228: LD_ADDR_VAR 0 3
20232: PUSH
20233: LD_INT 2
20235: PUSH
20236: LD_INT 3
20238: PUSH
20239: LD_INT 4
20241: PUSH
20242: LD_INT 5
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: ST_TO_ADDR
20251: GO 21076
20253: LD_INT 7
20255: DOUBLE
20256: EQUAL
20257: IFTRUE 20261
20259: GO 20287
20261: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20262: LD_ADDR_VAR 0 3
20266: PUSH
20267: LD_INT 2
20269: PUSH
20270: LD_INT 3
20272: PUSH
20273: LD_INT 4
20275: PUSH
20276: LD_INT 5
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: ST_TO_ADDR
20285: GO 21076
20287: LD_INT 12
20289: DOUBLE
20290: EQUAL
20291: IFTRUE 20295
20293: GO 20321
20295: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20296: LD_ADDR_VAR 0 3
20300: PUSH
20301: LD_INT 2
20303: PUSH
20304: LD_INT 3
20306: PUSH
20307: LD_INT 4
20309: PUSH
20310: LD_INT 5
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: ST_TO_ADDR
20319: GO 21076
20321: LD_INT 13
20323: DOUBLE
20324: EQUAL
20325: IFTRUE 20329
20327: GO 20355
20329: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20330: LD_ADDR_VAR 0 3
20334: PUSH
20335: LD_INT 2
20337: PUSH
20338: LD_INT 3
20340: PUSH
20341: LD_INT 4
20343: PUSH
20344: LD_INT 5
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: ST_TO_ADDR
20353: GO 21076
20355: LD_INT 14
20357: DOUBLE
20358: EQUAL
20359: IFTRUE 20363
20361: GO 20381
20363: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20364: LD_ADDR_VAR 0 3
20368: PUSH
20369: LD_INT 4
20371: PUSH
20372: LD_INT 5
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: ST_TO_ADDR
20379: GO 21076
20381: LD_INT 6
20383: DOUBLE
20384: EQUAL
20385: IFTRUE 20389
20387: GO 20407
20389: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20390: LD_ADDR_VAR 0 3
20394: PUSH
20395: LD_INT 4
20397: PUSH
20398: LD_INT 5
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: ST_TO_ADDR
20405: GO 21076
20407: LD_INT 10
20409: DOUBLE
20410: EQUAL
20411: IFTRUE 20415
20413: GO 20433
20415: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20416: LD_ADDR_VAR 0 3
20420: PUSH
20421: LD_INT 4
20423: PUSH
20424: LD_INT 5
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: ST_TO_ADDR
20431: GO 21076
20433: LD_INT 22
20435: DOUBLE
20436: EQUAL
20437: IFTRUE 20441
20439: GO 20467
20441: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20442: LD_ADDR_VAR 0 3
20446: PUSH
20447: LD_INT 11
20449: PUSH
20450: LD_INT 12
20452: PUSH
20453: LD_INT 13
20455: PUSH
20456: LD_INT 14
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: ST_TO_ADDR
20465: GO 21076
20467: LD_INT 23
20469: DOUBLE
20470: EQUAL
20471: IFTRUE 20475
20473: GO 20501
20475: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20476: LD_ADDR_VAR 0 3
20480: PUSH
20481: LD_INT 11
20483: PUSH
20484: LD_INT 12
20486: PUSH
20487: LD_INT 13
20489: PUSH
20490: LD_INT 14
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: ST_TO_ADDR
20499: GO 21076
20501: LD_INT 24
20503: DOUBLE
20504: EQUAL
20505: IFTRUE 20509
20507: GO 20535
20509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20510: LD_ADDR_VAR 0 3
20514: PUSH
20515: LD_INT 11
20517: PUSH
20518: LD_INT 12
20520: PUSH
20521: LD_INT 13
20523: PUSH
20524: LD_INT 14
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: ST_TO_ADDR
20533: GO 21076
20535: LD_INT 30
20537: DOUBLE
20538: EQUAL
20539: IFTRUE 20543
20541: GO 20569
20543: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20544: LD_ADDR_VAR 0 3
20548: PUSH
20549: LD_INT 11
20551: PUSH
20552: LD_INT 12
20554: PUSH
20555: LD_INT 13
20557: PUSH
20558: LD_INT 14
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: ST_TO_ADDR
20567: GO 21076
20569: LD_INT 25
20571: DOUBLE
20572: EQUAL
20573: IFTRUE 20577
20575: GO 20595
20577: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20578: LD_ADDR_VAR 0 3
20582: PUSH
20583: LD_INT 13
20585: PUSH
20586: LD_INT 14
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: ST_TO_ADDR
20593: GO 21076
20595: LD_INT 27
20597: DOUBLE
20598: EQUAL
20599: IFTRUE 20603
20601: GO 20621
20603: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20604: LD_ADDR_VAR 0 3
20608: PUSH
20609: LD_INT 13
20611: PUSH
20612: LD_INT 14
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: ST_TO_ADDR
20619: GO 21076
20621: LD_INT 92
20623: DOUBLE
20624: EQUAL
20625: IFTRUE 20629
20627: GO 20655
20629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20630: LD_ADDR_VAR 0 3
20634: PUSH
20635: LD_INT 11
20637: PUSH
20638: LD_INT 12
20640: PUSH
20641: LD_INT 13
20643: PUSH
20644: LD_INT 14
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: ST_TO_ADDR
20653: GO 21076
20655: LD_INT 28
20657: DOUBLE
20658: EQUAL
20659: IFTRUE 20663
20661: GO 20681
20663: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20664: LD_ADDR_VAR 0 3
20668: PUSH
20669: LD_INT 13
20671: PUSH
20672: LD_INT 14
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: ST_TO_ADDR
20679: GO 21076
20681: LD_INT 29
20683: DOUBLE
20684: EQUAL
20685: IFTRUE 20689
20687: GO 20707
20689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20690: LD_ADDR_VAR 0 3
20694: PUSH
20695: LD_INT 13
20697: PUSH
20698: LD_INT 14
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: ST_TO_ADDR
20705: GO 21076
20707: LD_INT 31
20709: DOUBLE
20710: EQUAL
20711: IFTRUE 20715
20713: GO 20733
20715: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20716: LD_ADDR_VAR 0 3
20720: PUSH
20721: LD_INT 13
20723: PUSH
20724: LD_INT 14
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: ST_TO_ADDR
20731: GO 21076
20733: LD_INT 26
20735: DOUBLE
20736: EQUAL
20737: IFTRUE 20741
20739: GO 20759
20741: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20742: LD_ADDR_VAR 0 3
20746: PUSH
20747: LD_INT 13
20749: PUSH
20750: LD_INT 14
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: ST_TO_ADDR
20757: GO 21076
20759: LD_INT 42
20761: DOUBLE
20762: EQUAL
20763: IFTRUE 20767
20765: GO 20793
20767: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20768: LD_ADDR_VAR 0 3
20772: PUSH
20773: LD_INT 21
20775: PUSH
20776: LD_INT 22
20778: PUSH
20779: LD_INT 23
20781: PUSH
20782: LD_INT 24
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: ST_TO_ADDR
20791: GO 21076
20793: LD_INT 43
20795: DOUBLE
20796: EQUAL
20797: IFTRUE 20801
20799: GO 20827
20801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20802: LD_ADDR_VAR 0 3
20806: PUSH
20807: LD_INT 21
20809: PUSH
20810: LD_INT 22
20812: PUSH
20813: LD_INT 23
20815: PUSH
20816: LD_INT 24
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: ST_TO_ADDR
20825: GO 21076
20827: LD_INT 44
20829: DOUBLE
20830: EQUAL
20831: IFTRUE 20835
20833: GO 20861
20835: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20836: LD_ADDR_VAR 0 3
20840: PUSH
20841: LD_INT 21
20843: PUSH
20844: LD_INT 22
20846: PUSH
20847: LD_INT 23
20849: PUSH
20850: LD_INT 24
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: ST_TO_ADDR
20859: GO 21076
20861: LD_INT 45
20863: DOUBLE
20864: EQUAL
20865: IFTRUE 20869
20867: GO 20895
20869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20870: LD_ADDR_VAR 0 3
20874: PUSH
20875: LD_INT 21
20877: PUSH
20878: LD_INT 22
20880: PUSH
20881: LD_INT 23
20883: PUSH
20884: LD_INT 24
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: ST_TO_ADDR
20893: GO 21076
20895: LD_INT 49
20897: DOUBLE
20898: EQUAL
20899: IFTRUE 20903
20901: GO 20929
20903: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20904: LD_ADDR_VAR 0 3
20908: PUSH
20909: LD_INT 21
20911: PUSH
20912: LD_INT 22
20914: PUSH
20915: LD_INT 23
20917: PUSH
20918: LD_INT 24
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: ST_TO_ADDR
20927: GO 21076
20929: LD_INT 51
20931: DOUBLE
20932: EQUAL
20933: IFTRUE 20937
20935: GO 20963
20937: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20938: LD_ADDR_VAR 0 3
20942: PUSH
20943: LD_INT 21
20945: PUSH
20946: LD_INT 22
20948: PUSH
20949: LD_INT 23
20951: PUSH
20952: LD_INT 24
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: ST_TO_ADDR
20961: GO 21076
20963: LD_INT 52
20965: DOUBLE
20966: EQUAL
20967: IFTRUE 20971
20969: GO 20997
20971: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20972: LD_ADDR_VAR 0 3
20976: PUSH
20977: LD_INT 21
20979: PUSH
20980: LD_INT 22
20982: PUSH
20983: LD_INT 23
20985: PUSH
20986: LD_INT 24
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: ST_TO_ADDR
20995: GO 21076
20997: LD_INT 53
20999: DOUBLE
21000: EQUAL
21001: IFTRUE 21005
21003: GO 21023
21005: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21006: LD_ADDR_VAR 0 3
21010: PUSH
21011: LD_INT 23
21013: PUSH
21014: LD_INT 24
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: ST_TO_ADDR
21021: GO 21076
21023: LD_INT 46
21025: DOUBLE
21026: EQUAL
21027: IFTRUE 21031
21029: GO 21049
21031: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21032: LD_ADDR_VAR 0 3
21036: PUSH
21037: LD_INT 23
21039: PUSH
21040: LD_INT 24
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: ST_TO_ADDR
21047: GO 21076
21049: LD_INT 47
21051: DOUBLE
21052: EQUAL
21053: IFTRUE 21057
21055: GO 21075
21057: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21058: LD_ADDR_VAR 0 3
21062: PUSH
21063: LD_INT 23
21065: PUSH
21066: LD_INT 24
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: ST_TO_ADDR
21073: GO 21076
21075: POP
// result := ( chassis in result ) ;
21076: LD_ADDR_VAR 0 3
21080: PUSH
21081: LD_VAR 0 1
21085: PUSH
21086: LD_VAR 0 3
21090: IN
21091: ST_TO_ADDR
// end ;
21092: LD_VAR 0 3
21096: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21097: LD_INT 0
21099: PPUSH
21100: PPUSH
21101: PPUSH
21102: PPUSH
21103: PPUSH
21104: PPUSH
21105: PPUSH
// result := array ;
21106: LD_ADDR_VAR 0 5
21110: PUSH
21111: LD_VAR 0 1
21115: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21116: LD_VAR 0 1
21120: NOT
21121: PUSH
21122: LD_VAR 0 2
21126: NOT
21127: OR
21128: PUSH
21129: LD_VAR 0 3
21133: NOT
21134: OR
21135: PUSH
21136: LD_VAR 0 2
21140: PUSH
21141: LD_VAR 0 1
21145: GREATER
21146: OR
21147: PUSH
21148: LD_VAR 0 3
21152: PUSH
21153: LD_VAR 0 1
21157: GREATER
21158: OR
21159: IFFALSE 21163
// exit ;
21161: GO 21459
// if direction then
21163: LD_VAR 0 4
21167: IFFALSE 21231
// begin d := 1 ;
21169: LD_ADDR_VAR 0 9
21173: PUSH
21174: LD_INT 1
21176: ST_TO_ADDR
// if i_from > i_to then
21177: LD_VAR 0 2
21181: PUSH
21182: LD_VAR 0 3
21186: GREATER
21187: IFFALSE 21213
// length := ( array - i_from ) + i_to else
21189: LD_ADDR_VAR 0 11
21193: PUSH
21194: LD_VAR 0 1
21198: PUSH
21199: LD_VAR 0 2
21203: MINUS
21204: PUSH
21205: LD_VAR 0 3
21209: PLUS
21210: ST_TO_ADDR
21211: GO 21229
// length := i_to - i_from ;
21213: LD_ADDR_VAR 0 11
21217: PUSH
21218: LD_VAR 0 3
21222: PUSH
21223: LD_VAR 0 2
21227: MINUS
21228: ST_TO_ADDR
// end else
21229: GO 21292
// begin d := - 1 ;
21231: LD_ADDR_VAR 0 9
21235: PUSH
21236: LD_INT 1
21238: NEG
21239: ST_TO_ADDR
// if i_from > i_to then
21240: LD_VAR 0 2
21244: PUSH
21245: LD_VAR 0 3
21249: GREATER
21250: IFFALSE 21270
// length := i_from - i_to else
21252: LD_ADDR_VAR 0 11
21256: PUSH
21257: LD_VAR 0 2
21261: PUSH
21262: LD_VAR 0 3
21266: MINUS
21267: ST_TO_ADDR
21268: GO 21292
// length := ( array - i_to ) + i_from ;
21270: LD_ADDR_VAR 0 11
21274: PUSH
21275: LD_VAR 0 1
21279: PUSH
21280: LD_VAR 0 3
21284: MINUS
21285: PUSH
21286: LD_VAR 0 2
21290: PLUS
21291: ST_TO_ADDR
// end ; if not length then
21292: LD_VAR 0 11
21296: NOT
21297: IFFALSE 21301
// exit ;
21299: GO 21459
// tmp := array ;
21301: LD_ADDR_VAR 0 10
21305: PUSH
21306: LD_VAR 0 1
21310: ST_TO_ADDR
// for i = 1 to length do
21311: LD_ADDR_VAR 0 6
21315: PUSH
21316: DOUBLE
21317: LD_INT 1
21319: DEC
21320: ST_TO_ADDR
21321: LD_VAR 0 11
21325: PUSH
21326: FOR_TO
21327: IFFALSE 21447
// begin for j = 1 to array do
21329: LD_ADDR_VAR 0 7
21333: PUSH
21334: DOUBLE
21335: LD_INT 1
21337: DEC
21338: ST_TO_ADDR
21339: LD_VAR 0 1
21343: PUSH
21344: FOR_TO
21345: IFFALSE 21433
// begin k := j + d ;
21347: LD_ADDR_VAR 0 8
21351: PUSH
21352: LD_VAR 0 7
21356: PUSH
21357: LD_VAR 0 9
21361: PLUS
21362: ST_TO_ADDR
// if k > array then
21363: LD_VAR 0 8
21367: PUSH
21368: LD_VAR 0 1
21372: GREATER
21373: IFFALSE 21383
// k := 1 ;
21375: LD_ADDR_VAR 0 8
21379: PUSH
21380: LD_INT 1
21382: ST_TO_ADDR
// if not k then
21383: LD_VAR 0 8
21387: NOT
21388: IFFALSE 21400
// k := array ;
21390: LD_ADDR_VAR 0 8
21394: PUSH
21395: LD_VAR 0 1
21399: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21400: LD_ADDR_VAR 0 10
21404: PUSH
21405: LD_VAR 0 10
21409: PPUSH
21410: LD_VAR 0 8
21414: PPUSH
21415: LD_VAR 0 1
21419: PUSH
21420: LD_VAR 0 7
21424: ARRAY
21425: PPUSH
21426: CALL_OW 1
21430: ST_TO_ADDR
// end ;
21431: GO 21344
21433: POP
21434: POP
// array := tmp ;
21435: LD_ADDR_VAR 0 1
21439: PUSH
21440: LD_VAR 0 10
21444: ST_TO_ADDR
// end ;
21445: GO 21326
21447: POP
21448: POP
// result := array ;
21449: LD_ADDR_VAR 0 5
21453: PUSH
21454: LD_VAR 0 1
21458: ST_TO_ADDR
// end ;
21459: LD_VAR 0 5
21463: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21464: LD_INT 0
21466: PPUSH
21467: PPUSH
// result := 0 ;
21468: LD_ADDR_VAR 0 3
21472: PUSH
21473: LD_INT 0
21475: ST_TO_ADDR
// if not array or not value in array then
21476: LD_VAR 0 1
21480: NOT
21481: PUSH
21482: LD_VAR 0 2
21486: PUSH
21487: LD_VAR 0 1
21491: IN
21492: NOT
21493: OR
21494: IFFALSE 21498
// exit ;
21496: GO 21552
// for i = 1 to array do
21498: LD_ADDR_VAR 0 4
21502: PUSH
21503: DOUBLE
21504: LD_INT 1
21506: DEC
21507: ST_TO_ADDR
21508: LD_VAR 0 1
21512: PUSH
21513: FOR_TO
21514: IFFALSE 21550
// if value = array [ i ] then
21516: LD_VAR 0 2
21520: PUSH
21521: LD_VAR 0 1
21525: PUSH
21526: LD_VAR 0 4
21530: ARRAY
21531: EQUAL
21532: IFFALSE 21548
// begin result := i ;
21534: LD_ADDR_VAR 0 3
21538: PUSH
21539: LD_VAR 0 4
21543: ST_TO_ADDR
// exit ;
21544: POP
21545: POP
21546: GO 21552
// end ;
21548: GO 21513
21550: POP
21551: POP
// end ;
21552: LD_VAR 0 3
21556: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21557: LD_INT 0
21559: PPUSH
// vc_chassis := chassis ;
21560: LD_ADDR_OWVAR 37
21564: PUSH
21565: LD_VAR 0 1
21569: ST_TO_ADDR
// vc_engine := engine ;
21570: LD_ADDR_OWVAR 39
21574: PUSH
21575: LD_VAR 0 2
21579: ST_TO_ADDR
// vc_control := control ;
21580: LD_ADDR_OWVAR 38
21584: PUSH
21585: LD_VAR 0 3
21589: ST_TO_ADDR
// vc_weapon := weapon ;
21590: LD_ADDR_OWVAR 40
21594: PUSH
21595: LD_VAR 0 4
21599: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21600: LD_ADDR_OWVAR 41
21604: PUSH
21605: LD_VAR 0 5
21609: ST_TO_ADDR
// end ;
21610: LD_VAR 0 6
21614: RET
// export function WantPlant ( unit ) ; var task ; begin
21615: LD_INT 0
21617: PPUSH
21618: PPUSH
// result := false ;
21619: LD_ADDR_VAR 0 2
21623: PUSH
21624: LD_INT 0
21626: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21627: LD_ADDR_VAR 0 3
21631: PUSH
21632: LD_VAR 0 1
21636: PPUSH
21637: CALL_OW 437
21641: ST_TO_ADDR
// if task then
21642: LD_VAR 0 3
21646: IFFALSE 21674
// if task [ 1 ] [ 1 ] = p then
21648: LD_VAR 0 3
21652: PUSH
21653: LD_INT 1
21655: ARRAY
21656: PUSH
21657: LD_INT 1
21659: ARRAY
21660: PUSH
21661: LD_STRING p
21663: EQUAL
21664: IFFALSE 21674
// result := true ;
21666: LD_ADDR_VAR 0 2
21670: PUSH
21671: LD_INT 1
21673: ST_TO_ADDR
// end ;
21674: LD_VAR 0 2
21678: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21679: LD_INT 0
21681: PPUSH
21682: PPUSH
21683: PPUSH
21684: PPUSH
// if pos < 1 then
21685: LD_VAR 0 2
21689: PUSH
21690: LD_INT 1
21692: LESS
21693: IFFALSE 21697
// exit ;
21695: GO 22000
// if pos = 1 then
21697: LD_VAR 0 2
21701: PUSH
21702: LD_INT 1
21704: EQUAL
21705: IFFALSE 21738
// result := Replace ( arr , pos [ 1 ] , value ) else
21707: LD_ADDR_VAR 0 4
21711: PUSH
21712: LD_VAR 0 1
21716: PPUSH
21717: LD_VAR 0 2
21721: PUSH
21722: LD_INT 1
21724: ARRAY
21725: PPUSH
21726: LD_VAR 0 3
21730: PPUSH
21731: CALL_OW 1
21735: ST_TO_ADDR
21736: GO 22000
// begin tmp := arr ;
21738: LD_ADDR_VAR 0 6
21742: PUSH
21743: LD_VAR 0 1
21747: ST_TO_ADDR
// s_arr := [ tmp ] ;
21748: LD_ADDR_VAR 0 7
21752: PUSH
21753: LD_VAR 0 6
21757: PUSH
21758: EMPTY
21759: LIST
21760: ST_TO_ADDR
// for i = 1 to pos - 1 do
21761: LD_ADDR_VAR 0 5
21765: PUSH
21766: DOUBLE
21767: LD_INT 1
21769: DEC
21770: ST_TO_ADDR
21771: LD_VAR 0 2
21775: PUSH
21776: LD_INT 1
21778: MINUS
21779: PUSH
21780: FOR_TO
21781: IFFALSE 21826
// begin tmp := tmp [ pos [ i ] ] ;
21783: LD_ADDR_VAR 0 6
21787: PUSH
21788: LD_VAR 0 6
21792: PUSH
21793: LD_VAR 0 2
21797: PUSH
21798: LD_VAR 0 5
21802: ARRAY
21803: ARRAY
21804: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21805: LD_ADDR_VAR 0 7
21809: PUSH
21810: LD_VAR 0 7
21814: PUSH
21815: LD_VAR 0 6
21819: PUSH
21820: EMPTY
21821: LIST
21822: ADD
21823: ST_TO_ADDR
// end ;
21824: GO 21780
21826: POP
21827: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21828: LD_ADDR_VAR 0 6
21832: PUSH
21833: LD_VAR 0 6
21837: PPUSH
21838: LD_VAR 0 2
21842: PUSH
21843: LD_VAR 0 2
21847: ARRAY
21848: PPUSH
21849: LD_VAR 0 3
21853: PPUSH
21854: CALL_OW 1
21858: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21859: LD_ADDR_VAR 0 7
21863: PUSH
21864: LD_VAR 0 7
21868: PPUSH
21869: LD_VAR 0 7
21873: PPUSH
21874: LD_VAR 0 6
21878: PPUSH
21879: CALL_OW 1
21883: ST_TO_ADDR
// for i = s_arr downto 2 do
21884: LD_ADDR_VAR 0 5
21888: PUSH
21889: DOUBLE
21890: LD_VAR 0 7
21894: INC
21895: ST_TO_ADDR
21896: LD_INT 2
21898: PUSH
21899: FOR_DOWNTO
21900: IFFALSE 21984
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21902: LD_ADDR_VAR 0 6
21906: PUSH
21907: LD_VAR 0 7
21911: PUSH
21912: LD_VAR 0 5
21916: PUSH
21917: LD_INT 1
21919: MINUS
21920: ARRAY
21921: PPUSH
21922: LD_VAR 0 2
21926: PUSH
21927: LD_VAR 0 5
21931: PUSH
21932: LD_INT 1
21934: MINUS
21935: ARRAY
21936: PPUSH
21937: LD_VAR 0 7
21941: PUSH
21942: LD_VAR 0 5
21946: ARRAY
21947: PPUSH
21948: CALL_OW 1
21952: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21953: LD_ADDR_VAR 0 7
21957: PUSH
21958: LD_VAR 0 7
21962: PPUSH
21963: LD_VAR 0 5
21967: PUSH
21968: LD_INT 1
21970: MINUS
21971: PPUSH
21972: LD_VAR 0 6
21976: PPUSH
21977: CALL_OW 1
21981: ST_TO_ADDR
// end ;
21982: GO 21899
21984: POP
21985: POP
// result := s_arr [ 1 ] ;
21986: LD_ADDR_VAR 0 4
21990: PUSH
21991: LD_VAR 0 7
21995: PUSH
21996: LD_INT 1
21998: ARRAY
21999: ST_TO_ADDR
// end ; end ;
22000: LD_VAR 0 4
22004: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22005: LD_INT 0
22007: PPUSH
22008: PPUSH
// if not list then
22009: LD_VAR 0 1
22013: NOT
22014: IFFALSE 22018
// exit ;
22016: GO 22109
// i := list [ pos1 ] ;
22018: LD_ADDR_VAR 0 5
22022: PUSH
22023: LD_VAR 0 1
22027: PUSH
22028: LD_VAR 0 2
22032: ARRAY
22033: ST_TO_ADDR
// if not i then
22034: LD_VAR 0 5
22038: NOT
22039: IFFALSE 22043
// exit ;
22041: GO 22109
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22043: LD_ADDR_VAR 0 1
22047: PUSH
22048: LD_VAR 0 1
22052: PPUSH
22053: LD_VAR 0 2
22057: PPUSH
22058: LD_VAR 0 1
22062: PUSH
22063: LD_VAR 0 3
22067: ARRAY
22068: PPUSH
22069: CALL_OW 1
22073: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22074: LD_ADDR_VAR 0 1
22078: PUSH
22079: LD_VAR 0 1
22083: PPUSH
22084: LD_VAR 0 3
22088: PPUSH
22089: LD_VAR 0 5
22093: PPUSH
22094: CALL_OW 1
22098: ST_TO_ADDR
// result := list ;
22099: LD_ADDR_VAR 0 4
22103: PUSH
22104: LD_VAR 0 1
22108: ST_TO_ADDR
// end ;
22109: LD_VAR 0 4
22113: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22114: LD_INT 0
22116: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22117: LD_ADDR_VAR 0 5
22121: PUSH
22122: LD_VAR 0 1
22126: PPUSH
22127: CALL_OW 250
22131: PPUSH
22132: LD_VAR 0 1
22136: PPUSH
22137: CALL_OW 251
22141: PPUSH
22142: LD_VAR 0 2
22146: PPUSH
22147: LD_VAR 0 3
22151: PPUSH
22152: LD_VAR 0 4
22156: PPUSH
22157: CALL 22535 0 5
22161: ST_TO_ADDR
// end ;
22162: LD_VAR 0 5
22166: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22167: LD_INT 0
22169: PPUSH
22170: PPUSH
22171: PPUSH
22172: PPUSH
// if not list or not unit then
22173: LD_VAR 0 2
22177: NOT
22178: PUSH
22179: LD_VAR 0 1
22183: NOT
22184: OR
22185: IFFALSE 22189
// exit ;
22187: GO 22530
// result := [ ] ;
22189: LD_ADDR_VAR 0 5
22193: PUSH
22194: EMPTY
22195: ST_TO_ADDR
// for i in list do
22196: LD_ADDR_VAR 0 6
22200: PUSH
22201: LD_VAR 0 2
22205: PUSH
22206: FOR_IN
22207: IFFALSE 22425
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22209: LD_ADDR_VAR 0 8
22213: PUSH
22214: LD_VAR 0 1
22218: PPUSH
22219: LD_VAR 0 6
22223: PUSH
22224: LD_INT 1
22226: ARRAY
22227: PPUSH
22228: LD_VAR 0 6
22232: PUSH
22233: LD_INT 2
22235: ARRAY
22236: PPUSH
22237: CALL_OW 297
22241: ST_TO_ADDR
// if not Count ( result ) then
22242: LD_VAR 0 5
22246: PPUSH
22247: CALL 18819 0 1
22251: NOT
22252: IFFALSE 22285
// begin result := Join ( result , [ i , tmp ] ) ;
22254: LD_ADDR_VAR 0 5
22258: PUSH
22259: LD_VAR 0 5
22263: PPUSH
22264: LD_VAR 0 6
22268: PUSH
22269: LD_VAR 0 8
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PPUSH
22278: CALL 54408 0 2
22282: ST_TO_ADDR
// continue ;
22283: GO 22206
// end ; if result [ result ] [ 2 ] <= tmp then
22285: LD_VAR 0 5
22289: PUSH
22290: LD_VAR 0 5
22294: ARRAY
22295: PUSH
22296: LD_INT 2
22298: ARRAY
22299: PUSH
22300: LD_VAR 0 8
22304: LESSEQUAL
22305: IFFALSE 22338
// result := Join ( result , [ i , tmp ] ) else
22307: LD_ADDR_VAR 0 5
22311: PUSH
22312: LD_VAR 0 5
22316: PPUSH
22317: LD_VAR 0 6
22321: PUSH
22322: LD_VAR 0 8
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PPUSH
22331: CALL 54408 0 2
22335: ST_TO_ADDR
22336: GO 22423
// begin for j := 1 to Count ( result ) do
22338: LD_ADDR_VAR 0 7
22342: PUSH
22343: DOUBLE
22344: LD_INT 1
22346: DEC
22347: ST_TO_ADDR
22348: LD_VAR 0 5
22352: PPUSH
22353: CALL 18819 0 1
22357: PUSH
22358: FOR_TO
22359: IFFALSE 22421
// begin if tmp < result [ j ] [ 2 ] then
22361: LD_VAR 0 8
22365: PUSH
22366: LD_VAR 0 5
22370: PUSH
22371: LD_VAR 0 7
22375: ARRAY
22376: PUSH
22377: LD_INT 2
22379: ARRAY
22380: LESS
22381: IFFALSE 22419
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22383: LD_ADDR_VAR 0 5
22387: PUSH
22388: LD_VAR 0 5
22392: PPUSH
22393: LD_VAR 0 7
22397: PPUSH
22398: LD_VAR 0 6
22402: PUSH
22403: LD_VAR 0 8
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PPUSH
22412: CALL_OW 2
22416: ST_TO_ADDR
// break ;
22417: GO 22421
// end ; end ;
22419: GO 22358
22421: POP
22422: POP
// end ; end ;
22423: GO 22206
22425: POP
22426: POP
// if result and not asc then
22427: LD_VAR 0 5
22431: PUSH
22432: LD_VAR 0 3
22436: NOT
22437: AND
22438: IFFALSE 22455
// result := ReverseArray ( result ) ;
22440: LD_ADDR_VAR 0 5
22444: PUSH
22445: LD_VAR 0 5
22449: PPUSH
22450: CALL 49695 0 1
22454: ST_TO_ADDR
// tmp := [ ] ;
22455: LD_ADDR_VAR 0 8
22459: PUSH
22460: EMPTY
22461: ST_TO_ADDR
// if mode then
22462: LD_VAR 0 4
22466: IFFALSE 22530
// begin for i := 1 to result do
22468: LD_ADDR_VAR 0 6
22472: PUSH
22473: DOUBLE
22474: LD_INT 1
22476: DEC
22477: ST_TO_ADDR
22478: LD_VAR 0 5
22482: PUSH
22483: FOR_TO
22484: IFFALSE 22518
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22486: LD_ADDR_VAR 0 8
22490: PUSH
22491: LD_VAR 0 8
22495: PPUSH
22496: LD_VAR 0 5
22500: PUSH
22501: LD_VAR 0 6
22505: ARRAY
22506: PUSH
22507: LD_INT 1
22509: ARRAY
22510: PPUSH
22511: CALL 54408 0 2
22515: ST_TO_ADDR
22516: GO 22483
22518: POP
22519: POP
// result := tmp ;
22520: LD_ADDR_VAR 0 5
22524: PUSH
22525: LD_VAR 0 8
22529: ST_TO_ADDR
// end ; end ;
22530: LD_VAR 0 5
22534: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22535: LD_INT 0
22537: PPUSH
22538: PPUSH
22539: PPUSH
22540: PPUSH
// if not list then
22541: LD_VAR 0 3
22545: NOT
22546: IFFALSE 22550
// exit ;
22548: GO 22938
// result := [ ] ;
22550: LD_ADDR_VAR 0 6
22554: PUSH
22555: EMPTY
22556: ST_TO_ADDR
// for i in list do
22557: LD_ADDR_VAR 0 7
22561: PUSH
22562: LD_VAR 0 3
22566: PUSH
22567: FOR_IN
22568: IFFALSE 22770
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22570: LD_ADDR_VAR 0 9
22574: PUSH
22575: LD_VAR 0 7
22579: PPUSH
22580: LD_VAR 0 1
22584: PPUSH
22585: LD_VAR 0 2
22589: PPUSH
22590: CALL_OW 297
22594: ST_TO_ADDR
// if not result then
22595: LD_VAR 0 6
22599: NOT
22600: IFFALSE 22626
// result := [ [ i , tmp ] ] else
22602: LD_ADDR_VAR 0 6
22606: PUSH
22607: LD_VAR 0 7
22611: PUSH
22612: LD_VAR 0 9
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: EMPTY
22622: LIST
22623: ST_TO_ADDR
22624: GO 22768
// begin if result [ result ] [ 2 ] < tmp then
22626: LD_VAR 0 6
22630: PUSH
22631: LD_VAR 0 6
22635: ARRAY
22636: PUSH
22637: LD_INT 2
22639: ARRAY
22640: PUSH
22641: LD_VAR 0 9
22645: LESS
22646: IFFALSE 22688
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22648: LD_ADDR_VAR 0 6
22652: PUSH
22653: LD_VAR 0 6
22657: PPUSH
22658: LD_VAR 0 6
22662: PUSH
22663: LD_INT 1
22665: PLUS
22666: PPUSH
22667: LD_VAR 0 7
22671: PUSH
22672: LD_VAR 0 9
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PPUSH
22681: CALL_OW 2
22685: ST_TO_ADDR
22686: GO 22768
// for j = 1 to result do
22688: LD_ADDR_VAR 0 8
22692: PUSH
22693: DOUBLE
22694: LD_INT 1
22696: DEC
22697: ST_TO_ADDR
22698: LD_VAR 0 6
22702: PUSH
22703: FOR_TO
22704: IFFALSE 22766
// begin if tmp < result [ j ] [ 2 ] then
22706: LD_VAR 0 9
22710: PUSH
22711: LD_VAR 0 6
22715: PUSH
22716: LD_VAR 0 8
22720: ARRAY
22721: PUSH
22722: LD_INT 2
22724: ARRAY
22725: LESS
22726: IFFALSE 22764
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22728: LD_ADDR_VAR 0 6
22732: PUSH
22733: LD_VAR 0 6
22737: PPUSH
22738: LD_VAR 0 8
22742: PPUSH
22743: LD_VAR 0 7
22747: PUSH
22748: LD_VAR 0 9
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PPUSH
22757: CALL_OW 2
22761: ST_TO_ADDR
// break ;
22762: GO 22766
// end ; end ;
22764: GO 22703
22766: POP
22767: POP
// end ; end ;
22768: GO 22567
22770: POP
22771: POP
// if result and not asc then
22772: LD_VAR 0 6
22776: PUSH
22777: LD_VAR 0 4
22781: NOT
22782: AND
22783: IFFALSE 22858
// begin tmp := result ;
22785: LD_ADDR_VAR 0 9
22789: PUSH
22790: LD_VAR 0 6
22794: ST_TO_ADDR
// for i = tmp downto 1 do
22795: LD_ADDR_VAR 0 7
22799: PUSH
22800: DOUBLE
22801: LD_VAR 0 9
22805: INC
22806: ST_TO_ADDR
22807: LD_INT 1
22809: PUSH
22810: FOR_DOWNTO
22811: IFFALSE 22856
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22813: LD_ADDR_VAR 0 6
22817: PUSH
22818: LD_VAR 0 6
22822: PPUSH
22823: LD_VAR 0 9
22827: PUSH
22828: LD_VAR 0 7
22832: MINUS
22833: PUSH
22834: LD_INT 1
22836: PLUS
22837: PPUSH
22838: LD_VAR 0 9
22842: PUSH
22843: LD_VAR 0 7
22847: ARRAY
22848: PPUSH
22849: CALL_OW 1
22853: ST_TO_ADDR
22854: GO 22810
22856: POP
22857: POP
// end ; tmp := [ ] ;
22858: LD_ADDR_VAR 0 9
22862: PUSH
22863: EMPTY
22864: ST_TO_ADDR
// if mode then
22865: LD_VAR 0 5
22869: IFFALSE 22938
// begin for i = 1 to result do
22871: LD_ADDR_VAR 0 7
22875: PUSH
22876: DOUBLE
22877: LD_INT 1
22879: DEC
22880: ST_TO_ADDR
22881: LD_VAR 0 6
22885: PUSH
22886: FOR_TO
22887: IFFALSE 22926
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22889: LD_ADDR_VAR 0 9
22893: PUSH
22894: LD_VAR 0 9
22898: PPUSH
22899: LD_VAR 0 7
22903: PPUSH
22904: LD_VAR 0 6
22908: PUSH
22909: LD_VAR 0 7
22913: ARRAY
22914: PUSH
22915: LD_INT 1
22917: ARRAY
22918: PPUSH
22919: CALL_OW 1
22923: ST_TO_ADDR
22924: GO 22886
22926: POP
22927: POP
// result := tmp ;
22928: LD_ADDR_VAR 0 6
22932: PUSH
22933: LD_VAR 0 9
22937: ST_TO_ADDR
// end ; end ;
22938: LD_VAR 0 6
22942: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22943: LD_INT 0
22945: PPUSH
22946: PPUSH
22947: PPUSH
22948: PPUSH
22949: PPUSH
22950: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22951: LD_ADDR_VAR 0 5
22955: PUSH
22956: LD_INT 0
22958: PUSH
22959: LD_INT 0
22961: PUSH
22962: LD_INT 0
22964: PUSH
22965: EMPTY
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: ST_TO_ADDR
// if not x or not y then
22973: LD_VAR 0 2
22977: NOT
22978: PUSH
22979: LD_VAR 0 3
22983: NOT
22984: OR
22985: IFFALSE 22989
// exit ;
22987: GO 24639
// if not range then
22989: LD_VAR 0 4
22993: NOT
22994: IFFALSE 23004
// range := 10 ;
22996: LD_ADDR_VAR 0 4
23000: PUSH
23001: LD_INT 10
23003: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23004: LD_ADDR_VAR 0 8
23008: PUSH
23009: LD_INT 81
23011: PUSH
23012: LD_VAR 0 1
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 92
23023: PUSH
23024: LD_VAR 0 2
23028: PUSH
23029: LD_VAR 0 3
23033: PUSH
23034: LD_VAR 0 4
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 3
23047: PUSH
23048: LD_INT 21
23050: PUSH
23051: LD_INT 3
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: PPUSH
23067: CALL_OW 69
23071: ST_TO_ADDR
// if not tmp then
23072: LD_VAR 0 8
23076: NOT
23077: IFFALSE 23081
// exit ;
23079: GO 24639
// for i in tmp do
23081: LD_ADDR_VAR 0 6
23085: PUSH
23086: LD_VAR 0 8
23090: PUSH
23091: FOR_IN
23092: IFFALSE 24614
// begin points := [ 0 , 0 , 0 ] ;
23094: LD_ADDR_VAR 0 9
23098: PUSH
23099: LD_INT 0
23101: PUSH
23102: LD_INT 0
23104: PUSH
23105: LD_INT 0
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: LIST
23112: ST_TO_ADDR
// bpoints := 1 ;
23113: LD_ADDR_VAR 0 10
23117: PUSH
23118: LD_INT 1
23120: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23121: LD_VAR 0 6
23125: PPUSH
23126: CALL_OW 247
23130: PUSH
23131: LD_INT 1
23133: DOUBLE
23134: EQUAL
23135: IFTRUE 23139
23137: GO 23717
23139: POP
// begin if GetClass ( i ) = 1 then
23140: LD_VAR 0 6
23144: PPUSH
23145: CALL_OW 257
23149: PUSH
23150: LD_INT 1
23152: EQUAL
23153: IFFALSE 23174
// points := [ 10 , 5 , 3 ] ;
23155: LD_ADDR_VAR 0 9
23159: PUSH
23160: LD_INT 10
23162: PUSH
23163: LD_INT 5
23165: PUSH
23166: LD_INT 3
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: LIST
23173: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23174: LD_VAR 0 6
23178: PPUSH
23179: CALL_OW 257
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: LD_INT 3
23189: PUSH
23190: LD_INT 4
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: IN
23198: IFFALSE 23219
// points := [ 3 , 2 , 1 ] ;
23200: LD_ADDR_VAR 0 9
23204: PUSH
23205: LD_INT 3
23207: PUSH
23208: LD_INT 2
23210: PUSH
23211: LD_INT 1
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: LIST
23218: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23219: LD_VAR 0 6
23223: PPUSH
23224: CALL_OW 257
23228: PUSH
23229: LD_INT 5
23231: EQUAL
23232: IFFALSE 23253
// points := [ 130 , 5 , 2 ] ;
23234: LD_ADDR_VAR 0 9
23238: PUSH
23239: LD_INT 130
23241: PUSH
23242: LD_INT 5
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: LIST
23252: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23253: LD_VAR 0 6
23257: PPUSH
23258: CALL_OW 257
23262: PUSH
23263: LD_INT 8
23265: EQUAL
23266: IFFALSE 23287
// points := [ 35 , 35 , 30 ] ;
23268: LD_ADDR_VAR 0 9
23272: PUSH
23273: LD_INT 35
23275: PUSH
23276: LD_INT 35
23278: PUSH
23279: LD_INT 30
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: LIST
23286: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23287: LD_VAR 0 6
23291: PPUSH
23292: CALL_OW 257
23296: PUSH
23297: LD_INT 9
23299: EQUAL
23300: IFFALSE 23321
// points := [ 20 , 55 , 40 ] ;
23302: LD_ADDR_VAR 0 9
23306: PUSH
23307: LD_INT 20
23309: PUSH
23310: LD_INT 55
23312: PUSH
23313: LD_INT 40
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: LIST
23320: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23321: LD_VAR 0 6
23325: PPUSH
23326: CALL_OW 257
23330: PUSH
23331: LD_INT 12
23333: PUSH
23334: LD_INT 16
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: IN
23341: IFFALSE 23362
// points := [ 5 , 3 , 2 ] ;
23343: LD_ADDR_VAR 0 9
23347: PUSH
23348: LD_INT 5
23350: PUSH
23351: LD_INT 3
23353: PUSH
23354: LD_INT 2
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: LIST
23361: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23362: LD_VAR 0 6
23366: PPUSH
23367: CALL_OW 257
23371: PUSH
23372: LD_INT 17
23374: EQUAL
23375: IFFALSE 23396
// points := [ 100 , 50 , 75 ] ;
23377: LD_ADDR_VAR 0 9
23381: PUSH
23382: LD_INT 100
23384: PUSH
23385: LD_INT 50
23387: PUSH
23388: LD_INT 75
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: LIST
23395: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23396: LD_VAR 0 6
23400: PPUSH
23401: CALL_OW 257
23405: PUSH
23406: LD_INT 15
23408: EQUAL
23409: IFFALSE 23430
// points := [ 10 , 5 , 3 ] ;
23411: LD_ADDR_VAR 0 9
23415: PUSH
23416: LD_INT 10
23418: PUSH
23419: LD_INT 5
23421: PUSH
23422: LD_INT 3
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23430: LD_VAR 0 6
23434: PPUSH
23435: CALL_OW 257
23439: PUSH
23440: LD_INT 14
23442: EQUAL
23443: IFFALSE 23464
// points := [ 10 , 0 , 0 ] ;
23445: LD_ADDR_VAR 0 9
23449: PUSH
23450: LD_INT 10
23452: PUSH
23453: LD_INT 0
23455: PUSH
23456: LD_INT 0
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23464: LD_VAR 0 6
23468: PPUSH
23469: CALL_OW 257
23473: PUSH
23474: LD_INT 11
23476: EQUAL
23477: IFFALSE 23498
// points := [ 30 , 10 , 5 ] ;
23479: LD_ADDR_VAR 0 9
23483: PUSH
23484: LD_INT 30
23486: PUSH
23487: LD_INT 10
23489: PUSH
23490: LD_INT 5
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: LIST
23497: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23498: LD_VAR 0 1
23502: PPUSH
23503: LD_INT 5
23505: PPUSH
23506: CALL_OW 321
23510: PUSH
23511: LD_INT 2
23513: EQUAL
23514: IFFALSE 23531
// bpoints := bpoints * 1.8 ;
23516: LD_ADDR_VAR 0 10
23520: PUSH
23521: LD_VAR 0 10
23525: PUSH
23526: LD_REAL  1.80000000000000E+0000
23529: MUL
23530: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23531: LD_VAR 0 6
23535: PPUSH
23536: CALL_OW 257
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: LD_INT 2
23546: PUSH
23547: LD_INT 3
23549: PUSH
23550: LD_INT 4
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: IN
23559: PUSH
23560: LD_VAR 0 1
23564: PPUSH
23565: LD_INT 51
23567: PPUSH
23568: CALL_OW 321
23572: PUSH
23573: LD_INT 2
23575: EQUAL
23576: AND
23577: IFFALSE 23594
// bpoints := bpoints * 1.2 ;
23579: LD_ADDR_VAR 0 10
23583: PUSH
23584: LD_VAR 0 10
23588: PUSH
23589: LD_REAL  1.20000000000000E+0000
23592: MUL
23593: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23594: LD_VAR 0 6
23598: PPUSH
23599: CALL_OW 257
23603: PUSH
23604: LD_INT 5
23606: PUSH
23607: LD_INT 7
23609: PUSH
23610: LD_INT 9
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: LIST
23617: IN
23618: PUSH
23619: LD_VAR 0 1
23623: PPUSH
23624: LD_INT 52
23626: PPUSH
23627: CALL_OW 321
23631: PUSH
23632: LD_INT 2
23634: EQUAL
23635: AND
23636: IFFALSE 23653
// bpoints := bpoints * 1.5 ;
23638: LD_ADDR_VAR 0 10
23642: PUSH
23643: LD_VAR 0 10
23647: PUSH
23648: LD_REAL  1.50000000000000E+0000
23651: MUL
23652: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23653: LD_VAR 0 1
23657: PPUSH
23658: LD_INT 66
23660: PPUSH
23661: CALL_OW 321
23665: PUSH
23666: LD_INT 2
23668: EQUAL
23669: IFFALSE 23686
// bpoints := bpoints * 1.1 ;
23671: LD_ADDR_VAR 0 10
23675: PUSH
23676: LD_VAR 0 10
23680: PUSH
23681: LD_REAL  1.10000000000000E+0000
23684: MUL
23685: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23686: LD_ADDR_VAR 0 10
23690: PUSH
23691: LD_VAR 0 10
23695: PUSH
23696: LD_VAR 0 6
23700: PPUSH
23701: LD_INT 1
23703: PPUSH
23704: CALL_OW 259
23708: PUSH
23709: LD_REAL  1.15000000000000E+0000
23712: MUL
23713: MUL
23714: ST_TO_ADDR
// end ; unit_vehicle :
23715: GO 24543
23717: LD_INT 2
23719: DOUBLE
23720: EQUAL
23721: IFTRUE 23725
23723: GO 24531
23725: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23726: LD_VAR 0 6
23730: PPUSH
23731: CALL_OW 264
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: LD_INT 42
23741: PUSH
23742: LD_INT 24
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: LIST
23749: IN
23750: IFFALSE 23771
// points := [ 25 , 5 , 3 ] ;
23752: LD_ADDR_VAR 0 9
23756: PUSH
23757: LD_INT 25
23759: PUSH
23760: LD_INT 5
23762: PUSH
23763: LD_INT 3
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: LIST
23770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23771: LD_VAR 0 6
23775: PPUSH
23776: CALL_OW 264
23780: PUSH
23781: LD_INT 4
23783: PUSH
23784: LD_INT 43
23786: PUSH
23787: LD_INT 25
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: LIST
23794: IN
23795: IFFALSE 23816
// points := [ 40 , 15 , 5 ] ;
23797: LD_ADDR_VAR 0 9
23801: PUSH
23802: LD_INT 40
23804: PUSH
23805: LD_INT 15
23807: PUSH
23808: LD_INT 5
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: LIST
23815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23816: LD_VAR 0 6
23820: PPUSH
23821: CALL_OW 264
23825: PUSH
23826: LD_INT 3
23828: PUSH
23829: LD_INT 23
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: IN
23836: IFFALSE 23857
// points := [ 7 , 25 , 8 ] ;
23838: LD_ADDR_VAR 0 9
23842: PUSH
23843: LD_INT 7
23845: PUSH
23846: LD_INT 25
23848: PUSH
23849: LD_INT 8
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: LIST
23856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23857: LD_VAR 0 6
23861: PPUSH
23862: CALL_OW 264
23866: PUSH
23867: LD_INT 5
23869: PUSH
23870: LD_INT 27
23872: PUSH
23873: LD_INT 44
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: IN
23881: IFFALSE 23902
// points := [ 14 , 50 , 16 ] ;
23883: LD_ADDR_VAR 0 9
23887: PUSH
23888: LD_INT 14
23890: PUSH
23891: LD_INT 50
23893: PUSH
23894: LD_INT 16
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: LIST
23901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23902: LD_VAR 0 6
23906: PPUSH
23907: CALL_OW 264
23911: PUSH
23912: LD_INT 6
23914: PUSH
23915: LD_INT 46
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: IN
23922: IFFALSE 23943
// points := [ 32 , 120 , 70 ] ;
23924: LD_ADDR_VAR 0 9
23928: PUSH
23929: LD_INT 32
23931: PUSH
23932: LD_INT 120
23934: PUSH
23935: LD_INT 70
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: LIST
23942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23943: LD_VAR 0 6
23947: PPUSH
23948: CALL_OW 264
23952: PUSH
23953: LD_INT 7
23955: PUSH
23956: LD_INT 28
23958: PUSH
23959: LD_INT 45
23961: PUSH
23962: LD_INT 92
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: IN
23971: IFFALSE 23992
// points := [ 35 , 20 , 45 ] ;
23973: LD_ADDR_VAR 0 9
23977: PUSH
23978: LD_INT 35
23980: PUSH
23981: LD_INT 20
23983: PUSH
23984: LD_INT 45
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: LIST
23991: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23992: LD_VAR 0 6
23996: PPUSH
23997: CALL_OW 264
24001: PUSH
24002: LD_INT 47
24004: PUSH
24005: EMPTY
24006: LIST
24007: IN
24008: IFFALSE 24029
// points := [ 67 , 45 , 75 ] ;
24010: LD_ADDR_VAR 0 9
24014: PUSH
24015: LD_INT 67
24017: PUSH
24018: LD_INT 45
24020: PUSH
24021: LD_INT 75
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24029: LD_VAR 0 6
24033: PPUSH
24034: CALL_OW 264
24038: PUSH
24039: LD_INT 26
24041: PUSH
24042: EMPTY
24043: LIST
24044: IN
24045: IFFALSE 24066
// points := [ 120 , 30 , 80 ] ;
24047: LD_ADDR_VAR 0 9
24051: PUSH
24052: LD_INT 120
24054: PUSH
24055: LD_INT 30
24057: PUSH
24058: LD_INT 80
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: LIST
24065: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24066: LD_VAR 0 6
24070: PPUSH
24071: CALL_OW 264
24075: PUSH
24076: LD_INT 22
24078: PUSH
24079: EMPTY
24080: LIST
24081: IN
24082: IFFALSE 24103
// points := [ 40 , 1 , 1 ] ;
24084: LD_ADDR_VAR 0 9
24088: PUSH
24089: LD_INT 40
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: LIST
24102: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24103: LD_VAR 0 6
24107: PPUSH
24108: CALL_OW 264
24112: PUSH
24113: LD_INT 29
24115: PUSH
24116: EMPTY
24117: LIST
24118: IN
24119: IFFALSE 24140
// points := [ 70 , 200 , 400 ] ;
24121: LD_ADDR_VAR 0 9
24125: PUSH
24126: LD_INT 70
24128: PUSH
24129: LD_INT 200
24131: PUSH
24132: LD_INT 400
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24140: LD_VAR 0 6
24144: PPUSH
24145: CALL_OW 264
24149: PUSH
24150: LD_INT 14
24152: PUSH
24153: LD_INT 53
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: IN
24160: IFFALSE 24181
// points := [ 40 , 10 , 20 ] ;
24162: LD_ADDR_VAR 0 9
24166: PUSH
24167: LD_INT 40
24169: PUSH
24170: LD_INT 10
24172: PUSH
24173: LD_INT 20
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: LIST
24180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24181: LD_VAR 0 6
24185: PPUSH
24186: CALL_OW 264
24190: PUSH
24191: LD_INT 9
24193: PUSH
24194: EMPTY
24195: LIST
24196: IN
24197: IFFALSE 24218
// points := [ 5 , 70 , 20 ] ;
24199: LD_ADDR_VAR 0 9
24203: PUSH
24204: LD_INT 5
24206: PUSH
24207: LD_INT 70
24209: PUSH
24210: LD_INT 20
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: LIST
24217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24218: LD_VAR 0 6
24222: PPUSH
24223: CALL_OW 264
24227: PUSH
24228: LD_INT 10
24230: PUSH
24231: EMPTY
24232: LIST
24233: IN
24234: IFFALSE 24255
// points := [ 35 , 110 , 70 ] ;
24236: LD_ADDR_VAR 0 9
24240: PUSH
24241: LD_INT 35
24243: PUSH
24244: LD_INT 110
24246: PUSH
24247: LD_INT 70
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24255: LD_VAR 0 6
24259: PPUSH
24260: CALL_OW 265
24264: PUSH
24265: LD_INT 25
24267: EQUAL
24268: IFFALSE 24289
// points := [ 80 , 65 , 100 ] ;
24270: LD_ADDR_VAR 0 9
24274: PUSH
24275: LD_INT 80
24277: PUSH
24278: LD_INT 65
24280: PUSH
24281: LD_INT 100
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: LIST
24288: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24289: LD_VAR 0 6
24293: PPUSH
24294: CALL_OW 263
24298: PUSH
24299: LD_INT 1
24301: EQUAL
24302: IFFALSE 24337
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24304: LD_ADDR_VAR 0 10
24308: PUSH
24309: LD_VAR 0 10
24313: PUSH
24314: LD_VAR 0 6
24318: PPUSH
24319: CALL_OW 311
24323: PPUSH
24324: LD_INT 3
24326: PPUSH
24327: CALL_OW 259
24331: PUSH
24332: LD_INT 4
24334: MUL
24335: MUL
24336: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24337: LD_VAR 0 6
24341: PPUSH
24342: CALL_OW 263
24346: PUSH
24347: LD_INT 2
24349: EQUAL
24350: IFFALSE 24401
// begin j := IsControledBy ( i ) ;
24352: LD_ADDR_VAR 0 7
24356: PUSH
24357: LD_VAR 0 6
24361: PPUSH
24362: CALL_OW 312
24366: ST_TO_ADDR
// if j then
24367: LD_VAR 0 7
24371: IFFALSE 24401
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24373: LD_ADDR_VAR 0 10
24377: PUSH
24378: LD_VAR 0 10
24382: PUSH
24383: LD_VAR 0 7
24387: PPUSH
24388: LD_INT 3
24390: PPUSH
24391: CALL_OW 259
24395: PUSH
24396: LD_INT 3
24398: MUL
24399: MUL
24400: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24401: LD_VAR 0 6
24405: PPUSH
24406: CALL_OW 264
24410: PUSH
24411: LD_INT 5
24413: PUSH
24414: LD_INT 6
24416: PUSH
24417: LD_INT 46
24419: PUSH
24420: LD_INT 44
24422: PUSH
24423: LD_INT 47
24425: PUSH
24426: LD_INT 45
24428: PUSH
24429: LD_INT 28
24431: PUSH
24432: LD_INT 7
24434: PUSH
24435: LD_INT 27
24437: PUSH
24438: LD_INT 29
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: IN
24453: PUSH
24454: LD_VAR 0 1
24458: PPUSH
24459: LD_INT 52
24461: PPUSH
24462: CALL_OW 321
24466: PUSH
24467: LD_INT 2
24469: EQUAL
24470: AND
24471: IFFALSE 24488
// bpoints := bpoints * 1.2 ;
24473: LD_ADDR_VAR 0 10
24477: PUSH
24478: LD_VAR 0 10
24482: PUSH
24483: LD_REAL  1.20000000000000E+0000
24486: MUL
24487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24488: LD_VAR 0 6
24492: PPUSH
24493: CALL_OW 264
24497: PUSH
24498: LD_INT 6
24500: PUSH
24501: LD_INT 46
24503: PUSH
24504: LD_INT 47
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: LIST
24511: IN
24512: IFFALSE 24529
// bpoints := bpoints * 1.2 ;
24514: LD_ADDR_VAR 0 10
24518: PUSH
24519: LD_VAR 0 10
24523: PUSH
24524: LD_REAL  1.20000000000000E+0000
24527: MUL
24528: ST_TO_ADDR
// end ; unit_building :
24529: GO 24543
24531: LD_INT 3
24533: DOUBLE
24534: EQUAL
24535: IFTRUE 24539
24537: GO 24542
24539: POP
// ; end ;
24540: GO 24543
24542: POP
// for j = 1 to 3 do
24543: LD_ADDR_VAR 0 7
24547: PUSH
24548: DOUBLE
24549: LD_INT 1
24551: DEC
24552: ST_TO_ADDR
24553: LD_INT 3
24555: PUSH
24556: FOR_TO
24557: IFFALSE 24610
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24559: LD_ADDR_VAR 0 5
24563: PUSH
24564: LD_VAR 0 5
24568: PPUSH
24569: LD_VAR 0 7
24573: PPUSH
24574: LD_VAR 0 5
24578: PUSH
24579: LD_VAR 0 7
24583: ARRAY
24584: PUSH
24585: LD_VAR 0 9
24589: PUSH
24590: LD_VAR 0 7
24594: ARRAY
24595: PUSH
24596: LD_VAR 0 10
24600: MUL
24601: PLUS
24602: PPUSH
24603: CALL_OW 1
24607: ST_TO_ADDR
24608: GO 24556
24610: POP
24611: POP
// end ;
24612: GO 23091
24614: POP
24615: POP
// result := Replace ( result , 4 , tmp ) ;
24616: LD_ADDR_VAR 0 5
24620: PUSH
24621: LD_VAR 0 5
24625: PPUSH
24626: LD_INT 4
24628: PPUSH
24629: LD_VAR 0 8
24633: PPUSH
24634: CALL_OW 1
24638: ST_TO_ADDR
// end ;
24639: LD_VAR 0 5
24643: RET
// export function DangerAtRange ( unit , range ) ; begin
24644: LD_INT 0
24646: PPUSH
// if not unit then
24647: LD_VAR 0 1
24651: NOT
24652: IFFALSE 24656
// exit ;
24654: GO 24701
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24656: LD_ADDR_VAR 0 3
24660: PUSH
24661: LD_VAR 0 1
24665: PPUSH
24666: CALL_OW 255
24670: PPUSH
24671: LD_VAR 0 1
24675: PPUSH
24676: CALL_OW 250
24680: PPUSH
24681: LD_VAR 0 1
24685: PPUSH
24686: CALL_OW 251
24690: PPUSH
24691: LD_VAR 0 2
24695: PPUSH
24696: CALL 22943 0 4
24700: ST_TO_ADDR
// end ;
24701: LD_VAR 0 3
24705: RET
// export function DangerInArea ( side , area ) ; begin
24706: LD_INT 0
24708: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24709: LD_ADDR_VAR 0 3
24713: PUSH
24714: LD_VAR 0 2
24718: PPUSH
24719: LD_INT 81
24721: PUSH
24722: LD_VAR 0 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PPUSH
24731: CALL_OW 70
24735: ST_TO_ADDR
// end ;
24736: LD_VAR 0 3
24740: RET
// export function IsExtension ( b ) ; begin
24741: LD_INT 0
24743: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24744: LD_ADDR_VAR 0 2
24748: PUSH
24749: LD_VAR 0 1
24753: PUSH
24754: LD_INT 23
24756: PUSH
24757: LD_INT 20
24759: PUSH
24760: LD_INT 22
24762: PUSH
24763: LD_INT 17
24765: PUSH
24766: LD_INT 24
24768: PUSH
24769: LD_INT 21
24771: PUSH
24772: LD_INT 19
24774: PUSH
24775: LD_INT 16
24777: PUSH
24778: LD_INT 25
24780: PUSH
24781: LD_INT 18
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: IN
24796: ST_TO_ADDR
// end ;
24797: LD_VAR 0 2
24801: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24802: LD_INT 0
24804: PPUSH
24805: PPUSH
24806: PPUSH
// result := [ ] ;
24807: LD_ADDR_VAR 0 4
24811: PUSH
24812: EMPTY
24813: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24814: LD_ADDR_VAR 0 5
24818: PUSH
24819: LD_VAR 0 2
24823: PPUSH
24824: LD_INT 21
24826: PUSH
24827: LD_INT 3
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PPUSH
24834: CALL_OW 70
24838: ST_TO_ADDR
// if not tmp then
24839: LD_VAR 0 5
24843: NOT
24844: IFFALSE 24848
// exit ;
24846: GO 24912
// if checkLink then
24848: LD_VAR 0 3
24852: IFFALSE 24902
// begin for i in tmp do
24854: LD_ADDR_VAR 0 6
24858: PUSH
24859: LD_VAR 0 5
24863: PUSH
24864: FOR_IN
24865: IFFALSE 24900
// if GetBase ( i ) <> base then
24867: LD_VAR 0 6
24871: PPUSH
24872: CALL_OW 274
24876: PUSH
24877: LD_VAR 0 1
24881: NONEQUAL
24882: IFFALSE 24898
// ComLinkToBase ( base , i ) ;
24884: LD_VAR 0 1
24888: PPUSH
24889: LD_VAR 0 6
24893: PPUSH
24894: CALL_OW 169
24898: GO 24864
24900: POP
24901: POP
// end ; result := tmp ;
24902: LD_ADDR_VAR 0 4
24906: PUSH
24907: LD_VAR 0 5
24911: ST_TO_ADDR
// end ;
24912: LD_VAR 0 4
24916: RET
// export function ComComplete ( units , b ) ; var i ; begin
24917: LD_INT 0
24919: PPUSH
24920: PPUSH
// if not units then
24921: LD_VAR 0 1
24925: NOT
24926: IFFALSE 24930
// exit ;
24928: GO 25020
// for i in units do
24930: LD_ADDR_VAR 0 4
24934: PUSH
24935: LD_VAR 0 1
24939: PUSH
24940: FOR_IN
24941: IFFALSE 25018
// if BuildingStatus ( b ) = bs_build then
24943: LD_VAR 0 2
24947: PPUSH
24948: CALL_OW 461
24952: PUSH
24953: LD_INT 1
24955: EQUAL
24956: IFFALSE 25016
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24958: LD_VAR 0 4
24962: PPUSH
24963: LD_STRING h
24965: PUSH
24966: LD_VAR 0 2
24970: PPUSH
24971: CALL_OW 250
24975: PUSH
24976: LD_VAR 0 2
24980: PPUSH
24981: CALL_OW 251
24985: PUSH
24986: LD_VAR 0 2
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: LD_INT 0
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: PUSH
25009: EMPTY
25010: LIST
25011: PPUSH
25012: CALL_OW 446
25016: GO 24940
25018: POP
25019: POP
// end ;
25020: LD_VAR 0 3
25024: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25025: LD_INT 0
25027: PPUSH
25028: PPUSH
25029: PPUSH
25030: PPUSH
25031: PPUSH
25032: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25033: LD_VAR 0 1
25037: NOT
25038: PUSH
25039: LD_VAR 0 1
25043: PPUSH
25044: CALL_OW 263
25048: PUSH
25049: LD_INT 2
25051: NONEQUAL
25052: OR
25053: IFFALSE 25057
// exit ;
25055: GO 25373
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25057: LD_ADDR_VAR 0 6
25061: PUSH
25062: LD_INT 22
25064: PUSH
25065: LD_VAR 0 1
25069: PPUSH
25070: CALL_OW 255
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 2
25081: PUSH
25082: LD_INT 30
25084: PUSH
25085: LD_INT 36
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 34
25094: PUSH
25095: LD_INT 31
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: LIST
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PPUSH
25111: CALL_OW 69
25115: ST_TO_ADDR
// if not tmp then
25116: LD_VAR 0 6
25120: NOT
25121: IFFALSE 25125
// exit ;
25123: GO 25373
// result := [ ] ;
25125: LD_ADDR_VAR 0 2
25129: PUSH
25130: EMPTY
25131: ST_TO_ADDR
// for i in tmp do
25132: LD_ADDR_VAR 0 3
25136: PUSH
25137: LD_VAR 0 6
25141: PUSH
25142: FOR_IN
25143: IFFALSE 25214
// begin t := UnitsInside ( i ) ;
25145: LD_ADDR_VAR 0 4
25149: PUSH
25150: LD_VAR 0 3
25154: PPUSH
25155: CALL_OW 313
25159: ST_TO_ADDR
// if t then
25160: LD_VAR 0 4
25164: IFFALSE 25212
// for j in t do
25166: LD_ADDR_VAR 0 7
25170: PUSH
25171: LD_VAR 0 4
25175: PUSH
25176: FOR_IN
25177: IFFALSE 25210
// result := Replace ( result , result + 1 , j ) ;
25179: LD_ADDR_VAR 0 2
25183: PUSH
25184: LD_VAR 0 2
25188: PPUSH
25189: LD_VAR 0 2
25193: PUSH
25194: LD_INT 1
25196: PLUS
25197: PPUSH
25198: LD_VAR 0 7
25202: PPUSH
25203: CALL_OW 1
25207: ST_TO_ADDR
25208: GO 25176
25210: POP
25211: POP
// end ;
25212: GO 25142
25214: POP
25215: POP
// if not result then
25216: LD_VAR 0 2
25220: NOT
25221: IFFALSE 25225
// exit ;
25223: GO 25373
// mech := result [ 1 ] ;
25225: LD_ADDR_VAR 0 5
25229: PUSH
25230: LD_VAR 0 2
25234: PUSH
25235: LD_INT 1
25237: ARRAY
25238: ST_TO_ADDR
// if result > 1 then
25239: LD_VAR 0 2
25243: PUSH
25244: LD_INT 1
25246: GREATER
25247: IFFALSE 25359
// begin for i = 2 to result do
25249: LD_ADDR_VAR 0 3
25253: PUSH
25254: DOUBLE
25255: LD_INT 2
25257: DEC
25258: ST_TO_ADDR
25259: LD_VAR 0 2
25263: PUSH
25264: FOR_TO
25265: IFFALSE 25357
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25267: LD_ADDR_VAR 0 4
25271: PUSH
25272: LD_VAR 0 2
25276: PUSH
25277: LD_VAR 0 3
25281: ARRAY
25282: PPUSH
25283: LD_INT 3
25285: PPUSH
25286: CALL_OW 259
25290: PUSH
25291: LD_VAR 0 2
25295: PUSH
25296: LD_VAR 0 3
25300: ARRAY
25301: PPUSH
25302: CALL_OW 432
25306: MINUS
25307: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25308: LD_VAR 0 4
25312: PUSH
25313: LD_VAR 0 5
25317: PPUSH
25318: LD_INT 3
25320: PPUSH
25321: CALL_OW 259
25325: PUSH
25326: LD_VAR 0 5
25330: PPUSH
25331: CALL_OW 432
25335: MINUS
25336: GREATEREQUAL
25337: IFFALSE 25355
// mech := result [ i ] ;
25339: LD_ADDR_VAR 0 5
25343: PUSH
25344: LD_VAR 0 2
25348: PUSH
25349: LD_VAR 0 3
25353: ARRAY
25354: ST_TO_ADDR
// end ;
25355: GO 25264
25357: POP
25358: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25359: LD_VAR 0 1
25363: PPUSH
25364: LD_VAR 0 5
25368: PPUSH
25369: CALL_OW 135
// end ;
25373: LD_VAR 0 2
25377: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25378: LD_INT 0
25380: PPUSH
25381: PPUSH
25382: PPUSH
25383: PPUSH
25384: PPUSH
25385: PPUSH
25386: PPUSH
25387: PPUSH
25388: PPUSH
25389: PPUSH
25390: PPUSH
25391: PPUSH
25392: PPUSH
// result := [ ] ;
25393: LD_ADDR_VAR 0 7
25397: PUSH
25398: EMPTY
25399: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25400: LD_VAR 0 1
25404: PPUSH
25405: CALL_OW 266
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: IN
25420: NOT
25421: IFFALSE 25425
// exit ;
25423: GO 27059
// if name then
25425: LD_VAR 0 3
25429: IFFALSE 25445
// SetBName ( base_dep , name ) ;
25431: LD_VAR 0 1
25435: PPUSH
25436: LD_VAR 0 3
25440: PPUSH
25441: CALL_OW 500
// base := GetBase ( base_dep ) ;
25445: LD_ADDR_VAR 0 15
25449: PUSH
25450: LD_VAR 0 1
25454: PPUSH
25455: CALL_OW 274
25459: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25460: LD_ADDR_VAR 0 16
25464: PUSH
25465: LD_VAR 0 1
25469: PPUSH
25470: CALL_OW 255
25474: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25475: LD_ADDR_VAR 0 17
25479: PUSH
25480: LD_VAR 0 1
25484: PPUSH
25485: CALL_OW 248
25489: ST_TO_ADDR
// if sources then
25490: LD_VAR 0 5
25494: IFFALSE 25541
// for i = 1 to 3 do
25496: LD_ADDR_VAR 0 8
25500: PUSH
25501: DOUBLE
25502: LD_INT 1
25504: DEC
25505: ST_TO_ADDR
25506: LD_INT 3
25508: PUSH
25509: FOR_TO
25510: IFFALSE 25539
// AddResourceType ( base , i , sources [ i ] ) ;
25512: LD_VAR 0 15
25516: PPUSH
25517: LD_VAR 0 8
25521: PPUSH
25522: LD_VAR 0 5
25526: PUSH
25527: LD_VAR 0 8
25531: ARRAY
25532: PPUSH
25533: CALL_OW 276
25537: GO 25509
25539: POP
25540: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25541: LD_ADDR_VAR 0 18
25545: PUSH
25546: LD_VAR 0 15
25550: PPUSH
25551: LD_VAR 0 2
25555: PPUSH
25556: LD_INT 1
25558: PPUSH
25559: CALL 24802 0 3
25563: ST_TO_ADDR
// InitHc ;
25564: CALL_OW 19
// InitUc ;
25568: CALL_OW 18
// uc_side := side ;
25572: LD_ADDR_OWVAR 20
25576: PUSH
25577: LD_VAR 0 16
25581: ST_TO_ADDR
// uc_nation := nation ;
25582: LD_ADDR_OWVAR 21
25586: PUSH
25587: LD_VAR 0 17
25591: ST_TO_ADDR
// if buildings then
25592: LD_VAR 0 18
25596: IFFALSE 26918
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25598: LD_ADDR_VAR 0 19
25602: PUSH
25603: LD_VAR 0 18
25607: PPUSH
25608: LD_INT 2
25610: PUSH
25611: LD_INT 30
25613: PUSH
25614: LD_INT 29
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 30
25623: PUSH
25624: LD_INT 30
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: PPUSH
25636: CALL_OW 72
25640: ST_TO_ADDR
// if tmp then
25641: LD_VAR 0 19
25645: IFFALSE 25693
// for i in tmp do
25647: LD_ADDR_VAR 0 8
25651: PUSH
25652: LD_VAR 0 19
25656: PUSH
25657: FOR_IN
25658: IFFALSE 25691
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25660: LD_VAR 0 8
25664: PPUSH
25665: CALL_OW 250
25669: PPUSH
25670: LD_VAR 0 8
25674: PPUSH
25675: CALL_OW 251
25679: PPUSH
25680: LD_VAR 0 16
25684: PPUSH
25685: CALL_OW 441
25689: GO 25657
25691: POP
25692: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25693: LD_VAR 0 18
25697: PPUSH
25698: LD_INT 2
25700: PUSH
25701: LD_INT 30
25703: PUSH
25704: LD_INT 32
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 30
25713: PUSH
25714: LD_INT 33
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: LIST
25725: PPUSH
25726: CALL_OW 72
25730: IFFALSE 25818
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25732: LD_ADDR_VAR 0 8
25736: PUSH
25737: LD_VAR 0 18
25741: PPUSH
25742: LD_INT 2
25744: PUSH
25745: LD_INT 30
25747: PUSH
25748: LD_INT 32
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 30
25757: PUSH
25758: LD_INT 33
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: LIST
25769: PPUSH
25770: CALL_OW 72
25774: PUSH
25775: FOR_IN
25776: IFFALSE 25816
// begin if not GetBWeapon ( i ) then
25778: LD_VAR 0 8
25782: PPUSH
25783: CALL_OW 269
25787: NOT
25788: IFFALSE 25814
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25790: LD_VAR 0 8
25794: PPUSH
25795: LD_VAR 0 8
25799: PPUSH
25800: LD_VAR 0 2
25804: PPUSH
25805: CALL 27064 0 2
25809: PPUSH
25810: CALL_OW 431
// end ;
25814: GO 25775
25816: POP
25817: POP
// end ; for i = 1 to personel do
25818: LD_ADDR_VAR 0 8
25822: PUSH
25823: DOUBLE
25824: LD_INT 1
25826: DEC
25827: ST_TO_ADDR
25828: LD_VAR 0 6
25832: PUSH
25833: FOR_TO
25834: IFFALSE 26898
// begin if i > 4 then
25836: LD_VAR 0 8
25840: PUSH
25841: LD_INT 4
25843: GREATER
25844: IFFALSE 25848
// break ;
25846: GO 26898
// case i of 1 :
25848: LD_VAR 0 8
25852: PUSH
25853: LD_INT 1
25855: DOUBLE
25856: EQUAL
25857: IFTRUE 25861
25859: GO 25941
25861: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25862: LD_ADDR_VAR 0 12
25866: PUSH
25867: LD_VAR 0 18
25871: PPUSH
25872: LD_INT 22
25874: PUSH
25875: LD_VAR 0 16
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 58
25886: PUSH
25887: EMPTY
25888: LIST
25889: PUSH
25890: LD_INT 2
25892: PUSH
25893: LD_INT 30
25895: PUSH
25896: LD_INT 32
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 30
25905: PUSH
25906: LD_INT 4
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 30
25915: PUSH
25916: LD_INT 5
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: LIST
25933: PPUSH
25934: CALL_OW 72
25938: ST_TO_ADDR
25939: GO 26163
25941: LD_INT 2
25943: DOUBLE
25944: EQUAL
25945: IFTRUE 25949
25947: GO 26011
25949: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25950: LD_ADDR_VAR 0 12
25954: PUSH
25955: LD_VAR 0 18
25959: PPUSH
25960: LD_INT 22
25962: PUSH
25963: LD_VAR 0 16
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: LD_INT 30
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 30
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: LIST
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PPUSH
26004: CALL_OW 72
26008: ST_TO_ADDR
26009: GO 26163
26011: LD_INT 3
26013: DOUBLE
26014: EQUAL
26015: IFTRUE 26019
26017: GO 26081
26019: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26020: LD_ADDR_VAR 0 12
26024: PUSH
26025: LD_VAR 0 18
26029: PPUSH
26030: LD_INT 22
26032: PUSH
26033: LD_VAR 0 16
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 2
26044: PUSH
26045: LD_INT 30
26047: PUSH
26048: LD_INT 2
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 30
26057: PUSH
26058: LD_INT 3
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: LIST
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PPUSH
26074: CALL_OW 72
26078: ST_TO_ADDR
26079: GO 26163
26081: LD_INT 4
26083: DOUBLE
26084: EQUAL
26085: IFTRUE 26089
26087: GO 26162
26089: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26090: LD_ADDR_VAR 0 12
26094: PUSH
26095: LD_VAR 0 18
26099: PPUSH
26100: LD_INT 22
26102: PUSH
26103: LD_VAR 0 16
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 2
26114: PUSH
26115: LD_INT 30
26117: PUSH
26118: LD_INT 6
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 30
26127: PUSH
26128: LD_INT 7
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 30
26137: PUSH
26138: LD_INT 8
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PPUSH
26155: CALL_OW 72
26159: ST_TO_ADDR
26160: GO 26163
26162: POP
// if i = 1 then
26163: LD_VAR 0 8
26167: PUSH
26168: LD_INT 1
26170: EQUAL
26171: IFFALSE 26282
// begin tmp := [ ] ;
26173: LD_ADDR_VAR 0 19
26177: PUSH
26178: EMPTY
26179: ST_TO_ADDR
// for j in f do
26180: LD_ADDR_VAR 0 9
26184: PUSH
26185: LD_VAR 0 12
26189: PUSH
26190: FOR_IN
26191: IFFALSE 26264
// if GetBType ( j ) = b_bunker then
26193: LD_VAR 0 9
26197: PPUSH
26198: CALL_OW 266
26202: PUSH
26203: LD_INT 32
26205: EQUAL
26206: IFFALSE 26233
// tmp := Insert ( tmp , 1 , j ) else
26208: LD_ADDR_VAR 0 19
26212: PUSH
26213: LD_VAR 0 19
26217: PPUSH
26218: LD_INT 1
26220: PPUSH
26221: LD_VAR 0 9
26225: PPUSH
26226: CALL_OW 2
26230: ST_TO_ADDR
26231: GO 26262
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26233: LD_ADDR_VAR 0 19
26237: PUSH
26238: LD_VAR 0 19
26242: PPUSH
26243: LD_VAR 0 19
26247: PUSH
26248: LD_INT 1
26250: PLUS
26251: PPUSH
26252: LD_VAR 0 9
26256: PPUSH
26257: CALL_OW 2
26261: ST_TO_ADDR
26262: GO 26190
26264: POP
26265: POP
// if tmp then
26266: LD_VAR 0 19
26270: IFFALSE 26282
// f := tmp ;
26272: LD_ADDR_VAR 0 12
26276: PUSH
26277: LD_VAR 0 19
26281: ST_TO_ADDR
// end ; x := personel [ i ] ;
26282: LD_ADDR_VAR 0 13
26286: PUSH
26287: LD_VAR 0 6
26291: PUSH
26292: LD_VAR 0 8
26296: ARRAY
26297: ST_TO_ADDR
// if x = - 1 then
26298: LD_VAR 0 13
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: EQUAL
26307: IFFALSE 26516
// begin for j in f do
26309: LD_ADDR_VAR 0 9
26313: PUSH
26314: LD_VAR 0 12
26318: PUSH
26319: FOR_IN
26320: IFFALSE 26512
// repeat InitHc ;
26322: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26326: LD_VAR 0 9
26330: PPUSH
26331: CALL_OW 266
26335: PUSH
26336: LD_INT 5
26338: EQUAL
26339: IFFALSE 26409
// begin if UnitsInside ( j ) < 3 then
26341: LD_VAR 0 9
26345: PPUSH
26346: CALL_OW 313
26350: PUSH
26351: LD_INT 3
26353: LESS
26354: IFFALSE 26390
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26356: LD_INT 0
26358: PPUSH
26359: LD_INT 5
26361: PUSH
26362: LD_INT 8
26364: PUSH
26365: LD_INT 9
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: LIST
26372: PUSH
26373: LD_VAR 0 17
26377: ARRAY
26378: PPUSH
26379: LD_VAR 0 4
26383: PPUSH
26384: CALL_OW 380
26388: GO 26407
// PrepareHuman ( false , i , skill ) ;
26390: LD_INT 0
26392: PPUSH
26393: LD_VAR 0 8
26397: PPUSH
26398: LD_VAR 0 4
26402: PPUSH
26403: CALL_OW 380
// end else
26407: GO 26426
// PrepareHuman ( false , i , skill ) ;
26409: LD_INT 0
26411: PPUSH
26412: LD_VAR 0 8
26416: PPUSH
26417: LD_VAR 0 4
26421: PPUSH
26422: CALL_OW 380
// un := CreateHuman ;
26426: LD_ADDR_VAR 0 14
26430: PUSH
26431: CALL_OW 44
26435: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26436: LD_ADDR_VAR 0 7
26440: PUSH
26441: LD_VAR 0 7
26445: PPUSH
26446: LD_INT 1
26448: PPUSH
26449: LD_VAR 0 14
26453: PPUSH
26454: CALL_OW 2
26458: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26459: LD_VAR 0 14
26463: PPUSH
26464: LD_VAR 0 9
26468: PPUSH
26469: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26473: LD_VAR 0 9
26477: PPUSH
26478: CALL_OW 313
26482: PUSH
26483: LD_INT 6
26485: EQUAL
26486: PUSH
26487: LD_VAR 0 9
26491: PPUSH
26492: CALL_OW 266
26496: PUSH
26497: LD_INT 32
26499: PUSH
26500: LD_INT 31
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: IN
26507: OR
26508: IFFALSE 26322
26510: GO 26319
26512: POP
26513: POP
// end else
26514: GO 26896
// for j = 1 to x do
26516: LD_ADDR_VAR 0 9
26520: PUSH
26521: DOUBLE
26522: LD_INT 1
26524: DEC
26525: ST_TO_ADDR
26526: LD_VAR 0 13
26530: PUSH
26531: FOR_TO
26532: IFFALSE 26894
// begin InitHc ;
26534: CALL_OW 19
// if not f then
26538: LD_VAR 0 12
26542: NOT
26543: IFFALSE 26632
// begin PrepareHuman ( false , i , skill ) ;
26545: LD_INT 0
26547: PPUSH
26548: LD_VAR 0 8
26552: PPUSH
26553: LD_VAR 0 4
26557: PPUSH
26558: CALL_OW 380
// un := CreateHuman ;
26562: LD_ADDR_VAR 0 14
26566: PUSH
26567: CALL_OW 44
26571: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26572: LD_ADDR_VAR 0 7
26576: PUSH
26577: LD_VAR 0 7
26581: PPUSH
26582: LD_INT 1
26584: PPUSH
26585: LD_VAR 0 14
26589: PPUSH
26590: CALL_OW 2
26594: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26595: LD_VAR 0 14
26599: PPUSH
26600: LD_VAR 0 1
26604: PPUSH
26605: CALL_OW 250
26609: PPUSH
26610: LD_VAR 0 1
26614: PPUSH
26615: CALL_OW 251
26619: PPUSH
26620: LD_INT 10
26622: PPUSH
26623: LD_INT 0
26625: PPUSH
26626: CALL_OW 50
// continue ;
26630: GO 26531
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26632: LD_VAR 0 12
26636: PUSH
26637: LD_INT 1
26639: ARRAY
26640: PPUSH
26641: CALL_OW 313
26645: PUSH
26646: LD_VAR 0 12
26650: PUSH
26651: LD_INT 1
26653: ARRAY
26654: PPUSH
26655: CALL_OW 266
26659: PUSH
26660: LD_INT 32
26662: PUSH
26663: LD_INT 31
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: IN
26670: AND
26671: PUSH
26672: LD_VAR 0 12
26676: PUSH
26677: LD_INT 1
26679: ARRAY
26680: PPUSH
26681: CALL_OW 313
26685: PUSH
26686: LD_INT 6
26688: EQUAL
26689: OR
26690: IFFALSE 26710
// f := Delete ( f , 1 ) ;
26692: LD_ADDR_VAR 0 12
26696: PUSH
26697: LD_VAR 0 12
26701: PPUSH
26702: LD_INT 1
26704: PPUSH
26705: CALL_OW 3
26709: ST_TO_ADDR
// if not f then
26710: LD_VAR 0 12
26714: NOT
26715: IFFALSE 26733
// begin x := x + 2 ;
26717: LD_ADDR_VAR 0 13
26721: PUSH
26722: LD_VAR 0 13
26726: PUSH
26727: LD_INT 2
26729: PLUS
26730: ST_TO_ADDR
// continue ;
26731: GO 26531
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26733: LD_VAR 0 12
26737: PUSH
26738: LD_INT 1
26740: ARRAY
26741: PPUSH
26742: CALL_OW 266
26746: PUSH
26747: LD_INT 5
26749: EQUAL
26750: IFFALSE 26824
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26752: LD_VAR 0 12
26756: PUSH
26757: LD_INT 1
26759: ARRAY
26760: PPUSH
26761: CALL_OW 313
26765: PUSH
26766: LD_INT 3
26768: LESS
26769: IFFALSE 26805
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26771: LD_INT 0
26773: PPUSH
26774: LD_INT 5
26776: PUSH
26777: LD_INT 8
26779: PUSH
26780: LD_INT 9
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: LIST
26787: PUSH
26788: LD_VAR 0 17
26792: ARRAY
26793: PPUSH
26794: LD_VAR 0 4
26798: PPUSH
26799: CALL_OW 380
26803: GO 26822
// PrepareHuman ( false , i , skill ) ;
26805: LD_INT 0
26807: PPUSH
26808: LD_VAR 0 8
26812: PPUSH
26813: LD_VAR 0 4
26817: PPUSH
26818: CALL_OW 380
// end else
26822: GO 26841
// PrepareHuman ( false , i , skill ) ;
26824: LD_INT 0
26826: PPUSH
26827: LD_VAR 0 8
26831: PPUSH
26832: LD_VAR 0 4
26836: PPUSH
26837: CALL_OW 380
// un := CreateHuman ;
26841: LD_ADDR_VAR 0 14
26845: PUSH
26846: CALL_OW 44
26850: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26851: LD_ADDR_VAR 0 7
26855: PUSH
26856: LD_VAR 0 7
26860: PPUSH
26861: LD_INT 1
26863: PPUSH
26864: LD_VAR 0 14
26868: PPUSH
26869: CALL_OW 2
26873: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26874: LD_VAR 0 14
26878: PPUSH
26879: LD_VAR 0 12
26883: PUSH
26884: LD_INT 1
26886: ARRAY
26887: PPUSH
26888: CALL_OW 52
// end ;
26892: GO 26531
26894: POP
26895: POP
// end ;
26896: GO 25833
26898: POP
26899: POP
// result := result ^ buildings ;
26900: LD_ADDR_VAR 0 7
26904: PUSH
26905: LD_VAR 0 7
26909: PUSH
26910: LD_VAR 0 18
26914: ADD
26915: ST_TO_ADDR
// end else
26916: GO 27059
// begin for i = 1 to personel do
26918: LD_ADDR_VAR 0 8
26922: PUSH
26923: DOUBLE
26924: LD_INT 1
26926: DEC
26927: ST_TO_ADDR
26928: LD_VAR 0 6
26932: PUSH
26933: FOR_TO
26934: IFFALSE 27057
// begin if i > 4 then
26936: LD_VAR 0 8
26940: PUSH
26941: LD_INT 4
26943: GREATER
26944: IFFALSE 26948
// break ;
26946: GO 27057
// x := personel [ i ] ;
26948: LD_ADDR_VAR 0 13
26952: PUSH
26953: LD_VAR 0 6
26957: PUSH
26958: LD_VAR 0 8
26962: ARRAY
26963: ST_TO_ADDR
// if x = - 1 then
26964: LD_VAR 0 13
26968: PUSH
26969: LD_INT 1
26971: NEG
26972: EQUAL
26973: IFFALSE 26977
// continue ;
26975: GO 26933
// PrepareHuman ( false , i , skill ) ;
26977: LD_INT 0
26979: PPUSH
26980: LD_VAR 0 8
26984: PPUSH
26985: LD_VAR 0 4
26989: PPUSH
26990: CALL_OW 380
// un := CreateHuman ;
26994: LD_ADDR_VAR 0 14
26998: PUSH
26999: CALL_OW 44
27003: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27004: LD_VAR 0 14
27008: PPUSH
27009: LD_VAR 0 1
27013: PPUSH
27014: CALL_OW 250
27018: PPUSH
27019: LD_VAR 0 1
27023: PPUSH
27024: CALL_OW 251
27028: PPUSH
27029: LD_INT 10
27031: PPUSH
27032: LD_INT 0
27034: PPUSH
27035: CALL_OW 50
// result := result ^ un ;
27039: LD_ADDR_VAR 0 7
27043: PUSH
27044: LD_VAR 0 7
27048: PUSH
27049: LD_VAR 0 14
27053: ADD
27054: ST_TO_ADDR
// end ;
27055: GO 26933
27057: POP
27058: POP
// end ; end ;
27059: LD_VAR 0 7
27063: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27064: LD_INT 0
27066: PPUSH
27067: PPUSH
27068: PPUSH
27069: PPUSH
27070: PPUSH
27071: PPUSH
27072: PPUSH
27073: PPUSH
27074: PPUSH
27075: PPUSH
27076: PPUSH
27077: PPUSH
27078: PPUSH
27079: PPUSH
27080: PPUSH
27081: PPUSH
// result := false ;
27082: LD_ADDR_VAR 0 3
27086: PUSH
27087: LD_INT 0
27089: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27090: LD_VAR 0 1
27094: NOT
27095: PUSH
27096: LD_VAR 0 1
27100: PPUSH
27101: CALL_OW 266
27105: PUSH
27106: LD_INT 32
27108: PUSH
27109: LD_INT 33
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: IN
27116: NOT
27117: OR
27118: IFFALSE 27122
// exit ;
27120: GO 28231
// nat := GetNation ( tower ) ;
27122: LD_ADDR_VAR 0 12
27126: PUSH
27127: LD_VAR 0 1
27131: PPUSH
27132: CALL_OW 248
27136: ST_TO_ADDR
// side := GetSide ( tower ) ;
27137: LD_ADDR_VAR 0 16
27141: PUSH
27142: LD_VAR 0 1
27146: PPUSH
27147: CALL_OW 255
27151: ST_TO_ADDR
// x := GetX ( tower ) ;
27152: LD_ADDR_VAR 0 10
27156: PUSH
27157: LD_VAR 0 1
27161: PPUSH
27162: CALL_OW 250
27166: ST_TO_ADDR
// y := GetY ( tower ) ;
27167: LD_ADDR_VAR 0 11
27171: PUSH
27172: LD_VAR 0 1
27176: PPUSH
27177: CALL_OW 251
27181: ST_TO_ADDR
// if not x or not y then
27182: LD_VAR 0 10
27186: NOT
27187: PUSH
27188: LD_VAR 0 11
27192: NOT
27193: OR
27194: IFFALSE 27198
// exit ;
27196: GO 28231
// weapon := 0 ;
27198: LD_ADDR_VAR 0 18
27202: PUSH
27203: LD_INT 0
27205: ST_TO_ADDR
// fac_list := [ ] ;
27206: LD_ADDR_VAR 0 17
27210: PUSH
27211: EMPTY
27212: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27213: LD_ADDR_VAR 0 6
27217: PUSH
27218: LD_VAR 0 1
27222: PPUSH
27223: CALL_OW 274
27227: PPUSH
27228: LD_VAR 0 2
27232: PPUSH
27233: LD_INT 0
27235: PPUSH
27236: CALL 24802 0 3
27240: PPUSH
27241: LD_INT 30
27243: PUSH
27244: LD_INT 3
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PPUSH
27251: CALL_OW 72
27255: ST_TO_ADDR
// if not factories then
27256: LD_VAR 0 6
27260: NOT
27261: IFFALSE 27265
// exit ;
27263: GO 28231
// for i in factories do
27265: LD_ADDR_VAR 0 8
27269: PUSH
27270: LD_VAR 0 6
27274: PUSH
27275: FOR_IN
27276: IFFALSE 27301
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27278: LD_ADDR_VAR 0 17
27282: PUSH
27283: LD_VAR 0 17
27287: PUSH
27288: LD_VAR 0 8
27292: PPUSH
27293: CALL_OW 478
27297: UNION
27298: ST_TO_ADDR
27299: GO 27275
27301: POP
27302: POP
// if not fac_list then
27303: LD_VAR 0 17
27307: NOT
27308: IFFALSE 27312
// exit ;
27310: GO 28231
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27312: LD_ADDR_VAR 0 5
27316: PUSH
27317: LD_INT 4
27319: PUSH
27320: LD_INT 5
27322: PUSH
27323: LD_INT 9
27325: PUSH
27326: LD_INT 10
27328: PUSH
27329: LD_INT 6
27331: PUSH
27332: LD_INT 7
27334: PUSH
27335: LD_INT 11
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 27
27349: PUSH
27350: LD_INT 28
27352: PUSH
27353: LD_INT 26
27355: PUSH
27356: LD_INT 30
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 43
27367: PUSH
27368: LD_INT 44
27370: PUSH
27371: LD_INT 46
27373: PUSH
27374: LD_INT 45
27376: PUSH
27377: LD_INT 47
27379: PUSH
27380: LD_INT 49
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: LIST
27395: PUSH
27396: LD_VAR 0 12
27400: ARRAY
27401: ST_TO_ADDR
// list := list isect fac_list ;
27402: LD_ADDR_VAR 0 5
27406: PUSH
27407: LD_VAR 0 5
27411: PUSH
27412: LD_VAR 0 17
27416: ISECT
27417: ST_TO_ADDR
// if not list then
27418: LD_VAR 0 5
27422: NOT
27423: IFFALSE 27427
// exit ;
27425: GO 28231
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27427: LD_VAR 0 12
27431: PUSH
27432: LD_INT 3
27434: EQUAL
27435: PUSH
27436: LD_INT 49
27438: PUSH
27439: LD_VAR 0 5
27443: IN
27444: AND
27445: PUSH
27446: LD_INT 31
27448: PPUSH
27449: LD_VAR 0 16
27453: PPUSH
27454: CALL_OW 321
27458: PUSH
27459: LD_INT 2
27461: EQUAL
27462: AND
27463: IFFALSE 27523
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27465: LD_INT 22
27467: PUSH
27468: LD_VAR 0 16
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 35
27479: PUSH
27480: LD_INT 49
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 91
27489: PUSH
27490: LD_VAR 0 1
27494: PUSH
27495: LD_INT 10
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: LIST
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: LIST
27507: PPUSH
27508: CALL_OW 69
27512: NOT
27513: IFFALSE 27523
// weapon := ru_time_lapser ;
27515: LD_ADDR_VAR 0 18
27519: PUSH
27520: LD_INT 49
27522: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27523: LD_VAR 0 12
27527: PUSH
27528: LD_INT 1
27530: PUSH
27531: LD_INT 2
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: IN
27538: PUSH
27539: LD_INT 11
27541: PUSH
27542: LD_VAR 0 5
27546: IN
27547: PUSH
27548: LD_INT 30
27550: PUSH
27551: LD_VAR 0 5
27555: IN
27556: OR
27557: AND
27558: PUSH
27559: LD_INT 6
27561: PPUSH
27562: LD_VAR 0 16
27566: PPUSH
27567: CALL_OW 321
27571: PUSH
27572: LD_INT 2
27574: EQUAL
27575: AND
27576: IFFALSE 27741
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27578: LD_INT 22
27580: PUSH
27581: LD_VAR 0 16
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 2
27592: PUSH
27593: LD_INT 35
27595: PUSH
27596: LD_INT 11
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 35
27605: PUSH
27606: LD_INT 30
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 91
27620: PUSH
27621: LD_VAR 0 1
27625: PUSH
27626: LD_INT 18
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: LIST
27638: PPUSH
27639: CALL_OW 69
27643: NOT
27644: PUSH
27645: LD_INT 22
27647: PUSH
27648: LD_VAR 0 16
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 2
27659: PUSH
27660: LD_INT 30
27662: PUSH
27663: LD_INT 32
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 30
27672: PUSH
27673: LD_INT 33
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 91
27687: PUSH
27688: LD_VAR 0 1
27692: PUSH
27693: LD_INT 12
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: PUSH
27706: EMPTY
27707: LIST
27708: PPUSH
27709: CALL_OW 69
27713: PUSH
27714: LD_INT 2
27716: GREATER
27717: AND
27718: IFFALSE 27741
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27720: LD_ADDR_VAR 0 18
27724: PUSH
27725: LD_INT 11
27727: PUSH
27728: LD_INT 30
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_VAR 0 12
27739: ARRAY
27740: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27741: LD_VAR 0 18
27745: NOT
27746: PUSH
27747: LD_INT 40
27749: PPUSH
27750: LD_VAR 0 16
27754: PPUSH
27755: CALL_OW 321
27759: PUSH
27760: LD_INT 2
27762: EQUAL
27763: AND
27764: PUSH
27765: LD_INT 7
27767: PUSH
27768: LD_VAR 0 5
27772: IN
27773: PUSH
27774: LD_INT 28
27776: PUSH
27777: LD_VAR 0 5
27781: IN
27782: OR
27783: PUSH
27784: LD_INT 45
27786: PUSH
27787: LD_VAR 0 5
27791: IN
27792: OR
27793: AND
27794: IFFALSE 28048
// begin hex := GetHexInfo ( x , y ) ;
27796: LD_ADDR_VAR 0 4
27800: PUSH
27801: LD_VAR 0 10
27805: PPUSH
27806: LD_VAR 0 11
27810: PPUSH
27811: CALL_OW 546
27815: ST_TO_ADDR
// if hex [ 1 ] then
27816: LD_VAR 0 4
27820: PUSH
27821: LD_INT 1
27823: ARRAY
27824: IFFALSE 27828
// exit ;
27826: GO 28231
// height := hex [ 2 ] ;
27828: LD_ADDR_VAR 0 15
27832: PUSH
27833: LD_VAR 0 4
27837: PUSH
27838: LD_INT 2
27840: ARRAY
27841: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27842: LD_ADDR_VAR 0 14
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: LD_INT 2
27852: PUSH
27853: LD_INT 3
27855: PUSH
27856: LD_INT 5
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: ST_TO_ADDR
// for i in tmp do
27865: LD_ADDR_VAR 0 8
27869: PUSH
27870: LD_VAR 0 14
27874: PUSH
27875: FOR_IN
27876: IFFALSE 28046
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27878: LD_ADDR_VAR 0 9
27882: PUSH
27883: LD_VAR 0 10
27887: PPUSH
27888: LD_VAR 0 8
27892: PPUSH
27893: LD_INT 5
27895: PPUSH
27896: CALL_OW 272
27900: PUSH
27901: LD_VAR 0 11
27905: PPUSH
27906: LD_VAR 0 8
27910: PPUSH
27911: LD_INT 5
27913: PPUSH
27914: CALL_OW 273
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27923: LD_VAR 0 9
27927: PUSH
27928: LD_INT 1
27930: ARRAY
27931: PPUSH
27932: LD_VAR 0 9
27936: PUSH
27937: LD_INT 2
27939: ARRAY
27940: PPUSH
27941: CALL_OW 488
27945: IFFALSE 28044
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27947: LD_ADDR_VAR 0 4
27951: PUSH
27952: LD_VAR 0 9
27956: PUSH
27957: LD_INT 1
27959: ARRAY
27960: PPUSH
27961: LD_VAR 0 9
27965: PUSH
27966: LD_INT 2
27968: ARRAY
27969: PPUSH
27970: CALL_OW 546
27974: ST_TO_ADDR
// if hex [ 1 ] then
27975: LD_VAR 0 4
27979: PUSH
27980: LD_INT 1
27982: ARRAY
27983: IFFALSE 27987
// continue ;
27985: GO 27875
// h := hex [ 2 ] ;
27987: LD_ADDR_VAR 0 13
27991: PUSH
27992: LD_VAR 0 4
27996: PUSH
27997: LD_INT 2
27999: ARRAY
28000: ST_TO_ADDR
// if h + 7 < height then
28001: LD_VAR 0 13
28005: PUSH
28006: LD_INT 7
28008: PLUS
28009: PUSH
28010: LD_VAR 0 15
28014: LESS
28015: IFFALSE 28044
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28017: LD_ADDR_VAR 0 18
28021: PUSH
28022: LD_INT 7
28024: PUSH
28025: LD_INT 28
28027: PUSH
28028: LD_INT 45
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: LIST
28035: PUSH
28036: LD_VAR 0 12
28040: ARRAY
28041: ST_TO_ADDR
// break ;
28042: GO 28046
// end ; end ; end ;
28044: GO 27875
28046: POP
28047: POP
// end ; if not weapon then
28048: LD_VAR 0 18
28052: NOT
28053: IFFALSE 28113
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28055: LD_ADDR_VAR 0 5
28059: PUSH
28060: LD_VAR 0 5
28064: PUSH
28065: LD_INT 11
28067: PUSH
28068: LD_INT 30
28070: PUSH
28071: LD_INT 49
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: DIFF
28079: ST_TO_ADDR
// if not list then
28080: LD_VAR 0 5
28084: NOT
28085: IFFALSE 28089
// exit ;
28087: GO 28231
// weapon := list [ rand ( 1 , list ) ] ;
28089: LD_ADDR_VAR 0 18
28093: PUSH
28094: LD_VAR 0 5
28098: PUSH
28099: LD_INT 1
28101: PPUSH
28102: LD_VAR 0 5
28106: PPUSH
28107: CALL_OW 12
28111: ARRAY
28112: ST_TO_ADDR
// end ; if weapon then
28113: LD_VAR 0 18
28117: IFFALSE 28231
// begin tmp := CostOfWeapon ( weapon ) ;
28119: LD_ADDR_VAR 0 14
28123: PUSH
28124: LD_VAR 0 18
28128: PPUSH
28129: CALL_OW 451
28133: ST_TO_ADDR
// j := GetBase ( tower ) ;
28134: LD_ADDR_VAR 0 9
28138: PUSH
28139: LD_VAR 0 1
28143: PPUSH
28144: CALL_OW 274
28148: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28149: LD_VAR 0 9
28153: PPUSH
28154: LD_INT 1
28156: PPUSH
28157: CALL_OW 275
28161: PUSH
28162: LD_VAR 0 14
28166: PUSH
28167: LD_INT 1
28169: ARRAY
28170: GREATEREQUAL
28171: PUSH
28172: LD_VAR 0 9
28176: PPUSH
28177: LD_INT 2
28179: PPUSH
28180: CALL_OW 275
28184: PUSH
28185: LD_VAR 0 14
28189: PUSH
28190: LD_INT 2
28192: ARRAY
28193: GREATEREQUAL
28194: AND
28195: PUSH
28196: LD_VAR 0 9
28200: PPUSH
28201: LD_INT 3
28203: PPUSH
28204: CALL_OW 275
28208: PUSH
28209: LD_VAR 0 14
28213: PUSH
28214: LD_INT 3
28216: ARRAY
28217: GREATEREQUAL
28218: AND
28219: IFFALSE 28231
// result := weapon ;
28221: LD_ADDR_VAR 0 3
28225: PUSH
28226: LD_VAR 0 18
28230: ST_TO_ADDR
// end ; end ;
28231: LD_VAR 0 3
28235: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28236: LD_INT 0
28238: PPUSH
28239: PPUSH
// result := true ;
28240: LD_ADDR_VAR 0 3
28244: PUSH
28245: LD_INT 1
28247: ST_TO_ADDR
// if array1 = array2 then
28248: LD_VAR 0 1
28252: PUSH
28253: LD_VAR 0 2
28257: EQUAL
28258: IFFALSE 28318
// begin for i = 1 to array1 do
28260: LD_ADDR_VAR 0 4
28264: PUSH
28265: DOUBLE
28266: LD_INT 1
28268: DEC
28269: ST_TO_ADDR
28270: LD_VAR 0 1
28274: PUSH
28275: FOR_TO
28276: IFFALSE 28314
// if array1 [ i ] <> array2 [ i ] then
28278: LD_VAR 0 1
28282: PUSH
28283: LD_VAR 0 4
28287: ARRAY
28288: PUSH
28289: LD_VAR 0 2
28293: PUSH
28294: LD_VAR 0 4
28298: ARRAY
28299: NONEQUAL
28300: IFFALSE 28312
// begin result := false ;
28302: LD_ADDR_VAR 0 3
28306: PUSH
28307: LD_INT 0
28309: ST_TO_ADDR
// break ;
28310: GO 28314
// end ;
28312: GO 28275
28314: POP
28315: POP
// end else
28316: GO 28326
// result := false ;
28318: LD_ADDR_VAR 0 3
28322: PUSH
28323: LD_INT 0
28325: ST_TO_ADDR
// end ;
28326: LD_VAR 0 3
28330: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28331: LD_INT 0
28333: PPUSH
28334: PPUSH
// if not array1 or not array2 then
28335: LD_VAR 0 1
28339: NOT
28340: PUSH
28341: LD_VAR 0 2
28345: NOT
28346: OR
28347: IFFALSE 28351
// exit ;
28349: GO 28415
// result := true ;
28351: LD_ADDR_VAR 0 3
28355: PUSH
28356: LD_INT 1
28358: ST_TO_ADDR
// for i = 1 to array1 do
28359: LD_ADDR_VAR 0 4
28363: PUSH
28364: DOUBLE
28365: LD_INT 1
28367: DEC
28368: ST_TO_ADDR
28369: LD_VAR 0 1
28373: PUSH
28374: FOR_TO
28375: IFFALSE 28413
// if array1 [ i ] <> array2 [ i ] then
28377: LD_VAR 0 1
28381: PUSH
28382: LD_VAR 0 4
28386: ARRAY
28387: PUSH
28388: LD_VAR 0 2
28392: PUSH
28393: LD_VAR 0 4
28397: ARRAY
28398: NONEQUAL
28399: IFFALSE 28411
// begin result := false ;
28401: LD_ADDR_VAR 0 3
28405: PUSH
28406: LD_INT 0
28408: ST_TO_ADDR
// break ;
28409: GO 28413
// end ;
28411: GO 28374
28413: POP
28414: POP
// end ;
28415: LD_VAR 0 3
28419: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28420: LD_INT 0
28422: PPUSH
28423: PPUSH
28424: PPUSH
// pom := GetBase ( fac ) ;
28425: LD_ADDR_VAR 0 5
28429: PUSH
28430: LD_VAR 0 1
28434: PPUSH
28435: CALL_OW 274
28439: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28440: LD_ADDR_VAR 0 4
28444: PUSH
28445: LD_VAR 0 2
28449: PUSH
28450: LD_INT 1
28452: ARRAY
28453: PPUSH
28454: LD_VAR 0 2
28458: PUSH
28459: LD_INT 2
28461: ARRAY
28462: PPUSH
28463: LD_VAR 0 2
28467: PUSH
28468: LD_INT 3
28470: ARRAY
28471: PPUSH
28472: LD_VAR 0 2
28476: PUSH
28477: LD_INT 4
28479: ARRAY
28480: PPUSH
28481: CALL_OW 449
28485: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28486: LD_ADDR_VAR 0 3
28490: PUSH
28491: LD_VAR 0 5
28495: PPUSH
28496: LD_INT 1
28498: PPUSH
28499: CALL_OW 275
28503: PUSH
28504: LD_VAR 0 4
28508: PUSH
28509: LD_INT 1
28511: ARRAY
28512: GREATEREQUAL
28513: PUSH
28514: LD_VAR 0 5
28518: PPUSH
28519: LD_INT 2
28521: PPUSH
28522: CALL_OW 275
28526: PUSH
28527: LD_VAR 0 4
28531: PUSH
28532: LD_INT 2
28534: ARRAY
28535: GREATEREQUAL
28536: AND
28537: PUSH
28538: LD_VAR 0 5
28542: PPUSH
28543: LD_INT 3
28545: PPUSH
28546: CALL_OW 275
28550: PUSH
28551: LD_VAR 0 4
28555: PUSH
28556: LD_INT 3
28558: ARRAY
28559: GREATEREQUAL
28560: AND
28561: ST_TO_ADDR
// end ;
28562: LD_VAR 0 3
28566: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28567: LD_INT 0
28569: PPUSH
28570: PPUSH
28571: PPUSH
28572: PPUSH
// pom := GetBase ( building ) ;
28573: LD_ADDR_VAR 0 3
28577: PUSH
28578: LD_VAR 0 1
28582: PPUSH
28583: CALL_OW 274
28587: ST_TO_ADDR
// if not pom then
28588: LD_VAR 0 3
28592: NOT
28593: IFFALSE 28597
// exit ;
28595: GO 28767
// btype := GetBType ( building ) ;
28597: LD_ADDR_VAR 0 5
28601: PUSH
28602: LD_VAR 0 1
28606: PPUSH
28607: CALL_OW 266
28611: ST_TO_ADDR
// if btype = b_armoury then
28612: LD_VAR 0 5
28616: PUSH
28617: LD_INT 4
28619: EQUAL
28620: IFFALSE 28630
// btype := b_barracks ;
28622: LD_ADDR_VAR 0 5
28626: PUSH
28627: LD_INT 5
28629: ST_TO_ADDR
// if btype = b_depot then
28630: LD_VAR 0 5
28634: PUSH
28635: LD_INT 0
28637: EQUAL
28638: IFFALSE 28648
// btype := b_warehouse ;
28640: LD_ADDR_VAR 0 5
28644: PUSH
28645: LD_INT 1
28647: ST_TO_ADDR
// if btype = b_workshop then
28648: LD_VAR 0 5
28652: PUSH
28653: LD_INT 2
28655: EQUAL
28656: IFFALSE 28666
// btype := b_factory ;
28658: LD_ADDR_VAR 0 5
28662: PUSH
28663: LD_INT 3
28665: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28666: LD_ADDR_VAR 0 4
28670: PUSH
28671: LD_VAR 0 5
28675: PPUSH
28676: LD_VAR 0 1
28680: PPUSH
28681: CALL_OW 248
28685: PPUSH
28686: CALL_OW 450
28690: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28691: LD_ADDR_VAR 0 2
28695: PUSH
28696: LD_VAR 0 3
28700: PPUSH
28701: LD_INT 1
28703: PPUSH
28704: CALL_OW 275
28708: PUSH
28709: LD_VAR 0 4
28713: PUSH
28714: LD_INT 1
28716: ARRAY
28717: GREATEREQUAL
28718: PUSH
28719: LD_VAR 0 3
28723: PPUSH
28724: LD_INT 2
28726: PPUSH
28727: CALL_OW 275
28731: PUSH
28732: LD_VAR 0 4
28736: PUSH
28737: LD_INT 2
28739: ARRAY
28740: GREATEREQUAL
28741: AND
28742: PUSH
28743: LD_VAR 0 3
28747: PPUSH
28748: LD_INT 3
28750: PPUSH
28751: CALL_OW 275
28755: PUSH
28756: LD_VAR 0 4
28760: PUSH
28761: LD_INT 3
28763: ARRAY
28764: GREATEREQUAL
28765: AND
28766: ST_TO_ADDR
// end ;
28767: LD_VAR 0 2
28771: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28772: LD_INT 0
28774: PPUSH
28775: PPUSH
28776: PPUSH
// pom := GetBase ( building ) ;
28777: LD_ADDR_VAR 0 4
28781: PUSH
28782: LD_VAR 0 1
28786: PPUSH
28787: CALL_OW 274
28791: ST_TO_ADDR
// if not pom then
28792: LD_VAR 0 4
28796: NOT
28797: IFFALSE 28801
// exit ;
28799: GO 28902
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28801: LD_ADDR_VAR 0 5
28805: PUSH
28806: LD_VAR 0 2
28810: PPUSH
28811: LD_VAR 0 1
28815: PPUSH
28816: CALL_OW 248
28820: PPUSH
28821: CALL_OW 450
28825: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28826: LD_ADDR_VAR 0 3
28830: PUSH
28831: LD_VAR 0 4
28835: PPUSH
28836: LD_INT 1
28838: PPUSH
28839: CALL_OW 275
28843: PUSH
28844: LD_VAR 0 5
28848: PUSH
28849: LD_INT 1
28851: ARRAY
28852: GREATEREQUAL
28853: PUSH
28854: LD_VAR 0 4
28858: PPUSH
28859: LD_INT 2
28861: PPUSH
28862: CALL_OW 275
28866: PUSH
28867: LD_VAR 0 5
28871: PUSH
28872: LD_INT 2
28874: ARRAY
28875: GREATEREQUAL
28876: AND
28877: PUSH
28878: LD_VAR 0 4
28882: PPUSH
28883: LD_INT 3
28885: PPUSH
28886: CALL_OW 275
28890: PUSH
28891: LD_VAR 0 5
28895: PUSH
28896: LD_INT 3
28898: ARRAY
28899: GREATEREQUAL
28900: AND
28901: ST_TO_ADDR
// end ;
28902: LD_VAR 0 3
28906: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28907: LD_INT 0
28909: PPUSH
28910: PPUSH
28911: PPUSH
28912: PPUSH
28913: PPUSH
28914: PPUSH
28915: PPUSH
28916: PPUSH
28917: PPUSH
28918: PPUSH
28919: PPUSH
// result := false ;
28920: LD_ADDR_VAR 0 8
28924: PUSH
28925: LD_INT 0
28927: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28928: LD_VAR 0 5
28932: NOT
28933: PUSH
28934: LD_VAR 0 1
28938: NOT
28939: OR
28940: PUSH
28941: LD_VAR 0 2
28945: NOT
28946: OR
28947: PUSH
28948: LD_VAR 0 3
28952: NOT
28953: OR
28954: IFFALSE 28958
// exit ;
28956: GO 29772
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28958: LD_ADDR_VAR 0 14
28962: PUSH
28963: LD_VAR 0 1
28967: PPUSH
28968: LD_VAR 0 2
28972: PPUSH
28973: LD_VAR 0 3
28977: PPUSH
28978: LD_VAR 0 4
28982: PPUSH
28983: LD_VAR 0 5
28987: PUSH
28988: LD_INT 1
28990: ARRAY
28991: PPUSH
28992: CALL_OW 248
28996: PPUSH
28997: LD_INT 0
28999: PPUSH
29000: CALL 31025 0 6
29004: ST_TO_ADDR
// if not hexes then
29005: LD_VAR 0 14
29009: NOT
29010: IFFALSE 29014
// exit ;
29012: GO 29772
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29014: LD_ADDR_VAR 0 17
29018: PUSH
29019: LD_VAR 0 5
29023: PPUSH
29024: LD_INT 22
29026: PUSH
29027: LD_VAR 0 13
29031: PPUSH
29032: CALL_OW 255
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 2
29043: PUSH
29044: LD_INT 30
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 30
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: LIST
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PPUSH
29073: CALL_OW 72
29077: ST_TO_ADDR
// for i = 1 to hexes do
29078: LD_ADDR_VAR 0 9
29082: PUSH
29083: DOUBLE
29084: LD_INT 1
29086: DEC
29087: ST_TO_ADDR
29088: LD_VAR 0 14
29092: PUSH
29093: FOR_TO
29094: IFFALSE 29770
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29096: LD_ADDR_VAR 0 13
29100: PUSH
29101: LD_VAR 0 14
29105: PUSH
29106: LD_VAR 0 9
29110: ARRAY
29111: PUSH
29112: LD_INT 1
29114: ARRAY
29115: PPUSH
29116: LD_VAR 0 14
29120: PUSH
29121: LD_VAR 0 9
29125: ARRAY
29126: PUSH
29127: LD_INT 2
29129: ARRAY
29130: PPUSH
29131: CALL_OW 428
29135: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29136: LD_VAR 0 14
29140: PUSH
29141: LD_VAR 0 9
29145: ARRAY
29146: PUSH
29147: LD_INT 1
29149: ARRAY
29150: PPUSH
29151: LD_VAR 0 14
29155: PUSH
29156: LD_VAR 0 9
29160: ARRAY
29161: PUSH
29162: LD_INT 2
29164: ARRAY
29165: PPUSH
29166: CALL_OW 351
29170: PUSH
29171: LD_VAR 0 14
29175: PUSH
29176: LD_VAR 0 9
29180: ARRAY
29181: PUSH
29182: LD_INT 1
29184: ARRAY
29185: PPUSH
29186: LD_VAR 0 14
29190: PUSH
29191: LD_VAR 0 9
29195: ARRAY
29196: PUSH
29197: LD_INT 2
29199: ARRAY
29200: PPUSH
29201: CALL_OW 488
29205: NOT
29206: OR
29207: PUSH
29208: LD_VAR 0 13
29212: PPUSH
29213: CALL_OW 247
29217: PUSH
29218: LD_INT 3
29220: EQUAL
29221: OR
29222: IFFALSE 29228
// exit ;
29224: POP
29225: POP
29226: GO 29772
// if not tmp then
29228: LD_VAR 0 13
29232: NOT
29233: IFFALSE 29237
// continue ;
29235: GO 29093
// result := true ;
29237: LD_ADDR_VAR 0 8
29241: PUSH
29242: LD_INT 1
29244: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29245: LD_VAR 0 6
29249: PUSH
29250: LD_VAR 0 13
29254: PPUSH
29255: CALL_OW 247
29259: PUSH
29260: LD_INT 2
29262: EQUAL
29263: AND
29264: PUSH
29265: LD_VAR 0 13
29269: PPUSH
29270: CALL_OW 263
29274: PUSH
29275: LD_INT 1
29277: EQUAL
29278: AND
29279: IFFALSE 29443
// begin if IsDrivenBy ( tmp ) then
29281: LD_VAR 0 13
29285: PPUSH
29286: CALL_OW 311
29290: IFFALSE 29294
// continue ;
29292: GO 29093
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29294: LD_VAR 0 6
29298: PPUSH
29299: LD_INT 3
29301: PUSH
29302: LD_INT 60
29304: PUSH
29305: EMPTY
29306: LIST
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 3
29314: PUSH
29315: LD_INT 55
29317: PUSH
29318: EMPTY
29319: LIST
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PPUSH
29329: CALL_OW 72
29333: IFFALSE 29441
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29335: LD_ADDR_VAR 0 18
29339: PUSH
29340: LD_VAR 0 6
29344: PPUSH
29345: LD_INT 3
29347: PUSH
29348: LD_INT 60
29350: PUSH
29351: EMPTY
29352: LIST
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 3
29360: PUSH
29361: LD_INT 55
29363: PUSH
29364: EMPTY
29365: LIST
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PPUSH
29375: CALL_OW 72
29379: PUSH
29380: LD_INT 1
29382: ARRAY
29383: ST_TO_ADDR
// if IsInUnit ( driver ) then
29384: LD_VAR 0 18
29388: PPUSH
29389: CALL_OW 310
29393: IFFALSE 29404
// ComExit ( driver ) ;
29395: LD_VAR 0 18
29399: PPUSH
29400: CALL 54806 0 1
// AddComEnterUnit ( driver , tmp ) ;
29404: LD_VAR 0 18
29408: PPUSH
29409: LD_VAR 0 13
29413: PPUSH
29414: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29418: LD_VAR 0 18
29422: PPUSH
29423: LD_VAR 0 7
29427: PPUSH
29428: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29432: LD_VAR 0 18
29436: PPUSH
29437: CALL_OW 181
// end ; continue ;
29441: GO 29093
// end ; if not cleaners or not tmp in cleaners then
29443: LD_VAR 0 6
29447: NOT
29448: PUSH
29449: LD_VAR 0 13
29453: PUSH
29454: LD_VAR 0 6
29458: IN
29459: NOT
29460: OR
29461: IFFALSE 29768
// begin if dep then
29463: LD_VAR 0 17
29467: IFFALSE 29603
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29469: LD_ADDR_VAR 0 16
29473: PUSH
29474: LD_VAR 0 17
29478: PUSH
29479: LD_INT 1
29481: ARRAY
29482: PPUSH
29483: CALL_OW 250
29487: PPUSH
29488: LD_VAR 0 17
29492: PUSH
29493: LD_INT 1
29495: ARRAY
29496: PPUSH
29497: CALL_OW 254
29501: PPUSH
29502: LD_INT 5
29504: PPUSH
29505: CALL_OW 272
29509: PUSH
29510: LD_VAR 0 17
29514: PUSH
29515: LD_INT 1
29517: ARRAY
29518: PPUSH
29519: CALL_OW 251
29523: PPUSH
29524: LD_VAR 0 17
29528: PUSH
29529: LD_INT 1
29531: ARRAY
29532: PPUSH
29533: CALL_OW 254
29537: PPUSH
29538: LD_INT 5
29540: PPUSH
29541: CALL_OW 273
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29550: LD_VAR 0 16
29554: PUSH
29555: LD_INT 1
29557: ARRAY
29558: PPUSH
29559: LD_VAR 0 16
29563: PUSH
29564: LD_INT 2
29566: ARRAY
29567: PPUSH
29568: CALL_OW 488
29572: IFFALSE 29603
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29574: LD_VAR 0 13
29578: PPUSH
29579: LD_VAR 0 16
29583: PUSH
29584: LD_INT 1
29586: ARRAY
29587: PPUSH
29588: LD_VAR 0 16
29592: PUSH
29593: LD_INT 2
29595: ARRAY
29596: PPUSH
29597: CALL_OW 111
// continue ;
29601: GO 29093
// end ; end ; r := GetDir ( tmp ) ;
29603: LD_ADDR_VAR 0 15
29607: PUSH
29608: LD_VAR 0 13
29612: PPUSH
29613: CALL_OW 254
29617: ST_TO_ADDR
// if r = 5 then
29618: LD_VAR 0 15
29622: PUSH
29623: LD_INT 5
29625: EQUAL
29626: IFFALSE 29636
// r := 0 ;
29628: LD_ADDR_VAR 0 15
29632: PUSH
29633: LD_INT 0
29635: ST_TO_ADDR
// for j = r to 5 do
29636: LD_ADDR_VAR 0 10
29640: PUSH
29641: DOUBLE
29642: LD_VAR 0 15
29646: DEC
29647: ST_TO_ADDR
29648: LD_INT 5
29650: PUSH
29651: FOR_TO
29652: IFFALSE 29766
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29654: LD_ADDR_VAR 0 11
29658: PUSH
29659: LD_VAR 0 13
29663: PPUSH
29664: CALL_OW 250
29668: PPUSH
29669: LD_VAR 0 10
29673: PPUSH
29674: LD_INT 2
29676: PPUSH
29677: CALL_OW 272
29681: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29682: LD_ADDR_VAR 0 12
29686: PUSH
29687: LD_VAR 0 13
29691: PPUSH
29692: CALL_OW 251
29696: PPUSH
29697: LD_VAR 0 10
29701: PPUSH
29702: LD_INT 2
29704: PPUSH
29705: CALL_OW 273
29709: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29710: LD_VAR 0 11
29714: PPUSH
29715: LD_VAR 0 12
29719: PPUSH
29720: CALL_OW 488
29724: PUSH
29725: LD_VAR 0 11
29729: PPUSH
29730: LD_VAR 0 12
29734: PPUSH
29735: CALL_OW 428
29739: NOT
29740: AND
29741: IFFALSE 29764
// begin ComMoveXY ( tmp , _x , _y ) ;
29743: LD_VAR 0 13
29747: PPUSH
29748: LD_VAR 0 11
29752: PPUSH
29753: LD_VAR 0 12
29757: PPUSH
29758: CALL_OW 111
// break ;
29762: GO 29766
// end ; end ;
29764: GO 29651
29766: POP
29767: POP
// end ; end ;
29768: GO 29093
29770: POP
29771: POP
// end ;
29772: LD_VAR 0 8
29776: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29777: LD_INT 0
29779: PPUSH
// result := true ;
29780: LD_ADDR_VAR 0 3
29784: PUSH
29785: LD_INT 1
29787: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29788: LD_VAR 0 2
29792: PUSH
29793: LD_INT 24
29795: DOUBLE
29796: EQUAL
29797: IFTRUE 29807
29799: LD_INT 33
29801: DOUBLE
29802: EQUAL
29803: IFTRUE 29807
29805: GO 29832
29807: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29808: LD_ADDR_VAR 0 3
29812: PUSH
29813: LD_INT 32
29815: PPUSH
29816: LD_VAR 0 1
29820: PPUSH
29821: CALL_OW 321
29825: PUSH
29826: LD_INT 2
29828: EQUAL
29829: ST_TO_ADDR
29830: GO 30148
29832: LD_INT 20
29834: DOUBLE
29835: EQUAL
29836: IFTRUE 29840
29838: GO 29865
29840: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29841: LD_ADDR_VAR 0 3
29845: PUSH
29846: LD_INT 6
29848: PPUSH
29849: LD_VAR 0 1
29853: PPUSH
29854: CALL_OW 321
29858: PUSH
29859: LD_INT 2
29861: EQUAL
29862: ST_TO_ADDR
29863: GO 30148
29865: LD_INT 22
29867: DOUBLE
29868: EQUAL
29869: IFTRUE 29879
29871: LD_INT 36
29873: DOUBLE
29874: EQUAL
29875: IFTRUE 29879
29877: GO 29904
29879: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29880: LD_ADDR_VAR 0 3
29884: PUSH
29885: LD_INT 15
29887: PPUSH
29888: LD_VAR 0 1
29892: PPUSH
29893: CALL_OW 321
29897: PUSH
29898: LD_INT 2
29900: EQUAL
29901: ST_TO_ADDR
29902: GO 30148
29904: LD_INT 30
29906: DOUBLE
29907: EQUAL
29908: IFTRUE 29912
29910: GO 29937
29912: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29913: LD_ADDR_VAR 0 3
29917: PUSH
29918: LD_INT 20
29920: PPUSH
29921: LD_VAR 0 1
29925: PPUSH
29926: CALL_OW 321
29930: PUSH
29931: LD_INT 2
29933: EQUAL
29934: ST_TO_ADDR
29935: GO 30148
29937: LD_INT 28
29939: DOUBLE
29940: EQUAL
29941: IFTRUE 29951
29943: LD_INT 21
29945: DOUBLE
29946: EQUAL
29947: IFTRUE 29951
29949: GO 29976
29951: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29952: LD_ADDR_VAR 0 3
29956: PUSH
29957: LD_INT 21
29959: PPUSH
29960: LD_VAR 0 1
29964: PPUSH
29965: CALL_OW 321
29969: PUSH
29970: LD_INT 2
29972: EQUAL
29973: ST_TO_ADDR
29974: GO 30148
29976: LD_INT 16
29978: DOUBLE
29979: EQUAL
29980: IFTRUE 29984
29982: GO 30009
29984: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29985: LD_ADDR_VAR 0 3
29989: PUSH
29990: LD_INT 84
29992: PPUSH
29993: LD_VAR 0 1
29997: PPUSH
29998: CALL_OW 321
30002: PUSH
30003: LD_INT 2
30005: EQUAL
30006: ST_TO_ADDR
30007: GO 30148
30009: LD_INT 19
30011: DOUBLE
30012: EQUAL
30013: IFTRUE 30023
30015: LD_INT 23
30017: DOUBLE
30018: EQUAL
30019: IFTRUE 30023
30021: GO 30048
30023: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30024: LD_ADDR_VAR 0 3
30028: PUSH
30029: LD_INT 83
30031: PPUSH
30032: LD_VAR 0 1
30036: PPUSH
30037: CALL_OW 321
30041: PUSH
30042: LD_INT 2
30044: EQUAL
30045: ST_TO_ADDR
30046: GO 30148
30048: LD_INT 17
30050: DOUBLE
30051: EQUAL
30052: IFTRUE 30056
30054: GO 30081
30056: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30057: LD_ADDR_VAR 0 3
30061: PUSH
30062: LD_INT 39
30064: PPUSH
30065: LD_VAR 0 1
30069: PPUSH
30070: CALL_OW 321
30074: PUSH
30075: LD_INT 2
30077: EQUAL
30078: ST_TO_ADDR
30079: GO 30148
30081: LD_INT 18
30083: DOUBLE
30084: EQUAL
30085: IFTRUE 30089
30087: GO 30114
30089: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30090: LD_ADDR_VAR 0 3
30094: PUSH
30095: LD_INT 40
30097: PPUSH
30098: LD_VAR 0 1
30102: PPUSH
30103: CALL_OW 321
30107: PUSH
30108: LD_INT 2
30110: EQUAL
30111: ST_TO_ADDR
30112: GO 30148
30114: LD_INT 27
30116: DOUBLE
30117: EQUAL
30118: IFTRUE 30122
30120: GO 30147
30122: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30123: LD_ADDR_VAR 0 3
30127: PUSH
30128: LD_INT 35
30130: PPUSH
30131: LD_VAR 0 1
30135: PPUSH
30136: CALL_OW 321
30140: PUSH
30141: LD_INT 2
30143: EQUAL
30144: ST_TO_ADDR
30145: GO 30148
30147: POP
// end ;
30148: LD_VAR 0 3
30152: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30153: LD_INT 0
30155: PPUSH
30156: PPUSH
30157: PPUSH
30158: PPUSH
30159: PPUSH
30160: PPUSH
30161: PPUSH
30162: PPUSH
30163: PPUSH
30164: PPUSH
30165: PPUSH
// result := false ;
30166: LD_ADDR_VAR 0 6
30170: PUSH
30171: LD_INT 0
30173: ST_TO_ADDR
// if btype = b_depot then
30174: LD_VAR 0 2
30178: PUSH
30179: LD_INT 0
30181: EQUAL
30182: IFFALSE 30194
// begin result := true ;
30184: LD_ADDR_VAR 0 6
30188: PUSH
30189: LD_INT 1
30191: ST_TO_ADDR
// exit ;
30192: GO 31020
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30194: LD_VAR 0 1
30198: NOT
30199: PUSH
30200: LD_VAR 0 1
30204: PPUSH
30205: CALL_OW 266
30209: PUSH
30210: LD_INT 0
30212: PUSH
30213: LD_INT 1
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: IN
30220: NOT
30221: OR
30222: PUSH
30223: LD_VAR 0 2
30227: NOT
30228: OR
30229: PUSH
30230: LD_VAR 0 5
30234: PUSH
30235: LD_INT 0
30237: PUSH
30238: LD_INT 1
30240: PUSH
30241: LD_INT 2
30243: PUSH
30244: LD_INT 3
30246: PUSH
30247: LD_INT 4
30249: PUSH
30250: LD_INT 5
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: IN
30261: NOT
30262: OR
30263: PUSH
30264: LD_VAR 0 3
30268: PPUSH
30269: LD_VAR 0 4
30273: PPUSH
30274: CALL_OW 488
30278: NOT
30279: OR
30280: IFFALSE 30284
// exit ;
30282: GO 31020
// side := GetSide ( depot ) ;
30284: LD_ADDR_VAR 0 9
30288: PUSH
30289: LD_VAR 0 1
30293: PPUSH
30294: CALL_OW 255
30298: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30299: LD_VAR 0 9
30303: PPUSH
30304: LD_VAR 0 2
30308: PPUSH
30309: CALL 29777 0 2
30313: NOT
30314: IFFALSE 30318
// exit ;
30316: GO 31020
// pom := GetBase ( depot ) ;
30318: LD_ADDR_VAR 0 10
30322: PUSH
30323: LD_VAR 0 1
30327: PPUSH
30328: CALL_OW 274
30332: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30333: LD_ADDR_VAR 0 11
30337: PUSH
30338: LD_VAR 0 2
30342: PPUSH
30343: LD_VAR 0 1
30347: PPUSH
30348: CALL_OW 248
30352: PPUSH
30353: CALL_OW 450
30357: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30358: LD_VAR 0 10
30362: PPUSH
30363: LD_INT 1
30365: PPUSH
30366: CALL_OW 275
30370: PUSH
30371: LD_VAR 0 11
30375: PUSH
30376: LD_INT 1
30378: ARRAY
30379: GREATEREQUAL
30380: PUSH
30381: LD_VAR 0 10
30385: PPUSH
30386: LD_INT 2
30388: PPUSH
30389: CALL_OW 275
30393: PUSH
30394: LD_VAR 0 11
30398: PUSH
30399: LD_INT 2
30401: ARRAY
30402: GREATEREQUAL
30403: AND
30404: PUSH
30405: LD_VAR 0 10
30409: PPUSH
30410: LD_INT 3
30412: PPUSH
30413: CALL_OW 275
30417: PUSH
30418: LD_VAR 0 11
30422: PUSH
30423: LD_INT 3
30425: ARRAY
30426: GREATEREQUAL
30427: AND
30428: NOT
30429: IFFALSE 30433
// exit ;
30431: GO 31020
// if GetBType ( depot ) = b_depot then
30433: LD_VAR 0 1
30437: PPUSH
30438: CALL_OW 266
30442: PUSH
30443: LD_INT 0
30445: EQUAL
30446: IFFALSE 30458
// dist := 28 else
30448: LD_ADDR_VAR 0 14
30452: PUSH
30453: LD_INT 28
30455: ST_TO_ADDR
30456: GO 30466
// dist := 36 ;
30458: LD_ADDR_VAR 0 14
30462: PUSH
30463: LD_INT 36
30465: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30466: LD_VAR 0 1
30470: PPUSH
30471: LD_VAR 0 3
30475: PPUSH
30476: LD_VAR 0 4
30480: PPUSH
30481: CALL_OW 297
30485: PUSH
30486: LD_VAR 0 14
30490: GREATER
30491: IFFALSE 30495
// exit ;
30493: GO 31020
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30495: LD_ADDR_VAR 0 12
30499: PUSH
30500: LD_VAR 0 2
30504: PPUSH
30505: LD_VAR 0 3
30509: PPUSH
30510: LD_VAR 0 4
30514: PPUSH
30515: LD_VAR 0 5
30519: PPUSH
30520: LD_VAR 0 1
30524: PPUSH
30525: CALL_OW 248
30529: PPUSH
30530: LD_INT 0
30532: PPUSH
30533: CALL 31025 0 6
30537: ST_TO_ADDR
// if not hexes then
30538: LD_VAR 0 12
30542: NOT
30543: IFFALSE 30547
// exit ;
30545: GO 31020
// hex := GetHexInfo ( x , y ) ;
30547: LD_ADDR_VAR 0 15
30551: PUSH
30552: LD_VAR 0 3
30556: PPUSH
30557: LD_VAR 0 4
30561: PPUSH
30562: CALL_OW 546
30566: ST_TO_ADDR
// if hex [ 1 ] then
30567: LD_VAR 0 15
30571: PUSH
30572: LD_INT 1
30574: ARRAY
30575: IFFALSE 30579
// exit ;
30577: GO 31020
// height := hex [ 2 ] ;
30579: LD_ADDR_VAR 0 13
30583: PUSH
30584: LD_VAR 0 15
30588: PUSH
30589: LD_INT 2
30591: ARRAY
30592: ST_TO_ADDR
// for i = 1 to hexes do
30593: LD_ADDR_VAR 0 7
30597: PUSH
30598: DOUBLE
30599: LD_INT 1
30601: DEC
30602: ST_TO_ADDR
30603: LD_VAR 0 12
30607: PUSH
30608: FOR_TO
30609: IFFALSE 30939
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30611: LD_VAR 0 12
30615: PUSH
30616: LD_VAR 0 7
30620: ARRAY
30621: PUSH
30622: LD_INT 1
30624: ARRAY
30625: PPUSH
30626: LD_VAR 0 12
30630: PUSH
30631: LD_VAR 0 7
30635: ARRAY
30636: PUSH
30637: LD_INT 2
30639: ARRAY
30640: PPUSH
30641: CALL_OW 488
30645: NOT
30646: PUSH
30647: LD_VAR 0 12
30651: PUSH
30652: LD_VAR 0 7
30656: ARRAY
30657: PUSH
30658: LD_INT 1
30660: ARRAY
30661: PPUSH
30662: LD_VAR 0 12
30666: PUSH
30667: LD_VAR 0 7
30671: ARRAY
30672: PUSH
30673: LD_INT 2
30675: ARRAY
30676: PPUSH
30677: CALL_OW 428
30681: PUSH
30682: LD_INT 0
30684: GREATER
30685: OR
30686: PUSH
30687: LD_VAR 0 12
30691: PUSH
30692: LD_VAR 0 7
30696: ARRAY
30697: PUSH
30698: LD_INT 1
30700: ARRAY
30701: PPUSH
30702: LD_VAR 0 12
30706: PUSH
30707: LD_VAR 0 7
30711: ARRAY
30712: PUSH
30713: LD_INT 2
30715: ARRAY
30716: PPUSH
30717: CALL_OW 351
30721: OR
30722: IFFALSE 30728
// exit ;
30724: POP
30725: POP
30726: GO 31020
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30728: LD_ADDR_VAR 0 8
30732: PUSH
30733: LD_VAR 0 12
30737: PUSH
30738: LD_VAR 0 7
30742: ARRAY
30743: PUSH
30744: LD_INT 1
30746: ARRAY
30747: PPUSH
30748: LD_VAR 0 12
30752: PUSH
30753: LD_VAR 0 7
30757: ARRAY
30758: PUSH
30759: LD_INT 2
30761: ARRAY
30762: PPUSH
30763: CALL_OW 546
30767: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30768: LD_VAR 0 8
30772: PUSH
30773: LD_INT 1
30775: ARRAY
30776: PUSH
30777: LD_VAR 0 8
30781: PUSH
30782: LD_INT 2
30784: ARRAY
30785: PUSH
30786: LD_VAR 0 13
30790: PUSH
30791: LD_INT 2
30793: PLUS
30794: GREATER
30795: OR
30796: PUSH
30797: LD_VAR 0 8
30801: PUSH
30802: LD_INT 2
30804: ARRAY
30805: PUSH
30806: LD_VAR 0 13
30810: PUSH
30811: LD_INT 2
30813: MINUS
30814: LESS
30815: OR
30816: PUSH
30817: LD_VAR 0 8
30821: PUSH
30822: LD_INT 3
30824: ARRAY
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: LD_INT 8
30831: PUSH
30832: LD_INT 9
30834: PUSH
30835: LD_INT 10
30837: PUSH
30838: LD_INT 11
30840: PUSH
30841: LD_INT 12
30843: PUSH
30844: LD_INT 13
30846: PUSH
30847: LD_INT 16
30849: PUSH
30850: LD_INT 17
30852: PUSH
30853: LD_INT 18
30855: PUSH
30856: LD_INT 19
30858: PUSH
30859: LD_INT 20
30861: PUSH
30862: LD_INT 21
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: IN
30880: NOT
30881: OR
30882: PUSH
30883: LD_VAR 0 8
30887: PUSH
30888: LD_INT 5
30890: ARRAY
30891: NOT
30892: OR
30893: PUSH
30894: LD_VAR 0 8
30898: PUSH
30899: LD_INT 6
30901: ARRAY
30902: PUSH
30903: LD_INT 1
30905: PUSH
30906: LD_INT 2
30908: PUSH
30909: LD_INT 7
30911: PUSH
30912: LD_INT 9
30914: PUSH
30915: LD_INT 10
30917: PUSH
30918: LD_INT 11
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: IN
30929: NOT
30930: OR
30931: IFFALSE 30937
// exit ;
30933: POP
30934: POP
30935: GO 31020
// end ;
30937: GO 30608
30939: POP
30940: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30941: LD_VAR 0 9
30945: PPUSH
30946: LD_VAR 0 3
30950: PPUSH
30951: LD_VAR 0 4
30955: PPUSH
30956: LD_INT 20
30958: PPUSH
30959: CALL 22943 0 4
30963: PUSH
30964: LD_INT 4
30966: ARRAY
30967: IFFALSE 30971
// exit ;
30969: GO 31020
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30971: LD_VAR 0 2
30975: PUSH
30976: LD_INT 29
30978: PUSH
30979: LD_INT 30
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: IN
30986: PUSH
30987: LD_VAR 0 3
30991: PPUSH
30992: LD_VAR 0 4
30996: PPUSH
30997: LD_VAR 0 9
31001: PPUSH
31002: CALL_OW 440
31006: NOT
31007: AND
31008: IFFALSE 31012
// exit ;
31010: GO 31020
// result := true ;
31012: LD_ADDR_VAR 0 6
31016: PUSH
31017: LD_INT 1
31019: ST_TO_ADDR
// end ;
31020: LD_VAR 0 6
31024: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31025: LD_INT 0
31027: PPUSH
31028: PPUSH
31029: PPUSH
31030: PPUSH
31031: PPUSH
31032: PPUSH
31033: PPUSH
31034: PPUSH
31035: PPUSH
31036: PPUSH
31037: PPUSH
31038: PPUSH
31039: PPUSH
31040: PPUSH
31041: PPUSH
31042: PPUSH
31043: PPUSH
31044: PPUSH
31045: PPUSH
31046: PPUSH
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
31053: PPUSH
31054: PPUSH
31055: PPUSH
31056: PPUSH
31057: PPUSH
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
31063: PPUSH
31064: PPUSH
31065: PPUSH
31066: PPUSH
31067: PPUSH
31068: PPUSH
31069: PPUSH
31070: PPUSH
31071: PPUSH
31072: PPUSH
31073: PPUSH
31074: PPUSH
31075: PPUSH
31076: PPUSH
31077: PPUSH
31078: PPUSH
31079: PPUSH
31080: PPUSH
31081: PPUSH
31082: PPUSH
31083: PPUSH
31084: PPUSH
// result = [ ] ;
31085: LD_ADDR_VAR 0 7
31089: PUSH
31090: EMPTY
31091: ST_TO_ADDR
// temp_list = [ ] ;
31092: LD_ADDR_VAR 0 9
31096: PUSH
31097: EMPTY
31098: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31099: LD_VAR 0 4
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: LD_INT 2
31112: PUSH
31113: LD_INT 3
31115: PUSH
31116: LD_INT 4
31118: PUSH
31119: LD_INT 5
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: IN
31130: NOT
31131: PUSH
31132: LD_VAR 0 1
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: LD_INT 1
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: IN
31147: PUSH
31148: LD_VAR 0 5
31152: PUSH
31153: LD_INT 1
31155: PUSH
31156: LD_INT 2
31158: PUSH
31159: LD_INT 3
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: LIST
31166: IN
31167: NOT
31168: AND
31169: OR
31170: IFFALSE 31174
// exit ;
31172: GO 49565
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31174: LD_VAR 0 1
31178: PUSH
31179: LD_INT 6
31181: PUSH
31182: LD_INT 7
31184: PUSH
31185: LD_INT 8
31187: PUSH
31188: LD_INT 13
31190: PUSH
31191: LD_INT 12
31193: PUSH
31194: LD_INT 15
31196: PUSH
31197: LD_INT 11
31199: PUSH
31200: LD_INT 14
31202: PUSH
31203: LD_INT 10
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: IN
31217: IFFALSE 31227
// btype = b_lab ;
31219: LD_ADDR_VAR 0 1
31223: PUSH
31224: LD_INT 6
31226: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31227: LD_VAR 0 6
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: LIST
31245: IN
31246: NOT
31247: PUSH
31248: LD_VAR 0 1
31252: PUSH
31253: LD_INT 0
31255: PUSH
31256: LD_INT 1
31258: PUSH
31259: LD_INT 2
31261: PUSH
31262: LD_INT 3
31264: PUSH
31265: LD_INT 6
31267: PUSH
31268: LD_INT 36
31270: PUSH
31271: LD_INT 4
31273: PUSH
31274: LD_INT 5
31276: PUSH
31277: LD_INT 31
31279: PUSH
31280: LD_INT 32
31282: PUSH
31283: LD_INT 33
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: IN
31299: NOT
31300: PUSH
31301: LD_VAR 0 6
31305: PUSH
31306: LD_INT 1
31308: EQUAL
31309: AND
31310: OR
31311: PUSH
31312: LD_VAR 0 1
31316: PUSH
31317: LD_INT 2
31319: PUSH
31320: LD_INT 3
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: IN
31327: NOT
31328: PUSH
31329: LD_VAR 0 6
31333: PUSH
31334: LD_INT 2
31336: EQUAL
31337: AND
31338: OR
31339: IFFALSE 31349
// mode = 0 ;
31341: LD_ADDR_VAR 0 6
31345: PUSH
31346: LD_INT 0
31348: ST_TO_ADDR
// case mode of 0 :
31349: LD_VAR 0 6
31353: PUSH
31354: LD_INT 0
31356: DOUBLE
31357: EQUAL
31358: IFTRUE 31362
31360: GO 42815
31362: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31363: LD_ADDR_VAR 0 11
31367: PUSH
31368: LD_INT 0
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: LD_INT 0
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 1
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 0
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: NEG
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 1
31432: NEG
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 1
31444: NEG
31445: PUSH
31446: LD_INT 2
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: LD_INT 2
31459: NEG
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 1
31467: PUSH
31468: LD_INT 1
31470: NEG
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 1
31478: PUSH
31479: LD_INT 2
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 1
31498: NEG
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: LD_INT 3
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: LD_INT 3
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 1
31529: NEG
31530: PUSH
31531: LD_INT 2
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31556: LD_ADDR_VAR 0 12
31560: PUSH
31561: LD_INT 0
31563: PUSH
31564: LD_INT 0
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: LD_INT 1
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 1
31584: PUSH
31585: LD_INT 0
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 1
31594: PUSH
31595: LD_INT 1
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PUSH
31616: LD_INT 0
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 1
31625: NEG
31626: PUSH
31627: LD_INT 1
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 1
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 2
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 1
31668: NEG
31669: PUSH
31670: LD_INT 1
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 2
31679: NEG
31680: PUSH
31681: LD_INT 0
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 2
31690: NEG
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 2
31702: NEG
31703: PUSH
31704: LD_INT 1
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 3
31713: NEG
31714: PUSH
31715: LD_INT 0
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 3
31724: NEG
31725: PUSH
31726: LD_INT 1
31728: NEG
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31752: LD_ADDR_VAR 0 13
31756: PUSH
31757: LD_INT 0
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 1
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: LD_INT 1
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 0
31800: PUSH
31801: LD_INT 1
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 1
31810: NEG
31811: PUSH
31812: LD_INT 0
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 1
31821: NEG
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 1
31833: NEG
31834: PUSH
31835: LD_INT 2
31837: NEG
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 2
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 2
31855: PUSH
31856: LD_INT 2
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 2
31875: NEG
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 2
31887: NEG
31888: PUSH
31889: LD_INT 2
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: LD_INT 3
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 3
31911: NEG
31912: PUSH
31913: LD_INT 2
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 3
31923: NEG
31924: PUSH
31925: LD_INT 3
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31951: LD_ADDR_VAR 0 14
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: LD_INT 1
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: LD_INT 1
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: LD_INT 1
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 1
32009: NEG
32010: PUSH
32011: LD_INT 0
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: LD_INT 1
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: NEG
32033: PUSH
32034: LD_INT 2
32036: NEG
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 0
32044: PUSH
32045: LD_INT 2
32047: NEG
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 1
32055: PUSH
32056: LD_INT 1
32058: NEG
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 0
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: NEG
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 1
32097: NEG
32098: PUSH
32099: LD_INT 3
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: LD_INT 3
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: LD_INT 2
32123: NEG
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32147: LD_ADDR_VAR 0 15
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: LD_INT 0
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 0
32164: PUSH
32165: LD_INT 1
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 1
32175: PUSH
32176: LD_INT 0
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: LD_INT 1
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: LD_INT 1
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 1
32205: NEG
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 1
32216: NEG
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 2
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 2
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 2
32270: NEG
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 2
32281: NEG
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 2
32293: PUSH
32294: LD_INT 1
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 3
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 3
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32340: LD_ADDR_VAR 0 16
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: LD_INT 0
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: LD_INT 1
32360: NEG
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: LD_INT 0
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 1
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 1
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: NEG
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: LD_INT 1
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: NEG
32422: PUSH
32423: LD_INT 2
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: LD_INT 2
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: LD_INT 2
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 2
32463: NEG
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 2
32475: NEG
32476: PUSH
32477: LD_INT 2
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 3
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 3
32497: PUSH
32498: LD_INT 3
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: LD_INT 3
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32533: LD_ADDR_VAR 0 17
32537: PUSH
32538: LD_INT 0
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: LD_INT 1
32553: NEG
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 1
32561: PUSH
32562: LD_INT 0
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: LD_INT 1
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: LD_INT 1
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 1
32591: NEG
32592: PUSH
32593: LD_INT 0
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: LD_INT 1
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: PUSH
32616: LD_INT 2
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: LD_INT 2
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 1
32637: PUSH
32638: LD_INT 1
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: LD_INT 1
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 2
32668: PUSH
32669: LD_INT 2
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: LD_INT 2
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 1
32698: NEG
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 2
32709: NEG
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 2
32720: NEG
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 2
32732: NEG
32733: PUSH
32734: LD_INT 2
32736: NEG
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32763: LD_ADDR_VAR 0 18
32767: PUSH
32768: LD_INT 0
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 0
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 1
32791: PUSH
32792: LD_INT 0
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 0
32811: PUSH
32812: LD_INT 1
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: LD_INT 0
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 1
32844: NEG
32845: PUSH
32846: LD_INT 2
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: LD_INT 2
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: LD_INT 1
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 2
32898: PUSH
32899: LD_INT 2
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: LD_INT 2
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: LD_INT 2
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 1
32928: NEG
32929: PUSH
32930: LD_INT 1
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 2
32939: NEG
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 2
32950: NEG
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: NEG
32963: PUSH
32964: LD_INT 2
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32993: LD_ADDR_VAR 0 19
32997: PUSH
32998: LD_INT 0
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 1
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 1
33031: PUSH
33032: LD_INT 1
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: NEG
33075: PUSH
33076: LD_INT 2
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 2
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 1
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 2
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 2
33128: PUSH
33129: LD_INT 2
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 1
33138: PUSH
33139: LD_INT 2
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 0
33148: PUSH
33149: LD_INT 2
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 1
33158: NEG
33159: PUSH
33160: LD_INT 1
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 2
33169: NEG
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 2
33180: NEG
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 2
33192: NEG
33193: PUSH
33194: LD_INT 2
33196: NEG
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33223: LD_ADDR_VAR 0 20
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: LD_INT 1
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: LD_INT 2
33308: NEG
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: LD_INT 2
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 1
33327: PUSH
33328: LD_INT 1
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 2
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 2
33348: PUSH
33349: LD_INT 1
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: LD_INT 2
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 1
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 0
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 1
33388: NEG
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 2
33399: NEG
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 2
33422: NEG
33423: PUSH
33424: LD_INT 2
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33453: LD_ADDR_VAR 0 21
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 0
33470: PUSH
33471: LD_INT 1
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 1
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 1
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 1
33511: NEG
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: NEG
33523: PUSH
33524: LD_INT 1
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: LD_INT 2
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: LD_INT 2
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 1
33557: PUSH
33558: LD_INT 1
33560: NEG
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 2
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 2
33578: PUSH
33579: LD_INT 1
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 2
33588: PUSH
33589: LD_INT 2
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: LD_INT 2
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 2
33629: NEG
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 2
33640: NEG
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: LD_INT 2
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33683: LD_ADDR_VAR 0 22
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: LD_INT 0
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: LD_INT 0
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: LD_INT 1
33756: NEG
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: LD_INT 2
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: LD_INT 2
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 1
33787: PUSH
33788: LD_INT 1
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 2
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 2
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 2
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: PUSH
33829: LD_INT 2
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: LD_INT 2
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: LD_INT 1
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 2
33859: NEG
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 2
33882: NEG
33883: PUSH
33884: LD_INT 2
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33913: LD_ADDR_VAR 0 23
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 0
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 1
33971: NEG
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: LD_INT 1
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 1
33994: NEG
33995: PUSH
33996: LD_INT 2
33998: NEG
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: LD_INT 2
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: LD_INT 1
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 2
34028: PUSH
34029: LD_INT 0
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 2
34038: PUSH
34039: LD_INT 1
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 2
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: LD_INT 2
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: LD_INT 2
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: LD_INT 1
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 2
34089: NEG
34090: PUSH
34091: LD_INT 0
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 2
34100: NEG
34101: PUSH
34102: LD_INT 1
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 2
34112: NEG
34113: PUSH
34114: LD_INT 2
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: NEG
34125: PUSH
34126: LD_INT 3
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 1
34136: NEG
34137: PUSH
34138: LD_INT 3
34140: NEG
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: PUSH
34160: LD_INT 1
34162: NEG
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34193: LD_ADDR_VAR 0 24
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 0
34210: PUSH
34211: LD_INT 1
34213: NEG
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 1
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 1
34231: PUSH
34232: LD_INT 1
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 0
34241: PUSH
34242: LD_INT 1
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 1
34251: NEG
34252: PUSH
34253: LD_INT 0
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: LD_INT 1
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: LD_INT 2
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: LD_INT 2
34289: NEG
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: LD_INT 1
34300: NEG
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 2
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 2
34318: PUSH
34319: LD_INT 1
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 2
34328: PUSH
34329: LD_INT 2
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: LD_INT 2
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 0
34348: PUSH
34349: LD_INT 2
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: LD_INT 1
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 2
34369: NEG
34370: PUSH
34371: LD_INT 0
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 2
34380: NEG
34381: PUSH
34382: LD_INT 1
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 2
34392: NEG
34393: PUSH
34394: LD_INT 2
34396: NEG
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 1
34404: PUSH
34405: LD_INT 2
34407: NEG
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 2
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 3
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 3
34436: PUSH
34437: LD_INT 2
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34469: LD_ADDR_VAR 0 25
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: LD_INT 0
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 0
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 1
34527: NEG
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: LD_INT 2
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: LD_INT 2
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: LD_INT 1
34576: NEG
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 2
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: LD_INT 2
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: NEG
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 2
34656: NEG
34657: PUSH
34658: LD_INT 1
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 2
34668: NEG
34669: PUSH
34670: LD_INT 2
34672: NEG
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 3
34680: PUSH
34681: LD_INT 1
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 3
34690: PUSH
34691: LD_INT 2
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 2
34700: PUSH
34701: LD_INT 3
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: LD_INT 3
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34743: LD_ADDR_VAR 0 26
34747: PUSH
34748: LD_INT 0
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 0
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: LD_INT 1
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: LD_INT 2
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: LD_INT 2
34839: NEG
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 1
34847: PUSH
34848: LD_INT 1
34850: NEG
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 2
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: LD_INT 1
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: LD_INT 2
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: LD_INT 2
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: LD_INT 2
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 2
34919: NEG
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 2
34930: NEG
34931: PUSH
34932: LD_INT 1
34934: NEG
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: LD_INT 2
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 2
34954: PUSH
34955: LD_INT 3
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: LD_INT 3
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: NEG
34975: PUSH
34976: LD_INT 2
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 2
34985: NEG
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35019: LD_ADDR_VAR 0 27
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 0
35036: PUSH
35037: LD_INT 1
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 0
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 1
35077: NEG
35078: PUSH
35079: LD_INT 0
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: PUSH
35090: LD_INT 1
35092: NEG
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 1
35100: NEG
35101: PUSH
35102: LD_INT 2
35104: NEG
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: LD_INT 2
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: LD_INT 1
35126: NEG
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: LD_INT 0
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 2
35144: PUSH
35145: LD_INT 1
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 2
35154: PUSH
35155: LD_INT 2
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 1
35164: PUSH
35165: LD_INT 2
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: LD_INT 2
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 2
35195: NEG
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 2
35206: NEG
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 2
35218: NEG
35219: PUSH
35220: LD_INT 2
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: NEG
35231: PUSH
35232: LD_INT 2
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 2
35241: NEG
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 3
35252: NEG
35253: PUSH
35254: LD_INT 1
35256: NEG
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 3
35264: NEG
35265: PUSH
35266: LD_INT 2
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35299: LD_ADDR_VAR 0 28
35303: PUSH
35304: LD_INT 0
35306: PUSH
35307: LD_INT 0
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: LD_INT 1
35319: NEG
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: LD_INT 0
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: LD_INT 1
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 0
35347: PUSH
35348: LD_INT 1
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 1
35357: NEG
35358: PUSH
35359: LD_INT 0
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 1
35368: NEG
35369: PUSH
35370: LD_INT 1
35372: NEG
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 1
35380: NEG
35381: PUSH
35382: LD_INT 2
35384: NEG
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 0
35392: PUSH
35393: LD_INT 2
35395: NEG
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 2
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 2
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 2
35434: PUSH
35435: LD_INT 2
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 1
35444: PUSH
35445: LD_INT 2
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 0
35454: PUSH
35455: LD_INT 2
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: NEG
35465: PUSH
35466: LD_INT 1
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 2
35475: NEG
35476: PUSH
35477: LD_INT 0
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 2
35486: NEG
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 2
35498: NEG
35499: PUSH
35500: LD_INT 2
35502: NEG
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 2
35510: NEG
35511: PUSH
35512: LD_INT 3
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 1
35522: NEG
35523: PUSH
35524: LD_INT 3
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 3
35534: NEG
35535: PUSH
35536: LD_INT 1
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 3
35546: NEG
35547: PUSH
35548: LD_INT 2
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35581: LD_ADDR_VAR 0 29
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: NEG
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: LD_INT 1
35654: NEG
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: LD_INT 2
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: LD_INT 2
35677: NEG
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 2
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 2
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 1
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 2
35747: NEG
35748: PUSH
35749: LD_INT 1
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 2
35759: NEG
35760: PUSH
35761: LD_INT 2
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 2
35771: NEG
35772: PUSH
35773: LD_INT 3
35775: NEG
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 2
35783: PUSH
35784: LD_INT 1
35786: NEG
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 3
35794: PUSH
35795: LD_INT 1
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: LD_INT 3
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 1
35814: NEG
35815: PUSH
35816: LD_INT 2
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 3
35825: NEG
35826: PUSH
35827: LD_INT 2
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35860: LD_ADDR_VAR 0 30
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: LD_INT 0
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: NEG
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 1
35929: NEG
35930: PUSH
35931: LD_INT 1
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 1
35941: NEG
35942: PUSH
35943: LD_INT 2
35945: NEG
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: LD_INT 2
35956: NEG
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 2
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 2
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: LD_INT 2
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 2
36026: NEG
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 2
36037: NEG
36038: PUSH
36039: LD_INT 1
36041: NEG
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: NEG
36050: PUSH
36051: LD_INT 3
36053: NEG
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: PUSH
36062: LD_INT 2
36064: NEG
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 3
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 2
36082: PUSH
36083: LD_INT 3
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 2
36092: NEG
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 3
36103: NEG
36104: PUSH
36105: LD_INT 1
36107: NEG
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36138: LD_ADDR_VAR 0 31
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: PUSH
36167: LD_INT 0
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: PUSH
36177: LD_INT 1
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: LD_INT 0
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 1
36207: NEG
36208: PUSH
36209: LD_INT 1
36211: NEG
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: LD_INT 2
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 1
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 2
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 2
36262: PUSH
36263: LD_INT 2
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: LD_INT 2
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 2
36303: NEG
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 2
36315: NEG
36316: PUSH
36317: LD_INT 2
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 2
36327: NEG
36328: PUSH
36329: LD_INT 3
36331: NEG
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 3
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 3
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: NEG
36371: PUSH
36372: LD_INT 2
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 3
36381: NEG
36382: PUSH
36383: LD_INT 2
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36416: LD_ADDR_VAR 0 32
36420: PUSH
36421: LD_INT 0
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 0
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 1
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 0
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: LD_INT 2
36501: NEG
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: LD_INT 2
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: LD_INT 1
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 2
36541: PUSH
36542: LD_INT 2
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 2
36582: NEG
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 2
36593: NEG
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: LD_INT 3
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: LD_INT 2
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 3
36628: PUSH
36629: LD_INT 2
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: LD_INT 3
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 2
36648: NEG
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 3
36659: NEG
36660: PUSH
36661: LD_INT 1
36663: NEG
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36694: LD_ADDR_VAR 0 33
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: LD_INT 2
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 2
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: LD_INT 2
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: LD_INT 2
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 2
36849: NEG
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 2
36860: NEG
36861: PUSH
36862: LD_INT 1
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 2
36872: NEG
36873: PUSH
36874: LD_INT 2
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 2
36884: NEG
36885: PUSH
36886: LD_INT 3
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 2
36896: PUSH
36897: LD_INT 1
36899: NEG
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 3
36907: PUSH
36908: LD_INT 1
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: LD_INT 3
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 1
36927: NEG
36928: PUSH
36929: LD_INT 2
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 3
36938: NEG
36939: PUSH
36940: LD_INT 2
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36973: LD_ADDR_VAR 0 34
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: NEG
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: LD_INT 2
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: LD_INT 2
37069: NEG
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 2
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 2
37098: PUSH
37099: LD_INT 2
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: LD_INT 2
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: LD_INT 1
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 2
37129: NEG
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 2
37140: NEG
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 2
37152: NEG
37153: PUSH
37154: LD_INT 2
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: LD_INT 3
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: LD_INT 2
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 3
37187: PUSH
37188: LD_INT 2
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 2
37197: PUSH
37198: LD_INT 3
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 2
37207: NEG
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 3
37218: NEG
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37253: LD_ADDR_VAR 0 35
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: LD_INT 0
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: PUSH
37282: LD_INT 0
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 1
37291: PUSH
37292: LD_INT 1
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 2
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 2
37344: NEG
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37365: LD_ADDR_VAR 0 36
37369: PUSH
37370: LD_INT 0
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: LD_INT 1
37385: NEG
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 1
37393: PUSH
37394: LD_INT 0
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: LD_INT 1
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 1
37423: NEG
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 1
37446: NEG
37447: PUSH
37448: LD_INT 2
37450: NEG
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: LD_INT 2
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37477: LD_ADDR_VAR 0 37
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: LD_INT 1
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: LD_INT 1
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: LD_INT 1
37550: NEG
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 1
37569: NEG
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37589: LD_ADDR_VAR 0 38
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 2
37680: NEG
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37701: LD_ADDR_VAR 0 39
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 0
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: PUSH
37740: LD_INT 1
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: LD_INT 1
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: LD_INT 2
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 1
37794: PUSH
37795: LD_INT 2
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37813: LD_ADDR_VAR 0 40
37817: PUSH
37818: LD_INT 0
37820: PUSH
37821: LD_INT 0
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 1
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 1
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 1
37871: NEG
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: LD_INT 1
37897: NEG
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 1
37905: NEG
37906: PUSH
37907: LD_INT 1
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37925: LD_ADDR_VAR 0 41
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: NEG
38007: PUSH
38008: LD_INT 2
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 2
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 2
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 2
38049: PUSH
38050: LD_INT 2
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: LD_INT 2
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 2
38080: NEG
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 2
38091: NEG
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: LD_INT 2
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: NEG
38116: PUSH
38117: LD_INT 3
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 2
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 3
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 3
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 3
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 3
38168: PUSH
38169: LD_INT 3
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 2
38178: PUSH
38179: LD_INT 3
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 2
38188: NEG
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 3
38199: NEG
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 3
38210: NEG
38211: PUSH
38212: LD_INT 1
38214: NEG
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 3
38222: NEG
38223: PUSH
38224: LD_INT 2
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 3
38234: NEG
38235: PUSH
38236: LD_INT 3
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38275: LD_ADDR_VAR 0 42
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: NEG
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: LD_INT 2
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 0
38368: PUSH
38369: LD_INT 2
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: LD_INT 1
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 2
38390: PUSH
38391: LD_INT 1
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 2
38400: PUSH
38401: LD_INT 2
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 1
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 1
38430: NEG
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 2
38441: NEG
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 2
38453: NEG
38454: PUSH
38455: LD_INT 2
38457: NEG
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 2
38465: NEG
38466: PUSH
38467: LD_INT 3
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: LD_INT 3
38481: NEG
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: LD_INT 3
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: LD_INT 2
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 3
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 3
38521: PUSH
38522: LD_INT 3
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: LD_INT 3
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: LD_INT 3
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: LD_INT 3
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: NEG
38562: PUSH
38563: LD_INT 2
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 3
38572: NEG
38573: PUSH
38574: LD_INT 2
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 3
38584: NEG
38585: PUSH
38586: LD_INT 3
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38625: LD_ADDR_VAR 0 43
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 1
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 1
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 1
38683: NEG
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 1
38694: NEG
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: LD_INT 2
38710: NEG
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 0
38718: PUSH
38719: LD_INT 2
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: LD_INT 1
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 2
38791: NEG
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 2
38802: NEG
38803: PUSH
38804: LD_INT 1
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: LD_INT 3
38818: NEG
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: LD_INT 3
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 1
38837: PUSH
38838: LD_INT 2
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 3
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 3
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: LD_INT 3
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: LD_INT 3
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: LD_INT 2
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 2
38910: NEG
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 3
38921: NEG
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 3
38932: NEG
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38973: LD_ADDR_VAR 0 44
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: LD_INT 1
38993: NEG
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 1
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: LD_INT 1
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 1
39054: NEG
39055: PUSH
39056: LD_INT 2
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 2
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 2
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 2
39097: PUSH
39098: LD_INT 2
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: LD_INT 2
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 1
39117: NEG
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 2
39128: NEG
39129: PUSH
39130: LD_INT 0
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 2
39139: NEG
39140: PUSH
39141: LD_INT 1
39143: NEG
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 2
39151: NEG
39152: PUSH
39153: LD_INT 2
39155: NEG
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 2
39163: NEG
39164: PUSH
39165: LD_INT 3
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 2
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 3
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 3
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 3
39206: PUSH
39207: LD_INT 2
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 3
39216: PUSH
39217: LD_INT 3
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: LD_INT 3
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 2
39236: NEG
39237: PUSH
39238: LD_INT 1
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 3
39247: NEG
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 3
39258: NEG
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 3
39270: NEG
39271: PUSH
39272: LD_INT 2
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 3
39282: NEG
39283: PUSH
39284: LD_INT 3
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39323: LD_ADDR_VAR 0 45
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: LD_INT 0
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: LD_INT 2
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: LD_INT 2
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: PUSH
39428: LD_INT 1
39430: NEG
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 2
39438: PUSH
39439: LD_INT 1
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: LD_INT 2
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: LD_INT 2
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 2
39489: NEG
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 2
39501: NEG
39502: PUSH
39503: LD_INT 2
39505: NEG
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: LD_INT 3
39517: NEG
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: LD_INT 3
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: LD_INT 3
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 1
39548: PUSH
39549: LD_INT 2
39551: NEG
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 3
39559: PUSH
39560: LD_INT 2
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 3
39569: PUSH
39570: LD_INT 3
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 2
39579: PUSH
39580: LD_INT 3
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: LD_INT 3
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: LD_INT 3
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: LD_INT 2
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 3
39620: NEG
39621: PUSH
39622: LD_INT 2
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 3
39632: NEG
39633: PUSH
39634: LD_INT 3
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39673: LD_ADDR_VAR 0 46
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: LD_INT 2
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: LD_INT 2
39769: NEG
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 2
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: LD_INT 2
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 2
39839: NEG
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 2
39850: NEG
39851: PUSH
39852: LD_INT 1
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: LD_INT 3
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: LD_INT 3
39877: NEG
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 2
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 3
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 3
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: LD_INT 3
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: LD_INT 3
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 2
39958: NEG
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 3
39969: NEG
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 3
39980: NEG
39981: PUSH
39982: LD_INT 1
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40021: LD_ADDR_VAR 0 47
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 1
40102: NEG
40103: PUSH
40104: LD_INT 2
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: LD_INT 2
40117: NEG
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 2
40136: NEG
40137: PUSH
40138: LD_INT 1
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 2
40148: NEG
40149: PUSH
40150: LD_INT 2
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40172: LD_ADDR_VAR 0 48
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 2
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 2
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40319: LD_ADDR_VAR 0 49
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: LD_INT 2
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40463: LD_ADDR_VAR 0 50
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 2
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 2
40554: PUSH
40555: LD_INT 2
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: LD_INT 2
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 1
40584: NEG
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40607: LD_ADDR_VAR 0 51
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 1
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 1
40708: NEG
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 2
40719: NEG
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 2
40730: NEG
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40754: LD_ADDR_VAR 0 52
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: LD_INT 1
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: LD_INT 2
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: NEG
40848: PUSH
40849: LD_INT 1
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 2
40858: NEG
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 2
40869: NEG
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 2
40881: NEG
40882: PUSH
40883: LD_INT 2
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40905: LD_ADDR_VAR 0 53
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 1
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: LD_INT 2
40990: NEG
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 2
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: LD_INT 2
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 2
41081: NEG
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: NEG
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: LD_INT 2
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41135: LD_ADDR_VAR 0 54
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: LD_INT 2
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: LD_INT 2
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 2
41270: PUSH
41271: LD_INT 2
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 2
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: NEG
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: NEG
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 2
41334: NEG
41335: PUSH
41336: LD_INT 2
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41365: LD_ADDR_VAR 0 55
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 1
41434: NEG
41435: PUSH
41436: LD_INT 1
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: NEG
41447: PUSH
41448: LD_INT 2
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: LD_INT 2
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 2
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 2
41500: PUSH
41501: LD_INT 2
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: LD_INT 2
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 1
41530: NEG
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 2
41541: NEG
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: LD_INT 2
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41595: LD_ADDR_VAR 0 56
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 2
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 2
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 2
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: LD_INT 2
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 2
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: NEG
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 2
41794: NEG
41795: PUSH
41796: LD_INT 2
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41825: LD_ADDR_VAR 0 57
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: LD_INT 2
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: LD_INT 2
41921: NEG
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 2
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 2
42001: NEG
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: NEG
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 2
42024: NEG
42025: PUSH
42026: LD_INT 2
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42055: LD_ADDR_VAR 0 58
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: LD_INT 2
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 2
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 2
42231: NEG
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: NEG
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 2
42254: NEG
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42285: LD_ADDR_VAR 0 59
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42373: LD_ADDR_VAR 0 60
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: LD_INT 1
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: LD_INT 0
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: LD_INT 1
42446: NEG
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42461: LD_ADDR_VAR 0 61
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: NEG
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42549: LD_ADDR_VAR 0 62
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42637: LD_ADDR_VAR 0 63
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42725: LD_ADDR_VAR 0 64
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: LD_INT 1
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: ST_TO_ADDR
// end ; 1 :
42813: GO 48710
42815: LD_INT 1
42817: DOUBLE
42818: EQUAL
42819: IFTRUE 42823
42821: GO 45446
42823: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42824: LD_ADDR_VAR 0 11
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: LD_INT 3
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 3
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: LIST
42867: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42868: LD_ADDR_VAR 0 12
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: LD_INT 1
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 3
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 3
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42909: LD_ADDR_VAR 0 13
42913: PUSH
42914: LD_INT 3
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 3
42926: PUSH
42927: LD_INT 3
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: LD_INT 3
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42949: LD_ADDR_VAR 0 14
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: LD_INT 3
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: LD_INT 3
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: LIST
42989: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42990: LD_ADDR_VAR 0 15
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 3
43008: NEG
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 3
43019: NEG
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: LIST
43033: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43034: LD_ADDR_VAR 0 16
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: LD_INT 3
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 3
43053: NEG
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 3
43065: NEG
43066: PUSH
43067: LD_INT 3
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43080: LD_ADDR_VAR 0 17
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: LD_INT 3
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 3
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 1
43110: PUSH
43111: LD_INT 2
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: LIST
43123: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43124: LD_ADDR_VAR 0 18
43128: PUSH
43129: LD_INT 2
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 3
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 3
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43165: LD_ADDR_VAR 0 19
43169: PUSH
43170: LD_INT 3
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 3
43182: PUSH
43183: LD_INT 3
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: LD_INT 3
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: LIST
43204: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43205: LD_ADDR_VAR 0 20
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: LD_INT 3
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 3
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: LIST
43245: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43246: LD_ADDR_VAR 0 21
43250: PUSH
43251: LD_INT 2
43253: NEG
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 3
43264: NEG
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 3
43275: NEG
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: LIST
43289: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43290: LD_ADDR_VAR 0 22
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: LD_INT 3
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 3
43309: NEG
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 3
43321: NEG
43322: PUSH
43323: LD_INT 3
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: LIST
43335: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43336: LD_ADDR_VAR 0 23
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: LD_INT 3
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: NEG
43355: PUSH
43356: LD_INT 4
43358: NEG
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: LD_INT 3
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: LIST
43379: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43380: LD_ADDR_VAR 0 24
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 3
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 4
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: LIST
43420: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43421: LD_ADDR_VAR 0 25
43425: PUSH
43426: LD_INT 3
43428: PUSH
43429: LD_INT 3
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 4
43438: PUSH
43439: LD_INT 3
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 3
43448: PUSH
43449: LD_INT 4
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43461: LD_ADDR_VAR 0 26
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: LD_INT 3
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: LD_INT 4
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: LD_INT 3
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: LIST
43501: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43502: LD_ADDR_VAR 0 27
43506: PUSH
43507: LD_INT 3
43509: NEG
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 3
43520: NEG
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 4
43531: NEG
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: LIST
43545: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43546: LD_ADDR_VAR 0 28
43550: PUSH
43551: LD_INT 3
43553: NEG
43554: PUSH
43555: LD_INT 3
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 3
43565: NEG
43566: PUSH
43567: LD_INT 4
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 4
43577: NEG
43578: PUSH
43579: LD_INT 3
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: LIST
43591: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43592: LD_ADDR_VAR 0 29
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: LD_INT 3
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: LD_INT 3
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: LD_INT 4
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: LD_INT 4
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: LD_INT 3
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: LD_INT 5
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 5
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 4
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 6
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 6
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: LD_INT 5
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43747: LD_ADDR_VAR 0 30
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 3
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 3
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 3
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 4
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 4
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 4
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 5
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 5
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 5
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 6
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 6
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43890: LD_ADDR_VAR 0 31
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 3
43907: PUSH
43908: LD_INT 3
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: LD_INT 3
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 4
43927: PUSH
43928: LD_INT 3
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 4
43937: PUSH
43938: LD_INT 4
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 3
43947: PUSH
43948: LD_INT 4
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 5
43957: PUSH
43958: LD_INT 4
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 5
43967: PUSH
43968: LD_INT 5
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 4
43977: PUSH
43978: LD_INT 5
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 6
43987: PUSH
43988: LD_INT 5
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 6
43997: PUSH
43998: LD_INT 6
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 5
44007: PUSH
44008: LD_INT 6
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44029: LD_ADDR_VAR 0 32
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: LD_INT 3
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 3
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: LD_INT 2
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: LD_INT 4
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: LD_INT 4
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: LD_INT 3
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 5
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 5
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: LD_INT 4
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: LD_INT 6
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 6
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: LD_INT 5
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44172: LD_ADDR_VAR 0 33
44176: PUSH
44177: LD_INT 2
44179: NEG
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 3
44190: NEG
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 3
44201: NEG
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 3
44213: NEG
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 4
44224: NEG
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 4
44235: NEG
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 4
44247: NEG
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 5
44258: NEG
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 5
44269: NEG
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 5
44281: NEG
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 6
44292: NEG
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 6
44303: NEG
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44327: LD_ADDR_VAR 0 34
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: LD_INT 3
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 3
44346: NEG
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 3
44358: NEG
44359: PUSH
44360: LD_INT 3
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 3
44370: NEG
44371: PUSH
44372: LD_INT 4
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 4
44382: NEG
44383: PUSH
44384: LD_INT 3
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 4
44394: NEG
44395: PUSH
44396: LD_INT 4
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 4
44406: NEG
44407: PUSH
44408: LD_INT 5
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 5
44418: NEG
44419: PUSH
44420: LD_INT 4
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 5
44430: NEG
44431: PUSH
44432: LD_INT 5
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 5
44442: NEG
44443: PUSH
44444: LD_INT 6
44446: NEG
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 6
44454: NEG
44455: PUSH
44456: LD_INT 5
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 6
44466: NEG
44467: PUSH
44468: LD_INT 6
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44490: LD_ADDR_VAR 0 41
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: LD_INT 3
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: LIST
44533: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44534: LD_ADDR_VAR 0 42
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 3
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: LIST
44574: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44575: LD_ADDR_VAR 0 43
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 3
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: LD_INT 3
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44615: LD_ADDR_VAR 0 44
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: LD_INT 3
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: LIST
44655: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44656: LD_ADDR_VAR 0 45
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 3
44685: NEG
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: LIST
44699: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44700: LD_ADDR_VAR 0 46
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: LD_INT 2
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 2
44719: NEG
44720: PUSH
44721: LD_INT 3
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 3
44731: NEG
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: LIST
44745: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44746: LD_ADDR_VAR 0 47
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: LD_INT 3
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: LD_INT 3
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44779: LD_ADDR_VAR 0 48
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44810: LD_ADDR_VAR 0 49
44814: PUSH
44815: LD_INT 3
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 3
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44839: LD_ADDR_VAR 0 50
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: LD_INT 3
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: LD_INT 3
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44868: LD_ADDR_VAR 0 51
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 2
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44899: LD_ADDR_VAR 0 52
44903: PUSH
44904: LD_INT 3
44906: NEG
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 3
44918: NEG
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44932: LD_ADDR_VAR 0 53
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: LD_INT 3
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: LD_INT 3
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: LIST
44975: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44976: LD_ADDR_VAR 0 54
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 3
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45017: LD_ADDR_VAR 0 55
45021: PUSH
45022: LD_INT 3
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 3
45034: PUSH
45035: LD_INT 3
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: LD_INT 3
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45057: LD_ADDR_VAR 0 56
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: LD_INT 3
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 3
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: LIST
45097: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45098: LD_ADDR_VAR 0 57
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 3
45116: NEG
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 3
45127: NEG
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: LIST
45141: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45142: LD_ADDR_VAR 0 58
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: LD_INT 3
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 3
45161: NEG
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 3
45173: NEG
45174: PUSH
45175: LD_INT 3
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: LIST
45187: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45188: LD_ADDR_VAR 0 59
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: LD_INT 2
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: LIST
45231: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45232: LD_ADDR_VAR 0 60
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: LIST
45272: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45273: LD_ADDR_VAR 0 61
45277: PUSH
45278: LD_INT 2
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: LD_INT 2
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: LIST
45312: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45313: LD_ADDR_VAR 0 62
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: LIST
45353: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45354: LD_ADDR_VAR 0 63
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: LIST
45397: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45398: LD_ADDR_VAR 0 64
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: LD_INT 2
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: LIST
45443: ST_TO_ADDR
// end ; 2 :
45444: GO 48710
45446: LD_INT 2
45448: DOUBLE
45449: EQUAL
45450: IFTRUE 45454
45452: GO 48709
45454: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45455: LD_ADDR_VAR 0 29
45459: PUSH
45460: LD_INT 4
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 4
45472: PUSH
45473: LD_INT 1
45475: NEG
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 5
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 5
45493: PUSH
45494: LD_INT 1
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 4
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 3
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 3
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 3
45534: PUSH
45535: LD_INT 2
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 5
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 3
45555: PUSH
45556: LD_INT 3
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 3
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 4
45575: PUSH
45576: LD_INT 3
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 4
45585: PUSH
45586: LD_INT 4
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 3
45595: PUSH
45596: LD_INT 4
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: LD_INT 3
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 4
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: LD_INT 4
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 4
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 3
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: LD_INT 4
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 5
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 5
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: LD_INT 4
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: LD_INT 3
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: PUSH
45718: LD_INT 5
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: NEG
45728: PUSH
45729: LD_INT 3
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 3
45738: NEG
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 3
45749: NEG
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 2
45761: NEG
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 3
45783: NEG
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 4
45794: NEG
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 4
45805: NEG
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 4
45817: NEG
45818: PUSH
45819: LD_INT 2
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 2
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 4
45840: NEG
45841: PUSH
45842: LD_INT 4
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 4
45852: NEG
45853: PUSH
45854: LD_INT 5
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 3
45864: NEG
45865: PUSH
45866: LD_INT 4
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 3
45876: NEG
45877: PUSH
45878: LD_INT 3
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 4
45888: NEG
45889: PUSH
45890: LD_INT 3
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 5
45900: NEG
45901: PUSH
45902: LD_INT 4
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 5
45912: NEG
45913: PUSH
45914: LD_INT 5
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 3
45924: NEG
45925: PUSH
45926: LD_INT 5
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 5
45936: NEG
45937: PUSH
45938: LD_INT 3
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45993: LD_ADDR_VAR 0 30
45997: PUSH
45998: LD_INT 4
46000: PUSH
46001: LD_INT 4
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 4
46010: PUSH
46011: LD_INT 3
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 5
46020: PUSH
46021: LD_INT 4
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 5
46030: PUSH
46031: LD_INT 5
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 4
46040: PUSH
46041: LD_INT 5
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 3
46050: PUSH
46051: LD_INT 4
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 3
46060: PUSH
46061: LD_INT 3
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 5
46070: PUSH
46071: LD_INT 3
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 3
46080: PUSH
46081: LD_INT 5
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: LD_INT 3
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: LD_INT 3
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: LD_INT 4
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: LD_INT 4
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: LD_INT 3
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 2
46162: PUSH
46163: LD_INT 4
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 4
46183: NEG
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 4
46194: NEG
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 3
46206: NEG
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 3
46217: NEG
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 4
46228: NEG
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 5
46239: NEG
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 5
46250: NEG
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 5
46262: NEG
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 3
46274: NEG
46275: PUSH
46276: LD_INT 2
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 3
46285: NEG
46286: PUSH
46287: LD_INT 3
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 3
46297: NEG
46298: PUSH
46299: LD_INT 4
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: LD_INT 3
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 3
46333: NEG
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 4
46345: NEG
46346: PUSH
46347: LD_INT 3
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 4
46357: NEG
46358: PUSH
46359: LD_INT 4
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: LD_INT 4
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 4
46381: NEG
46382: PUSH
46383: LD_INT 2
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 4
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 5
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 4
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: LD_INT 3
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 3
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: LD_INT 4
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: LD_INT 5
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: LD_INT 3
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: LD_INT 5
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46540: LD_ADDR_VAR 0 31
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 4
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 3
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 4
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 5
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 5
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 4
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 3
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: PUSH
46620: LD_INT 5
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 2
46629: NEG
46630: PUSH
46631: LD_INT 3
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 3
46640: NEG
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 3
46651: NEG
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 3
46685: NEG
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 4
46696: NEG
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 4
46707: NEG
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 4
46719: NEG
46720: PUSH
46721: LD_INT 2
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 4
46742: NEG
46743: PUSH
46744: LD_INT 4
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 4
46754: NEG
46755: PUSH
46756: LD_INT 5
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 3
46766: NEG
46767: PUSH
46768: LD_INT 4
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 3
46778: NEG
46779: PUSH
46780: LD_INT 3
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 4
46790: NEG
46791: PUSH
46792: LD_INT 3
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 5
46802: NEG
46803: PUSH
46804: LD_INT 4
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 5
46814: NEG
46815: PUSH
46816: LD_INT 5
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 3
46826: NEG
46827: PUSH
46828: LD_INT 5
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 5
46838: NEG
46839: PUSH
46840: LD_INT 3
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: LD_INT 3
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 4
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 3
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: LD_INT 2
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 3
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: LD_INT 4
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: LD_INT 4
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 4
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 4
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 5
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 5
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 4
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 3
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 5
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47090: LD_ADDR_VAR 0 32
47094: PUSH
47095: LD_INT 4
47097: NEG
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 4
47108: NEG
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 3
47120: NEG
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 3
47131: NEG
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 4
47142: NEG
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 5
47153: NEG
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 5
47164: NEG
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 5
47176: NEG
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 3
47188: NEG
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 3
47199: NEG
47200: PUSH
47201: LD_INT 3
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 3
47211: NEG
47212: PUSH
47213: LD_INT 4
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: LD_INT 3
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: LD_INT 2
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 3
47247: NEG
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 4
47259: NEG
47260: PUSH
47261: LD_INT 3
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 4
47271: NEG
47272: PUSH
47273: LD_INT 4
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: LD_INT 4
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 4
47295: NEG
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 4
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 5
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: LD_INT 4
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 3
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 3
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 4
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: LD_INT 5
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: PUSH
47387: LD_INT 3
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: NEG
47398: PUSH
47399: LD_INT 5
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 3
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 3
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 4
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 4
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 3
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 4
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 4
47502: PUSH
47503: LD_INT 4
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 4
47512: PUSH
47513: LD_INT 3
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 5
47522: PUSH
47523: LD_INT 4
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 5
47532: PUSH
47533: LD_INT 5
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 4
47542: PUSH
47543: LD_INT 5
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 3
47552: PUSH
47553: LD_INT 4
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 3
47562: PUSH
47563: LD_INT 3
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 5
47572: PUSH
47573: LD_INT 3
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 3
47582: PUSH
47583: LD_INT 5
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47637: LD_ADDR_VAR 0 33
47641: PUSH
47642: LD_INT 4
47644: NEG
47645: PUSH
47646: LD_INT 4
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 4
47656: NEG
47657: PUSH
47658: LD_INT 5
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 3
47668: NEG
47669: PUSH
47670: LD_INT 4
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 3
47680: NEG
47681: PUSH
47682: LD_INT 3
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 4
47692: NEG
47693: PUSH
47694: LD_INT 3
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 5
47704: NEG
47705: PUSH
47706: LD_INT 4
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 5
47716: NEG
47717: PUSH
47718: LD_INT 5
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 3
47728: NEG
47729: PUSH
47730: LD_INT 5
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 5
47740: NEG
47741: PUSH
47742: LD_INT 3
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 3
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 4
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 3
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 2
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: LD_INT 2
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 3
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 4
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: LD_INT 4
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 4
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 4
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 5
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 5
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 4
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 3
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 3
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 3
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 5
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 3
47947: PUSH
47948: LD_INT 3
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 3
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 4
47967: PUSH
47968: LD_INT 3
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 4
47977: PUSH
47978: LD_INT 4
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 3
47987: PUSH
47988: LD_INT 4
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: LD_INT 3
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 4
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: PUSH
48028: LD_INT 4
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: LD_INT 4
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 3
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 4
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 5
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 5
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 4
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 3
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 2
48109: PUSH
48110: LD_INT 5
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: LD_INT 3
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48175: LD_ADDR_VAR 0 34
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: LD_INT 4
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 5
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: LD_INT 4
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 3
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: LD_INT 3
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: LD_INT 4
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 5
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: LD_INT 3
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: LD_INT 5
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 3
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 3
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 4
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 4
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 4
48367: PUSH
48368: LD_INT 2
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 4
48377: PUSH
48378: LD_INT 4
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 4
48387: PUSH
48388: LD_INT 3
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 5
48397: PUSH
48398: LD_INT 4
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 5
48407: PUSH
48408: LD_INT 5
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 4
48417: PUSH
48418: LD_INT 5
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 3
48427: PUSH
48428: LD_INT 4
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 3
48437: PUSH
48438: LD_INT 3
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 5
48447: PUSH
48448: LD_INT 3
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 3
48457: PUSH
48458: LD_INT 5
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 3
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 3
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 4
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 4
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: LD_INT 3
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: LD_INT 4
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 4
48560: NEG
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 4
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 3
48583: NEG
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 3
48594: NEG
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 4
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 5
48616: NEG
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 5
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 5
48639: NEG
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 3
48651: NEG
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: ST_TO_ADDR
// end ; end ;
48707: GO 48710
48709: POP
// case btype of b_depot , b_warehouse :
48710: LD_VAR 0 1
48714: PUSH
48715: LD_INT 0
48717: DOUBLE
48718: EQUAL
48719: IFTRUE 48729
48721: LD_INT 1
48723: DOUBLE
48724: EQUAL
48725: IFTRUE 48729
48727: GO 48930
48729: POP
// case nation of nation_american :
48730: LD_VAR 0 5
48734: PUSH
48735: LD_INT 1
48737: DOUBLE
48738: EQUAL
48739: IFTRUE 48743
48741: GO 48799
48743: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48744: LD_ADDR_VAR 0 9
48748: PUSH
48749: LD_VAR 0 11
48753: PUSH
48754: LD_VAR 0 12
48758: PUSH
48759: LD_VAR 0 13
48763: PUSH
48764: LD_VAR 0 14
48768: PUSH
48769: LD_VAR 0 15
48773: PUSH
48774: LD_VAR 0 16
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: PUSH
48787: LD_VAR 0 4
48791: PUSH
48792: LD_INT 1
48794: PLUS
48795: ARRAY
48796: ST_TO_ADDR
48797: GO 48928
48799: LD_INT 2
48801: DOUBLE
48802: EQUAL
48803: IFTRUE 48807
48805: GO 48863
48807: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48808: LD_ADDR_VAR 0 9
48812: PUSH
48813: LD_VAR 0 17
48817: PUSH
48818: LD_VAR 0 18
48822: PUSH
48823: LD_VAR 0 19
48827: PUSH
48828: LD_VAR 0 20
48832: PUSH
48833: LD_VAR 0 21
48837: PUSH
48838: LD_VAR 0 22
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: PUSH
48851: LD_VAR 0 4
48855: PUSH
48856: LD_INT 1
48858: PLUS
48859: ARRAY
48860: ST_TO_ADDR
48861: GO 48928
48863: LD_INT 3
48865: DOUBLE
48866: EQUAL
48867: IFTRUE 48871
48869: GO 48927
48871: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48872: LD_ADDR_VAR 0 9
48876: PUSH
48877: LD_VAR 0 23
48881: PUSH
48882: LD_VAR 0 24
48886: PUSH
48887: LD_VAR 0 25
48891: PUSH
48892: LD_VAR 0 26
48896: PUSH
48897: LD_VAR 0 27
48901: PUSH
48902: LD_VAR 0 28
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: PUSH
48915: LD_VAR 0 4
48919: PUSH
48920: LD_INT 1
48922: PLUS
48923: ARRAY
48924: ST_TO_ADDR
48925: GO 48928
48927: POP
48928: GO 49483
48930: LD_INT 2
48932: DOUBLE
48933: EQUAL
48934: IFTRUE 48944
48936: LD_INT 3
48938: DOUBLE
48939: EQUAL
48940: IFTRUE 48944
48942: GO 49000
48944: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48945: LD_ADDR_VAR 0 9
48949: PUSH
48950: LD_VAR 0 29
48954: PUSH
48955: LD_VAR 0 30
48959: PUSH
48960: LD_VAR 0 31
48964: PUSH
48965: LD_VAR 0 32
48969: PUSH
48970: LD_VAR 0 33
48974: PUSH
48975: LD_VAR 0 34
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: PUSH
48988: LD_VAR 0 4
48992: PUSH
48993: LD_INT 1
48995: PLUS
48996: ARRAY
48997: ST_TO_ADDR
48998: GO 49483
49000: LD_INT 16
49002: DOUBLE
49003: EQUAL
49004: IFTRUE 49062
49006: LD_INT 17
49008: DOUBLE
49009: EQUAL
49010: IFTRUE 49062
49012: LD_INT 18
49014: DOUBLE
49015: EQUAL
49016: IFTRUE 49062
49018: LD_INT 19
49020: DOUBLE
49021: EQUAL
49022: IFTRUE 49062
49024: LD_INT 22
49026: DOUBLE
49027: EQUAL
49028: IFTRUE 49062
49030: LD_INT 20
49032: DOUBLE
49033: EQUAL
49034: IFTRUE 49062
49036: LD_INT 21
49038: DOUBLE
49039: EQUAL
49040: IFTRUE 49062
49042: LD_INT 23
49044: DOUBLE
49045: EQUAL
49046: IFTRUE 49062
49048: LD_INT 24
49050: DOUBLE
49051: EQUAL
49052: IFTRUE 49062
49054: LD_INT 25
49056: DOUBLE
49057: EQUAL
49058: IFTRUE 49062
49060: GO 49118
49062: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49063: LD_ADDR_VAR 0 9
49067: PUSH
49068: LD_VAR 0 35
49072: PUSH
49073: LD_VAR 0 36
49077: PUSH
49078: LD_VAR 0 37
49082: PUSH
49083: LD_VAR 0 38
49087: PUSH
49088: LD_VAR 0 39
49092: PUSH
49093: LD_VAR 0 40
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: PUSH
49106: LD_VAR 0 4
49110: PUSH
49111: LD_INT 1
49113: PLUS
49114: ARRAY
49115: ST_TO_ADDR
49116: GO 49483
49118: LD_INT 6
49120: DOUBLE
49121: EQUAL
49122: IFTRUE 49174
49124: LD_INT 7
49126: DOUBLE
49127: EQUAL
49128: IFTRUE 49174
49130: LD_INT 8
49132: DOUBLE
49133: EQUAL
49134: IFTRUE 49174
49136: LD_INT 13
49138: DOUBLE
49139: EQUAL
49140: IFTRUE 49174
49142: LD_INT 12
49144: DOUBLE
49145: EQUAL
49146: IFTRUE 49174
49148: LD_INT 15
49150: DOUBLE
49151: EQUAL
49152: IFTRUE 49174
49154: LD_INT 11
49156: DOUBLE
49157: EQUAL
49158: IFTRUE 49174
49160: LD_INT 14
49162: DOUBLE
49163: EQUAL
49164: IFTRUE 49174
49166: LD_INT 10
49168: DOUBLE
49169: EQUAL
49170: IFTRUE 49174
49172: GO 49230
49174: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49175: LD_ADDR_VAR 0 9
49179: PUSH
49180: LD_VAR 0 41
49184: PUSH
49185: LD_VAR 0 42
49189: PUSH
49190: LD_VAR 0 43
49194: PUSH
49195: LD_VAR 0 44
49199: PUSH
49200: LD_VAR 0 45
49204: PUSH
49205: LD_VAR 0 46
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: PUSH
49218: LD_VAR 0 4
49222: PUSH
49223: LD_INT 1
49225: PLUS
49226: ARRAY
49227: ST_TO_ADDR
49228: GO 49483
49230: LD_INT 36
49232: DOUBLE
49233: EQUAL
49234: IFTRUE 49238
49236: GO 49294
49238: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49239: LD_ADDR_VAR 0 9
49243: PUSH
49244: LD_VAR 0 47
49248: PUSH
49249: LD_VAR 0 48
49253: PUSH
49254: LD_VAR 0 49
49258: PUSH
49259: LD_VAR 0 50
49263: PUSH
49264: LD_VAR 0 51
49268: PUSH
49269: LD_VAR 0 52
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: PUSH
49282: LD_VAR 0 4
49286: PUSH
49287: LD_INT 1
49289: PLUS
49290: ARRAY
49291: ST_TO_ADDR
49292: GO 49483
49294: LD_INT 4
49296: DOUBLE
49297: EQUAL
49298: IFTRUE 49320
49300: LD_INT 5
49302: DOUBLE
49303: EQUAL
49304: IFTRUE 49320
49306: LD_INT 34
49308: DOUBLE
49309: EQUAL
49310: IFTRUE 49320
49312: LD_INT 37
49314: DOUBLE
49315: EQUAL
49316: IFTRUE 49320
49318: GO 49376
49320: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49321: LD_ADDR_VAR 0 9
49325: PUSH
49326: LD_VAR 0 53
49330: PUSH
49331: LD_VAR 0 54
49335: PUSH
49336: LD_VAR 0 55
49340: PUSH
49341: LD_VAR 0 56
49345: PUSH
49346: LD_VAR 0 57
49350: PUSH
49351: LD_VAR 0 58
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: PUSH
49364: LD_VAR 0 4
49368: PUSH
49369: LD_INT 1
49371: PLUS
49372: ARRAY
49373: ST_TO_ADDR
49374: GO 49483
49376: LD_INT 31
49378: DOUBLE
49379: EQUAL
49380: IFTRUE 49426
49382: LD_INT 32
49384: DOUBLE
49385: EQUAL
49386: IFTRUE 49426
49388: LD_INT 33
49390: DOUBLE
49391: EQUAL
49392: IFTRUE 49426
49394: LD_INT 27
49396: DOUBLE
49397: EQUAL
49398: IFTRUE 49426
49400: LD_INT 26
49402: DOUBLE
49403: EQUAL
49404: IFTRUE 49426
49406: LD_INT 28
49408: DOUBLE
49409: EQUAL
49410: IFTRUE 49426
49412: LD_INT 29
49414: DOUBLE
49415: EQUAL
49416: IFTRUE 49426
49418: LD_INT 30
49420: DOUBLE
49421: EQUAL
49422: IFTRUE 49426
49424: GO 49482
49426: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49427: LD_ADDR_VAR 0 9
49431: PUSH
49432: LD_VAR 0 59
49436: PUSH
49437: LD_VAR 0 60
49441: PUSH
49442: LD_VAR 0 61
49446: PUSH
49447: LD_VAR 0 62
49451: PUSH
49452: LD_VAR 0 63
49456: PUSH
49457: LD_VAR 0 64
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: PUSH
49470: LD_VAR 0 4
49474: PUSH
49475: LD_INT 1
49477: PLUS
49478: ARRAY
49479: ST_TO_ADDR
49480: GO 49483
49482: POP
// temp_list2 = [ ] ;
49483: LD_ADDR_VAR 0 10
49487: PUSH
49488: EMPTY
49489: ST_TO_ADDR
// for i in temp_list do
49490: LD_ADDR_VAR 0 8
49494: PUSH
49495: LD_VAR 0 9
49499: PUSH
49500: FOR_IN
49501: IFFALSE 49553
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49503: LD_ADDR_VAR 0 10
49507: PUSH
49508: LD_VAR 0 10
49512: PUSH
49513: LD_VAR 0 8
49517: PUSH
49518: LD_INT 1
49520: ARRAY
49521: PUSH
49522: LD_VAR 0 2
49526: PLUS
49527: PUSH
49528: LD_VAR 0 8
49532: PUSH
49533: LD_INT 2
49535: ARRAY
49536: PUSH
49537: LD_VAR 0 3
49541: PLUS
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: EMPTY
49548: LIST
49549: ADD
49550: ST_TO_ADDR
49551: GO 49500
49553: POP
49554: POP
// result = temp_list2 ;
49555: LD_ADDR_VAR 0 7
49559: PUSH
49560: LD_VAR 0 10
49564: ST_TO_ADDR
// end ;
49565: LD_VAR 0 7
49569: RET
// export function EnemyInRange ( unit , dist ) ; begin
49570: LD_INT 0
49572: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49573: LD_ADDR_VAR 0 3
49577: PUSH
49578: LD_VAR 0 1
49582: PPUSH
49583: CALL_OW 255
49587: PPUSH
49588: LD_VAR 0 1
49592: PPUSH
49593: CALL_OW 250
49597: PPUSH
49598: LD_VAR 0 1
49602: PPUSH
49603: CALL_OW 251
49607: PPUSH
49608: LD_VAR 0 2
49612: PPUSH
49613: CALL 22943 0 4
49617: PUSH
49618: LD_INT 4
49620: ARRAY
49621: ST_TO_ADDR
// end ;
49622: LD_VAR 0 3
49626: RET
// export function PlayerSeeMe ( unit ) ; begin
49627: LD_INT 0
49629: PPUSH
// result := See ( your_side , unit ) ;
49630: LD_ADDR_VAR 0 2
49634: PUSH
49635: LD_OWVAR 2
49639: PPUSH
49640: LD_VAR 0 1
49644: PPUSH
49645: CALL_OW 292
49649: ST_TO_ADDR
// end ;
49650: LD_VAR 0 2
49654: RET
// export function ReverseDir ( unit ) ; begin
49655: LD_INT 0
49657: PPUSH
// if not unit then
49658: LD_VAR 0 1
49662: NOT
49663: IFFALSE 49667
// exit ;
49665: GO 49690
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49667: LD_ADDR_VAR 0 2
49671: PUSH
49672: LD_VAR 0 1
49676: PPUSH
49677: CALL_OW 254
49681: PUSH
49682: LD_INT 3
49684: PLUS
49685: PUSH
49686: LD_INT 6
49688: MOD
49689: ST_TO_ADDR
// end ;
49690: LD_VAR 0 2
49694: RET
// export function ReverseArray ( array ) ; var i ; begin
49695: LD_INT 0
49697: PPUSH
49698: PPUSH
// if not array then
49699: LD_VAR 0 1
49703: NOT
49704: IFFALSE 49708
// exit ;
49706: GO 49763
// result := [ ] ;
49708: LD_ADDR_VAR 0 2
49712: PUSH
49713: EMPTY
49714: ST_TO_ADDR
// for i := array downto 1 do
49715: LD_ADDR_VAR 0 3
49719: PUSH
49720: DOUBLE
49721: LD_VAR 0 1
49725: INC
49726: ST_TO_ADDR
49727: LD_INT 1
49729: PUSH
49730: FOR_DOWNTO
49731: IFFALSE 49761
// result := Join ( result , array [ i ] ) ;
49733: LD_ADDR_VAR 0 2
49737: PUSH
49738: LD_VAR 0 2
49742: PPUSH
49743: LD_VAR 0 1
49747: PUSH
49748: LD_VAR 0 3
49752: ARRAY
49753: PPUSH
49754: CALL 54408 0 2
49758: ST_TO_ADDR
49759: GO 49730
49761: POP
49762: POP
// end ;
49763: LD_VAR 0 2
49767: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49768: LD_INT 0
49770: PPUSH
49771: PPUSH
49772: PPUSH
49773: PPUSH
49774: PPUSH
49775: PPUSH
// if not unit or not hexes then
49776: LD_VAR 0 1
49780: NOT
49781: PUSH
49782: LD_VAR 0 2
49786: NOT
49787: OR
49788: IFFALSE 49792
// exit ;
49790: GO 49915
// dist := 9999 ;
49792: LD_ADDR_VAR 0 5
49796: PUSH
49797: LD_INT 9999
49799: ST_TO_ADDR
// for i = 1 to hexes do
49800: LD_ADDR_VAR 0 4
49804: PUSH
49805: DOUBLE
49806: LD_INT 1
49808: DEC
49809: ST_TO_ADDR
49810: LD_VAR 0 2
49814: PUSH
49815: FOR_TO
49816: IFFALSE 49903
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49818: LD_ADDR_VAR 0 6
49822: PUSH
49823: LD_VAR 0 1
49827: PPUSH
49828: LD_VAR 0 2
49832: PUSH
49833: LD_VAR 0 4
49837: ARRAY
49838: PUSH
49839: LD_INT 1
49841: ARRAY
49842: PPUSH
49843: LD_VAR 0 2
49847: PUSH
49848: LD_VAR 0 4
49852: ARRAY
49853: PUSH
49854: LD_INT 2
49856: ARRAY
49857: PPUSH
49858: CALL_OW 297
49862: ST_TO_ADDR
// if tdist < dist then
49863: LD_VAR 0 6
49867: PUSH
49868: LD_VAR 0 5
49872: LESS
49873: IFFALSE 49901
// begin hex := hexes [ i ] ;
49875: LD_ADDR_VAR 0 8
49879: PUSH
49880: LD_VAR 0 2
49884: PUSH
49885: LD_VAR 0 4
49889: ARRAY
49890: ST_TO_ADDR
// dist := tdist ;
49891: LD_ADDR_VAR 0 5
49895: PUSH
49896: LD_VAR 0 6
49900: ST_TO_ADDR
// end ; end ;
49901: GO 49815
49903: POP
49904: POP
// result := hex ;
49905: LD_ADDR_VAR 0 3
49909: PUSH
49910: LD_VAR 0 8
49914: ST_TO_ADDR
// end ;
49915: LD_VAR 0 3
49919: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49920: LD_INT 0
49922: PPUSH
49923: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49924: LD_VAR 0 1
49928: NOT
49929: PUSH
49930: LD_VAR 0 1
49934: PUSH
49935: LD_INT 21
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 23
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PPUSH
49959: CALL_OW 69
49963: IN
49964: NOT
49965: OR
49966: IFFALSE 49970
// exit ;
49968: GO 50017
// for i = 1 to 3 do
49970: LD_ADDR_VAR 0 3
49974: PUSH
49975: DOUBLE
49976: LD_INT 1
49978: DEC
49979: ST_TO_ADDR
49980: LD_INT 3
49982: PUSH
49983: FOR_TO
49984: IFFALSE 50015
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49986: LD_VAR 0 1
49990: PPUSH
49991: CALL_OW 250
49995: PPUSH
49996: LD_VAR 0 1
50000: PPUSH
50001: CALL_OW 251
50005: PPUSH
50006: LD_INT 1
50008: PPUSH
50009: CALL_OW 453
50013: GO 49983
50015: POP
50016: POP
// end ;
50017: LD_VAR 0 2
50021: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50022: LD_INT 0
50024: PPUSH
50025: PPUSH
50026: PPUSH
50027: PPUSH
50028: PPUSH
50029: PPUSH
// if not unit or not enemy_unit then
50030: LD_VAR 0 1
50034: NOT
50035: PUSH
50036: LD_VAR 0 2
50040: NOT
50041: OR
50042: IFFALSE 50046
// exit ;
50044: GO 50513
// if GetLives ( i ) < 250 then
50046: LD_VAR 0 4
50050: PPUSH
50051: CALL_OW 256
50055: PUSH
50056: LD_INT 250
50058: LESS
50059: IFFALSE 50072
// begin ComAutodestruct ( i ) ;
50061: LD_VAR 0 4
50065: PPUSH
50066: CALL 49920 0 1
// exit ;
50070: GO 50513
// end ; x := GetX ( enemy_unit ) ;
50072: LD_ADDR_VAR 0 7
50076: PUSH
50077: LD_VAR 0 2
50081: PPUSH
50082: CALL_OW 250
50086: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50087: LD_ADDR_VAR 0 8
50091: PUSH
50092: LD_VAR 0 2
50096: PPUSH
50097: CALL_OW 251
50101: ST_TO_ADDR
// if not x or not y then
50102: LD_VAR 0 7
50106: NOT
50107: PUSH
50108: LD_VAR 0 8
50112: NOT
50113: OR
50114: IFFALSE 50118
// exit ;
50116: GO 50513
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50118: LD_ADDR_VAR 0 6
50122: PUSH
50123: LD_VAR 0 7
50127: PPUSH
50128: LD_INT 0
50130: PPUSH
50131: LD_INT 4
50133: PPUSH
50134: CALL_OW 272
50138: PUSH
50139: LD_VAR 0 8
50143: PPUSH
50144: LD_INT 0
50146: PPUSH
50147: LD_INT 4
50149: PPUSH
50150: CALL_OW 273
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_VAR 0 7
50163: PPUSH
50164: LD_INT 1
50166: PPUSH
50167: LD_INT 4
50169: PPUSH
50170: CALL_OW 272
50174: PUSH
50175: LD_VAR 0 8
50179: PPUSH
50180: LD_INT 1
50182: PPUSH
50183: LD_INT 4
50185: PPUSH
50186: CALL_OW 273
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_VAR 0 7
50199: PPUSH
50200: LD_INT 2
50202: PPUSH
50203: LD_INT 4
50205: PPUSH
50206: CALL_OW 272
50210: PUSH
50211: LD_VAR 0 8
50215: PPUSH
50216: LD_INT 2
50218: PPUSH
50219: LD_INT 4
50221: PPUSH
50222: CALL_OW 273
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_VAR 0 7
50235: PPUSH
50236: LD_INT 3
50238: PPUSH
50239: LD_INT 4
50241: PPUSH
50242: CALL_OW 272
50246: PUSH
50247: LD_VAR 0 8
50251: PPUSH
50252: LD_INT 3
50254: PPUSH
50255: LD_INT 4
50257: PPUSH
50258: CALL_OW 273
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_VAR 0 7
50271: PPUSH
50272: LD_INT 4
50274: PPUSH
50275: LD_INT 4
50277: PPUSH
50278: CALL_OW 272
50282: PUSH
50283: LD_VAR 0 8
50287: PPUSH
50288: LD_INT 4
50290: PPUSH
50291: LD_INT 4
50293: PPUSH
50294: CALL_OW 273
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_VAR 0 7
50307: PPUSH
50308: LD_INT 5
50310: PPUSH
50311: LD_INT 4
50313: PPUSH
50314: CALL_OW 272
50318: PUSH
50319: LD_VAR 0 8
50323: PPUSH
50324: LD_INT 5
50326: PPUSH
50327: LD_INT 4
50329: PPUSH
50330: CALL_OW 273
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: ST_TO_ADDR
// for i = tmp downto 1 do
50347: LD_ADDR_VAR 0 4
50351: PUSH
50352: DOUBLE
50353: LD_VAR 0 6
50357: INC
50358: ST_TO_ADDR
50359: LD_INT 1
50361: PUSH
50362: FOR_DOWNTO
50363: IFFALSE 50464
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50365: LD_VAR 0 6
50369: PUSH
50370: LD_VAR 0 4
50374: ARRAY
50375: PUSH
50376: LD_INT 1
50378: ARRAY
50379: PPUSH
50380: LD_VAR 0 6
50384: PUSH
50385: LD_VAR 0 4
50389: ARRAY
50390: PUSH
50391: LD_INT 2
50393: ARRAY
50394: PPUSH
50395: CALL_OW 488
50399: NOT
50400: PUSH
50401: LD_VAR 0 6
50405: PUSH
50406: LD_VAR 0 4
50410: ARRAY
50411: PUSH
50412: LD_INT 1
50414: ARRAY
50415: PPUSH
50416: LD_VAR 0 6
50420: PUSH
50421: LD_VAR 0 4
50425: ARRAY
50426: PUSH
50427: LD_INT 2
50429: ARRAY
50430: PPUSH
50431: CALL_OW 428
50435: PUSH
50436: LD_INT 0
50438: NONEQUAL
50439: OR
50440: IFFALSE 50462
// tmp := Delete ( tmp , i ) ;
50442: LD_ADDR_VAR 0 6
50446: PUSH
50447: LD_VAR 0 6
50451: PPUSH
50452: LD_VAR 0 4
50456: PPUSH
50457: CALL_OW 3
50461: ST_TO_ADDR
50462: GO 50362
50464: POP
50465: POP
// j := GetClosestHex ( unit , tmp ) ;
50466: LD_ADDR_VAR 0 5
50470: PUSH
50471: LD_VAR 0 1
50475: PPUSH
50476: LD_VAR 0 6
50480: PPUSH
50481: CALL 49768 0 2
50485: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50486: LD_VAR 0 1
50490: PPUSH
50491: LD_VAR 0 5
50495: PUSH
50496: LD_INT 1
50498: ARRAY
50499: PPUSH
50500: LD_VAR 0 5
50504: PUSH
50505: LD_INT 2
50507: ARRAY
50508: PPUSH
50509: CALL_OW 111
// end ;
50513: LD_VAR 0 3
50517: RET
// export function PrepareApemanSoldier ( ) ; begin
50518: LD_INT 0
50520: PPUSH
// uc_nation := 0 ;
50521: LD_ADDR_OWVAR 21
50525: PUSH
50526: LD_INT 0
50528: ST_TO_ADDR
// hc_sex := sex_male ;
50529: LD_ADDR_OWVAR 27
50533: PUSH
50534: LD_INT 1
50536: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50537: LD_ADDR_OWVAR 28
50541: PUSH
50542: LD_INT 15
50544: ST_TO_ADDR
// hc_gallery :=  ;
50545: LD_ADDR_OWVAR 33
50549: PUSH
50550: LD_STRING 
50552: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50553: LD_ADDR_OWVAR 31
50557: PUSH
50558: LD_INT 0
50560: PPUSH
50561: LD_INT 3
50563: PPUSH
50564: CALL_OW 12
50568: PUSH
50569: LD_INT 0
50571: PPUSH
50572: LD_INT 3
50574: PPUSH
50575: CALL_OW 12
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: ST_TO_ADDR
// end ;
50592: LD_VAR 0 1
50596: RET
// export function PrepareApemanEngineer ( ) ; begin
50597: LD_INT 0
50599: PPUSH
// uc_nation := 0 ;
50600: LD_ADDR_OWVAR 21
50604: PUSH
50605: LD_INT 0
50607: ST_TO_ADDR
// hc_sex := sex_male ;
50608: LD_ADDR_OWVAR 27
50612: PUSH
50613: LD_INT 1
50615: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50616: LD_ADDR_OWVAR 28
50620: PUSH
50621: LD_INT 16
50623: ST_TO_ADDR
// hc_gallery :=  ;
50624: LD_ADDR_OWVAR 33
50628: PUSH
50629: LD_STRING 
50631: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50632: LD_ADDR_OWVAR 31
50636: PUSH
50637: LD_INT 0
50639: PPUSH
50640: LD_INT 3
50642: PPUSH
50643: CALL_OW 12
50647: PUSH
50648: LD_INT 0
50650: PPUSH
50651: LD_INT 3
50653: PPUSH
50654: CALL_OW 12
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: ST_TO_ADDR
// end ;
50671: LD_VAR 0 1
50675: RET
// export function PrepareApeman ( agressivity ) ; begin
50676: LD_INT 0
50678: PPUSH
// uc_side := 0 ;
50679: LD_ADDR_OWVAR 20
50683: PUSH
50684: LD_INT 0
50686: ST_TO_ADDR
// uc_nation := 0 ;
50687: LD_ADDR_OWVAR 21
50691: PUSH
50692: LD_INT 0
50694: ST_TO_ADDR
// hc_sex := sex_male ;
50695: LD_ADDR_OWVAR 27
50699: PUSH
50700: LD_INT 1
50702: ST_TO_ADDR
// hc_class := class_apeman ;
50703: LD_ADDR_OWVAR 28
50707: PUSH
50708: LD_INT 12
50710: ST_TO_ADDR
// hc_gallery :=  ;
50711: LD_ADDR_OWVAR 33
50715: PUSH
50716: LD_STRING 
50718: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50719: LD_ADDR_OWVAR 35
50723: PUSH
50724: LD_VAR 0 1
50728: NEG
50729: PPUSH
50730: LD_VAR 0 1
50734: PPUSH
50735: CALL_OW 12
50739: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50740: LD_ADDR_OWVAR 31
50744: PUSH
50745: LD_INT 0
50747: PPUSH
50748: LD_INT 3
50750: PPUSH
50751: CALL_OW 12
50755: PUSH
50756: LD_INT 0
50758: PPUSH
50759: LD_INT 3
50761: PPUSH
50762: CALL_OW 12
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: ST_TO_ADDR
// end ;
50779: LD_VAR 0 2
50783: RET
// export function PrepareTiger ( agressivity ) ; begin
50784: LD_INT 0
50786: PPUSH
// uc_side := 0 ;
50787: LD_ADDR_OWVAR 20
50791: PUSH
50792: LD_INT 0
50794: ST_TO_ADDR
// uc_nation := 0 ;
50795: LD_ADDR_OWVAR 21
50799: PUSH
50800: LD_INT 0
50802: ST_TO_ADDR
// hc_class := class_tiger ;
50803: LD_ADDR_OWVAR 28
50807: PUSH
50808: LD_INT 14
50810: ST_TO_ADDR
// hc_gallery :=  ;
50811: LD_ADDR_OWVAR 33
50815: PUSH
50816: LD_STRING 
50818: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50819: LD_ADDR_OWVAR 35
50823: PUSH
50824: LD_VAR 0 1
50828: NEG
50829: PPUSH
50830: LD_VAR 0 1
50834: PPUSH
50835: CALL_OW 12
50839: ST_TO_ADDR
// end ;
50840: LD_VAR 0 2
50844: RET
// export function PrepareEnchidna ( ) ; begin
50845: LD_INT 0
50847: PPUSH
// uc_side := 0 ;
50848: LD_ADDR_OWVAR 20
50852: PUSH
50853: LD_INT 0
50855: ST_TO_ADDR
// uc_nation := 0 ;
50856: LD_ADDR_OWVAR 21
50860: PUSH
50861: LD_INT 0
50863: ST_TO_ADDR
// hc_class := class_baggie ;
50864: LD_ADDR_OWVAR 28
50868: PUSH
50869: LD_INT 13
50871: ST_TO_ADDR
// hc_gallery :=  ;
50872: LD_ADDR_OWVAR 33
50876: PUSH
50877: LD_STRING 
50879: ST_TO_ADDR
// end ;
50880: LD_VAR 0 1
50884: RET
// export function PrepareFrog ( ) ; begin
50885: LD_INT 0
50887: PPUSH
// uc_side := 0 ;
50888: LD_ADDR_OWVAR 20
50892: PUSH
50893: LD_INT 0
50895: ST_TO_ADDR
// uc_nation := 0 ;
50896: LD_ADDR_OWVAR 21
50900: PUSH
50901: LD_INT 0
50903: ST_TO_ADDR
// hc_class := class_frog ;
50904: LD_ADDR_OWVAR 28
50908: PUSH
50909: LD_INT 19
50911: ST_TO_ADDR
// hc_gallery :=  ;
50912: LD_ADDR_OWVAR 33
50916: PUSH
50917: LD_STRING 
50919: ST_TO_ADDR
// end ;
50920: LD_VAR 0 1
50924: RET
// export function PrepareFish ( ) ; begin
50925: LD_INT 0
50927: PPUSH
// uc_side := 0 ;
50928: LD_ADDR_OWVAR 20
50932: PUSH
50933: LD_INT 0
50935: ST_TO_ADDR
// uc_nation := 0 ;
50936: LD_ADDR_OWVAR 21
50940: PUSH
50941: LD_INT 0
50943: ST_TO_ADDR
// hc_class := class_fish ;
50944: LD_ADDR_OWVAR 28
50948: PUSH
50949: LD_INT 20
50951: ST_TO_ADDR
// hc_gallery :=  ;
50952: LD_ADDR_OWVAR 33
50956: PUSH
50957: LD_STRING 
50959: ST_TO_ADDR
// end ;
50960: LD_VAR 0 1
50964: RET
// export function PrepareBird ( ) ; begin
50965: LD_INT 0
50967: PPUSH
// uc_side := 0 ;
50968: LD_ADDR_OWVAR 20
50972: PUSH
50973: LD_INT 0
50975: ST_TO_ADDR
// uc_nation := 0 ;
50976: LD_ADDR_OWVAR 21
50980: PUSH
50981: LD_INT 0
50983: ST_TO_ADDR
// hc_class := class_phororhacos ;
50984: LD_ADDR_OWVAR 28
50988: PUSH
50989: LD_INT 18
50991: ST_TO_ADDR
// hc_gallery :=  ;
50992: LD_ADDR_OWVAR 33
50996: PUSH
50997: LD_STRING 
50999: ST_TO_ADDR
// end ;
51000: LD_VAR 0 1
51004: RET
// export function PrepareHorse ( ) ; begin
51005: LD_INT 0
51007: PPUSH
// uc_side := 0 ;
51008: LD_ADDR_OWVAR 20
51012: PUSH
51013: LD_INT 0
51015: ST_TO_ADDR
// uc_nation := 0 ;
51016: LD_ADDR_OWVAR 21
51020: PUSH
51021: LD_INT 0
51023: ST_TO_ADDR
// hc_class := class_horse ;
51024: LD_ADDR_OWVAR 28
51028: PUSH
51029: LD_INT 21
51031: ST_TO_ADDR
// hc_gallery :=  ;
51032: LD_ADDR_OWVAR 33
51036: PUSH
51037: LD_STRING 
51039: ST_TO_ADDR
// end ;
51040: LD_VAR 0 1
51044: RET
// export function PrepareMastodont ( ) ; begin
51045: LD_INT 0
51047: PPUSH
// uc_side := 0 ;
51048: LD_ADDR_OWVAR 20
51052: PUSH
51053: LD_INT 0
51055: ST_TO_ADDR
// uc_nation := 0 ;
51056: LD_ADDR_OWVAR 21
51060: PUSH
51061: LD_INT 0
51063: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51064: LD_ADDR_OWVAR 37
51068: PUSH
51069: LD_INT 31
51071: ST_TO_ADDR
// vc_control := control_rider ;
51072: LD_ADDR_OWVAR 38
51076: PUSH
51077: LD_INT 4
51079: ST_TO_ADDR
// end ;
51080: LD_VAR 0 1
51084: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51085: LD_INT 0
51087: PPUSH
51088: PPUSH
51089: PPUSH
// uc_side = 0 ;
51090: LD_ADDR_OWVAR 20
51094: PUSH
51095: LD_INT 0
51097: ST_TO_ADDR
// uc_nation = 0 ;
51098: LD_ADDR_OWVAR 21
51102: PUSH
51103: LD_INT 0
51105: ST_TO_ADDR
// InitHc_All ( ) ;
51106: CALL_OW 584
// InitVc ;
51110: CALL_OW 20
// if mastodonts then
51114: LD_VAR 0 6
51118: IFFALSE 51185
// for i = 1 to mastodonts do
51120: LD_ADDR_VAR 0 11
51124: PUSH
51125: DOUBLE
51126: LD_INT 1
51128: DEC
51129: ST_TO_ADDR
51130: LD_VAR 0 6
51134: PUSH
51135: FOR_TO
51136: IFFALSE 51183
// begin vc_chassis := 31 ;
51138: LD_ADDR_OWVAR 37
51142: PUSH
51143: LD_INT 31
51145: ST_TO_ADDR
// vc_control := control_rider ;
51146: LD_ADDR_OWVAR 38
51150: PUSH
51151: LD_INT 4
51153: ST_TO_ADDR
// animal := CreateVehicle ;
51154: LD_ADDR_VAR 0 12
51158: PUSH
51159: CALL_OW 45
51163: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51164: LD_VAR 0 12
51168: PPUSH
51169: LD_VAR 0 8
51173: PPUSH
51174: LD_INT 0
51176: PPUSH
51177: CALL 53313 0 3
// end ;
51181: GO 51135
51183: POP
51184: POP
// if horses then
51185: LD_VAR 0 5
51189: IFFALSE 51256
// for i = 1 to horses do
51191: LD_ADDR_VAR 0 11
51195: PUSH
51196: DOUBLE
51197: LD_INT 1
51199: DEC
51200: ST_TO_ADDR
51201: LD_VAR 0 5
51205: PUSH
51206: FOR_TO
51207: IFFALSE 51254
// begin hc_class := 21 ;
51209: LD_ADDR_OWVAR 28
51213: PUSH
51214: LD_INT 21
51216: ST_TO_ADDR
// hc_gallery :=  ;
51217: LD_ADDR_OWVAR 33
51221: PUSH
51222: LD_STRING 
51224: ST_TO_ADDR
// animal := CreateHuman ;
51225: LD_ADDR_VAR 0 12
51229: PUSH
51230: CALL_OW 44
51234: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51235: LD_VAR 0 12
51239: PPUSH
51240: LD_VAR 0 8
51244: PPUSH
51245: LD_INT 0
51247: PPUSH
51248: CALL 53313 0 3
// end ;
51252: GO 51206
51254: POP
51255: POP
// if birds then
51256: LD_VAR 0 1
51260: IFFALSE 51327
// for i = 1 to birds do
51262: LD_ADDR_VAR 0 11
51266: PUSH
51267: DOUBLE
51268: LD_INT 1
51270: DEC
51271: ST_TO_ADDR
51272: LD_VAR 0 1
51276: PUSH
51277: FOR_TO
51278: IFFALSE 51325
// begin hc_class := 18 ;
51280: LD_ADDR_OWVAR 28
51284: PUSH
51285: LD_INT 18
51287: ST_TO_ADDR
// hc_gallery =  ;
51288: LD_ADDR_OWVAR 33
51292: PUSH
51293: LD_STRING 
51295: ST_TO_ADDR
// animal := CreateHuman ;
51296: LD_ADDR_VAR 0 12
51300: PUSH
51301: CALL_OW 44
51305: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51306: LD_VAR 0 12
51310: PPUSH
51311: LD_VAR 0 8
51315: PPUSH
51316: LD_INT 0
51318: PPUSH
51319: CALL 53313 0 3
// end ;
51323: GO 51277
51325: POP
51326: POP
// if tigers then
51327: LD_VAR 0 2
51331: IFFALSE 51415
// for i = 1 to tigers do
51333: LD_ADDR_VAR 0 11
51337: PUSH
51338: DOUBLE
51339: LD_INT 1
51341: DEC
51342: ST_TO_ADDR
51343: LD_VAR 0 2
51347: PUSH
51348: FOR_TO
51349: IFFALSE 51413
// begin hc_class = class_tiger ;
51351: LD_ADDR_OWVAR 28
51355: PUSH
51356: LD_INT 14
51358: ST_TO_ADDR
// hc_gallery =  ;
51359: LD_ADDR_OWVAR 33
51363: PUSH
51364: LD_STRING 
51366: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51367: LD_ADDR_OWVAR 35
51371: PUSH
51372: LD_INT 7
51374: NEG
51375: PPUSH
51376: LD_INT 7
51378: PPUSH
51379: CALL_OW 12
51383: ST_TO_ADDR
// animal := CreateHuman ;
51384: LD_ADDR_VAR 0 12
51388: PUSH
51389: CALL_OW 44
51393: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51394: LD_VAR 0 12
51398: PPUSH
51399: LD_VAR 0 8
51403: PPUSH
51404: LD_INT 0
51406: PPUSH
51407: CALL 53313 0 3
// end ;
51411: GO 51348
51413: POP
51414: POP
// if apemans then
51415: LD_VAR 0 3
51419: IFFALSE 51542
// for i = 1 to apemans do
51421: LD_ADDR_VAR 0 11
51425: PUSH
51426: DOUBLE
51427: LD_INT 1
51429: DEC
51430: ST_TO_ADDR
51431: LD_VAR 0 3
51435: PUSH
51436: FOR_TO
51437: IFFALSE 51540
// begin hc_class = class_apeman ;
51439: LD_ADDR_OWVAR 28
51443: PUSH
51444: LD_INT 12
51446: ST_TO_ADDR
// hc_gallery =  ;
51447: LD_ADDR_OWVAR 33
51451: PUSH
51452: LD_STRING 
51454: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51455: LD_ADDR_OWVAR 35
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PPUSH
51464: LD_INT 2
51466: PPUSH
51467: CALL_OW 12
51471: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51472: LD_ADDR_OWVAR 31
51476: PUSH
51477: LD_INT 1
51479: PPUSH
51480: LD_INT 3
51482: PPUSH
51483: CALL_OW 12
51487: PUSH
51488: LD_INT 1
51490: PPUSH
51491: LD_INT 3
51493: PPUSH
51494: CALL_OW 12
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: ST_TO_ADDR
// animal := CreateHuman ;
51511: LD_ADDR_VAR 0 12
51515: PUSH
51516: CALL_OW 44
51520: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51521: LD_VAR 0 12
51525: PPUSH
51526: LD_VAR 0 8
51530: PPUSH
51531: LD_INT 0
51533: PPUSH
51534: CALL 53313 0 3
// end ;
51538: GO 51436
51540: POP
51541: POP
// if enchidnas then
51542: LD_VAR 0 4
51546: IFFALSE 51613
// for i = 1 to enchidnas do
51548: LD_ADDR_VAR 0 11
51552: PUSH
51553: DOUBLE
51554: LD_INT 1
51556: DEC
51557: ST_TO_ADDR
51558: LD_VAR 0 4
51562: PUSH
51563: FOR_TO
51564: IFFALSE 51611
// begin hc_class = 13 ;
51566: LD_ADDR_OWVAR 28
51570: PUSH
51571: LD_INT 13
51573: ST_TO_ADDR
// hc_gallery =  ;
51574: LD_ADDR_OWVAR 33
51578: PUSH
51579: LD_STRING 
51581: ST_TO_ADDR
// animal := CreateHuman ;
51582: LD_ADDR_VAR 0 12
51586: PUSH
51587: CALL_OW 44
51591: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51592: LD_VAR 0 12
51596: PPUSH
51597: LD_VAR 0 8
51601: PPUSH
51602: LD_INT 0
51604: PPUSH
51605: CALL 53313 0 3
// end ;
51609: GO 51563
51611: POP
51612: POP
// if fishes then
51613: LD_VAR 0 7
51617: IFFALSE 51684
// for i = 1 to fishes do
51619: LD_ADDR_VAR 0 11
51623: PUSH
51624: DOUBLE
51625: LD_INT 1
51627: DEC
51628: ST_TO_ADDR
51629: LD_VAR 0 7
51633: PUSH
51634: FOR_TO
51635: IFFALSE 51682
// begin hc_class = 20 ;
51637: LD_ADDR_OWVAR 28
51641: PUSH
51642: LD_INT 20
51644: ST_TO_ADDR
// hc_gallery =  ;
51645: LD_ADDR_OWVAR 33
51649: PUSH
51650: LD_STRING 
51652: ST_TO_ADDR
// animal := CreateHuman ;
51653: LD_ADDR_VAR 0 12
51657: PUSH
51658: CALL_OW 44
51662: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51663: LD_VAR 0 12
51667: PPUSH
51668: LD_VAR 0 9
51672: PPUSH
51673: LD_INT 0
51675: PPUSH
51676: CALL 53313 0 3
// end ;
51680: GO 51634
51682: POP
51683: POP
// end ;
51684: LD_VAR 0 10
51688: RET
// export function WantHeal ( sci , unit ) ; begin
51689: LD_INT 0
51691: PPUSH
// if GetTaskList ( sci ) > 0 then
51692: LD_VAR 0 1
51696: PPUSH
51697: CALL_OW 437
51701: PUSH
51702: LD_INT 0
51704: GREATER
51705: IFFALSE 51775
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51707: LD_VAR 0 1
51711: PPUSH
51712: CALL_OW 437
51716: PUSH
51717: LD_INT 1
51719: ARRAY
51720: PUSH
51721: LD_INT 1
51723: ARRAY
51724: PUSH
51725: LD_STRING l
51727: EQUAL
51728: PUSH
51729: LD_VAR 0 1
51733: PPUSH
51734: CALL_OW 437
51738: PUSH
51739: LD_INT 1
51741: ARRAY
51742: PUSH
51743: LD_INT 4
51745: ARRAY
51746: PUSH
51747: LD_VAR 0 2
51751: EQUAL
51752: AND
51753: IFFALSE 51765
// result := true else
51755: LD_ADDR_VAR 0 3
51759: PUSH
51760: LD_INT 1
51762: ST_TO_ADDR
51763: GO 51773
// result := false ;
51765: LD_ADDR_VAR 0 3
51769: PUSH
51770: LD_INT 0
51772: ST_TO_ADDR
// end else
51773: GO 51783
// result := false ;
51775: LD_ADDR_VAR 0 3
51779: PUSH
51780: LD_INT 0
51782: ST_TO_ADDR
// end ;
51783: LD_VAR 0 3
51787: RET
// export function HealTarget ( sci ) ; begin
51788: LD_INT 0
51790: PPUSH
// if not sci then
51791: LD_VAR 0 1
51795: NOT
51796: IFFALSE 51800
// exit ;
51798: GO 51865
// result := 0 ;
51800: LD_ADDR_VAR 0 2
51804: PUSH
51805: LD_INT 0
51807: ST_TO_ADDR
// if GetTaskList ( sci ) then
51808: LD_VAR 0 1
51812: PPUSH
51813: CALL_OW 437
51817: IFFALSE 51865
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51819: LD_VAR 0 1
51823: PPUSH
51824: CALL_OW 437
51828: PUSH
51829: LD_INT 1
51831: ARRAY
51832: PUSH
51833: LD_INT 1
51835: ARRAY
51836: PUSH
51837: LD_STRING l
51839: EQUAL
51840: IFFALSE 51865
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51842: LD_ADDR_VAR 0 2
51846: PUSH
51847: LD_VAR 0 1
51851: PPUSH
51852: CALL_OW 437
51856: PUSH
51857: LD_INT 1
51859: ARRAY
51860: PUSH
51861: LD_INT 4
51863: ARRAY
51864: ST_TO_ADDR
// end ;
51865: LD_VAR 0 2
51869: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51870: LD_INT 0
51872: PPUSH
51873: PPUSH
51874: PPUSH
51875: PPUSH
// if not base_units then
51876: LD_VAR 0 1
51880: NOT
51881: IFFALSE 51885
// exit ;
51883: GO 51972
// result := false ;
51885: LD_ADDR_VAR 0 2
51889: PUSH
51890: LD_INT 0
51892: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51893: LD_ADDR_VAR 0 5
51897: PUSH
51898: LD_VAR 0 1
51902: PPUSH
51903: LD_INT 21
51905: PUSH
51906: LD_INT 3
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PPUSH
51913: CALL_OW 72
51917: ST_TO_ADDR
// if not tmp then
51918: LD_VAR 0 5
51922: NOT
51923: IFFALSE 51927
// exit ;
51925: GO 51972
// for i in tmp do
51927: LD_ADDR_VAR 0 3
51931: PUSH
51932: LD_VAR 0 5
51936: PUSH
51937: FOR_IN
51938: IFFALSE 51970
// begin result := EnemyInRange ( i , 22 ) ;
51940: LD_ADDR_VAR 0 2
51944: PUSH
51945: LD_VAR 0 3
51949: PPUSH
51950: LD_INT 22
51952: PPUSH
51953: CALL 49570 0 2
51957: ST_TO_ADDR
// if result then
51958: LD_VAR 0 2
51962: IFFALSE 51968
// exit ;
51964: POP
51965: POP
51966: GO 51972
// end ;
51968: GO 51937
51970: POP
51971: POP
// end ;
51972: LD_VAR 0 2
51976: RET
// export function FilterByTag ( units , tag ) ; begin
51977: LD_INT 0
51979: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51980: LD_ADDR_VAR 0 3
51984: PUSH
51985: LD_VAR 0 1
51989: PPUSH
51990: LD_INT 120
51992: PUSH
51993: LD_VAR 0 2
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PPUSH
52002: CALL_OW 72
52006: ST_TO_ADDR
// end ;
52007: LD_VAR 0 3
52011: RET
// export function IsDriver ( un ) ; begin
52012: LD_INT 0
52014: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52015: LD_ADDR_VAR 0 2
52019: PUSH
52020: LD_VAR 0 1
52024: PUSH
52025: LD_INT 55
52027: PUSH
52028: EMPTY
52029: LIST
52030: PPUSH
52031: CALL_OW 69
52035: IN
52036: ST_TO_ADDR
// end ;
52037: LD_VAR 0 2
52041: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52042: LD_INT 0
52044: PPUSH
52045: PPUSH
// list := [ ] ;
52046: LD_ADDR_VAR 0 5
52050: PUSH
52051: EMPTY
52052: ST_TO_ADDR
// case d of 0 :
52053: LD_VAR 0 3
52057: PUSH
52058: LD_INT 0
52060: DOUBLE
52061: EQUAL
52062: IFTRUE 52066
52064: GO 52199
52066: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52067: LD_ADDR_VAR 0 5
52071: PUSH
52072: LD_VAR 0 1
52076: PUSH
52077: LD_INT 4
52079: MINUS
52080: PUSH
52081: LD_VAR 0 2
52085: PUSH
52086: LD_INT 4
52088: MINUS
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: LIST
52097: PUSH
52098: LD_VAR 0 1
52102: PUSH
52103: LD_INT 3
52105: MINUS
52106: PUSH
52107: LD_VAR 0 2
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: LIST
52119: PUSH
52120: LD_VAR 0 1
52124: PUSH
52125: LD_INT 4
52127: PLUS
52128: PUSH
52129: LD_VAR 0 2
52133: PUSH
52134: LD_INT 4
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: LIST
52141: PUSH
52142: LD_VAR 0 1
52146: PUSH
52147: LD_INT 3
52149: PLUS
52150: PUSH
52151: LD_VAR 0 2
52155: PUSH
52156: LD_INT 3
52158: PLUS
52159: PUSH
52160: LD_INT 5
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: LIST
52167: PUSH
52168: LD_VAR 0 1
52172: PUSH
52173: LD_VAR 0 2
52177: PUSH
52178: LD_INT 4
52180: PLUS
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: ST_TO_ADDR
// end ; 1 :
52197: GO 52897
52199: LD_INT 1
52201: DOUBLE
52202: EQUAL
52203: IFTRUE 52207
52205: GO 52340
52207: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52208: LD_ADDR_VAR 0 5
52212: PUSH
52213: LD_VAR 0 1
52217: PUSH
52218: LD_VAR 0 2
52222: PUSH
52223: LD_INT 4
52225: MINUS
52226: PUSH
52227: LD_INT 3
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: LIST
52234: PUSH
52235: LD_VAR 0 1
52239: PUSH
52240: LD_INT 3
52242: MINUS
52243: PUSH
52244: LD_VAR 0 2
52248: PUSH
52249: LD_INT 3
52251: MINUS
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: LIST
52260: PUSH
52261: LD_VAR 0 1
52265: PUSH
52266: LD_INT 4
52268: MINUS
52269: PUSH
52270: LD_VAR 0 2
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: LIST
52282: PUSH
52283: LD_VAR 0 1
52287: PUSH
52288: LD_VAR 0 2
52292: PUSH
52293: LD_INT 3
52295: PLUS
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: PUSH
52305: LD_VAR 0 1
52309: PUSH
52310: LD_INT 4
52312: PLUS
52313: PUSH
52314: LD_VAR 0 2
52318: PUSH
52319: LD_INT 4
52321: PLUS
52322: PUSH
52323: LD_INT 5
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: ST_TO_ADDR
// end ; 2 :
52338: GO 52897
52340: LD_INT 2
52342: DOUBLE
52343: EQUAL
52344: IFTRUE 52348
52346: GO 52477
52348: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52349: LD_ADDR_VAR 0 5
52353: PUSH
52354: LD_VAR 0 1
52358: PUSH
52359: LD_VAR 0 2
52363: PUSH
52364: LD_INT 3
52366: MINUS
52367: PUSH
52368: LD_INT 3
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: LIST
52375: PUSH
52376: LD_VAR 0 1
52380: PUSH
52381: LD_INT 4
52383: PLUS
52384: PUSH
52385: LD_VAR 0 2
52389: PUSH
52390: LD_INT 4
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: LIST
52397: PUSH
52398: LD_VAR 0 1
52402: PUSH
52403: LD_VAR 0 2
52407: PUSH
52408: LD_INT 4
52410: PLUS
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: LIST
52419: PUSH
52420: LD_VAR 0 1
52424: PUSH
52425: LD_INT 3
52427: MINUS
52428: PUSH
52429: LD_VAR 0 2
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: LIST
52441: PUSH
52442: LD_VAR 0 1
52446: PUSH
52447: LD_INT 4
52449: MINUS
52450: PUSH
52451: LD_VAR 0 2
52455: PUSH
52456: LD_INT 4
52458: MINUS
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: LIST
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: ST_TO_ADDR
// end ; 3 :
52475: GO 52897
52477: LD_INT 3
52479: DOUBLE
52480: EQUAL
52481: IFTRUE 52485
52483: GO 52618
52485: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52486: LD_ADDR_VAR 0 5
52490: PUSH
52491: LD_VAR 0 1
52495: PUSH
52496: LD_INT 3
52498: PLUS
52499: PUSH
52500: LD_VAR 0 2
52504: PUSH
52505: LD_INT 4
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: PUSH
52513: LD_VAR 0 1
52517: PUSH
52518: LD_INT 4
52520: PLUS
52521: PUSH
52522: LD_VAR 0 2
52526: PUSH
52527: LD_INT 4
52529: PLUS
52530: PUSH
52531: LD_INT 5
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: LIST
52538: PUSH
52539: LD_VAR 0 1
52543: PUSH
52544: LD_INT 4
52546: MINUS
52547: PUSH
52548: LD_VAR 0 2
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: LIST
52560: PUSH
52561: LD_VAR 0 1
52565: PUSH
52566: LD_VAR 0 2
52570: PUSH
52571: LD_INT 4
52573: MINUS
52574: PUSH
52575: LD_INT 3
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: PUSH
52583: LD_VAR 0 1
52587: PUSH
52588: LD_INT 3
52590: MINUS
52591: PUSH
52592: LD_VAR 0 2
52596: PUSH
52597: LD_INT 3
52599: MINUS
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: LIST
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: ST_TO_ADDR
// end ; 4 :
52616: GO 52897
52618: LD_INT 4
52620: DOUBLE
52621: EQUAL
52622: IFTRUE 52626
52624: GO 52759
52626: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52627: LD_ADDR_VAR 0 5
52631: PUSH
52632: LD_VAR 0 1
52636: PUSH
52637: LD_VAR 0 2
52641: PUSH
52642: LD_INT 4
52644: PLUS
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: LIST
52653: PUSH
52654: LD_VAR 0 1
52658: PUSH
52659: LD_INT 3
52661: PLUS
52662: PUSH
52663: LD_VAR 0 2
52667: PUSH
52668: LD_INT 3
52670: PLUS
52671: PUSH
52672: LD_INT 5
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: LIST
52679: PUSH
52680: LD_VAR 0 1
52684: PUSH
52685: LD_INT 4
52687: PLUS
52688: PUSH
52689: LD_VAR 0 2
52693: PUSH
52694: LD_INT 4
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: PUSH
52702: LD_VAR 0 1
52706: PUSH
52707: LD_VAR 0 2
52711: PUSH
52712: LD_INT 3
52714: MINUS
52715: PUSH
52716: LD_INT 3
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: PUSH
52724: LD_VAR 0 1
52728: PUSH
52729: LD_INT 4
52731: MINUS
52732: PUSH
52733: LD_VAR 0 2
52737: PUSH
52738: LD_INT 4
52740: MINUS
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: LIST
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: ST_TO_ADDR
// end ; 5 :
52757: GO 52897
52759: LD_INT 5
52761: DOUBLE
52762: EQUAL
52763: IFTRUE 52767
52765: GO 52896
52767: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52768: LD_ADDR_VAR 0 5
52772: PUSH
52773: LD_VAR 0 1
52777: PUSH
52778: LD_INT 4
52780: MINUS
52781: PUSH
52782: LD_VAR 0 2
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: LIST
52794: PUSH
52795: LD_VAR 0 1
52799: PUSH
52800: LD_VAR 0 2
52804: PUSH
52805: LD_INT 4
52807: MINUS
52808: PUSH
52809: LD_INT 3
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: LIST
52816: PUSH
52817: LD_VAR 0 1
52821: PUSH
52822: LD_INT 4
52824: PLUS
52825: PUSH
52826: LD_VAR 0 2
52830: PUSH
52831: LD_INT 4
52833: PLUS
52834: PUSH
52835: LD_INT 5
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: LIST
52842: PUSH
52843: LD_VAR 0 1
52847: PUSH
52848: LD_INT 3
52850: PLUS
52851: PUSH
52852: LD_VAR 0 2
52856: PUSH
52857: LD_INT 4
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: LIST
52864: PUSH
52865: LD_VAR 0 1
52869: PUSH
52870: LD_VAR 0 2
52874: PUSH
52875: LD_INT 3
52877: PLUS
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: LIST
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: ST_TO_ADDR
// end ; end ;
52894: GO 52897
52896: POP
// result := list ;
52897: LD_ADDR_VAR 0 4
52901: PUSH
52902: LD_VAR 0 5
52906: ST_TO_ADDR
// end ;
52907: LD_VAR 0 4
52911: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52912: LD_INT 0
52914: PPUSH
52915: PPUSH
52916: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52917: LD_VAR 0 1
52921: NOT
52922: PUSH
52923: LD_VAR 0 2
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: LD_INT 3
52936: PUSH
52937: LD_INT 4
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: IN
52946: NOT
52947: OR
52948: IFFALSE 52952
// exit ;
52950: GO 53035
// tmp := [ ] ;
52952: LD_ADDR_VAR 0 5
52956: PUSH
52957: EMPTY
52958: ST_TO_ADDR
// for i in units do
52959: LD_ADDR_VAR 0 4
52963: PUSH
52964: LD_VAR 0 1
52968: PUSH
52969: FOR_IN
52970: IFFALSE 53004
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52972: LD_ADDR_VAR 0 5
52976: PUSH
52977: LD_VAR 0 5
52981: PPUSH
52982: LD_VAR 0 4
52986: PPUSH
52987: LD_VAR 0 2
52991: PPUSH
52992: CALL_OW 259
52996: PPUSH
52997: CALL 54408 0 2
53001: ST_TO_ADDR
53002: GO 52969
53004: POP
53005: POP
// if not tmp then
53006: LD_VAR 0 5
53010: NOT
53011: IFFALSE 53015
// exit ;
53013: GO 53035
// result := SortListByListDesc ( units , tmp ) ;
53015: LD_ADDR_VAR 0 3
53019: PUSH
53020: LD_VAR 0 1
53024: PPUSH
53025: LD_VAR 0 5
53029: PPUSH
53030: CALL_OW 77
53034: ST_TO_ADDR
// end ;
53035: LD_VAR 0 3
53039: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53040: LD_INT 0
53042: PPUSH
53043: PPUSH
53044: PPUSH
// result := false ;
53045: LD_ADDR_VAR 0 3
53049: PUSH
53050: LD_INT 0
53052: ST_TO_ADDR
// if not building then
53053: LD_VAR 0 2
53057: NOT
53058: IFFALSE 53062
// exit ;
53060: GO 53200
// x := GetX ( building ) ;
53062: LD_ADDR_VAR 0 4
53066: PUSH
53067: LD_VAR 0 2
53071: PPUSH
53072: CALL_OW 250
53076: ST_TO_ADDR
// y := GetY ( building ) ;
53077: LD_ADDR_VAR 0 5
53081: PUSH
53082: LD_VAR 0 2
53086: PPUSH
53087: CALL_OW 251
53091: ST_TO_ADDR
// if not x or not y then
53092: LD_VAR 0 4
53096: NOT
53097: PUSH
53098: LD_VAR 0 5
53102: NOT
53103: OR
53104: IFFALSE 53108
// exit ;
53106: GO 53200
// if GetTaskList ( unit ) then
53108: LD_VAR 0 1
53112: PPUSH
53113: CALL_OW 437
53117: IFFALSE 53200
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53119: LD_STRING e
53121: PUSH
53122: LD_VAR 0 1
53126: PPUSH
53127: CALL_OW 437
53131: PUSH
53132: LD_INT 1
53134: ARRAY
53135: PUSH
53136: LD_INT 1
53138: ARRAY
53139: EQUAL
53140: PUSH
53141: LD_VAR 0 4
53145: PUSH
53146: LD_VAR 0 1
53150: PPUSH
53151: CALL_OW 437
53155: PUSH
53156: LD_INT 1
53158: ARRAY
53159: PUSH
53160: LD_INT 2
53162: ARRAY
53163: EQUAL
53164: AND
53165: PUSH
53166: LD_VAR 0 5
53170: PUSH
53171: LD_VAR 0 1
53175: PPUSH
53176: CALL_OW 437
53180: PUSH
53181: LD_INT 1
53183: ARRAY
53184: PUSH
53185: LD_INT 3
53187: ARRAY
53188: EQUAL
53189: AND
53190: IFFALSE 53200
// result := true end ;
53192: LD_ADDR_VAR 0 3
53196: PUSH
53197: LD_INT 1
53199: ST_TO_ADDR
// end ;
53200: LD_VAR 0 3
53204: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53205: LD_INT 0
53207: PPUSH
// result := false ;
53208: LD_ADDR_VAR 0 4
53212: PUSH
53213: LD_INT 0
53215: ST_TO_ADDR
// if GetTaskList ( unit ) then
53216: LD_VAR 0 1
53220: PPUSH
53221: CALL_OW 437
53225: IFFALSE 53308
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53227: LD_STRING M
53229: PUSH
53230: LD_VAR 0 1
53234: PPUSH
53235: CALL_OW 437
53239: PUSH
53240: LD_INT 1
53242: ARRAY
53243: PUSH
53244: LD_INT 1
53246: ARRAY
53247: EQUAL
53248: PUSH
53249: LD_VAR 0 2
53253: PUSH
53254: LD_VAR 0 1
53258: PPUSH
53259: CALL_OW 437
53263: PUSH
53264: LD_INT 1
53266: ARRAY
53267: PUSH
53268: LD_INT 2
53270: ARRAY
53271: EQUAL
53272: AND
53273: PUSH
53274: LD_VAR 0 3
53278: PUSH
53279: LD_VAR 0 1
53283: PPUSH
53284: CALL_OW 437
53288: PUSH
53289: LD_INT 1
53291: ARRAY
53292: PUSH
53293: LD_INT 3
53295: ARRAY
53296: EQUAL
53297: AND
53298: IFFALSE 53308
// result := true ;
53300: LD_ADDR_VAR 0 4
53304: PUSH
53305: LD_INT 1
53307: ST_TO_ADDR
// end ; end ;
53308: LD_VAR 0 4
53312: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53313: LD_INT 0
53315: PPUSH
53316: PPUSH
53317: PPUSH
53318: PPUSH
// if not unit or not area then
53319: LD_VAR 0 1
53323: NOT
53324: PUSH
53325: LD_VAR 0 2
53329: NOT
53330: OR
53331: IFFALSE 53335
// exit ;
53333: GO 53511
// tmp := AreaToList ( area , i ) ;
53335: LD_ADDR_VAR 0 6
53339: PUSH
53340: LD_VAR 0 2
53344: PPUSH
53345: LD_VAR 0 5
53349: PPUSH
53350: CALL_OW 517
53354: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53355: LD_ADDR_VAR 0 5
53359: PUSH
53360: DOUBLE
53361: LD_INT 1
53363: DEC
53364: ST_TO_ADDR
53365: LD_VAR 0 6
53369: PUSH
53370: LD_INT 1
53372: ARRAY
53373: PUSH
53374: FOR_TO
53375: IFFALSE 53509
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53377: LD_ADDR_VAR 0 7
53381: PUSH
53382: LD_VAR 0 6
53386: PUSH
53387: LD_INT 1
53389: ARRAY
53390: PUSH
53391: LD_VAR 0 5
53395: ARRAY
53396: PUSH
53397: LD_VAR 0 6
53401: PUSH
53402: LD_INT 2
53404: ARRAY
53405: PUSH
53406: LD_VAR 0 5
53410: ARRAY
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53416: LD_INT 92
53418: PUSH
53419: LD_VAR 0 7
53423: PUSH
53424: LD_INT 1
53426: ARRAY
53427: PUSH
53428: LD_VAR 0 7
53432: PUSH
53433: LD_INT 2
53435: ARRAY
53436: PUSH
53437: LD_INT 2
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: PPUSH
53446: CALL_OW 69
53450: PUSH
53451: LD_INT 0
53453: EQUAL
53454: IFFALSE 53507
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53456: LD_VAR 0 1
53460: PPUSH
53461: LD_VAR 0 7
53465: PUSH
53466: LD_INT 1
53468: ARRAY
53469: PPUSH
53470: LD_VAR 0 7
53474: PUSH
53475: LD_INT 2
53477: ARRAY
53478: PPUSH
53479: LD_VAR 0 3
53483: PPUSH
53484: CALL_OW 48
// result := IsPlaced ( unit ) ;
53488: LD_ADDR_VAR 0 4
53492: PUSH
53493: LD_VAR 0 1
53497: PPUSH
53498: CALL_OW 305
53502: ST_TO_ADDR
// exit ;
53503: POP
53504: POP
53505: GO 53511
// end ; end ;
53507: GO 53374
53509: POP
53510: POP
// end ;
53511: LD_VAR 0 4
53515: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53516: LD_INT 0
53518: PPUSH
53519: PPUSH
53520: PPUSH
// if not side or side > 8 then
53521: LD_VAR 0 1
53525: NOT
53526: PUSH
53527: LD_VAR 0 1
53531: PUSH
53532: LD_INT 8
53534: GREATER
53535: OR
53536: IFFALSE 53540
// exit ;
53538: GO 53727
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53540: LD_ADDR_VAR 0 4
53544: PUSH
53545: LD_INT 22
53547: PUSH
53548: LD_VAR 0 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 21
53559: PUSH
53560: LD_INT 3
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PPUSH
53571: CALL_OW 69
53575: ST_TO_ADDR
// if not tmp then
53576: LD_VAR 0 4
53580: NOT
53581: IFFALSE 53585
// exit ;
53583: GO 53727
// enable_addtolog := true ;
53585: LD_ADDR_OWVAR 81
53589: PUSH
53590: LD_INT 1
53592: ST_TO_ADDR
// AddToLog ( [ ) ;
53593: LD_STRING [
53595: PPUSH
53596: CALL_OW 561
// for i in tmp do
53600: LD_ADDR_VAR 0 3
53604: PUSH
53605: LD_VAR 0 4
53609: PUSH
53610: FOR_IN
53611: IFFALSE 53718
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53613: LD_STRING [
53615: PUSH
53616: LD_VAR 0 3
53620: PPUSH
53621: CALL_OW 266
53625: STR
53626: PUSH
53627: LD_STRING , 
53629: STR
53630: PUSH
53631: LD_VAR 0 3
53635: PPUSH
53636: CALL_OW 250
53640: STR
53641: PUSH
53642: LD_STRING , 
53644: STR
53645: PUSH
53646: LD_VAR 0 3
53650: PPUSH
53651: CALL_OW 251
53655: STR
53656: PUSH
53657: LD_STRING , 
53659: STR
53660: PUSH
53661: LD_VAR 0 3
53665: PPUSH
53666: CALL_OW 254
53670: STR
53671: PUSH
53672: LD_STRING , 
53674: STR
53675: PUSH
53676: LD_VAR 0 3
53680: PPUSH
53681: LD_INT 1
53683: PPUSH
53684: CALL_OW 268
53688: STR
53689: PUSH
53690: LD_STRING , 
53692: STR
53693: PUSH
53694: LD_VAR 0 3
53698: PPUSH
53699: LD_INT 2
53701: PPUSH
53702: CALL_OW 268
53706: STR
53707: PUSH
53708: LD_STRING ],
53710: STR
53711: PPUSH
53712: CALL_OW 561
// end ;
53716: GO 53610
53718: POP
53719: POP
// AddToLog ( ]; ) ;
53720: LD_STRING ];
53722: PPUSH
53723: CALL_OW 561
// end ;
53727: LD_VAR 0 2
53731: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53732: LD_INT 0
53734: PPUSH
53735: PPUSH
53736: PPUSH
53737: PPUSH
53738: PPUSH
// if not area or not rate or not max then
53739: LD_VAR 0 1
53743: NOT
53744: PUSH
53745: LD_VAR 0 2
53749: NOT
53750: OR
53751: PUSH
53752: LD_VAR 0 4
53756: NOT
53757: OR
53758: IFFALSE 53762
// exit ;
53760: GO 53951
// while 1 do
53762: LD_INT 1
53764: IFFALSE 53951
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53766: LD_ADDR_VAR 0 9
53770: PUSH
53771: LD_VAR 0 1
53775: PPUSH
53776: LD_INT 1
53778: PPUSH
53779: CALL_OW 287
53783: PUSH
53784: LD_INT 10
53786: MUL
53787: ST_TO_ADDR
// r := rate / 10 ;
53788: LD_ADDR_VAR 0 7
53792: PUSH
53793: LD_VAR 0 2
53797: PUSH
53798: LD_INT 10
53800: DIVREAL
53801: ST_TO_ADDR
// time := 1 1$00 ;
53802: LD_ADDR_VAR 0 8
53806: PUSH
53807: LD_INT 2100
53809: ST_TO_ADDR
// if amount < min then
53810: LD_VAR 0 9
53814: PUSH
53815: LD_VAR 0 3
53819: LESS
53820: IFFALSE 53838
// r := r * 2 else
53822: LD_ADDR_VAR 0 7
53826: PUSH
53827: LD_VAR 0 7
53831: PUSH
53832: LD_INT 2
53834: MUL
53835: ST_TO_ADDR
53836: GO 53864
// if amount > max then
53838: LD_VAR 0 9
53842: PUSH
53843: LD_VAR 0 4
53847: GREATER
53848: IFFALSE 53864
// r := r / 2 ;
53850: LD_ADDR_VAR 0 7
53854: PUSH
53855: LD_VAR 0 7
53859: PUSH
53860: LD_INT 2
53862: DIVREAL
53863: ST_TO_ADDR
// time := time / r ;
53864: LD_ADDR_VAR 0 8
53868: PUSH
53869: LD_VAR 0 8
53873: PUSH
53874: LD_VAR 0 7
53878: DIVREAL
53879: ST_TO_ADDR
// if time < 0 then
53880: LD_VAR 0 8
53884: PUSH
53885: LD_INT 0
53887: LESS
53888: IFFALSE 53905
// time := time * - 1 ;
53890: LD_ADDR_VAR 0 8
53894: PUSH
53895: LD_VAR 0 8
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: MUL
53904: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53905: LD_VAR 0 8
53909: PUSH
53910: LD_INT 35
53912: PPUSH
53913: LD_INT 875
53915: PPUSH
53916: CALL_OW 12
53920: PLUS
53921: PPUSH
53922: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53926: LD_INT 1
53928: PPUSH
53929: LD_INT 5
53931: PPUSH
53932: CALL_OW 12
53936: PPUSH
53937: LD_VAR 0 1
53941: PPUSH
53942: LD_INT 1
53944: PPUSH
53945: CALL_OW 55
// end ;
53949: GO 53762
// end ;
53951: LD_VAR 0 5
53955: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53956: LD_INT 0
53958: PPUSH
53959: PPUSH
53960: PPUSH
53961: PPUSH
53962: PPUSH
53963: PPUSH
53964: PPUSH
53965: PPUSH
// if not turrets or not factories then
53966: LD_VAR 0 1
53970: NOT
53971: PUSH
53972: LD_VAR 0 2
53976: NOT
53977: OR
53978: IFFALSE 53982
// exit ;
53980: GO 54289
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53982: LD_ADDR_VAR 0 10
53986: PUSH
53987: LD_INT 5
53989: PUSH
53990: LD_INT 6
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: LD_INT 4
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 3
54009: PUSH
54010: LD_INT 5
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 24
54024: PUSH
54025: LD_INT 25
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 23
54034: PUSH
54035: LD_INT 27
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 42
54048: PUSH
54049: LD_INT 43
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 44
54058: PUSH
54059: LD_INT 46
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 45
54068: PUSH
54069: LD_INT 47
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: LIST
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: LIST
54085: ST_TO_ADDR
// result := [ ] ;
54086: LD_ADDR_VAR 0 3
54090: PUSH
54091: EMPTY
54092: ST_TO_ADDR
// for i in turrets do
54093: LD_ADDR_VAR 0 4
54097: PUSH
54098: LD_VAR 0 1
54102: PUSH
54103: FOR_IN
54104: IFFALSE 54287
// begin nat := GetNation ( i ) ;
54106: LD_ADDR_VAR 0 7
54110: PUSH
54111: LD_VAR 0 4
54115: PPUSH
54116: CALL_OW 248
54120: ST_TO_ADDR
// weapon := 0 ;
54121: LD_ADDR_VAR 0 8
54125: PUSH
54126: LD_INT 0
54128: ST_TO_ADDR
// if not nat then
54129: LD_VAR 0 7
54133: NOT
54134: IFFALSE 54138
// continue ;
54136: GO 54103
// for j in list [ nat ] do
54138: LD_ADDR_VAR 0 5
54142: PUSH
54143: LD_VAR 0 10
54147: PUSH
54148: LD_VAR 0 7
54152: ARRAY
54153: PUSH
54154: FOR_IN
54155: IFFALSE 54196
// if GetBWeapon ( i ) = j [ 1 ] then
54157: LD_VAR 0 4
54161: PPUSH
54162: CALL_OW 269
54166: PUSH
54167: LD_VAR 0 5
54171: PUSH
54172: LD_INT 1
54174: ARRAY
54175: EQUAL
54176: IFFALSE 54194
// begin weapon := j [ 2 ] ;
54178: LD_ADDR_VAR 0 8
54182: PUSH
54183: LD_VAR 0 5
54187: PUSH
54188: LD_INT 2
54190: ARRAY
54191: ST_TO_ADDR
// break ;
54192: GO 54196
// end ;
54194: GO 54154
54196: POP
54197: POP
// if not weapon then
54198: LD_VAR 0 8
54202: NOT
54203: IFFALSE 54207
// continue ;
54205: GO 54103
// for k in factories do
54207: LD_ADDR_VAR 0 6
54211: PUSH
54212: LD_VAR 0 2
54216: PUSH
54217: FOR_IN
54218: IFFALSE 54283
// begin weapons := AvailableWeaponList ( k ) ;
54220: LD_ADDR_VAR 0 9
54224: PUSH
54225: LD_VAR 0 6
54229: PPUSH
54230: CALL_OW 478
54234: ST_TO_ADDR
// if not weapons then
54235: LD_VAR 0 9
54239: NOT
54240: IFFALSE 54244
// continue ;
54242: GO 54217
// if weapon in weapons then
54244: LD_VAR 0 8
54248: PUSH
54249: LD_VAR 0 9
54253: IN
54254: IFFALSE 54281
// begin result := [ i , weapon ] ;
54256: LD_ADDR_VAR 0 3
54260: PUSH
54261: LD_VAR 0 4
54265: PUSH
54266: LD_VAR 0 8
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: ST_TO_ADDR
// exit ;
54275: POP
54276: POP
54277: POP
54278: POP
54279: GO 54289
// end ; end ;
54281: GO 54217
54283: POP
54284: POP
// end ;
54285: GO 54103
54287: POP
54288: POP
// end ;
54289: LD_VAR 0 3
54293: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54294: LD_INT 0
54296: PPUSH
// if not side or side > 8 then
54297: LD_VAR 0 3
54301: NOT
54302: PUSH
54303: LD_VAR 0 3
54307: PUSH
54308: LD_INT 8
54310: GREATER
54311: OR
54312: IFFALSE 54316
// exit ;
54314: GO 54375
// if not range then
54316: LD_VAR 0 4
54320: NOT
54321: IFFALSE 54332
// range := - 12 ;
54323: LD_ADDR_VAR 0 4
54327: PUSH
54328: LD_INT 12
54330: NEG
54331: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54332: LD_VAR 0 1
54336: PPUSH
54337: LD_VAR 0 2
54341: PPUSH
54342: LD_VAR 0 3
54346: PPUSH
54347: LD_VAR 0 4
54351: PPUSH
54352: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54356: LD_VAR 0 1
54360: PPUSH
54361: LD_VAR 0 2
54365: PPUSH
54366: LD_VAR 0 3
54370: PPUSH
54371: CALL_OW 331
// end ;
54375: LD_VAR 0 5
54379: RET
// export function Video ( mode ) ; begin
54380: LD_INT 0
54382: PPUSH
// ingame_video = mode ;
54383: LD_ADDR_OWVAR 52
54387: PUSH
54388: LD_VAR 0 1
54392: ST_TO_ADDR
// interface_hidden = mode ;
54393: LD_ADDR_OWVAR 54
54397: PUSH
54398: LD_VAR 0 1
54402: ST_TO_ADDR
// end ;
54403: LD_VAR 0 2
54407: RET
// export function Join ( array , element ) ; begin
54408: LD_INT 0
54410: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54411: LD_ADDR_VAR 0 3
54415: PUSH
54416: LD_VAR 0 1
54420: PPUSH
54421: LD_VAR 0 1
54425: PUSH
54426: LD_INT 1
54428: PLUS
54429: PPUSH
54430: LD_VAR 0 2
54434: PPUSH
54435: CALL_OW 1
54439: ST_TO_ADDR
// end ;
54440: LD_VAR 0 3
54444: RET
// export function JoinUnion ( array , element ) ; begin
54445: LD_INT 0
54447: PPUSH
// result := array union element ;
54448: LD_ADDR_VAR 0 3
54452: PUSH
54453: LD_VAR 0 1
54457: PUSH
54458: LD_VAR 0 2
54462: UNION
54463: ST_TO_ADDR
// end ;
54464: LD_VAR 0 3
54468: RET
// export function GetBehemoths ( side ) ; begin
54469: LD_INT 0
54471: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54472: LD_ADDR_VAR 0 2
54476: PUSH
54477: LD_INT 22
54479: PUSH
54480: LD_VAR 0 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 31
54491: PUSH
54492: LD_INT 25
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PPUSH
54503: CALL_OW 69
54507: ST_TO_ADDR
// end ;
54508: LD_VAR 0 2
54512: RET
// export function Shuffle ( array ) ; var i , index ; begin
54513: LD_INT 0
54515: PPUSH
54516: PPUSH
54517: PPUSH
// result := [ ] ;
54518: LD_ADDR_VAR 0 2
54522: PUSH
54523: EMPTY
54524: ST_TO_ADDR
// if not array then
54525: LD_VAR 0 1
54529: NOT
54530: IFFALSE 54534
// exit ;
54532: GO 54633
// Randomize ;
54534: CALL_OW 10
// for i = array downto 1 do
54538: LD_ADDR_VAR 0 3
54542: PUSH
54543: DOUBLE
54544: LD_VAR 0 1
54548: INC
54549: ST_TO_ADDR
54550: LD_INT 1
54552: PUSH
54553: FOR_DOWNTO
54554: IFFALSE 54631
// begin index := rand ( 1 , array ) ;
54556: LD_ADDR_VAR 0 4
54560: PUSH
54561: LD_INT 1
54563: PPUSH
54564: LD_VAR 0 1
54568: PPUSH
54569: CALL_OW 12
54573: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54574: LD_ADDR_VAR 0 2
54578: PUSH
54579: LD_VAR 0 2
54583: PPUSH
54584: LD_VAR 0 2
54588: PUSH
54589: LD_INT 1
54591: PLUS
54592: PPUSH
54593: LD_VAR 0 1
54597: PUSH
54598: LD_VAR 0 4
54602: ARRAY
54603: PPUSH
54604: CALL_OW 2
54608: ST_TO_ADDR
// array := Delete ( array , index ) ;
54609: LD_ADDR_VAR 0 1
54613: PUSH
54614: LD_VAR 0 1
54618: PPUSH
54619: LD_VAR 0 4
54623: PPUSH
54624: CALL_OW 3
54628: ST_TO_ADDR
// end ;
54629: GO 54553
54631: POP
54632: POP
// end ;
54633: LD_VAR 0 2
54637: RET
// export function GetBaseMaterials ( base ) ; begin
54638: LD_INT 0
54640: PPUSH
// result := [ 0 , 0 , 0 ] ;
54641: LD_ADDR_VAR 0 2
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: ST_TO_ADDR
// if not base then
54660: LD_VAR 0 1
54664: NOT
54665: IFFALSE 54669
// exit ;
54667: GO 54718
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54669: LD_ADDR_VAR 0 2
54673: PUSH
54674: LD_VAR 0 1
54678: PPUSH
54679: LD_INT 1
54681: PPUSH
54682: CALL_OW 275
54686: PUSH
54687: LD_VAR 0 1
54691: PPUSH
54692: LD_INT 2
54694: PPUSH
54695: CALL_OW 275
54699: PUSH
54700: LD_VAR 0 1
54704: PPUSH
54705: LD_INT 3
54707: PPUSH
54708: CALL_OW 275
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: LIST
54717: ST_TO_ADDR
// end ;
54718: LD_VAR 0 2
54722: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54723: LD_INT 0
54725: PPUSH
54726: PPUSH
// result := array ;
54727: LD_ADDR_VAR 0 3
54731: PUSH
54732: LD_VAR 0 1
54736: ST_TO_ADDR
// if size >= result then
54737: LD_VAR 0 2
54741: PUSH
54742: LD_VAR 0 3
54746: GREATEREQUAL
54747: IFFALSE 54751
// exit ;
54749: GO 54801
// if size then
54751: LD_VAR 0 2
54755: IFFALSE 54801
// for i := array downto size do
54757: LD_ADDR_VAR 0 4
54761: PUSH
54762: DOUBLE
54763: LD_VAR 0 1
54767: INC
54768: ST_TO_ADDR
54769: LD_VAR 0 2
54773: PUSH
54774: FOR_DOWNTO
54775: IFFALSE 54799
// result := Delete ( result , result ) ;
54777: LD_ADDR_VAR 0 3
54781: PUSH
54782: LD_VAR 0 3
54786: PPUSH
54787: LD_VAR 0 3
54791: PPUSH
54792: CALL_OW 3
54796: ST_TO_ADDR
54797: GO 54774
54799: POP
54800: POP
// end ;
54801: LD_VAR 0 3
54805: RET
// export function ComExit ( unit ) ; var tmp ; begin
54806: LD_INT 0
54808: PPUSH
54809: PPUSH
// if not IsInUnit ( unit ) then
54810: LD_VAR 0 1
54814: PPUSH
54815: CALL_OW 310
54819: NOT
54820: IFFALSE 54824
// exit ;
54822: GO 54884
// tmp := IsInUnit ( unit ) ;
54824: LD_ADDR_VAR 0 3
54828: PUSH
54829: LD_VAR 0 1
54833: PPUSH
54834: CALL_OW 310
54838: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54839: LD_VAR 0 3
54843: PPUSH
54844: CALL_OW 247
54848: PUSH
54849: LD_INT 2
54851: EQUAL
54852: IFFALSE 54865
// ComExitVehicle ( unit ) else
54854: LD_VAR 0 1
54858: PPUSH
54859: CALL_OW 121
54863: GO 54874
// ComExitBuilding ( unit ) ;
54865: LD_VAR 0 1
54869: PPUSH
54870: CALL_OW 122
// result := tmp ;
54874: LD_ADDR_VAR 0 2
54878: PUSH
54879: LD_VAR 0 3
54883: ST_TO_ADDR
// end ;
54884: LD_VAR 0 2
54888: RET
// export function ComExitAll ( units ) ; var i ; begin
54889: LD_INT 0
54891: PPUSH
54892: PPUSH
// if not units then
54893: LD_VAR 0 1
54897: NOT
54898: IFFALSE 54902
// exit ;
54900: GO 54928
// for i in units do
54902: LD_ADDR_VAR 0 3
54906: PUSH
54907: LD_VAR 0 1
54911: PUSH
54912: FOR_IN
54913: IFFALSE 54926
// ComExit ( i ) ;
54915: LD_VAR 0 3
54919: PPUSH
54920: CALL 54806 0 1
54924: GO 54912
54926: POP
54927: POP
// end ;
54928: LD_VAR 0 2
54932: RET
// export function ResetHc ; begin
54933: LD_INT 0
54935: PPUSH
// InitHc ;
54936: CALL_OW 19
// hc_importance := 0 ;
54940: LD_ADDR_OWVAR 32
54944: PUSH
54945: LD_INT 0
54947: ST_TO_ADDR
// end ;
54948: LD_VAR 0 1
54952: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54953: LD_INT 0
54955: PPUSH
54956: PPUSH
54957: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54958: LD_ADDR_VAR 0 6
54962: PUSH
54963: LD_VAR 0 1
54967: PUSH
54968: LD_VAR 0 3
54972: PLUS
54973: PUSH
54974: LD_INT 2
54976: DIV
54977: ST_TO_ADDR
// if _x < 0 then
54978: LD_VAR 0 6
54982: PUSH
54983: LD_INT 0
54985: LESS
54986: IFFALSE 55003
// _x := _x * - 1 ;
54988: LD_ADDR_VAR 0 6
54992: PUSH
54993: LD_VAR 0 6
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: MUL
55002: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55003: LD_ADDR_VAR 0 7
55007: PUSH
55008: LD_VAR 0 2
55012: PUSH
55013: LD_VAR 0 4
55017: PLUS
55018: PUSH
55019: LD_INT 2
55021: DIV
55022: ST_TO_ADDR
// if _y < 0 then
55023: LD_VAR 0 7
55027: PUSH
55028: LD_INT 0
55030: LESS
55031: IFFALSE 55048
// _y := _y * - 1 ;
55033: LD_ADDR_VAR 0 7
55037: PUSH
55038: LD_VAR 0 7
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: MUL
55047: ST_TO_ADDR
// result := [ _x , _y ] ;
55048: LD_ADDR_VAR 0 5
55052: PUSH
55053: LD_VAR 0 6
55057: PUSH
55058: LD_VAR 0 7
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: ST_TO_ADDR
// end ;
55067: LD_VAR 0 5
55071: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55072: LD_INT 0
55074: PPUSH
55075: PPUSH
55076: PPUSH
55077: PPUSH
// task := GetTaskList ( unit ) ;
55078: LD_ADDR_VAR 0 7
55082: PUSH
55083: LD_VAR 0 1
55087: PPUSH
55088: CALL_OW 437
55092: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55093: LD_VAR 0 7
55097: NOT
55098: PUSH
55099: LD_VAR 0 1
55103: PPUSH
55104: LD_VAR 0 2
55108: PPUSH
55109: CALL_OW 308
55113: NOT
55114: AND
55115: IFFALSE 55119
// exit ;
55117: GO 55237
// if IsInArea ( unit , area ) then
55119: LD_VAR 0 1
55123: PPUSH
55124: LD_VAR 0 2
55128: PPUSH
55129: CALL_OW 308
55133: IFFALSE 55151
// begin ComMoveToArea ( unit , goAway ) ;
55135: LD_VAR 0 1
55139: PPUSH
55140: LD_VAR 0 3
55144: PPUSH
55145: CALL_OW 113
// exit ;
55149: GO 55237
// end ; if task [ 1 ] [ 1 ] <> M then
55151: LD_VAR 0 7
55155: PUSH
55156: LD_INT 1
55158: ARRAY
55159: PUSH
55160: LD_INT 1
55162: ARRAY
55163: PUSH
55164: LD_STRING M
55166: NONEQUAL
55167: IFFALSE 55171
// exit ;
55169: GO 55237
// x := task [ 1 ] [ 2 ] ;
55171: LD_ADDR_VAR 0 5
55175: PUSH
55176: LD_VAR 0 7
55180: PUSH
55181: LD_INT 1
55183: ARRAY
55184: PUSH
55185: LD_INT 2
55187: ARRAY
55188: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55189: LD_ADDR_VAR 0 6
55193: PUSH
55194: LD_VAR 0 7
55198: PUSH
55199: LD_INT 1
55201: ARRAY
55202: PUSH
55203: LD_INT 3
55205: ARRAY
55206: ST_TO_ADDR
// if InArea ( x , y , area ) then
55207: LD_VAR 0 5
55211: PPUSH
55212: LD_VAR 0 6
55216: PPUSH
55217: LD_VAR 0 2
55221: PPUSH
55222: CALL_OW 309
55226: IFFALSE 55237
// ComStop ( unit ) ;
55228: LD_VAR 0 1
55232: PPUSH
55233: CALL_OW 141
// end ;
55237: LD_VAR 0 4
55241: RET
// export function Abs ( value ) ; begin
55242: LD_INT 0
55244: PPUSH
// result := value ;
55245: LD_ADDR_VAR 0 2
55249: PUSH
55250: LD_VAR 0 1
55254: ST_TO_ADDR
// if value < 0 then
55255: LD_VAR 0 1
55259: PUSH
55260: LD_INT 0
55262: LESS
55263: IFFALSE 55280
// result := value * - 1 ;
55265: LD_ADDR_VAR 0 2
55269: PUSH
55270: LD_VAR 0 1
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: MUL
55279: ST_TO_ADDR
// end ;
55280: LD_VAR 0 2
55284: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55285: LD_INT 0
55287: PPUSH
55288: PPUSH
55289: PPUSH
55290: PPUSH
55291: PPUSH
55292: PPUSH
55293: PPUSH
55294: PPUSH
// if not unit or not building then
55295: LD_VAR 0 1
55299: NOT
55300: PUSH
55301: LD_VAR 0 2
55305: NOT
55306: OR
55307: IFFALSE 55311
// exit ;
55309: GO 55537
// x := GetX ( building ) ;
55311: LD_ADDR_VAR 0 4
55315: PUSH
55316: LD_VAR 0 2
55320: PPUSH
55321: CALL_OW 250
55325: ST_TO_ADDR
// y := GetY ( building ) ;
55326: LD_ADDR_VAR 0 6
55330: PUSH
55331: LD_VAR 0 2
55335: PPUSH
55336: CALL_OW 251
55340: ST_TO_ADDR
// d := GetDir ( building ) ;
55341: LD_ADDR_VAR 0 8
55345: PUSH
55346: LD_VAR 0 2
55350: PPUSH
55351: CALL_OW 254
55355: ST_TO_ADDR
// r := 4 ;
55356: LD_ADDR_VAR 0 9
55360: PUSH
55361: LD_INT 4
55363: ST_TO_ADDR
// for i := 1 to 5 do
55364: LD_ADDR_VAR 0 10
55368: PUSH
55369: DOUBLE
55370: LD_INT 1
55372: DEC
55373: ST_TO_ADDR
55374: LD_INT 5
55376: PUSH
55377: FOR_TO
55378: IFFALSE 55535
// begin _x := ShiftX ( x , d , r + i ) ;
55380: LD_ADDR_VAR 0 5
55384: PUSH
55385: LD_VAR 0 4
55389: PPUSH
55390: LD_VAR 0 8
55394: PPUSH
55395: LD_VAR 0 9
55399: PUSH
55400: LD_VAR 0 10
55404: PLUS
55405: PPUSH
55406: CALL_OW 272
55410: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55411: LD_ADDR_VAR 0 7
55415: PUSH
55416: LD_VAR 0 6
55420: PPUSH
55421: LD_VAR 0 8
55425: PPUSH
55426: LD_VAR 0 9
55430: PUSH
55431: LD_VAR 0 10
55435: PLUS
55436: PPUSH
55437: CALL_OW 273
55441: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55442: LD_VAR 0 5
55446: PPUSH
55447: LD_VAR 0 7
55451: PPUSH
55452: CALL_OW 488
55456: PUSH
55457: LD_VAR 0 5
55461: PPUSH
55462: LD_VAR 0 7
55466: PPUSH
55467: CALL_OW 428
55471: PPUSH
55472: CALL_OW 247
55476: PUSH
55477: LD_INT 3
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: IN
55487: NOT
55488: AND
55489: IFFALSE 55533
// begin ComMoveXY ( unit , _x , _y ) ;
55491: LD_VAR 0 1
55495: PPUSH
55496: LD_VAR 0 5
55500: PPUSH
55501: LD_VAR 0 7
55505: PPUSH
55506: CALL_OW 111
// result := [ _x , _y ] ;
55510: LD_ADDR_VAR 0 3
55514: PUSH
55515: LD_VAR 0 5
55519: PUSH
55520: LD_VAR 0 7
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: ST_TO_ADDR
// exit ;
55529: POP
55530: POP
55531: GO 55537
// end ; end ;
55533: GO 55377
55535: POP
55536: POP
// end ;
55537: LD_VAR 0 3
55541: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55542: LD_INT 0
55544: PPUSH
55545: PPUSH
55546: PPUSH
// result := 0 ;
55547: LD_ADDR_VAR 0 3
55551: PUSH
55552: LD_INT 0
55554: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55555: LD_VAR 0 1
55559: PUSH
55560: LD_INT 0
55562: LESS
55563: PUSH
55564: LD_VAR 0 1
55568: PUSH
55569: LD_INT 8
55571: GREATER
55572: OR
55573: PUSH
55574: LD_VAR 0 2
55578: PUSH
55579: LD_INT 0
55581: LESS
55582: OR
55583: PUSH
55584: LD_VAR 0 2
55588: PUSH
55589: LD_INT 8
55591: GREATER
55592: OR
55593: IFFALSE 55597
// exit ;
55595: GO 55672
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55597: LD_ADDR_VAR 0 4
55601: PUSH
55602: LD_INT 22
55604: PUSH
55605: LD_VAR 0 2
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PPUSH
55614: CALL_OW 69
55618: PUSH
55619: FOR_IN
55620: IFFALSE 55670
// begin un := UnitShoot ( i ) ;
55622: LD_ADDR_VAR 0 5
55626: PUSH
55627: LD_VAR 0 4
55631: PPUSH
55632: CALL_OW 504
55636: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55637: LD_VAR 0 5
55641: PPUSH
55642: CALL_OW 255
55646: PUSH
55647: LD_VAR 0 1
55651: EQUAL
55652: IFFALSE 55668
// begin result := un ;
55654: LD_ADDR_VAR 0 3
55658: PUSH
55659: LD_VAR 0 5
55663: ST_TO_ADDR
// exit ;
55664: POP
55665: POP
55666: GO 55672
// end ; end ;
55668: GO 55619
55670: POP
55671: POP
// end ;
55672: LD_VAR 0 3
55676: RET
// export function GetCargoBay ( units ) ; begin
55677: LD_INT 0
55679: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55680: LD_ADDR_VAR 0 2
55684: PUSH
55685: LD_VAR 0 1
55689: PPUSH
55690: LD_INT 2
55692: PUSH
55693: LD_INT 34
55695: PUSH
55696: LD_INT 12
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 34
55705: PUSH
55706: LD_INT 51
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 34
55715: PUSH
55716: LD_INT 32
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 34
55725: PUSH
55726: LD_INT 89
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: PPUSH
55740: CALL_OW 72
55744: ST_TO_ADDR
// end ;
55745: LD_VAR 0 2
55749: RET
// export function Negate ( value ) ; begin
55750: LD_INT 0
55752: PPUSH
// result := not value ;
55753: LD_ADDR_VAR 0 2
55757: PUSH
55758: LD_VAR 0 1
55762: NOT
55763: ST_TO_ADDR
// end ;
55764: LD_VAR 0 2
55768: RET
// export function Inc ( value ) ; begin
55769: LD_INT 0
55771: PPUSH
// result := value + 1 ;
55772: LD_ADDR_VAR 0 2
55776: PUSH
55777: LD_VAR 0 1
55781: PUSH
55782: LD_INT 1
55784: PLUS
55785: ST_TO_ADDR
// end ;
55786: LD_VAR 0 2
55790: RET
// export function Dec ( value ) ; begin
55791: LD_INT 0
55793: PPUSH
// result := value - 1 ;
55794: LD_ADDR_VAR 0 2
55798: PUSH
55799: LD_VAR 0 1
55803: PUSH
55804: LD_INT 1
55806: MINUS
55807: ST_TO_ADDR
// end ;
55808: LD_VAR 0 2
55812: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55813: LD_INT 0
55815: PPUSH
55816: PPUSH
55817: PPUSH
55818: PPUSH
55819: PPUSH
55820: PPUSH
55821: PPUSH
55822: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55823: LD_VAR 0 1
55827: PPUSH
55828: LD_VAR 0 2
55832: PPUSH
55833: CALL_OW 488
55837: NOT
55838: PUSH
55839: LD_VAR 0 3
55843: PPUSH
55844: LD_VAR 0 4
55848: PPUSH
55849: CALL_OW 488
55853: NOT
55854: OR
55855: IFFALSE 55868
// begin result := - 1 ;
55857: LD_ADDR_VAR 0 5
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: ST_TO_ADDR
// exit ;
55866: GO 56103
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55868: LD_ADDR_VAR 0 12
55872: PUSH
55873: LD_VAR 0 1
55877: PPUSH
55878: LD_VAR 0 2
55882: PPUSH
55883: LD_VAR 0 3
55887: PPUSH
55888: LD_VAR 0 4
55892: PPUSH
55893: CALL 54953 0 4
55897: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55898: LD_ADDR_VAR 0 11
55902: PUSH
55903: LD_VAR 0 1
55907: PPUSH
55908: LD_VAR 0 2
55912: PPUSH
55913: LD_VAR 0 12
55917: PUSH
55918: LD_INT 1
55920: ARRAY
55921: PPUSH
55922: LD_VAR 0 12
55926: PUSH
55927: LD_INT 2
55929: ARRAY
55930: PPUSH
55931: CALL_OW 298
55935: ST_TO_ADDR
// distance := 9999 ;
55936: LD_ADDR_VAR 0 10
55940: PUSH
55941: LD_INT 9999
55943: ST_TO_ADDR
// for i := 0 to 5 do
55944: LD_ADDR_VAR 0 6
55948: PUSH
55949: DOUBLE
55950: LD_INT 0
55952: DEC
55953: ST_TO_ADDR
55954: LD_INT 5
55956: PUSH
55957: FOR_TO
55958: IFFALSE 56101
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55960: LD_ADDR_VAR 0 7
55964: PUSH
55965: LD_VAR 0 1
55969: PPUSH
55970: LD_VAR 0 6
55974: PPUSH
55975: LD_VAR 0 11
55979: PPUSH
55980: CALL_OW 272
55984: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55985: LD_ADDR_VAR 0 8
55989: PUSH
55990: LD_VAR 0 2
55994: PPUSH
55995: LD_VAR 0 6
55999: PPUSH
56000: LD_VAR 0 11
56004: PPUSH
56005: CALL_OW 273
56009: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56010: LD_VAR 0 7
56014: PPUSH
56015: LD_VAR 0 8
56019: PPUSH
56020: CALL_OW 488
56024: NOT
56025: IFFALSE 56029
// continue ;
56027: GO 55957
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56029: LD_ADDR_VAR 0 9
56033: PUSH
56034: LD_VAR 0 12
56038: PUSH
56039: LD_INT 1
56041: ARRAY
56042: PPUSH
56043: LD_VAR 0 12
56047: PUSH
56048: LD_INT 2
56050: ARRAY
56051: PPUSH
56052: LD_VAR 0 7
56056: PPUSH
56057: LD_VAR 0 8
56061: PPUSH
56062: CALL_OW 298
56066: ST_TO_ADDR
// if tmp < distance then
56067: LD_VAR 0 9
56071: PUSH
56072: LD_VAR 0 10
56076: LESS
56077: IFFALSE 56099
// begin result := i ;
56079: LD_ADDR_VAR 0 5
56083: PUSH
56084: LD_VAR 0 6
56088: ST_TO_ADDR
// distance := tmp ;
56089: LD_ADDR_VAR 0 10
56093: PUSH
56094: LD_VAR 0 9
56098: ST_TO_ADDR
// end ; end ;
56099: GO 55957
56101: POP
56102: POP
// end ;
56103: LD_VAR 0 5
56107: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56108: LD_INT 0
56110: PPUSH
56111: PPUSH
// if not driver or not IsInUnit ( driver ) then
56112: LD_VAR 0 1
56116: NOT
56117: PUSH
56118: LD_VAR 0 1
56122: PPUSH
56123: CALL_OW 310
56127: NOT
56128: OR
56129: IFFALSE 56133
// exit ;
56131: GO 56223
// vehicle := IsInUnit ( driver ) ;
56133: LD_ADDR_VAR 0 3
56137: PUSH
56138: LD_VAR 0 1
56142: PPUSH
56143: CALL_OW 310
56147: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56148: LD_VAR 0 1
56152: PPUSH
56153: LD_STRING \
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: PUSH
56183: LD_STRING E
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_VAR 0 3
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PPUSH
56219: CALL_OW 446
// end ;
56223: LD_VAR 0 2
56227: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56228: LD_INT 0
56230: PPUSH
56231: PPUSH
// if not driver or not IsInUnit ( driver ) then
56232: LD_VAR 0 1
56236: NOT
56237: PUSH
56238: LD_VAR 0 1
56242: PPUSH
56243: CALL_OW 310
56247: NOT
56248: OR
56249: IFFALSE 56253
// exit ;
56251: GO 56343
// vehicle := IsInUnit ( driver ) ;
56253: LD_ADDR_VAR 0 3
56257: PUSH
56258: LD_VAR 0 1
56262: PPUSH
56263: CALL_OW 310
56267: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56268: LD_VAR 0 1
56272: PPUSH
56273: LD_STRING \
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: PUSH
56303: LD_STRING E
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_VAR 0 3
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PPUSH
56339: CALL_OW 447
// end ;
56343: LD_VAR 0 2
56347: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56348: LD_INT 0
56350: PPUSH
56351: PPUSH
56352: PPUSH
// tmp := [ ] ;
56353: LD_ADDR_VAR 0 5
56357: PUSH
56358: EMPTY
56359: ST_TO_ADDR
// for i in units do
56360: LD_ADDR_VAR 0 4
56364: PUSH
56365: LD_VAR 0 1
56369: PUSH
56370: FOR_IN
56371: IFFALSE 56409
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56373: LD_ADDR_VAR 0 5
56377: PUSH
56378: LD_VAR 0 5
56382: PPUSH
56383: LD_VAR 0 5
56387: PUSH
56388: LD_INT 1
56390: PLUS
56391: PPUSH
56392: LD_VAR 0 4
56396: PPUSH
56397: CALL_OW 256
56401: PPUSH
56402: CALL_OW 2
56406: ST_TO_ADDR
56407: GO 56370
56409: POP
56410: POP
// if not tmp then
56411: LD_VAR 0 5
56415: NOT
56416: IFFALSE 56420
// exit ;
56418: GO 56468
// if asc then
56420: LD_VAR 0 2
56424: IFFALSE 56448
// result := SortListByListAsc ( units , tmp ) else
56426: LD_ADDR_VAR 0 3
56430: PUSH
56431: LD_VAR 0 1
56435: PPUSH
56436: LD_VAR 0 5
56440: PPUSH
56441: CALL_OW 76
56445: ST_TO_ADDR
56446: GO 56468
// result := SortListByListDesc ( units , tmp ) ;
56448: LD_ADDR_VAR 0 3
56452: PUSH
56453: LD_VAR 0 1
56457: PPUSH
56458: LD_VAR 0 5
56462: PPUSH
56463: CALL_OW 77
56467: ST_TO_ADDR
// end ;
56468: LD_VAR 0 3
56472: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56473: LD_INT 0
56475: PPUSH
56476: PPUSH
// task := GetTaskList ( mech ) ;
56477: LD_ADDR_VAR 0 4
56481: PUSH
56482: LD_VAR 0 1
56486: PPUSH
56487: CALL_OW 437
56491: ST_TO_ADDR
// if not task then
56492: LD_VAR 0 4
56496: NOT
56497: IFFALSE 56501
// exit ;
56499: GO 56543
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56501: LD_ADDR_VAR 0 3
56505: PUSH
56506: LD_VAR 0 4
56510: PUSH
56511: LD_INT 1
56513: ARRAY
56514: PUSH
56515: LD_INT 1
56517: ARRAY
56518: PUSH
56519: LD_STRING r
56521: EQUAL
56522: PUSH
56523: LD_VAR 0 4
56527: PUSH
56528: LD_INT 1
56530: ARRAY
56531: PUSH
56532: LD_INT 4
56534: ARRAY
56535: PUSH
56536: LD_VAR 0 2
56540: EQUAL
56541: AND
56542: ST_TO_ADDR
// end ;
56543: LD_VAR 0 3
56547: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56548: LD_INT 0
56550: PPUSH
// SetDir ( unit , d ) ;
56551: LD_VAR 0 1
56555: PPUSH
56556: LD_VAR 0 4
56560: PPUSH
56561: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56565: LD_VAR 0 1
56569: PPUSH
56570: LD_VAR 0 2
56574: PPUSH
56575: LD_VAR 0 3
56579: PPUSH
56580: LD_VAR 0 5
56584: PPUSH
56585: CALL_OW 48
// end ;
56589: LD_VAR 0 6
56593: RET
// export function ToNaturalNumber ( number ) ; begin
56594: LD_INT 0
56596: PPUSH
// result := number div 1 ;
56597: LD_ADDR_VAR 0 2
56601: PUSH
56602: LD_VAR 0 1
56606: PUSH
56607: LD_INT 1
56609: DIV
56610: ST_TO_ADDR
// if number < 0 then
56611: LD_VAR 0 1
56615: PUSH
56616: LD_INT 0
56618: LESS
56619: IFFALSE 56629
// result := 0 ;
56621: LD_ADDR_VAR 0 2
56625: PUSH
56626: LD_INT 0
56628: ST_TO_ADDR
// end ;
56629: LD_VAR 0 2
56633: RET
// export function SortByClass ( units , class ) ; var un ; begin
56634: LD_INT 0
56636: PPUSH
56637: PPUSH
// if not units or not class then
56638: LD_VAR 0 1
56642: NOT
56643: PUSH
56644: LD_VAR 0 2
56648: NOT
56649: OR
56650: IFFALSE 56654
// exit ;
56652: GO 56749
// result := [ ] ;
56654: LD_ADDR_VAR 0 3
56658: PUSH
56659: EMPTY
56660: ST_TO_ADDR
// for un in units do
56661: LD_ADDR_VAR 0 4
56665: PUSH
56666: LD_VAR 0 1
56670: PUSH
56671: FOR_IN
56672: IFFALSE 56747
// if GetClass ( un ) = class then
56674: LD_VAR 0 4
56678: PPUSH
56679: CALL_OW 257
56683: PUSH
56684: LD_VAR 0 2
56688: EQUAL
56689: IFFALSE 56716
// result := Insert ( result , 1 , un ) else
56691: LD_ADDR_VAR 0 3
56695: PUSH
56696: LD_VAR 0 3
56700: PPUSH
56701: LD_INT 1
56703: PPUSH
56704: LD_VAR 0 4
56708: PPUSH
56709: CALL_OW 2
56713: ST_TO_ADDR
56714: GO 56745
// result := Replace ( result , result + 1 , un ) ;
56716: LD_ADDR_VAR 0 3
56720: PUSH
56721: LD_VAR 0 3
56725: PPUSH
56726: LD_VAR 0 3
56730: PUSH
56731: LD_INT 1
56733: PLUS
56734: PPUSH
56735: LD_VAR 0 4
56739: PPUSH
56740: CALL_OW 1
56744: ST_TO_ADDR
56745: GO 56671
56747: POP
56748: POP
// end ;
56749: LD_VAR 0 3
56753: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56754: LD_INT 0
56756: PPUSH
56757: PPUSH
56758: PPUSH
56759: PPUSH
56760: PPUSH
56761: PPUSH
56762: PPUSH
// result := [ ] ;
56763: LD_ADDR_VAR 0 4
56767: PUSH
56768: EMPTY
56769: ST_TO_ADDR
// if x - r < 0 then
56770: LD_VAR 0 1
56774: PUSH
56775: LD_VAR 0 3
56779: MINUS
56780: PUSH
56781: LD_INT 0
56783: LESS
56784: IFFALSE 56796
// min_x := 0 else
56786: LD_ADDR_VAR 0 8
56790: PUSH
56791: LD_INT 0
56793: ST_TO_ADDR
56794: GO 56812
// min_x := x - r ;
56796: LD_ADDR_VAR 0 8
56800: PUSH
56801: LD_VAR 0 1
56805: PUSH
56806: LD_VAR 0 3
56810: MINUS
56811: ST_TO_ADDR
// if y - r < 0 then
56812: LD_VAR 0 2
56816: PUSH
56817: LD_VAR 0 3
56821: MINUS
56822: PUSH
56823: LD_INT 0
56825: LESS
56826: IFFALSE 56838
// min_y := 0 else
56828: LD_ADDR_VAR 0 7
56832: PUSH
56833: LD_INT 0
56835: ST_TO_ADDR
56836: GO 56854
// min_y := y - r ;
56838: LD_ADDR_VAR 0 7
56842: PUSH
56843: LD_VAR 0 2
56847: PUSH
56848: LD_VAR 0 3
56852: MINUS
56853: ST_TO_ADDR
// max_x := x + r ;
56854: LD_ADDR_VAR 0 9
56858: PUSH
56859: LD_VAR 0 1
56863: PUSH
56864: LD_VAR 0 3
56868: PLUS
56869: ST_TO_ADDR
// max_y := y + r ;
56870: LD_ADDR_VAR 0 10
56874: PUSH
56875: LD_VAR 0 2
56879: PUSH
56880: LD_VAR 0 3
56884: PLUS
56885: ST_TO_ADDR
// for _x = min_x to max_x do
56886: LD_ADDR_VAR 0 5
56890: PUSH
56891: DOUBLE
56892: LD_VAR 0 8
56896: DEC
56897: ST_TO_ADDR
56898: LD_VAR 0 9
56902: PUSH
56903: FOR_TO
56904: IFFALSE 57005
// for _y = min_y to max_y do
56906: LD_ADDR_VAR 0 6
56910: PUSH
56911: DOUBLE
56912: LD_VAR 0 7
56916: DEC
56917: ST_TO_ADDR
56918: LD_VAR 0 10
56922: PUSH
56923: FOR_TO
56924: IFFALSE 57001
// begin if not ValidHex ( _x , _y ) then
56926: LD_VAR 0 5
56930: PPUSH
56931: LD_VAR 0 6
56935: PPUSH
56936: CALL_OW 488
56940: NOT
56941: IFFALSE 56945
// continue ;
56943: GO 56923
// if GetResourceTypeXY ( _x , _y ) then
56945: LD_VAR 0 5
56949: PPUSH
56950: LD_VAR 0 6
56954: PPUSH
56955: CALL_OW 283
56959: IFFALSE 56999
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56961: LD_ADDR_VAR 0 4
56965: PUSH
56966: LD_VAR 0 4
56970: PPUSH
56971: LD_VAR 0 4
56975: PUSH
56976: LD_INT 1
56978: PLUS
56979: PPUSH
56980: LD_VAR 0 5
56984: PUSH
56985: LD_VAR 0 6
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PPUSH
56994: CALL_OW 1
56998: ST_TO_ADDR
// end ;
56999: GO 56923
57001: POP
57002: POP
57003: GO 56903
57005: POP
57006: POP
// end ;
57007: LD_VAR 0 4
57011: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57012: LD_INT 0
57014: PPUSH
57015: PPUSH
57016: PPUSH
57017: PPUSH
57018: PPUSH
57019: PPUSH
57020: PPUSH
57021: PPUSH
// if not units then
57022: LD_VAR 0 1
57026: NOT
57027: IFFALSE 57031
// exit ;
57029: GO 57555
// result := UnitFilter ( units , [ f_ok ] ) ;
57031: LD_ADDR_VAR 0 3
57035: PUSH
57036: LD_VAR 0 1
57040: PPUSH
57041: LD_INT 50
57043: PUSH
57044: EMPTY
57045: LIST
57046: PPUSH
57047: CALL_OW 72
57051: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57052: LD_ADDR_VAR 0 8
57056: PUSH
57057: LD_VAR 0 1
57061: PUSH
57062: LD_INT 1
57064: ARRAY
57065: PPUSH
57066: CALL_OW 255
57070: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57071: LD_ADDR_VAR 0 10
57075: PUSH
57076: LD_INT 29
57078: PUSH
57079: LD_INT 91
57081: PUSH
57082: LD_INT 49
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: LIST
57089: ST_TO_ADDR
// if not result then
57090: LD_VAR 0 3
57094: NOT
57095: IFFALSE 57099
// exit ;
57097: GO 57555
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57099: LD_ADDR_VAR 0 5
57103: PUSH
57104: LD_INT 81
57106: PUSH
57107: LD_VAR 0 8
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PPUSH
57116: CALL_OW 69
57120: ST_TO_ADDR
// for i in result do
57121: LD_ADDR_VAR 0 4
57125: PUSH
57126: LD_VAR 0 3
57130: PUSH
57131: FOR_IN
57132: IFFALSE 57553
// begin tag := GetTag ( i ) + 1 ;
57134: LD_ADDR_VAR 0 9
57138: PUSH
57139: LD_VAR 0 4
57143: PPUSH
57144: CALL_OW 110
57148: PUSH
57149: LD_INT 1
57151: PLUS
57152: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
57153: LD_ADDR_VAR 0 7
57157: PUSH
57158: LD_VAR 0 4
57162: PPUSH
57163: CALL_OW 250
57167: PPUSH
57168: LD_VAR 0 4
57172: PPUSH
57173: CALL_OW 251
57177: PPUSH
57178: LD_INT 6
57180: PPUSH
57181: CALL 56754 0 3
57185: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
57186: LD_VAR 0 4
57190: PPUSH
57191: CALL_OW 247
57195: PUSH
57196: LD_INT 2
57198: EQUAL
57199: PUSH
57200: LD_VAR 0 7
57204: AND
57205: PUSH
57206: LD_VAR 0 4
57210: PPUSH
57211: CALL_OW 264
57215: PUSH
57216: LD_VAR 0 10
57220: IN
57221: NOT
57222: AND
57223: IFFALSE 57262
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57225: LD_VAR 0 4
57229: PPUSH
57230: LD_VAR 0 7
57234: PUSH
57235: LD_INT 1
57237: ARRAY
57238: PUSH
57239: LD_INT 1
57241: ARRAY
57242: PPUSH
57243: LD_VAR 0 7
57247: PUSH
57248: LD_INT 1
57250: ARRAY
57251: PUSH
57252: LD_INT 2
57254: ARRAY
57255: PPUSH
57256: CALL_OW 116
57260: GO 57551
// if path > tag then
57262: LD_VAR 0 2
57266: PUSH
57267: LD_VAR 0 9
57271: GREATER
57272: IFFALSE 57480
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57274: LD_ADDR_VAR 0 6
57278: PUSH
57279: LD_VAR 0 5
57283: PPUSH
57284: LD_INT 91
57286: PUSH
57287: LD_VAR 0 4
57291: PUSH
57292: LD_INT 8
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: PPUSH
57300: CALL_OW 72
57304: ST_TO_ADDR
// if nearEnemy then
57305: LD_VAR 0 6
57309: IFFALSE 57378
// begin if GetWeapon ( i ) = ru_time_lapser then
57311: LD_VAR 0 4
57315: PPUSH
57316: CALL_OW 264
57320: PUSH
57321: LD_INT 49
57323: EQUAL
57324: IFFALSE 57352
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57326: LD_VAR 0 4
57330: PPUSH
57331: LD_VAR 0 6
57335: PPUSH
57336: LD_VAR 0 4
57340: PPUSH
57341: CALL_OW 74
57345: PPUSH
57346: CALL_OW 112
57350: GO 57376
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57352: LD_VAR 0 4
57356: PPUSH
57357: LD_VAR 0 6
57361: PPUSH
57362: LD_VAR 0 4
57366: PPUSH
57367: CALL_OW 74
57371: PPUSH
57372: CALL 58480 0 2
// end else
57376: GO 57478
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57378: LD_VAR 0 4
57382: PPUSH
57383: LD_VAR 0 2
57387: PUSH
57388: LD_VAR 0 9
57392: ARRAY
57393: PUSH
57394: LD_INT 1
57396: ARRAY
57397: PPUSH
57398: LD_VAR 0 2
57402: PUSH
57403: LD_VAR 0 9
57407: ARRAY
57408: PUSH
57409: LD_INT 2
57411: ARRAY
57412: PPUSH
57413: CALL_OW 297
57417: PUSH
57418: LD_INT 6
57420: GREATER
57421: IFFALSE 57464
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57423: LD_VAR 0 4
57427: PPUSH
57428: LD_VAR 0 2
57432: PUSH
57433: LD_VAR 0 9
57437: ARRAY
57438: PUSH
57439: LD_INT 1
57441: ARRAY
57442: PPUSH
57443: LD_VAR 0 2
57447: PUSH
57448: LD_VAR 0 9
57452: ARRAY
57453: PUSH
57454: LD_INT 2
57456: ARRAY
57457: PPUSH
57458: CALL_OW 114
57462: GO 57478
// SetTag ( i , tag ) ;
57464: LD_VAR 0 4
57468: PPUSH
57469: LD_VAR 0 9
57473: PPUSH
57474: CALL_OW 109
// end else
57478: GO 57551
// if enemy then
57480: LD_VAR 0 5
57484: IFFALSE 57551
// begin if GetWeapon ( i ) = ru_time_lapser then
57486: LD_VAR 0 4
57490: PPUSH
57491: CALL_OW 264
57495: PUSH
57496: LD_INT 49
57498: EQUAL
57499: IFFALSE 57527
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57501: LD_VAR 0 4
57505: PPUSH
57506: LD_VAR 0 5
57510: PPUSH
57511: LD_VAR 0 4
57515: PPUSH
57516: CALL_OW 74
57520: PPUSH
57521: CALL_OW 112
57525: GO 57551
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57527: LD_VAR 0 4
57531: PPUSH
57532: LD_VAR 0 5
57536: PPUSH
57537: LD_VAR 0 4
57541: PPUSH
57542: CALL_OW 74
57546: PPUSH
57547: CALL 58480 0 2
// end ; end ;
57551: GO 57131
57553: POP
57554: POP
// end ;
57555: LD_VAR 0 3
57559: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57560: LD_INT 0
57562: PPUSH
57563: PPUSH
57564: PPUSH
// if not unit or IsInUnit ( unit ) then
57565: LD_VAR 0 1
57569: NOT
57570: PUSH
57571: LD_VAR 0 1
57575: PPUSH
57576: CALL_OW 310
57580: OR
57581: IFFALSE 57585
// exit ;
57583: GO 57676
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57585: LD_ADDR_VAR 0 4
57589: PUSH
57590: LD_VAR 0 1
57594: PPUSH
57595: CALL_OW 250
57599: PPUSH
57600: LD_VAR 0 2
57604: PPUSH
57605: LD_INT 1
57607: PPUSH
57608: CALL_OW 272
57612: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57613: LD_ADDR_VAR 0 5
57617: PUSH
57618: LD_VAR 0 1
57622: PPUSH
57623: CALL_OW 251
57627: PPUSH
57628: LD_VAR 0 2
57632: PPUSH
57633: LD_INT 1
57635: PPUSH
57636: CALL_OW 273
57640: ST_TO_ADDR
// if ValidHex ( x , y ) then
57641: LD_VAR 0 4
57645: PPUSH
57646: LD_VAR 0 5
57650: PPUSH
57651: CALL_OW 488
57655: IFFALSE 57676
// ComTurnXY ( unit , x , y ) ;
57657: LD_VAR 0 1
57661: PPUSH
57662: LD_VAR 0 4
57666: PPUSH
57667: LD_VAR 0 5
57671: PPUSH
57672: CALL_OW 118
// end ;
57676: LD_VAR 0 3
57680: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57681: LD_INT 0
57683: PPUSH
57684: PPUSH
// result := false ;
57685: LD_ADDR_VAR 0 3
57689: PUSH
57690: LD_INT 0
57692: ST_TO_ADDR
// if not units then
57693: LD_VAR 0 2
57697: NOT
57698: IFFALSE 57702
// exit ;
57700: GO 57747
// for i in units do
57702: LD_ADDR_VAR 0 4
57706: PUSH
57707: LD_VAR 0 2
57711: PUSH
57712: FOR_IN
57713: IFFALSE 57745
// if See ( side , i ) then
57715: LD_VAR 0 1
57719: PPUSH
57720: LD_VAR 0 4
57724: PPUSH
57725: CALL_OW 292
57729: IFFALSE 57743
// begin result := true ;
57731: LD_ADDR_VAR 0 3
57735: PUSH
57736: LD_INT 1
57738: ST_TO_ADDR
// exit ;
57739: POP
57740: POP
57741: GO 57747
// end ;
57743: GO 57712
57745: POP
57746: POP
// end ;
57747: LD_VAR 0 3
57751: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57752: LD_INT 0
57754: PPUSH
57755: PPUSH
57756: PPUSH
57757: PPUSH
// if not unit or not points then
57758: LD_VAR 0 1
57762: NOT
57763: PUSH
57764: LD_VAR 0 2
57768: NOT
57769: OR
57770: IFFALSE 57774
// exit ;
57772: GO 57864
// dist := 99999 ;
57774: LD_ADDR_VAR 0 5
57778: PUSH
57779: LD_INT 99999
57781: ST_TO_ADDR
// for i in points do
57782: LD_ADDR_VAR 0 4
57786: PUSH
57787: LD_VAR 0 2
57791: PUSH
57792: FOR_IN
57793: IFFALSE 57862
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57795: LD_ADDR_VAR 0 6
57799: PUSH
57800: LD_VAR 0 1
57804: PPUSH
57805: LD_VAR 0 4
57809: PUSH
57810: LD_INT 1
57812: ARRAY
57813: PPUSH
57814: LD_VAR 0 4
57818: PUSH
57819: LD_INT 2
57821: ARRAY
57822: PPUSH
57823: CALL_OW 297
57827: ST_TO_ADDR
// if tmpDist < dist then
57828: LD_VAR 0 6
57832: PUSH
57833: LD_VAR 0 5
57837: LESS
57838: IFFALSE 57860
// begin result := i ;
57840: LD_ADDR_VAR 0 3
57844: PUSH
57845: LD_VAR 0 4
57849: ST_TO_ADDR
// dist := tmpDist ;
57850: LD_ADDR_VAR 0 5
57854: PUSH
57855: LD_VAR 0 6
57859: ST_TO_ADDR
// end ; end ;
57860: GO 57792
57862: POP
57863: POP
// end ;
57864: LD_VAR 0 3
57868: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57869: LD_INT 0
57871: PPUSH
// uc_side := side ;
57872: LD_ADDR_OWVAR 20
57876: PUSH
57877: LD_VAR 0 1
57881: ST_TO_ADDR
// uc_nation := 3 ;
57882: LD_ADDR_OWVAR 21
57886: PUSH
57887: LD_INT 3
57889: ST_TO_ADDR
// vc_chassis := 25 ;
57890: LD_ADDR_OWVAR 37
57894: PUSH
57895: LD_INT 25
57897: ST_TO_ADDR
// vc_engine := engine_siberite ;
57898: LD_ADDR_OWVAR 39
57902: PUSH
57903: LD_INT 3
57905: ST_TO_ADDR
// vc_control := control_computer ;
57906: LD_ADDR_OWVAR 38
57910: PUSH
57911: LD_INT 3
57913: ST_TO_ADDR
// vc_weapon := 59 ;
57914: LD_ADDR_OWVAR 40
57918: PUSH
57919: LD_INT 59
57921: ST_TO_ADDR
// result := CreateVehicle ;
57922: LD_ADDR_VAR 0 5
57926: PUSH
57927: CALL_OW 45
57931: ST_TO_ADDR
// SetDir ( result , d ) ;
57932: LD_VAR 0 5
57936: PPUSH
57937: LD_VAR 0 4
57941: PPUSH
57942: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57946: LD_VAR 0 5
57950: PPUSH
57951: LD_VAR 0 2
57955: PPUSH
57956: LD_VAR 0 3
57960: PPUSH
57961: LD_INT 0
57963: PPUSH
57964: CALL_OW 48
// end ;
57968: LD_VAR 0 5
57972: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57973: LD_INT 0
57975: PPUSH
57976: PPUSH
57977: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57978: LD_ADDR_VAR 0 2
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58001: LD_VAR 0 1
58005: NOT
58006: PUSH
58007: LD_VAR 0 1
58011: PPUSH
58012: CALL_OW 264
58016: PUSH
58017: LD_INT 12
58019: PUSH
58020: LD_INT 51
58022: PUSH
58023: LD_INT 32
58025: PUSH
58026: LD_INT 89
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: IN
58035: NOT
58036: OR
58037: IFFALSE 58041
// exit ;
58039: GO 58139
// for i := 1 to 3 do
58041: LD_ADDR_VAR 0 3
58045: PUSH
58046: DOUBLE
58047: LD_INT 1
58049: DEC
58050: ST_TO_ADDR
58051: LD_INT 3
58053: PUSH
58054: FOR_TO
58055: IFFALSE 58137
// begin tmp := GetCargo ( cargo , i ) ;
58057: LD_ADDR_VAR 0 4
58061: PUSH
58062: LD_VAR 0 1
58066: PPUSH
58067: LD_VAR 0 3
58071: PPUSH
58072: CALL_OW 289
58076: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58077: LD_ADDR_VAR 0 2
58081: PUSH
58082: LD_VAR 0 2
58086: PPUSH
58087: LD_VAR 0 3
58091: PPUSH
58092: LD_VAR 0 4
58096: PPUSH
58097: CALL_OW 1
58101: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58102: LD_ADDR_VAR 0 2
58106: PUSH
58107: LD_VAR 0 2
58111: PPUSH
58112: LD_INT 4
58114: PPUSH
58115: LD_VAR 0 2
58119: PUSH
58120: LD_INT 4
58122: ARRAY
58123: PUSH
58124: LD_VAR 0 4
58128: PLUS
58129: PPUSH
58130: CALL_OW 1
58134: ST_TO_ADDR
// end ;
58135: GO 58054
58137: POP
58138: POP
// end ;
58139: LD_VAR 0 2
58143: RET
// export function Length ( array ) ; begin
58144: LD_INT 0
58146: PPUSH
// result := array + 0 ;
58147: LD_ADDR_VAR 0 2
58151: PUSH
58152: LD_VAR 0 1
58156: PUSH
58157: LD_INT 0
58159: PLUS
58160: ST_TO_ADDR
// end ;
58161: LD_VAR 0 2
58165: RET
// export function PrepareArray ( array ) ; begin
58166: LD_INT 0
58168: PPUSH
// result := array diff 0 ;
58169: LD_ADDR_VAR 0 2
58173: PUSH
58174: LD_VAR 0 1
58178: PUSH
58179: LD_INT 0
58181: DIFF
58182: ST_TO_ADDR
// if not result [ 1 ] then
58183: LD_VAR 0 2
58187: PUSH
58188: LD_INT 1
58190: ARRAY
58191: NOT
58192: IFFALSE 58212
// result := Delete ( result , 1 ) ;
58194: LD_ADDR_VAR 0 2
58198: PUSH
58199: LD_VAR 0 2
58203: PPUSH
58204: LD_INT 1
58206: PPUSH
58207: CALL_OW 3
58211: ST_TO_ADDR
// end ;
58212: LD_VAR 0 2
58216: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58217: LD_INT 0
58219: PPUSH
58220: PPUSH
58221: PPUSH
58222: PPUSH
// sibRocketRange := 25 ;
58223: LD_ADDR_VAR 0 6
58227: PUSH
58228: LD_INT 25
58230: ST_TO_ADDR
// result := false ;
58231: LD_ADDR_VAR 0 4
58235: PUSH
58236: LD_INT 0
58238: ST_TO_ADDR
// for i := 0 to 5 do
58239: LD_ADDR_VAR 0 5
58243: PUSH
58244: DOUBLE
58245: LD_INT 0
58247: DEC
58248: ST_TO_ADDR
58249: LD_INT 5
58251: PUSH
58252: FOR_TO
58253: IFFALSE 58320
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58255: LD_VAR 0 1
58259: PPUSH
58260: LD_VAR 0 5
58264: PPUSH
58265: LD_VAR 0 6
58269: PPUSH
58270: CALL_OW 272
58274: PPUSH
58275: LD_VAR 0 2
58279: PPUSH
58280: LD_VAR 0 5
58284: PPUSH
58285: LD_VAR 0 6
58289: PPUSH
58290: CALL_OW 273
58294: PPUSH
58295: LD_VAR 0 3
58299: PPUSH
58300: CALL_OW 309
58304: IFFALSE 58318
// begin result := true ;
58306: LD_ADDR_VAR 0 4
58310: PUSH
58311: LD_INT 1
58313: ST_TO_ADDR
// exit ;
58314: POP
58315: POP
58316: GO 58322
// end ;
58318: GO 58252
58320: POP
58321: POP
// end ;
58322: LD_VAR 0 4
58326: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58327: LD_INT 0
58329: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58330: LD_VAR 0 1
58334: PPUSH
58335: LD_VAR 0 2
58339: PPUSH
58340: LD_INT 0
58342: PPUSH
58343: LD_INT 0
58345: PPUSH
58346: LD_INT 1
58348: PPUSH
58349: LD_INT 0
58351: PPUSH
58352: CALL_OW 587
// end ;
58356: LD_VAR 0 3
58360: RET
// export function CenterOnNow ( unit ) ; begin
58361: LD_INT 0
58363: PPUSH
// result := IsInUnit ( unit ) ;
58364: LD_ADDR_VAR 0 2
58368: PUSH
58369: LD_VAR 0 1
58373: PPUSH
58374: CALL_OW 310
58378: ST_TO_ADDR
// if not result then
58379: LD_VAR 0 2
58383: NOT
58384: IFFALSE 58396
// result := unit ;
58386: LD_ADDR_VAR 0 2
58390: PUSH
58391: LD_VAR 0 1
58395: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58396: LD_VAR 0 1
58400: PPUSH
58401: CALL_OW 87
// end ;
58405: LD_VAR 0 2
58409: RET
// export function ComMoveHex ( unit , hex ) ; begin
58410: LD_INT 0
58412: PPUSH
// if not hex then
58413: LD_VAR 0 2
58417: NOT
58418: IFFALSE 58422
// exit ;
58420: GO 58475
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58422: LD_VAR 0 2
58426: PUSH
58427: LD_INT 1
58429: ARRAY
58430: PPUSH
58431: LD_VAR 0 2
58435: PUSH
58436: LD_INT 2
58438: ARRAY
58439: PPUSH
58440: CALL_OW 428
58444: IFFALSE 58448
// exit ;
58446: GO 58475
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58448: LD_VAR 0 1
58452: PPUSH
58453: LD_VAR 0 2
58457: PUSH
58458: LD_INT 1
58460: ARRAY
58461: PPUSH
58462: LD_VAR 0 2
58466: PUSH
58467: LD_INT 2
58469: ARRAY
58470: PPUSH
58471: CALL_OW 111
// end ;
58475: LD_VAR 0 3
58479: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58480: LD_INT 0
58482: PPUSH
58483: PPUSH
58484: PPUSH
// if not unit or not enemy then
58485: LD_VAR 0 1
58489: NOT
58490: PUSH
58491: LD_VAR 0 2
58495: NOT
58496: OR
58497: IFFALSE 58501
// exit ;
58499: GO 58625
// x := GetX ( enemy ) ;
58501: LD_ADDR_VAR 0 4
58505: PUSH
58506: LD_VAR 0 2
58510: PPUSH
58511: CALL_OW 250
58515: ST_TO_ADDR
// y := GetY ( enemy ) ;
58516: LD_ADDR_VAR 0 5
58520: PUSH
58521: LD_VAR 0 2
58525: PPUSH
58526: CALL_OW 251
58530: ST_TO_ADDR
// if ValidHex ( x , y ) then
58531: LD_VAR 0 4
58535: PPUSH
58536: LD_VAR 0 5
58540: PPUSH
58541: CALL_OW 488
58545: IFFALSE 58625
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58547: LD_VAR 0 2
58551: PPUSH
58552: CALL_OW 247
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: IN
58567: PUSH
58568: LD_VAR 0 1
58572: PPUSH
58573: CALL_OW 255
58577: PPUSH
58578: LD_VAR 0 2
58582: PPUSH
58583: CALL_OW 292
58587: OR
58588: IFFALSE 58606
// ComAttackUnit ( unit , enemy ) else
58590: LD_VAR 0 1
58594: PPUSH
58595: LD_VAR 0 2
58599: PPUSH
58600: CALL_OW 115
58604: GO 58625
// ComAgressiveMove ( unit , x , y ) ;
58606: LD_VAR 0 1
58610: PPUSH
58611: LD_VAR 0 4
58615: PPUSH
58616: LD_VAR 0 5
58620: PPUSH
58621: CALL_OW 114
// end ;
58625: LD_VAR 0 3
58629: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58630: LD_INT 0
58632: PPUSH
58633: PPUSH
58634: PPUSH
// list := AreaToList ( area , 0 ) ;
58635: LD_ADDR_VAR 0 5
58639: PUSH
58640: LD_VAR 0 1
58644: PPUSH
58645: LD_INT 0
58647: PPUSH
58648: CALL_OW 517
58652: ST_TO_ADDR
// if not list then
58653: LD_VAR 0 5
58657: NOT
58658: IFFALSE 58662
// exit ;
58660: GO 58792
// if all then
58662: LD_VAR 0 2
58666: IFFALSE 58754
// begin for i := 1 to list [ 1 ] do
58668: LD_ADDR_VAR 0 4
58672: PUSH
58673: DOUBLE
58674: LD_INT 1
58676: DEC
58677: ST_TO_ADDR
58678: LD_VAR 0 5
58682: PUSH
58683: LD_INT 1
58685: ARRAY
58686: PUSH
58687: FOR_TO
58688: IFFALSE 58750
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58690: LD_ADDR_VAR 0 3
58694: PUSH
58695: LD_VAR 0 3
58699: PPUSH
58700: LD_VAR 0 3
58704: PUSH
58705: LD_INT 1
58707: PLUS
58708: PPUSH
58709: LD_VAR 0 5
58713: PUSH
58714: LD_INT 1
58716: ARRAY
58717: PUSH
58718: LD_VAR 0 4
58722: ARRAY
58723: PUSH
58724: LD_VAR 0 5
58728: PUSH
58729: LD_INT 2
58731: ARRAY
58732: PUSH
58733: LD_VAR 0 4
58737: ARRAY
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PPUSH
58743: CALL_OW 1
58747: ST_TO_ADDR
58748: GO 58687
58750: POP
58751: POP
// exit ;
58752: GO 58792
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58754: LD_ADDR_VAR 0 3
58758: PUSH
58759: LD_VAR 0 5
58763: PUSH
58764: LD_INT 1
58766: ARRAY
58767: PUSH
58768: LD_INT 1
58770: ARRAY
58771: PUSH
58772: LD_VAR 0 5
58776: PUSH
58777: LD_INT 2
58779: ARRAY
58780: PUSH
58781: LD_INT 1
58783: ARRAY
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: EMPTY
58790: LIST
58791: ST_TO_ADDR
// end ;
58792: LD_VAR 0 3
58796: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58797: LD_INT 0
58799: PPUSH
58800: PPUSH
// list := AreaToList ( area , 0 ) ;
58801: LD_ADDR_VAR 0 4
58805: PUSH
58806: LD_VAR 0 1
58810: PPUSH
58811: LD_INT 0
58813: PPUSH
58814: CALL_OW 517
58818: ST_TO_ADDR
// if not list then
58819: LD_VAR 0 4
58823: NOT
58824: IFFALSE 58828
// exit ;
58826: GO 58869
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58828: LD_ADDR_VAR 0 3
58832: PUSH
58833: LD_VAR 0 4
58837: PUSH
58838: LD_INT 1
58840: ARRAY
58841: PUSH
58842: LD_INT 1
58844: ARRAY
58845: PUSH
58846: LD_VAR 0 4
58850: PUSH
58851: LD_INT 2
58853: ARRAY
58854: PUSH
58855: LD_INT 1
58857: ARRAY
58858: PUSH
58859: LD_VAR 0 2
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: LIST
58868: ST_TO_ADDR
// end ;
58869: LD_VAR 0 3
58873: RET
// export function First ( array ) ; begin
58874: LD_INT 0
58876: PPUSH
// if not array then
58877: LD_VAR 0 1
58881: NOT
58882: IFFALSE 58886
// exit ;
58884: GO 58900
// result := array [ 1 ] ;
58886: LD_ADDR_VAR 0 2
58890: PUSH
58891: LD_VAR 0 1
58895: PUSH
58896: LD_INT 1
58898: ARRAY
58899: ST_TO_ADDR
// end ;
58900: LD_VAR 0 2
58904: RET
// export function Last ( array ) ; begin
58905: LD_INT 0
58907: PPUSH
// if not array then
58908: LD_VAR 0 1
58912: NOT
58913: IFFALSE 58917
// exit ;
58915: GO 58933
// result := array [ array ] ;
58917: LD_ADDR_VAR 0 2
58921: PUSH
58922: LD_VAR 0 1
58926: PUSH
58927: LD_VAR 0 1
58931: ARRAY
58932: ST_TO_ADDR
// end ;
58933: LD_VAR 0 2
58937: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58938: LD_INT 0
58940: PPUSH
58941: PPUSH
// result := [ ] ;
58942: LD_ADDR_VAR 0 5
58946: PUSH
58947: EMPTY
58948: ST_TO_ADDR
// if not array then
58949: LD_VAR 0 1
58953: NOT
58954: IFFALSE 58958
// exit ;
58956: GO 59070
// for i := 1 to array do
58958: LD_ADDR_VAR 0 6
58962: PUSH
58963: DOUBLE
58964: LD_INT 1
58966: DEC
58967: ST_TO_ADDR
58968: LD_VAR 0 1
58972: PUSH
58973: FOR_TO
58974: IFFALSE 59068
// if array [ i ] [ index ] = value then
58976: LD_VAR 0 1
58980: PUSH
58981: LD_VAR 0 6
58985: ARRAY
58986: PUSH
58987: LD_VAR 0 2
58991: ARRAY
58992: PUSH
58993: LD_VAR 0 3
58997: EQUAL
58998: IFFALSE 59066
// begin if indexColumn then
59000: LD_VAR 0 4
59004: IFFALSE 59040
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59006: LD_ADDR_VAR 0 5
59010: PUSH
59011: LD_VAR 0 5
59015: PPUSH
59016: LD_VAR 0 1
59020: PUSH
59021: LD_VAR 0 6
59025: ARRAY
59026: PUSH
59027: LD_VAR 0 4
59031: ARRAY
59032: PPUSH
59033: CALL 54408 0 2
59037: ST_TO_ADDR
59038: GO 59066
// result := Join ( result , array [ i ] ) ;
59040: LD_ADDR_VAR 0 5
59044: PUSH
59045: LD_VAR 0 5
59049: PPUSH
59050: LD_VAR 0 1
59054: PUSH
59055: LD_VAR 0 6
59059: ARRAY
59060: PPUSH
59061: CALL 54408 0 2
59065: ST_TO_ADDR
// end ;
59066: GO 58973
59068: POP
59069: POP
// end ;
59070: LD_VAR 0 5
59074: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59075: LD_INT 0
59077: PPUSH
59078: PPUSH
59079: PPUSH
// if btype = b_depot then
59080: LD_VAR 0 2
59084: PUSH
59085: LD_INT 0
59087: EQUAL
59088: IFFALSE 59100
// begin result := true ;
59090: LD_ADDR_VAR 0 3
59094: PUSH
59095: LD_INT 1
59097: ST_TO_ADDR
// exit ;
59098: GO 59216
// end ; pom := GetBase ( depot ) ;
59100: LD_ADDR_VAR 0 4
59104: PUSH
59105: LD_VAR 0 1
59109: PPUSH
59110: CALL_OW 274
59114: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59115: LD_ADDR_VAR 0 5
59119: PUSH
59120: LD_VAR 0 2
59124: PPUSH
59125: LD_VAR 0 1
59129: PPUSH
59130: CALL_OW 248
59134: PPUSH
59135: CALL_OW 450
59139: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59140: LD_ADDR_VAR 0 3
59144: PUSH
59145: LD_VAR 0 4
59149: PPUSH
59150: LD_INT 1
59152: PPUSH
59153: CALL_OW 275
59157: PUSH
59158: LD_VAR 0 5
59162: PUSH
59163: LD_INT 1
59165: ARRAY
59166: GREATEREQUAL
59167: PUSH
59168: LD_VAR 0 4
59172: PPUSH
59173: LD_INT 2
59175: PPUSH
59176: CALL_OW 275
59180: PUSH
59181: LD_VAR 0 5
59185: PUSH
59186: LD_INT 2
59188: ARRAY
59189: GREATEREQUAL
59190: AND
59191: PUSH
59192: LD_VAR 0 4
59196: PPUSH
59197: LD_INT 3
59199: PPUSH
59200: CALL_OW 275
59204: PUSH
59205: LD_VAR 0 5
59209: PUSH
59210: LD_INT 3
59212: ARRAY
59213: GREATEREQUAL
59214: AND
59215: ST_TO_ADDR
// end ;
59216: LD_VAR 0 3
59220: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59221: LD_INT 0
59223: PPUSH
// if not vehicles or not parkingPoint then
59224: LD_VAR 0 1
59228: NOT
59229: PUSH
59230: LD_VAR 0 2
59234: NOT
59235: OR
59236: IFFALSE 59240
// exit ;
59238: GO 59338
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59240: LD_ADDR_VAR 0 1
59244: PUSH
59245: LD_VAR 0 1
59249: PPUSH
59250: LD_INT 50
59252: PUSH
59253: EMPTY
59254: LIST
59255: PUSH
59256: LD_INT 3
59258: PUSH
59259: LD_INT 92
59261: PUSH
59262: LD_VAR 0 2
59266: PUSH
59267: LD_INT 1
59269: ARRAY
59270: PUSH
59271: LD_VAR 0 2
59275: PUSH
59276: LD_INT 2
59278: ARRAY
59279: PUSH
59280: LD_INT 8
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PPUSH
59297: CALL_OW 72
59301: ST_TO_ADDR
// if not vehicles then
59302: LD_VAR 0 1
59306: NOT
59307: IFFALSE 59311
// exit ;
59309: GO 59338
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59311: LD_VAR 0 1
59315: PPUSH
59316: LD_VAR 0 2
59320: PUSH
59321: LD_INT 1
59323: ARRAY
59324: PPUSH
59325: LD_VAR 0 2
59329: PUSH
59330: LD_INT 2
59332: ARRAY
59333: PPUSH
59334: CALL_OW 111
// end ;
59338: LD_VAR 0 3
59342: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59343: LD_INT 0
59345: PPUSH
59346: PPUSH
59347: PPUSH
// if not side or not area then
59348: LD_VAR 0 1
59352: NOT
59353: PUSH
59354: LD_VAR 0 2
59358: NOT
59359: OR
59360: IFFALSE 59364
// exit ;
59362: GO 59483
// tmp := AreaToList ( area , 0 ) ;
59364: LD_ADDR_VAR 0 5
59368: PUSH
59369: LD_VAR 0 2
59373: PPUSH
59374: LD_INT 0
59376: PPUSH
59377: CALL_OW 517
59381: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59382: LD_ADDR_VAR 0 4
59386: PUSH
59387: DOUBLE
59388: LD_INT 1
59390: DEC
59391: ST_TO_ADDR
59392: LD_VAR 0 5
59396: PUSH
59397: LD_INT 1
59399: ARRAY
59400: PUSH
59401: FOR_TO
59402: IFFALSE 59481
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59404: LD_VAR 0 5
59408: PUSH
59409: LD_INT 1
59411: ARRAY
59412: PUSH
59413: LD_VAR 0 4
59417: ARRAY
59418: PPUSH
59419: LD_VAR 0 5
59423: PUSH
59424: LD_INT 2
59426: ARRAY
59427: PUSH
59428: LD_VAR 0 4
59432: ARRAY
59433: PPUSH
59434: CALL_OW 351
59438: IFFALSE 59479
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59440: LD_VAR 0 5
59444: PUSH
59445: LD_INT 1
59447: ARRAY
59448: PUSH
59449: LD_VAR 0 4
59453: ARRAY
59454: PPUSH
59455: LD_VAR 0 5
59459: PUSH
59460: LD_INT 2
59462: ARRAY
59463: PUSH
59464: LD_VAR 0 4
59468: ARRAY
59469: PPUSH
59470: LD_VAR 0 1
59474: PPUSH
59475: CALL_OW 244
// end ;
59479: GO 59401
59481: POP
59482: POP
// end ; end_of_file
59483: LD_VAR 0 3
59487: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
59488: LD_INT 0
59490: PPUSH
59491: PPUSH
59492: PPUSH
59493: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
59494: LD_VAR 0 1
59498: PPUSH
59499: CALL_OW 264
59503: PUSH
59504: LD_INT 91
59506: EQUAL
59507: IFFALSE 59579
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59509: LD_INT 68
59511: PPUSH
59512: LD_VAR 0 1
59516: PPUSH
59517: CALL_OW 255
59521: PPUSH
59522: CALL_OW 321
59526: PUSH
59527: LD_INT 2
59529: EQUAL
59530: IFFALSE 59542
// eff := 70 else
59532: LD_ADDR_VAR 0 4
59536: PUSH
59537: LD_INT 70
59539: ST_TO_ADDR
59540: GO 59550
// eff := 30 ;
59542: LD_ADDR_VAR 0 4
59546: PUSH
59547: LD_INT 30
59549: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59550: LD_VAR 0 1
59554: PPUSH
59555: CALL_OW 250
59559: PPUSH
59560: LD_VAR 0 1
59564: PPUSH
59565: CALL_OW 251
59569: PPUSH
59570: LD_VAR 0 4
59574: PPUSH
59575: CALL_OW 495
// end ; end ;
59579: LD_VAR 0 2
59583: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59584: LD_INT 0
59586: PPUSH
// end ;
59587: LD_VAR 0 4
59591: RET
// export function SOS_Command ( cmd ) ; begin
59592: LD_INT 0
59594: PPUSH
// end ;
59595: LD_VAR 0 2
59599: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59600: LD_INT 0
59602: PPUSH
// end ;
59603: LD_VAR 0 6
59607: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
59608: LD_INT 0
59610: PPUSH
59611: PPUSH
// if not vehicle or not factory then
59612: LD_VAR 0 1
59616: NOT
59617: PUSH
59618: LD_VAR 0 2
59622: NOT
59623: OR
59624: IFFALSE 59628
// exit ;
59626: GO 59859
// if factoryWaypoints >= factory then
59628: LD_EXP 121
59632: PUSH
59633: LD_VAR 0 2
59637: GREATEREQUAL
59638: IFFALSE 59859
// if factoryWaypoints [ factory ] then
59640: LD_EXP 121
59644: PUSH
59645: LD_VAR 0 2
59649: ARRAY
59650: IFFALSE 59859
// begin if GetControl ( vehicle ) = control_manual then
59652: LD_VAR 0 1
59656: PPUSH
59657: CALL_OW 263
59661: PUSH
59662: LD_INT 1
59664: EQUAL
59665: IFFALSE 59746
// begin driver := IsDrivenBy ( vehicle ) ;
59667: LD_ADDR_VAR 0 4
59671: PUSH
59672: LD_VAR 0 1
59676: PPUSH
59677: CALL_OW 311
59681: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59682: LD_VAR 0 4
59686: PPUSH
59687: LD_EXP 121
59691: PUSH
59692: LD_VAR 0 2
59696: ARRAY
59697: PUSH
59698: LD_INT 3
59700: ARRAY
59701: PPUSH
59702: LD_EXP 121
59706: PUSH
59707: LD_VAR 0 2
59711: ARRAY
59712: PUSH
59713: LD_INT 4
59715: ARRAY
59716: PPUSH
59717: CALL_OW 171
// AddComExitVehicle ( driver ) ;
59721: LD_VAR 0 4
59725: PPUSH
59726: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
59730: LD_VAR 0 4
59734: PPUSH
59735: LD_VAR 0 2
59739: PPUSH
59740: CALL_OW 180
// end else
59744: GO 59859
// if GetControl ( vehicle ) = control_remote then
59746: LD_VAR 0 1
59750: PPUSH
59751: CALL_OW 263
59755: PUSH
59756: LD_INT 2
59758: EQUAL
59759: IFFALSE 59820
// begin wait ( 0 0$2 ) ;
59761: LD_INT 70
59763: PPUSH
59764: CALL_OW 67
// if Connect ( vehicle ) then
59768: LD_VAR 0 1
59772: PPUSH
59773: CALL 25025 0 1
59777: IFFALSE 59818
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59779: LD_VAR 0 1
59783: PPUSH
59784: LD_EXP 121
59788: PUSH
59789: LD_VAR 0 2
59793: ARRAY
59794: PUSH
59795: LD_INT 3
59797: ARRAY
59798: PPUSH
59799: LD_EXP 121
59803: PUSH
59804: LD_VAR 0 2
59808: ARRAY
59809: PUSH
59810: LD_INT 4
59812: ARRAY
59813: PPUSH
59814: CALL_OW 171
// end else
59818: GO 59859
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59820: LD_VAR 0 1
59824: PPUSH
59825: LD_EXP 121
59829: PUSH
59830: LD_VAR 0 2
59834: ARRAY
59835: PUSH
59836: LD_INT 3
59838: ARRAY
59839: PPUSH
59840: LD_EXP 121
59844: PUSH
59845: LD_VAR 0 2
59849: ARRAY
59850: PUSH
59851: LD_INT 4
59853: ARRAY
59854: PPUSH
59855: CALL_OW 171
// end ; end ;
59859: LD_VAR 0 3
59863: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59864: LD_INT 0
59866: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59867: LD_VAR 0 1
59871: PUSH
59872: LD_INT 250
59874: EQUAL
59875: PUSH
59876: LD_VAR 0 2
59880: PPUSH
59881: CALL_OW 264
59885: PUSH
59886: LD_INT 81
59888: EQUAL
59889: AND
59890: IFFALSE 59911
// MinerPlaceMine ( unit , x , y ) ;
59892: LD_VAR 0 2
59896: PPUSH
59897: LD_VAR 0 4
59901: PPUSH
59902: LD_VAR 0 5
59906: PPUSH
59907: CALL 62901 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59911: LD_VAR 0 1
59915: PUSH
59916: LD_INT 251
59918: EQUAL
59919: PUSH
59920: LD_VAR 0 2
59924: PPUSH
59925: CALL_OW 264
59929: PUSH
59930: LD_INT 81
59932: EQUAL
59933: AND
59934: IFFALSE 59955
// MinerDetonateMine ( unit , x , y ) ;
59936: LD_VAR 0 2
59940: PPUSH
59941: LD_VAR 0 4
59945: PPUSH
59946: LD_VAR 0 5
59950: PPUSH
59951: CALL 63176 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59955: LD_VAR 0 1
59959: PUSH
59960: LD_INT 252
59962: EQUAL
59963: PUSH
59964: LD_VAR 0 2
59968: PPUSH
59969: CALL_OW 264
59973: PUSH
59974: LD_INT 81
59976: EQUAL
59977: AND
59978: IFFALSE 59999
// MinerCreateMinefield ( unit , x , y ) ;
59980: LD_VAR 0 2
59984: PPUSH
59985: LD_VAR 0 4
59989: PPUSH
59990: LD_VAR 0 5
59994: PPUSH
59995: CALL 63593 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59999: LD_VAR 0 1
60003: PUSH
60004: LD_INT 253
60006: EQUAL
60007: PUSH
60008: LD_VAR 0 2
60012: PPUSH
60013: CALL_OW 257
60017: PUSH
60018: LD_INT 5
60020: EQUAL
60021: AND
60022: IFFALSE 60043
// ComBinocular ( unit , x , y ) ;
60024: LD_VAR 0 2
60028: PPUSH
60029: LD_VAR 0 4
60033: PPUSH
60034: LD_VAR 0 5
60038: PPUSH
60039: CALL 63962 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60043: LD_VAR 0 1
60047: PUSH
60048: LD_INT 254
60050: EQUAL
60051: PUSH
60052: LD_VAR 0 2
60056: PPUSH
60057: CALL_OW 264
60061: PUSH
60062: LD_INT 99
60064: EQUAL
60065: AND
60066: PUSH
60067: LD_VAR 0 3
60071: PPUSH
60072: CALL_OW 263
60076: PUSH
60077: LD_INT 3
60079: EQUAL
60080: AND
60081: IFFALSE 60097
// HackDestroyVehicle ( unit , selectedUnit ) ;
60083: LD_VAR 0 2
60087: PPUSH
60088: LD_VAR 0 3
60092: PPUSH
60093: CALL 62265 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60097: LD_VAR 0 1
60101: PUSH
60102: LD_INT 255
60104: EQUAL
60105: PUSH
60106: LD_VAR 0 2
60110: PPUSH
60111: CALL_OW 264
60115: PUSH
60116: LD_INT 14
60118: PUSH
60119: LD_INT 53
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: IN
60126: AND
60127: PUSH
60128: LD_VAR 0 4
60132: PPUSH
60133: LD_VAR 0 5
60137: PPUSH
60138: CALL_OW 488
60142: AND
60143: IFFALSE 60167
// CutTreeXYR ( unit , x , y , 12 ) ;
60145: LD_VAR 0 2
60149: PPUSH
60150: LD_VAR 0 4
60154: PPUSH
60155: LD_VAR 0 5
60159: PPUSH
60160: LD_INT 12
60162: PPUSH
60163: CALL 60262 0 4
// if cmd = 256 then
60167: LD_VAR 0 1
60171: PUSH
60172: LD_INT 256
60174: EQUAL
60175: IFFALSE 60196
// SetFactoryWaypoint ( unit , x , y ) ;
60177: LD_VAR 0 2
60181: PPUSH
60182: LD_VAR 0 4
60186: PPUSH
60187: LD_VAR 0 5
60191: PPUSH
60192: CALL 79053 0 3
// if cmd = 257 then
60196: LD_VAR 0 1
60200: PUSH
60201: LD_INT 257
60203: EQUAL
60204: IFFALSE 60225
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60206: LD_VAR 0 2
60210: PPUSH
60211: LD_VAR 0 4
60215: PPUSH
60216: LD_VAR 0 5
60220: PPUSH
60221: CALL 79415 0 3
// if cmd = 258 then
60225: LD_VAR 0 1
60229: PUSH
60230: LD_INT 258
60232: EQUAL
60233: IFFALSE 60257
// BurnTreeXYR ( unit , x , y , 8 ) ;
60235: LD_VAR 0 2
60239: PPUSH
60240: LD_VAR 0 4
60244: PPUSH
60245: LD_VAR 0 5
60249: PPUSH
60250: LD_INT 8
60252: PPUSH
60253: CALL 60656 0 4
// end ;
60257: LD_VAR 0 6
60261: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60262: LD_INT 0
60264: PPUSH
60265: PPUSH
60266: PPUSH
60267: PPUSH
60268: PPUSH
60269: PPUSH
60270: PPUSH
60271: PPUSH
60272: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60273: LD_VAR 0 1
60277: PPUSH
60278: CALL_OW 302
60282: NOT
60283: PUSH
60284: LD_VAR 0 2
60288: PPUSH
60289: LD_VAR 0 3
60293: PPUSH
60294: CALL_OW 488
60298: NOT
60299: OR
60300: PUSH
60301: LD_VAR 0 4
60305: NOT
60306: OR
60307: IFFALSE 60311
// exit ;
60309: GO 60651
// list := [ ] ;
60311: LD_ADDR_VAR 0 13
60315: PUSH
60316: EMPTY
60317: ST_TO_ADDR
// if x - r < 0 then
60318: LD_VAR 0 2
60322: PUSH
60323: LD_VAR 0 4
60327: MINUS
60328: PUSH
60329: LD_INT 0
60331: LESS
60332: IFFALSE 60344
// min_x := 0 else
60334: LD_ADDR_VAR 0 7
60338: PUSH
60339: LD_INT 0
60341: ST_TO_ADDR
60342: GO 60360
// min_x := x - r ;
60344: LD_ADDR_VAR 0 7
60348: PUSH
60349: LD_VAR 0 2
60353: PUSH
60354: LD_VAR 0 4
60358: MINUS
60359: ST_TO_ADDR
// if y - r < 0 then
60360: LD_VAR 0 3
60364: PUSH
60365: LD_VAR 0 4
60369: MINUS
60370: PUSH
60371: LD_INT 0
60373: LESS
60374: IFFALSE 60386
// min_y := 0 else
60376: LD_ADDR_VAR 0 8
60380: PUSH
60381: LD_INT 0
60383: ST_TO_ADDR
60384: GO 60402
// min_y := y - r ;
60386: LD_ADDR_VAR 0 8
60390: PUSH
60391: LD_VAR 0 3
60395: PUSH
60396: LD_VAR 0 4
60400: MINUS
60401: ST_TO_ADDR
// max_x := x + r ;
60402: LD_ADDR_VAR 0 9
60406: PUSH
60407: LD_VAR 0 2
60411: PUSH
60412: LD_VAR 0 4
60416: PLUS
60417: ST_TO_ADDR
// max_y := y + r ;
60418: LD_ADDR_VAR 0 10
60422: PUSH
60423: LD_VAR 0 3
60427: PUSH
60428: LD_VAR 0 4
60432: PLUS
60433: ST_TO_ADDR
// for _x = min_x to max_x do
60434: LD_ADDR_VAR 0 11
60438: PUSH
60439: DOUBLE
60440: LD_VAR 0 7
60444: DEC
60445: ST_TO_ADDR
60446: LD_VAR 0 9
60450: PUSH
60451: FOR_TO
60452: IFFALSE 60569
// for _y = min_y to max_y do
60454: LD_ADDR_VAR 0 12
60458: PUSH
60459: DOUBLE
60460: LD_VAR 0 8
60464: DEC
60465: ST_TO_ADDR
60466: LD_VAR 0 10
60470: PUSH
60471: FOR_TO
60472: IFFALSE 60565
// begin if not ValidHex ( _x , _y ) then
60474: LD_VAR 0 11
60478: PPUSH
60479: LD_VAR 0 12
60483: PPUSH
60484: CALL_OW 488
60488: NOT
60489: IFFALSE 60493
// continue ;
60491: GO 60471
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60493: LD_VAR 0 11
60497: PPUSH
60498: LD_VAR 0 12
60502: PPUSH
60503: CALL_OW 351
60507: PUSH
60508: LD_VAR 0 11
60512: PPUSH
60513: LD_VAR 0 12
60517: PPUSH
60518: CALL_OW 554
60522: AND
60523: IFFALSE 60563
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60525: LD_ADDR_VAR 0 13
60529: PUSH
60530: LD_VAR 0 13
60534: PPUSH
60535: LD_VAR 0 13
60539: PUSH
60540: LD_INT 1
60542: PLUS
60543: PPUSH
60544: LD_VAR 0 11
60548: PUSH
60549: LD_VAR 0 12
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PPUSH
60558: CALL_OW 2
60562: ST_TO_ADDR
// end ;
60563: GO 60471
60565: POP
60566: POP
60567: GO 60451
60569: POP
60570: POP
// if not list then
60571: LD_VAR 0 13
60575: NOT
60576: IFFALSE 60580
// exit ;
60578: GO 60651
// for i in list do
60580: LD_ADDR_VAR 0 6
60584: PUSH
60585: LD_VAR 0 13
60589: PUSH
60590: FOR_IN
60591: IFFALSE 60649
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60593: LD_VAR 0 1
60597: PPUSH
60598: LD_STRING M
60600: PUSH
60601: LD_VAR 0 6
60605: PUSH
60606: LD_INT 1
60608: ARRAY
60609: PUSH
60610: LD_VAR 0 6
60614: PUSH
60615: LD_INT 2
60617: ARRAY
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: PUSH
60640: EMPTY
60641: LIST
60642: PPUSH
60643: CALL_OW 447
60647: GO 60590
60649: POP
60650: POP
// end ;
60651: LD_VAR 0 5
60655: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
60656: LD_INT 0
60658: PPUSH
60659: PPUSH
60660: PPUSH
60661: PPUSH
60662: PPUSH
60663: PPUSH
60664: PPUSH
60665: PPUSH
60666: PPUSH
60667: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60668: LD_VAR 0 1
60672: PPUSH
60673: CALL_OW 302
60677: NOT
60678: PUSH
60679: LD_VAR 0 2
60683: PPUSH
60684: LD_VAR 0 3
60688: PPUSH
60689: CALL_OW 488
60693: NOT
60694: OR
60695: PUSH
60696: LD_VAR 0 4
60700: NOT
60701: OR
60702: IFFALSE 60706
// exit ;
60704: GO 61219
// list := [ ] ;
60706: LD_ADDR_VAR 0 13
60710: PUSH
60711: EMPTY
60712: ST_TO_ADDR
// if x - r < 0 then
60713: LD_VAR 0 2
60717: PUSH
60718: LD_VAR 0 4
60722: MINUS
60723: PUSH
60724: LD_INT 0
60726: LESS
60727: IFFALSE 60739
// min_x := 0 else
60729: LD_ADDR_VAR 0 7
60733: PUSH
60734: LD_INT 0
60736: ST_TO_ADDR
60737: GO 60755
// min_x := x - r ;
60739: LD_ADDR_VAR 0 7
60743: PUSH
60744: LD_VAR 0 2
60748: PUSH
60749: LD_VAR 0 4
60753: MINUS
60754: ST_TO_ADDR
// if y - r < 0 then
60755: LD_VAR 0 3
60759: PUSH
60760: LD_VAR 0 4
60764: MINUS
60765: PUSH
60766: LD_INT 0
60768: LESS
60769: IFFALSE 60781
// min_y := 0 else
60771: LD_ADDR_VAR 0 8
60775: PUSH
60776: LD_INT 0
60778: ST_TO_ADDR
60779: GO 60797
// min_y := y - r ;
60781: LD_ADDR_VAR 0 8
60785: PUSH
60786: LD_VAR 0 3
60790: PUSH
60791: LD_VAR 0 4
60795: MINUS
60796: ST_TO_ADDR
// max_x := x + r ;
60797: LD_ADDR_VAR 0 9
60801: PUSH
60802: LD_VAR 0 2
60806: PUSH
60807: LD_VAR 0 4
60811: PLUS
60812: ST_TO_ADDR
// max_y := y + r ;
60813: LD_ADDR_VAR 0 10
60817: PUSH
60818: LD_VAR 0 3
60822: PUSH
60823: LD_VAR 0 4
60827: PLUS
60828: ST_TO_ADDR
// for _x = min_x to max_x do
60829: LD_ADDR_VAR 0 11
60833: PUSH
60834: DOUBLE
60835: LD_VAR 0 7
60839: DEC
60840: ST_TO_ADDR
60841: LD_VAR 0 9
60845: PUSH
60846: FOR_TO
60847: IFFALSE 60964
// for _y = min_y to max_y do
60849: LD_ADDR_VAR 0 12
60853: PUSH
60854: DOUBLE
60855: LD_VAR 0 8
60859: DEC
60860: ST_TO_ADDR
60861: LD_VAR 0 10
60865: PUSH
60866: FOR_TO
60867: IFFALSE 60960
// begin if not ValidHex ( _x , _y ) then
60869: LD_VAR 0 11
60873: PPUSH
60874: LD_VAR 0 12
60878: PPUSH
60879: CALL_OW 488
60883: NOT
60884: IFFALSE 60888
// continue ;
60886: GO 60866
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60888: LD_VAR 0 11
60892: PPUSH
60893: LD_VAR 0 12
60897: PPUSH
60898: CALL_OW 351
60902: PUSH
60903: LD_VAR 0 11
60907: PPUSH
60908: LD_VAR 0 12
60912: PPUSH
60913: CALL_OW 554
60917: AND
60918: IFFALSE 60958
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60920: LD_ADDR_VAR 0 13
60924: PUSH
60925: LD_VAR 0 13
60929: PPUSH
60930: LD_VAR 0 13
60934: PUSH
60935: LD_INT 1
60937: PLUS
60938: PPUSH
60939: LD_VAR 0 11
60943: PUSH
60944: LD_VAR 0 12
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PPUSH
60953: CALL_OW 2
60957: ST_TO_ADDR
// end ;
60958: GO 60866
60960: POP
60961: POP
60962: GO 60846
60964: POP
60965: POP
// if not list then
60966: LD_VAR 0 13
60970: NOT
60971: IFFALSE 60975
// exit ;
60973: GO 61219
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
60975: LD_ADDR_VAR 0 13
60979: PUSH
60980: LD_VAR 0 1
60984: PPUSH
60985: LD_VAR 0 13
60989: PPUSH
60990: LD_INT 1
60992: PPUSH
60993: LD_INT 1
60995: PPUSH
60996: CALL 22167 0 4
61000: ST_TO_ADDR
// ComStop ( flame ) ;
61001: LD_VAR 0 1
61005: PPUSH
61006: CALL_OW 141
// for i in list do
61010: LD_ADDR_VAR 0 6
61014: PUSH
61015: LD_VAR 0 13
61019: PUSH
61020: FOR_IN
61021: IFFALSE 61052
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61023: LD_VAR 0 1
61027: PPUSH
61028: LD_VAR 0 6
61032: PUSH
61033: LD_INT 1
61035: ARRAY
61036: PPUSH
61037: LD_VAR 0 6
61041: PUSH
61042: LD_INT 2
61044: ARRAY
61045: PPUSH
61046: CALL_OW 176
61050: GO 61020
61052: POP
61053: POP
// repeat wait ( 0 0$1 ) ;
61054: LD_INT 35
61056: PPUSH
61057: CALL_OW 67
// task := GetTaskList ( flame ) ;
61061: LD_ADDR_VAR 0 14
61065: PUSH
61066: LD_VAR 0 1
61070: PPUSH
61071: CALL_OW 437
61075: ST_TO_ADDR
// if not task then
61076: LD_VAR 0 14
61080: NOT
61081: IFFALSE 61085
// exit ;
61083: GO 61219
// if task [ 1 ] [ 1 ] <> | then
61085: LD_VAR 0 14
61089: PUSH
61090: LD_INT 1
61092: ARRAY
61093: PUSH
61094: LD_INT 1
61096: ARRAY
61097: PUSH
61098: LD_STRING |
61100: NONEQUAL
61101: IFFALSE 61105
// exit ;
61103: GO 61219
// _x := task [ 1 ] [ 2 ] ;
61105: LD_ADDR_VAR 0 11
61109: PUSH
61110: LD_VAR 0 14
61114: PUSH
61115: LD_INT 1
61117: ARRAY
61118: PUSH
61119: LD_INT 2
61121: ARRAY
61122: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61123: LD_ADDR_VAR 0 12
61127: PUSH
61128: LD_VAR 0 14
61132: PUSH
61133: LD_INT 1
61135: ARRAY
61136: PUSH
61137: LD_INT 3
61139: ARRAY
61140: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61141: LD_VAR 0 11
61145: PPUSH
61146: LD_VAR 0 12
61150: PPUSH
61151: CALL_OW 351
61155: NOT
61156: PUSH
61157: LD_VAR 0 11
61161: PPUSH
61162: LD_VAR 0 12
61166: PPUSH
61167: CALL_OW 554
61171: NOT
61172: OR
61173: IFFALSE 61207
// begin task := Delete ( task , 1 ) ;
61175: LD_ADDR_VAR 0 14
61179: PUSH
61180: LD_VAR 0 14
61184: PPUSH
61185: LD_INT 1
61187: PPUSH
61188: CALL_OW 3
61192: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61193: LD_VAR 0 1
61197: PPUSH
61198: LD_VAR 0 14
61202: PPUSH
61203: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61207: LD_VAR 0 1
61211: PPUSH
61212: CALL_OW 314
61216: NOT
61217: IFFALSE 61054
// end ;
61219: LD_VAR 0 5
61223: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61224: LD_EXP 52
61228: NOT
61229: IFFALSE 61279
61231: GO 61233
61233: DISABLE
// begin initHack := true ;
61234: LD_ADDR_EXP 52
61238: PUSH
61239: LD_INT 1
61241: ST_TO_ADDR
// hackTanks := [ ] ;
61242: LD_ADDR_EXP 53
61246: PUSH
61247: EMPTY
61248: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61249: LD_ADDR_EXP 54
61253: PUSH
61254: EMPTY
61255: ST_TO_ADDR
// hackLimit := 3 ;
61256: LD_ADDR_EXP 55
61260: PUSH
61261: LD_INT 3
61263: ST_TO_ADDR
// hackDist := 12 ;
61264: LD_ADDR_EXP 56
61268: PUSH
61269: LD_INT 12
61271: ST_TO_ADDR
// hackCounter := [ ] ;
61272: LD_ADDR_EXP 57
61276: PUSH
61277: EMPTY
61278: ST_TO_ADDR
// end ;
61279: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61280: LD_EXP 52
61284: PUSH
61285: LD_INT 34
61287: PUSH
61288: LD_INT 99
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PPUSH
61295: CALL_OW 69
61299: AND
61300: IFFALSE 61553
61302: GO 61304
61304: DISABLE
61305: LD_INT 0
61307: PPUSH
61308: PPUSH
// begin enable ;
61309: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61310: LD_ADDR_VAR 0 1
61314: PUSH
61315: LD_INT 34
61317: PUSH
61318: LD_INT 99
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PPUSH
61325: CALL_OW 69
61329: PUSH
61330: FOR_IN
61331: IFFALSE 61551
// begin if not i in hackTanks then
61333: LD_VAR 0 1
61337: PUSH
61338: LD_EXP 53
61342: IN
61343: NOT
61344: IFFALSE 61427
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61346: LD_ADDR_EXP 53
61350: PUSH
61351: LD_EXP 53
61355: PPUSH
61356: LD_EXP 53
61360: PUSH
61361: LD_INT 1
61363: PLUS
61364: PPUSH
61365: LD_VAR 0 1
61369: PPUSH
61370: CALL_OW 1
61374: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61375: LD_ADDR_EXP 54
61379: PUSH
61380: LD_EXP 54
61384: PPUSH
61385: LD_EXP 54
61389: PUSH
61390: LD_INT 1
61392: PLUS
61393: PPUSH
61394: EMPTY
61395: PPUSH
61396: CALL_OW 1
61400: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61401: LD_ADDR_EXP 57
61405: PUSH
61406: LD_EXP 57
61410: PPUSH
61411: LD_EXP 57
61415: PUSH
61416: LD_INT 1
61418: PLUS
61419: PPUSH
61420: EMPTY
61421: PPUSH
61422: CALL_OW 1
61426: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61427: LD_VAR 0 1
61431: PPUSH
61432: CALL_OW 302
61436: NOT
61437: IFFALSE 61450
// begin HackUnlinkAll ( i ) ;
61439: LD_VAR 0 1
61443: PPUSH
61444: CALL 61556 0 1
// continue ;
61448: GO 61330
// end ; HackCheckCapturedStatus ( i ) ;
61450: LD_VAR 0 1
61454: PPUSH
61455: CALL 61999 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61459: LD_ADDR_VAR 0 2
61463: PUSH
61464: LD_INT 81
61466: PUSH
61467: LD_VAR 0 1
61471: PPUSH
61472: CALL_OW 255
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 33
61483: PUSH
61484: LD_INT 3
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 91
61493: PUSH
61494: LD_VAR 0 1
61498: PUSH
61499: LD_EXP 56
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 50
61511: PUSH
61512: EMPTY
61513: LIST
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: PPUSH
61521: CALL_OW 69
61525: ST_TO_ADDR
// if not tmp then
61526: LD_VAR 0 2
61530: NOT
61531: IFFALSE 61535
// continue ;
61533: GO 61330
// HackLink ( i , tmp ) ;
61535: LD_VAR 0 1
61539: PPUSH
61540: LD_VAR 0 2
61544: PPUSH
61545: CALL 61692 0 2
// end ;
61549: GO 61330
61551: POP
61552: POP
// end ;
61553: PPOPN 2
61555: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61556: LD_INT 0
61558: PPUSH
61559: PPUSH
61560: PPUSH
// if not hack in hackTanks then
61561: LD_VAR 0 1
61565: PUSH
61566: LD_EXP 53
61570: IN
61571: NOT
61572: IFFALSE 61576
// exit ;
61574: GO 61687
// index := GetElementIndex ( hackTanks , hack ) ;
61576: LD_ADDR_VAR 0 4
61580: PUSH
61581: LD_EXP 53
61585: PPUSH
61586: LD_VAR 0 1
61590: PPUSH
61591: CALL 21464 0 2
61595: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61596: LD_EXP 54
61600: PUSH
61601: LD_VAR 0 4
61605: ARRAY
61606: IFFALSE 61687
// begin for i in hackTanksCaptured [ index ] do
61608: LD_ADDR_VAR 0 3
61612: PUSH
61613: LD_EXP 54
61617: PUSH
61618: LD_VAR 0 4
61622: ARRAY
61623: PUSH
61624: FOR_IN
61625: IFFALSE 61651
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61627: LD_VAR 0 3
61631: PUSH
61632: LD_INT 1
61634: ARRAY
61635: PPUSH
61636: LD_VAR 0 3
61640: PUSH
61641: LD_INT 2
61643: ARRAY
61644: PPUSH
61645: CALL_OW 235
61649: GO 61624
61651: POP
61652: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61653: LD_ADDR_EXP 54
61657: PUSH
61658: LD_EXP 54
61662: PPUSH
61663: LD_VAR 0 4
61667: PPUSH
61668: EMPTY
61669: PPUSH
61670: CALL_OW 1
61674: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61675: LD_VAR 0 1
61679: PPUSH
61680: LD_INT 0
61682: PPUSH
61683: CALL_OW 505
// end ; end ;
61687: LD_VAR 0 2
61691: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61692: LD_INT 0
61694: PPUSH
61695: PPUSH
61696: PPUSH
// if not hack in hackTanks or not vehicles then
61697: LD_VAR 0 1
61701: PUSH
61702: LD_EXP 53
61706: IN
61707: NOT
61708: PUSH
61709: LD_VAR 0 2
61713: NOT
61714: OR
61715: IFFALSE 61719
// exit ;
61717: GO 61994
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
61719: LD_ADDR_VAR 0 2
61723: PUSH
61724: LD_VAR 0 1
61728: PPUSH
61729: LD_VAR 0 2
61733: PPUSH
61734: LD_INT 1
61736: PPUSH
61737: LD_INT 1
61739: PPUSH
61740: CALL 22114 0 4
61744: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
61745: LD_ADDR_VAR 0 5
61749: PUSH
61750: LD_EXP 53
61754: PPUSH
61755: LD_VAR 0 1
61759: PPUSH
61760: CALL 21464 0 2
61764: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
61765: LD_EXP 54
61769: PUSH
61770: LD_VAR 0 5
61774: ARRAY
61775: PUSH
61776: LD_EXP 55
61780: LESS
61781: IFFALSE 61970
// begin for i := 1 to vehicles do
61783: LD_ADDR_VAR 0 4
61787: PUSH
61788: DOUBLE
61789: LD_INT 1
61791: DEC
61792: ST_TO_ADDR
61793: LD_VAR 0 2
61797: PUSH
61798: FOR_TO
61799: IFFALSE 61968
// begin if hackTanksCaptured [ index ] = hackLimit then
61801: LD_EXP 54
61805: PUSH
61806: LD_VAR 0 5
61810: ARRAY
61811: PUSH
61812: LD_EXP 55
61816: EQUAL
61817: IFFALSE 61821
// break ;
61819: GO 61968
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61821: LD_ADDR_EXP 57
61825: PUSH
61826: LD_EXP 57
61830: PPUSH
61831: LD_VAR 0 5
61835: PPUSH
61836: LD_EXP 57
61840: PUSH
61841: LD_VAR 0 5
61845: ARRAY
61846: PUSH
61847: LD_INT 1
61849: PLUS
61850: PPUSH
61851: CALL_OW 1
61855: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61856: LD_ADDR_EXP 54
61860: PUSH
61861: LD_EXP 54
61865: PPUSH
61866: LD_VAR 0 5
61870: PUSH
61871: LD_EXP 54
61875: PUSH
61876: LD_VAR 0 5
61880: ARRAY
61881: PUSH
61882: LD_INT 1
61884: PLUS
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PPUSH
61890: LD_VAR 0 2
61894: PUSH
61895: LD_VAR 0 4
61899: ARRAY
61900: PUSH
61901: LD_VAR 0 2
61905: PUSH
61906: LD_VAR 0 4
61910: ARRAY
61911: PPUSH
61912: CALL_OW 255
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PPUSH
61921: CALL 21679 0 3
61925: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61926: LD_VAR 0 2
61930: PUSH
61931: LD_VAR 0 4
61935: ARRAY
61936: PPUSH
61937: LD_VAR 0 1
61941: PPUSH
61942: CALL_OW 255
61946: PPUSH
61947: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61951: LD_VAR 0 2
61955: PUSH
61956: LD_VAR 0 4
61960: ARRAY
61961: PPUSH
61962: CALL_OW 141
// end ;
61966: GO 61798
61968: POP
61969: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61970: LD_VAR 0 1
61974: PPUSH
61975: LD_EXP 54
61979: PUSH
61980: LD_VAR 0 5
61984: ARRAY
61985: PUSH
61986: LD_INT 0
61988: PLUS
61989: PPUSH
61990: CALL_OW 505
// end ;
61994: LD_VAR 0 3
61998: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61999: LD_INT 0
62001: PPUSH
62002: PPUSH
62003: PPUSH
62004: PPUSH
// if not hack in hackTanks then
62005: LD_VAR 0 1
62009: PUSH
62010: LD_EXP 53
62014: IN
62015: NOT
62016: IFFALSE 62020
// exit ;
62018: GO 62260
// index := GetElementIndex ( hackTanks , hack ) ;
62020: LD_ADDR_VAR 0 4
62024: PUSH
62025: LD_EXP 53
62029: PPUSH
62030: LD_VAR 0 1
62034: PPUSH
62035: CALL 21464 0 2
62039: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62040: LD_ADDR_VAR 0 3
62044: PUSH
62045: DOUBLE
62046: LD_EXP 54
62050: PUSH
62051: LD_VAR 0 4
62055: ARRAY
62056: INC
62057: ST_TO_ADDR
62058: LD_INT 1
62060: PUSH
62061: FOR_DOWNTO
62062: IFFALSE 62234
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62064: LD_ADDR_VAR 0 5
62068: PUSH
62069: LD_EXP 54
62073: PUSH
62074: LD_VAR 0 4
62078: ARRAY
62079: PUSH
62080: LD_VAR 0 3
62084: ARRAY
62085: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62086: LD_VAR 0 5
62090: PUSH
62091: LD_INT 1
62093: ARRAY
62094: PPUSH
62095: CALL_OW 302
62099: NOT
62100: PUSH
62101: LD_VAR 0 5
62105: PUSH
62106: LD_INT 1
62108: ARRAY
62109: PPUSH
62110: CALL_OW 255
62114: PUSH
62115: LD_VAR 0 1
62119: PPUSH
62120: CALL_OW 255
62124: NONEQUAL
62125: OR
62126: IFFALSE 62232
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62128: LD_VAR 0 5
62132: PUSH
62133: LD_INT 1
62135: ARRAY
62136: PPUSH
62137: CALL_OW 305
62141: PUSH
62142: LD_VAR 0 5
62146: PUSH
62147: LD_INT 1
62149: ARRAY
62150: PPUSH
62151: CALL_OW 255
62155: PUSH
62156: LD_VAR 0 1
62160: PPUSH
62161: CALL_OW 255
62165: EQUAL
62166: AND
62167: IFFALSE 62191
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62169: LD_VAR 0 5
62173: PUSH
62174: LD_INT 1
62176: ARRAY
62177: PPUSH
62178: LD_VAR 0 5
62182: PUSH
62183: LD_INT 2
62185: ARRAY
62186: PPUSH
62187: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62191: LD_ADDR_EXP 54
62195: PUSH
62196: LD_EXP 54
62200: PPUSH
62201: LD_VAR 0 4
62205: PPUSH
62206: LD_EXP 54
62210: PUSH
62211: LD_VAR 0 4
62215: ARRAY
62216: PPUSH
62217: LD_VAR 0 3
62221: PPUSH
62222: CALL_OW 3
62226: PPUSH
62227: CALL_OW 1
62231: ST_TO_ADDR
// end ; end ;
62232: GO 62061
62234: POP
62235: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62236: LD_VAR 0 1
62240: PPUSH
62241: LD_EXP 54
62245: PUSH
62246: LD_VAR 0 4
62250: ARRAY
62251: PUSH
62252: LD_INT 0
62254: PLUS
62255: PPUSH
62256: CALL_OW 505
// end ;
62260: LD_VAR 0 2
62264: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62265: LD_INT 0
62267: PPUSH
62268: PPUSH
62269: PPUSH
62270: PPUSH
// if not hack in hackTanks then
62271: LD_VAR 0 1
62275: PUSH
62276: LD_EXP 53
62280: IN
62281: NOT
62282: IFFALSE 62286
// exit ;
62284: GO 62371
// index := GetElementIndex ( hackTanks , hack ) ;
62286: LD_ADDR_VAR 0 5
62290: PUSH
62291: LD_EXP 53
62295: PPUSH
62296: LD_VAR 0 1
62300: PPUSH
62301: CALL 21464 0 2
62305: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62306: LD_ADDR_VAR 0 4
62310: PUSH
62311: DOUBLE
62312: LD_INT 1
62314: DEC
62315: ST_TO_ADDR
62316: LD_EXP 54
62320: PUSH
62321: LD_VAR 0 5
62325: ARRAY
62326: PUSH
62327: FOR_TO
62328: IFFALSE 62369
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62330: LD_EXP 54
62334: PUSH
62335: LD_VAR 0 5
62339: ARRAY
62340: PUSH
62341: LD_VAR 0 4
62345: ARRAY
62346: PUSH
62347: LD_INT 1
62349: ARRAY
62350: PUSH
62351: LD_VAR 0 2
62355: EQUAL
62356: IFFALSE 62367
// KillUnit ( vehicle ) ;
62358: LD_VAR 0 2
62362: PPUSH
62363: CALL_OW 66
62367: GO 62327
62369: POP
62370: POP
// end ;
62371: LD_VAR 0 3
62375: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62376: LD_EXP 58
62380: NOT
62381: IFFALSE 62416
62383: GO 62385
62385: DISABLE
// begin initMiner := true ;
62386: LD_ADDR_EXP 58
62390: PUSH
62391: LD_INT 1
62393: ST_TO_ADDR
// minersList := [ ] ;
62394: LD_ADDR_EXP 59
62398: PUSH
62399: EMPTY
62400: ST_TO_ADDR
// minerMinesList := [ ] ;
62401: LD_ADDR_EXP 60
62405: PUSH
62406: EMPTY
62407: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62408: LD_ADDR_EXP 61
62412: PUSH
62413: LD_INT 5
62415: ST_TO_ADDR
// end ;
62416: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62417: LD_EXP 58
62421: PUSH
62422: LD_INT 34
62424: PUSH
62425: LD_INT 81
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PPUSH
62432: CALL_OW 69
62436: AND
62437: IFFALSE 62898
62439: GO 62441
62441: DISABLE
62442: LD_INT 0
62444: PPUSH
62445: PPUSH
62446: PPUSH
62447: PPUSH
// begin enable ;
62448: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62449: LD_ADDR_VAR 0 1
62453: PUSH
62454: LD_INT 34
62456: PUSH
62457: LD_INT 81
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PPUSH
62464: CALL_OW 69
62468: PUSH
62469: FOR_IN
62470: IFFALSE 62542
// begin if not i in minersList then
62472: LD_VAR 0 1
62476: PUSH
62477: LD_EXP 59
62481: IN
62482: NOT
62483: IFFALSE 62540
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62485: LD_ADDR_EXP 59
62489: PUSH
62490: LD_EXP 59
62494: PPUSH
62495: LD_EXP 59
62499: PUSH
62500: LD_INT 1
62502: PLUS
62503: PPUSH
62504: LD_VAR 0 1
62508: PPUSH
62509: CALL_OW 1
62513: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62514: LD_ADDR_EXP 60
62518: PUSH
62519: LD_EXP 60
62523: PPUSH
62524: LD_EXP 60
62528: PUSH
62529: LD_INT 1
62531: PLUS
62532: PPUSH
62533: EMPTY
62534: PPUSH
62535: CALL_OW 1
62539: ST_TO_ADDR
// end end ;
62540: GO 62469
62542: POP
62543: POP
// for i := minerMinesList downto 1 do
62544: LD_ADDR_VAR 0 1
62548: PUSH
62549: DOUBLE
62550: LD_EXP 60
62554: INC
62555: ST_TO_ADDR
62556: LD_INT 1
62558: PUSH
62559: FOR_DOWNTO
62560: IFFALSE 62896
// begin if IsLive ( minersList [ i ] ) then
62562: LD_EXP 59
62566: PUSH
62567: LD_VAR 0 1
62571: ARRAY
62572: PPUSH
62573: CALL_OW 300
62577: IFFALSE 62605
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62579: LD_EXP 59
62583: PUSH
62584: LD_VAR 0 1
62588: ARRAY
62589: PPUSH
62590: LD_EXP 60
62594: PUSH
62595: LD_VAR 0 1
62599: ARRAY
62600: PPUSH
62601: CALL_OW 505
// if not minerMinesList [ i ] then
62605: LD_EXP 60
62609: PUSH
62610: LD_VAR 0 1
62614: ARRAY
62615: NOT
62616: IFFALSE 62620
// continue ;
62618: GO 62559
// for j := minerMinesList [ i ] downto 1 do
62620: LD_ADDR_VAR 0 2
62624: PUSH
62625: DOUBLE
62626: LD_EXP 60
62630: PUSH
62631: LD_VAR 0 1
62635: ARRAY
62636: INC
62637: ST_TO_ADDR
62638: LD_INT 1
62640: PUSH
62641: FOR_DOWNTO
62642: IFFALSE 62892
// begin side := GetSide ( minersList [ i ] ) ;
62644: LD_ADDR_VAR 0 3
62648: PUSH
62649: LD_EXP 59
62653: PUSH
62654: LD_VAR 0 1
62658: ARRAY
62659: PPUSH
62660: CALL_OW 255
62664: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62665: LD_ADDR_VAR 0 4
62669: PUSH
62670: LD_EXP 60
62674: PUSH
62675: LD_VAR 0 1
62679: ARRAY
62680: PUSH
62681: LD_VAR 0 2
62685: ARRAY
62686: PUSH
62687: LD_INT 1
62689: ARRAY
62690: PPUSH
62691: LD_EXP 60
62695: PUSH
62696: LD_VAR 0 1
62700: ARRAY
62701: PUSH
62702: LD_VAR 0 2
62706: ARRAY
62707: PUSH
62708: LD_INT 2
62710: ARRAY
62711: PPUSH
62712: CALL_OW 428
62716: ST_TO_ADDR
// if not tmp then
62717: LD_VAR 0 4
62721: NOT
62722: IFFALSE 62726
// continue ;
62724: GO 62641
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
62726: LD_VAR 0 4
62730: PUSH
62731: LD_INT 81
62733: PUSH
62734: LD_VAR 0 3
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PPUSH
62743: CALL_OW 69
62747: IN
62748: PUSH
62749: LD_EXP 60
62753: PUSH
62754: LD_VAR 0 1
62758: ARRAY
62759: PUSH
62760: LD_VAR 0 2
62764: ARRAY
62765: PUSH
62766: LD_INT 1
62768: ARRAY
62769: PPUSH
62770: LD_EXP 60
62774: PUSH
62775: LD_VAR 0 1
62779: ARRAY
62780: PUSH
62781: LD_VAR 0 2
62785: ARRAY
62786: PUSH
62787: LD_INT 2
62789: ARRAY
62790: PPUSH
62791: CALL_OW 458
62795: AND
62796: IFFALSE 62890
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62798: LD_EXP 60
62802: PUSH
62803: LD_VAR 0 1
62807: ARRAY
62808: PUSH
62809: LD_VAR 0 2
62813: ARRAY
62814: PUSH
62815: LD_INT 1
62817: ARRAY
62818: PPUSH
62819: LD_EXP 60
62823: PUSH
62824: LD_VAR 0 1
62828: ARRAY
62829: PUSH
62830: LD_VAR 0 2
62834: ARRAY
62835: PUSH
62836: LD_INT 2
62838: ARRAY
62839: PPUSH
62840: LD_VAR 0 3
62844: PPUSH
62845: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62849: LD_ADDR_EXP 60
62853: PUSH
62854: LD_EXP 60
62858: PPUSH
62859: LD_VAR 0 1
62863: PPUSH
62864: LD_EXP 60
62868: PUSH
62869: LD_VAR 0 1
62873: ARRAY
62874: PPUSH
62875: LD_VAR 0 2
62879: PPUSH
62880: CALL_OW 3
62884: PPUSH
62885: CALL_OW 1
62889: ST_TO_ADDR
// end ; end ;
62890: GO 62641
62892: POP
62893: POP
// end ;
62894: GO 62559
62896: POP
62897: POP
// end ;
62898: PPOPN 4
62900: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62901: LD_INT 0
62903: PPUSH
62904: PPUSH
// result := false ;
62905: LD_ADDR_VAR 0 4
62909: PUSH
62910: LD_INT 0
62912: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62913: LD_VAR 0 1
62917: PPUSH
62918: CALL_OW 264
62922: PUSH
62923: LD_INT 81
62925: EQUAL
62926: NOT
62927: IFFALSE 62931
// exit ;
62929: GO 63171
// index := GetElementIndex ( minersList , unit ) ;
62931: LD_ADDR_VAR 0 5
62935: PUSH
62936: LD_EXP 59
62940: PPUSH
62941: LD_VAR 0 1
62945: PPUSH
62946: CALL 21464 0 2
62950: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62951: LD_EXP 60
62955: PUSH
62956: LD_VAR 0 5
62960: ARRAY
62961: PUSH
62962: LD_EXP 61
62966: GREATEREQUAL
62967: IFFALSE 62971
// exit ;
62969: GO 63171
// ComMoveXY ( unit , x , y ) ;
62971: LD_VAR 0 1
62975: PPUSH
62976: LD_VAR 0 2
62980: PPUSH
62981: LD_VAR 0 3
62985: PPUSH
62986: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62990: LD_INT 35
62992: PPUSH
62993: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62997: LD_VAR 0 1
63001: PPUSH
63002: LD_VAR 0 2
63006: PPUSH
63007: LD_VAR 0 3
63011: PPUSH
63012: CALL 53205 0 3
63016: NOT
63017: PUSH
63018: LD_VAR 0 1
63022: PPUSH
63023: CALL_OW 314
63027: AND
63028: IFFALSE 63032
// exit ;
63030: GO 63171
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63032: LD_VAR 0 2
63036: PPUSH
63037: LD_VAR 0 3
63041: PPUSH
63042: CALL_OW 428
63046: PUSH
63047: LD_VAR 0 1
63051: EQUAL
63052: PUSH
63053: LD_VAR 0 1
63057: PPUSH
63058: CALL_OW 314
63062: NOT
63063: AND
63064: IFFALSE 62990
// PlaySoundXY ( x , y , PlantMine ) ;
63066: LD_VAR 0 2
63070: PPUSH
63071: LD_VAR 0 3
63075: PPUSH
63076: LD_STRING PlantMine
63078: PPUSH
63079: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63083: LD_VAR 0 2
63087: PPUSH
63088: LD_VAR 0 3
63092: PPUSH
63093: LD_VAR 0 1
63097: PPUSH
63098: CALL_OW 255
63102: PPUSH
63103: LD_INT 0
63105: PPUSH
63106: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63110: LD_ADDR_EXP 60
63114: PUSH
63115: LD_EXP 60
63119: PPUSH
63120: LD_VAR 0 5
63124: PUSH
63125: LD_EXP 60
63129: PUSH
63130: LD_VAR 0 5
63134: ARRAY
63135: PUSH
63136: LD_INT 1
63138: PLUS
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PPUSH
63144: LD_VAR 0 2
63148: PUSH
63149: LD_VAR 0 3
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PPUSH
63158: CALL 21679 0 3
63162: ST_TO_ADDR
// result := true ;
63163: LD_ADDR_VAR 0 4
63167: PUSH
63168: LD_INT 1
63170: ST_TO_ADDR
// end ;
63171: LD_VAR 0 4
63175: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63176: LD_INT 0
63178: PPUSH
63179: PPUSH
63180: PPUSH
// if not unit in minersList then
63181: LD_VAR 0 1
63185: PUSH
63186: LD_EXP 59
63190: IN
63191: NOT
63192: IFFALSE 63196
// exit ;
63194: GO 63588
// index := GetElementIndex ( minersList , unit ) ;
63196: LD_ADDR_VAR 0 6
63200: PUSH
63201: LD_EXP 59
63205: PPUSH
63206: LD_VAR 0 1
63210: PPUSH
63211: CALL 21464 0 2
63215: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63216: LD_ADDR_VAR 0 5
63220: PUSH
63221: DOUBLE
63222: LD_EXP 60
63226: PUSH
63227: LD_VAR 0 6
63231: ARRAY
63232: INC
63233: ST_TO_ADDR
63234: LD_INT 1
63236: PUSH
63237: FOR_DOWNTO
63238: IFFALSE 63399
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63240: LD_EXP 60
63244: PUSH
63245: LD_VAR 0 6
63249: ARRAY
63250: PUSH
63251: LD_VAR 0 5
63255: ARRAY
63256: PUSH
63257: LD_INT 1
63259: ARRAY
63260: PUSH
63261: LD_VAR 0 2
63265: EQUAL
63266: PUSH
63267: LD_EXP 60
63271: PUSH
63272: LD_VAR 0 6
63276: ARRAY
63277: PUSH
63278: LD_VAR 0 5
63282: ARRAY
63283: PUSH
63284: LD_INT 2
63286: ARRAY
63287: PUSH
63288: LD_VAR 0 3
63292: EQUAL
63293: AND
63294: IFFALSE 63397
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63296: LD_EXP 60
63300: PUSH
63301: LD_VAR 0 6
63305: ARRAY
63306: PUSH
63307: LD_VAR 0 5
63311: ARRAY
63312: PUSH
63313: LD_INT 1
63315: ARRAY
63316: PPUSH
63317: LD_EXP 60
63321: PUSH
63322: LD_VAR 0 6
63326: ARRAY
63327: PUSH
63328: LD_VAR 0 5
63332: ARRAY
63333: PUSH
63334: LD_INT 2
63336: ARRAY
63337: PPUSH
63338: LD_VAR 0 1
63342: PPUSH
63343: CALL_OW 255
63347: PPUSH
63348: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63352: LD_ADDR_EXP 60
63356: PUSH
63357: LD_EXP 60
63361: PPUSH
63362: LD_VAR 0 6
63366: PPUSH
63367: LD_EXP 60
63371: PUSH
63372: LD_VAR 0 6
63376: ARRAY
63377: PPUSH
63378: LD_VAR 0 5
63382: PPUSH
63383: CALL_OW 3
63387: PPUSH
63388: CALL_OW 1
63392: ST_TO_ADDR
// exit ;
63393: POP
63394: POP
63395: GO 63588
// end ; end ;
63397: GO 63237
63399: POP
63400: POP
// for i := minerMinesList [ index ] downto 1 do
63401: LD_ADDR_VAR 0 5
63405: PUSH
63406: DOUBLE
63407: LD_EXP 60
63411: PUSH
63412: LD_VAR 0 6
63416: ARRAY
63417: INC
63418: ST_TO_ADDR
63419: LD_INT 1
63421: PUSH
63422: FOR_DOWNTO
63423: IFFALSE 63586
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63425: LD_EXP 60
63429: PUSH
63430: LD_VAR 0 6
63434: ARRAY
63435: PUSH
63436: LD_VAR 0 5
63440: ARRAY
63441: PUSH
63442: LD_INT 1
63444: ARRAY
63445: PPUSH
63446: LD_EXP 60
63450: PUSH
63451: LD_VAR 0 6
63455: ARRAY
63456: PUSH
63457: LD_VAR 0 5
63461: ARRAY
63462: PUSH
63463: LD_INT 2
63465: ARRAY
63466: PPUSH
63467: LD_VAR 0 2
63471: PPUSH
63472: LD_VAR 0 3
63476: PPUSH
63477: CALL_OW 298
63481: PUSH
63482: LD_INT 6
63484: LESS
63485: IFFALSE 63584
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63487: LD_EXP 60
63491: PUSH
63492: LD_VAR 0 6
63496: ARRAY
63497: PUSH
63498: LD_VAR 0 5
63502: ARRAY
63503: PUSH
63504: LD_INT 1
63506: ARRAY
63507: PPUSH
63508: LD_EXP 60
63512: PUSH
63513: LD_VAR 0 6
63517: ARRAY
63518: PUSH
63519: LD_VAR 0 5
63523: ARRAY
63524: PUSH
63525: LD_INT 2
63527: ARRAY
63528: PPUSH
63529: LD_VAR 0 1
63533: PPUSH
63534: CALL_OW 255
63538: PPUSH
63539: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63543: LD_ADDR_EXP 60
63547: PUSH
63548: LD_EXP 60
63552: PPUSH
63553: LD_VAR 0 6
63557: PPUSH
63558: LD_EXP 60
63562: PUSH
63563: LD_VAR 0 6
63567: ARRAY
63568: PPUSH
63569: LD_VAR 0 5
63573: PPUSH
63574: CALL_OW 3
63578: PPUSH
63579: CALL_OW 1
63583: ST_TO_ADDR
// end ; end ;
63584: GO 63422
63586: POP
63587: POP
// end ;
63588: LD_VAR 0 4
63592: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63593: LD_INT 0
63595: PPUSH
63596: PPUSH
63597: PPUSH
63598: PPUSH
63599: PPUSH
63600: PPUSH
63601: PPUSH
63602: PPUSH
63603: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63604: LD_VAR 0 1
63608: PPUSH
63609: CALL_OW 264
63613: PUSH
63614: LD_INT 81
63616: EQUAL
63617: NOT
63618: PUSH
63619: LD_VAR 0 1
63623: PUSH
63624: LD_EXP 59
63628: IN
63629: NOT
63630: OR
63631: IFFALSE 63635
// exit ;
63633: GO 63957
// index := GetElementIndex ( minersList , unit ) ;
63635: LD_ADDR_VAR 0 6
63639: PUSH
63640: LD_EXP 59
63644: PPUSH
63645: LD_VAR 0 1
63649: PPUSH
63650: CALL 21464 0 2
63654: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
63655: LD_ADDR_VAR 0 8
63659: PUSH
63660: LD_EXP 61
63664: PUSH
63665: LD_EXP 60
63669: PUSH
63670: LD_VAR 0 6
63674: ARRAY
63675: MINUS
63676: ST_TO_ADDR
// if not minesFreeAmount then
63677: LD_VAR 0 8
63681: NOT
63682: IFFALSE 63686
// exit ;
63684: GO 63957
// tmp := [ ] ;
63686: LD_ADDR_VAR 0 7
63690: PUSH
63691: EMPTY
63692: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
63693: LD_ADDR_VAR 0 5
63697: PUSH
63698: DOUBLE
63699: LD_INT 1
63701: DEC
63702: ST_TO_ADDR
63703: LD_VAR 0 8
63707: PUSH
63708: FOR_TO
63709: IFFALSE 63904
// begin _d := rand ( 0 , 5 ) ;
63711: LD_ADDR_VAR 0 11
63715: PUSH
63716: LD_INT 0
63718: PPUSH
63719: LD_INT 5
63721: PPUSH
63722: CALL_OW 12
63726: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
63727: LD_ADDR_VAR 0 12
63731: PUSH
63732: LD_INT 2
63734: PPUSH
63735: LD_INT 6
63737: PPUSH
63738: CALL_OW 12
63742: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
63743: LD_ADDR_VAR 0 9
63747: PUSH
63748: LD_VAR 0 2
63752: PPUSH
63753: LD_VAR 0 11
63757: PPUSH
63758: LD_VAR 0 12
63762: PPUSH
63763: CALL_OW 272
63767: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
63768: LD_ADDR_VAR 0 10
63772: PUSH
63773: LD_VAR 0 3
63777: PPUSH
63778: LD_VAR 0 11
63782: PPUSH
63783: LD_VAR 0 12
63787: PPUSH
63788: CALL_OW 273
63792: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
63793: LD_VAR 0 9
63797: PPUSH
63798: LD_VAR 0 10
63802: PPUSH
63803: CALL_OW 488
63807: PUSH
63808: LD_VAR 0 9
63812: PUSH
63813: LD_VAR 0 10
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_VAR 0 7
63826: IN
63827: NOT
63828: AND
63829: PUSH
63830: LD_VAR 0 9
63834: PPUSH
63835: LD_VAR 0 10
63839: PPUSH
63840: CALL_OW 458
63844: NOT
63845: AND
63846: IFFALSE 63888
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63848: LD_ADDR_VAR 0 7
63852: PUSH
63853: LD_VAR 0 7
63857: PPUSH
63858: LD_VAR 0 7
63862: PUSH
63863: LD_INT 1
63865: PLUS
63866: PPUSH
63867: LD_VAR 0 9
63871: PUSH
63872: LD_VAR 0 10
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PPUSH
63881: CALL_OW 1
63885: ST_TO_ADDR
63886: GO 63902
// i := i - 1 ;
63888: LD_ADDR_VAR 0 5
63892: PUSH
63893: LD_VAR 0 5
63897: PUSH
63898: LD_INT 1
63900: MINUS
63901: ST_TO_ADDR
// end ;
63902: GO 63708
63904: POP
63905: POP
// for i in tmp do
63906: LD_ADDR_VAR 0 5
63910: PUSH
63911: LD_VAR 0 7
63915: PUSH
63916: FOR_IN
63917: IFFALSE 63955
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63919: LD_VAR 0 1
63923: PPUSH
63924: LD_VAR 0 5
63928: PUSH
63929: LD_INT 1
63931: ARRAY
63932: PPUSH
63933: LD_VAR 0 5
63937: PUSH
63938: LD_INT 2
63940: ARRAY
63941: PPUSH
63942: CALL 62901 0 3
63946: NOT
63947: IFFALSE 63953
// exit ;
63949: POP
63950: POP
63951: GO 63957
63953: GO 63916
63955: POP
63956: POP
// end ;
63957: LD_VAR 0 4
63961: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
63962: LD_INT 0
63964: PPUSH
63965: PPUSH
63966: PPUSH
63967: PPUSH
63968: PPUSH
63969: PPUSH
63970: PPUSH
// if not GetClass ( unit ) = class_sniper then
63971: LD_VAR 0 1
63975: PPUSH
63976: CALL_OW 257
63980: PUSH
63981: LD_INT 5
63983: EQUAL
63984: NOT
63985: IFFALSE 63989
// exit ;
63987: GO 64377
// dist := 8 ;
63989: LD_ADDR_VAR 0 5
63993: PUSH
63994: LD_INT 8
63996: ST_TO_ADDR
// viewRange := 12 ;
63997: LD_ADDR_VAR 0 7
64001: PUSH
64002: LD_INT 12
64004: ST_TO_ADDR
// side := GetSide ( unit ) ;
64005: LD_ADDR_VAR 0 6
64009: PUSH
64010: LD_VAR 0 1
64014: PPUSH
64015: CALL_OW 255
64019: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64020: LD_INT 61
64022: PPUSH
64023: LD_VAR 0 6
64027: PPUSH
64028: CALL_OW 321
64032: PUSH
64033: LD_INT 2
64035: EQUAL
64036: IFFALSE 64046
// viewRange := 16 ;
64038: LD_ADDR_VAR 0 7
64042: PUSH
64043: LD_INT 16
64045: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64046: LD_VAR 0 1
64050: PPUSH
64051: LD_VAR 0 2
64055: PPUSH
64056: LD_VAR 0 3
64060: PPUSH
64061: CALL_OW 297
64065: PUSH
64066: LD_VAR 0 5
64070: GREATER
64071: IFFALSE 64150
// begin ComMoveXY ( unit , x , y ) ;
64073: LD_VAR 0 1
64077: PPUSH
64078: LD_VAR 0 2
64082: PPUSH
64083: LD_VAR 0 3
64087: PPUSH
64088: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64092: LD_INT 35
64094: PPUSH
64095: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64099: LD_VAR 0 1
64103: PPUSH
64104: LD_VAR 0 2
64108: PPUSH
64109: LD_VAR 0 3
64113: PPUSH
64114: CALL 53205 0 3
64118: NOT
64119: IFFALSE 64123
// exit ;
64121: GO 64377
// until GetDistUnitXY ( unit , x , y ) < dist ;
64123: LD_VAR 0 1
64127: PPUSH
64128: LD_VAR 0 2
64132: PPUSH
64133: LD_VAR 0 3
64137: PPUSH
64138: CALL_OW 297
64142: PUSH
64143: LD_VAR 0 5
64147: LESS
64148: IFFALSE 64092
// end ; ComTurnXY ( unit , x , y ) ;
64150: LD_VAR 0 1
64154: PPUSH
64155: LD_VAR 0 2
64159: PPUSH
64160: LD_VAR 0 3
64164: PPUSH
64165: CALL_OW 118
// wait ( 5 ) ;
64169: LD_INT 5
64171: PPUSH
64172: CALL_OW 67
// _d := GetDir ( unit ) ;
64176: LD_ADDR_VAR 0 10
64180: PUSH
64181: LD_VAR 0 1
64185: PPUSH
64186: CALL_OW 254
64190: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
64191: LD_ADDR_VAR 0 8
64195: PUSH
64196: LD_VAR 0 1
64200: PPUSH
64201: CALL_OW 250
64205: PPUSH
64206: LD_VAR 0 10
64210: PPUSH
64211: LD_VAR 0 5
64215: PPUSH
64216: CALL_OW 272
64220: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
64221: LD_ADDR_VAR 0 9
64225: PUSH
64226: LD_VAR 0 1
64230: PPUSH
64231: CALL_OW 251
64235: PPUSH
64236: LD_VAR 0 10
64240: PPUSH
64241: LD_VAR 0 5
64245: PPUSH
64246: CALL_OW 273
64250: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64251: LD_VAR 0 8
64255: PPUSH
64256: LD_VAR 0 9
64260: PPUSH
64261: CALL_OW 488
64265: NOT
64266: IFFALSE 64270
// exit ;
64268: GO 64377
// ComAnimCustom ( unit , 1 ) ;
64270: LD_VAR 0 1
64274: PPUSH
64275: LD_INT 1
64277: PPUSH
64278: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64282: LD_VAR 0 8
64286: PPUSH
64287: LD_VAR 0 9
64291: PPUSH
64292: LD_VAR 0 6
64296: PPUSH
64297: LD_VAR 0 7
64301: PPUSH
64302: CALL_OW 330
// repeat wait ( 1 ) ;
64306: LD_INT 1
64308: PPUSH
64309: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
64313: LD_VAR 0 1
64317: PPUSH
64318: CALL_OW 316
64322: PUSH
64323: LD_VAR 0 1
64327: PPUSH
64328: CALL_OW 314
64332: OR
64333: PUSH
64334: LD_VAR 0 1
64338: PPUSH
64339: CALL_OW 302
64343: NOT
64344: OR
64345: PUSH
64346: LD_VAR 0 1
64350: PPUSH
64351: CALL_OW 301
64355: OR
64356: IFFALSE 64306
// RemoveSeeing ( _x , _y , side ) ;
64358: LD_VAR 0 8
64362: PPUSH
64363: LD_VAR 0 9
64367: PPUSH
64368: LD_VAR 0 6
64372: PPUSH
64373: CALL_OW 331
// end ; end_of_file
64377: LD_VAR 0 4
64381: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64382: LD_VAR 0 1
64386: PUSH
64387: LD_INT 200
64389: DOUBLE
64390: GREATEREQUAL
64391: IFFALSE 64399
64393: LD_INT 299
64395: DOUBLE
64396: LESSEQUAL
64397: IFTRUE 64401
64399: GO 64433
64401: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64402: LD_VAR 0 1
64406: PPUSH
64407: LD_VAR 0 2
64411: PPUSH
64412: LD_VAR 0 3
64416: PPUSH
64417: LD_VAR 0 4
64421: PPUSH
64422: LD_VAR 0 5
64426: PPUSH
64427: CALL 59864 0 5
64431: GO 64510
64433: LD_INT 300
64435: DOUBLE
64436: GREATEREQUAL
64437: IFFALSE 64445
64439: LD_INT 399
64441: DOUBLE
64442: LESSEQUAL
64443: IFTRUE 64447
64445: GO 64509
64447: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64448: LD_VAR 0 1
64452: PPUSH
64453: LD_VAR 0 2
64457: PPUSH
64458: LD_VAR 0 3
64462: PPUSH
64463: LD_VAR 0 4
64467: PPUSH
64468: LD_VAR 0 5
64472: PPUSH
64473: LD_VAR 0 6
64477: PPUSH
64478: LD_VAR 0 7
64482: PPUSH
64483: LD_VAR 0 8
64487: PPUSH
64488: LD_VAR 0 9
64492: PPUSH
64493: LD_VAR 0 10
64497: PPUSH
64498: LD_VAR 0 11
64502: PPUSH
64503: CALL 77065 0 11
64507: GO 64510
64509: POP
// end ;
64510: PPOPN 11
64512: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64513: LD_VAR 0 1
64517: PPUSH
64518: LD_VAR 0 2
64522: PPUSH
64523: LD_VAR 0 3
64527: PPUSH
64528: LD_VAR 0 4
64532: PPUSH
64533: LD_VAR 0 5
64537: PPUSH
64538: CALL 59600 0 5
// end ; end_of_file
64542: PPOPN 5
64544: END
// export globalGameSaveCounter ; every 0 0$1 do
64545: GO 64547
64547: DISABLE
// begin enable ;
64548: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64549: LD_STRING updateTimer(
64551: PUSH
64552: LD_OWVAR 1
64556: STR
64557: PUSH
64558: LD_STRING );
64560: STR
64561: PPUSH
64562: CALL_OW 559
// end ;
64566: END
// every 0 0$1 do
64567: GO 64569
64569: DISABLE
// begin globalGameSaveCounter := 0 ;
64570: LD_ADDR_EXP 62
64574: PUSH
64575: LD_INT 0
64577: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
64578: LD_STRING setGameSaveCounter(0)
64580: PPUSH
64581: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
64585: LD_STRING initStreamRollete();
64587: PPUSH
64588: CALL_OW 559
// InitStreamMode ;
64592: CALL 65935 0 0
// DefineStreamItems ( false ) ;
64596: LD_INT 0
64598: PPUSH
64599: CALL 66399 0 1
// end ;
64603: END
// export function SOS_MapStart ( ) ; begin
64604: LD_INT 0
64606: PPUSH
// if streamModeActive then
64607: LD_EXP 63
64611: IFFALSE 64620
// DefineStreamItems ( true ) ;
64613: LD_INT 1
64615: PPUSH
64616: CALL 66399 0 1
// UpdateLuaVariables ( ) ;
64620: CALL 64637 0 0
// UpdateFactoryWaypoints ( ) ;
64624: CALL 79268 0 0
// UpdateWarehouseGatheringPoints ( ) ;
64628: CALL 79525 0 0
// end ;
64632: LD_VAR 0 1
64636: RET
// function UpdateLuaVariables ( ) ; begin
64637: LD_INT 0
64639: PPUSH
// if globalGameSaveCounter then
64640: LD_EXP 62
64644: IFFALSE 64678
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
64646: LD_ADDR_EXP 62
64650: PUSH
64651: LD_EXP 62
64655: PPUSH
64656: CALL 55769 0 1
64660: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
64661: LD_STRING setGameSaveCounter(
64663: PUSH
64664: LD_EXP 62
64668: STR
64669: PUSH
64670: LD_STRING )
64672: STR
64673: PPUSH
64674: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64678: LD_STRING setGameDifficulty(
64680: PUSH
64681: LD_OWVAR 67
64685: STR
64686: PUSH
64687: LD_STRING )
64689: STR
64690: PPUSH
64691: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
64695: LD_STRING displayDifficulty(
64697: PUSH
64698: LD_OWVAR 67
64702: STR
64703: PUSH
64704: LD_STRING )
64706: STR
64707: PPUSH
64708: CALL_OW 559
// end ;
64712: LD_VAR 0 1
64716: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64717: LD_INT 0
64719: PPUSH
// if p2 = stream_mode then
64720: LD_VAR 0 2
64724: PUSH
64725: LD_INT 100
64727: EQUAL
64728: IFFALSE 65731
// begin if not StreamModeActive then
64730: LD_EXP 63
64734: NOT
64735: IFFALSE 64745
// StreamModeActive := true ;
64737: LD_ADDR_EXP 63
64741: PUSH
64742: LD_INT 1
64744: ST_TO_ADDR
// if p3 = 0 then
64745: LD_VAR 0 3
64749: PUSH
64750: LD_INT 0
64752: EQUAL
64753: IFFALSE 64759
// InitStreamMode ;
64755: CALL 65935 0 0
// if p3 = 1 then
64759: LD_VAR 0 3
64763: PUSH
64764: LD_INT 1
64766: EQUAL
64767: IFFALSE 64777
// sRocket := true ;
64769: LD_ADDR_EXP 68
64773: PUSH
64774: LD_INT 1
64776: ST_TO_ADDR
// if p3 = 2 then
64777: LD_VAR 0 3
64781: PUSH
64782: LD_INT 2
64784: EQUAL
64785: IFFALSE 64795
// sSpeed := true ;
64787: LD_ADDR_EXP 67
64791: PUSH
64792: LD_INT 1
64794: ST_TO_ADDR
// if p3 = 3 then
64795: LD_VAR 0 3
64799: PUSH
64800: LD_INT 3
64802: EQUAL
64803: IFFALSE 64813
// sEngine := true ;
64805: LD_ADDR_EXP 69
64809: PUSH
64810: LD_INT 1
64812: ST_TO_ADDR
// if p3 = 4 then
64813: LD_VAR 0 3
64817: PUSH
64818: LD_INT 4
64820: EQUAL
64821: IFFALSE 64831
// sSpec := true ;
64823: LD_ADDR_EXP 66
64827: PUSH
64828: LD_INT 1
64830: ST_TO_ADDR
// if p3 = 5 then
64831: LD_VAR 0 3
64835: PUSH
64836: LD_INT 5
64838: EQUAL
64839: IFFALSE 64849
// sLevel := true ;
64841: LD_ADDR_EXP 70
64845: PUSH
64846: LD_INT 1
64848: ST_TO_ADDR
// if p3 = 6 then
64849: LD_VAR 0 3
64853: PUSH
64854: LD_INT 6
64856: EQUAL
64857: IFFALSE 64867
// sArmoury := true ;
64859: LD_ADDR_EXP 71
64863: PUSH
64864: LD_INT 1
64866: ST_TO_ADDR
// if p3 = 7 then
64867: LD_VAR 0 3
64871: PUSH
64872: LD_INT 7
64874: EQUAL
64875: IFFALSE 64885
// sRadar := true ;
64877: LD_ADDR_EXP 72
64881: PUSH
64882: LD_INT 1
64884: ST_TO_ADDR
// if p3 = 8 then
64885: LD_VAR 0 3
64889: PUSH
64890: LD_INT 8
64892: EQUAL
64893: IFFALSE 64903
// sBunker := true ;
64895: LD_ADDR_EXP 73
64899: PUSH
64900: LD_INT 1
64902: ST_TO_ADDR
// if p3 = 9 then
64903: LD_VAR 0 3
64907: PUSH
64908: LD_INT 9
64910: EQUAL
64911: IFFALSE 64921
// sHack := true ;
64913: LD_ADDR_EXP 74
64917: PUSH
64918: LD_INT 1
64920: ST_TO_ADDR
// if p3 = 10 then
64921: LD_VAR 0 3
64925: PUSH
64926: LD_INT 10
64928: EQUAL
64929: IFFALSE 64939
// sFire := true ;
64931: LD_ADDR_EXP 75
64935: PUSH
64936: LD_INT 1
64938: ST_TO_ADDR
// if p3 = 11 then
64939: LD_VAR 0 3
64943: PUSH
64944: LD_INT 11
64946: EQUAL
64947: IFFALSE 64957
// sRefresh := true ;
64949: LD_ADDR_EXP 76
64953: PUSH
64954: LD_INT 1
64956: ST_TO_ADDR
// if p3 = 12 then
64957: LD_VAR 0 3
64961: PUSH
64962: LD_INT 12
64964: EQUAL
64965: IFFALSE 64975
// sExp := true ;
64967: LD_ADDR_EXP 77
64971: PUSH
64972: LD_INT 1
64974: ST_TO_ADDR
// if p3 = 13 then
64975: LD_VAR 0 3
64979: PUSH
64980: LD_INT 13
64982: EQUAL
64983: IFFALSE 64993
// sDepot := true ;
64985: LD_ADDR_EXP 78
64989: PUSH
64990: LD_INT 1
64992: ST_TO_ADDR
// if p3 = 14 then
64993: LD_VAR 0 3
64997: PUSH
64998: LD_INT 14
65000: EQUAL
65001: IFFALSE 65011
// sFlag := true ;
65003: LD_ADDR_EXP 79
65007: PUSH
65008: LD_INT 1
65010: ST_TO_ADDR
// if p3 = 15 then
65011: LD_VAR 0 3
65015: PUSH
65016: LD_INT 15
65018: EQUAL
65019: IFFALSE 65029
// sKamikadze := true ;
65021: LD_ADDR_EXP 87
65025: PUSH
65026: LD_INT 1
65028: ST_TO_ADDR
// if p3 = 16 then
65029: LD_VAR 0 3
65033: PUSH
65034: LD_INT 16
65036: EQUAL
65037: IFFALSE 65047
// sTroll := true ;
65039: LD_ADDR_EXP 88
65043: PUSH
65044: LD_INT 1
65046: ST_TO_ADDR
// if p3 = 17 then
65047: LD_VAR 0 3
65051: PUSH
65052: LD_INT 17
65054: EQUAL
65055: IFFALSE 65065
// sSlow := true ;
65057: LD_ADDR_EXP 89
65061: PUSH
65062: LD_INT 1
65064: ST_TO_ADDR
// if p3 = 18 then
65065: LD_VAR 0 3
65069: PUSH
65070: LD_INT 18
65072: EQUAL
65073: IFFALSE 65083
// sLack := true ;
65075: LD_ADDR_EXP 90
65079: PUSH
65080: LD_INT 1
65082: ST_TO_ADDR
// if p3 = 19 then
65083: LD_VAR 0 3
65087: PUSH
65088: LD_INT 19
65090: EQUAL
65091: IFFALSE 65101
// sTank := true ;
65093: LD_ADDR_EXP 92
65097: PUSH
65098: LD_INT 1
65100: ST_TO_ADDR
// if p3 = 20 then
65101: LD_VAR 0 3
65105: PUSH
65106: LD_INT 20
65108: EQUAL
65109: IFFALSE 65119
// sRemote := true ;
65111: LD_ADDR_EXP 93
65115: PUSH
65116: LD_INT 1
65118: ST_TO_ADDR
// if p3 = 21 then
65119: LD_VAR 0 3
65123: PUSH
65124: LD_INT 21
65126: EQUAL
65127: IFFALSE 65137
// sPowell := true ;
65129: LD_ADDR_EXP 94
65133: PUSH
65134: LD_INT 1
65136: ST_TO_ADDR
// if p3 = 22 then
65137: LD_VAR 0 3
65141: PUSH
65142: LD_INT 22
65144: EQUAL
65145: IFFALSE 65155
// sTeleport := true ;
65147: LD_ADDR_EXP 97
65151: PUSH
65152: LD_INT 1
65154: ST_TO_ADDR
// if p3 = 23 then
65155: LD_VAR 0 3
65159: PUSH
65160: LD_INT 23
65162: EQUAL
65163: IFFALSE 65173
// sOilTower := true ;
65165: LD_ADDR_EXP 99
65169: PUSH
65170: LD_INT 1
65172: ST_TO_ADDR
// if p3 = 24 then
65173: LD_VAR 0 3
65177: PUSH
65178: LD_INT 24
65180: EQUAL
65181: IFFALSE 65191
// sShovel := true ;
65183: LD_ADDR_EXP 100
65187: PUSH
65188: LD_INT 1
65190: ST_TO_ADDR
// if p3 = 25 then
65191: LD_VAR 0 3
65195: PUSH
65196: LD_INT 25
65198: EQUAL
65199: IFFALSE 65209
// sSheik := true ;
65201: LD_ADDR_EXP 101
65205: PUSH
65206: LD_INT 1
65208: ST_TO_ADDR
// if p3 = 26 then
65209: LD_VAR 0 3
65213: PUSH
65214: LD_INT 26
65216: EQUAL
65217: IFFALSE 65227
// sEarthquake := true ;
65219: LD_ADDR_EXP 103
65223: PUSH
65224: LD_INT 1
65226: ST_TO_ADDR
// if p3 = 27 then
65227: LD_VAR 0 3
65231: PUSH
65232: LD_INT 27
65234: EQUAL
65235: IFFALSE 65245
// sAI := true ;
65237: LD_ADDR_EXP 104
65241: PUSH
65242: LD_INT 1
65244: ST_TO_ADDR
// if p3 = 28 then
65245: LD_VAR 0 3
65249: PUSH
65250: LD_INT 28
65252: EQUAL
65253: IFFALSE 65263
// sCargo := true ;
65255: LD_ADDR_EXP 107
65259: PUSH
65260: LD_INT 1
65262: ST_TO_ADDR
// if p3 = 29 then
65263: LD_VAR 0 3
65267: PUSH
65268: LD_INT 29
65270: EQUAL
65271: IFFALSE 65281
// sDLaser := true ;
65273: LD_ADDR_EXP 108
65277: PUSH
65278: LD_INT 1
65280: ST_TO_ADDR
// if p3 = 30 then
65281: LD_VAR 0 3
65285: PUSH
65286: LD_INT 30
65288: EQUAL
65289: IFFALSE 65299
// sExchange := true ;
65291: LD_ADDR_EXP 109
65295: PUSH
65296: LD_INT 1
65298: ST_TO_ADDR
// if p3 = 31 then
65299: LD_VAR 0 3
65303: PUSH
65304: LD_INT 31
65306: EQUAL
65307: IFFALSE 65317
// sFac := true ;
65309: LD_ADDR_EXP 110
65313: PUSH
65314: LD_INT 1
65316: ST_TO_ADDR
// if p3 = 32 then
65317: LD_VAR 0 3
65321: PUSH
65322: LD_INT 32
65324: EQUAL
65325: IFFALSE 65335
// sPower := true ;
65327: LD_ADDR_EXP 111
65331: PUSH
65332: LD_INT 1
65334: ST_TO_ADDR
// if p3 = 33 then
65335: LD_VAR 0 3
65339: PUSH
65340: LD_INT 33
65342: EQUAL
65343: IFFALSE 65353
// sRandom := true ;
65345: LD_ADDR_EXP 112
65349: PUSH
65350: LD_INT 1
65352: ST_TO_ADDR
// if p3 = 34 then
65353: LD_VAR 0 3
65357: PUSH
65358: LD_INT 34
65360: EQUAL
65361: IFFALSE 65371
// sShield := true ;
65363: LD_ADDR_EXP 113
65367: PUSH
65368: LD_INT 1
65370: ST_TO_ADDR
// if p3 = 35 then
65371: LD_VAR 0 3
65375: PUSH
65376: LD_INT 35
65378: EQUAL
65379: IFFALSE 65389
// sTime := true ;
65381: LD_ADDR_EXP 114
65385: PUSH
65386: LD_INT 1
65388: ST_TO_ADDR
// if p3 = 36 then
65389: LD_VAR 0 3
65393: PUSH
65394: LD_INT 36
65396: EQUAL
65397: IFFALSE 65407
// sTools := true ;
65399: LD_ADDR_EXP 115
65403: PUSH
65404: LD_INT 1
65406: ST_TO_ADDR
// if p3 = 101 then
65407: LD_VAR 0 3
65411: PUSH
65412: LD_INT 101
65414: EQUAL
65415: IFFALSE 65425
// sSold := true ;
65417: LD_ADDR_EXP 80
65421: PUSH
65422: LD_INT 1
65424: ST_TO_ADDR
// if p3 = 102 then
65425: LD_VAR 0 3
65429: PUSH
65430: LD_INT 102
65432: EQUAL
65433: IFFALSE 65443
// sDiff := true ;
65435: LD_ADDR_EXP 81
65439: PUSH
65440: LD_INT 1
65442: ST_TO_ADDR
// if p3 = 103 then
65443: LD_VAR 0 3
65447: PUSH
65448: LD_INT 103
65450: EQUAL
65451: IFFALSE 65461
// sFog := true ;
65453: LD_ADDR_EXP 84
65457: PUSH
65458: LD_INT 1
65460: ST_TO_ADDR
// if p3 = 104 then
65461: LD_VAR 0 3
65465: PUSH
65466: LD_INT 104
65468: EQUAL
65469: IFFALSE 65479
// sReset := true ;
65471: LD_ADDR_EXP 85
65475: PUSH
65476: LD_INT 1
65478: ST_TO_ADDR
// if p3 = 105 then
65479: LD_VAR 0 3
65483: PUSH
65484: LD_INT 105
65486: EQUAL
65487: IFFALSE 65497
// sSun := true ;
65489: LD_ADDR_EXP 86
65493: PUSH
65494: LD_INT 1
65496: ST_TO_ADDR
// if p3 = 106 then
65497: LD_VAR 0 3
65501: PUSH
65502: LD_INT 106
65504: EQUAL
65505: IFFALSE 65515
// sTiger := true ;
65507: LD_ADDR_EXP 82
65511: PUSH
65512: LD_INT 1
65514: ST_TO_ADDR
// if p3 = 107 then
65515: LD_VAR 0 3
65519: PUSH
65520: LD_INT 107
65522: EQUAL
65523: IFFALSE 65533
// sBomb := true ;
65525: LD_ADDR_EXP 83
65529: PUSH
65530: LD_INT 1
65532: ST_TO_ADDR
// if p3 = 108 then
65533: LD_VAR 0 3
65537: PUSH
65538: LD_INT 108
65540: EQUAL
65541: IFFALSE 65551
// sWound := true ;
65543: LD_ADDR_EXP 91
65547: PUSH
65548: LD_INT 1
65550: ST_TO_ADDR
// if p3 = 109 then
65551: LD_VAR 0 3
65555: PUSH
65556: LD_INT 109
65558: EQUAL
65559: IFFALSE 65569
// sBetray := true ;
65561: LD_ADDR_EXP 95
65565: PUSH
65566: LD_INT 1
65568: ST_TO_ADDR
// if p3 = 110 then
65569: LD_VAR 0 3
65573: PUSH
65574: LD_INT 110
65576: EQUAL
65577: IFFALSE 65587
// sContamin := true ;
65579: LD_ADDR_EXP 96
65583: PUSH
65584: LD_INT 1
65586: ST_TO_ADDR
// if p3 = 111 then
65587: LD_VAR 0 3
65591: PUSH
65592: LD_INT 111
65594: EQUAL
65595: IFFALSE 65605
// sOil := true ;
65597: LD_ADDR_EXP 98
65601: PUSH
65602: LD_INT 1
65604: ST_TO_ADDR
// if p3 = 112 then
65605: LD_VAR 0 3
65609: PUSH
65610: LD_INT 112
65612: EQUAL
65613: IFFALSE 65623
// sStu := true ;
65615: LD_ADDR_EXP 102
65619: PUSH
65620: LD_INT 1
65622: ST_TO_ADDR
// if p3 = 113 then
65623: LD_VAR 0 3
65627: PUSH
65628: LD_INT 113
65630: EQUAL
65631: IFFALSE 65641
// sBazooka := true ;
65633: LD_ADDR_EXP 105
65637: PUSH
65638: LD_INT 1
65640: ST_TO_ADDR
// if p3 = 114 then
65641: LD_VAR 0 3
65645: PUSH
65646: LD_INT 114
65648: EQUAL
65649: IFFALSE 65659
// sMortar := true ;
65651: LD_ADDR_EXP 106
65655: PUSH
65656: LD_INT 1
65658: ST_TO_ADDR
// if p3 = 115 then
65659: LD_VAR 0 3
65663: PUSH
65664: LD_INT 115
65666: EQUAL
65667: IFFALSE 65677
// sRanger := true ;
65669: LD_ADDR_EXP 116
65673: PUSH
65674: LD_INT 1
65676: ST_TO_ADDR
// if p3 = 116 then
65677: LD_VAR 0 3
65681: PUSH
65682: LD_INT 116
65684: EQUAL
65685: IFFALSE 65695
// sComputer := true ;
65687: LD_ADDR_EXP 117
65691: PUSH
65692: LD_INT 1
65694: ST_TO_ADDR
// if p3 = 117 then
65695: LD_VAR 0 3
65699: PUSH
65700: LD_INT 117
65702: EQUAL
65703: IFFALSE 65713
// s30 := true ;
65705: LD_ADDR_EXP 118
65709: PUSH
65710: LD_INT 1
65712: ST_TO_ADDR
// if p3 = 118 then
65713: LD_VAR 0 3
65717: PUSH
65718: LD_INT 118
65720: EQUAL
65721: IFFALSE 65731
// s60 := true ;
65723: LD_ADDR_EXP 119
65727: PUSH
65728: LD_INT 1
65730: ST_TO_ADDR
// end ; if p2 = hack_mode then
65731: LD_VAR 0 2
65735: PUSH
65736: LD_INT 101
65738: EQUAL
65739: IFFALSE 65867
// begin case p3 of 1 :
65741: LD_VAR 0 3
65745: PUSH
65746: LD_INT 1
65748: DOUBLE
65749: EQUAL
65750: IFTRUE 65754
65752: GO 65761
65754: POP
// hHackUnlimitedResources ; 2 :
65755: CALL 78014 0 0
65759: GO 65867
65761: LD_INT 2
65763: DOUBLE
65764: EQUAL
65765: IFTRUE 65769
65767: GO 65776
65769: POP
// hHackSetLevel10 ; 3 :
65770: CALL 78147 0 0
65774: GO 65867
65776: LD_INT 3
65778: DOUBLE
65779: EQUAL
65780: IFTRUE 65784
65782: GO 65791
65784: POP
// hHackSetLevel10YourUnits ; 4 :
65785: CALL 78232 0 0
65789: GO 65867
65791: LD_INT 4
65793: DOUBLE
65794: EQUAL
65795: IFTRUE 65799
65797: GO 65806
65799: POP
// hHackInvincible ; 5 :
65800: CALL 78680 0 0
65804: GO 65867
65806: LD_INT 5
65808: DOUBLE
65809: EQUAL
65810: IFTRUE 65814
65812: GO 65821
65814: POP
// hHackInvisible ; 6 :
65815: CALL 78791 0 0
65819: GO 65867
65821: LD_INT 6
65823: DOUBLE
65824: EQUAL
65825: IFTRUE 65829
65827: GO 65836
65829: POP
// hHackChangeYourSide ; 7 :
65830: CALL 78848 0 0
65834: GO 65867
65836: LD_INT 7
65838: DOUBLE
65839: EQUAL
65840: IFTRUE 65844
65842: GO 65851
65844: POP
// hHackChangeUnitSide ; 8 :
65845: CALL 78890 0 0
65849: GO 65867
65851: LD_INT 8
65853: DOUBLE
65854: EQUAL
65855: IFTRUE 65859
65857: GO 65866
65859: POP
// hHackFog ; end ;
65860: CALL 78991 0 0
65864: GO 65867
65866: POP
// end ; if p2 = game_save_mode then
65867: LD_VAR 0 2
65871: PUSH
65872: LD_INT 102
65874: EQUAL
65875: IFFALSE 65930
// begin if p3 = 1 then
65877: LD_VAR 0 3
65881: PUSH
65882: LD_INT 1
65884: EQUAL
65885: IFFALSE 65897
// globalGameSaveCounter := p4 ;
65887: LD_ADDR_EXP 62
65891: PUSH
65892: LD_VAR 0 4
65896: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
65897: LD_VAR 0 3
65901: PUSH
65902: LD_INT 2
65904: EQUAL
65905: PUSH
65906: LD_EXP 62
65910: AND
65911: IFFALSE 65930
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
65913: LD_STRING setGameSaveCounter(
65915: PUSH
65916: LD_EXP 62
65920: STR
65921: PUSH
65922: LD_STRING )
65924: STR
65925: PPUSH
65926: CALL_OW 559
// end ; end ;
65930: LD_VAR 0 7
65934: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
65935: LD_INT 0
65937: PPUSH
// streamModeActive := false ;
65938: LD_ADDR_EXP 63
65942: PUSH
65943: LD_INT 0
65945: ST_TO_ADDR
// normalCounter := 36 ;
65946: LD_ADDR_EXP 64
65950: PUSH
65951: LD_INT 36
65953: ST_TO_ADDR
// hardcoreCounter := 18 ;
65954: LD_ADDR_EXP 65
65958: PUSH
65959: LD_INT 18
65961: ST_TO_ADDR
// sRocket := false ;
65962: LD_ADDR_EXP 68
65966: PUSH
65967: LD_INT 0
65969: ST_TO_ADDR
// sSpeed := false ;
65970: LD_ADDR_EXP 67
65974: PUSH
65975: LD_INT 0
65977: ST_TO_ADDR
// sEngine := false ;
65978: LD_ADDR_EXP 69
65982: PUSH
65983: LD_INT 0
65985: ST_TO_ADDR
// sSpec := false ;
65986: LD_ADDR_EXP 66
65990: PUSH
65991: LD_INT 0
65993: ST_TO_ADDR
// sLevel := false ;
65994: LD_ADDR_EXP 70
65998: PUSH
65999: LD_INT 0
66001: ST_TO_ADDR
// sArmoury := false ;
66002: LD_ADDR_EXP 71
66006: PUSH
66007: LD_INT 0
66009: ST_TO_ADDR
// sRadar := false ;
66010: LD_ADDR_EXP 72
66014: PUSH
66015: LD_INT 0
66017: ST_TO_ADDR
// sBunker := false ;
66018: LD_ADDR_EXP 73
66022: PUSH
66023: LD_INT 0
66025: ST_TO_ADDR
// sHack := false ;
66026: LD_ADDR_EXP 74
66030: PUSH
66031: LD_INT 0
66033: ST_TO_ADDR
// sFire := false ;
66034: LD_ADDR_EXP 75
66038: PUSH
66039: LD_INT 0
66041: ST_TO_ADDR
// sRefresh := false ;
66042: LD_ADDR_EXP 76
66046: PUSH
66047: LD_INT 0
66049: ST_TO_ADDR
// sExp := false ;
66050: LD_ADDR_EXP 77
66054: PUSH
66055: LD_INT 0
66057: ST_TO_ADDR
// sDepot := false ;
66058: LD_ADDR_EXP 78
66062: PUSH
66063: LD_INT 0
66065: ST_TO_ADDR
// sFlag := false ;
66066: LD_ADDR_EXP 79
66070: PUSH
66071: LD_INT 0
66073: ST_TO_ADDR
// sKamikadze := false ;
66074: LD_ADDR_EXP 87
66078: PUSH
66079: LD_INT 0
66081: ST_TO_ADDR
// sTroll := false ;
66082: LD_ADDR_EXP 88
66086: PUSH
66087: LD_INT 0
66089: ST_TO_ADDR
// sSlow := false ;
66090: LD_ADDR_EXP 89
66094: PUSH
66095: LD_INT 0
66097: ST_TO_ADDR
// sLack := false ;
66098: LD_ADDR_EXP 90
66102: PUSH
66103: LD_INT 0
66105: ST_TO_ADDR
// sTank := false ;
66106: LD_ADDR_EXP 92
66110: PUSH
66111: LD_INT 0
66113: ST_TO_ADDR
// sRemote := false ;
66114: LD_ADDR_EXP 93
66118: PUSH
66119: LD_INT 0
66121: ST_TO_ADDR
// sPowell := false ;
66122: LD_ADDR_EXP 94
66126: PUSH
66127: LD_INT 0
66129: ST_TO_ADDR
// sTeleport := false ;
66130: LD_ADDR_EXP 97
66134: PUSH
66135: LD_INT 0
66137: ST_TO_ADDR
// sOilTower := false ;
66138: LD_ADDR_EXP 99
66142: PUSH
66143: LD_INT 0
66145: ST_TO_ADDR
// sShovel := false ;
66146: LD_ADDR_EXP 100
66150: PUSH
66151: LD_INT 0
66153: ST_TO_ADDR
// sSheik := false ;
66154: LD_ADDR_EXP 101
66158: PUSH
66159: LD_INT 0
66161: ST_TO_ADDR
// sEarthquake := false ;
66162: LD_ADDR_EXP 103
66166: PUSH
66167: LD_INT 0
66169: ST_TO_ADDR
// sAI := false ;
66170: LD_ADDR_EXP 104
66174: PUSH
66175: LD_INT 0
66177: ST_TO_ADDR
// sCargo := false ;
66178: LD_ADDR_EXP 107
66182: PUSH
66183: LD_INT 0
66185: ST_TO_ADDR
// sDLaser := false ;
66186: LD_ADDR_EXP 108
66190: PUSH
66191: LD_INT 0
66193: ST_TO_ADDR
// sExchange := false ;
66194: LD_ADDR_EXP 109
66198: PUSH
66199: LD_INT 0
66201: ST_TO_ADDR
// sFac := false ;
66202: LD_ADDR_EXP 110
66206: PUSH
66207: LD_INT 0
66209: ST_TO_ADDR
// sPower := false ;
66210: LD_ADDR_EXP 111
66214: PUSH
66215: LD_INT 0
66217: ST_TO_ADDR
// sRandom := false ;
66218: LD_ADDR_EXP 112
66222: PUSH
66223: LD_INT 0
66225: ST_TO_ADDR
// sShield := false ;
66226: LD_ADDR_EXP 113
66230: PUSH
66231: LD_INT 0
66233: ST_TO_ADDR
// sTime := false ;
66234: LD_ADDR_EXP 114
66238: PUSH
66239: LD_INT 0
66241: ST_TO_ADDR
// sTools := false ;
66242: LD_ADDR_EXP 115
66246: PUSH
66247: LD_INT 0
66249: ST_TO_ADDR
// sSold := false ;
66250: LD_ADDR_EXP 80
66254: PUSH
66255: LD_INT 0
66257: ST_TO_ADDR
// sDiff := false ;
66258: LD_ADDR_EXP 81
66262: PUSH
66263: LD_INT 0
66265: ST_TO_ADDR
// sFog := false ;
66266: LD_ADDR_EXP 84
66270: PUSH
66271: LD_INT 0
66273: ST_TO_ADDR
// sReset := false ;
66274: LD_ADDR_EXP 85
66278: PUSH
66279: LD_INT 0
66281: ST_TO_ADDR
// sSun := false ;
66282: LD_ADDR_EXP 86
66286: PUSH
66287: LD_INT 0
66289: ST_TO_ADDR
// sTiger := false ;
66290: LD_ADDR_EXP 82
66294: PUSH
66295: LD_INT 0
66297: ST_TO_ADDR
// sBomb := false ;
66298: LD_ADDR_EXP 83
66302: PUSH
66303: LD_INT 0
66305: ST_TO_ADDR
// sWound := false ;
66306: LD_ADDR_EXP 91
66310: PUSH
66311: LD_INT 0
66313: ST_TO_ADDR
// sBetray := false ;
66314: LD_ADDR_EXP 95
66318: PUSH
66319: LD_INT 0
66321: ST_TO_ADDR
// sContamin := false ;
66322: LD_ADDR_EXP 96
66326: PUSH
66327: LD_INT 0
66329: ST_TO_ADDR
// sOil := false ;
66330: LD_ADDR_EXP 98
66334: PUSH
66335: LD_INT 0
66337: ST_TO_ADDR
// sStu := false ;
66338: LD_ADDR_EXP 102
66342: PUSH
66343: LD_INT 0
66345: ST_TO_ADDR
// sBazooka := false ;
66346: LD_ADDR_EXP 105
66350: PUSH
66351: LD_INT 0
66353: ST_TO_ADDR
// sMortar := false ;
66354: LD_ADDR_EXP 106
66358: PUSH
66359: LD_INT 0
66361: ST_TO_ADDR
// sRanger := false ;
66362: LD_ADDR_EXP 116
66366: PUSH
66367: LD_INT 0
66369: ST_TO_ADDR
// sComputer := false ;
66370: LD_ADDR_EXP 117
66374: PUSH
66375: LD_INT 0
66377: ST_TO_ADDR
// s30 := false ;
66378: LD_ADDR_EXP 118
66382: PUSH
66383: LD_INT 0
66385: ST_TO_ADDR
// s60 := false ;
66386: LD_ADDR_EXP 119
66390: PUSH
66391: LD_INT 0
66393: ST_TO_ADDR
// end ;
66394: LD_VAR 0 1
66398: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
66399: LD_INT 0
66401: PPUSH
66402: PPUSH
66403: PPUSH
66404: PPUSH
66405: PPUSH
66406: PPUSH
66407: PPUSH
// result := [ ] ;
66408: LD_ADDR_VAR 0 2
66412: PUSH
66413: EMPTY
66414: ST_TO_ADDR
// if campaign_id = 1 then
66415: LD_OWVAR 69
66419: PUSH
66420: LD_INT 1
66422: EQUAL
66423: IFFALSE 69589
// begin case mission_number of 1 :
66425: LD_OWVAR 70
66429: PUSH
66430: LD_INT 1
66432: DOUBLE
66433: EQUAL
66434: IFTRUE 66438
66436: GO 66514
66438: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
66439: LD_ADDR_VAR 0 2
66443: PUSH
66444: LD_INT 2
66446: PUSH
66447: LD_INT 4
66449: PUSH
66450: LD_INT 11
66452: PUSH
66453: LD_INT 12
66455: PUSH
66456: LD_INT 15
66458: PUSH
66459: LD_INT 16
66461: PUSH
66462: LD_INT 22
66464: PUSH
66465: LD_INT 23
66467: PUSH
66468: LD_INT 26
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 101
66484: PUSH
66485: LD_INT 102
66487: PUSH
66488: LD_INT 106
66490: PUSH
66491: LD_INT 116
66493: PUSH
66494: LD_INT 117
66496: PUSH
66497: LD_INT 118
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: ST_TO_ADDR
66512: GO 69587
66514: LD_INT 2
66516: DOUBLE
66517: EQUAL
66518: IFTRUE 66522
66520: GO 66606
66522: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
66523: LD_ADDR_VAR 0 2
66527: PUSH
66528: LD_INT 2
66530: PUSH
66531: LD_INT 4
66533: PUSH
66534: LD_INT 11
66536: PUSH
66537: LD_INT 12
66539: PUSH
66540: LD_INT 15
66542: PUSH
66543: LD_INT 16
66545: PUSH
66546: LD_INT 22
66548: PUSH
66549: LD_INT 23
66551: PUSH
66552: LD_INT 26
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 101
66568: PUSH
66569: LD_INT 102
66571: PUSH
66572: LD_INT 105
66574: PUSH
66575: LD_INT 106
66577: PUSH
66578: LD_INT 108
66580: PUSH
66581: LD_INT 116
66583: PUSH
66584: LD_INT 117
66586: PUSH
66587: LD_INT 118
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: ST_TO_ADDR
66604: GO 69587
66606: LD_INT 3
66608: DOUBLE
66609: EQUAL
66610: IFTRUE 66614
66612: GO 66702
66614: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
66615: LD_ADDR_VAR 0 2
66619: PUSH
66620: LD_INT 2
66622: PUSH
66623: LD_INT 4
66625: PUSH
66626: LD_INT 5
66628: PUSH
66629: LD_INT 11
66631: PUSH
66632: LD_INT 12
66634: PUSH
66635: LD_INT 15
66637: PUSH
66638: LD_INT 16
66640: PUSH
66641: LD_INT 22
66643: PUSH
66644: LD_INT 26
66646: PUSH
66647: LD_INT 36
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 101
66664: PUSH
66665: LD_INT 102
66667: PUSH
66668: LD_INT 105
66670: PUSH
66671: LD_INT 106
66673: PUSH
66674: LD_INT 108
66676: PUSH
66677: LD_INT 116
66679: PUSH
66680: LD_INT 117
66682: PUSH
66683: LD_INT 118
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: ST_TO_ADDR
66700: GO 69587
66702: LD_INT 4
66704: DOUBLE
66705: EQUAL
66706: IFTRUE 66710
66708: GO 66806
66710: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
66711: LD_ADDR_VAR 0 2
66715: PUSH
66716: LD_INT 2
66718: PUSH
66719: LD_INT 4
66721: PUSH
66722: LD_INT 5
66724: PUSH
66725: LD_INT 8
66727: PUSH
66728: LD_INT 11
66730: PUSH
66731: LD_INT 12
66733: PUSH
66734: LD_INT 15
66736: PUSH
66737: LD_INT 16
66739: PUSH
66740: LD_INT 22
66742: PUSH
66743: LD_INT 23
66745: PUSH
66746: LD_INT 26
66748: PUSH
66749: LD_INT 36
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 101
66768: PUSH
66769: LD_INT 102
66771: PUSH
66772: LD_INT 105
66774: PUSH
66775: LD_INT 106
66777: PUSH
66778: LD_INT 108
66780: PUSH
66781: LD_INT 116
66783: PUSH
66784: LD_INT 117
66786: PUSH
66787: LD_INT 118
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: ST_TO_ADDR
66804: GO 69587
66806: LD_INT 5
66808: DOUBLE
66809: EQUAL
66810: IFTRUE 66814
66812: GO 66926
66814: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
66815: LD_ADDR_VAR 0 2
66819: PUSH
66820: LD_INT 2
66822: PUSH
66823: LD_INT 4
66825: PUSH
66826: LD_INT 5
66828: PUSH
66829: LD_INT 6
66831: PUSH
66832: LD_INT 8
66834: PUSH
66835: LD_INT 11
66837: PUSH
66838: LD_INT 12
66840: PUSH
66841: LD_INT 15
66843: PUSH
66844: LD_INT 16
66846: PUSH
66847: LD_INT 22
66849: PUSH
66850: LD_INT 23
66852: PUSH
66853: LD_INT 25
66855: PUSH
66856: LD_INT 26
66858: PUSH
66859: LD_INT 36
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 101
66880: PUSH
66881: LD_INT 102
66883: PUSH
66884: LD_INT 105
66886: PUSH
66887: LD_INT 106
66889: PUSH
66890: LD_INT 108
66892: PUSH
66893: LD_INT 109
66895: PUSH
66896: LD_INT 112
66898: PUSH
66899: LD_INT 116
66901: PUSH
66902: LD_INT 117
66904: PUSH
66905: LD_INT 118
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: ST_TO_ADDR
66924: GO 69587
66926: LD_INT 6
66928: DOUBLE
66929: EQUAL
66930: IFTRUE 66934
66932: GO 67066
66934: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
66935: LD_ADDR_VAR 0 2
66939: PUSH
66940: LD_INT 2
66942: PUSH
66943: LD_INT 4
66945: PUSH
66946: LD_INT 5
66948: PUSH
66949: LD_INT 6
66951: PUSH
66952: LD_INT 8
66954: PUSH
66955: LD_INT 11
66957: PUSH
66958: LD_INT 12
66960: PUSH
66961: LD_INT 15
66963: PUSH
66964: LD_INT 16
66966: PUSH
66967: LD_INT 20
66969: PUSH
66970: LD_INT 21
66972: PUSH
66973: LD_INT 22
66975: PUSH
66976: LD_INT 23
66978: PUSH
66979: LD_INT 25
66981: PUSH
66982: LD_INT 26
66984: PUSH
66985: LD_INT 30
66987: PUSH
66988: LD_INT 31
66990: PUSH
66991: LD_INT 32
66993: PUSH
66994: LD_INT 36
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 101
67020: PUSH
67021: LD_INT 102
67023: PUSH
67024: LD_INT 105
67026: PUSH
67027: LD_INT 106
67029: PUSH
67030: LD_INT 108
67032: PUSH
67033: LD_INT 109
67035: PUSH
67036: LD_INT 112
67038: PUSH
67039: LD_INT 116
67041: PUSH
67042: LD_INT 117
67044: PUSH
67045: LD_INT 118
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: ST_TO_ADDR
67064: GO 69587
67066: LD_INT 7
67068: DOUBLE
67069: EQUAL
67070: IFTRUE 67074
67072: GO 67186
67074: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
67075: LD_ADDR_VAR 0 2
67079: PUSH
67080: LD_INT 2
67082: PUSH
67083: LD_INT 4
67085: PUSH
67086: LD_INT 5
67088: PUSH
67089: LD_INT 7
67091: PUSH
67092: LD_INT 11
67094: PUSH
67095: LD_INT 12
67097: PUSH
67098: LD_INT 15
67100: PUSH
67101: LD_INT 16
67103: PUSH
67104: LD_INT 20
67106: PUSH
67107: LD_INT 21
67109: PUSH
67110: LD_INT 22
67112: PUSH
67113: LD_INT 23
67115: PUSH
67116: LD_INT 25
67118: PUSH
67119: LD_INT 26
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 101
67140: PUSH
67141: LD_INT 102
67143: PUSH
67144: LD_INT 103
67146: PUSH
67147: LD_INT 105
67149: PUSH
67150: LD_INT 106
67152: PUSH
67153: LD_INT 108
67155: PUSH
67156: LD_INT 112
67158: PUSH
67159: LD_INT 116
67161: PUSH
67162: LD_INT 117
67164: PUSH
67165: LD_INT 118
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: ST_TO_ADDR
67184: GO 69587
67186: LD_INT 8
67188: DOUBLE
67189: EQUAL
67190: IFTRUE 67194
67192: GO 67334
67194: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
67195: LD_ADDR_VAR 0 2
67199: PUSH
67200: LD_INT 2
67202: PUSH
67203: LD_INT 4
67205: PUSH
67206: LD_INT 5
67208: PUSH
67209: LD_INT 6
67211: PUSH
67212: LD_INT 7
67214: PUSH
67215: LD_INT 8
67217: PUSH
67218: LD_INT 11
67220: PUSH
67221: LD_INT 12
67223: PUSH
67224: LD_INT 15
67226: PUSH
67227: LD_INT 16
67229: PUSH
67230: LD_INT 20
67232: PUSH
67233: LD_INT 21
67235: PUSH
67236: LD_INT 22
67238: PUSH
67239: LD_INT 23
67241: PUSH
67242: LD_INT 25
67244: PUSH
67245: LD_INT 26
67247: PUSH
67248: LD_INT 30
67250: PUSH
67251: LD_INT 31
67253: PUSH
67254: LD_INT 32
67256: PUSH
67257: LD_INT 36
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 101
67284: PUSH
67285: LD_INT 102
67287: PUSH
67288: LD_INT 103
67290: PUSH
67291: LD_INT 105
67293: PUSH
67294: LD_INT 106
67296: PUSH
67297: LD_INT 108
67299: PUSH
67300: LD_INT 109
67302: PUSH
67303: LD_INT 112
67305: PUSH
67306: LD_INT 116
67308: PUSH
67309: LD_INT 117
67311: PUSH
67312: LD_INT 118
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: ST_TO_ADDR
67332: GO 69587
67334: LD_INT 9
67336: DOUBLE
67337: EQUAL
67338: IFTRUE 67342
67340: GO 67490
67342: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
67343: LD_ADDR_VAR 0 2
67347: PUSH
67348: LD_INT 2
67350: PUSH
67351: LD_INT 4
67353: PUSH
67354: LD_INT 5
67356: PUSH
67357: LD_INT 6
67359: PUSH
67360: LD_INT 7
67362: PUSH
67363: LD_INT 8
67365: PUSH
67366: LD_INT 11
67368: PUSH
67369: LD_INT 12
67371: PUSH
67372: LD_INT 15
67374: PUSH
67375: LD_INT 16
67377: PUSH
67378: LD_INT 20
67380: PUSH
67381: LD_INT 21
67383: PUSH
67384: LD_INT 22
67386: PUSH
67387: LD_INT 23
67389: PUSH
67390: LD_INT 25
67392: PUSH
67393: LD_INT 26
67395: PUSH
67396: LD_INT 28
67398: PUSH
67399: LD_INT 30
67401: PUSH
67402: LD_INT 31
67404: PUSH
67405: LD_INT 32
67407: PUSH
67408: LD_INT 36
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 101
67436: PUSH
67437: LD_INT 102
67439: PUSH
67440: LD_INT 103
67442: PUSH
67443: LD_INT 105
67445: PUSH
67446: LD_INT 106
67448: PUSH
67449: LD_INT 108
67451: PUSH
67452: LD_INT 109
67454: PUSH
67455: LD_INT 112
67457: PUSH
67458: LD_INT 114
67460: PUSH
67461: LD_INT 116
67463: PUSH
67464: LD_INT 117
67466: PUSH
67467: LD_INT 118
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: ST_TO_ADDR
67488: GO 69587
67490: LD_INT 10
67492: DOUBLE
67493: EQUAL
67494: IFTRUE 67498
67496: GO 67694
67498: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
67499: LD_ADDR_VAR 0 2
67503: PUSH
67504: LD_INT 2
67506: PUSH
67507: LD_INT 4
67509: PUSH
67510: LD_INT 5
67512: PUSH
67513: LD_INT 6
67515: PUSH
67516: LD_INT 7
67518: PUSH
67519: LD_INT 8
67521: PUSH
67522: LD_INT 9
67524: PUSH
67525: LD_INT 10
67527: PUSH
67528: LD_INT 11
67530: PUSH
67531: LD_INT 12
67533: PUSH
67534: LD_INT 13
67536: PUSH
67537: LD_INT 14
67539: PUSH
67540: LD_INT 15
67542: PUSH
67543: LD_INT 16
67545: PUSH
67546: LD_INT 17
67548: PUSH
67549: LD_INT 18
67551: PUSH
67552: LD_INT 19
67554: PUSH
67555: LD_INT 20
67557: PUSH
67558: LD_INT 21
67560: PUSH
67561: LD_INT 22
67563: PUSH
67564: LD_INT 23
67566: PUSH
67567: LD_INT 24
67569: PUSH
67570: LD_INT 25
67572: PUSH
67573: LD_INT 26
67575: PUSH
67576: LD_INT 28
67578: PUSH
67579: LD_INT 30
67581: PUSH
67582: LD_INT 31
67584: PUSH
67585: LD_INT 32
67587: PUSH
67588: LD_INT 36
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 101
67624: PUSH
67625: LD_INT 102
67627: PUSH
67628: LD_INT 103
67630: PUSH
67631: LD_INT 104
67633: PUSH
67634: LD_INT 105
67636: PUSH
67637: LD_INT 106
67639: PUSH
67640: LD_INT 107
67642: PUSH
67643: LD_INT 108
67645: PUSH
67646: LD_INT 109
67648: PUSH
67649: LD_INT 110
67651: PUSH
67652: LD_INT 111
67654: PUSH
67655: LD_INT 112
67657: PUSH
67658: LD_INT 114
67660: PUSH
67661: LD_INT 116
67663: PUSH
67664: LD_INT 117
67666: PUSH
67667: LD_INT 118
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: ST_TO_ADDR
67692: GO 69587
67694: LD_INT 11
67696: DOUBLE
67697: EQUAL
67698: IFTRUE 67702
67700: GO 67906
67702: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
67703: LD_ADDR_VAR 0 2
67707: PUSH
67708: LD_INT 2
67710: PUSH
67711: LD_INT 3
67713: PUSH
67714: LD_INT 4
67716: PUSH
67717: LD_INT 5
67719: PUSH
67720: LD_INT 6
67722: PUSH
67723: LD_INT 7
67725: PUSH
67726: LD_INT 8
67728: PUSH
67729: LD_INT 9
67731: PUSH
67732: LD_INT 10
67734: PUSH
67735: LD_INT 11
67737: PUSH
67738: LD_INT 12
67740: PUSH
67741: LD_INT 13
67743: PUSH
67744: LD_INT 14
67746: PUSH
67747: LD_INT 15
67749: PUSH
67750: LD_INT 16
67752: PUSH
67753: LD_INT 17
67755: PUSH
67756: LD_INT 18
67758: PUSH
67759: LD_INT 19
67761: PUSH
67762: LD_INT 20
67764: PUSH
67765: LD_INT 21
67767: PUSH
67768: LD_INT 22
67770: PUSH
67771: LD_INT 23
67773: PUSH
67774: LD_INT 24
67776: PUSH
67777: LD_INT 25
67779: PUSH
67780: LD_INT 26
67782: PUSH
67783: LD_INT 28
67785: PUSH
67786: LD_INT 30
67788: PUSH
67789: LD_INT 31
67791: PUSH
67792: LD_INT 32
67794: PUSH
67795: LD_INT 34
67797: PUSH
67798: LD_INT 36
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 101
67836: PUSH
67837: LD_INT 102
67839: PUSH
67840: LD_INT 103
67842: PUSH
67843: LD_INT 104
67845: PUSH
67846: LD_INT 105
67848: PUSH
67849: LD_INT 106
67851: PUSH
67852: LD_INT 107
67854: PUSH
67855: LD_INT 108
67857: PUSH
67858: LD_INT 109
67860: PUSH
67861: LD_INT 110
67863: PUSH
67864: LD_INT 111
67866: PUSH
67867: LD_INT 112
67869: PUSH
67870: LD_INT 114
67872: PUSH
67873: LD_INT 116
67875: PUSH
67876: LD_INT 117
67878: PUSH
67879: LD_INT 118
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: ST_TO_ADDR
67904: GO 69587
67906: LD_INT 12
67908: DOUBLE
67909: EQUAL
67910: IFTRUE 67914
67912: GO 68134
67914: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
67915: LD_ADDR_VAR 0 2
67919: PUSH
67920: LD_INT 1
67922: PUSH
67923: LD_INT 2
67925: PUSH
67926: LD_INT 3
67928: PUSH
67929: LD_INT 4
67931: PUSH
67932: LD_INT 5
67934: PUSH
67935: LD_INT 6
67937: PUSH
67938: LD_INT 7
67940: PUSH
67941: LD_INT 8
67943: PUSH
67944: LD_INT 9
67946: PUSH
67947: LD_INT 10
67949: PUSH
67950: LD_INT 11
67952: PUSH
67953: LD_INT 12
67955: PUSH
67956: LD_INT 13
67958: PUSH
67959: LD_INT 14
67961: PUSH
67962: LD_INT 15
67964: PUSH
67965: LD_INT 16
67967: PUSH
67968: LD_INT 17
67970: PUSH
67971: LD_INT 18
67973: PUSH
67974: LD_INT 19
67976: PUSH
67977: LD_INT 20
67979: PUSH
67980: LD_INT 21
67982: PUSH
67983: LD_INT 22
67985: PUSH
67986: LD_INT 23
67988: PUSH
67989: LD_INT 24
67991: PUSH
67992: LD_INT 25
67994: PUSH
67995: LD_INT 26
67997: PUSH
67998: LD_INT 27
68000: PUSH
68001: LD_INT 28
68003: PUSH
68004: LD_INT 30
68006: PUSH
68007: LD_INT 31
68009: PUSH
68010: LD_INT 32
68012: PUSH
68013: LD_INT 33
68015: PUSH
68016: LD_INT 34
68018: PUSH
68019: LD_INT 36
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 101
68060: PUSH
68061: LD_INT 102
68063: PUSH
68064: LD_INT 103
68066: PUSH
68067: LD_INT 104
68069: PUSH
68070: LD_INT 105
68072: PUSH
68073: LD_INT 106
68075: PUSH
68076: LD_INT 107
68078: PUSH
68079: LD_INT 108
68081: PUSH
68082: LD_INT 109
68084: PUSH
68085: LD_INT 110
68087: PUSH
68088: LD_INT 111
68090: PUSH
68091: LD_INT 112
68093: PUSH
68094: LD_INT 113
68096: PUSH
68097: LD_INT 114
68099: PUSH
68100: LD_INT 116
68102: PUSH
68103: LD_INT 117
68105: PUSH
68106: LD_INT 118
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: ST_TO_ADDR
68132: GO 69587
68134: LD_INT 13
68136: DOUBLE
68137: EQUAL
68138: IFTRUE 68142
68140: GO 68350
68142: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
68143: LD_ADDR_VAR 0 2
68147: PUSH
68148: LD_INT 1
68150: PUSH
68151: LD_INT 2
68153: PUSH
68154: LD_INT 3
68156: PUSH
68157: LD_INT 4
68159: PUSH
68160: LD_INT 5
68162: PUSH
68163: LD_INT 8
68165: PUSH
68166: LD_INT 9
68168: PUSH
68169: LD_INT 10
68171: PUSH
68172: LD_INT 11
68174: PUSH
68175: LD_INT 12
68177: PUSH
68178: LD_INT 14
68180: PUSH
68181: LD_INT 15
68183: PUSH
68184: LD_INT 16
68186: PUSH
68187: LD_INT 17
68189: PUSH
68190: LD_INT 18
68192: PUSH
68193: LD_INT 19
68195: PUSH
68196: LD_INT 20
68198: PUSH
68199: LD_INT 21
68201: PUSH
68202: LD_INT 22
68204: PUSH
68205: LD_INT 23
68207: PUSH
68208: LD_INT 24
68210: PUSH
68211: LD_INT 25
68213: PUSH
68214: LD_INT 26
68216: PUSH
68217: LD_INT 27
68219: PUSH
68220: LD_INT 28
68222: PUSH
68223: LD_INT 30
68225: PUSH
68226: LD_INT 31
68228: PUSH
68229: LD_INT 32
68231: PUSH
68232: LD_INT 33
68234: PUSH
68235: LD_INT 34
68237: PUSH
68238: LD_INT 36
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 101
68276: PUSH
68277: LD_INT 102
68279: PUSH
68280: LD_INT 103
68282: PUSH
68283: LD_INT 104
68285: PUSH
68286: LD_INT 105
68288: PUSH
68289: LD_INT 106
68291: PUSH
68292: LD_INT 107
68294: PUSH
68295: LD_INT 108
68297: PUSH
68298: LD_INT 109
68300: PUSH
68301: LD_INT 110
68303: PUSH
68304: LD_INT 111
68306: PUSH
68307: LD_INT 112
68309: PUSH
68310: LD_INT 113
68312: PUSH
68313: LD_INT 114
68315: PUSH
68316: LD_INT 116
68318: PUSH
68319: LD_INT 117
68321: PUSH
68322: LD_INT 118
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: ST_TO_ADDR
68348: GO 69587
68350: LD_INT 14
68352: DOUBLE
68353: EQUAL
68354: IFTRUE 68358
68356: GO 68582
68358: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
68359: LD_ADDR_VAR 0 2
68363: PUSH
68364: LD_INT 1
68366: PUSH
68367: LD_INT 2
68369: PUSH
68370: LD_INT 3
68372: PUSH
68373: LD_INT 4
68375: PUSH
68376: LD_INT 5
68378: PUSH
68379: LD_INT 6
68381: PUSH
68382: LD_INT 7
68384: PUSH
68385: LD_INT 8
68387: PUSH
68388: LD_INT 9
68390: PUSH
68391: LD_INT 10
68393: PUSH
68394: LD_INT 11
68396: PUSH
68397: LD_INT 12
68399: PUSH
68400: LD_INT 13
68402: PUSH
68403: LD_INT 14
68405: PUSH
68406: LD_INT 15
68408: PUSH
68409: LD_INT 16
68411: PUSH
68412: LD_INT 17
68414: PUSH
68415: LD_INT 18
68417: PUSH
68418: LD_INT 19
68420: PUSH
68421: LD_INT 20
68423: PUSH
68424: LD_INT 21
68426: PUSH
68427: LD_INT 22
68429: PUSH
68430: LD_INT 23
68432: PUSH
68433: LD_INT 24
68435: PUSH
68436: LD_INT 25
68438: PUSH
68439: LD_INT 26
68441: PUSH
68442: LD_INT 27
68444: PUSH
68445: LD_INT 28
68447: PUSH
68448: LD_INT 29
68450: PUSH
68451: LD_INT 30
68453: PUSH
68454: LD_INT 31
68456: PUSH
68457: LD_INT 32
68459: PUSH
68460: LD_INT 33
68462: PUSH
68463: LD_INT 34
68465: PUSH
68466: LD_INT 36
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 101
68508: PUSH
68509: LD_INT 102
68511: PUSH
68512: LD_INT 103
68514: PUSH
68515: LD_INT 104
68517: PUSH
68518: LD_INT 105
68520: PUSH
68521: LD_INT 106
68523: PUSH
68524: LD_INT 107
68526: PUSH
68527: LD_INT 108
68529: PUSH
68530: LD_INT 109
68532: PUSH
68533: LD_INT 110
68535: PUSH
68536: LD_INT 111
68538: PUSH
68539: LD_INT 112
68541: PUSH
68542: LD_INT 113
68544: PUSH
68545: LD_INT 114
68547: PUSH
68548: LD_INT 116
68550: PUSH
68551: LD_INT 117
68553: PUSH
68554: LD_INT 118
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: ST_TO_ADDR
68580: GO 69587
68582: LD_INT 15
68584: DOUBLE
68585: EQUAL
68586: IFTRUE 68590
68588: GO 68814
68590: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
68591: LD_ADDR_VAR 0 2
68595: PUSH
68596: LD_INT 1
68598: PUSH
68599: LD_INT 2
68601: PUSH
68602: LD_INT 3
68604: PUSH
68605: LD_INT 4
68607: PUSH
68608: LD_INT 5
68610: PUSH
68611: LD_INT 6
68613: PUSH
68614: LD_INT 7
68616: PUSH
68617: LD_INT 8
68619: PUSH
68620: LD_INT 9
68622: PUSH
68623: LD_INT 10
68625: PUSH
68626: LD_INT 11
68628: PUSH
68629: LD_INT 12
68631: PUSH
68632: LD_INT 13
68634: PUSH
68635: LD_INT 14
68637: PUSH
68638: LD_INT 15
68640: PUSH
68641: LD_INT 16
68643: PUSH
68644: LD_INT 17
68646: PUSH
68647: LD_INT 18
68649: PUSH
68650: LD_INT 19
68652: PUSH
68653: LD_INT 20
68655: PUSH
68656: LD_INT 21
68658: PUSH
68659: LD_INT 22
68661: PUSH
68662: LD_INT 23
68664: PUSH
68665: LD_INT 24
68667: PUSH
68668: LD_INT 25
68670: PUSH
68671: LD_INT 26
68673: PUSH
68674: LD_INT 27
68676: PUSH
68677: LD_INT 28
68679: PUSH
68680: LD_INT 29
68682: PUSH
68683: LD_INT 30
68685: PUSH
68686: LD_INT 31
68688: PUSH
68689: LD_INT 32
68691: PUSH
68692: LD_INT 33
68694: PUSH
68695: LD_INT 34
68697: PUSH
68698: LD_INT 36
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 101
68740: PUSH
68741: LD_INT 102
68743: PUSH
68744: LD_INT 103
68746: PUSH
68747: LD_INT 104
68749: PUSH
68750: LD_INT 105
68752: PUSH
68753: LD_INT 106
68755: PUSH
68756: LD_INT 107
68758: PUSH
68759: LD_INT 108
68761: PUSH
68762: LD_INT 109
68764: PUSH
68765: LD_INT 110
68767: PUSH
68768: LD_INT 111
68770: PUSH
68771: LD_INT 112
68773: PUSH
68774: LD_INT 113
68776: PUSH
68777: LD_INT 114
68779: PUSH
68780: LD_INT 116
68782: PUSH
68783: LD_INT 117
68785: PUSH
68786: LD_INT 118
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: ST_TO_ADDR
68812: GO 69587
68814: LD_INT 16
68816: DOUBLE
68817: EQUAL
68818: IFTRUE 68822
68820: GO 68958
68822: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
68823: LD_ADDR_VAR 0 2
68827: PUSH
68828: LD_INT 2
68830: PUSH
68831: LD_INT 4
68833: PUSH
68834: LD_INT 5
68836: PUSH
68837: LD_INT 7
68839: PUSH
68840: LD_INT 11
68842: PUSH
68843: LD_INT 12
68845: PUSH
68846: LD_INT 15
68848: PUSH
68849: LD_INT 16
68851: PUSH
68852: LD_INT 20
68854: PUSH
68855: LD_INT 21
68857: PUSH
68858: LD_INT 22
68860: PUSH
68861: LD_INT 23
68863: PUSH
68864: LD_INT 25
68866: PUSH
68867: LD_INT 26
68869: PUSH
68870: LD_INT 30
68872: PUSH
68873: LD_INT 31
68875: PUSH
68876: LD_INT 32
68878: PUSH
68879: LD_INT 33
68881: PUSH
68882: LD_INT 34
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 101
68908: PUSH
68909: LD_INT 102
68911: PUSH
68912: LD_INT 103
68914: PUSH
68915: LD_INT 106
68917: PUSH
68918: LD_INT 108
68920: PUSH
68921: LD_INT 112
68923: PUSH
68924: LD_INT 113
68926: PUSH
68927: LD_INT 114
68929: PUSH
68930: LD_INT 116
68932: PUSH
68933: LD_INT 117
68935: PUSH
68936: LD_INT 118
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: ST_TO_ADDR
68956: GO 69587
68958: LD_INT 17
68960: DOUBLE
68961: EQUAL
68962: IFTRUE 68966
68964: GO 69190
68966: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
68967: LD_ADDR_VAR 0 2
68971: PUSH
68972: LD_INT 1
68974: PUSH
68975: LD_INT 2
68977: PUSH
68978: LD_INT 3
68980: PUSH
68981: LD_INT 4
68983: PUSH
68984: LD_INT 5
68986: PUSH
68987: LD_INT 6
68989: PUSH
68990: LD_INT 7
68992: PUSH
68993: LD_INT 8
68995: PUSH
68996: LD_INT 9
68998: PUSH
68999: LD_INT 10
69001: PUSH
69002: LD_INT 11
69004: PUSH
69005: LD_INT 12
69007: PUSH
69008: LD_INT 13
69010: PUSH
69011: LD_INT 14
69013: PUSH
69014: LD_INT 15
69016: PUSH
69017: LD_INT 16
69019: PUSH
69020: LD_INT 17
69022: PUSH
69023: LD_INT 18
69025: PUSH
69026: LD_INT 19
69028: PUSH
69029: LD_INT 20
69031: PUSH
69032: LD_INT 21
69034: PUSH
69035: LD_INT 22
69037: PUSH
69038: LD_INT 23
69040: PUSH
69041: LD_INT 24
69043: PUSH
69044: LD_INT 25
69046: PUSH
69047: LD_INT 26
69049: PUSH
69050: LD_INT 27
69052: PUSH
69053: LD_INT 28
69055: PUSH
69056: LD_INT 29
69058: PUSH
69059: LD_INT 30
69061: PUSH
69062: LD_INT 31
69064: PUSH
69065: LD_INT 32
69067: PUSH
69068: LD_INT 33
69070: PUSH
69071: LD_INT 34
69073: PUSH
69074: LD_INT 36
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 101
69116: PUSH
69117: LD_INT 102
69119: PUSH
69120: LD_INT 103
69122: PUSH
69123: LD_INT 104
69125: PUSH
69126: LD_INT 105
69128: PUSH
69129: LD_INT 106
69131: PUSH
69132: LD_INT 107
69134: PUSH
69135: LD_INT 108
69137: PUSH
69138: LD_INT 109
69140: PUSH
69141: LD_INT 110
69143: PUSH
69144: LD_INT 111
69146: PUSH
69147: LD_INT 112
69149: PUSH
69150: LD_INT 113
69152: PUSH
69153: LD_INT 114
69155: PUSH
69156: LD_INT 116
69158: PUSH
69159: LD_INT 117
69161: PUSH
69162: LD_INT 118
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: ST_TO_ADDR
69188: GO 69587
69190: LD_INT 18
69192: DOUBLE
69193: EQUAL
69194: IFTRUE 69198
69196: GO 69346
69198: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
69199: LD_ADDR_VAR 0 2
69203: PUSH
69204: LD_INT 2
69206: PUSH
69207: LD_INT 4
69209: PUSH
69210: LD_INT 5
69212: PUSH
69213: LD_INT 7
69215: PUSH
69216: LD_INT 11
69218: PUSH
69219: LD_INT 12
69221: PUSH
69222: LD_INT 15
69224: PUSH
69225: LD_INT 16
69227: PUSH
69228: LD_INT 20
69230: PUSH
69231: LD_INT 21
69233: PUSH
69234: LD_INT 22
69236: PUSH
69237: LD_INT 23
69239: PUSH
69240: LD_INT 25
69242: PUSH
69243: LD_INT 26
69245: PUSH
69246: LD_INT 30
69248: PUSH
69249: LD_INT 31
69251: PUSH
69252: LD_INT 32
69254: PUSH
69255: LD_INT 33
69257: PUSH
69258: LD_INT 34
69260: PUSH
69261: LD_INT 35
69263: PUSH
69264: LD_INT 36
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 101
69292: PUSH
69293: LD_INT 102
69295: PUSH
69296: LD_INT 103
69298: PUSH
69299: LD_INT 106
69301: PUSH
69302: LD_INT 108
69304: PUSH
69305: LD_INT 112
69307: PUSH
69308: LD_INT 113
69310: PUSH
69311: LD_INT 114
69313: PUSH
69314: LD_INT 115
69316: PUSH
69317: LD_INT 116
69319: PUSH
69320: LD_INT 117
69322: PUSH
69323: LD_INT 118
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: ST_TO_ADDR
69344: GO 69587
69346: LD_INT 19
69348: DOUBLE
69349: EQUAL
69350: IFTRUE 69354
69352: GO 69586
69354: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
69355: LD_ADDR_VAR 0 2
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: LD_INT 2
69365: PUSH
69366: LD_INT 3
69368: PUSH
69369: LD_INT 4
69371: PUSH
69372: LD_INT 5
69374: PUSH
69375: LD_INT 6
69377: PUSH
69378: LD_INT 7
69380: PUSH
69381: LD_INT 8
69383: PUSH
69384: LD_INT 9
69386: PUSH
69387: LD_INT 10
69389: PUSH
69390: LD_INT 11
69392: PUSH
69393: LD_INT 12
69395: PUSH
69396: LD_INT 13
69398: PUSH
69399: LD_INT 14
69401: PUSH
69402: LD_INT 15
69404: PUSH
69405: LD_INT 16
69407: PUSH
69408: LD_INT 17
69410: PUSH
69411: LD_INT 18
69413: PUSH
69414: LD_INT 19
69416: PUSH
69417: LD_INT 20
69419: PUSH
69420: LD_INT 21
69422: PUSH
69423: LD_INT 22
69425: PUSH
69426: LD_INT 23
69428: PUSH
69429: LD_INT 24
69431: PUSH
69432: LD_INT 25
69434: PUSH
69435: LD_INT 26
69437: PUSH
69438: LD_INT 27
69440: PUSH
69441: LD_INT 28
69443: PUSH
69444: LD_INT 29
69446: PUSH
69447: LD_INT 30
69449: PUSH
69450: LD_INT 31
69452: PUSH
69453: LD_INT 32
69455: PUSH
69456: LD_INT 33
69458: PUSH
69459: LD_INT 34
69461: PUSH
69462: LD_INT 35
69464: PUSH
69465: LD_INT 36
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 101
69508: PUSH
69509: LD_INT 102
69511: PUSH
69512: LD_INT 103
69514: PUSH
69515: LD_INT 104
69517: PUSH
69518: LD_INT 105
69520: PUSH
69521: LD_INT 106
69523: PUSH
69524: LD_INT 107
69526: PUSH
69527: LD_INT 108
69529: PUSH
69530: LD_INT 109
69532: PUSH
69533: LD_INT 110
69535: PUSH
69536: LD_INT 111
69538: PUSH
69539: LD_INT 112
69541: PUSH
69542: LD_INT 113
69544: PUSH
69545: LD_INT 114
69547: PUSH
69548: LD_INT 115
69550: PUSH
69551: LD_INT 116
69553: PUSH
69554: LD_INT 117
69556: PUSH
69557: LD_INT 118
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: ST_TO_ADDR
69584: GO 69587
69586: POP
// end else
69587: GO 69818
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
69589: LD_ADDR_VAR 0 2
69593: PUSH
69594: LD_INT 1
69596: PUSH
69597: LD_INT 2
69599: PUSH
69600: LD_INT 3
69602: PUSH
69603: LD_INT 4
69605: PUSH
69606: LD_INT 5
69608: PUSH
69609: LD_INT 6
69611: PUSH
69612: LD_INT 7
69614: PUSH
69615: LD_INT 8
69617: PUSH
69618: LD_INT 9
69620: PUSH
69621: LD_INT 10
69623: PUSH
69624: LD_INT 11
69626: PUSH
69627: LD_INT 12
69629: PUSH
69630: LD_INT 13
69632: PUSH
69633: LD_INT 14
69635: PUSH
69636: LD_INT 15
69638: PUSH
69639: LD_INT 16
69641: PUSH
69642: LD_INT 17
69644: PUSH
69645: LD_INT 18
69647: PUSH
69648: LD_INT 19
69650: PUSH
69651: LD_INT 20
69653: PUSH
69654: LD_INT 21
69656: PUSH
69657: LD_INT 22
69659: PUSH
69660: LD_INT 23
69662: PUSH
69663: LD_INT 24
69665: PUSH
69666: LD_INT 25
69668: PUSH
69669: LD_INT 26
69671: PUSH
69672: LD_INT 27
69674: PUSH
69675: LD_INT 28
69677: PUSH
69678: LD_INT 29
69680: PUSH
69681: LD_INT 30
69683: PUSH
69684: LD_INT 31
69686: PUSH
69687: LD_INT 32
69689: PUSH
69690: LD_INT 33
69692: PUSH
69693: LD_INT 34
69695: PUSH
69696: LD_INT 35
69698: PUSH
69699: LD_INT 36
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 101
69742: PUSH
69743: LD_INT 102
69745: PUSH
69746: LD_INT 103
69748: PUSH
69749: LD_INT 104
69751: PUSH
69752: LD_INT 105
69754: PUSH
69755: LD_INT 106
69757: PUSH
69758: LD_INT 107
69760: PUSH
69761: LD_INT 108
69763: PUSH
69764: LD_INT 109
69766: PUSH
69767: LD_INT 110
69769: PUSH
69770: LD_INT 111
69772: PUSH
69773: LD_INT 112
69775: PUSH
69776: LD_INT 113
69778: PUSH
69779: LD_INT 114
69781: PUSH
69782: LD_INT 115
69784: PUSH
69785: LD_INT 116
69787: PUSH
69788: LD_INT 117
69790: PUSH
69791: LD_INT 118
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: ST_TO_ADDR
// if result then
69818: LD_VAR 0 2
69822: IFFALSE 70608
// begin normal :=  ;
69824: LD_ADDR_VAR 0 5
69828: PUSH
69829: LD_STRING 
69831: ST_TO_ADDR
// hardcore :=  ;
69832: LD_ADDR_VAR 0 6
69836: PUSH
69837: LD_STRING 
69839: ST_TO_ADDR
// active :=  ;
69840: LD_ADDR_VAR 0 7
69844: PUSH
69845: LD_STRING 
69847: ST_TO_ADDR
// for i = 1 to normalCounter do
69848: LD_ADDR_VAR 0 8
69852: PUSH
69853: DOUBLE
69854: LD_INT 1
69856: DEC
69857: ST_TO_ADDR
69858: LD_EXP 64
69862: PUSH
69863: FOR_TO
69864: IFFALSE 69965
// begin tmp := 0 ;
69866: LD_ADDR_VAR 0 3
69870: PUSH
69871: LD_STRING 0
69873: ST_TO_ADDR
// if result [ 1 ] then
69874: LD_VAR 0 2
69878: PUSH
69879: LD_INT 1
69881: ARRAY
69882: IFFALSE 69947
// if result [ 1 ] [ 1 ] = i then
69884: LD_VAR 0 2
69888: PUSH
69889: LD_INT 1
69891: ARRAY
69892: PUSH
69893: LD_INT 1
69895: ARRAY
69896: PUSH
69897: LD_VAR 0 8
69901: EQUAL
69902: IFFALSE 69947
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
69904: LD_ADDR_VAR 0 2
69908: PUSH
69909: LD_VAR 0 2
69913: PPUSH
69914: LD_INT 1
69916: PPUSH
69917: LD_VAR 0 2
69921: PUSH
69922: LD_INT 1
69924: ARRAY
69925: PPUSH
69926: LD_INT 1
69928: PPUSH
69929: CALL_OW 3
69933: PPUSH
69934: CALL_OW 1
69938: ST_TO_ADDR
// tmp := 1 ;
69939: LD_ADDR_VAR 0 3
69943: PUSH
69944: LD_STRING 1
69946: ST_TO_ADDR
// end ; normal := normal & tmp ;
69947: LD_ADDR_VAR 0 5
69951: PUSH
69952: LD_VAR 0 5
69956: PUSH
69957: LD_VAR 0 3
69961: STR
69962: ST_TO_ADDR
// end ;
69963: GO 69863
69965: POP
69966: POP
// for i = 1 to hardcoreCounter do
69967: LD_ADDR_VAR 0 8
69971: PUSH
69972: DOUBLE
69973: LD_INT 1
69975: DEC
69976: ST_TO_ADDR
69977: LD_EXP 65
69981: PUSH
69982: FOR_TO
69983: IFFALSE 70088
// begin tmp := 0 ;
69985: LD_ADDR_VAR 0 3
69989: PUSH
69990: LD_STRING 0
69992: ST_TO_ADDR
// if result [ 2 ] then
69993: LD_VAR 0 2
69997: PUSH
69998: LD_INT 2
70000: ARRAY
70001: IFFALSE 70070
// if result [ 2 ] [ 1 ] = 100 + i then
70003: LD_VAR 0 2
70007: PUSH
70008: LD_INT 2
70010: ARRAY
70011: PUSH
70012: LD_INT 1
70014: ARRAY
70015: PUSH
70016: LD_INT 100
70018: PUSH
70019: LD_VAR 0 8
70023: PLUS
70024: EQUAL
70025: IFFALSE 70070
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
70027: LD_ADDR_VAR 0 2
70031: PUSH
70032: LD_VAR 0 2
70036: PPUSH
70037: LD_INT 2
70039: PPUSH
70040: LD_VAR 0 2
70044: PUSH
70045: LD_INT 2
70047: ARRAY
70048: PPUSH
70049: LD_INT 1
70051: PPUSH
70052: CALL_OW 3
70056: PPUSH
70057: CALL_OW 1
70061: ST_TO_ADDR
// tmp := 1 ;
70062: LD_ADDR_VAR 0 3
70066: PUSH
70067: LD_STRING 1
70069: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
70070: LD_ADDR_VAR 0 6
70074: PUSH
70075: LD_VAR 0 6
70079: PUSH
70080: LD_VAR 0 3
70084: STR
70085: ST_TO_ADDR
// end ;
70086: GO 69982
70088: POP
70089: POP
// if isGameLoad then
70090: LD_VAR 0 1
70094: IFFALSE 70569
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
70096: LD_ADDR_VAR 0 4
70100: PUSH
70101: LD_EXP 68
70105: PUSH
70106: LD_EXP 67
70110: PUSH
70111: LD_EXP 69
70115: PUSH
70116: LD_EXP 66
70120: PUSH
70121: LD_EXP 70
70125: PUSH
70126: LD_EXP 71
70130: PUSH
70131: LD_EXP 72
70135: PUSH
70136: LD_EXP 73
70140: PUSH
70141: LD_EXP 74
70145: PUSH
70146: LD_EXP 75
70150: PUSH
70151: LD_EXP 76
70155: PUSH
70156: LD_EXP 77
70160: PUSH
70161: LD_EXP 78
70165: PUSH
70166: LD_EXP 79
70170: PUSH
70171: LD_EXP 87
70175: PUSH
70176: LD_EXP 88
70180: PUSH
70181: LD_EXP 89
70185: PUSH
70186: LD_EXP 90
70190: PUSH
70191: LD_EXP 92
70195: PUSH
70196: LD_EXP 93
70200: PUSH
70201: LD_EXP 94
70205: PUSH
70206: LD_EXP 97
70210: PUSH
70211: LD_EXP 99
70215: PUSH
70216: LD_EXP 100
70220: PUSH
70221: LD_EXP 101
70225: PUSH
70226: LD_EXP 103
70230: PUSH
70231: LD_EXP 104
70235: PUSH
70236: LD_EXP 107
70240: PUSH
70241: LD_EXP 108
70245: PUSH
70246: LD_EXP 109
70250: PUSH
70251: LD_EXP 110
70255: PUSH
70256: LD_EXP 111
70260: PUSH
70261: LD_EXP 112
70265: PUSH
70266: LD_EXP 113
70270: PUSH
70271: LD_EXP 114
70275: PUSH
70276: LD_EXP 115
70280: PUSH
70281: LD_EXP 80
70285: PUSH
70286: LD_EXP 81
70290: PUSH
70291: LD_EXP 84
70295: PUSH
70296: LD_EXP 85
70300: PUSH
70301: LD_EXP 86
70305: PUSH
70306: LD_EXP 82
70310: PUSH
70311: LD_EXP 83
70315: PUSH
70316: LD_EXP 91
70320: PUSH
70321: LD_EXP 95
70325: PUSH
70326: LD_EXP 96
70330: PUSH
70331: LD_EXP 98
70335: PUSH
70336: LD_EXP 102
70340: PUSH
70341: LD_EXP 105
70345: PUSH
70346: LD_EXP 106
70350: PUSH
70351: LD_EXP 116
70355: PUSH
70356: LD_EXP 117
70360: PUSH
70361: LD_EXP 118
70365: PUSH
70366: LD_EXP 119
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: ST_TO_ADDR
// tmp :=  ;
70427: LD_ADDR_VAR 0 3
70431: PUSH
70432: LD_STRING 
70434: ST_TO_ADDR
// for i = 1 to normalCounter do
70435: LD_ADDR_VAR 0 8
70439: PUSH
70440: DOUBLE
70441: LD_INT 1
70443: DEC
70444: ST_TO_ADDR
70445: LD_EXP 64
70449: PUSH
70450: FOR_TO
70451: IFFALSE 70487
// begin if flags [ i ] then
70453: LD_VAR 0 4
70457: PUSH
70458: LD_VAR 0 8
70462: ARRAY
70463: IFFALSE 70485
// tmp := tmp & i & ; ;
70465: LD_ADDR_VAR 0 3
70469: PUSH
70470: LD_VAR 0 3
70474: PUSH
70475: LD_VAR 0 8
70479: STR
70480: PUSH
70481: LD_STRING ;
70483: STR
70484: ST_TO_ADDR
// end ;
70485: GO 70450
70487: POP
70488: POP
// for i = 1 to hardcoreCounter do
70489: LD_ADDR_VAR 0 8
70493: PUSH
70494: DOUBLE
70495: LD_INT 1
70497: DEC
70498: ST_TO_ADDR
70499: LD_EXP 65
70503: PUSH
70504: FOR_TO
70505: IFFALSE 70551
// begin if flags [ normalCounter + i ] then
70507: LD_VAR 0 4
70511: PUSH
70512: LD_EXP 64
70516: PUSH
70517: LD_VAR 0 8
70521: PLUS
70522: ARRAY
70523: IFFALSE 70549
// tmp := tmp & ( 100 + i ) & ; ;
70525: LD_ADDR_VAR 0 3
70529: PUSH
70530: LD_VAR 0 3
70534: PUSH
70535: LD_INT 100
70537: PUSH
70538: LD_VAR 0 8
70542: PLUS
70543: STR
70544: PUSH
70545: LD_STRING ;
70547: STR
70548: ST_TO_ADDR
// end ;
70549: GO 70504
70551: POP
70552: POP
// if tmp then
70553: LD_VAR 0 3
70557: IFFALSE 70569
// active := tmp ;
70559: LD_ADDR_VAR 0 7
70563: PUSH
70564: LD_VAR 0 3
70568: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
70569: LD_STRING getStreamItemsFromMission("
70571: PUSH
70572: LD_VAR 0 5
70576: STR
70577: PUSH
70578: LD_STRING ","
70580: STR
70581: PUSH
70582: LD_VAR 0 6
70586: STR
70587: PUSH
70588: LD_STRING ","
70590: STR
70591: PUSH
70592: LD_VAR 0 7
70596: STR
70597: PUSH
70598: LD_STRING ")
70600: STR
70601: PPUSH
70602: CALL_OW 559
// end else
70606: GO 70615
// ToLua ( getStreamItemsFromMission("","","") ) ;
70608: LD_STRING getStreamItemsFromMission("","","")
70610: PPUSH
70611: CALL_OW 559
// end ;
70615: LD_VAR 0 2
70619: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
70620: LD_EXP 63
70624: PUSH
70625: LD_EXP 68
70629: AND
70630: IFFALSE 70754
70632: GO 70634
70634: DISABLE
70635: LD_INT 0
70637: PPUSH
70638: PPUSH
// begin enable ;
70639: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
70640: LD_ADDR_VAR 0 2
70644: PUSH
70645: LD_INT 22
70647: PUSH
70648: LD_OWVAR 2
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 2
70659: PUSH
70660: LD_INT 34
70662: PUSH
70663: LD_INT 7
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 34
70672: PUSH
70673: LD_INT 45
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 34
70682: PUSH
70683: LD_INT 28
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 34
70692: PUSH
70693: LD_INT 47
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PPUSH
70711: CALL_OW 69
70715: ST_TO_ADDR
// if not tmp then
70716: LD_VAR 0 2
70720: NOT
70721: IFFALSE 70725
// exit ;
70723: GO 70754
// for i in tmp do
70725: LD_ADDR_VAR 0 1
70729: PUSH
70730: LD_VAR 0 2
70734: PUSH
70735: FOR_IN
70736: IFFALSE 70752
// begin SetLives ( i , 0 ) ;
70738: LD_VAR 0 1
70742: PPUSH
70743: LD_INT 0
70745: PPUSH
70746: CALL_OW 234
// end ;
70750: GO 70735
70752: POP
70753: POP
// end ;
70754: PPOPN 2
70756: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
70757: LD_EXP 63
70761: PUSH
70762: LD_EXP 69
70766: AND
70767: IFFALSE 70851
70769: GO 70771
70771: DISABLE
70772: LD_INT 0
70774: PPUSH
70775: PPUSH
// begin enable ;
70776: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
70777: LD_ADDR_VAR 0 2
70781: PUSH
70782: LD_INT 22
70784: PUSH
70785: LD_OWVAR 2
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 32
70796: PUSH
70797: LD_INT 3
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PPUSH
70808: CALL_OW 69
70812: ST_TO_ADDR
// if not tmp then
70813: LD_VAR 0 2
70817: NOT
70818: IFFALSE 70822
// exit ;
70820: GO 70851
// for i in tmp do
70822: LD_ADDR_VAR 0 1
70826: PUSH
70827: LD_VAR 0 2
70831: PUSH
70832: FOR_IN
70833: IFFALSE 70849
// begin SetLives ( i , 0 ) ;
70835: LD_VAR 0 1
70839: PPUSH
70840: LD_INT 0
70842: PPUSH
70843: CALL_OW 234
// end ;
70847: GO 70832
70849: POP
70850: POP
// end ;
70851: PPOPN 2
70853: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
70854: LD_EXP 63
70858: PUSH
70859: LD_EXP 66
70863: AND
70864: IFFALSE 70957
70866: GO 70868
70868: DISABLE
70869: LD_INT 0
70871: PPUSH
// begin enable ;
70872: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
70873: LD_ADDR_VAR 0 1
70877: PUSH
70878: LD_INT 22
70880: PUSH
70881: LD_OWVAR 2
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 2
70892: PUSH
70893: LD_INT 25
70895: PUSH
70896: LD_INT 5
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 25
70905: PUSH
70906: LD_INT 9
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 25
70915: PUSH
70916: LD_INT 8
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PPUSH
70933: CALL_OW 69
70937: PUSH
70938: FOR_IN
70939: IFFALSE 70955
// begin SetClass ( i , 1 ) ;
70941: LD_VAR 0 1
70945: PPUSH
70946: LD_INT 1
70948: PPUSH
70949: CALL_OW 336
// end ;
70953: GO 70938
70955: POP
70956: POP
// end ;
70957: PPOPN 1
70959: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
70960: LD_EXP 63
70964: PUSH
70965: LD_EXP 67
70969: AND
70970: PUSH
70971: LD_OWVAR 65
70975: PUSH
70976: LD_INT 7
70978: LESS
70979: AND
70980: IFFALSE 70994
70982: GO 70984
70984: DISABLE
// begin enable ;
70985: ENABLE
// game_speed := 7 ;
70986: LD_ADDR_OWVAR 65
70990: PUSH
70991: LD_INT 7
70993: ST_TO_ADDR
// end ;
70994: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
70995: LD_EXP 63
70999: PUSH
71000: LD_EXP 70
71004: AND
71005: IFFALSE 71207
71007: GO 71009
71009: DISABLE
71010: LD_INT 0
71012: PPUSH
71013: PPUSH
71014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
71015: LD_ADDR_VAR 0 3
71019: PUSH
71020: LD_INT 81
71022: PUSH
71023: LD_OWVAR 2
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 21
71034: PUSH
71035: LD_INT 1
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PPUSH
71046: CALL_OW 69
71050: ST_TO_ADDR
// if not tmp then
71051: LD_VAR 0 3
71055: NOT
71056: IFFALSE 71060
// exit ;
71058: GO 71207
// if tmp > 5 then
71060: LD_VAR 0 3
71064: PUSH
71065: LD_INT 5
71067: GREATER
71068: IFFALSE 71080
// k := 5 else
71070: LD_ADDR_VAR 0 2
71074: PUSH
71075: LD_INT 5
71077: ST_TO_ADDR
71078: GO 71090
// k := tmp ;
71080: LD_ADDR_VAR 0 2
71084: PUSH
71085: LD_VAR 0 3
71089: ST_TO_ADDR
// for i := 1 to k do
71090: LD_ADDR_VAR 0 1
71094: PUSH
71095: DOUBLE
71096: LD_INT 1
71098: DEC
71099: ST_TO_ADDR
71100: LD_VAR 0 2
71104: PUSH
71105: FOR_TO
71106: IFFALSE 71205
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
71108: LD_VAR 0 3
71112: PUSH
71113: LD_VAR 0 1
71117: ARRAY
71118: PPUSH
71119: LD_VAR 0 1
71123: PUSH
71124: LD_INT 4
71126: MOD
71127: PUSH
71128: LD_INT 1
71130: PLUS
71131: PPUSH
71132: CALL_OW 259
71136: PUSH
71137: LD_INT 10
71139: LESS
71140: IFFALSE 71203
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
71142: LD_VAR 0 3
71146: PUSH
71147: LD_VAR 0 1
71151: ARRAY
71152: PPUSH
71153: LD_VAR 0 1
71157: PUSH
71158: LD_INT 4
71160: MOD
71161: PUSH
71162: LD_INT 1
71164: PLUS
71165: PPUSH
71166: LD_VAR 0 3
71170: PUSH
71171: LD_VAR 0 1
71175: ARRAY
71176: PPUSH
71177: LD_VAR 0 1
71181: PUSH
71182: LD_INT 4
71184: MOD
71185: PUSH
71186: LD_INT 1
71188: PLUS
71189: PPUSH
71190: CALL_OW 259
71194: PUSH
71195: LD_INT 1
71197: PLUS
71198: PPUSH
71199: CALL_OW 237
71203: GO 71105
71205: POP
71206: POP
// end ;
71207: PPOPN 3
71209: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
71210: LD_EXP 63
71214: PUSH
71215: LD_EXP 71
71219: AND
71220: IFFALSE 71240
71222: GO 71224
71224: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
71225: LD_INT 4
71227: PPUSH
71228: LD_OWVAR 2
71232: PPUSH
71233: LD_INT 0
71235: PPUSH
71236: CALL_OW 324
71240: END
// every 0 0$1 trigger StreamModeActive and sShovel do
71241: LD_EXP 63
71245: PUSH
71246: LD_EXP 100
71250: AND
71251: IFFALSE 71271
71253: GO 71255
71255: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
71256: LD_INT 19
71258: PPUSH
71259: LD_OWVAR 2
71263: PPUSH
71264: LD_INT 0
71266: PPUSH
71267: CALL_OW 324
71271: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
71272: LD_EXP 63
71276: PUSH
71277: LD_EXP 72
71281: AND
71282: IFFALSE 71384
71284: GO 71286
71286: DISABLE
71287: LD_INT 0
71289: PPUSH
71290: PPUSH
// begin enable ;
71291: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
71292: LD_ADDR_VAR 0 2
71296: PUSH
71297: LD_INT 22
71299: PUSH
71300: LD_OWVAR 2
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 2
71311: PUSH
71312: LD_INT 34
71314: PUSH
71315: LD_INT 11
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 34
71324: PUSH
71325: LD_INT 30
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: LIST
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PPUSH
71341: CALL_OW 69
71345: ST_TO_ADDR
// if not tmp then
71346: LD_VAR 0 2
71350: NOT
71351: IFFALSE 71355
// exit ;
71353: GO 71384
// for i in tmp do
71355: LD_ADDR_VAR 0 1
71359: PUSH
71360: LD_VAR 0 2
71364: PUSH
71365: FOR_IN
71366: IFFALSE 71382
// begin SetLives ( i , 0 ) ;
71368: LD_VAR 0 1
71372: PPUSH
71373: LD_INT 0
71375: PPUSH
71376: CALL_OW 234
// end ;
71380: GO 71365
71382: POP
71383: POP
// end ;
71384: PPOPN 2
71386: END
// every 0 0$1 trigger StreamModeActive and sBunker do
71387: LD_EXP 63
71391: PUSH
71392: LD_EXP 73
71396: AND
71397: IFFALSE 71417
71399: GO 71401
71401: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
71402: LD_INT 32
71404: PPUSH
71405: LD_OWVAR 2
71409: PPUSH
71410: LD_INT 0
71412: PPUSH
71413: CALL_OW 324
71417: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
71418: LD_EXP 63
71422: PUSH
71423: LD_EXP 74
71427: AND
71428: IFFALSE 71609
71430: GO 71432
71432: DISABLE
71433: LD_INT 0
71435: PPUSH
71436: PPUSH
71437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
71438: LD_ADDR_VAR 0 2
71442: PUSH
71443: LD_INT 22
71445: PUSH
71446: LD_OWVAR 2
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 33
71457: PUSH
71458: LD_INT 3
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PPUSH
71469: CALL_OW 69
71473: ST_TO_ADDR
// if not tmp then
71474: LD_VAR 0 2
71478: NOT
71479: IFFALSE 71483
// exit ;
71481: GO 71609
// side := 0 ;
71483: LD_ADDR_VAR 0 3
71487: PUSH
71488: LD_INT 0
71490: ST_TO_ADDR
// for i := 1 to 8 do
71491: LD_ADDR_VAR 0 1
71495: PUSH
71496: DOUBLE
71497: LD_INT 1
71499: DEC
71500: ST_TO_ADDR
71501: LD_INT 8
71503: PUSH
71504: FOR_TO
71505: IFFALSE 71553
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
71507: LD_OWVAR 2
71511: PUSH
71512: LD_VAR 0 1
71516: NONEQUAL
71517: PUSH
71518: LD_OWVAR 2
71522: PPUSH
71523: LD_VAR 0 1
71527: PPUSH
71528: CALL_OW 81
71532: PUSH
71533: LD_INT 2
71535: EQUAL
71536: AND
71537: IFFALSE 71551
// begin side := i ;
71539: LD_ADDR_VAR 0 3
71543: PUSH
71544: LD_VAR 0 1
71548: ST_TO_ADDR
// break ;
71549: GO 71553
// end ;
71551: GO 71504
71553: POP
71554: POP
// if not side then
71555: LD_VAR 0 3
71559: NOT
71560: IFFALSE 71564
// exit ;
71562: GO 71609
// for i := 1 to tmp do
71564: LD_ADDR_VAR 0 1
71568: PUSH
71569: DOUBLE
71570: LD_INT 1
71572: DEC
71573: ST_TO_ADDR
71574: LD_VAR 0 2
71578: PUSH
71579: FOR_TO
71580: IFFALSE 71607
// if Prob ( 60 ) then
71582: LD_INT 60
71584: PPUSH
71585: CALL_OW 13
71589: IFFALSE 71605
// SetSide ( i , side ) ;
71591: LD_VAR 0 1
71595: PPUSH
71596: LD_VAR 0 3
71600: PPUSH
71601: CALL_OW 235
71605: GO 71579
71607: POP
71608: POP
// end ;
71609: PPOPN 3
71611: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
71612: LD_EXP 63
71616: PUSH
71617: LD_EXP 76
71621: AND
71622: IFFALSE 71741
71624: GO 71626
71626: DISABLE
71627: LD_INT 0
71629: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
71630: LD_ADDR_VAR 0 1
71634: PUSH
71635: LD_INT 22
71637: PUSH
71638: LD_OWVAR 2
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 21
71649: PUSH
71650: LD_INT 1
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 3
71659: PUSH
71660: LD_INT 23
71662: PUSH
71663: LD_INT 0
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: LIST
71678: PPUSH
71679: CALL_OW 69
71683: PUSH
71684: FOR_IN
71685: IFFALSE 71739
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
71687: LD_VAR 0 1
71691: PPUSH
71692: CALL_OW 257
71696: PUSH
71697: LD_INT 1
71699: PUSH
71700: LD_INT 2
71702: PUSH
71703: LD_INT 3
71705: PUSH
71706: LD_INT 4
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: IN
71715: IFFALSE 71737
// SetClass ( un , rand ( 1 , 4 ) ) ;
71717: LD_VAR 0 1
71721: PPUSH
71722: LD_INT 1
71724: PPUSH
71725: LD_INT 4
71727: PPUSH
71728: CALL_OW 12
71732: PPUSH
71733: CALL_OW 336
71737: GO 71684
71739: POP
71740: POP
// end ;
71741: PPOPN 1
71743: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
71744: LD_EXP 63
71748: PUSH
71749: LD_EXP 75
71753: AND
71754: IFFALSE 71833
71756: GO 71758
71758: DISABLE
71759: LD_INT 0
71761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71762: LD_ADDR_VAR 0 1
71766: PUSH
71767: LD_INT 22
71769: PUSH
71770: LD_OWVAR 2
71774: PUSH
71775: EMPTY
71776: LIST
71777: LIST
71778: PUSH
71779: LD_INT 21
71781: PUSH
71782: LD_INT 3
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PPUSH
71793: CALL_OW 69
71797: ST_TO_ADDR
// if not tmp then
71798: LD_VAR 0 1
71802: NOT
71803: IFFALSE 71807
// exit ;
71805: GO 71833
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
71807: LD_VAR 0 1
71811: PUSH
71812: LD_INT 1
71814: PPUSH
71815: LD_VAR 0 1
71819: PPUSH
71820: CALL_OW 12
71824: ARRAY
71825: PPUSH
71826: LD_INT 100
71828: PPUSH
71829: CALL_OW 234
// end ;
71833: PPOPN 1
71835: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
71836: LD_EXP 63
71840: PUSH
71841: LD_EXP 77
71845: AND
71846: IFFALSE 71944
71848: GO 71850
71850: DISABLE
71851: LD_INT 0
71853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71854: LD_ADDR_VAR 0 1
71858: PUSH
71859: LD_INT 22
71861: PUSH
71862: LD_OWVAR 2
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 21
71873: PUSH
71874: LD_INT 1
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PPUSH
71885: CALL_OW 69
71889: ST_TO_ADDR
// if not tmp then
71890: LD_VAR 0 1
71894: NOT
71895: IFFALSE 71899
// exit ;
71897: GO 71944
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
71899: LD_VAR 0 1
71903: PUSH
71904: LD_INT 1
71906: PPUSH
71907: LD_VAR 0 1
71911: PPUSH
71912: CALL_OW 12
71916: ARRAY
71917: PPUSH
71918: LD_INT 1
71920: PPUSH
71921: LD_INT 4
71923: PPUSH
71924: CALL_OW 12
71928: PPUSH
71929: LD_INT 3000
71931: PPUSH
71932: LD_INT 9000
71934: PPUSH
71935: CALL_OW 12
71939: PPUSH
71940: CALL_OW 492
// end ;
71944: PPOPN 1
71946: END
// every 0 0$1 trigger StreamModeActive and sDepot do
71947: LD_EXP 63
71951: PUSH
71952: LD_EXP 78
71956: AND
71957: IFFALSE 71977
71959: GO 71961
71961: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
71962: LD_INT 1
71964: PPUSH
71965: LD_OWVAR 2
71969: PPUSH
71970: LD_INT 0
71972: PPUSH
71973: CALL_OW 324
71977: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
71978: LD_EXP 63
71982: PUSH
71983: LD_EXP 79
71987: AND
71988: IFFALSE 72071
71990: GO 71992
71992: DISABLE
71993: LD_INT 0
71995: PPUSH
71996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71997: LD_ADDR_VAR 0 2
72001: PUSH
72002: LD_INT 22
72004: PUSH
72005: LD_OWVAR 2
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: PUSH
72014: LD_INT 21
72016: PUSH
72017: LD_INT 3
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PPUSH
72028: CALL_OW 69
72032: ST_TO_ADDR
// if not tmp then
72033: LD_VAR 0 2
72037: NOT
72038: IFFALSE 72042
// exit ;
72040: GO 72071
// for i in tmp do
72042: LD_ADDR_VAR 0 1
72046: PUSH
72047: LD_VAR 0 2
72051: PUSH
72052: FOR_IN
72053: IFFALSE 72069
// SetBLevel ( i , 10 ) ;
72055: LD_VAR 0 1
72059: PPUSH
72060: LD_INT 10
72062: PPUSH
72063: CALL_OW 241
72067: GO 72052
72069: POP
72070: POP
// end ;
72071: PPOPN 2
72073: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
72074: LD_EXP 63
72078: PUSH
72079: LD_EXP 80
72083: AND
72084: IFFALSE 72195
72086: GO 72088
72088: DISABLE
72089: LD_INT 0
72091: PPUSH
72092: PPUSH
72093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72094: LD_ADDR_VAR 0 3
72098: PUSH
72099: LD_INT 22
72101: PUSH
72102: LD_OWVAR 2
72106: PUSH
72107: EMPTY
72108: LIST
72109: LIST
72110: PUSH
72111: LD_INT 25
72113: PUSH
72114: LD_INT 1
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PPUSH
72125: CALL_OW 69
72129: ST_TO_ADDR
// if not tmp then
72130: LD_VAR 0 3
72134: NOT
72135: IFFALSE 72139
// exit ;
72137: GO 72195
// un := tmp [ rand ( 1 , tmp ) ] ;
72139: LD_ADDR_VAR 0 2
72143: PUSH
72144: LD_VAR 0 3
72148: PUSH
72149: LD_INT 1
72151: PPUSH
72152: LD_VAR 0 3
72156: PPUSH
72157: CALL_OW 12
72161: ARRAY
72162: ST_TO_ADDR
// if Crawls ( un ) then
72163: LD_VAR 0 2
72167: PPUSH
72168: CALL_OW 318
72172: IFFALSE 72183
// ComWalk ( un ) ;
72174: LD_VAR 0 2
72178: PPUSH
72179: CALL_OW 138
// SetClass ( un , class_sniper ) ;
72183: LD_VAR 0 2
72187: PPUSH
72188: LD_INT 5
72190: PPUSH
72191: CALL_OW 336
// end ;
72195: PPOPN 3
72197: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
72198: LD_EXP 63
72202: PUSH
72203: LD_EXP 81
72207: AND
72208: PUSH
72209: LD_OWVAR 67
72213: PUSH
72214: LD_INT 4
72216: LESS
72217: AND
72218: IFFALSE 72237
72220: GO 72222
72222: DISABLE
// begin Difficulty := Difficulty + 1 ;
72223: LD_ADDR_OWVAR 67
72227: PUSH
72228: LD_OWVAR 67
72232: PUSH
72233: LD_INT 1
72235: PLUS
72236: ST_TO_ADDR
// end ;
72237: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
72238: LD_EXP 63
72242: PUSH
72243: LD_EXP 82
72247: AND
72248: IFFALSE 72351
72250: GO 72252
72252: DISABLE
72253: LD_INT 0
72255: PPUSH
// begin for i := 1 to 5 do
72256: LD_ADDR_VAR 0 1
72260: PUSH
72261: DOUBLE
72262: LD_INT 1
72264: DEC
72265: ST_TO_ADDR
72266: LD_INT 5
72268: PUSH
72269: FOR_TO
72270: IFFALSE 72349
// begin uc_nation := nation_nature ;
72272: LD_ADDR_OWVAR 21
72276: PUSH
72277: LD_INT 0
72279: ST_TO_ADDR
// uc_side := 0 ;
72280: LD_ADDR_OWVAR 20
72284: PUSH
72285: LD_INT 0
72287: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72288: LD_ADDR_OWVAR 29
72292: PUSH
72293: LD_INT 12
72295: PUSH
72296: LD_INT 12
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: ST_TO_ADDR
// hc_agressivity := 20 ;
72303: LD_ADDR_OWVAR 35
72307: PUSH
72308: LD_INT 20
72310: ST_TO_ADDR
// hc_class := class_tiger ;
72311: LD_ADDR_OWVAR 28
72315: PUSH
72316: LD_INT 14
72318: ST_TO_ADDR
// hc_gallery :=  ;
72319: LD_ADDR_OWVAR 33
72323: PUSH
72324: LD_STRING 
72326: ST_TO_ADDR
// hc_name :=  ;
72327: LD_ADDR_OWVAR 26
72331: PUSH
72332: LD_STRING 
72334: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
72335: CALL_OW 44
72339: PPUSH
72340: LD_INT 0
72342: PPUSH
72343: CALL_OW 51
// end ;
72347: GO 72269
72349: POP
72350: POP
// end ;
72351: PPOPN 1
72353: END
// every 0 0$1 trigger StreamModeActive and sBomb do
72354: LD_EXP 63
72358: PUSH
72359: LD_EXP 83
72363: AND
72364: IFFALSE 72373
72366: GO 72368
72368: DISABLE
// StreamSibBomb ;
72369: CALL 72374 0 0
72373: END
// export function StreamSibBomb ; var i , x , y ; begin
72374: LD_INT 0
72376: PPUSH
72377: PPUSH
72378: PPUSH
72379: PPUSH
// result := false ;
72380: LD_ADDR_VAR 0 1
72384: PUSH
72385: LD_INT 0
72387: ST_TO_ADDR
// for i := 1 to 16 do
72388: LD_ADDR_VAR 0 2
72392: PUSH
72393: DOUBLE
72394: LD_INT 1
72396: DEC
72397: ST_TO_ADDR
72398: LD_INT 16
72400: PUSH
72401: FOR_TO
72402: IFFALSE 72601
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72404: LD_ADDR_VAR 0 3
72408: PUSH
72409: LD_INT 10
72411: PUSH
72412: LD_INT 20
72414: PUSH
72415: LD_INT 30
72417: PUSH
72418: LD_INT 40
72420: PUSH
72421: LD_INT 50
72423: PUSH
72424: LD_INT 60
72426: PUSH
72427: LD_INT 70
72429: PUSH
72430: LD_INT 80
72432: PUSH
72433: LD_INT 90
72435: PUSH
72436: LD_INT 100
72438: PUSH
72439: LD_INT 110
72441: PUSH
72442: LD_INT 120
72444: PUSH
72445: LD_INT 130
72447: PUSH
72448: LD_INT 140
72450: PUSH
72451: LD_INT 150
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: PUSH
72471: LD_INT 1
72473: PPUSH
72474: LD_INT 15
72476: PPUSH
72477: CALL_OW 12
72481: ARRAY
72482: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72483: LD_ADDR_VAR 0 4
72487: PUSH
72488: LD_INT 10
72490: PUSH
72491: LD_INT 20
72493: PUSH
72494: LD_INT 30
72496: PUSH
72497: LD_INT 40
72499: PUSH
72500: LD_INT 50
72502: PUSH
72503: LD_INT 60
72505: PUSH
72506: LD_INT 70
72508: PUSH
72509: LD_INT 80
72511: PUSH
72512: LD_INT 90
72514: PUSH
72515: LD_INT 100
72517: PUSH
72518: LD_INT 110
72520: PUSH
72521: LD_INT 120
72523: PUSH
72524: LD_INT 130
72526: PUSH
72527: LD_INT 140
72529: PUSH
72530: LD_INT 150
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: LIST
72546: LIST
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 1
72552: PPUSH
72553: LD_INT 15
72555: PPUSH
72556: CALL_OW 12
72560: ARRAY
72561: ST_TO_ADDR
// if ValidHex ( x , y ) then
72562: LD_VAR 0 3
72566: PPUSH
72567: LD_VAR 0 4
72571: PPUSH
72572: CALL_OW 488
72576: IFFALSE 72599
// begin result := [ x , y ] ;
72578: LD_ADDR_VAR 0 1
72582: PUSH
72583: LD_VAR 0 3
72587: PUSH
72588: LD_VAR 0 4
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: ST_TO_ADDR
// break ;
72597: GO 72601
// end ; end ;
72599: GO 72401
72601: POP
72602: POP
// if result then
72603: LD_VAR 0 1
72607: IFFALSE 72667
// begin ToLua ( playSibBomb() ) ;
72609: LD_STRING playSibBomb()
72611: PPUSH
72612: CALL_OW 559
// wait ( 0 0$14 ) ;
72616: LD_INT 490
72618: PPUSH
72619: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
72623: LD_VAR 0 1
72627: PUSH
72628: LD_INT 1
72630: ARRAY
72631: PPUSH
72632: LD_VAR 0 1
72636: PUSH
72637: LD_INT 2
72639: ARRAY
72640: PPUSH
72641: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
72645: LD_VAR 0 1
72649: PUSH
72650: LD_INT 1
72652: ARRAY
72653: PPUSH
72654: LD_VAR 0 1
72658: PUSH
72659: LD_INT 2
72661: ARRAY
72662: PPUSH
72663: CALL_OW 429
// end ; end ;
72667: LD_VAR 0 1
72671: RET
// every 0 0$1 trigger StreamModeActive and sReset do
72672: LD_EXP 63
72676: PUSH
72677: LD_EXP 85
72681: AND
72682: IFFALSE 72694
72684: GO 72686
72686: DISABLE
// YouLost (  ) ;
72687: LD_STRING 
72689: PPUSH
72690: CALL_OW 104
72694: END
// every 0 0$1 trigger StreamModeActive and sFog do
72695: LD_EXP 63
72699: PUSH
72700: LD_EXP 84
72704: AND
72705: IFFALSE 72719
72707: GO 72709
72709: DISABLE
// FogOff ( your_side ) ;
72710: LD_OWVAR 2
72714: PPUSH
72715: CALL_OW 344
72719: END
// every 0 0$1 trigger StreamModeActive and sSun do
72720: LD_EXP 63
72724: PUSH
72725: LD_EXP 86
72729: AND
72730: IFFALSE 72758
72732: GO 72734
72734: DISABLE
// begin solar_recharge_percent := 0 ;
72735: LD_ADDR_OWVAR 79
72739: PUSH
72740: LD_INT 0
72742: ST_TO_ADDR
// wait ( 5 5$00 ) ;
72743: LD_INT 10500
72745: PPUSH
72746: CALL_OW 67
// solar_recharge_percent := 100 ;
72750: LD_ADDR_OWVAR 79
72754: PUSH
72755: LD_INT 100
72757: ST_TO_ADDR
// end ;
72758: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
72759: LD_EXP 63
72763: PUSH
72764: LD_EXP 87
72768: AND
72769: IFFALSE 73008
72771: GO 72773
72773: DISABLE
72774: LD_INT 0
72776: PPUSH
72777: PPUSH
72778: PPUSH
// begin tmp := [ ] ;
72779: LD_ADDR_VAR 0 3
72783: PUSH
72784: EMPTY
72785: ST_TO_ADDR
// for i := 1 to 6 do
72786: LD_ADDR_VAR 0 1
72790: PUSH
72791: DOUBLE
72792: LD_INT 1
72794: DEC
72795: ST_TO_ADDR
72796: LD_INT 6
72798: PUSH
72799: FOR_TO
72800: IFFALSE 72905
// begin uc_nation := nation_nature ;
72802: LD_ADDR_OWVAR 21
72806: PUSH
72807: LD_INT 0
72809: ST_TO_ADDR
// uc_side := 0 ;
72810: LD_ADDR_OWVAR 20
72814: PUSH
72815: LD_INT 0
72817: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72818: LD_ADDR_OWVAR 29
72822: PUSH
72823: LD_INT 12
72825: PUSH
72826: LD_INT 12
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: ST_TO_ADDR
// hc_agressivity := 20 ;
72833: LD_ADDR_OWVAR 35
72837: PUSH
72838: LD_INT 20
72840: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
72841: LD_ADDR_OWVAR 28
72845: PUSH
72846: LD_INT 17
72848: ST_TO_ADDR
// hc_gallery :=  ;
72849: LD_ADDR_OWVAR 33
72853: PUSH
72854: LD_STRING 
72856: ST_TO_ADDR
// hc_name :=  ;
72857: LD_ADDR_OWVAR 26
72861: PUSH
72862: LD_STRING 
72864: ST_TO_ADDR
// un := CreateHuman ;
72865: LD_ADDR_VAR 0 2
72869: PUSH
72870: CALL_OW 44
72874: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
72875: LD_VAR 0 2
72879: PPUSH
72880: LD_INT 1
72882: PPUSH
72883: CALL_OW 51
// tmp := tmp ^ un ;
72887: LD_ADDR_VAR 0 3
72891: PUSH
72892: LD_VAR 0 3
72896: PUSH
72897: LD_VAR 0 2
72901: ADD
72902: ST_TO_ADDR
// end ;
72903: GO 72799
72905: POP
72906: POP
// repeat wait ( 0 0$1 ) ;
72907: LD_INT 35
72909: PPUSH
72910: CALL_OW 67
// for un in tmp do
72914: LD_ADDR_VAR 0 2
72918: PUSH
72919: LD_VAR 0 3
72923: PUSH
72924: FOR_IN
72925: IFFALSE 72999
// begin if IsDead ( un ) then
72927: LD_VAR 0 2
72931: PPUSH
72932: CALL_OW 301
72936: IFFALSE 72956
// begin tmp := tmp diff un ;
72938: LD_ADDR_VAR 0 3
72942: PUSH
72943: LD_VAR 0 3
72947: PUSH
72948: LD_VAR 0 2
72952: DIFF
72953: ST_TO_ADDR
// continue ;
72954: GO 72924
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
72956: LD_VAR 0 2
72960: PPUSH
72961: LD_INT 3
72963: PUSH
72964: LD_INT 22
72966: PUSH
72967: LD_INT 0
72969: PUSH
72970: EMPTY
72971: LIST
72972: LIST
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PPUSH
72978: CALL_OW 69
72982: PPUSH
72983: LD_VAR 0 2
72987: PPUSH
72988: CALL_OW 74
72992: PPUSH
72993: CALL_OW 115
// end ;
72997: GO 72924
72999: POP
73000: POP
// until not tmp ;
73001: LD_VAR 0 3
73005: NOT
73006: IFFALSE 72907
// end ;
73008: PPOPN 3
73010: END
// every 0 0$1 trigger StreamModeActive and sTroll do
73011: LD_EXP 63
73015: PUSH
73016: LD_EXP 88
73020: AND
73021: IFFALSE 73075
73023: GO 73025
73025: DISABLE
// begin ToLua ( displayTroll(); ) ;
73026: LD_STRING displayTroll();
73028: PPUSH
73029: CALL_OW 559
// wait ( 3 3$00 ) ;
73033: LD_INT 6300
73035: PPUSH
73036: CALL_OW 67
// ToLua ( hideTroll(); ) ;
73040: LD_STRING hideTroll();
73042: PPUSH
73043: CALL_OW 559
// wait ( 1 1$00 ) ;
73047: LD_INT 2100
73049: PPUSH
73050: CALL_OW 67
// ToLua ( displayTroll(); ) ;
73054: LD_STRING displayTroll();
73056: PPUSH
73057: CALL_OW 559
// wait ( 1 1$00 ) ;
73061: LD_INT 2100
73063: PPUSH
73064: CALL_OW 67
// ToLua ( hideTroll(); ) ;
73068: LD_STRING hideTroll();
73070: PPUSH
73071: CALL_OW 559
// end ;
73075: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
73076: LD_EXP 63
73080: PUSH
73081: LD_EXP 89
73085: AND
73086: IFFALSE 73149
73088: GO 73090
73090: DISABLE
73091: LD_INT 0
73093: PPUSH
// begin p := 0 ;
73094: LD_ADDR_VAR 0 1
73098: PUSH
73099: LD_INT 0
73101: ST_TO_ADDR
// repeat game_speed := 1 ;
73102: LD_ADDR_OWVAR 65
73106: PUSH
73107: LD_INT 1
73109: ST_TO_ADDR
// wait ( 0 0$1 ) ;
73110: LD_INT 35
73112: PPUSH
73113: CALL_OW 67
// p := p + 1 ;
73117: LD_ADDR_VAR 0 1
73121: PUSH
73122: LD_VAR 0 1
73126: PUSH
73127: LD_INT 1
73129: PLUS
73130: ST_TO_ADDR
// until p >= 60 ;
73131: LD_VAR 0 1
73135: PUSH
73136: LD_INT 60
73138: GREATEREQUAL
73139: IFFALSE 73102
// game_speed := 4 ;
73141: LD_ADDR_OWVAR 65
73145: PUSH
73146: LD_INT 4
73148: ST_TO_ADDR
// end ;
73149: PPOPN 1
73151: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
73152: LD_EXP 63
73156: PUSH
73157: LD_EXP 90
73161: AND
73162: IFFALSE 73308
73164: GO 73166
73166: DISABLE
73167: LD_INT 0
73169: PPUSH
73170: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73171: LD_ADDR_VAR 0 1
73175: PUSH
73176: LD_INT 22
73178: PUSH
73179: LD_OWVAR 2
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: PUSH
73188: LD_INT 2
73190: PUSH
73191: LD_INT 30
73193: PUSH
73194: LD_INT 0
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PUSH
73201: LD_INT 30
73203: PUSH
73204: LD_INT 1
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: PUSH
73211: EMPTY
73212: LIST
73213: LIST
73214: LIST
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: PPUSH
73220: CALL_OW 69
73224: ST_TO_ADDR
// if not depot then
73225: LD_VAR 0 1
73229: NOT
73230: IFFALSE 73234
// exit ;
73232: GO 73308
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
73234: LD_ADDR_VAR 0 2
73238: PUSH
73239: LD_VAR 0 1
73243: PUSH
73244: LD_INT 1
73246: PPUSH
73247: LD_VAR 0 1
73251: PPUSH
73252: CALL_OW 12
73256: ARRAY
73257: PPUSH
73258: CALL_OW 274
73262: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
73263: LD_VAR 0 2
73267: PPUSH
73268: LD_INT 1
73270: PPUSH
73271: LD_INT 0
73273: PPUSH
73274: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
73278: LD_VAR 0 2
73282: PPUSH
73283: LD_INT 2
73285: PPUSH
73286: LD_INT 0
73288: PPUSH
73289: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
73293: LD_VAR 0 2
73297: PPUSH
73298: LD_INT 3
73300: PPUSH
73301: LD_INT 0
73303: PPUSH
73304: CALL_OW 277
// end ;
73308: PPOPN 2
73310: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
73311: LD_EXP 63
73315: PUSH
73316: LD_EXP 91
73320: AND
73321: IFFALSE 73418
73323: GO 73325
73325: DISABLE
73326: LD_INT 0
73328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73329: LD_ADDR_VAR 0 1
73333: PUSH
73334: LD_INT 22
73336: PUSH
73337: LD_OWVAR 2
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: PUSH
73346: LD_INT 21
73348: PUSH
73349: LD_INT 1
73351: PUSH
73352: EMPTY
73353: LIST
73354: LIST
73355: PUSH
73356: LD_INT 3
73358: PUSH
73359: LD_INT 23
73361: PUSH
73362: LD_INT 0
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: LIST
73377: PPUSH
73378: CALL_OW 69
73382: ST_TO_ADDR
// if not tmp then
73383: LD_VAR 0 1
73387: NOT
73388: IFFALSE 73392
// exit ;
73390: GO 73418
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
73392: LD_VAR 0 1
73396: PUSH
73397: LD_INT 1
73399: PPUSH
73400: LD_VAR 0 1
73404: PPUSH
73405: CALL_OW 12
73409: ARRAY
73410: PPUSH
73411: LD_INT 200
73413: PPUSH
73414: CALL_OW 234
// end ;
73418: PPOPN 1
73420: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
73421: LD_EXP 63
73425: PUSH
73426: LD_EXP 92
73430: AND
73431: IFFALSE 73510
73433: GO 73435
73435: DISABLE
73436: LD_INT 0
73438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
73439: LD_ADDR_VAR 0 1
73443: PUSH
73444: LD_INT 22
73446: PUSH
73447: LD_OWVAR 2
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: PUSH
73456: LD_INT 21
73458: PUSH
73459: LD_INT 2
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: PUSH
73466: EMPTY
73467: LIST
73468: LIST
73469: PPUSH
73470: CALL_OW 69
73474: ST_TO_ADDR
// if not tmp then
73475: LD_VAR 0 1
73479: NOT
73480: IFFALSE 73484
// exit ;
73482: GO 73510
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
73484: LD_VAR 0 1
73488: PUSH
73489: LD_INT 1
73491: PPUSH
73492: LD_VAR 0 1
73496: PPUSH
73497: CALL_OW 12
73501: ARRAY
73502: PPUSH
73503: LD_INT 60
73505: PPUSH
73506: CALL_OW 234
// end ;
73510: PPOPN 1
73512: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
73513: LD_EXP 63
73517: PUSH
73518: LD_EXP 93
73522: AND
73523: IFFALSE 73622
73525: GO 73527
73527: DISABLE
73528: LD_INT 0
73530: PPUSH
73531: PPUSH
// begin enable ;
73532: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
73533: LD_ADDR_VAR 0 1
73537: PUSH
73538: LD_INT 22
73540: PUSH
73541: LD_OWVAR 2
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: PUSH
73550: LD_INT 61
73552: PUSH
73553: EMPTY
73554: LIST
73555: PUSH
73556: LD_INT 33
73558: PUSH
73559: LD_INT 2
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: LIST
73570: PPUSH
73571: CALL_OW 69
73575: ST_TO_ADDR
// if not tmp then
73576: LD_VAR 0 1
73580: NOT
73581: IFFALSE 73585
// exit ;
73583: GO 73622
// for i in tmp do
73585: LD_ADDR_VAR 0 2
73589: PUSH
73590: LD_VAR 0 1
73594: PUSH
73595: FOR_IN
73596: IFFALSE 73620
// if IsControledBy ( i ) then
73598: LD_VAR 0 2
73602: PPUSH
73603: CALL_OW 312
73607: IFFALSE 73618
// ComUnlink ( i ) ;
73609: LD_VAR 0 2
73613: PPUSH
73614: CALL_OW 136
73618: GO 73595
73620: POP
73621: POP
// end ;
73622: PPOPN 2
73624: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
73625: LD_EXP 63
73629: PUSH
73630: LD_EXP 94
73634: AND
73635: IFFALSE 73775
73637: GO 73639
73639: DISABLE
73640: LD_INT 0
73642: PPUSH
73643: PPUSH
// begin ToLua ( displayPowell(); ) ;
73644: LD_STRING displayPowell();
73646: PPUSH
73647: CALL_OW 559
// uc_side := 0 ;
73651: LD_ADDR_OWVAR 20
73655: PUSH
73656: LD_INT 0
73658: ST_TO_ADDR
// uc_nation := 2 ;
73659: LD_ADDR_OWVAR 21
73663: PUSH
73664: LD_INT 2
73666: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
73667: LD_ADDR_OWVAR 37
73671: PUSH
73672: LD_INT 14
73674: ST_TO_ADDR
// vc_engine := engine_siberite ;
73675: LD_ADDR_OWVAR 39
73679: PUSH
73680: LD_INT 3
73682: ST_TO_ADDR
// vc_control := control_apeman ;
73683: LD_ADDR_OWVAR 38
73687: PUSH
73688: LD_INT 5
73690: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
73691: LD_ADDR_OWVAR 40
73695: PUSH
73696: LD_INT 29
73698: ST_TO_ADDR
// un := CreateVehicle ;
73699: LD_ADDR_VAR 0 2
73703: PUSH
73704: CALL_OW 45
73708: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73709: LD_VAR 0 2
73713: PPUSH
73714: LD_INT 1
73716: PPUSH
73717: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73721: LD_INT 35
73723: PPUSH
73724: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73728: LD_VAR 0 2
73732: PPUSH
73733: LD_INT 22
73735: PUSH
73736: LD_OWVAR 2
73740: PUSH
73741: EMPTY
73742: LIST
73743: LIST
73744: PPUSH
73745: CALL_OW 69
73749: PPUSH
73750: LD_VAR 0 2
73754: PPUSH
73755: CALL_OW 74
73759: PPUSH
73760: CALL_OW 115
// until IsDead ( un ) ;
73764: LD_VAR 0 2
73768: PPUSH
73769: CALL_OW 301
73773: IFFALSE 73721
// end ;
73775: PPOPN 2
73777: END
// every 0 0$1 trigger StreamModeActive and sStu do
73778: LD_EXP 63
73782: PUSH
73783: LD_EXP 102
73787: AND
73788: IFFALSE 73804
73790: GO 73792
73792: DISABLE
// begin ToLua ( displayStucuk(); ) ;
73793: LD_STRING displayStucuk();
73795: PPUSH
73796: CALL_OW 559
// ResetFog ;
73800: CALL_OW 335
// end ;
73804: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
73805: LD_EXP 63
73809: PUSH
73810: LD_EXP 95
73814: AND
73815: IFFALSE 73956
73817: GO 73819
73819: DISABLE
73820: LD_INT 0
73822: PPUSH
73823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73824: LD_ADDR_VAR 0 2
73828: PUSH
73829: LD_INT 22
73831: PUSH
73832: LD_OWVAR 2
73836: PUSH
73837: EMPTY
73838: LIST
73839: LIST
73840: PUSH
73841: LD_INT 21
73843: PUSH
73844: LD_INT 1
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: PPUSH
73855: CALL_OW 69
73859: ST_TO_ADDR
// if not tmp then
73860: LD_VAR 0 2
73864: NOT
73865: IFFALSE 73869
// exit ;
73867: GO 73956
// un := tmp [ rand ( 1 , tmp ) ] ;
73869: LD_ADDR_VAR 0 1
73873: PUSH
73874: LD_VAR 0 2
73878: PUSH
73879: LD_INT 1
73881: PPUSH
73882: LD_VAR 0 2
73886: PPUSH
73887: CALL_OW 12
73891: ARRAY
73892: ST_TO_ADDR
// SetSide ( un , 0 ) ;
73893: LD_VAR 0 1
73897: PPUSH
73898: LD_INT 0
73900: PPUSH
73901: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
73905: LD_VAR 0 1
73909: PPUSH
73910: LD_OWVAR 3
73914: PUSH
73915: LD_VAR 0 1
73919: DIFF
73920: PPUSH
73921: LD_VAR 0 1
73925: PPUSH
73926: CALL_OW 74
73930: PPUSH
73931: CALL_OW 115
// wait ( 0 0$20 ) ;
73935: LD_INT 700
73937: PPUSH
73938: CALL_OW 67
// SetSide ( un , your_side ) ;
73942: LD_VAR 0 1
73946: PPUSH
73947: LD_OWVAR 2
73951: PPUSH
73952: CALL_OW 235
// end ;
73956: PPOPN 2
73958: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
73959: LD_EXP 63
73963: PUSH
73964: LD_EXP 96
73968: AND
73969: IFFALSE 74075
73971: GO 73973
73973: DISABLE
73974: LD_INT 0
73976: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73977: LD_ADDR_VAR 0 1
73981: PUSH
73982: LD_INT 22
73984: PUSH
73985: LD_OWVAR 2
73989: PUSH
73990: EMPTY
73991: LIST
73992: LIST
73993: PUSH
73994: LD_INT 2
73996: PUSH
73997: LD_INT 30
73999: PUSH
74000: LD_INT 0
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: LD_INT 30
74009: PUSH
74010: LD_INT 1
74012: PUSH
74013: EMPTY
74014: LIST
74015: LIST
74016: PUSH
74017: EMPTY
74018: LIST
74019: LIST
74020: LIST
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: PPUSH
74026: CALL_OW 69
74030: ST_TO_ADDR
// if not depot then
74031: LD_VAR 0 1
74035: NOT
74036: IFFALSE 74040
// exit ;
74038: GO 74075
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
74040: LD_VAR 0 1
74044: PUSH
74045: LD_INT 1
74047: ARRAY
74048: PPUSH
74049: CALL_OW 250
74053: PPUSH
74054: LD_VAR 0 1
74058: PUSH
74059: LD_INT 1
74061: ARRAY
74062: PPUSH
74063: CALL_OW 251
74067: PPUSH
74068: LD_INT 70
74070: PPUSH
74071: CALL_OW 495
// end ;
74075: PPOPN 1
74077: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
74078: LD_EXP 63
74082: PUSH
74083: LD_EXP 97
74087: AND
74088: IFFALSE 74299
74090: GO 74092
74092: DISABLE
74093: LD_INT 0
74095: PPUSH
74096: PPUSH
74097: PPUSH
74098: PPUSH
74099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74100: LD_ADDR_VAR 0 5
74104: PUSH
74105: LD_INT 22
74107: PUSH
74108: LD_OWVAR 2
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 21
74119: PUSH
74120: LD_INT 1
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: EMPTY
74128: LIST
74129: LIST
74130: PPUSH
74131: CALL_OW 69
74135: ST_TO_ADDR
// if not tmp then
74136: LD_VAR 0 5
74140: NOT
74141: IFFALSE 74145
// exit ;
74143: GO 74299
// for i in tmp do
74145: LD_ADDR_VAR 0 1
74149: PUSH
74150: LD_VAR 0 5
74154: PUSH
74155: FOR_IN
74156: IFFALSE 74297
// begin d := rand ( 0 , 5 ) ;
74158: LD_ADDR_VAR 0 4
74162: PUSH
74163: LD_INT 0
74165: PPUSH
74166: LD_INT 5
74168: PPUSH
74169: CALL_OW 12
74173: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
74174: LD_ADDR_VAR 0 2
74178: PUSH
74179: LD_VAR 0 1
74183: PPUSH
74184: CALL_OW 250
74188: PPUSH
74189: LD_VAR 0 4
74193: PPUSH
74194: LD_INT 3
74196: PPUSH
74197: LD_INT 12
74199: PPUSH
74200: CALL_OW 12
74204: PPUSH
74205: CALL_OW 272
74209: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
74210: LD_ADDR_VAR 0 3
74214: PUSH
74215: LD_VAR 0 1
74219: PPUSH
74220: CALL_OW 251
74224: PPUSH
74225: LD_VAR 0 4
74229: PPUSH
74230: LD_INT 3
74232: PPUSH
74233: LD_INT 12
74235: PPUSH
74236: CALL_OW 12
74240: PPUSH
74241: CALL_OW 273
74245: ST_TO_ADDR
// if ValidHex ( x , y ) then
74246: LD_VAR 0 2
74250: PPUSH
74251: LD_VAR 0 3
74255: PPUSH
74256: CALL_OW 488
74260: IFFALSE 74295
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
74262: LD_VAR 0 1
74266: PPUSH
74267: LD_VAR 0 2
74271: PPUSH
74272: LD_VAR 0 3
74276: PPUSH
74277: LD_INT 3
74279: PPUSH
74280: LD_INT 6
74282: PPUSH
74283: CALL_OW 12
74287: PPUSH
74288: LD_INT 1
74290: PPUSH
74291: CALL_OW 483
// end ;
74295: GO 74155
74297: POP
74298: POP
// end ;
74299: PPOPN 5
74301: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
74302: LD_EXP 63
74306: PUSH
74307: LD_EXP 98
74311: AND
74312: IFFALSE 74406
74314: GO 74316
74316: DISABLE
74317: LD_INT 0
74319: PPUSH
74320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
74321: LD_ADDR_VAR 0 2
74325: PUSH
74326: LD_INT 22
74328: PUSH
74329: LD_OWVAR 2
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: PUSH
74338: LD_INT 32
74340: PUSH
74341: LD_INT 1
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: PUSH
74348: LD_INT 21
74350: PUSH
74351: LD_INT 2
74353: PUSH
74354: EMPTY
74355: LIST
74356: LIST
74357: PUSH
74358: EMPTY
74359: LIST
74360: LIST
74361: LIST
74362: PPUSH
74363: CALL_OW 69
74367: ST_TO_ADDR
// if not tmp then
74368: LD_VAR 0 2
74372: NOT
74373: IFFALSE 74377
// exit ;
74375: GO 74406
// for i in tmp do
74377: LD_ADDR_VAR 0 1
74381: PUSH
74382: LD_VAR 0 2
74386: PUSH
74387: FOR_IN
74388: IFFALSE 74404
// SetFuel ( i , 0 ) ;
74390: LD_VAR 0 1
74394: PPUSH
74395: LD_INT 0
74397: PPUSH
74398: CALL_OW 240
74402: GO 74387
74404: POP
74405: POP
// end ;
74406: PPOPN 2
74408: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
74409: LD_EXP 63
74413: PUSH
74414: LD_EXP 99
74418: AND
74419: IFFALSE 74485
74421: GO 74423
74423: DISABLE
74424: LD_INT 0
74426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74427: LD_ADDR_VAR 0 1
74431: PUSH
74432: LD_INT 22
74434: PUSH
74435: LD_OWVAR 2
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: PUSH
74444: LD_INT 30
74446: PUSH
74447: LD_INT 29
74449: PUSH
74450: EMPTY
74451: LIST
74452: LIST
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: PPUSH
74458: CALL_OW 69
74462: ST_TO_ADDR
// if not tmp then
74463: LD_VAR 0 1
74467: NOT
74468: IFFALSE 74472
// exit ;
74470: GO 74485
// DestroyUnit ( tmp [ 1 ] ) ;
74472: LD_VAR 0 1
74476: PUSH
74477: LD_INT 1
74479: ARRAY
74480: PPUSH
74481: CALL_OW 65
// end ;
74485: PPOPN 1
74487: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
74488: LD_EXP 63
74492: PUSH
74493: LD_EXP 101
74497: AND
74498: IFFALSE 74627
74500: GO 74502
74502: DISABLE
74503: LD_INT 0
74505: PPUSH
// begin uc_side := 0 ;
74506: LD_ADDR_OWVAR 20
74510: PUSH
74511: LD_INT 0
74513: ST_TO_ADDR
// uc_nation := nation_arabian ;
74514: LD_ADDR_OWVAR 21
74518: PUSH
74519: LD_INT 2
74521: ST_TO_ADDR
// hc_gallery :=  ;
74522: LD_ADDR_OWVAR 33
74526: PUSH
74527: LD_STRING 
74529: ST_TO_ADDR
// hc_name :=  ;
74530: LD_ADDR_OWVAR 26
74534: PUSH
74535: LD_STRING 
74537: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
74538: LD_INT 1
74540: PPUSH
74541: LD_INT 11
74543: PPUSH
74544: LD_INT 10
74546: PPUSH
74547: CALL_OW 380
// un := CreateHuman ;
74551: LD_ADDR_VAR 0 1
74555: PUSH
74556: CALL_OW 44
74560: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74561: LD_VAR 0 1
74565: PPUSH
74566: LD_INT 1
74568: PPUSH
74569: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
74573: LD_INT 35
74575: PPUSH
74576: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74580: LD_VAR 0 1
74584: PPUSH
74585: LD_INT 22
74587: PUSH
74588: LD_OWVAR 2
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PPUSH
74597: CALL_OW 69
74601: PPUSH
74602: LD_VAR 0 1
74606: PPUSH
74607: CALL_OW 74
74611: PPUSH
74612: CALL_OW 115
// until IsDead ( un ) ;
74616: LD_VAR 0 1
74620: PPUSH
74621: CALL_OW 301
74625: IFFALSE 74573
// end ;
74627: PPOPN 1
74629: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
74630: LD_EXP 63
74634: PUSH
74635: LD_EXP 103
74639: AND
74640: IFFALSE 74652
74642: GO 74644
74644: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
74645: LD_STRING earthquake(getX(game), 0, 32)
74647: PPUSH
74648: CALL_OW 559
74652: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
74653: LD_EXP 63
74657: PUSH
74658: LD_EXP 104
74662: AND
74663: IFFALSE 74754
74665: GO 74667
74667: DISABLE
74668: LD_INT 0
74670: PPUSH
// begin enable ;
74671: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
74672: LD_ADDR_VAR 0 1
74676: PUSH
74677: LD_INT 22
74679: PUSH
74680: LD_OWVAR 2
74684: PUSH
74685: EMPTY
74686: LIST
74687: LIST
74688: PUSH
74689: LD_INT 21
74691: PUSH
74692: LD_INT 2
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: PUSH
74699: LD_INT 33
74701: PUSH
74702: LD_INT 3
74704: PUSH
74705: EMPTY
74706: LIST
74707: LIST
74708: PUSH
74709: EMPTY
74710: LIST
74711: LIST
74712: LIST
74713: PPUSH
74714: CALL_OW 69
74718: ST_TO_ADDR
// if not tmp then
74719: LD_VAR 0 1
74723: NOT
74724: IFFALSE 74728
// exit ;
74726: GO 74754
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74728: LD_VAR 0 1
74732: PUSH
74733: LD_INT 1
74735: PPUSH
74736: LD_VAR 0 1
74740: PPUSH
74741: CALL_OW 12
74745: ARRAY
74746: PPUSH
74747: LD_INT 1
74749: PPUSH
74750: CALL_OW 234
// end ;
74754: PPOPN 1
74756: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
74757: LD_EXP 63
74761: PUSH
74762: LD_EXP 105
74766: AND
74767: IFFALSE 74908
74769: GO 74771
74771: DISABLE
74772: LD_INT 0
74774: PPUSH
74775: PPUSH
74776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74777: LD_ADDR_VAR 0 3
74781: PUSH
74782: LD_INT 22
74784: PUSH
74785: LD_OWVAR 2
74789: PUSH
74790: EMPTY
74791: LIST
74792: LIST
74793: PUSH
74794: LD_INT 25
74796: PUSH
74797: LD_INT 1
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PUSH
74804: EMPTY
74805: LIST
74806: LIST
74807: PPUSH
74808: CALL_OW 69
74812: ST_TO_ADDR
// if not tmp then
74813: LD_VAR 0 3
74817: NOT
74818: IFFALSE 74822
// exit ;
74820: GO 74908
// un := tmp [ rand ( 1 , tmp ) ] ;
74822: LD_ADDR_VAR 0 2
74826: PUSH
74827: LD_VAR 0 3
74831: PUSH
74832: LD_INT 1
74834: PPUSH
74835: LD_VAR 0 3
74839: PPUSH
74840: CALL_OW 12
74844: ARRAY
74845: ST_TO_ADDR
// if Crawls ( un ) then
74846: LD_VAR 0 2
74850: PPUSH
74851: CALL_OW 318
74855: IFFALSE 74866
// ComWalk ( un ) ;
74857: LD_VAR 0 2
74861: PPUSH
74862: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
74866: LD_VAR 0 2
74870: PPUSH
74871: LD_INT 9
74873: PPUSH
74874: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
74878: LD_INT 28
74880: PPUSH
74881: LD_OWVAR 2
74885: PPUSH
74886: LD_INT 2
74888: PPUSH
74889: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
74893: LD_INT 29
74895: PPUSH
74896: LD_OWVAR 2
74900: PPUSH
74901: LD_INT 2
74903: PPUSH
74904: CALL_OW 322
// end ;
74908: PPOPN 3
74910: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
74911: LD_EXP 63
74915: PUSH
74916: LD_EXP 106
74920: AND
74921: IFFALSE 75032
74923: GO 74925
74925: DISABLE
74926: LD_INT 0
74928: PPUSH
74929: PPUSH
74930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74931: LD_ADDR_VAR 0 3
74935: PUSH
74936: LD_INT 22
74938: PUSH
74939: LD_OWVAR 2
74943: PUSH
74944: EMPTY
74945: LIST
74946: LIST
74947: PUSH
74948: LD_INT 25
74950: PUSH
74951: LD_INT 1
74953: PUSH
74954: EMPTY
74955: LIST
74956: LIST
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: PPUSH
74962: CALL_OW 69
74966: ST_TO_ADDR
// if not tmp then
74967: LD_VAR 0 3
74971: NOT
74972: IFFALSE 74976
// exit ;
74974: GO 75032
// un := tmp [ rand ( 1 , tmp ) ] ;
74976: LD_ADDR_VAR 0 2
74980: PUSH
74981: LD_VAR 0 3
74985: PUSH
74986: LD_INT 1
74988: PPUSH
74989: LD_VAR 0 3
74993: PPUSH
74994: CALL_OW 12
74998: ARRAY
74999: ST_TO_ADDR
// if Crawls ( un ) then
75000: LD_VAR 0 2
75004: PPUSH
75005: CALL_OW 318
75009: IFFALSE 75020
// ComWalk ( un ) ;
75011: LD_VAR 0 2
75015: PPUSH
75016: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75020: LD_VAR 0 2
75024: PPUSH
75025: LD_INT 8
75027: PPUSH
75028: CALL_OW 336
// end ;
75032: PPOPN 3
75034: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
75035: LD_EXP 63
75039: PUSH
75040: LD_EXP 107
75044: AND
75045: IFFALSE 75189
75047: GO 75049
75049: DISABLE
75050: LD_INT 0
75052: PPUSH
75053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
75054: LD_ADDR_VAR 0 2
75058: PUSH
75059: LD_INT 22
75061: PUSH
75062: LD_OWVAR 2
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: PUSH
75071: LD_INT 21
75073: PUSH
75074: LD_INT 2
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PUSH
75081: LD_INT 2
75083: PUSH
75084: LD_INT 34
75086: PUSH
75087: LD_INT 12
75089: PUSH
75090: EMPTY
75091: LIST
75092: LIST
75093: PUSH
75094: LD_INT 34
75096: PUSH
75097: LD_INT 51
75099: PUSH
75100: EMPTY
75101: LIST
75102: LIST
75103: PUSH
75104: LD_INT 34
75106: PUSH
75107: LD_INT 32
75109: PUSH
75110: EMPTY
75111: LIST
75112: LIST
75113: PUSH
75114: EMPTY
75115: LIST
75116: LIST
75117: LIST
75118: LIST
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: LIST
75124: PPUSH
75125: CALL_OW 69
75129: ST_TO_ADDR
// if not tmp then
75130: LD_VAR 0 2
75134: NOT
75135: IFFALSE 75139
// exit ;
75137: GO 75189
// for i in tmp do
75139: LD_ADDR_VAR 0 1
75143: PUSH
75144: LD_VAR 0 2
75148: PUSH
75149: FOR_IN
75150: IFFALSE 75187
// if GetCargo ( i , mat_artifact ) = 0 then
75152: LD_VAR 0 1
75156: PPUSH
75157: LD_INT 4
75159: PPUSH
75160: CALL_OW 289
75164: PUSH
75165: LD_INT 0
75167: EQUAL
75168: IFFALSE 75185
// SetCargo ( i , mat_siberit , 100 ) ;
75170: LD_VAR 0 1
75174: PPUSH
75175: LD_INT 3
75177: PPUSH
75178: LD_INT 100
75180: PPUSH
75181: CALL_OW 290
75185: GO 75149
75187: POP
75188: POP
// end ;
75189: PPOPN 2
75191: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
75192: LD_EXP 63
75196: PUSH
75197: LD_EXP 108
75201: AND
75202: IFFALSE 75385
75204: GO 75206
75206: DISABLE
75207: LD_INT 0
75209: PPUSH
75210: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75211: LD_ADDR_VAR 0 2
75215: PUSH
75216: LD_INT 22
75218: PUSH
75219: LD_OWVAR 2
75223: PUSH
75224: EMPTY
75225: LIST
75226: LIST
75227: PPUSH
75228: CALL_OW 69
75232: ST_TO_ADDR
// if not tmp then
75233: LD_VAR 0 2
75237: NOT
75238: IFFALSE 75242
// exit ;
75240: GO 75385
// for i := 1 to 2 do
75242: LD_ADDR_VAR 0 1
75246: PUSH
75247: DOUBLE
75248: LD_INT 1
75250: DEC
75251: ST_TO_ADDR
75252: LD_INT 2
75254: PUSH
75255: FOR_TO
75256: IFFALSE 75383
// begin uc_side := your_side ;
75258: LD_ADDR_OWVAR 20
75262: PUSH
75263: LD_OWVAR 2
75267: ST_TO_ADDR
// uc_nation := nation_american ;
75268: LD_ADDR_OWVAR 21
75272: PUSH
75273: LD_INT 1
75275: ST_TO_ADDR
// vc_chassis := us_morphling ;
75276: LD_ADDR_OWVAR 37
75280: PUSH
75281: LD_INT 5
75283: ST_TO_ADDR
// vc_engine := engine_siberite ;
75284: LD_ADDR_OWVAR 39
75288: PUSH
75289: LD_INT 3
75291: ST_TO_ADDR
// vc_control := control_computer ;
75292: LD_ADDR_OWVAR 38
75296: PUSH
75297: LD_INT 3
75299: ST_TO_ADDR
// vc_weapon := us_double_laser ;
75300: LD_ADDR_OWVAR 40
75304: PUSH
75305: LD_INT 10
75307: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
75308: LD_VAR 0 2
75312: PUSH
75313: LD_INT 1
75315: ARRAY
75316: PPUSH
75317: CALL_OW 310
75321: NOT
75322: IFFALSE 75369
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
75324: CALL_OW 45
75328: PPUSH
75329: LD_VAR 0 2
75333: PUSH
75334: LD_INT 1
75336: ARRAY
75337: PPUSH
75338: CALL_OW 250
75342: PPUSH
75343: LD_VAR 0 2
75347: PUSH
75348: LD_INT 1
75350: ARRAY
75351: PPUSH
75352: CALL_OW 251
75356: PPUSH
75357: LD_INT 12
75359: PPUSH
75360: LD_INT 1
75362: PPUSH
75363: CALL_OW 50
75367: GO 75381
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
75369: CALL_OW 45
75373: PPUSH
75374: LD_INT 1
75376: PPUSH
75377: CALL_OW 51
// end ;
75381: GO 75255
75383: POP
75384: POP
// end ;
75385: PPOPN 2
75387: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
75388: LD_EXP 63
75392: PUSH
75393: LD_EXP 109
75397: AND
75398: IFFALSE 75620
75400: GO 75402
75402: DISABLE
75403: LD_INT 0
75405: PPUSH
75406: PPUSH
75407: PPUSH
75408: PPUSH
75409: PPUSH
75410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75411: LD_ADDR_VAR 0 6
75415: PUSH
75416: LD_INT 22
75418: PUSH
75419: LD_OWVAR 2
75423: PUSH
75424: EMPTY
75425: LIST
75426: LIST
75427: PUSH
75428: LD_INT 21
75430: PUSH
75431: LD_INT 1
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: PUSH
75438: LD_INT 3
75440: PUSH
75441: LD_INT 23
75443: PUSH
75444: LD_INT 0
75446: PUSH
75447: EMPTY
75448: LIST
75449: LIST
75450: PUSH
75451: EMPTY
75452: LIST
75453: LIST
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: LIST
75459: PPUSH
75460: CALL_OW 69
75464: ST_TO_ADDR
// if not tmp then
75465: LD_VAR 0 6
75469: NOT
75470: IFFALSE 75474
// exit ;
75472: GO 75620
// s1 := rand ( 1 , 4 ) ;
75474: LD_ADDR_VAR 0 2
75478: PUSH
75479: LD_INT 1
75481: PPUSH
75482: LD_INT 4
75484: PPUSH
75485: CALL_OW 12
75489: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
75490: LD_ADDR_VAR 0 4
75494: PUSH
75495: LD_VAR 0 6
75499: PUSH
75500: LD_INT 1
75502: ARRAY
75503: PPUSH
75504: LD_VAR 0 2
75508: PPUSH
75509: CALL_OW 259
75513: ST_TO_ADDR
// if s1 = 1 then
75514: LD_VAR 0 2
75518: PUSH
75519: LD_INT 1
75521: EQUAL
75522: IFFALSE 75542
// s2 := rand ( 2 , 4 ) else
75524: LD_ADDR_VAR 0 3
75528: PUSH
75529: LD_INT 2
75531: PPUSH
75532: LD_INT 4
75534: PPUSH
75535: CALL_OW 12
75539: ST_TO_ADDR
75540: GO 75550
// s2 := 1 ;
75542: LD_ADDR_VAR 0 3
75546: PUSH
75547: LD_INT 1
75549: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
75550: LD_ADDR_VAR 0 5
75554: PUSH
75555: LD_VAR 0 6
75559: PUSH
75560: LD_INT 1
75562: ARRAY
75563: PPUSH
75564: LD_VAR 0 3
75568: PPUSH
75569: CALL_OW 259
75573: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
75574: LD_VAR 0 6
75578: PUSH
75579: LD_INT 1
75581: ARRAY
75582: PPUSH
75583: LD_VAR 0 2
75587: PPUSH
75588: LD_VAR 0 5
75592: PPUSH
75593: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
75597: LD_VAR 0 6
75601: PUSH
75602: LD_INT 1
75604: ARRAY
75605: PPUSH
75606: LD_VAR 0 3
75610: PPUSH
75611: LD_VAR 0 4
75615: PPUSH
75616: CALL_OW 237
// end ;
75620: PPOPN 6
75622: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
75623: LD_EXP 63
75627: PUSH
75628: LD_EXP 110
75632: AND
75633: IFFALSE 75712
75635: GO 75637
75637: DISABLE
75638: LD_INT 0
75640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
75641: LD_ADDR_VAR 0 1
75645: PUSH
75646: LD_INT 22
75648: PUSH
75649: LD_OWVAR 2
75653: PUSH
75654: EMPTY
75655: LIST
75656: LIST
75657: PUSH
75658: LD_INT 30
75660: PUSH
75661: LD_INT 3
75663: PUSH
75664: EMPTY
75665: LIST
75666: LIST
75667: PUSH
75668: EMPTY
75669: LIST
75670: LIST
75671: PPUSH
75672: CALL_OW 69
75676: ST_TO_ADDR
// if not tmp then
75677: LD_VAR 0 1
75681: NOT
75682: IFFALSE 75686
// exit ;
75684: GO 75712
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75686: LD_VAR 0 1
75690: PUSH
75691: LD_INT 1
75693: PPUSH
75694: LD_VAR 0 1
75698: PPUSH
75699: CALL_OW 12
75703: ARRAY
75704: PPUSH
75705: LD_INT 1
75707: PPUSH
75708: CALL_OW 234
// end ;
75712: PPOPN 1
75714: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
75715: LD_EXP 63
75719: PUSH
75720: LD_EXP 111
75724: AND
75725: IFFALSE 75837
75727: GO 75729
75729: DISABLE
75730: LD_INT 0
75732: PPUSH
75733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
75734: LD_ADDR_VAR 0 2
75738: PUSH
75739: LD_INT 22
75741: PUSH
75742: LD_OWVAR 2
75746: PUSH
75747: EMPTY
75748: LIST
75749: LIST
75750: PUSH
75751: LD_INT 2
75753: PUSH
75754: LD_INT 30
75756: PUSH
75757: LD_INT 27
75759: PUSH
75760: EMPTY
75761: LIST
75762: LIST
75763: PUSH
75764: LD_INT 30
75766: PUSH
75767: LD_INT 26
75769: PUSH
75770: EMPTY
75771: LIST
75772: LIST
75773: PUSH
75774: LD_INT 30
75776: PUSH
75777: LD_INT 28
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: PUSH
75784: EMPTY
75785: LIST
75786: LIST
75787: LIST
75788: LIST
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: PPUSH
75794: CALL_OW 69
75798: ST_TO_ADDR
// if not tmp then
75799: LD_VAR 0 2
75803: NOT
75804: IFFALSE 75808
// exit ;
75806: GO 75837
// for i in tmp do
75808: LD_ADDR_VAR 0 1
75812: PUSH
75813: LD_VAR 0 2
75817: PUSH
75818: FOR_IN
75819: IFFALSE 75835
// SetLives ( i , 1 ) ;
75821: LD_VAR 0 1
75825: PPUSH
75826: LD_INT 1
75828: PPUSH
75829: CALL_OW 234
75833: GO 75818
75835: POP
75836: POP
// end ;
75837: PPOPN 2
75839: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
75840: LD_EXP 63
75844: PUSH
75845: LD_EXP 112
75849: AND
75850: IFFALSE 76137
75852: GO 75854
75854: DISABLE
75855: LD_INT 0
75857: PPUSH
75858: PPUSH
75859: PPUSH
// begin i := rand ( 1 , 7 ) ;
75860: LD_ADDR_VAR 0 1
75864: PUSH
75865: LD_INT 1
75867: PPUSH
75868: LD_INT 7
75870: PPUSH
75871: CALL_OW 12
75875: ST_TO_ADDR
// case i of 1 :
75876: LD_VAR 0 1
75880: PUSH
75881: LD_INT 1
75883: DOUBLE
75884: EQUAL
75885: IFTRUE 75889
75887: GO 75899
75889: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
75890: LD_STRING earthquake(getX(game), 0, 32)
75892: PPUSH
75893: CALL_OW 559
75897: GO 76137
75899: LD_INT 2
75901: DOUBLE
75902: EQUAL
75903: IFTRUE 75907
75905: GO 75921
75907: POP
// begin ToLua ( displayStucuk(); ) ;
75908: LD_STRING displayStucuk();
75910: PPUSH
75911: CALL_OW 559
// ResetFog ;
75915: CALL_OW 335
// end ; 3 :
75919: GO 76137
75921: LD_INT 3
75923: DOUBLE
75924: EQUAL
75925: IFTRUE 75929
75927: GO 76033
75929: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75930: LD_ADDR_VAR 0 2
75934: PUSH
75935: LD_INT 22
75937: PUSH
75938: LD_OWVAR 2
75942: PUSH
75943: EMPTY
75944: LIST
75945: LIST
75946: PUSH
75947: LD_INT 25
75949: PUSH
75950: LD_INT 1
75952: PUSH
75953: EMPTY
75954: LIST
75955: LIST
75956: PUSH
75957: EMPTY
75958: LIST
75959: LIST
75960: PPUSH
75961: CALL_OW 69
75965: ST_TO_ADDR
// if not tmp then
75966: LD_VAR 0 2
75970: NOT
75971: IFFALSE 75975
// exit ;
75973: GO 76137
// un := tmp [ rand ( 1 , tmp ) ] ;
75975: LD_ADDR_VAR 0 3
75979: PUSH
75980: LD_VAR 0 2
75984: PUSH
75985: LD_INT 1
75987: PPUSH
75988: LD_VAR 0 2
75992: PPUSH
75993: CALL_OW 12
75997: ARRAY
75998: ST_TO_ADDR
// if Crawls ( un ) then
75999: LD_VAR 0 3
76003: PPUSH
76004: CALL_OW 318
76008: IFFALSE 76019
// ComWalk ( un ) ;
76010: LD_VAR 0 3
76014: PPUSH
76015: CALL_OW 138
// SetClass ( un , class_mortar ) ;
76019: LD_VAR 0 3
76023: PPUSH
76024: LD_INT 8
76026: PPUSH
76027: CALL_OW 336
// end ; 4 :
76031: GO 76137
76033: LD_INT 4
76035: DOUBLE
76036: EQUAL
76037: IFTRUE 76041
76039: GO 76115
76041: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76042: LD_ADDR_VAR 0 2
76046: PUSH
76047: LD_INT 22
76049: PUSH
76050: LD_OWVAR 2
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: PUSH
76059: LD_INT 30
76061: PUSH
76062: LD_INT 29
76064: PUSH
76065: EMPTY
76066: LIST
76067: LIST
76068: PUSH
76069: EMPTY
76070: LIST
76071: LIST
76072: PPUSH
76073: CALL_OW 69
76077: ST_TO_ADDR
// if not tmp then
76078: LD_VAR 0 2
76082: NOT
76083: IFFALSE 76087
// exit ;
76085: GO 76137
// CenterNowOnUnits ( tmp [ 1 ] ) ;
76087: LD_VAR 0 2
76091: PUSH
76092: LD_INT 1
76094: ARRAY
76095: PPUSH
76096: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
76100: LD_VAR 0 2
76104: PUSH
76105: LD_INT 1
76107: ARRAY
76108: PPUSH
76109: CALL_OW 65
// end ; 5 .. 7 :
76113: GO 76137
76115: LD_INT 5
76117: DOUBLE
76118: GREATEREQUAL
76119: IFFALSE 76127
76121: LD_INT 7
76123: DOUBLE
76124: LESSEQUAL
76125: IFTRUE 76129
76127: GO 76136
76129: POP
// StreamSibBomb ; end ;
76130: CALL 72374 0 0
76134: GO 76137
76136: POP
// end ;
76137: PPOPN 3
76139: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
76140: LD_EXP 63
76144: PUSH
76145: LD_EXP 113
76149: AND
76150: IFFALSE 76306
76152: GO 76154
76154: DISABLE
76155: LD_INT 0
76157: PPUSH
76158: PPUSH
76159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
76160: LD_ADDR_VAR 0 2
76164: PUSH
76165: LD_INT 81
76167: PUSH
76168: LD_OWVAR 2
76172: PUSH
76173: EMPTY
76174: LIST
76175: LIST
76176: PUSH
76177: LD_INT 2
76179: PUSH
76180: LD_INT 21
76182: PUSH
76183: LD_INT 1
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: PUSH
76190: LD_INT 21
76192: PUSH
76193: LD_INT 2
76195: PUSH
76196: EMPTY
76197: LIST
76198: LIST
76199: PUSH
76200: EMPTY
76201: LIST
76202: LIST
76203: LIST
76204: PUSH
76205: EMPTY
76206: LIST
76207: LIST
76208: PPUSH
76209: CALL_OW 69
76213: ST_TO_ADDR
// if not tmp then
76214: LD_VAR 0 2
76218: NOT
76219: IFFALSE 76223
// exit ;
76221: GO 76306
// p := 0 ;
76223: LD_ADDR_VAR 0 3
76227: PUSH
76228: LD_INT 0
76230: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76231: LD_INT 35
76233: PPUSH
76234: CALL_OW 67
// p := p + 1 ;
76238: LD_ADDR_VAR 0 3
76242: PUSH
76243: LD_VAR 0 3
76247: PUSH
76248: LD_INT 1
76250: PLUS
76251: ST_TO_ADDR
// for i in tmp do
76252: LD_ADDR_VAR 0 1
76256: PUSH
76257: LD_VAR 0 2
76261: PUSH
76262: FOR_IN
76263: IFFALSE 76294
// if GetLives ( i ) < 1000 then
76265: LD_VAR 0 1
76269: PPUSH
76270: CALL_OW 256
76274: PUSH
76275: LD_INT 1000
76277: LESS
76278: IFFALSE 76292
// SetLives ( i , 1000 ) ;
76280: LD_VAR 0 1
76284: PPUSH
76285: LD_INT 1000
76287: PPUSH
76288: CALL_OW 234
76292: GO 76262
76294: POP
76295: POP
// until p > 20 ;
76296: LD_VAR 0 3
76300: PUSH
76301: LD_INT 20
76303: GREATER
76304: IFFALSE 76231
// end ;
76306: PPOPN 3
76308: END
// every 0 0$1 trigger StreamModeActive and sTime do
76309: LD_EXP 63
76313: PUSH
76314: LD_EXP 114
76318: AND
76319: IFFALSE 76354
76321: GO 76323
76323: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
76324: LD_INT 28
76326: PPUSH
76327: LD_OWVAR 2
76331: PPUSH
76332: LD_INT 2
76334: PPUSH
76335: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
76339: LD_INT 30
76341: PPUSH
76342: LD_OWVAR 2
76346: PPUSH
76347: LD_INT 2
76349: PPUSH
76350: CALL_OW 322
// end ;
76354: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
76355: LD_EXP 63
76359: PUSH
76360: LD_EXP 115
76364: AND
76365: IFFALSE 76486
76367: GO 76369
76369: DISABLE
76370: LD_INT 0
76372: PPUSH
76373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76374: LD_ADDR_VAR 0 2
76378: PUSH
76379: LD_INT 22
76381: PUSH
76382: LD_OWVAR 2
76386: PUSH
76387: EMPTY
76388: LIST
76389: LIST
76390: PUSH
76391: LD_INT 21
76393: PUSH
76394: LD_INT 1
76396: PUSH
76397: EMPTY
76398: LIST
76399: LIST
76400: PUSH
76401: LD_INT 3
76403: PUSH
76404: LD_INT 23
76406: PUSH
76407: LD_INT 0
76409: PUSH
76410: EMPTY
76411: LIST
76412: LIST
76413: PUSH
76414: EMPTY
76415: LIST
76416: LIST
76417: PUSH
76418: EMPTY
76419: LIST
76420: LIST
76421: LIST
76422: PPUSH
76423: CALL_OW 69
76427: ST_TO_ADDR
// if not tmp then
76428: LD_VAR 0 2
76432: NOT
76433: IFFALSE 76437
// exit ;
76435: GO 76486
// for i in tmp do
76437: LD_ADDR_VAR 0 1
76441: PUSH
76442: LD_VAR 0 2
76446: PUSH
76447: FOR_IN
76448: IFFALSE 76484
// begin if Crawls ( i ) then
76450: LD_VAR 0 1
76454: PPUSH
76455: CALL_OW 318
76459: IFFALSE 76470
// ComWalk ( i ) ;
76461: LD_VAR 0 1
76465: PPUSH
76466: CALL_OW 138
// SetClass ( i , 2 ) ;
76470: LD_VAR 0 1
76474: PPUSH
76475: LD_INT 2
76477: PPUSH
76478: CALL_OW 336
// end ;
76482: GO 76447
76484: POP
76485: POP
// end ;
76486: PPOPN 2
76488: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
76489: LD_EXP 63
76493: PUSH
76494: LD_EXP 116
76498: AND
76499: IFFALSE 76787
76501: GO 76503
76503: DISABLE
76504: LD_INT 0
76506: PPUSH
76507: PPUSH
76508: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
76509: LD_OWVAR 2
76513: PPUSH
76514: LD_INT 9
76516: PPUSH
76517: LD_INT 1
76519: PPUSH
76520: LD_INT 1
76522: PPUSH
76523: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
76527: LD_INT 9
76529: PPUSH
76530: LD_OWVAR 2
76534: PPUSH
76535: CALL_OW 343
// uc_side := 9 ;
76539: LD_ADDR_OWVAR 20
76543: PUSH
76544: LD_INT 9
76546: ST_TO_ADDR
// uc_nation := 2 ;
76547: LD_ADDR_OWVAR 21
76551: PUSH
76552: LD_INT 2
76554: ST_TO_ADDR
// hc_name := Dark Warrior ;
76555: LD_ADDR_OWVAR 26
76559: PUSH
76560: LD_STRING Dark Warrior
76562: ST_TO_ADDR
// hc_gallery :=  ;
76563: LD_ADDR_OWVAR 33
76567: PUSH
76568: LD_STRING 
76570: ST_TO_ADDR
// hc_noskilllimit := true ;
76571: LD_ADDR_OWVAR 76
76575: PUSH
76576: LD_INT 1
76578: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
76579: LD_ADDR_OWVAR 31
76583: PUSH
76584: LD_INT 30
76586: PUSH
76587: LD_INT 30
76589: PUSH
76590: LD_INT 30
76592: PUSH
76593: LD_INT 30
76595: PUSH
76596: EMPTY
76597: LIST
76598: LIST
76599: LIST
76600: LIST
76601: ST_TO_ADDR
// un := CreateHuman ;
76602: LD_ADDR_VAR 0 3
76606: PUSH
76607: CALL_OW 44
76611: ST_TO_ADDR
// hc_noskilllimit := false ;
76612: LD_ADDR_OWVAR 76
76616: PUSH
76617: LD_INT 0
76619: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76620: LD_VAR 0 3
76624: PPUSH
76625: LD_INT 1
76627: PPUSH
76628: CALL_OW 51
// ToLua ( playRanger() ) ;
76632: LD_STRING playRanger()
76634: PPUSH
76635: CALL_OW 559
// p := 0 ;
76639: LD_ADDR_VAR 0 2
76643: PUSH
76644: LD_INT 0
76646: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76647: LD_INT 35
76649: PPUSH
76650: CALL_OW 67
// p := p + 1 ;
76654: LD_ADDR_VAR 0 2
76658: PUSH
76659: LD_VAR 0 2
76663: PUSH
76664: LD_INT 1
76666: PLUS
76667: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
76668: LD_VAR 0 3
76672: PPUSH
76673: CALL_OW 256
76677: PUSH
76678: LD_INT 1000
76680: LESS
76681: IFFALSE 76695
// SetLives ( un , 1000 ) ;
76683: LD_VAR 0 3
76687: PPUSH
76688: LD_INT 1000
76690: PPUSH
76691: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
76695: LD_VAR 0 3
76699: PPUSH
76700: LD_INT 81
76702: PUSH
76703: LD_OWVAR 2
76707: PUSH
76708: EMPTY
76709: LIST
76710: LIST
76711: PUSH
76712: LD_INT 91
76714: PUSH
76715: LD_VAR 0 3
76719: PUSH
76720: LD_INT 30
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: LIST
76727: PUSH
76728: EMPTY
76729: LIST
76730: LIST
76731: PPUSH
76732: CALL_OW 69
76736: PPUSH
76737: LD_VAR 0 3
76741: PPUSH
76742: CALL_OW 74
76746: PPUSH
76747: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
76751: LD_VAR 0 2
76755: PUSH
76756: LD_INT 80
76758: GREATER
76759: PUSH
76760: LD_VAR 0 3
76764: PPUSH
76765: CALL_OW 301
76769: OR
76770: IFFALSE 76647
// if un then
76772: LD_VAR 0 3
76776: IFFALSE 76787
// RemoveUnit ( un ) ;
76778: LD_VAR 0 3
76782: PPUSH
76783: CALL_OW 64
// end ;
76787: PPOPN 3
76789: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
76790: LD_EXP 117
76794: IFFALSE 76910
76796: GO 76798
76798: DISABLE
76799: LD_INT 0
76801: PPUSH
76802: PPUSH
76803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
76804: LD_ADDR_VAR 0 2
76808: PUSH
76809: LD_INT 81
76811: PUSH
76812: LD_OWVAR 2
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: PUSH
76821: LD_INT 21
76823: PUSH
76824: LD_INT 1
76826: PUSH
76827: EMPTY
76828: LIST
76829: LIST
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: PPUSH
76835: CALL_OW 69
76839: ST_TO_ADDR
// ToLua ( playComputer() ) ;
76840: LD_STRING playComputer()
76842: PPUSH
76843: CALL_OW 559
// if not tmp then
76847: LD_VAR 0 2
76851: NOT
76852: IFFALSE 76856
// exit ;
76854: GO 76910
// for i in tmp do
76856: LD_ADDR_VAR 0 1
76860: PUSH
76861: LD_VAR 0 2
76865: PUSH
76866: FOR_IN
76867: IFFALSE 76908
// for j := 1 to 4 do
76869: LD_ADDR_VAR 0 3
76873: PUSH
76874: DOUBLE
76875: LD_INT 1
76877: DEC
76878: ST_TO_ADDR
76879: LD_INT 4
76881: PUSH
76882: FOR_TO
76883: IFFALSE 76904
// SetSkill ( i , j , 10 ) ;
76885: LD_VAR 0 1
76889: PPUSH
76890: LD_VAR 0 3
76894: PPUSH
76895: LD_INT 10
76897: PPUSH
76898: CALL_OW 237
76902: GO 76882
76904: POP
76905: POP
76906: GO 76866
76908: POP
76909: POP
// end ;
76910: PPOPN 3
76912: END
// every 0 0$1 trigger s30 do var i , tmp ;
76913: LD_EXP 118
76917: IFFALSE 76986
76919: GO 76921
76921: DISABLE
76922: LD_INT 0
76924: PPUSH
76925: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76926: LD_ADDR_VAR 0 2
76930: PUSH
76931: LD_INT 22
76933: PUSH
76934: LD_OWVAR 2
76938: PUSH
76939: EMPTY
76940: LIST
76941: LIST
76942: PPUSH
76943: CALL_OW 69
76947: ST_TO_ADDR
// if not tmp then
76948: LD_VAR 0 2
76952: NOT
76953: IFFALSE 76957
// exit ;
76955: GO 76986
// for i in tmp do
76957: LD_ADDR_VAR 0 1
76961: PUSH
76962: LD_VAR 0 2
76966: PUSH
76967: FOR_IN
76968: IFFALSE 76984
// SetLives ( i , 300 ) ;
76970: LD_VAR 0 1
76974: PPUSH
76975: LD_INT 300
76977: PPUSH
76978: CALL_OW 234
76982: GO 76967
76984: POP
76985: POP
// end ;
76986: PPOPN 2
76988: END
// every 0 0$1 trigger s60 do var i , tmp ;
76989: LD_EXP 119
76993: IFFALSE 77062
76995: GO 76997
76997: DISABLE
76998: LD_INT 0
77000: PPUSH
77001: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77002: LD_ADDR_VAR 0 2
77006: PUSH
77007: LD_INT 22
77009: PUSH
77010: LD_OWVAR 2
77014: PUSH
77015: EMPTY
77016: LIST
77017: LIST
77018: PPUSH
77019: CALL_OW 69
77023: ST_TO_ADDR
// if not tmp then
77024: LD_VAR 0 2
77028: NOT
77029: IFFALSE 77033
// exit ;
77031: GO 77062
// for i in tmp do
77033: LD_ADDR_VAR 0 1
77037: PUSH
77038: LD_VAR 0 2
77042: PUSH
77043: FOR_IN
77044: IFFALSE 77060
// SetLives ( i , 600 ) ;
77046: LD_VAR 0 1
77050: PPUSH
77051: LD_INT 600
77053: PPUSH
77054: CALL_OW 234
77058: GO 77043
77060: POP
77061: POP
// end ;
77062: PPOPN 2
77064: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
77065: LD_INT 0
77067: PPUSH
// case cmd of 301 :
77068: LD_VAR 0 1
77072: PUSH
77073: LD_INT 301
77075: DOUBLE
77076: EQUAL
77077: IFTRUE 77081
77079: GO 77113
77081: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
77082: LD_VAR 0 6
77086: PPUSH
77087: LD_VAR 0 7
77091: PPUSH
77092: LD_VAR 0 8
77096: PPUSH
77097: LD_VAR 0 4
77101: PPUSH
77102: LD_VAR 0 5
77106: PPUSH
77107: CALL 78322 0 5
77111: GO 77234
77113: LD_INT 302
77115: DOUBLE
77116: EQUAL
77117: IFTRUE 77121
77119: GO 77158
77121: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
77122: LD_VAR 0 6
77126: PPUSH
77127: LD_VAR 0 7
77131: PPUSH
77132: LD_VAR 0 8
77136: PPUSH
77137: LD_VAR 0 9
77141: PPUSH
77142: LD_VAR 0 4
77146: PPUSH
77147: LD_VAR 0 5
77151: PPUSH
77152: CALL 78413 0 6
77156: GO 77234
77158: LD_INT 303
77160: DOUBLE
77161: EQUAL
77162: IFTRUE 77166
77164: GO 77203
77166: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
77167: LD_VAR 0 6
77171: PPUSH
77172: LD_VAR 0 7
77176: PPUSH
77177: LD_VAR 0 8
77181: PPUSH
77182: LD_VAR 0 9
77186: PPUSH
77187: LD_VAR 0 4
77191: PPUSH
77192: LD_VAR 0 5
77196: PPUSH
77197: CALL 77239 0 6
77201: GO 77234
77203: LD_INT 304
77205: DOUBLE
77206: EQUAL
77207: IFTRUE 77211
77209: GO 77233
77211: POP
// hHackTeleport ( unit , x , y ) ; end ;
77212: LD_VAR 0 2
77216: PPUSH
77217: LD_VAR 0 4
77221: PPUSH
77222: LD_VAR 0 5
77226: PPUSH
77227: CALL 79006 0 3
77231: GO 77234
77233: POP
// end ;
77234: LD_VAR 0 12
77238: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
77239: LD_INT 0
77241: PPUSH
77242: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
77243: LD_VAR 0 1
77247: PUSH
77248: LD_INT 1
77250: LESS
77251: PUSH
77252: LD_VAR 0 1
77256: PUSH
77257: LD_INT 3
77259: GREATER
77260: OR
77261: PUSH
77262: LD_VAR 0 5
77266: PPUSH
77267: LD_VAR 0 6
77271: PPUSH
77272: CALL_OW 428
77276: OR
77277: IFFALSE 77281
// exit ;
77279: GO 78009
// uc_side := your_side ;
77281: LD_ADDR_OWVAR 20
77285: PUSH
77286: LD_OWVAR 2
77290: ST_TO_ADDR
// uc_nation := nation ;
77291: LD_ADDR_OWVAR 21
77295: PUSH
77296: LD_VAR 0 1
77300: ST_TO_ADDR
// bc_level = 1 ;
77301: LD_ADDR_OWVAR 43
77305: PUSH
77306: LD_INT 1
77308: ST_TO_ADDR
// case btype of 1 :
77309: LD_VAR 0 2
77313: PUSH
77314: LD_INT 1
77316: DOUBLE
77317: EQUAL
77318: IFTRUE 77322
77320: GO 77333
77322: POP
// bc_type := b_depot ; 2 :
77323: LD_ADDR_OWVAR 42
77327: PUSH
77328: LD_INT 0
77330: ST_TO_ADDR
77331: GO 77953
77333: LD_INT 2
77335: DOUBLE
77336: EQUAL
77337: IFTRUE 77341
77339: GO 77352
77341: POP
// bc_type := b_warehouse ; 3 :
77342: LD_ADDR_OWVAR 42
77346: PUSH
77347: LD_INT 1
77349: ST_TO_ADDR
77350: GO 77953
77352: LD_INT 3
77354: DOUBLE
77355: EQUAL
77356: IFTRUE 77360
77358: GO 77371
77360: POP
// bc_type := b_lab ; 4 .. 9 :
77361: LD_ADDR_OWVAR 42
77365: PUSH
77366: LD_INT 6
77368: ST_TO_ADDR
77369: GO 77953
77371: LD_INT 4
77373: DOUBLE
77374: GREATEREQUAL
77375: IFFALSE 77383
77377: LD_INT 9
77379: DOUBLE
77380: LESSEQUAL
77381: IFTRUE 77385
77383: GO 77445
77385: POP
// begin bc_type := b_lab_half ;
77386: LD_ADDR_OWVAR 42
77390: PUSH
77391: LD_INT 7
77393: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
77394: LD_ADDR_OWVAR 44
77398: PUSH
77399: LD_INT 10
77401: PUSH
77402: LD_INT 11
77404: PUSH
77405: LD_INT 12
77407: PUSH
77408: LD_INT 15
77410: PUSH
77411: LD_INT 14
77413: PUSH
77414: LD_INT 13
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: LIST
77421: LIST
77422: LIST
77423: LIST
77424: PUSH
77425: LD_VAR 0 2
77429: PUSH
77430: LD_INT 3
77432: MINUS
77433: ARRAY
77434: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
77435: LD_ADDR_OWVAR 45
77439: PUSH
77440: LD_INT 9
77442: ST_TO_ADDR
// end ; 10 .. 13 :
77443: GO 77953
77445: LD_INT 10
77447: DOUBLE
77448: GREATEREQUAL
77449: IFFALSE 77457
77451: LD_INT 13
77453: DOUBLE
77454: LESSEQUAL
77455: IFTRUE 77459
77457: GO 77536
77459: POP
// begin bc_type := b_lab_full ;
77460: LD_ADDR_OWVAR 42
77464: PUSH
77465: LD_INT 8
77467: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
77468: LD_ADDR_OWVAR 44
77472: PUSH
77473: LD_INT 10
77475: PUSH
77476: LD_INT 12
77478: PUSH
77479: LD_INT 14
77481: PUSH
77482: LD_INT 13
77484: PUSH
77485: EMPTY
77486: LIST
77487: LIST
77488: LIST
77489: LIST
77490: PUSH
77491: LD_VAR 0 2
77495: PUSH
77496: LD_INT 9
77498: MINUS
77499: ARRAY
77500: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
77501: LD_ADDR_OWVAR 45
77505: PUSH
77506: LD_INT 11
77508: PUSH
77509: LD_INT 15
77511: PUSH
77512: LD_INT 12
77514: PUSH
77515: LD_INT 15
77517: PUSH
77518: EMPTY
77519: LIST
77520: LIST
77521: LIST
77522: LIST
77523: PUSH
77524: LD_VAR 0 2
77528: PUSH
77529: LD_INT 9
77531: MINUS
77532: ARRAY
77533: ST_TO_ADDR
// end ; 14 :
77534: GO 77953
77536: LD_INT 14
77538: DOUBLE
77539: EQUAL
77540: IFTRUE 77544
77542: GO 77555
77544: POP
// bc_type := b_workshop ; 15 :
77545: LD_ADDR_OWVAR 42
77549: PUSH
77550: LD_INT 2
77552: ST_TO_ADDR
77553: GO 77953
77555: LD_INT 15
77557: DOUBLE
77558: EQUAL
77559: IFTRUE 77563
77561: GO 77574
77563: POP
// bc_type := b_factory ; 16 :
77564: LD_ADDR_OWVAR 42
77568: PUSH
77569: LD_INT 3
77571: ST_TO_ADDR
77572: GO 77953
77574: LD_INT 16
77576: DOUBLE
77577: EQUAL
77578: IFTRUE 77582
77580: GO 77593
77582: POP
// bc_type := b_ext_gun ; 17 :
77583: LD_ADDR_OWVAR 42
77587: PUSH
77588: LD_INT 17
77590: ST_TO_ADDR
77591: GO 77953
77593: LD_INT 17
77595: DOUBLE
77596: EQUAL
77597: IFTRUE 77601
77599: GO 77629
77601: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
77602: LD_ADDR_OWVAR 42
77606: PUSH
77607: LD_INT 19
77609: PUSH
77610: LD_INT 23
77612: PUSH
77613: LD_INT 19
77615: PUSH
77616: EMPTY
77617: LIST
77618: LIST
77619: LIST
77620: PUSH
77621: LD_VAR 0 1
77625: ARRAY
77626: ST_TO_ADDR
77627: GO 77953
77629: LD_INT 18
77631: DOUBLE
77632: EQUAL
77633: IFTRUE 77637
77635: GO 77648
77637: POP
// bc_type := b_ext_radar ; 19 :
77638: LD_ADDR_OWVAR 42
77642: PUSH
77643: LD_INT 20
77645: ST_TO_ADDR
77646: GO 77953
77648: LD_INT 19
77650: DOUBLE
77651: EQUAL
77652: IFTRUE 77656
77654: GO 77667
77656: POP
// bc_type := b_ext_radio ; 20 :
77657: LD_ADDR_OWVAR 42
77661: PUSH
77662: LD_INT 22
77664: ST_TO_ADDR
77665: GO 77953
77667: LD_INT 20
77669: DOUBLE
77670: EQUAL
77671: IFTRUE 77675
77673: GO 77686
77675: POP
// bc_type := b_ext_siberium ; 21 :
77676: LD_ADDR_OWVAR 42
77680: PUSH
77681: LD_INT 21
77683: ST_TO_ADDR
77684: GO 77953
77686: LD_INT 21
77688: DOUBLE
77689: EQUAL
77690: IFTRUE 77694
77692: GO 77705
77694: POP
// bc_type := b_ext_computer ; 22 :
77695: LD_ADDR_OWVAR 42
77699: PUSH
77700: LD_INT 24
77702: ST_TO_ADDR
77703: GO 77953
77705: LD_INT 22
77707: DOUBLE
77708: EQUAL
77709: IFTRUE 77713
77711: GO 77724
77713: POP
// bc_type := b_ext_track ; 23 :
77714: LD_ADDR_OWVAR 42
77718: PUSH
77719: LD_INT 16
77721: ST_TO_ADDR
77722: GO 77953
77724: LD_INT 23
77726: DOUBLE
77727: EQUAL
77728: IFTRUE 77732
77730: GO 77743
77732: POP
// bc_type := b_ext_laser ; 24 :
77733: LD_ADDR_OWVAR 42
77737: PUSH
77738: LD_INT 25
77740: ST_TO_ADDR
77741: GO 77953
77743: LD_INT 24
77745: DOUBLE
77746: EQUAL
77747: IFTRUE 77751
77749: GO 77762
77751: POP
// bc_type := b_control_tower ; 25 :
77752: LD_ADDR_OWVAR 42
77756: PUSH
77757: LD_INT 36
77759: ST_TO_ADDR
77760: GO 77953
77762: LD_INT 25
77764: DOUBLE
77765: EQUAL
77766: IFTRUE 77770
77768: GO 77781
77770: POP
// bc_type := b_breastwork ; 26 :
77771: LD_ADDR_OWVAR 42
77775: PUSH
77776: LD_INT 31
77778: ST_TO_ADDR
77779: GO 77953
77781: LD_INT 26
77783: DOUBLE
77784: EQUAL
77785: IFTRUE 77789
77787: GO 77800
77789: POP
// bc_type := b_bunker ; 27 :
77790: LD_ADDR_OWVAR 42
77794: PUSH
77795: LD_INT 32
77797: ST_TO_ADDR
77798: GO 77953
77800: LD_INT 27
77802: DOUBLE
77803: EQUAL
77804: IFTRUE 77808
77806: GO 77819
77808: POP
// bc_type := b_turret ; 28 :
77809: LD_ADDR_OWVAR 42
77813: PUSH
77814: LD_INT 33
77816: ST_TO_ADDR
77817: GO 77953
77819: LD_INT 28
77821: DOUBLE
77822: EQUAL
77823: IFTRUE 77827
77825: GO 77838
77827: POP
// bc_type := b_armoury ; 29 :
77828: LD_ADDR_OWVAR 42
77832: PUSH
77833: LD_INT 4
77835: ST_TO_ADDR
77836: GO 77953
77838: LD_INT 29
77840: DOUBLE
77841: EQUAL
77842: IFTRUE 77846
77844: GO 77857
77846: POP
// bc_type := b_barracks ; 30 :
77847: LD_ADDR_OWVAR 42
77851: PUSH
77852: LD_INT 5
77854: ST_TO_ADDR
77855: GO 77953
77857: LD_INT 30
77859: DOUBLE
77860: EQUAL
77861: IFTRUE 77865
77863: GO 77876
77865: POP
// bc_type := b_solar_power ; 31 :
77866: LD_ADDR_OWVAR 42
77870: PUSH
77871: LD_INT 27
77873: ST_TO_ADDR
77874: GO 77953
77876: LD_INT 31
77878: DOUBLE
77879: EQUAL
77880: IFTRUE 77884
77882: GO 77895
77884: POP
// bc_type := b_oil_power ; 32 :
77885: LD_ADDR_OWVAR 42
77889: PUSH
77890: LD_INT 26
77892: ST_TO_ADDR
77893: GO 77953
77895: LD_INT 32
77897: DOUBLE
77898: EQUAL
77899: IFTRUE 77903
77901: GO 77914
77903: POP
// bc_type := b_siberite_power ; 33 :
77904: LD_ADDR_OWVAR 42
77908: PUSH
77909: LD_INT 28
77911: ST_TO_ADDR
77912: GO 77953
77914: LD_INT 33
77916: DOUBLE
77917: EQUAL
77918: IFTRUE 77922
77920: GO 77933
77922: POP
// bc_type := b_oil_mine ; 34 :
77923: LD_ADDR_OWVAR 42
77927: PUSH
77928: LD_INT 29
77930: ST_TO_ADDR
77931: GO 77953
77933: LD_INT 34
77935: DOUBLE
77936: EQUAL
77937: IFTRUE 77941
77939: GO 77952
77941: POP
// bc_type := b_siberite_mine ; end ;
77942: LD_ADDR_OWVAR 42
77946: PUSH
77947: LD_INT 30
77949: ST_TO_ADDR
77950: GO 77953
77952: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
77953: LD_ADDR_VAR 0 8
77957: PUSH
77958: LD_VAR 0 5
77962: PPUSH
77963: LD_VAR 0 6
77967: PPUSH
77968: LD_VAR 0 3
77972: PPUSH
77973: CALL_OW 47
77977: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
77978: LD_OWVAR 42
77982: PUSH
77983: LD_INT 32
77985: PUSH
77986: LD_INT 33
77988: PUSH
77989: EMPTY
77990: LIST
77991: LIST
77992: IN
77993: IFFALSE 78009
// PlaceWeaponTurret ( b , weapon ) ;
77995: LD_VAR 0 8
77999: PPUSH
78000: LD_VAR 0 4
78004: PPUSH
78005: CALL_OW 431
// end ;
78009: LD_VAR 0 7
78013: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
78014: LD_INT 0
78016: PPUSH
78017: PPUSH
78018: PPUSH
78019: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78020: LD_ADDR_VAR 0 4
78024: PUSH
78025: LD_INT 22
78027: PUSH
78028: LD_OWVAR 2
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: PUSH
78037: LD_INT 2
78039: PUSH
78040: LD_INT 30
78042: PUSH
78043: LD_INT 0
78045: PUSH
78046: EMPTY
78047: LIST
78048: LIST
78049: PUSH
78050: LD_INT 30
78052: PUSH
78053: LD_INT 1
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: PUSH
78060: EMPTY
78061: LIST
78062: LIST
78063: LIST
78064: PUSH
78065: EMPTY
78066: LIST
78067: LIST
78068: PPUSH
78069: CALL_OW 69
78073: ST_TO_ADDR
// if not tmp then
78074: LD_VAR 0 4
78078: NOT
78079: IFFALSE 78083
// exit ;
78081: GO 78142
// for i in tmp do
78083: LD_ADDR_VAR 0 2
78087: PUSH
78088: LD_VAR 0 4
78092: PUSH
78093: FOR_IN
78094: IFFALSE 78140
// for j = 1 to 3 do
78096: LD_ADDR_VAR 0 3
78100: PUSH
78101: DOUBLE
78102: LD_INT 1
78104: DEC
78105: ST_TO_ADDR
78106: LD_INT 3
78108: PUSH
78109: FOR_TO
78110: IFFALSE 78136
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
78112: LD_VAR 0 2
78116: PPUSH
78117: CALL_OW 274
78121: PPUSH
78122: LD_VAR 0 3
78126: PPUSH
78127: LD_INT 99999
78129: PPUSH
78130: CALL_OW 277
78134: GO 78109
78136: POP
78137: POP
78138: GO 78093
78140: POP
78141: POP
// end ;
78142: LD_VAR 0 1
78146: RET
// export function hHackSetLevel10 ; var i , j ; begin
78147: LD_INT 0
78149: PPUSH
78150: PPUSH
78151: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
78152: LD_ADDR_VAR 0 2
78156: PUSH
78157: LD_INT 21
78159: PUSH
78160: LD_INT 1
78162: PUSH
78163: EMPTY
78164: LIST
78165: LIST
78166: PPUSH
78167: CALL_OW 69
78171: PUSH
78172: FOR_IN
78173: IFFALSE 78225
// if IsSelected ( i ) then
78175: LD_VAR 0 2
78179: PPUSH
78180: CALL_OW 306
78184: IFFALSE 78223
// begin for j := 1 to 4 do
78186: LD_ADDR_VAR 0 3
78190: PUSH
78191: DOUBLE
78192: LD_INT 1
78194: DEC
78195: ST_TO_ADDR
78196: LD_INT 4
78198: PUSH
78199: FOR_TO
78200: IFFALSE 78221
// SetSkill ( i , j , 10 ) ;
78202: LD_VAR 0 2
78206: PPUSH
78207: LD_VAR 0 3
78211: PPUSH
78212: LD_INT 10
78214: PPUSH
78215: CALL_OW 237
78219: GO 78199
78221: POP
78222: POP
// end ;
78223: GO 78172
78225: POP
78226: POP
// end ;
78227: LD_VAR 0 1
78231: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
78232: LD_INT 0
78234: PPUSH
78235: PPUSH
78236: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
78237: LD_ADDR_VAR 0 2
78241: PUSH
78242: LD_INT 22
78244: PUSH
78245: LD_OWVAR 2
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: PUSH
78254: LD_INT 21
78256: PUSH
78257: LD_INT 1
78259: PUSH
78260: EMPTY
78261: LIST
78262: LIST
78263: PUSH
78264: EMPTY
78265: LIST
78266: LIST
78267: PPUSH
78268: CALL_OW 69
78272: PUSH
78273: FOR_IN
78274: IFFALSE 78315
// begin for j := 1 to 4 do
78276: LD_ADDR_VAR 0 3
78280: PUSH
78281: DOUBLE
78282: LD_INT 1
78284: DEC
78285: ST_TO_ADDR
78286: LD_INT 4
78288: PUSH
78289: FOR_TO
78290: IFFALSE 78311
// SetSkill ( i , j , 10 ) ;
78292: LD_VAR 0 2
78296: PPUSH
78297: LD_VAR 0 3
78301: PPUSH
78302: LD_INT 10
78304: PPUSH
78305: CALL_OW 237
78309: GO 78289
78311: POP
78312: POP
// end ;
78313: GO 78273
78315: POP
78316: POP
// end ;
78317: LD_VAR 0 1
78321: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
78322: LD_INT 0
78324: PPUSH
// uc_side := your_side ;
78325: LD_ADDR_OWVAR 20
78329: PUSH
78330: LD_OWVAR 2
78334: ST_TO_ADDR
// uc_nation := nation ;
78335: LD_ADDR_OWVAR 21
78339: PUSH
78340: LD_VAR 0 1
78344: ST_TO_ADDR
// InitHc ;
78345: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
78349: LD_INT 0
78351: PPUSH
78352: LD_VAR 0 2
78356: PPUSH
78357: LD_VAR 0 3
78361: PPUSH
78362: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
78366: LD_VAR 0 4
78370: PPUSH
78371: LD_VAR 0 5
78375: PPUSH
78376: CALL_OW 428
78380: PUSH
78381: LD_INT 0
78383: EQUAL
78384: IFFALSE 78408
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
78386: CALL_OW 44
78390: PPUSH
78391: LD_VAR 0 4
78395: PPUSH
78396: LD_VAR 0 5
78400: PPUSH
78401: LD_INT 1
78403: PPUSH
78404: CALL_OW 48
// end ;
78408: LD_VAR 0 6
78412: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
78413: LD_INT 0
78415: PPUSH
78416: PPUSH
// uc_side := your_side ;
78417: LD_ADDR_OWVAR 20
78421: PUSH
78422: LD_OWVAR 2
78426: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
78427: LD_VAR 0 1
78431: PUSH
78432: LD_INT 1
78434: PUSH
78435: LD_INT 2
78437: PUSH
78438: LD_INT 3
78440: PUSH
78441: LD_INT 4
78443: PUSH
78444: LD_INT 5
78446: PUSH
78447: EMPTY
78448: LIST
78449: LIST
78450: LIST
78451: LIST
78452: LIST
78453: IN
78454: IFFALSE 78466
// uc_nation := nation_american else
78456: LD_ADDR_OWVAR 21
78460: PUSH
78461: LD_INT 1
78463: ST_TO_ADDR
78464: GO 78509
// if chassis in [ 11 , 12 , 13 , 14 ] then
78466: LD_VAR 0 1
78470: PUSH
78471: LD_INT 11
78473: PUSH
78474: LD_INT 12
78476: PUSH
78477: LD_INT 13
78479: PUSH
78480: LD_INT 14
78482: PUSH
78483: EMPTY
78484: LIST
78485: LIST
78486: LIST
78487: LIST
78488: IN
78489: IFFALSE 78501
// uc_nation := nation_arabian else
78491: LD_ADDR_OWVAR 21
78495: PUSH
78496: LD_INT 2
78498: ST_TO_ADDR
78499: GO 78509
// uc_nation := nation_russian ;
78501: LD_ADDR_OWVAR 21
78505: PUSH
78506: LD_INT 3
78508: ST_TO_ADDR
// vc_chassis := chassis ;
78509: LD_ADDR_OWVAR 37
78513: PUSH
78514: LD_VAR 0 1
78518: ST_TO_ADDR
// vc_engine := engine ;
78519: LD_ADDR_OWVAR 39
78523: PUSH
78524: LD_VAR 0 2
78528: ST_TO_ADDR
// vc_control := control ;
78529: LD_ADDR_OWVAR 38
78533: PUSH
78534: LD_VAR 0 3
78538: ST_TO_ADDR
// vc_weapon := weapon ;
78539: LD_ADDR_OWVAR 40
78543: PUSH
78544: LD_VAR 0 4
78548: ST_TO_ADDR
// un := CreateVehicle ;
78549: LD_ADDR_VAR 0 8
78553: PUSH
78554: CALL_OW 45
78558: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
78559: LD_VAR 0 8
78563: PPUSH
78564: LD_INT 0
78566: PPUSH
78567: LD_INT 5
78569: PPUSH
78570: CALL_OW 12
78574: PPUSH
78575: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
78579: LD_VAR 0 8
78583: PPUSH
78584: LD_VAR 0 5
78588: PPUSH
78589: LD_VAR 0 6
78593: PPUSH
78594: LD_INT 1
78596: PPUSH
78597: CALL_OW 48
// end ;
78601: LD_VAR 0 7
78605: RET
// export hInvincible ; every 1 do
78606: GO 78608
78608: DISABLE
// hInvincible := [ ] ;
78609: LD_ADDR_EXP 120
78613: PUSH
78614: EMPTY
78615: ST_TO_ADDR
78616: END
// every 10 do var i ;
78617: GO 78619
78619: DISABLE
78620: LD_INT 0
78622: PPUSH
// begin enable ;
78623: ENABLE
// if not hInvincible then
78624: LD_EXP 120
78628: NOT
78629: IFFALSE 78633
// exit ;
78631: GO 78677
// for i in hInvincible do
78633: LD_ADDR_VAR 0 1
78637: PUSH
78638: LD_EXP 120
78642: PUSH
78643: FOR_IN
78644: IFFALSE 78675
// if GetLives ( i ) < 1000 then
78646: LD_VAR 0 1
78650: PPUSH
78651: CALL_OW 256
78655: PUSH
78656: LD_INT 1000
78658: LESS
78659: IFFALSE 78673
// SetLives ( i , 1000 ) ;
78661: LD_VAR 0 1
78665: PPUSH
78666: LD_INT 1000
78668: PPUSH
78669: CALL_OW 234
78673: GO 78643
78675: POP
78676: POP
// end ;
78677: PPOPN 1
78679: END
// export function hHackInvincible ; var i ; begin
78680: LD_INT 0
78682: PPUSH
78683: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
78684: LD_ADDR_VAR 0 2
78688: PUSH
78689: LD_INT 2
78691: PUSH
78692: LD_INT 21
78694: PUSH
78695: LD_INT 1
78697: PUSH
78698: EMPTY
78699: LIST
78700: LIST
78701: PUSH
78702: LD_INT 21
78704: PUSH
78705: LD_INT 2
78707: PUSH
78708: EMPTY
78709: LIST
78710: LIST
78711: PUSH
78712: EMPTY
78713: LIST
78714: LIST
78715: LIST
78716: PPUSH
78717: CALL_OW 69
78721: PUSH
78722: FOR_IN
78723: IFFALSE 78784
// if IsSelected ( i ) then
78725: LD_VAR 0 2
78729: PPUSH
78730: CALL_OW 306
78734: IFFALSE 78782
// begin if i in hInvincible then
78736: LD_VAR 0 2
78740: PUSH
78741: LD_EXP 120
78745: IN
78746: IFFALSE 78766
// hInvincible := hInvincible diff i else
78748: LD_ADDR_EXP 120
78752: PUSH
78753: LD_EXP 120
78757: PUSH
78758: LD_VAR 0 2
78762: DIFF
78763: ST_TO_ADDR
78764: GO 78782
// hInvincible := hInvincible union i ;
78766: LD_ADDR_EXP 120
78770: PUSH
78771: LD_EXP 120
78775: PUSH
78776: LD_VAR 0 2
78780: UNION
78781: ST_TO_ADDR
// end ;
78782: GO 78722
78784: POP
78785: POP
// end ;
78786: LD_VAR 0 1
78790: RET
// export function hHackInvisible ; var i , j ; begin
78791: LD_INT 0
78793: PPUSH
78794: PPUSH
78795: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
78796: LD_ADDR_VAR 0 2
78800: PUSH
78801: LD_INT 21
78803: PUSH
78804: LD_INT 1
78806: PUSH
78807: EMPTY
78808: LIST
78809: LIST
78810: PPUSH
78811: CALL_OW 69
78815: PUSH
78816: FOR_IN
78817: IFFALSE 78841
// if IsSelected ( i ) then
78819: LD_VAR 0 2
78823: PPUSH
78824: CALL_OW 306
78828: IFFALSE 78839
// ComForceInvisible ( i ) ;
78830: LD_VAR 0 2
78834: PPUSH
78835: CALL_OW 496
78839: GO 78816
78841: POP
78842: POP
// end ;
78843: LD_VAR 0 1
78847: RET
// export function hHackChangeYourSide ; begin
78848: LD_INT 0
78850: PPUSH
// if your_side = 8 then
78851: LD_OWVAR 2
78855: PUSH
78856: LD_INT 8
78858: EQUAL
78859: IFFALSE 78871
// your_side := 0 else
78861: LD_ADDR_OWVAR 2
78865: PUSH
78866: LD_INT 0
78868: ST_TO_ADDR
78869: GO 78885
// your_side := your_side + 1 ;
78871: LD_ADDR_OWVAR 2
78875: PUSH
78876: LD_OWVAR 2
78880: PUSH
78881: LD_INT 1
78883: PLUS
78884: ST_TO_ADDR
// end ;
78885: LD_VAR 0 1
78889: RET
// export function hHackChangeUnitSide ; var i , j ; begin
78890: LD_INT 0
78892: PPUSH
78893: PPUSH
78894: PPUSH
// for i in all_units do
78895: LD_ADDR_VAR 0 2
78899: PUSH
78900: LD_OWVAR 3
78904: PUSH
78905: FOR_IN
78906: IFFALSE 78984
// if IsSelected ( i ) then
78908: LD_VAR 0 2
78912: PPUSH
78913: CALL_OW 306
78917: IFFALSE 78982
// begin j := GetSide ( i ) ;
78919: LD_ADDR_VAR 0 3
78923: PUSH
78924: LD_VAR 0 2
78928: PPUSH
78929: CALL_OW 255
78933: ST_TO_ADDR
// if j = 8 then
78934: LD_VAR 0 3
78938: PUSH
78939: LD_INT 8
78941: EQUAL
78942: IFFALSE 78954
// j := 0 else
78944: LD_ADDR_VAR 0 3
78948: PUSH
78949: LD_INT 0
78951: ST_TO_ADDR
78952: GO 78968
// j := j + 1 ;
78954: LD_ADDR_VAR 0 3
78958: PUSH
78959: LD_VAR 0 3
78963: PUSH
78964: LD_INT 1
78966: PLUS
78967: ST_TO_ADDR
// SetSide ( i , j ) ;
78968: LD_VAR 0 2
78972: PPUSH
78973: LD_VAR 0 3
78977: PPUSH
78978: CALL_OW 235
// end ;
78982: GO 78905
78984: POP
78985: POP
// end ;
78986: LD_VAR 0 1
78990: RET
// export function hHackFog ; begin
78991: LD_INT 0
78993: PPUSH
// FogOff ( true ) ;
78994: LD_INT 1
78996: PPUSH
78997: CALL_OW 344
// end ;
79001: LD_VAR 0 1
79005: RET
// export function hHackTeleport ( unit , x , y ) ; begin
79006: LD_INT 0
79008: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
79009: LD_VAR 0 1
79013: PPUSH
79014: LD_VAR 0 2
79018: PPUSH
79019: LD_VAR 0 3
79023: PPUSH
79024: LD_INT 1
79026: PPUSH
79027: LD_INT 1
79029: PPUSH
79030: CALL_OW 483
// CenterOnXY ( x , y ) ;
79034: LD_VAR 0 2
79038: PPUSH
79039: LD_VAR 0 3
79043: PPUSH
79044: CALL_OW 84
// end ;
79048: LD_VAR 0 4
79052: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
79053: LD_INT 0
79055: PPUSH
79056: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
79057: LD_VAR 0 1
79061: NOT
79062: PUSH
79063: LD_VAR 0 2
79067: PPUSH
79068: LD_VAR 0 3
79072: PPUSH
79073: CALL_OW 488
79077: NOT
79078: OR
79079: PUSH
79080: LD_VAR 0 1
79084: PPUSH
79085: CALL_OW 266
79089: PUSH
79090: LD_INT 3
79092: NONEQUAL
79093: PUSH
79094: LD_VAR 0 1
79098: PPUSH
79099: CALL_OW 247
79103: PUSH
79104: LD_INT 1
79106: EQUAL
79107: NOT
79108: AND
79109: OR
79110: IFFALSE 79114
// exit ;
79112: GO 79263
// if GetType ( factory ) = unit_human then
79114: LD_VAR 0 1
79118: PPUSH
79119: CALL_OW 247
79123: PUSH
79124: LD_INT 1
79126: EQUAL
79127: IFFALSE 79144
// factory := IsInUnit ( factory ) ;
79129: LD_ADDR_VAR 0 1
79133: PUSH
79134: LD_VAR 0 1
79138: PPUSH
79139: CALL_OW 310
79143: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
79144: LD_VAR 0 1
79148: PPUSH
79149: CALL_OW 266
79153: PUSH
79154: LD_INT 3
79156: NONEQUAL
79157: IFFALSE 79161
// exit ;
79159: GO 79263
// if HexInfo ( x , y ) = factory then
79161: LD_VAR 0 2
79165: PPUSH
79166: LD_VAR 0 3
79170: PPUSH
79171: CALL_OW 428
79175: PUSH
79176: LD_VAR 0 1
79180: EQUAL
79181: IFFALSE 79208
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
79183: LD_ADDR_EXP 121
79187: PUSH
79188: LD_EXP 121
79192: PPUSH
79193: LD_VAR 0 1
79197: PPUSH
79198: LD_INT 0
79200: PPUSH
79201: CALL_OW 1
79205: ST_TO_ADDR
79206: GO 79259
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
79208: LD_ADDR_EXP 121
79212: PUSH
79213: LD_EXP 121
79217: PPUSH
79218: LD_VAR 0 1
79222: PPUSH
79223: LD_VAR 0 1
79227: PPUSH
79228: CALL_OW 255
79232: PUSH
79233: LD_VAR 0 1
79237: PUSH
79238: LD_VAR 0 2
79242: PUSH
79243: LD_VAR 0 3
79247: PUSH
79248: EMPTY
79249: LIST
79250: LIST
79251: LIST
79252: LIST
79253: PPUSH
79254: CALL_OW 1
79258: ST_TO_ADDR
// UpdateFactoryWaypoints ;
79259: CALL 79268 0 0
// end ;
79263: LD_VAR 0 4
79267: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
79268: LD_INT 0
79270: PPUSH
79271: PPUSH
79272: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
79273: LD_STRING resetFactoryWaypoint();
79275: PPUSH
79276: CALL_OW 559
// if factoryWaypoints then
79280: LD_EXP 121
79284: IFFALSE 79410
// begin list := PrepareArray ( factoryWaypoints ) ;
79286: LD_ADDR_VAR 0 3
79290: PUSH
79291: LD_EXP 121
79295: PPUSH
79296: CALL 58166 0 1
79300: ST_TO_ADDR
// for i := 1 to list do
79301: LD_ADDR_VAR 0 2
79305: PUSH
79306: DOUBLE
79307: LD_INT 1
79309: DEC
79310: ST_TO_ADDR
79311: LD_VAR 0 3
79315: PUSH
79316: FOR_TO
79317: IFFALSE 79408
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
79319: LD_STRING setFactoryWaypointXY(
79321: PUSH
79322: LD_VAR 0 3
79326: PUSH
79327: LD_VAR 0 2
79331: ARRAY
79332: PUSH
79333: LD_INT 1
79335: ARRAY
79336: STR
79337: PUSH
79338: LD_STRING ,
79340: STR
79341: PUSH
79342: LD_VAR 0 3
79346: PUSH
79347: LD_VAR 0 2
79351: ARRAY
79352: PUSH
79353: LD_INT 2
79355: ARRAY
79356: STR
79357: PUSH
79358: LD_STRING ,
79360: STR
79361: PUSH
79362: LD_VAR 0 3
79366: PUSH
79367: LD_VAR 0 2
79371: ARRAY
79372: PUSH
79373: LD_INT 3
79375: ARRAY
79376: STR
79377: PUSH
79378: LD_STRING ,
79380: STR
79381: PUSH
79382: LD_VAR 0 3
79386: PUSH
79387: LD_VAR 0 2
79391: ARRAY
79392: PUSH
79393: LD_INT 4
79395: ARRAY
79396: STR
79397: PUSH
79398: LD_STRING )
79400: STR
79401: PPUSH
79402: CALL_OW 559
79406: GO 79316
79408: POP
79409: POP
// end ; end ;
79410: LD_VAR 0 1
79414: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
79415: LD_INT 0
79417: PPUSH
// if HexInfo ( x , y ) = warehouse then
79418: LD_VAR 0 2
79422: PPUSH
79423: LD_VAR 0 3
79427: PPUSH
79428: CALL_OW 428
79432: PUSH
79433: LD_VAR 0 1
79437: EQUAL
79438: IFFALSE 79465
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
79440: LD_ADDR_EXP 122
79444: PUSH
79445: LD_EXP 122
79449: PPUSH
79450: LD_VAR 0 1
79454: PPUSH
79455: LD_INT 0
79457: PPUSH
79458: CALL_OW 1
79462: ST_TO_ADDR
79463: GO 79516
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
79465: LD_ADDR_EXP 122
79469: PUSH
79470: LD_EXP 122
79474: PPUSH
79475: LD_VAR 0 1
79479: PPUSH
79480: LD_VAR 0 1
79484: PPUSH
79485: CALL_OW 255
79489: PUSH
79490: LD_VAR 0 1
79494: PUSH
79495: LD_VAR 0 2
79499: PUSH
79500: LD_VAR 0 3
79504: PUSH
79505: EMPTY
79506: LIST
79507: LIST
79508: LIST
79509: LIST
79510: PPUSH
79511: CALL_OW 1
79515: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
79516: CALL 79525 0 0
// end ;
79520: LD_VAR 0 4
79524: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
79525: LD_INT 0
79527: PPUSH
79528: PPUSH
79529: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
79530: LD_STRING resetWarehouseGatheringPoints();
79532: PPUSH
79533: CALL_OW 559
// if warehouseGatheringPoints then
79537: LD_EXP 122
79541: IFFALSE 79667
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
79543: LD_ADDR_VAR 0 3
79547: PUSH
79548: LD_EXP 122
79552: PPUSH
79553: CALL 58166 0 1
79557: ST_TO_ADDR
// for i := 1 to list do
79558: LD_ADDR_VAR 0 2
79562: PUSH
79563: DOUBLE
79564: LD_INT 1
79566: DEC
79567: ST_TO_ADDR
79568: LD_VAR 0 3
79572: PUSH
79573: FOR_TO
79574: IFFALSE 79665
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
79576: LD_STRING setWarehouseGatheringPointXY(
79578: PUSH
79579: LD_VAR 0 3
79583: PUSH
79584: LD_VAR 0 2
79588: ARRAY
79589: PUSH
79590: LD_INT 1
79592: ARRAY
79593: STR
79594: PUSH
79595: LD_STRING ,
79597: STR
79598: PUSH
79599: LD_VAR 0 3
79603: PUSH
79604: LD_VAR 0 2
79608: ARRAY
79609: PUSH
79610: LD_INT 2
79612: ARRAY
79613: STR
79614: PUSH
79615: LD_STRING ,
79617: STR
79618: PUSH
79619: LD_VAR 0 3
79623: PUSH
79624: LD_VAR 0 2
79628: ARRAY
79629: PUSH
79630: LD_INT 3
79632: ARRAY
79633: STR
79634: PUSH
79635: LD_STRING ,
79637: STR
79638: PUSH
79639: LD_VAR 0 3
79643: PUSH
79644: LD_VAR 0 2
79648: ARRAY
79649: PUSH
79650: LD_INT 4
79652: ARRAY
79653: STR
79654: PUSH
79655: LD_STRING )
79657: STR
79658: PPUSH
79659: CALL_OW 559
79663: GO 79573
79665: POP
79666: POP
// end ; end ;
79667: LD_VAR 0 1
79671: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
79672: LD_EXP 122
79676: IFFALSE 80361
79678: GO 79680
79680: DISABLE
79681: LD_INT 0
79683: PPUSH
79684: PPUSH
79685: PPUSH
79686: PPUSH
79687: PPUSH
79688: PPUSH
79689: PPUSH
79690: PPUSH
79691: PPUSH
// begin enable ;
79692: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
79693: LD_ADDR_VAR 0 3
79697: PUSH
79698: LD_EXP 122
79702: PPUSH
79703: CALL 58166 0 1
79707: ST_TO_ADDR
// if not list then
79708: LD_VAR 0 3
79712: NOT
79713: IFFALSE 79717
// exit ;
79715: GO 80361
// for i := 1 to list do
79717: LD_ADDR_VAR 0 1
79721: PUSH
79722: DOUBLE
79723: LD_INT 1
79725: DEC
79726: ST_TO_ADDR
79727: LD_VAR 0 3
79731: PUSH
79732: FOR_TO
79733: IFFALSE 80359
// begin depot := list [ i ] [ 2 ] ;
79735: LD_ADDR_VAR 0 8
79739: PUSH
79740: LD_VAR 0 3
79744: PUSH
79745: LD_VAR 0 1
79749: ARRAY
79750: PUSH
79751: LD_INT 2
79753: ARRAY
79754: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
79755: LD_ADDR_VAR 0 5
79759: PUSH
79760: LD_VAR 0 3
79764: PUSH
79765: LD_VAR 0 1
79769: ARRAY
79770: PUSH
79771: LD_INT 1
79773: ARRAY
79774: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
79775: LD_VAR 0 8
79779: PPUSH
79780: CALL_OW 301
79784: PUSH
79785: LD_VAR 0 5
79789: PUSH
79790: LD_VAR 0 8
79794: PPUSH
79795: CALL_OW 255
79799: NONEQUAL
79800: OR
79801: IFFALSE 79830
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
79803: LD_ADDR_EXP 122
79807: PUSH
79808: LD_EXP 122
79812: PPUSH
79813: LD_VAR 0 8
79817: PPUSH
79818: LD_INT 0
79820: PPUSH
79821: CALL_OW 1
79825: ST_TO_ADDR
// exit ;
79826: POP
79827: POP
79828: GO 80361
// end ; x := list [ i ] [ 3 ] ;
79830: LD_ADDR_VAR 0 6
79834: PUSH
79835: LD_VAR 0 3
79839: PUSH
79840: LD_VAR 0 1
79844: ARRAY
79845: PUSH
79846: LD_INT 3
79848: ARRAY
79849: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
79850: LD_ADDR_VAR 0 7
79854: PUSH
79855: LD_VAR 0 3
79859: PUSH
79860: LD_VAR 0 1
79864: ARRAY
79865: PUSH
79866: LD_INT 4
79868: ARRAY
79869: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
79870: LD_ADDR_VAR 0 9
79874: PUSH
79875: LD_VAR 0 6
79879: PPUSH
79880: LD_VAR 0 7
79884: PPUSH
79885: LD_INT 16
79887: PPUSH
79888: CALL 56754 0 3
79892: ST_TO_ADDR
// if not cratesNearbyPoint then
79893: LD_VAR 0 9
79897: NOT
79898: IFFALSE 79904
// exit ;
79900: POP
79901: POP
79902: GO 80361
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
79904: LD_ADDR_VAR 0 4
79908: PUSH
79909: LD_INT 22
79911: PUSH
79912: LD_VAR 0 5
79916: PUSH
79917: EMPTY
79918: LIST
79919: LIST
79920: PUSH
79921: LD_INT 3
79923: PUSH
79924: LD_INT 60
79926: PUSH
79927: EMPTY
79928: LIST
79929: PUSH
79930: EMPTY
79931: LIST
79932: LIST
79933: PUSH
79934: LD_INT 91
79936: PUSH
79937: LD_VAR 0 8
79941: PUSH
79942: LD_INT 6
79944: PUSH
79945: EMPTY
79946: LIST
79947: LIST
79948: LIST
79949: PUSH
79950: LD_INT 2
79952: PUSH
79953: LD_INT 25
79955: PUSH
79956: LD_INT 2
79958: PUSH
79959: EMPTY
79960: LIST
79961: LIST
79962: PUSH
79963: LD_INT 25
79965: PUSH
79966: LD_INT 16
79968: PUSH
79969: EMPTY
79970: LIST
79971: LIST
79972: PUSH
79973: EMPTY
79974: LIST
79975: LIST
79976: LIST
79977: PUSH
79978: EMPTY
79979: LIST
79980: LIST
79981: LIST
79982: LIST
79983: PPUSH
79984: CALL_OW 69
79988: PUSH
79989: LD_VAR 0 8
79993: PPUSH
79994: CALL_OW 313
79998: PPUSH
79999: LD_INT 3
80001: PUSH
80002: LD_INT 60
80004: PUSH
80005: EMPTY
80006: LIST
80007: PUSH
80008: EMPTY
80009: LIST
80010: LIST
80011: PUSH
80012: LD_INT 2
80014: PUSH
80015: LD_INT 25
80017: PUSH
80018: LD_INT 2
80020: PUSH
80021: EMPTY
80022: LIST
80023: LIST
80024: PUSH
80025: LD_INT 25
80027: PUSH
80028: LD_INT 16
80030: PUSH
80031: EMPTY
80032: LIST
80033: LIST
80034: PUSH
80035: EMPTY
80036: LIST
80037: LIST
80038: LIST
80039: PUSH
80040: EMPTY
80041: LIST
80042: LIST
80043: PPUSH
80044: CALL_OW 72
80048: UNION
80049: ST_TO_ADDR
// if tmp then
80050: LD_VAR 0 4
80054: IFFALSE 80134
// begin tmp := ShrinkArray ( tmp , 3 ) ;
80056: LD_ADDR_VAR 0 4
80060: PUSH
80061: LD_VAR 0 4
80065: PPUSH
80066: LD_INT 3
80068: PPUSH
80069: CALL 54723 0 2
80073: ST_TO_ADDR
// for j in tmp do
80074: LD_ADDR_VAR 0 2
80078: PUSH
80079: LD_VAR 0 4
80083: PUSH
80084: FOR_IN
80085: IFFALSE 80128
// begin if IsInUnit ( j ) then
80087: LD_VAR 0 2
80091: PPUSH
80092: CALL_OW 310
80096: IFFALSE 80107
// ComExit ( j ) ;
80098: LD_VAR 0 2
80102: PPUSH
80103: CALL 54806 0 1
// AddComCollect ( j , x , y ) ;
80107: LD_VAR 0 2
80111: PPUSH
80112: LD_VAR 0 6
80116: PPUSH
80117: LD_VAR 0 7
80121: PPUSH
80122: CALL_OW 177
// end ;
80126: GO 80084
80128: POP
80129: POP
// exit ;
80130: POP
80131: POP
80132: GO 80361
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
80134: LD_ADDR_VAR 0 4
80138: PUSH
80139: LD_INT 22
80141: PUSH
80142: LD_VAR 0 5
80146: PUSH
80147: EMPTY
80148: LIST
80149: LIST
80150: PUSH
80151: LD_INT 91
80153: PUSH
80154: LD_VAR 0 8
80158: PUSH
80159: LD_INT 8
80161: PUSH
80162: EMPTY
80163: LIST
80164: LIST
80165: LIST
80166: PUSH
80167: LD_INT 2
80169: PUSH
80170: LD_INT 34
80172: PUSH
80173: LD_INT 12
80175: PUSH
80176: EMPTY
80177: LIST
80178: LIST
80179: PUSH
80180: LD_INT 34
80182: PUSH
80183: LD_INT 51
80185: PUSH
80186: EMPTY
80187: LIST
80188: LIST
80189: PUSH
80190: LD_INT 34
80192: PUSH
80193: LD_INT 32
80195: PUSH
80196: EMPTY
80197: LIST
80198: LIST
80199: PUSH
80200: LD_INT 34
80202: PUSH
80203: LD_INT 89
80205: PUSH
80206: EMPTY
80207: LIST
80208: LIST
80209: PUSH
80210: EMPTY
80211: LIST
80212: LIST
80213: LIST
80214: LIST
80215: LIST
80216: PUSH
80217: EMPTY
80218: LIST
80219: LIST
80220: LIST
80221: PPUSH
80222: CALL_OW 69
80226: ST_TO_ADDR
// if tmp then
80227: LD_VAR 0 4
80231: IFFALSE 80357
// begin for j in tmp do
80233: LD_ADDR_VAR 0 2
80237: PUSH
80238: LD_VAR 0 4
80242: PUSH
80243: FOR_IN
80244: IFFALSE 80355
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
80246: LD_VAR 0 2
80250: PPUSH
80251: CALL_OW 262
80255: PUSH
80256: LD_INT 3
80258: EQUAL
80259: PUSH
80260: LD_VAR 0 2
80264: PPUSH
80265: CALL_OW 261
80269: PUSH
80270: LD_INT 20
80272: GREATER
80273: OR
80274: PUSH
80275: LD_VAR 0 2
80279: PPUSH
80280: CALL_OW 314
80284: NOT
80285: AND
80286: PUSH
80287: LD_VAR 0 2
80291: PPUSH
80292: CALL_OW 263
80296: PUSH
80297: LD_INT 1
80299: NONEQUAL
80300: PUSH
80301: LD_VAR 0 2
80305: PPUSH
80306: CALL_OW 311
80310: OR
80311: AND
80312: IFFALSE 80353
// begin ComCollect ( j , x , y ) ;
80314: LD_VAR 0 2
80318: PPUSH
80319: LD_VAR 0 6
80323: PPUSH
80324: LD_VAR 0 7
80328: PPUSH
80329: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
80333: LD_VAR 0 2
80337: PPUSH
80338: LD_VAR 0 8
80342: PPUSH
80343: CALL_OW 172
// exit ;
80347: POP
80348: POP
80349: POP
80350: POP
80351: GO 80361
// end ;
80353: GO 80243
80355: POP
80356: POP
// end ; end ;
80357: GO 79732
80359: POP
80360: POP
// end ; end_of_file
80361: PPOPN 9
80363: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80364: LD_VAR 0 1
80368: PPUSH
80369: LD_VAR 0 2
80373: PPUSH
80374: LD_VAR 0 3
80378: PPUSH
80379: LD_VAR 0 4
80383: PPUSH
80384: LD_VAR 0 5
80388: PPUSH
80389: LD_VAR 0 6
80393: PPUSH
80394: CALL 64717 0 6
// end ;
80398: PPOPN 6
80400: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80401: LD_INT 0
80403: PPUSH
// begin if not units then
80404: LD_VAR 0 1
80408: NOT
80409: IFFALSE 80413
// exit ;
80411: GO 80413
// end ;
80413: PPOPN 7
80415: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80416: CALL 64604 0 0
// end ;
80420: PPOPN 1
80422: END
