// starting var tab ; begin ResetFog ;
   0: NOP4
// RandomizeAll ;
   4: NOP4
// InitHc ;
   8: NOP4
// InitUc ;
  12: NOP4
// InitBc ;
  16: NOP4
// InitVariables ;
  20: NOP4
// InitMultiplayer ;
  24: NOP4
// InitMacro ;
  28: NOP4
// if debug then
  32: NOP4
  36: IFFALSE 45
// FogOff ( 1 ) ;
  38: LD_INT 1
  40: PPUSH
  41: NOP4
// PrepareNature ( 3 , 3 , 9 , 2 , 2 , 1 , 5 , natureArea , waterArea ) ;
  45: LD_INT 3
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 9
  53: PPUSH
  54: LD_INT 2
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 5
  65: PPUSH
  66: LD_INT 18
  68: PPUSH
  69: LD_INT 19
  71: PPUSH
  72: NOP4
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  76: LD_INT 2
  78: PPUSH
  79: NOP4
  83: PPUSH
  84: NOP4
// Multiplayer_Start ;
  88: NOP4
// MC_Start ( ) ;
  92: NOP4
// Multiplayer_End ;
  96: NOP4
// end ;
 100: END
// export function CustomInitMacro ; var i ; begin
 101: LD_INT 0
 103: PPUSH
 104: PPUSH
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
 105: LD_INT 1
 107: PPUSH
 108: LD_INT 8
 110: PUSH
 111: LD_INT 10
 113: PUSH
 114: LD_INT 12
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: PUSH
 122: NOP4
 126: ARRAY
 127: PPUSH
 128: LD_INT 3
 130: PPUSH
 131: NOP4
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 135: LD_INT 2
 137: PPUSH
 138: LD_INT 6
 140: PUSH
 141: LD_INT 8
 143: PUSH
 144: LD_INT 9
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: LIST
 151: PUSH
 152: NOP4
 156: ARRAY
 157: PPUSH
 158: LD_INT 2
 160: PPUSH
 161: NOP4
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 165: LD_INT 3
 167: PPUSH
 168: LD_INT 6
 170: PUSH
 171: LD_INT 7
 173: PUSH
 174: LD_INT 9
 176: PUSH
 177: EMPTY
 178: LIST
 179: LIST
 180: LIST
 181: PUSH
 182: NOP4
 186: ARRAY
 187: PPUSH
 188: LD_INT 1
 190: PPUSH
 191: NOP4
// MC_SetMinesField ( 4 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield4_left ) ;
 195: LD_INT 4
 197: PPUSH
 198: LD_INT 6
 200: PUSH
 201: LD_INT 7
 203: PUSH
 204: LD_INT 9
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: LIST
 211: PUSH
 212: NOP4
 216: ARRAY
 217: PPUSH
 218: LD_INT 25
 220: PPUSH
 221: NOP4
// mc_parking := [ parking_north , parking_west , parking_east , parking_south ] ;
 225: NOP4
 229: PUSH
 230: LD_INT 20
 232: PUSH
 233: LD_INT 21
 235: PUSH
 236: LD_INT 22
 238: PUSH
 239: LD_INT 24
 241: PUSH
 242: EMPTY
 243: LIST
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// mc_scan_area := [ area_base_north , area_base_west , area_base_east , area_base_south ] ;
 248: NOP4
 252: PUSH
 253: LD_INT 35
 255: PUSH
 256: LD_INT 34
 258: PUSH
 259: LD_INT 36
 261: PUSH
 262: LD_INT 33
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: ST_TO_ADDR
// for i = 1 to mc_bases do
 271: NOP4
 275: PUSH
 276: DOUBLE
 277: LD_INT 1
 279: DEC
 280: ST_TO_ADDR
 281: NOP4
 285: PUSH
 286: FOR_TO
 287: IFFALSE 311
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 289: NOP4
 293: PPUSH
 294: NOP4
 298: PUSH
 299: NOP4
 303: ARRAY
 304: PPUSH
 305: NOP4
 309: GO 286
 311: POP
 312: POP
// end ;
 313: LD_VAR 0 1
 317: RET
// export debug , game , side_bot , artifact_get , base_names ; function InitVariables ; begin
 318: LD_INT 0
 320: PPUSH
// debug := false ;
 321: NOP4
 325: PUSH
 326: LD_INT 0
 328: ST_TO_ADDR
// side_bot := 2 ;
 329: NOP4
 333: PUSH
 334: LD_INT 2
 336: ST_TO_ADDR
// artifact_get := false ;
 337: NOP4
 341: PUSH
 342: LD_INT 0
 344: ST_TO_ADDR
// base_names := [ base_a , base_b , base_c , base_d , base_e , base_f , base_g , base_h , base_i , base_j , base_k , base_l , base_m , base_n , base_o , base_p , base_r , base_s , base_t , base_u , base_w , base_x , base_y , base_z ] ;
 345: NOP4
 349: PUSH
 350: LD_STRING base_a
 352: PUSH
 353: LD_STRING base_b
 355: PUSH
 356: LD_STRING base_c
 358: PUSH
 359: LD_STRING base_d
 361: PUSH
 362: LD_STRING base_e
 364: PUSH
 365: LD_STRING base_f
 367: PUSH
 368: LD_STRING base_g
 370: PUSH
 371: LD_STRING base_h
 373: PUSH
 374: LD_STRING base_i
 376: PUSH
 377: LD_STRING base_j
 379: PUSH
 380: LD_STRING base_k
 382: PUSH
 383: LD_STRING base_l
 385: PUSH
 386: LD_STRING base_m
 388: PUSH
 389: LD_STRING base_n
 391: PUSH
 392: LD_STRING base_o
 394: PUSH
 395: LD_STRING base_p
 397: PUSH
 398: LD_STRING base_r
 400: PUSH
 401: LD_STRING base_s
 403: PUSH
 404: LD_STRING base_t
 406: PUSH
 407: LD_STRING base_u
 409: PUSH
 410: LD_STRING base_w
 412: PUSH
 413: LD_STRING base_x
 415: PUSH
 416: LD_STRING base_y
 418: PUSH
 419: LD_STRING base_z
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// end ;
 448: LD_VAR 0 1
 452: RET
// every 0 0$01 trigger game and not debug_strings do
 453: NOP4
 457: PUSH
 458: NOP4
 462: NOT
 463: AND
 464: IFFALSE 480
 466: GO 468
 468: DISABLE
// begin enable ;
 469: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 470: LD_ADDR_OWVAR 47
 474: PUSH
 475: NOP4
 479: ST_TO_ADDR
// end ;
 480: END
// function Debuger ; var i ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// if not debug then
 485: NOP4
 489: NOT
 490: IFFALSE 494
// exit ;
 492: GO 566
// game_speed := 5 ;
 494: LD_ADDR_OWVAR 65
 498: PUSH
 499: LD_INT 5
 501: ST_TO_ADDR
// uc_side := 1 ;
 502: LD_ADDR_OWVAR 20
 506: PUSH
 507: LD_INT 1
 509: ST_TO_ADDR
// uc_nation := 1 ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_INT 1
 517: ST_TO_ADDR
// for i = 1 to 10 do
 518: NOP4
 522: PUSH
 523: DOUBLE
 524: LD_INT 1
 526: DEC
 527: ST_TO_ADDR
 528: LD_INT 10
 530: PUSH
 531: FOR_TO
 532: IFFALSE 564
// begin PrepareHuman ( false , 1 , 10 ) ;
 534: LD_INT 0
 536: PPUSH
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 10
 542: PPUSH
 543: NOP4
// PlaceUnitArea ( CreateHuman , player_1_hum , false ) ;
 547: NOP4
 551: PPUSH
 552: LD_INT 9
 554: PPUSH
 555: LD_INT 0
 557: PPUSH
 558: NOP4
// end ;
 562: GO 531
 564: POP
 565: POP
// end ;
 566: LD_VAR 0 1
 570: RET
// export function CustomEvent ( event ) ; begin
 571: LD_INT 0
 573: PPUSH
// end ; end_of_file
 574: LD_VAR 0 2
 578: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_ape_amount , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_reinforcements_spawned ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
// multi_settings_counter := 6 ;
 586: NOP4
 590: PUSH
 591: LD_INT 6
 593: ST_TO_ADDR
// if multiplayer then
 594: NOP4
 598: IFFALSE 722
// begin your_side := mp_player_side ;
 600: LD_ADDR_OWVAR 2
 604: PUSH
 605: NOP4
 609: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 610: NOP4
 614: PUSH
 615: NOP4
 619: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 620: NOP4
 624: PUSH
 625: NOP4
 629: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 630: NOP4
 634: PUSH
 635: NOP4
 639: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 640: NOP4
 644: PUSH
 645: NOP4
 649: ST_TO_ADDR
// multi_teams := mp_teams ;
 650: NOP4
 654: PUSH
 655: NOP4
 659: ST_TO_ADDR
// for i = 1 to multi_settings_counter do
 660: NOP4
 664: PUSH
 665: DOUBLE
 666: LD_INT 1
 668: DEC
 669: ST_TO_ADDR
 670: NOP4
 674: PUSH
 675: FOR_TO
 676: IFFALSE 718
// multi_settings := Insert ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 678: NOP4
 682: PUSH
 683: NOP4
 687: PPUSH
 688: NOP4
 692: PUSH
 693: LD_INT 1
 695: PLUS
 696: PPUSH
 697: NOP4
 701: PPUSH
 702: NOP4
 706: PUSH
 707: LD_INT 1
 709: PLUS
 710: PPUSH
 711: NOP4
 715: ST_TO_ADDR
 716: GO 675
 718: POP
 719: POP
// end else
 720: GO 908
// begin your_side := 1 ;
 722: LD_ADDR_OWVAR 2
 726: PUSH
 727: LD_INT 1
 729: ST_TO_ADDR
// multi_gametype := 1 ;
 730: NOP4
 734: PUSH
 735: LD_INT 1
 737: ST_TO_ADDR
// multi_sides := [ 2 , 0 , 0 , 3 , 0 , 0 , 1 , 0 ] ;
 738: NOP4
 742: PUSH
 743: LD_INT 2
 745: PUSH
 746: LD_INT 0
 748: PUSH
 749: LD_INT 0
 751: PUSH
 752: LD_INT 3
 754: PUSH
 755: LD_INT 0
 757: PUSH
 758: LD_INT 0
 760: PUSH
 761: LD_INT 1
 763: PUSH
 764: LD_INT 0
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: ST_TO_ADDR
// multi_side_teams := [ 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 ] ;
 777: NOP4
 781: PUSH
 782: LD_INT 1
 784: PUSH
 785: LD_INT 0
 787: PUSH
 788: LD_INT 0
 790: PUSH
 791: LD_INT 1
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 0
 799: PUSH
 800: LD_INT 1
 802: PUSH
 803: LD_INT 0
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: LIST
 812: LIST
 813: LIST
 814: LIST
 815: ST_TO_ADDR
// multi_nations := [ 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 ] ;
 816: NOP4
 820: PUSH
 821: LD_INT 1
 823: PUSH
 824: LD_INT 0
 826: PUSH
 827: LD_INT 0
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: LD_INT 0
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 1
 841: PUSH
 842: LD_INT 0
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: LIST
 854: ST_TO_ADDR
// multi_teams := [ [ 1 , 4 , 7 ] ] ;
 855: NOP4
 859: PUSH
 860: LD_INT 1
 862: PUSH
 863: LD_INT 4
 865: PUSH
 866: LD_INT 7
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: PUSH
 874: EMPTY
 875: LIST
 876: ST_TO_ADDR
// multi_settings := [ 2 , 2 , 1 , 3 , 1 , 1 ] ;
 877: NOP4
 881: PUSH
 882: LD_INT 2
 884: PUSH
 885: LD_INT 2
 887: PUSH
 888: LD_INT 1
 890: PUSH
 891: LD_INT 3
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 1
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 908: NOP4
 912: PUSH
 913: LD_INT 0
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 0
 921: PUSH
 922: LD_INT 0
 924: PUSH
 925: LD_INT 0
 927: PUSH
 928: LD_INT 0
 930: PUSH
 931: LD_INT 0
 933: PUSH
 934: LD_INT 0
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 947: NOP4
 951: PUSH
 952: LD_INT 0
 954: PUSH
 955: LD_INT 0
 957: PUSH
 958: LD_INT 0
 960: PUSH
 961: LD_INT 0
 963: PUSH
 964: LD_INT 0
 966: PUSH
 967: LD_INT 0
 969: PUSH
 970: LD_INT 0
 972: PUSH
 973: LD_INT 0
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 986: NOP4
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: LD_INT 0
 996: PUSH
 997: LD_INT 0
 999: PUSH
1000: LD_INT 0
1002: PUSH
1003: LD_INT 0
1005: PUSH
1006: LD_INT 0
1008: PUSH
1009: LD_INT 0
1011: PUSH
1012: LD_INT 0
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// multi_teamgame := true ;
1025: NOP4
1029: PUSH
1030: LD_INT 1
1032: ST_TO_ADDR
// multi_allowed_nations := [ 1 ] ;
1033: NOP4
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: ST_TO_ADDR
// multi_custom_commanders := true ;
1044: NOP4
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// multi_commanders := [ ] ;
1052: NOP4
1056: PUSH
1057: EMPTY
1058: ST_TO_ADDR
// multi_reinforcements := [ ] ;
1059: NOP4
1063: PUSH
1064: EMPTY
1065: ST_TO_ADDR
// multi_reinforcements_spawned := 0 ;
1066: NOP4
1070: PUSH
1071: LD_INT 0
1073: ST_TO_ADDR
// multi_players_amount := 0 ;
1074: NOP4
1078: PUSH
1079: LD_INT 0
1081: ST_TO_ADDR
// multi_pos_area := [ [ player_1_hum , player_1_veh ] , [ player_2_hum , player_2_veh ] , [ player_3_hum , player_3_veh ] ] ;
1082: NOP4
1086: PUSH
1087: LD_INT 9
1089: PUSH
1090: LD_INT 8
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: PUSH
1097: LD_INT 27
1099: PUSH
1100: LD_INT 26
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 29
1109: PUSH
1110: LD_INT 28
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: ST_TO_ADDR
// for i = 1 to 8 do
1122: NOP4
1126: PUSH
1127: DOUBLE
1128: LD_INT 1
1130: DEC
1131: ST_TO_ADDR
1132: LD_INT 8
1134: PUSH
1135: FOR_TO
1136: IFFALSE 1465
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
1138: NOP4
1142: PPUSH
1143: NOP4
1147: IFFALSE 1305
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
1149: NOP4
1153: PUSH
1154: NOP4
1158: PPUSH
1159: NOP4
1163: PPUSH
1164: LD_INT 1
1166: PPUSH
1167: NOP4
1171: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
1172: NOP4
1176: PUSH
1177: NOP4
1181: PPUSH
1182: NOP4
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: NOP4
1194: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1195: NOP4
1199: PUSH
1200: NOP4
1204: PPUSH
1205: NOP4
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: NOP4
1217: ST_TO_ADDR
// for j = 1 to multi_teams do
1218: NOP4
1222: PUSH
1223: DOUBLE
1224: LD_INT 1
1226: DEC
1227: ST_TO_ADDR
1228: NOP4
1232: PUSH
1233: FOR_TO
1234: IFFALSE 1303
// begin if i in multi_teams [ j ] then
1236: NOP4
1240: PUSH
1241: NOP4
1245: PUSH
1246: NOP4
1250: ARRAY
1251: IN
1252: IFFALSE 1301
// begin tmp := multi_teams [ j ] diff i ;
1254: NOP4
1258: PUSH
1259: NOP4
1263: PUSH
1264: NOP4
1268: ARRAY
1269: PUSH
1270: NOP4
1274: DIFF
1275: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1276: NOP4
1280: PUSH
1281: NOP4
1285: PPUSH
1286: NOP4
1290: PPUSH
1291: NOP4
1295: PPUSH
1296: NOP4
1300: ST_TO_ADDR
// end ; end ;
1301: GO 1233
1303: POP
1304: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1305: NOP4
1309: PUSH
1310: NOP4
1314: ARRAY
1315: PUSH
1316: NOP4
1320: PUSH
1321: NOP4
1325: ARRAY
1326: PUSH
1327: NOP4
1331: IN
1332: NOT
1333: AND
1334: IFFALSE 1375
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1336: NOP4
1340: PUSH
1341: NOP4
1345: PPUSH
1346: NOP4
1350: PPUSH
1351: NOP4
1355: PUSH
1356: LD_INT 1
1358: PPUSH
1359: NOP4
1363: PPUSH
1364: NOP4
1368: ARRAY
1369: PPUSH
1370: NOP4
1374: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1375: NOP4
1379: PUSH
1380: NOP4
1384: ARRAY
1385: NOT
1386: PUSH
1387: NOP4
1391: PUSH
1392: NOP4
1396: ARRAY
1397: NOT
1398: AND
1399: PUSH
1400: NOP4
1404: PUSH
1405: NOP4
1409: ARRAY
1410: NOT
1411: AND
1412: IFFALSE 1437
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1414: NOP4
1418: PUSH
1419: NOP4
1423: PPUSH
1424: NOP4
1428: PPUSH
1429: LD_INT 1
1431: PPUSH
1432: NOP4
1436: ST_TO_ADDR
// if multi_sides [ i ] then
1437: NOP4
1441: PUSH
1442: NOP4
1446: ARRAY
1447: IFFALSE 1463
// multi_players_amount := multi_players_amount + 1 ;
1449: NOP4
1453: PUSH
1454: NOP4
1458: PUSH
1459: LD_INT 1
1461: PLUS
1462: ST_TO_ADDR
// end ;
1463: GO 1135
1465: POP
1466: POP
// for i in multi_teams do
1467: NOP4
1471: PUSH
1472: NOP4
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1586
// begin for j = 2 to i do
1480: NOP4
1484: PUSH
1485: DOUBLE
1486: LD_INT 2
1488: DEC
1489: ST_TO_ADDR
1490: NOP4
1494: PUSH
1495: FOR_TO
1496: IFFALSE 1582
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1498: NOP4
1502: PUSH
1503: NOP4
1507: ARRAY
1508: PPUSH
1509: NOP4
1513: PUSH
1514: LD_INT 1
1516: ARRAY
1517: PPUSH
1518: NOP4
// for x = 1 to j - 1 do
1522: NOP4
1526: PUSH
1527: DOUBLE
1528: LD_INT 1
1530: DEC
1531: ST_TO_ADDR
1532: NOP4
1536: PUSH
1537: LD_INT 1
1539: MINUS
1540: PUSH
1541: FOR_TO
1542: IFFALSE 1578
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1544: NOP4
1548: PUSH
1549: NOP4
1553: ARRAY
1554: PPUSH
1555: NOP4
1559: PUSH
1560: NOP4
1564: ARRAY
1565: PPUSH
1566: LD_INT 1
1568: PPUSH
1569: LD_INT 1
1571: PPUSH
1572: NOP4
1576: GO 1541
1578: POP
1579: POP
// end ;
1580: GO 1495
1582: POP
1583: POP
// end ;
1584: GO 1477
1586: POP
1587: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1588: LD_ADDR_OWVAR 67
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: LD_INT 2
1598: PUSH
1599: LD_INT 3
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: NOP4
1611: PUSH
1612: LD_INT 1
1614: ARRAY
1615: ARRAY
1616: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
1617: NOP4
1621: PUSH
1622: LD_INT 9
1624: PUSH
1625: LD_INT 12
1627: PUSH
1628: LD_INT 15
1630: PUSH
1631: LD_INT 18
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: PUSH
1640: NOP4
1644: PUSH
1645: LD_INT 2
1647: ARRAY
1648: ARRAY
1649: ST_TO_ADDR
// multi_skill_level := [ 5 , 7 , 9 ] [ multi_settings [ 3 ] ] ;
1650: NOP4
1654: PUSH
1655: LD_INT 5
1657: PUSH
1658: LD_INT 7
1660: PUSH
1661: LD_INT 9
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: NOP4
1673: PUSH
1674: LD_INT 3
1676: ARRAY
1677: ARRAY
1678: ST_TO_ADDR
// multi_crates_spawn := [ [ 6000 , 0 0$45 ] , [ 8000 , 0 0$36 ] , [ 10000 , 0 0$22 ] , [ 15000 , 0 0$22 ] ] [ multi_settings [ 4 ] ] ;
1679: NOP4
1683: PUSH
1684: LD_INT 6000
1686: PUSH
1687: LD_INT 1575
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 8000
1696: PUSH
1697: LD_INT 1260
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 10000
1706: PUSH
1707: LD_INT 770
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: LD_INT 15000
1716: PUSH
1717: LD_INT 770
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: PUSH
1730: NOP4
1734: PUSH
1735: LD_INT 4
1737: ARRAY
1738: ARRAY
1739: ST_TO_ADDR
// multi_ape_amount := [ 6 , 8 , 10 ] [ multi_settings [ 5 ] ] ;
1740: NOP4
1744: PUSH
1745: LD_INT 6
1747: PUSH
1748: LD_INT 8
1750: PUSH
1751: LD_INT 10
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: NOP4
1763: PUSH
1764: LD_INT 5
1766: ARRAY
1767: ARRAY
1768: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1769: NOP4
1773: PUSH
1774: LD_INT 0
1776: PUSH
1777: LD_INT 1
1779: PUSH
1780: LD_INT 2
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: LIST
1787: PUSH
1788: NOP4
1792: PUSH
1793: LD_INT 6
1795: ARRAY
1796: ARRAY
1797: ST_TO_ADDR
// end ;
1798: LD_VAR 0 1
1802: RET
// export function Multiplayer_SetBotSide ( prefer_side ) ; var i ; begin
1803: LD_INT 0
1805: PPUSH
1806: PPUSH
// ResetFog ;
1807: NOP4
// if not multi_bots then
1811: NOP4
1815: NOT
1816: IFFALSE 1820
// exit ;
1818: GO 1892
// if multi_bots [ prefer_side ] then
1820: NOP4
1824: PUSH
1825: NOP4
1829: ARRAY
1830: IFFALSE 1844
// begin result := prefer_side ;
1832: NOP4
1836: PUSH
1837: NOP4
1841: ST_TO_ADDR
// exit ;
1842: GO 1892
// end ; for i = 1 to multi_bots do
1844: NOP4
1848: PUSH
1849: DOUBLE
1850: LD_INT 1
1852: DEC
1853: ST_TO_ADDR
1854: NOP4
1858: PUSH
1859: FOR_TO
1860: IFFALSE 1890
// if multi_bots [ i ] then
1862: NOP4
1866: PUSH
1867: NOP4
1871: ARRAY
1872: IFFALSE 1888
// begin result := i ;
1874: NOP4
1878: PUSH
1879: NOP4
1883: ST_TO_ADDR
// exit ;
1884: POP
1885: POP
1886: GO 1892
// end ;
1888: GO 1859
1890: POP
1891: POP
// end ;
1892: LD_VAR 0 2
1896: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1897: LD_INT 0
1899: PPUSH
// uc_side := side ;
1900: LD_ADDR_OWVAR 20
1904: PUSH
1905: NOP4
1909: ST_TO_ADDR
// uc_nation := 1 ;
1910: LD_ADDR_OWVAR 21
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// hc_importance := 100 ;
1918: LD_ADDR_OWVAR 32
1922: PUSH
1923: LD_INT 100
1925: ST_TO_ADDR
// hc_class := 1 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 1
1933: ST_TO_ADDR
// if num = 1 then
1934: NOP4
1938: PUSH
1939: LD_INT 1
1941: EQUAL
1942: IFFALSE 2024
// begin hc_gallery := us ;
1944: LD_ADDR_OWVAR 33
1948: PUSH
1949: LD_STRING us
1951: ST_TO_ADDR
// hc_face_number := 5 ;
1952: LD_ADDR_OWVAR 34
1956: PUSH
1957: LD_INT 5
1959: ST_TO_ADDR
// hc_name := John Macmilan ;
1960: LD_ADDR_OWVAR 26
1964: PUSH
1965: LD_STRING John Macmilan
1967: ST_TO_ADDR
// hc_sex := sex_male ;
1968: LD_ADDR_OWVAR 27
1972: PUSH
1973: LD_INT 1
1975: ST_TO_ADDR
// hc_skills := [ 7 , 2 , 4 , 4 ] ;
1976: LD_ADDR_OWVAR 31
1980: PUSH
1981: LD_INT 7
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 4
1989: PUSH
1990: LD_INT 4
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1999: LD_ADDR_OWVAR 29
2003: PUSH
2004: LD_INT 11
2006: PUSH
2007: LD_INT 10
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: ST_TO_ADDR
// result := CreateHuman ;
2014: NOP4
2018: PUSH
2019: NOP4
2023: ST_TO_ADDR
// end ; if num = 2 then
2024: NOP4
2028: PUSH
2029: LD_INT 2
2031: EQUAL
2032: IFFALSE 2114
// begin hc_gallery := us ;
2034: LD_ADDR_OWVAR 33
2038: PUSH
2039: LD_STRING us
2041: ST_TO_ADDR
// hc_face_number := 2 ;
2042: LD_ADDR_OWVAR 34
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
2050: LD_ADDR_OWVAR 26
2054: PUSH
2055: LD_STRING Lucy Donaldson
2057: ST_TO_ADDR
// hc_sex := sex_female ;
2058: LD_ADDR_OWVAR 27
2062: PUSH
2063: LD_INT 2
2065: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 3 ] ;
2066: LD_ADDR_OWVAR 31
2070: PUSH
2071: LD_INT 6
2073: PUSH
2074: LD_INT 3
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 3
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: ST_TO_ADDR
// hc_attr := [ 9 , 12 ] ;
2089: LD_ADDR_OWVAR 29
2093: PUSH
2094: LD_INT 9
2096: PUSH
2097: LD_INT 12
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: ST_TO_ADDR
// result := CreateHuman ;
2104: NOP4
2108: PUSH
2109: NOP4
2113: ST_TO_ADDR
// end ; if num = 3 then
2114: NOP4
2118: PUSH
2119: LD_INT 3
2121: EQUAL
2122: IFFALSE 2204
// begin hc_gallery := us ;
2124: LD_ADDR_OWVAR 33
2128: PUSH
2129: LD_STRING us
2131: ST_TO_ADDR
// hc_face_number := 16 ;
2132: LD_ADDR_OWVAR 34
2136: PUSH
2137: LD_INT 16
2139: ST_TO_ADDR
// hc_name := Peter van Houten ;
2140: LD_ADDR_OWVAR 26
2144: PUSH
2145: LD_STRING Peter van Houten
2147: ST_TO_ADDR
// hc_sex := sex_male ;
2148: LD_ADDR_OWVAR 27
2152: PUSH
2153: LD_INT 1
2155: ST_TO_ADDR
// hc_skills := [ 8 , 1 , 3 , 2 ] ;
2156: LD_ADDR_OWVAR 31
2160: PUSH
2161: LD_INT 8
2163: PUSH
2164: LD_INT 1
2166: PUSH
2167: LD_INT 3
2169: PUSH
2170: LD_INT 2
2172: PUSH
2173: EMPTY
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2179: LD_ADDR_OWVAR 29
2183: PUSH
2184: LD_INT 10
2186: PUSH
2187: LD_INT 11
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: ST_TO_ADDR
// result := CreateHuman ;
2194: NOP4
2198: PUSH
2199: NOP4
2203: ST_TO_ADDR
// end ; end ;
2204: LD_VAR 0 3
2208: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , cl , un , veh , tmp , copy , people_amount ; begin
2209: LD_INT 0
2211: PPUSH
2212: PPUSH
2213: PPUSH
2214: PPUSH
2215: PPUSH
2216: PPUSH
2217: PPUSH
2218: PPUSH
2219: PPUSH
// for i = 1 to 8 do
2220: NOP4
2224: PUSH
2225: DOUBLE
2226: LD_INT 1
2228: DEC
2229: ST_TO_ADDR
2230: LD_INT 8
2232: PUSH
2233: FOR_TO
2234: IFFALSE 3124
// begin if not multi_sides [ i ] then
2236: NOP4
2240: PUSH
2241: NOP4
2245: ARRAY
2246: NOT
2247: IFFALSE 2251
// continue ;
2249: GO 2233
// if multi_custom_commanders then
2251: NOP4
2255: IFFALSE 2347
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2257: NOP4
2261: PUSH
2262: NOP4
2266: PPUSH
2267: NOP4
2271: PUSH
2272: NOP4
2276: ARRAY
2277: PPUSH
2278: NOP4
2282: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2283: NOP4
2287: PUSH
2288: NOP4
2292: PPUSH
2293: NOP4
2297: PUSH
2298: LD_INT 1
2300: PLUS
2301: PPUSH
2302: NOP4
2306: PPUSH
2307: NOP4
2311: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2312: NOP4
2316: PPUSH
2317: NOP4
2321: PUSH
2322: NOP4
2326: PUSH
2327: NOP4
2331: ARRAY
2332: ARRAY
2333: PUSH
2334: LD_INT 1
2336: ARRAY
2337: PPUSH
2338: LD_INT 0
2340: PPUSH
2341: NOP4
// end else
2345: GO 2558
// begin uc_side := i ;
2347: LD_ADDR_OWVAR 20
2351: PUSH
2352: NOP4
2356: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2357: LD_ADDR_OWVAR 21
2361: PUSH
2362: NOP4
2366: PUSH
2367: NOP4
2371: ARRAY
2372: ST_TO_ADDR
// hc_importance := 100 ;
2373: LD_ADDR_OWVAR 32
2377: PUSH
2378: LD_INT 100
2380: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2381: LD_INT 0
2383: PPUSH
2384: LD_INT 1
2386: PPUSH
2387: NOP4
2391: PPUSH
2392: NOP4
// if multiplayer then
2396: NOP4
2400: IFFALSE 2458
// begin hc_name := mp_sides_players_names [ i ] ;
2402: LD_ADDR_OWVAR 26
2406: PUSH
2407: NOP4
2411: PUSH
2412: NOP4
2416: ARRAY
2417: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2418: LD_ADDR_OWVAR 33
2422: PUSH
2423: LD_STRING MULTIAVATARS
2425: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2426: LD_ADDR_OWVAR 34
2430: PUSH
2431: NOP4
2435: PPUSH
2436: NOP4
2440: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2441: LD_ADDR_OWVAR 27
2445: PUSH
2446: NOP4
2450: PPUSH
2451: NOP4
2455: ST_TO_ADDR
// end else
2456: GO 2490
// begin hc_gallery :=  ;
2458: LD_ADDR_OWVAR 33
2462: PUSH
2463: LD_STRING 
2465: ST_TO_ADDR
// hc_name :=  ;
2466: LD_ADDR_OWVAR 26
2470: PUSH
2471: LD_STRING 
2473: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2474: LD_ADDR_OWVAR 27
2478: PUSH
2479: LD_INT 1
2481: PPUSH
2482: LD_INT 2
2484: PPUSH
2485: NOP4
2489: ST_TO_ADDR
// end ; un := CreateHuman ;
2490: NOP4
2494: PUSH
2495: NOP4
2499: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2500: NOP4
2504: PPUSH
2505: NOP4
2509: PUSH
2510: NOP4
2514: PUSH
2515: NOP4
2519: ARRAY
2520: ARRAY
2521: PUSH
2522: LD_INT 1
2524: ARRAY
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: NOP4
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2533: NOP4
2537: PUSH
2538: NOP4
2542: PPUSH
2543: NOP4
2547: PPUSH
2548: NOP4
2552: PPUSH
2553: NOP4
2557: ST_TO_ADDR
// end ; InitHc ;
2558: NOP4
// InitUc ;
2562: NOP4
// uc_side := i ;
2566: LD_ADDR_OWVAR 20
2570: PUSH
2571: NOP4
2575: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2576: LD_ADDR_OWVAR 21
2580: PUSH
2581: NOP4
2585: PUSH
2586: NOP4
2590: ARRAY
2591: ST_TO_ADDR
// hc_gallery :=  ;
2592: LD_ADDR_OWVAR 33
2596: PUSH
2597: LD_STRING 
2599: ST_TO_ADDR
// hc_name :=  ;
2600: LD_ADDR_OWVAR 26
2604: PUSH
2605: LD_STRING 
2607: ST_TO_ADDR
// hc_importance := 0 ;
2608: LD_ADDR_OWVAR 32
2612: PUSH
2613: LD_INT 0
2615: ST_TO_ADDR
// cl := 1 ;
2616: NOP4
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// for j = 2 to multi_pep_amount do
2624: NOP4
2628: PUSH
2629: DOUBLE
2630: LD_INT 2
2632: DEC
2633: ST_TO_ADDR
2634: NOP4
2638: PUSH
2639: FOR_TO
2640: IFFALSE 3012
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2642: NOP4
2646: PUSH
2647: LD_INT 1
2649: MINUS
2650: PUSH
2651: NOP4
2655: PUSH
2656: LD_INT 1
2658: MINUS
2659: PUSH
2660: LD_INT 4
2662: DIVREAL
2663: MOD
2664: PUSH
2665: LD_INT 0
2667: EQUAL
2668: IFFALSE 2684
// cl := cl + 1 ;
2670: NOP4
2674: PUSH
2675: NOP4
2679: PUSH
2680: LD_INT 1
2682: PLUS
2683: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2684: LD_INT 0
2686: PPUSH
2687: NOP4
2691: PPUSH
2692: NOP4
2696: PPUSH
2697: NOP4
// un := CreateHuman ;
2701: NOP4
2705: PUSH
2706: NOP4
2710: ST_TO_ADDR
// if j > copy then
2711: NOP4
2715: PUSH
2716: NOP4
2720: GREATER
2721: IFFALSE 2750
// copy := Replace ( copy , j , un ) else
2723: NOP4
2727: PUSH
2728: NOP4
2732: PPUSH
2733: NOP4
2737: PPUSH
2738: NOP4
2742: PPUSH
2743: NOP4
2747: ST_TO_ADDR
2748: GO 2832
// begin CopySkills ( copy [ j ] , un ) ;
2750: NOP4
2754: PUSH
2755: NOP4
2759: ARRAY
2760: PPUSH
2761: NOP4
2765: PPUSH
2766: NOP4
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2770: NOP4
2774: PPUSH
2775: LD_INT 2
2777: PPUSH
2778: NOP4
2782: PUSH
2783: NOP4
2787: ARRAY
2788: PPUSH
2789: LD_INT 2
2791: PPUSH
2792: NOP4
2796: PPUSH
2797: NOP4
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2801: NOP4
2805: PPUSH
2806: LD_INT 1
2808: PPUSH
2809: NOP4
2813: PUSH
2814: NOP4
2818: ARRAY
2819: PPUSH
2820: LD_INT 1
2822: PPUSH
2823: NOP4
2827: PPUSH
2828: NOP4
// end ; if multi_pos_area then
2832: NOP4
2836: IFFALSE 3010
// begin if GetClass ( un ) = 3 then
2838: NOP4
2842: PPUSH
2843: NOP4
2847: PUSH
2848: LD_INT 3
2850: EQUAL
2851: IFFALSE 2977
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ j mod 2 + 1 ] , engine_solar , control_manual , [ us_double_gun , us_gatling_gun , us_light_gun ] [ j mod 3 + 1 ] , 100 ) ;
2853: LD_INT 3
2855: PUSH
2856: LD_INT 2
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: PUSH
2863: NOP4
2867: PUSH
2868: LD_INT 2
2870: MOD
2871: PUSH
2872: LD_INT 1
2874: PLUS
2875: ARRAY
2876: PPUSH
2877: LD_INT 2
2879: PPUSH
2880: LD_INT 1
2882: PPUSH
2883: LD_INT 5
2885: PUSH
2886: LD_INT 4
2888: PUSH
2889: LD_INT 3
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: LIST
2896: PUSH
2897: NOP4
2901: PUSH
2902: LD_INT 3
2904: MOD
2905: PUSH
2906: LD_INT 1
2908: PLUS
2909: ARRAY
2910: PPUSH
2911: LD_INT 100
2913: PPUSH
2914: NOP4
// veh := CreateVehicle ;
2918: NOP4
2922: PUSH
2923: NOP4
2927: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2928: NOP4
2932: PPUSH
2933: NOP4
2937: PUSH
2938: NOP4
2942: PUSH
2943: NOP4
2947: ARRAY
2948: ARRAY
2949: PUSH
2950: LD_INT 2
2952: ARRAY
2953: PPUSH
2954: LD_INT 0
2956: PPUSH
2957: NOP4
// PlaceHumanInUnit ( un , veh ) ;
2961: NOP4
2965: PPUSH
2966: NOP4
2970: PPUSH
2971: NOP4
// continue ;
2975: GO 2639
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2977: NOP4
2981: PPUSH
2982: NOP4
2986: PUSH
2987: NOP4
2991: PUSH
2992: NOP4
2996: ARRAY
2997: ARRAY
2998: PUSH
2999: LD_INT 1
3001: ARRAY
3002: PPUSH
3003: LD_INT 0
3005: PPUSH
3006: NOP4
// end ; end ;
3010: GO 2639
3012: POP
3013: POP
// for j = 1 to 3 do
3014: NOP4
3018: PUSH
3019: DOUBLE
3020: LD_INT 1
3022: DEC
3023: ST_TO_ADDR
3024: LD_INT 3
3026: PUSH
3027: FOR_TO
3028: IFFALSE 3120
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_solar , control_computer , [ us_radar , us_rocket_launcher , us_gatling_gun ] [ j ] , 100 ) ;
3030: LD_INT 2
3032: PUSH
3033: LD_INT 3
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 2
3045: PPUSH
3046: NOP4
3050: ARRAY
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: LD_INT 3
3057: PPUSH
3058: LD_INT 11
3060: PUSH
3061: LD_INT 7
3063: PUSH
3064: LD_INT 4
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: LIST
3071: PUSH
3072: NOP4
3076: ARRAY
3077: PPUSH
3078: LD_INT 100
3080: PPUSH
3081: NOP4
// PlaceUnitArea ( CreateVehicle , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3085: NOP4
3089: PPUSH
3090: NOP4
3094: PUSH
3095: NOP4
3099: PUSH
3100: NOP4
3104: ARRAY
3105: ARRAY
3106: PUSH
3107: LD_INT 1
3109: ARRAY
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: NOP4
// end ;
3118: GO 3027
3120: POP
3121: POP
// end ;
3122: GO 2233
3124: POP
3125: POP
// end ;
3126: LD_VAR 0 1
3130: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3131: LD_INT 0
3133: PPUSH
3134: PPUSH
3135: PPUSH
3136: PPUSH
3137: PPUSH
// if not multi_support then
3138: NOP4
3142: NOT
3143: IFFALSE 3147
// exit ;
3145: GO 3675
// result := [ ] ;
3147: NOP4
3151: PUSH
3152: EMPTY
3153: ST_TO_ADDR
// for i = 1 to 8 do
3154: NOP4
3158: PUSH
3159: DOUBLE
3160: LD_INT 1
3162: DEC
3163: ST_TO_ADDR
3164: LD_INT 8
3166: PUSH
3167: FOR_TO
3168: IFFALSE 3673
// begin if multi_sides [ i ] then
3170: NOP4
3174: PUSH
3175: NOP4
3179: ARRAY
3180: IFFALSE 3671
// begin tmp := [ ] ;
3182: NOP4
3186: PUSH
3187: EMPTY
3188: ST_TO_ADDR
// if multi_support = 1 then
3189: NOP4
3193: PUSH
3194: LD_INT 1
3196: EQUAL
3197: IFFALSE 3365
// begin uc_side := i ;
3199: LD_ADDR_OWVAR 20
3203: PUSH
3204: NOP4
3208: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3209: LD_ADDR_OWVAR 21
3213: PUSH
3214: NOP4
3218: PUSH
3219: NOP4
3223: ARRAY
3224: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3225: LD_INT 3
3227: PPUSH
3228: LD_INT 1
3230: PPUSH
3231: LD_INT 3
3233: PPUSH
3234: LD_INT 11
3236: PPUSH
3237: LD_INT 40
3239: PPUSH
3240: NOP4
// tmp := tmp ^ CreateVehicle ;
3244: NOP4
3248: PUSH
3249: NOP4
3253: PUSH
3254: NOP4
3258: ADD
3259: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_double_gun , 40 ) ;
3260: LD_INT 2
3262: PPUSH
3263: LD_INT 1
3265: PPUSH
3266: LD_INT 3
3268: PPUSH
3269: LD_INT 5
3271: PPUSH
3272: LD_INT 40
3274: PPUSH
3275: NOP4
// tmp := tmp ^ CreateVehicle ;
3279: NOP4
3283: PUSH
3284: NOP4
3288: PUSH
3289: NOP4
3293: ADD
3294: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_gatling_gun , 40 ) ;
3295: LD_INT 2
3297: PPUSH
3298: LD_INT 3
3300: PPUSH
3301: LD_INT 3
3303: PPUSH
3304: LD_INT 4
3306: PPUSH
3307: LD_INT 40
3309: PPUSH
3310: NOP4
// tmp := tmp ^ CreateVehicle ;
3314: NOP4
3318: PUSH
3319: NOP4
3323: PUSH
3324: NOP4
3328: ADD
3329: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_solar , control_computer , us_laser , 40 ) ;
3330: LD_INT 3
3332: PPUSH
3333: LD_INT 2
3335: PPUSH
3336: LD_INT 3
3338: PPUSH
3339: LD_INT 9
3341: PPUSH
3342: LD_INT 40
3344: PPUSH
3345: NOP4
// tmp := tmp ^ CreateVehicle ;
3349: NOP4
3353: PUSH
3354: NOP4
3358: PUSH
3359: NOP4
3363: ADD
3364: ST_TO_ADDR
// end ; if multi_support = 2 then
3365: NOP4
3369: PUSH
3370: LD_INT 2
3372: EQUAL
3373: IFFALSE 3646
// begin uc_side := i ;
3375: LD_ADDR_OWVAR 20
3379: PUSH
3380: NOP4
3384: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3385: LD_ADDR_OWVAR 21
3389: PUSH
3390: NOP4
3394: PUSH
3395: NOP4
3399: ARRAY
3400: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3401: LD_INT 3
3403: PPUSH
3404: LD_INT 1
3406: PPUSH
3407: LD_INT 3
3409: PPUSH
3410: LD_INT 11
3412: PPUSH
3413: LD_INT 40
3415: PPUSH
3416: NOP4
// tmp := tmp ^ CreateVehicle ;
3420: NOP4
3424: PUSH
3425: NOP4
3429: PUSH
3430: NOP4
3434: ADD
3435: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 40 ) ;
3436: LD_INT 3
3438: PPUSH
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 12
3447: PPUSH
3448: LD_INT 40
3450: PPUSH
3451: NOP4
// tmp := tmp ^ CreateVehicle ;
3455: NOP4
3459: PUSH
3460: NOP4
3464: PUSH
3465: NOP4
3469: ADD
3470: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_double_gun , 40 ) ;
3471: LD_INT 2
3473: PPUSH
3474: LD_INT 3
3476: PPUSH
3477: LD_INT 3
3479: PPUSH
3480: LD_INT 5
3482: PPUSH
3483: LD_INT 40
3485: PPUSH
3486: NOP4
// tmp := tmp ^ CreateVehicle ;
3490: NOP4
3494: PUSH
3495: NOP4
3499: PUSH
3500: NOP4
3504: ADD
3505: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3506: LD_INT 4
3508: PPUSH
3509: LD_INT 1
3511: PPUSH
3512: LD_INT 3
3514: PPUSH
3515: LD_INT 6
3517: PPUSH
3518: LD_INT 40
3520: PPUSH
3521: NOP4
// tmp := tmp ^ CreateVehicle ;
3525: NOP4
3529: PUSH
3530: NOP4
3534: PUSH
3535: NOP4
3539: ADD
3540: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3541: LD_INT 2
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 3
3549: PPUSH
3550: LD_INT 9
3552: PPUSH
3553: LD_INT 40
3555: PPUSH
3556: NOP4
// tmp := tmp ^ CreateVehicle ;
3560: NOP4
3564: PUSH
3565: NOP4
3569: PUSH
3570: NOP4
3574: ADD
3575: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3576: LD_INT 2
3578: PPUSH
3579: LD_INT 3
3581: PPUSH
3582: LD_INT 3
3584: PPUSH
3585: LD_INT 9
3587: PPUSH
3588: LD_INT 40
3590: PPUSH
3591: NOP4
// tmp := tmp ^ CreateVehicle ;
3595: NOP4
3599: PUSH
3600: NOP4
3604: PUSH
3605: NOP4
3609: ADD
3610: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3611: LD_INT 4
3613: PPUSH
3614: LD_INT 1
3616: PPUSH
3617: LD_INT 3
3619: PPUSH
3620: LD_INT 6
3622: PPUSH
3623: LD_INT 40
3625: PPUSH
3626: NOP4
// tmp := tmp ^ CreateVehicle ;
3630: NOP4
3634: PUSH
3635: NOP4
3639: PUSH
3640: NOP4
3644: ADD
3645: ST_TO_ADDR
// end ; result := Insert ( result , i , tmp ) ;
3646: NOP4
3650: PUSH
3651: NOP4
3655: PPUSH
3656: NOP4
3660: PPUSH
3661: NOP4
3665: PPUSH
3666: NOP4
3670: ST_TO_ADDR
// end ; end ;
3671: GO 3167
3673: POP
3674: POP
// end ;
3675: LD_VAR 0 1
3679: RET
// export function Multiplayer_Start ( ) ; begin
3680: LD_INT 0
3682: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3683: NOP4
// Multiplayer_InitPointSystem ( ) ;
3687: NOP4
// Multiplayer_RegisterCondition ( 20 ) ;
3691: LD_INT 20
3693: PPUSH
3694: NOP4
// Multiplayer_RegisterCondition ( 150 ) ;
3698: LD_INT 150
3700: PPUSH
3701: NOP4
// Multiplayer_RegisterCondition ( 5 ) ;
3705: LD_INT 5
3707: PPUSH
3708: NOP4
// Multiplayer_RegisterCondition ( - 40 ) ;
3712: LD_INT 40
3714: NEG
3715: PPUSH
3716: NOP4
// Multiplayer_RegisterCondition ( 200 ) ;
3720: LD_INT 200
3722: PPUSH
3723: NOP4
// Multiplayer_RegisterCondition ( 2 ) ;
3727: LD_INT 2
3729: PPUSH
3730: NOP4
// Multiplayer_SpawnArtifact ;
3734: NOP4
// if multi_support then
3738: NOP4
3742: IFFALSE 3754
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3744: NOP4
3748: PUSH
3749: NOP4
3753: ST_TO_ADDR
// game := true ;
3754: NOP4
3758: PUSH
3759: LD_INT 1
3761: ST_TO_ADDR
// if multi_sides [ your_side ] then
3762: NOP4
3766: PUSH
3767: NOP4
3771: ARRAY
3772: IFFALSE 3799
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3774: LD_INT 22
3776: PUSH
3777: NOP4
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PPUSH
3786: NOP4
3790: PUSH
3791: LD_INT 1
3793: ARRAY
3794: PPUSH
3795: NOP4
// end ;
3799: LD_VAR 0 1
3803: RET
// export function Multiplayer_End ( ) ; var i , j , tmp , reinforcements_arrive ; begin
3804: LD_INT 0
3806: PPUSH
3807: PPUSH
3808: PPUSH
3809: PPUSH
3810: PPUSH
// reinforcements_arrive := 0 ;
3811: NOP4
3815: PUSH
3816: LD_INT 0
3818: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3819: LD_INT 35
3821: PPUSH
3822: NOP4
// if tick > 10 10$00 and not multi_reinforcements_spawned and multi_support = 1 then
3826: NOP4
3830: PUSH
3831: LD_INT 21000
3833: GREATER
3834: PUSH
3835: NOP4
3839: NOT
3840: AND
3841: PUSH
3842: NOP4
3846: PUSH
3847: LD_INT 1
3849: EQUAL
3850: AND
3851: IFFALSE 4046
// begin multi_reinforcements_spawned := 1 ;
3853: NOP4
3857: PUSH
3858: LD_INT 1
3860: ST_TO_ADDR
// for i = 1 to 8 do
3861: NOP4
3865: PUSH
3866: DOUBLE
3867: LD_INT 1
3869: DEC
3870: ST_TO_ADDR
3871: LD_INT 8
3873: PUSH
3874: FOR_TO
3875: IFFALSE 4034
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
3877: NOP4
3881: PUSH
3882: NOP4
3886: ARRAY
3887: PUSH
3888: NOP4
3892: PUSH
3893: NOP4
3897: ARRAY
3898: NOT
3899: AND
3900: PUSH
3901: NOP4
3905: PUSH
3906: NOP4
3910: ARRAY
3911: AND
3912: IFFALSE 4032
// begin tmp := multi_reinforcements [ i ] ;
3914: NOP4
3918: PUSH
3919: NOP4
3923: PUSH
3924: NOP4
3928: ARRAY
3929: ST_TO_ADDR
// for j = 1 to 4 do
3930: NOP4
3934: PUSH
3935: DOUBLE
3936: LD_INT 1
3938: DEC
3939: ST_TO_ADDR
3940: LD_INT 4
3942: PUSH
3943: FOR_TO
3944: IFFALSE 4005
// begin PlaceUnitArea ( tmp [ j ] , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3946: NOP4
3950: PUSH
3951: NOP4
3955: ARRAY
3956: PPUSH
3957: NOP4
3961: PUSH
3962: NOP4
3966: PUSH
3967: NOP4
3971: ARRAY
3972: ARRAY
3973: PUSH
3974: LD_INT 2
3976: ARRAY
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: NOP4
// tmp := Delete ( tmp , 1 ) ;
3985: NOP4
3989: PUSH
3990: NOP4
3994: PPUSH
3995: LD_INT 1
3997: PPUSH
3998: NOP4
4002: ST_TO_ADDR
// end ;
4003: GO 3943
4005: POP
4006: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , tmp ) ;
4007: NOP4
4011: PUSH
4012: NOP4
4016: PPUSH
4017: NOP4
4021: PPUSH
4022: NOP4
4026: PPUSH
4027: NOP4
4031: ST_TO_ADDR
// end ; end ;
4032: GO 3874
4034: POP
4035: POP
// reinforcements_arrive := tick ;
4036: NOP4
4040: PUSH
4041: NOP4
4045: ST_TO_ADDR
// end ; if reinforcements_arrive + 10 10$00 < tick and multi_reinforcements_spawned = 1 and multi_support = 2 then
4046: NOP4
4050: PUSH
4051: LD_INT 21000
4053: PLUS
4054: PUSH
4055: NOP4
4059: LESS
4060: PUSH
4061: NOP4
4065: PUSH
4066: LD_INT 1
4068: EQUAL
4069: AND
4070: PUSH
4071: NOP4
4075: PUSH
4076: LD_INT 2
4078: EQUAL
4079: AND
4080: IFFALSE 4265
// begin multi_reinforcements_spawned := 2 ;
4082: NOP4
4086: PUSH
4087: LD_INT 2
4089: ST_TO_ADDR
// for i = 1 to 8 do
4090: NOP4
4094: PUSH
4095: DOUBLE
4096: LD_INT 1
4098: DEC
4099: ST_TO_ADDR
4100: LD_INT 8
4102: PUSH
4103: FOR_TO
4104: IFFALSE 4263
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
4106: NOP4
4110: PUSH
4111: NOP4
4115: ARRAY
4116: PUSH
4117: NOP4
4121: PUSH
4122: NOP4
4126: ARRAY
4127: NOT
4128: AND
4129: PUSH
4130: NOP4
4134: PUSH
4135: NOP4
4139: ARRAY
4140: AND
4141: IFFALSE 4261
// begin tmp := multi_reinforcements [ i ] ;
4143: NOP4
4147: PUSH
4148: NOP4
4152: PUSH
4153: NOP4
4157: ARRAY
4158: ST_TO_ADDR
// for j = 1 to 3 do
4159: NOP4
4163: PUSH
4164: DOUBLE
4165: LD_INT 1
4167: DEC
4168: ST_TO_ADDR
4169: LD_INT 3
4171: PUSH
4172: FOR_TO
4173: IFFALSE 4234
// begin PlaceUnitArea ( tmp [ j ] , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
4175: NOP4
4179: PUSH
4180: NOP4
4184: ARRAY
4185: PPUSH
4186: NOP4
4190: PUSH
4191: NOP4
4195: PUSH
4196: NOP4
4200: ARRAY
4201: ARRAY
4202: PUSH
4203: LD_INT 2
4205: ARRAY
4206: PPUSH
4207: LD_INT 0
4209: PPUSH
4210: NOP4
// tmp := Delete ( tmp , 1 ) ;
4214: NOP4
4218: PUSH
4219: NOP4
4223: PPUSH
4224: LD_INT 1
4226: PPUSH
4227: NOP4
4231: ST_TO_ADDR
// end ;
4232: GO 4172
4234: POP
4235: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , tmp ) ;
4236: NOP4
4240: PUSH
4241: NOP4
4245: PPUSH
4246: NOP4
4250: PPUSH
4251: NOP4
4255: PPUSH
4256: NOP4
4260: ST_TO_ADDR
// end ; end ;
4261: GO 4103
4263: POP
4264: POP
// end ; if not multi_custom_commanders then
4265: NOP4
4269: NOT
4270: IFFALSE 4383
// begin for i = 1 to 8 do
4272: NOP4
4276: PUSH
4277: DOUBLE
4278: LD_INT 1
4280: DEC
4281: ST_TO_ADDR
4282: LD_INT 8
4284: PUSH
4285: FOR_TO
4286: IFFALSE 4357
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
4288: LD_INT 22
4290: PUSH
4291: NOP4
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: PPUSH
4300: NOP4
4304: PUSH
4305: LD_INT 0
4307: EQUAL
4308: PUSH
4309: NOP4
4313: PUSH
4314: NOP4
4318: ARRAY
4319: NOT
4320: AND
4321: IFFALSE 4355
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
4323: NOP4
4327: PUSH
4328: NOP4
4332: PPUSH
4333: NOP4
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: NOP4
4345: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
4346: NOP4
4350: PPUSH
4351: NOP4
// end ; end ;
4355: GO 4285
4357: POP
4358: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4359: NOP4
4363: PPUSH
4364: NOP4
4368: PUSH
4369: NOP4
4373: PPUSH
4374: NOP4
4378: EQUAL
4379: IFFALSE 4383
// break ;
4381: GO 4418
// end ; until ( FilterAllUnits ( [ f_side , side_bot ] ) = 0 and game ) or not multi_commanders ;
4383: LD_INT 22
4385: PUSH
4386: NOP4
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PPUSH
4395: NOP4
4399: PUSH
4400: LD_INT 0
4402: EQUAL
4403: PUSH
4404: NOP4
4408: AND
4409: PUSH
4410: NOP4
4414: NOT
4415: OR
4416: IFFALSE 3819
// game := false ;
4418: NOP4
4422: PUSH
4423: LD_INT 0
4425: ST_TO_ADDR
// for i = 1 to 8 do
4426: NOP4
4430: PUSH
4431: DOUBLE
4432: LD_INT 1
4434: DEC
4435: ST_TO_ADDR
4436: LD_INT 8
4438: PUSH
4439: FOR_TO
4440: IFFALSE 4476
// begin if multi_sides [ i ] then
4442: NOP4
4446: PUSH
4447: NOP4
4451: ARRAY
4452: IFFALSE 4474
// SetMultiScore ( i , multi_points [ i ] ) ;
4454: NOP4
4458: PPUSH
4459: NOP4
4463: PUSH
4464: NOP4
4468: ARRAY
4469: PPUSH
4470: NOP4
// end ;
4474: GO 4439
4476: POP
4477: POP
// if multi_loosers [ your_side ] then
4478: NOP4
4482: PUSH
4483: NOP4
4487: ARRAY
4488: IFFALSE 4496
// YouLostInMultiplayer else
4490: NOP4
4494: GO 4500
// YouWinInMultiplayer ;
4496: NOP4
// end ;
4500: LD_VAR 0 1
4504: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4505: LD_INT 0
4507: PPUSH
4508: PPUSH
// result := [ #tick , tick ] ;
4509: NOP4
4513: PUSH
4514: LD_STRING #tick
4516: PUSH
4517: NOP4
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: ST_TO_ADDR
// for i = 1 to 8 do
4526: NOP4
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 8
4538: PUSH
4539: FOR_TO
4540: IFFALSE 4597
// begin if multi_sides [ i ] then
4542: NOP4
4546: PUSH
4547: NOP4
4551: ARRAY
4552: IFFALSE 4595
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4554: NOP4
4558: PUSH
4559: NOP4
4563: PUSH
4564: LD_STRING #coop-points
4566: PUSH
4567: NOP4
4571: PUSH
4572: NOP4
4576: PUSH
4577: NOP4
4581: PUSH
4582: NOP4
4586: ARRAY
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: ADD
4594: ST_TO_ADDR
// end ; end ;
4595: GO 4539
4597: POP
4598: POP
// end ;
4599: LD_VAR 0 1
4603: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4604: LD_INT 0
4606: PPUSH
4607: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4608: NOP4
4612: PUSH
4613: LD_INT 0
4615: PUSH
4616: LD_INT 0
4618: PUSH
4619: LD_INT 0
4621: PUSH
4622: LD_INT 0
4624: PUSH
4625: LD_INT 0
4627: PUSH
4628: LD_INT 0
4630: PUSH
4631: LD_INT 0
4633: PUSH
4634: LD_INT 0
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4647: NOP4
4651: PUSH
4652: EMPTY
4653: ST_TO_ADDR
// end ;
4654: LD_VAR 0 1
4658: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4659: LD_INT 0
4661: PPUSH
// if not multi_points or not side or side > 8 then
4662: NOP4
4666: NOT
4667: PUSH
4668: NOP4
4672: NOT
4673: OR
4674: PUSH
4675: NOP4
4679: PUSH
4680: LD_INT 8
4682: GREATER
4683: OR
4684: IFFALSE 4688
// exit ;
4686: GO 4725
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4688: NOP4
4692: PUSH
4693: NOP4
4697: PPUSH
4698: NOP4
4702: PPUSH
4703: NOP4
4707: PUSH
4708: NOP4
4712: ARRAY
4713: PUSH
4714: NOP4
4718: PLUS
4719: PPUSH
4720: NOP4
4724: ST_TO_ADDR
// end ;
4725: LD_VAR 0 3
4729: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4730: LD_INT 0
4732: PPUSH
// if not multi_points or not side or side > 8 then
4733: NOP4
4737: NOT
4738: PUSH
4739: NOP4
4743: NOT
4744: OR
4745: PUSH
4746: NOP4
4750: PUSH
4751: LD_INT 8
4753: GREATER
4754: OR
4755: IFFALSE 4759
// exit ;
4757: GO 4775
// result := multi_points [ side ] ;
4759: NOP4
4763: PUSH
4764: NOP4
4768: PUSH
4769: NOP4
4773: ARRAY
4774: ST_TO_ADDR
// end ;
4775: LD_VAR 0 2
4779: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4780: LD_INT 0
4782: PPUSH
// multi_points_conditions := Insert ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4783: NOP4
4787: PUSH
4788: NOP4
4792: PPUSH
4793: NOP4
4797: PUSH
4798: LD_INT 1
4800: PLUS
4801: PPUSH
4802: NOP4
4806: PPUSH
4807: NOP4
4811: ST_TO_ADDR
// end ;
4812: LD_VAR 0 2
4816: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4817: LD_INT 0
4819: PPUSH
// if not id then
4820: NOP4
4824: NOT
4825: IFFALSE 4829
// exit ;
4827: GO 4845
// result := multi_points_conditions [ id ] ;
4829: NOP4
4833: PUSH
4834: NOP4
4838: PUSH
4839: NOP4
4843: ARRAY
4844: ST_TO_ADDR
// end ;
4845: LD_VAR 0 2
4849: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4850: LD_INT 0
4852: PPUSH
4853: PPUSH
4854: PPUSH
4855: PPUSH
4856: PPUSH
// players := [ ] ;
4857: NOP4
4861: PUSH
4862: EMPTY
4863: ST_TO_ADDR
// for i = 1 to 8 do
4864: NOP4
4868: PUSH
4869: DOUBLE
4870: LD_INT 1
4872: DEC
4873: ST_TO_ADDR
4874: LD_INT 8
4876: PUSH
4877: FOR_TO
4878: IFFALSE 4937
// begin if i = side then
4880: NOP4
4884: PUSH
4885: NOP4
4889: EQUAL
4890: IFFALSE 4894
// continue ;
4892: GO 4877
// if multi_sides [ i ] and not multi_loosers [ i ] then
4894: NOP4
4898: PUSH
4899: NOP4
4903: ARRAY
4904: PUSH
4905: NOP4
4909: PUSH
4910: NOP4
4914: ARRAY
4915: NOT
4916: AND
4917: IFFALSE 4935
// players := players ^ i ;
4919: NOP4
4923: PUSH
4924: NOP4
4928: PUSH
4929: NOP4
4933: ADD
4934: ST_TO_ADDR
// end ;
4935: GO 4877
4937: POP
4938: POP
// if not players then
4939: NOP4
4943: NOT
4944: IFFALSE 4948
// exit ;
4946: GO 5215
// if players = 1 then
4948: NOP4
4952: PUSH
4953: LD_INT 1
4955: EQUAL
4956: IFFALSE 5017
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4958: NOP4
4962: PUSH
4963: LD_INT 22
4965: PUSH
4966: NOP4
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PUSH
4975: LD_INT 51
4977: PUSH
4978: EMPTY
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PPUSH
4985: NOP4
4989: PUSH
4990: FOR_IN
4991: IFFALSE 5013
// SetSide ( i , players [ 1 ] ) ;
4993: NOP4
4997: PPUSH
4998: NOP4
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PPUSH
5007: NOP4
5011: GO 4990
5013: POP
5014: POP
// end else
5015: GO 5215
// begin j := 1 ;
5017: NOP4
5021: PUSH
5022: LD_INT 1
5024: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
5025: NOP4
5029: PUSH
5030: LD_INT 22
5032: PUSH
5033: NOP4
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: LD_INT 2
5044: PUSH
5045: LD_INT 21
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: LD_INT 51
5057: PUSH
5058: EMPTY
5059: LIST
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PUSH
5065: LD_INT 21
5067: PUSH
5068: LD_INT 2
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PPUSH
5084: NOP4
5088: PUSH
5089: FOR_IN
5090: IFFALSE 5213
// begin SetSide ( i , players [ j ] ) ;
5092: NOP4
5096: PPUSH
5097: NOP4
5101: PUSH
5102: NOP4
5106: ARRAY
5107: PPUSH
5108: NOP4
// if IsDrivenBy ( i ) then
5112: NOP4
5116: PPUSH
5117: NOP4
5121: IFFALSE 5148
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
5123: NOP4
5127: PPUSH
5128: NOP4
5132: PPUSH
5133: NOP4
5137: PUSH
5138: NOP4
5142: ARRAY
5143: PPUSH
5144: NOP4
// if GetType ( IsInUnit ( i ) ) = unit_building then
5148: NOP4
5152: PPUSH
5153: NOP4
5157: PPUSH
5158: NOP4
5162: PUSH
5163: LD_INT 3
5165: EQUAL
5166: IFFALSE 5177
// ComExitBuilding ( i ) ;
5168: NOP4
5172: PPUSH
5173: NOP4
// j := j + 1 ;
5177: NOP4
5181: PUSH
5182: NOP4
5186: PUSH
5187: LD_INT 1
5189: PLUS
5190: ST_TO_ADDR
// if j > players then
5191: NOP4
5195: PUSH
5196: NOP4
5200: GREATER
5201: IFFALSE 5211
// j := 1 ;
5203: NOP4
5207: PUSH
5208: LD_INT 1
5210: ST_TO_ADDR
// end ;
5211: GO 5089
5213: POP
5214: POP
// end ; end ;
5215: LD_VAR 0 2
5219: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
5220: LD_INT 0
5222: PPUSH
5223: PPUSH
5224: PPUSH
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
5225: NOP4
5229: PUSH
5230: LD_INT 5
5232: PUSH
5233: LD_INT 10
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 120
5242: PUSH
5243: LD_INT 2
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: LD_INT 101
5252: PUSH
5253: LD_INT 8
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: PUSH
5260: LD_INT 27
5262: PUSH
5263: LD_INT 4
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: ST_TO_ADDR
// i := rand ( 1 , pos ) ;
5276: NOP4
5280: PUSH
5281: LD_INT 1
5283: PPUSH
5284: NOP4
5288: PPUSH
5289: NOP4
5293: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
5294: LD_INT 4
5296: PPUSH
5297: LD_INT 5
5299: PPUSH
5300: NOP4
5304: PUSH
5305: NOP4
5309: ARRAY
5310: PUSH
5311: LD_INT 1
5313: ARRAY
5314: PPUSH
5315: NOP4
5319: PUSH
5320: NOP4
5324: ARRAY
5325: PUSH
5326: LD_INT 2
5328: ARRAY
5329: PPUSH
5330: LD_INT 0
5332: PPUSH
5333: NOP4
// end ;
5337: LD_VAR 0 1
5341: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5342: LD_INT 0
5344: PPUSH
// if not side or side > 8 then
5345: NOP4
5349: NOT
5350: PUSH
5351: NOP4
5355: PUSH
5356: LD_INT 8
5358: GREATER
5359: OR
5360: IFFALSE 5364
// exit ;
5362: GO 5381
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5364: NOP4
5368: PPUSH
5369: LD_INT 6
5371: PPUSH
5372: NOP4
5376: PPUSH
5377: NOP4
// end ;
5381: LD_VAR 0 2
5385: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5386: LD_INT 0
5388: PPUSH
// if not side or side > 8 then
5389: NOP4
5393: NOT
5394: PUSH
5395: NOP4
5399: PUSH
5400: LD_INT 8
5402: GREATER
5403: OR
5404: IFFALSE 5408
// exit ;
5406: GO 5425
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5408: NOP4
5412: PPUSH
5413: LD_INT 4
5415: PPUSH
5416: NOP4
5420: PPUSH
5421: NOP4
// end ;
5425: LD_VAR 0 2
5429: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5430: LD_INT 0
5432: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5433: NOP4
5437: NOT
5438: PUSH
5439: NOP4
5443: PUSH
5444: LD_INT 8
5446: GREATER
5447: OR
5448: PUSH
5449: NOP4
5453: PUSH
5454: LD_INT 2
5456: PUSH
5457: LD_INT 6
5459: PUSH
5460: LD_INT 36
5462: PUSH
5463: LD_INT 0
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: IN
5472: NOT
5473: OR
5474: IFFALSE 5478
// exit ;
5476: GO 5495
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5478: NOP4
5482: PPUSH
5483: LD_INT 3
5485: PPUSH
5486: NOP4
5490: PPUSH
5491: NOP4
// end ;
5495: LD_VAR 0 3
5499: RET
// export function MultiplayerEvent_UnitKilled ( un , points ) ; var side , side2 , last_shoot , nearest_unit , gained_points ; begin
5500: LD_INT 0
5502: PPUSH
5503: PPUSH
5504: PPUSH
5505: PPUSH
5506: PPUSH
5507: PPUSH
// if not un then
5508: NOP4
5512: NOT
5513: IFFALSE 5517
// exit ;
5515: GO 5741
// if not points then
5517: NOP4
5521: NOT
5522: IFFALSE 5539
// gained_points := Multiplayer_GetCondition ( 1 ) else
5524: NOP4
5528: PUSH
5529: LD_INT 1
5531: PPUSH
5532: NOP4
5536: ST_TO_ADDR
5537: GO 5549
// gained_points := points ;
5539: NOP4
5543: PUSH
5544: NOP4
5548: ST_TO_ADDR
// last_shoot := SideShoot ( un ) ;
5549: NOP4
5553: PUSH
5554: NOP4
5558: PPUSH
5559: NOP4
5563: ST_TO_ADDR
// if last_shoot > - 1 then
5564: NOP4
5568: PUSH
5569: LD_INT 1
5571: NEG
5572: GREATER
5573: IFFALSE 5585
// begin side := last_shoot ;
5575: NOP4
5579: PUSH
5580: NOP4
5584: ST_TO_ADDR
// end ; nearest_unit := NearestUnitToUnit ( all_units diff FilterAllUnits ( [ f_side , GetSide ( un ) ] ) , un ) ;
5585: NOP4
5589: PUSH
5590: NOP4
5594: PUSH
5595: LD_INT 22
5597: PUSH
5598: NOP4
5602: PPUSH
5603: NOP4
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: PPUSH
5612: NOP4
5616: DIFF
5617: PPUSH
5618: NOP4
5622: PPUSH
5623: NOP4
5627: ST_TO_ADDR
// if nearest_unit then
5628: NOP4
5632: IFFALSE 5649
// side2 := GetSide ( nearest_unit ) ;
5634: NOP4
5638: PUSH
5639: NOP4
5643: PPUSH
5644: NOP4
5648: ST_TO_ADDR
// if not side and not side2 then
5649: NOP4
5653: NOT
5654: PUSH
5655: NOP4
5659: NOT
5660: AND
5661: IFFALSE 5665
// exit ;
5663: GO 5741
// if side = side2 then
5665: NOP4
5669: PUSH
5670: NOP4
5674: EQUAL
5675: IFFALSE 5693
// Multiplayer_AddPoints ( side , gained_points ) else
5677: NOP4
5681: PPUSH
5682: NOP4
5686: PPUSH
5687: NOP4
5691: GO 5741
// begin if side then
5693: NOP4
5697: IFFALSE 5717
// Multiplayer_AddPoints ( side , gained_points div 2 ) ;
5699: NOP4
5703: PPUSH
5704: NOP4
5708: PUSH
5709: LD_INT 2
5711: DIV
5712: PPUSH
5713: NOP4
// if side2 then
5717: NOP4
5721: IFFALSE 5741
// Multiplayer_AddPoints ( side2 , gained_points div 2 ) ;
5723: NOP4
5727: PPUSH
5728: NOP4
5732: PUSH
5733: LD_INT 2
5735: DIV
5736: PPUSH
5737: NOP4
// end ; end ;
5741: LD_VAR 0 3
5745: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5746: LD_INT 0
5748: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5749: NOP4
5753: PPUSH
5754: LD_INT 2
5756: PPUSH
5757: NOP4
5761: PPUSH
5762: NOP4
// end ; end_of_file
5766: LD_VAR 0 2
5770: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , techs ; begin
5771: LD_INT 0
5773: PPUSH
5774: PPUSH
5775: PPUSH
5776: PPUSH
5777: PPUSH
5778: PPUSH
5779: PPUSH
5780: PPUSH
5781: PPUSH
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
5782: NOP4
5786: PUSH
5787: LD_INT 22
5789: PUSH
5790: LD_INT 2
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: PPUSH
5797: NOP4
5801: ST_TO_ADDR
// side_bot := side ;
5802: NOP4
5806: PUSH
5807: NOP4
5811: ST_TO_ADDR
// if tmp and side <> 2 then
5812: NOP4
5816: PUSH
5817: NOP4
5821: PUSH
5822: LD_INT 2
5824: NONEQUAL
5825: AND
5826: IFFALSE 5859
// for i in tmp do
5828: NOP4
5832: PUSH
5833: NOP4
5837: PUSH
5838: FOR_IN
5839: IFFALSE 5857
// SetSide ( i , side ) ;
5841: NOP4
5845: PPUSH
5846: NOP4
5850: PPUSH
5851: NOP4
5855: GO 5838
5857: POP
5858: POP
// techs := [ tech_ApeAgres , tech_ApeBrain , tech_ApeNeural , tech_StimDrugs , tech_Bio1 , tech_Bio2 , tech_Weap3 , tech_RemCharge , tech_rocket , tech_SibEng , 72 , tech_Sib2 ] ;
5859: NOP4
5863: PUSH
5864: LD_INT 11
5866: PUSH
5867: LD_INT 4
5869: PUSH
5870: LD_INT 3
5872: PUSH
5873: LD_INT 5
5875: PUSH
5876: LD_INT 66
5878: PUSH
5879: LD_INT 67
5881: PUSH
5882: LD_INT 53
5884: PUSH
5885: LD_INT 18
5887: PUSH
5888: LD_INT 40
5890: PUSH
5891: LD_INT 22
5893: PUSH
5894: LD_INT 72
5896: PUSH
5897: LD_INT 55
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: ST_TO_ADDR
// for i in techs do
5914: NOP4
5918: PUSH
5919: NOP4
5923: PUSH
5924: FOR_IN
5925: IFFALSE 5946
// SetTech ( i , side , state_researched ) ;
5927: NOP4
5931: PPUSH
5932: NOP4
5936: PPUSH
5937: LD_INT 2
5939: PPUSH
5940: NOP4
5944: GO 5924
5946: POP
5947: POP
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
5948: NOP4
5952: PUSH
5953: LD_INT 6
5955: PUSH
5956: LD_INT 7
5958: PUSH
5959: LD_INT 8
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: PUSH
5967: NOP4
5971: ARRAY
5972: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
5973: LD_INT 69
5975: PUSH
5976: EMPTY
5977: LIST
5978: PPUSH
5979: LD_INT 141
5981: PPUSH
5982: NOP4
// Wait ( 1 ) ;
5986: LD_INT 1
5988: PPUSH
5989: NOP4
// uc_side := side ;
5993: LD_ADDR_OWVAR 20
5997: PUSH
5998: NOP4
6002: ST_TO_ADDR
// uc_nation := 2 ;
6003: LD_ADDR_OWVAR 21
6007: PUSH
6008: LD_INT 2
6010: ST_TO_ADDR
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 5000 , 1000 , 300 ] , [ - 1 , 6 , - 1 , 4 ] ) ;
6011: NOP4
6015: PUSH
6016: LD_INT 94
6018: PPUSH
6019: LD_STRING dammam
6021: PPUSH
6022: NOP4
6026: PPUSH
6027: LD_INT 5000
6029: PUSH
6030: LD_INT 1000
6032: PUSH
6033: LD_INT 300
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: LIST
6040: PPUSH
6041: LD_INT 1
6043: NEG
6044: PUSH
6045: LD_INT 6
6047: PUSH
6048: LD_INT 1
6050: NEG
6051: PUSH
6052: LD_INT 4
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: PPUSH
6061: NOP4
6065: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
6066: NOP4
6070: PUSH
6071: NOP4
6075: PUSH
6076: LD_INT 122
6078: PPUSH
6079: LD_STRING 
6081: PPUSH
6082: NOP4
6086: PPUSH
6087: LD_INT 100
6089: PUSH
6090: LD_INT 60
6092: PUSH
6093: LD_INT 0
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: LIST
6100: PPUSH
6101: LD_INT 1
6103: NEG
6104: PUSH
6105: LD_INT 4
6107: PUSH
6108: LD_INT 0
6110: PUSH
6111: LD_INT 0
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: PPUSH
6120: NOP4
6124: ADD
6125: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 3000 , 1000 , 10 ] , [ - 1 , 5 , 5 , 2 ] ) ;
6126: NOP4
6130: PUSH
6131: LD_INT 45
6133: PPUSH
6134: LD_STRING jeddah
6136: PPUSH
6137: NOP4
6141: PPUSH
6142: LD_INT 3000
6144: PUSH
6145: LD_INT 1000
6147: PUSH
6148: LD_INT 10
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: LIST
6155: PPUSH
6156: LD_INT 1
6158: NEG
6159: PUSH
6160: LD_INT 5
6162: PUSH
6163: LD_INT 5
6165: PUSH
6166: LD_INT 2
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: PPUSH
6175: NOP4
6179: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 600 , 250 , 0 ] , [ - 1 , 3 , 5 , 1 ] ) ;
6180: NOP4
6184: PUSH
6185: LD_INT 7
6187: PPUSH
6188: LD_STRING riyadh
6190: PPUSH
6191: NOP4
6195: PPUSH
6196: LD_INT 600
6198: PUSH
6199: LD_INT 250
6201: PUSH
6202: LD_INT 0
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: LIST
6209: PPUSH
6210: LD_INT 1
6212: NEG
6213: PUSH
6214: LD_INT 3
6216: PUSH
6217: LD_INT 5
6219: PUSH
6220: LD_INT 1
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: PPUSH
6229: NOP4
6233: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 150 , 0 ] , [ - 1 , 3 , 5 , 2 ] ) ;
6234: NOP4
6238: PUSH
6239: LD_INT 69
6241: PPUSH
6242: LD_STRING 
6244: PPUSH
6245: NOP4
6249: PPUSH
6250: LD_INT 500
6252: PUSH
6253: LD_INT 150
6255: PUSH
6256: LD_INT 0
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: PPUSH
6264: LD_INT 1
6266: NEG
6267: PUSH
6268: LD_INT 3
6270: PUSH
6271: LD_INT 5
6273: PUSH
6274: LD_INT 2
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: PPUSH
6283: NOP4
6287: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east , ar_force_south ] ;
6288: NOP4
6292: PUSH
6293: NOP4
6297: PUSH
6298: NOP4
6302: PUSH
6303: NOP4
6307: PUSH
6308: NOP4
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6319: LD_ADDR_OWVAR 37
6323: PUSH
6324: LD_INT 14
6326: ST_TO_ADDR
// vc_engine := engine_siberite ;
6327: LD_ADDR_OWVAR 39
6331: PUSH
6332: LD_INT 3
6334: ST_TO_ADDR
// vc_control := control_manual ;
6335: LD_ADDR_OWVAR 38
6339: PUSH
6340: LD_INT 1
6342: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
6343: LD_ADDR_OWVAR 40
6347: PUSH
6348: LD_INT 31
6350: ST_TO_ADDR
// for i = 1 to 5 do
6351: NOP4
6355: PUSH
6356: DOUBLE
6357: LD_INT 1
6359: DEC
6360: ST_TO_ADDR
6361: LD_INT 5
6363: PUSH
6364: FOR_TO
6365: IFFALSE 6634
// begin xy := [ [ 156 , 15 ] , [ 12 , 7 ] ] [ i mod 2 + 1 ] ;
6367: NOP4
6371: PUSH
6372: LD_INT 156
6374: PUSH
6375: LD_INT 15
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 12
6384: PUSH
6385: LD_INT 7
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: NOP4
6400: PUSH
6401: LD_INT 2
6403: MOD
6404: PUSH
6405: LD_INT 1
6407: PLUS
6408: ARRAY
6409: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
6410: LD_INT 0
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: NOP4
6420: PPUSH
6421: NOP4
// un := CreateVehicle ;
6425: NOP4
6429: PUSH
6430: NOP4
6434: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6435: NOP4
6439: PPUSH
6440: LD_INT 0
6442: PPUSH
6443: LD_INT 5
6445: PPUSH
6446: NOP4
6450: PPUSH
6451: NOP4
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
6455: NOP4
6459: PPUSH
6460: NOP4
6464: PUSH
6465: LD_INT 1
6467: ARRAY
6468: PPUSH
6469: NOP4
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: PPUSH
6478: LD_INT 6
6480: PPUSH
6481: LD_INT 0
6483: PPUSH
6484: NOP4
// un2 := CreateHuman ;
6488: NOP4
6492: PUSH
6493: NOP4
6497: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
6498: NOP4
6502: PPUSH
6503: NOP4
6507: PPUSH
6508: NOP4
// mc_bases := ReplaceIn ( mc_bases , [ i mod 2 + 1 , mc_bases [ i mod 2 + 1 ] + 1 ] , un ) ;
6512: NOP4
6516: PUSH
6517: NOP4
6521: PPUSH
6522: NOP4
6526: PUSH
6527: LD_INT 2
6529: MOD
6530: PUSH
6531: LD_INT 1
6533: PLUS
6534: PUSH
6535: NOP4
6539: PUSH
6540: NOP4
6544: PUSH
6545: LD_INT 2
6547: MOD
6548: PUSH
6549: LD_INT 1
6551: PLUS
6552: ARRAY
6553: PUSH
6554: LD_INT 1
6556: PLUS
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PPUSH
6562: NOP4
6566: PPUSH
6567: NOP4
6571: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i mod 2 + 1 , mc_bases [ i mod 2 + 1 ] + 1 ] , un2 ) ;
6572: NOP4
6576: PUSH
6577: NOP4
6581: PPUSH
6582: NOP4
6586: PUSH
6587: LD_INT 2
6589: MOD
6590: PUSH
6591: LD_INT 1
6593: PLUS
6594: PUSH
6595: NOP4
6599: PUSH
6600: NOP4
6604: PUSH
6605: LD_INT 2
6607: MOD
6608: PUSH
6609: LD_INT 1
6611: PLUS
6612: ARRAY
6613: PUSH
6614: LD_INT 1
6616: PLUS
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PPUSH
6622: NOP4
6626: PPUSH
6627: NOP4
6631: ST_TO_ADDR
// end ;
6632: GO 6364
6634: POP
6635: POP
// for i in FilterAllUnits ( [ [ f_side , side_bot ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
6636: NOP4
6640: PUSH
6641: LD_INT 22
6643: PUSH
6644: NOP4
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: LD_INT 30
6655: PUSH
6656: LD_INT 31
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 58
6665: PUSH
6666: EMPTY
6667: LIST
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: LIST
6673: PPUSH
6674: NOP4
6678: PUSH
6679: FOR_IN
6680: IFFALSE 6805
// begin if GetBase ( i ) then
6682: NOP4
6686: PPUSH
6687: NOP4
6691: IFFALSE 6695
// continue ;
6693: GO 6679
// d := GetDir ( i ) ;
6695: NOP4
6699: PUSH
6700: NOP4
6704: PPUSH
6705: NOP4
6709: ST_TO_ADDR
// if d < 3 then
6710: NOP4
6714: PUSH
6715: LD_INT 3
6717: LESS
6718: IFFALSE 6736
// d := d + 3 else
6720: NOP4
6724: PUSH
6725: NOP4
6729: PUSH
6730: LD_INT 3
6732: PLUS
6733: ST_TO_ADDR
6734: GO 6750
// d := d - 3 ;
6736: NOP4
6740: PUSH
6741: NOP4
6745: PUSH
6746: LD_INT 3
6748: MINUS
6749: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
6750: LD_INT 0
6752: PPUSH
6753: LD_INT 8
6755: PPUSH
6756: NOP4
6760: PPUSH
6761: NOP4
// un := CreateHuman ;
6765: NOP4
6769: PUSH
6770: NOP4
6774: ST_TO_ADDR
// SetDir ( un , d ) ;
6775: NOP4
6779: PPUSH
6780: NOP4
6784: PPUSH
6785: NOP4
// PlaceHumanInUnit ( un , i ) ;
6789: NOP4
6793: PPUSH
6794: NOP4
6798: PPUSH
6799: NOP4
// end ;
6803: GO 6679
6805: POP
6806: POP
// ar_force_tmp := [ ] ;
6807: NOP4
6811: PUSH
6812: EMPTY
6813: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
6814: LD_INT 1
6816: PPUSH
6817: LD_INT 1
6819: PPUSH
6820: NOP4
6824: PPUSH
6825: NOP4
// hc_gallery := SecondCharsGal ;
6829: LD_ADDR_OWVAR 33
6833: PUSH
6834: LD_STRING SecondCharsGal
6836: ST_TO_ADDR
// hc_face_number := 4 ;
6837: LD_ADDR_OWVAR 34
6841: PUSH
6842: LD_INT 4
6844: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
6845: NOP4
6849: PUSH
6850: NOP4
6854: PPUSH
6855: LD_INT 1
6857: PPUSH
6858: NOP4
6862: PPUSH
6863: NOP4
6867: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6868: LD_INT 2
6870: PPUSH
6871: LD_INT 4
6873: PPUSH
6874: NOP4
6878: PPUSH
6879: NOP4
// hc_gallery := SecondCharsGal ;
6883: LD_ADDR_OWVAR 33
6887: PUSH
6888: LD_STRING SecondCharsGal
6890: ST_TO_ADDR
// hc_face_number := 15 ;
6891: LD_ADDR_OWVAR 34
6895: PUSH
6896: LD_INT 15
6898: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
6899: NOP4
6903: PUSH
6904: NOP4
6908: PPUSH
6909: LD_INT 2
6911: PPUSH
6912: NOP4
6916: PPUSH
6917: NOP4
6921: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6922: LD_INT 2
6924: PPUSH
6925: LD_INT 4
6927: PPUSH
6928: NOP4
6932: PPUSH
6933: NOP4
// hc_gallery :=  ;
6937: LD_ADDR_OWVAR 33
6941: PUSH
6942: LD_STRING 
6944: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
6945: NOP4
6949: PUSH
6950: NOP4
6954: PPUSH
6955: LD_INT 3
6957: PPUSH
6958: NOP4
6962: PPUSH
6963: NOP4
6967: ST_TO_ADDR
// hc_sex := sex_male ;
6968: LD_ADDR_OWVAR 27
6972: PUSH
6973: LD_INT 1
6975: ST_TO_ADDR
// hc_class = 11 ;
6976: LD_ADDR_OWVAR 28
6980: PUSH
6981: LD_INT 11
6983: ST_TO_ADDR
// hc_gallery = sandar ;
6984: LD_ADDR_OWVAR 33
6988: PUSH
6989: LD_STRING sandar
6991: ST_TO_ADDR
// hc_face_number = 33 ;
6992: LD_ADDR_OWVAR 34
6996: PUSH
6997: LD_INT 33
6999: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
7000: LD_ADDR_OWVAR 26
7004: PUSH
7005: LD_STRING Thabit Muhair Saliba
7007: ST_TO_ADDR
// hc_skills = [ 5 , 5 , 3 , 3 ] ;
7008: LD_ADDR_OWVAR 31
7012: PUSH
7013: LD_INT 5
7015: PUSH
7016: LD_INT 5
7018: PUSH
7019: LD_INT 3
7021: PUSH
7022: LD_INT 3
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: ST_TO_ADDR
// Saliba = CreateHuman ;
7031: NOP4
7035: PUSH
7036: NOP4
7040: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
7041: NOP4
7045: PPUSH
7046: LD_INT 7
7048: PPUSH
7049: NOP4
// hc_name := Dietrich Gensher ;
7053: LD_ADDR_OWVAR 26
7057: PUSH
7058: LD_STRING Dietrich Gensher
7060: ST_TO_ADDR
// hc_class := 1 ;
7061: LD_ADDR_OWVAR 28
7065: PUSH
7066: LD_INT 1
7068: ST_TO_ADDR
// hc_gallery := sandar ;
7069: LD_ADDR_OWVAR 33
7073: PUSH
7074: LD_STRING sandar
7076: ST_TO_ADDR
// hc_face_number := 2 ;
7077: LD_ADDR_OWVAR 34
7081: PUSH
7082: LD_INT 2
7084: ST_TO_ADDR
// hc_skills := [ 10 , 6 , 5 , 4 ] ;
7085: LD_ADDR_OWVAR 31
7089: PUSH
7090: LD_INT 10
7092: PUSH
7093: LD_INT 6
7095: PUSH
7096: LD_INT 5
7098: PUSH
7099: LD_INT 4
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: ST_TO_ADDR
// Gensher := CreateHuman ;
7108: NOP4
7112: PUSH
7113: NOP4
7117: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
7118: NOP4
7122: PPUSH
7123: LD_INT 94
7125: PPUSH
7126: NOP4
// InitHc ;
7130: NOP4
// ar_defenders_tmp := [ [ ] , [ ] , [ ] , [ ] ] ;
7134: NOP4
7138: PUSH
7139: EMPTY
7140: PUSH
7141: EMPTY
7142: PUSH
7143: EMPTY
7144: PUSH
7145: EMPTY
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
7153: NOP4
7157: PUSH
7158: DOUBLE
7159: LD_INT 1
7161: DEC
7162: ST_TO_ADDR
7163: LD_INT 3
7165: PUSH
7166: LD_INT 3
7168: PUSH
7169: LD_INT 4
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: LIST
7176: PUSH
7177: NOP4
7181: ARRAY
7182: PUSH
7183: FOR_TO
7184: IFFALSE 7402
// for i = 1 to 4 do
7186: NOP4
7190: PUSH
7191: DOUBLE
7192: LD_INT 1
7194: DEC
7195: ST_TO_ADDR
7196: LD_INT 4
7198: PUSH
7199: FOR_TO
7200: IFFALSE 7398
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
7202: LD_INT 14
7204: PPUSH
7205: LD_INT 3
7207: PUSH
7208: LD_INT 2
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 1
7217: PPUSH
7218: LD_INT 2
7220: PPUSH
7221: NOP4
7225: ARRAY
7226: PPUSH
7227: LD_INT 1
7229: PUSH
7230: LD_INT 5
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 1
7239: PPUSH
7240: LD_INT 2
7242: PPUSH
7243: NOP4
7247: ARRAY
7248: PPUSH
7249: LD_INT 25
7251: PUSH
7252: LD_INT 27
7254: PUSH
7255: LD_INT 26
7257: PUSH
7258: LD_INT 28
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 1
7269: PPUSH
7270: LD_INT 4
7272: PPUSH
7273: NOP4
7277: ARRAY
7278: PPUSH
7279: LD_INT 100
7281: PPUSH
7282: NOP4
// un := CreateVehicle ;
7286: NOP4
7290: PUSH
7291: NOP4
7295: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
7296: NOP4
7300: PUSH
7301: NOP4
7305: PPUSH
7306: NOP4
7310: PUSH
7311: NOP4
7315: PUSH
7316: NOP4
7320: ARRAY
7321: PUSH
7322: LD_INT 1
7324: PLUS
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PPUSH
7330: NOP4
7334: PPUSH
7335: NOP4
7339: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
7340: NOP4
7344: PPUSH
7345: LD_INT 0
7347: PPUSH
7348: LD_INT 5
7350: PPUSH
7351: NOP4
7355: PPUSH
7356: NOP4
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east , parking_south ] [ i ] , false ) ;
7360: NOP4
7364: PPUSH
7365: LD_INT 20
7367: PUSH
7368: LD_INT 21
7370: PUSH
7371: LD_INT 22
7373: PUSH
7374: LD_INT 24
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PUSH
7383: NOP4
7387: ARRAY
7388: PPUSH
7389: LD_INT 0
7391: PPUSH
7392: NOP4
// end ;
7396: GO 7199
7398: POP
7399: POP
7400: GO 7183
7402: POP
7403: POP
// InitHc ;
7404: NOP4
// end ;
7408: LD_VAR 0 2
7412: RET
// every 13 13$00 + 10 10$00 trigger IsOk ( ar_dep_n ) and GetSide ( ar_dep_n ) = side_bot do var i , t , x , base , tmp , coords , flags , danger , target , _target ;
7413: LD_INT 94
7415: PPUSH
7416: NOP4
7420: PUSH
7421: LD_INT 94
7423: PPUSH
7424: NOP4
7428: PUSH
7429: NOP4
7433: EQUAL
7434: AND
7435: IFFALSE 8144
7437: GO 7439
7439: DISABLE
7440: LD_INT 0
7442: PPUSH
7443: PPUSH
7444: PPUSH
7445: PPUSH
7446: PPUSH
7447: PPUSH
7448: PPUSH
7449: PPUSH
7450: PPUSH
7451: PPUSH
// begin enable ;
7452: ENABLE
// base := 1 ;
7453: NOP4
7457: PUSH
7458: LD_INT 1
7460: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
7461: NOP4
7465: PUSH
7466: LD_INT 0
7468: PUSH
7469: LD_INT 0
7471: PUSH
7472: LD_INT 0
7474: PUSH
7475: LD_INT 0
7477: PUSH
7478: LD_INT 1
7480: PUSH
7481: LD_INT 0
7483: PUSH
7484: LD_INT 0
7486: PUSH
7487: LD_INT 0
7489: PUSH
7490: LD_INT 1
7492: PUSH
7493: LD_INT 0
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: ST_TO_ADDR
// coords := [ [ 28 , 14 ] , [ 107 , 119 ] , [ 127 , 97 ] , [ 185 , 127 ] ] ;
7508: NOP4
7512: PUSH
7513: LD_INT 28
7515: PUSH
7516: LD_INT 14
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 107
7525: PUSH
7526: LD_INT 119
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 127
7535: PUSH
7536: LD_INT 97
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: LD_INT 185
7545: PUSH
7546: LD_INT 127
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: ST_TO_ADDR
// target := 0 ;
7559: NOP4
7563: PUSH
7564: LD_INT 0
7566: ST_TO_ADDR
// x := 0 ;
7567: NOP4
7571: PUSH
7572: LD_INT 0
7574: ST_TO_ADDR
// tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
7575: NOP4
7579: PUSH
7580: LD_INT 14
7582: PUSH
7583: LD_INT 1
7585: PUSH
7586: LD_INT 2
7588: PUSH
7589: LD_INT 28
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 14
7600: PUSH
7601: LD_INT 1
7603: PUSH
7604: LD_INT 2
7606: PUSH
7607: LD_INT 25
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 14
7618: PUSH
7619: LD_INT 1
7621: PUSH
7622: LD_INT 2
7624: PUSH
7625: LD_INT 28
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: PUSH
7634: LD_INT 14
7636: PUSH
7637: LD_INT 1
7639: PUSH
7640: LD_INT 2
7642: PUSH
7643: LD_INT 29
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: ST_TO_ADDR
// if Difficulty > 1 then
7658: NOP4
7662: PUSH
7663: LD_INT 1
7665: GREATER
7666: IFFALSE 7763
// for i = 1 to Difficulty + 2 do
7668: NOP4
7672: PUSH
7673: DOUBLE
7674: LD_INT 1
7676: DEC
7677: ST_TO_ADDR
7678: NOP4
7682: PUSH
7683: LD_INT 2
7685: PLUS
7686: PUSH
7687: FOR_TO
7688: IFFALSE 7761
// tmp := Insert ( tmp , tmp + 1 , [ ar_half_tracked , engine_combustion , control_remote , [ ar_rocket_launcher , ar_gun , ar_gun , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ) ;
7690: NOP4
7694: PUSH
7695: NOP4
7699: PPUSH
7700: NOP4
7704: PUSH
7705: LD_INT 1
7707: PLUS
7708: PPUSH
7709: LD_INT 14
7711: PUSH
7712: LD_INT 1
7714: PUSH
7715: LD_INT 2
7717: PUSH
7718: LD_INT 28
7720: PUSH
7721: LD_INT 27
7723: PUSH
7724: LD_INT 27
7726: PUSH
7727: LD_INT 29
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: PUSH
7736: LD_INT 1
7738: PPUSH
7739: LD_INT 4
7741: PPUSH
7742: NOP4
7746: ARRAY
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: PPUSH
7754: NOP4
7758: ST_TO_ADDR
7759: GO 7687
7761: POP
7762: POP
// MC_SetProduceList ( base , tmp ) ;
7763: NOP4
7767: PPUSH
7768: NOP4
7772: PPUSH
7773: NOP4
// repeat wait ( 0 0$1 ) ;
7777: LD_INT 35
7779: PPUSH
7780: NOP4
// until MC_GetProduceList ( base ) = 0 ;
7784: NOP4
7788: PPUSH
7789: NOP4
7793: PUSH
7794: LD_INT 0
7796: EQUAL
7797: IFFALSE 7777
// wait ( 0 0$10 ) ;
7799: LD_INT 350
7801: PPUSH
7802: NOP4
// for i = 1 to coords do
7806: NOP4
7810: PUSH
7811: DOUBLE
7812: LD_INT 1
7814: DEC
7815: ST_TO_ADDR
7816: NOP4
7820: PUSH
7821: FOR_TO
7822: IFFALSE 7910
// begin t := DangerAtRangeXY ( side_bot , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] , 35 ) [ 4 ] ;
7824: NOP4
7828: PUSH
7829: NOP4
7833: PPUSH
7834: NOP4
7838: PUSH
7839: NOP4
7843: ARRAY
7844: PUSH
7845: LD_INT 1
7847: ARRAY
7848: PPUSH
7849: NOP4
7853: PUSH
7854: NOP4
7858: ARRAY
7859: PUSH
7860: LD_INT 2
7862: ARRAY
7863: PPUSH
7864: LD_INT 35
7866: PPUSH
7867: NOP4
7871: PUSH
7872: LD_INT 4
7874: ARRAY
7875: ST_TO_ADDR
// if t > x then
7876: NOP4
7880: PUSH
7881: NOP4
7885: GREATER
7886: IFFALSE 7908
// begin x := t ;
7888: NOP4
7892: PUSH
7893: NOP4
7897: ST_TO_ADDR
// target := i ;
7898: NOP4
7902: PUSH
7903: NOP4
7907: ST_TO_ADDR
// end ; end ;
7908: GO 7821
7910: POP
7911: POP
// case target of 1 :
7912: NOP4
7916: PUSH
7917: LD_INT 1
7919: DOUBLE
7920: EQUAL
7921: IFTRUE 7925
7923: GO 7957
7925: POP
// _target := [ [ 60 , 8 ] , [ 28 , 15 ] ] ; 2 :
7926: NOP4
7930: PUSH
7931: LD_INT 60
7933: PUSH
7934: LD_INT 8
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: LD_INT 28
7943: PUSH
7944: LD_INT 15
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: ST_TO_ADDR
7955: GO 8078
7957: LD_INT 2
7959: DOUBLE
7960: EQUAL
7961: IFTRUE 7965
7963: GO 7997
7965: POP
// _target := [ [ 52 , 11 ] , [ 76 , 90 ] ] ; 3 :
7966: NOP4
7970: PUSH
7971: LD_INT 52
7973: PUSH
7974: LD_INT 11
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 76
7983: PUSH
7984: LD_INT 90
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: ST_TO_ADDR
7995: GO 8078
7997: LD_INT 3
7999: DOUBLE
8000: EQUAL
8001: IFTRUE 8005
8003: GO 8037
8005: POP
// _target := [ [ 129 , 66 ] , [ 130 , 97 ] ] ; 4 :
8006: NOP4
8010: PUSH
8011: LD_INT 129
8013: PUSH
8014: LD_INT 66
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PUSH
8021: LD_INT 130
8023: PUSH
8024: LD_INT 97
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: ST_TO_ADDR
8035: GO 8078
8037: LD_INT 4
8039: DOUBLE
8040: EQUAL
8041: IFTRUE 8045
8043: GO 8077
8045: POP
// _target := [ [ 156 , 87 ] , [ 183 , 127 ] ] ; end ;
8046: NOP4
8050: PUSH
8051: LD_INT 156
8053: PUSH
8054: LD_INT 87
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: LD_INT 183
8063: PUSH
8064: LD_INT 127
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: ST_TO_ADDR
8075: GO 8078
8077: POP
// if not _target then
8078: NOP4
8082: NOT
8083: IFFALSE 8114
// _target := [ [ 52 , 11 ] , [ 76 , 90 ] ] ;
8085: NOP4
8089: PUSH
8090: LD_INT 52
8092: PUSH
8093: LD_INT 11
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 76
8102: PUSH
8103: LD_INT 90
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: ST_TO_ADDR
// MC_PrepareAttack ( base , mc_vehicles [ base ] , _target , flags ) ;
8114: NOP4
8118: PPUSH
8119: NOP4
8123: PUSH
8124: NOP4
8128: ARRAY
8129: PPUSH
8130: NOP4
8134: PPUSH
8135: NOP4
8139: PPUSH
8140: NOP4
// end ;
8144: PPOPN 10
8146: END
// every 13 13$00 + 10 10$00 trigger ( IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) = side_bot ) and ( multi_players_amount = 3 or IsDead ( ar_dep_n ) or GetSide ( ar_dep_n ) <> side_bot ) do var i , t , x , base , tmp , coords , flags , danger , target , _target ;
8147: LD_INT 45
8149: PPUSH
8150: NOP4
8154: PUSH
8155: LD_INT 45
8157: PPUSH
8158: NOP4
8162: PUSH
8163: NOP4
8167: EQUAL
8168: AND
8169: PUSH
8170: NOP4
8174: PUSH
8175: LD_INT 3
8177: EQUAL
8178: PUSH
8179: LD_INT 94
8181: PPUSH
8182: NOP4
8186: OR
8187: PUSH
8188: LD_INT 94
8190: PPUSH
8191: NOP4
8195: PUSH
8196: NOP4
8200: NONEQUAL
8201: OR
8202: AND
8203: IFFALSE 8789
8205: GO 8207
8207: DISABLE
8208: LD_INT 0
8210: PPUSH
8211: PPUSH
8212: PPUSH
8213: PPUSH
8214: PPUSH
8215: PPUSH
8216: PPUSH
8217: PPUSH
8218: PPUSH
8219: PPUSH
// begin enable ;
8220: ENABLE
// base := 2 ;
8221: NOP4
8225: PUSH
8226: LD_INT 2
8228: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
8229: NOP4
8233: PUSH
8234: LD_INT 0
8236: PUSH
8237: LD_INT 0
8239: PUSH
8240: LD_INT 0
8242: PUSH
8243: LD_INT 0
8245: PUSH
8246: LD_INT 1
8248: PUSH
8249: LD_INT 0
8251: PUSH
8252: LD_INT 0
8254: PUSH
8255: LD_INT 0
8257: PUSH
8258: LD_INT 1
8260: PUSH
8261: LD_INT 0
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: ST_TO_ADDR
// coords := [ [ 101 , 110 ] , [ 100 , 21 ] ] ;
8276: NOP4
8280: PUSH
8281: LD_INT 101
8283: PUSH
8284: LD_INT 110
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PUSH
8291: LD_INT 100
8293: PUSH
8294: LD_INT 21
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: ST_TO_ADDR
// target := 0 ;
8305: NOP4
8309: PUSH
8310: LD_INT 0
8312: ST_TO_ADDR
// x := 0 ;
8313: NOP4
8317: PUSH
8318: LD_INT 0
8320: ST_TO_ADDR
// tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , ] ;
8321: NOP4
8325: PUSH
8326: LD_INT 14
8328: PUSH
8329: LD_INT 1
8331: PUSH
8332: LD_INT 2
8334: PUSH
8335: LD_INT 28
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: PUSH
8344: LD_INT 14
8346: PUSH
8347: LD_INT 1
8349: PUSH
8350: LD_INT 2
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: PUSH
8362: LD_INT 14
8364: PUSH
8365: LD_INT 1
8367: PUSH
8368: LD_INT 2
8370: PUSH
8371: LD_INT 28
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: LIST
8384: ST_TO_ADDR
// if Difficulty > 1 then
8385: NOP4
8389: PUSH
8390: LD_INT 1
8392: GREATER
8393: IFFALSE 8488
// for i = 1 to Difficulty + 1 do
8395: NOP4
8399: PUSH
8400: DOUBLE
8401: LD_INT 1
8403: DEC
8404: ST_TO_ADDR
8405: NOP4
8409: PUSH
8410: LD_INT 1
8412: PLUS
8413: PUSH
8414: FOR_TO
8415: IFFALSE 8486
// tmp := Insert ( tmp , tmp + 1 , [ ar_half_tracked , engine_combustion , control_remote , [ ar_rocket_launcher , ar_gun , ar_gun ] [ i mod 2 + 1 ] ] ) ;
8417: NOP4
8421: PUSH
8422: NOP4
8426: PPUSH
8427: NOP4
8431: PUSH
8432: LD_INT 1
8434: PLUS
8435: PPUSH
8436: LD_INT 14
8438: PUSH
8439: LD_INT 1
8441: PUSH
8442: LD_INT 2
8444: PUSH
8445: LD_INT 28
8447: PUSH
8448: LD_INT 27
8450: PUSH
8451: LD_INT 27
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: LIST
8458: PUSH
8459: NOP4
8463: PUSH
8464: LD_INT 2
8466: MOD
8467: PUSH
8468: LD_INT 1
8470: PLUS
8471: ARRAY
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: PPUSH
8479: NOP4
8483: ST_TO_ADDR
8484: GO 8414
8486: POP
8487: POP
// MC_SetProduceList ( base , tmp ) ;
8488: NOP4
8492: PPUSH
8493: NOP4
8497: PPUSH
8498: NOP4
// repeat wait ( 0 0$1 ) ;
8502: LD_INT 35
8504: PPUSH
8505: NOP4
// until MC_GetProduceList ( base ) = 0 ;
8509: NOP4
8513: PPUSH
8514: NOP4
8518: PUSH
8519: LD_INT 0
8521: EQUAL
8522: IFFALSE 8502
// wait ( 0 0$10 ) ;
8524: LD_INT 350
8526: PPUSH
8527: NOP4
// for i = 1 to coords do
8531: NOP4
8535: PUSH
8536: DOUBLE
8537: LD_INT 1
8539: DEC
8540: ST_TO_ADDR
8541: NOP4
8545: PUSH
8546: FOR_TO
8547: IFFALSE 8635
// begin t := DangerAtRangeXY ( side_bot , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] , 35 ) [ 4 ] ;
8549: NOP4
8553: PUSH
8554: NOP4
8558: PPUSH
8559: NOP4
8563: PUSH
8564: NOP4
8568: ARRAY
8569: PUSH
8570: LD_INT 1
8572: ARRAY
8573: PPUSH
8574: NOP4
8578: PUSH
8579: NOP4
8583: ARRAY
8584: PUSH
8585: LD_INT 2
8587: ARRAY
8588: PPUSH
8589: LD_INT 35
8591: PPUSH
8592: NOP4
8596: PUSH
8597: LD_INT 4
8599: ARRAY
8600: ST_TO_ADDR
// if t > x then
8601: NOP4
8605: PUSH
8606: NOP4
8610: GREATER
8611: IFFALSE 8633
// begin x := t ;
8613: NOP4
8617: PUSH
8618: NOP4
8622: ST_TO_ADDR
// target := i ;
8623: NOP4
8627: PUSH
8628: NOP4
8632: ST_TO_ADDR
// end ; end ;
8633: GO 8546
8635: POP
8636: POP
// case target of 1 :
8637: NOP4
8641: PUSH
8642: LD_INT 1
8644: DOUBLE
8645: EQUAL
8646: IFTRUE 8650
8648: GO 8682
8650: POP
// _target := [ [ 49 , 35 ] , [ 76 , 90 ] ] ; 2 :
8651: NOP4
8655: PUSH
8656: LD_INT 49
8658: PUSH
8659: LD_INT 35
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PUSH
8666: LD_INT 76
8668: PUSH
8669: LD_INT 90
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: ST_TO_ADDR
8680: GO 8723
8682: LD_INT 2
8684: DOUBLE
8685: EQUAL
8686: IFTRUE 8690
8688: GO 8722
8690: POP
// _target := [ [ 79 , 13 ] , [ 100 , 22 ] ] ; end ;
8691: NOP4
8695: PUSH
8696: LD_INT 79
8698: PUSH
8699: LD_INT 13
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: LD_INT 100
8708: PUSH
8709: LD_INT 22
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: ST_TO_ADDR
8720: GO 8723
8722: POP
// if not _target then
8723: NOP4
8727: NOT
8728: IFFALSE 8759
// _target := [ [ 49 , 35 ] , [ 76 , 90 ] ] ;
8730: NOP4
8734: PUSH
8735: LD_INT 49
8737: PUSH
8738: LD_INT 35
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_INT 76
8747: PUSH
8748: LD_INT 90
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: ST_TO_ADDR
// MC_PrepareAttack ( base , mc_vehicles [ base ] , _target , flags ) ;
8759: NOP4
8763: PPUSH
8764: NOP4
8768: PUSH
8769: NOP4
8773: ARRAY
8774: PPUSH
8775: NOP4
8779: PPUSH
8780: NOP4
8784: PPUSH
8785: NOP4
// end ; end_of_file
8789: PPOPN 10
8791: END
// on ArtifactLoaded ( cargo , artifact ) do var i , j ;
8792: LD_INT 0
8794: PPUSH
8795: PPUSH
// begin if artifact_get then
8796: NOP4
8800: IFFALSE 8804
// exit ;
8802: GO 8826
// MultiplayerEvent_ArtifactCaptured ( GetSide ( cargo ) ) ;
8804: NOP4
8808: PPUSH
8809: NOP4
8813: PPUSH
8814: NOP4
// artifact_get := true ;
8818: NOP4
8822: PUSH
8823: LD_INT 1
8825: ST_TO_ADDR
// end ;
8826: PPOPN 4
8828: END
// on UnitDestroyed ( un ) do var i , side ;
8829: LD_INT 0
8831: PPUSH
8832: PPUSH
// begin side := GetSide ( un ) ;
8833: NOP4
8837: PUSH
8838: NOP4
8842: PPUSH
8843: NOP4
8847: ST_TO_ADDR
// if not side in mc_sides and multi_sides [ side ] then
8848: NOP4
8852: PUSH
8853: NOP4
8857: IN
8858: NOT
8859: PUSH
8860: NOP4
8864: PUSH
8865: NOP4
8869: ARRAY
8870: AND
8871: IFFALSE 8897
// if GetType ( un ) = unit_human then
8873: NOP4
8877: PPUSH
8878: NOP4
8882: PUSH
8883: LD_INT 1
8885: EQUAL
8886: IFFALSE 8897
// MultiplayerEvent_HumanLost ( side ) ;
8888: NOP4
8892: PPUSH
8893: NOP4
// if side in mc_sides then
8897: NOP4
8901: PUSH
8902: NOP4
8906: IN
8907: IFFALSE 8952
// if un <> Gensher then
8909: NOP4
8913: PUSH
8914: NOP4
8918: NONEQUAL
8919: IFFALSE 8935
// MultiplayerEvent_UnitKilled ( un , false ) else
8921: NOP4
8925: PPUSH
8926: LD_INT 0
8928: PPUSH
8929: NOP4
8933: GO 8952
// MultiplayerEvent_UnitKilled ( un , Multiplayer_GetCondition ( 5 ) ) ;
8935: NOP4
8939: PPUSH
8940: LD_INT 5
8942: PPUSH
8943: NOP4
8947: PPUSH
8948: NOP4
// if multi_commanders and multi_custom_commanders then
8952: NOP4
8956: PUSH
8957: NOP4
8961: AND
8962: IFFALSE 9024
// if un in multi_commanders then
8964: NOP4
8968: PUSH
8969: NOP4
8973: IN
8974: IFFALSE 9024
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
8976: NOP4
8980: PUSH
8981: NOP4
8985: PPUSH
8986: NOP4
8990: PPUSH
8991: LD_INT 1
8993: PPUSH
8994: NOP4
8998: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
8999: NOP4
9003: PUSH
9004: NOP4
9008: PUSH
9009: NOP4
9013: DIFF
9014: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
9015: NOP4
9019: PPUSH
9020: NOP4
// end ; MCE_UnitDestroyed ( un ) ;
9024: NOP4
9028: PPUSH
9029: NOP4
// end ;
9033: PPOPN 3
9035: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
9036: NOP4
9040: PPUSH
9041: NOP4
9045: PPUSH
9046: NOP4
// end ;
9050: PPOPN 2
9052: END
// on BuildingComplete ( building ) do var i , j ;
9053: LD_INT 0
9055: PPUSH
9056: PPUSH
// begin if GetSide ( building ) in mc_sides then
9057: NOP4
9061: PPUSH
9062: NOP4
9066: PUSH
9067: NOP4
9071: IN
9072: IFFALSE 9098
// MultiplayerEvent_BuildingCompleted ( GetSide ( building ) , GetBType ( building ) ) ;
9074: NOP4
9078: PPUSH
9079: NOP4
9083: PPUSH
9084: NOP4
9088: PPUSH
9089: NOP4
9093: PPUSH
9094: NOP4
// if GetBType ( building ) = b_depot and not GetSide ( building ) in mc_sides and base_names then
9098: NOP4
9102: PPUSH
9103: NOP4
9107: PUSH
9108: LD_INT 0
9110: EQUAL
9111: PUSH
9112: NOP4
9116: PPUSH
9117: NOP4
9121: PUSH
9122: NOP4
9126: IN
9127: NOT
9128: AND
9129: PUSH
9130: NOP4
9134: AND
9135: IFFALSE 9173
// begin SetBName ( building , base_names [ 1 ] ) ;
9137: NOP4
9141: PPUSH
9142: NOP4
9146: PUSH
9147: LD_INT 1
9149: ARRAY
9150: PPUSH
9151: NOP4
// base_names := Delete ( base_names , 1 ) ;
9155: NOP4
9159: PUSH
9160: NOP4
9164: PPUSH
9165: LD_INT 1
9167: PPUSH
9168: NOP4
9172: ST_TO_ADDR
// end ; MCE_BuildingComplete ( building ) ;
9173: NOP4
9177: PPUSH
9178: NOP4
// end ;
9182: PPOPN 3
9184: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
9185: NOP4
9189: PPUSH
9190: NOP4
9194: PPUSH
9195: NOP4
// end ;
9199: PPOPN 2
9201: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
9202: NOP4
9206: PPUSH
9207: NOP4
9211: PPUSH
9212: NOP4
9216: PPUSH
9217: NOP4
9221: PPUSH
9222: NOP4
9226: PPUSH
9227: NOP4
// end ;
9231: PPOPN 5
9233: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp ;
9234: LD_INT 0
9236: PPUSH
9237: PPUSH
9238: PPUSH
// begin side := GetSide ( vehicle ) ;
9239: NOP4
9243: PUSH
9244: NOP4
9248: PPUSH
9249: NOP4
9253: ST_TO_ADDR
// if not side in mc_sides and multi_sides [ side ] then
9254: NOP4
9258: PUSH
9259: NOP4
9263: IN
9264: NOT
9265: PUSH
9266: NOP4
9270: PUSH
9271: NOP4
9275: ARRAY
9276: AND
9277: IFFALSE 9288
// MultiplayerEvent_Produced ( side ) ;
9279: NOP4
9283: PPUSH
9284: NOP4
// MCE_VehicleConstructed ( vehicle , factory ) ;
9288: NOP4
9292: PPUSH
9293: NOP4
9297: PPUSH
9298: NOP4
// end ;
9302: PPOPN 5
9304: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
9305: NOP4
9309: PPUSH
9310: NOP4
9314: PPUSH
9315: NOP4
9319: PPUSH
9320: NOP4
9324: PPUSH
9325: NOP4
// end ;
9329: PPOPN 4
9331: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
9332: NOP4
9336: PPUSH
9337: NOP4
9341: PPUSH
9342: NOP4
9346: PPUSH
9347: NOP4
// end ;
9351: PPOPN 3
9353: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
9354: NOP4
9358: PPUSH
9359: NOP4
9363: PPUSH
9364: NOP4
// end ;
9368: PPOPN 2
9370: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
9371: NOP4
9375: PPUSH
9376: NOP4
9380: PPUSH
9381: NOP4
// end ;
9385: PPOPN 2
9387: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
9388: NOP4
9392: PPUSH
9393: NOP4
9397: PPUSH
9398: NOP4
9402: PPUSH
9403: NOP4
9407: PPUSH
9408: NOP4
// end ; end_of_file
9412: PPOPN 4
9414: END
// every 0 0$1 trigger game do
9415: NOP4
9419: IFFALSE 9464
9421: GO 9423
9423: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
9424: LD_INT 7
9426: PUSH
9427: LD_INT 6
9429: PUSH
9430: LD_INT 4
9432: PUSH
9433: LD_INT 6
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: PPUSH
9442: NOP4
9446: PUSH
9447: LD_INT 2
9449: ARRAY
9450: PPUSH
9451: NOP4
9455: PUSH
9456: LD_INT 1
9458: ARRAY
9459: PPUSH
9460: NOP4
9464: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , players_areas ; begin
9465: LD_INT 0
9467: PPUSH
9468: PPUSH
9469: PPUSH
9470: PPUSH
// if not areas then
9471: NOP4
9475: NOT
9476: IFFALSE 9480
// exit ;
9478: GO 9755
// players_areas := [ crates_player_west , crates_player_south , crates_player_east ] ;
9480: NOP4
9484: PUSH
9485: LD_INT 31
9487: PUSH
9488: LD_INT 32
9490: PUSH
9491: LD_INT 30
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: LIST
9498: ST_TO_ADDR
// repeat wait ( time ) ;
9499: NOP4
9503: PPUSH
9504: NOP4
// x := 5 ;
9508: NOP4
9512: PUSH
9513: LD_INT 5
9515: ST_TO_ADDR
// if tick < [ 20 20$00 , 18 18$00 , 14 14$00 ] [ Difficulty ] then
9516: NOP4
9520: PUSH
9521: LD_INT 42000
9523: PUSH
9524: LD_INT 37800
9526: PUSH
9527: LD_INT 29400
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: LIST
9534: PUSH
9535: NOP4
9539: ARRAY
9540: LESS
9541: IFFALSE 9613
// begin for i = 1 to multi_sides do
9543: NOP4
9547: PUSH
9548: DOUBLE
9549: LD_INT 1
9551: DEC
9552: ST_TO_ADDR
9553: NOP4
9557: PUSH
9558: FOR_TO
9559: IFFALSE 9604
// if multi_sides [ i ] then
9561: NOP4
9565: PUSH
9566: NOP4
9570: ARRAY
9571: IFFALSE 9602
// CreateCratesArea ( x , players_areas [ multi_sides [ i ] ] , true ) ;
9573: NOP4
9577: PPUSH
9578: NOP4
9582: PUSH
9583: NOP4
9587: PUSH
9588: NOP4
9592: ARRAY
9593: ARRAY
9594: PPUSH
9595: LD_INT 1
9597: PPUSH
9598: NOP4
9602: GO 9558
9604: POP
9605: POP
// wait ( 0 0$6 ) ;
9606: LD_INT 210
9608: PPUSH
9609: NOP4
// end ; for i in areas do
9613: NOP4
9617: PUSH
9618: NOP4
9622: PUSH
9623: FOR_IN
9624: IFFALSE 9652
// begin wait ( 0 0$6 ) ;
9626: LD_INT 210
9628: PPUSH
9629: NOP4
// CreateCratesArea ( x , i , true ) ;
9633: NOP4
9637: PPUSH
9638: NOP4
9642: PPUSH
9643: LD_INT 1
9645: PPUSH
9646: NOP4
// end ;
9650: GO 9623
9652: POP
9653: POP
// time := time + 0 0$2 ;
9654: NOP4
9658: PUSH
9659: NOP4
9663: PUSH
9664: LD_INT 70
9666: PLUS
9667: ST_TO_ADDR
// amount := amount - x * 10 ;
9668: NOP4
9672: PUSH
9673: NOP4
9677: PUSH
9678: NOP4
9682: PUSH
9683: LD_INT 10
9685: MUL
9686: MINUS
9687: ST_TO_ADDR
// x := x - 1 ;
9688: NOP4
9692: PUSH
9693: NOP4
9697: PUSH
9698: LD_INT 1
9700: MINUS
9701: ST_TO_ADDR
// if x = 0 then
9702: NOP4
9706: PUSH
9707: LD_INT 0
9709: EQUAL
9710: IFFALSE 9720
// x := 5 ;
9712: NOP4
9716: PUSH
9717: LD_INT 5
9719: ST_TO_ADDR
// if time > 4 4$00 then
9720: NOP4
9724: PUSH
9725: LD_INT 8400
9727: GREATER
9728: IFFALSE 9738
// time := 0 0$40 ;
9730: NOP4
9734: PUSH
9735: LD_INT 1400
9737: ST_TO_ADDR
// until not game or amount <= 0 ;
9738: NOP4
9742: NOT
9743: PUSH
9744: NOP4
9748: PUSH
9749: LD_INT 0
9751: LESSEQUAL
9752: OR
9753: IFFALSE 9499
// end ; end_of_file
9755: LD_VAR 0 4
9759: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9760: LD_INT 0
9762: PPUSH
9763: PPUSH
// if exist_mode then
9764: NOP4
9768: IFFALSE 9793
// unit := CreateCharacter ( prefix & ident ) else
9770: NOP4
9774: PUSH
9775: NOP4
9779: PUSH
9780: NOP4
9784: STR
9785: PPUSH
9786: NOP4
9790: ST_TO_ADDR
9791: GO 9808
// unit := NewCharacter ( ident ) ;
9793: NOP4
9797: PUSH
9798: NOP4
9802: PPUSH
9803: NOP4
9807: ST_TO_ADDR
// result := unit ;
9808: NOP4
9812: PUSH
9813: NOP4
9817: ST_TO_ADDR
// end ;
9818: LD_VAR 0 4
9822: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9823: LD_INT 0
9825: PPUSH
9826: PPUSH
// if not side or not nation then
9827: NOP4
9831: NOT
9832: PUSH
9833: NOP4
9837: NOT
9838: OR
9839: IFFALSE 9843
// exit ;
9841: GO 10607
// case nation of nation_american :
9843: NOP4
9847: PUSH
9848: LD_INT 1
9850: DOUBLE
9851: EQUAL
9852: IFTRUE 9856
9854: GO 10070
9856: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9857: NOP4
9861: PUSH
9862: LD_INT 35
9864: PUSH
9865: LD_INT 45
9867: PUSH
9868: LD_INT 46
9870: PUSH
9871: LD_INT 47
9873: PUSH
9874: LD_INT 82
9876: PUSH
9877: LD_INT 83
9879: PUSH
9880: LD_INT 84
9882: PUSH
9883: LD_INT 85
9885: PUSH
9886: LD_INT 86
9888: PUSH
9889: LD_INT 1
9891: PUSH
9892: LD_INT 2
9894: PUSH
9895: LD_INT 6
9897: PUSH
9898: LD_INT 15
9900: PUSH
9901: LD_INT 16
9903: PUSH
9904: LD_INT 7
9906: PUSH
9907: LD_INT 12
9909: PUSH
9910: LD_INT 13
9912: PUSH
9913: LD_INT 10
9915: PUSH
9916: LD_INT 14
9918: PUSH
9919: LD_INT 20
9921: PUSH
9922: LD_INT 21
9924: PUSH
9925: LD_INT 22
9927: PUSH
9928: LD_INT 25
9930: PUSH
9931: LD_INT 32
9933: PUSH
9934: LD_INT 27
9936: PUSH
9937: LD_INT 36
9939: PUSH
9940: LD_INT 69
9942: PUSH
9943: LD_INT 39
9945: PUSH
9946: LD_INT 34
9948: PUSH
9949: LD_INT 40
9951: PUSH
9952: LD_INT 48
9954: PUSH
9955: LD_INT 49
9957: PUSH
9958: LD_INT 50
9960: PUSH
9961: LD_INT 51
9963: PUSH
9964: LD_INT 52
9966: PUSH
9967: LD_INT 53
9969: PUSH
9970: LD_INT 54
9972: PUSH
9973: LD_INT 55
9975: PUSH
9976: LD_INT 56
9978: PUSH
9979: LD_INT 57
9981: PUSH
9982: LD_INT 58
9984: PUSH
9985: LD_INT 59
9987: PUSH
9988: LD_INT 60
9990: PUSH
9991: LD_INT 61
9993: PUSH
9994: LD_INT 62
9996: PUSH
9997: LD_INT 80
9999: PUSH
10000: LD_INT 82
10002: PUSH
10003: LD_INT 83
10005: PUSH
10006: LD_INT 84
10008: PUSH
10009: LD_INT 85
10011: PUSH
10012: LD_INT 86
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: ST_TO_ADDR
10068: GO 10531
10070: LD_INT 2
10072: DOUBLE
10073: EQUAL
10074: IFTRUE 10078
10076: GO 10300
10078: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
10079: NOP4
10083: PUSH
10084: LD_INT 35
10086: PUSH
10087: LD_INT 45
10089: PUSH
10090: LD_INT 46
10092: PUSH
10093: LD_INT 47
10095: PUSH
10096: LD_INT 82
10098: PUSH
10099: LD_INT 83
10101: PUSH
10102: LD_INT 84
10104: PUSH
10105: LD_INT 85
10107: PUSH
10108: LD_INT 87
10110: PUSH
10111: LD_INT 70
10113: PUSH
10114: LD_INT 1
10116: PUSH
10117: LD_INT 11
10119: PUSH
10120: LD_INT 3
10122: PUSH
10123: LD_INT 4
10125: PUSH
10126: LD_INT 5
10128: PUSH
10129: LD_INT 6
10131: PUSH
10132: LD_INT 15
10134: PUSH
10135: LD_INT 18
10137: PUSH
10138: LD_INT 7
10140: PUSH
10141: LD_INT 17
10143: PUSH
10144: LD_INT 8
10146: PUSH
10147: LD_INT 20
10149: PUSH
10150: LD_INT 21
10152: PUSH
10153: LD_INT 22
10155: PUSH
10156: LD_INT 72
10158: PUSH
10159: LD_INT 26
10161: PUSH
10162: LD_INT 69
10164: PUSH
10165: LD_INT 39
10167: PUSH
10168: LD_INT 40
10170: PUSH
10171: LD_INT 41
10173: PUSH
10174: LD_INT 42
10176: PUSH
10177: LD_INT 43
10179: PUSH
10180: LD_INT 48
10182: PUSH
10183: LD_INT 49
10185: PUSH
10186: LD_INT 50
10188: PUSH
10189: LD_INT 51
10191: PUSH
10192: LD_INT 52
10194: PUSH
10195: LD_INT 53
10197: PUSH
10198: LD_INT 54
10200: PUSH
10201: LD_INT 55
10203: PUSH
10204: LD_INT 56
10206: PUSH
10207: LD_INT 60
10209: PUSH
10210: LD_INT 61
10212: PUSH
10213: LD_INT 62
10215: PUSH
10216: LD_INT 66
10218: PUSH
10219: LD_INT 67
10221: PUSH
10222: LD_INT 68
10224: PUSH
10225: LD_INT 81
10227: PUSH
10228: LD_INT 82
10230: PUSH
10231: LD_INT 83
10233: PUSH
10234: LD_INT 84
10236: PUSH
10237: LD_INT 85
10239: PUSH
10240: LD_INT 87
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: ST_TO_ADDR
10298: GO 10531
10300: LD_INT 3
10302: DOUBLE
10303: EQUAL
10304: IFTRUE 10308
10306: GO 10530
10308: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10309: NOP4
10313: PUSH
10314: LD_INT 46
10316: PUSH
10317: LD_INT 47
10319: PUSH
10320: LD_INT 1
10322: PUSH
10323: LD_INT 2
10325: PUSH
10326: LD_INT 82
10328: PUSH
10329: LD_INT 83
10331: PUSH
10332: LD_INT 84
10334: PUSH
10335: LD_INT 85
10337: PUSH
10338: LD_INT 86
10340: PUSH
10341: LD_INT 11
10343: PUSH
10344: LD_INT 9
10346: PUSH
10347: LD_INT 20
10349: PUSH
10350: LD_INT 19
10352: PUSH
10353: LD_INT 21
10355: PUSH
10356: LD_INT 24
10358: PUSH
10359: LD_INT 22
10361: PUSH
10362: LD_INT 25
10364: PUSH
10365: LD_INT 28
10367: PUSH
10368: LD_INT 29
10370: PUSH
10371: LD_INT 30
10373: PUSH
10374: LD_INT 31
10376: PUSH
10377: LD_INT 37
10379: PUSH
10380: LD_INT 38
10382: PUSH
10383: LD_INT 32
10385: PUSH
10386: LD_INT 27
10388: PUSH
10389: LD_INT 33
10391: PUSH
10392: LD_INT 69
10394: PUSH
10395: LD_INT 39
10397: PUSH
10398: LD_INT 34
10400: PUSH
10401: LD_INT 40
10403: PUSH
10404: LD_INT 71
10406: PUSH
10407: LD_INT 23
10409: PUSH
10410: LD_INT 44
10412: PUSH
10413: LD_INT 48
10415: PUSH
10416: LD_INT 49
10418: PUSH
10419: LD_INT 50
10421: PUSH
10422: LD_INT 51
10424: PUSH
10425: LD_INT 52
10427: PUSH
10428: LD_INT 53
10430: PUSH
10431: LD_INT 54
10433: PUSH
10434: LD_INT 55
10436: PUSH
10437: LD_INT 56
10439: PUSH
10440: LD_INT 57
10442: PUSH
10443: LD_INT 58
10445: PUSH
10446: LD_INT 59
10448: PUSH
10449: LD_INT 63
10451: PUSH
10452: LD_INT 64
10454: PUSH
10455: LD_INT 65
10457: PUSH
10458: LD_INT 82
10460: PUSH
10461: LD_INT 83
10463: PUSH
10464: LD_INT 84
10466: PUSH
10467: LD_INT 85
10469: PUSH
10470: LD_INT 86
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: ST_TO_ADDR
10528: GO 10531
10530: POP
// if state > - 1 and state < 3 then
10531: NOP4
10535: PUSH
10536: LD_INT 1
10538: NEG
10539: GREATER
10540: PUSH
10541: NOP4
10545: PUSH
10546: LD_INT 3
10548: LESS
10549: AND
10550: IFFALSE 10607
// for i in result do
10552: NOP4
10556: PUSH
10557: NOP4
10561: PUSH
10562: FOR_IN
10563: IFFALSE 10605
// if GetTech ( i , side ) <> state then
10565: NOP4
10569: PPUSH
10570: NOP4
10574: PPUSH
10575: NOP4
10579: PUSH
10580: NOP4
10584: NONEQUAL
10585: IFFALSE 10603
// result := result diff i ;
10587: NOP4
10591: PUSH
10592: NOP4
10596: PUSH
10597: NOP4
10601: DIFF
10602: ST_TO_ADDR
10603: GO 10562
10605: POP
10606: POP
// end ;
10607: LD_VAR 0 4
10611: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10612: LD_INT 0
10614: PPUSH
10615: PPUSH
10616: PPUSH
// result := true ;
10617: NOP4
10621: PUSH
10622: LD_INT 1
10624: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10625: NOP4
10629: PUSH
10630: NOP4
10634: PPUSH
10635: NOP4
10639: ST_TO_ADDR
// if not tmp then
10640: NOP4
10644: NOT
10645: IFFALSE 10649
// exit ;
10647: GO 10698
// for i in tmp do
10649: NOP4
10653: PUSH
10654: NOP4
10658: PUSH
10659: FOR_IN
10660: IFFALSE 10696
// if GetTech ( i , side ) <> state_researched then
10662: NOP4
10666: PPUSH
10667: NOP4
10671: PPUSH
10672: NOP4
10676: PUSH
10677: LD_INT 2
10679: NONEQUAL
10680: IFFALSE 10694
// begin result := false ;
10682: NOP4
10686: PUSH
10687: LD_INT 0
10689: ST_TO_ADDR
// exit ;
10690: POP
10691: POP
10692: GO 10698
// end ;
10694: GO 10659
10696: POP
10697: POP
// end ;
10698: LD_VAR 0 3
10702: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10703: LD_INT 0
10705: PPUSH
10706: PPUSH
10707: PPUSH
10708: PPUSH
10709: PPUSH
10710: PPUSH
10711: PPUSH
10712: PPUSH
10713: PPUSH
10714: PPUSH
10715: PPUSH
10716: PPUSH
10717: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10718: NOP4
10722: NOT
10723: PUSH
10724: NOP4
10728: PPUSH
10729: NOP4
10733: PUSH
10734: LD_INT 9
10736: NONEQUAL
10737: OR
10738: IFFALSE 10742
// exit ;
10740: GO 11315
// side := GetSide ( unit ) ;
10742: NOP4
10746: PUSH
10747: NOP4
10751: PPUSH
10752: NOP4
10756: ST_TO_ADDR
// tech_space := tech_spacanom ;
10757: NOP4
10761: PUSH
10762: LD_INT 29
10764: ST_TO_ADDR
// tech_time := tech_taurad ;
10765: NOP4
10769: PUSH
10770: LD_INT 28
10772: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10773: NOP4
10777: PUSH
10778: NOP4
10782: PPUSH
10783: NOP4
10787: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10788: NOP4
10792: PPUSH
10793: NOP4
10797: PUSH
10798: LD_INT 2
10800: EQUAL
10801: IFFALSE 10805
// exit ;
10803: GO 11315
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10805: NOP4
10809: PUSH
10810: LD_INT 81
10812: PUSH
10813: NOP4
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 3
10824: PUSH
10825: LD_INT 21
10827: PUSH
10828: LD_INT 3
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PPUSH
10843: NOP4
10847: ST_TO_ADDR
// if not tmp then
10848: NOP4
10852: NOT
10853: IFFALSE 10857
// exit ;
10855: GO 11315
// if in_unit then
10857: NOP4
10861: IFFALSE 10885
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10863: NOP4
10867: PUSH
10868: NOP4
10872: PPUSH
10873: NOP4
10877: PPUSH
10878: NOP4
10882: ST_TO_ADDR
10883: GO 10905
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10885: NOP4
10889: PUSH
10890: NOP4
10894: PPUSH
10895: NOP4
10899: PPUSH
10900: NOP4
10904: ST_TO_ADDR
// if not enemy then
10905: NOP4
10909: NOT
10910: IFFALSE 10914
// exit ;
10912: GO 11315
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10914: NOP4
10918: PUSH
10919: NOP4
10923: PPUSH
10924: NOP4
10928: PPUSH
10929: NOP4
10933: PUSH
10934: LD_INT 13
10936: GREATER
10937: AND
10938: PUSH
10939: NOP4
10943: PPUSH
10944: NOP4
10948: PPUSH
10949: NOP4
10953: PUSH
10954: LD_INT 12
10956: GREATER
10957: OR
10958: IFFALSE 10962
// exit ;
10960: GO 11315
// missile := [ 1 ] ;
10962: NOP4
10966: PUSH
10967: LD_INT 1
10969: PUSH
10970: EMPTY
10971: LIST
10972: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10973: NOP4
10977: PPUSH
10978: NOP4
10982: PPUSH
10983: NOP4
10987: IFFALSE 11016
// missile := Insert ( missile , missile + 1 , 2 ) ;
10989: NOP4
10993: PUSH
10994: NOP4
10998: PPUSH
10999: NOP4
11003: PUSH
11004: LD_INT 1
11006: PLUS
11007: PPUSH
11008: LD_INT 2
11010: PPUSH
11011: NOP4
11015: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11016: NOP4
11020: PPUSH
11021: NOP4
11025: PPUSH
11026: NOP4
11030: PUSH
11031: NOP4
11035: PPUSH
11036: NOP4
11040: PPUSH
11041: NOP4
11045: PPUSH
11046: NOP4
11050: NOT
11051: AND
11052: IFFALSE 11081
// missile := Insert ( missile , missile + 1 , 3 ) ;
11054: NOP4
11058: PUSH
11059: NOP4
11063: PPUSH
11064: NOP4
11068: PUSH
11069: LD_INT 1
11071: PLUS
11072: PPUSH
11073: LD_INT 3
11075: PPUSH
11076: NOP4
11080: ST_TO_ADDR
// if missile < 2 then
11081: NOP4
11085: PUSH
11086: LD_INT 2
11088: LESS
11089: IFFALSE 11093
// exit ;
11091: GO 11315
// x := GetX ( enemy ) ;
11093: NOP4
11097: PUSH
11098: NOP4
11102: PPUSH
11103: NOP4
11107: ST_TO_ADDR
// y := GetY ( enemy ) ;
11108: NOP4
11112: PUSH
11113: NOP4
11117: PPUSH
11118: NOP4
11122: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11123: NOP4
11127: PUSH
11128: NOP4
11132: PUSH
11133: LD_INT 1
11135: NEG
11136: PPUSH
11137: LD_INT 1
11139: PPUSH
11140: NOP4
11144: PLUS
11145: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11146: NOP4
11150: PUSH
11151: NOP4
11155: PUSH
11156: LD_INT 1
11158: NEG
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: NOP4
11167: PLUS
11168: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11169: NOP4
11173: PPUSH
11174: NOP4
11178: PPUSH
11179: NOP4
11183: NOT
11184: IFFALSE 11206
// begin _x := x ;
11186: NOP4
11190: PUSH
11191: NOP4
11195: ST_TO_ADDR
// _y := y ;
11196: NOP4
11200: PUSH
11201: NOP4
11205: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11206: NOP4
11210: PUSH
11211: LD_INT 1
11213: PPUSH
11214: NOP4
11218: PPUSH
11219: NOP4
11223: ST_TO_ADDR
// case i of 1 :
11224: NOP4
11228: PUSH
11229: LD_INT 1
11231: DOUBLE
11232: EQUAL
11233: IFTRUE 11237
11235: GO 11254
11237: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11238: NOP4
11242: PPUSH
11243: NOP4
11247: PPUSH
11248: NOP4
11252: GO 11315
11254: LD_INT 2
11256: DOUBLE
11257: EQUAL
11258: IFTRUE 11262
11260: GO 11284
11262: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11263: NOP4
11267: PPUSH
11268: NOP4
11272: PPUSH
11273: NOP4
11277: PPUSH
11278: NOP4
11282: GO 11315
11284: LD_INT 3
11286: DOUBLE
11287: EQUAL
11288: IFTRUE 11292
11290: GO 11314
11292: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11293: NOP4
11297: PPUSH
11298: NOP4
11302: PPUSH
11303: NOP4
11307: PPUSH
11308: NOP4
11312: GO 11315
11314: POP
// end ;
11315: LD_VAR 0 2
11319: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11320: LD_INT 0
11322: PPUSH
11323: PPUSH
11324: PPUSH
11325: PPUSH
11326: PPUSH
11327: PPUSH
// if not unit or not building then
11328: NOP4
11332: NOT
11333: PUSH
11334: NOP4
11338: NOT
11339: OR
11340: IFFALSE 11344
// exit ;
11342: GO 11502
// x := GetX ( building ) ;
11344: NOP4
11348: PUSH
11349: NOP4
11353: PPUSH
11354: NOP4
11358: ST_TO_ADDR
// y := GetY ( building ) ;
11359: NOP4
11363: PUSH
11364: NOP4
11368: PPUSH
11369: NOP4
11373: ST_TO_ADDR
// for i = 0 to 5 do
11374: NOP4
11378: PUSH
11379: DOUBLE
11380: LD_INT 0
11382: DEC
11383: ST_TO_ADDR
11384: LD_INT 5
11386: PUSH
11387: FOR_TO
11388: IFFALSE 11500
// begin _x := ShiftX ( x , i , 3 ) ;
11390: NOP4
11394: PUSH
11395: NOP4
11399: PPUSH
11400: NOP4
11404: PPUSH
11405: LD_INT 3
11407: PPUSH
11408: NOP4
11412: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11413: NOP4
11417: PUSH
11418: NOP4
11422: PPUSH
11423: NOP4
11427: PPUSH
11428: LD_INT 3
11430: PPUSH
11431: NOP4
11435: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11436: NOP4
11440: PPUSH
11441: NOP4
11445: PPUSH
11446: NOP4
11450: NOT
11451: IFFALSE 11455
// continue ;
11453: GO 11387
// if HexInfo ( _x , _y ) = 0 then
11455: NOP4
11459: PPUSH
11460: NOP4
11464: PPUSH
11465: NOP4
11469: PUSH
11470: LD_INT 0
11472: EQUAL
11473: IFFALSE 11498
// begin ComMoveXY ( unit , _x , _y ) ;
11475: NOP4
11479: PPUSH
11480: NOP4
11484: PPUSH
11485: NOP4
11489: PPUSH
11490: NOP4
// exit ;
11494: POP
11495: POP
11496: GO 11502
// end ; end ;
11498: GO 11387
11500: POP
11501: POP
// end ;
11502: LD_VAR 0 3
11506: RET
// export function ScanBase ( side , base_area ) ; begin
11507: LD_INT 0
11509: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11510: NOP4
11514: PUSH
11515: NOP4
11519: PPUSH
11520: LD_INT 81
11522: PUSH
11523: NOP4
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PPUSH
11532: NOP4
11536: ST_TO_ADDR
// end ;
11537: LD_VAR 0 3
11541: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11542: LD_INT 0
11544: PPUSH
11545: PPUSH
11546: PPUSH
11547: PPUSH
// result := false ;
11548: NOP4
11552: PUSH
11553: LD_INT 0
11555: ST_TO_ADDR
// side := GetSide ( unit ) ;
11556: NOP4
11560: PUSH
11561: NOP4
11565: PPUSH
11566: NOP4
11570: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11571: NOP4
11575: PUSH
11576: NOP4
11580: PPUSH
11581: NOP4
11585: ST_TO_ADDR
// case nat of 1 :
11586: NOP4
11590: PUSH
11591: LD_INT 1
11593: DOUBLE
11594: EQUAL
11595: IFTRUE 11599
11597: GO 11610
11599: POP
// tech := tech_lassight ; 2 :
11600: NOP4
11604: PUSH
11605: LD_INT 12
11607: ST_TO_ADDR
11608: GO 11649
11610: LD_INT 2
11612: DOUBLE
11613: EQUAL
11614: IFTRUE 11618
11616: GO 11629
11618: POP
// tech := tech_mortar ; 3 :
11619: NOP4
11623: PUSH
11624: LD_INT 41
11626: ST_TO_ADDR
11627: GO 11649
11629: LD_INT 3
11631: DOUBLE
11632: EQUAL
11633: IFTRUE 11637
11635: GO 11648
11637: POP
// tech := tech_bazooka ; end ;
11638: NOP4
11642: PUSH
11643: LD_INT 44
11645: ST_TO_ADDR
11646: GO 11649
11648: POP
// if Researched ( side , tech ) then
11649: NOP4
11653: PPUSH
11654: NOP4
11658: PPUSH
11659: NOP4
11663: IFFALSE 11690
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11665: NOP4
11669: PUSH
11670: LD_INT 5
11672: PUSH
11673: LD_INT 8
11675: PUSH
11676: LD_INT 9
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: LIST
11683: PUSH
11684: NOP4
11688: ARRAY
11689: ST_TO_ADDR
// end ;
11690: LD_VAR 0 2
11694: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11695: LD_INT 0
11697: PPUSH
11698: PPUSH
11699: PPUSH
// if not mines then
11700: NOP4
11704: NOT
11705: IFFALSE 11709
// exit ;
11707: GO 11853
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11709: NOP4
11713: PUSH
11714: LD_INT 81
11716: PUSH
11717: NOP4
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 3
11728: PUSH
11729: LD_INT 21
11731: PUSH
11732: LD_INT 3
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PPUSH
11747: NOP4
11751: ST_TO_ADDR
// for i in mines do
11752: NOP4
11756: PUSH
11757: NOP4
11761: PUSH
11762: FOR_IN
11763: IFFALSE 11851
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11765: NOP4
11769: PUSH
11770: LD_INT 1
11772: ARRAY
11773: PPUSH
11774: NOP4
11778: PUSH
11779: LD_INT 2
11781: ARRAY
11782: PPUSH
11783: NOP4
11787: NOT
11788: IFFALSE 11792
// continue ;
11790: GO 11762
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11792: NOP4
11796: PUSH
11797: LD_INT 1
11799: ARRAY
11800: PPUSH
11801: NOP4
11805: PUSH
11806: LD_INT 2
11808: ARRAY
11809: PPUSH
11810: NOP4
11814: PUSH
11815: NOP4
11819: IN
11820: IFFALSE 11849
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11822: NOP4
11826: PUSH
11827: LD_INT 1
11829: ARRAY
11830: PPUSH
11831: NOP4
11835: PUSH
11836: LD_INT 2
11838: ARRAY
11839: PPUSH
11840: NOP4
11844: PPUSH
11845: NOP4
// end ;
11849: GO 11762
11851: POP
11852: POP
// end ;
11853: LD_VAR 0 3
11857: RET
// export function Count ( array ) ; var i ; begin
11858: LD_INT 0
11860: PPUSH
11861: PPUSH
// result := 0 ;
11862: NOP4
11866: PUSH
11867: LD_INT 0
11869: ST_TO_ADDR
// for i in array do
11870: NOP4
11874: PUSH
11875: NOP4
11879: PUSH
11880: FOR_IN
11881: IFFALSE 11905
// if i then
11883: NOP4
11887: IFFALSE 11903
// result := result + 1 ;
11889: NOP4
11893: PUSH
11894: NOP4
11898: PUSH
11899: LD_INT 1
11901: PLUS
11902: ST_TO_ADDR
11903: GO 11880
11905: POP
11906: POP
// end ;
11907: LD_VAR 0 2
11911: RET
// export function IsEmpty ( building ) ; begin
11912: LD_INT 0
11914: PPUSH
// if not building then
11915: NOP4
11919: NOT
11920: IFFALSE 11924
// exit ;
11922: GO 11967
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11924: NOP4
11928: PUSH
11929: NOP4
11933: PUSH
11934: LD_INT 22
11936: PUSH
11937: NOP4
11941: PPUSH
11942: NOP4
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 58
11953: PUSH
11954: EMPTY
11955: LIST
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PPUSH
11961: NOP4
11965: IN
11966: ST_TO_ADDR
// end ;
11967: LD_VAR 0 2
11971: RET
// export function IsNotFull ( building ) ; begin
11972: LD_INT 0
11974: PPUSH
// if not building then
11975: NOP4
11979: NOT
11980: IFFALSE 11984
// exit ;
11982: GO 12003
// result := UnitsInside ( building ) < 6 ;
11984: NOP4
11988: PUSH
11989: NOP4
11993: PPUSH
11994: NOP4
11998: PUSH
11999: LD_INT 6
12001: LESS
12002: ST_TO_ADDR
// end ;
12003: LD_VAR 0 2
12007: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12008: LD_INT 0
12010: PPUSH
12011: PPUSH
12012: PPUSH
12013: PPUSH
// tmp := [ ] ;
12014: NOP4
12018: PUSH
12019: EMPTY
12020: ST_TO_ADDR
// list := [ ] ;
12021: NOP4
12025: PUSH
12026: EMPTY
12027: ST_TO_ADDR
// for i = 16 to 25 do
12028: NOP4
12032: PUSH
12033: DOUBLE
12034: LD_INT 16
12036: DEC
12037: ST_TO_ADDR
12038: LD_INT 25
12040: PUSH
12041: FOR_TO
12042: IFFALSE 12115
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12044: NOP4
12048: PUSH
12049: NOP4
12053: PUSH
12054: LD_INT 22
12056: PUSH
12057: NOP4
12061: PPUSH
12062: NOP4
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 91
12073: PUSH
12074: NOP4
12078: PUSH
12079: LD_INT 6
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 30
12089: PUSH
12090: NOP4
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: PUSH
12104: EMPTY
12105: LIST
12106: PPUSH
12107: NOP4
12111: ADD
12112: ST_TO_ADDR
12113: GO 12041
12115: POP
12116: POP
// for i = 1 to tmp do
12117: NOP4
12121: PUSH
12122: DOUBLE
12123: LD_INT 1
12125: DEC
12126: ST_TO_ADDR
12127: NOP4
12131: PUSH
12132: FOR_TO
12133: IFFALSE 12221
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12135: NOP4
12139: PUSH
12140: NOP4
12144: PUSH
12145: NOP4
12149: PUSH
12150: NOP4
12154: ARRAY
12155: PPUSH
12156: NOP4
12160: PUSH
12161: NOP4
12165: PUSH
12166: NOP4
12170: ARRAY
12171: PPUSH
12172: NOP4
12176: PUSH
12177: NOP4
12181: PUSH
12182: NOP4
12186: ARRAY
12187: PPUSH
12188: NOP4
12192: PUSH
12193: NOP4
12197: PUSH
12198: NOP4
12202: ARRAY
12203: PPUSH
12204: NOP4
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: EMPTY
12216: LIST
12217: ADD
12218: ST_TO_ADDR
12219: GO 12132
12221: POP
12222: POP
// result := list ;
12223: NOP4
12227: PUSH
12228: NOP4
12232: ST_TO_ADDR
// end ;
12233: LD_VAR 0 2
12237: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12238: LD_INT 0
12240: PPUSH
12241: PPUSH
12242: PPUSH
12243: PPUSH
12244: PPUSH
12245: PPUSH
12246: PPUSH
// if not factory then
12247: NOP4
12251: NOT
12252: IFFALSE 12256
// exit ;
12254: GO 12849
// if control = control_apeman then
12256: NOP4
12260: PUSH
12261: LD_INT 5
12263: EQUAL
12264: IFFALSE 12373
// begin tmp := UnitsInside ( factory ) ;
12266: NOP4
12270: PUSH
12271: NOP4
12275: PPUSH
12276: NOP4
12280: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12281: NOP4
12285: PPUSH
12286: LD_INT 25
12288: PUSH
12289: LD_INT 12
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PPUSH
12296: NOP4
12300: NOT
12301: IFFALSE 12311
// control := control_manual ;
12303: NOP4
12307: PUSH
12308: LD_INT 1
12310: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12311: NOP4
12315: PUSH
12316: NOP4
12320: PPUSH
12321: NOP4
12325: ST_TO_ADDR
// if tmp then
12326: NOP4
12330: IFFALSE 12373
// begin for i in tmp do
12332: NOP4
12336: PUSH
12337: NOP4
12341: PUSH
12342: FOR_IN
12343: IFFALSE 12371
// if i [ 1 ] = b_ext_radio then
12345: NOP4
12349: PUSH
12350: LD_INT 1
12352: ARRAY
12353: PUSH
12354: LD_INT 22
12356: EQUAL
12357: IFFALSE 12369
// begin control := control_remote ;
12359: NOP4
12363: PUSH
12364: LD_INT 2
12366: ST_TO_ADDR
// break ;
12367: GO 12371
// end ;
12369: GO 12342
12371: POP
12372: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12373: NOP4
12377: PPUSH
12378: NOP4
12382: PPUSH
12383: NOP4
12387: PPUSH
12388: NOP4
12392: PPUSH
12393: NOP4
12397: PPUSH
12398: NOP4
12402: IFFALSE 12437
// begin result := [ chassis , engine , control , weapon ] ;
12404: NOP4
12408: PUSH
12409: NOP4
12413: PUSH
12414: NOP4
12418: PUSH
12419: NOP4
12423: PUSH
12424: NOP4
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: ST_TO_ADDR
// exit ;
12435: GO 12849
// end ; _chassis := AvailableChassisList ( factory ) ;
12437: NOP4
12441: PUSH
12442: NOP4
12446: PPUSH
12447: NOP4
12451: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12452: NOP4
12456: PUSH
12457: NOP4
12461: PPUSH
12462: NOP4
12466: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12467: NOP4
12471: PUSH
12472: NOP4
12476: PPUSH
12477: NOP4
12481: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12482: NOP4
12486: PUSH
12487: NOP4
12491: PPUSH
12492: NOP4
12496: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12497: NOP4
12501: NOT
12502: PUSH
12503: NOP4
12507: NOT
12508: OR
12509: PUSH
12510: NOP4
12514: NOT
12515: OR
12516: PUSH
12517: NOP4
12521: NOT
12522: OR
12523: IFFALSE 12558
// begin result := [ chassis , engine , control , weapon ] ;
12525: NOP4
12529: PUSH
12530: NOP4
12534: PUSH
12535: NOP4
12539: PUSH
12540: NOP4
12544: PUSH
12545: NOP4
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: ST_TO_ADDR
// exit ;
12556: GO 12849
// end ; if not chassis in _chassis then
12558: NOP4
12562: PUSH
12563: NOP4
12567: IN
12568: NOT
12569: IFFALSE 12595
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12571: NOP4
12575: PUSH
12576: NOP4
12580: PUSH
12581: LD_INT 1
12583: PPUSH
12584: NOP4
12588: PPUSH
12589: NOP4
12593: ARRAY
12594: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12595: NOP4
12599: PPUSH
12600: NOP4
12604: PPUSH
12605: NOP4
12609: NOT
12610: IFFALSE 12669
// repeat engine := _engine [ 1 ] ;
12612: NOP4
12616: PUSH
12617: NOP4
12621: PUSH
12622: LD_INT 1
12624: ARRAY
12625: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12626: NOP4
12630: PUSH
12631: NOP4
12635: PPUSH
12636: LD_INT 1
12638: PPUSH
12639: NOP4
12643: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12644: NOP4
12648: PPUSH
12649: NOP4
12653: PPUSH
12654: NOP4
12658: PUSH
12659: NOP4
12663: PUSH
12664: EMPTY
12665: EQUAL
12666: OR
12667: IFFALSE 12612
// if not control in _control then
12669: NOP4
12673: PUSH
12674: NOP4
12678: IN
12679: NOT
12680: IFFALSE 12706
// control := _control [ rand ( 1 , _control ) ] ;
12682: NOP4
12686: PUSH
12687: NOP4
12691: PUSH
12692: LD_INT 1
12694: PPUSH
12695: NOP4
12699: PPUSH
12700: NOP4
12704: ARRAY
12705: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12706: NOP4
12710: PPUSH
12711: NOP4
12715: PPUSH
12716: NOP4
12720: NOT
12721: IFFALSE 12780
// repeat weapon := _weapon [ 1 ] ;
12723: NOP4
12727: PUSH
12728: NOP4
12732: PUSH
12733: LD_INT 1
12735: ARRAY
12736: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12737: NOP4
12741: PUSH
12742: NOP4
12746: PPUSH
12747: LD_INT 1
12749: PPUSH
12750: NOP4
12754: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12755: NOP4
12759: PPUSH
12760: NOP4
12764: PPUSH
12765: NOP4
12769: PUSH
12770: NOP4
12774: PUSH
12775: EMPTY
12776: EQUAL
12777: OR
12778: IFFALSE 12723
// result := [ ] ;
12780: NOP4
12784: PUSH
12785: EMPTY
12786: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12787: NOP4
12791: PPUSH
12792: NOP4
12796: PPUSH
12797: NOP4
12801: PPUSH
12802: NOP4
12806: PPUSH
12807: NOP4
12811: PPUSH
12812: NOP4
12816: IFFALSE 12849
// result := [ chassis , engine , control , weapon ] ;
12818: NOP4
12822: PUSH
12823: NOP4
12827: PUSH
12828: NOP4
12832: PUSH
12833: NOP4
12837: PUSH
12838: NOP4
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: ST_TO_ADDR
// end ;
12849: LD_VAR 0 6
12853: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12854: LD_INT 0
12856: PPUSH
// if not chassis or not engine then
12857: NOP4
12861: NOT
12862: PUSH
12863: NOP4
12867: NOT
12868: OR
12869: IFFALSE 12873
// exit ;
12871: GO 13069
// case engine of engine_solar :
12873: NOP4
12877: PUSH
12878: LD_INT 2
12880: DOUBLE
12881: EQUAL
12882: IFTRUE 12886
12884: GO 12924
12886: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12887: NOP4
12891: PUSH
12892: LD_INT 11
12894: PUSH
12895: LD_INT 12
12897: PUSH
12898: LD_INT 13
12900: PUSH
12901: LD_INT 14
12903: PUSH
12904: LD_INT 1
12906: PUSH
12907: LD_INT 2
12909: PUSH
12910: LD_INT 3
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: ST_TO_ADDR
12922: GO 13053
12924: LD_INT 1
12926: DOUBLE
12927: EQUAL
12928: IFTRUE 12932
12930: GO 12994
12932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12933: NOP4
12937: PUSH
12938: LD_INT 11
12940: PUSH
12941: LD_INT 12
12943: PUSH
12944: LD_INT 13
12946: PUSH
12947: LD_INT 14
12949: PUSH
12950: LD_INT 1
12952: PUSH
12953: LD_INT 2
12955: PUSH
12956: LD_INT 3
12958: PUSH
12959: LD_INT 4
12961: PUSH
12962: LD_INT 5
12964: PUSH
12965: LD_INT 21
12967: PUSH
12968: LD_INT 23
12970: PUSH
12971: LD_INT 22
12973: PUSH
12974: LD_INT 24
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: ST_TO_ADDR
12992: GO 13053
12994: LD_INT 3
12996: DOUBLE
12997: EQUAL
12998: IFTRUE 13002
13000: GO 13052
13002: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13003: NOP4
13007: PUSH
13008: LD_INT 13
13010: PUSH
13011: LD_INT 14
13013: PUSH
13014: LD_INT 2
13016: PUSH
13017: LD_INT 3
13019: PUSH
13020: LD_INT 4
13022: PUSH
13023: LD_INT 5
13025: PUSH
13026: LD_INT 21
13028: PUSH
13029: LD_INT 22
13031: PUSH
13032: LD_INT 23
13034: PUSH
13035: LD_INT 24
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: ST_TO_ADDR
13050: GO 13053
13052: POP
// result := ( chassis in result ) ;
13053: NOP4
13057: PUSH
13058: NOP4
13062: PUSH
13063: NOP4
13067: IN
13068: ST_TO_ADDR
// end ;
13069: LD_VAR 0 3
13073: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13074: LD_INT 0
13076: PPUSH
// if not chassis or not weapon then
13077: NOP4
13081: NOT
13082: PUSH
13083: NOP4
13087: NOT
13088: OR
13089: IFFALSE 13093
// exit ;
13091: GO 14119
// case weapon of us_machine_gun :
13093: NOP4
13097: PUSH
13098: LD_INT 2
13100: DOUBLE
13101: EQUAL
13102: IFTRUE 13106
13104: GO 13136
13106: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13107: NOP4
13111: PUSH
13112: LD_INT 1
13114: PUSH
13115: LD_INT 2
13117: PUSH
13118: LD_INT 3
13120: PUSH
13121: LD_INT 4
13123: PUSH
13124: LD_INT 5
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: ST_TO_ADDR
13134: GO 14103
13136: LD_INT 3
13138: DOUBLE
13139: EQUAL
13140: IFTRUE 13144
13142: GO 13174
13144: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13145: NOP4
13149: PUSH
13150: LD_INT 1
13152: PUSH
13153: LD_INT 2
13155: PUSH
13156: LD_INT 3
13158: PUSH
13159: LD_INT 4
13161: PUSH
13162: LD_INT 5
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: ST_TO_ADDR
13172: GO 14103
13174: LD_INT 11
13176: DOUBLE
13177: EQUAL
13178: IFTRUE 13182
13180: GO 13212
13182: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13183: NOP4
13187: PUSH
13188: LD_INT 1
13190: PUSH
13191: LD_INT 2
13193: PUSH
13194: LD_INT 3
13196: PUSH
13197: LD_INT 4
13199: PUSH
13200: LD_INT 5
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: ST_TO_ADDR
13210: GO 14103
13212: LD_INT 4
13214: DOUBLE
13215: EQUAL
13216: IFTRUE 13220
13218: GO 13246
13220: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13221: NOP4
13225: PUSH
13226: LD_INT 2
13228: PUSH
13229: LD_INT 3
13231: PUSH
13232: LD_INT 4
13234: PUSH
13235: LD_INT 5
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: ST_TO_ADDR
13244: GO 14103
13246: LD_INT 5
13248: DOUBLE
13249: EQUAL
13250: IFTRUE 13254
13252: GO 13280
13254: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13255: NOP4
13259: PUSH
13260: LD_INT 2
13262: PUSH
13263: LD_INT 3
13265: PUSH
13266: LD_INT 4
13268: PUSH
13269: LD_INT 5
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: ST_TO_ADDR
13278: GO 14103
13280: LD_INT 9
13282: DOUBLE
13283: EQUAL
13284: IFTRUE 13288
13286: GO 13314
13288: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13289: NOP4
13293: PUSH
13294: LD_INT 2
13296: PUSH
13297: LD_INT 3
13299: PUSH
13300: LD_INT 4
13302: PUSH
13303: LD_INT 5
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: ST_TO_ADDR
13312: GO 14103
13314: LD_INT 7
13316: DOUBLE
13317: EQUAL
13318: IFTRUE 13322
13320: GO 13348
13322: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13323: NOP4
13327: PUSH
13328: LD_INT 2
13330: PUSH
13331: LD_INT 3
13333: PUSH
13334: LD_INT 4
13336: PUSH
13337: LD_INT 5
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: ST_TO_ADDR
13346: GO 14103
13348: LD_INT 12
13350: DOUBLE
13351: EQUAL
13352: IFTRUE 13356
13354: GO 13382
13356: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13357: NOP4
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: LD_INT 3
13367: PUSH
13368: LD_INT 4
13370: PUSH
13371: LD_INT 5
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: ST_TO_ADDR
13380: GO 14103
13382: LD_INT 13
13384: DOUBLE
13385: EQUAL
13386: IFTRUE 13390
13388: GO 13416
13390: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13391: NOP4
13395: PUSH
13396: LD_INT 2
13398: PUSH
13399: LD_INT 3
13401: PUSH
13402: LD_INT 4
13404: PUSH
13405: LD_INT 5
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: ST_TO_ADDR
13414: GO 14103
13416: LD_INT 14
13418: DOUBLE
13419: EQUAL
13420: IFTRUE 13424
13422: GO 13442
13424: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13425: NOP4
13429: PUSH
13430: LD_INT 4
13432: PUSH
13433: LD_INT 5
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: ST_TO_ADDR
13440: GO 14103
13442: LD_INT 6
13444: DOUBLE
13445: EQUAL
13446: IFTRUE 13450
13448: GO 13468
13450: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13451: NOP4
13455: PUSH
13456: LD_INT 4
13458: PUSH
13459: LD_INT 5
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: ST_TO_ADDR
13466: GO 14103
13468: LD_INT 10
13470: DOUBLE
13471: EQUAL
13472: IFTRUE 13476
13474: GO 13494
13476: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13477: NOP4
13481: PUSH
13482: LD_INT 4
13484: PUSH
13485: LD_INT 5
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: ST_TO_ADDR
13492: GO 14103
13494: LD_INT 22
13496: DOUBLE
13497: EQUAL
13498: IFTRUE 13502
13500: GO 13528
13502: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13503: NOP4
13507: PUSH
13508: LD_INT 11
13510: PUSH
13511: LD_INT 12
13513: PUSH
13514: LD_INT 13
13516: PUSH
13517: LD_INT 14
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: ST_TO_ADDR
13526: GO 14103
13528: LD_INT 23
13530: DOUBLE
13531: EQUAL
13532: IFTRUE 13536
13534: GO 13562
13536: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13537: NOP4
13541: PUSH
13542: LD_INT 11
13544: PUSH
13545: LD_INT 12
13547: PUSH
13548: LD_INT 13
13550: PUSH
13551: LD_INT 14
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: ST_TO_ADDR
13560: GO 14103
13562: LD_INT 24
13564: DOUBLE
13565: EQUAL
13566: IFTRUE 13570
13568: GO 13596
13570: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13571: NOP4
13575: PUSH
13576: LD_INT 11
13578: PUSH
13579: LD_INT 12
13581: PUSH
13582: LD_INT 13
13584: PUSH
13585: LD_INT 14
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: ST_TO_ADDR
13594: GO 14103
13596: LD_INT 30
13598: DOUBLE
13599: EQUAL
13600: IFTRUE 13604
13602: GO 13630
13604: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13605: NOP4
13609: PUSH
13610: LD_INT 11
13612: PUSH
13613: LD_INT 12
13615: PUSH
13616: LD_INT 13
13618: PUSH
13619: LD_INT 14
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: ST_TO_ADDR
13628: GO 14103
13630: LD_INT 25
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13656
13638: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13639: NOP4
13643: PUSH
13644: LD_INT 13
13646: PUSH
13647: LD_INT 14
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: ST_TO_ADDR
13654: GO 14103
13656: LD_INT 27
13658: DOUBLE
13659: EQUAL
13660: IFTRUE 13664
13662: GO 13682
13664: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13665: NOP4
13669: PUSH
13670: LD_INT 13
13672: PUSH
13673: LD_INT 14
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: ST_TO_ADDR
13680: GO 14103
13682: LD_INT 28
13684: DOUBLE
13685: EQUAL
13686: IFTRUE 13690
13688: GO 13708
13690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13691: NOP4
13695: PUSH
13696: LD_INT 13
13698: PUSH
13699: LD_INT 14
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: ST_TO_ADDR
13706: GO 14103
13708: LD_INT 29
13710: DOUBLE
13711: EQUAL
13712: IFTRUE 13716
13714: GO 13734
13716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13717: NOP4
13721: PUSH
13722: LD_INT 13
13724: PUSH
13725: LD_INT 14
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: ST_TO_ADDR
13732: GO 14103
13734: LD_INT 31
13736: DOUBLE
13737: EQUAL
13738: IFTRUE 13742
13740: GO 13760
13742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13743: NOP4
13747: PUSH
13748: LD_INT 13
13750: PUSH
13751: LD_INT 14
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: ST_TO_ADDR
13758: GO 14103
13760: LD_INT 26
13762: DOUBLE
13763: EQUAL
13764: IFTRUE 13768
13766: GO 13786
13768: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13769: NOP4
13773: PUSH
13774: LD_INT 13
13776: PUSH
13777: LD_INT 14
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: ST_TO_ADDR
13784: GO 14103
13786: LD_INT 42
13788: DOUBLE
13789: EQUAL
13790: IFTRUE 13794
13792: GO 13820
13794: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13795: NOP4
13799: PUSH
13800: LD_INT 21
13802: PUSH
13803: LD_INT 22
13805: PUSH
13806: LD_INT 23
13808: PUSH
13809: LD_INT 24
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: ST_TO_ADDR
13818: GO 14103
13820: LD_INT 43
13822: DOUBLE
13823: EQUAL
13824: IFTRUE 13828
13826: GO 13854
13828: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13829: NOP4
13833: PUSH
13834: LD_INT 21
13836: PUSH
13837: LD_INT 22
13839: PUSH
13840: LD_INT 23
13842: PUSH
13843: LD_INT 24
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: ST_TO_ADDR
13852: GO 14103
13854: LD_INT 44
13856: DOUBLE
13857: EQUAL
13858: IFTRUE 13862
13860: GO 13888
13862: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13863: NOP4
13867: PUSH
13868: LD_INT 21
13870: PUSH
13871: LD_INT 22
13873: PUSH
13874: LD_INT 23
13876: PUSH
13877: LD_INT 24
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: ST_TO_ADDR
13886: GO 14103
13888: LD_INT 45
13890: DOUBLE
13891: EQUAL
13892: IFTRUE 13896
13894: GO 13922
13896: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13897: NOP4
13901: PUSH
13902: LD_INT 21
13904: PUSH
13905: LD_INT 22
13907: PUSH
13908: LD_INT 23
13910: PUSH
13911: LD_INT 24
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: ST_TO_ADDR
13920: GO 14103
13922: LD_INT 49
13924: DOUBLE
13925: EQUAL
13926: IFTRUE 13930
13928: GO 13956
13930: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13931: NOP4
13935: PUSH
13936: LD_INT 21
13938: PUSH
13939: LD_INT 22
13941: PUSH
13942: LD_INT 23
13944: PUSH
13945: LD_INT 24
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: ST_TO_ADDR
13954: GO 14103
13956: LD_INT 51
13958: DOUBLE
13959: EQUAL
13960: IFTRUE 13964
13962: GO 13990
13964: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13965: NOP4
13969: PUSH
13970: LD_INT 21
13972: PUSH
13973: LD_INT 22
13975: PUSH
13976: LD_INT 23
13978: PUSH
13979: LD_INT 24
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: ST_TO_ADDR
13988: GO 14103
13990: LD_INT 52
13992: DOUBLE
13993: EQUAL
13994: IFTRUE 13998
13996: GO 14024
13998: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13999: NOP4
14003: PUSH
14004: LD_INT 21
14006: PUSH
14007: LD_INT 22
14009: PUSH
14010: LD_INT 23
14012: PUSH
14013: LD_INT 24
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: ST_TO_ADDR
14022: GO 14103
14024: LD_INT 53
14026: DOUBLE
14027: EQUAL
14028: IFTRUE 14032
14030: GO 14050
14032: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14033: NOP4
14037: PUSH
14038: LD_INT 23
14040: PUSH
14041: LD_INT 24
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: ST_TO_ADDR
14048: GO 14103
14050: LD_INT 46
14052: DOUBLE
14053: EQUAL
14054: IFTRUE 14058
14056: GO 14076
14058: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14059: NOP4
14063: PUSH
14064: LD_INT 23
14066: PUSH
14067: LD_INT 24
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: ST_TO_ADDR
14074: GO 14103
14076: LD_INT 47
14078: DOUBLE
14079: EQUAL
14080: IFTRUE 14084
14082: GO 14102
14084: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14085: NOP4
14089: PUSH
14090: LD_INT 23
14092: PUSH
14093: LD_INT 24
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: ST_TO_ADDR
14100: GO 14103
14102: POP
// result := ( chassis in result ) ;
14103: NOP4
14107: PUSH
14108: NOP4
14112: PUSH
14113: NOP4
14117: IN
14118: ST_TO_ADDR
// end ;
14119: LD_VAR 0 3
14123: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14124: LD_INT 0
14126: PPUSH
14127: PPUSH
14128: PPUSH
14129: PPUSH
14130: PPUSH
14131: PPUSH
14132: PPUSH
// result := array ;
14133: NOP4
14137: PUSH
14138: NOP4
14142: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14143: NOP4
14147: NOT
14148: PUSH
14149: NOP4
14153: NOT
14154: OR
14155: PUSH
14156: NOP4
14160: NOT
14161: OR
14162: PUSH
14163: NOP4
14167: PUSH
14168: NOP4
14172: GREATER
14173: OR
14174: PUSH
14175: NOP4
14179: PUSH
14180: NOP4
14184: GREATER
14185: OR
14186: IFFALSE 14190
// exit ;
14188: GO 14486
// if direction then
14190: NOP4
14194: IFFALSE 14258
// begin d := 1 ;
14196: NOP4
14200: PUSH
14201: LD_INT 1
14203: ST_TO_ADDR
// if i_from > i_to then
14204: NOP4
14208: PUSH
14209: NOP4
14213: GREATER
14214: IFFALSE 14240
// length := ( array - i_from ) + i_to else
14216: NOP4
14220: PUSH
14221: NOP4
14225: PUSH
14226: NOP4
14230: MINUS
14231: PUSH
14232: NOP4
14236: PLUS
14237: ST_TO_ADDR
14238: GO 14256
// length := i_to - i_from ;
14240: NOP4
14244: PUSH
14245: NOP4
14249: PUSH
14250: NOP4
14254: MINUS
14255: ST_TO_ADDR
// end else
14256: GO 14319
// begin d := - 1 ;
14258: NOP4
14262: PUSH
14263: LD_INT 1
14265: NEG
14266: ST_TO_ADDR
// if i_from > i_to then
14267: NOP4
14271: PUSH
14272: NOP4
14276: GREATER
14277: IFFALSE 14297
// length := i_from - i_to else
14279: NOP4
14283: PUSH
14284: NOP4
14288: PUSH
14289: NOP4
14293: MINUS
14294: ST_TO_ADDR
14295: GO 14319
// length := ( array - i_to ) + i_from ;
14297: NOP4
14301: PUSH
14302: NOP4
14306: PUSH
14307: NOP4
14311: MINUS
14312: PUSH
14313: NOP4
14317: PLUS
14318: ST_TO_ADDR
// end ; if not length then
14319: NOP4
14323: NOT
14324: IFFALSE 14328
// exit ;
14326: GO 14486
// tmp := array ;
14328: NOP4
14332: PUSH
14333: NOP4
14337: ST_TO_ADDR
// for i = 1 to length do
14338: NOP4
14342: PUSH
14343: DOUBLE
14344: LD_INT 1
14346: DEC
14347: ST_TO_ADDR
14348: NOP4
14352: PUSH
14353: FOR_TO
14354: IFFALSE 14474
// begin for j = 1 to array do
14356: NOP4
14360: PUSH
14361: DOUBLE
14362: LD_INT 1
14364: DEC
14365: ST_TO_ADDR
14366: NOP4
14370: PUSH
14371: FOR_TO
14372: IFFALSE 14460
// begin k := j + d ;
14374: NOP4
14378: PUSH
14379: NOP4
14383: PUSH
14384: NOP4
14388: PLUS
14389: ST_TO_ADDR
// if k > array then
14390: NOP4
14394: PUSH
14395: NOP4
14399: GREATER
14400: IFFALSE 14410
// k := 1 ;
14402: NOP4
14406: PUSH
14407: LD_INT 1
14409: ST_TO_ADDR
// if not k then
14410: NOP4
14414: NOT
14415: IFFALSE 14427
// k := array ;
14417: NOP4
14421: PUSH
14422: NOP4
14426: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14427: NOP4
14431: PUSH
14432: NOP4
14436: PPUSH
14437: NOP4
14441: PPUSH
14442: NOP4
14446: PUSH
14447: NOP4
14451: ARRAY
14452: PPUSH
14453: NOP4
14457: ST_TO_ADDR
// end ;
14458: GO 14371
14460: POP
14461: POP
// array := tmp ;
14462: NOP4
14466: PUSH
14467: NOP4
14471: ST_TO_ADDR
// end ;
14472: GO 14353
14474: POP
14475: POP
// result := array ;
14476: NOP4
14480: PUSH
14481: NOP4
14485: ST_TO_ADDR
// end ;
14486: LD_VAR 0 5
14490: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14491: LD_INT 0
14493: PPUSH
14494: PPUSH
// result := 0 ;
14495: NOP4
14499: PUSH
14500: LD_INT 0
14502: ST_TO_ADDR
// if not array or not value in array then
14503: NOP4
14507: NOT
14508: PUSH
14509: NOP4
14513: PUSH
14514: NOP4
14518: IN
14519: NOT
14520: OR
14521: IFFALSE 14525
// exit ;
14523: GO 14579
// for i = 1 to array do
14525: NOP4
14529: PUSH
14530: DOUBLE
14531: LD_INT 1
14533: DEC
14534: ST_TO_ADDR
14535: NOP4
14539: PUSH
14540: FOR_TO
14541: IFFALSE 14577
// if value = array [ i ] then
14543: NOP4
14547: PUSH
14548: NOP4
14552: PUSH
14553: NOP4
14557: ARRAY
14558: EQUAL
14559: IFFALSE 14575
// begin result := i ;
14561: NOP4
14565: PUSH
14566: NOP4
14570: ST_TO_ADDR
// exit ;
14571: POP
14572: POP
14573: GO 14579
// end ;
14575: GO 14540
14577: POP
14578: POP
// end ;
14579: LD_VAR 0 3
14583: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14584: LD_INT 0
14586: PPUSH
// vc_chassis := chassis ;
14587: LD_ADDR_OWVAR 37
14591: PUSH
14592: NOP4
14596: ST_TO_ADDR
// vc_engine := engine ;
14597: LD_ADDR_OWVAR 39
14601: PUSH
14602: NOP4
14606: ST_TO_ADDR
// vc_control := control ;
14607: LD_ADDR_OWVAR 38
14611: PUSH
14612: NOP4
14616: ST_TO_ADDR
// vc_weapon := weapon ;
14617: LD_ADDR_OWVAR 40
14621: PUSH
14622: NOP4
14626: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14627: LD_ADDR_OWVAR 41
14631: PUSH
14632: NOP4
14636: ST_TO_ADDR
// end ;
14637: LD_VAR 0 6
14641: RET
// export function WantPlant ( unit ) ; var task ; begin
14642: LD_INT 0
14644: PPUSH
14645: PPUSH
// result := false ;
14646: NOP4
14650: PUSH
14651: LD_INT 0
14653: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14654: NOP4
14658: PUSH
14659: NOP4
14663: PPUSH
14664: NOP4
14668: ST_TO_ADDR
// if task then
14669: NOP4
14673: IFFALSE 14701
// if task [ 1 ] [ 1 ] = p then
14675: NOP4
14679: PUSH
14680: LD_INT 1
14682: ARRAY
14683: PUSH
14684: LD_INT 1
14686: ARRAY
14687: PUSH
14688: LD_STRING p
14690: EQUAL
14691: IFFALSE 14701
// result := true ;
14693: NOP4
14697: PUSH
14698: LD_INT 1
14700: ST_TO_ADDR
// end ;
14701: LD_VAR 0 2
14705: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14706: LD_INT 0
14708: PPUSH
14709: PPUSH
14710: PPUSH
14711: PPUSH
// if pos < 1 then
14712: NOP4
14716: PUSH
14717: LD_INT 1
14719: LESS
14720: IFFALSE 14724
// exit ;
14722: GO 15027
// if pos = 1 then
14724: NOP4
14728: PUSH
14729: LD_INT 1
14731: EQUAL
14732: IFFALSE 14765
// result := Replace ( arr , pos [ 1 ] , value ) else
14734: NOP4
14738: PUSH
14739: NOP4
14743: PPUSH
14744: NOP4
14748: PUSH
14749: LD_INT 1
14751: ARRAY
14752: PPUSH
14753: NOP4
14757: PPUSH
14758: NOP4
14762: ST_TO_ADDR
14763: GO 15027
// begin tmp := arr ;
14765: NOP4
14769: PUSH
14770: NOP4
14774: ST_TO_ADDR
// s_arr := [ tmp ] ;
14775: NOP4
14779: PUSH
14780: NOP4
14784: PUSH
14785: EMPTY
14786: LIST
14787: ST_TO_ADDR
// for i = 1 to pos - 1 do
14788: NOP4
14792: PUSH
14793: DOUBLE
14794: LD_INT 1
14796: DEC
14797: ST_TO_ADDR
14798: NOP4
14802: PUSH
14803: LD_INT 1
14805: MINUS
14806: PUSH
14807: FOR_TO
14808: IFFALSE 14853
// begin tmp := tmp [ pos [ i ] ] ;
14810: NOP4
14814: PUSH
14815: NOP4
14819: PUSH
14820: NOP4
14824: PUSH
14825: NOP4
14829: ARRAY
14830: ARRAY
14831: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14832: NOP4
14836: PUSH
14837: NOP4
14841: PUSH
14842: NOP4
14846: PUSH
14847: EMPTY
14848: LIST
14849: ADD
14850: ST_TO_ADDR
// end ;
14851: GO 14807
14853: POP
14854: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14855: NOP4
14859: PUSH
14860: NOP4
14864: PPUSH
14865: NOP4
14869: PUSH
14870: NOP4
14874: ARRAY
14875: PPUSH
14876: NOP4
14880: PPUSH
14881: NOP4
14885: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14886: NOP4
14890: PUSH
14891: NOP4
14895: PPUSH
14896: NOP4
14900: PPUSH
14901: NOP4
14905: PPUSH
14906: NOP4
14910: ST_TO_ADDR
// for i = s_arr downto 2 do
14911: NOP4
14915: PUSH
14916: DOUBLE
14917: NOP4
14921: INC
14922: ST_TO_ADDR
14923: LD_INT 2
14925: PUSH
14926: FOR_DOWNTO
14927: IFFALSE 15011
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14929: NOP4
14933: PUSH
14934: NOP4
14938: PUSH
14939: NOP4
14943: PUSH
14944: LD_INT 1
14946: MINUS
14947: ARRAY
14948: PPUSH
14949: NOP4
14953: PUSH
14954: NOP4
14958: PUSH
14959: LD_INT 1
14961: MINUS
14962: ARRAY
14963: PPUSH
14964: NOP4
14968: PUSH
14969: NOP4
14973: ARRAY
14974: PPUSH
14975: NOP4
14979: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14980: NOP4
14984: PUSH
14985: NOP4
14989: PPUSH
14990: NOP4
14994: PUSH
14995: LD_INT 1
14997: MINUS
14998: PPUSH
14999: NOP4
15003: PPUSH
15004: NOP4
15008: ST_TO_ADDR
// end ;
15009: GO 14926
15011: POP
15012: POP
// result := s_arr [ 1 ] ;
15013: NOP4
15017: PUSH
15018: NOP4
15022: PUSH
15023: LD_INT 1
15025: ARRAY
15026: ST_TO_ADDR
// end ; end ;
15027: LD_VAR 0 4
15031: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15032: LD_INT 0
15034: PPUSH
15035: PPUSH
// if not list then
15036: NOP4
15040: NOT
15041: IFFALSE 15045
// exit ;
15043: GO 15136
// i := list [ pos1 ] ;
15045: NOP4
15049: PUSH
15050: NOP4
15054: PUSH
15055: NOP4
15059: ARRAY
15060: ST_TO_ADDR
// if not i then
15061: NOP4
15065: NOT
15066: IFFALSE 15070
// exit ;
15068: GO 15136
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15070: NOP4
15074: PUSH
15075: NOP4
15079: PPUSH
15080: NOP4
15084: PPUSH
15085: NOP4
15089: PUSH
15090: NOP4
15094: ARRAY
15095: PPUSH
15096: NOP4
15100: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15101: NOP4
15105: PUSH
15106: NOP4
15110: PPUSH
15111: NOP4
15115: PPUSH
15116: NOP4
15120: PPUSH
15121: NOP4
15125: ST_TO_ADDR
// result := list ;
15126: NOP4
15130: PUSH
15131: NOP4
15135: ST_TO_ADDR
// end ;
15136: LD_VAR 0 4
15140: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15141: LD_INT 0
15143: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15144: NOP4
15148: PUSH
15149: NOP4
15153: PPUSH
15154: NOP4
15158: PPUSH
15159: NOP4
15163: PPUSH
15164: NOP4
15168: PPUSH
15169: NOP4
15173: PPUSH
15174: NOP4
15178: PPUSH
15179: NOP4
15183: PPUSH
15184: NOP4
15188: ST_TO_ADDR
// end ;
15189: LD_VAR 0 5
15193: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15194: LD_INT 0
15196: PPUSH
15197: PPUSH
15198: PPUSH
15199: PPUSH
// if not list then
15200: NOP4
15204: NOT
15205: IFFALSE 15209
// exit ;
15207: GO 15597
// result := [ ] ;
15209: NOP4
15213: PUSH
15214: EMPTY
15215: ST_TO_ADDR
// for i in list do
15216: NOP4
15220: PUSH
15221: NOP4
15225: PUSH
15226: FOR_IN
15227: IFFALSE 15429
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15229: NOP4
15233: PUSH
15234: NOP4
15238: PPUSH
15239: NOP4
15243: PPUSH
15244: NOP4
15248: PPUSH
15249: NOP4
15253: ST_TO_ADDR
// if not result then
15254: NOP4
15258: NOT
15259: IFFALSE 15285
// result := [ [ i , tmp ] ] else
15261: NOP4
15265: PUSH
15266: NOP4
15270: PUSH
15271: NOP4
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: ST_TO_ADDR
15283: GO 15427
// begin if result [ result ] [ 2 ] < tmp then
15285: NOP4
15289: PUSH
15290: NOP4
15294: ARRAY
15295: PUSH
15296: LD_INT 2
15298: ARRAY
15299: PUSH
15300: NOP4
15304: LESS
15305: IFFALSE 15347
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15307: NOP4
15311: PUSH
15312: NOP4
15316: PPUSH
15317: NOP4
15321: PUSH
15322: LD_INT 1
15324: PLUS
15325: PPUSH
15326: NOP4
15330: PUSH
15331: NOP4
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PPUSH
15340: NOP4
15344: ST_TO_ADDR
15345: GO 15427
// for j = 1 to result do
15347: NOP4
15351: PUSH
15352: DOUBLE
15353: LD_INT 1
15355: DEC
15356: ST_TO_ADDR
15357: NOP4
15361: PUSH
15362: FOR_TO
15363: IFFALSE 15425
// begin if tmp < result [ j ] [ 2 ] then
15365: NOP4
15369: PUSH
15370: NOP4
15374: PUSH
15375: NOP4
15379: ARRAY
15380: PUSH
15381: LD_INT 2
15383: ARRAY
15384: LESS
15385: IFFALSE 15423
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15387: NOP4
15391: PUSH
15392: NOP4
15396: PPUSH
15397: NOP4
15401: PPUSH
15402: NOP4
15406: PUSH
15407: NOP4
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PPUSH
15416: NOP4
15420: ST_TO_ADDR
// break ;
15421: GO 15425
// end ; end ;
15423: GO 15362
15425: POP
15426: POP
// end ; end ;
15427: GO 15226
15429: POP
15430: POP
// if result and not asc then
15431: NOP4
15435: PUSH
15436: NOP4
15440: NOT
15441: AND
15442: IFFALSE 15517
// begin tmp := result ;
15444: NOP4
15448: PUSH
15449: NOP4
15453: ST_TO_ADDR
// for i = tmp downto 1 do
15454: NOP4
15458: PUSH
15459: DOUBLE
15460: NOP4
15464: INC
15465: ST_TO_ADDR
15466: LD_INT 1
15468: PUSH
15469: FOR_DOWNTO
15470: IFFALSE 15515
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15472: NOP4
15476: PUSH
15477: NOP4
15481: PPUSH
15482: NOP4
15486: PUSH
15487: NOP4
15491: MINUS
15492: PUSH
15493: LD_INT 1
15495: PLUS
15496: PPUSH
15497: NOP4
15501: PUSH
15502: NOP4
15506: ARRAY
15507: PPUSH
15508: NOP4
15512: ST_TO_ADDR
15513: GO 15469
15515: POP
15516: POP
// end ; tmp := [ ] ;
15517: NOP4
15521: PUSH
15522: EMPTY
15523: ST_TO_ADDR
// if mode then
15524: NOP4
15528: IFFALSE 15597
// begin for i = 1 to result do
15530: NOP4
15534: PUSH
15535: DOUBLE
15536: LD_INT 1
15538: DEC
15539: ST_TO_ADDR
15540: NOP4
15544: PUSH
15545: FOR_TO
15546: IFFALSE 15585
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15548: NOP4
15552: PUSH
15553: NOP4
15557: PPUSH
15558: NOP4
15562: PPUSH
15563: NOP4
15567: PUSH
15568: NOP4
15572: ARRAY
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: PPUSH
15578: NOP4
15582: ST_TO_ADDR
15583: GO 15545
15585: POP
15586: POP
// result := tmp ;
15587: NOP4
15591: PUSH
15592: NOP4
15596: ST_TO_ADDR
// end ; end ;
15597: LD_VAR 0 6
15601: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15602: LD_INT 0
15604: PPUSH
15605: PPUSH
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15610: NOP4
15614: PUSH
15615: LD_INT 0
15617: PUSH
15618: LD_INT 0
15620: PUSH
15621: LD_INT 0
15623: PUSH
15624: EMPTY
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: ST_TO_ADDR
// if not x or not y then
15632: NOP4
15636: NOT
15637: PUSH
15638: NOP4
15642: NOT
15643: OR
15644: IFFALSE 15648
// exit ;
15646: GO 17294
// if not range then
15648: NOP4
15652: NOT
15653: IFFALSE 15663
// range := 10 ;
15655: NOP4
15659: PUSH
15660: LD_INT 10
15662: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15663: NOP4
15667: PUSH
15668: LD_INT 81
15670: PUSH
15671: NOP4
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 92
15682: PUSH
15683: NOP4
15687: PUSH
15688: NOP4
15692: PUSH
15693: NOP4
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 3
15706: PUSH
15707: LD_INT 21
15709: PUSH
15710: LD_INT 3
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: LIST
15725: PPUSH
15726: NOP4
15730: ST_TO_ADDR
// if not tmp then
15731: NOP4
15735: NOT
15736: IFFALSE 15740
// exit ;
15738: GO 17294
// for i in tmp do
15740: NOP4
15744: PUSH
15745: NOP4
15749: PUSH
15750: FOR_IN
15751: IFFALSE 17269
// begin points := [ 0 , 0 , 0 ] ;
15753: NOP4
15757: PUSH
15758: LD_INT 0
15760: PUSH
15761: LD_INT 0
15763: PUSH
15764: LD_INT 0
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: LIST
15771: ST_TO_ADDR
// bpoints := 1 ;
15772: NOP4
15776: PUSH
15777: LD_INT 1
15779: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15780: NOP4
15784: PPUSH
15785: NOP4
15789: PUSH
15790: LD_INT 1
15792: DOUBLE
15793: EQUAL
15794: IFTRUE 15798
15796: GO 16376
15798: POP
// begin if GetClass ( i ) = 1 then
15799: NOP4
15803: PPUSH
15804: NOP4
15808: PUSH
15809: LD_INT 1
15811: EQUAL
15812: IFFALSE 15833
// points := [ 10 , 5 , 3 ] ;
15814: NOP4
15818: PUSH
15819: LD_INT 10
15821: PUSH
15822: LD_INT 5
15824: PUSH
15825: LD_INT 3
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: LIST
15832: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15833: NOP4
15837: PPUSH
15838: NOP4
15842: PUSH
15843: LD_INT 2
15845: PUSH
15846: LD_INT 3
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: LIST
15856: IN
15857: IFFALSE 15878
// points := [ 3 , 2 , 1 ] ;
15859: NOP4
15863: PUSH
15864: LD_INT 3
15866: PUSH
15867: LD_INT 2
15869: PUSH
15870: LD_INT 1
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: LIST
15877: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15878: NOP4
15882: PPUSH
15883: NOP4
15887: PUSH
15888: LD_INT 5
15890: EQUAL
15891: IFFALSE 15912
// points := [ 130 , 5 , 2 ] ;
15893: NOP4
15897: PUSH
15898: LD_INT 130
15900: PUSH
15901: LD_INT 5
15903: PUSH
15904: LD_INT 2
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: LIST
15911: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15912: NOP4
15916: PPUSH
15917: NOP4
15921: PUSH
15922: LD_INT 8
15924: EQUAL
15925: IFFALSE 15946
// points := [ 35 , 35 , 30 ] ;
15927: NOP4
15931: PUSH
15932: LD_INT 35
15934: PUSH
15935: LD_INT 35
15937: PUSH
15938: LD_INT 30
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: LIST
15945: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15946: NOP4
15950: PPUSH
15951: NOP4
15955: PUSH
15956: LD_INT 9
15958: EQUAL
15959: IFFALSE 15980
// points := [ 20 , 55 , 40 ] ;
15961: NOP4
15965: PUSH
15966: LD_INT 20
15968: PUSH
15969: LD_INT 55
15971: PUSH
15972: LD_INT 40
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: LIST
15979: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15980: NOP4
15984: PPUSH
15985: NOP4
15989: PUSH
15990: LD_INT 12
15992: PUSH
15993: LD_INT 16
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: IN
16000: IFFALSE 16021
// points := [ 5 , 3 , 2 ] ;
16002: NOP4
16006: PUSH
16007: LD_INT 5
16009: PUSH
16010: LD_INT 3
16012: PUSH
16013: LD_INT 2
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: LIST
16020: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16021: NOP4
16025: PPUSH
16026: NOP4
16030: PUSH
16031: LD_INT 17
16033: EQUAL
16034: IFFALSE 16055
// points := [ 100 , 50 , 75 ] ;
16036: NOP4
16040: PUSH
16041: LD_INT 100
16043: PUSH
16044: LD_INT 50
16046: PUSH
16047: LD_INT 75
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: LIST
16054: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16055: NOP4
16059: PPUSH
16060: NOP4
16064: PUSH
16065: LD_INT 15
16067: EQUAL
16068: IFFALSE 16089
// points := [ 10 , 5 , 3 ] ;
16070: NOP4
16074: PUSH
16075: LD_INT 10
16077: PUSH
16078: LD_INT 5
16080: PUSH
16081: LD_INT 3
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: LIST
16088: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16089: NOP4
16093: PPUSH
16094: NOP4
16098: PUSH
16099: LD_INT 14
16101: EQUAL
16102: IFFALSE 16123
// points := [ 10 , 0 , 0 ] ;
16104: NOP4
16108: PUSH
16109: LD_INT 10
16111: PUSH
16112: LD_INT 0
16114: PUSH
16115: LD_INT 0
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: LIST
16122: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16123: NOP4
16127: PPUSH
16128: NOP4
16132: PUSH
16133: LD_INT 11
16135: EQUAL
16136: IFFALSE 16157
// points := [ 30 , 10 , 5 ] ;
16138: NOP4
16142: PUSH
16143: LD_INT 30
16145: PUSH
16146: LD_INT 10
16148: PUSH
16149: LD_INT 5
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: LIST
16156: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16157: NOP4
16161: PPUSH
16162: LD_INT 5
16164: PPUSH
16165: NOP4
16169: PUSH
16170: LD_INT 2
16172: EQUAL
16173: IFFALSE 16190
// bpoints := bpoints * 1.8 ;
16175: NOP4
16179: PUSH
16180: NOP4
16184: PUSH
16185: LD_REAL  1.80000000000000E+0000
16188: MUL
16189: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16190: NOP4
16194: PPUSH
16195: NOP4
16199: PUSH
16200: LD_INT 1
16202: PUSH
16203: LD_INT 2
16205: PUSH
16206: LD_INT 3
16208: PUSH
16209: LD_INT 4
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: IN
16218: PUSH
16219: NOP4
16223: PPUSH
16224: LD_INT 51
16226: PPUSH
16227: NOP4
16231: PUSH
16232: LD_INT 2
16234: EQUAL
16235: AND
16236: IFFALSE 16253
// bpoints := bpoints * 1.2 ;
16238: NOP4
16242: PUSH
16243: NOP4
16247: PUSH
16248: LD_REAL  1.20000000000000E+0000
16251: MUL
16252: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16253: NOP4
16257: PPUSH
16258: NOP4
16262: PUSH
16263: LD_INT 5
16265: PUSH
16266: LD_INT 7
16268: PUSH
16269: LD_INT 9
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: LIST
16276: IN
16277: PUSH
16278: NOP4
16282: PPUSH
16283: LD_INT 52
16285: PPUSH
16286: NOP4
16290: PUSH
16291: LD_INT 2
16293: EQUAL
16294: AND
16295: IFFALSE 16312
// bpoints := bpoints * 1.5 ;
16297: NOP4
16301: PUSH
16302: NOP4
16306: PUSH
16307: LD_REAL  1.50000000000000E+0000
16310: MUL
16311: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16312: NOP4
16316: PPUSH
16317: LD_INT 66
16319: PPUSH
16320: NOP4
16324: PUSH
16325: LD_INT 2
16327: EQUAL
16328: IFFALSE 16345
// bpoints := bpoints * 1.1 ;
16330: NOP4
16334: PUSH
16335: NOP4
16339: PUSH
16340: LD_REAL  1.10000000000000E+0000
16343: MUL
16344: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16345: NOP4
16349: PUSH
16350: NOP4
16354: PUSH
16355: NOP4
16359: PPUSH
16360: LD_INT 1
16362: PPUSH
16363: NOP4
16367: PUSH
16368: LD_REAL  1.15000000000000E+0000
16371: MUL
16372: MUL
16373: ST_TO_ADDR
// end ; unit_vehicle :
16374: GO 17198
16376: LD_INT 2
16378: DOUBLE
16379: EQUAL
16380: IFTRUE 16384
16382: GO 17186
16384: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16385: NOP4
16389: PPUSH
16390: NOP4
16394: PUSH
16395: LD_INT 2
16397: PUSH
16398: LD_INT 42
16400: PUSH
16401: LD_INT 24
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: LIST
16408: IN
16409: IFFALSE 16430
// points := [ 25 , 5 , 3 ] ;
16411: NOP4
16415: PUSH
16416: LD_INT 25
16418: PUSH
16419: LD_INT 5
16421: PUSH
16422: LD_INT 3
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: LIST
16429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16430: NOP4
16434: PPUSH
16435: NOP4
16439: PUSH
16440: LD_INT 4
16442: PUSH
16443: LD_INT 43
16445: PUSH
16446: LD_INT 25
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: LIST
16453: IN
16454: IFFALSE 16475
// points := [ 40 , 15 , 5 ] ;
16456: NOP4
16460: PUSH
16461: LD_INT 40
16463: PUSH
16464: LD_INT 15
16466: PUSH
16467: LD_INT 5
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: LIST
16474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16475: NOP4
16479: PPUSH
16480: NOP4
16484: PUSH
16485: LD_INT 3
16487: PUSH
16488: LD_INT 23
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: IN
16495: IFFALSE 16516
// points := [ 7 , 25 , 8 ] ;
16497: NOP4
16501: PUSH
16502: LD_INT 7
16504: PUSH
16505: LD_INT 25
16507: PUSH
16508: LD_INT 8
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: LIST
16515: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16516: NOP4
16520: PPUSH
16521: NOP4
16525: PUSH
16526: LD_INT 5
16528: PUSH
16529: LD_INT 27
16531: PUSH
16532: LD_INT 44
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: IN
16540: IFFALSE 16561
// points := [ 14 , 50 , 16 ] ;
16542: NOP4
16546: PUSH
16547: LD_INT 14
16549: PUSH
16550: LD_INT 50
16552: PUSH
16553: LD_INT 16
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16561: NOP4
16565: PPUSH
16566: NOP4
16570: PUSH
16571: LD_INT 6
16573: PUSH
16574: LD_INT 46
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: IN
16581: IFFALSE 16602
// points := [ 32 , 120 , 70 ] ;
16583: NOP4
16587: PUSH
16588: LD_INT 32
16590: PUSH
16591: LD_INT 120
16593: PUSH
16594: LD_INT 70
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
16602: NOP4
16606: PPUSH
16607: NOP4
16611: PUSH
16612: LD_INT 7
16614: PUSH
16615: LD_INT 28
16617: PUSH
16618: LD_INT 45
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: LIST
16625: IN
16626: IFFALSE 16647
// points := [ 35 , 20 , 45 ] ;
16628: NOP4
16632: PUSH
16633: LD_INT 35
16635: PUSH
16636: LD_INT 20
16638: PUSH
16639: LD_INT 45
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16647: NOP4
16651: PPUSH
16652: NOP4
16656: PUSH
16657: LD_INT 47
16659: PUSH
16660: EMPTY
16661: LIST
16662: IN
16663: IFFALSE 16684
// points := [ 67 , 45 , 75 ] ;
16665: NOP4
16669: PUSH
16670: LD_INT 67
16672: PUSH
16673: LD_INT 45
16675: PUSH
16676: LD_INT 75
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: LIST
16683: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16684: NOP4
16688: PPUSH
16689: NOP4
16693: PUSH
16694: LD_INT 26
16696: PUSH
16697: EMPTY
16698: LIST
16699: IN
16700: IFFALSE 16721
// points := [ 120 , 30 , 80 ] ;
16702: NOP4
16706: PUSH
16707: LD_INT 120
16709: PUSH
16710: LD_INT 30
16712: PUSH
16713: LD_INT 80
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: LIST
16720: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16721: NOP4
16725: PPUSH
16726: NOP4
16730: PUSH
16731: LD_INT 22
16733: PUSH
16734: EMPTY
16735: LIST
16736: IN
16737: IFFALSE 16758
// points := [ 40 , 1 , 1 ] ;
16739: NOP4
16743: PUSH
16744: LD_INT 40
16746: PUSH
16747: LD_INT 1
16749: PUSH
16750: LD_INT 1
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: LIST
16757: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16758: NOP4
16762: PPUSH
16763: NOP4
16767: PUSH
16768: LD_INT 29
16770: PUSH
16771: EMPTY
16772: LIST
16773: IN
16774: IFFALSE 16795
// points := [ 70 , 200 , 400 ] ;
16776: NOP4
16780: PUSH
16781: LD_INT 70
16783: PUSH
16784: LD_INT 200
16786: PUSH
16787: LD_INT 400
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: LIST
16794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16795: NOP4
16799: PPUSH
16800: NOP4
16804: PUSH
16805: LD_INT 14
16807: PUSH
16808: LD_INT 53
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: IN
16815: IFFALSE 16836
// points := [ 40 , 10 , 20 ] ;
16817: NOP4
16821: PUSH
16822: LD_INT 40
16824: PUSH
16825: LD_INT 10
16827: PUSH
16828: LD_INT 20
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: LIST
16835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16836: NOP4
16840: PPUSH
16841: NOP4
16845: PUSH
16846: LD_INT 9
16848: PUSH
16849: EMPTY
16850: LIST
16851: IN
16852: IFFALSE 16873
// points := [ 5 , 70 , 20 ] ;
16854: NOP4
16858: PUSH
16859: LD_INT 5
16861: PUSH
16862: LD_INT 70
16864: PUSH
16865: LD_INT 20
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: LIST
16872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16873: NOP4
16877: PPUSH
16878: NOP4
16882: PUSH
16883: LD_INT 10
16885: PUSH
16886: EMPTY
16887: LIST
16888: IN
16889: IFFALSE 16910
// points := [ 35 , 110 , 70 ] ;
16891: NOP4
16895: PUSH
16896: LD_INT 35
16898: PUSH
16899: LD_INT 110
16901: PUSH
16902: LD_INT 70
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: LIST
16909: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16910: NOP4
16914: PPUSH
16915: NOP4
16919: PUSH
16920: LD_INT 25
16922: EQUAL
16923: IFFALSE 16944
// points := [ 80 , 65 , 100 ] ;
16925: NOP4
16929: PUSH
16930: LD_INT 80
16932: PUSH
16933: LD_INT 65
16935: PUSH
16936: LD_INT 100
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: LIST
16943: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16944: NOP4
16948: PPUSH
16949: NOP4
16953: PUSH
16954: LD_INT 1
16956: EQUAL
16957: IFFALSE 16992
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16959: NOP4
16963: PUSH
16964: NOP4
16968: PUSH
16969: NOP4
16973: PPUSH
16974: NOP4
16978: PPUSH
16979: LD_INT 3
16981: PPUSH
16982: NOP4
16986: PUSH
16987: LD_INT 4
16989: MUL
16990: MUL
16991: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16992: NOP4
16996: PPUSH
16997: NOP4
17001: PUSH
17002: LD_INT 2
17004: EQUAL
17005: IFFALSE 17056
// begin j := IsControledBy ( i ) ;
17007: NOP4
17011: PUSH
17012: NOP4
17016: PPUSH
17017: NOP4
17021: ST_TO_ADDR
// if j then
17022: NOP4
17026: IFFALSE 17056
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17028: NOP4
17032: PUSH
17033: NOP4
17037: PUSH
17038: NOP4
17042: PPUSH
17043: LD_INT 3
17045: PPUSH
17046: NOP4
17050: PUSH
17051: LD_INT 3
17053: MUL
17054: MUL
17055: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17056: NOP4
17060: PPUSH
17061: NOP4
17065: PUSH
17066: LD_INT 5
17068: PUSH
17069: LD_INT 6
17071: PUSH
17072: LD_INT 46
17074: PUSH
17075: LD_INT 44
17077: PUSH
17078: LD_INT 47
17080: PUSH
17081: LD_INT 45
17083: PUSH
17084: LD_INT 28
17086: PUSH
17087: LD_INT 7
17089: PUSH
17090: LD_INT 27
17092: PUSH
17093: LD_INT 29
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: IN
17108: PUSH
17109: NOP4
17113: PPUSH
17114: LD_INT 52
17116: PPUSH
17117: NOP4
17121: PUSH
17122: LD_INT 2
17124: EQUAL
17125: AND
17126: IFFALSE 17143
// bpoints := bpoints * 1.2 ;
17128: NOP4
17132: PUSH
17133: NOP4
17137: PUSH
17138: LD_REAL  1.20000000000000E+0000
17141: MUL
17142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17143: NOP4
17147: PPUSH
17148: NOP4
17152: PUSH
17153: LD_INT 6
17155: PUSH
17156: LD_INT 46
17158: PUSH
17159: LD_INT 47
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: LIST
17166: IN
17167: IFFALSE 17184
// bpoints := bpoints * 1.2 ;
17169: NOP4
17173: PUSH
17174: NOP4
17178: PUSH
17179: LD_REAL  1.20000000000000E+0000
17182: MUL
17183: ST_TO_ADDR
// end ; unit_building :
17184: GO 17198
17186: LD_INT 3
17188: DOUBLE
17189: EQUAL
17190: IFTRUE 17194
17192: GO 17197
17194: POP
// ; end ;
17195: GO 17198
17197: POP
// for j = 1 to 3 do
17198: NOP4
17202: PUSH
17203: DOUBLE
17204: LD_INT 1
17206: DEC
17207: ST_TO_ADDR
17208: LD_INT 3
17210: PUSH
17211: FOR_TO
17212: IFFALSE 17265
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17214: NOP4
17218: PUSH
17219: NOP4
17223: PPUSH
17224: NOP4
17228: PPUSH
17229: NOP4
17233: PUSH
17234: NOP4
17238: ARRAY
17239: PUSH
17240: NOP4
17244: PUSH
17245: NOP4
17249: ARRAY
17250: PUSH
17251: NOP4
17255: MUL
17256: PLUS
17257: PPUSH
17258: NOP4
17262: ST_TO_ADDR
17263: GO 17211
17265: POP
17266: POP
// end ;
17267: GO 15750
17269: POP
17270: POP
// result := Replace ( result , 4 , tmp ) ;
17271: NOP4
17275: PUSH
17276: NOP4
17280: PPUSH
17281: LD_INT 4
17283: PPUSH
17284: NOP4
17288: PPUSH
17289: NOP4
17293: ST_TO_ADDR
// end ;
17294: LD_VAR 0 5
17298: RET
// export function DangerAtRange ( unit , range ) ; begin
17299: LD_INT 0
17301: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17302: NOP4
17306: PUSH
17307: NOP4
17311: PPUSH
17312: NOP4
17316: PPUSH
17317: NOP4
17321: PPUSH
17322: NOP4
17326: PPUSH
17327: NOP4
17331: PPUSH
17332: NOP4
17336: PPUSH
17337: NOP4
17341: PPUSH
17342: NOP4
17346: ST_TO_ADDR
// end ;
17347: LD_VAR 0 3
17351: RET
// export function DangerInArea ( side , area ) ; begin
17352: LD_INT 0
17354: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17355: NOP4
17359: PUSH
17360: NOP4
17364: PPUSH
17365: LD_INT 81
17367: PUSH
17368: NOP4
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PPUSH
17377: NOP4
17381: ST_TO_ADDR
// end ;
17382: LD_VAR 0 3
17386: RET
// export function IsExtension ( b ) ; begin
17387: LD_INT 0
17389: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17390: NOP4
17394: PUSH
17395: NOP4
17399: PUSH
17400: LD_INT 23
17402: PUSH
17403: LD_INT 20
17405: PUSH
17406: LD_INT 22
17408: PUSH
17409: LD_INT 17
17411: PUSH
17412: LD_INT 24
17414: PUSH
17415: LD_INT 21
17417: PUSH
17418: LD_INT 19
17420: PUSH
17421: LD_INT 16
17423: PUSH
17424: LD_INT 25
17426: PUSH
17427: LD_INT 18
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: IN
17442: ST_TO_ADDR
// end ;
17443: LD_VAR 0 2
17447: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
17448: LD_INT 0
17450: PPUSH
17451: PPUSH
17452: PPUSH
// result := [ ] ;
17453: NOP4
17457: PUSH
17458: EMPTY
17459: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17460: NOP4
17464: PUSH
17465: NOP4
17469: PPUSH
17470: LD_INT 21
17472: PUSH
17473: LD_INT 3
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PPUSH
17480: NOP4
17484: ST_TO_ADDR
// if not tmp then
17485: NOP4
17489: NOT
17490: IFFALSE 17494
// exit ;
17492: GO 17552
// for i in tmp do
17494: NOP4
17498: PUSH
17499: NOP4
17503: PUSH
17504: FOR_IN
17505: IFFALSE 17540
// if GetBase ( i ) <> base then
17507: NOP4
17511: PPUSH
17512: NOP4
17516: PUSH
17517: NOP4
17521: NONEQUAL
17522: IFFALSE 17538
// ComLinkToBase ( base , i ) ;
17524: NOP4
17528: PPUSH
17529: NOP4
17533: PPUSH
17534: NOP4
17538: GO 17504
17540: POP
17541: POP
// result := tmp ;
17542: NOP4
17546: PUSH
17547: NOP4
17551: ST_TO_ADDR
// end ;
17552: LD_VAR 0 3
17556: RET
// export function ComComplete ( unit , b ) ; var i ; begin
17557: LD_INT 0
17559: PPUSH
17560: PPUSH
// if BuildingStatus ( b ) = bs_build then
17561: NOP4
17565: PPUSH
17566: NOP4
17570: PUSH
17571: LD_INT 1
17573: EQUAL
17574: IFFALSE 17634
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17576: NOP4
17580: PPUSH
17581: LD_STRING h
17583: PUSH
17584: NOP4
17588: PPUSH
17589: NOP4
17593: PUSH
17594: NOP4
17598: PPUSH
17599: NOP4
17603: PUSH
17604: NOP4
17608: PUSH
17609: LD_INT 0
17611: PUSH
17612: LD_INT 0
17614: PUSH
17615: LD_INT 0
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: PUSH
17627: EMPTY
17628: LIST
17629: PPUSH
17630: NOP4
// end ;
17634: LD_VAR 0 3
17638: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17639: LD_INT 0
17641: PPUSH
17642: PPUSH
17643: PPUSH
17644: PPUSH
17645: PPUSH
17646: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
17647: NOP4
17651: NOT
17652: PUSH
17653: NOP4
17657: PPUSH
17658: NOP4
17662: PUSH
17663: LD_INT 2
17665: EQUAL
17666: NOT
17667: OR
17668: IFFALSE 17672
// exit ;
17670: GO 17988
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17672: NOP4
17676: PUSH
17677: LD_INT 22
17679: PUSH
17680: NOP4
17684: PPUSH
17685: NOP4
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 2
17696: PUSH
17697: LD_INT 30
17699: PUSH
17700: LD_INT 36
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 34
17709: PUSH
17710: LD_INT 31
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PPUSH
17726: NOP4
17730: ST_TO_ADDR
// if not tmp then
17731: NOP4
17735: NOT
17736: IFFALSE 17740
// exit ;
17738: GO 17988
// result := [ ] ;
17740: NOP4
17744: PUSH
17745: EMPTY
17746: ST_TO_ADDR
// for i in tmp do
17747: NOP4
17751: PUSH
17752: NOP4
17756: PUSH
17757: FOR_IN
17758: IFFALSE 17829
// begin t := UnitsInside ( i ) ;
17760: NOP4
17764: PUSH
17765: NOP4
17769: PPUSH
17770: NOP4
17774: ST_TO_ADDR
// if t then
17775: NOP4
17779: IFFALSE 17827
// for j in t do
17781: NOP4
17785: PUSH
17786: NOP4
17790: PUSH
17791: FOR_IN
17792: IFFALSE 17825
// result := Insert ( result , result + 1 , j ) ;
17794: NOP4
17798: PUSH
17799: NOP4
17803: PPUSH
17804: NOP4
17808: PUSH
17809: LD_INT 1
17811: PLUS
17812: PPUSH
17813: NOP4
17817: PPUSH
17818: NOP4
17822: ST_TO_ADDR
17823: GO 17791
17825: POP
17826: POP
// end ;
17827: GO 17757
17829: POP
17830: POP
// if not result then
17831: NOP4
17835: NOT
17836: IFFALSE 17840
// exit ;
17838: GO 17988
// mech := result [ 1 ] ;
17840: NOP4
17844: PUSH
17845: NOP4
17849: PUSH
17850: LD_INT 1
17852: ARRAY
17853: ST_TO_ADDR
// if result > 1 then
17854: NOP4
17858: PUSH
17859: LD_INT 1
17861: GREATER
17862: IFFALSE 17974
// for i = 2 to result do
17864: NOP4
17868: PUSH
17869: DOUBLE
17870: LD_INT 2
17872: DEC
17873: ST_TO_ADDR
17874: NOP4
17878: PUSH
17879: FOR_TO
17880: IFFALSE 17972
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17882: NOP4
17886: PUSH
17887: NOP4
17891: PUSH
17892: NOP4
17896: ARRAY
17897: PPUSH
17898: LD_INT 3
17900: PPUSH
17901: NOP4
17905: PUSH
17906: NOP4
17910: PUSH
17911: NOP4
17915: ARRAY
17916: PPUSH
17917: NOP4
17921: MINUS
17922: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17923: NOP4
17927: PUSH
17928: NOP4
17932: PPUSH
17933: LD_INT 3
17935: PPUSH
17936: NOP4
17940: PUSH
17941: NOP4
17945: PPUSH
17946: NOP4
17950: MINUS
17951: GREATEREQUAL
17952: IFFALSE 17970
// mech := result [ i ] ;
17954: NOP4
17958: PUSH
17959: NOP4
17963: PUSH
17964: NOP4
17968: ARRAY
17969: ST_TO_ADDR
// end ;
17970: GO 17879
17972: POP
17973: POP
// ComLinkTo ( vehicle , mech ) ;
17974: NOP4
17978: PPUSH
17979: NOP4
17983: PPUSH
17984: NOP4
// end ;
17988: LD_VAR 0 2
17992: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17993: LD_INT 0
17995: PPUSH
17996: PPUSH
17997: PPUSH
17998: PPUSH
17999: PPUSH
18000: PPUSH
18001: PPUSH
18002: PPUSH
18003: PPUSH
18004: PPUSH
18005: PPUSH
18006: PPUSH
18007: PPUSH
// result := [ ] ;
18008: NOP4
18012: PUSH
18013: EMPTY
18014: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18015: NOP4
18019: PPUSH
18020: NOP4
18024: PUSH
18025: LD_INT 0
18027: PUSH
18028: LD_INT 1
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: IN
18035: NOT
18036: IFFALSE 18040
// exit ;
18038: GO 19671
// if name then
18040: NOP4
18044: IFFALSE 18060
// SetBName ( base_dep , name ) ;
18046: NOP4
18050: PPUSH
18051: NOP4
18055: PPUSH
18056: NOP4
// base := GetBase ( base_dep ) ;
18060: NOP4
18064: PUSH
18065: NOP4
18069: PPUSH
18070: NOP4
18074: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18075: NOP4
18079: PUSH
18080: NOP4
18084: PPUSH
18085: NOP4
18089: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18090: NOP4
18094: PUSH
18095: NOP4
18099: PPUSH
18100: NOP4
18104: ST_TO_ADDR
// if sources then
18105: NOP4
18109: IFFALSE 18156
// for i = 1 to 3 do
18111: NOP4
18115: PUSH
18116: DOUBLE
18117: LD_INT 1
18119: DEC
18120: ST_TO_ADDR
18121: LD_INT 3
18123: PUSH
18124: FOR_TO
18125: IFFALSE 18154
// AddResourceType ( base , i , sources [ i ] ) ;
18127: NOP4
18131: PPUSH
18132: NOP4
18136: PPUSH
18137: NOP4
18141: PUSH
18142: NOP4
18146: ARRAY
18147: PPUSH
18148: NOP4
18152: GO 18124
18154: POP
18155: POP
// buildings := GetBaseBuildings ( base , area ) ;
18156: NOP4
18160: PUSH
18161: NOP4
18165: PPUSH
18166: NOP4
18170: PPUSH
18171: NOP4
18175: ST_TO_ADDR
// InitHc ;
18176: NOP4
// InitUc ;
18180: NOP4
// uc_side := side ;
18184: LD_ADDR_OWVAR 20
18188: PUSH
18189: NOP4
18193: ST_TO_ADDR
// uc_nation := nation ;
18194: LD_ADDR_OWVAR 21
18198: PUSH
18199: NOP4
18203: ST_TO_ADDR
// if buildings then
18204: NOP4
18208: IFFALSE 19530
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18210: NOP4
18214: PUSH
18215: NOP4
18219: PPUSH
18220: LD_INT 2
18222: PUSH
18223: LD_INT 30
18225: PUSH
18226: LD_INT 29
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 30
18235: PUSH
18236: LD_INT 30
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: PPUSH
18248: NOP4
18252: ST_TO_ADDR
// if tmp then
18253: NOP4
18257: IFFALSE 18305
// for i in tmp do
18259: NOP4
18263: PUSH
18264: NOP4
18268: PUSH
18269: FOR_IN
18270: IFFALSE 18303
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18272: NOP4
18276: PPUSH
18277: NOP4
18281: PPUSH
18282: NOP4
18286: PPUSH
18287: NOP4
18291: PPUSH
18292: NOP4
18296: PPUSH
18297: NOP4
18301: GO 18269
18303: POP
18304: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18305: NOP4
18309: PPUSH
18310: LD_INT 2
18312: PUSH
18313: LD_INT 30
18315: PUSH
18316: LD_INT 32
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 30
18325: PUSH
18326: LD_INT 33
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: PPUSH
18338: NOP4
18342: IFFALSE 18430
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18344: NOP4
18348: PUSH
18349: NOP4
18353: PPUSH
18354: LD_INT 2
18356: PUSH
18357: LD_INT 30
18359: PUSH
18360: LD_INT 32
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 30
18369: PUSH
18370: LD_INT 33
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: LIST
18381: PPUSH
18382: NOP4
18386: PUSH
18387: FOR_IN
18388: IFFALSE 18428
// begin if not GetBWeapon ( i ) then
18390: NOP4
18394: PPUSH
18395: NOP4
18399: NOT
18400: IFFALSE 18426
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18402: NOP4
18406: PPUSH
18407: NOP4
18411: PPUSH
18412: NOP4
18416: PPUSH
18417: NOP4
18421: PPUSH
18422: NOP4
// end ;
18426: GO 18387
18428: POP
18429: POP
// end ; for i = 1 to personel do
18430: NOP4
18434: PUSH
18435: DOUBLE
18436: LD_INT 1
18438: DEC
18439: ST_TO_ADDR
18440: NOP4
18444: PUSH
18445: FOR_TO
18446: IFFALSE 19510
// begin if i > 4 then
18448: NOP4
18452: PUSH
18453: LD_INT 4
18455: GREATER
18456: IFFALSE 18460
// break ;
18458: GO 19510
// case i of 1 :
18460: NOP4
18464: PUSH
18465: LD_INT 1
18467: DOUBLE
18468: EQUAL
18469: IFTRUE 18473
18471: GO 18553
18473: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18474: NOP4
18478: PUSH
18479: NOP4
18483: PPUSH
18484: LD_INT 22
18486: PUSH
18487: NOP4
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 58
18498: PUSH
18499: EMPTY
18500: LIST
18501: PUSH
18502: LD_INT 2
18504: PUSH
18505: LD_INT 30
18507: PUSH
18508: LD_INT 32
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 30
18517: PUSH
18518: LD_INT 4
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 30
18527: PUSH
18528: LD_INT 5
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: LIST
18545: PPUSH
18546: NOP4
18550: ST_TO_ADDR
18551: GO 18775
18553: LD_INT 2
18555: DOUBLE
18556: EQUAL
18557: IFTRUE 18561
18559: GO 18623
18561: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18562: NOP4
18566: PUSH
18567: NOP4
18571: PPUSH
18572: LD_INT 22
18574: PUSH
18575: NOP4
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 2
18586: PUSH
18587: LD_INT 30
18589: PUSH
18590: LD_INT 0
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 30
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: LIST
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PPUSH
18616: NOP4
18620: ST_TO_ADDR
18621: GO 18775
18623: LD_INT 3
18625: DOUBLE
18626: EQUAL
18627: IFTRUE 18631
18629: GO 18693
18631: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18632: NOP4
18636: PUSH
18637: NOP4
18641: PPUSH
18642: LD_INT 22
18644: PUSH
18645: NOP4
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 2
18656: PUSH
18657: LD_INT 30
18659: PUSH
18660: LD_INT 2
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 30
18669: PUSH
18670: LD_INT 3
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PPUSH
18686: NOP4
18690: ST_TO_ADDR
18691: GO 18775
18693: LD_INT 4
18695: DOUBLE
18696: EQUAL
18697: IFTRUE 18701
18699: GO 18774
18701: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18702: NOP4
18706: PUSH
18707: NOP4
18711: PPUSH
18712: LD_INT 22
18714: PUSH
18715: NOP4
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: LD_INT 30
18729: PUSH
18730: LD_INT 6
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 30
18739: PUSH
18740: LD_INT 7
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 30
18749: PUSH
18750: LD_INT 8
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PPUSH
18767: NOP4
18771: ST_TO_ADDR
18772: GO 18775
18774: POP
// if i = 1 then
18775: NOP4
18779: PUSH
18780: LD_INT 1
18782: EQUAL
18783: IFFALSE 18894
// begin tmp := [ ] ;
18785: NOP4
18789: PUSH
18790: EMPTY
18791: ST_TO_ADDR
// for j in f do
18792: NOP4
18796: PUSH
18797: NOP4
18801: PUSH
18802: FOR_IN
18803: IFFALSE 18876
// if GetBType ( j ) = b_bunker then
18805: NOP4
18809: PPUSH
18810: NOP4
18814: PUSH
18815: LD_INT 32
18817: EQUAL
18818: IFFALSE 18845
// tmp := Insert ( tmp , 1 , j ) else
18820: NOP4
18824: PUSH
18825: NOP4
18829: PPUSH
18830: LD_INT 1
18832: PPUSH
18833: NOP4
18837: PPUSH
18838: NOP4
18842: ST_TO_ADDR
18843: GO 18874
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18845: NOP4
18849: PUSH
18850: NOP4
18854: PPUSH
18855: NOP4
18859: PUSH
18860: LD_INT 1
18862: PLUS
18863: PPUSH
18864: NOP4
18868: PPUSH
18869: NOP4
18873: ST_TO_ADDR
18874: GO 18802
18876: POP
18877: POP
// if tmp then
18878: NOP4
18882: IFFALSE 18894
// f := tmp ;
18884: NOP4
18888: PUSH
18889: NOP4
18893: ST_TO_ADDR
// end ; x := personel [ i ] ;
18894: NOP4
18898: PUSH
18899: NOP4
18903: PUSH
18904: NOP4
18908: ARRAY
18909: ST_TO_ADDR
// if x = - 1 then
18910: NOP4
18914: PUSH
18915: LD_INT 1
18917: NEG
18918: EQUAL
18919: IFFALSE 19128
// begin for j in f do
18921: NOP4
18925: PUSH
18926: NOP4
18930: PUSH
18931: FOR_IN
18932: IFFALSE 19124
// repeat InitHc ;
18934: NOP4
// if GetBType ( j ) = b_barracks then
18938: NOP4
18942: PPUSH
18943: NOP4
18947: PUSH
18948: LD_INT 5
18950: EQUAL
18951: IFFALSE 19021
// begin if UnitsInside ( j ) < 3 then
18953: NOP4
18957: PPUSH
18958: NOP4
18962: PUSH
18963: LD_INT 3
18965: LESS
18966: IFFALSE 19002
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18968: LD_INT 0
18970: PPUSH
18971: LD_INT 5
18973: PUSH
18974: LD_INT 8
18976: PUSH
18977: LD_INT 9
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: LIST
18984: PUSH
18985: NOP4
18989: ARRAY
18990: PPUSH
18991: NOP4
18995: PPUSH
18996: NOP4
19000: GO 19019
// PrepareHuman ( false , i , skill ) ;
19002: LD_INT 0
19004: PPUSH
19005: NOP4
19009: PPUSH
19010: NOP4
19014: PPUSH
19015: NOP4
// end else
19019: GO 19038
// PrepareHuman ( false , i , skill ) ;
19021: LD_INT 0
19023: PPUSH
19024: NOP4
19028: PPUSH
19029: NOP4
19033: PPUSH
19034: NOP4
// un := CreateHuman ;
19038: NOP4
19042: PUSH
19043: NOP4
19047: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19048: NOP4
19052: PUSH
19053: NOP4
19057: PPUSH
19058: LD_INT 1
19060: PPUSH
19061: NOP4
19065: PPUSH
19066: NOP4
19070: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19071: NOP4
19075: PPUSH
19076: NOP4
19080: PPUSH
19081: NOP4
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19085: NOP4
19089: PPUSH
19090: NOP4
19094: PUSH
19095: LD_INT 6
19097: EQUAL
19098: PUSH
19099: NOP4
19103: PPUSH
19104: NOP4
19108: PUSH
19109: LD_INT 32
19111: PUSH
19112: LD_INT 31
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: IN
19119: OR
19120: IFFALSE 18934
19122: GO 18931
19124: POP
19125: POP
// end else
19126: GO 19508
// for j = 1 to x do
19128: NOP4
19132: PUSH
19133: DOUBLE
19134: LD_INT 1
19136: DEC
19137: ST_TO_ADDR
19138: NOP4
19142: PUSH
19143: FOR_TO
19144: IFFALSE 19506
// begin InitHc ;
19146: NOP4
// if not f then
19150: NOP4
19154: NOT
19155: IFFALSE 19244
// begin PrepareHuman ( false , i , skill ) ;
19157: LD_INT 0
19159: PPUSH
19160: NOP4
19164: PPUSH
19165: NOP4
19169: PPUSH
19170: NOP4
// un := CreateHuman ;
19174: NOP4
19178: PUSH
19179: NOP4
19183: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19184: NOP4
19188: PUSH
19189: NOP4
19193: PPUSH
19194: LD_INT 1
19196: PPUSH
19197: NOP4
19201: PPUSH
19202: NOP4
19206: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19207: NOP4
19211: PPUSH
19212: NOP4
19216: PPUSH
19217: NOP4
19221: PPUSH
19222: NOP4
19226: PPUSH
19227: NOP4
19231: PPUSH
19232: LD_INT 10
19234: PPUSH
19235: LD_INT 0
19237: PPUSH
19238: NOP4
// continue ;
19242: GO 19143
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19244: NOP4
19248: PUSH
19249: LD_INT 1
19251: ARRAY
19252: PPUSH
19253: NOP4
19257: PUSH
19258: NOP4
19262: PUSH
19263: LD_INT 1
19265: ARRAY
19266: PPUSH
19267: NOP4
19271: PUSH
19272: LD_INT 32
19274: PUSH
19275: LD_INT 31
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: IN
19282: AND
19283: PUSH
19284: NOP4
19288: PUSH
19289: LD_INT 1
19291: ARRAY
19292: PPUSH
19293: NOP4
19297: PUSH
19298: LD_INT 6
19300: EQUAL
19301: OR
19302: IFFALSE 19322
// f := Delete ( f , 1 ) ;
19304: NOP4
19308: PUSH
19309: NOP4
19313: PPUSH
19314: LD_INT 1
19316: PPUSH
19317: NOP4
19321: ST_TO_ADDR
// if not f then
19322: NOP4
19326: NOT
19327: IFFALSE 19345
// begin x := x + 2 ;
19329: NOP4
19333: PUSH
19334: NOP4
19338: PUSH
19339: LD_INT 2
19341: PLUS
19342: ST_TO_ADDR
// continue ;
19343: GO 19143
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19345: NOP4
19349: PUSH
19350: LD_INT 1
19352: ARRAY
19353: PPUSH
19354: NOP4
19358: PUSH
19359: LD_INT 5
19361: EQUAL
19362: IFFALSE 19436
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19364: NOP4
19368: PUSH
19369: LD_INT 1
19371: ARRAY
19372: PPUSH
19373: NOP4
19377: PUSH
19378: LD_INT 3
19380: LESS
19381: IFFALSE 19417
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19383: LD_INT 0
19385: PPUSH
19386: LD_INT 5
19388: PUSH
19389: LD_INT 8
19391: PUSH
19392: LD_INT 9
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: LIST
19399: PUSH
19400: NOP4
19404: ARRAY
19405: PPUSH
19406: NOP4
19410: PPUSH
19411: NOP4
19415: GO 19434
// PrepareHuman ( false , i , skill ) ;
19417: LD_INT 0
19419: PPUSH
19420: NOP4
19424: PPUSH
19425: NOP4
19429: PPUSH
19430: NOP4
// end else
19434: GO 19453
// PrepareHuman ( false , i , skill ) ;
19436: LD_INT 0
19438: PPUSH
19439: NOP4
19443: PPUSH
19444: NOP4
19448: PPUSH
19449: NOP4
// un := CreateHuman ;
19453: NOP4
19457: PUSH
19458: NOP4
19462: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19463: NOP4
19467: PUSH
19468: NOP4
19472: PPUSH
19473: LD_INT 1
19475: PPUSH
19476: NOP4
19480: PPUSH
19481: NOP4
19485: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19486: NOP4
19490: PPUSH
19491: NOP4
19495: PUSH
19496: LD_INT 1
19498: ARRAY
19499: PPUSH
19500: NOP4
// end ;
19504: GO 19143
19506: POP
19507: POP
// end ;
19508: GO 18445
19510: POP
19511: POP
// result := result ^ buildings ;
19512: NOP4
19516: PUSH
19517: NOP4
19521: PUSH
19522: NOP4
19526: ADD
19527: ST_TO_ADDR
// end else
19528: GO 19671
// begin for i = 1 to personel do
19530: NOP4
19534: PUSH
19535: DOUBLE
19536: LD_INT 1
19538: DEC
19539: ST_TO_ADDR
19540: NOP4
19544: PUSH
19545: FOR_TO
19546: IFFALSE 19669
// begin if i > 4 then
19548: NOP4
19552: PUSH
19553: LD_INT 4
19555: GREATER
19556: IFFALSE 19560
// break ;
19558: GO 19669
// x := personel [ i ] ;
19560: NOP4
19564: PUSH
19565: NOP4
19569: PUSH
19570: NOP4
19574: ARRAY
19575: ST_TO_ADDR
// if x = - 1 then
19576: NOP4
19580: PUSH
19581: LD_INT 1
19583: NEG
19584: EQUAL
19585: IFFALSE 19589
// continue ;
19587: GO 19545
// PrepareHuman ( false , i , skill ) ;
19589: LD_INT 0
19591: PPUSH
19592: NOP4
19596: PPUSH
19597: NOP4
19601: PPUSH
19602: NOP4
// un := CreateHuman ;
19606: NOP4
19610: PUSH
19611: NOP4
19615: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19616: NOP4
19620: PPUSH
19621: NOP4
19625: PPUSH
19626: NOP4
19630: PPUSH
19631: NOP4
19635: PPUSH
19636: NOP4
19640: PPUSH
19641: LD_INT 10
19643: PPUSH
19644: LD_INT 0
19646: PPUSH
19647: NOP4
// result := result ^ un ;
19651: NOP4
19655: PUSH
19656: NOP4
19660: PUSH
19661: NOP4
19665: ADD
19666: ST_TO_ADDR
// end ;
19667: GO 19545
19669: POP
19670: POP
// end ; end ;
19671: LD_VAR 0 7
19675: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19676: LD_INT 0
19678: PPUSH
19679: PPUSH
19680: PPUSH
19681: PPUSH
19682: PPUSH
19683: PPUSH
19684: PPUSH
19685: PPUSH
19686: PPUSH
19687: PPUSH
19688: PPUSH
19689: PPUSH
19690: PPUSH
19691: PPUSH
19692: PPUSH
19693: PPUSH
// result := false ;
19694: NOP4
19698: PUSH
19699: LD_INT 0
19701: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19702: NOP4
19706: NOT
19707: PUSH
19708: NOP4
19712: PPUSH
19713: NOP4
19717: PUSH
19718: LD_INT 32
19720: PUSH
19721: LD_INT 33
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: IN
19728: NOT
19729: OR
19730: IFFALSE 19734
// exit ;
19732: GO 20870
// nat := GetNation ( tower ) ;
19734: NOP4
19738: PUSH
19739: NOP4
19743: PPUSH
19744: NOP4
19748: ST_TO_ADDR
// side := GetSide ( tower ) ;
19749: NOP4
19753: PUSH
19754: NOP4
19758: PPUSH
19759: NOP4
19763: ST_TO_ADDR
// x := GetX ( tower ) ;
19764: NOP4
19768: PUSH
19769: NOP4
19773: PPUSH
19774: NOP4
19778: ST_TO_ADDR
// y := GetY ( tower ) ;
19779: NOP4
19783: PUSH
19784: NOP4
19788: PPUSH
19789: NOP4
19793: ST_TO_ADDR
// if not x or not y then
19794: NOP4
19798: NOT
19799: PUSH
19800: NOP4
19804: NOT
19805: OR
19806: IFFALSE 19810
// exit ;
19808: GO 20870
// weapon := 0 ;
19810: NOP4
19814: PUSH
19815: LD_INT 0
19817: ST_TO_ADDR
// fac_list := [ ] ;
19818: NOP4
19822: PUSH
19823: EMPTY
19824: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
19825: NOP4
19829: PUSH
19830: NOP4
19834: PPUSH
19835: NOP4
19839: PPUSH
19840: NOP4
19844: PPUSH
19845: NOP4
19849: PPUSH
19850: LD_INT 30
19852: PUSH
19853: LD_INT 3
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PPUSH
19860: NOP4
19864: ST_TO_ADDR
// if not factories then
19865: NOP4
19869: NOT
19870: IFFALSE 19874
// exit ;
19872: GO 20870
// for i in factories do
19874: NOP4
19878: PUSH
19879: NOP4
19883: PUSH
19884: FOR_IN
19885: IFFALSE 19910
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19887: NOP4
19891: PUSH
19892: NOP4
19896: PUSH
19897: NOP4
19901: PPUSH
19902: NOP4
19906: UNION
19907: ST_TO_ADDR
19908: GO 19884
19910: POP
19911: POP
// if not fac_list then
19912: NOP4
19916: NOT
19917: IFFALSE 19921
// exit ;
19919: GO 20870
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19921: NOP4
19925: PUSH
19926: LD_INT 4
19928: PUSH
19929: LD_INT 5
19931: PUSH
19932: LD_INT 9
19934: PUSH
19935: LD_INT 10
19937: PUSH
19938: LD_INT 6
19940: PUSH
19941: LD_INT 7
19943: PUSH
19944: LD_INT 11
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 27
19958: PUSH
19959: LD_INT 28
19961: PUSH
19962: LD_INT 26
19964: PUSH
19965: LD_INT 30
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 43
19976: PUSH
19977: LD_INT 44
19979: PUSH
19980: LD_INT 46
19982: PUSH
19983: LD_INT 45
19985: PUSH
19986: LD_INT 47
19988: PUSH
19989: LD_INT 49
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: LIST
20004: PUSH
20005: NOP4
20009: ARRAY
20010: ST_TO_ADDR
// for i in list do
20011: NOP4
20015: PUSH
20016: NOP4
20020: PUSH
20021: FOR_IN
20022: IFFALSE 20055
// if not i in fac_list then
20024: NOP4
20028: PUSH
20029: NOP4
20033: IN
20034: NOT
20035: IFFALSE 20053
// list := list diff i ;
20037: NOP4
20041: PUSH
20042: NOP4
20046: PUSH
20047: NOP4
20051: DIFF
20052: ST_TO_ADDR
20053: GO 20021
20055: POP
20056: POP
// if not list then
20057: NOP4
20061: NOT
20062: IFFALSE 20066
// exit ;
20064: GO 20870
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20066: NOP4
20070: PUSH
20071: LD_INT 3
20073: EQUAL
20074: PUSH
20075: LD_INT 49
20077: PUSH
20078: NOP4
20082: IN
20083: AND
20084: PUSH
20085: LD_INT 31
20087: PPUSH
20088: NOP4
20092: PPUSH
20093: NOP4
20097: PUSH
20098: LD_INT 2
20100: EQUAL
20101: AND
20102: IFFALSE 20162
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20104: LD_INT 22
20106: PUSH
20107: NOP4
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 35
20118: PUSH
20119: LD_INT 49
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 91
20128: PUSH
20129: NOP4
20133: PUSH
20134: LD_INT 10
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: LIST
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: PPUSH
20147: NOP4
20151: NOT
20152: IFFALSE 20162
// weapon := ru_time_lapser ;
20154: NOP4
20158: PUSH
20159: LD_INT 49
20161: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20162: NOP4
20166: PUSH
20167: LD_INT 1
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: IN
20177: PUSH
20178: LD_INT 11
20180: PUSH
20181: NOP4
20185: IN
20186: PUSH
20187: LD_INT 30
20189: PUSH
20190: NOP4
20194: IN
20195: OR
20196: AND
20197: PUSH
20198: LD_INT 6
20200: PPUSH
20201: NOP4
20205: PPUSH
20206: NOP4
20210: PUSH
20211: LD_INT 2
20213: EQUAL
20214: AND
20215: IFFALSE 20380
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20217: LD_INT 22
20219: PUSH
20220: NOP4
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 2
20231: PUSH
20232: LD_INT 35
20234: PUSH
20235: LD_INT 11
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 35
20244: PUSH
20245: LD_INT 30
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 91
20259: PUSH
20260: NOP4
20264: PUSH
20265: LD_INT 18
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: LIST
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: LIST
20277: PPUSH
20278: NOP4
20282: NOT
20283: PUSH
20284: LD_INT 22
20286: PUSH
20287: NOP4
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 2
20298: PUSH
20299: LD_INT 30
20301: PUSH
20302: LD_INT 32
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 30
20311: PUSH
20312: LD_INT 33
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 91
20326: PUSH
20327: NOP4
20331: PUSH
20332: LD_INT 12
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: LIST
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: LIST
20344: PUSH
20345: EMPTY
20346: LIST
20347: PPUSH
20348: NOP4
20352: PUSH
20353: LD_INT 2
20355: GREATER
20356: AND
20357: IFFALSE 20380
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20359: NOP4
20363: PUSH
20364: LD_INT 11
20366: PUSH
20367: LD_INT 30
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: NOP4
20378: ARRAY
20379: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20380: NOP4
20384: NOT
20385: PUSH
20386: LD_INT 40
20388: PPUSH
20389: NOP4
20393: PPUSH
20394: NOP4
20398: PUSH
20399: LD_INT 2
20401: EQUAL
20402: AND
20403: PUSH
20404: LD_INT 7
20406: PUSH
20407: NOP4
20411: IN
20412: PUSH
20413: LD_INT 28
20415: PUSH
20416: NOP4
20420: IN
20421: OR
20422: PUSH
20423: LD_INT 45
20425: PUSH
20426: NOP4
20430: IN
20431: OR
20432: AND
20433: IFFALSE 20687
// begin hex := GetHexInfo ( x , y ) ;
20435: NOP4
20439: PUSH
20440: NOP4
20444: PPUSH
20445: NOP4
20449: PPUSH
20450: NOP4
20454: ST_TO_ADDR
// if hex [ 1 ] then
20455: NOP4
20459: PUSH
20460: LD_INT 1
20462: ARRAY
20463: IFFALSE 20467
// exit ;
20465: GO 20870
// height := hex [ 2 ] ;
20467: NOP4
20471: PUSH
20472: NOP4
20476: PUSH
20477: LD_INT 2
20479: ARRAY
20480: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20481: NOP4
20485: PUSH
20486: LD_INT 0
20488: PUSH
20489: LD_INT 2
20491: PUSH
20492: LD_INT 3
20494: PUSH
20495: LD_INT 5
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: ST_TO_ADDR
// for i in tmp do
20504: NOP4
20508: PUSH
20509: NOP4
20513: PUSH
20514: FOR_IN
20515: IFFALSE 20685
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20517: NOP4
20521: PUSH
20522: NOP4
20526: PPUSH
20527: NOP4
20531: PPUSH
20532: LD_INT 5
20534: PPUSH
20535: NOP4
20539: PUSH
20540: NOP4
20544: PPUSH
20545: NOP4
20549: PPUSH
20550: LD_INT 5
20552: PPUSH
20553: NOP4
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20562: NOP4
20566: PUSH
20567: LD_INT 1
20569: ARRAY
20570: PPUSH
20571: NOP4
20575: PUSH
20576: LD_INT 2
20578: ARRAY
20579: PPUSH
20580: NOP4
20584: IFFALSE 20683
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20586: NOP4
20590: PUSH
20591: NOP4
20595: PUSH
20596: LD_INT 1
20598: ARRAY
20599: PPUSH
20600: NOP4
20604: PUSH
20605: LD_INT 2
20607: ARRAY
20608: PPUSH
20609: NOP4
20613: ST_TO_ADDR
// if hex [ 1 ] then
20614: NOP4
20618: PUSH
20619: LD_INT 1
20621: ARRAY
20622: IFFALSE 20626
// continue ;
20624: GO 20514
// h := hex [ 2 ] ;
20626: NOP4
20630: PUSH
20631: NOP4
20635: PUSH
20636: LD_INT 2
20638: ARRAY
20639: ST_TO_ADDR
// if h + 7 < height then
20640: NOP4
20644: PUSH
20645: LD_INT 7
20647: PLUS
20648: PUSH
20649: NOP4
20653: LESS
20654: IFFALSE 20683
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20656: NOP4
20660: PUSH
20661: LD_INT 7
20663: PUSH
20664: LD_INT 28
20666: PUSH
20667: LD_INT 45
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: LIST
20674: PUSH
20675: NOP4
20679: ARRAY
20680: ST_TO_ADDR
// break ;
20681: GO 20685
// end ; end ; end ;
20683: GO 20514
20685: POP
20686: POP
// end ; if not weapon then
20687: NOP4
20691: NOT
20692: IFFALSE 20752
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20694: NOP4
20698: PUSH
20699: NOP4
20703: PUSH
20704: LD_INT 11
20706: PUSH
20707: LD_INT 30
20709: PUSH
20710: LD_INT 49
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: DIFF
20718: ST_TO_ADDR
// if not list then
20719: NOP4
20723: NOT
20724: IFFALSE 20728
// exit ;
20726: GO 20870
// weapon := list [ rand ( 1 , list ) ] ;
20728: NOP4
20732: PUSH
20733: NOP4
20737: PUSH
20738: LD_INT 1
20740: PPUSH
20741: NOP4
20745: PPUSH
20746: NOP4
20750: ARRAY
20751: ST_TO_ADDR
// end ; if weapon then
20752: NOP4
20756: IFFALSE 20870
// begin tmp := CostOfWeapon ( weapon ) ;
20758: NOP4
20762: PUSH
20763: NOP4
20767: PPUSH
20768: NOP4
20772: ST_TO_ADDR
// j := GetBase ( tower ) ;
20773: NOP4
20777: PUSH
20778: NOP4
20782: PPUSH
20783: NOP4
20787: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20788: NOP4
20792: PPUSH
20793: LD_INT 1
20795: PPUSH
20796: NOP4
20800: PUSH
20801: NOP4
20805: PUSH
20806: LD_INT 1
20808: ARRAY
20809: GREATEREQUAL
20810: PUSH
20811: NOP4
20815: PPUSH
20816: LD_INT 2
20818: PPUSH
20819: NOP4
20823: PUSH
20824: NOP4
20828: PUSH
20829: LD_INT 2
20831: ARRAY
20832: GREATEREQUAL
20833: AND
20834: PUSH
20835: NOP4
20839: PPUSH
20840: LD_INT 3
20842: PPUSH
20843: NOP4
20847: PUSH
20848: NOP4
20852: PUSH
20853: LD_INT 3
20855: ARRAY
20856: GREATEREQUAL
20857: AND
20858: IFFALSE 20870
// result := weapon ;
20860: NOP4
20864: PUSH
20865: NOP4
20869: ST_TO_ADDR
// end ; end ;
20870: LD_VAR 0 3
20874: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20875: LD_INT 0
20877: PPUSH
20878: PPUSH
// result := true ;
20879: NOP4
20883: PUSH
20884: LD_INT 1
20886: ST_TO_ADDR
// if array1 = array2 then
20887: NOP4
20891: PUSH
20892: NOP4
20896: EQUAL
20897: IFFALSE 20957
// begin for i = 1 to array1 do
20899: NOP4
20903: PUSH
20904: DOUBLE
20905: LD_INT 1
20907: DEC
20908: ST_TO_ADDR
20909: NOP4
20913: PUSH
20914: FOR_TO
20915: IFFALSE 20953
// if array1 [ i ] <> array2 [ i ] then
20917: NOP4
20921: PUSH
20922: NOP4
20926: ARRAY
20927: PUSH
20928: NOP4
20932: PUSH
20933: NOP4
20937: ARRAY
20938: NONEQUAL
20939: IFFALSE 20951
// begin result := false ;
20941: NOP4
20945: PUSH
20946: LD_INT 0
20948: ST_TO_ADDR
// break ;
20949: GO 20953
// end ;
20951: GO 20914
20953: POP
20954: POP
// end else
20955: GO 20965
// result := false ;
20957: NOP4
20961: PUSH
20962: LD_INT 0
20964: ST_TO_ADDR
// end ;
20965: LD_VAR 0 3
20969: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20970: LD_INT 0
20972: PPUSH
20973: PPUSH
20974: PPUSH
// pom := GetBase ( fac ) ;
20975: NOP4
20979: PUSH
20980: NOP4
20984: PPUSH
20985: NOP4
20989: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20990: NOP4
20994: PUSH
20995: NOP4
20999: PUSH
21000: LD_INT 1
21002: ARRAY
21003: PPUSH
21004: NOP4
21008: PUSH
21009: LD_INT 2
21011: ARRAY
21012: PPUSH
21013: NOP4
21017: PUSH
21018: LD_INT 3
21020: ARRAY
21021: PPUSH
21022: NOP4
21026: PUSH
21027: LD_INT 4
21029: ARRAY
21030: PPUSH
21031: NOP4
21035: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21036: NOP4
21040: PUSH
21041: NOP4
21045: PPUSH
21046: LD_INT 1
21048: PPUSH
21049: NOP4
21053: PUSH
21054: NOP4
21058: PUSH
21059: LD_INT 1
21061: ARRAY
21062: GREATEREQUAL
21063: PUSH
21064: NOP4
21068: PPUSH
21069: LD_INT 2
21071: PPUSH
21072: NOP4
21076: PUSH
21077: NOP4
21081: PUSH
21082: LD_INT 2
21084: ARRAY
21085: GREATEREQUAL
21086: AND
21087: PUSH
21088: NOP4
21092: PPUSH
21093: LD_INT 3
21095: PPUSH
21096: NOP4
21100: PUSH
21101: NOP4
21105: PUSH
21106: LD_INT 3
21108: ARRAY
21109: GREATEREQUAL
21110: AND
21111: ST_TO_ADDR
// end ;
21112: LD_VAR 0 3
21116: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21117: LD_INT 0
21119: PPUSH
21120: PPUSH
21121: PPUSH
21122: PPUSH
// pom := GetBase ( building ) ;
21123: NOP4
21127: PUSH
21128: NOP4
21132: PPUSH
21133: NOP4
21137: ST_TO_ADDR
// if not pom then
21138: NOP4
21142: NOT
21143: IFFALSE 21147
// exit ;
21145: GO 21317
// btype := GetBType ( building ) ;
21147: NOP4
21151: PUSH
21152: NOP4
21156: PPUSH
21157: NOP4
21161: ST_TO_ADDR
// if btype = b_armoury then
21162: NOP4
21166: PUSH
21167: LD_INT 4
21169: EQUAL
21170: IFFALSE 21180
// btype := b_barracks ;
21172: NOP4
21176: PUSH
21177: LD_INT 5
21179: ST_TO_ADDR
// if btype = b_depot then
21180: NOP4
21184: PUSH
21185: LD_INT 0
21187: EQUAL
21188: IFFALSE 21198
// btype := b_warehouse ;
21190: NOP4
21194: PUSH
21195: LD_INT 1
21197: ST_TO_ADDR
// if btype = b_workshop then
21198: NOP4
21202: PUSH
21203: LD_INT 2
21205: EQUAL
21206: IFFALSE 21216
// btype := b_factory ;
21208: NOP4
21212: PUSH
21213: LD_INT 3
21215: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21216: NOP4
21220: PUSH
21221: NOP4
21225: PPUSH
21226: NOP4
21230: PPUSH
21231: NOP4
21235: PPUSH
21236: NOP4
21240: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21241: NOP4
21245: PUSH
21246: NOP4
21250: PPUSH
21251: LD_INT 1
21253: PPUSH
21254: NOP4
21258: PUSH
21259: NOP4
21263: PUSH
21264: LD_INT 1
21266: ARRAY
21267: GREATEREQUAL
21268: PUSH
21269: NOP4
21273: PPUSH
21274: LD_INT 2
21276: PPUSH
21277: NOP4
21281: PUSH
21282: NOP4
21286: PUSH
21287: LD_INT 2
21289: ARRAY
21290: GREATEREQUAL
21291: AND
21292: PUSH
21293: NOP4
21297: PPUSH
21298: LD_INT 3
21300: PPUSH
21301: NOP4
21305: PUSH
21306: NOP4
21310: PUSH
21311: LD_INT 3
21313: ARRAY
21314: GREATEREQUAL
21315: AND
21316: ST_TO_ADDR
// end ;
21317: LD_VAR 0 2
21321: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21322: LD_INT 0
21324: PPUSH
21325: PPUSH
21326: PPUSH
// pom := GetBase ( building ) ;
21327: NOP4
21331: PUSH
21332: NOP4
21336: PPUSH
21337: NOP4
21341: ST_TO_ADDR
// if not pom then
21342: NOP4
21346: NOT
21347: IFFALSE 21351
// exit ;
21349: GO 21452
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21351: NOP4
21355: PUSH
21356: NOP4
21360: PPUSH
21361: NOP4
21365: PPUSH
21366: NOP4
21370: PPUSH
21371: NOP4
21375: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21376: NOP4
21380: PUSH
21381: NOP4
21385: PPUSH
21386: LD_INT 1
21388: PPUSH
21389: NOP4
21393: PUSH
21394: NOP4
21398: PUSH
21399: LD_INT 1
21401: ARRAY
21402: GREATEREQUAL
21403: PUSH
21404: NOP4
21408: PPUSH
21409: LD_INT 2
21411: PPUSH
21412: NOP4
21416: PUSH
21417: NOP4
21421: PUSH
21422: LD_INT 2
21424: ARRAY
21425: GREATEREQUAL
21426: AND
21427: PUSH
21428: NOP4
21432: PPUSH
21433: LD_INT 3
21435: PPUSH
21436: NOP4
21440: PUSH
21441: NOP4
21445: PUSH
21446: LD_INT 3
21448: ARRAY
21449: GREATEREQUAL
21450: AND
21451: ST_TO_ADDR
// end ;
21452: LD_VAR 0 3
21456: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
21457: LD_INT 0
21459: PPUSH
21460: PPUSH
21461: PPUSH
21462: PPUSH
21463: PPUSH
21464: PPUSH
21465: PPUSH
21466: PPUSH
21467: PPUSH
21468: PPUSH
// result := false ;
21469: NOP4
21473: PUSH
21474: LD_INT 0
21476: ST_TO_ADDR
// if not base or not btype or not x or not y then
21477: NOP4
21481: NOT
21482: PUSH
21483: NOP4
21487: NOT
21488: OR
21489: PUSH
21490: NOP4
21494: NOT
21495: OR
21496: PUSH
21497: NOP4
21501: NOT
21502: OR
21503: IFFALSE 21507
// exit ;
21505: GO 22116
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
21507: NOP4
21511: PUSH
21512: NOP4
21516: PPUSH
21517: NOP4
21521: PPUSH
21522: NOP4
21526: PPUSH
21527: NOP4
21531: PPUSH
21532: NOP4
21536: PUSH
21537: LD_INT 1
21539: ARRAY
21540: PPUSH
21541: NOP4
21545: PPUSH
21546: LD_INT 0
21548: PPUSH
21549: NOP4
21553: ST_TO_ADDR
// if not hexes then
21554: NOP4
21558: NOT
21559: IFFALSE 21563
// exit ;
21561: GO 22116
// for i = 1 to hexes do
21563: NOP4
21567: PUSH
21568: DOUBLE
21569: LD_INT 1
21571: DEC
21572: ST_TO_ADDR
21573: NOP4
21577: PUSH
21578: FOR_TO
21579: IFFALSE 22114
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21581: NOP4
21585: PUSH
21586: NOP4
21590: PUSH
21591: NOP4
21595: ARRAY
21596: PUSH
21597: LD_INT 1
21599: ARRAY
21600: PPUSH
21601: NOP4
21605: PUSH
21606: NOP4
21610: ARRAY
21611: PUSH
21612: LD_INT 2
21614: ARRAY
21615: PPUSH
21616: NOP4
21620: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21621: NOP4
21625: PUSH
21626: NOP4
21630: ARRAY
21631: PUSH
21632: LD_INT 1
21634: ARRAY
21635: PPUSH
21636: NOP4
21640: PUSH
21641: NOP4
21645: ARRAY
21646: PUSH
21647: LD_INT 2
21649: ARRAY
21650: PPUSH
21651: NOP4
21655: PUSH
21656: NOP4
21660: PUSH
21661: NOP4
21665: ARRAY
21666: PUSH
21667: LD_INT 1
21669: ARRAY
21670: PPUSH
21671: NOP4
21675: PUSH
21676: NOP4
21680: ARRAY
21681: PUSH
21682: LD_INT 2
21684: ARRAY
21685: PPUSH
21686: NOP4
21690: NOT
21691: OR
21692: PUSH
21693: NOP4
21697: PPUSH
21698: NOP4
21702: PUSH
21703: LD_INT 3
21705: EQUAL
21706: OR
21707: IFFALSE 21713
// exit ;
21709: POP
21710: POP
21711: GO 22116
// if not tmp or not tmp in base then
21713: NOP4
21717: NOT
21718: PUSH
21719: NOP4
21723: PUSH
21724: NOP4
21728: IN
21729: NOT
21730: OR
21731: IFFALSE 21735
// continue ;
21733: GO 21578
// result := true ;
21735: NOP4
21739: PUSH
21740: LD_INT 1
21742: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21743: NOP4
21747: PUSH
21748: NOP4
21752: PPUSH
21753: LD_INT 22
21755: PUSH
21756: NOP4
21760: PPUSH
21761: NOP4
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 2
21772: PUSH
21773: LD_INT 30
21775: PUSH
21776: LD_INT 0
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 30
21785: PUSH
21786: LD_INT 1
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PPUSH
21802: NOP4
21806: ST_TO_ADDR
// if dep then
21807: NOP4
21811: IFFALSE 21947
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21813: NOP4
21817: PUSH
21818: NOP4
21822: PUSH
21823: LD_INT 1
21825: ARRAY
21826: PPUSH
21827: NOP4
21831: PPUSH
21832: NOP4
21836: PUSH
21837: LD_INT 1
21839: ARRAY
21840: PPUSH
21841: NOP4
21845: PPUSH
21846: LD_INT 5
21848: PPUSH
21849: NOP4
21853: PUSH
21854: NOP4
21858: PUSH
21859: LD_INT 1
21861: ARRAY
21862: PPUSH
21863: NOP4
21867: PPUSH
21868: NOP4
21872: PUSH
21873: LD_INT 1
21875: ARRAY
21876: PPUSH
21877: NOP4
21881: PPUSH
21882: LD_INT 5
21884: PPUSH
21885: NOP4
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21894: NOP4
21898: PUSH
21899: LD_INT 1
21901: ARRAY
21902: PPUSH
21903: NOP4
21907: PUSH
21908: LD_INT 2
21910: ARRAY
21911: PPUSH
21912: NOP4
21916: IFFALSE 21947
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21918: NOP4
21922: PPUSH
21923: NOP4
21927: PUSH
21928: LD_INT 1
21930: ARRAY
21931: PPUSH
21932: NOP4
21936: PUSH
21937: LD_INT 2
21939: ARRAY
21940: PPUSH
21941: NOP4
// continue ;
21945: GO 21578
// end ; end ; r := GetDir ( tmp ) ;
21947: NOP4
21951: PUSH
21952: NOP4
21956: PPUSH
21957: NOP4
21961: ST_TO_ADDR
// if r = 5 then
21962: NOP4
21966: PUSH
21967: LD_INT 5
21969: EQUAL
21970: IFFALSE 21980
// r := 0 ;
21972: NOP4
21976: PUSH
21977: LD_INT 0
21979: ST_TO_ADDR
// for j = r to 5 do
21980: NOP4
21984: PUSH
21985: DOUBLE
21986: NOP4
21990: DEC
21991: ST_TO_ADDR
21992: LD_INT 5
21994: PUSH
21995: FOR_TO
21996: IFFALSE 22110
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21998: NOP4
22002: PUSH
22003: NOP4
22007: PPUSH
22008: NOP4
22012: PPUSH
22013: NOP4
22017: PPUSH
22018: LD_INT 2
22020: PPUSH
22021: NOP4
22025: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22026: NOP4
22030: PUSH
22031: NOP4
22035: PPUSH
22036: NOP4
22040: PPUSH
22041: NOP4
22045: PPUSH
22046: LD_INT 2
22048: PPUSH
22049: NOP4
22053: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22054: NOP4
22058: PPUSH
22059: NOP4
22063: PPUSH
22064: NOP4
22068: PUSH
22069: NOP4
22073: PPUSH
22074: NOP4
22078: PPUSH
22079: NOP4
22083: NOT
22084: AND
22085: IFFALSE 22108
// begin ComMoveXY ( tmp , _x , _y ) ;
22087: NOP4
22091: PPUSH
22092: NOP4
22096: PPUSH
22097: NOP4
22101: PPUSH
22102: NOP4
// break ;
22106: GO 22110
// end ; end ;
22108: GO 21995
22110: POP
22111: POP
// end ;
22112: GO 21578
22114: POP
22115: POP
// end ;
22116: LD_VAR 0 6
22120: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
22121: LD_INT 0
22123: PPUSH
22124: PPUSH
22125: PPUSH
22126: PPUSH
22127: PPUSH
22128: PPUSH
22129: PPUSH
22130: PPUSH
22131: PPUSH
22132: PPUSH
// result := false ;
22133: NOP4
22137: PUSH
22138: LD_INT 0
22140: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22141: NOP4
22145: NOT
22146: PUSH
22147: NOP4
22151: PPUSH
22152: NOP4
22156: PUSH
22157: LD_INT 0
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: IN
22167: NOT
22168: OR
22169: PUSH
22170: NOP4
22174: NOT
22175: OR
22176: PUSH
22177: NOP4
22181: PUSH
22182: LD_INT 0
22184: PUSH
22185: LD_INT 1
22187: PUSH
22188: LD_INT 2
22190: PUSH
22191: LD_INT 3
22193: PUSH
22194: LD_INT 4
22196: PUSH
22197: LD_INT 5
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: IN
22208: NOT
22209: OR
22210: PUSH
22211: NOP4
22215: PPUSH
22216: NOP4
22220: PPUSH
22221: NOP4
22225: NOT
22226: OR
22227: IFFALSE 22231
// exit ;
22229: GO 22948
// pom := GetBase ( depot ) ;
22231: NOP4
22235: PUSH
22236: NOP4
22240: PPUSH
22241: NOP4
22245: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22246: NOP4
22250: PUSH
22251: NOP4
22255: PPUSH
22256: NOP4
22260: PPUSH
22261: NOP4
22265: PPUSH
22266: NOP4
22270: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22271: NOP4
22275: PPUSH
22276: LD_INT 1
22278: PPUSH
22279: NOP4
22283: PUSH
22284: NOP4
22288: PUSH
22289: LD_INT 1
22291: ARRAY
22292: GREATEREQUAL
22293: PUSH
22294: NOP4
22298: PPUSH
22299: LD_INT 2
22301: PPUSH
22302: NOP4
22306: PUSH
22307: NOP4
22311: PUSH
22312: LD_INT 2
22314: ARRAY
22315: GREATEREQUAL
22316: AND
22317: PUSH
22318: NOP4
22322: PPUSH
22323: LD_INT 3
22325: PPUSH
22326: NOP4
22330: PUSH
22331: NOP4
22335: PUSH
22336: LD_INT 3
22338: ARRAY
22339: GREATEREQUAL
22340: AND
22341: NOT
22342: IFFALSE 22346
// exit ;
22344: GO 22948
// if GetBType ( depot ) = b_depot then
22346: NOP4
22350: PPUSH
22351: NOP4
22355: PUSH
22356: LD_INT 0
22358: EQUAL
22359: IFFALSE 22371
// dist := 28 else
22361: NOP4
22365: PUSH
22366: LD_INT 28
22368: ST_TO_ADDR
22369: GO 22379
// dist := 36 ;
22371: NOP4
22375: PUSH
22376: LD_INT 36
22378: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22379: NOP4
22383: PPUSH
22384: NOP4
22388: PPUSH
22389: NOP4
22393: PPUSH
22394: NOP4
22398: PUSH
22399: NOP4
22403: GREATER
22404: IFFALSE 22408
// exit ;
22406: GO 22948
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22408: NOP4
22412: PUSH
22413: NOP4
22417: PPUSH
22418: NOP4
22422: PPUSH
22423: NOP4
22427: PPUSH
22428: NOP4
22432: PPUSH
22433: NOP4
22437: PPUSH
22438: NOP4
22442: PPUSH
22443: LD_INT 0
22445: PPUSH
22446: NOP4
22450: ST_TO_ADDR
// if not hexes then
22451: NOP4
22455: NOT
22456: IFFALSE 22460
// exit ;
22458: GO 22948
// hex := GetHexInfo ( x , y ) ;
22460: NOP4
22464: PUSH
22465: NOP4
22469: PPUSH
22470: NOP4
22474: PPUSH
22475: NOP4
22479: ST_TO_ADDR
// if hex [ 1 ] then
22480: NOP4
22484: PUSH
22485: LD_INT 1
22487: ARRAY
22488: IFFALSE 22492
// exit ;
22490: GO 22948
// height := hex [ 2 ] ;
22492: NOP4
22496: PUSH
22497: NOP4
22501: PUSH
22502: LD_INT 2
22504: ARRAY
22505: ST_TO_ADDR
// for i = 1 to hexes do
22506: NOP4
22510: PUSH
22511: DOUBLE
22512: LD_INT 1
22514: DEC
22515: ST_TO_ADDR
22516: NOP4
22520: PUSH
22521: FOR_TO
22522: IFFALSE 22852
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22524: NOP4
22528: PUSH
22529: NOP4
22533: ARRAY
22534: PUSH
22535: LD_INT 1
22537: ARRAY
22538: PPUSH
22539: NOP4
22543: PUSH
22544: NOP4
22548: ARRAY
22549: PUSH
22550: LD_INT 2
22552: ARRAY
22553: PPUSH
22554: NOP4
22558: NOT
22559: PUSH
22560: NOP4
22564: PUSH
22565: NOP4
22569: ARRAY
22570: PUSH
22571: LD_INT 1
22573: ARRAY
22574: PPUSH
22575: NOP4
22579: PUSH
22580: NOP4
22584: ARRAY
22585: PUSH
22586: LD_INT 2
22588: ARRAY
22589: PPUSH
22590: NOP4
22594: PUSH
22595: LD_INT 0
22597: GREATER
22598: OR
22599: PUSH
22600: NOP4
22604: PUSH
22605: NOP4
22609: ARRAY
22610: PUSH
22611: LD_INT 1
22613: ARRAY
22614: PPUSH
22615: NOP4
22619: PUSH
22620: NOP4
22624: ARRAY
22625: PUSH
22626: LD_INT 2
22628: ARRAY
22629: PPUSH
22630: NOP4
22634: OR
22635: IFFALSE 22641
// exit ;
22637: POP
22638: POP
22639: GO 22948
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22641: NOP4
22645: PUSH
22646: NOP4
22650: PUSH
22651: NOP4
22655: ARRAY
22656: PUSH
22657: LD_INT 1
22659: ARRAY
22660: PPUSH
22661: NOP4
22665: PUSH
22666: NOP4
22670: ARRAY
22671: PUSH
22672: LD_INT 2
22674: ARRAY
22675: PPUSH
22676: NOP4
22680: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22681: NOP4
22685: PUSH
22686: LD_INT 1
22688: ARRAY
22689: PUSH
22690: NOP4
22694: PUSH
22695: LD_INT 2
22697: ARRAY
22698: PUSH
22699: NOP4
22703: PUSH
22704: LD_INT 2
22706: PLUS
22707: GREATER
22708: OR
22709: PUSH
22710: NOP4
22714: PUSH
22715: LD_INT 2
22717: ARRAY
22718: PUSH
22719: NOP4
22723: PUSH
22724: LD_INT 2
22726: MINUS
22727: LESS
22728: OR
22729: PUSH
22730: NOP4
22734: PUSH
22735: LD_INT 3
22737: ARRAY
22738: PUSH
22739: LD_INT 0
22741: PUSH
22742: LD_INT 8
22744: PUSH
22745: LD_INT 9
22747: PUSH
22748: LD_INT 10
22750: PUSH
22751: LD_INT 11
22753: PUSH
22754: LD_INT 12
22756: PUSH
22757: LD_INT 13
22759: PUSH
22760: LD_INT 16
22762: PUSH
22763: LD_INT 17
22765: PUSH
22766: LD_INT 18
22768: PUSH
22769: LD_INT 19
22771: PUSH
22772: LD_INT 20
22774: PUSH
22775: LD_INT 21
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: IN
22793: NOT
22794: OR
22795: PUSH
22796: NOP4
22800: PUSH
22801: LD_INT 5
22803: ARRAY
22804: NOT
22805: OR
22806: PUSH
22807: NOP4
22811: PUSH
22812: LD_INT 6
22814: ARRAY
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: LD_INT 2
22821: PUSH
22822: LD_INT 7
22824: PUSH
22825: LD_INT 9
22827: PUSH
22828: LD_INT 10
22830: PUSH
22831: LD_INT 11
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: IN
22842: NOT
22843: OR
22844: IFFALSE 22850
// exit ;
22846: POP
22847: POP
22848: GO 22948
// end ;
22850: GO 22521
22852: POP
22853: POP
// side := GetSide ( depot ) ;
22854: NOP4
22858: PUSH
22859: NOP4
22863: PPUSH
22864: NOP4
22868: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
22869: NOP4
22873: PPUSH
22874: NOP4
22878: PPUSH
22879: NOP4
22883: PPUSH
22884: LD_INT 20
22886: PPUSH
22887: NOP4
22891: PUSH
22892: LD_INT 4
22894: ARRAY
22895: IFFALSE 22899
// exit ;
22897: GO 22948
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
22899: NOP4
22903: PUSH
22904: LD_INT 29
22906: PUSH
22907: LD_INT 30
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: IN
22914: PUSH
22915: NOP4
22919: PPUSH
22920: NOP4
22924: PPUSH
22925: NOP4
22929: PPUSH
22930: NOP4
22934: NOT
22935: AND
22936: IFFALSE 22940
// exit ;
22938: GO 22948
// result := true ;
22940: NOP4
22944: PUSH
22945: LD_INT 1
22947: ST_TO_ADDR
// end ;
22948: LD_VAR 0 6
22952: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22953: LD_INT 0
22955: PPUSH
22956: PPUSH
22957: PPUSH
22958: PPUSH
22959: PPUSH
22960: PPUSH
22961: PPUSH
22962: PPUSH
22963: PPUSH
22964: PPUSH
22965: PPUSH
22966: PPUSH
22967: PPUSH
22968: PPUSH
22969: PPUSH
22970: PPUSH
22971: PPUSH
22972: PPUSH
22973: PPUSH
22974: PPUSH
22975: PPUSH
22976: PPUSH
22977: PPUSH
22978: PPUSH
22979: PPUSH
22980: PPUSH
22981: PPUSH
22982: PPUSH
22983: PPUSH
22984: PPUSH
22985: PPUSH
22986: PPUSH
22987: PPUSH
22988: PPUSH
22989: PPUSH
22990: PPUSH
22991: PPUSH
22992: PPUSH
22993: PPUSH
22994: PPUSH
22995: PPUSH
22996: PPUSH
22997: PPUSH
22998: PPUSH
22999: PPUSH
23000: PPUSH
23001: PPUSH
23002: PPUSH
23003: PPUSH
23004: PPUSH
23005: PPUSH
23006: PPUSH
23007: PPUSH
23008: PPUSH
23009: PPUSH
23010: PPUSH
23011: PPUSH
23012: PPUSH
// result = [ ] ;
23013: NOP4
23017: PUSH
23018: EMPTY
23019: ST_TO_ADDR
// temp_list = [ ] ;
23020: NOP4
23024: PUSH
23025: EMPTY
23026: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23027: NOP4
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: LD_INT 1
23037: PUSH
23038: LD_INT 2
23040: PUSH
23041: LD_INT 3
23043: PUSH
23044: LD_INT 4
23046: PUSH
23047: LD_INT 5
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: IN
23058: NOT
23059: PUSH
23060: NOP4
23064: PUSH
23065: LD_INT 0
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: IN
23075: PUSH
23076: NOP4
23080: PUSH
23081: LD_INT 1
23083: PUSH
23084: LD_INT 2
23086: PUSH
23087: LD_INT 3
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: IN
23095: NOT
23096: AND
23097: OR
23098: IFFALSE 23102
// exit ;
23100: GO 41493
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23102: NOP4
23106: PUSH
23107: LD_INT 6
23109: PUSH
23110: LD_INT 7
23112: PUSH
23113: LD_INT 8
23115: PUSH
23116: LD_INT 13
23118: PUSH
23119: LD_INT 12
23121: PUSH
23122: LD_INT 15
23124: PUSH
23125: LD_INT 11
23127: PUSH
23128: LD_INT 14
23130: PUSH
23131: LD_INT 10
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: IN
23145: IFFALSE 23155
// btype = b_lab ;
23147: NOP4
23151: PUSH
23152: LD_INT 6
23154: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23155: NOP4
23159: PUSH
23160: LD_INT 0
23162: PUSH
23163: LD_INT 1
23165: PUSH
23166: LD_INT 2
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: LIST
23173: IN
23174: NOT
23175: PUSH
23176: NOP4
23180: PUSH
23181: LD_INT 0
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: LD_INT 2
23189: PUSH
23190: LD_INT 3
23192: PUSH
23193: LD_INT 6
23195: PUSH
23196: LD_INT 36
23198: PUSH
23199: LD_INT 4
23201: PUSH
23202: LD_INT 5
23204: PUSH
23205: LD_INT 31
23207: PUSH
23208: LD_INT 32
23210: PUSH
23211: LD_INT 33
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: IN
23227: NOT
23228: PUSH
23229: NOP4
23233: PUSH
23234: LD_INT 1
23236: EQUAL
23237: AND
23238: OR
23239: PUSH
23240: NOP4
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: LD_INT 3
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: IN
23255: NOT
23256: PUSH
23257: NOP4
23261: PUSH
23262: LD_INT 2
23264: EQUAL
23265: AND
23266: OR
23267: IFFALSE 23277
// mode = 0 ;
23269: NOP4
23273: PUSH
23274: LD_INT 0
23276: ST_TO_ADDR
// case mode of 0 :
23277: NOP4
23281: PUSH
23282: LD_INT 0
23284: DOUBLE
23285: EQUAL
23286: IFTRUE 23290
23288: GO 34743
23290: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23291: NOP4
23295: PUSH
23296: LD_INT 0
23298: PUSH
23299: LD_INT 0
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 0
23308: PUSH
23309: LD_INT 1
23311: NEG
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 1
23329: PUSH
23330: LD_INT 1
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: LD_INT 1
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 1
23349: NEG
23350: PUSH
23351: LD_INT 0
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 1
23360: NEG
23361: PUSH
23362: LD_INT 1
23364: NEG
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 1
23372: NEG
23373: PUSH
23374: LD_INT 2
23376: NEG
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 0
23384: PUSH
23385: LD_INT 2
23387: NEG
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: LD_INT 1
23398: NEG
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: LD_INT 2
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 0
23416: PUSH
23417: LD_INT 2
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 1
23426: NEG
23427: PUSH
23428: LD_INT 1
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: LD_INT 3
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 0
23447: PUSH
23448: LD_INT 3
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 1
23457: NEG
23458: PUSH
23459: LD_INT 2
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23484: NOP4
23488: PUSH
23489: LD_INT 0
23491: PUSH
23492: LD_INT 0
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 0
23501: PUSH
23502: LD_INT 1
23504: NEG
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: LD_INT 0
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 1
23522: PUSH
23523: LD_INT 1
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 0
23532: PUSH
23533: LD_INT 1
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 1
23542: NEG
23543: PUSH
23544: LD_INT 0
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 1
23553: NEG
23554: PUSH
23555: LD_INT 1
23557: NEG
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: LD_INT 1
23568: NEG
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 2
23576: PUSH
23577: LD_INT 0
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 2
23586: PUSH
23587: LD_INT 1
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 1
23596: NEG
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 2
23607: NEG
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 2
23618: NEG
23619: PUSH
23620: LD_INT 1
23622: NEG
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 2
23630: NEG
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 3
23641: NEG
23642: PUSH
23643: LD_INT 0
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 3
23652: NEG
23653: PUSH
23654: LD_INT 1
23656: NEG
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23680: NOP4
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 0
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 1
23738: NEG
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: NEG
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 1
23761: NEG
23762: PUSH
23763: LD_INT 2
23765: NEG
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 2
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 2
23783: PUSH
23784: LD_INT 2
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: LD_INT 2
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 2
23803: NEG
23804: PUSH
23805: LD_INT 1
23807: NEG
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 2
23815: NEG
23816: PUSH
23817: LD_INT 2
23819: NEG
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 2
23827: NEG
23828: PUSH
23829: LD_INT 3
23831: NEG
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 3
23839: NEG
23840: PUSH
23841: LD_INT 2
23843: NEG
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 3
23851: NEG
23852: PUSH
23853: LD_INT 3
23855: NEG
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23879: NOP4
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: LD_INT 0
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 0
23896: PUSH
23897: LD_INT 1
23899: NEG
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: LD_INT 0
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: LD_INT 1
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 1
23937: NEG
23938: PUSH
23939: LD_INT 0
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 1
23948: NEG
23949: PUSH
23950: LD_INT 1
23952: NEG
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 1
23960: NEG
23961: PUSH
23962: LD_INT 2
23964: NEG
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 0
23972: PUSH
23973: LD_INT 2
23975: NEG
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: LD_INT 1
23986: NEG
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 1
23994: PUSH
23995: LD_INT 2
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 0
24004: PUSH
24005: LD_INT 2
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 1
24014: NEG
24015: PUSH
24016: LD_INT 1
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 1
24025: NEG
24026: PUSH
24027: LD_INT 3
24029: NEG
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: LD_INT 3
24040: NEG
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: LD_INT 2
24051: NEG
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24075: NOP4
24079: PUSH
24080: LD_INT 0
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: LD_INT 1
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 0
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: NEG
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 1
24144: NEG
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: LD_INT 1
24159: NEG
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 2
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: LD_INT 1
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: NEG
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 2
24198: NEG
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 2
24209: NEG
24210: PUSH
24211: LD_INT 1
24213: NEG
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 2
24221: PUSH
24222: LD_INT 1
24224: NEG
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 3
24232: PUSH
24233: LD_INT 0
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 3
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24268: NOP4
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: LD_INT 0
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: LD_INT 1
24288: NEG
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 1
24296: PUSH
24297: LD_INT 0
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 1
24306: PUSH
24307: LD_INT 1
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: LD_INT 1
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 1
24326: NEG
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 1
24337: NEG
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 2
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: LD_INT 2
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 2
24391: NEG
24392: PUSH
24393: LD_INT 1
24395: NEG
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 2
24403: NEG
24404: PUSH
24405: LD_INT 2
24407: NEG
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 3
24415: PUSH
24416: LD_INT 2
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 3
24425: PUSH
24426: LD_INT 3
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 2
24435: PUSH
24436: LD_INT 3
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24461: NOP4
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: LD_INT 0
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: LD_INT 1
24481: NEG
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: LD_INT 0
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 1
24519: NEG
24520: PUSH
24521: LD_INT 0
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: NEG
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: LD_INT 2
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 0
24554: PUSH
24555: LD_INT 2
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: LD_INT 1
24568: NEG
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 2
24576: PUSH
24577: LD_INT 0
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 2
24586: PUSH
24587: LD_INT 1
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 2
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 1
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: LD_INT 2
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: LD_INT 1
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 2
24637: NEG
24638: PUSH
24639: LD_INT 0
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 2
24648: NEG
24649: PUSH
24650: LD_INT 1
24652: NEG
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 2
24660: NEG
24661: PUSH
24662: LD_INT 2
24664: NEG
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24691: NOP4
24695: PUSH
24696: LD_INT 0
24698: PUSH
24699: LD_INT 0
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 0
24708: PUSH
24709: LD_INT 1
24711: NEG
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 1
24719: PUSH
24720: LD_INT 0
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 1
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: LD_INT 1
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: LD_INT 0
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 1
24760: NEG
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 1
24772: NEG
24773: PUSH
24774: LD_INT 2
24776: NEG
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 0
24784: PUSH
24785: LD_INT 2
24787: NEG
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 2
24806: PUSH
24807: LD_INT 0
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 2
24816: PUSH
24817: LD_INT 1
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 2
24826: PUSH
24827: LD_INT 2
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 1
24836: PUSH
24837: LD_INT 2
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 0
24846: PUSH
24847: LD_INT 2
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 1
24856: NEG
24857: PUSH
24858: LD_INT 1
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 2
24867: NEG
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 2
24878: NEG
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 2
24890: NEG
24891: PUSH
24892: LD_INT 2
24894: NEG
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24921: NOP4
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: LD_INT 1
24941: NEG
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 0
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 1
24979: NEG
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 1
24990: NEG
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: NEG
25003: PUSH
25004: LD_INT 2
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: LD_INT 2
25017: NEG
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 2
25036: PUSH
25037: LD_INT 0
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 2
25046: PUSH
25047: LD_INT 1
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 2
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 1
25086: NEG
25087: PUSH
25088: LD_INT 1
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 2
25097: NEG
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 2
25108: NEG
25109: PUSH
25110: LD_INT 1
25112: NEG
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 2
25120: NEG
25121: PUSH
25122: LD_INT 2
25124: NEG
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25151: NOP4
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: LD_INT 0
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 0
25168: PUSH
25169: LD_INT 1
25171: NEG
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 1
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 1
25209: NEG
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: NEG
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: LD_INT 2
25236: NEG
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: LD_INT 2
25247: NEG
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 2
25266: PUSH
25267: LD_INT 0
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 2
25276: PUSH
25277: LD_INT 1
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: LD_INT 2
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: LD_INT 2
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 1
25316: NEG
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 2
25327: NEG
25328: PUSH
25329: LD_INT 0
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 2
25338: NEG
25339: PUSH
25340: LD_INT 1
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 2
25350: NEG
25351: PUSH
25352: LD_INT 2
25354: NEG
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25381: NOP4
25385: PUSH
25386: LD_INT 0
25388: PUSH
25389: LD_INT 0
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: LD_INT 1
25401: NEG
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 1
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 1
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 1
25439: NEG
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 1
25450: NEG
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 1
25462: NEG
25463: PUSH
25464: LD_INT 2
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: LD_INT 2
25477: NEG
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 1
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 2
25496: PUSH
25497: LD_INT 0
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 2
25506: PUSH
25507: LD_INT 1
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 2
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: LD_INT 2
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: LD_INT 2
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 2
25557: NEG
25558: PUSH
25559: LD_INT 0
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 2
25568: NEG
25569: PUSH
25570: LD_INT 1
25572: NEG
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 2
25580: NEG
25581: PUSH
25582: LD_INT 2
25584: NEG
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25611: NOP4
25615: PUSH
25616: LD_INT 0
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: LD_INT 0
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 1
25669: NEG
25670: PUSH
25671: LD_INT 0
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: NEG
25681: PUSH
25682: LD_INT 1
25684: NEG
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 1
25692: NEG
25693: PUSH
25694: LD_INT 2
25696: NEG
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 0
25704: PUSH
25705: LD_INT 2
25707: NEG
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 1
25715: PUSH
25716: LD_INT 1
25718: NEG
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 2
25726: PUSH
25727: LD_INT 0
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 2
25736: PUSH
25737: LD_INT 1
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 2
25746: PUSH
25747: LD_INT 2
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 1
25756: PUSH
25757: LD_INT 2
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: LD_INT 2
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 1
25776: NEG
25777: PUSH
25778: LD_INT 1
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 2
25787: NEG
25788: PUSH
25789: LD_INT 0
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 2
25798: NEG
25799: PUSH
25800: LD_INT 1
25802: NEG
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 2
25810: NEG
25811: PUSH
25812: LD_INT 2
25814: NEG
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
25841: NOP4
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: LD_INT 0
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 0
25858: PUSH
25859: LD_INT 1
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 1
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: PUSH
25901: LD_INT 0
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 1
25910: NEG
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: NEG
25923: PUSH
25924: LD_INT 2
25926: NEG
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: LD_INT 2
25937: NEG
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 2
25956: PUSH
25957: LD_INT 0
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 2
25966: PUSH
25967: LD_INT 1
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 2
25976: PUSH
25977: LD_INT 2
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: LD_INT 2
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: LD_INT 2
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 1
26006: NEG
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 2
26017: NEG
26018: PUSH
26019: LD_INT 0
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 2
26028: NEG
26029: PUSH
26030: LD_INT 1
26032: NEG
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 2
26040: NEG
26041: PUSH
26042: LD_INT 2
26044: NEG
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 2
26052: NEG
26053: PUSH
26054: LD_INT 3
26056: NEG
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: NEG
26065: PUSH
26066: LD_INT 3
26068: NEG
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: LD_INT 2
26079: NEG
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 2
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26121: NOP4
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: LD_INT 1
26141: NEG
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 1
26149: PUSH
26150: LD_INT 0
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: LD_INT 1
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: LD_INT 1
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 1
26179: NEG
26180: PUSH
26181: LD_INT 0
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 1
26190: NEG
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 1
26202: NEG
26203: PUSH
26204: LD_INT 2
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 0
26214: PUSH
26215: LD_INT 2
26217: NEG
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: LD_INT 1
26228: NEG
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 2
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 2
26246: PUSH
26247: LD_INT 1
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 2
26256: PUSH
26257: LD_INT 2
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: LD_INT 2
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: LD_INT 2
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 1
26286: NEG
26287: PUSH
26288: LD_INT 1
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 2
26297: NEG
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 2
26308: NEG
26309: PUSH
26310: LD_INT 1
26312: NEG
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 2
26320: NEG
26321: PUSH
26322: LD_INT 2
26324: NEG
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: LD_INT 2
26335: NEG
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 2
26343: PUSH
26344: LD_INT 1
26346: NEG
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 3
26354: PUSH
26355: LD_INT 1
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 3
26364: PUSH
26365: LD_INT 2
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26397: NOP4
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 1
26455: NEG
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: NEG
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: LD_INT 2
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: LD_INT 2
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: LD_INT 1
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 2
26532: PUSH
26533: LD_INT 2
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: PUSH
26543: LD_INT 2
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: LD_INT 2
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: NEG
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 2
26573: NEG
26574: PUSH
26575: LD_INT 0
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 2
26584: NEG
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: NEG
26597: PUSH
26598: LD_INT 2
26600: NEG
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 3
26608: PUSH
26609: LD_INT 1
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 3
26618: PUSH
26619: LD_INT 2
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 2
26628: PUSH
26629: LD_INT 3
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: PUSH
26639: LD_INT 3
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26671: NOP4
26675: PUSH
26676: LD_INT 0
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 1
26740: NEG
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 1
26752: NEG
26753: PUSH
26754: LD_INT 2
26756: NEG
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 0
26764: PUSH
26765: LD_INT 2
26767: NEG
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 1
26775: PUSH
26776: LD_INT 1
26778: NEG
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 2
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 2
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 2
26806: PUSH
26807: LD_INT 2
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: LD_INT 2
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: LD_INT 2
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: NEG
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 2
26847: NEG
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 2
26858: NEG
26859: PUSH
26860: LD_INT 1
26862: NEG
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 2
26870: NEG
26871: PUSH
26872: LD_INT 2
26874: NEG
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 2
26882: PUSH
26883: LD_INT 3
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: LD_INT 3
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 1
26902: NEG
26903: PUSH
26904: LD_INT 2
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 2
26913: NEG
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26947: NOP4
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 0
26964: PUSH
26965: LD_INT 1
26967: NEG
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 1
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: LD_INT 1
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: NEG
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: NEG
27029: PUSH
27030: LD_INT 2
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: LD_INT 2
27043: NEG
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: LD_INT 1
27054: NEG
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 2
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 2
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 2
27082: PUSH
27083: LD_INT 2
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 1
27092: PUSH
27093: LD_INT 2
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: LD_INT 2
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 1
27112: NEG
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 2
27123: NEG
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 2
27134: NEG
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 2
27146: NEG
27147: PUSH
27148: LD_INT 2
27150: NEG
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: NEG
27159: PUSH
27160: LD_INT 2
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 2
27169: NEG
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 3
27180: NEG
27181: PUSH
27182: LD_INT 1
27184: NEG
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 3
27192: NEG
27193: PUSH
27194: LD_INT 2
27196: NEG
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27227: NOP4
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: LD_INT 1
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: NEG
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 1
27296: NEG
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: LD_INT 2
27312: NEG
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: LD_INT 2
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: LD_INT 1
27334: NEG
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 2
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 2
27352: PUSH
27353: LD_INT 1
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 2
27362: PUSH
27363: LD_INT 2
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: LD_INT 2
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: LD_INT 1
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 2
27403: NEG
27404: PUSH
27405: LD_INT 0
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 2
27414: NEG
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 2
27426: NEG
27427: PUSH
27428: LD_INT 2
27430: NEG
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 2
27438: NEG
27439: PUSH
27440: LD_INT 3
27442: NEG
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 1
27450: NEG
27451: PUSH
27452: LD_INT 3
27454: NEG
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 3
27462: NEG
27463: PUSH
27464: LD_INT 1
27466: NEG
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 3
27474: NEG
27475: PUSH
27476: LD_INT 2
27478: NEG
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27509: NOP4
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: LD_INT 0
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 0
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: LD_INT 1
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 1
27567: NEG
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 1
27578: NEG
27579: PUSH
27580: LD_INT 1
27582: NEG
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 1
27590: NEG
27591: PUSH
27592: LD_INT 2
27594: NEG
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: LD_INT 2
27605: NEG
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: LD_INT 1
27616: NEG
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: LD_INT 0
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 2
27634: PUSH
27635: LD_INT 1
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: LD_INT 2
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: LD_INT 2
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 1
27664: NEG
27665: PUSH
27666: LD_INT 1
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 2
27675: NEG
27676: PUSH
27677: LD_INT 1
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 2
27687: NEG
27688: PUSH
27689: LD_INT 2
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 2
27699: NEG
27700: PUSH
27701: LD_INT 3
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 2
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 3
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: LD_INT 3
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: LD_INT 2
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 3
27753: NEG
27754: PUSH
27755: LD_INT 2
27757: NEG
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27788: NOP4
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 0
27805: PUSH
27806: LD_INT 1
27808: NEG
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: NEG
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 1
27869: NEG
27870: PUSH
27871: LD_INT 2
27873: NEG
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 0
27881: PUSH
27882: LD_INT 2
27884: NEG
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 1
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 2
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 2
27913: PUSH
27914: LD_INT 1
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 2
27923: PUSH
27924: LD_INT 2
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: LD_INT 2
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 2
27954: NEG
27955: PUSH
27956: LD_INT 0
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 2
27965: NEG
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 1
27977: NEG
27978: PUSH
27979: LD_INT 3
27981: NEG
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: LD_INT 2
27992: NEG
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 3
28000: PUSH
28001: LD_INT 2
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 2
28010: PUSH
28011: LD_INT 3
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 2
28020: NEG
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 3
28031: NEG
28032: PUSH
28033: LD_INT 1
28035: NEG
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28066: NOP4
28070: PUSH
28071: LD_INT 0
28073: PUSH
28074: LD_INT 0
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: LD_INT 1
28086: NEG
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 1
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: LD_INT 1
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: NEG
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 1
28135: NEG
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 1
28147: NEG
28148: PUSH
28149: LD_INT 2
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 2
28170: PUSH
28171: LD_INT 0
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 2
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 2
28190: PUSH
28191: LD_INT 2
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: LD_INT 2
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: LD_INT 2
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 1
28220: NEG
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 2
28243: NEG
28244: PUSH
28245: LD_INT 2
28247: NEG
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 2
28255: NEG
28256: PUSH
28257: LD_INT 3
28259: NEG
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 2
28267: PUSH
28268: LD_INT 1
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 3
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: PUSH
28289: LD_INT 3
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 1
28298: NEG
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 3
28309: NEG
28310: PUSH
28311: LD_INT 2
28313: NEG
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28344: NOP4
28348: PUSH
28349: LD_INT 0
28351: PUSH
28352: LD_INT 0
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: LD_INT 1
28364: NEG
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: LD_INT 1
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PUSH
28404: LD_INT 0
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 1
28413: NEG
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: LD_INT 2
28429: NEG
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 0
28437: PUSH
28438: LD_INT 2
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: LD_INT 1
28451: NEG
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 2
28459: PUSH
28460: LD_INT 1
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 2
28469: PUSH
28470: LD_INT 2
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 1
28479: PUSH
28480: LD_INT 2
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 0
28489: PUSH
28490: LD_INT 2
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 1
28499: NEG
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 2
28510: NEG
28511: PUSH
28512: LD_INT 0
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 2
28521: NEG
28522: PUSH
28523: LD_INT 1
28525: NEG
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: LD_INT 3
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: LD_INT 2
28548: NEG
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 3
28556: PUSH
28557: LD_INT 2
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 2
28566: PUSH
28567: LD_INT 3
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 2
28576: NEG
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 3
28587: NEG
28588: PUSH
28589: LD_INT 1
28591: NEG
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28622: NOP4
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: LD_INT 0
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 1
28680: NEG
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 1
28691: NEG
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 1
28703: NEG
28704: PUSH
28705: LD_INT 2
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: LD_INT 0
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 2
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 1
28746: PUSH
28747: LD_INT 2
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: LD_INT 2
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 1
28766: NEG
28767: PUSH
28768: LD_INT 1
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 2
28777: NEG
28778: PUSH
28779: LD_INT 0
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 2
28788: NEG
28789: PUSH
28790: LD_INT 1
28792: NEG
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 2
28800: NEG
28801: PUSH
28802: LD_INT 2
28804: NEG
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 2
28812: NEG
28813: PUSH
28814: LD_INT 3
28816: NEG
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 2
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 3
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 1
28845: PUSH
28846: LD_INT 3
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 1
28855: NEG
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 3
28866: NEG
28867: PUSH
28868: LD_INT 2
28870: NEG
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28901: NOP4
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: LD_INT 1
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 1
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: LD_INT 0
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 1
28970: NEG
28971: PUSH
28972: LD_INT 1
28974: NEG
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: LD_INT 2
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 0
28994: PUSH
28995: LD_INT 2
28997: NEG
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 2
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 2
29026: PUSH
29027: LD_INT 2
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 1
29036: PUSH
29037: LD_INT 2
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 1
29046: NEG
29047: PUSH
29048: LD_INT 1
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 2
29057: NEG
29058: PUSH
29059: LD_INT 0
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 2
29068: NEG
29069: PUSH
29070: LD_INT 1
29072: NEG
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 2
29080: NEG
29081: PUSH
29082: LD_INT 2
29084: NEG
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: LD_INT 3
29096: NEG
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 1
29104: PUSH
29105: LD_INT 2
29107: NEG
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 3
29115: PUSH
29116: LD_INT 2
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 2
29125: PUSH
29126: LD_INT 3
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 2
29135: NEG
29136: PUSH
29137: LD_INT 1
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 3
29146: NEG
29147: PUSH
29148: LD_INT 1
29150: NEG
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29181: NOP4
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: LD_INT 0
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 0
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 1
29239: NEG
29240: PUSH
29241: LD_INT 0
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 1
29250: NEG
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 2
29272: NEG
29273: PUSH
29274: LD_INT 1
29276: NEG
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29293: NOP4
29297: PUSH
29298: LD_INT 0
29300: PUSH
29301: LD_INT 0
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 0
29310: PUSH
29311: LD_INT 1
29313: NEG
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 1
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: LD_INT 1
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 0
29341: PUSH
29342: LD_INT 1
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 1
29351: NEG
29352: PUSH
29353: LD_INT 0
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 1
29362: NEG
29363: PUSH
29364: LD_INT 1
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 1
29374: NEG
29375: PUSH
29376: LD_INT 2
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 1
29386: PUSH
29387: LD_INT 2
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29405: NOP4
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 0
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: LD_INT 0
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: LD_INT 1
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 1
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29517: NOP4
29521: PUSH
29522: LD_INT 0
29524: PUSH
29525: LD_INT 0
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 0
29534: PUSH
29535: LD_INT 1
29537: NEG
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 1
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 1
29555: PUSH
29556: LD_INT 1
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 0
29565: PUSH
29566: LD_INT 1
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 1
29575: NEG
29576: PUSH
29577: LD_INT 0
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 1
29586: NEG
29587: PUSH
29588: LD_INT 1
29590: NEG
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 2
29598: PUSH
29599: LD_INT 1
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 2
29608: NEG
29609: PUSH
29610: LD_INT 1
29612: NEG
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29629: NOP4
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 0
29646: PUSH
29647: LD_INT 1
29649: NEG
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 1
29657: PUSH
29658: LD_INT 0
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 1
29667: PUSH
29668: LD_INT 1
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: LD_INT 1
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 1
29687: NEG
29688: PUSH
29689: LD_INT 0
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 1
29698: NEG
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: NEG
29711: PUSH
29712: LD_INT 2
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: LD_INT 2
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29741: NOP4
29745: PUSH
29746: LD_INT 0
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 0
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 1
29769: PUSH
29770: LD_INT 0
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 1
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 0
29789: PUSH
29790: LD_INT 1
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 1
29799: NEG
29800: PUSH
29801: LD_INT 0
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PUSH
29812: LD_INT 1
29814: NEG
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: LD_INT 1
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: LD_INT 1
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29853: NOP4
29857: PUSH
29858: LD_INT 0
29860: PUSH
29861: LD_INT 0
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: LD_INT 1
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 1
29881: PUSH
29882: LD_INT 0
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 1
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 0
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 1
29911: NEG
29912: PUSH
29913: LD_INT 0
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 1
29922: NEG
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: LD_INT 2
29938: NEG
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: LD_INT 0
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 2
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 2
29977: PUSH
29978: LD_INT 2
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: LD_INT 2
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 1
29997: NEG
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 2
30008: NEG
30009: PUSH
30010: LD_INT 0
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: LD_INT 1
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 2
30031: NEG
30032: PUSH
30033: LD_INT 2
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 2
30043: NEG
30044: PUSH
30045: LD_INT 3
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 2
30055: PUSH
30056: LD_INT 1
30058: NEG
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 3
30066: PUSH
30067: LD_INT 0
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 3
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 3
30086: PUSH
30087: LD_INT 2
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 3
30096: PUSH
30097: LD_INT 3
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 2
30106: PUSH
30107: LD_INT 3
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 2
30116: NEG
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 3
30127: NEG
30128: PUSH
30129: LD_INT 0
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 3
30138: NEG
30139: PUSH
30140: LD_INT 1
30142: NEG
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 3
30150: NEG
30151: PUSH
30152: LD_INT 2
30154: NEG
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 3
30162: NEG
30163: PUSH
30164: LD_INT 3
30166: NEG
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30203: NOP4
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: LD_INT 0
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 0
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 1
30231: PUSH
30232: LD_INT 0
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: NEG
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 1
30272: NEG
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: NEG
30285: PUSH
30286: LD_INT 2
30288: NEG
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: LD_INT 2
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: LD_INT 1
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 2
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 2
30328: PUSH
30329: LD_INT 2
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 1
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 0
30348: PUSH
30349: LD_INT 2
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 1
30358: NEG
30359: PUSH
30360: LD_INT 1
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 2
30369: NEG
30370: PUSH
30371: LD_INT 1
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 2
30381: NEG
30382: PUSH
30383: LD_INT 2
30385: NEG
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 2
30393: NEG
30394: PUSH
30395: LD_INT 3
30397: NEG
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: LD_INT 3
30409: NEG
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 0
30417: PUSH
30418: LD_INT 3
30420: NEG
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: LD_INT 2
30431: NEG
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 3
30439: PUSH
30440: LD_INT 2
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 3
30449: PUSH
30450: LD_INT 3
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 2
30459: PUSH
30460: LD_INT 3
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 1
30469: PUSH
30470: LD_INT 3
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 0
30479: PUSH
30480: LD_INT 3
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 1
30489: NEG
30490: PUSH
30491: LD_INT 2
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 3
30500: NEG
30501: PUSH
30502: LD_INT 2
30504: NEG
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 3
30512: NEG
30513: PUSH
30514: LD_INT 3
30516: NEG
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30553: NOP4
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: LD_INT 0
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: LD_INT 1
30573: NEG
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: LD_INT 0
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: LD_INT 1
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 1
30611: NEG
30612: PUSH
30613: LD_INT 0
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: NEG
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 1
30634: NEG
30635: PUSH
30636: LD_INT 2
30638: NEG
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: LD_INT 2
30649: NEG
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: LD_INT 1
30660: NEG
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: LD_INT 2
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 0
30698: PUSH
30699: LD_INT 2
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 1
30708: NEG
30709: PUSH
30710: LD_INT 1
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 2
30719: NEG
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 2
30730: NEG
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: LD_INT 3
30746: NEG
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: LD_INT 3
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: LD_INT 2
30768: NEG
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 2
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 3
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 3
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 1
30807: PUSH
30808: LD_INT 3
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 0
30817: PUSH
30818: LD_INT 3
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 1
30827: NEG
30828: PUSH
30829: LD_INT 2
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 2
30838: NEG
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 3
30849: NEG
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 3
30860: NEG
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30901: NOP4
30905: PUSH
30906: LD_INT 0
30908: PUSH
30909: LD_INT 0
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 0
30918: PUSH
30919: LD_INT 1
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: LD_INT 0
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 1
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: LD_INT 0
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 1
30970: NEG
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: NEG
30983: PUSH
30984: LD_INT 2
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 1
30994: PUSH
30995: LD_INT 1
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 2
31005: PUSH
31006: LD_INT 0
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 2
31015: PUSH
31016: LD_INT 1
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 2
31025: PUSH
31026: LD_INT 2
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 1
31035: PUSH
31036: LD_INT 2
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 1
31045: NEG
31046: PUSH
31047: LD_INT 1
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 2
31056: NEG
31057: PUSH
31058: LD_INT 0
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 2
31067: NEG
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 2
31079: NEG
31080: PUSH
31081: LD_INT 2
31083: NEG
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 2
31091: NEG
31092: PUSH
31093: LD_INT 3
31095: NEG
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 2
31103: PUSH
31104: LD_INT 1
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 3
31114: PUSH
31115: LD_INT 0
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 3
31134: PUSH
31135: LD_INT 2
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 3
31144: PUSH
31145: LD_INT 3
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 2
31154: PUSH
31155: LD_INT 3
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 2
31164: NEG
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 3
31175: NEG
31176: PUSH
31177: LD_INT 0
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 3
31186: NEG
31187: PUSH
31188: LD_INT 1
31190: NEG
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 3
31198: NEG
31199: PUSH
31200: LD_INT 2
31202: NEG
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 3
31210: NEG
31211: PUSH
31212: LD_INT 3
31214: NEG
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31251: NOP4
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 0
31268: PUSH
31269: LD_INT 1
31271: NEG
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 1
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: NEG
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 1
31320: NEG
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 1
31332: NEG
31333: PUSH
31334: LD_INT 2
31336: NEG
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: LD_INT 2
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: LD_INT 1
31358: NEG
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 2
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 2
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 1
31386: PUSH
31387: LD_INT 2
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 1
31406: NEG
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 2
31417: NEG
31418: PUSH
31419: LD_INT 1
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 2
31429: NEG
31430: PUSH
31431: LD_INT 2
31433: NEG
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 2
31441: NEG
31442: PUSH
31443: LD_INT 3
31445: NEG
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 1
31453: NEG
31454: PUSH
31455: LD_INT 3
31457: NEG
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 0
31465: PUSH
31466: LD_INT 3
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: LD_INT 2
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 3
31487: PUSH
31488: LD_INT 2
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 3
31497: PUSH
31498: LD_INT 3
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 2
31507: PUSH
31508: LD_INT 3
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: LD_INT 3
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: LD_INT 3
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: LD_INT 2
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 3
31548: NEG
31549: PUSH
31550: LD_INT 2
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 3
31560: NEG
31561: PUSH
31562: LD_INT 3
31564: NEG
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31601: NOP4
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: LD_INT 0
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 0
31618: PUSH
31619: LD_INT 1
31621: NEG
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: LD_INT 1
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: LD_INT 1
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 1
31659: NEG
31660: PUSH
31661: LD_INT 0
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: LD_INT 2
31686: NEG
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 0
31694: PUSH
31695: LD_INT 2
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 1
31705: PUSH
31706: LD_INT 1
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: LD_INT 0
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 2
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 1
31736: PUSH
31737: LD_INT 2
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: LD_INT 2
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: NEG
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 2
31767: NEG
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 2
31778: NEG
31779: PUSH
31780: LD_INT 1
31782: NEG
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 1
31790: NEG
31791: PUSH
31792: LD_INT 3
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: LD_INT 3
31805: NEG
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: LD_INT 2
31816: NEG
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 2
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 3
31835: PUSH
31836: LD_INT 0
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 3
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: LD_INT 3
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: LD_INT 3
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: NEG
31876: PUSH
31877: LD_INT 2
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 2
31886: NEG
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 3
31897: NEG
31898: PUSH
31899: LD_INT 0
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 3
31908: NEG
31909: PUSH
31910: LD_INT 1
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31949: NOP4
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 0
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: LD_INT 0
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 1
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: LD_INT 1
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 1
32030: NEG
32031: PUSH
32032: LD_INT 2
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: LD_INT 2
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: LD_INT 1
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 2
32064: NEG
32065: PUSH
32066: LD_INT 1
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 2
32076: NEG
32077: PUSH
32078: LD_INT 2
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32100: NOP4
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 0
32117: PUSH
32118: LD_INT 1
32120: NEG
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 1
32128: PUSH
32129: LD_INT 0
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 1
32138: PUSH
32139: LD_INT 1
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 0
32148: PUSH
32149: LD_INT 1
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 1
32158: NEG
32159: PUSH
32160: LD_INT 0
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 1
32169: NEG
32170: PUSH
32171: LD_INT 1
32173: NEG
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 1
32181: NEG
32182: PUSH
32183: LD_INT 2
32185: NEG
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: LD_INT 2
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: LD_INT 1
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 2
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32247: NOP4
32251: PUSH
32252: LD_INT 0
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: LD_INT 1
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 1
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: LD_INT 1
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: NEG
32317: PUSH
32318: LD_INT 1
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: LD_INT 1
32331: NEG
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 2
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 2
32359: PUSH
32360: LD_INT 2
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32391: NOP4
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: LD_INT 0
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: LD_INT 1
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: LD_INT 1
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: LD_INT 0
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: NEG
32461: PUSH
32462: LD_INT 1
32464: NEG
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 2
32472: PUSH
32473: LD_INT 1
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 2
32482: PUSH
32483: LD_INT 2
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 1
32492: PUSH
32493: LD_INT 2
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 0
32502: PUSH
32503: LD_INT 2
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 1
32512: NEG
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32535: NOP4
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 1
32563: PUSH
32564: LD_INT 0
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 0
32583: PUSH
32584: LD_INT 1
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: LD_INT 0
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 1
32604: NEG
32605: PUSH
32606: LD_INT 1
32608: NEG
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: LD_INT 2
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: LD_INT 2
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: LD_INT 1
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 2
32647: NEG
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: NEG
32659: PUSH
32660: LD_INT 1
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32682: NOP4
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: LD_INT 1
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 1
32740: NEG
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: LD_INT 2
32767: NEG
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: LD_INT 1
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 2
32786: NEG
32787: PUSH
32788: LD_INT 0
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 2
32797: NEG
32798: PUSH
32799: LD_INT 1
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 2
32809: NEG
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32833: NOP4
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 0
32850: PUSH
32851: LD_INT 1
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 1
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: LD_INT 1
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: LD_INT 1
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 1
32891: NEG
32892: PUSH
32893: LD_INT 0
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 1
32914: NEG
32915: PUSH
32916: LD_INT 2
32918: NEG
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: LD_INT 2
32929: NEG
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 2
32948: PUSH
32949: LD_INT 0
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 2
32958: PUSH
32959: LD_INT 1
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: PUSH
32969: LD_INT 2
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: LD_INT 2
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 1
32998: NEG
32999: PUSH
33000: LD_INT 1
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 2
33009: NEG
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 2
33020: NEG
33021: PUSH
33022: LD_INT 1
33024: NEG
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 2
33032: NEG
33033: PUSH
33034: LD_INT 2
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33063: NOP4
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 0
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 0
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: LD_INT 0
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 1
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: LD_INT 1
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 1
33144: NEG
33145: PUSH
33146: LD_INT 2
33148: NEG
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: LD_INT 2
33159: NEG
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: LD_INT 1
33170: NEG
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 2
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 2
33188: PUSH
33189: LD_INT 1
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 2
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: LD_INT 2
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: LD_INT 2
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 1
33228: NEG
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 2
33239: NEG
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 2
33250: NEG
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 2
33262: NEG
33263: PUSH
33264: LD_INT 2
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33293: NOP4
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 1
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: PUSH
33353: LD_INT 0
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: LD_INT 1
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: LD_INT 2
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: LD_INT 2
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 2
33408: PUSH
33409: LD_INT 0
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 2
33418: PUSH
33419: LD_INT 1
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 2
33428: PUSH
33429: LD_INT 2
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 1
33438: PUSH
33439: LD_INT 2
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 0
33448: PUSH
33449: LD_INT 2
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 1
33458: NEG
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 2
33469: NEG
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 2
33480: NEG
33481: PUSH
33482: LD_INT 1
33484: NEG
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 2
33492: NEG
33493: PUSH
33494: LD_INT 2
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33523: NOP4
33527: PUSH
33528: LD_INT 0
33530: PUSH
33531: LD_INT 0
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 0
33540: PUSH
33541: LD_INT 1
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: LD_INT 0
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 1
33561: PUSH
33562: LD_INT 1
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: LD_INT 1
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: LD_INT 1
33596: NEG
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: NEG
33605: PUSH
33606: LD_INT 2
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: LD_INT 2
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: LD_INT 1
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 2
33638: PUSH
33639: LD_INT 0
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 2
33648: PUSH
33649: LD_INT 1
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 2
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: LD_INT 2
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: LD_INT 2
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 1
33688: NEG
33689: PUSH
33690: LD_INT 1
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 2
33699: NEG
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 2
33710: NEG
33711: PUSH
33712: LD_INT 1
33714: NEG
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 2
33722: NEG
33723: PUSH
33724: LD_INT 2
33726: NEG
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33753: NOP4
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: LD_INT 0
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: LD_INT 1
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 1
33781: PUSH
33782: LD_INT 0
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 1
33791: PUSH
33792: LD_INT 1
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 1
33811: NEG
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 1
33822: NEG
33823: PUSH
33824: LD_INT 1
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: LD_INT 2
33838: NEG
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: LD_INT 2
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: LD_INT 1
33860: NEG
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 2
33868: PUSH
33869: LD_INT 0
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 2
33878: PUSH
33879: LD_INT 1
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 2
33888: PUSH
33889: LD_INT 2
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: PUSH
33899: LD_INT 2
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: LD_INT 2
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: LD_INT 1
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 2
33929: NEG
33930: PUSH
33931: LD_INT 0
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 2
33940: NEG
33941: PUSH
33942: LD_INT 1
33944: NEG
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 2
33952: NEG
33953: PUSH
33954: LD_INT 2
33956: NEG
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33983: NOP4
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 0
34000: PUSH
34001: LD_INT 1
34003: NEG
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: LD_INT 0
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 1
34021: PUSH
34022: LD_INT 1
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 0
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 1
34041: NEG
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: NEG
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 1
34064: NEG
34065: PUSH
34066: LD_INT 2
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 0
34076: PUSH
34077: LD_INT 2
34079: NEG
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: LD_INT 1
34090: NEG
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 2
34108: PUSH
34109: LD_INT 1
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: LD_INT 2
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 1
34128: PUSH
34129: LD_INT 2
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: NEG
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: NEG
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 2
34170: NEG
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 2
34182: NEG
34183: PUSH
34184: LD_INT 2
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34213: NOP4
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 0
34230: PUSH
34231: LD_INT 1
34233: NEG
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: LD_INT 0
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 1
34251: PUSH
34252: LD_INT 1
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: LD_INT 1
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 1
34282: NEG
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34301: NOP4
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 1
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: LD_INT 1
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: LD_INT 1
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: LD_INT 0
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34389: NOP4
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: LD_INT 1
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: LD_INT 0
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 0
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 1
34458: NEG
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34477: NOP4
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: LD_INT 1
34497: NEG
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 1
34505: PUSH
34506: LD_INT 0
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 1
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: LD_INT 1
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 1
34535: NEG
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34565: NOP4
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: LD_INT 0
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: LD_INT 1
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: LD_INT 1
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: LD_INT 1
34638: NEG
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34653: NOP4
34657: PUSH
34658: LD_INT 0
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: LD_INT 1
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 1
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 0
34701: PUSH
34702: LD_INT 1
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 1
34711: NEG
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 1
34722: NEG
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: ST_TO_ADDR
// end ; 1 :
34741: GO 40638
34743: LD_INT 1
34745: DOUBLE
34746: EQUAL
34747: IFTRUE 34751
34749: GO 37374
34751: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34752: NOP4
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: LD_INT 3
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: LD_INT 3
34774: NEG
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: PUSH
34783: LD_INT 2
34785: NEG
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34796: NOP4
34800: PUSH
34801: LD_INT 2
34803: PUSH
34804: LD_INT 1
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 3
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 3
34824: PUSH
34825: LD_INT 1
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: LIST
34836: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34837: NOP4
34841: PUSH
34842: LD_INT 3
34844: PUSH
34845: LD_INT 2
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 3
34854: PUSH
34855: LD_INT 3
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: LD_INT 3
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: LIST
34876: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34877: NOP4
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 3
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 3
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: LD_INT 2
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: LIST
34917: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34918: NOP4
34922: PUSH
34923: LD_INT 2
34925: NEG
34926: PUSH
34927: LD_INT 1
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 3
34936: NEG
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 3
34947: NEG
34948: PUSH
34949: LD_INT 1
34951: NEG
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: LIST
34961: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34962: NOP4
34966: PUSH
34967: LD_INT 2
34969: NEG
34970: PUSH
34971: LD_INT 3
34973: NEG
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 3
34981: NEG
34982: PUSH
34983: LD_INT 2
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 3
34993: NEG
34994: PUSH
34995: LD_INT 3
34997: NEG
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35008: NOP4
35012: PUSH
35013: LD_INT 1
35015: NEG
35016: PUSH
35017: LD_INT 3
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: LD_INT 3
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: PUSH
35039: LD_INT 2
35041: NEG
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35052: NOP4
35056: PUSH
35057: LD_INT 2
35059: PUSH
35060: LD_INT 1
35062: NEG
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 3
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 3
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: LIST
35092: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35093: NOP4
35097: PUSH
35098: LD_INT 3
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 3
35110: PUSH
35111: LD_INT 3
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 2
35120: PUSH
35121: LD_INT 3
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: LIST
35132: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35133: NOP4
35137: PUSH
35138: LD_INT 1
35140: PUSH
35141: LD_INT 3
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: LD_INT 3
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: LD_INT 2
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: LIST
35173: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35174: NOP4
35178: PUSH
35179: LD_INT 2
35181: NEG
35182: PUSH
35183: LD_INT 1
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 3
35192: NEG
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 3
35203: NEG
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: LIST
35217: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35218: NOP4
35222: PUSH
35223: LD_INT 2
35225: NEG
35226: PUSH
35227: LD_INT 3
35229: NEG
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 3
35237: NEG
35238: PUSH
35239: LD_INT 2
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 3
35249: NEG
35250: PUSH
35251: LD_INT 3
35253: NEG
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: LIST
35263: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35264: NOP4
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: LD_INT 3
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: LD_INT 4
35286: NEG
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 1
35294: PUSH
35295: LD_INT 3
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: LIST
35307: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35308: NOP4
35312: PUSH
35313: LD_INT 3
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 3
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 4
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: LIST
35348: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35349: NOP4
35353: PUSH
35354: LD_INT 3
35356: PUSH
35357: LD_INT 3
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 4
35366: PUSH
35367: LD_INT 3
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 3
35376: PUSH
35377: LD_INT 4
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: LIST
35388: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35389: NOP4
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: LD_INT 3
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: LD_INT 4
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: LD_INT 3
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35430: NOP4
35434: PUSH
35435: LD_INT 3
35437: NEG
35438: PUSH
35439: LD_INT 0
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 3
35448: NEG
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 4
35459: NEG
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: LIST
35473: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35474: NOP4
35478: PUSH
35479: LD_INT 3
35481: NEG
35482: PUSH
35483: LD_INT 3
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 3
35493: NEG
35494: PUSH
35495: LD_INT 4
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 4
35505: NEG
35506: PUSH
35507: LD_INT 3
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: LIST
35519: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35520: NOP4
35524: PUSH
35525: LD_INT 1
35527: NEG
35528: PUSH
35529: LD_INT 3
35531: NEG
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: LD_INT 3
35542: NEG
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 1
35550: PUSH
35551: LD_INT 2
35553: NEG
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 1
35561: NEG
35562: PUSH
35563: LD_INT 4
35565: NEG
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: LD_INT 4
35576: NEG
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 1
35584: PUSH
35585: LD_INT 3
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: PUSH
35597: LD_INT 5
35599: NEG
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: LD_INT 5
35610: NEG
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: LD_INT 4
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 1
35629: NEG
35630: PUSH
35631: LD_INT 6
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 0
35641: PUSH
35642: LD_INT 6
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 1
35652: PUSH
35653: LD_INT 5
35655: NEG
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35675: NOP4
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 3
35693: PUSH
35694: LD_INT 0
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 3
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 3
35713: PUSH
35714: LD_INT 1
35716: NEG
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 4
35724: PUSH
35725: LD_INT 0
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 4
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 4
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 5
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 5
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 5
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 6
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 6
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
35818: NOP4
35822: PUSH
35823: LD_INT 3
35825: PUSH
35826: LD_INT 2
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 3
35835: PUSH
35836: LD_INT 3
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 2
35845: PUSH
35846: LD_INT 3
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 4
35855: PUSH
35856: LD_INT 3
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 4
35865: PUSH
35866: LD_INT 4
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 3
35875: PUSH
35876: LD_INT 4
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 5
35885: PUSH
35886: LD_INT 4
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 5
35895: PUSH
35896: LD_INT 5
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 4
35905: PUSH
35906: LD_INT 5
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 6
35915: PUSH
35916: LD_INT 5
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 6
35925: PUSH
35926: LD_INT 6
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 5
35935: PUSH
35936: LD_INT 6
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35957: NOP4
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: LD_INT 3
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: LD_INT 3
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: LD_INT 4
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: LD_INT 4
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: LD_INT 3
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: LD_INT 5
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 0
36036: PUSH
36037: LD_INT 5
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: LD_INT 4
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: LD_INT 6
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: LD_INT 6
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: LD_INT 5
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36100: NOP4
36104: PUSH
36105: LD_INT 2
36107: NEG
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 3
36118: NEG
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 3
36129: NEG
36130: PUSH
36131: LD_INT 1
36133: NEG
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 3
36141: NEG
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 4
36152: NEG
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 4
36163: NEG
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 4
36175: NEG
36176: PUSH
36177: LD_INT 1
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 5
36186: NEG
36187: PUSH
36188: LD_INT 0
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 5
36197: NEG
36198: PUSH
36199: LD_INT 1
36201: NEG
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 5
36209: NEG
36210: PUSH
36211: LD_INT 1
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 6
36220: NEG
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 6
36231: NEG
36232: PUSH
36233: LD_INT 1
36235: NEG
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36255: NOP4
36259: PUSH
36260: LD_INT 2
36262: NEG
36263: PUSH
36264: LD_INT 3
36266: NEG
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 3
36274: NEG
36275: PUSH
36276: LD_INT 2
36278: NEG
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 3
36286: NEG
36287: PUSH
36288: LD_INT 3
36290: NEG
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 3
36298: NEG
36299: PUSH
36300: LD_INT 4
36302: NEG
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 4
36310: NEG
36311: PUSH
36312: LD_INT 3
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 4
36322: NEG
36323: PUSH
36324: LD_INT 4
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 4
36334: NEG
36335: PUSH
36336: LD_INT 5
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 5
36346: NEG
36347: PUSH
36348: LD_INT 4
36350: NEG
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 5
36358: NEG
36359: PUSH
36360: LD_INT 5
36362: NEG
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 5
36370: NEG
36371: PUSH
36372: LD_INT 6
36374: NEG
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 6
36382: NEG
36383: PUSH
36384: LD_INT 5
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 6
36394: NEG
36395: PUSH
36396: LD_INT 6
36398: NEG
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36418: NOP4
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: LD_INT 3
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 1
36448: PUSH
36449: LD_INT 2
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: LIST
36461: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36462: NOP4
36466: PUSH
36467: LD_INT 2
36469: PUSH
36470: LD_INT 0
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 2
36479: PUSH
36480: LD_INT 1
36482: NEG
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 3
36490: PUSH
36491: LD_INT 1
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: LIST
36502: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36503: NOP4
36507: PUSH
36508: LD_INT 2
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 3
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 2
36530: PUSH
36531: LD_INT 3
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: LIST
36542: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36543: NOP4
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: LD_INT 2
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 1
36560: PUSH
36561: LD_INT 3
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: NEG
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36584: NOP4
36588: PUSH
36589: LD_INT 2
36591: NEG
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 2
36602: NEG
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 3
36613: NEG
36614: PUSH
36615: LD_INT 1
36617: NEG
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: LIST
36627: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36628: NOP4
36632: PUSH
36633: LD_INT 2
36635: NEG
36636: PUSH
36637: LD_INT 2
36639: NEG
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: LD_INT 3
36651: NEG
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 3
36659: NEG
36660: PUSH
36661: LD_INT 2
36663: NEG
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36674: NOP4
36678: PUSH
36679: LD_INT 2
36681: NEG
36682: PUSH
36683: LD_INT 3
36685: NEG
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 1
36693: NEG
36694: PUSH
36695: LD_INT 3
36697: NEG
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36707: NOP4
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: LD_INT 2
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 2
36725: PUSH
36726: LD_INT 1
36728: NEG
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36738: NOP4
36742: PUSH
36743: LD_INT 3
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 3
36755: PUSH
36756: LD_INT 2
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
36767: NOP4
36771: PUSH
36772: LD_INT 2
36774: PUSH
36775: LD_INT 3
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: LD_INT 3
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36796: NOP4
36800: PUSH
36801: LD_INT 1
36803: NEG
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 2
36814: NEG
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36827: NOP4
36831: PUSH
36832: LD_INT 3
36834: NEG
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 3
36846: NEG
36847: PUSH
36848: LD_INT 2
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36860: NOP4
36864: PUSH
36865: LD_INT 1
36867: NEG
36868: PUSH
36869: LD_INT 3
36871: NEG
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 0
36879: PUSH
36880: LD_INT 3
36882: NEG
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: LD_INT 2
36893: NEG
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: LIST
36903: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36904: NOP4
36908: PUSH
36909: LD_INT 2
36911: PUSH
36912: LD_INT 1
36914: NEG
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 3
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 3
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: LIST
36944: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36945: NOP4
36949: PUSH
36950: LD_INT 3
36952: PUSH
36953: LD_INT 2
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 3
36962: PUSH
36963: LD_INT 3
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: LD_INT 3
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36985: NOP4
36989: PUSH
36990: LD_INT 1
36992: PUSH
36993: LD_INT 3
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: LD_INT 3
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: NEG
37013: PUSH
37014: LD_INT 2
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: LIST
37025: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37026: NOP4
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 3
37044: NEG
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 3
37055: NEG
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: LIST
37069: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37070: NOP4
37074: PUSH
37075: LD_INT 2
37077: NEG
37078: PUSH
37079: LD_INT 3
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 3
37089: NEG
37090: PUSH
37091: LD_INT 2
37093: NEG
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 3
37101: NEG
37102: PUSH
37103: LD_INT 3
37105: NEG
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: LIST
37115: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37116: NOP4
37120: PUSH
37121: LD_INT 1
37123: NEG
37124: PUSH
37125: LD_INT 2
37127: NEG
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: LD_INT 2
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 1
37146: PUSH
37147: LD_INT 1
37149: NEG
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: LIST
37159: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37160: NOP4
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 2
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 2
37188: PUSH
37189: LD_INT 1
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: LIST
37200: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37201: NOP4
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: LD_INT 2
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: LD_INT 2
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: LIST
37240: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37241: NOP4
37245: PUSH
37246: LD_INT 1
37248: PUSH
37249: LD_INT 2
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 0
37258: PUSH
37259: LD_INT 2
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 1
37268: NEG
37269: PUSH
37270: LD_INT 1
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: LIST
37281: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37282: NOP4
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 2
37300: NEG
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 2
37311: NEG
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: LIST
37325: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37326: NOP4
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: LD_INT 2
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 2
37345: NEG
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 2
37357: NEG
37358: PUSH
37359: LD_INT 2
37361: NEG
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: LIST
37371: ST_TO_ADDR
// end ; 2 :
37372: GO 40638
37374: LD_INT 2
37376: DOUBLE
37377: EQUAL
37378: IFTRUE 37382
37380: GO 40637
37382: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37383: NOP4
37387: PUSH
37388: LD_INT 4
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 4
37400: PUSH
37401: LD_INT 1
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 5
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 5
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 4
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 3
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 3
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 3
37462: PUSH
37463: LD_INT 2
37465: NEG
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 5
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 3
37483: PUSH
37484: LD_INT 3
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 3
37493: PUSH
37494: LD_INT 2
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 4
37503: PUSH
37504: LD_INT 3
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 4
37513: PUSH
37514: LD_INT 4
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 3
37523: PUSH
37524: LD_INT 4
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: PUSH
37534: LD_INT 3
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 2
37543: PUSH
37544: LD_INT 2
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 4
37553: PUSH
37554: LD_INT 2
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 2
37563: PUSH
37564: LD_INT 4
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: LD_INT 4
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: LD_INT 3
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: LD_INT 4
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: LD_INT 5
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 0
37613: PUSH
37614: LD_INT 5
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: LD_INT 4
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 1
37634: NEG
37635: PUSH
37636: LD_INT 3
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 2
37645: PUSH
37646: LD_INT 5
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 2
37655: NEG
37656: PUSH
37657: LD_INT 3
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 3
37666: NEG
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 3
37677: NEG
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 2
37689: NEG
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: NEG
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 3
37711: NEG
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 4
37722: NEG
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 4
37733: NEG
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 4
37745: NEG
37746: PUSH
37747: LD_INT 2
37749: NEG
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 2
37757: NEG
37758: PUSH
37759: LD_INT 2
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 4
37768: NEG
37769: PUSH
37770: LD_INT 4
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 4
37780: NEG
37781: PUSH
37782: LD_INT 5
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 3
37792: NEG
37793: PUSH
37794: LD_INT 4
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 3
37804: NEG
37805: PUSH
37806: LD_INT 3
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 4
37816: NEG
37817: PUSH
37818: LD_INT 3
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 5
37828: NEG
37829: PUSH
37830: LD_INT 4
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 5
37840: NEG
37841: PUSH
37842: LD_INT 5
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 3
37852: NEG
37853: PUSH
37854: LD_INT 5
37856: NEG
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 5
37864: NEG
37865: PUSH
37866: LD_INT 3
37868: NEG
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37921: NOP4
37925: PUSH
37926: LD_INT 4
37928: PUSH
37929: LD_INT 4
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 4
37938: PUSH
37939: LD_INT 3
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 5
37948: PUSH
37949: LD_INT 4
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 5
37958: PUSH
37959: LD_INT 5
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 4
37968: PUSH
37969: LD_INT 5
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 3
37978: PUSH
37979: LD_INT 4
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 3
37988: PUSH
37989: LD_INT 3
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 5
37998: PUSH
37999: LD_INT 3
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 3
38008: PUSH
38009: LD_INT 5
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: LD_INT 3
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: PUSH
38039: LD_INT 3
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: LD_INT 4
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: LD_INT 4
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 1
38068: NEG
38069: PUSH
38070: LD_INT 3
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: LD_INT 2
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 2
38090: PUSH
38091: LD_INT 4
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 2
38100: NEG
38101: PUSH
38102: LD_INT 2
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 4
38111: NEG
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 4
38122: NEG
38123: PUSH
38124: LD_INT 1
38126: NEG
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 3
38134: NEG
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 3
38145: NEG
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 4
38156: NEG
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 5
38167: NEG
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 5
38178: NEG
38179: PUSH
38180: LD_INT 1
38182: NEG
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 5
38190: NEG
38191: PUSH
38192: LD_INT 2
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 3
38202: NEG
38203: PUSH
38204: LD_INT 2
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 3
38213: NEG
38214: PUSH
38215: LD_INT 3
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 3
38225: NEG
38226: PUSH
38227: LD_INT 4
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: LD_INT 3
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: LD_INT 2
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 3
38261: NEG
38262: PUSH
38263: LD_INT 2
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 4
38273: NEG
38274: PUSH
38275: LD_INT 3
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 4
38285: NEG
38286: PUSH
38287: LD_INT 4
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 2
38297: NEG
38298: PUSH
38299: LD_INT 4
38301: NEG
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 4
38309: NEG
38310: PUSH
38311: LD_INT 2
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: LD_INT 4
38324: NEG
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: LD_INT 5
38335: NEG
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: LD_INT 4
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: PUSH
38355: LD_INT 3
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: LD_INT 3
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 1
38376: NEG
38377: PUSH
38378: LD_INT 4
38380: NEG
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 1
38388: NEG
38389: PUSH
38390: LD_INT 5
38392: NEG
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 2
38400: PUSH
38401: LD_INT 3
38403: NEG
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 2
38411: NEG
38412: PUSH
38413: LD_INT 5
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38468: NOP4
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: LD_INT 4
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: LD_INT 3
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 4
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 1
38505: PUSH
38506: LD_INT 5
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: LD_INT 5
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: LD_INT 4
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: LD_INT 3
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 2
38547: PUSH
38548: LD_INT 5
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 2
38557: NEG
38558: PUSH
38559: LD_INT 3
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 3
38568: NEG
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 3
38579: NEG
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 2
38591: NEG
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 2
38602: NEG
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 3
38613: NEG
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 4
38624: NEG
38625: PUSH
38626: LD_INT 0
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 4
38635: NEG
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 4
38647: NEG
38648: PUSH
38649: LD_INT 2
38651: NEG
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 2
38659: NEG
38660: PUSH
38661: LD_INT 2
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 4
38670: NEG
38671: PUSH
38672: LD_INT 4
38674: NEG
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 4
38682: NEG
38683: PUSH
38684: LD_INT 5
38686: NEG
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 3
38694: NEG
38695: PUSH
38696: LD_INT 4
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 3
38706: NEG
38707: PUSH
38708: LD_INT 3
38710: NEG
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 4
38718: NEG
38719: PUSH
38720: LD_INT 3
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 5
38730: NEG
38731: PUSH
38732: LD_INT 4
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 5
38742: NEG
38743: PUSH
38744: LD_INT 5
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 3
38754: NEG
38755: PUSH
38756: LD_INT 5
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 5
38766: NEG
38767: PUSH
38768: LD_INT 3
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: LD_INT 3
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: LD_INT 4
38792: NEG
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 1
38800: PUSH
38801: LD_INT 3
38803: NEG
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: LD_INT 2
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 2
38825: NEG
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 1
38833: NEG
38834: PUSH
38835: LD_INT 3
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: LD_INT 4
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 2
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 2
38868: NEG
38869: PUSH
38870: LD_INT 4
38872: NEG
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 4
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 4
38890: PUSH
38891: LD_INT 1
38893: NEG
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 5
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 5
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 4
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 3
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 3
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 3
38952: PUSH
38953: LD_INT 2
38955: NEG
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 5
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39018: NOP4
39022: PUSH
39023: LD_INT 4
39025: NEG
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 4
39036: NEG
39037: PUSH
39038: LD_INT 1
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 3
39048: NEG
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 3
39059: NEG
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 4
39070: NEG
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 5
39081: NEG
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 5
39092: NEG
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 5
39104: NEG
39105: PUSH
39106: LD_INT 2
39108: NEG
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 3
39116: NEG
39117: PUSH
39118: LD_INT 2
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 3
39127: NEG
39128: PUSH
39129: LD_INT 3
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 3
39139: NEG
39140: PUSH
39141: LD_INT 4
39143: NEG
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 2
39151: NEG
39152: PUSH
39153: LD_INT 3
39155: NEG
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 2
39163: NEG
39164: PUSH
39165: LD_INT 2
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 3
39175: NEG
39176: PUSH
39177: LD_INT 2
39179: NEG
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 4
39187: NEG
39188: PUSH
39189: LD_INT 3
39191: NEG
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 4
39199: NEG
39200: PUSH
39201: LD_INT 4
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 2
39211: NEG
39212: PUSH
39213: LD_INT 4
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 4
39223: NEG
39224: PUSH
39225: LD_INT 2
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: LD_INT 4
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: LD_INT 5
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: LD_INT 4
39260: NEG
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: LD_INT 3
39271: NEG
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: LD_INT 3
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: LD_INT 4
39294: NEG
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: LD_INT 5
39306: NEG
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 2
39314: PUSH
39315: LD_INT 3
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 2
39325: NEG
39326: PUSH
39327: LD_INT 5
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 3
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 3
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 4
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 4
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 3
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 2
39409: PUSH
39410: LD_INT 2
39412: NEG
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 4
39420: PUSH
39421: LD_INT 2
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 4
39430: PUSH
39431: LD_INT 4
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 4
39440: PUSH
39441: LD_INT 3
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 5
39450: PUSH
39451: LD_INT 4
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 5
39460: PUSH
39461: LD_INT 5
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 4
39470: PUSH
39471: LD_INT 5
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 3
39480: PUSH
39481: LD_INT 4
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 3
39490: PUSH
39491: LD_INT 3
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 5
39500: PUSH
39501: LD_INT 3
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 3
39510: PUSH
39511: LD_INT 5
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39565: NOP4
39569: PUSH
39570: LD_INT 4
39572: NEG
39573: PUSH
39574: LD_INT 4
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 4
39584: NEG
39585: PUSH
39586: LD_INT 5
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 3
39596: NEG
39597: PUSH
39598: LD_INT 4
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 3
39608: NEG
39609: PUSH
39610: LD_INT 3
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 4
39620: NEG
39621: PUSH
39622: LD_INT 3
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 5
39632: NEG
39633: PUSH
39634: LD_INT 4
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 5
39644: NEG
39645: PUSH
39646: LD_INT 5
39648: NEG
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 3
39656: NEG
39657: PUSH
39658: LD_INT 5
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 5
39668: NEG
39669: PUSH
39670: LD_INT 3
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: LD_INT 3
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: LD_INT 4
39694: NEG
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: PUSH
39703: LD_INT 3
39705: NEG
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: LD_INT 2
39716: NEG
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: LD_INT 2
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: NEG
39736: PUSH
39737: LD_INT 3
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: NEG
39748: PUSH
39749: LD_INT 4
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 2
39759: PUSH
39760: LD_INT 2
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 2
39770: NEG
39771: PUSH
39772: LD_INT 4
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 4
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 4
39792: PUSH
39793: LD_INT 1
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 5
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 5
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 4
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 3
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 3
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 3
39854: PUSH
39855: LD_INT 2
39857: NEG
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 5
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 3
39875: PUSH
39876: LD_INT 3
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 3
39885: PUSH
39886: LD_INT 2
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 4
39895: PUSH
39896: LD_INT 3
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 4
39905: PUSH
39906: LD_INT 4
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 3
39915: PUSH
39916: LD_INT 4
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 2
39925: PUSH
39926: LD_INT 3
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 2
39935: PUSH
39936: LD_INT 2
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 4
39945: PUSH
39946: LD_INT 2
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: LD_INT 4
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 4
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: LD_INT 3
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: PUSH
39986: LD_INT 4
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 5
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 5
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: LD_INT 4
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: LD_INT 3
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 2
40037: PUSH
40038: LD_INT 5
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: LD_INT 3
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40103: NOP4
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: LD_INT 4
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: LD_INT 5
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: LD_INT 4
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: LD_INT 3
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: LD_INT 3
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: LD_INT 4
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: LD_INT 5
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: LD_INT 3
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: LD_INT 5
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 3
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 3
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 4
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 4
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 3
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 2
40284: PUSH
40285: LD_INT 2
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 4
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 4
40305: PUSH
40306: LD_INT 4
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 4
40315: PUSH
40316: LD_INT 3
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 5
40325: PUSH
40326: LD_INT 4
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 5
40335: PUSH
40336: LD_INT 5
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 4
40345: PUSH
40346: LD_INT 5
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 3
40355: PUSH
40356: LD_INT 4
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 3
40365: PUSH
40366: LD_INT 3
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 5
40375: PUSH
40376: LD_INT 3
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 3
40385: PUSH
40386: LD_INT 5
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: LD_INT 3
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 3
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: LD_INT 4
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: LD_INT 4
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: LD_INT 3
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 2
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 2
40467: PUSH
40468: LD_INT 4
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 2
40477: NEG
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 4
40488: NEG
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 4
40499: NEG
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 3
40511: NEG
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 3
40522: NEG
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 4
40533: NEG
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 5
40544: NEG
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 5
40555: NEG
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 5
40567: NEG
40568: PUSH
40569: LD_INT 2
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 3
40579: NEG
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: ST_TO_ADDR
// end ; end ;
40635: GO 40638
40637: POP
// case btype of b_depot , b_warehouse :
40638: NOP4
40642: PUSH
40643: LD_INT 0
40645: DOUBLE
40646: EQUAL
40647: IFTRUE 40657
40649: LD_INT 1
40651: DOUBLE
40652: EQUAL
40653: IFTRUE 40657
40655: GO 40858
40657: POP
// case nation of nation_american :
40658: NOP4
40662: PUSH
40663: LD_INT 1
40665: DOUBLE
40666: EQUAL
40667: IFTRUE 40671
40669: GO 40727
40671: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40672: NOP4
40676: PUSH
40677: NOP4
40681: PUSH
40682: NOP4
40686: PUSH
40687: NOP4
40691: PUSH
40692: NOP4
40696: PUSH
40697: NOP4
40701: PUSH
40702: NOP4
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: PUSH
40715: NOP4
40719: PUSH
40720: LD_INT 1
40722: PLUS
40723: ARRAY
40724: ST_TO_ADDR
40725: GO 40856
40727: LD_INT 2
40729: DOUBLE
40730: EQUAL
40731: IFTRUE 40735
40733: GO 40791
40735: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40736: NOP4
40740: PUSH
40741: NOP4
40745: PUSH
40746: NOP4
40750: PUSH
40751: NOP4
40755: PUSH
40756: NOP4
40760: PUSH
40761: NOP4
40765: PUSH
40766: NOP4
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: PUSH
40779: NOP4
40783: PUSH
40784: LD_INT 1
40786: PLUS
40787: ARRAY
40788: ST_TO_ADDR
40789: GO 40856
40791: LD_INT 3
40793: DOUBLE
40794: EQUAL
40795: IFTRUE 40799
40797: GO 40855
40799: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
40800: NOP4
40804: PUSH
40805: NOP4
40809: PUSH
40810: NOP4
40814: PUSH
40815: NOP4
40819: PUSH
40820: NOP4
40824: PUSH
40825: NOP4
40829: PUSH
40830: NOP4
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: PUSH
40843: NOP4
40847: PUSH
40848: LD_INT 1
40850: PLUS
40851: ARRAY
40852: ST_TO_ADDR
40853: GO 40856
40855: POP
40856: GO 41411
40858: LD_INT 2
40860: DOUBLE
40861: EQUAL
40862: IFTRUE 40872
40864: LD_INT 3
40866: DOUBLE
40867: EQUAL
40868: IFTRUE 40872
40870: GO 40928
40872: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
40873: NOP4
40877: PUSH
40878: NOP4
40882: PUSH
40883: NOP4
40887: PUSH
40888: NOP4
40892: PUSH
40893: NOP4
40897: PUSH
40898: NOP4
40902: PUSH
40903: NOP4
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: PUSH
40916: NOP4
40920: PUSH
40921: LD_INT 1
40923: PLUS
40924: ARRAY
40925: ST_TO_ADDR
40926: GO 41411
40928: LD_INT 16
40930: DOUBLE
40931: EQUAL
40932: IFTRUE 40990
40934: LD_INT 17
40936: DOUBLE
40937: EQUAL
40938: IFTRUE 40990
40940: LD_INT 18
40942: DOUBLE
40943: EQUAL
40944: IFTRUE 40990
40946: LD_INT 19
40948: DOUBLE
40949: EQUAL
40950: IFTRUE 40990
40952: LD_INT 22
40954: DOUBLE
40955: EQUAL
40956: IFTRUE 40990
40958: LD_INT 20
40960: DOUBLE
40961: EQUAL
40962: IFTRUE 40990
40964: LD_INT 21
40966: DOUBLE
40967: EQUAL
40968: IFTRUE 40990
40970: LD_INT 23
40972: DOUBLE
40973: EQUAL
40974: IFTRUE 40990
40976: LD_INT 24
40978: DOUBLE
40979: EQUAL
40980: IFTRUE 40990
40982: LD_INT 25
40984: DOUBLE
40985: EQUAL
40986: IFTRUE 40990
40988: GO 41046
40990: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40991: NOP4
40995: PUSH
40996: NOP4
41000: PUSH
41001: NOP4
41005: PUSH
41006: NOP4
41010: PUSH
41011: NOP4
41015: PUSH
41016: NOP4
41020: PUSH
41021: NOP4
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: PUSH
41034: NOP4
41038: PUSH
41039: LD_INT 1
41041: PLUS
41042: ARRAY
41043: ST_TO_ADDR
41044: GO 41411
41046: LD_INT 6
41048: DOUBLE
41049: EQUAL
41050: IFTRUE 41102
41052: LD_INT 7
41054: DOUBLE
41055: EQUAL
41056: IFTRUE 41102
41058: LD_INT 8
41060: DOUBLE
41061: EQUAL
41062: IFTRUE 41102
41064: LD_INT 13
41066: DOUBLE
41067: EQUAL
41068: IFTRUE 41102
41070: LD_INT 12
41072: DOUBLE
41073: EQUAL
41074: IFTRUE 41102
41076: LD_INT 15
41078: DOUBLE
41079: EQUAL
41080: IFTRUE 41102
41082: LD_INT 11
41084: DOUBLE
41085: EQUAL
41086: IFTRUE 41102
41088: LD_INT 14
41090: DOUBLE
41091: EQUAL
41092: IFTRUE 41102
41094: LD_INT 10
41096: DOUBLE
41097: EQUAL
41098: IFTRUE 41102
41100: GO 41158
41102: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41103: NOP4
41107: PUSH
41108: NOP4
41112: PUSH
41113: NOP4
41117: PUSH
41118: NOP4
41122: PUSH
41123: NOP4
41127: PUSH
41128: NOP4
41132: PUSH
41133: NOP4
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: PUSH
41146: NOP4
41150: PUSH
41151: LD_INT 1
41153: PLUS
41154: ARRAY
41155: ST_TO_ADDR
41156: GO 41411
41158: LD_INT 36
41160: DOUBLE
41161: EQUAL
41162: IFTRUE 41166
41164: GO 41222
41166: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41167: NOP4
41171: PUSH
41172: NOP4
41176: PUSH
41177: NOP4
41181: PUSH
41182: NOP4
41186: PUSH
41187: NOP4
41191: PUSH
41192: NOP4
41196: PUSH
41197: NOP4
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: PUSH
41210: NOP4
41214: PUSH
41215: LD_INT 1
41217: PLUS
41218: ARRAY
41219: ST_TO_ADDR
41220: GO 41411
41222: LD_INT 4
41224: DOUBLE
41225: EQUAL
41226: IFTRUE 41248
41228: LD_INT 5
41230: DOUBLE
41231: EQUAL
41232: IFTRUE 41248
41234: LD_INT 34
41236: DOUBLE
41237: EQUAL
41238: IFTRUE 41248
41240: LD_INT 37
41242: DOUBLE
41243: EQUAL
41244: IFTRUE 41248
41246: GO 41304
41248: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41249: NOP4
41253: PUSH
41254: NOP4
41258: PUSH
41259: NOP4
41263: PUSH
41264: NOP4
41268: PUSH
41269: NOP4
41273: PUSH
41274: NOP4
41278: PUSH
41279: NOP4
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: PUSH
41292: NOP4
41296: PUSH
41297: LD_INT 1
41299: PLUS
41300: ARRAY
41301: ST_TO_ADDR
41302: GO 41411
41304: LD_INT 31
41306: DOUBLE
41307: EQUAL
41308: IFTRUE 41354
41310: LD_INT 32
41312: DOUBLE
41313: EQUAL
41314: IFTRUE 41354
41316: LD_INT 33
41318: DOUBLE
41319: EQUAL
41320: IFTRUE 41354
41322: LD_INT 27
41324: DOUBLE
41325: EQUAL
41326: IFTRUE 41354
41328: LD_INT 26
41330: DOUBLE
41331: EQUAL
41332: IFTRUE 41354
41334: LD_INT 28
41336: DOUBLE
41337: EQUAL
41338: IFTRUE 41354
41340: LD_INT 29
41342: DOUBLE
41343: EQUAL
41344: IFTRUE 41354
41346: LD_INT 30
41348: DOUBLE
41349: EQUAL
41350: IFTRUE 41354
41352: GO 41410
41354: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41355: NOP4
41359: PUSH
41360: NOP4
41364: PUSH
41365: NOP4
41369: PUSH
41370: NOP4
41374: PUSH
41375: NOP4
41379: PUSH
41380: NOP4
41384: PUSH
41385: NOP4
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: PUSH
41398: NOP4
41402: PUSH
41403: LD_INT 1
41405: PLUS
41406: ARRAY
41407: ST_TO_ADDR
41408: GO 41411
41410: POP
// temp_list2 = [ ] ;
41411: NOP4
41415: PUSH
41416: EMPTY
41417: ST_TO_ADDR
// for i in temp_list do
41418: NOP4
41422: PUSH
41423: NOP4
41427: PUSH
41428: FOR_IN
41429: IFFALSE 41481
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41431: NOP4
41435: PUSH
41436: NOP4
41440: PUSH
41441: NOP4
41445: PUSH
41446: LD_INT 1
41448: ARRAY
41449: PUSH
41450: NOP4
41454: PLUS
41455: PUSH
41456: NOP4
41460: PUSH
41461: LD_INT 2
41463: ARRAY
41464: PUSH
41465: NOP4
41469: PLUS
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: EMPTY
41476: LIST
41477: ADD
41478: ST_TO_ADDR
41479: GO 41428
41481: POP
41482: POP
// result = temp_list2 ;
41483: NOP4
41487: PUSH
41488: NOP4
41492: ST_TO_ADDR
// end ;
41493: LD_VAR 0 7
41497: RET
// export function EnemyInRange ( unit , dist ) ; begin
41498: LD_INT 0
41500: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41501: NOP4
41505: PUSH
41506: NOP4
41510: PPUSH
41511: NOP4
41515: PPUSH
41516: NOP4
41520: PPUSH
41521: NOP4
41525: PPUSH
41526: NOP4
41530: PPUSH
41531: NOP4
41535: PPUSH
41536: NOP4
41540: PPUSH
41541: NOP4
41545: PUSH
41546: LD_INT 4
41548: ARRAY
41549: ST_TO_ADDR
// end ;
41550: LD_VAR 0 3
41554: RET
// export function PlayerSeeMe ( unit ) ; begin
41555: LD_INT 0
41557: PPUSH
// result := See ( your_side , unit ) ;
41558: NOP4
41562: PUSH
41563: NOP4
41567: PPUSH
41568: NOP4
41572: PPUSH
41573: NOP4
41577: ST_TO_ADDR
// end ;
41578: LD_VAR 0 2
41582: RET
// export function ReverseDir ( unit ) ; begin
41583: LD_INT 0
41585: PPUSH
// if not unit then
41586: NOP4
41590: NOT
41591: IFFALSE 41595
// exit ;
41593: GO 41618
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41595: NOP4
41599: PUSH
41600: NOP4
41604: PPUSH
41605: NOP4
41609: PUSH
41610: LD_INT 3
41612: PLUS
41613: PUSH
41614: LD_INT 6
41616: MOD
41617: ST_TO_ADDR
// end ;
41618: LD_VAR 0 2
41622: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
41623: LD_INT 0
41625: PPUSH
41626: PPUSH
41627: PPUSH
41628: PPUSH
41629: PPUSH
// if not hexes then
41630: NOP4
41634: NOT
41635: IFFALSE 41639
// exit ;
41637: GO 41787
// dist := 9999 ;
41639: NOP4
41643: PUSH
41644: LD_INT 9999
41646: ST_TO_ADDR
// for i = 1 to hexes do
41647: NOP4
41651: PUSH
41652: DOUBLE
41653: LD_INT 1
41655: DEC
41656: ST_TO_ADDR
41657: NOP4
41661: PUSH
41662: FOR_TO
41663: IFFALSE 41775
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
41665: NOP4
41669: PPUSH
41670: NOP4
41674: PUSH
41675: NOP4
41679: ARRAY
41680: PUSH
41681: LD_INT 1
41683: ARRAY
41684: PPUSH
41685: NOP4
41689: PUSH
41690: NOP4
41694: ARRAY
41695: PUSH
41696: LD_INT 2
41698: ARRAY
41699: PPUSH
41700: NOP4
41704: PUSH
41705: NOP4
41709: LESS
41710: IFFALSE 41773
// begin hex := hexes [ i ] ;
41712: NOP4
41716: PUSH
41717: NOP4
41721: PUSH
41722: NOP4
41726: ARRAY
41727: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41728: NOP4
41732: PUSH
41733: NOP4
41737: PPUSH
41738: NOP4
41742: PUSH
41743: NOP4
41747: ARRAY
41748: PUSH
41749: LD_INT 1
41751: ARRAY
41752: PPUSH
41753: NOP4
41757: PUSH
41758: NOP4
41762: ARRAY
41763: PUSH
41764: LD_INT 2
41766: ARRAY
41767: PPUSH
41768: NOP4
41772: ST_TO_ADDR
// end ; end ;
41773: GO 41662
41775: POP
41776: POP
// result := hex ;
41777: NOP4
41781: PUSH
41782: NOP4
41786: ST_TO_ADDR
// end ;
41787: LD_VAR 0 3
41791: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
41792: LD_INT 0
41794: PPUSH
41795: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
41796: NOP4
41800: NOT
41801: PUSH
41802: NOP4
41806: PUSH
41807: LD_INT 21
41809: PUSH
41810: LD_INT 2
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 23
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PPUSH
41831: NOP4
41835: IN
41836: NOT
41837: OR
41838: IFFALSE 41842
// exit ;
41840: GO 41889
// for i = 1 to 3 do
41842: NOP4
41846: PUSH
41847: DOUBLE
41848: LD_INT 1
41850: DEC
41851: ST_TO_ADDR
41852: LD_INT 3
41854: PUSH
41855: FOR_TO
41856: IFFALSE 41887
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
41858: NOP4
41862: PPUSH
41863: NOP4
41867: PPUSH
41868: NOP4
41872: PPUSH
41873: NOP4
41877: PPUSH
41878: LD_INT 1
41880: PPUSH
41881: NOP4
41885: GO 41855
41887: POP
41888: POP
// end ;
41889: LD_VAR 0 2
41893: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
41894: LD_INT 0
41896: PPUSH
41897: PPUSH
41898: PPUSH
41899: PPUSH
41900: PPUSH
41901: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
41902: NOP4
41906: NOT
41907: PUSH
41908: NOP4
41912: NOT
41913: OR
41914: PUSH
41915: NOP4
41919: PPUSH
41920: NOP4
41924: OR
41925: IFFALSE 41929
// exit ;
41927: GO 42370
// x := GetX ( enemy_unit ) ;
41929: NOP4
41933: PUSH
41934: NOP4
41938: PPUSH
41939: NOP4
41943: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
41944: NOP4
41948: PUSH
41949: NOP4
41953: PPUSH
41954: NOP4
41958: ST_TO_ADDR
// if not x or not y then
41959: NOP4
41963: NOT
41964: PUSH
41965: NOP4
41969: NOT
41970: OR
41971: IFFALSE 41975
// exit ;
41973: GO 42370
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
41975: NOP4
41979: PUSH
41980: NOP4
41984: PPUSH
41985: LD_INT 0
41987: PPUSH
41988: LD_INT 4
41990: PPUSH
41991: NOP4
41995: PUSH
41996: NOP4
42000: PPUSH
42001: LD_INT 0
42003: PPUSH
42004: LD_INT 4
42006: PPUSH
42007: NOP4
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: NOP4
42020: PPUSH
42021: LD_INT 1
42023: PPUSH
42024: LD_INT 4
42026: PPUSH
42027: NOP4
42031: PUSH
42032: NOP4
42036: PPUSH
42037: LD_INT 1
42039: PPUSH
42040: LD_INT 4
42042: PPUSH
42043: NOP4
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: NOP4
42056: PPUSH
42057: LD_INT 2
42059: PPUSH
42060: LD_INT 4
42062: PPUSH
42063: NOP4
42067: PUSH
42068: NOP4
42072: PPUSH
42073: LD_INT 2
42075: PPUSH
42076: LD_INT 4
42078: PPUSH
42079: NOP4
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: NOP4
42092: PPUSH
42093: LD_INT 3
42095: PPUSH
42096: LD_INT 4
42098: PPUSH
42099: NOP4
42103: PUSH
42104: NOP4
42108: PPUSH
42109: LD_INT 3
42111: PPUSH
42112: LD_INT 4
42114: PPUSH
42115: NOP4
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: NOP4
42128: PPUSH
42129: LD_INT 4
42131: PPUSH
42132: LD_INT 4
42134: PPUSH
42135: NOP4
42139: PUSH
42140: NOP4
42144: PPUSH
42145: LD_INT 4
42147: PPUSH
42148: LD_INT 4
42150: PPUSH
42151: NOP4
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: NOP4
42164: PPUSH
42165: LD_INT 5
42167: PPUSH
42168: LD_INT 4
42170: PPUSH
42171: NOP4
42175: PUSH
42176: NOP4
42180: PPUSH
42181: LD_INT 5
42183: PPUSH
42184: LD_INT 4
42186: PPUSH
42187: NOP4
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: ST_TO_ADDR
// for i = tmp downto 1 do
42204: NOP4
42208: PUSH
42209: DOUBLE
42210: NOP4
42214: INC
42215: ST_TO_ADDR
42216: LD_INT 1
42218: PUSH
42219: FOR_DOWNTO
42220: IFFALSE 42321
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42222: NOP4
42226: PUSH
42227: NOP4
42231: ARRAY
42232: PUSH
42233: LD_INT 1
42235: ARRAY
42236: PPUSH
42237: NOP4
42241: PUSH
42242: NOP4
42246: ARRAY
42247: PUSH
42248: LD_INT 2
42250: ARRAY
42251: PPUSH
42252: NOP4
42256: NOT
42257: PUSH
42258: NOP4
42262: PUSH
42263: NOP4
42267: ARRAY
42268: PUSH
42269: LD_INT 1
42271: ARRAY
42272: PPUSH
42273: NOP4
42277: PUSH
42278: NOP4
42282: ARRAY
42283: PUSH
42284: LD_INT 2
42286: ARRAY
42287: PPUSH
42288: NOP4
42292: PUSH
42293: LD_INT 0
42295: NONEQUAL
42296: OR
42297: IFFALSE 42319
// tmp := Delete ( tmp , i ) ;
42299: NOP4
42303: PUSH
42304: NOP4
42308: PPUSH
42309: NOP4
42313: PPUSH
42314: NOP4
42318: ST_TO_ADDR
42319: GO 42219
42321: POP
42322: POP
// j := GetClosestHex ( unit , tmp ) ;
42323: NOP4
42327: PUSH
42328: NOP4
42332: PPUSH
42333: NOP4
42337: PPUSH
42338: NOP4
42342: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42343: NOP4
42347: PPUSH
42348: NOP4
42352: PUSH
42353: LD_INT 1
42355: ARRAY
42356: PPUSH
42357: NOP4
42361: PUSH
42362: LD_INT 2
42364: ARRAY
42365: PPUSH
42366: NOP4
// end ;
42370: LD_VAR 0 3
42374: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
42375: LD_INT 0
42377: PPUSH
42378: PPUSH
42379: PPUSH
// uc_side = 0 ;
42380: LD_ADDR_OWVAR 20
42384: PUSH
42385: LD_INT 0
42387: ST_TO_ADDR
// uc_nation = 0 ;
42388: LD_ADDR_OWVAR 21
42392: PUSH
42393: LD_INT 0
42395: ST_TO_ADDR
// InitHc_All ( ) ;
42396: NOP4
// InitVc ;
42400: NOP4
// if mastodonts then
42404: NOP4
42408: IFFALSE 42475
// for i = 1 to mastodonts do
42410: NOP4
42414: PUSH
42415: DOUBLE
42416: LD_INT 1
42418: DEC
42419: ST_TO_ADDR
42420: NOP4
42424: PUSH
42425: FOR_TO
42426: IFFALSE 42473
// begin vc_chassis := 31 ;
42428: LD_ADDR_OWVAR 37
42432: PUSH
42433: LD_INT 31
42435: ST_TO_ADDR
// vc_control := control_rider ;
42436: LD_ADDR_OWVAR 38
42440: PUSH
42441: LD_INT 4
42443: ST_TO_ADDR
// animal := CreateVehicle ;
42444: NOP4
42448: PUSH
42449: NOP4
42453: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42454: NOP4
42458: PPUSH
42459: NOP4
42463: PPUSH
42464: LD_INT 0
42466: PPUSH
42467: NOP4
// end ;
42471: GO 42425
42473: POP
42474: POP
// if horses then
42475: NOP4
42479: IFFALSE 42546
// for i = 1 to horses do
42481: NOP4
42485: PUSH
42486: DOUBLE
42487: LD_INT 1
42489: DEC
42490: ST_TO_ADDR
42491: NOP4
42495: PUSH
42496: FOR_TO
42497: IFFALSE 42544
// begin hc_class := 21 ;
42499: LD_ADDR_OWVAR 28
42503: PUSH
42504: LD_INT 21
42506: ST_TO_ADDR
// hc_gallery :=  ;
42507: LD_ADDR_OWVAR 33
42511: PUSH
42512: LD_STRING 
42514: ST_TO_ADDR
// animal := CreateHuman ;
42515: NOP4
42519: PUSH
42520: NOP4
42524: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42525: NOP4
42529: PPUSH
42530: NOP4
42534: PPUSH
42535: LD_INT 0
42537: PPUSH
42538: NOP4
// end ;
42542: GO 42496
42544: POP
42545: POP
// if birds then
42546: NOP4
42550: IFFALSE 42617
// for i = 1 to birds do
42552: NOP4
42556: PUSH
42557: DOUBLE
42558: LD_INT 1
42560: DEC
42561: ST_TO_ADDR
42562: NOP4
42566: PUSH
42567: FOR_TO
42568: IFFALSE 42615
// begin hc_class = 18 ;
42570: LD_ADDR_OWVAR 28
42574: PUSH
42575: LD_INT 18
42577: ST_TO_ADDR
// hc_gallery =  ;
42578: LD_ADDR_OWVAR 33
42582: PUSH
42583: LD_STRING 
42585: ST_TO_ADDR
// animal := CreateHuman ;
42586: NOP4
42590: PUSH
42591: NOP4
42595: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42596: NOP4
42600: PPUSH
42601: NOP4
42605: PPUSH
42606: LD_INT 0
42608: PPUSH
42609: NOP4
// end ;
42613: GO 42567
42615: POP
42616: POP
// if tigers then
42617: NOP4
42621: IFFALSE 42705
// for i = 1 to tigers do
42623: NOP4
42627: PUSH
42628: DOUBLE
42629: LD_INT 1
42631: DEC
42632: ST_TO_ADDR
42633: NOP4
42637: PUSH
42638: FOR_TO
42639: IFFALSE 42703
// begin hc_class = class_tiger ;
42641: LD_ADDR_OWVAR 28
42645: PUSH
42646: LD_INT 14
42648: ST_TO_ADDR
// hc_gallery =  ;
42649: LD_ADDR_OWVAR 33
42653: PUSH
42654: LD_STRING 
42656: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
42657: LD_ADDR_OWVAR 35
42661: PUSH
42662: LD_INT 7
42664: NEG
42665: PPUSH
42666: LD_INT 7
42668: PPUSH
42669: NOP4
42673: ST_TO_ADDR
// animal := CreateHuman ;
42674: NOP4
42678: PUSH
42679: NOP4
42683: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42684: NOP4
42688: PPUSH
42689: NOP4
42693: PPUSH
42694: LD_INT 0
42696: PPUSH
42697: NOP4
// end ;
42701: GO 42638
42703: POP
42704: POP
// if apemans then
42705: NOP4
42709: IFFALSE 42832
// for i = 1 to apemans do
42711: NOP4
42715: PUSH
42716: DOUBLE
42717: LD_INT 1
42719: DEC
42720: ST_TO_ADDR
42721: NOP4
42725: PUSH
42726: FOR_TO
42727: IFFALSE 42830
// begin hc_class = class_apeman ;
42729: LD_ADDR_OWVAR 28
42733: PUSH
42734: LD_INT 12
42736: ST_TO_ADDR
// hc_gallery =  ;
42737: LD_ADDR_OWVAR 33
42741: PUSH
42742: LD_STRING 
42744: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
42745: LD_ADDR_OWVAR 35
42749: PUSH
42750: LD_INT 5
42752: NEG
42753: PPUSH
42754: LD_INT 5
42756: PPUSH
42757: NOP4
42761: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
42762: LD_ADDR_OWVAR 31
42766: PUSH
42767: LD_INT 1
42769: PPUSH
42770: LD_INT 3
42772: PPUSH
42773: NOP4
42777: PUSH
42778: LD_INT 1
42780: PPUSH
42781: LD_INT 3
42783: PPUSH
42784: NOP4
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: ST_TO_ADDR
// animal := CreateHuman ;
42801: NOP4
42805: PUSH
42806: NOP4
42810: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42811: NOP4
42815: PPUSH
42816: NOP4
42820: PPUSH
42821: LD_INT 0
42823: PPUSH
42824: NOP4
// end ;
42828: GO 42726
42830: POP
42831: POP
// if enchidnas then
42832: NOP4
42836: IFFALSE 42903
// for i = 1 to enchidnas do
42838: NOP4
42842: PUSH
42843: DOUBLE
42844: LD_INT 1
42846: DEC
42847: ST_TO_ADDR
42848: NOP4
42852: PUSH
42853: FOR_TO
42854: IFFALSE 42901
// begin hc_class = 13 ;
42856: LD_ADDR_OWVAR 28
42860: PUSH
42861: LD_INT 13
42863: ST_TO_ADDR
// hc_gallery =  ;
42864: LD_ADDR_OWVAR 33
42868: PUSH
42869: LD_STRING 
42871: ST_TO_ADDR
// animal := CreateHuman ;
42872: NOP4
42876: PUSH
42877: NOP4
42881: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42882: NOP4
42886: PPUSH
42887: NOP4
42891: PPUSH
42892: LD_INT 0
42894: PPUSH
42895: NOP4
// end ;
42899: GO 42853
42901: POP
42902: POP
// if fishes then
42903: NOP4
42907: IFFALSE 42974
// for i = 1 to fishes do
42909: NOP4
42913: PUSH
42914: DOUBLE
42915: LD_INT 1
42917: DEC
42918: ST_TO_ADDR
42919: NOP4
42923: PUSH
42924: FOR_TO
42925: IFFALSE 42972
// begin hc_class = 20 ;
42927: LD_ADDR_OWVAR 28
42931: PUSH
42932: LD_INT 20
42934: ST_TO_ADDR
// hc_gallery =  ;
42935: LD_ADDR_OWVAR 33
42939: PUSH
42940: LD_STRING 
42942: ST_TO_ADDR
// animal := CreateHuman ;
42943: NOP4
42947: PUSH
42948: NOP4
42952: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
42953: NOP4
42957: PPUSH
42958: NOP4
42962: PPUSH
42963: LD_INT 0
42965: PPUSH
42966: NOP4
// end ;
42970: GO 42924
42972: POP
42973: POP
// end ;
42974: LD_VAR 0 10
42978: RET
// export function WantHeal ( sci , unit ) ; begin
42979: LD_INT 0
42981: PPUSH
// if GetTaskList ( sci ) > 0 then
42982: NOP4
42986: PPUSH
42987: NOP4
42991: PUSH
42992: LD_INT 0
42994: GREATER
42995: IFFALSE 43065
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
42997: NOP4
43001: PPUSH
43002: NOP4
43006: PUSH
43007: LD_INT 1
43009: ARRAY
43010: PUSH
43011: LD_INT 1
43013: ARRAY
43014: PUSH
43015: LD_STRING l
43017: EQUAL
43018: PUSH
43019: NOP4
43023: PPUSH
43024: NOP4
43028: PUSH
43029: LD_INT 1
43031: ARRAY
43032: PUSH
43033: LD_INT 4
43035: ARRAY
43036: PUSH
43037: NOP4
43041: EQUAL
43042: AND
43043: IFFALSE 43055
// result := true else
43045: NOP4
43049: PUSH
43050: LD_INT 1
43052: ST_TO_ADDR
43053: GO 43063
// result := false ;
43055: NOP4
43059: PUSH
43060: LD_INT 0
43062: ST_TO_ADDR
// end else
43063: GO 43073
// result := false ;
43065: NOP4
43069: PUSH
43070: LD_INT 0
43072: ST_TO_ADDR
// end ;
43073: LD_VAR 0 3
43077: RET
// export function HealTarget ( sci ) ; begin
43078: LD_INT 0
43080: PPUSH
// if not sci then
43081: NOP4
43085: NOT
43086: IFFALSE 43090
// exit ;
43088: GO 43155
// result := 0 ;
43090: NOP4
43094: PUSH
43095: LD_INT 0
43097: ST_TO_ADDR
// if GetTaskList ( sci ) then
43098: NOP4
43102: PPUSH
43103: NOP4
43107: IFFALSE 43155
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43109: NOP4
43113: PPUSH
43114: NOP4
43118: PUSH
43119: LD_INT 1
43121: ARRAY
43122: PUSH
43123: LD_INT 1
43125: ARRAY
43126: PUSH
43127: LD_STRING l
43129: EQUAL
43130: IFFALSE 43155
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
43132: NOP4
43136: PUSH
43137: NOP4
43141: PPUSH
43142: NOP4
43146: PUSH
43147: LD_INT 1
43149: ARRAY
43150: PUSH
43151: LD_INT 4
43153: ARRAY
43154: ST_TO_ADDR
// end ;
43155: LD_VAR 0 2
43159: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
43160: LD_INT 0
43162: PPUSH
43163: PPUSH
43164: PPUSH
43165: PPUSH
// if not base_units then
43166: NOP4
43170: NOT
43171: IFFALSE 43175
// exit ;
43173: GO 43262
// result := false ;
43175: NOP4
43179: PUSH
43180: LD_INT 0
43182: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
43183: NOP4
43187: PUSH
43188: NOP4
43192: PPUSH
43193: LD_INT 21
43195: PUSH
43196: LD_INT 3
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PPUSH
43203: NOP4
43207: ST_TO_ADDR
// if not tmp then
43208: NOP4
43212: NOT
43213: IFFALSE 43217
// exit ;
43215: GO 43262
// for i in tmp do
43217: NOP4
43221: PUSH
43222: NOP4
43226: PUSH
43227: FOR_IN
43228: IFFALSE 43260
// begin result := EnemyInRange ( i , 22 ) ;
43230: NOP4
43234: PUSH
43235: NOP4
43239: PPUSH
43240: LD_INT 22
43242: PPUSH
43243: NOP4
43247: ST_TO_ADDR
// if result then
43248: NOP4
43252: IFFALSE 43258
// exit ;
43254: POP
43255: POP
43256: GO 43262
// end ;
43258: GO 43227
43260: POP
43261: POP
// end ;
43262: LD_VAR 0 2
43266: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
43267: LD_INT 0
43269: PPUSH
43270: PPUSH
// if not units then
43271: NOP4
43275: NOT
43276: IFFALSE 43280
// exit ;
43278: GO 43350
// result := [ ] ;
43280: NOP4
43284: PUSH
43285: EMPTY
43286: ST_TO_ADDR
// for i in units do
43287: NOP4
43291: PUSH
43292: NOP4
43296: PUSH
43297: FOR_IN
43298: IFFALSE 43348
// if GetTag ( i ) = tag then
43300: NOP4
43304: PPUSH
43305: NOP4
43309: PUSH
43310: NOP4
43314: EQUAL
43315: IFFALSE 43346
// result := Insert ( result , result + 1 , i ) ;
43317: NOP4
43321: PUSH
43322: NOP4
43326: PPUSH
43327: NOP4
43331: PUSH
43332: LD_INT 1
43334: PLUS
43335: PPUSH
43336: NOP4
43340: PPUSH
43341: NOP4
43345: ST_TO_ADDR
43346: GO 43297
43348: POP
43349: POP
// end ;
43350: LD_VAR 0 3
43354: RET
// export function IsDriver ( un ) ; begin
43355: LD_INT 0
43357: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
43358: NOP4
43362: PUSH
43363: NOP4
43367: PUSH
43368: LD_INT 55
43370: PUSH
43371: EMPTY
43372: LIST
43373: PPUSH
43374: NOP4
43378: IN
43379: ST_TO_ADDR
// end ;
43380: LD_VAR 0 2
43384: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
43385: LD_INT 0
43387: PPUSH
43388: PPUSH
// list := [ ] ;
43389: NOP4
43393: PUSH
43394: EMPTY
43395: ST_TO_ADDR
// case d of 0 :
43396: NOP4
43400: PUSH
43401: LD_INT 0
43403: DOUBLE
43404: EQUAL
43405: IFTRUE 43409
43407: GO 43542
43409: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
43410: NOP4
43414: PUSH
43415: NOP4
43419: PUSH
43420: LD_INT 4
43422: MINUS
43423: PUSH
43424: NOP4
43428: PUSH
43429: LD_INT 4
43431: MINUS
43432: PUSH
43433: LD_INT 2
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: LIST
43440: PUSH
43441: NOP4
43445: PUSH
43446: LD_INT 3
43448: MINUS
43449: PUSH
43450: NOP4
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: LIST
43462: PUSH
43463: NOP4
43467: PUSH
43468: LD_INT 4
43470: PLUS
43471: PUSH
43472: NOP4
43476: PUSH
43477: LD_INT 4
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: LIST
43484: PUSH
43485: NOP4
43489: PUSH
43490: LD_INT 3
43492: PLUS
43493: PUSH
43494: NOP4
43498: PUSH
43499: LD_INT 3
43501: PLUS
43502: PUSH
43503: LD_INT 5
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: PUSH
43511: NOP4
43515: PUSH
43516: NOP4
43520: PUSH
43521: LD_INT 4
43523: PLUS
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: LIST
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: ST_TO_ADDR
// end ; 1 :
43540: GO 44240
43542: LD_INT 1
43544: DOUBLE
43545: EQUAL
43546: IFTRUE 43550
43548: GO 43683
43550: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
43551: NOP4
43555: PUSH
43556: NOP4
43560: PUSH
43561: NOP4
43565: PUSH
43566: LD_INT 4
43568: MINUS
43569: PUSH
43570: LD_INT 3
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: LIST
43577: PUSH
43578: NOP4
43582: PUSH
43583: LD_INT 3
43585: MINUS
43586: PUSH
43587: NOP4
43591: PUSH
43592: LD_INT 3
43594: MINUS
43595: PUSH
43596: LD_INT 2
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: LIST
43603: PUSH
43604: NOP4
43608: PUSH
43609: LD_INT 4
43611: MINUS
43612: PUSH
43613: NOP4
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: LIST
43625: PUSH
43626: NOP4
43630: PUSH
43631: NOP4
43635: PUSH
43636: LD_INT 3
43638: PLUS
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: LIST
43647: PUSH
43648: NOP4
43652: PUSH
43653: LD_INT 4
43655: PLUS
43656: PUSH
43657: NOP4
43661: PUSH
43662: LD_INT 4
43664: PLUS
43665: PUSH
43666: LD_INT 5
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: LIST
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: ST_TO_ADDR
// end ; 2 :
43681: GO 44240
43683: LD_INT 2
43685: DOUBLE
43686: EQUAL
43687: IFTRUE 43691
43689: GO 43820
43691: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
43692: NOP4
43696: PUSH
43697: NOP4
43701: PUSH
43702: NOP4
43706: PUSH
43707: LD_INT 3
43709: MINUS
43710: PUSH
43711: LD_INT 3
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: LIST
43718: PUSH
43719: NOP4
43723: PUSH
43724: LD_INT 4
43726: PLUS
43727: PUSH
43728: NOP4
43732: PUSH
43733: LD_INT 4
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: LIST
43740: PUSH
43741: NOP4
43745: PUSH
43746: NOP4
43750: PUSH
43751: LD_INT 4
43753: PLUS
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: LIST
43762: PUSH
43763: NOP4
43767: PUSH
43768: LD_INT 3
43770: MINUS
43771: PUSH
43772: NOP4
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: LIST
43784: PUSH
43785: NOP4
43789: PUSH
43790: LD_INT 4
43792: MINUS
43793: PUSH
43794: NOP4
43798: PUSH
43799: LD_INT 4
43801: MINUS
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: LIST
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: ST_TO_ADDR
// end ; 3 :
43818: GO 44240
43820: LD_INT 3
43822: DOUBLE
43823: EQUAL
43824: IFTRUE 43828
43826: GO 43961
43828: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
43829: NOP4
43833: PUSH
43834: NOP4
43838: PUSH
43839: LD_INT 3
43841: PLUS
43842: PUSH
43843: NOP4
43847: PUSH
43848: LD_INT 4
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: LIST
43855: PUSH
43856: NOP4
43860: PUSH
43861: LD_INT 4
43863: PLUS
43864: PUSH
43865: NOP4
43869: PUSH
43870: LD_INT 4
43872: PLUS
43873: PUSH
43874: LD_INT 5
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: LIST
43881: PUSH
43882: NOP4
43886: PUSH
43887: LD_INT 4
43889: MINUS
43890: PUSH
43891: NOP4
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: LIST
43903: PUSH
43904: NOP4
43908: PUSH
43909: NOP4
43913: PUSH
43914: LD_INT 4
43916: MINUS
43917: PUSH
43918: LD_INT 3
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: LIST
43925: PUSH
43926: NOP4
43930: PUSH
43931: LD_INT 3
43933: MINUS
43934: PUSH
43935: NOP4
43939: PUSH
43940: LD_INT 3
43942: MINUS
43943: PUSH
43944: LD_INT 2
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: LIST
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: ST_TO_ADDR
// end ; 4 :
43959: GO 44240
43961: LD_INT 4
43963: DOUBLE
43964: EQUAL
43965: IFTRUE 43969
43967: GO 44102
43969: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
43970: NOP4
43974: PUSH
43975: NOP4
43979: PUSH
43980: NOP4
43984: PUSH
43985: LD_INT 4
43987: PLUS
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: PUSH
43997: NOP4
44001: PUSH
44002: LD_INT 3
44004: PLUS
44005: PUSH
44006: NOP4
44010: PUSH
44011: LD_INT 3
44013: PLUS
44014: PUSH
44015: LD_INT 5
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: LIST
44022: PUSH
44023: NOP4
44027: PUSH
44028: LD_INT 4
44030: PLUS
44031: PUSH
44032: NOP4
44036: PUSH
44037: LD_INT 4
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: LIST
44044: PUSH
44045: NOP4
44049: PUSH
44050: NOP4
44054: PUSH
44055: LD_INT 3
44057: MINUS
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: LIST
44066: PUSH
44067: NOP4
44071: PUSH
44072: LD_INT 4
44074: MINUS
44075: PUSH
44076: NOP4
44080: PUSH
44081: LD_INT 4
44083: MINUS
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: LIST
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: ST_TO_ADDR
// end ; 5 :
44100: GO 44240
44102: LD_INT 5
44104: DOUBLE
44105: EQUAL
44106: IFTRUE 44110
44108: GO 44239
44110: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44111: NOP4
44115: PUSH
44116: NOP4
44120: PUSH
44121: LD_INT 4
44123: MINUS
44124: PUSH
44125: NOP4
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: PUSH
44138: NOP4
44142: PUSH
44143: NOP4
44147: PUSH
44148: LD_INT 4
44150: MINUS
44151: PUSH
44152: LD_INT 3
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: PUSH
44160: NOP4
44164: PUSH
44165: LD_INT 4
44167: PLUS
44168: PUSH
44169: NOP4
44173: PUSH
44174: LD_INT 4
44176: PLUS
44177: PUSH
44178: LD_INT 5
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: LIST
44185: PUSH
44186: NOP4
44190: PUSH
44191: LD_INT 3
44193: PLUS
44194: PUSH
44195: NOP4
44199: PUSH
44200: LD_INT 4
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: LIST
44207: PUSH
44208: NOP4
44212: PUSH
44213: NOP4
44217: PUSH
44218: LD_INT 3
44220: PLUS
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: LIST
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: ST_TO_ADDR
// end ; end ;
44237: GO 44240
44239: POP
// result := list ;
44240: NOP4
44244: PUSH
44245: NOP4
44249: ST_TO_ADDR
// end ;
44250: LD_VAR 0 4
44254: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
44255: LD_INT 0
44257: PPUSH
44258: PPUSH
44259: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
44260: NOP4
44264: NOT
44265: PUSH
44266: NOP4
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: LD_INT 3
44279: PUSH
44280: LD_INT 4
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: IN
44289: NOT
44290: OR
44291: IFFALSE 44295
// exit ;
44293: GO 44387
// tmp := [ ] ;
44295: NOP4
44299: PUSH
44300: EMPTY
44301: ST_TO_ADDR
// for i in units do
44302: NOP4
44306: PUSH
44307: NOP4
44311: PUSH
44312: FOR_IN
44313: IFFALSE 44356
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
44315: NOP4
44319: PUSH
44320: NOP4
44324: PPUSH
44325: NOP4
44329: PUSH
44330: LD_INT 1
44332: PLUS
44333: PPUSH
44334: NOP4
44338: PPUSH
44339: NOP4
44343: PPUSH
44344: NOP4
44348: PPUSH
44349: NOP4
44353: ST_TO_ADDR
44354: GO 44312
44356: POP
44357: POP
// if not tmp then
44358: NOP4
44362: NOT
44363: IFFALSE 44367
// exit ;
44365: GO 44387
// result := SortListByListDesc ( units , tmp ) ;
44367: NOP4
44371: PUSH
44372: NOP4
44376: PPUSH
44377: NOP4
44381: PPUSH
44382: NOP4
44386: ST_TO_ADDR
// end ;
44387: LD_VAR 0 3
44391: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
44392: LD_INT 0
44394: PPUSH
44395: PPUSH
44396: PPUSH
// result := false ;
44397: NOP4
44401: PUSH
44402: LD_INT 0
44404: ST_TO_ADDR
// x := GetX ( building ) ;
44405: NOP4
44409: PUSH
44410: NOP4
44414: PPUSH
44415: NOP4
44419: ST_TO_ADDR
// y := GetY ( building ) ;
44420: NOP4
44424: PUSH
44425: NOP4
44429: PPUSH
44430: NOP4
44434: ST_TO_ADDR
// if not building or not x or not y then
44435: NOP4
44439: NOT
44440: PUSH
44441: NOP4
44445: NOT
44446: OR
44447: PUSH
44448: NOP4
44452: NOT
44453: OR
44454: IFFALSE 44458
// exit ;
44456: GO 44550
// if GetTaskList ( unit ) then
44458: NOP4
44462: PPUSH
44463: NOP4
44467: IFFALSE 44550
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44469: LD_STRING e
44471: PUSH
44472: NOP4
44476: PPUSH
44477: NOP4
44481: PUSH
44482: LD_INT 1
44484: ARRAY
44485: PUSH
44486: LD_INT 1
44488: ARRAY
44489: EQUAL
44490: PUSH
44491: NOP4
44495: PUSH
44496: NOP4
44500: PPUSH
44501: NOP4
44505: PUSH
44506: LD_INT 1
44508: ARRAY
44509: PUSH
44510: LD_INT 2
44512: ARRAY
44513: EQUAL
44514: AND
44515: PUSH
44516: NOP4
44520: PUSH
44521: NOP4
44525: PPUSH
44526: NOP4
44530: PUSH
44531: LD_INT 1
44533: ARRAY
44534: PUSH
44535: LD_INT 3
44537: ARRAY
44538: EQUAL
44539: AND
44540: IFFALSE 44550
// result := true end ;
44542: NOP4
44546: PUSH
44547: LD_INT 1
44549: ST_TO_ADDR
// end ;
44550: LD_VAR 0 3
44554: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
44555: LD_INT 0
44557: PPUSH
// result := false ;
44558: NOP4
44562: PUSH
44563: LD_INT 0
44565: ST_TO_ADDR
// if GetTaskList ( unit ) then
44566: NOP4
44570: PPUSH
44571: NOP4
44575: IFFALSE 44658
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44577: LD_STRING M
44579: PUSH
44580: NOP4
44584: PPUSH
44585: NOP4
44589: PUSH
44590: LD_INT 1
44592: ARRAY
44593: PUSH
44594: LD_INT 1
44596: ARRAY
44597: EQUAL
44598: PUSH
44599: NOP4
44603: PUSH
44604: NOP4
44608: PPUSH
44609: NOP4
44613: PUSH
44614: LD_INT 1
44616: ARRAY
44617: PUSH
44618: LD_INT 2
44620: ARRAY
44621: EQUAL
44622: AND
44623: PUSH
44624: NOP4
44628: PUSH
44629: NOP4
44633: PPUSH
44634: NOP4
44638: PUSH
44639: LD_INT 1
44641: ARRAY
44642: PUSH
44643: LD_INT 3
44645: ARRAY
44646: EQUAL
44647: AND
44648: IFFALSE 44658
// result := true ;
44650: NOP4
44654: PUSH
44655: LD_INT 1
44657: ST_TO_ADDR
// end ; end ;
44658: LD_VAR 0 4
44662: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
44663: LD_INT 0
44665: PPUSH
44666: PPUSH
44667: PPUSH
44668: PPUSH
// if not unit or not area then
44669: NOP4
44673: NOT
44674: PUSH
44675: NOP4
44679: NOT
44680: OR
44681: IFFALSE 44685
// exit ;
44683: GO 44849
// tmp := AreaToList ( area , i ) ;
44685: NOP4
44689: PUSH
44690: NOP4
44694: PPUSH
44695: NOP4
44699: PPUSH
44700: NOP4
44704: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
44705: NOP4
44709: PUSH
44710: DOUBLE
44711: LD_INT 1
44713: DEC
44714: ST_TO_ADDR
44715: NOP4
44719: PUSH
44720: LD_INT 1
44722: ARRAY
44723: PUSH
44724: FOR_TO
44725: IFFALSE 44847
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
44727: NOP4
44731: PUSH
44732: NOP4
44736: PUSH
44737: LD_INT 1
44739: ARRAY
44740: PUSH
44741: NOP4
44745: ARRAY
44746: PUSH
44747: NOP4
44751: PUSH
44752: LD_INT 2
44754: ARRAY
44755: PUSH
44756: NOP4
44760: ARRAY
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
44766: NOP4
44770: PUSH
44771: LD_INT 1
44773: ARRAY
44774: PPUSH
44775: NOP4
44779: PUSH
44780: LD_INT 2
44782: ARRAY
44783: PPUSH
44784: NOP4
44788: PUSH
44789: LD_INT 0
44791: EQUAL
44792: IFFALSE 44845
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
44794: NOP4
44798: PPUSH
44799: NOP4
44803: PUSH
44804: LD_INT 1
44806: ARRAY
44807: PPUSH
44808: NOP4
44812: PUSH
44813: LD_INT 2
44815: ARRAY
44816: PPUSH
44817: NOP4
44821: PPUSH
44822: NOP4
// result := IsPlaced ( unit ) ;
44826: NOP4
44830: PUSH
44831: NOP4
44835: PPUSH
44836: NOP4
44840: ST_TO_ADDR
// exit ;
44841: POP
44842: POP
44843: GO 44849
// end ; end ;
44845: GO 44724
44847: POP
44848: POP
// end ;
44849: LD_VAR 0 4
44853: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
44854: LD_INT 0
44856: PPUSH
44857: PPUSH
44858: PPUSH
// if not side or side > 8 then
44859: NOP4
44863: NOT
44864: PUSH
44865: NOP4
44869: PUSH
44870: LD_INT 8
44872: GREATER
44873: OR
44874: IFFALSE 44878
// exit ;
44876: GO 45065
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
44878: NOP4
44882: PUSH
44883: LD_INT 22
44885: PUSH
44886: NOP4
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 21
44897: PUSH
44898: LD_INT 3
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PPUSH
44909: NOP4
44913: ST_TO_ADDR
// if not tmp then
44914: NOP4
44918: NOT
44919: IFFALSE 44923
// exit ;
44921: GO 45065
// enable_addtolog := true ;
44923: LD_ADDR_OWVAR 81
44927: PUSH
44928: LD_INT 1
44930: ST_TO_ADDR
// AddToLog ( [ ) ;
44931: LD_STRING [
44933: PPUSH
44934: NOP4
// for i in tmp do
44938: NOP4
44942: PUSH
44943: NOP4
44947: PUSH
44948: FOR_IN
44949: IFFALSE 45056
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
44951: LD_STRING [
44953: PUSH
44954: NOP4
44958: PPUSH
44959: NOP4
44963: STR
44964: PUSH
44965: LD_STRING , 
44967: STR
44968: PUSH
44969: NOP4
44973: PPUSH
44974: NOP4
44978: STR
44979: PUSH
44980: LD_STRING , 
44982: STR
44983: PUSH
44984: NOP4
44988: PPUSH
44989: NOP4
44993: STR
44994: PUSH
44995: LD_STRING , 
44997: STR
44998: PUSH
44999: NOP4
45003: PPUSH
45004: NOP4
45008: STR
45009: PUSH
45010: LD_STRING , 
45012: STR
45013: PUSH
45014: NOP4
45018: PPUSH
45019: LD_INT 1
45021: PPUSH
45022: NOP4
45026: STR
45027: PUSH
45028: LD_STRING , 
45030: STR
45031: PUSH
45032: NOP4
45036: PPUSH
45037: LD_INT 2
45039: PPUSH
45040: NOP4
45044: STR
45045: PUSH
45046: LD_STRING ],
45048: STR
45049: PPUSH
45050: NOP4
// end ;
45054: GO 44948
45056: POP
45057: POP
// AddToLog ( ]; ) ;
45058: LD_STRING ];
45060: PPUSH
45061: NOP4
// end ;
45065: LD_VAR 0 2
45069: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45070: LD_INT 0
45072: PPUSH
45073: PPUSH
45074: PPUSH
45075: PPUSH
45076: PPUSH
// if not area or not rate or not max then
45077: NOP4
45081: NOT
45082: PUSH
45083: NOP4
45087: NOT
45088: OR
45089: PUSH
45090: NOP4
45094: NOT
45095: OR
45096: IFFALSE 45100
// exit ;
45098: GO 45292
// while 1 do
45100: LD_INT 1
45102: IFFALSE 45292
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45104: NOP4
45108: PUSH
45109: NOP4
45113: PPUSH
45114: LD_INT 1
45116: PPUSH
45117: NOP4
45121: PUSH
45122: LD_INT 10
45124: MUL
45125: ST_TO_ADDR
// r := rate / 10 ;
45126: NOP4
45130: PUSH
45131: NOP4
45135: PUSH
45136: LD_INT 10
45138: DIVREAL
45139: ST_TO_ADDR
// time := 1 1$00 ;
45140: NOP4
45144: PUSH
45145: LD_INT 2100
45147: ST_TO_ADDR
// if amount < min then
45148: NOP4
45152: PUSH
45153: NOP4
45157: LESS
45158: IFFALSE 45176
// r := r * 2 else
45160: NOP4
45164: PUSH
45165: NOP4
45169: PUSH
45170: LD_INT 2
45172: MUL
45173: ST_TO_ADDR
45174: GO 45202
// if amount > max then
45176: NOP4
45180: PUSH
45181: NOP4
45185: GREATER
45186: IFFALSE 45202
// r := r / 2 ;
45188: NOP4
45192: PUSH
45193: NOP4
45197: PUSH
45198: LD_INT 2
45200: DIVREAL
45201: ST_TO_ADDR
// time := time / r ;
45202: NOP4
45206: PUSH
45207: NOP4
45211: PUSH
45212: NOP4
45216: DIVREAL
45217: ST_TO_ADDR
// if time < 0 then
45218: NOP4
45222: PUSH
45223: LD_INT 0
45225: LESS
45226: IFFALSE 45243
// time := time * - 1 ;
45228: NOP4
45232: PUSH
45233: NOP4
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: MUL
45242: ST_TO_ADDR
// wait ( time ) ;
45243: NOP4
45247: PPUSH
45248: NOP4
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
45252: LD_INT 35
45254: PPUSH
45255: LD_INT 875
45257: PPUSH
45258: NOP4
45262: PPUSH
45263: NOP4
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
45267: LD_INT 1
45269: PPUSH
45270: LD_INT 5
45272: PPUSH
45273: NOP4
45277: PPUSH
45278: NOP4
45282: PPUSH
45283: LD_INT 1
45285: PPUSH
45286: NOP4
// end ;
45290: GO 45100
// end ;
45292: LD_VAR 0 5
45296: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
45297: LD_INT 0
45299: PPUSH
45300: PPUSH
45301: PPUSH
45302: PPUSH
45303: PPUSH
45304: PPUSH
45305: PPUSH
45306: PPUSH
// if not turrets or not factories then
45307: NOP4
45311: NOT
45312: PUSH
45313: NOP4
45317: NOT
45318: OR
45319: IFFALSE 45323
// exit ;
45321: GO 45630
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
45323: NOP4
45327: PUSH
45328: LD_INT 5
45330: PUSH
45331: LD_INT 6
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: LD_INT 4
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 3
45350: PUSH
45351: LD_INT 5
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 24
45365: PUSH
45366: LD_INT 25
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 23
45375: PUSH
45376: LD_INT 27
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 42
45389: PUSH
45390: LD_INT 43
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 44
45399: PUSH
45400: LD_INT 46
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 45
45409: PUSH
45410: LD_INT 47
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: LIST
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: LIST
45426: ST_TO_ADDR
// result := [ ] ;
45427: NOP4
45431: PUSH
45432: EMPTY
45433: ST_TO_ADDR
// for i in turrets do
45434: NOP4
45438: PUSH
45439: NOP4
45443: PUSH
45444: FOR_IN
45445: IFFALSE 45628
// begin nat := GetNation ( i ) ;
45447: NOP4
45451: PUSH
45452: NOP4
45456: PPUSH
45457: NOP4
45461: ST_TO_ADDR
// weapon := 0 ;
45462: NOP4
45466: PUSH
45467: LD_INT 0
45469: ST_TO_ADDR
// if not nat then
45470: NOP4
45474: NOT
45475: IFFALSE 45479
// continue ;
45477: GO 45444
// for j in list [ nat ] do
45479: NOP4
45483: PUSH
45484: NOP4
45488: PUSH
45489: NOP4
45493: ARRAY
45494: PUSH
45495: FOR_IN
45496: IFFALSE 45537
// if GetBWeapon ( i ) = j [ 1 ] then
45498: NOP4
45502: PPUSH
45503: NOP4
45507: PUSH
45508: NOP4
45512: PUSH
45513: LD_INT 1
45515: ARRAY
45516: EQUAL
45517: IFFALSE 45535
// begin weapon := j [ 2 ] ;
45519: NOP4
45523: PUSH
45524: NOP4
45528: PUSH
45529: LD_INT 2
45531: ARRAY
45532: ST_TO_ADDR
// break ;
45533: GO 45537
// end ;
45535: GO 45495
45537: POP
45538: POP
// if not weapon then
45539: NOP4
45543: NOT
45544: IFFALSE 45548
// continue ;
45546: GO 45444
// for k in factories do
45548: NOP4
45552: PUSH
45553: NOP4
45557: PUSH
45558: FOR_IN
45559: IFFALSE 45624
// begin weapons := AvailableWeaponList ( k ) ;
45561: NOP4
45565: PUSH
45566: NOP4
45570: PPUSH
45571: NOP4
45575: ST_TO_ADDR
// if not weapons then
45576: NOP4
45580: NOT
45581: IFFALSE 45585
// continue ;
45583: GO 45558
// if weapon in weapons then
45585: NOP4
45589: PUSH
45590: NOP4
45594: IN
45595: IFFALSE 45622
// begin result := [ i , weapon ] ;
45597: NOP4
45601: PUSH
45602: NOP4
45606: PUSH
45607: NOP4
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: ST_TO_ADDR
// exit ;
45616: POP
45617: POP
45618: POP
45619: POP
45620: GO 45630
// end ; end ;
45622: GO 45558
45624: POP
45625: POP
// end ;
45626: GO 45444
45628: POP
45629: POP
// end ;
45630: LD_VAR 0 3
45634: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
45635: LD_INT 0
45637: PPUSH
// if not side or side > 8 then
45638: NOP4
45642: NOT
45643: PUSH
45644: NOP4
45648: PUSH
45649: LD_INT 8
45651: GREATER
45652: OR
45653: IFFALSE 45657
// exit ;
45655: GO 45716
// if not range then
45657: NOP4
45661: NOT
45662: IFFALSE 45673
// range := - 12 ;
45664: NOP4
45668: PUSH
45669: LD_INT 12
45671: NEG
45672: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
45673: NOP4
45677: PPUSH
45678: NOP4
45682: PPUSH
45683: NOP4
45687: PPUSH
45688: NOP4
45692: PPUSH
45693: NOP4
// RemoveSeeing ( x , y , side ) ;
45697: NOP4
45701: PPUSH
45702: NOP4
45706: PPUSH
45707: NOP4
45711: PPUSH
45712: NOP4
// end ;
45716: LD_VAR 0 5
45720: RET
// export function Video ( mode ) ; begin
45721: LD_INT 0
45723: PPUSH
// ingame_video = mode ;
45724: LD_ADDR_OWVAR 52
45728: PUSH
45729: NOP4
45733: ST_TO_ADDR
// interface_hidden = mode ;
45734: LD_ADDR_OWVAR 54
45738: PUSH
45739: NOP4
45743: ST_TO_ADDR
// end ;
45744: LD_VAR 0 2
45748: RET
// export function Join ( array , element ) ; begin
45749: LD_INT 0
45751: PPUSH
// result := Replace ( array , array + 1 , element ) ;
45752: NOP4
45756: PUSH
45757: NOP4
45761: PPUSH
45762: NOP4
45766: PUSH
45767: LD_INT 1
45769: PLUS
45770: PPUSH
45771: NOP4
45775: PPUSH
45776: NOP4
45780: ST_TO_ADDR
// end ;
45781: LD_VAR 0 3
45785: RET
// export function JoinUnion ( array , element ) ; begin
45786: LD_INT 0
45788: PPUSH
// result := array union element ;
45789: NOP4
45793: PUSH
45794: NOP4
45798: PUSH
45799: NOP4
45803: UNION
45804: ST_TO_ADDR
// end ;
45805: LD_VAR 0 3
45809: RET
// export function GetBehemoths ( side ) ; begin
45810: LD_INT 0
45812: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
45813: NOP4
45817: PUSH
45818: LD_INT 22
45820: PUSH
45821: NOP4
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 31
45832: PUSH
45833: LD_INT 25
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PPUSH
45844: NOP4
45848: ST_TO_ADDR
// end ;
45849: LD_VAR 0 2
45853: RET
// export function Shuffle ( array ) ; var i , index ; begin
45854: LD_INT 0
45856: PPUSH
45857: PPUSH
45858: PPUSH
// result := [ ] ;
45859: NOP4
45863: PUSH
45864: EMPTY
45865: ST_TO_ADDR
// if not array then
45866: NOP4
45870: NOT
45871: IFFALSE 45875
// exit ;
45873: GO 45974
// Randomize ;
45875: NOP4
// for i = array downto 1 do
45879: NOP4
45883: PUSH
45884: DOUBLE
45885: NOP4
45889: INC
45890: ST_TO_ADDR
45891: LD_INT 1
45893: PUSH
45894: FOR_DOWNTO
45895: IFFALSE 45972
// begin index := rand ( 1 , array ) ;
45897: NOP4
45901: PUSH
45902: LD_INT 1
45904: PPUSH
45905: NOP4
45909: PPUSH
45910: NOP4
45914: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
45915: NOP4
45919: PUSH
45920: NOP4
45924: PPUSH
45925: NOP4
45929: PUSH
45930: LD_INT 1
45932: PLUS
45933: PPUSH
45934: NOP4
45938: PUSH
45939: NOP4
45943: ARRAY
45944: PPUSH
45945: NOP4
45949: ST_TO_ADDR
// array := Delete ( array , index ) ;
45950: NOP4
45954: PUSH
45955: NOP4
45959: PPUSH
45960: NOP4
45964: PPUSH
45965: NOP4
45969: ST_TO_ADDR
// end ;
45970: GO 45894
45972: POP
45973: POP
// end ;
45974: LD_VAR 0 2
45978: RET
// export function GetBaseMaterials ( base ) ; begin
45979: LD_INT 0
45981: PPUSH
// result := [ 0 , 0 , 0 ] ;
45982: NOP4
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: LIST
46000: ST_TO_ADDR
// if not base then
46001: NOP4
46005: NOT
46006: IFFALSE 46010
// exit ;
46008: GO 46059
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46010: NOP4
46014: PUSH
46015: NOP4
46019: PPUSH
46020: LD_INT 1
46022: PPUSH
46023: NOP4
46027: PUSH
46028: NOP4
46032: PPUSH
46033: LD_INT 2
46035: PPUSH
46036: NOP4
46040: PUSH
46041: NOP4
46045: PPUSH
46046: LD_INT 3
46048: PPUSH
46049: NOP4
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
// end ;
46059: LD_VAR 0 2
46063: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46064: LD_INT 0
46066: PPUSH
46067: PPUSH
// result := array ;
46068: NOP4
46072: PUSH
46073: NOP4
46077: ST_TO_ADDR
// if size > 0 then
46078: NOP4
46082: PUSH
46083: LD_INT 0
46085: GREATER
46086: IFFALSE 46132
// for i := array downto size do
46088: NOP4
46092: PUSH
46093: DOUBLE
46094: NOP4
46098: INC
46099: ST_TO_ADDR
46100: NOP4
46104: PUSH
46105: FOR_DOWNTO
46106: IFFALSE 46130
// result := Delete ( result , result ) ;
46108: NOP4
46112: PUSH
46113: NOP4
46117: PPUSH
46118: NOP4
46122: PPUSH
46123: NOP4
46127: ST_TO_ADDR
46128: GO 46105
46130: POP
46131: POP
// end ;
46132: LD_VAR 0 3
46136: RET
// export function ComExit ( unit ) ; var tmp ; begin
46137: LD_INT 0
46139: PPUSH
46140: PPUSH
// if not IsInUnit ( unit ) then
46141: NOP4
46145: PPUSH
46146: NOP4
46150: NOT
46151: IFFALSE 46155
// exit ;
46153: GO 46215
// tmp := IsInUnit ( unit ) ;
46155: NOP4
46159: PUSH
46160: NOP4
46164: PPUSH
46165: NOP4
46169: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
46170: NOP4
46174: PPUSH
46175: NOP4
46179: PUSH
46180: LD_INT 2
46182: EQUAL
46183: IFFALSE 46196
// ComExitVehicle ( unit ) else
46185: NOP4
46189: PPUSH
46190: NOP4
46194: GO 46205
// ComExitBuilding ( unit ) ;
46196: NOP4
46200: PPUSH
46201: NOP4
// result := tmp ;
46205: NOP4
46209: PUSH
46210: NOP4
46214: ST_TO_ADDR
// end ;
46215: LD_VAR 0 2
46219: RET
// export function ResetHc ; begin
46220: LD_INT 0
46222: PPUSH
// InitHc ;
46223: NOP4
// hc_importance := 0 ;
46227: LD_ADDR_OWVAR 32
46231: PUSH
46232: LD_INT 0
46234: ST_TO_ADDR
// end ;
46235: LD_VAR 0 1
46239: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
46240: LD_INT 0
46242: PPUSH
46243: PPUSH
46244: PPUSH
// _x := ( x1 + x2 ) div 2 ;
46245: NOP4
46249: PUSH
46250: NOP4
46254: PUSH
46255: NOP4
46259: PLUS
46260: PUSH
46261: LD_INT 2
46263: DIV
46264: ST_TO_ADDR
// if _x < 0 then
46265: NOP4
46269: PUSH
46270: LD_INT 0
46272: LESS
46273: IFFALSE 46290
// _x := _x * - 1 ;
46275: NOP4
46279: PUSH
46280: NOP4
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: MUL
46289: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
46290: NOP4
46294: PUSH
46295: NOP4
46299: PUSH
46300: NOP4
46304: PLUS
46305: PUSH
46306: LD_INT 2
46308: DIV
46309: ST_TO_ADDR
// if _y < 0 then
46310: NOP4
46314: PUSH
46315: LD_INT 0
46317: LESS
46318: IFFALSE 46335
// _y := _y * - 1 ;
46320: NOP4
46324: PUSH
46325: NOP4
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: MUL
46334: ST_TO_ADDR
// result := [ _x , _y ] ;
46335: NOP4
46339: PUSH
46340: NOP4
46344: PUSH
46345: NOP4
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: ST_TO_ADDR
// end ;
46354: LD_VAR 0 5
46358: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
46359: LD_INT 0
46361: PPUSH
46362: PPUSH
46363: PPUSH
46364: PPUSH
// task := GetTaskList ( unit ) ;
46365: NOP4
46369: PUSH
46370: NOP4
46374: PPUSH
46375: NOP4
46379: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
46380: NOP4
46384: NOT
46385: PUSH
46386: NOP4
46390: PPUSH
46391: NOP4
46395: PPUSH
46396: NOP4
46400: NOT
46401: AND
46402: IFFALSE 46406
// exit ;
46404: GO 46524
// if IsInArea ( unit , area ) then
46406: NOP4
46410: PPUSH
46411: NOP4
46415: PPUSH
46416: NOP4
46420: IFFALSE 46438
// begin ComMoveToArea ( unit , goAway ) ;
46422: NOP4
46426: PPUSH
46427: NOP4
46431: PPUSH
46432: NOP4
// exit ;
46436: GO 46524
// end ; if task [ 1 ] [ 1 ] <> M then
46438: NOP4
46442: PUSH
46443: LD_INT 1
46445: ARRAY
46446: PUSH
46447: LD_INT 1
46449: ARRAY
46450: PUSH
46451: LD_STRING M
46453: NONEQUAL
46454: IFFALSE 46458
// exit ;
46456: GO 46524
// x := task [ 1 ] [ 2 ] ;
46458: NOP4
46462: PUSH
46463: NOP4
46467: PUSH
46468: LD_INT 1
46470: ARRAY
46471: PUSH
46472: LD_INT 2
46474: ARRAY
46475: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
46476: NOP4
46480: PUSH
46481: NOP4
46485: PUSH
46486: LD_INT 1
46488: ARRAY
46489: PUSH
46490: LD_INT 3
46492: ARRAY
46493: ST_TO_ADDR
// if InArea ( x , y , area ) then
46494: NOP4
46498: PPUSH
46499: NOP4
46503: PPUSH
46504: NOP4
46508: PPUSH
46509: NOP4
46513: IFFALSE 46524
// ComStop ( unit ) ;
46515: NOP4
46519: PPUSH
46520: NOP4
// end ;
46524: LD_VAR 0 4
46528: RET
// export function Abs ( value ) ; begin
46529: LD_INT 0
46531: PPUSH
// result := value ;
46532: NOP4
46536: PUSH
46537: NOP4
46541: ST_TO_ADDR
// if value < 0 then
46542: NOP4
46546: PUSH
46547: LD_INT 0
46549: LESS
46550: IFFALSE 46567
// result := value * - 1 ;
46552: NOP4
46556: PUSH
46557: NOP4
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: MUL
46566: ST_TO_ADDR
// end ;
46567: LD_VAR 0 2
46571: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
46572: LD_INT 0
46574: PPUSH
46575: PPUSH
46576: PPUSH
46577: PPUSH
46578: PPUSH
46579: PPUSH
46580: PPUSH
46581: PPUSH
// if not unit or not building then
46582: NOP4
46586: NOT
46587: PUSH
46588: NOP4
46592: NOT
46593: OR
46594: IFFALSE 46598
// exit ;
46596: GO 46824
// x := GetX ( building ) ;
46598: NOP4
46602: PUSH
46603: NOP4
46607: PPUSH
46608: NOP4
46612: ST_TO_ADDR
// y := GetY ( building ) ;
46613: NOP4
46617: PUSH
46618: NOP4
46622: PPUSH
46623: NOP4
46627: ST_TO_ADDR
// d := GetDir ( building ) ;
46628: NOP4
46632: PUSH
46633: NOP4
46637: PPUSH
46638: NOP4
46642: ST_TO_ADDR
// r := 4 ;
46643: NOP4
46647: PUSH
46648: LD_INT 4
46650: ST_TO_ADDR
// for i := 1 to 5 do
46651: NOP4
46655: PUSH
46656: DOUBLE
46657: LD_INT 1
46659: DEC
46660: ST_TO_ADDR
46661: LD_INT 5
46663: PUSH
46664: FOR_TO
46665: IFFALSE 46822
// begin _x := ShiftX ( x , d , r + i ) ;
46667: NOP4
46671: PUSH
46672: NOP4
46676: PPUSH
46677: NOP4
46681: PPUSH
46682: NOP4
46686: PUSH
46687: NOP4
46691: PLUS
46692: PPUSH
46693: NOP4
46697: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
46698: NOP4
46702: PUSH
46703: NOP4
46707: PPUSH
46708: NOP4
46712: PPUSH
46713: NOP4
46717: PUSH
46718: NOP4
46722: PLUS
46723: PPUSH
46724: NOP4
46728: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
46729: NOP4
46733: PPUSH
46734: NOP4
46738: PPUSH
46739: NOP4
46743: PUSH
46744: NOP4
46748: PPUSH
46749: NOP4
46753: PPUSH
46754: NOP4
46758: PPUSH
46759: NOP4
46763: PUSH
46764: LD_INT 3
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: IN
46774: NOT
46775: AND
46776: IFFALSE 46820
// begin ComMoveXY ( unit , _x , _y ) ;
46778: NOP4
46782: PPUSH
46783: NOP4
46787: PPUSH
46788: NOP4
46792: PPUSH
46793: NOP4
// result := [ _x , _y ] ;
46797: NOP4
46801: PUSH
46802: NOP4
46806: PUSH
46807: NOP4
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: ST_TO_ADDR
// exit ;
46816: POP
46817: POP
46818: GO 46824
// end ; end ;
46820: GO 46664
46822: POP
46823: POP
// end ; end_of_file
46824: LD_VAR 0 3
46828: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
46829: LD_INT 0
46831: PPUSH
46832: PPUSH
// skirmish := false ;
46833: NOP4
46837: PUSH
46838: LD_INT 0
46840: ST_TO_ADDR
// debug_mc := false ;
46841: NOP4
46845: PUSH
46846: LD_INT 0
46848: ST_TO_ADDR
// mc_bases := [ ] ;
46849: NOP4
46853: PUSH
46854: EMPTY
46855: ST_TO_ADDR
// mc_sides := [ ] ;
46856: NOP4
46860: PUSH
46861: EMPTY
46862: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
46863: NOP4
46867: PUSH
46868: EMPTY
46869: ST_TO_ADDR
// mc_building_repairs := [ ] ;
46870: NOP4
46874: PUSH
46875: EMPTY
46876: ST_TO_ADDR
// mc_need_heal := [ ] ;
46877: NOP4
46881: PUSH
46882: EMPTY
46883: ST_TO_ADDR
// mc_healers := [ ] ;
46884: NOP4
46888: PUSH
46889: EMPTY
46890: ST_TO_ADDR
// mc_build_list := [ ] ;
46891: NOP4
46895: PUSH
46896: EMPTY
46897: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
46898: NOP4
46902: PUSH
46903: EMPTY
46904: ST_TO_ADDR
// mc_builders := [ ] ;
46905: NOP4
46909: PUSH
46910: EMPTY
46911: ST_TO_ADDR
// mc_construct_list := [ ] ;
46912: NOP4
46916: PUSH
46917: EMPTY
46918: ST_TO_ADDR
// mc_turret_list := [ ] ;
46919: NOP4
46923: PUSH
46924: EMPTY
46925: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
46926: NOP4
46930: PUSH
46931: EMPTY
46932: ST_TO_ADDR
// mc_miners := [ ] ;
46933: NOP4
46937: PUSH
46938: EMPTY
46939: ST_TO_ADDR
// mc_mines := [ ] ;
46940: NOP4
46944: PUSH
46945: EMPTY
46946: ST_TO_ADDR
// mc_minefields := [ ] ;
46947: NOP4
46951: PUSH
46952: EMPTY
46953: ST_TO_ADDR
// mc_crates := [ ] ;
46954: NOP4
46958: PUSH
46959: EMPTY
46960: ST_TO_ADDR
// mc_crates_collector := [ ] ;
46961: NOP4
46965: PUSH
46966: EMPTY
46967: ST_TO_ADDR
// mc_crates_area := [ ] ;
46968: NOP4
46972: PUSH
46973: EMPTY
46974: ST_TO_ADDR
// mc_vehicles := [ ] ;
46975: NOP4
46979: PUSH
46980: EMPTY
46981: ST_TO_ADDR
// mc_attack := [ ] ;
46982: NOP4
46986: PUSH
46987: EMPTY
46988: ST_TO_ADDR
// mc_produce := [ ] ;
46989: NOP4
46993: PUSH
46994: EMPTY
46995: ST_TO_ADDR
// mc_defender := [ ] ;
46996: NOP4
47000: PUSH
47001: EMPTY
47002: ST_TO_ADDR
// mc_parking := [ ] ;
47003: NOP4
47007: PUSH
47008: EMPTY
47009: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
47010: NOP4
47014: PUSH
47015: EMPTY
47016: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
47017: NOP4
47021: PUSH
47022: EMPTY
47023: ST_TO_ADDR
// mc_scan := [ ] ;
47024: NOP4
47028: PUSH
47029: EMPTY
47030: ST_TO_ADDR
// mc_scan_area := [ ] ;
47031: NOP4
47035: PUSH
47036: EMPTY
47037: ST_TO_ADDR
// mc_tech := [ ] ;
47038: NOP4
47042: PUSH
47043: EMPTY
47044: ST_TO_ADDR
// mc_class := [ ] ;
47045: NOP4
47049: PUSH
47050: EMPTY
47051: ST_TO_ADDR
// mc_class_case_use := [ ] ;
47052: NOP4
47056: PUSH
47057: EMPTY
47058: ST_TO_ADDR
// end ;
47059: LD_VAR 0 1
47063: RET
// export function MC_Kill ( base ) ; begin
47064: LD_INT 0
47066: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
47067: NOP4
47071: PUSH
47072: NOP4
47076: PPUSH
47077: NOP4
47081: PPUSH
47082: EMPTY
47083: PPUSH
47084: NOP4
47088: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
47089: NOP4
47093: PUSH
47094: NOP4
47098: PPUSH
47099: NOP4
47103: PPUSH
47104: EMPTY
47105: PPUSH
47106: NOP4
47110: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
47111: NOP4
47115: PUSH
47116: NOP4
47120: PPUSH
47121: NOP4
47125: PPUSH
47126: EMPTY
47127: PPUSH
47128: NOP4
47132: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
47133: NOP4
47137: PUSH
47138: NOP4
47142: PPUSH
47143: NOP4
47147: PPUSH
47148: EMPTY
47149: PPUSH
47150: NOP4
47154: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
47155: NOP4
47159: PUSH
47160: NOP4
47164: PPUSH
47165: NOP4
47169: PPUSH
47170: EMPTY
47171: PPUSH
47172: NOP4
47176: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
47177: NOP4
47181: PUSH
47182: NOP4
47186: PPUSH
47187: NOP4
47191: PPUSH
47192: EMPTY
47193: PPUSH
47194: NOP4
47198: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
47199: NOP4
47203: PUSH
47204: NOP4
47208: PPUSH
47209: NOP4
47213: PPUSH
47214: EMPTY
47215: PPUSH
47216: NOP4
47220: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
47221: NOP4
47225: PUSH
47226: NOP4
47230: PPUSH
47231: NOP4
47235: PPUSH
47236: EMPTY
47237: PPUSH
47238: NOP4
47242: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
47243: NOP4
47247: PUSH
47248: NOP4
47252: PPUSH
47253: NOP4
47257: PPUSH
47258: EMPTY
47259: PPUSH
47260: NOP4
47264: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
47265: NOP4
47269: PUSH
47270: NOP4
47274: PPUSH
47275: NOP4
47279: PPUSH
47280: EMPTY
47281: PPUSH
47282: NOP4
47286: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
47287: NOP4
47291: PUSH
47292: NOP4
47296: PPUSH
47297: NOP4
47301: PPUSH
47302: EMPTY
47303: PPUSH
47304: NOP4
47308: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
47309: NOP4
47313: PUSH
47314: NOP4
47318: PPUSH
47319: NOP4
47323: PPUSH
47324: LD_INT 0
47326: PPUSH
47327: NOP4
47331: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
47332: NOP4
47336: PUSH
47337: NOP4
47341: PPUSH
47342: NOP4
47346: PPUSH
47347: EMPTY
47348: PPUSH
47349: NOP4
47353: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
47354: NOP4
47358: PUSH
47359: NOP4
47363: PPUSH
47364: NOP4
47368: PPUSH
47369: EMPTY
47370: PPUSH
47371: NOP4
47375: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
47376: NOP4
47380: PUSH
47381: NOP4
47385: PPUSH
47386: NOP4
47390: PPUSH
47391: EMPTY
47392: PPUSH
47393: NOP4
47397: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
47398: NOP4
47402: PUSH
47403: NOP4
47407: PPUSH
47408: NOP4
47412: PPUSH
47413: EMPTY
47414: PPUSH
47415: NOP4
47419: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
47420: NOP4
47424: PUSH
47425: NOP4
47429: PPUSH
47430: NOP4
47434: PPUSH
47435: EMPTY
47436: PPUSH
47437: NOP4
47441: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
47442: NOP4
47446: PUSH
47447: NOP4
47451: PPUSH
47452: NOP4
47456: PPUSH
47457: EMPTY
47458: PPUSH
47459: NOP4
47463: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
47464: NOP4
47468: PUSH
47469: NOP4
47473: PPUSH
47474: NOP4
47478: PPUSH
47479: EMPTY
47480: PPUSH
47481: NOP4
47485: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
47486: NOP4
47490: PUSH
47491: NOP4
47495: PPUSH
47496: NOP4
47500: PPUSH
47501: EMPTY
47502: PPUSH
47503: NOP4
47507: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
47508: NOP4
47512: PUSH
47513: NOP4
47517: PPUSH
47518: NOP4
47522: PPUSH
47523: EMPTY
47524: PPUSH
47525: NOP4
47529: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
47530: NOP4
47534: PUSH
47535: NOP4
47539: PPUSH
47540: NOP4
47544: PPUSH
47545: EMPTY
47546: PPUSH
47547: NOP4
47551: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
47552: NOP4
47556: PUSH
47557: NOP4
47561: PPUSH
47562: NOP4
47566: PPUSH
47567: EMPTY
47568: PPUSH
47569: NOP4
47573: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
47574: NOP4
47578: PUSH
47579: NOP4
47583: PPUSH
47584: NOP4
47588: PPUSH
47589: EMPTY
47590: PPUSH
47591: NOP4
47595: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
47596: NOP4
47600: PUSH
47601: NOP4
47605: PPUSH
47606: NOP4
47610: PPUSH
47611: EMPTY
47612: PPUSH
47613: NOP4
47617: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
47618: NOP4
47622: PUSH
47623: NOP4
47627: PPUSH
47628: NOP4
47632: PPUSH
47633: EMPTY
47634: PPUSH
47635: NOP4
47639: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
47640: NOP4
47644: PUSH
47645: NOP4
47649: PPUSH
47650: NOP4
47654: PPUSH
47655: EMPTY
47656: PPUSH
47657: NOP4
47661: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
47662: NOP4
47666: PUSH
47667: NOP4
47671: PPUSH
47672: NOP4
47676: PPUSH
47677: EMPTY
47678: PPUSH
47679: NOP4
47683: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
47684: NOP4
47688: PUSH
47689: NOP4
47693: PPUSH
47694: NOP4
47698: PPUSH
47699: EMPTY
47700: PPUSH
47701: NOP4
47705: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
47706: NOP4
47710: PUSH
47711: NOP4
47715: PPUSH
47716: NOP4
47720: PPUSH
47721: EMPTY
47722: PPUSH
47723: NOP4
47727: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
47728: NOP4
47732: PUSH
47733: NOP4
47737: PPUSH
47738: NOP4
47742: PPUSH
47743: EMPTY
47744: PPUSH
47745: NOP4
47749: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
47750: NOP4
47754: PUSH
47755: NOP4
47759: PPUSH
47760: NOP4
47764: PPUSH
47765: EMPTY
47766: PPUSH
47767: NOP4
47771: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
47772: NOP4
47776: PUSH
47777: NOP4
47781: PPUSH
47782: NOP4
47786: PPUSH
47787: EMPTY
47788: PPUSH
47789: NOP4
47793: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
47794: NOP4
47798: PUSH
47799: NOP4
47803: PPUSH
47804: NOP4
47808: PPUSH
47809: EMPTY
47810: PPUSH
47811: NOP4
47815: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
47816: NOP4
47820: PUSH
47821: NOP4
47825: PPUSH
47826: NOP4
47830: PPUSH
47831: EMPTY
47832: PPUSH
47833: NOP4
47837: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
47838: NOP4
47842: PUSH
47843: NOP4
47847: PPUSH
47848: NOP4
47852: PPUSH
47853: EMPTY
47854: PPUSH
47855: NOP4
47859: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
47860: NOP4
47864: PUSH
47865: NOP4
47869: PPUSH
47870: NOP4
47874: PPUSH
47875: EMPTY
47876: PPUSH
47877: NOP4
47881: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
47882: NOP4
47886: PUSH
47887: NOP4
47891: PPUSH
47892: NOP4
47896: PPUSH
47897: EMPTY
47898: PPUSH
47899: NOP4
47903: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
47904: NOP4
47908: PUSH
47909: NOP4
47913: PPUSH
47914: NOP4
47918: PPUSH
47919: EMPTY
47920: PPUSH
47921: NOP4
47925: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
47926: NOP4
47930: PUSH
47931: NOP4
47935: PPUSH
47936: NOP4
47940: PPUSH
47941: EMPTY
47942: PPUSH
47943: NOP4
47947: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
47948: NOP4
47952: PUSH
47953: NOP4
47957: PPUSH
47958: NOP4
47962: PPUSH
47963: LD_INT 0
47965: PPUSH
47966: NOP4
47970: ST_TO_ADDR
// end ;
47971: LD_VAR 0 2
47975: RET
// export function MC_Add ( side , units ) ; var base ; begin
47976: LD_INT 0
47978: PPUSH
47979: PPUSH
// base := mc_bases + 1 ;
47980: NOP4
47984: PUSH
47985: NOP4
47989: PUSH
47990: LD_INT 1
47992: PLUS
47993: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
47994: NOP4
47998: PUSH
47999: NOP4
48003: PPUSH
48004: NOP4
48008: PPUSH
48009: NOP4
48013: PPUSH
48014: NOP4
48018: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
48019: NOP4
48023: PUSH
48024: NOP4
48028: PPUSH
48029: NOP4
48033: PPUSH
48034: NOP4
48038: PPUSH
48039: NOP4
48043: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
48044: NOP4
48048: PUSH
48049: NOP4
48053: PPUSH
48054: NOP4
48058: PPUSH
48059: EMPTY
48060: PPUSH
48061: NOP4
48065: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
48066: NOP4
48070: PUSH
48071: NOP4
48075: PPUSH
48076: NOP4
48080: PPUSH
48081: EMPTY
48082: PPUSH
48083: NOP4
48087: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
48088: NOP4
48092: PUSH
48093: NOP4
48097: PPUSH
48098: NOP4
48102: PPUSH
48103: EMPTY
48104: PPUSH
48105: NOP4
48109: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
48110: NOP4
48114: PUSH
48115: NOP4
48119: PPUSH
48120: NOP4
48124: PPUSH
48125: EMPTY
48126: PPUSH
48127: NOP4
48131: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
48132: NOP4
48136: PUSH
48137: NOP4
48141: PPUSH
48142: NOP4
48146: PPUSH
48147: EMPTY
48148: PPUSH
48149: NOP4
48153: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
48154: NOP4
48158: PUSH
48159: NOP4
48163: PPUSH
48164: NOP4
48168: PPUSH
48169: EMPTY
48170: PPUSH
48171: NOP4
48175: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
48176: NOP4
48180: PUSH
48181: NOP4
48185: PPUSH
48186: NOP4
48190: PPUSH
48191: EMPTY
48192: PPUSH
48193: NOP4
48197: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
48198: NOP4
48202: PUSH
48203: NOP4
48207: PPUSH
48208: NOP4
48212: PPUSH
48213: EMPTY
48214: PPUSH
48215: NOP4
48219: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
48220: NOP4
48224: PUSH
48225: NOP4
48229: PPUSH
48230: NOP4
48234: PPUSH
48235: EMPTY
48236: PPUSH
48237: NOP4
48241: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
48242: NOP4
48246: PUSH
48247: NOP4
48251: PPUSH
48252: NOP4
48256: PPUSH
48257: EMPTY
48258: PPUSH
48259: NOP4
48263: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
48264: NOP4
48268: PUSH
48269: NOP4
48273: PPUSH
48274: NOP4
48278: PPUSH
48279: LD_INT 0
48281: PPUSH
48282: NOP4
48286: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
48287: NOP4
48291: PUSH
48292: NOP4
48296: PPUSH
48297: NOP4
48301: PPUSH
48302: EMPTY
48303: PPUSH
48304: NOP4
48308: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
48309: NOP4
48313: PUSH
48314: NOP4
48318: PPUSH
48319: NOP4
48323: PPUSH
48324: EMPTY
48325: PPUSH
48326: NOP4
48330: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
48331: NOP4
48335: PUSH
48336: NOP4
48340: PPUSH
48341: NOP4
48345: PPUSH
48346: EMPTY
48347: PPUSH
48348: NOP4
48352: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
48353: NOP4
48357: PUSH
48358: NOP4
48362: PPUSH
48363: NOP4
48367: PPUSH
48368: EMPTY
48369: PPUSH
48370: NOP4
48374: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
48375: NOP4
48379: PUSH
48380: NOP4
48384: PPUSH
48385: NOP4
48389: PPUSH
48390: EMPTY
48391: PPUSH
48392: NOP4
48396: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
48397: NOP4
48401: PUSH
48402: NOP4
48406: PPUSH
48407: NOP4
48411: PPUSH
48412: EMPTY
48413: PPUSH
48414: NOP4
48418: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
48419: NOP4
48423: PUSH
48424: NOP4
48428: PPUSH
48429: NOP4
48433: PPUSH
48434: EMPTY
48435: PPUSH
48436: NOP4
48440: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
48441: NOP4
48445: PUSH
48446: NOP4
48450: PPUSH
48451: NOP4
48455: PPUSH
48456: EMPTY
48457: PPUSH
48458: NOP4
48462: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
48463: NOP4
48467: PUSH
48468: NOP4
48472: PPUSH
48473: NOP4
48477: PPUSH
48478: EMPTY
48479: PPUSH
48480: NOP4
48484: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
48485: NOP4
48489: PUSH
48490: NOP4
48494: PPUSH
48495: NOP4
48499: PPUSH
48500: EMPTY
48501: PPUSH
48502: NOP4
48506: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
48507: NOP4
48511: PUSH
48512: NOP4
48516: PPUSH
48517: NOP4
48521: PPUSH
48522: EMPTY
48523: PPUSH
48524: NOP4
48528: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
48529: NOP4
48533: PUSH
48534: NOP4
48538: PPUSH
48539: NOP4
48543: PPUSH
48544: EMPTY
48545: PPUSH
48546: NOP4
48550: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
48551: NOP4
48555: PUSH
48556: NOP4
48560: PPUSH
48561: NOP4
48565: PPUSH
48566: EMPTY
48567: PPUSH
48568: NOP4
48572: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
48573: NOP4
48577: PUSH
48578: NOP4
48582: PPUSH
48583: NOP4
48587: PPUSH
48588: EMPTY
48589: PPUSH
48590: NOP4
48594: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
48595: NOP4
48599: PUSH
48600: NOP4
48604: PPUSH
48605: NOP4
48609: PPUSH
48610: EMPTY
48611: PPUSH
48612: NOP4
48616: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
48617: NOP4
48621: PUSH
48622: NOP4
48626: PPUSH
48627: NOP4
48631: PPUSH
48632: EMPTY
48633: PPUSH
48634: NOP4
48638: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
48639: NOP4
48643: PUSH
48644: NOP4
48648: PPUSH
48649: NOP4
48653: PPUSH
48654: EMPTY
48655: PPUSH
48656: NOP4
48660: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
48661: NOP4
48665: PUSH
48666: NOP4
48670: PPUSH
48671: NOP4
48675: PPUSH
48676: EMPTY
48677: PPUSH
48678: NOP4
48682: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
48683: NOP4
48687: PUSH
48688: NOP4
48692: PPUSH
48693: NOP4
48697: PPUSH
48698: EMPTY
48699: PPUSH
48700: NOP4
48704: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
48705: NOP4
48709: PUSH
48710: NOP4
48714: PPUSH
48715: NOP4
48719: PPUSH
48720: EMPTY
48721: PPUSH
48722: NOP4
48726: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
48727: NOP4
48731: PUSH
48732: NOP4
48736: PPUSH
48737: NOP4
48741: PPUSH
48742: EMPTY
48743: PPUSH
48744: NOP4
48748: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
48749: NOP4
48753: PUSH
48754: NOP4
48758: PPUSH
48759: NOP4
48763: PPUSH
48764: EMPTY
48765: PPUSH
48766: NOP4
48770: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
48771: NOP4
48775: PUSH
48776: NOP4
48780: PPUSH
48781: NOP4
48785: PPUSH
48786: EMPTY
48787: PPUSH
48788: NOP4
48792: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
48793: NOP4
48797: PUSH
48798: NOP4
48802: PPUSH
48803: NOP4
48807: PPUSH
48808: EMPTY
48809: PPUSH
48810: NOP4
48814: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
48815: NOP4
48819: PUSH
48820: NOP4
48824: PPUSH
48825: NOP4
48829: PPUSH
48830: EMPTY
48831: PPUSH
48832: NOP4
48836: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
48837: NOP4
48841: PUSH
48842: NOP4
48846: PPUSH
48847: NOP4
48851: PPUSH
48852: EMPTY
48853: PPUSH
48854: NOP4
48858: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
48859: NOP4
48863: PUSH
48864: NOP4
48868: PPUSH
48869: NOP4
48873: PPUSH
48874: EMPTY
48875: PPUSH
48876: NOP4
48880: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
48881: NOP4
48885: PUSH
48886: NOP4
48890: PPUSH
48891: NOP4
48895: PPUSH
48896: EMPTY
48897: PPUSH
48898: NOP4
48902: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
48903: NOP4
48907: PUSH
48908: NOP4
48912: PPUSH
48913: NOP4
48917: PPUSH
48918: LD_INT 0
48920: PPUSH
48921: NOP4
48925: ST_TO_ADDR
// result := base ;
48926: NOP4
48930: PUSH
48931: NOP4
48935: ST_TO_ADDR
// end ;
48936: LD_VAR 0 3
48940: RET
// export function MC_Start ( ) ; var i ; begin
48941: LD_INT 0
48943: PPUSH
48944: PPUSH
// for i = 1 to mc_bases do
48945: NOP4
48949: PUSH
48950: DOUBLE
48951: LD_INT 1
48953: DEC
48954: ST_TO_ADDR
48955: NOP4
48959: PUSH
48960: FOR_TO
48961: IFFALSE 50038
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
48963: NOP4
48967: PUSH
48968: NOP4
48972: PPUSH
48973: NOP4
48977: PPUSH
48978: NOP4
48982: PUSH
48983: NOP4
48987: ARRAY
48988: PUSH
48989: LD_INT 0
48991: DIFF
48992: PPUSH
48993: NOP4
48997: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
48998: NOP4
49002: PUSH
49003: NOP4
49007: PPUSH
49008: NOP4
49012: PPUSH
49013: EMPTY
49014: PPUSH
49015: NOP4
49019: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
49020: NOP4
49024: PUSH
49025: NOP4
49029: PPUSH
49030: NOP4
49034: PPUSH
49035: EMPTY
49036: PPUSH
49037: NOP4
49041: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
49042: NOP4
49046: PUSH
49047: NOP4
49051: PPUSH
49052: NOP4
49056: PPUSH
49057: EMPTY
49058: PPUSH
49059: NOP4
49063: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
49064: NOP4
49068: PUSH
49069: NOP4
49073: PPUSH
49074: NOP4
49078: PPUSH
49079: EMPTY
49080: PUSH
49081: EMPTY
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PPUSH
49087: NOP4
49091: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
49092: NOP4
49096: PUSH
49097: NOP4
49101: PPUSH
49102: NOP4
49106: PPUSH
49107: EMPTY
49108: PPUSH
49109: NOP4
49113: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
49114: NOP4
49118: PUSH
49119: NOP4
49123: PPUSH
49124: NOP4
49128: PPUSH
49129: EMPTY
49130: PPUSH
49131: NOP4
49135: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
49136: NOP4
49140: PUSH
49141: NOP4
49145: PPUSH
49146: NOP4
49150: PPUSH
49151: EMPTY
49152: PPUSH
49153: NOP4
49157: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
49158: NOP4
49162: PUSH
49163: NOP4
49167: PPUSH
49168: NOP4
49172: PPUSH
49173: EMPTY
49174: PPUSH
49175: NOP4
49179: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
49180: NOP4
49184: PUSH
49185: NOP4
49189: PPUSH
49190: NOP4
49194: PPUSH
49195: NOP4
49199: PUSH
49200: NOP4
49204: ARRAY
49205: PPUSH
49206: LD_INT 2
49208: PUSH
49209: LD_INT 30
49211: PUSH
49212: LD_INT 32
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 30
49221: PUSH
49222: LD_INT 33
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: LIST
49233: PPUSH
49234: NOP4
49238: PPUSH
49239: NOP4
49243: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
49244: NOP4
49248: PUSH
49249: NOP4
49253: PPUSH
49254: NOP4
49258: PPUSH
49259: NOP4
49263: PUSH
49264: NOP4
49268: ARRAY
49269: PPUSH
49270: LD_INT 2
49272: PUSH
49273: LD_INT 30
49275: PUSH
49276: LD_INT 32
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 30
49285: PUSH
49286: LD_INT 31
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 58
49300: PUSH
49301: EMPTY
49302: LIST
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PPUSH
49308: NOP4
49312: PPUSH
49313: NOP4
49317: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
49318: NOP4
49322: PUSH
49323: NOP4
49327: PPUSH
49328: NOP4
49332: PPUSH
49333: EMPTY
49334: PPUSH
49335: NOP4
49339: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
49340: NOP4
49344: PUSH
49345: NOP4
49349: PPUSH
49350: NOP4
49354: PPUSH
49355: EMPTY
49356: PPUSH
49357: NOP4
49361: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
49362: NOP4
49366: PUSH
49367: NOP4
49371: PPUSH
49372: NOP4
49376: PPUSH
49377: EMPTY
49378: PPUSH
49379: NOP4
49383: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
49384: NOP4
49388: PUSH
49389: NOP4
49393: PPUSH
49394: NOP4
49398: PPUSH
49399: EMPTY
49400: PPUSH
49401: NOP4
49405: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
49406: NOP4
49410: PUSH
49411: NOP4
49415: PPUSH
49416: NOP4
49420: PPUSH
49421: EMPTY
49422: PPUSH
49423: NOP4
49427: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
49428: NOP4
49432: PUSH
49433: NOP4
49437: PPUSH
49438: NOP4
49442: PPUSH
49443: EMPTY
49444: PPUSH
49445: NOP4
49449: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
49450: NOP4
49454: PUSH
49455: NOP4
49459: PPUSH
49460: NOP4
49464: PPUSH
49465: EMPTY
49466: PPUSH
49467: NOP4
49471: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
49472: NOP4
49476: PUSH
49477: NOP4
49481: PPUSH
49482: NOP4
49486: PPUSH
49487: EMPTY
49488: PPUSH
49489: NOP4
49493: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
49494: NOP4
49498: PUSH
49499: NOP4
49503: PPUSH
49504: NOP4
49508: PPUSH
49509: EMPTY
49510: PPUSH
49511: NOP4
49515: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
49516: NOP4
49520: PUSH
49521: NOP4
49525: PPUSH
49526: NOP4
49530: PPUSH
49531: EMPTY
49532: PPUSH
49533: NOP4
49537: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
49538: NOP4
49542: PUSH
49543: NOP4
49547: PPUSH
49548: NOP4
49552: PPUSH
49553: EMPTY
49554: PPUSH
49555: NOP4
49559: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
49560: NOP4
49564: PUSH
49565: NOP4
49569: PPUSH
49570: NOP4
49574: PPUSH
49575: LD_INT 0
49577: PPUSH
49578: NOP4
49582: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
49583: NOP4
49587: PUSH
49588: NOP4
49592: PPUSH
49593: NOP4
49597: PPUSH
49598: LD_INT 0
49600: PPUSH
49601: NOP4
49605: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
49606: NOP4
49610: PUSH
49611: NOP4
49615: PPUSH
49616: NOP4
49620: PPUSH
49621: EMPTY
49622: PPUSH
49623: NOP4
49627: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
49628: NOP4
49632: PUSH
49633: NOP4
49637: PPUSH
49638: NOP4
49642: PPUSH
49643: LD_INT 0
49645: PPUSH
49646: NOP4
49650: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
49651: NOP4
49655: PUSH
49656: NOP4
49660: PPUSH
49661: NOP4
49665: PPUSH
49666: EMPTY
49667: PPUSH
49668: NOP4
49672: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
49673: NOP4
49677: PUSH
49678: NOP4
49682: PPUSH
49683: NOP4
49687: PPUSH
49688: LD_INT 0
49690: PPUSH
49691: NOP4
49695: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
49696: NOP4
49700: PUSH
49701: NOP4
49705: PPUSH
49706: NOP4
49710: PPUSH
49711: EMPTY
49712: PPUSH
49713: NOP4
49717: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
49718: NOP4
49722: PUSH
49723: NOP4
49727: PPUSH
49728: NOP4
49732: PPUSH
49733: EMPTY
49734: PPUSH
49735: NOP4
49739: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
49740: NOP4
49744: PUSH
49745: NOP4
49749: PPUSH
49750: NOP4
49754: PPUSH
49755: EMPTY
49756: PPUSH
49757: NOP4
49761: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
49762: NOP4
49766: PUSH
49767: NOP4
49771: PPUSH
49772: NOP4
49776: PPUSH
49777: NOP4
49781: PUSH
49782: NOP4
49786: ARRAY
49787: PPUSH
49788: LD_INT 2
49790: PUSH
49791: LD_INT 30
49793: PUSH
49794: LD_INT 6
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 30
49803: PUSH
49804: LD_INT 7
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 30
49813: PUSH
49814: LD_INT 8
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: PPUSH
49827: NOP4
49831: PPUSH
49832: NOP4
49836: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
49837: NOP4
49841: PUSH
49842: NOP4
49846: PPUSH
49847: NOP4
49851: PPUSH
49852: EMPTY
49853: PPUSH
49854: NOP4
49858: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
49859: NOP4
49863: PUSH
49864: NOP4
49868: PPUSH
49869: NOP4
49873: PPUSH
49874: EMPTY
49875: PPUSH
49876: NOP4
49880: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
49881: NOP4
49885: PUSH
49886: NOP4
49890: PPUSH
49891: NOP4
49895: PPUSH
49896: EMPTY
49897: PPUSH
49898: NOP4
49902: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
49903: NOP4
49907: PUSH
49908: NOP4
49912: PPUSH
49913: NOP4
49917: PPUSH
49918: EMPTY
49919: PPUSH
49920: NOP4
49924: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
49925: NOP4
49929: PUSH
49930: NOP4
49934: PPUSH
49935: NOP4
49939: PPUSH
49940: EMPTY
49941: PPUSH
49942: NOP4
49946: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
49947: NOP4
49951: PUSH
49952: NOP4
49956: PPUSH
49957: NOP4
49961: PPUSH
49962: EMPTY
49963: PPUSH
49964: NOP4
49968: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
49969: NOP4
49973: PUSH
49974: NOP4
49978: PPUSH
49979: NOP4
49983: PPUSH
49984: EMPTY
49985: PPUSH
49986: NOP4
49990: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
49991: NOP4
49995: PUSH
49996: NOP4
50000: PPUSH
50001: NOP4
50005: PPUSH
50006: EMPTY
50007: PPUSH
50008: NOP4
50012: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
50013: NOP4
50017: PUSH
50018: NOP4
50022: PPUSH
50023: NOP4
50027: PPUSH
50028: LD_INT 0
50030: PPUSH
50031: NOP4
50035: ST_TO_ADDR
// end ;
50036: GO 48960
50038: POP
50039: POP
// MC_InitSides ( ) ;
50040: NOP4
// MC_InitResearch ( ) ;
50044: NOP4
// CustomInitMacro ( ) ;
50048: NOP4
// skirmish := true ;
50052: NOP4
50056: PUSH
50057: LD_INT 1
50059: ST_TO_ADDR
// end ;
50060: LD_VAR 0 1
50064: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
50065: LD_INT 0
50067: PPUSH
50068: PPUSH
50069: PPUSH
50070: PPUSH
50071: PPUSH
50072: PPUSH
// if not mc_bases then
50073: NOP4
50077: NOT
50078: IFFALSE 50082
// exit ;
50080: GO 50321
// for i = 1 to 8 do
50082: NOP4
50086: PUSH
50087: DOUBLE
50088: LD_INT 1
50090: DEC
50091: ST_TO_ADDR
50092: LD_INT 8
50094: PUSH
50095: FOR_TO
50096: IFFALSE 50122
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
50098: NOP4
50102: PUSH
50103: NOP4
50107: PPUSH
50108: NOP4
50112: PPUSH
50113: EMPTY
50114: PPUSH
50115: NOP4
50119: ST_TO_ADDR
50120: GO 50095
50122: POP
50123: POP
// tmp := [ ] ;
50124: NOP4
50128: PUSH
50129: EMPTY
50130: ST_TO_ADDR
// for i = 1 to mc_sides do
50131: NOP4
50135: PUSH
50136: DOUBLE
50137: LD_INT 1
50139: DEC
50140: ST_TO_ADDR
50141: NOP4
50145: PUSH
50146: FOR_TO
50147: IFFALSE 50205
// if not mc_sides [ i ] in tmp then
50149: NOP4
50153: PUSH
50154: NOP4
50158: ARRAY
50159: PUSH
50160: NOP4
50164: IN
50165: NOT
50166: IFFALSE 50203
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
50168: NOP4
50172: PUSH
50173: NOP4
50177: PPUSH
50178: NOP4
50182: PUSH
50183: LD_INT 1
50185: PLUS
50186: PPUSH
50187: NOP4
50191: PUSH
50192: NOP4
50196: ARRAY
50197: PPUSH
50198: NOP4
50202: ST_TO_ADDR
50203: GO 50146
50205: POP
50206: POP
// if not tmp then
50207: NOP4
50211: NOT
50212: IFFALSE 50216
// exit ;
50214: GO 50321
// for j in tmp do
50216: NOP4
50220: PUSH
50221: NOP4
50225: PUSH
50226: FOR_IN
50227: IFFALSE 50319
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
50229: NOP4
50233: PUSH
50234: LD_INT 22
50236: PUSH
50237: NOP4
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PPUSH
50246: NOP4
50250: ST_TO_ADDR
// if not un then
50251: NOP4
50255: NOT
50256: IFFALSE 50260
// continue ;
50258: GO 50226
// nation := GetNation ( un [ 1 ] ) ;
50260: NOP4
50264: PUSH
50265: NOP4
50269: PUSH
50270: LD_INT 1
50272: ARRAY
50273: PPUSH
50274: NOP4
50278: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
50279: NOP4
50283: PUSH
50284: NOP4
50288: PPUSH
50289: NOP4
50293: PPUSH
50294: NOP4
50298: PPUSH
50299: NOP4
50303: PPUSH
50304: LD_INT 1
50306: PPUSH
50307: NOP4
50311: PPUSH
50312: NOP4
50316: ST_TO_ADDR
// end ;
50317: GO 50226
50319: POP
50320: POP
// end ;
50321: LD_VAR 0 1
50325: RET
// export function MC_InitSides ( ) ; var i ; begin
50326: LD_INT 0
50328: PPUSH
50329: PPUSH
// if not mc_bases then
50330: NOP4
50334: NOT
50335: IFFALSE 50339
// exit ;
50337: GO 50413
// for i = 1 to mc_bases do
50339: NOP4
50343: PUSH
50344: DOUBLE
50345: LD_INT 1
50347: DEC
50348: ST_TO_ADDR
50349: NOP4
50353: PUSH
50354: FOR_TO
50355: IFFALSE 50411
// if mc_bases [ i ] then
50357: NOP4
50361: PUSH
50362: NOP4
50366: ARRAY
50367: IFFALSE 50409
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
50369: NOP4
50373: PUSH
50374: NOP4
50378: PPUSH
50379: NOP4
50383: PPUSH
50384: NOP4
50388: PUSH
50389: NOP4
50393: ARRAY
50394: PUSH
50395: LD_INT 1
50397: ARRAY
50398: PPUSH
50399: NOP4
50403: PPUSH
50404: NOP4
50408: ST_TO_ADDR
50409: GO 50354
50411: POP
50412: POP
// end ;
50413: LD_VAR 0 1
50417: RET
// every 0 0$01 trigger skirmish do
50418: NOP4
50422: IFFALSE 50576
50424: GO 50426
50426: DISABLE
// begin enable ;
50427: ENABLE
// MC_CheckBuildings ( ) ;
50428: NOP4
// MC_CheckPeopleLife ( ) ;
50432: NOP4
// RaiseSailEvent ( 100 ) ;
50436: LD_INT 100
50438: PPUSH
50439: NOP4
// RaiseSailEvent ( 103 ) ;
50443: LD_INT 103
50445: PPUSH
50446: NOP4
// RaiseSailEvent ( 104 ) ;
50450: LD_INT 104
50452: PPUSH
50453: NOP4
// RaiseSailEvent ( 105 ) ;
50457: LD_INT 105
50459: PPUSH
50460: NOP4
// RaiseSailEvent ( 106 ) ;
50464: LD_INT 106
50466: PPUSH
50467: NOP4
// RaiseSailEvent ( 107 ) ;
50471: LD_INT 107
50473: PPUSH
50474: NOP4
// RaiseSailEvent ( 108 ) ;
50478: LD_INT 108
50480: PPUSH
50481: NOP4
// RaiseSailEvent ( 109 ) ;
50485: LD_INT 109
50487: PPUSH
50488: NOP4
// RaiseSailEvent ( 110 ) ;
50492: LD_INT 110
50494: PPUSH
50495: NOP4
// RaiseSailEvent ( 111 ) ;
50499: LD_INT 111
50501: PPUSH
50502: NOP4
// RaiseSailEvent ( 112 ) ;
50506: LD_INT 112
50508: PPUSH
50509: NOP4
// RaiseSailEvent ( 113 ) ;
50513: LD_INT 113
50515: PPUSH
50516: NOP4
// RaiseSailEvent ( 120 ) ;
50520: LD_INT 120
50522: PPUSH
50523: NOP4
// RaiseSailEvent ( 121 ) ;
50527: LD_INT 121
50529: PPUSH
50530: NOP4
// RaiseSailEvent ( 122 ) ;
50534: LD_INT 122
50536: PPUSH
50537: NOP4
// RaiseSailEvent ( 123 ) ;
50541: LD_INT 123
50543: PPUSH
50544: NOP4
// RaiseSailEvent ( 124 ) ;
50548: LD_INT 124
50550: PPUSH
50551: NOP4
// RaiseSailEvent ( 125 ) ;
50555: LD_INT 125
50557: PPUSH
50558: NOP4
// RaiseSailEvent ( 126 ) ;
50562: LD_INT 126
50564: PPUSH
50565: NOP4
// RaiseSailEvent ( 200 ) ;
50569: LD_INT 200
50571: PPUSH
50572: NOP4
// end ;
50576: END
// on SailEvent ( event ) do begin if event < 100 then
50577: NOP4
50581: PUSH
50582: LD_INT 100
50584: LESS
50585: IFFALSE 50596
// CustomEvent ( event ) ;
50587: NOP4
50591: PPUSH
50592: NOP4
// if event = 100 then
50596: NOP4
50600: PUSH
50601: LD_INT 100
50603: EQUAL
50604: IFFALSE 50610
// MC_ClassManager ( ) ;
50606: NOP4
// if event = 101 then
50610: NOP4
50614: PUSH
50615: LD_INT 101
50617: EQUAL
50618: IFFALSE 50624
// MC_RepairBuildings ( ) ;
50620: NOP4
// if event = 102 then
50624: NOP4
50628: PUSH
50629: LD_INT 102
50631: EQUAL
50632: IFFALSE 50638
// MC_Heal ( ) ;
50634: NOP4
// if event = 103 then
50638: NOP4
50642: PUSH
50643: LD_INT 103
50645: EQUAL
50646: IFFALSE 50652
// MC_Build ( ) ;
50648: NOP4
// if event = 104 then
50652: NOP4
50656: PUSH
50657: LD_INT 104
50659: EQUAL
50660: IFFALSE 50666
// MC_TurretWeapon ( ) ;
50662: NOP4
// if event = 105 then
50666: NOP4
50670: PUSH
50671: LD_INT 105
50673: EQUAL
50674: IFFALSE 50680
// MC_BuildUpgrade ( ) ;
50676: NOP4
// if event = 106 then
50680: NOP4
50684: PUSH
50685: LD_INT 106
50687: EQUAL
50688: IFFALSE 50694
// MC_PlantMines ( ) ;
50690: NOP4
// if event = 107 then
50694: NOP4
50698: PUSH
50699: LD_INT 107
50701: EQUAL
50702: IFFALSE 50708
// MC_CollectCrates ( ) ;
50704: NOP4
// if event = 108 then
50708: NOP4
50712: PUSH
50713: LD_INT 108
50715: EQUAL
50716: IFFALSE 50722
// MC_LinkRemoteControl ( ) ;
50718: NOP4
// if event = 109 then
50722: NOP4
50726: PUSH
50727: LD_INT 109
50729: EQUAL
50730: IFFALSE 50736
// MC_ProduceVehicle ( ) ;
50732: NOP4
// if event = 110 then
50736: NOP4
50740: PUSH
50741: LD_INT 110
50743: EQUAL
50744: IFFALSE 50750
// MC_SendAttack ( ) ;
50746: NOP4
// if event = 111 then
50750: NOP4
50754: PUSH
50755: LD_INT 111
50757: EQUAL
50758: IFFALSE 50764
// MC_Defend ( ) ;
50760: NOP4
// if event = 112 then
50764: NOP4
50768: PUSH
50769: LD_INT 112
50771: EQUAL
50772: IFFALSE 50778
// MC_Research ( ) ;
50774: NOP4
// if event = 113 then
50778: NOP4
50782: PUSH
50783: LD_INT 113
50785: EQUAL
50786: IFFALSE 50792
// MC_MinesTrigger ( ) ;
50788: NOP4
// if event = 120 then
50792: NOP4
50796: PUSH
50797: LD_INT 120
50799: EQUAL
50800: IFFALSE 50806
// MC_RepairVehicle ( ) ;
50802: NOP4
// if event = 121 then
50806: NOP4
50810: PUSH
50811: LD_INT 121
50813: EQUAL
50814: IFFALSE 50820
// MC_TameApe ( ) ;
50816: NOP4
// if event = 122 then
50820: NOP4
50824: PUSH
50825: LD_INT 122
50827: EQUAL
50828: IFFALSE 50834
// MC_ChangeApeClass ( ) ;
50830: NOP4
// if event = 123 then
50834: NOP4
50838: PUSH
50839: LD_INT 123
50841: EQUAL
50842: IFFALSE 50848
// MC_Bazooka ( ) ;
50844: NOP4
// if event = 124 then
50848: NOP4
50852: PUSH
50853: LD_INT 124
50855: EQUAL
50856: IFFALSE 50862
// MC_TeleportExit ( ) ;
50858: NOP4
// if event = 125 then
50862: NOP4
50866: PUSH
50867: LD_INT 125
50869: EQUAL
50870: IFFALSE 50876
// MC_Deposits ( ) ;
50872: NOP4
// if event = 126 then
50876: NOP4
50880: PUSH
50881: LD_INT 126
50883: EQUAL
50884: IFFALSE 50890
// MC_RemoteDriver ( ) ;
50886: NOP4
// if event = 200 then
50890: NOP4
50894: PUSH
50895: LD_INT 200
50897: EQUAL
50898: IFFALSE 50904
// MC_Idle ( ) ;
50900: NOP4
// end ;
50904: PPOPN 1
50906: END
// export function MC_Reset ( base , tag ) ; var i ; begin
50907: LD_INT 0
50909: PPUSH
50910: PPUSH
// if not mc_bases [ base ] or not tag then
50911: NOP4
50915: PUSH
50916: NOP4
50920: ARRAY
50921: NOT
50922: PUSH
50923: NOP4
50927: NOT
50928: OR
50929: IFFALSE 50933
// exit ;
50931: GO 50997
// for i in mc_bases [ base ] union mc_ape [ base ] do
50933: NOP4
50937: PUSH
50938: NOP4
50942: PUSH
50943: NOP4
50947: ARRAY
50948: PUSH
50949: NOP4
50953: PUSH
50954: NOP4
50958: ARRAY
50959: UNION
50960: PUSH
50961: FOR_IN
50962: IFFALSE 50995
// if GetTag ( i ) = tag then
50964: NOP4
50968: PPUSH
50969: NOP4
50973: PUSH
50974: NOP4
50978: EQUAL
50979: IFFALSE 50993
// SetTag ( i , 0 ) ;
50981: NOP4
50985: PPUSH
50986: LD_INT 0
50988: PPUSH
50989: NOP4
50993: GO 50961
50995: POP
50996: POP
// end ;
50997: LD_VAR 0 3
51001: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
51002: LD_INT 0
51004: PPUSH
51005: PPUSH
51006: PPUSH
51007: PPUSH
51008: PPUSH
51009: PPUSH
51010: PPUSH
51011: PPUSH
// if not mc_bases then
51012: NOP4
51016: NOT
51017: IFFALSE 51021
// exit ;
51019: GO 51479
// for i = 1 to mc_bases do
51021: NOP4
51025: PUSH
51026: DOUBLE
51027: LD_INT 1
51029: DEC
51030: ST_TO_ADDR
51031: NOP4
51035: PUSH
51036: FOR_TO
51037: IFFALSE 51477
// begin tmp := MC_ClassCheckReq ( i ) ;
51039: NOP4
51043: PUSH
51044: NOP4
51048: PPUSH
51049: NOP4
51053: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
51054: NOP4
51058: PUSH
51059: NOP4
51063: PPUSH
51064: NOP4
51068: PPUSH
51069: NOP4
51073: PPUSH
51074: NOP4
51078: ST_TO_ADDR
// if not tmp then
51079: NOP4
51083: NOT
51084: IFFALSE 51088
// continue ;
51086: GO 51036
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
51088: NOP4
51092: PUSH
51093: NOP4
51097: PUSH
51098: NOP4
51102: ARRAY
51103: PPUSH
51104: LD_INT 2
51106: PUSH
51107: LD_INT 30
51109: PUSH
51110: LD_INT 4
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 30
51119: PUSH
51120: LD_INT 5
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: LIST
51131: PPUSH
51132: NOP4
51136: PUSH
51137: NOP4
51141: PUSH
51142: NOP4
51146: ARRAY
51147: PPUSH
51148: LD_INT 2
51150: PUSH
51151: LD_INT 30
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 30
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: LIST
51175: PPUSH
51176: NOP4
51180: PUSH
51181: NOP4
51185: PUSH
51186: NOP4
51190: ARRAY
51191: PPUSH
51192: LD_INT 30
51194: PUSH
51195: LD_INT 3
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PPUSH
51202: NOP4
51206: PUSH
51207: NOP4
51211: PUSH
51212: NOP4
51216: ARRAY
51217: PPUSH
51218: LD_INT 2
51220: PUSH
51221: LD_INT 30
51223: PUSH
51224: LD_INT 6
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 30
51233: PUSH
51234: LD_INT 7
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 30
51243: PUSH
51244: LD_INT 8
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: PPUSH
51257: NOP4
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: ST_TO_ADDR
// for j = 1 to 4 do
51268: NOP4
51272: PUSH
51273: DOUBLE
51274: LD_INT 1
51276: DEC
51277: ST_TO_ADDR
51278: LD_INT 4
51280: PUSH
51281: FOR_TO
51282: IFFALSE 51473
// begin if not tmp [ j ] then
51284: NOP4
51288: PUSH
51289: NOP4
51293: ARRAY
51294: NOT
51295: IFFALSE 51299
// continue ;
51297: GO 51281
// for p in tmp [ j ] do
51299: NOP4
51303: PUSH
51304: NOP4
51308: PUSH
51309: NOP4
51313: ARRAY
51314: PUSH
51315: FOR_IN
51316: IFFALSE 51469
// begin if not b [ j ] then
51318: NOP4
51322: PUSH
51323: NOP4
51327: ARRAY
51328: NOT
51329: IFFALSE 51333
// break ;
51331: GO 51469
// e := 0 ;
51333: NOP4
51337: PUSH
51338: LD_INT 0
51340: ST_TO_ADDR
// for k in b [ j ] do
51341: NOP4
51345: PUSH
51346: NOP4
51350: PUSH
51351: NOP4
51355: ARRAY
51356: PUSH
51357: FOR_IN
51358: IFFALSE 51385
// if IsNotFull ( k ) then
51360: NOP4
51364: PPUSH
51365: NOP4
51369: IFFALSE 51383
// begin e := k ;
51371: NOP4
51375: PUSH
51376: NOP4
51380: ST_TO_ADDR
// break ;
51381: GO 51385
// end ;
51383: GO 51357
51385: POP
51386: POP
// if e and not UnitGoingToBuilding ( p , e ) then
51387: NOP4
51391: PUSH
51392: NOP4
51396: PPUSH
51397: NOP4
51401: PPUSH
51402: NOP4
51406: NOT
51407: AND
51408: IFFALSE 51467
// begin if IsInUnit ( p ) then
51410: NOP4
51414: PPUSH
51415: NOP4
51419: IFFALSE 51430
// ComExitBuilding ( p ) ;
51421: NOP4
51425: PPUSH
51426: NOP4
// ComEnterUnit ( p , e ) ;
51430: NOP4
51434: PPUSH
51435: NOP4
51439: PPUSH
51440: NOP4
// AddComChangeProfession ( p , j ) ;
51444: NOP4
51448: PPUSH
51449: NOP4
51453: PPUSH
51454: NOP4
// AddComExitBuilding ( p ) ;
51458: NOP4
51462: PPUSH
51463: NOP4
// end ; end ;
51467: GO 51315
51469: POP
51470: POP
// end ;
51471: GO 51281
51473: POP
51474: POP
// end ;
51475: GO 51036
51477: POP
51478: POP
// end ;
51479: LD_VAR 0 1
51483: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
51484: LD_INT 0
51486: PPUSH
51487: PPUSH
51488: PPUSH
51489: PPUSH
51490: PPUSH
51491: PPUSH
51492: PPUSH
51493: PPUSH
51494: PPUSH
51495: PPUSH
51496: PPUSH
51497: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
51498: NOP4
51502: NOT
51503: PUSH
51504: NOP4
51508: PUSH
51509: NOP4
51513: ARRAY
51514: NOT
51515: OR
51516: PUSH
51517: NOP4
51521: PUSH
51522: NOP4
51526: ARRAY
51527: PPUSH
51528: LD_INT 2
51530: PUSH
51531: LD_INT 30
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 30
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: LIST
51555: PPUSH
51556: NOP4
51560: NOT
51561: OR
51562: IFFALSE 51566
// exit ;
51564: GO 55069
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
51566: NOP4
51570: PUSH
51571: NOP4
51575: PUSH
51576: NOP4
51580: ARRAY
51581: PPUSH
51582: LD_INT 2
51584: PUSH
51585: LD_INT 25
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 25
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 25
51607: PUSH
51608: LD_INT 3
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 25
51617: PUSH
51618: LD_INT 4
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 25
51627: PUSH
51628: LD_INT 5
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 25
51637: PUSH
51638: LD_INT 8
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 25
51647: PUSH
51648: LD_INT 9
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: PPUSH
51665: NOP4
51669: ST_TO_ADDR
// if not tmp then
51670: NOP4
51674: NOT
51675: IFFALSE 51679
// exit ;
51677: GO 55069
// for i in tmp do
51679: NOP4
51683: PUSH
51684: NOP4
51688: PUSH
51689: FOR_IN
51690: IFFALSE 51721
// if GetTag ( i ) then
51692: NOP4
51696: PPUSH
51697: NOP4
51701: IFFALSE 51719
// tmp := tmp diff i ;
51703: NOP4
51707: PUSH
51708: NOP4
51712: PUSH
51713: NOP4
51717: DIFF
51718: ST_TO_ADDR
51719: GO 51689
51721: POP
51722: POP
// if not tmp then
51723: NOP4
51727: NOT
51728: IFFALSE 51732
// exit ;
51730: GO 55069
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
51732: NOP4
51736: PUSH
51737: NOP4
51741: PUSH
51742: NOP4
51746: ARRAY
51747: PPUSH
51748: LD_INT 2
51750: PUSH
51751: LD_INT 25
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 25
51763: PUSH
51764: LD_INT 5
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 25
51773: PUSH
51774: LD_INT 8
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 25
51783: PUSH
51784: LD_INT 9
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: PPUSH
51798: NOP4
51802: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
51803: NOP4
51807: PUSH
51808: NOP4
51812: PUSH
51813: NOP4
51817: ARRAY
51818: PPUSH
51819: LD_INT 25
51821: PUSH
51822: LD_INT 2
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PPUSH
51829: NOP4
51833: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
51834: NOP4
51838: PUSH
51839: NOP4
51843: PUSH
51844: NOP4
51848: ARRAY
51849: PPUSH
51850: LD_INT 25
51852: PUSH
51853: LD_INT 3
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PPUSH
51860: NOP4
51864: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
51865: NOP4
51869: PUSH
51870: NOP4
51874: PUSH
51875: NOP4
51879: ARRAY
51880: PPUSH
51881: LD_INT 25
51883: PUSH
51884: LD_INT 4
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 24
51893: PUSH
51894: LD_INT 251
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PPUSH
51905: NOP4
51909: ST_TO_ADDR
// if mc_scan [ base ] then
51910: NOP4
51914: PUSH
51915: NOP4
51919: ARRAY
51920: IFFALSE 52381
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
51922: NOP4
51926: PUSH
51927: NOP4
51931: PPUSH
51932: NOP4
51936: PPUSH
51937: LD_INT 4
51939: PPUSH
51940: NOP4
51944: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
51945: NOP4
51949: PUSH
51950: NOP4
51954: PUSH
51955: NOP4
51959: ARRAY
51960: PPUSH
51961: LD_INT 2
51963: PUSH
51964: LD_INT 30
51966: PUSH
51967: LD_INT 4
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 30
51976: PUSH
51977: LD_INT 5
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: LIST
51988: PPUSH
51989: NOP4
51993: ST_TO_ADDR
// if not b then
51994: NOP4
51998: NOT
51999: IFFALSE 52003
// exit ;
52001: GO 55069
// p := [ ] ;
52003: NOP4
52007: PUSH
52008: EMPTY
52009: ST_TO_ADDR
// if sci >= 2 then
52010: NOP4
52014: PUSH
52015: LD_INT 2
52017: GREATEREQUAL
52018: IFFALSE 52049
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
52020: NOP4
52024: PUSH
52025: NOP4
52029: PUSH
52030: LD_INT 1
52032: ARRAY
52033: PUSH
52034: NOP4
52038: PUSH
52039: LD_INT 2
52041: ARRAY
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: ST_TO_ADDR
52047: GO 52110
// if sci = 1 then
52049: NOP4
52053: PUSH
52054: LD_INT 1
52056: EQUAL
52057: IFFALSE 52078
// sci := [ sci [ 1 ] ] else
52059: NOP4
52063: PUSH
52064: NOP4
52068: PUSH
52069: LD_INT 1
52071: ARRAY
52072: PUSH
52073: EMPTY
52074: LIST
52075: ST_TO_ADDR
52076: GO 52110
// if sci = 0 then
52078: NOP4
52082: PUSH
52083: LD_INT 0
52085: EQUAL
52086: IFFALSE 52110
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
52088: NOP4
52092: PUSH
52093: NOP4
52097: PPUSH
52098: LD_INT 4
52100: PPUSH
52101: NOP4
52105: PUSH
52106: LD_INT 1
52108: ARRAY
52109: ST_TO_ADDR
// if eng > 4 then
52110: NOP4
52114: PUSH
52115: LD_INT 4
52117: GREATER
52118: IFFALSE 52164
// for i = eng downto 4 do
52120: NOP4
52124: PUSH
52125: DOUBLE
52126: NOP4
52130: INC
52131: ST_TO_ADDR
52132: LD_INT 4
52134: PUSH
52135: FOR_DOWNTO
52136: IFFALSE 52162
// eng := eng diff eng [ i ] ;
52138: NOP4
52142: PUSH
52143: NOP4
52147: PUSH
52148: NOP4
52152: PUSH
52153: NOP4
52157: ARRAY
52158: DIFF
52159: ST_TO_ADDR
52160: GO 52135
52162: POP
52163: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
52164: NOP4
52168: PUSH
52169: NOP4
52173: PUSH
52174: NOP4
52178: PUSH
52179: NOP4
52183: UNION
52184: PUSH
52185: NOP4
52189: UNION
52190: PUSH
52191: NOP4
52195: UNION
52196: DIFF
52197: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
52198: NOP4
52202: PUSH
52203: NOP4
52207: PUSH
52208: NOP4
52212: ARRAY
52213: PPUSH
52214: LD_INT 2
52216: PUSH
52217: LD_INT 30
52219: PUSH
52220: LD_INT 32
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 30
52229: PUSH
52230: LD_INT 31
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: LIST
52241: PPUSH
52242: NOP4
52246: PUSH
52247: NOP4
52251: PUSH
52252: NOP4
52256: ARRAY
52257: PPUSH
52258: LD_INT 2
52260: PUSH
52261: LD_INT 30
52263: PUSH
52264: LD_INT 4
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 30
52273: PUSH
52274: LD_INT 5
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: PPUSH
52286: NOP4
52290: PUSH
52291: LD_INT 6
52293: MUL
52294: PLUS
52295: ST_TO_ADDR
// if bcount < tmp then
52296: NOP4
52300: PUSH
52301: NOP4
52305: LESS
52306: IFFALSE 52352
// for i = tmp downto bcount do
52308: NOP4
52312: PUSH
52313: DOUBLE
52314: NOP4
52318: INC
52319: ST_TO_ADDR
52320: NOP4
52324: PUSH
52325: FOR_DOWNTO
52326: IFFALSE 52350
// tmp := Delete ( tmp , tmp ) ;
52328: NOP4
52332: PUSH
52333: NOP4
52337: PPUSH
52338: NOP4
52342: PPUSH
52343: NOP4
52347: ST_TO_ADDR
52348: GO 52325
52350: POP
52351: POP
// result := [ tmp , 0 , 0 , p ] ;
52352: NOP4
52356: PUSH
52357: NOP4
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: NOP4
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: ST_TO_ADDR
// exit ;
52379: GO 55069
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
52381: NOP4
52385: PUSH
52386: NOP4
52390: ARRAY
52391: PPUSH
52392: LD_INT 2
52394: PUSH
52395: LD_INT 30
52397: PUSH
52398: LD_INT 6
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 30
52407: PUSH
52408: LD_INT 7
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 30
52417: PUSH
52418: LD_INT 8
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: PPUSH
52431: NOP4
52435: NOT
52436: PUSH
52437: NOP4
52441: PUSH
52442: NOP4
52446: ARRAY
52447: PPUSH
52448: LD_INT 30
52450: PUSH
52451: LD_INT 3
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PPUSH
52458: NOP4
52462: NOT
52463: AND
52464: IFFALSE 52536
// begin if eng = tmp then
52466: NOP4
52470: PUSH
52471: NOP4
52475: EQUAL
52476: IFFALSE 52480
// exit ;
52478: GO 55069
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
52480: NOP4
52484: PUSH
52485: NOP4
52489: PPUSH
52490: NOP4
52494: PPUSH
52495: LD_INT 1
52497: PPUSH
52498: NOP4
52502: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
52503: NOP4
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: NOP4
52515: PUSH
52516: NOP4
52520: DIFF
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: ST_TO_ADDR
// exit ;
52534: GO 55069
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
52536: NOP4
52540: PUSH
52541: NOP4
52545: PUSH
52546: NOP4
52550: ARRAY
52551: ARRAY
52552: PUSH
52553: NOP4
52557: PUSH
52558: NOP4
52562: ARRAY
52563: PPUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 30
52569: PUSH
52570: LD_INT 6
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 30
52579: PUSH
52580: LD_INT 7
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 30
52589: PUSH
52590: LD_INT 8
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: PPUSH
52603: NOP4
52607: AND
52608: PUSH
52609: NOP4
52613: PUSH
52614: NOP4
52618: ARRAY
52619: PPUSH
52620: LD_INT 30
52622: PUSH
52623: LD_INT 3
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PPUSH
52630: NOP4
52634: NOT
52635: AND
52636: IFFALSE 52850
// begin if sci >= 6 then
52638: NOP4
52642: PUSH
52643: LD_INT 6
52645: GREATEREQUAL
52646: IFFALSE 52650
// exit ;
52648: GO 55069
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
52650: NOP4
52654: PUSH
52655: NOP4
52659: PPUSH
52660: NOP4
52664: PPUSH
52665: LD_INT 2
52667: PPUSH
52668: NOP4
52672: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
52673: NOP4
52677: PUSH
52678: NOP4
52682: PUSH
52683: NOP4
52687: DIFF
52688: PPUSH
52689: LD_INT 4
52691: PPUSH
52692: NOP4
52696: ST_TO_ADDR
// p := [ ] ;
52697: NOP4
52701: PUSH
52702: EMPTY
52703: ST_TO_ADDR
// if sci < 6 and sort > 6 then
52704: NOP4
52708: PUSH
52709: LD_INT 6
52711: LESS
52712: PUSH
52713: NOP4
52717: PUSH
52718: LD_INT 6
52720: GREATER
52721: AND
52722: IFFALSE 52803
// begin for i = 1 to 6 - sci do
52724: NOP4
52728: PUSH
52729: DOUBLE
52730: LD_INT 1
52732: DEC
52733: ST_TO_ADDR
52734: LD_INT 6
52736: PUSH
52737: NOP4
52741: MINUS
52742: PUSH
52743: FOR_TO
52744: IFFALSE 52799
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
52746: NOP4
52750: PUSH
52751: NOP4
52755: PPUSH
52756: NOP4
52760: PUSH
52761: LD_INT 1
52763: PLUS
52764: PPUSH
52765: NOP4
52769: PUSH
52770: LD_INT 1
52772: ARRAY
52773: PPUSH
52774: NOP4
52778: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
52779: NOP4
52783: PUSH
52784: NOP4
52788: PPUSH
52789: LD_INT 1
52791: PPUSH
52792: NOP4
52796: ST_TO_ADDR
// end ;
52797: GO 52743
52799: POP
52800: POP
// end else
52801: GO 52823
// if sort then
52803: NOP4
52807: IFFALSE 52823
// p := sort [ 1 ] ;
52809: NOP4
52813: PUSH
52814: NOP4
52818: PUSH
52819: LD_INT 1
52821: ARRAY
52822: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
52823: NOP4
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: NOP4
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: ST_TO_ADDR
// exit ;
52848: GO 55069
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
52850: NOP4
52854: PUSH
52855: NOP4
52859: PUSH
52860: NOP4
52864: ARRAY
52865: ARRAY
52866: PUSH
52867: NOP4
52871: PUSH
52872: NOP4
52876: ARRAY
52877: PPUSH
52878: LD_INT 2
52880: PUSH
52881: LD_INT 30
52883: PUSH
52884: LD_INT 6
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 30
52893: PUSH
52894: LD_INT 7
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 30
52903: PUSH
52904: LD_INT 8
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: PPUSH
52917: NOP4
52921: AND
52922: PUSH
52923: NOP4
52927: PUSH
52928: NOP4
52932: ARRAY
52933: PPUSH
52934: LD_INT 30
52936: PUSH
52937: LD_INT 3
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PPUSH
52944: NOP4
52948: AND
52949: IFFALSE 53683
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
52951: NOP4
52955: PUSH
52956: NOP4
52960: PPUSH
52961: NOP4
52965: PPUSH
52966: LD_INT 3
52968: PPUSH
52969: NOP4
52973: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
52974: NOP4
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: ST_TO_ADDR
// if not eng then
52997: NOP4
53001: NOT
53002: IFFALSE 53065
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
53004: NOP4
53008: PUSH
53009: NOP4
53013: PPUSH
53014: LD_INT 2
53016: PPUSH
53017: NOP4
53021: PUSH
53022: LD_INT 1
53024: ARRAY
53025: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
53026: NOP4
53030: PUSH
53031: NOP4
53035: PPUSH
53036: LD_INT 2
53038: PPUSH
53039: NOP4
53043: PPUSH
53044: NOP4
53048: ST_TO_ADDR
// tmp := tmp diff p ;
53049: NOP4
53053: PUSH
53054: NOP4
53058: PUSH
53059: NOP4
53063: DIFF
53064: ST_TO_ADDR
// end ; if tmp and sci < 6 then
53065: NOP4
53069: PUSH
53070: NOP4
53074: PUSH
53075: LD_INT 6
53077: LESS
53078: AND
53079: IFFALSE 53267
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
53081: NOP4
53085: PUSH
53086: NOP4
53090: PUSH
53091: NOP4
53095: PUSH
53096: NOP4
53100: UNION
53101: DIFF
53102: PPUSH
53103: LD_INT 4
53105: PPUSH
53106: NOP4
53110: ST_TO_ADDR
// p := [ ] ;
53111: NOP4
53115: PUSH
53116: EMPTY
53117: ST_TO_ADDR
// if sort then
53118: NOP4
53122: IFFALSE 53238
// for i = 1 to 6 - sci do
53124: NOP4
53128: PUSH
53129: DOUBLE
53130: LD_INT 1
53132: DEC
53133: ST_TO_ADDR
53134: LD_INT 6
53136: PUSH
53137: NOP4
53141: MINUS
53142: PUSH
53143: FOR_TO
53144: IFFALSE 53236
// begin if i = sort then
53146: NOP4
53150: PUSH
53151: NOP4
53155: EQUAL
53156: IFFALSE 53160
// break ;
53158: GO 53236
// if GetClass ( i ) = 4 then
53160: NOP4
53164: PPUSH
53165: NOP4
53169: PUSH
53170: LD_INT 4
53172: EQUAL
53173: IFFALSE 53177
// continue ;
53175: GO 53143
// p := Insert ( p , p + 1 , sort [ i ] ) ;
53177: NOP4
53181: PUSH
53182: NOP4
53186: PPUSH
53187: NOP4
53191: PUSH
53192: LD_INT 1
53194: PLUS
53195: PPUSH
53196: NOP4
53200: PUSH
53201: NOP4
53205: ARRAY
53206: PPUSH
53207: NOP4
53211: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
53212: NOP4
53216: PUSH
53217: NOP4
53221: PUSH
53222: NOP4
53226: PUSH
53227: NOP4
53231: ARRAY
53232: DIFF
53233: ST_TO_ADDR
// end ;
53234: GO 53143
53236: POP
53237: POP
// if p then
53238: NOP4
53242: IFFALSE 53267
// result := Replace ( result , 4 , p ) ;
53244: NOP4
53248: PUSH
53249: NOP4
53253: PPUSH
53254: LD_INT 4
53256: PPUSH
53257: NOP4
53261: PPUSH
53262: NOP4
53266: ST_TO_ADDR
// end ; if tmp and mech < 6 then
53267: NOP4
53271: PUSH
53272: NOP4
53276: PUSH
53277: LD_INT 6
53279: LESS
53280: AND
53281: IFFALSE 53469
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
53283: NOP4
53287: PUSH
53288: NOP4
53292: PUSH
53293: NOP4
53297: PUSH
53298: NOP4
53302: UNION
53303: DIFF
53304: PPUSH
53305: LD_INT 3
53307: PPUSH
53308: NOP4
53312: ST_TO_ADDR
// p := [ ] ;
53313: NOP4
53317: PUSH
53318: EMPTY
53319: ST_TO_ADDR
// if sort then
53320: NOP4
53324: IFFALSE 53440
// for i = 1 to 6 - mech do
53326: NOP4
53330: PUSH
53331: DOUBLE
53332: LD_INT 1
53334: DEC
53335: ST_TO_ADDR
53336: LD_INT 6
53338: PUSH
53339: NOP4
53343: MINUS
53344: PUSH
53345: FOR_TO
53346: IFFALSE 53438
// begin if i = sort then
53348: NOP4
53352: PUSH
53353: NOP4
53357: EQUAL
53358: IFFALSE 53362
// break ;
53360: GO 53438
// if GetClass ( i ) = 3 then
53362: NOP4
53366: PPUSH
53367: NOP4
53371: PUSH
53372: LD_INT 3
53374: EQUAL
53375: IFFALSE 53379
// continue ;
53377: GO 53345
// p := Insert ( p , p + 1 , sort [ i ] ) ;
53379: NOP4
53383: PUSH
53384: NOP4
53388: PPUSH
53389: NOP4
53393: PUSH
53394: LD_INT 1
53396: PLUS
53397: PPUSH
53398: NOP4
53402: PUSH
53403: NOP4
53407: ARRAY
53408: PPUSH
53409: NOP4
53413: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
53414: NOP4
53418: PUSH
53419: NOP4
53423: PUSH
53424: NOP4
53428: PUSH
53429: NOP4
53433: ARRAY
53434: DIFF
53435: ST_TO_ADDR
// end ;
53436: GO 53345
53438: POP
53439: POP
// if p then
53440: NOP4
53444: IFFALSE 53469
// result := Replace ( result , 3 , p ) ;
53446: NOP4
53450: PUSH
53451: NOP4
53455: PPUSH
53456: LD_INT 3
53458: PPUSH
53459: NOP4
53463: PPUSH
53464: NOP4
53468: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
53469: NOP4
53473: PUSH
53474: LD_INT 6
53476: GREATER
53477: PUSH
53478: NOP4
53482: PUSH
53483: LD_INT 6
53485: LESS
53486: AND
53487: IFFALSE 53681
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
53489: NOP4
53493: PUSH
53494: NOP4
53498: PUSH
53499: NOP4
53503: PUSH
53504: NOP4
53508: UNION
53509: PUSH
53510: NOP4
53514: UNION
53515: DIFF
53516: PPUSH
53517: LD_INT 2
53519: PPUSH
53520: NOP4
53524: ST_TO_ADDR
// p := [ ] ;
53525: NOP4
53529: PUSH
53530: EMPTY
53531: ST_TO_ADDR
// if sort then
53532: NOP4
53536: IFFALSE 53652
// for i = 1 to 6 - eng do
53538: NOP4
53542: PUSH
53543: DOUBLE
53544: LD_INT 1
53546: DEC
53547: ST_TO_ADDR
53548: LD_INT 6
53550: PUSH
53551: NOP4
53555: MINUS
53556: PUSH
53557: FOR_TO
53558: IFFALSE 53650
// begin if i = sort then
53560: NOP4
53564: PUSH
53565: NOP4
53569: EQUAL
53570: IFFALSE 53574
// break ;
53572: GO 53650
// if GetClass ( i ) = 2 then
53574: NOP4
53578: PPUSH
53579: NOP4
53583: PUSH
53584: LD_INT 2
53586: EQUAL
53587: IFFALSE 53591
// continue ;
53589: GO 53557
// p := Insert ( p , p + 1 , sort [ i ] ) ;
53591: NOP4
53595: PUSH
53596: NOP4
53600: PPUSH
53601: NOP4
53605: PUSH
53606: LD_INT 1
53608: PLUS
53609: PPUSH
53610: NOP4
53614: PUSH
53615: NOP4
53619: ARRAY
53620: PPUSH
53621: NOP4
53625: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
53626: NOP4
53630: PUSH
53631: NOP4
53635: PUSH
53636: NOP4
53640: PUSH
53641: NOP4
53645: ARRAY
53646: DIFF
53647: ST_TO_ADDR
// end ;
53648: GO 53557
53650: POP
53651: POP
// if p then
53652: NOP4
53656: IFFALSE 53681
// result := Replace ( result , 2 , p ) ;
53658: NOP4
53662: PUSH
53663: NOP4
53667: PPUSH
53668: LD_INT 2
53670: PPUSH
53671: NOP4
53675: PPUSH
53676: NOP4
53680: ST_TO_ADDR
// end ; exit ;
53681: GO 55069
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
53683: NOP4
53687: PUSH
53688: NOP4
53692: PUSH
53693: NOP4
53697: ARRAY
53698: ARRAY
53699: NOT
53700: PUSH
53701: NOP4
53705: PUSH
53706: NOP4
53710: ARRAY
53711: PPUSH
53712: LD_INT 30
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PPUSH
53722: NOP4
53726: AND
53727: PUSH
53728: NOP4
53732: PUSH
53733: NOP4
53737: ARRAY
53738: AND
53739: IFFALSE 54347
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
53741: NOP4
53745: PUSH
53746: NOP4
53750: PPUSH
53751: NOP4
53755: PPUSH
53756: LD_INT 5
53758: PPUSH
53759: NOP4
53763: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
53764: NOP4
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: ST_TO_ADDR
// if sci > 1 then
53787: NOP4
53791: PUSH
53792: LD_INT 1
53794: GREATER
53795: IFFALSE 53823
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
53797: NOP4
53801: PUSH
53802: NOP4
53806: PUSH
53807: NOP4
53811: PUSH
53812: NOP4
53816: PUSH
53817: LD_INT 1
53819: ARRAY
53820: DIFF
53821: DIFF
53822: ST_TO_ADDR
// if tmp and not sci then
53823: NOP4
53827: PUSH
53828: NOP4
53832: NOT
53833: AND
53834: IFFALSE 53903
// begin sort := SortBySkill ( tmp , 4 ) ;
53836: NOP4
53840: PUSH
53841: NOP4
53845: PPUSH
53846: LD_INT 4
53848: PPUSH
53849: NOP4
53853: ST_TO_ADDR
// if sort then
53854: NOP4
53858: IFFALSE 53874
// p := sort [ 1 ] ;
53860: NOP4
53864: PUSH
53865: NOP4
53869: PUSH
53870: LD_INT 1
53872: ARRAY
53873: ST_TO_ADDR
// if p then
53874: NOP4
53878: IFFALSE 53903
// result := Replace ( result , 4 , p ) ;
53880: NOP4
53884: PUSH
53885: NOP4
53889: PPUSH
53890: LD_INT 4
53892: PPUSH
53893: NOP4
53897: PPUSH
53898: NOP4
53902: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
53903: NOP4
53907: PUSH
53908: NOP4
53912: PUSH
53913: NOP4
53917: DIFF
53918: ST_TO_ADDR
// if tmp and mech < 6 then
53919: NOP4
53923: PUSH
53924: NOP4
53928: PUSH
53929: LD_INT 6
53931: LESS
53932: AND
53933: IFFALSE 54121
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
53935: NOP4
53939: PUSH
53940: NOP4
53944: PUSH
53945: NOP4
53949: PUSH
53950: NOP4
53954: UNION
53955: DIFF
53956: PPUSH
53957: LD_INT 3
53959: PPUSH
53960: NOP4
53964: ST_TO_ADDR
// p := [ ] ;
53965: NOP4
53969: PUSH
53970: EMPTY
53971: ST_TO_ADDR
// if sort then
53972: NOP4
53976: IFFALSE 54092
// for i = 1 to 6 - mech do
53978: NOP4
53982: PUSH
53983: DOUBLE
53984: LD_INT 1
53986: DEC
53987: ST_TO_ADDR
53988: LD_INT 6
53990: PUSH
53991: NOP4
53995: MINUS
53996: PUSH
53997: FOR_TO
53998: IFFALSE 54090
// begin if i = sort then
54000: NOP4
54004: PUSH
54005: NOP4
54009: EQUAL
54010: IFFALSE 54014
// break ;
54012: GO 54090
// if GetClass ( i ) = 3 then
54014: NOP4
54018: PPUSH
54019: NOP4
54023: PUSH
54024: LD_INT 3
54026: EQUAL
54027: IFFALSE 54031
// continue ;
54029: GO 53997
// p := Insert ( p , p + 1 , sort [ i ] ) ;
54031: NOP4
54035: PUSH
54036: NOP4
54040: PPUSH
54041: NOP4
54045: PUSH
54046: LD_INT 1
54048: PLUS
54049: PPUSH
54050: NOP4
54054: PUSH
54055: NOP4
54059: ARRAY
54060: PPUSH
54061: NOP4
54065: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
54066: NOP4
54070: PUSH
54071: NOP4
54075: PUSH
54076: NOP4
54080: PUSH
54081: NOP4
54085: ARRAY
54086: DIFF
54087: ST_TO_ADDR
// end ;
54088: GO 53997
54090: POP
54091: POP
// if p then
54092: NOP4
54096: IFFALSE 54121
// result := Replace ( result , 3 , p ) ;
54098: NOP4
54102: PUSH
54103: NOP4
54107: PPUSH
54108: LD_INT 3
54110: PPUSH
54111: NOP4
54115: PPUSH
54116: NOP4
54120: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
54121: NOP4
54125: PUSH
54126: NOP4
54130: PUSH
54131: NOP4
54135: DIFF
54136: ST_TO_ADDR
// if tmp and eng < 6 then
54137: NOP4
54141: PUSH
54142: NOP4
54146: PUSH
54147: LD_INT 6
54149: LESS
54150: AND
54151: IFFALSE 54345
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
54153: NOP4
54157: PUSH
54158: NOP4
54162: PUSH
54163: NOP4
54167: PUSH
54168: NOP4
54172: UNION
54173: PUSH
54174: NOP4
54178: UNION
54179: DIFF
54180: PPUSH
54181: LD_INT 2
54183: PPUSH
54184: NOP4
54188: ST_TO_ADDR
// p := [ ] ;
54189: NOP4
54193: PUSH
54194: EMPTY
54195: ST_TO_ADDR
// if sort then
54196: NOP4
54200: IFFALSE 54316
// for i = 1 to 6 - eng do
54202: NOP4
54206: PUSH
54207: DOUBLE
54208: LD_INT 1
54210: DEC
54211: ST_TO_ADDR
54212: LD_INT 6
54214: PUSH
54215: NOP4
54219: MINUS
54220: PUSH
54221: FOR_TO
54222: IFFALSE 54314
// begin if i = sort then
54224: NOP4
54228: PUSH
54229: NOP4
54233: EQUAL
54234: IFFALSE 54238
// break ;
54236: GO 54314
// if GetClass ( i ) = 2 then
54238: NOP4
54242: PPUSH
54243: NOP4
54247: PUSH
54248: LD_INT 2
54250: EQUAL
54251: IFFALSE 54255
// continue ;
54253: GO 54221
// p := Insert ( p , p + 1 , sort [ i ] ) ;
54255: NOP4
54259: PUSH
54260: NOP4
54264: PPUSH
54265: NOP4
54269: PUSH
54270: LD_INT 1
54272: PLUS
54273: PPUSH
54274: NOP4
54278: PUSH
54279: NOP4
54283: ARRAY
54284: PPUSH
54285: NOP4
54289: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
54290: NOP4
54294: PUSH
54295: NOP4
54299: PUSH
54300: NOP4
54304: PUSH
54305: NOP4
54309: ARRAY
54310: DIFF
54311: ST_TO_ADDR
// end ;
54312: GO 54221
54314: POP
54315: POP
// if p then
54316: NOP4
54320: IFFALSE 54345
// result := Replace ( result , 2 , p ) ;
54322: NOP4
54326: PUSH
54327: NOP4
54331: PPUSH
54332: LD_INT 2
54334: PPUSH
54335: NOP4
54339: PPUSH
54340: NOP4
54344: ST_TO_ADDR
// end ; exit ;
54345: GO 55069
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
54347: NOP4
54351: PUSH
54352: NOP4
54356: PUSH
54357: NOP4
54361: ARRAY
54362: ARRAY
54363: NOT
54364: PUSH
54365: NOP4
54369: PUSH
54370: NOP4
54374: ARRAY
54375: PPUSH
54376: LD_INT 30
54378: PUSH
54379: LD_INT 3
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PPUSH
54386: NOP4
54390: AND
54391: PUSH
54392: NOP4
54396: PUSH
54397: NOP4
54401: ARRAY
54402: NOT
54403: AND
54404: IFFALSE 55069
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
54406: NOP4
54410: PUSH
54411: NOP4
54415: PPUSH
54416: NOP4
54420: PPUSH
54421: LD_INT 6
54423: PPUSH
54424: NOP4
54428: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
54429: NOP4
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: ST_TO_ADDR
// if sci >= 1 then
54452: NOP4
54456: PUSH
54457: LD_INT 1
54459: GREATEREQUAL
54460: IFFALSE 54482
// tmp := tmp diff sci [ 1 ] ;
54462: NOP4
54466: PUSH
54467: NOP4
54471: PUSH
54472: NOP4
54476: PUSH
54477: LD_INT 1
54479: ARRAY
54480: DIFF
54481: ST_TO_ADDR
// if tmp and not sci then
54482: NOP4
54486: PUSH
54487: NOP4
54491: NOT
54492: AND
54493: IFFALSE 54562
// begin sort := SortBySkill ( tmp , 4 ) ;
54495: NOP4
54499: PUSH
54500: NOP4
54504: PPUSH
54505: LD_INT 4
54507: PPUSH
54508: NOP4
54512: ST_TO_ADDR
// if sort then
54513: NOP4
54517: IFFALSE 54533
// p := sort [ 1 ] ;
54519: NOP4
54523: PUSH
54524: NOP4
54528: PUSH
54529: LD_INT 1
54531: ARRAY
54532: ST_TO_ADDR
// if p then
54533: NOP4
54537: IFFALSE 54562
// result := Replace ( result , 4 , p ) ;
54539: NOP4
54543: PUSH
54544: NOP4
54548: PPUSH
54549: LD_INT 4
54551: PPUSH
54552: NOP4
54556: PPUSH
54557: NOP4
54561: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
54562: NOP4
54566: PUSH
54567: NOP4
54571: PUSH
54572: NOP4
54576: DIFF
54577: ST_TO_ADDR
// if tmp and mech < 6 then
54578: NOP4
54582: PUSH
54583: NOP4
54587: PUSH
54588: LD_INT 6
54590: LESS
54591: AND
54592: IFFALSE 54774
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
54594: NOP4
54598: PUSH
54599: NOP4
54603: PUSH
54604: NOP4
54608: DIFF
54609: PPUSH
54610: LD_INT 3
54612: PPUSH
54613: NOP4
54617: ST_TO_ADDR
// p := [ ] ;
54618: NOP4
54622: PUSH
54623: EMPTY
54624: ST_TO_ADDR
// if sort then
54625: NOP4
54629: IFFALSE 54745
// for i = 1 to 6 - mech do
54631: NOP4
54635: PUSH
54636: DOUBLE
54637: LD_INT 1
54639: DEC
54640: ST_TO_ADDR
54641: LD_INT 6
54643: PUSH
54644: NOP4
54648: MINUS
54649: PUSH
54650: FOR_TO
54651: IFFALSE 54743
// begin if i = sort then
54653: NOP4
54657: PUSH
54658: NOP4
54662: EQUAL
54663: IFFALSE 54667
// break ;
54665: GO 54743
// if GetClass ( i ) = 3 then
54667: NOP4
54671: PPUSH
54672: NOP4
54676: PUSH
54677: LD_INT 3
54679: EQUAL
54680: IFFALSE 54684
// continue ;
54682: GO 54650
// p := Insert ( p , p + 1 , sort [ i ] ) ;
54684: NOP4
54688: PUSH
54689: NOP4
54693: PPUSH
54694: NOP4
54698: PUSH
54699: LD_INT 1
54701: PLUS
54702: PPUSH
54703: NOP4
54707: PUSH
54708: NOP4
54712: ARRAY
54713: PPUSH
54714: NOP4
54718: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
54719: NOP4
54723: PUSH
54724: NOP4
54728: PUSH
54729: NOP4
54733: PUSH
54734: NOP4
54738: ARRAY
54739: DIFF
54740: ST_TO_ADDR
// end ;
54741: GO 54650
54743: POP
54744: POP
// if p then
54745: NOP4
54749: IFFALSE 54774
// result := Replace ( result , 3 , p ) ;
54751: NOP4
54755: PUSH
54756: NOP4
54760: PPUSH
54761: LD_INT 3
54763: PPUSH
54764: NOP4
54768: PPUSH
54769: NOP4
54773: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
54774: NOP4
54778: PUSH
54779: NOP4
54783: PUSH
54784: NOP4
54788: DIFF
54789: ST_TO_ADDR
// if tmp and eng < 4 then
54790: NOP4
54794: PUSH
54795: NOP4
54799: PUSH
54800: LD_INT 4
54802: LESS
54803: AND
54804: IFFALSE 54994
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
54806: NOP4
54810: PUSH
54811: NOP4
54815: PUSH
54816: NOP4
54820: PUSH
54821: NOP4
54825: UNION
54826: DIFF
54827: PPUSH
54828: LD_INT 2
54830: PPUSH
54831: NOP4
54835: ST_TO_ADDR
// p := [ ] ;
54836: NOP4
54840: PUSH
54841: EMPTY
54842: ST_TO_ADDR
// if sort then
54843: NOP4
54847: IFFALSE 54963
// for i = 1 to 4 - eng do
54849: NOP4
54853: PUSH
54854: DOUBLE
54855: LD_INT 1
54857: DEC
54858: ST_TO_ADDR
54859: LD_INT 4
54861: PUSH
54862: NOP4
54866: MINUS
54867: PUSH
54868: FOR_TO
54869: IFFALSE 54961
// begin if i = sort then
54871: NOP4
54875: PUSH
54876: NOP4
54880: EQUAL
54881: IFFALSE 54885
// break ;
54883: GO 54961
// if GetClass ( i ) = 2 then
54885: NOP4
54889: PPUSH
54890: NOP4
54894: PUSH
54895: LD_INT 2
54897: EQUAL
54898: IFFALSE 54902
// continue ;
54900: GO 54868
// p := Insert ( p , p + 1 , sort [ i ] ) ;
54902: NOP4
54906: PUSH
54907: NOP4
54911: PPUSH
54912: NOP4
54916: PUSH
54917: LD_INT 1
54919: PLUS
54920: PPUSH
54921: NOP4
54925: PUSH
54926: NOP4
54930: ARRAY
54931: PPUSH
54932: NOP4
54936: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
54937: NOP4
54941: PUSH
54942: NOP4
54946: PUSH
54947: NOP4
54951: PUSH
54952: NOP4
54956: ARRAY
54957: DIFF
54958: ST_TO_ADDR
// end ;
54959: GO 54868
54961: POP
54962: POP
// if p then
54963: NOP4
54967: IFFALSE 54992
// result := Replace ( result , 2 , p ) ;
54969: NOP4
54973: PUSH
54974: NOP4
54978: PPUSH
54979: LD_INT 2
54981: PPUSH
54982: NOP4
54986: PPUSH
54987: NOP4
54991: ST_TO_ADDR
// end else
54992: GO 55038
// for i = eng downto 5 do
54994: NOP4
54998: PUSH
54999: DOUBLE
55000: NOP4
55004: INC
55005: ST_TO_ADDR
55006: LD_INT 5
55008: PUSH
55009: FOR_DOWNTO
55010: IFFALSE 55036
// tmp := tmp union eng [ i ] ;
55012: NOP4
55016: PUSH
55017: NOP4
55021: PUSH
55022: NOP4
55026: PUSH
55027: NOP4
55031: ARRAY
55032: UNION
55033: ST_TO_ADDR
55034: GO 55009
55036: POP
55037: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
55038: NOP4
55042: PUSH
55043: NOP4
55047: PPUSH
55048: LD_INT 1
55050: PPUSH
55051: NOP4
55055: PUSH
55056: NOP4
55060: DIFF
55061: PPUSH
55062: NOP4
55066: ST_TO_ADDR
// exit ;
55067: GO 55069
// end ; end ;
55069: LD_VAR 0 2
55073: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
55074: LD_INT 0
55076: PPUSH
55077: PPUSH
55078: PPUSH
// if not mc_bases then
55079: NOP4
55083: NOT
55084: IFFALSE 55088
// exit ;
55086: GO 55194
// for i = 1 to mc_bases do
55088: NOP4
55092: PUSH
55093: DOUBLE
55094: LD_INT 1
55096: DEC
55097: ST_TO_ADDR
55098: NOP4
55102: PUSH
55103: FOR_TO
55104: IFFALSE 55185
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
55106: NOP4
55110: PUSH
55111: NOP4
55115: PUSH
55116: NOP4
55120: ARRAY
55121: PPUSH
55122: LD_INT 21
55124: PUSH
55125: LD_INT 3
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 3
55134: PUSH
55135: LD_INT 24
55137: PUSH
55138: LD_INT 1000
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PPUSH
55153: NOP4
55157: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
55158: NOP4
55162: PUSH
55163: NOP4
55167: PPUSH
55168: NOP4
55172: PPUSH
55173: NOP4
55177: PPUSH
55178: NOP4
55182: ST_TO_ADDR
// end ;
55183: GO 55103
55185: POP
55186: POP
// RaiseSailEvent ( 101 ) ;
55187: LD_INT 101
55189: PPUSH
55190: NOP4
// end ;
55194: LD_VAR 0 1
55198: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
55199: LD_INT 0
55201: PPUSH
55202: PPUSH
55203: PPUSH
55204: PPUSH
55205: PPUSH
55206: PPUSH
55207: PPUSH
// if not mc_bases then
55208: NOP4
55212: NOT
55213: IFFALSE 55217
// exit ;
55215: GO 55779
// for i = 1 to mc_bases do
55217: NOP4
55221: PUSH
55222: DOUBLE
55223: LD_INT 1
55225: DEC
55226: ST_TO_ADDR
55227: NOP4
55231: PUSH
55232: FOR_TO
55233: IFFALSE 55770
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
55235: NOP4
55239: PUSH
55240: NOP4
55244: PUSH
55245: NOP4
55249: ARRAY
55250: PUSH
55251: NOP4
55255: PUSH
55256: NOP4
55260: ARRAY
55261: UNION
55262: PPUSH
55263: LD_INT 21
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: LD_INT 3
55278: PUSH
55279: LD_INT 54
55281: PUSH
55282: EMPTY
55283: LIST
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 3
55291: PUSH
55292: LD_INT 24
55294: PUSH
55295: LD_INT 800
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: LIST
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PPUSH
55315: NOP4
55319: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
55320: NOP4
55324: PUSH
55325: NOP4
55329: PUSH
55330: NOP4
55334: ARRAY
55335: PPUSH
55336: LD_INT 21
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 3
55351: PUSH
55352: LD_INT 54
55354: PUSH
55355: EMPTY
55356: LIST
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: PUSH
55365: LD_INT 24
55367: PUSH
55368: LD_INT 250
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: LIST
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PPUSH
55388: NOP4
55392: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
55393: NOP4
55397: PUSH
55398: NOP4
55402: PUSH
55403: NOP4
55407: DIFF
55408: ST_TO_ADDR
// if not need_heal_1 then
55409: NOP4
55413: NOT
55414: IFFALSE 55447
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
55416: NOP4
55420: PUSH
55421: NOP4
55425: PPUSH
55426: NOP4
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PPUSH
55438: EMPTY
55439: PPUSH
55440: NOP4
55444: ST_TO_ADDR
55445: GO 55517
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
55447: NOP4
55451: PUSH
55452: NOP4
55456: PPUSH
55457: NOP4
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PPUSH
55469: NOP4
55473: PUSH
55474: NOP4
55478: ARRAY
55479: PUSH
55480: LD_INT 1
55482: ARRAY
55483: PPUSH
55484: LD_INT 3
55486: PUSH
55487: LD_INT 24
55489: PUSH
55490: LD_INT 1000
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PPUSH
55501: NOP4
55505: PUSH
55506: NOP4
55510: UNION
55511: PPUSH
55512: NOP4
55516: ST_TO_ADDR
// if not need_heal_2 then
55517: NOP4
55521: NOT
55522: IFFALSE 55555
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
55524: NOP4
55528: PUSH
55529: NOP4
55533: PPUSH
55534: NOP4
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PPUSH
55546: EMPTY
55547: PPUSH
55548: NOP4
55552: ST_TO_ADDR
55553: GO 55587
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
55555: NOP4
55559: PUSH
55560: NOP4
55564: PPUSH
55565: NOP4
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PPUSH
55577: NOP4
55581: PPUSH
55582: NOP4
55586: ST_TO_ADDR
// if need_heal_2 then
55587: NOP4
55591: IFFALSE 55752
// for j in need_heal_2 do
55593: NOP4
55597: PUSH
55598: NOP4
55602: PUSH
55603: FOR_IN
55604: IFFALSE 55750
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
55606: NOP4
55610: PUSH
55611: NOP4
55615: PUSH
55616: NOP4
55620: ARRAY
55621: PPUSH
55622: LD_INT 2
55624: PUSH
55625: LD_INT 30
55627: PUSH
55628: LD_INT 6
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 30
55637: PUSH
55638: LD_INT 7
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 30
55647: PUSH
55648: LD_INT 8
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 30
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 30
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: PPUSH
55683: NOP4
55687: ST_TO_ADDR
// if tmp then
55688: NOP4
55692: IFFALSE 55748
// begin k := NearestUnitToUnit ( tmp , j ) ;
55694: NOP4
55698: PUSH
55699: NOP4
55703: PPUSH
55704: NOP4
55708: PPUSH
55709: NOP4
55713: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
55714: NOP4
55718: PPUSH
55719: NOP4
55723: PPUSH
55724: NOP4
55728: PUSH
55729: LD_INT 5
55731: GREATER
55732: IFFALSE 55748
// ComMoveToNearbyEntrance ( j , k ) ;
55734: NOP4
55738: PPUSH
55739: NOP4
55743: PPUSH
55744: NOP4
// end ; end ;
55748: GO 55603
55750: POP
55751: POP
// if not need_heal_1 and not need_heal_2 then
55752: NOP4
55756: NOT
55757: PUSH
55758: NOP4
55762: NOT
55763: AND
55764: IFFALSE 55768
// continue ;
55766: GO 55232
// end ;
55768: GO 55232
55770: POP
55771: POP
// RaiseSailEvent ( 102 ) ;
55772: LD_INT 102
55774: PPUSH
55775: NOP4
// end ;
55779: LD_VAR 0 1
55783: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
55784: LD_INT 0
55786: PPUSH
55787: PPUSH
55788: PPUSH
55789: PPUSH
55790: PPUSH
55791: PPUSH
55792: PPUSH
55793: PPUSH
// if not mc_bases then
55794: NOP4
55798: NOT
55799: IFFALSE 55803
// exit ;
55801: GO 56664
// for i = 1 to mc_bases do
55803: NOP4
55807: PUSH
55808: DOUBLE
55809: LD_INT 1
55811: DEC
55812: ST_TO_ADDR
55813: NOP4
55817: PUSH
55818: FOR_TO
55819: IFFALSE 56662
// begin if not mc_building_need_repair [ i ] then
55821: NOP4
55825: PUSH
55826: NOP4
55830: ARRAY
55831: NOT
55832: IFFALSE 56019
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ] ) ;
55834: NOP4
55838: PUSH
55839: NOP4
55843: PUSH
55844: NOP4
55848: ARRAY
55849: PPUSH
55850: LD_INT 3
55852: PUSH
55853: LD_INT 24
55855: PUSH
55856: LD_INT 1000
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: LD_INT 34
55872: PUSH
55873: LD_INT 13
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 34
55882: PUSH
55883: LD_INT 52
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 34
55892: PUSH
55893: NOP4
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PPUSH
55912: NOP4
55916: ST_TO_ADDR
// if cranes then
55917: NOP4
55921: IFFALSE 55983
// for j in cranes do
55923: NOP4
55927: PUSH
55928: NOP4
55932: PUSH
55933: FOR_IN
55934: IFFALSE 55981
// if not IsInArea ( j , mc_parking [ i ] ) then
55936: NOP4
55940: PPUSH
55941: NOP4
55945: PUSH
55946: NOP4
55950: ARRAY
55951: PPUSH
55952: NOP4
55956: NOT
55957: IFFALSE 55979
// ComMoveToArea ( j , mc_parking [ i ] ) ;
55959: NOP4
55963: PPUSH
55964: NOP4
55968: PUSH
55969: NOP4
55973: ARRAY
55974: PPUSH
55975: NOP4
55979: GO 55933
55981: POP
55982: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
55983: NOP4
55987: PUSH
55988: NOP4
55992: PPUSH
55993: NOP4
55997: PPUSH
55998: EMPTY
55999: PPUSH
56000: NOP4
56004: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
56005: NOP4
56009: PPUSH
56010: LD_INT 101
56012: PPUSH
56013: NOP4
// continue ;
56017: GO 55818
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
56019: NOP4
56023: PUSH
56024: NOP4
56028: PPUSH
56029: NOP4
56033: PPUSH
56034: EMPTY
56035: PPUSH
56036: NOP4
56040: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
56041: NOP4
56045: PPUSH
56046: LD_INT 103
56048: PPUSH
56049: NOP4
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
56053: NOP4
56057: PUSH
56058: NOP4
56062: PUSH
56063: NOP4
56067: ARRAY
56068: PUSH
56069: NOP4
56073: PUSH
56074: NOP4
56078: ARRAY
56079: UNION
56080: PPUSH
56081: LD_INT 2
56083: PUSH
56084: LD_INT 25
56086: PUSH
56087: LD_INT 2
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 25
56096: PUSH
56097: LD_INT 16
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: LIST
56108: PUSH
56109: EMPTY
56110: LIST
56111: PPUSH
56112: NOP4
56116: PUSH
56117: NOP4
56121: PUSH
56122: NOP4
56126: ARRAY
56127: PUSH
56128: LD_INT 1
56130: ARRAY
56131: PUSH
56132: NOP4
56136: PUSH
56137: NOP4
56141: ARRAY
56142: PUSH
56143: LD_INT 2
56145: ARRAY
56146: UNION
56147: DIFF
56148: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ) ;
56149: NOP4
56153: PUSH
56154: NOP4
56158: PUSH
56159: NOP4
56163: ARRAY
56164: PPUSH
56165: LD_INT 2
56167: PUSH
56168: LD_INT 34
56170: PUSH
56171: LD_INT 13
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 34
56180: PUSH
56181: LD_INT 52
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 34
56190: PUSH
56191: NOP4
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: PPUSH
56206: NOP4
56210: ST_TO_ADDR
// if cranes then
56211: NOP4
56215: IFFALSE 56351
// begin for j in cranes do
56217: NOP4
56221: PUSH
56222: NOP4
56226: PUSH
56227: FOR_IN
56228: IFFALSE 56349
// begin if GetLives ( j ) = 1000 and not HasTask ( j ) then
56230: NOP4
56234: PPUSH
56235: NOP4
56239: PUSH
56240: LD_INT 1000
56242: EQUAL
56243: PUSH
56244: NOP4
56248: PPUSH
56249: NOP4
56253: NOT
56254: AND
56255: IFFALSE 56289
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
56257: NOP4
56261: PPUSH
56262: NOP4
56266: PUSH
56267: NOP4
56271: ARRAY
56272: PPUSH
56273: NOP4
56277: PPUSH
56278: NOP4
56282: PPUSH
56283: NOP4
56287: GO 56347
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
56289: NOP4
56293: PPUSH
56294: NOP4
56298: PUSH
56299: LD_INT 500
56301: LESS
56302: PUSH
56303: NOP4
56307: PPUSH
56308: NOP4
56312: PUSH
56313: NOP4
56317: ARRAY
56318: PPUSH
56319: NOP4
56323: NOT
56324: AND
56325: IFFALSE 56347
// ComMoveToArea ( j , mc_parking [ i ] ) ;
56327: NOP4
56331: PPUSH
56332: NOP4
56336: PUSH
56337: NOP4
56341: ARRAY
56342: PPUSH
56343: NOP4
// end ;
56347: GO 56227
56349: POP
56350: POP
// end ; if tmp > 3 then
56351: NOP4
56355: PUSH
56356: LD_INT 3
56358: GREATER
56359: IFFALSE 56379
// tmp := ShrinkArray ( tmp , 4 ) ;
56361: NOP4
56365: PUSH
56366: NOP4
56370: PPUSH
56371: LD_INT 4
56373: PPUSH
56374: NOP4
56378: ST_TO_ADDR
// if not tmp then
56379: NOP4
56383: NOT
56384: IFFALSE 56388
// continue ;
56386: GO 55818
// for j in tmp do
56388: NOP4
56392: PUSH
56393: NOP4
56397: PUSH
56398: FOR_IN
56399: IFFALSE 56658
// begin if IsInUnit ( j ) then
56401: NOP4
56405: PPUSH
56406: NOP4
56410: IFFALSE 56421
// ComExitBuilding ( j ) ;
56412: NOP4
56416: PPUSH
56417: NOP4
// if not j in mc_building_repairs [ i ] then
56421: NOP4
56425: PUSH
56426: NOP4
56430: PUSH
56431: NOP4
56435: ARRAY
56436: IN
56437: NOT
56438: IFFALSE 56496
// begin SetTag ( j , 101 ) ;
56440: NOP4
56444: PPUSH
56445: LD_INT 101
56447: PPUSH
56448: NOP4
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
56452: NOP4
56456: PUSH
56457: NOP4
56461: PPUSH
56462: NOP4
56466: PUSH
56467: NOP4
56471: PUSH
56472: NOP4
56476: ARRAY
56477: PUSH
56478: LD_INT 1
56480: PLUS
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PPUSH
56486: NOP4
56490: PPUSH
56491: NOP4
56495: ST_TO_ADDR
// end ; wait ( 1 ) ;
56496: LD_INT 1
56498: PPUSH
56499: NOP4
// to_repair_tmp := mc_building_need_repair [ i ] ;
56503: NOP4
56507: PUSH
56508: NOP4
56512: PUSH
56513: NOP4
56517: ARRAY
56518: ST_TO_ADDR
// if mc_scan [ i ] then
56519: NOP4
56523: PUSH
56524: NOP4
56528: ARRAY
56529: IFFALSE 56591
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
56531: NOP4
56535: PUSH
56536: NOP4
56540: PUSH
56541: NOP4
56545: ARRAY
56546: PPUSH
56547: LD_INT 3
56549: PUSH
56550: LD_INT 30
56552: PUSH
56553: LD_INT 32
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 30
56562: PUSH
56563: LD_INT 33
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 30
56572: PUSH
56573: LD_INT 31
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: PPUSH
56586: NOP4
56590: ST_TO_ADDR
// if not to_repair_tmp then
56591: NOP4
56595: NOT
56596: IFFALSE 56600
// continue ;
56598: GO 56398
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
56600: NOP4
56604: PUSH
56605: NOP4
56609: PPUSH
56610: NOP4
56614: PPUSH
56615: NOP4
56619: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 10 then
56620: NOP4
56624: PPUSH
56625: LD_INT 16
56627: PPUSH
56628: NOP4
56632: PUSH
56633: LD_INT 4
56635: ARRAY
56636: PUSH
56637: LD_INT 10
56639: LESS
56640: IFFALSE 56656
// ComRepairBuilding ( j , to_repair ) ;
56642: NOP4
56646: PPUSH
56647: NOP4
56651: PPUSH
56652: NOP4
// end ;
56656: GO 56398
56658: POP
56659: POP
// end ;
56660: GO 55818
56662: POP
56663: POP
// end ;
56664: LD_VAR 0 1
56668: RET
// export function MC_Heal ; var i , j , tmp ; begin
56669: LD_INT 0
56671: PPUSH
56672: PPUSH
56673: PPUSH
56674: PPUSH
// if not mc_bases then
56675: NOP4
56679: NOT
56680: IFFALSE 56684
// exit ;
56682: GO 57086
// for i = 1 to mc_bases do
56684: NOP4
56688: PUSH
56689: DOUBLE
56690: LD_INT 1
56692: DEC
56693: ST_TO_ADDR
56694: NOP4
56698: PUSH
56699: FOR_TO
56700: IFFALSE 57084
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
56702: NOP4
56706: PUSH
56707: NOP4
56711: ARRAY
56712: PUSH
56713: LD_INT 1
56715: ARRAY
56716: NOT
56717: PUSH
56718: NOP4
56722: PUSH
56723: NOP4
56727: ARRAY
56728: PUSH
56729: LD_INT 2
56731: ARRAY
56732: NOT
56733: AND
56734: IFFALSE 56772
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
56736: NOP4
56740: PUSH
56741: NOP4
56745: PPUSH
56746: NOP4
56750: PPUSH
56751: EMPTY
56752: PPUSH
56753: NOP4
56757: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
56758: NOP4
56762: PPUSH
56763: LD_INT 102
56765: PPUSH
56766: NOP4
// continue ;
56770: GO 56699
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
56772: NOP4
56776: PUSH
56777: NOP4
56781: PUSH
56782: NOP4
56786: ARRAY
56787: PPUSH
56788: LD_INT 25
56790: PUSH
56791: LD_INT 4
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PPUSH
56798: NOP4
56802: ST_TO_ADDR
// if not tmp then
56803: NOP4
56807: NOT
56808: IFFALSE 56812
// continue ;
56810: GO 56699
// if mc_taming [ i ] then
56812: NOP4
56816: PUSH
56817: NOP4
56821: ARRAY
56822: IFFALSE 56846
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
56824: NOP4
56828: PUSH
56829: NOP4
56833: PPUSH
56834: NOP4
56838: PPUSH
56839: EMPTY
56840: PPUSH
56841: NOP4
56845: ST_TO_ADDR
// for j in tmp do
56846: NOP4
56850: PUSH
56851: NOP4
56855: PUSH
56856: FOR_IN
56857: IFFALSE 57080
// begin if IsInUnit ( j ) then
56859: NOP4
56863: PPUSH
56864: NOP4
56868: IFFALSE 56879
// ComExitBuilding ( j ) ;
56870: NOP4
56874: PPUSH
56875: NOP4
// if not j in mc_healers [ i ] then
56879: NOP4
56883: PUSH
56884: NOP4
56888: PUSH
56889: NOP4
56893: ARRAY
56894: IN
56895: NOT
56896: IFFALSE 56942
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
56898: NOP4
56902: PUSH
56903: NOP4
56907: PPUSH
56908: NOP4
56912: PUSH
56913: NOP4
56917: PUSH
56918: NOP4
56922: ARRAY
56923: PUSH
56924: LD_INT 1
56926: PLUS
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PPUSH
56932: NOP4
56936: PPUSH
56937: NOP4
56941: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
56942: NOP4
56946: PPUSH
56947: NOP4
56951: PUSH
56952: LD_INT 102
56954: NONEQUAL
56955: IFFALSE 56969
// SetTag ( j , 102 ) ;
56957: NOP4
56961: PPUSH
56962: LD_INT 102
56964: PPUSH
56965: NOP4
// Wait ( 3 ) ;
56969: LD_INT 3
56971: PPUSH
56972: NOP4
// if mc_need_heal [ i ] [ 1 ] then
56976: NOP4
56980: PUSH
56981: NOP4
56985: ARRAY
56986: PUSH
56987: LD_INT 1
56989: ARRAY
56990: IFFALSE 57022
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
56992: NOP4
56996: PPUSH
56997: NOP4
57001: PUSH
57002: NOP4
57006: ARRAY
57007: PUSH
57008: LD_INT 1
57010: ARRAY
57011: PUSH
57012: LD_INT 1
57014: ARRAY
57015: PPUSH
57016: NOP4
57020: GO 57078
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
57022: NOP4
57026: PPUSH
57027: NOP4
57031: NOT
57032: PUSH
57033: NOP4
57037: PUSH
57038: NOP4
57042: ARRAY
57043: PUSH
57044: LD_INT 2
57046: ARRAY
57047: AND
57048: IFFALSE 57078
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
57050: NOP4
57054: PPUSH
57055: NOP4
57059: PUSH
57060: NOP4
57064: ARRAY
57065: PUSH
57066: LD_INT 2
57068: ARRAY
57069: PUSH
57070: LD_INT 1
57072: ARRAY
57073: PPUSH
57074: NOP4
// end ;
57078: GO 56856
57080: POP
57081: POP
// end ;
57082: GO 56699
57084: POP
57085: POP
// end ;
57086: LD_VAR 0 1
57090: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
57091: LD_INT 0
57093: PPUSH
57094: PPUSH
57095: PPUSH
57096: PPUSH
57097: PPUSH
// if not mc_bases then
57098: NOP4
57102: NOT
57103: IFFALSE 57107
// exit ;
57105: GO 58250
// for i = 1 to mc_bases do
57107: NOP4
57111: PUSH
57112: DOUBLE
57113: LD_INT 1
57115: DEC
57116: ST_TO_ADDR
57117: NOP4
57121: PUSH
57122: FOR_TO
57123: IFFALSE 58248
// begin if mc_scan [ i ] then
57125: NOP4
57129: PUSH
57130: NOP4
57134: ARRAY
57135: IFFALSE 57139
// continue ;
57137: GO 57122
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
57139: NOP4
57143: PUSH
57144: NOP4
57148: ARRAY
57149: NOT
57150: PUSH
57151: NOP4
57155: PUSH
57156: NOP4
57160: ARRAY
57161: NOT
57162: AND
57163: PUSH
57164: NOP4
57168: PUSH
57169: NOP4
57173: ARRAY
57174: AND
57175: IFFALSE 57213
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
57177: NOP4
57181: PUSH
57182: NOP4
57186: PPUSH
57187: NOP4
57191: PPUSH
57192: EMPTY
57193: PPUSH
57194: NOP4
57198: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
57199: NOP4
57203: PPUSH
57204: LD_INT 103
57206: PPUSH
57207: NOP4
// continue ;
57211: GO 57122
// end ; if mc_construct_list [ i ] then
57213: NOP4
57217: PUSH
57218: NOP4
57222: ARRAY
57223: IFFALSE 57443
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
57225: NOP4
57229: PUSH
57230: NOP4
57234: PUSH
57235: NOP4
57239: ARRAY
57240: PPUSH
57241: LD_INT 25
57243: PUSH
57244: LD_INT 2
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PPUSH
57251: NOP4
57255: PUSH
57256: NOP4
57260: PUSH
57261: NOP4
57265: ARRAY
57266: DIFF
57267: ST_TO_ADDR
// if not tmp then
57268: NOP4
57272: NOT
57273: IFFALSE 57277
// continue ;
57275: GO 57122
// for j in tmp do
57277: NOP4
57281: PUSH
57282: NOP4
57286: PUSH
57287: FOR_IN
57288: IFFALSE 57439
// begin if not mc_builders [ i ] then
57290: NOP4
57294: PUSH
57295: NOP4
57299: ARRAY
57300: NOT
57301: IFFALSE 57359
// begin SetTag ( j , 103 ) ;
57303: NOP4
57307: PPUSH
57308: LD_INT 103
57310: PPUSH
57311: NOP4
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
57315: NOP4
57319: PUSH
57320: NOP4
57324: PPUSH
57325: NOP4
57329: PUSH
57330: NOP4
57334: PUSH
57335: NOP4
57339: ARRAY
57340: PUSH
57341: LD_INT 1
57343: PLUS
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PPUSH
57349: NOP4
57353: PPUSH
57354: NOP4
57358: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
57359: NOP4
57363: PPUSH
57364: NOP4
57368: IFFALSE 57379
// ComExitBuilding ( j ) ;
57370: NOP4
57374: PPUSH
57375: NOP4
// wait ( 3 ) ;
57379: LD_INT 3
57381: PPUSH
57382: NOP4
// if not mc_construct_list [ i ] then
57386: NOP4
57390: PUSH
57391: NOP4
57395: ARRAY
57396: NOT
57397: IFFALSE 57401
// break ;
57399: GO 57439
// if not HasTask ( j ) then
57401: NOP4
57405: PPUSH
57406: NOP4
57410: NOT
57411: IFFALSE 57437
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
57413: NOP4
57417: PPUSH
57418: NOP4
57422: PUSH
57423: NOP4
57427: ARRAY
57428: PUSH
57429: LD_INT 1
57431: ARRAY
57432: PPUSH
57433: NOP4
// end ;
57437: GO 57287
57439: POP
57440: POP
// end else
57441: GO 58246
// if mc_build_list [ i ] then
57443: NOP4
57447: PUSH
57448: NOP4
57452: ARRAY
57453: IFFALSE 58246
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
57455: NOP4
57459: PUSH
57460: NOP4
57464: PUSH
57465: NOP4
57469: ARRAY
57470: PPUSH
57471: LD_INT 2
57473: PUSH
57474: LD_INT 30
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 30
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: LIST
57498: PPUSH
57499: NOP4
57503: ST_TO_ADDR
// if depot then
57504: NOP4
57508: IFFALSE 57526
// depot := depot [ 1 ] else
57510: NOP4
57514: PUSH
57515: NOP4
57519: PUSH
57520: LD_INT 1
57522: ARRAY
57523: ST_TO_ADDR
57524: GO 57534
// depot := 0 ;
57526: NOP4
57530: PUSH
57531: LD_INT 0
57533: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
57534: NOP4
57538: PUSH
57539: NOP4
57543: ARRAY
57544: PUSH
57545: LD_INT 1
57547: ARRAY
57548: PUSH
57549: LD_INT 1
57551: ARRAY
57552: PPUSH
57553: NOP4
57557: PUSH
57558: NOP4
57562: PUSH
57563: NOP4
57567: ARRAY
57568: PPUSH
57569: LD_INT 2
57571: PUSH
57572: LD_INT 30
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 30
57584: PUSH
57585: LD_INT 3
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: LIST
57596: PPUSH
57597: NOP4
57601: NOT
57602: AND
57603: IFFALSE 57708
// begin for j = 1 to mc_build_list [ i ] do
57605: NOP4
57609: PUSH
57610: DOUBLE
57611: LD_INT 1
57613: DEC
57614: ST_TO_ADDR
57615: NOP4
57619: PUSH
57620: NOP4
57624: ARRAY
57625: PUSH
57626: FOR_TO
57627: IFFALSE 57706
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
57629: NOP4
57633: PUSH
57634: NOP4
57638: ARRAY
57639: PUSH
57640: NOP4
57644: ARRAY
57645: PUSH
57646: LD_INT 1
57648: ARRAY
57649: PUSH
57650: LD_INT 2
57652: EQUAL
57653: IFFALSE 57704
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
57655: NOP4
57659: PUSH
57660: NOP4
57664: PPUSH
57665: NOP4
57669: PPUSH
57670: NOP4
57674: PUSH
57675: NOP4
57679: ARRAY
57680: PPUSH
57681: NOP4
57685: PPUSH
57686: LD_INT 1
57688: PPUSH
57689: LD_INT 0
57691: PPUSH
57692: NOP4
57696: PPUSH
57697: NOP4
57701: ST_TO_ADDR
// break ;
57702: GO 57706
// end ;
57704: GO 57626
57706: POP
57707: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
57708: NOP4
57712: PUSH
57713: NOP4
57717: ARRAY
57718: PUSH
57719: LD_INT 1
57721: ARRAY
57722: PUSH
57723: LD_INT 1
57725: ARRAY
57726: PUSH
57727: LD_INT 0
57729: EQUAL
57730: PUSH
57731: NOP4
57735: PUSH
57736: NOP4
57740: PPUSH
57741: NOP4
57745: PUSH
57746: NOP4
57750: ARRAY
57751: PUSH
57752: LD_INT 1
57754: ARRAY
57755: PUSH
57756: LD_INT 1
57758: ARRAY
57759: PPUSH
57760: NOP4
57764: PUSH
57765: NOP4
57769: ARRAY
57770: PUSH
57771: LD_INT 1
57773: ARRAY
57774: PUSH
57775: LD_INT 2
57777: ARRAY
57778: PPUSH
57779: NOP4
57783: PUSH
57784: NOP4
57788: ARRAY
57789: PUSH
57790: LD_INT 1
57792: ARRAY
57793: PUSH
57794: LD_INT 3
57796: ARRAY
57797: PPUSH
57798: NOP4
57802: PUSH
57803: NOP4
57807: ARRAY
57808: PUSH
57809: LD_INT 1
57811: ARRAY
57812: PUSH
57813: LD_INT 4
57815: ARRAY
57816: PPUSH
57817: NOP4
57821: AND
57822: OR
57823: IFFALSE 58104
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
57825: NOP4
57829: PUSH
57830: NOP4
57834: PUSH
57835: NOP4
57839: ARRAY
57840: PPUSH
57841: LD_INT 25
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PPUSH
57851: NOP4
57855: PUSH
57856: NOP4
57860: PUSH
57861: NOP4
57865: ARRAY
57866: DIFF
57867: ST_TO_ADDR
// if not tmp then
57868: NOP4
57872: NOT
57873: IFFALSE 57877
// continue ;
57875: GO 57122
// for j in tmp do
57877: NOP4
57881: PUSH
57882: NOP4
57886: PUSH
57887: FOR_IN
57888: IFFALSE 58100
// begin if not mc_builders [ i ] then
57890: NOP4
57894: PUSH
57895: NOP4
57899: ARRAY
57900: NOT
57901: IFFALSE 57959
// begin SetTag ( j , 103 ) ;
57903: NOP4
57907: PPUSH
57908: LD_INT 103
57910: PPUSH
57911: NOP4
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
57915: NOP4
57919: PUSH
57920: NOP4
57924: PPUSH
57925: NOP4
57929: PUSH
57930: NOP4
57934: PUSH
57935: NOP4
57939: ARRAY
57940: PUSH
57941: LD_INT 1
57943: PLUS
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PPUSH
57949: NOP4
57953: PPUSH
57954: NOP4
57958: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
57959: NOP4
57963: PPUSH
57964: NOP4
57968: IFFALSE 57979
// ComExitBuilding ( j ) ;
57970: NOP4
57974: PPUSH
57975: NOP4
// wait ( 3 ) ;
57979: LD_INT 3
57981: PPUSH
57982: NOP4
// if not mc_build_list [ i ] then
57986: NOP4
57990: PUSH
57991: NOP4
57995: ARRAY
57996: NOT
57997: IFFALSE 58001
// break ;
57999: GO 58100
// if not HasTask ( j ) then
58001: NOP4
58005: PPUSH
58006: NOP4
58010: NOT
58011: IFFALSE 58098
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
58013: NOP4
58017: PPUSH
58018: NOP4
58022: PUSH
58023: NOP4
58027: ARRAY
58028: PUSH
58029: LD_INT 1
58031: ARRAY
58032: PUSH
58033: LD_INT 1
58035: ARRAY
58036: PPUSH
58037: NOP4
58041: PUSH
58042: NOP4
58046: ARRAY
58047: PUSH
58048: LD_INT 1
58050: ARRAY
58051: PUSH
58052: LD_INT 2
58054: ARRAY
58055: PPUSH
58056: NOP4
58060: PUSH
58061: NOP4
58065: ARRAY
58066: PUSH
58067: LD_INT 1
58069: ARRAY
58070: PUSH
58071: LD_INT 3
58073: ARRAY
58074: PPUSH
58075: NOP4
58079: PUSH
58080: NOP4
58084: ARRAY
58085: PUSH
58086: LD_INT 1
58088: ARRAY
58089: PUSH
58090: LD_INT 4
58092: ARRAY
58093: PPUSH
58094: NOP4
// end ;
58098: GO 57887
58100: POP
58101: POP
// end else
58102: GO 58246
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
58104: NOP4
58108: PUSH
58109: NOP4
58113: ARRAY
58114: PPUSH
58115: NOP4
58119: PUSH
58120: NOP4
58124: ARRAY
58125: PUSH
58126: LD_INT 1
58128: ARRAY
58129: PUSH
58130: LD_INT 1
58132: ARRAY
58133: PPUSH
58134: NOP4
58138: PUSH
58139: NOP4
58143: ARRAY
58144: PUSH
58145: LD_INT 1
58147: ARRAY
58148: PUSH
58149: LD_INT 2
58151: ARRAY
58152: PPUSH
58153: NOP4
58157: PUSH
58158: NOP4
58162: ARRAY
58163: PUSH
58164: LD_INT 1
58166: ARRAY
58167: PUSH
58168: LD_INT 3
58170: ARRAY
58171: PPUSH
58172: NOP4
58176: PUSH
58177: NOP4
58181: ARRAY
58182: PUSH
58183: LD_INT 1
58185: ARRAY
58186: PUSH
58187: LD_INT 4
58189: ARRAY
58190: PPUSH
58191: NOP4
58195: NOT
58196: IFFALSE 58246
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
58198: NOP4
58202: PUSH
58203: NOP4
58207: PPUSH
58208: NOP4
58212: PPUSH
58213: NOP4
58217: PUSH
58218: NOP4
58222: ARRAY
58223: PPUSH
58224: LD_INT 1
58226: PPUSH
58227: LD_INT 1
58229: NEG
58230: PPUSH
58231: LD_INT 0
58233: PPUSH
58234: NOP4
58238: PPUSH
58239: NOP4
58243: ST_TO_ADDR
// continue ;
58244: GO 57122
// end ; end ; end ;
58246: GO 57122
58248: POP
58249: POP
// end ;
58250: LD_VAR 0 1
58254: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
58255: LD_INT 0
58257: PPUSH
58258: PPUSH
58259: PPUSH
58260: PPUSH
58261: PPUSH
58262: PPUSH
// if not mc_bases then
58263: NOP4
58267: NOT
58268: IFFALSE 58272
// exit ;
58270: GO 58699
// for i = 1 to mc_bases do
58272: NOP4
58276: PUSH
58277: DOUBLE
58278: LD_INT 1
58280: DEC
58281: ST_TO_ADDR
58282: NOP4
58286: PUSH
58287: FOR_TO
58288: IFFALSE 58697
// begin tmp := mc_build_upgrade [ i ] ;
58290: NOP4
58294: PUSH
58295: NOP4
58299: PUSH
58300: NOP4
58304: ARRAY
58305: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
58306: NOP4
58310: PUSH
58311: NOP4
58315: PUSH
58316: NOP4
58320: ARRAY
58321: PPUSH
58322: LD_INT 2
58324: PUSH
58325: LD_INT 30
58327: PUSH
58328: LD_INT 6
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 30
58337: PUSH
58338: LD_INT 7
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: LIST
58349: PPUSH
58350: NOP4
58354: ST_TO_ADDR
// if not tmp and not lab then
58355: NOP4
58359: NOT
58360: PUSH
58361: NOP4
58365: NOT
58366: AND
58367: IFFALSE 58371
// continue ;
58369: GO 58287
// if tmp then
58371: NOP4
58375: IFFALSE 58495
// for j in tmp do
58377: NOP4
58381: PUSH
58382: NOP4
58386: PUSH
58387: FOR_IN
58388: IFFALSE 58493
// begin if UpgradeCost ( j ) then
58390: NOP4
58394: PPUSH
58395: NOP4
58399: IFFALSE 58491
// begin ComUpgrade ( j ) ;
58401: NOP4
58405: PPUSH
58406: NOP4
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
58410: NOP4
58414: PUSH
58415: NOP4
58419: PPUSH
58420: NOP4
58424: PPUSH
58425: NOP4
58429: PUSH
58430: NOP4
58434: ARRAY
58435: PUSH
58436: NOP4
58440: DIFF
58441: PPUSH
58442: NOP4
58446: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
58447: NOP4
58451: PUSH
58452: NOP4
58456: PPUSH
58457: NOP4
58461: PUSH
58462: NOP4
58466: PUSH
58467: NOP4
58471: ARRAY
58472: PUSH
58473: LD_INT 1
58475: PLUS
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PPUSH
58481: NOP4
58485: PPUSH
58486: NOP4
58490: ST_TO_ADDR
// end ; end ;
58491: GO 58387
58493: POP
58494: POP
// if not lab or not mc_lab_upgrade [ i ] then
58495: NOP4
58499: NOT
58500: PUSH
58501: NOP4
58505: PUSH
58506: NOP4
58510: ARRAY
58511: NOT
58512: OR
58513: IFFALSE 58517
// continue ;
58515: GO 58287
// for j in lab do
58517: NOP4
58521: PUSH
58522: NOP4
58526: PUSH
58527: FOR_IN
58528: IFFALSE 58693
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
58530: NOP4
58534: PPUSH
58535: NOP4
58539: PUSH
58540: LD_INT 6
58542: PUSH
58543: LD_INT 7
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: IN
58550: PUSH
58551: NOP4
58555: PPUSH
58556: NOP4
58560: PUSH
58561: LD_INT 1
58563: NONEQUAL
58564: AND
58565: IFFALSE 58691
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
58567: NOP4
58571: PPUSH
58572: NOP4
58576: PUSH
58577: NOP4
58581: ARRAY
58582: PUSH
58583: LD_INT 1
58585: ARRAY
58586: PPUSH
58587: NOP4
58591: IFFALSE 58691
// begin ComCancel ( j ) ;
58593: NOP4
58597: PPUSH
58598: NOP4
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
58602: NOP4
58606: PPUSH
58607: NOP4
58611: PUSH
58612: NOP4
58616: ARRAY
58617: PUSH
58618: LD_INT 1
58620: ARRAY
58621: PPUSH
58622: NOP4
// if not j in mc_construct_list [ i ] then
58626: NOP4
58630: PUSH
58631: NOP4
58635: PUSH
58636: NOP4
58640: ARRAY
58641: IN
58642: NOT
58643: IFFALSE 58689
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
58645: NOP4
58649: PUSH
58650: NOP4
58654: PPUSH
58655: NOP4
58659: PUSH
58660: NOP4
58664: PUSH
58665: NOP4
58669: ARRAY
58670: PUSH
58671: LD_INT 1
58673: PLUS
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PPUSH
58679: NOP4
58683: PPUSH
58684: NOP4
58688: ST_TO_ADDR
// break ;
58689: GO 58693
// end ; end ; end ;
58691: GO 58527
58693: POP
58694: POP
// end ;
58695: GO 58287
58697: POP
58698: POP
// end ;
58699: LD_VAR 0 1
58703: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
58704: LD_INT 0
58706: PPUSH
58707: PPUSH
58708: PPUSH
58709: PPUSH
58710: PPUSH
58711: PPUSH
58712: PPUSH
58713: PPUSH
58714: PPUSH
// if not mc_bases then
58715: NOP4
58719: NOT
58720: IFFALSE 58724
// exit ;
58722: GO 59129
// for i = 1 to mc_bases do
58724: NOP4
58728: PUSH
58729: DOUBLE
58730: LD_INT 1
58732: DEC
58733: ST_TO_ADDR
58734: NOP4
58738: PUSH
58739: FOR_TO
58740: IFFALSE 59127
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
58742: NOP4
58746: PUSH
58747: NOP4
58751: ARRAY
58752: NOT
58753: PUSH
58754: NOP4
58758: PUSH
58759: NOP4
58763: ARRAY
58764: PPUSH
58765: LD_INT 30
58767: PUSH
58768: LD_INT 3
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PPUSH
58775: NOP4
58779: NOT
58780: OR
58781: IFFALSE 58785
// continue ;
58783: GO 58739
// busy := false ;
58785: NOP4
58789: PUSH
58790: LD_INT 0
58792: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
58793: NOP4
58797: PUSH
58798: NOP4
58802: PUSH
58803: NOP4
58807: ARRAY
58808: PPUSH
58809: LD_INT 30
58811: PUSH
58812: LD_INT 3
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PPUSH
58819: NOP4
58823: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
58824: NOP4
58828: PUSH
58829: NOP4
58833: PUSH
58834: NOP4
58838: ARRAY
58839: PPUSH
58840: LD_INT 2
58842: PUSH
58843: LD_INT 30
58845: PUSH
58846: LD_INT 32
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 30
58855: PUSH
58856: LD_INT 33
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: LIST
58867: PPUSH
58868: NOP4
58872: ST_TO_ADDR
// if not t then
58873: NOP4
58877: NOT
58878: IFFALSE 58882
// continue ;
58880: GO 58739
// for j in tmp do
58882: NOP4
58886: PUSH
58887: NOP4
58891: PUSH
58892: FOR_IN
58893: IFFALSE 58923
// if not BuildingStatus ( j ) = bs_idle then
58895: NOP4
58899: PPUSH
58900: NOP4
58904: PUSH
58905: LD_INT 2
58907: EQUAL
58908: NOT
58909: IFFALSE 58921
// begin busy := true ;
58911: NOP4
58915: PUSH
58916: LD_INT 1
58918: ST_TO_ADDR
// break ;
58919: GO 58923
// end ;
58921: GO 58892
58923: POP
58924: POP
// if busy then
58925: NOP4
58929: IFFALSE 58933
// continue ;
58931: GO 58739
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
58933: NOP4
58937: PUSH
58938: NOP4
58942: PPUSH
58943: LD_INT 35
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PPUSH
58953: NOP4
58957: ST_TO_ADDR
// if tw then
58958: NOP4
58962: IFFALSE 59039
// begin tw := tw [ 1 ] ;
58964: NOP4
58968: PUSH
58969: NOP4
58973: PUSH
58974: LD_INT 1
58976: ARRAY
58977: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
58978: NOP4
58982: PUSH
58983: NOP4
58987: PPUSH
58988: NOP4
58992: PUSH
58993: NOP4
58997: ARRAY
58998: PPUSH
58999: NOP4
59003: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
59004: NOP4
59008: PUSH
59009: NOP4
59013: ARRAY
59014: IFFALSE 59037
// if not weapon in mc_allowed_tower_weapons [ i ] then
59016: NOP4
59020: PUSH
59021: NOP4
59025: PUSH
59026: NOP4
59030: ARRAY
59031: IN
59032: NOT
59033: IFFALSE 59037
// continue ;
59035: GO 58739
// end else
59037: GO 59102
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
59039: NOP4
59043: PUSH
59044: NOP4
59048: PUSH
59049: NOP4
59053: ARRAY
59054: PPUSH
59055: NOP4
59059: PPUSH
59060: NOP4
59064: ST_TO_ADDR
// if not tmp2 then
59065: NOP4
59069: NOT
59070: IFFALSE 59074
// continue ;
59072: GO 58739
// tw := tmp2 [ 1 ] ;
59074: NOP4
59078: PUSH
59079: NOP4
59083: PUSH
59084: LD_INT 1
59086: ARRAY
59087: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
59088: NOP4
59092: PUSH
59093: NOP4
59097: PUSH
59098: LD_INT 2
59100: ARRAY
59101: ST_TO_ADDR
// end ; if not weapon then
59102: NOP4
59106: NOT
59107: IFFALSE 59111
// continue ;
59109: GO 58739
// ComPlaceWeapon ( tw , weapon ) ;
59111: NOP4
59115: PPUSH
59116: NOP4
59120: PPUSH
59121: NOP4
// end ;
59125: GO 58739
59127: POP
59128: POP
// end ;
59129: LD_VAR 0 1
59133: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
59134: LD_INT 0
59136: PPUSH
59137: PPUSH
59138: PPUSH
59139: PPUSH
59140: PPUSH
59141: PPUSH
// if not mc_bases then
59142: NOP4
59146: NOT
59147: IFFALSE 59151
// exit ;
59149: GO 59927
// for i = 1 to mc_bases do
59151: NOP4
59155: PUSH
59156: DOUBLE
59157: LD_INT 1
59159: DEC
59160: ST_TO_ADDR
59161: NOP4
59165: PUSH
59166: FOR_TO
59167: IFFALSE 59925
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
59169: NOP4
59173: PUSH
59174: NOP4
59178: ARRAY
59179: NOT
59180: PUSH
59181: NOP4
59185: PUSH
59186: NOP4
59190: ARRAY
59191: PUSH
59192: NOP4
59196: PUSH
59197: NOP4
59201: ARRAY
59202: EQUAL
59203: OR
59204: PUSH
59205: NOP4
59209: PUSH
59210: NOP4
59214: ARRAY
59215: OR
59216: IFFALSE 59220
// continue ;
59218: GO 59166
// if mc_miners [ i ] then
59220: NOP4
59224: PUSH
59225: NOP4
59229: ARRAY
59230: IFFALSE 59612
// begin for j = mc_miners [ i ] downto 1 do
59232: NOP4
59236: PUSH
59237: DOUBLE
59238: NOP4
59242: PUSH
59243: NOP4
59247: ARRAY
59248: INC
59249: ST_TO_ADDR
59250: LD_INT 1
59252: PUSH
59253: FOR_DOWNTO
59254: IFFALSE 59610
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
59256: NOP4
59260: PUSH
59261: NOP4
59265: ARRAY
59266: PUSH
59267: NOP4
59271: ARRAY
59272: PPUSH
59273: NOP4
59277: PUSH
59278: NOP4
59282: PUSH
59283: NOP4
59287: ARRAY
59288: PUSH
59289: NOP4
59293: ARRAY
59294: PPUSH
59295: NOP4
59299: PUSH
59300: LD_INT 1
59302: NONEQUAL
59303: OR
59304: IFFALSE 59367
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
59306: NOP4
59310: PUSH
59311: NOP4
59315: PUSH
59316: NOP4
59320: ARRAY
59321: PUSH
59322: NOP4
59326: PUSH
59327: NOP4
59331: ARRAY
59332: PUSH
59333: NOP4
59337: ARRAY
59338: DIFF
59339: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
59340: NOP4
59344: PUSH
59345: NOP4
59349: PPUSH
59350: NOP4
59354: PPUSH
59355: NOP4
59359: PPUSH
59360: NOP4
59364: ST_TO_ADDR
// continue ;
59365: GO 59253
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
59367: NOP4
59371: PUSH
59372: NOP4
59376: ARRAY
59377: PUSH
59378: NOP4
59382: ARRAY
59383: PPUSH
59384: NOP4
59388: PUSH
59389: LD_INT 1
59391: EQUAL
59392: PUSH
59393: NOP4
59397: PUSH
59398: NOP4
59402: ARRAY
59403: PUSH
59404: NOP4
59408: ARRAY
59409: PPUSH
59410: NOP4
59414: NOT
59415: AND
59416: PUSH
59417: NOP4
59421: PUSH
59422: NOP4
59426: ARRAY
59427: PUSH
59428: NOP4
59432: ARRAY
59433: PPUSH
59434: NOP4
59438: NOT
59439: AND
59440: IFFALSE 59608
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
59442: NOP4
59446: PUSH
59447: NOP4
59451: ARRAY
59452: PUSH
59453: NOP4
59457: ARRAY
59458: PPUSH
59459: NOP4
59463: IFFALSE 59486
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
59465: NOP4
59469: PUSH
59470: NOP4
59474: ARRAY
59475: PUSH
59476: NOP4
59480: ARRAY
59481: PPUSH
59482: NOP4
// if not HasTask ( mc_miners [ i ] [ j ] ) then
59486: NOP4
59490: PUSH
59491: NOP4
59495: ARRAY
59496: PUSH
59497: NOP4
59501: ARRAY
59502: PPUSH
59503: NOP4
59507: NOT
59508: IFFALSE 59608
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
59510: NOP4
59514: PUSH
59515: NOP4
59519: ARRAY
59520: PUSH
59521: NOP4
59525: ARRAY
59526: PPUSH
59527: NOP4
59531: PUSH
59532: NOP4
59536: ARRAY
59537: PUSH
59538: NOP4
59542: PUSH
59543: NOP4
59547: PUSH
59548: NOP4
59552: ARRAY
59553: MOD
59554: PUSH
59555: LD_INT 1
59557: PLUS
59558: ARRAY
59559: PUSH
59560: LD_INT 1
59562: ARRAY
59563: PPUSH
59564: NOP4
59568: PUSH
59569: NOP4
59573: ARRAY
59574: PUSH
59575: NOP4
59579: PUSH
59580: NOP4
59584: PUSH
59585: NOP4
59589: ARRAY
59590: MOD
59591: PUSH
59592: LD_INT 1
59594: PLUS
59595: ARRAY
59596: PUSH
59597: LD_INT 2
59599: ARRAY
59600: PPUSH
59601: LD_INT 0
59603: PPUSH
59604: NOP4
// end ; end ;
59608: GO 59253
59610: POP
59611: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
59612: NOP4
59616: PUSH
59617: NOP4
59621: PUSH
59622: NOP4
59626: ARRAY
59627: PPUSH
59628: LD_INT 2
59630: PUSH
59631: LD_INT 30
59633: PUSH
59634: LD_INT 4
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 30
59643: PUSH
59644: LD_INT 5
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 30
59653: PUSH
59654: LD_INT 32
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: PPUSH
59667: NOP4
59671: ST_TO_ADDR
// if not tmp then
59672: NOP4
59676: NOT
59677: IFFALSE 59681
// continue ;
59679: GO 59166
// list := [ ] ;
59681: NOP4
59685: PUSH
59686: EMPTY
59687: ST_TO_ADDR
// for j in tmp do
59688: NOP4
59692: PUSH
59693: NOP4
59697: PUSH
59698: FOR_IN
59699: IFFALSE 59768
// begin for k in UnitsInside ( j ) do
59701: NOP4
59705: PUSH
59706: NOP4
59710: PPUSH
59711: NOP4
59715: PUSH
59716: FOR_IN
59717: IFFALSE 59764
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
59719: NOP4
59723: PPUSH
59724: NOP4
59728: PUSH
59729: LD_INT 1
59731: EQUAL
59732: PUSH
59733: NOP4
59737: PPUSH
59738: NOP4
59742: NOT
59743: AND
59744: IFFALSE 59762
// list := list ^ k ;
59746: NOP4
59750: PUSH
59751: NOP4
59755: PUSH
59756: NOP4
59760: ADD
59761: ST_TO_ADDR
59762: GO 59716
59764: POP
59765: POP
// end ;
59766: GO 59698
59768: POP
59769: POP
// list := list diff mc_miners [ i ] ;
59770: NOP4
59774: PUSH
59775: NOP4
59779: PUSH
59780: NOP4
59784: PUSH
59785: NOP4
59789: ARRAY
59790: DIFF
59791: ST_TO_ADDR
// if not list then
59792: NOP4
59796: NOT
59797: IFFALSE 59801
// continue ;
59799: GO 59166
// k := mc_mines [ i ] - mc_miners [ i ] ;
59801: NOP4
59805: PUSH
59806: NOP4
59810: PUSH
59811: NOP4
59815: ARRAY
59816: PUSH
59817: NOP4
59821: PUSH
59822: NOP4
59826: ARRAY
59827: MINUS
59828: ST_TO_ADDR
// if k > list then
59829: NOP4
59833: PUSH
59834: NOP4
59838: GREATER
59839: IFFALSE 59851
// k := list ;
59841: NOP4
59845: PUSH
59846: NOP4
59850: ST_TO_ADDR
// for j = 1 to k do
59851: NOP4
59855: PUSH
59856: DOUBLE
59857: LD_INT 1
59859: DEC
59860: ST_TO_ADDR
59861: NOP4
59865: PUSH
59866: FOR_TO
59867: IFFALSE 59921
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
59869: NOP4
59873: PUSH
59874: NOP4
59878: PPUSH
59879: NOP4
59883: PUSH
59884: NOP4
59888: PUSH
59889: NOP4
59893: ARRAY
59894: PUSH
59895: LD_INT 1
59897: PLUS
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PPUSH
59903: NOP4
59907: PUSH
59908: NOP4
59912: ARRAY
59913: PPUSH
59914: NOP4
59918: ST_TO_ADDR
59919: GO 59866
59921: POP
59922: POP
// end ;
59923: GO 59166
59925: POP
59926: POP
// end ;
59927: LD_VAR 0 1
59931: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
59932: LD_INT 0
59934: PPUSH
59935: PPUSH
59936: PPUSH
59937: PPUSH
59938: PPUSH
59939: PPUSH
59940: PPUSH
59941: PPUSH
59942: PPUSH
59943: PPUSH
// if not mc_bases then
59944: NOP4
59948: NOT
59949: IFFALSE 59953
// exit ;
59951: GO 61703
// for i = 1 to mc_bases do
59953: NOP4
59957: PUSH
59958: DOUBLE
59959: LD_INT 1
59961: DEC
59962: ST_TO_ADDR
59963: NOP4
59967: PUSH
59968: FOR_TO
59969: IFFALSE 61701
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
59971: NOP4
59975: PUSH
59976: NOP4
59980: ARRAY
59981: NOT
59982: PUSH
59983: NOP4
59987: PUSH
59988: NOP4
59992: ARRAY
59993: OR
59994: IFFALSE 59998
// continue ;
59996: GO 59968
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
59998: NOP4
60002: PUSH
60003: NOP4
60007: ARRAY
60008: NOT
60009: PUSH
60010: NOP4
60014: PUSH
60015: NOP4
60019: ARRAY
60020: AND
60021: IFFALSE 60059
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
60023: NOP4
60027: PUSH
60028: NOP4
60032: PPUSH
60033: NOP4
60037: PPUSH
60038: EMPTY
60039: PPUSH
60040: NOP4
60044: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
60045: NOP4
60049: PPUSH
60050: LD_INT 107
60052: PPUSH
60053: NOP4
// continue ;
60057: GO 59968
// end ; target := [ ] ;
60059: NOP4
60063: PUSH
60064: EMPTY
60065: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
60066: NOP4
60070: PUSH
60071: DOUBLE
60072: NOP4
60076: PUSH
60077: NOP4
60081: ARRAY
60082: INC
60083: ST_TO_ADDR
60084: LD_INT 1
60086: PUSH
60087: FOR_DOWNTO
60088: IFFALSE 60348
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
60090: NOP4
60094: PUSH
60095: NOP4
60099: ARRAY
60100: PUSH
60101: NOP4
60105: ARRAY
60106: PUSH
60107: LD_INT 2
60109: ARRAY
60110: PPUSH
60111: NOP4
60115: PUSH
60116: NOP4
60120: ARRAY
60121: PUSH
60122: NOP4
60126: ARRAY
60127: PUSH
60128: LD_INT 3
60130: ARRAY
60131: PPUSH
60132: NOP4
60136: PUSH
60137: NOP4
60141: PUSH
60142: NOP4
60146: ARRAY
60147: PUSH
60148: NOP4
60152: ARRAY
60153: PUSH
60154: LD_INT 2
60156: ARRAY
60157: PPUSH
60158: NOP4
60162: PUSH
60163: NOP4
60167: ARRAY
60168: PUSH
60169: NOP4
60173: ARRAY
60174: PUSH
60175: LD_INT 3
60177: ARRAY
60178: PPUSH
60179: NOP4
60183: PUSH
60184: LD_INT 0
60186: EQUAL
60187: AND
60188: IFFALSE 60243
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
60190: NOP4
60194: PUSH
60195: NOP4
60199: PUSH
60200: NOP4
60204: ARRAY
60205: PPUSH
60206: NOP4
60210: PPUSH
60211: NOP4
60215: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
60216: NOP4
60220: PUSH
60221: NOP4
60225: PPUSH
60226: NOP4
60230: PPUSH
60231: NOP4
60235: PPUSH
60236: NOP4
60240: ST_TO_ADDR
// continue ;
60241: GO 60087
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
60243: NOP4
60247: PUSH
60248: NOP4
60252: ARRAY
60253: PUSH
60254: LD_INT 1
60256: ARRAY
60257: PPUSH
60258: NOP4
60262: PPUSH
60263: NOP4
60267: PUSH
60268: NOP4
60272: ARRAY
60273: PUSH
60274: NOP4
60278: ARRAY
60279: PUSH
60280: LD_INT 2
60282: ARRAY
60283: PPUSH
60284: NOP4
60288: PUSH
60289: NOP4
60293: ARRAY
60294: PUSH
60295: NOP4
60299: ARRAY
60300: PUSH
60301: LD_INT 3
60303: ARRAY
60304: PPUSH
60305: LD_INT 30
60307: PPUSH
60308: NOP4
60312: PUSH
60313: LD_INT 4
60315: ARRAY
60316: PUSH
60317: LD_INT 0
60319: EQUAL
60320: IFFALSE 60346
// begin target := mc_crates [ i ] [ j ] ;
60322: NOP4
60326: PUSH
60327: NOP4
60331: PUSH
60332: NOP4
60336: ARRAY
60337: PUSH
60338: NOP4
60342: ARRAY
60343: ST_TO_ADDR
// break ;
60344: GO 60348
// end ; end ;
60346: GO 60087
60348: POP
60349: POP
// if not target then
60350: NOP4
60354: NOT
60355: IFFALSE 60359
// continue ;
60357: GO 59968
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
60359: NOP4
60363: PUSH
60364: NOP4
60368: PUSH
60369: NOP4
60373: ARRAY
60374: PPUSH
60375: LD_INT 2
60377: PUSH
60378: LD_INT 3
60380: PUSH
60381: LD_INT 58
60383: PUSH
60384: EMPTY
60385: LIST
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 61
60393: PUSH
60394: EMPTY
60395: LIST
60396: PUSH
60397: LD_INT 33
60399: PUSH
60400: LD_INT 5
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 33
60409: PUSH
60410: LD_INT 3
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: LD_INT 34
60429: PUSH
60430: LD_INT 32
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 34
60439: PUSH
60440: LD_INT 51
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 34
60449: PUSH
60450: LD_INT 12
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PPUSH
60467: NOP4
60471: ST_TO_ADDR
// if not cargo then
60472: NOP4
60476: NOT
60477: IFFALSE 61120
// begin if mc_crates_collector [ i ] < 5 then
60479: NOP4
60483: PUSH
60484: NOP4
60488: ARRAY
60489: PUSH
60490: LD_INT 5
60492: LESS
60493: IFFALSE 60859
// begin if mc_ape [ i ] then
60495: NOP4
60499: PUSH
60500: NOP4
60504: ARRAY
60505: IFFALSE 60552
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
60507: NOP4
60511: PUSH
60512: NOP4
60516: PUSH
60517: NOP4
60521: ARRAY
60522: PPUSH
60523: LD_INT 25
60525: PUSH
60526: LD_INT 16
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 24
60535: PUSH
60536: LD_INT 750
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PPUSH
60547: NOP4
60551: ST_TO_ADDR
// if not tmp then
60552: NOP4
60556: NOT
60557: IFFALSE 60604
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
60559: NOP4
60563: PUSH
60564: NOP4
60568: PUSH
60569: NOP4
60573: ARRAY
60574: PPUSH
60575: LD_INT 25
60577: PUSH
60578: LD_INT 2
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 24
60587: PUSH
60588: LD_INT 750
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PPUSH
60599: NOP4
60603: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
60604: NOP4
60608: PUSH
60609: NOP4
60613: ARRAY
60614: PUSH
60615: NOP4
60619: PUSH
60620: NOP4
60624: ARRAY
60625: PPUSH
60626: LD_INT 25
60628: PUSH
60629: LD_INT 2
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 24
60638: PUSH
60639: LD_INT 750
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PPUSH
60650: NOP4
60654: AND
60655: PUSH
60656: NOP4
60660: PUSH
60661: LD_INT 5
60663: LESS
60664: AND
60665: IFFALSE 60747
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
60667: NOP4
60671: PUSH
60672: NOP4
60676: PUSH
60677: NOP4
60681: ARRAY
60682: PPUSH
60683: LD_INT 25
60685: PUSH
60686: LD_INT 2
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 24
60695: PUSH
60696: LD_INT 750
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PPUSH
60707: NOP4
60711: PUSH
60712: FOR_IN
60713: IFFALSE 60745
// begin tmp := tmp union j ;
60715: NOP4
60719: PUSH
60720: NOP4
60724: PUSH
60725: NOP4
60729: UNION
60730: ST_TO_ADDR
// if tmp >= 5 then
60731: NOP4
60735: PUSH
60736: LD_INT 5
60738: GREATEREQUAL
60739: IFFALSE 60743
// break ;
60741: GO 60745
// end ;
60743: GO 60712
60745: POP
60746: POP
// end ; if not tmp then
60747: NOP4
60751: NOT
60752: IFFALSE 60756
// continue ;
60754: GO 59968
// for j in tmp do
60756: NOP4
60760: PUSH
60761: NOP4
60765: PUSH
60766: FOR_IN
60767: IFFALSE 60857
// if not GetTag ( j ) then
60769: NOP4
60773: PPUSH
60774: NOP4
60778: NOT
60779: IFFALSE 60855
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
60781: NOP4
60785: PUSH
60786: NOP4
60790: PPUSH
60791: NOP4
60795: PUSH
60796: NOP4
60800: PUSH
60801: NOP4
60805: ARRAY
60806: PUSH
60807: LD_INT 1
60809: PLUS
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PPUSH
60815: NOP4
60819: PPUSH
60820: NOP4
60824: ST_TO_ADDR
// SetTag ( j , 107 ) ;
60825: NOP4
60829: PPUSH
60830: LD_INT 107
60832: PPUSH
60833: NOP4
// if mc_crates_collector [ i ] >= 5 then
60837: NOP4
60841: PUSH
60842: NOP4
60846: ARRAY
60847: PUSH
60848: LD_INT 5
60850: GREATEREQUAL
60851: IFFALSE 60855
// break ;
60853: GO 60857
// end ;
60855: GO 60766
60857: POP
60858: POP
// end ; if mc_crates_collector [ i ] and target then
60859: NOP4
60863: PUSH
60864: NOP4
60868: ARRAY
60869: PUSH
60870: NOP4
60874: AND
60875: IFFALSE 61118
// begin if mc_crates_collector [ i ] < target [ 1 ] then
60877: NOP4
60881: PUSH
60882: NOP4
60886: ARRAY
60887: PUSH
60888: NOP4
60892: PUSH
60893: LD_INT 1
60895: ARRAY
60896: LESS
60897: IFFALSE 60917
// tmp := mc_crates_collector [ i ] else
60899: NOP4
60903: PUSH
60904: NOP4
60908: PUSH
60909: NOP4
60913: ARRAY
60914: ST_TO_ADDR
60915: GO 60931
// tmp := target [ 1 ] ;
60917: NOP4
60921: PUSH
60922: NOP4
60926: PUSH
60927: LD_INT 1
60929: ARRAY
60930: ST_TO_ADDR
// k := 0 ;
60931: NOP4
60935: PUSH
60936: LD_INT 0
60938: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
60939: NOP4
60943: PUSH
60944: NOP4
60948: PUSH
60949: NOP4
60953: ARRAY
60954: PUSH
60955: FOR_IN
60956: IFFALSE 61116
// begin k := k + 1 ;
60958: NOP4
60962: PUSH
60963: NOP4
60967: PUSH
60968: LD_INT 1
60970: PLUS
60971: ST_TO_ADDR
// if k > tmp then
60972: NOP4
60976: PUSH
60977: NOP4
60981: GREATER
60982: IFFALSE 60986
// break ;
60984: GO 61116
// if not GetClass ( j ) in [ 2 , 16 ] then
60986: NOP4
60990: PPUSH
60991: NOP4
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: LD_INT 16
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: IN
61006: NOT
61007: IFFALSE 61060
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
61009: NOP4
61013: PUSH
61014: NOP4
61018: PPUSH
61019: NOP4
61023: PPUSH
61024: NOP4
61028: PUSH
61029: NOP4
61033: ARRAY
61034: PUSH
61035: NOP4
61039: DIFF
61040: PPUSH
61041: NOP4
61045: ST_TO_ADDR
// SetTag ( j , 0 ) ;
61046: NOP4
61050: PPUSH
61051: LD_INT 0
61053: PPUSH
61054: NOP4
// continue ;
61058: GO 60955
// end ; if IsInUnit ( j ) then
61060: NOP4
61064: PPUSH
61065: NOP4
61069: IFFALSE 61080
// ComExitBuilding ( j ) ;
61071: NOP4
61075: PPUSH
61076: NOP4
// wait ( 3 ) ;
61080: LD_INT 3
61082: PPUSH
61083: NOP4
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
61087: NOP4
61091: PPUSH
61092: NOP4
61096: PUSH
61097: LD_INT 2
61099: ARRAY
61100: PPUSH
61101: NOP4
61105: PUSH
61106: LD_INT 3
61108: ARRAY
61109: PPUSH
61110: NOP4
// end ;
61114: GO 60955
61116: POP
61117: POP
// end ; end else
61118: GO 61699
// begin for j in cargo do
61120: NOP4
61124: PUSH
61125: NOP4
61129: PUSH
61130: FOR_IN
61131: IFFALSE 61697
// begin if GetTag ( j ) <> 0 then
61133: NOP4
61137: PPUSH
61138: NOP4
61142: PUSH
61143: LD_INT 0
61145: NONEQUAL
61146: IFFALSE 61150
// continue ;
61148: GO 61130
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
61150: NOP4
61154: PPUSH
61155: NOP4
61159: PUSH
61160: LD_INT 1000
61162: LESS
61163: PUSH
61164: NOP4
61168: PPUSH
61169: NOP4
61173: PUSH
61174: NOP4
61178: ARRAY
61179: PPUSH
61180: NOP4
61184: NOT
61185: AND
61186: IFFALSE 61208
// ComMoveToArea ( j , mc_parking [ i ] ) ;
61188: NOP4
61192: PPUSH
61193: NOP4
61197: PUSH
61198: NOP4
61202: ARRAY
61203: PPUSH
61204: NOP4
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
61208: NOP4
61212: PPUSH
61213: NOP4
61217: PUSH
61218: LD_INT 1000
61220: LESS
61221: PUSH
61222: NOP4
61226: PPUSH
61227: NOP4
61231: PUSH
61232: NOP4
61236: ARRAY
61237: PPUSH
61238: NOP4
61242: AND
61243: IFFALSE 61247
// continue ;
61245: GO 61130
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
61247: NOP4
61251: PPUSH
61252: NOP4
61256: PUSH
61257: LD_INT 2
61259: EQUAL
61260: PUSH
61261: NOP4
61265: PPUSH
61266: NOP4
61270: PUSH
61271: LD_INT 15
61273: LESS
61274: AND
61275: IFFALSE 61279
// continue ;
61277: GO 61130
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
61279: NOP4
61283: PPUSH
61284: NOP4
61288: PUSH
61289: LD_INT 1
61291: EQUAL
61292: PUSH
61293: NOP4
61297: PPUSH
61298: NOP4
61302: PUSH
61303: LD_INT 10
61305: LESS
61306: AND
61307: IFFALSE 61636
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
61309: NOP4
61313: PUSH
61314: NOP4
61318: PUSH
61319: NOP4
61323: ARRAY
61324: PPUSH
61325: LD_INT 2
61327: PUSH
61328: LD_INT 30
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 30
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: LIST
61352: PPUSH
61353: NOP4
61357: ST_TO_ADDR
// if not depot then
61358: NOP4
61362: NOT
61363: IFFALSE 61367
// continue ;
61365: GO 61130
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
61367: NOP4
61371: PPUSH
61372: NOP4
61376: PPUSH
61377: NOP4
61381: PPUSH
61382: NOP4
61386: PPUSH
61387: NOP4
61391: PUSH
61392: LD_INT 6
61394: LESS
61395: IFFALSE 61411
// SetFuel ( j , 100 ) else
61397: NOP4
61401: PPUSH
61402: LD_INT 100
61404: PPUSH
61405: NOP4
61409: GO 61636
// if GetFuel ( j ) = 0 then
61411: NOP4
61415: PPUSH
61416: NOP4
61420: PUSH
61421: LD_INT 0
61423: EQUAL
61424: IFFALSE 61636
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
61426: NOP4
61430: PUSH
61431: NOP4
61435: PPUSH
61436: NOP4
61440: PPUSH
61441: NOP4
61445: PUSH
61446: NOP4
61450: ARRAY
61451: PUSH
61452: NOP4
61456: DIFF
61457: PPUSH
61458: NOP4
61462: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
61463: NOP4
61467: PPUSH
61468: NOP4
61472: PUSH
61473: LD_INT 1
61475: EQUAL
61476: IFFALSE 61492
// ComExitVehicle ( IsInUnit ( j ) ) ;
61478: NOP4
61482: PPUSH
61483: NOP4
61487: PPUSH
61488: NOP4
// if GetControl ( j ) = control_remote then
61492: NOP4
61496: PPUSH
61497: NOP4
61501: PUSH
61502: LD_INT 2
61504: EQUAL
61505: IFFALSE 61516
// ComUnlink ( j ) ;
61507: NOP4
61511: PPUSH
61512: NOP4
// fac := MC_GetBuildings ( i , b_factory ) ;
61516: NOP4
61520: PUSH
61521: NOP4
61525: PPUSH
61526: LD_INT 3
61528: PPUSH
61529: NOP4
61533: ST_TO_ADDR
// if fac then
61534: NOP4
61538: IFFALSE 61634
// begin for k in fac do
61540: NOP4
61544: PUSH
61545: NOP4
61549: PUSH
61550: FOR_IN
61551: IFFALSE 61632
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
61553: NOP4
61557: PUSH
61558: NOP4
61562: PPUSH
61563: NOP4
61567: PPUSH
61568: NOP4
61572: PPUSH
61573: NOP4
61577: PPUSH
61578: NOP4
61582: PPUSH
61583: NOP4
61587: PPUSH
61588: NOP4
61592: PPUSH
61593: NOP4
61597: PPUSH
61598: NOP4
61602: PPUSH
61603: NOP4
61607: ST_TO_ADDR
// if components then
61608: NOP4
61612: IFFALSE 61630
// begin MC_InsertProduceList ( i , components ) ;
61614: NOP4
61618: PPUSH
61619: NOP4
61623: PPUSH
61624: NOP4
// break ;
61628: GO 61632
// end ; end ;
61630: GO 61550
61632: POP
61633: POP
// end ; continue ;
61634: GO 61130
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
61636: NOP4
61640: PPUSH
61641: LD_INT 1
61643: PPUSH
61644: NOP4
61648: PUSH
61649: LD_INT 100
61651: LESS
61652: PUSH
61653: NOP4
61657: PPUSH
61658: NOP4
61662: NOT
61663: AND
61664: IFFALSE 61693
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
61666: NOP4
61670: PPUSH
61671: NOP4
61675: PUSH
61676: LD_INT 2
61678: ARRAY
61679: PPUSH
61680: NOP4
61684: PUSH
61685: LD_INT 3
61687: ARRAY
61688: PPUSH
61689: NOP4
// break ;
61693: GO 61697
// end ;
61695: GO 61130
61697: POP
61698: POP
// end ; end ;
61699: GO 59968
61701: POP
61702: POP
// end ;
61703: LD_VAR 0 1
61707: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
61708: LD_INT 0
61710: PPUSH
61711: PPUSH
61712: PPUSH
61713: PPUSH
// if not mc_bases then
61714: NOP4
61718: NOT
61719: IFFALSE 61723
// exit ;
61721: GO 61884
// for i = 1 to mc_bases do
61723: NOP4
61727: PUSH
61728: DOUBLE
61729: LD_INT 1
61731: DEC
61732: ST_TO_ADDR
61733: NOP4
61737: PUSH
61738: FOR_TO
61739: IFFALSE 61882
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
61741: NOP4
61745: PUSH
61746: NOP4
61750: PUSH
61751: NOP4
61755: ARRAY
61756: PUSH
61757: NOP4
61761: PUSH
61762: NOP4
61766: ARRAY
61767: UNION
61768: PPUSH
61769: LD_INT 33
61771: PUSH
61772: LD_INT 2
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PPUSH
61779: NOP4
61783: ST_TO_ADDR
// if tmp then
61784: NOP4
61788: IFFALSE 61880
// for j in tmp do
61790: NOP4
61794: PUSH
61795: NOP4
61799: PUSH
61800: FOR_IN
61801: IFFALSE 61878
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
61803: NOP4
61807: PPUSH
61808: NOP4
61812: NOT
61813: PUSH
61814: NOP4
61818: PPUSH
61819: NOP4
61823: PUSH
61824: LD_INT 250
61826: GREATEREQUAL
61827: AND
61828: IFFALSE 61841
// Connect ( j ) else
61830: NOP4
61834: PPUSH
61835: NOP4
61839: GO 61876
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
61841: NOP4
61845: PPUSH
61846: NOP4
61850: PUSH
61851: LD_INT 250
61853: LESS
61854: PUSH
61855: NOP4
61859: PPUSH
61860: NOP4
61864: AND
61865: IFFALSE 61876
// ComUnlink ( j ) ;
61867: NOP4
61871: PPUSH
61872: NOP4
61876: GO 61800
61878: POP
61879: POP
// end ;
61880: GO 61738
61882: POP
61883: POP
// end ;
61884: LD_VAR 0 1
61888: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
61889: LD_INT 0
61891: PPUSH
61892: PPUSH
61893: PPUSH
61894: PPUSH
61895: PPUSH
// if not mc_bases then
61896: NOP4
61900: NOT
61901: IFFALSE 61905
// exit ;
61903: GO 62350
// for i = 1 to mc_bases do
61905: NOP4
61909: PUSH
61910: DOUBLE
61911: LD_INT 1
61913: DEC
61914: ST_TO_ADDR
61915: NOP4
61919: PUSH
61920: FOR_TO
61921: IFFALSE 62348
// begin if not mc_produce [ i ] then
61923: NOP4
61927: PUSH
61928: NOP4
61932: ARRAY
61933: NOT
61934: IFFALSE 61938
// continue ;
61936: GO 61920
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
61938: NOP4
61942: PUSH
61943: NOP4
61947: PUSH
61948: NOP4
61952: ARRAY
61953: PPUSH
61954: LD_INT 30
61956: PUSH
61957: LD_INT 3
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PPUSH
61964: NOP4
61968: ST_TO_ADDR
// if not fac then
61969: NOP4
61973: NOT
61974: IFFALSE 61978
// continue ;
61976: GO 61920
// for j in fac do
61978: NOP4
61982: PUSH
61983: NOP4
61987: PUSH
61988: FOR_IN
61989: IFFALSE 62344
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
61991: NOP4
61995: PPUSH
61996: NOP4
62000: PUSH
62001: LD_INT 2
62003: NONEQUAL
62004: PUSH
62005: NOP4
62009: PPUSH
62010: LD_INT 15
62012: PPUSH
62013: NOP4
62017: PUSH
62018: LD_INT 4
62020: ARRAY
62021: OR
62022: IFFALSE 62026
// continue ;
62024: GO 61988
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
62026: NOP4
62030: PPUSH
62031: NOP4
62035: PUSH
62036: NOP4
62040: ARRAY
62041: PUSH
62042: LD_INT 1
62044: ARRAY
62045: PUSH
62046: LD_INT 1
62048: ARRAY
62049: PPUSH
62050: NOP4
62054: PUSH
62055: NOP4
62059: ARRAY
62060: PUSH
62061: LD_INT 1
62063: ARRAY
62064: PUSH
62065: LD_INT 2
62067: ARRAY
62068: PPUSH
62069: NOP4
62073: PUSH
62074: NOP4
62078: ARRAY
62079: PUSH
62080: LD_INT 1
62082: ARRAY
62083: PUSH
62084: LD_INT 3
62086: ARRAY
62087: PPUSH
62088: NOP4
62092: PUSH
62093: NOP4
62097: ARRAY
62098: PUSH
62099: LD_INT 1
62101: ARRAY
62102: PUSH
62103: LD_INT 4
62105: ARRAY
62106: PPUSH
62107: NOP4
62111: PUSH
62112: NOP4
62116: PPUSH
62117: NOP4
62121: PUSH
62122: NOP4
62126: ARRAY
62127: PUSH
62128: LD_INT 1
62130: ARRAY
62131: PUSH
62132: LD_INT 1
62134: ARRAY
62135: PUSH
62136: NOP4
62140: PUSH
62141: NOP4
62145: ARRAY
62146: PUSH
62147: LD_INT 1
62149: ARRAY
62150: PUSH
62151: LD_INT 2
62153: ARRAY
62154: PUSH
62155: NOP4
62159: PUSH
62160: NOP4
62164: ARRAY
62165: PUSH
62166: LD_INT 1
62168: ARRAY
62169: PUSH
62170: LD_INT 3
62172: ARRAY
62173: PUSH
62174: NOP4
62178: PUSH
62179: NOP4
62183: ARRAY
62184: PUSH
62185: LD_INT 1
62187: ARRAY
62188: PUSH
62189: LD_INT 4
62191: ARRAY
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: PPUSH
62199: NOP4
62203: AND
62204: IFFALSE 62342
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
62206: NOP4
62210: PPUSH
62211: NOP4
62215: PUSH
62216: NOP4
62220: ARRAY
62221: PUSH
62222: LD_INT 1
62224: ARRAY
62225: PUSH
62226: LD_INT 1
62228: ARRAY
62229: PPUSH
62230: NOP4
62234: PUSH
62235: NOP4
62239: ARRAY
62240: PUSH
62241: LD_INT 1
62243: ARRAY
62244: PUSH
62245: LD_INT 2
62247: ARRAY
62248: PPUSH
62249: NOP4
62253: PUSH
62254: NOP4
62258: ARRAY
62259: PUSH
62260: LD_INT 1
62262: ARRAY
62263: PUSH
62264: LD_INT 3
62266: ARRAY
62267: PPUSH
62268: NOP4
62272: PUSH
62273: NOP4
62277: ARRAY
62278: PUSH
62279: LD_INT 1
62281: ARRAY
62282: PUSH
62283: LD_INT 4
62285: ARRAY
62286: PPUSH
62287: NOP4
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
62291: NOP4
62295: PUSH
62296: NOP4
62300: PUSH
62301: NOP4
62305: ARRAY
62306: PPUSH
62307: LD_INT 1
62309: PPUSH
62310: NOP4
62314: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
62315: NOP4
62319: PUSH
62320: NOP4
62324: PPUSH
62325: NOP4
62329: PPUSH
62330: NOP4
62334: PPUSH
62335: NOP4
62339: ST_TO_ADDR
// break ;
62340: GO 62344
// end ; end ;
62342: GO 61988
62344: POP
62345: POP
// end ;
62346: GO 61920
62348: POP
62349: POP
// end ;
62350: LD_VAR 0 1
62354: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
62355: LD_INT 0
62357: PPUSH
62358: PPUSH
62359: PPUSH
// if not mc_bases then
62360: NOP4
62364: NOT
62365: IFFALSE 62369
// exit ;
62367: GO 62458
// for i = 1 to mc_bases do
62369: NOP4
62373: PUSH
62374: DOUBLE
62375: LD_INT 1
62377: DEC
62378: ST_TO_ADDR
62379: NOP4
62383: PUSH
62384: FOR_TO
62385: IFFALSE 62456
// begin if mc_attack [ i ] then
62387: NOP4
62391: PUSH
62392: NOP4
62396: ARRAY
62397: IFFALSE 62454
// begin tmp := mc_attack [ i ] [ 1 ] ;
62399: NOP4
62403: PUSH
62404: NOP4
62408: PUSH
62409: NOP4
62413: ARRAY
62414: PUSH
62415: LD_INT 1
62417: ARRAY
62418: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
62419: NOP4
62423: PUSH
62424: NOP4
62428: PPUSH
62429: NOP4
62433: PPUSH
62434: EMPTY
62435: PPUSH
62436: NOP4
62440: ST_TO_ADDR
// Attack ( tmp ) ;
62441: NOP4
62445: PPUSH
62446: NOP4
// exit ;
62450: POP
62451: POP
62452: GO 62458
// end ; end ;
62454: GO 62384
62456: POP
62457: POP
// end ;
62458: LD_VAR 0 1
62462: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
62463: LD_INT 0
62465: PPUSH
62466: PPUSH
62467: PPUSH
62468: PPUSH
62469: PPUSH
62470: PPUSH
62471: PPUSH
// if not mc_bases then
62472: NOP4
62476: NOT
62477: IFFALSE 62481
// exit ;
62479: GO 63085
// for i = 1 to mc_bases do
62481: NOP4
62485: PUSH
62486: DOUBLE
62487: LD_INT 1
62489: DEC
62490: ST_TO_ADDR
62491: NOP4
62495: PUSH
62496: FOR_TO
62497: IFFALSE 63083
// begin if not mc_bases [ i ] then
62499: NOP4
62503: PUSH
62504: NOP4
62508: ARRAY
62509: NOT
62510: IFFALSE 62514
// continue ;
62512: GO 62496
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
62514: NOP4
62518: PUSH
62519: NOP4
62523: PUSH
62524: NOP4
62528: ARRAY
62529: PUSH
62530: LD_INT 1
62532: ARRAY
62533: PPUSH
62534: NOP4
62538: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
62539: NOP4
62543: PUSH
62544: NOP4
62548: PPUSH
62549: NOP4
62553: PPUSH
62554: NOP4
62558: PUSH
62559: NOP4
62563: ARRAY
62564: PUSH
62565: LD_INT 1
62567: ARRAY
62568: PPUSH
62569: NOP4
62573: PPUSH
62574: NOP4
62578: PUSH
62579: NOP4
62583: ARRAY
62584: PPUSH
62585: NOP4
62589: PPUSH
62590: NOP4
62594: ST_TO_ADDR
// if not mc_scan [ i ] then
62595: NOP4
62599: PUSH
62600: NOP4
62604: ARRAY
62605: NOT
62606: IFFALSE 62761
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
62608: NOP4
62612: PUSH
62613: NOP4
62617: PUSH
62618: NOP4
62622: ARRAY
62623: PPUSH
62624: LD_INT 2
62626: PUSH
62627: LD_INT 25
62629: PUSH
62630: LD_INT 5
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 25
62639: PUSH
62640: LD_INT 8
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 25
62649: PUSH
62650: LD_INT 9
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: PPUSH
62663: NOP4
62667: ST_TO_ADDR
// if not tmp then
62668: NOP4
62672: NOT
62673: IFFALSE 62677
// continue ;
62675: GO 62496
// for j in tmp do
62677: NOP4
62681: PUSH
62682: NOP4
62686: PUSH
62687: FOR_IN
62688: IFFALSE 62759
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
62690: NOP4
62694: PPUSH
62695: NOP4
62699: PPUSH
62700: NOP4
62704: PUSH
62705: LD_INT 5
62707: EQUAL
62708: PUSH
62709: NOP4
62713: PPUSH
62714: NOP4
62718: PUSH
62719: LD_INT 1
62721: EQUAL
62722: AND
62723: PUSH
62724: NOP4
62728: PPUSH
62729: NOP4
62733: NOT
62734: AND
62735: PUSH
62736: NOP4
62740: AND
62741: IFFALSE 62757
// ComChangeProfession ( j , class ) ;
62743: NOP4
62747: PPUSH
62748: NOP4
62752: PPUSH
62753: NOP4
62757: GO 62687
62759: POP
62760: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
62761: NOP4
62765: PUSH
62766: NOP4
62770: ARRAY
62771: PUSH
62772: NOP4
62776: PUSH
62777: NOP4
62781: ARRAY
62782: NOT
62783: AND
62784: PUSH
62785: NOP4
62789: PUSH
62790: NOP4
62794: ARRAY
62795: PPUSH
62796: LD_INT 30
62798: PUSH
62799: LD_INT 32
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PPUSH
62806: NOP4
62810: NOT
62811: AND
62812: PUSH
62813: NOP4
62817: PUSH
62818: NOP4
62822: ARRAY
62823: PPUSH
62824: LD_INT 2
62826: PUSH
62827: LD_INT 30
62829: PUSH
62830: LD_INT 4
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 30
62839: PUSH
62840: LD_INT 5
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: LIST
62851: PPUSH
62852: NOP4
62856: NOT
62857: AND
62858: IFFALSE 62990
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
62860: NOP4
62864: PUSH
62865: NOP4
62869: PUSH
62870: NOP4
62874: ARRAY
62875: PPUSH
62876: LD_INT 2
62878: PUSH
62879: LD_INT 25
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 25
62891: PUSH
62892: LD_INT 5
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 25
62901: PUSH
62902: LD_INT 8
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 25
62911: PUSH
62912: LD_INT 9
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: PPUSH
62926: NOP4
62930: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
62931: NOP4
62935: PUSH
62936: NOP4
62940: PUSH
62941: NOP4
62945: PPUSH
62946: LD_INT 18
62948: PPUSH
62949: NOP4
62953: DIFF
62954: ST_TO_ADDR
// if tmp then
62955: NOP4
62959: IFFALSE 62990
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
62961: NOP4
62965: PPUSH
62966: NOP4
62970: PPUSH
62971: NOP4
62975: PUSH
62976: NOP4
62980: ARRAY
62981: PPUSH
62982: NOP4
// exit ;
62986: POP
62987: POP
62988: GO 63085
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
62990: NOP4
62994: PUSH
62995: NOP4
62999: ARRAY
63000: PUSH
63001: NOP4
63005: PUSH
63006: NOP4
63010: ARRAY
63011: AND
63012: IFFALSE 63081
// begin tmp := mc_defender [ i ] ;
63014: NOP4
63018: PUSH
63019: NOP4
63023: PUSH
63024: NOP4
63028: ARRAY
63029: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
63030: NOP4
63034: PUSH
63035: NOP4
63039: PPUSH
63040: NOP4
63044: PPUSH
63045: EMPTY
63046: PPUSH
63047: NOP4
63051: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
63052: NOP4
63056: PPUSH
63057: NOP4
63061: PPUSH
63062: NOP4
63066: PUSH
63067: NOP4
63071: ARRAY
63072: PPUSH
63073: NOP4
// exit ;
63077: POP
63078: POP
63079: GO 63085
// end ; end ;
63081: GO 62496
63083: POP
63084: POP
// end ;
63085: LD_VAR 0 1
63089: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
63090: LD_INT 0
63092: PPUSH
63093: PPUSH
63094: PPUSH
63095: PPUSH
63096: PPUSH
63097: PPUSH
63098: PPUSH
63099: PPUSH
63100: PPUSH
63101: PPUSH
63102: PPUSH
// if not mc_bases then
63103: NOP4
63107: NOT
63108: IFFALSE 63112
// exit ;
63110: GO 64199
// for i = 1 to mc_bases do
63112: NOP4
63116: PUSH
63117: DOUBLE
63118: LD_INT 1
63120: DEC
63121: ST_TO_ADDR
63122: NOP4
63126: PUSH
63127: FOR_TO
63128: IFFALSE 64197
// begin tmp := mc_lab [ i ] ;
63130: NOP4
63134: PUSH
63135: NOP4
63139: PUSH
63140: NOP4
63144: ARRAY
63145: ST_TO_ADDR
// if not tmp then
63146: NOP4
63150: NOT
63151: IFFALSE 63155
// continue ;
63153: GO 63127
// idle_lab := 0 ;
63155: NOP4
63159: PUSH
63160: LD_INT 0
63162: ST_TO_ADDR
// for j in tmp do
63163: NOP4
63167: PUSH
63168: NOP4
63172: PUSH
63173: FOR_IN
63174: IFFALSE 64193
// begin researching := false ;
63176: NOP4
63180: PUSH
63181: LD_INT 0
63183: ST_TO_ADDR
// side := GetSide ( j ) ;
63184: NOP4
63188: PUSH
63189: NOP4
63193: PPUSH
63194: NOP4
63198: ST_TO_ADDR
// if not mc_tech [ side ] then
63199: NOP4
63203: PUSH
63204: NOP4
63208: ARRAY
63209: NOT
63210: IFFALSE 63214
// continue ;
63212: GO 63173
// if BuildingStatus ( j ) = bs_idle then
63214: NOP4
63218: PPUSH
63219: NOP4
63223: PUSH
63224: LD_INT 2
63226: EQUAL
63227: IFFALSE 63415
// begin if idle_lab and UnitsInside ( j ) < 6 then
63229: NOP4
63233: PUSH
63234: NOP4
63238: PPUSH
63239: NOP4
63243: PUSH
63244: LD_INT 6
63246: LESS
63247: AND
63248: IFFALSE 63319
// begin tmp2 := UnitsInside ( idle_lab ) ;
63250: NOP4
63254: PUSH
63255: NOP4
63259: PPUSH
63260: NOP4
63264: ST_TO_ADDR
// if tmp2 then
63265: NOP4
63269: IFFALSE 63311
// for x in tmp2 do
63271: NOP4
63275: PUSH
63276: NOP4
63280: PUSH
63281: FOR_IN
63282: IFFALSE 63309
// begin ComExitBuilding ( x ) ;
63284: NOP4
63288: PPUSH
63289: NOP4
// AddComEnterUnit ( x , j ) ;
63293: NOP4
63297: PPUSH
63298: NOP4
63302: PPUSH
63303: NOP4
// end ;
63307: GO 63281
63309: POP
63310: POP
// idle_lab := 0 ;
63311: NOP4
63315: PUSH
63316: LD_INT 0
63318: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
63319: NOP4
63323: PUSH
63324: NOP4
63328: PUSH
63329: NOP4
63333: ARRAY
63334: PUSH
63335: FOR_IN
63336: IFFALSE 63396
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
63338: NOP4
63342: PPUSH
63343: NOP4
63347: PPUSH
63348: NOP4
63352: PUSH
63353: NOP4
63357: PPUSH
63358: NOP4
63362: PPUSH
63363: NOP4
63367: AND
63368: IFFALSE 63394
// begin researching := true ;
63370: NOP4
63374: PUSH
63375: LD_INT 1
63377: ST_TO_ADDR
// ComResearch ( j , t ) ;
63378: NOP4
63382: PPUSH
63383: NOP4
63387: PPUSH
63388: NOP4
// break ;
63392: GO 63396
// end ;
63394: GO 63335
63396: POP
63397: POP
// if not researching then
63398: NOP4
63402: NOT
63403: IFFALSE 63415
// idle_lab := j ;
63405: NOP4
63409: PUSH
63410: NOP4
63414: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
63415: NOP4
63419: PPUSH
63420: NOP4
63424: PUSH
63425: LD_INT 10
63427: EQUAL
63428: IFFALSE 64016
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
63430: NOP4
63434: PUSH
63435: NOP4
63439: ARRAY
63440: NOT
63441: PUSH
63442: NOP4
63446: PUSH
63447: NOP4
63451: ARRAY
63452: NOT
63453: AND
63454: PUSH
63455: NOP4
63459: PUSH
63460: NOP4
63464: ARRAY
63465: PUSH
63466: LD_INT 1
63468: GREATER
63469: AND
63470: IFFALSE 63601
// begin ComCancel ( j ) ;
63472: NOP4
63476: PPUSH
63477: NOP4
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
63481: NOP4
63485: PUSH
63486: NOP4
63490: PPUSH
63491: NOP4
63495: PPUSH
63496: NOP4
63500: PUSH
63501: NOP4
63505: ARRAY
63506: PPUSH
63507: NOP4
63511: PUSH
63512: NOP4
63516: ARRAY
63517: PUSH
63518: LD_INT 1
63520: MINUS
63521: PPUSH
63522: NOP4
63526: PUSH
63527: NOP4
63531: ARRAY
63532: PPUSH
63533: LD_INT 0
63535: PPUSH
63536: NOP4
63540: PPUSH
63541: NOP4
63545: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
63546: NOP4
63550: PUSH
63551: NOP4
63555: PPUSH
63556: NOP4
63560: PPUSH
63561: NOP4
63565: PUSH
63566: NOP4
63570: ARRAY
63571: PPUSH
63572: NOP4
63576: PUSH
63577: NOP4
63581: ARRAY
63582: PPUSH
63583: LD_INT 1
63585: PPUSH
63586: LD_INT 0
63588: PPUSH
63589: NOP4
63593: PPUSH
63594: NOP4
63598: ST_TO_ADDR
// continue ;
63599: GO 63173
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
63601: NOP4
63605: PUSH
63606: NOP4
63610: ARRAY
63611: PUSH
63612: NOP4
63616: PUSH
63617: NOP4
63621: ARRAY
63622: NOT
63623: AND
63624: IFFALSE 63751
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
63626: NOP4
63630: PUSH
63631: NOP4
63635: PPUSH
63636: NOP4
63640: PUSH
63641: NOP4
63645: PUSH
63646: NOP4
63650: ARRAY
63651: PUSH
63652: LD_INT 1
63654: PLUS
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PPUSH
63660: NOP4
63664: PUSH
63665: NOP4
63669: ARRAY
63670: PUSH
63671: LD_INT 1
63673: ARRAY
63674: PPUSH
63675: NOP4
63679: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
63680: NOP4
63684: PUSH
63685: NOP4
63689: ARRAY
63690: PUSH
63691: LD_INT 1
63693: ARRAY
63694: PPUSH
63695: LD_INT 112
63697: PPUSH
63698: NOP4
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
63702: NOP4
63706: PUSH
63707: NOP4
63711: PUSH
63712: NOP4
63716: ARRAY
63717: PPUSH
63718: LD_INT 1
63720: PPUSH
63721: NOP4
63725: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
63726: NOP4
63730: PUSH
63731: NOP4
63735: PPUSH
63736: NOP4
63740: PPUSH
63741: NOP4
63745: PPUSH
63746: NOP4
63750: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
63751: NOP4
63755: PUSH
63756: NOP4
63760: ARRAY
63761: PUSH
63762: NOP4
63766: PUSH
63767: NOP4
63771: ARRAY
63772: AND
63773: PUSH
63774: NOP4
63778: PUSH
63779: NOP4
63783: ARRAY
63784: PUSH
63785: LD_INT 1
63787: ARRAY
63788: PPUSH
63789: NOP4
63793: NOT
63794: AND
63795: PUSH
63796: NOP4
63800: PPUSH
63801: NOP4
63805: PUSH
63806: LD_INT 6
63808: EQUAL
63809: AND
63810: IFFALSE 63866
// begin tmp2 := UnitsInside ( j ) ;
63812: NOP4
63816: PUSH
63817: NOP4
63821: PPUSH
63822: NOP4
63826: ST_TO_ADDR
// if tmp2 = 6 then
63827: NOP4
63831: PUSH
63832: LD_INT 6
63834: EQUAL
63835: IFFALSE 63866
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
63837: NOP4
63841: PUSH
63842: LD_INT 1
63844: ARRAY
63845: PPUSH
63846: LD_INT 112
63848: PPUSH
63849: NOP4
// ComExitBuilding ( tmp2 [ 1 ] ) ;
63853: NOP4
63857: PUSH
63858: LD_INT 1
63860: ARRAY
63861: PPUSH
63862: NOP4
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
63866: NOP4
63870: PUSH
63871: NOP4
63875: ARRAY
63876: PUSH
63877: NOP4
63881: PUSH
63882: NOP4
63886: ARRAY
63887: PUSH
63888: LD_INT 1
63890: ARRAY
63891: PPUSH
63892: NOP4
63896: NOT
63897: AND
63898: PUSH
63899: NOP4
63903: PUSH
63904: NOP4
63908: ARRAY
63909: PUSH
63910: LD_INT 1
63912: ARRAY
63913: PPUSH
63914: NOP4
63918: NOT
63919: AND
63920: IFFALSE 63946
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
63922: NOP4
63926: PUSH
63927: NOP4
63931: ARRAY
63932: PUSH
63933: LD_INT 1
63935: ARRAY
63936: PPUSH
63937: NOP4
63941: PPUSH
63942: NOP4
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
63946: NOP4
63950: PUSH
63951: NOP4
63955: ARRAY
63956: PUSH
63957: LD_INT 1
63959: ARRAY
63960: PPUSH
63961: NOP4
63965: PUSH
63966: NOP4
63970: PUSH
63971: NOP4
63975: ARRAY
63976: PUSH
63977: LD_INT 1
63979: ARRAY
63980: PPUSH
63981: NOP4
63985: PPUSH
63986: NOP4
63990: PUSH
63991: LD_INT 3
63993: NONEQUAL
63994: AND
63995: IFFALSE 64016
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
63997: NOP4
64001: PUSH
64002: NOP4
64006: ARRAY
64007: PUSH
64008: LD_INT 1
64010: ARRAY
64011: PPUSH
64012: NOP4
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
64016: NOP4
64020: PPUSH
64021: NOP4
64025: PUSH
64026: LD_INT 6
64028: EQUAL
64029: PUSH
64030: NOP4
64034: PUSH
64035: LD_INT 1
64037: GREATER
64038: AND
64039: IFFALSE 64191
// begin sci := [ ] ;
64041: NOP4
64045: PUSH
64046: EMPTY
64047: ST_TO_ADDR
// for x in ( tmp diff j ) do
64048: NOP4
64052: PUSH
64053: NOP4
64057: PUSH
64058: NOP4
64062: DIFF
64063: PUSH
64064: FOR_IN
64065: IFFALSE 64117
// begin if sci = 6 then
64067: NOP4
64071: PUSH
64072: LD_INT 6
64074: EQUAL
64075: IFFALSE 64079
// break ;
64077: GO 64117
// if BuildingStatus ( x ) = bs_idle then
64079: NOP4
64083: PPUSH
64084: NOP4
64088: PUSH
64089: LD_INT 2
64091: EQUAL
64092: IFFALSE 64115
// sci := sci ^ UnitsInside ( x ) ;
64094: NOP4
64098: PUSH
64099: NOP4
64103: PUSH
64104: NOP4
64108: PPUSH
64109: NOP4
64113: ADD
64114: ST_TO_ADDR
// end ;
64115: GO 64064
64117: POP
64118: POP
// if not sci then
64119: NOP4
64123: NOT
64124: IFFALSE 64128
// continue ;
64126: GO 63173
// for x in sci do
64128: NOP4
64132: PUSH
64133: NOP4
64137: PUSH
64138: FOR_IN
64139: IFFALSE 64189
// if IsInUnit ( x ) and not HasTask ( x ) then
64141: NOP4
64145: PPUSH
64146: NOP4
64150: PUSH
64151: NOP4
64155: PPUSH
64156: NOP4
64160: NOT
64161: AND
64162: IFFALSE 64187
// begin ComExitBuilding ( x ) ;
64164: NOP4
64168: PPUSH
64169: NOP4
// AddComEnterUnit ( x , j ) ;
64173: NOP4
64177: PPUSH
64178: NOP4
64182: PPUSH
64183: NOP4
// end ;
64187: GO 64138
64189: POP
64190: POP
// end ; end ;
64191: GO 63173
64193: POP
64194: POP
// end ;
64195: GO 63127
64197: POP
64198: POP
// end ;
64199: LD_VAR 0 1
64203: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
64204: LD_INT 0
64206: PPUSH
64207: PPUSH
// if not mc_bases then
64208: NOP4
64212: NOT
64213: IFFALSE 64217
// exit ;
64215: GO 64298
// for i = 1 to mc_bases do
64217: NOP4
64221: PUSH
64222: DOUBLE
64223: LD_INT 1
64225: DEC
64226: ST_TO_ADDR
64227: NOP4
64231: PUSH
64232: FOR_TO
64233: IFFALSE 64296
// if mc_mines [ i ] and mc_miners [ i ] then
64235: NOP4
64239: PUSH
64240: NOP4
64244: ARRAY
64245: PUSH
64246: NOP4
64250: PUSH
64251: NOP4
64255: ARRAY
64256: AND
64257: IFFALSE 64294
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
64259: NOP4
64263: PUSH
64264: NOP4
64268: ARRAY
64269: PUSH
64270: LD_INT 1
64272: ARRAY
64273: PPUSH
64274: NOP4
64278: PPUSH
64279: NOP4
64283: PUSH
64284: NOP4
64288: ARRAY
64289: PPUSH
64290: NOP4
64294: GO 64232
64296: POP
64297: POP
// end ;
64298: LD_VAR 0 1
64302: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
64303: LD_INT 0
64305: PPUSH
64306: PPUSH
64307: PPUSH
64308: PPUSH
64309: PPUSH
64310: PPUSH
64311: PPUSH
64312: PPUSH
// if not mc_bases or not mc_parking then
64313: NOP4
64317: NOT
64318: PUSH
64319: NOP4
64323: NOT
64324: OR
64325: IFFALSE 64329
// exit ;
64327: GO 65028
// for i = 1 to mc_bases do
64329: NOP4
64333: PUSH
64334: DOUBLE
64335: LD_INT 1
64337: DEC
64338: ST_TO_ADDR
64339: NOP4
64343: PUSH
64344: FOR_TO
64345: IFFALSE 65026
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
64347: NOP4
64351: PUSH
64352: NOP4
64356: ARRAY
64357: NOT
64358: PUSH
64359: NOP4
64363: PUSH
64364: NOP4
64368: ARRAY
64369: NOT
64370: OR
64371: IFFALSE 64375
// continue ;
64373: GO 64344
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
64375: NOP4
64379: PUSH
64380: NOP4
64384: PUSH
64385: NOP4
64389: ARRAY
64390: PUSH
64391: LD_INT 1
64393: ARRAY
64394: PPUSH
64395: NOP4
64399: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
64400: NOP4
64404: PUSH
64405: NOP4
64409: PUSH
64410: NOP4
64414: ARRAY
64415: PPUSH
64416: LD_INT 30
64418: PUSH
64419: LD_INT 3
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PPUSH
64426: NOP4
64430: ST_TO_ADDR
// if not fac then
64431: NOP4
64435: NOT
64436: IFFALSE 64487
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64438: NOP4
64442: PUSH
64443: NOP4
64447: PUSH
64448: NOP4
64452: ARRAY
64453: PPUSH
64454: LD_INT 2
64456: PUSH
64457: LD_INT 30
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 30
64469: PUSH
64470: LD_INT 1
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: LIST
64481: PPUSH
64482: NOP4
64486: ST_TO_ADDR
// if not fac then
64487: NOP4
64491: NOT
64492: IFFALSE 64496
// continue ;
64494: GO 64344
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
64496: NOP4
64500: PUSH
64501: NOP4
64505: PUSH
64506: NOP4
64510: ARRAY
64511: PPUSH
64512: LD_INT 22
64514: PUSH
64515: NOP4
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 21
64526: PUSH
64527: LD_INT 2
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 3
64536: PUSH
64537: LD_INT 24
64539: PUSH
64540: LD_INT 1000
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: LIST
64555: PPUSH
64556: NOP4
64560: ST_TO_ADDR
// for j in fac do
64561: NOP4
64565: PUSH
64566: NOP4
64570: PUSH
64571: FOR_IN
64572: IFFALSE 64653
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
64574: NOP4
64578: PUSH
64579: NOP4
64583: PUSH
64584: LD_INT 22
64586: PUSH
64587: NOP4
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 91
64598: PUSH
64599: NOP4
64603: PUSH
64604: LD_INT 15
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 21
64614: PUSH
64615: LD_INT 2
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 3
64624: PUSH
64625: LD_INT 24
64627: PUSH
64628: LD_INT 1000
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: PPUSH
64645: NOP4
64649: UNION
64650: ST_TO_ADDR
64651: GO 64571
64653: POP
64654: POP
// if not vehs then
64655: NOP4
64659: NOT
64660: IFFALSE 64686
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
64662: NOP4
64666: PUSH
64667: NOP4
64671: PPUSH
64672: NOP4
64676: PPUSH
64677: EMPTY
64678: PPUSH
64679: NOP4
64683: ST_TO_ADDR
// continue ;
64684: GO 64344
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
64686: NOP4
64690: PUSH
64691: NOP4
64695: PUSH
64696: NOP4
64700: ARRAY
64701: PPUSH
64702: LD_INT 30
64704: PUSH
64705: LD_INT 3
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PPUSH
64712: NOP4
64716: ST_TO_ADDR
// if tmp then
64717: NOP4
64721: IFFALSE 64824
// begin for j in tmp do
64723: NOP4
64727: PUSH
64728: NOP4
64732: PUSH
64733: FOR_IN
64734: IFFALSE 64822
// for k in UnitsInside ( j ) do
64736: NOP4
64740: PUSH
64741: NOP4
64745: PPUSH
64746: NOP4
64750: PUSH
64751: FOR_IN
64752: IFFALSE 64818
// if k then
64754: NOP4
64758: IFFALSE 64816
// if not k in mc_repair_vehicle [ i ] then
64760: NOP4
64764: PUSH
64765: NOP4
64769: PUSH
64770: NOP4
64774: ARRAY
64775: IN
64776: NOT
64777: IFFALSE 64816
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
64779: NOP4
64783: PUSH
64784: NOP4
64788: PPUSH
64789: NOP4
64793: PPUSH
64794: NOP4
64798: PUSH
64799: NOP4
64803: ARRAY
64804: PUSH
64805: NOP4
64809: UNION
64810: PPUSH
64811: NOP4
64815: ST_TO_ADDR
64816: GO 64751
64818: POP
64819: POP
64820: GO 64733
64822: POP
64823: POP
// end ; if not mc_repair_vehicle [ i ] then
64824: NOP4
64828: PUSH
64829: NOP4
64833: ARRAY
64834: NOT
64835: IFFALSE 64839
// continue ;
64837: GO 64344
// for j in mc_repair_vehicle [ i ] do
64839: NOP4
64843: PUSH
64844: NOP4
64848: PUSH
64849: NOP4
64853: ARRAY
64854: PUSH
64855: FOR_IN
64856: IFFALSE 65022
// begin if GetClass ( j ) <> 3 then
64858: NOP4
64862: PPUSH
64863: NOP4
64867: PUSH
64868: LD_INT 3
64870: NONEQUAL
64871: IFFALSE 64912
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
64873: NOP4
64877: PUSH
64878: NOP4
64882: PPUSH
64883: NOP4
64887: PPUSH
64888: NOP4
64892: PUSH
64893: NOP4
64897: ARRAY
64898: PUSH
64899: NOP4
64903: DIFF
64904: PPUSH
64905: NOP4
64909: ST_TO_ADDR
// continue ;
64910: GO 64855
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
64912: NOP4
64916: PPUSH
64917: NOP4
64921: NOT
64922: PUSH
64923: NOP4
64927: PUSH
64928: NOP4
64932: PUSH
64933: NOP4
64937: ARRAY
64938: PUSH
64939: LD_INT 1
64941: ARRAY
64942: IN
64943: NOT
64944: AND
64945: PUSH
64946: NOP4
64950: PUSH
64951: NOP4
64955: PUSH
64956: NOP4
64960: ARRAY
64961: PUSH
64962: LD_INT 2
64964: ARRAY
64965: IN
64966: NOT
64967: AND
64968: IFFALSE 65020
// begin if IsInUnit ( j ) then
64970: NOP4
64974: PPUSH
64975: NOP4
64979: IFFALSE 64990
// ComExitBuilding ( j ) ;
64981: NOP4
64985: PPUSH
64986: NOP4
// if not HasTask ( j ) then
64990: NOP4
64994: PPUSH
64995: NOP4
64999: NOT
65000: IFFALSE 65020
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
65002: NOP4
65006: PPUSH
65007: NOP4
65011: PUSH
65012: LD_INT 1
65014: ARRAY
65015: PPUSH
65016: NOP4
// end ; end ;
65020: GO 64855
65022: POP
65023: POP
// end ;
65024: GO 64344
65026: POP
65027: POP
// end ;
65028: LD_VAR 0 1
65032: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
65033: LD_INT 0
65035: PPUSH
65036: PPUSH
65037: PPUSH
65038: PPUSH
65039: PPUSH
65040: PPUSH
65041: PPUSH
65042: PPUSH
65043: PPUSH
65044: PPUSH
65045: PPUSH
// if not mc_bases then
65046: NOP4
65050: NOT
65051: IFFALSE 65055
// exit ;
65053: GO 65857
// for i = 1 to mc_bases do
65055: NOP4
65059: PUSH
65060: DOUBLE
65061: LD_INT 1
65063: DEC
65064: ST_TO_ADDR
65065: NOP4
65069: PUSH
65070: FOR_TO
65071: IFFALSE 65855
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
65073: NOP4
65077: PUSH
65078: NOP4
65082: ARRAY
65083: NOT
65084: PUSH
65085: NOP4
65089: PUSH
65090: NOP4
65094: ARRAY
65095: PUSH
65096: LD_INT 1
65098: ARRAY
65099: OR
65100: PUSH
65101: NOP4
65105: PUSH
65106: NOP4
65110: ARRAY
65111: PUSH
65112: LD_INT 2
65114: ARRAY
65115: OR
65116: PUSH
65117: NOP4
65121: PUSH
65122: NOP4
65126: ARRAY
65127: PPUSH
65128: LD_INT 1
65130: PPUSH
65131: NOP4
65135: NOT
65136: OR
65137: PUSH
65138: NOP4
65142: PUSH
65143: NOP4
65147: ARRAY
65148: OR
65149: IFFALSE 65153
// continue ;
65151: GO 65070
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
65153: NOP4
65157: PUSH
65158: NOP4
65162: PUSH
65163: NOP4
65167: ARRAY
65168: PPUSH
65169: LD_INT 25
65171: PUSH
65172: LD_INT 4
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 50
65181: PUSH
65182: EMPTY
65183: LIST
65184: PUSH
65185: LD_INT 3
65187: PUSH
65188: LD_INT 60
65190: PUSH
65191: EMPTY
65192: LIST
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: LIST
65202: PPUSH
65203: NOP4
65207: PUSH
65208: NOP4
65212: PUSH
65213: NOP4
65217: ARRAY
65218: DIFF
65219: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65220: NOP4
65224: PUSH
65225: NOP4
65229: PUSH
65230: NOP4
65234: ARRAY
65235: PPUSH
65236: LD_INT 2
65238: PUSH
65239: LD_INT 30
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 30
65251: PUSH
65252: LD_INT 1
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: LIST
65263: PPUSH
65264: NOP4
65268: ST_TO_ADDR
// if not tmp or not dep then
65269: NOP4
65273: NOT
65274: PUSH
65275: NOP4
65279: NOT
65280: OR
65281: IFFALSE 65285
// continue ;
65283: GO 65070
// side := GetSide ( tmp [ 1 ] ) ;
65285: NOP4
65289: PUSH
65290: NOP4
65294: PUSH
65295: LD_INT 1
65297: ARRAY
65298: PPUSH
65299: NOP4
65303: ST_TO_ADDR
// dep := dep [ 1 ] ;
65304: NOP4
65308: PUSH
65309: NOP4
65313: PUSH
65314: LD_INT 1
65316: ARRAY
65317: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
65318: NOP4
65322: PUSH
65323: NOP4
65327: PUSH
65328: NOP4
65332: ARRAY
65333: PPUSH
65334: LD_INT 22
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 25
65346: PUSH
65347: LD_INT 12
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PPUSH
65358: NOP4
65362: PUSH
65363: LD_INT 22
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 25
65375: PUSH
65376: LD_INT 12
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 91
65385: PUSH
65386: NOP4
65390: PUSH
65391: LD_INT 20
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: LIST
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: LIST
65403: PPUSH
65404: NOP4
65408: UNION
65409: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
65410: NOP4
65414: PUSH
65415: NOP4
65419: PUSH
65420: NOP4
65424: ARRAY
65425: PPUSH
65426: LD_INT 81
65428: PUSH
65429: NOP4
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PPUSH
65438: NOP4
65442: ST_TO_ADDR
// if not apes or danger_at_area then
65443: NOP4
65447: NOT
65448: PUSH
65449: NOP4
65453: OR
65454: IFFALSE 65504
// begin if mc_taming [ i ] then
65456: NOP4
65460: PUSH
65461: NOP4
65465: ARRAY
65466: IFFALSE 65502
// begin MC_Reset ( i , 121 ) ;
65468: NOP4
65472: PPUSH
65473: LD_INT 121
65475: PPUSH
65476: NOP4
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65480: NOP4
65484: PUSH
65485: NOP4
65489: PPUSH
65490: NOP4
65494: PPUSH
65495: EMPTY
65496: PPUSH
65497: NOP4
65501: ST_TO_ADDR
// end ; continue ;
65502: GO 65070
// end ; for j in tmp do
65504: NOP4
65508: PUSH
65509: NOP4
65513: PUSH
65514: FOR_IN
65515: IFFALSE 65851
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
65517: NOP4
65521: PUSH
65522: NOP4
65526: PUSH
65527: NOP4
65531: ARRAY
65532: IN
65533: NOT
65534: PUSH
65535: NOP4
65539: PUSH
65540: NOP4
65544: ARRAY
65545: PUSH
65546: LD_INT 3
65548: LESS
65549: AND
65550: IFFALSE 65608
// begin SetTag ( j , 121 ) ;
65552: NOP4
65556: PPUSH
65557: LD_INT 121
65559: PPUSH
65560: NOP4
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
65564: NOP4
65568: PUSH
65569: NOP4
65573: PPUSH
65574: NOP4
65578: PUSH
65579: NOP4
65583: PUSH
65584: NOP4
65588: ARRAY
65589: PUSH
65590: LD_INT 1
65592: PLUS
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PPUSH
65598: NOP4
65602: PPUSH
65603: NOP4
65607: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
65608: NOP4
65612: PUSH
65613: NOP4
65617: PUSH
65618: NOP4
65622: ARRAY
65623: IN
65624: IFFALSE 65849
// begin if GetClass ( j ) <> 4 then
65626: NOP4
65630: PPUSH
65631: NOP4
65635: PUSH
65636: LD_INT 4
65638: NONEQUAL
65639: IFFALSE 65692
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
65641: NOP4
65645: PUSH
65646: NOP4
65650: PPUSH
65651: NOP4
65655: PPUSH
65656: NOP4
65660: PUSH
65661: NOP4
65665: ARRAY
65666: PUSH
65667: NOP4
65671: DIFF
65672: PPUSH
65673: NOP4
65677: ST_TO_ADDR
// SetTag ( j , 0 ) ;
65678: NOP4
65682: PPUSH
65683: LD_INT 0
65685: PPUSH
65686: NOP4
// continue ;
65690: GO 65514
// end ; if IsInUnit ( j ) then
65692: NOP4
65696: PPUSH
65697: NOP4
65701: IFFALSE 65712
// ComExitBuilding ( j ) ;
65703: NOP4
65707: PPUSH
65708: NOP4
// ape := NearestUnitToUnit ( apes , j ) ;
65712: NOP4
65716: PUSH
65717: NOP4
65721: PPUSH
65722: NOP4
65726: PPUSH
65727: NOP4
65731: ST_TO_ADDR
// if not ape then
65732: NOP4
65736: NOT
65737: IFFALSE 65741
// break ;
65739: GO 65851
// x := GetX ( ape ) ;
65741: NOP4
65745: PUSH
65746: NOP4
65750: PPUSH
65751: NOP4
65755: ST_TO_ADDR
// y := GetY ( ape ) ;
65756: NOP4
65760: PUSH
65761: NOP4
65765: PPUSH
65766: NOP4
65770: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
65771: NOP4
65775: PPUSH
65776: NOP4
65780: PPUSH
65781: NOP4
65785: NOT
65786: PUSH
65787: NOP4
65791: PPUSH
65792: NOP4
65796: PPUSH
65797: NOP4
65801: PPUSH
65802: LD_INT 20
65804: PPUSH
65805: NOP4
65809: PUSH
65810: LD_INT 4
65812: ARRAY
65813: OR
65814: IFFALSE 65818
// break ;
65816: GO 65851
// if not HasTask ( j ) then
65818: NOP4
65822: PPUSH
65823: NOP4
65827: NOT
65828: IFFALSE 65849
// ComTameXY ( j , x , y ) ;
65830: NOP4
65834: PPUSH
65835: NOP4
65839: PPUSH
65840: NOP4
65844: PPUSH
65845: NOP4
// end ; end ;
65849: GO 65514
65851: POP
65852: POP
// end ;
65853: GO 65070
65855: POP
65856: POP
// end ;
65857: LD_VAR 0 1
65861: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
65862: LD_INT 0
65864: PPUSH
65865: PPUSH
65866: PPUSH
65867: PPUSH
65868: PPUSH
65869: PPUSH
65870: PPUSH
65871: PPUSH
// if not mc_bases then
65872: NOP4
65876: NOT
65877: IFFALSE 65881
// exit ;
65879: GO 66507
// for i = 1 to mc_bases do
65881: NOP4
65885: PUSH
65886: DOUBLE
65887: LD_INT 1
65889: DEC
65890: ST_TO_ADDR
65891: NOP4
65895: PUSH
65896: FOR_TO
65897: IFFALSE 66505
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
65899: NOP4
65903: PUSH
65904: NOP4
65908: ARRAY
65909: NOT
65910: PUSH
65911: NOP4
65915: PUSH
65916: NOP4
65920: ARRAY
65921: PPUSH
65922: LD_INT 25
65924: PUSH
65925: LD_INT 12
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PPUSH
65932: NOP4
65936: NOT
65937: OR
65938: IFFALSE 65942
// continue ;
65940: GO 65896
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
65942: NOP4
65946: PUSH
65947: NOP4
65951: PUSH
65952: NOP4
65956: ARRAY
65957: PUSH
65958: LD_INT 1
65960: ARRAY
65961: PPUSH
65962: NOP4
65966: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
65967: NOP4
65971: PPUSH
65972: LD_INT 2
65974: PPUSH
65975: NOP4
65979: IFFALSE 66232
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
65981: NOP4
65985: PUSH
65986: NOP4
65990: PUSH
65991: NOP4
65995: ARRAY
65996: PPUSH
65997: LD_INT 25
65999: PUSH
66000: LD_INT 16
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PPUSH
66007: NOP4
66011: ST_TO_ADDR
// if tmp < 6 then
66012: NOP4
66016: PUSH
66017: LD_INT 6
66019: LESS
66020: IFFALSE 66232
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66022: NOP4
66026: PUSH
66027: NOP4
66031: PUSH
66032: NOP4
66036: ARRAY
66037: PPUSH
66038: LD_INT 2
66040: PUSH
66041: LD_INT 30
66043: PUSH
66044: LD_INT 0
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 30
66053: PUSH
66054: LD_INT 1
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: LIST
66065: PPUSH
66066: NOP4
66070: ST_TO_ADDR
// if depot then
66071: NOP4
66075: IFFALSE 66232
// begin selected := 0 ;
66077: NOP4
66081: PUSH
66082: LD_INT 0
66084: ST_TO_ADDR
// for j in depot do
66085: NOP4
66089: PUSH
66090: NOP4
66094: PUSH
66095: FOR_IN
66096: IFFALSE 66127
// begin if UnitsInside ( j ) < 6 then
66098: NOP4
66102: PPUSH
66103: NOP4
66107: PUSH
66108: LD_INT 6
66110: LESS
66111: IFFALSE 66125
// begin selected := j ;
66113: NOP4
66117: PUSH
66118: NOP4
66122: ST_TO_ADDR
// break ;
66123: GO 66127
// end ; end ;
66125: GO 66095
66127: POP
66128: POP
// if selected then
66129: NOP4
66133: IFFALSE 66232
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
66135: NOP4
66139: PUSH
66140: NOP4
66144: PUSH
66145: NOP4
66149: ARRAY
66150: PPUSH
66151: LD_INT 25
66153: PUSH
66154: LD_INT 12
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PPUSH
66161: NOP4
66165: PUSH
66166: FOR_IN
66167: IFFALSE 66230
// if not HasTask ( j ) then
66169: NOP4
66173: PPUSH
66174: NOP4
66178: NOT
66179: IFFALSE 66228
// begin if not IsInUnit ( j ) then
66181: NOP4
66185: PPUSH
66186: NOP4
66190: NOT
66191: IFFALSE 66207
// ComEnterUnit ( j , selected ) ;
66193: NOP4
66197: PPUSH
66198: NOP4
66202: PPUSH
66203: NOP4
// AddComChangeProfession ( j , 16 ) ;
66207: NOP4
66211: PPUSH
66212: LD_INT 16
66214: PPUSH
66215: NOP4
// AddComExitBuilding ( j ) ;
66219: NOP4
66223: PPUSH
66224: NOP4
// end ;
66228: GO 66166
66230: POP
66231: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
66232: NOP4
66236: PPUSH
66237: LD_INT 11
66239: PPUSH
66240: NOP4
66244: IFFALSE 66503
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
66246: NOP4
66250: PUSH
66251: NOP4
66255: PUSH
66256: NOP4
66260: ARRAY
66261: PPUSH
66262: LD_INT 25
66264: PUSH
66265: LD_INT 16
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PPUSH
66272: NOP4
66276: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
66277: NOP4
66281: PUSH
66282: LD_INT 6
66284: GREATEREQUAL
66285: PUSH
66286: NOP4
66290: PPUSH
66291: LD_INT 2
66293: PPUSH
66294: NOP4
66298: NOT
66299: OR
66300: IFFALSE 66503
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
66302: NOP4
66306: PUSH
66307: NOP4
66311: PUSH
66312: NOP4
66316: ARRAY
66317: PPUSH
66318: LD_INT 2
66320: PUSH
66321: LD_INT 30
66323: PUSH
66324: LD_INT 4
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 30
66333: PUSH
66334: LD_INT 5
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: LIST
66345: PPUSH
66346: NOP4
66350: ST_TO_ADDR
// if barracks then
66351: NOP4
66355: IFFALSE 66503
// begin selected := 0 ;
66357: NOP4
66361: PUSH
66362: LD_INT 0
66364: ST_TO_ADDR
// for j in barracks do
66365: NOP4
66369: PUSH
66370: NOP4
66374: PUSH
66375: FOR_IN
66376: IFFALSE 66407
// begin if UnitsInside ( j ) < 6 then
66378: NOP4
66382: PPUSH
66383: NOP4
66387: PUSH
66388: LD_INT 6
66390: LESS
66391: IFFALSE 66405
// begin selected := j ;
66393: NOP4
66397: PUSH
66398: NOP4
66402: ST_TO_ADDR
// break ;
66403: GO 66407
// end ; end ;
66405: GO 66375
66407: POP
66408: POP
// if selected then
66409: NOP4
66413: IFFALSE 66503
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
66415: NOP4
66419: PUSH
66420: NOP4
66424: PUSH
66425: NOP4
66429: ARRAY
66430: PPUSH
66431: LD_INT 25
66433: PUSH
66434: LD_INT 12
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PPUSH
66441: NOP4
66445: PUSH
66446: FOR_IN
66447: IFFALSE 66501
// if not IsInUnit ( j ) and not HasTask ( j ) then
66449: NOP4
66453: PPUSH
66454: NOP4
66458: NOT
66459: PUSH
66460: NOP4
66464: PPUSH
66465: NOP4
66469: NOT
66470: AND
66471: IFFALSE 66499
// begin ComEnterUnit ( j , selected ) ;
66473: NOP4
66477: PPUSH
66478: NOP4
66482: PPUSH
66483: NOP4
// AddComChangeProfession ( j , 15 ) ;
66487: NOP4
66491: PPUSH
66492: LD_INT 15
66494: PPUSH
66495: NOP4
// end ;
66499: GO 66446
66501: POP
66502: POP
// end ; end ; end ; end ; end ;
66503: GO 65896
66505: POP
66506: POP
// end ;
66507: LD_VAR 0 1
66511: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
66512: LD_INT 0
66514: PPUSH
66515: PPUSH
66516: PPUSH
66517: PPUSH
// if not mc_bases then
66518: NOP4
66522: NOT
66523: IFFALSE 66527
// exit ;
66525: GO 66705
// for i = 1 to mc_bases do
66527: NOP4
66531: PUSH
66532: DOUBLE
66533: LD_INT 1
66535: DEC
66536: ST_TO_ADDR
66537: NOP4
66541: PUSH
66542: FOR_TO
66543: IFFALSE 66703
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
66545: NOP4
66549: PUSH
66550: NOP4
66554: PUSH
66555: NOP4
66559: ARRAY
66560: PPUSH
66561: LD_INT 25
66563: PUSH
66564: LD_INT 9
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PPUSH
66571: NOP4
66575: ST_TO_ADDR
// if not tmp then
66576: NOP4
66580: NOT
66581: IFFALSE 66585
// continue ;
66583: GO 66542
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
66585: NOP4
66589: PUSH
66590: NOP4
66594: ARRAY
66595: PPUSH
66596: LD_INT 29
66598: PPUSH
66599: NOP4
66603: NOT
66604: PUSH
66605: NOP4
66609: PUSH
66610: NOP4
66614: ARRAY
66615: PPUSH
66616: LD_INT 28
66618: PPUSH
66619: NOP4
66623: NOT
66624: AND
66625: IFFALSE 66629
// continue ;
66627: GO 66542
// for j in tmp do
66629: NOP4
66633: PUSH
66634: NOP4
66638: PUSH
66639: FOR_IN
66640: IFFALSE 66699
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
66642: NOP4
66646: PUSH
66647: NOP4
66651: PUSH
66652: NOP4
66656: ARRAY
66657: PUSH
66658: LD_INT 1
66660: ARRAY
66661: IN
66662: NOT
66663: PUSH
66664: NOP4
66668: PUSH
66669: NOP4
66673: PUSH
66674: NOP4
66678: ARRAY
66679: PUSH
66680: LD_INT 2
66682: ARRAY
66683: IN
66684: NOT
66685: AND
66686: IFFALSE 66697
// ComSpaceTimeShoot ( j ) ;
66688: NOP4
66692: PPUSH
66693: NOP4
66697: GO 66639
66699: POP
66700: POP
// end ;
66701: GO 66542
66703: POP
66704: POP
// end ;
66705: LD_VAR 0 1
66709: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
66710: LD_INT 0
66712: PPUSH
66713: PPUSH
66714: PPUSH
66715: PPUSH
66716: PPUSH
66717: PPUSH
66718: PPUSH
66719: PPUSH
66720: PPUSH
// if not mc_bases then
66721: NOP4
66725: NOT
66726: IFFALSE 66730
// exit ;
66728: GO 67352
// for i = 1 to mc_bases do
66730: NOP4
66734: PUSH
66735: DOUBLE
66736: LD_INT 1
66738: DEC
66739: ST_TO_ADDR
66740: NOP4
66744: PUSH
66745: FOR_TO
66746: IFFALSE 67350
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
66748: NOP4
66752: PUSH
66753: NOP4
66757: ARRAY
66758: NOT
66759: PUSH
66760: LD_INT 38
66762: PPUSH
66763: NOP4
66767: PUSH
66768: NOP4
66772: ARRAY
66773: PPUSH
66774: NOP4
66778: PUSH
66779: LD_INT 2
66781: NONEQUAL
66782: OR
66783: IFFALSE 66787
// continue ;
66785: GO 66745
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
66787: NOP4
66791: PUSH
66792: NOP4
66796: PUSH
66797: NOP4
66801: ARRAY
66802: PPUSH
66803: LD_INT 30
66805: PUSH
66806: LD_INT 34
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PPUSH
66813: NOP4
66817: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
66818: NOP4
66822: PUSH
66823: NOP4
66827: PUSH
66828: NOP4
66832: ARRAY
66833: PPUSH
66834: LD_INT 25
66836: PUSH
66837: LD_INT 4
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PPUSH
66844: NOP4
66848: PPUSH
66849: LD_INT 0
66851: PPUSH
66852: NOP4
66856: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
66857: NOP4
66861: NOT
66862: PUSH
66863: NOP4
66867: NOT
66868: OR
66869: PUSH
66870: NOP4
66874: PUSH
66875: NOP4
66879: ARRAY
66880: PPUSH
66881: LD_INT 124
66883: PPUSH
66884: NOP4
66888: OR
66889: IFFALSE 66893
// continue ;
66891: GO 66745
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
66893: NOP4
66897: PUSH
66898: NOP4
66902: ARRAY
66903: PUSH
66904: NOP4
66908: PUSH
66909: NOP4
66913: ARRAY
66914: LESS
66915: PUSH
66916: NOP4
66920: PUSH
66921: NOP4
66925: ARRAY
66926: PUSH
66927: NOP4
66931: LESS
66932: AND
66933: IFFALSE 67348
// begin tmp := sci [ 1 ] ;
66935: NOP4
66939: PUSH
66940: NOP4
66944: PUSH
66945: LD_INT 1
66947: ARRAY
66948: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
66949: NOP4
66953: PPUSH
66954: LD_INT 124
66956: PPUSH
66957: NOP4
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
66961: NOP4
66965: PUSH
66966: DOUBLE
66967: NOP4
66971: PUSH
66972: NOP4
66976: ARRAY
66977: INC
66978: ST_TO_ADDR
66979: NOP4
66983: PUSH
66984: NOP4
66988: ARRAY
66989: PUSH
66990: FOR_DOWNTO
66991: IFFALSE 67334
// begin if IsInUnit ( tmp ) then
66993: NOP4
66997: PPUSH
66998: NOP4
67002: IFFALSE 67013
// ComExitBuilding ( tmp ) ;
67004: NOP4
67008: PPUSH
67009: NOP4
// repeat wait ( 0 0$1 ) ;
67013: LD_INT 35
67015: PPUSH
67016: NOP4
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
67020: NOP4
67024: PPUSH
67025: NOP4
67029: NOT
67030: PUSH
67031: NOP4
67035: PPUSH
67036: NOP4
67040: NOT
67041: AND
67042: IFFALSE 67013
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
67044: NOP4
67048: PUSH
67049: NOP4
67053: PPUSH
67054: NOP4
67058: PUSH
67059: NOP4
67063: PPUSH
67064: NOP4
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
67073: LD_INT 35
67075: PPUSH
67076: NOP4
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
67080: NOP4
67084: PUSH
67085: NOP4
67089: PUSH
67090: NOP4
67094: ARRAY
67095: PUSH
67096: NOP4
67100: ARRAY
67101: PUSH
67102: LD_INT 1
67104: ARRAY
67105: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
67106: NOP4
67110: PUSH
67111: NOP4
67115: PUSH
67116: NOP4
67120: ARRAY
67121: PUSH
67122: NOP4
67126: ARRAY
67127: PUSH
67128: LD_INT 2
67130: ARRAY
67131: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
67132: NOP4
67136: PPUSH
67137: LD_INT 10
67139: PPUSH
67140: NOP4
67144: PUSH
67145: LD_INT 4
67147: ARRAY
67148: IFFALSE 67186
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
67150: NOP4
67154: PPUSH
67155: NOP4
67159: PUSH
67160: LD_INT 1
67162: ARRAY
67163: PPUSH
67164: NOP4
67168: PUSH
67169: LD_INT 2
67171: ARRAY
67172: PPUSH
67173: NOP4
// wait ( 0 0$10 ) ;
67177: LD_INT 350
67179: PPUSH
67180: NOP4
// end else
67184: GO 67212
// begin ComMoveXY ( tmp , x , y ) ;
67186: NOP4
67190: PPUSH
67191: NOP4
67195: PPUSH
67196: NOP4
67200: PPUSH
67201: NOP4
// wait ( 0 0$3 ) ;
67205: LD_INT 105
67207: PPUSH
67208: NOP4
// end ; until IsAt ( tmp , x , y ) ;
67212: NOP4
67216: PPUSH
67217: NOP4
67221: PPUSH
67222: NOP4
67226: PPUSH
67227: NOP4
67231: IFFALSE 67073
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
67233: NOP4
67237: PPUSH
67238: NOP4
67242: PPUSH
67243: NOP4
67247: PPUSH
67248: NOP4
67252: PUSH
67253: NOP4
67257: ARRAY
67258: PPUSH
67259: NOP4
// repeat wait ( 0 0$1 ) ;
67263: LD_INT 35
67265: PPUSH
67266: NOP4
// until not HasTask ( tmp ) ;
67270: NOP4
67274: PPUSH
67275: NOP4
67279: NOT
67280: IFFALSE 67263
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
67282: NOP4
67286: PUSH
67287: NOP4
67291: PPUSH
67292: NOP4
67296: PUSH
67297: NOP4
67301: PUSH
67302: NOP4
67306: ARRAY
67307: PUSH
67308: LD_INT 1
67310: PLUS
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PPUSH
67316: NOP4
67320: PUSH
67321: NOP4
67325: ARRAY
67326: PPUSH
67327: NOP4
67331: ST_TO_ADDR
// end ;
67332: GO 66990
67334: POP
67335: POP
// MC_Reset ( i , 124 ) ;
67336: NOP4
67340: PPUSH
67341: LD_INT 124
67343: PPUSH
67344: NOP4
// end ; end ;
67348: GO 66745
67350: POP
67351: POP
// end ;
67352: LD_VAR 0 1
67356: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
67357: LD_INT 0
67359: PPUSH
67360: PPUSH
67361: PPUSH
// if not mc_bases then
67362: NOP4
67366: NOT
67367: IFFALSE 67371
// exit ;
67369: GO 67977
// for i = 1 to mc_bases do
67371: NOP4
67375: PUSH
67376: DOUBLE
67377: LD_INT 1
67379: DEC
67380: ST_TO_ADDR
67381: NOP4
67385: PUSH
67386: FOR_TO
67387: IFFALSE 67975
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
67389: NOP4
67393: PUSH
67394: NOP4
67398: PUSH
67399: NOP4
67403: ARRAY
67404: PPUSH
67405: LD_INT 25
67407: PUSH
67408: LD_INT 4
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PPUSH
67415: NOP4
67419: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
67420: NOP4
67424: NOT
67425: PUSH
67426: NOP4
67430: PUSH
67431: NOP4
67435: ARRAY
67436: NOT
67437: OR
67438: PUSH
67439: NOP4
67443: PUSH
67444: NOP4
67448: ARRAY
67449: PPUSH
67450: LD_INT 2
67452: PUSH
67453: LD_INT 30
67455: PUSH
67456: LD_INT 0
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 30
67465: PUSH
67466: LD_INT 1
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: LIST
67477: PPUSH
67478: NOP4
67482: NOT
67483: OR
67484: IFFALSE 67534
// begin if mc_deposits_finder [ i ] then
67486: NOP4
67490: PUSH
67491: NOP4
67495: ARRAY
67496: IFFALSE 67532
// begin MC_Reset ( i , 125 ) ;
67498: NOP4
67502: PPUSH
67503: LD_INT 125
67505: PPUSH
67506: NOP4
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
67510: NOP4
67514: PUSH
67515: NOP4
67519: PPUSH
67520: NOP4
67524: PPUSH
67525: EMPTY
67526: PPUSH
67527: NOP4
67531: ST_TO_ADDR
// end ; continue ;
67532: GO 67386
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
67534: NOP4
67538: PUSH
67539: NOP4
67543: ARRAY
67544: PUSH
67545: LD_INT 1
67547: ARRAY
67548: PUSH
67549: LD_INT 3
67551: ARRAY
67552: PUSH
67553: LD_INT 1
67555: EQUAL
67556: PUSH
67557: LD_INT 20
67559: PPUSH
67560: NOP4
67564: PUSH
67565: NOP4
67569: ARRAY
67570: PPUSH
67571: NOP4
67575: PUSH
67576: LD_INT 2
67578: NONEQUAL
67579: AND
67580: IFFALSE 67630
// begin if mc_deposits_finder [ i ] then
67582: NOP4
67586: PUSH
67587: NOP4
67591: ARRAY
67592: IFFALSE 67628
// begin MC_Reset ( i , 125 ) ;
67594: NOP4
67598: PPUSH
67599: LD_INT 125
67601: PPUSH
67602: NOP4
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
67606: NOP4
67610: PUSH
67611: NOP4
67615: PPUSH
67616: NOP4
67620: PPUSH
67621: EMPTY
67622: PPUSH
67623: NOP4
67627: ST_TO_ADDR
// end ; continue ;
67628: GO 67386
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
67630: NOP4
67634: PUSH
67635: NOP4
67639: ARRAY
67640: PUSH
67641: LD_INT 1
67643: ARRAY
67644: PUSH
67645: LD_INT 1
67647: ARRAY
67648: PPUSH
67649: NOP4
67653: PUSH
67654: NOP4
67658: ARRAY
67659: PUSH
67660: LD_INT 1
67662: ARRAY
67663: PUSH
67664: LD_INT 2
67666: ARRAY
67667: PPUSH
67668: NOP4
67672: PUSH
67673: NOP4
67677: ARRAY
67678: PPUSH
67679: NOP4
67683: IFFALSE 67726
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
67685: NOP4
67689: PUSH
67690: NOP4
67694: PPUSH
67695: NOP4
67699: PPUSH
67700: NOP4
67704: PUSH
67705: NOP4
67709: ARRAY
67710: PPUSH
67711: LD_INT 1
67713: PPUSH
67714: NOP4
67718: PPUSH
67719: NOP4
67723: ST_TO_ADDR
67724: GO 67973
// begin if not mc_deposits_finder [ i ] then
67726: NOP4
67730: PUSH
67731: NOP4
67735: ARRAY
67736: NOT
67737: IFFALSE 67789
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
67739: NOP4
67743: PUSH
67744: NOP4
67748: PPUSH
67749: NOP4
67753: PPUSH
67754: NOP4
67758: PUSH
67759: LD_INT 1
67761: ARRAY
67762: PUSH
67763: EMPTY
67764: LIST
67765: PPUSH
67766: NOP4
67770: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
67771: NOP4
67775: PUSH
67776: LD_INT 1
67778: ARRAY
67779: PPUSH
67780: LD_INT 125
67782: PPUSH
67783: NOP4
// end else
67787: GO 67973
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
67789: NOP4
67793: PUSH
67794: NOP4
67798: ARRAY
67799: PUSH
67800: LD_INT 1
67802: ARRAY
67803: PPUSH
67804: NOP4
67808: IFFALSE 67831
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
67810: NOP4
67814: PUSH
67815: NOP4
67819: ARRAY
67820: PUSH
67821: LD_INT 1
67823: ARRAY
67824: PPUSH
67825: NOP4
67829: GO 67973
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
67831: NOP4
67835: PUSH
67836: NOP4
67840: ARRAY
67841: PUSH
67842: LD_INT 1
67844: ARRAY
67845: PPUSH
67846: NOP4
67850: NOT
67851: PUSH
67852: NOP4
67856: PUSH
67857: NOP4
67861: ARRAY
67862: PUSH
67863: LD_INT 1
67865: ARRAY
67866: PPUSH
67867: NOP4
67871: PUSH
67872: NOP4
67876: ARRAY
67877: PUSH
67878: LD_INT 1
67880: ARRAY
67881: PUSH
67882: LD_INT 1
67884: ARRAY
67885: PPUSH
67886: NOP4
67890: PUSH
67891: NOP4
67895: ARRAY
67896: PUSH
67897: LD_INT 1
67899: ARRAY
67900: PUSH
67901: LD_INT 2
67903: ARRAY
67904: PPUSH
67905: NOP4
67909: PUSH
67910: LD_INT 6
67912: GREATER
67913: AND
67914: IFFALSE 67973
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
67916: NOP4
67920: PUSH
67921: NOP4
67925: ARRAY
67926: PUSH
67927: LD_INT 1
67929: ARRAY
67930: PPUSH
67931: NOP4
67935: PUSH
67936: NOP4
67940: ARRAY
67941: PUSH
67942: LD_INT 1
67944: ARRAY
67945: PUSH
67946: LD_INT 1
67948: ARRAY
67949: PPUSH
67950: NOP4
67954: PUSH
67955: NOP4
67959: ARRAY
67960: PUSH
67961: LD_INT 1
67963: ARRAY
67964: PUSH
67965: LD_INT 2
67967: ARRAY
67968: PPUSH
67969: NOP4
// end ; end ; end ;
67973: GO 67386
67975: POP
67976: POP
// end ;
67977: LD_VAR 0 1
67981: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
67982: LD_INT 0
67984: PPUSH
67985: PPUSH
67986: PPUSH
67987: PPUSH
67988: PPUSH
67989: PPUSH
67990: PPUSH
67991: PPUSH
67992: PPUSH
67993: PPUSH
67994: PPUSH
// if not mc_bases then
67995: NOP4
67999: NOT
68000: IFFALSE 68004
// exit ;
68002: GO 68944
// for i = 1 to mc_bases do
68004: NOP4
68008: PUSH
68009: DOUBLE
68010: LD_INT 1
68012: DEC
68013: ST_TO_ADDR
68014: NOP4
68018: PUSH
68019: FOR_TO
68020: IFFALSE 68942
// begin if not mc_bases [ i ] or mc_scan [ i ] then
68022: NOP4
68026: PUSH
68027: NOP4
68031: ARRAY
68032: NOT
68033: PUSH
68034: NOP4
68038: PUSH
68039: NOP4
68043: ARRAY
68044: OR
68045: IFFALSE 68049
// continue ;
68047: GO 68019
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
68049: NOP4
68053: PUSH
68054: NOP4
68058: PUSH
68059: NOP4
68063: ARRAY
68064: PUSH
68065: LD_INT 1
68067: ARRAY
68068: PPUSH
68069: NOP4
68073: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
68074: NOP4
68078: PUSH
68079: LD_INT 3
68081: EQUAL
68082: PUSH
68083: NOP4
68087: PUSH
68088: NOP4
68092: ARRAY
68093: PUSH
68094: NOP4
68098: PUSH
68099: NOP4
68103: ARRAY
68104: UNION
68105: PPUSH
68106: LD_INT 33
68108: PUSH
68109: LD_INT 2
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PPUSH
68116: NOP4
68120: NOT
68121: OR
68122: IFFALSE 68126
// continue ;
68124: GO 68019
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
68126: NOP4
68130: PUSH
68131: NOP4
68135: PUSH
68136: NOP4
68140: ARRAY
68141: PPUSH
68142: LD_INT 30
68144: PUSH
68145: LD_INT 36
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PPUSH
68152: NOP4
68156: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
68157: NOP4
68161: PUSH
68162: NOP4
68166: PUSH
68167: NOP4
68171: ARRAY
68172: PPUSH
68173: LD_INT 34
68175: PUSH
68176: LD_INT 31
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PPUSH
68183: NOP4
68187: ST_TO_ADDR
// if not cts and not mcts then
68188: NOP4
68192: NOT
68193: PUSH
68194: NOP4
68198: NOT
68199: AND
68200: IFFALSE 68204
// continue ;
68202: GO 68019
// x := cts ;
68204: NOP4
68208: PUSH
68209: NOP4
68213: ST_TO_ADDR
// if not x then
68214: NOP4
68218: NOT
68219: IFFALSE 68231
// x := mcts ;
68221: NOP4
68225: PUSH
68226: NOP4
68230: ST_TO_ADDR
// if not x then
68231: NOP4
68235: NOT
68236: IFFALSE 68240
// continue ;
68238: GO 68019
// if mc_remote_driver [ i ] then
68240: NOP4
68244: PUSH
68245: NOP4
68249: ARRAY
68250: IFFALSE 68637
// for j in mc_remote_driver [ i ] do
68252: NOP4
68256: PUSH
68257: NOP4
68261: PUSH
68262: NOP4
68266: ARRAY
68267: PUSH
68268: FOR_IN
68269: IFFALSE 68635
// begin if GetClass ( j ) <> 3 then
68271: NOP4
68275: PPUSH
68276: NOP4
68280: PUSH
68281: LD_INT 3
68283: NONEQUAL
68284: IFFALSE 68337
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
68286: NOP4
68290: PUSH
68291: NOP4
68295: PPUSH
68296: NOP4
68300: PPUSH
68301: NOP4
68305: PUSH
68306: NOP4
68310: ARRAY
68311: PUSH
68312: NOP4
68316: DIFF
68317: PPUSH
68318: NOP4
68322: ST_TO_ADDR
// SetTag ( j , 0 ) ;
68323: NOP4
68327: PPUSH
68328: LD_INT 0
68330: PPUSH
68331: NOP4
// continue ;
68335: GO 68268
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
68337: NOP4
68341: PUSH
68342: NOP4
68346: ARRAY
68347: PPUSH
68348: LD_INT 34
68350: PUSH
68351: LD_INT 31
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 58
68360: PUSH
68361: EMPTY
68362: LIST
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PPUSH
68368: NOP4
68372: PUSH
68373: NOP4
68377: PPUSH
68378: NOP4
68382: NOT
68383: AND
68384: IFFALSE 68455
// begin if IsInUnit ( j ) then
68386: NOP4
68390: PPUSH
68391: NOP4
68395: IFFALSE 68406
// ComExitBuilding ( j ) ;
68397: NOP4
68401: PPUSH
68402: NOP4
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
68406: NOP4
68410: PPUSH
68411: NOP4
68415: PUSH
68416: NOP4
68420: ARRAY
68421: PPUSH
68422: LD_INT 34
68424: PUSH
68425: LD_INT 31
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 58
68434: PUSH
68435: EMPTY
68436: LIST
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PPUSH
68442: NOP4
68446: PUSH
68447: LD_INT 1
68449: ARRAY
68450: PPUSH
68451: NOP4
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
68455: NOP4
68459: PPUSH
68460: NOP4
68464: NOT
68465: PUSH
68466: NOP4
68470: PPUSH
68471: NOP4
68475: PPUSH
68476: NOP4
68480: PUSH
68481: LD_INT 36
68483: NONEQUAL
68484: PUSH
68485: NOP4
68489: PPUSH
68490: NOP4
68494: NOT
68495: AND
68496: OR
68497: IFFALSE 68633
// begin if IsInUnit ( j ) then
68499: NOP4
68503: PPUSH
68504: NOP4
68508: IFFALSE 68519
// ComExitBuilding ( j ) ;
68510: NOP4
68514: PPUSH
68515: NOP4
// ct := 0 ;
68519: NOP4
68523: PUSH
68524: LD_INT 0
68526: ST_TO_ADDR
// for k in x do
68527: NOP4
68531: PUSH
68532: NOP4
68536: PUSH
68537: FOR_IN
68538: IFFALSE 68611
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
68540: NOP4
68544: PPUSH
68545: NOP4
68549: PUSH
68550: LD_INT 31
68552: EQUAL
68553: PUSH
68554: NOP4
68558: PPUSH
68559: NOP4
68563: NOT
68564: AND
68565: PUSH
68566: NOP4
68570: PPUSH
68571: NOP4
68575: PUSH
68576: LD_INT 36
68578: EQUAL
68579: PUSH
68580: NOP4
68584: PPUSH
68585: NOP4
68589: PUSH
68590: LD_INT 3
68592: LESS
68593: AND
68594: OR
68595: IFFALSE 68609
// begin ct := k ;
68597: NOP4
68601: PUSH
68602: NOP4
68606: ST_TO_ADDR
// break ;
68607: GO 68611
// end ;
68609: GO 68537
68611: POP
68612: POP
// if ct then
68613: NOP4
68617: IFFALSE 68633
// ComEnterUnit ( j , ct ) ;
68619: NOP4
68623: PPUSH
68624: NOP4
68628: PPUSH
68629: NOP4
// end ; end ;
68633: GO 68268
68635: POP
68636: POP
// places := 0 ;
68637: NOP4
68641: PUSH
68642: LD_INT 0
68644: ST_TO_ADDR
// for j = 1 to x do
68645: NOP4
68649: PUSH
68650: DOUBLE
68651: LD_INT 1
68653: DEC
68654: ST_TO_ADDR
68655: NOP4
68659: PUSH
68660: FOR_TO
68661: IFFALSE 68737
// if GetWeapon ( x [ j ] ) = ar_control_tower then
68663: NOP4
68667: PUSH
68668: NOP4
68672: ARRAY
68673: PPUSH
68674: NOP4
68678: PUSH
68679: LD_INT 31
68681: EQUAL
68682: IFFALSE 68700
// places := places + 1 else
68684: NOP4
68688: PUSH
68689: NOP4
68693: PUSH
68694: LD_INT 1
68696: PLUS
68697: ST_TO_ADDR
68698: GO 68735
// if GetBType ( x [ j ] ) = b_control_tower then
68700: NOP4
68704: PUSH
68705: NOP4
68709: ARRAY
68710: PPUSH
68711: NOP4
68715: PUSH
68716: LD_INT 36
68718: EQUAL
68719: IFFALSE 68735
// places := places + 3 ;
68721: NOP4
68725: PUSH
68726: NOP4
68730: PUSH
68731: LD_INT 3
68733: PLUS
68734: ST_TO_ADDR
68735: GO 68660
68737: POP
68738: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
68739: NOP4
68743: PUSH
68744: LD_INT 0
68746: EQUAL
68747: PUSH
68748: NOP4
68752: PUSH
68753: NOP4
68757: PUSH
68758: NOP4
68762: ARRAY
68763: LESSEQUAL
68764: OR
68765: IFFALSE 68769
// continue ;
68767: GO 68019
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
68769: NOP4
68773: PUSH
68774: NOP4
68778: PUSH
68779: NOP4
68783: ARRAY
68784: PPUSH
68785: LD_INT 25
68787: PUSH
68788: LD_INT 3
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PPUSH
68795: NOP4
68799: PUSH
68800: NOP4
68804: PUSH
68805: NOP4
68809: ARRAY
68810: DIFF
68811: PPUSH
68812: LD_INT 3
68814: PPUSH
68815: NOP4
68819: ST_TO_ADDR
// for j in tmp do
68820: NOP4
68824: PUSH
68825: NOP4
68829: PUSH
68830: FOR_IN
68831: IFFALSE 68866
// if GetTag ( j ) > 0 then
68833: NOP4
68837: PPUSH
68838: NOP4
68842: PUSH
68843: LD_INT 0
68845: GREATER
68846: IFFALSE 68864
// tmp := tmp diff j ;
68848: NOP4
68852: PUSH
68853: NOP4
68857: PUSH
68858: NOP4
68862: DIFF
68863: ST_TO_ADDR
68864: GO 68830
68866: POP
68867: POP
// if not tmp then
68868: NOP4
68872: NOT
68873: IFFALSE 68877
// continue ;
68875: GO 68019
// if places then
68877: NOP4
68881: IFFALSE 68940
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
68883: NOP4
68887: PUSH
68888: NOP4
68892: PPUSH
68893: NOP4
68897: PPUSH
68898: NOP4
68902: PUSH
68903: NOP4
68907: ARRAY
68908: PUSH
68909: NOP4
68913: PUSH
68914: LD_INT 1
68916: ARRAY
68917: UNION
68918: PPUSH
68919: NOP4
68923: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
68924: NOP4
68928: PUSH
68929: LD_INT 1
68931: ARRAY
68932: PPUSH
68933: LD_INT 126
68935: PPUSH
68936: NOP4
// end ; end ;
68940: GO 68019
68942: POP
68943: POP
// end ;
68944: LD_VAR 0 1
68948: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
68949: LD_INT 0
68951: PPUSH
68952: PPUSH
68953: PPUSH
68954: PPUSH
68955: PPUSH
68956: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
68957: NOP4
68961: NOT
68962: PUSH
68963: NOP4
68967: NOT
68968: OR
68969: PUSH
68970: NOP4
68974: NOT
68975: OR
68976: PUSH
68977: NOP4
68981: PUSH
68982: LD_INT 1
68984: PUSH
68985: LD_INT 2
68987: PUSH
68988: LD_INT 3
68990: PUSH
68991: LD_INT 4
68993: PUSH
68994: LD_INT 5
68996: PUSH
68997: LD_INT 8
68999: PUSH
69000: LD_INT 9
69002: PUSH
69003: LD_INT 15
69005: PUSH
69006: LD_INT 16
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: IN
69020: NOT
69021: OR
69022: IFFALSE 69026
// exit ;
69024: GO 69926
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
69026: NOP4
69030: PUSH
69031: NOP4
69035: PPUSH
69036: LD_INT 21
69038: PUSH
69039: LD_INT 3
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 24
69048: PUSH
69049: LD_INT 250
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PPUSH
69060: NOP4
69064: ST_TO_ADDR
// case class of 1 , 15 :
69065: NOP4
69069: PUSH
69070: LD_INT 1
69072: DOUBLE
69073: EQUAL
69074: IFTRUE 69084
69076: LD_INT 15
69078: DOUBLE
69079: EQUAL
69080: IFTRUE 69084
69082: GO 69169
69084: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
69085: NOP4
69089: PUSH
69090: NOP4
69094: PPUSH
69095: LD_INT 2
69097: PUSH
69098: LD_INT 30
69100: PUSH
69101: LD_INT 32
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 30
69110: PUSH
69111: LD_INT 31
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: LIST
69122: PPUSH
69123: NOP4
69127: PUSH
69128: NOP4
69132: PPUSH
69133: LD_INT 2
69135: PUSH
69136: LD_INT 30
69138: PUSH
69139: LD_INT 4
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 30
69148: PUSH
69149: LD_INT 5
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: LIST
69160: PPUSH
69161: NOP4
69165: ADD
69166: ST_TO_ADDR
69167: GO 69415
69169: LD_INT 2
69171: DOUBLE
69172: EQUAL
69173: IFTRUE 69183
69175: LD_INT 16
69177: DOUBLE
69178: EQUAL
69179: IFTRUE 69183
69181: GO 69229
69183: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
69184: NOP4
69188: PUSH
69189: NOP4
69193: PPUSH
69194: LD_INT 2
69196: PUSH
69197: LD_INT 30
69199: PUSH
69200: LD_INT 0
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 30
69209: PUSH
69210: LD_INT 1
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: LIST
69221: PPUSH
69222: NOP4
69226: ST_TO_ADDR
69227: GO 69415
69229: LD_INT 3
69231: DOUBLE
69232: EQUAL
69233: IFTRUE 69237
69235: GO 69283
69237: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
69238: NOP4
69242: PUSH
69243: NOP4
69247: PPUSH
69248: LD_INT 2
69250: PUSH
69251: LD_INT 30
69253: PUSH
69254: LD_INT 2
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 30
69263: PUSH
69264: LD_INT 3
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: LIST
69275: PPUSH
69276: NOP4
69280: ST_TO_ADDR
69281: GO 69415
69283: LD_INT 4
69285: DOUBLE
69286: EQUAL
69287: IFTRUE 69291
69289: GO 69348
69291: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
69292: NOP4
69296: PUSH
69297: NOP4
69301: PPUSH
69302: LD_INT 2
69304: PUSH
69305: LD_INT 30
69307: PUSH
69308: LD_INT 6
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 30
69317: PUSH
69318: LD_INT 7
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 30
69327: PUSH
69328: LD_INT 8
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: PPUSH
69341: NOP4
69345: ST_TO_ADDR
69346: GO 69415
69348: LD_INT 5
69350: DOUBLE
69351: EQUAL
69352: IFTRUE 69368
69354: LD_INT 8
69356: DOUBLE
69357: EQUAL
69358: IFTRUE 69368
69360: LD_INT 9
69362: DOUBLE
69363: EQUAL
69364: IFTRUE 69368
69366: GO 69414
69368: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
69369: NOP4
69373: PUSH
69374: NOP4
69378: PPUSH
69379: LD_INT 2
69381: PUSH
69382: LD_INT 30
69384: PUSH
69385: LD_INT 4
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 30
69394: PUSH
69395: LD_INT 5
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: LIST
69406: PPUSH
69407: NOP4
69411: ST_TO_ADDR
69412: GO 69415
69414: POP
// if not tmp then
69415: NOP4
69419: NOT
69420: IFFALSE 69424
// exit ;
69422: GO 69926
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
69424: NOP4
69428: PUSH
69429: LD_INT 1
69431: PUSH
69432: LD_INT 15
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: IN
69439: PUSH
69440: NOP4
69444: PUSH
69445: NOP4
69449: ARRAY
69450: AND
69451: IFFALSE 69607
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
69453: NOP4
69457: PUSH
69458: NOP4
69462: PUSH
69463: NOP4
69467: ARRAY
69468: PUSH
69469: LD_INT 1
69471: ARRAY
69472: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
69473: NOP4
69477: PUSH
69478: NOP4
69482: PUSH
69483: NOP4
69487: ARRAY
69488: IN
69489: NOT
69490: IFFALSE 69605
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
69492: NOP4
69496: PUSH
69497: NOP4
69501: PPUSH
69502: NOP4
69506: PUSH
69507: NOP4
69511: PUSH
69512: NOP4
69516: ARRAY
69517: PUSH
69518: LD_INT 1
69520: PLUS
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PPUSH
69526: NOP4
69530: PPUSH
69531: NOP4
69535: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
69536: NOP4
69540: PUSH
69541: NOP4
69545: PPUSH
69546: NOP4
69550: PPUSH
69551: NOP4
69555: PUSH
69556: NOP4
69560: ARRAY
69561: PUSH
69562: NOP4
69566: DIFF
69567: PPUSH
69568: NOP4
69572: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
69573: NOP4
69577: PPUSH
69578: NOP4
69582: PUSH
69583: NOP4
69587: ARRAY
69588: PUSH
69589: NOP4
69593: PUSH
69594: NOP4
69598: ARRAY
69599: ARRAY
69600: PPUSH
69601: NOP4
// end ; exit ;
69605: GO 69926
// end ; if tmp > 1 then
69607: NOP4
69611: PUSH
69612: LD_INT 1
69614: GREATER
69615: IFFALSE 69719
// for i = 2 to tmp do
69617: NOP4
69621: PUSH
69622: DOUBLE
69623: LD_INT 2
69625: DEC
69626: ST_TO_ADDR
69627: NOP4
69631: PUSH
69632: FOR_TO
69633: IFFALSE 69717
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
69635: NOP4
69639: PUSH
69640: NOP4
69644: ARRAY
69645: PPUSH
69646: NOP4
69650: PUSH
69651: LD_INT 6
69653: EQUAL
69654: IFFALSE 69715
// begin x := tmp [ i ] ;
69656: NOP4
69660: PUSH
69661: NOP4
69665: PUSH
69666: NOP4
69670: ARRAY
69671: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
69672: NOP4
69676: PUSH
69677: NOP4
69681: PPUSH
69682: NOP4
69686: PPUSH
69687: NOP4
69691: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
69692: NOP4
69696: PUSH
69697: NOP4
69701: PPUSH
69702: LD_INT 1
69704: PPUSH
69705: NOP4
69709: PPUSH
69710: NOP4
69714: ST_TO_ADDR
// end ;
69715: GO 69632
69717: POP
69718: POP
// for i in tmp do
69719: NOP4
69723: PUSH
69724: NOP4
69728: PUSH
69729: FOR_IN
69730: IFFALSE 69799
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
69732: NOP4
69736: PPUSH
69737: NOP4
69741: PUSH
69742: LD_INT 6
69744: LESS
69745: PUSH
69746: NOP4
69750: PPUSH
69751: NOP4
69755: PUSH
69756: LD_INT 31
69758: PUSH
69759: LD_INT 32
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: IN
69766: NOT
69767: AND
69768: PUSH
69769: NOP4
69773: PPUSH
69774: NOP4
69778: PUSH
69779: LD_INT 0
69781: EQUAL
69782: OR
69783: IFFALSE 69797
// begin j := i ;
69785: NOP4
69789: PUSH
69790: NOP4
69794: ST_TO_ADDR
// break ;
69795: GO 69799
// end ; end ;
69797: GO 69729
69799: POP
69800: POP
// if j then
69801: NOP4
69805: IFFALSE 69823
// ComEnterUnit ( unit , j ) else
69807: NOP4
69811: PPUSH
69812: NOP4
69816: PPUSH
69817: NOP4
69821: GO 69926
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
69823: NOP4
69827: PUSH
69828: NOP4
69832: PPUSH
69833: LD_INT 2
69835: PUSH
69836: LD_INT 30
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 30
69848: PUSH
69849: LD_INT 1
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: LIST
69860: PPUSH
69861: NOP4
69865: ST_TO_ADDR
// if depot then
69866: NOP4
69870: IFFALSE 69926
// begin depot := NearestUnitToUnit ( depot , unit ) ;
69872: NOP4
69876: PUSH
69877: NOP4
69881: PPUSH
69882: NOP4
69886: PPUSH
69887: NOP4
69891: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
69892: NOP4
69896: PPUSH
69897: NOP4
69901: PPUSH
69902: NOP4
69906: PUSH
69907: LD_INT 10
69909: GREATER
69910: IFFALSE 69926
// ComStandNearbyBuilding ( unit , depot ) ;
69912: NOP4
69916: PPUSH
69917: NOP4
69921: PPUSH
69922: NOP4
// end ; end ; end ;
69926: LD_VAR 0 5
69930: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
69931: LD_INT 0
69933: PPUSH
69934: PPUSH
69935: PPUSH
69936: PPUSH
// if not mc_bases then
69937: NOP4
69941: NOT
69942: IFFALSE 69946
// exit ;
69944: GO 70185
// for i = 1 to mc_bases do
69946: NOP4
69950: PUSH
69951: DOUBLE
69952: LD_INT 1
69954: DEC
69955: ST_TO_ADDR
69956: NOP4
69960: PUSH
69961: FOR_TO
69962: IFFALSE 70183
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
69964: NOP4
69968: PUSH
69969: NOP4
69973: PUSH
69974: NOP4
69978: ARRAY
69979: PPUSH
69980: LD_INT 21
69982: PUSH
69983: LD_INT 1
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PPUSH
69990: NOP4
69994: PUSH
69995: NOP4
69999: PUSH
70000: NOP4
70004: ARRAY
70005: UNION
70006: ST_TO_ADDR
// if not tmp then
70007: NOP4
70011: NOT
70012: IFFALSE 70016
// continue ;
70014: GO 69961
// for j in tmp do
70016: NOP4
70020: PUSH
70021: NOP4
70025: PUSH
70026: FOR_IN
70027: IFFALSE 70179
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
70029: NOP4
70033: PPUSH
70034: NOP4
70038: NOT
70039: PUSH
70040: NOP4
70044: PPUSH
70045: NOP4
70049: NOT
70050: AND
70051: PUSH
70052: NOP4
70056: PPUSH
70057: NOP4
70061: NOT
70062: AND
70063: PUSH
70064: NOP4
70068: PPUSH
70069: NOP4
70073: NOT
70074: AND
70075: PUSH
70076: NOP4
70080: PUSH
70081: NOP4
70085: PUSH
70086: NOP4
70090: ARRAY
70091: PUSH
70092: LD_INT 1
70094: ARRAY
70095: IN
70096: NOT
70097: AND
70098: PUSH
70099: NOP4
70103: PUSH
70104: NOP4
70108: PUSH
70109: NOP4
70113: ARRAY
70114: PUSH
70115: LD_INT 2
70117: ARRAY
70118: IN
70119: NOT
70120: AND
70121: PUSH
70122: NOP4
70126: PUSH
70127: NOP4
70131: PUSH
70132: NOP4
70136: ARRAY
70137: IN
70138: NOT
70139: AND
70140: IFFALSE 70177
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
70142: NOP4
70146: PPUSH
70147: NOP4
70151: PUSH
70152: NOP4
70156: ARRAY
70157: PPUSH
70158: NOP4
70162: PPUSH
70163: NOP4
70167: PPUSH
70168: NOP4
70172: PPUSH
70173: NOP4
// end ;
70177: GO 70026
70179: POP
70180: POP
// end ;
70181: GO 69961
70183: POP
70184: POP
// end ;
70185: LD_VAR 0 1
70189: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
70190: LD_INT 0
70192: PPUSH
70193: PPUSH
70194: PPUSH
70195: PPUSH
70196: PPUSH
70197: PPUSH
// if not mc_bases [ base ] then
70198: NOP4
70202: PUSH
70203: NOP4
70207: ARRAY
70208: NOT
70209: IFFALSE 70213
// exit ;
70211: GO 70395
// tmp := [ ] ;
70213: NOP4
70217: PUSH
70218: EMPTY
70219: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
70220: NOP4
70224: PUSH
70225: NOP4
70229: PPUSH
70230: LD_INT 0
70232: PPUSH
70233: NOP4
70237: ST_TO_ADDR
// if not list then
70238: NOP4
70242: NOT
70243: IFFALSE 70247
// exit ;
70245: GO 70395
// for i = 1 to amount do
70247: NOP4
70251: PUSH
70252: DOUBLE
70253: LD_INT 1
70255: DEC
70256: ST_TO_ADDR
70257: NOP4
70261: PUSH
70262: FOR_TO
70263: IFFALSE 70343
// begin x := rand ( 1 , list [ 1 ] ) ;
70265: NOP4
70269: PUSH
70270: LD_INT 1
70272: PPUSH
70273: NOP4
70277: PUSH
70278: LD_INT 1
70280: ARRAY
70281: PPUSH
70282: NOP4
70286: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
70287: NOP4
70291: PUSH
70292: NOP4
70296: PPUSH
70297: NOP4
70301: PPUSH
70302: NOP4
70306: PUSH
70307: LD_INT 1
70309: ARRAY
70310: PUSH
70311: NOP4
70315: ARRAY
70316: PUSH
70317: NOP4
70321: PUSH
70322: LD_INT 2
70324: ARRAY
70325: PUSH
70326: NOP4
70330: ARRAY
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PPUSH
70336: NOP4
70340: ST_TO_ADDR
// end ;
70341: GO 70262
70343: POP
70344: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
70345: NOP4
70349: PUSH
70350: NOP4
70354: PPUSH
70355: NOP4
70359: PPUSH
70360: NOP4
70364: PPUSH
70365: NOP4
70369: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
70370: NOP4
70374: PUSH
70375: NOP4
70379: PPUSH
70380: NOP4
70384: PPUSH
70385: NOP4
70389: PPUSH
70390: NOP4
70394: ST_TO_ADDR
// end ;
70395: LD_VAR 0 4
70399: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
70400: LD_INT 0
70402: PPUSH
// if not mc_bases [ base ] then
70403: NOP4
70407: PUSH
70408: NOP4
70412: ARRAY
70413: NOT
70414: IFFALSE 70418
// exit ;
70416: GO 70443
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
70418: NOP4
70422: PUSH
70423: NOP4
70427: PPUSH
70428: NOP4
70432: PPUSH
70433: NOP4
70437: PPUSH
70438: NOP4
70442: ST_TO_ADDR
// end ;
70443: LD_VAR 0 3
70447: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
70448: LD_INT 0
70450: PPUSH
// if not mc_bases [ base ] then
70451: NOP4
70455: PUSH
70456: NOP4
70460: ARRAY
70461: NOT
70462: IFFALSE 70466
// exit ;
70464: GO 70503
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
70466: NOP4
70470: PUSH
70471: NOP4
70475: PPUSH
70476: NOP4
70480: PPUSH
70481: NOP4
70485: PUSH
70486: NOP4
70490: ARRAY
70491: PUSH
70492: NOP4
70496: UNION
70497: PPUSH
70498: NOP4
70502: ST_TO_ADDR
// end ;
70503: LD_VAR 0 3
70507: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
70508: LD_INT 0
70510: PPUSH
// if not mc_bases [ base ] then
70511: NOP4
70515: PUSH
70516: NOP4
70520: ARRAY
70521: NOT
70522: IFFALSE 70526
// exit ;
70524: GO 70551
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
70526: NOP4
70530: PUSH
70531: NOP4
70535: PPUSH
70536: NOP4
70540: PPUSH
70541: NOP4
70545: PPUSH
70546: NOP4
70550: ST_TO_ADDR
// end ;
70551: LD_VAR 0 3
70555: RET
// export function MC_InsertProduceList ( base , components ) ; begin
70556: LD_INT 0
70558: PPUSH
// if not mc_bases [ base ] then
70559: NOP4
70563: PUSH
70564: NOP4
70568: ARRAY
70569: NOT
70570: IFFALSE 70574
// exit ;
70572: GO 70611
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
70574: NOP4
70578: PUSH
70579: NOP4
70583: PPUSH
70584: NOP4
70588: PPUSH
70589: NOP4
70593: PUSH
70594: NOP4
70598: ARRAY
70599: PUSH
70600: NOP4
70604: ADD
70605: PPUSH
70606: NOP4
70610: ST_TO_ADDR
// end ;
70611: LD_VAR 0 3
70615: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
70616: LD_INT 0
70618: PPUSH
// if not mc_bases [ base ] then
70619: NOP4
70623: PUSH
70624: NOP4
70628: ARRAY
70629: NOT
70630: IFFALSE 70634
// exit ;
70632: GO 70688
// mc_defender := Replace ( mc_defender , base , deflist ) ;
70634: NOP4
70638: PUSH
70639: NOP4
70643: PPUSH
70644: NOP4
70648: PPUSH
70649: NOP4
70653: PPUSH
70654: NOP4
70658: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
70659: NOP4
70663: PUSH
70664: NOP4
70668: PPUSH
70669: NOP4
70673: PPUSH
70674: NOP4
70678: PUSH
70679: LD_INT 0
70681: PLUS
70682: PPUSH
70683: NOP4
70687: ST_TO_ADDR
// end ;
70688: LD_VAR 0 3
70692: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
70693: LD_INT 0
70695: PPUSH
// if not mc_bases [ base ] then
70696: NOP4
70700: PUSH
70701: NOP4
70705: ARRAY
70706: NOT
70707: IFFALSE 70711
// exit ;
70709: GO 70736
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
70711: NOP4
70715: PUSH
70716: NOP4
70720: PPUSH
70721: NOP4
70725: PPUSH
70726: NOP4
70730: PPUSH
70731: NOP4
70735: ST_TO_ADDR
// end ;
70736: LD_VAR 0 3
70740: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
70741: LD_INT 0
70743: PPUSH
70744: PPUSH
70745: PPUSH
70746: PPUSH
// if not mc_bases [ base ] then
70747: NOP4
70751: PUSH
70752: NOP4
70756: ARRAY
70757: NOT
70758: IFFALSE 70762
// exit ;
70760: GO 70827
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
70762: NOP4
70766: PUSH
70767: NOP4
70771: PPUSH
70772: NOP4
70776: PUSH
70777: NOP4
70781: PUSH
70782: NOP4
70786: ARRAY
70787: PUSH
70788: LD_INT 1
70790: PLUS
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PPUSH
70796: NOP4
70800: PUSH
70801: NOP4
70805: PUSH
70806: NOP4
70810: PUSH
70811: NOP4
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: PPUSH
70822: NOP4
70826: ST_TO_ADDR
// end ;
70827: LD_VAR 0 5
70831: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
70832: LD_INT 0
70834: PPUSH
// if not mc_bases [ base ] then
70835: NOP4
70839: PUSH
70840: NOP4
70844: ARRAY
70845: NOT
70846: IFFALSE 70850
// exit ;
70848: GO 70875
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
70850: NOP4
70854: PUSH
70855: NOP4
70859: PPUSH
70860: NOP4
70864: PPUSH
70865: NOP4
70869: PPUSH
70870: NOP4
70874: ST_TO_ADDR
// end ;
70875: LD_VAR 0 3
70879: RET
// export function MC_GetMinesField ( base ) ; begin
70880: LD_INT 0
70882: PPUSH
// result := mc_mines [ base ] ;
70883: NOP4
70887: PUSH
70888: NOP4
70892: PUSH
70893: NOP4
70897: ARRAY
70898: ST_TO_ADDR
// end ;
70899: LD_VAR 0 2
70903: RET
// export function MC_GetProduceList ( base ) ; begin
70904: LD_INT 0
70906: PPUSH
// result := mc_produce [ base ] ;
70907: NOP4
70911: PUSH
70912: NOP4
70916: PUSH
70917: NOP4
70921: ARRAY
70922: ST_TO_ADDR
// end ;
70923: LD_VAR 0 2
70927: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
70928: LD_INT 0
70930: PPUSH
70931: PPUSH
// if not mc_bases then
70932: NOP4
70936: NOT
70937: IFFALSE 70941
// exit ;
70939: GO 71006
// if mc_bases [ base ] then
70941: NOP4
70945: PUSH
70946: NOP4
70950: ARRAY
70951: IFFALSE 71006
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
70953: NOP4
70957: PUSH
70958: NOP4
70962: PUSH
70963: NOP4
70967: ARRAY
70968: PPUSH
70969: LD_INT 30
70971: PUSH
70972: NOP4
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PPUSH
70981: NOP4
70985: ST_TO_ADDR
// if result then
70986: NOP4
70990: IFFALSE 71006
// result := result [ 1 ] ;
70992: NOP4
70996: PUSH
70997: NOP4
71001: PUSH
71002: LD_INT 1
71004: ARRAY
71005: ST_TO_ADDR
// end ; end ;
71006: LD_VAR 0 3
71010: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
71011: LD_INT 0
71013: PPUSH
71014: PPUSH
// if not mc_bases then
71015: NOP4
71019: NOT
71020: IFFALSE 71024
// exit ;
71022: GO 71069
// if mc_bases [ base ] then
71024: NOP4
71028: PUSH
71029: NOP4
71033: ARRAY
71034: IFFALSE 71069
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
71036: NOP4
71040: PUSH
71041: NOP4
71045: PUSH
71046: NOP4
71050: ARRAY
71051: PPUSH
71052: LD_INT 30
71054: PUSH
71055: NOP4
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PPUSH
71064: NOP4
71068: ST_TO_ADDR
// end ;
71069: LD_VAR 0 3
71073: RET
// export function MC_SetTame ( base , area ) ; begin
71074: LD_INT 0
71076: PPUSH
// if not mc_bases or not base then
71077: NOP4
71081: NOT
71082: PUSH
71083: NOP4
71087: NOT
71088: OR
71089: IFFALSE 71093
// exit ;
71091: GO 71118
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
71093: NOP4
71097: PUSH
71098: NOP4
71102: PPUSH
71103: NOP4
71107: PPUSH
71108: NOP4
71112: PPUSH
71113: NOP4
71117: ST_TO_ADDR
// end ;
71118: LD_VAR 0 3
71122: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
71123: LD_INT 0
71125: PPUSH
71126: PPUSH
// if not mc_bases or not base then
71127: NOP4
71131: NOT
71132: PUSH
71133: NOP4
71137: NOT
71138: OR
71139: IFFALSE 71143
// exit ;
71141: GO 71245
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
71143: NOP4
71147: PUSH
71148: NOP4
71152: PUSH
71153: NOP4
71157: ARRAY
71158: PPUSH
71159: LD_INT 30
71161: PUSH
71162: NOP4
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PPUSH
71171: NOP4
71175: ST_TO_ADDR
// if not tmp then
71176: NOP4
71180: NOT
71181: IFFALSE 71185
// exit ;
71183: GO 71245
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
71185: NOP4
71189: PUSH
71190: NOP4
71194: PPUSH
71195: NOP4
71199: PPUSH
71200: NOP4
71204: PUSH
71205: NOP4
71209: ARRAY
71210: PPUSH
71211: NOP4
71215: PUSH
71216: NOP4
71220: ARRAY
71221: PUSH
71222: LD_INT 1
71224: PLUS
71225: PPUSH
71226: NOP4
71230: PUSH
71231: LD_INT 1
71233: ARRAY
71234: PPUSH
71235: NOP4
71239: PPUSH
71240: NOP4
71244: ST_TO_ADDR
// end ;
71245: LD_VAR 0 3
71249: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
71250: LD_INT 0
71252: PPUSH
71253: PPUSH
// if not mc_bases or not base or not kinds then
71254: NOP4
71258: NOT
71259: PUSH
71260: NOP4
71264: NOT
71265: OR
71266: PUSH
71267: NOP4
71271: NOT
71272: OR
71273: IFFALSE 71277
// exit ;
71275: GO 71338
// for i in kinds do
71277: NOP4
71281: PUSH
71282: NOP4
71286: PUSH
71287: FOR_IN
71288: IFFALSE 71336
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
71290: NOP4
71294: PUSH
71295: NOP4
71299: PPUSH
71300: NOP4
71304: PUSH
71305: NOP4
71309: PUSH
71310: NOP4
71314: ARRAY
71315: PUSH
71316: LD_INT 1
71318: PLUS
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PPUSH
71324: NOP4
71328: PPUSH
71329: NOP4
71333: ST_TO_ADDR
71334: GO 71287
71336: POP
71337: POP
// end ;
71338: LD_VAR 0 3
71342: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
71343: LD_INT 0
71345: PPUSH
// if not mc_bases or not base or not areas then
71346: NOP4
71350: NOT
71351: PUSH
71352: NOP4
71356: NOT
71357: OR
71358: PUSH
71359: NOP4
71363: NOT
71364: OR
71365: IFFALSE 71369
// exit ;
71367: GO 71394
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
71369: NOP4
71373: PUSH
71374: NOP4
71378: PPUSH
71379: NOP4
71383: PPUSH
71384: NOP4
71388: PPUSH
71389: NOP4
71393: ST_TO_ADDR
// end ;
71394: LD_VAR 0 3
71398: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
71399: LD_INT 0
71401: PPUSH
// if not mc_bases or not base or not teleports_exit then
71402: NOP4
71406: NOT
71407: PUSH
71408: NOP4
71412: NOT
71413: OR
71414: PUSH
71415: NOP4
71419: NOT
71420: OR
71421: IFFALSE 71425
// exit ;
71423: GO 71450
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
71425: NOP4
71429: PUSH
71430: NOP4
71434: PPUSH
71435: NOP4
71439: PPUSH
71440: NOP4
71444: PPUSH
71445: NOP4
71449: ST_TO_ADDR
// end ;
71450: LD_VAR 0 3
71454: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
71455: LD_INT 0
71457: PPUSH
71458: PPUSH
71459: PPUSH
// if not mc_bases or not base or not ext_list then
71460: NOP4
71464: NOT
71465: PUSH
71466: NOP4
71470: NOT
71471: OR
71472: PUSH
71473: NOP4
71477: NOT
71478: OR
71479: IFFALSE 71483
// exit ;
71481: GO 71656
// tmp := GetFacExtXYD ( x , y , d ) ;
71483: NOP4
71487: PUSH
71488: NOP4
71492: PPUSH
71493: NOP4
71497: PPUSH
71498: NOP4
71502: PPUSH
71503: NOP4
71507: ST_TO_ADDR
// if not tmp then
71508: NOP4
71512: NOT
71513: IFFALSE 71517
// exit ;
71515: GO 71656
// for i in tmp do
71517: NOP4
71521: PUSH
71522: NOP4
71526: PUSH
71527: FOR_IN
71528: IFFALSE 71654
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
71530: NOP4
71534: PUSH
71535: NOP4
71539: PPUSH
71540: NOP4
71544: PPUSH
71545: NOP4
71549: PUSH
71550: NOP4
71554: ARRAY
71555: PPUSH
71556: NOP4
71560: PUSH
71561: NOP4
71565: ARRAY
71566: PUSH
71567: LD_INT 1
71569: PLUS
71570: PPUSH
71571: NOP4
71575: PUSH
71576: LD_INT 1
71578: ARRAY
71579: PUSH
71580: NOP4
71584: PUSH
71585: LD_INT 1
71587: ARRAY
71588: PUSH
71589: NOP4
71593: PUSH
71594: LD_INT 2
71596: ARRAY
71597: PUSH
71598: NOP4
71602: PUSH
71603: LD_INT 3
71605: ARRAY
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: PPUSH
71613: NOP4
71617: PPUSH
71618: NOP4
71622: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
71623: NOP4
71627: PUSH
71628: NOP4
71632: PPUSH
71633: LD_INT 1
71635: PPUSH
71636: NOP4
71640: ST_TO_ADDR
// if not ext_list then
71641: NOP4
71645: NOT
71646: IFFALSE 71652
// exit ;
71648: POP
71649: POP
71650: GO 71656
// end ;
71652: GO 71527
71654: POP
71655: POP
// end ;
71656: LD_VAR 0 6
71660: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
71661: LD_INT 0
71663: PPUSH
// if not mc_bases or not base or not weapon_list then
71664: NOP4
71668: NOT
71669: PUSH
71670: NOP4
71674: NOT
71675: OR
71676: PUSH
71677: NOP4
71681: NOT
71682: OR
71683: IFFALSE 71687
// exit ;
71685: GO 71712
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
71687: NOP4
71691: PUSH
71692: NOP4
71696: PPUSH
71697: NOP4
71701: PPUSH
71702: NOP4
71706: PPUSH
71707: NOP4
71711: ST_TO_ADDR
// end ;
71712: LD_VAR 0 3
71716: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
71717: LD_INT 0
71719: PPUSH
// if not mc_bases or not base or not tech_list then
71720: NOP4
71724: NOT
71725: PUSH
71726: NOP4
71730: NOT
71731: OR
71732: PUSH
71733: NOP4
71737: NOT
71738: OR
71739: IFFALSE 71743
// exit ;
71741: GO 71768
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
71743: NOP4
71747: PUSH
71748: NOP4
71752: PPUSH
71753: NOP4
71757: PPUSH
71758: NOP4
71762: PPUSH
71763: NOP4
71767: ST_TO_ADDR
// end ;
71768: LD_VAR 0 3
71772: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
71773: LD_INT 0
71775: PPUSH
// if not mc_bases or not parking_area or not base then
71776: NOP4
71780: NOT
71781: PUSH
71782: NOP4
71786: NOT
71787: OR
71788: PUSH
71789: NOP4
71793: NOT
71794: OR
71795: IFFALSE 71799
// exit ;
71797: GO 71824
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
71799: NOP4
71803: PUSH
71804: NOP4
71808: PPUSH
71809: NOP4
71813: PPUSH
71814: NOP4
71818: PPUSH
71819: NOP4
71823: ST_TO_ADDR
// end ;
71824: LD_VAR 0 3
71828: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
71829: LD_INT 0
71831: PPUSH
// if not mc_bases or not base or not scan_area then
71832: NOP4
71836: NOT
71837: PUSH
71838: NOP4
71842: NOT
71843: OR
71844: PUSH
71845: NOP4
71849: NOT
71850: OR
71851: IFFALSE 71855
// exit ;
71853: GO 71880
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
71855: NOP4
71859: PUSH
71860: NOP4
71864: PPUSH
71865: NOP4
71869: PPUSH
71870: NOP4
71874: PPUSH
71875: NOP4
71879: ST_TO_ADDR
// end ;
71880: LD_VAR 0 3
71884: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
71885: LD_INT 0
71887: PPUSH
71888: PPUSH
// if not mc_bases or not base then
71889: NOP4
71893: NOT
71894: PUSH
71895: NOP4
71899: NOT
71900: OR
71901: IFFALSE 71905
// exit ;
71903: GO 71969
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
71905: NOP4
71909: PUSH
71910: LD_INT 1
71912: PUSH
71913: LD_INT 2
71915: PUSH
71916: LD_INT 3
71918: PUSH
71919: LD_INT 4
71921: PUSH
71922: LD_INT 11
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
71932: NOP4
71936: PUSH
71937: NOP4
71941: PPUSH
71942: NOP4
71946: PPUSH
71947: NOP4
71951: PUSH
71952: NOP4
71956: ARRAY
71957: PUSH
71958: NOP4
71962: DIFF
71963: PPUSH
71964: NOP4
71968: ST_TO_ADDR
// end ;
71969: LD_VAR 0 2
71973: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
71974: LD_INT 0
71976: PPUSH
// result := mc_vehicles [ base ] ;
71977: NOP4
71981: PUSH
71982: NOP4
71986: PUSH
71987: NOP4
71991: ARRAY
71992: ST_TO_ADDR
// if onlyCombat then
71993: NOP4
71997: IFFALSE 72175
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
71999: NOP4
72003: PUSH
72004: NOP4
72008: PUSH
72009: NOP4
72013: PPUSH
72014: LD_INT 2
72016: PUSH
72017: LD_INT 34
72019: PUSH
72020: LD_INT 12
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: PUSH
72027: LD_INT 34
72029: PUSH
72030: LD_INT 51
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: LD_INT 34
72039: PUSH
72040: NOP4
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: LD_INT 34
72051: PUSH
72052: LD_INT 32
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 34
72061: PUSH
72062: LD_INT 13
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 34
72071: PUSH
72072: LD_INT 52
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 34
72081: PUSH
72082: NOP4
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 34
72093: PUSH
72094: LD_INT 14
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: LD_INT 34
72103: PUSH
72104: LD_INT 53
72106: PUSH
72107: EMPTY
72108: LIST
72109: LIST
72110: PUSH
72111: LD_INT 34
72113: PUSH
72114: NOP4
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 34
72125: PUSH
72126: LD_INT 31
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: PUSH
72133: LD_INT 34
72135: PUSH
72136: LD_INT 48
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: LD_INT 34
72145: PUSH
72146: LD_INT 8
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: PPUSH
72169: NOP4
72173: DIFF
72174: ST_TO_ADDR
// end ; end_of_file
72175: LD_VAR 0 3
72179: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
72180: LD_INT 0
72182: PPUSH
72183: PPUSH
72184: PPUSH
// if not mc_bases or not skirmish then
72185: NOP4
72189: NOT
72190: PUSH
72191: NOP4
72195: NOT
72196: OR
72197: IFFALSE 72201
// exit ;
72199: GO 72366
// for i = 1 to mc_bases do
72201: NOP4
72205: PUSH
72206: DOUBLE
72207: LD_INT 1
72209: DEC
72210: ST_TO_ADDR
72211: NOP4
72215: PUSH
72216: FOR_TO
72217: IFFALSE 72364
// begin if sci in mc_bases [ i ] then
72219: NOP4
72223: PUSH
72224: NOP4
72228: PUSH
72229: NOP4
72233: ARRAY
72234: IN
72235: IFFALSE 72362
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
72237: NOP4
72241: PUSH
72242: NOP4
72246: PPUSH
72247: NOP4
72251: PUSH
72252: NOP4
72256: PUSH
72257: NOP4
72261: ARRAY
72262: PUSH
72263: LD_INT 1
72265: PLUS
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: PPUSH
72271: NOP4
72275: PPUSH
72276: NOP4
72280: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
72281: NOP4
72285: PUSH
72286: NOP4
72290: PUSH
72291: NOP4
72295: ARRAY
72296: PPUSH
72297: LD_INT 2
72299: PUSH
72300: LD_INT 30
72302: PUSH
72303: LD_INT 0
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 30
72312: PUSH
72313: LD_INT 1
72315: PUSH
72316: EMPTY
72317: LIST
72318: LIST
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: LIST
72324: PPUSH
72325: NOP4
72329: PPUSH
72330: NOP4
72334: PPUSH
72335: NOP4
72339: ST_TO_ADDR
// if tmp then
72340: NOP4
72344: IFFALSE 72360
// ComStandNearbyBuilding ( ape , tmp ) ;
72346: NOP4
72350: PPUSH
72351: NOP4
72355: PPUSH
72356: NOP4
// break ;
72360: GO 72364
// end ; end ;
72362: GO 72216
72364: POP
72365: POP
// end ;
72366: LD_VAR 0 3
72370: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
72371: LD_INT 0
72373: PPUSH
72374: PPUSH
72375: PPUSH
// if not mc_bases or not skirmish then
72376: NOP4
72380: NOT
72381: PUSH
72382: NOP4
72386: NOT
72387: OR
72388: IFFALSE 72392
// exit ;
72390: GO 72481
// for i = 1 to mc_bases do
72392: NOP4
72396: PUSH
72397: DOUBLE
72398: LD_INT 1
72400: DEC
72401: ST_TO_ADDR
72402: NOP4
72406: PUSH
72407: FOR_TO
72408: IFFALSE 72479
// begin if building in mc_busy_turret_list [ i ] then
72410: NOP4
72414: PUSH
72415: NOP4
72419: PUSH
72420: NOP4
72424: ARRAY
72425: IN
72426: IFFALSE 72477
// begin tmp := mc_busy_turret_list [ i ] diff building ;
72428: NOP4
72432: PUSH
72433: NOP4
72437: PUSH
72438: NOP4
72442: ARRAY
72443: PUSH
72444: NOP4
72448: DIFF
72449: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
72450: NOP4
72454: PUSH
72455: NOP4
72459: PPUSH
72460: NOP4
72464: PPUSH
72465: NOP4
72469: PPUSH
72470: NOP4
72474: ST_TO_ADDR
// break ;
72475: GO 72479
// end ; end ;
72477: GO 72407
72479: POP
72480: POP
// end ;
72481: LD_VAR 0 3
72485: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
72486: LD_INT 0
72488: PPUSH
72489: PPUSH
72490: PPUSH
// if not mc_bases or not skirmish then
72491: NOP4
72495: NOT
72496: PUSH
72497: NOP4
72501: NOT
72502: OR
72503: IFFALSE 72507
// exit ;
72505: GO 72706
// for i = 1 to mc_bases do
72507: NOP4
72511: PUSH
72512: DOUBLE
72513: LD_INT 1
72515: DEC
72516: ST_TO_ADDR
72517: NOP4
72521: PUSH
72522: FOR_TO
72523: IFFALSE 72704
// if building in mc_bases [ i ] then
72525: NOP4
72529: PUSH
72530: NOP4
72534: PUSH
72535: NOP4
72539: ARRAY
72540: IN
72541: IFFALSE 72702
// begin tmp := mc_bases [ i ] diff building ;
72543: NOP4
72547: PUSH
72548: NOP4
72552: PUSH
72553: NOP4
72557: ARRAY
72558: PUSH
72559: NOP4
72563: DIFF
72564: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
72565: NOP4
72569: PUSH
72570: NOP4
72574: PPUSH
72575: NOP4
72579: PPUSH
72580: NOP4
72584: PPUSH
72585: NOP4
72589: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
72590: NOP4
72594: PUSH
72595: NOP4
72599: PUSH
72600: NOP4
72604: ARRAY
72605: IN
72606: IFFALSE 72645
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
72608: NOP4
72612: PUSH
72613: NOP4
72617: PPUSH
72618: NOP4
72622: PPUSH
72623: NOP4
72627: PUSH
72628: NOP4
72632: ARRAY
72633: PUSH
72634: NOP4
72638: DIFF
72639: PPUSH
72640: NOP4
72644: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
72645: NOP4
72649: PUSH
72650: NOP4
72654: PUSH
72655: NOP4
72659: ARRAY
72660: IN
72661: IFFALSE 72700
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
72663: NOP4
72667: PUSH
72668: NOP4
72672: PPUSH
72673: NOP4
72677: PPUSH
72678: NOP4
72682: PUSH
72683: NOP4
72687: ARRAY
72688: PUSH
72689: NOP4
72693: DIFF
72694: PPUSH
72695: NOP4
72699: ST_TO_ADDR
// break ;
72700: GO 72704
// end ;
72702: GO 72522
72704: POP
72705: POP
// end ;
72706: LD_VAR 0 4
72710: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
72711: LD_INT 0
72713: PPUSH
72714: PPUSH
72715: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
72716: NOP4
72720: NOT
72721: PUSH
72722: NOP4
72726: NOT
72727: OR
72728: PUSH
72729: NOP4
72733: PUSH
72734: NOP4
72738: IN
72739: NOT
72740: OR
72741: IFFALSE 72745
// exit ;
72743: GO 72868
// for i = 1 to mc_vehicles do
72745: NOP4
72749: PUSH
72750: DOUBLE
72751: LD_INT 1
72753: DEC
72754: ST_TO_ADDR
72755: NOP4
72759: PUSH
72760: FOR_TO
72761: IFFALSE 72866
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
72763: NOP4
72767: PUSH
72768: NOP4
72772: PUSH
72773: NOP4
72777: ARRAY
72778: IN
72779: PUSH
72780: NOP4
72784: PUSH
72785: NOP4
72789: PUSH
72790: NOP4
72794: ARRAY
72795: IN
72796: OR
72797: IFFALSE 72864
// begin tmp := mc_vehicles [ i ] diff old ;
72799: NOP4
72803: PUSH
72804: NOP4
72808: PUSH
72809: NOP4
72813: ARRAY
72814: PUSH
72815: NOP4
72819: DIFF
72820: ST_TO_ADDR
// tmp := tmp diff new ;
72821: NOP4
72825: PUSH
72826: NOP4
72830: PUSH
72831: NOP4
72835: DIFF
72836: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
72837: NOP4
72841: PUSH
72842: NOP4
72846: PPUSH
72847: NOP4
72851: PPUSH
72852: NOP4
72856: PPUSH
72857: NOP4
72861: ST_TO_ADDR
// break ;
72862: GO 72866
// end ;
72864: GO 72760
72866: POP
72867: POP
// end ;
72868: LD_VAR 0 5
72872: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
72873: LD_INT 0
72875: PPUSH
72876: PPUSH
72877: PPUSH
72878: PPUSH
// if not mc_bases or not skirmish then
72879: NOP4
72883: NOT
72884: PUSH
72885: NOP4
72889: NOT
72890: OR
72891: IFFALSE 72895
// exit ;
72893: GO 73278
// side := GetSide ( vehicle ) ;
72895: NOP4
72899: PUSH
72900: NOP4
72904: PPUSH
72905: NOP4
72909: ST_TO_ADDR
// for i = 1 to mc_bases do
72910: NOP4
72914: PUSH
72915: DOUBLE
72916: LD_INT 1
72918: DEC
72919: ST_TO_ADDR
72920: NOP4
72924: PUSH
72925: FOR_TO
72926: IFFALSE 73276
// begin if factory in mc_bases [ i ] then
72928: NOP4
72932: PUSH
72933: NOP4
72937: PUSH
72938: NOP4
72942: ARRAY
72943: IN
72944: IFFALSE 73274
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ar_crane , ru_siberium_rocket , us_siberium_rocket ] then
72946: NOP4
72950: PUSH
72951: NOP4
72955: ARRAY
72956: PUSH
72957: NOP4
72961: PUSH
72962: NOP4
72966: ARRAY
72967: LESS
72968: PUSH
72969: NOP4
72973: PPUSH
72974: NOP4
72978: PUSH
72979: LD_INT 31
72981: PUSH
72982: LD_INT 32
72984: PUSH
72985: LD_INT 51
72987: PUSH
72988: NOP4
72992: PUSH
72993: LD_INT 12
72995: PUSH
72996: LD_INT 30
72998: PUSH
72999: NOP4
73003: PUSH
73004: LD_INT 11
73006: PUSH
73007: LD_INT 53
73009: PUSH
73010: LD_INT 14
73012: PUSH
73013: NOP4
73017: PUSH
73018: LD_INT 29
73020: PUSH
73021: NOP4
73025: PUSH
73026: LD_INT 13
73028: PUSH
73029: LD_INT 52
73031: PUSH
73032: NOP4
73036: PUSH
73037: LD_INT 48
73039: PUSH
73040: LD_INT 8
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: IN
73063: NOT
73064: AND
73065: IFFALSE 73113
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
73067: NOP4
73071: PUSH
73072: NOP4
73076: PPUSH
73077: NOP4
73081: PUSH
73082: NOP4
73086: PUSH
73087: NOP4
73091: ARRAY
73092: PUSH
73093: LD_INT 1
73095: PLUS
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PPUSH
73101: NOP4
73105: PPUSH
73106: NOP4
73110: ST_TO_ADDR
73111: GO 73157
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
73113: NOP4
73117: PUSH
73118: NOP4
73122: PPUSH
73123: NOP4
73127: PUSH
73128: NOP4
73132: PUSH
73133: NOP4
73137: ARRAY
73138: PUSH
73139: LD_INT 1
73141: PLUS
73142: PUSH
73143: EMPTY
73144: LIST
73145: LIST
73146: PPUSH
73147: NOP4
73151: PPUSH
73152: NOP4
73156: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
73157: NOP4
73161: PPUSH
73162: NOP4
73166: PUSH
73167: LD_INT 2
73169: EQUAL
73170: IFFALSE 73190
// begin repeat wait ( 0 0$1 ) ;
73172: LD_INT 35
73174: PPUSH
73175: NOP4
// until IsControledBy ( vehicle ) ;
73179: NOP4
73183: PPUSH
73184: NOP4
73188: IFFALSE 73172
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
73190: NOP4
73194: PPUSH
73195: NOP4
73199: PUSH
73200: NOP4
73204: ARRAY
73205: PPUSH
73206: NOP4
// if GetControl ( vehicle ) <> control_manual then
73210: NOP4
73214: PPUSH
73215: NOP4
73219: PUSH
73220: LD_INT 1
73222: NONEQUAL
73223: IFFALSE 73227
// break ;
73225: GO 73276
// repeat wait ( 0 0$1 ) ;
73227: LD_INT 35
73229: PPUSH
73230: NOP4
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
73234: NOP4
73238: PPUSH
73239: NOP4
73243: PUSH
73244: NOP4
73248: ARRAY
73249: PPUSH
73250: NOP4
73254: IFFALSE 73227
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
73256: NOP4
73260: PPUSH
73261: NOP4
73265: PPUSH
73266: NOP4
// exit ;
73270: POP
73271: POP
73272: GO 73278
// end ; end ;
73274: GO 72925
73276: POP
73277: POP
// end ;
73278: LD_VAR 0 3
73282: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
73283: LD_INT 0
73285: PPUSH
73286: PPUSH
73287: PPUSH
73288: PPUSH
// if not mc_bases or not skirmish then
73289: NOP4
73293: NOT
73294: PUSH
73295: NOP4
73299: NOT
73300: OR
73301: IFFALSE 73305
// exit ;
73303: GO 73658
// repeat wait ( 0 0$1 ) ;
73305: LD_INT 35
73307: PPUSH
73308: NOP4
// until GetResourceAmountXY ( x , y ) ;
73312: NOP4
73316: PPUSH
73317: NOP4
73321: PPUSH
73322: NOP4
73326: IFFALSE 73305
// if GetResourceTypeXY ( x , y ) = mat_artefact then
73328: NOP4
73332: PPUSH
73333: NOP4
73337: PPUSH
73338: NOP4
73342: PUSH
73343: LD_INT 4
73345: EQUAL
73346: IFFALSE 73350
// exit ;
73348: GO 73658
// for i = 1 to mc_bases do
73350: NOP4
73354: PUSH
73355: DOUBLE
73356: LD_INT 1
73358: DEC
73359: ST_TO_ADDR
73360: NOP4
73364: PUSH
73365: FOR_TO
73366: IFFALSE 73656
// begin if mc_crates_area [ i ] then
73368: NOP4
73372: PUSH
73373: NOP4
73377: ARRAY
73378: IFFALSE 73489
// for j in mc_crates_area [ i ] do
73380: NOP4
73384: PUSH
73385: NOP4
73389: PUSH
73390: NOP4
73394: ARRAY
73395: PUSH
73396: FOR_IN
73397: IFFALSE 73487
// if InArea ( x , y , j ) then
73399: NOP4
73403: PPUSH
73404: NOP4
73408: PPUSH
73409: NOP4
73413: PPUSH
73414: NOP4
73418: IFFALSE 73485
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
73420: NOP4
73424: PUSH
73425: NOP4
73429: PPUSH
73430: NOP4
73434: PUSH
73435: NOP4
73439: PUSH
73440: NOP4
73444: ARRAY
73445: PUSH
73446: LD_INT 1
73448: PLUS
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: PPUSH
73454: NOP4
73458: PUSH
73459: NOP4
73463: PUSH
73464: NOP4
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: LIST
73473: PPUSH
73474: NOP4
73478: ST_TO_ADDR
// exit ;
73479: POP
73480: POP
73481: POP
73482: POP
73483: GO 73658
// end ;
73485: GO 73396
73487: POP
73488: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73489: NOP4
73493: PUSH
73494: NOP4
73498: PUSH
73499: NOP4
73503: ARRAY
73504: PPUSH
73505: LD_INT 2
73507: PUSH
73508: LD_INT 30
73510: PUSH
73511: LD_INT 0
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PUSH
73518: LD_INT 30
73520: PUSH
73521: LD_INT 1
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: LIST
73532: PPUSH
73533: NOP4
73537: ST_TO_ADDR
// if not depot then
73538: NOP4
73542: NOT
73543: IFFALSE 73547
// continue ;
73545: GO 73365
// for j in depot do
73547: NOP4
73551: PUSH
73552: NOP4
73556: PUSH
73557: FOR_IN
73558: IFFALSE 73652
// if GetDistUnitXY ( j , x , y ) < 30 then
73560: NOP4
73564: PPUSH
73565: NOP4
73569: PPUSH
73570: NOP4
73574: PPUSH
73575: NOP4
73579: PUSH
73580: LD_INT 30
73582: LESS
73583: IFFALSE 73650
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
73585: NOP4
73589: PUSH
73590: NOP4
73594: PPUSH
73595: NOP4
73599: PUSH
73600: NOP4
73604: PUSH
73605: NOP4
73609: ARRAY
73610: PUSH
73611: LD_INT 1
73613: PLUS
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: PPUSH
73619: NOP4
73623: PUSH
73624: NOP4
73628: PUSH
73629: NOP4
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: LIST
73638: PPUSH
73639: NOP4
73643: ST_TO_ADDR
// exit ;
73644: POP
73645: POP
73646: POP
73647: POP
73648: GO 73658
// end ;
73650: GO 73557
73652: POP
73653: POP
// end ;
73654: GO 73365
73656: POP
73657: POP
// end ;
73658: LD_VAR 0 6
73662: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
73663: LD_INT 0
73665: PPUSH
73666: PPUSH
73667: PPUSH
73668: PPUSH
// if not mc_bases or not skirmish then
73669: NOP4
73673: NOT
73674: PUSH
73675: NOP4
73679: NOT
73680: OR
73681: IFFALSE 73685
// exit ;
73683: GO 73962
// side := GetSide ( lab ) ;
73685: NOP4
73689: PUSH
73690: NOP4
73694: PPUSH
73695: NOP4
73699: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
73700: NOP4
73704: PUSH
73705: NOP4
73709: IN
73710: NOT
73711: PUSH
73712: NOP4
73716: NOT
73717: OR
73718: PUSH
73719: NOP4
73723: NOT
73724: OR
73725: IFFALSE 73729
// exit ;
73727: GO 73962
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
73729: NOP4
73733: PUSH
73734: NOP4
73738: PPUSH
73739: NOP4
73743: PPUSH
73744: NOP4
73748: PUSH
73749: NOP4
73753: ARRAY
73754: PUSH
73755: NOP4
73759: DIFF
73760: PPUSH
73761: NOP4
73765: ST_TO_ADDR
// for i = 1 to mc_bases do
73766: NOP4
73770: PUSH
73771: DOUBLE
73772: LD_INT 1
73774: DEC
73775: ST_TO_ADDR
73776: NOP4
73780: PUSH
73781: FOR_TO
73782: IFFALSE 73960
// begin if lab in mc_bases [ i ] then
73784: NOP4
73788: PUSH
73789: NOP4
73793: PUSH
73794: NOP4
73798: ARRAY
73799: IN
73800: IFFALSE 73958
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
73802: NOP4
73806: PUSH
73807: LD_INT 11
73809: PUSH
73810: LD_INT 4
73812: PUSH
73813: LD_INT 3
73815: PUSH
73816: LD_INT 2
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: IN
73825: PUSH
73826: NOP4
73830: PUSH
73831: NOP4
73835: ARRAY
73836: AND
73837: IFFALSE 73958
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
73839: NOP4
73843: PUSH
73844: NOP4
73848: PUSH
73849: NOP4
73853: ARRAY
73854: PUSH
73855: LD_INT 1
73857: ARRAY
73858: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
73859: NOP4
73863: PUSH
73864: NOP4
73868: PPUSH
73869: NOP4
73873: PPUSH
73874: EMPTY
73875: PPUSH
73876: NOP4
73880: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
73881: NOP4
73885: PPUSH
73886: LD_INT 0
73888: PPUSH
73889: NOP4
// ComExitBuilding ( tmp ) ;
73893: NOP4
73897: PPUSH
73898: NOP4
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
73902: NOP4
73906: PUSH
73907: NOP4
73911: PPUSH
73912: NOP4
73916: PPUSH
73917: NOP4
73921: PUSH
73922: NOP4
73926: ARRAY
73927: PPUSH
73928: LD_INT 1
73930: PPUSH
73931: NOP4
73935: PPUSH
73936: NOP4
73940: PPUSH
73941: NOP4
73945: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
73946: NOP4
73950: PPUSH
73951: LD_INT 112
73953: PPUSH
73954: NOP4
// end ; end ; end ;
73958: GO 73781
73960: POP
73961: POP
// end ;
73962: LD_VAR 0 3
73966: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
73967: LD_INT 0
73969: PPUSH
73970: PPUSH
73971: PPUSH
73972: PPUSH
73973: PPUSH
73974: PPUSH
73975: PPUSH
73976: PPUSH
// if not mc_bases or not skirmish then
73977: NOP4
73981: NOT
73982: PUSH
73983: NOP4
73987: NOT
73988: OR
73989: IFFALSE 73993
// exit ;
73991: GO 75364
// for i = 1 to mc_bases do
73993: NOP4
73997: PUSH
73998: DOUBLE
73999: LD_INT 1
74001: DEC
74002: ST_TO_ADDR
74003: NOP4
74007: PUSH
74008: FOR_TO
74009: IFFALSE 75362
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
74011: NOP4
74015: PUSH
74016: NOP4
74020: PUSH
74021: NOP4
74025: ARRAY
74026: IN
74027: PUSH
74028: NOP4
74032: PUSH
74033: NOP4
74037: PUSH
74038: NOP4
74042: ARRAY
74043: IN
74044: OR
74045: PUSH
74046: NOP4
74050: PUSH
74051: NOP4
74055: PUSH
74056: NOP4
74060: ARRAY
74061: IN
74062: OR
74063: PUSH
74064: NOP4
74068: PUSH
74069: NOP4
74073: PUSH
74074: NOP4
74078: ARRAY
74079: IN
74080: OR
74081: PUSH
74082: NOP4
74086: PUSH
74087: NOP4
74091: PUSH
74092: NOP4
74096: ARRAY
74097: IN
74098: OR
74099: PUSH
74100: NOP4
74104: PUSH
74105: NOP4
74109: PUSH
74110: NOP4
74114: ARRAY
74115: IN
74116: OR
74117: IFFALSE 75360
// begin if un in mc_ape [ i ] then
74119: NOP4
74123: PUSH
74124: NOP4
74128: PUSH
74129: NOP4
74133: ARRAY
74134: IN
74135: IFFALSE 74174
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
74137: NOP4
74141: PUSH
74142: NOP4
74146: PPUSH
74147: NOP4
74151: PPUSH
74152: NOP4
74156: PUSH
74157: NOP4
74161: ARRAY
74162: PUSH
74163: NOP4
74167: DIFF
74168: PPUSH
74169: NOP4
74173: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
74174: NOP4
74178: PUSH
74179: NOP4
74183: PUSH
74184: NOP4
74188: ARRAY
74189: IN
74190: IFFALSE 74214
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
74192: NOP4
74196: PUSH
74197: NOP4
74201: PPUSH
74202: NOP4
74206: PPUSH
74207: EMPTY
74208: PPUSH
74209: NOP4
74213: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
74214: NOP4
74218: PPUSH
74219: NOP4
74223: PUSH
74224: LD_INT 2
74226: EQUAL
74227: PUSH
74228: NOP4
74232: PPUSH
74233: NOP4
74237: PUSH
74238: LD_INT 20
74240: EQUAL
74241: PUSH
74242: NOP4
74246: PUSH
74247: NOP4
74251: PUSH
74252: NOP4
74256: ARRAY
74257: IN
74258: OR
74259: PUSH
74260: NOP4
74264: PPUSH
74265: NOP4
74269: PUSH
74270: LD_INT 12
74272: PUSH
74273: LD_INT 51
74275: PUSH
74276: NOP4
74280: PUSH
74281: LD_INT 32
74283: PUSH
74284: LD_INT 13
74286: PUSH
74287: LD_INT 52
74289: PUSH
74290: LD_INT 31
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: IN
74302: OR
74303: AND
74304: IFFALSE 74612
// begin if un in mc_defender [ i ] then
74306: NOP4
74310: PUSH
74311: NOP4
74315: PUSH
74316: NOP4
74320: ARRAY
74321: IN
74322: IFFALSE 74361
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
74324: NOP4
74328: PUSH
74329: NOP4
74333: PPUSH
74334: NOP4
74338: PPUSH
74339: NOP4
74343: PUSH
74344: NOP4
74348: ARRAY
74349: PUSH
74350: NOP4
74354: DIFF
74355: PPUSH
74356: NOP4
74360: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
74361: NOP4
74365: PUSH
74366: NOP4
74370: PPUSH
74371: LD_INT 3
74373: PPUSH
74374: NOP4
74378: ST_TO_ADDR
// if fac then
74379: NOP4
74383: IFFALSE 74612
// begin for j in fac do
74385: NOP4
74389: PUSH
74390: NOP4
74394: PUSH
74395: FOR_IN
74396: IFFALSE 74610
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
74398: NOP4
74402: PUSH
74403: NOP4
74407: PPUSH
74408: NOP4
74412: PPUSH
74413: NOP4
74417: PPUSH
74418: NOP4
74422: PPUSH
74423: NOP4
74427: PPUSH
74428: NOP4
74432: PPUSH
74433: NOP4
74437: PPUSH
74438: NOP4
74442: PPUSH
74443: NOP4
74447: PPUSH
74448: NOP4
74452: ST_TO_ADDR
// if components then
74453: NOP4
74457: IFFALSE 74608
// begin if GetWeapon ( un ) = ar_control_tower then
74459: NOP4
74463: PPUSH
74464: NOP4
74468: PUSH
74469: LD_INT 31
74471: EQUAL
74472: IFFALSE 74589
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
74474: NOP4
74478: PPUSH
74479: NOP4
74483: PPUSH
74484: LD_INT 0
74486: PPUSH
74487: NOP4
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
74491: NOP4
74495: PUSH
74496: NOP4
74500: PPUSH
74501: NOP4
74505: PPUSH
74506: NOP4
74510: PUSH
74511: NOP4
74515: ARRAY
74516: PUSH
74517: NOP4
74521: PPUSH
74522: NOP4
74526: DIFF
74527: PPUSH
74528: NOP4
74532: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
74533: NOP4
74537: PUSH
74538: NOP4
74542: PUSH
74543: NOP4
74547: ARRAY
74548: PPUSH
74549: LD_INT 1
74551: PPUSH
74552: NOP4
74556: PPUSH
74557: NOP4
74561: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
74562: NOP4
74566: PUSH
74567: NOP4
74571: PPUSH
74572: NOP4
74576: PPUSH
74577: NOP4
74581: PPUSH
74582: NOP4
74586: ST_TO_ADDR
// end else
74587: GO 74606
// MC_InsertProduceList ( i , [ components ] ) ;
74589: NOP4
74593: PPUSH
74594: NOP4
74598: PUSH
74599: EMPTY
74600: LIST
74601: PPUSH
74602: NOP4
// break ;
74606: GO 74610
// end ; end ;
74608: GO 74395
74610: POP
74611: POP
// end ; end ; if GetType ( un ) = unit_building then
74612: NOP4
74616: PPUSH
74617: NOP4
74621: PUSH
74622: LD_INT 3
74624: EQUAL
74625: IFFALSE 75028
// begin btype := GetBType ( un ) ;
74627: NOP4
74631: PUSH
74632: NOP4
74636: PPUSH
74637: NOP4
74641: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
74642: NOP4
74646: PUSH
74647: LD_INT 29
74649: PUSH
74650: LD_INT 30
74652: PUSH
74653: EMPTY
74654: LIST
74655: LIST
74656: IN
74657: IFFALSE 74730
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
74659: NOP4
74663: PPUSH
74664: NOP4
74668: PPUSH
74669: NOP4
74673: PPUSH
74674: NOP4
74678: PPUSH
74679: NOP4
74683: PPUSH
74684: NOP4
74688: PPUSH
74689: NOP4
74693: NOT
74694: IFFALSE 74730
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
74696: NOP4
74700: PPUSH
74701: NOP4
74705: PPUSH
74706: NOP4
74710: PPUSH
74711: NOP4
74715: PPUSH
74716: NOP4
74720: PPUSH
74721: NOP4
74725: PPUSH
74726: NOP4
// end ; if btype = b_warehouse then
74730: NOP4
74734: PUSH
74735: LD_INT 1
74737: EQUAL
74738: IFFALSE 74756
// begin btype := b_depot ;
74740: NOP4
74744: PUSH
74745: LD_INT 0
74747: ST_TO_ADDR
// pos := 1 ;
74748: NOP4
74752: PUSH
74753: LD_INT 1
74755: ST_TO_ADDR
// end ; if btype = b_factory then
74756: NOP4
74760: PUSH
74761: LD_INT 3
74763: EQUAL
74764: IFFALSE 74782
// begin btype := b_workshop ;
74766: NOP4
74770: PUSH
74771: LD_INT 2
74773: ST_TO_ADDR
// pos := 1 ;
74774: NOP4
74778: PUSH
74779: LD_INT 1
74781: ST_TO_ADDR
// end ; if btype = b_barracks then
74782: NOP4
74786: PUSH
74787: LD_INT 5
74789: EQUAL
74790: IFFALSE 74800
// btype := b_armoury ;
74792: NOP4
74796: PUSH
74797: LD_INT 4
74799: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
74800: NOP4
74804: PUSH
74805: LD_INT 7
74807: PUSH
74808: LD_INT 8
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: IN
74815: IFFALSE 74825
// btype := b_lab ;
74817: NOP4
74821: PUSH
74822: LD_INT 6
74824: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
74825: NOP4
74829: PUSH
74830: NOP4
74834: PPUSH
74835: NOP4
74839: PUSH
74840: NOP4
74844: PUSH
74845: NOP4
74849: ARRAY
74850: PUSH
74851: LD_INT 1
74853: PLUS
74854: PUSH
74855: EMPTY
74856: LIST
74857: LIST
74858: PPUSH
74859: NOP4
74863: PUSH
74864: NOP4
74868: PPUSH
74869: NOP4
74873: PUSH
74874: NOP4
74878: PPUSH
74879: NOP4
74883: PUSH
74884: NOP4
74888: PPUSH
74889: NOP4
74893: PUSH
74894: EMPTY
74895: LIST
74896: LIST
74897: LIST
74898: LIST
74899: PPUSH
74900: NOP4
74904: ST_TO_ADDR
// if pos = 1 then
74905: NOP4
74909: PUSH
74910: LD_INT 1
74912: EQUAL
74913: IFFALSE 75028
// begin tmp := mc_build_list [ i ] ;
74915: NOP4
74919: PUSH
74920: NOP4
74924: PUSH
74925: NOP4
74929: ARRAY
74930: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
74931: NOP4
74935: PPUSH
74936: LD_INT 2
74938: PUSH
74939: LD_INT 30
74941: PUSH
74942: LD_INT 0
74944: PUSH
74945: EMPTY
74946: LIST
74947: LIST
74948: PUSH
74949: LD_INT 30
74951: PUSH
74952: LD_INT 1
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: PUSH
74959: EMPTY
74960: LIST
74961: LIST
74962: LIST
74963: PPUSH
74964: NOP4
74968: IFFALSE 74978
// pos := 2 ;
74970: NOP4
74974: PUSH
74975: LD_INT 2
74977: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
74978: NOP4
74982: PUSH
74983: NOP4
74987: PPUSH
74988: NOP4
74992: PPUSH
74993: NOP4
74997: PPUSH
74998: NOP4
75002: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
75003: NOP4
75007: PUSH
75008: NOP4
75012: PPUSH
75013: NOP4
75017: PPUSH
75018: NOP4
75022: PPUSH
75023: NOP4
75027: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
75028: NOP4
75032: PUSH
75033: NOP4
75037: PUSH
75038: NOP4
75042: ARRAY
75043: IN
75044: IFFALSE 75083
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
75046: NOP4
75050: PUSH
75051: NOP4
75055: PPUSH
75056: NOP4
75060: PPUSH
75061: NOP4
75065: PUSH
75066: NOP4
75070: ARRAY
75071: PUSH
75072: NOP4
75076: DIFF
75077: PPUSH
75078: NOP4
75082: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
75083: NOP4
75087: PUSH
75088: NOP4
75092: PUSH
75093: NOP4
75097: ARRAY
75098: IN
75099: IFFALSE 75138
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
75101: NOP4
75105: PUSH
75106: NOP4
75110: PPUSH
75111: NOP4
75115: PPUSH
75116: NOP4
75120: PUSH
75121: NOP4
75125: ARRAY
75126: PUSH
75127: NOP4
75131: DIFF
75132: PPUSH
75133: NOP4
75137: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
75138: NOP4
75142: PUSH
75143: NOP4
75147: PUSH
75148: NOP4
75152: ARRAY
75153: IN
75154: IFFALSE 75193
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
75156: NOP4
75160: PUSH
75161: NOP4
75165: PPUSH
75166: NOP4
75170: PPUSH
75171: NOP4
75175: PUSH
75176: NOP4
75180: ARRAY
75181: PUSH
75182: NOP4
75186: DIFF
75187: PPUSH
75188: NOP4
75192: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
75193: NOP4
75197: PUSH
75198: NOP4
75202: PUSH
75203: NOP4
75207: ARRAY
75208: IN
75209: IFFALSE 75248
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
75211: NOP4
75215: PUSH
75216: NOP4
75220: PPUSH
75221: NOP4
75225: PPUSH
75226: NOP4
75230: PUSH
75231: NOP4
75235: ARRAY
75236: PUSH
75237: NOP4
75241: DIFF
75242: PPUSH
75243: NOP4
75247: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
75248: NOP4
75252: PUSH
75253: NOP4
75257: PUSH
75258: NOP4
75262: ARRAY
75263: IN
75264: IFFALSE 75303
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
75266: NOP4
75270: PUSH
75271: NOP4
75275: PPUSH
75276: NOP4
75280: PPUSH
75281: NOP4
75285: PUSH
75286: NOP4
75290: ARRAY
75291: PUSH
75292: NOP4
75296: DIFF
75297: PPUSH
75298: NOP4
75302: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
75303: NOP4
75307: PUSH
75308: NOP4
75312: PUSH
75313: NOP4
75317: ARRAY
75318: IN
75319: IFFALSE 75358
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
75321: NOP4
75325: PUSH
75326: NOP4
75330: PPUSH
75331: NOP4
75335: PPUSH
75336: NOP4
75340: PUSH
75341: NOP4
75345: ARRAY
75346: PUSH
75347: NOP4
75351: DIFF
75352: PPUSH
75353: NOP4
75357: ST_TO_ADDR
// end ; break ;
75358: GO 75362
// end ;
75360: GO 74008
75362: POP
75363: POP
// end ;
75364: LD_VAR 0 2
75368: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
75369: LD_INT 0
75371: PPUSH
75372: PPUSH
75373: PPUSH
// if not mc_bases or not skirmish then
75374: NOP4
75378: NOT
75379: PUSH
75380: NOP4
75384: NOT
75385: OR
75386: IFFALSE 75390
// exit ;
75388: GO 75605
// for i = 1 to mc_bases do
75390: NOP4
75394: PUSH
75395: DOUBLE
75396: LD_INT 1
75398: DEC
75399: ST_TO_ADDR
75400: NOP4
75404: PUSH
75405: FOR_TO
75406: IFFALSE 75603
// begin if building in mc_construct_list [ i ] then
75408: NOP4
75412: PUSH
75413: NOP4
75417: PUSH
75418: NOP4
75422: ARRAY
75423: IN
75424: IFFALSE 75601
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
75426: NOP4
75430: PUSH
75431: NOP4
75435: PPUSH
75436: NOP4
75440: PPUSH
75441: NOP4
75445: PUSH
75446: NOP4
75450: ARRAY
75451: PUSH
75452: NOP4
75456: DIFF
75457: PPUSH
75458: NOP4
75462: ST_TO_ADDR
// if building in mc_lab [ i ] then
75463: NOP4
75467: PUSH
75468: NOP4
75472: PUSH
75473: NOP4
75477: ARRAY
75478: IN
75479: IFFALSE 75534
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
75481: NOP4
75485: PUSH
75486: NOP4
75490: PPUSH
75491: NOP4
75495: PPUSH
75496: NOP4
75500: PUSH
75501: NOP4
75505: ARRAY
75506: PPUSH
75507: LD_INT 1
75509: PPUSH
75510: NOP4
75514: PUSH
75515: NOP4
75519: ARRAY
75520: PPUSH
75521: LD_INT 0
75523: PPUSH
75524: NOP4
75528: PPUSH
75529: NOP4
75533: ST_TO_ADDR
// if not building in mc_bases [ i ] then
75534: NOP4
75538: PUSH
75539: NOP4
75543: PUSH
75544: NOP4
75548: ARRAY
75549: IN
75550: NOT
75551: IFFALSE 75597
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
75553: NOP4
75557: PUSH
75558: NOP4
75562: PPUSH
75563: NOP4
75567: PUSH
75568: NOP4
75572: PUSH
75573: NOP4
75577: ARRAY
75578: PUSH
75579: LD_INT 1
75581: PLUS
75582: PUSH
75583: EMPTY
75584: LIST
75585: LIST
75586: PPUSH
75587: NOP4
75591: PPUSH
75592: NOP4
75596: ST_TO_ADDR
// exit ;
75597: POP
75598: POP
75599: GO 75605
// end ; end ;
75601: GO 75405
75603: POP
75604: POP
// end ;
75605: LD_VAR 0 2
75609: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
75610: LD_INT 0
75612: PPUSH
75613: PPUSH
75614: PPUSH
75615: PPUSH
75616: PPUSH
75617: PPUSH
75618: PPUSH
// if not mc_bases or not skirmish then
75619: NOP4
75623: NOT
75624: PUSH
75625: NOP4
75629: NOT
75630: OR
75631: IFFALSE 75635
// exit ;
75633: GO 76296
// for i = 1 to mc_bases do
75635: NOP4
75639: PUSH
75640: DOUBLE
75641: LD_INT 1
75643: DEC
75644: ST_TO_ADDR
75645: NOP4
75649: PUSH
75650: FOR_TO
75651: IFFALSE 76294
// begin if building in mc_construct_list [ i ] then
75653: NOP4
75657: PUSH
75658: NOP4
75662: PUSH
75663: NOP4
75667: ARRAY
75668: IN
75669: IFFALSE 76292
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
75671: NOP4
75675: PUSH
75676: NOP4
75680: PPUSH
75681: NOP4
75685: PPUSH
75686: NOP4
75690: PUSH
75691: NOP4
75695: ARRAY
75696: PUSH
75697: NOP4
75701: DIFF
75702: PPUSH
75703: NOP4
75707: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
75708: NOP4
75712: PUSH
75713: NOP4
75717: PPUSH
75718: NOP4
75722: PUSH
75723: NOP4
75727: PUSH
75728: NOP4
75732: ARRAY
75733: PUSH
75734: LD_INT 1
75736: PLUS
75737: PUSH
75738: EMPTY
75739: LIST
75740: LIST
75741: PPUSH
75742: NOP4
75746: PPUSH
75747: NOP4
75751: ST_TO_ADDR
// btype := GetBType ( building ) ;
75752: NOP4
75756: PUSH
75757: NOP4
75761: PPUSH
75762: NOP4
75766: ST_TO_ADDR
// side := GetSide ( building ) ;
75767: NOP4
75771: PUSH
75772: NOP4
75776: PPUSH
75777: NOP4
75781: ST_TO_ADDR
// if btype = b_lab then
75782: NOP4
75786: PUSH
75787: LD_INT 6
75789: EQUAL
75790: IFFALSE 75840
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
75792: NOP4
75796: PUSH
75797: NOP4
75801: PPUSH
75802: NOP4
75806: PUSH
75807: NOP4
75811: PUSH
75812: NOP4
75816: ARRAY
75817: PUSH
75818: LD_INT 1
75820: PLUS
75821: PUSH
75822: EMPTY
75823: LIST
75824: LIST
75825: PPUSH
75826: NOP4
75830: PPUSH
75831: NOP4
75835: ST_TO_ADDR
// exit ;
75836: POP
75837: POP
75838: GO 76296
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
75840: NOP4
75844: PUSH
75845: LD_INT 0
75847: PUSH
75848: LD_INT 2
75850: PUSH
75851: LD_INT 4
75853: PUSH
75854: EMPTY
75855: LIST
75856: LIST
75857: LIST
75858: IN
75859: IFFALSE 75983
// begin if btype = b_armoury then
75861: NOP4
75865: PUSH
75866: LD_INT 4
75868: EQUAL
75869: IFFALSE 75879
// btype := b_barracks ;
75871: NOP4
75875: PUSH
75876: LD_INT 5
75878: ST_TO_ADDR
// if btype = b_depot then
75879: NOP4
75883: PUSH
75884: LD_INT 0
75886: EQUAL
75887: IFFALSE 75897
// btype := b_warehouse ;
75889: NOP4
75893: PUSH
75894: LD_INT 1
75896: ST_TO_ADDR
// if btype = b_workshop then
75897: NOP4
75901: PUSH
75902: LD_INT 2
75904: EQUAL
75905: IFFALSE 75915
// btype := b_factory ;
75907: NOP4
75911: PUSH
75912: LD_INT 3
75914: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
75915: NOP4
75919: PPUSH
75920: NOP4
75924: PPUSH
75925: NOP4
75929: PUSH
75930: LD_INT 1
75932: EQUAL
75933: IFFALSE 75979
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
75935: NOP4
75939: PUSH
75940: NOP4
75944: PPUSH
75945: NOP4
75949: PUSH
75950: NOP4
75954: PUSH
75955: NOP4
75959: ARRAY
75960: PUSH
75961: LD_INT 1
75963: PLUS
75964: PUSH
75965: EMPTY
75966: LIST
75967: LIST
75968: PPUSH
75969: NOP4
75973: PPUSH
75974: NOP4
75978: ST_TO_ADDR
// exit ;
75979: POP
75980: POP
75981: GO 76296
// end ; if btype in [ b_bunker , b_turret ] then
75983: NOP4
75987: PUSH
75988: LD_INT 32
75990: PUSH
75991: LD_INT 33
75993: PUSH
75994: EMPTY
75995: LIST
75996: LIST
75997: IN
75998: IFFALSE 76288
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
76000: NOP4
76004: PUSH
76005: NOP4
76009: PPUSH
76010: NOP4
76014: PUSH
76015: NOP4
76019: PUSH
76020: NOP4
76024: ARRAY
76025: PUSH
76026: LD_INT 1
76028: PLUS
76029: PUSH
76030: EMPTY
76031: LIST
76032: LIST
76033: PPUSH
76034: NOP4
76038: PPUSH
76039: NOP4
76043: ST_TO_ADDR
// if btype = b_bunker then
76044: NOP4
76048: PUSH
76049: LD_INT 32
76051: EQUAL
76052: IFFALSE 76288
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
76054: NOP4
76058: PUSH
76059: NOP4
76063: PPUSH
76064: NOP4
76068: PUSH
76069: NOP4
76073: PUSH
76074: NOP4
76078: ARRAY
76079: PUSH
76080: LD_INT 1
76082: PLUS
76083: PUSH
76084: EMPTY
76085: LIST
76086: LIST
76087: PPUSH
76088: NOP4
76092: PPUSH
76093: NOP4
76097: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
76098: NOP4
76102: PUSH
76103: NOP4
76107: PUSH
76108: NOP4
76112: ARRAY
76113: PPUSH
76114: LD_INT 25
76116: PUSH
76117: LD_INT 1
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: PUSH
76124: LD_INT 3
76126: PUSH
76127: LD_INT 54
76129: PUSH
76130: EMPTY
76131: LIST
76132: PUSH
76133: EMPTY
76134: LIST
76135: LIST
76136: PUSH
76137: EMPTY
76138: LIST
76139: LIST
76140: PPUSH
76141: NOP4
76145: ST_TO_ADDR
// if tmp then
76146: NOP4
76150: IFFALSE 76156
// exit ;
76152: POP
76153: POP
76154: GO 76296
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
76156: NOP4
76160: PUSH
76161: NOP4
76165: PUSH
76166: NOP4
76170: ARRAY
76171: PPUSH
76172: LD_INT 2
76174: PUSH
76175: LD_INT 30
76177: PUSH
76178: LD_INT 4
76180: PUSH
76181: EMPTY
76182: LIST
76183: LIST
76184: PUSH
76185: LD_INT 30
76187: PUSH
76188: LD_INT 5
76190: PUSH
76191: EMPTY
76192: LIST
76193: LIST
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: LIST
76199: PPUSH
76200: NOP4
76204: ST_TO_ADDR
// if not tmp then
76205: NOP4
76209: NOT
76210: IFFALSE 76216
// exit ;
76212: POP
76213: POP
76214: GO 76296
// for j in tmp do
76216: NOP4
76220: PUSH
76221: NOP4
76225: PUSH
76226: FOR_IN
76227: IFFALSE 76286
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
76229: NOP4
76233: PUSH
76234: NOP4
76238: PPUSH
76239: NOP4
76243: PPUSH
76244: LD_INT 25
76246: PUSH
76247: LD_INT 1
76249: PUSH
76250: EMPTY
76251: LIST
76252: LIST
76253: PPUSH
76254: NOP4
76258: ST_TO_ADDR
// if units then
76259: NOP4
76263: IFFALSE 76284
// begin ComExitBuilding ( units [ 1 ] ) ;
76265: NOP4
76269: PUSH
76270: LD_INT 1
76272: ARRAY
76273: PPUSH
76274: NOP4
// exit ;
76278: POP
76279: POP
76280: POP
76281: POP
76282: GO 76296
// end ; end ;
76284: GO 76226
76286: POP
76287: POP
// end ; end ; exit ;
76288: POP
76289: POP
76290: GO 76296
// end ; end ;
76292: GO 75650
76294: POP
76295: POP
// end ;
76296: LD_VAR 0 2
76300: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
76301: LD_INT 0
76303: PPUSH
76304: PPUSH
76305: PPUSH
76306: PPUSH
76307: PPUSH
76308: PPUSH
76309: PPUSH
// if not mc_bases or not skirmish then
76310: NOP4
76314: NOT
76315: PUSH
76316: NOP4
76320: NOT
76321: OR
76322: IFFALSE 76326
// exit ;
76324: GO 76557
// btype := GetBType ( building ) ;
76326: NOP4
76330: PUSH
76331: NOP4
76335: PPUSH
76336: NOP4
76340: ST_TO_ADDR
// x := GetX ( building ) ;
76341: NOP4
76345: PUSH
76346: NOP4
76350: PPUSH
76351: NOP4
76355: ST_TO_ADDR
// y := GetY ( building ) ;
76356: NOP4
76360: PUSH
76361: NOP4
76365: PPUSH
76366: NOP4
76370: ST_TO_ADDR
// d := GetDir ( building ) ;
76371: NOP4
76375: PUSH
76376: NOP4
76380: PPUSH
76381: NOP4
76385: ST_TO_ADDR
// for i = 1 to mc_bases do
76386: NOP4
76390: PUSH
76391: DOUBLE
76392: LD_INT 1
76394: DEC
76395: ST_TO_ADDR
76396: NOP4
76400: PUSH
76401: FOR_TO
76402: IFFALSE 76555
// begin if not mc_build_list [ i ] then
76404: NOP4
76408: PUSH
76409: NOP4
76413: ARRAY
76414: NOT
76415: IFFALSE 76419
// continue ;
76417: GO 76401
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
76419: NOP4
76423: PUSH
76424: NOP4
76428: PUSH
76429: NOP4
76433: PUSH
76434: NOP4
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: LIST
76443: LIST
76444: PPUSH
76445: NOP4
76449: PUSH
76450: NOP4
76454: ARRAY
76455: PUSH
76456: LD_INT 1
76458: ARRAY
76459: PPUSH
76460: NOP4
76464: IFFALSE 76553
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
76466: NOP4
76470: PUSH
76471: NOP4
76475: PPUSH
76476: NOP4
76480: PPUSH
76481: NOP4
76485: PUSH
76486: NOP4
76490: ARRAY
76491: PPUSH
76492: LD_INT 1
76494: PPUSH
76495: NOP4
76499: PPUSH
76500: NOP4
76504: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
76505: NOP4
76509: PUSH
76510: NOP4
76514: PPUSH
76515: NOP4
76519: PUSH
76520: NOP4
76524: PUSH
76525: NOP4
76529: ARRAY
76530: PUSH
76531: LD_INT 1
76533: PLUS
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: PPUSH
76539: NOP4
76543: PPUSH
76544: NOP4
76548: ST_TO_ADDR
// exit ;
76549: POP
76550: POP
76551: GO 76557
// end ; end ;
76553: GO 76401
76555: POP
76556: POP
// end ;
76557: LD_VAR 0 3
76561: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
76562: LD_INT 0
76564: PPUSH
76565: PPUSH
76566: PPUSH
// if not mc_bases or not skirmish then
76567: NOP4
76571: NOT
76572: PUSH
76573: NOP4
76577: NOT
76578: OR
76579: IFFALSE 76583
// exit ;
76581: GO 76773
// for i = 1 to mc_bases do
76583: NOP4
76587: PUSH
76588: DOUBLE
76589: LD_INT 1
76591: DEC
76592: ST_TO_ADDR
76593: NOP4
76597: PUSH
76598: FOR_TO
76599: IFFALSE 76686
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
76601: NOP4
76605: PUSH
76606: NOP4
76610: PUSH
76611: NOP4
76615: ARRAY
76616: IN
76617: PUSH
76618: NOP4
76622: PUSH
76623: NOP4
76627: PUSH
76628: NOP4
76632: ARRAY
76633: IN
76634: NOT
76635: AND
76636: IFFALSE 76684
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
76638: NOP4
76642: PUSH
76643: NOP4
76647: PPUSH
76648: NOP4
76652: PUSH
76653: NOP4
76657: PUSH
76658: NOP4
76662: ARRAY
76663: PUSH
76664: LD_INT 1
76666: PLUS
76667: PUSH
76668: EMPTY
76669: LIST
76670: LIST
76671: PPUSH
76672: NOP4
76676: PPUSH
76677: NOP4
76681: ST_TO_ADDR
// break ;
76682: GO 76686
// end ; end ;
76684: GO 76598
76686: POP
76687: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
76688: NOP4
76692: PPUSH
76693: NOP4
76697: PUSH
76698: NOP4
76702: IN
76703: PUSH
76704: NOP4
76708: PPUSH
76709: NOP4
76713: PUSH
76714: LD_INT 5
76716: EQUAL
76717: AND
76718: PUSH
76719: NOP4
76723: PPUSH
76724: NOP4
76728: PUSH
76729: LD_INT 18
76731: NONEQUAL
76732: AND
76733: IFFALSE 76773
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
76735: NOP4
76739: PPUSH
76740: NOP4
76744: PUSH
76745: LD_INT 5
76747: PUSH
76748: LD_INT 8
76750: PUSH
76751: LD_INT 9
76753: PUSH
76754: EMPTY
76755: LIST
76756: LIST
76757: LIST
76758: IN
76759: IFFALSE 76773
// SetClass ( unit , 1 ) ;
76761: NOP4
76765: PPUSH
76766: LD_INT 1
76768: PPUSH
76769: NOP4
// end ;
76773: LD_VAR 0 3
76777: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
76778: LD_INT 0
76780: PPUSH
76781: PPUSH
// if not mc_bases or not skirmish then
76782: NOP4
76786: NOT
76787: PUSH
76788: NOP4
76792: NOT
76793: OR
76794: IFFALSE 76798
// exit ;
76796: GO 76914
// if GetLives ( abandoned_vehicle ) > 250 then
76798: NOP4
76802: PPUSH
76803: NOP4
76807: PUSH
76808: LD_INT 250
76810: GREATER
76811: IFFALSE 76815
// exit ;
76813: GO 76914
// for i = 1 to mc_bases do
76815: NOP4
76819: PUSH
76820: DOUBLE
76821: LD_INT 1
76823: DEC
76824: ST_TO_ADDR
76825: NOP4
76829: PUSH
76830: FOR_TO
76831: IFFALSE 76912
// begin if driver in mc_bases [ i ] then
76833: NOP4
76837: PUSH
76838: NOP4
76842: PUSH
76843: NOP4
76847: ARRAY
76848: IN
76849: IFFALSE 76910
// begin ComMoveToNearbyEntrance ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
76851: NOP4
76855: PPUSH
76856: NOP4
76860: PUSH
76861: NOP4
76865: ARRAY
76866: PPUSH
76867: LD_INT 2
76869: PUSH
76870: LD_INT 30
76872: PUSH
76873: LD_INT 0
76875: PUSH
76876: EMPTY
76877: LIST
76878: LIST
76879: PUSH
76880: LD_INT 30
76882: PUSH
76883: LD_INT 1
76885: PUSH
76886: EMPTY
76887: LIST
76888: LIST
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: LIST
76894: PPUSH
76895: NOP4
76899: PUSH
76900: LD_INT 1
76902: ARRAY
76903: PPUSH
76904: NOP4
// break ;
76908: GO 76912
// end ; end ;
76910: GO 76830
76912: POP
76913: POP
// end ; end_of_file
76914: LD_VAR 0 5
76918: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
76919: LD_INT 0
76921: PPUSH
// ar_miner := 81 ;
76922: NOP4
76926: PUSH
76927: LD_INT 81
76929: ST_TO_ADDR
// ar_crane := 88 ;
76930: NOP4
76934: PUSH
76935: LD_INT 88
76937: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
76938: NOP4
76942: PUSH
76943: LD_INT 89
76945: ST_TO_ADDR
// us_hack := 99 ;
76946: NOP4
76950: PUSH
76951: LD_INT 99
76953: ST_TO_ADDR
// us_artillery := 97 ;
76954: NOP4
76958: PUSH
76959: LD_INT 97
76961: ST_TO_ADDR
// ar_bio_bomb := 91 ;
76962: NOP4
76966: PUSH
76967: LD_INT 91
76969: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
76970: NOP4
76974: PUSH
76975: LD_INT 92
76977: ST_TO_ADDR
// ru_radar := 98 ;
76978: NOP4
76982: PUSH
76983: LD_INT 98
76985: ST_TO_ADDR
// tech_Artillery := 80 ;
76986: NOP4
76990: PUSH
76991: LD_INT 80
76993: ST_TO_ADDR
// tech_RadMat := 81 ;
76994: NOP4
76998: PUSH
76999: LD_INT 81
77001: ST_TO_ADDR
// tech_BasicTools := 82 ;
77002: NOP4
77006: PUSH
77007: LD_INT 82
77009: ST_TO_ADDR
// tech_Cargo := 83 ;
77010: NOP4
77014: PUSH
77015: LD_INT 83
77017: ST_TO_ADDR
// tech_Track := 84 ;
77018: NOP4
77022: PUSH
77023: LD_INT 84
77025: ST_TO_ADDR
// tech_Crane := 85 ;
77026: NOP4
77030: PUSH
77031: LD_INT 85
77033: ST_TO_ADDR
// tech_Bulldozer := 86 ;
77034: NOP4
77038: PUSH
77039: LD_INT 86
77041: ST_TO_ADDR
// tech_Hovercraft := 87 ;
77042: NOP4
77046: PUSH
77047: LD_INT 87
77049: ST_TO_ADDR
// end ;
77050: LD_VAR 0 1
77054: RET
// every 1 do
77055: GO 77057
77057: DISABLE
// InitGlobalVariables ;
77058: NOP4
77062: END
