// starting var tab ; begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitHc ;
   8: CALL_OW 19
// InitUc ;
  12: CALL_OW 18
// InitBc ;
  16: CALL_OW 21
// InitVariables ;
  20: CALL 318 0 0
// InitMultiplayer ;
  24: CALL 571 0 0
// InitMacro ;
  28: CALL 47287 0 0
// if debug then
  32: LD_EXP 1
  36: IFFALSE 45
// FogOff ( 1 ) ;
  38: LD_INT 1
  40: PPUSH
  41: CALL_OW 344
// PrepareNature ( 3 , 3 , 9 , 2 , 2 , 1 , 5 , natureArea , waterArea ) ;
  45: LD_INT 3
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 9
  53: PPUSH
  54: LD_INT 2
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 5
  65: PPUSH
  66: LD_INT 18
  68: PPUSH
  69: LD_INT 19
  71: PPUSH
  72: CALL 43108 0 9
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  76: LD_INT 2
  78: PPUSH
  79: CALL 1795 0 1
  83: PPUSH
  84: CALL 5763 0 1
// Multiplayer_Start ;
  88: CALL 3672 0 0
// MC_Start ( ) ;
  92: CALL 47500 0 0
// Multiplayer_End ;
  96: CALL 3796 0 0
// end ;
 100: END
// export function CustomInitMacro ; var i ; begin
 101: LD_INT 0
 103: PPUSH
 104: PPUSH
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
 105: LD_INT 1
 107: PPUSH
 108: LD_INT 8
 110: PUSH
 111: LD_INT 10
 113: PUSH
 114: LD_INT 12
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: PUSH
 122: LD_OWVAR 67
 126: ARRAY
 127: PPUSH
 128: LD_INT 3
 130: PPUSH
 131: CALL 60492 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 135: LD_INT 2
 137: PPUSH
 138: LD_INT 6
 140: PUSH
 141: LD_INT 8
 143: PUSH
 144: LD_INT 9
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: LIST
 151: PUSH
 152: LD_OWVAR 67
 156: ARRAY
 157: PPUSH
 158: LD_INT 2
 160: PPUSH
 161: CALL 60492 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 165: LD_INT 3
 167: PPUSH
 168: LD_INT 6
 170: PUSH
 171: LD_INT 7
 173: PUSH
 174: LD_INT 9
 176: PUSH
 177: EMPTY
 178: LIST
 179: LIST
 180: LIST
 181: PUSH
 182: LD_OWVAR 67
 186: ARRAY
 187: PPUSH
 188: LD_INT 1
 190: PPUSH
 191: CALL 60492 0 3
// MC_SetMinesField ( 4 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield4_left ) ;
 195: LD_INT 4
 197: PPUSH
 198: LD_INT 6
 200: PUSH
 201: LD_INT 7
 203: PUSH
 204: LD_INT 9
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: LIST
 211: PUSH
 212: LD_OWVAR 67
 216: ARRAY
 217: PPUSH
 218: LD_INT 25
 220: PPUSH
 221: CALL 60492 0 3
// mc_parking := [ parking_north , parking_west , parking_east , parking_south ] ;
 225: LD_ADDR_EXP 65
 229: PUSH
 230: LD_INT 20
 232: PUSH
 233: LD_INT 21
 235: PUSH
 236: LD_INT 22
 238: PUSH
 239: LD_INT 24
 241: PUSH
 242: EMPTY
 243: LIST
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// mc_scan_area := [ area_base_north , area_base_west , area_base_east , area_base_south ] ;
 248: LD_ADDR_EXP 66
 252: PUSH
 253: LD_INT 35
 255: PUSH
 256: LD_INT 34
 258: PUSH
 259: LD_INT 36
 261: PUSH
 262: LD_INT 33
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: ST_TO_ADDR
// for i = 1 to mc_bases do
 271: LD_ADDR_VAR 0 2
 275: PUSH
 276: DOUBLE
 277: LD_INT 1
 279: DEC
 280: ST_TO_ADDR
 281: LD_EXP 41
 285: PUSH
 286: FOR_TO
 287: IFFALSE 311
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 289: LD_VAR 0 2
 293: PPUSH
 294: LD_EXP 37
 298: PUSH
 299: LD_VAR 0 2
 303: ARRAY
 304: PPUSH
 305: CALL 60861 0 2
 309: GO 286
 311: POP
 312: POP
// end ;
 313: LD_VAR 0 1
 317: RET
// export debug , game , side_bot , artifact_get , base_names ; function InitVariables ; begin
 318: LD_INT 0
 320: PPUSH
// debug := false ;
 321: LD_ADDR_EXP 1
 325: PUSH
 326: LD_INT 0
 328: ST_TO_ADDR
// side_bot := 2 ;
 329: LD_ADDR_EXP 3
 333: PUSH
 334: LD_INT 2
 336: ST_TO_ADDR
// artifact_get := false ;
 337: LD_ADDR_EXP 4
 341: PUSH
 342: LD_INT 0
 344: ST_TO_ADDR
// base_names := [ base_a , base_b , base_c , base_d , base_e , base_f , base_g , base_h , base_i , base_j , base_k , base_l , base_m , base_n , base_o , base_p , base_r , base_s , base_t , base_u , base_w , base_x , base_y , base_z ] ;
 345: LD_ADDR_EXP 5
 349: PUSH
 350: LD_STRING base_a
 352: PUSH
 353: LD_STRING base_b
 355: PUSH
 356: LD_STRING base_c
 358: PUSH
 359: LD_STRING base_d
 361: PUSH
 362: LD_STRING base_e
 364: PUSH
 365: LD_STRING base_f
 367: PUSH
 368: LD_STRING base_g
 370: PUSH
 371: LD_STRING base_h
 373: PUSH
 374: LD_STRING base_i
 376: PUSH
 377: LD_STRING base_j
 379: PUSH
 380: LD_STRING base_k
 382: PUSH
 383: LD_STRING base_l
 385: PUSH
 386: LD_STRING base_m
 388: PUSH
 389: LD_STRING base_n
 391: PUSH
 392: LD_STRING base_o
 394: PUSH
 395: LD_STRING base_p
 397: PUSH
 398: LD_STRING base_r
 400: PUSH
 401: LD_STRING base_s
 403: PUSH
 404: LD_STRING base_t
 406: PUSH
 407: LD_STRING base_u
 409: PUSH
 410: LD_STRING base_w
 412: PUSH
 413: LD_STRING base_x
 415: PUSH
 416: LD_STRING base_y
 418: PUSH
 419: LD_STRING base_z
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// end ;
 448: LD_VAR 0 1
 452: RET
// every 0 0$01 trigger game and not debug_strings do
 453: LD_EXP 2
 457: PUSH
 458: LD_OWVAR 48
 462: NOT
 463: AND
 464: IFFALSE 480
 466: GO 468
 468: DISABLE
// begin enable ;
 469: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 470: LD_ADDR_OWVAR 47
 474: PUSH
 475: CALL 4497 0 0
 479: ST_TO_ADDR
// end ;
 480: END
// function Debuger ; var i ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// if not debug then
 485: LD_EXP 1
 489: NOT
 490: IFFALSE 494
// exit ;
 492: GO 566
// game_speed := 5 ;
 494: LD_ADDR_OWVAR 65
 498: PUSH
 499: LD_INT 5
 501: ST_TO_ADDR
// uc_side := 1 ;
 502: LD_ADDR_OWVAR 20
 506: PUSH
 507: LD_INT 1
 509: ST_TO_ADDR
// uc_nation := 1 ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_INT 1
 517: ST_TO_ADDR
// for i = 1 to 10 do
 518: LD_ADDR_VAR 0 2
 522: PUSH
 523: DOUBLE
 524: LD_INT 1
 526: DEC
 527: ST_TO_ADDR
 528: LD_INT 10
 530: PUSH
 531: FOR_TO
 532: IFFALSE 564
// begin PrepareHuman ( false , 1 , 10 ) ;
 534: LD_INT 0
 536: PPUSH
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 10
 542: PPUSH
 543: CALL_OW 380
// PlaceUnitArea ( CreateHuman , player_1_hum , false ) ;
 547: CALL_OW 44
 551: PPUSH
 552: LD_INT 9
 554: PPUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 49
// end ;
 562: GO 531
 564: POP
 565: POP
// end ; end_of_file
 566: LD_VAR 0 1
 570: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_ape_amount , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_reinforcements_spawned ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
 577: PPUSH
// multi_settings_counter := 6 ;
 578: LD_ADDR_EXP 18
 582: PUSH
 583: LD_INT 6
 585: ST_TO_ADDR
// if multiplayer then
 586: LD_OWVAR 4
 590: IFFALSE 714
// begin your_side := mp_player_side ;
 592: LD_ADDR_OWVAR 2
 596: PUSH
 597: LD_OWVAR 7
 601: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 602: LD_ADDR_EXP 6
 606: PUSH
 607: LD_OWVAR 6
 611: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 612: LD_ADDR_EXP 7
 616: PUSH
 617: LD_OWVAR 17
 621: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 622: LD_ADDR_EXP 8
 626: PUSH
 627: LD_OWVAR 15
 631: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 632: LD_ADDR_EXP 9
 636: PUSH
 637: LD_OWVAR 16
 641: ST_TO_ADDR
// multi_teams := mp_teams ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_OWVAR 12
 651: ST_TO_ADDR
// for i = 1 to multi_settings_counter do
 652: LD_ADDR_VAR 0 2
 656: PUSH
 657: DOUBLE
 658: LD_INT 1
 660: DEC
 661: ST_TO_ADDR
 662: LD_EXP 18
 666: PUSH
 667: FOR_TO
 668: IFFALSE 710
// multi_settings := Insert ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 670: LD_ADDR_EXP 17
 674: PUSH
 675: LD_EXP 17
 679: PPUSH
 680: LD_EXP 17
 684: PUSH
 685: LD_INT 1
 687: PLUS
 688: PPUSH
 689: LD_VAR 0 2
 693: PPUSH
 694: CALL_OW 426
 698: PUSH
 699: LD_INT 1
 701: PLUS
 702: PPUSH
 703: CALL_OW 2
 707: ST_TO_ADDR
 708: GO 667
 710: POP
 711: POP
// end else
 712: GO 900
// begin your_side := 1 ;
 714: LD_ADDR_OWVAR 2
 718: PUSH
 719: LD_INT 1
 721: ST_TO_ADDR
// multi_gametype := 1 ;
 722: LD_ADDR_EXP 6
 726: PUSH
 727: LD_INT 1
 729: ST_TO_ADDR
// multi_sides := [ 2 , 0 , 0 , 3 , 0 , 0 , 1 , 0 ] ;
 730: LD_ADDR_EXP 7
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 3
 746: PUSH
 747: LD_INT 0
 749: PUSH
 750: LD_INT 0
 752: PUSH
 753: LD_INT 1
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: ST_TO_ADDR
// multi_side_teams := [ 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 ] ;
 769: LD_ADDR_EXP 8
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 0
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 1
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: LD_INT 1
 794: PUSH
 795: LD_INT 0
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// multi_nations := [ 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 ] ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: LD_INT 0
 827: PUSH
 828: LD_INT 0
 830: PUSH
 831: LD_INT 1
 833: PUSH
 834: LD_INT 0
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: LIST
 844: LIST
 845: LIST
 846: ST_TO_ADDR
// multi_teams := [ [ 1 , 4 , 7 ] ] ;
 847: LD_ADDR_EXP 10
 851: PUSH
 852: LD_INT 1
 854: PUSH
 855: LD_INT 4
 857: PUSH
 858: LD_INT 7
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: EMPTY
 867: LIST
 868: ST_TO_ADDR
// multi_settings := [ 2 , 2 , 1 , 3 , 1 , 1 ] ;
 869: LD_ADDR_EXP 17
 873: PUSH
 874: LD_INT 2
 876: PUSH
 877: LD_INT 2
 879: PUSH
 880: LD_INT 1
 882: PUSH
 883: LD_INT 3
 885: PUSH
 886: LD_INT 1
 888: PUSH
 889: LD_INT 1
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 900: LD_ADDR_EXP 11
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: LD_INT 0
 910: PUSH
 911: LD_INT 0
 913: PUSH
 914: LD_INT 0
 916: PUSH
 917: LD_INT 0
 919: PUSH
 920: LD_INT 0
 922: PUSH
 923: LD_INT 0
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: LIST
 937: LIST
 938: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 939: LD_ADDR_EXP 14
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: LD_INT 0
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 0
 955: PUSH
 956: LD_INT 0
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 0
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: LIST
 977: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 978: LD_ADDR_EXP 25
 982: PUSH
 983: LD_INT 0
 985: PUSH
 986: LD_INT 0
 988: PUSH
 989: LD_INT 0
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 0
1003: PUSH
1004: LD_INT 0
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: ST_TO_ADDR
// multi_teamgame := true ;
1017: LD_ADDR_EXP 15
1021: PUSH
1022: LD_INT 1
1024: ST_TO_ADDR
// multi_allowed_nations := [ 1 ] ;
1025: LD_ADDR_EXP 13
1029: PUSH
1030: LD_INT 1
1032: PUSH
1033: EMPTY
1034: LIST
1035: ST_TO_ADDR
// multi_custom_commanders := true ;
1036: LD_ADDR_EXP 16
1040: PUSH
1041: LD_INT 1
1043: ST_TO_ADDR
// multi_commanders := [ ] ;
1044: LD_ADDR_EXP 24
1048: PUSH
1049: EMPTY
1050: ST_TO_ADDR
// multi_reinforcements := [ ] ;
1051: LD_ADDR_EXP 27
1055: PUSH
1056: EMPTY
1057: ST_TO_ADDR
// multi_reinforcements_spawned := 0 ;
1058: LD_ADDR_EXP 28
1062: PUSH
1063: LD_INT 0
1065: ST_TO_ADDR
// multi_players_amount := 0 ;
1066: LD_ADDR_EXP 26
1070: PUSH
1071: LD_INT 0
1073: ST_TO_ADDR
// multi_pos_area := [ [ player_1_hum , player_1_veh ] , [ player_2_hum , player_2_veh ] , [ player_3_hum , player_3_veh ] ] ;
1074: LD_ADDR_EXP 12
1078: PUSH
1079: LD_INT 9
1081: PUSH
1082: LD_INT 8
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 27
1091: PUSH
1092: LD_INT 26
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 29
1101: PUSH
1102: LD_INT 28
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: LIST
1113: ST_TO_ADDR
// for i = 1 to 8 do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 8
1126: PUSH
1127: FOR_TO
1128: IFFALSE 1457
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
1130: LD_VAR 0 2
1134: PPUSH
1135: CALL_OW 530
1139: IFFALSE 1297
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
1141: LD_ADDR_EXP 11
1145: PUSH
1146: LD_EXP 11
1150: PPUSH
1151: LD_VAR 0 2
1155: PPUSH
1156: LD_INT 1
1158: PPUSH
1159: CALL_OW 1
1163: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
1164: LD_ADDR_EXP 9
1168: PUSH
1169: LD_EXP 9
1173: PPUSH
1174: LD_VAR 0 2
1178: PPUSH
1179: LD_INT 0
1181: PPUSH
1182: CALL_OW 1
1186: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1187: LD_ADDR_EXP 7
1191: PUSH
1192: LD_EXP 7
1196: PPUSH
1197: LD_VAR 0 2
1201: PPUSH
1202: LD_INT 0
1204: PPUSH
1205: CALL_OW 1
1209: ST_TO_ADDR
// for j = 1 to multi_teams do
1210: LD_ADDR_VAR 0 3
1214: PUSH
1215: DOUBLE
1216: LD_INT 1
1218: DEC
1219: ST_TO_ADDR
1220: LD_EXP 10
1224: PUSH
1225: FOR_TO
1226: IFFALSE 1295
// begin if i in multi_teams [ j ] then
1228: LD_VAR 0 2
1232: PUSH
1233: LD_EXP 10
1237: PUSH
1238: LD_VAR 0 3
1242: ARRAY
1243: IN
1244: IFFALSE 1293
// begin tmp := multi_teams [ j ] diff i ;
1246: LD_ADDR_VAR 0 5
1250: PUSH
1251: LD_EXP 10
1255: PUSH
1256: LD_VAR 0 3
1260: ARRAY
1261: PUSH
1262: LD_VAR 0 2
1266: DIFF
1267: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1268: LD_ADDR_EXP 10
1272: PUSH
1273: LD_EXP 10
1277: PPUSH
1278: LD_VAR 0 3
1282: PPUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: CALL_OW 1
1292: ST_TO_ADDR
// end ; end ;
1293: GO 1225
1295: POP
1296: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1297: LD_EXP 9
1301: PUSH
1302: LD_VAR 0 2
1306: ARRAY
1307: PUSH
1308: LD_EXP 9
1312: PUSH
1313: LD_VAR 0 2
1317: ARRAY
1318: PUSH
1319: LD_EXP 13
1323: IN
1324: NOT
1325: AND
1326: IFFALSE 1367
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1328: LD_ADDR_EXP 9
1332: PUSH
1333: LD_EXP 9
1337: PPUSH
1338: LD_VAR 0 2
1342: PPUSH
1343: LD_EXP 13
1347: PUSH
1348: LD_INT 1
1350: PPUSH
1351: LD_EXP 13
1355: PPUSH
1356: CALL_OW 12
1360: ARRAY
1361: PPUSH
1362: CALL_OW 1
1366: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1367: LD_EXP 9
1371: PUSH
1372: LD_VAR 0 2
1376: ARRAY
1377: NOT
1378: PUSH
1379: LD_EXP 7
1383: PUSH
1384: LD_VAR 0 2
1388: ARRAY
1389: NOT
1390: AND
1391: PUSH
1392: LD_EXP 11
1396: PUSH
1397: LD_VAR 0 2
1401: ARRAY
1402: NOT
1403: AND
1404: IFFALSE 1429
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1406: LD_ADDR_EXP 14
1410: PUSH
1411: LD_EXP 14
1415: PPUSH
1416: LD_VAR 0 2
1420: PPUSH
1421: LD_INT 1
1423: PPUSH
1424: CALL_OW 1
1428: ST_TO_ADDR
// if multi_sides [ i ] then
1429: LD_EXP 7
1433: PUSH
1434: LD_VAR 0 2
1438: ARRAY
1439: IFFALSE 1455
// multi_players_amount := multi_players_amount + 1 ;
1441: LD_ADDR_EXP 26
1445: PUSH
1446: LD_EXP 26
1450: PUSH
1451: LD_INT 1
1453: PLUS
1454: ST_TO_ADDR
// end ;
1455: GO 1127
1457: POP
1458: POP
// for i in multi_teams do
1459: LD_ADDR_VAR 0 2
1463: PUSH
1464: LD_EXP 10
1468: PUSH
1469: FOR_IN
1470: IFFALSE 1578
// begin for j = 2 to i do
1472: LD_ADDR_VAR 0 3
1476: PUSH
1477: DOUBLE
1478: LD_INT 2
1480: DEC
1481: ST_TO_ADDR
1482: LD_VAR 0 2
1486: PUSH
1487: FOR_TO
1488: IFFALSE 1574
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1490: LD_VAR 0 2
1494: PUSH
1495: LD_VAR 0 3
1499: ARRAY
1500: PPUSH
1501: LD_VAR 0 2
1505: PUSH
1506: LD_INT 1
1508: ARRAY
1509: PPUSH
1510: CALL_OW 343
// for x = 1 to j - 1 do
1514: LD_ADDR_VAR 0 4
1518: PUSH
1519: DOUBLE
1520: LD_INT 1
1522: DEC
1523: ST_TO_ADDR
1524: LD_VAR 0 3
1528: PUSH
1529: LD_INT 1
1531: MINUS
1532: PUSH
1533: FOR_TO
1534: IFFALSE 1570
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1536: LD_VAR 0 2
1540: PUSH
1541: LD_VAR 0 3
1545: ARRAY
1546: PPUSH
1547: LD_VAR 0 2
1551: PUSH
1552: LD_VAR 0 4
1556: ARRAY
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: CALL_OW 80
1568: GO 1533
1570: POP
1571: POP
// end ;
1572: GO 1487
1574: POP
1575: POP
// end ;
1576: GO 1469
1578: POP
1579: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1580: LD_ADDR_OWVAR 67
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 2
1590: PUSH
1591: LD_INT 3
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: LIST
1598: PUSH
1599: LD_EXP 17
1603: PUSH
1604: LD_INT 1
1606: ARRAY
1607: ARRAY
1608: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
1609: LD_ADDR_EXP 19
1613: PUSH
1614: LD_INT 9
1616: PUSH
1617: LD_INT 12
1619: PUSH
1620: LD_INT 15
1622: PUSH
1623: LD_INT 18
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_EXP 17
1636: PUSH
1637: LD_INT 2
1639: ARRAY
1640: ARRAY
1641: ST_TO_ADDR
// multi_skill_level := [ 5 , 7 , 9 ] [ multi_settings [ 3 ] ] ;
1642: LD_ADDR_EXP 20
1646: PUSH
1647: LD_INT 5
1649: PUSH
1650: LD_INT 7
1652: PUSH
1653: LD_INT 9
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: LIST
1660: PUSH
1661: LD_EXP 17
1665: PUSH
1666: LD_INT 3
1668: ARRAY
1669: ARRAY
1670: ST_TO_ADDR
// multi_crates_spawn := [ [ 6000 , 0 0$45 ] , [ 8000 , 0 0$36 ] , [ 10000 , 0 0$22 ] , [ 15000 , 0 0$22 ] ] [ multi_settings [ 4 ] ] ;
1671: LD_ADDR_EXP 21
1675: PUSH
1676: LD_INT 6000
1678: PUSH
1679: LD_INT 1575
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 8000
1688: PUSH
1689: LD_INT 1260
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 10000
1698: PUSH
1699: LD_INT 770
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 15000
1708: PUSH
1709: LD_INT 770
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: PUSH
1722: LD_EXP 17
1726: PUSH
1727: LD_INT 4
1729: ARRAY
1730: ARRAY
1731: ST_TO_ADDR
// multi_ape_amount := [ 6 , 8 , 10 ] [ multi_settings [ 5 ] ] ;
1732: LD_ADDR_EXP 22
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: LD_INT 8
1742: PUSH
1743: LD_INT 10
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: LD_EXP 17
1755: PUSH
1756: LD_INT 5
1758: ARRAY
1759: ARRAY
1760: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1761: LD_ADDR_EXP 23
1765: PUSH
1766: LD_INT 0
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: LD_INT 2
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: PUSH
1780: LD_EXP 17
1784: PUSH
1785: LD_INT 6
1787: ARRAY
1788: ARRAY
1789: ST_TO_ADDR
// end ;
1790: LD_VAR 0 1
1794: RET
// export function Multiplayer_SetBotSide ( prefer_side ) ; var i ; begin
1795: LD_INT 0
1797: PPUSH
1798: PPUSH
// ResetFog ;
1799: CALL_OW 335
// if not multi_bots then
1803: LD_EXP 14
1807: NOT
1808: IFFALSE 1812
// exit ;
1810: GO 1884
// if multi_bots [ prefer_side ] then
1812: LD_EXP 14
1816: PUSH
1817: LD_VAR 0 1
1821: ARRAY
1822: IFFALSE 1836
// begin result := prefer_side ;
1824: LD_ADDR_VAR 0 2
1828: PUSH
1829: LD_VAR 0 1
1833: ST_TO_ADDR
// exit ;
1834: GO 1884
// end ; for i = 1 to multi_bots do
1836: LD_ADDR_VAR 0 3
1840: PUSH
1841: DOUBLE
1842: LD_INT 1
1844: DEC
1845: ST_TO_ADDR
1846: LD_EXP 14
1850: PUSH
1851: FOR_TO
1852: IFFALSE 1882
// if multi_bots [ i ] then
1854: LD_EXP 14
1858: PUSH
1859: LD_VAR 0 3
1863: ARRAY
1864: IFFALSE 1880
// begin result := i ;
1866: LD_ADDR_VAR 0 2
1870: PUSH
1871: LD_VAR 0 3
1875: ST_TO_ADDR
// exit ;
1876: POP
1877: POP
1878: GO 1884
// end ;
1880: GO 1851
1882: POP
1883: POP
// end ;
1884: LD_VAR 0 2
1888: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1889: LD_INT 0
1891: PPUSH
// uc_side := side ;
1892: LD_ADDR_OWVAR 20
1896: PUSH
1897: LD_VAR 0 1
1901: ST_TO_ADDR
// uc_nation := 1 ;
1902: LD_ADDR_OWVAR 21
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// hc_importance := 100 ;
1910: LD_ADDR_OWVAR 32
1914: PUSH
1915: LD_INT 100
1917: ST_TO_ADDR
// hc_class := 1 ;
1918: LD_ADDR_OWVAR 28
1922: PUSH
1923: LD_INT 1
1925: ST_TO_ADDR
// if num = 1 then
1926: LD_VAR 0 2
1930: PUSH
1931: LD_INT 1
1933: EQUAL
1934: IFFALSE 2016
// begin hc_gallery := us ;
1936: LD_ADDR_OWVAR 33
1940: PUSH
1941: LD_STRING us
1943: ST_TO_ADDR
// hc_face_number := 5 ;
1944: LD_ADDR_OWVAR 34
1948: PUSH
1949: LD_INT 5
1951: ST_TO_ADDR
// hc_name := John Macmilan ;
1952: LD_ADDR_OWVAR 26
1956: PUSH
1957: LD_STRING John Macmilan
1959: ST_TO_ADDR
// hc_sex := sex_male ;
1960: LD_ADDR_OWVAR 27
1964: PUSH
1965: LD_INT 1
1967: ST_TO_ADDR
// hc_skills := [ 7 , 2 , 4 , 4 ] ;
1968: LD_ADDR_OWVAR 31
1972: PUSH
1973: LD_INT 7
1975: PUSH
1976: LD_INT 2
1978: PUSH
1979: LD_INT 4
1981: PUSH
1982: LD_INT 4
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1991: LD_ADDR_OWVAR 29
1995: PUSH
1996: LD_INT 11
1998: PUSH
1999: LD_INT 10
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: ST_TO_ADDR
// result := CreateHuman ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: CALL_OW 44
2015: ST_TO_ADDR
// end ; if num = 2 then
2016: LD_VAR 0 2
2020: PUSH
2021: LD_INT 2
2023: EQUAL
2024: IFFALSE 2106
// begin hc_gallery := us ;
2026: LD_ADDR_OWVAR 33
2030: PUSH
2031: LD_STRING us
2033: ST_TO_ADDR
// hc_face_number := 2 ;
2034: LD_ADDR_OWVAR 34
2038: PUSH
2039: LD_INT 2
2041: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
2042: LD_ADDR_OWVAR 26
2046: PUSH
2047: LD_STRING Lucy Donaldson
2049: ST_TO_ADDR
// hc_sex := sex_female ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 2
2057: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 3 ] ;
2058: LD_ADDR_OWVAR 31
2062: PUSH
2063: LD_INT 6
2065: PUSH
2066: LD_INT 3
2068: PUSH
2069: LD_INT 4
2071: PUSH
2072: LD_INT 3
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: ST_TO_ADDR
// hc_attr := [ 9 , 12 ] ;
2081: LD_ADDR_OWVAR 29
2085: PUSH
2086: LD_INT 9
2088: PUSH
2089: LD_INT 12
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: ST_TO_ADDR
// result := CreateHuman ;
2096: LD_ADDR_VAR 0 3
2100: PUSH
2101: CALL_OW 44
2105: ST_TO_ADDR
// end ; if num = 3 then
2106: LD_VAR 0 2
2110: PUSH
2111: LD_INT 3
2113: EQUAL
2114: IFFALSE 2196
// begin hc_gallery := us ;
2116: LD_ADDR_OWVAR 33
2120: PUSH
2121: LD_STRING us
2123: ST_TO_ADDR
// hc_face_number := 16 ;
2124: LD_ADDR_OWVAR 34
2128: PUSH
2129: LD_INT 16
2131: ST_TO_ADDR
// hc_name := Peter van Houten ;
2132: LD_ADDR_OWVAR 26
2136: PUSH
2137: LD_STRING Peter van Houten
2139: ST_TO_ADDR
// hc_sex := sex_male ;
2140: LD_ADDR_OWVAR 27
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// hc_skills := [ 8 , 1 , 3 , 2 ] ;
2148: LD_ADDR_OWVAR 31
2152: PUSH
2153: LD_INT 8
2155: PUSH
2156: LD_INT 1
2158: PUSH
2159: LD_INT 3
2161: PUSH
2162: LD_INT 2
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2171: LD_ADDR_OWVAR 29
2175: PUSH
2176: LD_INT 10
2178: PUSH
2179: LD_INT 11
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: ST_TO_ADDR
// result := CreateHuman ;
2186: LD_ADDR_VAR 0 3
2190: PUSH
2191: CALL_OW 44
2195: ST_TO_ADDR
// end ; end ;
2196: LD_VAR 0 3
2200: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , cl , un , veh , tmp , copy , people_amount ; begin
2201: LD_INT 0
2203: PPUSH
2204: PPUSH
2205: PPUSH
2206: PPUSH
2207: PPUSH
2208: PPUSH
2209: PPUSH
2210: PPUSH
2211: PPUSH
// for i = 1 to 8 do
2212: LD_ADDR_VAR 0 2
2216: PUSH
2217: DOUBLE
2218: LD_INT 1
2220: DEC
2221: ST_TO_ADDR
2222: LD_INT 8
2224: PUSH
2225: FOR_TO
2226: IFFALSE 3116
// begin if not multi_sides [ i ] then
2228: LD_EXP 7
2232: PUSH
2233: LD_VAR 0 2
2237: ARRAY
2238: NOT
2239: IFFALSE 2243
// continue ;
2241: GO 2225
// if multi_custom_commanders then
2243: LD_EXP 16
2247: IFFALSE 2339
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2249: LD_ADDR_VAR 0 5
2253: PUSH
2254: LD_VAR 0 2
2258: PPUSH
2259: LD_EXP 7
2263: PUSH
2264: LD_VAR 0 2
2268: ARRAY
2269: PPUSH
2270: CALL 1889 0 2
2274: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2275: LD_ADDR_EXP 24
2279: PUSH
2280: LD_EXP 24
2284: PPUSH
2285: LD_EXP 24
2289: PUSH
2290: LD_INT 1
2292: PLUS
2293: PPUSH
2294: LD_VAR 0 5
2298: PPUSH
2299: CALL_OW 2
2303: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2304: LD_VAR 0 5
2308: PPUSH
2309: LD_EXP 12
2313: PUSH
2314: LD_EXP 7
2318: PUSH
2319: LD_VAR 0 2
2323: ARRAY
2324: ARRAY
2325: PUSH
2326: LD_INT 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 0
2332: PPUSH
2333: CALL_OW 49
// end else
2337: GO 2550
// begin uc_side := i ;
2339: LD_ADDR_OWVAR 20
2343: PUSH
2344: LD_VAR 0 2
2348: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2349: LD_ADDR_OWVAR 21
2353: PUSH
2354: LD_EXP 9
2358: PUSH
2359: LD_VAR 0 2
2363: ARRAY
2364: ST_TO_ADDR
// hc_importance := 100 ;
2365: LD_ADDR_OWVAR 32
2369: PUSH
2370: LD_INT 100
2372: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2373: LD_INT 0
2375: PPUSH
2376: LD_INT 1
2378: PPUSH
2379: LD_EXP 20
2383: PPUSH
2384: CALL_OW 380
// if multiplayer then
2388: LD_OWVAR 4
2392: IFFALSE 2450
// begin hc_name := mp_sides_players_names [ i ] ;
2394: LD_ADDR_OWVAR 26
2398: PUSH
2399: LD_OWVAR 19
2403: PUSH
2404: LD_VAR 0 2
2408: ARRAY
2409: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2410: LD_ADDR_OWVAR 33
2414: PUSH
2415: LD_STRING MULTIAVATARS
2417: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2418: LD_ADDR_OWVAR 34
2422: PUSH
2423: LD_VAR 0 2
2427: PPUSH
2428: CALL_OW 525
2432: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2433: LD_ADDR_OWVAR 27
2437: PUSH
2438: LD_VAR 0 2
2442: PPUSH
2443: CALL_OW 526
2447: ST_TO_ADDR
// end else
2448: GO 2482
// begin hc_gallery :=  ;
2450: LD_ADDR_OWVAR 33
2454: PUSH
2455: LD_STRING 
2457: ST_TO_ADDR
// hc_name :=  ;
2458: LD_ADDR_OWVAR 26
2462: PUSH
2463: LD_STRING 
2465: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2466: LD_ADDR_OWVAR 27
2470: PUSH
2471: LD_INT 1
2473: PPUSH
2474: LD_INT 2
2476: PPUSH
2477: CALL_OW 12
2481: ST_TO_ADDR
// end ; un := CreateHuman ;
2482: LD_ADDR_VAR 0 5
2486: PUSH
2487: CALL_OW 44
2491: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2492: LD_VAR 0 5
2496: PPUSH
2497: LD_EXP 12
2501: PUSH
2502: LD_EXP 7
2506: PUSH
2507: LD_VAR 0 2
2511: ARRAY
2512: ARRAY
2513: PUSH
2514: LD_INT 1
2516: ARRAY
2517: PPUSH
2518: LD_INT 0
2520: PPUSH
2521: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2525: LD_ADDR_EXP 24
2529: PUSH
2530: LD_EXP 24
2534: PPUSH
2535: LD_VAR 0 2
2539: PPUSH
2540: LD_VAR 0 5
2544: PPUSH
2545: CALL_OW 1
2549: ST_TO_ADDR
// end ; InitHc ;
2550: CALL_OW 19
// InitUc ;
2554: CALL_OW 18
// uc_side := i ;
2558: LD_ADDR_OWVAR 20
2562: PUSH
2563: LD_VAR 0 2
2567: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2568: LD_ADDR_OWVAR 21
2572: PUSH
2573: LD_EXP 9
2577: PUSH
2578: LD_VAR 0 2
2582: ARRAY
2583: ST_TO_ADDR
// hc_gallery :=  ;
2584: LD_ADDR_OWVAR 33
2588: PUSH
2589: LD_STRING 
2591: ST_TO_ADDR
// hc_name :=  ;
2592: LD_ADDR_OWVAR 26
2596: PUSH
2597: LD_STRING 
2599: ST_TO_ADDR
// hc_importance := 0 ;
2600: LD_ADDR_OWVAR 32
2604: PUSH
2605: LD_INT 0
2607: ST_TO_ADDR
// cl := 1 ;
2608: LD_ADDR_VAR 0 4
2612: PUSH
2613: LD_INT 1
2615: ST_TO_ADDR
// for j = 2 to multi_pep_amount do
2616: LD_ADDR_VAR 0 3
2620: PUSH
2621: DOUBLE
2622: LD_INT 2
2624: DEC
2625: ST_TO_ADDR
2626: LD_EXP 19
2630: PUSH
2631: FOR_TO
2632: IFFALSE 3004
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2634: LD_VAR 0 3
2638: PUSH
2639: LD_INT 1
2641: MINUS
2642: PUSH
2643: LD_EXP 19
2647: PUSH
2648: LD_INT 1
2650: MINUS
2651: PUSH
2652: LD_INT 4
2654: DIVREAL
2655: MOD
2656: PUSH
2657: LD_INT 0
2659: EQUAL
2660: IFFALSE 2676
// cl := cl + 1 ;
2662: LD_ADDR_VAR 0 4
2666: PUSH
2667: LD_VAR 0 4
2671: PUSH
2672: LD_INT 1
2674: PLUS
2675: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2676: LD_INT 0
2678: PPUSH
2679: LD_VAR 0 4
2683: PPUSH
2684: LD_EXP 20
2688: PPUSH
2689: CALL_OW 380
// un := CreateHuman ;
2693: LD_ADDR_VAR 0 5
2697: PUSH
2698: CALL_OW 44
2702: ST_TO_ADDR
// if j > copy then
2703: LD_VAR 0 3
2707: PUSH
2708: LD_VAR 0 8
2712: GREATER
2713: IFFALSE 2742
// copy := Replace ( copy , j , un ) else
2715: LD_ADDR_VAR 0 8
2719: PUSH
2720: LD_VAR 0 8
2724: PPUSH
2725: LD_VAR 0 3
2729: PPUSH
2730: LD_VAR 0 5
2734: PPUSH
2735: CALL_OW 1
2739: ST_TO_ADDR
2740: GO 2824
// begin CopySkills ( copy [ j ] , un ) ;
2742: LD_VAR 0 8
2746: PUSH
2747: LD_VAR 0 3
2751: ARRAY
2752: PPUSH
2753: LD_VAR 0 5
2757: PPUSH
2758: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2762: LD_VAR 0 5
2766: PPUSH
2767: LD_INT 2
2769: PPUSH
2770: LD_VAR 0 8
2774: PUSH
2775: LD_VAR 0 3
2779: ARRAY
2780: PPUSH
2781: LD_INT 2
2783: PPUSH
2784: CALL_OW 260
2788: PPUSH
2789: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2793: LD_VAR 0 5
2797: PPUSH
2798: LD_INT 1
2800: PPUSH
2801: LD_VAR 0 8
2805: PUSH
2806: LD_VAR 0 3
2810: ARRAY
2811: PPUSH
2812: LD_INT 1
2814: PPUSH
2815: CALL_OW 260
2819: PPUSH
2820: CALL_OW 239
// end ; if multi_pos_area then
2824: LD_EXP 12
2828: IFFALSE 3002
// begin if GetClass ( un ) = 3 then
2830: LD_VAR 0 5
2834: PPUSH
2835: CALL_OW 257
2839: PUSH
2840: LD_INT 3
2842: EQUAL
2843: IFFALSE 2969
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ j mod 2 + 1 ] , engine_solar , control_manual , [ us_double_gun , us_gatling_gun , us_light_gun ] [ j mod 3 + 1 ] , 100 ) ;
2845: LD_INT 3
2847: PUSH
2848: LD_INT 2
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_VAR 0 3
2859: PUSH
2860: LD_INT 2
2862: MOD
2863: PUSH
2864: LD_INT 1
2866: PLUS
2867: ARRAY
2868: PPUSH
2869: LD_INT 2
2871: PPUSH
2872: LD_INT 1
2874: PPUSH
2875: LD_INT 5
2877: PUSH
2878: LD_INT 4
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: LIST
2888: PUSH
2889: LD_VAR 0 3
2893: PUSH
2894: LD_INT 3
2896: MOD
2897: PUSH
2898: LD_INT 1
2900: PLUS
2901: ARRAY
2902: PPUSH
2903: LD_INT 100
2905: PPUSH
2906: CALL 15824 0 5
// veh := CreateVehicle ;
2910: LD_ADDR_VAR 0 6
2914: PUSH
2915: CALL_OW 45
2919: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2920: LD_VAR 0 6
2924: PPUSH
2925: LD_EXP 12
2929: PUSH
2930: LD_EXP 7
2934: PUSH
2935: LD_VAR 0 2
2939: ARRAY
2940: ARRAY
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: LD_INT 0
2948: PPUSH
2949: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2953: LD_VAR 0 5
2957: PPUSH
2958: LD_VAR 0 6
2962: PPUSH
2963: CALL_OW 52
// continue ;
2967: GO 2631
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2969: LD_VAR 0 5
2973: PPUSH
2974: LD_EXP 12
2978: PUSH
2979: LD_EXP 7
2983: PUSH
2984: LD_VAR 0 2
2988: ARRAY
2989: ARRAY
2990: PUSH
2991: LD_INT 1
2993: ARRAY
2994: PPUSH
2995: LD_INT 0
2997: PPUSH
2998: CALL_OW 49
// end ; end ;
3002: GO 2631
3004: POP
3005: POP
// for j = 1 to 3 do
3006: LD_ADDR_VAR 0 3
3010: PUSH
3011: DOUBLE
3012: LD_INT 1
3014: DEC
3015: ST_TO_ADDR
3016: LD_INT 3
3018: PUSH
3019: FOR_TO
3020: IFFALSE 3112
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_solar , control_computer , [ us_radar , us_rocket_launcher , us_gatling_gun ] [ j ] , 100 ) ;
3022: LD_INT 2
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 1
3034: PPUSH
3035: LD_INT 2
3037: PPUSH
3038: CALL_OW 12
3042: ARRAY
3043: PPUSH
3044: LD_INT 2
3046: PPUSH
3047: LD_INT 3
3049: PPUSH
3050: LD_INT 11
3052: PUSH
3053: LD_INT 7
3055: PUSH
3056: LD_INT 4
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_VAR 0 3
3068: ARRAY
3069: PPUSH
3070: LD_INT 100
3072: PPUSH
3073: CALL 15824 0 5
// PlaceUnitArea ( CreateVehicle , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3077: CALL_OW 45
3081: PPUSH
3082: LD_EXP 12
3086: PUSH
3087: LD_EXP 7
3091: PUSH
3092: LD_VAR 0 2
3096: ARRAY
3097: ARRAY
3098: PUSH
3099: LD_INT 1
3101: ARRAY
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: CALL_OW 49
// end ;
3110: GO 3019
3112: POP
3113: POP
// end ;
3114: GO 2225
3116: POP
3117: POP
// end ;
3118: LD_VAR 0 1
3122: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3123: LD_INT 0
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
// if not multi_support then
3130: LD_EXP 23
3134: NOT
3135: IFFALSE 3139
// exit ;
3137: GO 3667
// result := [ ] ;
3139: LD_ADDR_VAR 0 1
3143: PUSH
3144: EMPTY
3145: ST_TO_ADDR
// for i = 1 to 8 do
3146: LD_ADDR_VAR 0 2
3150: PUSH
3151: DOUBLE
3152: LD_INT 1
3154: DEC
3155: ST_TO_ADDR
3156: LD_INT 8
3158: PUSH
3159: FOR_TO
3160: IFFALSE 3665
// begin if multi_sides [ i ] then
3162: LD_EXP 7
3166: PUSH
3167: LD_VAR 0 2
3171: ARRAY
3172: IFFALSE 3663
// begin tmp := [ ] ;
3174: LD_ADDR_VAR 0 5
3178: PUSH
3179: EMPTY
3180: ST_TO_ADDR
// if multi_support = 1 then
3181: LD_EXP 23
3185: PUSH
3186: LD_INT 1
3188: EQUAL
3189: IFFALSE 3357
// begin uc_side := i ;
3191: LD_ADDR_OWVAR 20
3195: PUSH
3196: LD_VAR 0 2
3200: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3201: LD_ADDR_OWVAR 21
3205: PUSH
3206: LD_EXP 9
3210: PUSH
3211: LD_VAR 0 2
3215: ARRAY
3216: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3217: LD_INT 3
3219: PPUSH
3220: LD_INT 1
3222: PPUSH
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 11
3228: PPUSH
3229: LD_INT 40
3231: PPUSH
3232: CALL 15824 0 5
// tmp := tmp ^ CreateVehicle ;
3236: LD_ADDR_VAR 0 5
3240: PUSH
3241: LD_VAR 0 5
3245: PUSH
3246: CALL_OW 45
3250: ADD
3251: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_double_gun , 40 ) ;
3252: LD_INT 2
3254: PPUSH
3255: LD_INT 1
3257: PPUSH
3258: LD_INT 3
3260: PPUSH
3261: LD_INT 5
3263: PPUSH
3264: LD_INT 40
3266: PPUSH
3267: CALL 15824 0 5
// tmp := tmp ^ CreateVehicle ;
3271: LD_ADDR_VAR 0 5
3275: PUSH
3276: LD_VAR 0 5
3280: PUSH
3281: CALL_OW 45
3285: ADD
3286: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_gatling_gun , 40 ) ;
3287: LD_INT 2
3289: PPUSH
3290: LD_INT 3
3292: PPUSH
3293: LD_INT 3
3295: PPUSH
3296: LD_INT 4
3298: PPUSH
3299: LD_INT 40
3301: PPUSH
3302: CALL 15824 0 5
// tmp := tmp ^ CreateVehicle ;
3306: LD_ADDR_VAR 0 5
3310: PUSH
3311: LD_VAR 0 5
3315: PUSH
3316: CALL_OW 45
3320: ADD
3321: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_solar , control_computer , us_laser , 40 ) ;
3322: LD_INT 3
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: LD_INT 3
3330: PPUSH
3331: LD_INT 9
3333: PPUSH
3334: LD_INT 40
3336: PPUSH
3337: CALL 15824 0 5
// tmp := tmp ^ CreateVehicle ;
3341: LD_ADDR_VAR 0 5
3345: PUSH
3346: LD_VAR 0 5
3350: PUSH
3351: CALL_OW 45
3355: ADD
3356: ST_TO_ADDR
// end ; if multi_support = 2 then
3357: LD_EXP 23
3361: PUSH
3362: LD_INT 2
3364: EQUAL
3365: IFFALSE 3638
// begin uc_side := i ;
3367: LD_ADDR_OWVAR 20
3371: PUSH
3372: LD_VAR 0 2
3376: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3377: LD_ADDR_OWVAR 21
3381: PUSH
3382: LD_EXP 9
3386: PUSH
3387: LD_VAR 0 2
3391: ARRAY
3392: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3393: LD_INT 3
3395: PPUSH
3396: LD_INT 1
3398: PPUSH
3399: LD_INT 3
3401: PPUSH
3402: LD_INT 11
3404: PPUSH
3405: LD_INT 40
3407: PPUSH
3408: CALL 15824 0 5
// tmp := tmp ^ CreateVehicle ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_VAR 0 5
3421: PUSH
3422: CALL_OW 45
3426: ADD
3427: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 40 ) ;
3428: LD_INT 3
3430: PPUSH
3431: LD_INT 3
3433: PPUSH
3434: LD_INT 3
3436: PPUSH
3437: LD_INT 12
3439: PPUSH
3440: LD_INT 40
3442: PPUSH
3443: CALL 15824 0 5
// tmp := tmp ^ CreateVehicle ;
3447: LD_ADDR_VAR 0 5
3451: PUSH
3452: LD_VAR 0 5
3456: PUSH
3457: CALL_OW 45
3461: ADD
3462: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_double_gun , 40 ) ;
3463: LD_INT 2
3465: PPUSH
3466: LD_INT 3
3468: PPUSH
3469: LD_INT 3
3471: PPUSH
3472: LD_INT 5
3474: PPUSH
3475: LD_INT 40
3477: PPUSH
3478: CALL 15824 0 5
// tmp := tmp ^ CreateVehicle ;
3482: LD_ADDR_VAR 0 5
3486: PUSH
3487: LD_VAR 0 5
3491: PUSH
3492: CALL_OW 45
3496: ADD
3497: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3498: LD_INT 4
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: LD_INT 3
3506: PPUSH
3507: LD_INT 6
3509: PPUSH
3510: LD_INT 40
3512: PPUSH
3513: CALL 15824 0 5
// tmp := tmp ^ CreateVehicle ;
3517: LD_ADDR_VAR 0 5
3521: PUSH
3522: LD_VAR 0 5
3526: PUSH
3527: CALL_OW 45
3531: ADD
3532: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3533: LD_INT 2
3535: PPUSH
3536: LD_INT 3
3538: PPUSH
3539: LD_INT 3
3541: PPUSH
3542: LD_INT 9
3544: PPUSH
3545: LD_INT 40
3547: PPUSH
3548: CALL 15824 0 5
// tmp := tmp ^ CreateVehicle ;
3552: LD_ADDR_VAR 0 5
3556: PUSH
3557: LD_VAR 0 5
3561: PUSH
3562: CALL_OW 45
3566: ADD
3567: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3568: LD_INT 2
3570: PPUSH
3571: LD_INT 3
3573: PPUSH
3574: LD_INT 3
3576: PPUSH
3577: LD_INT 9
3579: PPUSH
3580: LD_INT 40
3582: PPUSH
3583: CALL 15824 0 5
// tmp := tmp ^ CreateVehicle ;
3587: LD_ADDR_VAR 0 5
3591: PUSH
3592: LD_VAR 0 5
3596: PUSH
3597: CALL_OW 45
3601: ADD
3602: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3603: LD_INT 4
3605: PPUSH
3606: LD_INT 1
3608: PPUSH
3609: LD_INT 3
3611: PPUSH
3612: LD_INT 6
3614: PPUSH
3615: LD_INT 40
3617: PPUSH
3618: CALL 15824 0 5
// tmp := tmp ^ CreateVehicle ;
3622: LD_ADDR_VAR 0 5
3626: PUSH
3627: LD_VAR 0 5
3631: PUSH
3632: CALL_OW 45
3636: ADD
3637: ST_TO_ADDR
// end ; result := Insert ( result , i , tmp ) ;
3638: LD_ADDR_VAR 0 1
3642: PUSH
3643: LD_VAR 0 1
3647: PPUSH
3648: LD_VAR 0 2
3652: PPUSH
3653: LD_VAR 0 5
3657: PPUSH
3658: CALL_OW 2
3662: ST_TO_ADDR
// end ; end ;
3663: GO 3159
3665: POP
3666: POP
// end ;
3667: LD_VAR 0 1
3671: RET
// export function Multiplayer_Start ( ) ; begin
3672: LD_INT 0
3674: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3675: CALL 2201 0 0
// Multiplayer_InitPointSystem ( ) ;
3679: CALL 4596 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3683: LD_INT 20
3685: PPUSH
3686: CALL 4772 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3690: LD_INT 150
3692: PPUSH
3693: CALL 4772 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3697: LD_INT 5
3699: PPUSH
3700: CALL 4772 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3704: LD_INT 40
3706: NEG
3707: PPUSH
3708: CALL 4772 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3712: LD_INT 200
3714: PPUSH
3715: CALL 4772 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3719: LD_INT 2
3721: PPUSH
3722: CALL 4772 0 1
// Multiplayer_SpawnArtifact ;
3726: CALL 5212 0 0
// if multi_support then
3730: LD_EXP 23
3734: IFFALSE 3746
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3736: LD_ADDR_EXP 27
3740: PUSH
3741: CALL 3123 0 0
3745: ST_TO_ADDR
// game := true ;
3746: LD_ADDR_EXP 2
3750: PUSH
3751: LD_INT 1
3753: ST_TO_ADDR
// if multi_sides [ your_side ] then
3754: LD_EXP 7
3758: PUSH
3759: LD_OWVAR 2
3763: ARRAY
3764: IFFALSE 3791
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3766: LD_INT 22
3768: PUSH
3769: LD_OWVAR 2
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PPUSH
3778: CALL_OW 69
3782: PUSH
3783: LD_INT 1
3785: ARRAY
3786: PPUSH
3787: CALL_OW 87
// end ;
3791: LD_VAR 0 1
3795: RET
// export function Multiplayer_End ( ) ; var i , j , tmp , reinforcements_arrive ; begin
3796: LD_INT 0
3798: PPUSH
3799: PPUSH
3800: PPUSH
3801: PPUSH
3802: PPUSH
// reinforcements_arrive := 0 ;
3803: LD_ADDR_VAR 0 5
3807: PUSH
3808: LD_INT 0
3810: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3811: LD_INT 35
3813: PPUSH
3814: CALL_OW 67
// if tick > 10 10$00 and not multi_reinforcements_spawned and multi_support = 1 then
3818: LD_OWVAR 1
3822: PUSH
3823: LD_INT 21000
3825: GREATER
3826: PUSH
3827: LD_EXP 28
3831: NOT
3832: AND
3833: PUSH
3834: LD_EXP 23
3838: PUSH
3839: LD_INT 1
3841: EQUAL
3842: AND
3843: IFFALSE 4038
// begin multi_reinforcements_spawned := 1 ;
3845: LD_ADDR_EXP 28
3849: PUSH
3850: LD_INT 1
3852: ST_TO_ADDR
// for i = 1 to 8 do
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: DOUBLE
3859: LD_INT 1
3861: DEC
3862: ST_TO_ADDR
3863: LD_INT 8
3865: PUSH
3866: FOR_TO
3867: IFFALSE 4026
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
3869: LD_EXP 7
3873: PUSH
3874: LD_VAR 0 2
3878: ARRAY
3879: PUSH
3880: LD_EXP 25
3884: PUSH
3885: LD_VAR 0 2
3889: ARRAY
3890: NOT
3891: AND
3892: PUSH
3893: LD_EXP 27
3897: PUSH
3898: LD_VAR 0 2
3902: ARRAY
3903: AND
3904: IFFALSE 4024
// begin tmp := multi_reinforcements [ i ] ;
3906: LD_ADDR_VAR 0 4
3910: PUSH
3911: LD_EXP 27
3915: PUSH
3916: LD_VAR 0 2
3920: ARRAY
3921: ST_TO_ADDR
// for j = 1 to 4 do
3922: LD_ADDR_VAR 0 3
3926: PUSH
3927: DOUBLE
3928: LD_INT 1
3930: DEC
3931: ST_TO_ADDR
3932: LD_INT 4
3934: PUSH
3935: FOR_TO
3936: IFFALSE 3997
// begin PlaceUnitArea ( tmp [ j ] , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3938: LD_VAR 0 4
3942: PUSH
3943: LD_VAR 0 3
3947: ARRAY
3948: PPUSH
3949: LD_EXP 12
3953: PUSH
3954: LD_EXP 7
3958: PUSH
3959: LD_VAR 0 2
3963: ARRAY
3964: ARRAY
3965: PUSH
3966: LD_INT 2
3968: ARRAY
3969: PPUSH
3970: LD_INT 0
3972: PPUSH
3973: CALL_OW 49
// tmp := Delete ( tmp , 1 ) ;
3977: LD_ADDR_VAR 0 4
3981: PUSH
3982: LD_VAR 0 4
3986: PPUSH
3987: LD_INT 1
3989: PPUSH
3990: CALL_OW 3
3994: ST_TO_ADDR
// end ;
3995: GO 3935
3997: POP
3998: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , tmp ) ;
3999: LD_ADDR_EXP 27
4003: PUSH
4004: LD_EXP 27
4008: PPUSH
4009: LD_VAR 0 2
4013: PPUSH
4014: LD_VAR 0 4
4018: PPUSH
4019: CALL_OW 1
4023: ST_TO_ADDR
// end ; end ;
4024: GO 3866
4026: POP
4027: POP
// reinforcements_arrive := tick ;
4028: LD_ADDR_VAR 0 5
4032: PUSH
4033: LD_OWVAR 1
4037: ST_TO_ADDR
// end ; if reinforcements_arrive + 10 10$00 < tick and multi_reinforcements_spawned = 1 and multi_support = 2 then
4038: LD_VAR 0 5
4042: PUSH
4043: LD_INT 21000
4045: PLUS
4046: PUSH
4047: LD_OWVAR 1
4051: LESS
4052: PUSH
4053: LD_EXP 28
4057: PUSH
4058: LD_INT 1
4060: EQUAL
4061: AND
4062: PUSH
4063: LD_EXP 23
4067: PUSH
4068: LD_INT 2
4070: EQUAL
4071: AND
4072: IFFALSE 4257
// begin multi_reinforcements_spawned := 2 ;
4074: LD_ADDR_EXP 28
4078: PUSH
4079: LD_INT 2
4081: ST_TO_ADDR
// for i = 1 to 8 do
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 8
4094: PUSH
4095: FOR_TO
4096: IFFALSE 4255
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
4098: LD_EXP 7
4102: PUSH
4103: LD_VAR 0 2
4107: ARRAY
4108: PUSH
4109: LD_EXP 25
4113: PUSH
4114: LD_VAR 0 2
4118: ARRAY
4119: NOT
4120: AND
4121: PUSH
4122: LD_EXP 27
4126: PUSH
4127: LD_VAR 0 2
4131: ARRAY
4132: AND
4133: IFFALSE 4253
// begin tmp := multi_reinforcements [ i ] ;
4135: LD_ADDR_VAR 0 4
4139: PUSH
4140: LD_EXP 27
4144: PUSH
4145: LD_VAR 0 2
4149: ARRAY
4150: ST_TO_ADDR
// for j = 1 to 3 do
4151: LD_ADDR_VAR 0 3
4155: PUSH
4156: DOUBLE
4157: LD_INT 1
4159: DEC
4160: ST_TO_ADDR
4161: LD_INT 3
4163: PUSH
4164: FOR_TO
4165: IFFALSE 4226
// begin PlaceUnitArea ( tmp [ j ] , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
4167: LD_VAR 0 4
4171: PUSH
4172: LD_VAR 0 3
4176: ARRAY
4177: PPUSH
4178: LD_EXP 12
4182: PUSH
4183: LD_EXP 7
4187: PUSH
4188: LD_VAR 0 2
4192: ARRAY
4193: ARRAY
4194: PUSH
4195: LD_INT 2
4197: ARRAY
4198: PPUSH
4199: LD_INT 0
4201: PPUSH
4202: CALL_OW 49
// tmp := Delete ( tmp , 1 ) ;
4206: LD_ADDR_VAR 0 4
4210: PUSH
4211: LD_VAR 0 4
4215: PPUSH
4216: LD_INT 1
4218: PPUSH
4219: CALL_OW 3
4223: ST_TO_ADDR
// end ;
4224: GO 4164
4226: POP
4227: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , tmp ) ;
4228: LD_ADDR_EXP 27
4232: PUSH
4233: LD_EXP 27
4237: PPUSH
4238: LD_VAR 0 2
4242: PPUSH
4243: LD_VAR 0 4
4247: PPUSH
4248: CALL_OW 1
4252: ST_TO_ADDR
// end ; end ;
4253: GO 4095
4255: POP
4256: POP
// end ; if not multi_custom_commanders then
4257: LD_EXP 16
4261: NOT
4262: IFFALSE 4375
// begin for i = 1 to 8 do
4264: LD_ADDR_VAR 0 2
4268: PUSH
4269: DOUBLE
4270: LD_INT 1
4272: DEC
4273: ST_TO_ADDR
4274: LD_INT 8
4276: PUSH
4277: FOR_TO
4278: IFFALSE 4349
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
4280: LD_INT 22
4282: PUSH
4283: LD_VAR 0 2
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PPUSH
4292: CALL_OW 69
4296: PUSH
4297: LD_INT 0
4299: EQUAL
4300: PUSH
4301: LD_EXP 25
4305: PUSH
4306: LD_VAR 0 2
4310: ARRAY
4311: NOT
4312: AND
4313: IFFALSE 4347
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
4315: LD_ADDR_EXP 25
4319: PUSH
4320: LD_EXP 25
4324: PPUSH
4325: LD_VAR 0 2
4329: PPUSH
4330: LD_INT 1
4332: PPUSH
4333: CALL_OW 1
4337: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
4338: LD_VAR 0 2
4342: PPUSH
4343: CALL 4842 0 1
// end ; end ;
4347: GO 4277
4349: POP
4350: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4351: LD_EXP 25
4355: PPUSH
4356: CALL 13202 0 1
4360: PUSH
4361: LD_EXP 7
4365: PPUSH
4366: CALL 13202 0 1
4370: EQUAL
4371: IFFALSE 4375
// break ;
4373: GO 4410
// end ; until ( FilterAllUnits ( [ f_side , side_bot ] ) = 0 and game ) or not multi_commanders ;
4375: LD_INT 22
4377: PUSH
4378: LD_EXP 3
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PPUSH
4387: CALL_OW 69
4391: PUSH
4392: LD_INT 0
4394: EQUAL
4395: PUSH
4396: LD_EXP 2
4400: AND
4401: PUSH
4402: LD_EXP 24
4406: NOT
4407: OR
4408: IFFALSE 3811
// game := false ;
4410: LD_ADDR_EXP 2
4414: PUSH
4415: LD_INT 0
4417: ST_TO_ADDR
// for i = 1 to 8 do
4418: LD_ADDR_VAR 0 2
4422: PUSH
4423: DOUBLE
4424: LD_INT 1
4426: DEC
4427: ST_TO_ADDR
4428: LD_INT 8
4430: PUSH
4431: FOR_TO
4432: IFFALSE 4468
// begin if multi_sides [ i ] then
4434: LD_EXP 7
4438: PUSH
4439: LD_VAR 0 2
4443: ARRAY
4444: IFFALSE 4466
// SetMultiScore ( i , multi_points [ i ] ) ;
4446: LD_VAR 0 2
4450: PPUSH
4451: LD_EXP 29
4455: PUSH
4456: LD_VAR 0 2
4460: ARRAY
4461: PPUSH
4462: CALL_OW 506
// end ;
4466: GO 4431
4468: POP
4469: POP
// if multi_loosers [ your_side ] then
4470: LD_EXP 25
4474: PUSH
4475: LD_OWVAR 2
4479: ARRAY
4480: IFFALSE 4488
// YouLostInMultiplayer else
4482: CALL_OW 107
4486: GO 4492
// YouWinInMultiplayer ;
4488: CALL_OW 106
// end ;
4492: LD_VAR 0 1
4496: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4497: LD_INT 0
4499: PPUSH
4500: PPUSH
// result := [ #tick , tick ] ;
4501: LD_ADDR_VAR 0 1
4505: PUSH
4506: LD_STRING #tick
4508: PUSH
4509: LD_OWVAR 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: ST_TO_ADDR
// for i = 1 to 8 do
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: DOUBLE
4524: LD_INT 1
4526: DEC
4527: ST_TO_ADDR
4528: LD_INT 8
4530: PUSH
4531: FOR_TO
4532: IFFALSE 4589
// begin if multi_sides [ i ] then
4534: LD_EXP 7
4538: PUSH
4539: LD_VAR 0 2
4543: ARRAY
4544: IFFALSE 4587
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4546: LD_ADDR_VAR 0 1
4550: PUSH
4551: LD_VAR 0 1
4555: PUSH
4556: LD_STRING #coop-points
4558: PUSH
4559: LD_VAR 0 2
4563: PUSH
4564: LD_VAR 0 2
4568: PUSH
4569: LD_EXP 29
4573: PUSH
4574: LD_VAR 0 2
4578: ARRAY
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: ADD
4586: ST_TO_ADDR
// end ; end ;
4587: GO 4531
4589: POP
4590: POP
// end ;
4591: LD_VAR 0 1
4595: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4596: LD_INT 0
4598: PPUSH
4599: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4600: LD_ADDR_EXP 29
4604: PUSH
4605: LD_INT 0
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: LD_INT 0
4613: PUSH
4614: LD_INT 0
4616: PUSH
4617: LD_INT 0
4619: PUSH
4620: LD_INT 0
4622: PUSH
4623: LD_INT 0
4625: PUSH
4626: LD_INT 0
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4639: LD_ADDR_EXP 30
4643: PUSH
4644: EMPTY
4645: ST_TO_ADDR
// end ;
4646: LD_VAR 0 1
4650: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4651: LD_INT 0
4653: PPUSH
// if not multi_points or not side or side > 8 then
4654: LD_EXP 29
4658: NOT
4659: PUSH
4660: LD_VAR 0 1
4664: NOT
4665: OR
4666: PUSH
4667: LD_VAR 0 1
4671: PUSH
4672: LD_INT 8
4674: GREATER
4675: OR
4676: IFFALSE 4680
// exit ;
4678: GO 4717
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4680: LD_ADDR_EXP 29
4684: PUSH
4685: LD_EXP 29
4689: PPUSH
4690: LD_VAR 0 1
4694: PPUSH
4695: LD_EXP 29
4699: PUSH
4700: LD_VAR 0 1
4704: ARRAY
4705: PUSH
4706: LD_VAR 0 2
4710: PLUS
4711: PPUSH
4712: CALL_OW 1
4716: ST_TO_ADDR
// end ;
4717: LD_VAR 0 3
4721: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4722: LD_INT 0
4724: PPUSH
// if not multi_points or not side or side > 8 then
4725: LD_EXP 29
4729: NOT
4730: PUSH
4731: LD_VAR 0 1
4735: NOT
4736: OR
4737: PUSH
4738: LD_VAR 0 1
4742: PUSH
4743: LD_INT 8
4745: GREATER
4746: OR
4747: IFFALSE 4751
// exit ;
4749: GO 4767
// result := multi_points [ side ] ;
4751: LD_ADDR_VAR 0 2
4755: PUSH
4756: LD_EXP 29
4760: PUSH
4761: LD_VAR 0 1
4765: ARRAY
4766: ST_TO_ADDR
// end ;
4767: LD_VAR 0 2
4771: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4772: LD_INT 0
4774: PPUSH
// multi_points_conditions := Insert ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4775: LD_ADDR_EXP 30
4779: PUSH
4780: LD_EXP 30
4784: PPUSH
4785: LD_EXP 30
4789: PUSH
4790: LD_INT 1
4792: PLUS
4793: PPUSH
4794: LD_VAR 0 1
4798: PPUSH
4799: CALL_OW 2
4803: ST_TO_ADDR
// end ;
4804: LD_VAR 0 2
4808: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4809: LD_INT 0
4811: PPUSH
// if not id then
4812: LD_VAR 0 1
4816: NOT
4817: IFFALSE 4821
// exit ;
4819: GO 4837
// result := multi_points_conditions [ id ] ;
4821: LD_ADDR_VAR 0 2
4825: PUSH
4826: LD_EXP 30
4830: PUSH
4831: LD_VAR 0 1
4835: ARRAY
4836: ST_TO_ADDR
// end ;
4837: LD_VAR 0 2
4841: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4842: LD_INT 0
4844: PPUSH
4845: PPUSH
4846: PPUSH
4847: PPUSH
4848: PPUSH
// players := [ ] ;
4849: LD_ADDR_VAR 0 3
4853: PUSH
4854: EMPTY
4855: ST_TO_ADDR
// for i = 1 to 8 do
4856: LD_ADDR_VAR 0 4
4860: PUSH
4861: DOUBLE
4862: LD_INT 1
4864: DEC
4865: ST_TO_ADDR
4866: LD_INT 8
4868: PUSH
4869: FOR_TO
4870: IFFALSE 4929
// begin if i = side then
4872: LD_VAR 0 4
4876: PUSH
4877: LD_VAR 0 1
4881: EQUAL
4882: IFFALSE 4886
// continue ;
4884: GO 4869
// if multi_sides [ i ] and not multi_loosers [ i ] then
4886: LD_EXP 7
4890: PUSH
4891: LD_VAR 0 4
4895: ARRAY
4896: PUSH
4897: LD_EXP 25
4901: PUSH
4902: LD_VAR 0 4
4906: ARRAY
4907: NOT
4908: AND
4909: IFFALSE 4927
// players := players ^ i ;
4911: LD_ADDR_VAR 0 3
4915: PUSH
4916: LD_VAR 0 3
4920: PUSH
4921: LD_VAR 0 4
4925: ADD
4926: ST_TO_ADDR
// end ;
4927: GO 4869
4929: POP
4930: POP
// if not players then
4931: LD_VAR 0 3
4935: NOT
4936: IFFALSE 4940
// exit ;
4938: GO 5207
// if players = 1 then
4940: LD_VAR 0 3
4944: PUSH
4945: LD_INT 1
4947: EQUAL
4948: IFFALSE 5009
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4950: LD_ADDR_VAR 0 4
4954: PUSH
4955: LD_INT 22
4957: PUSH
4958: LD_VAR 0 1
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 51
4969: PUSH
4970: EMPTY
4971: LIST
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PPUSH
4977: CALL_OW 69
4981: PUSH
4982: FOR_IN
4983: IFFALSE 5005
// SetSide ( i , players [ 1 ] ) ;
4985: LD_VAR 0 4
4989: PPUSH
4990: LD_VAR 0 3
4994: PUSH
4995: LD_INT 1
4997: ARRAY
4998: PPUSH
4999: CALL_OW 235
5003: GO 4982
5005: POP
5006: POP
// end else
5007: GO 5207
// begin j := 1 ;
5009: LD_ADDR_VAR 0 5
5013: PUSH
5014: LD_INT 1
5016: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
5017: LD_ADDR_VAR 0 4
5021: PUSH
5022: LD_INT 22
5024: PUSH
5025: LD_VAR 0 1
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PUSH
5034: LD_INT 2
5036: PUSH
5037: LD_INT 21
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PUSH
5047: LD_INT 51
5049: PUSH
5050: EMPTY
5051: LIST
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 21
5059: PUSH
5060: LD_INT 2
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PPUSH
5076: CALL_OW 69
5080: PUSH
5081: FOR_IN
5082: IFFALSE 5205
// begin SetSide ( i , players [ j ] ) ;
5084: LD_VAR 0 4
5088: PPUSH
5089: LD_VAR 0 3
5093: PUSH
5094: LD_VAR 0 5
5098: ARRAY
5099: PPUSH
5100: CALL_OW 235
// if IsDrivenBy ( i ) then
5104: LD_VAR 0 4
5108: PPUSH
5109: CALL_OW 311
5113: IFFALSE 5140
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
5115: LD_VAR 0 4
5119: PPUSH
5120: CALL_OW 311
5124: PPUSH
5125: LD_VAR 0 3
5129: PUSH
5130: LD_VAR 0 5
5134: ARRAY
5135: PPUSH
5136: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
5140: LD_VAR 0 4
5144: PPUSH
5145: CALL_OW 310
5149: PPUSH
5150: CALL_OW 247
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5169
// ComExitBuilding ( i ) ;
5160: LD_VAR 0 4
5164: PPUSH
5165: CALL_OW 122
// j := j + 1 ;
5169: LD_ADDR_VAR 0 5
5173: PUSH
5174: LD_VAR 0 5
5178: PUSH
5179: LD_INT 1
5181: PLUS
5182: ST_TO_ADDR
// if j > players then
5183: LD_VAR 0 5
5187: PUSH
5188: LD_VAR 0 3
5192: GREATER
5193: IFFALSE 5203
// j := 1 ;
5195: LD_ADDR_VAR 0 5
5199: PUSH
5200: LD_INT 1
5202: ST_TO_ADDR
// end ;
5203: GO 5081
5205: POP
5206: POP
// end ; end ;
5207: LD_VAR 0 2
5211: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
5212: LD_INT 0
5214: PPUSH
5215: PPUSH
5216: PPUSH
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
5217: LD_ADDR_VAR 0 3
5221: PUSH
5222: LD_INT 5
5224: PUSH
5225: LD_INT 10
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: LD_INT 120
5234: PUSH
5235: LD_INT 2
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PUSH
5242: LD_INT 101
5244: PUSH
5245: LD_INT 8
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 27
5254: PUSH
5255: LD_INT 4
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: ST_TO_ADDR
// i := rand ( 1 , pos ) ;
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_INT 1
5275: PPUSH
5276: LD_VAR 0 3
5280: PPUSH
5281: CALL_OW 12
5285: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
5286: LD_INT 4
5288: PPUSH
5289: LD_INT 5
5291: PPUSH
5292: LD_VAR 0 3
5296: PUSH
5297: LD_VAR 0 2
5301: ARRAY
5302: PUSH
5303: LD_INT 1
5305: ARRAY
5306: PPUSH
5307: LD_VAR 0 3
5311: PUSH
5312: LD_VAR 0 2
5316: ARRAY
5317: PUSH
5318: LD_INT 2
5320: ARRAY
5321: PPUSH
5322: LD_INT 0
5324: PPUSH
5325: CALL_OW 58
// end ;
5329: LD_VAR 0 1
5333: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5334: LD_INT 0
5336: PPUSH
// if not side or side > 8 then
5337: LD_VAR 0 1
5341: NOT
5342: PUSH
5343: LD_VAR 0 1
5347: PUSH
5348: LD_INT 8
5350: GREATER
5351: OR
5352: IFFALSE 5356
// exit ;
5354: GO 5373
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5356: LD_VAR 0 1
5360: PPUSH
5361: LD_INT 6
5363: PPUSH
5364: CALL 4809 0 1
5368: PPUSH
5369: CALL 4651 0 2
// end ;
5373: LD_VAR 0 2
5377: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5378: LD_INT 0
5380: PPUSH
// if not side or side > 8 then
5381: LD_VAR 0 1
5385: NOT
5386: PUSH
5387: LD_VAR 0 1
5391: PUSH
5392: LD_INT 8
5394: GREATER
5395: OR
5396: IFFALSE 5400
// exit ;
5398: GO 5417
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5400: LD_VAR 0 1
5404: PPUSH
5405: LD_INT 4
5407: PPUSH
5408: CALL 4809 0 1
5412: PPUSH
5413: CALL 4651 0 2
// end ;
5417: LD_VAR 0 2
5421: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5422: LD_INT 0
5424: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5425: LD_VAR 0 1
5429: NOT
5430: PUSH
5431: LD_VAR 0 1
5435: PUSH
5436: LD_INT 8
5438: GREATER
5439: OR
5440: PUSH
5441: LD_VAR 0 2
5445: PUSH
5446: LD_INT 2
5448: PUSH
5449: LD_INT 6
5451: PUSH
5452: LD_INT 36
5454: PUSH
5455: LD_INT 0
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: IN
5464: NOT
5465: OR
5466: IFFALSE 5470
// exit ;
5468: GO 5487
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5470: LD_VAR 0 1
5474: PPUSH
5475: LD_INT 3
5477: PPUSH
5478: CALL 4809 0 1
5482: PPUSH
5483: CALL 4651 0 2
// end ;
5487: LD_VAR 0 3
5491: RET
// export function MultiplayerEvent_UnitKilled ( un , points ) ; var side , side2 , last_shoot , nearest_unit , gained_points ; begin
5492: LD_INT 0
5494: PPUSH
5495: PPUSH
5496: PPUSH
5497: PPUSH
5498: PPUSH
5499: PPUSH
// if not un then
5500: LD_VAR 0 1
5504: NOT
5505: IFFALSE 5509
// exit ;
5507: GO 5733
// if not points then
5509: LD_VAR 0 2
5513: NOT
5514: IFFALSE 5531
// gained_points := Multiplayer_GetCondition ( 1 ) else
5516: LD_ADDR_VAR 0 8
5520: PUSH
5521: LD_INT 1
5523: PPUSH
5524: CALL 4809 0 1
5528: ST_TO_ADDR
5529: GO 5541
// gained_points := points ;
5531: LD_ADDR_VAR 0 8
5535: PUSH
5536: LD_VAR 0 2
5540: ST_TO_ADDR
// last_shoot := SideShoot ( un ) ;
5541: LD_ADDR_VAR 0 6
5545: PUSH
5546: LD_VAR 0 1
5550: PPUSH
5551: CALL_OW 503
5555: ST_TO_ADDR
// if last_shoot > - 1 then
5556: LD_VAR 0 6
5560: PUSH
5561: LD_INT 1
5563: NEG
5564: GREATER
5565: IFFALSE 5577
// begin side := last_shoot ;
5567: LD_ADDR_VAR 0 4
5571: PUSH
5572: LD_VAR 0 6
5576: ST_TO_ADDR
// end ; nearest_unit := NearestUnitToUnit ( all_units diff FilterAllUnits ( [ f_side , GetSide ( un ) ] ) , un ) ;
5577: LD_ADDR_VAR 0 7
5581: PUSH
5582: LD_OWVAR 3
5586: PUSH
5587: LD_INT 22
5589: PUSH
5590: LD_VAR 0 1
5594: PPUSH
5595: CALL_OW 255
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PPUSH
5604: CALL_OW 69
5608: DIFF
5609: PPUSH
5610: LD_VAR 0 1
5614: PPUSH
5615: CALL_OW 74
5619: ST_TO_ADDR
// if nearest_unit then
5620: LD_VAR 0 7
5624: IFFALSE 5641
// side2 := GetSide ( nearest_unit ) ;
5626: LD_ADDR_VAR 0 5
5630: PUSH
5631: LD_VAR 0 7
5635: PPUSH
5636: CALL_OW 255
5640: ST_TO_ADDR
// if not side and not side2 then
5641: LD_VAR 0 4
5645: NOT
5646: PUSH
5647: LD_VAR 0 5
5651: NOT
5652: AND
5653: IFFALSE 5657
// exit ;
5655: GO 5733
// if side = side2 then
5657: LD_VAR 0 4
5661: PUSH
5662: LD_VAR 0 5
5666: EQUAL
5667: IFFALSE 5685
// Multiplayer_AddPoints ( side , gained_points ) else
5669: LD_VAR 0 4
5673: PPUSH
5674: LD_VAR 0 8
5678: PPUSH
5679: CALL 4651 0 2
5683: GO 5733
// begin if side then
5685: LD_VAR 0 4
5689: IFFALSE 5709
// Multiplayer_AddPoints ( side , gained_points div 2 ) ;
5691: LD_VAR 0 4
5695: PPUSH
5696: LD_VAR 0 8
5700: PUSH
5701: LD_INT 2
5703: DIV
5704: PPUSH
5705: CALL 4651 0 2
// if side2 then
5709: LD_VAR 0 5
5713: IFFALSE 5733
// Multiplayer_AddPoints ( side2 , gained_points div 2 ) ;
5715: LD_VAR 0 5
5719: PPUSH
5720: LD_VAR 0 8
5724: PUSH
5725: LD_INT 2
5727: DIV
5728: PPUSH
5729: CALL 4651 0 2
// end ; end ;
5733: LD_VAR 0 3
5737: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5738: LD_INT 0
5740: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5741: LD_VAR 0 1
5745: PPUSH
5746: LD_INT 2
5748: PPUSH
5749: CALL 4809 0 1
5753: PPUSH
5754: CALL 4651 0 2
// end ; end_of_file
5758: LD_VAR 0 2
5762: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , techs ; begin
5763: LD_INT 0
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
5769: PPUSH
5770: PPUSH
5771: PPUSH
5772: PPUSH
5773: PPUSH
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
5774: LD_ADDR_VAR 0 9
5778: PUSH
5779: LD_INT 22
5781: PUSH
5782: LD_INT 2
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PPUSH
5789: CALL_OW 69
5793: ST_TO_ADDR
// side_bot := side ;
5794: LD_ADDR_EXP 3
5798: PUSH
5799: LD_VAR 0 1
5803: ST_TO_ADDR
// if tmp and side <> 2 then
5804: LD_VAR 0 9
5808: PUSH
5809: LD_VAR 0 1
5813: PUSH
5814: LD_INT 2
5816: NONEQUAL
5817: AND
5818: IFFALSE 5851
// for i in tmp do
5820: LD_ADDR_VAR 0 3
5824: PUSH
5825: LD_VAR 0 9
5829: PUSH
5830: FOR_IN
5831: IFFALSE 5849
// SetSide ( i , side ) ;
5833: LD_VAR 0 3
5837: PPUSH
5838: LD_VAR 0 1
5842: PPUSH
5843: CALL_OW 235
5847: GO 5830
5849: POP
5850: POP
// techs := [ tech_ApeAgres , tech_ApeBrain , tech_ApeNeural , tech_StimDrugs , tech_Bio1 , tech_Bio2 , tech_Weap3 , tech_RemCharge , tech_rocket , tech_SibEng , 72 , tech_Sib2 ] ;
5851: LD_ADDR_VAR 0 10
5855: PUSH
5856: LD_INT 11
5858: PUSH
5859: LD_INT 4
5861: PUSH
5862: LD_INT 3
5864: PUSH
5865: LD_INT 5
5867: PUSH
5868: LD_INT 66
5870: PUSH
5871: LD_INT 67
5873: PUSH
5874: LD_INT 53
5876: PUSH
5877: LD_INT 18
5879: PUSH
5880: LD_INT 40
5882: PUSH
5883: LD_INT 22
5885: PUSH
5886: LD_INT 72
5888: PUSH
5889: LD_INT 55
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: ST_TO_ADDR
// for i in techs do
5906: LD_ADDR_VAR 0 3
5910: PUSH
5911: LD_VAR 0 10
5915: PUSH
5916: FOR_IN
5917: IFFALSE 5938
// SetTech ( i , side , state_researched ) ;
5919: LD_VAR 0 3
5923: PPUSH
5924: LD_VAR 0 1
5928: PPUSH
5929: LD_INT 2
5931: PPUSH
5932: CALL_OW 322
5936: GO 5916
5938: POP
5939: POP
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
5940: LD_ADDR_VAR 0 8
5944: PUSH
5945: LD_INT 6
5947: PUSH
5948: LD_INT 7
5950: PUSH
5951: LD_INT 8
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: PUSH
5959: LD_OWVAR 67
5963: ARRAY
5964: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
5965: LD_INT 69
5967: PUSH
5968: EMPTY
5969: LIST
5970: PPUSH
5971: LD_INT 141
5973: PPUSH
5974: CALL_OW 169
// Wait ( 1 ) ;
5978: LD_INT 1
5980: PPUSH
5981: CALL_OW 67
// uc_side := side ;
5985: LD_ADDR_OWVAR 20
5989: PUSH
5990: LD_VAR 0 1
5994: ST_TO_ADDR
// uc_nation := 2 ;
5995: LD_ADDR_OWVAR 21
5999: PUSH
6000: LD_INT 2
6002: ST_TO_ADDR
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 5000 , 1000 , 300 ] , [ - 1 , 6 , - 1 , 4 ] ) ;
6003: LD_ADDR_EXP 33
6007: PUSH
6008: LD_INT 94
6010: PPUSH
6011: LD_STRING dammam
6013: PPUSH
6014: LD_VAR 0 8
6018: PPUSH
6019: LD_INT 5000
6021: PUSH
6022: LD_INT 1000
6024: PUSH
6025: LD_INT 300
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: LIST
6032: PPUSH
6033: LD_INT 1
6035: NEG
6036: PUSH
6037: LD_INT 6
6039: PUSH
6040: LD_INT 1
6042: NEG
6043: PUSH
6044: LD_INT 4
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PPUSH
6053: CALL 19223 0 5
6057: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
6058: LD_ADDR_EXP 33
6062: PUSH
6063: LD_EXP 33
6067: PUSH
6068: LD_INT 122
6070: PPUSH
6071: LD_STRING 
6073: PPUSH
6074: LD_VAR 0 8
6078: PPUSH
6079: LD_INT 100
6081: PUSH
6082: LD_INT 60
6084: PUSH
6085: LD_INT 0
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: PPUSH
6093: LD_INT 1
6095: NEG
6096: PUSH
6097: LD_INT 4
6099: PUSH
6100: LD_INT 0
6102: PUSH
6103: LD_INT 0
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: PPUSH
6112: CALL 19223 0 5
6116: ADD
6117: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 3000 , 1000 , 10 ] , [ - 1 , 5 , 5 , 2 ] ) ;
6118: LD_ADDR_EXP 31
6122: PUSH
6123: LD_INT 45
6125: PPUSH
6126: LD_STRING jeddah
6128: PPUSH
6129: LD_VAR 0 8
6133: PPUSH
6134: LD_INT 3000
6136: PUSH
6137: LD_INT 1000
6139: PUSH
6140: LD_INT 10
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: PPUSH
6148: LD_INT 1
6150: NEG
6151: PUSH
6152: LD_INT 5
6154: PUSH
6155: LD_INT 5
6157: PUSH
6158: LD_INT 2
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL 19223 0 5
6171: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 600 , 250 , 0 ] , [ - 1 , 3 , 5 , 1 ] ) ;
6172: LD_ADDR_EXP 32
6176: PUSH
6177: LD_INT 7
6179: PPUSH
6180: LD_STRING riyadh
6182: PPUSH
6183: LD_VAR 0 8
6187: PPUSH
6188: LD_INT 600
6190: PUSH
6191: LD_INT 250
6193: PUSH
6194: LD_INT 0
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: LIST
6201: PPUSH
6202: LD_INT 1
6204: NEG
6205: PUSH
6206: LD_INT 3
6208: PUSH
6209: LD_INT 5
6211: PUSH
6212: LD_INT 1
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: PPUSH
6221: CALL 19223 0 5
6225: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 150 , 0 ] , [ - 1 , 3 , 5 , 2 ] ) ;
6226: LD_ADDR_EXP 34
6230: PUSH
6231: LD_INT 69
6233: PPUSH
6234: LD_STRING 
6236: PPUSH
6237: LD_VAR 0 8
6241: PPUSH
6242: LD_INT 500
6244: PUSH
6245: LD_INT 150
6247: PUSH
6248: LD_INT 0
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: LIST
6255: PPUSH
6256: LD_INT 1
6258: NEG
6259: PUSH
6260: LD_INT 3
6262: PUSH
6263: LD_INT 5
6265: PUSH
6266: LD_INT 2
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: PPUSH
6275: CALL 19223 0 5
6279: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east , ar_force_south ] ;
6280: LD_ADDR_EXP 41
6284: PUSH
6285: LD_EXP 33
6289: PUSH
6290: LD_EXP 31
6294: PUSH
6295: LD_EXP 34
6299: PUSH
6300: LD_EXP 32
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6311: LD_ADDR_OWVAR 37
6315: PUSH
6316: LD_INT 14
6318: ST_TO_ADDR
// vc_engine := engine_siberite ;
6319: LD_ADDR_OWVAR 39
6323: PUSH
6324: LD_INT 3
6326: ST_TO_ADDR
// vc_control := control_manual ;
6327: LD_ADDR_OWVAR 38
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
6335: LD_ADDR_OWVAR 40
6339: PUSH
6340: LD_INT 31
6342: ST_TO_ADDR
// for i = 1 to 5 do
6343: LD_ADDR_VAR 0 3
6347: PUSH
6348: DOUBLE
6349: LD_INT 1
6351: DEC
6352: ST_TO_ADDR
6353: LD_INT 5
6355: PUSH
6356: FOR_TO
6357: IFFALSE 6626
// begin xy := [ [ 156 , 15 ] , [ 12 , 7 ] ] [ i mod 2 + 1 ] ;
6359: LD_ADDR_VAR 0 5
6363: PUSH
6364: LD_INT 156
6366: PUSH
6367: LD_INT 15
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: LD_INT 12
6376: PUSH
6377: LD_INT 7
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_VAR 0 3
6392: PUSH
6393: LD_INT 2
6395: MOD
6396: PUSH
6397: LD_INT 1
6399: PLUS
6400: ARRAY
6401: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
6402: LD_INT 0
6404: PPUSH
6405: LD_INT 3
6407: PPUSH
6408: LD_VAR 0 8
6412: PPUSH
6413: CALL_OW 380
// un := CreateVehicle ;
6417: LD_ADDR_VAR 0 6
6421: PUSH
6422: CALL_OW 45
6426: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6427: LD_VAR 0 6
6431: PPUSH
6432: LD_INT 0
6434: PPUSH
6435: LD_INT 5
6437: PPUSH
6438: CALL_OW 12
6442: PPUSH
6443: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
6447: LD_VAR 0 6
6451: PPUSH
6452: LD_VAR 0 5
6456: PUSH
6457: LD_INT 1
6459: ARRAY
6460: PPUSH
6461: LD_VAR 0 5
6465: PUSH
6466: LD_INT 2
6468: ARRAY
6469: PPUSH
6470: LD_INT 6
6472: PPUSH
6473: LD_INT 0
6475: PPUSH
6476: CALL_OW 50
// un2 := CreateHuman ;
6480: LD_ADDR_VAR 0 7
6484: PUSH
6485: CALL_OW 44
6489: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
6490: LD_VAR 0 7
6494: PPUSH
6495: LD_VAR 0 6
6499: PPUSH
6500: CALL_OW 52
// mc_bases := Add ( mc_bases , [ i mod 2 + 1 , mc_bases [ i mod 2 + 1 ] + 1 ] , un ) ;
6504: LD_ADDR_EXP 41
6508: PUSH
6509: LD_EXP 41
6513: PPUSH
6514: LD_VAR 0 3
6518: PUSH
6519: LD_INT 2
6521: MOD
6522: PUSH
6523: LD_INT 1
6525: PLUS
6526: PUSH
6527: LD_EXP 41
6531: PUSH
6532: LD_VAR 0 3
6536: PUSH
6537: LD_INT 2
6539: MOD
6540: PUSH
6541: LD_INT 1
6543: PLUS
6544: ARRAY
6545: PUSH
6546: LD_INT 1
6548: PLUS
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PPUSH
6554: LD_VAR 0 6
6558: PPUSH
6559: CALL 16381 0 3
6563: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i mod 2 + 1 , mc_bases [ i mod 2 + 1 ] + 1 ] , un2 ) ;
6564: LD_ADDR_EXP 41
6568: PUSH
6569: LD_EXP 41
6573: PPUSH
6574: LD_VAR 0 3
6578: PUSH
6579: LD_INT 2
6581: MOD
6582: PUSH
6583: LD_INT 1
6585: PLUS
6586: PUSH
6587: LD_EXP 41
6591: PUSH
6592: LD_VAR 0 3
6596: PUSH
6597: LD_INT 2
6599: MOD
6600: PUSH
6601: LD_INT 1
6603: PLUS
6604: ARRAY
6605: PUSH
6606: LD_INT 1
6608: PLUS
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PPUSH
6614: LD_VAR 0 7
6618: PPUSH
6619: CALL 16381 0 3
6623: ST_TO_ADDR
// end ;
6624: GO 6356
6626: POP
6627: POP
// for i in FilterAllUnits ( [ [ f_side , side_bot ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
6628: LD_ADDR_VAR 0 3
6632: PUSH
6633: LD_INT 22
6635: PUSH
6636: LD_EXP 3
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 30
6647: PUSH
6648: LD_INT 31
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: LD_INT 58
6657: PUSH
6658: EMPTY
6659: LIST
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: LIST
6665: PPUSH
6666: CALL_OW 69
6670: PUSH
6671: FOR_IN
6672: IFFALSE 6797
// begin if GetBase ( i ) then
6674: LD_VAR 0 3
6678: PPUSH
6679: CALL_OW 274
6683: IFFALSE 6687
// continue ;
6685: GO 6671
// d := GetDir ( i ) ;
6687: LD_ADDR_VAR 0 4
6691: PUSH
6692: LD_VAR 0 3
6696: PPUSH
6697: CALL_OW 254
6701: ST_TO_ADDR
// if d < 3 then
6702: LD_VAR 0 4
6706: PUSH
6707: LD_INT 3
6709: LESS
6710: IFFALSE 6728
// d := d + 3 else
6712: LD_ADDR_VAR 0 4
6716: PUSH
6717: LD_VAR 0 4
6721: PUSH
6722: LD_INT 3
6724: PLUS
6725: ST_TO_ADDR
6726: GO 6742
// d := d - 3 ;
6728: LD_ADDR_VAR 0 4
6732: PUSH
6733: LD_VAR 0 4
6737: PUSH
6738: LD_INT 3
6740: MINUS
6741: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
6742: LD_INT 0
6744: PPUSH
6745: LD_INT 8
6747: PPUSH
6748: LD_VAR 0 8
6752: PPUSH
6753: CALL_OW 380
// un := CreateHuman ;
6757: LD_ADDR_VAR 0 6
6761: PUSH
6762: CALL_OW 44
6766: ST_TO_ADDR
// SetDir ( un , d ) ;
6767: LD_VAR 0 6
6771: PPUSH
6772: LD_VAR 0 4
6776: PPUSH
6777: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
6781: LD_VAR 0 6
6785: PPUSH
6786: LD_VAR 0 3
6790: PPUSH
6791: CALL_OW 52
// end ;
6795: GO 6671
6797: POP
6798: POP
// ar_force_tmp := [ ] ;
6799: LD_ADDR_EXP 35
6803: PUSH
6804: EMPTY
6805: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
6806: LD_INT 1
6808: PPUSH
6809: LD_INT 1
6811: PPUSH
6812: LD_VAR 0 8
6816: PPUSH
6817: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6821: LD_ADDR_OWVAR 33
6825: PUSH
6826: LD_STRING SecondCharsGal
6828: ST_TO_ADDR
// hc_face_number := 4 ;
6829: LD_ADDR_OWVAR 34
6833: PUSH
6834: LD_INT 4
6836: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
6837: LD_ADDR_EXP 35
6841: PUSH
6842: LD_EXP 35
6846: PPUSH
6847: LD_INT 1
6849: PPUSH
6850: CALL_OW 44
6854: PPUSH
6855: CALL_OW 1
6859: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6860: LD_INT 2
6862: PPUSH
6863: LD_INT 4
6865: PPUSH
6866: LD_VAR 0 8
6870: PPUSH
6871: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6875: LD_ADDR_OWVAR 33
6879: PUSH
6880: LD_STRING SecondCharsGal
6882: ST_TO_ADDR
// hc_face_number := 15 ;
6883: LD_ADDR_OWVAR 34
6887: PUSH
6888: LD_INT 15
6890: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
6891: LD_ADDR_EXP 35
6895: PUSH
6896: LD_EXP 35
6900: PPUSH
6901: LD_INT 2
6903: PPUSH
6904: CALL_OW 44
6908: PPUSH
6909: CALL_OW 1
6913: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6914: LD_INT 2
6916: PPUSH
6917: LD_INT 4
6919: PPUSH
6920: LD_VAR 0 8
6924: PPUSH
6925: CALL_OW 380
// hc_gallery :=  ;
6929: LD_ADDR_OWVAR 33
6933: PUSH
6934: LD_STRING 
6936: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
6937: LD_ADDR_EXP 35
6941: PUSH
6942: LD_EXP 35
6946: PPUSH
6947: LD_INT 3
6949: PPUSH
6950: CALL_OW 44
6954: PPUSH
6955: CALL_OW 1
6959: ST_TO_ADDR
// hc_sex := sex_male ;
6960: LD_ADDR_OWVAR 27
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// hc_class = 11 ;
6968: LD_ADDR_OWVAR 28
6972: PUSH
6973: LD_INT 11
6975: ST_TO_ADDR
// hc_gallery = sandar ;
6976: LD_ADDR_OWVAR 33
6980: PUSH
6981: LD_STRING sandar
6983: ST_TO_ADDR
// hc_face_number = 33 ;
6984: LD_ADDR_OWVAR 34
6988: PUSH
6989: LD_INT 33
6991: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
6992: LD_ADDR_OWVAR 26
6996: PUSH
6997: LD_STRING Thabit Muhair Saliba
6999: ST_TO_ADDR
// hc_skills = [ 5 , 5 , 3 , 3 ] ;
7000: LD_ADDR_OWVAR 31
7004: PUSH
7005: LD_INT 5
7007: PUSH
7008: LD_INT 5
7010: PUSH
7011: LD_INT 3
7013: PUSH
7014: LD_INT 3
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: ST_TO_ADDR
// Saliba = CreateHuman ;
7023: LD_ADDR_EXP 38
7027: PUSH
7028: CALL_OW 44
7032: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
7033: LD_EXP 38
7037: PPUSH
7038: LD_INT 7
7040: PPUSH
7041: CALL_OW 52
// hc_name := Dietrich Gensher ;
7045: LD_ADDR_OWVAR 26
7049: PUSH
7050: LD_STRING Dietrich Gensher
7052: ST_TO_ADDR
// hc_class := 1 ;
7053: LD_ADDR_OWVAR 28
7057: PUSH
7058: LD_INT 1
7060: ST_TO_ADDR
// hc_gallery := sandar ;
7061: LD_ADDR_OWVAR 33
7065: PUSH
7066: LD_STRING sandar
7068: ST_TO_ADDR
// hc_face_number := 2 ;
7069: LD_ADDR_OWVAR 34
7073: PUSH
7074: LD_INT 2
7076: ST_TO_ADDR
// hc_skills := [ 10 , 6 , 5 , 4 ] ;
7077: LD_ADDR_OWVAR 31
7081: PUSH
7082: LD_INT 10
7084: PUSH
7085: LD_INT 6
7087: PUSH
7088: LD_INT 5
7090: PUSH
7091: LD_INT 4
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: ST_TO_ADDR
// Gensher := CreateHuman ;
7100: LD_ADDR_EXP 39
7104: PUSH
7105: CALL_OW 44
7109: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
7110: LD_EXP 39
7114: PPUSH
7115: LD_INT 94
7117: PPUSH
7118: CALL_OW 52
// InitHc ;
7122: CALL_OW 19
// ar_defenders_tmp := [ [ ] , [ ] , [ ] , [ ] ] ;
7126: LD_ADDR_EXP 37
7130: PUSH
7131: EMPTY
7132: PUSH
7133: EMPTY
7134: PUSH
7135: EMPTY
7136: PUSH
7137: EMPTY
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
7145: LD_ADDR_VAR 0 4
7149: PUSH
7150: DOUBLE
7151: LD_INT 1
7153: DEC
7154: ST_TO_ADDR
7155: LD_INT 3
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: LD_INT 4
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: PUSH
7169: LD_OWVAR 67
7173: ARRAY
7174: PUSH
7175: FOR_TO
7176: IFFALSE 7394
// for i = 1 to 4 do
7178: LD_ADDR_VAR 0 3
7182: PUSH
7183: DOUBLE
7184: LD_INT 1
7186: DEC
7187: ST_TO_ADDR
7188: LD_INT 4
7190: PUSH
7191: FOR_TO
7192: IFFALSE 7390
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
7194: LD_INT 14
7196: PPUSH
7197: LD_INT 3
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 1
7209: PPUSH
7210: LD_INT 2
7212: PPUSH
7213: CALL_OW 12
7217: ARRAY
7218: PPUSH
7219: LD_INT 1
7221: PUSH
7222: LD_INT 5
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 1
7231: PPUSH
7232: LD_INT 2
7234: PPUSH
7235: CALL_OW 12
7239: ARRAY
7240: PPUSH
7241: LD_INT 25
7243: PUSH
7244: LD_INT 27
7246: PUSH
7247: LD_INT 26
7249: PUSH
7250: LD_INT 28
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: PUSH
7259: LD_INT 1
7261: PPUSH
7262: LD_INT 4
7264: PPUSH
7265: CALL_OW 12
7269: ARRAY
7270: PPUSH
7271: LD_INT 100
7273: PPUSH
7274: CALL 15824 0 5
// un := CreateVehicle ;
7278: LD_ADDR_VAR 0 6
7282: PUSH
7283: CALL_OW 45
7287: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
7288: LD_ADDR_EXP 37
7292: PUSH
7293: LD_EXP 37
7297: PPUSH
7298: LD_VAR 0 3
7302: PUSH
7303: LD_EXP 37
7307: PUSH
7308: LD_VAR 0 3
7312: ARRAY
7313: PUSH
7314: LD_INT 1
7316: PLUS
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PPUSH
7322: LD_VAR 0 6
7326: PPUSH
7327: CALL 16381 0 3
7331: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
7332: LD_VAR 0 6
7336: PPUSH
7337: LD_INT 0
7339: PPUSH
7340: LD_INT 5
7342: PPUSH
7343: CALL_OW 12
7347: PPUSH
7348: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east , parking_south ] [ i ] , false ) ;
7352: LD_VAR 0 6
7356: PPUSH
7357: LD_INT 20
7359: PUSH
7360: LD_INT 21
7362: PUSH
7363: LD_INT 22
7365: PUSH
7366: LD_INT 24
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: PUSH
7375: LD_VAR 0 3
7379: ARRAY
7380: PPUSH
7381: LD_INT 0
7383: PPUSH
7384: CALL_OW 49
// end ;
7388: GO 7191
7390: POP
7391: POP
7392: GO 7175
7394: POP
7395: POP
// InitHc ;
7396: CALL_OW 19
// end ;
7400: LD_VAR 0 2
7404: RET
// every 13 13$00 + 10 10$00 trigger IsOk ( ar_dep_n ) and GetSide ( ar_dep_n ) = side_bot do var i , t , x , base , tmp , coords , flags , danger , target , _target ;
7405: LD_INT 94
7407: PPUSH
7408: CALL_OW 302
7412: PUSH
7413: LD_INT 94
7415: PPUSH
7416: CALL_OW 255
7420: PUSH
7421: LD_EXP 3
7425: EQUAL
7426: AND
7427: IFFALSE 8136
7429: GO 7431
7431: DISABLE
7432: LD_INT 0
7434: PPUSH
7435: PPUSH
7436: PPUSH
7437: PPUSH
7438: PPUSH
7439: PPUSH
7440: PPUSH
7441: PPUSH
7442: PPUSH
7443: PPUSH
// begin enable ;
7444: ENABLE
// base := 1 ;
7445: LD_ADDR_VAR 0 4
7449: PUSH
7450: LD_INT 1
7452: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
7453: LD_ADDR_VAR 0 7
7457: PUSH
7458: LD_INT 0
7460: PUSH
7461: LD_INT 0
7463: PUSH
7464: LD_INT 0
7466: PUSH
7467: LD_INT 0
7469: PUSH
7470: LD_INT 1
7472: PUSH
7473: LD_INT 0
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: LD_INT 0
7481: PUSH
7482: LD_INT 1
7484: PUSH
7485: LD_INT 0
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: ST_TO_ADDR
// coords := [ [ 28 , 14 ] , [ 107 , 119 ] , [ 127 , 97 ] , [ 185 , 127 ] ] ;
7500: LD_ADDR_VAR 0 6
7504: PUSH
7505: LD_INT 28
7507: PUSH
7508: LD_INT 14
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: LD_INT 107
7517: PUSH
7518: LD_INT 119
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 127
7527: PUSH
7528: LD_INT 97
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PUSH
7535: LD_INT 185
7537: PUSH
7538: LD_INT 127
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// target := 0 ;
7551: LD_ADDR_VAR 0 9
7555: PUSH
7556: LD_INT 0
7558: ST_TO_ADDR
// x := 0 ;
7559: LD_ADDR_VAR 0 3
7563: PUSH
7564: LD_INT 0
7566: ST_TO_ADDR
// tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
7567: LD_ADDR_VAR 0 5
7571: PUSH
7572: LD_INT 14
7574: PUSH
7575: LD_INT 1
7577: PUSH
7578: LD_INT 2
7580: PUSH
7581: LD_INT 28
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 14
7592: PUSH
7593: LD_INT 1
7595: PUSH
7596: LD_INT 2
7598: PUSH
7599: LD_INT 25
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 14
7610: PUSH
7611: LD_INT 1
7613: PUSH
7614: LD_INT 2
7616: PUSH
7617: LD_INT 28
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 14
7628: PUSH
7629: LD_INT 1
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: LD_INT 29
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: ST_TO_ADDR
// if Difficulty > 1 then
7650: LD_OWVAR 67
7654: PUSH
7655: LD_INT 1
7657: GREATER
7658: IFFALSE 7755
// for i = 1 to Difficulty + 2 do
7660: LD_ADDR_VAR 0 1
7664: PUSH
7665: DOUBLE
7666: LD_INT 1
7668: DEC
7669: ST_TO_ADDR
7670: LD_OWVAR 67
7674: PUSH
7675: LD_INT 2
7677: PLUS
7678: PUSH
7679: FOR_TO
7680: IFFALSE 7753
// tmp := Insert ( tmp , tmp + 1 , [ ar_half_tracked , engine_combustion , control_remote , [ ar_rocket_launcher , ar_gun , ar_gun , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ) ;
7682: LD_ADDR_VAR 0 5
7686: PUSH
7687: LD_VAR 0 5
7691: PPUSH
7692: LD_VAR 0 5
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: PPUSH
7701: LD_INT 14
7703: PUSH
7704: LD_INT 1
7706: PUSH
7707: LD_INT 2
7709: PUSH
7710: LD_INT 28
7712: PUSH
7713: LD_INT 27
7715: PUSH
7716: LD_INT 27
7718: PUSH
7719: LD_INT 29
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: PUSH
7728: LD_INT 1
7730: PPUSH
7731: LD_INT 4
7733: PPUSH
7734: CALL_OW 12
7738: ARRAY
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PPUSH
7746: CALL_OW 2
7750: ST_TO_ADDR
7751: GO 7679
7753: POP
7754: POP
// MC_SetProduceList ( base , tmp ) ;
7755: LD_VAR 0 4
7759: PPUSH
7760: LD_VAR 0 5
7764: PPUSH
7765: CALL 60750 0 2
// repeat wait ( 0 0$1 ) ;
7769: LD_INT 35
7771: PPUSH
7772: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7776: LD_VAR 0 4
7780: PPUSH
7781: CALL 61111 0 1
7785: PUSH
7786: LD_INT 0
7788: EQUAL
7789: IFFALSE 7769
// wait ( 0 0$10 ) ;
7791: LD_INT 350
7793: PPUSH
7794: CALL_OW 67
// for i = 1 to coords do
7798: LD_ADDR_VAR 0 1
7802: PUSH
7803: DOUBLE
7804: LD_INT 1
7806: DEC
7807: ST_TO_ADDR
7808: LD_VAR 0 6
7812: PUSH
7813: FOR_TO
7814: IFFALSE 7902
// begin t := DangerAtRangeXY ( side_bot , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] , 35 ) [ 4 ] ;
7816: LD_ADDR_VAR 0 2
7820: PUSH
7821: LD_EXP 3
7825: PPUSH
7826: LD_VAR 0 6
7830: PUSH
7831: LD_VAR 0 1
7835: ARRAY
7836: PUSH
7837: LD_INT 1
7839: ARRAY
7840: PPUSH
7841: LD_VAR 0 6
7845: PUSH
7846: LD_VAR 0 1
7850: ARRAY
7851: PUSH
7852: LD_INT 2
7854: ARRAY
7855: PPUSH
7856: LD_INT 35
7858: PPUSH
7859: CALL 16875 0 4
7863: PUSH
7864: LD_INT 4
7866: ARRAY
7867: ST_TO_ADDR
// if t > x then
7868: LD_VAR 0 2
7872: PUSH
7873: LD_VAR 0 3
7877: GREATER
7878: IFFALSE 7900
// begin x := t ;
7880: LD_ADDR_VAR 0 3
7884: PUSH
7885: LD_VAR 0 2
7889: ST_TO_ADDR
// target := i ;
7890: LD_ADDR_VAR 0 9
7894: PUSH
7895: LD_VAR 0 1
7899: ST_TO_ADDR
// end ; end ;
7900: GO 7813
7902: POP
7903: POP
// case target of 1 :
7904: LD_VAR 0 9
7908: PUSH
7909: LD_INT 1
7911: DOUBLE
7912: EQUAL
7913: IFTRUE 7917
7915: GO 7949
7917: POP
// _target := [ [ 60 , 8 ] , [ 28 , 15 ] ] ; 2 :
7918: LD_ADDR_VAR 0 10
7922: PUSH
7923: LD_INT 60
7925: PUSH
7926: LD_INT 8
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 28
7935: PUSH
7936: LD_INT 15
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: ST_TO_ADDR
7947: GO 8070
7949: LD_INT 2
7951: DOUBLE
7952: EQUAL
7953: IFTRUE 7957
7955: GO 7989
7957: POP
// _target := [ [ 52 , 11 ] , [ 76 , 90 ] ] ; 3 :
7958: LD_ADDR_VAR 0 10
7962: PUSH
7963: LD_INT 52
7965: PUSH
7966: LD_INT 11
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 76
7975: PUSH
7976: LD_INT 90
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: ST_TO_ADDR
7987: GO 8070
7989: LD_INT 3
7991: DOUBLE
7992: EQUAL
7993: IFTRUE 7997
7995: GO 8029
7997: POP
// _target := [ [ 129 , 66 ] , [ 130 , 97 ] ] ; 4 :
7998: LD_ADDR_VAR 0 10
8002: PUSH
8003: LD_INT 129
8005: PUSH
8006: LD_INT 66
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PUSH
8013: LD_INT 130
8015: PUSH
8016: LD_INT 97
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: ST_TO_ADDR
8027: GO 8070
8029: LD_INT 4
8031: DOUBLE
8032: EQUAL
8033: IFTRUE 8037
8035: GO 8069
8037: POP
// _target := [ [ 156 , 87 ] , [ 183 , 127 ] ] ; end ;
8038: LD_ADDR_VAR 0 10
8042: PUSH
8043: LD_INT 156
8045: PUSH
8046: LD_INT 87
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: PUSH
8053: LD_INT 183
8055: PUSH
8056: LD_INT 127
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: ST_TO_ADDR
8067: GO 8070
8069: POP
// if not _target then
8070: LD_VAR 0 10
8074: NOT
8075: IFFALSE 8106
// _target := [ [ 52 , 11 ] , [ 76 , 90 ] ] ;
8077: LD_ADDR_VAR 0 10
8081: PUSH
8082: LD_INT 52
8084: PUSH
8085: LD_INT 11
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: LD_INT 76
8094: PUSH
8095: LD_INT 90
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: ST_TO_ADDR
// MC_PrepareAttack ( base , mc_vehicles [ base ] , _target , flags ) ;
8106: LD_VAR 0 4
8110: PPUSH
8111: LD_EXP 60
8115: PUSH
8116: LD_VAR 0 4
8120: ARRAY
8121: PPUSH
8122: LD_VAR 0 10
8126: PPUSH
8127: LD_VAR 0 7
8131: PPUSH
8132: CALL 60996 0 4
// end ;
8136: PPOPN 10
8138: END
// every 13 13$00 + 10 10$00 trigger ( IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) = side_bot ) and ( multi_players_amount = 3 or IsDead ( ar_dep_n ) or GetSide ( ar_dep_n ) <> side_bot ) do var i , t , x , base , tmp , coords , flags , danger , target , _target ;
8139: LD_INT 45
8141: PPUSH
8142: CALL_OW 302
8146: PUSH
8147: LD_INT 45
8149: PPUSH
8150: CALL_OW 255
8154: PUSH
8155: LD_EXP 3
8159: EQUAL
8160: AND
8161: PUSH
8162: LD_EXP 26
8166: PUSH
8167: LD_INT 3
8169: EQUAL
8170: PUSH
8171: LD_INT 94
8173: PPUSH
8174: CALL_OW 301
8178: OR
8179: PUSH
8180: LD_INT 94
8182: PPUSH
8183: CALL_OW 255
8187: PUSH
8188: LD_EXP 3
8192: NONEQUAL
8193: OR
8194: AND
8195: IFFALSE 8781
8197: GO 8199
8199: DISABLE
8200: LD_INT 0
8202: PPUSH
8203: PPUSH
8204: PPUSH
8205: PPUSH
8206: PPUSH
8207: PPUSH
8208: PPUSH
8209: PPUSH
8210: PPUSH
8211: PPUSH
// begin enable ;
8212: ENABLE
// base := 2 ;
8213: LD_ADDR_VAR 0 4
8217: PUSH
8218: LD_INT 2
8220: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
8221: LD_ADDR_VAR 0 7
8225: PUSH
8226: LD_INT 0
8228: PUSH
8229: LD_INT 0
8231: PUSH
8232: LD_INT 0
8234: PUSH
8235: LD_INT 0
8237: PUSH
8238: LD_INT 1
8240: PUSH
8241: LD_INT 0
8243: PUSH
8244: LD_INT 0
8246: PUSH
8247: LD_INT 0
8249: PUSH
8250: LD_INT 1
8252: PUSH
8253: LD_INT 0
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: ST_TO_ADDR
// coords := [ [ 101 , 110 ] , [ 100 , 21 ] ] ;
8268: LD_ADDR_VAR 0 6
8272: PUSH
8273: LD_INT 101
8275: PUSH
8276: LD_INT 110
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: LD_INT 100
8285: PUSH
8286: LD_INT 21
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: ST_TO_ADDR
// target := 0 ;
8297: LD_ADDR_VAR 0 9
8301: PUSH
8302: LD_INT 0
8304: ST_TO_ADDR
// x := 0 ;
8305: LD_ADDR_VAR 0 3
8309: PUSH
8310: LD_INT 0
8312: ST_TO_ADDR
// tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , ] ;
8313: LD_ADDR_VAR 0 5
8317: PUSH
8318: LD_INT 14
8320: PUSH
8321: LD_INT 1
8323: PUSH
8324: LD_INT 2
8326: PUSH
8327: LD_INT 28
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: PUSH
8336: LD_INT 14
8338: PUSH
8339: LD_INT 1
8341: PUSH
8342: LD_INT 2
8344: PUSH
8345: LD_INT 25
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: PUSH
8354: LD_INT 14
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 2
8362: PUSH
8363: LD_INT 28
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: LIST
8376: ST_TO_ADDR
// if Difficulty > 1 then
8377: LD_OWVAR 67
8381: PUSH
8382: LD_INT 1
8384: GREATER
8385: IFFALSE 8480
// for i = 1 to Difficulty + 1 do
8387: LD_ADDR_VAR 0 1
8391: PUSH
8392: DOUBLE
8393: LD_INT 1
8395: DEC
8396: ST_TO_ADDR
8397: LD_OWVAR 67
8401: PUSH
8402: LD_INT 1
8404: PLUS
8405: PUSH
8406: FOR_TO
8407: IFFALSE 8478
// tmp := Insert ( tmp , tmp + 1 , [ ar_half_tracked , engine_combustion , control_remote , [ ar_rocket_launcher , ar_gun , ar_gun ] [ i mod 2 + 1 ] ] ) ;
8409: LD_ADDR_VAR 0 5
8413: PUSH
8414: LD_VAR 0 5
8418: PPUSH
8419: LD_VAR 0 5
8423: PUSH
8424: LD_INT 1
8426: PLUS
8427: PPUSH
8428: LD_INT 14
8430: PUSH
8431: LD_INT 1
8433: PUSH
8434: LD_INT 2
8436: PUSH
8437: LD_INT 28
8439: PUSH
8440: LD_INT 27
8442: PUSH
8443: LD_INT 27
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: LIST
8450: PUSH
8451: LD_VAR 0 1
8455: PUSH
8456: LD_INT 2
8458: MOD
8459: PUSH
8460: LD_INT 1
8462: PLUS
8463: ARRAY
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: PPUSH
8471: CALL_OW 2
8475: ST_TO_ADDR
8476: GO 8406
8478: POP
8479: POP
// MC_SetProduceList ( base , tmp ) ;
8480: LD_VAR 0 4
8484: PPUSH
8485: LD_VAR 0 5
8489: PPUSH
8490: CALL 60750 0 2
// repeat wait ( 0 0$1 ) ;
8494: LD_INT 35
8496: PPUSH
8497: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
8501: LD_VAR 0 4
8505: PPUSH
8506: CALL 61111 0 1
8510: PUSH
8511: LD_INT 0
8513: EQUAL
8514: IFFALSE 8494
// wait ( 0 0$10 ) ;
8516: LD_INT 350
8518: PPUSH
8519: CALL_OW 67
// for i = 1 to coords do
8523: LD_ADDR_VAR 0 1
8527: PUSH
8528: DOUBLE
8529: LD_INT 1
8531: DEC
8532: ST_TO_ADDR
8533: LD_VAR 0 6
8537: PUSH
8538: FOR_TO
8539: IFFALSE 8627
// begin t := DangerAtRangeXY ( side_bot , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] , 35 ) [ 4 ] ;
8541: LD_ADDR_VAR 0 2
8545: PUSH
8546: LD_EXP 3
8550: PPUSH
8551: LD_VAR 0 6
8555: PUSH
8556: LD_VAR 0 1
8560: ARRAY
8561: PUSH
8562: LD_INT 1
8564: ARRAY
8565: PPUSH
8566: LD_VAR 0 6
8570: PUSH
8571: LD_VAR 0 1
8575: ARRAY
8576: PUSH
8577: LD_INT 2
8579: ARRAY
8580: PPUSH
8581: LD_INT 35
8583: PPUSH
8584: CALL 16875 0 4
8588: PUSH
8589: LD_INT 4
8591: ARRAY
8592: ST_TO_ADDR
// if t > x then
8593: LD_VAR 0 2
8597: PUSH
8598: LD_VAR 0 3
8602: GREATER
8603: IFFALSE 8625
// begin x := t ;
8605: LD_ADDR_VAR 0 3
8609: PUSH
8610: LD_VAR 0 2
8614: ST_TO_ADDR
// target := i ;
8615: LD_ADDR_VAR 0 9
8619: PUSH
8620: LD_VAR 0 1
8624: ST_TO_ADDR
// end ; end ;
8625: GO 8538
8627: POP
8628: POP
// case target of 1 :
8629: LD_VAR 0 9
8633: PUSH
8634: LD_INT 1
8636: DOUBLE
8637: EQUAL
8638: IFTRUE 8642
8640: GO 8674
8642: POP
// _target := [ [ 49 , 35 ] , [ 76 , 90 ] ] ; 2 :
8643: LD_ADDR_VAR 0 10
8647: PUSH
8648: LD_INT 49
8650: PUSH
8651: LD_INT 35
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: LD_INT 76
8660: PUSH
8661: LD_INT 90
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: ST_TO_ADDR
8672: GO 8715
8674: LD_INT 2
8676: DOUBLE
8677: EQUAL
8678: IFTRUE 8682
8680: GO 8714
8682: POP
// _target := [ [ 79 , 13 ] , [ 100 , 22 ] ] ; end ;
8683: LD_ADDR_VAR 0 10
8687: PUSH
8688: LD_INT 79
8690: PUSH
8691: LD_INT 13
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: LD_INT 100
8700: PUSH
8701: LD_INT 22
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: ST_TO_ADDR
8712: GO 8715
8714: POP
// if not _target then
8715: LD_VAR 0 10
8719: NOT
8720: IFFALSE 8751
// _target := [ [ 49 , 35 ] , [ 76 , 90 ] ] ;
8722: LD_ADDR_VAR 0 10
8726: PUSH
8727: LD_INT 49
8729: PUSH
8730: LD_INT 35
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: LD_INT 76
8739: PUSH
8740: LD_INT 90
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: ST_TO_ADDR
// MC_PrepareAttack ( base , mc_vehicles [ base ] , _target , flags ) ;
8751: LD_VAR 0 4
8755: PPUSH
8756: LD_EXP 60
8760: PUSH
8761: LD_VAR 0 4
8765: ARRAY
8766: PPUSH
8767: LD_VAR 0 10
8771: PPUSH
8772: LD_VAR 0 7
8776: PPUSH
8777: CALL 60996 0 4
// end ; end_of_file
8781: PPOPN 10
8783: END
// on ArtifactLoaded ( cargo , artifact ) do var i , j ;
8784: LD_INT 0
8786: PPUSH
8787: PPUSH
// begin if artifact_get then
8788: LD_EXP 4
8792: IFFALSE 8796
// exit ;
8794: GO 8818
// MultiplayerEvent_ArtifactCaptured ( GetSide ( cargo ) ) ;
8796: LD_VAR 0 1
8800: PPUSH
8801: CALL_OW 255
8805: PPUSH
8806: CALL 5738 0 1
// artifact_get := true ;
8810: LD_ADDR_EXP 4
8814: PUSH
8815: LD_INT 1
8817: ST_TO_ADDR
// end ;
8818: PPOPN 4
8820: END
// on UnitDestroyed ( un ) do var i , side ;
8821: LD_INT 0
8823: PPUSH
8824: PPUSH
// begin side := GetSide ( un ) ;
8825: LD_ADDR_VAR 0 3
8829: PUSH
8830: LD_VAR 0 1
8834: PPUSH
8835: CALL_OW 255
8839: ST_TO_ADDR
// if not side in mc_sides and multi_sides [ side ] then
8840: LD_VAR 0 3
8844: PUSH
8845: LD_EXP 67
8849: IN
8850: NOT
8851: PUSH
8852: LD_EXP 7
8856: PUSH
8857: LD_VAR 0 3
8861: ARRAY
8862: AND
8863: IFFALSE 8889
// if GetType ( un ) = unit_human then
8865: LD_VAR 0 1
8869: PPUSH
8870: CALL_OW 247
8874: PUSH
8875: LD_INT 1
8877: EQUAL
8878: IFFALSE 8889
// MultiplayerEvent_HumanLost ( side ) ;
8880: LD_VAR 0 3
8884: PPUSH
8885: CALL 5378 0 1
// if side in mc_sides then
8889: LD_VAR 0 3
8893: PUSH
8894: LD_EXP 67
8898: IN
8899: IFFALSE 8944
// if un <> Gensher then
8901: LD_VAR 0 1
8905: PUSH
8906: LD_EXP 39
8910: NONEQUAL
8911: IFFALSE 8927
// MultiplayerEvent_UnitKilled ( un , false ) else
8913: LD_VAR 0 1
8917: PPUSH
8918: LD_INT 0
8920: PPUSH
8921: CALL 5492 0 2
8925: GO 8944
// MultiplayerEvent_UnitKilled ( un , Multiplayer_GetCondition ( 5 ) ) ;
8927: LD_VAR 0 1
8931: PPUSH
8932: LD_INT 5
8934: PPUSH
8935: CALL 4809 0 1
8939: PPUSH
8940: CALL 5492 0 2
// if multi_commanders and multi_custom_commanders then
8944: LD_EXP 24
8948: PUSH
8949: LD_EXP 16
8953: AND
8954: IFFALSE 9016
// if un in multi_commanders then
8956: LD_VAR 0 1
8960: PUSH
8961: LD_EXP 24
8965: IN
8966: IFFALSE 9016
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
8968: LD_ADDR_EXP 25
8972: PUSH
8973: LD_EXP 25
8977: PPUSH
8978: LD_VAR 0 3
8982: PPUSH
8983: LD_INT 1
8985: PPUSH
8986: CALL_OW 1
8990: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
8991: LD_ADDR_EXP 24
8995: PUSH
8996: LD_EXP 24
9000: PUSH
9001: LD_VAR 0 1
9005: DIFF
9006: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
9007: LD_VAR 0 3
9011: PPUSH
9012: CALL 4842 0 1
// end ; MCE_UnitDestroyed ( un ) ;
9016: LD_VAR 0 1
9020: PPUSH
9021: CALL 63112 0 1
// end ;
9025: PPOPN 3
9027: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
9028: LD_VAR 0 1
9032: PPUSH
9033: LD_VAR 0 2
9037: PPUSH
9038: CALL 64979 0 2
// end ;
9042: PPOPN 2
9044: END
// on BuildingComplete ( building ) do var i , j ;
9045: LD_INT 0
9047: PPUSH
9048: PPUSH
// begin if GetSide ( building ) in mc_sides then
9049: LD_VAR 0 1
9053: PPUSH
9054: CALL_OW 255
9058: PUSH
9059: LD_EXP 67
9063: IN
9064: IFFALSE 9090
// MultiplayerEvent_BuildingCompleted ( GetSide ( building ) , GetBType ( building ) ) ;
9066: LD_VAR 0 1
9070: PPUSH
9071: CALL_OW 255
9075: PPUSH
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 266
9085: PPUSH
9086: CALL 5422 0 2
// if GetBType ( building ) = b_depot and not GetSide ( building ) in mc_sides and base_names then
9090: LD_VAR 0 1
9094: PPUSH
9095: CALL_OW 266
9099: PUSH
9100: LD_INT 0
9102: EQUAL
9103: PUSH
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 255
9113: PUSH
9114: LD_EXP 67
9118: IN
9119: NOT
9120: AND
9121: PUSH
9122: LD_EXP 5
9126: AND
9127: IFFALSE 9165
// begin SetBName ( building , base_names [ 1 ] ) ;
9129: LD_VAR 0 1
9133: PPUSH
9134: LD_EXP 5
9138: PUSH
9139: LD_INT 1
9141: ARRAY
9142: PPUSH
9143: CALL_OW 500
// base_names := Delete ( base_names , 1 ) ;
9147: LD_ADDR_EXP 5
9151: PUSH
9152: LD_EXP 5
9156: PPUSH
9157: LD_INT 1
9159: PPUSH
9160: CALL_OW 3
9164: ST_TO_ADDR
// end ; MCE_BuildingComplete ( building ) ;
9165: LD_VAR 0 1
9169: PPUSH
9170: CALL 64295 0 1
// end ;
9174: PPOPN 3
9176: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
9177: LD_VAR 0 1
9181: PPUSH
9182: LD_VAR 0 2
9186: PPUSH
9187: CALL 62824 0 2
// end ;
9191: PPOPN 2
9193: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
9194: LD_VAR 0 1
9198: PPUSH
9199: LD_VAR 0 2
9203: PPUSH
9204: LD_VAR 0 3
9208: PPUSH
9209: LD_VAR 0 4
9213: PPUSH
9214: LD_VAR 0 5
9218: PPUSH
9219: CALL 62451 0 5
// end ;
9223: PPOPN 5
9225: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp ;
9226: LD_INT 0
9228: PPUSH
9229: PPUSH
9230: PPUSH
// begin side := GetSide ( vehicle ) ;
9231: LD_ADDR_VAR 0 4
9235: PUSH
9236: LD_VAR 0 1
9240: PPUSH
9241: CALL_OW 255
9245: ST_TO_ADDR
// if not side in mc_sides and multi_sides [ side ] then
9246: LD_VAR 0 4
9250: PUSH
9251: LD_EXP 67
9255: IN
9256: NOT
9257: PUSH
9258: LD_EXP 7
9262: PUSH
9263: LD_VAR 0 4
9267: ARRAY
9268: AND
9269: IFFALSE 9280
// MultiplayerEvent_Produced ( side ) ;
9271: LD_VAR 0 4
9275: PPUSH
9276: CALL 5334 0 1
// MCE_VehicleConstructed ( vehicle , factory ) ;
9280: LD_VAR 0 1
9284: PPUSH
9285: LD_VAR 0 2
9289: PPUSH
9290: CALL 62139 0 2
// end ;
9294: PPOPN 5
9296: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
9297: LD_VAR 0 1
9301: PPUSH
9302: LD_VAR 0 2
9306: PPUSH
9307: LD_VAR 0 3
9311: PPUSH
9312: LD_VAR 0 4
9316: PPUSH
9317: CALL 61984 0 4
// end ;
9321: PPOPN 4
9323: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
9324: LD_VAR 0 1
9328: PPUSH
9329: LD_VAR 0 2
9333: PPUSH
9334: LD_VAR 0 3
9338: PPUSH
9339: CALL 61766 0 3
// end ;
9343: PPOPN 3
9345: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
9346: LD_VAR 0 1
9350: PPUSH
9351: LD_VAR 0 2
9355: PPUSH
9356: CALL 61658 0 2
// end ;
9360: PPOPN 2
9362: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
9363: LD_VAR 0 1
9367: PPUSH
9368: LD_VAR 0 2
9372: PPUSH
9373: CALL 65233 0 2
// end ;
9377: PPOPN 2
9379: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
9380: LD_VAR 0 1
9384: PPUSH
9385: LD_VAR 0 2
9389: PPUSH
9390: LD_VAR 0 3
9394: PPUSH
9395: LD_VAR 0 4
9399: PPUSH
9400: CALL 65442 0 4
// end ; end_of_file
9404: PPOPN 4
9406: END
// every 0 0$1 trigger game do
9407: LD_EXP 2
9411: IFFALSE 9456
9413: GO 9415
9415: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
9416: LD_INT 7
9418: PUSH
9419: LD_INT 6
9421: PUSH
9422: LD_INT 4
9424: PUSH
9425: LD_INT 6
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: PPUSH
9434: LD_EXP 21
9438: PUSH
9439: LD_INT 2
9441: ARRAY
9442: PPUSH
9443: LD_EXP 21
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: PPUSH
9452: CALL 9457 0 3
9456: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , players_areas ; begin
9457: LD_INT 0
9459: PPUSH
9460: PPUSH
9461: PPUSH
9462: PPUSH
// if not areas then
9463: LD_VAR 0 1
9467: NOT
9468: IFFALSE 9472
// exit ;
9470: GO 9747
// players_areas := [ crates_player_west , crates_player_south , crates_player_east ] ;
9472: LD_ADDR_VAR 0 7
9476: PUSH
9477: LD_INT 31
9479: PUSH
9480: LD_INT 32
9482: PUSH
9483: LD_INT 30
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: LIST
9490: ST_TO_ADDR
// repeat wait ( time ) ;
9491: LD_VAR 0 2
9495: PPUSH
9496: CALL_OW 67
// x := 5 ;
9500: LD_ADDR_VAR 0 6
9504: PUSH
9505: LD_INT 5
9507: ST_TO_ADDR
// if tick < [ 20 20$00 , 18 18$00 , 14 14$00 ] [ Difficulty ] then
9508: LD_OWVAR 1
9512: PUSH
9513: LD_INT 42000
9515: PUSH
9516: LD_INT 37800
9518: PUSH
9519: LD_INT 29400
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: PUSH
9527: LD_OWVAR 67
9531: ARRAY
9532: LESS
9533: IFFALSE 9605
// begin for i = 1 to multi_sides do
9535: LD_ADDR_VAR 0 5
9539: PUSH
9540: DOUBLE
9541: LD_INT 1
9543: DEC
9544: ST_TO_ADDR
9545: LD_EXP 7
9549: PUSH
9550: FOR_TO
9551: IFFALSE 9596
// if multi_sides [ i ] then
9553: LD_EXP 7
9557: PUSH
9558: LD_VAR 0 5
9562: ARRAY
9563: IFFALSE 9594
// CreateCratesArea ( x , players_areas [ multi_sides [ i ] ] , true ) ;
9565: LD_VAR 0 6
9569: PPUSH
9570: LD_VAR 0 7
9574: PUSH
9575: LD_EXP 7
9579: PUSH
9580: LD_VAR 0 5
9584: ARRAY
9585: ARRAY
9586: PPUSH
9587: LD_INT 1
9589: PPUSH
9590: CALL_OW 55
9594: GO 9550
9596: POP
9597: POP
// wait ( 0 0$6 ) ;
9598: LD_INT 210
9600: PPUSH
9601: CALL_OW 67
// end ; for i in areas do
9605: LD_ADDR_VAR 0 5
9609: PUSH
9610: LD_VAR 0 1
9614: PUSH
9615: FOR_IN
9616: IFFALSE 9644
// begin wait ( 0 0$6 ) ;
9618: LD_INT 210
9620: PPUSH
9621: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
9625: LD_VAR 0 6
9629: PPUSH
9630: LD_VAR 0 5
9634: PPUSH
9635: LD_INT 1
9637: PPUSH
9638: CALL_OW 55
// end ;
9642: GO 9615
9644: POP
9645: POP
// time := time + 0 0$2 ;
9646: LD_ADDR_VAR 0 2
9650: PUSH
9651: LD_VAR 0 2
9655: PUSH
9656: LD_INT 70
9658: PLUS
9659: ST_TO_ADDR
// amount := amount - x * 10 ;
9660: LD_ADDR_VAR 0 3
9664: PUSH
9665: LD_VAR 0 3
9669: PUSH
9670: LD_VAR 0 6
9674: PUSH
9675: LD_INT 10
9677: MUL
9678: MINUS
9679: ST_TO_ADDR
// x := x - 1 ;
9680: LD_ADDR_VAR 0 6
9684: PUSH
9685: LD_VAR 0 6
9689: PUSH
9690: LD_INT 1
9692: MINUS
9693: ST_TO_ADDR
// if x = 0 then
9694: LD_VAR 0 6
9698: PUSH
9699: LD_INT 0
9701: EQUAL
9702: IFFALSE 9712
// x := 5 ;
9704: LD_ADDR_VAR 0 6
9708: PUSH
9709: LD_INT 5
9711: ST_TO_ADDR
// if time > 4 4$00 then
9712: LD_VAR 0 2
9716: PUSH
9717: LD_INT 8400
9719: GREATER
9720: IFFALSE 9730
// time := 0 0$40 ;
9722: LD_ADDR_VAR 0 2
9726: PUSH
9727: LD_INT 1400
9729: ST_TO_ADDR
// until not game or amount <= 0 ;
9730: LD_EXP 2
9734: NOT
9735: PUSH
9736: LD_VAR 0 3
9740: PUSH
9741: LD_INT 0
9743: LESSEQUAL
9744: OR
9745: IFFALSE 9491
// end ; end_of_file
9747: LD_VAR 0 4
9751: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9752: LD_INT 0
9754: PPUSH
9755: PPUSH
// if exist_mode then
9756: LD_VAR 0 2
9760: IFFALSE 9785
// unit := CreateCharacter ( prefix & ident ) else
9762: LD_ADDR_VAR 0 5
9766: PUSH
9767: LD_VAR 0 3
9771: PUSH
9772: LD_VAR 0 1
9776: STR
9777: PPUSH
9778: CALL_OW 34
9782: ST_TO_ADDR
9783: GO 9800
// unit := NewCharacter ( ident ) ;
9785: LD_ADDR_VAR 0 5
9789: PUSH
9790: LD_VAR 0 1
9794: PPUSH
9795: CALL_OW 25
9799: ST_TO_ADDR
// result := unit ;
9800: LD_ADDR_VAR 0 4
9804: PUSH
9805: LD_VAR 0 5
9809: ST_TO_ADDR
// end ;
9810: LD_VAR 0 4
9814: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9815: LD_INT 0
9817: PPUSH
9818: PPUSH
// if not side or not nation then
9819: LD_VAR 0 1
9823: NOT
9824: PUSH
9825: LD_VAR 0 2
9829: NOT
9830: OR
9831: IFFALSE 9835
// exit ;
9833: GO 10447
// case nation of nation_american :
9835: LD_VAR 0 2
9839: PUSH
9840: LD_INT 1
9842: DOUBLE
9843: EQUAL
9844: IFTRUE 9848
9846: GO 10006
9848: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
9849: LD_ADDR_VAR 0 4
9853: PUSH
9854: LD_INT 35
9856: PUSH
9857: LD_INT 45
9859: PUSH
9860: LD_INT 46
9862: PUSH
9863: LD_INT 47
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: LD_INT 2
9871: PUSH
9872: LD_INT 6
9874: PUSH
9875: LD_INT 15
9877: PUSH
9878: LD_INT 16
9880: PUSH
9881: LD_INT 7
9883: PUSH
9884: LD_INT 12
9886: PUSH
9887: LD_INT 13
9889: PUSH
9890: LD_INT 10
9892: PUSH
9893: LD_INT 14
9895: PUSH
9896: LD_INT 20
9898: PUSH
9899: LD_INT 25
9901: PUSH
9902: LD_INT 36
9904: PUSH
9905: LD_INT 69
9907: PUSH
9908: LD_INT 39
9910: PUSH
9911: LD_INT 34
9913: PUSH
9914: LD_INT 40
9916: PUSH
9917: LD_INT 48
9919: PUSH
9920: LD_INT 49
9922: PUSH
9923: LD_INT 50
9925: PUSH
9926: LD_INT 51
9928: PUSH
9929: LD_INT 52
9931: PUSH
9932: LD_INT 53
9934: PUSH
9935: LD_INT 54
9937: PUSH
9938: LD_INT 55
9940: PUSH
9941: LD_INT 56
9943: PUSH
9944: LD_INT 57
9946: PUSH
9947: LD_INT 58
9949: PUSH
9950: LD_INT 59
9952: PUSH
9953: LD_INT 60
9955: PUSH
9956: LD_INT 61
9958: PUSH
9959: LD_INT 62
9961: PUSH
9962: LD_INT 80
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: ST_TO_ADDR
10004: GO 10371
10006: LD_INT 2
10008: DOUBLE
10009: EQUAL
10010: IFTRUE 10014
10012: GO 10184
10014: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
10015: LD_ADDR_VAR 0 4
10019: PUSH
10020: LD_INT 35
10022: PUSH
10023: LD_INT 45
10025: PUSH
10026: LD_INT 46
10028: PUSH
10029: LD_INT 47
10031: PUSH
10032: LD_INT 70
10034: PUSH
10035: LD_INT 1
10037: PUSH
10038: LD_INT 11
10040: PUSH
10041: LD_INT 3
10043: PUSH
10044: LD_INT 4
10046: PUSH
10047: LD_INT 5
10049: PUSH
10050: LD_INT 6
10052: PUSH
10053: LD_INT 15
10055: PUSH
10056: LD_INT 18
10058: PUSH
10059: LD_INT 7
10061: PUSH
10062: LD_INT 17
10064: PUSH
10065: LD_INT 8
10067: PUSH
10068: LD_INT 20
10070: PUSH
10071: LD_INT 72
10073: PUSH
10074: LD_INT 26
10076: PUSH
10077: LD_INT 69
10079: PUSH
10080: LD_INT 39
10082: PUSH
10083: LD_INT 40
10085: PUSH
10086: LD_INT 41
10088: PUSH
10089: LD_INT 42
10091: PUSH
10092: LD_INT 43
10094: PUSH
10095: LD_INT 48
10097: PUSH
10098: LD_INT 49
10100: PUSH
10101: LD_INT 50
10103: PUSH
10104: LD_INT 51
10106: PUSH
10107: LD_INT 52
10109: PUSH
10110: LD_INT 53
10112: PUSH
10113: LD_INT 54
10115: PUSH
10116: LD_INT 55
10118: PUSH
10119: LD_INT 56
10121: PUSH
10122: LD_INT 60
10124: PUSH
10125: LD_INT 61
10127: PUSH
10128: LD_INT 62
10130: PUSH
10131: LD_INT 66
10133: PUSH
10134: LD_INT 67
10136: PUSH
10137: LD_INT 68
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: ST_TO_ADDR
10182: GO 10371
10184: LD_INT 3
10186: DOUBLE
10187: EQUAL
10188: IFTRUE 10192
10190: GO 10370
10192: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
10193: LD_ADDR_VAR 0 4
10197: PUSH
10198: LD_INT 46
10200: PUSH
10201: LD_INT 47
10203: PUSH
10204: LD_INT 1
10206: PUSH
10207: LD_INT 2
10209: PUSH
10210: LD_INT 11
10212: PUSH
10213: LD_INT 9
10215: PUSH
10216: LD_INT 20
10218: PUSH
10219: LD_INT 19
10221: PUSH
10222: LD_INT 21
10224: PUSH
10225: LD_INT 24
10227: PUSH
10228: LD_INT 22
10230: PUSH
10231: LD_INT 25
10233: PUSH
10234: LD_INT 28
10236: PUSH
10237: LD_INT 29
10239: PUSH
10240: LD_INT 31
10242: PUSH
10243: LD_INT 37
10245: PUSH
10246: LD_INT 38
10248: PUSH
10249: LD_INT 32
10251: PUSH
10252: LD_INT 27
10254: PUSH
10255: LD_INT 33
10257: PUSH
10258: LD_INT 69
10260: PUSH
10261: LD_INT 39
10263: PUSH
10264: LD_INT 34
10266: PUSH
10267: LD_INT 40
10269: PUSH
10270: LD_INT 71
10272: PUSH
10273: LD_INT 23
10275: PUSH
10276: LD_INT 44
10278: PUSH
10279: LD_INT 48
10281: PUSH
10282: LD_INT 49
10284: PUSH
10285: LD_INT 50
10287: PUSH
10288: LD_INT 51
10290: PUSH
10291: LD_INT 52
10293: PUSH
10294: LD_INT 53
10296: PUSH
10297: LD_INT 54
10299: PUSH
10300: LD_INT 55
10302: PUSH
10303: LD_INT 56
10305: PUSH
10306: LD_INT 57
10308: PUSH
10309: LD_INT 58
10311: PUSH
10312: LD_INT 59
10314: PUSH
10315: LD_INT 63
10317: PUSH
10318: LD_INT 64
10320: PUSH
10321: LD_INT 65
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: ST_TO_ADDR
10368: GO 10371
10370: POP
// if state > - 1 and state < 3 then
10371: LD_VAR 0 3
10375: PUSH
10376: LD_INT 1
10378: NEG
10379: GREATER
10380: PUSH
10381: LD_VAR 0 3
10385: PUSH
10386: LD_INT 3
10388: LESS
10389: AND
10390: IFFALSE 10447
// for i in result do
10392: LD_ADDR_VAR 0 5
10396: PUSH
10397: LD_VAR 0 4
10401: PUSH
10402: FOR_IN
10403: IFFALSE 10445
// if GetTech ( i , side ) <> state then
10405: LD_VAR 0 5
10409: PPUSH
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 321
10419: PUSH
10420: LD_VAR 0 3
10424: NONEQUAL
10425: IFFALSE 10443
// result := result diff i ;
10427: LD_ADDR_VAR 0 4
10431: PUSH
10432: LD_VAR 0 4
10436: PUSH
10437: LD_VAR 0 5
10441: DIFF
10442: ST_TO_ADDR
10443: GO 10402
10445: POP
10446: POP
// end ;
10447: LD_VAR 0 4
10451: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10452: LD_INT 0
10454: PPUSH
10455: PPUSH
10456: PPUSH
// result := true ;
10457: LD_ADDR_VAR 0 3
10461: PUSH
10462: LD_INT 1
10464: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10465: LD_ADDR_VAR 0 5
10469: PUSH
10470: LD_VAR 0 2
10474: PPUSH
10475: CALL_OW 480
10479: ST_TO_ADDR
// if not tmp then
10480: LD_VAR 0 5
10484: NOT
10485: IFFALSE 10489
// exit ;
10487: GO 10538
// for i in tmp do
10489: LD_ADDR_VAR 0 4
10493: PUSH
10494: LD_VAR 0 5
10498: PUSH
10499: FOR_IN
10500: IFFALSE 10536
// if GetTech ( i , side ) <> state_researched then
10502: LD_VAR 0 4
10506: PPUSH
10507: LD_VAR 0 1
10511: PPUSH
10512: CALL_OW 321
10516: PUSH
10517: LD_INT 2
10519: NONEQUAL
10520: IFFALSE 10534
// begin result := false ;
10522: LD_ADDR_VAR 0 3
10526: PUSH
10527: LD_INT 0
10529: ST_TO_ADDR
// exit ;
10530: POP
10531: POP
10532: GO 10538
// end ;
10534: GO 10499
10536: POP
10537: POP
// end ;
10538: LD_VAR 0 3
10542: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10543: LD_INT 0
10545: PPUSH
10546: PPUSH
10547: PPUSH
10548: PPUSH
10549: PPUSH
10550: PPUSH
10551: PPUSH
10552: PPUSH
10553: PPUSH
10554: PPUSH
10555: PPUSH
10556: PPUSH
10557: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10558: LD_VAR 0 1
10562: NOT
10563: PUSH
10564: LD_VAR 0 1
10568: PPUSH
10569: CALL_OW 257
10573: PUSH
10574: LD_INT 9
10576: NONEQUAL
10577: OR
10578: IFFALSE 10582
// exit ;
10580: GO 11155
// side := GetSide ( unit ) ;
10582: LD_ADDR_VAR 0 9
10586: PUSH
10587: LD_VAR 0 1
10591: PPUSH
10592: CALL_OW 255
10596: ST_TO_ADDR
// tech_space := tech_spacanom ;
10597: LD_ADDR_VAR 0 12
10601: PUSH
10602: LD_INT 29
10604: ST_TO_ADDR
// tech_time := tech_taurad ;
10605: LD_ADDR_VAR 0 13
10609: PUSH
10610: LD_INT 28
10612: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10613: LD_ADDR_VAR 0 11
10617: PUSH
10618: LD_VAR 0 1
10622: PPUSH
10623: CALL_OW 310
10627: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10628: LD_VAR 0 11
10632: PPUSH
10633: CALL_OW 247
10637: PUSH
10638: LD_INT 2
10640: EQUAL
10641: IFFALSE 10645
// exit ;
10643: GO 11155
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10645: LD_ADDR_VAR 0 8
10649: PUSH
10650: LD_INT 81
10652: PUSH
10653: LD_VAR 0 9
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 3
10664: PUSH
10665: LD_INT 21
10667: PUSH
10668: LD_INT 3
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PPUSH
10683: CALL_OW 69
10687: ST_TO_ADDR
// if not tmp then
10688: LD_VAR 0 8
10692: NOT
10693: IFFALSE 10697
// exit ;
10695: GO 11155
// if in_unit then
10697: LD_VAR 0 11
10701: IFFALSE 10725
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10703: LD_ADDR_VAR 0 10
10707: PUSH
10708: LD_VAR 0 8
10712: PPUSH
10713: LD_VAR 0 11
10717: PPUSH
10718: CALL_OW 74
10722: ST_TO_ADDR
10723: GO 10745
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10725: LD_ADDR_VAR 0 10
10729: PUSH
10730: LD_VAR 0 8
10734: PPUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 74
10744: ST_TO_ADDR
// if not enemy then
10745: LD_VAR 0 10
10749: NOT
10750: IFFALSE 10754
// exit ;
10752: GO 11155
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10754: LD_VAR 0 11
10758: PUSH
10759: LD_VAR 0 11
10763: PPUSH
10764: LD_VAR 0 10
10768: PPUSH
10769: CALL_OW 296
10773: PUSH
10774: LD_INT 13
10776: GREATER
10777: AND
10778: PUSH
10779: LD_VAR 0 1
10783: PPUSH
10784: LD_VAR 0 10
10788: PPUSH
10789: CALL_OW 296
10793: PUSH
10794: LD_INT 12
10796: GREATER
10797: OR
10798: IFFALSE 10802
// exit ;
10800: GO 11155
// missile := [ 1 ] ;
10802: LD_ADDR_VAR 0 14
10806: PUSH
10807: LD_INT 1
10809: PUSH
10810: EMPTY
10811: LIST
10812: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10813: LD_VAR 0 9
10817: PPUSH
10818: LD_VAR 0 12
10822: PPUSH
10823: CALL_OW 325
10827: IFFALSE 10856
// missile := Insert ( missile , missile + 1 , 2 ) ;
10829: LD_ADDR_VAR 0 14
10833: PUSH
10834: LD_VAR 0 14
10838: PPUSH
10839: LD_VAR 0 14
10843: PUSH
10844: LD_INT 1
10846: PLUS
10847: PPUSH
10848: LD_INT 2
10850: PPUSH
10851: CALL_OW 2
10855: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10856: LD_VAR 0 9
10860: PPUSH
10861: LD_VAR 0 13
10865: PPUSH
10866: CALL_OW 325
10870: PUSH
10871: LD_VAR 0 10
10875: PPUSH
10876: CALL_OW 255
10880: PPUSH
10881: LD_VAR 0 13
10885: PPUSH
10886: CALL_OW 325
10890: NOT
10891: AND
10892: IFFALSE 10921
// missile := Insert ( missile , missile + 1 , 3 ) ;
10894: LD_ADDR_VAR 0 14
10898: PUSH
10899: LD_VAR 0 14
10903: PPUSH
10904: LD_VAR 0 14
10908: PUSH
10909: LD_INT 1
10911: PLUS
10912: PPUSH
10913: LD_INT 3
10915: PPUSH
10916: CALL_OW 2
10920: ST_TO_ADDR
// if missile < 2 then
10921: LD_VAR 0 14
10925: PUSH
10926: LD_INT 2
10928: LESS
10929: IFFALSE 10933
// exit ;
10931: GO 11155
// x := GetX ( enemy ) ;
10933: LD_ADDR_VAR 0 4
10937: PUSH
10938: LD_VAR 0 10
10942: PPUSH
10943: CALL_OW 250
10947: ST_TO_ADDR
// y := GetY ( enemy ) ;
10948: LD_ADDR_VAR 0 5
10952: PUSH
10953: LD_VAR 0 10
10957: PPUSH
10958: CALL_OW 251
10962: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10963: LD_ADDR_VAR 0 6
10967: PUSH
10968: LD_VAR 0 4
10972: PUSH
10973: LD_INT 1
10975: NEG
10976: PPUSH
10977: LD_INT 1
10979: PPUSH
10980: CALL_OW 12
10984: PLUS
10985: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10986: LD_ADDR_VAR 0 7
10990: PUSH
10991: LD_VAR 0 5
10995: PUSH
10996: LD_INT 1
10998: NEG
10999: PPUSH
11000: LD_INT 1
11002: PPUSH
11003: CALL_OW 12
11007: PLUS
11008: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11009: LD_VAR 0 6
11013: PPUSH
11014: LD_VAR 0 7
11018: PPUSH
11019: CALL_OW 488
11023: NOT
11024: IFFALSE 11046
// begin _x := x ;
11026: LD_ADDR_VAR 0 6
11030: PUSH
11031: LD_VAR 0 4
11035: ST_TO_ADDR
// _y := y ;
11036: LD_ADDR_VAR 0 7
11040: PUSH
11041: LD_VAR 0 5
11045: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11046: LD_ADDR_VAR 0 3
11050: PUSH
11051: LD_INT 1
11053: PPUSH
11054: LD_VAR 0 14
11058: PPUSH
11059: CALL_OW 12
11063: ST_TO_ADDR
// case i of 1 :
11064: LD_VAR 0 3
11068: PUSH
11069: LD_INT 1
11071: DOUBLE
11072: EQUAL
11073: IFTRUE 11077
11075: GO 11094
11077: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11078: LD_VAR 0 1
11082: PPUSH
11083: LD_VAR 0 10
11087: PPUSH
11088: CALL_OW 115
11092: GO 11155
11094: LD_INT 2
11096: DOUBLE
11097: EQUAL
11098: IFTRUE 11102
11100: GO 11124
11102: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11103: LD_VAR 0 1
11107: PPUSH
11108: LD_VAR 0 6
11112: PPUSH
11113: LD_VAR 0 7
11117: PPUSH
11118: CALL_OW 153
11122: GO 11155
11124: LD_INT 3
11126: DOUBLE
11127: EQUAL
11128: IFTRUE 11132
11130: GO 11154
11132: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11133: LD_VAR 0 1
11137: PPUSH
11138: LD_VAR 0 6
11142: PPUSH
11143: LD_VAR 0 7
11147: PPUSH
11148: CALL_OW 154
11152: GO 11155
11154: POP
// end ;
11155: LD_VAR 0 2
11159: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11160: LD_INT 0
11162: PPUSH
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
11167: PPUSH
// if not unit or not building then
11168: LD_VAR 0 1
11172: NOT
11173: PUSH
11174: LD_VAR 0 2
11178: NOT
11179: OR
11180: IFFALSE 11184
// exit ;
11182: GO 11339
// x := GetX ( building ) ;
11184: LD_ADDR_VAR 0 5
11188: PUSH
11189: LD_VAR 0 2
11193: PPUSH
11194: CALL_OW 250
11198: ST_TO_ADDR
// y := GetY ( building ) ;
11199: LD_ADDR_VAR 0 6
11203: PUSH
11204: LD_VAR 0 2
11208: PPUSH
11209: CALL_OW 251
11213: ST_TO_ADDR
// for i = 0 to 5 do
11214: LD_ADDR_VAR 0 4
11218: PUSH
11219: DOUBLE
11220: LD_INT 0
11222: DEC
11223: ST_TO_ADDR
11224: LD_INT 5
11226: PUSH
11227: FOR_TO
11228: IFFALSE 11337
// begin _x := ShiftX ( x , i , 3 ) ;
11230: LD_ADDR_VAR 0 7
11234: PUSH
11235: LD_VAR 0 5
11239: PPUSH
11240: LD_VAR 0 4
11244: PPUSH
11245: LD_INT 3
11247: PPUSH
11248: CALL_OW 272
11252: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11253: LD_ADDR_VAR 0 8
11257: PUSH
11258: LD_VAR 0 6
11262: PPUSH
11263: LD_VAR 0 4
11267: PPUSH
11268: LD_INT 3
11270: PPUSH
11271: CALL_OW 273
11275: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
11276: LD_VAR 0 7
11280: PPUSH
11281: LD_VAR 0 8
11285: PPUSH
11286: CALL_OW 428
11290: PUSH
11291: LD_INT 0
11293: EQUAL
11294: PUSH
11295: LD_VAR 0 7
11299: PPUSH
11300: LD_VAR 0 8
11304: PPUSH
11305: CALL_OW 488
11309: AND
11310: IFFALSE 11335
// begin ComMoveXY ( unit , _x , _y ) ;
11312: LD_VAR 0 1
11316: PPUSH
11317: LD_VAR 0 7
11321: PPUSH
11322: LD_VAR 0 8
11326: PPUSH
11327: CALL_OW 111
// exit ;
11331: POP
11332: POP
11333: GO 11339
// end ; end ;
11335: GO 11227
11337: POP
11338: POP
// end ;
11339: LD_VAR 0 3
11343: RET
// export function ScanBase ( side , base_area ) ; begin
11344: LD_INT 0
11346: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11347: LD_ADDR_VAR 0 3
11351: PUSH
11352: LD_VAR 0 2
11356: PPUSH
11357: LD_INT 81
11359: PUSH
11360: LD_VAR 0 1
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PPUSH
11369: CALL_OW 70
11373: ST_TO_ADDR
// end ;
11374: LD_VAR 0 3
11378: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
11379: LD_INT 0
11381: PPUSH
11382: PPUSH
11383: PPUSH
11384: PPUSH
11385: PPUSH
11386: PPUSH
11387: PPUSH
11388: PPUSH
11389: PPUSH
11390: PPUSH
11391: PPUSH
11392: PPUSH
11393: PPUSH
11394: PPUSH
11395: PPUSH
11396: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
11397: LD_ADDR_VAR 0 12
11401: PUSH
11402: LD_EXP 41
11406: PUSH
11407: LD_VAR 0 1
11411: ARRAY
11412: PPUSH
11413: LD_INT 25
11415: PUSH
11416: LD_INT 3
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PPUSH
11423: CALL_OW 72
11427: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
11428: LD_ADDR_VAR 0 8
11432: PUSH
11433: LD_EXP 41
11437: PUSH
11438: LD_VAR 0 1
11442: ARRAY
11443: PPUSH
11444: LD_INT 2
11446: PUSH
11447: LD_INT 25
11449: PUSH
11450: LD_INT 1
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 25
11459: PUSH
11460: LD_INT 5
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 25
11469: PUSH
11470: LD_INT 8
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_INT 25
11479: PUSH
11480: LD_INT 9
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: PPUSH
11494: CALL_OW 72
11498: ST_TO_ADDR
// if not defenders and not solds then
11499: LD_VAR 0 2
11503: NOT
11504: PUSH
11505: LD_VAR 0 8
11509: NOT
11510: AND
11511: IFFALSE 11515
// exit ;
11513: GO 12881
// depot_under_attack := false ;
11515: LD_ADDR_VAR 0 16
11519: PUSH
11520: LD_INT 0
11522: ST_TO_ADDR
// sold_defenders := [ ] ;
11523: LD_ADDR_VAR 0 17
11527: PUSH
11528: EMPTY
11529: ST_TO_ADDR
// if mechs then
11530: LD_VAR 0 12
11534: IFFALSE 11663
// for i in defenders do
11536: LD_ADDR_VAR 0 5
11540: PUSH
11541: LD_VAR 0 2
11545: PUSH
11546: FOR_IN
11547: IFFALSE 11661
// begin SetTag ( i , 20 ) ;
11549: LD_VAR 0 5
11553: PPUSH
11554: LD_INT 20
11556: PPUSH
11557: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
11561: LD_VAR 0 5
11565: PPUSH
11566: CALL_OW 263
11570: PUSH
11571: LD_INT 1
11573: EQUAL
11574: PUSH
11575: LD_VAR 0 5
11579: PPUSH
11580: CALL_OW 311
11584: NOT
11585: AND
11586: PUSH
11587: LD_VAR 0 12
11591: AND
11592: IFFALSE 11659
// begin un := mechs [ 1 ] ;
11594: LD_ADDR_VAR 0 10
11598: PUSH
11599: LD_VAR 0 12
11603: PUSH
11604: LD_INT 1
11606: ARRAY
11607: ST_TO_ADDR
// ComExitBuilding ( un ) ;
11608: LD_VAR 0 10
11612: PPUSH
11613: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
11617: LD_VAR 0 10
11621: PPUSH
11622: LD_VAR 0 5
11626: PPUSH
11627: CALL_OW 180
// SetTag ( un , 19 ) ;
11631: LD_VAR 0 10
11635: PPUSH
11636: LD_INT 19
11638: PPUSH
11639: CALL_OW 109
// mechs := mechs diff un ;
11643: LD_ADDR_VAR 0 12
11647: PUSH
11648: LD_VAR 0 12
11652: PUSH
11653: LD_VAR 0 10
11657: DIFF
11658: ST_TO_ADDR
// end ; end ;
11659: GO 11546
11661: POP
11662: POP
// if solds then
11663: LD_VAR 0 8
11667: IFFALSE 11726
// for i in solds do
11669: LD_ADDR_VAR 0 5
11673: PUSH
11674: LD_VAR 0 8
11678: PUSH
11679: FOR_IN
11680: IFFALSE 11724
// if not GetTag ( i ) then
11682: LD_VAR 0 5
11686: PPUSH
11687: CALL_OW 110
11691: NOT
11692: IFFALSE 11722
// begin defenders := defenders union i ;
11694: LD_ADDR_VAR 0 2
11698: PUSH
11699: LD_VAR 0 2
11703: PUSH
11704: LD_VAR 0 5
11708: UNION
11709: ST_TO_ADDR
// SetTag ( i , 18 ) ;
11710: LD_VAR 0 5
11714: PPUSH
11715: LD_INT 18
11717: PPUSH
11718: CALL_OW 109
// end ;
11722: GO 11679
11724: POP
11725: POP
// repeat wait ( 0 0$1 ) ;
11726: LD_INT 35
11728: PPUSH
11729: CALL_OW 67
// enemy := mc_scan [ base ] ;
11733: LD_ADDR_VAR 0 3
11737: PUSH
11738: LD_EXP 64
11742: PUSH
11743: LD_VAR 0 1
11747: ARRAY
11748: ST_TO_ADDR
// for i in defenders do
11749: LD_ADDR_VAR 0 5
11753: PUSH
11754: LD_VAR 0 2
11758: PUSH
11759: FOR_IN
11760: IFFALSE 12445
// begin e := NearestUnitToUnit ( enemy , i ) ;
11762: LD_ADDR_VAR 0 13
11766: PUSH
11767: LD_VAR 0 3
11771: PPUSH
11772: LD_VAR 0 5
11776: PPUSH
11777: CALL_OW 74
11781: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
11782: LD_ADDR_VAR 0 16
11786: PUSH
11787: LD_EXP 41
11791: PUSH
11792: LD_VAR 0 1
11796: ARRAY
11797: PPUSH
11798: LD_INT 2
11800: PUSH
11801: LD_INT 30
11803: PUSH
11804: LD_INT 0
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 30
11813: PUSH
11814: LD_INT 1
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: LIST
11825: PPUSH
11826: CALL_OW 72
11830: NOT
11831: PUSH
11832: LD_EXP 41
11836: PUSH
11837: LD_VAR 0 1
11841: ARRAY
11842: PPUSH
11843: LD_INT 2
11845: PUSH
11846: LD_INT 30
11848: PUSH
11849: LD_INT 0
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 30
11858: PUSH
11859: LD_INT 1
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: LIST
11870: PPUSH
11871: CALL_OW 72
11875: PPUSH
11876: CALL_OW 256
11880: PUSH
11881: LD_INT 600
11883: LESS
11884: OR
11885: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
11886: LD_VAR 0 5
11890: PPUSH
11891: CALL_OW 247
11895: PUSH
11896: LD_INT 2
11898: DOUBLE
11899: EQUAL
11900: IFTRUE 11904
11902: GO 12151
11904: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
11905: LD_VAR 0 5
11909: PPUSH
11910: CALL_OW 256
11914: PUSH
11915: LD_INT 650
11917: GREATER
11918: PUSH
11919: LD_VAR 0 5
11923: PPUSH
11924: LD_VAR 0 13
11928: PPUSH
11929: CALL_OW 296
11933: PUSH
11934: LD_INT 40
11936: LESS
11937: AND
11938: IFFALSE 11956
// ComAttackUnit ( i , e ) else
11940: LD_VAR 0 5
11944: PPUSH
11945: LD_VAR 0 13
11949: PPUSH
11950: CALL_OW 115
11954: GO 12034
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
11956: LD_VAR 0 5
11960: PPUSH
11961: LD_VAR 0 13
11965: PPUSH
11966: CALL_OW 296
11970: PUSH
11971: LD_INT 30
11973: GREATEREQUAL
11974: PUSH
11975: LD_VAR 0 5
11979: PPUSH
11980: CALL_OW 256
11984: PUSH
11985: LD_INT 650
11987: LESSEQUAL
11988: OR
11989: PUSH
11990: LD_VAR 0 5
11994: PPUSH
11995: LD_EXP 65
11999: PUSH
12000: LD_VAR 0 1
12004: ARRAY
12005: PPUSH
12006: CALL_OW 308
12010: NOT
12011: AND
12012: IFFALSE 12034
// ComMoveToArea ( i , mc_parking [ base ] ) ;
12014: LD_VAR 0 5
12018: PPUSH
12019: LD_EXP 65
12023: PUSH
12024: LD_VAR 0 1
12028: ARRAY
12029: PPUSH
12030: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
12034: LD_VAR 0 5
12038: PPUSH
12039: CALL_OW 256
12043: PUSH
12044: LD_INT 998
12046: LESS
12047: PUSH
12048: LD_VAR 0 5
12052: PPUSH
12053: CALL_OW 263
12057: PUSH
12058: LD_INT 1
12060: EQUAL
12061: AND
12062: PUSH
12063: LD_VAR 0 5
12067: PPUSH
12068: CALL_OW 311
12072: AND
12073: PUSH
12074: LD_VAR 0 5
12078: PPUSH
12079: LD_EXP 65
12083: PUSH
12084: LD_VAR 0 1
12088: ARRAY
12089: PPUSH
12090: CALL_OW 308
12094: AND
12095: IFFALSE 12149
// begin mech := IsDrivenBy ( i ) ;
12097: LD_ADDR_VAR 0 9
12101: PUSH
12102: LD_VAR 0 5
12106: PPUSH
12107: CALL_OW 311
12111: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
12112: LD_VAR 0 9
12116: PPUSH
12117: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
12121: LD_VAR 0 9
12125: PPUSH
12126: LD_VAR 0 5
12130: PPUSH
12131: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
12135: LD_VAR 0 9
12139: PPUSH
12140: LD_VAR 0 5
12144: PPUSH
12145: CALL_OW 180
// end ; end ; unit_human :
12149: GO 12416
12151: LD_INT 1
12153: DOUBLE
12154: EQUAL
12155: IFTRUE 12159
12157: GO 12415
12159: POP
// begin b := IsInUnit ( i ) ;
12160: LD_ADDR_VAR 0 18
12164: PUSH
12165: LD_VAR 0 5
12169: PPUSH
12170: CALL_OW 310
12174: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
12175: LD_ADDR_VAR 0 19
12179: PUSH
12180: LD_VAR 0 18
12184: NOT
12185: PUSH
12186: LD_VAR 0 18
12190: PPUSH
12191: CALL_OW 266
12195: PUSH
12196: LD_INT 32
12198: PUSH
12199: LD_INT 31
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: IN
12206: OR
12207: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
12208: LD_VAR 0 16
12212: PUSH
12213: LD_VAR 0 2
12217: PPUSH
12218: LD_INT 21
12220: PUSH
12221: LD_INT 2
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PPUSH
12228: CALL_OW 72
12232: PUSH
12233: LD_INT 1
12235: LESSEQUAL
12236: OR
12237: PUSH
12238: LD_VAR 0 19
12242: AND
12243: PUSH
12244: LD_VAR 0 5
12248: PUSH
12249: LD_VAR 0 17
12253: IN
12254: NOT
12255: AND
12256: IFFALSE 12349
// begin if b then
12258: LD_VAR 0 18
12262: IFFALSE 12311
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
12264: LD_VAR 0 18
12268: PPUSH
12269: LD_VAR 0 3
12273: PPUSH
12274: LD_VAR 0 18
12278: PPUSH
12279: CALL_OW 74
12283: PPUSH
12284: CALL_OW 296
12288: PUSH
12289: LD_INT 10
12291: LESS
12292: PUSH
12293: LD_VAR 0 18
12297: PPUSH
12298: CALL_OW 461
12302: PUSH
12303: LD_INT 7
12305: NONEQUAL
12306: AND
12307: IFFALSE 12311
// continue ;
12309: GO 11759
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
12311: LD_ADDR_VAR 0 17
12315: PUSH
12316: LD_VAR 0 17
12320: PPUSH
12321: LD_VAR 0 17
12325: PUSH
12326: LD_INT 1
12328: PLUS
12329: PPUSH
12330: LD_VAR 0 5
12334: PPUSH
12335: CALL_OW 1
12339: ST_TO_ADDR
// ComExitBuilding ( i ) ;
12340: LD_VAR 0 5
12344: PPUSH
12345: CALL_OW 122
// end ; if sold_defenders then
12349: LD_VAR 0 17
12353: IFFALSE 12413
// if i in sold_defenders then
12355: LD_VAR 0 5
12359: PUSH
12360: LD_VAR 0 17
12364: IN
12365: IFFALSE 12413
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
12367: LD_VAR 0 5
12371: PPUSH
12372: CALL_OW 314
12376: NOT
12377: PUSH
12378: LD_VAR 0 5
12382: PPUSH
12383: LD_VAR 0 13
12387: PPUSH
12388: CALL_OW 296
12392: PUSH
12393: LD_INT 30
12395: LESS
12396: AND
12397: IFFALSE 12413
// ComAttackUnit ( i , e ) ;
12399: LD_VAR 0 5
12403: PPUSH
12404: LD_VAR 0 13
12408: PPUSH
12409: CALL_OW 115
// end ; end ; end ;
12413: GO 12416
12415: POP
// if IsDead ( i ) then
12416: LD_VAR 0 5
12420: PPUSH
12421: CALL_OW 301
12425: IFFALSE 12443
// defenders := defenders diff i ;
12427: LD_ADDR_VAR 0 2
12431: PUSH
12432: LD_VAR 0 2
12436: PUSH
12437: LD_VAR 0 5
12441: DIFF
12442: ST_TO_ADDR
// end ;
12443: GO 11759
12445: POP
12446: POP
// until not enemy or not defenders ;
12447: LD_VAR 0 3
12451: NOT
12452: PUSH
12453: LD_VAR 0 2
12457: NOT
12458: OR
12459: IFFALSE 11726
// MC_Reset ( base , 18 ) ;
12461: LD_VAR 0 1
12465: PPUSH
12466: LD_INT 18
12468: PPUSH
12469: CALL 48877 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
12473: LD_ADDR_VAR 0 2
12477: PUSH
12478: LD_VAR 0 2
12482: PUSH
12483: LD_VAR 0 2
12487: PPUSH
12488: LD_INT 2
12490: PUSH
12491: LD_INT 25
12493: PUSH
12494: LD_INT 1
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 25
12503: PUSH
12504: LD_INT 5
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 25
12513: PUSH
12514: LD_INT 8
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 25
12523: PUSH
12524: LD_INT 9
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: PPUSH
12538: CALL_OW 72
12542: DIFF
12543: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
12544: LD_VAR 0 3
12548: NOT
12549: PUSH
12550: LD_VAR 0 2
12554: PPUSH
12555: LD_INT 21
12557: PUSH
12558: LD_INT 2
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PPUSH
12565: CALL_OW 72
12569: AND
12570: IFFALSE 12832
// begin tmp := FilterByTag ( defenders , 19 ) ;
12572: LD_ADDR_VAR 0 11
12576: PUSH
12577: LD_VAR 0 2
12581: PPUSH
12582: LD_INT 19
12584: PPUSH
12585: CALL 47169 0 2
12589: ST_TO_ADDR
// if tmp then
12590: LD_VAR 0 11
12594: IFFALSE 12664
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
12596: LD_ADDR_VAR 0 11
12600: PUSH
12601: LD_VAR 0 11
12605: PPUSH
12606: LD_INT 25
12608: PUSH
12609: LD_INT 3
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PPUSH
12616: CALL_OW 72
12620: ST_TO_ADDR
// if tmp then
12621: LD_VAR 0 11
12625: IFFALSE 12664
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
12627: LD_ADDR_EXP 53
12631: PUSH
12632: LD_EXP 53
12636: PPUSH
12637: LD_VAR 0 1
12641: PPUSH
12642: LD_EXP 53
12646: PUSH
12647: LD_VAR 0 1
12651: ARRAY
12652: PUSH
12653: LD_VAR 0 11
12657: UNION
12658: PPUSH
12659: CALL_OW 1
12663: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
12664: LD_VAR 0 1
12668: PPUSH
12669: LD_INT 19
12671: PPUSH
12672: CALL 48877 0 2
// repeat wait ( 0 0$1 ) ;
12676: LD_INT 35
12678: PPUSH
12679: CALL_OW 67
// for i in defenders do
12683: LD_ADDR_VAR 0 5
12687: PUSH
12688: LD_VAR 0 2
12692: PUSH
12693: FOR_IN
12694: IFFALSE 12783
// begin if not IsInArea ( i , mc_parking [ base ] ) then
12696: LD_VAR 0 5
12700: PPUSH
12701: LD_EXP 65
12705: PUSH
12706: LD_VAR 0 1
12710: ARRAY
12711: PPUSH
12712: CALL_OW 308
12716: NOT
12717: IFFALSE 12741
// ComMoveToArea ( i , mc_parking [ base ] ) else
12719: LD_VAR 0 5
12723: PPUSH
12724: LD_EXP 65
12728: PUSH
12729: LD_VAR 0 1
12733: ARRAY
12734: PPUSH
12735: CALL_OW 113
12739: GO 12781
// if GetControl ( i ) = control_manual then
12741: LD_VAR 0 5
12745: PPUSH
12746: CALL_OW 263
12750: PUSH
12751: LD_INT 1
12753: EQUAL
12754: IFFALSE 12781
// if IsDrivenBy ( i ) then
12756: LD_VAR 0 5
12760: PPUSH
12761: CALL_OW 311
12765: IFFALSE 12781
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
12767: LD_VAR 0 5
12771: PPUSH
12772: CALL_OW 311
12776: PPUSH
12777: CALL_OW 121
// end ;
12781: GO 12693
12783: POP
12784: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
12785: LD_VAR 0 2
12789: PPUSH
12790: LD_INT 95
12792: PUSH
12793: LD_EXP 65
12797: PUSH
12798: LD_VAR 0 1
12802: ARRAY
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PPUSH
12808: CALL_OW 72
12812: PUSH
12813: LD_VAR 0 2
12817: EQUAL
12818: PUSH
12819: LD_EXP 64
12823: PUSH
12824: LD_VAR 0 1
12828: ARRAY
12829: OR
12830: IFFALSE 12676
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
12832: LD_ADDR_EXP 63
12836: PUSH
12837: LD_EXP 63
12841: PPUSH
12842: LD_VAR 0 1
12846: PPUSH
12847: LD_EXP 63
12851: PUSH
12852: LD_VAR 0 1
12856: ARRAY
12857: PUSH
12858: LD_VAR 0 2
12862: UNION
12863: PPUSH
12864: CALL_OW 1
12868: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
12869: LD_VAR 0 1
12873: PPUSH
12874: LD_INT 20
12876: PPUSH
12877: CALL 48877 0 2
// end ;
12881: LD_VAR 0 4
12885: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12886: LD_INT 0
12888: PPUSH
12889: PPUSH
12890: PPUSH
12891: PPUSH
// result := false ;
12892: LD_ADDR_VAR 0 2
12896: PUSH
12897: LD_INT 0
12899: ST_TO_ADDR
// side := GetSide ( unit ) ;
12900: LD_ADDR_VAR 0 3
12904: PUSH
12905: LD_VAR 0 1
12909: PPUSH
12910: CALL_OW 255
12914: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12915: LD_ADDR_VAR 0 4
12919: PUSH
12920: LD_VAR 0 1
12924: PPUSH
12925: CALL_OW 248
12929: ST_TO_ADDR
// case nat of 1 :
12930: LD_VAR 0 4
12934: PUSH
12935: LD_INT 1
12937: DOUBLE
12938: EQUAL
12939: IFTRUE 12943
12941: GO 12954
12943: POP
// tech := tech_lassight ; 2 :
12944: LD_ADDR_VAR 0 5
12948: PUSH
12949: LD_INT 12
12951: ST_TO_ADDR
12952: GO 12993
12954: LD_INT 2
12956: DOUBLE
12957: EQUAL
12958: IFTRUE 12962
12960: GO 12973
12962: POP
// tech := tech_mortar ; 3 :
12963: LD_ADDR_VAR 0 5
12967: PUSH
12968: LD_INT 41
12970: ST_TO_ADDR
12971: GO 12993
12973: LD_INT 3
12975: DOUBLE
12976: EQUAL
12977: IFTRUE 12981
12979: GO 12992
12981: POP
// tech := tech_bazooka ; end ;
12982: LD_ADDR_VAR 0 5
12986: PUSH
12987: LD_INT 44
12989: ST_TO_ADDR
12990: GO 12993
12992: POP
// if Researched ( side , tech ) then
12993: LD_VAR 0 3
12997: PPUSH
12998: LD_VAR 0 5
13002: PPUSH
13003: CALL_OW 325
13007: IFFALSE 13034
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13009: LD_ADDR_VAR 0 2
13013: PUSH
13014: LD_INT 5
13016: PUSH
13017: LD_INT 8
13019: PUSH
13020: LD_INT 9
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: PUSH
13028: LD_VAR 0 4
13032: ARRAY
13033: ST_TO_ADDR
// end ;
13034: LD_VAR 0 2
13038: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13039: LD_INT 0
13041: PPUSH
13042: PPUSH
13043: PPUSH
// if not mines then
13044: LD_VAR 0 2
13048: NOT
13049: IFFALSE 13053
// exit ;
13051: GO 13197
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13053: LD_ADDR_VAR 0 5
13057: PUSH
13058: LD_INT 81
13060: PUSH
13061: LD_VAR 0 1
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 3
13072: PUSH
13073: LD_INT 21
13075: PUSH
13076: LD_INT 3
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PPUSH
13091: CALL_OW 69
13095: ST_TO_ADDR
// for i in mines do
13096: LD_ADDR_VAR 0 4
13100: PUSH
13101: LD_VAR 0 2
13105: PUSH
13106: FOR_IN
13107: IFFALSE 13195
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13109: LD_VAR 0 4
13113: PUSH
13114: LD_INT 1
13116: ARRAY
13117: PPUSH
13118: LD_VAR 0 4
13122: PUSH
13123: LD_INT 2
13125: ARRAY
13126: PPUSH
13127: CALL_OW 458
13131: NOT
13132: IFFALSE 13136
// continue ;
13134: GO 13106
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13136: LD_VAR 0 4
13140: PUSH
13141: LD_INT 1
13143: ARRAY
13144: PPUSH
13145: LD_VAR 0 4
13149: PUSH
13150: LD_INT 2
13152: ARRAY
13153: PPUSH
13154: CALL_OW 428
13158: PUSH
13159: LD_VAR 0 5
13163: IN
13164: IFFALSE 13193
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13166: LD_VAR 0 4
13170: PUSH
13171: LD_INT 1
13173: ARRAY
13174: PPUSH
13175: LD_VAR 0 4
13179: PUSH
13180: LD_INT 2
13182: ARRAY
13183: PPUSH
13184: LD_VAR 0 1
13188: PPUSH
13189: CALL_OW 456
// end ;
13193: GO 13106
13195: POP
13196: POP
// end ;
13197: LD_VAR 0 3
13201: RET
// export function Count ( array ) ; var i ; begin
13202: LD_INT 0
13204: PPUSH
13205: PPUSH
// result := 0 ;
13206: LD_ADDR_VAR 0 2
13210: PUSH
13211: LD_INT 0
13213: ST_TO_ADDR
// for i in array do
13214: LD_ADDR_VAR 0 3
13218: PUSH
13219: LD_VAR 0 1
13223: PUSH
13224: FOR_IN
13225: IFFALSE 13249
// if i then
13227: LD_VAR 0 3
13231: IFFALSE 13247
// result := result + 1 ;
13233: LD_ADDR_VAR 0 2
13237: PUSH
13238: LD_VAR 0 2
13242: PUSH
13243: LD_INT 1
13245: PLUS
13246: ST_TO_ADDR
13247: GO 13224
13249: POP
13250: POP
// end ;
13251: LD_VAR 0 2
13255: RET
// export function IsEmpty ( building ) ; begin
13256: LD_INT 0
13258: PPUSH
// if not building then
13259: LD_VAR 0 1
13263: NOT
13264: IFFALSE 13268
// exit ;
13266: GO 13311
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13268: LD_ADDR_VAR 0 2
13272: PUSH
13273: LD_VAR 0 1
13277: PUSH
13278: LD_INT 22
13280: PUSH
13281: LD_VAR 0 1
13285: PPUSH
13286: CALL_OW 255
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 58
13297: PUSH
13298: EMPTY
13299: LIST
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PPUSH
13305: CALL_OW 69
13309: IN
13310: ST_TO_ADDR
// end ;
13311: LD_VAR 0 2
13315: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13316: LD_INT 0
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
// tmp := [ ] ;
13322: LD_ADDR_VAR 0 3
13326: PUSH
13327: EMPTY
13328: ST_TO_ADDR
// list := [ ] ;
13329: LD_ADDR_VAR 0 5
13333: PUSH
13334: EMPTY
13335: ST_TO_ADDR
// for i = 16 to 25 do
13336: LD_ADDR_VAR 0 4
13340: PUSH
13341: DOUBLE
13342: LD_INT 16
13344: DEC
13345: ST_TO_ADDR
13346: LD_INT 25
13348: PUSH
13349: FOR_TO
13350: IFFALSE 13423
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13352: LD_ADDR_VAR 0 3
13356: PUSH
13357: LD_VAR 0 3
13361: PUSH
13362: LD_INT 22
13364: PUSH
13365: LD_VAR 0 1
13369: PPUSH
13370: CALL_OW 255
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 91
13381: PUSH
13382: LD_VAR 0 1
13386: PUSH
13387: LD_INT 6
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 30
13397: PUSH
13398: LD_VAR 0 4
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: LIST
13411: PUSH
13412: EMPTY
13413: LIST
13414: PPUSH
13415: CALL_OW 69
13419: ADD
13420: ST_TO_ADDR
13421: GO 13349
13423: POP
13424: POP
// for i = 1 to tmp do
13425: LD_ADDR_VAR 0 4
13429: PUSH
13430: DOUBLE
13431: LD_INT 1
13433: DEC
13434: ST_TO_ADDR
13435: LD_VAR 0 3
13439: PUSH
13440: FOR_TO
13441: IFFALSE 13529
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13443: LD_ADDR_VAR 0 5
13447: PUSH
13448: LD_VAR 0 5
13452: PUSH
13453: LD_VAR 0 3
13457: PUSH
13458: LD_VAR 0 4
13462: ARRAY
13463: PPUSH
13464: CALL_OW 266
13468: PUSH
13469: LD_VAR 0 3
13473: PUSH
13474: LD_VAR 0 4
13478: ARRAY
13479: PPUSH
13480: CALL_OW 250
13484: PUSH
13485: LD_VAR 0 3
13489: PUSH
13490: LD_VAR 0 4
13494: ARRAY
13495: PPUSH
13496: CALL_OW 251
13500: PUSH
13501: LD_VAR 0 3
13505: PUSH
13506: LD_VAR 0 4
13510: ARRAY
13511: PPUSH
13512: CALL_OW 254
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: PUSH
13523: EMPTY
13524: LIST
13525: ADD
13526: ST_TO_ADDR
13527: GO 13440
13529: POP
13530: POP
// result := list ;
13531: LD_ADDR_VAR 0 2
13535: PUSH
13536: LD_VAR 0 5
13540: ST_TO_ADDR
// end ;
13541: LD_VAR 0 2
13545: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13546: LD_INT 0
13548: PPUSH
13549: PPUSH
13550: PPUSH
13551: PPUSH
13552: PPUSH
13553: PPUSH
13554: PPUSH
// if not factory then
13555: LD_VAR 0 1
13559: NOT
13560: IFFALSE 13564
// exit ;
13562: GO 14089
// if control = control_apeman then
13564: LD_VAR 0 4
13568: PUSH
13569: LD_INT 5
13571: EQUAL
13572: IFFALSE 13681
// begin tmp := UnitsInside ( factory ) ;
13574: LD_ADDR_VAR 0 8
13578: PUSH
13579: LD_VAR 0 1
13583: PPUSH
13584: CALL_OW 313
13588: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13589: LD_VAR 0 8
13593: PPUSH
13594: LD_INT 25
13596: PUSH
13597: LD_INT 12
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PPUSH
13604: CALL_OW 72
13608: NOT
13609: IFFALSE 13619
// control := control_manual ;
13611: LD_ADDR_VAR 0 4
13615: PUSH
13616: LD_INT 1
13618: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13619: LD_ADDR_VAR 0 8
13623: PUSH
13624: LD_VAR 0 1
13628: PPUSH
13629: CALL 13316 0 1
13633: ST_TO_ADDR
// if tmp then
13634: LD_VAR 0 8
13638: IFFALSE 13681
// begin for i in tmp do
13640: LD_ADDR_VAR 0 7
13644: PUSH
13645: LD_VAR 0 8
13649: PUSH
13650: FOR_IN
13651: IFFALSE 13679
// if i [ 1 ] = b_ext_radar then
13653: LD_VAR 0 7
13657: PUSH
13658: LD_INT 1
13660: ARRAY
13661: PUSH
13662: LD_INT 20
13664: EQUAL
13665: IFFALSE 13677
// begin control := control_remote ;
13667: LD_ADDR_VAR 0 4
13671: PUSH
13672: LD_INT 2
13674: ST_TO_ADDR
// break ;
13675: GO 13679
// end ;
13677: GO 13650
13679: POP
13680: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13681: LD_VAR 0 1
13685: PPUSH
13686: LD_VAR 0 2
13690: PPUSH
13691: LD_VAR 0 3
13695: PPUSH
13696: LD_VAR 0 4
13700: PPUSH
13701: LD_VAR 0 5
13705: PPUSH
13706: CALL_OW 448
13710: IFFALSE 13745
// begin result := [ chassis , engine , control , weapon ] ;
13712: LD_ADDR_VAR 0 6
13716: PUSH
13717: LD_VAR 0 2
13721: PUSH
13722: LD_VAR 0 3
13726: PUSH
13727: LD_VAR 0 4
13731: PUSH
13732: LD_VAR 0 5
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: ST_TO_ADDR
// exit ;
13743: GO 14089
// end ; _chassis := AvailableChassisList ( factory ) ;
13745: LD_ADDR_VAR 0 9
13749: PUSH
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 475
13759: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13760: LD_ADDR_VAR 0 11
13764: PUSH
13765: LD_VAR 0 1
13769: PPUSH
13770: CALL_OW 476
13774: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13775: LD_ADDR_VAR 0 12
13779: PUSH
13780: LD_VAR 0 1
13784: PPUSH
13785: CALL_OW 477
13789: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13790: LD_ADDR_VAR 0 10
13794: PUSH
13795: LD_VAR 0 1
13799: PPUSH
13800: CALL_OW 478
13804: ST_TO_ADDR
// if not chassis in _chassis then
13805: LD_VAR 0 2
13809: PUSH
13810: LD_VAR 0 9
13814: IN
13815: NOT
13816: IFFALSE 13842
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13818: LD_ADDR_VAR 0 2
13822: PUSH
13823: LD_VAR 0 9
13827: PUSH
13828: LD_INT 1
13830: PPUSH
13831: LD_VAR 0 9
13835: PPUSH
13836: CALL_OW 12
13840: ARRAY
13841: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13842: LD_VAR 0 2
13846: PPUSH
13847: LD_VAR 0 3
13851: PPUSH
13852: CALL 14094 0 2
13856: NOT
13857: IFFALSE 13916
// repeat engine := _engine [ 1 ] ;
13859: LD_ADDR_VAR 0 3
13863: PUSH
13864: LD_VAR 0 11
13868: PUSH
13869: LD_INT 1
13871: ARRAY
13872: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13873: LD_ADDR_VAR 0 11
13877: PUSH
13878: LD_VAR 0 11
13882: PPUSH
13883: LD_INT 1
13885: PPUSH
13886: CALL_OW 3
13890: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13891: LD_VAR 0 2
13895: PPUSH
13896: LD_VAR 0 3
13900: PPUSH
13901: CALL 14094 0 2
13905: PUSH
13906: LD_VAR 0 11
13910: PUSH
13911: EMPTY
13912: EQUAL
13913: OR
13914: IFFALSE 13859
// if not control in _control then
13916: LD_VAR 0 4
13920: PUSH
13921: LD_VAR 0 12
13925: IN
13926: NOT
13927: IFFALSE 13953
// control := _control [ rand ( 1 , _control ) ] ;
13929: LD_ADDR_VAR 0 4
13933: PUSH
13934: LD_VAR 0 12
13938: PUSH
13939: LD_INT 1
13941: PPUSH
13942: LD_VAR 0 12
13946: PPUSH
13947: CALL_OW 12
13951: ARRAY
13952: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13953: LD_VAR 0 2
13957: PPUSH
13958: LD_VAR 0 5
13962: PPUSH
13963: CALL 14314 0 2
13967: NOT
13968: IFFALSE 14027
// repeat weapon := _weapon [ 1 ] ;
13970: LD_ADDR_VAR 0 5
13974: PUSH
13975: LD_VAR 0 10
13979: PUSH
13980: LD_INT 1
13982: ARRAY
13983: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13984: LD_ADDR_VAR 0 10
13988: PUSH
13989: LD_VAR 0 10
13993: PPUSH
13994: LD_INT 1
13996: PPUSH
13997: CALL_OW 3
14001: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14002: LD_VAR 0 2
14006: PPUSH
14007: LD_VAR 0 5
14011: PPUSH
14012: CALL 14314 0 2
14016: PUSH
14017: LD_VAR 0 10
14021: PUSH
14022: EMPTY
14023: EQUAL
14024: OR
14025: IFFALSE 13970
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14027: LD_VAR 0 1
14031: PPUSH
14032: LD_VAR 0 2
14036: PPUSH
14037: LD_VAR 0 3
14041: PPUSH
14042: LD_VAR 0 4
14046: PPUSH
14047: LD_VAR 0 5
14051: PPUSH
14052: CALL_OW 448
14056: IFFALSE 14089
// result := [ chassis , engine , control , weapon ] ;
14058: LD_ADDR_VAR 0 6
14062: PUSH
14063: LD_VAR 0 2
14067: PUSH
14068: LD_VAR 0 3
14072: PUSH
14073: LD_VAR 0 4
14077: PUSH
14078: LD_VAR 0 5
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: ST_TO_ADDR
// end ;
14089: LD_VAR 0 6
14093: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14094: LD_INT 0
14096: PPUSH
// if not chassis or not engine then
14097: LD_VAR 0 1
14101: NOT
14102: PUSH
14103: LD_VAR 0 2
14107: NOT
14108: OR
14109: IFFALSE 14113
// exit ;
14111: GO 14309
// case engine of engine_solar :
14113: LD_VAR 0 2
14117: PUSH
14118: LD_INT 2
14120: DOUBLE
14121: EQUAL
14122: IFTRUE 14126
14124: GO 14164
14126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14127: LD_ADDR_VAR 0 3
14131: PUSH
14132: LD_INT 11
14134: PUSH
14135: LD_INT 12
14137: PUSH
14138: LD_INT 13
14140: PUSH
14141: LD_INT 14
14143: PUSH
14144: LD_INT 1
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: ST_TO_ADDR
14162: GO 14293
14164: LD_INT 1
14166: DOUBLE
14167: EQUAL
14168: IFTRUE 14172
14170: GO 14234
14172: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14173: LD_ADDR_VAR 0 3
14177: PUSH
14178: LD_INT 11
14180: PUSH
14181: LD_INT 12
14183: PUSH
14184: LD_INT 13
14186: PUSH
14187: LD_INT 14
14189: PUSH
14190: LD_INT 1
14192: PUSH
14193: LD_INT 2
14195: PUSH
14196: LD_INT 3
14198: PUSH
14199: LD_INT 4
14201: PUSH
14202: LD_INT 5
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 23
14210: PUSH
14211: LD_INT 22
14213: PUSH
14214: LD_INT 24
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: ST_TO_ADDR
14232: GO 14293
14234: LD_INT 3
14236: DOUBLE
14237: EQUAL
14238: IFTRUE 14242
14240: GO 14292
14242: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14243: LD_ADDR_VAR 0 3
14247: PUSH
14248: LD_INT 13
14250: PUSH
14251: LD_INT 14
14253: PUSH
14254: LD_INT 2
14256: PUSH
14257: LD_INT 3
14259: PUSH
14260: LD_INT 4
14262: PUSH
14263: LD_INT 5
14265: PUSH
14266: LD_INT 21
14268: PUSH
14269: LD_INT 22
14271: PUSH
14272: LD_INT 23
14274: PUSH
14275: LD_INT 24
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: ST_TO_ADDR
14290: GO 14293
14292: POP
// result := ( chassis in result ) ;
14293: LD_ADDR_VAR 0 3
14297: PUSH
14298: LD_VAR 0 1
14302: PUSH
14303: LD_VAR 0 3
14307: IN
14308: ST_TO_ADDR
// end ;
14309: LD_VAR 0 3
14313: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14314: LD_INT 0
14316: PPUSH
// if not chassis or not weapon then
14317: LD_VAR 0 1
14321: NOT
14322: PUSH
14323: LD_VAR 0 2
14327: NOT
14328: OR
14329: IFFALSE 14333
// exit ;
14331: GO 15359
// case weapon of us_machine_gun :
14333: LD_VAR 0 2
14337: PUSH
14338: LD_INT 2
14340: DOUBLE
14341: EQUAL
14342: IFTRUE 14346
14344: GO 14376
14346: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14347: LD_ADDR_VAR 0 3
14351: PUSH
14352: LD_INT 1
14354: PUSH
14355: LD_INT 2
14357: PUSH
14358: LD_INT 3
14360: PUSH
14361: LD_INT 4
14363: PUSH
14364: LD_INT 5
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: ST_TO_ADDR
14374: GO 15343
14376: LD_INT 3
14378: DOUBLE
14379: EQUAL
14380: IFTRUE 14384
14382: GO 14414
14384: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14385: LD_ADDR_VAR 0 3
14389: PUSH
14390: LD_INT 1
14392: PUSH
14393: LD_INT 2
14395: PUSH
14396: LD_INT 3
14398: PUSH
14399: LD_INT 4
14401: PUSH
14402: LD_INT 5
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: ST_TO_ADDR
14412: GO 15343
14414: LD_INT 11
14416: DOUBLE
14417: EQUAL
14418: IFTRUE 14422
14420: GO 14452
14422: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14423: LD_ADDR_VAR 0 3
14427: PUSH
14428: LD_INT 1
14430: PUSH
14431: LD_INT 2
14433: PUSH
14434: LD_INT 3
14436: PUSH
14437: LD_INT 4
14439: PUSH
14440: LD_INT 5
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: ST_TO_ADDR
14450: GO 15343
14452: LD_INT 4
14454: DOUBLE
14455: EQUAL
14456: IFTRUE 14460
14458: GO 14486
14460: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14461: LD_ADDR_VAR 0 3
14465: PUSH
14466: LD_INT 2
14468: PUSH
14469: LD_INT 3
14471: PUSH
14472: LD_INT 4
14474: PUSH
14475: LD_INT 5
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: ST_TO_ADDR
14484: GO 15343
14486: LD_INT 5
14488: DOUBLE
14489: EQUAL
14490: IFTRUE 14494
14492: GO 14520
14494: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14495: LD_ADDR_VAR 0 3
14499: PUSH
14500: LD_INT 2
14502: PUSH
14503: LD_INT 3
14505: PUSH
14506: LD_INT 4
14508: PUSH
14509: LD_INT 5
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: ST_TO_ADDR
14518: GO 15343
14520: LD_INT 9
14522: DOUBLE
14523: EQUAL
14524: IFTRUE 14528
14526: GO 14554
14528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14529: LD_ADDR_VAR 0 3
14533: PUSH
14534: LD_INT 2
14536: PUSH
14537: LD_INT 3
14539: PUSH
14540: LD_INT 4
14542: PUSH
14543: LD_INT 5
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: ST_TO_ADDR
14552: GO 15343
14554: LD_INT 7
14556: DOUBLE
14557: EQUAL
14558: IFTRUE 14562
14560: GO 14588
14562: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14563: LD_ADDR_VAR 0 3
14567: PUSH
14568: LD_INT 2
14570: PUSH
14571: LD_INT 3
14573: PUSH
14574: LD_INT 4
14576: PUSH
14577: LD_INT 5
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: ST_TO_ADDR
14586: GO 15343
14588: LD_INT 12
14590: DOUBLE
14591: EQUAL
14592: IFTRUE 14596
14594: GO 14622
14596: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14597: LD_ADDR_VAR 0 3
14601: PUSH
14602: LD_INT 2
14604: PUSH
14605: LD_INT 3
14607: PUSH
14608: LD_INT 4
14610: PUSH
14611: LD_INT 5
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: ST_TO_ADDR
14620: GO 15343
14622: LD_INT 13
14624: DOUBLE
14625: EQUAL
14626: IFTRUE 14630
14628: GO 14656
14630: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14631: LD_ADDR_VAR 0 3
14635: PUSH
14636: LD_INT 2
14638: PUSH
14639: LD_INT 3
14641: PUSH
14642: LD_INT 4
14644: PUSH
14645: LD_INT 5
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: ST_TO_ADDR
14654: GO 15343
14656: LD_INT 14
14658: DOUBLE
14659: EQUAL
14660: IFTRUE 14664
14662: GO 14682
14664: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14665: LD_ADDR_VAR 0 3
14669: PUSH
14670: LD_INT 4
14672: PUSH
14673: LD_INT 5
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: ST_TO_ADDR
14680: GO 15343
14682: LD_INT 6
14684: DOUBLE
14685: EQUAL
14686: IFTRUE 14690
14688: GO 14708
14690: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14691: LD_ADDR_VAR 0 3
14695: PUSH
14696: LD_INT 4
14698: PUSH
14699: LD_INT 5
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: ST_TO_ADDR
14706: GO 15343
14708: LD_INT 10
14710: DOUBLE
14711: EQUAL
14712: IFTRUE 14716
14714: GO 14734
14716: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14717: LD_ADDR_VAR 0 3
14721: PUSH
14722: LD_INT 4
14724: PUSH
14725: LD_INT 5
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: ST_TO_ADDR
14732: GO 15343
14734: LD_INT 22
14736: DOUBLE
14737: EQUAL
14738: IFTRUE 14742
14740: GO 14768
14742: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14743: LD_ADDR_VAR 0 3
14747: PUSH
14748: LD_INT 11
14750: PUSH
14751: LD_INT 12
14753: PUSH
14754: LD_INT 13
14756: PUSH
14757: LD_INT 14
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: ST_TO_ADDR
14766: GO 15343
14768: LD_INT 23
14770: DOUBLE
14771: EQUAL
14772: IFTRUE 14776
14774: GO 14802
14776: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14777: LD_ADDR_VAR 0 3
14781: PUSH
14782: LD_INT 11
14784: PUSH
14785: LD_INT 12
14787: PUSH
14788: LD_INT 13
14790: PUSH
14791: LD_INT 14
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: ST_TO_ADDR
14800: GO 15343
14802: LD_INT 24
14804: DOUBLE
14805: EQUAL
14806: IFTRUE 14810
14808: GO 14836
14810: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14811: LD_ADDR_VAR 0 3
14815: PUSH
14816: LD_INT 11
14818: PUSH
14819: LD_INT 12
14821: PUSH
14822: LD_INT 13
14824: PUSH
14825: LD_INT 14
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: ST_TO_ADDR
14834: GO 15343
14836: LD_INT 30
14838: DOUBLE
14839: EQUAL
14840: IFTRUE 14844
14842: GO 14870
14844: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14845: LD_ADDR_VAR 0 3
14849: PUSH
14850: LD_INT 11
14852: PUSH
14853: LD_INT 12
14855: PUSH
14856: LD_INT 13
14858: PUSH
14859: LD_INT 14
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: ST_TO_ADDR
14868: GO 15343
14870: LD_INT 25
14872: DOUBLE
14873: EQUAL
14874: IFTRUE 14878
14876: GO 14896
14878: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14879: LD_ADDR_VAR 0 3
14883: PUSH
14884: LD_INT 13
14886: PUSH
14887: LD_INT 14
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: ST_TO_ADDR
14894: GO 15343
14896: LD_INT 27
14898: DOUBLE
14899: EQUAL
14900: IFTRUE 14904
14902: GO 14922
14904: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14905: LD_ADDR_VAR 0 3
14909: PUSH
14910: LD_INT 13
14912: PUSH
14913: LD_INT 14
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: ST_TO_ADDR
14920: GO 15343
14922: LD_INT 28
14924: DOUBLE
14925: EQUAL
14926: IFTRUE 14930
14928: GO 14948
14930: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14931: LD_ADDR_VAR 0 3
14935: PUSH
14936: LD_INT 13
14938: PUSH
14939: LD_INT 14
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: ST_TO_ADDR
14946: GO 15343
14948: LD_INT 29
14950: DOUBLE
14951: EQUAL
14952: IFTRUE 14956
14954: GO 14974
14956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14957: LD_ADDR_VAR 0 3
14961: PUSH
14962: LD_INT 13
14964: PUSH
14965: LD_INT 14
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: ST_TO_ADDR
14972: GO 15343
14974: LD_INT 31
14976: DOUBLE
14977: EQUAL
14978: IFTRUE 14982
14980: GO 15000
14982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14983: LD_ADDR_VAR 0 3
14987: PUSH
14988: LD_INT 13
14990: PUSH
14991: LD_INT 14
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: ST_TO_ADDR
14998: GO 15343
15000: LD_INT 26
15002: DOUBLE
15003: EQUAL
15004: IFTRUE 15008
15006: GO 15026
15008: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15009: LD_ADDR_VAR 0 3
15013: PUSH
15014: LD_INT 13
15016: PUSH
15017: LD_INT 14
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: ST_TO_ADDR
15024: GO 15343
15026: LD_INT 42
15028: DOUBLE
15029: EQUAL
15030: IFTRUE 15034
15032: GO 15060
15034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15035: LD_ADDR_VAR 0 3
15039: PUSH
15040: LD_INT 21
15042: PUSH
15043: LD_INT 22
15045: PUSH
15046: LD_INT 23
15048: PUSH
15049: LD_INT 24
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: ST_TO_ADDR
15058: GO 15343
15060: LD_INT 43
15062: DOUBLE
15063: EQUAL
15064: IFTRUE 15068
15066: GO 15094
15068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15069: LD_ADDR_VAR 0 3
15073: PUSH
15074: LD_INT 21
15076: PUSH
15077: LD_INT 22
15079: PUSH
15080: LD_INT 23
15082: PUSH
15083: LD_INT 24
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: ST_TO_ADDR
15092: GO 15343
15094: LD_INT 44
15096: DOUBLE
15097: EQUAL
15098: IFTRUE 15102
15100: GO 15128
15102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15103: LD_ADDR_VAR 0 3
15107: PUSH
15108: LD_INT 21
15110: PUSH
15111: LD_INT 22
15113: PUSH
15114: LD_INT 23
15116: PUSH
15117: LD_INT 24
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: ST_TO_ADDR
15126: GO 15343
15128: LD_INT 45
15130: DOUBLE
15131: EQUAL
15132: IFTRUE 15136
15134: GO 15162
15136: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15137: LD_ADDR_VAR 0 3
15141: PUSH
15142: LD_INT 21
15144: PUSH
15145: LD_INT 22
15147: PUSH
15148: LD_INT 23
15150: PUSH
15151: LD_INT 24
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: ST_TO_ADDR
15160: GO 15343
15162: LD_INT 49
15164: DOUBLE
15165: EQUAL
15166: IFTRUE 15170
15168: GO 15196
15170: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15171: LD_ADDR_VAR 0 3
15175: PUSH
15176: LD_INT 21
15178: PUSH
15179: LD_INT 22
15181: PUSH
15182: LD_INT 23
15184: PUSH
15185: LD_INT 24
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: ST_TO_ADDR
15194: GO 15343
15196: LD_INT 51
15198: DOUBLE
15199: EQUAL
15200: IFTRUE 15204
15202: GO 15230
15204: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15205: LD_ADDR_VAR 0 3
15209: PUSH
15210: LD_INT 21
15212: PUSH
15213: LD_INT 22
15215: PUSH
15216: LD_INT 23
15218: PUSH
15219: LD_INT 24
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: ST_TO_ADDR
15228: GO 15343
15230: LD_INT 52
15232: DOUBLE
15233: EQUAL
15234: IFTRUE 15238
15236: GO 15264
15238: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15239: LD_ADDR_VAR 0 3
15243: PUSH
15244: LD_INT 21
15246: PUSH
15247: LD_INT 22
15249: PUSH
15250: LD_INT 23
15252: PUSH
15253: LD_INT 24
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: ST_TO_ADDR
15262: GO 15343
15264: LD_INT 53
15266: DOUBLE
15267: EQUAL
15268: IFTRUE 15272
15270: GO 15290
15272: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15273: LD_ADDR_VAR 0 3
15277: PUSH
15278: LD_INT 23
15280: PUSH
15281: LD_INT 24
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: ST_TO_ADDR
15288: GO 15343
15290: LD_INT 46
15292: DOUBLE
15293: EQUAL
15294: IFTRUE 15298
15296: GO 15316
15298: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15299: LD_ADDR_VAR 0 3
15303: PUSH
15304: LD_INT 23
15306: PUSH
15307: LD_INT 24
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: ST_TO_ADDR
15314: GO 15343
15316: LD_INT 47
15318: DOUBLE
15319: EQUAL
15320: IFTRUE 15324
15322: GO 15342
15324: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15325: LD_ADDR_VAR 0 3
15329: PUSH
15330: LD_INT 23
15332: PUSH
15333: LD_INT 24
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: ST_TO_ADDR
15340: GO 15343
15342: POP
// result := ( chassis in result ) ;
15343: LD_ADDR_VAR 0 3
15347: PUSH
15348: LD_VAR 0 1
15352: PUSH
15353: LD_VAR 0 3
15357: IN
15358: ST_TO_ADDR
// end ;
15359: LD_VAR 0 3
15363: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15364: LD_INT 0
15366: PPUSH
15367: PPUSH
15368: PPUSH
15369: PPUSH
15370: PPUSH
15371: PPUSH
15372: PPUSH
// result := array ;
15373: LD_ADDR_VAR 0 5
15377: PUSH
15378: LD_VAR 0 1
15382: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15383: LD_VAR 0 1
15387: NOT
15388: PUSH
15389: LD_VAR 0 2
15393: NOT
15394: OR
15395: PUSH
15396: LD_VAR 0 3
15400: NOT
15401: OR
15402: PUSH
15403: LD_VAR 0 2
15407: PUSH
15408: LD_VAR 0 1
15412: GREATER
15413: OR
15414: PUSH
15415: LD_VAR 0 3
15419: PUSH
15420: LD_VAR 0 1
15424: GREATER
15425: OR
15426: IFFALSE 15430
// exit ;
15428: GO 15726
// if direction then
15430: LD_VAR 0 4
15434: IFFALSE 15498
// begin d := 1 ;
15436: LD_ADDR_VAR 0 9
15440: PUSH
15441: LD_INT 1
15443: ST_TO_ADDR
// if i_from > i_to then
15444: LD_VAR 0 2
15448: PUSH
15449: LD_VAR 0 3
15453: GREATER
15454: IFFALSE 15480
// length := ( array - i_from ) + i_to else
15456: LD_ADDR_VAR 0 11
15460: PUSH
15461: LD_VAR 0 1
15465: PUSH
15466: LD_VAR 0 2
15470: MINUS
15471: PUSH
15472: LD_VAR 0 3
15476: PLUS
15477: ST_TO_ADDR
15478: GO 15496
// length := i_to - i_from ;
15480: LD_ADDR_VAR 0 11
15484: PUSH
15485: LD_VAR 0 3
15489: PUSH
15490: LD_VAR 0 2
15494: MINUS
15495: ST_TO_ADDR
// end else
15496: GO 15559
// begin d := - 1 ;
15498: LD_ADDR_VAR 0 9
15502: PUSH
15503: LD_INT 1
15505: NEG
15506: ST_TO_ADDR
// if i_from > i_to then
15507: LD_VAR 0 2
15511: PUSH
15512: LD_VAR 0 3
15516: GREATER
15517: IFFALSE 15537
// length := i_from - i_to else
15519: LD_ADDR_VAR 0 11
15523: PUSH
15524: LD_VAR 0 2
15528: PUSH
15529: LD_VAR 0 3
15533: MINUS
15534: ST_TO_ADDR
15535: GO 15559
// length := ( array - i_to ) + i_from ;
15537: LD_ADDR_VAR 0 11
15541: PUSH
15542: LD_VAR 0 1
15546: PUSH
15547: LD_VAR 0 3
15551: MINUS
15552: PUSH
15553: LD_VAR 0 2
15557: PLUS
15558: ST_TO_ADDR
// end ; if not length then
15559: LD_VAR 0 11
15563: NOT
15564: IFFALSE 15568
// exit ;
15566: GO 15726
// tmp := array ;
15568: LD_ADDR_VAR 0 10
15572: PUSH
15573: LD_VAR 0 1
15577: ST_TO_ADDR
// for i = 1 to length do
15578: LD_ADDR_VAR 0 6
15582: PUSH
15583: DOUBLE
15584: LD_INT 1
15586: DEC
15587: ST_TO_ADDR
15588: LD_VAR 0 11
15592: PUSH
15593: FOR_TO
15594: IFFALSE 15714
// begin for j = 1 to array do
15596: LD_ADDR_VAR 0 7
15600: PUSH
15601: DOUBLE
15602: LD_INT 1
15604: DEC
15605: ST_TO_ADDR
15606: LD_VAR 0 1
15610: PUSH
15611: FOR_TO
15612: IFFALSE 15700
// begin k := j + d ;
15614: LD_ADDR_VAR 0 8
15618: PUSH
15619: LD_VAR 0 7
15623: PUSH
15624: LD_VAR 0 9
15628: PLUS
15629: ST_TO_ADDR
// if k > array then
15630: LD_VAR 0 8
15634: PUSH
15635: LD_VAR 0 1
15639: GREATER
15640: IFFALSE 15650
// k := 1 ;
15642: LD_ADDR_VAR 0 8
15646: PUSH
15647: LD_INT 1
15649: ST_TO_ADDR
// if not k then
15650: LD_VAR 0 8
15654: NOT
15655: IFFALSE 15667
// k := array ;
15657: LD_ADDR_VAR 0 8
15661: PUSH
15662: LD_VAR 0 1
15666: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15667: LD_ADDR_VAR 0 10
15671: PUSH
15672: LD_VAR 0 10
15676: PPUSH
15677: LD_VAR 0 8
15681: PPUSH
15682: LD_VAR 0 1
15686: PUSH
15687: LD_VAR 0 7
15691: ARRAY
15692: PPUSH
15693: CALL_OW 1
15697: ST_TO_ADDR
// end ;
15698: GO 15611
15700: POP
15701: POP
// array := tmp ;
15702: LD_ADDR_VAR 0 1
15706: PUSH
15707: LD_VAR 0 10
15711: ST_TO_ADDR
// end ;
15712: GO 15593
15714: POP
15715: POP
// result := array ;
15716: LD_ADDR_VAR 0 5
15720: PUSH
15721: LD_VAR 0 1
15725: ST_TO_ADDR
// end ;
15726: LD_VAR 0 5
15730: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15731: LD_INT 0
15733: PPUSH
15734: PPUSH
// result := 0 ;
15735: LD_ADDR_VAR 0 3
15739: PUSH
15740: LD_INT 0
15742: ST_TO_ADDR
// if not array or not value in array then
15743: LD_VAR 0 1
15747: NOT
15748: PUSH
15749: LD_VAR 0 2
15753: PUSH
15754: LD_VAR 0 1
15758: IN
15759: NOT
15760: OR
15761: IFFALSE 15765
// exit ;
15763: GO 15819
// for i = 1 to array do
15765: LD_ADDR_VAR 0 4
15769: PUSH
15770: DOUBLE
15771: LD_INT 1
15773: DEC
15774: ST_TO_ADDR
15775: LD_VAR 0 1
15779: PUSH
15780: FOR_TO
15781: IFFALSE 15817
// if value = array [ i ] then
15783: LD_VAR 0 2
15787: PUSH
15788: LD_VAR 0 1
15792: PUSH
15793: LD_VAR 0 4
15797: ARRAY
15798: EQUAL
15799: IFFALSE 15815
// begin result := i ;
15801: LD_ADDR_VAR 0 3
15805: PUSH
15806: LD_VAR 0 4
15810: ST_TO_ADDR
// exit ;
15811: POP
15812: POP
15813: GO 15819
// end ;
15815: GO 15780
15817: POP
15818: POP
// end ;
15819: LD_VAR 0 3
15823: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15824: LD_INT 0
15826: PPUSH
// vc_chassis := chassis ;
15827: LD_ADDR_OWVAR 37
15831: PUSH
15832: LD_VAR 0 1
15836: ST_TO_ADDR
// vc_engine := engine ;
15837: LD_ADDR_OWVAR 39
15841: PUSH
15842: LD_VAR 0 2
15846: ST_TO_ADDR
// vc_control := control ;
15847: LD_ADDR_OWVAR 38
15851: PUSH
15852: LD_VAR 0 3
15856: ST_TO_ADDR
// vc_weapon := weapon ;
15857: LD_ADDR_OWVAR 40
15861: PUSH
15862: LD_VAR 0 4
15866: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15867: LD_ADDR_OWVAR 41
15871: PUSH
15872: LD_VAR 0 5
15876: ST_TO_ADDR
// end ;
15877: LD_VAR 0 6
15881: RET
// export function WantPlant ( unit ) ; var task ; begin
15882: LD_INT 0
15884: PPUSH
15885: PPUSH
// result := false ;
15886: LD_ADDR_VAR 0 2
15890: PUSH
15891: LD_INT 0
15893: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: LD_VAR 0 1
15903: PPUSH
15904: CALL_OW 437
15908: ST_TO_ADDR
// if task then
15909: LD_VAR 0 3
15913: IFFALSE 15941
// if task [ 1 ] [ 1 ] = p then
15915: LD_VAR 0 3
15919: PUSH
15920: LD_INT 1
15922: ARRAY
15923: PUSH
15924: LD_INT 1
15926: ARRAY
15927: PUSH
15928: LD_STRING p
15930: EQUAL
15931: IFFALSE 15941
// result := true ;
15933: LD_ADDR_VAR 0 2
15937: PUSH
15938: LD_INT 1
15940: ST_TO_ADDR
// end ;
15941: LD_VAR 0 2
15945: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15946: LD_INT 0
15948: PPUSH
15949: PPUSH
15950: PPUSH
15951: PPUSH
// if pos < 1 then
15952: LD_VAR 0 2
15956: PUSH
15957: LD_INT 1
15959: LESS
15960: IFFALSE 15964
// exit ;
15962: GO 16267
// if pos = 1 then
15964: LD_VAR 0 2
15968: PUSH
15969: LD_INT 1
15971: EQUAL
15972: IFFALSE 16005
// result := Replace ( arr , pos [ 1 ] , value ) else
15974: LD_ADDR_VAR 0 4
15978: PUSH
15979: LD_VAR 0 1
15983: PPUSH
15984: LD_VAR 0 2
15988: PUSH
15989: LD_INT 1
15991: ARRAY
15992: PPUSH
15993: LD_VAR 0 3
15997: PPUSH
15998: CALL_OW 1
16002: ST_TO_ADDR
16003: GO 16267
// begin tmp := arr ;
16005: LD_ADDR_VAR 0 6
16009: PUSH
16010: LD_VAR 0 1
16014: ST_TO_ADDR
// s_arr := [ tmp ] ;
16015: LD_ADDR_VAR 0 7
16019: PUSH
16020: LD_VAR 0 6
16024: PUSH
16025: EMPTY
16026: LIST
16027: ST_TO_ADDR
// for i = 1 to pos - 1 do
16028: LD_ADDR_VAR 0 5
16032: PUSH
16033: DOUBLE
16034: LD_INT 1
16036: DEC
16037: ST_TO_ADDR
16038: LD_VAR 0 2
16042: PUSH
16043: LD_INT 1
16045: MINUS
16046: PUSH
16047: FOR_TO
16048: IFFALSE 16093
// begin tmp := tmp [ pos [ i ] ] ;
16050: LD_ADDR_VAR 0 6
16054: PUSH
16055: LD_VAR 0 6
16059: PUSH
16060: LD_VAR 0 2
16064: PUSH
16065: LD_VAR 0 5
16069: ARRAY
16070: ARRAY
16071: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16072: LD_ADDR_VAR 0 7
16076: PUSH
16077: LD_VAR 0 7
16081: PUSH
16082: LD_VAR 0 6
16086: PUSH
16087: EMPTY
16088: LIST
16089: ADD
16090: ST_TO_ADDR
// end ;
16091: GO 16047
16093: POP
16094: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16095: LD_ADDR_VAR 0 6
16099: PUSH
16100: LD_VAR 0 6
16104: PPUSH
16105: LD_VAR 0 2
16109: PUSH
16110: LD_VAR 0 2
16114: ARRAY
16115: PPUSH
16116: LD_VAR 0 3
16120: PPUSH
16121: CALL_OW 1
16125: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16126: LD_ADDR_VAR 0 7
16130: PUSH
16131: LD_VAR 0 7
16135: PPUSH
16136: LD_VAR 0 7
16140: PPUSH
16141: LD_VAR 0 6
16145: PPUSH
16146: CALL_OW 1
16150: ST_TO_ADDR
// for i = s_arr downto 2 do
16151: LD_ADDR_VAR 0 5
16155: PUSH
16156: DOUBLE
16157: LD_VAR 0 7
16161: INC
16162: ST_TO_ADDR
16163: LD_INT 2
16165: PUSH
16166: FOR_DOWNTO
16167: IFFALSE 16251
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16169: LD_ADDR_VAR 0 6
16173: PUSH
16174: LD_VAR 0 7
16178: PUSH
16179: LD_VAR 0 5
16183: PUSH
16184: LD_INT 1
16186: MINUS
16187: ARRAY
16188: PPUSH
16189: LD_VAR 0 2
16193: PUSH
16194: LD_VAR 0 5
16198: PUSH
16199: LD_INT 1
16201: MINUS
16202: ARRAY
16203: PPUSH
16204: LD_VAR 0 7
16208: PUSH
16209: LD_VAR 0 5
16213: ARRAY
16214: PPUSH
16215: CALL_OW 1
16219: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16220: LD_ADDR_VAR 0 7
16224: PUSH
16225: LD_VAR 0 7
16229: PPUSH
16230: LD_VAR 0 5
16234: PUSH
16235: LD_INT 1
16237: MINUS
16238: PPUSH
16239: LD_VAR 0 6
16243: PPUSH
16244: CALL_OW 1
16248: ST_TO_ADDR
// end ;
16249: GO 16166
16251: POP
16252: POP
// result := s_arr [ 1 ] ;
16253: LD_ADDR_VAR 0 4
16257: PUSH
16258: LD_VAR 0 7
16262: PUSH
16263: LD_INT 1
16265: ARRAY
16266: ST_TO_ADDR
// end ; end ;
16267: LD_VAR 0 4
16271: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16272: LD_INT 0
16274: PPUSH
16275: PPUSH
// if not list then
16276: LD_VAR 0 1
16280: NOT
16281: IFFALSE 16285
// exit ;
16283: GO 16376
// i := list [ pos1 ] ;
16285: LD_ADDR_VAR 0 5
16289: PUSH
16290: LD_VAR 0 1
16294: PUSH
16295: LD_VAR 0 2
16299: ARRAY
16300: ST_TO_ADDR
// if not i then
16301: LD_VAR 0 5
16305: NOT
16306: IFFALSE 16310
// exit ;
16308: GO 16376
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16310: LD_ADDR_VAR 0 1
16314: PUSH
16315: LD_VAR 0 1
16319: PPUSH
16320: LD_VAR 0 2
16324: PPUSH
16325: LD_VAR 0 1
16329: PUSH
16330: LD_VAR 0 3
16334: ARRAY
16335: PPUSH
16336: CALL_OW 1
16340: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16341: LD_ADDR_VAR 0 1
16345: PUSH
16346: LD_VAR 0 1
16350: PPUSH
16351: LD_VAR 0 3
16355: PPUSH
16356: LD_VAR 0 5
16360: PPUSH
16361: CALL_OW 1
16365: ST_TO_ADDR
// result := list ;
16366: LD_ADDR_VAR 0 4
16370: PUSH
16371: LD_VAR 0 1
16375: ST_TO_ADDR
// end ;
16376: LD_VAR 0 4
16380: RET
// export function Add ( list , pos , val ) ; begin
16381: LD_INT 0
16383: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
16384: LD_ADDR_VAR 0 4
16388: PUSH
16389: LD_VAR 0 1
16393: PPUSH
16394: LD_VAR 0 2
16398: PPUSH
16399: LD_VAR 0 3
16403: PPUSH
16404: CALL 15946 0 3
16408: ST_TO_ADDR
16409: LD_VAR 0 4
16413: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16414: LD_INT 0
16416: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16417: LD_ADDR_VAR 0 5
16421: PUSH
16422: LD_VAR 0 1
16426: PPUSH
16427: CALL_OW 250
16431: PPUSH
16432: LD_VAR 0 1
16436: PPUSH
16437: CALL_OW 251
16441: PPUSH
16442: LD_VAR 0 2
16446: PPUSH
16447: LD_VAR 0 3
16451: PPUSH
16452: LD_VAR 0 4
16456: PPUSH
16457: CALL 16467 0 5
16461: ST_TO_ADDR
// end ;
16462: LD_VAR 0 5
16466: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16467: LD_INT 0
16469: PPUSH
16470: PPUSH
16471: PPUSH
16472: PPUSH
// if not list then
16473: LD_VAR 0 3
16477: NOT
16478: IFFALSE 16482
// exit ;
16480: GO 16870
// result := [ ] ;
16482: LD_ADDR_VAR 0 6
16486: PUSH
16487: EMPTY
16488: ST_TO_ADDR
// for i in list do
16489: LD_ADDR_VAR 0 7
16493: PUSH
16494: LD_VAR 0 3
16498: PUSH
16499: FOR_IN
16500: IFFALSE 16702
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16502: LD_ADDR_VAR 0 9
16506: PUSH
16507: LD_VAR 0 7
16511: PPUSH
16512: LD_VAR 0 1
16516: PPUSH
16517: LD_VAR 0 2
16521: PPUSH
16522: CALL_OW 297
16526: ST_TO_ADDR
// if not result then
16527: LD_VAR 0 6
16531: NOT
16532: IFFALSE 16558
// result := [ [ i , tmp ] ] else
16534: LD_ADDR_VAR 0 6
16538: PUSH
16539: LD_VAR 0 7
16543: PUSH
16544: LD_VAR 0 9
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: EMPTY
16554: LIST
16555: ST_TO_ADDR
16556: GO 16700
// begin if result [ result ] [ 2 ] < tmp then
16558: LD_VAR 0 6
16562: PUSH
16563: LD_VAR 0 6
16567: ARRAY
16568: PUSH
16569: LD_INT 2
16571: ARRAY
16572: PUSH
16573: LD_VAR 0 9
16577: LESS
16578: IFFALSE 16620
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16580: LD_ADDR_VAR 0 6
16584: PUSH
16585: LD_VAR 0 6
16589: PPUSH
16590: LD_VAR 0 6
16594: PUSH
16595: LD_INT 1
16597: PLUS
16598: PPUSH
16599: LD_VAR 0 7
16603: PUSH
16604: LD_VAR 0 9
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PPUSH
16613: CALL_OW 2
16617: ST_TO_ADDR
16618: GO 16700
// for j = 1 to result do
16620: LD_ADDR_VAR 0 8
16624: PUSH
16625: DOUBLE
16626: LD_INT 1
16628: DEC
16629: ST_TO_ADDR
16630: LD_VAR 0 6
16634: PUSH
16635: FOR_TO
16636: IFFALSE 16698
// begin if tmp < result [ j ] [ 2 ] then
16638: LD_VAR 0 9
16642: PUSH
16643: LD_VAR 0 6
16647: PUSH
16648: LD_VAR 0 8
16652: ARRAY
16653: PUSH
16654: LD_INT 2
16656: ARRAY
16657: LESS
16658: IFFALSE 16696
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16660: LD_ADDR_VAR 0 6
16664: PUSH
16665: LD_VAR 0 6
16669: PPUSH
16670: LD_VAR 0 8
16674: PPUSH
16675: LD_VAR 0 7
16679: PUSH
16680: LD_VAR 0 9
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PPUSH
16689: CALL_OW 2
16693: ST_TO_ADDR
// break ;
16694: GO 16698
// end ; end ;
16696: GO 16635
16698: POP
16699: POP
// end ; end ;
16700: GO 16499
16702: POP
16703: POP
// if result and not asc then
16704: LD_VAR 0 6
16708: PUSH
16709: LD_VAR 0 4
16713: NOT
16714: AND
16715: IFFALSE 16790
// begin tmp := result ;
16717: LD_ADDR_VAR 0 9
16721: PUSH
16722: LD_VAR 0 6
16726: ST_TO_ADDR
// for i = tmp downto 1 do
16727: LD_ADDR_VAR 0 7
16731: PUSH
16732: DOUBLE
16733: LD_VAR 0 9
16737: INC
16738: ST_TO_ADDR
16739: LD_INT 1
16741: PUSH
16742: FOR_DOWNTO
16743: IFFALSE 16788
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16745: LD_ADDR_VAR 0 6
16749: PUSH
16750: LD_VAR 0 6
16754: PPUSH
16755: LD_VAR 0 9
16759: PUSH
16760: LD_VAR 0 7
16764: MINUS
16765: PUSH
16766: LD_INT 1
16768: PLUS
16769: PPUSH
16770: LD_VAR 0 9
16774: PUSH
16775: LD_VAR 0 7
16779: ARRAY
16780: PPUSH
16781: CALL_OW 1
16785: ST_TO_ADDR
16786: GO 16742
16788: POP
16789: POP
// end ; tmp := [ ] ;
16790: LD_ADDR_VAR 0 9
16794: PUSH
16795: EMPTY
16796: ST_TO_ADDR
// if mode then
16797: LD_VAR 0 5
16801: IFFALSE 16870
// begin for i = 1 to result do
16803: LD_ADDR_VAR 0 7
16807: PUSH
16808: DOUBLE
16809: LD_INT 1
16811: DEC
16812: ST_TO_ADDR
16813: LD_VAR 0 6
16817: PUSH
16818: FOR_TO
16819: IFFALSE 16858
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16821: LD_ADDR_VAR 0 9
16825: PUSH
16826: LD_VAR 0 9
16830: PPUSH
16831: LD_VAR 0 7
16835: PPUSH
16836: LD_VAR 0 6
16840: PUSH
16841: LD_VAR 0 7
16845: ARRAY
16846: PUSH
16847: LD_INT 1
16849: ARRAY
16850: PPUSH
16851: CALL_OW 1
16855: ST_TO_ADDR
16856: GO 16818
16858: POP
16859: POP
// result := tmp ;
16860: LD_ADDR_VAR 0 6
16864: PUSH
16865: LD_VAR 0 9
16869: ST_TO_ADDR
// end ; end ;
16870: LD_VAR 0 6
16874: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16875: LD_INT 0
16877: PPUSH
16878: PPUSH
16879: PPUSH
16880: PPUSH
16881: PPUSH
16882: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16883: LD_ADDR_VAR 0 5
16887: PUSH
16888: LD_INT 0
16890: PUSH
16891: LD_INT 0
16893: PUSH
16894: LD_INT 0
16896: PUSH
16897: EMPTY
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: ST_TO_ADDR
// if not x or not y then
16905: LD_VAR 0 2
16909: NOT
16910: PUSH
16911: LD_VAR 0 3
16915: NOT
16916: OR
16917: IFFALSE 16921
// exit ;
16919: GO 18567
// if not range then
16921: LD_VAR 0 4
16925: NOT
16926: IFFALSE 16936
// range := 10 ;
16928: LD_ADDR_VAR 0 4
16932: PUSH
16933: LD_INT 10
16935: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16936: LD_ADDR_VAR 0 8
16940: PUSH
16941: LD_INT 81
16943: PUSH
16944: LD_VAR 0 1
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: LD_INT 92
16955: PUSH
16956: LD_VAR 0 2
16960: PUSH
16961: LD_VAR 0 3
16965: PUSH
16966: LD_VAR 0 4
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 3
16979: PUSH
16980: LD_INT 21
16982: PUSH
16983: LD_INT 3
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: LIST
16998: PPUSH
16999: CALL_OW 69
17003: ST_TO_ADDR
// if not tmp then
17004: LD_VAR 0 8
17008: NOT
17009: IFFALSE 17013
// exit ;
17011: GO 18567
// for i in tmp do
17013: LD_ADDR_VAR 0 6
17017: PUSH
17018: LD_VAR 0 8
17022: PUSH
17023: FOR_IN
17024: IFFALSE 18542
// begin points := [ 0 , 0 , 0 ] ;
17026: LD_ADDR_VAR 0 9
17030: PUSH
17031: LD_INT 0
17033: PUSH
17034: LD_INT 0
17036: PUSH
17037: LD_INT 0
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: ST_TO_ADDR
// bpoints := 1 ;
17045: LD_ADDR_VAR 0 10
17049: PUSH
17050: LD_INT 1
17052: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17053: LD_VAR 0 6
17057: PPUSH
17058: CALL_OW 247
17062: PUSH
17063: LD_INT 1
17065: DOUBLE
17066: EQUAL
17067: IFTRUE 17071
17069: GO 17649
17071: POP
// begin if GetClass ( i ) = 1 then
17072: LD_VAR 0 6
17076: PPUSH
17077: CALL_OW 257
17081: PUSH
17082: LD_INT 1
17084: EQUAL
17085: IFFALSE 17106
// points := [ 10 , 5 , 3 ] ;
17087: LD_ADDR_VAR 0 9
17091: PUSH
17092: LD_INT 10
17094: PUSH
17095: LD_INT 5
17097: PUSH
17098: LD_INT 3
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: LIST
17105: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17106: LD_VAR 0 6
17110: PPUSH
17111: CALL_OW 257
17115: PUSH
17116: LD_INT 2
17118: PUSH
17119: LD_INT 3
17121: PUSH
17122: LD_INT 4
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: LIST
17129: IN
17130: IFFALSE 17151
// points := [ 3 , 2 , 1 ] ;
17132: LD_ADDR_VAR 0 9
17136: PUSH
17137: LD_INT 3
17139: PUSH
17140: LD_INT 2
17142: PUSH
17143: LD_INT 1
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: LIST
17150: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17151: LD_VAR 0 6
17155: PPUSH
17156: CALL_OW 257
17160: PUSH
17161: LD_INT 5
17163: EQUAL
17164: IFFALSE 17185
// points := [ 130 , 5 , 2 ] ;
17166: LD_ADDR_VAR 0 9
17170: PUSH
17171: LD_INT 130
17173: PUSH
17174: LD_INT 5
17176: PUSH
17177: LD_INT 2
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: LIST
17184: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17185: LD_VAR 0 6
17189: PPUSH
17190: CALL_OW 257
17194: PUSH
17195: LD_INT 8
17197: EQUAL
17198: IFFALSE 17219
// points := [ 35 , 35 , 30 ] ;
17200: LD_ADDR_VAR 0 9
17204: PUSH
17205: LD_INT 35
17207: PUSH
17208: LD_INT 35
17210: PUSH
17211: LD_INT 30
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17219: LD_VAR 0 6
17223: PPUSH
17224: CALL_OW 257
17228: PUSH
17229: LD_INT 9
17231: EQUAL
17232: IFFALSE 17253
// points := [ 20 , 55 , 40 ] ;
17234: LD_ADDR_VAR 0 9
17238: PUSH
17239: LD_INT 20
17241: PUSH
17242: LD_INT 55
17244: PUSH
17245: LD_INT 40
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: LIST
17252: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17253: LD_VAR 0 6
17257: PPUSH
17258: CALL_OW 257
17262: PUSH
17263: LD_INT 12
17265: PUSH
17266: LD_INT 16
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: IN
17273: IFFALSE 17294
// points := [ 5 , 3 , 2 ] ;
17275: LD_ADDR_VAR 0 9
17279: PUSH
17280: LD_INT 5
17282: PUSH
17283: LD_INT 3
17285: PUSH
17286: LD_INT 2
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: LIST
17293: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17294: LD_VAR 0 6
17298: PPUSH
17299: CALL_OW 257
17303: PUSH
17304: LD_INT 17
17306: EQUAL
17307: IFFALSE 17328
// points := [ 100 , 50 , 75 ] ;
17309: LD_ADDR_VAR 0 9
17313: PUSH
17314: LD_INT 100
17316: PUSH
17317: LD_INT 50
17319: PUSH
17320: LD_INT 75
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: LIST
17327: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17328: LD_VAR 0 6
17332: PPUSH
17333: CALL_OW 257
17337: PUSH
17338: LD_INT 15
17340: EQUAL
17341: IFFALSE 17362
// points := [ 10 , 5 , 3 ] ;
17343: LD_ADDR_VAR 0 9
17347: PUSH
17348: LD_INT 10
17350: PUSH
17351: LD_INT 5
17353: PUSH
17354: LD_INT 3
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: LIST
17361: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17362: LD_VAR 0 6
17366: PPUSH
17367: CALL_OW 257
17371: PUSH
17372: LD_INT 14
17374: EQUAL
17375: IFFALSE 17396
// points := [ 10 , 0 , 0 ] ;
17377: LD_ADDR_VAR 0 9
17381: PUSH
17382: LD_INT 10
17384: PUSH
17385: LD_INT 0
17387: PUSH
17388: LD_INT 0
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: LIST
17395: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17396: LD_VAR 0 6
17400: PPUSH
17401: CALL_OW 257
17405: PUSH
17406: LD_INT 11
17408: EQUAL
17409: IFFALSE 17430
// points := [ 30 , 10 , 5 ] ;
17411: LD_ADDR_VAR 0 9
17415: PUSH
17416: LD_INT 30
17418: PUSH
17419: LD_INT 10
17421: PUSH
17422: LD_INT 5
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: LIST
17429: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17430: LD_VAR 0 1
17434: PPUSH
17435: LD_INT 5
17437: PPUSH
17438: CALL_OW 321
17442: PUSH
17443: LD_INT 2
17445: EQUAL
17446: IFFALSE 17463
// bpoints := bpoints * 1.8 ;
17448: LD_ADDR_VAR 0 10
17452: PUSH
17453: LD_VAR 0 10
17457: PUSH
17458: LD_REAL  1.80000000000000E+0000
17461: MUL
17462: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17463: LD_VAR 0 6
17467: PPUSH
17468: CALL_OW 257
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: LD_INT 2
17478: PUSH
17479: LD_INT 3
17481: PUSH
17482: LD_INT 4
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: IN
17491: PUSH
17492: LD_VAR 0 1
17496: PPUSH
17497: LD_INT 51
17499: PPUSH
17500: CALL_OW 321
17504: PUSH
17505: LD_INT 2
17507: EQUAL
17508: AND
17509: IFFALSE 17526
// bpoints := bpoints * 1.2 ;
17511: LD_ADDR_VAR 0 10
17515: PUSH
17516: LD_VAR 0 10
17520: PUSH
17521: LD_REAL  1.20000000000000E+0000
17524: MUL
17525: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17526: LD_VAR 0 6
17530: PPUSH
17531: CALL_OW 257
17535: PUSH
17536: LD_INT 5
17538: PUSH
17539: LD_INT 7
17541: PUSH
17542: LD_INT 9
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: LIST
17549: IN
17550: PUSH
17551: LD_VAR 0 1
17555: PPUSH
17556: LD_INT 52
17558: PPUSH
17559: CALL_OW 321
17563: PUSH
17564: LD_INT 2
17566: EQUAL
17567: AND
17568: IFFALSE 17585
// bpoints := bpoints * 1.5 ;
17570: LD_ADDR_VAR 0 10
17574: PUSH
17575: LD_VAR 0 10
17579: PUSH
17580: LD_REAL  1.50000000000000E+0000
17583: MUL
17584: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17585: LD_VAR 0 1
17589: PPUSH
17590: LD_INT 66
17592: PPUSH
17593: CALL_OW 321
17597: PUSH
17598: LD_INT 2
17600: EQUAL
17601: IFFALSE 17618
// bpoints := bpoints * 1.1 ;
17603: LD_ADDR_VAR 0 10
17607: PUSH
17608: LD_VAR 0 10
17612: PUSH
17613: LD_REAL  1.10000000000000E+0000
17616: MUL
17617: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17618: LD_ADDR_VAR 0 10
17622: PUSH
17623: LD_VAR 0 10
17627: PUSH
17628: LD_VAR 0 6
17632: PPUSH
17633: LD_INT 1
17635: PPUSH
17636: CALL_OW 259
17640: PUSH
17641: LD_REAL  1.15000000000000E+0000
17644: MUL
17645: MUL
17646: ST_TO_ADDR
// end ; unit_vehicle :
17647: GO 18471
17649: LD_INT 2
17651: DOUBLE
17652: EQUAL
17653: IFTRUE 17657
17655: GO 18459
17657: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17658: LD_VAR 0 6
17662: PPUSH
17663: CALL_OW 264
17667: PUSH
17668: LD_INT 2
17670: PUSH
17671: LD_INT 42
17673: PUSH
17674: LD_INT 24
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: LIST
17681: IN
17682: IFFALSE 17703
// points := [ 25 , 5 , 3 ] ;
17684: LD_ADDR_VAR 0 9
17688: PUSH
17689: LD_INT 25
17691: PUSH
17692: LD_INT 5
17694: PUSH
17695: LD_INT 3
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17703: LD_VAR 0 6
17707: PPUSH
17708: CALL_OW 264
17712: PUSH
17713: LD_INT 4
17715: PUSH
17716: LD_INT 43
17718: PUSH
17719: LD_INT 25
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: LIST
17726: IN
17727: IFFALSE 17748
// points := [ 40 , 15 , 5 ] ;
17729: LD_ADDR_VAR 0 9
17733: PUSH
17734: LD_INT 40
17736: PUSH
17737: LD_INT 15
17739: PUSH
17740: LD_INT 5
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: LIST
17747: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17748: LD_VAR 0 6
17752: PPUSH
17753: CALL_OW 264
17757: PUSH
17758: LD_INT 3
17760: PUSH
17761: LD_INT 23
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: IN
17768: IFFALSE 17789
// points := [ 7 , 25 , 8 ] ;
17770: LD_ADDR_VAR 0 9
17774: PUSH
17775: LD_INT 7
17777: PUSH
17778: LD_INT 25
17780: PUSH
17781: LD_INT 8
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17789: LD_VAR 0 6
17793: PPUSH
17794: CALL_OW 264
17798: PUSH
17799: LD_INT 5
17801: PUSH
17802: LD_INT 27
17804: PUSH
17805: LD_INT 44
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: LIST
17812: IN
17813: IFFALSE 17834
// points := [ 14 , 50 , 16 ] ;
17815: LD_ADDR_VAR 0 9
17819: PUSH
17820: LD_INT 14
17822: PUSH
17823: LD_INT 50
17825: PUSH
17826: LD_INT 16
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: LIST
17833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17834: LD_VAR 0 6
17838: PPUSH
17839: CALL_OW 264
17843: PUSH
17844: LD_INT 6
17846: PUSH
17847: LD_INT 46
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: IN
17854: IFFALSE 17875
// points := [ 32 , 120 , 70 ] ;
17856: LD_ADDR_VAR 0 9
17860: PUSH
17861: LD_INT 32
17863: PUSH
17864: LD_INT 120
17866: PUSH
17867: LD_INT 70
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
17875: LD_VAR 0 6
17879: PPUSH
17880: CALL_OW 264
17884: PUSH
17885: LD_INT 7
17887: PUSH
17888: LD_INT 28
17890: PUSH
17891: LD_INT 45
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: LIST
17898: IN
17899: IFFALSE 17920
// points := [ 35 , 20 , 45 ] ;
17901: LD_ADDR_VAR 0 9
17905: PUSH
17906: LD_INT 35
17908: PUSH
17909: LD_INT 20
17911: PUSH
17912: LD_INT 45
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: LIST
17919: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17920: LD_VAR 0 6
17924: PPUSH
17925: CALL_OW 264
17929: PUSH
17930: LD_INT 47
17932: PUSH
17933: EMPTY
17934: LIST
17935: IN
17936: IFFALSE 17957
// points := [ 67 , 45 , 75 ] ;
17938: LD_ADDR_VAR 0 9
17942: PUSH
17943: LD_INT 67
17945: PUSH
17946: LD_INT 45
17948: PUSH
17949: LD_INT 75
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: LIST
17956: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17957: LD_VAR 0 6
17961: PPUSH
17962: CALL_OW 264
17966: PUSH
17967: LD_INT 26
17969: PUSH
17970: EMPTY
17971: LIST
17972: IN
17973: IFFALSE 17994
// points := [ 120 , 30 , 80 ] ;
17975: LD_ADDR_VAR 0 9
17979: PUSH
17980: LD_INT 120
17982: PUSH
17983: LD_INT 30
17985: PUSH
17986: LD_INT 80
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: LIST
17993: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17994: LD_VAR 0 6
17998: PPUSH
17999: CALL_OW 264
18003: PUSH
18004: LD_INT 22
18006: PUSH
18007: EMPTY
18008: LIST
18009: IN
18010: IFFALSE 18031
// points := [ 40 , 1 , 1 ] ;
18012: LD_ADDR_VAR 0 9
18016: PUSH
18017: LD_INT 40
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: LIST
18030: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18031: LD_VAR 0 6
18035: PPUSH
18036: CALL_OW 264
18040: PUSH
18041: LD_INT 29
18043: PUSH
18044: EMPTY
18045: LIST
18046: IN
18047: IFFALSE 18068
// points := [ 70 , 200 , 400 ] ;
18049: LD_ADDR_VAR 0 9
18053: PUSH
18054: LD_INT 70
18056: PUSH
18057: LD_INT 200
18059: PUSH
18060: LD_INT 400
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18068: LD_VAR 0 6
18072: PPUSH
18073: CALL_OW 264
18077: PUSH
18078: LD_INT 14
18080: PUSH
18081: LD_INT 53
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: IN
18088: IFFALSE 18109
// points := [ 40 , 10 , 20 ] ;
18090: LD_ADDR_VAR 0 9
18094: PUSH
18095: LD_INT 40
18097: PUSH
18098: LD_INT 10
18100: PUSH
18101: LD_INT 20
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: LIST
18108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18109: LD_VAR 0 6
18113: PPUSH
18114: CALL_OW 264
18118: PUSH
18119: LD_INT 9
18121: PUSH
18122: EMPTY
18123: LIST
18124: IN
18125: IFFALSE 18146
// points := [ 5 , 70 , 20 ] ;
18127: LD_ADDR_VAR 0 9
18131: PUSH
18132: LD_INT 5
18134: PUSH
18135: LD_INT 70
18137: PUSH
18138: LD_INT 20
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: LIST
18145: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18146: LD_VAR 0 6
18150: PPUSH
18151: CALL_OW 264
18155: PUSH
18156: LD_INT 10
18158: PUSH
18159: EMPTY
18160: LIST
18161: IN
18162: IFFALSE 18183
// points := [ 35 , 110 , 70 ] ;
18164: LD_ADDR_VAR 0 9
18168: PUSH
18169: LD_INT 35
18171: PUSH
18172: LD_INT 110
18174: PUSH
18175: LD_INT 70
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: LIST
18182: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18183: LD_VAR 0 6
18187: PPUSH
18188: CALL_OW 265
18192: PUSH
18193: LD_INT 25
18195: EQUAL
18196: IFFALSE 18217
// points := [ 80 , 65 , 100 ] ;
18198: LD_ADDR_VAR 0 9
18202: PUSH
18203: LD_INT 80
18205: PUSH
18206: LD_INT 65
18208: PUSH
18209: LD_INT 100
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: LIST
18216: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18217: LD_VAR 0 6
18221: PPUSH
18222: CALL_OW 263
18226: PUSH
18227: LD_INT 1
18229: EQUAL
18230: IFFALSE 18265
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18232: LD_ADDR_VAR 0 10
18236: PUSH
18237: LD_VAR 0 10
18241: PUSH
18242: LD_VAR 0 6
18246: PPUSH
18247: CALL_OW 311
18251: PPUSH
18252: LD_INT 3
18254: PPUSH
18255: CALL_OW 259
18259: PUSH
18260: LD_INT 4
18262: MUL
18263: MUL
18264: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18265: LD_VAR 0 6
18269: PPUSH
18270: CALL_OW 263
18274: PUSH
18275: LD_INT 2
18277: EQUAL
18278: IFFALSE 18329
// begin j := IsControledBy ( i ) ;
18280: LD_ADDR_VAR 0 7
18284: PUSH
18285: LD_VAR 0 6
18289: PPUSH
18290: CALL_OW 312
18294: ST_TO_ADDR
// if j then
18295: LD_VAR 0 7
18299: IFFALSE 18329
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18301: LD_ADDR_VAR 0 10
18305: PUSH
18306: LD_VAR 0 10
18310: PUSH
18311: LD_VAR 0 7
18315: PPUSH
18316: LD_INT 3
18318: PPUSH
18319: CALL_OW 259
18323: PUSH
18324: LD_INT 3
18326: MUL
18327: MUL
18328: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18329: LD_VAR 0 6
18333: PPUSH
18334: CALL_OW 264
18338: PUSH
18339: LD_INT 5
18341: PUSH
18342: LD_INT 6
18344: PUSH
18345: LD_INT 46
18347: PUSH
18348: LD_INT 44
18350: PUSH
18351: LD_INT 47
18353: PUSH
18354: LD_INT 45
18356: PUSH
18357: LD_INT 28
18359: PUSH
18360: LD_INT 7
18362: PUSH
18363: LD_INT 27
18365: PUSH
18366: LD_INT 29
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: IN
18381: PUSH
18382: LD_VAR 0 1
18386: PPUSH
18387: LD_INT 52
18389: PPUSH
18390: CALL_OW 321
18394: PUSH
18395: LD_INT 2
18397: EQUAL
18398: AND
18399: IFFALSE 18416
// bpoints := bpoints * 1.2 ;
18401: LD_ADDR_VAR 0 10
18405: PUSH
18406: LD_VAR 0 10
18410: PUSH
18411: LD_REAL  1.20000000000000E+0000
18414: MUL
18415: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18416: LD_VAR 0 6
18420: PPUSH
18421: CALL_OW 264
18425: PUSH
18426: LD_INT 6
18428: PUSH
18429: LD_INT 46
18431: PUSH
18432: LD_INT 47
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: LIST
18439: IN
18440: IFFALSE 18457
// bpoints := bpoints * 1.2 ;
18442: LD_ADDR_VAR 0 10
18446: PUSH
18447: LD_VAR 0 10
18451: PUSH
18452: LD_REAL  1.20000000000000E+0000
18455: MUL
18456: ST_TO_ADDR
// end ; unit_building :
18457: GO 18471
18459: LD_INT 3
18461: DOUBLE
18462: EQUAL
18463: IFTRUE 18467
18465: GO 18470
18467: POP
// ; end ;
18468: GO 18471
18470: POP
// for j = 1 to 3 do
18471: LD_ADDR_VAR 0 7
18475: PUSH
18476: DOUBLE
18477: LD_INT 1
18479: DEC
18480: ST_TO_ADDR
18481: LD_INT 3
18483: PUSH
18484: FOR_TO
18485: IFFALSE 18538
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18487: LD_ADDR_VAR 0 5
18491: PUSH
18492: LD_VAR 0 5
18496: PPUSH
18497: LD_VAR 0 7
18501: PPUSH
18502: LD_VAR 0 5
18506: PUSH
18507: LD_VAR 0 7
18511: ARRAY
18512: PUSH
18513: LD_VAR 0 9
18517: PUSH
18518: LD_VAR 0 7
18522: ARRAY
18523: PUSH
18524: LD_VAR 0 10
18528: MUL
18529: PLUS
18530: PPUSH
18531: CALL_OW 1
18535: ST_TO_ADDR
18536: GO 18484
18538: POP
18539: POP
// end ;
18540: GO 17023
18542: POP
18543: POP
// result := Replace ( result , 4 , tmp ) ;
18544: LD_ADDR_VAR 0 5
18548: PUSH
18549: LD_VAR 0 5
18553: PPUSH
18554: LD_INT 4
18556: PPUSH
18557: LD_VAR 0 8
18561: PPUSH
18562: CALL_OW 1
18566: ST_TO_ADDR
// end ;
18567: LD_VAR 0 5
18571: RET
// export function DangerAtRange ( unit , range ) ; begin
18572: LD_INT 0
18574: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18575: LD_ADDR_VAR 0 3
18579: PUSH
18580: LD_VAR 0 1
18584: PPUSH
18585: CALL_OW 255
18589: PPUSH
18590: LD_VAR 0 1
18594: PPUSH
18595: CALL_OW 250
18599: PPUSH
18600: LD_VAR 0 1
18604: PPUSH
18605: CALL_OW 251
18609: PPUSH
18610: LD_VAR 0 2
18614: PPUSH
18615: CALL 16875 0 4
18619: ST_TO_ADDR
// end ;
18620: LD_VAR 0 3
18624: RET
// export function IsExtension ( b ) ; begin
18625: LD_INT 0
18627: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18628: LD_ADDR_VAR 0 2
18632: PUSH
18633: LD_VAR 0 1
18637: PPUSH
18638: CALL_OW 266
18642: PUSH
18643: LD_INT 23
18645: PUSH
18646: LD_INT 20
18648: PUSH
18649: LD_INT 22
18651: PUSH
18652: LD_INT 17
18654: PUSH
18655: LD_INT 24
18657: PUSH
18658: LD_INT 21
18660: PUSH
18661: LD_INT 19
18663: PUSH
18664: LD_INT 16
18666: PUSH
18667: LD_INT 25
18669: PUSH
18670: LD_INT 18
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: IN
18685: ST_TO_ADDR
// end ;
18686: LD_VAR 0 2
18690: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
18691: LD_INT 0
18693: PPUSH
18694: PPUSH
18695: PPUSH
// result := [ ] ;
18696: LD_ADDR_VAR 0 2
18700: PUSH
18701: EMPTY
18702: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
18703: LD_ADDR_VAR 0 3
18707: PUSH
18708: LD_INT 21
18710: PUSH
18711: LD_INT 3
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PPUSH
18718: CALL_OW 69
18722: ST_TO_ADDR
// if not tmp then
18723: LD_VAR 0 3
18727: NOT
18728: IFFALSE 18732
// exit ;
18730: GO 18782
// for i in tmp do
18732: LD_ADDR_VAR 0 4
18736: PUSH
18737: LD_VAR 0 3
18741: PUSH
18742: FOR_IN
18743: IFFALSE 18780
// if GetBase ( i ) = base then
18745: LD_VAR 0 4
18749: PPUSH
18750: CALL_OW 274
18754: PUSH
18755: LD_VAR 0 1
18759: EQUAL
18760: IFFALSE 18778
// result := result ^ i ;
18762: LD_ADDR_VAR 0 2
18766: PUSH
18767: LD_VAR 0 2
18771: PUSH
18772: LD_VAR 0 4
18776: ADD
18777: ST_TO_ADDR
18778: GO 18742
18780: POP
18781: POP
// end ;
18782: LD_VAR 0 2
18786: RET
// export function ComComplete ( unit , b ) ; var i ; begin
18787: LD_INT 0
18789: PPUSH
18790: PPUSH
// if BuildingStatus ( b ) = bs_build then
18791: LD_VAR 0 2
18795: PPUSH
18796: CALL_OW 461
18800: PUSH
18801: LD_INT 1
18803: EQUAL
18804: IFFALSE 18864
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18806: LD_VAR 0 1
18810: PPUSH
18811: LD_STRING h
18813: PUSH
18814: LD_VAR 0 2
18818: PPUSH
18819: CALL_OW 250
18823: PUSH
18824: LD_VAR 0 2
18828: PPUSH
18829: CALL_OW 251
18833: PUSH
18834: LD_VAR 0 2
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: LD_INT 0
18844: PUSH
18845: LD_INT 0
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: PUSH
18857: EMPTY
18858: LIST
18859: PPUSH
18860: CALL_OW 446
// end ;
18864: LD_VAR 0 3
18868: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18869: LD_INT 0
18871: PPUSH
18872: PPUSH
18873: PPUSH
18874: PPUSH
18875: PPUSH
18876: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
18877: LD_VAR 0 1
18881: NOT
18882: PUSH
18883: LD_VAR 0 1
18887: PPUSH
18888: CALL_OW 263
18892: PUSH
18893: LD_INT 2
18895: EQUAL
18896: NOT
18897: OR
18898: IFFALSE 18902
// exit ;
18900: GO 19218
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18902: LD_ADDR_VAR 0 6
18906: PUSH
18907: LD_INT 22
18909: PUSH
18910: LD_VAR 0 1
18914: PPUSH
18915: CALL_OW 255
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 2
18926: PUSH
18927: LD_INT 30
18929: PUSH
18930: LD_INT 36
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 34
18939: PUSH
18940: LD_INT 31
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: LIST
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PPUSH
18956: CALL_OW 69
18960: ST_TO_ADDR
// if not tmp then
18961: LD_VAR 0 6
18965: NOT
18966: IFFALSE 18970
// exit ;
18968: GO 19218
// result := [ ] ;
18970: LD_ADDR_VAR 0 2
18974: PUSH
18975: EMPTY
18976: ST_TO_ADDR
// for i in tmp do
18977: LD_ADDR_VAR 0 3
18981: PUSH
18982: LD_VAR 0 6
18986: PUSH
18987: FOR_IN
18988: IFFALSE 19059
// begin t := UnitsInside ( i ) ;
18990: LD_ADDR_VAR 0 4
18994: PUSH
18995: LD_VAR 0 3
18999: PPUSH
19000: CALL_OW 313
19004: ST_TO_ADDR
// if t then
19005: LD_VAR 0 4
19009: IFFALSE 19057
// for j in t do
19011: LD_ADDR_VAR 0 7
19015: PUSH
19016: LD_VAR 0 4
19020: PUSH
19021: FOR_IN
19022: IFFALSE 19055
// result := Insert ( result , result + 1 , j ) ;
19024: LD_ADDR_VAR 0 2
19028: PUSH
19029: LD_VAR 0 2
19033: PPUSH
19034: LD_VAR 0 2
19038: PUSH
19039: LD_INT 1
19041: PLUS
19042: PPUSH
19043: LD_VAR 0 7
19047: PPUSH
19048: CALL_OW 2
19052: ST_TO_ADDR
19053: GO 19021
19055: POP
19056: POP
// end ;
19057: GO 18987
19059: POP
19060: POP
// if not result then
19061: LD_VAR 0 2
19065: NOT
19066: IFFALSE 19070
// exit ;
19068: GO 19218
// mech := result [ 1 ] ;
19070: LD_ADDR_VAR 0 5
19074: PUSH
19075: LD_VAR 0 2
19079: PUSH
19080: LD_INT 1
19082: ARRAY
19083: ST_TO_ADDR
// if result > 1 then
19084: LD_VAR 0 2
19088: PUSH
19089: LD_INT 1
19091: GREATER
19092: IFFALSE 19204
// for i = 2 to result do
19094: LD_ADDR_VAR 0 3
19098: PUSH
19099: DOUBLE
19100: LD_INT 2
19102: DEC
19103: ST_TO_ADDR
19104: LD_VAR 0 2
19108: PUSH
19109: FOR_TO
19110: IFFALSE 19202
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19112: LD_ADDR_VAR 0 4
19116: PUSH
19117: LD_VAR 0 2
19121: PUSH
19122: LD_VAR 0 3
19126: ARRAY
19127: PPUSH
19128: LD_INT 3
19130: PPUSH
19131: CALL_OW 259
19135: PUSH
19136: LD_VAR 0 2
19140: PUSH
19141: LD_VAR 0 3
19145: ARRAY
19146: PPUSH
19147: CALL_OW 432
19151: MINUS
19152: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19153: LD_VAR 0 4
19157: PUSH
19158: LD_VAR 0 5
19162: PPUSH
19163: LD_INT 3
19165: PPUSH
19166: CALL_OW 259
19170: PUSH
19171: LD_VAR 0 5
19175: PPUSH
19176: CALL_OW 432
19180: MINUS
19181: GREATEREQUAL
19182: IFFALSE 19200
// mech := result [ i ] ;
19184: LD_ADDR_VAR 0 5
19188: PUSH
19189: LD_VAR 0 2
19193: PUSH
19194: LD_VAR 0 3
19198: ARRAY
19199: ST_TO_ADDR
// end ;
19200: GO 19109
19202: POP
19203: POP
// ComLinkTo ( vehicle , mech ) ;
19204: LD_VAR 0 1
19208: PPUSH
19209: LD_VAR 0 5
19213: PPUSH
19214: CALL_OW 135
// end ;
19218: LD_VAR 0 2
19222: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
19223: LD_INT 0
19225: PPUSH
19226: PPUSH
19227: PPUSH
19228: PPUSH
19229: PPUSH
19230: PPUSH
19231: PPUSH
19232: PPUSH
19233: PPUSH
19234: PPUSH
19235: PPUSH
19236: PPUSH
// result := [ ] ;
19237: LD_ADDR_VAR 0 6
19241: PUSH
19242: EMPTY
19243: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19244: LD_VAR 0 1
19248: PPUSH
19249: CALL_OW 266
19253: PUSH
19254: LD_INT 0
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: IN
19264: NOT
19265: IFFALSE 19269
// exit ;
19267: GO 20678
// if name then
19269: LD_VAR 0 2
19273: IFFALSE 19289
// SetBName ( base_dep , name ) ;
19275: LD_VAR 0 1
19279: PPUSH
19280: LD_VAR 0 2
19284: PPUSH
19285: CALL_OW 500
// base := GetBase ( base_dep ) ;
19289: LD_ADDR_VAR 0 14
19293: PUSH
19294: LD_VAR 0 1
19298: PPUSH
19299: CALL_OW 274
19303: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19304: LD_ADDR_VAR 0 15
19308: PUSH
19309: LD_VAR 0 1
19313: PPUSH
19314: CALL_OW 255
19318: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19319: LD_ADDR_VAR 0 16
19323: PUSH
19324: LD_VAR 0 1
19328: PPUSH
19329: CALL_OW 248
19333: ST_TO_ADDR
// if sources then
19334: LD_VAR 0 4
19338: IFFALSE 19385
// for i = 1 to 3 do
19340: LD_ADDR_VAR 0 7
19344: PUSH
19345: DOUBLE
19346: LD_INT 1
19348: DEC
19349: ST_TO_ADDR
19350: LD_INT 3
19352: PUSH
19353: FOR_TO
19354: IFFALSE 19383
// AddResourceType ( base , i , sources [ i ] ) ;
19356: LD_VAR 0 14
19360: PPUSH
19361: LD_VAR 0 7
19365: PPUSH
19366: LD_VAR 0 4
19370: PUSH
19371: LD_VAR 0 7
19375: ARRAY
19376: PPUSH
19377: CALL_OW 276
19381: GO 19353
19383: POP
19384: POP
// buildings := GetBaseBuildings ( base ) ;
19385: LD_ADDR_VAR 0 17
19389: PUSH
19390: LD_VAR 0 14
19394: PPUSH
19395: CALL 18691 0 1
19399: ST_TO_ADDR
// InitHc ;
19400: CALL_OW 19
// InitUc ;
19404: CALL_OW 18
// uc_side := side ;
19408: LD_ADDR_OWVAR 20
19412: PUSH
19413: LD_VAR 0 15
19417: ST_TO_ADDR
// uc_nation := nation ;
19418: LD_ADDR_OWVAR 21
19422: PUSH
19423: LD_VAR 0 16
19427: ST_TO_ADDR
// if buildings then
19428: LD_VAR 0 17
19432: IFFALSE 20537
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19434: LD_VAR 0 17
19438: PPUSH
19439: LD_INT 2
19441: PUSH
19442: LD_INT 30
19444: PUSH
19445: LD_INT 32
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 30
19454: PUSH
19455: LD_INT 33
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: LIST
19466: PPUSH
19467: CALL_OW 72
19471: IFFALSE 19554
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19473: LD_ADDR_VAR 0 7
19477: PUSH
19478: LD_VAR 0 17
19482: PPUSH
19483: LD_INT 2
19485: PUSH
19486: LD_INT 30
19488: PUSH
19489: LD_INT 32
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 30
19498: PUSH
19499: LD_INT 33
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: LIST
19510: PPUSH
19511: CALL_OW 72
19515: PUSH
19516: FOR_IN
19517: IFFALSE 19552
// begin if not GetBWeapon ( i ) then
19519: LD_VAR 0 7
19523: PPUSH
19524: CALL_OW 269
19528: NOT
19529: IFFALSE 19550
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
19531: LD_VAR 0 7
19535: PPUSH
19536: LD_VAR 0 7
19540: PPUSH
19541: CALL 20683 0 1
19545: PPUSH
19546: CALL_OW 431
// end ;
19550: GO 19516
19552: POP
19553: POP
// end ; for i = 1 to personel do
19554: LD_ADDR_VAR 0 7
19558: PUSH
19559: DOUBLE
19560: LD_INT 1
19562: DEC
19563: ST_TO_ADDR
19564: LD_VAR 0 5
19568: PUSH
19569: FOR_TO
19570: IFFALSE 20517
// begin if i > 4 then
19572: LD_VAR 0 7
19576: PUSH
19577: LD_INT 4
19579: GREATER
19580: IFFALSE 19584
// break ;
19582: GO 20517
// case i of 1 :
19584: LD_VAR 0 7
19588: PUSH
19589: LD_INT 1
19591: DOUBLE
19592: EQUAL
19593: IFTRUE 19597
19595: GO 19670
19597: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19598: LD_ADDR_VAR 0 11
19602: PUSH
19603: LD_VAR 0 17
19607: PPUSH
19608: LD_INT 22
19610: PUSH
19611: LD_VAR 0 15
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 2
19622: PUSH
19623: LD_INT 30
19625: PUSH
19626: LD_INT 32
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 30
19635: PUSH
19636: LD_INT 4
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 30
19645: PUSH
19646: LD_INT 5
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PPUSH
19663: CALL_OW 72
19667: ST_TO_ADDR
19668: GO 19892
19670: LD_INT 2
19672: DOUBLE
19673: EQUAL
19674: IFTRUE 19678
19676: GO 19740
19678: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19679: LD_ADDR_VAR 0 11
19683: PUSH
19684: LD_VAR 0 17
19688: PPUSH
19689: LD_INT 22
19691: PUSH
19692: LD_VAR 0 15
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 2
19703: PUSH
19704: LD_INT 30
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 30
19716: PUSH
19717: LD_INT 1
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: LIST
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PPUSH
19733: CALL_OW 72
19737: ST_TO_ADDR
19738: GO 19892
19740: LD_INT 3
19742: DOUBLE
19743: EQUAL
19744: IFTRUE 19748
19746: GO 19810
19748: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19749: LD_ADDR_VAR 0 11
19753: PUSH
19754: LD_VAR 0 17
19758: PPUSH
19759: LD_INT 22
19761: PUSH
19762: LD_VAR 0 15
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 2
19773: PUSH
19774: LD_INT 30
19776: PUSH
19777: LD_INT 2
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 30
19786: PUSH
19787: LD_INT 3
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: LIST
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PPUSH
19803: CALL_OW 72
19807: ST_TO_ADDR
19808: GO 19892
19810: LD_INT 4
19812: DOUBLE
19813: EQUAL
19814: IFTRUE 19818
19816: GO 19891
19818: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19819: LD_ADDR_VAR 0 11
19823: PUSH
19824: LD_VAR 0 17
19828: PPUSH
19829: LD_INT 22
19831: PUSH
19832: LD_VAR 0 15
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 2
19843: PUSH
19844: LD_INT 30
19846: PUSH
19847: LD_INT 6
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 30
19856: PUSH
19857: LD_INT 7
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 30
19866: PUSH
19867: LD_INT 8
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PPUSH
19884: CALL_OW 72
19888: ST_TO_ADDR
19889: GO 19892
19891: POP
// if not f then
19892: LD_VAR 0 11
19896: NOT
19897: IFFALSE 19901
// continue ;
19899: GO 19569
// x := personel [ i ] ;
19901: LD_ADDR_VAR 0 12
19905: PUSH
19906: LD_VAR 0 5
19910: PUSH
19911: LD_VAR 0 7
19915: ARRAY
19916: ST_TO_ADDR
// if x = - 1 then
19917: LD_VAR 0 12
19921: PUSH
19922: LD_INT 1
19924: NEG
19925: EQUAL
19926: IFFALSE 20135
// begin for j in f do
19928: LD_ADDR_VAR 0 8
19932: PUSH
19933: LD_VAR 0 11
19937: PUSH
19938: FOR_IN
19939: IFFALSE 20131
// repeat InitHc ;
19941: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19945: LD_VAR 0 8
19949: PPUSH
19950: CALL_OW 266
19954: PUSH
19955: LD_INT 5
19957: EQUAL
19958: IFFALSE 20028
// begin if UnitsInside ( j ) < 3 then
19960: LD_VAR 0 8
19964: PPUSH
19965: CALL_OW 313
19969: PUSH
19970: LD_INT 3
19972: LESS
19973: IFFALSE 20009
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19975: LD_INT 0
19977: PPUSH
19978: LD_INT 5
19980: PUSH
19981: LD_INT 8
19983: PUSH
19984: LD_INT 9
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: LIST
19991: PUSH
19992: LD_VAR 0 16
19996: ARRAY
19997: PPUSH
19998: LD_VAR 0 3
20002: PPUSH
20003: CALL_OW 380
20007: GO 20026
// PrepareHuman ( false , i , skill ) ;
20009: LD_INT 0
20011: PPUSH
20012: LD_VAR 0 7
20016: PPUSH
20017: LD_VAR 0 3
20021: PPUSH
20022: CALL_OW 380
// end else
20026: GO 20045
// PrepareHuman ( false , i , skill ) ;
20028: LD_INT 0
20030: PPUSH
20031: LD_VAR 0 7
20035: PPUSH
20036: LD_VAR 0 3
20040: PPUSH
20041: CALL_OW 380
// un := CreateHuman ;
20045: LD_ADDR_VAR 0 13
20049: PUSH
20050: CALL_OW 44
20054: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20055: LD_ADDR_VAR 0 6
20059: PUSH
20060: LD_VAR 0 6
20064: PPUSH
20065: LD_INT 1
20067: PPUSH
20068: LD_VAR 0 13
20072: PPUSH
20073: CALL_OW 2
20077: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20078: LD_VAR 0 13
20082: PPUSH
20083: LD_VAR 0 8
20087: PPUSH
20088: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20092: LD_VAR 0 8
20096: PPUSH
20097: CALL_OW 313
20101: PUSH
20102: LD_INT 6
20104: EQUAL
20105: PUSH
20106: LD_VAR 0 8
20110: PPUSH
20111: CALL_OW 266
20115: PUSH
20116: LD_INT 32
20118: PUSH
20119: LD_INT 31
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: IN
20126: OR
20127: IFFALSE 19941
20129: GO 19938
20131: POP
20132: POP
// end else
20133: GO 20515
// for j = 1 to x do
20135: LD_ADDR_VAR 0 8
20139: PUSH
20140: DOUBLE
20141: LD_INT 1
20143: DEC
20144: ST_TO_ADDR
20145: LD_VAR 0 12
20149: PUSH
20150: FOR_TO
20151: IFFALSE 20513
// begin InitHc ;
20153: CALL_OW 19
// if not f then
20157: LD_VAR 0 11
20161: NOT
20162: IFFALSE 20251
// begin PrepareHuman ( false , i , skill ) ;
20164: LD_INT 0
20166: PPUSH
20167: LD_VAR 0 7
20171: PPUSH
20172: LD_VAR 0 3
20176: PPUSH
20177: CALL_OW 380
// un := CreateHuman ;
20181: LD_ADDR_VAR 0 13
20185: PUSH
20186: CALL_OW 44
20190: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20191: LD_ADDR_VAR 0 6
20195: PUSH
20196: LD_VAR 0 6
20200: PPUSH
20201: LD_INT 1
20203: PPUSH
20204: LD_VAR 0 13
20208: PPUSH
20209: CALL_OW 2
20213: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20214: LD_VAR 0 13
20218: PPUSH
20219: LD_VAR 0 1
20223: PPUSH
20224: CALL_OW 250
20228: PPUSH
20229: LD_VAR 0 1
20233: PPUSH
20234: CALL_OW 251
20238: PPUSH
20239: LD_INT 10
20241: PPUSH
20242: LD_INT 0
20244: PPUSH
20245: CALL_OW 50
// continue ;
20249: GO 20150
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20251: LD_VAR 0 11
20255: PUSH
20256: LD_INT 1
20258: ARRAY
20259: PPUSH
20260: CALL_OW 313
20264: PUSH
20265: LD_VAR 0 11
20269: PUSH
20270: LD_INT 1
20272: ARRAY
20273: PPUSH
20274: CALL_OW 266
20278: PUSH
20279: LD_INT 32
20281: PUSH
20282: LD_INT 31
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: IN
20289: AND
20290: PUSH
20291: LD_VAR 0 11
20295: PUSH
20296: LD_INT 1
20298: ARRAY
20299: PPUSH
20300: CALL_OW 313
20304: PUSH
20305: LD_INT 6
20307: EQUAL
20308: OR
20309: IFFALSE 20329
// f := Delete ( f , 1 ) ;
20311: LD_ADDR_VAR 0 11
20315: PUSH
20316: LD_VAR 0 11
20320: PPUSH
20321: LD_INT 1
20323: PPUSH
20324: CALL_OW 3
20328: ST_TO_ADDR
// if not f then
20329: LD_VAR 0 11
20333: NOT
20334: IFFALSE 20352
// begin x := x + 2 ;
20336: LD_ADDR_VAR 0 12
20340: PUSH
20341: LD_VAR 0 12
20345: PUSH
20346: LD_INT 2
20348: PLUS
20349: ST_TO_ADDR
// continue ;
20350: GO 20150
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20352: LD_VAR 0 11
20356: PUSH
20357: LD_INT 1
20359: ARRAY
20360: PPUSH
20361: CALL_OW 266
20365: PUSH
20366: LD_INT 5
20368: EQUAL
20369: IFFALSE 20443
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20371: LD_VAR 0 11
20375: PUSH
20376: LD_INT 1
20378: ARRAY
20379: PPUSH
20380: CALL_OW 313
20384: PUSH
20385: LD_INT 3
20387: LESS
20388: IFFALSE 20424
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20390: LD_INT 0
20392: PPUSH
20393: LD_INT 5
20395: PUSH
20396: LD_INT 8
20398: PUSH
20399: LD_INT 9
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: LIST
20406: PUSH
20407: LD_VAR 0 16
20411: ARRAY
20412: PPUSH
20413: LD_VAR 0 3
20417: PPUSH
20418: CALL_OW 380
20422: GO 20441
// PrepareHuman ( false , i , skill ) ;
20424: LD_INT 0
20426: PPUSH
20427: LD_VAR 0 7
20431: PPUSH
20432: LD_VAR 0 3
20436: PPUSH
20437: CALL_OW 380
// end else
20441: GO 20460
// PrepareHuman ( false , i , skill ) ;
20443: LD_INT 0
20445: PPUSH
20446: LD_VAR 0 7
20450: PPUSH
20451: LD_VAR 0 3
20455: PPUSH
20456: CALL_OW 380
// un := CreateHuman ;
20460: LD_ADDR_VAR 0 13
20464: PUSH
20465: CALL_OW 44
20469: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20470: LD_ADDR_VAR 0 6
20474: PUSH
20475: LD_VAR 0 6
20479: PPUSH
20480: LD_INT 1
20482: PPUSH
20483: LD_VAR 0 13
20487: PPUSH
20488: CALL_OW 2
20492: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20493: LD_VAR 0 13
20497: PPUSH
20498: LD_VAR 0 11
20502: PUSH
20503: LD_INT 1
20505: ARRAY
20506: PPUSH
20507: CALL_OW 52
// end ;
20511: GO 20150
20513: POP
20514: POP
// end ;
20515: GO 19569
20517: POP
20518: POP
// result := result ^ buildings ;
20519: LD_ADDR_VAR 0 6
20523: PUSH
20524: LD_VAR 0 6
20528: PUSH
20529: LD_VAR 0 17
20533: ADD
20534: ST_TO_ADDR
// end else
20535: GO 20678
// begin for i = 1 to personel do
20537: LD_ADDR_VAR 0 7
20541: PUSH
20542: DOUBLE
20543: LD_INT 1
20545: DEC
20546: ST_TO_ADDR
20547: LD_VAR 0 5
20551: PUSH
20552: FOR_TO
20553: IFFALSE 20676
// begin if i > 4 then
20555: LD_VAR 0 7
20559: PUSH
20560: LD_INT 4
20562: GREATER
20563: IFFALSE 20567
// break ;
20565: GO 20676
// x := personel [ i ] ;
20567: LD_ADDR_VAR 0 12
20571: PUSH
20572: LD_VAR 0 5
20576: PUSH
20577: LD_VAR 0 7
20581: ARRAY
20582: ST_TO_ADDR
// if x = - 1 then
20583: LD_VAR 0 12
20587: PUSH
20588: LD_INT 1
20590: NEG
20591: EQUAL
20592: IFFALSE 20596
// continue ;
20594: GO 20552
// PrepareHuman ( false , i , skill ) ;
20596: LD_INT 0
20598: PPUSH
20599: LD_VAR 0 7
20603: PPUSH
20604: LD_VAR 0 3
20608: PPUSH
20609: CALL_OW 380
// un := CreateHuman ;
20613: LD_ADDR_VAR 0 13
20617: PUSH
20618: CALL_OW 44
20622: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20623: LD_VAR 0 13
20627: PPUSH
20628: LD_VAR 0 1
20632: PPUSH
20633: CALL_OW 250
20637: PPUSH
20638: LD_VAR 0 1
20642: PPUSH
20643: CALL_OW 251
20647: PPUSH
20648: LD_INT 10
20650: PPUSH
20651: LD_INT 0
20653: PPUSH
20654: CALL_OW 50
// result := result ^ un ;
20658: LD_ADDR_VAR 0 6
20662: PUSH
20663: LD_VAR 0 6
20667: PUSH
20668: LD_VAR 0 13
20672: ADD
20673: ST_TO_ADDR
// end ;
20674: GO 20552
20676: POP
20677: POP
// end ; end ;
20678: LD_VAR 0 6
20682: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20683: LD_INT 0
20685: PPUSH
20686: PPUSH
20687: PPUSH
20688: PPUSH
20689: PPUSH
20690: PPUSH
20691: PPUSH
20692: PPUSH
20693: PPUSH
20694: PPUSH
20695: PPUSH
20696: PPUSH
20697: PPUSH
20698: PPUSH
20699: PPUSH
20700: PPUSH
// result := false ;
20701: LD_ADDR_VAR 0 2
20705: PUSH
20706: LD_INT 0
20708: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20709: LD_VAR 0 1
20713: NOT
20714: PUSH
20715: LD_VAR 0 1
20719: PPUSH
20720: CALL_OW 266
20724: PUSH
20725: LD_INT 32
20727: PUSH
20728: LD_INT 33
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: IN
20735: NOT
20736: OR
20737: IFFALSE 20741
// exit ;
20739: GO 21974
// nat := GetNation ( tower ) ;
20741: LD_ADDR_VAR 0 11
20745: PUSH
20746: LD_VAR 0 1
20750: PPUSH
20751: CALL_OW 248
20755: ST_TO_ADDR
// side := GetSide ( tower ) ;
20756: LD_ADDR_VAR 0 15
20760: PUSH
20761: LD_VAR 0 1
20765: PPUSH
20766: CALL_OW 255
20770: ST_TO_ADDR
// x := GetX ( tower ) ;
20771: LD_ADDR_VAR 0 9
20775: PUSH
20776: LD_VAR 0 1
20780: PPUSH
20781: CALL_OW 250
20785: ST_TO_ADDR
// y := GetY ( tower ) ;
20786: LD_ADDR_VAR 0 10
20790: PUSH
20791: LD_VAR 0 1
20795: PPUSH
20796: CALL_OW 251
20800: ST_TO_ADDR
// if not x or not y then
20801: LD_VAR 0 9
20805: NOT
20806: PUSH
20807: LD_VAR 0 10
20811: NOT
20812: OR
20813: IFFALSE 20817
// exit ;
20815: GO 21974
// weapon := 0 ;
20817: LD_ADDR_VAR 0 17
20821: PUSH
20822: LD_INT 0
20824: ST_TO_ADDR
// fac_list := [ ] ;
20825: LD_ADDR_VAR 0 16
20829: PUSH
20830: EMPTY
20831: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
20832: LD_ADDR_VAR 0 5
20836: PUSH
20837: LD_VAR 0 1
20841: PPUSH
20842: CALL_OW 274
20846: PPUSH
20847: CALL 18691 0 1
20851: PPUSH
20852: LD_INT 30
20854: PUSH
20855: LD_INT 3
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PPUSH
20862: CALL_OW 72
20866: ST_TO_ADDR
// if not factories then
20867: LD_VAR 0 5
20871: NOT
20872: IFFALSE 20876
// exit ;
20874: GO 21974
// for i in factories do
20876: LD_ADDR_VAR 0 7
20880: PUSH
20881: LD_VAR 0 5
20885: PUSH
20886: FOR_IN
20887: IFFALSE 20912
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20889: LD_ADDR_VAR 0 16
20893: PUSH
20894: LD_VAR 0 16
20898: PUSH
20899: LD_VAR 0 7
20903: PPUSH
20904: CALL_OW 478
20908: UNION
20909: ST_TO_ADDR
20910: GO 20886
20912: POP
20913: POP
// if not fac_list then
20914: LD_VAR 0 16
20918: NOT
20919: IFFALSE 20923
// exit ;
20921: GO 21974
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20923: LD_ADDR_VAR 0 4
20927: PUSH
20928: LD_INT 4
20930: PUSH
20931: LD_INT 5
20933: PUSH
20934: LD_INT 9
20936: PUSH
20937: LD_INT 10
20939: PUSH
20940: LD_INT 6
20942: PUSH
20943: LD_INT 7
20945: PUSH
20946: LD_INT 11
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 27
20960: PUSH
20961: LD_INT 28
20963: PUSH
20964: LD_INT 26
20966: PUSH
20967: LD_INT 30
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 43
20978: PUSH
20979: LD_INT 44
20981: PUSH
20982: LD_INT 46
20984: PUSH
20985: LD_INT 45
20987: PUSH
20988: LD_INT 47
20990: PUSH
20991: LD_INT 49
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: LIST
21006: PUSH
21007: LD_VAR 0 11
21011: ARRAY
21012: ST_TO_ADDR
// for i in list do
21013: LD_ADDR_VAR 0 7
21017: PUSH
21018: LD_VAR 0 4
21022: PUSH
21023: FOR_IN
21024: IFFALSE 21057
// if not i in fac_list then
21026: LD_VAR 0 7
21030: PUSH
21031: LD_VAR 0 16
21035: IN
21036: NOT
21037: IFFALSE 21055
// list := list diff i ;
21039: LD_ADDR_VAR 0 4
21043: PUSH
21044: LD_VAR 0 4
21048: PUSH
21049: LD_VAR 0 7
21053: DIFF
21054: ST_TO_ADDR
21055: GO 21023
21057: POP
21058: POP
// if not list then
21059: LD_VAR 0 4
21063: NOT
21064: IFFALSE 21068
// exit ;
21066: GO 21974
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21068: LD_VAR 0 11
21072: PUSH
21073: LD_INT 3
21075: EQUAL
21076: PUSH
21077: LD_INT 49
21079: PUSH
21080: LD_VAR 0 4
21084: IN
21085: AND
21086: PUSH
21087: LD_INT 31
21089: PPUSH
21090: LD_VAR 0 15
21094: PPUSH
21095: CALL_OW 321
21099: PUSH
21100: LD_INT 2
21102: EQUAL
21103: AND
21104: IFFALSE 21164
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21106: LD_INT 22
21108: PUSH
21109: LD_VAR 0 15
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 35
21120: PUSH
21121: LD_INT 49
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 91
21130: PUSH
21131: LD_VAR 0 1
21135: PUSH
21136: LD_INT 10
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: LIST
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: LIST
21148: PPUSH
21149: CALL_OW 69
21153: NOT
21154: IFFALSE 21164
// weapon := ru_time_lapser ;
21156: LD_ADDR_VAR 0 17
21160: PUSH
21161: LD_INT 49
21163: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21164: LD_VAR 0 11
21168: PUSH
21169: LD_INT 1
21171: PUSH
21172: LD_INT 2
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: IN
21179: PUSH
21180: LD_INT 11
21182: PUSH
21183: LD_VAR 0 4
21187: IN
21188: PUSH
21189: LD_INT 30
21191: PUSH
21192: LD_VAR 0 4
21196: IN
21197: OR
21198: AND
21199: PUSH
21200: LD_INT 6
21202: PPUSH
21203: LD_VAR 0 15
21207: PPUSH
21208: CALL_OW 321
21212: PUSH
21213: LD_INT 2
21215: EQUAL
21216: AND
21217: IFFALSE 21382
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21219: LD_INT 22
21221: PUSH
21222: LD_VAR 0 15
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 2
21233: PUSH
21234: LD_INT 35
21236: PUSH
21237: LD_INT 11
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 35
21246: PUSH
21247: LD_INT 30
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 91
21261: PUSH
21262: LD_VAR 0 1
21266: PUSH
21267: LD_INT 18
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: PPUSH
21280: CALL_OW 69
21284: NOT
21285: PUSH
21286: LD_INT 22
21288: PUSH
21289: LD_VAR 0 15
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 2
21300: PUSH
21301: LD_INT 30
21303: PUSH
21304: LD_INT 32
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 30
21313: PUSH
21314: LD_INT 33
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 91
21328: PUSH
21329: LD_VAR 0 1
21333: PUSH
21334: LD_INT 12
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: LIST
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: LIST
21346: PUSH
21347: EMPTY
21348: LIST
21349: PPUSH
21350: CALL_OW 69
21354: PUSH
21355: LD_INT 2
21357: GREATER
21358: AND
21359: IFFALSE 21382
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21361: LD_ADDR_VAR 0 17
21365: PUSH
21366: LD_INT 11
21368: PUSH
21369: LD_INT 30
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_VAR 0 11
21380: ARRAY
21381: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21382: LD_VAR 0 17
21386: NOT
21387: PUSH
21388: LD_INT 40
21390: PPUSH
21391: LD_VAR 0 15
21395: PPUSH
21396: CALL_OW 321
21400: PUSH
21401: LD_INT 2
21403: EQUAL
21404: AND
21405: PUSH
21406: LD_INT 7
21408: PUSH
21409: LD_VAR 0 4
21413: IN
21414: PUSH
21415: LD_INT 28
21417: PUSH
21418: LD_VAR 0 4
21422: IN
21423: OR
21424: PUSH
21425: LD_INT 45
21427: PUSH
21428: LD_VAR 0 4
21432: IN
21433: OR
21434: AND
21435: IFFALSE 21689
// begin hex := GetHexInfo ( x , y ) ;
21437: LD_ADDR_VAR 0 3
21441: PUSH
21442: LD_VAR 0 9
21446: PPUSH
21447: LD_VAR 0 10
21451: PPUSH
21452: CALL_OW 546
21456: ST_TO_ADDR
// if hex [ 1 ] then
21457: LD_VAR 0 3
21461: PUSH
21462: LD_INT 1
21464: ARRAY
21465: IFFALSE 21469
// exit ;
21467: GO 21974
// height := hex [ 2 ] ;
21469: LD_ADDR_VAR 0 14
21473: PUSH
21474: LD_VAR 0 3
21478: PUSH
21479: LD_INT 2
21481: ARRAY
21482: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21483: LD_ADDR_VAR 0 13
21487: PUSH
21488: LD_INT 0
21490: PUSH
21491: LD_INT 2
21493: PUSH
21494: LD_INT 3
21496: PUSH
21497: LD_INT 5
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: ST_TO_ADDR
// for i in tmp do
21506: LD_ADDR_VAR 0 7
21510: PUSH
21511: LD_VAR 0 13
21515: PUSH
21516: FOR_IN
21517: IFFALSE 21687
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21519: LD_ADDR_VAR 0 8
21523: PUSH
21524: LD_VAR 0 9
21528: PPUSH
21529: LD_VAR 0 7
21533: PPUSH
21534: LD_INT 5
21536: PPUSH
21537: CALL_OW 272
21541: PUSH
21542: LD_VAR 0 10
21546: PPUSH
21547: LD_VAR 0 7
21551: PPUSH
21552: LD_INT 5
21554: PPUSH
21555: CALL_OW 273
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21564: LD_VAR 0 8
21568: PUSH
21569: LD_INT 1
21571: ARRAY
21572: PPUSH
21573: LD_VAR 0 8
21577: PUSH
21578: LD_INT 2
21580: ARRAY
21581: PPUSH
21582: CALL_OW 488
21586: IFFALSE 21685
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21588: LD_ADDR_VAR 0 3
21592: PUSH
21593: LD_VAR 0 8
21597: PUSH
21598: LD_INT 1
21600: ARRAY
21601: PPUSH
21602: LD_VAR 0 8
21606: PUSH
21607: LD_INT 2
21609: ARRAY
21610: PPUSH
21611: CALL_OW 546
21615: ST_TO_ADDR
// if hex [ 1 ] then
21616: LD_VAR 0 3
21620: PUSH
21621: LD_INT 1
21623: ARRAY
21624: IFFALSE 21628
// continue ;
21626: GO 21516
// h := hex [ 2 ] ;
21628: LD_ADDR_VAR 0 12
21632: PUSH
21633: LD_VAR 0 3
21637: PUSH
21638: LD_INT 2
21640: ARRAY
21641: ST_TO_ADDR
// if h + 7 < height then
21642: LD_VAR 0 12
21646: PUSH
21647: LD_INT 7
21649: PLUS
21650: PUSH
21651: LD_VAR 0 14
21655: LESS
21656: IFFALSE 21685
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21658: LD_ADDR_VAR 0 17
21662: PUSH
21663: LD_INT 7
21665: PUSH
21666: LD_INT 28
21668: PUSH
21669: LD_INT 45
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: PUSH
21677: LD_VAR 0 11
21681: ARRAY
21682: ST_TO_ADDR
// break ;
21683: GO 21687
// end ; end ; end ;
21685: GO 21516
21687: POP
21688: POP
// end ; if not weapon then
21689: LD_VAR 0 17
21693: NOT
21694: IFFALSE 21856
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21696: LD_ADDR_VAR 0 4
21700: PUSH
21701: LD_VAR 0 4
21705: PUSH
21706: LD_INT 11
21708: PUSH
21709: LD_INT 30
21711: PUSH
21712: LD_INT 49
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: LIST
21719: DIFF
21720: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
21721: LD_ADDR_VAR 0 17
21725: PUSH
21726: LD_VAR 0 4
21730: PUSH
21731: LD_INT 1
21733: PPUSH
21734: LD_VAR 0 4
21738: PPUSH
21739: CALL_OW 12
21743: ARRAY
21744: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
21745: LD_ADDR_VAR 0 13
21749: PUSH
21750: LD_INT 22
21752: PUSH
21753: LD_VAR 0 15
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 3
21764: PUSH
21765: LD_INT 35
21767: PUSH
21768: LD_INT 0
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PPUSH
21783: CALL_OW 69
21787: ST_TO_ADDR
// for i in tmp do
21788: LD_ADDR_VAR 0 7
21792: PUSH
21793: LD_VAR 0 13
21797: PUSH
21798: FOR_IN
21799: IFFALSE 21824
// list := list diff GetBWeapon ( i ) ;
21801: LD_ADDR_VAR 0 4
21805: PUSH
21806: LD_VAR 0 4
21810: PUSH
21811: LD_VAR 0 7
21815: PPUSH
21816: CALL_OW 269
21820: DIFF
21821: ST_TO_ADDR
21822: GO 21798
21824: POP
21825: POP
// if list then
21826: LD_VAR 0 4
21830: IFFALSE 21856
// weapon := list [ rand ( 1 , list ) ] ;
21832: LD_ADDR_VAR 0 17
21836: PUSH
21837: LD_VAR 0 4
21841: PUSH
21842: LD_INT 1
21844: PPUSH
21845: LD_VAR 0 4
21849: PPUSH
21850: CALL_OW 12
21854: ARRAY
21855: ST_TO_ADDR
// end ; if weapon then
21856: LD_VAR 0 17
21860: IFFALSE 21974
// begin tmp := CostOfWeapon ( weapon ) ;
21862: LD_ADDR_VAR 0 13
21866: PUSH
21867: LD_VAR 0 17
21871: PPUSH
21872: CALL_OW 451
21876: ST_TO_ADDR
// j := GetBase ( tower ) ;
21877: LD_ADDR_VAR 0 8
21881: PUSH
21882: LD_VAR 0 1
21886: PPUSH
21887: CALL_OW 274
21891: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21892: LD_VAR 0 8
21896: PPUSH
21897: LD_INT 1
21899: PPUSH
21900: CALL_OW 275
21904: PUSH
21905: LD_VAR 0 13
21909: PUSH
21910: LD_INT 1
21912: ARRAY
21913: GREATEREQUAL
21914: PUSH
21915: LD_VAR 0 8
21919: PPUSH
21920: LD_INT 2
21922: PPUSH
21923: CALL_OW 275
21927: PUSH
21928: LD_VAR 0 13
21932: PUSH
21933: LD_INT 2
21935: ARRAY
21936: GREATEREQUAL
21937: AND
21938: PUSH
21939: LD_VAR 0 8
21943: PPUSH
21944: LD_INT 3
21946: PPUSH
21947: CALL_OW 275
21951: PUSH
21952: LD_VAR 0 13
21956: PUSH
21957: LD_INT 3
21959: ARRAY
21960: GREATEREQUAL
21961: AND
21962: IFFALSE 21974
// result := weapon ;
21964: LD_ADDR_VAR 0 2
21968: PUSH
21969: LD_VAR 0 17
21973: ST_TO_ADDR
// end ; end ;
21974: LD_VAR 0 2
21978: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21979: LD_INT 0
21981: PPUSH
21982: PPUSH
// result := true ;
21983: LD_ADDR_VAR 0 3
21987: PUSH
21988: LD_INT 1
21990: ST_TO_ADDR
// if array1 = array2 then
21991: LD_VAR 0 1
21995: PUSH
21996: LD_VAR 0 2
22000: EQUAL
22001: IFFALSE 22061
// begin for i = 1 to array1 do
22003: LD_ADDR_VAR 0 4
22007: PUSH
22008: DOUBLE
22009: LD_INT 1
22011: DEC
22012: ST_TO_ADDR
22013: LD_VAR 0 1
22017: PUSH
22018: FOR_TO
22019: IFFALSE 22057
// if array1 [ i ] <> array2 [ i ] then
22021: LD_VAR 0 1
22025: PUSH
22026: LD_VAR 0 4
22030: ARRAY
22031: PUSH
22032: LD_VAR 0 2
22036: PUSH
22037: LD_VAR 0 4
22041: ARRAY
22042: NONEQUAL
22043: IFFALSE 22055
// begin result := false ;
22045: LD_ADDR_VAR 0 3
22049: PUSH
22050: LD_INT 0
22052: ST_TO_ADDR
// break ;
22053: GO 22057
// end ;
22055: GO 22018
22057: POP
22058: POP
// end else
22059: GO 22069
// result := false ;
22061: LD_ADDR_VAR 0 3
22065: PUSH
22066: LD_INT 0
22068: ST_TO_ADDR
// end ;
22069: LD_VAR 0 3
22073: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22074: LD_INT 0
22076: PPUSH
22077: PPUSH
22078: PPUSH
// pom := GetBase ( fac ) ;
22079: LD_ADDR_VAR 0 5
22083: PUSH
22084: LD_VAR 0 1
22088: PPUSH
22089: CALL_OW 274
22093: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22094: LD_ADDR_VAR 0 4
22098: PUSH
22099: LD_VAR 0 2
22103: PUSH
22104: LD_INT 1
22106: ARRAY
22107: PPUSH
22108: LD_VAR 0 2
22112: PUSH
22113: LD_INT 2
22115: ARRAY
22116: PPUSH
22117: LD_VAR 0 2
22121: PUSH
22122: LD_INT 3
22124: ARRAY
22125: PPUSH
22126: LD_VAR 0 2
22130: PUSH
22131: LD_INT 4
22133: ARRAY
22134: PPUSH
22135: CALL_OW 449
22139: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
22140: LD_VAR 0 5
22144: PPUSH
22145: LD_INT 1
22147: PPUSH
22148: CALL_OW 275
22152: PUSH
22153: LD_VAR 0 4
22157: PUSH
22158: LD_INT 1
22160: ARRAY
22161: GREATEREQUAL
22162: PUSH
22163: LD_VAR 0 5
22167: PPUSH
22168: LD_INT 2
22170: PPUSH
22171: CALL_OW 275
22175: PUSH
22176: LD_VAR 0 4
22180: PUSH
22181: LD_INT 2
22183: ARRAY
22184: GREATEREQUAL
22185: AND
22186: PUSH
22187: LD_VAR 0 5
22191: PPUSH
22192: LD_INT 3
22194: PPUSH
22195: CALL_OW 275
22199: PUSH
22200: LD_VAR 0 4
22204: PUSH
22205: LD_INT 3
22207: ARRAY
22208: GREATEREQUAL
22209: AND
22210: IFFALSE 22222
// result := true else
22212: LD_ADDR_VAR 0 3
22216: PUSH
22217: LD_INT 1
22219: ST_TO_ADDR
22220: GO 22230
// result := false ;
22222: LD_ADDR_VAR 0 3
22226: PUSH
22227: LD_INT 0
22229: ST_TO_ADDR
// end ;
22230: LD_VAR 0 3
22234: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22235: LD_INT 0
22237: PPUSH
22238: PPUSH
22239: PPUSH
22240: PPUSH
// pom := GetBase ( building ) ;
22241: LD_ADDR_VAR 0 3
22245: PUSH
22246: LD_VAR 0 1
22250: PPUSH
22251: CALL_OW 274
22255: ST_TO_ADDR
// if not pom then
22256: LD_VAR 0 3
22260: NOT
22261: IFFALSE 22265
// exit ;
22263: GO 22435
// btype := GetBType ( building ) ;
22265: LD_ADDR_VAR 0 5
22269: PUSH
22270: LD_VAR 0 1
22274: PPUSH
22275: CALL_OW 266
22279: ST_TO_ADDR
// if btype = b_armoury then
22280: LD_VAR 0 5
22284: PUSH
22285: LD_INT 4
22287: EQUAL
22288: IFFALSE 22298
// btype := b_barracks ;
22290: LD_ADDR_VAR 0 5
22294: PUSH
22295: LD_INT 5
22297: ST_TO_ADDR
// if btype = b_depot then
22298: LD_VAR 0 5
22302: PUSH
22303: LD_INT 0
22305: EQUAL
22306: IFFALSE 22316
// btype := b_warehouse ;
22308: LD_ADDR_VAR 0 5
22312: PUSH
22313: LD_INT 1
22315: ST_TO_ADDR
// if btype = b_workshop then
22316: LD_VAR 0 5
22320: PUSH
22321: LD_INT 2
22323: EQUAL
22324: IFFALSE 22334
// btype := b_factory ;
22326: LD_ADDR_VAR 0 5
22330: PUSH
22331: LD_INT 3
22333: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22334: LD_ADDR_VAR 0 4
22338: PUSH
22339: LD_VAR 0 5
22343: PPUSH
22344: LD_VAR 0 1
22348: PPUSH
22349: CALL_OW 248
22353: PPUSH
22354: CALL_OW 450
22358: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22359: LD_ADDR_VAR 0 2
22363: PUSH
22364: LD_VAR 0 3
22368: PPUSH
22369: LD_INT 1
22371: PPUSH
22372: CALL_OW 275
22376: PUSH
22377: LD_VAR 0 4
22381: PUSH
22382: LD_INT 1
22384: ARRAY
22385: GREATEREQUAL
22386: PUSH
22387: LD_VAR 0 3
22391: PPUSH
22392: LD_INT 2
22394: PPUSH
22395: CALL_OW 275
22399: PUSH
22400: LD_VAR 0 4
22404: PUSH
22405: LD_INT 2
22407: ARRAY
22408: GREATEREQUAL
22409: AND
22410: PUSH
22411: LD_VAR 0 3
22415: PPUSH
22416: LD_INT 3
22418: PPUSH
22419: CALL_OW 275
22423: PUSH
22424: LD_VAR 0 4
22428: PUSH
22429: LD_INT 3
22431: ARRAY
22432: GREATEREQUAL
22433: AND
22434: ST_TO_ADDR
// end ;
22435: LD_VAR 0 2
22439: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22440: LD_INT 0
22442: PPUSH
22443: PPUSH
22444: PPUSH
// pom := GetBase ( building ) ;
22445: LD_ADDR_VAR 0 4
22449: PUSH
22450: LD_VAR 0 1
22454: PPUSH
22455: CALL_OW 274
22459: ST_TO_ADDR
// if not pom then
22460: LD_VAR 0 4
22464: NOT
22465: IFFALSE 22469
// exit ;
22467: GO 22570
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22469: LD_ADDR_VAR 0 5
22473: PUSH
22474: LD_VAR 0 2
22478: PPUSH
22479: LD_VAR 0 1
22483: PPUSH
22484: CALL_OW 248
22488: PPUSH
22489: CALL_OW 450
22493: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22494: LD_ADDR_VAR 0 3
22498: PUSH
22499: LD_VAR 0 4
22503: PPUSH
22504: LD_INT 1
22506: PPUSH
22507: CALL_OW 275
22511: PUSH
22512: LD_VAR 0 5
22516: PUSH
22517: LD_INT 1
22519: ARRAY
22520: GREATEREQUAL
22521: PUSH
22522: LD_VAR 0 4
22526: PPUSH
22527: LD_INT 2
22529: PPUSH
22530: CALL_OW 275
22534: PUSH
22535: LD_VAR 0 5
22539: PUSH
22540: LD_INT 2
22542: ARRAY
22543: GREATEREQUAL
22544: AND
22545: PUSH
22546: LD_VAR 0 4
22550: PPUSH
22551: LD_INT 3
22553: PPUSH
22554: CALL_OW 275
22558: PUSH
22559: LD_VAR 0 5
22563: PUSH
22564: LD_INT 3
22566: ARRAY
22567: GREATEREQUAL
22568: AND
22569: ST_TO_ADDR
// end ;
22570: LD_VAR 0 3
22574: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes ; begin
22575: LD_INT 0
22577: PPUSH
22578: PPUSH
22579: PPUSH
22580: PPUSH
22581: PPUSH
22582: PPUSH
22583: PPUSH
// if not base or not btype or not x or not y then
22584: LD_VAR 0 1
22588: NOT
22589: PUSH
22590: LD_VAR 0 2
22594: NOT
22595: OR
22596: PUSH
22597: LD_VAR 0 3
22601: NOT
22602: OR
22603: PUSH
22604: LD_VAR 0 4
22608: NOT
22609: OR
22610: IFFALSE 22614
// exit ;
22612: GO 22886
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
22614: LD_ADDR_VAR 0 12
22618: PUSH
22619: LD_VAR 0 2
22623: PPUSH
22624: LD_VAR 0 3
22628: PPUSH
22629: LD_VAR 0 4
22633: PPUSH
22634: LD_VAR 0 5
22638: PPUSH
22639: LD_VAR 0 1
22643: PUSH
22644: LD_INT 1
22646: ARRAY
22647: PPUSH
22648: CALL_OW 248
22652: PPUSH
22653: LD_INT 0
22655: PPUSH
22656: CALL 23669 0 6
22660: ST_TO_ADDR
// if not hexes then
22661: LD_VAR 0 12
22665: NOT
22666: IFFALSE 22670
// exit ;
22668: GO 22886
// for i = 1 to hexes do
22670: LD_ADDR_VAR 0 7
22674: PUSH
22675: DOUBLE
22676: LD_INT 1
22678: DEC
22679: ST_TO_ADDR
22680: LD_VAR 0 12
22684: PUSH
22685: FOR_TO
22686: IFFALSE 22884
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22688: LD_ADDR_VAR 0 11
22692: PUSH
22693: LD_VAR 0 12
22697: PUSH
22698: LD_VAR 0 7
22702: ARRAY
22703: PUSH
22704: LD_INT 1
22706: ARRAY
22707: PPUSH
22708: LD_VAR 0 12
22712: PUSH
22713: LD_VAR 0 7
22717: ARRAY
22718: PUSH
22719: LD_INT 2
22721: ARRAY
22722: PPUSH
22723: CALL_OW 428
22727: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
22728: LD_VAR 0 11
22732: NOT
22733: PUSH
22734: LD_VAR 0 11
22738: PPUSH
22739: CALL_OW 247
22743: PUSH
22744: LD_INT 3
22746: EQUAL
22747: OR
22748: IFFALSE 22752
// continue ;
22750: GO 22685
// for j = 0 to 5 do
22752: LD_ADDR_VAR 0 8
22756: PUSH
22757: DOUBLE
22758: LD_INT 0
22760: DEC
22761: ST_TO_ADDR
22762: LD_INT 5
22764: PUSH
22765: FOR_TO
22766: IFFALSE 22880
// begin _x := ShiftX ( GetX ( tmp ) , j , 3 ) ;
22768: LD_ADDR_VAR 0 9
22772: PUSH
22773: LD_VAR 0 11
22777: PPUSH
22778: CALL_OW 250
22782: PPUSH
22783: LD_VAR 0 8
22787: PPUSH
22788: LD_INT 3
22790: PPUSH
22791: CALL_OW 272
22795: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 3 ) ;
22796: LD_ADDR_VAR 0 10
22800: PUSH
22801: LD_VAR 0 11
22805: PPUSH
22806: CALL_OW 251
22810: PPUSH
22811: LD_VAR 0 8
22815: PPUSH
22816: LD_INT 3
22818: PPUSH
22819: CALL_OW 273
22823: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22824: LD_VAR 0 9
22828: PPUSH
22829: LD_VAR 0 10
22833: PPUSH
22834: CALL_OW 488
22838: PUSH
22839: LD_VAR 0 9
22843: PPUSH
22844: LD_VAR 0 10
22848: PPUSH
22849: CALL_OW 428
22853: NOT
22854: AND
22855: IFFALSE 22878
// begin ComMoveXY ( tmp , _x , _y ) ;
22857: LD_VAR 0 11
22861: PPUSH
22862: LD_VAR 0 9
22866: PPUSH
22867: LD_VAR 0 10
22871: PPUSH
22872: CALL_OW 111
// break ;
22876: GO 22880
// end ; end ;
22878: GO 22765
22880: POP
22881: POP
// end ;
22882: GO 22685
22884: POP
22885: POP
// end ;
22886: LD_VAR 0 6
22890: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
22891: LD_INT 0
22893: PPUSH
22894: PPUSH
22895: PPUSH
22896: PPUSH
22897: PPUSH
22898: PPUSH
22899: PPUSH
22900: PPUSH
22901: PPUSH
// result := false ;
22902: LD_ADDR_VAR 0 6
22906: PUSH
22907: LD_INT 0
22909: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22910: LD_VAR 0 1
22914: NOT
22915: PUSH
22916: LD_VAR 0 1
22920: PPUSH
22921: CALL_OW 266
22925: PUSH
22926: LD_INT 0
22928: PUSH
22929: LD_INT 1
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: IN
22936: NOT
22937: OR
22938: PUSH
22939: LD_VAR 0 2
22943: NOT
22944: OR
22945: PUSH
22946: LD_VAR 0 5
22950: PUSH
22951: LD_INT 0
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: LD_INT 2
22959: PUSH
22960: LD_INT 3
22962: PUSH
22963: LD_INT 4
22965: PUSH
22966: LD_INT 5
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: IN
22977: NOT
22978: OR
22979: PUSH
22980: LD_VAR 0 3
22984: PPUSH
22985: LD_VAR 0 4
22989: PPUSH
22990: CALL_OW 488
22994: NOT
22995: OR
22996: IFFALSE 23000
// exit ;
22998: GO 23664
// pom := GetBase ( bdepot ) ;
23000: LD_ADDR_VAR 0 9
23004: PUSH
23005: LD_VAR 0 1
23009: PPUSH
23010: CALL_OW 274
23014: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
23015: LD_ADDR_VAR 0 10
23019: PUSH
23020: LD_VAR 0 2
23024: PPUSH
23025: LD_VAR 0 1
23029: PPUSH
23030: CALL_OW 248
23034: PPUSH
23035: CALL_OW 450
23039: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23040: LD_VAR 0 9
23044: PPUSH
23045: LD_INT 1
23047: PPUSH
23048: CALL_OW 275
23052: PUSH
23053: LD_VAR 0 10
23057: PUSH
23058: LD_INT 1
23060: ARRAY
23061: GREATEREQUAL
23062: PUSH
23063: LD_VAR 0 9
23067: PPUSH
23068: LD_INT 2
23070: PPUSH
23071: CALL_OW 275
23075: PUSH
23076: LD_VAR 0 10
23080: PUSH
23081: LD_INT 2
23083: ARRAY
23084: GREATEREQUAL
23085: AND
23086: PUSH
23087: LD_VAR 0 9
23091: PPUSH
23092: LD_INT 3
23094: PPUSH
23095: CALL_OW 275
23099: PUSH
23100: LD_VAR 0 10
23104: PUSH
23105: LD_INT 3
23107: ARRAY
23108: GREATEREQUAL
23109: AND
23110: NOT
23111: IFFALSE 23115
// exit ;
23113: GO 23664
// if GetBType ( bdepot ) = b_depot then
23115: LD_VAR 0 1
23119: PPUSH
23120: CALL_OW 266
23124: PUSH
23125: LD_INT 0
23127: EQUAL
23128: IFFALSE 23140
// dist := 28 else
23130: LD_ADDR_VAR 0 13
23134: PUSH
23135: LD_INT 28
23137: ST_TO_ADDR
23138: GO 23148
// dist := 36 ;
23140: LD_ADDR_VAR 0 13
23144: PUSH
23145: LD_INT 36
23147: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
23148: LD_VAR 0 1
23152: PPUSH
23153: LD_VAR 0 3
23157: PPUSH
23158: LD_VAR 0 4
23162: PPUSH
23163: CALL_OW 297
23167: PUSH
23168: LD_VAR 0 13
23172: GREATER
23173: IFFALSE 23177
// exit ;
23175: GO 23664
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
23177: LD_ADDR_VAR 0 11
23181: PUSH
23182: LD_VAR 0 2
23186: PPUSH
23187: LD_VAR 0 3
23191: PPUSH
23192: LD_VAR 0 4
23196: PPUSH
23197: LD_VAR 0 5
23201: PPUSH
23202: LD_VAR 0 1
23206: PPUSH
23207: CALL_OW 248
23211: PPUSH
23212: LD_INT 0
23214: PPUSH
23215: CALL 23669 0 6
23219: ST_TO_ADDR
// if not hexes then
23220: LD_VAR 0 11
23224: NOT
23225: IFFALSE 23229
// exit ;
23227: GO 23664
// hex := GetHexInfo ( x , y ) ;
23229: LD_ADDR_VAR 0 14
23233: PUSH
23234: LD_VAR 0 3
23238: PPUSH
23239: LD_VAR 0 4
23243: PPUSH
23244: CALL_OW 546
23248: ST_TO_ADDR
// if hex [ 1 ] then
23249: LD_VAR 0 14
23253: PUSH
23254: LD_INT 1
23256: ARRAY
23257: IFFALSE 23261
// exit ;
23259: GO 23664
// height := hex [ 2 ] ;
23261: LD_ADDR_VAR 0 12
23265: PUSH
23266: LD_VAR 0 14
23270: PUSH
23271: LD_INT 2
23273: ARRAY
23274: ST_TO_ADDR
// for i = 1 to hexes do
23275: LD_ADDR_VAR 0 7
23279: PUSH
23280: DOUBLE
23281: LD_INT 1
23283: DEC
23284: ST_TO_ADDR
23285: LD_VAR 0 11
23289: PUSH
23290: FOR_TO
23291: IFFALSE 23619
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23293: LD_VAR 0 11
23297: PUSH
23298: LD_VAR 0 7
23302: ARRAY
23303: PUSH
23304: LD_INT 1
23306: ARRAY
23307: PPUSH
23308: LD_VAR 0 11
23312: PUSH
23313: LD_VAR 0 7
23317: ARRAY
23318: PUSH
23319: LD_INT 2
23321: ARRAY
23322: PPUSH
23323: CALL_OW 488
23327: NOT
23328: IFFALSE 23332
// continue ;
23330: GO 23290
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23332: LD_ADDR_VAR 0 8
23336: PUSH
23337: LD_VAR 0 11
23341: PUSH
23342: LD_VAR 0 7
23346: ARRAY
23347: PUSH
23348: LD_INT 1
23350: ARRAY
23351: PPUSH
23352: LD_VAR 0 11
23356: PUSH
23357: LD_VAR 0 7
23361: ARRAY
23362: PUSH
23363: LD_INT 2
23365: ARRAY
23366: PPUSH
23367: CALL_OW 546
23371: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23372: LD_VAR 0 8
23376: PUSH
23377: LD_INT 1
23379: ARRAY
23380: PUSH
23381: LD_VAR 0 8
23385: PUSH
23386: LD_INT 2
23388: ARRAY
23389: PUSH
23390: LD_VAR 0 12
23394: PUSH
23395: LD_INT 2
23397: PLUS
23398: GREATER
23399: OR
23400: PUSH
23401: LD_VAR 0 8
23405: PUSH
23406: LD_INT 2
23408: ARRAY
23409: PUSH
23410: LD_VAR 0 12
23414: PUSH
23415: LD_INT 2
23417: MINUS
23418: LESS
23419: OR
23420: PUSH
23421: LD_VAR 0 8
23425: PUSH
23426: LD_INT 3
23428: ARRAY
23429: PUSH
23430: LD_INT 0
23432: PUSH
23433: LD_INT 8
23435: PUSH
23436: LD_INT 9
23438: PUSH
23439: LD_INT 10
23441: PUSH
23442: LD_INT 11
23444: PUSH
23445: LD_INT 12
23447: PUSH
23448: LD_INT 13
23450: PUSH
23451: LD_INT 16
23453: PUSH
23454: LD_INT 17
23456: PUSH
23457: LD_INT 18
23459: PUSH
23460: LD_INT 19
23462: PUSH
23463: LD_INT 20
23465: PUSH
23466: LD_INT 21
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: IN
23484: NOT
23485: OR
23486: PUSH
23487: LD_VAR 0 8
23491: PUSH
23492: LD_INT 5
23494: ARRAY
23495: NOT
23496: OR
23497: PUSH
23498: LD_VAR 0 8
23502: PUSH
23503: LD_INT 6
23505: ARRAY
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: LD_INT 2
23512: PUSH
23513: LD_INT 7
23515: PUSH
23516: LD_INT 9
23518: PUSH
23519: LD_INT 10
23521: PUSH
23522: LD_INT 11
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: IN
23533: NOT
23534: OR
23535: PUSH
23536: LD_VAR 0 11
23540: PUSH
23541: LD_VAR 0 7
23545: ARRAY
23546: PUSH
23547: LD_INT 1
23549: ARRAY
23550: PPUSH
23551: LD_VAR 0 11
23555: PUSH
23556: LD_VAR 0 7
23560: ARRAY
23561: PUSH
23562: LD_INT 2
23564: ARRAY
23565: PPUSH
23566: CALL_OW 428
23570: PUSH
23571: LD_INT 0
23573: GREATER
23574: OR
23575: PUSH
23576: LD_VAR 0 11
23580: PUSH
23581: LD_VAR 0 7
23585: ARRAY
23586: PUSH
23587: LD_INT 1
23589: ARRAY
23590: PPUSH
23591: LD_VAR 0 11
23595: PUSH
23596: LD_VAR 0 7
23600: ARRAY
23601: PUSH
23602: LD_INT 2
23604: ARRAY
23605: PPUSH
23606: CALL_OW 351
23610: OR
23611: IFFALSE 23617
// exit ;
23613: POP
23614: POP
23615: GO 23664
// end ;
23617: GO 23290
23619: POP
23620: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
23621: LD_VAR 0 1
23625: PPUSH
23626: CALL_OW 255
23630: PPUSH
23631: LD_VAR 0 3
23635: PPUSH
23636: LD_VAR 0 4
23640: PPUSH
23641: LD_INT 20
23643: PPUSH
23644: CALL 16875 0 4
23648: PUSH
23649: LD_INT 4
23651: ARRAY
23652: IFFALSE 23656
// exit ;
23654: GO 23664
// result := true ;
23656: LD_ADDR_VAR 0 6
23660: PUSH
23661: LD_INT 1
23663: ST_TO_ADDR
// end ;
23664: LD_VAR 0 6
23668: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
23669: LD_INT 0
23671: PPUSH
23672: PPUSH
23673: PPUSH
23674: PPUSH
23675: PPUSH
23676: PPUSH
23677: PPUSH
23678: PPUSH
23679: PPUSH
23680: PPUSH
23681: PPUSH
23682: PPUSH
23683: PPUSH
23684: PPUSH
23685: PPUSH
23686: PPUSH
23687: PPUSH
23688: PPUSH
23689: PPUSH
23690: PPUSH
23691: PPUSH
23692: PPUSH
23693: PPUSH
23694: PPUSH
23695: PPUSH
23696: PPUSH
23697: PPUSH
23698: PPUSH
23699: PPUSH
23700: PPUSH
23701: PPUSH
23702: PPUSH
23703: PPUSH
23704: PPUSH
23705: PPUSH
23706: PPUSH
23707: PPUSH
23708: PPUSH
23709: PPUSH
23710: PPUSH
23711: PPUSH
23712: PPUSH
23713: PPUSH
23714: PPUSH
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
23720: PPUSH
23721: PPUSH
23722: PPUSH
23723: PPUSH
23724: PPUSH
23725: PPUSH
23726: PPUSH
23727: PPUSH
23728: PPUSH
// result = [ ] ;
23729: LD_ADDR_VAR 0 7
23733: PUSH
23734: EMPTY
23735: ST_TO_ADDR
// temp_list = [ ] ;
23736: LD_ADDR_VAR 0 9
23740: PUSH
23741: EMPTY
23742: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23743: LD_VAR 0 4
23747: PUSH
23748: LD_INT 0
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: LD_INT 2
23756: PUSH
23757: LD_INT 3
23759: PUSH
23760: LD_INT 4
23762: PUSH
23763: LD_INT 5
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: IN
23774: NOT
23775: PUSH
23776: LD_VAR 0 1
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: LD_INT 1
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: IN
23791: PUSH
23792: LD_VAR 0 5
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: LD_INT 2
23802: PUSH
23803: LD_INT 3
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: LIST
23810: IN
23811: NOT
23812: AND
23813: OR
23814: IFFALSE 23818
// exit ;
23816: GO 42203
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23818: LD_VAR 0 1
23822: PUSH
23823: LD_INT 6
23825: PUSH
23826: LD_INT 7
23828: PUSH
23829: LD_INT 8
23831: PUSH
23832: LD_INT 13
23834: PUSH
23835: LD_INT 12
23837: PUSH
23838: LD_INT 15
23840: PUSH
23841: LD_INT 11
23843: PUSH
23844: LD_INT 14
23846: PUSH
23847: LD_INT 10
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: IN
23861: IFFALSE 23871
// btype = b_lab ;
23863: LD_ADDR_VAR 0 1
23867: PUSH
23868: LD_INT 6
23870: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23871: LD_VAR 0 6
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: LD_INT 1
23881: PUSH
23882: LD_INT 2
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: IN
23890: NOT
23891: PUSH
23892: LD_VAR 0 1
23896: PUSH
23897: LD_INT 0
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: LD_INT 2
23905: PUSH
23906: LD_INT 3
23908: PUSH
23909: LD_INT 6
23911: PUSH
23912: LD_INT 36
23914: PUSH
23915: LD_INT 4
23917: PUSH
23918: LD_INT 5
23920: PUSH
23921: LD_INT 31
23923: PUSH
23924: LD_INT 32
23926: PUSH
23927: LD_INT 33
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: IN
23943: NOT
23944: PUSH
23945: LD_VAR 0 6
23949: PUSH
23950: LD_INT 1
23952: EQUAL
23953: AND
23954: OR
23955: PUSH
23956: LD_VAR 0 1
23960: PUSH
23961: LD_INT 2
23963: PUSH
23964: LD_INT 3
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: IN
23971: NOT
23972: PUSH
23973: LD_VAR 0 6
23977: PUSH
23978: LD_INT 2
23980: EQUAL
23981: AND
23982: OR
23983: IFFALSE 23993
// mode = 0 ;
23985: LD_ADDR_VAR 0 6
23989: PUSH
23990: LD_INT 0
23992: ST_TO_ADDR
// case mode of 0 :
23993: LD_VAR 0 6
23997: PUSH
23998: LD_INT 0
24000: DOUBLE
24001: EQUAL
24002: IFTRUE 24006
24004: GO 35459
24006: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24007: LD_ADDR_VAR 0 11
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: LD_INT 0
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 0
24024: PUSH
24025: LD_INT 1
24027: NEG
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 1
24035: PUSH
24036: LD_INT 0
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 1
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: LD_INT 1
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 1
24065: NEG
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 1
24076: NEG
24077: PUSH
24078: LD_INT 1
24080: NEG
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 1
24088: NEG
24089: PUSH
24090: LD_INT 2
24092: NEG
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: LD_INT 2
24103: NEG
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 1
24122: PUSH
24123: LD_INT 2
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 0
24132: PUSH
24133: LD_INT 2
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 1
24142: NEG
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 1
24153: PUSH
24154: LD_INT 3
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: LD_INT 3
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24200: LD_ADDR_VAR 0 12
24204: PUSH
24205: LD_INT 0
24207: PUSH
24208: LD_INT 0
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: LD_INT 1
24220: NEG
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: LD_INT 0
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: LD_INT 1
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 0
24248: PUSH
24249: LD_INT 1
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 1
24258: NEG
24259: PUSH
24260: LD_INT 0
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 1
24269: NEG
24270: PUSH
24271: LD_INT 1
24273: NEG
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: LD_INT 1
24284: NEG
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 2
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 1
24312: NEG
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 2
24323: NEG
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 2
24334: NEG
24335: PUSH
24336: LD_INT 1
24338: NEG
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 2
24346: NEG
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 3
24357: NEG
24358: PUSH
24359: LD_INT 0
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 3
24368: NEG
24369: PUSH
24370: LD_INT 1
24372: NEG
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24396: LD_ADDR_VAR 0 13
24400: PUSH
24401: LD_INT 0
24403: PUSH
24404: LD_INT 0
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 0
24413: PUSH
24414: LD_INT 1
24416: NEG
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: LD_INT 0
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: LD_INT 1
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 0
24444: PUSH
24445: LD_INT 1
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: NEG
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: LD_INT 1
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 1
24477: NEG
24478: PUSH
24479: LD_INT 2
24481: NEG
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 2
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 1
24509: PUSH
24510: LD_INT 2
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 2
24519: NEG
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 2
24531: NEG
24532: PUSH
24533: LD_INT 2
24535: NEG
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 2
24543: NEG
24544: PUSH
24545: LD_INT 3
24547: NEG
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 3
24555: NEG
24556: PUSH
24557: LD_INT 2
24559: NEG
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 3
24567: NEG
24568: PUSH
24569: LD_INT 3
24571: NEG
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24595: LD_ADDR_VAR 0 14
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 0
24612: PUSH
24613: LD_INT 1
24615: NEG
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 0
24643: PUSH
24644: LD_INT 1
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: NEG
24654: PUSH
24655: LD_INT 0
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 1
24664: NEG
24665: PUSH
24666: LD_INT 1
24668: NEG
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 1
24676: NEG
24677: PUSH
24678: LD_INT 2
24680: NEG
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: LD_INT 2
24691: NEG
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 1
24699: PUSH
24700: LD_INT 1
24702: NEG
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: LD_INT 2
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 0
24720: PUSH
24721: LD_INT 2
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 1
24730: NEG
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 1
24741: NEG
24742: PUSH
24743: LD_INT 3
24745: NEG
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 0
24753: PUSH
24754: LD_INT 3
24756: NEG
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 1
24764: PUSH
24765: LD_INT 2
24767: NEG
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24791: LD_ADDR_VAR 0 15
24795: PUSH
24796: LD_INT 0
24798: PUSH
24799: LD_INT 0
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 0
24808: PUSH
24809: LD_INT 1
24811: NEG
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 1
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 1
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 0
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 1
24849: NEG
24850: PUSH
24851: LD_INT 0
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 1
24860: NEG
24861: PUSH
24862: LD_INT 1
24864: NEG
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: LD_INT 1
24875: NEG
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 2
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 2
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 2
24914: NEG
24915: PUSH
24916: LD_INT 0
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 2
24925: NEG
24926: PUSH
24927: LD_INT 1
24929: NEG
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 2
24937: PUSH
24938: LD_INT 1
24940: NEG
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 3
24948: PUSH
24949: LD_INT 0
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 3
24958: PUSH
24959: LD_INT 1
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24984: LD_ADDR_VAR 0 16
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: LD_INT 0
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: LD_INT 1
25004: NEG
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: LD_INT 0
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 1
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: LD_INT 1
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: NEG
25043: PUSH
25044: LD_INT 0
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 1
25053: NEG
25054: PUSH
25055: LD_INT 1
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: NEG
25066: PUSH
25067: LD_INT 2
25069: NEG
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 2
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 2
25087: PUSH
25088: LD_INT 2
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: LD_INT 2
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 2
25107: NEG
25108: PUSH
25109: LD_INT 1
25111: NEG
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 2
25119: NEG
25120: PUSH
25121: LD_INT 2
25123: NEG
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 3
25131: PUSH
25132: LD_INT 2
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 3
25141: PUSH
25142: LD_INT 3
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: LD_INT 3
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25177: LD_ADDR_VAR 0 17
25181: PUSH
25182: LD_INT 0
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 0
25194: PUSH
25195: LD_INT 1
25197: NEG
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 1
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 0
25225: PUSH
25226: LD_INT 1
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 1
25235: NEG
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 1
25246: NEG
25247: PUSH
25248: LD_INT 1
25250: NEG
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: LD_INT 2
25262: NEG
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 0
25270: PUSH
25271: LD_INT 2
25273: NEG
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: LD_INT 1
25284: NEG
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 2
25292: PUSH
25293: LD_INT 0
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: LD_INT 2
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 1
25322: PUSH
25323: LD_INT 2
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 0
25332: PUSH
25333: LD_INT 2
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 1
25342: NEG
25343: PUSH
25344: LD_INT 1
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 2
25353: NEG
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 2
25364: NEG
25365: PUSH
25366: LD_INT 1
25368: NEG
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 2
25376: NEG
25377: PUSH
25378: LD_INT 2
25380: NEG
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25407: LD_ADDR_VAR 0 18
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: LD_INT 1
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 0
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 1
25465: NEG
25466: PUSH
25467: LD_INT 0
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 1
25476: NEG
25477: PUSH
25478: LD_INT 1
25480: NEG
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: LD_INT 2
25492: NEG
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 0
25500: PUSH
25501: LD_INT 2
25503: NEG
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: LD_INT 1
25514: NEG
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 2
25522: PUSH
25523: LD_INT 0
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 2
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 2
25542: PUSH
25543: LD_INT 2
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 1
25552: PUSH
25553: LD_INT 2
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 0
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 1
25572: NEG
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 2
25583: NEG
25584: PUSH
25585: LD_INT 0
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 2
25594: NEG
25595: PUSH
25596: LD_INT 1
25598: NEG
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 2
25606: NEG
25607: PUSH
25608: LD_INT 2
25610: NEG
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25637: LD_ADDR_VAR 0 19
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: LD_INT 0
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 0
25654: PUSH
25655: LD_INT 1
25657: NEG
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 1
25675: PUSH
25676: LD_INT 1
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PUSH
25697: LD_INT 0
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: NEG
25707: PUSH
25708: LD_INT 1
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: NEG
25719: PUSH
25720: LD_INT 2
25722: NEG
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: LD_INT 2
25733: NEG
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: LD_INT 1
25744: NEG
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 2
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: LD_INT 2
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: PUSH
25783: LD_INT 2
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: LD_INT 2
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 1
25802: NEG
25803: PUSH
25804: LD_INT 1
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 2
25813: NEG
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 2
25824: NEG
25825: PUSH
25826: LD_INT 1
25828: NEG
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 2
25836: NEG
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25867: LD_ADDR_VAR 0 20
25871: PUSH
25872: LD_INT 0
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: LD_INT 1
25887: NEG
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 1
25925: NEG
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: NEG
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: LD_INT 2
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 0
25960: PUSH
25961: LD_INT 2
25963: NEG
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 1
25971: PUSH
25972: LD_INT 1
25974: NEG
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 2
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 2
25992: PUSH
25993: LD_INT 1
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 2
26002: PUSH
26003: LD_INT 2
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: LD_INT 2
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: LD_INT 2
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 1
26032: NEG
26033: PUSH
26034: LD_INT 1
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 2
26043: NEG
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 2
26054: NEG
26055: PUSH
26056: LD_INT 1
26058: NEG
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 2
26066: NEG
26067: PUSH
26068: LD_INT 2
26070: NEG
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26097: LD_ADDR_VAR 0 21
26101: PUSH
26102: LD_INT 0
26104: PUSH
26105: LD_INT 0
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 0
26114: PUSH
26115: LD_INT 1
26117: NEG
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 1
26155: NEG
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: NEG
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: LD_INT 2
26182: NEG
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: LD_INT 2
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 1
26201: PUSH
26202: LD_INT 1
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 2
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 2
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 2
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 0
26252: PUSH
26253: LD_INT 2
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 1
26262: NEG
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 2
26273: NEG
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 2
26284: NEG
26285: PUSH
26286: LD_INT 1
26288: NEG
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 2
26296: NEG
26297: PUSH
26298: LD_INT 2
26300: NEG
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26327: LD_ADDR_VAR 0 22
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: LD_INT 0
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: LD_INT 1
26347: NEG
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: LD_INT 0
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: LD_INT 1
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 1
26385: NEG
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: NEG
26397: PUSH
26398: LD_INT 1
26400: NEG
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: LD_INT 2
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: LD_INT 2
26423: NEG
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: LD_INT 1
26434: NEG
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 2
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 2
26452: PUSH
26453: LD_INT 1
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: LD_INT 2
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 0
26482: PUSH
26483: LD_INT 2
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 1
26492: NEG
26493: PUSH
26494: LD_INT 1
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 2
26503: NEG
26504: PUSH
26505: LD_INT 0
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: NEG
26515: PUSH
26516: LD_INT 1
26518: NEG
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 2
26526: NEG
26527: PUSH
26528: LD_INT 2
26530: NEG
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26557: LD_ADDR_VAR 0 23
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: LD_INT 0
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: LD_INT 1
26577: NEG
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: LD_INT 0
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: LD_INT 1
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: LD_INT 1
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: LD_INT 1
26630: NEG
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: LD_INT 2
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: LD_INT 2
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 1
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 2
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 2
26682: PUSH
26683: LD_INT 1
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 2
26692: PUSH
26693: LD_INT 2
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 1
26722: NEG
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 2
26733: NEG
26734: PUSH
26735: LD_INT 0
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 2
26744: NEG
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: NEG
26757: PUSH
26758: LD_INT 2
26760: NEG
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 2
26768: NEG
26769: PUSH
26770: LD_INT 3
26772: NEG
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 1
26780: NEG
26781: PUSH
26782: LD_INT 3
26784: NEG
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 1
26792: PUSH
26793: LD_INT 2
26795: NEG
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 2
26803: PUSH
26804: LD_INT 1
26806: NEG
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26837: LD_ADDR_VAR 0 24
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: LD_INT 0
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 0
26854: PUSH
26855: LD_INT 1
26857: NEG
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 1
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 0
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 1
26895: NEG
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 1
26906: NEG
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: NEG
26919: PUSH
26920: LD_INT 2
26922: NEG
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 0
26930: PUSH
26931: LD_INT 2
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: LD_INT 1
26944: NEG
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 2
26952: PUSH
26953: LD_INT 0
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 2
26962: PUSH
26963: LD_INT 1
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 2
26972: PUSH
26973: LD_INT 2
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 1
26982: PUSH
26983: LD_INT 2
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: LD_INT 2
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 1
27002: NEG
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 2
27013: NEG
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 2
27024: NEG
27025: PUSH
27026: LD_INT 1
27028: NEG
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 2
27036: NEG
27037: PUSH
27038: LD_INT 2
27040: NEG
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 1
27048: PUSH
27049: LD_INT 2
27051: NEG
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 2
27059: PUSH
27060: LD_INT 1
27062: NEG
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 3
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 3
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27113: LD_ADDR_VAR 0 25
27117: PUSH
27118: LD_INT 0
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: LD_INT 1
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: LD_INT 1
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: NEG
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 1
27194: NEG
27195: PUSH
27196: LD_INT 2
27198: NEG
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: LD_INT 2
27209: NEG
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: LD_INT 1
27220: NEG
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 2
27228: PUSH
27229: LD_INT 0
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 2
27238: PUSH
27239: LD_INT 1
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 2
27248: PUSH
27249: LD_INT 2
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: LD_INT 2
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: LD_INT 2
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 1
27278: NEG
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 2
27289: NEG
27290: PUSH
27291: LD_INT 0
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 2
27300: NEG
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 2
27312: NEG
27313: PUSH
27314: LD_INT 2
27316: NEG
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 3
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 3
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 2
27344: PUSH
27345: LD_INT 3
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: LD_INT 3
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27387: LD_ADDR_VAR 0 26
27391: PUSH
27392: LD_INT 0
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: LD_INT 1
27407: NEG
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: LD_INT 1
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: NEG
27457: PUSH
27458: LD_INT 1
27460: NEG
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 1
27468: NEG
27469: PUSH
27470: LD_INT 2
27472: NEG
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 2
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 2
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 2
27522: PUSH
27523: LD_INT 2
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: LD_INT 2
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: LD_INT 2
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 1
27552: NEG
27553: PUSH
27554: LD_INT 1
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 2
27563: NEG
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 2
27574: NEG
27575: PUSH
27576: LD_INT 1
27578: NEG
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 2
27586: NEG
27587: PUSH
27588: LD_INT 2
27590: NEG
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 2
27598: PUSH
27599: LD_INT 3
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: LD_INT 3
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 1
27618: NEG
27619: PUSH
27620: LD_INT 2
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 2
27629: NEG
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27663: LD_ADDR_VAR 0 27
27667: PUSH
27668: LD_INT 0
27670: PUSH
27671: LD_INT 0
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: LD_INT 0
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 1
27701: PUSH
27702: LD_INT 1
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: LD_INT 1
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: LD_INT 1
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: NEG
27745: PUSH
27746: LD_INT 2
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 0
27756: PUSH
27757: LD_INT 2
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: LD_INT 1
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 2
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 2
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 2
27798: PUSH
27799: LD_INT 2
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 1
27808: PUSH
27809: LD_INT 2
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 0
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 1
27828: NEG
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 2
27839: NEG
27840: PUSH
27841: LD_INT 0
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 2
27850: NEG
27851: PUSH
27852: LD_INT 1
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 2
27862: NEG
27863: PUSH
27864: LD_INT 2
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 1
27874: NEG
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 2
27885: NEG
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 3
27896: NEG
27897: PUSH
27898: LD_INT 1
27900: NEG
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 3
27908: NEG
27909: PUSH
27910: LD_INT 2
27912: NEG
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27943: LD_ADDR_VAR 0 28
27947: PUSH
27948: LD_INT 0
27950: PUSH
27951: LD_INT 0
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 0
27960: PUSH
27961: LD_INT 1
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: LD_INT 1
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: LD_INT 1
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 1
28001: NEG
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 1
28012: NEG
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 1
28024: NEG
28025: PUSH
28026: LD_INT 2
28028: NEG
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 0
28036: PUSH
28037: LD_INT 2
28039: NEG
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: LD_INT 1
28050: NEG
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 2
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 2
28068: PUSH
28069: LD_INT 1
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 2
28078: PUSH
28079: LD_INT 2
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: LD_INT 2
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: LD_INT 2
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 2
28119: NEG
28120: PUSH
28121: LD_INT 0
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 2
28130: NEG
28131: PUSH
28132: LD_INT 1
28134: NEG
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 2
28142: NEG
28143: PUSH
28144: LD_INT 2
28146: NEG
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 2
28154: NEG
28155: PUSH
28156: LD_INT 3
28158: NEG
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: LD_INT 3
28170: NEG
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 3
28178: NEG
28179: PUSH
28180: LD_INT 1
28182: NEG
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 3
28190: NEG
28191: PUSH
28192: LD_INT 2
28194: NEG
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28225: LD_ADDR_VAR 0 29
28229: PUSH
28230: LD_INT 0
28232: PUSH
28233: LD_INT 0
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: LD_INT 1
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 1
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 1
28263: PUSH
28264: LD_INT 1
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: LD_INT 1
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 1
28283: NEG
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: LD_INT 1
28298: NEG
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 1
28306: NEG
28307: PUSH
28308: LD_INT 2
28310: NEG
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 0
28318: PUSH
28319: LD_INT 2
28321: NEG
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 1
28329: PUSH
28330: LD_INT 1
28332: NEG
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 2
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 2
28350: PUSH
28351: LD_INT 1
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: LD_INT 2
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: LD_INT 2
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 1
28380: NEG
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 2
28391: NEG
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 2
28403: NEG
28404: PUSH
28405: LD_INT 2
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 2
28415: NEG
28416: PUSH
28417: LD_INT 3
28419: NEG
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 2
28427: PUSH
28428: LD_INT 1
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 3
28438: PUSH
28439: LD_INT 1
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: LD_INT 3
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 1
28458: NEG
28459: PUSH
28460: LD_INT 2
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 3
28469: NEG
28470: PUSH
28471: LD_INT 2
28473: NEG
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28504: LD_ADDR_VAR 0 30
28508: PUSH
28509: LD_INT 0
28511: PUSH
28512: LD_INT 0
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: LD_INT 0
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: LD_INT 2
28589: NEG
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: LD_INT 2
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 2
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 2
28639: PUSH
28640: LD_INT 2
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: LD_INT 2
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 1
28659: NEG
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 2
28670: NEG
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 2
28681: NEG
28682: PUSH
28683: LD_INT 1
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: LD_INT 3
28697: NEG
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 1
28705: PUSH
28706: LD_INT 2
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 3
28716: PUSH
28717: LD_INT 2
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: LD_INT 3
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 2
28736: NEG
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 3
28747: NEG
28748: PUSH
28749: LD_INT 1
28751: NEG
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28782: LD_ADDR_VAR 0 31
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: LD_INT 0
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: LD_INT 1
28802: NEG
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: LD_INT 0
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: LD_INT 1
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 0
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 1
28840: NEG
28841: PUSH
28842: LD_INT 0
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: LD_INT 1
28855: NEG
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 1
28863: NEG
28864: PUSH
28865: LD_INT 2
28867: NEG
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 1
28875: PUSH
28876: LD_INT 1
28878: NEG
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 2
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 2
28896: PUSH
28897: LD_INT 1
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 2
28906: PUSH
28907: LD_INT 2
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: LD_INT 2
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 1
28936: NEG
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 2
28947: NEG
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 2
28959: NEG
28960: PUSH
28961: LD_INT 2
28963: NEG
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 2
28971: NEG
28972: PUSH
28973: LD_INT 3
28975: NEG
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 2
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 3
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 1
29004: PUSH
29005: LD_INT 3
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 1
29014: NEG
29015: PUSH
29016: LD_INT 2
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 3
29025: NEG
29026: PUSH
29027: LD_INT 2
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29060: LD_ADDR_VAR 0 32
29064: PUSH
29065: LD_INT 0
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: LD_INT 1
29080: NEG
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: LD_INT 0
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 1
29098: PUSH
29099: LD_INT 1
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: LD_INT 1
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 1
29118: NEG
29119: PUSH
29120: LD_INT 0
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 1
29129: NEG
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: LD_INT 2
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: LD_INT 2
29156: NEG
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 2
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 2
29185: PUSH
29186: LD_INT 2
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 1
29195: PUSH
29196: LD_INT 2
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 0
29205: PUSH
29206: LD_INT 2
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 1
29215: NEG
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 2
29226: NEG
29227: PUSH
29228: LD_INT 0
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 2
29237: NEG
29238: PUSH
29239: LD_INT 1
29241: NEG
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 1
29249: NEG
29250: PUSH
29251: LD_INT 3
29253: NEG
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 1
29261: PUSH
29262: LD_INT 2
29264: NEG
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 3
29272: PUSH
29273: LD_INT 2
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 2
29282: PUSH
29283: LD_INT 3
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 2
29292: NEG
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 3
29303: NEG
29304: PUSH
29305: LD_INT 1
29307: NEG
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29338: LD_ADDR_VAR 0 33
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 0
29355: PUSH
29356: LD_INT 1
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: LD_INT 1
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 0
29386: PUSH
29387: LD_INT 1
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: LD_INT 0
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 1
29407: NEG
29408: PUSH
29409: LD_INT 1
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: NEG
29420: PUSH
29421: LD_INT 2
29423: NEG
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: LD_INT 1
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 2
29452: PUSH
29453: LD_INT 1
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: LD_INT 2
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 1
29482: NEG
29483: PUSH
29484: LD_INT 1
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 2
29493: NEG
29494: PUSH
29495: LD_INT 0
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 2
29504: NEG
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 2
29516: NEG
29517: PUSH
29518: LD_INT 2
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 2
29528: NEG
29529: PUSH
29530: LD_INT 3
29532: NEG
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 2
29540: PUSH
29541: LD_INT 1
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 3
29551: PUSH
29552: LD_INT 1
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 1
29561: PUSH
29562: LD_INT 3
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 1
29571: NEG
29572: PUSH
29573: LD_INT 2
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 3
29582: NEG
29583: PUSH
29584: LD_INT 2
29586: NEG
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29617: LD_ADDR_VAR 0 34
29621: PUSH
29622: LD_INT 0
29624: PUSH
29625: LD_INT 0
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 0
29634: PUSH
29635: LD_INT 1
29637: NEG
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 1
29655: PUSH
29656: LD_INT 1
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: LD_INT 1
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 1
29675: NEG
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: LD_INT 1
29690: NEG
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 1
29698: NEG
29699: PUSH
29700: LD_INT 2
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: LD_INT 2
29713: NEG
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 1
29721: PUSH
29722: LD_INT 1
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 2
29742: PUSH
29743: LD_INT 2
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 1
29752: PUSH
29753: LD_INT 2
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 1
29762: NEG
29763: PUSH
29764: LD_INT 1
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 2
29773: NEG
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 2
29784: NEG
29785: PUSH
29786: LD_INT 1
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 2
29796: NEG
29797: PUSH
29798: LD_INT 2
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PUSH
29810: LD_INT 3
29812: NEG
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 1
29820: PUSH
29821: LD_INT 2
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 3
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 2
29841: PUSH
29842: LD_INT 3
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 2
29851: NEG
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 3
29862: NEG
29863: PUSH
29864: LD_INT 1
29866: NEG
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29897: LD_ADDR_VAR 0 35
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: LD_INT 0
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 0
29914: PUSH
29915: LD_INT 1
29917: NEG
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 1
29935: PUSH
29936: LD_INT 1
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 0
29945: PUSH
29946: LD_INT 1
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: NEG
29956: PUSH
29957: LD_INT 0
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 1
29966: NEG
29967: PUSH
29968: LD_INT 1
29970: NEG
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 2
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 2
29988: NEG
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30009: LD_ADDR_VAR 0 36
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 0
30026: PUSH
30027: LD_INT 1
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 1
30037: PUSH
30038: LD_INT 0
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 1
30047: PUSH
30048: LD_INT 1
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 0
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 1
30067: NEG
30068: PUSH
30069: LD_INT 0
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 1
30078: NEG
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 1
30090: NEG
30091: PUSH
30092: LD_INT 2
30094: NEG
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 1
30102: PUSH
30103: LD_INT 2
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30121: LD_ADDR_VAR 0 37
30125: PUSH
30126: LD_INT 0
30128: PUSH
30129: LD_INT 0
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: LD_INT 1
30141: NEG
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: PUSH
30160: LD_INT 1
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 1
30179: NEG
30180: PUSH
30181: LD_INT 0
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 1
30190: NEG
30191: PUSH
30192: LD_INT 1
30194: NEG
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 1
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 1
30213: NEG
30214: PUSH
30215: LD_INT 1
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30233: LD_ADDR_VAR 0 38
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: LD_INT 0
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 0
30250: PUSH
30251: LD_INT 1
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: LD_INT 0
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: LD_INT 1
30306: NEG
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 2
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 2
30324: NEG
30325: PUSH
30326: LD_INT 1
30328: NEG
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30345: LD_ADDR_VAR 0 39
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: LD_INT 1
30365: NEG
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 1
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: LD_INT 1
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 1
30403: NEG
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: LD_INT 1
30418: NEG
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 1
30426: NEG
30427: PUSH
30428: LD_INT 2
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 1
30438: PUSH
30439: LD_INT 2
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30457: LD_ADDR_VAR 0 40
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: LD_INT 1
30477: NEG
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 1
30485: PUSH
30486: LD_INT 0
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: LD_INT 1
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 1
30515: NEG
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 1
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30569: LD_ADDR_VAR 0 41
30573: PUSH
30574: LD_INT 0
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 0
30586: PUSH
30587: LD_INT 1
30589: NEG
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 1
30597: PUSH
30598: LD_INT 0
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 1
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 0
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 1
30627: NEG
30628: PUSH
30629: LD_INT 0
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 1
30638: NEG
30639: PUSH
30640: LD_INT 1
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: LD_INT 2
30654: NEG
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 1
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 2
30673: PUSH
30674: LD_INT 0
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 2
30693: PUSH
30694: LD_INT 2
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 1
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 1
30713: NEG
30714: PUSH
30715: LD_INT 1
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 2
30724: NEG
30725: PUSH
30726: LD_INT 0
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 2
30735: NEG
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 2
30747: NEG
30748: PUSH
30749: LD_INT 2
30751: NEG
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 2
30759: NEG
30760: PUSH
30761: LD_INT 3
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 2
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 3
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 3
30792: PUSH
30793: LD_INT 1
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 3
30802: PUSH
30803: LD_INT 2
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 3
30812: PUSH
30813: LD_INT 3
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 2
30822: PUSH
30823: LD_INT 3
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 2
30832: NEG
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 3
30843: NEG
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 3
30854: NEG
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 3
30866: NEG
30867: PUSH
30868: LD_INT 2
30870: NEG
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 3
30878: NEG
30879: PUSH
30880: LD_INT 3
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30919: LD_ADDR_VAR 0 42
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 0
30936: PUSH
30937: LD_INT 1
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 0
30967: PUSH
30968: LD_INT 1
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: LD_INT 0
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 1
30988: NEG
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 1
31000: NEG
31001: PUSH
31002: LD_INT 2
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: LD_INT 2
31015: NEG
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: LD_INT 1
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 2
31034: PUSH
31035: LD_INT 1
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 2
31044: PUSH
31045: LD_INT 2
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: LD_INT 2
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: LD_INT 2
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 1
31074: NEG
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 2
31085: NEG
31086: PUSH
31087: LD_INT 1
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 2
31097: NEG
31098: PUSH
31099: LD_INT 2
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 2
31109: NEG
31110: PUSH
31111: LD_INT 3
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 3
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 0
31133: PUSH
31134: LD_INT 3
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: LD_INT 2
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 3
31155: PUSH
31156: LD_INT 2
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 3
31165: PUSH
31166: LD_INT 3
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 2
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: LD_INT 3
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 1
31205: NEG
31206: PUSH
31207: LD_INT 2
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 3
31216: NEG
31217: PUSH
31218: LD_INT 2
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 3
31228: NEG
31229: PUSH
31230: LD_INT 3
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31269: LD_ADDR_VAR 0 43
31273: PUSH
31274: LD_INT 0
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 0
31286: PUSH
31287: LD_INT 1
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 1
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: LD_INT 0
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 1
31338: NEG
31339: PUSH
31340: LD_INT 1
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: NEG
31351: PUSH
31352: LD_INT 2
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: LD_INT 2
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 1
31373: PUSH
31374: LD_INT 1
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: LD_INT 0
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 2
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 0
31414: PUSH
31415: LD_INT 2
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 1
31424: NEG
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 2
31435: NEG
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 2
31446: NEG
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: LD_INT 3
31462: NEG
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: LD_INT 3
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 2
31492: PUSH
31493: LD_INT 1
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 3
31503: PUSH
31504: LD_INT 0
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 3
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: LD_INT 3
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 0
31533: PUSH
31534: LD_INT 3
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 1
31543: NEG
31544: PUSH
31545: LD_INT 2
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 2
31554: NEG
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 3
31565: NEG
31566: PUSH
31567: LD_INT 0
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 3
31576: NEG
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31617: LD_ADDR_VAR 0 44
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: LD_INT 0
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: LD_INT 1
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: LD_INT 0
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: NEG
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: LD_INT 2
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 1
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 2
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 2
31731: PUSH
31732: LD_INT 1
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 1
31751: PUSH
31752: LD_INT 2
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 1
31761: NEG
31762: PUSH
31763: LD_INT 1
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 2
31772: NEG
31773: PUSH
31774: LD_INT 0
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: LD_INT 1
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: LD_INT 2
31799: NEG
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: LD_INT 3
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 2
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 3
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 3
31840: PUSH
31841: LD_INT 1
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 3
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 3
31860: PUSH
31861: LD_INT 3
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: LD_INT 3
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 2
31880: NEG
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 3
31891: NEG
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 3
31902: NEG
31903: PUSH
31904: LD_INT 1
31906: NEG
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 3
31914: NEG
31915: PUSH
31916: LD_INT 2
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 3
31926: NEG
31927: PUSH
31928: LD_INT 3
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31967: LD_ADDR_VAR 0 45
31971: PUSH
31972: LD_INT 0
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: LD_INT 1
31987: NEG
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: LD_INT 1
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 0
32060: PUSH
32061: LD_INT 2
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 1
32071: PUSH
32072: LD_INT 1
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 2
32092: PUSH
32093: LD_INT 2
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 1
32102: PUSH
32103: LD_INT 2
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: LD_INT 2
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: LD_INT 1
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 2
32133: NEG
32134: PUSH
32135: LD_INT 1
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 2
32145: NEG
32146: PUSH
32147: LD_INT 2
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 2
32157: NEG
32158: PUSH
32159: LD_INT 3
32161: NEG
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 1
32169: NEG
32170: PUSH
32171: LD_INT 3
32173: NEG
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: LD_INT 3
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: LD_INT 2
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 3
32203: PUSH
32204: LD_INT 2
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 3
32213: PUSH
32214: LD_INT 3
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 2
32223: PUSH
32224: LD_INT 3
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: LD_INT 3
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: LD_INT 3
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: LD_INT 2
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 3
32264: NEG
32265: PUSH
32266: LD_INT 2
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 3
32276: NEG
32277: PUSH
32278: LD_INT 3
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32317: LD_ADDR_VAR 0 46
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: LD_INT 0
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: LD_INT 1
32337: NEG
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 1
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: LD_INT 1
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 1
32375: NEG
32376: PUSH
32377: LD_INT 0
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: LD_INT 1
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: NEG
32399: PUSH
32400: LD_INT 2
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 0
32410: PUSH
32411: LD_INT 2
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: PUSH
32422: LD_INT 1
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 2
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: LD_INT 2
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: LD_INT 2
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 1
32472: NEG
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 2
32483: NEG
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: NEG
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: LD_INT 3
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: LD_INT 3
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: LD_INT 2
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 2
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 3
32551: PUSH
32552: LD_INT 0
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 3
32561: PUSH
32562: LD_INT 1
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: LD_INT 3
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: LD_INT 3
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 1
32591: NEG
32592: PUSH
32593: LD_INT 2
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 2
32602: NEG
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 3
32613: NEG
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 3
32624: NEG
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32665: LD_ADDR_VAR 0 47
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 0
32682: PUSH
32683: LD_INT 1
32685: NEG
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: LD_INT 0
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: LD_INT 1
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: LD_INT 1
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: NEG
32735: PUSH
32736: LD_INT 1
32738: NEG
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: LD_INT 2
32750: NEG
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: LD_INT 2
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 1
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 2
32780: NEG
32781: PUSH
32782: LD_INT 1
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 2
32792: NEG
32793: PUSH
32794: LD_INT 2
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32816: LD_ADDR_VAR 0 48
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: LD_INT 0
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 0
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 1
32844: PUSH
32845: LD_INT 0
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 1
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 1
32874: NEG
32875: PUSH
32876: LD_INT 0
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 1
32885: NEG
32886: PUSH
32887: LD_INT 1
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 1
32897: NEG
32898: PUSH
32899: LD_INT 2
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: LD_INT 2
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 2
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 2
32941: PUSH
32942: LD_INT 1
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32963: LD_ADDR_VAR 0 49
32967: PUSH
32968: LD_INT 0
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 0
32980: PUSH
32981: LD_INT 1
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: LD_INT 0
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 1
33021: NEG
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: LD_INT 1
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 2
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 2
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 2
33075: PUSH
33076: LD_INT 2
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33107: LD_ADDR_VAR 0 50
33111: PUSH
33112: LD_INT 0
33114: PUSH
33115: LD_INT 0
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: LD_INT 1
33127: NEG
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 1
33145: PUSH
33146: LD_INT 1
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: LD_INT 1
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 1
33165: NEG
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: LD_INT 1
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 2
33188: PUSH
33189: LD_INT 1
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 2
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: LD_INT 2
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: LD_INT 2
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 1
33228: NEG
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33251: LD_ADDR_VAR 0 51
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: LD_INT 0
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: LD_INT 1
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: LD_INT 1
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: LD_INT 1
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 1
33320: NEG
33321: PUSH
33322: LD_INT 1
33324: NEG
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: LD_INT 2
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: LD_INT 2
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 2
33363: NEG
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 2
33374: NEG
33375: PUSH
33376: LD_INT 1
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33398: LD_ADDR_VAR 0 52
33402: PUSH
33403: LD_INT 0
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 0
33415: PUSH
33416: LD_INT 1
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 1
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 1
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 0
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 1
33456: NEG
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 1
33467: NEG
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 1
33479: NEG
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 1
33491: NEG
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 2
33502: NEG
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 2
33513: NEG
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 2
33525: NEG
33526: PUSH
33527: LD_INT 2
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33549: LD_ADDR_VAR 0 53
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: LD_INT 1
33569: NEG
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 1
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 1
33607: NEG
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: LD_INT 1
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 1
33630: NEG
33631: PUSH
33632: LD_INT 2
33634: NEG
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 1
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 2
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 2
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 2
33684: PUSH
33685: LD_INT 2
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: LD_INT 2
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 0
33704: PUSH
33705: LD_INT 2
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 1
33714: NEG
33715: PUSH
33716: LD_INT 1
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 2
33725: NEG
33726: PUSH
33727: LD_INT 0
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 2
33736: NEG
33737: PUSH
33738: LD_INT 1
33740: NEG
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 2
33748: NEG
33749: PUSH
33750: LD_INT 2
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33779: LD_ADDR_VAR 0 54
33783: PUSH
33784: LD_INT 0
33786: PUSH
33787: LD_INT 0
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 0
33796: PUSH
33797: LD_INT 1
33799: NEG
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 1
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 1
33817: PUSH
33818: LD_INT 1
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: LD_INT 1
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: NEG
33838: PUSH
33839: LD_INT 0
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: LD_INT 1
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: NEG
33861: PUSH
33862: LD_INT 2
33864: NEG
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 0
33872: PUSH
33873: LD_INT 2
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 1
33883: PUSH
33884: LD_INT 1
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: LD_INT 0
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 2
33904: PUSH
33905: LD_INT 1
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 2
33914: PUSH
33915: LD_INT 2
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: LD_INT 2
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: LD_INT 2
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: NEG
33945: PUSH
33946: LD_INT 1
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 2
33955: NEG
33956: PUSH
33957: LD_INT 0
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 2
33966: NEG
33967: PUSH
33968: LD_INT 1
33970: NEG
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 2
33978: NEG
33979: PUSH
33980: LD_INT 2
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34009: LD_ADDR_VAR 0 55
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 0
34026: PUSH
34027: LD_INT 1
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: LD_INT 1
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 1
34067: NEG
34068: PUSH
34069: LD_INT 0
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: LD_INT 1
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: NEG
34091: PUSH
34092: LD_INT 2
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: LD_INT 2
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 1
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 2
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 1
34154: PUSH
34155: LD_INT 2
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 0
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: LD_INT 1
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 2
34185: NEG
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 2
34196: NEG
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 2
34208: NEG
34209: PUSH
34210: LD_INT 2
34212: NEG
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34239: LD_ADDR_VAR 0 56
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: LD_INT 1
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 1
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 0
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: NEG
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 1
34308: NEG
34309: PUSH
34310: LD_INT 1
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: NEG
34321: PUSH
34322: LD_INT 2
34324: NEG
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: LD_INT 2
34335: NEG
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 1
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 2
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 1
34384: PUSH
34385: LD_INT 2
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 0
34394: PUSH
34395: LD_INT 2
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 1
34404: NEG
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 2
34415: NEG
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 2
34426: NEG
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 2
34438: NEG
34439: PUSH
34440: LD_INT 2
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34469: LD_ADDR_VAR 0 57
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: LD_INT 0
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 0
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 1
34527: NEG
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: LD_INT 2
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: LD_INT 2
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: LD_INT 1
34576: NEG
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 2
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: LD_INT 2
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: NEG
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 2
34656: NEG
34657: PUSH
34658: LD_INT 1
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 2
34668: NEG
34669: PUSH
34670: LD_INT 2
34672: NEG
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34699: LD_ADDR_VAR 0 58
34703: PUSH
34704: LD_INT 0
34706: PUSH
34707: LD_INT 0
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: LD_INT 1
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: PUSH
34738: LD_INT 1
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: LD_INT 1
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 1
34757: NEG
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 1
34768: NEG
34769: PUSH
34770: LD_INT 1
34772: NEG
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: NEG
34781: PUSH
34782: LD_INT 2
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: LD_INT 2
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: LD_INT 1
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 2
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: LD_INT 1
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 2
34834: PUSH
34835: LD_INT 2
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 1
34844: PUSH
34845: LD_INT 2
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 1
34864: NEG
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 2
34875: NEG
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 2
34886: NEG
34887: PUSH
34888: LD_INT 1
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 2
34898: NEG
34899: PUSH
34900: LD_INT 2
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34929: LD_ADDR_VAR 0 59
34933: PUSH
34934: LD_INT 0
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 0
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 1
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: LD_INT 1
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 1
34987: NEG
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: LD_INT 1
35002: NEG
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35017: LD_ADDR_VAR 0 60
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 1
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 1
35055: PUSH
35056: LD_INT 1
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: NEG
35076: PUSH
35077: LD_INT 0
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 1
35086: NEG
35087: PUSH
35088: LD_INT 1
35090: NEG
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35105: LD_ADDR_VAR 0 61
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 0
35122: PUSH
35123: LD_INT 1
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: LD_INT 1
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: LD_INT 1
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: LD_INT 0
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: NEG
35175: PUSH
35176: LD_INT 1
35178: NEG
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35193: LD_ADDR_VAR 0 62
35197: PUSH
35198: LD_INT 0
35200: PUSH
35201: LD_INT 0
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: LD_INT 1
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: LD_INT 0
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: LD_INT 1
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35281: LD_ADDR_VAR 0 63
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 1
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 1
35350: NEG
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35369: LD_ADDR_VAR 0 64
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: LD_INT 1
35389: NEG
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 1
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 1
35407: PUSH
35408: LD_INT 1
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: LD_INT 1
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: NEG
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: NEG
35439: PUSH
35440: LD_INT 1
35442: NEG
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: ST_TO_ADDR
// end ; 1 :
35457: GO 41354
35459: LD_INT 1
35461: DOUBLE
35462: EQUAL
35463: IFTRUE 35467
35465: GO 38090
35467: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35468: LD_ADDR_VAR 0 11
35472: PUSH
35473: LD_INT 1
35475: NEG
35476: PUSH
35477: LD_INT 3
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 0
35487: PUSH
35488: LD_INT 3
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: PUSH
35499: LD_INT 2
35501: NEG
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: LIST
35511: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35512: LD_ADDR_VAR 0 12
35516: PUSH
35517: LD_INT 2
35519: PUSH
35520: LD_INT 1
35522: NEG
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 3
35530: PUSH
35531: LD_INT 0
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 3
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: LIST
35552: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35553: LD_ADDR_VAR 0 13
35557: PUSH
35558: LD_INT 3
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 3
35570: PUSH
35571: LD_INT 3
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 2
35580: PUSH
35581: LD_INT 3
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: LIST
35592: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35593: LD_ADDR_VAR 0 14
35597: PUSH
35598: LD_INT 1
35600: PUSH
35601: LD_INT 3
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 0
35610: PUSH
35611: LD_INT 3
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 1
35620: NEG
35621: PUSH
35622: LD_INT 2
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: LIST
35633: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35634: LD_ADDR_VAR 0 15
35638: PUSH
35639: LD_INT 2
35641: NEG
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 3
35652: NEG
35653: PUSH
35654: LD_INT 0
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 3
35663: NEG
35664: PUSH
35665: LD_INT 1
35667: NEG
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: LIST
35677: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35678: LD_ADDR_VAR 0 16
35682: PUSH
35683: LD_INT 2
35685: NEG
35686: PUSH
35687: LD_INT 3
35689: NEG
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 3
35697: NEG
35698: PUSH
35699: LD_INT 2
35701: NEG
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 3
35709: NEG
35710: PUSH
35711: LD_INT 3
35713: NEG
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35724: LD_ADDR_VAR 0 17
35728: PUSH
35729: LD_INT 1
35731: NEG
35732: PUSH
35733: LD_INT 3
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: LD_INT 3
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: LD_INT 2
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: LIST
35767: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35768: LD_ADDR_VAR 0 18
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 3
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 3
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35809: LD_ADDR_VAR 0 19
35813: PUSH
35814: LD_INT 3
35816: PUSH
35817: LD_INT 2
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 3
35826: PUSH
35827: LD_INT 3
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 2
35836: PUSH
35837: LD_INT 3
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: LIST
35848: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35849: LD_ADDR_VAR 0 20
35853: PUSH
35854: LD_INT 1
35856: PUSH
35857: LD_INT 3
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: LD_INT 3
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35890: LD_ADDR_VAR 0 21
35894: PUSH
35895: LD_INT 2
35897: NEG
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 3
35908: NEG
35909: PUSH
35910: LD_INT 0
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 3
35919: NEG
35920: PUSH
35921: LD_INT 1
35923: NEG
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: LIST
35933: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35934: LD_ADDR_VAR 0 22
35938: PUSH
35939: LD_INT 2
35941: NEG
35942: PUSH
35943: LD_INT 3
35945: NEG
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 3
35953: NEG
35954: PUSH
35955: LD_INT 2
35957: NEG
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 3
35965: NEG
35966: PUSH
35967: LD_INT 3
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: LIST
35979: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35980: LD_ADDR_VAR 0 23
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: LD_INT 3
35990: NEG
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 1
35998: NEG
35999: PUSH
36000: LD_INT 4
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 1
36010: PUSH
36011: LD_INT 3
36013: NEG
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: LIST
36023: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36024: LD_ADDR_VAR 0 24
36028: PUSH
36029: LD_INT 3
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 3
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 4
36052: PUSH
36053: LD_INT 1
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: LIST
36064: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36065: LD_ADDR_VAR 0 25
36069: PUSH
36070: LD_INT 3
36072: PUSH
36073: LD_INT 3
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 4
36082: PUSH
36083: LD_INT 3
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 3
36092: PUSH
36093: LD_INT 4
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: LIST
36104: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36105: LD_ADDR_VAR 0 26
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: LD_INT 3
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: LD_INT 4
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 1
36132: NEG
36133: PUSH
36134: LD_INT 3
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: LIST
36145: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36146: LD_ADDR_VAR 0 27
36150: PUSH
36151: LD_INT 3
36153: NEG
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 3
36164: NEG
36165: PUSH
36166: LD_INT 1
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 4
36175: NEG
36176: PUSH
36177: LD_INT 1
36179: NEG
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36190: LD_ADDR_VAR 0 28
36194: PUSH
36195: LD_INT 3
36197: NEG
36198: PUSH
36199: LD_INT 3
36201: NEG
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 3
36209: NEG
36210: PUSH
36211: LD_INT 4
36213: NEG
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 4
36221: NEG
36222: PUSH
36223: LD_INT 3
36225: NEG
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: LIST
36235: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36236: LD_ADDR_VAR 0 29
36240: PUSH
36241: LD_INT 1
36243: NEG
36244: PUSH
36245: LD_INT 3
36247: NEG
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: LD_INT 3
36258: NEG
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 1
36266: PUSH
36267: LD_INT 2
36269: NEG
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: LD_INT 4
36281: NEG
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 4
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: LD_INT 3
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: NEG
36312: PUSH
36313: LD_INT 5
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 0
36323: PUSH
36324: LD_INT 5
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: PUSH
36335: LD_INT 4
36337: NEG
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: NEG
36346: PUSH
36347: LD_INT 6
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 6
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: PUSH
36369: LD_INT 5
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36391: LD_ADDR_VAR 0 30
36395: PUSH
36396: LD_INT 2
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 3
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 3
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 3
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 4
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 4
36450: PUSH
36451: LD_INT 1
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 4
36460: PUSH
36461: LD_INT 1
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 5
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 5
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 5
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 6
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 6
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36534: LD_ADDR_VAR 0 31
36538: PUSH
36539: LD_INT 3
36541: PUSH
36542: LD_INT 2
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 3
36551: PUSH
36552: LD_INT 3
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 2
36561: PUSH
36562: LD_INT 3
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 4
36571: PUSH
36572: LD_INT 3
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 4
36581: PUSH
36582: LD_INT 4
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 3
36591: PUSH
36592: LD_INT 4
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 5
36601: PUSH
36602: LD_INT 4
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 5
36611: PUSH
36612: LD_INT 5
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 4
36621: PUSH
36622: LD_INT 5
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 6
36631: PUSH
36632: LD_INT 5
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 6
36641: PUSH
36642: LD_INT 6
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 5
36651: PUSH
36652: LD_INT 6
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36673: LD_ADDR_VAR 0 32
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: LD_INT 3
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: LD_INT 3
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: LD_INT 2
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: LD_INT 4
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: LD_INT 4
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: NEG
36732: PUSH
36733: LD_INT 3
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: LD_INT 5
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: LD_INT 5
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: NEG
36763: PUSH
36764: LD_INT 4
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: PUSH
36774: LD_INT 6
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: LD_INT 6
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: LD_INT 5
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36816: LD_ADDR_VAR 0 33
36820: PUSH
36821: LD_INT 2
36823: NEG
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 3
36834: NEG
36835: PUSH
36836: LD_INT 0
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 3
36845: NEG
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 3
36857: NEG
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 4
36868: NEG
36869: PUSH
36870: LD_INT 0
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 4
36879: NEG
36880: PUSH
36881: LD_INT 1
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 4
36891: NEG
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 5
36902: NEG
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 5
36913: NEG
36914: PUSH
36915: LD_INT 1
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 5
36925: NEG
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 6
36936: NEG
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 6
36947: NEG
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36971: LD_ADDR_VAR 0 34
36975: PUSH
36976: LD_INT 2
36978: NEG
36979: PUSH
36980: LD_INT 3
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 3
36990: NEG
36991: PUSH
36992: LD_INT 2
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 3
37002: NEG
37003: PUSH
37004: LD_INT 3
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 3
37014: NEG
37015: PUSH
37016: LD_INT 4
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 4
37026: NEG
37027: PUSH
37028: LD_INT 3
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 4
37038: NEG
37039: PUSH
37040: LD_INT 4
37042: NEG
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 4
37050: NEG
37051: PUSH
37052: LD_INT 5
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 5
37062: NEG
37063: PUSH
37064: LD_INT 4
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 5
37074: NEG
37075: PUSH
37076: LD_INT 5
37078: NEG
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 5
37086: NEG
37087: PUSH
37088: LD_INT 6
37090: NEG
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 6
37098: NEG
37099: PUSH
37100: LD_INT 5
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 6
37110: NEG
37111: PUSH
37112: LD_INT 6
37114: NEG
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37134: LD_ADDR_VAR 0 41
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: LD_INT 2
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: NEG
37153: PUSH
37154: LD_INT 3
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: LD_INT 2
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37178: LD_ADDR_VAR 0 42
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: LD_INT 1
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 3
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: LIST
37218: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37219: LD_ADDR_VAR 0 43
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: LD_INT 2
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 3
37236: PUSH
37237: LD_INT 2
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 2
37246: PUSH
37247: LD_INT 3
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: LIST
37258: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37259: LD_ADDR_VAR 0 44
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 2
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: LD_INT 3
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 1
37286: NEG
37287: PUSH
37288: LD_INT 2
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: LIST
37299: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37300: LD_ADDR_VAR 0 45
37304: PUSH
37305: LD_INT 2
37307: NEG
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 2
37318: NEG
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 3
37329: NEG
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: LIST
37343: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37344: LD_ADDR_VAR 0 46
37348: PUSH
37349: LD_INT 2
37351: NEG
37352: PUSH
37353: LD_INT 2
37355: NEG
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 2
37363: NEG
37364: PUSH
37365: LD_INT 3
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 3
37375: NEG
37376: PUSH
37377: LD_INT 2
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37390: LD_ADDR_VAR 0 47
37394: PUSH
37395: LD_INT 2
37397: NEG
37398: PUSH
37399: LD_INT 3
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: LD_INT 3
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37423: LD_ADDR_VAR 0 48
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: LD_INT 2
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 2
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37454: LD_ADDR_VAR 0 49
37458: PUSH
37459: LD_INT 3
37461: PUSH
37462: LD_INT 1
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 3
37471: PUSH
37472: LD_INT 2
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37483: LD_ADDR_VAR 0 50
37487: PUSH
37488: LD_INT 2
37490: PUSH
37491: LD_INT 3
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: LD_INT 3
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37512: LD_ADDR_VAR 0 51
37516: PUSH
37517: LD_INT 1
37519: NEG
37520: PUSH
37521: LD_INT 2
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 2
37530: NEG
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37543: LD_ADDR_VAR 0 52
37547: PUSH
37548: LD_INT 3
37550: NEG
37551: PUSH
37552: LD_INT 1
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 3
37562: NEG
37563: PUSH
37564: LD_INT 2
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37576: LD_ADDR_VAR 0 53
37580: PUSH
37581: LD_INT 1
37583: NEG
37584: PUSH
37585: LD_INT 3
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: LD_INT 3
37598: NEG
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: LIST
37619: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37620: LD_ADDR_VAR 0 54
37624: PUSH
37625: LD_INT 2
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 3
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 3
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: LIST
37660: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37661: LD_ADDR_VAR 0 55
37665: PUSH
37666: LD_INT 3
37668: PUSH
37669: LD_INT 2
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 3
37678: PUSH
37679: LD_INT 3
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 2
37688: PUSH
37689: LD_INT 3
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: LIST
37700: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37701: LD_ADDR_VAR 0 56
37705: PUSH
37706: LD_INT 1
37708: PUSH
37709: LD_INT 3
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 0
37718: PUSH
37719: LD_INT 3
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37742: LD_ADDR_VAR 0 57
37746: PUSH
37747: LD_INT 2
37749: NEG
37750: PUSH
37751: LD_INT 1
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 3
37760: NEG
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 3
37771: NEG
37772: PUSH
37773: LD_INT 1
37775: NEG
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: LIST
37785: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37786: LD_ADDR_VAR 0 58
37790: PUSH
37791: LD_INT 2
37793: NEG
37794: PUSH
37795: LD_INT 3
37797: NEG
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 3
37805: NEG
37806: PUSH
37807: LD_INT 2
37809: NEG
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 3
37817: NEG
37818: PUSH
37819: LD_INT 3
37821: NEG
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: LIST
37831: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37832: LD_ADDR_VAR 0 59
37836: PUSH
37837: LD_INT 1
37839: NEG
37840: PUSH
37841: LD_INT 2
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: LD_INT 2
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: LIST
37875: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37876: LD_ADDR_VAR 0 60
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 2
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: LIST
37916: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37917: LD_ADDR_VAR 0 61
37921: PUSH
37922: LD_INT 2
37924: PUSH
37925: LD_INT 1
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 2
37934: PUSH
37935: LD_INT 2
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: LD_INT 2
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: LIST
37956: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37957: LD_ADDR_VAR 0 62
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: LD_INT 2
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: LD_INT 2
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: NEG
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: LIST
37997: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37998: LD_ADDR_VAR 0 63
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 2
38016: NEG
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 2
38027: NEG
38028: PUSH
38029: LD_INT 1
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: LIST
38041: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38042: LD_ADDR_VAR 0 64
38046: PUSH
38047: LD_INT 1
38049: NEG
38050: PUSH
38051: LD_INT 2
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 2
38061: NEG
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 2
38073: NEG
38074: PUSH
38075: LD_INT 2
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: LIST
38087: ST_TO_ADDR
// end ; 2 :
38088: GO 41354
38090: LD_INT 2
38092: DOUBLE
38093: EQUAL
38094: IFTRUE 38098
38096: GO 41353
38098: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38099: LD_ADDR_VAR 0 29
38103: PUSH
38104: LD_INT 4
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 4
38116: PUSH
38117: LD_INT 1
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 5
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 5
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 4
38147: PUSH
38148: LD_INT 1
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 3
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 3
38167: PUSH
38168: LD_INT 1
38170: NEG
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 3
38178: PUSH
38179: LD_INT 2
38181: NEG
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 5
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 3
38199: PUSH
38200: LD_INT 3
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 3
38209: PUSH
38210: LD_INT 2
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 4
38219: PUSH
38220: LD_INT 3
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 4
38229: PUSH
38230: LD_INT 4
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 3
38239: PUSH
38240: LD_INT 4
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 2
38249: PUSH
38250: LD_INT 3
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 2
38259: PUSH
38260: LD_INT 2
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 4
38269: PUSH
38270: LD_INT 2
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 2
38279: PUSH
38280: LD_INT 4
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: LD_INT 4
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: LD_INT 3
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 4
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: LD_INT 5
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: LD_INT 5
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: LD_INT 4
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: LD_INT 3
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 2
38361: PUSH
38362: LD_INT 5
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 2
38371: NEG
38372: PUSH
38373: LD_INT 3
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 3
38382: NEG
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 3
38393: NEG
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 2
38405: NEG
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 2
38416: NEG
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 3
38427: NEG
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 4
38438: NEG
38439: PUSH
38440: LD_INT 0
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 4
38449: NEG
38450: PUSH
38451: LD_INT 1
38453: NEG
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 4
38461: NEG
38462: PUSH
38463: LD_INT 2
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: LD_INT 2
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 4
38484: NEG
38485: PUSH
38486: LD_INT 4
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 4
38496: NEG
38497: PUSH
38498: LD_INT 5
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 3
38508: NEG
38509: PUSH
38510: LD_INT 4
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 3
38520: NEG
38521: PUSH
38522: LD_INT 3
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 4
38532: NEG
38533: PUSH
38534: LD_INT 3
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 5
38544: NEG
38545: PUSH
38546: LD_INT 4
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 5
38556: NEG
38557: PUSH
38558: LD_INT 5
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 3
38568: NEG
38569: PUSH
38570: LD_INT 5
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 5
38580: NEG
38581: PUSH
38582: LD_INT 3
38584: NEG
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38637: LD_ADDR_VAR 0 30
38641: PUSH
38642: LD_INT 4
38644: PUSH
38645: LD_INT 4
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 4
38654: PUSH
38655: LD_INT 3
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 5
38664: PUSH
38665: LD_INT 4
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 5
38674: PUSH
38675: LD_INT 5
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 4
38684: PUSH
38685: LD_INT 5
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 3
38694: PUSH
38695: LD_INT 4
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 3
38704: PUSH
38705: LD_INT 3
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 5
38714: PUSH
38715: LD_INT 3
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: LD_INT 5
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: LD_INT 3
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: LD_INT 2
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: LD_INT 3
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 1
38764: PUSH
38765: LD_INT 4
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: LD_INT 4
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 1
38784: NEG
38785: PUSH
38786: LD_INT 3
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: NEG
38796: PUSH
38797: LD_INT 2
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: LD_INT 4
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 2
38816: NEG
38817: PUSH
38818: LD_INT 2
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 4
38827: NEG
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 4
38838: NEG
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 3
38850: NEG
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 3
38861: NEG
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 4
38872: NEG
38873: PUSH
38874: LD_INT 1
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 5
38883: NEG
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 5
38894: NEG
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 5
38906: NEG
38907: PUSH
38908: LD_INT 2
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 3
38918: NEG
38919: PUSH
38920: LD_INT 2
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 3
38929: NEG
38930: PUSH
38931: LD_INT 3
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 3
38941: NEG
38942: PUSH
38943: LD_INT 4
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 2
38953: NEG
38954: PUSH
38955: LD_INT 3
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 2
38965: NEG
38966: PUSH
38967: LD_INT 2
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 3
38977: NEG
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 4
38989: NEG
38990: PUSH
38991: LD_INT 3
38993: NEG
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 4
39001: NEG
39002: PUSH
39003: LD_INT 4
39005: NEG
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: NEG
39014: PUSH
39015: LD_INT 4
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 4
39025: NEG
39026: PUSH
39027: LD_INT 2
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: LD_INT 4
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: LD_INT 5
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: LD_INT 4
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: LD_INT 3
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: LD_INT 3
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: LD_INT 4
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: LD_INT 5
39108: NEG
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 2
39116: PUSH
39117: LD_INT 3
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 2
39127: NEG
39128: PUSH
39129: LD_INT 5
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39184: LD_ADDR_VAR 0 31
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: LD_INT 4
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: LD_INT 3
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: LD_INT 4
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: LD_INT 5
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 5
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 1
39241: NEG
39242: PUSH
39243: LD_INT 4
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: LD_INT 3
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 2
39263: PUSH
39264: LD_INT 5
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 2
39273: NEG
39274: PUSH
39275: LD_INT 3
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 3
39284: NEG
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 3
39295: NEG
39296: PUSH
39297: LD_INT 1
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 2
39307: NEG
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: NEG
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 3
39329: NEG
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 4
39340: NEG
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 4
39351: NEG
39352: PUSH
39353: LD_INT 1
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 4
39363: NEG
39364: PUSH
39365: LD_INT 2
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: NEG
39376: PUSH
39377: LD_INT 2
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 4
39386: NEG
39387: PUSH
39388: LD_INT 4
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 4
39398: NEG
39399: PUSH
39400: LD_INT 5
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 3
39410: NEG
39411: PUSH
39412: LD_INT 4
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 3
39422: NEG
39423: PUSH
39424: LD_INT 3
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 4
39434: NEG
39435: PUSH
39436: LD_INT 3
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 5
39446: NEG
39447: PUSH
39448: LD_INT 4
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 5
39458: NEG
39459: PUSH
39460: LD_INT 5
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 3
39470: NEG
39471: PUSH
39472: LD_INT 5
39474: NEG
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 5
39482: NEG
39483: PUSH
39484: LD_INT 3
39486: NEG
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: LD_INT 3
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: LD_INT 4
39508: NEG
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: LD_INT 3
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: LD_INT 2
39530: NEG
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: LD_INT 2
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: LD_INT 3
39553: NEG
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 1
39561: NEG
39562: PUSH
39563: LD_INT 4
39565: NEG
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 2
39573: PUSH
39574: LD_INT 2
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 2
39584: NEG
39585: PUSH
39586: LD_INT 4
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 4
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 4
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 5
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 5
39627: PUSH
39628: LD_INT 1
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 4
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 3
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 3
39657: PUSH
39658: LD_INT 1
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 3
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 5
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39734: LD_ADDR_VAR 0 32
39738: PUSH
39739: LD_INT 4
39741: NEG
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 4
39752: NEG
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 3
39764: NEG
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 3
39775: NEG
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 4
39786: NEG
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 5
39797: NEG
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 5
39808: NEG
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 5
39820: NEG
39821: PUSH
39822: LD_INT 2
39824: NEG
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 3
39832: NEG
39833: PUSH
39834: LD_INT 2
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 3
39843: NEG
39844: PUSH
39845: LD_INT 3
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 3
39855: NEG
39856: PUSH
39857: LD_INT 4
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 2
39867: NEG
39868: PUSH
39869: LD_INT 3
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 2
39879: NEG
39880: PUSH
39881: LD_INT 2
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 3
39891: NEG
39892: PUSH
39893: LD_INT 2
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 4
39903: NEG
39904: PUSH
39905: LD_INT 3
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 4
39915: NEG
39916: PUSH
39917: LD_INT 4
39919: NEG
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: LD_INT 4
39931: NEG
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 4
39939: NEG
39940: PUSH
39941: LD_INT 2
39943: NEG
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: LD_INT 4
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: LD_INT 5
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: LD_INT 4
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: LD_INT 3
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: LD_INT 3
39998: NEG
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 1
40006: NEG
40007: PUSH
40008: LD_INT 4
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: LD_INT 5
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: LD_INT 3
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 2
40041: NEG
40042: PUSH
40043: LD_INT 5
40045: NEG
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 3
40053: PUSH
40054: LD_INT 0
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 3
40063: PUSH
40064: LD_INT 1
40066: NEG
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 4
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 4
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 3
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: LD_INT 2
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 4
40136: PUSH
40137: LD_INT 2
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 4
40146: PUSH
40147: LD_INT 4
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 4
40156: PUSH
40157: LD_INT 3
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 5
40166: PUSH
40167: LD_INT 4
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 5
40176: PUSH
40177: LD_INT 5
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 4
40186: PUSH
40187: LD_INT 5
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 3
40196: PUSH
40197: LD_INT 4
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 3
40206: PUSH
40207: LD_INT 3
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 5
40216: PUSH
40217: LD_INT 3
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 3
40226: PUSH
40227: LD_INT 5
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40281: LD_ADDR_VAR 0 33
40285: PUSH
40286: LD_INT 4
40288: NEG
40289: PUSH
40290: LD_INT 4
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 4
40300: NEG
40301: PUSH
40302: LD_INT 5
40304: NEG
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 3
40312: NEG
40313: PUSH
40314: LD_INT 4
40316: NEG
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 3
40324: NEG
40325: PUSH
40326: LD_INT 3
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 4
40336: NEG
40337: PUSH
40338: LD_INT 3
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 5
40348: NEG
40349: PUSH
40350: LD_INT 4
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 5
40360: NEG
40361: PUSH
40362: LD_INT 5
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 3
40372: NEG
40373: PUSH
40374: LD_INT 5
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 5
40384: NEG
40385: PUSH
40386: LD_INT 3
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: LD_INT 3
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: LD_INT 4
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: LD_INT 3
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: LD_INT 2
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: LD_INT 2
40443: NEG
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: LD_INT 3
40455: NEG
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: LD_INT 4
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: LD_INT 2
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 2
40486: NEG
40487: PUSH
40488: LD_INT 4
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 4
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 4
40508: PUSH
40509: LD_INT 1
40511: NEG
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 5
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 5
40529: PUSH
40530: LD_INT 1
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 4
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 3
40549: PUSH
40550: LD_INT 0
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 3
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 3
40570: PUSH
40571: LD_INT 2
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 5
40581: PUSH
40582: LD_INT 2
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 3
40591: PUSH
40592: LD_INT 3
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 3
40601: PUSH
40602: LD_INT 2
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 4
40611: PUSH
40612: LD_INT 3
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 4
40621: PUSH
40622: LD_INT 4
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 3
40631: PUSH
40632: LD_INT 4
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: LD_INT 3
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 2
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 4
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 2
40671: PUSH
40672: LD_INT 4
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: LD_INT 4
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: LD_INT 3
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 1
40701: PUSH
40702: LD_INT 4
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: LD_INT 5
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 5
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: LD_INT 4
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: LD_INT 3
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 2
40753: PUSH
40754: LD_INT 5
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 2
40763: NEG
40764: PUSH
40765: LD_INT 3
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40819: LD_ADDR_VAR 0 34
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: LD_INT 4
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: LD_INT 5
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: LD_INT 4
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: PUSH
40860: LD_INT 3
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: LD_INT 3
40873: NEG
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: LD_INT 4
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: PUSH
40895: LD_INT 5
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 2
40905: PUSH
40906: LD_INT 3
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: LD_INT 5
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 3
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 3
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 4
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 4
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 3
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 2
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 2
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 2
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 4
41011: PUSH
41012: LD_INT 2
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 4
41021: PUSH
41022: LD_INT 4
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 4
41031: PUSH
41032: LD_INT 3
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 5
41041: PUSH
41042: LD_INT 4
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 5
41051: PUSH
41052: LD_INT 5
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 4
41061: PUSH
41062: LD_INT 5
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 3
41071: PUSH
41072: LD_INT 4
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 3
41081: PUSH
41082: LD_INT 3
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 5
41091: PUSH
41092: LD_INT 3
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 3
41101: PUSH
41102: LD_INT 5
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: LD_INT 3
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: LD_INT 3
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: LD_INT 4
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: LD_INT 4
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: LD_INT 3
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 2
41183: PUSH
41184: LD_INT 4
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: NEG
41194: PUSH
41195: LD_INT 2
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 4
41204: NEG
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 4
41215: NEG
41216: PUSH
41217: LD_INT 1
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 3
41227: NEG
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 3
41238: NEG
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 4
41249: NEG
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 5
41260: NEG
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 5
41271: NEG
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 5
41283: NEG
41284: PUSH
41285: LD_INT 2
41287: NEG
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 3
41295: NEG
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: ST_TO_ADDR
// end ; end ;
41351: GO 41354
41353: POP
// case btype of b_depot , b_warehouse :
41354: LD_VAR 0 1
41358: PUSH
41359: LD_INT 0
41361: DOUBLE
41362: EQUAL
41363: IFTRUE 41373
41365: LD_INT 1
41367: DOUBLE
41368: EQUAL
41369: IFTRUE 41373
41371: GO 41574
41373: POP
// case nation of nation_american :
41374: LD_VAR 0 5
41378: PUSH
41379: LD_INT 1
41381: DOUBLE
41382: EQUAL
41383: IFTRUE 41387
41385: GO 41443
41387: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
41388: LD_ADDR_VAR 0 9
41392: PUSH
41393: LD_VAR 0 11
41397: PUSH
41398: LD_VAR 0 12
41402: PUSH
41403: LD_VAR 0 13
41407: PUSH
41408: LD_VAR 0 14
41412: PUSH
41413: LD_VAR 0 15
41417: PUSH
41418: LD_VAR 0 16
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: PUSH
41431: LD_VAR 0 4
41435: PUSH
41436: LD_INT 1
41438: PLUS
41439: ARRAY
41440: ST_TO_ADDR
41441: GO 41572
41443: LD_INT 2
41445: DOUBLE
41446: EQUAL
41447: IFTRUE 41451
41449: GO 41507
41451: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
41452: LD_ADDR_VAR 0 9
41456: PUSH
41457: LD_VAR 0 17
41461: PUSH
41462: LD_VAR 0 18
41466: PUSH
41467: LD_VAR 0 19
41471: PUSH
41472: LD_VAR 0 20
41476: PUSH
41477: LD_VAR 0 21
41481: PUSH
41482: LD_VAR 0 22
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: PUSH
41495: LD_VAR 0 4
41499: PUSH
41500: LD_INT 1
41502: PLUS
41503: ARRAY
41504: ST_TO_ADDR
41505: GO 41572
41507: LD_INT 3
41509: DOUBLE
41510: EQUAL
41511: IFTRUE 41515
41513: GO 41571
41515: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41516: LD_ADDR_VAR 0 9
41520: PUSH
41521: LD_VAR 0 23
41525: PUSH
41526: LD_VAR 0 24
41530: PUSH
41531: LD_VAR 0 25
41535: PUSH
41536: LD_VAR 0 26
41540: PUSH
41541: LD_VAR 0 27
41545: PUSH
41546: LD_VAR 0 28
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: PUSH
41559: LD_VAR 0 4
41563: PUSH
41564: LD_INT 1
41566: PLUS
41567: ARRAY
41568: ST_TO_ADDR
41569: GO 41572
41571: POP
41572: GO 42121
41574: LD_INT 2
41576: DOUBLE
41577: EQUAL
41578: IFTRUE 41588
41580: LD_INT 3
41582: DOUBLE
41583: EQUAL
41584: IFTRUE 41588
41586: GO 41644
41588: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41589: LD_ADDR_VAR 0 9
41593: PUSH
41594: LD_VAR 0 29
41598: PUSH
41599: LD_VAR 0 30
41603: PUSH
41604: LD_VAR 0 31
41608: PUSH
41609: LD_VAR 0 32
41613: PUSH
41614: LD_VAR 0 33
41618: PUSH
41619: LD_VAR 0 34
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: PUSH
41632: LD_VAR 0 4
41636: PUSH
41637: LD_INT 1
41639: PLUS
41640: ARRAY
41641: ST_TO_ADDR
41642: GO 42121
41644: LD_INT 16
41646: DOUBLE
41647: EQUAL
41648: IFTRUE 41700
41650: LD_INT 17
41652: DOUBLE
41653: EQUAL
41654: IFTRUE 41700
41656: LD_INT 18
41658: DOUBLE
41659: EQUAL
41660: IFTRUE 41700
41662: LD_INT 19
41664: DOUBLE
41665: EQUAL
41666: IFTRUE 41700
41668: LD_INT 20
41670: DOUBLE
41671: EQUAL
41672: IFTRUE 41700
41674: LD_INT 21
41676: DOUBLE
41677: EQUAL
41678: IFTRUE 41700
41680: LD_INT 23
41682: DOUBLE
41683: EQUAL
41684: IFTRUE 41700
41686: LD_INT 24
41688: DOUBLE
41689: EQUAL
41690: IFTRUE 41700
41692: LD_INT 25
41694: DOUBLE
41695: EQUAL
41696: IFTRUE 41700
41698: GO 41756
41700: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41701: LD_ADDR_VAR 0 9
41705: PUSH
41706: LD_VAR 0 35
41710: PUSH
41711: LD_VAR 0 36
41715: PUSH
41716: LD_VAR 0 37
41720: PUSH
41721: LD_VAR 0 38
41725: PUSH
41726: LD_VAR 0 39
41730: PUSH
41731: LD_VAR 0 40
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: PUSH
41744: LD_VAR 0 4
41748: PUSH
41749: LD_INT 1
41751: PLUS
41752: ARRAY
41753: ST_TO_ADDR
41754: GO 42121
41756: LD_INT 6
41758: DOUBLE
41759: EQUAL
41760: IFTRUE 41812
41762: LD_INT 7
41764: DOUBLE
41765: EQUAL
41766: IFTRUE 41812
41768: LD_INT 8
41770: DOUBLE
41771: EQUAL
41772: IFTRUE 41812
41774: LD_INT 13
41776: DOUBLE
41777: EQUAL
41778: IFTRUE 41812
41780: LD_INT 12
41782: DOUBLE
41783: EQUAL
41784: IFTRUE 41812
41786: LD_INT 15
41788: DOUBLE
41789: EQUAL
41790: IFTRUE 41812
41792: LD_INT 11
41794: DOUBLE
41795: EQUAL
41796: IFTRUE 41812
41798: LD_INT 14
41800: DOUBLE
41801: EQUAL
41802: IFTRUE 41812
41804: LD_INT 10
41806: DOUBLE
41807: EQUAL
41808: IFTRUE 41812
41810: GO 41868
41812: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
41813: LD_ADDR_VAR 0 9
41817: PUSH
41818: LD_VAR 0 41
41822: PUSH
41823: LD_VAR 0 42
41827: PUSH
41828: LD_VAR 0 43
41832: PUSH
41833: LD_VAR 0 44
41837: PUSH
41838: LD_VAR 0 45
41842: PUSH
41843: LD_VAR 0 46
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: PUSH
41856: LD_VAR 0 4
41860: PUSH
41861: LD_INT 1
41863: PLUS
41864: ARRAY
41865: ST_TO_ADDR
41866: GO 42121
41868: LD_INT 36
41870: DOUBLE
41871: EQUAL
41872: IFTRUE 41876
41874: GO 41932
41876: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41877: LD_ADDR_VAR 0 9
41881: PUSH
41882: LD_VAR 0 47
41886: PUSH
41887: LD_VAR 0 48
41891: PUSH
41892: LD_VAR 0 49
41896: PUSH
41897: LD_VAR 0 50
41901: PUSH
41902: LD_VAR 0 51
41906: PUSH
41907: LD_VAR 0 52
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: PUSH
41920: LD_VAR 0 4
41924: PUSH
41925: LD_INT 1
41927: PLUS
41928: ARRAY
41929: ST_TO_ADDR
41930: GO 42121
41932: LD_INT 4
41934: DOUBLE
41935: EQUAL
41936: IFTRUE 41958
41938: LD_INT 5
41940: DOUBLE
41941: EQUAL
41942: IFTRUE 41958
41944: LD_INT 34
41946: DOUBLE
41947: EQUAL
41948: IFTRUE 41958
41950: LD_INT 37
41952: DOUBLE
41953: EQUAL
41954: IFTRUE 41958
41956: GO 42014
41958: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41959: LD_ADDR_VAR 0 9
41963: PUSH
41964: LD_VAR 0 53
41968: PUSH
41969: LD_VAR 0 54
41973: PUSH
41974: LD_VAR 0 55
41978: PUSH
41979: LD_VAR 0 56
41983: PUSH
41984: LD_VAR 0 57
41988: PUSH
41989: LD_VAR 0 58
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: PUSH
42002: LD_VAR 0 4
42006: PUSH
42007: LD_INT 1
42009: PLUS
42010: ARRAY
42011: ST_TO_ADDR
42012: GO 42121
42014: LD_INT 31
42016: DOUBLE
42017: EQUAL
42018: IFTRUE 42064
42020: LD_INT 32
42022: DOUBLE
42023: EQUAL
42024: IFTRUE 42064
42026: LD_INT 33
42028: DOUBLE
42029: EQUAL
42030: IFTRUE 42064
42032: LD_INT 27
42034: DOUBLE
42035: EQUAL
42036: IFTRUE 42064
42038: LD_INT 26
42040: DOUBLE
42041: EQUAL
42042: IFTRUE 42064
42044: LD_INT 28
42046: DOUBLE
42047: EQUAL
42048: IFTRUE 42064
42050: LD_INT 29
42052: DOUBLE
42053: EQUAL
42054: IFTRUE 42064
42056: LD_INT 30
42058: DOUBLE
42059: EQUAL
42060: IFTRUE 42064
42062: GO 42120
42064: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
42065: LD_ADDR_VAR 0 9
42069: PUSH
42070: LD_VAR 0 59
42074: PUSH
42075: LD_VAR 0 60
42079: PUSH
42080: LD_VAR 0 61
42084: PUSH
42085: LD_VAR 0 62
42089: PUSH
42090: LD_VAR 0 63
42094: PUSH
42095: LD_VAR 0 64
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: PUSH
42108: LD_VAR 0 4
42112: PUSH
42113: LD_INT 1
42115: PLUS
42116: ARRAY
42117: ST_TO_ADDR
42118: GO 42121
42120: POP
// temp_list2 = [ ] ;
42121: LD_ADDR_VAR 0 10
42125: PUSH
42126: EMPTY
42127: ST_TO_ADDR
// for i in temp_list do
42128: LD_ADDR_VAR 0 8
42132: PUSH
42133: LD_VAR 0 9
42137: PUSH
42138: FOR_IN
42139: IFFALSE 42191
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42141: LD_ADDR_VAR 0 10
42145: PUSH
42146: LD_VAR 0 10
42150: PUSH
42151: LD_VAR 0 8
42155: PUSH
42156: LD_INT 1
42158: ARRAY
42159: PUSH
42160: LD_VAR 0 2
42164: PLUS
42165: PUSH
42166: LD_VAR 0 8
42170: PUSH
42171: LD_INT 2
42173: ARRAY
42174: PUSH
42175: LD_VAR 0 3
42179: PLUS
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: EMPTY
42186: LIST
42187: ADD
42188: ST_TO_ADDR
42189: GO 42138
42191: POP
42192: POP
// result = temp_list2 ;
42193: LD_ADDR_VAR 0 7
42197: PUSH
42198: LD_VAR 0 10
42202: ST_TO_ADDR
// end ;
42203: LD_VAR 0 7
42207: RET
// export function EnemyInRange ( unit , dist ) ; begin
42208: LD_INT 0
42210: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42211: LD_ADDR_VAR 0 3
42215: PUSH
42216: LD_VAR 0 1
42220: PPUSH
42221: CALL_OW 255
42225: PPUSH
42226: LD_VAR 0 1
42230: PPUSH
42231: CALL_OW 250
42235: PPUSH
42236: LD_VAR 0 1
42240: PPUSH
42241: CALL_OW 251
42245: PPUSH
42246: LD_VAR 0 2
42250: PPUSH
42251: CALL 16875 0 4
42255: PUSH
42256: LD_INT 4
42258: ARRAY
42259: ST_TO_ADDR
// end ;
42260: LD_VAR 0 3
42264: RET
// export function PlayerSeeMe ( unit ) ; begin
42265: LD_INT 0
42267: PPUSH
// result := See ( your_side , unit ) ;
42268: LD_ADDR_VAR 0 2
42272: PUSH
42273: LD_OWVAR 2
42277: PPUSH
42278: LD_VAR 0 1
42282: PPUSH
42283: CALL_OW 292
42287: ST_TO_ADDR
// end ;
42288: LD_VAR 0 2
42292: RET
// export function ReverseDir ( unit ) ; begin
42293: LD_INT 0
42295: PPUSH
// if not unit then
42296: LD_VAR 0 1
42300: NOT
42301: IFFALSE 42305
// exit ;
42303: GO 42351
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
42305: LD_ADDR_VAR 0 2
42309: PUSH
42310: LD_INT 3
42312: PUSH
42313: LD_INT 4
42315: PUSH
42316: LD_INT 5
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 2
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: PUSH
42336: LD_VAR 0 1
42340: PPUSH
42341: CALL_OW 254
42345: PUSH
42346: LD_INT 1
42348: PLUS
42349: ARRAY
42350: ST_TO_ADDR
// end ;
42351: LD_VAR 0 2
42355: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
42356: LD_INT 0
42358: PPUSH
42359: PPUSH
42360: PPUSH
42361: PPUSH
42362: PPUSH
// if not hexes then
42363: LD_VAR 0 2
42367: NOT
42368: IFFALSE 42372
// exit ;
42370: GO 42520
// dist := 9999 ;
42372: LD_ADDR_VAR 0 5
42376: PUSH
42377: LD_INT 9999
42379: ST_TO_ADDR
// for i = 1 to hexes do
42380: LD_ADDR_VAR 0 4
42384: PUSH
42385: DOUBLE
42386: LD_INT 1
42388: DEC
42389: ST_TO_ADDR
42390: LD_VAR 0 2
42394: PUSH
42395: FOR_TO
42396: IFFALSE 42508
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
42398: LD_VAR 0 1
42402: PPUSH
42403: LD_VAR 0 2
42407: PUSH
42408: LD_VAR 0 4
42412: ARRAY
42413: PUSH
42414: LD_INT 1
42416: ARRAY
42417: PPUSH
42418: LD_VAR 0 2
42422: PUSH
42423: LD_VAR 0 4
42427: ARRAY
42428: PUSH
42429: LD_INT 2
42431: ARRAY
42432: PPUSH
42433: CALL_OW 297
42437: PUSH
42438: LD_VAR 0 5
42442: LESS
42443: IFFALSE 42506
// begin hex := hexes [ i ] ;
42445: LD_ADDR_VAR 0 7
42449: PUSH
42450: LD_VAR 0 2
42454: PUSH
42455: LD_VAR 0 4
42459: ARRAY
42460: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42461: LD_ADDR_VAR 0 5
42465: PUSH
42466: LD_VAR 0 1
42470: PPUSH
42471: LD_VAR 0 2
42475: PUSH
42476: LD_VAR 0 4
42480: ARRAY
42481: PUSH
42482: LD_INT 1
42484: ARRAY
42485: PPUSH
42486: LD_VAR 0 2
42490: PUSH
42491: LD_VAR 0 4
42495: ARRAY
42496: PUSH
42497: LD_INT 2
42499: ARRAY
42500: PPUSH
42501: CALL_OW 297
42505: ST_TO_ADDR
// end ; end ;
42506: GO 42395
42508: POP
42509: POP
// result := hex ;
42510: LD_ADDR_VAR 0 3
42514: PUSH
42515: LD_VAR 0 7
42519: ST_TO_ADDR
// end ;
42520: LD_VAR 0 3
42524: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42525: LD_INT 0
42527: PPUSH
42528: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42529: LD_VAR 0 1
42533: NOT
42534: PUSH
42535: LD_VAR 0 1
42539: PUSH
42540: LD_INT 21
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 23
42552: PUSH
42553: LD_INT 2
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PPUSH
42564: CALL_OW 69
42568: IN
42569: NOT
42570: OR
42571: IFFALSE 42575
// exit ;
42573: GO 42622
// for i = 1 to 3 do
42575: LD_ADDR_VAR 0 3
42579: PUSH
42580: DOUBLE
42581: LD_INT 1
42583: DEC
42584: ST_TO_ADDR
42585: LD_INT 3
42587: PUSH
42588: FOR_TO
42589: IFFALSE 42620
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42591: LD_VAR 0 1
42595: PPUSH
42596: CALL_OW 250
42600: PPUSH
42601: LD_VAR 0 1
42605: PPUSH
42606: CALL_OW 251
42610: PPUSH
42611: LD_INT 1
42613: PPUSH
42614: CALL_OW 453
42618: GO 42588
42620: POP
42621: POP
// end ;
42622: LD_VAR 0 2
42626: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42627: LD_INT 0
42629: PPUSH
42630: PPUSH
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
42635: LD_VAR 0 1
42639: NOT
42640: PUSH
42641: LD_VAR 0 2
42645: NOT
42646: OR
42647: PUSH
42648: LD_VAR 0 1
42652: PPUSH
42653: CALL_OW 314
42657: OR
42658: IFFALSE 42662
// exit ;
42660: GO 43103
// x := GetX ( enemy_unit ) ;
42662: LD_ADDR_VAR 0 7
42666: PUSH
42667: LD_VAR 0 2
42671: PPUSH
42672: CALL_OW 250
42676: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42677: LD_ADDR_VAR 0 8
42681: PUSH
42682: LD_VAR 0 2
42686: PPUSH
42687: CALL_OW 251
42691: ST_TO_ADDR
// if not x or not y then
42692: LD_VAR 0 7
42696: NOT
42697: PUSH
42698: LD_VAR 0 8
42702: NOT
42703: OR
42704: IFFALSE 42708
// exit ;
42706: GO 43103
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42708: LD_ADDR_VAR 0 6
42712: PUSH
42713: LD_VAR 0 7
42717: PPUSH
42718: LD_INT 0
42720: PPUSH
42721: LD_INT 4
42723: PPUSH
42724: CALL_OW 272
42728: PUSH
42729: LD_VAR 0 8
42733: PPUSH
42734: LD_INT 0
42736: PPUSH
42737: LD_INT 4
42739: PPUSH
42740: CALL_OW 273
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_VAR 0 7
42753: PPUSH
42754: LD_INT 1
42756: PPUSH
42757: LD_INT 4
42759: PPUSH
42760: CALL_OW 272
42764: PUSH
42765: LD_VAR 0 8
42769: PPUSH
42770: LD_INT 1
42772: PPUSH
42773: LD_INT 4
42775: PPUSH
42776: CALL_OW 273
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_VAR 0 7
42789: PPUSH
42790: LD_INT 2
42792: PPUSH
42793: LD_INT 4
42795: PPUSH
42796: CALL_OW 272
42800: PUSH
42801: LD_VAR 0 8
42805: PPUSH
42806: LD_INT 2
42808: PPUSH
42809: LD_INT 4
42811: PPUSH
42812: CALL_OW 273
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_VAR 0 7
42825: PPUSH
42826: LD_INT 3
42828: PPUSH
42829: LD_INT 4
42831: PPUSH
42832: CALL_OW 272
42836: PUSH
42837: LD_VAR 0 8
42841: PPUSH
42842: LD_INT 3
42844: PPUSH
42845: LD_INT 4
42847: PPUSH
42848: CALL_OW 273
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_VAR 0 7
42861: PPUSH
42862: LD_INT 4
42864: PPUSH
42865: LD_INT 4
42867: PPUSH
42868: CALL_OW 272
42872: PUSH
42873: LD_VAR 0 8
42877: PPUSH
42878: LD_INT 4
42880: PPUSH
42881: LD_INT 4
42883: PPUSH
42884: CALL_OW 273
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_VAR 0 7
42897: PPUSH
42898: LD_INT 5
42900: PPUSH
42901: LD_INT 4
42903: PPUSH
42904: CALL_OW 272
42908: PUSH
42909: LD_VAR 0 8
42913: PPUSH
42914: LD_INT 5
42916: PPUSH
42917: LD_INT 4
42919: PPUSH
42920: CALL_OW 273
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: ST_TO_ADDR
// for i = tmp downto 1 do
42937: LD_ADDR_VAR 0 4
42941: PUSH
42942: DOUBLE
42943: LD_VAR 0 6
42947: INC
42948: ST_TO_ADDR
42949: LD_INT 1
42951: PUSH
42952: FOR_DOWNTO
42953: IFFALSE 43054
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42955: LD_VAR 0 6
42959: PUSH
42960: LD_VAR 0 4
42964: ARRAY
42965: PUSH
42966: LD_INT 1
42968: ARRAY
42969: PPUSH
42970: LD_VAR 0 6
42974: PUSH
42975: LD_VAR 0 4
42979: ARRAY
42980: PUSH
42981: LD_INT 2
42983: ARRAY
42984: PPUSH
42985: CALL_OW 488
42989: NOT
42990: PUSH
42991: LD_VAR 0 6
42995: PUSH
42996: LD_VAR 0 4
43000: ARRAY
43001: PUSH
43002: LD_INT 1
43004: ARRAY
43005: PPUSH
43006: LD_VAR 0 6
43010: PUSH
43011: LD_VAR 0 4
43015: ARRAY
43016: PUSH
43017: LD_INT 2
43019: ARRAY
43020: PPUSH
43021: CALL_OW 428
43025: PUSH
43026: LD_INT 0
43028: NONEQUAL
43029: OR
43030: IFFALSE 43052
// tmp := Delete ( tmp , i ) ;
43032: LD_ADDR_VAR 0 6
43036: PUSH
43037: LD_VAR 0 6
43041: PPUSH
43042: LD_VAR 0 4
43046: PPUSH
43047: CALL_OW 3
43051: ST_TO_ADDR
43052: GO 42952
43054: POP
43055: POP
// j := GetClosestHex ( unit , tmp ) ;
43056: LD_ADDR_VAR 0 5
43060: PUSH
43061: LD_VAR 0 1
43065: PPUSH
43066: LD_VAR 0 6
43070: PPUSH
43071: CALL 42356 0 2
43075: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43076: LD_VAR 0 1
43080: PPUSH
43081: LD_VAR 0 5
43085: PUSH
43086: LD_INT 1
43088: ARRAY
43089: PPUSH
43090: LD_VAR 0 5
43094: PUSH
43095: LD_INT 2
43097: ARRAY
43098: PPUSH
43099: CALL_OW 111
// end ;
43103: LD_VAR 0 3
43107: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43108: LD_INT 0
43110: PPUSH
43111: PPUSH
43112: PPUSH
// uc_side = 0 ;
43113: LD_ADDR_OWVAR 20
43117: PUSH
43118: LD_INT 0
43120: ST_TO_ADDR
// uc_nation = 0 ;
43121: LD_ADDR_OWVAR 21
43125: PUSH
43126: LD_INT 0
43128: ST_TO_ADDR
// InitHc ;
43129: CALL_OW 19
// InitVc ;
43133: CALL_OW 20
// if mastodonts then
43137: LD_VAR 0 6
43141: IFFALSE 43208
// for i = 1 to mastodonts do
43143: LD_ADDR_VAR 0 11
43147: PUSH
43148: DOUBLE
43149: LD_INT 1
43151: DEC
43152: ST_TO_ADDR
43153: LD_VAR 0 6
43157: PUSH
43158: FOR_TO
43159: IFFALSE 43206
// begin vc_chassis := 31 ;
43161: LD_ADDR_OWVAR 37
43165: PUSH
43166: LD_INT 31
43168: ST_TO_ADDR
// vc_control := control_rider ;
43169: LD_ADDR_OWVAR 38
43173: PUSH
43174: LD_INT 4
43176: ST_TO_ADDR
// animal := CreateVehicle ;
43177: LD_ADDR_VAR 0 12
43181: PUSH
43182: CALL_OW 45
43186: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
43187: LD_VAR 0 12
43191: PPUSH
43192: LD_VAR 0 8
43196: PPUSH
43197: LD_INT 0
43199: PPUSH
43200: CALL_OW 49
// end ;
43204: GO 43158
43206: POP
43207: POP
// if horses then
43208: LD_VAR 0 5
43212: IFFALSE 43279
// for i = 1 to horses do
43214: LD_ADDR_VAR 0 11
43218: PUSH
43219: DOUBLE
43220: LD_INT 1
43222: DEC
43223: ST_TO_ADDR
43224: LD_VAR 0 5
43228: PUSH
43229: FOR_TO
43230: IFFALSE 43277
// begin hc_class := 21 ;
43232: LD_ADDR_OWVAR 28
43236: PUSH
43237: LD_INT 21
43239: ST_TO_ADDR
// hc_gallery :=  ;
43240: LD_ADDR_OWVAR 33
43244: PUSH
43245: LD_STRING 
43247: ST_TO_ADDR
// animal := CreateHuman ;
43248: LD_ADDR_VAR 0 12
43252: PUSH
43253: CALL_OW 44
43257: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
43258: LD_VAR 0 12
43262: PPUSH
43263: LD_VAR 0 8
43267: PPUSH
43268: LD_INT 0
43270: PPUSH
43271: CALL_OW 49
// end ;
43275: GO 43229
43277: POP
43278: POP
// if birds then
43279: LD_VAR 0 1
43283: IFFALSE 43350
// for i = 1 to birds do
43285: LD_ADDR_VAR 0 11
43289: PUSH
43290: DOUBLE
43291: LD_INT 1
43293: DEC
43294: ST_TO_ADDR
43295: LD_VAR 0 1
43299: PUSH
43300: FOR_TO
43301: IFFALSE 43348
// begin hc_class = 18 ;
43303: LD_ADDR_OWVAR 28
43307: PUSH
43308: LD_INT 18
43310: ST_TO_ADDR
// hc_gallery =  ;
43311: LD_ADDR_OWVAR 33
43315: PUSH
43316: LD_STRING 
43318: ST_TO_ADDR
// animal := CreateHuman ;
43319: LD_ADDR_VAR 0 12
43323: PUSH
43324: CALL_OW 44
43328: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
43329: LD_VAR 0 12
43333: PPUSH
43334: LD_VAR 0 8
43338: PPUSH
43339: LD_INT 0
43341: PPUSH
43342: CALL_OW 49
// end ;
43346: GO 43300
43348: POP
43349: POP
// if tigers then
43350: LD_VAR 0 2
43354: IFFALSE 43438
// for i = 1 to tigers do
43356: LD_ADDR_VAR 0 11
43360: PUSH
43361: DOUBLE
43362: LD_INT 1
43364: DEC
43365: ST_TO_ADDR
43366: LD_VAR 0 2
43370: PUSH
43371: FOR_TO
43372: IFFALSE 43436
// begin hc_class = class_tiger ;
43374: LD_ADDR_OWVAR 28
43378: PUSH
43379: LD_INT 14
43381: ST_TO_ADDR
// hc_gallery =  ;
43382: LD_ADDR_OWVAR 33
43386: PUSH
43387: LD_STRING 
43389: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43390: LD_ADDR_OWVAR 35
43394: PUSH
43395: LD_INT 7
43397: NEG
43398: PPUSH
43399: LD_INT 7
43401: PPUSH
43402: CALL_OW 12
43406: ST_TO_ADDR
// animal := CreateHuman ;
43407: LD_ADDR_VAR 0 12
43411: PUSH
43412: CALL_OW 44
43416: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
43417: LD_VAR 0 12
43421: PPUSH
43422: LD_VAR 0 8
43426: PPUSH
43427: LD_INT 0
43429: PPUSH
43430: CALL_OW 49
// end ;
43434: GO 43371
43436: POP
43437: POP
// if apemans then
43438: LD_VAR 0 3
43442: IFFALSE 43565
// for i = 1 to apemans do
43444: LD_ADDR_VAR 0 11
43448: PUSH
43449: DOUBLE
43450: LD_INT 1
43452: DEC
43453: ST_TO_ADDR
43454: LD_VAR 0 3
43458: PUSH
43459: FOR_TO
43460: IFFALSE 43563
// begin hc_class = class_apeman ;
43462: LD_ADDR_OWVAR 28
43466: PUSH
43467: LD_INT 12
43469: ST_TO_ADDR
// hc_gallery =  ;
43470: LD_ADDR_OWVAR 33
43474: PUSH
43475: LD_STRING 
43477: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
43478: LD_ADDR_OWVAR 35
43482: PUSH
43483: LD_INT 5
43485: NEG
43486: PPUSH
43487: LD_INT 5
43489: PPUSH
43490: CALL_OW 12
43494: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43495: LD_ADDR_OWVAR 31
43499: PUSH
43500: LD_INT 1
43502: PPUSH
43503: LD_INT 3
43505: PPUSH
43506: CALL_OW 12
43510: PUSH
43511: LD_INT 1
43513: PPUSH
43514: LD_INT 3
43516: PPUSH
43517: CALL_OW 12
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: ST_TO_ADDR
// animal := CreateHuman ;
43534: LD_ADDR_VAR 0 12
43538: PUSH
43539: CALL_OW 44
43543: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
43544: LD_VAR 0 12
43548: PPUSH
43549: LD_VAR 0 8
43553: PPUSH
43554: LD_INT 0
43556: PPUSH
43557: CALL_OW 49
// end ;
43561: GO 43459
43563: POP
43564: POP
// if enchidnas then
43565: LD_VAR 0 4
43569: IFFALSE 43636
// for i = 1 to enchidnas do
43571: LD_ADDR_VAR 0 11
43575: PUSH
43576: DOUBLE
43577: LD_INT 1
43579: DEC
43580: ST_TO_ADDR
43581: LD_VAR 0 4
43585: PUSH
43586: FOR_TO
43587: IFFALSE 43634
// begin hc_class = 13 ;
43589: LD_ADDR_OWVAR 28
43593: PUSH
43594: LD_INT 13
43596: ST_TO_ADDR
// hc_gallery =  ;
43597: LD_ADDR_OWVAR 33
43601: PUSH
43602: LD_STRING 
43604: ST_TO_ADDR
// animal := CreateHuman ;
43605: LD_ADDR_VAR 0 12
43609: PUSH
43610: CALL_OW 44
43614: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
43615: LD_VAR 0 12
43619: PPUSH
43620: LD_VAR 0 8
43624: PPUSH
43625: LD_INT 0
43627: PPUSH
43628: CALL_OW 49
// end ;
43632: GO 43586
43634: POP
43635: POP
// if not wat_area then
43636: LD_VAR 0 9
43640: NOT
43641: IFFALSE 43645
// exit ;
43643: GO 43716
// if fishes then
43645: LD_VAR 0 7
43649: IFFALSE 43716
// for i = 1 to fishes do
43651: LD_ADDR_VAR 0 11
43655: PUSH
43656: DOUBLE
43657: LD_INT 1
43659: DEC
43660: ST_TO_ADDR
43661: LD_VAR 0 7
43665: PUSH
43666: FOR_TO
43667: IFFALSE 43714
// begin hc_class = 20 ;
43669: LD_ADDR_OWVAR 28
43673: PUSH
43674: LD_INT 20
43676: ST_TO_ADDR
// hc_gallery =  ;
43677: LD_ADDR_OWVAR 33
43681: PUSH
43682: LD_STRING 
43684: ST_TO_ADDR
// animal := CreateHuman ;
43685: LD_ADDR_VAR 0 12
43689: PUSH
43690: CALL_OW 44
43694: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
43695: LD_VAR 0 12
43699: PPUSH
43700: LD_VAR 0 9
43704: PPUSH
43705: LD_INT 0
43707: PPUSH
43708: CALL_OW 49
// end ;
43712: GO 43666
43714: POP
43715: POP
// end ;
43716: LD_VAR 0 10
43720: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
43721: LD_INT 0
43723: PPUSH
43724: PPUSH
43725: PPUSH
43726: PPUSH
43727: PPUSH
43728: PPUSH
43729: PPUSH
43730: PPUSH
43731: PPUSH
43732: PPUSH
43733: PPUSH
43734: PPUSH
43735: PPUSH
43736: PPUSH
43737: PPUSH
43738: PPUSH
43739: PPUSH
43740: PPUSH
43741: PPUSH
43742: PPUSH
43743: PPUSH
43744: PPUSH
43745: PPUSH
43746: PPUSH
43747: PPUSH
43748: PPUSH
43749: PPUSH
43750: PPUSH
// if not list then
43751: LD_VAR 0 1
43755: NOT
43756: IFFALSE 43760
// exit ;
43758: GO 47057
// base := list [ 1 ] ;
43760: LD_ADDR_VAR 0 3
43764: PUSH
43765: LD_VAR 0 1
43769: PUSH
43770: LD_INT 1
43772: ARRAY
43773: ST_TO_ADDR
// group := list [ 2 ] ;
43774: LD_ADDR_VAR 0 4
43778: PUSH
43779: LD_VAR 0 1
43783: PUSH
43784: LD_INT 2
43786: ARRAY
43787: ST_TO_ADDR
// path := list [ 3 ] ;
43788: LD_ADDR_VAR 0 5
43792: PUSH
43793: LD_VAR 0 1
43797: PUSH
43798: LD_INT 3
43800: ARRAY
43801: ST_TO_ADDR
// flags := list [ 4 ] ;
43802: LD_ADDR_VAR 0 6
43806: PUSH
43807: LD_VAR 0 1
43811: PUSH
43812: LD_INT 4
43814: ARRAY
43815: ST_TO_ADDR
// mined := [ ] ;
43816: LD_ADDR_VAR 0 27
43820: PUSH
43821: EMPTY
43822: ST_TO_ADDR
// bombed := [ ] ;
43823: LD_ADDR_VAR 0 28
43827: PUSH
43828: EMPTY
43829: ST_TO_ADDR
// if not group or not path then
43830: LD_VAR 0 4
43834: NOT
43835: PUSH
43836: LD_VAR 0 5
43840: NOT
43841: OR
43842: IFFALSE 43846
// exit ;
43844: GO 47057
// if flags then
43846: LD_VAR 0 6
43850: IFFALSE 43994
// begin f_ignore_area := flags [ 1 ] ;
43852: LD_ADDR_VAR 0 17
43856: PUSH
43857: LD_VAR 0 6
43861: PUSH
43862: LD_INT 1
43864: ARRAY
43865: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
43866: LD_ADDR_VAR 0 18
43870: PUSH
43871: LD_VAR 0 6
43875: PUSH
43876: LD_INT 2
43878: ARRAY
43879: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
43880: LD_ADDR_VAR 0 19
43884: PUSH
43885: LD_VAR 0 6
43889: PUSH
43890: LD_INT 3
43892: ARRAY
43893: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
43894: LD_ADDR_VAR 0 20
43898: PUSH
43899: LD_VAR 0 6
43903: PUSH
43904: LD_INT 4
43906: ARRAY
43907: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
43908: LD_ADDR_VAR 0 21
43912: PUSH
43913: LD_VAR 0 6
43917: PUSH
43918: LD_INT 5
43920: ARRAY
43921: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
43922: LD_ADDR_VAR 0 22
43926: PUSH
43927: LD_VAR 0 6
43931: PUSH
43932: LD_INT 6
43934: ARRAY
43935: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
43936: LD_ADDR_VAR 0 23
43940: PUSH
43941: LD_VAR 0 6
43945: PUSH
43946: LD_INT 7
43948: ARRAY
43949: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
43950: LD_ADDR_VAR 0 24
43954: PUSH
43955: LD_VAR 0 6
43959: PUSH
43960: LD_INT 8
43962: ARRAY
43963: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
43964: LD_ADDR_VAR 0 25
43968: PUSH
43969: LD_VAR 0 6
43973: PUSH
43974: LD_INT 9
43976: ARRAY
43977: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
43978: LD_ADDR_VAR 0 26
43982: PUSH
43983: LD_VAR 0 6
43987: PUSH
43988: LD_INT 10
43990: ARRAY
43991: ST_TO_ADDR
// end else
43992: GO 44074
// begin f_ignore_area := false ;
43994: LD_ADDR_VAR 0 17
43998: PUSH
43999: LD_INT 0
44001: ST_TO_ADDR
// f_capture := false ;
44002: LD_ADDR_VAR 0 18
44006: PUSH
44007: LD_INT 0
44009: ST_TO_ADDR
// f_ignore_civ := false ;
44010: LD_ADDR_VAR 0 19
44014: PUSH
44015: LD_INT 0
44017: ST_TO_ADDR
// f_murder := false ;
44018: LD_ADDR_VAR 0 20
44022: PUSH
44023: LD_INT 0
44025: ST_TO_ADDR
// f_mines := false ;
44026: LD_ADDR_VAR 0 21
44030: PUSH
44031: LD_INT 0
44033: ST_TO_ADDR
// f_repair := false ;
44034: LD_ADDR_VAR 0 22
44038: PUSH
44039: LD_INT 0
44041: ST_TO_ADDR
// f_heal := false ;
44042: LD_ADDR_VAR 0 23
44046: PUSH
44047: LD_INT 0
44049: ST_TO_ADDR
// f_spacetime := false ;
44050: LD_ADDR_VAR 0 24
44054: PUSH
44055: LD_INT 0
44057: ST_TO_ADDR
// f_attack_depot := false ;
44058: LD_ADDR_VAR 0 25
44062: PUSH
44063: LD_INT 0
44065: ST_TO_ADDR
// f_crawl := false ;
44066: LD_ADDR_VAR 0 26
44070: PUSH
44071: LD_INT 0
44073: ST_TO_ADDR
// end ; units_path := [ ] ;
44074: LD_ADDR_VAR 0 16
44078: PUSH
44079: EMPTY
44080: ST_TO_ADDR
// for i = 1 to group do
44081: LD_ADDR_VAR 0 7
44085: PUSH
44086: DOUBLE
44087: LD_INT 1
44089: DEC
44090: ST_TO_ADDR
44091: LD_VAR 0 4
44095: PUSH
44096: FOR_TO
44097: IFFALSE 44126
// begin units_path := Replace ( units_path , i , path ) ;
44099: LD_ADDR_VAR 0 16
44103: PUSH
44104: LD_VAR 0 16
44108: PPUSH
44109: LD_VAR 0 7
44113: PPUSH
44114: LD_VAR 0 5
44118: PPUSH
44119: CALL_OW 1
44123: ST_TO_ADDR
// end ;
44124: GO 44096
44126: POP
44127: POP
// repeat for i = group downto 1 do
44128: LD_ADDR_VAR 0 7
44132: PUSH
44133: DOUBLE
44134: LD_VAR 0 4
44138: INC
44139: ST_TO_ADDR
44140: LD_INT 1
44142: PUSH
44143: FOR_DOWNTO
44144: IFFALSE 47039
// begin wait ( 0 0$1 ) ;
44146: LD_INT 35
44148: PPUSH
44149: CALL_OW 67
// tmp := [ ] ;
44153: LD_ADDR_VAR 0 14
44157: PUSH
44158: EMPTY
44159: ST_TO_ADDR
// attacking := false ;
44160: LD_ADDR_VAR 0 29
44164: PUSH
44165: LD_INT 0
44167: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
44168: LD_VAR 0 4
44172: PUSH
44173: LD_VAR 0 7
44177: ARRAY
44178: PPUSH
44179: CALL_OW 301
44183: PUSH
44184: LD_VAR 0 4
44188: PUSH
44189: LD_VAR 0 7
44193: ARRAY
44194: NOT
44195: OR
44196: IFFALSE 44240
// begin group := Delete ( group , i ) ;
44198: LD_ADDR_VAR 0 4
44202: PUSH
44203: LD_VAR 0 4
44207: PPUSH
44208: LD_VAR 0 7
44212: PPUSH
44213: CALL_OW 3
44217: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
44218: LD_ADDR_VAR 0 16
44222: PUSH
44223: LD_VAR 0 16
44227: PPUSH
44228: LD_VAR 0 7
44232: PPUSH
44233: CALL_OW 3
44237: ST_TO_ADDR
// continue ;
44238: GO 44143
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
44240: LD_VAR 0 4
44244: PUSH
44245: LD_VAR 0 7
44249: ARRAY
44250: PPUSH
44251: LD_INT 10
44253: PPUSH
44254: CALL 42208 0 2
44258: NOT
44259: PUSH
44260: LD_VAR 0 16
44264: PUSH
44265: LD_VAR 0 7
44269: ARRAY
44270: PUSH
44271: EMPTY
44272: EQUAL
44273: NOT
44274: AND
44275: IFFALSE 44541
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
44277: LD_VAR 0 4
44281: PUSH
44282: LD_VAR 0 7
44286: ARRAY
44287: PPUSH
44288: CALL_OW 262
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: IN
44303: IFFALSE 44344
// if GetFuel ( group [ i ] ) < 10 then
44305: LD_VAR 0 4
44309: PUSH
44310: LD_VAR 0 7
44314: ARRAY
44315: PPUSH
44316: CALL_OW 261
44320: PUSH
44321: LD_INT 10
44323: LESS
44324: IFFALSE 44344
// SetFuel ( group [ i ] , 12 ) ;
44326: LD_VAR 0 4
44330: PUSH
44331: LD_VAR 0 7
44335: ARRAY
44336: PPUSH
44337: LD_INT 12
44339: PPUSH
44340: CALL_OW 240
// if units_path [ i ] then
44344: LD_VAR 0 16
44348: PUSH
44349: LD_VAR 0 7
44353: ARRAY
44354: IFFALSE 44539
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
44356: LD_VAR 0 4
44360: PUSH
44361: LD_VAR 0 7
44365: ARRAY
44366: PPUSH
44367: LD_VAR 0 16
44371: PUSH
44372: LD_VAR 0 7
44376: ARRAY
44377: PUSH
44378: LD_INT 1
44380: ARRAY
44381: PUSH
44382: LD_INT 1
44384: ARRAY
44385: PPUSH
44386: LD_VAR 0 16
44390: PUSH
44391: LD_VAR 0 7
44395: ARRAY
44396: PUSH
44397: LD_INT 1
44399: ARRAY
44400: PUSH
44401: LD_INT 2
44403: ARRAY
44404: PPUSH
44405: CALL_OW 297
44409: PUSH
44410: LD_INT 6
44412: GREATER
44413: IFFALSE 44488
// begin if not HasTask ( group [ i ] ) then
44415: LD_VAR 0 4
44419: PUSH
44420: LD_VAR 0 7
44424: ARRAY
44425: PPUSH
44426: CALL_OW 314
44430: NOT
44431: IFFALSE 44486
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
44433: LD_VAR 0 4
44437: PUSH
44438: LD_VAR 0 7
44442: ARRAY
44443: PPUSH
44444: LD_VAR 0 16
44448: PUSH
44449: LD_VAR 0 7
44453: ARRAY
44454: PUSH
44455: LD_INT 1
44457: ARRAY
44458: PUSH
44459: LD_INT 1
44461: ARRAY
44462: PPUSH
44463: LD_VAR 0 16
44467: PUSH
44468: LD_VAR 0 7
44472: ARRAY
44473: PUSH
44474: LD_INT 1
44476: ARRAY
44477: PUSH
44478: LD_INT 2
44480: ARRAY
44481: PPUSH
44482: CALL_OW 114
// end else
44486: GO 44539
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
44488: LD_ADDR_VAR 0 15
44492: PUSH
44493: LD_VAR 0 16
44497: PUSH
44498: LD_VAR 0 7
44502: ARRAY
44503: PPUSH
44504: LD_INT 1
44506: PPUSH
44507: CALL_OW 3
44511: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
44512: LD_ADDR_VAR 0 16
44516: PUSH
44517: LD_VAR 0 16
44521: PPUSH
44522: LD_VAR 0 7
44526: PPUSH
44527: LD_VAR 0 15
44531: PPUSH
44532: CALL_OW 1
44536: ST_TO_ADDR
// continue ;
44537: GO 44143
// end ; end ; end else
44539: GO 47037
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
44541: LD_ADDR_VAR 0 14
44545: PUSH
44546: LD_INT 81
44548: PUSH
44549: LD_VAR 0 4
44553: PUSH
44554: LD_VAR 0 7
44558: ARRAY
44559: PPUSH
44560: CALL_OW 255
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PPUSH
44569: CALL_OW 69
44573: ST_TO_ADDR
// if not tmp then
44574: LD_VAR 0 14
44578: NOT
44579: IFFALSE 44583
// continue ;
44581: GO 44143
// if f_ignore_area then
44583: LD_VAR 0 17
44587: IFFALSE 44675
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
44589: LD_ADDR_VAR 0 15
44593: PUSH
44594: LD_VAR 0 14
44598: PPUSH
44599: LD_INT 3
44601: PUSH
44602: LD_INT 92
44604: PUSH
44605: LD_VAR 0 17
44609: PUSH
44610: LD_INT 1
44612: ARRAY
44613: PUSH
44614: LD_VAR 0 17
44618: PUSH
44619: LD_INT 2
44621: ARRAY
44622: PUSH
44623: LD_VAR 0 17
44627: PUSH
44628: LD_INT 3
44630: ARRAY
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PPUSH
44642: CALL_OW 72
44646: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
44647: LD_VAR 0 14
44651: PUSH
44652: LD_VAR 0 15
44656: DIFF
44657: IFFALSE 44675
// tmp := tmp diff tmp2 ;
44659: LD_ADDR_VAR 0 14
44663: PUSH
44664: LD_VAR 0 14
44668: PUSH
44669: LD_VAR 0 15
44673: DIFF
44674: ST_TO_ADDR
// end ; if not f_murder then
44675: LD_VAR 0 20
44679: NOT
44680: IFFALSE 44738
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
44682: LD_ADDR_VAR 0 15
44686: PUSH
44687: LD_VAR 0 14
44691: PPUSH
44692: LD_INT 3
44694: PUSH
44695: LD_INT 50
44697: PUSH
44698: EMPTY
44699: LIST
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PPUSH
44705: CALL_OW 72
44709: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
44710: LD_VAR 0 14
44714: PUSH
44715: LD_VAR 0 15
44719: DIFF
44720: IFFALSE 44738
// tmp := tmp diff tmp2 ;
44722: LD_ADDR_VAR 0 14
44726: PUSH
44727: LD_VAR 0 14
44731: PUSH
44732: LD_VAR 0 15
44736: DIFF
44737: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
44738: LD_ADDR_VAR 0 14
44742: PUSH
44743: LD_VAR 0 4
44747: PUSH
44748: LD_VAR 0 7
44752: ARRAY
44753: PPUSH
44754: LD_VAR 0 14
44758: PPUSH
44759: LD_INT 1
44761: PPUSH
44762: LD_INT 1
44764: PPUSH
44765: CALL 16414 0 4
44769: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
44770: LD_VAR 0 4
44774: PUSH
44775: LD_VAR 0 7
44779: ARRAY
44780: PPUSH
44781: CALL_OW 257
44785: PUSH
44786: LD_INT 1
44788: EQUAL
44789: IFFALSE 45237
// begin if WantPlant ( group [ i ] ) then
44791: LD_VAR 0 4
44795: PUSH
44796: LD_VAR 0 7
44800: ARRAY
44801: PPUSH
44802: CALL 15882 0 1
44806: IFFALSE 44810
// continue ;
44808: GO 44143
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
44810: LD_VAR 0 18
44814: PUSH
44815: LD_VAR 0 4
44819: PUSH
44820: LD_VAR 0 7
44824: ARRAY
44825: PPUSH
44826: CALL_OW 310
44830: NOT
44831: AND
44832: PUSH
44833: LD_VAR 0 14
44837: PUSH
44838: LD_INT 1
44840: ARRAY
44841: PUSH
44842: LD_VAR 0 14
44846: PPUSH
44847: LD_INT 21
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 58
44859: PUSH
44860: EMPTY
44861: LIST
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PPUSH
44867: CALL_OW 72
44871: IN
44872: AND
44873: IFFALSE 44909
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
44875: LD_VAR 0 4
44879: PUSH
44880: LD_VAR 0 7
44884: ARRAY
44885: PPUSH
44886: LD_VAR 0 14
44890: PUSH
44891: LD_INT 1
44893: ARRAY
44894: PPUSH
44895: CALL_OW 120
// attacking := true ;
44899: LD_ADDR_VAR 0 29
44903: PUSH
44904: LD_INT 1
44906: ST_TO_ADDR
// continue ;
44907: GO 44143
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
44909: LD_VAR 0 26
44913: PUSH
44914: LD_VAR 0 4
44918: PUSH
44919: LD_VAR 0 7
44923: ARRAY
44924: PPUSH
44925: CALL_OW 257
44929: PUSH
44930: LD_INT 1
44932: EQUAL
44933: AND
44934: PUSH
44935: LD_VAR 0 4
44939: PUSH
44940: LD_VAR 0 7
44944: ARRAY
44945: PPUSH
44946: CALL_OW 256
44950: PUSH
44951: LD_INT 800
44953: LESS
44954: AND
44955: PUSH
44956: LD_VAR 0 4
44960: PUSH
44961: LD_VAR 0 7
44965: ARRAY
44966: PPUSH
44967: CALL_OW 318
44971: NOT
44972: AND
44973: IFFALSE 44990
// ComCrawl ( group [ i ] ) ;
44975: LD_VAR 0 4
44979: PUSH
44980: LD_VAR 0 7
44984: ARRAY
44985: PPUSH
44986: CALL_OW 137
// if f_mines then
44990: LD_VAR 0 21
44994: IFFALSE 45237
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
44996: LD_VAR 0 14
45000: PUSH
45001: LD_INT 1
45003: ARRAY
45004: PPUSH
45005: CALL_OW 247
45009: PUSH
45010: LD_INT 3
45012: EQUAL
45013: PUSH
45014: LD_VAR 0 14
45018: PUSH
45019: LD_INT 1
45021: ARRAY
45022: PUSH
45023: LD_VAR 0 27
45027: IN
45028: NOT
45029: AND
45030: IFFALSE 45237
// begin x := GetX ( tmp [ 1 ] ) ;
45032: LD_ADDR_VAR 0 10
45036: PUSH
45037: LD_VAR 0 14
45041: PUSH
45042: LD_INT 1
45044: ARRAY
45045: PPUSH
45046: CALL_OW 250
45050: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
45051: LD_ADDR_VAR 0 11
45055: PUSH
45056: LD_VAR 0 14
45060: PUSH
45061: LD_INT 1
45063: ARRAY
45064: PPUSH
45065: CALL_OW 251
45069: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
45070: LD_ADDR_VAR 0 12
45074: PUSH
45075: LD_VAR 0 4
45079: PUSH
45080: LD_VAR 0 7
45084: ARRAY
45085: PPUSH
45086: CALL 42293 0 1
45090: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
45091: LD_VAR 0 4
45095: PUSH
45096: LD_VAR 0 7
45100: ARRAY
45101: PPUSH
45102: LD_VAR 0 10
45106: PPUSH
45107: LD_VAR 0 11
45111: PPUSH
45112: LD_VAR 0 14
45116: PUSH
45117: LD_INT 1
45119: ARRAY
45120: PPUSH
45121: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
45125: LD_VAR 0 4
45129: PUSH
45130: LD_VAR 0 7
45134: ARRAY
45135: PPUSH
45136: LD_VAR 0 10
45140: PPUSH
45141: LD_VAR 0 12
45145: PPUSH
45146: LD_INT 7
45148: PPUSH
45149: CALL_OW 272
45153: PPUSH
45154: LD_VAR 0 11
45158: PPUSH
45159: LD_VAR 0 12
45163: PPUSH
45164: LD_INT 7
45166: PPUSH
45167: CALL_OW 273
45171: PPUSH
45172: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
45176: LD_VAR 0 4
45180: PUSH
45181: LD_VAR 0 7
45185: ARRAY
45186: PPUSH
45187: LD_INT 71
45189: PPUSH
45190: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
45194: LD_ADDR_VAR 0 27
45198: PUSH
45199: LD_VAR 0 27
45203: PPUSH
45204: LD_VAR 0 27
45208: PUSH
45209: LD_INT 1
45211: PLUS
45212: PPUSH
45213: LD_VAR 0 14
45217: PUSH
45218: LD_INT 1
45220: ARRAY
45221: PPUSH
45222: CALL_OW 1
45226: ST_TO_ADDR
// attacking := true ;
45227: LD_ADDR_VAR 0 29
45231: PUSH
45232: LD_INT 1
45234: ST_TO_ADDR
// continue ;
45235: GO 44143
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
45237: LD_VAR 0 4
45241: PUSH
45242: LD_VAR 0 7
45246: ARRAY
45247: PPUSH
45248: CALL_OW 257
45252: PUSH
45253: LD_INT 17
45255: EQUAL
45256: PUSH
45257: LD_VAR 0 4
45261: PUSH
45262: LD_VAR 0 7
45266: ARRAY
45267: PPUSH
45268: CALL_OW 110
45272: PUSH
45273: LD_INT 71
45275: EQUAL
45276: NOT
45277: AND
45278: IFFALSE 45424
// begin attacking := false ;
45280: LD_ADDR_VAR 0 29
45284: PUSH
45285: LD_INT 0
45287: ST_TO_ADDR
// k := 5 ;
45288: LD_ADDR_VAR 0 9
45292: PUSH
45293: LD_INT 5
45295: ST_TO_ADDR
// if tmp < k then
45296: LD_VAR 0 14
45300: PUSH
45301: LD_VAR 0 9
45305: LESS
45306: IFFALSE 45318
// k := tmp ;
45308: LD_ADDR_VAR 0 9
45312: PUSH
45313: LD_VAR 0 14
45317: ST_TO_ADDR
// for j = 1 to k do
45318: LD_ADDR_VAR 0 8
45322: PUSH
45323: DOUBLE
45324: LD_INT 1
45326: DEC
45327: ST_TO_ADDR
45328: LD_VAR 0 9
45332: PUSH
45333: FOR_TO
45334: IFFALSE 45422
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
45336: LD_VAR 0 14
45340: PUSH
45341: LD_VAR 0 8
45345: ARRAY
45346: PUSH
45347: LD_VAR 0 14
45351: PPUSH
45352: LD_INT 58
45354: PUSH
45355: EMPTY
45356: LIST
45357: PPUSH
45358: CALL_OW 72
45362: IN
45363: NOT
45364: IFFALSE 45420
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
45366: LD_VAR 0 4
45370: PUSH
45371: LD_VAR 0 7
45375: ARRAY
45376: PPUSH
45377: LD_VAR 0 14
45381: PUSH
45382: LD_VAR 0 8
45386: ARRAY
45387: PPUSH
45388: CALL_OW 115
// attacking := true ;
45392: LD_ADDR_VAR 0 29
45396: PUSH
45397: LD_INT 1
45399: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
45400: LD_VAR 0 4
45404: PUSH
45405: LD_VAR 0 7
45409: ARRAY
45410: PPUSH
45411: LD_INT 71
45413: PPUSH
45414: CALL_OW 109
// continue ;
45418: GO 45333
// end ; end ;
45420: GO 45333
45422: POP
45423: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
45424: LD_VAR 0 4
45428: PUSH
45429: LD_VAR 0 7
45433: ARRAY
45434: PPUSH
45435: CALL_OW 257
45439: PUSH
45440: LD_INT 8
45442: EQUAL
45443: PUSH
45444: LD_VAR 0 4
45448: PUSH
45449: LD_VAR 0 7
45453: ARRAY
45454: PPUSH
45455: CALL_OW 264
45459: PUSH
45460: LD_INT 28
45462: PUSH
45463: LD_INT 45
45465: PUSH
45466: LD_INT 7
45468: PUSH
45469: LD_INT 47
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: IN
45478: OR
45479: IFFALSE 45709
// begin attacking := false ;
45481: LD_ADDR_VAR 0 29
45485: PUSH
45486: LD_INT 0
45488: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
45489: LD_VAR 0 14
45493: PUSH
45494: LD_INT 1
45496: ARRAY
45497: PPUSH
45498: CALL_OW 266
45502: PUSH
45503: LD_INT 32
45505: PUSH
45506: LD_INT 31
45508: PUSH
45509: LD_INT 33
45511: PUSH
45512: LD_INT 4
45514: PUSH
45515: LD_INT 5
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: IN
45525: IFFALSE 45709
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
45527: LD_ADDR_VAR 0 9
45531: PUSH
45532: LD_VAR 0 14
45536: PUSH
45537: LD_INT 1
45539: ARRAY
45540: PPUSH
45541: CALL_OW 266
45545: PPUSH
45546: LD_VAR 0 14
45550: PUSH
45551: LD_INT 1
45553: ARRAY
45554: PPUSH
45555: CALL_OW 250
45559: PPUSH
45560: LD_VAR 0 14
45564: PUSH
45565: LD_INT 1
45567: ARRAY
45568: PPUSH
45569: CALL_OW 251
45573: PPUSH
45574: LD_VAR 0 14
45578: PUSH
45579: LD_INT 1
45581: ARRAY
45582: PPUSH
45583: CALL_OW 254
45587: PPUSH
45588: LD_VAR 0 14
45592: PUSH
45593: LD_INT 1
45595: ARRAY
45596: PPUSH
45597: CALL_OW 248
45601: PPUSH
45602: LD_INT 0
45604: PPUSH
45605: CALL 23669 0 6
45609: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
45610: LD_ADDR_VAR 0 8
45614: PUSH
45615: LD_VAR 0 4
45619: PUSH
45620: LD_VAR 0 7
45624: ARRAY
45625: PPUSH
45626: LD_VAR 0 9
45630: PPUSH
45631: CALL 42356 0 2
45635: ST_TO_ADDR
// if j then
45636: LD_VAR 0 8
45640: IFFALSE 45709
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45642: LD_VAR 0 8
45646: PUSH
45647: LD_INT 1
45649: ARRAY
45650: PPUSH
45651: LD_VAR 0 8
45655: PUSH
45656: LD_INT 2
45658: ARRAY
45659: PPUSH
45660: CALL_OW 488
45664: IFFALSE 45709
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
45666: LD_VAR 0 4
45670: PUSH
45671: LD_VAR 0 7
45675: ARRAY
45676: PPUSH
45677: LD_VAR 0 8
45681: PUSH
45682: LD_INT 1
45684: ARRAY
45685: PPUSH
45686: LD_VAR 0 8
45690: PUSH
45691: LD_INT 2
45693: ARRAY
45694: PPUSH
45695: CALL_OW 116
// attacking := true ;
45699: LD_ADDR_VAR 0 29
45703: PUSH
45704: LD_INT 1
45706: ST_TO_ADDR
// continue ;
45707: GO 44143
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
45709: LD_VAR 0 4
45713: PUSH
45714: LD_VAR 0 7
45718: ARRAY
45719: PPUSH
45720: CALL_OW 265
45724: PUSH
45725: LD_INT 11
45727: EQUAL
45728: IFFALSE 46006
// begin k := 10 ;
45730: LD_ADDR_VAR 0 9
45734: PUSH
45735: LD_INT 10
45737: ST_TO_ADDR
// x := 0 ;
45738: LD_ADDR_VAR 0 10
45742: PUSH
45743: LD_INT 0
45745: ST_TO_ADDR
// if tmp < k then
45746: LD_VAR 0 14
45750: PUSH
45751: LD_VAR 0 9
45755: LESS
45756: IFFALSE 45768
// k := tmp ;
45758: LD_ADDR_VAR 0 9
45762: PUSH
45763: LD_VAR 0 14
45767: ST_TO_ADDR
// for j = k downto 1 do
45768: LD_ADDR_VAR 0 8
45772: PUSH
45773: DOUBLE
45774: LD_VAR 0 9
45778: INC
45779: ST_TO_ADDR
45780: LD_INT 1
45782: PUSH
45783: FOR_DOWNTO
45784: IFFALSE 45859
// begin if GetType ( tmp [ j ] ) = unit_human then
45786: LD_VAR 0 14
45790: PUSH
45791: LD_VAR 0 8
45795: ARRAY
45796: PPUSH
45797: CALL_OW 247
45801: PUSH
45802: LD_INT 1
45804: EQUAL
45805: IFFALSE 45857
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
45807: LD_VAR 0 4
45811: PUSH
45812: LD_VAR 0 7
45816: ARRAY
45817: PPUSH
45818: LD_VAR 0 14
45822: PUSH
45823: LD_VAR 0 8
45827: ARRAY
45828: PPUSH
45829: CALL 42627 0 2
// x := tmp [ j ] ;
45833: LD_ADDR_VAR 0 10
45837: PUSH
45838: LD_VAR 0 14
45842: PUSH
45843: LD_VAR 0 8
45847: ARRAY
45848: ST_TO_ADDR
// attacking := true ;
45849: LD_ADDR_VAR 0 29
45853: PUSH
45854: LD_INT 1
45856: ST_TO_ADDR
// end ; end ;
45857: GO 45783
45859: POP
45860: POP
// if not x then
45861: LD_VAR 0 10
45865: NOT
45866: IFFALSE 46006
// begin attacking := true ;
45868: LD_ADDR_VAR 0 29
45872: PUSH
45873: LD_INT 1
45875: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
45876: LD_VAR 0 4
45880: PUSH
45881: LD_VAR 0 7
45885: ARRAY
45886: PPUSH
45887: CALL_OW 250
45891: PPUSH
45892: LD_VAR 0 4
45896: PUSH
45897: LD_VAR 0 7
45901: ARRAY
45902: PPUSH
45903: CALL_OW 251
45907: PPUSH
45908: CALL_OW 546
45912: PUSH
45913: LD_INT 2
45915: ARRAY
45916: PUSH
45917: LD_VAR 0 14
45921: PUSH
45922: LD_INT 1
45924: ARRAY
45925: PPUSH
45926: CALL_OW 250
45930: PPUSH
45931: LD_VAR 0 14
45935: PUSH
45936: LD_INT 1
45938: ARRAY
45939: PPUSH
45940: CALL_OW 251
45944: PPUSH
45945: CALL_OW 546
45949: PUSH
45950: LD_INT 2
45952: ARRAY
45953: EQUAL
45954: IFFALSE 45982
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
45956: LD_VAR 0 4
45960: PUSH
45961: LD_VAR 0 7
45965: ARRAY
45966: PPUSH
45967: LD_VAR 0 14
45971: PUSH
45972: LD_INT 1
45974: ARRAY
45975: PPUSH
45976: CALL 42627 0 2
45980: GO 46006
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
45982: LD_VAR 0 4
45986: PUSH
45987: LD_VAR 0 7
45991: ARRAY
45992: PPUSH
45993: LD_VAR 0 14
45997: PUSH
45998: LD_INT 1
46000: ARRAY
46001: PPUSH
46002: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
46006: LD_VAR 0 4
46010: PUSH
46011: LD_VAR 0 7
46015: ARRAY
46016: PPUSH
46017: CALL_OW 264
46021: PUSH
46022: LD_INT 29
46024: EQUAL
46025: IFFALSE 46391
// begin if WantsToAttack ( group [ i ] ) in bombed then
46027: LD_VAR 0 4
46031: PUSH
46032: LD_VAR 0 7
46036: ARRAY
46037: PPUSH
46038: CALL_OW 319
46042: PUSH
46043: LD_VAR 0 28
46047: IN
46048: IFFALSE 46052
// continue ;
46050: GO 44143
// k := 8 ;
46052: LD_ADDR_VAR 0 9
46056: PUSH
46057: LD_INT 8
46059: ST_TO_ADDR
// x := 0 ;
46060: LD_ADDR_VAR 0 10
46064: PUSH
46065: LD_INT 0
46067: ST_TO_ADDR
// if tmp < k then
46068: LD_VAR 0 14
46072: PUSH
46073: LD_VAR 0 9
46077: LESS
46078: IFFALSE 46090
// k := tmp ;
46080: LD_ADDR_VAR 0 9
46084: PUSH
46085: LD_VAR 0 14
46089: ST_TO_ADDR
// for j = 1 to k do
46090: LD_ADDR_VAR 0 8
46094: PUSH
46095: DOUBLE
46096: LD_INT 1
46098: DEC
46099: ST_TO_ADDR
46100: LD_VAR 0 9
46104: PUSH
46105: FOR_TO
46106: IFFALSE 46238
// begin if GetType ( tmp [ j ] ) = unit_building then
46108: LD_VAR 0 14
46112: PUSH
46113: LD_VAR 0 8
46117: ARRAY
46118: PPUSH
46119: CALL_OW 247
46123: PUSH
46124: LD_INT 3
46126: EQUAL
46127: IFFALSE 46236
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
46129: LD_VAR 0 14
46133: PUSH
46134: LD_VAR 0 8
46138: ARRAY
46139: PUSH
46140: LD_VAR 0 28
46144: IN
46145: NOT
46146: PUSH
46147: LD_VAR 0 14
46151: PUSH
46152: LD_VAR 0 8
46156: ARRAY
46157: PPUSH
46158: CALL_OW 313
46162: AND
46163: IFFALSE 46236
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
46165: LD_VAR 0 4
46169: PUSH
46170: LD_VAR 0 7
46174: ARRAY
46175: PPUSH
46176: LD_VAR 0 14
46180: PUSH
46181: LD_VAR 0 8
46185: ARRAY
46186: PPUSH
46187: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
46191: LD_ADDR_VAR 0 28
46195: PUSH
46196: LD_VAR 0 28
46200: PPUSH
46201: LD_VAR 0 28
46205: PUSH
46206: LD_INT 1
46208: PLUS
46209: PPUSH
46210: LD_VAR 0 14
46214: PUSH
46215: LD_VAR 0 8
46219: ARRAY
46220: PPUSH
46221: CALL_OW 1
46225: ST_TO_ADDR
// attacking := true ;
46226: LD_ADDR_VAR 0 29
46230: PUSH
46231: LD_INT 1
46233: ST_TO_ADDR
// break ;
46234: GO 46238
// end ; end ;
46236: GO 46105
46238: POP
46239: POP
// if not attacking and f_attack_depot then
46240: LD_VAR 0 29
46244: NOT
46245: PUSH
46246: LD_VAR 0 25
46250: AND
46251: IFFALSE 46346
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
46253: LD_ADDR_VAR 0 13
46257: PUSH
46258: LD_VAR 0 14
46262: PPUSH
46263: LD_INT 2
46265: PUSH
46266: LD_INT 30
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 30
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: PPUSH
46291: CALL_OW 72
46295: ST_TO_ADDR
// if z then
46296: LD_VAR 0 13
46300: IFFALSE 46346
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
46302: LD_VAR 0 4
46306: PUSH
46307: LD_VAR 0 7
46311: ARRAY
46312: PPUSH
46313: LD_VAR 0 13
46317: PPUSH
46318: LD_VAR 0 4
46322: PUSH
46323: LD_VAR 0 7
46327: ARRAY
46328: PPUSH
46329: CALL_OW 74
46333: PPUSH
46334: CALL_OW 115
// attacking := true ;
46338: LD_ADDR_VAR 0 29
46342: PUSH
46343: LD_INT 1
46345: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
46346: LD_VAR 0 4
46350: PUSH
46351: LD_VAR 0 7
46355: ARRAY
46356: PPUSH
46357: CALL_OW 256
46361: PUSH
46362: LD_INT 500
46364: LESS
46365: IFFALSE 46391
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
46367: LD_VAR 0 4
46371: PUSH
46372: LD_VAR 0 7
46376: ARRAY
46377: PPUSH
46378: LD_VAR 0 14
46382: PUSH
46383: LD_INT 1
46385: ARRAY
46386: PPUSH
46387: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
46391: LD_VAR 0 4
46395: PUSH
46396: LD_VAR 0 7
46400: ARRAY
46401: PPUSH
46402: CALL_OW 256
46406: PUSH
46407: LD_INT 250
46409: LESS
46410: PUSH
46411: LD_VAR 0 4
46415: PUSH
46416: LD_VAR 0 7
46420: ARRAY
46421: PUSH
46422: LD_INT 21
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 23
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PPUSH
46446: CALL_OW 69
46450: IN
46451: AND
46452: IFFALSE 46577
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
46454: LD_ADDR_VAR 0 9
46458: PUSH
46459: LD_OWVAR 3
46463: PUSH
46464: LD_VAR 0 4
46468: PUSH
46469: LD_VAR 0 7
46473: ARRAY
46474: DIFF
46475: PPUSH
46476: LD_VAR 0 4
46480: PUSH
46481: LD_VAR 0 7
46485: ARRAY
46486: PPUSH
46487: CALL_OW 74
46491: ST_TO_ADDR
// if not k then
46492: LD_VAR 0 9
46496: NOT
46497: IFFALSE 46501
// continue ;
46499: GO 44143
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
46501: LD_VAR 0 9
46505: PUSH
46506: LD_INT 81
46508: PUSH
46509: LD_VAR 0 4
46513: PUSH
46514: LD_VAR 0 7
46518: ARRAY
46519: PPUSH
46520: CALL_OW 255
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PPUSH
46529: CALL_OW 69
46533: IN
46534: PUSH
46535: LD_VAR 0 9
46539: PPUSH
46540: LD_VAR 0 4
46544: PUSH
46545: LD_VAR 0 7
46549: ARRAY
46550: PPUSH
46551: CALL_OW 296
46555: PUSH
46556: LD_INT 5
46558: LESS
46559: AND
46560: IFFALSE 46577
// ComAutodestruct ( group [ i ] ) ;
46562: LD_VAR 0 4
46566: PUSH
46567: LD_VAR 0 7
46571: ARRAY
46572: PPUSH
46573: CALL 42525 0 1
// end ; if f_attack_depot then
46577: LD_VAR 0 25
46581: IFFALSE 46693
// begin k := 6 ;
46583: LD_ADDR_VAR 0 9
46587: PUSH
46588: LD_INT 6
46590: ST_TO_ADDR
// if tmp < k then
46591: LD_VAR 0 14
46595: PUSH
46596: LD_VAR 0 9
46600: LESS
46601: IFFALSE 46613
// k := tmp ;
46603: LD_ADDR_VAR 0 9
46607: PUSH
46608: LD_VAR 0 14
46612: ST_TO_ADDR
// for j = 1 to k do
46613: LD_ADDR_VAR 0 8
46617: PUSH
46618: DOUBLE
46619: LD_INT 1
46621: DEC
46622: ST_TO_ADDR
46623: LD_VAR 0 9
46627: PUSH
46628: FOR_TO
46629: IFFALSE 46691
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
46631: LD_VAR 0 8
46635: PPUSH
46636: CALL_OW 266
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: IN
46651: IFFALSE 46689
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
46653: LD_VAR 0 4
46657: PUSH
46658: LD_VAR 0 7
46662: ARRAY
46663: PPUSH
46664: LD_VAR 0 14
46668: PUSH
46669: LD_VAR 0 8
46673: ARRAY
46674: PPUSH
46675: CALL_OW 115
// attacking := true ;
46679: LD_ADDR_VAR 0 29
46683: PUSH
46684: LD_INT 1
46686: ST_TO_ADDR
// break ;
46687: GO 46691
// end ;
46689: GO 46628
46691: POP
46692: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
46693: LD_VAR 0 4
46697: PUSH
46698: LD_VAR 0 7
46702: ARRAY
46703: PPUSH
46704: CALL_OW 302
46708: PUSH
46709: LD_VAR 0 29
46713: NOT
46714: AND
46715: IFFALSE 47037
// begin if GetTag ( group [ i ] ) = 71 then
46717: LD_VAR 0 4
46721: PUSH
46722: LD_VAR 0 7
46726: ARRAY
46727: PPUSH
46728: CALL_OW 110
46732: PUSH
46733: LD_INT 71
46735: EQUAL
46736: IFFALSE 46777
// begin if HasTask ( group [ i ] ) then
46738: LD_VAR 0 4
46742: PUSH
46743: LD_VAR 0 7
46747: ARRAY
46748: PPUSH
46749: CALL_OW 314
46753: IFFALSE 46759
// continue else
46755: GO 44143
46757: GO 46777
// SetTag ( group [ i ] , 0 ) ;
46759: LD_VAR 0 4
46763: PUSH
46764: LD_VAR 0 7
46768: ARRAY
46769: PPUSH
46770: LD_INT 0
46772: PPUSH
46773: CALL_OW 109
// end ; k := 8 ;
46777: LD_ADDR_VAR 0 9
46781: PUSH
46782: LD_INT 8
46784: ST_TO_ADDR
// x := 0 ;
46785: LD_ADDR_VAR 0 10
46789: PUSH
46790: LD_INT 0
46792: ST_TO_ADDR
// if tmp < k then
46793: LD_VAR 0 14
46797: PUSH
46798: LD_VAR 0 9
46802: LESS
46803: IFFALSE 46815
// k := tmp ;
46805: LD_ADDR_VAR 0 9
46809: PUSH
46810: LD_VAR 0 14
46814: ST_TO_ADDR
// for j = 1 to k do
46815: LD_ADDR_VAR 0 8
46819: PUSH
46820: DOUBLE
46821: LD_INT 1
46823: DEC
46824: ST_TO_ADDR
46825: LD_VAR 0 9
46829: PUSH
46830: FOR_TO
46831: IFFALSE 46929
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
46833: LD_VAR 0 14
46837: PUSH
46838: LD_VAR 0 8
46842: ARRAY
46843: PPUSH
46844: CALL_OW 247
46848: PUSH
46849: LD_INT 1
46851: EQUAL
46852: PUSH
46853: LD_VAR 0 14
46857: PUSH
46858: LD_VAR 0 8
46862: ARRAY
46863: PPUSH
46864: CALL_OW 256
46868: PUSH
46869: LD_INT 250
46871: LESS
46872: PUSH
46873: LD_VAR 0 20
46877: AND
46878: PUSH
46879: LD_VAR 0 20
46883: NOT
46884: PUSH
46885: LD_VAR 0 14
46889: PUSH
46890: LD_VAR 0 8
46894: ARRAY
46895: PPUSH
46896: CALL_OW 256
46900: PUSH
46901: LD_INT 250
46903: GREATEREQUAL
46904: AND
46905: OR
46906: AND
46907: IFFALSE 46927
// begin x := tmp [ j ] ;
46909: LD_ADDR_VAR 0 10
46913: PUSH
46914: LD_VAR 0 14
46918: PUSH
46919: LD_VAR 0 8
46923: ARRAY
46924: ST_TO_ADDR
// break ;
46925: GO 46929
// end ;
46927: GO 46830
46929: POP
46930: POP
// if x then
46931: LD_VAR 0 10
46935: IFFALSE 46959
// ComAttackUnit ( group [ i ] , x ) else
46937: LD_VAR 0 4
46941: PUSH
46942: LD_VAR 0 7
46946: ARRAY
46947: PPUSH
46948: LD_VAR 0 10
46952: PPUSH
46953: CALL_OW 115
46957: GO 46983
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
46959: LD_VAR 0 4
46963: PUSH
46964: LD_VAR 0 7
46968: ARRAY
46969: PPUSH
46970: LD_VAR 0 14
46974: PUSH
46975: LD_INT 1
46977: ARRAY
46978: PPUSH
46979: CALL_OW 115
// if not HasTask ( group [ i ] ) then
46983: LD_VAR 0 4
46987: PUSH
46988: LD_VAR 0 7
46992: ARRAY
46993: PPUSH
46994: CALL_OW 314
46998: NOT
46999: IFFALSE 47037
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
47001: LD_VAR 0 4
47005: PUSH
47006: LD_VAR 0 7
47010: ARRAY
47011: PPUSH
47012: LD_VAR 0 14
47016: PPUSH
47017: LD_VAR 0 4
47021: PUSH
47022: LD_VAR 0 7
47026: ARRAY
47027: PPUSH
47028: CALL_OW 74
47032: PPUSH
47033: CALL_OW 115
// end ; end ; end ;
47037: GO 44143
47039: POP
47040: POP
// wait ( 0 0$1 ) ;
47041: LD_INT 35
47043: PPUSH
47044: CALL_OW 67
// until group = [ ] ;
47048: LD_VAR 0 4
47052: PUSH
47053: EMPTY
47054: EQUAL
47055: IFFALSE 44128
// end ;
47057: LD_VAR 0 2
47061: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
47062: LD_INT 0
47064: PPUSH
47065: PPUSH
47066: PPUSH
47067: PPUSH
// if not base_units then
47068: LD_VAR 0 1
47072: NOT
47073: IFFALSE 47077
// exit ;
47075: GO 47164
// result := false ;
47077: LD_ADDR_VAR 0 2
47081: PUSH
47082: LD_INT 0
47084: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47085: LD_ADDR_VAR 0 5
47089: PUSH
47090: LD_VAR 0 1
47094: PPUSH
47095: LD_INT 21
47097: PUSH
47098: LD_INT 3
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PPUSH
47105: CALL_OW 72
47109: ST_TO_ADDR
// if not tmp then
47110: LD_VAR 0 5
47114: NOT
47115: IFFALSE 47119
// exit ;
47117: GO 47164
// for i in tmp do
47119: LD_ADDR_VAR 0 3
47123: PUSH
47124: LD_VAR 0 5
47128: PUSH
47129: FOR_IN
47130: IFFALSE 47162
// begin result := EnemyInRange ( i , 22 ) ;
47132: LD_ADDR_VAR 0 2
47136: PUSH
47137: LD_VAR 0 3
47141: PPUSH
47142: LD_INT 22
47144: PPUSH
47145: CALL 42208 0 2
47149: ST_TO_ADDR
// if result then
47150: LD_VAR 0 2
47154: IFFALSE 47160
// exit ;
47156: POP
47157: POP
47158: GO 47164
// end ;
47160: GO 47129
47162: POP
47163: POP
// end ;
47164: LD_VAR 0 2
47168: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
47169: LD_INT 0
47171: PPUSH
47172: PPUSH
// if not units then
47173: LD_VAR 0 1
47177: NOT
47178: IFFALSE 47182
// exit ;
47180: GO 47252
// result := [ ] ;
47182: LD_ADDR_VAR 0 3
47186: PUSH
47187: EMPTY
47188: ST_TO_ADDR
// for i in units do
47189: LD_ADDR_VAR 0 4
47193: PUSH
47194: LD_VAR 0 1
47198: PUSH
47199: FOR_IN
47200: IFFALSE 47250
// if GetTag ( i ) = tag then
47202: LD_VAR 0 4
47206: PPUSH
47207: CALL_OW 110
47211: PUSH
47212: LD_VAR 0 2
47216: EQUAL
47217: IFFALSE 47248
// result := Insert ( result , result + 1 , i ) ;
47219: LD_ADDR_VAR 0 3
47223: PUSH
47224: LD_VAR 0 3
47228: PPUSH
47229: LD_VAR 0 3
47233: PUSH
47234: LD_INT 1
47236: PLUS
47237: PPUSH
47238: LD_VAR 0 4
47242: PPUSH
47243: CALL_OW 2
47247: ST_TO_ADDR
47248: GO 47199
47250: POP
47251: POP
// end ;
47252: LD_VAR 0 3
47256: RET
// export function IsDriver ( un ) ; begin
47257: LD_INT 0
47259: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47260: LD_ADDR_VAR 0 2
47264: PUSH
47265: LD_VAR 0 1
47269: PUSH
47270: LD_INT 55
47272: PUSH
47273: EMPTY
47274: LIST
47275: PPUSH
47276: CALL_OW 69
47280: IN
47281: ST_TO_ADDR
// end ; end_of_file
47282: LD_VAR 0 2
47286: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit ; export function InitMacro ; var i ; begin
47287: LD_INT 0
47289: PPUSH
47290: PPUSH
// skirmish := false ;
47291: LD_ADDR_EXP 40
47295: PUSH
47296: LD_INT 0
47298: ST_TO_ADDR
// mc_bases := [ ] ;
47299: LD_ADDR_EXP 41
47303: PUSH
47304: EMPTY
47305: ST_TO_ADDR
// mc_sides := [ ] ;
47306: LD_ADDR_EXP 67
47310: PUSH
47311: EMPTY
47312: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
47313: LD_ADDR_EXP 42
47317: PUSH
47318: EMPTY
47319: ST_TO_ADDR
// mc_building_repairs := [ ] ;
47320: LD_ADDR_EXP 43
47324: PUSH
47325: EMPTY
47326: ST_TO_ADDR
// mc_need_heal := [ ] ;
47327: LD_ADDR_EXP 44
47331: PUSH
47332: EMPTY
47333: ST_TO_ADDR
// mc_healers := [ ] ;
47334: LD_ADDR_EXP 45
47338: PUSH
47339: EMPTY
47340: ST_TO_ADDR
// mc_build_list := [ ] ;
47341: LD_ADDR_EXP 46
47345: PUSH
47346: EMPTY
47347: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
47348: LD_ADDR_EXP 73
47352: PUSH
47353: EMPTY
47354: ST_TO_ADDR
// mc_builders := [ ] ;
47355: LD_ADDR_EXP 47
47359: PUSH
47360: EMPTY
47361: ST_TO_ADDR
// mc_construct_list := [ ] ;
47362: LD_ADDR_EXP 48
47366: PUSH
47367: EMPTY
47368: ST_TO_ADDR
// mc_turret_list := [ ] ;
47369: LD_ADDR_EXP 49
47373: PUSH
47374: EMPTY
47375: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
47376: LD_ADDR_EXP 50
47380: PUSH
47381: EMPTY
47382: ST_TO_ADDR
// mc_miners := [ ] ;
47383: LD_ADDR_EXP 55
47387: PUSH
47388: EMPTY
47389: ST_TO_ADDR
// mc_mines := [ ] ;
47390: LD_ADDR_EXP 54
47394: PUSH
47395: EMPTY
47396: ST_TO_ADDR
// mc_minefields := [ ] ;
47397: LD_ADDR_EXP 56
47401: PUSH
47402: EMPTY
47403: ST_TO_ADDR
// mc_crates := [ ] ;
47404: LD_ADDR_EXP 57
47408: PUSH
47409: EMPTY
47410: ST_TO_ADDR
// mc_crates_collector := [ ] ;
47411: LD_ADDR_EXP 58
47415: PUSH
47416: EMPTY
47417: ST_TO_ADDR
// mc_crates_area := [ ] ;
47418: LD_ADDR_EXP 59
47422: PUSH
47423: EMPTY
47424: ST_TO_ADDR
// mc_vehicles := [ ] ;
47425: LD_ADDR_EXP 60
47429: PUSH
47430: EMPTY
47431: ST_TO_ADDR
// mc_attack := [ ] ;
47432: LD_ADDR_EXP 61
47436: PUSH
47437: EMPTY
47438: ST_TO_ADDR
// mc_produce := [ ] ;
47439: LD_ADDR_EXP 62
47443: PUSH
47444: EMPTY
47445: ST_TO_ADDR
// mc_defender := [ ] ;
47446: LD_ADDR_EXP 63
47450: PUSH
47451: EMPTY
47452: ST_TO_ADDR
// mc_parking := [ ] ;
47453: LD_ADDR_EXP 65
47457: PUSH
47458: EMPTY
47459: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
47460: LD_ADDR_EXP 51
47464: PUSH
47465: EMPTY
47466: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
47467: LD_ADDR_EXP 53
47471: PUSH
47472: EMPTY
47473: ST_TO_ADDR
// mc_scan := [ ] ;
47474: LD_ADDR_EXP 64
47478: PUSH
47479: EMPTY
47480: ST_TO_ADDR
// mc_scan_area := [ ] ;
47481: LD_ADDR_EXP 66
47485: PUSH
47486: EMPTY
47487: ST_TO_ADDR
// mc_tech := [ ] ;
47488: LD_ADDR_EXP 68
47492: PUSH
47493: EMPTY
47494: ST_TO_ADDR
// end ;
47495: LD_VAR 0 1
47499: RET
// export function MC_Start ( ) ; var i ; begin
47500: LD_INT 0
47502: PPUSH
47503: PPUSH
// for i = 1 to mc_bases do
47504: LD_ADDR_VAR 0 2
47508: PUSH
47509: DOUBLE
47510: LD_INT 1
47512: DEC
47513: ST_TO_ADDR
47514: LD_EXP 41
47518: PUSH
47519: FOR_TO
47520: IFFALSE 48365
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
47522: LD_ADDR_EXP 42
47526: PUSH
47527: LD_EXP 42
47531: PPUSH
47532: LD_VAR 0 2
47536: PPUSH
47537: EMPTY
47538: PPUSH
47539: CALL_OW 1
47543: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
47544: LD_ADDR_EXP 43
47548: PUSH
47549: LD_EXP 43
47553: PPUSH
47554: LD_VAR 0 2
47558: PPUSH
47559: EMPTY
47560: PPUSH
47561: CALL_OW 1
47565: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
47566: LD_ADDR_EXP 44
47570: PUSH
47571: LD_EXP 44
47575: PPUSH
47576: LD_VAR 0 2
47580: PPUSH
47581: EMPTY
47582: PPUSH
47583: CALL_OW 1
47587: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
47588: LD_ADDR_EXP 45
47592: PUSH
47593: LD_EXP 45
47597: PPUSH
47598: LD_VAR 0 2
47602: PPUSH
47603: EMPTY
47604: PUSH
47605: EMPTY
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PPUSH
47611: CALL_OW 1
47615: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
47616: LD_ADDR_EXP 46
47620: PUSH
47621: LD_EXP 46
47625: PPUSH
47626: LD_VAR 0 2
47630: PPUSH
47631: EMPTY
47632: PPUSH
47633: CALL_OW 1
47637: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
47638: LD_ADDR_EXP 73
47642: PUSH
47643: LD_EXP 73
47647: PPUSH
47648: LD_VAR 0 2
47652: PPUSH
47653: EMPTY
47654: PPUSH
47655: CALL_OW 1
47659: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
47660: LD_ADDR_EXP 47
47664: PUSH
47665: LD_EXP 47
47669: PPUSH
47670: LD_VAR 0 2
47674: PPUSH
47675: EMPTY
47676: PPUSH
47677: CALL_OW 1
47681: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
47682: LD_ADDR_EXP 48
47686: PUSH
47687: LD_EXP 48
47691: PPUSH
47692: LD_VAR 0 2
47696: PPUSH
47697: EMPTY
47698: PPUSH
47699: CALL_OW 1
47703: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
47704: LD_ADDR_EXP 49
47708: PUSH
47709: LD_EXP 49
47713: PPUSH
47714: LD_VAR 0 2
47718: PPUSH
47719: EMPTY
47720: PPUSH
47721: CALL_OW 1
47725: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
47726: LD_ADDR_EXP 50
47730: PUSH
47731: LD_EXP 50
47735: PPUSH
47736: LD_VAR 0 2
47740: PPUSH
47741: LD_EXP 41
47745: PUSH
47746: LD_VAR 0 2
47750: ARRAY
47751: PPUSH
47752: LD_INT 2
47754: PUSH
47755: LD_INT 30
47757: PUSH
47758: LD_INT 32
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 30
47767: PUSH
47768: LD_INT 31
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 58
47782: PUSH
47783: EMPTY
47784: LIST
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PPUSH
47790: CALL_OW 72
47794: PPUSH
47795: CALL_OW 1
47799: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
47800: LD_ADDR_EXP 51
47804: PUSH
47805: LD_EXP 51
47809: PPUSH
47810: LD_VAR 0 2
47814: PPUSH
47815: EMPTY
47816: PPUSH
47817: CALL_OW 1
47821: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
47822: LD_ADDR_EXP 55
47826: PUSH
47827: LD_EXP 55
47831: PPUSH
47832: LD_VAR 0 2
47836: PPUSH
47837: EMPTY
47838: PPUSH
47839: CALL_OW 1
47843: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
47844: LD_ADDR_EXP 54
47848: PUSH
47849: LD_EXP 54
47853: PPUSH
47854: LD_VAR 0 2
47858: PPUSH
47859: EMPTY
47860: PPUSH
47861: CALL_OW 1
47865: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
47866: LD_ADDR_EXP 56
47870: PUSH
47871: LD_EXP 56
47875: PPUSH
47876: LD_VAR 0 2
47880: PPUSH
47881: EMPTY
47882: PPUSH
47883: CALL_OW 1
47887: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
47888: LD_ADDR_EXP 57
47892: PUSH
47893: LD_EXP 57
47897: PPUSH
47898: LD_VAR 0 2
47902: PPUSH
47903: EMPTY
47904: PPUSH
47905: CALL_OW 1
47909: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
47910: LD_ADDR_EXP 58
47914: PUSH
47915: LD_EXP 58
47919: PPUSH
47920: LD_VAR 0 2
47924: PPUSH
47925: EMPTY
47926: PPUSH
47927: CALL_OW 1
47931: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
47932: LD_ADDR_EXP 59
47936: PUSH
47937: LD_EXP 59
47941: PPUSH
47942: LD_VAR 0 2
47946: PPUSH
47947: EMPTY
47948: PPUSH
47949: CALL_OW 1
47953: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
47954: LD_ADDR_EXP 60
47958: PUSH
47959: LD_EXP 60
47963: PPUSH
47964: LD_VAR 0 2
47968: PPUSH
47969: EMPTY
47970: PPUSH
47971: CALL_OW 1
47975: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
47976: LD_ADDR_EXP 61
47980: PUSH
47981: LD_EXP 61
47985: PPUSH
47986: LD_VAR 0 2
47990: PPUSH
47991: EMPTY
47992: PPUSH
47993: CALL_OW 1
47997: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
47998: LD_ADDR_EXP 62
48002: PUSH
48003: LD_EXP 62
48007: PPUSH
48008: LD_VAR 0 2
48012: PPUSH
48013: EMPTY
48014: PPUSH
48015: CALL_OW 1
48019: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
48020: LD_ADDR_EXP 63
48024: PUSH
48025: LD_EXP 63
48029: PPUSH
48030: LD_VAR 0 2
48034: PPUSH
48035: EMPTY
48036: PPUSH
48037: CALL_OW 1
48041: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
48042: LD_ADDR_EXP 52
48046: PUSH
48047: LD_EXP 52
48051: PPUSH
48052: LD_VAR 0 2
48056: PPUSH
48057: LD_INT 0
48059: PPUSH
48060: CALL_OW 1
48064: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
48065: LD_ADDR_EXP 65
48069: PUSH
48070: LD_EXP 65
48074: PPUSH
48075: LD_VAR 0 2
48079: PPUSH
48080: LD_INT 0
48082: PPUSH
48083: CALL_OW 1
48087: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
48088: LD_ADDR_EXP 53
48092: PUSH
48093: LD_EXP 53
48097: PPUSH
48098: LD_VAR 0 2
48102: PPUSH
48103: EMPTY
48104: PPUSH
48105: CALL_OW 1
48109: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
48110: LD_ADDR_EXP 64
48114: PUSH
48115: LD_EXP 64
48119: PPUSH
48120: LD_VAR 0 2
48124: PPUSH
48125: LD_INT 0
48127: PPUSH
48128: CALL_OW 1
48132: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
48133: LD_ADDR_EXP 66
48137: PUSH
48138: LD_EXP 66
48142: PPUSH
48143: LD_VAR 0 2
48147: PPUSH
48148: EMPTY
48149: PPUSH
48150: CALL_OW 1
48154: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
48155: LD_ADDR_EXP 69
48159: PUSH
48160: LD_EXP 69
48164: PPUSH
48165: LD_VAR 0 2
48169: PPUSH
48170: LD_INT 0
48172: PPUSH
48173: CALL_OW 1
48177: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
48178: LD_ADDR_EXP 70
48182: PUSH
48183: LD_EXP 70
48187: PPUSH
48188: LD_VAR 0 2
48192: PPUSH
48193: EMPTY
48194: PPUSH
48195: CALL_OW 1
48199: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
48200: LD_ADDR_EXP 71
48204: PUSH
48205: LD_EXP 71
48209: PPUSH
48210: LD_VAR 0 2
48214: PPUSH
48215: EMPTY
48216: PPUSH
48217: CALL_OW 1
48221: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
48222: LD_ADDR_EXP 72
48226: PUSH
48227: LD_EXP 72
48231: PPUSH
48232: LD_VAR 0 2
48236: PPUSH
48237: EMPTY
48238: PPUSH
48239: CALL_OW 1
48243: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
48244: LD_ADDR_EXP 74
48248: PUSH
48249: LD_EXP 74
48253: PPUSH
48254: LD_VAR 0 2
48258: PPUSH
48259: LD_EXP 41
48263: PUSH
48264: LD_VAR 0 2
48268: ARRAY
48269: PPUSH
48270: LD_INT 2
48272: PUSH
48273: LD_INT 30
48275: PUSH
48276: LD_INT 6
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 30
48285: PUSH
48286: LD_INT 7
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 30
48295: PUSH
48296: LD_INT 8
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: PPUSH
48309: CALL_OW 72
48313: PPUSH
48314: CALL_OW 1
48318: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
48319: LD_ADDR_EXP 75
48323: PUSH
48324: LD_EXP 75
48328: PPUSH
48329: LD_VAR 0 2
48333: PPUSH
48334: EMPTY
48335: PPUSH
48336: CALL_OW 1
48340: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
48341: LD_ADDR_EXP 76
48345: PUSH
48346: LD_EXP 76
48350: PPUSH
48351: LD_VAR 0 2
48355: PPUSH
48356: EMPTY
48357: PPUSH
48358: CALL_OW 1
48362: ST_TO_ADDR
// end ;
48363: GO 47519
48365: POP
48366: POP
// MC_InitSides ( ) ;
48367: CALL 56971 0 0
// MC_InitResearch ( ) ;
48371: CALL 56710 0 0
// CustomInitMacro ( ) ;
48375: CALL 101 0 0
// skirmish := true ;
48379: LD_ADDR_EXP 40
48383: PUSH
48384: LD_INT 1
48386: ST_TO_ADDR
// end ;
48387: LD_VAR 0 1
48391: RET
// every 0 0$01 trigger skirmish do
48392: LD_EXP 40
48396: IFFALSE 48515
48398: GO 48400
48400: DISABLE
// begin enable ;
48401: ENABLE
// MC_CheckBuildings ( ) ;
48402: CALL 48960 0 0
// MC_CheckPeopleLife ( ) ;
48406: CALL 49085 0 0
// RaiseSailEvent ( 103 ) ;
48410: LD_INT 103
48412: PPUSH
48413: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
48417: LD_INT 104
48419: PPUSH
48420: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
48424: LD_INT 105
48426: PPUSH
48427: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
48431: LD_INT 106
48433: PPUSH
48434: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
48438: LD_INT 107
48440: PPUSH
48441: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
48445: LD_INT 108
48447: PPUSH
48448: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
48452: LD_INT 109
48454: PPUSH
48455: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
48459: LD_INT 110
48461: PPUSH
48462: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
48466: LD_INT 111
48468: PPUSH
48469: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
48473: LD_INT 112
48475: PPUSH
48476: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
48480: LD_INT 120
48482: PPUSH
48483: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
48487: LD_INT 121
48489: PPUSH
48490: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
48494: LD_INT 122
48496: PPUSH
48497: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
48501: LD_INT 123
48503: PPUSH
48504: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
48508: LD_INT 200
48510: PPUSH
48511: CALL_OW 427
// end ;
48515: END
// every 10 trigger skirmish do var i ;
48516: LD_EXP 40
48520: IFFALSE 48619
48522: GO 48524
48524: DISABLE
48525: LD_INT 0
48527: PPUSH
// begin enable ;
48528: ENABLE
// if not mc_bases then
48529: LD_EXP 41
48533: NOT
48534: IFFALSE 48538
// exit ;
48536: GO 48619
// for i = 1 to mc_bases do
48538: LD_ADDR_VAR 0 1
48542: PUSH
48543: DOUBLE
48544: LD_INT 1
48546: DEC
48547: ST_TO_ADDR
48548: LD_EXP 41
48552: PUSH
48553: FOR_TO
48554: IFFALSE 48617
// if mc_mines [ i ] and mc_miners [ i ] then
48556: LD_EXP 54
48560: PUSH
48561: LD_VAR 0 1
48565: ARRAY
48566: PUSH
48567: LD_EXP 55
48571: PUSH
48572: LD_VAR 0 1
48576: ARRAY
48577: AND
48578: IFFALSE 48615
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
48580: LD_EXP 55
48584: PUSH
48585: LD_VAR 0 1
48589: ARRAY
48590: PUSH
48591: LD_INT 1
48593: ARRAY
48594: PPUSH
48595: CALL_OW 255
48599: PPUSH
48600: LD_EXP 54
48604: PUSH
48605: LD_VAR 0 1
48609: ARRAY
48610: PPUSH
48611: CALL 13039 0 2
48615: GO 48553
48617: POP
48618: POP
// end ;
48619: PPOPN 1
48621: END
// on SailEvent ( event ) do begin if event = 101 then
48622: LD_VAR 0 1
48626: PUSH
48627: LD_INT 101
48629: EQUAL
48630: IFFALSE 48636
// MC_RepairBuildings ( ) ;
48632: CALL 49643 0 0
// if event = 102 then
48636: LD_VAR 0 1
48640: PUSH
48641: LD_INT 102
48643: EQUAL
48644: IFFALSE 48650
// MC_Heal ( ) ;
48646: CALL 50049 0 0
// if event = 103 then
48650: LD_VAR 0 1
48654: PUSH
48655: LD_INT 103
48657: EQUAL
48658: IFFALSE 48664
// MC_Build ( ) ;
48660: CALL 50471 0 0
// if event = 104 then
48664: LD_VAR 0 1
48668: PUSH
48669: LD_INT 104
48671: EQUAL
48672: IFFALSE 48678
// MC_TurretWeapon ( ) ;
48674: CALL 51837 0 0
// if event = 105 then
48678: LD_VAR 0 1
48682: PUSH
48683: LD_INT 105
48685: EQUAL
48686: IFFALSE 48692
// MC_BuildUpgrade ( ) ;
48688: CALL 51388 0 0
// if event = 106 then
48692: LD_VAR 0 1
48696: PUSH
48697: LD_INT 106
48699: EQUAL
48700: IFFALSE 48706
// MC_PlantMines ( ) ;
48702: CALL 52156 0 0
// if event = 107 then
48706: LD_VAR 0 1
48710: PUSH
48711: LD_INT 107
48713: EQUAL
48714: IFFALSE 48720
// MC_CollectCrates ( ) ;
48716: CALL 53163 0 0
// if event = 108 then
48720: LD_VAR 0 1
48724: PUSH
48725: LD_INT 108
48727: EQUAL
48728: IFFALSE 48734
// MC_LinkRemoteControl ( ) ;
48730: CALL 54573 0 0
// if event = 109 then
48734: LD_VAR 0 1
48738: PUSH
48739: LD_INT 109
48741: EQUAL
48742: IFFALSE 48748
// MC_ProduceVehicle ( ) ;
48744: CALL 54754 0 0
// if event = 110 then
48748: LD_VAR 0 1
48752: PUSH
48753: LD_INT 110
48755: EQUAL
48756: IFFALSE 48762
// MC_SendAttack ( ) ;
48758: CALL 55235 0 0
// if event = 111 then
48762: LD_VAR 0 1
48766: PUSH
48767: LD_INT 111
48769: EQUAL
48770: IFFALSE 48776
// MC_Defend ( ) ;
48772: CALL 55343 0 0
// if event = 112 then
48776: LD_VAR 0 1
48780: PUSH
48781: LD_INT 112
48783: EQUAL
48784: IFFALSE 48790
// MC_Research ( ) ;
48786: CALL 55741 0 0
// if event = 120 then
48790: LD_VAR 0 1
48794: PUSH
48795: LD_INT 120
48797: EQUAL
48798: IFFALSE 48804
// MC_RepairVehicle ( ) ;
48800: CALL 57063 0 0
// if event = 121 then
48804: LD_VAR 0 1
48808: PUSH
48809: LD_INT 121
48811: EQUAL
48812: IFFALSE 48818
// MC_TameApe ( ) ;
48814: CALL 57732 0 0
// if event = 122 then
48818: LD_VAR 0 1
48822: PUSH
48823: LD_INT 122
48825: EQUAL
48826: IFFALSE 48832
// MC_ChangeApeClass ( ) ;
48828: CALL 58377 0 0
// if event = 123 then
48832: LD_VAR 0 1
48836: PUSH
48837: LD_INT 123
48839: EQUAL
48840: IFFALSE 48846
// MC_Bazooka ( ) ;
48842: CALL 59011 0 0
// if event = 124 then
48846: LD_VAR 0 1
48850: PUSH
48851: LD_INT 124
48853: EQUAL
48854: IFFALSE 48860
// MC_TeleportExit ( ) ;
48856: CALL 59209 0 0
// if event = 200 then
48860: LD_VAR 0 1
48864: PUSH
48865: LD_INT 200
48867: EQUAL
48868: IFFALSE 48874
// MC_Idle ( ) ;
48870: CALL 60233 0 0
// end ;
48874: PPOPN 1
48876: END
// export function MC_Reset ( base , tag ) ; var i ; begin
48877: LD_INT 0
48879: PPUSH
48880: PPUSH
// if not mc_bases [ base ] or not tag then
48881: LD_EXP 41
48885: PUSH
48886: LD_VAR 0 1
48890: ARRAY
48891: NOT
48892: PUSH
48893: LD_VAR 0 2
48897: NOT
48898: OR
48899: IFFALSE 48903
// exit ;
48901: GO 48955
// for i in mc_bases [ base ] do
48903: LD_ADDR_VAR 0 4
48907: PUSH
48908: LD_EXP 41
48912: PUSH
48913: LD_VAR 0 1
48917: ARRAY
48918: PUSH
48919: FOR_IN
48920: IFFALSE 48953
// if GetTag ( i ) = tag then
48922: LD_VAR 0 4
48926: PPUSH
48927: CALL_OW 110
48931: PUSH
48932: LD_VAR 0 2
48936: EQUAL
48937: IFFALSE 48951
// SetTag ( i , 0 ) ;
48939: LD_VAR 0 4
48943: PPUSH
48944: LD_INT 0
48946: PPUSH
48947: CALL_OW 109
48951: GO 48919
48953: POP
48954: POP
// end ;
48955: LD_VAR 0 3
48959: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
48960: LD_INT 0
48962: PPUSH
48963: PPUSH
48964: PPUSH
// if not mc_bases then
48965: LD_EXP 41
48969: NOT
48970: IFFALSE 48974
// exit ;
48972: GO 49080
// for i = 1 to mc_bases do
48974: LD_ADDR_VAR 0 2
48978: PUSH
48979: DOUBLE
48980: LD_INT 1
48982: DEC
48983: ST_TO_ADDR
48984: LD_EXP 41
48988: PUSH
48989: FOR_TO
48990: IFFALSE 49071
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
48992: LD_ADDR_VAR 0 3
48996: PUSH
48997: LD_EXP 41
49001: PUSH
49002: LD_VAR 0 2
49006: ARRAY
49007: PPUSH
49008: LD_INT 21
49010: PUSH
49011: LD_INT 3
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 3
49020: PUSH
49021: LD_INT 24
49023: PUSH
49024: LD_INT 1000
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PPUSH
49039: CALL_OW 72
49043: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
49044: LD_ADDR_EXP 42
49048: PUSH
49049: LD_EXP 42
49053: PPUSH
49054: LD_VAR 0 2
49058: PPUSH
49059: LD_VAR 0 3
49063: PPUSH
49064: CALL_OW 1
49068: ST_TO_ADDR
// end ;
49069: GO 48989
49071: POP
49072: POP
// RaiseSailEvent ( 101 ) ;
49073: LD_INT 101
49075: PPUSH
49076: CALL_OW 427
// end ;
49080: LD_VAR 0 1
49084: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
49085: LD_INT 0
49087: PPUSH
49088: PPUSH
49089: PPUSH
49090: PPUSH
49091: PPUSH
49092: PPUSH
49093: PPUSH
// if not mc_bases then
49094: LD_EXP 41
49098: NOT
49099: IFFALSE 49103
// exit ;
49101: GO 49638
// for i = 1 to mc_bases do
49103: LD_ADDR_VAR 0 2
49107: PUSH
49108: DOUBLE
49109: LD_INT 1
49111: DEC
49112: ST_TO_ADDR
49113: LD_EXP 41
49117: PUSH
49118: FOR_TO
49119: IFFALSE 49629
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
49121: LD_ADDR_VAR 0 5
49125: PUSH
49126: LD_EXP 41
49130: PUSH
49131: LD_VAR 0 2
49135: ARRAY
49136: PUSH
49137: LD_EXP 70
49141: PUSH
49142: LD_VAR 0 2
49146: ARRAY
49147: UNION
49148: PPUSH
49149: LD_INT 21
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 3
49164: PUSH
49165: LD_INT 54
49167: PUSH
49168: EMPTY
49169: LIST
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 3
49177: PUSH
49178: LD_INT 24
49180: PUSH
49181: LD_INT 700
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: LIST
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PPUSH
49201: CALL_OW 72
49205: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
49206: LD_ADDR_VAR 0 6
49210: PUSH
49211: LD_EXP 41
49215: PUSH
49216: LD_VAR 0 2
49220: ARRAY
49221: PPUSH
49222: LD_INT 21
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 3
49237: PUSH
49238: LD_INT 54
49240: PUSH
49241: EMPTY
49242: LIST
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 3
49250: PUSH
49251: LD_INT 24
49253: PUSH
49254: LD_INT 250
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: LIST
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PPUSH
49274: CALL_OW 72
49278: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
49279: LD_ADDR_VAR 0 7
49283: PUSH
49284: LD_VAR 0 5
49288: PUSH
49289: LD_VAR 0 6
49293: DIFF
49294: ST_TO_ADDR
// if not need_heal_1 then
49295: LD_VAR 0 6
49299: NOT
49300: IFFALSE 49333
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
49302: LD_ADDR_EXP 44
49306: PUSH
49307: LD_EXP 44
49311: PPUSH
49312: LD_VAR 0 2
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PPUSH
49324: EMPTY
49325: PPUSH
49326: CALL 16381 0 3
49330: ST_TO_ADDR
49331: GO 49365
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
49333: LD_ADDR_EXP 44
49337: PUSH
49338: LD_EXP 44
49342: PPUSH
49343: LD_VAR 0 2
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PPUSH
49355: LD_VAR 0 6
49359: PPUSH
49360: CALL 16381 0 3
49364: ST_TO_ADDR
// if not need_heal_2 then
49365: LD_VAR 0 7
49369: NOT
49370: IFFALSE 49403
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
49372: LD_ADDR_EXP 44
49376: PUSH
49377: LD_EXP 44
49381: PPUSH
49382: LD_VAR 0 2
49386: PUSH
49387: LD_INT 2
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PPUSH
49394: EMPTY
49395: PPUSH
49396: CALL 16381 0 3
49400: ST_TO_ADDR
49401: GO 49435
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
49403: LD_ADDR_EXP 44
49407: PUSH
49408: LD_EXP 44
49412: PPUSH
49413: LD_VAR 0 2
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PPUSH
49425: LD_VAR 0 7
49429: PPUSH
49430: CALL 16381 0 3
49434: ST_TO_ADDR
// if need_heal_2 then
49435: LD_VAR 0 7
49439: IFFALSE 49611
// for j in need_heal_2 do
49441: LD_ADDR_VAR 0 3
49445: PUSH
49446: LD_VAR 0 7
49450: PUSH
49451: FOR_IN
49452: IFFALSE 49609
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
49454: LD_ADDR_VAR 0 5
49458: PUSH
49459: LD_EXP 41
49463: PUSH
49464: LD_VAR 0 2
49468: ARRAY
49469: PPUSH
49470: LD_INT 2
49472: PUSH
49473: LD_INT 30
49475: PUSH
49476: LD_INT 6
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 30
49485: PUSH
49486: LD_INT 7
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 30
49495: PUSH
49496: LD_INT 8
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 30
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 30
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 25
49525: PUSH
49526: LD_INT 4
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: PPUSH
49542: CALL_OW 72
49546: ST_TO_ADDR
// if tmp then
49547: LD_VAR 0 5
49551: IFFALSE 49607
// begin k := NearestUnitToUnit ( tmp , j ) ;
49553: LD_ADDR_VAR 0 4
49557: PUSH
49558: LD_VAR 0 5
49562: PPUSH
49563: LD_VAR 0 3
49567: PPUSH
49568: CALL_OW 74
49572: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
49573: LD_VAR 0 3
49577: PPUSH
49578: LD_VAR 0 4
49582: PPUSH
49583: CALL_OW 296
49587: PUSH
49588: LD_INT 7
49590: GREATER
49591: IFFALSE 49607
// ComMoveUnit ( j , k ) ;
49593: LD_VAR 0 3
49597: PPUSH
49598: LD_VAR 0 4
49602: PPUSH
49603: CALL_OW 112
// end ; end ;
49607: GO 49451
49609: POP
49610: POP
// if not need_heal_1 and not need_heal_2 then
49611: LD_VAR 0 6
49615: NOT
49616: PUSH
49617: LD_VAR 0 7
49621: NOT
49622: AND
49623: IFFALSE 49627
// continue ;
49625: GO 49118
// end ;
49627: GO 49118
49629: POP
49630: POP
// RaiseSailEvent ( 102 ) ;
49631: LD_INT 102
49633: PPUSH
49634: CALL_OW 427
// end ;
49638: LD_VAR 0 1
49642: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
49643: LD_INT 0
49645: PPUSH
49646: PPUSH
49647: PPUSH
49648: PPUSH
49649: PPUSH
// if not mc_bases then
49650: LD_EXP 41
49654: NOT
49655: IFFALSE 49659
// exit ;
49657: GO 50044
// for i = 1 to mc_bases do
49659: LD_ADDR_VAR 0 2
49663: PUSH
49664: DOUBLE
49665: LD_INT 1
49667: DEC
49668: ST_TO_ADDR
49669: LD_EXP 41
49673: PUSH
49674: FOR_TO
49675: IFFALSE 50042
// begin if not mc_building_need_repair [ i ] then
49677: LD_EXP 42
49681: PUSH
49682: LD_VAR 0 2
49686: ARRAY
49687: NOT
49688: IFFALSE 49726
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
49690: LD_ADDR_EXP 43
49694: PUSH
49695: LD_EXP 43
49699: PPUSH
49700: LD_VAR 0 2
49704: PPUSH
49705: EMPTY
49706: PPUSH
49707: CALL_OW 1
49711: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
49712: LD_VAR 0 2
49716: PPUSH
49717: LD_INT 101
49719: PPUSH
49720: CALL 48877 0 2
// continue ;
49724: GO 49674
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
49726: LD_ADDR_EXP 47
49730: PUSH
49731: LD_EXP 47
49735: PPUSH
49736: LD_VAR 0 2
49740: PPUSH
49741: EMPTY
49742: PPUSH
49743: CALL_OW 1
49747: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
49748: LD_VAR 0 2
49752: PPUSH
49753: LD_INT 103
49755: PPUSH
49756: CALL 48877 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
49760: LD_ADDR_VAR 0 5
49764: PUSH
49765: LD_EXP 41
49769: PUSH
49770: LD_VAR 0 2
49774: ARRAY
49775: PUSH
49776: LD_EXP 70
49780: PUSH
49781: LD_VAR 0 2
49785: ARRAY
49786: UNION
49787: PPUSH
49788: LD_INT 2
49790: PUSH
49791: LD_INT 25
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 25
49803: PUSH
49804: LD_INT 16
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: LIST
49815: PUSH
49816: EMPTY
49817: LIST
49818: PPUSH
49819: CALL_OW 72
49823: ST_TO_ADDR
// if not tmp then
49824: LD_VAR 0 5
49828: NOT
49829: IFFALSE 49833
// continue ;
49831: GO 49674
// for j in tmp do
49833: LD_ADDR_VAR 0 3
49837: PUSH
49838: LD_VAR 0 5
49842: PUSH
49843: FOR_IN
49844: IFFALSE 50038
// begin if mc_need_heal [ i ] then
49846: LD_EXP 44
49850: PUSH
49851: LD_VAR 0 2
49855: ARRAY
49856: IFFALSE 49904
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
49858: LD_VAR 0 3
49862: PUSH
49863: LD_EXP 44
49867: PUSH
49868: LD_VAR 0 2
49872: ARRAY
49873: PUSH
49874: LD_INT 1
49876: ARRAY
49877: IN
49878: PUSH
49879: LD_VAR 0 3
49883: PUSH
49884: LD_EXP 44
49888: PUSH
49889: LD_VAR 0 2
49893: ARRAY
49894: PUSH
49895: LD_INT 2
49897: ARRAY
49898: IN
49899: OR
49900: IFFALSE 49904
// continue ;
49902: GO 49843
// if IsInUnit ( j ) then
49904: LD_VAR 0 3
49908: PPUSH
49909: CALL_OW 310
49913: IFFALSE 49924
// ComExitBuilding ( j ) ;
49915: LD_VAR 0 3
49919: PPUSH
49920: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
49924: LD_VAR 0 3
49928: PUSH
49929: LD_EXP 43
49933: PUSH
49934: LD_VAR 0 2
49938: ARRAY
49939: IN
49940: NOT
49941: IFFALSE 49999
// begin SetTag ( j , 101 ) ;
49943: LD_VAR 0 3
49947: PPUSH
49948: LD_INT 101
49950: PPUSH
49951: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
49955: LD_ADDR_EXP 43
49959: PUSH
49960: LD_EXP 43
49964: PPUSH
49965: LD_VAR 0 2
49969: PUSH
49970: LD_EXP 43
49974: PUSH
49975: LD_VAR 0 2
49979: ARRAY
49980: PUSH
49981: LD_INT 1
49983: PLUS
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PPUSH
49989: LD_VAR 0 3
49993: PPUSH
49994: CALL 16381 0 3
49998: ST_TO_ADDR
// end ; Wait ( 3 ) ;
49999: LD_INT 3
50001: PPUSH
50002: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
50006: LD_VAR 0 3
50010: PPUSH
50011: LD_EXP 42
50015: PUSH
50016: LD_VAR 0 2
50020: ARRAY
50021: PPUSH
50022: LD_VAR 0 3
50026: PPUSH
50027: CALL_OW 74
50031: PPUSH
50032: CALL_OW 130
// end ;
50036: GO 49843
50038: POP
50039: POP
// end ;
50040: GO 49674
50042: POP
50043: POP
// end ;
50044: LD_VAR 0 1
50048: RET
// export function MC_Heal ; var i , j , tmp ; begin
50049: LD_INT 0
50051: PPUSH
50052: PPUSH
50053: PPUSH
50054: PPUSH
// if not mc_bases then
50055: LD_EXP 41
50059: NOT
50060: IFFALSE 50064
// exit ;
50062: GO 50466
// for i = 1 to mc_bases do
50064: LD_ADDR_VAR 0 2
50068: PUSH
50069: DOUBLE
50070: LD_INT 1
50072: DEC
50073: ST_TO_ADDR
50074: LD_EXP 41
50078: PUSH
50079: FOR_TO
50080: IFFALSE 50464
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
50082: LD_EXP 44
50086: PUSH
50087: LD_VAR 0 2
50091: ARRAY
50092: PUSH
50093: LD_INT 1
50095: ARRAY
50096: NOT
50097: PUSH
50098: LD_EXP 44
50102: PUSH
50103: LD_VAR 0 2
50107: ARRAY
50108: PUSH
50109: LD_INT 2
50111: ARRAY
50112: NOT
50113: AND
50114: IFFALSE 50152
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
50116: LD_ADDR_EXP 45
50120: PUSH
50121: LD_EXP 45
50125: PPUSH
50126: LD_VAR 0 2
50130: PPUSH
50131: EMPTY
50132: PPUSH
50133: CALL_OW 1
50137: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
50138: LD_VAR 0 2
50142: PPUSH
50143: LD_INT 102
50145: PPUSH
50146: CALL 48877 0 2
// continue ;
50150: GO 50079
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
50152: LD_ADDR_VAR 0 4
50156: PUSH
50157: LD_EXP 41
50161: PUSH
50162: LD_VAR 0 2
50166: ARRAY
50167: PPUSH
50168: LD_INT 25
50170: PUSH
50171: LD_INT 4
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PPUSH
50178: CALL_OW 72
50182: ST_TO_ADDR
// if not tmp then
50183: LD_VAR 0 4
50187: NOT
50188: IFFALSE 50192
// continue ;
50190: GO 50079
// if mc_taming [ i ] then
50192: LD_EXP 72
50196: PUSH
50197: LD_VAR 0 2
50201: ARRAY
50202: IFFALSE 50226
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
50204: LD_ADDR_EXP 72
50208: PUSH
50209: LD_EXP 72
50213: PPUSH
50214: LD_VAR 0 2
50218: PPUSH
50219: EMPTY
50220: PPUSH
50221: CALL_OW 1
50225: ST_TO_ADDR
// for j in tmp do
50226: LD_ADDR_VAR 0 3
50230: PUSH
50231: LD_VAR 0 4
50235: PUSH
50236: FOR_IN
50237: IFFALSE 50460
// begin if IsInUnit ( j ) then
50239: LD_VAR 0 3
50243: PPUSH
50244: CALL_OW 310
50248: IFFALSE 50259
// ComExitBuilding ( j ) ;
50250: LD_VAR 0 3
50254: PPUSH
50255: CALL_OW 122
// if not j in mc_healers [ i ] then
50259: LD_VAR 0 3
50263: PUSH
50264: LD_EXP 45
50268: PUSH
50269: LD_VAR 0 2
50273: ARRAY
50274: IN
50275: NOT
50276: IFFALSE 50322
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
50278: LD_ADDR_EXP 45
50282: PUSH
50283: LD_EXP 45
50287: PPUSH
50288: LD_VAR 0 2
50292: PUSH
50293: LD_EXP 45
50297: PUSH
50298: LD_VAR 0 2
50302: ARRAY
50303: PUSH
50304: LD_INT 1
50306: PLUS
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PPUSH
50312: LD_VAR 0 3
50316: PPUSH
50317: CALL 16381 0 3
50321: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
50322: LD_VAR 0 3
50326: PPUSH
50327: CALL_OW 110
50331: PUSH
50332: LD_INT 102
50334: NONEQUAL
50335: IFFALSE 50349
// SetTag ( j , 102 ) ;
50337: LD_VAR 0 3
50341: PPUSH
50342: LD_INT 102
50344: PPUSH
50345: CALL_OW 109
// Wait ( 3 ) ;
50349: LD_INT 3
50351: PPUSH
50352: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
50356: LD_EXP 44
50360: PUSH
50361: LD_VAR 0 2
50365: ARRAY
50366: PUSH
50367: LD_INT 1
50369: ARRAY
50370: IFFALSE 50402
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
50372: LD_VAR 0 3
50376: PPUSH
50377: LD_EXP 44
50381: PUSH
50382: LD_VAR 0 2
50386: ARRAY
50387: PUSH
50388: LD_INT 1
50390: ARRAY
50391: PUSH
50392: LD_INT 1
50394: ARRAY
50395: PPUSH
50396: CALL_OW 128
50400: GO 50458
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
50402: LD_VAR 0 3
50406: PPUSH
50407: CALL_OW 314
50411: NOT
50412: PUSH
50413: LD_EXP 44
50417: PUSH
50418: LD_VAR 0 2
50422: ARRAY
50423: PUSH
50424: LD_INT 2
50426: ARRAY
50427: AND
50428: IFFALSE 50458
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
50430: LD_VAR 0 3
50434: PPUSH
50435: LD_EXP 44
50439: PUSH
50440: LD_VAR 0 2
50444: ARRAY
50445: PUSH
50446: LD_INT 2
50448: ARRAY
50449: PUSH
50450: LD_INT 1
50452: ARRAY
50453: PPUSH
50454: CALL_OW 128
// end ;
50458: GO 50236
50460: POP
50461: POP
// end ;
50462: GO 50079
50464: POP
50465: POP
// end ;
50466: LD_VAR 0 1
50470: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
50471: LD_INT 0
50473: PPUSH
50474: PPUSH
50475: PPUSH
50476: PPUSH
// if not mc_bases then
50477: LD_EXP 41
50481: NOT
50482: IFFALSE 50486
// exit ;
50484: GO 51383
// for i = 1 to mc_bases do
50486: LD_ADDR_VAR 0 2
50490: PUSH
50491: DOUBLE
50492: LD_INT 1
50494: DEC
50495: ST_TO_ADDR
50496: LD_EXP 41
50500: PUSH
50501: FOR_TO
50502: IFFALSE 51381
// begin if mc_scan [ i ] then
50504: LD_EXP 64
50508: PUSH
50509: LD_VAR 0 2
50513: ARRAY
50514: IFFALSE 50518
// continue ;
50516: GO 50501
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
50518: LD_EXP 46
50522: PUSH
50523: LD_VAR 0 2
50527: ARRAY
50528: NOT
50529: PUSH
50530: LD_EXP 48
50534: PUSH
50535: LD_VAR 0 2
50539: ARRAY
50540: NOT
50541: AND
50542: PUSH
50543: LD_EXP 47
50547: PUSH
50548: LD_VAR 0 2
50552: ARRAY
50553: AND
50554: IFFALSE 50592
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
50556: LD_ADDR_EXP 47
50560: PUSH
50561: LD_EXP 47
50565: PPUSH
50566: LD_VAR 0 2
50570: PPUSH
50571: EMPTY
50572: PPUSH
50573: CALL_OW 1
50577: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
50578: LD_VAR 0 2
50582: PPUSH
50583: LD_INT 103
50585: PPUSH
50586: CALL 48877 0 2
// continue ;
50590: GO 50501
// end ; if mc_construct_list [ i ] then
50592: LD_EXP 48
50596: PUSH
50597: LD_VAR 0 2
50601: ARRAY
50602: IFFALSE 50822
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
50604: LD_ADDR_VAR 0 4
50608: PUSH
50609: LD_EXP 41
50613: PUSH
50614: LD_VAR 0 2
50618: ARRAY
50619: PPUSH
50620: LD_INT 25
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PPUSH
50630: CALL_OW 72
50634: PUSH
50635: LD_EXP 43
50639: PUSH
50640: LD_VAR 0 2
50644: ARRAY
50645: DIFF
50646: ST_TO_ADDR
// if not tmp then
50647: LD_VAR 0 4
50651: NOT
50652: IFFALSE 50656
// continue ;
50654: GO 50501
// for j in tmp do
50656: LD_ADDR_VAR 0 3
50660: PUSH
50661: LD_VAR 0 4
50665: PUSH
50666: FOR_IN
50667: IFFALSE 50818
// begin if not mc_builders [ i ] then
50669: LD_EXP 47
50673: PUSH
50674: LD_VAR 0 2
50678: ARRAY
50679: NOT
50680: IFFALSE 50738
// begin SetTag ( j , 103 ) ;
50682: LD_VAR 0 3
50686: PPUSH
50687: LD_INT 103
50689: PPUSH
50690: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
50694: LD_ADDR_EXP 47
50698: PUSH
50699: LD_EXP 47
50703: PPUSH
50704: LD_VAR 0 2
50708: PUSH
50709: LD_EXP 47
50713: PUSH
50714: LD_VAR 0 2
50718: ARRAY
50719: PUSH
50720: LD_INT 1
50722: PLUS
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PPUSH
50728: LD_VAR 0 3
50732: PPUSH
50733: CALL 16381 0 3
50737: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
50738: LD_VAR 0 3
50742: PPUSH
50743: CALL_OW 310
50747: IFFALSE 50758
// ComExitBuilding ( j ) ;
50749: LD_VAR 0 3
50753: PPUSH
50754: CALL_OW 122
// wait ( 3 ) ;
50758: LD_INT 3
50760: PPUSH
50761: CALL_OW 67
// if not mc_construct_list [ i ] then
50765: LD_EXP 48
50769: PUSH
50770: LD_VAR 0 2
50774: ARRAY
50775: NOT
50776: IFFALSE 50780
// break ;
50778: GO 50818
// if not HasTask ( j ) then
50780: LD_VAR 0 3
50784: PPUSH
50785: CALL_OW 314
50789: NOT
50790: IFFALSE 50816
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
50792: LD_VAR 0 3
50796: PPUSH
50797: LD_EXP 48
50801: PUSH
50802: LD_VAR 0 2
50806: ARRAY
50807: PUSH
50808: LD_INT 1
50810: ARRAY
50811: PPUSH
50812: CALL 18787 0 2
// end ;
50816: GO 50666
50818: POP
50819: POP
// end else
50820: GO 51379
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
50822: LD_EXP 46
50826: PUSH
50827: LD_VAR 0 2
50831: ARRAY
50832: PUSH
50833: LD_EXP 41
50837: PUSH
50838: LD_VAR 0 2
50842: ARRAY
50843: PPUSH
50844: LD_INT 2
50846: PUSH
50847: LD_INT 30
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 30
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: LIST
50871: PPUSH
50872: CALL_OW 72
50876: AND
50877: IFFALSE 51379
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
50879: LD_EXP 41
50883: PUSH
50884: LD_VAR 0 2
50888: ARRAY
50889: PPUSH
50890: LD_INT 2
50892: PUSH
50893: LD_INT 30
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 30
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: LIST
50917: PPUSH
50918: CALL_OW 72
50922: PUSH
50923: LD_INT 1
50925: ARRAY
50926: PPUSH
50927: LD_EXP 46
50931: PUSH
50932: LD_VAR 0 2
50936: ARRAY
50937: PUSH
50938: LD_INT 1
50940: ARRAY
50941: PUSH
50942: LD_INT 1
50944: ARRAY
50945: PPUSH
50946: LD_EXP 46
50950: PUSH
50951: LD_VAR 0 2
50955: ARRAY
50956: PUSH
50957: LD_INT 1
50959: ARRAY
50960: PUSH
50961: LD_INT 2
50963: ARRAY
50964: PPUSH
50965: LD_EXP 46
50969: PUSH
50970: LD_VAR 0 2
50974: ARRAY
50975: PUSH
50976: LD_INT 1
50978: ARRAY
50979: PUSH
50980: LD_INT 3
50982: ARRAY
50983: PPUSH
50984: LD_EXP 46
50988: PUSH
50989: LD_VAR 0 2
50993: ARRAY
50994: PUSH
50995: LD_INT 1
50997: ARRAY
50998: PUSH
50999: LD_INT 4
51001: ARRAY
51002: PPUSH
51003: CALL 22891 0 5
51007: IFFALSE 51288
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
51009: LD_ADDR_VAR 0 4
51013: PUSH
51014: LD_EXP 41
51018: PUSH
51019: LD_VAR 0 2
51023: ARRAY
51024: PPUSH
51025: LD_INT 25
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PPUSH
51035: CALL_OW 72
51039: PUSH
51040: LD_EXP 43
51044: PUSH
51045: LD_VAR 0 2
51049: ARRAY
51050: DIFF
51051: ST_TO_ADDR
// if not tmp then
51052: LD_VAR 0 4
51056: NOT
51057: IFFALSE 51061
// continue ;
51059: GO 50501
// for j in tmp do
51061: LD_ADDR_VAR 0 3
51065: PUSH
51066: LD_VAR 0 4
51070: PUSH
51071: FOR_IN
51072: IFFALSE 51284
// begin if not mc_builders [ i ] then
51074: LD_EXP 47
51078: PUSH
51079: LD_VAR 0 2
51083: ARRAY
51084: NOT
51085: IFFALSE 51143
// begin SetTag ( j , 103 ) ;
51087: LD_VAR 0 3
51091: PPUSH
51092: LD_INT 103
51094: PPUSH
51095: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
51099: LD_ADDR_EXP 47
51103: PUSH
51104: LD_EXP 47
51108: PPUSH
51109: LD_VAR 0 2
51113: PUSH
51114: LD_EXP 47
51118: PUSH
51119: LD_VAR 0 2
51123: ARRAY
51124: PUSH
51125: LD_INT 1
51127: PLUS
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PPUSH
51133: LD_VAR 0 3
51137: PPUSH
51138: CALL 16381 0 3
51142: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
51143: LD_VAR 0 3
51147: PPUSH
51148: CALL_OW 310
51152: IFFALSE 51163
// ComExitBuilding ( j ) ;
51154: LD_VAR 0 3
51158: PPUSH
51159: CALL_OW 122
// wait ( 3 ) ;
51163: LD_INT 3
51165: PPUSH
51166: CALL_OW 67
// if not mc_build_list [ i ] then
51170: LD_EXP 46
51174: PUSH
51175: LD_VAR 0 2
51179: ARRAY
51180: NOT
51181: IFFALSE 51185
// break ;
51183: GO 51284
// if not HasTask ( j ) then
51185: LD_VAR 0 3
51189: PPUSH
51190: CALL_OW 314
51194: NOT
51195: IFFALSE 51282
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
51197: LD_VAR 0 3
51201: PPUSH
51202: LD_EXP 46
51206: PUSH
51207: LD_VAR 0 2
51211: ARRAY
51212: PUSH
51213: LD_INT 1
51215: ARRAY
51216: PUSH
51217: LD_INT 1
51219: ARRAY
51220: PPUSH
51221: LD_EXP 46
51225: PUSH
51226: LD_VAR 0 2
51230: ARRAY
51231: PUSH
51232: LD_INT 1
51234: ARRAY
51235: PUSH
51236: LD_INT 2
51238: ARRAY
51239: PPUSH
51240: LD_EXP 46
51244: PUSH
51245: LD_VAR 0 2
51249: ARRAY
51250: PUSH
51251: LD_INT 1
51253: ARRAY
51254: PUSH
51255: LD_INT 3
51257: ARRAY
51258: PPUSH
51259: LD_EXP 46
51263: PUSH
51264: LD_VAR 0 2
51268: ARRAY
51269: PUSH
51270: LD_INT 1
51272: ARRAY
51273: PUSH
51274: LD_INT 4
51276: ARRAY
51277: PPUSH
51278: CALL_OW 145
// end ;
51282: GO 51071
51284: POP
51285: POP
// end else
51286: GO 51379
// TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
51288: LD_EXP 41
51292: PUSH
51293: LD_VAR 0 2
51297: ARRAY
51298: PPUSH
51299: LD_EXP 46
51303: PUSH
51304: LD_VAR 0 2
51308: ARRAY
51309: PUSH
51310: LD_INT 1
51312: ARRAY
51313: PUSH
51314: LD_INT 1
51316: ARRAY
51317: PPUSH
51318: LD_EXP 46
51322: PUSH
51323: LD_VAR 0 2
51327: ARRAY
51328: PUSH
51329: LD_INT 1
51331: ARRAY
51332: PUSH
51333: LD_INT 2
51335: ARRAY
51336: PPUSH
51337: LD_EXP 46
51341: PUSH
51342: LD_VAR 0 2
51346: ARRAY
51347: PUSH
51348: LD_INT 1
51350: ARRAY
51351: PUSH
51352: LD_INT 3
51354: ARRAY
51355: PPUSH
51356: LD_EXP 46
51360: PUSH
51361: LD_VAR 0 2
51365: ARRAY
51366: PUSH
51367: LD_INT 1
51369: ARRAY
51370: PUSH
51371: LD_INT 4
51373: ARRAY
51374: PPUSH
51375: CALL 22575 0 5
// end ;
51379: GO 50501
51381: POP
51382: POP
// end ;
51383: LD_VAR 0 1
51387: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
51388: LD_INT 0
51390: PPUSH
51391: PPUSH
51392: PPUSH
51393: PPUSH
51394: PPUSH
51395: PPUSH
// if not mc_bases then
51396: LD_EXP 41
51400: NOT
51401: IFFALSE 51405
// exit ;
51403: GO 51832
// for i = 1 to mc_bases do
51405: LD_ADDR_VAR 0 2
51409: PUSH
51410: DOUBLE
51411: LD_INT 1
51413: DEC
51414: ST_TO_ADDR
51415: LD_EXP 41
51419: PUSH
51420: FOR_TO
51421: IFFALSE 51830
// begin tmp := mc_build_upgrade [ i ] ;
51423: LD_ADDR_VAR 0 4
51427: PUSH
51428: LD_EXP 73
51432: PUSH
51433: LD_VAR 0 2
51437: ARRAY
51438: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
51439: LD_ADDR_VAR 0 6
51443: PUSH
51444: LD_EXP 74
51448: PUSH
51449: LD_VAR 0 2
51453: ARRAY
51454: PPUSH
51455: LD_INT 2
51457: PUSH
51458: LD_INT 30
51460: PUSH
51461: LD_INT 6
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 30
51470: PUSH
51471: LD_INT 7
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: LIST
51482: PPUSH
51483: CALL_OW 72
51487: ST_TO_ADDR
// if not tmp and not lab then
51488: LD_VAR 0 4
51492: NOT
51493: PUSH
51494: LD_VAR 0 6
51498: NOT
51499: AND
51500: IFFALSE 51504
// continue ;
51502: GO 51420
// if tmp then
51504: LD_VAR 0 4
51508: IFFALSE 51628
// for j in tmp do
51510: LD_ADDR_VAR 0 3
51514: PUSH
51515: LD_VAR 0 4
51519: PUSH
51520: FOR_IN
51521: IFFALSE 51626
// begin if UpgradeCost ( j ) then
51523: LD_VAR 0 3
51527: PPUSH
51528: CALL 22235 0 1
51532: IFFALSE 51624
// begin ComUpgrade ( j ) ;
51534: LD_VAR 0 3
51538: PPUSH
51539: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
51543: LD_ADDR_EXP 73
51547: PUSH
51548: LD_EXP 73
51552: PPUSH
51553: LD_VAR 0 2
51557: PPUSH
51558: LD_EXP 73
51562: PUSH
51563: LD_VAR 0 2
51567: ARRAY
51568: PUSH
51569: LD_VAR 0 3
51573: DIFF
51574: PPUSH
51575: CALL_OW 1
51579: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
51580: LD_ADDR_EXP 48
51584: PUSH
51585: LD_EXP 48
51589: PPUSH
51590: LD_VAR 0 2
51594: PUSH
51595: LD_EXP 48
51599: PUSH
51600: LD_VAR 0 2
51604: ARRAY
51605: PUSH
51606: LD_INT 1
51608: PLUS
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PPUSH
51614: LD_VAR 0 3
51618: PPUSH
51619: CALL 16381 0 3
51623: ST_TO_ADDR
// end ; end ;
51624: GO 51520
51626: POP
51627: POP
// if not lab or not mc_lab_upgrade [ i ] then
51628: LD_VAR 0 6
51632: NOT
51633: PUSH
51634: LD_EXP 75
51638: PUSH
51639: LD_VAR 0 2
51643: ARRAY
51644: NOT
51645: OR
51646: IFFALSE 51650
// continue ;
51648: GO 51420
// for j in lab do
51650: LD_ADDR_VAR 0 3
51654: PUSH
51655: LD_VAR 0 6
51659: PUSH
51660: FOR_IN
51661: IFFALSE 51826
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
51663: LD_VAR 0 3
51667: PPUSH
51668: CALL_OW 266
51672: PUSH
51673: LD_INT 6
51675: PUSH
51676: LD_INT 7
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: IN
51683: PUSH
51684: LD_VAR 0 3
51688: PPUSH
51689: CALL_OW 461
51693: PUSH
51694: LD_INT 1
51696: NONEQUAL
51697: AND
51698: IFFALSE 51824
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
51700: LD_VAR 0 3
51704: PPUSH
51705: LD_EXP 75
51709: PUSH
51710: LD_VAR 0 2
51714: ARRAY
51715: PUSH
51716: LD_INT 1
51718: ARRAY
51719: PPUSH
51720: CALL 22440 0 2
51724: IFFALSE 51824
// begin ComCancel ( j ) ;
51726: LD_VAR 0 3
51730: PPUSH
51731: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
51735: LD_VAR 0 3
51739: PPUSH
51740: LD_EXP 75
51744: PUSH
51745: LD_VAR 0 2
51749: ARRAY
51750: PUSH
51751: LD_INT 1
51753: ARRAY
51754: PPUSH
51755: CALL_OW 207
// if not j in mc_construct_list [ i ] then
51759: LD_VAR 0 3
51763: PUSH
51764: LD_EXP 48
51768: PUSH
51769: LD_VAR 0 2
51773: ARRAY
51774: IN
51775: NOT
51776: IFFALSE 51822
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
51778: LD_ADDR_EXP 48
51782: PUSH
51783: LD_EXP 48
51787: PPUSH
51788: LD_VAR 0 2
51792: PUSH
51793: LD_EXP 48
51797: PUSH
51798: LD_VAR 0 2
51802: ARRAY
51803: PUSH
51804: LD_INT 1
51806: PLUS
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PPUSH
51812: LD_VAR 0 3
51816: PPUSH
51817: CALL 16381 0 3
51821: ST_TO_ADDR
// break ;
51822: GO 51826
// end ; end ; end ;
51824: GO 51660
51826: POP
51827: POP
// end ;
51828: GO 51420
51830: POP
51831: POP
// end ;
51832: LD_VAR 0 1
51836: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
51837: LD_INT 0
51839: PPUSH
51840: PPUSH
51841: PPUSH
51842: PPUSH
51843: PPUSH
51844: PPUSH
51845: PPUSH
// if not mc_bases then
51846: LD_EXP 41
51850: NOT
51851: IFFALSE 51855
// exit ;
51853: GO 52151
// for i = 1 to mc_bases do
51855: LD_ADDR_VAR 0 2
51859: PUSH
51860: DOUBLE
51861: LD_INT 1
51863: DEC
51864: ST_TO_ADDR
51865: LD_EXP 41
51869: PUSH
51870: FOR_TO
51871: IFFALSE 52149
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
51873: LD_EXP 49
51877: PUSH
51878: LD_VAR 0 2
51882: ARRAY
51883: NOT
51884: PUSH
51885: LD_EXP 41
51889: PUSH
51890: LD_VAR 0 2
51894: ARRAY
51895: PPUSH
51896: LD_INT 30
51898: PUSH
51899: LD_INT 3
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PPUSH
51906: CALL_OW 72
51910: NOT
51911: OR
51912: IFFALSE 51916
// continue ;
51914: GO 51870
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
51916: LD_EXP 49
51920: PUSH
51921: LD_VAR 0 2
51925: ARRAY
51926: PUSH
51927: LD_INT 1
51929: ARRAY
51930: PPUSH
51931: CALL_OW 269
51935: IFFALSE 52001
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
51937: LD_ADDR_VAR 0 4
51941: PUSH
51942: LD_EXP 49
51946: PUSH
51947: LD_VAR 0 2
51951: ARRAY
51952: PPUSH
51953: LD_INT 1
51955: PPUSH
51956: CALL_OW 3
51960: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
51961: LD_ADDR_EXP 49
51965: PUSH
51966: LD_EXP 49
51970: PPUSH
51971: LD_VAR 0 2
51975: PPUSH
51976: LD_VAR 0 4
51980: PPUSH
51981: CALL_OW 1
51985: ST_TO_ADDR
// if not mc_turret_list [ i ] then
51986: LD_EXP 49
51990: PUSH
51991: LD_VAR 0 2
51995: ARRAY
51996: NOT
51997: IFFALSE 52001
// continue ;
51999: GO 51870
// end ; busy := false ;
52001: LD_ADDR_VAR 0 6
52005: PUSH
52006: LD_INT 0
52008: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
52009: LD_ADDR_VAR 0 4
52013: PUSH
52014: LD_EXP 41
52018: PUSH
52019: LD_VAR 0 2
52023: ARRAY
52024: PPUSH
52025: LD_INT 30
52027: PUSH
52028: LD_INT 3
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PPUSH
52035: CALL_OW 72
52039: ST_TO_ADDR
// for j in tmp do
52040: LD_ADDR_VAR 0 3
52044: PUSH
52045: LD_VAR 0 4
52049: PUSH
52050: FOR_IN
52051: IFFALSE 52079
// if not BuildingStatus ( j ) = bs_idle then
52053: LD_VAR 0 3
52057: PPUSH
52058: CALL_OW 461
52062: PUSH
52063: LD_INT 2
52065: EQUAL
52066: NOT
52067: IFFALSE 52077
// busy := true ;
52069: LD_ADDR_VAR 0 6
52073: PUSH
52074: LD_INT 1
52076: ST_TO_ADDR
52077: GO 52050
52079: POP
52080: POP
// if busy then
52081: LD_VAR 0 6
52085: IFFALSE 52089
// continue ;
52087: GO 51870
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
52089: LD_ADDR_VAR 0 7
52093: PUSH
52094: LD_EXP 49
52098: PUSH
52099: LD_VAR 0 2
52103: ARRAY
52104: PUSH
52105: LD_INT 1
52107: ARRAY
52108: PPUSH
52109: CALL 20683 0 1
52113: ST_TO_ADDR
// if not weapon then
52114: LD_VAR 0 7
52118: NOT
52119: IFFALSE 52123
// continue ;
52121: GO 51870
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
52123: LD_EXP 49
52127: PUSH
52128: LD_VAR 0 2
52132: ARRAY
52133: PUSH
52134: LD_INT 1
52136: ARRAY
52137: PPUSH
52138: LD_VAR 0 7
52142: PPUSH
52143: CALL_OW 148
// end ;
52147: GO 51870
52149: POP
52150: POP
// end ;
52151: LD_VAR 0 1
52155: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
52156: LD_INT 0
52158: PPUSH
52159: PPUSH
52160: PPUSH
52161: PPUSH
52162: PPUSH
52163: PPUSH
// if not mc_bases then
52164: LD_EXP 41
52168: NOT
52169: IFFALSE 52173
// exit ;
52171: GO 53158
// for i = 1 to mc_bases do
52173: LD_ADDR_VAR 0 2
52177: PUSH
52178: DOUBLE
52179: LD_INT 1
52181: DEC
52182: ST_TO_ADDR
52183: LD_EXP 41
52187: PUSH
52188: FOR_TO
52189: IFFALSE 53156
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
52191: LD_EXP 54
52195: PUSH
52196: LD_VAR 0 2
52200: ARRAY
52201: NOT
52202: PUSH
52203: LD_EXP 54
52207: PUSH
52208: LD_VAR 0 2
52212: ARRAY
52213: PUSH
52214: LD_EXP 55
52218: PUSH
52219: LD_VAR 0 2
52223: ARRAY
52224: EQUAL
52225: OR
52226: IFFALSE 52230
// continue ;
52228: GO 52188
// if mc_miners [ i ] then
52230: LD_EXP 55
52234: PUSH
52235: LD_VAR 0 2
52239: ARRAY
52240: IFFALSE 52843
// begin k := 1 ;
52242: LD_ADDR_VAR 0 4
52246: PUSH
52247: LD_INT 1
52249: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
52250: LD_ADDR_VAR 0 3
52254: PUSH
52255: DOUBLE
52256: LD_EXP 55
52260: PUSH
52261: LD_VAR 0 2
52265: ARRAY
52266: INC
52267: ST_TO_ADDR
52268: LD_INT 1
52270: PUSH
52271: FOR_DOWNTO
52272: IFFALSE 52841
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
52274: LD_EXP 55
52278: PUSH
52279: LD_VAR 0 2
52283: ARRAY
52284: PUSH
52285: LD_VAR 0 3
52289: ARRAY
52290: PPUSH
52291: CALL_OW 301
52295: IFFALSE 52358
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
52297: LD_ADDR_VAR 0 5
52301: PUSH
52302: LD_EXP 55
52306: PUSH
52307: LD_VAR 0 2
52311: ARRAY
52312: PUSH
52313: LD_EXP 55
52317: PUSH
52318: LD_VAR 0 2
52322: ARRAY
52323: PUSH
52324: LD_VAR 0 3
52328: ARRAY
52329: DIFF
52330: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
52331: LD_ADDR_EXP 55
52335: PUSH
52336: LD_EXP 55
52340: PPUSH
52341: LD_VAR 0 2
52345: PPUSH
52346: LD_VAR 0 5
52350: PPUSH
52351: CALL_OW 1
52355: ST_TO_ADDR
// continue ;
52356: GO 52271
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
52358: LD_EXP 55
52362: PUSH
52363: LD_VAR 0 2
52367: ARRAY
52368: PUSH
52369: LD_VAR 0 3
52373: ARRAY
52374: PPUSH
52375: CALL 15882 0 1
52379: PUSH
52380: LD_EXP 55
52384: PUSH
52385: LD_VAR 0 2
52389: ARRAY
52390: PUSH
52391: LD_VAR 0 3
52395: ARRAY
52396: PPUSH
52397: CALL_OW 255
52401: PPUSH
52402: LD_EXP 54
52406: PUSH
52407: LD_VAR 0 2
52411: ARRAY
52412: PUSH
52413: LD_VAR 0 4
52417: ARRAY
52418: PUSH
52419: LD_INT 1
52421: ARRAY
52422: PPUSH
52423: LD_EXP 54
52427: PUSH
52428: LD_VAR 0 2
52432: ARRAY
52433: PUSH
52434: LD_VAR 0 4
52438: ARRAY
52439: PUSH
52440: LD_INT 2
52442: ARRAY
52443: PPUSH
52444: LD_INT 15
52446: PPUSH
52447: CALL 16875 0 4
52451: PUSH
52452: LD_INT 4
52454: ARRAY
52455: PUSH
52456: LD_EXP 55
52460: PUSH
52461: LD_VAR 0 2
52465: ARRAY
52466: PUSH
52467: LD_VAR 0 3
52471: ARRAY
52472: PPUSH
52473: LD_INT 10
52475: PPUSH
52476: CALL 18572 0 2
52480: PUSH
52481: LD_INT 4
52483: ARRAY
52484: OR
52485: AND
52486: IFFALSE 52509
// ComStop ( mc_miners [ i ] [ j ] ) ;
52488: LD_EXP 55
52492: PUSH
52493: LD_VAR 0 2
52497: ARRAY
52498: PUSH
52499: LD_VAR 0 3
52503: ARRAY
52504: PPUSH
52505: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
52509: LD_EXP 55
52513: PUSH
52514: LD_VAR 0 2
52518: ARRAY
52519: PUSH
52520: LD_VAR 0 3
52524: ARRAY
52525: PPUSH
52526: CALL_OW 257
52530: PUSH
52531: LD_INT 1
52533: EQUAL
52534: PUSH
52535: LD_EXP 55
52539: PUSH
52540: LD_VAR 0 2
52544: ARRAY
52545: PUSH
52546: LD_VAR 0 3
52550: ARRAY
52551: PPUSH
52552: CALL_OW 459
52556: NOT
52557: AND
52558: PUSH
52559: LD_EXP 55
52563: PUSH
52564: LD_VAR 0 2
52568: ARRAY
52569: PUSH
52570: LD_VAR 0 3
52574: ARRAY
52575: PPUSH
52576: CALL_OW 255
52580: PPUSH
52581: LD_EXP 54
52585: PUSH
52586: LD_VAR 0 2
52590: ARRAY
52591: PUSH
52592: LD_VAR 0 4
52596: ARRAY
52597: PUSH
52598: LD_INT 1
52600: ARRAY
52601: PPUSH
52602: LD_EXP 54
52606: PUSH
52607: LD_VAR 0 2
52611: ARRAY
52612: PUSH
52613: LD_VAR 0 4
52617: ARRAY
52618: PUSH
52619: LD_INT 2
52621: ARRAY
52622: PPUSH
52623: LD_INT 15
52625: PPUSH
52626: CALL 16875 0 4
52630: PUSH
52631: LD_INT 4
52633: ARRAY
52634: PUSH
52635: LD_INT 0
52637: EQUAL
52638: AND
52639: PUSH
52640: LD_EXP 55
52644: PUSH
52645: LD_VAR 0 2
52649: ARRAY
52650: PUSH
52651: LD_VAR 0 3
52655: ARRAY
52656: PPUSH
52657: CALL_OW 314
52661: NOT
52662: AND
52663: IFFALSE 52839
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
52665: LD_EXP 55
52669: PUSH
52670: LD_VAR 0 2
52674: ARRAY
52675: PUSH
52676: LD_VAR 0 3
52680: ARRAY
52681: PPUSH
52682: CALL_OW 310
52686: IFFALSE 52709
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
52688: LD_EXP 55
52692: PUSH
52693: LD_VAR 0 2
52697: ARRAY
52698: PUSH
52699: LD_VAR 0 3
52703: ARRAY
52704: PPUSH
52705: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
52709: LD_EXP 55
52713: PUSH
52714: LD_VAR 0 2
52718: ARRAY
52719: PUSH
52720: LD_VAR 0 3
52724: ARRAY
52725: PPUSH
52726: CALL_OW 314
52730: NOT
52731: IFFALSE 52799
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
52733: LD_EXP 55
52737: PUSH
52738: LD_VAR 0 2
52742: ARRAY
52743: PUSH
52744: LD_VAR 0 3
52748: ARRAY
52749: PPUSH
52750: LD_EXP 54
52754: PUSH
52755: LD_VAR 0 2
52759: ARRAY
52760: PUSH
52761: LD_VAR 0 4
52765: ARRAY
52766: PUSH
52767: LD_INT 1
52769: ARRAY
52770: PPUSH
52771: LD_EXP 54
52775: PUSH
52776: LD_VAR 0 2
52780: ARRAY
52781: PUSH
52782: LD_VAR 0 4
52786: ARRAY
52787: PUSH
52788: LD_INT 2
52790: ARRAY
52791: PPUSH
52792: LD_INT 0
52794: PPUSH
52795: CALL_OW 193
// k := k + 1 ;
52799: LD_ADDR_VAR 0 4
52803: PUSH
52804: LD_VAR 0 4
52808: PUSH
52809: LD_INT 1
52811: PLUS
52812: ST_TO_ADDR
// if k > mc_mines [ i ] then
52813: LD_VAR 0 4
52817: PUSH
52818: LD_EXP 54
52822: PUSH
52823: LD_VAR 0 2
52827: ARRAY
52828: GREATER
52829: IFFALSE 52839
// k := 1 ;
52831: LD_ADDR_VAR 0 4
52835: PUSH
52836: LD_INT 1
52838: ST_TO_ADDR
// end ; end ;
52839: GO 52271
52841: POP
52842: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
52843: LD_ADDR_VAR 0 5
52847: PUSH
52848: LD_EXP 41
52852: PUSH
52853: LD_VAR 0 2
52857: ARRAY
52858: PPUSH
52859: LD_INT 2
52861: PUSH
52862: LD_INT 30
52864: PUSH
52865: LD_INT 4
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 30
52874: PUSH
52875: LD_INT 5
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 30
52884: PUSH
52885: LD_INT 32
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: PPUSH
52898: CALL_OW 72
52902: ST_TO_ADDR
// if not tmp then
52903: LD_VAR 0 5
52907: NOT
52908: IFFALSE 52912
// continue ;
52910: GO 52188
// list := [ ] ;
52912: LD_ADDR_VAR 0 6
52916: PUSH
52917: EMPTY
52918: ST_TO_ADDR
// for j in tmp do
52919: LD_ADDR_VAR 0 3
52923: PUSH
52924: LD_VAR 0 5
52928: PUSH
52929: FOR_IN
52930: IFFALSE 52999
// begin for k in UnitsInside ( j ) do
52932: LD_ADDR_VAR 0 4
52936: PUSH
52937: LD_VAR 0 3
52941: PPUSH
52942: CALL_OW 313
52946: PUSH
52947: FOR_IN
52948: IFFALSE 52995
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
52950: LD_VAR 0 4
52954: PPUSH
52955: CALL_OW 257
52959: PUSH
52960: LD_INT 1
52962: EQUAL
52963: PUSH
52964: LD_VAR 0 4
52968: PPUSH
52969: CALL_OW 459
52973: NOT
52974: AND
52975: IFFALSE 52993
// list := list ^ k ;
52977: LD_ADDR_VAR 0 6
52981: PUSH
52982: LD_VAR 0 6
52986: PUSH
52987: LD_VAR 0 4
52991: ADD
52992: ST_TO_ADDR
52993: GO 52947
52995: POP
52996: POP
// end ;
52997: GO 52929
52999: POP
53000: POP
// list := list diff mc_miners [ i ] ;
53001: LD_ADDR_VAR 0 6
53005: PUSH
53006: LD_VAR 0 6
53010: PUSH
53011: LD_EXP 55
53015: PUSH
53016: LD_VAR 0 2
53020: ARRAY
53021: DIFF
53022: ST_TO_ADDR
// if not list then
53023: LD_VAR 0 6
53027: NOT
53028: IFFALSE 53032
// continue ;
53030: GO 52188
// k := mc_mines [ i ] - mc_miners [ i ] ;
53032: LD_ADDR_VAR 0 4
53036: PUSH
53037: LD_EXP 54
53041: PUSH
53042: LD_VAR 0 2
53046: ARRAY
53047: PUSH
53048: LD_EXP 55
53052: PUSH
53053: LD_VAR 0 2
53057: ARRAY
53058: MINUS
53059: ST_TO_ADDR
// if k > list then
53060: LD_VAR 0 4
53064: PUSH
53065: LD_VAR 0 6
53069: GREATER
53070: IFFALSE 53082
// k := list ;
53072: LD_ADDR_VAR 0 4
53076: PUSH
53077: LD_VAR 0 6
53081: ST_TO_ADDR
// for j = 1 to k do
53082: LD_ADDR_VAR 0 3
53086: PUSH
53087: DOUBLE
53088: LD_INT 1
53090: DEC
53091: ST_TO_ADDR
53092: LD_VAR 0 4
53096: PUSH
53097: FOR_TO
53098: IFFALSE 53152
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
53100: LD_ADDR_EXP 55
53104: PUSH
53105: LD_EXP 55
53109: PPUSH
53110: LD_VAR 0 2
53114: PUSH
53115: LD_EXP 55
53119: PUSH
53120: LD_VAR 0 2
53124: ARRAY
53125: PUSH
53126: LD_INT 1
53128: PLUS
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PPUSH
53134: LD_VAR 0 6
53138: PUSH
53139: LD_VAR 0 3
53143: ARRAY
53144: PPUSH
53145: CALL 16381 0 3
53149: ST_TO_ADDR
53150: GO 53097
53152: POP
53153: POP
// end ;
53154: GO 52188
53156: POP
53157: POP
// end ;
53158: LD_VAR 0 1
53162: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
53163: LD_INT 0
53165: PPUSH
53166: PPUSH
53167: PPUSH
53168: PPUSH
53169: PPUSH
53170: PPUSH
53171: PPUSH
53172: PPUSH
53173: PPUSH
// if not mc_bases then
53174: LD_EXP 41
53178: NOT
53179: IFFALSE 53183
// exit ;
53181: GO 54568
// for i = 1 to mc_bases do
53183: LD_ADDR_VAR 0 2
53187: PUSH
53188: DOUBLE
53189: LD_INT 1
53191: DEC
53192: ST_TO_ADDR
53193: LD_EXP 41
53197: PUSH
53198: FOR_TO
53199: IFFALSE 54566
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
53201: LD_EXP 41
53205: PUSH
53206: LD_VAR 0 2
53210: ARRAY
53211: NOT
53212: PUSH
53213: LD_EXP 48
53217: PUSH
53218: LD_VAR 0 2
53222: ARRAY
53223: OR
53224: IFFALSE 53228
// continue ;
53226: GO 53198
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
53228: LD_EXP 57
53232: PUSH
53233: LD_VAR 0 2
53237: ARRAY
53238: NOT
53239: PUSH
53240: LD_EXP 58
53244: PUSH
53245: LD_VAR 0 2
53249: ARRAY
53250: AND
53251: IFFALSE 53289
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
53253: LD_ADDR_EXP 58
53257: PUSH
53258: LD_EXP 58
53262: PPUSH
53263: LD_VAR 0 2
53267: PPUSH
53268: EMPTY
53269: PPUSH
53270: CALL_OW 1
53274: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
53275: LD_VAR 0 2
53279: PPUSH
53280: LD_INT 107
53282: PPUSH
53283: CALL 48877 0 2
// continue ;
53287: GO 53198
// end ; target := [ ] ;
53289: LD_ADDR_VAR 0 5
53293: PUSH
53294: EMPTY
53295: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
53296: LD_ADDR_VAR 0 3
53300: PUSH
53301: DOUBLE
53302: LD_EXP 57
53306: PUSH
53307: LD_VAR 0 2
53311: ARRAY
53312: INC
53313: ST_TO_ADDR
53314: LD_INT 1
53316: PUSH
53317: FOR_DOWNTO
53318: IFFALSE 53578
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
53320: LD_EXP 57
53324: PUSH
53325: LD_VAR 0 2
53329: ARRAY
53330: PUSH
53331: LD_VAR 0 3
53335: ARRAY
53336: PUSH
53337: LD_INT 2
53339: ARRAY
53340: PPUSH
53341: LD_EXP 57
53345: PUSH
53346: LD_VAR 0 2
53350: ARRAY
53351: PUSH
53352: LD_VAR 0 3
53356: ARRAY
53357: PUSH
53358: LD_INT 3
53360: ARRAY
53361: PPUSH
53362: CALL_OW 488
53366: PUSH
53367: LD_EXP 57
53371: PUSH
53372: LD_VAR 0 2
53376: ARRAY
53377: PUSH
53378: LD_VAR 0 3
53382: ARRAY
53383: PUSH
53384: LD_INT 2
53386: ARRAY
53387: PPUSH
53388: LD_EXP 57
53392: PUSH
53393: LD_VAR 0 2
53397: ARRAY
53398: PUSH
53399: LD_VAR 0 3
53403: ARRAY
53404: PUSH
53405: LD_INT 3
53407: ARRAY
53408: PPUSH
53409: CALL_OW 284
53413: PUSH
53414: LD_INT 0
53416: EQUAL
53417: AND
53418: IFFALSE 53473
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
53420: LD_ADDR_VAR 0 4
53424: PUSH
53425: LD_EXP 57
53429: PUSH
53430: LD_VAR 0 2
53434: ARRAY
53435: PPUSH
53436: LD_VAR 0 3
53440: PPUSH
53441: CALL_OW 3
53445: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
53446: LD_ADDR_EXP 57
53450: PUSH
53451: LD_EXP 57
53455: PPUSH
53456: LD_VAR 0 2
53460: PPUSH
53461: LD_VAR 0 4
53465: PPUSH
53466: CALL_OW 1
53470: ST_TO_ADDR
// continue ;
53471: GO 53317
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
53473: LD_EXP 41
53477: PUSH
53478: LD_VAR 0 2
53482: ARRAY
53483: PUSH
53484: LD_INT 1
53486: ARRAY
53487: PPUSH
53488: CALL_OW 255
53492: PPUSH
53493: LD_EXP 57
53497: PUSH
53498: LD_VAR 0 2
53502: ARRAY
53503: PUSH
53504: LD_VAR 0 3
53508: ARRAY
53509: PUSH
53510: LD_INT 2
53512: ARRAY
53513: PPUSH
53514: LD_EXP 57
53518: PUSH
53519: LD_VAR 0 2
53523: ARRAY
53524: PUSH
53525: LD_VAR 0 3
53529: ARRAY
53530: PUSH
53531: LD_INT 3
53533: ARRAY
53534: PPUSH
53535: LD_INT 20
53537: PPUSH
53538: CALL 16875 0 4
53542: PUSH
53543: LD_INT 4
53545: ARRAY
53546: PUSH
53547: LD_INT 0
53549: EQUAL
53550: IFFALSE 53576
// begin target := mc_crates [ i ] [ j ] ;
53552: LD_ADDR_VAR 0 5
53556: PUSH
53557: LD_EXP 57
53561: PUSH
53562: LD_VAR 0 2
53566: ARRAY
53567: PUSH
53568: LD_VAR 0 3
53572: ARRAY
53573: ST_TO_ADDR
// break ;
53574: GO 53578
// end ; end ;
53576: GO 53317
53578: POP
53579: POP
// if not target then
53580: LD_VAR 0 5
53584: NOT
53585: IFFALSE 53589
// continue ;
53587: GO 53198
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
53589: LD_ADDR_VAR 0 6
53593: PUSH
53594: LD_EXP 60
53598: PUSH
53599: LD_VAR 0 2
53603: ARRAY
53604: PPUSH
53605: LD_INT 2
53607: PUSH
53608: LD_INT 3
53610: PUSH
53611: LD_INT 58
53613: PUSH
53614: EMPTY
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 61
53623: PUSH
53624: EMPTY
53625: LIST
53626: PUSH
53627: LD_INT 33
53629: PUSH
53630: LD_INT 5
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 33
53639: PUSH
53640: LD_INT 3
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: LD_INT 34
53659: PUSH
53660: LD_INT 32
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 34
53669: PUSH
53670: LD_INT 51
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 34
53679: PUSH
53680: LD_INT 12
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PPUSH
53697: CALL_OW 72
53701: ST_TO_ADDR
// if not cargo then
53702: LD_VAR 0 6
53706: NOT
53707: IFFALSE 54101
// begin if mc_crates_collector [ i ] < 5 then
53709: LD_EXP 58
53713: PUSH
53714: LD_VAR 0 2
53718: ARRAY
53719: PUSH
53720: LD_INT 5
53722: LESS
53723: IFFALSE 53915
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
53725: LD_ADDR_VAR 0 4
53729: PUSH
53730: LD_EXP 41
53734: PUSH
53735: LD_VAR 0 2
53739: ARRAY
53740: PUSH
53741: LD_EXP 70
53745: PUSH
53746: LD_VAR 0 2
53750: ARRAY
53751: UNION
53752: PPUSH
53753: LD_INT 2
53755: PUSH
53756: LD_INT 25
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 25
53768: PUSH
53769: LD_INT 16
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 24
53783: PUSH
53784: LD_INT 750
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PPUSH
53795: CALL_OW 72
53799: ST_TO_ADDR
// if not tmp then
53800: LD_VAR 0 4
53804: NOT
53805: IFFALSE 53809
// continue ;
53807: GO 53198
// for j in tmp do
53809: LD_ADDR_VAR 0 3
53813: PUSH
53814: LD_VAR 0 4
53818: PUSH
53819: FOR_IN
53820: IFFALSE 53913
// if GetTag ( j ) = 0 then
53822: LD_VAR 0 3
53826: PPUSH
53827: CALL_OW 110
53831: PUSH
53832: LD_INT 0
53834: EQUAL
53835: IFFALSE 53911
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
53837: LD_ADDR_EXP 58
53841: PUSH
53842: LD_EXP 58
53846: PPUSH
53847: LD_VAR 0 2
53851: PUSH
53852: LD_EXP 58
53856: PUSH
53857: LD_VAR 0 2
53861: ARRAY
53862: PUSH
53863: LD_INT 1
53865: PLUS
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PPUSH
53871: LD_VAR 0 3
53875: PPUSH
53876: CALL 16381 0 3
53880: ST_TO_ADDR
// SetTag ( j , 107 ) ;
53881: LD_VAR 0 3
53885: PPUSH
53886: LD_INT 107
53888: PPUSH
53889: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
53893: LD_EXP 58
53897: PUSH
53898: LD_VAR 0 2
53902: ARRAY
53903: PUSH
53904: LD_INT 5
53906: GREATER
53907: IFFALSE 53911
// break ;
53909: GO 53913
// end ;
53911: GO 53819
53913: POP
53914: POP
// end ; if mc_crates_collector [ i ] and target then
53915: LD_EXP 58
53919: PUSH
53920: LD_VAR 0 2
53924: ARRAY
53925: PUSH
53926: LD_VAR 0 5
53930: AND
53931: IFFALSE 54099
// begin if mc_crates_collector [ i ] < target [ 1 ] then
53933: LD_EXP 58
53937: PUSH
53938: LD_VAR 0 2
53942: ARRAY
53943: PUSH
53944: LD_VAR 0 5
53948: PUSH
53949: LD_INT 1
53951: ARRAY
53952: LESS
53953: IFFALSE 53973
// tmp := mc_crates_collector [ i ] else
53955: LD_ADDR_VAR 0 4
53959: PUSH
53960: LD_EXP 58
53964: PUSH
53965: LD_VAR 0 2
53969: ARRAY
53970: ST_TO_ADDR
53971: GO 53987
// tmp := target [ 1 ] ;
53973: LD_ADDR_VAR 0 4
53977: PUSH
53978: LD_VAR 0 5
53982: PUSH
53983: LD_INT 1
53985: ARRAY
53986: ST_TO_ADDR
// for j = 1 to tmp do
53987: LD_ADDR_VAR 0 3
53991: PUSH
53992: DOUBLE
53993: LD_INT 1
53995: DEC
53996: ST_TO_ADDR
53997: LD_VAR 0 4
54001: PUSH
54002: FOR_TO
54003: IFFALSE 54097
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
54005: LD_EXP 58
54009: PUSH
54010: LD_VAR 0 2
54014: ARRAY
54015: PUSH
54016: LD_VAR 0 3
54020: ARRAY
54021: PPUSH
54022: CALL_OW 310
54026: IFFALSE 54049
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
54028: LD_EXP 58
54032: PUSH
54033: LD_VAR 0 2
54037: ARRAY
54038: PUSH
54039: LD_VAR 0 3
54043: ARRAY
54044: PPUSH
54045: CALL_OW 122
// wait ( 3 ) ;
54049: LD_INT 3
54051: PPUSH
54052: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
54056: LD_EXP 58
54060: PUSH
54061: LD_VAR 0 2
54065: ARRAY
54066: PUSH
54067: LD_VAR 0 3
54071: ARRAY
54072: PPUSH
54073: LD_VAR 0 5
54077: PUSH
54078: LD_INT 2
54080: ARRAY
54081: PPUSH
54082: LD_VAR 0 5
54086: PUSH
54087: LD_INT 3
54089: ARRAY
54090: PPUSH
54091: CALL_OW 117
// end ;
54095: GO 54002
54097: POP
54098: POP
// end ; end else
54099: GO 54564
// begin for j in cargo do
54101: LD_ADDR_VAR 0 3
54105: PUSH
54106: LD_VAR 0 6
54110: PUSH
54111: FOR_IN
54112: IFFALSE 54562
// begin if GetTag ( j ) <> 0 then
54114: LD_VAR 0 3
54118: PPUSH
54119: CALL_OW 110
54123: PUSH
54124: LD_INT 0
54126: NONEQUAL
54127: IFFALSE 54131
// continue ;
54129: GO 54111
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
54131: LD_VAR 0 3
54135: PPUSH
54136: CALL_OW 262
54140: PUSH
54141: LD_INT 2
54143: EQUAL
54144: PUSH
54145: LD_VAR 0 3
54149: PPUSH
54150: CALL_OW 261
54154: PUSH
54155: LD_INT 15
54157: LESS
54158: AND
54159: IFFALSE 54163
// continue ;
54161: GO 54111
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
54163: LD_VAR 0 3
54167: PPUSH
54168: CALL_OW 262
54172: PUSH
54173: LD_INT 1
54175: EQUAL
54176: PUSH
54177: LD_VAR 0 3
54181: PPUSH
54182: CALL_OW 261
54186: PUSH
54187: LD_INT 10
54189: LESS
54190: AND
54191: IFFALSE 54501
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
54193: LD_ADDR_VAR 0 7
54197: PUSH
54198: LD_EXP 41
54202: PUSH
54203: LD_VAR 0 2
54207: ARRAY
54208: PPUSH
54209: LD_INT 2
54211: PUSH
54212: LD_INT 30
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 30
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: LIST
54236: PPUSH
54237: CALL_OW 72
54241: ST_TO_ADDR
// if not depot then
54242: LD_VAR 0 7
54246: NOT
54247: IFFALSE 54251
// continue ;
54249: GO 54111
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
54251: LD_VAR 0 3
54255: PPUSH
54256: LD_VAR 0 7
54260: PPUSH
54261: LD_VAR 0 3
54265: PPUSH
54266: CALL_OW 74
54270: PPUSH
54271: CALL_OW 296
54275: PUSH
54276: LD_INT 6
54278: LESS
54279: IFFALSE 54295
// SetFuel ( j , 100 ) else
54281: LD_VAR 0 3
54285: PPUSH
54286: LD_INT 100
54288: PPUSH
54289: CALL_OW 240
54293: GO 54501
// if GetFuel ( j ) = 0 then
54295: LD_VAR 0 3
54299: PPUSH
54300: CALL_OW 261
54304: PUSH
54305: LD_INT 0
54307: EQUAL
54308: IFFALSE 54501
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
54310: LD_ADDR_EXP 60
54314: PUSH
54315: LD_EXP 60
54319: PPUSH
54320: LD_VAR 0 2
54324: PPUSH
54325: LD_EXP 60
54329: PUSH
54330: LD_VAR 0 2
54334: ARRAY
54335: PUSH
54336: LD_VAR 0 3
54340: DIFF
54341: PPUSH
54342: CALL_OW 1
54346: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
54347: LD_VAR 0 3
54351: PPUSH
54352: CALL_OW 263
54356: PUSH
54357: LD_INT 1
54359: EQUAL
54360: IFFALSE 54376
// ComExitVehicle ( IsInUnit ( j ) ) ;
54362: LD_VAR 0 3
54366: PPUSH
54367: CALL_OW 310
54371: PPUSH
54372: CALL_OW 121
// if GetControl ( j ) = control_remote then
54376: LD_VAR 0 3
54380: PPUSH
54381: CALL_OW 263
54385: PUSH
54386: LD_INT 2
54388: EQUAL
54389: IFFALSE 54400
// ComUnlink ( j ) ;
54391: LD_VAR 0 3
54395: PPUSH
54396: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
54400: LD_ADDR_VAR 0 8
54404: PUSH
54405: LD_VAR 0 2
54409: PPUSH
54410: LD_INT 3
54412: PPUSH
54413: CALL 61135 0 2
54417: ST_TO_ADDR
// if fac then
54418: LD_VAR 0 8
54422: IFFALSE 54499
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
54424: LD_ADDR_VAR 0 9
54428: PUSH
54429: LD_VAR 0 8
54433: PPUSH
54434: LD_VAR 0 3
54438: PPUSH
54439: CALL_OW 265
54443: PPUSH
54444: LD_VAR 0 3
54448: PPUSH
54449: CALL_OW 262
54453: PPUSH
54454: LD_VAR 0 3
54458: PPUSH
54459: CALL_OW 263
54463: PPUSH
54464: LD_VAR 0 3
54468: PPUSH
54469: CALL_OW 264
54473: PPUSH
54474: CALL 13546 0 5
54478: ST_TO_ADDR
// if components then
54479: LD_VAR 0 9
54483: IFFALSE 54499
// MC_InsertProduceList ( i , components ) ;
54485: LD_VAR 0 2
54489: PPUSH
54490: LD_VAR 0 9
54494: PPUSH
54495: CALL 60798 0 2
// end ; continue ;
54499: GO 54111
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
54501: LD_VAR 0 3
54505: PPUSH
54506: LD_INT 1
54508: PPUSH
54509: CALL_OW 289
54513: PUSH
54514: LD_INT 100
54516: LESS
54517: PUSH
54518: LD_VAR 0 3
54522: PPUSH
54523: CALL_OW 314
54527: NOT
54528: AND
54529: IFFALSE 54558
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
54531: LD_VAR 0 3
54535: PPUSH
54536: LD_VAR 0 5
54540: PUSH
54541: LD_INT 2
54543: ARRAY
54544: PPUSH
54545: LD_VAR 0 5
54549: PUSH
54550: LD_INT 3
54552: ARRAY
54553: PPUSH
54554: CALL_OW 117
// break ;
54558: GO 54562
// end ;
54560: GO 54111
54562: POP
54563: POP
// end ; end ;
54564: GO 53198
54566: POP
54567: POP
// end ;
54568: LD_VAR 0 1
54572: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
54573: LD_INT 0
54575: PPUSH
54576: PPUSH
54577: PPUSH
54578: PPUSH
// if not mc_bases then
54579: LD_EXP 41
54583: NOT
54584: IFFALSE 54588
// exit ;
54586: GO 54749
// for i = 1 to mc_bases do
54588: LD_ADDR_VAR 0 2
54592: PUSH
54593: DOUBLE
54594: LD_INT 1
54596: DEC
54597: ST_TO_ADDR
54598: LD_EXP 41
54602: PUSH
54603: FOR_TO
54604: IFFALSE 54747
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
54606: LD_ADDR_VAR 0 4
54610: PUSH
54611: LD_EXP 60
54615: PUSH
54616: LD_VAR 0 2
54620: ARRAY
54621: PUSH
54622: LD_EXP 63
54626: PUSH
54627: LD_VAR 0 2
54631: ARRAY
54632: ADD
54633: PPUSH
54634: LD_INT 33
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PPUSH
54644: CALL_OW 72
54648: ST_TO_ADDR
// if tmp then
54649: LD_VAR 0 4
54653: IFFALSE 54745
// for j in tmp do
54655: LD_ADDR_VAR 0 3
54659: PUSH
54660: LD_VAR 0 4
54664: PUSH
54665: FOR_IN
54666: IFFALSE 54743
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
54668: LD_VAR 0 3
54672: PPUSH
54673: CALL_OW 312
54677: NOT
54678: PUSH
54679: LD_VAR 0 3
54683: PPUSH
54684: CALL_OW 256
54688: PUSH
54689: LD_INT 250
54691: GREATEREQUAL
54692: AND
54693: IFFALSE 54706
// Connect ( j ) else
54695: LD_VAR 0 3
54699: PPUSH
54700: CALL 18869 0 1
54704: GO 54741
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
54706: LD_VAR 0 3
54710: PPUSH
54711: CALL_OW 256
54715: PUSH
54716: LD_INT 250
54718: LESS
54719: PUSH
54720: LD_VAR 0 3
54724: PPUSH
54725: CALL_OW 312
54729: AND
54730: IFFALSE 54741
// ComUnlink ( j ) ;
54732: LD_VAR 0 3
54736: PPUSH
54737: CALL_OW 136
54741: GO 54665
54743: POP
54744: POP
// end ;
54745: GO 54603
54747: POP
54748: POP
// end ;
54749: LD_VAR 0 1
54753: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
54754: LD_INT 0
54756: PPUSH
54757: PPUSH
54758: PPUSH
54759: PPUSH
54760: PPUSH
// if not mc_bases then
54761: LD_EXP 41
54765: NOT
54766: IFFALSE 54770
// exit ;
54768: GO 55230
// for i = 1 to mc_bases do
54770: LD_ADDR_VAR 0 2
54774: PUSH
54775: DOUBLE
54776: LD_INT 1
54778: DEC
54779: ST_TO_ADDR
54780: LD_EXP 41
54784: PUSH
54785: FOR_TO
54786: IFFALSE 55228
// begin if not mc_produce [ i ] then
54788: LD_EXP 62
54792: PUSH
54793: LD_VAR 0 2
54797: ARRAY
54798: NOT
54799: IFFALSE 54803
// continue ;
54801: GO 54785
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
54803: LD_ADDR_VAR 0 5
54807: PUSH
54808: LD_EXP 41
54812: PUSH
54813: LD_VAR 0 2
54817: ARRAY
54818: PPUSH
54819: LD_INT 30
54821: PUSH
54822: LD_INT 3
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PPUSH
54829: CALL_OW 72
54833: ST_TO_ADDR
// if not fac then
54834: LD_VAR 0 5
54838: NOT
54839: IFFALSE 54843
// continue ;
54841: GO 54785
// for j in fac do
54843: LD_ADDR_VAR 0 3
54847: PUSH
54848: LD_VAR 0 5
54852: PUSH
54853: FOR_IN
54854: IFFALSE 55224
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
54856: LD_VAR 0 3
54860: PPUSH
54861: CALL_OW 461
54865: PUSH
54866: LD_INT 2
54868: NONEQUAL
54869: PUSH
54870: LD_VAR 0 3
54874: PPUSH
54875: LD_INT 15
54877: PPUSH
54878: CALL 18572 0 2
54882: PUSH
54883: LD_INT 4
54885: ARRAY
54886: OR
54887: PUSH
54888: LD_VAR 0 3
54892: PPUSH
54893: CALL_OW 313
54897: PUSH
54898: LD_INT 0
54900: EQUAL
54901: OR
54902: IFFALSE 54906
// continue ;
54904: GO 54853
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
54906: LD_VAR 0 3
54910: PPUSH
54911: LD_EXP 62
54915: PUSH
54916: LD_VAR 0 2
54920: ARRAY
54921: PUSH
54922: LD_INT 1
54924: ARRAY
54925: PUSH
54926: LD_INT 1
54928: ARRAY
54929: PPUSH
54930: LD_EXP 62
54934: PUSH
54935: LD_VAR 0 2
54939: ARRAY
54940: PUSH
54941: LD_INT 1
54943: ARRAY
54944: PUSH
54945: LD_INT 2
54947: ARRAY
54948: PPUSH
54949: LD_EXP 62
54953: PUSH
54954: LD_VAR 0 2
54958: ARRAY
54959: PUSH
54960: LD_INT 1
54962: ARRAY
54963: PUSH
54964: LD_INT 3
54966: ARRAY
54967: PPUSH
54968: LD_EXP 62
54972: PUSH
54973: LD_VAR 0 2
54977: ARRAY
54978: PUSH
54979: LD_INT 1
54981: ARRAY
54982: PUSH
54983: LD_INT 4
54985: ARRAY
54986: PPUSH
54987: CALL_OW 448
54991: PUSH
54992: LD_VAR 0 3
54996: PPUSH
54997: LD_EXP 62
55001: PUSH
55002: LD_VAR 0 2
55006: ARRAY
55007: PUSH
55008: LD_INT 1
55010: ARRAY
55011: PUSH
55012: LD_INT 1
55014: ARRAY
55015: PUSH
55016: LD_EXP 62
55020: PUSH
55021: LD_VAR 0 2
55025: ARRAY
55026: PUSH
55027: LD_INT 1
55029: ARRAY
55030: PUSH
55031: LD_INT 2
55033: ARRAY
55034: PUSH
55035: LD_EXP 62
55039: PUSH
55040: LD_VAR 0 2
55044: ARRAY
55045: PUSH
55046: LD_INT 1
55048: ARRAY
55049: PUSH
55050: LD_INT 3
55052: ARRAY
55053: PUSH
55054: LD_EXP 62
55058: PUSH
55059: LD_VAR 0 2
55063: ARRAY
55064: PUSH
55065: LD_INT 1
55067: ARRAY
55068: PUSH
55069: LD_INT 4
55071: ARRAY
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: PPUSH
55079: CALL 22074 0 2
55083: AND
55084: IFFALSE 55222
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
55086: LD_VAR 0 3
55090: PPUSH
55091: LD_EXP 62
55095: PUSH
55096: LD_VAR 0 2
55100: ARRAY
55101: PUSH
55102: LD_INT 1
55104: ARRAY
55105: PUSH
55106: LD_INT 1
55108: ARRAY
55109: PPUSH
55110: LD_EXP 62
55114: PUSH
55115: LD_VAR 0 2
55119: ARRAY
55120: PUSH
55121: LD_INT 1
55123: ARRAY
55124: PUSH
55125: LD_INT 2
55127: ARRAY
55128: PPUSH
55129: LD_EXP 62
55133: PUSH
55134: LD_VAR 0 2
55138: ARRAY
55139: PUSH
55140: LD_INT 1
55142: ARRAY
55143: PUSH
55144: LD_INT 3
55146: ARRAY
55147: PPUSH
55148: LD_EXP 62
55152: PUSH
55153: LD_VAR 0 2
55157: ARRAY
55158: PUSH
55159: LD_INT 1
55161: ARRAY
55162: PUSH
55163: LD_INT 4
55165: ARRAY
55166: PPUSH
55167: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
55171: LD_ADDR_VAR 0 4
55175: PUSH
55176: LD_EXP 62
55180: PUSH
55181: LD_VAR 0 2
55185: ARRAY
55186: PPUSH
55187: LD_INT 1
55189: PPUSH
55190: CALL_OW 3
55194: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
55195: LD_ADDR_EXP 62
55199: PUSH
55200: LD_EXP 62
55204: PPUSH
55205: LD_VAR 0 2
55209: PPUSH
55210: LD_VAR 0 4
55214: PPUSH
55215: CALL_OW 1
55219: ST_TO_ADDR
// break ;
55220: GO 55224
// end ; end ;
55222: GO 54853
55224: POP
55225: POP
// end ;
55226: GO 54785
55228: POP
55229: POP
// end ;
55230: LD_VAR 0 1
55234: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
55235: LD_INT 0
55237: PPUSH
55238: PPUSH
55239: PPUSH
// if not mc_bases then
55240: LD_EXP 41
55244: NOT
55245: IFFALSE 55249
// exit ;
55247: GO 55338
// for i = 1 to mc_bases do
55249: LD_ADDR_VAR 0 2
55253: PUSH
55254: DOUBLE
55255: LD_INT 1
55257: DEC
55258: ST_TO_ADDR
55259: LD_EXP 41
55263: PUSH
55264: FOR_TO
55265: IFFALSE 55336
// begin if mc_attack [ i ] then
55267: LD_EXP 61
55271: PUSH
55272: LD_VAR 0 2
55276: ARRAY
55277: IFFALSE 55334
// begin tmp := mc_attack [ i ] [ 1 ] ;
55279: LD_ADDR_VAR 0 3
55283: PUSH
55284: LD_EXP 61
55288: PUSH
55289: LD_VAR 0 2
55293: ARRAY
55294: PUSH
55295: LD_INT 1
55297: ARRAY
55298: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
55299: LD_ADDR_EXP 61
55303: PUSH
55304: LD_EXP 61
55308: PPUSH
55309: LD_VAR 0 2
55313: PPUSH
55314: EMPTY
55315: PPUSH
55316: CALL_OW 1
55320: ST_TO_ADDR
// Attack ( tmp ) ;
55321: LD_VAR 0 3
55325: PPUSH
55326: CALL 43721 0 1
// exit ;
55330: POP
55331: POP
55332: GO 55338
// end ; end ;
55334: GO 55264
55336: POP
55337: POP
// end ;
55338: LD_VAR 0 1
55342: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
55343: LD_INT 0
55345: PPUSH
55346: PPUSH
55347: PPUSH
55348: PPUSH
55349: PPUSH
55350: PPUSH
55351: PPUSH
// if not mc_bases then
55352: LD_EXP 41
55356: NOT
55357: IFFALSE 55361
// exit ;
55359: GO 55736
// for i = 1 to mc_bases do
55361: LD_ADDR_VAR 0 2
55365: PUSH
55366: DOUBLE
55367: LD_INT 1
55369: DEC
55370: ST_TO_ADDR
55371: LD_EXP 41
55375: PUSH
55376: FOR_TO
55377: IFFALSE 55734
// begin if not mc_bases [ i ] then
55379: LD_EXP 41
55383: PUSH
55384: LD_VAR 0 2
55388: ARRAY
55389: NOT
55390: IFFALSE 55394
// continue ;
55392: GO 55376
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
55394: LD_ADDR_VAR 0 7
55398: PUSH
55399: LD_EXP 41
55403: PUSH
55404: LD_VAR 0 2
55408: ARRAY
55409: PUSH
55410: LD_INT 1
55412: ARRAY
55413: PPUSH
55414: CALL 12886 0 1
55418: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
55419: LD_ADDR_EXP 64
55423: PUSH
55424: LD_EXP 64
55428: PPUSH
55429: LD_VAR 0 2
55433: PPUSH
55434: LD_EXP 41
55438: PUSH
55439: LD_VAR 0 2
55443: ARRAY
55444: PUSH
55445: LD_INT 1
55447: ARRAY
55448: PPUSH
55449: CALL_OW 255
55453: PPUSH
55454: LD_EXP 66
55458: PUSH
55459: LD_VAR 0 2
55463: ARRAY
55464: PPUSH
55465: CALL 11344 0 2
55469: PPUSH
55470: CALL_OW 1
55474: ST_TO_ADDR
// if not mc_scan [ i ] then
55475: LD_EXP 64
55479: PUSH
55480: LD_VAR 0 2
55484: ARRAY
55485: NOT
55486: IFFALSE 55641
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
55488: LD_ADDR_VAR 0 4
55492: PUSH
55493: LD_EXP 41
55497: PUSH
55498: LD_VAR 0 2
55502: ARRAY
55503: PPUSH
55504: LD_INT 2
55506: PUSH
55507: LD_INT 25
55509: PUSH
55510: LD_INT 5
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 25
55519: PUSH
55520: LD_INT 8
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 25
55529: PUSH
55530: LD_INT 9
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: PPUSH
55543: CALL_OW 72
55547: ST_TO_ADDR
// if not tmp then
55548: LD_VAR 0 4
55552: NOT
55553: IFFALSE 55557
// continue ;
55555: GO 55376
// for j in tmp do
55557: LD_ADDR_VAR 0 3
55561: PUSH
55562: LD_VAR 0 4
55566: PUSH
55567: FOR_IN
55568: IFFALSE 55639
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
55570: LD_VAR 0 3
55574: PPUSH
55575: CALL_OW 310
55579: PPUSH
55580: CALL_OW 266
55584: PUSH
55585: LD_INT 5
55587: EQUAL
55588: PUSH
55589: LD_VAR 0 3
55593: PPUSH
55594: CALL_OW 257
55598: PUSH
55599: LD_INT 1
55601: EQUAL
55602: AND
55603: PUSH
55604: LD_VAR 0 3
55608: PPUSH
55609: CALL_OW 459
55613: NOT
55614: AND
55615: PUSH
55616: LD_VAR 0 7
55620: AND
55621: IFFALSE 55637
// ComChangeProfession ( j , class ) ;
55623: LD_VAR 0 3
55627: PPUSH
55628: LD_VAR 0 7
55632: PPUSH
55633: CALL_OW 123
55637: GO 55567
55639: POP
55640: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
55641: LD_EXP 64
55645: PUSH
55646: LD_VAR 0 2
55650: ARRAY
55651: PUSH
55652: LD_EXP 63
55656: PUSH
55657: LD_VAR 0 2
55661: ARRAY
55662: AND
55663: IFFALSE 55732
// begin tmp := mc_defender [ i ] ;
55665: LD_ADDR_VAR 0 4
55669: PUSH
55670: LD_EXP 63
55674: PUSH
55675: LD_VAR 0 2
55679: ARRAY
55680: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
55681: LD_ADDR_EXP 63
55685: PUSH
55686: LD_EXP 63
55690: PPUSH
55691: LD_VAR 0 2
55695: PPUSH
55696: EMPTY
55697: PPUSH
55698: CALL_OW 1
55702: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
55703: LD_VAR 0 2
55707: PPUSH
55708: LD_VAR 0 4
55712: PPUSH
55713: LD_EXP 64
55717: PUSH
55718: LD_VAR 0 2
55722: ARRAY
55723: PPUSH
55724: CALL 11379 0 3
// exit ;
55728: POP
55729: POP
55730: GO 55736
// end ; end ;
55732: GO 55376
55734: POP
55735: POP
// end ;
55736: LD_VAR 0 1
55740: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
55741: LD_INT 0
55743: PPUSH
55744: PPUSH
55745: PPUSH
55746: PPUSH
55747: PPUSH
55748: PPUSH
55749: PPUSH
55750: PPUSH
55751: PPUSH
// if not mc_bases then
55752: LD_EXP 41
55756: NOT
55757: IFFALSE 55761
// exit ;
55759: GO 56705
// for i = 1 to mc_bases do
55761: LD_ADDR_VAR 0 2
55765: PUSH
55766: DOUBLE
55767: LD_INT 1
55769: DEC
55770: ST_TO_ADDR
55771: LD_EXP 41
55775: PUSH
55776: FOR_TO
55777: IFFALSE 56703
// begin tmp := mc_lab [ i ] ;
55779: LD_ADDR_VAR 0 6
55783: PUSH
55784: LD_EXP 74
55788: PUSH
55789: LD_VAR 0 2
55793: ARRAY
55794: ST_TO_ADDR
// if not tmp then
55795: LD_VAR 0 6
55799: NOT
55800: IFFALSE 55804
// continue ;
55802: GO 55776
// for j in tmp do
55804: LD_ADDR_VAR 0 3
55808: PUSH
55809: LD_VAR 0 6
55813: PUSH
55814: FOR_IN
55815: IFFALSE 56699
// begin side := GetSide ( j ) ;
55817: LD_ADDR_VAR 0 4
55821: PUSH
55822: LD_VAR 0 3
55826: PPUSH
55827: CALL_OW 255
55831: ST_TO_ADDR
// if not mc_tech [ side ] then
55832: LD_EXP 68
55836: PUSH
55837: LD_VAR 0 4
55841: ARRAY
55842: NOT
55843: IFFALSE 55847
// continue ;
55845: GO 55814
// if BuildingStatus ( j ) = bs_idle then
55847: LD_VAR 0 3
55851: PPUSH
55852: CALL_OW 461
55856: PUSH
55857: LD_INT 2
55859: EQUAL
55860: IFFALSE 55933
// for t in mc_tech [ side ] do
55862: LD_ADDR_VAR 0 5
55866: PUSH
55867: LD_EXP 68
55871: PUSH
55872: LD_VAR 0 4
55876: ARRAY
55877: PUSH
55878: FOR_IN
55879: IFFALSE 55931
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
55881: LD_VAR 0 3
55885: PPUSH
55886: LD_VAR 0 5
55890: PPUSH
55891: CALL_OW 430
55895: PUSH
55896: LD_VAR 0 4
55900: PPUSH
55901: LD_VAR 0 5
55905: PPUSH
55906: CALL 10452 0 2
55910: AND
55911: IFFALSE 55929
// begin ComResearch ( j , t ) ;
55913: LD_VAR 0 3
55917: PPUSH
55918: LD_VAR 0 5
55922: PPUSH
55923: CALL_OW 124
// break ;
55927: GO 55931
// end ;
55929: GO 55878
55931: POP
55932: POP
// if BuildingStatus ( j ) = bs_need_ape then
55933: LD_VAR 0 3
55937: PPUSH
55938: CALL_OW 461
55942: PUSH
55943: LD_INT 10
55945: EQUAL
55946: IFFALSE 56534
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
55948: LD_EXP 70
55952: PUSH
55953: LD_VAR 0 2
55957: ARRAY
55958: NOT
55959: PUSH
55960: LD_EXP 71
55964: PUSH
55965: LD_VAR 0 2
55969: ARRAY
55970: NOT
55971: AND
55972: PUSH
55973: LD_EXP 68
55977: PUSH
55978: LD_VAR 0 4
55982: ARRAY
55983: PUSH
55984: LD_INT 1
55986: GREATER
55987: AND
55988: IFFALSE 56119
// begin ComCancel ( j ) ;
55990: LD_VAR 0 3
55994: PPUSH
55995: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
55999: LD_ADDR_EXP 68
56003: PUSH
56004: LD_EXP 68
56008: PPUSH
56009: LD_VAR 0 4
56013: PPUSH
56014: LD_EXP 68
56018: PUSH
56019: LD_VAR 0 4
56023: ARRAY
56024: PPUSH
56025: LD_EXP 68
56029: PUSH
56030: LD_VAR 0 4
56034: ARRAY
56035: PUSH
56036: LD_INT 1
56038: MINUS
56039: PPUSH
56040: LD_EXP 68
56044: PUSH
56045: LD_VAR 0 4
56049: ARRAY
56050: PPUSH
56051: LD_INT 0
56053: PPUSH
56054: CALL 15364 0 4
56058: PPUSH
56059: CALL_OW 1
56063: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
56064: LD_ADDR_EXP 68
56068: PUSH
56069: LD_EXP 68
56073: PPUSH
56074: LD_VAR 0 4
56078: PPUSH
56079: LD_EXP 68
56083: PUSH
56084: LD_VAR 0 4
56088: ARRAY
56089: PPUSH
56090: LD_EXP 68
56094: PUSH
56095: LD_VAR 0 4
56099: ARRAY
56100: PPUSH
56101: LD_INT 1
56103: PPUSH
56104: LD_INT 0
56106: PPUSH
56107: CALL 15364 0 4
56111: PPUSH
56112: CALL_OW 1
56116: ST_TO_ADDR
// continue ;
56117: GO 55814
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
56119: LD_EXP 70
56123: PUSH
56124: LD_VAR 0 2
56128: ARRAY
56129: PUSH
56130: LD_EXP 71
56134: PUSH
56135: LD_VAR 0 2
56139: ARRAY
56140: NOT
56141: AND
56142: IFFALSE 56269
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
56144: LD_ADDR_EXP 71
56148: PUSH
56149: LD_EXP 71
56153: PPUSH
56154: LD_VAR 0 2
56158: PUSH
56159: LD_EXP 71
56163: PUSH
56164: LD_VAR 0 2
56168: ARRAY
56169: PUSH
56170: LD_INT 1
56172: PLUS
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PPUSH
56178: LD_EXP 70
56182: PUSH
56183: LD_VAR 0 2
56187: ARRAY
56188: PUSH
56189: LD_INT 1
56191: ARRAY
56192: PPUSH
56193: CALL 16381 0 3
56197: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
56198: LD_EXP 70
56202: PUSH
56203: LD_VAR 0 2
56207: ARRAY
56208: PUSH
56209: LD_INT 1
56211: ARRAY
56212: PPUSH
56213: LD_INT 112
56215: PPUSH
56216: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
56220: LD_ADDR_VAR 0 9
56224: PUSH
56225: LD_EXP 70
56229: PUSH
56230: LD_VAR 0 2
56234: ARRAY
56235: PPUSH
56236: LD_INT 1
56238: PPUSH
56239: CALL_OW 3
56243: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
56244: LD_ADDR_EXP 70
56248: PUSH
56249: LD_EXP 70
56253: PPUSH
56254: LD_VAR 0 2
56258: PPUSH
56259: LD_VAR 0 9
56263: PPUSH
56264: CALL_OW 1
56268: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
56269: LD_EXP 70
56273: PUSH
56274: LD_VAR 0 2
56278: ARRAY
56279: PUSH
56280: LD_EXP 71
56284: PUSH
56285: LD_VAR 0 2
56289: ARRAY
56290: AND
56291: PUSH
56292: LD_EXP 71
56296: PUSH
56297: LD_VAR 0 2
56301: ARRAY
56302: PUSH
56303: LD_INT 1
56305: ARRAY
56306: PPUSH
56307: CALL_OW 310
56311: NOT
56312: AND
56313: PUSH
56314: LD_VAR 0 3
56318: PPUSH
56319: CALL_OW 313
56323: PUSH
56324: LD_INT 6
56326: EQUAL
56327: AND
56328: IFFALSE 56384
// begin tmp2 := UnitsInside ( j ) ;
56330: LD_ADDR_VAR 0 9
56334: PUSH
56335: LD_VAR 0 3
56339: PPUSH
56340: CALL_OW 313
56344: ST_TO_ADDR
// if tmp2 = 6 then
56345: LD_VAR 0 9
56349: PUSH
56350: LD_INT 6
56352: EQUAL
56353: IFFALSE 56384
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
56355: LD_VAR 0 9
56359: PUSH
56360: LD_INT 1
56362: ARRAY
56363: PPUSH
56364: LD_INT 112
56366: PPUSH
56367: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
56371: LD_VAR 0 9
56375: PUSH
56376: LD_INT 1
56378: ARRAY
56379: PPUSH
56380: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
56384: LD_EXP 71
56388: PUSH
56389: LD_VAR 0 2
56393: ARRAY
56394: PUSH
56395: LD_EXP 71
56399: PUSH
56400: LD_VAR 0 2
56404: ARRAY
56405: PUSH
56406: LD_INT 1
56408: ARRAY
56409: PPUSH
56410: CALL_OW 314
56414: NOT
56415: AND
56416: PUSH
56417: LD_EXP 71
56421: PUSH
56422: LD_VAR 0 2
56426: ARRAY
56427: PUSH
56428: LD_INT 1
56430: ARRAY
56431: PPUSH
56432: CALL_OW 310
56436: NOT
56437: AND
56438: IFFALSE 56464
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
56440: LD_EXP 71
56444: PUSH
56445: LD_VAR 0 2
56449: ARRAY
56450: PUSH
56451: LD_INT 1
56453: ARRAY
56454: PPUSH
56455: LD_VAR 0 3
56459: PPUSH
56460: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
56464: LD_EXP 71
56468: PUSH
56469: LD_VAR 0 2
56473: ARRAY
56474: PUSH
56475: LD_INT 1
56477: ARRAY
56478: PPUSH
56479: CALL_OW 310
56483: PUSH
56484: LD_EXP 71
56488: PUSH
56489: LD_VAR 0 2
56493: ARRAY
56494: PUSH
56495: LD_INT 1
56497: ARRAY
56498: PPUSH
56499: CALL_OW 310
56503: PPUSH
56504: CALL_OW 461
56508: PUSH
56509: LD_INT 3
56511: NONEQUAL
56512: AND
56513: IFFALSE 56534
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
56515: LD_EXP 71
56519: PUSH
56520: LD_VAR 0 2
56524: ARRAY
56525: PUSH
56526: LD_INT 1
56528: ARRAY
56529: PPUSH
56530: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
56534: LD_VAR 0 3
56538: PPUSH
56539: CALL_OW 461
56543: PUSH
56544: LD_INT 6
56546: EQUAL
56547: PUSH
56548: LD_VAR 0 6
56552: PUSH
56553: LD_INT 1
56555: GREATER
56556: AND
56557: IFFALSE 56697
// begin sci := [ ] ;
56559: LD_ADDR_VAR 0 8
56563: PUSH
56564: EMPTY
56565: ST_TO_ADDR
// for x in tmp diff j do
56566: LD_ADDR_VAR 0 7
56570: PUSH
56571: LD_VAR 0 6
56575: PUSH
56576: LD_VAR 0 3
56580: DIFF
56581: PUSH
56582: FOR_IN
56583: IFFALSE 56623
// begin if BuildingStatus ( x ) = bs_idle then
56585: LD_VAR 0 7
56589: PPUSH
56590: CALL_OW 461
56594: PUSH
56595: LD_INT 2
56597: EQUAL
56598: IFFALSE 56621
// sci := sci ^ UnitsInside ( x ) ;
56600: LD_ADDR_VAR 0 8
56604: PUSH
56605: LD_VAR 0 8
56609: PUSH
56610: LD_VAR 0 7
56614: PPUSH
56615: CALL_OW 313
56619: ADD
56620: ST_TO_ADDR
// end ;
56621: GO 56582
56623: POP
56624: POP
// if not sci then
56625: LD_VAR 0 8
56629: NOT
56630: IFFALSE 56634
// continue ;
56632: GO 55814
// for x in sci do
56634: LD_ADDR_VAR 0 7
56638: PUSH
56639: LD_VAR 0 8
56643: PUSH
56644: FOR_IN
56645: IFFALSE 56695
// if IsInUnit ( x ) and not HasTask ( x ) then
56647: LD_VAR 0 7
56651: PPUSH
56652: CALL_OW 310
56656: PUSH
56657: LD_VAR 0 7
56661: PPUSH
56662: CALL_OW 314
56666: NOT
56667: AND
56668: IFFALSE 56693
// begin ComExitBuilding ( x ) ;
56670: LD_VAR 0 7
56674: PPUSH
56675: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
56679: LD_VAR 0 7
56683: PPUSH
56684: LD_VAR 0 3
56688: PPUSH
56689: CALL_OW 180
// end ;
56693: GO 56644
56695: POP
56696: POP
// end ; end ;
56697: GO 55814
56699: POP
56700: POP
// end ;
56701: GO 55776
56703: POP
56704: POP
// end ;
56705: LD_VAR 0 1
56709: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
56710: LD_INT 0
56712: PPUSH
56713: PPUSH
56714: PPUSH
56715: PPUSH
56716: PPUSH
56717: PPUSH
// if not mc_bases then
56718: LD_EXP 41
56722: NOT
56723: IFFALSE 56727
// exit ;
56725: GO 56966
// for i = 1 to 8 do
56727: LD_ADDR_VAR 0 2
56731: PUSH
56732: DOUBLE
56733: LD_INT 1
56735: DEC
56736: ST_TO_ADDR
56737: LD_INT 8
56739: PUSH
56740: FOR_TO
56741: IFFALSE 56767
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
56743: LD_ADDR_EXP 68
56747: PUSH
56748: LD_EXP 68
56752: PPUSH
56753: LD_VAR 0 2
56757: PPUSH
56758: EMPTY
56759: PPUSH
56760: CALL_OW 1
56764: ST_TO_ADDR
56765: GO 56740
56767: POP
56768: POP
// tmp := [ ] ;
56769: LD_ADDR_VAR 0 5
56773: PUSH
56774: EMPTY
56775: ST_TO_ADDR
// for i = 1 to mc_sides do
56776: LD_ADDR_VAR 0 2
56780: PUSH
56781: DOUBLE
56782: LD_INT 1
56784: DEC
56785: ST_TO_ADDR
56786: LD_EXP 67
56790: PUSH
56791: FOR_TO
56792: IFFALSE 56850
// if not mc_sides [ i ] in tmp then
56794: LD_EXP 67
56798: PUSH
56799: LD_VAR 0 2
56803: ARRAY
56804: PUSH
56805: LD_VAR 0 5
56809: IN
56810: NOT
56811: IFFALSE 56848
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
56813: LD_ADDR_VAR 0 5
56817: PUSH
56818: LD_VAR 0 5
56822: PPUSH
56823: LD_VAR 0 5
56827: PUSH
56828: LD_INT 1
56830: PLUS
56831: PPUSH
56832: LD_EXP 67
56836: PUSH
56837: LD_VAR 0 2
56841: ARRAY
56842: PPUSH
56843: CALL_OW 2
56847: ST_TO_ADDR
56848: GO 56791
56850: POP
56851: POP
// if not tmp then
56852: LD_VAR 0 5
56856: NOT
56857: IFFALSE 56861
// exit ;
56859: GO 56966
// for j in tmp do
56861: LD_ADDR_VAR 0 3
56865: PUSH
56866: LD_VAR 0 5
56870: PUSH
56871: FOR_IN
56872: IFFALSE 56964
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
56874: LD_ADDR_VAR 0 6
56878: PUSH
56879: LD_INT 22
56881: PUSH
56882: LD_VAR 0 3
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PPUSH
56891: CALL_OW 69
56895: ST_TO_ADDR
// if not un then
56896: LD_VAR 0 6
56900: NOT
56901: IFFALSE 56905
// continue ;
56903: GO 56871
// nation := GetNation ( un [ 1 ] ) ;
56905: LD_ADDR_VAR 0 4
56909: PUSH
56910: LD_VAR 0 6
56914: PUSH
56915: LD_INT 1
56917: ARRAY
56918: PPUSH
56919: CALL_OW 248
56923: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
56924: LD_ADDR_EXP 68
56928: PUSH
56929: LD_EXP 68
56933: PPUSH
56934: LD_VAR 0 3
56938: PPUSH
56939: LD_VAR 0 3
56943: PPUSH
56944: LD_VAR 0 4
56948: PPUSH
56949: LD_INT 1
56951: PPUSH
56952: CALL 9815 0 3
56956: PPUSH
56957: CALL_OW 1
56961: ST_TO_ADDR
// end ;
56962: GO 56871
56964: POP
56965: POP
// end ;
56966: LD_VAR 0 1
56970: RET
// export function MC_InitSides ( ) ; var i ; begin
56971: LD_INT 0
56973: PPUSH
56974: PPUSH
// if not mc_bases then
56975: LD_EXP 41
56979: NOT
56980: IFFALSE 56984
// exit ;
56982: GO 57058
// for i = 1 to mc_bases do
56984: LD_ADDR_VAR 0 2
56988: PUSH
56989: DOUBLE
56990: LD_INT 1
56992: DEC
56993: ST_TO_ADDR
56994: LD_EXP 41
56998: PUSH
56999: FOR_TO
57000: IFFALSE 57056
// if mc_bases [ i ] then
57002: LD_EXP 41
57006: PUSH
57007: LD_VAR 0 2
57011: ARRAY
57012: IFFALSE 57054
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
57014: LD_ADDR_EXP 67
57018: PUSH
57019: LD_EXP 67
57023: PPUSH
57024: LD_VAR 0 2
57028: PPUSH
57029: LD_EXP 41
57033: PUSH
57034: LD_VAR 0 2
57038: ARRAY
57039: PUSH
57040: LD_INT 1
57042: ARRAY
57043: PPUSH
57044: CALL_OW 255
57048: PPUSH
57049: CALL_OW 1
57053: ST_TO_ADDR
57054: GO 56999
57056: POP
57057: POP
// end ;
57058: LD_VAR 0 1
57062: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
57063: LD_INT 0
57065: PPUSH
57066: PPUSH
57067: PPUSH
57068: PPUSH
57069: PPUSH
57070: PPUSH
57071: PPUSH
57072: PPUSH
// if not mc_bases then
57073: LD_EXP 41
57077: NOT
57078: IFFALSE 57082
// exit ;
57080: GO 57727
// for i = 1 to mc_bases do
57082: LD_ADDR_VAR 0 2
57086: PUSH
57087: DOUBLE
57088: LD_INT 1
57090: DEC
57091: ST_TO_ADDR
57092: LD_EXP 41
57096: PUSH
57097: FOR_TO
57098: IFFALSE 57725
// begin if not mc_bases [ i ] then
57100: LD_EXP 41
57104: PUSH
57105: LD_VAR 0 2
57109: ARRAY
57110: NOT
57111: IFFALSE 57115
// continue ;
57113: GO 57097
// if mc_scan [ i ] then
57115: LD_EXP 64
57119: PUSH
57120: LD_VAR 0 2
57124: ARRAY
57125: IFFALSE 57151
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
57127: LD_ADDR_EXP 53
57131: PUSH
57132: LD_EXP 53
57136: PPUSH
57137: LD_VAR 0 2
57141: PPUSH
57142: EMPTY
57143: PPUSH
57144: CALL_OW 1
57148: ST_TO_ADDR
// continue ;
57149: GO 57097
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
57151: LD_ADDR_VAR 0 5
57155: PUSH
57156: LD_EXP 41
57160: PUSH
57161: LD_VAR 0 2
57165: ARRAY
57166: PUSH
57167: LD_INT 1
57169: ARRAY
57170: PPUSH
57171: CALL_OW 255
57175: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
57176: LD_ADDR_VAR 0 6
57180: PUSH
57181: LD_EXP 41
57185: PUSH
57186: LD_VAR 0 2
57190: ARRAY
57191: PPUSH
57192: LD_INT 30
57194: PUSH
57195: LD_INT 3
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PPUSH
57202: CALL_OW 72
57206: ST_TO_ADDR
// if not fac then
57207: LD_VAR 0 6
57211: NOT
57212: IFFALSE 57263
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
57214: LD_ADDR_VAR 0 6
57218: PUSH
57219: LD_EXP 41
57223: PUSH
57224: LD_VAR 0 2
57228: ARRAY
57229: PPUSH
57230: LD_INT 2
57232: PUSH
57233: LD_INT 30
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 30
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: LIST
57257: PPUSH
57258: CALL_OW 72
57262: ST_TO_ADDR
// if not fac then
57263: LD_VAR 0 6
57267: NOT
57268: IFFALSE 57272
// continue ;
57270: GO 57097
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
57272: LD_ADDR_VAR 0 7
57276: PUSH
57277: LD_EXP 65
57281: PUSH
57282: LD_VAR 0 2
57286: ARRAY
57287: PPUSH
57288: LD_INT 22
57290: PUSH
57291: LD_VAR 0 5
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 21
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: LD_INT 24
57315: PUSH
57316: LD_INT 1000
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: PPUSH
57332: CALL_OW 70
57336: PUSH
57337: LD_INT 22
57339: PUSH
57340: LD_VAR 0 5
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 91
57351: PUSH
57352: LD_VAR 0 6
57356: PUSH
57357: LD_INT 1
57359: ARRAY
57360: PUSH
57361: LD_INT 25
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 21
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 3
57381: PUSH
57382: LD_INT 24
57384: PUSH
57385: LD_INT 1000
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: PPUSH
57402: CALL_OW 69
57406: UNION
57407: ST_TO_ADDR
// if not vehs then
57408: LD_VAR 0 7
57412: NOT
57413: IFFALSE 57439
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
57415: LD_ADDR_EXP 53
57419: PUSH
57420: LD_EXP 53
57424: PPUSH
57425: LD_VAR 0 2
57429: PPUSH
57430: EMPTY
57431: PPUSH
57432: CALL_OW 1
57436: ST_TO_ADDR
// continue ;
57437: GO 57097
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
57439: LD_ADDR_VAR 0 8
57443: PUSH
57444: LD_EXP 41
57448: PUSH
57449: LD_VAR 0 2
57453: ARRAY
57454: PPUSH
57455: LD_INT 30
57457: PUSH
57458: LD_INT 3
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PPUSH
57465: CALL_OW 72
57469: ST_TO_ADDR
// if tmp then
57470: LD_VAR 0 8
57474: IFFALSE 57577
// begin for j in tmp do
57476: LD_ADDR_VAR 0 3
57480: PUSH
57481: LD_VAR 0 8
57485: PUSH
57486: FOR_IN
57487: IFFALSE 57575
// for k in UnitsInside ( j ) do
57489: LD_ADDR_VAR 0 4
57493: PUSH
57494: LD_VAR 0 3
57498: PPUSH
57499: CALL_OW 313
57503: PUSH
57504: FOR_IN
57505: IFFALSE 57571
// if k then
57507: LD_VAR 0 4
57511: IFFALSE 57569
// if not k in mc_repair_vehicle [ i ] then
57513: LD_VAR 0 4
57517: PUSH
57518: LD_EXP 53
57522: PUSH
57523: LD_VAR 0 2
57527: ARRAY
57528: IN
57529: NOT
57530: IFFALSE 57569
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
57532: LD_ADDR_EXP 53
57536: PUSH
57537: LD_EXP 53
57541: PPUSH
57542: LD_VAR 0 2
57546: PPUSH
57547: LD_EXP 53
57551: PUSH
57552: LD_VAR 0 2
57556: ARRAY
57557: PUSH
57558: LD_VAR 0 4
57562: UNION
57563: PPUSH
57564: CALL_OW 1
57568: ST_TO_ADDR
57569: GO 57504
57571: POP
57572: POP
57573: GO 57486
57575: POP
57576: POP
// end ; if not mc_repair_vehicle [ i ] then
57577: LD_EXP 53
57581: PUSH
57582: LD_VAR 0 2
57586: ARRAY
57587: NOT
57588: IFFALSE 57592
// continue ;
57590: GO 57097
// for j in mc_repair_vehicle [ i ] do
57592: LD_ADDR_VAR 0 3
57596: PUSH
57597: LD_EXP 53
57601: PUSH
57602: LD_VAR 0 2
57606: ARRAY
57607: PUSH
57608: FOR_IN
57609: IFFALSE 57721
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
57611: LD_VAR 0 3
57615: PPUSH
57616: CALL_OW 311
57620: NOT
57621: PUSH
57622: LD_VAR 0 3
57626: PUSH
57627: LD_EXP 44
57631: PUSH
57632: LD_VAR 0 2
57636: ARRAY
57637: PUSH
57638: LD_INT 1
57640: ARRAY
57641: IN
57642: NOT
57643: AND
57644: PUSH
57645: LD_VAR 0 3
57649: PUSH
57650: LD_EXP 44
57654: PUSH
57655: LD_VAR 0 2
57659: ARRAY
57660: PUSH
57661: LD_INT 2
57663: ARRAY
57664: IN
57665: NOT
57666: AND
57667: IFFALSE 57719
// begin if IsInUnit ( j ) then
57669: LD_VAR 0 3
57673: PPUSH
57674: CALL_OW 310
57678: IFFALSE 57689
// ComExitBuilding ( j ) ;
57680: LD_VAR 0 3
57684: PPUSH
57685: CALL_OW 122
// if not HasTask ( j ) then
57689: LD_VAR 0 3
57693: PPUSH
57694: CALL_OW 314
57698: NOT
57699: IFFALSE 57719
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
57701: LD_VAR 0 3
57705: PPUSH
57706: LD_VAR 0 7
57710: PUSH
57711: LD_INT 1
57713: ARRAY
57714: PPUSH
57715: CALL_OW 189
// end ; end ;
57719: GO 57608
57721: POP
57722: POP
// end ;
57723: GO 57097
57725: POP
57726: POP
// end ;
57727: LD_VAR 0 1
57731: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , danger_at_area , side ; begin
57732: LD_INT 0
57734: PPUSH
57735: PPUSH
57736: PPUSH
57737: PPUSH
57738: PPUSH
57739: PPUSH
57740: PPUSH
57741: PPUSH
57742: PPUSH
57743: PPUSH
// if not mc_bases then
57744: LD_EXP 41
57748: NOT
57749: IFFALSE 57753
// exit ;
57751: GO 58372
// for i = 1 to mc_bases do
57753: LD_ADDR_VAR 0 2
57757: PUSH
57758: DOUBLE
57759: LD_INT 1
57761: DEC
57762: ST_TO_ADDR
57763: LD_EXP 41
57767: PUSH
57768: FOR_TO
57769: IFFALSE 58370
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
57771: LD_EXP 69
57775: PUSH
57776: LD_VAR 0 2
57780: ARRAY
57781: NOT
57782: PUSH
57783: LD_EXP 44
57787: PUSH
57788: LD_VAR 0 2
57792: ARRAY
57793: PUSH
57794: LD_INT 1
57796: ARRAY
57797: OR
57798: PUSH
57799: LD_EXP 44
57803: PUSH
57804: LD_VAR 0 2
57808: ARRAY
57809: PUSH
57810: LD_INT 2
57812: ARRAY
57813: OR
57814: PUSH
57815: LD_EXP 67
57819: PUSH
57820: LD_VAR 0 2
57824: ARRAY
57825: PPUSH
57826: LD_INT 1
57828: PPUSH
57829: CALL_OW 325
57833: NOT
57834: OR
57835: PUSH
57836: LD_EXP 64
57840: PUSH
57841: LD_VAR 0 2
57845: ARRAY
57846: OR
57847: IFFALSE 57851
// continue ;
57849: GO 57768
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
57851: LD_ADDR_VAR 0 8
57855: PUSH
57856: LD_EXP 41
57860: PUSH
57861: LD_VAR 0 2
57865: ARRAY
57866: PPUSH
57867: LD_INT 25
57869: PUSH
57870: LD_INT 4
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 50
57879: PUSH
57880: EMPTY
57881: LIST
57882: PUSH
57883: LD_INT 3
57885: PUSH
57886: LD_INT 60
57888: PUSH
57889: EMPTY
57890: LIST
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: LIST
57900: PPUSH
57901: CALL_OW 72
57905: PUSH
57906: LD_EXP 45
57910: PUSH
57911: LD_VAR 0 2
57915: ARRAY
57916: DIFF
57917: ST_TO_ADDR
// if not tmp then
57918: LD_VAR 0 8
57922: NOT
57923: IFFALSE 57927
// continue ;
57925: GO 57768
// side := GetSide ( tmp [ 1 ] ) ;
57927: LD_ADDR_VAR 0 10
57931: PUSH
57932: LD_VAR 0 8
57936: PUSH
57937: LD_INT 1
57939: ARRAY
57940: PPUSH
57941: CALL_OW 255
57945: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
57946: LD_ADDR_VAR 0 7
57950: PUSH
57951: LD_EXP 69
57955: PUSH
57956: LD_VAR 0 2
57960: ARRAY
57961: PPUSH
57962: LD_INT 22
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 25
57974: PUSH
57975: LD_INT 12
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PPUSH
57986: CALL_OW 70
57990: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
57991: LD_ADDR_VAR 0 9
57995: PUSH
57996: LD_EXP 69
58000: PUSH
58001: LD_VAR 0 2
58005: ARRAY
58006: PPUSH
58007: LD_INT 81
58009: PUSH
58010: LD_VAR 0 10
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PPUSH
58019: CALL_OW 70
58023: ST_TO_ADDR
// if not apes or danger_at_area then
58024: LD_VAR 0 7
58028: NOT
58029: PUSH
58030: LD_VAR 0 9
58034: OR
58035: IFFALSE 58085
// begin if mc_taming [ i ] then
58037: LD_EXP 72
58041: PUSH
58042: LD_VAR 0 2
58046: ARRAY
58047: IFFALSE 58083
// begin MC_Reset ( i , 121 ) ;
58049: LD_VAR 0 2
58053: PPUSH
58054: LD_INT 121
58056: PPUSH
58057: CALL 48877 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
58061: LD_ADDR_EXP 72
58065: PUSH
58066: LD_EXP 72
58070: PPUSH
58071: LD_VAR 0 2
58075: PPUSH
58076: EMPTY
58077: PPUSH
58078: CALL_OW 1
58082: ST_TO_ADDR
// end ; continue ;
58083: GO 57768
// end ; for j in tmp do
58085: LD_ADDR_VAR 0 3
58089: PUSH
58090: LD_VAR 0 8
58094: PUSH
58095: FOR_IN
58096: IFFALSE 58366
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
58098: LD_VAR 0 3
58102: PUSH
58103: LD_EXP 72
58107: PUSH
58108: LD_VAR 0 2
58112: ARRAY
58113: IN
58114: NOT
58115: PUSH
58116: LD_EXP 72
58120: PUSH
58121: LD_VAR 0 2
58125: ARRAY
58126: PUSH
58127: LD_INT 3
58129: LESS
58130: AND
58131: IFFALSE 58189
// begin SetTag ( j , 121 ) ;
58133: LD_VAR 0 3
58137: PPUSH
58138: LD_INT 121
58140: PPUSH
58141: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
58145: LD_ADDR_EXP 72
58149: PUSH
58150: LD_EXP 72
58154: PPUSH
58155: LD_VAR 0 2
58159: PUSH
58160: LD_EXP 72
58164: PUSH
58165: LD_VAR 0 2
58169: ARRAY
58170: PUSH
58171: LD_INT 1
58173: PLUS
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PPUSH
58179: LD_VAR 0 3
58183: PPUSH
58184: CALL 16381 0 3
58188: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
58189: LD_VAR 0 3
58193: PUSH
58194: LD_EXP 72
58198: PUSH
58199: LD_VAR 0 2
58203: ARRAY
58204: IN
58205: IFFALSE 58364
// begin if IsInUnit ( j ) then
58207: LD_VAR 0 3
58211: PPUSH
58212: CALL_OW 310
58216: IFFALSE 58227
// ComExitBuilding ( j ) ;
58218: LD_VAR 0 3
58222: PPUSH
58223: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
58227: LD_ADDR_VAR 0 6
58231: PUSH
58232: LD_VAR 0 7
58236: PPUSH
58237: LD_VAR 0 3
58241: PPUSH
58242: CALL_OW 74
58246: ST_TO_ADDR
// if not ape then
58247: LD_VAR 0 6
58251: NOT
58252: IFFALSE 58256
// break ;
58254: GO 58366
// x := GetX ( ape ) ;
58256: LD_ADDR_VAR 0 4
58260: PUSH
58261: LD_VAR 0 6
58265: PPUSH
58266: CALL_OW 250
58270: ST_TO_ADDR
// y := GetY ( ape ) ;
58271: LD_ADDR_VAR 0 5
58275: PUSH
58276: LD_VAR 0 6
58280: PPUSH
58281: CALL_OW 251
58285: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
58286: LD_VAR 0 4
58290: PPUSH
58291: LD_VAR 0 5
58295: PPUSH
58296: CALL_OW 488
58300: NOT
58301: PUSH
58302: LD_VAR 0 10
58306: PPUSH
58307: LD_VAR 0 4
58311: PPUSH
58312: LD_VAR 0 5
58316: PPUSH
58317: LD_INT 20
58319: PPUSH
58320: CALL 16875 0 4
58324: PUSH
58325: LD_INT 4
58327: ARRAY
58328: OR
58329: IFFALSE 58333
// break ;
58331: GO 58366
// if not HasTask ( j ) then
58333: LD_VAR 0 3
58337: PPUSH
58338: CALL_OW 314
58342: NOT
58343: IFFALSE 58364
// ComTameXY ( j , x , y ) ;
58345: LD_VAR 0 3
58349: PPUSH
58350: LD_VAR 0 4
58354: PPUSH
58355: LD_VAR 0 5
58359: PPUSH
58360: CALL_OW 131
// end ; end ;
58364: GO 58095
58366: POP
58367: POP
// end ;
58368: GO 57768
58370: POP
58371: POP
// end ;
58372: LD_VAR 0 1
58376: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
58377: LD_INT 0
58379: PPUSH
58380: PPUSH
58381: PPUSH
58382: PPUSH
58383: PPUSH
58384: PPUSH
58385: PPUSH
58386: PPUSH
// if not mc_bases then
58387: LD_EXP 41
58391: NOT
58392: IFFALSE 58396
// exit ;
58394: GO 59006
// for i = 1 to mc_bases do
58396: LD_ADDR_VAR 0 2
58400: PUSH
58401: DOUBLE
58402: LD_INT 1
58404: DEC
58405: ST_TO_ADDR
58406: LD_EXP 41
58410: PUSH
58411: FOR_TO
58412: IFFALSE 59004
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
58414: LD_EXP 70
58418: PUSH
58419: LD_VAR 0 2
58423: ARRAY
58424: NOT
58425: PUSH
58426: LD_EXP 70
58430: PUSH
58431: LD_VAR 0 2
58435: ARRAY
58436: PPUSH
58437: LD_INT 25
58439: PUSH
58440: LD_INT 12
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PPUSH
58447: CALL_OW 72
58451: NOT
58452: OR
58453: IFFALSE 58457
// continue ;
58455: GO 58411
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
58457: LD_ADDR_VAR 0 5
58461: PUSH
58462: LD_EXP 70
58466: PUSH
58467: LD_VAR 0 2
58471: ARRAY
58472: PUSH
58473: LD_INT 1
58475: ARRAY
58476: PPUSH
58477: CALL_OW 255
58481: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
58482: LD_VAR 0 5
58486: PPUSH
58487: LD_INT 2
58489: PPUSH
58490: CALL_OW 325
58494: IFFALSE 58739
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
58496: LD_ADDR_VAR 0 4
58500: PUSH
58501: LD_EXP 70
58505: PUSH
58506: LD_VAR 0 2
58510: ARRAY
58511: PPUSH
58512: LD_INT 25
58514: PUSH
58515: LD_INT 16
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PPUSH
58522: CALL_OW 72
58526: ST_TO_ADDR
// if tmp < 6 then
58527: LD_VAR 0 4
58531: PUSH
58532: LD_INT 6
58534: LESS
58535: IFFALSE 58739
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58537: LD_ADDR_VAR 0 6
58541: PUSH
58542: LD_EXP 41
58546: PUSH
58547: LD_VAR 0 2
58551: ARRAY
58552: PPUSH
58553: LD_INT 2
58555: PUSH
58556: LD_INT 30
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 30
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: LIST
58580: PPUSH
58581: CALL_OW 72
58585: ST_TO_ADDR
// if depot then
58586: LD_VAR 0 6
58590: IFFALSE 58739
// begin for j in depot do
58592: LD_ADDR_VAR 0 3
58596: PUSH
58597: LD_VAR 0 6
58601: PUSH
58602: FOR_IN
58603: IFFALSE 58634
// begin if UnitsInside ( j ) < 6 then
58605: LD_VAR 0 3
58609: PPUSH
58610: CALL_OW 313
58614: PUSH
58615: LD_INT 6
58617: LESS
58618: IFFALSE 58632
// begin selected := j ;
58620: LD_ADDR_VAR 0 7
58624: PUSH
58625: LD_VAR 0 3
58629: ST_TO_ADDR
// break ;
58630: GO 58634
// end ; end ;
58632: GO 58602
58634: POP
58635: POP
// if selected then
58636: LD_VAR 0 7
58640: IFFALSE 58739
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
58642: LD_ADDR_VAR 0 3
58646: PUSH
58647: LD_EXP 70
58651: PUSH
58652: LD_VAR 0 2
58656: ARRAY
58657: PPUSH
58658: LD_INT 25
58660: PUSH
58661: LD_INT 12
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PPUSH
58668: CALL_OW 72
58672: PUSH
58673: FOR_IN
58674: IFFALSE 58737
// if not HasTask ( j ) then
58676: LD_VAR 0 3
58680: PPUSH
58681: CALL_OW 314
58685: NOT
58686: IFFALSE 58735
// begin if not IsInUnit ( j ) then
58688: LD_VAR 0 3
58692: PPUSH
58693: CALL_OW 310
58697: NOT
58698: IFFALSE 58714
// ComEnterUnit ( j , selected ) ;
58700: LD_VAR 0 3
58704: PPUSH
58705: LD_VAR 0 7
58709: PPUSH
58710: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
58714: LD_VAR 0 3
58718: PPUSH
58719: LD_INT 16
58721: PPUSH
58722: CALL_OW 183
// AddComExitBuilding ( j ) ;
58726: LD_VAR 0 3
58730: PPUSH
58731: CALL_OW 182
// end ;
58735: GO 58673
58737: POP
58738: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
58739: LD_VAR 0 5
58743: PPUSH
58744: LD_INT 11
58746: PPUSH
58747: CALL_OW 325
58751: IFFALSE 59002
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
58753: LD_ADDR_VAR 0 4
58757: PUSH
58758: LD_EXP 70
58762: PUSH
58763: LD_VAR 0 2
58767: ARRAY
58768: PPUSH
58769: LD_INT 25
58771: PUSH
58772: LD_INT 16
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PPUSH
58779: CALL_OW 72
58783: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
58784: LD_VAR 0 4
58788: PUSH
58789: LD_INT 6
58791: GREATEREQUAL
58792: PUSH
58793: LD_VAR 0 5
58797: PPUSH
58798: LD_INT 2
58800: PPUSH
58801: CALL_OW 325
58805: NOT
58806: OR
58807: IFFALSE 59002
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
58809: LD_ADDR_VAR 0 8
58813: PUSH
58814: LD_EXP 41
58818: PUSH
58819: LD_VAR 0 2
58823: ARRAY
58824: PPUSH
58825: LD_INT 2
58827: PUSH
58828: LD_INT 30
58830: PUSH
58831: LD_INT 4
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 30
58840: PUSH
58841: LD_INT 5
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: LIST
58852: PPUSH
58853: CALL_OW 72
58857: ST_TO_ADDR
// if barracks then
58858: LD_VAR 0 8
58862: IFFALSE 59002
// begin for j in barracks do
58864: LD_ADDR_VAR 0 3
58868: PUSH
58869: LD_VAR 0 8
58873: PUSH
58874: FOR_IN
58875: IFFALSE 58906
// begin if UnitsInside ( j ) < 6 then
58877: LD_VAR 0 3
58881: PPUSH
58882: CALL_OW 313
58886: PUSH
58887: LD_INT 6
58889: LESS
58890: IFFALSE 58904
// begin selected := j ;
58892: LD_ADDR_VAR 0 7
58896: PUSH
58897: LD_VAR 0 3
58901: ST_TO_ADDR
// break ;
58902: GO 58906
// end ; end ;
58904: GO 58874
58906: POP
58907: POP
// if selected then
58908: LD_VAR 0 7
58912: IFFALSE 59002
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
58914: LD_ADDR_VAR 0 3
58918: PUSH
58919: LD_EXP 70
58923: PUSH
58924: LD_VAR 0 2
58928: ARRAY
58929: PPUSH
58930: LD_INT 25
58932: PUSH
58933: LD_INT 12
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PPUSH
58940: CALL_OW 72
58944: PUSH
58945: FOR_IN
58946: IFFALSE 59000
// if not IsInUnit ( j ) and not HasTask ( j ) then
58948: LD_VAR 0 3
58952: PPUSH
58953: CALL_OW 310
58957: NOT
58958: PUSH
58959: LD_VAR 0 3
58963: PPUSH
58964: CALL_OW 314
58968: NOT
58969: AND
58970: IFFALSE 58998
// begin ComEnterUnit ( j , selected ) ;
58972: LD_VAR 0 3
58976: PPUSH
58977: LD_VAR 0 7
58981: PPUSH
58982: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
58986: LD_VAR 0 3
58990: PPUSH
58991: LD_INT 15
58993: PPUSH
58994: CALL_OW 183
// end ;
58998: GO 58945
59000: POP
59001: POP
// end ; end ; end ; end ; end ;
59002: GO 58411
59004: POP
59005: POP
// end ;
59006: LD_VAR 0 1
59010: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
59011: LD_INT 0
59013: PPUSH
59014: PPUSH
59015: PPUSH
59016: PPUSH
// if not mc_bases then
59017: LD_EXP 41
59021: NOT
59022: IFFALSE 59026
// exit ;
59024: GO 59204
// for i = 1 to mc_bases do
59026: LD_ADDR_VAR 0 2
59030: PUSH
59031: DOUBLE
59032: LD_INT 1
59034: DEC
59035: ST_TO_ADDR
59036: LD_EXP 41
59040: PUSH
59041: FOR_TO
59042: IFFALSE 59202
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
59044: LD_ADDR_VAR 0 4
59048: PUSH
59049: LD_EXP 41
59053: PUSH
59054: LD_VAR 0 2
59058: ARRAY
59059: PPUSH
59060: LD_INT 25
59062: PUSH
59063: LD_INT 9
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PPUSH
59070: CALL_OW 72
59074: ST_TO_ADDR
// if not tmp then
59075: LD_VAR 0 4
59079: NOT
59080: IFFALSE 59084
// continue ;
59082: GO 59041
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
59084: LD_EXP 67
59088: PUSH
59089: LD_VAR 0 2
59093: ARRAY
59094: PPUSH
59095: LD_INT 29
59097: PPUSH
59098: CALL_OW 325
59102: NOT
59103: PUSH
59104: LD_EXP 67
59108: PUSH
59109: LD_VAR 0 2
59113: ARRAY
59114: PPUSH
59115: LD_INT 28
59117: PPUSH
59118: CALL_OW 325
59122: NOT
59123: AND
59124: IFFALSE 59128
// continue ;
59126: GO 59041
// for j in tmp do
59128: LD_ADDR_VAR 0 3
59132: PUSH
59133: LD_VAR 0 4
59137: PUSH
59138: FOR_IN
59139: IFFALSE 59198
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
59141: LD_VAR 0 3
59145: PUSH
59146: LD_EXP 44
59150: PUSH
59151: LD_VAR 0 2
59155: ARRAY
59156: PUSH
59157: LD_INT 1
59159: ARRAY
59160: IN
59161: NOT
59162: PUSH
59163: LD_VAR 0 3
59167: PUSH
59168: LD_EXP 44
59172: PUSH
59173: LD_VAR 0 2
59177: ARRAY
59178: PUSH
59179: LD_INT 2
59181: ARRAY
59182: IN
59183: NOT
59184: AND
59185: IFFALSE 59196
// ComSpaceTimeShoot ( j ) ;
59187: LD_VAR 0 3
59191: PPUSH
59192: CALL 10543 0 1
59196: GO 59138
59198: POP
59199: POP
// end ;
59200: GO 59041
59202: POP
59203: POP
// end ;
59204: LD_VAR 0 1
59208: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
59209: LD_INT 0
59211: PPUSH
59212: PPUSH
59213: PPUSH
59214: PPUSH
// if not mc_bases then
59215: LD_EXP 41
59219: NOT
59220: IFFALSE 59224
// exit ;
59222: GO 59246
// for i = 1 to mc_bases do
59224: LD_ADDR_VAR 0 2
59228: PUSH
59229: DOUBLE
59230: LD_INT 1
59232: DEC
59233: ST_TO_ADDR
59234: LD_EXP 41
59238: PUSH
59239: FOR_TO
59240: IFFALSE 59244
// begin end ;
59242: GO 59239
59244: POP
59245: POP
// end ;
59246: LD_VAR 0 1
59250: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
59251: LD_INT 0
59253: PPUSH
59254: PPUSH
59255: PPUSH
59256: PPUSH
59257: PPUSH
59258: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
59259: LD_VAR 0 1
59263: NOT
59264: PUSH
59265: LD_VAR 0 2
59269: NOT
59270: OR
59271: PUSH
59272: LD_VAR 0 3
59276: NOT
59277: OR
59278: PUSH
59279: LD_VAR 0 4
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: LD_INT 3
59292: PUSH
59293: LD_INT 4
59295: PUSH
59296: LD_INT 5
59298: PUSH
59299: LD_INT 8
59301: PUSH
59302: LD_INT 9
59304: PUSH
59305: LD_INT 15
59307: PUSH
59308: LD_INT 16
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: IN
59322: NOT
59323: OR
59324: IFFALSE 59328
// exit ;
59326: GO 60228
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
59328: LD_ADDR_VAR 0 2
59332: PUSH
59333: LD_VAR 0 2
59337: PPUSH
59338: LD_INT 21
59340: PUSH
59341: LD_INT 3
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 24
59350: PUSH
59351: LD_INT 250
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PPUSH
59362: CALL_OW 72
59366: ST_TO_ADDR
// case class of 1 , 15 :
59367: LD_VAR 0 4
59371: PUSH
59372: LD_INT 1
59374: DOUBLE
59375: EQUAL
59376: IFTRUE 59386
59378: LD_INT 15
59380: DOUBLE
59381: EQUAL
59382: IFTRUE 59386
59384: GO 59471
59386: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
59387: LD_ADDR_VAR 0 8
59391: PUSH
59392: LD_VAR 0 2
59396: PPUSH
59397: LD_INT 2
59399: PUSH
59400: LD_INT 30
59402: PUSH
59403: LD_INT 32
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 30
59412: PUSH
59413: LD_INT 31
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: LIST
59424: PPUSH
59425: CALL_OW 72
59429: PUSH
59430: LD_VAR 0 2
59434: PPUSH
59435: LD_INT 2
59437: PUSH
59438: LD_INT 30
59440: PUSH
59441: LD_INT 4
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 30
59450: PUSH
59451: LD_INT 5
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: LIST
59462: PPUSH
59463: CALL_OW 72
59467: ADD
59468: ST_TO_ADDR
59469: GO 59717
59471: LD_INT 2
59473: DOUBLE
59474: EQUAL
59475: IFTRUE 59485
59477: LD_INT 16
59479: DOUBLE
59480: EQUAL
59481: IFTRUE 59485
59483: GO 59531
59485: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
59486: LD_ADDR_VAR 0 8
59490: PUSH
59491: LD_VAR 0 2
59495: PPUSH
59496: LD_INT 2
59498: PUSH
59499: LD_INT 30
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 30
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: LIST
59523: PPUSH
59524: CALL_OW 72
59528: ST_TO_ADDR
59529: GO 59717
59531: LD_INT 3
59533: DOUBLE
59534: EQUAL
59535: IFTRUE 59539
59537: GO 59585
59539: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
59540: LD_ADDR_VAR 0 8
59544: PUSH
59545: LD_VAR 0 2
59549: PPUSH
59550: LD_INT 2
59552: PUSH
59553: LD_INT 30
59555: PUSH
59556: LD_INT 2
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 30
59565: PUSH
59566: LD_INT 3
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: LIST
59577: PPUSH
59578: CALL_OW 72
59582: ST_TO_ADDR
59583: GO 59717
59585: LD_INT 4
59587: DOUBLE
59588: EQUAL
59589: IFTRUE 59593
59591: GO 59650
59593: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
59594: LD_ADDR_VAR 0 8
59598: PUSH
59599: LD_VAR 0 2
59603: PPUSH
59604: LD_INT 2
59606: PUSH
59607: LD_INT 30
59609: PUSH
59610: LD_INT 6
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 30
59619: PUSH
59620: LD_INT 7
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 30
59629: PUSH
59630: LD_INT 8
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: PPUSH
59643: CALL_OW 72
59647: ST_TO_ADDR
59648: GO 59717
59650: LD_INT 5
59652: DOUBLE
59653: EQUAL
59654: IFTRUE 59670
59656: LD_INT 8
59658: DOUBLE
59659: EQUAL
59660: IFTRUE 59670
59662: LD_INT 9
59664: DOUBLE
59665: EQUAL
59666: IFTRUE 59670
59668: GO 59716
59670: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
59671: LD_ADDR_VAR 0 8
59675: PUSH
59676: LD_VAR 0 2
59680: PPUSH
59681: LD_INT 2
59683: PUSH
59684: LD_INT 30
59686: PUSH
59687: LD_INT 4
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 30
59696: PUSH
59697: LD_INT 5
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: LIST
59708: PPUSH
59709: CALL_OW 72
59713: ST_TO_ADDR
59714: GO 59717
59716: POP
// if not tmp then
59717: LD_VAR 0 8
59721: NOT
59722: IFFALSE 59726
// exit ;
59724: GO 60228
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
59726: LD_VAR 0 4
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: LD_INT 15
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: IN
59741: PUSH
59742: LD_EXP 50
59746: PUSH
59747: LD_VAR 0 1
59751: ARRAY
59752: AND
59753: IFFALSE 59909
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
59755: LD_ADDR_VAR 0 9
59759: PUSH
59760: LD_EXP 50
59764: PUSH
59765: LD_VAR 0 1
59769: ARRAY
59770: PUSH
59771: LD_INT 1
59773: ARRAY
59774: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
59775: LD_VAR 0 9
59779: PUSH
59780: LD_EXP 51
59784: PUSH
59785: LD_VAR 0 1
59789: ARRAY
59790: IN
59791: NOT
59792: IFFALSE 59907
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
59794: LD_ADDR_EXP 51
59798: PUSH
59799: LD_EXP 51
59803: PPUSH
59804: LD_VAR 0 1
59808: PUSH
59809: LD_EXP 51
59813: PUSH
59814: LD_VAR 0 1
59818: ARRAY
59819: PUSH
59820: LD_INT 1
59822: PLUS
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PPUSH
59828: LD_VAR 0 9
59832: PPUSH
59833: CALL 16381 0 3
59837: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
59838: LD_ADDR_EXP 50
59842: PUSH
59843: LD_EXP 50
59847: PPUSH
59848: LD_VAR 0 1
59852: PPUSH
59853: LD_EXP 50
59857: PUSH
59858: LD_VAR 0 1
59862: ARRAY
59863: PUSH
59864: LD_VAR 0 9
59868: DIFF
59869: PPUSH
59870: CALL_OW 1
59874: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
59875: LD_VAR 0 3
59879: PPUSH
59880: LD_EXP 51
59884: PUSH
59885: LD_VAR 0 1
59889: ARRAY
59890: PUSH
59891: LD_EXP 51
59895: PUSH
59896: LD_VAR 0 1
59900: ARRAY
59901: ARRAY
59902: PPUSH
59903: CALL_OW 120
// end ; exit ;
59907: GO 60228
// end ; if tmp > 1 then
59909: LD_VAR 0 8
59913: PUSH
59914: LD_INT 1
59916: GREATER
59917: IFFALSE 60021
// for i = 2 to tmp do
59919: LD_ADDR_VAR 0 6
59923: PUSH
59924: DOUBLE
59925: LD_INT 2
59927: DEC
59928: ST_TO_ADDR
59929: LD_VAR 0 8
59933: PUSH
59934: FOR_TO
59935: IFFALSE 60019
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
59937: LD_VAR 0 8
59941: PUSH
59942: LD_VAR 0 6
59946: ARRAY
59947: PPUSH
59948: CALL_OW 461
59952: PUSH
59953: LD_INT 6
59955: EQUAL
59956: IFFALSE 60017
// begin x := tmp [ i ] ;
59958: LD_ADDR_VAR 0 9
59962: PUSH
59963: LD_VAR 0 8
59967: PUSH
59968: LD_VAR 0 6
59972: ARRAY
59973: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
59974: LD_ADDR_VAR 0 8
59978: PUSH
59979: LD_VAR 0 8
59983: PPUSH
59984: LD_VAR 0 6
59988: PPUSH
59989: CALL_OW 3
59993: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
59994: LD_ADDR_VAR 0 8
59998: PUSH
59999: LD_VAR 0 8
60003: PPUSH
60004: LD_INT 1
60006: PPUSH
60007: LD_VAR 0 9
60011: PPUSH
60012: CALL_OW 2
60016: ST_TO_ADDR
// end ;
60017: GO 59934
60019: POP
60020: POP
// for i in tmp do
60021: LD_ADDR_VAR 0 6
60025: PUSH
60026: LD_VAR 0 8
60030: PUSH
60031: FOR_IN
60032: IFFALSE 60101
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
60034: LD_VAR 0 6
60038: PPUSH
60039: CALL_OW 313
60043: PUSH
60044: LD_INT 6
60046: LESS
60047: PUSH
60048: LD_VAR 0 6
60052: PPUSH
60053: CALL_OW 266
60057: PUSH
60058: LD_INT 31
60060: PUSH
60061: LD_INT 32
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: IN
60068: NOT
60069: AND
60070: PUSH
60071: LD_VAR 0 6
60075: PPUSH
60076: CALL_OW 313
60080: PUSH
60081: LD_INT 0
60083: EQUAL
60084: OR
60085: IFFALSE 60099
// begin j := i ;
60087: LD_ADDR_VAR 0 7
60091: PUSH
60092: LD_VAR 0 6
60096: ST_TO_ADDR
// break ;
60097: GO 60101
// end ; end ;
60099: GO 60031
60101: POP
60102: POP
// if j then
60103: LD_VAR 0 7
60107: IFFALSE 60125
// ComEnterUnit ( unit , j ) else
60109: LD_VAR 0 3
60113: PPUSH
60114: LD_VAR 0 7
60118: PPUSH
60119: CALL_OW 120
60123: GO 60228
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
60125: LD_ADDR_VAR 0 10
60129: PUSH
60130: LD_VAR 0 2
60134: PPUSH
60135: LD_INT 2
60137: PUSH
60138: LD_INT 30
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 30
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: LIST
60162: PPUSH
60163: CALL_OW 72
60167: ST_TO_ADDR
// if depot then
60168: LD_VAR 0 10
60172: IFFALSE 60228
// begin depot := NearestUnitToUnit ( depot , unit ) ;
60174: LD_ADDR_VAR 0 10
60178: PUSH
60179: LD_VAR 0 10
60183: PPUSH
60184: LD_VAR 0 3
60188: PPUSH
60189: CALL_OW 74
60193: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
60194: LD_VAR 0 3
60198: PPUSH
60199: LD_VAR 0 10
60203: PPUSH
60204: CALL_OW 296
60208: PUSH
60209: LD_INT 10
60211: GREATER
60212: IFFALSE 60228
// ComStandNearbyBuilding ( unit , depot ) ;
60214: LD_VAR 0 3
60218: PPUSH
60219: LD_VAR 0 10
60223: PPUSH
60224: CALL 11160 0 2
// end ; end ; end ;
60228: LD_VAR 0 5
60232: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
60233: LD_INT 0
60235: PPUSH
60236: PPUSH
60237: PPUSH
60238: PPUSH
// if not mc_bases then
60239: LD_EXP 41
60243: NOT
60244: IFFALSE 60248
// exit ;
60246: GO 60487
// for i = 1 to mc_bases do
60248: LD_ADDR_VAR 0 2
60252: PUSH
60253: DOUBLE
60254: LD_INT 1
60256: DEC
60257: ST_TO_ADDR
60258: LD_EXP 41
60262: PUSH
60263: FOR_TO
60264: IFFALSE 60485
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
60266: LD_ADDR_VAR 0 4
60270: PUSH
60271: LD_EXP 41
60275: PUSH
60276: LD_VAR 0 2
60280: ARRAY
60281: PPUSH
60282: LD_INT 21
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PPUSH
60292: CALL_OW 72
60296: PUSH
60297: LD_EXP 70
60301: PUSH
60302: LD_VAR 0 2
60306: ARRAY
60307: UNION
60308: ST_TO_ADDR
// if not tmp then
60309: LD_VAR 0 4
60313: NOT
60314: IFFALSE 60318
// continue ;
60316: GO 60263
// for j in tmp do
60318: LD_ADDR_VAR 0 3
60322: PUSH
60323: LD_VAR 0 4
60327: PUSH
60328: FOR_IN
60329: IFFALSE 60481
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
60331: LD_VAR 0 3
60335: PPUSH
60336: CALL_OW 110
60340: NOT
60341: PUSH
60342: LD_VAR 0 3
60346: PPUSH
60347: CALL_OW 314
60351: NOT
60352: AND
60353: PUSH
60354: LD_VAR 0 3
60358: PPUSH
60359: CALL_OW 311
60363: NOT
60364: AND
60365: PUSH
60366: LD_VAR 0 3
60370: PPUSH
60371: CALL_OW 310
60375: NOT
60376: AND
60377: PUSH
60378: LD_VAR 0 3
60382: PUSH
60383: LD_EXP 44
60387: PUSH
60388: LD_VAR 0 2
60392: ARRAY
60393: PUSH
60394: LD_INT 1
60396: ARRAY
60397: IN
60398: NOT
60399: AND
60400: PUSH
60401: LD_VAR 0 3
60405: PUSH
60406: LD_EXP 44
60410: PUSH
60411: LD_VAR 0 2
60415: ARRAY
60416: PUSH
60417: LD_INT 2
60419: ARRAY
60420: IN
60421: NOT
60422: AND
60423: PUSH
60424: LD_VAR 0 3
60428: PUSH
60429: LD_EXP 53
60433: PUSH
60434: LD_VAR 0 2
60438: ARRAY
60439: IN
60440: NOT
60441: AND
60442: IFFALSE 60479
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
60444: LD_VAR 0 2
60448: PPUSH
60449: LD_EXP 41
60453: PUSH
60454: LD_VAR 0 2
60458: ARRAY
60459: PPUSH
60460: LD_VAR 0 3
60464: PPUSH
60465: LD_VAR 0 3
60469: PPUSH
60470: CALL_OW 257
60474: PPUSH
60475: CALL 59251 0 4
// end ;
60479: GO 60328
60481: POP
60482: POP
// end ;
60483: GO 60263
60485: POP
60486: POP
// end ;
60487: LD_VAR 0 1
60491: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
60492: LD_INT 0
60494: PPUSH
60495: PPUSH
60496: PPUSH
60497: PPUSH
60498: PPUSH
60499: PPUSH
// if not mc_bases [ base ] then
60500: LD_EXP 41
60504: PUSH
60505: LD_VAR 0 1
60509: ARRAY
60510: NOT
60511: IFFALSE 60515
// exit ;
60513: GO 60697
// tmp := [ ] ;
60515: LD_ADDR_VAR 0 6
60519: PUSH
60520: EMPTY
60521: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
60522: LD_ADDR_VAR 0 7
60526: PUSH
60527: LD_VAR 0 3
60531: PPUSH
60532: LD_INT 0
60534: PPUSH
60535: CALL_OW 517
60539: ST_TO_ADDR
// if not list then
60540: LD_VAR 0 7
60544: NOT
60545: IFFALSE 60549
// exit ;
60547: GO 60697
// for i = 1 to amount do
60549: LD_ADDR_VAR 0 5
60553: PUSH
60554: DOUBLE
60555: LD_INT 1
60557: DEC
60558: ST_TO_ADDR
60559: LD_VAR 0 2
60563: PUSH
60564: FOR_TO
60565: IFFALSE 60645
// begin x := rand ( 1 , list [ 1 ] ) ;
60567: LD_ADDR_VAR 0 8
60571: PUSH
60572: LD_INT 1
60574: PPUSH
60575: LD_VAR 0 7
60579: PUSH
60580: LD_INT 1
60582: ARRAY
60583: PPUSH
60584: CALL_OW 12
60588: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
60589: LD_ADDR_VAR 0 6
60593: PUSH
60594: LD_VAR 0 6
60598: PPUSH
60599: LD_VAR 0 5
60603: PPUSH
60604: LD_VAR 0 7
60608: PUSH
60609: LD_INT 1
60611: ARRAY
60612: PUSH
60613: LD_VAR 0 8
60617: ARRAY
60618: PUSH
60619: LD_VAR 0 7
60623: PUSH
60624: LD_INT 2
60626: ARRAY
60627: PUSH
60628: LD_VAR 0 8
60632: ARRAY
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PPUSH
60638: CALL_OW 1
60642: ST_TO_ADDR
// end ;
60643: GO 60564
60645: POP
60646: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
60647: LD_ADDR_EXP 54
60651: PUSH
60652: LD_EXP 54
60656: PPUSH
60657: LD_VAR 0 1
60661: PPUSH
60662: LD_VAR 0 6
60666: PPUSH
60667: CALL_OW 1
60671: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
60672: LD_ADDR_EXP 56
60676: PUSH
60677: LD_EXP 56
60681: PPUSH
60682: LD_VAR 0 1
60686: PPUSH
60687: LD_VAR 0 3
60691: PPUSH
60692: CALL_OW 1
60696: ST_TO_ADDR
// end ;
60697: LD_VAR 0 4
60701: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
60702: LD_INT 0
60704: PPUSH
// if not mc_bases [ base ] then
60705: LD_EXP 41
60709: PUSH
60710: LD_VAR 0 1
60714: ARRAY
60715: NOT
60716: IFFALSE 60720
// exit ;
60718: GO 60745
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
60720: LD_ADDR_EXP 46
60724: PUSH
60725: LD_EXP 46
60729: PPUSH
60730: LD_VAR 0 1
60734: PPUSH
60735: LD_VAR 0 2
60739: PPUSH
60740: CALL_OW 1
60744: ST_TO_ADDR
// end ;
60745: LD_VAR 0 3
60749: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
60750: LD_INT 0
60752: PPUSH
// if not mc_bases [ base ] then
60753: LD_EXP 41
60757: PUSH
60758: LD_VAR 0 1
60762: ARRAY
60763: NOT
60764: IFFALSE 60768
// exit ;
60766: GO 60793
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
60768: LD_ADDR_EXP 62
60772: PUSH
60773: LD_EXP 62
60777: PPUSH
60778: LD_VAR 0 1
60782: PPUSH
60783: LD_VAR 0 2
60787: PPUSH
60788: CALL_OW 1
60792: ST_TO_ADDR
// end ;
60793: LD_VAR 0 3
60797: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
60798: LD_INT 0
60800: PPUSH
// if not mc_bases [ base ] then
60801: LD_EXP 41
60805: PUSH
60806: LD_VAR 0 1
60810: ARRAY
60811: NOT
60812: IFFALSE 60816
// exit ;
60814: GO 60856
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
60816: LD_ADDR_EXP 62
60820: PUSH
60821: LD_EXP 62
60825: PPUSH
60826: LD_VAR 0 1
60830: PPUSH
60831: LD_EXP 62
60835: PUSH
60836: LD_VAR 0 1
60840: ARRAY
60841: PUSH
60842: LD_VAR 0 2
60846: PUSH
60847: EMPTY
60848: LIST
60849: ADD
60850: PPUSH
60851: CALL_OW 1
60855: ST_TO_ADDR
// end ;
60856: LD_VAR 0 3
60860: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
60861: LD_INT 0
60863: PPUSH
// if not mc_bases [ base ] then
60864: LD_EXP 41
60868: PUSH
60869: LD_VAR 0 1
60873: ARRAY
60874: NOT
60875: IFFALSE 60879
// exit ;
60877: GO 60991
// mc_defender := Replace ( mc_defender , base , deflist ) ;
60879: LD_ADDR_EXP 63
60883: PUSH
60884: LD_EXP 63
60888: PPUSH
60889: LD_VAR 0 1
60893: PPUSH
60894: LD_VAR 0 2
60898: PPUSH
60899: CALL_OW 1
60903: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
60904: LD_ADDR_EXP 52
60908: PUSH
60909: LD_EXP 52
60913: PPUSH
60914: LD_VAR 0 1
60918: PPUSH
60919: LD_VAR 0 2
60923: PUSH
60924: LD_INT 0
60926: PLUS
60927: PPUSH
60928: CALL_OW 1
60932: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
60933: LD_ADDR_EXP 60
60937: PUSH
60938: LD_EXP 60
60942: PPUSH
60943: LD_VAR 0 1
60947: PPUSH
60948: LD_EXP 60
60952: PUSH
60953: LD_VAR 0 1
60957: ARRAY
60958: PUSH
60959: LD_EXP 63
60963: PUSH
60964: LD_VAR 0 1
60968: ARRAY
60969: PPUSH
60970: LD_INT 21
60972: PUSH
60973: LD_INT 2
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PPUSH
60980: CALL_OW 72
60984: UNION
60985: PPUSH
60986: CALL_OW 1
60990: ST_TO_ADDR
// end ;
60991: LD_VAR 0 3
60995: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
60996: LD_INT 0
60998: PPUSH
60999: PPUSH
61000: PPUSH
61001: PPUSH
// if not mc_bases [ base ] then
61002: LD_EXP 41
61006: PUSH
61007: LD_VAR 0 1
61011: ARRAY
61012: NOT
61013: IFFALSE 61017
// exit ;
61015: GO 61082
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
61017: LD_ADDR_EXP 61
61021: PUSH
61022: LD_EXP 61
61026: PPUSH
61027: LD_VAR 0 1
61031: PUSH
61032: LD_EXP 61
61036: PUSH
61037: LD_VAR 0 1
61041: ARRAY
61042: PUSH
61043: LD_INT 1
61045: PLUS
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PPUSH
61051: LD_VAR 0 1
61055: PUSH
61056: LD_VAR 0 2
61060: PUSH
61061: LD_VAR 0 3
61065: PUSH
61066: LD_VAR 0 4
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: PPUSH
61077: CALL 16381 0 3
61081: ST_TO_ADDR
// end ;
61082: LD_VAR 0 5
61086: RET
// export function MC_GetMinesField ( base ) ; begin
61087: LD_INT 0
61089: PPUSH
// result := mc_mines [ base ] ;
61090: LD_ADDR_VAR 0 2
61094: PUSH
61095: LD_EXP 54
61099: PUSH
61100: LD_VAR 0 1
61104: ARRAY
61105: ST_TO_ADDR
// end ;
61106: LD_VAR 0 2
61110: RET
// export function MC_GetProduceList ( base ) ; begin
61111: LD_INT 0
61113: PPUSH
// result := mc_produce [ base ] ;
61114: LD_ADDR_VAR 0 2
61118: PUSH
61119: LD_EXP 62
61123: PUSH
61124: LD_VAR 0 1
61128: ARRAY
61129: ST_TO_ADDR
// end ;
61130: LD_VAR 0 2
61134: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
61135: LD_INT 0
61137: PPUSH
61138: PPUSH
// if not mc_bases then
61139: LD_EXP 41
61143: NOT
61144: IFFALSE 61148
// exit ;
61146: GO 61213
// if mc_bases [ base ] then
61148: LD_EXP 41
61152: PUSH
61153: LD_VAR 0 1
61157: ARRAY
61158: IFFALSE 61213
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
61160: LD_ADDR_VAR 0 3
61164: PUSH
61165: LD_EXP 41
61169: PUSH
61170: LD_VAR 0 1
61174: ARRAY
61175: PPUSH
61176: LD_INT 30
61178: PUSH
61179: LD_VAR 0 2
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PPUSH
61188: CALL_OW 72
61192: ST_TO_ADDR
// if result then
61193: LD_VAR 0 3
61197: IFFALSE 61213
// result := result [ 1 ] ;
61199: LD_ADDR_VAR 0 3
61203: PUSH
61204: LD_VAR 0 3
61208: PUSH
61209: LD_INT 1
61211: ARRAY
61212: ST_TO_ADDR
// end ; end ;
61213: LD_VAR 0 3
61217: RET
// export function MC_SetTame ( base , area ) ; begin
61218: LD_INT 0
61220: PPUSH
// if not mc_bases or not base then
61221: LD_EXP 41
61225: NOT
61226: PUSH
61227: LD_VAR 0 1
61231: NOT
61232: OR
61233: IFFALSE 61237
// exit ;
61235: GO 61262
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
61237: LD_ADDR_EXP 69
61241: PUSH
61242: LD_EXP 69
61246: PPUSH
61247: LD_VAR 0 1
61251: PPUSH
61252: LD_VAR 0 2
61256: PPUSH
61257: CALL_OW 1
61261: ST_TO_ADDR
// end ;
61262: LD_VAR 0 3
61266: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
61267: LD_INT 0
61269: PPUSH
61270: PPUSH
// if not mc_bases or not base or not kinds then
61271: LD_EXP 41
61275: NOT
61276: PUSH
61277: LD_VAR 0 1
61281: NOT
61282: OR
61283: PUSH
61284: LD_VAR 0 2
61288: NOT
61289: OR
61290: IFFALSE 61294
// exit ;
61292: GO 61355
// for i in kinds do
61294: LD_ADDR_VAR 0 4
61298: PUSH
61299: LD_VAR 0 2
61303: PUSH
61304: FOR_IN
61305: IFFALSE 61353
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
61307: LD_ADDR_EXP 75
61311: PUSH
61312: LD_EXP 75
61316: PPUSH
61317: LD_VAR 0 1
61321: PUSH
61322: LD_EXP 75
61326: PUSH
61327: LD_VAR 0 1
61331: ARRAY
61332: PUSH
61333: LD_INT 1
61335: PLUS
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PPUSH
61341: LD_VAR 0 4
61345: PPUSH
61346: CALL 16381 0 3
61350: ST_TO_ADDR
61351: GO 61304
61353: POP
61354: POP
// end ;
61355: LD_VAR 0 3
61359: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
61360: LD_INT 0
61362: PPUSH
// if not mc_bases or not base or not areas then
61363: LD_EXP 41
61367: NOT
61368: PUSH
61369: LD_VAR 0 1
61373: NOT
61374: OR
61375: PUSH
61376: LD_VAR 0 2
61380: NOT
61381: OR
61382: IFFALSE 61386
// exit ;
61384: GO 61411
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
61386: LD_ADDR_EXP 59
61390: PUSH
61391: LD_EXP 59
61395: PPUSH
61396: LD_VAR 0 1
61400: PPUSH
61401: LD_VAR 0 2
61405: PPUSH
61406: CALL_OW 1
61410: ST_TO_ADDR
// end ;
61411: LD_VAR 0 3
61415: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
61416: LD_INT 0
61418: PPUSH
// if not mc_bases or not base then
61419: LD_EXP 41
61423: NOT
61424: PUSH
61425: LD_VAR 0 1
61429: NOT
61430: OR
61431: IFFALSE 61435
// exit ;
61433: GO 61469
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
61435: LD_ADDR_EXP 76
61439: PUSH
61440: LD_EXP 76
61444: PPUSH
61445: LD_VAR 0 1
61449: PPUSH
61450: LD_VAR 0 2
61454: PUSH
61455: LD_VAR 0 3
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PPUSH
61464: CALL_OW 1
61468: ST_TO_ADDR
// end ; end_of_file
61469: LD_VAR 0 4
61473: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
61474: LD_INT 0
61476: PPUSH
61477: PPUSH
61478: PPUSH
// if not mc_bases then
61479: LD_EXP 41
61483: NOT
61484: IFFALSE 61488
// exit ;
61486: GO 61653
// for i = 1 to mc_bases do
61488: LD_ADDR_VAR 0 4
61492: PUSH
61493: DOUBLE
61494: LD_INT 1
61496: DEC
61497: ST_TO_ADDR
61498: LD_EXP 41
61502: PUSH
61503: FOR_TO
61504: IFFALSE 61651
// begin if sci in mc_bases [ i ] then
61506: LD_VAR 0 2
61510: PUSH
61511: LD_EXP 41
61515: PUSH
61516: LD_VAR 0 4
61520: ARRAY
61521: IN
61522: IFFALSE 61649
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
61524: LD_ADDR_EXP 70
61528: PUSH
61529: LD_EXP 70
61533: PPUSH
61534: LD_VAR 0 4
61538: PUSH
61539: LD_EXP 70
61543: PUSH
61544: LD_VAR 0 4
61548: ARRAY
61549: PUSH
61550: LD_INT 1
61552: PLUS
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PPUSH
61558: LD_VAR 0 1
61562: PPUSH
61563: CALL 16381 0 3
61567: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
61568: LD_ADDR_VAR 0 5
61572: PUSH
61573: LD_EXP 41
61577: PUSH
61578: LD_VAR 0 4
61582: ARRAY
61583: PPUSH
61584: LD_INT 2
61586: PUSH
61587: LD_INT 30
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 30
61599: PUSH
61600: LD_INT 1
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: LIST
61611: PPUSH
61612: CALL_OW 72
61616: PPUSH
61617: LD_VAR 0 1
61621: PPUSH
61622: CALL_OW 74
61626: ST_TO_ADDR
// if tmp then
61627: LD_VAR 0 5
61631: IFFALSE 61647
// ComStandNearbyBuilding ( ape , tmp ) ;
61633: LD_VAR 0 1
61637: PPUSH
61638: LD_VAR 0 5
61642: PPUSH
61643: CALL 11160 0 2
// break ;
61647: GO 61651
// end ; end ;
61649: GO 61503
61651: POP
61652: POP
// end ;
61653: LD_VAR 0 3
61657: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
61658: LD_INT 0
61660: PPUSH
61661: PPUSH
61662: PPUSH
// if not mc_bases then
61663: LD_EXP 41
61667: NOT
61668: IFFALSE 61672
// exit ;
61670: GO 61761
// for i = 1 to mc_bases do
61672: LD_ADDR_VAR 0 4
61676: PUSH
61677: DOUBLE
61678: LD_INT 1
61680: DEC
61681: ST_TO_ADDR
61682: LD_EXP 41
61686: PUSH
61687: FOR_TO
61688: IFFALSE 61759
// begin if building in mc_busy_turret_list [ i ] then
61690: LD_VAR 0 1
61694: PUSH
61695: LD_EXP 51
61699: PUSH
61700: LD_VAR 0 4
61704: ARRAY
61705: IN
61706: IFFALSE 61757
// begin tmp := mc_busy_turret_list [ i ] diff building ;
61708: LD_ADDR_VAR 0 5
61712: PUSH
61713: LD_EXP 51
61717: PUSH
61718: LD_VAR 0 4
61722: ARRAY
61723: PUSH
61724: LD_VAR 0 1
61728: DIFF
61729: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
61730: LD_ADDR_EXP 51
61734: PUSH
61735: LD_EXP 51
61739: PPUSH
61740: LD_VAR 0 4
61744: PPUSH
61745: LD_VAR 0 5
61749: PPUSH
61750: CALL_OW 1
61754: ST_TO_ADDR
// break ;
61755: GO 61759
// end ; end ;
61757: GO 61687
61759: POP
61760: POP
// end ;
61761: LD_VAR 0 3
61765: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
61766: LD_INT 0
61768: PPUSH
61769: PPUSH
61770: PPUSH
// if not mc_bases then
61771: LD_EXP 41
61775: NOT
61776: IFFALSE 61780
// exit ;
61778: GO 61979
// for i = 1 to mc_bases do
61780: LD_ADDR_VAR 0 5
61784: PUSH
61785: DOUBLE
61786: LD_INT 1
61788: DEC
61789: ST_TO_ADDR
61790: LD_EXP 41
61794: PUSH
61795: FOR_TO
61796: IFFALSE 61977
// if building in mc_bases [ i ] then
61798: LD_VAR 0 1
61802: PUSH
61803: LD_EXP 41
61807: PUSH
61808: LD_VAR 0 5
61812: ARRAY
61813: IN
61814: IFFALSE 61975
// begin tmp := mc_bases [ i ] diff building ;
61816: LD_ADDR_VAR 0 6
61820: PUSH
61821: LD_EXP 41
61825: PUSH
61826: LD_VAR 0 5
61830: ARRAY
61831: PUSH
61832: LD_VAR 0 1
61836: DIFF
61837: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
61838: LD_ADDR_EXP 41
61842: PUSH
61843: LD_EXP 41
61847: PPUSH
61848: LD_VAR 0 5
61852: PPUSH
61853: LD_VAR 0 6
61857: PPUSH
61858: CALL_OW 1
61862: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
61863: LD_VAR 0 1
61867: PUSH
61868: LD_EXP 49
61872: PUSH
61873: LD_VAR 0 5
61877: ARRAY
61878: IN
61879: IFFALSE 61918
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
61881: LD_ADDR_EXP 49
61885: PUSH
61886: LD_EXP 49
61890: PPUSH
61891: LD_VAR 0 5
61895: PPUSH
61896: LD_EXP 49
61900: PUSH
61901: LD_VAR 0 5
61905: ARRAY
61906: PUSH
61907: LD_VAR 0 1
61911: DIFF
61912: PPUSH
61913: CALL_OW 1
61917: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
61918: LD_VAR 0 1
61922: PUSH
61923: LD_EXP 50
61927: PUSH
61928: LD_VAR 0 5
61932: ARRAY
61933: IN
61934: IFFALSE 61973
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
61936: LD_ADDR_EXP 50
61940: PUSH
61941: LD_EXP 50
61945: PPUSH
61946: LD_VAR 0 5
61950: PPUSH
61951: LD_EXP 50
61955: PUSH
61956: LD_VAR 0 5
61960: ARRAY
61961: PUSH
61962: LD_VAR 0 1
61966: DIFF
61967: PPUSH
61968: CALL_OW 1
61972: ST_TO_ADDR
// break ;
61973: GO 61977
// end ;
61975: GO 61795
61977: POP
61978: POP
// end ;
61979: LD_VAR 0 4
61983: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
61984: LD_INT 0
61986: PPUSH
61987: PPUSH
61988: PPUSH
// if not mc_bases or not side in mc_sides then
61989: LD_EXP 41
61993: NOT
61994: PUSH
61995: LD_VAR 0 3
61999: PUSH
62000: LD_EXP 67
62004: IN
62005: NOT
62006: OR
62007: IFFALSE 62011
// exit ;
62009: GO 62134
// for i = 1 to mc_vehicles do
62011: LD_ADDR_VAR 0 6
62015: PUSH
62016: DOUBLE
62017: LD_INT 1
62019: DEC
62020: ST_TO_ADDR
62021: LD_EXP 60
62025: PUSH
62026: FOR_TO
62027: IFFALSE 62132
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
62029: LD_VAR 0 2
62033: PUSH
62034: LD_EXP 60
62038: PUSH
62039: LD_VAR 0 6
62043: ARRAY
62044: IN
62045: PUSH
62046: LD_VAR 0 1
62050: PUSH
62051: LD_EXP 60
62055: PUSH
62056: LD_VAR 0 6
62060: ARRAY
62061: IN
62062: OR
62063: IFFALSE 62130
// begin tmp := mc_vehicles [ i ] diff old ;
62065: LD_ADDR_VAR 0 7
62069: PUSH
62070: LD_EXP 60
62074: PUSH
62075: LD_VAR 0 6
62079: ARRAY
62080: PUSH
62081: LD_VAR 0 2
62085: DIFF
62086: ST_TO_ADDR
// tmp := tmp diff new ;
62087: LD_ADDR_VAR 0 7
62091: PUSH
62092: LD_VAR 0 7
62096: PUSH
62097: LD_VAR 0 1
62101: DIFF
62102: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
62103: LD_ADDR_EXP 60
62107: PUSH
62108: LD_EXP 60
62112: PPUSH
62113: LD_VAR 0 6
62117: PPUSH
62118: LD_VAR 0 7
62122: PPUSH
62123: CALL_OW 1
62127: ST_TO_ADDR
// break ;
62128: GO 62132
// end ;
62130: GO 62026
62132: POP
62133: POP
// end ;
62134: LD_VAR 0 5
62138: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
62139: LD_INT 0
62141: PPUSH
62142: PPUSH
62143: PPUSH
62144: PPUSH
// if not mc_bases then
62145: LD_EXP 41
62149: NOT
62150: IFFALSE 62154
// exit ;
62152: GO 62446
// side := GetSide ( vehicle ) ;
62154: LD_ADDR_VAR 0 5
62158: PUSH
62159: LD_VAR 0 1
62163: PPUSH
62164: CALL_OW 255
62168: ST_TO_ADDR
// for i = 1 to mc_bases do
62169: LD_ADDR_VAR 0 4
62173: PUSH
62174: DOUBLE
62175: LD_INT 1
62177: DEC
62178: ST_TO_ADDR
62179: LD_EXP 41
62183: PUSH
62184: FOR_TO
62185: IFFALSE 62444
// begin if factory in mc_bases [ i ] then
62187: LD_VAR 0 2
62191: PUSH
62192: LD_EXP 41
62196: PUSH
62197: LD_VAR 0 4
62201: ARRAY
62202: IN
62203: IFFALSE 62442
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
62205: LD_EXP 63
62209: PUSH
62210: LD_VAR 0 4
62214: ARRAY
62215: PUSH
62216: LD_EXP 52
62220: PUSH
62221: LD_VAR 0 4
62225: ARRAY
62226: LESS
62227: IFFALSE 62398
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
62229: LD_ADDR_EXP 63
62233: PUSH
62234: LD_EXP 63
62238: PPUSH
62239: LD_VAR 0 4
62243: PPUSH
62244: LD_EXP 63
62248: PUSH
62249: LD_VAR 0 4
62253: ARRAY
62254: PUSH
62255: LD_VAR 0 1
62259: ADD
62260: PPUSH
62261: CALL_OW 1
62265: ST_TO_ADDR
// if not mc_scan [ i ] then
62266: LD_EXP 64
62270: PUSH
62271: LD_VAR 0 4
62275: ARRAY
62276: NOT
62277: IFFALSE 62396
// begin if GetControl ( vehicle ) = control_remote then
62279: LD_VAR 0 1
62283: PPUSH
62284: CALL_OW 263
62288: PUSH
62289: LD_INT 2
62291: EQUAL
62292: IFFALSE 62312
// repeat wait ( 0 0$1 ) ;
62294: LD_INT 35
62296: PPUSH
62297: CALL_OW 67
// until IsControledBy ( vehicle ) ;
62301: LD_VAR 0 1
62305: PPUSH
62306: CALL_OW 312
62310: IFFALSE 62294
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
62312: LD_VAR 0 1
62316: PPUSH
62317: LD_EXP 65
62321: PUSH
62322: LD_VAR 0 4
62326: ARRAY
62327: PPUSH
62328: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
62332: LD_VAR 0 1
62336: PPUSH
62337: CALL_OW 263
62341: PUSH
62342: LD_INT 1
62344: NONEQUAL
62345: IFFALSE 62349
// break ;
62347: GO 62444
// repeat wait ( 0 0$1 ) ;
62349: LD_INT 35
62351: PPUSH
62352: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
62356: LD_VAR 0 1
62360: PPUSH
62361: LD_EXP 65
62365: PUSH
62366: LD_VAR 0 4
62370: ARRAY
62371: PPUSH
62372: CALL_OW 308
62376: IFFALSE 62349
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
62378: LD_VAR 0 1
62382: PPUSH
62383: CALL_OW 311
62387: PPUSH
62388: CALL_OW 121
// exit ;
62392: POP
62393: POP
62394: GO 62446
// end ; end else
62396: GO 62442
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
62398: LD_ADDR_EXP 60
62402: PUSH
62403: LD_EXP 60
62407: PPUSH
62408: LD_VAR 0 4
62412: PUSH
62413: LD_EXP 60
62417: PUSH
62418: LD_VAR 0 4
62422: ARRAY
62423: PUSH
62424: LD_INT 1
62426: PLUS
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PPUSH
62432: LD_VAR 0 1
62436: PPUSH
62437: CALL 16381 0 3
62441: ST_TO_ADDR
// end ; end ;
62442: GO 62184
62444: POP
62445: POP
// end ;
62446: LD_VAR 0 3
62450: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
62451: LD_INT 0
62453: PPUSH
62454: PPUSH
62455: PPUSH
62456: PPUSH
// if not mc_bases then
62457: LD_EXP 41
62461: NOT
62462: IFFALSE 62466
// exit ;
62464: GO 62819
// repeat wait ( 0 0$1 ) ;
62466: LD_INT 35
62468: PPUSH
62469: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
62473: LD_VAR 0 2
62477: PPUSH
62478: LD_VAR 0 3
62482: PPUSH
62483: CALL_OW 284
62487: IFFALSE 62466
// if GetResourceTypeXY ( x , y ) = mat_artefact then
62489: LD_VAR 0 2
62493: PPUSH
62494: LD_VAR 0 3
62498: PPUSH
62499: CALL_OW 283
62503: PUSH
62504: LD_INT 4
62506: EQUAL
62507: IFFALSE 62511
// exit ;
62509: GO 62819
// for i = 1 to mc_bases do
62511: LD_ADDR_VAR 0 7
62515: PUSH
62516: DOUBLE
62517: LD_INT 1
62519: DEC
62520: ST_TO_ADDR
62521: LD_EXP 41
62525: PUSH
62526: FOR_TO
62527: IFFALSE 62817
// begin if mc_crates_area [ i ] then
62529: LD_EXP 59
62533: PUSH
62534: LD_VAR 0 7
62538: ARRAY
62539: IFFALSE 62650
// for j in mc_crates_area [ i ] do
62541: LD_ADDR_VAR 0 8
62545: PUSH
62546: LD_EXP 59
62550: PUSH
62551: LD_VAR 0 7
62555: ARRAY
62556: PUSH
62557: FOR_IN
62558: IFFALSE 62648
// if InArea ( x , y , j ) then
62560: LD_VAR 0 2
62564: PPUSH
62565: LD_VAR 0 3
62569: PPUSH
62570: LD_VAR 0 8
62574: PPUSH
62575: CALL_OW 309
62579: IFFALSE 62646
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
62581: LD_ADDR_EXP 57
62585: PUSH
62586: LD_EXP 57
62590: PPUSH
62591: LD_VAR 0 7
62595: PUSH
62596: LD_EXP 57
62600: PUSH
62601: LD_VAR 0 7
62605: ARRAY
62606: PUSH
62607: LD_INT 1
62609: PLUS
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PPUSH
62615: LD_VAR 0 4
62619: PUSH
62620: LD_VAR 0 2
62624: PUSH
62625: LD_VAR 0 3
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: LIST
62634: PPUSH
62635: CALL 16381 0 3
62639: ST_TO_ADDR
// exit ;
62640: POP
62641: POP
62642: POP
62643: POP
62644: GO 62819
// end ;
62646: GO 62557
62648: POP
62649: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
62650: LD_ADDR_VAR 0 9
62654: PUSH
62655: LD_EXP 41
62659: PUSH
62660: LD_VAR 0 7
62664: ARRAY
62665: PPUSH
62666: LD_INT 2
62668: PUSH
62669: LD_INT 30
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 30
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: LIST
62693: PPUSH
62694: CALL_OW 72
62698: ST_TO_ADDR
// if not depot then
62699: LD_VAR 0 9
62703: NOT
62704: IFFALSE 62708
// continue ;
62706: GO 62526
// for j in depot do
62708: LD_ADDR_VAR 0 8
62712: PUSH
62713: LD_VAR 0 9
62717: PUSH
62718: FOR_IN
62719: IFFALSE 62813
// if GetDistUnitXY ( j , x , y ) < 30 then
62721: LD_VAR 0 8
62725: PPUSH
62726: LD_VAR 0 2
62730: PPUSH
62731: LD_VAR 0 3
62735: PPUSH
62736: CALL_OW 297
62740: PUSH
62741: LD_INT 30
62743: LESS
62744: IFFALSE 62811
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
62746: LD_ADDR_EXP 57
62750: PUSH
62751: LD_EXP 57
62755: PPUSH
62756: LD_VAR 0 7
62760: PUSH
62761: LD_EXP 57
62765: PUSH
62766: LD_VAR 0 7
62770: ARRAY
62771: PUSH
62772: LD_INT 1
62774: PLUS
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PPUSH
62780: LD_VAR 0 4
62784: PUSH
62785: LD_VAR 0 2
62789: PUSH
62790: LD_VAR 0 3
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: LIST
62799: PPUSH
62800: CALL 16381 0 3
62804: ST_TO_ADDR
// exit ;
62805: POP
62806: POP
62807: POP
62808: POP
62809: GO 62819
// end ;
62811: GO 62718
62813: POP
62814: POP
// end ;
62815: GO 62526
62817: POP
62818: POP
// end ;
62819: LD_VAR 0 6
62823: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
62824: LD_INT 0
62826: PPUSH
62827: PPUSH
62828: PPUSH
62829: PPUSH
// side := GetSide ( lab ) ;
62830: LD_ADDR_VAR 0 4
62834: PUSH
62835: LD_VAR 0 2
62839: PPUSH
62840: CALL_OW 255
62844: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
62845: LD_VAR 0 4
62849: PUSH
62850: LD_EXP 67
62854: IN
62855: NOT
62856: PUSH
62857: LD_EXP 68
62861: NOT
62862: OR
62863: PUSH
62864: LD_EXP 41
62868: NOT
62869: OR
62870: IFFALSE 62874
// exit ;
62872: GO 63107
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
62874: LD_ADDR_EXP 68
62878: PUSH
62879: LD_EXP 68
62883: PPUSH
62884: LD_VAR 0 4
62888: PPUSH
62889: LD_EXP 68
62893: PUSH
62894: LD_VAR 0 4
62898: ARRAY
62899: PUSH
62900: LD_VAR 0 1
62904: DIFF
62905: PPUSH
62906: CALL_OW 1
62910: ST_TO_ADDR
// for i = 1 to mc_bases do
62911: LD_ADDR_VAR 0 5
62915: PUSH
62916: DOUBLE
62917: LD_INT 1
62919: DEC
62920: ST_TO_ADDR
62921: LD_EXP 41
62925: PUSH
62926: FOR_TO
62927: IFFALSE 63105
// begin if lab in mc_bases [ i ] then
62929: LD_VAR 0 2
62933: PUSH
62934: LD_EXP 41
62938: PUSH
62939: LD_VAR 0 5
62943: ARRAY
62944: IN
62945: IFFALSE 63103
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
62947: LD_VAR 0 1
62951: PUSH
62952: LD_INT 11
62954: PUSH
62955: LD_INT 4
62957: PUSH
62958: LD_INT 3
62960: PUSH
62961: LD_INT 2
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: IN
62970: PUSH
62971: LD_EXP 71
62975: PUSH
62976: LD_VAR 0 5
62980: ARRAY
62981: AND
62982: IFFALSE 63103
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
62984: LD_ADDR_VAR 0 6
62988: PUSH
62989: LD_EXP 71
62993: PUSH
62994: LD_VAR 0 5
62998: ARRAY
62999: PUSH
63000: LD_INT 1
63002: ARRAY
63003: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
63004: LD_ADDR_EXP 71
63008: PUSH
63009: LD_EXP 71
63013: PPUSH
63014: LD_VAR 0 5
63018: PPUSH
63019: EMPTY
63020: PPUSH
63021: CALL_OW 1
63025: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
63026: LD_VAR 0 6
63030: PPUSH
63031: LD_INT 0
63033: PPUSH
63034: CALL_OW 109
// ComExitBuilding ( tmp ) ;
63038: LD_VAR 0 6
63042: PPUSH
63043: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
63047: LD_ADDR_EXP 70
63051: PUSH
63052: LD_EXP 70
63056: PPUSH
63057: LD_VAR 0 5
63061: PPUSH
63062: LD_EXP 70
63066: PUSH
63067: LD_VAR 0 5
63071: ARRAY
63072: PPUSH
63073: LD_INT 1
63075: PPUSH
63076: LD_VAR 0 6
63080: PPUSH
63081: CALL_OW 2
63085: PPUSH
63086: CALL_OW 1
63090: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
63091: LD_VAR 0 5
63095: PPUSH
63096: LD_INT 112
63098: PPUSH
63099: CALL 48877 0 2
// end ; end ; end ;
63103: GO 62926
63105: POP
63106: POP
// end ;
63107: LD_VAR 0 3
63111: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
63112: LD_INT 0
63114: PPUSH
63115: PPUSH
63116: PPUSH
63117: PPUSH
63118: PPUSH
63119: PPUSH
63120: PPUSH
63121: PPUSH
// if not mc_bases then
63122: LD_EXP 41
63126: NOT
63127: IFFALSE 63131
// exit ;
63129: GO 64056
// for i = 1 to mc_bases do
63131: LD_ADDR_VAR 0 3
63135: PUSH
63136: DOUBLE
63137: LD_INT 1
63139: DEC
63140: ST_TO_ADDR
63141: LD_EXP 41
63145: PUSH
63146: FOR_TO
63147: IFFALSE 64054
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
63149: LD_VAR 0 1
63153: PUSH
63154: LD_EXP 41
63158: PUSH
63159: LD_VAR 0 3
63163: ARRAY
63164: IN
63165: PUSH
63166: LD_VAR 0 1
63170: PUSH
63171: LD_EXP 48
63175: PUSH
63176: LD_VAR 0 3
63180: ARRAY
63181: IN
63182: OR
63183: PUSH
63184: LD_VAR 0 1
63188: PUSH
63189: LD_EXP 60
63193: PUSH
63194: LD_VAR 0 3
63198: ARRAY
63199: IN
63200: OR
63201: PUSH
63202: LD_VAR 0 1
63206: PUSH
63207: LD_EXP 70
63211: PUSH
63212: LD_VAR 0 3
63216: ARRAY
63217: IN
63218: OR
63219: PUSH
63220: LD_VAR 0 1
63224: PUSH
63225: LD_EXP 71
63229: PUSH
63230: LD_VAR 0 3
63234: ARRAY
63235: IN
63236: OR
63237: IFFALSE 64052
// begin if un in mc_ape [ i ] then
63239: LD_VAR 0 1
63243: PUSH
63244: LD_EXP 70
63248: PUSH
63249: LD_VAR 0 3
63253: ARRAY
63254: IN
63255: IFFALSE 63294
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
63257: LD_ADDR_EXP 70
63261: PUSH
63262: LD_EXP 70
63266: PPUSH
63267: LD_VAR 0 3
63271: PPUSH
63272: LD_EXP 70
63276: PUSH
63277: LD_VAR 0 3
63281: ARRAY
63282: PUSH
63283: LD_VAR 0 1
63287: DIFF
63288: PPUSH
63289: CALL_OW 1
63293: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
63294: LD_VAR 0 1
63298: PUSH
63299: LD_EXP 71
63303: PUSH
63304: LD_VAR 0 3
63308: ARRAY
63309: IN
63310: IFFALSE 63334
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
63312: LD_ADDR_EXP 71
63316: PUSH
63317: LD_EXP 71
63321: PPUSH
63322: LD_VAR 0 3
63326: PPUSH
63327: EMPTY
63328: PPUSH
63329: CALL_OW 1
63333: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
63334: LD_VAR 0 1
63338: PPUSH
63339: CALL_OW 247
63343: PUSH
63344: LD_INT 2
63346: EQUAL
63347: PUSH
63348: LD_VAR 0 1
63352: PPUSH
63353: CALL_OW 110
63357: PUSH
63358: LD_INT 20
63360: EQUAL
63361: AND
63362: IFFALSE 63465
// begin fac := MC_GetBuilding ( i , b_factory ) ;
63364: LD_ADDR_VAR 0 8
63368: PUSH
63369: LD_VAR 0 3
63373: PPUSH
63374: LD_INT 3
63376: PPUSH
63377: CALL 61135 0 2
63381: ST_TO_ADDR
// if fac then
63382: LD_VAR 0 8
63386: IFFALSE 63465
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
63388: LD_ADDR_VAR 0 9
63392: PUSH
63393: LD_VAR 0 8
63397: PPUSH
63398: LD_VAR 0 1
63402: PPUSH
63403: CALL_OW 265
63407: PPUSH
63408: LD_VAR 0 1
63412: PPUSH
63413: CALL_OW 262
63417: PPUSH
63418: LD_VAR 0 1
63422: PPUSH
63423: CALL_OW 263
63427: PPUSH
63428: LD_VAR 0 1
63432: PPUSH
63433: CALL_OW 264
63437: PPUSH
63438: CALL 13546 0 5
63442: ST_TO_ADDR
// if components then
63443: LD_VAR 0 9
63447: IFFALSE 63463
// MC_InsertProduceList ( i , components ) ;
63449: LD_VAR 0 3
63453: PPUSH
63454: LD_VAR 0 9
63458: PPUSH
63459: CALL 60798 0 2
// break ;
63463: GO 64054
// end ; end ; if GetType ( un ) = unit_building then
63465: LD_VAR 0 1
63469: PPUSH
63470: CALL_OW 247
63474: PUSH
63475: LD_INT 3
63477: EQUAL
63478: IFFALSE 63775
// begin btype := GetBType ( un ) ;
63480: LD_ADDR_VAR 0 5
63484: PUSH
63485: LD_VAR 0 1
63489: PPUSH
63490: CALL_OW 266
63494: ST_TO_ADDR
// if btype = b_warehouse then
63495: LD_VAR 0 5
63499: PUSH
63500: LD_INT 1
63502: EQUAL
63503: IFFALSE 63521
// begin btype := b_depot ;
63505: LD_ADDR_VAR 0 5
63509: PUSH
63510: LD_INT 0
63512: ST_TO_ADDR
// pos := 1 ;
63513: LD_ADDR_VAR 0 6
63517: PUSH
63518: LD_INT 1
63520: ST_TO_ADDR
// end ; if btype = b_factory then
63521: LD_VAR 0 5
63525: PUSH
63526: LD_INT 3
63528: EQUAL
63529: IFFALSE 63547
// begin btype := b_workshop ;
63531: LD_ADDR_VAR 0 5
63535: PUSH
63536: LD_INT 2
63538: ST_TO_ADDR
// pos := 1 ;
63539: LD_ADDR_VAR 0 6
63543: PUSH
63544: LD_INT 1
63546: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
63547: LD_VAR 0 5
63551: PUSH
63552: LD_INT 7
63554: PUSH
63555: LD_INT 8
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: IN
63562: IFFALSE 63572
// btype := b_lab ;
63564: LD_ADDR_VAR 0 5
63568: PUSH
63569: LD_INT 6
63571: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
63572: LD_ADDR_EXP 46
63576: PUSH
63577: LD_EXP 46
63581: PPUSH
63582: LD_VAR 0 3
63586: PUSH
63587: LD_EXP 46
63591: PUSH
63592: LD_VAR 0 3
63596: ARRAY
63597: PUSH
63598: LD_INT 1
63600: PLUS
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PPUSH
63606: LD_VAR 0 5
63610: PUSH
63611: LD_VAR 0 1
63615: PPUSH
63616: CALL_OW 250
63620: PUSH
63621: LD_VAR 0 1
63625: PPUSH
63626: CALL_OW 251
63630: PUSH
63631: LD_VAR 0 1
63635: PPUSH
63636: CALL_OW 254
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: PPUSH
63647: CALL 16381 0 3
63651: ST_TO_ADDR
// if pos = 1 then
63652: LD_VAR 0 6
63656: PUSH
63657: LD_INT 1
63659: EQUAL
63660: IFFALSE 63775
// begin tmp := mc_build_list [ i ] ;
63662: LD_ADDR_VAR 0 7
63666: PUSH
63667: LD_EXP 46
63671: PUSH
63672: LD_VAR 0 3
63676: ARRAY
63677: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
63678: LD_VAR 0 7
63682: PPUSH
63683: LD_INT 2
63685: PUSH
63686: LD_INT 30
63688: PUSH
63689: LD_INT 0
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 30
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: LIST
63710: PPUSH
63711: CALL_OW 72
63715: IFFALSE 63725
// pos := 2 ;
63717: LD_ADDR_VAR 0 6
63721: PUSH
63722: LD_INT 2
63724: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
63725: LD_ADDR_VAR 0 7
63729: PUSH
63730: LD_VAR 0 7
63734: PPUSH
63735: LD_VAR 0 6
63739: PPUSH
63740: LD_VAR 0 7
63744: PPUSH
63745: CALL 16272 0 3
63749: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
63750: LD_ADDR_EXP 46
63754: PUSH
63755: LD_EXP 46
63759: PPUSH
63760: LD_VAR 0 3
63764: PPUSH
63765: LD_VAR 0 7
63769: PPUSH
63770: CALL_OW 1
63774: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
63775: LD_VAR 0 1
63779: PUSH
63780: LD_EXP 41
63784: PUSH
63785: LD_VAR 0 3
63789: ARRAY
63790: IN
63791: IFFALSE 63830
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
63793: LD_ADDR_EXP 41
63797: PUSH
63798: LD_EXP 41
63802: PPUSH
63803: LD_VAR 0 3
63807: PPUSH
63808: LD_EXP 41
63812: PUSH
63813: LD_VAR 0 3
63817: ARRAY
63818: PUSH
63819: LD_VAR 0 1
63823: DIFF
63824: PPUSH
63825: CALL_OW 1
63829: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
63830: LD_VAR 0 1
63834: PUSH
63835: LD_EXP 48
63839: PUSH
63840: LD_VAR 0 3
63844: ARRAY
63845: IN
63846: IFFALSE 63885
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
63848: LD_ADDR_EXP 48
63852: PUSH
63853: LD_EXP 48
63857: PPUSH
63858: LD_VAR 0 3
63862: PPUSH
63863: LD_EXP 48
63867: PUSH
63868: LD_VAR 0 3
63872: ARRAY
63873: PUSH
63874: LD_VAR 0 1
63878: DIFF
63879: PPUSH
63880: CALL_OW 1
63884: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
63885: LD_VAR 0 1
63889: PUSH
63890: LD_EXP 60
63894: PUSH
63895: LD_VAR 0 3
63899: ARRAY
63900: IN
63901: IFFALSE 63940
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
63903: LD_ADDR_EXP 60
63907: PUSH
63908: LD_EXP 60
63912: PPUSH
63913: LD_VAR 0 3
63917: PPUSH
63918: LD_EXP 60
63922: PUSH
63923: LD_VAR 0 3
63927: ARRAY
63928: PUSH
63929: LD_VAR 0 1
63933: DIFF
63934: PPUSH
63935: CALL_OW 1
63939: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
63940: LD_VAR 0 1
63944: PUSH
63945: LD_EXP 50
63949: PUSH
63950: LD_VAR 0 3
63954: ARRAY
63955: IN
63956: IFFALSE 63995
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
63958: LD_ADDR_EXP 50
63962: PUSH
63963: LD_EXP 50
63967: PPUSH
63968: LD_VAR 0 3
63972: PPUSH
63973: LD_EXP 50
63977: PUSH
63978: LD_VAR 0 3
63982: ARRAY
63983: PUSH
63984: LD_VAR 0 1
63988: DIFF
63989: PPUSH
63990: CALL_OW 1
63994: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
63995: LD_VAR 0 1
63999: PUSH
64000: LD_EXP 49
64004: PUSH
64005: LD_VAR 0 3
64009: ARRAY
64010: IN
64011: IFFALSE 64050
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
64013: LD_ADDR_EXP 49
64017: PUSH
64018: LD_EXP 49
64022: PPUSH
64023: LD_VAR 0 3
64027: PPUSH
64028: LD_EXP 49
64032: PUSH
64033: LD_VAR 0 3
64037: ARRAY
64038: PUSH
64039: LD_VAR 0 1
64043: DIFF
64044: PPUSH
64045: CALL_OW 1
64049: ST_TO_ADDR
// end ; break ;
64050: GO 64054
// end ;
64052: GO 63146
64054: POP
64055: POP
// end ;
64056: LD_VAR 0 2
64060: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
64061: LD_INT 0
64063: PPUSH
64064: PPUSH
64065: PPUSH
// if not mc_bases then
64066: LD_EXP 41
64070: NOT
64071: IFFALSE 64075
// exit ;
64073: GO 64290
// for i = 1 to mc_bases do
64075: LD_ADDR_VAR 0 3
64079: PUSH
64080: DOUBLE
64081: LD_INT 1
64083: DEC
64084: ST_TO_ADDR
64085: LD_EXP 41
64089: PUSH
64090: FOR_TO
64091: IFFALSE 64288
// begin if building in mc_construct_list [ i ] then
64093: LD_VAR 0 1
64097: PUSH
64098: LD_EXP 48
64102: PUSH
64103: LD_VAR 0 3
64107: ARRAY
64108: IN
64109: IFFALSE 64286
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
64111: LD_ADDR_EXP 48
64115: PUSH
64116: LD_EXP 48
64120: PPUSH
64121: LD_VAR 0 3
64125: PPUSH
64126: LD_EXP 48
64130: PUSH
64131: LD_VAR 0 3
64135: ARRAY
64136: PUSH
64137: LD_VAR 0 1
64141: DIFF
64142: PPUSH
64143: CALL_OW 1
64147: ST_TO_ADDR
// if building in mc_lab [ i ] then
64148: LD_VAR 0 1
64152: PUSH
64153: LD_EXP 74
64157: PUSH
64158: LD_VAR 0 3
64162: ARRAY
64163: IN
64164: IFFALSE 64219
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
64166: LD_ADDR_EXP 75
64170: PUSH
64171: LD_EXP 75
64175: PPUSH
64176: LD_VAR 0 3
64180: PPUSH
64181: LD_EXP 75
64185: PUSH
64186: LD_VAR 0 3
64190: ARRAY
64191: PPUSH
64192: LD_INT 1
64194: PPUSH
64195: LD_EXP 75
64199: PUSH
64200: LD_VAR 0 3
64204: ARRAY
64205: PPUSH
64206: LD_INT 0
64208: PPUSH
64209: CALL 15364 0 4
64213: PPUSH
64214: CALL_OW 1
64218: ST_TO_ADDR
// if not building in mc_bases [ i ] then
64219: LD_VAR 0 1
64223: PUSH
64224: LD_EXP 41
64228: PUSH
64229: LD_VAR 0 3
64233: ARRAY
64234: IN
64235: NOT
64236: IFFALSE 64282
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
64238: LD_ADDR_EXP 41
64242: PUSH
64243: LD_EXP 41
64247: PPUSH
64248: LD_VAR 0 3
64252: PUSH
64253: LD_EXP 41
64257: PUSH
64258: LD_VAR 0 3
64262: ARRAY
64263: PUSH
64264: LD_INT 1
64266: PLUS
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PPUSH
64272: LD_VAR 0 1
64276: PPUSH
64277: CALL 16381 0 3
64281: ST_TO_ADDR
// exit ;
64282: POP
64283: POP
64284: GO 64290
// end ; end ;
64286: GO 64090
64288: POP
64289: POP
// end ;
64290: LD_VAR 0 2
64294: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
64295: LD_INT 0
64297: PPUSH
64298: PPUSH
64299: PPUSH
64300: PPUSH
64301: PPUSH
64302: PPUSH
64303: PPUSH
// if not mc_bases then
64304: LD_EXP 41
64308: NOT
64309: IFFALSE 64313
// exit ;
64311: GO 64974
// for i = 1 to mc_bases do
64313: LD_ADDR_VAR 0 3
64317: PUSH
64318: DOUBLE
64319: LD_INT 1
64321: DEC
64322: ST_TO_ADDR
64323: LD_EXP 41
64327: PUSH
64328: FOR_TO
64329: IFFALSE 64972
// begin if building in mc_construct_list [ i ] then
64331: LD_VAR 0 1
64335: PUSH
64336: LD_EXP 48
64340: PUSH
64341: LD_VAR 0 3
64345: ARRAY
64346: IN
64347: IFFALSE 64970
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
64349: LD_ADDR_EXP 48
64353: PUSH
64354: LD_EXP 48
64358: PPUSH
64359: LD_VAR 0 3
64363: PPUSH
64364: LD_EXP 48
64368: PUSH
64369: LD_VAR 0 3
64373: ARRAY
64374: PUSH
64375: LD_VAR 0 1
64379: DIFF
64380: PPUSH
64381: CALL_OW 1
64385: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
64386: LD_ADDR_EXP 41
64390: PUSH
64391: LD_EXP 41
64395: PPUSH
64396: LD_VAR 0 3
64400: PUSH
64401: LD_EXP 41
64405: PUSH
64406: LD_VAR 0 3
64410: ARRAY
64411: PUSH
64412: LD_INT 1
64414: PLUS
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PPUSH
64420: LD_VAR 0 1
64424: PPUSH
64425: CALL 16381 0 3
64429: ST_TO_ADDR
// btype := GetBType ( building ) ;
64430: LD_ADDR_VAR 0 5
64434: PUSH
64435: LD_VAR 0 1
64439: PPUSH
64440: CALL_OW 266
64444: ST_TO_ADDR
// side := GetSide ( building ) ;
64445: LD_ADDR_VAR 0 8
64449: PUSH
64450: LD_VAR 0 1
64454: PPUSH
64455: CALL_OW 255
64459: ST_TO_ADDR
// if btype = b_lab then
64460: LD_VAR 0 5
64464: PUSH
64465: LD_INT 6
64467: EQUAL
64468: IFFALSE 64518
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
64470: LD_ADDR_EXP 74
64474: PUSH
64475: LD_EXP 74
64479: PPUSH
64480: LD_VAR 0 3
64484: PUSH
64485: LD_EXP 74
64489: PUSH
64490: LD_VAR 0 3
64494: ARRAY
64495: PUSH
64496: LD_INT 1
64498: PLUS
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PPUSH
64504: LD_VAR 0 1
64508: PPUSH
64509: CALL 16381 0 3
64513: ST_TO_ADDR
// exit ;
64514: POP
64515: POP
64516: GO 64974
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
64518: LD_VAR 0 5
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: LD_INT 2
64528: PUSH
64529: LD_INT 4
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: LIST
64536: IN
64537: IFFALSE 64661
// begin if btype = b_armoury then
64539: LD_VAR 0 5
64543: PUSH
64544: LD_INT 4
64546: EQUAL
64547: IFFALSE 64557
// btype := b_barracks ;
64549: LD_ADDR_VAR 0 5
64553: PUSH
64554: LD_INT 5
64556: ST_TO_ADDR
// if btype = b_depot then
64557: LD_VAR 0 5
64561: PUSH
64562: LD_INT 0
64564: EQUAL
64565: IFFALSE 64575
// btype := b_warehouse ;
64567: LD_ADDR_VAR 0 5
64571: PUSH
64572: LD_INT 1
64574: ST_TO_ADDR
// if btype = b_workshop then
64575: LD_VAR 0 5
64579: PUSH
64580: LD_INT 2
64582: EQUAL
64583: IFFALSE 64593
// btype := b_factory ;
64585: LD_ADDR_VAR 0 5
64589: PUSH
64590: LD_INT 3
64592: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
64593: LD_VAR 0 5
64597: PPUSH
64598: LD_VAR 0 8
64602: PPUSH
64603: CALL_OW 323
64607: PUSH
64608: LD_INT 1
64610: EQUAL
64611: IFFALSE 64657
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
64613: LD_ADDR_EXP 73
64617: PUSH
64618: LD_EXP 73
64622: PPUSH
64623: LD_VAR 0 3
64627: PUSH
64628: LD_EXP 73
64632: PUSH
64633: LD_VAR 0 3
64637: ARRAY
64638: PUSH
64639: LD_INT 1
64641: PLUS
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PPUSH
64647: LD_VAR 0 1
64651: PPUSH
64652: CALL 16381 0 3
64656: ST_TO_ADDR
// exit ;
64657: POP
64658: POP
64659: GO 64974
// end ; if btype in [ b_bunker , b_turret ] then
64661: LD_VAR 0 5
64665: PUSH
64666: LD_INT 32
64668: PUSH
64669: LD_INT 33
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: IN
64676: IFFALSE 64966
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
64678: LD_ADDR_EXP 49
64682: PUSH
64683: LD_EXP 49
64687: PPUSH
64688: LD_VAR 0 3
64692: PUSH
64693: LD_EXP 49
64697: PUSH
64698: LD_VAR 0 3
64702: ARRAY
64703: PUSH
64704: LD_INT 1
64706: PLUS
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PPUSH
64712: LD_VAR 0 1
64716: PPUSH
64717: CALL 16381 0 3
64721: ST_TO_ADDR
// if btype = b_bunker then
64722: LD_VAR 0 5
64726: PUSH
64727: LD_INT 32
64729: EQUAL
64730: IFFALSE 64966
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
64732: LD_ADDR_EXP 50
64736: PUSH
64737: LD_EXP 50
64741: PPUSH
64742: LD_VAR 0 3
64746: PUSH
64747: LD_EXP 50
64751: PUSH
64752: LD_VAR 0 3
64756: ARRAY
64757: PUSH
64758: LD_INT 1
64760: PLUS
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PPUSH
64766: LD_VAR 0 1
64770: PPUSH
64771: CALL 16381 0 3
64775: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
64776: LD_ADDR_VAR 0 6
64780: PUSH
64781: LD_EXP 41
64785: PUSH
64786: LD_VAR 0 3
64790: ARRAY
64791: PPUSH
64792: LD_INT 25
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 3
64804: PUSH
64805: LD_INT 54
64807: PUSH
64808: EMPTY
64809: LIST
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PPUSH
64819: CALL_OW 72
64823: ST_TO_ADDR
// if tmp then
64824: LD_VAR 0 6
64828: IFFALSE 64834
// exit ;
64830: POP
64831: POP
64832: GO 64974
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
64834: LD_ADDR_VAR 0 6
64838: PUSH
64839: LD_EXP 41
64843: PUSH
64844: LD_VAR 0 3
64848: ARRAY
64849: PPUSH
64850: LD_INT 2
64852: PUSH
64853: LD_INT 30
64855: PUSH
64856: LD_INT 4
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 30
64865: PUSH
64866: LD_INT 5
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: LIST
64877: PPUSH
64878: CALL_OW 72
64882: ST_TO_ADDR
// if not tmp then
64883: LD_VAR 0 6
64887: NOT
64888: IFFALSE 64894
// exit ;
64890: POP
64891: POP
64892: GO 64974
// for j in tmp do
64894: LD_ADDR_VAR 0 4
64898: PUSH
64899: LD_VAR 0 6
64903: PUSH
64904: FOR_IN
64905: IFFALSE 64964
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
64907: LD_ADDR_VAR 0 7
64911: PUSH
64912: LD_VAR 0 4
64916: PPUSH
64917: CALL_OW 313
64921: PPUSH
64922: LD_INT 25
64924: PUSH
64925: LD_INT 1
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PPUSH
64932: CALL_OW 72
64936: ST_TO_ADDR
// if units then
64937: LD_VAR 0 7
64941: IFFALSE 64962
// begin ComExitBuilding ( units [ 1 ] ) ;
64943: LD_VAR 0 7
64947: PUSH
64948: LD_INT 1
64950: ARRAY
64951: PPUSH
64952: CALL_OW 122
// exit ;
64956: POP
64957: POP
64958: POP
64959: POP
64960: GO 64974
// end ; end ;
64962: GO 64904
64964: POP
64965: POP
// end ; end ; exit ;
64966: POP
64967: POP
64968: GO 64974
// end ; end ;
64970: GO 64328
64972: POP
64973: POP
// end ;
64974: LD_VAR 0 2
64978: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
64979: LD_INT 0
64981: PPUSH
64982: PPUSH
64983: PPUSH
64984: PPUSH
64985: PPUSH
64986: PPUSH
64987: PPUSH
// if not mc_bases then
64988: LD_EXP 41
64992: NOT
64993: IFFALSE 64997
// exit ;
64995: GO 65228
// btype := GetBType ( building ) ;
64997: LD_ADDR_VAR 0 6
65001: PUSH
65002: LD_VAR 0 1
65006: PPUSH
65007: CALL_OW 266
65011: ST_TO_ADDR
// x := GetX ( building ) ;
65012: LD_ADDR_VAR 0 7
65016: PUSH
65017: LD_VAR 0 1
65021: PPUSH
65022: CALL_OW 250
65026: ST_TO_ADDR
// y := GetY ( building ) ;
65027: LD_ADDR_VAR 0 8
65031: PUSH
65032: LD_VAR 0 1
65036: PPUSH
65037: CALL_OW 251
65041: ST_TO_ADDR
// d := GetDir ( building ) ;
65042: LD_ADDR_VAR 0 9
65046: PUSH
65047: LD_VAR 0 1
65051: PPUSH
65052: CALL_OW 254
65056: ST_TO_ADDR
// for i = 1 to mc_bases do
65057: LD_ADDR_VAR 0 4
65061: PUSH
65062: DOUBLE
65063: LD_INT 1
65065: DEC
65066: ST_TO_ADDR
65067: LD_EXP 41
65071: PUSH
65072: FOR_TO
65073: IFFALSE 65226
// begin if not mc_build_list [ i ] then
65075: LD_EXP 46
65079: PUSH
65080: LD_VAR 0 4
65084: ARRAY
65085: NOT
65086: IFFALSE 65090
// continue ;
65088: GO 65072
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
65090: LD_VAR 0 6
65094: PUSH
65095: LD_VAR 0 7
65099: PUSH
65100: LD_VAR 0 8
65104: PUSH
65105: LD_VAR 0 9
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: PPUSH
65116: LD_EXP 46
65120: PUSH
65121: LD_VAR 0 4
65125: ARRAY
65126: PUSH
65127: LD_INT 1
65129: ARRAY
65130: PPUSH
65131: CALL 21979 0 2
65135: IFFALSE 65224
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
65137: LD_ADDR_EXP 46
65141: PUSH
65142: LD_EXP 46
65146: PPUSH
65147: LD_VAR 0 4
65151: PPUSH
65152: LD_EXP 46
65156: PUSH
65157: LD_VAR 0 4
65161: ARRAY
65162: PPUSH
65163: LD_INT 1
65165: PPUSH
65166: CALL_OW 3
65170: PPUSH
65171: CALL_OW 1
65175: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
65176: LD_ADDR_EXP 48
65180: PUSH
65181: LD_EXP 48
65185: PPUSH
65186: LD_VAR 0 4
65190: PUSH
65191: LD_EXP 48
65195: PUSH
65196: LD_VAR 0 4
65200: ARRAY
65201: PUSH
65202: LD_INT 1
65204: PLUS
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PPUSH
65210: LD_VAR 0 1
65214: PPUSH
65215: CALL 16381 0 3
65219: ST_TO_ADDR
// exit ;
65220: POP
65221: POP
65222: GO 65228
// end ; end ;
65224: GO 65072
65226: POP
65227: POP
// end ;
65228: LD_VAR 0 3
65232: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
65233: LD_INT 0
65235: PPUSH
65236: PPUSH
65237: PPUSH
// if not mc_bases then
65238: LD_EXP 41
65242: NOT
65243: IFFALSE 65247
// exit ;
65245: GO 65437
// for i = 1 to mc_bases do
65247: LD_ADDR_VAR 0 4
65251: PUSH
65252: DOUBLE
65253: LD_INT 1
65255: DEC
65256: ST_TO_ADDR
65257: LD_EXP 41
65261: PUSH
65262: FOR_TO
65263: IFFALSE 65350
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
65265: LD_VAR 0 1
65269: PUSH
65270: LD_EXP 49
65274: PUSH
65275: LD_VAR 0 4
65279: ARRAY
65280: IN
65281: PUSH
65282: LD_VAR 0 1
65286: PUSH
65287: LD_EXP 50
65291: PUSH
65292: LD_VAR 0 4
65296: ARRAY
65297: IN
65298: NOT
65299: AND
65300: IFFALSE 65348
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
65302: LD_ADDR_EXP 50
65306: PUSH
65307: LD_EXP 50
65311: PPUSH
65312: LD_VAR 0 4
65316: PUSH
65317: LD_EXP 50
65321: PUSH
65322: LD_VAR 0 4
65326: ARRAY
65327: PUSH
65328: LD_INT 1
65330: PLUS
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PPUSH
65336: LD_VAR 0 1
65340: PPUSH
65341: CALL 16381 0 3
65345: ST_TO_ADDR
// break ;
65346: GO 65350
// end ; end ;
65348: GO 65262
65350: POP
65351: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
65352: LD_VAR 0 1
65356: PPUSH
65357: CALL_OW 257
65361: PUSH
65362: LD_EXP 67
65366: IN
65367: PUSH
65368: LD_VAR 0 1
65372: PPUSH
65373: CALL_OW 266
65377: PUSH
65378: LD_INT 5
65380: EQUAL
65381: AND
65382: PUSH
65383: LD_VAR 0 2
65387: PPUSH
65388: CALL_OW 110
65392: PUSH
65393: LD_INT 18
65395: NONEQUAL
65396: AND
65397: IFFALSE 65437
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
65399: LD_VAR 0 2
65403: PPUSH
65404: CALL_OW 257
65408: PUSH
65409: LD_INT 5
65411: PUSH
65412: LD_INT 8
65414: PUSH
65415: LD_INT 9
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: LIST
65422: IN
65423: IFFALSE 65437
// SetClass ( unit , 1 ) ;
65425: LD_VAR 0 2
65429: PPUSH
65430: LD_INT 1
65432: PPUSH
65433: CALL_OW 336
// end ;
65437: LD_VAR 0 3
65441: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
65442: LD_INT 0
65444: PPUSH
65445: PPUSH
// if not mc_bases then
65446: LD_EXP 41
65450: NOT
65451: IFFALSE 65455
// exit ;
65453: GO 65571
// if GetLives ( abandoned_vehicle ) > 250 then
65455: LD_VAR 0 2
65459: PPUSH
65460: CALL_OW 256
65464: PUSH
65465: LD_INT 250
65467: GREATER
65468: IFFALSE 65472
// exit ;
65470: GO 65571
// for i = 1 to mc_bases do
65472: LD_ADDR_VAR 0 6
65476: PUSH
65477: DOUBLE
65478: LD_INT 1
65480: DEC
65481: ST_TO_ADDR
65482: LD_EXP 41
65486: PUSH
65487: FOR_TO
65488: IFFALSE 65569
// begin if driver in mc_bases [ i ] then
65490: LD_VAR 0 1
65494: PUSH
65495: LD_EXP 41
65499: PUSH
65500: LD_VAR 0 6
65504: ARRAY
65505: IN
65506: IFFALSE 65567
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
65508: LD_VAR 0 1
65512: PPUSH
65513: LD_EXP 41
65517: PUSH
65518: LD_VAR 0 6
65522: ARRAY
65523: PPUSH
65524: LD_INT 2
65526: PUSH
65527: LD_INT 30
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 30
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: LIST
65551: PPUSH
65552: CALL_OW 72
65556: PUSH
65557: LD_INT 1
65559: ARRAY
65560: PPUSH
65561: CALL_OW 112
// break ;
65565: GO 65569
// end ; end ;
65567: GO 65487
65569: POP
65570: POP
// end ;
65571: LD_VAR 0 5
65575: RET
