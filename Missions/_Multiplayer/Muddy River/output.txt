// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 323 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 1624 0 1
  44: PPUSH
  45: CALL 5207 0 1
// Multiplayer_Start ;
  49: CALL 3529 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 3645 0 0
// end ;
  69: END
// export debug , game , side_bot , artifact_get , base_names ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// side_bot := 2 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: ST_TO_ADDR
// artifact_get := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// base_names := [ base_a , base_b , base_c , base_d , base_e , base_f , base_g , base_h , base_i , base_j , base_k , base_l , base_m , base_n , base_o , base_p , base_r , base_s , base_t , base_u , base_w , base_x , base_y , base_z ] ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_STRING base_a
 104: PUSH
 105: LD_STRING base_b
 107: PUSH
 108: LD_STRING base_c
 110: PUSH
 111: LD_STRING base_d
 113: PUSH
 114: LD_STRING base_e
 116: PUSH
 117: LD_STRING base_f
 119: PUSH
 120: LD_STRING base_g
 122: PUSH
 123: LD_STRING base_h
 125: PUSH
 126: LD_STRING base_i
 128: PUSH
 129: LD_STRING base_j
 131: PUSH
 132: LD_STRING base_k
 134: PUSH
 135: LD_STRING base_l
 137: PUSH
 138: LD_STRING base_m
 140: PUSH
 141: LD_STRING base_n
 143: PUSH
 144: LD_STRING base_o
 146: PUSH
 147: LD_STRING base_p
 149: PUSH
 150: LD_STRING base_r
 152: PUSH
 153: LD_STRING base_s
 155: PUSH
 156: LD_STRING base_t
 158: PUSH
 159: LD_STRING base_u
 161: PUSH
 162: LD_STRING base_w
 164: PUSH
 165: LD_STRING base_x
 167: PUSH
 168: LD_STRING base_y
 170: PUSH
 171: LD_STRING base_z
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: LIST
 197: LIST
 198: LIST
 199: ST_TO_ADDR
// end ;
 200: LD_VAR 0 1
 204: RET
// every 0 0$01 trigger game and not debug_strings do
 205: LD_EXP 2
 209: PUSH
 210: LD_OWVAR 48
 214: NOT
 215: AND
 216: IFFALSE 232
 218: GO 220
 220: DISABLE
// begin enable ;
 221: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 222: LD_ADDR_OWVAR 47
 226: PUSH
 227: CALL 4143 0 0
 231: ST_TO_ADDR
// end ;
 232: END
// function Debuger ; var i ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
// if not debug then
 237: LD_EXP 1
 241: NOT
 242: IFFALSE 246
// exit ;
 244: GO 318
// game_speed := 5 ;
 246: LD_ADDR_OWVAR 65
 250: PUSH
 251: LD_INT 5
 253: ST_TO_ADDR
// uc_side := 1 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 1
 261: ST_TO_ADDR
// uc_nation := 1 ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 1
 269: ST_TO_ADDR
// for i = 1 to 10 do
 270: LD_ADDR_VAR 0 2
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_INT 10
 282: PUSH
 283: FOR_TO
 284: IFFALSE 316
// begin PrepareHuman ( false , 1 , 10 ) ;
 286: LD_INT 0
 288: PPUSH
 289: LD_INT 1
 291: PPUSH
 292: LD_INT 10
 294: PPUSH
 295: CALL_OW 380
// PlaceUnitArea ( CreateHuman , player_1_hum , false ) ;
 299: CALL_OW 44
 303: PPUSH
 304: LD_INT 9
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: CALL_OW 49
// end ;
 314: GO 283
 316: POP
 317: POP
// end ; end_of_file
 318: LD_VAR 0 1
 322: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_ape_amount , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_reinforcements_spawned , multi_support_arrive_time ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 323: LD_INT 0
 325: PPUSH
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
// multi_settings_counter := 6 ;
 330: LD_ADDR_EXP 18
 334: PUSH
 335: LD_INT 6
 337: ST_TO_ADDR
// if Multiplayer then
 338: LD_OWVAR 4
 342: IFFALSE 522
// begin your_side := mp_player_side ;
 344: LD_ADDR_OWVAR 2
 348: PUSH
 349: LD_OWVAR 7
 353: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 354: LD_ADDR_EXP 6
 358: PUSH
 359: LD_OWVAR 6
 363: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 364: LD_ADDR_EXP 7
 368: PUSH
 369: LD_OWVAR 17
 373: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 374: LD_ADDR_EXP 8
 378: PUSH
 379: LD_OWVAR 15
 383: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 384: LD_ADDR_EXP 9
 388: PUSH
 389: LD_OWVAR 16
 393: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 394: LD_ADDR_EXP 10
 398: PUSH
 399: EMPTY
 400: PUSH
 401: EMPTY
 402: LIST
 403: ST_TO_ADDR
// for i in mp_teams do
 404: LD_ADDR_VAR 0 2
 408: PUSH
 409: LD_OWVAR 12
 413: PUSH
 414: FOR_IN
 415: IFFALSE 458
// if i then
 417: LD_VAR 0 2
 421: IFFALSE 456
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 423: LD_ADDR_EXP 10
 427: PUSH
 428: LD_EXP 10
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: LD_EXP 10
 440: PUSH
 441: LD_INT 1
 443: ARRAY
 444: PUSH
 445: LD_VAR 0 2
 449: UNION
 450: PPUSH
 451: CALL_OW 1
 455: ST_TO_ADDR
 456: GO 414
 458: POP
 459: POP
// for i := 1 to multi_settings_counter do
 460: LD_ADDR_VAR 0 2
 464: PUSH
 465: DOUBLE
 466: LD_INT 1
 468: DEC
 469: ST_TO_ADDR
 470: LD_EXP 18
 474: PUSH
 475: FOR_TO
 476: IFFALSE 518
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 478: LD_ADDR_EXP 17
 482: PUSH
 483: LD_EXP 17
 487: PPUSH
 488: LD_EXP 17
 492: PUSH
 493: LD_INT 1
 495: PLUS
 496: PPUSH
 497: LD_VAR 0 2
 501: PPUSH
 502: CALL_OW 426
 506: PUSH
 507: LD_INT 1
 509: PLUS
 510: PPUSH
 511: CALL_OW 1
 515: ST_TO_ADDR
 516: GO 475
 518: POP
 519: POP
// end else
 520: GO 704
// begin your_side := 1 ;
 522: LD_ADDR_OWVAR 2
 526: PUSH
 527: LD_INT 1
 529: ST_TO_ADDR
// multi_gametype := 1 ;
 530: LD_ADDR_EXP 6
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// multi_sides := [ 2 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 538: LD_ADDR_EXP 7
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: LD_INT 0
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: LD_INT 0
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: ST_TO_ADDR
// multi_side_teams := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 577: LD_ADDR_EXP 8
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: LD_INT 0
 587: PUSH
 588: LD_INT 1
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 0
 602: PUSH
 603: LD_INT 0
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// multi_nations := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 616: LD_ADDR_EXP 9
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: LD_INT 1
 629: PUSH
 630: LD_INT 0
 632: PUSH
 633: LD_INT 0
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: ST_TO_ADDR
// multi_teams := [ [ 1 , 3 ] ] ;
 655: LD_ADDR_EXP 10
 659: PUSH
 660: LD_INT 1
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: ST_TO_ADDR
// multi_settings := [ 2 , 2 , 1 , 3 , 1 , 3 ] ;
 673: LD_ADDR_EXP 17
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: LD_INT 2
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 3
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 704: LD_ADDR_EXP 11
 708: PUSH
 709: LD_INT 0
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: LD_INT 0
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 0
 729: PUSH
 730: LD_INT 0
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 743: LD_ADDR_EXP 14
 747: PUSH
 748: LD_INT 0
 750: PUSH
 751: LD_INT 0
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 0
 765: PUSH
 766: LD_INT 0
 768: PUSH
 769: LD_INT 0
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 782: LD_ADDR_EXP 25
 786: PUSH
 787: LD_INT 0
 789: PUSH
 790: LD_INT 0
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: LD_INT 0
 798: PUSH
 799: LD_INT 0
 801: PUSH
 802: LD_INT 0
 804: PUSH
 805: LD_INT 0
 807: PUSH
 808: LD_INT 0
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: ST_TO_ADDR
// multi_teamgame := true ;
 821: LD_ADDR_EXP 15
 825: PUSH
 826: LD_INT 1
 828: ST_TO_ADDR
// multi_allowed_nations := [ 1 ] ;
 829: LD_ADDR_EXP 13
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: ST_TO_ADDR
// multi_custom_commanders := true ;
 840: LD_ADDR_EXP 16
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// multi_commanders := [ ] ;
 848: LD_ADDR_EXP 24
 852: PUSH
 853: EMPTY
 854: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 855: LD_ADDR_EXP 27
 859: PUSH
 860: EMPTY
 861: ST_TO_ADDR
// multi_reinforcements_spawned := 0 ;
 862: LD_ADDR_EXP 28
 866: PUSH
 867: LD_INT 0
 869: ST_TO_ADDR
// multi_players_amount := 0 ;
 870: LD_ADDR_EXP 26
 874: PUSH
 875: LD_INT 0
 877: ST_TO_ADDR
// multi_pos_area := [ [ player_1_hum , player_1_veh ] , [ player_2_hum , player_2_veh ] , [ player_3_hum , player_3_veh ] ] ;
 878: LD_ADDR_EXP 12
 882: PUSH
 883: LD_INT 9
 885: PUSH
 886: LD_INT 8
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 27
 895: PUSH
 896: LD_INT 26
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PUSH
 903: LD_INT 29
 905: PUSH
 906: LD_INT 28
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
// for i := 1 to 8 do
 918: LD_ADDR_VAR 0 2
 922: PUSH
 923: DOUBLE
 924: LD_INT 1
 926: DEC
 927: ST_TO_ADDR
 928: LD_INT 8
 930: PUSH
 931: FOR_TO
 932: IFFALSE 1261
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
 934: LD_VAR 0 2
 938: PPUSH
 939: CALL_OW 530
 943: IFFALSE 1101
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
 945: LD_ADDR_EXP 11
 949: PUSH
 950: LD_EXP 11
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_INT 1
 962: PPUSH
 963: CALL_OW 1
 967: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
 968: LD_ADDR_EXP 9
 972: PUSH
 973: LD_EXP 9
 977: PPUSH
 978: LD_VAR 0 2
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 1
 990: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
 991: LD_ADDR_EXP 7
 995: PUSH
 996: LD_EXP 7
1000: PPUSH
1001: LD_VAR 0 2
1005: PPUSH
1006: LD_INT 0
1008: PPUSH
1009: CALL_OW 1
1013: ST_TO_ADDR
// for j = 1 to multi_teams do
1014: LD_ADDR_VAR 0 3
1018: PUSH
1019: DOUBLE
1020: LD_INT 1
1022: DEC
1023: ST_TO_ADDR
1024: LD_EXP 10
1028: PUSH
1029: FOR_TO
1030: IFFALSE 1099
// begin if i in multi_teams [ j ] then
1032: LD_VAR 0 2
1036: PUSH
1037: LD_EXP 10
1041: PUSH
1042: LD_VAR 0 3
1046: ARRAY
1047: IN
1048: IFFALSE 1097
// begin tmp := multi_teams [ j ] diff i ;
1050: LD_ADDR_VAR 0 5
1054: PUSH
1055: LD_EXP 10
1059: PUSH
1060: LD_VAR 0 3
1064: ARRAY
1065: PUSH
1066: LD_VAR 0 2
1070: DIFF
1071: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1072: LD_ADDR_EXP 10
1076: PUSH
1077: LD_EXP 10
1081: PPUSH
1082: LD_VAR 0 3
1086: PPUSH
1087: LD_VAR 0 5
1091: PPUSH
1092: CALL_OW 1
1096: ST_TO_ADDR
// end ; end ;
1097: GO 1029
1099: POP
1100: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1101: LD_EXP 9
1105: PUSH
1106: LD_VAR 0 2
1110: ARRAY
1111: PUSH
1112: LD_EXP 9
1116: PUSH
1117: LD_VAR 0 2
1121: ARRAY
1122: PUSH
1123: LD_EXP 13
1127: IN
1128: NOT
1129: AND
1130: IFFALSE 1171
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1132: LD_ADDR_EXP 9
1136: PUSH
1137: LD_EXP 9
1141: PPUSH
1142: LD_VAR 0 2
1146: PPUSH
1147: LD_EXP 13
1151: PUSH
1152: LD_INT 1
1154: PPUSH
1155: LD_EXP 13
1159: PPUSH
1160: CALL_OW 12
1164: ARRAY
1165: PPUSH
1166: CALL_OW 1
1170: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1171: LD_EXP 9
1175: PUSH
1176: LD_VAR 0 2
1180: ARRAY
1181: NOT
1182: PUSH
1183: LD_EXP 7
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: NOT
1194: AND
1195: PUSH
1196: LD_EXP 11
1200: PUSH
1201: LD_VAR 0 2
1205: ARRAY
1206: NOT
1207: AND
1208: IFFALSE 1233
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1210: LD_ADDR_EXP 14
1214: PUSH
1215: LD_EXP 14
1219: PPUSH
1220: LD_VAR 0 2
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: CALL_OW 1
1232: ST_TO_ADDR
// if multi_sides [ i ] then
1233: LD_EXP 7
1237: PUSH
1238: LD_VAR 0 2
1242: ARRAY
1243: IFFALSE 1259
// multi_players_amount := multi_players_amount + 1 ;
1245: LD_ADDR_EXP 26
1249: PUSH
1250: LD_EXP 26
1254: PUSH
1255: LD_INT 1
1257: PLUS
1258: ST_TO_ADDR
// end ;
1259: GO 931
1261: POP
1262: POP
// for i in multi_teams do
1263: LD_ADDR_VAR 0 2
1267: PUSH
1268: LD_EXP 10
1272: PUSH
1273: FOR_IN
1274: IFFALSE 1382
// begin for j = 2 to i do
1276: LD_ADDR_VAR 0 3
1280: PUSH
1281: DOUBLE
1282: LD_INT 2
1284: DEC
1285: ST_TO_ADDR
1286: LD_VAR 0 2
1290: PUSH
1291: FOR_TO
1292: IFFALSE 1378
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1294: LD_VAR 0 2
1298: PUSH
1299: LD_VAR 0 3
1303: ARRAY
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 343
// for x = 1 to j - 1 do
1318: LD_ADDR_VAR 0 4
1322: PUSH
1323: DOUBLE
1324: LD_INT 1
1326: DEC
1327: ST_TO_ADDR
1328: LD_VAR 0 3
1332: PUSH
1333: LD_INT 1
1335: MINUS
1336: PUSH
1337: FOR_TO
1338: IFFALSE 1374
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1340: LD_VAR 0 2
1344: PUSH
1345: LD_VAR 0 3
1349: ARRAY
1350: PPUSH
1351: LD_VAR 0 2
1355: PUSH
1356: LD_VAR 0 4
1360: ARRAY
1361: PPUSH
1362: LD_INT 1
1364: PPUSH
1365: LD_INT 1
1367: PPUSH
1368: CALL_OW 80
1372: GO 1337
1374: POP
1375: POP
// end ;
1376: GO 1291
1378: POP
1379: POP
// end ;
1380: GO 1273
1382: POP
1383: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1384: LD_ADDR_OWVAR 67
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: LD_INT 2
1394: PUSH
1395: LD_INT 3
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_EXP 17
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: ARRAY
1412: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
1413: LD_ADDR_EXP 19
1417: PUSH
1418: LD_INT 9
1420: PUSH
1421: LD_INT 12
1423: PUSH
1424: LD_INT 15
1426: PUSH
1427: LD_INT 18
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: PUSH
1436: LD_EXP 17
1440: PUSH
1441: LD_INT 2
1443: ARRAY
1444: ARRAY
1445: ST_TO_ADDR
// multi_skill_level := [ 5 , 7 , 9 ] [ multi_settings [ 3 ] ] ;
1446: LD_ADDR_EXP 20
1450: PUSH
1451: LD_INT 5
1453: PUSH
1454: LD_INT 7
1456: PUSH
1457: LD_INT 9
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: LIST
1464: PUSH
1465: LD_EXP 17
1469: PUSH
1470: LD_INT 3
1472: ARRAY
1473: ARRAY
1474: ST_TO_ADDR
// multi_crates_spawn := [ [ 9000 , 0 0$32 ] , [ 12000 , 0 0$22 ] , [ 14000 , 0 0$14 ] , [ 18000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1475: LD_ADDR_EXP 21
1479: PUSH
1480: LD_INT 9000
1482: PUSH
1483: LD_INT 1120
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 12000
1492: PUSH
1493: LD_INT 770
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 14000
1502: PUSH
1503: LD_INT 490
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 18000
1512: PUSH
1513: LD_INT 420
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: PUSH
1526: LD_EXP 17
1530: PUSH
1531: LD_INT 4
1533: ARRAY
1534: ARRAY
1535: ST_TO_ADDR
// multi_ape_amount := [ 6 , 8 , 10 ] [ multi_settings [ 5 ] ] ;
1536: LD_ADDR_EXP 22
1540: PUSH
1541: LD_INT 6
1543: PUSH
1544: LD_INT 8
1546: PUSH
1547: LD_INT 10
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: LIST
1554: PUSH
1555: LD_EXP 17
1559: PUSH
1560: LD_INT 5
1562: ARRAY
1563: ARRAY
1564: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1565: LD_ADDR_EXP 23
1569: PUSH
1570: LD_INT 0
1572: PUSH
1573: LD_INT 1
1575: PUSH
1576: LD_INT 2
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: PUSH
1584: LD_EXP 17
1588: PUSH
1589: LD_INT 6
1591: ARRAY
1592: ARRAY
1593: ST_TO_ADDR
// multi_support_arrive_time := [ 15 15$0 , 18 18$0 , 21 21$0 ] [ Difficulty ] ;
1594: LD_ADDR_EXP 29
1598: PUSH
1599: LD_INT 31500
1601: PUSH
1602: LD_INT 37800
1604: PUSH
1605: LD_INT 44100
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: LIST
1612: PUSH
1613: LD_OWVAR 67
1617: ARRAY
1618: ST_TO_ADDR
// end ;
1619: LD_VAR 0 1
1623: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1624: LD_INT 0
1626: PPUSH
1627: PPUSH
// if not multi_sides [ 2 ] then
1628: LD_EXP 7
1632: PUSH
1633: LD_INT 2
1635: ARRAY
1636: NOT
1637: IFFALSE 1651
// begin result := preferSide ;
1639: LD_ADDR_VAR 0 2
1643: PUSH
1644: LD_VAR 0 1
1648: ST_TO_ADDR
// exit ;
1649: GO 1698
// end ; for i := 1 to 8 do
1651: LD_ADDR_VAR 0 3
1655: PUSH
1656: DOUBLE
1657: LD_INT 1
1659: DEC
1660: ST_TO_ADDR
1661: LD_INT 8
1663: PUSH
1664: FOR_TO
1665: IFFALSE 1696
// if not multi_sides [ i ] then
1667: LD_EXP 7
1671: PUSH
1672: LD_VAR 0 3
1676: ARRAY
1677: NOT
1678: IFFALSE 1694
// begin result := i ;
1680: LD_ADDR_VAR 0 2
1684: PUSH
1685: LD_VAR 0 3
1689: ST_TO_ADDR
// exit ;
1690: POP
1691: POP
1692: GO 1698
// end ;
1694: GO 1664
1696: POP
1697: POP
// end ;
1698: LD_VAR 0 2
1702: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1703: LD_INT 0
1705: PPUSH
// uc_side := side ;
1706: LD_ADDR_OWVAR 20
1710: PUSH
1711: LD_VAR 0 1
1715: ST_TO_ADDR
// uc_nation := 1 ;
1716: LD_ADDR_OWVAR 21
1720: PUSH
1721: LD_INT 1
1723: ST_TO_ADDR
// hc_importance := 100 ;
1724: LD_ADDR_OWVAR 32
1728: PUSH
1729: LD_INT 100
1731: ST_TO_ADDR
// hc_class := 1 ;
1732: LD_ADDR_OWVAR 28
1736: PUSH
1737: LD_INT 1
1739: ST_TO_ADDR
// if num = 1 then
1740: LD_VAR 0 2
1744: PUSH
1745: LD_INT 1
1747: EQUAL
1748: IFFALSE 1830
// begin hc_gallery := us ;
1750: LD_ADDR_OWVAR 33
1754: PUSH
1755: LD_STRING us
1757: ST_TO_ADDR
// hc_face_number := 5 ;
1758: LD_ADDR_OWVAR 34
1762: PUSH
1763: LD_INT 5
1765: ST_TO_ADDR
// hc_name := John Macmilan ;
1766: LD_ADDR_OWVAR 26
1770: PUSH
1771: LD_STRING John Macmilan
1773: ST_TO_ADDR
// hc_sex := sex_male ;
1774: LD_ADDR_OWVAR 27
1778: PUSH
1779: LD_INT 1
1781: ST_TO_ADDR
// hc_skills := [ 7 , 2 , 4 , 4 ] ;
1782: LD_ADDR_OWVAR 31
1786: PUSH
1787: LD_INT 7
1789: PUSH
1790: LD_INT 2
1792: PUSH
1793: LD_INT 4
1795: PUSH
1796: LD_INT 4
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1805: LD_ADDR_OWVAR 29
1809: PUSH
1810: LD_INT 11
1812: PUSH
1813: LD_INT 10
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: ST_TO_ADDR
// result := CreateHuman ;
1820: LD_ADDR_VAR 0 3
1824: PUSH
1825: CALL_OW 44
1829: ST_TO_ADDR
// end ; if num = 2 then
1830: LD_VAR 0 2
1834: PUSH
1835: LD_INT 2
1837: EQUAL
1838: IFFALSE 1920
// begin hc_gallery := us ;
1840: LD_ADDR_OWVAR 33
1844: PUSH
1845: LD_STRING us
1847: ST_TO_ADDR
// hc_face_number := 2 ;
1848: LD_ADDR_OWVAR 34
1852: PUSH
1853: LD_INT 2
1855: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
1856: LD_ADDR_OWVAR 26
1860: PUSH
1861: LD_STRING Lucy Donaldson
1863: ST_TO_ADDR
// hc_sex := sex_female ;
1864: LD_ADDR_OWVAR 27
1868: PUSH
1869: LD_INT 2
1871: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 3 ] ;
1872: LD_ADDR_OWVAR 31
1876: PUSH
1877: LD_INT 6
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: LD_INT 4
1885: PUSH
1886: LD_INT 3
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: ST_TO_ADDR
// hc_attr := [ 9 , 12 ] ;
1895: LD_ADDR_OWVAR 29
1899: PUSH
1900: LD_INT 9
1902: PUSH
1903: LD_INT 12
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: ST_TO_ADDR
// result := CreateHuman ;
1910: LD_ADDR_VAR 0 3
1914: PUSH
1915: CALL_OW 44
1919: ST_TO_ADDR
// end ; if num = 3 then
1920: LD_VAR 0 2
1924: PUSH
1925: LD_INT 3
1927: EQUAL
1928: IFFALSE 2010
// begin hc_gallery := us ;
1930: LD_ADDR_OWVAR 33
1934: PUSH
1935: LD_STRING us
1937: ST_TO_ADDR
// hc_face_number := 7 ;
1938: LD_ADDR_OWVAR 34
1942: PUSH
1943: LD_INT 7
1945: ST_TO_ADDR
// hc_name := Arthur Powell ;
1946: LD_ADDR_OWVAR 26
1950: PUSH
1951: LD_STRING Arthur Powell
1953: ST_TO_ADDR
// hc_sex := sex_male ;
1954: LD_ADDR_OWVAR 27
1958: PUSH
1959: LD_INT 1
1961: ST_TO_ADDR
// hc_skills := [ 8 , 2 , 5 , 2 ] ;
1962: LD_ADDR_OWVAR 31
1966: PUSH
1967: LD_INT 8
1969: PUSH
1970: LD_INT 2
1972: PUSH
1973: LD_INT 5
1975: PUSH
1976: LD_INT 2
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1985: LD_ADDR_OWVAR 29
1989: PUSH
1990: LD_INT 10
1992: PUSH
1993: LD_INT 11
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: ST_TO_ADDR
// result := CreateHuman ;
2000: LD_ADDR_VAR 0 3
2004: PUSH
2005: CALL_OW 44
2009: ST_TO_ADDR
// end ; end ;
2010: LD_VAR 0 3
2014: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , cl , un , veh , tmp , copy , people_amount ; begin
2015: LD_INT 0
2017: PPUSH
2018: PPUSH
2019: PPUSH
2020: PPUSH
2021: PPUSH
2022: PPUSH
2023: PPUSH
2024: PPUSH
2025: PPUSH
// for i := 1 to 8 do
2026: LD_ADDR_VAR 0 2
2030: PUSH
2031: DOUBLE
2032: LD_INT 1
2034: DEC
2035: ST_TO_ADDR
2036: LD_INT 8
2038: PUSH
2039: FOR_TO
2040: IFFALSE 2930
// begin if not multi_sides [ i ] then
2042: LD_EXP 7
2046: PUSH
2047: LD_VAR 0 2
2051: ARRAY
2052: NOT
2053: IFFALSE 2057
// continue ;
2055: GO 2039
// if multi_custom_commanders then
2057: LD_EXP 16
2061: IFFALSE 2153
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2063: LD_ADDR_VAR 0 5
2067: PUSH
2068: LD_VAR 0 2
2072: PPUSH
2073: LD_EXP 7
2077: PUSH
2078: LD_VAR 0 2
2082: ARRAY
2083: PPUSH
2084: CALL 1703 0 2
2088: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2089: LD_ADDR_EXP 24
2093: PUSH
2094: LD_EXP 24
2098: PPUSH
2099: LD_EXP 24
2103: PUSH
2104: LD_INT 1
2106: PLUS
2107: PPUSH
2108: LD_VAR 0 5
2112: PPUSH
2113: CALL_OW 2
2117: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_EXP 12
2127: PUSH
2128: LD_EXP 7
2132: PUSH
2133: LD_VAR 0 2
2137: ARRAY
2138: ARRAY
2139: PUSH
2140: LD_INT 1
2142: ARRAY
2143: PPUSH
2144: LD_INT 0
2146: PPUSH
2147: CALL_OW 49
// end else
2151: GO 2364
// begin uc_side := i ;
2153: LD_ADDR_OWVAR 20
2157: PUSH
2158: LD_VAR 0 2
2162: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2163: LD_ADDR_OWVAR 21
2167: PUSH
2168: LD_EXP 9
2172: PUSH
2173: LD_VAR 0 2
2177: ARRAY
2178: ST_TO_ADDR
// hc_importance := 100 ;
2179: LD_ADDR_OWVAR 32
2183: PUSH
2184: LD_INT 100
2186: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2187: LD_INT 0
2189: PPUSH
2190: LD_INT 1
2192: PPUSH
2193: LD_EXP 20
2197: PPUSH
2198: CALL_OW 380
// if multiplayer then
2202: LD_OWVAR 4
2206: IFFALSE 2264
// begin hc_name := mp_sides_players_names [ i ] ;
2208: LD_ADDR_OWVAR 26
2212: PUSH
2213: LD_OWVAR 19
2217: PUSH
2218: LD_VAR 0 2
2222: ARRAY
2223: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2224: LD_ADDR_OWVAR 33
2228: PUSH
2229: LD_STRING MULTIAVATARS
2231: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2232: LD_ADDR_OWVAR 34
2236: PUSH
2237: LD_VAR 0 2
2241: PPUSH
2242: CALL_OW 525
2246: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2247: LD_ADDR_OWVAR 27
2251: PUSH
2252: LD_VAR 0 2
2256: PPUSH
2257: CALL_OW 526
2261: ST_TO_ADDR
// end else
2262: GO 2296
// begin hc_gallery :=  ;
2264: LD_ADDR_OWVAR 33
2268: PUSH
2269: LD_STRING 
2271: ST_TO_ADDR
// hc_name :=  ;
2272: LD_ADDR_OWVAR 26
2276: PUSH
2277: LD_STRING 
2279: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2280: LD_ADDR_OWVAR 27
2284: PUSH
2285: LD_INT 1
2287: PPUSH
2288: LD_INT 2
2290: PPUSH
2291: CALL_OW 12
2295: ST_TO_ADDR
// end ; un := CreateHuman ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: CALL_OW 44
2305: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2306: LD_VAR 0 5
2310: PPUSH
2311: LD_EXP 12
2315: PUSH
2316: LD_EXP 7
2320: PUSH
2321: LD_VAR 0 2
2325: ARRAY
2326: ARRAY
2327: PUSH
2328: LD_INT 1
2330: ARRAY
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2339: LD_ADDR_EXP 24
2343: PUSH
2344: LD_EXP 24
2348: PPUSH
2349: LD_VAR 0 2
2353: PPUSH
2354: LD_VAR 0 5
2358: PPUSH
2359: CALL_OW 1
2363: ST_TO_ADDR
// end ; InitHc ;
2364: CALL_OW 19
// InitUc ;
2368: CALL_OW 18
// uc_side := i ;
2372: LD_ADDR_OWVAR 20
2376: PUSH
2377: LD_VAR 0 2
2381: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2382: LD_ADDR_OWVAR 21
2386: PUSH
2387: LD_EXP 9
2391: PUSH
2392: LD_VAR 0 2
2396: ARRAY
2397: ST_TO_ADDR
// hc_gallery :=  ;
2398: LD_ADDR_OWVAR 33
2402: PUSH
2403: LD_STRING 
2405: ST_TO_ADDR
// hc_name :=  ;
2406: LD_ADDR_OWVAR 26
2410: PUSH
2411: LD_STRING 
2413: ST_TO_ADDR
// hc_importance := 0 ;
2414: LD_ADDR_OWVAR 32
2418: PUSH
2419: LD_INT 0
2421: ST_TO_ADDR
// cl := 1 ;
2422: LD_ADDR_VAR 0 4
2426: PUSH
2427: LD_INT 1
2429: ST_TO_ADDR
// for j = 2 to multi_pep_amount do
2430: LD_ADDR_VAR 0 3
2434: PUSH
2435: DOUBLE
2436: LD_INT 2
2438: DEC
2439: ST_TO_ADDR
2440: LD_EXP 19
2444: PUSH
2445: FOR_TO
2446: IFFALSE 2818
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2448: LD_VAR 0 3
2452: PUSH
2453: LD_INT 1
2455: MINUS
2456: PUSH
2457: LD_EXP 19
2461: PUSH
2462: LD_INT 1
2464: MINUS
2465: PUSH
2466: LD_INT 4
2468: DIVREAL
2469: MOD
2470: PUSH
2471: LD_INT 0
2473: EQUAL
2474: IFFALSE 2490
// cl := cl + 1 ;
2476: LD_ADDR_VAR 0 4
2480: PUSH
2481: LD_VAR 0 4
2485: PUSH
2486: LD_INT 1
2488: PLUS
2489: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2490: LD_INT 0
2492: PPUSH
2493: LD_VAR 0 4
2497: PPUSH
2498: LD_EXP 20
2502: PPUSH
2503: CALL_OW 380
// un := CreateHuman ;
2507: LD_ADDR_VAR 0 5
2511: PUSH
2512: CALL_OW 44
2516: ST_TO_ADDR
// if j > copy then
2517: LD_VAR 0 3
2521: PUSH
2522: LD_VAR 0 8
2526: GREATER
2527: IFFALSE 2556
// copy := Replace ( copy , j , un ) else
2529: LD_ADDR_VAR 0 8
2533: PUSH
2534: LD_VAR 0 8
2538: PPUSH
2539: LD_VAR 0 3
2543: PPUSH
2544: LD_VAR 0 5
2548: PPUSH
2549: CALL_OW 1
2553: ST_TO_ADDR
2554: GO 2638
// begin CopySkills ( copy [ j ] , un ) ;
2556: LD_VAR 0 8
2560: PUSH
2561: LD_VAR 0 3
2565: ARRAY
2566: PPUSH
2567: LD_VAR 0 5
2571: PPUSH
2572: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2576: LD_VAR 0 5
2580: PPUSH
2581: LD_INT 2
2583: PPUSH
2584: LD_VAR 0 8
2588: PUSH
2589: LD_VAR 0 3
2593: ARRAY
2594: PPUSH
2595: LD_INT 2
2597: PPUSH
2598: CALL_OW 260
2602: PPUSH
2603: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2607: LD_VAR 0 5
2611: PPUSH
2612: LD_INT 1
2614: PPUSH
2615: LD_VAR 0 8
2619: PUSH
2620: LD_VAR 0 3
2624: ARRAY
2625: PPUSH
2626: LD_INT 1
2628: PPUSH
2629: CALL_OW 260
2633: PPUSH
2634: CALL_OW 239
// end ; if multi_pos_area then
2638: LD_EXP 12
2642: IFFALSE 2816
// begin if GetClass ( un ) = 3 then
2644: LD_VAR 0 5
2648: PPUSH
2649: CALL_OW 257
2653: PUSH
2654: LD_INT 3
2656: EQUAL
2657: IFFALSE 2783
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ j mod 2 + 1 ] , engine_solar , control_manual , [ us_double_gun , us_gatling_gun , us_light_gun ] [ j mod 3 + 1 ] , 100 ) ;
2659: LD_INT 3
2661: PUSH
2662: LD_INT 2
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: PUSH
2669: LD_VAR 0 3
2673: PUSH
2674: LD_INT 2
2676: MOD
2677: PUSH
2678: LD_INT 1
2680: PLUS
2681: ARRAY
2682: PPUSH
2683: LD_INT 2
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: LD_INT 5
2691: PUSH
2692: LD_INT 4
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: LD_VAR 0 3
2707: PUSH
2708: LD_INT 3
2710: MOD
2711: PUSH
2712: LD_INT 1
2714: PLUS
2715: ARRAY
2716: PPUSH
2717: LD_INT 100
2719: PPUSH
2720: CALL 21380 0 5
// veh := CreateVehicle ;
2724: LD_ADDR_VAR 0 6
2728: PUSH
2729: CALL_OW 45
2733: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2734: LD_VAR 0 6
2738: PPUSH
2739: LD_EXP 12
2743: PUSH
2744: LD_EXP 7
2748: PUSH
2749: LD_VAR 0 2
2753: ARRAY
2754: ARRAY
2755: PUSH
2756: LD_INT 2
2758: ARRAY
2759: PPUSH
2760: LD_INT 0
2762: PPUSH
2763: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2767: LD_VAR 0 5
2771: PPUSH
2772: LD_VAR 0 6
2776: PPUSH
2777: CALL_OW 52
// continue ;
2781: GO 2445
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2783: LD_VAR 0 5
2787: PPUSH
2788: LD_EXP 12
2792: PUSH
2793: LD_EXP 7
2797: PUSH
2798: LD_VAR 0 2
2802: ARRAY
2803: ARRAY
2804: PUSH
2805: LD_INT 1
2807: ARRAY
2808: PPUSH
2809: LD_INT 0
2811: PPUSH
2812: CALL_OW 49
// end ; end ;
2816: GO 2445
2818: POP
2819: POP
// for j = 1 to 3 do
2820: LD_ADDR_VAR 0 3
2824: PUSH
2825: DOUBLE
2826: LD_INT 1
2828: DEC
2829: ST_TO_ADDR
2830: LD_INT 3
2832: PUSH
2833: FOR_TO
2834: IFFALSE 2926
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_solar , control_computer , [ us_radar , us_rocket_launcher , us_gatling_gun ] [ j ] , 100 ) ;
2836: LD_INT 2
2838: PUSH
2839: LD_INT 3
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 1
2848: PPUSH
2849: LD_INT 2
2851: PPUSH
2852: CALL_OW 12
2856: ARRAY
2857: PPUSH
2858: LD_INT 2
2860: PPUSH
2861: LD_INT 3
2863: PPUSH
2864: LD_INT 11
2866: PUSH
2867: LD_INT 7
2869: PUSH
2870: LD_INT 4
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: LIST
2877: PUSH
2878: LD_VAR 0 3
2882: ARRAY
2883: PPUSH
2884: LD_INT 100
2886: PPUSH
2887: CALL 21380 0 5
// PlaceUnitArea ( CreateVehicle , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2891: CALL_OW 45
2895: PPUSH
2896: LD_EXP 12
2900: PUSH
2901: LD_EXP 7
2905: PUSH
2906: LD_VAR 0 2
2910: ARRAY
2911: ARRAY
2912: PUSH
2913: LD_INT 1
2915: ARRAY
2916: PPUSH
2917: LD_INT 0
2919: PPUSH
2920: CALL_OW 49
// end ;
2924: GO 2833
2926: POP
2927: POP
// end ;
2928: GO 2039
2930: POP
2931: POP
// end ;
2932: LD_VAR 0 1
2936: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
2937: LD_INT 0
2939: PPUSH
2940: PPUSH
2941: PPUSH
2942: PPUSH
2943: PPUSH
// if not multi_support then
2944: LD_EXP 23
2948: NOT
2949: IFFALSE 2953
// exit ;
2951: GO 3524
// result := [ ] ;
2953: LD_ADDR_VAR 0 1
2957: PUSH
2958: EMPTY
2959: ST_TO_ADDR
// for i := 1 to 8 do
2960: LD_ADDR_VAR 0 2
2964: PUSH
2965: DOUBLE
2966: LD_INT 1
2968: DEC
2969: ST_TO_ADDR
2970: LD_INT 8
2972: PUSH
2973: FOR_TO
2974: IFFALSE 3522
// begin result := Replace ( result , i , [ ] ) ;
2976: LD_ADDR_VAR 0 1
2980: PUSH
2981: LD_VAR 0 1
2985: PPUSH
2986: LD_VAR 0 2
2990: PPUSH
2991: EMPTY
2992: PPUSH
2993: CALL_OW 1
2997: ST_TO_ADDR
// if multi_sides [ i ] then
2998: LD_EXP 7
3002: PUSH
3003: LD_VAR 0 2
3007: ARRAY
3008: IFFALSE 3520
// begin tmp := [ ] ;
3010: LD_ADDR_VAR 0 5
3014: PUSH
3015: EMPTY
3016: ST_TO_ADDR
// if multi_support = 1 then
3017: LD_EXP 23
3021: PUSH
3022: LD_INT 1
3024: EQUAL
3025: IFFALSE 3193
// begin uc_side := i ;
3027: LD_ADDR_OWVAR 20
3031: PUSH
3032: LD_VAR 0 2
3036: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3037: LD_ADDR_OWVAR 21
3041: PUSH
3042: LD_EXP 9
3046: PUSH
3047: LD_VAR 0 2
3051: ARRAY
3052: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3053: LD_INT 3
3055: PPUSH
3056: LD_INT 1
3058: PPUSH
3059: LD_INT 3
3061: PPUSH
3062: LD_INT 11
3064: PPUSH
3065: LD_INT 40
3067: PPUSH
3068: CALL 21380 0 5
// tmp := tmp ^ CreateVehicle ;
3072: LD_ADDR_VAR 0 5
3076: PUSH
3077: LD_VAR 0 5
3081: PUSH
3082: CALL_OW 45
3086: ADD
3087: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_double_gun , 40 ) ;
3088: LD_INT 2
3090: PPUSH
3091: LD_INT 1
3093: PPUSH
3094: LD_INT 3
3096: PPUSH
3097: LD_INT 5
3099: PPUSH
3100: LD_INT 40
3102: PPUSH
3103: CALL 21380 0 5
// tmp := tmp ^ CreateVehicle ;
3107: LD_ADDR_VAR 0 5
3111: PUSH
3112: LD_VAR 0 5
3116: PUSH
3117: CALL_OW 45
3121: ADD
3122: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_gatling_gun , 40 ) ;
3123: LD_INT 2
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: LD_INT 3
3131: PPUSH
3132: LD_INT 4
3134: PPUSH
3135: LD_INT 40
3137: PPUSH
3138: CALL 21380 0 5
// tmp := tmp ^ CreateVehicle ;
3142: LD_ADDR_VAR 0 5
3146: PUSH
3147: LD_VAR 0 5
3151: PUSH
3152: CALL_OW 45
3156: ADD
3157: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_solar , control_computer , us_laser , 40 ) ;
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 2
3163: PPUSH
3164: LD_INT 3
3166: PPUSH
3167: LD_INT 9
3169: PPUSH
3170: LD_INT 40
3172: PPUSH
3173: CALL 21380 0 5
// tmp := tmp ^ CreateVehicle ;
3177: LD_ADDR_VAR 0 5
3181: PUSH
3182: LD_VAR 0 5
3186: PUSH
3187: CALL_OW 45
3191: ADD
3192: ST_TO_ADDR
// end ; if multi_support = 2 then
3193: LD_EXP 23
3197: PUSH
3198: LD_INT 2
3200: EQUAL
3201: IFFALSE 3495
// begin uc_side := i ;
3203: LD_ADDR_OWVAR 20
3207: PUSH
3208: LD_VAR 0 2
3212: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3213: LD_ADDR_OWVAR 21
3217: PUSH
3218: LD_EXP 9
3222: PUSH
3223: LD_VAR 0 2
3227: ARRAY
3228: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3229: LD_INT 3
3231: PPUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 3
3237: PPUSH
3238: LD_INT 11
3240: PPUSH
3241: LD_INT 40
3243: PPUSH
3244: CALL 21380 0 5
// tmp := tmp ^ CreateVehicle ;
3248: LD_ADDR_VAR 0 5
3252: PUSH
3253: LD_VAR 0 5
3257: PUSH
3258: CALL_OW 45
3262: ADD
3263: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 40 ) ;
3264: LD_INT 3
3266: PPUSH
3267: LD_INT 3
3269: PPUSH
3270: LD_INT 3
3272: PPUSH
3273: LD_INT 12
3275: PPUSH
3276: LD_INT 40
3278: PPUSH
3279: CALL 21380 0 5
// tmp := tmp ^ CreateVehicle ;
3283: LD_ADDR_VAR 0 5
3287: PUSH
3288: LD_VAR 0 5
3292: PUSH
3293: CALL_OW 45
3297: ADD
3298: ST_TO_ADDR
// SetCargo ( tmp [ tmp ] , mat_cans , 100 ) ;
3299: LD_VAR 0 5
3303: PUSH
3304: LD_VAR 0 5
3308: ARRAY
3309: PPUSH
3310: LD_INT 1
3312: PPUSH
3313: LD_INT 100
3315: PPUSH
3316: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_double_gun , 40 ) ;
3320: LD_INT 2
3322: PPUSH
3323: LD_INT 3
3325: PPUSH
3326: LD_INT 3
3328: PPUSH
3329: LD_INT 5
3331: PPUSH
3332: LD_INT 40
3334: PPUSH
3335: CALL 21380 0 5
// tmp := tmp ^ CreateVehicle ;
3339: LD_ADDR_VAR 0 5
3343: PUSH
3344: LD_VAR 0 5
3348: PUSH
3349: CALL_OW 45
3353: ADD
3354: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3355: LD_INT 4
3357: PPUSH
3358: LD_INT 1
3360: PPUSH
3361: LD_INT 3
3363: PPUSH
3364: LD_INT 6
3366: PPUSH
3367: LD_INT 40
3369: PPUSH
3370: CALL 21380 0 5
// tmp := tmp ^ CreateVehicle ;
3374: LD_ADDR_VAR 0 5
3378: PUSH
3379: LD_VAR 0 5
3383: PUSH
3384: CALL_OW 45
3388: ADD
3389: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3390: LD_INT 2
3392: PPUSH
3393: LD_INT 3
3395: PPUSH
3396: LD_INT 3
3398: PPUSH
3399: LD_INT 9
3401: PPUSH
3402: LD_INT 40
3404: PPUSH
3405: CALL 21380 0 5
// tmp := tmp ^ CreateVehicle ;
3409: LD_ADDR_VAR 0 5
3413: PUSH
3414: LD_VAR 0 5
3418: PUSH
3419: CALL_OW 45
3423: ADD
3424: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3425: LD_INT 2
3427: PPUSH
3428: LD_INT 3
3430: PPUSH
3431: LD_INT 3
3433: PPUSH
3434: LD_INT 9
3436: PPUSH
3437: LD_INT 40
3439: PPUSH
3440: CALL 21380 0 5
// tmp := tmp ^ CreateVehicle ;
3444: LD_ADDR_VAR 0 5
3448: PUSH
3449: LD_VAR 0 5
3453: PUSH
3454: CALL_OW 45
3458: ADD
3459: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3460: LD_INT 4
3462: PPUSH
3463: LD_INT 1
3465: PPUSH
3466: LD_INT 3
3468: PPUSH
3469: LD_INT 6
3471: PPUSH
3472: LD_INT 40
3474: PPUSH
3475: CALL 21380 0 5
// tmp := tmp ^ CreateVehicle ;
3479: LD_ADDR_VAR 0 5
3483: PUSH
3484: LD_VAR 0 5
3488: PUSH
3489: CALL_OW 45
3493: ADD
3494: ST_TO_ADDR
// end ; result := Replace ( result , i , tmp ) ;
3495: LD_ADDR_VAR 0 1
3499: PUSH
3500: LD_VAR 0 1
3504: PPUSH
3505: LD_VAR 0 2
3509: PPUSH
3510: LD_VAR 0 5
3514: PPUSH
3515: CALL_OW 1
3519: ST_TO_ADDR
// end ; end ;
3520: GO 2973
3522: POP
3523: POP
// end ;
3524: LD_VAR 0 1
3528: RET
// export function Multiplayer_Start ( ) ; begin
3529: LD_INT 0
3531: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3532: CALL 2015 0 0
// Multiplayer_InitPointSystem ( ) ;
3536: CALL 4232 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3540: LD_INT 20
3542: PPUSH
3543: CALL 4408 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3547: LD_INT 150
3549: PPUSH
3550: CALL 4408 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3554: LD_INT 5
3556: PPUSH
3557: CALL 4408 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3561: LD_INT 40
3563: NEG
3564: PPUSH
3565: CALL 4408 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3569: LD_INT 200
3571: PPUSH
3572: CALL 4408 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3576: LD_INT 2
3578: PPUSH
3579: CALL 4408 0 1
// Multiplayer_SpawnArtifact ;
3583: CALL 4848 0 0
// if multi_support then
3587: LD_EXP 23
3591: IFFALSE 3603
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3593: LD_ADDR_EXP 27
3597: PUSH
3598: CALL 2937 0 0
3602: ST_TO_ADDR
// if multi_sides [ your_side ] then
3603: LD_EXP 7
3607: PUSH
3608: LD_OWVAR 2
3612: ARRAY
3613: IFFALSE 3640
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3615: LD_INT 22
3617: PUSH
3618: LD_OWVAR 2
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: PPUSH
3627: CALL_OW 69
3631: PUSH
3632: LD_INT 1
3634: ARRAY
3635: PPUSH
3636: CALL_OW 87
// end ;
3640: LD_VAR 0 1
3644: RET
// export function Multiplayer_End ( ) ; var i , j , tmp , reinforcements_arrive ; begin
3645: LD_INT 0
3647: PPUSH
3648: PPUSH
3649: PPUSH
3650: PPUSH
3651: PPUSH
// reinforcements_arrive := 0 ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: LD_INT 0
3659: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3660: LD_INT 35
3662: PPUSH
3663: CALL_OW 67
// if tick > multi_support_arrive_time and not multi_reinforcements_spawned and multi_support then
3667: LD_OWVAR 1
3671: PUSH
3672: LD_EXP 29
3676: GREATER
3677: PUSH
3678: LD_EXP 28
3682: NOT
3683: AND
3684: PUSH
3685: LD_EXP 23
3689: AND
3690: IFFALSE 3855
// begin multi_reinforcements_spawned := true ;
3692: LD_ADDR_EXP 28
3696: PUSH
3697: LD_INT 1
3699: ST_TO_ADDR
// for i := 1 to 8 do
3700: LD_ADDR_VAR 0 2
3704: PUSH
3705: DOUBLE
3706: LD_INT 1
3708: DEC
3709: ST_TO_ADDR
3710: LD_INT 8
3712: PUSH
3713: FOR_TO
3714: IFFALSE 3843
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
3716: LD_EXP 7
3720: PUSH
3721: LD_VAR 0 2
3725: ARRAY
3726: PUSH
3727: LD_EXP 25
3731: PUSH
3732: LD_VAR 0 2
3736: ARRAY
3737: NOT
3738: AND
3739: PUSH
3740: LD_EXP 27
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: AND
3751: IFFALSE 3841
// begin tmp := multi_reinforcements [ i ] ;
3753: LD_ADDR_VAR 0 4
3757: PUSH
3758: LD_EXP 27
3762: PUSH
3763: LD_VAR 0 2
3767: ARRAY
3768: ST_TO_ADDR
// for j in tmp do
3769: LD_ADDR_VAR 0 3
3773: PUSH
3774: LD_VAR 0 4
3778: PUSH
3779: FOR_IN
3780: IFFALSE 3817
// PlaceUnitArea ( j , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3782: LD_VAR 0 3
3786: PPUSH
3787: LD_EXP 12
3791: PUSH
3792: LD_EXP 7
3796: PUSH
3797: LD_VAR 0 2
3801: ARRAY
3802: ARRAY
3803: PUSH
3804: LD_INT 2
3806: ARRAY
3807: PPUSH
3808: LD_INT 0
3810: PPUSH
3811: CALL_OW 49
3815: GO 3779
3817: POP
3818: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , [ ] ) ;
3819: LD_ADDR_EXP 27
3823: PUSH
3824: LD_EXP 27
3828: PPUSH
3829: LD_VAR 0 2
3833: PPUSH
3834: EMPTY
3835: PPUSH
3836: CALL_OW 1
3840: ST_TO_ADDR
// end ; end ;
3841: GO 3713
3843: POP
3844: POP
// reinforcements_arrive := tick ;
3845: LD_ADDR_VAR 0 5
3849: PUSH
3850: LD_OWVAR 1
3854: ST_TO_ADDR
// end ; if not multi_custom_commanders then
3855: LD_EXP 16
3859: NOT
3860: IFFALSE 3973
// begin for i = 1 to 8 do
3862: LD_ADDR_VAR 0 2
3866: PUSH
3867: DOUBLE
3868: LD_INT 1
3870: DEC
3871: ST_TO_ADDR
3872: LD_INT 8
3874: PUSH
3875: FOR_TO
3876: IFFALSE 3947
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
3878: LD_INT 22
3880: PUSH
3881: LD_VAR 0 2
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PPUSH
3890: CALL_OW 69
3894: PUSH
3895: LD_INT 0
3897: EQUAL
3898: PUSH
3899: LD_EXP 25
3903: PUSH
3904: LD_VAR 0 2
3908: ARRAY
3909: NOT
3910: AND
3911: IFFALSE 3945
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
3913: LD_ADDR_EXP 25
3917: PUSH
3918: LD_EXP 25
3922: PPUSH
3923: LD_VAR 0 2
3927: PPUSH
3928: LD_INT 1
3930: PPUSH
3931: CALL_OW 1
3935: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
3936: LD_VAR 0 2
3940: PPUSH
3941: CALL 4478 0 1
// end ; end ;
3945: GO 3875
3947: POP
3948: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
3949: LD_EXP 25
3953: PPUSH
3954: CALL 18642 0 1
3958: PUSH
3959: LD_EXP 7
3963: PPUSH
3964: CALL 18642 0 1
3968: EQUAL
3969: IFFALSE 3973
// break ;
3971: GO 4029
// end ; until ( FilterAllUnits ( [ [ f_side , side_bot ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 and game ) or not multi_commanders ;
3973: LD_INT 22
3975: PUSH
3976: LD_EXP 3
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: LD_INT 21
3987: PUSH
3988: LD_INT 1
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: LD_INT 50
3997: PUSH
3998: EMPTY
3999: LIST
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: LIST
4005: PPUSH
4006: CALL_OW 69
4010: PUSH
4011: LD_INT 0
4013: EQUAL
4014: PUSH
4015: LD_EXP 2
4019: AND
4020: PUSH
4021: LD_EXP 24
4025: NOT
4026: OR
4027: IFFALSE 3660
// game := false ;
4029: LD_ADDR_EXP 2
4033: PUSH
4034: LD_INT 0
4036: ST_TO_ADDR
// for i := 1 to 8 do
4037: LD_ADDR_VAR 0 2
4041: PUSH
4042: DOUBLE
4043: LD_INT 1
4045: DEC
4046: ST_TO_ADDR
4047: LD_INT 8
4049: PUSH
4050: FOR_TO
4051: IFFALSE 4087
// begin if multi_sides [ i ] then
4053: LD_EXP 7
4057: PUSH
4058: LD_VAR 0 2
4062: ARRAY
4063: IFFALSE 4085
// SetMultiScore ( i , multi_points [ i ] ) ;
4065: LD_VAR 0 2
4069: PPUSH
4070: LD_EXP 30
4074: PUSH
4075: LD_VAR 0 2
4079: ARRAY
4080: PPUSH
4081: CALL_OW 506
// end ;
4085: GO 4050
4087: POP
4088: POP
// if multi_loosers [ your_side ] then
4089: LD_EXP 25
4093: PUSH
4094: LD_OWVAR 2
4098: ARRAY
4099: IFFALSE 4122
// begin if Multiplayer then
4101: LD_OWVAR 4
4105: IFFALSE 4113
// YouLostInMultiplayer else
4107: CALL_OW 107
4111: GO 4120
// YouLost (  ) ;
4113: LD_STRING 
4115: PPUSH
4116: CALL_OW 104
// end else
4120: GO 4138
// begin if Multiplayer then
4122: LD_OWVAR 4
4126: IFFALSE 4134
// YouWinInMultiplayer else
4128: CALL_OW 106
4132: GO 4138
// YouWin ;
4134: CALL_OW 103
// end ; end ;
4138: LD_VAR 0 1
4142: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4143: LD_INT 0
4145: PPUSH
4146: PPUSH
// result := [ ] ;
4147: LD_ADDR_VAR 0 1
4151: PUSH
4152: EMPTY
4153: ST_TO_ADDR
// for i := 1 to 8 do
4154: LD_ADDR_VAR 0 2
4158: PUSH
4159: DOUBLE
4160: LD_INT 1
4162: DEC
4163: ST_TO_ADDR
4164: LD_INT 8
4166: PUSH
4167: FOR_TO
4168: IFFALSE 4225
// begin if multi_sides [ i ] then
4170: LD_EXP 7
4174: PUSH
4175: LD_VAR 0 2
4179: ARRAY
4180: IFFALSE 4223
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4182: LD_ADDR_VAR 0 1
4186: PUSH
4187: LD_VAR 0 1
4191: PUSH
4192: LD_STRING #coop-points
4194: PUSH
4195: LD_VAR 0 2
4199: PUSH
4200: LD_VAR 0 2
4204: PUSH
4205: LD_EXP 30
4209: PUSH
4210: LD_VAR 0 2
4214: ARRAY
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: ADD
4222: ST_TO_ADDR
// end ; end ;
4223: GO 4167
4225: POP
4226: POP
// end ;
4227: LD_VAR 0 1
4231: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4232: LD_INT 0
4234: PPUSH
4235: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4236: LD_ADDR_EXP 30
4240: PUSH
4241: LD_INT 0
4243: PUSH
4244: LD_INT 0
4246: PUSH
4247: LD_INT 0
4249: PUSH
4250: LD_INT 0
4252: PUSH
4253: LD_INT 0
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4275: LD_ADDR_EXP 31
4279: PUSH
4280: EMPTY
4281: ST_TO_ADDR
// end ;
4282: LD_VAR 0 1
4286: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4287: LD_INT 0
4289: PPUSH
// if not multi_points or not side or side > 8 then
4290: LD_EXP 30
4294: NOT
4295: PUSH
4296: LD_VAR 0 1
4300: NOT
4301: OR
4302: PUSH
4303: LD_VAR 0 1
4307: PUSH
4308: LD_INT 8
4310: GREATER
4311: OR
4312: IFFALSE 4316
// exit ;
4314: GO 4353
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4316: LD_ADDR_EXP 30
4320: PUSH
4321: LD_EXP 30
4325: PPUSH
4326: LD_VAR 0 1
4330: PPUSH
4331: LD_EXP 30
4335: PUSH
4336: LD_VAR 0 1
4340: ARRAY
4341: PUSH
4342: LD_VAR 0 2
4346: PLUS
4347: PPUSH
4348: CALL_OW 1
4352: ST_TO_ADDR
// end ;
4353: LD_VAR 0 3
4357: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4358: LD_INT 0
4360: PPUSH
// if not multi_points or not side or side > 8 then
4361: LD_EXP 30
4365: NOT
4366: PUSH
4367: LD_VAR 0 1
4371: NOT
4372: OR
4373: PUSH
4374: LD_VAR 0 1
4378: PUSH
4379: LD_INT 8
4381: GREATER
4382: OR
4383: IFFALSE 4387
// exit ;
4385: GO 4403
// result := multi_points [ side ] ;
4387: LD_ADDR_VAR 0 2
4391: PUSH
4392: LD_EXP 30
4396: PUSH
4397: LD_VAR 0 1
4401: ARRAY
4402: ST_TO_ADDR
// end ;
4403: LD_VAR 0 2
4407: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4408: LD_INT 0
4410: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4411: LD_ADDR_EXP 31
4415: PUSH
4416: LD_EXP 31
4420: PPUSH
4421: LD_EXP 31
4425: PUSH
4426: LD_INT 1
4428: PLUS
4429: PPUSH
4430: LD_VAR 0 1
4434: PPUSH
4435: CALL_OW 1
4439: ST_TO_ADDR
// end ;
4440: LD_VAR 0 2
4444: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4445: LD_INT 0
4447: PPUSH
// if not id then
4448: LD_VAR 0 1
4452: NOT
4453: IFFALSE 4457
// exit ;
4455: GO 4473
// result := multi_points_conditions [ id ] ;
4457: LD_ADDR_VAR 0 2
4461: PUSH
4462: LD_EXP 31
4466: PUSH
4467: LD_VAR 0 1
4471: ARRAY
4472: ST_TO_ADDR
// end ;
4473: LD_VAR 0 2
4477: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4478: LD_INT 0
4480: PPUSH
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
// players := [ ] ;
4485: LD_ADDR_VAR 0 3
4489: PUSH
4490: EMPTY
4491: ST_TO_ADDR
// for i = 1 to 8 do
4492: LD_ADDR_VAR 0 4
4496: PUSH
4497: DOUBLE
4498: LD_INT 1
4500: DEC
4501: ST_TO_ADDR
4502: LD_INT 8
4504: PUSH
4505: FOR_TO
4506: IFFALSE 4565
// begin if i = side then
4508: LD_VAR 0 4
4512: PUSH
4513: LD_VAR 0 1
4517: EQUAL
4518: IFFALSE 4522
// continue ;
4520: GO 4505
// if multi_sides [ i ] and not multi_loosers [ i ] then
4522: LD_EXP 7
4526: PUSH
4527: LD_VAR 0 4
4531: ARRAY
4532: PUSH
4533: LD_EXP 25
4537: PUSH
4538: LD_VAR 0 4
4542: ARRAY
4543: NOT
4544: AND
4545: IFFALSE 4563
// players := players ^ i ;
4547: LD_ADDR_VAR 0 3
4551: PUSH
4552: LD_VAR 0 3
4556: PUSH
4557: LD_VAR 0 4
4561: ADD
4562: ST_TO_ADDR
// end ;
4563: GO 4505
4565: POP
4566: POP
// if not players then
4567: LD_VAR 0 3
4571: NOT
4572: IFFALSE 4576
// exit ;
4574: GO 4843
// if players = 1 then
4576: LD_VAR 0 3
4580: PUSH
4581: LD_INT 1
4583: EQUAL
4584: IFFALSE 4645
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4586: LD_ADDR_VAR 0 4
4590: PUSH
4591: LD_INT 22
4593: PUSH
4594: LD_VAR 0 1
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 51
4605: PUSH
4606: EMPTY
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PPUSH
4613: CALL_OW 69
4617: PUSH
4618: FOR_IN
4619: IFFALSE 4641
// SetSide ( i , players [ 1 ] ) ;
4621: LD_VAR 0 4
4625: PPUSH
4626: LD_VAR 0 3
4630: PUSH
4631: LD_INT 1
4633: ARRAY
4634: PPUSH
4635: CALL_OW 235
4639: GO 4618
4641: POP
4642: POP
// end else
4643: GO 4843
// begin j := 1 ;
4645: LD_ADDR_VAR 0 5
4649: PUSH
4650: LD_INT 1
4652: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
4653: LD_ADDR_VAR 0 4
4657: PUSH
4658: LD_INT 22
4660: PUSH
4661: LD_VAR 0 1
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 2
4672: PUSH
4673: LD_INT 21
4675: PUSH
4676: LD_INT 1
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: PUSH
4683: LD_INT 51
4685: PUSH
4686: EMPTY
4687: LIST
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 21
4695: PUSH
4696: LD_INT 2
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PPUSH
4712: CALL_OW 69
4716: PUSH
4717: FOR_IN
4718: IFFALSE 4841
// begin SetSide ( i , players [ j ] ) ;
4720: LD_VAR 0 4
4724: PPUSH
4725: LD_VAR 0 3
4729: PUSH
4730: LD_VAR 0 5
4734: ARRAY
4735: PPUSH
4736: CALL_OW 235
// if IsDrivenBy ( i ) then
4740: LD_VAR 0 4
4744: PPUSH
4745: CALL_OW 311
4749: IFFALSE 4776
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
4751: LD_VAR 0 4
4755: PPUSH
4756: CALL_OW 311
4760: PPUSH
4761: LD_VAR 0 3
4765: PUSH
4766: LD_VAR 0 5
4770: ARRAY
4771: PPUSH
4772: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
4776: LD_VAR 0 4
4780: PPUSH
4781: CALL_OW 310
4785: PPUSH
4786: CALL_OW 247
4790: PUSH
4791: LD_INT 3
4793: EQUAL
4794: IFFALSE 4805
// ComExitBuilding ( i ) ;
4796: LD_VAR 0 4
4800: PPUSH
4801: CALL_OW 122
// j := j + 1 ;
4805: LD_ADDR_VAR 0 5
4809: PUSH
4810: LD_VAR 0 5
4814: PUSH
4815: LD_INT 1
4817: PLUS
4818: ST_TO_ADDR
// if j > players then
4819: LD_VAR 0 5
4823: PUSH
4824: LD_VAR 0 3
4828: GREATER
4829: IFFALSE 4839
// j := 1 ;
4831: LD_ADDR_VAR 0 5
4835: PUSH
4836: LD_INT 1
4838: ST_TO_ADDR
// end ;
4839: GO 4717
4841: POP
4842: POP
// end ; end ;
4843: LD_VAR 0 2
4847: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
4848: LD_INT 0
4850: PPUSH
4851: PPUSH
4852: PPUSH
// i := 3 ;
4853: LD_ADDR_VAR 0 2
4857: PUSH
4858: LD_INT 3
4860: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
4861: LD_ADDR_VAR 0 3
4865: PUSH
4866: LD_INT 5
4868: PUSH
4869: LD_INT 10
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 120
4878: PUSH
4879: LD_INT 2
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 101
4888: PUSH
4889: LD_INT 8
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 27
4898: PUSH
4899: LD_INT 4
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
4912: LD_INT 4
4914: PPUSH
4915: LD_INT 5
4917: PPUSH
4918: LD_VAR 0 3
4922: PUSH
4923: LD_VAR 0 2
4927: ARRAY
4928: PUSH
4929: LD_INT 1
4931: ARRAY
4932: PPUSH
4933: LD_VAR 0 3
4937: PUSH
4938: LD_VAR 0 2
4942: ARRAY
4943: PUSH
4944: LD_INT 2
4946: ARRAY
4947: PPUSH
4948: LD_INT 0
4950: PPUSH
4951: CALL_OW 58
// end ;
4955: LD_VAR 0 1
4959: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
4960: LD_INT 0
4962: PPUSH
// if not side or side > 8 then
4963: LD_VAR 0 1
4967: NOT
4968: PUSH
4969: LD_VAR 0 1
4973: PUSH
4974: LD_INT 8
4976: GREATER
4977: OR
4978: IFFALSE 4982
// exit ;
4980: GO 4999
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
4982: LD_VAR 0 1
4986: PPUSH
4987: LD_INT 6
4989: PPUSH
4990: CALL 4445 0 1
4994: PPUSH
4995: CALL 4287 0 2
// end ;
4999: LD_VAR 0 2
5003: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5004: LD_INT 0
5006: PPUSH
// if not side or side > 8 then
5007: LD_VAR 0 1
5011: NOT
5012: PUSH
5013: LD_VAR 0 1
5017: PUSH
5018: LD_INT 8
5020: GREATER
5021: OR
5022: IFFALSE 5026
// exit ;
5024: GO 5043
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5026: LD_VAR 0 1
5030: PPUSH
5031: LD_INT 4
5033: PPUSH
5034: CALL 4445 0 1
5038: PPUSH
5039: CALL 4287 0 2
// end ;
5043: LD_VAR 0 2
5047: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5048: LD_INT 0
5050: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5051: LD_VAR 0 1
5055: NOT
5056: PUSH
5057: LD_VAR 0 1
5061: PUSH
5062: LD_INT 8
5064: GREATER
5065: OR
5066: PUSH
5067: LD_VAR 0 2
5071: PUSH
5072: LD_INT 2
5074: PUSH
5075: LD_INT 6
5077: PUSH
5078: LD_INT 36
5080: PUSH
5081: LD_INT 0
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: IN
5090: NOT
5091: OR
5092: IFFALSE 5096
// exit ;
5094: GO 5113
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5096: LD_VAR 0 1
5100: PPUSH
5101: LD_INT 3
5103: PPUSH
5104: CALL 4445 0 1
5108: PPUSH
5109: CALL 4287 0 2
// end ;
5113: LD_VAR 0 3
5117: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5118: LD_INT 0
5120: PPUSH
5121: PPUSH
// if not un then
5122: LD_VAR 0 1
5126: NOT
5127: IFFALSE 5131
// exit ;
5129: GO 5177
// if not points then
5131: LD_VAR 0 3
5135: NOT
5136: IFFALSE 5153
// gained_points := Multiplayer_GetCondition ( 1 ) else
5138: LD_ADDR_VAR 0 5
5142: PUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL 4445 0 1
5150: ST_TO_ADDR
5151: GO 5163
// gained_points := points ;
5153: LD_ADDR_VAR 0 5
5157: PUSH
5158: LD_VAR 0 3
5162: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5163: LD_VAR 0 2
5167: PPUSH
5168: LD_VAR 0 5
5172: PPUSH
5173: CALL 4287 0 2
5177: LD_VAR 0 4
5181: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5182: LD_INT 0
5184: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5185: LD_VAR 0 1
5189: PPUSH
5190: LD_INT 2
5192: PPUSH
5193: CALL 4445 0 1
5197: PPUSH
5198: CALL 4287 0 2
// end ; end_of_file
5202: LD_VAR 0 2
5206: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp ; export Saliba , Gensher , Shariff ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , techs , fac ; begin
5207: LD_INT 0
5209: PPUSH
5210: PPUSH
5211: PPUSH
5212: PPUSH
5213: PPUSH
5214: PPUSH
5215: PPUSH
5216: PPUSH
5217: PPUSH
5218: PPUSH
// side_bot := side ;
5219: LD_ADDR_EXP 3
5223: PUSH
5224: LD_VAR 0 1
5228: ST_TO_ADDR
// techs := [ tech_ApeAgres , tech_ApeBrain , tech_ApeNeural , tech_StimDrugs , tech_Bio1 , tech_Bio2 , tech_Weap3 , tech_RemCharge , tech_Rocket , tech_SibEng , tech_SibImplosion , tech_Sib2 ] ;
5229: LD_ADDR_VAR 0 10
5233: PUSH
5234: LD_INT 11
5236: PUSH
5237: LD_INT 4
5239: PUSH
5240: LD_INT 3
5242: PUSH
5243: LD_INT 5
5245: PUSH
5246: LD_INT 66
5248: PUSH
5249: LD_INT 67
5251: PUSH
5252: LD_INT 53
5254: PUSH
5255: LD_INT 18
5257: PUSH
5258: LD_INT 40
5260: PUSH
5261: LD_INT 22
5263: PUSH
5264: LD_INT 72
5266: PUSH
5267: LD_INT 55
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: ST_TO_ADDR
// for i in techs do
5284: LD_ADDR_VAR 0 3
5288: PUSH
5289: LD_VAR 0 10
5293: PUSH
5294: FOR_IN
5295: IFFALSE 5316
// SetTech ( i , side , state_researched ) ;
5297: LD_VAR 0 3
5301: PPUSH
5302: LD_VAR 0 1
5306: PPUSH
5307: LD_INT 2
5309: PPUSH
5310: CALL_OW 322
5314: GO 5294
5316: POP
5317: POP
// InitScriptBases ;
5318: CALL 7257 0 0
// skill := [ 5 , 7 , 10 ] [ Difficulty ] ;
5322: LD_ADDR_VAR 0 8
5326: PUSH
5327: LD_INT 5
5329: PUSH
5330: LD_INT 7
5332: PUSH
5333: LD_INT 10
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: LIST
5340: PUSH
5341: LD_OWVAR 67
5345: ARRAY
5346: ST_TO_ADDR
// uc_side := side ;
5347: LD_ADDR_OWVAR 20
5351: PUSH
5352: LD_VAR 0 1
5356: ST_TO_ADDR
// uc_nation := 2 ;
5357: LD_ADDR_OWVAR 21
5361: PUSH
5362: LD_INT 2
5364: ST_TO_ADDR
// ar_force_north := PrepareBase ( ar_dep_n , area_base_north , dammam , skill , [ 10000 , 1000 , 900 ] , [ 12 , 4 , - 1 , 4 ] ) ;
5365: LD_ADDR_EXP 34
5369: PUSH
5370: LD_INT 94
5372: PPUSH
5373: LD_INT 35
5375: PPUSH
5376: LD_STRING dammam
5378: PPUSH
5379: LD_VAR 0 8
5383: PPUSH
5384: LD_INT 10000
5386: PUSH
5387: LD_INT 1000
5389: PUSH
5390: LD_INT 900
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: PPUSH
5398: LD_INT 12
5400: PUSH
5401: LD_INT 4
5403: PUSH
5404: LD_INT 1
5406: NEG
5407: PUSH
5408: LD_INT 4
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: PPUSH
5417: CALL 25201 0 6
5421: ST_TO_ADDR
// ar_force_north2 := PrepareBase ( ar_dep_n2 , area_base_north2 ,  , skill , [ 500 , 130 , 0 ] , [ 16 , 4 , 3 , 1 ] ) ;
5422: LD_ADDR_EXP 35
5426: PUSH
5427: LD_INT 122
5429: PPUSH
5430: LD_INT 38
5432: PPUSH
5433: LD_STRING 
5435: PPUSH
5436: LD_VAR 0 8
5440: PPUSH
5441: LD_INT 500
5443: PUSH
5444: LD_INT 130
5446: PUSH
5447: LD_INT 0
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: LIST
5454: PPUSH
5455: LD_INT 16
5457: PUSH
5458: LD_INT 4
5460: PUSH
5461: LD_INT 3
5463: PUSH
5464: LD_INT 1
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: PPUSH
5473: CALL 25201 0 6
5477: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , area_base_west , jeddah , skill , [ 2100 , 300 , 10 ] , [ 12 , 4 , 3 , 2 ] ) ;
5478: LD_ADDR_EXP 32
5482: PUSH
5483: LD_INT 45
5485: PPUSH
5486: LD_INT 34
5488: PPUSH
5489: LD_STRING jeddah
5491: PPUSH
5492: LD_VAR 0 8
5496: PPUSH
5497: LD_INT 2100
5499: PUSH
5500: LD_INT 300
5502: PUSH
5503: LD_INT 10
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: LIST
5510: PPUSH
5511: LD_INT 12
5513: PUSH
5514: LD_INT 4
5516: PUSH
5517: LD_INT 3
5519: PUSH
5520: LD_INT 2
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: PPUSH
5529: CALL 25201 0 6
5533: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , area_base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 8 , 2 , 3 , 1 ] ) ;
5534: LD_ADDR_EXP 33
5538: PUSH
5539: LD_INT 7
5541: PPUSH
5542: LD_INT 33
5544: PPUSH
5545: LD_STRING riyadh
5547: PPUSH
5548: LD_VAR 0 8
5552: PPUSH
5553: LD_INT 500
5555: PUSH
5556: LD_INT 60
5558: PUSH
5559: LD_INT 0
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: LIST
5566: PPUSH
5567: LD_INT 8
5569: PUSH
5570: LD_INT 2
5572: PUSH
5573: LD_INT 3
5575: PUSH
5576: LD_INT 1
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: PPUSH
5585: CALL 25201 0 6
5589: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , area_base_east ,  , skill , [ 500 , 50 , 0 ] , [ 11 , 2 , 3 , 1 ] ) ;
5590: LD_ADDR_EXP 36
5594: PUSH
5595: LD_INT 69
5597: PPUSH
5598: LD_INT 36
5600: PPUSH
5601: LD_STRING 
5603: PPUSH
5604: LD_VAR 0 8
5608: PPUSH
5609: LD_INT 500
5611: PUSH
5612: LD_INT 50
5614: PUSH
5615: LD_INT 0
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: LIST
5622: PPUSH
5623: LD_INT 11
5625: PUSH
5626: LD_INT 2
5628: PUSH
5629: LD_INT 3
5631: PUSH
5632: LD_INT 1
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: PPUSH
5641: CALL 25201 0 6
5645: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5646: LD_ADDR_OWVAR 37
5650: PUSH
5651: LD_INT 14
5653: ST_TO_ADDR
// vc_engine := engine_siberite ;
5654: LD_ADDR_OWVAR 39
5658: PUSH
5659: LD_INT 3
5661: ST_TO_ADDR
// vc_control := control_manual ;
5662: LD_ADDR_OWVAR 38
5666: PUSH
5667: LD_INT 1
5669: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5670: LD_ADDR_OWVAR 40
5674: PUSH
5675: LD_INT 31
5677: ST_TO_ADDR
// for i = 1 to 4 do
5678: LD_ADDR_VAR 0 3
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_INT 4
5690: PUSH
5691: FOR_TO
5692: IFFALSE 5841
// begin xy := [ [ 156 , 15 ] , [ 12 , 7 ] ] [ i mod 2 + 1 ] ;
5694: LD_ADDR_VAR 0 5
5698: PUSH
5699: LD_INT 156
5701: PUSH
5702: LD_INT 15
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PUSH
5709: LD_INT 12
5711: PUSH
5712: LD_INT 7
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: LD_VAR 0 3
5727: PUSH
5728: LD_INT 2
5730: MOD
5731: PUSH
5732: LD_INT 1
5734: PLUS
5735: ARRAY
5736: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
5737: LD_INT 0
5739: PPUSH
5740: LD_INT 3
5742: PPUSH
5743: LD_VAR 0 8
5747: PPUSH
5748: CALL_OW 380
// un := CreateVehicle ;
5752: LD_ADDR_VAR 0 6
5756: PUSH
5757: CALL_OW 45
5761: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
5762: LD_VAR 0 6
5766: PPUSH
5767: LD_INT 0
5769: PPUSH
5770: LD_INT 5
5772: PPUSH
5773: CALL_OW 12
5777: PPUSH
5778: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
5782: LD_VAR 0 6
5786: PPUSH
5787: LD_VAR 0 5
5791: PUSH
5792: LD_INT 1
5794: ARRAY
5795: PPUSH
5796: LD_VAR 0 5
5800: PUSH
5801: LD_INT 2
5803: ARRAY
5804: PPUSH
5805: LD_INT 6
5807: PPUSH
5808: LD_INT 0
5810: PPUSH
5811: CALL_OW 50
// un2 := CreateHuman ;
5815: LD_ADDR_VAR 0 7
5819: PUSH
5820: CALL_OW 44
5824: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
5825: LD_VAR 0 7
5829: PPUSH
5830: LD_VAR 0 6
5834: PPUSH
5835: CALL_OW 52
// end ;
5839: GO 5691
5841: POP
5842: POP
// for i in FilterAllUnits ( [ [ f_side , side_bot ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
5843: LD_ADDR_VAR 0 3
5847: PUSH
5848: LD_INT 22
5850: PUSH
5851: LD_EXP 3
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 30
5862: PUSH
5863: LD_INT 31
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: LD_INT 58
5872: PUSH
5873: EMPTY
5874: LIST
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: LIST
5880: PPUSH
5881: CALL_OW 69
5885: PUSH
5886: FOR_IN
5887: IFFALSE 5999
// begin d := GetDir ( i ) ;
5889: LD_ADDR_VAR 0 4
5893: PUSH
5894: LD_VAR 0 3
5898: PPUSH
5899: CALL_OW 254
5903: ST_TO_ADDR
// if d < 3 then
5904: LD_VAR 0 4
5908: PUSH
5909: LD_INT 3
5911: LESS
5912: IFFALSE 5930
// d := d + 3 else
5914: LD_ADDR_VAR 0 4
5918: PUSH
5919: LD_VAR 0 4
5923: PUSH
5924: LD_INT 3
5926: PLUS
5927: ST_TO_ADDR
5928: GO 5944
// d := d - 3 ;
5930: LD_ADDR_VAR 0 4
5934: PUSH
5935: LD_VAR 0 4
5939: PUSH
5940: LD_INT 3
5942: MINUS
5943: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
5944: LD_INT 0
5946: PPUSH
5947: LD_INT 8
5949: PPUSH
5950: LD_VAR 0 8
5954: PPUSH
5955: CALL_OW 380
// un := CreateHuman ;
5959: LD_ADDR_VAR 0 6
5963: PUSH
5964: CALL_OW 44
5968: ST_TO_ADDR
// SetDir ( un , d ) ;
5969: LD_VAR 0 6
5973: PPUSH
5974: LD_VAR 0 4
5978: PPUSH
5979: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5983: LD_VAR 0 6
5987: PPUSH
5988: LD_VAR 0 3
5992: PPUSH
5993: CALL_OW 52
// end ;
5997: GO 5886
5999: POP
6000: POP
// ar_force_tmp := [ ] ;
6001: LD_ADDR_EXP 37
6005: PUSH
6006: EMPTY
6007: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
6008: LD_INT 1
6010: PPUSH
6011: LD_INT 1
6013: PPUSH
6014: LD_VAR 0 8
6018: PPUSH
6019: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6023: LD_ADDR_OWVAR 33
6027: PUSH
6028: LD_STRING SecondCharsGal
6030: ST_TO_ADDR
// hc_face_number := 4 ;
6031: LD_ADDR_OWVAR 34
6035: PUSH
6036: LD_INT 4
6038: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
6039: LD_ADDR_EXP 37
6043: PUSH
6044: LD_EXP 37
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: CALL_OW 44
6056: PPUSH
6057: CALL_OW 1
6061: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6062: LD_INT 2
6064: PPUSH
6065: LD_INT 4
6067: PPUSH
6068: LD_VAR 0 8
6072: PPUSH
6073: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6077: LD_ADDR_OWVAR 33
6081: PUSH
6082: LD_STRING SecondCharsGal
6084: ST_TO_ADDR
// hc_face_number := 15 ;
6085: LD_ADDR_OWVAR 34
6089: PUSH
6090: LD_INT 15
6092: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
6093: LD_ADDR_EXP 37
6097: PUSH
6098: LD_EXP 37
6102: PPUSH
6103: LD_INT 2
6105: PPUSH
6106: CALL_OW 44
6110: PPUSH
6111: CALL_OW 1
6115: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6116: LD_INT 2
6118: PPUSH
6119: LD_INT 4
6121: PPUSH
6122: LD_VAR 0 8
6126: PPUSH
6127: CALL_OW 380
// hc_gallery :=  ;
6131: LD_ADDR_OWVAR 33
6135: PUSH
6136: LD_STRING 
6138: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
6139: LD_ADDR_EXP 37
6143: PUSH
6144: LD_EXP 37
6148: PPUSH
6149: LD_INT 3
6151: PPUSH
6152: CALL_OW 44
6156: PPUSH
6157: CALL_OW 1
6161: ST_TO_ADDR
// hc_sex := sex_male ;
6162: LD_ADDR_OWVAR 27
6166: PUSH
6167: LD_INT 1
6169: ST_TO_ADDR
// hc_class = 11 ;
6170: LD_ADDR_OWVAR 28
6174: PUSH
6175: LD_INT 11
6177: ST_TO_ADDR
// hc_gallery = sandar ;
6178: LD_ADDR_OWVAR 33
6182: PUSH
6183: LD_STRING sandar
6185: ST_TO_ADDR
// hc_face_number = 33 ;
6186: LD_ADDR_OWVAR 34
6190: PUSH
6191: LD_INT 33
6193: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
6194: LD_ADDR_OWVAR 26
6198: PUSH
6199: LD_STRING Thabit Muhair Saliba
6201: ST_TO_ADDR
// hc_skills = [ 5 , 5 , 3 , 3 ] ;
6202: LD_ADDR_OWVAR 31
6206: PUSH
6207: LD_INT 5
6209: PUSH
6210: LD_INT 5
6212: PUSH
6213: LD_INT 3
6215: PUSH
6216: LD_INT 3
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: LIST
6223: LIST
6224: ST_TO_ADDR
// Saliba := CreateHuman ;
6225: LD_ADDR_EXP 39
6229: PUSH
6230: CALL_OW 44
6234: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
6235: LD_EXP 39
6239: PPUSH
6240: LD_INT 7
6242: PPUSH
6243: CALL_OW 52
// hc_name := Dietrich Gensher ;
6247: LD_ADDR_OWVAR 26
6251: PUSH
6252: LD_STRING Dietrich Gensher
6254: ST_TO_ADDR
// hc_class := 1 ;
6255: LD_ADDR_OWVAR 28
6259: PUSH
6260: LD_INT 1
6262: ST_TO_ADDR
// hc_gallery := sandar ;
6263: LD_ADDR_OWVAR 33
6267: PUSH
6268: LD_STRING sandar
6270: ST_TO_ADDR
// hc_face_number := 4 ;
6271: LD_ADDR_OWVAR 34
6275: PUSH
6276: LD_INT 4
6278: ST_TO_ADDR
// hc_skills := [ 10 , 6 , 5 , 4 ] ;
6279: LD_ADDR_OWVAR 31
6283: PUSH
6284: LD_INT 10
6286: PUSH
6287: LD_INT 6
6289: PUSH
6290: LD_INT 5
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: ST_TO_ADDR
// Gensher := CreateHuman ;
6302: LD_ADDR_EXP 40
6306: PUSH
6307: CALL_OW 44
6311: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_w ) ;
6312: LD_EXP 40
6316: PPUSH
6317: LD_INT 45
6319: PPUSH
6320: CALL_OW 52
// hc_name := Abdul Shariff ;
6324: LD_ADDR_OWVAR 26
6328: PUSH
6329: LD_STRING Abdul Shariff
6331: ST_TO_ADDR
// hc_class := 11 ;
6332: LD_ADDR_OWVAR 28
6336: PUSH
6337: LD_INT 11
6339: ST_TO_ADDR
// hc_gallery := sandar ;
6340: LD_ADDR_OWVAR 33
6344: PUSH
6345: LD_STRING sandar
6347: ST_TO_ADDR
// hc_face_number := 5 ;
6348: LD_ADDR_OWVAR 34
6352: PUSH
6353: LD_INT 5
6355: ST_TO_ADDR
// hc_skills := [ 6 , 5 , 3 , 3 ] ;
6356: LD_ADDR_OWVAR 31
6360: PUSH
6361: LD_INT 6
6363: PUSH
6364: LD_INT 5
6366: PUSH
6367: LD_INT 3
6369: PUSH
6370: LD_INT 3
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: ST_TO_ADDR
// Shariff := CreateHuman ;
6379: LD_ADDR_EXP 41
6383: PUSH
6384: CALL_OW 44
6388: ST_TO_ADDR
// PlaceHumanInUnit ( Shariff , ar_dep_n ) ;
6389: LD_EXP 41
6393: PPUSH
6394: LD_INT 94
6396: PPUSH
6397: CALL_OW 52
// InitHc ;
6401: CALL_OW 19
// for d := 1 to 5 do
6405: LD_ADDR_VAR 0 4
6409: PUSH
6410: DOUBLE
6411: LD_INT 1
6413: DEC
6414: ST_TO_ADDR
6415: LD_INT 5
6417: PUSH
6418: FOR_TO
6419: IFFALSE 6903
// begin fac := FilterUnitsInArea ( arAreas [ d ] , [ f_btype , b_factory ] ) ;
6421: LD_ADDR_VAR 0 11
6425: PUSH
6426: LD_EXP 49
6430: PUSH
6431: LD_VAR 0 4
6435: ARRAY
6436: PPUSH
6437: LD_INT 30
6439: PUSH
6440: LD_INT 3
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PPUSH
6447: CALL_OW 70
6451: ST_TO_ADDR
// if fac then
6452: LD_VAR 0 11
6456: IFFALSE 6489
// arFactories := Replace ( arFactories , d , fac [ 1 ] ) else
6458: LD_ADDR_EXP 48
6462: PUSH
6463: LD_EXP 48
6467: PPUSH
6468: LD_VAR 0 4
6472: PPUSH
6473: LD_VAR 0 11
6477: PUSH
6478: LD_INT 1
6480: ARRAY
6481: PPUSH
6482: CALL_OW 1
6486: ST_TO_ADDR
6487: GO 6512
// arFactories := Replace ( arFactories , d , 0 ) ;
6489: LD_ADDR_EXP 48
6493: PUSH
6494: LD_EXP 48
6498: PPUSH
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 0
6506: PPUSH
6507: CALL_OW 1
6511: ST_TO_ADDR
// for i := 1 to 2 do
6512: LD_ADDR_VAR 0 3
6516: PUSH
6517: DOUBLE
6518: LD_INT 1
6520: DEC
6521: ST_TO_ADDR
6522: LD_INT 2
6524: PUSH
6525: FOR_TO
6526: IFFALSE 6669
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_remote , ar_crane , 100 ) ;
6528: LD_INT 14
6530: PPUSH
6531: LD_INT 3
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: LD_INT 88
6539: PPUSH
6540: LD_INT 100
6542: PPUSH
6543: CALL 21380 0 5
// un := CreateVehicle ;
6547: LD_ADDR_VAR 0 6
6551: PUSH
6552: CALL_OW 45
6556: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6557: LD_ADDR_EXP 45
6561: PUSH
6562: LD_EXP 45
6566: PPUSH
6567: LD_EXP 45
6571: PUSH
6572: LD_INT 1
6574: PLUS
6575: PPUSH
6576: LD_VAR 0 4
6580: PUSH
6581: LD_VAR 0 6
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PPUSH
6590: CALL_OW 1
6594: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6595: LD_VAR 0 6
6599: PPUSH
6600: LD_INT 0
6602: PPUSH
6603: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6607: LD_VAR 0 6
6611: PPUSH
6612: LD_INT 0
6614: PPUSH
6615: LD_INT 5
6617: PPUSH
6618: CALL_OW 12
6622: PPUSH
6623: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6627: LD_VAR 0 6
6631: PPUSH
6632: LD_INT 24
6634: PUSH
6635: LD_INT 20
6637: PUSH
6638: LD_INT 21
6640: PUSH
6641: LD_INT 22
6643: PUSH
6644: LD_INT 46
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PUSH
6654: LD_VAR 0 4
6658: ARRAY
6659: PPUSH
6660: LD_INT 0
6662: PPUSH
6663: CALL_OW 49
// end ;
6667: GO 6525
6669: POP
6670: POP
// for i := 1 to 4 do
6671: LD_ADDR_VAR 0 3
6675: PUSH
6676: DOUBLE
6677: LD_INT 1
6679: DEC
6680: ST_TO_ADDR
6681: LD_INT 4
6683: PUSH
6684: FOR_TO
6685: IFFALSE 6899
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_siberite , engine_solar ] [ rand ( 1 , 3 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
6687: LD_INT 14
6689: PPUSH
6690: LD_INT 3
6692: PUSH
6693: LD_INT 3
6695: PUSH
6696: LD_INT 2
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 1
6706: PPUSH
6707: LD_INT 3
6709: PPUSH
6710: CALL_OW 12
6714: ARRAY
6715: PPUSH
6716: LD_INT 1
6718: PUSH
6719: LD_INT 5
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 1
6728: PPUSH
6729: LD_INT 2
6731: PPUSH
6732: CALL_OW 12
6736: ARRAY
6737: PPUSH
6738: LD_INT 25
6740: PUSH
6741: LD_INT 27
6743: PUSH
6744: LD_INT 26
6746: PUSH
6747: LD_INT 28
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: PUSH
6756: LD_VAR 0 3
6760: PUSH
6761: LD_INT 4
6763: MOD
6764: PUSH
6765: LD_INT 1
6767: PLUS
6768: ARRAY
6769: PPUSH
6770: LD_INT 100
6772: PPUSH
6773: CALL 21380 0 5
// un := CreateVehicle ;
6777: LD_ADDR_VAR 0 6
6781: PUSH
6782: CALL_OW 45
6786: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6787: LD_ADDR_EXP 45
6791: PUSH
6792: LD_EXP 45
6796: PPUSH
6797: LD_EXP 45
6801: PUSH
6802: LD_INT 1
6804: PLUS
6805: PPUSH
6806: LD_VAR 0 4
6810: PUSH
6811: LD_VAR 0 6
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PPUSH
6820: CALL_OW 1
6824: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6825: LD_VAR 0 6
6829: PPUSH
6830: LD_INT 0
6832: PPUSH
6833: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6837: LD_VAR 0 6
6841: PPUSH
6842: LD_INT 0
6844: PPUSH
6845: LD_INT 5
6847: PPUSH
6848: CALL_OW 12
6852: PPUSH
6853: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6857: LD_VAR 0 6
6861: PPUSH
6862: LD_INT 24
6864: PUSH
6865: LD_INT 20
6867: PUSH
6868: LD_INT 21
6870: PUSH
6871: LD_INT 22
6873: PUSH
6874: LD_INT 46
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: PUSH
6884: LD_VAR 0 4
6888: ARRAY
6889: PPUSH
6890: LD_INT 0
6892: PPUSH
6893: CALL_OW 49
// end ;
6897: GO 6684
6899: POP
6900: POP
// end ;
6901: GO 6418
6903: POP
6904: POP
// InitHc ;
6905: CALL_OW 19
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
6909: LD_ADDR_VAR 0 9
6913: PUSH
6914: LD_INT 22
6916: PUSH
6917: LD_INT 2
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 69
6928: ST_TO_ADDR
// if tmp and side <> 2 then
6929: LD_VAR 0 9
6933: PUSH
6934: LD_VAR 0 1
6938: PUSH
6939: LD_INT 2
6941: NONEQUAL
6942: AND
6943: IFFALSE 6976
// begin for i in tmp do
6945: LD_ADDR_VAR 0 3
6949: PUSH
6950: LD_VAR 0 9
6954: PUSH
6955: FOR_IN
6956: IFFALSE 6974
// SetSide ( i , side ) ;
6958: LD_VAR 0 3
6962: PPUSH
6963: LD_VAR 0 1
6967: PPUSH
6968: CALL_OW 235
6972: GO 6955
6974: POP
6975: POP
// end ; end ;
6976: LD_VAR 0 2
6980: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
6981: LD_INT 0
6983: PPUSH
6984: PPUSH
6985: PPUSH
6986: PPUSH
// tmp := AreaToList ( area , 0 ) ;
6987: LD_ADDR_VAR 0 5
6991: PUSH
6992: LD_VAR 0 1
6996: PPUSH
6997: LD_INT 0
6999: PPUSH
7000: CALL_OW 517
7004: ST_TO_ADDR
// if not tmp then
7005: LD_VAR 0 5
7009: NOT
7010: IFFALSE 7014
// exit ;
7012: GO 7252
// for i := 1 to n do
7014: LD_ADDR_VAR 0 4
7018: PUSH
7019: DOUBLE
7020: LD_INT 1
7022: DEC
7023: ST_TO_ADDR
7024: LD_VAR 0 2
7028: PUSH
7029: FOR_TO
7030: IFFALSE 7250
// begin r := rand ( 1 , tmp [ 1 ] ) ;
7032: LD_ADDR_VAR 0 6
7036: PUSH
7037: LD_INT 1
7039: PPUSH
7040: LD_VAR 0 5
7044: PUSH
7045: LD_INT 1
7047: ARRAY
7048: PPUSH
7049: CALL_OW 12
7053: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , side_bot , 0 ) ;
7054: LD_VAR 0 5
7058: PUSH
7059: LD_INT 1
7061: ARRAY
7062: PUSH
7063: LD_VAR 0 6
7067: ARRAY
7068: PPUSH
7069: LD_VAR 0 5
7073: PUSH
7074: LD_INT 2
7076: ARRAY
7077: PUSH
7078: LD_VAR 0 6
7082: ARRAY
7083: PPUSH
7084: LD_EXP 3
7088: PPUSH
7089: LD_INT 0
7091: PPUSH
7092: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
7096: LD_ADDR_EXP 51
7100: PUSH
7101: LD_EXP 51
7105: PPUSH
7106: LD_EXP 51
7110: PUSH
7111: LD_INT 1
7113: PLUS
7114: PPUSH
7115: LD_VAR 0 5
7119: PUSH
7120: LD_INT 1
7122: ARRAY
7123: PUSH
7124: LD_VAR 0 6
7128: ARRAY
7129: PPUSH
7130: CALL_OW 2
7134: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
7135: LD_ADDR_EXP 51
7139: PUSH
7140: LD_EXP 51
7144: PPUSH
7145: LD_EXP 51
7149: PUSH
7150: LD_INT 1
7152: PLUS
7153: PPUSH
7154: LD_VAR 0 5
7158: PUSH
7159: LD_INT 2
7161: ARRAY
7162: PUSH
7163: LD_VAR 0 6
7167: ARRAY
7168: PPUSH
7169: CALL_OW 2
7173: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
7174: LD_ADDR_VAR 0 5
7178: PUSH
7179: LD_VAR 0 5
7183: PPUSH
7184: LD_INT 1
7186: PPUSH
7187: LD_VAR 0 5
7191: PUSH
7192: LD_INT 1
7194: ARRAY
7195: PPUSH
7196: LD_VAR 0 6
7200: PPUSH
7201: CALL_OW 3
7205: PPUSH
7206: CALL_OW 1
7210: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
7211: LD_ADDR_VAR 0 5
7215: PUSH
7216: LD_VAR 0 5
7220: PPUSH
7221: LD_INT 2
7223: PPUSH
7224: LD_VAR 0 5
7228: PUSH
7229: LD_INT 2
7231: ARRAY
7232: PPUSH
7233: LD_VAR 0 6
7237: PPUSH
7238: CALL_OW 3
7242: PPUSH
7243: CALL_OW 1
7247: ST_TO_ADDR
// end ;
7248: GO 7029
7250: POP
7251: POP
// end ;
7252: LD_VAR 0 3
7256: RET
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arFactories , arAreas , arVehiclesCounter , arMinesList ; function InitScriptBases ; begin
7257: LD_INT 0
7259: PPUSH
// arTech := GetTechNation ( side_bot , nation_arabian , state_enabled ) ;
7260: LD_ADDR_EXP 42
7264: PUSH
7265: LD_EXP 3
7269: PPUSH
7270: LD_INT 2
7272: PPUSH
7273: LD_INT 1
7275: PPUSH
7276: CALL 16603 0 3
7280: ST_TO_ADDR
// arConstructList := [ ] ;
7281: LD_ADDR_EXP 43
7285: PUSH
7286: EMPTY
7287: ST_TO_ADDR
// arBuildings := [ ] ;
7288: LD_ADDR_EXP 44
7292: PUSH
7293: EMPTY
7294: ST_TO_ADDR
// arVehicles := [ ] ;
7295: LD_ADDR_EXP 45
7299: PUSH
7300: EMPTY
7301: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
7302: LD_ADDR_EXP 46
7306: PUSH
7307: EMPTY
7308: ST_TO_ADDR
// arDrivers := [ ] ;
7309: LD_ADDR_EXP 47
7313: PUSH
7314: EMPTY
7315: ST_TO_ADDR
// arFactories := [ ] ;
7316: LD_ADDR_EXP 48
7320: PUSH
7321: EMPTY
7322: ST_TO_ADDR
// arAreas := [ area_base_south , area_base_north , area_base_west , area_base_east , area_base_north2 ] ;
7323: LD_ADDR_EXP 49
7327: PUSH
7328: LD_INT 33
7330: PUSH
7331: LD_INT 35
7333: PUSH
7334: LD_INT 34
7336: PUSH
7337: LD_INT 36
7339: PUSH
7340: LD_INT 38
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: ST_TO_ADDR
// arVehiclesCounter := [ 6 , 6 , 6 , 6 , 2 ] ;
7350: LD_ADDR_EXP 50
7354: PUSH
7355: LD_INT 6
7357: PUSH
7358: LD_INT 6
7360: PUSH
7361: LD_INT 6
7363: PUSH
7364: LD_INT 6
7366: PUSH
7367: LD_INT 2
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: ST_TO_ADDR
// arMinesList := [ ] ;
7377: LD_ADDR_EXP 51
7381: PUSH
7382: EMPTY
7383: ST_TO_ADDR
// PlaceMines ( minefield_east , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
7384: LD_INT 1
7386: PPUSH
7387: LD_INT 7
7389: PUSH
7390: LD_INT 9
7392: PUSH
7393: LD_INT 11
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: LIST
7400: PUSH
7401: LD_OWVAR 67
7405: ARRAY
7406: PPUSH
7407: CALL 6981 0 2
// PlaceMines ( minefield_north , [ 7 , 9 , 9 ] [ Difficulty ] ) ;
7411: LD_INT 3
7413: PPUSH
7414: LD_INT 7
7416: PUSH
7417: LD_INT 9
7419: PUSH
7420: LD_INT 9
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: LD_OWVAR 67
7432: ARRAY
7433: PPUSH
7434: CALL 6981 0 2
// PlaceMines ( minefield_west , [ 6 , 8 , 12 ] [ Difficulty ] ) ;
7438: LD_INT 2
7440: PPUSH
7441: LD_INT 6
7443: PUSH
7444: LD_INT 8
7446: PUSH
7447: LD_INT 12
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: LIST
7454: PUSH
7455: LD_OWVAR 67
7459: ARRAY
7460: PPUSH
7461: CALL 6981 0 2
// PlaceMines ( minefield_north2 , [ 5 , 7 , 9 ] [ Difficulty ] ) ;
7465: LD_INT 39
7467: PPUSH
7468: LD_INT 5
7470: PUSH
7471: LD_INT 7
7473: PUSH
7474: LD_INT 9
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: LIST
7481: PUSH
7482: LD_OWVAR 67
7486: ARRAY
7487: PPUSH
7488: CALL 6981 0 2
// PlaceMines ( minefield_south , [ 4 , 6 , 8 ] [ Difficulty ] ) ;
7492: LD_INT 25
7494: PPUSH
7495: LD_INT 4
7497: PUSH
7498: LD_INT 6
7500: PUSH
7501: LD_INT 8
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: PUSH
7509: LD_OWVAR 67
7513: ARRAY
7514: PPUSH
7515: CALL 6981 0 2
// PlaceMines ( minefield_extra , [ 12 , 14 , 16 ] [ Difficulty ] ) ;
7519: LD_INT 41
7521: PPUSH
7522: LD_INT 12
7524: PUSH
7525: LD_INT 14
7527: PUSH
7528: LD_INT 16
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: LIST
7535: PUSH
7536: LD_OWVAR 67
7540: ARRAY
7541: PPUSH
7542: CALL 6981 0 2
// end ;
7546: LD_VAR 0 1
7550: RET
// function ArabianBaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
7551: LD_INT 0
7553: PPUSH
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
7558: PPUSH
7559: PPUSH
7560: PPUSH
7561: PPUSH
7562: PPUSH
7563: PPUSH
7564: PPUSH
7565: PPUSH
7566: PPUSH
7567: PPUSH
7568: PPUSH
7569: PPUSH
7570: PPUSH
7571: PPUSH
7572: PPUSH
7573: PPUSH
7574: PPUSH
7575: PPUSH
7576: PPUSH
7577: PPUSH
7578: PPUSH
7579: PPUSH
// enable ;
7580: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
7581: LD_ADDR_VAR 0 10
7585: PUSH
7586: LD_INT 81
7588: PUSH
7589: LD_VAR 0 1
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PPUSH
7598: CALL_OW 69
7602: ST_TO_ADDR
// if tmp then
7603: LD_VAR 0 10
7607: IFFALSE 7628
// enemySide := GetSide ( tmp [ 1 ] ) ;
7609: LD_ADDR_VAR 0 34
7613: PUSH
7614: LD_VAR 0 10
7618: PUSH
7619: LD_INT 1
7621: ARRAY
7622: PPUSH
7623: CALL_OW 255
7627: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7628: LD_ADDR_VAR 0 22
7632: PUSH
7633: LD_VAR 0 3
7637: PPUSH
7638: LD_INT 81
7640: PUSH
7641: LD_VAR 0 1
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PPUSH
7650: CALL_OW 70
7654: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
7655: LD_ADDR_VAR 0 23
7659: PUSH
7660: LD_VAR 0 4
7664: PPUSH
7665: LD_INT 81
7667: PUSH
7668: LD_VAR 0 1
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PPUSH
7677: CALL_OW 70
7681: ST_TO_ADDR
// vehicles := CheckByIndex ( arVehicles , 1 , base , 2 ) ;
7682: LD_ADDR_VAR 0 26
7686: PUSH
7687: LD_EXP 45
7691: PPUSH
7692: LD_INT 1
7694: PPUSH
7695: LD_VAR 0 2
7699: PPUSH
7700: LD_INT 2
7702: PPUSH
7703: CALL 58761 0 4
7707: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7708: LD_ADDR_VAR 0 32
7712: PUSH
7713: LD_VAR 0 3
7717: PPUSH
7718: LD_INT 22
7720: PUSH
7721: LD_VAR 0 1
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 2
7732: PUSH
7733: LD_INT 30
7735: PUSH
7736: LD_INT 0
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PUSH
7743: LD_INT 30
7745: PUSH
7746: LD_INT 1
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: LIST
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PPUSH
7762: CALL_OW 70
7766: ST_TO_ADDR
// if depot then
7767: LD_VAR 0 32
7771: IFFALSE 7787
// depot := depot [ 1 ] ;
7773: LD_ADDR_VAR 0 32
7777: PUSH
7778: LD_VAR 0 32
7782: PUSH
7783: LD_INT 1
7785: ARRAY
7786: ST_TO_ADDR
// if arTech then
7787: LD_EXP 42
7791: IFFALSE 7952
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7793: LD_ADDR_VAR 0 12
7797: PUSH
7798: LD_VAR 0 3
7802: PPUSH
7803: LD_INT 22
7805: PUSH
7806: LD_VAR 0 1
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 50
7817: PUSH
7818: EMPTY
7819: LIST
7820: PUSH
7821: LD_INT 2
7823: PUSH
7824: LD_INT 30
7826: PUSH
7827: LD_INT 6
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: LD_INT 30
7836: PUSH
7837: LD_INT 7
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 30
7846: PUSH
7847: LD_INT 8
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: PPUSH
7865: CALL_OW 70
7869: ST_TO_ADDR
// if lab then
7870: LD_VAR 0 12
7874: IFFALSE 7952
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7876: LD_VAR 0 12
7880: PUSH
7881: LD_INT 1
7883: ARRAY
7884: PPUSH
7885: CALL_OW 461
7889: PUSH
7890: LD_INT 2
7892: EQUAL
7893: IFFALSE 7952
// begin for i in arTech do
7895: LD_ADDR_VAR 0 9
7899: PUSH
7900: LD_EXP 42
7904: PUSH
7905: FOR_IN
7906: IFFALSE 7950
// if CanBeResearched ( lab [ 1 ] , i ) then
7908: LD_VAR 0 12
7912: PUSH
7913: LD_INT 1
7915: ARRAY
7916: PPUSH
7917: LD_VAR 0 9
7921: PPUSH
7922: CALL_OW 430
7926: IFFALSE 7948
// begin ComResearch ( lab [ 1 ] , i ) ;
7928: LD_VAR 0 12
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PPUSH
7937: LD_VAR 0 9
7941: PPUSH
7942: CALL_OW 124
// break ;
7946: GO 7950
// end ;
7948: GO 7905
7950: POP
7951: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7952: LD_ADDR_VAR 0 29
7956: PUSH
7957: LD_VAR 0 3
7961: PPUSH
7962: LD_INT 22
7964: PUSH
7965: LD_VAR 0 1
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 30
7976: PUSH
7977: LD_INT 3
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: LD_INT 50
7986: PUSH
7987: EMPTY
7988: LIST
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: PPUSH
7995: CALL_OW 70
7999: ST_TO_ADDR
// if fac then
8000: LD_VAR 0 29
8004: IFFALSE 8393
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
8006: LD_VAR 0 29
8010: PUSH
8011: LD_INT 1
8013: ARRAY
8014: PPUSH
8015: CALL_OW 461
8019: PUSH
8020: LD_INT 2
8022: EQUAL
8023: IFFALSE 8393
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
8025: LD_ADDR_VAR 0 30
8029: PUSH
8030: LD_VAR 0 3
8034: PPUSH
8035: LD_INT 2
8037: PUSH
8038: LD_INT 30
8040: PUSH
8041: LD_INT 32
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 30
8050: PUSH
8051: LD_INT 33
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: LIST
8062: PUSH
8063: LD_INT 35
8065: PUSH
8066: LD_INT 0
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PPUSH
8077: CALL_OW 70
8081: ST_TO_ADDR
// if emptyTowers then
8082: LD_VAR 0 30
8086: IFFALSE 8136
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
8088: LD_ADDR_VAR 0 31
8092: PUSH
8093: LD_VAR 0 30
8097: PUSH
8098: LD_INT 1
8100: ARRAY
8101: PPUSH
8102: LD_VAR 0 3
8106: PPUSH
8107: CALL 26887 0 2
8111: ST_TO_ADDR
// if weapon then
8112: LD_VAR 0 31
8116: IFFALSE 8136
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
8118: LD_VAR 0 30
8122: PUSH
8123: LD_INT 1
8125: ARRAY
8126: PPUSH
8127: LD_VAR 0 31
8131: PPUSH
8132: CALL_OW 148
// end ; if arConstructList then
8136: LD_EXP 43
8140: IFFALSE 8393
// for i := 1 to Count ( arConstructList ) do
8142: LD_ADDR_VAR 0 9
8146: PUSH
8147: DOUBLE
8148: LD_INT 1
8150: DEC
8151: ST_TO_ADDR
8152: LD_EXP 43
8156: PPUSH
8157: CALL 18642 0 1
8161: PUSH
8162: FOR_TO
8163: IFFALSE 8391
// begin if arConstructList [ i ] [ 1 ] = base then
8165: LD_EXP 43
8169: PUSH
8170: LD_VAR 0 9
8174: ARRAY
8175: PUSH
8176: LD_INT 1
8178: ARRAY
8179: PUSH
8180: LD_VAR 0 2
8184: EQUAL
8185: IFFALSE 8389
// if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) then
8187: LD_VAR 0 29
8191: PUSH
8192: LD_INT 1
8194: ARRAY
8195: PPUSH
8196: LD_EXP 43
8200: PUSH
8201: LD_VAR 0 9
8205: ARRAY
8206: PUSH
8207: LD_INT 2
8209: ARRAY
8210: PUSH
8211: LD_INT 1
8213: ARRAY
8214: PPUSH
8215: LD_EXP 43
8219: PUSH
8220: LD_VAR 0 9
8224: ARRAY
8225: PUSH
8226: LD_INT 2
8228: ARRAY
8229: PUSH
8230: LD_INT 2
8232: ARRAY
8233: PPUSH
8234: LD_EXP 43
8238: PUSH
8239: LD_VAR 0 9
8243: ARRAY
8244: PUSH
8245: LD_INT 2
8247: ARRAY
8248: PUSH
8249: LD_INT 3
8251: ARRAY
8252: PPUSH
8253: LD_EXP 43
8257: PUSH
8258: LD_VAR 0 9
8262: ARRAY
8263: PUSH
8264: LD_INT 2
8266: ARRAY
8267: PUSH
8268: LD_INT 4
8270: ARRAY
8271: PPUSH
8272: CALL_OW 448
8276: IFFALSE 8389
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) ;
8278: LD_VAR 0 29
8282: PUSH
8283: LD_INT 1
8285: ARRAY
8286: PPUSH
8287: LD_EXP 43
8291: PUSH
8292: LD_VAR 0 9
8296: ARRAY
8297: PUSH
8298: LD_INT 2
8300: ARRAY
8301: PUSH
8302: LD_INT 1
8304: ARRAY
8305: PPUSH
8306: LD_EXP 43
8310: PUSH
8311: LD_VAR 0 9
8315: ARRAY
8316: PUSH
8317: LD_INT 2
8319: ARRAY
8320: PUSH
8321: LD_INT 2
8323: ARRAY
8324: PPUSH
8325: LD_EXP 43
8329: PUSH
8330: LD_VAR 0 9
8334: ARRAY
8335: PUSH
8336: LD_INT 2
8338: ARRAY
8339: PUSH
8340: LD_INT 3
8342: ARRAY
8343: PPUSH
8344: LD_EXP 43
8348: PUSH
8349: LD_VAR 0 9
8353: ARRAY
8354: PUSH
8355: LD_INT 2
8357: ARRAY
8358: PUSH
8359: LD_INT 4
8361: ARRAY
8362: PPUSH
8363: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
8367: LD_ADDR_EXP 43
8371: PUSH
8372: LD_EXP 43
8376: PPUSH
8377: LD_VAR 0 9
8381: PPUSH
8382: CALL_OW 3
8386: ST_TO_ADDR
// break ;
8387: GO 8391
// end ; end ;
8389: GO 8162
8391: POP
8392: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8393: LD_ADDR_VAR 0 10
8397: PUSH
8398: LD_VAR 0 3
8402: PPUSH
8403: LD_INT 21
8405: PUSH
8406: LD_INT 3
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PUSH
8413: LD_INT 3
8415: PUSH
8416: LD_INT 57
8418: PUSH
8419: EMPTY
8420: LIST
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 3
8428: PUSH
8429: LD_INT 24
8431: PUSH
8432: LD_INT 1000
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: LIST
8447: PPUSH
8448: CALL_OW 70
8452: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
8453: LD_ADDR_VAR 0 17
8457: PUSH
8458: LD_VAR 0 3
8462: PPUSH
8463: CALL_OW 435
8467: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
8468: LD_ADDR_VAR 0 14
8472: PUSH
8473: LD_VAR 0 5
8477: PPUSH
8478: LD_INT 25
8480: PUSH
8481: LD_INT 3
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: LD_INT 50
8490: PUSH
8491: EMPTY
8492: LIST
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PPUSH
8498: CALL_OW 72
8502: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( arFactories [ base ] ) then
8503: LD_VAR 0 14
8507: PPUSH
8508: LD_INT 3
8510: PUSH
8511: LD_INT 120
8513: PUSH
8514: LD_INT 7
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PUSH
8525: LD_INT 3
8527: PUSH
8528: LD_INT 54
8530: PUSH
8531: EMPTY
8532: LIST
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PPUSH
8542: CALL_OW 72
8546: PUSH
8547: LD_EXP 48
8551: PUSH
8552: LD_VAR 0 2
8556: ARRAY
8557: PPUSH
8558: CALL_OW 302
8562: AND
8563: IFFALSE 8624
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , arFactories [ base ] ) ;
8565: LD_VAR 0 14
8569: PPUSH
8570: LD_INT 3
8572: PUSH
8573: LD_INT 120
8575: PUSH
8576: LD_INT 7
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PUSH
8587: LD_INT 3
8589: PUSH
8590: LD_INT 54
8592: PUSH
8593: EMPTY
8594: LIST
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PPUSH
8604: CALL_OW 72
8608: PPUSH
8609: LD_EXP 48
8613: PUSH
8614: LD_VAR 0 2
8618: ARRAY
8619: PPUSH
8620: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
8624: LD_ADDR_VAR 0 18
8628: PUSH
8629: LD_VAR 0 5
8633: PPUSH
8634: LD_INT 25
8636: PUSH
8637: LD_INT 4
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 50
8646: PUSH
8647: EMPTY
8648: LIST
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PPUSH
8654: CALL_OW 72
8658: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
8659: LD_ADDR_VAR 0 12
8663: PUSH
8664: LD_VAR 0 3
8668: PPUSH
8669: LD_INT 2
8671: PUSH
8672: LD_INT 30
8674: PUSH
8675: LD_INT 6
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PUSH
8682: LD_INT 30
8684: PUSH
8685: LD_INT 7
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PUSH
8692: LD_INT 30
8694: PUSH
8695: LD_INT 8
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: PPUSH
8708: CALL_OW 70
8712: ST_TO_ADDR
// if sci then
8713: LD_VAR 0 18
8717: IFFALSE 8878
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
8719: LD_ADDR_VAR 0 20
8723: PUSH
8724: LD_VAR 0 5
8728: PPUSH
8729: LD_INT 95
8731: PUSH
8732: LD_VAR 0 3
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: LD_INT 120
8743: PUSH
8744: LD_INT 1
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PPUSH
8755: CALL_OW 72
8759: ST_TO_ADDR
// if hurtUnits then
8760: LD_VAR 0 20
8764: IFFALSE 8825
// begin for i in sci do
8766: LD_ADDR_VAR 0 9
8770: PUSH
8771: LD_VAR 0 18
8775: PUSH
8776: FOR_IN
8777: IFFALSE 8821
// if IsInUnit ( i ) then
8779: LD_VAR 0 9
8783: PPUSH
8784: CALL_OW 310
8788: IFFALSE 8801
// ComExitBuilding ( i ) else
8790: LD_VAR 0 9
8794: PPUSH
8795: CALL_OW 122
8799: GO 8819
// ComHeal ( i , hurtUnits [ 1 ] ) ;
8801: LD_VAR 0 9
8805: PPUSH
8806: LD_VAR 0 20
8810: PUSH
8811: LD_INT 1
8813: ARRAY
8814: PPUSH
8815: CALL_OW 128
8819: GO 8776
8821: POP
8822: POP
// end else
8823: GO 8878
// if lab then
8825: LD_VAR 0 12
8829: IFFALSE 8878
// begin for i in sci do
8831: LD_ADDR_VAR 0 9
8835: PUSH
8836: LD_VAR 0 18
8840: PUSH
8841: FOR_IN
8842: IFFALSE 8876
// if not IsInUnit ( i ) then
8844: LD_VAR 0 9
8848: PPUSH
8849: CALL_OW 310
8853: NOT
8854: IFFALSE 8874
// ComEnterUnit ( i , lab [ 1 ] ) ;
8856: LD_VAR 0 9
8860: PPUSH
8861: LD_VAR 0 12
8865: PUSH
8866: LD_INT 1
8868: ARRAY
8869: PPUSH
8870: CALL_OW 120
8874: GO 8841
8876: POP
8877: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8878: LD_ADDR_VAR 0 13
8882: PUSH
8883: LD_VAR 0 5
8887: PPUSH
8888: LD_INT 25
8890: PUSH
8891: LD_INT 2
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PPUSH
8898: CALL_OW 72
8902: ST_TO_ADDR
// buildingsToBuild := CheckByIndex ( arBuildings , 1 , base , 2 ) ;
8903: LD_ADDR_VAR 0 33
8907: PUSH
8908: LD_EXP 44
8912: PPUSH
8913: LD_INT 1
8915: PPUSH
8916: LD_VAR 0 2
8920: PPUSH
8921: LD_INT 2
8923: PPUSH
8924: CALL 58761 0 4
8928: ST_TO_ADDR
// if eng then
8929: LD_VAR 0 13
8933: IFFALSE 9767
// begin for i in eng do
8935: LD_ADDR_VAR 0 9
8939: PUSH
8940: LD_VAR 0 13
8944: PUSH
8945: FOR_IN
8946: IFFALSE 9765
// begin tag := GetTag ( i ) ;
8948: LD_ADDR_VAR 0 15
8952: PUSH
8953: LD_VAR 0 9
8957: PPUSH
8958: CALL_OW 110
8962: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
8963: LD_VAR 0 9
8967: PPUSH
8968: LD_VAR 0 4
8972: PPUSH
8973: CALL_OW 308
8977: IFFALSE 9008
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8979: LD_VAR 0 9
8983: PPUSH
8984: LD_VAR 0 7
8988: PUSH
8989: LD_INT 1
8991: ARRAY
8992: PPUSH
8993: LD_VAR 0 7
8997: PUSH
8998: LD_INT 2
9000: ARRAY
9001: PPUSH
9002: CALL_OW 111
// continue ;
9006: GO 8945
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
9008: LD_VAR 0 9
9012: PPUSH
9013: CALL_OW 256
9017: PUSH
9018: LD_INT 800
9020: LESS
9021: PUSH
9022: LD_VAR 0 15
9026: PUSH
9027: LD_INT 1
9029: NONEQUAL
9030: AND
9031: IFFALSE 9081
// begin SetTag ( i , tHeal ) ;
9033: LD_VAR 0 9
9037: PPUSH
9038: LD_INT 1
9040: PPUSH
9041: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9045: LD_VAR 0 9
9049: PPUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: ARRAY
9058: PPUSH
9059: LD_VAR 0 6
9063: PUSH
9064: LD_INT 2
9066: ARRAY
9067: PPUSH
9068: CALL_OW 111
// AddComHold ( i ) ;
9072: LD_VAR 0 9
9076: PPUSH
9077: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
9081: LD_VAR 0 15
9085: PUSH
9086: LD_INT 1
9088: EQUAL
9089: PUSH
9090: LD_VAR 0 9
9094: PPUSH
9095: CALL_OW 256
9099: PUSH
9100: LD_INT 1000
9102: EQUAL
9103: AND
9104: IFFALSE 9118
// SetTag ( i , 0 ) ;
9106: LD_VAR 0 9
9110: PPUSH
9111: LD_INT 0
9113: PPUSH
9114: CALL_OW 109
// if not tag then
9118: LD_VAR 0 15
9122: NOT
9123: IFFALSE 9290
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9125: LD_ADDR_VAR 0 11
9129: PUSH
9130: LD_VAR 0 3
9134: PPUSH
9135: LD_INT 57
9137: PUSH
9138: EMPTY
9139: LIST
9140: PPUSH
9141: CALL_OW 70
9145: ST_TO_ADDR
// if undone then
9146: LD_VAR 0 11
9150: IFFALSE 9172
// begin ComComplete ( i , undone [ 1 ] ) ;
9152: LD_VAR 0 9
9156: PPUSH
9157: LD_VAR 0 11
9161: PUSH
9162: LD_INT 1
9164: ARRAY
9165: PPUSH
9166: CALL 24740 0 2
// continue ;
9170: GO 8945
// end ; if cr or tmp or buildingsToBuild then
9172: LD_VAR 0 17
9176: PUSH
9177: LD_VAR 0 10
9181: OR
9182: PUSH
9183: LD_VAR 0 33
9187: OR
9188: IFFALSE 9264
// begin if IsInUnit ( i ) then
9190: LD_VAR 0 9
9194: PPUSH
9195: CALL_OW 310
9199: IFFALSE 9210
// ComExitBuilding ( i ) ;
9201: LD_VAR 0 9
9205: PPUSH
9206: CALL_OW 122
// if tmp then
9210: LD_VAR 0 10
9214: IFFALSE 9230
// SetTag ( i , tRepair ) else
9216: LD_VAR 0 9
9220: PPUSH
9221: LD_INT 3
9223: PPUSH
9224: CALL_OW 109
9228: GO 9262
// if cr then
9230: LD_VAR 0 17
9234: IFFALSE 9250
// SetTag ( i , tCrates ) else
9236: LD_VAR 0 9
9240: PPUSH
9241: LD_INT 2
9243: PPUSH
9244: CALL_OW 109
9248: GO 9262
// SetTag ( i , tBuild ) ;
9250: LD_VAR 0 9
9254: PPUSH
9255: LD_INT 5
9257: PPUSH
9258: CALL_OW 109
// end else
9262: GO 9290
// if not IsInUnit ( i ) then
9264: LD_VAR 0 9
9268: PPUSH
9269: CALL_OW 310
9273: NOT
9274: IFFALSE 9290
// ComEnterUnit ( i , depot ) ;
9276: LD_VAR 0 9
9280: PPUSH
9281: LD_VAR 0 32
9285: PPUSH
9286: CALL_OW 120
// end ; if tag = tRepair then
9290: LD_VAR 0 15
9294: PUSH
9295: LD_INT 3
9297: EQUAL
9298: IFFALSE 9404
// begin if IsInUnit ( i ) then
9300: LD_VAR 0 9
9304: PPUSH
9305: CALL_OW 310
9309: IFFALSE 9322
// begin ComExitBuilding ( i ) ;
9311: LD_VAR 0 9
9315: PPUSH
9316: CALL_OW 122
// continue ;
9320: GO 8945
// end ; if not tmp then
9322: LD_VAR 0 10
9326: NOT
9327: IFFALSE 9343
// begin SetTag ( i , 0 ) ;
9329: LD_VAR 0 9
9333: PPUSH
9334: LD_INT 0
9336: PPUSH
9337: CALL_OW 109
// continue ;
9341: GO 8945
// end ; if not HasTask ( i ) then
9343: LD_VAR 0 9
9347: PPUSH
9348: CALL_OW 314
9352: NOT
9353: IFFALSE 9373
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
9355: LD_VAR 0 9
9359: PPUSH
9360: LD_VAR 0 10
9364: PUSH
9365: LD_INT 1
9367: ARRAY
9368: PPUSH
9369: CALL_OW 130
// if not IsInArea ( i , area ) then
9373: LD_VAR 0 9
9377: PPUSH
9378: LD_VAR 0 3
9382: PPUSH
9383: CALL_OW 308
9387: NOT
9388: IFFALSE 9404
// ComMoveToArea ( i , area ) ;
9390: LD_VAR 0 9
9394: PPUSH
9395: LD_VAR 0 3
9399: PPUSH
9400: CALL_OW 113
// end ; if tag = tBuild then
9404: LD_VAR 0 15
9408: PUSH
9409: LD_INT 5
9411: EQUAL
9412: IFFALSE 9618
// begin if IsInUnit ( i ) then
9414: LD_VAR 0 9
9418: PPUSH
9419: CALL_OW 310
9423: IFFALSE 9436
// begin ComExitBuilding ( i ) ;
9425: LD_VAR 0 9
9429: PPUSH
9430: CALL_OW 122
// continue ;
9434: GO 8945
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
9436: LD_VAR 0 33
9440: NOT
9441: PUSH
9442: LD_VAR 0 22
9446: OR
9447: PUSH
9448: LD_VAR 0 23
9452: OR
9453: IFFALSE 9471
// begin SetTag ( i , 0 ) ;
9455: LD_VAR 0 9
9459: PPUSH
9460: LD_INT 0
9462: PPUSH
9463: CALL_OW 109
// continue ;
9467: GO 8945
// end else
9469: GO 9510
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
9471: LD_VAR 0 32
9475: PPUSH
9476: LD_VAR 0 33
9480: PUSH
9481: LD_INT 1
9483: ARRAY
9484: PUSH
9485: LD_INT 1
9487: ARRAY
9488: PPUSH
9489: CALL 58898 0 2
9493: NOT
9494: IFFALSE 9510
// begin SetTag ( i , 0 ) ;
9496: LD_VAR 0 9
9500: PPUSH
9501: LD_INT 0
9503: PPUSH
9504: CALL_OW 109
// continue ;
9508: GO 8945
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9510: LD_ADDR_VAR 0 11
9514: PUSH
9515: LD_VAR 0 3
9519: PPUSH
9520: LD_INT 57
9522: PUSH
9523: EMPTY
9524: LIST
9525: PPUSH
9526: CALL_OW 70
9530: ST_TO_ADDR
// if undone then
9531: LD_VAR 0 11
9535: IFFALSE 9557
// begin ComComplete ( i , undone [ 1 ] ) ;
9537: LD_VAR 0 9
9541: PPUSH
9542: LD_VAR 0 11
9546: PUSH
9547: LD_INT 1
9549: ARRAY
9550: PPUSH
9551: CALL 24740 0 2
// continue ;
9555: GO 8945
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
9557: LD_VAR 0 9
9561: PPUSH
9562: LD_VAR 0 33
9566: PUSH
9567: LD_INT 1
9569: ARRAY
9570: PUSH
9571: LD_INT 1
9573: ARRAY
9574: PPUSH
9575: LD_VAR 0 33
9579: PUSH
9580: LD_INT 1
9582: ARRAY
9583: PUSH
9584: LD_INT 2
9586: ARRAY
9587: PPUSH
9588: LD_VAR 0 33
9592: PUSH
9593: LD_INT 1
9595: ARRAY
9596: PUSH
9597: LD_INT 3
9599: ARRAY
9600: PPUSH
9601: LD_VAR 0 33
9605: PUSH
9606: LD_INT 1
9608: ARRAY
9609: PUSH
9610: LD_INT 4
9612: ARRAY
9613: PPUSH
9614: CALL_OW 145
// end ; if tag = tCrates then
9618: LD_VAR 0 15
9622: PUSH
9623: LD_INT 2
9625: EQUAL
9626: IFFALSE 9763
// begin if IsInUnit ( i ) then
9628: LD_VAR 0 9
9632: PPUSH
9633: CALL_OW 310
9637: IFFALSE 9650
// begin ComExitBuilding ( i ) ;
9639: LD_VAR 0 9
9643: PPUSH
9644: CALL_OW 122
// continue ;
9648: GO 8945
// end ; if not cr then
9650: LD_VAR 0 17
9654: NOT
9655: IFFALSE 9671
// begin SetTag ( i , 0 ) ;
9657: LD_VAR 0 9
9661: PPUSH
9662: LD_INT 0
9664: PPUSH
9665: CALL_OW 109
// continue ;
9669: GO 8945
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
9671: LD_VAR 0 9
9675: PPUSH
9676: CALL_OW 314
9680: NOT
9681: PUSH
9682: LD_INT 81
9684: PUSH
9685: LD_VAR 0 1
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 92
9696: PUSH
9697: LD_VAR 0 17
9701: PUSH
9702: LD_INT 1
9704: ARRAY
9705: PUSH
9706: LD_VAR 0 17
9710: PUSH
9711: LD_INT 2
9713: ARRAY
9714: PUSH
9715: LD_INT 12
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PPUSH
9728: CALL_OW 69
9732: NOT
9733: AND
9734: IFFALSE 9763
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
9736: LD_VAR 0 9
9740: PPUSH
9741: LD_VAR 0 17
9745: PUSH
9746: LD_INT 1
9748: ARRAY
9749: PPUSH
9750: LD_VAR 0 17
9754: PUSH
9755: LD_INT 2
9757: ARRAY
9758: PPUSH
9759: CALL_OW 117
// end ; end ;
9763: GO 8945
9765: POP
9766: POP
// end ; cranes := UnitFilter ( vehicles , [ [ f_weapon , ar_crane ] , [ f_ok ] ] ) ;
9767: LD_ADDR_VAR 0 25
9771: PUSH
9772: LD_VAR 0 26
9776: PPUSH
9777: LD_INT 34
9779: PUSH
9780: LD_INT 88
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: LD_INT 50
9789: PUSH
9790: EMPTY
9791: LIST
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PPUSH
9797: CALL_OW 72
9801: ST_TO_ADDR
// if cranes then
9802: LD_VAR 0 25
9806: IFFALSE 9871
// begin if tmp then
9808: LD_VAR 0 10
9812: IFFALSE 9857
// begin for i in cranes do
9814: LD_ADDR_VAR 0 9
9818: PUSH
9819: LD_VAR 0 25
9823: PUSH
9824: FOR_IN
9825: IFFALSE 9853
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
9827: LD_VAR 0 9
9831: PPUSH
9832: LD_VAR 0 10
9836: PPUSH
9837: LD_VAR 0 9
9841: PPUSH
9842: CALL_OW 74
9846: PPUSH
9847: CALL_OW 130
9851: GO 9824
9853: POP
9854: POP
// end else
9855: GO 9871
// ComBackOnParking ( cranes , parkingPoint ) ;
9857: LD_VAR 0 25
9861: PPUSH
9862: LD_VAR 0 7
9866: PPUSH
9867: CALL 59044 0 2
// end ; vehicles2 := CheckByIndex ( arVehiclesAtttackers , 1 , base , 2 ) ;
9871: LD_ADDR_VAR 0 27
9875: PUSH
9876: LD_EXP 46
9880: PPUSH
9881: LD_INT 1
9883: PPUSH
9884: LD_VAR 0 2
9888: PPUSH
9889: LD_INT 2
9891: PPUSH
9892: CALL 58761 0 4
9896: ST_TO_ADDR
// if vehicles2 then
9897: LD_VAR 0 27
9901: IFFALSE 9968
// for i in UnitFilter ( vehicles2 , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
9903: LD_ADDR_VAR 0 9
9907: PUSH
9908: LD_VAR 0 27
9912: PPUSH
9913: LD_INT 33
9915: PUSH
9916: LD_INT 2
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: LD_INT 50
9925: PUSH
9926: EMPTY
9927: LIST
9928: PUSH
9929: LD_INT 3
9931: PUSH
9932: LD_INT 61
9934: PUSH
9935: EMPTY
9936: LIST
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 72
9951: PUSH
9952: FOR_IN
9953: IFFALSE 9966
// Connect ( i ) ;
9955: LD_VAR 0 9
9959: PPUSH
9960: CALL 24848 0 1
9964: GO 9952
9966: POP
9967: POP
// if vehicles then
9968: LD_VAR 0 26
9972: IFFALSE 10878
// begin for i in UnitFilter ( vehicles , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
9974: LD_ADDR_VAR 0 9
9978: PUSH
9979: LD_VAR 0 26
9983: PPUSH
9984: LD_INT 33
9986: PUSH
9987: LD_INT 2
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: LD_INT 50
9996: PUSH
9997: EMPTY
9998: LIST
9999: PUSH
10000: LD_INT 3
10002: PUSH
10003: LD_INT 61
10005: PUSH
10006: EMPTY
10007: LIST
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: PPUSH
10018: CALL_OW 72
10022: PUSH
10023: FOR_IN
10024: IFFALSE 10037
// Connect ( i ) ;
10026: LD_VAR 0 9
10030: PPUSH
10031: CALL 24848 0 1
10035: GO 10023
10037: POP
10038: POP
// vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
10039: LD_ADDR_VAR 0 26
10043: PUSH
10044: LD_VAR 0 26
10048: PPUSH
10049: LD_INT 3
10051: PUSH
10052: LD_INT 2
10054: PUSH
10055: LD_INT 34
10057: PUSH
10058: LD_INT 88
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 34
10067: PUSH
10068: LD_INT 32
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: PUSH
10084: LD_INT 50
10086: PUSH
10087: EMPTY
10088: LIST
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PPUSH
10094: CALL_OW 72
10098: ST_TO_ADDR
// if vehicles then
10099: LD_VAR 0 26
10103: IFFALSE 10878
// begin for i in vehicles do
10105: LD_ADDR_VAR 0 9
10109: PUSH
10110: LD_VAR 0 26
10114: PUSH
10115: FOR_IN
10116: IFFALSE 10876
// begin tag := GetTag ( i ) ;
10118: LD_ADDR_VAR 0 15
10122: PUSH
10123: LD_VAR 0 9
10127: PPUSH
10128: CALL_OW 110
10132: ST_TO_ADDR
// if not tag then
10133: LD_VAR 0 15
10137: NOT
10138: IFFALSE 10309
// begin if GetControl ( i ) = control_manual then
10140: LD_VAR 0 9
10144: PPUSH
10145: CALL_OW 263
10149: PUSH
10150: LD_INT 1
10152: EQUAL
10153: IFFALSE 10295
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10155: LD_ADDR_VAR 0 24
10159: PUSH
10160: LD_EXP 47
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: LD_VAR 0 9
10172: PPUSH
10173: LD_INT 2
10175: PPUSH
10176: CALL 58761 0 4
10180: ST_TO_ADDR
// if not drivers then
10181: LD_VAR 0 24
10185: NOT
10186: IFFALSE 10275
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
10188: LD_ADDR_VAR 0 24
10192: PUSH
10193: LD_VAR 0 14
10197: PPUSH
10198: LD_INT 3
10200: PUSH
10201: LD_INT 120
10203: PUSH
10204: LD_INT 7
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PPUSH
10215: CALL_OW 72
10219: ST_TO_ADDR
// if drivers then
10220: LD_VAR 0 24
10224: IFFALSE 10275
// begin SetTag ( drivers [ 1 ] , tMech ) ;
10226: LD_VAR 0 24
10230: PUSH
10231: LD_INT 1
10233: ARRAY
10234: PPUSH
10235: LD_INT 7
10237: PPUSH
10238: CALL_OW 109
// arDrivers := Join ( arDrivers , [ i , drivers [ 1 ] ] ) ;
10242: LD_ADDR_EXP 47
10246: PUSH
10247: LD_EXP 47
10251: PPUSH
10252: LD_VAR 0 9
10256: PUSH
10257: LD_VAR 0 24
10261: PUSH
10262: LD_INT 1
10264: ARRAY
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PPUSH
10270: CALL 54231 0 2
10274: ST_TO_ADDR
// end ; end ; if drivers then
10275: LD_VAR 0 24
10279: IFFALSE 10293
// SetTag ( i , tBusy ) ;
10281: LD_VAR 0 9
10285: PPUSH
10286: LD_INT 8
10288: PPUSH
10289: CALL_OW 109
// continue ;
10293: GO 10115
// end ; SetTag ( i , tBusy ) ;
10295: LD_VAR 0 9
10299: PPUSH
10300: LD_INT 8
10302: PPUSH
10303: CALL_OW 109
// end else
10307: GO 10874
// if tag = tBusy then
10309: LD_VAR 0 15
10313: PUSH
10314: LD_INT 8
10316: EQUAL
10317: IFFALSE 10545
// begin if GetLives ( i ) = 1000 then
10319: LD_VAR 0 9
10323: PPUSH
10324: CALL_OW 256
10328: PUSH
10329: LD_INT 1000
10331: EQUAL
10332: IFFALSE 10543
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
10334: LD_VAR 0 9
10338: PPUSH
10339: CALL_OW 263
10343: PUSH
10344: LD_INT 1
10346: EQUAL
10347: PUSH
10348: LD_VAR 0 9
10352: PPUSH
10353: CALL_OW 311
10357: NOT
10358: AND
10359: IFFALSE 10531
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10361: LD_ADDR_VAR 0 24
10365: PUSH
10366: LD_EXP 47
10370: PPUSH
10371: LD_INT 1
10373: PPUSH
10374: LD_VAR 0 9
10378: PPUSH
10379: LD_INT 2
10381: PPUSH
10382: CALL 58761 0 4
10386: ST_TO_ADDR
// if not drivers then
10387: LD_VAR 0 24
10391: NOT
10392: IFFALSE 10408
// begin SetTag ( i , 0 ) ;
10394: LD_VAR 0 9
10398: PPUSH
10399: LD_INT 0
10401: PPUSH
10402: CALL_OW 109
// continue ;
10406: GO 10115
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
10408: LD_VAR 0 24
10412: PUSH
10413: LD_INT 1
10415: ARRAY
10416: PPUSH
10417: CALL_OW 310
10421: PUSH
10422: LD_VAR 0 24
10426: PUSH
10427: LD_INT 1
10429: ARRAY
10430: PPUSH
10431: CALL 51835 0 1
10435: NOT
10436: AND
10437: IFFALSE 10452
// ComExitBuilding ( drivers [ 1 ] ) ;
10439: LD_VAR 0 24
10443: PUSH
10444: LD_INT 1
10446: ARRAY
10447: PPUSH
10448: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
10452: LD_VAR 0 26
10456: PPUSH
10457: LD_INT 120
10459: PUSH
10460: LD_INT 3
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PPUSH
10467: CALL_OW 72
10471: PUSH
10472: LD_VAR 0 24
10476: PUSH
10477: LD_INT 1
10479: ARRAY
10480: PPUSH
10481: CALL_OW 314
10485: NOT
10486: AND
10487: PUSH
10488: LD_VAR 0 26
10492: PPUSH
10493: LD_INT 120
10495: PUSH
10496: LD_INT 3
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PPUSH
10503: CALL_OW 72
10507: NOT
10508: OR
10509: IFFALSE 10529
// ComEnterUnit ( drivers [ 1 ] , i ) ;
10511: LD_VAR 0 24
10515: PUSH
10516: LD_INT 1
10518: ARRAY
10519: PPUSH
10520: LD_VAR 0 9
10524: PPUSH
10525: CALL_OW 120
// continue ;
10529: GO 10115
// end ; SetTag ( i , tAttack ) ;
10531: LD_VAR 0 9
10535: PPUSH
10536: LD_INT 13
10538: PPUSH
10539: CALL_OW 109
// end ; end else
10543: GO 10874
// if tag = tAttack then
10545: LD_VAR 0 15
10549: PUSH
10550: LD_INT 13
10552: EQUAL
10553: IFFALSE 10733
// begin enemy := enemyInBase ;
10555: LD_ADDR_VAR 0 21
10559: PUSH
10560: LD_VAR 0 22
10564: ST_TO_ADDR
// if not enemy then
10565: LD_VAR 0 21
10569: NOT
10570: IFFALSE 10582
// enemy := enemyOuterBase ;
10572: LD_ADDR_VAR 0 21
10576: PUSH
10577: LD_VAR 0 23
10581: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10582: LD_VAR 0 21
10586: NOT
10587: PUSH
10588: LD_VAR 0 9
10592: PPUSH
10593: LD_VAR 0 7
10597: PUSH
10598: LD_INT 1
10600: ARRAY
10601: PPUSH
10602: LD_VAR 0 7
10606: PUSH
10607: LD_INT 2
10609: ARRAY
10610: PPUSH
10611: CALL_OW 297
10615: PUSH
10616: LD_INT 10
10618: GREATER
10619: AND
10620: IFFALSE 10651
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10622: LD_VAR 0 9
10626: PPUSH
10627: LD_VAR 0 7
10631: PUSH
10632: LD_INT 1
10634: ARRAY
10635: PPUSH
10636: LD_VAR 0 7
10640: PUSH
10641: LD_INT 2
10643: ARRAY
10644: PPUSH
10645: CALL_OW 111
// continue ;
10649: GO 10115
// end ; if GetLives ( i ) < 650 then
10651: LD_VAR 0 9
10655: PPUSH
10656: CALL_OW 256
10660: PUSH
10661: LD_INT 650
10663: LESS
10664: IFFALSE 10707
// begin SetTag ( i , tVehRepair ) ;
10666: LD_VAR 0 9
10670: PPUSH
10671: LD_INT 9
10673: PPUSH
10674: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10678: LD_VAR 0 9
10682: PPUSH
10683: LD_VAR 0 7
10687: PUSH
10688: LD_INT 1
10690: ARRAY
10691: PPUSH
10692: LD_VAR 0 7
10696: PUSH
10697: LD_INT 2
10699: ARRAY
10700: PPUSH
10701: CALL_OW 111
// continue ;
10705: GO 10115
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10707: LD_VAR 0 9
10711: PPUSH
10712: LD_VAR 0 21
10716: PPUSH
10717: LD_VAR 0 9
10721: PPUSH
10722: CALL_OW 74
10726: PPUSH
10727: CALL_OW 115
// end else
10731: GO 10874
// if tag = tVehRepair then
10733: LD_VAR 0 15
10737: PUSH
10738: LD_INT 9
10740: EQUAL
10741: IFFALSE 10874
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10743: LD_VAR 0 9
10747: PPUSH
10748: LD_VAR 0 7
10752: PUSH
10753: LD_INT 1
10755: ARRAY
10756: PPUSH
10757: LD_VAR 0 7
10761: PUSH
10762: LD_INT 2
10764: ARRAY
10765: PPUSH
10766: CALL_OW 297
10770: PUSH
10771: LD_INT 10
10773: GREATER
10774: IFFALSE 10805
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10776: LD_VAR 0 9
10780: PPUSH
10781: LD_VAR 0 7
10785: PUSH
10786: LD_INT 1
10788: ARRAY
10789: PPUSH
10790: LD_VAR 0 7
10794: PUSH
10795: LD_INT 2
10797: ARRAY
10798: PPUSH
10799: CALL_OW 111
// continue ;
10803: GO 10115
// end ; if GetLives ( i ) = 1000 then
10805: LD_VAR 0 9
10809: PPUSH
10810: CALL_OW 256
10814: PUSH
10815: LD_INT 1000
10817: EQUAL
10818: IFFALSE 10834
// begin SetTag ( i , tBusy ) ;
10820: LD_VAR 0 9
10824: PPUSH
10825: LD_INT 8
10827: PPUSH
10828: CALL_OW 109
// continue ;
10832: GO 10115
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
10834: LD_VAR 0 9
10838: PPUSH
10839: CALL_OW 263
10843: PUSH
10844: LD_INT 1
10846: EQUAL
10847: PUSH
10848: LD_VAR 0 9
10852: PPUSH
10853: CALL_OW 311
10857: AND
10858: IFFALSE 10874
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10860: LD_VAR 0 9
10864: PPUSH
10865: CALL_OW 311
10869: PPUSH
10870: CALL 55931 0 1
// end ; end ;
10874: GO 10115
10876: POP
10877: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
10878: LD_ADDR_VAR 0 19
10882: PUSH
10883: LD_VAR 0 5
10887: PPUSH
10888: LD_INT 2
10890: PUSH
10891: LD_INT 25
10893: PUSH
10894: LD_INT 1
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: LD_INT 25
10903: PUSH
10904: LD_INT 8
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PUSH
10911: LD_INT 25
10913: PUSH
10914: LD_INT 5
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: LD_INT 25
10923: PUSH
10924: LD_INT 9
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 50
10940: PUSH
10941: EMPTY
10942: LIST
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PPUSH
10948: CALL_OW 72
10952: ST_TO_ADDR
// if sol then
10953: LD_VAR 0 19
10957: IFFALSE 11505
// begin if enemyInBase then
10959: LD_VAR 0 22
10963: IFFALSE 11142
// begin for i in sol do
10965: LD_ADDR_VAR 0 9
10969: PUSH
10970: LD_VAR 0 19
10974: PUSH
10975: FOR_IN
10976: IFFALSE 11138
// begin tw := IsInUnit ( i ) ;
10978: LD_ADDR_VAR 0 16
10982: PUSH
10983: LD_VAR 0 9
10987: PPUSH
10988: CALL_OW 310
10992: ST_TO_ADDR
// if tw then
10993: LD_VAR 0 16
10997: IFFALSE 11080
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
10999: LD_VAR 0 16
11003: PUSH
11004: LD_INT 22
11006: PUSH
11007: LD_VAR 0 1
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 101
11018: PUSH
11019: LD_VAR 0 34
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 2
11030: PUSH
11031: LD_INT 30
11033: PUSH
11034: LD_INT 32
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 30
11043: PUSH
11044: LD_INT 31
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: LIST
11060: PPUSH
11061: CALL_OW 69
11065: IN
11066: NOT
11067: IFFALSE 11078
// ComExitBuilding ( i ) ;
11069: LD_VAR 0 9
11073: PPUSH
11074: CALL_OW 122
// end else
11078: GO 11136
// if IsInArea ( i , area ) then
11080: LD_VAR 0 9
11084: PPUSH
11085: LD_VAR 0 3
11089: PPUSH
11090: CALL_OW 308
11094: IFFALSE 11122
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
11096: LD_VAR 0 9
11100: PPUSH
11101: LD_VAR 0 22
11105: PPUSH
11106: LD_VAR 0 9
11110: PPUSH
11111: CALL_OW 74
11115: PPUSH
11116: CALL_OW 115
11120: GO 11136
// ComMoveToArea ( i , area ) ;
11122: LD_VAR 0 9
11126: PPUSH
11127: LD_VAR 0 3
11131: PPUSH
11132: CALL_OW 113
// end ;
11136: GO 10975
11138: POP
11139: POP
// end else
11140: GO 11505
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
11142: LD_ADDR_VAR 0 28
11146: PUSH
11147: LD_VAR 0 3
11151: PPUSH
11152: LD_INT 3
11154: PUSH
11155: LD_INT 62
11157: PUSH
11158: EMPTY
11159: LIST
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: LD_INT 2
11167: PUSH
11168: LD_INT 30
11170: PUSH
11171: LD_INT 32
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: LD_INT 30
11180: PUSH
11181: LD_INT 4
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: PUSH
11188: LD_INT 30
11190: PUSH
11191: LD_INT 5
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: LD_INT 30
11200: PUSH
11201: LD_INT 31
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PPUSH
11219: CALL_OW 70
11223: ST_TO_ADDR
// if empty then
11224: LD_VAR 0 28
11228: IFFALSE 11245
// empty := ReverseArray ( empty ) ;
11230: LD_ADDR_VAR 0 28
11234: PUSH
11235: LD_VAR 0 28
11239: PPUSH
11240: CALL 49518 0 1
11244: ST_TO_ADDR
// for i in sol do
11245: LD_ADDR_VAR 0 9
11249: PUSH
11250: LD_VAR 0 19
11254: PUSH
11255: FOR_IN
11256: IFFALSE 11503
// begin tag := GetTag ( i ) ;
11258: LD_ADDR_VAR 0 15
11262: PUSH
11263: LD_VAR 0 9
11267: PPUSH
11268: CALL_OW 110
11272: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
11273: LD_VAR 0 9
11277: PPUSH
11278: CALL_OW 256
11282: PUSH
11283: LD_INT 1000
11285: LESS
11286: PUSH
11287: LD_VAR 0 15
11291: PUSH
11292: LD_INT 1
11294: NONEQUAL
11295: AND
11296: IFFALSE 11348
// begin SetTag ( i , tHeal ) ;
11298: LD_VAR 0 9
11302: PPUSH
11303: LD_INT 1
11305: PPUSH
11306: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
11310: LD_VAR 0 9
11314: PPUSH
11315: LD_VAR 0 6
11319: PUSH
11320: LD_INT 1
11322: ARRAY
11323: PPUSH
11324: LD_VAR 0 6
11328: PUSH
11329: LD_INT 2
11331: ARRAY
11332: PPUSH
11333: CALL_OW 111
// AddComHold ( i ) ;
11337: LD_VAR 0 9
11341: PPUSH
11342: CALL_OW 200
// continue ;
11346: GO 11255
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
11348: LD_VAR 0 9
11352: PPUSH
11353: CALL_OW 256
11357: PUSH
11358: LD_INT 1000
11360: EQUAL
11361: PUSH
11362: LD_VAR 0 15
11366: PUSH
11367: LD_INT 1
11369: EQUAL
11370: AND
11371: IFFALSE 11387
// begin SetTag ( i , 0 ) ;
11373: LD_VAR 0 9
11377: PPUSH
11378: LD_INT 0
11380: PPUSH
11381: CALL_OW 109
// continue ;
11385: GO 11255
// end ; if HasTask ( i ) then
11387: LD_VAR 0 9
11391: PPUSH
11392: CALL_OW 314
11396: IFFALSE 11400
// continue ;
11398: GO 11255
// if not IsInUnit ( i ) and not tag and empty then
11400: LD_VAR 0 9
11404: PPUSH
11405: CALL_OW 310
11409: NOT
11410: PUSH
11411: LD_VAR 0 15
11415: NOT
11416: AND
11417: PUSH
11418: LD_VAR 0 28
11422: AND
11423: IFFALSE 11501
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
11425: LD_VAR 0 9
11429: PPUSH
11430: LD_VAR 0 28
11434: PUSH
11435: LD_INT 1
11437: ARRAY
11438: PPUSH
11439: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
11443: LD_VAR 0 28
11447: PUSH
11448: LD_INT 1
11450: ARRAY
11451: PPUSH
11452: CALL_OW 266
11456: PUSH
11457: LD_INT 5
11459: EQUAL
11460: PUSH
11461: LD_INT 50
11463: PPUSH
11464: CALL_OW 13
11468: AND
11469: IFFALSE 11483
// AddComChangeProfession ( i , class_mortar ) ;
11471: LD_VAR 0 9
11475: PPUSH
11476: LD_INT 8
11478: PPUSH
11479: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
11483: LD_ADDR_VAR 0 28
11487: PUSH
11488: LD_VAR 0 28
11492: PPUSH
11493: LD_INT 1
11495: PPUSH
11496: CALL_OW 3
11500: ST_TO_ADDR
// end ; end ;
11501: GO 11255
11503: POP
11504: POP
// end ; end ; end ;
11505: LD_VAR 0 8
11509: RET
// every 0 0$2 trigger UnitFilter ( ar_force_south , [ f_ok ] ) do
11510: LD_EXP 33
11514: PPUSH
11515: LD_INT 50
11517: PUSH
11518: EMPTY
11519: LIST
11520: PPUSH
11521: CALL_OW 72
11525: IFFALSE 11574
11527: GO 11529
11529: DISABLE
// begin enable ;
11530: ENABLE
// ArabianBaseScript ( side_bot , 1 , area_base_south , area_base_south_outer , ar_force_south , [ 120 , 129 ] , [ 126 , 136 ] ) ;
11531: LD_EXP 3
11535: PPUSH
11536: LD_INT 1
11538: PPUSH
11539: LD_INT 33
11541: PPUSH
11542: LD_INT 40
11544: PPUSH
11545: LD_EXP 33
11549: PPUSH
11550: LD_INT 120
11552: PUSH
11553: LD_INT 129
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PPUSH
11560: LD_INT 126
11562: PUSH
11563: LD_INT 136
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: PPUSH
11570: CALL 7551 0 7
// end ;
11574: END
// every 0 0$2 trigger UnitFilter ( ar_force_north , [ f_ok ] ) do
11575: LD_EXP 34
11579: PPUSH
11580: LD_INT 50
11582: PUSH
11583: EMPTY
11584: LIST
11585: PPUSH
11586: CALL_OW 72
11590: IFFALSE 11639
11592: GO 11594
11594: DISABLE
// begin enable ;
11595: ENABLE
// ArabianBaseScript ( side_bot , 2 , area_base_north , area_base_north_outer , ar_force_north , [ 116 , 9 ] , [ 123 , 12 ] ) ;
11596: LD_EXP 3
11600: PPUSH
11601: LD_INT 2
11603: PPUSH
11604: LD_INT 35
11606: PPUSH
11607: LD_INT 43
11609: PPUSH
11610: LD_EXP 34
11614: PPUSH
11615: LD_INT 116
11617: PUSH
11618: LD_INT 9
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PPUSH
11625: LD_INT 123
11627: PUSH
11628: LD_INT 12
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PPUSH
11635: CALL 7551 0 7
// end ;
11639: END
// every 0 0$2 trigger UnitFilter ( ar_force_west , [ f_ok ] ) do
11640: LD_EXP 32
11644: PPUSH
11645: LD_INT 50
11647: PUSH
11648: EMPTY
11649: LIST
11650: PPUSH
11651: CALL_OW 72
11655: IFFALSE 11704
11657: GO 11659
11659: DISABLE
// begin enable ;
11660: ENABLE
// ArabianBaseScript ( side_bot , 3 , area_base_west , area_base_west_outer , ar_force_west , [ 28 , 10 ] , [ 26 , 17 ] ) ;
11661: LD_EXP 3
11665: PPUSH
11666: LD_INT 3
11668: PPUSH
11669: LD_INT 34
11671: PPUSH
11672: LD_INT 42
11674: PPUSH
11675: LD_EXP 32
11679: PPUSH
11680: LD_INT 28
11682: PUSH
11683: LD_INT 10
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PPUSH
11690: LD_INT 26
11692: PUSH
11693: LD_INT 17
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL 7551 0 7
// end ;
11704: END
// every 0 0$2 trigger UnitFilter ( ar_force_east , [ f_ok ] ) do
11705: LD_EXP 36
11709: PPUSH
11710: LD_INT 50
11712: PUSH
11713: EMPTY
11714: LIST
11715: PPUSH
11716: CALL_OW 72
11720: IFFALSE 11769
11722: GO 11724
11724: DISABLE
// begin enable ;
11725: ENABLE
// ArabianBaseScript ( side_bot , 4 , area_base_east , area_base_east_outer , ar_force_east , [ 173 , 72 ] , [ 167 , 83 ] ) ;
11726: LD_EXP 3
11730: PPUSH
11731: LD_INT 4
11733: PPUSH
11734: LD_INT 36
11736: PPUSH
11737: LD_INT 44
11739: PPUSH
11740: LD_EXP 36
11744: PPUSH
11745: LD_INT 173
11747: PUSH
11748: LD_INT 72
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PPUSH
11755: LD_INT 167
11757: PUSH
11758: LD_INT 83
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PPUSH
11765: CALL 7551 0 7
// end ;
11769: END
// every 0 0$2 trigger UnitFilter ( ar_force_north2 , [ f_ok ] ) do
11770: LD_EXP 35
11774: PPUSH
11775: LD_INT 50
11777: PUSH
11778: EMPTY
11779: LIST
11780: PPUSH
11781: CALL_OW 72
11785: IFFALSE 11834
11787: GO 11789
11789: DISABLE
// begin enable ;
11790: ENABLE
// ArabianBaseScript ( side_bot , 5 , area_base_north2 , area_base_north2_outer , ar_force_north2 , [ 147 , 50 ] , [ 159 , 40 ] ) ;
11791: LD_EXP 3
11795: PPUSH
11796: LD_INT 5
11798: PPUSH
11799: LD_INT 38
11801: PPUSH
11802: LD_INT 45
11804: PPUSH
11805: LD_EXP 35
11809: PPUSH
11810: LD_INT 147
11812: PUSH
11813: LD_INT 50
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: PPUSH
11820: LD_INT 159
11822: PUSH
11823: LD_INT 40
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PPUSH
11830: CALL 7551 0 7
// end ;
11834: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
11835: LD_EXP 51
11839: IFFALSE 12051
11841: GO 11843
11843: DISABLE
11844: LD_INT 0
11846: PPUSH
11847: PPUSH
11848: PPUSH
// begin enable ;
11849: ENABLE
// p := 1 ;
11850: LD_ADDR_VAR 0 2
11854: PUSH
11855: LD_INT 1
11857: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
11858: LD_ADDR_VAR 0 1
11862: PUSH
11863: DOUBLE
11864: LD_INT 1
11866: DEC
11867: ST_TO_ADDR
11868: LD_EXP 51
11872: PPUSH
11873: CALL 18642 0 1
11877: PUSH
11878: LD_INT 2
11880: DIV
11881: PUSH
11882: FOR_TO
11883: IFFALSE 12049
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
11885: LD_ADDR_VAR 0 3
11889: PUSH
11890: LD_EXP 51
11894: PUSH
11895: LD_VAR 0 2
11899: ARRAY
11900: PPUSH
11901: LD_EXP 51
11905: PUSH
11906: LD_VAR 0 2
11910: PUSH
11911: LD_INT 1
11913: PLUS
11914: ARRAY
11915: PPUSH
11916: CALL_OW 428
11920: ST_TO_ADDR
// if tmp then
11921: LD_VAR 0 3
11925: IFFALSE 12033
// if GetSide ( tmp ) <> side_bot then
11927: LD_VAR 0 3
11931: PPUSH
11932: CALL_OW 255
11936: PUSH
11937: LD_EXP 3
11941: NONEQUAL
11942: IFFALSE 12033
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , side_bot ) ;
11944: LD_EXP 51
11948: PUSH
11949: LD_VAR 0 2
11953: ARRAY
11954: PPUSH
11955: LD_EXP 51
11959: PUSH
11960: LD_VAR 0 2
11964: PUSH
11965: LD_INT 1
11967: PLUS
11968: ARRAY
11969: PPUSH
11970: LD_EXP 3
11974: PPUSH
11975: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
11979: LD_ADDR_EXP 51
11983: PUSH
11984: LD_EXP 51
11988: PPUSH
11989: LD_VAR 0 2
11993: PPUSH
11994: CALL_OW 3
11998: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
11999: LD_ADDR_EXP 51
12003: PUSH
12004: LD_EXP 51
12008: PPUSH
12009: LD_VAR 0 2
12013: PPUSH
12014: CALL_OW 3
12018: ST_TO_ADDR
// p := p - 2 ;
12019: LD_ADDR_VAR 0 2
12023: PUSH
12024: LD_VAR 0 2
12028: PUSH
12029: LD_INT 2
12031: MINUS
12032: ST_TO_ADDR
// end ; p := p + 2 ;
12033: LD_ADDR_VAR 0 2
12037: PUSH
12038: LD_VAR 0 2
12042: PUSH
12043: LD_INT 2
12045: PLUS
12046: ST_TO_ADDR
// end ;
12047: GO 11882
12049: POP
12050: POP
// end ; end_of_file
12051: PPOPN 3
12053: END
// on ArtifactLoaded ( cargo , artifact ) do var i , j ;
12054: LD_INT 0
12056: PPUSH
12057: PPUSH
// begin if artifact_get then
12058: LD_EXP 4
12062: IFFALSE 12066
// exit ;
12064: GO 12088
// MultiplayerEvent_ArtifactCaptured ( GetSide ( cargo ) ) ;
12066: LD_VAR 0 1
12070: PPUSH
12071: CALL_OW 255
12075: PPUSH
12076: CALL 5182 0 1
// artifact_get := true ;
12080: LD_ADDR_EXP 4
12084: PUSH
12085: LD_INT 1
12087: ST_TO_ADDR
// end ;
12088: PPOPN 4
12090: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetSide ( un ) <> side_bot then
12091: LD_VAR 0 1
12095: PPUSH
12096: CALL_OW 255
12100: PUSH
12101: LD_EXP 3
12105: NONEQUAL
12106: IFFALSE 12110
// exit ;
12108: GO 12179
// if not un in [ Saliba , Gensher , Shariff ] then
12110: LD_VAR 0 1
12114: PUSH
12115: LD_EXP 39
12119: PUSH
12120: LD_EXP 40
12124: PUSH
12125: LD_EXP 41
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: LIST
12134: IN
12135: NOT
12136: IFFALSE 12157
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
12138: LD_VAR 0 1
12142: PPUSH
12143: LD_VAR 0 2
12147: PPUSH
12148: LD_INT 0
12150: PPUSH
12151: CALL 5118 0 3
12155: GO 12179
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
12157: LD_VAR 0 1
12161: PPUSH
12162: LD_VAR 0 2
12166: PPUSH
12167: LD_INT 5
12169: PPUSH
12170: CALL 4445 0 1
12174: PPUSH
12175: CALL 5118 0 3
// end ;
12179: PPOPN 3
12181: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
12182: LD_INT 0
12184: PPUSH
12185: PPUSH
12186: PPUSH
12187: PPUSH
12188: PPUSH
12189: PPUSH
12190: PPUSH
12191: PPUSH
12192: PPUSH
12193: PPUSH
// begin side := GetSide ( un ) ;
12194: LD_ADDR_VAR 0 3
12198: PUSH
12199: LD_VAR 0 1
12203: PPUSH
12204: CALL_OW 255
12208: ST_TO_ADDR
// if multi_sides [ side ] then
12209: LD_EXP 7
12213: PUSH
12214: LD_VAR 0 3
12218: ARRAY
12219: IFFALSE 12245
// if GetType ( un ) = unit_human then
12221: LD_VAR 0 1
12225: PPUSH
12226: CALL_OW 247
12230: PUSH
12231: LD_INT 1
12233: EQUAL
12234: IFFALSE 12245
// MultiplayerEvent_HumanLost ( side ) ;
12236: LD_VAR 0 3
12240: PPUSH
12241: CALL 5004 0 1
// if side = side_bot then
12245: LD_VAR 0 3
12249: PUSH
12250: LD_EXP 3
12254: EQUAL
12255: IFFALSE 12701
// begin if GetType ( un ) = unit_building then
12257: LD_VAR 0 1
12261: PPUSH
12262: CALL_OW 247
12266: PUSH
12267: LD_INT 3
12269: EQUAL
12270: IFFALSE 12500
// begin base := 0 ;
12272: LD_ADDR_VAR 0 4
12276: PUSH
12277: LD_INT 0
12279: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
12280: LD_ADDR_VAR 0 2
12284: PUSH
12285: DOUBLE
12286: LD_INT 1
12288: DEC
12289: ST_TO_ADDR
12290: LD_EXP 49
12294: PPUSH
12295: CALL 18642 0 1
12299: PUSH
12300: FOR_TO
12301: IFFALSE 12339
// if IsInArea ( un , arAreas [ i ] ) then
12303: LD_VAR 0 1
12307: PPUSH
12308: LD_EXP 49
12312: PUSH
12313: LD_VAR 0 2
12317: ARRAY
12318: PPUSH
12319: CALL_OW 308
12323: IFFALSE 12337
// begin base := i ;
12325: LD_ADDR_VAR 0 4
12329: PUSH
12330: LD_VAR 0 2
12334: ST_TO_ADDR
// break ;
12335: GO 12339
// end ;
12337: GO 12300
12339: POP
12340: POP
// if not base then
12341: LD_VAR 0 4
12345: NOT
12346: IFFALSE 12350
// exit ;
12348: GO 12773
// btype := GetBType ( un ) ;
12350: LD_ADDR_VAR 0 11
12354: PUSH
12355: LD_VAR 0 1
12359: PPUSH
12360: CALL_OW 266
12364: ST_TO_ADDR
// if btype = b_barracks then
12365: LD_VAR 0 11
12369: PUSH
12370: LD_INT 5
12372: EQUAL
12373: IFFALSE 12383
// btype := b_armoury ;
12375: LD_ADDR_VAR 0 11
12379: PUSH
12380: LD_INT 4
12382: ST_TO_ADDR
// if btype = b_factory then
12383: LD_VAR 0 11
12387: PUSH
12388: LD_INT 3
12390: EQUAL
12391: IFFALSE 12401
// btype := b_workshop ;
12393: LD_ADDR_VAR 0 11
12397: PUSH
12398: LD_INT 2
12400: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
12401: LD_VAR 0 11
12405: PUSH
12406: LD_INT 8
12408: PUSH
12409: LD_INT 7
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: IN
12416: IFFALSE 12426
// btype := b_lab ;
12418: LD_ADDR_VAR 0 11
12422: PUSH
12423: LD_INT 6
12425: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ base , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ] ) ;
12426: LD_ADDR_EXP 44
12430: PUSH
12431: LD_EXP 44
12435: PPUSH
12436: LD_EXP 44
12440: PUSH
12441: LD_INT 1
12443: PLUS
12444: PPUSH
12445: LD_VAR 0 4
12449: PUSH
12450: LD_VAR 0 11
12454: PUSH
12455: LD_VAR 0 1
12459: PPUSH
12460: CALL_OW 250
12464: PUSH
12465: LD_VAR 0 1
12469: PPUSH
12470: CALL_OW 251
12474: PUSH
12475: LD_VAR 0 1
12479: PPUSH
12480: CALL_OW 254
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PPUSH
12495: CALL_OW 1
12499: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12500: LD_VAR 0 1
12504: PPUSH
12505: CALL_OW 247
12509: PUSH
12510: LD_INT 2
12512: EQUAL
12513: IFFALSE 12701
// begin base := CheckByIndex ( arVehicles , 2 , un , 1 ) ;
12515: LD_ADDR_VAR 0 4
12519: PUSH
12520: LD_EXP 45
12524: PPUSH
12525: LD_INT 2
12527: PPUSH
12528: LD_VAR 0 1
12532: PPUSH
12533: LD_INT 1
12535: PPUSH
12536: CALL 58761 0 4
12540: ST_TO_ADDR
// if not base then
12541: LD_VAR 0 4
12545: NOT
12546: IFFALSE 12550
// exit ;
12548: GO 12773
// factory := arFactories [ base ] ;
12550: LD_ADDR_VAR 0 10
12554: PUSH
12555: LD_EXP 48
12559: PUSH
12560: LD_VAR 0 4
12564: ARRAY
12565: ST_TO_ADDR
// if not factory then
12566: LD_VAR 0 10
12570: NOT
12571: IFFALSE 12575
// exit ;
12573: GO 12773
// chassis := GetChassis ( un ) ;
12575: LD_ADDR_VAR 0 5
12579: PUSH
12580: LD_VAR 0 1
12584: PPUSH
12585: CALL_OW 265
12589: ST_TO_ADDR
// engine := GetEngine ( un ) ;
12590: LD_ADDR_VAR 0 6
12594: PUSH
12595: LD_VAR 0 1
12599: PPUSH
12600: CALL_OW 262
12604: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
12605: LD_ADDR_VAR 0 8
12609: PUSH
12610: LD_VAR 0 1
12614: PPUSH
12615: CALL_OW 264
12619: ST_TO_ADDR
// control := control_remote ;
12620: LD_ADDR_VAR 0 7
12624: PUSH
12625: LD_INT 2
12627: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
12628: LD_ADDR_VAR 0 9
12632: PUSH
12633: LD_VAR 0 10
12637: PPUSH
12638: LD_VAR 0 5
12642: PPUSH
12643: LD_VAR 0 6
12647: PPUSH
12648: LD_VAR 0 7
12652: PPUSH
12653: LD_VAR 0 8
12657: PPUSH
12658: CALL 19000 0 5
12662: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ base , tmp ] ) ;
12663: LD_ADDR_EXP 43
12667: PUSH
12668: LD_EXP 43
12672: PPUSH
12673: LD_EXP 43
12677: PUSH
12678: LD_INT 1
12680: PLUS
12681: PPUSH
12682: LD_VAR 0 4
12686: PUSH
12687: LD_VAR 0 9
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PPUSH
12696: CALL_OW 1
12700: ST_TO_ADDR
// end ; end ; if multi_commanders and multi_custom_commanders then
12701: LD_EXP 24
12705: PUSH
12706: LD_EXP 16
12710: AND
12711: IFFALSE 12773
// if un in multi_commanders then
12713: LD_VAR 0 1
12717: PUSH
12718: LD_EXP 24
12722: IN
12723: IFFALSE 12773
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
12725: LD_ADDR_EXP 25
12729: PUSH
12730: LD_EXP 25
12734: PPUSH
12735: LD_VAR 0 3
12739: PPUSH
12740: LD_INT 1
12742: PPUSH
12743: CALL_OW 1
12747: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
12748: LD_ADDR_EXP 24
12752: PUSH
12753: LD_EXP 24
12757: PUSH
12758: LD_VAR 0 1
12762: DIFF
12763: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
12764: LD_VAR 0 3
12768: PPUSH
12769: CALL 4478 0 1
// end ; end ;
12773: PPOPN 11
12775: END
// on BuildingComplete ( building ) do var i , j , side , base , btype ;
12776: LD_INT 0
12778: PPUSH
12779: PPUSH
12780: PPUSH
12781: PPUSH
12782: PPUSH
// begin side := GetSide ( building ) ;
12783: LD_ADDR_VAR 0 4
12787: PUSH
12788: LD_VAR 0 1
12792: PPUSH
12793: CALL_OW 255
12797: ST_TO_ADDR
// if multi_sides [ side ] then
12798: LD_EXP 7
12802: PUSH
12803: LD_VAR 0 4
12807: ARRAY
12808: IFFALSE 12829
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
12810: LD_VAR 0 4
12814: PPUSH
12815: LD_VAR 0 1
12819: PPUSH
12820: CALL_OW 266
12824: PPUSH
12825: CALL 5048 0 2
// if GetBType ( building ) = b_depot and not multi_sides [ side ] and base_names then
12829: LD_VAR 0 1
12833: PPUSH
12834: CALL_OW 266
12838: PUSH
12839: LD_INT 0
12841: EQUAL
12842: PUSH
12843: LD_EXP 7
12847: PUSH
12848: LD_VAR 0 4
12852: ARRAY
12853: NOT
12854: AND
12855: PUSH
12856: LD_EXP 5
12860: AND
12861: IFFALSE 12899
// begin SetBName ( building , base_names [ 1 ] ) ;
12863: LD_VAR 0 1
12867: PPUSH
12868: LD_EXP 5
12872: PUSH
12873: LD_INT 1
12875: ARRAY
12876: PPUSH
12877: CALL_OW 500
// base_names := Delete ( base_names , 1 ) ;
12881: LD_ADDR_EXP 5
12885: PUSH
12886: LD_EXP 5
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 3
12898: ST_TO_ADDR
// end ; if side = side_bot then
12899: LD_VAR 0 4
12903: PUSH
12904: LD_EXP 3
12908: EQUAL
12909: IFFALSE 13160
// begin base := 0 ;
12911: LD_ADDR_VAR 0 5
12915: PUSH
12916: LD_INT 0
12918: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
12919: LD_ADDR_VAR 0 2
12923: PUSH
12924: DOUBLE
12925: LD_INT 1
12927: DEC
12928: ST_TO_ADDR
12929: LD_EXP 49
12933: PPUSH
12934: CALL 18642 0 1
12938: PUSH
12939: FOR_TO
12940: IFFALSE 12978
// if IsInArea ( building , arAreas [ i ] ) then
12942: LD_VAR 0 1
12946: PPUSH
12947: LD_EXP 49
12951: PUSH
12952: LD_VAR 0 2
12956: ARRAY
12957: PPUSH
12958: CALL_OW 308
12962: IFFALSE 12976
// begin base := i ;
12964: LD_ADDR_VAR 0 5
12968: PUSH
12969: LD_VAR 0 2
12973: ST_TO_ADDR
// break ;
12974: GO 12978
// end ;
12976: GO 12939
12978: POP
12979: POP
// if not base then
12980: LD_VAR 0 5
12984: NOT
12985: IFFALSE 12989
// exit ;
12987: GO 13160
// for i := 1 to Count ( arBuildings ) do
12989: LD_ADDR_VAR 0 2
12993: PUSH
12994: DOUBLE
12995: LD_INT 1
12997: DEC
12998: ST_TO_ADDR
12999: LD_EXP 44
13003: PPUSH
13004: CALL 18642 0 1
13008: PUSH
13009: FOR_TO
13010: IFFALSE 13062
// if arBuildings [ i ] [ 1 ] [ 1 ] = base then
13012: LD_EXP 44
13016: PUSH
13017: LD_VAR 0 2
13021: ARRAY
13022: PUSH
13023: LD_INT 1
13025: ARRAY
13026: PUSH
13027: LD_INT 1
13029: ARRAY
13030: PUSH
13031: LD_VAR 0 5
13035: EQUAL
13036: IFFALSE 13060
// begin arBuildings := Delete ( arBuildings , i ) ;
13038: LD_ADDR_EXP 44
13042: PUSH
13043: LD_EXP 44
13047: PPUSH
13048: LD_VAR 0 2
13052: PPUSH
13053: CALL_OW 3
13057: ST_TO_ADDR
// break ;
13058: GO 13062
// end ;
13060: GO 13009
13062: POP
13063: POP
// btype := GetBType ( building ) ;
13064: LD_ADDR_VAR 0 6
13068: PUSH
13069: LD_VAR 0 1
13073: PPUSH
13074: CALL_OW 266
13078: ST_TO_ADDR
// case btype of b_armoury :
13079: LD_VAR 0 6
13083: PUSH
13084: LD_INT 4
13086: DOUBLE
13087: EQUAL
13088: IFTRUE 13092
13090: GO 13104
13092: POP
// ComUpgrade ( building ) ; b_workshop :
13093: LD_VAR 0 1
13097: PPUSH
13098: CALL_OW 146
13102: GO 13160
13104: LD_INT 2
13106: DOUBLE
13107: EQUAL
13108: IFTRUE 13112
13110: GO 13124
13112: POP
// ComUpgrade ( building ) ; b_lab :
13113: LD_VAR 0 1
13117: PPUSH
13118: CALL_OW 146
13122: GO 13160
13124: LD_INT 6
13126: DOUBLE
13127: EQUAL
13128: IFTRUE 13132
13130: GO 13159
13132: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
13133: LD_VAR 0 1
13137: PPUSH
13138: LD_INT 10
13140: PPUSH
13141: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
13145: LD_VAR 0 1
13149: PPUSH
13150: LD_INT 15
13152: PPUSH
13153: CALL_OW 207
// end ; end ;
13157: GO 13160
13159: POP
// end ; end ;
13160: PPOPN 6
13162: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount ;
13163: LD_INT 0
13165: PPUSH
13166: PPUSH
13167: PPUSH
13168: PPUSH
13169: PPUSH
// begin side := GetSide ( vehicle ) ;
13170: LD_ADDR_VAR 0 4
13174: PUSH
13175: LD_VAR 0 1
13179: PPUSH
13180: CALL_OW 255
13184: ST_TO_ADDR
// if multi_sides [ side ] then
13185: LD_EXP 7
13189: PUSH
13190: LD_VAR 0 4
13194: ARRAY
13195: IFFALSE 13206
// MultiplayerEvent_Produced ( side ) ;
13197: LD_VAR 0 4
13201: PPUSH
13202: CALL 4960 0 1
// if side_bot = side then
13206: LD_EXP 3
13210: PUSH
13211: LD_VAR 0 4
13215: EQUAL
13216: IFFALSE 13408
// begin base := 0 ;
13218: LD_ADDR_VAR 0 6
13222: PUSH
13223: LD_INT 0
13225: ST_TO_ADDR
// for i := 1 to Count ( arFactories ) do
13226: LD_ADDR_VAR 0 3
13230: PUSH
13231: DOUBLE
13232: LD_INT 1
13234: DEC
13235: ST_TO_ADDR
13236: LD_EXP 48
13240: PPUSH
13241: CALL 18642 0 1
13245: PUSH
13246: FOR_TO
13247: IFFALSE 13281
// if arFactories [ i ] = factory then
13249: LD_EXP 48
13253: PUSH
13254: LD_VAR 0 3
13258: ARRAY
13259: PUSH
13260: LD_VAR 0 2
13264: EQUAL
13265: IFFALSE 13279
// begin base := i ;
13267: LD_ADDR_VAR 0 6
13271: PUSH
13272: LD_VAR 0 3
13276: ST_TO_ADDR
// break ;
13277: GO 13281
// end ;
13279: GO 13246
13281: POP
13282: POP
// if not base then
13283: LD_VAR 0 6
13287: NOT
13288: IFFALSE 13292
// exit ;
13290: GO 13408
// if arVehiclesCounter [ base ] > CheckByIndex ( arVehicles , 1 , base , 2 ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
13292: LD_EXP 50
13296: PUSH
13297: LD_VAR 0 6
13301: ARRAY
13302: PUSH
13303: LD_EXP 45
13307: PPUSH
13308: LD_INT 1
13310: PPUSH
13311: LD_VAR 0 6
13315: PPUSH
13316: LD_INT 2
13318: PPUSH
13319: CALL 58761 0 4
13323: GREATER
13324: PUSH
13325: LD_VAR 0 1
13329: PPUSH
13330: CALL_OW 266
13334: PUSH
13335: LD_INT 32
13337: PUSH
13338: LD_INT 88
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: IN
13345: OR
13346: IFFALSE 13379
// arVehicles := Join ( arVehicles , [ base , vehicle ] ) else
13348: LD_ADDR_EXP 45
13352: PUSH
13353: LD_EXP 45
13357: PPUSH
13358: LD_VAR 0 6
13362: PUSH
13363: LD_VAR 0 1
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PPUSH
13372: CALL 54231 0 2
13376: ST_TO_ADDR
13377: GO 13408
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , [ base , vehicle ] ) ;
13379: LD_ADDR_EXP 46
13383: PUSH
13384: LD_EXP 46
13388: PPUSH
13389: LD_VAR 0 6
13393: PUSH
13394: LD_VAR 0 1
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PPUSH
13403: CALL 54231 0 2
13407: ST_TO_ADDR
// end ; end ;
13408: PPOPN 7
13410: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
13411: LD_VAR 0 1
13415: PPUSH
13416: CALL_OW 110
13420: PUSH
13421: LD_INT 7
13423: EQUAL
13424: IFFALSE 13438
// SetTag ( driver , 0 ) ;
13426: LD_VAR 0 1
13430: PPUSH
13431: LD_INT 0
13433: PPUSH
13434: CALL_OW 109
// end ; end_of_file
13438: PPOPN 4
13440: END
// every 0 0$20 trigger game do
13441: LD_EXP 2
13445: IFFALSE 13490
13447: GO 13449
13449: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
13450: LD_INT 7
13452: PUSH
13453: LD_INT 6
13455: PUSH
13456: LD_INT 4
13458: PUSH
13459: LD_INT 6
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: PPUSH
13468: LD_EXP 21
13472: PUSH
13473: LD_INT 2
13475: ARRAY
13476: PPUSH
13477: LD_EXP 21
13481: PUSH
13482: LD_INT 1
13484: ARRAY
13485: PPUSH
13486: CALL 13491 0 3
13490: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , players_areas ; begin
13491: LD_INT 0
13493: PPUSH
13494: PPUSH
13495: PPUSH
13496: PPUSH
// if not areas then
13497: LD_VAR 0 1
13501: NOT
13502: IFFALSE 13506
// exit ;
13504: GO 13781
// players_areas := [ crates_player_west , crates_player_south , crates_player_east ] ;
13506: LD_ADDR_VAR 0 7
13510: PUSH
13511: LD_INT 31
13513: PUSH
13514: LD_INT 32
13516: PUSH
13517: LD_INT 30
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: LIST
13524: ST_TO_ADDR
// x := 5 ;
13525: LD_ADDR_VAR 0 6
13529: PUSH
13530: LD_INT 5
13532: ST_TO_ADDR
// repeat wait ( time ) ;
13533: LD_VAR 0 2
13537: PPUSH
13538: CALL_OW 67
// if tick < [ 25 25$00 , 23 23$00 , 21 21$00 ] [ Difficulty ] then
13542: LD_OWVAR 1
13546: PUSH
13547: LD_INT 52500
13549: PUSH
13550: LD_INT 48300
13552: PUSH
13553: LD_INT 44100
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: LIST
13560: PUSH
13561: LD_OWVAR 67
13565: ARRAY
13566: LESS
13567: IFFALSE 13639
// begin for i := 1 to multi_sides do
13569: LD_ADDR_VAR 0 5
13573: PUSH
13574: DOUBLE
13575: LD_INT 1
13577: DEC
13578: ST_TO_ADDR
13579: LD_EXP 7
13583: PUSH
13584: FOR_TO
13585: IFFALSE 13630
// if multi_sides [ i ] then
13587: LD_EXP 7
13591: PUSH
13592: LD_VAR 0 5
13596: ARRAY
13597: IFFALSE 13628
// CreateCratesArea ( x , players_areas [ multi_sides [ i ] ] , true ) ;
13599: LD_VAR 0 6
13603: PPUSH
13604: LD_VAR 0 7
13608: PUSH
13609: LD_EXP 7
13613: PUSH
13614: LD_VAR 0 5
13618: ARRAY
13619: ARRAY
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: CALL_OW 55
13628: GO 13584
13630: POP
13631: POP
// wait ( 0 0$2 ) ;
13632: LD_INT 70
13634: PPUSH
13635: CALL_OW 67
// end ; for i in areas do
13639: LD_ADDR_VAR 0 5
13643: PUSH
13644: LD_VAR 0 1
13648: PUSH
13649: FOR_IN
13650: IFFALSE 13678
// begin wait ( 0 0$5 ) ;
13652: LD_INT 175
13654: PPUSH
13655: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
13659: LD_VAR 0 6
13663: PPUSH
13664: LD_VAR 0 5
13668: PPUSH
13669: LD_INT 1
13671: PPUSH
13672: CALL_OW 55
// end ;
13676: GO 13649
13678: POP
13679: POP
// time := time + 0 0$2 ;
13680: LD_ADDR_VAR 0 2
13684: PUSH
13685: LD_VAR 0 2
13689: PUSH
13690: LD_INT 70
13692: PLUS
13693: ST_TO_ADDR
// amount := amount - x * 10 ;
13694: LD_ADDR_VAR 0 3
13698: PUSH
13699: LD_VAR 0 3
13703: PUSH
13704: LD_VAR 0 6
13708: PUSH
13709: LD_INT 10
13711: MUL
13712: MINUS
13713: ST_TO_ADDR
// x := x - 1 ;
13714: LD_ADDR_VAR 0 6
13718: PUSH
13719: LD_VAR 0 6
13723: PUSH
13724: LD_INT 1
13726: MINUS
13727: ST_TO_ADDR
// if x = 0 then
13728: LD_VAR 0 6
13732: PUSH
13733: LD_INT 0
13735: EQUAL
13736: IFFALSE 13746
// x := 5 ;
13738: LD_ADDR_VAR 0 6
13742: PUSH
13743: LD_INT 5
13745: ST_TO_ADDR
// if time > 2 2$00 then
13746: LD_VAR 0 2
13750: PUSH
13751: LD_INT 4200
13753: GREATER
13754: IFFALSE 13764
// time := 0 0$30 ;
13756: LD_ADDR_VAR 0 2
13760: PUSH
13761: LD_INT 1050
13763: ST_TO_ADDR
// until not game or amount <= 0 ;
13764: LD_EXP 2
13768: NOT
13769: PUSH
13770: LD_VAR 0 3
13774: PUSH
13775: LD_INT 0
13777: LESSEQUAL
13778: OR
13779: IFFALSE 13533
// end ; end_of_file
13781: LD_VAR 0 4
13785: RET
// var NorthBase , WestBase ; every 0 0$1 do var i ;
13786: GO 13788
13788: DISABLE
13789: LD_INT 0
13791: PPUSH
// begin NorthBase := 2 ;
13792: LD_ADDR_LOC 1
13796: PUSH
13797: LD_INT 2
13799: ST_TO_ADDR
// WestBase := 3 ;
13800: LD_ADDR_LOC 2
13804: PUSH
13805: LD_INT 3
13807: ST_TO_ADDR
// end ;
13808: PPOPN 1
13810: END
// every 10 10$00 do var i ;
13811: GO 13813
13813: DISABLE
13814: LD_INT 0
13816: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
13817: LD_ADDR_VAR 0 1
13821: PUSH
13822: DOUBLE
13823: LD_INT 1
13825: DEC
13826: ST_TO_ADDR
13827: LD_INT 3
13829: PUSH
13830: LD_INT 4
13832: PUSH
13833: LD_INT 5
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: LIST
13840: PUSH
13841: LD_OWVAR 67
13845: ARRAY
13846: PUSH
13847: FOR_TO
13848: IFFALSE 13949
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
13850: LD_ADDR_EXP 43
13854: PUSH
13855: LD_EXP 43
13859: PPUSH
13860: LD_EXP 43
13864: PUSH
13865: LD_INT 1
13867: PLUS
13868: PPUSH
13869: LD_LOC 1
13873: PUSH
13874: LD_INT 14
13876: PUSH
13877: LD_INT 3
13879: PUSH
13880: LD_INT 1
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 1
13889: PPUSH
13890: LD_INT 2
13892: PPUSH
13893: CALL_OW 12
13897: ARRAY
13898: PUSH
13899: LD_INT 2
13901: PUSH
13902: LD_INT 27
13904: PUSH
13905: LD_INT 25
13907: PUSH
13908: LD_INT 28
13910: PUSH
13911: LD_INT 29
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 1
13922: PPUSH
13923: LD_INT 4
13925: PPUSH
13926: CALL_OW 12
13930: ARRAY
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PPUSH
13942: CALL_OW 1
13946: ST_TO_ADDR
// end ;
13947: GO 13847
13949: POP
13950: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
13951: LD_ADDR_VAR 0 1
13955: PUSH
13956: DOUBLE
13957: LD_INT 1
13959: DEC
13960: ST_TO_ADDR
13961: LD_INT 3
13963: PUSH
13964: LD_INT 4
13966: PUSH
13967: LD_INT 5
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: LIST
13974: PUSH
13975: LD_OWVAR 67
13979: ARRAY
13980: PUSH
13981: FOR_TO
13982: IFFALSE 14064
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
13984: LD_ADDR_EXP 43
13988: PUSH
13989: LD_EXP 43
13993: PPUSH
13994: LD_EXP 43
13998: PUSH
13999: LD_INT 1
14001: PLUS
14002: PPUSH
14003: LD_LOC 2
14007: PUSH
14008: LD_INT 14
14010: PUSH
14011: LD_INT 1
14013: PUSH
14014: LD_INT 2
14016: PUSH
14017: LD_INT 27
14019: PUSH
14020: LD_INT 25
14022: PUSH
14023: LD_INT 28
14025: PUSH
14026: LD_INT 26
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 1
14037: PPUSH
14038: LD_INT 4
14040: PPUSH
14041: CALL_OW 12
14045: ARRAY
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PPUSH
14057: CALL_OW 1
14061: ST_TO_ADDR
// end ;
14062: GO 13981
14064: POP
14065: POP
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
14066: LD_INT 16800
14068: PUSH
14069: LD_INT 2100
14071: PUSH
14072: LD_OWVAR 67
14076: MUL
14077: MINUS
14078: PPUSH
14079: CALL_OW 67
// for i := 1 to [ 5 , 5 , 6 ] [ Difficulty ] do
14083: LD_ADDR_VAR 0 1
14087: PUSH
14088: DOUBLE
14089: LD_INT 1
14091: DEC
14092: ST_TO_ADDR
14093: LD_INT 5
14095: PUSH
14096: LD_INT 5
14098: PUSH
14099: LD_INT 6
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: LIST
14106: PUSH
14107: LD_OWVAR 67
14111: ARRAY
14112: PUSH
14113: FOR_TO
14114: IFFALSE 14215
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14116: LD_ADDR_EXP 43
14120: PUSH
14121: LD_EXP 43
14125: PPUSH
14126: LD_EXP 43
14130: PUSH
14131: LD_INT 1
14133: PLUS
14134: PPUSH
14135: LD_LOC 1
14139: PUSH
14140: LD_INT 14
14142: PUSH
14143: LD_INT 3
14145: PUSH
14146: LD_INT 1
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PUSH
14153: LD_INT 1
14155: PPUSH
14156: LD_INT 2
14158: PPUSH
14159: CALL_OW 12
14163: ARRAY
14164: PUSH
14165: LD_INT 2
14167: PUSH
14168: LD_INT 27
14170: PUSH
14171: LD_INT 25
14173: PUSH
14174: LD_INT 28
14176: PUSH
14177: LD_INT 29
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 1
14188: PPUSH
14189: LD_INT 4
14191: PPUSH
14192: CALL_OW 12
14196: ARRAY
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PPUSH
14208: CALL_OW 1
14212: ST_TO_ADDR
// end ;
14213: GO 14113
14215: POP
14216: POP
// if tick > 30 30$0 then
14217: LD_OWVAR 1
14221: PUSH
14222: LD_INT 63000
14224: GREATER
14225: IFFALSE 14301
// begin for i := 1 to tick div 30 30$0 do
14227: LD_ADDR_VAR 0 1
14231: PUSH
14232: DOUBLE
14233: LD_INT 1
14235: DEC
14236: ST_TO_ADDR
14237: LD_OWVAR 1
14241: PUSH
14242: LD_INT 63000
14244: DIV
14245: PUSH
14246: FOR_TO
14247: IFFALSE 14299
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
14249: LD_ADDR_EXP 43
14253: PUSH
14254: LD_EXP 43
14258: PPUSH
14259: LD_EXP 43
14263: PUSH
14264: LD_INT 1
14266: PLUS
14267: PPUSH
14268: LD_LOC 1
14272: PUSH
14273: LD_INT 14
14275: PUSH
14276: LD_INT 3
14278: PUSH
14279: LD_INT 2
14281: PUSH
14282: LD_INT 29
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: PPUSH
14292: CALL_OW 1
14296: ST_TO_ADDR
14297: GO 14246
14299: POP
14300: POP
// end ; for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
14301: LD_ADDR_VAR 0 1
14305: PUSH
14306: DOUBLE
14307: LD_INT 1
14309: DEC
14310: ST_TO_ADDR
14311: LD_INT 5
14313: PUSH
14314: LD_INT 6
14316: PUSH
14317: LD_INT 6
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: LIST
14324: PUSH
14325: LD_OWVAR 67
14329: ARRAY
14330: PUSH
14331: FOR_TO
14332: IFFALSE 14414
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14334: LD_ADDR_EXP 43
14338: PUSH
14339: LD_EXP 43
14343: PPUSH
14344: LD_EXP 43
14348: PUSH
14349: LD_INT 1
14351: PLUS
14352: PPUSH
14353: LD_LOC 2
14357: PUSH
14358: LD_INT 14
14360: PUSH
14361: LD_INT 1
14363: PUSH
14364: LD_INT 2
14366: PUSH
14367: LD_INT 27
14369: PUSH
14370: LD_INT 25
14372: PUSH
14373: LD_INT 28
14375: PUSH
14376: LD_INT 26
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 1
14387: PPUSH
14388: LD_INT 4
14390: PPUSH
14391: CALL_OW 12
14395: ARRAY
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PPUSH
14407: CALL_OW 1
14411: ST_TO_ADDR
// end ;
14412: GO 14331
14414: POP
14415: POP
// repeat wait ( [ 10 10$0 , 9 9$0 , 8 8$0 ] [ Difficulty ] ) ;
14416: LD_INT 21000
14418: PUSH
14419: LD_INT 18900
14421: PUSH
14422: LD_INT 16800
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: PUSH
14430: LD_OWVAR 67
14434: ARRAY
14435: PPUSH
14436: CALL_OW 67
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
14440: LD_ADDR_VAR 0 1
14444: PUSH
14445: DOUBLE
14446: LD_INT 1
14448: DEC
14449: ST_TO_ADDR
14450: LD_INT 5
14452: PUSH
14453: LD_INT 6
14455: PUSH
14456: LD_INT 7
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: LIST
14463: PUSH
14464: LD_OWVAR 67
14468: ARRAY
14469: PUSH
14470: FOR_TO
14471: IFFALSE 14572
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14473: LD_ADDR_EXP 43
14477: PUSH
14478: LD_EXP 43
14482: PPUSH
14483: LD_EXP 43
14487: PUSH
14488: LD_INT 1
14490: PLUS
14491: PPUSH
14492: LD_LOC 1
14496: PUSH
14497: LD_INT 14
14499: PUSH
14500: LD_INT 3
14502: PUSH
14503: LD_INT 1
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 1
14512: PPUSH
14513: LD_INT 2
14515: PPUSH
14516: CALL_OW 12
14520: ARRAY
14521: PUSH
14522: LD_INT 2
14524: PUSH
14525: LD_INT 27
14527: PUSH
14528: LD_INT 25
14530: PUSH
14531: LD_INT 28
14533: PUSH
14534: LD_INT 29
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: PUSH
14543: LD_INT 1
14545: PPUSH
14546: LD_INT 4
14548: PPUSH
14549: CALL_OW 12
14553: ARRAY
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PPUSH
14565: CALL_OW 1
14569: ST_TO_ADDR
// end ;
14570: GO 14470
14572: POP
14573: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
14574: LD_ADDR_VAR 0 1
14578: PUSH
14579: DOUBLE
14580: LD_INT 1
14582: DEC
14583: ST_TO_ADDR
14584: LD_INT 4
14586: PUSH
14587: LD_INT 5
14589: PUSH
14590: LD_INT 6
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: LIST
14597: PUSH
14598: LD_OWVAR 67
14602: ARRAY
14603: PUSH
14604: FOR_TO
14605: IFFALSE 14687
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14607: LD_ADDR_EXP 43
14611: PUSH
14612: LD_EXP 43
14616: PPUSH
14617: LD_EXP 43
14621: PUSH
14622: LD_INT 1
14624: PLUS
14625: PPUSH
14626: LD_LOC 2
14630: PUSH
14631: LD_INT 14
14633: PUSH
14634: LD_INT 1
14636: PUSH
14637: LD_INT 2
14639: PUSH
14640: LD_INT 27
14642: PUSH
14643: LD_INT 25
14645: PUSH
14646: LD_INT 28
14648: PUSH
14649: LD_INT 26
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 1
14660: PPUSH
14661: LD_INT 4
14663: PPUSH
14664: CALL_OW 12
14668: ARRAY
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PPUSH
14680: CALL_OW 1
14684: ST_TO_ADDR
// end ;
14685: GO 14604
14687: POP
14688: POP
// until false ;
14689: LD_INT 0
14691: IFFALSE 14416
// end ;
14693: PPOPN 1
14695: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) do var i , tmp ;
14696: LD_EXP 46
14700: PPUSH
14701: LD_INT 1
14703: PPUSH
14704: LD_LOC 1
14708: PPUSH
14709: LD_INT 2
14711: PPUSH
14712: CALL 58761 0 4
14716: IFFALSE 14885
14718: GO 14720
14720: DISABLE
14721: LD_INT 0
14723: PPUSH
14724: PPUSH
// begin enable ;
14725: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) ;
14726: LD_ADDR_VAR 0 2
14730: PUSH
14731: LD_EXP 46
14735: PPUSH
14736: LD_INT 1
14738: PPUSH
14739: LD_LOC 1
14743: PPUSH
14744: LD_INT 2
14746: PPUSH
14747: CALL 58761 0 4
14751: ST_TO_ADDR
// if not tmp then
14752: LD_VAR 0 2
14756: NOT
14757: IFFALSE 14761
// exit ;
14759: GO 14885
// for i := Count ( arVehiclesAtttackers ) downto 1 do
14761: LD_ADDR_VAR 0 1
14765: PUSH
14766: DOUBLE
14767: LD_EXP 46
14771: PPUSH
14772: CALL 18642 0 1
14776: INC
14777: ST_TO_ADDR
14778: LD_INT 1
14780: PUSH
14781: FOR_DOWNTO
14782: IFFALSE 14828
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
14784: LD_EXP 46
14788: PUSH
14789: LD_VAR 0 1
14793: ARRAY
14794: PUSH
14795: LD_INT 2
14797: ARRAY
14798: PUSH
14799: LD_VAR 0 2
14803: IN
14804: IFFALSE 14826
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
14806: LD_ADDR_EXP 46
14810: PUSH
14811: LD_EXP 46
14815: PPUSH
14816: LD_VAR 0 1
14820: PPUSH
14821: CALL_OW 3
14825: ST_TO_ADDR
14826: GO 14781
14828: POP
14829: POP
// SendToAttack ( tmp , [ [ 164 , 40 ] , [ 174 , 72 ] , [ 174 , 93 ] , [ 196 , 110 ] ] ) ;
14830: LD_VAR 0 2
14834: PPUSH
14835: LD_INT 164
14837: PUSH
14838: LD_INT 40
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 174
14847: PUSH
14848: LD_INT 72
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 174
14857: PUSH
14858: LD_INT 93
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 196
14867: PUSH
14868: LD_INT 110
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: PPUSH
14881: CALL 15080 0 2
// end ;
14885: PPOPN 2
14887: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) do var i , tmp ;
14888: LD_EXP 46
14892: PPUSH
14893: LD_INT 1
14895: PPUSH
14896: LD_LOC 2
14900: PPUSH
14901: LD_INT 2
14903: PPUSH
14904: CALL 58761 0 4
14908: IFFALSE 15077
14910: GO 14912
14912: DISABLE
14913: LD_INT 0
14915: PPUSH
14916: PPUSH
// begin enable ;
14917: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) ;
14918: LD_ADDR_VAR 0 2
14922: PUSH
14923: LD_EXP 46
14927: PPUSH
14928: LD_INT 1
14930: PPUSH
14931: LD_LOC 2
14935: PPUSH
14936: LD_INT 2
14938: PPUSH
14939: CALL 58761 0 4
14943: ST_TO_ADDR
// if not tmp then
14944: LD_VAR 0 2
14948: NOT
14949: IFFALSE 14953
// exit ;
14951: GO 15077
// for i := Count ( arVehiclesAtttackers ) downto 1 do
14953: LD_ADDR_VAR 0 1
14957: PUSH
14958: DOUBLE
14959: LD_EXP 46
14963: PPUSH
14964: CALL 18642 0 1
14968: INC
14969: ST_TO_ADDR
14970: LD_INT 1
14972: PUSH
14973: FOR_DOWNTO
14974: IFFALSE 15020
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
14976: LD_EXP 46
14980: PUSH
14981: LD_VAR 0 1
14985: ARRAY
14986: PUSH
14987: LD_INT 2
14989: ARRAY
14990: PUSH
14991: LD_VAR 0 2
14995: IN
14996: IFFALSE 15018
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
14998: LD_ADDR_EXP 46
15002: PUSH
15003: LD_EXP 46
15007: PPUSH
15008: LD_VAR 0 1
15012: PPUSH
15013: CALL_OW 3
15017: ST_TO_ADDR
15018: GO 14973
15020: POP
15021: POP
// SendToAttack ( tmp , [ [ 49 , 37 ] , [ 54 , 68 ] , [ 77 , 91 ] , [ 95 , 104 ] ] ) ;
15022: LD_VAR 0 2
15026: PPUSH
15027: LD_INT 49
15029: PUSH
15030: LD_INT 37
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 54
15039: PUSH
15040: LD_INT 68
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: LD_INT 77
15049: PUSH
15050: LD_INT 91
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: LD_INT 95
15059: PUSH
15060: LD_INT 104
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: PPUSH
15073: CALL 15080 0 2
// end ;
15077: PPOPN 2
15079: END
// function SendToAttack ( attackers , path ) ; var i ; begin
15080: LD_INT 0
15082: PPUSH
15083: PPUSH
// repeat wait ( 0 0$1 ) ;
15084: LD_INT 35
15086: PPUSH
15087: CALL_OW 67
// for i in attackers do
15091: LD_ADDR_VAR 0 4
15095: PUSH
15096: LD_VAR 0 1
15100: PUSH
15101: FOR_IN
15102: IFFALSE 15159
// begin if not IsOk ( i ) then
15104: LD_VAR 0 4
15108: PPUSH
15109: CALL_OW 302
15113: NOT
15114: IFFALSE 15143
// begin ComUnlink ( i ) ;
15116: LD_VAR 0 4
15120: PPUSH
15121: CALL_OW 136
// attackers := attackers diff i ;
15125: LD_ADDR_VAR 0 1
15129: PUSH
15130: LD_VAR 0 1
15134: PUSH
15135: LD_VAR 0 4
15139: DIFF
15140: ST_TO_ADDR
// continue ;
15141: GO 15101
// end ; AgressiveMove ( i , path ) ;
15143: LD_VAR 0 4
15147: PPUSH
15148: LD_VAR 0 2
15152: PPUSH
15153: CALL 56835 0 2
// end ;
15157: GO 15101
15159: POP
15160: POP
// until not UnitFilter ( attackers , [ f_ok ] ) ;
15161: LD_VAR 0 1
15165: PPUSH
15166: LD_INT 50
15168: PUSH
15169: EMPTY
15170: LIST
15171: PPUSH
15172: CALL_OW 72
15176: NOT
15177: IFFALSE 15084
// end ;
15179: LD_VAR 0 3
15183: RET
// every 0 0$10 trigger not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot do var i , un , tmp , enemy ;
15184: LD_INT 7
15186: PPUSH
15187: CALL_OW 302
15191: NOT
15192: PUSH
15193: LD_INT 7
15195: PPUSH
15196: CALL_OW 255
15200: PUSH
15201: LD_EXP 3
15205: NONEQUAL
15206: OR
15207: IFFALSE 15572
15209: GO 15211
15211: DISABLE
15212: LD_INT 0
15214: PPUSH
15215: PPUSH
15216: PPUSH
15217: PPUSH
// begin for i := 1 to 3 do
15218: LD_ADDR_VAR 0 1
15222: PUSH
15223: DOUBLE
15224: LD_INT 1
15226: DEC
15227: ST_TO_ADDR
15228: LD_INT 3
15230: PUSH
15231: FOR_TO
15232: IFFALSE 15382
// begin uc_side := 2 ;
15234: LD_ADDR_OWVAR 20
15238: PUSH
15239: LD_INT 2
15241: ST_TO_ADDR
// uc_nation := nation_arabian ;
15242: LD_ADDR_OWVAR 21
15246: PUSH
15247: LD_INT 2
15249: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_remote , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
15250: LD_INT 11
15252: PPUSH
15253: LD_INT 1
15255: PPUSH
15256: LD_INT 2
15258: PPUSH
15259: LD_INT 24
15261: PUSH
15262: LD_INT 23
15264: PUSH
15265: LD_INT 92
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 1
15275: PPUSH
15276: LD_INT 3
15278: PPUSH
15279: CALL_OW 12
15283: ARRAY
15284: PPUSH
15285: LD_INT 100
15287: PPUSH
15288: CALL 21380 0 5
// un := CreateVehicle ;
15292: LD_ADDR_VAR 0 2
15296: PUSH
15297: CALL_OW 45
15301: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15302: LD_VAR 0 2
15306: PPUSH
15307: LD_INT 2
15309: PPUSH
15310: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
15314: LD_VAR 0 2
15318: PPUSH
15319: LD_INT 47
15321: PPUSH
15322: LD_INT 0
15324: PPUSH
15325: CALL_OW 49
// Connect ( un ) ;
15329: LD_VAR 0 2
15333: PPUSH
15334: CALL 24848 0 1
// wait ( 0 0$0.3 ) ;
15338: LD_INT 10
15340: PPUSH
15341: CALL_OW 67
// ComMoveXY ( un , 73 , 17 ) ;
15345: LD_VAR 0 2
15349: PPUSH
15350: LD_INT 73
15352: PPUSH
15353: LD_INT 17
15355: PPUSH
15356: CALL_OW 111
// tmp := Join ( tmp , un ) ;
15360: LD_ADDR_VAR 0 3
15364: PUSH
15365: LD_VAR 0 3
15369: PPUSH
15370: LD_VAR 0 2
15374: PPUSH
15375: CALL 54231 0 2
15379: ST_TO_ADDR
// end ;
15380: GO 15231
15382: POP
15383: POP
// repeat wait ( 0 0$1 ) ;
15384: LD_INT 35
15386: PPUSH
15387: CALL_OW 67
// for i in tmp do
15391: LD_ADDR_VAR 0 1
15395: PUSH
15396: LD_VAR 0 3
15400: PUSH
15401: FOR_IN
15402: IFFALSE 15563
// begin if not IsOk ( i ) then
15404: LD_VAR 0 1
15408: PPUSH
15409: CALL_OW 302
15413: NOT
15414: IFFALSE 15443
// begin ComAutodestruct ( i ) ;
15416: LD_VAR 0 1
15420: PPUSH
15421: CALL 49743 0 1
// tmp := tmp diff i ;
15425: LD_ADDR_VAR 0 3
15429: PUSH
15430: LD_VAR 0 3
15434: PUSH
15435: LD_VAR 0 1
15439: DIFF
15440: ST_TO_ADDR
// continue ;
15441: GO 15401
// end ; if GetLives ( i ) < 750 then
15443: LD_VAR 0 1
15447: PPUSH
15448: CALL_OW 256
15452: PUSH
15453: LD_INT 750
15455: LESS
15456: IFFALSE 15517
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
15458: LD_ADDR_VAR 0 4
15462: PUSH
15463: LD_INT 81
15465: PUSH
15466: LD_VAR 0 1
15470: PPUSH
15471: CALL_OW 255
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PPUSH
15480: CALL_OW 69
15484: PPUSH
15485: LD_VAR 0 1
15489: PPUSH
15490: CALL_OW 74
15494: ST_TO_ADDR
// if enemy then
15495: LD_VAR 0 4
15499: IFFALSE 15515
// ComMoveUnit ( i , enemy ) ;
15501: LD_VAR 0 1
15505: PPUSH
15506: LD_VAR 0 4
15510: PPUSH
15511: CALL_OW 112
// end else
15515: GO 15561
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
15517: LD_VAR 0 1
15521: PPUSH
15522: LD_INT 76
15524: PUSH
15525: LD_INT 31
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 93
15534: PUSH
15535: LD_INT 67
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 108
15544: PUSH
15545: LD_INT 97
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: PPUSH
15557: CALL 56835 0 2
// end ;
15561: GO 15401
15563: POP
15564: POP
// until not tmp ;
15565: LD_VAR 0 3
15569: NOT
15570: IFFALSE 15384
// end ;
15572: PPOPN 4
15574: END
// every 18 18$00 trigger ( not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot ) and ( IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) = side_bot ) do var i , un , tmp , enemy ;
15575: LD_INT 7
15577: PPUSH
15578: CALL_OW 302
15582: NOT
15583: PUSH
15584: LD_INT 7
15586: PPUSH
15587: CALL_OW 255
15591: PUSH
15592: LD_EXP 3
15596: NONEQUAL
15597: OR
15598: PUSH
15599: LD_INT 45
15601: PPUSH
15602: CALL_OW 302
15606: PUSH
15607: LD_INT 45
15609: PPUSH
15610: CALL_OW 255
15614: PUSH
15615: LD_EXP 3
15619: EQUAL
15620: AND
15621: AND
15622: IFFALSE 15979
15624: GO 15626
15626: DISABLE
15627: LD_INT 0
15629: PPUSH
15630: PPUSH
15631: PPUSH
15632: PPUSH
// begin enable ;
15633: ENABLE
// for i := 1 to 3 do
15634: LD_ADDR_VAR 0 1
15638: PUSH
15639: DOUBLE
15640: LD_INT 1
15642: DEC
15643: ST_TO_ADDR
15644: LD_INT 3
15646: PUSH
15647: FOR_TO
15648: IFFALSE 15789
// begin uc_side := 2 ;
15650: LD_ADDR_OWVAR 20
15654: PUSH
15655: LD_INT 2
15657: ST_TO_ADDR
// uc_nation := nation_arabian ;
15658: LD_ADDR_OWVAR 21
15662: PUSH
15663: LD_INT 2
15665: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
15666: LD_INT 11
15668: PPUSH
15669: LD_INT 1
15671: PPUSH
15672: LD_INT 5
15674: PPUSH
15675: LD_INT 24
15677: PUSH
15678: LD_INT 23
15680: PUSH
15681: LD_INT 92
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 1
15691: PPUSH
15692: LD_INT 3
15694: PPUSH
15695: CALL_OW 12
15699: ARRAY
15700: PPUSH
15701: LD_INT 100
15703: PPUSH
15704: CALL 21380 0 5
// un := CreateVehicle ;
15708: LD_ADDR_VAR 0 2
15712: PUSH
15713: CALL_OW 45
15717: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15718: LD_VAR 0 2
15722: PPUSH
15723: LD_INT 2
15725: PPUSH
15726: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
15730: LD_VAR 0 2
15734: PPUSH
15735: LD_INT 47
15737: PPUSH
15738: LD_INT 0
15740: PPUSH
15741: CALL_OW 49
// wait ( 0 0$0.3 ) ;
15745: LD_INT 10
15747: PPUSH
15748: CALL_OW 67
// ComMoveXY ( un , 73 , 17 ) ;
15752: LD_VAR 0 2
15756: PPUSH
15757: LD_INT 73
15759: PPUSH
15760: LD_INT 17
15762: PPUSH
15763: CALL_OW 111
// tmp := Join ( tmp , un ) ;
15767: LD_ADDR_VAR 0 3
15771: PUSH
15772: LD_VAR 0 3
15776: PPUSH
15777: LD_VAR 0 2
15781: PPUSH
15782: CALL 54231 0 2
15786: ST_TO_ADDR
// end ;
15787: GO 15647
15789: POP
15790: POP
// repeat wait ( 0 0$1 ) ;
15791: LD_INT 35
15793: PPUSH
15794: CALL_OW 67
// for i in tmp do
15798: LD_ADDR_VAR 0 1
15802: PUSH
15803: LD_VAR 0 3
15807: PUSH
15808: FOR_IN
15809: IFFALSE 15970
// begin if not IsOk ( i ) then
15811: LD_VAR 0 1
15815: PPUSH
15816: CALL_OW 302
15820: NOT
15821: IFFALSE 15850
// begin ComAutodestruct ( i ) ;
15823: LD_VAR 0 1
15827: PPUSH
15828: CALL 49743 0 1
// tmp := tmp diff i ;
15832: LD_ADDR_VAR 0 3
15836: PUSH
15837: LD_VAR 0 3
15841: PUSH
15842: LD_VAR 0 1
15846: DIFF
15847: ST_TO_ADDR
// continue ;
15848: GO 15808
// end ; if GetLives ( i ) < 750 then
15850: LD_VAR 0 1
15854: PPUSH
15855: CALL_OW 256
15859: PUSH
15860: LD_INT 750
15862: LESS
15863: IFFALSE 15924
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
15865: LD_ADDR_VAR 0 4
15869: PUSH
15870: LD_INT 81
15872: PUSH
15873: LD_VAR 0 1
15877: PPUSH
15878: CALL_OW 255
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PPUSH
15887: CALL_OW 69
15891: PPUSH
15892: LD_VAR 0 1
15896: PPUSH
15897: CALL_OW 74
15901: ST_TO_ADDR
// if enemy then
15902: LD_VAR 0 4
15906: IFFALSE 15922
// ComMoveUnit ( i , enemy ) ;
15908: LD_VAR 0 1
15912: PPUSH
15913: LD_VAR 0 4
15917: PPUSH
15918: CALL_OW 112
// end else
15922: GO 15968
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
15924: LD_VAR 0 1
15928: PPUSH
15929: LD_INT 76
15931: PUSH
15932: LD_INT 31
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 93
15941: PUSH
15942: LD_INT 67
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 108
15951: PUSH
15952: LD_INT 97
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: LIST
15963: PPUSH
15964: CALL 56835 0 2
// end ;
15968: GO 15808
15970: POP
15971: POP
// until not tmp ;
15972: LD_VAR 0 3
15976: NOT
15977: IFFALSE 15791
// end ;
15979: PPOPN 4
15981: END
// every 0 0$10 trigger not IsOk ( ar_dep_e ) or GetSide ( ar_dep_e ) <> side_bot do var i , un , tmp , enemy ;
15982: LD_INT 69
15984: PPUSH
15985: CALL_OW 302
15989: NOT
15990: PUSH
15991: LD_INT 69
15993: PPUSH
15994: CALL_OW 255
15998: PUSH
15999: LD_EXP 3
16003: NONEQUAL
16004: OR
16005: IFFALSE 16258
16007: GO 16009
16009: DISABLE
16010: LD_INT 0
16012: PPUSH
16013: PPUSH
16014: PPUSH
16015: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
16016: LD_ADDR_VAR 0 1
16020: PUSH
16021: DOUBLE
16022: LD_INT 1
16024: DEC
16025: ST_TO_ADDR
16026: LD_INT 2
16028: PUSH
16029: LD_INT 3
16031: PUSH
16032: LD_INT 4
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: LIST
16039: PUSH
16040: LD_OWVAR 67
16044: ARRAY
16045: PUSH
16046: FOR_TO
16047: IFFALSE 16138
// begin uc_side := side_bot ;
16049: LD_ADDR_OWVAR 20
16053: PUSH
16054: LD_EXP 3
16058: ST_TO_ADDR
// uc_nation := nation_nature ;
16059: LD_ADDR_OWVAR 21
16063: PUSH
16064: LD_INT 0
16066: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16067: CALL 50341 0 0
// hc_class := class_apeman_kamikaze ;
16071: LD_ADDR_OWVAR 28
16075: PUSH
16076: LD_INT 17
16078: ST_TO_ADDR
// un := CreateHuman ;
16079: LD_ADDR_VAR 0 2
16083: PUSH
16084: CALL_OW 44
16088: ST_TO_ADDR
// SetDir ( un , 4 ) ;
16089: LD_VAR 0 2
16093: PPUSH
16094: LD_INT 4
16096: PPUSH
16097: CALL_OW 233
// PlaceUnitArea ( un , east_ape_spawn , false ) ;
16101: LD_VAR 0 2
16105: PPUSH
16106: LD_INT 48
16108: PPUSH
16109: LD_INT 0
16111: PPUSH
16112: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16116: LD_ADDR_VAR 0 3
16120: PUSH
16121: LD_VAR 0 3
16125: PPUSH
16126: LD_VAR 0 2
16130: PPUSH
16131: CALL 54231 0 2
16135: ST_TO_ADDR
// end ;
16136: GO 16046
16138: POP
16139: POP
// repeat wait ( 0 0$1 ) ;
16140: LD_INT 35
16142: PPUSH
16143: CALL_OW 67
// for i in tmp do
16147: LD_ADDR_VAR 0 1
16151: PUSH
16152: LD_VAR 0 3
16156: PUSH
16157: FOR_IN
16158: IFFALSE 16249
// begin if not IsOk ( i ) then
16160: LD_VAR 0 1
16164: PPUSH
16165: CALL_OW 302
16169: NOT
16170: IFFALSE 16190
// begin tmp := tmp diff i ;
16172: LD_ADDR_VAR 0 3
16176: PUSH
16177: LD_VAR 0 3
16181: PUSH
16182: LD_VAR 0 1
16186: DIFF
16187: ST_TO_ADDR
// continue ;
16188: GO 16157
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16190: LD_ADDR_VAR 0 4
16194: PUSH
16195: LD_INT 81
16197: PUSH
16198: LD_VAR 0 1
16202: PPUSH
16203: CALL_OW 255
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PPUSH
16212: CALL_OW 69
16216: PPUSH
16217: LD_VAR 0 1
16221: PPUSH
16222: CALL_OW 74
16226: ST_TO_ADDR
// if enemy then
16227: LD_VAR 0 4
16231: IFFALSE 16247
// ComAttackUnit ( i , enemy ) ;
16233: LD_VAR 0 1
16237: PPUSH
16238: LD_VAR 0 4
16242: PPUSH
16243: CALL_OW 115
// end ;
16247: GO 16157
16249: POP
16250: POP
// until not tmp ;
16251: LD_VAR 0 3
16255: NOT
16256: IFFALSE 16140
// end ;
16258: PPOPN 4
16260: END
// every 0 0$10 trigger not IsOk ( ar_dep_w ) or GetSide ( ar_dep_w ) <> side_bot do var i , un , tmp , enemy ;
16261: LD_INT 45
16263: PPUSH
16264: CALL_OW 302
16268: NOT
16269: PUSH
16270: LD_INT 45
16272: PPUSH
16273: CALL_OW 255
16277: PUSH
16278: LD_EXP 3
16282: NONEQUAL
16283: OR
16284: IFFALSE 16537
16286: GO 16288
16288: DISABLE
16289: LD_INT 0
16291: PPUSH
16292: PPUSH
16293: PPUSH
16294: PPUSH
// begin for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
16295: LD_ADDR_VAR 0 1
16299: PUSH
16300: DOUBLE
16301: LD_INT 1
16303: DEC
16304: ST_TO_ADDR
16305: LD_INT 2
16307: PUSH
16308: LD_INT 3
16310: PUSH
16311: LD_INT 3
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: LIST
16318: PUSH
16319: LD_OWVAR 67
16323: ARRAY
16324: PUSH
16325: FOR_TO
16326: IFFALSE 16417
// begin uc_side := side_bot ;
16328: LD_ADDR_OWVAR 20
16332: PUSH
16333: LD_EXP 3
16337: ST_TO_ADDR
// uc_nation := nation_nature ;
16338: LD_ADDR_OWVAR 21
16342: PUSH
16343: LD_INT 0
16345: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16346: CALL 50341 0 0
// hc_class := class_apeman_kamikaze ;
16350: LD_ADDR_OWVAR 28
16354: PUSH
16355: LD_INT 17
16357: ST_TO_ADDR
// un := CreateHuman ;
16358: LD_ADDR_VAR 0 2
16362: PUSH
16363: CALL_OW 44
16367: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16368: LD_VAR 0 2
16372: PPUSH
16373: LD_INT 2
16375: PPUSH
16376: CALL_OW 233
// PlaceUnitArea ( un , west_ape_spawn , false ) ;
16380: LD_VAR 0 2
16384: PPUSH
16385: LD_INT 49
16387: PPUSH
16388: LD_INT 0
16390: PPUSH
16391: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16395: LD_ADDR_VAR 0 3
16399: PUSH
16400: LD_VAR 0 3
16404: PPUSH
16405: LD_VAR 0 2
16409: PPUSH
16410: CALL 54231 0 2
16414: ST_TO_ADDR
// end ;
16415: GO 16325
16417: POP
16418: POP
// repeat wait ( 0 0$1 ) ;
16419: LD_INT 35
16421: PPUSH
16422: CALL_OW 67
// for i in tmp do
16426: LD_ADDR_VAR 0 1
16430: PUSH
16431: LD_VAR 0 3
16435: PUSH
16436: FOR_IN
16437: IFFALSE 16528
// begin if not IsOk ( i ) then
16439: LD_VAR 0 1
16443: PPUSH
16444: CALL_OW 302
16448: NOT
16449: IFFALSE 16469
// begin tmp := tmp diff i ;
16451: LD_ADDR_VAR 0 3
16455: PUSH
16456: LD_VAR 0 3
16460: PUSH
16461: LD_VAR 0 1
16465: DIFF
16466: ST_TO_ADDR
// continue ;
16467: GO 16436
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16469: LD_ADDR_VAR 0 4
16473: PUSH
16474: LD_INT 81
16476: PUSH
16477: LD_VAR 0 1
16481: PPUSH
16482: CALL_OW 255
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PPUSH
16491: CALL_OW 69
16495: PPUSH
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 74
16505: ST_TO_ADDR
// if enemy then
16506: LD_VAR 0 4
16510: IFFALSE 16526
// ComAttackUnit ( i , enemy ) ;
16512: LD_VAR 0 1
16516: PPUSH
16517: LD_VAR 0 4
16521: PPUSH
16522: CALL_OW 115
// end ;
16526: GO 16436
16528: POP
16529: POP
// until not tmp ;
16530: LD_VAR 0 3
16534: NOT
16535: IFFALSE 16419
// end ; end_of_file
16537: PPOPN 4
16539: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16540: LD_INT 0
16542: PPUSH
16543: PPUSH
// if exist_mode then
16544: LD_VAR 0 2
16548: IFFALSE 16573
// unit := CreateCharacter ( prefix & ident ) else
16550: LD_ADDR_VAR 0 5
16554: PUSH
16555: LD_VAR 0 3
16559: PUSH
16560: LD_VAR 0 1
16564: STR
16565: PPUSH
16566: CALL_OW 34
16570: ST_TO_ADDR
16571: GO 16588
// unit := NewCharacter ( ident ) ;
16573: LD_ADDR_VAR 0 5
16577: PUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 25
16587: ST_TO_ADDR
// result := unit ;
16588: LD_ADDR_VAR 0 4
16592: PUSH
16593: LD_VAR 0 5
16597: ST_TO_ADDR
// end ;
16598: LD_VAR 0 4
16602: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16603: LD_INT 0
16605: PPUSH
16606: PPUSH
// if not side or not nation then
16607: LD_VAR 0 1
16611: NOT
16612: PUSH
16613: LD_VAR 0 2
16617: NOT
16618: OR
16619: IFFALSE 16623
// exit ;
16621: GO 17391
// case nation of nation_american :
16623: LD_VAR 0 2
16627: PUSH
16628: LD_INT 1
16630: DOUBLE
16631: EQUAL
16632: IFTRUE 16636
16634: GO 16850
16636: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16637: LD_ADDR_VAR 0 4
16641: PUSH
16642: LD_INT 35
16644: PUSH
16645: LD_INT 45
16647: PUSH
16648: LD_INT 46
16650: PUSH
16651: LD_INT 47
16653: PUSH
16654: LD_INT 82
16656: PUSH
16657: LD_INT 83
16659: PUSH
16660: LD_INT 84
16662: PUSH
16663: LD_INT 85
16665: PUSH
16666: LD_INT 86
16668: PUSH
16669: LD_INT 1
16671: PUSH
16672: LD_INT 2
16674: PUSH
16675: LD_INT 6
16677: PUSH
16678: LD_INT 15
16680: PUSH
16681: LD_INT 16
16683: PUSH
16684: LD_INT 7
16686: PUSH
16687: LD_INT 12
16689: PUSH
16690: LD_INT 13
16692: PUSH
16693: LD_INT 10
16695: PUSH
16696: LD_INT 14
16698: PUSH
16699: LD_INT 20
16701: PUSH
16702: LD_INT 21
16704: PUSH
16705: LD_INT 22
16707: PUSH
16708: LD_INT 25
16710: PUSH
16711: LD_INT 32
16713: PUSH
16714: LD_INT 27
16716: PUSH
16717: LD_INT 36
16719: PUSH
16720: LD_INT 69
16722: PUSH
16723: LD_INT 39
16725: PUSH
16726: LD_INT 34
16728: PUSH
16729: LD_INT 40
16731: PUSH
16732: LD_INT 48
16734: PUSH
16735: LD_INT 49
16737: PUSH
16738: LD_INT 50
16740: PUSH
16741: LD_INT 51
16743: PUSH
16744: LD_INT 52
16746: PUSH
16747: LD_INT 53
16749: PUSH
16750: LD_INT 54
16752: PUSH
16753: LD_INT 55
16755: PUSH
16756: LD_INT 56
16758: PUSH
16759: LD_INT 57
16761: PUSH
16762: LD_INT 58
16764: PUSH
16765: LD_INT 59
16767: PUSH
16768: LD_INT 60
16770: PUSH
16771: LD_INT 61
16773: PUSH
16774: LD_INT 62
16776: PUSH
16777: LD_INT 80
16779: PUSH
16780: LD_INT 82
16782: PUSH
16783: LD_INT 83
16785: PUSH
16786: LD_INT 84
16788: PUSH
16789: LD_INT 85
16791: PUSH
16792: LD_INT 86
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: ST_TO_ADDR
16848: GO 17315
16850: LD_INT 2
16852: DOUBLE
16853: EQUAL
16854: IFTRUE 16858
16856: GO 17084
16858: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16859: LD_ADDR_VAR 0 4
16863: PUSH
16864: LD_INT 35
16866: PUSH
16867: LD_INT 45
16869: PUSH
16870: LD_INT 46
16872: PUSH
16873: LD_INT 47
16875: PUSH
16876: LD_INT 82
16878: PUSH
16879: LD_INT 83
16881: PUSH
16882: LD_INT 84
16884: PUSH
16885: LD_INT 85
16887: PUSH
16888: LD_INT 87
16890: PUSH
16891: LD_INT 70
16893: PUSH
16894: LD_INT 1
16896: PUSH
16897: LD_INT 11
16899: PUSH
16900: LD_INT 3
16902: PUSH
16903: LD_INT 4
16905: PUSH
16906: LD_INT 5
16908: PUSH
16909: LD_INT 6
16911: PUSH
16912: LD_INT 15
16914: PUSH
16915: LD_INT 18
16917: PUSH
16918: LD_INT 7
16920: PUSH
16921: LD_INT 17
16923: PUSH
16924: LD_INT 8
16926: PUSH
16927: LD_INT 20
16929: PUSH
16930: LD_INT 21
16932: PUSH
16933: LD_INT 22
16935: PUSH
16936: LD_INT 72
16938: PUSH
16939: LD_INT 26
16941: PUSH
16942: LD_INT 69
16944: PUSH
16945: LD_INT 39
16947: PUSH
16948: LD_INT 40
16950: PUSH
16951: LD_INT 41
16953: PUSH
16954: LD_INT 42
16956: PUSH
16957: LD_INT 43
16959: PUSH
16960: LD_INT 48
16962: PUSH
16963: LD_INT 49
16965: PUSH
16966: LD_INT 50
16968: PUSH
16969: LD_INT 51
16971: PUSH
16972: LD_INT 52
16974: PUSH
16975: LD_INT 53
16977: PUSH
16978: LD_INT 54
16980: PUSH
16981: LD_INT 55
16983: PUSH
16984: LD_INT 56
16986: PUSH
16987: LD_INT 60
16989: PUSH
16990: LD_INT 61
16992: PUSH
16993: LD_INT 62
16995: PUSH
16996: LD_INT 66
16998: PUSH
16999: LD_INT 67
17001: PUSH
17002: LD_INT 68
17004: PUSH
17005: LD_INT 81
17007: PUSH
17008: LD_INT 82
17010: PUSH
17011: LD_INT 83
17013: PUSH
17014: LD_INT 84
17016: PUSH
17017: LD_INT 85
17019: PUSH
17020: LD_INT 87
17022: PUSH
17023: LD_INT 88
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: ST_TO_ADDR
17082: GO 17315
17084: LD_INT 3
17086: DOUBLE
17087: EQUAL
17088: IFTRUE 17092
17090: GO 17314
17092: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17093: LD_ADDR_VAR 0 4
17097: PUSH
17098: LD_INT 46
17100: PUSH
17101: LD_INT 47
17103: PUSH
17104: LD_INT 1
17106: PUSH
17107: LD_INT 2
17109: PUSH
17110: LD_INT 82
17112: PUSH
17113: LD_INT 83
17115: PUSH
17116: LD_INT 84
17118: PUSH
17119: LD_INT 85
17121: PUSH
17122: LD_INT 86
17124: PUSH
17125: LD_INT 11
17127: PUSH
17128: LD_INT 9
17130: PUSH
17131: LD_INT 20
17133: PUSH
17134: LD_INT 19
17136: PUSH
17137: LD_INT 21
17139: PUSH
17140: LD_INT 24
17142: PUSH
17143: LD_INT 22
17145: PUSH
17146: LD_INT 25
17148: PUSH
17149: LD_INT 28
17151: PUSH
17152: LD_INT 29
17154: PUSH
17155: LD_INT 30
17157: PUSH
17158: LD_INT 31
17160: PUSH
17161: LD_INT 37
17163: PUSH
17164: LD_INT 38
17166: PUSH
17167: LD_INT 32
17169: PUSH
17170: LD_INT 27
17172: PUSH
17173: LD_INT 33
17175: PUSH
17176: LD_INT 69
17178: PUSH
17179: LD_INT 39
17181: PUSH
17182: LD_INT 34
17184: PUSH
17185: LD_INT 40
17187: PUSH
17188: LD_INT 71
17190: PUSH
17191: LD_INT 23
17193: PUSH
17194: LD_INT 44
17196: PUSH
17197: LD_INT 48
17199: PUSH
17200: LD_INT 49
17202: PUSH
17203: LD_INT 50
17205: PUSH
17206: LD_INT 51
17208: PUSH
17209: LD_INT 52
17211: PUSH
17212: LD_INT 53
17214: PUSH
17215: LD_INT 54
17217: PUSH
17218: LD_INT 55
17220: PUSH
17221: LD_INT 56
17223: PUSH
17224: LD_INT 57
17226: PUSH
17227: LD_INT 58
17229: PUSH
17230: LD_INT 59
17232: PUSH
17233: LD_INT 63
17235: PUSH
17236: LD_INT 64
17238: PUSH
17239: LD_INT 65
17241: PUSH
17242: LD_INT 82
17244: PUSH
17245: LD_INT 83
17247: PUSH
17248: LD_INT 84
17250: PUSH
17251: LD_INT 85
17253: PUSH
17254: LD_INT 86
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: ST_TO_ADDR
17312: GO 17315
17314: POP
// if state > - 1 and state < 3 then
17315: LD_VAR 0 3
17319: PUSH
17320: LD_INT 1
17322: NEG
17323: GREATER
17324: PUSH
17325: LD_VAR 0 3
17329: PUSH
17330: LD_INT 3
17332: LESS
17333: AND
17334: IFFALSE 17391
// for i in result do
17336: LD_ADDR_VAR 0 5
17340: PUSH
17341: LD_VAR 0 4
17345: PUSH
17346: FOR_IN
17347: IFFALSE 17389
// if GetTech ( i , side ) <> state then
17349: LD_VAR 0 5
17353: PPUSH
17354: LD_VAR 0 1
17358: PPUSH
17359: CALL_OW 321
17363: PUSH
17364: LD_VAR 0 3
17368: NONEQUAL
17369: IFFALSE 17387
// result := result diff i ;
17371: LD_ADDR_VAR 0 4
17375: PUSH
17376: LD_VAR 0 4
17380: PUSH
17381: LD_VAR 0 5
17385: DIFF
17386: ST_TO_ADDR
17387: GO 17346
17389: POP
17390: POP
// end ;
17391: LD_VAR 0 4
17395: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17396: LD_INT 0
17398: PPUSH
17399: PPUSH
17400: PPUSH
// result := true ;
17401: LD_ADDR_VAR 0 3
17405: PUSH
17406: LD_INT 1
17408: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17409: LD_ADDR_VAR 0 5
17413: PUSH
17414: LD_VAR 0 2
17418: PPUSH
17419: CALL_OW 480
17423: ST_TO_ADDR
// if not tmp then
17424: LD_VAR 0 5
17428: NOT
17429: IFFALSE 17433
// exit ;
17431: GO 17482
// for i in tmp do
17433: LD_ADDR_VAR 0 4
17437: PUSH
17438: LD_VAR 0 5
17442: PUSH
17443: FOR_IN
17444: IFFALSE 17480
// if GetTech ( i , side ) <> state_researched then
17446: LD_VAR 0 4
17450: PPUSH
17451: LD_VAR 0 1
17455: PPUSH
17456: CALL_OW 321
17460: PUSH
17461: LD_INT 2
17463: NONEQUAL
17464: IFFALSE 17478
// begin result := false ;
17466: LD_ADDR_VAR 0 3
17470: PUSH
17471: LD_INT 0
17473: ST_TO_ADDR
// exit ;
17474: POP
17475: POP
17476: GO 17482
// end ;
17478: GO 17443
17480: POP
17481: POP
// end ;
17482: LD_VAR 0 3
17486: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17487: LD_INT 0
17489: PPUSH
17490: PPUSH
17491: PPUSH
17492: PPUSH
17493: PPUSH
17494: PPUSH
17495: PPUSH
17496: PPUSH
17497: PPUSH
17498: PPUSH
17499: PPUSH
17500: PPUSH
17501: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17502: LD_VAR 0 1
17506: NOT
17507: PUSH
17508: LD_VAR 0 1
17512: PPUSH
17513: CALL_OW 257
17517: PUSH
17518: LD_INT 9
17520: NONEQUAL
17521: OR
17522: IFFALSE 17526
// exit ;
17524: GO 18099
// side := GetSide ( unit ) ;
17526: LD_ADDR_VAR 0 9
17530: PUSH
17531: LD_VAR 0 1
17535: PPUSH
17536: CALL_OW 255
17540: ST_TO_ADDR
// tech_space := tech_spacanom ;
17541: LD_ADDR_VAR 0 12
17545: PUSH
17546: LD_INT 29
17548: ST_TO_ADDR
// tech_time := tech_taurad ;
17549: LD_ADDR_VAR 0 13
17553: PUSH
17554: LD_INT 28
17556: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17557: LD_ADDR_VAR 0 11
17561: PUSH
17562: LD_VAR 0 1
17566: PPUSH
17567: CALL_OW 310
17571: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17572: LD_VAR 0 11
17576: PPUSH
17577: CALL_OW 247
17581: PUSH
17582: LD_INT 2
17584: EQUAL
17585: IFFALSE 17589
// exit ;
17587: GO 18099
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17589: LD_ADDR_VAR 0 8
17593: PUSH
17594: LD_INT 81
17596: PUSH
17597: LD_VAR 0 9
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 3
17608: PUSH
17609: LD_INT 21
17611: PUSH
17612: LD_INT 3
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PPUSH
17627: CALL_OW 69
17631: ST_TO_ADDR
// if not tmp then
17632: LD_VAR 0 8
17636: NOT
17637: IFFALSE 17641
// exit ;
17639: GO 18099
// if in_unit then
17641: LD_VAR 0 11
17645: IFFALSE 17669
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17647: LD_ADDR_VAR 0 10
17651: PUSH
17652: LD_VAR 0 8
17656: PPUSH
17657: LD_VAR 0 11
17661: PPUSH
17662: CALL_OW 74
17666: ST_TO_ADDR
17667: GO 17689
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17669: LD_ADDR_VAR 0 10
17673: PUSH
17674: LD_VAR 0 8
17678: PPUSH
17679: LD_VAR 0 1
17683: PPUSH
17684: CALL_OW 74
17688: ST_TO_ADDR
// if not enemy then
17689: LD_VAR 0 10
17693: NOT
17694: IFFALSE 17698
// exit ;
17696: GO 18099
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17698: LD_VAR 0 11
17702: PUSH
17703: LD_VAR 0 11
17707: PPUSH
17708: LD_VAR 0 10
17712: PPUSH
17713: CALL_OW 296
17717: PUSH
17718: LD_INT 13
17720: GREATER
17721: AND
17722: PUSH
17723: LD_VAR 0 1
17727: PPUSH
17728: LD_VAR 0 10
17732: PPUSH
17733: CALL_OW 296
17737: PUSH
17738: LD_INT 12
17740: GREATER
17741: OR
17742: IFFALSE 17746
// exit ;
17744: GO 18099
// missile := [ 1 ] ;
17746: LD_ADDR_VAR 0 14
17750: PUSH
17751: LD_INT 1
17753: PUSH
17754: EMPTY
17755: LIST
17756: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17757: LD_VAR 0 9
17761: PPUSH
17762: LD_VAR 0 12
17766: PPUSH
17767: CALL_OW 325
17771: IFFALSE 17800
// missile := Replace ( missile , missile + 1 , 2 ) ;
17773: LD_ADDR_VAR 0 14
17777: PUSH
17778: LD_VAR 0 14
17782: PPUSH
17783: LD_VAR 0 14
17787: PUSH
17788: LD_INT 1
17790: PLUS
17791: PPUSH
17792: LD_INT 2
17794: PPUSH
17795: CALL_OW 1
17799: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17800: LD_VAR 0 9
17804: PPUSH
17805: LD_VAR 0 13
17809: PPUSH
17810: CALL_OW 325
17814: PUSH
17815: LD_VAR 0 10
17819: PPUSH
17820: CALL_OW 255
17824: PPUSH
17825: LD_VAR 0 13
17829: PPUSH
17830: CALL_OW 325
17834: NOT
17835: AND
17836: IFFALSE 17865
// missile := Replace ( missile , missile + 1 , 3 ) ;
17838: LD_ADDR_VAR 0 14
17842: PUSH
17843: LD_VAR 0 14
17847: PPUSH
17848: LD_VAR 0 14
17852: PUSH
17853: LD_INT 1
17855: PLUS
17856: PPUSH
17857: LD_INT 3
17859: PPUSH
17860: CALL_OW 1
17864: ST_TO_ADDR
// if missile < 2 then
17865: LD_VAR 0 14
17869: PUSH
17870: LD_INT 2
17872: LESS
17873: IFFALSE 17877
// exit ;
17875: GO 18099
// x := GetX ( enemy ) ;
17877: LD_ADDR_VAR 0 4
17881: PUSH
17882: LD_VAR 0 10
17886: PPUSH
17887: CALL_OW 250
17891: ST_TO_ADDR
// y := GetY ( enemy ) ;
17892: LD_ADDR_VAR 0 5
17896: PUSH
17897: LD_VAR 0 10
17901: PPUSH
17902: CALL_OW 251
17906: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17907: LD_ADDR_VAR 0 6
17911: PUSH
17912: LD_VAR 0 4
17916: PUSH
17917: LD_INT 1
17919: NEG
17920: PPUSH
17921: LD_INT 1
17923: PPUSH
17924: CALL_OW 12
17928: PLUS
17929: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17930: LD_ADDR_VAR 0 7
17934: PUSH
17935: LD_VAR 0 5
17939: PUSH
17940: LD_INT 1
17942: NEG
17943: PPUSH
17944: LD_INT 1
17946: PPUSH
17947: CALL_OW 12
17951: PLUS
17952: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17953: LD_VAR 0 6
17957: PPUSH
17958: LD_VAR 0 7
17962: PPUSH
17963: CALL_OW 488
17967: NOT
17968: IFFALSE 17990
// begin _x := x ;
17970: LD_ADDR_VAR 0 6
17974: PUSH
17975: LD_VAR 0 4
17979: ST_TO_ADDR
// _y := y ;
17980: LD_ADDR_VAR 0 7
17984: PUSH
17985: LD_VAR 0 5
17989: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17990: LD_ADDR_VAR 0 3
17994: PUSH
17995: LD_INT 1
17997: PPUSH
17998: LD_VAR 0 14
18002: PPUSH
18003: CALL_OW 12
18007: ST_TO_ADDR
// case i of 1 :
18008: LD_VAR 0 3
18012: PUSH
18013: LD_INT 1
18015: DOUBLE
18016: EQUAL
18017: IFTRUE 18021
18019: GO 18038
18021: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_VAR 0 10
18031: PPUSH
18032: CALL_OW 115
18036: GO 18099
18038: LD_INT 2
18040: DOUBLE
18041: EQUAL
18042: IFTRUE 18046
18044: GO 18068
18046: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18047: LD_VAR 0 1
18051: PPUSH
18052: LD_VAR 0 6
18056: PPUSH
18057: LD_VAR 0 7
18061: PPUSH
18062: CALL_OW 153
18066: GO 18099
18068: LD_INT 3
18070: DOUBLE
18071: EQUAL
18072: IFTRUE 18076
18074: GO 18098
18076: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18077: LD_VAR 0 1
18081: PPUSH
18082: LD_VAR 0 6
18086: PPUSH
18087: LD_VAR 0 7
18091: PPUSH
18092: CALL_OW 154
18096: GO 18099
18098: POP
// end ;
18099: LD_VAR 0 2
18103: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18104: LD_INT 0
18106: PPUSH
18107: PPUSH
18108: PPUSH
18109: PPUSH
18110: PPUSH
18111: PPUSH
// if not unit or not building then
18112: LD_VAR 0 1
18116: NOT
18117: PUSH
18118: LD_VAR 0 2
18122: NOT
18123: OR
18124: IFFALSE 18128
// exit ;
18126: GO 18286
// x := GetX ( building ) ;
18128: LD_ADDR_VAR 0 5
18132: PUSH
18133: LD_VAR 0 2
18137: PPUSH
18138: CALL_OW 250
18142: ST_TO_ADDR
// y := GetY ( building ) ;
18143: LD_ADDR_VAR 0 6
18147: PUSH
18148: LD_VAR 0 2
18152: PPUSH
18153: CALL_OW 251
18157: ST_TO_ADDR
// for i = 0 to 5 do
18158: LD_ADDR_VAR 0 4
18162: PUSH
18163: DOUBLE
18164: LD_INT 0
18166: DEC
18167: ST_TO_ADDR
18168: LD_INT 5
18170: PUSH
18171: FOR_TO
18172: IFFALSE 18284
// begin _x := ShiftX ( x , i , 3 ) ;
18174: LD_ADDR_VAR 0 7
18178: PUSH
18179: LD_VAR 0 5
18183: PPUSH
18184: LD_VAR 0 4
18188: PPUSH
18189: LD_INT 3
18191: PPUSH
18192: CALL_OW 272
18196: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18197: LD_ADDR_VAR 0 8
18201: PUSH
18202: LD_VAR 0 6
18206: PPUSH
18207: LD_VAR 0 4
18211: PPUSH
18212: LD_INT 3
18214: PPUSH
18215: CALL_OW 273
18219: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18220: LD_VAR 0 7
18224: PPUSH
18225: LD_VAR 0 8
18229: PPUSH
18230: CALL_OW 488
18234: NOT
18235: IFFALSE 18239
// continue ;
18237: GO 18171
// if HexInfo ( _x , _y ) = 0 then
18239: LD_VAR 0 7
18243: PPUSH
18244: LD_VAR 0 8
18248: PPUSH
18249: CALL_OW 428
18253: PUSH
18254: LD_INT 0
18256: EQUAL
18257: IFFALSE 18282
// begin ComMoveXY ( unit , _x , _y ) ;
18259: LD_VAR 0 1
18263: PPUSH
18264: LD_VAR 0 7
18268: PPUSH
18269: LD_VAR 0 8
18273: PPUSH
18274: CALL_OW 111
// exit ;
18278: POP
18279: POP
18280: GO 18286
// end ; end ;
18282: GO 18171
18284: POP
18285: POP
// end ;
18286: LD_VAR 0 3
18290: RET
// export function ScanBase ( side , base_area ) ; begin
18291: LD_INT 0
18293: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18294: LD_ADDR_VAR 0 3
18298: PUSH
18299: LD_VAR 0 2
18303: PPUSH
18304: LD_INT 81
18306: PUSH
18307: LD_VAR 0 1
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PPUSH
18316: CALL_OW 70
18320: ST_TO_ADDR
// end ;
18321: LD_VAR 0 3
18325: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18326: LD_INT 0
18328: PPUSH
18329: PPUSH
18330: PPUSH
18331: PPUSH
// result := false ;
18332: LD_ADDR_VAR 0 2
18336: PUSH
18337: LD_INT 0
18339: ST_TO_ADDR
// side := GetSide ( unit ) ;
18340: LD_ADDR_VAR 0 3
18344: PUSH
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 255
18354: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18355: LD_ADDR_VAR 0 4
18359: PUSH
18360: LD_VAR 0 1
18364: PPUSH
18365: CALL_OW 248
18369: ST_TO_ADDR
// case nat of 1 :
18370: LD_VAR 0 4
18374: PUSH
18375: LD_INT 1
18377: DOUBLE
18378: EQUAL
18379: IFTRUE 18383
18381: GO 18394
18383: POP
// tech := tech_lassight ; 2 :
18384: LD_ADDR_VAR 0 5
18388: PUSH
18389: LD_INT 12
18391: ST_TO_ADDR
18392: GO 18433
18394: LD_INT 2
18396: DOUBLE
18397: EQUAL
18398: IFTRUE 18402
18400: GO 18413
18402: POP
// tech := tech_mortar ; 3 :
18403: LD_ADDR_VAR 0 5
18407: PUSH
18408: LD_INT 41
18410: ST_TO_ADDR
18411: GO 18433
18413: LD_INT 3
18415: DOUBLE
18416: EQUAL
18417: IFTRUE 18421
18419: GO 18432
18421: POP
// tech := tech_bazooka ; end ;
18422: LD_ADDR_VAR 0 5
18426: PUSH
18427: LD_INT 44
18429: ST_TO_ADDR
18430: GO 18433
18432: POP
// if Researched ( side , tech ) then
18433: LD_VAR 0 3
18437: PPUSH
18438: LD_VAR 0 5
18442: PPUSH
18443: CALL_OW 325
18447: IFFALSE 18474
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18449: LD_ADDR_VAR 0 2
18453: PUSH
18454: LD_INT 5
18456: PUSH
18457: LD_INT 8
18459: PUSH
18460: LD_INT 9
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: LIST
18467: PUSH
18468: LD_VAR 0 4
18472: ARRAY
18473: ST_TO_ADDR
// end ;
18474: LD_VAR 0 2
18478: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18479: LD_INT 0
18481: PPUSH
18482: PPUSH
18483: PPUSH
// if not mines then
18484: LD_VAR 0 2
18488: NOT
18489: IFFALSE 18493
// exit ;
18491: GO 18637
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18493: LD_ADDR_VAR 0 5
18497: PUSH
18498: LD_INT 81
18500: PUSH
18501: LD_VAR 0 1
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 3
18512: PUSH
18513: LD_INT 21
18515: PUSH
18516: LD_INT 3
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PPUSH
18531: CALL_OW 69
18535: ST_TO_ADDR
// for i in mines do
18536: LD_ADDR_VAR 0 4
18540: PUSH
18541: LD_VAR 0 2
18545: PUSH
18546: FOR_IN
18547: IFFALSE 18635
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18549: LD_VAR 0 4
18553: PUSH
18554: LD_INT 1
18556: ARRAY
18557: PPUSH
18558: LD_VAR 0 4
18562: PUSH
18563: LD_INT 2
18565: ARRAY
18566: PPUSH
18567: CALL_OW 458
18571: NOT
18572: IFFALSE 18576
// continue ;
18574: GO 18546
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18576: LD_VAR 0 4
18580: PUSH
18581: LD_INT 1
18583: ARRAY
18584: PPUSH
18585: LD_VAR 0 4
18589: PUSH
18590: LD_INT 2
18592: ARRAY
18593: PPUSH
18594: CALL_OW 428
18598: PUSH
18599: LD_VAR 0 5
18603: IN
18604: IFFALSE 18633
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18606: LD_VAR 0 4
18610: PUSH
18611: LD_INT 1
18613: ARRAY
18614: PPUSH
18615: LD_VAR 0 4
18619: PUSH
18620: LD_INT 2
18622: ARRAY
18623: PPUSH
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 456
// end ;
18633: GO 18546
18635: POP
18636: POP
// end ;
18637: LD_VAR 0 3
18641: RET
// export function Count ( array ) ; begin
18642: LD_INT 0
18644: PPUSH
// result := array + 0 ;
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: LD_VAR 0 1
18654: PUSH
18655: LD_INT 0
18657: PLUS
18658: ST_TO_ADDR
// end ;
18659: LD_VAR 0 2
18663: RET
// export function IsEmpty ( building ) ; begin
18664: LD_INT 0
18666: PPUSH
// if not building then
18667: LD_VAR 0 1
18671: NOT
18672: IFFALSE 18676
// exit ;
18674: GO 18719
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18676: LD_ADDR_VAR 0 2
18680: PUSH
18681: LD_VAR 0 1
18685: PUSH
18686: LD_INT 22
18688: PUSH
18689: LD_VAR 0 1
18693: PPUSH
18694: CALL_OW 255
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 58
18705: PUSH
18706: EMPTY
18707: LIST
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PPUSH
18713: CALL_OW 69
18717: IN
18718: ST_TO_ADDR
// end ;
18719: LD_VAR 0 2
18723: RET
// export function IsNotFull ( building ) ; var places ; begin
18724: LD_INT 0
18726: PPUSH
18727: PPUSH
// if not building then
18728: LD_VAR 0 1
18732: NOT
18733: IFFALSE 18737
// exit ;
18735: GO 18765
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18737: LD_ADDR_VAR 0 2
18741: PUSH
18742: LD_VAR 0 1
18746: PPUSH
18747: LD_INT 3
18749: PUSH
18750: LD_INT 62
18752: PUSH
18753: EMPTY
18754: LIST
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PPUSH
18760: CALL_OW 72
18764: ST_TO_ADDR
// end ;
18765: LD_VAR 0 2
18769: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18770: LD_INT 0
18772: PPUSH
18773: PPUSH
18774: PPUSH
18775: PPUSH
// tmp := [ ] ;
18776: LD_ADDR_VAR 0 3
18780: PUSH
18781: EMPTY
18782: ST_TO_ADDR
// list := [ ] ;
18783: LD_ADDR_VAR 0 5
18787: PUSH
18788: EMPTY
18789: ST_TO_ADDR
// for i = 16 to 25 do
18790: LD_ADDR_VAR 0 4
18794: PUSH
18795: DOUBLE
18796: LD_INT 16
18798: DEC
18799: ST_TO_ADDR
18800: LD_INT 25
18802: PUSH
18803: FOR_TO
18804: IFFALSE 18877
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18806: LD_ADDR_VAR 0 3
18810: PUSH
18811: LD_VAR 0 3
18815: PUSH
18816: LD_INT 22
18818: PUSH
18819: LD_VAR 0 1
18823: PPUSH
18824: CALL_OW 255
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 91
18835: PUSH
18836: LD_VAR 0 1
18840: PUSH
18841: LD_INT 6
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 30
18851: PUSH
18852: LD_VAR 0 4
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: PPUSH
18869: CALL_OW 69
18873: ADD
18874: ST_TO_ADDR
18875: GO 18803
18877: POP
18878: POP
// for i = 1 to tmp do
18879: LD_ADDR_VAR 0 4
18883: PUSH
18884: DOUBLE
18885: LD_INT 1
18887: DEC
18888: ST_TO_ADDR
18889: LD_VAR 0 3
18893: PUSH
18894: FOR_TO
18895: IFFALSE 18983
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18897: LD_ADDR_VAR 0 5
18901: PUSH
18902: LD_VAR 0 5
18906: PUSH
18907: LD_VAR 0 3
18911: PUSH
18912: LD_VAR 0 4
18916: ARRAY
18917: PPUSH
18918: CALL_OW 266
18922: PUSH
18923: LD_VAR 0 3
18927: PUSH
18928: LD_VAR 0 4
18932: ARRAY
18933: PPUSH
18934: CALL_OW 250
18938: PUSH
18939: LD_VAR 0 3
18943: PUSH
18944: LD_VAR 0 4
18948: ARRAY
18949: PPUSH
18950: CALL_OW 251
18954: PUSH
18955: LD_VAR 0 3
18959: PUSH
18960: LD_VAR 0 4
18964: ARRAY
18965: PPUSH
18966: CALL_OW 254
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: PUSH
18977: EMPTY
18978: LIST
18979: ADD
18980: ST_TO_ADDR
18981: GO 18894
18983: POP
18984: POP
// result := list ;
18985: LD_ADDR_VAR 0 2
18989: PUSH
18990: LD_VAR 0 5
18994: ST_TO_ADDR
// end ;
18995: LD_VAR 0 2
18999: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19000: LD_INT 0
19002: PPUSH
19003: PPUSH
19004: PPUSH
19005: PPUSH
19006: PPUSH
19007: PPUSH
19008: PPUSH
// if not factory then
19009: LD_VAR 0 1
19013: NOT
19014: IFFALSE 19018
// exit ;
19016: GO 19611
// if control = control_apeman then
19018: LD_VAR 0 4
19022: PUSH
19023: LD_INT 5
19025: EQUAL
19026: IFFALSE 19135
// begin tmp := UnitsInside ( factory ) ;
19028: LD_ADDR_VAR 0 8
19032: PUSH
19033: LD_VAR 0 1
19037: PPUSH
19038: CALL_OW 313
19042: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19043: LD_VAR 0 8
19047: PPUSH
19048: LD_INT 25
19050: PUSH
19051: LD_INT 12
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PPUSH
19058: CALL_OW 72
19062: NOT
19063: IFFALSE 19073
// control := control_manual ;
19065: LD_ADDR_VAR 0 4
19069: PUSH
19070: LD_INT 1
19072: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19073: LD_ADDR_VAR 0 8
19077: PUSH
19078: LD_VAR 0 1
19082: PPUSH
19083: CALL 18770 0 1
19087: ST_TO_ADDR
// if tmp then
19088: LD_VAR 0 8
19092: IFFALSE 19135
// begin for i in tmp do
19094: LD_ADDR_VAR 0 7
19098: PUSH
19099: LD_VAR 0 8
19103: PUSH
19104: FOR_IN
19105: IFFALSE 19133
// if i [ 1 ] = b_ext_radio then
19107: LD_VAR 0 7
19111: PUSH
19112: LD_INT 1
19114: ARRAY
19115: PUSH
19116: LD_INT 22
19118: EQUAL
19119: IFFALSE 19131
// begin control := control_remote ;
19121: LD_ADDR_VAR 0 4
19125: PUSH
19126: LD_INT 2
19128: ST_TO_ADDR
// break ;
19129: GO 19133
// end ;
19131: GO 19104
19133: POP
19134: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19135: LD_VAR 0 1
19139: PPUSH
19140: LD_VAR 0 2
19144: PPUSH
19145: LD_VAR 0 3
19149: PPUSH
19150: LD_VAR 0 4
19154: PPUSH
19155: LD_VAR 0 5
19159: PPUSH
19160: CALL_OW 448
19164: IFFALSE 19199
// begin result := [ chassis , engine , control , weapon ] ;
19166: LD_ADDR_VAR 0 6
19170: PUSH
19171: LD_VAR 0 2
19175: PUSH
19176: LD_VAR 0 3
19180: PUSH
19181: LD_VAR 0 4
19185: PUSH
19186: LD_VAR 0 5
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: ST_TO_ADDR
// exit ;
19197: GO 19611
// end ; _chassis := AvailableChassisList ( factory ) ;
19199: LD_ADDR_VAR 0 9
19203: PUSH
19204: LD_VAR 0 1
19208: PPUSH
19209: CALL_OW 475
19213: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19214: LD_ADDR_VAR 0 11
19218: PUSH
19219: LD_VAR 0 1
19223: PPUSH
19224: CALL_OW 476
19228: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19229: LD_ADDR_VAR 0 12
19233: PUSH
19234: LD_VAR 0 1
19238: PPUSH
19239: CALL_OW 477
19243: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19244: LD_ADDR_VAR 0 10
19248: PUSH
19249: LD_VAR 0 1
19253: PPUSH
19254: CALL_OW 478
19258: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19259: LD_VAR 0 9
19263: NOT
19264: PUSH
19265: LD_VAR 0 11
19269: NOT
19270: OR
19271: PUSH
19272: LD_VAR 0 12
19276: NOT
19277: OR
19278: PUSH
19279: LD_VAR 0 10
19283: NOT
19284: OR
19285: IFFALSE 19320
// begin result := [ chassis , engine , control , weapon ] ;
19287: LD_ADDR_VAR 0 6
19291: PUSH
19292: LD_VAR 0 2
19296: PUSH
19297: LD_VAR 0 3
19301: PUSH
19302: LD_VAR 0 4
19306: PUSH
19307: LD_VAR 0 5
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: ST_TO_ADDR
// exit ;
19318: GO 19611
// end ; if not chassis in _chassis then
19320: LD_VAR 0 2
19324: PUSH
19325: LD_VAR 0 9
19329: IN
19330: NOT
19331: IFFALSE 19357
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19333: LD_ADDR_VAR 0 2
19337: PUSH
19338: LD_VAR 0 9
19342: PUSH
19343: LD_INT 1
19345: PPUSH
19346: LD_VAR 0 9
19350: PPUSH
19351: CALL_OW 12
19355: ARRAY
19356: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19357: LD_VAR 0 2
19361: PPUSH
19362: LD_VAR 0 3
19366: PPUSH
19367: CALL 19616 0 2
19371: NOT
19372: IFFALSE 19431
// repeat engine := _engine [ 1 ] ;
19374: LD_ADDR_VAR 0 3
19378: PUSH
19379: LD_VAR 0 11
19383: PUSH
19384: LD_INT 1
19386: ARRAY
19387: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19388: LD_ADDR_VAR 0 11
19392: PUSH
19393: LD_VAR 0 11
19397: PPUSH
19398: LD_INT 1
19400: PPUSH
19401: CALL_OW 3
19405: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19406: LD_VAR 0 2
19410: PPUSH
19411: LD_VAR 0 3
19415: PPUSH
19416: CALL 19616 0 2
19420: PUSH
19421: LD_VAR 0 11
19425: PUSH
19426: EMPTY
19427: EQUAL
19428: OR
19429: IFFALSE 19374
// if not control in _control then
19431: LD_VAR 0 4
19435: PUSH
19436: LD_VAR 0 12
19440: IN
19441: NOT
19442: IFFALSE 19468
// control := _control [ rand ( 1 , _control ) ] ;
19444: LD_ADDR_VAR 0 4
19448: PUSH
19449: LD_VAR 0 12
19453: PUSH
19454: LD_INT 1
19456: PPUSH
19457: LD_VAR 0 12
19461: PPUSH
19462: CALL_OW 12
19466: ARRAY
19467: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19468: LD_VAR 0 2
19472: PPUSH
19473: LD_VAR 0 5
19477: PPUSH
19478: CALL 19836 0 2
19482: NOT
19483: IFFALSE 19542
// repeat weapon := _weapon [ 1 ] ;
19485: LD_ADDR_VAR 0 5
19489: PUSH
19490: LD_VAR 0 10
19494: PUSH
19495: LD_INT 1
19497: ARRAY
19498: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19499: LD_ADDR_VAR 0 10
19503: PUSH
19504: LD_VAR 0 10
19508: PPUSH
19509: LD_INT 1
19511: PPUSH
19512: CALL_OW 3
19516: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19517: LD_VAR 0 2
19521: PPUSH
19522: LD_VAR 0 5
19526: PPUSH
19527: CALL 19836 0 2
19531: PUSH
19532: LD_VAR 0 10
19536: PUSH
19537: EMPTY
19538: EQUAL
19539: OR
19540: IFFALSE 19485
// result := [ ] ;
19542: LD_ADDR_VAR 0 6
19546: PUSH
19547: EMPTY
19548: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19549: LD_VAR 0 1
19553: PPUSH
19554: LD_VAR 0 2
19558: PPUSH
19559: LD_VAR 0 3
19563: PPUSH
19564: LD_VAR 0 4
19568: PPUSH
19569: LD_VAR 0 5
19573: PPUSH
19574: CALL_OW 448
19578: IFFALSE 19611
// result := [ chassis , engine , control , weapon ] ;
19580: LD_ADDR_VAR 0 6
19584: PUSH
19585: LD_VAR 0 2
19589: PUSH
19590: LD_VAR 0 3
19594: PUSH
19595: LD_VAR 0 4
19599: PUSH
19600: LD_VAR 0 5
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: ST_TO_ADDR
// end ;
19611: LD_VAR 0 6
19615: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19616: LD_INT 0
19618: PPUSH
// if not chassis or not engine then
19619: LD_VAR 0 1
19623: NOT
19624: PUSH
19625: LD_VAR 0 2
19629: NOT
19630: OR
19631: IFFALSE 19635
// exit ;
19633: GO 19831
// case engine of engine_solar :
19635: LD_VAR 0 2
19639: PUSH
19640: LD_INT 2
19642: DOUBLE
19643: EQUAL
19644: IFTRUE 19648
19646: GO 19686
19648: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19649: LD_ADDR_VAR 0 3
19653: PUSH
19654: LD_INT 11
19656: PUSH
19657: LD_INT 12
19659: PUSH
19660: LD_INT 13
19662: PUSH
19663: LD_INT 14
19665: PUSH
19666: LD_INT 1
19668: PUSH
19669: LD_INT 2
19671: PUSH
19672: LD_INT 3
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: ST_TO_ADDR
19684: GO 19815
19686: LD_INT 1
19688: DOUBLE
19689: EQUAL
19690: IFTRUE 19694
19692: GO 19756
19694: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19695: LD_ADDR_VAR 0 3
19699: PUSH
19700: LD_INT 11
19702: PUSH
19703: LD_INT 12
19705: PUSH
19706: LD_INT 13
19708: PUSH
19709: LD_INT 14
19711: PUSH
19712: LD_INT 1
19714: PUSH
19715: LD_INT 2
19717: PUSH
19718: LD_INT 3
19720: PUSH
19721: LD_INT 4
19723: PUSH
19724: LD_INT 5
19726: PUSH
19727: LD_INT 21
19729: PUSH
19730: LD_INT 23
19732: PUSH
19733: LD_INT 22
19735: PUSH
19736: LD_INT 24
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: ST_TO_ADDR
19754: GO 19815
19756: LD_INT 3
19758: DOUBLE
19759: EQUAL
19760: IFTRUE 19764
19762: GO 19814
19764: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19765: LD_ADDR_VAR 0 3
19769: PUSH
19770: LD_INT 13
19772: PUSH
19773: LD_INT 14
19775: PUSH
19776: LD_INT 2
19778: PUSH
19779: LD_INT 3
19781: PUSH
19782: LD_INT 4
19784: PUSH
19785: LD_INT 5
19787: PUSH
19788: LD_INT 21
19790: PUSH
19791: LD_INT 22
19793: PUSH
19794: LD_INT 23
19796: PUSH
19797: LD_INT 24
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: ST_TO_ADDR
19812: GO 19815
19814: POP
// result := ( chassis in result ) ;
19815: LD_ADDR_VAR 0 3
19819: PUSH
19820: LD_VAR 0 1
19824: PUSH
19825: LD_VAR 0 3
19829: IN
19830: ST_TO_ADDR
// end ;
19831: LD_VAR 0 3
19835: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19836: LD_INT 0
19838: PPUSH
// if not chassis or not weapon then
19839: LD_VAR 0 1
19843: NOT
19844: PUSH
19845: LD_VAR 0 2
19849: NOT
19850: OR
19851: IFFALSE 19855
// exit ;
19853: GO 20915
// case weapon of us_machine_gun :
19855: LD_VAR 0 2
19859: PUSH
19860: LD_INT 2
19862: DOUBLE
19863: EQUAL
19864: IFTRUE 19868
19866: GO 19898
19868: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19869: LD_ADDR_VAR 0 3
19873: PUSH
19874: LD_INT 1
19876: PUSH
19877: LD_INT 2
19879: PUSH
19880: LD_INT 3
19882: PUSH
19883: LD_INT 4
19885: PUSH
19886: LD_INT 5
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: ST_TO_ADDR
19896: GO 20899
19898: LD_INT 3
19900: DOUBLE
19901: EQUAL
19902: IFTRUE 19906
19904: GO 19936
19906: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19907: LD_ADDR_VAR 0 3
19911: PUSH
19912: LD_INT 1
19914: PUSH
19915: LD_INT 2
19917: PUSH
19918: LD_INT 3
19920: PUSH
19921: LD_INT 4
19923: PUSH
19924: LD_INT 5
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: ST_TO_ADDR
19934: GO 20899
19936: LD_INT 11
19938: DOUBLE
19939: EQUAL
19940: IFTRUE 19944
19942: GO 19974
19944: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19945: LD_ADDR_VAR 0 3
19949: PUSH
19950: LD_INT 1
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: LD_INT 3
19958: PUSH
19959: LD_INT 4
19961: PUSH
19962: LD_INT 5
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: ST_TO_ADDR
19972: GO 20899
19974: LD_INT 4
19976: DOUBLE
19977: EQUAL
19978: IFTRUE 19982
19980: GO 20008
19982: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19983: LD_ADDR_VAR 0 3
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: LD_INT 3
19993: PUSH
19994: LD_INT 4
19996: PUSH
19997: LD_INT 5
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: ST_TO_ADDR
20006: GO 20899
20008: LD_INT 5
20010: DOUBLE
20011: EQUAL
20012: IFTRUE 20016
20014: GO 20042
20016: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20017: LD_ADDR_VAR 0 3
20021: PUSH
20022: LD_INT 2
20024: PUSH
20025: LD_INT 3
20027: PUSH
20028: LD_INT 4
20030: PUSH
20031: LD_INT 5
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: ST_TO_ADDR
20040: GO 20899
20042: LD_INT 9
20044: DOUBLE
20045: EQUAL
20046: IFTRUE 20050
20048: GO 20076
20050: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20051: LD_ADDR_VAR 0 3
20055: PUSH
20056: LD_INT 2
20058: PUSH
20059: LD_INT 3
20061: PUSH
20062: LD_INT 4
20064: PUSH
20065: LD_INT 5
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: ST_TO_ADDR
20074: GO 20899
20076: LD_INT 7
20078: DOUBLE
20079: EQUAL
20080: IFTRUE 20084
20082: GO 20110
20084: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20085: LD_ADDR_VAR 0 3
20089: PUSH
20090: LD_INT 2
20092: PUSH
20093: LD_INT 3
20095: PUSH
20096: LD_INT 4
20098: PUSH
20099: LD_INT 5
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: ST_TO_ADDR
20108: GO 20899
20110: LD_INT 12
20112: DOUBLE
20113: EQUAL
20114: IFTRUE 20118
20116: GO 20144
20118: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20119: LD_ADDR_VAR 0 3
20123: PUSH
20124: LD_INT 2
20126: PUSH
20127: LD_INT 3
20129: PUSH
20130: LD_INT 4
20132: PUSH
20133: LD_INT 5
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: ST_TO_ADDR
20142: GO 20899
20144: LD_INT 13
20146: DOUBLE
20147: EQUAL
20148: IFTRUE 20152
20150: GO 20178
20152: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20153: LD_ADDR_VAR 0 3
20157: PUSH
20158: LD_INT 2
20160: PUSH
20161: LD_INT 3
20163: PUSH
20164: LD_INT 4
20166: PUSH
20167: LD_INT 5
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: ST_TO_ADDR
20176: GO 20899
20178: LD_INT 14
20180: DOUBLE
20181: EQUAL
20182: IFTRUE 20186
20184: GO 20204
20186: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20187: LD_ADDR_VAR 0 3
20191: PUSH
20192: LD_INT 4
20194: PUSH
20195: LD_INT 5
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: ST_TO_ADDR
20202: GO 20899
20204: LD_INT 6
20206: DOUBLE
20207: EQUAL
20208: IFTRUE 20212
20210: GO 20230
20212: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20213: LD_ADDR_VAR 0 3
20217: PUSH
20218: LD_INT 4
20220: PUSH
20221: LD_INT 5
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: ST_TO_ADDR
20228: GO 20899
20230: LD_INT 10
20232: DOUBLE
20233: EQUAL
20234: IFTRUE 20238
20236: GO 20256
20238: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20239: LD_ADDR_VAR 0 3
20243: PUSH
20244: LD_INT 4
20246: PUSH
20247: LD_INT 5
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: ST_TO_ADDR
20254: GO 20899
20256: LD_INT 22
20258: DOUBLE
20259: EQUAL
20260: IFTRUE 20264
20262: GO 20290
20264: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20265: LD_ADDR_VAR 0 3
20269: PUSH
20270: LD_INT 11
20272: PUSH
20273: LD_INT 12
20275: PUSH
20276: LD_INT 13
20278: PUSH
20279: LD_INT 14
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: ST_TO_ADDR
20288: GO 20899
20290: LD_INT 23
20292: DOUBLE
20293: EQUAL
20294: IFTRUE 20298
20296: GO 20324
20298: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20299: LD_ADDR_VAR 0 3
20303: PUSH
20304: LD_INT 11
20306: PUSH
20307: LD_INT 12
20309: PUSH
20310: LD_INT 13
20312: PUSH
20313: LD_INT 14
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: ST_TO_ADDR
20322: GO 20899
20324: LD_INT 24
20326: DOUBLE
20327: EQUAL
20328: IFTRUE 20332
20330: GO 20358
20332: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20333: LD_ADDR_VAR 0 3
20337: PUSH
20338: LD_INT 11
20340: PUSH
20341: LD_INT 12
20343: PUSH
20344: LD_INT 13
20346: PUSH
20347: LD_INT 14
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: ST_TO_ADDR
20356: GO 20899
20358: LD_INT 30
20360: DOUBLE
20361: EQUAL
20362: IFTRUE 20366
20364: GO 20392
20366: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20367: LD_ADDR_VAR 0 3
20371: PUSH
20372: LD_INT 11
20374: PUSH
20375: LD_INT 12
20377: PUSH
20378: LD_INT 13
20380: PUSH
20381: LD_INT 14
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: ST_TO_ADDR
20390: GO 20899
20392: LD_INT 25
20394: DOUBLE
20395: EQUAL
20396: IFTRUE 20400
20398: GO 20418
20400: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20401: LD_ADDR_VAR 0 3
20405: PUSH
20406: LD_INT 13
20408: PUSH
20409: LD_INT 14
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: ST_TO_ADDR
20416: GO 20899
20418: LD_INT 27
20420: DOUBLE
20421: EQUAL
20422: IFTRUE 20426
20424: GO 20444
20426: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20427: LD_ADDR_VAR 0 3
20431: PUSH
20432: LD_INT 13
20434: PUSH
20435: LD_INT 14
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: ST_TO_ADDR
20442: GO 20899
20444: LD_INT 92
20446: DOUBLE
20447: EQUAL
20448: IFTRUE 20452
20450: GO 20478
20452: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20453: LD_ADDR_VAR 0 3
20457: PUSH
20458: LD_INT 11
20460: PUSH
20461: LD_INT 12
20463: PUSH
20464: LD_INT 13
20466: PUSH
20467: LD_INT 14
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: ST_TO_ADDR
20476: GO 20899
20478: LD_INT 28
20480: DOUBLE
20481: EQUAL
20482: IFTRUE 20486
20484: GO 20504
20486: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20487: LD_ADDR_VAR 0 3
20491: PUSH
20492: LD_INT 13
20494: PUSH
20495: LD_INT 14
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: ST_TO_ADDR
20502: GO 20899
20504: LD_INT 29
20506: DOUBLE
20507: EQUAL
20508: IFTRUE 20512
20510: GO 20530
20512: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20513: LD_ADDR_VAR 0 3
20517: PUSH
20518: LD_INT 13
20520: PUSH
20521: LD_INT 14
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: ST_TO_ADDR
20528: GO 20899
20530: LD_INT 31
20532: DOUBLE
20533: EQUAL
20534: IFTRUE 20538
20536: GO 20556
20538: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20539: LD_ADDR_VAR 0 3
20543: PUSH
20544: LD_INT 13
20546: PUSH
20547: LD_INT 14
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: ST_TO_ADDR
20554: GO 20899
20556: LD_INT 26
20558: DOUBLE
20559: EQUAL
20560: IFTRUE 20564
20562: GO 20582
20564: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20565: LD_ADDR_VAR 0 3
20569: PUSH
20570: LD_INT 13
20572: PUSH
20573: LD_INT 14
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: ST_TO_ADDR
20580: GO 20899
20582: LD_INT 42
20584: DOUBLE
20585: EQUAL
20586: IFTRUE 20590
20588: GO 20616
20590: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20591: LD_ADDR_VAR 0 3
20595: PUSH
20596: LD_INT 21
20598: PUSH
20599: LD_INT 22
20601: PUSH
20602: LD_INT 23
20604: PUSH
20605: LD_INT 24
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: ST_TO_ADDR
20614: GO 20899
20616: LD_INT 43
20618: DOUBLE
20619: EQUAL
20620: IFTRUE 20624
20622: GO 20650
20624: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20625: LD_ADDR_VAR 0 3
20629: PUSH
20630: LD_INT 21
20632: PUSH
20633: LD_INT 22
20635: PUSH
20636: LD_INT 23
20638: PUSH
20639: LD_INT 24
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: ST_TO_ADDR
20648: GO 20899
20650: LD_INT 44
20652: DOUBLE
20653: EQUAL
20654: IFTRUE 20658
20656: GO 20684
20658: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20659: LD_ADDR_VAR 0 3
20663: PUSH
20664: LD_INT 21
20666: PUSH
20667: LD_INT 22
20669: PUSH
20670: LD_INT 23
20672: PUSH
20673: LD_INT 24
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: ST_TO_ADDR
20682: GO 20899
20684: LD_INT 45
20686: DOUBLE
20687: EQUAL
20688: IFTRUE 20692
20690: GO 20718
20692: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20693: LD_ADDR_VAR 0 3
20697: PUSH
20698: LD_INT 21
20700: PUSH
20701: LD_INT 22
20703: PUSH
20704: LD_INT 23
20706: PUSH
20707: LD_INT 24
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: ST_TO_ADDR
20716: GO 20899
20718: LD_INT 49
20720: DOUBLE
20721: EQUAL
20722: IFTRUE 20726
20724: GO 20752
20726: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20727: LD_ADDR_VAR 0 3
20731: PUSH
20732: LD_INT 21
20734: PUSH
20735: LD_INT 22
20737: PUSH
20738: LD_INT 23
20740: PUSH
20741: LD_INT 24
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: ST_TO_ADDR
20750: GO 20899
20752: LD_INT 51
20754: DOUBLE
20755: EQUAL
20756: IFTRUE 20760
20758: GO 20786
20760: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20761: LD_ADDR_VAR 0 3
20765: PUSH
20766: LD_INT 21
20768: PUSH
20769: LD_INT 22
20771: PUSH
20772: LD_INT 23
20774: PUSH
20775: LD_INT 24
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: ST_TO_ADDR
20784: GO 20899
20786: LD_INT 52
20788: DOUBLE
20789: EQUAL
20790: IFTRUE 20794
20792: GO 20820
20794: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20795: LD_ADDR_VAR 0 3
20799: PUSH
20800: LD_INT 21
20802: PUSH
20803: LD_INT 22
20805: PUSH
20806: LD_INT 23
20808: PUSH
20809: LD_INT 24
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: ST_TO_ADDR
20818: GO 20899
20820: LD_INT 53
20822: DOUBLE
20823: EQUAL
20824: IFTRUE 20828
20826: GO 20846
20828: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20829: LD_ADDR_VAR 0 3
20833: PUSH
20834: LD_INT 23
20836: PUSH
20837: LD_INT 24
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: ST_TO_ADDR
20844: GO 20899
20846: LD_INT 46
20848: DOUBLE
20849: EQUAL
20850: IFTRUE 20854
20852: GO 20872
20854: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20855: LD_ADDR_VAR 0 3
20859: PUSH
20860: LD_INT 23
20862: PUSH
20863: LD_INT 24
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: ST_TO_ADDR
20870: GO 20899
20872: LD_INT 47
20874: DOUBLE
20875: EQUAL
20876: IFTRUE 20880
20878: GO 20898
20880: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20881: LD_ADDR_VAR 0 3
20885: PUSH
20886: LD_INT 23
20888: PUSH
20889: LD_INT 24
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: ST_TO_ADDR
20896: GO 20899
20898: POP
// result := ( chassis in result ) ;
20899: LD_ADDR_VAR 0 3
20903: PUSH
20904: LD_VAR 0 1
20908: PUSH
20909: LD_VAR 0 3
20913: IN
20914: ST_TO_ADDR
// end ;
20915: LD_VAR 0 3
20919: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20920: LD_INT 0
20922: PPUSH
20923: PPUSH
20924: PPUSH
20925: PPUSH
20926: PPUSH
20927: PPUSH
20928: PPUSH
// result := array ;
20929: LD_ADDR_VAR 0 5
20933: PUSH
20934: LD_VAR 0 1
20938: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20939: LD_VAR 0 1
20943: NOT
20944: PUSH
20945: LD_VAR 0 2
20949: NOT
20950: OR
20951: PUSH
20952: LD_VAR 0 3
20956: NOT
20957: OR
20958: PUSH
20959: LD_VAR 0 2
20963: PUSH
20964: LD_VAR 0 1
20968: GREATER
20969: OR
20970: PUSH
20971: LD_VAR 0 3
20975: PUSH
20976: LD_VAR 0 1
20980: GREATER
20981: OR
20982: IFFALSE 20986
// exit ;
20984: GO 21282
// if direction then
20986: LD_VAR 0 4
20990: IFFALSE 21054
// begin d := 1 ;
20992: LD_ADDR_VAR 0 9
20996: PUSH
20997: LD_INT 1
20999: ST_TO_ADDR
// if i_from > i_to then
21000: LD_VAR 0 2
21004: PUSH
21005: LD_VAR 0 3
21009: GREATER
21010: IFFALSE 21036
// length := ( array - i_from ) + i_to else
21012: LD_ADDR_VAR 0 11
21016: PUSH
21017: LD_VAR 0 1
21021: PUSH
21022: LD_VAR 0 2
21026: MINUS
21027: PUSH
21028: LD_VAR 0 3
21032: PLUS
21033: ST_TO_ADDR
21034: GO 21052
// length := i_to - i_from ;
21036: LD_ADDR_VAR 0 11
21040: PUSH
21041: LD_VAR 0 3
21045: PUSH
21046: LD_VAR 0 2
21050: MINUS
21051: ST_TO_ADDR
// end else
21052: GO 21115
// begin d := - 1 ;
21054: LD_ADDR_VAR 0 9
21058: PUSH
21059: LD_INT 1
21061: NEG
21062: ST_TO_ADDR
// if i_from > i_to then
21063: LD_VAR 0 2
21067: PUSH
21068: LD_VAR 0 3
21072: GREATER
21073: IFFALSE 21093
// length := i_from - i_to else
21075: LD_ADDR_VAR 0 11
21079: PUSH
21080: LD_VAR 0 2
21084: PUSH
21085: LD_VAR 0 3
21089: MINUS
21090: ST_TO_ADDR
21091: GO 21115
// length := ( array - i_to ) + i_from ;
21093: LD_ADDR_VAR 0 11
21097: PUSH
21098: LD_VAR 0 1
21102: PUSH
21103: LD_VAR 0 3
21107: MINUS
21108: PUSH
21109: LD_VAR 0 2
21113: PLUS
21114: ST_TO_ADDR
// end ; if not length then
21115: LD_VAR 0 11
21119: NOT
21120: IFFALSE 21124
// exit ;
21122: GO 21282
// tmp := array ;
21124: LD_ADDR_VAR 0 10
21128: PUSH
21129: LD_VAR 0 1
21133: ST_TO_ADDR
// for i = 1 to length do
21134: LD_ADDR_VAR 0 6
21138: PUSH
21139: DOUBLE
21140: LD_INT 1
21142: DEC
21143: ST_TO_ADDR
21144: LD_VAR 0 11
21148: PUSH
21149: FOR_TO
21150: IFFALSE 21270
// begin for j = 1 to array do
21152: LD_ADDR_VAR 0 7
21156: PUSH
21157: DOUBLE
21158: LD_INT 1
21160: DEC
21161: ST_TO_ADDR
21162: LD_VAR 0 1
21166: PUSH
21167: FOR_TO
21168: IFFALSE 21256
// begin k := j + d ;
21170: LD_ADDR_VAR 0 8
21174: PUSH
21175: LD_VAR 0 7
21179: PUSH
21180: LD_VAR 0 9
21184: PLUS
21185: ST_TO_ADDR
// if k > array then
21186: LD_VAR 0 8
21190: PUSH
21191: LD_VAR 0 1
21195: GREATER
21196: IFFALSE 21206
// k := 1 ;
21198: LD_ADDR_VAR 0 8
21202: PUSH
21203: LD_INT 1
21205: ST_TO_ADDR
// if not k then
21206: LD_VAR 0 8
21210: NOT
21211: IFFALSE 21223
// k := array ;
21213: LD_ADDR_VAR 0 8
21217: PUSH
21218: LD_VAR 0 1
21222: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21223: LD_ADDR_VAR 0 10
21227: PUSH
21228: LD_VAR 0 10
21232: PPUSH
21233: LD_VAR 0 8
21237: PPUSH
21238: LD_VAR 0 1
21242: PUSH
21243: LD_VAR 0 7
21247: ARRAY
21248: PPUSH
21249: CALL_OW 1
21253: ST_TO_ADDR
// end ;
21254: GO 21167
21256: POP
21257: POP
// array := tmp ;
21258: LD_ADDR_VAR 0 1
21262: PUSH
21263: LD_VAR 0 10
21267: ST_TO_ADDR
// end ;
21268: GO 21149
21270: POP
21271: POP
// result := array ;
21272: LD_ADDR_VAR 0 5
21276: PUSH
21277: LD_VAR 0 1
21281: ST_TO_ADDR
// end ;
21282: LD_VAR 0 5
21286: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21287: LD_INT 0
21289: PPUSH
21290: PPUSH
// result := 0 ;
21291: LD_ADDR_VAR 0 3
21295: PUSH
21296: LD_INT 0
21298: ST_TO_ADDR
// if not array or not value in array then
21299: LD_VAR 0 1
21303: NOT
21304: PUSH
21305: LD_VAR 0 2
21309: PUSH
21310: LD_VAR 0 1
21314: IN
21315: NOT
21316: OR
21317: IFFALSE 21321
// exit ;
21319: GO 21375
// for i = 1 to array do
21321: LD_ADDR_VAR 0 4
21325: PUSH
21326: DOUBLE
21327: LD_INT 1
21329: DEC
21330: ST_TO_ADDR
21331: LD_VAR 0 1
21335: PUSH
21336: FOR_TO
21337: IFFALSE 21373
// if value = array [ i ] then
21339: LD_VAR 0 2
21343: PUSH
21344: LD_VAR 0 1
21348: PUSH
21349: LD_VAR 0 4
21353: ARRAY
21354: EQUAL
21355: IFFALSE 21371
// begin result := i ;
21357: LD_ADDR_VAR 0 3
21361: PUSH
21362: LD_VAR 0 4
21366: ST_TO_ADDR
// exit ;
21367: POP
21368: POP
21369: GO 21375
// end ;
21371: GO 21336
21373: POP
21374: POP
// end ;
21375: LD_VAR 0 3
21379: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21380: LD_INT 0
21382: PPUSH
// vc_chassis := chassis ;
21383: LD_ADDR_OWVAR 37
21387: PUSH
21388: LD_VAR 0 1
21392: ST_TO_ADDR
// vc_engine := engine ;
21393: LD_ADDR_OWVAR 39
21397: PUSH
21398: LD_VAR 0 2
21402: ST_TO_ADDR
// vc_control := control ;
21403: LD_ADDR_OWVAR 38
21407: PUSH
21408: LD_VAR 0 3
21412: ST_TO_ADDR
// vc_weapon := weapon ;
21413: LD_ADDR_OWVAR 40
21417: PUSH
21418: LD_VAR 0 4
21422: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21423: LD_ADDR_OWVAR 41
21427: PUSH
21428: LD_VAR 0 5
21432: ST_TO_ADDR
// end ;
21433: LD_VAR 0 6
21437: RET
// export function WantPlant ( unit ) ; var task ; begin
21438: LD_INT 0
21440: PPUSH
21441: PPUSH
// result := false ;
21442: LD_ADDR_VAR 0 2
21446: PUSH
21447: LD_INT 0
21449: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21450: LD_ADDR_VAR 0 3
21454: PUSH
21455: LD_VAR 0 1
21459: PPUSH
21460: CALL_OW 437
21464: ST_TO_ADDR
// if task then
21465: LD_VAR 0 3
21469: IFFALSE 21497
// if task [ 1 ] [ 1 ] = p then
21471: LD_VAR 0 3
21475: PUSH
21476: LD_INT 1
21478: ARRAY
21479: PUSH
21480: LD_INT 1
21482: ARRAY
21483: PUSH
21484: LD_STRING p
21486: EQUAL
21487: IFFALSE 21497
// result := true ;
21489: LD_ADDR_VAR 0 2
21493: PUSH
21494: LD_INT 1
21496: ST_TO_ADDR
// end ;
21497: LD_VAR 0 2
21501: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21502: LD_INT 0
21504: PPUSH
21505: PPUSH
21506: PPUSH
21507: PPUSH
// if pos < 1 then
21508: LD_VAR 0 2
21512: PUSH
21513: LD_INT 1
21515: LESS
21516: IFFALSE 21520
// exit ;
21518: GO 21823
// if pos = 1 then
21520: LD_VAR 0 2
21524: PUSH
21525: LD_INT 1
21527: EQUAL
21528: IFFALSE 21561
// result := Replace ( arr , pos [ 1 ] , value ) else
21530: LD_ADDR_VAR 0 4
21534: PUSH
21535: LD_VAR 0 1
21539: PPUSH
21540: LD_VAR 0 2
21544: PUSH
21545: LD_INT 1
21547: ARRAY
21548: PPUSH
21549: LD_VAR 0 3
21553: PPUSH
21554: CALL_OW 1
21558: ST_TO_ADDR
21559: GO 21823
// begin tmp := arr ;
21561: LD_ADDR_VAR 0 6
21565: PUSH
21566: LD_VAR 0 1
21570: ST_TO_ADDR
// s_arr := [ tmp ] ;
21571: LD_ADDR_VAR 0 7
21575: PUSH
21576: LD_VAR 0 6
21580: PUSH
21581: EMPTY
21582: LIST
21583: ST_TO_ADDR
// for i = 1 to pos - 1 do
21584: LD_ADDR_VAR 0 5
21588: PUSH
21589: DOUBLE
21590: LD_INT 1
21592: DEC
21593: ST_TO_ADDR
21594: LD_VAR 0 2
21598: PUSH
21599: LD_INT 1
21601: MINUS
21602: PUSH
21603: FOR_TO
21604: IFFALSE 21649
// begin tmp := tmp [ pos [ i ] ] ;
21606: LD_ADDR_VAR 0 6
21610: PUSH
21611: LD_VAR 0 6
21615: PUSH
21616: LD_VAR 0 2
21620: PUSH
21621: LD_VAR 0 5
21625: ARRAY
21626: ARRAY
21627: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21628: LD_ADDR_VAR 0 7
21632: PUSH
21633: LD_VAR 0 7
21637: PUSH
21638: LD_VAR 0 6
21642: PUSH
21643: EMPTY
21644: LIST
21645: ADD
21646: ST_TO_ADDR
// end ;
21647: GO 21603
21649: POP
21650: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21651: LD_ADDR_VAR 0 6
21655: PUSH
21656: LD_VAR 0 6
21660: PPUSH
21661: LD_VAR 0 2
21665: PUSH
21666: LD_VAR 0 2
21670: ARRAY
21671: PPUSH
21672: LD_VAR 0 3
21676: PPUSH
21677: CALL_OW 1
21681: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21682: LD_ADDR_VAR 0 7
21686: PUSH
21687: LD_VAR 0 7
21691: PPUSH
21692: LD_VAR 0 7
21696: PPUSH
21697: LD_VAR 0 6
21701: PPUSH
21702: CALL_OW 1
21706: ST_TO_ADDR
// for i = s_arr downto 2 do
21707: LD_ADDR_VAR 0 5
21711: PUSH
21712: DOUBLE
21713: LD_VAR 0 7
21717: INC
21718: ST_TO_ADDR
21719: LD_INT 2
21721: PUSH
21722: FOR_DOWNTO
21723: IFFALSE 21807
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21725: LD_ADDR_VAR 0 6
21729: PUSH
21730: LD_VAR 0 7
21734: PUSH
21735: LD_VAR 0 5
21739: PUSH
21740: LD_INT 1
21742: MINUS
21743: ARRAY
21744: PPUSH
21745: LD_VAR 0 2
21749: PUSH
21750: LD_VAR 0 5
21754: PUSH
21755: LD_INT 1
21757: MINUS
21758: ARRAY
21759: PPUSH
21760: LD_VAR 0 7
21764: PUSH
21765: LD_VAR 0 5
21769: ARRAY
21770: PPUSH
21771: CALL_OW 1
21775: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21776: LD_ADDR_VAR 0 7
21780: PUSH
21781: LD_VAR 0 7
21785: PPUSH
21786: LD_VAR 0 5
21790: PUSH
21791: LD_INT 1
21793: MINUS
21794: PPUSH
21795: LD_VAR 0 6
21799: PPUSH
21800: CALL_OW 1
21804: ST_TO_ADDR
// end ;
21805: GO 21722
21807: POP
21808: POP
// result := s_arr [ 1 ] ;
21809: LD_ADDR_VAR 0 4
21813: PUSH
21814: LD_VAR 0 7
21818: PUSH
21819: LD_INT 1
21821: ARRAY
21822: ST_TO_ADDR
// end ; end ;
21823: LD_VAR 0 4
21827: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21828: LD_INT 0
21830: PPUSH
21831: PPUSH
// if not list then
21832: LD_VAR 0 1
21836: NOT
21837: IFFALSE 21841
// exit ;
21839: GO 21932
// i := list [ pos1 ] ;
21841: LD_ADDR_VAR 0 5
21845: PUSH
21846: LD_VAR 0 1
21850: PUSH
21851: LD_VAR 0 2
21855: ARRAY
21856: ST_TO_ADDR
// if not i then
21857: LD_VAR 0 5
21861: NOT
21862: IFFALSE 21866
// exit ;
21864: GO 21932
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21866: LD_ADDR_VAR 0 1
21870: PUSH
21871: LD_VAR 0 1
21875: PPUSH
21876: LD_VAR 0 2
21880: PPUSH
21881: LD_VAR 0 1
21885: PUSH
21886: LD_VAR 0 3
21890: ARRAY
21891: PPUSH
21892: CALL_OW 1
21896: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21897: LD_ADDR_VAR 0 1
21901: PUSH
21902: LD_VAR 0 1
21906: PPUSH
21907: LD_VAR 0 3
21911: PPUSH
21912: LD_VAR 0 5
21916: PPUSH
21917: CALL_OW 1
21921: ST_TO_ADDR
// result := list ;
21922: LD_ADDR_VAR 0 4
21926: PUSH
21927: LD_VAR 0 1
21931: ST_TO_ADDR
// end ;
21932: LD_VAR 0 4
21936: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21937: LD_INT 0
21939: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21940: LD_ADDR_VAR 0 5
21944: PUSH
21945: LD_VAR 0 1
21949: PPUSH
21950: CALL_OW 250
21954: PPUSH
21955: LD_VAR 0 1
21959: PPUSH
21960: CALL_OW 251
21964: PPUSH
21965: LD_VAR 0 2
21969: PPUSH
21970: LD_VAR 0 3
21974: PPUSH
21975: LD_VAR 0 4
21979: PPUSH
21980: CALL 22358 0 5
21984: ST_TO_ADDR
// end ;
21985: LD_VAR 0 5
21989: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21990: LD_INT 0
21992: PPUSH
21993: PPUSH
21994: PPUSH
21995: PPUSH
// if not list or not unit then
21996: LD_VAR 0 2
22000: NOT
22001: PUSH
22002: LD_VAR 0 1
22006: NOT
22007: OR
22008: IFFALSE 22012
// exit ;
22010: GO 22353
// result := [ ] ;
22012: LD_ADDR_VAR 0 5
22016: PUSH
22017: EMPTY
22018: ST_TO_ADDR
// for i in list do
22019: LD_ADDR_VAR 0 6
22023: PUSH
22024: LD_VAR 0 2
22028: PUSH
22029: FOR_IN
22030: IFFALSE 22248
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22032: LD_ADDR_VAR 0 8
22036: PUSH
22037: LD_VAR 0 1
22041: PPUSH
22042: LD_VAR 0 6
22046: PUSH
22047: LD_INT 1
22049: ARRAY
22050: PPUSH
22051: LD_VAR 0 6
22055: PUSH
22056: LD_INT 2
22058: ARRAY
22059: PPUSH
22060: CALL_OW 297
22064: ST_TO_ADDR
// if not Count ( result ) then
22065: LD_VAR 0 5
22069: PPUSH
22070: CALL 18642 0 1
22074: NOT
22075: IFFALSE 22108
// begin result := Join ( result , [ i , tmp ] ) ;
22077: LD_ADDR_VAR 0 5
22081: PUSH
22082: LD_VAR 0 5
22086: PPUSH
22087: LD_VAR 0 6
22091: PUSH
22092: LD_VAR 0 8
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PPUSH
22101: CALL 54231 0 2
22105: ST_TO_ADDR
// continue ;
22106: GO 22029
// end ; if result [ result ] [ 2 ] <= tmp then
22108: LD_VAR 0 5
22112: PUSH
22113: LD_VAR 0 5
22117: ARRAY
22118: PUSH
22119: LD_INT 2
22121: ARRAY
22122: PUSH
22123: LD_VAR 0 8
22127: LESSEQUAL
22128: IFFALSE 22161
// result := Join ( result , [ i , tmp ] ) else
22130: LD_ADDR_VAR 0 5
22134: PUSH
22135: LD_VAR 0 5
22139: PPUSH
22140: LD_VAR 0 6
22144: PUSH
22145: LD_VAR 0 8
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PPUSH
22154: CALL 54231 0 2
22158: ST_TO_ADDR
22159: GO 22246
// begin for j := 1 to Count ( result ) do
22161: LD_ADDR_VAR 0 7
22165: PUSH
22166: DOUBLE
22167: LD_INT 1
22169: DEC
22170: ST_TO_ADDR
22171: LD_VAR 0 5
22175: PPUSH
22176: CALL 18642 0 1
22180: PUSH
22181: FOR_TO
22182: IFFALSE 22244
// begin if tmp < result [ j ] [ 2 ] then
22184: LD_VAR 0 8
22188: PUSH
22189: LD_VAR 0 5
22193: PUSH
22194: LD_VAR 0 7
22198: ARRAY
22199: PUSH
22200: LD_INT 2
22202: ARRAY
22203: LESS
22204: IFFALSE 22242
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22206: LD_ADDR_VAR 0 5
22210: PUSH
22211: LD_VAR 0 5
22215: PPUSH
22216: LD_VAR 0 7
22220: PPUSH
22221: LD_VAR 0 6
22225: PUSH
22226: LD_VAR 0 8
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PPUSH
22235: CALL_OW 2
22239: ST_TO_ADDR
// break ;
22240: GO 22244
// end ; end ;
22242: GO 22181
22244: POP
22245: POP
// end ; end ;
22246: GO 22029
22248: POP
22249: POP
// if result and not asc then
22250: LD_VAR 0 5
22254: PUSH
22255: LD_VAR 0 3
22259: NOT
22260: AND
22261: IFFALSE 22278
// result := ReverseArray ( result ) ;
22263: LD_ADDR_VAR 0 5
22267: PUSH
22268: LD_VAR 0 5
22272: PPUSH
22273: CALL 49518 0 1
22277: ST_TO_ADDR
// tmp := [ ] ;
22278: LD_ADDR_VAR 0 8
22282: PUSH
22283: EMPTY
22284: ST_TO_ADDR
// if mode then
22285: LD_VAR 0 4
22289: IFFALSE 22353
// begin for i := 1 to result do
22291: LD_ADDR_VAR 0 6
22295: PUSH
22296: DOUBLE
22297: LD_INT 1
22299: DEC
22300: ST_TO_ADDR
22301: LD_VAR 0 5
22305: PUSH
22306: FOR_TO
22307: IFFALSE 22341
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22309: LD_ADDR_VAR 0 8
22313: PUSH
22314: LD_VAR 0 8
22318: PPUSH
22319: LD_VAR 0 5
22323: PUSH
22324: LD_VAR 0 6
22328: ARRAY
22329: PUSH
22330: LD_INT 1
22332: ARRAY
22333: PPUSH
22334: CALL 54231 0 2
22338: ST_TO_ADDR
22339: GO 22306
22341: POP
22342: POP
// result := tmp ;
22343: LD_ADDR_VAR 0 5
22347: PUSH
22348: LD_VAR 0 8
22352: ST_TO_ADDR
// end ; end ;
22353: LD_VAR 0 5
22357: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22358: LD_INT 0
22360: PPUSH
22361: PPUSH
22362: PPUSH
22363: PPUSH
// if not list then
22364: LD_VAR 0 3
22368: NOT
22369: IFFALSE 22373
// exit ;
22371: GO 22761
// result := [ ] ;
22373: LD_ADDR_VAR 0 6
22377: PUSH
22378: EMPTY
22379: ST_TO_ADDR
// for i in list do
22380: LD_ADDR_VAR 0 7
22384: PUSH
22385: LD_VAR 0 3
22389: PUSH
22390: FOR_IN
22391: IFFALSE 22593
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22393: LD_ADDR_VAR 0 9
22397: PUSH
22398: LD_VAR 0 7
22402: PPUSH
22403: LD_VAR 0 1
22407: PPUSH
22408: LD_VAR 0 2
22412: PPUSH
22413: CALL_OW 297
22417: ST_TO_ADDR
// if not result then
22418: LD_VAR 0 6
22422: NOT
22423: IFFALSE 22449
// result := [ [ i , tmp ] ] else
22425: LD_ADDR_VAR 0 6
22429: PUSH
22430: LD_VAR 0 7
22434: PUSH
22435: LD_VAR 0 9
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: EMPTY
22445: LIST
22446: ST_TO_ADDR
22447: GO 22591
// begin if result [ result ] [ 2 ] < tmp then
22449: LD_VAR 0 6
22453: PUSH
22454: LD_VAR 0 6
22458: ARRAY
22459: PUSH
22460: LD_INT 2
22462: ARRAY
22463: PUSH
22464: LD_VAR 0 9
22468: LESS
22469: IFFALSE 22511
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22471: LD_ADDR_VAR 0 6
22475: PUSH
22476: LD_VAR 0 6
22480: PPUSH
22481: LD_VAR 0 6
22485: PUSH
22486: LD_INT 1
22488: PLUS
22489: PPUSH
22490: LD_VAR 0 7
22494: PUSH
22495: LD_VAR 0 9
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PPUSH
22504: CALL_OW 2
22508: ST_TO_ADDR
22509: GO 22591
// for j = 1 to result do
22511: LD_ADDR_VAR 0 8
22515: PUSH
22516: DOUBLE
22517: LD_INT 1
22519: DEC
22520: ST_TO_ADDR
22521: LD_VAR 0 6
22525: PUSH
22526: FOR_TO
22527: IFFALSE 22589
// begin if tmp < result [ j ] [ 2 ] then
22529: LD_VAR 0 9
22533: PUSH
22534: LD_VAR 0 6
22538: PUSH
22539: LD_VAR 0 8
22543: ARRAY
22544: PUSH
22545: LD_INT 2
22547: ARRAY
22548: LESS
22549: IFFALSE 22587
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22551: LD_ADDR_VAR 0 6
22555: PUSH
22556: LD_VAR 0 6
22560: PPUSH
22561: LD_VAR 0 8
22565: PPUSH
22566: LD_VAR 0 7
22570: PUSH
22571: LD_VAR 0 9
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PPUSH
22580: CALL_OW 2
22584: ST_TO_ADDR
// break ;
22585: GO 22589
// end ; end ;
22587: GO 22526
22589: POP
22590: POP
// end ; end ;
22591: GO 22390
22593: POP
22594: POP
// if result and not asc then
22595: LD_VAR 0 6
22599: PUSH
22600: LD_VAR 0 4
22604: NOT
22605: AND
22606: IFFALSE 22681
// begin tmp := result ;
22608: LD_ADDR_VAR 0 9
22612: PUSH
22613: LD_VAR 0 6
22617: ST_TO_ADDR
// for i = tmp downto 1 do
22618: LD_ADDR_VAR 0 7
22622: PUSH
22623: DOUBLE
22624: LD_VAR 0 9
22628: INC
22629: ST_TO_ADDR
22630: LD_INT 1
22632: PUSH
22633: FOR_DOWNTO
22634: IFFALSE 22679
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22636: LD_ADDR_VAR 0 6
22640: PUSH
22641: LD_VAR 0 6
22645: PPUSH
22646: LD_VAR 0 9
22650: PUSH
22651: LD_VAR 0 7
22655: MINUS
22656: PUSH
22657: LD_INT 1
22659: PLUS
22660: PPUSH
22661: LD_VAR 0 9
22665: PUSH
22666: LD_VAR 0 7
22670: ARRAY
22671: PPUSH
22672: CALL_OW 1
22676: ST_TO_ADDR
22677: GO 22633
22679: POP
22680: POP
// end ; tmp := [ ] ;
22681: LD_ADDR_VAR 0 9
22685: PUSH
22686: EMPTY
22687: ST_TO_ADDR
// if mode then
22688: LD_VAR 0 5
22692: IFFALSE 22761
// begin for i = 1 to result do
22694: LD_ADDR_VAR 0 7
22698: PUSH
22699: DOUBLE
22700: LD_INT 1
22702: DEC
22703: ST_TO_ADDR
22704: LD_VAR 0 6
22708: PUSH
22709: FOR_TO
22710: IFFALSE 22749
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22712: LD_ADDR_VAR 0 9
22716: PUSH
22717: LD_VAR 0 9
22721: PPUSH
22722: LD_VAR 0 7
22726: PPUSH
22727: LD_VAR 0 6
22731: PUSH
22732: LD_VAR 0 7
22736: ARRAY
22737: PUSH
22738: LD_INT 1
22740: ARRAY
22741: PPUSH
22742: CALL_OW 1
22746: ST_TO_ADDR
22747: GO 22709
22749: POP
22750: POP
// result := tmp ;
22751: LD_ADDR_VAR 0 6
22755: PUSH
22756: LD_VAR 0 9
22760: ST_TO_ADDR
// end ; end ;
22761: LD_VAR 0 6
22765: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22766: LD_INT 0
22768: PPUSH
22769: PPUSH
22770: PPUSH
22771: PPUSH
22772: PPUSH
22773: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22774: LD_ADDR_VAR 0 5
22778: PUSH
22779: LD_INT 0
22781: PUSH
22782: LD_INT 0
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: EMPTY
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: ST_TO_ADDR
// if not x or not y then
22796: LD_VAR 0 2
22800: NOT
22801: PUSH
22802: LD_VAR 0 3
22806: NOT
22807: OR
22808: IFFALSE 22812
// exit ;
22810: GO 24462
// if not range then
22812: LD_VAR 0 4
22816: NOT
22817: IFFALSE 22827
// range := 10 ;
22819: LD_ADDR_VAR 0 4
22823: PUSH
22824: LD_INT 10
22826: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22827: LD_ADDR_VAR 0 8
22831: PUSH
22832: LD_INT 81
22834: PUSH
22835: LD_VAR 0 1
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 92
22846: PUSH
22847: LD_VAR 0 2
22851: PUSH
22852: LD_VAR 0 3
22856: PUSH
22857: LD_VAR 0 4
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 3
22870: PUSH
22871: LD_INT 21
22873: PUSH
22874: LD_INT 3
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: LIST
22889: PPUSH
22890: CALL_OW 69
22894: ST_TO_ADDR
// if not tmp then
22895: LD_VAR 0 8
22899: NOT
22900: IFFALSE 22904
// exit ;
22902: GO 24462
// for i in tmp do
22904: LD_ADDR_VAR 0 6
22908: PUSH
22909: LD_VAR 0 8
22913: PUSH
22914: FOR_IN
22915: IFFALSE 24437
// begin points := [ 0 , 0 , 0 ] ;
22917: LD_ADDR_VAR 0 9
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: LD_INT 0
22927: PUSH
22928: LD_INT 0
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: LIST
22935: ST_TO_ADDR
// bpoints := 1 ;
22936: LD_ADDR_VAR 0 10
22940: PUSH
22941: LD_INT 1
22943: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22944: LD_VAR 0 6
22948: PPUSH
22949: CALL_OW 247
22953: PUSH
22954: LD_INT 1
22956: DOUBLE
22957: EQUAL
22958: IFTRUE 22962
22960: GO 23540
22962: POP
// begin if GetClass ( i ) = 1 then
22963: LD_VAR 0 6
22967: PPUSH
22968: CALL_OW 257
22972: PUSH
22973: LD_INT 1
22975: EQUAL
22976: IFFALSE 22997
// points := [ 10 , 5 , 3 ] ;
22978: LD_ADDR_VAR 0 9
22982: PUSH
22983: LD_INT 10
22985: PUSH
22986: LD_INT 5
22988: PUSH
22989: LD_INT 3
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: LIST
22996: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22997: LD_VAR 0 6
23001: PPUSH
23002: CALL_OW 257
23006: PUSH
23007: LD_INT 2
23009: PUSH
23010: LD_INT 3
23012: PUSH
23013: LD_INT 4
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: LIST
23020: IN
23021: IFFALSE 23042
// points := [ 3 , 2 , 1 ] ;
23023: LD_ADDR_VAR 0 9
23027: PUSH
23028: LD_INT 3
23030: PUSH
23031: LD_INT 2
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: LIST
23041: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23042: LD_VAR 0 6
23046: PPUSH
23047: CALL_OW 257
23051: PUSH
23052: LD_INT 5
23054: EQUAL
23055: IFFALSE 23076
// points := [ 130 , 5 , 2 ] ;
23057: LD_ADDR_VAR 0 9
23061: PUSH
23062: LD_INT 130
23064: PUSH
23065: LD_INT 5
23067: PUSH
23068: LD_INT 2
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: LIST
23075: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23076: LD_VAR 0 6
23080: PPUSH
23081: CALL_OW 257
23085: PUSH
23086: LD_INT 8
23088: EQUAL
23089: IFFALSE 23110
// points := [ 35 , 35 , 30 ] ;
23091: LD_ADDR_VAR 0 9
23095: PUSH
23096: LD_INT 35
23098: PUSH
23099: LD_INT 35
23101: PUSH
23102: LD_INT 30
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: LIST
23109: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23110: LD_VAR 0 6
23114: PPUSH
23115: CALL_OW 257
23119: PUSH
23120: LD_INT 9
23122: EQUAL
23123: IFFALSE 23144
// points := [ 20 , 55 , 40 ] ;
23125: LD_ADDR_VAR 0 9
23129: PUSH
23130: LD_INT 20
23132: PUSH
23133: LD_INT 55
23135: PUSH
23136: LD_INT 40
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23144: LD_VAR 0 6
23148: PPUSH
23149: CALL_OW 257
23153: PUSH
23154: LD_INT 12
23156: PUSH
23157: LD_INT 16
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: IN
23164: IFFALSE 23185
// points := [ 5 , 3 , 2 ] ;
23166: LD_ADDR_VAR 0 9
23170: PUSH
23171: LD_INT 5
23173: PUSH
23174: LD_INT 3
23176: PUSH
23177: LD_INT 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: LIST
23184: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23185: LD_VAR 0 6
23189: PPUSH
23190: CALL_OW 257
23194: PUSH
23195: LD_INT 17
23197: EQUAL
23198: IFFALSE 23219
// points := [ 100 , 50 , 75 ] ;
23200: LD_ADDR_VAR 0 9
23204: PUSH
23205: LD_INT 100
23207: PUSH
23208: LD_INT 50
23210: PUSH
23211: LD_INT 75
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: LIST
23218: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23219: LD_VAR 0 6
23223: PPUSH
23224: CALL_OW 257
23228: PUSH
23229: LD_INT 15
23231: EQUAL
23232: IFFALSE 23253
// points := [ 10 , 5 , 3 ] ;
23234: LD_ADDR_VAR 0 9
23238: PUSH
23239: LD_INT 10
23241: PUSH
23242: LD_INT 5
23244: PUSH
23245: LD_INT 3
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: LIST
23252: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23253: LD_VAR 0 6
23257: PPUSH
23258: CALL_OW 257
23262: PUSH
23263: LD_INT 14
23265: EQUAL
23266: IFFALSE 23287
// points := [ 10 , 0 , 0 ] ;
23268: LD_ADDR_VAR 0 9
23272: PUSH
23273: LD_INT 10
23275: PUSH
23276: LD_INT 0
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: LIST
23286: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23287: LD_VAR 0 6
23291: PPUSH
23292: CALL_OW 257
23296: PUSH
23297: LD_INT 11
23299: EQUAL
23300: IFFALSE 23321
// points := [ 30 , 10 , 5 ] ;
23302: LD_ADDR_VAR 0 9
23306: PUSH
23307: LD_INT 30
23309: PUSH
23310: LD_INT 10
23312: PUSH
23313: LD_INT 5
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: LIST
23320: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23321: LD_VAR 0 1
23325: PPUSH
23326: LD_INT 5
23328: PPUSH
23329: CALL_OW 321
23333: PUSH
23334: LD_INT 2
23336: EQUAL
23337: IFFALSE 23354
// bpoints := bpoints * 1.8 ;
23339: LD_ADDR_VAR 0 10
23343: PUSH
23344: LD_VAR 0 10
23348: PUSH
23349: LD_REAL  1.80000000000000E+0000
23352: MUL
23353: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23354: LD_VAR 0 6
23358: PPUSH
23359: CALL_OW 257
23363: PUSH
23364: LD_INT 1
23366: PUSH
23367: LD_INT 2
23369: PUSH
23370: LD_INT 3
23372: PUSH
23373: LD_INT 4
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: IN
23382: PUSH
23383: LD_VAR 0 1
23387: PPUSH
23388: LD_INT 51
23390: PPUSH
23391: CALL_OW 321
23395: PUSH
23396: LD_INT 2
23398: EQUAL
23399: AND
23400: IFFALSE 23417
// bpoints := bpoints * 1.2 ;
23402: LD_ADDR_VAR 0 10
23406: PUSH
23407: LD_VAR 0 10
23411: PUSH
23412: LD_REAL  1.20000000000000E+0000
23415: MUL
23416: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23417: LD_VAR 0 6
23421: PPUSH
23422: CALL_OW 257
23426: PUSH
23427: LD_INT 5
23429: PUSH
23430: LD_INT 7
23432: PUSH
23433: LD_INT 9
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: LIST
23440: IN
23441: PUSH
23442: LD_VAR 0 1
23446: PPUSH
23447: LD_INT 52
23449: PPUSH
23450: CALL_OW 321
23454: PUSH
23455: LD_INT 2
23457: EQUAL
23458: AND
23459: IFFALSE 23476
// bpoints := bpoints * 1.5 ;
23461: LD_ADDR_VAR 0 10
23465: PUSH
23466: LD_VAR 0 10
23470: PUSH
23471: LD_REAL  1.50000000000000E+0000
23474: MUL
23475: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23476: LD_VAR 0 1
23480: PPUSH
23481: LD_INT 66
23483: PPUSH
23484: CALL_OW 321
23488: PUSH
23489: LD_INT 2
23491: EQUAL
23492: IFFALSE 23509
// bpoints := bpoints * 1.1 ;
23494: LD_ADDR_VAR 0 10
23498: PUSH
23499: LD_VAR 0 10
23503: PUSH
23504: LD_REAL  1.10000000000000E+0000
23507: MUL
23508: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23509: LD_ADDR_VAR 0 10
23513: PUSH
23514: LD_VAR 0 10
23518: PUSH
23519: LD_VAR 0 6
23523: PPUSH
23524: LD_INT 1
23526: PPUSH
23527: CALL_OW 259
23531: PUSH
23532: LD_REAL  1.15000000000000E+0000
23535: MUL
23536: MUL
23537: ST_TO_ADDR
// end ; unit_vehicle :
23538: GO 24366
23540: LD_INT 2
23542: DOUBLE
23543: EQUAL
23544: IFTRUE 23548
23546: GO 24354
23548: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23549: LD_VAR 0 6
23553: PPUSH
23554: CALL_OW 264
23558: PUSH
23559: LD_INT 2
23561: PUSH
23562: LD_INT 42
23564: PUSH
23565: LD_INT 24
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: LIST
23572: IN
23573: IFFALSE 23594
// points := [ 25 , 5 , 3 ] ;
23575: LD_ADDR_VAR 0 9
23579: PUSH
23580: LD_INT 25
23582: PUSH
23583: LD_INT 5
23585: PUSH
23586: LD_INT 3
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: LIST
23593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23594: LD_VAR 0 6
23598: PPUSH
23599: CALL_OW 264
23603: PUSH
23604: LD_INT 4
23606: PUSH
23607: LD_INT 43
23609: PUSH
23610: LD_INT 25
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: LIST
23617: IN
23618: IFFALSE 23639
// points := [ 40 , 15 , 5 ] ;
23620: LD_ADDR_VAR 0 9
23624: PUSH
23625: LD_INT 40
23627: PUSH
23628: LD_INT 15
23630: PUSH
23631: LD_INT 5
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: LIST
23638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23639: LD_VAR 0 6
23643: PPUSH
23644: CALL_OW 264
23648: PUSH
23649: LD_INT 3
23651: PUSH
23652: LD_INT 23
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: IN
23659: IFFALSE 23680
// points := [ 7 , 25 , 8 ] ;
23661: LD_ADDR_VAR 0 9
23665: PUSH
23666: LD_INT 7
23668: PUSH
23669: LD_INT 25
23671: PUSH
23672: LD_INT 8
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: LIST
23679: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23680: LD_VAR 0 6
23684: PPUSH
23685: CALL_OW 264
23689: PUSH
23690: LD_INT 5
23692: PUSH
23693: LD_INT 27
23695: PUSH
23696: LD_INT 44
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: LIST
23703: IN
23704: IFFALSE 23725
// points := [ 14 , 50 , 16 ] ;
23706: LD_ADDR_VAR 0 9
23710: PUSH
23711: LD_INT 14
23713: PUSH
23714: LD_INT 50
23716: PUSH
23717: LD_INT 16
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23725: LD_VAR 0 6
23729: PPUSH
23730: CALL_OW 264
23734: PUSH
23735: LD_INT 6
23737: PUSH
23738: LD_INT 46
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: IN
23745: IFFALSE 23766
// points := [ 32 , 120 , 70 ] ;
23747: LD_ADDR_VAR 0 9
23751: PUSH
23752: LD_INT 32
23754: PUSH
23755: LD_INT 120
23757: PUSH
23758: LD_INT 70
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: LIST
23765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23766: LD_VAR 0 6
23770: PPUSH
23771: CALL_OW 264
23775: PUSH
23776: LD_INT 7
23778: PUSH
23779: LD_INT 28
23781: PUSH
23782: LD_INT 45
23784: PUSH
23785: LD_INT 92
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: IN
23794: IFFALSE 23815
// points := [ 35 , 20 , 45 ] ;
23796: LD_ADDR_VAR 0 9
23800: PUSH
23801: LD_INT 35
23803: PUSH
23804: LD_INT 20
23806: PUSH
23807: LD_INT 45
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: LIST
23814: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23815: LD_VAR 0 6
23819: PPUSH
23820: CALL_OW 264
23824: PUSH
23825: LD_INT 47
23827: PUSH
23828: EMPTY
23829: LIST
23830: IN
23831: IFFALSE 23852
// points := [ 67 , 45 , 75 ] ;
23833: LD_ADDR_VAR 0 9
23837: PUSH
23838: LD_INT 67
23840: PUSH
23841: LD_INT 45
23843: PUSH
23844: LD_INT 75
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: LIST
23851: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23852: LD_VAR 0 6
23856: PPUSH
23857: CALL_OW 264
23861: PUSH
23862: LD_INT 26
23864: PUSH
23865: EMPTY
23866: LIST
23867: IN
23868: IFFALSE 23889
// points := [ 120 , 30 , 80 ] ;
23870: LD_ADDR_VAR 0 9
23874: PUSH
23875: LD_INT 120
23877: PUSH
23878: LD_INT 30
23880: PUSH
23881: LD_INT 80
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: LIST
23888: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23889: LD_VAR 0 6
23893: PPUSH
23894: CALL_OW 264
23898: PUSH
23899: LD_INT 22
23901: PUSH
23902: EMPTY
23903: LIST
23904: IN
23905: IFFALSE 23926
// points := [ 40 , 1 , 1 ] ;
23907: LD_ADDR_VAR 0 9
23911: PUSH
23912: LD_INT 40
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: LD_INT 1
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: LIST
23925: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23926: LD_VAR 0 6
23930: PPUSH
23931: CALL_OW 264
23935: PUSH
23936: LD_INT 29
23938: PUSH
23939: EMPTY
23940: LIST
23941: IN
23942: IFFALSE 23963
// points := [ 70 , 200 , 400 ] ;
23944: LD_ADDR_VAR 0 9
23948: PUSH
23949: LD_INT 70
23951: PUSH
23952: LD_INT 200
23954: PUSH
23955: LD_INT 400
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: LIST
23962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23963: LD_VAR 0 6
23967: PPUSH
23968: CALL_OW 264
23972: PUSH
23973: LD_INT 14
23975: PUSH
23976: LD_INT 53
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: IN
23983: IFFALSE 24004
// points := [ 40 , 10 , 20 ] ;
23985: LD_ADDR_VAR 0 9
23989: PUSH
23990: LD_INT 40
23992: PUSH
23993: LD_INT 10
23995: PUSH
23996: LD_INT 20
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24004: LD_VAR 0 6
24008: PPUSH
24009: CALL_OW 264
24013: PUSH
24014: LD_INT 9
24016: PUSH
24017: EMPTY
24018: LIST
24019: IN
24020: IFFALSE 24041
// points := [ 5 , 70 , 20 ] ;
24022: LD_ADDR_VAR 0 9
24026: PUSH
24027: LD_INT 5
24029: PUSH
24030: LD_INT 70
24032: PUSH
24033: LD_INT 20
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: LIST
24040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24041: LD_VAR 0 6
24045: PPUSH
24046: CALL_OW 264
24050: PUSH
24051: LD_INT 10
24053: PUSH
24054: EMPTY
24055: LIST
24056: IN
24057: IFFALSE 24078
// points := [ 35 , 110 , 70 ] ;
24059: LD_ADDR_VAR 0 9
24063: PUSH
24064: LD_INT 35
24066: PUSH
24067: LD_INT 110
24069: PUSH
24070: LD_INT 70
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: LIST
24077: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24078: LD_VAR 0 6
24082: PPUSH
24083: CALL_OW 265
24087: PUSH
24088: LD_INT 25
24090: EQUAL
24091: IFFALSE 24112
// points := [ 80 , 65 , 100 ] ;
24093: LD_ADDR_VAR 0 9
24097: PUSH
24098: LD_INT 80
24100: PUSH
24101: LD_INT 65
24103: PUSH
24104: LD_INT 100
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: LIST
24111: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24112: LD_VAR 0 6
24116: PPUSH
24117: CALL_OW 263
24121: PUSH
24122: LD_INT 1
24124: EQUAL
24125: IFFALSE 24160
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24127: LD_ADDR_VAR 0 10
24131: PUSH
24132: LD_VAR 0 10
24136: PUSH
24137: LD_VAR 0 6
24141: PPUSH
24142: CALL_OW 311
24146: PPUSH
24147: LD_INT 3
24149: PPUSH
24150: CALL_OW 259
24154: PUSH
24155: LD_INT 4
24157: MUL
24158: MUL
24159: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24160: LD_VAR 0 6
24164: PPUSH
24165: CALL_OW 263
24169: PUSH
24170: LD_INT 2
24172: EQUAL
24173: IFFALSE 24224
// begin j := IsControledBy ( i ) ;
24175: LD_ADDR_VAR 0 7
24179: PUSH
24180: LD_VAR 0 6
24184: PPUSH
24185: CALL_OW 312
24189: ST_TO_ADDR
// if j then
24190: LD_VAR 0 7
24194: IFFALSE 24224
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24196: LD_ADDR_VAR 0 10
24200: PUSH
24201: LD_VAR 0 10
24205: PUSH
24206: LD_VAR 0 7
24210: PPUSH
24211: LD_INT 3
24213: PPUSH
24214: CALL_OW 259
24218: PUSH
24219: LD_INT 3
24221: MUL
24222: MUL
24223: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24224: LD_VAR 0 6
24228: PPUSH
24229: CALL_OW 264
24233: PUSH
24234: LD_INT 5
24236: PUSH
24237: LD_INT 6
24239: PUSH
24240: LD_INT 46
24242: PUSH
24243: LD_INT 44
24245: PUSH
24246: LD_INT 47
24248: PUSH
24249: LD_INT 45
24251: PUSH
24252: LD_INT 28
24254: PUSH
24255: LD_INT 7
24257: PUSH
24258: LD_INT 27
24260: PUSH
24261: LD_INT 29
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: IN
24276: PUSH
24277: LD_VAR 0 1
24281: PPUSH
24282: LD_INT 52
24284: PPUSH
24285: CALL_OW 321
24289: PUSH
24290: LD_INT 2
24292: EQUAL
24293: AND
24294: IFFALSE 24311
// bpoints := bpoints * 1.2 ;
24296: LD_ADDR_VAR 0 10
24300: PUSH
24301: LD_VAR 0 10
24305: PUSH
24306: LD_REAL  1.20000000000000E+0000
24309: MUL
24310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24311: LD_VAR 0 6
24315: PPUSH
24316: CALL_OW 264
24320: PUSH
24321: LD_INT 6
24323: PUSH
24324: LD_INT 46
24326: PUSH
24327: LD_INT 47
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: LIST
24334: IN
24335: IFFALSE 24352
// bpoints := bpoints * 1.2 ;
24337: LD_ADDR_VAR 0 10
24341: PUSH
24342: LD_VAR 0 10
24346: PUSH
24347: LD_REAL  1.20000000000000E+0000
24350: MUL
24351: ST_TO_ADDR
// end ; unit_building :
24352: GO 24366
24354: LD_INT 3
24356: DOUBLE
24357: EQUAL
24358: IFTRUE 24362
24360: GO 24365
24362: POP
// ; end ;
24363: GO 24366
24365: POP
// for j = 1 to 3 do
24366: LD_ADDR_VAR 0 7
24370: PUSH
24371: DOUBLE
24372: LD_INT 1
24374: DEC
24375: ST_TO_ADDR
24376: LD_INT 3
24378: PUSH
24379: FOR_TO
24380: IFFALSE 24433
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24382: LD_ADDR_VAR 0 5
24386: PUSH
24387: LD_VAR 0 5
24391: PPUSH
24392: LD_VAR 0 7
24396: PPUSH
24397: LD_VAR 0 5
24401: PUSH
24402: LD_VAR 0 7
24406: ARRAY
24407: PUSH
24408: LD_VAR 0 9
24412: PUSH
24413: LD_VAR 0 7
24417: ARRAY
24418: PUSH
24419: LD_VAR 0 10
24423: MUL
24424: PLUS
24425: PPUSH
24426: CALL_OW 1
24430: ST_TO_ADDR
24431: GO 24379
24433: POP
24434: POP
// end ;
24435: GO 22914
24437: POP
24438: POP
// result := Replace ( result , 4 , tmp ) ;
24439: LD_ADDR_VAR 0 5
24443: PUSH
24444: LD_VAR 0 5
24448: PPUSH
24449: LD_INT 4
24451: PPUSH
24452: LD_VAR 0 8
24456: PPUSH
24457: CALL_OW 1
24461: ST_TO_ADDR
// end ;
24462: LD_VAR 0 5
24466: RET
// export function DangerAtRange ( unit , range ) ; begin
24467: LD_INT 0
24469: PPUSH
// if not unit then
24470: LD_VAR 0 1
24474: NOT
24475: IFFALSE 24479
// exit ;
24477: GO 24524
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24479: LD_ADDR_VAR 0 3
24483: PUSH
24484: LD_VAR 0 1
24488: PPUSH
24489: CALL_OW 255
24493: PPUSH
24494: LD_VAR 0 1
24498: PPUSH
24499: CALL_OW 250
24503: PPUSH
24504: LD_VAR 0 1
24508: PPUSH
24509: CALL_OW 251
24513: PPUSH
24514: LD_VAR 0 2
24518: PPUSH
24519: CALL 22766 0 4
24523: ST_TO_ADDR
// end ;
24524: LD_VAR 0 3
24528: RET
// export function DangerInArea ( side , area ) ; begin
24529: LD_INT 0
24531: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24532: LD_ADDR_VAR 0 3
24536: PUSH
24537: LD_VAR 0 2
24541: PPUSH
24542: LD_INT 81
24544: PUSH
24545: LD_VAR 0 1
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PPUSH
24554: CALL_OW 70
24558: ST_TO_ADDR
// end ;
24559: LD_VAR 0 3
24563: RET
// export function IsExtension ( b ) ; begin
24564: LD_INT 0
24566: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24567: LD_ADDR_VAR 0 2
24571: PUSH
24572: LD_VAR 0 1
24576: PUSH
24577: LD_INT 23
24579: PUSH
24580: LD_INT 20
24582: PUSH
24583: LD_INT 22
24585: PUSH
24586: LD_INT 17
24588: PUSH
24589: LD_INT 24
24591: PUSH
24592: LD_INT 21
24594: PUSH
24595: LD_INT 19
24597: PUSH
24598: LD_INT 16
24600: PUSH
24601: LD_INT 25
24603: PUSH
24604: LD_INT 18
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: IN
24619: ST_TO_ADDR
// end ;
24620: LD_VAR 0 2
24624: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24625: LD_INT 0
24627: PPUSH
24628: PPUSH
24629: PPUSH
// result := [ ] ;
24630: LD_ADDR_VAR 0 4
24634: PUSH
24635: EMPTY
24636: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24637: LD_ADDR_VAR 0 5
24641: PUSH
24642: LD_VAR 0 2
24646: PPUSH
24647: LD_INT 21
24649: PUSH
24650: LD_INT 3
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PPUSH
24657: CALL_OW 70
24661: ST_TO_ADDR
// if not tmp then
24662: LD_VAR 0 5
24666: NOT
24667: IFFALSE 24671
// exit ;
24669: GO 24735
// if checkLink then
24671: LD_VAR 0 3
24675: IFFALSE 24725
// begin for i in tmp do
24677: LD_ADDR_VAR 0 6
24681: PUSH
24682: LD_VAR 0 5
24686: PUSH
24687: FOR_IN
24688: IFFALSE 24723
// if GetBase ( i ) <> base then
24690: LD_VAR 0 6
24694: PPUSH
24695: CALL_OW 274
24699: PUSH
24700: LD_VAR 0 1
24704: NONEQUAL
24705: IFFALSE 24721
// ComLinkToBase ( base , i ) ;
24707: LD_VAR 0 1
24711: PPUSH
24712: LD_VAR 0 6
24716: PPUSH
24717: CALL_OW 169
24721: GO 24687
24723: POP
24724: POP
// end ; result := tmp ;
24725: LD_ADDR_VAR 0 4
24729: PUSH
24730: LD_VAR 0 5
24734: ST_TO_ADDR
// end ;
24735: LD_VAR 0 4
24739: RET
// export function ComComplete ( units , b ) ; var i ; begin
24740: LD_INT 0
24742: PPUSH
24743: PPUSH
// if not units then
24744: LD_VAR 0 1
24748: NOT
24749: IFFALSE 24753
// exit ;
24751: GO 24843
// for i in units do
24753: LD_ADDR_VAR 0 4
24757: PUSH
24758: LD_VAR 0 1
24762: PUSH
24763: FOR_IN
24764: IFFALSE 24841
// if BuildingStatus ( b ) = bs_build then
24766: LD_VAR 0 2
24770: PPUSH
24771: CALL_OW 461
24775: PUSH
24776: LD_INT 1
24778: EQUAL
24779: IFFALSE 24839
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24781: LD_VAR 0 4
24785: PPUSH
24786: LD_STRING h
24788: PUSH
24789: LD_VAR 0 2
24793: PPUSH
24794: CALL_OW 250
24798: PUSH
24799: LD_VAR 0 2
24803: PPUSH
24804: CALL_OW 251
24808: PUSH
24809: LD_VAR 0 2
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: PUSH
24832: EMPTY
24833: LIST
24834: PPUSH
24835: CALL_OW 446
24839: GO 24763
24841: POP
24842: POP
// end ;
24843: LD_VAR 0 3
24847: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24848: LD_INT 0
24850: PPUSH
24851: PPUSH
24852: PPUSH
24853: PPUSH
24854: PPUSH
24855: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24856: LD_VAR 0 1
24860: NOT
24861: PUSH
24862: LD_VAR 0 1
24866: PPUSH
24867: CALL_OW 263
24871: PUSH
24872: LD_INT 2
24874: NONEQUAL
24875: OR
24876: IFFALSE 24880
// exit ;
24878: GO 25196
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24880: LD_ADDR_VAR 0 6
24884: PUSH
24885: LD_INT 22
24887: PUSH
24888: LD_VAR 0 1
24892: PPUSH
24893: CALL_OW 255
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 2
24904: PUSH
24905: LD_INT 30
24907: PUSH
24908: LD_INT 36
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 34
24917: PUSH
24918: LD_INT 31
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: LIST
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PPUSH
24934: CALL_OW 69
24938: ST_TO_ADDR
// if not tmp then
24939: LD_VAR 0 6
24943: NOT
24944: IFFALSE 24948
// exit ;
24946: GO 25196
// result := [ ] ;
24948: LD_ADDR_VAR 0 2
24952: PUSH
24953: EMPTY
24954: ST_TO_ADDR
// for i in tmp do
24955: LD_ADDR_VAR 0 3
24959: PUSH
24960: LD_VAR 0 6
24964: PUSH
24965: FOR_IN
24966: IFFALSE 25037
// begin t := UnitsInside ( i ) ;
24968: LD_ADDR_VAR 0 4
24972: PUSH
24973: LD_VAR 0 3
24977: PPUSH
24978: CALL_OW 313
24982: ST_TO_ADDR
// if t then
24983: LD_VAR 0 4
24987: IFFALSE 25035
// for j in t do
24989: LD_ADDR_VAR 0 7
24993: PUSH
24994: LD_VAR 0 4
24998: PUSH
24999: FOR_IN
25000: IFFALSE 25033
// result := Replace ( result , result + 1 , j ) ;
25002: LD_ADDR_VAR 0 2
25006: PUSH
25007: LD_VAR 0 2
25011: PPUSH
25012: LD_VAR 0 2
25016: PUSH
25017: LD_INT 1
25019: PLUS
25020: PPUSH
25021: LD_VAR 0 7
25025: PPUSH
25026: CALL_OW 1
25030: ST_TO_ADDR
25031: GO 24999
25033: POP
25034: POP
// end ;
25035: GO 24965
25037: POP
25038: POP
// if not result then
25039: LD_VAR 0 2
25043: NOT
25044: IFFALSE 25048
// exit ;
25046: GO 25196
// mech := result [ 1 ] ;
25048: LD_ADDR_VAR 0 5
25052: PUSH
25053: LD_VAR 0 2
25057: PUSH
25058: LD_INT 1
25060: ARRAY
25061: ST_TO_ADDR
// if result > 1 then
25062: LD_VAR 0 2
25066: PUSH
25067: LD_INT 1
25069: GREATER
25070: IFFALSE 25182
// begin for i = 2 to result do
25072: LD_ADDR_VAR 0 3
25076: PUSH
25077: DOUBLE
25078: LD_INT 2
25080: DEC
25081: ST_TO_ADDR
25082: LD_VAR 0 2
25086: PUSH
25087: FOR_TO
25088: IFFALSE 25180
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25090: LD_ADDR_VAR 0 4
25094: PUSH
25095: LD_VAR 0 2
25099: PUSH
25100: LD_VAR 0 3
25104: ARRAY
25105: PPUSH
25106: LD_INT 3
25108: PPUSH
25109: CALL_OW 259
25113: PUSH
25114: LD_VAR 0 2
25118: PUSH
25119: LD_VAR 0 3
25123: ARRAY
25124: PPUSH
25125: CALL_OW 432
25129: MINUS
25130: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25131: LD_VAR 0 4
25135: PUSH
25136: LD_VAR 0 5
25140: PPUSH
25141: LD_INT 3
25143: PPUSH
25144: CALL_OW 259
25148: PUSH
25149: LD_VAR 0 5
25153: PPUSH
25154: CALL_OW 432
25158: MINUS
25159: GREATEREQUAL
25160: IFFALSE 25178
// mech := result [ i ] ;
25162: LD_ADDR_VAR 0 5
25166: PUSH
25167: LD_VAR 0 2
25171: PUSH
25172: LD_VAR 0 3
25176: ARRAY
25177: ST_TO_ADDR
// end ;
25178: GO 25087
25180: POP
25181: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25182: LD_VAR 0 1
25186: PPUSH
25187: LD_VAR 0 5
25191: PPUSH
25192: CALL_OW 135
// end ;
25196: LD_VAR 0 2
25200: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25201: LD_INT 0
25203: PPUSH
25204: PPUSH
25205: PPUSH
25206: PPUSH
25207: PPUSH
25208: PPUSH
25209: PPUSH
25210: PPUSH
25211: PPUSH
25212: PPUSH
25213: PPUSH
25214: PPUSH
25215: PPUSH
// result := [ ] ;
25216: LD_ADDR_VAR 0 7
25220: PUSH
25221: EMPTY
25222: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25223: LD_VAR 0 1
25227: PPUSH
25228: CALL_OW 266
25232: PUSH
25233: LD_INT 0
25235: PUSH
25236: LD_INT 1
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: IN
25243: NOT
25244: IFFALSE 25248
// exit ;
25246: GO 26882
// if name then
25248: LD_VAR 0 3
25252: IFFALSE 25268
// SetBName ( base_dep , name ) ;
25254: LD_VAR 0 1
25258: PPUSH
25259: LD_VAR 0 3
25263: PPUSH
25264: CALL_OW 500
// base := GetBase ( base_dep ) ;
25268: LD_ADDR_VAR 0 15
25272: PUSH
25273: LD_VAR 0 1
25277: PPUSH
25278: CALL_OW 274
25282: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25283: LD_ADDR_VAR 0 16
25287: PUSH
25288: LD_VAR 0 1
25292: PPUSH
25293: CALL_OW 255
25297: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25298: LD_ADDR_VAR 0 17
25302: PUSH
25303: LD_VAR 0 1
25307: PPUSH
25308: CALL_OW 248
25312: ST_TO_ADDR
// if sources then
25313: LD_VAR 0 5
25317: IFFALSE 25364
// for i = 1 to 3 do
25319: LD_ADDR_VAR 0 8
25323: PUSH
25324: DOUBLE
25325: LD_INT 1
25327: DEC
25328: ST_TO_ADDR
25329: LD_INT 3
25331: PUSH
25332: FOR_TO
25333: IFFALSE 25362
// AddResourceType ( base , i , sources [ i ] ) ;
25335: LD_VAR 0 15
25339: PPUSH
25340: LD_VAR 0 8
25344: PPUSH
25345: LD_VAR 0 5
25349: PUSH
25350: LD_VAR 0 8
25354: ARRAY
25355: PPUSH
25356: CALL_OW 276
25360: GO 25332
25362: POP
25363: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25364: LD_ADDR_VAR 0 18
25368: PUSH
25369: LD_VAR 0 15
25373: PPUSH
25374: LD_VAR 0 2
25378: PPUSH
25379: LD_INT 1
25381: PPUSH
25382: CALL 24625 0 3
25386: ST_TO_ADDR
// InitHc ;
25387: CALL_OW 19
// InitUc ;
25391: CALL_OW 18
// uc_side := side ;
25395: LD_ADDR_OWVAR 20
25399: PUSH
25400: LD_VAR 0 16
25404: ST_TO_ADDR
// uc_nation := nation ;
25405: LD_ADDR_OWVAR 21
25409: PUSH
25410: LD_VAR 0 17
25414: ST_TO_ADDR
// if buildings then
25415: LD_VAR 0 18
25419: IFFALSE 26741
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25421: LD_ADDR_VAR 0 19
25425: PUSH
25426: LD_VAR 0 18
25430: PPUSH
25431: LD_INT 2
25433: PUSH
25434: LD_INT 30
25436: PUSH
25437: LD_INT 29
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 30
25446: PUSH
25447: LD_INT 30
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: LIST
25458: PPUSH
25459: CALL_OW 72
25463: ST_TO_ADDR
// if tmp then
25464: LD_VAR 0 19
25468: IFFALSE 25516
// for i in tmp do
25470: LD_ADDR_VAR 0 8
25474: PUSH
25475: LD_VAR 0 19
25479: PUSH
25480: FOR_IN
25481: IFFALSE 25514
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25483: LD_VAR 0 8
25487: PPUSH
25488: CALL_OW 250
25492: PPUSH
25493: LD_VAR 0 8
25497: PPUSH
25498: CALL_OW 251
25502: PPUSH
25503: LD_VAR 0 16
25507: PPUSH
25508: CALL_OW 441
25512: GO 25480
25514: POP
25515: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25516: LD_VAR 0 18
25520: PPUSH
25521: LD_INT 2
25523: PUSH
25524: LD_INT 30
25526: PUSH
25527: LD_INT 32
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 30
25536: PUSH
25537: LD_INT 33
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: LIST
25548: PPUSH
25549: CALL_OW 72
25553: IFFALSE 25641
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25555: LD_ADDR_VAR 0 8
25559: PUSH
25560: LD_VAR 0 18
25564: PPUSH
25565: LD_INT 2
25567: PUSH
25568: LD_INT 30
25570: PUSH
25571: LD_INT 32
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 30
25580: PUSH
25581: LD_INT 33
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: LIST
25592: PPUSH
25593: CALL_OW 72
25597: PUSH
25598: FOR_IN
25599: IFFALSE 25639
// begin if not GetBWeapon ( i ) then
25601: LD_VAR 0 8
25605: PPUSH
25606: CALL_OW 269
25610: NOT
25611: IFFALSE 25637
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25613: LD_VAR 0 8
25617: PPUSH
25618: LD_VAR 0 8
25622: PPUSH
25623: LD_VAR 0 2
25627: PPUSH
25628: CALL 26887 0 2
25632: PPUSH
25633: CALL_OW 431
// end ;
25637: GO 25598
25639: POP
25640: POP
// end ; for i = 1 to personel do
25641: LD_ADDR_VAR 0 8
25645: PUSH
25646: DOUBLE
25647: LD_INT 1
25649: DEC
25650: ST_TO_ADDR
25651: LD_VAR 0 6
25655: PUSH
25656: FOR_TO
25657: IFFALSE 26721
// begin if i > 4 then
25659: LD_VAR 0 8
25663: PUSH
25664: LD_INT 4
25666: GREATER
25667: IFFALSE 25671
// break ;
25669: GO 26721
// case i of 1 :
25671: LD_VAR 0 8
25675: PUSH
25676: LD_INT 1
25678: DOUBLE
25679: EQUAL
25680: IFTRUE 25684
25682: GO 25764
25684: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25685: LD_ADDR_VAR 0 12
25689: PUSH
25690: LD_VAR 0 18
25694: PPUSH
25695: LD_INT 22
25697: PUSH
25698: LD_VAR 0 16
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 58
25709: PUSH
25710: EMPTY
25711: LIST
25712: PUSH
25713: LD_INT 2
25715: PUSH
25716: LD_INT 30
25718: PUSH
25719: LD_INT 32
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 30
25728: PUSH
25729: LD_INT 4
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 30
25738: PUSH
25739: LD_INT 5
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: LIST
25756: PPUSH
25757: CALL_OW 72
25761: ST_TO_ADDR
25762: GO 25986
25764: LD_INT 2
25766: DOUBLE
25767: EQUAL
25768: IFTRUE 25772
25770: GO 25834
25772: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25773: LD_ADDR_VAR 0 12
25777: PUSH
25778: LD_VAR 0 18
25782: PPUSH
25783: LD_INT 22
25785: PUSH
25786: LD_VAR 0 16
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 2
25797: PUSH
25798: LD_INT 30
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 30
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: LIST
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PPUSH
25827: CALL_OW 72
25831: ST_TO_ADDR
25832: GO 25986
25834: LD_INT 3
25836: DOUBLE
25837: EQUAL
25838: IFTRUE 25842
25840: GO 25904
25842: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25843: LD_ADDR_VAR 0 12
25847: PUSH
25848: LD_VAR 0 18
25852: PPUSH
25853: LD_INT 22
25855: PUSH
25856: LD_VAR 0 16
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 2
25867: PUSH
25868: LD_INT 30
25870: PUSH
25871: LD_INT 2
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 30
25880: PUSH
25881: LD_INT 3
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: LIST
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PPUSH
25897: CALL_OW 72
25901: ST_TO_ADDR
25902: GO 25986
25904: LD_INT 4
25906: DOUBLE
25907: EQUAL
25908: IFTRUE 25912
25910: GO 25985
25912: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25913: LD_ADDR_VAR 0 12
25917: PUSH
25918: LD_VAR 0 18
25922: PPUSH
25923: LD_INT 22
25925: PUSH
25926: LD_VAR 0 16
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 2
25937: PUSH
25938: LD_INT 30
25940: PUSH
25941: LD_INT 6
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 30
25950: PUSH
25951: LD_INT 7
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 30
25960: PUSH
25961: LD_INT 8
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PPUSH
25978: CALL_OW 72
25982: ST_TO_ADDR
25983: GO 25986
25985: POP
// if i = 1 then
25986: LD_VAR 0 8
25990: PUSH
25991: LD_INT 1
25993: EQUAL
25994: IFFALSE 26105
// begin tmp := [ ] ;
25996: LD_ADDR_VAR 0 19
26000: PUSH
26001: EMPTY
26002: ST_TO_ADDR
// for j in f do
26003: LD_ADDR_VAR 0 9
26007: PUSH
26008: LD_VAR 0 12
26012: PUSH
26013: FOR_IN
26014: IFFALSE 26087
// if GetBType ( j ) = b_bunker then
26016: LD_VAR 0 9
26020: PPUSH
26021: CALL_OW 266
26025: PUSH
26026: LD_INT 32
26028: EQUAL
26029: IFFALSE 26056
// tmp := Insert ( tmp , 1 , j ) else
26031: LD_ADDR_VAR 0 19
26035: PUSH
26036: LD_VAR 0 19
26040: PPUSH
26041: LD_INT 1
26043: PPUSH
26044: LD_VAR 0 9
26048: PPUSH
26049: CALL_OW 2
26053: ST_TO_ADDR
26054: GO 26085
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26056: LD_ADDR_VAR 0 19
26060: PUSH
26061: LD_VAR 0 19
26065: PPUSH
26066: LD_VAR 0 19
26070: PUSH
26071: LD_INT 1
26073: PLUS
26074: PPUSH
26075: LD_VAR 0 9
26079: PPUSH
26080: CALL_OW 2
26084: ST_TO_ADDR
26085: GO 26013
26087: POP
26088: POP
// if tmp then
26089: LD_VAR 0 19
26093: IFFALSE 26105
// f := tmp ;
26095: LD_ADDR_VAR 0 12
26099: PUSH
26100: LD_VAR 0 19
26104: ST_TO_ADDR
// end ; x := personel [ i ] ;
26105: LD_ADDR_VAR 0 13
26109: PUSH
26110: LD_VAR 0 6
26114: PUSH
26115: LD_VAR 0 8
26119: ARRAY
26120: ST_TO_ADDR
// if x = - 1 then
26121: LD_VAR 0 13
26125: PUSH
26126: LD_INT 1
26128: NEG
26129: EQUAL
26130: IFFALSE 26339
// begin for j in f do
26132: LD_ADDR_VAR 0 9
26136: PUSH
26137: LD_VAR 0 12
26141: PUSH
26142: FOR_IN
26143: IFFALSE 26335
// repeat InitHc ;
26145: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26149: LD_VAR 0 9
26153: PPUSH
26154: CALL_OW 266
26158: PUSH
26159: LD_INT 5
26161: EQUAL
26162: IFFALSE 26232
// begin if UnitsInside ( j ) < 3 then
26164: LD_VAR 0 9
26168: PPUSH
26169: CALL_OW 313
26173: PUSH
26174: LD_INT 3
26176: LESS
26177: IFFALSE 26213
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26179: LD_INT 0
26181: PPUSH
26182: LD_INT 5
26184: PUSH
26185: LD_INT 8
26187: PUSH
26188: LD_INT 9
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: LIST
26195: PUSH
26196: LD_VAR 0 17
26200: ARRAY
26201: PPUSH
26202: LD_VAR 0 4
26206: PPUSH
26207: CALL_OW 380
26211: GO 26230
// PrepareHuman ( false , i , skill ) ;
26213: LD_INT 0
26215: PPUSH
26216: LD_VAR 0 8
26220: PPUSH
26221: LD_VAR 0 4
26225: PPUSH
26226: CALL_OW 380
// end else
26230: GO 26249
// PrepareHuman ( false , i , skill ) ;
26232: LD_INT 0
26234: PPUSH
26235: LD_VAR 0 8
26239: PPUSH
26240: LD_VAR 0 4
26244: PPUSH
26245: CALL_OW 380
// un := CreateHuman ;
26249: LD_ADDR_VAR 0 14
26253: PUSH
26254: CALL_OW 44
26258: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26259: LD_ADDR_VAR 0 7
26263: PUSH
26264: LD_VAR 0 7
26268: PPUSH
26269: LD_INT 1
26271: PPUSH
26272: LD_VAR 0 14
26276: PPUSH
26277: CALL_OW 2
26281: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26282: LD_VAR 0 14
26286: PPUSH
26287: LD_VAR 0 9
26291: PPUSH
26292: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26296: LD_VAR 0 9
26300: PPUSH
26301: CALL_OW 313
26305: PUSH
26306: LD_INT 6
26308: EQUAL
26309: PUSH
26310: LD_VAR 0 9
26314: PPUSH
26315: CALL_OW 266
26319: PUSH
26320: LD_INT 32
26322: PUSH
26323: LD_INT 31
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: IN
26330: OR
26331: IFFALSE 26145
26333: GO 26142
26335: POP
26336: POP
// end else
26337: GO 26719
// for j = 1 to x do
26339: LD_ADDR_VAR 0 9
26343: PUSH
26344: DOUBLE
26345: LD_INT 1
26347: DEC
26348: ST_TO_ADDR
26349: LD_VAR 0 13
26353: PUSH
26354: FOR_TO
26355: IFFALSE 26717
// begin InitHc ;
26357: CALL_OW 19
// if not f then
26361: LD_VAR 0 12
26365: NOT
26366: IFFALSE 26455
// begin PrepareHuman ( false , i , skill ) ;
26368: LD_INT 0
26370: PPUSH
26371: LD_VAR 0 8
26375: PPUSH
26376: LD_VAR 0 4
26380: PPUSH
26381: CALL_OW 380
// un := CreateHuman ;
26385: LD_ADDR_VAR 0 14
26389: PUSH
26390: CALL_OW 44
26394: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26395: LD_ADDR_VAR 0 7
26399: PUSH
26400: LD_VAR 0 7
26404: PPUSH
26405: LD_INT 1
26407: PPUSH
26408: LD_VAR 0 14
26412: PPUSH
26413: CALL_OW 2
26417: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26418: LD_VAR 0 14
26422: PPUSH
26423: LD_VAR 0 1
26427: PPUSH
26428: CALL_OW 250
26432: PPUSH
26433: LD_VAR 0 1
26437: PPUSH
26438: CALL_OW 251
26442: PPUSH
26443: LD_INT 10
26445: PPUSH
26446: LD_INT 0
26448: PPUSH
26449: CALL_OW 50
// continue ;
26453: GO 26354
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26455: LD_VAR 0 12
26459: PUSH
26460: LD_INT 1
26462: ARRAY
26463: PPUSH
26464: CALL_OW 313
26468: PUSH
26469: LD_VAR 0 12
26473: PUSH
26474: LD_INT 1
26476: ARRAY
26477: PPUSH
26478: CALL_OW 266
26482: PUSH
26483: LD_INT 32
26485: PUSH
26486: LD_INT 31
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: IN
26493: AND
26494: PUSH
26495: LD_VAR 0 12
26499: PUSH
26500: LD_INT 1
26502: ARRAY
26503: PPUSH
26504: CALL_OW 313
26508: PUSH
26509: LD_INT 6
26511: EQUAL
26512: OR
26513: IFFALSE 26533
// f := Delete ( f , 1 ) ;
26515: LD_ADDR_VAR 0 12
26519: PUSH
26520: LD_VAR 0 12
26524: PPUSH
26525: LD_INT 1
26527: PPUSH
26528: CALL_OW 3
26532: ST_TO_ADDR
// if not f then
26533: LD_VAR 0 12
26537: NOT
26538: IFFALSE 26556
// begin x := x + 2 ;
26540: LD_ADDR_VAR 0 13
26544: PUSH
26545: LD_VAR 0 13
26549: PUSH
26550: LD_INT 2
26552: PLUS
26553: ST_TO_ADDR
// continue ;
26554: GO 26354
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26556: LD_VAR 0 12
26560: PUSH
26561: LD_INT 1
26563: ARRAY
26564: PPUSH
26565: CALL_OW 266
26569: PUSH
26570: LD_INT 5
26572: EQUAL
26573: IFFALSE 26647
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26575: LD_VAR 0 12
26579: PUSH
26580: LD_INT 1
26582: ARRAY
26583: PPUSH
26584: CALL_OW 313
26588: PUSH
26589: LD_INT 3
26591: LESS
26592: IFFALSE 26628
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26594: LD_INT 0
26596: PPUSH
26597: LD_INT 5
26599: PUSH
26600: LD_INT 8
26602: PUSH
26603: LD_INT 9
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: LIST
26610: PUSH
26611: LD_VAR 0 17
26615: ARRAY
26616: PPUSH
26617: LD_VAR 0 4
26621: PPUSH
26622: CALL_OW 380
26626: GO 26645
// PrepareHuman ( false , i , skill ) ;
26628: LD_INT 0
26630: PPUSH
26631: LD_VAR 0 8
26635: PPUSH
26636: LD_VAR 0 4
26640: PPUSH
26641: CALL_OW 380
// end else
26645: GO 26664
// PrepareHuman ( false , i , skill ) ;
26647: LD_INT 0
26649: PPUSH
26650: LD_VAR 0 8
26654: PPUSH
26655: LD_VAR 0 4
26659: PPUSH
26660: CALL_OW 380
// un := CreateHuman ;
26664: LD_ADDR_VAR 0 14
26668: PUSH
26669: CALL_OW 44
26673: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26674: LD_ADDR_VAR 0 7
26678: PUSH
26679: LD_VAR 0 7
26683: PPUSH
26684: LD_INT 1
26686: PPUSH
26687: LD_VAR 0 14
26691: PPUSH
26692: CALL_OW 2
26696: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26697: LD_VAR 0 14
26701: PPUSH
26702: LD_VAR 0 12
26706: PUSH
26707: LD_INT 1
26709: ARRAY
26710: PPUSH
26711: CALL_OW 52
// end ;
26715: GO 26354
26717: POP
26718: POP
// end ;
26719: GO 25656
26721: POP
26722: POP
// result := result ^ buildings ;
26723: LD_ADDR_VAR 0 7
26727: PUSH
26728: LD_VAR 0 7
26732: PUSH
26733: LD_VAR 0 18
26737: ADD
26738: ST_TO_ADDR
// end else
26739: GO 26882
// begin for i = 1 to personel do
26741: LD_ADDR_VAR 0 8
26745: PUSH
26746: DOUBLE
26747: LD_INT 1
26749: DEC
26750: ST_TO_ADDR
26751: LD_VAR 0 6
26755: PUSH
26756: FOR_TO
26757: IFFALSE 26880
// begin if i > 4 then
26759: LD_VAR 0 8
26763: PUSH
26764: LD_INT 4
26766: GREATER
26767: IFFALSE 26771
// break ;
26769: GO 26880
// x := personel [ i ] ;
26771: LD_ADDR_VAR 0 13
26775: PUSH
26776: LD_VAR 0 6
26780: PUSH
26781: LD_VAR 0 8
26785: ARRAY
26786: ST_TO_ADDR
// if x = - 1 then
26787: LD_VAR 0 13
26791: PUSH
26792: LD_INT 1
26794: NEG
26795: EQUAL
26796: IFFALSE 26800
// continue ;
26798: GO 26756
// PrepareHuman ( false , i , skill ) ;
26800: LD_INT 0
26802: PPUSH
26803: LD_VAR 0 8
26807: PPUSH
26808: LD_VAR 0 4
26812: PPUSH
26813: CALL_OW 380
// un := CreateHuman ;
26817: LD_ADDR_VAR 0 14
26821: PUSH
26822: CALL_OW 44
26826: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26827: LD_VAR 0 14
26831: PPUSH
26832: LD_VAR 0 1
26836: PPUSH
26837: CALL_OW 250
26841: PPUSH
26842: LD_VAR 0 1
26846: PPUSH
26847: CALL_OW 251
26851: PPUSH
26852: LD_INT 10
26854: PPUSH
26855: LD_INT 0
26857: PPUSH
26858: CALL_OW 50
// result := result ^ un ;
26862: LD_ADDR_VAR 0 7
26866: PUSH
26867: LD_VAR 0 7
26871: PUSH
26872: LD_VAR 0 14
26876: ADD
26877: ST_TO_ADDR
// end ;
26878: GO 26756
26880: POP
26881: POP
// end ; end ;
26882: LD_VAR 0 7
26886: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26887: LD_INT 0
26889: PPUSH
26890: PPUSH
26891: PPUSH
26892: PPUSH
26893: PPUSH
26894: PPUSH
26895: PPUSH
26896: PPUSH
26897: PPUSH
26898: PPUSH
26899: PPUSH
26900: PPUSH
26901: PPUSH
26902: PPUSH
26903: PPUSH
26904: PPUSH
// result := false ;
26905: LD_ADDR_VAR 0 3
26909: PUSH
26910: LD_INT 0
26912: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26913: LD_VAR 0 1
26917: NOT
26918: PUSH
26919: LD_VAR 0 1
26923: PPUSH
26924: CALL_OW 266
26928: PUSH
26929: LD_INT 32
26931: PUSH
26932: LD_INT 33
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: IN
26939: NOT
26940: OR
26941: IFFALSE 26945
// exit ;
26943: GO 28054
// nat := GetNation ( tower ) ;
26945: LD_ADDR_VAR 0 12
26949: PUSH
26950: LD_VAR 0 1
26954: PPUSH
26955: CALL_OW 248
26959: ST_TO_ADDR
// side := GetSide ( tower ) ;
26960: LD_ADDR_VAR 0 16
26964: PUSH
26965: LD_VAR 0 1
26969: PPUSH
26970: CALL_OW 255
26974: ST_TO_ADDR
// x := GetX ( tower ) ;
26975: LD_ADDR_VAR 0 10
26979: PUSH
26980: LD_VAR 0 1
26984: PPUSH
26985: CALL_OW 250
26989: ST_TO_ADDR
// y := GetY ( tower ) ;
26990: LD_ADDR_VAR 0 11
26994: PUSH
26995: LD_VAR 0 1
26999: PPUSH
27000: CALL_OW 251
27004: ST_TO_ADDR
// if not x or not y then
27005: LD_VAR 0 10
27009: NOT
27010: PUSH
27011: LD_VAR 0 11
27015: NOT
27016: OR
27017: IFFALSE 27021
// exit ;
27019: GO 28054
// weapon := 0 ;
27021: LD_ADDR_VAR 0 18
27025: PUSH
27026: LD_INT 0
27028: ST_TO_ADDR
// fac_list := [ ] ;
27029: LD_ADDR_VAR 0 17
27033: PUSH
27034: EMPTY
27035: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27036: LD_ADDR_VAR 0 6
27040: PUSH
27041: LD_VAR 0 1
27045: PPUSH
27046: CALL_OW 274
27050: PPUSH
27051: LD_VAR 0 2
27055: PPUSH
27056: LD_INT 0
27058: PPUSH
27059: CALL 24625 0 3
27063: PPUSH
27064: LD_INT 30
27066: PUSH
27067: LD_INT 3
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PPUSH
27074: CALL_OW 72
27078: ST_TO_ADDR
// if not factories then
27079: LD_VAR 0 6
27083: NOT
27084: IFFALSE 27088
// exit ;
27086: GO 28054
// for i in factories do
27088: LD_ADDR_VAR 0 8
27092: PUSH
27093: LD_VAR 0 6
27097: PUSH
27098: FOR_IN
27099: IFFALSE 27124
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27101: LD_ADDR_VAR 0 17
27105: PUSH
27106: LD_VAR 0 17
27110: PUSH
27111: LD_VAR 0 8
27115: PPUSH
27116: CALL_OW 478
27120: UNION
27121: ST_TO_ADDR
27122: GO 27098
27124: POP
27125: POP
// if not fac_list then
27126: LD_VAR 0 17
27130: NOT
27131: IFFALSE 27135
// exit ;
27133: GO 28054
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27135: LD_ADDR_VAR 0 5
27139: PUSH
27140: LD_INT 4
27142: PUSH
27143: LD_INT 5
27145: PUSH
27146: LD_INT 9
27148: PUSH
27149: LD_INT 10
27151: PUSH
27152: LD_INT 6
27154: PUSH
27155: LD_INT 7
27157: PUSH
27158: LD_INT 11
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 27
27172: PUSH
27173: LD_INT 28
27175: PUSH
27176: LD_INT 26
27178: PUSH
27179: LD_INT 30
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 43
27190: PUSH
27191: LD_INT 44
27193: PUSH
27194: LD_INT 46
27196: PUSH
27197: LD_INT 45
27199: PUSH
27200: LD_INT 47
27202: PUSH
27203: LD_INT 49
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: LIST
27218: PUSH
27219: LD_VAR 0 12
27223: ARRAY
27224: ST_TO_ADDR
// list := list isect fac_list ;
27225: LD_ADDR_VAR 0 5
27229: PUSH
27230: LD_VAR 0 5
27234: PUSH
27235: LD_VAR 0 17
27239: ISECT
27240: ST_TO_ADDR
// if not list then
27241: LD_VAR 0 5
27245: NOT
27246: IFFALSE 27250
// exit ;
27248: GO 28054
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27250: LD_VAR 0 12
27254: PUSH
27255: LD_INT 3
27257: EQUAL
27258: PUSH
27259: LD_INT 49
27261: PUSH
27262: LD_VAR 0 5
27266: IN
27267: AND
27268: PUSH
27269: LD_INT 31
27271: PPUSH
27272: LD_VAR 0 16
27276: PPUSH
27277: CALL_OW 321
27281: PUSH
27282: LD_INT 2
27284: EQUAL
27285: AND
27286: IFFALSE 27346
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27288: LD_INT 22
27290: PUSH
27291: LD_VAR 0 16
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 35
27302: PUSH
27303: LD_INT 49
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 91
27312: PUSH
27313: LD_VAR 0 1
27317: PUSH
27318: LD_INT 10
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: LIST
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: LIST
27330: PPUSH
27331: CALL_OW 69
27335: NOT
27336: IFFALSE 27346
// weapon := ru_time_lapser ;
27338: LD_ADDR_VAR 0 18
27342: PUSH
27343: LD_INT 49
27345: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27346: LD_VAR 0 12
27350: PUSH
27351: LD_INT 1
27353: PUSH
27354: LD_INT 2
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: IN
27361: PUSH
27362: LD_INT 11
27364: PUSH
27365: LD_VAR 0 5
27369: IN
27370: PUSH
27371: LD_INT 30
27373: PUSH
27374: LD_VAR 0 5
27378: IN
27379: OR
27380: AND
27381: PUSH
27382: LD_INT 6
27384: PPUSH
27385: LD_VAR 0 16
27389: PPUSH
27390: CALL_OW 321
27394: PUSH
27395: LD_INT 2
27397: EQUAL
27398: AND
27399: IFFALSE 27564
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27401: LD_INT 22
27403: PUSH
27404: LD_VAR 0 16
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 2
27415: PUSH
27416: LD_INT 35
27418: PUSH
27419: LD_INT 11
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 35
27428: PUSH
27429: LD_INT 30
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 91
27443: PUSH
27444: LD_VAR 0 1
27448: PUSH
27449: LD_INT 18
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: LIST
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: LIST
27461: PPUSH
27462: CALL_OW 69
27466: NOT
27467: PUSH
27468: LD_INT 22
27470: PUSH
27471: LD_VAR 0 16
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 2
27482: PUSH
27483: LD_INT 30
27485: PUSH
27486: LD_INT 32
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 30
27495: PUSH
27496: LD_INT 33
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 91
27510: PUSH
27511: LD_VAR 0 1
27515: PUSH
27516: LD_INT 12
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: LIST
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: LIST
27528: PUSH
27529: EMPTY
27530: LIST
27531: PPUSH
27532: CALL_OW 69
27536: PUSH
27537: LD_INT 2
27539: GREATER
27540: AND
27541: IFFALSE 27564
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27543: LD_ADDR_VAR 0 18
27547: PUSH
27548: LD_INT 11
27550: PUSH
27551: LD_INT 30
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_VAR 0 12
27562: ARRAY
27563: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27564: LD_VAR 0 18
27568: NOT
27569: PUSH
27570: LD_INT 40
27572: PPUSH
27573: LD_VAR 0 16
27577: PPUSH
27578: CALL_OW 321
27582: PUSH
27583: LD_INT 2
27585: EQUAL
27586: AND
27587: PUSH
27588: LD_INT 7
27590: PUSH
27591: LD_VAR 0 5
27595: IN
27596: PUSH
27597: LD_INT 28
27599: PUSH
27600: LD_VAR 0 5
27604: IN
27605: OR
27606: PUSH
27607: LD_INT 45
27609: PUSH
27610: LD_VAR 0 5
27614: IN
27615: OR
27616: AND
27617: IFFALSE 27871
// begin hex := GetHexInfo ( x , y ) ;
27619: LD_ADDR_VAR 0 4
27623: PUSH
27624: LD_VAR 0 10
27628: PPUSH
27629: LD_VAR 0 11
27633: PPUSH
27634: CALL_OW 546
27638: ST_TO_ADDR
// if hex [ 1 ] then
27639: LD_VAR 0 4
27643: PUSH
27644: LD_INT 1
27646: ARRAY
27647: IFFALSE 27651
// exit ;
27649: GO 28054
// height := hex [ 2 ] ;
27651: LD_ADDR_VAR 0 15
27655: PUSH
27656: LD_VAR 0 4
27660: PUSH
27661: LD_INT 2
27663: ARRAY
27664: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27665: LD_ADDR_VAR 0 14
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: LD_INT 2
27675: PUSH
27676: LD_INT 3
27678: PUSH
27679: LD_INT 5
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: ST_TO_ADDR
// for i in tmp do
27688: LD_ADDR_VAR 0 8
27692: PUSH
27693: LD_VAR 0 14
27697: PUSH
27698: FOR_IN
27699: IFFALSE 27869
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27701: LD_ADDR_VAR 0 9
27705: PUSH
27706: LD_VAR 0 10
27710: PPUSH
27711: LD_VAR 0 8
27715: PPUSH
27716: LD_INT 5
27718: PPUSH
27719: CALL_OW 272
27723: PUSH
27724: LD_VAR 0 11
27728: PPUSH
27729: LD_VAR 0 8
27733: PPUSH
27734: LD_INT 5
27736: PPUSH
27737: CALL_OW 273
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27746: LD_VAR 0 9
27750: PUSH
27751: LD_INT 1
27753: ARRAY
27754: PPUSH
27755: LD_VAR 0 9
27759: PUSH
27760: LD_INT 2
27762: ARRAY
27763: PPUSH
27764: CALL_OW 488
27768: IFFALSE 27867
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27770: LD_ADDR_VAR 0 4
27774: PUSH
27775: LD_VAR 0 9
27779: PUSH
27780: LD_INT 1
27782: ARRAY
27783: PPUSH
27784: LD_VAR 0 9
27788: PUSH
27789: LD_INT 2
27791: ARRAY
27792: PPUSH
27793: CALL_OW 546
27797: ST_TO_ADDR
// if hex [ 1 ] then
27798: LD_VAR 0 4
27802: PUSH
27803: LD_INT 1
27805: ARRAY
27806: IFFALSE 27810
// continue ;
27808: GO 27698
// h := hex [ 2 ] ;
27810: LD_ADDR_VAR 0 13
27814: PUSH
27815: LD_VAR 0 4
27819: PUSH
27820: LD_INT 2
27822: ARRAY
27823: ST_TO_ADDR
// if h + 7 < height then
27824: LD_VAR 0 13
27828: PUSH
27829: LD_INT 7
27831: PLUS
27832: PUSH
27833: LD_VAR 0 15
27837: LESS
27838: IFFALSE 27867
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27840: LD_ADDR_VAR 0 18
27844: PUSH
27845: LD_INT 7
27847: PUSH
27848: LD_INT 28
27850: PUSH
27851: LD_INT 45
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: LIST
27858: PUSH
27859: LD_VAR 0 12
27863: ARRAY
27864: ST_TO_ADDR
// break ;
27865: GO 27869
// end ; end ; end ;
27867: GO 27698
27869: POP
27870: POP
// end ; if not weapon then
27871: LD_VAR 0 18
27875: NOT
27876: IFFALSE 27936
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27878: LD_ADDR_VAR 0 5
27882: PUSH
27883: LD_VAR 0 5
27887: PUSH
27888: LD_INT 11
27890: PUSH
27891: LD_INT 30
27893: PUSH
27894: LD_INT 49
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: LIST
27901: DIFF
27902: ST_TO_ADDR
// if not list then
27903: LD_VAR 0 5
27907: NOT
27908: IFFALSE 27912
// exit ;
27910: GO 28054
// weapon := list [ rand ( 1 , list ) ] ;
27912: LD_ADDR_VAR 0 18
27916: PUSH
27917: LD_VAR 0 5
27921: PUSH
27922: LD_INT 1
27924: PPUSH
27925: LD_VAR 0 5
27929: PPUSH
27930: CALL_OW 12
27934: ARRAY
27935: ST_TO_ADDR
// end ; if weapon then
27936: LD_VAR 0 18
27940: IFFALSE 28054
// begin tmp := CostOfWeapon ( weapon ) ;
27942: LD_ADDR_VAR 0 14
27946: PUSH
27947: LD_VAR 0 18
27951: PPUSH
27952: CALL_OW 451
27956: ST_TO_ADDR
// j := GetBase ( tower ) ;
27957: LD_ADDR_VAR 0 9
27961: PUSH
27962: LD_VAR 0 1
27966: PPUSH
27967: CALL_OW 274
27971: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27972: LD_VAR 0 9
27976: PPUSH
27977: LD_INT 1
27979: PPUSH
27980: CALL_OW 275
27984: PUSH
27985: LD_VAR 0 14
27989: PUSH
27990: LD_INT 1
27992: ARRAY
27993: GREATEREQUAL
27994: PUSH
27995: LD_VAR 0 9
27999: PPUSH
28000: LD_INT 2
28002: PPUSH
28003: CALL_OW 275
28007: PUSH
28008: LD_VAR 0 14
28012: PUSH
28013: LD_INT 2
28015: ARRAY
28016: GREATEREQUAL
28017: AND
28018: PUSH
28019: LD_VAR 0 9
28023: PPUSH
28024: LD_INT 3
28026: PPUSH
28027: CALL_OW 275
28031: PUSH
28032: LD_VAR 0 14
28036: PUSH
28037: LD_INT 3
28039: ARRAY
28040: GREATEREQUAL
28041: AND
28042: IFFALSE 28054
// result := weapon ;
28044: LD_ADDR_VAR 0 3
28048: PUSH
28049: LD_VAR 0 18
28053: ST_TO_ADDR
// end ; end ;
28054: LD_VAR 0 3
28058: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28059: LD_INT 0
28061: PPUSH
28062: PPUSH
// result := true ;
28063: LD_ADDR_VAR 0 3
28067: PUSH
28068: LD_INT 1
28070: ST_TO_ADDR
// if array1 = array2 then
28071: LD_VAR 0 1
28075: PUSH
28076: LD_VAR 0 2
28080: EQUAL
28081: IFFALSE 28141
// begin for i = 1 to array1 do
28083: LD_ADDR_VAR 0 4
28087: PUSH
28088: DOUBLE
28089: LD_INT 1
28091: DEC
28092: ST_TO_ADDR
28093: LD_VAR 0 1
28097: PUSH
28098: FOR_TO
28099: IFFALSE 28137
// if array1 [ i ] <> array2 [ i ] then
28101: LD_VAR 0 1
28105: PUSH
28106: LD_VAR 0 4
28110: ARRAY
28111: PUSH
28112: LD_VAR 0 2
28116: PUSH
28117: LD_VAR 0 4
28121: ARRAY
28122: NONEQUAL
28123: IFFALSE 28135
// begin result := false ;
28125: LD_ADDR_VAR 0 3
28129: PUSH
28130: LD_INT 0
28132: ST_TO_ADDR
// break ;
28133: GO 28137
// end ;
28135: GO 28098
28137: POP
28138: POP
// end else
28139: GO 28149
// result := false ;
28141: LD_ADDR_VAR 0 3
28145: PUSH
28146: LD_INT 0
28148: ST_TO_ADDR
// end ;
28149: LD_VAR 0 3
28153: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28154: LD_INT 0
28156: PPUSH
28157: PPUSH
// if not array1 or not array2 then
28158: LD_VAR 0 1
28162: NOT
28163: PUSH
28164: LD_VAR 0 2
28168: NOT
28169: OR
28170: IFFALSE 28174
// exit ;
28172: GO 28238
// result := true ;
28174: LD_ADDR_VAR 0 3
28178: PUSH
28179: LD_INT 1
28181: ST_TO_ADDR
// for i = 1 to array1 do
28182: LD_ADDR_VAR 0 4
28186: PUSH
28187: DOUBLE
28188: LD_INT 1
28190: DEC
28191: ST_TO_ADDR
28192: LD_VAR 0 1
28196: PUSH
28197: FOR_TO
28198: IFFALSE 28236
// if array1 [ i ] <> array2 [ i ] then
28200: LD_VAR 0 1
28204: PUSH
28205: LD_VAR 0 4
28209: ARRAY
28210: PUSH
28211: LD_VAR 0 2
28215: PUSH
28216: LD_VAR 0 4
28220: ARRAY
28221: NONEQUAL
28222: IFFALSE 28234
// begin result := false ;
28224: LD_ADDR_VAR 0 3
28228: PUSH
28229: LD_INT 0
28231: ST_TO_ADDR
// break ;
28232: GO 28236
// end ;
28234: GO 28197
28236: POP
28237: POP
// end ;
28238: LD_VAR 0 3
28242: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28243: LD_INT 0
28245: PPUSH
28246: PPUSH
28247: PPUSH
// pom := GetBase ( fac ) ;
28248: LD_ADDR_VAR 0 5
28252: PUSH
28253: LD_VAR 0 1
28257: PPUSH
28258: CALL_OW 274
28262: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28263: LD_ADDR_VAR 0 4
28267: PUSH
28268: LD_VAR 0 2
28272: PUSH
28273: LD_INT 1
28275: ARRAY
28276: PPUSH
28277: LD_VAR 0 2
28281: PUSH
28282: LD_INT 2
28284: ARRAY
28285: PPUSH
28286: LD_VAR 0 2
28290: PUSH
28291: LD_INT 3
28293: ARRAY
28294: PPUSH
28295: LD_VAR 0 2
28299: PUSH
28300: LD_INT 4
28302: ARRAY
28303: PPUSH
28304: CALL_OW 449
28308: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28309: LD_ADDR_VAR 0 3
28313: PUSH
28314: LD_VAR 0 5
28318: PPUSH
28319: LD_INT 1
28321: PPUSH
28322: CALL_OW 275
28326: PUSH
28327: LD_VAR 0 4
28331: PUSH
28332: LD_INT 1
28334: ARRAY
28335: GREATEREQUAL
28336: PUSH
28337: LD_VAR 0 5
28341: PPUSH
28342: LD_INT 2
28344: PPUSH
28345: CALL_OW 275
28349: PUSH
28350: LD_VAR 0 4
28354: PUSH
28355: LD_INT 2
28357: ARRAY
28358: GREATEREQUAL
28359: AND
28360: PUSH
28361: LD_VAR 0 5
28365: PPUSH
28366: LD_INT 3
28368: PPUSH
28369: CALL_OW 275
28373: PUSH
28374: LD_VAR 0 4
28378: PUSH
28379: LD_INT 3
28381: ARRAY
28382: GREATEREQUAL
28383: AND
28384: ST_TO_ADDR
// end ;
28385: LD_VAR 0 3
28389: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28390: LD_INT 0
28392: PPUSH
28393: PPUSH
28394: PPUSH
28395: PPUSH
// pom := GetBase ( building ) ;
28396: LD_ADDR_VAR 0 3
28400: PUSH
28401: LD_VAR 0 1
28405: PPUSH
28406: CALL_OW 274
28410: ST_TO_ADDR
// if not pom then
28411: LD_VAR 0 3
28415: NOT
28416: IFFALSE 28420
// exit ;
28418: GO 28590
// btype := GetBType ( building ) ;
28420: LD_ADDR_VAR 0 5
28424: PUSH
28425: LD_VAR 0 1
28429: PPUSH
28430: CALL_OW 266
28434: ST_TO_ADDR
// if btype = b_armoury then
28435: LD_VAR 0 5
28439: PUSH
28440: LD_INT 4
28442: EQUAL
28443: IFFALSE 28453
// btype := b_barracks ;
28445: LD_ADDR_VAR 0 5
28449: PUSH
28450: LD_INT 5
28452: ST_TO_ADDR
// if btype = b_depot then
28453: LD_VAR 0 5
28457: PUSH
28458: LD_INT 0
28460: EQUAL
28461: IFFALSE 28471
// btype := b_warehouse ;
28463: LD_ADDR_VAR 0 5
28467: PUSH
28468: LD_INT 1
28470: ST_TO_ADDR
// if btype = b_workshop then
28471: LD_VAR 0 5
28475: PUSH
28476: LD_INT 2
28478: EQUAL
28479: IFFALSE 28489
// btype := b_factory ;
28481: LD_ADDR_VAR 0 5
28485: PUSH
28486: LD_INT 3
28488: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28489: LD_ADDR_VAR 0 4
28493: PUSH
28494: LD_VAR 0 5
28498: PPUSH
28499: LD_VAR 0 1
28503: PPUSH
28504: CALL_OW 248
28508: PPUSH
28509: CALL_OW 450
28513: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28514: LD_ADDR_VAR 0 2
28518: PUSH
28519: LD_VAR 0 3
28523: PPUSH
28524: LD_INT 1
28526: PPUSH
28527: CALL_OW 275
28531: PUSH
28532: LD_VAR 0 4
28536: PUSH
28537: LD_INT 1
28539: ARRAY
28540: GREATEREQUAL
28541: PUSH
28542: LD_VAR 0 3
28546: PPUSH
28547: LD_INT 2
28549: PPUSH
28550: CALL_OW 275
28554: PUSH
28555: LD_VAR 0 4
28559: PUSH
28560: LD_INT 2
28562: ARRAY
28563: GREATEREQUAL
28564: AND
28565: PUSH
28566: LD_VAR 0 3
28570: PPUSH
28571: LD_INT 3
28573: PPUSH
28574: CALL_OW 275
28578: PUSH
28579: LD_VAR 0 4
28583: PUSH
28584: LD_INT 3
28586: ARRAY
28587: GREATEREQUAL
28588: AND
28589: ST_TO_ADDR
// end ;
28590: LD_VAR 0 2
28594: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28595: LD_INT 0
28597: PPUSH
28598: PPUSH
28599: PPUSH
// pom := GetBase ( building ) ;
28600: LD_ADDR_VAR 0 4
28604: PUSH
28605: LD_VAR 0 1
28609: PPUSH
28610: CALL_OW 274
28614: ST_TO_ADDR
// if not pom then
28615: LD_VAR 0 4
28619: NOT
28620: IFFALSE 28624
// exit ;
28622: GO 28725
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28624: LD_ADDR_VAR 0 5
28628: PUSH
28629: LD_VAR 0 2
28633: PPUSH
28634: LD_VAR 0 1
28638: PPUSH
28639: CALL_OW 248
28643: PPUSH
28644: CALL_OW 450
28648: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28649: LD_ADDR_VAR 0 3
28653: PUSH
28654: LD_VAR 0 4
28658: PPUSH
28659: LD_INT 1
28661: PPUSH
28662: CALL_OW 275
28666: PUSH
28667: LD_VAR 0 5
28671: PUSH
28672: LD_INT 1
28674: ARRAY
28675: GREATEREQUAL
28676: PUSH
28677: LD_VAR 0 4
28681: PPUSH
28682: LD_INT 2
28684: PPUSH
28685: CALL_OW 275
28689: PUSH
28690: LD_VAR 0 5
28694: PUSH
28695: LD_INT 2
28697: ARRAY
28698: GREATEREQUAL
28699: AND
28700: PUSH
28701: LD_VAR 0 4
28705: PPUSH
28706: LD_INT 3
28708: PPUSH
28709: CALL_OW 275
28713: PUSH
28714: LD_VAR 0 5
28718: PUSH
28719: LD_INT 3
28721: ARRAY
28722: GREATEREQUAL
28723: AND
28724: ST_TO_ADDR
// end ;
28725: LD_VAR 0 3
28729: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28730: LD_INT 0
28732: PPUSH
28733: PPUSH
28734: PPUSH
28735: PPUSH
28736: PPUSH
28737: PPUSH
28738: PPUSH
28739: PPUSH
28740: PPUSH
28741: PPUSH
28742: PPUSH
// result := false ;
28743: LD_ADDR_VAR 0 8
28747: PUSH
28748: LD_INT 0
28750: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28751: LD_VAR 0 5
28755: NOT
28756: PUSH
28757: LD_VAR 0 1
28761: NOT
28762: OR
28763: PUSH
28764: LD_VAR 0 2
28768: NOT
28769: OR
28770: PUSH
28771: LD_VAR 0 3
28775: NOT
28776: OR
28777: IFFALSE 28781
// exit ;
28779: GO 29595
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28781: LD_ADDR_VAR 0 14
28785: PUSH
28786: LD_VAR 0 1
28790: PPUSH
28791: LD_VAR 0 2
28795: PPUSH
28796: LD_VAR 0 3
28800: PPUSH
28801: LD_VAR 0 4
28805: PPUSH
28806: LD_VAR 0 5
28810: PUSH
28811: LD_INT 1
28813: ARRAY
28814: PPUSH
28815: CALL_OW 248
28819: PPUSH
28820: LD_INT 0
28822: PPUSH
28823: CALL 30848 0 6
28827: ST_TO_ADDR
// if not hexes then
28828: LD_VAR 0 14
28832: NOT
28833: IFFALSE 28837
// exit ;
28835: GO 29595
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28837: LD_ADDR_VAR 0 17
28841: PUSH
28842: LD_VAR 0 5
28846: PPUSH
28847: LD_INT 22
28849: PUSH
28850: LD_VAR 0 13
28854: PPUSH
28855: CALL_OW 255
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 2
28866: PUSH
28867: LD_INT 30
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 30
28879: PUSH
28880: LD_INT 1
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: LIST
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PPUSH
28896: CALL_OW 72
28900: ST_TO_ADDR
// for i = 1 to hexes do
28901: LD_ADDR_VAR 0 9
28905: PUSH
28906: DOUBLE
28907: LD_INT 1
28909: DEC
28910: ST_TO_ADDR
28911: LD_VAR 0 14
28915: PUSH
28916: FOR_TO
28917: IFFALSE 29593
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28919: LD_ADDR_VAR 0 13
28923: PUSH
28924: LD_VAR 0 14
28928: PUSH
28929: LD_VAR 0 9
28933: ARRAY
28934: PUSH
28935: LD_INT 1
28937: ARRAY
28938: PPUSH
28939: LD_VAR 0 14
28943: PUSH
28944: LD_VAR 0 9
28948: ARRAY
28949: PUSH
28950: LD_INT 2
28952: ARRAY
28953: PPUSH
28954: CALL_OW 428
28958: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28959: LD_VAR 0 14
28963: PUSH
28964: LD_VAR 0 9
28968: ARRAY
28969: PUSH
28970: LD_INT 1
28972: ARRAY
28973: PPUSH
28974: LD_VAR 0 14
28978: PUSH
28979: LD_VAR 0 9
28983: ARRAY
28984: PUSH
28985: LD_INT 2
28987: ARRAY
28988: PPUSH
28989: CALL_OW 351
28993: PUSH
28994: LD_VAR 0 14
28998: PUSH
28999: LD_VAR 0 9
29003: ARRAY
29004: PUSH
29005: LD_INT 1
29007: ARRAY
29008: PPUSH
29009: LD_VAR 0 14
29013: PUSH
29014: LD_VAR 0 9
29018: ARRAY
29019: PUSH
29020: LD_INT 2
29022: ARRAY
29023: PPUSH
29024: CALL_OW 488
29028: NOT
29029: OR
29030: PUSH
29031: LD_VAR 0 13
29035: PPUSH
29036: CALL_OW 247
29040: PUSH
29041: LD_INT 3
29043: EQUAL
29044: OR
29045: IFFALSE 29051
// exit ;
29047: POP
29048: POP
29049: GO 29595
// if not tmp then
29051: LD_VAR 0 13
29055: NOT
29056: IFFALSE 29060
// continue ;
29058: GO 28916
// result := true ;
29060: LD_ADDR_VAR 0 8
29064: PUSH
29065: LD_INT 1
29067: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29068: LD_VAR 0 6
29072: PUSH
29073: LD_VAR 0 13
29077: PPUSH
29078: CALL_OW 247
29082: PUSH
29083: LD_INT 2
29085: EQUAL
29086: AND
29087: PUSH
29088: LD_VAR 0 13
29092: PPUSH
29093: CALL_OW 263
29097: PUSH
29098: LD_INT 1
29100: EQUAL
29101: AND
29102: IFFALSE 29266
// begin if IsDrivenBy ( tmp ) then
29104: LD_VAR 0 13
29108: PPUSH
29109: CALL_OW 311
29113: IFFALSE 29117
// continue ;
29115: GO 28916
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29117: LD_VAR 0 6
29121: PPUSH
29122: LD_INT 3
29124: PUSH
29125: LD_INT 60
29127: PUSH
29128: EMPTY
29129: LIST
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 3
29137: PUSH
29138: LD_INT 55
29140: PUSH
29141: EMPTY
29142: LIST
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PPUSH
29152: CALL_OW 72
29156: IFFALSE 29264
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29158: LD_ADDR_VAR 0 18
29162: PUSH
29163: LD_VAR 0 6
29167: PPUSH
29168: LD_INT 3
29170: PUSH
29171: LD_INT 60
29173: PUSH
29174: EMPTY
29175: LIST
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 3
29183: PUSH
29184: LD_INT 55
29186: PUSH
29187: EMPTY
29188: LIST
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PPUSH
29198: CALL_OW 72
29202: PUSH
29203: LD_INT 1
29205: ARRAY
29206: ST_TO_ADDR
// if IsInUnit ( driver ) then
29207: LD_VAR 0 18
29211: PPUSH
29212: CALL_OW 310
29216: IFFALSE 29227
// ComExit ( driver ) ;
29218: LD_VAR 0 18
29222: PPUSH
29223: CALL 54629 0 1
// AddComEnterUnit ( driver , tmp ) ;
29227: LD_VAR 0 18
29231: PPUSH
29232: LD_VAR 0 13
29236: PPUSH
29237: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29241: LD_VAR 0 18
29245: PPUSH
29246: LD_VAR 0 7
29250: PPUSH
29251: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29255: LD_VAR 0 18
29259: PPUSH
29260: CALL_OW 181
// end ; continue ;
29264: GO 28916
// end ; if not cleaners or not tmp in cleaners then
29266: LD_VAR 0 6
29270: NOT
29271: PUSH
29272: LD_VAR 0 13
29276: PUSH
29277: LD_VAR 0 6
29281: IN
29282: NOT
29283: OR
29284: IFFALSE 29591
// begin if dep then
29286: LD_VAR 0 17
29290: IFFALSE 29426
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29292: LD_ADDR_VAR 0 16
29296: PUSH
29297: LD_VAR 0 17
29301: PUSH
29302: LD_INT 1
29304: ARRAY
29305: PPUSH
29306: CALL_OW 250
29310: PPUSH
29311: LD_VAR 0 17
29315: PUSH
29316: LD_INT 1
29318: ARRAY
29319: PPUSH
29320: CALL_OW 254
29324: PPUSH
29325: LD_INT 5
29327: PPUSH
29328: CALL_OW 272
29332: PUSH
29333: LD_VAR 0 17
29337: PUSH
29338: LD_INT 1
29340: ARRAY
29341: PPUSH
29342: CALL_OW 251
29346: PPUSH
29347: LD_VAR 0 17
29351: PUSH
29352: LD_INT 1
29354: ARRAY
29355: PPUSH
29356: CALL_OW 254
29360: PPUSH
29361: LD_INT 5
29363: PPUSH
29364: CALL_OW 273
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29373: LD_VAR 0 16
29377: PUSH
29378: LD_INT 1
29380: ARRAY
29381: PPUSH
29382: LD_VAR 0 16
29386: PUSH
29387: LD_INT 2
29389: ARRAY
29390: PPUSH
29391: CALL_OW 488
29395: IFFALSE 29426
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29397: LD_VAR 0 13
29401: PPUSH
29402: LD_VAR 0 16
29406: PUSH
29407: LD_INT 1
29409: ARRAY
29410: PPUSH
29411: LD_VAR 0 16
29415: PUSH
29416: LD_INT 2
29418: ARRAY
29419: PPUSH
29420: CALL_OW 111
// continue ;
29424: GO 28916
// end ; end ; r := GetDir ( tmp ) ;
29426: LD_ADDR_VAR 0 15
29430: PUSH
29431: LD_VAR 0 13
29435: PPUSH
29436: CALL_OW 254
29440: ST_TO_ADDR
// if r = 5 then
29441: LD_VAR 0 15
29445: PUSH
29446: LD_INT 5
29448: EQUAL
29449: IFFALSE 29459
// r := 0 ;
29451: LD_ADDR_VAR 0 15
29455: PUSH
29456: LD_INT 0
29458: ST_TO_ADDR
// for j = r to 5 do
29459: LD_ADDR_VAR 0 10
29463: PUSH
29464: DOUBLE
29465: LD_VAR 0 15
29469: DEC
29470: ST_TO_ADDR
29471: LD_INT 5
29473: PUSH
29474: FOR_TO
29475: IFFALSE 29589
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29477: LD_ADDR_VAR 0 11
29481: PUSH
29482: LD_VAR 0 13
29486: PPUSH
29487: CALL_OW 250
29491: PPUSH
29492: LD_VAR 0 10
29496: PPUSH
29497: LD_INT 2
29499: PPUSH
29500: CALL_OW 272
29504: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29505: LD_ADDR_VAR 0 12
29509: PUSH
29510: LD_VAR 0 13
29514: PPUSH
29515: CALL_OW 251
29519: PPUSH
29520: LD_VAR 0 10
29524: PPUSH
29525: LD_INT 2
29527: PPUSH
29528: CALL_OW 273
29532: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29533: LD_VAR 0 11
29537: PPUSH
29538: LD_VAR 0 12
29542: PPUSH
29543: CALL_OW 488
29547: PUSH
29548: LD_VAR 0 11
29552: PPUSH
29553: LD_VAR 0 12
29557: PPUSH
29558: CALL_OW 428
29562: NOT
29563: AND
29564: IFFALSE 29587
// begin ComMoveXY ( tmp , _x , _y ) ;
29566: LD_VAR 0 13
29570: PPUSH
29571: LD_VAR 0 11
29575: PPUSH
29576: LD_VAR 0 12
29580: PPUSH
29581: CALL_OW 111
// break ;
29585: GO 29589
// end ; end ;
29587: GO 29474
29589: POP
29590: POP
// end ; end ;
29591: GO 28916
29593: POP
29594: POP
// end ;
29595: LD_VAR 0 8
29599: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29600: LD_INT 0
29602: PPUSH
// result := true ;
29603: LD_ADDR_VAR 0 3
29607: PUSH
29608: LD_INT 1
29610: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29611: LD_VAR 0 2
29615: PUSH
29616: LD_INT 24
29618: DOUBLE
29619: EQUAL
29620: IFTRUE 29630
29622: LD_INT 33
29624: DOUBLE
29625: EQUAL
29626: IFTRUE 29630
29628: GO 29655
29630: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29631: LD_ADDR_VAR 0 3
29635: PUSH
29636: LD_INT 32
29638: PPUSH
29639: LD_VAR 0 1
29643: PPUSH
29644: CALL_OW 321
29648: PUSH
29649: LD_INT 2
29651: EQUAL
29652: ST_TO_ADDR
29653: GO 29971
29655: LD_INT 20
29657: DOUBLE
29658: EQUAL
29659: IFTRUE 29663
29661: GO 29688
29663: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29664: LD_ADDR_VAR 0 3
29668: PUSH
29669: LD_INT 6
29671: PPUSH
29672: LD_VAR 0 1
29676: PPUSH
29677: CALL_OW 321
29681: PUSH
29682: LD_INT 2
29684: EQUAL
29685: ST_TO_ADDR
29686: GO 29971
29688: LD_INT 22
29690: DOUBLE
29691: EQUAL
29692: IFTRUE 29702
29694: LD_INT 36
29696: DOUBLE
29697: EQUAL
29698: IFTRUE 29702
29700: GO 29727
29702: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29703: LD_ADDR_VAR 0 3
29707: PUSH
29708: LD_INT 15
29710: PPUSH
29711: LD_VAR 0 1
29715: PPUSH
29716: CALL_OW 321
29720: PUSH
29721: LD_INT 2
29723: EQUAL
29724: ST_TO_ADDR
29725: GO 29971
29727: LD_INT 30
29729: DOUBLE
29730: EQUAL
29731: IFTRUE 29735
29733: GO 29760
29735: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29736: LD_ADDR_VAR 0 3
29740: PUSH
29741: LD_INT 20
29743: PPUSH
29744: LD_VAR 0 1
29748: PPUSH
29749: CALL_OW 321
29753: PUSH
29754: LD_INT 2
29756: EQUAL
29757: ST_TO_ADDR
29758: GO 29971
29760: LD_INT 28
29762: DOUBLE
29763: EQUAL
29764: IFTRUE 29774
29766: LD_INT 21
29768: DOUBLE
29769: EQUAL
29770: IFTRUE 29774
29772: GO 29799
29774: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29775: LD_ADDR_VAR 0 3
29779: PUSH
29780: LD_INT 21
29782: PPUSH
29783: LD_VAR 0 1
29787: PPUSH
29788: CALL_OW 321
29792: PUSH
29793: LD_INT 2
29795: EQUAL
29796: ST_TO_ADDR
29797: GO 29971
29799: LD_INT 16
29801: DOUBLE
29802: EQUAL
29803: IFTRUE 29807
29805: GO 29832
29807: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29808: LD_ADDR_VAR 0 3
29812: PUSH
29813: LD_INT 84
29815: PPUSH
29816: LD_VAR 0 1
29820: PPUSH
29821: CALL_OW 321
29825: PUSH
29826: LD_INT 2
29828: EQUAL
29829: ST_TO_ADDR
29830: GO 29971
29832: LD_INT 19
29834: DOUBLE
29835: EQUAL
29836: IFTRUE 29846
29838: LD_INT 23
29840: DOUBLE
29841: EQUAL
29842: IFTRUE 29846
29844: GO 29871
29846: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29847: LD_ADDR_VAR 0 3
29851: PUSH
29852: LD_INT 83
29854: PPUSH
29855: LD_VAR 0 1
29859: PPUSH
29860: CALL_OW 321
29864: PUSH
29865: LD_INT 2
29867: EQUAL
29868: ST_TO_ADDR
29869: GO 29971
29871: LD_INT 17
29873: DOUBLE
29874: EQUAL
29875: IFTRUE 29879
29877: GO 29904
29879: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29880: LD_ADDR_VAR 0 3
29884: PUSH
29885: LD_INT 39
29887: PPUSH
29888: LD_VAR 0 1
29892: PPUSH
29893: CALL_OW 321
29897: PUSH
29898: LD_INT 2
29900: EQUAL
29901: ST_TO_ADDR
29902: GO 29971
29904: LD_INT 18
29906: DOUBLE
29907: EQUAL
29908: IFTRUE 29912
29910: GO 29937
29912: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29913: LD_ADDR_VAR 0 3
29917: PUSH
29918: LD_INT 40
29920: PPUSH
29921: LD_VAR 0 1
29925: PPUSH
29926: CALL_OW 321
29930: PUSH
29931: LD_INT 2
29933: EQUAL
29934: ST_TO_ADDR
29935: GO 29971
29937: LD_INT 27
29939: DOUBLE
29940: EQUAL
29941: IFTRUE 29945
29943: GO 29970
29945: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29946: LD_ADDR_VAR 0 3
29950: PUSH
29951: LD_INT 35
29953: PPUSH
29954: LD_VAR 0 1
29958: PPUSH
29959: CALL_OW 321
29963: PUSH
29964: LD_INT 2
29966: EQUAL
29967: ST_TO_ADDR
29968: GO 29971
29970: POP
// end ;
29971: LD_VAR 0 3
29975: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29976: LD_INT 0
29978: PPUSH
29979: PPUSH
29980: PPUSH
29981: PPUSH
29982: PPUSH
29983: PPUSH
29984: PPUSH
29985: PPUSH
29986: PPUSH
29987: PPUSH
29988: PPUSH
// result := false ;
29989: LD_ADDR_VAR 0 6
29993: PUSH
29994: LD_INT 0
29996: ST_TO_ADDR
// if btype = b_depot then
29997: LD_VAR 0 2
30001: PUSH
30002: LD_INT 0
30004: EQUAL
30005: IFFALSE 30017
// begin result := true ;
30007: LD_ADDR_VAR 0 6
30011: PUSH
30012: LD_INT 1
30014: ST_TO_ADDR
// exit ;
30015: GO 30843
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30017: LD_VAR 0 1
30021: NOT
30022: PUSH
30023: LD_VAR 0 1
30027: PPUSH
30028: CALL_OW 266
30032: PUSH
30033: LD_INT 0
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: IN
30043: NOT
30044: OR
30045: PUSH
30046: LD_VAR 0 2
30050: NOT
30051: OR
30052: PUSH
30053: LD_VAR 0 5
30057: PUSH
30058: LD_INT 0
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: LD_INT 2
30066: PUSH
30067: LD_INT 3
30069: PUSH
30070: LD_INT 4
30072: PUSH
30073: LD_INT 5
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: IN
30084: NOT
30085: OR
30086: PUSH
30087: LD_VAR 0 3
30091: PPUSH
30092: LD_VAR 0 4
30096: PPUSH
30097: CALL_OW 488
30101: NOT
30102: OR
30103: IFFALSE 30107
// exit ;
30105: GO 30843
// side := GetSide ( depot ) ;
30107: LD_ADDR_VAR 0 9
30111: PUSH
30112: LD_VAR 0 1
30116: PPUSH
30117: CALL_OW 255
30121: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30122: LD_VAR 0 9
30126: PPUSH
30127: LD_VAR 0 2
30131: PPUSH
30132: CALL 29600 0 2
30136: NOT
30137: IFFALSE 30141
// exit ;
30139: GO 30843
// pom := GetBase ( depot ) ;
30141: LD_ADDR_VAR 0 10
30145: PUSH
30146: LD_VAR 0 1
30150: PPUSH
30151: CALL_OW 274
30155: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30156: LD_ADDR_VAR 0 11
30160: PUSH
30161: LD_VAR 0 2
30165: PPUSH
30166: LD_VAR 0 1
30170: PPUSH
30171: CALL_OW 248
30175: PPUSH
30176: CALL_OW 450
30180: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30181: LD_VAR 0 10
30185: PPUSH
30186: LD_INT 1
30188: PPUSH
30189: CALL_OW 275
30193: PUSH
30194: LD_VAR 0 11
30198: PUSH
30199: LD_INT 1
30201: ARRAY
30202: GREATEREQUAL
30203: PUSH
30204: LD_VAR 0 10
30208: PPUSH
30209: LD_INT 2
30211: PPUSH
30212: CALL_OW 275
30216: PUSH
30217: LD_VAR 0 11
30221: PUSH
30222: LD_INT 2
30224: ARRAY
30225: GREATEREQUAL
30226: AND
30227: PUSH
30228: LD_VAR 0 10
30232: PPUSH
30233: LD_INT 3
30235: PPUSH
30236: CALL_OW 275
30240: PUSH
30241: LD_VAR 0 11
30245: PUSH
30246: LD_INT 3
30248: ARRAY
30249: GREATEREQUAL
30250: AND
30251: NOT
30252: IFFALSE 30256
// exit ;
30254: GO 30843
// if GetBType ( depot ) = b_depot then
30256: LD_VAR 0 1
30260: PPUSH
30261: CALL_OW 266
30265: PUSH
30266: LD_INT 0
30268: EQUAL
30269: IFFALSE 30281
// dist := 28 else
30271: LD_ADDR_VAR 0 14
30275: PUSH
30276: LD_INT 28
30278: ST_TO_ADDR
30279: GO 30289
// dist := 36 ;
30281: LD_ADDR_VAR 0 14
30285: PUSH
30286: LD_INT 36
30288: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30289: LD_VAR 0 1
30293: PPUSH
30294: LD_VAR 0 3
30298: PPUSH
30299: LD_VAR 0 4
30303: PPUSH
30304: CALL_OW 297
30308: PUSH
30309: LD_VAR 0 14
30313: GREATER
30314: IFFALSE 30318
// exit ;
30316: GO 30843
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30318: LD_ADDR_VAR 0 12
30322: PUSH
30323: LD_VAR 0 2
30327: PPUSH
30328: LD_VAR 0 3
30332: PPUSH
30333: LD_VAR 0 4
30337: PPUSH
30338: LD_VAR 0 5
30342: PPUSH
30343: LD_VAR 0 1
30347: PPUSH
30348: CALL_OW 248
30352: PPUSH
30353: LD_INT 0
30355: PPUSH
30356: CALL 30848 0 6
30360: ST_TO_ADDR
// if not hexes then
30361: LD_VAR 0 12
30365: NOT
30366: IFFALSE 30370
// exit ;
30368: GO 30843
// hex := GetHexInfo ( x , y ) ;
30370: LD_ADDR_VAR 0 15
30374: PUSH
30375: LD_VAR 0 3
30379: PPUSH
30380: LD_VAR 0 4
30384: PPUSH
30385: CALL_OW 546
30389: ST_TO_ADDR
// if hex [ 1 ] then
30390: LD_VAR 0 15
30394: PUSH
30395: LD_INT 1
30397: ARRAY
30398: IFFALSE 30402
// exit ;
30400: GO 30843
// height := hex [ 2 ] ;
30402: LD_ADDR_VAR 0 13
30406: PUSH
30407: LD_VAR 0 15
30411: PUSH
30412: LD_INT 2
30414: ARRAY
30415: ST_TO_ADDR
// for i = 1 to hexes do
30416: LD_ADDR_VAR 0 7
30420: PUSH
30421: DOUBLE
30422: LD_INT 1
30424: DEC
30425: ST_TO_ADDR
30426: LD_VAR 0 12
30430: PUSH
30431: FOR_TO
30432: IFFALSE 30762
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30434: LD_VAR 0 12
30438: PUSH
30439: LD_VAR 0 7
30443: ARRAY
30444: PUSH
30445: LD_INT 1
30447: ARRAY
30448: PPUSH
30449: LD_VAR 0 12
30453: PUSH
30454: LD_VAR 0 7
30458: ARRAY
30459: PUSH
30460: LD_INT 2
30462: ARRAY
30463: PPUSH
30464: CALL_OW 488
30468: NOT
30469: PUSH
30470: LD_VAR 0 12
30474: PUSH
30475: LD_VAR 0 7
30479: ARRAY
30480: PUSH
30481: LD_INT 1
30483: ARRAY
30484: PPUSH
30485: LD_VAR 0 12
30489: PUSH
30490: LD_VAR 0 7
30494: ARRAY
30495: PUSH
30496: LD_INT 2
30498: ARRAY
30499: PPUSH
30500: CALL_OW 428
30504: PUSH
30505: LD_INT 0
30507: GREATER
30508: OR
30509: PUSH
30510: LD_VAR 0 12
30514: PUSH
30515: LD_VAR 0 7
30519: ARRAY
30520: PUSH
30521: LD_INT 1
30523: ARRAY
30524: PPUSH
30525: LD_VAR 0 12
30529: PUSH
30530: LD_VAR 0 7
30534: ARRAY
30535: PUSH
30536: LD_INT 2
30538: ARRAY
30539: PPUSH
30540: CALL_OW 351
30544: OR
30545: IFFALSE 30551
// exit ;
30547: POP
30548: POP
30549: GO 30843
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30551: LD_ADDR_VAR 0 8
30555: PUSH
30556: LD_VAR 0 12
30560: PUSH
30561: LD_VAR 0 7
30565: ARRAY
30566: PUSH
30567: LD_INT 1
30569: ARRAY
30570: PPUSH
30571: LD_VAR 0 12
30575: PUSH
30576: LD_VAR 0 7
30580: ARRAY
30581: PUSH
30582: LD_INT 2
30584: ARRAY
30585: PPUSH
30586: CALL_OW 546
30590: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30591: LD_VAR 0 8
30595: PUSH
30596: LD_INT 1
30598: ARRAY
30599: PUSH
30600: LD_VAR 0 8
30604: PUSH
30605: LD_INT 2
30607: ARRAY
30608: PUSH
30609: LD_VAR 0 13
30613: PUSH
30614: LD_INT 2
30616: PLUS
30617: GREATER
30618: OR
30619: PUSH
30620: LD_VAR 0 8
30624: PUSH
30625: LD_INT 2
30627: ARRAY
30628: PUSH
30629: LD_VAR 0 13
30633: PUSH
30634: LD_INT 2
30636: MINUS
30637: LESS
30638: OR
30639: PUSH
30640: LD_VAR 0 8
30644: PUSH
30645: LD_INT 3
30647: ARRAY
30648: PUSH
30649: LD_INT 0
30651: PUSH
30652: LD_INT 8
30654: PUSH
30655: LD_INT 9
30657: PUSH
30658: LD_INT 10
30660: PUSH
30661: LD_INT 11
30663: PUSH
30664: LD_INT 12
30666: PUSH
30667: LD_INT 13
30669: PUSH
30670: LD_INT 16
30672: PUSH
30673: LD_INT 17
30675: PUSH
30676: LD_INT 18
30678: PUSH
30679: LD_INT 19
30681: PUSH
30682: LD_INT 20
30684: PUSH
30685: LD_INT 21
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: IN
30703: NOT
30704: OR
30705: PUSH
30706: LD_VAR 0 8
30710: PUSH
30711: LD_INT 5
30713: ARRAY
30714: NOT
30715: OR
30716: PUSH
30717: LD_VAR 0 8
30721: PUSH
30722: LD_INT 6
30724: ARRAY
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: LD_INT 2
30731: PUSH
30732: LD_INT 7
30734: PUSH
30735: LD_INT 9
30737: PUSH
30738: LD_INT 10
30740: PUSH
30741: LD_INT 11
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: IN
30752: NOT
30753: OR
30754: IFFALSE 30760
// exit ;
30756: POP
30757: POP
30758: GO 30843
// end ;
30760: GO 30431
30762: POP
30763: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30764: LD_VAR 0 9
30768: PPUSH
30769: LD_VAR 0 3
30773: PPUSH
30774: LD_VAR 0 4
30778: PPUSH
30779: LD_INT 20
30781: PPUSH
30782: CALL 22766 0 4
30786: PUSH
30787: LD_INT 4
30789: ARRAY
30790: IFFALSE 30794
// exit ;
30792: GO 30843
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30794: LD_VAR 0 2
30798: PUSH
30799: LD_INT 29
30801: PUSH
30802: LD_INT 30
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: IN
30809: PUSH
30810: LD_VAR 0 3
30814: PPUSH
30815: LD_VAR 0 4
30819: PPUSH
30820: LD_VAR 0 9
30824: PPUSH
30825: CALL_OW 440
30829: NOT
30830: AND
30831: IFFALSE 30835
// exit ;
30833: GO 30843
// result := true ;
30835: LD_ADDR_VAR 0 6
30839: PUSH
30840: LD_INT 1
30842: ST_TO_ADDR
// end ;
30843: LD_VAR 0 6
30847: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30848: LD_INT 0
30850: PPUSH
30851: PPUSH
30852: PPUSH
30853: PPUSH
30854: PPUSH
30855: PPUSH
30856: PPUSH
30857: PPUSH
30858: PPUSH
30859: PPUSH
30860: PPUSH
30861: PPUSH
30862: PPUSH
30863: PPUSH
30864: PPUSH
30865: PPUSH
30866: PPUSH
30867: PPUSH
30868: PPUSH
30869: PPUSH
30870: PPUSH
30871: PPUSH
30872: PPUSH
30873: PPUSH
30874: PPUSH
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
30881: PPUSH
30882: PPUSH
30883: PPUSH
30884: PPUSH
30885: PPUSH
30886: PPUSH
30887: PPUSH
30888: PPUSH
30889: PPUSH
30890: PPUSH
30891: PPUSH
30892: PPUSH
30893: PPUSH
30894: PPUSH
30895: PPUSH
30896: PPUSH
30897: PPUSH
30898: PPUSH
30899: PPUSH
30900: PPUSH
30901: PPUSH
30902: PPUSH
30903: PPUSH
30904: PPUSH
30905: PPUSH
30906: PPUSH
30907: PPUSH
// result = [ ] ;
30908: LD_ADDR_VAR 0 7
30912: PUSH
30913: EMPTY
30914: ST_TO_ADDR
// temp_list = [ ] ;
30915: LD_ADDR_VAR 0 9
30919: PUSH
30920: EMPTY
30921: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30922: LD_VAR 0 4
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: LD_INT 2
30935: PUSH
30936: LD_INT 3
30938: PUSH
30939: LD_INT 4
30941: PUSH
30942: LD_INT 5
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: IN
30953: NOT
30954: PUSH
30955: LD_VAR 0 1
30959: PUSH
30960: LD_INT 0
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: IN
30970: PUSH
30971: LD_VAR 0 5
30975: PUSH
30976: LD_INT 1
30978: PUSH
30979: LD_INT 2
30981: PUSH
30982: LD_INT 3
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: LIST
30989: IN
30990: NOT
30991: AND
30992: OR
30993: IFFALSE 30997
// exit ;
30995: GO 49388
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30997: LD_VAR 0 1
31001: PUSH
31002: LD_INT 6
31004: PUSH
31005: LD_INT 7
31007: PUSH
31008: LD_INT 8
31010: PUSH
31011: LD_INT 13
31013: PUSH
31014: LD_INT 12
31016: PUSH
31017: LD_INT 15
31019: PUSH
31020: LD_INT 11
31022: PUSH
31023: LD_INT 14
31025: PUSH
31026: LD_INT 10
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: IN
31040: IFFALSE 31050
// btype = b_lab ;
31042: LD_ADDR_VAR 0 1
31046: PUSH
31047: LD_INT 6
31049: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31050: LD_VAR 0 6
31054: PUSH
31055: LD_INT 0
31057: PUSH
31058: LD_INT 1
31060: PUSH
31061: LD_INT 2
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: LIST
31068: IN
31069: NOT
31070: PUSH
31071: LD_VAR 0 1
31075: PUSH
31076: LD_INT 0
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: LD_INT 2
31084: PUSH
31085: LD_INT 3
31087: PUSH
31088: LD_INT 6
31090: PUSH
31091: LD_INT 36
31093: PUSH
31094: LD_INT 4
31096: PUSH
31097: LD_INT 5
31099: PUSH
31100: LD_INT 31
31102: PUSH
31103: LD_INT 32
31105: PUSH
31106: LD_INT 33
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: IN
31122: NOT
31123: PUSH
31124: LD_VAR 0 6
31128: PUSH
31129: LD_INT 1
31131: EQUAL
31132: AND
31133: OR
31134: PUSH
31135: LD_VAR 0 1
31139: PUSH
31140: LD_INT 2
31142: PUSH
31143: LD_INT 3
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: IN
31150: NOT
31151: PUSH
31152: LD_VAR 0 6
31156: PUSH
31157: LD_INT 2
31159: EQUAL
31160: AND
31161: OR
31162: IFFALSE 31172
// mode = 0 ;
31164: LD_ADDR_VAR 0 6
31168: PUSH
31169: LD_INT 0
31171: ST_TO_ADDR
// case mode of 0 :
31172: LD_VAR 0 6
31176: PUSH
31177: LD_INT 0
31179: DOUBLE
31180: EQUAL
31181: IFTRUE 31185
31183: GO 42638
31185: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31186: LD_ADDR_VAR 0 11
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 0
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 1
31214: PUSH
31215: LD_INT 0
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 1
31267: NEG
31268: PUSH
31269: LD_INT 2
31271: NEG
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: LD_INT 2
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 1
31301: PUSH
31302: LD_INT 2
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 0
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 1
31332: PUSH
31333: LD_INT 3
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 0
31342: PUSH
31343: LD_INT 3
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 1
31352: NEG
31353: PUSH
31354: LD_INT 2
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31379: LD_ADDR_VAR 0 12
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: LD_INT 1
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: LD_INT 0
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: LD_INT 1
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: LD_INT 0
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 1
31460: PUSH
31461: LD_INT 1
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 2
31471: PUSH
31472: LD_INT 0
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 2
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 1
31491: NEG
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 2
31502: NEG
31503: PUSH
31504: LD_INT 0
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 2
31513: NEG
31514: PUSH
31515: LD_INT 1
31517: NEG
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 2
31525: NEG
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 3
31536: NEG
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 3
31547: NEG
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31575: LD_ADDR_VAR 0 13
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: LD_INT 1
31595: NEG
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 1
31603: PUSH
31604: LD_INT 0
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 1
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 1
31633: NEG
31634: PUSH
31635: LD_INT 0
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 1
31644: NEG
31645: PUSH
31646: LD_INT 1
31648: NEG
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: NEG
31657: PUSH
31658: LD_INT 2
31660: NEG
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 2
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 1
31688: PUSH
31689: LD_INT 2
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 2
31698: NEG
31699: PUSH
31700: LD_INT 1
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: LD_INT 2
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: NEG
31723: PUSH
31724: LD_INT 3
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 3
31734: NEG
31735: PUSH
31736: LD_INT 2
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 3
31746: NEG
31747: PUSH
31748: LD_INT 3
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31774: LD_ADDR_VAR 0 14
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: LD_INT 1
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: LD_INT 0
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: LD_INT 1
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 1
31832: NEG
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: LD_INT 1
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 1
31855: NEG
31856: PUSH
31857: LD_INT 2
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 0
31867: PUSH
31868: LD_INT 2
31870: NEG
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 1
31878: PUSH
31879: LD_INT 1
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: LD_INT 2
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 0
31899: PUSH
31900: LD_INT 2
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: NEG
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 1
31920: NEG
31921: PUSH
31922: LD_INT 3
31924: NEG
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: LD_INT 3
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: LD_INT 2
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31970: LD_ADDR_VAR 0 15
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: LD_INT 0
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 0
31987: PUSH
31988: LD_INT 1
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 1
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: PUSH
32009: LD_INT 1
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: LD_INT 1
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: LD_INT 1
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: LD_INT 0
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: NEG
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 2
32093: NEG
32094: PUSH
32095: LD_INT 0
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 2
32104: NEG
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 3
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 3
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32163: LD_ADDR_VAR 0 16
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: LD_INT 0
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 0
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 0
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 1
32221: NEG
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 1
32244: NEG
32245: PUSH
32246: LD_INT 2
32248: NEG
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 2
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 2
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: LD_INT 2
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 2
32286: NEG
32287: PUSH
32288: LD_INT 1
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 2
32298: NEG
32299: PUSH
32300: LD_INT 2
32302: NEG
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 3
32310: PUSH
32311: LD_INT 2
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 3
32320: PUSH
32321: LD_INT 3
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: LD_INT 3
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32356: LD_ADDR_VAR 0 17
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: LD_INT 0
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: LD_INT 1
32376: NEG
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 1
32384: PUSH
32385: LD_INT 0
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 1
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: LD_INT 1
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 1
32414: NEG
32415: PUSH
32416: LD_INT 0
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 1
32425: NEG
32426: PUSH
32427: LD_INT 1
32429: NEG
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 1
32437: NEG
32438: PUSH
32439: LD_INT 2
32441: NEG
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: LD_INT 2
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 2
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 2
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 2
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: LD_INT 2
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 0
32511: PUSH
32512: LD_INT 2
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 1
32521: NEG
32522: PUSH
32523: LD_INT 1
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 2
32532: NEG
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 2
32543: NEG
32544: PUSH
32545: LD_INT 1
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 2
32555: NEG
32556: PUSH
32557: LD_INT 2
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32586: LD_ADDR_VAR 0 18
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: LD_INT 0
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 0
32603: PUSH
32604: LD_INT 1
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 1
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 1
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: LD_INT 1
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: NEG
32645: PUSH
32646: LD_INT 0
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 1
32655: NEG
32656: PUSH
32657: LD_INT 1
32659: NEG
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 1
32667: NEG
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: LD_INT 2
32682: NEG
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 2
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 2
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 2
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: LD_INT 2
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: LD_INT 2
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: LD_INT 1
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 2
32762: NEG
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: LD_INT 1
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 2
32785: NEG
32786: PUSH
32787: LD_INT 2
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32816: LD_ADDR_VAR 0 19
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: LD_INT 0
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 0
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 1
32844: PUSH
32845: LD_INT 0
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 1
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 1
32874: NEG
32875: PUSH
32876: LD_INT 0
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 1
32885: NEG
32886: PUSH
32887: LD_INT 1
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 1
32897: NEG
32898: PUSH
32899: LD_INT 2
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: LD_INT 2
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 2
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 2
32941: PUSH
32942: LD_INT 1
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 2
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 1
32961: PUSH
32962: LD_INT 2
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 0
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 1
32981: NEG
32982: PUSH
32983: LD_INT 1
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 2
32992: NEG
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 2
33003: NEG
33004: PUSH
33005: LD_INT 1
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 2
33015: NEG
33016: PUSH
33017: LD_INT 2
33019: NEG
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33046: LD_ADDR_VAR 0 20
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 0
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: PUSH
33075: LD_INT 0
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 1
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 0
33094: PUSH
33095: LD_INT 1
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 1
33104: NEG
33105: PUSH
33106: LD_INT 0
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 1
33115: NEG
33116: PUSH
33117: LD_INT 1
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 1
33127: NEG
33128: PUSH
33129: LD_INT 2
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: LD_INT 2
33142: NEG
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 2
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 2
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 2
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 1
33191: PUSH
33192: LD_INT 2
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 0
33201: PUSH
33202: LD_INT 2
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 2
33222: NEG
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 2
33233: NEG
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 2
33245: NEG
33246: PUSH
33247: LD_INT 2
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33276: LD_ADDR_VAR 0 21
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: LD_INT 0
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 0
33293: PUSH
33294: LD_INT 1
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 1
33304: PUSH
33305: LD_INT 0
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: LD_INT 1
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: LD_INT 0
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 1
33345: NEG
33346: PUSH
33347: LD_INT 1
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 1
33357: NEG
33358: PUSH
33359: LD_INT 2
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: LD_INT 2
33372: NEG
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 2
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 2
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 2
33411: PUSH
33412: LD_INT 2
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 1
33421: PUSH
33422: LD_INT 2
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 0
33431: PUSH
33432: LD_INT 2
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: NEG
33442: PUSH
33443: LD_INT 1
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 2
33452: NEG
33453: PUSH
33454: LD_INT 0
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 2
33463: NEG
33464: PUSH
33465: LD_INT 1
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 2
33475: NEG
33476: PUSH
33477: LD_INT 2
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33506: LD_ADDR_VAR 0 22
33510: PUSH
33511: LD_INT 0
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 0
33523: PUSH
33524: LD_INT 1
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 1
33534: PUSH
33535: LD_INT 0
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 1
33544: PUSH
33545: LD_INT 1
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 0
33554: PUSH
33555: LD_INT 1
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 1
33564: NEG
33565: PUSH
33566: LD_INT 0
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 1
33575: NEG
33576: PUSH
33577: LD_INT 1
33579: NEG
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: LD_INT 2
33591: NEG
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 0
33599: PUSH
33600: LD_INT 2
33602: NEG
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 2
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 2
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 2
33641: PUSH
33642: LD_INT 2
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 1
33651: PUSH
33652: LD_INT 2
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: LD_INT 2
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: LD_INT 1
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 2
33682: NEG
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 2
33693: NEG
33694: PUSH
33695: LD_INT 1
33697: NEG
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 2
33705: NEG
33706: PUSH
33707: LD_INT 2
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33736: LD_ADDR_VAR 0 23
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 0
33753: PUSH
33754: LD_INT 1
33756: NEG
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 1
33764: PUSH
33765: LD_INT 0
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 1
33774: PUSH
33775: LD_INT 1
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 0
33784: PUSH
33785: LD_INT 1
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 1
33794: NEG
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 1
33805: NEG
33806: PUSH
33807: LD_INT 1
33809: NEG
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 1
33817: NEG
33818: PUSH
33819: LD_INT 2
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: LD_INT 2
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 2
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 2
33861: PUSH
33862: LD_INT 1
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 2
33871: PUSH
33872: LD_INT 2
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 1
33881: PUSH
33882: LD_INT 2
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: NEG
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 2
33912: NEG
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 2
33923: NEG
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 2
33935: NEG
33936: PUSH
33937: LD_INT 2
33939: NEG
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 2
33947: NEG
33948: PUSH
33949: LD_INT 3
33951: NEG
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 1
33959: NEG
33960: PUSH
33961: LD_INT 3
33963: NEG
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 1
33971: PUSH
33972: LD_INT 2
33974: NEG
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 2
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34016: LD_ADDR_VAR 0 24
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: LD_INT 0
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 0
34033: PUSH
34034: LD_INT 1
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: LD_INT 0
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: LD_INT 1
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 0
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 1
34074: NEG
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: LD_INT 1
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 1
34097: NEG
34098: PUSH
34099: LD_INT 2
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: LD_INT 2
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 1
34123: NEG
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 2
34131: PUSH
34132: LD_INT 0
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: LD_INT 2
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 1
34161: PUSH
34162: LD_INT 2
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: LD_INT 2
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 1
34181: NEG
34182: PUSH
34183: LD_INT 1
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 2
34192: NEG
34193: PUSH
34194: LD_INT 0
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 2
34203: NEG
34204: PUSH
34205: LD_INT 1
34207: NEG
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 2
34215: NEG
34216: PUSH
34217: LD_INT 2
34219: NEG
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: LD_INT 2
34230: NEG
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 2
34238: PUSH
34239: LD_INT 1
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 3
34249: PUSH
34250: LD_INT 1
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 3
34259: PUSH
34260: LD_INT 2
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34292: LD_ADDR_VAR 0 25
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: LD_INT 1
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: LD_INT 0
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: LD_INT 1
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: NEG
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 1
34373: NEG
34374: PUSH
34375: LD_INT 2
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: LD_INT 2
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: LD_INT 1
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 2
34407: PUSH
34408: LD_INT 0
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: LD_INT 1
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 2
34427: PUSH
34428: LD_INT 2
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 1
34437: PUSH
34438: LD_INT 2
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 0
34447: PUSH
34448: LD_INT 2
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 1
34457: NEG
34458: PUSH
34459: LD_INT 1
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 2
34468: NEG
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 2
34479: NEG
34480: PUSH
34481: LD_INT 1
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 2
34491: NEG
34492: PUSH
34493: LD_INT 2
34495: NEG
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 3
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 3
34513: PUSH
34514: LD_INT 2
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: LD_INT 3
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: LD_INT 3
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34566: LD_ADDR_VAR 0 26
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 0
34583: PUSH
34584: LD_INT 1
34586: NEG
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 1
34594: PUSH
34595: LD_INT 0
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 1
34604: PUSH
34605: LD_INT 1
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 0
34614: PUSH
34615: LD_INT 1
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 1
34624: NEG
34625: PUSH
34626: LD_INT 0
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PUSH
34637: LD_INT 1
34639: NEG
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: LD_INT 2
34651: NEG
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 0
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: LD_INT 1
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 2
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 2
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 2
34701: PUSH
34702: LD_INT 2
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 1
34711: PUSH
34712: LD_INT 2
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 0
34721: PUSH
34722: LD_INT 2
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 1
34731: NEG
34732: PUSH
34733: LD_INT 1
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 2
34742: NEG
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 2
34753: NEG
34754: PUSH
34755: LD_INT 1
34757: NEG
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 2
34765: NEG
34766: PUSH
34767: LD_INT 2
34769: NEG
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: LD_INT 3
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: LD_INT 3
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 2
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 2
34808: NEG
34809: PUSH
34810: LD_INT 1
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34842: LD_ADDR_VAR 0 27
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 0
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 1
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: PUSH
34881: LD_INT 1
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 0
34890: PUSH
34891: LD_INT 1
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: PUSH
34902: LD_INT 0
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 1
34923: NEG
34924: PUSH
34925: LD_INT 2
34927: NEG
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 1
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 2
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: LD_INT 1
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 2
34977: PUSH
34978: LD_INT 2
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: LD_INT 2
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: LD_INT 2
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 2
35018: NEG
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 2
35029: NEG
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 2
35041: NEG
35042: PUSH
35043: LD_INT 2
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: NEG
35054: PUSH
35055: LD_INT 2
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 2
35064: NEG
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 3
35075: NEG
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 3
35087: NEG
35088: PUSH
35089: LD_INT 2
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35122: LD_ADDR_VAR 0 28
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: LD_INT 1
35142: NEG
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 1
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: LD_INT 1
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: LD_INT 0
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 1
35191: NEG
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: NEG
35204: PUSH
35205: LD_INT 2
35207: NEG
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: LD_INT 2
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: LD_INT 1
35229: NEG
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 2
35237: PUSH
35238: LD_INT 0
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 2
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 2
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 1
35267: PUSH
35268: LD_INT 2
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: LD_INT 2
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 2
35298: NEG
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 2
35309: NEG
35310: PUSH
35311: LD_INT 1
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 2
35321: NEG
35322: PUSH
35323: LD_INT 2
35325: NEG
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 2
35333: NEG
35334: PUSH
35335: LD_INT 3
35337: NEG
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 1
35345: NEG
35346: PUSH
35347: LD_INT 3
35349: NEG
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 3
35357: NEG
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 3
35369: NEG
35370: PUSH
35371: LD_INT 2
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35404: LD_ADDR_VAR 0 29
35408: PUSH
35409: LD_INT 0
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 0
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 1
35462: NEG
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: LD_INT 1
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 1
35485: NEG
35486: PUSH
35487: LD_INT 2
35489: NEG
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: LD_INT 2
35500: NEG
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: LD_INT 1
35511: NEG
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 2
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 2
35529: PUSH
35530: LD_INT 1
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 1
35539: PUSH
35540: LD_INT 2
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 1
35559: NEG
35560: PUSH
35561: LD_INT 1
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 2
35570: NEG
35571: PUSH
35572: LD_INT 1
35574: NEG
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 2
35582: NEG
35583: PUSH
35584: LD_INT 2
35586: NEG
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 2
35594: NEG
35595: PUSH
35596: LD_INT 3
35598: NEG
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 2
35606: PUSH
35607: LD_INT 1
35609: NEG
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 3
35617: PUSH
35618: LD_INT 1
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: LD_INT 3
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 1
35637: NEG
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 3
35648: NEG
35649: PUSH
35650: LD_INT 2
35652: NEG
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35683: LD_ADDR_VAR 0 30
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: NEG
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 1
35752: NEG
35753: PUSH
35754: LD_INT 1
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 1
35764: NEG
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 0
35776: PUSH
35777: LD_INT 2
35779: NEG
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: LD_INT 0
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 2
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 2
35818: PUSH
35819: LD_INT 2
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 1
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 1
35838: NEG
35839: PUSH
35840: LD_INT 1
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 2
35849: NEG
35850: PUSH
35851: LD_INT 0
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 2
35860: NEG
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 1
35872: NEG
35873: PUSH
35874: LD_INT 3
35876: NEG
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: LD_INT 2
35887: NEG
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 3
35895: PUSH
35896: LD_INT 2
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 2
35905: PUSH
35906: LD_INT 3
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 2
35915: NEG
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 3
35926: NEG
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35961: LD_ADDR_VAR 0 31
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 1
35981: NEG
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: LD_INT 0
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: NEG
36031: PUSH
36032: LD_INT 1
36034: NEG
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 1
36042: NEG
36043: PUSH
36044: LD_INT 2
36046: NEG
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: LD_INT 1
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: LD_INT 2
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: LD_INT 2
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: LD_INT 2
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 1
36115: NEG
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 2
36126: NEG
36127: PUSH
36128: LD_INT 1
36130: NEG
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 2
36138: NEG
36139: PUSH
36140: LD_INT 2
36142: NEG
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 2
36150: NEG
36151: PUSH
36152: LD_INT 3
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 2
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 3
36173: PUSH
36174: LD_INT 1
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: LD_INT 3
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 1
36193: NEG
36194: PUSH
36195: LD_INT 2
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 3
36204: NEG
36205: PUSH
36206: LD_INT 2
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36239: LD_ADDR_VAR 0 32
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: LD_INT 1
36259: NEG
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 1
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 1
36297: NEG
36298: PUSH
36299: LD_INT 0
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 1
36308: NEG
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: LD_INT 2
36324: NEG
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 0
36332: PUSH
36333: LD_INT 2
36335: NEG
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: LD_INT 1
36346: NEG
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 2
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 2
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 1
36374: PUSH
36375: LD_INT 2
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: LD_INT 2
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: LD_INT 1
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 2
36405: NEG
36406: PUSH
36407: LD_INT 0
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 2
36416: NEG
36417: PUSH
36418: LD_INT 1
36420: NEG
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 1
36428: NEG
36429: PUSH
36430: LD_INT 3
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 1
36440: PUSH
36441: LD_INT 2
36443: NEG
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 3
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 2
36461: PUSH
36462: LD_INT 3
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 2
36471: NEG
36472: PUSH
36473: LD_INT 1
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 3
36482: NEG
36483: PUSH
36484: LD_INT 1
36486: NEG
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36517: LD_ADDR_VAR 0 33
36521: PUSH
36522: LD_INT 0
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: LD_INT 1
36537: NEG
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 1
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: NEG
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 1
36586: NEG
36587: PUSH
36588: LD_INT 1
36590: NEG
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: LD_INT 2
36602: NEG
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 1
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 2
36631: PUSH
36632: LD_INT 1
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: LD_INT 2
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: LD_INT 2
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 2
36683: NEG
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 2
36695: NEG
36696: PUSH
36697: LD_INT 2
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 2
36707: NEG
36708: PUSH
36709: LD_INT 3
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 2
36719: PUSH
36720: LD_INT 1
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 3
36730: PUSH
36731: LD_INT 1
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 1
36740: PUSH
36741: LD_INT 3
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 1
36750: NEG
36751: PUSH
36752: LD_INT 2
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 3
36761: NEG
36762: PUSH
36763: LD_INT 2
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36796: LD_ADDR_VAR 0 34
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: LD_INT 1
36816: NEG
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 1
36824: PUSH
36825: LD_INT 0
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 1
36834: PUSH
36835: LD_INT 1
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: LD_INT 1
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 1
36854: NEG
36855: PUSH
36856: LD_INT 0
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 1
36865: NEG
36866: PUSH
36867: LD_INT 1
36869: NEG
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 1
36877: NEG
36878: PUSH
36879: LD_INT 2
36881: NEG
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: LD_INT 2
36892: NEG
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 1
36900: PUSH
36901: LD_INT 1
36903: NEG
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 2
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 2
36921: PUSH
36922: LD_INT 2
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: LD_INT 2
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: LD_INT 1
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 2
36952: NEG
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 2
36963: NEG
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 2
36975: NEG
36976: PUSH
36977: LD_INT 2
36979: NEG
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: NEG
36988: PUSH
36989: LD_INT 3
36991: NEG
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: LD_INT 2
37002: NEG
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 3
37010: PUSH
37011: LD_INT 2
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 2
37020: PUSH
37021: LD_INT 3
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 2
37030: NEG
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 3
37041: NEG
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37076: LD_ADDR_VAR 0 35
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: LD_INT 1
37096: NEG
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: PUSH
37115: LD_INT 1
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 1
37145: NEG
37146: PUSH
37147: LD_INT 1
37149: NEG
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 2
37157: PUSH
37158: LD_INT 1
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 2
37167: NEG
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37188: LD_ADDR_VAR 0 36
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 0
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 1
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: LD_INT 1
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: NEG
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: LD_INT 2
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: PUSH
37282: LD_INT 2
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37300: LD_ADDR_VAR 0 37
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: LD_INT 1
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 1
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 1
37369: NEG
37370: PUSH
37371: LD_INT 1
37373: NEG
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: LD_INT 1
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 1
37392: NEG
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37412: LD_ADDR_VAR 0 38
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: LD_INT 1
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: LD_INT 1
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 2
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 2
37503: NEG
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37524: LD_ADDR_VAR 0 39
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: LD_INT 1
37544: NEG
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: PUSH
37563: LD_INT 1
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: LD_INT 1
37597: NEG
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: LD_INT 2
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37636: LD_ADDR_VAR 0 40
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: LD_INT 1
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: NEG
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: LD_INT 1
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: LD_INT 1
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37748: LD_ADDR_VAR 0 41
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: LD_INT 1
37768: NEG
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: LD_INT 1
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 0
37796: PUSH
37797: LD_INT 1
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: LD_INT 2
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 2
37872: PUSH
37873: LD_INT 2
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: NEG
37893: PUSH
37894: LD_INT 1
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 2
37903: NEG
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 2
37914: NEG
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 2
37926: NEG
37927: PUSH
37928: LD_INT 2
37930: NEG
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 2
37938: NEG
37939: PUSH
37940: LD_INT 3
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 2
37950: PUSH
37951: LD_INT 1
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 3
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 3
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 3
37981: PUSH
37982: LD_INT 2
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 3
37991: PUSH
37992: LD_INT 3
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 2
38001: PUSH
38002: LD_INT 3
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 2
38011: NEG
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 3
38022: NEG
38023: PUSH
38024: LD_INT 0
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 3
38033: NEG
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 3
38045: NEG
38046: PUSH
38047: LD_INT 2
38049: NEG
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 3
38057: NEG
38058: PUSH
38059: LD_INT 3
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38098: LD_ADDR_VAR 0 42
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: NEG
38168: PUSH
38169: LD_INT 1
38171: NEG
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 2
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 2
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: LD_INT 2
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: LD_INT 2
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: NEG
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: LD_INT 2
38280: NEG
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 2
38288: NEG
38289: PUSH
38290: LD_INT 3
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: PUSH
38302: LD_INT 3
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 0
38312: PUSH
38313: LD_INT 3
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 1
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 3
38334: PUSH
38335: LD_INT 2
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 3
38344: PUSH
38345: LD_INT 3
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: LD_INT 3
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 1
38364: PUSH
38365: LD_INT 3
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: LD_INT 3
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: NEG
38385: PUSH
38386: LD_INT 2
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 3
38395: NEG
38396: PUSH
38397: LD_INT 2
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 3
38407: NEG
38408: PUSH
38409: LD_INT 3
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38448: LD_ADDR_VAR 0 43
38452: PUSH
38453: LD_INT 0
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 1
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: LD_INT 1
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: NEG
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: LD_INT 2
38533: NEG
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: LD_INT 2
38544: NEG
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 1
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 2
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 1
38583: PUSH
38584: LD_INT 2
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 0
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 1
38603: NEG
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 2
38614: NEG
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: NEG
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: LD_INT 3
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: LD_INT 3
38652: NEG
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: LD_INT 1
38674: NEG
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 3
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 3
38692: PUSH
38693: LD_INT 1
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: LD_INT 3
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: LD_INT 3
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 2
38733: NEG
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 3
38744: NEG
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 3
38755: NEG
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38796: LD_ADDR_VAR 0 44
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 1
38824: PUSH
38825: LD_INT 0
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 1
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: LD_INT 1
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: LD_INT 2
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 2
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 2
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: LD_INT 2
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: PUSH
38931: LD_INT 2
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 2
38951: NEG
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 2
38962: NEG
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 2
38974: NEG
38975: PUSH
38976: LD_INT 2
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: LD_INT 3
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 3
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 3
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 3
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 3
39039: PUSH
39040: LD_INT 3
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 2
39049: PUSH
39050: LD_INT 3
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: NEG
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 3
39070: NEG
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 3
39081: NEG
39082: PUSH
39083: LD_INT 1
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 3
39093: NEG
39094: PUSH
39095: LD_INT 2
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 3
39105: NEG
39106: PUSH
39107: LD_INT 3
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39146: LD_ADDR_VAR 0 45
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 0
39163: PUSH
39164: LD_INT 1
39166: NEG
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: LD_INT 1
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 1
39215: NEG
39216: PUSH
39217: LD_INT 1
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: LD_INT 2
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: LD_INT 2
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 2
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 2
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 1
39281: PUSH
39282: LD_INT 2
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: NEG
39313: PUSH
39314: LD_INT 1
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 2
39324: NEG
39325: PUSH
39326: LD_INT 2
39328: NEG
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 2
39336: NEG
39337: PUSH
39338: LD_INT 3
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: LD_INT 3
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: LD_INT 3
39363: NEG
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 3
39382: PUSH
39383: LD_INT 2
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 3
39392: PUSH
39393: LD_INT 3
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 2
39402: PUSH
39403: LD_INT 3
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: LD_INT 3
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: LD_INT 3
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: NEG
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 3
39443: NEG
39444: PUSH
39445: LD_INT 2
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 3
39455: NEG
39456: PUSH
39457: LD_INT 3
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39496: LD_ADDR_VAR 0 46
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: LD_INT 1
39516: NEG
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: LD_INT 2
39581: NEG
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: LD_INT 2
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: LD_INT 1
39603: NEG
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 2
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: LD_INT 2
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_INT 2
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: LD_INT 3
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: LD_INT 3
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: LD_INT 2
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: LD_INT 1
39722: NEG
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 3
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 3
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: LD_INT 3
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 3
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 2
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 2
39781: NEG
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 3
39792: NEG
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 3
39803: NEG
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39844: LD_ADDR_VAR 0 47
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: LD_INT 2
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: LD_INT 2
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 2
39959: NEG
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 2
39971: NEG
39972: PUSH
39973: LD_INT 2
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39995: LD_ADDR_VAR 0 48
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: LD_INT 2
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: LD_INT 2
40091: NEG
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 1
40099: PUSH
40100: LD_INT 1
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 2
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 2
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40142: LD_ADDR_VAR 0 49
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 1
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 2
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40286: LD_ADDR_VAR 0 50
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 2
40377: PUSH
40378: LD_INT 2
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: LD_INT 2
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: LD_INT 2
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40430: LD_ADDR_VAR 0 51
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: LD_INT 2
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 2
40553: NEG
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40577: LD_ADDR_VAR 0 52
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: LD_INT 2
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 2
40681: NEG
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 2
40692: NEG
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 2
40704: NEG
40705: PUSH
40706: LD_INT 2
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40728: LD_ADDR_VAR 0 53
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: NEG
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: LD_INT 2
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 2
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 2
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: NEG
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 2
40915: NEG
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 2
40927: NEG
40928: PUSH
40929: LD_INT 2
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40958: LD_ADDR_VAR 0 54
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 1
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: LD_INT 2
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 2
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 2
41093: PUSH
41094: LD_INT 2
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: LD_INT 2
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: LD_INT 2
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 2
41145: NEG
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 2
41157: NEG
41158: PUSH
41159: LD_INT 2
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41188: LD_ADDR_VAR 0 55
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: NEG
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: LD_INT 2
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: LD_INT 2
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 2
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: NEG
41354: PUSH
41355: LD_INT 1
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 2
41375: NEG
41376: PUSH
41377: LD_INT 1
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 2
41387: NEG
41388: PUSH
41389: LD_INT 2
41391: NEG
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41418: LD_ADDR_VAR 0 56
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 1
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: NEG
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: LD_INT 2
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: LD_INT 2
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 2
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 2
41543: PUSH
41544: LD_INT 1
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 2
41553: PUSH
41554: LD_INT 2
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: LD_INT 2
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 2
41605: NEG
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 2
41617: NEG
41618: PUSH
41619: LD_INT 2
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41648: LD_ADDR_VAR 0 57
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: LD_INT 2
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 2
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 2
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: LD_INT 2
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 2
41835: NEG
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: NEG
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41878: LD_ADDR_VAR 0 58
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: LD_INT 1
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: LD_INT 2
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: LD_INT 2
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 2
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: LD_INT 2
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: LD_INT 2
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: LD_INT 2
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: LD_INT 1
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 2
42054: NEG
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 2
42065: NEG
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 2
42077: NEG
42078: PUSH
42079: LD_INT 2
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42108: LD_ADDR_VAR 0 59
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 1
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 1
42177: NEG
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42196: LD_ADDR_VAR 0 60
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: LD_INT 1
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42284: LD_ADDR_VAR 0 61
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42372: LD_ADDR_VAR 0 62
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42460: LD_ADDR_VAR 0 63
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: NEG
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42548: LD_ADDR_VAR 0 64
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: ST_TO_ADDR
// end ; 1 :
42636: GO 48533
42638: LD_INT 1
42640: DOUBLE
42641: EQUAL
42642: IFTRUE 42646
42644: GO 45269
42646: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42647: LD_ADDR_VAR 0 11
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 3
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 3
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: LD_INT 2
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42691: LD_ADDR_VAR 0 12
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 3
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 3
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: LIST
42731: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42732: LD_ADDR_VAR 0 13
42736: PUSH
42737: LD_INT 3
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 3
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: LD_INT 3
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: LIST
42771: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42772: LD_ADDR_VAR 0 14
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: LD_INT 3
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: LIST
42812: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42813: LD_ADDR_VAR 0 15
42817: PUSH
42818: LD_INT 2
42820: NEG
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 3
42831: NEG
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 3
42842: NEG
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: LIST
42856: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42857: LD_ADDR_VAR 0 16
42861: PUSH
42862: LD_INT 2
42864: NEG
42865: PUSH
42866: LD_INT 3
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 3
42876: NEG
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 3
42888: NEG
42889: PUSH
42890: LD_INT 3
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42903: LD_ADDR_VAR 0 17
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: LD_INT 3
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: LD_INT 3
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: LD_INT 2
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42947: LD_ADDR_VAR 0 18
42951: PUSH
42952: LD_INT 2
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 3
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 3
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: LIST
42987: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42988: LD_ADDR_VAR 0 19
42992: PUSH
42993: LD_INT 3
42995: PUSH
42996: LD_INT 2
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 3
43005: PUSH
43006: LD_INT 3
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: PUSH
43016: LD_INT 3
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: LIST
43027: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43028: LD_ADDR_VAR 0 20
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: LD_INT 3
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: LD_INT 3
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: LIST
43068: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43069: LD_ADDR_VAR 0 21
43073: PUSH
43074: LD_INT 2
43076: NEG
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 3
43087: NEG
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 3
43098: NEG
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: LIST
43112: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43113: LD_ADDR_VAR 0 22
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: LD_INT 3
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 3
43132: NEG
43133: PUSH
43134: LD_INT 2
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 3
43144: NEG
43145: PUSH
43146: LD_INT 3
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: LIST
43158: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43159: LD_ADDR_VAR 0 23
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 3
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 1
43177: NEG
43178: PUSH
43179: LD_INT 4
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: LD_INT 3
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43203: LD_ADDR_VAR 0 24
43207: PUSH
43208: LD_INT 3
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 3
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 4
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43244: LD_ADDR_VAR 0 25
43248: PUSH
43249: LD_INT 3
43251: PUSH
43252: LD_INT 3
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 4
43261: PUSH
43262: LD_INT 3
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 3
43271: PUSH
43272: LD_INT 4
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: LIST
43283: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43284: LD_ADDR_VAR 0 26
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 3
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: LD_INT 4
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: LD_INT 3
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43325: LD_ADDR_VAR 0 27
43329: PUSH
43330: LD_INT 3
43332: NEG
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 3
43343: NEG
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 4
43354: NEG
43355: PUSH
43356: LD_INT 1
43358: NEG
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: LIST
43368: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43369: LD_ADDR_VAR 0 28
43373: PUSH
43374: LD_INT 3
43376: NEG
43377: PUSH
43378: LD_INT 3
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 3
43388: NEG
43389: PUSH
43390: LD_INT 4
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 4
43400: NEG
43401: PUSH
43402: LD_INT 3
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: LIST
43414: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43415: LD_ADDR_VAR 0 29
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: LD_INT 3
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 3
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: LD_INT 4
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: LD_INT 4
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: LD_INT 3
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 5
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: LD_INT 5
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: LD_INT 4
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: LD_INT 6
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 6
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: LD_INT 5
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43570: LD_ADDR_VAR 0 30
43574: PUSH
43575: LD_INT 2
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 3
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 3
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 3
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 4
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 4
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 4
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 5
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 5
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 5
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 6
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 6
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43713: LD_ADDR_VAR 0 31
43717: PUSH
43718: LD_INT 3
43720: PUSH
43721: LD_INT 2
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 3
43730: PUSH
43731: LD_INT 3
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 4
43750: PUSH
43751: LD_INT 3
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 4
43760: PUSH
43761: LD_INT 4
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 3
43770: PUSH
43771: LD_INT 4
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 5
43780: PUSH
43781: LD_INT 4
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 5
43790: PUSH
43791: LD_INT 5
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 4
43800: PUSH
43801: LD_INT 5
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 6
43810: PUSH
43811: LD_INT 5
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 6
43820: PUSH
43821: LD_INT 6
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 5
43830: PUSH
43831: LD_INT 6
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43852: LD_ADDR_VAR 0 32
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: LD_INT 3
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: LD_INT 3
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: LD_INT 2
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 4
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: LD_INT 4
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: LD_INT 3
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: LD_INT 5
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: LD_INT 5
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: LD_INT 4
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: LD_INT 6
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: LD_INT 6
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: LD_INT 5
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43995: LD_ADDR_VAR 0 33
43999: PUSH
44000: LD_INT 2
44002: NEG
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 3
44013: NEG
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 3
44024: NEG
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 3
44036: NEG
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 4
44047: NEG
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 4
44058: NEG
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 4
44070: NEG
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 5
44081: NEG
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 5
44092: NEG
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 5
44104: NEG
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 6
44115: NEG
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 6
44126: NEG
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44150: LD_ADDR_VAR 0 34
44154: PUSH
44155: LD_INT 2
44157: NEG
44158: PUSH
44159: LD_INT 3
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 3
44169: NEG
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 3
44181: NEG
44182: PUSH
44183: LD_INT 3
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 3
44193: NEG
44194: PUSH
44195: LD_INT 4
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 4
44205: NEG
44206: PUSH
44207: LD_INT 3
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 4
44217: NEG
44218: PUSH
44219: LD_INT 4
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 4
44229: NEG
44230: PUSH
44231: LD_INT 5
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 5
44241: NEG
44242: PUSH
44243: LD_INT 4
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 5
44253: NEG
44254: PUSH
44255: LD_INT 5
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 5
44265: NEG
44266: PUSH
44267: LD_INT 6
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 6
44277: NEG
44278: PUSH
44279: LD_INT 5
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 6
44289: NEG
44290: PUSH
44291: LD_INT 6
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44313: LD_ADDR_VAR 0 41
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: LD_INT 3
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: LD_INT 2
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: LIST
44356: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44357: LD_ADDR_VAR 0 42
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 3
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: LIST
44397: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44398: LD_ADDR_VAR 0 43
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: LD_INT 2
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 3
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: LD_INT 3
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: LIST
44437: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44438: LD_ADDR_VAR 0 44
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 3
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: LIST
44478: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44479: LD_ADDR_VAR 0 45
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 2
44497: NEG
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 3
44508: NEG
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: LIST
44522: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44523: LD_ADDR_VAR 0 46
44527: PUSH
44528: LD_INT 2
44530: NEG
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 2
44542: NEG
44543: PUSH
44544: LD_INT 3
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 3
44554: NEG
44555: PUSH
44556: LD_INT 2
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: LIST
44568: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44569: LD_ADDR_VAR 0 47
44573: PUSH
44574: LD_INT 2
44576: NEG
44577: PUSH
44578: LD_INT 3
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: LD_INT 3
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44602: LD_ADDR_VAR 0 48
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44633: LD_ADDR_VAR 0 49
44637: PUSH
44638: LD_INT 3
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 3
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44662: LD_ADDR_VAR 0 50
44666: PUSH
44667: LD_INT 2
44669: PUSH
44670: LD_INT 3
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: LD_INT 3
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44691: LD_ADDR_VAR 0 51
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44722: LD_ADDR_VAR 0 52
44726: PUSH
44727: LD_INT 3
44729: NEG
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 3
44741: NEG
44742: PUSH
44743: LD_INT 2
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44755: LD_ADDR_VAR 0 53
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: LD_INT 3
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 3
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 2
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44799: LD_ADDR_VAR 0 54
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 3
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 3
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: LIST
44839: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44840: LD_ADDR_VAR 0 55
44844: PUSH
44845: LD_INT 3
44847: PUSH
44848: LD_INT 2
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 3
44857: PUSH
44858: LD_INT 3
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: LD_INT 3
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: LIST
44879: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44880: LD_ADDR_VAR 0 56
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: LD_INT 3
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: LD_INT 3
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: LIST
44920: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44921: LD_ADDR_VAR 0 57
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 3
44939: NEG
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 3
44950: NEG
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: LIST
44964: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44965: LD_ADDR_VAR 0 58
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: LD_INT 3
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 3
44984: NEG
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 3
44996: NEG
44997: PUSH
44998: LD_INT 3
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: LIST
45010: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45011: LD_ADDR_VAR 0 59
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45055: LD_ADDR_VAR 0 60
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 2
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45096: LD_ADDR_VAR 0 61
45100: PUSH
45101: LD_INT 2
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: LD_INT 2
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: LIST
45135: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45136: LD_ADDR_VAR 0 62
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 2
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: LIST
45176: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45177: LD_ADDR_VAR 0 63
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 2
45195: NEG
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: LIST
45220: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45221: LD_ADDR_VAR 0 64
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: LD_INT 2
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: NEG
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: ST_TO_ADDR
// end ; 2 :
45267: GO 48533
45269: LD_INT 2
45271: DOUBLE
45272: EQUAL
45273: IFTRUE 45277
45275: GO 48532
45277: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45278: LD_ADDR_VAR 0 29
45282: PUSH
45283: LD_INT 4
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 4
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 5
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 5
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 4
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 3
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 3
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 3
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 5
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 3
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 3
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 4
45398: PUSH
45399: LD_INT 3
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 4
45408: PUSH
45409: LD_INT 4
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 3
45418: PUSH
45419: LD_INT 4
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: LD_INT 3
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 4
45448: PUSH
45449: LD_INT 2
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: LD_INT 4
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 4
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 3
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 4
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: LD_INT 5
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: LD_INT 5
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: LD_INT 4
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 3
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: LD_INT 5
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 2
45550: NEG
45551: PUSH
45552: LD_INT 3
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 3
45561: NEG
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 3
45572: NEG
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 3
45606: NEG
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 4
45617: NEG
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 4
45628: NEG
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 4
45640: NEG
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 4
45663: NEG
45664: PUSH
45665: LD_INT 4
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 4
45675: NEG
45676: PUSH
45677: LD_INT 5
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 3
45687: NEG
45688: PUSH
45689: LD_INT 4
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 3
45699: NEG
45700: PUSH
45701: LD_INT 3
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 4
45711: NEG
45712: PUSH
45713: LD_INT 3
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 5
45723: NEG
45724: PUSH
45725: LD_INT 4
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 5
45735: NEG
45736: PUSH
45737: LD_INT 5
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 3
45747: NEG
45748: PUSH
45749: LD_INT 5
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 5
45759: NEG
45760: PUSH
45761: LD_INT 3
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45816: LD_ADDR_VAR 0 30
45820: PUSH
45821: LD_INT 4
45823: PUSH
45824: LD_INT 4
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 4
45833: PUSH
45834: LD_INT 3
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 5
45843: PUSH
45844: LD_INT 4
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 5
45853: PUSH
45854: LD_INT 5
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 4
45863: PUSH
45864: LD_INT 5
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 3
45873: PUSH
45874: LD_INT 4
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 3
45883: PUSH
45884: LD_INT 3
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 5
45893: PUSH
45894: LD_INT 3
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 3
45903: PUSH
45904: LD_INT 5
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 3
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 3
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: LD_INT 4
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 4
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 3
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: LD_INT 4
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: LD_INT 2
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 4
46006: NEG
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 4
46017: NEG
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 3
46029: NEG
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 3
46040: NEG
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 4
46051: NEG
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 5
46062: NEG
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 5
46073: NEG
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 5
46085: NEG
46086: PUSH
46087: LD_INT 2
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 3
46097: NEG
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 3
46108: NEG
46109: PUSH
46110: LD_INT 3
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 3
46120: NEG
46121: PUSH
46122: LD_INT 4
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: LD_INT 3
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 3
46156: NEG
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 4
46168: NEG
46169: PUSH
46170: LD_INT 3
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 4
46180: NEG
46181: PUSH
46182: LD_INT 4
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: LD_INT 4
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 4
46204: NEG
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 4
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 5
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: LD_INT 4
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: LD_INT 3
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 3
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: LD_INT 4
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: LD_INT 5
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: LD_INT 3
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 2
46306: NEG
46307: PUSH
46308: LD_INT 5
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46363: LD_ADDR_VAR 0 31
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 4
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 3
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 4
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: LD_INT 5
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: LD_INT 5
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: LD_INT 4
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 3
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: LD_INT 5
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 2
46452: NEG
46453: PUSH
46454: LD_INT 3
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 3
46463: NEG
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 3
46474: NEG
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 2
46497: NEG
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 3
46508: NEG
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 4
46519: NEG
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 4
46530: NEG
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 4
46542: NEG
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 4
46565: NEG
46566: PUSH
46567: LD_INT 4
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 4
46577: NEG
46578: PUSH
46579: LD_INT 5
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 3
46589: NEG
46590: PUSH
46591: LD_INT 4
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 3
46601: NEG
46602: PUSH
46603: LD_INT 3
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 4
46613: NEG
46614: PUSH
46615: LD_INT 3
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 5
46625: NEG
46626: PUSH
46627: LD_INT 4
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 5
46637: NEG
46638: PUSH
46639: LD_INT 5
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 3
46649: NEG
46650: PUSH
46651: LD_INT 5
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 5
46661: NEG
46662: PUSH
46663: LD_INT 3
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: LD_INT 3
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: LD_INT 4
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: LD_INT 3
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 2
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 2
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 3
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: LD_INT 4
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: LD_INT 4
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 4
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 4
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 5
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 5
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 4
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 3
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 3
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 3
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 5
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46913: LD_ADDR_VAR 0 32
46917: PUSH
46918: LD_INT 4
46920: NEG
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 4
46931: NEG
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 3
46943: NEG
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 3
46954: NEG
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 4
46965: NEG
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 5
46976: NEG
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 5
46987: NEG
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 5
46999: NEG
47000: PUSH
47001: LD_INT 2
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 3
47011: NEG
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 3
47022: NEG
47023: PUSH
47024: LD_INT 3
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 3
47034: NEG
47035: PUSH
47036: LD_INT 4
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: LD_INT 3
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: NEG
47059: PUSH
47060: LD_INT 2
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 3
47070: NEG
47071: PUSH
47072: LD_INT 2
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 4
47082: NEG
47083: PUSH
47084: LD_INT 3
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 4
47094: NEG
47095: PUSH
47096: LD_INT 4
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: NEG
47107: PUSH
47108: LD_INT 4
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 4
47118: NEG
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: LD_INT 4
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 5
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: LD_INT 4
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 3
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 3
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: LD_INT 4
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: LD_INT 5
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: LD_INT 3
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: LD_INT 5
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 3
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 3
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 4
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 4
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 3
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 2
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 4
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 4
47325: PUSH
47326: LD_INT 4
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 4
47335: PUSH
47336: LD_INT 3
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 5
47345: PUSH
47346: LD_INT 4
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 5
47355: PUSH
47356: LD_INT 5
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 4
47365: PUSH
47366: LD_INT 5
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 3
47375: PUSH
47376: LD_INT 4
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 3
47385: PUSH
47386: LD_INT 3
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 5
47395: PUSH
47396: LD_INT 3
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 3
47405: PUSH
47406: LD_INT 5
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47460: LD_ADDR_VAR 0 33
47464: PUSH
47465: LD_INT 4
47467: NEG
47468: PUSH
47469: LD_INT 4
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 4
47479: NEG
47480: PUSH
47481: LD_INT 5
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: LD_INT 4
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: LD_INT 3
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 4
47515: NEG
47516: PUSH
47517: LD_INT 3
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 5
47527: NEG
47528: PUSH
47529: LD_INT 4
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 5
47539: NEG
47540: PUSH
47541: LD_INT 5
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 3
47551: NEG
47552: PUSH
47553: LD_INT 5
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 5
47563: NEG
47564: PUSH
47565: LD_INT 3
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 3
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 4
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 3
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: LD_INT 2
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 3
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 4
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: LD_INT 4
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 4
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 4
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 5
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 5
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 4
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 3
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 3
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 3
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 5
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 3
47770: PUSH
47771: LD_INT 3
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 3
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 4
47790: PUSH
47791: LD_INT 3
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 4
47800: PUSH
47801: LD_INT 4
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 3
47810: PUSH
47811: LD_INT 4
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 2
47820: PUSH
47821: LD_INT 3
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 4
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: PUSH
47851: LD_INT 4
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: LD_INT 4
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 3
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 4
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 5
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 5
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 4
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 3
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: LD_INT 5
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: LD_INT 3
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47998: LD_ADDR_VAR 0 34
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: LD_INT 4
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 5
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 4
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 3
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 3
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: LD_INT 4
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: LD_INT 5
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: LD_INT 3
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: LD_INT 5
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 3
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 3
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 4
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 4
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 3
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 4
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 4
48200: PUSH
48201: LD_INT 4
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 4
48210: PUSH
48211: LD_INT 3
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 5
48220: PUSH
48221: LD_INT 4
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 5
48230: PUSH
48231: LD_INT 5
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 4
48240: PUSH
48241: LD_INT 5
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 3
48250: PUSH
48251: LD_INT 4
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 3
48260: PUSH
48261: LD_INT 3
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 5
48270: PUSH
48271: LD_INT 3
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: LD_INT 5
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: LD_INT 3
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: LD_INT 3
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 4
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: LD_INT 4
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: LD_INT 3
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: LD_INT 4
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: LD_INT 2
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 4
48383: NEG
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 4
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 3
48406: NEG
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 3
48417: NEG
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 4
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 5
48439: NEG
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 5
48450: NEG
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 5
48462: NEG
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 3
48474: NEG
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: ST_TO_ADDR
// end ; end ;
48530: GO 48533
48532: POP
// case btype of b_depot , b_warehouse :
48533: LD_VAR 0 1
48537: PUSH
48538: LD_INT 0
48540: DOUBLE
48541: EQUAL
48542: IFTRUE 48552
48544: LD_INT 1
48546: DOUBLE
48547: EQUAL
48548: IFTRUE 48552
48550: GO 48753
48552: POP
// case nation of nation_american :
48553: LD_VAR 0 5
48557: PUSH
48558: LD_INT 1
48560: DOUBLE
48561: EQUAL
48562: IFTRUE 48566
48564: GO 48622
48566: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48567: LD_ADDR_VAR 0 9
48571: PUSH
48572: LD_VAR 0 11
48576: PUSH
48577: LD_VAR 0 12
48581: PUSH
48582: LD_VAR 0 13
48586: PUSH
48587: LD_VAR 0 14
48591: PUSH
48592: LD_VAR 0 15
48596: PUSH
48597: LD_VAR 0 16
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: PUSH
48610: LD_VAR 0 4
48614: PUSH
48615: LD_INT 1
48617: PLUS
48618: ARRAY
48619: ST_TO_ADDR
48620: GO 48751
48622: LD_INT 2
48624: DOUBLE
48625: EQUAL
48626: IFTRUE 48630
48628: GO 48686
48630: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48631: LD_ADDR_VAR 0 9
48635: PUSH
48636: LD_VAR 0 17
48640: PUSH
48641: LD_VAR 0 18
48645: PUSH
48646: LD_VAR 0 19
48650: PUSH
48651: LD_VAR 0 20
48655: PUSH
48656: LD_VAR 0 21
48660: PUSH
48661: LD_VAR 0 22
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: PUSH
48674: LD_VAR 0 4
48678: PUSH
48679: LD_INT 1
48681: PLUS
48682: ARRAY
48683: ST_TO_ADDR
48684: GO 48751
48686: LD_INT 3
48688: DOUBLE
48689: EQUAL
48690: IFTRUE 48694
48692: GO 48750
48694: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48695: LD_ADDR_VAR 0 9
48699: PUSH
48700: LD_VAR 0 23
48704: PUSH
48705: LD_VAR 0 24
48709: PUSH
48710: LD_VAR 0 25
48714: PUSH
48715: LD_VAR 0 26
48719: PUSH
48720: LD_VAR 0 27
48724: PUSH
48725: LD_VAR 0 28
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: PUSH
48738: LD_VAR 0 4
48742: PUSH
48743: LD_INT 1
48745: PLUS
48746: ARRAY
48747: ST_TO_ADDR
48748: GO 48751
48750: POP
48751: GO 49306
48753: LD_INT 2
48755: DOUBLE
48756: EQUAL
48757: IFTRUE 48767
48759: LD_INT 3
48761: DOUBLE
48762: EQUAL
48763: IFTRUE 48767
48765: GO 48823
48767: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48768: LD_ADDR_VAR 0 9
48772: PUSH
48773: LD_VAR 0 29
48777: PUSH
48778: LD_VAR 0 30
48782: PUSH
48783: LD_VAR 0 31
48787: PUSH
48788: LD_VAR 0 32
48792: PUSH
48793: LD_VAR 0 33
48797: PUSH
48798: LD_VAR 0 34
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: PUSH
48811: LD_VAR 0 4
48815: PUSH
48816: LD_INT 1
48818: PLUS
48819: ARRAY
48820: ST_TO_ADDR
48821: GO 49306
48823: LD_INT 16
48825: DOUBLE
48826: EQUAL
48827: IFTRUE 48885
48829: LD_INT 17
48831: DOUBLE
48832: EQUAL
48833: IFTRUE 48885
48835: LD_INT 18
48837: DOUBLE
48838: EQUAL
48839: IFTRUE 48885
48841: LD_INT 19
48843: DOUBLE
48844: EQUAL
48845: IFTRUE 48885
48847: LD_INT 22
48849: DOUBLE
48850: EQUAL
48851: IFTRUE 48885
48853: LD_INT 20
48855: DOUBLE
48856: EQUAL
48857: IFTRUE 48885
48859: LD_INT 21
48861: DOUBLE
48862: EQUAL
48863: IFTRUE 48885
48865: LD_INT 23
48867: DOUBLE
48868: EQUAL
48869: IFTRUE 48885
48871: LD_INT 24
48873: DOUBLE
48874: EQUAL
48875: IFTRUE 48885
48877: LD_INT 25
48879: DOUBLE
48880: EQUAL
48881: IFTRUE 48885
48883: GO 48941
48885: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48886: LD_ADDR_VAR 0 9
48890: PUSH
48891: LD_VAR 0 35
48895: PUSH
48896: LD_VAR 0 36
48900: PUSH
48901: LD_VAR 0 37
48905: PUSH
48906: LD_VAR 0 38
48910: PUSH
48911: LD_VAR 0 39
48915: PUSH
48916: LD_VAR 0 40
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: PUSH
48929: LD_VAR 0 4
48933: PUSH
48934: LD_INT 1
48936: PLUS
48937: ARRAY
48938: ST_TO_ADDR
48939: GO 49306
48941: LD_INT 6
48943: DOUBLE
48944: EQUAL
48945: IFTRUE 48997
48947: LD_INT 7
48949: DOUBLE
48950: EQUAL
48951: IFTRUE 48997
48953: LD_INT 8
48955: DOUBLE
48956: EQUAL
48957: IFTRUE 48997
48959: LD_INT 13
48961: DOUBLE
48962: EQUAL
48963: IFTRUE 48997
48965: LD_INT 12
48967: DOUBLE
48968: EQUAL
48969: IFTRUE 48997
48971: LD_INT 15
48973: DOUBLE
48974: EQUAL
48975: IFTRUE 48997
48977: LD_INT 11
48979: DOUBLE
48980: EQUAL
48981: IFTRUE 48997
48983: LD_INT 14
48985: DOUBLE
48986: EQUAL
48987: IFTRUE 48997
48989: LD_INT 10
48991: DOUBLE
48992: EQUAL
48993: IFTRUE 48997
48995: GO 49053
48997: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48998: LD_ADDR_VAR 0 9
49002: PUSH
49003: LD_VAR 0 41
49007: PUSH
49008: LD_VAR 0 42
49012: PUSH
49013: LD_VAR 0 43
49017: PUSH
49018: LD_VAR 0 44
49022: PUSH
49023: LD_VAR 0 45
49027: PUSH
49028: LD_VAR 0 46
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: PUSH
49041: LD_VAR 0 4
49045: PUSH
49046: LD_INT 1
49048: PLUS
49049: ARRAY
49050: ST_TO_ADDR
49051: GO 49306
49053: LD_INT 36
49055: DOUBLE
49056: EQUAL
49057: IFTRUE 49061
49059: GO 49117
49061: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49062: LD_ADDR_VAR 0 9
49066: PUSH
49067: LD_VAR 0 47
49071: PUSH
49072: LD_VAR 0 48
49076: PUSH
49077: LD_VAR 0 49
49081: PUSH
49082: LD_VAR 0 50
49086: PUSH
49087: LD_VAR 0 51
49091: PUSH
49092: LD_VAR 0 52
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: PUSH
49105: LD_VAR 0 4
49109: PUSH
49110: LD_INT 1
49112: PLUS
49113: ARRAY
49114: ST_TO_ADDR
49115: GO 49306
49117: LD_INT 4
49119: DOUBLE
49120: EQUAL
49121: IFTRUE 49143
49123: LD_INT 5
49125: DOUBLE
49126: EQUAL
49127: IFTRUE 49143
49129: LD_INT 34
49131: DOUBLE
49132: EQUAL
49133: IFTRUE 49143
49135: LD_INT 37
49137: DOUBLE
49138: EQUAL
49139: IFTRUE 49143
49141: GO 49199
49143: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49144: LD_ADDR_VAR 0 9
49148: PUSH
49149: LD_VAR 0 53
49153: PUSH
49154: LD_VAR 0 54
49158: PUSH
49159: LD_VAR 0 55
49163: PUSH
49164: LD_VAR 0 56
49168: PUSH
49169: LD_VAR 0 57
49173: PUSH
49174: LD_VAR 0 58
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: PUSH
49187: LD_VAR 0 4
49191: PUSH
49192: LD_INT 1
49194: PLUS
49195: ARRAY
49196: ST_TO_ADDR
49197: GO 49306
49199: LD_INT 31
49201: DOUBLE
49202: EQUAL
49203: IFTRUE 49249
49205: LD_INT 32
49207: DOUBLE
49208: EQUAL
49209: IFTRUE 49249
49211: LD_INT 33
49213: DOUBLE
49214: EQUAL
49215: IFTRUE 49249
49217: LD_INT 27
49219: DOUBLE
49220: EQUAL
49221: IFTRUE 49249
49223: LD_INT 26
49225: DOUBLE
49226: EQUAL
49227: IFTRUE 49249
49229: LD_INT 28
49231: DOUBLE
49232: EQUAL
49233: IFTRUE 49249
49235: LD_INT 29
49237: DOUBLE
49238: EQUAL
49239: IFTRUE 49249
49241: LD_INT 30
49243: DOUBLE
49244: EQUAL
49245: IFTRUE 49249
49247: GO 49305
49249: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49250: LD_ADDR_VAR 0 9
49254: PUSH
49255: LD_VAR 0 59
49259: PUSH
49260: LD_VAR 0 60
49264: PUSH
49265: LD_VAR 0 61
49269: PUSH
49270: LD_VAR 0 62
49274: PUSH
49275: LD_VAR 0 63
49279: PUSH
49280: LD_VAR 0 64
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: PUSH
49293: LD_VAR 0 4
49297: PUSH
49298: LD_INT 1
49300: PLUS
49301: ARRAY
49302: ST_TO_ADDR
49303: GO 49306
49305: POP
// temp_list2 = [ ] ;
49306: LD_ADDR_VAR 0 10
49310: PUSH
49311: EMPTY
49312: ST_TO_ADDR
// for i in temp_list do
49313: LD_ADDR_VAR 0 8
49317: PUSH
49318: LD_VAR 0 9
49322: PUSH
49323: FOR_IN
49324: IFFALSE 49376
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49326: LD_ADDR_VAR 0 10
49330: PUSH
49331: LD_VAR 0 10
49335: PUSH
49336: LD_VAR 0 8
49340: PUSH
49341: LD_INT 1
49343: ARRAY
49344: PUSH
49345: LD_VAR 0 2
49349: PLUS
49350: PUSH
49351: LD_VAR 0 8
49355: PUSH
49356: LD_INT 2
49358: ARRAY
49359: PUSH
49360: LD_VAR 0 3
49364: PLUS
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: EMPTY
49371: LIST
49372: ADD
49373: ST_TO_ADDR
49374: GO 49323
49376: POP
49377: POP
// result = temp_list2 ;
49378: LD_ADDR_VAR 0 7
49382: PUSH
49383: LD_VAR 0 10
49387: ST_TO_ADDR
// end ;
49388: LD_VAR 0 7
49392: RET
// export function EnemyInRange ( unit , dist ) ; begin
49393: LD_INT 0
49395: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49396: LD_ADDR_VAR 0 3
49400: PUSH
49401: LD_VAR 0 1
49405: PPUSH
49406: CALL_OW 255
49410: PPUSH
49411: LD_VAR 0 1
49415: PPUSH
49416: CALL_OW 250
49420: PPUSH
49421: LD_VAR 0 1
49425: PPUSH
49426: CALL_OW 251
49430: PPUSH
49431: LD_VAR 0 2
49435: PPUSH
49436: CALL 22766 0 4
49440: PUSH
49441: LD_INT 4
49443: ARRAY
49444: ST_TO_ADDR
// end ;
49445: LD_VAR 0 3
49449: RET
// export function PlayerSeeMe ( unit ) ; begin
49450: LD_INT 0
49452: PPUSH
// result := See ( your_side , unit ) ;
49453: LD_ADDR_VAR 0 2
49457: PUSH
49458: LD_OWVAR 2
49462: PPUSH
49463: LD_VAR 0 1
49467: PPUSH
49468: CALL_OW 292
49472: ST_TO_ADDR
// end ;
49473: LD_VAR 0 2
49477: RET
// export function ReverseDir ( unit ) ; begin
49478: LD_INT 0
49480: PPUSH
// if not unit then
49481: LD_VAR 0 1
49485: NOT
49486: IFFALSE 49490
// exit ;
49488: GO 49513
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49490: LD_ADDR_VAR 0 2
49494: PUSH
49495: LD_VAR 0 1
49499: PPUSH
49500: CALL_OW 254
49504: PUSH
49505: LD_INT 3
49507: PLUS
49508: PUSH
49509: LD_INT 6
49511: MOD
49512: ST_TO_ADDR
// end ;
49513: LD_VAR 0 2
49517: RET
// export function ReverseArray ( array ) ; var i ; begin
49518: LD_INT 0
49520: PPUSH
49521: PPUSH
// if not array then
49522: LD_VAR 0 1
49526: NOT
49527: IFFALSE 49531
// exit ;
49529: GO 49586
// result := [ ] ;
49531: LD_ADDR_VAR 0 2
49535: PUSH
49536: EMPTY
49537: ST_TO_ADDR
// for i := array downto 1 do
49538: LD_ADDR_VAR 0 3
49542: PUSH
49543: DOUBLE
49544: LD_VAR 0 1
49548: INC
49549: ST_TO_ADDR
49550: LD_INT 1
49552: PUSH
49553: FOR_DOWNTO
49554: IFFALSE 49584
// result := Join ( result , array [ i ] ) ;
49556: LD_ADDR_VAR 0 2
49560: PUSH
49561: LD_VAR 0 2
49565: PPUSH
49566: LD_VAR 0 1
49570: PUSH
49571: LD_VAR 0 3
49575: ARRAY
49576: PPUSH
49577: CALL 54231 0 2
49581: ST_TO_ADDR
49582: GO 49553
49584: POP
49585: POP
// end ;
49586: LD_VAR 0 2
49590: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49591: LD_INT 0
49593: PPUSH
49594: PPUSH
49595: PPUSH
49596: PPUSH
49597: PPUSH
49598: PPUSH
// if not unit or not hexes then
49599: LD_VAR 0 1
49603: NOT
49604: PUSH
49605: LD_VAR 0 2
49609: NOT
49610: OR
49611: IFFALSE 49615
// exit ;
49613: GO 49738
// dist := 9999 ;
49615: LD_ADDR_VAR 0 5
49619: PUSH
49620: LD_INT 9999
49622: ST_TO_ADDR
// for i = 1 to hexes do
49623: LD_ADDR_VAR 0 4
49627: PUSH
49628: DOUBLE
49629: LD_INT 1
49631: DEC
49632: ST_TO_ADDR
49633: LD_VAR 0 2
49637: PUSH
49638: FOR_TO
49639: IFFALSE 49726
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49641: LD_ADDR_VAR 0 6
49645: PUSH
49646: LD_VAR 0 1
49650: PPUSH
49651: LD_VAR 0 2
49655: PUSH
49656: LD_VAR 0 4
49660: ARRAY
49661: PUSH
49662: LD_INT 1
49664: ARRAY
49665: PPUSH
49666: LD_VAR 0 2
49670: PUSH
49671: LD_VAR 0 4
49675: ARRAY
49676: PUSH
49677: LD_INT 2
49679: ARRAY
49680: PPUSH
49681: CALL_OW 297
49685: ST_TO_ADDR
// if tdist < dist then
49686: LD_VAR 0 6
49690: PUSH
49691: LD_VAR 0 5
49695: LESS
49696: IFFALSE 49724
// begin hex := hexes [ i ] ;
49698: LD_ADDR_VAR 0 8
49702: PUSH
49703: LD_VAR 0 2
49707: PUSH
49708: LD_VAR 0 4
49712: ARRAY
49713: ST_TO_ADDR
// dist := tdist ;
49714: LD_ADDR_VAR 0 5
49718: PUSH
49719: LD_VAR 0 6
49723: ST_TO_ADDR
// end ; end ;
49724: GO 49638
49726: POP
49727: POP
// result := hex ;
49728: LD_ADDR_VAR 0 3
49732: PUSH
49733: LD_VAR 0 8
49737: ST_TO_ADDR
// end ;
49738: LD_VAR 0 3
49742: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49743: LD_INT 0
49745: PPUSH
49746: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49747: LD_VAR 0 1
49751: NOT
49752: PUSH
49753: LD_VAR 0 1
49757: PUSH
49758: LD_INT 21
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 23
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PPUSH
49782: CALL_OW 69
49786: IN
49787: NOT
49788: OR
49789: IFFALSE 49793
// exit ;
49791: GO 49840
// for i = 1 to 3 do
49793: LD_ADDR_VAR 0 3
49797: PUSH
49798: DOUBLE
49799: LD_INT 1
49801: DEC
49802: ST_TO_ADDR
49803: LD_INT 3
49805: PUSH
49806: FOR_TO
49807: IFFALSE 49838
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49809: LD_VAR 0 1
49813: PPUSH
49814: CALL_OW 250
49818: PPUSH
49819: LD_VAR 0 1
49823: PPUSH
49824: CALL_OW 251
49828: PPUSH
49829: LD_INT 1
49831: PPUSH
49832: CALL_OW 453
49836: GO 49806
49838: POP
49839: POP
// end ;
49840: LD_VAR 0 2
49844: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49845: LD_INT 0
49847: PPUSH
49848: PPUSH
49849: PPUSH
49850: PPUSH
49851: PPUSH
49852: PPUSH
// if not unit or not enemy_unit then
49853: LD_VAR 0 1
49857: NOT
49858: PUSH
49859: LD_VAR 0 2
49863: NOT
49864: OR
49865: IFFALSE 49869
// exit ;
49867: GO 50336
// if GetLives ( i ) < 250 then
49869: LD_VAR 0 4
49873: PPUSH
49874: CALL_OW 256
49878: PUSH
49879: LD_INT 250
49881: LESS
49882: IFFALSE 49895
// begin ComAutodestruct ( i ) ;
49884: LD_VAR 0 4
49888: PPUSH
49889: CALL 49743 0 1
// exit ;
49893: GO 50336
// end ; x := GetX ( enemy_unit ) ;
49895: LD_ADDR_VAR 0 7
49899: PUSH
49900: LD_VAR 0 2
49904: PPUSH
49905: CALL_OW 250
49909: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49910: LD_ADDR_VAR 0 8
49914: PUSH
49915: LD_VAR 0 2
49919: PPUSH
49920: CALL_OW 251
49924: ST_TO_ADDR
// if not x or not y then
49925: LD_VAR 0 7
49929: NOT
49930: PUSH
49931: LD_VAR 0 8
49935: NOT
49936: OR
49937: IFFALSE 49941
// exit ;
49939: GO 50336
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49941: LD_ADDR_VAR 0 6
49945: PUSH
49946: LD_VAR 0 7
49950: PPUSH
49951: LD_INT 0
49953: PPUSH
49954: LD_INT 4
49956: PPUSH
49957: CALL_OW 272
49961: PUSH
49962: LD_VAR 0 8
49966: PPUSH
49967: LD_INT 0
49969: PPUSH
49970: LD_INT 4
49972: PPUSH
49973: CALL_OW 273
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_VAR 0 7
49986: PPUSH
49987: LD_INT 1
49989: PPUSH
49990: LD_INT 4
49992: PPUSH
49993: CALL_OW 272
49997: PUSH
49998: LD_VAR 0 8
50002: PPUSH
50003: LD_INT 1
50005: PPUSH
50006: LD_INT 4
50008: PPUSH
50009: CALL_OW 273
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_VAR 0 7
50022: PPUSH
50023: LD_INT 2
50025: PPUSH
50026: LD_INT 4
50028: PPUSH
50029: CALL_OW 272
50033: PUSH
50034: LD_VAR 0 8
50038: PPUSH
50039: LD_INT 2
50041: PPUSH
50042: LD_INT 4
50044: PPUSH
50045: CALL_OW 273
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_VAR 0 7
50058: PPUSH
50059: LD_INT 3
50061: PPUSH
50062: LD_INT 4
50064: PPUSH
50065: CALL_OW 272
50069: PUSH
50070: LD_VAR 0 8
50074: PPUSH
50075: LD_INT 3
50077: PPUSH
50078: LD_INT 4
50080: PPUSH
50081: CALL_OW 273
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_VAR 0 7
50094: PPUSH
50095: LD_INT 4
50097: PPUSH
50098: LD_INT 4
50100: PPUSH
50101: CALL_OW 272
50105: PUSH
50106: LD_VAR 0 8
50110: PPUSH
50111: LD_INT 4
50113: PPUSH
50114: LD_INT 4
50116: PPUSH
50117: CALL_OW 273
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_VAR 0 7
50130: PPUSH
50131: LD_INT 5
50133: PPUSH
50134: LD_INT 4
50136: PPUSH
50137: CALL_OW 272
50141: PUSH
50142: LD_VAR 0 8
50146: PPUSH
50147: LD_INT 5
50149: PPUSH
50150: LD_INT 4
50152: PPUSH
50153: CALL_OW 273
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: ST_TO_ADDR
// for i = tmp downto 1 do
50170: LD_ADDR_VAR 0 4
50174: PUSH
50175: DOUBLE
50176: LD_VAR 0 6
50180: INC
50181: ST_TO_ADDR
50182: LD_INT 1
50184: PUSH
50185: FOR_DOWNTO
50186: IFFALSE 50287
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50188: LD_VAR 0 6
50192: PUSH
50193: LD_VAR 0 4
50197: ARRAY
50198: PUSH
50199: LD_INT 1
50201: ARRAY
50202: PPUSH
50203: LD_VAR 0 6
50207: PUSH
50208: LD_VAR 0 4
50212: ARRAY
50213: PUSH
50214: LD_INT 2
50216: ARRAY
50217: PPUSH
50218: CALL_OW 488
50222: NOT
50223: PUSH
50224: LD_VAR 0 6
50228: PUSH
50229: LD_VAR 0 4
50233: ARRAY
50234: PUSH
50235: LD_INT 1
50237: ARRAY
50238: PPUSH
50239: LD_VAR 0 6
50243: PUSH
50244: LD_VAR 0 4
50248: ARRAY
50249: PUSH
50250: LD_INT 2
50252: ARRAY
50253: PPUSH
50254: CALL_OW 428
50258: PUSH
50259: LD_INT 0
50261: NONEQUAL
50262: OR
50263: IFFALSE 50285
// tmp := Delete ( tmp , i ) ;
50265: LD_ADDR_VAR 0 6
50269: PUSH
50270: LD_VAR 0 6
50274: PPUSH
50275: LD_VAR 0 4
50279: PPUSH
50280: CALL_OW 3
50284: ST_TO_ADDR
50285: GO 50185
50287: POP
50288: POP
// j := GetClosestHex ( unit , tmp ) ;
50289: LD_ADDR_VAR 0 5
50293: PUSH
50294: LD_VAR 0 1
50298: PPUSH
50299: LD_VAR 0 6
50303: PPUSH
50304: CALL 49591 0 2
50308: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50309: LD_VAR 0 1
50313: PPUSH
50314: LD_VAR 0 5
50318: PUSH
50319: LD_INT 1
50321: ARRAY
50322: PPUSH
50323: LD_VAR 0 5
50327: PUSH
50328: LD_INT 2
50330: ARRAY
50331: PPUSH
50332: CALL_OW 111
// end ;
50336: LD_VAR 0 3
50340: RET
// export function PrepareApemanSoldier ( ) ; begin
50341: LD_INT 0
50343: PPUSH
// uc_nation := 0 ;
50344: LD_ADDR_OWVAR 21
50348: PUSH
50349: LD_INT 0
50351: ST_TO_ADDR
// hc_sex := sex_male ;
50352: LD_ADDR_OWVAR 27
50356: PUSH
50357: LD_INT 1
50359: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50360: LD_ADDR_OWVAR 28
50364: PUSH
50365: LD_INT 15
50367: ST_TO_ADDR
// hc_gallery :=  ;
50368: LD_ADDR_OWVAR 33
50372: PUSH
50373: LD_STRING 
50375: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50376: LD_ADDR_OWVAR 31
50380: PUSH
50381: LD_INT 0
50383: PPUSH
50384: LD_INT 3
50386: PPUSH
50387: CALL_OW 12
50391: PUSH
50392: LD_INT 0
50394: PPUSH
50395: LD_INT 3
50397: PPUSH
50398: CALL_OW 12
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: ST_TO_ADDR
// end ;
50415: LD_VAR 0 1
50419: RET
// export function PrepareApemanEngineer ( ) ; begin
50420: LD_INT 0
50422: PPUSH
// uc_nation := 0 ;
50423: LD_ADDR_OWVAR 21
50427: PUSH
50428: LD_INT 0
50430: ST_TO_ADDR
// hc_sex := sex_male ;
50431: LD_ADDR_OWVAR 27
50435: PUSH
50436: LD_INT 1
50438: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50439: LD_ADDR_OWVAR 28
50443: PUSH
50444: LD_INT 16
50446: ST_TO_ADDR
// hc_gallery :=  ;
50447: LD_ADDR_OWVAR 33
50451: PUSH
50452: LD_STRING 
50454: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50455: LD_ADDR_OWVAR 31
50459: PUSH
50460: LD_INT 0
50462: PPUSH
50463: LD_INT 3
50465: PPUSH
50466: CALL_OW 12
50470: PUSH
50471: LD_INT 0
50473: PPUSH
50474: LD_INT 3
50476: PPUSH
50477: CALL_OW 12
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: ST_TO_ADDR
// end ;
50494: LD_VAR 0 1
50498: RET
// export function PrepareApeman ( agressivity ) ; begin
50499: LD_INT 0
50501: PPUSH
// uc_side := 0 ;
50502: LD_ADDR_OWVAR 20
50506: PUSH
50507: LD_INT 0
50509: ST_TO_ADDR
// uc_nation := 0 ;
50510: LD_ADDR_OWVAR 21
50514: PUSH
50515: LD_INT 0
50517: ST_TO_ADDR
// hc_sex := sex_male ;
50518: LD_ADDR_OWVAR 27
50522: PUSH
50523: LD_INT 1
50525: ST_TO_ADDR
// hc_class := class_apeman ;
50526: LD_ADDR_OWVAR 28
50530: PUSH
50531: LD_INT 12
50533: ST_TO_ADDR
// hc_gallery :=  ;
50534: LD_ADDR_OWVAR 33
50538: PUSH
50539: LD_STRING 
50541: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50542: LD_ADDR_OWVAR 35
50546: PUSH
50547: LD_VAR 0 1
50551: NEG
50552: PPUSH
50553: LD_VAR 0 1
50557: PPUSH
50558: CALL_OW 12
50562: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50563: LD_ADDR_OWVAR 31
50567: PUSH
50568: LD_INT 0
50570: PPUSH
50571: LD_INT 3
50573: PPUSH
50574: CALL_OW 12
50578: PUSH
50579: LD_INT 0
50581: PPUSH
50582: LD_INT 3
50584: PPUSH
50585: CALL_OW 12
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: ST_TO_ADDR
// end ;
50602: LD_VAR 0 2
50606: RET
// export function PrepareTiger ( agressivity ) ; begin
50607: LD_INT 0
50609: PPUSH
// uc_side := 0 ;
50610: LD_ADDR_OWVAR 20
50614: PUSH
50615: LD_INT 0
50617: ST_TO_ADDR
// uc_nation := 0 ;
50618: LD_ADDR_OWVAR 21
50622: PUSH
50623: LD_INT 0
50625: ST_TO_ADDR
// hc_class := class_tiger ;
50626: LD_ADDR_OWVAR 28
50630: PUSH
50631: LD_INT 14
50633: ST_TO_ADDR
// hc_gallery :=  ;
50634: LD_ADDR_OWVAR 33
50638: PUSH
50639: LD_STRING 
50641: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50642: LD_ADDR_OWVAR 35
50646: PUSH
50647: LD_VAR 0 1
50651: NEG
50652: PPUSH
50653: LD_VAR 0 1
50657: PPUSH
50658: CALL_OW 12
50662: ST_TO_ADDR
// end ;
50663: LD_VAR 0 2
50667: RET
// export function PrepareEnchidna ( ) ; begin
50668: LD_INT 0
50670: PPUSH
// uc_side := 0 ;
50671: LD_ADDR_OWVAR 20
50675: PUSH
50676: LD_INT 0
50678: ST_TO_ADDR
// uc_nation := 0 ;
50679: LD_ADDR_OWVAR 21
50683: PUSH
50684: LD_INT 0
50686: ST_TO_ADDR
// hc_class := class_baggie ;
50687: LD_ADDR_OWVAR 28
50691: PUSH
50692: LD_INT 13
50694: ST_TO_ADDR
// hc_gallery :=  ;
50695: LD_ADDR_OWVAR 33
50699: PUSH
50700: LD_STRING 
50702: ST_TO_ADDR
// end ;
50703: LD_VAR 0 1
50707: RET
// export function PrepareFrog ( ) ; begin
50708: LD_INT 0
50710: PPUSH
// uc_side := 0 ;
50711: LD_ADDR_OWVAR 20
50715: PUSH
50716: LD_INT 0
50718: ST_TO_ADDR
// uc_nation := 0 ;
50719: LD_ADDR_OWVAR 21
50723: PUSH
50724: LD_INT 0
50726: ST_TO_ADDR
// hc_class := class_frog ;
50727: LD_ADDR_OWVAR 28
50731: PUSH
50732: LD_INT 19
50734: ST_TO_ADDR
// hc_gallery :=  ;
50735: LD_ADDR_OWVAR 33
50739: PUSH
50740: LD_STRING 
50742: ST_TO_ADDR
// end ;
50743: LD_VAR 0 1
50747: RET
// export function PrepareFish ( ) ; begin
50748: LD_INT 0
50750: PPUSH
// uc_side := 0 ;
50751: LD_ADDR_OWVAR 20
50755: PUSH
50756: LD_INT 0
50758: ST_TO_ADDR
// uc_nation := 0 ;
50759: LD_ADDR_OWVAR 21
50763: PUSH
50764: LD_INT 0
50766: ST_TO_ADDR
// hc_class := class_fish ;
50767: LD_ADDR_OWVAR 28
50771: PUSH
50772: LD_INT 20
50774: ST_TO_ADDR
// hc_gallery :=  ;
50775: LD_ADDR_OWVAR 33
50779: PUSH
50780: LD_STRING 
50782: ST_TO_ADDR
// end ;
50783: LD_VAR 0 1
50787: RET
// export function PrepareBird ( ) ; begin
50788: LD_INT 0
50790: PPUSH
// uc_side := 0 ;
50791: LD_ADDR_OWVAR 20
50795: PUSH
50796: LD_INT 0
50798: ST_TO_ADDR
// uc_nation := 0 ;
50799: LD_ADDR_OWVAR 21
50803: PUSH
50804: LD_INT 0
50806: ST_TO_ADDR
// hc_class := class_phororhacos ;
50807: LD_ADDR_OWVAR 28
50811: PUSH
50812: LD_INT 18
50814: ST_TO_ADDR
// hc_gallery :=  ;
50815: LD_ADDR_OWVAR 33
50819: PUSH
50820: LD_STRING 
50822: ST_TO_ADDR
// end ;
50823: LD_VAR 0 1
50827: RET
// export function PrepareHorse ( ) ; begin
50828: LD_INT 0
50830: PPUSH
// uc_side := 0 ;
50831: LD_ADDR_OWVAR 20
50835: PUSH
50836: LD_INT 0
50838: ST_TO_ADDR
// uc_nation := 0 ;
50839: LD_ADDR_OWVAR 21
50843: PUSH
50844: LD_INT 0
50846: ST_TO_ADDR
// hc_class := class_horse ;
50847: LD_ADDR_OWVAR 28
50851: PUSH
50852: LD_INT 21
50854: ST_TO_ADDR
// hc_gallery :=  ;
50855: LD_ADDR_OWVAR 33
50859: PUSH
50860: LD_STRING 
50862: ST_TO_ADDR
// end ;
50863: LD_VAR 0 1
50867: RET
// export function PrepareMastodont ( ) ; begin
50868: LD_INT 0
50870: PPUSH
// uc_side := 0 ;
50871: LD_ADDR_OWVAR 20
50875: PUSH
50876: LD_INT 0
50878: ST_TO_ADDR
// uc_nation := 0 ;
50879: LD_ADDR_OWVAR 21
50883: PUSH
50884: LD_INT 0
50886: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50887: LD_ADDR_OWVAR 37
50891: PUSH
50892: LD_INT 31
50894: ST_TO_ADDR
// vc_control := control_rider ;
50895: LD_ADDR_OWVAR 38
50899: PUSH
50900: LD_INT 4
50902: ST_TO_ADDR
// end ;
50903: LD_VAR 0 1
50907: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50908: LD_INT 0
50910: PPUSH
50911: PPUSH
50912: PPUSH
// uc_side = 0 ;
50913: LD_ADDR_OWVAR 20
50917: PUSH
50918: LD_INT 0
50920: ST_TO_ADDR
// uc_nation = 0 ;
50921: LD_ADDR_OWVAR 21
50925: PUSH
50926: LD_INT 0
50928: ST_TO_ADDR
// InitHc_All ( ) ;
50929: CALL_OW 584
// InitVc ;
50933: CALL_OW 20
// if mastodonts then
50937: LD_VAR 0 6
50941: IFFALSE 51008
// for i = 1 to mastodonts do
50943: LD_ADDR_VAR 0 11
50947: PUSH
50948: DOUBLE
50949: LD_INT 1
50951: DEC
50952: ST_TO_ADDR
50953: LD_VAR 0 6
50957: PUSH
50958: FOR_TO
50959: IFFALSE 51006
// begin vc_chassis := 31 ;
50961: LD_ADDR_OWVAR 37
50965: PUSH
50966: LD_INT 31
50968: ST_TO_ADDR
// vc_control := control_rider ;
50969: LD_ADDR_OWVAR 38
50973: PUSH
50974: LD_INT 4
50976: ST_TO_ADDR
// animal := CreateVehicle ;
50977: LD_ADDR_VAR 0 12
50981: PUSH
50982: CALL_OW 45
50986: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50987: LD_VAR 0 12
50991: PPUSH
50992: LD_VAR 0 8
50996: PPUSH
50997: LD_INT 0
50999: PPUSH
51000: CALL 53136 0 3
// end ;
51004: GO 50958
51006: POP
51007: POP
// if horses then
51008: LD_VAR 0 5
51012: IFFALSE 51079
// for i = 1 to horses do
51014: LD_ADDR_VAR 0 11
51018: PUSH
51019: DOUBLE
51020: LD_INT 1
51022: DEC
51023: ST_TO_ADDR
51024: LD_VAR 0 5
51028: PUSH
51029: FOR_TO
51030: IFFALSE 51077
// begin hc_class := 21 ;
51032: LD_ADDR_OWVAR 28
51036: PUSH
51037: LD_INT 21
51039: ST_TO_ADDR
// hc_gallery :=  ;
51040: LD_ADDR_OWVAR 33
51044: PUSH
51045: LD_STRING 
51047: ST_TO_ADDR
// animal := CreateHuman ;
51048: LD_ADDR_VAR 0 12
51052: PUSH
51053: CALL_OW 44
51057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51058: LD_VAR 0 12
51062: PPUSH
51063: LD_VAR 0 8
51067: PPUSH
51068: LD_INT 0
51070: PPUSH
51071: CALL 53136 0 3
// end ;
51075: GO 51029
51077: POP
51078: POP
// if birds then
51079: LD_VAR 0 1
51083: IFFALSE 51150
// for i = 1 to birds do
51085: LD_ADDR_VAR 0 11
51089: PUSH
51090: DOUBLE
51091: LD_INT 1
51093: DEC
51094: ST_TO_ADDR
51095: LD_VAR 0 1
51099: PUSH
51100: FOR_TO
51101: IFFALSE 51148
// begin hc_class := 18 ;
51103: LD_ADDR_OWVAR 28
51107: PUSH
51108: LD_INT 18
51110: ST_TO_ADDR
// hc_gallery =  ;
51111: LD_ADDR_OWVAR 33
51115: PUSH
51116: LD_STRING 
51118: ST_TO_ADDR
// animal := CreateHuman ;
51119: LD_ADDR_VAR 0 12
51123: PUSH
51124: CALL_OW 44
51128: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51129: LD_VAR 0 12
51133: PPUSH
51134: LD_VAR 0 8
51138: PPUSH
51139: LD_INT 0
51141: PPUSH
51142: CALL 53136 0 3
// end ;
51146: GO 51100
51148: POP
51149: POP
// if tigers then
51150: LD_VAR 0 2
51154: IFFALSE 51238
// for i = 1 to tigers do
51156: LD_ADDR_VAR 0 11
51160: PUSH
51161: DOUBLE
51162: LD_INT 1
51164: DEC
51165: ST_TO_ADDR
51166: LD_VAR 0 2
51170: PUSH
51171: FOR_TO
51172: IFFALSE 51236
// begin hc_class = class_tiger ;
51174: LD_ADDR_OWVAR 28
51178: PUSH
51179: LD_INT 14
51181: ST_TO_ADDR
// hc_gallery =  ;
51182: LD_ADDR_OWVAR 33
51186: PUSH
51187: LD_STRING 
51189: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51190: LD_ADDR_OWVAR 35
51194: PUSH
51195: LD_INT 7
51197: NEG
51198: PPUSH
51199: LD_INT 7
51201: PPUSH
51202: CALL_OW 12
51206: ST_TO_ADDR
// animal := CreateHuman ;
51207: LD_ADDR_VAR 0 12
51211: PUSH
51212: CALL_OW 44
51216: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51217: LD_VAR 0 12
51221: PPUSH
51222: LD_VAR 0 8
51226: PPUSH
51227: LD_INT 0
51229: PPUSH
51230: CALL 53136 0 3
// end ;
51234: GO 51171
51236: POP
51237: POP
// if apemans then
51238: LD_VAR 0 3
51242: IFFALSE 51365
// for i = 1 to apemans do
51244: LD_ADDR_VAR 0 11
51248: PUSH
51249: DOUBLE
51250: LD_INT 1
51252: DEC
51253: ST_TO_ADDR
51254: LD_VAR 0 3
51258: PUSH
51259: FOR_TO
51260: IFFALSE 51363
// begin hc_class = class_apeman ;
51262: LD_ADDR_OWVAR 28
51266: PUSH
51267: LD_INT 12
51269: ST_TO_ADDR
// hc_gallery =  ;
51270: LD_ADDR_OWVAR 33
51274: PUSH
51275: LD_STRING 
51277: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51278: LD_ADDR_OWVAR 35
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PPUSH
51287: LD_INT 2
51289: PPUSH
51290: CALL_OW 12
51294: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51295: LD_ADDR_OWVAR 31
51299: PUSH
51300: LD_INT 1
51302: PPUSH
51303: LD_INT 3
51305: PPUSH
51306: CALL_OW 12
51310: PUSH
51311: LD_INT 1
51313: PPUSH
51314: LD_INT 3
51316: PPUSH
51317: CALL_OW 12
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: ST_TO_ADDR
// animal := CreateHuman ;
51334: LD_ADDR_VAR 0 12
51338: PUSH
51339: CALL_OW 44
51343: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51344: LD_VAR 0 12
51348: PPUSH
51349: LD_VAR 0 8
51353: PPUSH
51354: LD_INT 0
51356: PPUSH
51357: CALL 53136 0 3
// end ;
51361: GO 51259
51363: POP
51364: POP
// if enchidnas then
51365: LD_VAR 0 4
51369: IFFALSE 51436
// for i = 1 to enchidnas do
51371: LD_ADDR_VAR 0 11
51375: PUSH
51376: DOUBLE
51377: LD_INT 1
51379: DEC
51380: ST_TO_ADDR
51381: LD_VAR 0 4
51385: PUSH
51386: FOR_TO
51387: IFFALSE 51434
// begin hc_class = 13 ;
51389: LD_ADDR_OWVAR 28
51393: PUSH
51394: LD_INT 13
51396: ST_TO_ADDR
// hc_gallery =  ;
51397: LD_ADDR_OWVAR 33
51401: PUSH
51402: LD_STRING 
51404: ST_TO_ADDR
// animal := CreateHuman ;
51405: LD_ADDR_VAR 0 12
51409: PUSH
51410: CALL_OW 44
51414: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51415: LD_VAR 0 12
51419: PPUSH
51420: LD_VAR 0 8
51424: PPUSH
51425: LD_INT 0
51427: PPUSH
51428: CALL 53136 0 3
// end ;
51432: GO 51386
51434: POP
51435: POP
// if fishes then
51436: LD_VAR 0 7
51440: IFFALSE 51507
// for i = 1 to fishes do
51442: LD_ADDR_VAR 0 11
51446: PUSH
51447: DOUBLE
51448: LD_INT 1
51450: DEC
51451: ST_TO_ADDR
51452: LD_VAR 0 7
51456: PUSH
51457: FOR_TO
51458: IFFALSE 51505
// begin hc_class = 20 ;
51460: LD_ADDR_OWVAR 28
51464: PUSH
51465: LD_INT 20
51467: ST_TO_ADDR
// hc_gallery =  ;
51468: LD_ADDR_OWVAR 33
51472: PUSH
51473: LD_STRING 
51475: ST_TO_ADDR
// animal := CreateHuman ;
51476: LD_ADDR_VAR 0 12
51480: PUSH
51481: CALL_OW 44
51485: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51486: LD_VAR 0 12
51490: PPUSH
51491: LD_VAR 0 9
51495: PPUSH
51496: LD_INT 0
51498: PPUSH
51499: CALL 53136 0 3
// end ;
51503: GO 51457
51505: POP
51506: POP
// end ;
51507: LD_VAR 0 10
51511: RET
// export function WantHeal ( sci , unit ) ; begin
51512: LD_INT 0
51514: PPUSH
// if GetTaskList ( sci ) > 0 then
51515: LD_VAR 0 1
51519: PPUSH
51520: CALL_OW 437
51524: PUSH
51525: LD_INT 0
51527: GREATER
51528: IFFALSE 51598
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51530: LD_VAR 0 1
51534: PPUSH
51535: CALL_OW 437
51539: PUSH
51540: LD_INT 1
51542: ARRAY
51543: PUSH
51544: LD_INT 1
51546: ARRAY
51547: PUSH
51548: LD_STRING l
51550: EQUAL
51551: PUSH
51552: LD_VAR 0 1
51556: PPUSH
51557: CALL_OW 437
51561: PUSH
51562: LD_INT 1
51564: ARRAY
51565: PUSH
51566: LD_INT 4
51568: ARRAY
51569: PUSH
51570: LD_VAR 0 2
51574: EQUAL
51575: AND
51576: IFFALSE 51588
// result := true else
51578: LD_ADDR_VAR 0 3
51582: PUSH
51583: LD_INT 1
51585: ST_TO_ADDR
51586: GO 51596
// result := false ;
51588: LD_ADDR_VAR 0 3
51592: PUSH
51593: LD_INT 0
51595: ST_TO_ADDR
// end else
51596: GO 51606
// result := false ;
51598: LD_ADDR_VAR 0 3
51602: PUSH
51603: LD_INT 0
51605: ST_TO_ADDR
// end ;
51606: LD_VAR 0 3
51610: RET
// export function HealTarget ( sci ) ; begin
51611: LD_INT 0
51613: PPUSH
// if not sci then
51614: LD_VAR 0 1
51618: NOT
51619: IFFALSE 51623
// exit ;
51621: GO 51688
// result := 0 ;
51623: LD_ADDR_VAR 0 2
51627: PUSH
51628: LD_INT 0
51630: ST_TO_ADDR
// if GetTaskList ( sci ) then
51631: LD_VAR 0 1
51635: PPUSH
51636: CALL_OW 437
51640: IFFALSE 51688
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51642: LD_VAR 0 1
51646: PPUSH
51647: CALL_OW 437
51651: PUSH
51652: LD_INT 1
51654: ARRAY
51655: PUSH
51656: LD_INT 1
51658: ARRAY
51659: PUSH
51660: LD_STRING l
51662: EQUAL
51663: IFFALSE 51688
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51665: LD_ADDR_VAR 0 2
51669: PUSH
51670: LD_VAR 0 1
51674: PPUSH
51675: CALL_OW 437
51679: PUSH
51680: LD_INT 1
51682: ARRAY
51683: PUSH
51684: LD_INT 4
51686: ARRAY
51687: ST_TO_ADDR
// end ;
51688: LD_VAR 0 2
51692: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51693: LD_INT 0
51695: PPUSH
51696: PPUSH
51697: PPUSH
51698: PPUSH
// if not base_units then
51699: LD_VAR 0 1
51703: NOT
51704: IFFALSE 51708
// exit ;
51706: GO 51795
// result := false ;
51708: LD_ADDR_VAR 0 2
51712: PUSH
51713: LD_INT 0
51715: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51716: LD_ADDR_VAR 0 5
51720: PUSH
51721: LD_VAR 0 1
51725: PPUSH
51726: LD_INT 21
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PPUSH
51736: CALL_OW 72
51740: ST_TO_ADDR
// if not tmp then
51741: LD_VAR 0 5
51745: NOT
51746: IFFALSE 51750
// exit ;
51748: GO 51795
// for i in tmp do
51750: LD_ADDR_VAR 0 3
51754: PUSH
51755: LD_VAR 0 5
51759: PUSH
51760: FOR_IN
51761: IFFALSE 51793
// begin result := EnemyInRange ( i , 22 ) ;
51763: LD_ADDR_VAR 0 2
51767: PUSH
51768: LD_VAR 0 3
51772: PPUSH
51773: LD_INT 22
51775: PPUSH
51776: CALL 49393 0 2
51780: ST_TO_ADDR
// if result then
51781: LD_VAR 0 2
51785: IFFALSE 51791
// exit ;
51787: POP
51788: POP
51789: GO 51795
// end ;
51791: GO 51760
51793: POP
51794: POP
// end ;
51795: LD_VAR 0 2
51799: RET
// export function FilterByTag ( units , tag ) ; begin
51800: LD_INT 0
51802: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51803: LD_ADDR_VAR 0 3
51807: PUSH
51808: LD_VAR 0 1
51812: PPUSH
51813: LD_INT 120
51815: PUSH
51816: LD_VAR 0 2
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PPUSH
51825: CALL_OW 72
51829: ST_TO_ADDR
// end ;
51830: LD_VAR 0 3
51834: RET
// export function IsDriver ( un ) ; begin
51835: LD_INT 0
51837: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51838: LD_ADDR_VAR 0 2
51842: PUSH
51843: LD_VAR 0 1
51847: PUSH
51848: LD_INT 55
51850: PUSH
51851: EMPTY
51852: LIST
51853: PPUSH
51854: CALL_OW 69
51858: IN
51859: ST_TO_ADDR
// end ;
51860: LD_VAR 0 2
51864: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51865: LD_INT 0
51867: PPUSH
51868: PPUSH
// list := [ ] ;
51869: LD_ADDR_VAR 0 5
51873: PUSH
51874: EMPTY
51875: ST_TO_ADDR
// case d of 0 :
51876: LD_VAR 0 3
51880: PUSH
51881: LD_INT 0
51883: DOUBLE
51884: EQUAL
51885: IFTRUE 51889
51887: GO 52022
51889: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51890: LD_ADDR_VAR 0 5
51894: PUSH
51895: LD_VAR 0 1
51899: PUSH
51900: LD_INT 4
51902: MINUS
51903: PUSH
51904: LD_VAR 0 2
51908: PUSH
51909: LD_INT 4
51911: MINUS
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: LIST
51920: PUSH
51921: LD_VAR 0 1
51925: PUSH
51926: LD_INT 3
51928: MINUS
51929: PUSH
51930: LD_VAR 0 2
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: LIST
51942: PUSH
51943: LD_VAR 0 1
51947: PUSH
51948: LD_INT 4
51950: PLUS
51951: PUSH
51952: LD_VAR 0 2
51956: PUSH
51957: LD_INT 4
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: LIST
51964: PUSH
51965: LD_VAR 0 1
51969: PUSH
51970: LD_INT 3
51972: PLUS
51973: PUSH
51974: LD_VAR 0 2
51978: PUSH
51979: LD_INT 3
51981: PLUS
51982: PUSH
51983: LD_INT 5
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: LIST
51990: PUSH
51991: LD_VAR 0 1
51995: PUSH
51996: LD_VAR 0 2
52000: PUSH
52001: LD_INT 4
52003: PLUS
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: ST_TO_ADDR
// end ; 1 :
52020: GO 52720
52022: LD_INT 1
52024: DOUBLE
52025: EQUAL
52026: IFTRUE 52030
52028: GO 52163
52030: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52031: LD_ADDR_VAR 0 5
52035: PUSH
52036: LD_VAR 0 1
52040: PUSH
52041: LD_VAR 0 2
52045: PUSH
52046: LD_INT 4
52048: MINUS
52049: PUSH
52050: LD_INT 3
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: LIST
52057: PUSH
52058: LD_VAR 0 1
52062: PUSH
52063: LD_INT 3
52065: MINUS
52066: PUSH
52067: LD_VAR 0 2
52071: PUSH
52072: LD_INT 3
52074: MINUS
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: LIST
52083: PUSH
52084: LD_VAR 0 1
52088: PUSH
52089: LD_INT 4
52091: MINUS
52092: PUSH
52093: LD_VAR 0 2
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: LIST
52105: PUSH
52106: LD_VAR 0 1
52110: PUSH
52111: LD_VAR 0 2
52115: PUSH
52116: LD_INT 3
52118: PLUS
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: LIST
52127: PUSH
52128: LD_VAR 0 1
52132: PUSH
52133: LD_INT 4
52135: PLUS
52136: PUSH
52137: LD_VAR 0 2
52141: PUSH
52142: LD_INT 4
52144: PLUS
52145: PUSH
52146: LD_INT 5
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: ST_TO_ADDR
// end ; 2 :
52161: GO 52720
52163: LD_INT 2
52165: DOUBLE
52166: EQUAL
52167: IFTRUE 52171
52169: GO 52300
52171: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52172: LD_ADDR_VAR 0 5
52176: PUSH
52177: LD_VAR 0 1
52181: PUSH
52182: LD_VAR 0 2
52186: PUSH
52187: LD_INT 3
52189: MINUS
52190: PUSH
52191: LD_INT 3
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: LIST
52198: PUSH
52199: LD_VAR 0 1
52203: PUSH
52204: LD_INT 4
52206: PLUS
52207: PUSH
52208: LD_VAR 0 2
52212: PUSH
52213: LD_INT 4
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: LIST
52220: PUSH
52221: LD_VAR 0 1
52225: PUSH
52226: LD_VAR 0 2
52230: PUSH
52231: LD_INT 4
52233: PLUS
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: PUSH
52243: LD_VAR 0 1
52247: PUSH
52248: LD_INT 3
52250: MINUS
52251: PUSH
52252: LD_VAR 0 2
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: PUSH
52265: LD_VAR 0 1
52269: PUSH
52270: LD_INT 4
52272: MINUS
52273: PUSH
52274: LD_VAR 0 2
52278: PUSH
52279: LD_INT 4
52281: MINUS
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: LIST
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: ST_TO_ADDR
// end ; 3 :
52298: GO 52720
52300: LD_INT 3
52302: DOUBLE
52303: EQUAL
52304: IFTRUE 52308
52306: GO 52441
52308: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52309: LD_ADDR_VAR 0 5
52313: PUSH
52314: LD_VAR 0 1
52318: PUSH
52319: LD_INT 3
52321: PLUS
52322: PUSH
52323: LD_VAR 0 2
52327: PUSH
52328: LD_INT 4
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: LIST
52335: PUSH
52336: LD_VAR 0 1
52340: PUSH
52341: LD_INT 4
52343: PLUS
52344: PUSH
52345: LD_VAR 0 2
52349: PUSH
52350: LD_INT 4
52352: PLUS
52353: PUSH
52354: LD_INT 5
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: LIST
52361: PUSH
52362: LD_VAR 0 1
52366: PUSH
52367: LD_INT 4
52369: MINUS
52370: PUSH
52371: LD_VAR 0 2
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: LIST
52383: PUSH
52384: LD_VAR 0 1
52388: PUSH
52389: LD_VAR 0 2
52393: PUSH
52394: LD_INT 4
52396: MINUS
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: PUSH
52406: LD_VAR 0 1
52410: PUSH
52411: LD_INT 3
52413: MINUS
52414: PUSH
52415: LD_VAR 0 2
52419: PUSH
52420: LD_INT 3
52422: MINUS
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: LIST
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: ST_TO_ADDR
// end ; 4 :
52439: GO 52720
52441: LD_INT 4
52443: DOUBLE
52444: EQUAL
52445: IFTRUE 52449
52447: GO 52582
52449: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52450: LD_ADDR_VAR 0 5
52454: PUSH
52455: LD_VAR 0 1
52459: PUSH
52460: LD_VAR 0 2
52464: PUSH
52465: LD_INT 4
52467: PLUS
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: LIST
52476: PUSH
52477: LD_VAR 0 1
52481: PUSH
52482: LD_INT 3
52484: PLUS
52485: PUSH
52486: LD_VAR 0 2
52490: PUSH
52491: LD_INT 3
52493: PLUS
52494: PUSH
52495: LD_INT 5
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: LIST
52502: PUSH
52503: LD_VAR 0 1
52507: PUSH
52508: LD_INT 4
52510: PLUS
52511: PUSH
52512: LD_VAR 0 2
52516: PUSH
52517: LD_INT 4
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: LIST
52524: PUSH
52525: LD_VAR 0 1
52529: PUSH
52530: LD_VAR 0 2
52534: PUSH
52535: LD_INT 3
52537: MINUS
52538: PUSH
52539: LD_INT 3
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: LIST
52546: PUSH
52547: LD_VAR 0 1
52551: PUSH
52552: LD_INT 4
52554: MINUS
52555: PUSH
52556: LD_VAR 0 2
52560: PUSH
52561: LD_INT 4
52563: MINUS
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: LIST
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: ST_TO_ADDR
// end ; 5 :
52580: GO 52720
52582: LD_INT 5
52584: DOUBLE
52585: EQUAL
52586: IFTRUE 52590
52588: GO 52719
52590: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52591: LD_ADDR_VAR 0 5
52595: PUSH
52596: LD_VAR 0 1
52600: PUSH
52601: LD_INT 4
52603: MINUS
52604: PUSH
52605: LD_VAR 0 2
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: LIST
52617: PUSH
52618: LD_VAR 0 1
52622: PUSH
52623: LD_VAR 0 2
52627: PUSH
52628: LD_INT 4
52630: MINUS
52631: PUSH
52632: LD_INT 3
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: LIST
52639: PUSH
52640: LD_VAR 0 1
52644: PUSH
52645: LD_INT 4
52647: PLUS
52648: PUSH
52649: LD_VAR 0 2
52653: PUSH
52654: LD_INT 4
52656: PLUS
52657: PUSH
52658: LD_INT 5
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: PUSH
52666: LD_VAR 0 1
52670: PUSH
52671: LD_INT 3
52673: PLUS
52674: PUSH
52675: LD_VAR 0 2
52679: PUSH
52680: LD_INT 4
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: LIST
52687: PUSH
52688: LD_VAR 0 1
52692: PUSH
52693: LD_VAR 0 2
52697: PUSH
52698: LD_INT 3
52700: PLUS
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: LIST
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: ST_TO_ADDR
// end ; end ;
52717: GO 52720
52719: POP
// result := list ;
52720: LD_ADDR_VAR 0 4
52724: PUSH
52725: LD_VAR 0 5
52729: ST_TO_ADDR
// end ;
52730: LD_VAR 0 4
52734: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52735: LD_INT 0
52737: PPUSH
52738: PPUSH
52739: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52740: LD_VAR 0 1
52744: NOT
52745: PUSH
52746: LD_VAR 0 2
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: LD_INT 3
52759: PUSH
52760: LD_INT 4
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: IN
52769: NOT
52770: OR
52771: IFFALSE 52775
// exit ;
52773: GO 52858
// tmp := [ ] ;
52775: LD_ADDR_VAR 0 5
52779: PUSH
52780: EMPTY
52781: ST_TO_ADDR
// for i in units do
52782: LD_ADDR_VAR 0 4
52786: PUSH
52787: LD_VAR 0 1
52791: PUSH
52792: FOR_IN
52793: IFFALSE 52827
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52795: LD_ADDR_VAR 0 5
52799: PUSH
52800: LD_VAR 0 5
52804: PPUSH
52805: LD_VAR 0 4
52809: PPUSH
52810: LD_VAR 0 2
52814: PPUSH
52815: CALL_OW 259
52819: PPUSH
52820: CALL 54231 0 2
52824: ST_TO_ADDR
52825: GO 52792
52827: POP
52828: POP
// if not tmp then
52829: LD_VAR 0 5
52833: NOT
52834: IFFALSE 52838
// exit ;
52836: GO 52858
// result := SortListByListDesc ( units , tmp ) ;
52838: LD_ADDR_VAR 0 3
52842: PUSH
52843: LD_VAR 0 1
52847: PPUSH
52848: LD_VAR 0 5
52852: PPUSH
52853: CALL_OW 77
52857: ST_TO_ADDR
// end ;
52858: LD_VAR 0 3
52862: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52863: LD_INT 0
52865: PPUSH
52866: PPUSH
52867: PPUSH
// result := false ;
52868: LD_ADDR_VAR 0 3
52872: PUSH
52873: LD_INT 0
52875: ST_TO_ADDR
// if not building then
52876: LD_VAR 0 2
52880: NOT
52881: IFFALSE 52885
// exit ;
52883: GO 53023
// x := GetX ( building ) ;
52885: LD_ADDR_VAR 0 4
52889: PUSH
52890: LD_VAR 0 2
52894: PPUSH
52895: CALL_OW 250
52899: ST_TO_ADDR
// y := GetY ( building ) ;
52900: LD_ADDR_VAR 0 5
52904: PUSH
52905: LD_VAR 0 2
52909: PPUSH
52910: CALL_OW 251
52914: ST_TO_ADDR
// if not x or not y then
52915: LD_VAR 0 4
52919: NOT
52920: PUSH
52921: LD_VAR 0 5
52925: NOT
52926: OR
52927: IFFALSE 52931
// exit ;
52929: GO 53023
// if GetTaskList ( unit ) then
52931: LD_VAR 0 1
52935: PPUSH
52936: CALL_OW 437
52940: IFFALSE 53023
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52942: LD_STRING e
52944: PUSH
52945: LD_VAR 0 1
52949: PPUSH
52950: CALL_OW 437
52954: PUSH
52955: LD_INT 1
52957: ARRAY
52958: PUSH
52959: LD_INT 1
52961: ARRAY
52962: EQUAL
52963: PUSH
52964: LD_VAR 0 4
52968: PUSH
52969: LD_VAR 0 1
52973: PPUSH
52974: CALL_OW 437
52978: PUSH
52979: LD_INT 1
52981: ARRAY
52982: PUSH
52983: LD_INT 2
52985: ARRAY
52986: EQUAL
52987: AND
52988: PUSH
52989: LD_VAR 0 5
52993: PUSH
52994: LD_VAR 0 1
52998: PPUSH
52999: CALL_OW 437
53003: PUSH
53004: LD_INT 1
53006: ARRAY
53007: PUSH
53008: LD_INT 3
53010: ARRAY
53011: EQUAL
53012: AND
53013: IFFALSE 53023
// result := true end ;
53015: LD_ADDR_VAR 0 3
53019: PUSH
53020: LD_INT 1
53022: ST_TO_ADDR
// end ;
53023: LD_VAR 0 3
53027: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53028: LD_INT 0
53030: PPUSH
// result := false ;
53031: LD_ADDR_VAR 0 4
53035: PUSH
53036: LD_INT 0
53038: ST_TO_ADDR
// if GetTaskList ( unit ) then
53039: LD_VAR 0 1
53043: PPUSH
53044: CALL_OW 437
53048: IFFALSE 53131
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53050: LD_STRING M
53052: PUSH
53053: LD_VAR 0 1
53057: PPUSH
53058: CALL_OW 437
53062: PUSH
53063: LD_INT 1
53065: ARRAY
53066: PUSH
53067: LD_INT 1
53069: ARRAY
53070: EQUAL
53071: PUSH
53072: LD_VAR 0 2
53076: PUSH
53077: LD_VAR 0 1
53081: PPUSH
53082: CALL_OW 437
53086: PUSH
53087: LD_INT 1
53089: ARRAY
53090: PUSH
53091: LD_INT 2
53093: ARRAY
53094: EQUAL
53095: AND
53096: PUSH
53097: LD_VAR 0 3
53101: PUSH
53102: LD_VAR 0 1
53106: PPUSH
53107: CALL_OW 437
53111: PUSH
53112: LD_INT 1
53114: ARRAY
53115: PUSH
53116: LD_INT 3
53118: ARRAY
53119: EQUAL
53120: AND
53121: IFFALSE 53131
// result := true ;
53123: LD_ADDR_VAR 0 4
53127: PUSH
53128: LD_INT 1
53130: ST_TO_ADDR
// end ; end ;
53131: LD_VAR 0 4
53135: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53136: LD_INT 0
53138: PPUSH
53139: PPUSH
53140: PPUSH
53141: PPUSH
// if not unit or not area then
53142: LD_VAR 0 1
53146: NOT
53147: PUSH
53148: LD_VAR 0 2
53152: NOT
53153: OR
53154: IFFALSE 53158
// exit ;
53156: GO 53334
// tmp := AreaToList ( area , i ) ;
53158: LD_ADDR_VAR 0 6
53162: PUSH
53163: LD_VAR 0 2
53167: PPUSH
53168: LD_VAR 0 5
53172: PPUSH
53173: CALL_OW 517
53177: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53178: LD_ADDR_VAR 0 5
53182: PUSH
53183: DOUBLE
53184: LD_INT 1
53186: DEC
53187: ST_TO_ADDR
53188: LD_VAR 0 6
53192: PUSH
53193: LD_INT 1
53195: ARRAY
53196: PUSH
53197: FOR_TO
53198: IFFALSE 53332
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53200: LD_ADDR_VAR 0 7
53204: PUSH
53205: LD_VAR 0 6
53209: PUSH
53210: LD_INT 1
53212: ARRAY
53213: PUSH
53214: LD_VAR 0 5
53218: ARRAY
53219: PUSH
53220: LD_VAR 0 6
53224: PUSH
53225: LD_INT 2
53227: ARRAY
53228: PUSH
53229: LD_VAR 0 5
53233: ARRAY
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53239: LD_INT 92
53241: PUSH
53242: LD_VAR 0 7
53246: PUSH
53247: LD_INT 1
53249: ARRAY
53250: PUSH
53251: LD_VAR 0 7
53255: PUSH
53256: LD_INT 2
53258: ARRAY
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: PPUSH
53269: CALL_OW 69
53273: PUSH
53274: LD_INT 0
53276: EQUAL
53277: IFFALSE 53330
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53279: LD_VAR 0 1
53283: PPUSH
53284: LD_VAR 0 7
53288: PUSH
53289: LD_INT 1
53291: ARRAY
53292: PPUSH
53293: LD_VAR 0 7
53297: PUSH
53298: LD_INT 2
53300: ARRAY
53301: PPUSH
53302: LD_VAR 0 3
53306: PPUSH
53307: CALL_OW 48
// result := IsPlaced ( unit ) ;
53311: LD_ADDR_VAR 0 4
53315: PUSH
53316: LD_VAR 0 1
53320: PPUSH
53321: CALL_OW 305
53325: ST_TO_ADDR
// exit ;
53326: POP
53327: POP
53328: GO 53334
// end ; end ;
53330: GO 53197
53332: POP
53333: POP
// end ;
53334: LD_VAR 0 4
53338: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53339: LD_INT 0
53341: PPUSH
53342: PPUSH
53343: PPUSH
// if not side or side > 8 then
53344: LD_VAR 0 1
53348: NOT
53349: PUSH
53350: LD_VAR 0 1
53354: PUSH
53355: LD_INT 8
53357: GREATER
53358: OR
53359: IFFALSE 53363
// exit ;
53361: GO 53550
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53363: LD_ADDR_VAR 0 4
53367: PUSH
53368: LD_INT 22
53370: PUSH
53371: LD_VAR 0 1
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 21
53382: PUSH
53383: LD_INT 3
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PPUSH
53394: CALL_OW 69
53398: ST_TO_ADDR
// if not tmp then
53399: LD_VAR 0 4
53403: NOT
53404: IFFALSE 53408
// exit ;
53406: GO 53550
// enable_addtolog := true ;
53408: LD_ADDR_OWVAR 81
53412: PUSH
53413: LD_INT 1
53415: ST_TO_ADDR
// AddToLog ( [ ) ;
53416: LD_STRING [
53418: PPUSH
53419: CALL_OW 561
// for i in tmp do
53423: LD_ADDR_VAR 0 3
53427: PUSH
53428: LD_VAR 0 4
53432: PUSH
53433: FOR_IN
53434: IFFALSE 53541
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53436: LD_STRING [
53438: PUSH
53439: LD_VAR 0 3
53443: PPUSH
53444: CALL_OW 266
53448: STR
53449: PUSH
53450: LD_STRING , 
53452: STR
53453: PUSH
53454: LD_VAR 0 3
53458: PPUSH
53459: CALL_OW 250
53463: STR
53464: PUSH
53465: LD_STRING , 
53467: STR
53468: PUSH
53469: LD_VAR 0 3
53473: PPUSH
53474: CALL_OW 251
53478: STR
53479: PUSH
53480: LD_STRING , 
53482: STR
53483: PUSH
53484: LD_VAR 0 3
53488: PPUSH
53489: CALL_OW 254
53493: STR
53494: PUSH
53495: LD_STRING , 
53497: STR
53498: PUSH
53499: LD_VAR 0 3
53503: PPUSH
53504: LD_INT 1
53506: PPUSH
53507: CALL_OW 268
53511: STR
53512: PUSH
53513: LD_STRING , 
53515: STR
53516: PUSH
53517: LD_VAR 0 3
53521: PPUSH
53522: LD_INT 2
53524: PPUSH
53525: CALL_OW 268
53529: STR
53530: PUSH
53531: LD_STRING ],
53533: STR
53534: PPUSH
53535: CALL_OW 561
// end ;
53539: GO 53433
53541: POP
53542: POP
// AddToLog ( ]; ) ;
53543: LD_STRING ];
53545: PPUSH
53546: CALL_OW 561
// end ;
53550: LD_VAR 0 2
53554: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53555: LD_INT 0
53557: PPUSH
53558: PPUSH
53559: PPUSH
53560: PPUSH
53561: PPUSH
// if not area or not rate or not max then
53562: LD_VAR 0 1
53566: NOT
53567: PUSH
53568: LD_VAR 0 2
53572: NOT
53573: OR
53574: PUSH
53575: LD_VAR 0 4
53579: NOT
53580: OR
53581: IFFALSE 53585
// exit ;
53583: GO 53774
// while 1 do
53585: LD_INT 1
53587: IFFALSE 53774
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53589: LD_ADDR_VAR 0 9
53593: PUSH
53594: LD_VAR 0 1
53598: PPUSH
53599: LD_INT 1
53601: PPUSH
53602: CALL_OW 287
53606: PUSH
53607: LD_INT 10
53609: MUL
53610: ST_TO_ADDR
// r := rate / 10 ;
53611: LD_ADDR_VAR 0 7
53615: PUSH
53616: LD_VAR 0 2
53620: PUSH
53621: LD_INT 10
53623: DIVREAL
53624: ST_TO_ADDR
// time := 1 1$00 ;
53625: LD_ADDR_VAR 0 8
53629: PUSH
53630: LD_INT 2100
53632: ST_TO_ADDR
// if amount < min then
53633: LD_VAR 0 9
53637: PUSH
53638: LD_VAR 0 3
53642: LESS
53643: IFFALSE 53661
// r := r * 2 else
53645: LD_ADDR_VAR 0 7
53649: PUSH
53650: LD_VAR 0 7
53654: PUSH
53655: LD_INT 2
53657: MUL
53658: ST_TO_ADDR
53659: GO 53687
// if amount > max then
53661: LD_VAR 0 9
53665: PUSH
53666: LD_VAR 0 4
53670: GREATER
53671: IFFALSE 53687
// r := r / 2 ;
53673: LD_ADDR_VAR 0 7
53677: PUSH
53678: LD_VAR 0 7
53682: PUSH
53683: LD_INT 2
53685: DIVREAL
53686: ST_TO_ADDR
// time := time / r ;
53687: LD_ADDR_VAR 0 8
53691: PUSH
53692: LD_VAR 0 8
53696: PUSH
53697: LD_VAR 0 7
53701: DIVREAL
53702: ST_TO_ADDR
// if time < 0 then
53703: LD_VAR 0 8
53707: PUSH
53708: LD_INT 0
53710: LESS
53711: IFFALSE 53728
// time := time * - 1 ;
53713: LD_ADDR_VAR 0 8
53717: PUSH
53718: LD_VAR 0 8
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: MUL
53727: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53728: LD_VAR 0 8
53732: PUSH
53733: LD_INT 35
53735: PPUSH
53736: LD_INT 875
53738: PPUSH
53739: CALL_OW 12
53743: PLUS
53744: PPUSH
53745: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53749: LD_INT 1
53751: PPUSH
53752: LD_INT 5
53754: PPUSH
53755: CALL_OW 12
53759: PPUSH
53760: LD_VAR 0 1
53764: PPUSH
53765: LD_INT 1
53767: PPUSH
53768: CALL_OW 55
// end ;
53772: GO 53585
// end ;
53774: LD_VAR 0 5
53778: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53779: LD_INT 0
53781: PPUSH
53782: PPUSH
53783: PPUSH
53784: PPUSH
53785: PPUSH
53786: PPUSH
53787: PPUSH
53788: PPUSH
// if not turrets or not factories then
53789: LD_VAR 0 1
53793: NOT
53794: PUSH
53795: LD_VAR 0 2
53799: NOT
53800: OR
53801: IFFALSE 53805
// exit ;
53803: GO 54112
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53805: LD_ADDR_VAR 0 10
53809: PUSH
53810: LD_INT 5
53812: PUSH
53813: LD_INT 6
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 2
53822: PUSH
53823: LD_INT 4
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: PUSH
53833: LD_INT 5
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 24
53847: PUSH
53848: LD_INT 25
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 23
53857: PUSH
53858: LD_INT 27
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 42
53871: PUSH
53872: LD_INT 43
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 44
53881: PUSH
53882: LD_INT 46
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 45
53891: PUSH
53892: LD_INT 47
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: LIST
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: LIST
53908: ST_TO_ADDR
// result := [ ] ;
53909: LD_ADDR_VAR 0 3
53913: PUSH
53914: EMPTY
53915: ST_TO_ADDR
// for i in turrets do
53916: LD_ADDR_VAR 0 4
53920: PUSH
53921: LD_VAR 0 1
53925: PUSH
53926: FOR_IN
53927: IFFALSE 54110
// begin nat := GetNation ( i ) ;
53929: LD_ADDR_VAR 0 7
53933: PUSH
53934: LD_VAR 0 4
53938: PPUSH
53939: CALL_OW 248
53943: ST_TO_ADDR
// weapon := 0 ;
53944: LD_ADDR_VAR 0 8
53948: PUSH
53949: LD_INT 0
53951: ST_TO_ADDR
// if not nat then
53952: LD_VAR 0 7
53956: NOT
53957: IFFALSE 53961
// continue ;
53959: GO 53926
// for j in list [ nat ] do
53961: LD_ADDR_VAR 0 5
53965: PUSH
53966: LD_VAR 0 10
53970: PUSH
53971: LD_VAR 0 7
53975: ARRAY
53976: PUSH
53977: FOR_IN
53978: IFFALSE 54019
// if GetBWeapon ( i ) = j [ 1 ] then
53980: LD_VAR 0 4
53984: PPUSH
53985: CALL_OW 269
53989: PUSH
53990: LD_VAR 0 5
53994: PUSH
53995: LD_INT 1
53997: ARRAY
53998: EQUAL
53999: IFFALSE 54017
// begin weapon := j [ 2 ] ;
54001: LD_ADDR_VAR 0 8
54005: PUSH
54006: LD_VAR 0 5
54010: PUSH
54011: LD_INT 2
54013: ARRAY
54014: ST_TO_ADDR
// break ;
54015: GO 54019
// end ;
54017: GO 53977
54019: POP
54020: POP
// if not weapon then
54021: LD_VAR 0 8
54025: NOT
54026: IFFALSE 54030
// continue ;
54028: GO 53926
// for k in factories do
54030: LD_ADDR_VAR 0 6
54034: PUSH
54035: LD_VAR 0 2
54039: PUSH
54040: FOR_IN
54041: IFFALSE 54106
// begin weapons := AvailableWeaponList ( k ) ;
54043: LD_ADDR_VAR 0 9
54047: PUSH
54048: LD_VAR 0 6
54052: PPUSH
54053: CALL_OW 478
54057: ST_TO_ADDR
// if not weapons then
54058: LD_VAR 0 9
54062: NOT
54063: IFFALSE 54067
// continue ;
54065: GO 54040
// if weapon in weapons then
54067: LD_VAR 0 8
54071: PUSH
54072: LD_VAR 0 9
54076: IN
54077: IFFALSE 54104
// begin result := [ i , weapon ] ;
54079: LD_ADDR_VAR 0 3
54083: PUSH
54084: LD_VAR 0 4
54088: PUSH
54089: LD_VAR 0 8
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: ST_TO_ADDR
// exit ;
54098: POP
54099: POP
54100: POP
54101: POP
54102: GO 54112
// end ; end ;
54104: GO 54040
54106: POP
54107: POP
// end ;
54108: GO 53926
54110: POP
54111: POP
// end ;
54112: LD_VAR 0 3
54116: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54117: LD_INT 0
54119: PPUSH
// if not side or side > 8 then
54120: LD_VAR 0 3
54124: NOT
54125: PUSH
54126: LD_VAR 0 3
54130: PUSH
54131: LD_INT 8
54133: GREATER
54134: OR
54135: IFFALSE 54139
// exit ;
54137: GO 54198
// if not range then
54139: LD_VAR 0 4
54143: NOT
54144: IFFALSE 54155
// range := - 12 ;
54146: LD_ADDR_VAR 0 4
54150: PUSH
54151: LD_INT 12
54153: NEG
54154: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54155: LD_VAR 0 1
54159: PPUSH
54160: LD_VAR 0 2
54164: PPUSH
54165: LD_VAR 0 3
54169: PPUSH
54170: LD_VAR 0 4
54174: PPUSH
54175: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54179: LD_VAR 0 1
54183: PPUSH
54184: LD_VAR 0 2
54188: PPUSH
54189: LD_VAR 0 3
54193: PPUSH
54194: CALL_OW 331
// end ;
54198: LD_VAR 0 5
54202: RET
// export function Video ( mode ) ; begin
54203: LD_INT 0
54205: PPUSH
// ingame_video = mode ;
54206: LD_ADDR_OWVAR 52
54210: PUSH
54211: LD_VAR 0 1
54215: ST_TO_ADDR
// interface_hidden = mode ;
54216: LD_ADDR_OWVAR 54
54220: PUSH
54221: LD_VAR 0 1
54225: ST_TO_ADDR
// end ;
54226: LD_VAR 0 2
54230: RET
// export function Join ( array , element ) ; begin
54231: LD_INT 0
54233: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54234: LD_ADDR_VAR 0 3
54238: PUSH
54239: LD_VAR 0 1
54243: PPUSH
54244: LD_VAR 0 1
54248: PUSH
54249: LD_INT 1
54251: PLUS
54252: PPUSH
54253: LD_VAR 0 2
54257: PPUSH
54258: CALL_OW 1
54262: ST_TO_ADDR
// end ;
54263: LD_VAR 0 3
54267: RET
// export function JoinUnion ( array , element ) ; begin
54268: LD_INT 0
54270: PPUSH
// result := array union element ;
54271: LD_ADDR_VAR 0 3
54275: PUSH
54276: LD_VAR 0 1
54280: PUSH
54281: LD_VAR 0 2
54285: UNION
54286: ST_TO_ADDR
// end ;
54287: LD_VAR 0 3
54291: RET
// export function GetBehemoths ( side ) ; begin
54292: LD_INT 0
54294: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54295: LD_ADDR_VAR 0 2
54299: PUSH
54300: LD_INT 22
54302: PUSH
54303: LD_VAR 0 1
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 31
54314: PUSH
54315: LD_INT 25
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PPUSH
54326: CALL_OW 69
54330: ST_TO_ADDR
// end ;
54331: LD_VAR 0 2
54335: RET
// export function Shuffle ( array ) ; var i , index ; begin
54336: LD_INT 0
54338: PPUSH
54339: PPUSH
54340: PPUSH
// result := [ ] ;
54341: LD_ADDR_VAR 0 2
54345: PUSH
54346: EMPTY
54347: ST_TO_ADDR
// if not array then
54348: LD_VAR 0 1
54352: NOT
54353: IFFALSE 54357
// exit ;
54355: GO 54456
// Randomize ;
54357: CALL_OW 10
// for i = array downto 1 do
54361: LD_ADDR_VAR 0 3
54365: PUSH
54366: DOUBLE
54367: LD_VAR 0 1
54371: INC
54372: ST_TO_ADDR
54373: LD_INT 1
54375: PUSH
54376: FOR_DOWNTO
54377: IFFALSE 54454
// begin index := rand ( 1 , array ) ;
54379: LD_ADDR_VAR 0 4
54383: PUSH
54384: LD_INT 1
54386: PPUSH
54387: LD_VAR 0 1
54391: PPUSH
54392: CALL_OW 12
54396: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54397: LD_ADDR_VAR 0 2
54401: PUSH
54402: LD_VAR 0 2
54406: PPUSH
54407: LD_VAR 0 2
54411: PUSH
54412: LD_INT 1
54414: PLUS
54415: PPUSH
54416: LD_VAR 0 1
54420: PUSH
54421: LD_VAR 0 4
54425: ARRAY
54426: PPUSH
54427: CALL_OW 2
54431: ST_TO_ADDR
// array := Delete ( array , index ) ;
54432: LD_ADDR_VAR 0 1
54436: PUSH
54437: LD_VAR 0 1
54441: PPUSH
54442: LD_VAR 0 4
54446: PPUSH
54447: CALL_OW 3
54451: ST_TO_ADDR
// end ;
54452: GO 54376
54454: POP
54455: POP
// end ;
54456: LD_VAR 0 2
54460: RET
// export function GetBaseMaterials ( base ) ; begin
54461: LD_INT 0
54463: PPUSH
// result := [ 0 , 0 , 0 ] ;
54464: LD_ADDR_VAR 0 2
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: LIST
54482: ST_TO_ADDR
// if not base then
54483: LD_VAR 0 1
54487: NOT
54488: IFFALSE 54492
// exit ;
54490: GO 54541
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54492: LD_ADDR_VAR 0 2
54496: PUSH
54497: LD_VAR 0 1
54501: PPUSH
54502: LD_INT 1
54504: PPUSH
54505: CALL_OW 275
54509: PUSH
54510: LD_VAR 0 1
54514: PPUSH
54515: LD_INT 2
54517: PPUSH
54518: CALL_OW 275
54522: PUSH
54523: LD_VAR 0 1
54527: PPUSH
54528: LD_INT 3
54530: PPUSH
54531: CALL_OW 275
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: LIST
54540: ST_TO_ADDR
// end ;
54541: LD_VAR 0 2
54545: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54546: LD_INT 0
54548: PPUSH
54549: PPUSH
// result := array ;
54550: LD_ADDR_VAR 0 3
54554: PUSH
54555: LD_VAR 0 1
54559: ST_TO_ADDR
// if size >= result then
54560: LD_VAR 0 2
54564: PUSH
54565: LD_VAR 0 3
54569: GREATEREQUAL
54570: IFFALSE 54574
// exit ;
54572: GO 54624
// if size then
54574: LD_VAR 0 2
54578: IFFALSE 54624
// for i := array downto size do
54580: LD_ADDR_VAR 0 4
54584: PUSH
54585: DOUBLE
54586: LD_VAR 0 1
54590: INC
54591: ST_TO_ADDR
54592: LD_VAR 0 2
54596: PUSH
54597: FOR_DOWNTO
54598: IFFALSE 54622
// result := Delete ( result , result ) ;
54600: LD_ADDR_VAR 0 3
54604: PUSH
54605: LD_VAR 0 3
54609: PPUSH
54610: LD_VAR 0 3
54614: PPUSH
54615: CALL_OW 3
54619: ST_TO_ADDR
54620: GO 54597
54622: POP
54623: POP
// end ;
54624: LD_VAR 0 3
54628: RET
// export function ComExit ( unit ) ; var tmp ; begin
54629: LD_INT 0
54631: PPUSH
54632: PPUSH
// if not IsInUnit ( unit ) then
54633: LD_VAR 0 1
54637: PPUSH
54638: CALL_OW 310
54642: NOT
54643: IFFALSE 54647
// exit ;
54645: GO 54707
// tmp := IsInUnit ( unit ) ;
54647: LD_ADDR_VAR 0 3
54651: PUSH
54652: LD_VAR 0 1
54656: PPUSH
54657: CALL_OW 310
54661: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54662: LD_VAR 0 3
54666: PPUSH
54667: CALL_OW 247
54671: PUSH
54672: LD_INT 2
54674: EQUAL
54675: IFFALSE 54688
// ComExitVehicle ( unit ) else
54677: LD_VAR 0 1
54681: PPUSH
54682: CALL_OW 121
54686: GO 54697
// ComExitBuilding ( unit ) ;
54688: LD_VAR 0 1
54692: PPUSH
54693: CALL_OW 122
// result := tmp ;
54697: LD_ADDR_VAR 0 2
54701: PUSH
54702: LD_VAR 0 3
54706: ST_TO_ADDR
// end ;
54707: LD_VAR 0 2
54711: RET
// export function ComExitAll ( units ) ; var i ; begin
54712: LD_INT 0
54714: PPUSH
54715: PPUSH
// if not units then
54716: LD_VAR 0 1
54720: NOT
54721: IFFALSE 54725
// exit ;
54723: GO 54751
// for i in units do
54725: LD_ADDR_VAR 0 3
54729: PUSH
54730: LD_VAR 0 1
54734: PUSH
54735: FOR_IN
54736: IFFALSE 54749
// ComExit ( i ) ;
54738: LD_VAR 0 3
54742: PPUSH
54743: CALL 54629 0 1
54747: GO 54735
54749: POP
54750: POP
// end ;
54751: LD_VAR 0 2
54755: RET
// export function ResetHc ; begin
54756: LD_INT 0
54758: PPUSH
// InitHc ;
54759: CALL_OW 19
// hc_importance := 0 ;
54763: LD_ADDR_OWVAR 32
54767: PUSH
54768: LD_INT 0
54770: ST_TO_ADDR
// end ;
54771: LD_VAR 0 1
54775: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54776: LD_INT 0
54778: PPUSH
54779: PPUSH
54780: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54781: LD_ADDR_VAR 0 6
54785: PUSH
54786: LD_VAR 0 1
54790: PUSH
54791: LD_VAR 0 3
54795: PLUS
54796: PUSH
54797: LD_INT 2
54799: DIV
54800: ST_TO_ADDR
// if _x < 0 then
54801: LD_VAR 0 6
54805: PUSH
54806: LD_INT 0
54808: LESS
54809: IFFALSE 54826
// _x := _x * - 1 ;
54811: LD_ADDR_VAR 0 6
54815: PUSH
54816: LD_VAR 0 6
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: MUL
54825: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54826: LD_ADDR_VAR 0 7
54830: PUSH
54831: LD_VAR 0 2
54835: PUSH
54836: LD_VAR 0 4
54840: PLUS
54841: PUSH
54842: LD_INT 2
54844: DIV
54845: ST_TO_ADDR
// if _y < 0 then
54846: LD_VAR 0 7
54850: PUSH
54851: LD_INT 0
54853: LESS
54854: IFFALSE 54871
// _y := _y * - 1 ;
54856: LD_ADDR_VAR 0 7
54860: PUSH
54861: LD_VAR 0 7
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: MUL
54870: ST_TO_ADDR
// result := [ _x , _y ] ;
54871: LD_ADDR_VAR 0 5
54875: PUSH
54876: LD_VAR 0 6
54880: PUSH
54881: LD_VAR 0 7
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: ST_TO_ADDR
// end ;
54890: LD_VAR 0 5
54894: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54895: LD_INT 0
54897: PPUSH
54898: PPUSH
54899: PPUSH
54900: PPUSH
// task := GetTaskList ( unit ) ;
54901: LD_ADDR_VAR 0 7
54905: PUSH
54906: LD_VAR 0 1
54910: PPUSH
54911: CALL_OW 437
54915: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54916: LD_VAR 0 7
54920: NOT
54921: PUSH
54922: LD_VAR 0 1
54926: PPUSH
54927: LD_VAR 0 2
54931: PPUSH
54932: CALL_OW 308
54936: NOT
54937: AND
54938: IFFALSE 54942
// exit ;
54940: GO 55060
// if IsInArea ( unit , area ) then
54942: LD_VAR 0 1
54946: PPUSH
54947: LD_VAR 0 2
54951: PPUSH
54952: CALL_OW 308
54956: IFFALSE 54974
// begin ComMoveToArea ( unit , goAway ) ;
54958: LD_VAR 0 1
54962: PPUSH
54963: LD_VAR 0 3
54967: PPUSH
54968: CALL_OW 113
// exit ;
54972: GO 55060
// end ; if task [ 1 ] [ 1 ] <> M then
54974: LD_VAR 0 7
54978: PUSH
54979: LD_INT 1
54981: ARRAY
54982: PUSH
54983: LD_INT 1
54985: ARRAY
54986: PUSH
54987: LD_STRING M
54989: NONEQUAL
54990: IFFALSE 54994
// exit ;
54992: GO 55060
// x := task [ 1 ] [ 2 ] ;
54994: LD_ADDR_VAR 0 5
54998: PUSH
54999: LD_VAR 0 7
55003: PUSH
55004: LD_INT 1
55006: ARRAY
55007: PUSH
55008: LD_INT 2
55010: ARRAY
55011: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55012: LD_ADDR_VAR 0 6
55016: PUSH
55017: LD_VAR 0 7
55021: PUSH
55022: LD_INT 1
55024: ARRAY
55025: PUSH
55026: LD_INT 3
55028: ARRAY
55029: ST_TO_ADDR
// if InArea ( x , y , area ) then
55030: LD_VAR 0 5
55034: PPUSH
55035: LD_VAR 0 6
55039: PPUSH
55040: LD_VAR 0 2
55044: PPUSH
55045: CALL_OW 309
55049: IFFALSE 55060
// ComStop ( unit ) ;
55051: LD_VAR 0 1
55055: PPUSH
55056: CALL_OW 141
// end ;
55060: LD_VAR 0 4
55064: RET
// export function Abs ( value ) ; begin
55065: LD_INT 0
55067: PPUSH
// result := value ;
55068: LD_ADDR_VAR 0 2
55072: PUSH
55073: LD_VAR 0 1
55077: ST_TO_ADDR
// if value < 0 then
55078: LD_VAR 0 1
55082: PUSH
55083: LD_INT 0
55085: LESS
55086: IFFALSE 55103
// result := value * - 1 ;
55088: LD_ADDR_VAR 0 2
55092: PUSH
55093: LD_VAR 0 1
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: MUL
55102: ST_TO_ADDR
// end ;
55103: LD_VAR 0 2
55107: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55108: LD_INT 0
55110: PPUSH
55111: PPUSH
55112: PPUSH
55113: PPUSH
55114: PPUSH
55115: PPUSH
55116: PPUSH
55117: PPUSH
// if not unit or not building then
55118: LD_VAR 0 1
55122: NOT
55123: PUSH
55124: LD_VAR 0 2
55128: NOT
55129: OR
55130: IFFALSE 55134
// exit ;
55132: GO 55360
// x := GetX ( building ) ;
55134: LD_ADDR_VAR 0 4
55138: PUSH
55139: LD_VAR 0 2
55143: PPUSH
55144: CALL_OW 250
55148: ST_TO_ADDR
// y := GetY ( building ) ;
55149: LD_ADDR_VAR 0 6
55153: PUSH
55154: LD_VAR 0 2
55158: PPUSH
55159: CALL_OW 251
55163: ST_TO_ADDR
// d := GetDir ( building ) ;
55164: LD_ADDR_VAR 0 8
55168: PUSH
55169: LD_VAR 0 2
55173: PPUSH
55174: CALL_OW 254
55178: ST_TO_ADDR
// r := 4 ;
55179: LD_ADDR_VAR 0 9
55183: PUSH
55184: LD_INT 4
55186: ST_TO_ADDR
// for i := 1 to 5 do
55187: LD_ADDR_VAR 0 10
55191: PUSH
55192: DOUBLE
55193: LD_INT 1
55195: DEC
55196: ST_TO_ADDR
55197: LD_INT 5
55199: PUSH
55200: FOR_TO
55201: IFFALSE 55358
// begin _x := ShiftX ( x , d , r + i ) ;
55203: LD_ADDR_VAR 0 5
55207: PUSH
55208: LD_VAR 0 4
55212: PPUSH
55213: LD_VAR 0 8
55217: PPUSH
55218: LD_VAR 0 9
55222: PUSH
55223: LD_VAR 0 10
55227: PLUS
55228: PPUSH
55229: CALL_OW 272
55233: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55234: LD_ADDR_VAR 0 7
55238: PUSH
55239: LD_VAR 0 6
55243: PPUSH
55244: LD_VAR 0 8
55248: PPUSH
55249: LD_VAR 0 9
55253: PUSH
55254: LD_VAR 0 10
55258: PLUS
55259: PPUSH
55260: CALL_OW 273
55264: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55265: LD_VAR 0 5
55269: PPUSH
55270: LD_VAR 0 7
55274: PPUSH
55275: CALL_OW 488
55279: PUSH
55280: LD_VAR 0 5
55284: PPUSH
55285: LD_VAR 0 7
55289: PPUSH
55290: CALL_OW 428
55294: PPUSH
55295: CALL_OW 247
55299: PUSH
55300: LD_INT 3
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: IN
55310: NOT
55311: AND
55312: IFFALSE 55356
// begin ComMoveXY ( unit , _x , _y ) ;
55314: LD_VAR 0 1
55318: PPUSH
55319: LD_VAR 0 5
55323: PPUSH
55324: LD_VAR 0 7
55328: PPUSH
55329: CALL_OW 111
// result := [ _x , _y ] ;
55333: LD_ADDR_VAR 0 3
55337: PUSH
55338: LD_VAR 0 5
55342: PUSH
55343: LD_VAR 0 7
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: ST_TO_ADDR
// exit ;
55352: POP
55353: POP
55354: GO 55360
// end ; end ;
55356: GO 55200
55358: POP
55359: POP
// end ;
55360: LD_VAR 0 3
55364: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55365: LD_INT 0
55367: PPUSH
55368: PPUSH
55369: PPUSH
// result := 0 ;
55370: LD_ADDR_VAR 0 3
55374: PUSH
55375: LD_INT 0
55377: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55378: LD_VAR 0 1
55382: PUSH
55383: LD_INT 0
55385: LESS
55386: PUSH
55387: LD_VAR 0 1
55391: PUSH
55392: LD_INT 8
55394: GREATER
55395: OR
55396: PUSH
55397: LD_VAR 0 2
55401: PUSH
55402: LD_INT 0
55404: LESS
55405: OR
55406: PUSH
55407: LD_VAR 0 2
55411: PUSH
55412: LD_INT 8
55414: GREATER
55415: OR
55416: IFFALSE 55420
// exit ;
55418: GO 55495
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55420: LD_ADDR_VAR 0 4
55424: PUSH
55425: LD_INT 22
55427: PUSH
55428: LD_VAR 0 2
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PPUSH
55437: CALL_OW 69
55441: PUSH
55442: FOR_IN
55443: IFFALSE 55493
// begin un := UnitShoot ( i ) ;
55445: LD_ADDR_VAR 0 5
55449: PUSH
55450: LD_VAR 0 4
55454: PPUSH
55455: CALL_OW 504
55459: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55460: LD_VAR 0 5
55464: PPUSH
55465: CALL_OW 255
55469: PUSH
55470: LD_VAR 0 1
55474: EQUAL
55475: IFFALSE 55491
// begin result := un ;
55477: LD_ADDR_VAR 0 3
55481: PUSH
55482: LD_VAR 0 5
55486: ST_TO_ADDR
// exit ;
55487: POP
55488: POP
55489: GO 55495
// end ; end ;
55491: GO 55442
55493: POP
55494: POP
// end ;
55495: LD_VAR 0 3
55499: RET
// export function GetCargoBay ( units ) ; begin
55500: LD_INT 0
55502: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55503: LD_ADDR_VAR 0 2
55507: PUSH
55508: LD_VAR 0 1
55512: PPUSH
55513: LD_INT 2
55515: PUSH
55516: LD_INT 34
55518: PUSH
55519: LD_INT 12
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 34
55528: PUSH
55529: LD_INT 51
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 34
55538: PUSH
55539: LD_INT 32
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 34
55548: PUSH
55549: LD_INT 89
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: PPUSH
55563: CALL_OW 72
55567: ST_TO_ADDR
// end ;
55568: LD_VAR 0 2
55572: RET
// export function Negate ( value ) ; begin
55573: LD_INT 0
55575: PPUSH
// result := not value ;
55576: LD_ADDR_VAR 0 2
55580: PUSH
55581: LD_VAR 0 1
55585: NOT
55586: ST_TO_ADDR
// end ;
55587: LD_VAR 0 2
55591: RET
// export function Inc ( value ) ; begin
55592: LD_INT 0
55594: PPUSH
// result := value + 1 ;
55595: LD_ADDR_VAR 0 2
55599: PUSH
55600: LD_VAR 0 1
55604: PUSH
55605: LD_INT 1
55607: PLUS
55608: ST_TO_ADDR
// end ;
55609: LD_VAR 0 2
55613: RET
// export function Dec ( value ) ; begin
55614: LD_INT 0
55616: PPUSH
// result := value - 1 ;
55617: LD_ADDR_VAR 0 2
55621: PUSH
55622: LD_VAR 0 1
55626: PUSH
55627: LD_INT 1
55629: MINUS
55630: ST_TO_ADDR
// end ;
55631: LD_VAR 0 2
55635: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55636: LD_INT 0
55638: PPUSH
55639: PPUSH
55640: PPUSH
55641: PPUSH
55642: PPUSH
55643: PPUSH
55644: PPUSH
55645: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55646: LD_VAR 0 1
55650: PPUSH
55651: LD_VAR 0 2
55655: PPUSH
55656: CALL_OW 488
55660: NOT
55661: PUSH
55662: LD_VAR 0 3
55666: PPUSH
55667: LD_VAR 0 4
55671: PPUSH
55672: CALL_OW 488
55676: NOT
55677: OR
55678: IFFALSE 55691
// begin result := - 1 ;
55680: LD_ADDR_VAR 0 5
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: ST_TO_ADDR
// exit ;
55689: GO 55926
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55691: LD_ADDR_VAR 0 12
55695: PUSH
55696: LD_VAR 0 1
55700: PPUSH
55701: LD_VAR 0 2
55705: PPUSH
55706: LD_VAR 0 3
55710: PPUSH
55711: LD_VAR 0 4
55715: PPUSH
55716: CALL 54776 0 4
55720: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55721: LD_ADDR_VAR 0 11
55725: PUSH
55726: LD_VAR 0 1
55730: PPUSH
55731: LD_VAR 0 2
55735: PPUSH
55736: LD_VAR 0 12
55740: PUSH
55741: LD_INT 1
55743: ARRAY
55744: PPUSH
55745: LD_VAR 0 12
55749: PUSH
55750: LD_INT 2
55752: ARRAY
55753: PPUSH
55754: CALL_OW 298
55758: ST_TO_ADDR
// distance := 9999 ;
55759: LD_ADDR_VAR 0 10
55763: PUSH
55764: LD_INT 9999
55766: ST_TO_ADDR
// for i := 0 to 5 do
55767: LD_ADDR_VAR 0 6
55771: PUSH
55772: DOUBLE
55773: LD_INT 0
55775: DEC
55776: ST_TO_ADDR
55777: LD_INT 5
55779: PUSH
55780: FOR_TO
55781: IFFALSE 55924
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55783: LD_ADDR_VAR 0 7
55787: PUSH
55788: LD_VAR 0 1
55792: PPUSH
55793: LD_VAR 0 6
55797: PPUSH
55798: LD_VAR 0 11
55802: PPUSH
55803: CALL_OW 272
55807: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55808: LD_ADDR_VAR 0 8
55812: PUSH
55813: LD_VAR 0 2
55817: PPUSH
55818: LD_VAR 0 6
55822: PPUSH
55823: LD_VAR 0 11
55827: PPUSH
55828: CALL_OW 273
55832: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55833: LD_VAR 0 7
55837: PPUSH
55838: LD_VAR 0 8
55842: PPUSH
55843: CALL_OW 488
55847: NOT
55848: IFFALSE 55852
// continue ;
55850: GO 55780
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55852: LD_ADDR_VAR 0 9
55856: PUSH
55857: LD_VAR 0 12
55861: PUSH
55862: LD_INT 1
55864: ARRAY
55865: PPUSH
55866: LD_VAR 0 12
55870: PUSH
55871: LD_INT 2
55873: ARRAY
55874: PPUSH
55875: LD_VAR 0 7
55879: PPUSH
55880: LD_VAR 0 8
55884: PPUSH
55885: CALL_OW 298
55889: ST_TO_ADDR
// if tmp < distance then
55890: LD_VAR 0 9
55894: PUSH
55895: LD_VAR 0 10
55899: LESS
55900: IFFALSE 55922
// begin result := i ;
55902: LD_ADDR_VAR 0 5
55906: PUSH
55907: LD_VAR 0 6
55911: ST_TO_ADDR
// distance := tmp ;
55912: LD_ADDR_VAR 0 10
55916: PUSH
55917: LD_VAR 0 9
55921: ST_TO_ADDR
// end ; end ;
55922: GO 55780
55924: POP
55925: POP
// end ;
55926: LD_VAR 0 5
55930: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55931: LD_INT 0
55933: PPUSH
55934: PPUSH
// if not driver or not IsInUnit ( driver ) then
55935: LD_VAR 0 1
55939: NOT
55940: PUSH
55941: LD_VAR 0 1
55945: PPUSH
55946: CALL_OW 310
55950: NOT
55951: OR
55952: IFFALSE 55956
// exit ;
55954: GO 56046
// vehicle := IsInUnit ( driver ) ;
55956: LD_ADDR_VAR 0 3
55960: PUSH
55961: LD_VAR 0 1
55965: PPUSH
55966: CALL_OW 310
55970: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55971: LD_VAR 0 1
55975: PPUSH
55976: LD_STRING \
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: PUSH
56006: LD_STRING E
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_VAR 0 3
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PPUSH
56042: CALL_OW 446
// end ;
56046: LD_VAR 0 2
56050: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56051: LD_INT 0
56053: PPUSH
56054: PPUSH
// if not driver or not IsInUnit ( driver ) then
56055: LD_VAR 0 1
56059: NOT
56060: PUSH
56061: LD_VAR 0 1
56065: PPUSH
56066: CALL_OW 310
56070: NOT
56071: OR
56072: IFFALSE 56076
// exit ;
56074: GO 56166
// vehicle := IsInUnit ( driver ) ;
56076: LD_ADDR_VAR 0 3
56080: PUSH
56081: LD_VAR 0 1
56085: PPUSH
56086: CALL_OW 310
56090: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56091: LD_VAR 0 1
56095: PPUSH
56096: LD_STRING \
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: PUSH
56126: LD_STRING E
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: LD_VAR 0 3
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PPUSH
56162: CALL_OW 447
// end ;
56166: LD_VAR 0 2
56170: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56171: LD_INT 0
56173: PPUSH
56174: PPUSH
56175: PPUSH
// tmp := [ ] ;
56176: LD_ADDR_VAR 0 5
56180: PUSH
56181: EMPTY
56182: ST_TO_ADDR
// for i in units do
56183: LD_ADDR_VAR 0 4
56187: PUSH
56188: LD_VAR 0 1
56192: PUSH
56193: FOR_IN
56194: IFFALSE 56232
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56196: LD_ADDR_VAR 0 5
56200: PUSH
56201: LD_VAR 0 5
56205: PPUSH
56206: LD_VAR 0 5
56210: PUSH
56211: LD_INT 1
56213: PLUS
56214: PPUSH
56215: LD_VAR 0 4
56219: PPUSH
56220: CALL_OW 256
56224: PPUSH
56225: CALL_OW 2
56229: ST_TO_ADDR
56230: GO 56193
56232: POP
56233: POP
// if not tmp then
56234: LD_VAR 0 5
56238: NOT
56239: IFFALSE 56243
// exit ;
56241: GO 56291
// if asc then
56243: LD_VAR 0 2
56247: IFFALSE 56271
// result := SortListByListAsc ( units , tmp ) else
56249: LD_ADDR_VAR 0 3
56253: PUSH
56254: LD_VAR 0 1
56258: PPUSH
56259: LD_VAR 0 5
56263: PPUSH
56264: CALL_OW 76
56268: ST_TO_ADDR
56269: GO 56291
// result := SortListByListDesc ( units , tmp ) ;
56271: LD_ADDR_VAR 0 3
56275: PUSH
56276: LD_VAR 0 1
56280: PPUSH
56281: LD_VAR 0 5
56285: PPUSH
56286: CALL_OW 77
56290: ST_TO_ADDR
// end ;
56291: LD_VAR 0 3
56295: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56296: LD_INT 0
56298: PPUSH
56299: PPUSH
// task := GetTaskList ( mech ) ;
56300: LD_ADDR_VAR 0 4
56304: PUSH
56305: LD_VAR 0 1
56309: PPUSH
56310: CALL_OW 437
56314: ST_TO_ADDR
// if not task then
56315: LD_VAR 0 4
56319: NOT
56320: IFFALSE 56324
// exit ;
56322: GO 56366
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56324: LD_ADDR_VAR 0 3
56328: PUSH
56329: LD_VAR 0 4
56333: PUSH
56334: LD_INT 1
56336: ARRAY
56337: PUSH
56338: LD_INT 1
56340: ARRAY
56341: PUSH
56342: LD_STRING r
56344: EQUAL
56345: PUSH
56346: LD_VAR 0 4
56350: PUSH
56351: LD_INT 1
56353: ARRAY
56354: PUSH
56355: LD_INT 4
56357: ARRAY
56358: PUSH
56359: LD_VAR 0 2
56363: EQUAL
56364: AND
56365: ST_TO_ADDR
// end ;
56366: LD_VAR 0 3
56370: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56371: LD_INT 0
56373: PPUSH
// SetDir ( unit , d ) ;
56374: LD_VAR 0 1
56378: PPUSH
56379: LD_VAR 0 4
56383: PPUSH
56384: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56388: LD_VAR 0 1
56392: PPUSH
56393: LD_VAR 0 2
56397: PPUSH
56398: LD_VAR 0 3
56402: PPUSH
56403: LD_VAR 0 5
56407: PPUSH
56408: CALL_OW 48
// end ;
56412: LD_VAR 0 6
56416: RET
// export function ToNaturalNumber ( number ) ; begin
56417: LD_INT 0
56419: PPUSH
// result := number div 1 ;
56420: LD_ADDR_VAR 0 2
56424: PUSH
56425: LD_VAR 0 1
56429: PUSH
56430: LD_INT 1
56432: DIV
56433: ST_TO_ADDR
// if number < 0 then
56434: LD_VAR 0 1
56438: PUSH
56439: LD_INT 0
56441: LESS
56442: IFFALSE 56452
// result := 0 ;
56444: LD_ADDR_VAR 0 2
56448: PUSH
56449: LD_INT 0
56451: ST_TO_ADDR
// end ;
56452: LD_VAR 0 2
56456: RET
// export function SortByClass ( units , class ) ; var un ; begin
56457: LD_INT 0
56459: PPUSH
56460: PPUSH
// if not units or not class then
56461: LD_VAR 0 1
56465: NOT
56466: PUSH
56467: LD_VAR 0 2
56471: NOT
56472: OR
56473: IFFALSE 56477
// exit ;
56475: GO 56572
// result := [ ] ;
56477: LD_ADDR_VAR 0 3
56481: PUSH
56482: EMPTY
56483: ST_TO_ADDR
// for un in units do
56484: LD_ADDR_VAR 0 4
56488: PUSH
56489: LD_VAR 0 1
56493: PUSH
56494: FOR_IN
56495: IFFALSE 56570
// if GetClass ( un ) = class then
56497: LD_VAR 0 4
56501: PPUSH
56502: CALL_OW 257
56506: PUSH
56507: LD_VAR 0 2
56511: EQUAL
56512: IFFALSE 56539
// result := Insert ( result , 1 , un ) else
56514: LD_ADDR_VAR 0 3
56518: PUSH
56519: LD_VAR 0 3
56523: PPUSH
56524: LD_INT 1
56526: PPUSH
56527: LD_VAR 0 4
56531: PPUSH
56532: CALL_OW 2
56536: ST_TO_ADDR
56537: GO 56568
// result := Replace ( result , result + 1 , un ) ;
56539: LD_ADDR_VAR 0 3
56543: PUSH
56544: LD_VAR 0 3
56548: PPUSH
56549: LD_VAR 0 3
56553: PUSH
56554: LD_INT 1
56556: PLUS
56557: PPUSH
56558: LD_VAR 0 4
56562: PPUSH
56563: CALL_OW 1
56567: ST_TO_ADDR
56568: GO 56494
56570: POP
56571: POP
// end ;
56572: LD_VAR 0 3
56576: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56577: LD_INT 0
56579: PPUSH
56580: PPUSH
56581: PPUSH
56582: PPUSH
56583: PPUSH
56584: PPUSH
56585: PPUSH
// result := [ ] ;
56586: LD_ADDR_VAR 0 4
56590: PUSH
56591: EMPTY
56592: ST_TO_ADDR
// if x - r < 0 then
56593: LD_VAR 0 1
56597: PUSH
56598: LD_VAR 0 3
56602: MINUS
56603: PUSH
56604: LD_INT 0
56606: LESS
56607: IFFALSE 56619
// min_x := 0 else
56609: LD_ADDR_VAR 0 8
56613: PUSH
56614: LD_INT 0
56616: ST_TO_ADDR
56617: GO 56635
// min_x := x - r ;
56619: LD_ADDR_VAR 0 8
56623: PUSH
56624: LD_VAR 0 1
56628: PUSH
56629: LD_VAR 0 3
56633: MINUS
56634: ST_TO_ADDR
// if y - r < 0 then
56635: LD_VAR 0 2
56639: PUSH
56640: LD_VAR 0 3
56644: MINUS
56645: PUSH
56646: LD_INT 0
56648: LESS
56649: IFFALSE 56661
// min_y := 0 else
56651: LD_ADDR_VAR 0 7
56655: PUSH
56656: LD_INT 0
56658: ST_TO_ADDR
56659: GO 56677
// min_y := y - r ;
56661: LD_ADDR_VAR 0 7
56665: PUSH
56666: LD_VAR 0 2
56670: PUSH
56671: LD_VAR 0 3
56675: MINUS
56676: ST_TO_ADDR
// max_x := x + r ;
56677: LD_ADDR_VAR 0 9
56681: PUSH
56682: LD_VAR 0 1
56686: PUSH
56687: LD_VAR 0 3
56691: PLUS
56692: ST_TO_ADDR
// max_y := y + r ;
56693: LD_ADDR_VAR 0 10
56697: PUSH
56698: LD_VAR 0 2
56702: PUSH
56703: LD_VAR 0 3
56707: PLUS
56708: ST_TO_ADDR
// for _x = min_x to max_x do
56709: LD_ADDR_VAR 0 5
56713: PUSH
56714: DOUBLE
56715: LD_VAR 0 8
56719: DEC
56720: ST_TO_ADDR
56721: LD_VAR 0 9
56725: PUSH
56726: FOR_TO
56727: IFFALSE 56828
// for _y = min_y to max_y do
56729: LD_ADDR_VAR 0 6
56733: PUSH
56734: DOUBLE
56735: LD_VAR 0 7
56739: DEC
56740: ST_TO_ADDR
56741: LD_VAR 0 10
56745: PUSH
56746: FOR_TO
56747: IFFALSE 56824
// begin if not ValidHex ( _x , _y ) then
56749: LD_VAR 0 5
56753: PPUSH
56754: LD_VAR 0 6
56758: PPUSH
56759: CALL_OW 488
56763: NOT
56764: IFFALSE 56768
// continue ;
56766: GO 56746
// if GetResourceTypeXY ( _x , _y ) then
56768: LD_VAR 0 5
56772: PPUSH
56773: LD_VAR 0 6
56777: PPUSH
56778: CALL_OW 283
56782: IFFALSE 56822
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56784: LD_ADDR_VAR 0 4
56788: PUSH
56789: LD_VAR 0 4
56793: PPUSH
56794: LD_VAR 0 4
56798: PUSH
56799: LD_INT 1
56801: PLUS
56802: PPUSH
56803: LD_VAR 0 5
56807: PUSH
56808: LD_VAR 0 6
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PPUSH
56817: CALL_OW 1
56821: ST_TO_ADDR
// end ;
56822: GO 56746
56824: POP
56825: POP
56826: GO 56726
56828: POP
56829: POP
// end ;
56830: LD_VAR 0 4
56834: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56835: LD_INT 0
56837: PPUSH
56838: PPUSH
56839: PPUSH
56840: PPUSH
56841: PPUSH
56842: PPUSH
56843: PPUSH
56844: PPUSH
// if not units then
56845: LD_VAR 0 1
56849: NOT
56850: IFFALSE 56854
// exit ;
56852: GO 57378
// result := UnitFilter ( units , [ f_ok ] ) ;
56854: LD_ADDR_VAR 0 3
56858: PUSH
56859: LD_VAR 0 1
56863: PPUSH
56864: LD_INT 50
56866: PUSH
56867: EMPTY
56868: LIST
56869: PPUSH
56870: CALL_OW 72
56874: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56875: LD_ADDR_VAR 0 8
56879: PUSH
56880: LD_VAR 0 1
56884: PUSH
56885: LD_INT 1
56887: ARRAY
56888: PPUSH
56889: CALL_OW 255
56893: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56894: LD_ADDR_VAR 0 10
56898: PUSH
56899: LD_INT 29
56901: PUSH
56902: LD_INT 91
56904: PUSH
56905: LD_INT 49
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: LIST
56912: ST_TO_ADDR
// if not result then
56913: LD_VAR 0 3
56917: NOT
56918: IFFALSE 56922
// exit ;
56920: GO 57378
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56922: LD_ADDR_VAR 0 5
56926: PUSH
56927: LD_INT 81
56929: PUSH
56930: LD_VAR 0 8
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PPUSH
56939: CALL_OW 69
56943: ST_TO_ADDR
// for i in result do
56944: LD_ADDR_VAR 0 4
56948: PUSH
56949: LD_VAR 0 3
56953: PUSH
56954: FOR_IN
56955: IFFALSE 57376
// begin tag := GetTag ( i ) + 1 ;
56957: LD_ADDR_VAR 0 9
56961: PUSH
56962: LD_VAR 0 4
56966: PPUSH
56967: CALL_OW 110
56971: PUSH
56972: LD_INT 1
56974: PLUS
56975: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
56976: LD_ADDR_VAR 0 7
56980: PUSH
56981: LD_VAR 0 4
56985: PPUSH
56986: CALL_OW 250
56990: PPUSH
56991: LD_VAR 0 4
56995: PPUSH
56996: CALL_OW 251
57000: PPUSH
57001: LD_INT 6
57003: PPUSH
57004: CALL 56577 0 3
57008: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
57009: LD_VAR 0 4
57013: PPUSH
57014: CALL_OW 247
57018: PUSH
57019: LD_INT 2
57021: EQUAL
57022: PUSH
57023: LD_VAR 0 7
57027: AND
57028: PUSH
57029: LD_VAR 0 4
57033: PPUSH
57034: CALL_OW 264
57038: PUSH
57039: LD_VAR 0 10
57043: IN
57044: NOT
57045: AND
57046: IFFALSE 57085
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57048: LD_VAR 0 4
57052: PPUSH
57053: LD_VAR 0 7
57057: PUSH
57058: LD_INT 1
57060: ARRAY
57061: PUSH
57062: LD_INT 1
57064: ARRAY
57065: PPUSH
57066: LD_VAR 0 7
57070: PUSH
57071: LD_INT 1
57073: ARRAY
57074: PUSH
57075: LD_INT 2
57077: ARRAY
57078: PPUSH
57079: CALL_OW 116
57083: GO 57374
// if path > tag then
57085: LD_VAR 0 2
57089: PUSH
57090: LD_VAR 0 9
57094: GREATER
57095: IFFALSE 57303
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57097: LD_ADDR_VAR 0 6
57101: PUSH
57102: LD_VAR 0 5
57106: PPUSH
57107: LD_INT 91
57109: PUSH
57110: LD_VAR 0 4
57114: PUSH
57115: LD_INT 8
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: LIST
57122: PPUSH
57123: CALL_OW 72
57127: ST_TO_ADDR
// if nearEnemy then
57128: LD_VAR 0 6
57132: IFFALSE 57201
// begin if GetWeapon ( i ) = ru_time_lapser then
57134: LD_VAR 0 4
57138: PPUSH
57139: CALL_OW 264
57143: PUSH
57144: LD_INT 49
57146: EQUAL
57147: IFFALSE 57175
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57149: LD_VAR 0 4
57153: PPUSH
57154: LD_VAR 0 6
57158: PPUSH
57159: LD_VAR 0 4
57163: PPUSH
57164: CALL_OW 74
57168: PPUSH
57169: CALL_OW 112
57173: GO 57199
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57175: LD_VAR 0 4
57179: PPUSH
57180: LD_VAR 0 6
57184: PPUSH
57185: LD_VAR 0 4
57189: PPUSH
57190: CALL_OW 74
57194: PPUSH
57195: CALL 58303 0 2
// end else
57199: GO 57301
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57201: LD_VAR 0 4
57205: PPUSH
57206: LD_VAR 0 2
57210: PUSH
57211: LD_VAR 0 9
57215: ARRAY
57216: PUSH
57217: LD_INT 1
57219: ARRAY
57220: PPUSH
57221: LD_VAR 0 2
57225: PUSH
57226: LD_VAR 0 9
57230: ARRAY
57231: PUSH
57232: LD_INT 2
57234: ARRAY
57235: PPUSH
57236: CALL_OW 297
57240: PUSH
57241: LD_INT 6
57243: GREATER
57244: IFFALSE 57287
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57246: LD_VAR 0 4
57250: PPUSH
57251: LD_VAR 0 2
57255: PUSH
57256: LD_VAR 0 9
57260: ARRAY
57261: PUSH
57262: LD_INT 1
57264: ARRAY
57265: PPUSH
57266: LD_VAR 0 2
57270: PUSH
57271: LD_VAR 0 9
57275: ARRAY
57276: PUSH
57277: LD_INT 2
57279: ARRAY
57280: PPUSH
57281: CALL_OW 114
57285: GO 57301
// SetTag ( i , tag ) ;
57287: LD_VAR 0 4
57291: PPUSH
57292: LD_VAR 0 9
57296: PPUSH
57297: CALL_OW 109
// end else
57301: GO 57374
// if enemy then
57303: LD_VAR 0 5
57307: IFFALSE 57374
// begin if GetWeapon ( i ) = ru_time_lapser then
57309: LD_VAR 0 4
57313: PPUSH
57314: CALL_OW 264
57318: PUSH
57319: LD_INT 49
57321: EQUAL
57322: IFFALSE 57350
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57324: LD_VAR 0 4
57328: PPUSH
57329: LD_VAR 0 5
57333: PPUSH
57334: LD_VAR 0 4
57338: PPUSH
57339: CALL_OW 74
57343: PPUSH
57344: CALL_OW 112
57348: GO 57374
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57350: LD_VAR 0 4
57354: PPUSH
57355: LD_VAR 0 5
57359: PPUSH
57360: LD_VAR 0 4
57364: PPUSH
57365: CALL_OW 74
57369: PPUSH
57370: CALL 58303 0 2
// end ; end ;
57374: GO 56954
57376: POP
57377: POP
// end ;
57378: LD_VAR 0 3
57382: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57383: LD_INT 0
57385: PPUSH
57386: PPUSH
57387: PPUSH
// if not unit or IsInUnit ( unit ) then
57388: LD_VAR 0 1
57392: NOT
57393: PUSH
57394: LD_VAR 0 1
57398: PPUSH
57399: CALL_OW 310
57403: OR
57404: IFFALSE 57408
// exit ;
57406: GO 57499
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57408: LD_ADDR_VAR 0 4
57412: PUSH
57413: LD_VAR 0 1
57417: PPUSH
57418: CALL_OW 250
57422: PPUSH
57423: LD_VAR 0 2
57427: PPUSH
57428: LD_INT 1
57430: PPUSH
57431: CALL_OW 272
57435: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57436: LD_ADDR_VAR 0 5
57440: PUSH
57441: LD_VAR 0 1
57445: PPUSH
57446: CALL_OW 251
57450: PPUSH
57451: LD_VAR 0 2
57455: PPUSH
57456: LD_INT 1
57458: PPUSH
57459: CALL_OW 273
57463: ST_TO_ADDR
// if ValidHex ( x , y ) then
57464: LD_VAR 0 4
57468: PPUSH
57469: LD_VAR 0 5
57473: PPUSH
57474: CALL_OW 488
57478: IFFALSE 57499
// ComTurnXY ( unit , x , y ) ;
57480: LD_VAR 0 1
57484: PPUSH
57485: LD_VAR 0 4
57489: PPUSH
57490: LD_VAR 0 5
57494: PPUSH
57495: CALL_OW 118
// end ;
57499: LD_VAR 0 3
57503: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57504: LD_INT 0
57506: PPUSH
57507: PPUSH
// result := false ;
57508: LD_ADDR_VAR 0 3
57512: PUSH
57513: LD_INT 0
57515: ST_TO_ADDR
// if not units then
57516: LD_VAR 0 2
57520: NOT
57521: IFFALSE 57525
// exit ;
57523: GO 57570
// for i in units do
57525: LD_ADDR_VAR 0 4
57529: PUSH
57530: LD_VAR 0 2
57534: PUSH
57535: FOR_IN
57536: IFFALSE 57568
// if See ( side , i ) then
57538: LD_VAR 0 1
57542: PPUSH
57543: LD_VAR 0 4
57547: PPUSH
57548: CALL_OW 292
57552: IFFALSE 57566
// begin result := true ;
57554: LD_ADDR_VAR 0 3
57558: PUSH
57559: LD_INT 1
57561: ST_TO_ADDR
// exit ;
57562: POP
57563: POP
57564: GO 57570
// end ;
57566: GO 57535
57568: POP
57569: POP
// end ;
57570: LD_VAR 0 3
57574: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57575: LD_INT 0
57577: PPUSH
57578: PPUSH
57579: PPUSH
57580: PPUSH
// if not unit or not points then
57581: LD_VAR 0 1
57585: NOT
57586: PUSH
57587: LD_VAR 0 2
57591: NOT
57592: OR
57593: IFFALSE 57597
// exit ;
57595: GO 57687
// dist := 99999 ;
57597: LD_ADDR_VAR 0 5
57601: PUSH
57602: LD_INT 99999
57604: ST_TO_ADDR
// for i in points do
57605: LD_ADDR_VAR 0 4
57609: PUSH
57610: LD_VAR 0 2
57614: PUSH
57615: FOR_IN
57616: IFFALSE 57685
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57618: LD_ADDR_VAR 0 6
57622: PUSH
57623: LD_VAR 0 1
57627: PPUSH
57628: LD_VAR 0 4
57632: PUSH
57633: LD_INT 1
57635: ARRAY
57636: PPUSH
57637: LD_VAR 0 4
57641: PUSH
57642: LD_INT 2
57644: ARRAY
57645: PPUSH
57646: CALL_OW 297
57650: ST_TO_ADDR
// if tmpDist < dist then
57651: LD_VAR 0 6
57655: PUSH
57656: LD_VAR 0 5
57660: LESS
57661: IFFALSE 57683
// begin result := i ;
57663: LD_ADDR_VAR 0 3
57667: PUSH
57668: LD_VAR 0 4
57672: ST_TO_ADDR
// dist := tmpDist ;
57673: LD_ADDR_VAR 0 5
57677: PUSH
57678: LD_VAR 0 6
57682: ST_TO_ADDR
// end ; end ;
57683: GO 57615
57685: POP
57686: POP
// end ;
57687: LD_VAR 0 3
57691: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57692: LD_INT 0
57694: PPUSH
// uc_side := side ;
57695: LD_ADDR_OWVAR 20
57699: PUSH
57700: LD_VAR 0 1
57704: ST_TO_ADDR
// uc_nation := 3 ;
57705: LD_ADDR_OWVAR 21
57709: PUSH
57710: LD_INT 3
57712: ST_TO_ADDR
// vc_chassis := 25 ;
57713: LD_ADDR_OWVAR 37
57717: PUSH
57718: LD_INT 25
57720: ST_TO_ADDR
// vc_engine := engine_siberite ;
57721: LD_ADDR_OWVAR 39
57725: PUSH
57726: LD_INT 3
57728: ST_TO_ADDR
// vc_control := control_computer ;
57729: LD_ADDR_OWVAR 38
57733: PUSH
57734: LD_INT 3
57736: ST_TO_ADDR
// vc_weapon := 59 ;
57737: LD_ADDR_OWVAR 40
57741: PUSH
57742: LD_INT 59
57744: ST_TO_ADDR
// result := CreateVehicle ;
57745: LD_ADDR_VAR 0 5
57749: PUSH
57750: CALL_OW 45
57754: ST_TO_ADDR
// SetDir ( result , d ) ;
57755: LD_VAR 0 5
57759: PPUSH
57760: LD_VAR 0 4
57764: PPUSH
57765: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57769: LD_VAR 0 5
57773: PPUSH
57774: LD_VAR 0 2
57778: PPUSH
57779: LD_VAR 0 3
57783: PPUSH
57784: LD_INT 0
57786: PPUSH
57787: CALL_OW 48
// end ;
57791: LD_VAR 0 5
57795: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57796: LD_INT 0
57798: PPUSH
57799: PPUSH
57800: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57801: LD_ADDR_VAR 0 2
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57824: LD_VAR 0 1
57828: NOT
57829: PUSH
57830: LD_VAR 0 1
57834: PPUSH
57835: CALL_OW 264
57839: PUSH
57840: LD_INT 12
57842: PUSH
57843: LD_INT 51
57845: PUSH
57846: LD_INT 32
57848: PUSH
57849: LD_INT 89
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: IN
57858: NOT
57859: OR
57860: IFFALSE 57864
// exit ;
57862: GO 57962
// for i := 1 to 3 do
57864: LD_ADDR_VAR 0 3
57868: PUSH
57869: DOUBLE
57870: LD_INT 1
57872: DEC
57873: ST_TO_ADDR
57874: LD_INT 3
57876: PUSH
57877: FOR_TO
57878: IFFALSE 57960
// begin tmp := GetCargo ( cargo , i ) ;
57880: LD_ADDR_VAR 0 4
57884: PUSH
57885: LD_VAR 0 1
57889: PPUSH
57890: LD_VAR 0 3
57894: PPUSH
57895: CALL_OW 289
57899: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57900: LD_ADDR_VAR 0 2
57904: PUSH
57905: LD_VAR 0 2
57909: PPUSH
57910: LD_VAR 0 3
57914: PPUSH
57915: LD_VAR 0 4
57919: PPUSH
57920: CALL_OW 1
57924: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57925: LD_ADDR_VAR 0 2
57929: PUSH
57930: LD_VAR 0 2
57934: PPUSH
57935: LD_INT 4
57937: PPUSH
57938: LD_VAR 0 2
57942: PUSH
57943: LD_INT 4
57945: ARRAY
57946: PUSH
57947: LD_VAR 0 4
57951: PLUS
57952: PPUSH
57953: CALL_OW 1
57957: ST_TO_ADDR
// end ;
57958: GO 57877
57960: POP
57961: POP
// end ;
57962: LD_VAR 0 2
57966: RET
// export function Length ( array ) ; begin
57967: LD_INT 0
57969: PPUSH
// result := array + 0 ;
57970: LD_ADDR_VAR 0 2
57974: PUSH
57975: LD_VAR 0 1
57979: PUSH
57980: LD_INT 0
57982: PLUS
57983: ST_TO_ADDR
// end ;
57984: LD_VAR 0 2
57988: RET
// export function PrepareArray ( array ) ; begin
57989: LD_INT 0
57991: PPUSH
// result := array diff 0 ;
57992: LD_ADDR_VAR 0 2
57996: PUSH
57997: LD_VAR 0 1
58001: PUSH
58002: LD_INT 0
58004: DIFF
58005: ST_TO_ADDR
// if not result [ 1 ] then
58006: LD_VAR 0 2
58010: PUSH
58011: LD_INT 1
58013: ARRAY
58014: NOT
58015: IFFALSE 58035
// result := Delete ( result , 1 ) ;
58017: LD_ADDR_VAR 0 2
58021: PUSH
58022: LD_VAR 0 2
58026: PPUSH
58027: LD_INT 1
58029: PPUSH
58030: CALL_OW 3
58034: ST_TO_ADDR
// end ;
58035: LD_VAR 0 2
58039: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58040: LD_INT 0
58042: PPUSH
58043: PPUSH
58044: PPUSH
58045: PPUSH
// sibRocketRange := 25 ;
58046: LD_ADDR_VAR 0 6
58050: PUSH
58051: LD_INT 25
58053: ST_TO_ADDR
// result := false ;
58054: LD_ADDR_VAR 0 4
58058: PUSH
58059: LD_INT 0
58061: ST_TO_ADDR
// for i := 0 to 5 do
58062: LD_ADDR_VAR 0 5
58066: PUSH
58067: DOUBLE
58068: LD_INT 0
58070: DEC
58071: ST_TO_ADDR
58072: LD_INT 5
58074: PUSH
58075: FOR_TO
58076: IFFALSE 58143
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58078: LD_VAR 0 1
58082: PPUSH
58083: LD_VAR 0 5
58087: PPUSH
58088: LD_VAR 0 6
58092: PPUSH
58093: CALL_OW 272
58097: PPUSH
58098: LD_VAR 0 2
58102: PPUSH
58103: LD_VAR 0 5
58107: PPUSH
58108: LD_VAR 0 6
58112: PPUSH
58113: CALL_OW 273
58117: PPUSH
58118: LD_VAR 0 3
58122: PPUSH
58123: CALL_OW 309
58127: IFFALSE 58141
// begin result := true ;
58129: LD_ADDR_VAR 0 4
58133: PUSH
58134: LD_INT 1
58136: ST_TO_ADDR
// exit ;
58137: POP
58138: POP
58139: GO 58145
// end ;
58141: GO 58075
58143: POP
58144: POP
// end ;
58145: LD_VAR 0 4
58149: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58150: LD_INT 0
58152: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58153: LD_VAR 0 1
58157: PPUSH
58158: LD_VAR 0 2
58162: PPUSH
58163: LD_INT 0
58165: PPUSH
58166: LD_INT 0
58168: PPUSH
58169: LD_INT 1
58171: PPUSH
58172: LD_INT 0
58174: PPUSH
58175: CALL_OW 587
// end ;
58179: LD_VAR 0 3
58183: RET
// export function CenterOnNow ( unit ) ; begin
58184: LD_INT 0
58186: PPUSH
// result := IsInUnit ( unit ) ;
58187: LD_ADDR_VAR 0 2
58191: PUSH
58192: LD_VAR 0 1
58196: PPUSH
58197: CALL_OW 310
58201: ST_TO_ADDR
// if not result then
58202: LD_VAR 0 2
58206: NOT
58207: IFFALSE 58219
// result := unit ;
58209: LD_ADDR_VAR 0 2
58213: PUSH
58214: LD_VAR 0 1
58218: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58219: LD_VAR 0 1
58223: PPUSH
58224: CALL_OW 87
// end ;
58228: LD_VAR 0 2
58232: RET
// export function ComMoveHex ( unit , hex ) ; begin
58233: LD_INT 0
58235: PPUSH
// if not hex then
58236: LD_VAR 0 2
58240: NOT
58241: IFFALSE 58245
// exit ;
58243: GO 58298
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58245: LD_VAR 0 2
58249: PUSH
58250: LD_INT 1
58252: ARRAY
58253: PPUSH
58254: LD_VAR 0 2
58258: PUSH
58259: LD_INT 2
58261: ARRAY
58262: PPUSH
58263: CALL_OW 428
58267: IFFALSE 58271
// exit ;
58269: GO 58298
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58271: LD_VAR 0 1
58275: PPUSH
58276: LD_VAR 0 2
58280: PUSH
58281: LD_INT 1
58283: ARRAY
58284: PPUSH
58285: LD_VAR 0 2
58289: PUSH
58290: LD_INT 2
58292: ARRAY
58293: PPUSH
58294: CALL_OW 111
// end ;
58298: LD_VAR 0 3
58302: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58303: LD_INT 0
58305: PPUSH
58306: PPUSH
58307: PPUSH
// if not unit or not enemy then
58308: LD_VAR 0 1
58312: NOT
58313: PUSH
58314: LD_VAR 0 2
58318: NOT
58319: OR
58320: IFFALSE 58324
// exit ;
58322: GO 58448
// x := GetX ( enemy ) ;
58324: LD_ADDR_VAR 0 4
58328: PUSH
58329: LD_VAR 0 2
58333: PPUSH
58334: CALL_OW 250
58338: ST_TO_ADDR
// y := GetY ( enemy ) ;
58339: LD_ADDR_VAR 0 5
58343: PUSH
58344: LD_VAR 0 2
58348: PPUSH
58349: CALL_OW 251
58353: ST_TO_ADDR
// if ValidHex ( x , y ) then
58354: LD_VAR 0 4
58358: PPUSH
58359: LD_VAR 0 5
58363: PPUSH
58364: CALL_OW 488
58368: IFFALSE 58448
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
58370: LD_VAR 0 2
58374: PPUSH
58375: CALL_OW 247
58379: PUSH
58380: LD_INT 3
58382: PUSH
58383: LD_INT 2
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: IN
58390: PUSH
58391: LD_VAR 0 1
58395: PPUSH
58396: CALL_OW 255
58400: PPUSH
58401: LD_VAR 0 2
58405: PPUSH
58406: CALL_OW 292
58410: AND
58411: IFFALSE 58429
// ComAttackUnit ( unit , enemy ) else
58413: LD_VAR 0 1
58417: PPUSH
58418: LD_VAR 0 2
58422: PPUSH
58423: CALL_OW 115
58427: GO 58448
// ComAgressiveMove ( unit , x , y ) ;
58429: LD_VAR 0 1
58433: PPUSH
58434: LD_VAR 0 4
58438: PPUSH
58439: LD_VAR 0 5
58443: PPUSH
58444: CALL_OW 114
// end ;
58448: LD_VAR 0 3
58452: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58453: LD_INT 0
58455: PPUSH
58456: PPUSH
58457: PPUSH
// list := AreaToList ( area , 0 ) ;
58458: LD_ADDR_VAR 0 5
58462: PUSH
58463: LD_VAR 0 1
58467: PPUSH
58468: LD_INT 0
58470: PPUSH
58471: CALL_OW 517
58475: ST_TO_ADDR
// if not list then
58476: LD_VAR 0 5
58480: NOT
58481: IFFALSE 58485
// exit ;
58483: GO 58615
// if all then
58485: LD_VAR 0 2
58489: IFFALSE 58577
// begin for i := 1 to list [ 1 ] do
58491: LD_ADDR_VAR 0 4
58495: PUSH
58496: DOUBLE
58497: LD_INT 1
58499: DEC
58500: ST_TO_ADDR
58501: LD_VAR 0 5
58505: PUSH
58506: LD_INT 1
58508: ARRAY
58509: PUSH
58510: FOR_TO
58511: IFFALSE 58573
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58513: LD_ADDR_VAR 0 3
58517: PUSH
58518: LD_VAR 0 3
58522: PPUSH
58523: LD_VAR 0 3
58527: PUSH
58528: LD_INT 1
58530: PLUS
58531: PPUSH
58532: LD_VAR 0 5
58536: PUSH
58537: LD_INT 1
58539: ARRAY
58540: PUSH
58541: LD_VAR 0 4
58545: ARRAY
58546: PUSH
58547: LD_VAR 0 5
58551: PUSH
58552: LD_INT 2
58554: ARRAY
58555: PUSH
58556: LD_VAR 0 4
58560: ARRAY
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PPUSH
58566: CALL_OW 1
58570: ST_TO_ADDR
58571: GO 58510
58573: POP
58574: POP
// exit ;
58575: GO 58615
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58577: LD_ADDR_VAR 0 3
58581: PUSH
58582: LD_VAR 0 5
58586: PUSH
58587: LD_INT 1
58589: ARRAY
58590: PUSH
58591: LD_INT 1
58593: ARRAY
58594: PUSH
58595: LD_VAR 0 5
58599: PUSH
58600: LD_INT 2
58602: ARRAY
58603: PUSH
58604: LD_INT 1
58606: ARRAY
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: EMPTY
58613: LIST
58614: ST_TO_ADDR
// end ;
58615: LD_VAR 0 3
58619: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58620: LD_INT 0
58622: PPUSH
58623: PPUSH
// list := AreaToList ( area , 0 ) ;
58624: LD_ADDR_VAR 0 4
58628: PUSH
58629: LD_VAR 0 1
58633: PPUSH
58634: LD_INT 0
58636: PPUSH
58637: CALL_OW 517
58641: ST_TO_ADDR
// if not list then
58642: LD_VAR 0 4
58646: NOT
58647: IFFALSE 58651
// exit ;
58649: GO 58692
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58651: LD_ADDR_VAR 0 3
58655: PUSH
58656: LD_VAR 0 4
58660: PUSH
58661: LD_INT 1
58663: ARRAY
58664: PUSH
58665: LD_INT 1
58667: ARRAY
58668: PUSH
58669: LD_VAR 0 4
58673: PUSH
58674: LD_INT 2
58676: ARRAY
58677: PUSH
58678: LD_INT 1
58680: ARRAY
58681: PUSH
58682: LD_VAR 0 2
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: LIST
58691: ST_TO_ADDR
// end ;
58692: LD_VAR 0 3
58696: RET
// export function First ( array ) ; begin
58697: LD_INT 0
58699: PPUSH
// if not array then
58700: LD_VAR 0 1
58704: NOT
58705: IFFALSE 58709
// exit ;
58707: GO 58723
// result := array [ 1 ] ;
58709: LD_ADDR_VAR 0 2
58713: PUSH
58714: LD_VAR 0 1
58718: PUSH
58719: LD_INT 1
58721: ARRAY
58722: ST_TO_ADDR
// end ;
58723: LD_VAR 0 2
58727: RET
// export function Last ( array ) ; begin
58728: LD_INT 0
58730: PPUSH
// if not array then
58731: LD_VAR 0 1
58735: NOT
58736: IFFALSE 58740
// exit ;
58738: GO 58756
// result := array [ array ] ;
58740: LD_ADDR_VAR 0 2
58744: PUSH
58745: LD_VAR 0 1
58749: PUSH
58750: LD_VAR 0 1
58754: ARRAY
58755: ST_TO_ADDR
// end ;
58756: LD_VAR 0 2
58760: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58761: LD_INT 0
58763: PPUSH
58764: PPUSH
// result := [ ] ;
58765: LD_ADDR_VAR 0 5
58769: PUSH
58770: EMPTY
58771: ST_TO_ADDR
// if not array then
58772: LD_VAR 0 1
58776: NOT
58777: IFFALSE 58781
// exit ;
58779: GO 58893
// for i := 1 to array do
58781: LD_ADDR_VAR 0 6
58785: PUSH
58786: DOUBLE
58787: LD_INT 1
58789: DEC
58790: ST_TO_ADDR
58791: LD_VAR 0 1
58795: PUSH
58796: FOR_TO
58797: IFFALSE 58891
// if array [ i ] [ index ] = value then
58799: LD_VAR 0 1
58803: PUSH
58804: LD_VAR 0 6
58808: ARRAY
58809: PUSH
58810: LD_VAR 0 2
58814: ARRAY
58815: PUSH
58816: LD_VAR 0 3
58820: EQUAL
58821: IFFALSE 58889
// begin if indexColumn then
58823: LD_VAR 0 4
58827: IFFALSE 58863
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58829: LD_ADDR_VAR 0 5
58833: PUSH
58834: LD_VAR 0 5
58838: PPUSH
58839: LD_VAR 0 1
58843: PUSH
58844: LD_VAR 0 6
58848: ARRAY
58849: PUSH
58850: LD_VAR 0 4
58854: ARRAY
58855: PPUSH
58856: CALL 54231 0 2
58860: ST_TO_ADDR
58861: GO 58889
// result := Join ( result , array [ i ] ) ;
58863: LD_ADDR_VAR 0 5
58867: PUSH
58868: LD_VAR 0 5
58872: PPUSH
58873: LD_VAR 0 1
58877: PUSH
58878: LD_VAR 0 6
58882: ARRAY
58883: PPUSH
58884: CALL 54231 0 2
58888: ST_TO_ADDR
// end ;
58889: GO 58796
58891: POP
58892: POP
// end ;
58893: LD_VAR 0 5
58897: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58898: LD_INT 0
58900: PPUSH
58901: PPUSH
58902: PPUSH
// if btype = b_depot then
58903: LD_VAR 0 2
58907: PUSH
58908: LD_INT 0
58910: EQUAL
58911: IFFALSE 58923
// begin result := true ;
58913: LD_ADDR_VAR 0 3
58917: PUSH
58918: LD_INT 1
58920: ST_TO_ADDR
// exit ;
58921: GO 59039
// end ; pom := GetBase ( depot ) ;
58923: LD_ADDR_VAR 0 4
58927: PUSH
58928: LD_VAR 0 1
58932: PPUSH
58933: CALL_OW 274
58937: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58938: LD_ADDR_VAR 0 5
58942: PUSH
58943: LD_VAR 0 2
58947: PPUSH
58948: LD_VAR 0 1
58952: PPUSH
58953: CALL_OW 248
58957: PPUSH
58958: CALL_OW 450
58962: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58963: LD_ADDR_VAR 0 3
58967: PUSH
58968: LD_VAR 0 4
58972: PPUSH
58973: LD_INT 1
58975: PPUSH
58976: CALL_OW 275
58980: PUSH
58981: LD_VAR 0 5
58985: PUSH
58986: LD_INT 1
58988: ARRAY
58989: GREATEREQUAL
58990: PUSH
58991: LD_VAR 0 4
58995: PPUSH
58996: LD_INT 2
58998: PPUSH
58999: CALL_OW 275
59003: PUSH
59004: LD_VAR 0 5
59008: PUSH
59009: LD_INT 2
59011: ARRAY
59012: GREATEREQUAL
59013: AND
59014: PUSH
59015: LD_VAR 0 4
59019: PPUSH
59020: LD_INT 3
59022: PPUSH
59023: CALL_OW 275
59027: PUSH
59028: LD_VAR 0 5
59032: PUSH
59033: LD_INT 3
59035: ARRAY
59036: GREATEREQUAL
59037: AND
59038: ST_TO_ADDR
// end ;
59039: LD_VAR 0 3
59043: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59044: LD_INT 0
59046: PPUSH
// if not vehicles or not parkingPoint then
59047: LD_VAR 0 1
59051: NOT
59052: PUSH
59053: LD_VAR 0 2
59057: NOT
59058: OR
59059: IFFALSE 59063
// exit ;
59061: GO 59161
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59063: LD_ADDR_VAR 0 1
59067: PUSH
59068: LD_VAR 0 1
59072: PPUSH
59073: LD_INT 50
59075: PUSH
59076: EMPTY
59077: LIST
59078: PUSH
59079: LD_INT 3
59081: PUSH
59082: LD_INT 92
59084: PUSH
59085: LD_VAR 0 2
59089: PUSH
59090: LD_INT 1
59092: ARRAY
59093: PUSH
59094: LD_VAR 0 2
59098: PUSH
59099: LD_INT 2
59101: ARRAY
59102: PUSH
59103: LD_INT 8
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PPUSH
59120: CALL_OW 72
59124: ST_TO_ADDR
// if not vehicles then
59125: LD_VAR 0 1
59129: NOT
59130: IFFALSE 59134
// exit ;
59132: GO 59161
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59134: LD_VAR 0 1
59138: PPUSH
59139: LD_VAR 0 2
59143: PUSH
59144: LD_INT 1
59146: ARRAY
59147: PPUSH
59148: LD_VAR 0 2
59152: PUSH
59153: LD_INT 2
59155: ARRAY
59156: PPUSH
59157: CALL_OW 111
// end ; end_of_file
59161: LD_VAR 0 3
59165: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
59166: LD_INT 0
59168: PPUSH
59169: PPUSH
59170: PPUSH
59171: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
59172: LD_VAR 0 1
59176: PPUSH
59177: CALL_OW 264
59181: PUSH
59182: LD_INT 91
59184: EQUAL
59185: IFFALSE 59257
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59187: LD_INT 68
59189: PPUSH
59190: LD_VAR 0 1
59194: PPUSH
59195: CALL_OW 255
59199: PPUSH
59200: CALL_OW 321
59204: PUSH
59205: LD_INT 2
59207: EQUAL
59208: IFFALSE 59220
// eff := 70 else
59210: LD_ADDR_VAR 0 4
59214: PUSH
59215: LD_INT 70
59217: ST_TO_ADDR
59218: GO 59228
// eff := 30 ;
59220: LD_ADDR_VAR 0 4
59224: PUSH
59225: LD_INT 30
59227: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59228: LD_VAR 0 1
59232: PPUSH
59233: CALL_OW 250
59237: PPUSH
59238: LD_VAR 0 1
59242: PPUSH
59243: CALL_OW 251
59247: PPUSH
59248: LD_VAR 0 4
59252: PPUSH
59253: CALL_OW 495
// end ; end ;
59257: LD_VAR 0 2
59261: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59262: LD_INT 0
59264: PPUSH
// end ;
59265: LD_VAR 0 4
59269: RET
// export function SOS_Command ( cmd ) ; begin
59270: LD_INT 0
59272: PPUSH
// end ;
59273: LD_VAR 0 2
59277: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59278: LD_INT 0
59280: PPUSH
// end ;
59281: LD_VAR 0 6
59285: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
59286: LD_INT 0
59288: PPUSH
59289: PPUSH
// if not vehicle or not factory then
59290: LD_VAR 0 1
59294: NOT
59295: PUSH
59296: LD_VAR 0 2
59300: NOT
59301: OR
59302: IFFALSE 59306
// exit ;
59304: GO 59537
// if factoryWaypoints >= factory then
59306: LD_EXP 121
59310: PUSH
59311: LD_VAR 0 2
59315: GREATEREQUAL
59316: IFFALSE 59537
// if factoryWaypoints [ factory ] then
59318: LD_EXP 121
59322: PUSH
59323: LD_VAR 0 2
59327: ARRAY
59328: IFFALSE 59537
// begin if GetControl ( vehicle ) = control_manual then
59330: LD_VAR 0 1
59334: PPUSH
59335: CALL_OW 263
59339: PUSH
59340: LD_INT 1
59342: EQUAL
59343: IFFALSE 59424
// begin driver := IsDrivenBy ( vehicle ) ;
59345: LD_ADDR_VAR 0 4
59349: PUSH
59350: LD_VAR 0 1
59354: PPUSH
59355: CALL_OW 311
59359: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59360: LD_VAR 0 4
59364: PPUSH
59365: LD_EXP 121
59369: PUSH
59370: LD_VAR 0 2
59374: ARRAY
59375: PUSH
59376: LD_INT 3
59378: ARRAY
59379: PPUSH
59380: LD_EXP 121
59384: PUSH
59385: LD_VAR 0 2
59389: ARRAY
59390: PUSH
59391: LD_INT 4
59393: ARRAY
59394: PPUSH
59395: CALL_OW 171
// AddComExitVehicle ( driver ) ;
59399: LD_VAR 0 4
59403: PPUSH
59404: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
59408: LD_VAR 0 4
59412: PPUSH
59413: LD_VAR 0 2
59417: PPUSH
59418: CALL_OW 180
// end else
59422: GO 59537
// if GetControl ( vehicle ) = control_remote then
59424: LD_VAR 0 1
59428: PPUSH
59429: CALL_OW 263
59433: PUSH
59434: LD_INT 2
59436: EQUAL
59437: IFFALSE 59498
// begin wait ( 0 0$2 ) ;
59439: LD_INT 70
59441: PPUSH
59442: CALL_OW 67
// if Connect ( vehicle ) then
59446: LD_VAR 0 1
59450: PPUSH
59451: CALL 24848 0 1
59455: IFFALSE 59496
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59457: LD_VAR 0 1
59461: PPUSH
59462: LD_EXP 121
59466: PUSH
59467: LD_VAR 0 2
59471: ARRAY
59472: PUSH
59473: LD_INT 3
59475: ARRAY
59476: PPUSH
59477: LD_EXP 121
59481: PUSH
59482: LD_VAR 0 2
59486: ARRAY
59487: PUSH
59488: LD_INT 4
59490: ARRAY
59491: PPUSH
59492: CALL_OW 171
// end else
59496: GO 59537
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59498: LD_VAR 0 1
59502: PPUSH
59503: LD_EXP 121
59507: PUSH
59508: LD_VAR 0 2
59512: ARRAY
59513: PUSH
59514: LD_INT 3
59516: ARRAY
59517: PPUSH
59518: LD_EXP 121
59522: PUSH
59523: LD_VAR 0 2
59527: ARRAY
59528: PUSH
59529: LD_INT 4
59531: ARRAY
59532: PPUSH
59533: CALL_OW 171
// end ; end ;
59537: LD_VAR 0 3
59541: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59542: LD_INT 0
59544: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59545: LD_VAR 0 1
59549: PUSH
59550: LD_INT 250
59552: EQUAL
59553: PUSH
59554: LD_VAR 0 2
59558: PPUSH
59559: CALL_OW 264
59563: PUSH
59564: LD_INT 81
59566: EQUAL
59567: AND
59568: IFFALSE 59589
// MinerPlaceMine ( unit , x , y ) ;
59570: LD_VAR 0 2
59574: PPUSH
59575: LD_VAR 0 4
59579: PPUSH
59580: LD_VAR 0 5
59584: PPUSH
59585: CALL 62579 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59589: LD_VAR 0 1
59593: PUSH
59594: LD_INT 251
59596: EQUAL
59597: PUSH
59598: LD_VAR 0 2
59602: PPUSH
59603: CALL_OW 264
59607: PUSH
59608: LD_INT 81
59610: EQUAL
59611: AND
59612: IFFALSE 59633
// MinerDetonateMine ( unit , x , y ) ;
59614: LD_VAR 0 2
59618: PPUSH
59619: LD_VAR 0 4
59623: PPUSH
59624: LD_VAR 0 5
59628: PPUSH
59629: CALL 62854 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59633: LD_VAR 0 1
59637: PUSH
59638: LD_INT 252
59640: EQUAL
59641: PUSH
59642: LD_VAR 0 2
59646: PPUSH
59647: CALL_OW 264
59651: PUSH
59652: LD_INT 81
59654: EQUAL
59655: AND
59656: IFFALSE 59677
// MinerCreateMinefield ( unit , x , y ) ;
59658: LD_VAR 0 2
59662: PPUSH
59663: LD_VAR 0 4
59667: PPUSH
59668: LD_VAR 0 5
59672: PPUSH
59673: CALL 63271 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59677: LD_VAR 0 1
59681: PUSH
59682: LD_INT 253
59684: EQUAL
59685: PUSH
59686: LD_VAR 0 2
59690: PPUSH
59691: CALL_OW 257
59695: PUSH
59696: LD_INT 5
59698: EQUAL
59699: AND
59700: IFFALSE 59721
// ComBinocular ( unit , x , y ) ;
59702: LD_VAR 0 2
59706: PPUSH
59707: LD_VAR 0 4
59711: PPUSH
59712: LD_VAR 0 5
59716: PPUSH
59717: CALL 63640 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59721: LD_VAR 0 1
59725: PUSH
59726: LD_INT 254
59728: EQUAL
59729: PUSH
59730: LD_VAR 0 2
59734: PPUSH
59735: CALL_OW 264
59739: PUSH
59740: LD_INT 99
59742: EQUAL
59743: AND
59744: PUSH
59745: LD_VAR 0 3
59749: PPUSH
59750: CALL_OW 263
59754: PUSH
59755: LD_INT 3
59757: EQUAL
59758: AND
59759: IFFALSE 59775
// HackDestroyVehicle ( unit , selectedUnit ) ;
59761: LD_VAR 0 2
59765: PPUSH
59766: LD_VAR 0 3
59770: PPUSH
59771: CALL 61943 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59775: LD_VAR 0 1
59779: PUSH
59780: LD_INT 255
59782: EQUAL
59783: PUSH
59784: LD_VAR 0 2
59788: PPUSH
59789: CALL_OW 264
59793: PUSH
59794: LD_INT 14
59796: PUSH
59797: LD_INT 53
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: IN
59804: AND
59805: PUSH
59806: LD_VAR 0 4
59810: PPUSH
59811: LD_VAR 0 5
59815: PPUSH
59816: CALL_OW 488
59820: AND
59821: IFFALSE 59845
// CutTreeXYR ( unit , x , y , 12 ) ;
59823: LD_VAR 0 2
59827: PPUSH
59828: LD_VAR 0 4
59832: PPUSH
59833: LD_VAR 0 5
59837: PPUSH
59838: LD_INT 12
59840: PPUSH
59841: CALL 59940 0 4
// if cmd = 256 then
59845: LD_VAR 0 1
59849: PUSH
59850: LD_INT 256
59852: EQUAL
59853: IFFALSE 59874
// SetFactoryWaypoint ( unit , x , y ) ;
59855: LD_VAR 0 2
59859: PPUSH
59860: LD_VAR 0 4
59864: PPUSH
59865: LD_VAR 0 5
59869: PPUSH
59870: CALL 78714 0 3
// if cmd = 257 then
59874: LD_VAR 0 1
59878: PUSH
59879: LD_INT 257
59881: EQUAL
59882: IFFALSE 59903
// SetWarehouseGatheringPoint ( unit , x , y ) ;
59884: LD_VAR 0 2
59888: PPUSH
59889: LD_VAR 0 4
59893: PPUSH
59894: LD_VAR 0 5
59898: PPUSH
59899: CALL 79076 0 3
// if cmd = 258 then
59903: LD_VAR 0 1
59907: PUSH
59908: LD_INT 258
59910: EQUAL
59911: IFFALSE 59935
// BurnTreeXYR ( unit , x , y , 8 ) ;
59913: LD_VAR 0 2
59917: PPUSH
59918: LD_VAR 0 4
59922: PPUSH
59923: LD_VAR 0 5
59927: PPUSH
59928: LD_INT 8
59930: PPUSH
59931: CALL 60334 0 4
// end ;
59935: LD_VAR 0 6
59939: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59940: LD_INT 0
59942: PPUSH
59943: PPUSH
59944: PPUSH
59945: PPUSH
59946: PPUSH
59947: PPUSH
59948: PPUSH
59949: PPUSH
59950: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
59951: LD_VAR 0 1
59955: PPUSH
59956: CALL_OW 302
59960: NOT
59961: PUSH
59962: LD_VAR 0 2
59966: PPUSH
59967: LD_VAR 0 3
59971: PPUSH
59972: CALL_OW 488
59976: NOT
59977: OR
59978: PUSH
59979: LD_VAR 0 4
59983: NOT
59984: OR
59985: IFFALSE 59989
// exit ;
59987: GO 60329
// list := [ ] ;
59989: LD_ADDR_VAR 0 13
59993: PUSH
59994: EMPTY
59995: ST_TO_ADDR
// if x - r < 0 then
59996: LD_VAR 0 2
60000: PUSH
60001: LD_VAR 0 4
60005: MINUS
60006: PUSH
60007: LD_INT 0
60009: LESS
60010: IFFALSE 60022
// min_x := 0 else
60012: LD_ADDR_VAR 0 7
60016: PUSH
60017: LD_INT 0
60019: ST_TO_ADDR
60020: GO 60038
// min_x := x - r ;
60022: LD_ADDR_VAR 0 7
60026: PUSH
60027: LD_VAR 0 2
60031: PUSH
60032: LD_VAR 0 4
60036: MINUS
60037: ST_TO_ADDR
// if y - r < 0 then
60038: LD_VAR 0 3
60042: PUSH
60043: LD_VAR 0 4
60047: MINUS
60048: PUSH
60049: LD_INT 0
60051: LESS
60052: IFFALSE 60064
// min_y := 0 else
60054: LD_ADDR_VAR 0 8
60058: PUSH
60059: LD_INT 0
60061: ST_TO_ADDR
60062: GO 60080
// min_y := y - r ;
60064: LD_ADDR_VAR 0 8
60068: PUSH
60069: LD_VAR 0 3
60073: PUSH
60074: LD_VAR 0 4
60078: MINUS
60079: ST_TO_ADDR
// max_x := x + r ;
60080: LD_ADDR_VAR 0 9
60084: PUSH
60085: LD_VAR 0 2
60089: PUSH
60090: LD_VAR 0 4
60094: PLUS
60095: ST_TO_ADDR
// max_y := y + r ;
60096: LD_ADDR_VAR 0 10
60100: PUSH
60101: LD_VAR 0 3
60105: PUSH
60106: LD_VAR 0 4
60110: PLUS
60111: ST_TO_ADDR
// for _x = min_x to max_x do
60112: LD_ADDR_VAR 0 11
60116: PUSH
60117: DOUBLE
60118: LD_VAR 0 7
60122: DEC
60123: ST_TO_ADDR
60124: LD_VAR 0 9
60128: PUSH
60129: FOR_TO
60130: IFFALSE 60247
// for _y = min_y to max_y do
60132: LD_ADDR_VAR 0 12
60136: PUSH
60137: DOUBLE
60138: LD_VAR 0 8
60142: DEC
60143: ST_TO_ADDR
60144: LD_VAR 0 10
60148: PUSH
60149: FOR_TO
60150: IFFALSE 60243
// begin if not ValidHex ( _x , _y ) then
60152: LD_VAR 0 11
60156: PPUSH
60157: LD_VAR 0 12
60161: PPUSH
60162: CALL_OW 488
60166: NOT
60167: IFFALSE 60171
// continue ;
60169: GO 60149
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60171: LD_VAR 0 11
60175: PPUSH
60176: LD_VAR 0 12
60180: PPUSH
60181: CALL_OW 351
60185: PUSH
60186: LD_VAR 0 11
60190: PPUSH
60191: LD_VAR 0 12
60195: PPUSH
60196: CALL_OW 554
60200: AND
60201: IFFALSE 60241
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60203: LD_ADDR_VAR 0 13
60207: PUSH
60208: LD_VAR 0 13
60212: PPUSH
60213: LD_VAR 0 13
60217: PUSH
60218: LD_INT 1
60220: PLUS
60221: PPUSH
60222: LD_VAR 0 11
60226: PUSH
60227: LD_VAR 0 12
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PPUSH
60236: CALL_OW 2
60240: ST_TO_ADDR
// end ;
60241: GO 60149
60243: POP
60244: POP
60245: GO 60129
60247: POP
60248: POP
// if not list then
60249: LD_VAR 0 13
60253: NOT
60254: IFFALSE 60258
// exit ;
60256: GO 60329
// for i in list do
60258: LD_ADDR_VAR 0 6
60262: PUSH
60263: LD_VAR 0 13
60267: PUSH
60268: FOR_IN
60269: IFFALSE 60327
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60271: LD_VAR 0 1
60275: PPUSH
60276: LD_STRING M
60278: PUSH
60279: LD_VAR 0 6
60283: PUSH
60284: LD_INT 1
60286: ARRAY
60287: PUSH
60288: LD_VAR 0 6
60292: PUSH
60293: LD_INT 2
60295: ARRAY
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: PUSH
60318: EMPTY
60319: LIST
60320: PPUSH
60321: CALL_OW 447
60325: GO 60268
60327: POP
60328: POP
// end ;
60329: LD_VAR 0 5
60333: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
60334: LD_INT 0
60336: PPUSH
60337: PPUSH
60338: PPUSH
60339: PPUSH
60340: PPUSH
60341: PPUSH
60342: PPUSH
60343: PPUSH
60344: PPUSH
60345: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60346: LD_VAR 0 1
60350: PPUSH
60351: CALL_OW 302
60355: NOT
60356: PUSH
60357: LD_VAR 0 2
60361: PPUSH
60362: LD_VAR 0 3
60366: PPUSH
60367: CALL_OW 488
60371: NOT
60372: OR
60373: PUSH
60374: LD_VAR 0 4
60378: NOT
60379: OR
60380: IFFALSE 60384
// exit ;
60382: GO 60897
// list := [ ] ;
60384: LD_ADDR_VAR 0 13
60388: PUSH
60389: EMPTY
60390: ST_TO_ADDR
// if x - r < 0 then
60391: LD_VAR 0 2
60395: PUSH
60396: LD_VAR 0 4
60400: MINUS
60401: PUSH
60402: LD_INT 0
60404: LESS
60405: IFFALSE 60417
// min_x := 0 else
60407: LD_ADDR_VAR 0 7
60411: PUSH
60412: LD_INT 0
60414: ST_TO_ADDR
60415: GO 60433
// min_x := x - r ;
60417: LD_ADDR_VAR 0 7
60421: PUSH
60422: LD_VAR 0 2
60426: PUSH
60427: LD_VAR 0 4
60431: MINUS
60432: ST_TO_ADDR
// if y - r < 0 then
60433: LD_VAR 0 3
60437: PUSH
60438: LD_VAR 0 4
60442: MINUS
60443: PUSH
60444: LD_INT 0
60446: LESS
60447: IFFALSE 60459
// min_y := 0 else
60449: LD_ADDR_VAR 0 8
60453: PUSH
60454: LD_INT 0
60456: ST_TO_ADDR
60457: GO 60475
// min_y := y - r ;
60459: LD_ADDR_VAR 0 8
60463: PUSH
60464: LD_VAR 0 3
60468: PUSH
60469: LD_VAR 0 4
60473: MINUS
60474: ST_TO_ADDR
// max_x := x + r ;
60475: LD_ADDR_VAR 0 9
60479: PUSH
60480: LD_VAR 0 2
60484: PUSH
60485: LD_VAR 0 4
60489: PLUS
60490: ST_TO_ADDR
// max_y := y + r ;
60491: LD_ADDR_VAR 0 10
60495: PUSH
60496: LD_VAR 0 3
60500: PUSH
60501: LD_VAR 0 4
60505: PLUS
60506: ST_TO_ADDR
// for _x = min_x to max_x do
60507: LD_ADDR_VAR 0 11
60511: PUSH
60512: DOUBLE
60513: LD_VAR 0 7
60517: DEC
60518: ST_TO_ADDR
60519: LD_VAR 0 9
60523: PUSH
60524: FOR_TO
60525: IFFALSE 60642
// for _y = min_y to max_y do
60527: LD_ADDR_VAR 0 12
60531: PUSH
60532: DOUBLE
60533: LD_VAR 0 8
60537: DEC
60538: ST_TO_ADDR
60539: LD_VAR 0 10
60543: PUSH
60544: FOR_TO
60545: IFFALSE 60638
// begin if not ValidHex ( _x , _y ) then
60547: LD_VAR 0 11
60551: PPUSH
60552: LD_VAR 0 12
60556: PPUSH
60557: CALL_OW 488
60561: NOT
60562: IFFALSE 60566
// continue ;
60564: GO 60544
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60566: LD_VAR 0 11
60570: PPUSH
60571: LD_VAR 0 12
60575: PPUSH
60576: CALL_OW 351
60580: PUSH
60581: LD_VAR 0 11
60585: PPUSH
60586: LD_VAR 0 12
60590: PPUSH
60591: CALL_OW 554
60595: AND
60596: IFFALSE 60636
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60598: LD_ADDR_VAR 0 13
60602: PUSH
60603: LD_VAR 0 13
60607: PPUSH
60608: LD_VAR 0 13
60612: PUSH
60613: LD_INT 1
60615: PLUS
60616: PPUSH
60617: LD_VAR 0 11
60621: PUSH
60622: LD_VAR 0 12
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PPUSH
60631: CALL_OW 2
60635: ST_TO_ADDR
// end ;
60636: GO 60544
60638: POP
60639: POP
60640: GO 60524
60642: POP
60643: POP
// if not list then
60644: LD_VAR 0 13
60648: NOT
60649: IFFALSE 60653
// exit ;
60651: GO 60897
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
60653: LD_ADDR_VAR 0 13
60657: PUSH
60658: LD_VAR 0 1
60662: PPUSH
60663: LD_VAR 0 13
60667: PPUSH
60668: LD_INT 1
60670: PPUSH
60671: LD_INT 1
60673: PPUSH
60674: CALL 21990 0 4
60678: ST_TO_ADDR
// ComStop ( flame ) ;
60679: LD_VAR 0 1
60683: PPUSH
60684: CALL_OW 141
// for i in list do
60688: LD_ADDR_VAR 0 6
60692: PUSH
60693: LD_VAR 0 13
60697: PUSH
60698: FOR_IN
60699: IFFALSE 60730
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
60701: LD_VAR 0 1
60705: PPUSH
60706: LD_VAR 0 6
60710: PUSH
60711: LD_INT 1
60713: ARRAY
60714: PPUSH
60715: LD_VAR 0 6
60719: PUSH
60720: LD_INT 2
60722: ARRAY
60723: PPUSH
60724: CALL_OW 176
60728: GO 60698
60730: POP
60731: POP
// repeat wait ( 0 0$1 ) ;
60732: LD_INT 35
60734: PPUSH
60735: CALL_OW 67
// task := GetTaskList ( flame ) ;
60739: LD_ADDR_VAR 0 14
60743: PUSH
60744: LD_VAR 0 1
60748: PPUSH
60749: CALL_OW 437
60753: ST_TO_ADDR
// if not task then
60754: LD_VAR 0 14
60758: NOT
60759: IFFALSE 60763
// exit ;
60761: GO 60897
// if task [ 1 ] [ 1 ] <> | then
60763: LD_VAR 0 14
60767: PUSH
60768: LD_INT 1
60770: ARRAY
60771: PUSH
60772: LD_INT 1
60774: ARRAY
60775: PUSH
60776: LD_STRING |
60778: NONEQUAL
60779: IFFALSE 60783
// exit ;
60781: GO 60897
// _x := task [ 1 ] [ 2 ] ;
60783: LD_ADDR_VAR 0 11
60787: PUSH
60788: LD_VAR 0 14
60792: PUSH
60793: LD_INT 1
60795: ARRAY
60796: PUSH
60797: LD_INT 2
60799: ARRAY
60800: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
60801: LD_ADDR_VAR 0 12
60805: PUSH
60806: LD_VAR 0 14
60810: PUSH
60811: LD_INT 1
60813: ARRAY
60814: PUSH
60815: LD_INT 3
60817: ARRAY
60818: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
60819: LD_VAR 0 11
60823: PPUSH
60824: LD_VAR 0 12
60828: PPUSH
60829: CALL_OW 351
60833: NOT
60834: PUSH
60835: LD_VAR 0 11
60839: PPUSH
60840: LD_VAR 0 12
60844: PPUSH
60845: CALL_OW 554
60849: NOT
60850: OR
60851: IFFALSE 60885
// begin task := Delete ( task , 1 ) ;
60853: LD_ADDR_VAR 0 14
60857: PUSH
60858: LD_VAR 0 14
60862: PPUSH
60863: LD_INT 1
60865: PPUSH
60866: CALL_OW 3
60870: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
60871: LD_VAR 0 1
60875: PPUSH
60876: LD_VAR 0 14
60880: PPUSH
60881: CALL_OW 446
// end ; until not HasTask ( flame ) ;
60885: LD_VAR 0 1
60889: PPUSH
60890: CALL_OW 314
60894: NOT
60895: IFFALSE 60732
// end ;
60897: LD_VAR 0 5
60901: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
60902: LD_EXP 52
60906: NOT
60907: IFFALSE 60957
60909: GO 60911
60911: DISABLE
// begin initHack := true ;
60912: LD_ADDR_EXP 52
60916: PUSH
60917: LD_INT 1
60919: ST_TO_ADDR
// hackTanks := [ ] ;
60920: LD_ADDR_EXP 53
60924: PUSH
60925: EMPTY
60926: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
60927: LD_ADDR_EXP 54
60931: PUSH
60932: EMPTY
60933: ST_TO_ADDR
// hackLimit := 3 ;
60934: LD_ADDR_EXP 55
60938: PUSH
60939: LD_INT 3
60941: ST_TO_ADDR
// hackDist := 12 ;
60942: LD_ADDR_EXP 56
60946: PUSH
60947: LD_INT 12
60949: ST_TO_ADDR
// hackCounter := [ ] ;
60950: LD_ADDR_EXP 57
60954: PUSH
60955: EMPTY
60956: ST_TO_ADDR
// end ;
60957: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
60958: LD_EXP 52
60962: PUSH
60963: LD_INT 34
60965: PUSH
60966: LD_INT 99
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PPUSH
60973: CALL_OW 69
60977: AND
60978: IFFALSE 61231
60980: GO 60982
60982: DISABLE
60983: LD_INT 0
60985: PPUSH
60986: PPUSH
// begin enable ;
60987: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60988: LD_ADDR_VAR 0 1
60992: PUSH
60993: LD_INT 34
60995: PUSH
60996: LD_INT 99
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PPUSH
61003: CALL_OW 69
61007: PUSH
61008: FOR_IN
61009: IFFALSE 61229
// begin if not i in hackTanks then
61011: LD_VAR 0 1
61015: PUSH
61016: LD_EXP 53
61020: IN
61021: NOT
61022: IFFALSE 61105
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61024: LD_ADDR_EXP 53
61028: PUSH
61029: LD_EXP 53
61033: PPUSH
61034: LD_EXP 53
61038: PUSH
61039: LD_INT 1
61041: PLUS
61042: PPUSH
61043: LD_VAR 0 1
61047: PPUSH
61048: CALL_OW 1
61052: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61053: LD_ADDR_EXP 54
61057: PUSH
61058: LD_EXP 54
61062: PPUSH
61063: LD_EXP 54
61067: PUSH
61068: LD_INT 1
61070: PLUS
61071: PPUSH
61072: EMPTY
61073: PPUSH
61074: CALL_OW 1
61078: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61079: LD_ADDR_EXP 57
61083: PUSH
61084: LD_EXP 57
61088: PPUSH
61089: LD_EXP 57
61093: PUSH
61094: LD_INT 1
61096: PLUS
61097: PPUSH
61098: EMPTY
61099: PPUSH
61100: CALL_OW 1
61104: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61105: LD_VAR 0 1
61109: PPUSH
61110: CALL_OW 302
61114: NOT
61115: IFFALSE 61128
// begin HackUnlinkAll ( i ) ;
61117: LD_VAR 0 1
61121: PPUSH
61122: CALL 61234 0 1
// continue ;
61126: GO 61008
// end ; HackCheckCapturedStatus ( i ) ;
61128: LD_VAR 0 1
61132: PPUSH
61133: CALL 61677 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61137: LD_ADDR_VAR 0 2
61141: PUSH
61142: LD_INT 81
61144: PUSH
61145: LD_VAR 0 1
61149: PPUSH
61150: CALL_OW 255
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 33
61161: PUSH
61162: LD_INT 3
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 91
61171: PUSH
61172: LD_VAR 0 1
61176: PUSH
61177: LD_EXP 56
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 50
61189: PUSH
61190: EMPTY
61191: LIST
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: PPUSH
61199: CALL_OW 69
61203: ST_TO_ADDR
// if not tmp then
61204: LD_VAR 0 2
61208: NOT
61209: IFFALSE 61213
// continue ;
61211: GO 61008
// HackLink ( i , tmp ) ;
61213: LD_VAR 0 1
61217: PPUSH
61218: LD_VAR 0 2
61222: PPUSH
61223: CALL 61370 0 2
// end ;
61227: GO 61008
61229: POP
61230: POP
// end ;
61231: PPOPN 2
61233: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61234: LD_INT 0
61236: PPUSH
61237: PPUSH
61238: PPUSH
// if not hack in hackTanks then
61239: LD_VAR 0 1
61243: PUSH
61244: LD_EXP 53
61248: IN
61249: NOT
61250: IFFALSE 61254
// exit ;
61252: GO 61365
// index := GetElementIndex ( hackTanks , hack ) ;
61254: LD_ADDR_VAR 0 4
61258: PUSH
61259: LD_EXP 53
61263: PPUSH
61264: LD_VAR 0 1
61268: PPUSH
61269: CALL 21287 0 2
61273: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61274: LD_EXP 54
61278: PUSH
61279: LD_VAR 0 4
61283: ARRAY
61284: IFFALSE 61365
// begin for i in hackTanksCaptured [ index ] do
61286: LD_ADDR_VAR 0 3
61290: PUSH
61291: LD_EXP 54
61295: PUSH
61296: LD_VAR 0 4
61300: ARRAY
61301: PUSH
61302: FOR_IN
61303: IFFALSE 61329
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61305: LD_VAR 0 3
61309: PUSH
61310: LD_INT 1
61312: ARRAY
61313: PPUSH
61314: LD_VAR 0 3
61318: PUSH
61319: LD_INT 2
61321: ARRAY
61322: PPUSH
61323: CALL_OW 235
61327: GO 61302
61329: POP
61330: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61331: LD_ADDR_EXP 54
61335: PUSH
61336: LD_EXP 54
61340: PPUSH
61341: LD_VAR 0 4
61345: PPUSH
61346: EMPTY
61347: PPUSH
61348: CALL_OW 1
61352: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61353: LD_VAR 0 1
61357: PPUSH
61358: LD_INT 0
61360: PPUSH
61361: CALL_OW 505
// end ; end ;
61365: LD_VAR 0 2
61369: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61370: LD_INT 0
61372: PPUSH
61373: PPUSH
61374: PPUSH
// if not hack in hackTanks or not vehicles then
61375: LD_VAR 0 1
61379: PUSH
61380: LD_EXP 53
61384: IN
61385: NOT
61386: PUSH
61387: LD_VAR 0 2
61391: NOT
61392: OR
61393: IFFALSE 61397
// exit ;
61395: GO 61672
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
61397: LD_ADDR_VAR 0 2
61401: PUSH
61402: LD_VAR 0 1
61406: PPUSH
61407: LD_VAR 0 2
61411: PPUSH
61412: LD_INT 1
61414: PPUSH
61415: LD_INT 1
61417: PPUSH
61418: CALL 21937 0 4
61422: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
61423: LD_ADDR_VAR 0 5
61427: PUSH
61428: LD_EXP 53
61432: PPUSH
61433: LD_VAR 0 1
61437: PPUSH
61438: CALL 21287 0 2
61442: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
61443: LD_EXP 54
61447: PUSH
61448: LD_VAR 0 5
61452: ARRAY
61453: PUSH
61454: LD_EXP 55
61458: LESS
61459: IFFALSE 61648
// begin for i := 1 to vehicles do
61461: LD_ADDR_VAR 0 4
61465: PUSH
61466: DOUBLE
61467: LD_INT 1
61469: DEC
61470: ST_TO_ADDR
61471: LD_VAR 0 2
61475: PUSH
61476: FOR_TO
61477: IFFALSE 61646
// begin if hackTanksCaptured [ index ] = hackLimit then
61479: LD_EXP 54
61483: PUSH
61484: LD_VAR 0 5
61488: ARRAY
61489: PUSH
61490: LD_EXP 55
61494: EQUAL
61495: IFFALSE 61499
// break ;
61497: GO 61646
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61499: LD_ADDR_EXP 57
61503: PUSH
61504: LD_EXP 57
61508: PPUSH
61509: LD_VAR 0 5
61513: PPUSH
61514: LD_EXP 57
61518: PUSH
61519: LD_VAR 0 5
61523: ARRAY
61524: PUSH
61525: LD_INT 1
61527: PLUS
61528: PPUSH
61529: CALL_OW 1
61533: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61534: LD_ADDR_EXP 54
61538: PUSH
61539: LD_EXP 54
61543: PPUSH
61544: LD_VAR 0 5
61548: PUSH
61549: LD_EXP 54
61553: PUSH
61554: LD_VAR 0 5
61558: ARRAY
61559: PUSH
61560: LD_INT 1
61562: PLUS
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PPUSH
61568: LD_VAR 0 2
61572: PUSH
61573: LD_VAR 0 4
61577: ARRAY
61578: PUSH
61579: LD_VAR 0 2
61583: PUSH
61584: LD_VAR 0 4
61588: ARRAY
61589: PPUSH
61590: CALL_OW 255
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PPUSH
61599: CALL 21502 0 3
61603: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61604: LD_VAR 0 2
61608: PUSH
61609: LD_VAR 0 4
61613: ARRAY
61614: PPUSH
61615: LD_VAR 0 1
61619: PPUSH
61620: CALL_OW 255
61624: PPUSH
61625: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61629: LD_VAR 0 2
61633: PUSH
61634: LD_VAR 0 4
61638: ARRAY
61639: PPUSH
61640: CALL_OW 141
// end ;
61644: GO 61476
61646: POP
61647: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61648: LD_VAR 0 1
61652: PPUSH
61653: LD_EXP 54
61657: PUSH
61658: LD_VAR 0 5
61662: ARRAY
61663: PUSH
61664: LD_INT 0
61666: PLUS
61667: PPUSH
61668: CALL_OW 505
// end ;
61672: LD_VAR 0 3
61676: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61677: LD_INT 0
61679: PPUSH
61680: PPUSH
61681: PPUSH
61682: PPUSH
// if not hack in hackTanks then
61683: LD_VAR 0 1
61687: PUSH
61688: LD_EXP 53
61692: IN
61693: NOT
61694: IFFALSE 61698
// exit ;
61696: GO 61938
// index := GetElementIndex ( hackTanks , hack ) ;
61698: LD_ADDR_VAR 0 4
61702: PUSH
61703: LD_EXP 53
61707: PPUSH
61708: LD_VAR 0 1
61712: PPUSH
61713: CALL 21287 0 2
61717: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
61718: LD_ADDR_VAR 0 3
61722: PUSH
61723: DOUBLE
61724: LD_EXP 54
61728: PUSH
61729: LD_VAR 0 4
61733: ARRAY
61734: INC
61735: ST_TO_ADDR
61736: LD_INT 1
61738: PUSH
61739: FOR_DOWNTO
61740: IFFALSE 61912
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
61742: LD_ADDR_VAR 0 5
61746: PUSH
61747: LD_EXP 54
61751: PUSH
61752: LD_VAR 0 4
61756: ARRAY
61757: PUSH
61758: LD_VAR 0 3
61762: ARRAY
61763: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
61764: LD_VAR 0 5
61768: PUSH
61769: LD_INT 1
61771: ARRAY
61772: PPUSH
61773: CALL_OW 302
61777: NOT
61778: PUSH
61779: LD_VAR 0 5
61783: PUSH
61784: LD_INT 1
61786: ARRAY
61787: PPUSH
61788: CALL_OW 255
61792: PUSH
61793: LD_VAR 0 1
61797: PPUSH
61798: CALL_OW 255
61802: NONEQUAL
61803: OR
61804: IFFALSE 61910
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
61806: LD_VAR 0 5
61810: PUSH
61811: LD_INT 1
61813: ARRAY
61814: PPUSH
61815: CALL_OW 305
61819: PUSH
61820: LD_VAR 0 5
61824: PUSH
61825: LD_INT 1
61827: ARRAY
61828: PPUSH
61829: CALL_OW 255
61833: PUSH
61834: LD_VAR 0 1
61838: PPUSH
61839: CALL_OW 255
61843: EQUAL
61844: AND
61845: IFFALSE 61869
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
61847: LD_VAR 0 5
61851: PUSH
61852: LD_INT 1
61854: ARRAY
61855: PPUSH
61856: LD_VAR 0 5
61860: PUSH
61861: LD_INT 2
61863: ARRAY
61864: PPUSH
61865: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
61869: LD_ADDR_EXP 54
61873: PUSH
61874: LD_EXP 54
61878: PPUSH
61879: LD_VAR 0 4
61883: PPUSH
61884: LD_EXP 54
61888: PUSH
61889: LD_VAR 0 4
61893: ARRAY
61894: PPUSH
61895: LD_VAR 0 3
61899: PPUSH
61900: CALL_OW 3
61904: PPUSH
61905: CALL_OW 1
61909: ST_TO_ADDR
// end ; end ;
61910: GO 61739
61912: POP
61913: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61914: LD_VAR 0 1
61918: PPUSH
61919: LD_EXP 54
61923: PUSH
61924: LD_VAR 0 4
61928: ARRAY
61929: PUSH
61930: LD_INT 0
61932: PLUS
61933: PPUSH
61934: CALL_OW 505
// end ;
61938: LD_VAR 0 2
61942: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
61943: LD_INT 0
61945: PPUSH
61946: PPUSH
61947: PPUSH
61948: PPUSH
// if not hack in hackTanks then
61949: LD_VAR 0 1
61953: PUSH
61954: LD_EXP 53
61958: IN
61959: NOT
61960: IFFALSE 61964
// exit ;
61962: GO 62049
// index := GetElementIndex ( hackTanks , hack ) ;
61964: LD_ADDR_VAR 0 5
61968: PUSH
61969: LD_EXP 53
61973: PPUSH
61974: LD_VAR 0 1
61978: PPUSH
61979: CALL 21287 0 2
61983: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61984: LD_ADDR_VAR 0 4
61988: PUSH
61989: DOUBLE
61990: LD_INT 1
61992: DEC
61993: ST_TO_ADDR
61994: LD_EXP 54
61998: PUSH
61999: LD_VAR 0 5
62003: ARRAY
62004: PUSH
62005: FOR_TO
62006: IFFALSE 62047
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62008: LD_EXP 54
62012: PUSH
62013: LD_VAR 0 5
62017: ARRAY
62018: PUSH
62019: LD_VAR 0 4
62023: ARRAY
62024: PUSH
62025: LD_INT 1
62027: ARRAY
62028: PUSH
62029: LD_VAR 0 2
62033: EQUAL
62034: IFFALSE 62045
// KillUnit ( vehicle ) ;
62036: LD_VAR 0 2
62040: PPUSH
62041: CALL_OW 66
62045: GO 62005
62047: POP
62048: POP
// end ;
62049: LD_VAR 0 3
62053: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62054: LD_EXP 58
62058: NOT
62059: IFFALSE 62094
62061: GO 62063
62063: DISABLE
// begin initMiner := true ;
62064: LD_ADDR_EXP 58
62068: PUSH
62069: LD_INT 1
62071: ST_TO_ADDR
// minersList := [ ] ;
62072: LD_ADDR_EXP 59
62076: PUSH
62077: EMPTY
62078: ST_TO_ADDR
// minerMinesList := [ ] ;
62079: LD_ADDR_EXP 60
62083: PUSH
62084: EMPTY
62085: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62086: LD_ADDR_EXP 61
62090: PUSH
62091: LD_INT 5
62093: ST_TO_ADDR
// end ;
62094: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62095: LD_EXP 58
62099: PUSH
62100: LD_INT 34
62102: PUSH
62103: LD_INT 81
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PPUSH
62110: CALL_OW 69
62114: AND
62115: IFFALSE 62576
62117: GO 62119
62119: DISABLE
62120: LD_INT 0
62122: PPUSH
62123: PPUSH
62124: PPUSH
62125: PPUSH
// begin enable ;
62126: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62127: LD_ADDR_VAR 0 1
62131: PUSH
62132: LD_INT 34
62134: PUSH
62135: LD_INT 81
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PPUSH
62142: CALL_OW 69
62146: PUSH
62147: FOR_IN
62148: IFFALSE 62220
// begin if not i in minersList then
62150: LD_VAR 0 1
62154: PUSH
62155: LD_EXP 59
62159: IN
62160: NOT
62161: IFFALSE 62218
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62163: LD_ADDR_EXP 59
62167: PUSH
62168: LD_EXP 59
62172: PPUSH
62173: LD_EXP 59
62177: PUSH
62178: LD_INT 1
62180: PLUS
62181: PPUSH
62182: LD_VAR 0 1
62186: PPUSH
62187: CALL_OW 1
62191: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62192: LD_ADDR_EXP 60
62196: PUSH
62197: LD_EXP 60
62201: PPUSH
62202: LD_EXP 60
62206: PUSH
62207: LD_INT 1
62209: PLUS
62210: PPUSH
62211: EMPTY
62212: PPUSH
62213: CALL_OW 1
62217: ST_TO_ADDR
// end end ;
62218: GO 62147
62220: POP
62221: POP
// for i := minerMinesList downto 1 do
62222: LD_ADDR_VAR 0 1
62226: PUSH
62227: DOUBLE
62228: LD_EXP 60
62232: INC
62233: ST_TO_ADDR
62234: LD_INT 1
62236: PUSH
62237: FOR_DOWNTO
62238: IFFALSE 62574
// begin if IsLive ( minersList [ i ] ) then
62240: LD_EXP 59
62244: PUSH
62245: LD_VAR 0 1
62249: ARRAY
62250: PPUSH
62251: CALL_OW 300
62255: IFFALSE 62283
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62257: LD_EXP 59
62261: PUSH
62262: LD_VAR 0 1
62266: ARRAY
62267: PPUSH
62268: LD_EXP 60
62272: PUSH
62273: LD_VAR 0 1
62277: ARRAY
62278: PPUSH
62279: CALL_OW 505
// if not minerMinesList [ i ] then
62283: LD_EXP 60
62287: PUSH
62288: LD_VAR 0 1
62292: ARRAY
62293: NOT
62294: IFFALSE 62298
// continue ;
62296: GO 62237
// for j := minerMinesList [ i ] downto 1 do
62298: LD_ADDR_VAR 0 2
62302: PUSH
62303: DOUBLE
62304: LD_EXP 60
62308: PUSH
62309: LD_VAR 0 1
62313: ARRAY
62314: INC
62315: ST_TO_ADDR
62316: LD_INT 1
62318: PUSH
62319: FOR_DOWNTO
62320: IFFALSE 62570
// begin side := GetSide ( minersList [ i ] ) ;
62322: LD_ADDR_VAR 0 3
62326: PUSH
62327: LD_EXP 59
62331: PUSH
62332: LD_VAR 0 1
62336: ARRAY
62337: PPUSH
62338: CALL_OW 255
62342: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62343: LD_ADDR_VAR 0 4
62347: PUSH
62348: LD_EXP 60
62352: PUSH
62353: LD_VAR 0 1
62357: ARRAY
62358: PUSH
62359: LD_VAR 0 2
62363: ARRAY
62364: PUSH
62365: LD_INT 1
62367: ARRAY
62368: PPUSH
62369: LD_EXP 60
62373: PUSH
62374: LD_VAR 0 1
62378: ARRAY
62379: PUSH
62380: LD_VAR 0 2
62384: ARRAY
62385: PUSH
62386: LD_INT 2
62388: ARRAY
62389: PPUSH
62390: CALL_OW 428
62394: ST_TO_ADDR
// if not tmp then
62395: LD_VAR 0 4
62399: NOT
62400: IFFALSE 62404
// continue ;
62402: GO 62319
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
62404: LD_VAR 0 4
62408: PUSH
62409: LD_INT 81
62411: PUSH
62412: LD_VAR 0 3
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PPUSH
62421: CALL_OW 69
62425: IN
62426: PUSH
62427: LD_EXP 60
62431: PUSH
62432: LD_VAR 0 1
62436: ARRAY
62437: PUSH
62438: LD_VAR 0 2
62442: ARRAY
62443: PUSH
62444: LD_INT 1
62446: ARRAY
62447: PPUSH
62448: LD_EXP 60
62452: PUSH
62453: LD_VAR 0 1
62457: ARRAY
62458: PUSH
62459: LD_VAR 0 2
62463: ARRAY
62464: PUSH
62465: LD_INT 2
62467: ARRAY
62468: PPUSH
62469: CALL_OW 458
62473: AND
62474: IFFALSE 62568
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62476: LD_EXP 60
62480: PUSH
62481: LD_VAR 0 1
62485: ARRAY
62486: PUSH
62487: LD_VAR 0 2
62491: ARRAY
62492: PUSH
62493: LD_INT 1
62495: ARRAY
62496: PPUSH
62497: LD_EXP 60
62501: PUSH
62502: LD_VAR 0 1
62506: ARRAY
62507: PUSH
62508: LD_VAR 0 2
62512: ARRAY
62513: PUSH
62514: LD_INT 2
62516: ARRAY
62517: PPUSH
62518: LD_VAR 0 3
62522: PPUSH
62523: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62527: LD_ADDR_EXP 60
62531: PUSH
62532: LD_EXP 60
62536: PPUSH
62537: LD_VAR 0 1
62541: PPUSH
62542: LD_EXP 60
62546: PUSH
62547: LD_VAR 0 1
62551: ARRAY
62552: PPUSH
62553: LD_VAR 0 2
62557: PPUSH
62558: CALL_OW 3
62562: PPUSH
62563: CALL_OW 1
62567: ST_TO_ADDR
// end ; end ;
62568: GO 62319
62570: POP
62571: POP
// end ;
62572: GO 62237
62574: POP
62575: POP
// end ;
62576: PPOPN 4
62578: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62579: LD_INT 0
62581: PPUSH
62582: PPUSH
// result := false ;
62583: LD_ADDR_VAR 0 4
62587: PUSH
62588: LD_INT 0
62590: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62591: LD_VAR 0 1
62595: PPUSH
62596: CALL_OW 264
62600: PUSH
62601: LD_INT 81
62603: EQUAL
62604: NOT
62605: IFFALSE 62609
// exit ;
62607: GO 62849
// index := GetElementIndex ( minersList , unit ) ;
62609: LD_ADDR_VAR 0 5
62613: PUSH
62614: LD_EXP 59
62618: PPUSH
62619: LD_VAR 0 1
62623: PPUSH
62624: CALL 21287 0 2
62628: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62629: LD_EXP 60
62633: PUSH
62634: LD_VAR 0 5
62638: ARRAY
62639: PUSH
62640: LD_EXP 61
62644: GREATEREQUAL
62645: IFFALSE 62649
// exit ;
62647: GO 62849
// ComMoveXY ( unit , x , y ) ;
62649: LD_VAR 0 1
62653: PPUSH
62654: LD_VAR 0 2
62658: PPUSH
62659: LD_VAR 0 3
62663: PPUSH
62664: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62668: LD_INT 35
62670: PPUSH
62671: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62675: LD_VAR 0 1
62679: PPUSH
62680: LD_VAR 0 2
62684: PPUSH
62685: LD_VAR 0 3
62689: PPUSH
62690: CALL 53028 0 3
62694: NOT
62695: PUSH
62696: LD_VAR 0 1
62700: PPUSH
62701: CALL_OW 314
62705: AND
62706: IFFALSE 62710
// exit ;
62708: GO 62849
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
62710: LD_VAR 0 2
62714: PPUSH
62715: LD_VAR 0 3
62719: PPUSH
62720: CALL_OW 428
62724: PUSH
62725: LD_VAR 0 1
62729: EQUAL
62730: PUSH
62731: LD_VAR 0 1
62735: PPUSH
62736: CALL_OW 314
62740: NOT
62741: AND
62742: IFFALSE 62668
// PlaySoundXY ( x , y , PlantMine ) ;
62744: LD_VAR 0 2
62748: PPUSH
62749: LD_VAR 0 3
62753: PPUSH
62754: LD_STRING PlantMine
62756: PPUSH
62757: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
62761: LD_VAR 0 2
62765: PPUSH
62766: LD_VAR 0 3
62770: PPUSH
62771: LD_VAR 0 1
62775: PPUSH
62776: CALL_OW 255
62780: PPUSH
62781: LD_INT 0
62783: PPUSH
62784: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62788: LD_ADDR_EXP 60
62792: PUSH
62793: LD_EXP 60
62797: PPUSH
62798: LD_VAR 0 5
62802: PUSH
62803: LD_EXP 60
62807: PUSH
62808: LD_VAR 0 5
62812: ARRAY
62813: PUSH
62814: LD_INT 1
62816: PLUS
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PPUSH
62822: LD_VAR 0 2
62826: PUSH
62827: LD_VAR 0 3
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PPUSH
62836: CALL 21502 0 3
62840: ST_TO_ADDR
// result := true ;
62841: LD_ADDR_VAR 0 4
62845: PUSH
62846: LD_INT 1
62848: ST_TO_ADDR
// end ;
62849: LD_VAR 0 4
62853: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62854: LD_INT 0
62856: PPUSH
62857: PPUSH
62858: PPUSH
// if not unit in minersList then
62859: LD_VAR 0 1
62863: PUSH
62864: LD_EXP 59
62868: IN
62869: NOT
62870: IFFALSE 62874
// exit ;
62872: GO 63266
// index := GetElementIndex ( minersList , unit ) ;
62874: LD_ADDR_VAR 0 6
62878: PUSH
62879: LD_EXP 59
62883: PPUSH
62884: LD_VAR 0 1
62888: PPUSH
62889: CALL 21287 0 2
62893: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
62894: LD_ADDR_VAR 0 5
62898: PUSH
62899: DOUBLE
62900: LD_EXP 60
62904: PUSH
62905: LD_VAR 0 6
62909: ARRAY
62910: INC
62911: ST_TO_ADDR
62912: LD_INT 1
62914: PUSH
62915: FOR_DOWNTO
62916: IFFALSE 63077
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
62918: LD_EXP 60
62922: PUSH
62923: LD_VAR 0 6
62927: ARRAY
62928: PUSH
62929: LD_VAR 0 5
62933: ARRAY
62934: PUSH
62935: LD_INT 1
62937: ARRAY
62938: PUSH
62939: LD_VAR 0 2
62943: EQUAL
62944: PUSH
62945: LD_EXP 60
62949: PUSH
62950: LD_VAR 0 6
62954: ARRAY
62955: PUSH
62956: LD_VAR 0 5
62960: ARRAY
62961: PUSH
62962: LD_INT 2
62964: ARRAY
62965: PUSH
62966: LD_VAR 0 3
62970: EQUAL
62971: AND
62972: IFFALSE 63075
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62974: LD_EXP 60
62978: PUSH
62979: LD_VAR 0 6
62983: ARRAY
62984: PUSH
62985: LD_VAR 0 5
62989: ARRAY
62990: PUSH
62991: LD_INT 1
62993: ARRAY
62994: PPUSH
62995: LD_EXP 60
62999: PUSH
63000: LD_VAR 0 6
63004: ARRAY
63005: PUSH
63006: LD_VAR 0 5
63010: ARRAY
63011: PUSH
63012: LD_INT 2
63014: ARRAY
63015: PPUSH
63016: LD_VAR 0 1
63020: PPUSH
63021: CALL_OW 255
63025: PPUSH
63026: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63030: LD_ADDR_EXP 60
63034: PUSH
63035: LD_EXP 60
63039: PPUSH
63040: LD_VAR 0 6
63044: PPUSH
63045: LD_EXP 60
63049: PUSH
63050: LD_VAR 0 6
63054: ARRAY
63055: PPUSH
63056: LD_VAR 0 5
63060: PPUSH
63061: CALL_OW 3
63065: PPUSH
63066: CALL_OW 1
63070: ST_TO_ADDR
// exit ;
63071: POP
63072: POP
63073: GO 63266
// end ; end ;
63075: GO 62915
63077: POP
63078: POP
// for i := minerMinesList [ index ] downto 1 do
63079: LD_ADDR_VAR 0 5
63083: PUSH
63084: DOUBLE
63085: LD_EXP 60
63089: PUSH
63090: LD_VAR 0 6
63094: ARRAY
63095: INC
63096: ST_TO_ADDR
63097: LD_INT 1
63099: PUSH
63100: FOR_DOWNTO
63101: IFFALSE 63264
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63103: LD_EXP 60
63107: PUSH
63108: LD_VAR 0 6
63112: ARRAY
63113: PUSH
63114: LD_VAR 0 5
63118: ARRAY
63119: PUSH
63120: LD_INT 1
63122: ARRAY
63123: PPUSH
63124: LD_EXP 60
63128: PUSH
63129: LD_VAR 0 6
63133: ARRAY
63134: PUSH
63135: LD_VAR 0 5
63139: ARRAY
63140: PUSH
63141: LD_INT 2
63143: ARRAY
63144: PPUSH
63145: LD_VAR 0 2
63149: PPUSH
63150: LD_VAR 0 3
63154: PPUSH
63155: CALL_OW 298
63159: PUSH
63160: LD_INT 6
63162: LESS
63163: IFFALSE 63262
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63165: LD_EXP 60
63169: PUSH
63170: LD_VAR 0 6
63174: ARRAY
63175: PUSH
63176: LD_VAR 0 5
63180: ARRAY
63181: PUSH
63182: LD_INT 1
63184: ARRAY
63185: PPUSH
63186: LD_EXP 60
63190: PUSH
63191: LD_VAR 0 6
63195: ARRAY
63196: PUSH
63197: LD_VAR 0 5
63201: ARRAY
63202: PUSH
63203: LD_INT 2
63205: ARRAY
63206: PPUSH
63207: LD_VAR 0 1
63211: PPUSH
63212: CALL_OW 255
63216: PPUSH
63217: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63221: LD_ADDR_EXP 60
63225: PUSH
63226: LD_EXP 60
63230: PPUSH
63231: LD_VAR 0 6
63235: PPUSH
63236: LD_EXP 60
63240: PUSH
63241: LD_VAR 0 6
63245: ARRAY
63246: PPUSH
63247: LD_VAR 0 5
63251: PPUSH
63252: CALL_OW 3
63256: PPUSH
63257: CALL_OW 1
63261: ST_TO_ADDR
// end ; end ;
63262: GO 63100
63264: POP
63265: POP
// end ;
63266: LD_VAR 0 4
63270: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63271: LD_INT 0
63273: PPUSH
63274: PPUSH
63275: PPUSH
63276: PPUSH
63277: PPUSH
63278: PPUSH
63279: PPUSH
63280: PPUSH
63281: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63282: LD_VAR 0 1
63286: PPUSH
63287: CALL_OW 264
63291: PUSH
63292: LD_INT 81
63294: EQUAL
63295: NOT
63296: PUSH
63297: LD_VAR 0 1
63301: PUSH
63302: LD_EXP 59
63306: IN
63307: NOT
63308: OR
63309: IFFALSE 63313
// exit ;
63311: GO 63635
// index := GetElementIndex ( minersList , unit ) ;
63313: LD_ADDR_VAR 0 6
63317: PUSH
63318: LD_EXP 59
63322: PPUSH
63323: LD_VAR 0 1
63327: PPUSH
63328: CALL 21287 0 2
63332: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
63333: LD_ADDR_VAR 0 8
63337: PUSH
63338: LD_EXP 61
63342: PUSH
63343: LD_EXP 60
63347: PUSH
63348: LD_VAR 0 6
63352: ARRAY
63353: MINUS
63354: ST_TO_ADDR
// if not minesFreeAmount then
63355: LD_VAR 0 8
63359: NOT
63360: IFFALSE 63364
// exit ;
63362: GO 63635
// tmp := [ ] ;
63364: LD_ADDR_VAR 0 7
63368: PUSH
63369: EMPTY
63370: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
63371: LD_ADDR_VAR 0 5
63375: PUSH
63376: DOUBLE
63377: LD_INT 1
63379: DEC
63380: ST_TO_ADDR
63381: LD_VAR 0 8
63385: PUSH
63386: FOR_TO
63387: IFFALSE 63582
// begin _d := rand ( 0 , 5 ) ;
63389: LD_ADDR_VAR 0 11
63393: PUSH
63394: LD_INT 0
63396: PPUSH
63397: LD_INT 5
63399: PPUSH
63400: CALL_OW 12
63404: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
63405: LD_ADDR_VAR 0 12
63409: PUSH
63410: LD_INT 2
63412: PPUSH
63413: LD_INT 6
63415: PPUSH
63416: CALL_OW 12
63420: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
63421: LD_ADDR_VAR 0 9
63425: PUSH
63426: LD_VAR 0 2
63430: PPUSH
63431: LD_VAR 0 11
63435: PPUSH
63436: LD_VAR 0 12
63440: PPUSH
63441: CALL_OW 272
63445: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
63446: LD_ADDR_VAR 0 10
63450: PUSH
63451: LD_VAR 0 3
63455: PPUSH
63456: LD_VAR 0 11
63460: PPUSH
63461: LD_VAR 0 12
63465: PPUSH
63466: CALL_OW 273
63470: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
63471: LD_VAR 0 9
63475: PPUSH
63476: LD_VAR 0 10
63480: PPUSH
63481: CALL_OW 488
63485: PUSH
63486: LD_VAR 0 9
63490: PUSH
63491: LD_VAR 0 10
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_VAR 0 7
63504: IN
63505: NOT
63506: AND
63507: PUSH
63508: LD_VAR 0 9
63512: PPUSH
63513: LD_VAR 0 10
63517: PPUSH
63518: CALL_OW 458
63522: NOT
63523: AND
63524: IFFALSE 63566
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63526: LD_ADDR_VAR 0 7
63530: PUSH
63531: LD_VAR 0 7
63535: PPUSH
63536: LD_VAR 0 7
63540: PUSH
63541: LD_INT 1
63543: PLUS
63544: PPUSH
63545: LD_VAR 0 9
63549: PUSH
63550: LD_VAR 0 10
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PPUSH
63559: CALL_OW 1
63563: ST_TO_ADDR
63564: GO 63580
// i := i - 1 ;
63566: LD_ADDR_VAR 0 5
63570: PUSH
63571: LD_VAR 0 5
63575: PUSH
63576: LD_INT 1
63578: MINUS
63579: ST_TO_ADDR
// end ;
63580: GO 63386
63582: POP
63583: POP
// for i in tmp do
63584: LD_ADDR_VAR 0 5
63588: PUSH
63589: LD_VAR 0 7
63593: PUSH
63594: FOR_IN
63595: IFFALSE 63633
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63597: LD_VAR 0 1
63601: PPUSH
63602: LD_VAR 0 5
63606: PUSH
63607: LD_INT 1
63609: ARRAY
63610: PPUSH
63611: LD_VAR 0 5
63615: PUSH
63616: LD_INT 2
63618: ARRAY
63619: PPUSH
63620: CALL 62579 0 3
63624: NOT
63625: IFFALSE 63631
// exit ;
63627: POP
63628: POP
63629: GO 63635
63631: GO 63594
63633: POP
63634: POP
// end ;
63635: LD_VAR 0 4
63639: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
63640: LD_INT 0
63642: PPUSH
63643: PPUSH
63644: PPUSH
63645: PPUSH
63646: PPUSH
63647: PPUSH
63648: PPUSH
// if not GetClass ( unit ) = class_sniper then
63649: LD_VAR 0 1
63653: PPUSH
63654: CALL_OW 257
63658: PUSH
63659: LD_INT 5
63661: EQUAL
63662: NOT
63663: IFFALSE 63667
// exit ;
63665: GO 64055
// dist := 8 ;
63667: LD_ADDR_VAR 0 5
63671: PUSH
63672: LD_INT 8
63674: ST_TO_ADDR
// viewRange := 12 ;
63675: LD_ADDR_VAR 0 7
63679: PUSH
63680: LD_INT 12
63682: ST_TO_ADDR
// side := GetSide ( unit ) ;
63683: LD_ADDR_VAR 0 6
63687: PUSH
63688: LD_VAR 0 1
63692: PPUSH
63693: CALL_OW 255
63697: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
63698: LD_INT 61
63700: PPUSH
63701: LD_VAR 0 6
63705: PPUSH
63706: CALL_OW 321
63710: PUSH
63711: LD_INT 2
63713: EQUAL
63714: IFFALSE 63724
// viewRange := 16 ;
63716: LD_ADDR_VAR 0 7
63720: PUSH
63721: LD_INT 16
63723: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
63724: LD_VAR 0 1
63728: PPUSH
63729: LD_VAR 0 2
63733: PPUSH
63734: LD_VAR 0 3
63738: PPUSH
63739: CALL_OW 297
63743: PUSH
63744: LD_VAR 0 5
63748: GREATER
63749: IFFALSE 63828
// begin ComMoveXY ( unit , x , y ) ;
63751: LD_VAR 0 1
63755: PPUSH
63756: LD_VAR 0 2
63760: PPUSH
63761: LD_VAR 0 3
63765: PPUSH
63766: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63770: LD_INT 35
63772: PPUSH
63773: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
63777: LD_VAR 0 1
63781: PPUSH
63782: LD_VAR 0 2
63786: PPUSH
63787: LD_VAR 0 3
63791: PPUSH
63792: CALL 53028 0 3
63796: NOT
63797: IFFALSE 63801
// exit ;
63799: GO 64055
// until GetDistUnitXY ( unit , x , y ) < dist ;
63801: LD_VAR 0 1
63805: PPUSH
63806: LD_VAR 0 2
63810: PPUSH
63811: LD_VAR 0 3
63815: PPUSH
63816: CALL_OW 297
63820: PUSH
63821: LD_VAR 0 5
63825: LESS
63826: IFFALSE 63770
// end ; ComTurnXY ( unit , x , y ) ;
63828: LD_VAR 0 1
63832: PPUSH
63833: LD_VAR 0 2
63837: PPUSH
63838: LD_VAR 0 3
63842: PPUSH
63843: CALL_OW 118
// wait ( 5 ) ;
63847: LD_INT 5
63849: PPUSH
63850: CALL_OW 67
// _d := GetDir ( unit ) ;
63854: LD_ADDR_VAR 0 10
63858: PUSH
63859: LD_VAR 0 1
63863: PPUSH
63864: CALL_OW 254
63868: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
63869: LD_ADDR_VAR 0 8
63873: PUSH
63874: LD_VAR 0 1
63878: PPUSH
63879: CALL_OW 250
63883: PPUSH
63884: LD_VAR 0 10
63888: PPUSH
63889: LD_VAR 0 5
63893: PPUSH
63894: CALL_OW 272
63898: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
63899: LD_ADDR_VAR 0 9
63903: PUSH
63904: LD_VAR 0 1
63908: PPUSH
63909: CALL_OW 251
63913: PPUSH
63914: LD_VAR 0 10
63918: PPUSH
63919: LD_VAR 0 5
63923: PPUSH
63924: CALL_OW 273
63928: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63929: LD_VAR 0 8
63933: PPUSH
63934: LD_VAR 0 9
63938: PPUSH
63939: CALL_OW 488
63943: NOT
63944: IFFALSE 63948
// exit ;
63946: GO 64055
// ComAnimCustom ( unit , 1 ) ;
63948: LD_VAR 0 1
63952: PPUSH
63953: LD_INT 1
63955: PPUSH
63956: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63960: LD_VAR 0 8
63964: PPUSH
63965: LD_VAR 0 9
63969: PPUSH
63970: LD_VAR 0 6
63974: PPUSH
63975: LD_VAR 0 7
63979: PPUSH
63980: CALL_OW 330
// repeat wait ( 1 ) ;
63984: LD_INT 1
63986: PPUSH
63987: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
63991: LD_VAR 0 1
63995: PPUSH
63996: CALL_OW 316
64000: PUSH
64001: LD_VAR 0 1
64005: PPUSH
64006: CALL_OW 314
64010: OR
64011: PUSH
64012: LD_VAR 0 1
64016: PPUSH
64017: CALL_OW 302
64021: NOT
64022: OR
64023: PUSH
64024: LD_VAR 0 1
64028: PPUSH
64029: CALL_OW 301
64033: OR
64034: IFFALSE 63984
// RemoveSeeing ( _x , _y , side ) ;
64036: LD_VAR 0 8
64040: PPUSH
64041: LD_VAR 0 9
64045: PPUSH
64046: LD_VAR 0 6
64050: PPUSH
64051: CALL_OW 331
// end ; end_of_file
64055: LD_VAR 0 4
64059: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64060: LD_VAR 0 1
64064: PUSH
64065: LD_INT 200
64067: DOUBLE
64068: GREATEREQUAL
64069: IFFALSE 64077
64071: LD_INT 299
64073: DOUBLE
64074: LESSEQUAL
64075: IFTRUE 64079
64077: GO 64111
64079: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64080: LD_VAR 0 1
64084: PPUSH
64085: LD_VAR 0 2
64089: PPUSH
64090: LD_VAR 0 3
64094: PPUSH
64095: LD_VAR 0 4
64099: PPUSH
64100: LD_VAR 0 5
64104: PPUSH
64105: CALL 59542 0 5
64109: GO 64188
64111: LD_INT 300
64113: DOUBLE
64114: GREATEREQUAL
64115: IFFALSE 64123
64117: LD_INT 399
64119: DOUBLE
64120: LESSEQUAL
64121: IFTRUE 64125
64123: GO 64187
64125: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64126: LD_VAR 0 1
64130: PPUSH
64131: LD_VAR 0 2
64135: PPUSH
64136: LD_VAR 0 3
64140: PPUSH
64141: LD_VAR 0 4
64145: PPUSH
64146: LD_VAR 0 5
64150: PPUSH
64151: LD_VAR 0 6
64155: PPUSH
64156: LD_VAR 0 7
64160: PPUSH
64161: LD_VAR 0 8
64165: PPUSH
64166: LD_VAR 0 9
64170: PPUSH
64171: LD_VAR 0 10
64175: PPUSH
64176: LD_VAR 0 11
64180: PPUSH
64181: CALL 76726 0 11
64185: GO 64188
64187: POP
// end ;
64188: PPOPN 11
64190: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64191: LD_VAR 0 1
64195: PPUSH
64196: LD_VAR 0 2
64200: PPUSH
64201: LD_VAR 0 3
64205: PPUSH
64206: LD_VAR 0 4
64210: PPUSH
64211: LD_VAR 0 5
64215: PPUSH
64216: CALL 59278 0 5
// end ; end_of_file
64220: PPOPN 5
64222: END
// export globalGameSaveCounter ; every 0 0$1 do
64223: GO 64225
64225: DISABLE
// begin enable ;
64226: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64227: LD_STRING updateTimer(
64229: PUSH
64230: LD_OWVAR 1
64234: STR
64235: PUSH
64236: LD_STRING );
64238: STR
64239: PPUSH
64240: CALL_OW 559
// end ;
64244: END
// every 0 0$1 do
64245: GO 64247
64247: DISABLE
// begin globalGameSaveCounter := 0 ;
64248: LD_ADDR_EXP 62
64252: PUSH
64253: LD_INT 0
64255: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
64256: LD_STRING setGameSaveCounter(0)
64258: PPUSH
64259: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
64263: LD_STRING initStreamRollete();
64265: PPUSH
64266: CALL_OW 559
// InitStreamMode ;
64270: CALL 65596 0 0
// DefineStreamItems ( false ) ;
64274: LD_INT 0
64276: PPUSH
64277: CALL 66060 0 1
// end ;
64281: END
// export function SOS_MapStart ( ) ; begin
64282: LD_INT 0
64284: PPUSH
// if streamModeActive then
64285: LD_EXP 63
64289: IFFALSE 64298
// DefineStreamItems ( true ) ;
64291: LD_INT 1
64293: PPUSH
64294: CALL 66060 0 1
// UpdateLuaVariables ( ) ;
64298: CALL 64315 0 0
// UpdateFactoryWaypoints ( ) ;
64302: CALL 78929 0 0
// UpdateWarehouseGatheringPoints ( ) ;
64306: CALL 79186 0 0
// end ;
64310: LD_VAR 0 1
64314: RET
// function UpdateLuaVariables ( ) ; begin
64315: LD_INT 0
64317: PPUSH
// if globalGameSaveCounter then
64318: LD_EXP 62
64322: IFFALSE 64356
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
64324: LD_ADDR_EXP 62
64328: PUSH
64329: LD_EXP 62
64333: PPUSH
64334: CALL 55592 0 1
64338: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
64339: LD_STRING setGameSaveCounter(
64341: PUSH
64342: LD_EXP 62
64346: STR
64347: PUSH
64348: LD_STRING )
64350: STR
64351: PPUSH
64352: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64356: LD_STRING setGameDifficulty(
64358: PUSH
64359: LD_OWVAR 67
64363: STR
64364: PUSH
64365: LD_STRING )
64367: STR
64368: PPUSH
64369: CALL_OW 559
// end ;
64373: LD_VAR 0 1
64377: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64378: LD_INT 0
64380: PPUSH
// if p2 = stream_mode then
64381: LD_VAR 0 2
64385: PUSH
64386: LD_INT 100
64388: EQUAL
64389: IFFALSE 65392
// begin if not StreamModeActive then
64391: LD_EXP 63
64395: NOT
64396: IFFALSE 64406
// StreamModeActive := true ;
64398: LD_ADDR_EXP 63
64402: PUSH
64403: LD_INT 1
64405: ST_TO_ADDR
// if p3 = 0 then
64406: LD_VAR 0 3
64410: PUSH
64411: LD_INT 0
64413: EQUAL
64414: IFFALSE 64420
// InitStreamMode ;
64416: CALL 65596 0 0
// if p3 = 1 then
64420: LD_VAR 0 3
64424: PUSH
64425: LD_INT 1
64427: EQUAL
64428: IFFALSE 64438
// sRocket := true ;
64430: LD_ADDR_EXP 68
64434: PUSH
64435: LD_INT 1
64437: ST_TO_ADDR
// if p3 = 2 then
64438: LD_VAR 0 3
64442: PUSH
64443: LD_INT 2
64445: EQUAL
64446: IFFALSE 64456
// sSpeed := true ;
64448: LD_ADDR_EXP 67
64452: PUSH
64453: LD_INT 1
64455: ST_TO_ADDR
// if p3 = 3 then
64456: LD_VAR 0 3
64460: PUSH
64461: LD_INT 3
64463: EQUAL
64464: IFFALSE 64474
// sEngine := true ;
64466: LD_ADDR_EXP 69
64470: PUSH
64471: LD_INT 1
64473: ST_TO_ADDR
// if p3 = 4 then
64474: LD_VAR 0 3
64478: PUSH
64479: LD_INT 4
64481: EQUAL
64482: IFFALSE 64492
// sSpec := true ;
64484: LD_ADDR_EXP 66
64488: PUSH
64489: LD_INT 1
64491: ST_TO_ADDR
// if p3 = 5 then
64492: LD_VAR 0 3
64496: PUSH
64497: LD_INT 5
64499: EQUAL
64500: IFFALSE 64510
// sLevel := true ;
64502: LD_ADDR_EXP 70
64506: PUSH
64507: LD_INT 1
64509: ST_TO_ADDR
// if p3 = 6 then
64510: LD_VAR 0 3
64514: PUSH
64515: LD_INT 6
64517: EQUAL
64518: IFFALSE 64528
// sArmoury := true ;
64520: LD_ADDR_EXP 71
64524: PUSH
64525: LD_INT 1
64527: ST_TO_ADDR
// if p3 = 7 then
64528: LD_VAR 0 3
64532: PUSH
64533: LD_INT 7
64535: EQUAL
64536: IFFALSE 64546
// sRadar := true ;
64538: LD_ADDR_EXP 72
64542: PUSH
64543: LD_INT 1
64545: ST_TO_ADDR
// if p3 = 8 then
64546: LD_VAR 0 3
64550: PUSH
64551: LD_INT 8
64553: EQUAL
64554: IFFALSE 64564
// sBunker := true ;
64556: LD_ADDR_EXP 73
64560: PUSH
64561: LD_INT 1
64563: ST_TO_ADDR
// if p3 = 9 then
64564: LD_VAR 0 3
64568: PUSH
64569: LD_INT 9
64571: EQUAL
64572: IFFALSE 64582
// sHack := true ;
64574: LD_ADDR_EXP 74
64578: PUSH
64579: LD_INT 1
64581: ST_TO_ADDR
// if p3 = 10 then
64582: LD_VAR 0 3
64586: PUSH
64587: LD_INT 10
64589: EQUAL
64590: IFFALSE 64600
// sFire := true ;
64592: LD_ADDR_EXP 75
64596: PUSH
64597: LD_INT 1
64599: ST_TO_ADDR
// if p3 = 11 then
64600: LD_VAR 0 3
64604: PUSH
64605: LD_INT 11
64607: EQUAL
64608: IFFALSE 64618
// sRefresh := true ;
64610: LD_ADDR_EXP 76
64614: PUSH
64615: LD_INT 1
64617: ST_TO_ADDR
// if p3 = 12 then
64618: LD_VAR 0 3
64622: PUSH
64623: LD_INT 12
64625: EQUAL
64626: IFFALSE 64636
// sExp := true ;
64628: LD_ADDR_EXP 77
64632: PUSH
64633: LD_INT 1
64635: ST_TO_ADDR
// if p3 = 13 then
64636: LD_VAR 0 3
64640: PUSH
64641: LD_INT 13
64643: EQUAL
64644: IFFALSE 64654
// sDepot := true ;
64646: LD_ADDR_EXP 78
64650: PUSH
64651: LD_INT 1
64653: ST_TO_ADDR
// if p3 = 14 then
64654: LD_VAR 0 3
64658: PUSH
64659: LD_INT 14
64661: EQUAL
64662: IFFALSE 64672
// sFlag := true ;
64664: LD_ADDR_EXP 79
64668: PUSH
64669: LD_INT 1
64671: ST_TO_ADDR
// if p3 = 15 then
64672: LD_VAR 0 3
64676: PUSH
64677: LD_INT 15
64679: EQUAL
64680: IFFALSE 64690
// sKamikadze := true ;
64682: LD_ADDR_EXP 87
64686: PUSH
64687: LD_INT 1
64689: ST_TO_ADDR
// if p3 = 16 then
64690: LD_VAR 0 3
64694: PUSH
64695: LD_INT 16
64697: EQUAL
64698: IFFALSE 64708
// sTroll := true ;
64700: LD_ADDR_EXP 88
64704: PUSH
64705: LD_INT 1
64707: ST_TO_ADDR
// if p3 = 17 then
64708: LD_VAR 0 3
64712: PUSH
64713: LD_INT 17
64715: EQUAL
64716: IFFALSE 64726
// sSlow := true ;
64718: LD_ADDR_EXP 89
64722: PUSH
64723: LD_INT 1
64725: ST_TO_ADDR
// if p3 = 18 then
64726: LD_VAR 0 3
64730: PUSH
64731: LD_INT 18
64733: EQUAL
64734: IFFALSE 64744
// sLack := true ;
64736: LD_ADDR_EXP 90
64740: PUSH
64741: LD_INT 1
64743: ST_TO_ADDR
// if p3 = 19 then
64744: LD_VAR 0 3
64748: PUSH
64749: LD_INT 19
64751: EQUAL
64752: IFFALSE 64762
// sTank := true ;
64754: LD_ADDR_EXP 92
64758: PUSH
64759: LD_INT 1
64761: ST_TO_ADDR
// if p3 = 20 then
64762: LD_VAR 0 3
64766: PUSH
64767: LD_INT 20
64769: EQUAL
64770: IFFALSE 64780
// sRemote := true ;
64772: LD_ADDR_EXP 93
64776: PUSH
64777: LD_INT 1
64779: ST_TO_ADDR
// if p3 = 21 then
64780: LD_VAR 0 3
64784: PUSH
64785: LD_INT 21
64787: EQUAL
64788: IFFALSE 64798
// sPowell := true ;
64790: LD_ADDR_EXP 94
64794: PUSH
64795: LD_INT 1
64797: ST_TO_ADDR
// if p3 = 22 then
64798: LD_VAR 0 3
64802: PUSH
64803: LD_INT 22
64805: EQUAL
64806: IFFALSE 64816
// sTeleport := true ;
64808: LD_ADDR_EXP 97
64812: PUSH
64813: LD_INT 1
64815: ST_TO_ADDR
// if p3 = 23 then
64816: LD_VAR 0 3
64820: PUSH
64821: LD_INT 23
64823: EQUAL
64824: IFFALSE 64834
// sOilTower := true ;
64826: LD_ADDR_EXP 99
64830: PUSH
64831: LD_INT 1
64833: ST_TO_ADDR
// if p3 = 24 then
64834: LD_VAR 0 3
64838: PUSH
64839: LD_INT 24
64841: EQUAL
64842: IFFALSE 64852
// sShovel := true ;
64844: LD_ADDR_EXP 100
64848: PUSH
64849: LD_INT 1
64851: ST_TO_ADDR
// if p3 = 25 then
64852: LD_VAR 0 3
64856: PUSH
64857: LD_INT 25
64859: EQUAL
64860: IFFALSE 64870
// sSheik := true ;
64862: LD_ADDR_EXP 101
64866: PUSH
64867: LD_INT 1
64869: ST_TO_ADDR
// if p3 = 26 then
64870: LD_VAR 0 3
64874: PUSH
64875: LD_INT 26
64877: EQUAL
64878: IFFALSE 64888
// sEarthquake := true ;
64880: LD_ADDR_EXP 103
64884: PUSH
64885: LD_INT 1
64887: ST_TO_ADDR
// if p3 = 27 then
64888: LD_VAR 0 3
64892: PUSH
64893: LD_INT 27
64895: EQUAL
64896: IFFALSE 64906
// sAI := true ;
64898: LD_ADDR_EXP 104
64902: PUSH
64903: LD_INT 1
64905: ST_TO_ADDR
// if p3 = 28 then
64906: LD_VAR 0 3
64910: PUSH
64911: LD_INT 28
64913: EQUAL
64914: IFFALSE 64924
// sCargo := true ;
64916: LD_ADDR_EXP 107
64920: PUSH
64921: LD_INT 1
64923: ST_TO_ADDR
// if p3 = 29 then
64924: LD_VAR 0 3
64928: PUSH
64929: LD_INT 29
64931: EQUAL
64932: IFFALSE 64942
// sDLaser := true ;
64934: LD_ADDR_EXP 108
64938: PUSH
64939: LD_INT 1
64941: ST_TO_ADDR
// if p3 = 30 then
64942: LD_VAR 0 3
64946: PUSH
64947: LD_INT 30
64949: EQUAL
64950: IFFALSE 64960
// sExchange := true ;
64952: LD_ADDR_EXP 109
64956: PUSH
64957: LD_INT 1
64959: ST_TO_ADDR
// if p3 = 31 then
64960: LD_VAR 0 3
64964: PUSH
64965: LD_INT 31
64967: EQUAL
64968: IFFALSE 64978
// sFac := true ;
64970: LD_ADDR_EXP 110
64974: PUSH
64975: LD_INT 1
64977: ST_TO_ADDR
// if p3 = 32 then
64978: LD_VAR 0 3
64982: PUSH
64983: LD_INT 32
64985: EQUAL
64986: IFFALSE 64996
// sPower := true ;
64988: LD_ADDR_EXP 111
64992: PUSH
64993: LD_INT 1
64995: ST_TO_ADDR
// if p3 = 33 then
64996: LD_VAR 0 3
65000: PUSH
65001: LD_INT 33
65003: EQUAL
65004: IFFALSE 65014
// sRandom := true ;
65006: LD_ADDR_EXP 112
65010: PUSH
65011: LD_INT 1
65013: ST_TO_ADDR
// if p3 = 34 then
65014: LD_VAR 0 3
65018: PUSH
65019: LD_INT 34
65021: EQUAL
65022: IFFALSE 65032
// sShield := true ;
65024: LD_ADDR_EXP 113
65028: PUSH
65029: LD_INT 1
65031: ST_TO_ADDR
// if p3 = 35 then
65032: LD_VAR 0 3
65036: PUSH
65037: LD_INT 35
65039: EQUAL
65040: IFFALSE 65050
// sTime := true ;
65042: LD_ADDR_EXP 114
65046: PUSH
65047: LD_INT 1
65049: ST_TO_ADDR
// if p3 = 36 then
65050: LD_VAR 0 3
65054: PUSH
65055: LD_INT 36
65057: EQUAL
65058: IFFALSE 65068
// sTools := true ;
65060: LD_ADDR_EXP 115
65064: PUSH
65065: LD_INT 1
65067: ST_TO_ADDR
// if p3 = 101 then
65068: LD_VAR 0 3
65072: PUSH
65073: LD_INT 101
65075: EQUAL
65076: IFFALSE 65086
// sSold := true ;
65078: LD_ADDR_EXP 80
65082: PUSH
65083: LD_INT 1
65085: ST_TO_ADDR
// if p3 = 102 then
65086: LD_VAR 0 3
65090: PUSH
65091: LD_INT 102
65093: EQUAL
65094: IFFALSE 65104
// sDiff := true ;
65096: LD_ADDR_EXP 81
65100: PUSH
65101: LD_INT 1
65103: ST_TO_ADDR
// if p3 = 103 then
65104: LD_VAR 0 3
65108: PUSH
65109: LD_INT 103
65111: EQUAL
65112: IFFALSE 65122
// sFog := true ;
65114: LD_ADDR_EXP 84
65118: PUSH
65119: LD_INT 1
65121: ST_TO_ADDR
// if p3 = 104 then
65122: LD_VAR 0 3
65126: PUSH
65127: LD_INT 104
65129: EQUAL
65130: IFFALSE 65140
// sReset := true ;
65132: LD_ADDR_EXP 85
65136: PUSH
65137: LD_INT 1
65139: ST_TO_ADDR
// if p3 = 105 then
65140: LD_VAR 0 3
65144: PUSH
65145: LD_INT 105
65147: EQUAL
65148: IFFALSE 65158
// sSun := true ;
65150: LD_ADDR_EXP 86
65154: PUSH
65155: LD_INT 1
65157: ST_TO_ADDR
// if p3 = 106 then
65158: LD_VAR 0 3
65162: PUSH
65163: LD_INT 106
65165: EQUAL
65166: IFFALSE 65176
// sTiger := true ;
65168: LD_ADDR_EXP 82
65172: PUSH
65173: LD_INT 1
65175: ST_TO_ADDR
// if p3 = 107 then
65176: LD_VAR 0 3
65180: PUSH
65181: LD_INT 107
65183: EQUAL
65184: IFFALSE 65194
// sBomb := true ;
65186: LD_ADDR_EXP 83
65190: PUSH
65191: LD_INT 1
65193: ST_TO_ADDR
// if p3 = 108 then
65194: LD_VAR 0 3
65198: PUSH
65199: LD_INT 108
65201: EQUAL
65202: IFFALSE 65212
// sWound := true ;
65204: LD_ADDR_EXP 91
65208: PUSH
65209: LD_INT 1
65211: ST_TO_ADDR
// if p3 = 109 then
65212: LD_VAR 0 3
65216: PUSH
65217: LD_INT 109
65219: EQUAL
65220: IFFALSE 65230
// sBetray := true ;
65222: LD_ADDR_EXP 95
65226: PUSH
65227: LD_INT 1
65229: ST_TO_ADDR
// if p3 = 110 then
65230: LD_VAR 0 3
65234: PUSH
65235: LD_INT 110
65237: EQUAL
65238: IFFALSE 65248
// sContamin := true ;
65240: LD_ADDR_EXP 96
65244: PUSH
65245: LD_INT 1
65247: ST_TO_ADDR
// if p3 = 111 then
65248: LD_VAR 0 3
65252: PUSH
65253: LD_INT 111
65255: EQUAL
65256: IFFALSE 65266
// sOil := true ;
65258: LD_ADDR_EXP 98
65262: PUSH
65263: LD_INT 1
65265: ST_TO_ADDR
// if p3 = 112 then
65266: LD_VAR 0 3
65270: PUSH
65271: LD_INT 112
65273: EQUAL
65274: IFFALSE 65284
// sStu := true ;
65276: LD_ADDR_EXP 102
65280: PUSH
65281: LD_INT 1
65283: ST_TO_ADDR
// if p3 = 113 then
65284: LD_VAR 0 3
65288: PUSH
65289: LD_INT 113
65291: EQUAL
65292: IFFALSE 65302
// sBazooka := true ;
65294: LD_ADDR_EXP 105
65298: PUSH
65299: LD_INT 1
65301: ST_TO_ADDR
// if p3 = 114 then
65302: LD_VAR 0 3
65306: PUSH
65307: LD_INT 114
65309: EQUAL
65310: IFFALSE 65320
// sMortar := true ;
65312: LD_ADDR_EXP 106
65316: PUSH
65317: LD_INT 1
65319: ST_TO_ADDR
// if p3 = 115 then
65320: LD_VAR 0 3
65324: PUSH
65325: LD_INT 115
65327: EQUAL
65328: IFFALSE 65338
// sRanger := true ;
65330: LD_ADDR_EXP 116
65334: PUSH
65335: LD_INT 1
65337: ST_TO_ADDR
// if p3 = 116 then
65338: LD_VAR 0 3
65342: PUSH
65343: LD_INT 116
65345: EQUAL
65346: IFFALSE 65356
// sComputer := true ;
65348: LD_ADDR_EXP 117
65352: PUSH
65353: LD_INT 1
65355: ST_TO_ADDR
// if p3 = 117 then
65356: LD_VAR 0 3
65360: PUSH
65361: LD_INT 117
65363: EQUAL
65364: IFFALSE 65374
// s30 := true ;
65366: LD_ADDR_EXP 118
65370: PUSH
65371: LD_INT 1
65373: ST_TO_ADDR
// if p3 = 118 then
65374: LD_VAR 0 3
65378: PUSH
65379: LD_INT 118
65381: EQUAL
65382: IFFALSE 65392
// s60 := true ;
65384: LD_ADDR_EXP 119
65388: PUSH
65389: LD_INT 1
65391: ST_TO_ADDR
// end ; if p2 = hack_mode then
65392: LD_VAR 0 2
65396: PUSH
65397: LD_INT 101
65399: EQUAL
65400: IFFALSE 65528
// begin case p3 of 1 :
65402: LD_VAR 0 3
65406: PUSH
65407: LD_INT 1
65409: DOUBLE
65410: EQUAL
65411: IFTRUE 65415
65413: GO 65422
65415: POP
// hHackUnlimitedResources ; 2 :
65416: CALL 77675 0 0
65420: GO 65528
65422: LD_INT 2
65424: DOUBLE
65425: EQUAL
65426: IFTRUE 65430
65428: GO 65437
65430: POP
// hHackSetLevel10 ; 3 :
65431: CALL 77808 0 0
65435: GO 65528
65437: LD_INT 3
65439: DOUBLE
65440: EQUAL
65441: IFTRUE 65445
65443: GO 65452
65445: POP
// hHackSetLevel10YourUnits ; 4 :
65446: CALL 77893 0 0
65450: GO 65528
65452: LD_INT 4
65454: DOUBLE
65455: EQUAL
65456: IFTRUE 65460
65458: GO 65467
65460: POP
// hHackInvincible ; 5 :
65461: CALL 78341 0 0
65465: GO 65528
65467: LD_INT 5
65469: DOUBLE
65470: EQUAL
65471: IFTRUE 65475
65473: GO 65482
65475: POP
// hHackInvisible ; 6 :
65476: CALL 78452 0 0
65480: GO 65528
65482: LD_INT 6
65484: DOUBLE
65485: EQUAL
65486: IFTRUE 65490
65488: GO 65497
65490: POP
// hHackChangeYourSide ; 7 :
65491: CALL 78509 0 0
65495: GO 65528
65497: LD_INT 7
65499: DOUBLE
65500: EQUAL
65501: IFTRUE 65505
65503: GO 65512
65505: POP
// hHackChangeUnitSide ; 8 :
65506: CALL 78551 0 0
65510: GO 65528
65512: LD_INT 8
65514: DOUBLE
65515: EQUAL
65516: IFTRUE 65520
65518: GO 65527
65520: POP
// hHackFog ; end ;
65521: CALL 78652 0 0
65525: GO 65528
65527: POP
// end ; if p2 = game_save_mode then
65528: LD_VAR 0 2
65532: PUSH
65533: LD_INT 102
65535: EQUAL
65536: IFFALSE 65591
// begin if p3 = 1 then
65538: LD_VAR 0 3
65542: PUSH
65543: LD_INT 1
65545: EQUAL
65546: IFFALSE 65558
// globalGameSaveCounter := p4 ;
65548: LD_ADDR_EXP 62
65552: PUSH
65553: LD_VAR 0 4
65557: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
65558: LD_VAR 0 3
65562: PUSH
65563: LD_INT 2
65565: EQUAL
65566: PUSH
65567: LD_EXP 62
65571: AND
65572: IFFALSE 65591
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
65574: LD_STRING setGameSaveCounter(
65576: PUSH
65577: LD_EXP 62
65581: STR
65582: PUSH
65583: LD_STRING )
65585: STR
65586: PPUSH
65587: CALL_OW 559
// end ; end ;
65591: LD_VAR 0 7
65595: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
65596: LD_INT 0
65598: PPUSH
// streamModeActive := false ;
65599: LD_ADDR_EXP 63
65603: PUSH
65604: LD_INT 0
65606: ST_TO_ADDR
// normalCounter := 36 ;
65607: LD_ADDR_EXP 64
65611: PUSH
65612: LD_INT 36
65614: ST_TO_ADDR
// hardcoreCounter := 18 ;
65615: LD_ADDR_EXP 65
65619: PUSH
65620: LD_INT 18
65622: ST_TO_ADDR
// sRocket := false ;
65623: LD_ADDR_EXP 68
65627: PUSH
65628: LD_INT 0
65630: ST_TO_ADDR
// sSpeed := false ;
65631: LD_ADDR_EXP 67
65635: PUSH
65636: LD_INT 0
65638: ST_TO_ADDR
// sEngine := false ;
65639: LD_ADDR_EXP 69
65643: PUSH
65644: LD_INT 0
65646: ST_TO_ADDR
// sSpec := false ;
65647: LD_ADDR_EXP 66
65651: PUSH
65652: LD_INT 0
65654: ST_TO_ADDR
// sLevel := false ;
65655: LD_ADDR_EXP 70
65659: PUSH
65660: LD_INT 0
65662: ST_TO_ADDR
// sArmoury := false ;
65663: LD_ADDR_EXP 71
65667: PUSH
65668: LD_INT 0
65670: ST_TO_ADDR
// sRadar := false ;
65671: LD_ADDR_EXP 72
65675: PUSH
65676: LD_INT 0
65678: ST_TO_ADDR
// sBunker := false ;
65679: LD_ADDR_EXP 73
65683: PUSH
65684: LD_INT 0
65686: ST_TO_ADDR
// sHack := false ;
65687: LD_ADDR_EXP 74
65691: PUSH
65692: LD_INT 0
65694: ST_TO_ADDR
// sFire := false ;
65695: LD_ADDR_EXP 75
65699: PUSH
65700: LD_INT 0
65702: ST_TO_ADDR
// sRefresh := false ;
65703: LD_ADDR_EXP 76
65707: PUSH
65708: LD_INT 0
65710: ST_TO_ADDR
// sExp := false ;
65711: LD_ADDR_EXP 77
65715: PUSH
65716: LD_INT 0
65718: ST_TO_ADDR
// sDepot := false ;
65719: LD_ADDR_EXP 78
65723: PUSH
65724: LD_INT 0
65726: ST_TO_ADDR
// sFlag := false ;
65727: LD_ADDR_EXP 79
65731: PUSH
65732: LD_INT 0
65734: ST_TO_ADDR
// sKamikadze := false ;
65735: LD_ADDR_EXP 87
65739: PUSH
65740: LD_INT 0
65742: ST_TO_ADDR
// sTroll := false ;
65743: LD_ADDR_EXP 88
65747: PUSH
65748: LD_INT 0
65750: ST_TO_ADDR
// sSlow := false ;
65751: LD_ADDR_EXP 89
65755: PUSH
65756: LD_INT 0
65758: ST_TO_ADDR
// sLack := false ;
65759: LD_ADDR_EXP 90
65763: PUSH
65764: LD_INT 0
65766: ST_TO_ADDR
// sTank := false ;
65767: LD_ADDR_EXP 92
65771: PUSH
65772: LD_INT 0
65774: ST_TO_ADDR
// sRemote := false ;
65775: LD_ADDR_EXP 93
65779: PUSH
65780: LD_INT 0
65782: ST_TO_ADDR
// sPowell := false ;
65783: LD_ADDR_EXP 94
65787: PUSH
65788: LD_INT 0
65790: ST_TO_ADDR
// sTeleport := false ;
65791: LD_ADDR_EXP 97
65795: PUSH
65796: LD_INT 0
65798: ST_TO_ADDR
// sOilTower := false ;
65799: LD_ADDR_EXP 99
65803: PUSH
65804: LD_INT 0
65806: ST_TO_ADDR
// sShovel := false ;
65807: LD_ADDR_EXP 100
65811: PUSH
65812: LD_INT 0
65814: ST_TO_ADDR
// sSheik := false ;
65815: LD_ADDR_EXP 101
65819: PUSH
65820: LD_INT 0
65822: ST_TO_ADDR
// sEarthquake := false ;
65823: LD_ADDR_EXP 103
65827: PUSH
65828: LD_INT 0
65830: ST_TO_ADDR
// sAI := false ;
65831: LD_ADDR_EXP 104
65835: PUSH
65836: LD_INT 0
65838: ST_TO_ADDR
// sCargo := false ;
65839: LD_ADDR_EXP 107
65843: PUSH
65844: LD_INT 0
65846: ST_TO_ADDR
// sDLaser := false ;
65847: LD_ADDR_EXP 108
65851: PUSH
65852: LD_INT 0
65854: ST_TO_ADDR
// sExchange := false ;
65855: LD_ADDR_EXP 109
65859: PUSH
65860: LD_INT 0
65862: ST_TO_ADDR
// sFac := false ;
65863: LD_ADDR_EXP 110
65867: PUSH
65868: LD_INT 0
65870: ST_TO_ADDR
// sPower := false ;
65871: LD_ADDR_EXP 111
65875: PUSH
65876: LD_INT 0
65878: ST_TO_ADDR
// sRandom := false ;
65879: LD_ADDR_EXP 112
65883: PUSH
65884: LD_INT 0
65886: ST_TO_ADDR
// sShield := false ;
65887: LD_ADDR_EXP 113
65891: PUSH
65892: LD_INT 0
65894: ST_TO_ADDR
// sTime := false ;
65895: LD_ADDR_EXP 114
65899: PUSH
65900: LD_INT 0
65902: ST_TO_ADDR
// sTools := false ;
65903: LD_ADDR_EXP 115
65907: PUSH
65908: LD_INT 0
65910: ST_TO_ADDR
// sSold := false ;
65911: LD_ADDR_EXP 80
65915: PUSH
65916: LD_INT 0
65918: ST_TO_ADDR
// sDiff := false ;
65919: LD_ADDR_EXP 81
65923: PUSH
65924: LD_INT 0
65926: ST_TO_ADDR
// sFog := false ;
65927: LD_ADDR_EXP 84
65931: PUSH
65932: LD_INT 0
65934: ST_TO_ADDR
// sReset := false ;
65935: LD_ADDR_EXP 85
65939: PUSH
65940: LD_INT 0
65942: ST_TO_ADDR
// sSun := false ;
65943: LD_ADDR_EXP 86
65947: PUSH
65948: LD_INT 0
65950: ST_TO_ADDR
// sTiger := false ;
65951: LD_ADDR_EXP 82
65955: PUSH
65956: LD_INT 0
65958: ST_TO_ADDR
// sBomb := false ;
65959: LD_ADDR_EXP 83
65963: PUSH
65964: LD_INT 0
65966: ST_TO_ADDR
// sWound := false ;
65967: LD_ADDR_EXP 91
65971: PUSH
65972: LD_INT 0
65974: ST_TO_ADDR
// sBetray := false ;
65975: LD_ADDR_EXP 95
65979: PUSH
65980: LD_INT 0
65982: ST_TO_ADDR
// sContamin := false ;
65983: LD_ADDR_EXP 96
65987: PUSH
65988: LD_INT 0
65990: ST_TO_ADDR
// sOil := false ;
65991: LD_ADDR_EXP 98
65995: PUSH
65996: LD_INT 0
65998: ST_TO_ADDR
// sStu := false ;
65999: LD_ADDR_EXP 102
66003: PUSH
66004: LD_INT 0
66006: ST_TO_ADDR
// sBazooka := false ;
66007: LD_ADDR_EXP 105
66011: PUSH
66012: LD_INT 0
66014: ST_TO_ADDR
// sMortar := false ;
66015: LD_ADDR_EXP 106
66019: PUSH
66020: LD_INT 0
66022: ST_TO_ADDR
// sRanger := false ;
66023: LD_ADDR_EXP 116
66027: PUSH
66028: LD_INT 0
66030: ST_TO_ADDR
// sComputer := false ;
66031: LD_ADDR_EXP 117
66035: PUSH
66036: LD_INT 0
66038: ST_TO_ADDR
// s30 := false ;
66039: LD_ADDR_EXP 118
66043: PUSH
66044: LD_INT 0
66046: ST_TO_ADDR
// s60 := false ;
66047: LD_ADDR_EXP 119
66051: PUSH
66052: LD_INT 0
66054: ST_TO_ADDR
// end ;
66055: LD_VAR 0 1
66059: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
66060: LD_INT 0
66062: PPUSH
66063: PPUSH
66064: PPUSH
66065: PPUSH
66066: PPUSH
66067: PPUSH
66068: PPUSH
// result := [ ] ;
66069: LD_ADDR_VAR 0 2
66073: PUSH
66074: EMPTY
66075: ST_TO_ADDR
// if campaign_id = 1 then
66076: LD_OWVAR 69
66080: PUSH
66081: LD_INT 1
66083: EQUAL
66084: IFFALSE 69250
// begin case mission_number of 1 :
66086: LD_OWVAR 70
66090: PUSH
66091: LD_INT 1
66093: DOUBLE
66094: EQUAL
66095: IFTRUE 66099
66097: GO 66175
66099: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
66100: LD_ADDR_VAR 0 2
66104: PUSH
66105: LD_INT 2
66107: PUSH
66108: LD_INT 4
66110: PUSH
66111: LD_INT 11
66113: PUSH
66114: LD_INT 12
66116: PUSH
66117: LD_INT 15
66119: PUSH
66120: LD_INT 16
66122: PUSH
66123: LD_INT 22
66125: PUSH
66126: LD_INT 23
66128: PUSH
66129: LD_INT 26
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 101
66145: PUSH
66146: LD_INT 102
66148: PUSH
66149: LD_INT 106
66151: PUSH
66152: LD_INT 116
66154: PUSH
66155: LD_INT 117
66157: PUSH
66158: LD_INT 118
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: ST_TO_ADDR
66173: GO 69248
66175: LD_INT 2
66177: DOUBLE
66178: EQUAL
66179: IFTRUE 66183
66181: GO 66267
66183: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
66184: LD_ADDR_VAR 0 2
66188: PUSH
66189: LD_INT 2
66191: PUSH
66192: LD_INT 4
66194: PUSH
66195: LD_INT 11
66197: PUSH
66198: LD_INT 12
66200: PUSH
66201: LD_INT 15
66203: PUSH
66204: LD_INT 16
66206: PUSH
66207: LD_INT 22
66209: PUSH
66210: LD_INT 23
66212: PUSH
66213: LD_INT 26
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 101
66229: PUSH
66230: LD_INT 102
66232: PUSH
66233: LD_INT 105
66235: PUSH
66236: LD_INT 106
66238: PUSH
66239: LD_INT 108
66241: PUSH
66242: LD_INT 116
66244: PUSH
66245: LD_INT 117
66247: PUSH
66248: LD_INT 118
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: ST_TO_ADDR
66265: GO 69248
66267: LD_INT 3
66269: DOUBLE
66270: EQUAL
66271: IFTRUE 66275
66273: GO 66363
66275: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
66276: LD_ADDR_VAR 0 2
66280: PUSH
66281: LD_INT 2
66283: PUSH
66284: LD_INT 4
66286: PUSH
66287: LD_INT 5
66289: PUSH
66290: LD_INT 11
66292: PUSH
66293: LD_INT 12
66295: PUSH
66296: LD_INT 15
66298: PUSH
66299: LD_INT 16
66301: PUSH
66302: LD_INT 22
66304: PUSH
66305: LD_INT 26
66307: PUSH
66308: LD_INT 36
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 101
66325: PUSH
66326: LD_INT 102
66328: PUSH
66329: LD_INT 105
66331: PUSH
66332: LD_INT 106
66334: PUSH
66335: LD_INT 108
66337: PUSH
66338: LD_INT 116
66340: PUSH
66341: LD_INT 117
66343: PUSH
66344: LD_INT 118
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: ST_TO_ADDR
66361: GO 69248
66363: LD_INT 4
66365: DOUBLE
66366: EQUAL
66367: IFTRUE 66371
66369: GO 66467
66371: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
66372: LD_ADDR_VAR 0 2
66376: PUSH
66377: LD_INT 2
66379: PUSH
66380: LD_INT 4
66382: PUSH
66383: LD_INT 5
66385: PUSH
66386: LD_INT 8
66388: PUSH
66389: LD_INT 11
66391: PUSH
66392: LD_INT 12
66394: PUSH
66395: LD_INT 15
66397: PUSH
66398: LD_INT 16
66400: PUSH
66401: LD_INT 22
66403: PUSH
66404: LD_INT 23
66406: PUSH
66407: LD_INT 26
66409: PUSH
66410: LD_INT 36
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 101
66429: PUSH
66430: LD_INT 102
66432: PUSH
66433: LD_INT 105
66435: PUSH
66436: LD_INT 106
66438: PUSH
66439: LD_INT 108
66441: PUSH
66442: LD_INT 116
66444: PUSH
66445: LD_INT 117
66447: PUSH
66448: LD_INT 118
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: ST_TO_ADDR
66465: GO 69248
66467: LD_INT 5
66469: DOUBLE
66470: EQUAL
66471: IFTRUE 66475
66473: GO 66587
66475: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
66476: LD_ADDR_VAR 0 2
66480: PUSH
66481: LD_INT 2
66483: PUSH
66484: LD_INT 4
66486: PUSH
66487: LD_INT 5
66489: PUSH
66490: LD_INT 6
66492: PUSH
66493: LD_INT 8
66495: PUSH
66496: LD_INT 11
66498: PUSH
66499: LD_INT 12
66501: PUSH
66502: LD_INT 15
66504: PUSH
66505: LD_INT 16
66507: PUSH
66508: LD_INT 22
66510: PUSH
66511: LD_INT 23
66513: PUSH
66514: LD_INT 25
66516: PUSH
66517: LD_INT 26
66519: PUSH
66520: LD_INT 36
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 101
66541: PUSH
66542: LD_INT 102
66544: PUSH
66545: LD_INT 105
66547: PUSH
66548: LD_INT 106
66550: PUSH
66551: LD_INT 108
66553: PUSH
66554: LD_INT 109
66556: PUSH
66557: LD_INT 112
66559: PUSH
66560: LD_INT 116
66562: PUSH
66563: LD_INT 117
66565: PUSH
66566: LD_INT 118
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: ST_TO_ADDR
66585: GO 69248
66587: LD_INT 6
66589: DOUBLE
66590: EQUAL
66591: IFTRUE 66595
66593: GO 66727
66595: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
66596: LD_ADDR_VAR 0 2
66600: PUSH
66601: LD_INT 2
66603: PUSH
66604: LD_INT 4
66606: PUSH
66607: LD_INT 5
66609: PUSH
66610: LD_INT 6
66612: PUSH
66613: LD_INT 8
66615: PUSH
66616: LD_INT 11
66618: PUSH
66619: LD_INT 12
66621: PUSH
66622: LD_INT 15
66624: PUSH
66625: LD_INT 16
66627: PUSH
66628: LD_INT 20
66630: PUSH
66631: LD_INT 21
66633: PUSH
66634: LD_INT 22
66636: PUSH
66637: LD_INT 23
66639: PUSH
66640: LD_INT 25
66642: PUSH
66643: LD_INT 26
66645: PUSH
66646: LD_INT 30
66648: PUSH
66649: LD_INT 31
66651: PUSH
66652: LD_INT 32
66654: PUSH
66655: LD_INT 36
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 101
66681: PUSH
66682: LD_INT 102
66684: PUSH
66685: LD_INT 105
66687: PUSH
66688: LD_INT 106
66690: PUSH
66691: LD_INT 108
66693: PUSH
66694: LD_INT 109
66696: PUSH
66697: LD_INT 112
66699: PUSH
66700: LD_INT 116
66702: PUSH
66703: LD_INT 117
66705: PUSH
66706: LD_INT 118
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: ST_TO_ADDR
66725: GO 69248
66727: LD_INT 7
66729: DOUBLE
66730: EQUAL
66731: IFTRUE 66735
66733: GO 66847
66735: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
66736: LD_ADDR_VAR 0 2
66740: PUSH
66741: LD_INT 2
66743: PUSH
66744: LD_INT 4
66746: PUSH
66747: LD_INT 5
66749: PUSH
66750: LD_INT 7
66752: PUSH
66753: LD_INT 11
66755: PUSH
66756: LD_INT 12
66758: PUSH
66759: LD_INT 15
66761: PUSH
66762: LD_INT 16
66764: PUSH
66765: LD_INT 20
66767: PUSH
66768: LD_INT 21
66770: PUSH
66771: LD_INT 22
66773: PUSH
66774: LD_INT 23
66776: PUSH
66777: LD_INT 25
66779: PUSH
66780: LD_INT 26
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 101
66801: PUSH
66802: LD_INT 102
66804: PUSH
66805: LD_INT 103
66807: PUSH
66808: LD_INT 105
66810: PUSH
66811: LD_INT 106
66813: PUSH
66814: LD_INT 108
66816: PUSH
66817: LD_INT 112
66819: PUSH
66820: LD_INT 116
66822: PUSH
66823: LD_INT 117
66825: PUSH
66826: LD_INT 118
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: ST_TO_ADDR
66845: GO 69248
66847: LD_INT 8
66849: DOUBLE
66850: EQUAL
66851: IFTRUE 66855
66853: GO 66995
66855: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
66856: LD_ADDR_VAR 0 2
66860: PUSH
66861: LD_INT 2
66863: PUSH
66864: LD_INT 4
66866: PUSH
66867: LD_INT 5
66869: PUSH
66870: LD_INT 6
66872: PUSH
66873: LD_INT 7
66875: PUSH
66876: LD_INT 8
66878: PUSH
66879: LD_INT 11
66881: PUSH
66882: LD_INT 12
66884: PUSH
66885: LD_INT 15
66887: PUSH
66888: LD_INT 16
66890: PUSH
66891: LD_INT 20
66893: PUSH
66894: LD_INT 21
66896: PUSH
66897: LD_INT 22
66899: PUSH
66900: LD_INT 23
66902: PUSH
66903: LD_INT 25
66905: PUSH
66906: LD_INT 26
66908: PUSH
66909: LD_INT 30
66911: PUSH
66912: LD_INT 31
66914: PUSH
66915: LD_INT 32
66917: PUSH
66918: LD_INT 36
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 101
66945: PUSH
66946: LD_INT 102
66948: PUSH
66949: LD_INT 103
66951: PUSH
66952: LD_INT 105
66954: PUSH
66955: LD_INT 106
66957: PUSH
66958: LD_INT 108
66960: PUSH
66961: LD_INT 109
66963: PUSH
66964: LD_INT 112
66966: PUSH
66967: LD_INT 116
66969: PUSH
66970: LD_INT 117
66972: PUSH
66973: LD_INT 118
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: ST_TO_ADDR
66993: GO 69248
66995: LD_INT 9
66997: DOUBLE
66998: EQUAL
66999: IFTRUE 67003
67001: GO 67151
67003: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
67004: LD_ADDR_VAR 0 2
67008: PUSH
67009: LD_INT 2
67011: PUSH
67012: LD_INT 4
67014: PUSH
67015: LD_INT 5
67017: PUSH
67018: LD_INT 6
67020: PUSH
67021: LD_INT 7
67023: PUSH
67024: LD_INT 8
67026: PUSH
67027: LD_INT 11
67029: PUSH
67030: LD_INT 12
67032: PUSH
67033: LD_INT 15
67035: PUSH
67036: LD_INT 16
67038: PUSH
67039: LD_INT 20
67041: PUSH
67042: LD_INT 21
67044: PUSH
67045: LD_INT 22
67047: PUSH
67048: LD_INT 23
67050: PUSH
67051: LD_INT 25
67053: PUSH
67054: LD_INT 26
67056: PUSH
67057: LD_INT 28
67059: PUSH
67060: LD_INT 30
67062: PUSH
67063: LD_INT 31
67065: PUSH
67066: LD_INT 32
67068: PUSH
67069: LD_INT 36
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 101
67097: PUSH
67098: LD_INT 102
67100: PUSH
67101: LD_INT 103
67103: PUSH
67104: LD_INT 105
67106: PUSH
67107: LD_INT 106
67109: PUSH
67110: LD_INT 108
67112: PUSH
67113: LD_INT 109
67115: PUSH
67116: LD_INT 112
67118: PUSH
67119: LD_INT 114
67121: PUSH
67122: LD_INT 116
67124: PUSH
67125: LD_INT 117
67127: PUSH
67128: LD_INT 118
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: ST_TO_ADDR
67149: GO 69248
67151: LD_INT 10
67153: DOUBLE
67154: EQUAL
67155: IFTRUE 67159
67157: GO 67355
67159: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
67160: LD_ADDR_VAR 0 2
67164: PUSH
67165: LD_INT 2
67167: PUSH
67168: LD_INT 4
67170: PUSH
67171: LD_INT 5
67173: PUSH
67174: LD_INT 6
67176: PUSH
67177: LD_INT 7
67179: PUSH
67180: LD_INT 8
67182: PUSH
67183: LD_INT 9
67185: PUSH
67186: LD_INT 10
67188: PUSH
67189: LD_INT 11
67191: PUSH
67192: LD_INT 12
67194: PUSH
67195: LD_INT 13
67197: PUSH
67198: LD_INT 14
67200: PUSH
67201: LD_INT 15
67203: PUSH
67204: LD_INT 16
67206: PUSH
67207: LD_INT 17
67209: PUSH
67210: LD_INT 18
67212: PUSH
67213: LD_INT 19
67215: PUSH
67216: LD_INT 20
67218: PUSH
67219: LD_INT 21
67221: PUSH
67222: LD_INT 22
67224: PUSH
67225: LD_INT 23
67227: PUSH
67228: LD_INT 24
67230: PUSH
67231: LD_INT 25
67233: PUSH
67234: LD_INT 26
67236: PUSH
67237: LD_INT 28
67239: PUSH
67240: LD_INT 30
67242: PUSH
67243: LD_INT 31
67245: PUSH
67246: LD_INT 32
67248: PUSH
67249: LD_INT 36
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 101
67285: PUSH
67286: LD_INT 102
67288: PUSH
67289: LD_INT 103
67291: PUSH
67292: LD_INT 104
67294: PUSH
67295: LD_INT 105
67297: PUSH
67298: LD_INT 106
67300: PUSH
67301: LD_INT 107
67303: PUSH
67304: LD_INT 108
67306: PUSH
67307: LD_INT 109
67309: PUSH
67310: LD_INT 110
67312: PUSH
67313: LD_INT 111
67315: PUSH
67316: LD_INT 112
67318: PUSH
67319: LD_INT 114
67321: PUSH
67322: LD_INT 116
67324: PUSH
67325: LD_INT 117
67327: PUSH
67328: LD_INT 118
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: ST_TO_ADDR
67353: GO 69248
67355: LD_INT 11
67357: DOUBLE
67358: EQUAL
67359: IFTRUE 67363
67361: GO 67567
67363: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
67364: LD_ADDR_VAR 0 2
67368: PUSH
67369: LD_INT 2
67371: PUSH
67372: LD_INT 3
67374: PUSH
67375: LD_INT 4
67377: PUSH
67378: LD_INT 5
67380: PUSH
67381: LD_INT 6
67383: PUSH
67384: LD_INT 7
67386: PUSH
67387: LD_INT 8
67389: PUSH
67390: LD_INT 9
67392: PUSH
67393: LD_INT 10
67395: PUSH
67396: LD_INT 11
67398: PUSH
67399: LD_INT 12
67401: PUSH
67402: LD_INT 13
67404: PUSH
67405: LD_INT 14
67407: PUSH
67408: LD_INT 15
67410: PUSH
67411: LD_INT 16
67413: PUSH
67414: LD_INT 17
67416: PUSH
67417: LD_INT 18
67419: PUSH
67420: LD_INT 19
67422: PUSH
67423: LD_INT 20
67425: PUSH
67426: LD_INT 21
67428: PUSH
67429: LD_INT 22
67431: PUSH
67432: LD_INT 23
67434: PUSH
67435: LD_INT 24
67437: PUSH
67438: LD_INT 25
67440: PUSH
67441: LD_INT 26
67443: PUSH
67444: LD_INT 28
67446: PUSH
67447: LD_INT 30
67449: PUSH
67450: LD_INT 31
67452: PUSH
67453: LD_INT 32
67455: PUSH
67456: LD_INT 34
67458: PUSH
67459: LD_INT 36
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 101
67497: PUSH
67498: LD_INT 102
67500: PUSH
67501: LD_INT 103
67503: PUSH
67504: LD_INT 104
67506: PUSH
67507: LD_INT 105
67509: PUSH
67510: LD_INT 106
67512: PUSH
67513: LD_INT 107
67515: PUSH
67516: LD_INT 108
67518: PUSH
67519: LD_INT 109
67521: PUSH
67522: LD_INT 110
67524: PUSH
67525: LD_INT 111
67527: PUSH
67528: LD_INT 112
67530: PUSH
67531: LD_INT 114
67533: PUSH
67534: LD_INT 116
67536: PUSH
67537: LD_INT 117
67539: PUSH
67540: LD_INT 118
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: ST_TO_ADDR
67565: GO 69248
67567: LD_INT 12
67569: DOUBLE
67570: EQUAL
67571: IFTRUE 67575
67573: GO 67795
67575: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
67576: LD_ADDR_VAR 0 2
67580: PUSH
67581: LD_INT 1
67583: PUSH
67584: LD_INT 2
67586: PUSH
67587: LD_INT 3
67589: PUSH
67590: LD_INT 4
67592: PUSH
67593: LD_INT 5
67595: PUSH
67596: LD_INT 6
67598: PUSH
67599: LD_INT 7
67601: PUSH
67602: LD_INT 8
67604: PUSH
67605: LD_INT 9
67607: PUSH
67608: LD_INT 10
67610: PUSH
67611: LD_INT 11
67613: PUSH
67614: LD_INT 12
67616: PUSH
67617: LD_INT 13
67619: PUSH
67620: LD_INT 14
67622: PUSH
67623: LD_INT 15
67625: PUSH
67626: LD_INT 16
67628: PUSH
67629: LD_INT 17
67631: PUSH
67632: LD_INT 18
67634: PUSH
67635: LD_INT 19
67637: PUSH
67638: LD_INT 20
67640: PUSH
67641: LD_INT 21
67643: PUSH
67644: LD_INT 22
67646: PUSH
67647: LD_INT 23
67649: PUSH
67650: LD_INT 24
67652: PUSH
67653: LD_INT 25
67655: PUSH
67656: LD_INT 26
67658: PUSH
67659: LD_INT 27
67661: PUSH
67662: LD_INT 28
67664: PUSH
67665: LD_INT 30
67667: PUSH
67668: LD_INT 31
67670: PUSH
67671: LD_INT 32
67673: PUSH
67674: LD_INT 33
67676: PUSH
67677: LD_INT 34
67679: PUSH
67680: LD_INT 36
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 101
67721: PUSH
67722: LD_INT 102
67724: PUSH
67725: LD_INT 103
67727: PUSH
67728: LD_INT 104
67730: PUSH
67731: LD_INT 105
67733: PUSH
67734: LD_INT 106
67736: PUSH
67737: LD_INT 107
67739: PUSH
67740: LD_INT 108
67742: PUSH
67743: LD_INT 109
67745: PUSH
67746: LD_INT 110
67748: PUSH
67749: LD_INT 111
67751: PUSH
67752: LD_INT 112
67754: PUSH
67755: LD_INT 113
67757: PUSH
67758: LD_INT 114
67760: PUSH
67761: LD_INT 116
67763: PUSH
67764: LD_INT 117
67766: PUSH
67767: LD_INT 118
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: ST_TO_ADDR
67793: GO 69248
67795: LD_INT 13
67797: DOUBLE
67798: EQUAL
67799: IFTRUE 67803
67801: GO 68011
67803: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
67804: LD_ADDR_VAR 0 2
67808: PUSH
67809: LD_INT 1
67811: PUSH
67812: LD_INT 2
67814: PUSH
67815: LD_INT 3
67817: PUSH
67818: LD_INT 4
67820: PUSH
67821: LD_INT 5
67823: PUSH
67824: LD_INT 8
67826: PUSH
67827: LD_INT 9
67829: PUSH
67830: LD_INT 10
67832: PUSH
67833: LD_INT 11
67835: PUSH
67836: LD_INT 12
67838: PUSH
67839: LD_INT 14
67841: PUSH
67842: LD_INT 15
67844: PUSH
67845: LD_INT 16
67847: PUSH
67848: LD_INT 17
67850: PUSH
67851: LD_INT 18
67853: PUSH
67854: LD_INT 19
67856: PUSH
67857: LD_INT 20
67859: PUSH
67860: LD_INT 21
67862: PUSH
67863: LD_INT 22
67865: PUSH
67866: LD_INT 23
67868: PUSH
67869: LD_INT 24
67871: PUSH
67872: LD_INT 25
67874: PUSH
67875: LD_INT 26
67877: PUSH
67878: LD_INT 27
67880: PUSH
67881: LD_INT 28
67883: PUSH
67884: LD_INT 30
67886: PUSH
67887: LD_INT 31
67889: PUSH
67890: LD_INT 32
67892: PUSH
67893: LD_INT 33
67895: PUSH
67896: LD_INT 34
67898: PUSH
67899: LD_INT 36
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 101
67937: PUSH
67938: LD_INT 102
67940: PUSH
67941: LD_INT 103
67943: PUSH
67944: LD_INT 104
67946: PUSH
67947: LD_INT 105
67949: PUSH
67950: LD_INT 106
67952: PUSH
67953: LD_INT 107
67955: PUSH
67956: LD_INT 108
67958: PUSH
67959: LD_INT 109
67961: PUSH
67962: LD_INT 110
67964: PUSH
67965: LD_INT 111
67967: PUSH
67968: LD_INT 112
67970: PUSH
67971: LD_INT 113
67973: PUSH
67974: LD_INT 114
67976: PUSH
67977: LD_INT 116
67979: PUSH
67980: LD_INT 117
67982: PUSH
67983: LD_INT 118
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: ST_TO_ADDR
68009: GO 69248
68011: LD_INT 14
68013: DOUBLE
68014: EQUAL
68015: IFTRUE 68019
68017: GO 68243
68019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
68020: LD_ADDR_VAR 0 2
68024: PUSH
68025: LD_INT 1
68027: PUSH
68028: LD_INT 2
68030: PUSH
68031: LD_INT 3
68033: PUSH
68034: LD_INT 4
68036: PUSH
68037: LD_INT 5
68039: PUSH
68040: LD_INT 6
68042: PUSH
68043: LD_INT 7
68045: PUSH
68046: LD_INT 8
68048: PUSH
68049: LD_INT 9
68051: PUSH
68052: LD_INT 10
68054: PUSH
68055: LD_INT 11
68057: PUSH
68058: LD_INT 12
68060: PUSH
68061: LD_INT 13
68063: PUSH
68064: LD_INT 14
68066: PUSH
68067: LD_INT 15
68069: PUSH
68070: LD_INT 16
68072: PUSH
68073: LD_INT 17
68075: PUSH
68076: LD_INT 18
68078: PUSH
68079: LD_INT 19
68081: PUSH
68082: LD_INT 20
68084: PUSH
68085: LD_INT 21
68087: PUSH
68088: LD_INT 22
68090: PUSH
68091: LD_INT 23
68093: PUSH
68094: LD_INT 24
68096: PUSH
68097: LD_INT 25
68099: PUSH
68100: LD_INT 26
68102: PUSH
68103: LD_INT 27
68105: PUSH
68106: LD_INT 28
68108: PUSH
68109: LD_INT 29
68111: PUSH
68112: LD_INT 30
68114: PUSH
68115: LD_INT 31
68117: PUSH
68118: LD_INT 32
68120: PUSH
68121: LD_INT 33
68123: PUSH
68124: LD_INT 34
68126: PUSH
68127: LD_INT 36
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 101
68169: PUSH
68170: LD_INT 102
68172: PUSH
68173: LD_INT 103
68175: PUSH
68176: LD_INT 104
68178: PUSH
68179: LD_INT 105
68181: PUSH
68182: LD_INT 106
68184: PUSH
68185: LD_INT 107
68187: PUSH
68188: LD_INT 108
68190: PUSH
68191: LD_INT 109
68193: PUSH
68194: LD_INT 110
68196: PUSH
68197: LD_INT 111
68199: PUSH
68200: LD_INT 112
68202: PUSH
68203: LD_INT 113
68205: PUSH
68206: LD_INT 114
68208: PUSH
68209: LD_INT 116
68211: PUSH
68212: LD_INT 117
68214: PUSH
68215: LD_INT 118
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: ST_TO_ADDR
68241: GO 69248
68243: LD_INT 15
68245: DOUBLE
68246: EQUAL
68247: IFTRUE 68251
68249: GO 68475
68251: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
68252: LD_ADDR_VAR 0 2
68256: PUSH
68257: LD_INT 1
68259: PUSH
68260: LD_INT 2
68262: PUSH
68263: LD_INT 3
68265: PUSH
68266: LD_INT 4
68268: PUSH
68269: LD_INT 5
68271: PUSH
68272: LD_INT 6
68274: PUSH
68275: LD_INT 7
68277: PUSH
68278: LD_INT 8
68280: PUSH
68281: LD_INT 9
68283: PUSH
68284: LD_INT 10
68286: PUSH
68287: LD_INT 11
68289: PUSH
68290: LD_INT 12
68292: PUSH
68293: LD_INT 13
68295: PUSH
68296: LD_INT 14
68298: PUSH
68299: LD_INT 15
68301: PUSH
68302: LD_INT 16
68304: PUSH
68305: LD_INT 17
68307: PUSH
68308: LD_INT 18
68310: PUSH
68311: LD_INT 19
68313: PUSH
68314: LD_INT 20
68316: PUSH
68317: LD_INT 21
68319: PUSH
68320: LD_INT 22
68322: PUSH
68323: LD_INT 23
68325: PUSH
68326: LD_INT 24
68328: PUSH
68329: LD_INT 25
68331: PUSH
68332: LD_INT 26
68334: PUSH
68335: LD_INT 27
68337: PUSH
68338: LD_INT 28
68340: PUSH
68341: LD_INT 29
68343: PUSH
68344: LD_INT 30
68346: PUSH
68347: LD_INT 31
68349: PUSH
68350: LD_INT 32
68352: PUSH
68353: LD_INT 33
68355: PUSH
68356: LD_INT 34
68358: PUSH
68359: LD_INT 36
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 101
68401: PUSH
68402: LD_INT 102
68404: PUSH
68405: LD_INT 103
68407: PUSH
68408: LD_INT 104
68410: PUSH
68411: LD_INT 105
68413: PUSH
68414: LD_INT 106
68416: PUSH
68417: LD_INT 107
68419: PUSH
68420: LD_INT 108
68422: PUSH
68423: LD_INT 109
68425: PUSH
68426: LD_INT 110
68428: PUSH
68429: LD_INT 111
68431: PUSH
68432: LD_INT 112
68434: PUSH
68435: LD_INT 113
68437: PUSH
68438: LD_INT 114
68440: PUSH
68441: LD_INT 116
68443: PUSH
68444: LD_INT 117
68446: PUSH
68447: LD_INT 118
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: ST_TO_ADDR
68473: GO 69248
68475: LD_INT 16
68477: DOUBLE
68478: EQUAL
68479: IFTRUE 68483
68481: GO 68619
68483: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
68484: LD_ADDR_VAR 0 2
68488: PUSH
68489: LD_INT 2
68491: PUSH
68492: LD_INT 4
68494: PUSH
68495: LD_INT 5
68497: PUSH
68498: LD_INT 7
68500: PUSH
68501: LD_INT 11
68503: PUSH
68504: LD_INT 12
68506: PUSH
68507: LD_INT 15
68509: PUSH
68510: LD_INT 16
68512: PUSH
68513: LD_INT 20
68515: PUSH
68516: LD_INT 21
68518: PUSH
68519: LD_INT 22
68521: PUSH
68522: LD_INT 23
68524: PUSH
68525: LD_INT 25
68527: PUSH
68528: LD_INT 26
68530: PUSH
68531: LD_INT 30
68533: PUSH
68534: LD_INT 31
68536: PUSH
68537: LD_INT 32
68539: PUSH
68540: LD_INT 33
68542: PUSH
68543: LD_INT 34
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 101
68569: PUSH
68570: LD_INT 102
68572: PUSH
68573: LD_INT 103
68575: PUSH
68576: LD_INT 106
68578: PUSH
68579: LD_INT 108
68581: PUSH
68582: LD_INT 112
68584: PUSH
68585: LD_INT 113
68587: PUSH
68588: LD_INT 114
68590: PUSH
68591: LD_INT 116
68593: PUSH
68594: LD_INT 117
68596: PUSH
68597: LD_INT 118
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: ST_TO_ADDR
68617: GO 69248
68619: LD_INT 17
68621: DOUBLE
68622: EQUAL
68623: IFTRUE 68627
68625: GO 68851
68627: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
68628: LD_ADDR_VAR 0 2
68632: PUSH
68633: LD_INT 1
68635: PUSH
68636: LD_INT 2
68638: PUSH
68639: LD_INT 3
68641: PUSH
68642: LD_INT 4
68644: PUSH
68645: LD_INT 5
68647: PUSH
68648: LD_INT 6
68650: PUSH
68651: LD_INT 7
68653: PUSH
68654: LD_INT 8
68656: PUSH
68657: LD_INT 9
68659: PUSH
68660: LD_INT 10
68662: PUSH
68663: LD_INT 11
68665: PUSH
68666: LD_INT 12
68668: PUSH
68669: LD_INT 13
68671: PUSH
68672: LD_INT 14
68674: PUSH
68675: LD_INT 15
68677: PUSH
68678: LD_INT 16
68680: PUSH
68681: LD_INT 17
68683: PUSH
68684: LD_INT 18
68686: PUSH
68687: LD_INT 19
68689: PUSH
68690: LD_INT 20
68692: PUSH
68693: LD_INT 21
68695: PUSH
68696: LD_INT 22
68698: PUSH
68699: LD_INT 23
68701: PUSH
68702: LD_INT 24
68704: PUSH
68705: LD_INT 25
68707: PUSH
68708: LD_INT 26
68710: PUSH
68711: LD_INT 27
68713: PUSH
68714: LD_INT 28
68716: PUSH
68717: LD_INT 29
68719: PUSH
68720: LD_INT 30
68722: PUSH
68723: LD_INT 31
68725: PUSH
68726: LD_INT 32
68728: PUSH
68729: LD_INT 33
68731: PUSH
68732: LD_INT 34
68734: PUSH
68735: LD_INT 36
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 101
68777: PUSH
68778: LD_INT 102
68780: PUSH
68781: LD_INT 103
68783: PUSH
68784: LD_INT 104
68786: PUSH
68787: LD_INT 105
68789: PUSH
68790: LD_INT 106
68792: PUSH
68793: LD_INT 107
68795: PUSH
68796: LD_INT 108
68798: PUSH
68799: LD_INT 109
68801: PUSH
68802: LD_INT 110
68804: PUSH
68805: LD_INT 111
68807: PUSH
68808: LD_INT 112
68810: PUSH
68811: LD_INT 113
68813: PUSH
68814: LD_INT 114
68816: PUSH
68817: LD_INT 116
68819: PUSH
68820: LD_INT 117
68822: PUSH
68823: LD_INT 118
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: ST_TO_ADDR
68849: GO 69248
68851: LD_INT 18
68853: DOUBLE
68854: EQUAL
68855: IFTRUE 68859
68857: GO 69007
68859: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
68860: LD_ADDR_VAR 0 2
68864: PUSH
68865: LD_INT 2
68867: PUSH
68868: LD_INT 4
68870: PUSH
68871: LD_INT 5
68873: PUSH
68874: LD_INT 7
68876: PUSH
68877: LD_INT 11
68879: PUSH
68880: LD_INT 12
68882: PUSH
68883: LD_INT 15
68885: PUSH
68886: LD_INT 16
68888: PUSH
68889: LD_INT 20
68891: PUSH
68892: LD_INT 21
68894: PUSH
68895: LD_INT 22
68897: PUSH
68898: LD_INT 23
68900: PUSH
68901: LD_INT 25
68903: PUSH
68904: LD_INT 26
68906: PUSH
68907: LD_INT 30
68909: PUSH
68910: LD_INT 31
68912: PUSH
68913: LD_INT 32
68915: PUSH
68916: LD_INT 33
68918: PUSH
68919: LD_INT 34
68921: PUSH
68922: LD_INT 35
68924: PUSH
68925: LD_INT 36
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 101
68953: PUSH
68954: LD_INT 102
68956: PUSH
68957: LD_INT 103
68959: PUSH
68960: LD_INT 106
68962: PUSH
68963: LD_INT 108
68965: PUSH
68966: LD_INT 112
68968: PUSH
68969: LD_INT 113
68971: PUSH
68972: LD_INT 114
68974: PUSH
68975: LD_INT 115
68977: PUSH
68978: LD_INT 116
68980: PUSH
68981: LD_INT 117
68983: PUSH
68984: LD_INT 118
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: ST_TO_ADDR
69005: GO 69248
69007: LD_INT 19
69009: DOUBLE
69010: EQUAL
69011: IFTRUE 69015
69013: GO 69247
69015: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
69016: LD_ADDR_VAR 0 2
69020: PUSH
69021: LD_INT 1
69023: PUSH
69024: LD_INT 2
69026: PUSH
69027: LD_INT 3
69029: PUSH
69030: LD_INT 4
69032: PUSH
69033: LD_INT 5
69035: PUSH
69036: LD_INT 6
69038: PUSH
69039: LD_INT 7
69041: PUSH
69042: LD_INT 8
69044: PUSH
69045: LD_INT 9
69047: PUSH
69048: LD_INT 10
69050: PUSH
69051: LD_INT 11
69053: PUSH
69054: LD_INT 12
69056: PUSH
69057: LD_INT 13
69059: PUSH
69060: LD_INT 14
69062: PUSH
69063: LD_INT 15
69065: PUSH
69066: LD_INT 16
69068: PUSH
69069: LD_INT 17
69071: PUSH
69072: LD_INT 18
69074: PUSH
69075: LD_INT 19
69077: PUSH
69078: LD_INT 20
69080: PUSH
69081: LD_INT 21
69083: PUSH
69084: LD_INT 22
69086: PUSH
69087: LD_INT 23
69089: PUSH
69090: LD_INT 24
69092: PUSH
69093: LD_INT 25
69095: PUSH
69096: LD_INT 26
69098: PUSH
69099: LD_INT 27
69101: PUSH
69102: LD_INT 28
69104: PUSH
69105: LD_INT 29
69107: PUSH
69108: LD_INT 30
69110: PUSH
69111: LD_INT 31
69113: PUSH
69114: LD_INT 32
69116: PUSH
69117: LD_INT 33
69119: PUSH
69120: LD_INT 34
69122: PUSH
69123: LD_INT 35
69125: PUSH
69126: LD_INT 36
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 101
69169: PUSH
69170: LD_INT 102
69172: PUSH
69173: LD_INT 103
69175: PUSH
69176: LD_INT 104
69178: PUSH
69179: LD_INT 105
69181: PUSH
69182: LD_INT 106
69184: PUSH
69185: LD_INT 107
69187: PUSH
69188: LD_INT 108
69190: PUSH
69191: LD_INT 109
69193: PUSH
69194: LD_INT 110
69196: PUSH
69197: LD_INT 111
69199: PUSH
69200: LD_INT 112
69202: PUSH
69203: LD_INT 113
69205: PUSH
69206: LD_INT 114
69208: PUSH
69209: LD_INT 115
69211: PUSH
69212: LD_INT 116
69214: PUSH
69215: LD_INT 117
69217: PUSH
69218: LD_INT 118
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: ST_TO_ADDR
69245: GO 69248
69247: POP
// end else
69248: GO 69479
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
69250: LD_ADDR_VAR 0 2
69254: PUSH
69255: LD_INT 1
69257: PUSH
69258: LD_INT 2
69260: PUSH
69261: LD_INT 3
69263: PUSH
69264: LD_INT 4
69266: PUSH
69267: LD_INT 5
69269: PUSH
69270: LD_INT 6
69272: PUSH
69273: LD_INT 7
69275: PUSH
69276: LD_INT 8
69278: PUSH
69279: LD_INT 9
69281: PUSH
69282: LD_INT 10
69284: PUSH
69285: LD_INT 11
69287: PUSH
69288: LD_INT 12
69290: PUSH
69291: LD_INT 13
69293: PUSH
69294: LD_INT 14
69296: PUSH
69297: LD_INT 15
69299: PUSH
69300: LD_INT 16
69302: PUSH
69303: LD_INT 17
69305: PUSH
69306: LD_INT 18
69308: PUSH
69309: LD_INT 19
69311: PUSH
69312: LD_INT 20
69314: PUSH
69315: LD_INT 21
69317: PUSH
69318: LD_INT 22
69320: PUSH
69321: LD_INT 23
69323: PUSH
69324: LD_INT 24
69326: PUSH
69327: LD_INT 25
69329: PUSH
69330: LD_INT 26
69332: PUSH
69333: LD_INT 27
69335: PUSH
69336: LD_INT 28
69338: PUSH
69339: LD_INT 29
69341: PUSH
69342: LD_INT 30
69344: PUSH
69345: LD_INT 31
69347: PUSH
69348: LD_INT 32
69350: PUSH
69351: LD_INT 33
69353: PUSH
69354: LD_INT 34
69356: PUSH
69357: LD_INT 35
69359: PUSH
69360: LD_INT 36
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 101
69403: PUSH
69404: LD_INT 102
69406: PUSH
69407: LD_INT 103
69409: PUSH
69410: LD_INT 104
69412: PUSH
69413: LD_INT 105
69415: PUSH
69416: LD_INT 106
69418: PUSH
69419: LD_INT 107
69421: PUSH
69422: LD_INT 108
69424: PUSH
69425: LD_INT 109
69427: PUSH
69428: LD_INT 110
69430: PUSH
69431: LD_INT 111
69433: PUSH
69434: LD_INT 112
69436: PUSH
69437: LD_INT 113
69439: PUSH
69440: LD_INT 114
69442: PUSH
69443: LD_INT 115
69445: PUSH
69446: LD_INT 116
69448: PUSH
69449: LD_INT 117
69451: PUSH
69452: LD_INT 118
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: ST_TO_ADDR
// if result then
69479: LD_VAR 0 2
69483: IFFALSE 70269
// begin normal :=  ;
69485: LD_ADDR_VAR 0 5
69489: PUSH
69490: LD_STRING 
69492: ST_TO_ADDR
// hardcore :=  ;
69493: LD_ADDR_VAR 0 6
69497: PUSH
69498: LD_STRING 
69500: ST_TO_ADDR
// active :=  ;
69501: LD_ADDR_VAR 0 7
69505: PUSH
69506: LD_STRING 
69508: ST_TO_ADDR
// for i = 1 to normalCounter do
69509: LD_ADDR_VAR 0 8
69513: PUSH
69514: DOUBLE
69515: LD_INT 1
69517: DEC
69518: ST_TO_ADDR
69519: LD_EXP 64
69523: PUSH
69524: FOR_TO
69525: IFFALSE 69626
// begin tmp := 0 ;
69527: LD_ADDR_VAR 0 3
69531: PUSH
69532: LD_STRING 0
69534: ST_TO_ADDR
// if result [ 1 ] then
69535: LD_VAR 0 2
69539: PUSH
69540: LD_INT 1
69542: ARRAY
69543: IFFALSE 69608
// if result [ 1 ] [ 1 ] = i then
69545: LD_VAR 0 2
69549: PUSH
69550: LD_INT 1
69552: ARRAY
69553: PUSH
69554: LD_INT 1
69556: ARRAY
69557: PUSH
69558: LD_VAR 0 8
69562: EQUAL
69563: IFFALSE 69608
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
69565: LD_ADDR_VAR 0 2
69569: PUSH
69570: LD_VAR 0 2
69574: PPUSH
69575: LD_INT 1
69577: PPUSH
69578: LD_VAR 0 2
69582: PUSH
69583: LD_INT 1
69585: ARRAY
69586: PPUSH
69587: LD_INT 1
69589: PPUSH
69590: CALL_OW 3
69594: PPUSH
69595: CALL_OW 1
69599: ST_TO_ADDR
// tmp := 1 ;
69600: LD_ADDR_VAR 0 3
69604: PUSH
69605: LD_STRING 1
69607: ST_TO_ADDR
// end ; normal := normal & tmp ;
69608: LD_ADDR_VAR 0 5
69612: PUSH
69613: LD_VAR 0 5
69617: PUSH
69618: LD_VAR 0 3
69622: STR
69623: ST_TO_ADDR
// end ;
69624: GO 69524
69626: POP
69627: POP
// for i = 1 to hardcoreCounter do
69628: LD_ADDR_VAR 0 8
69632: PUSH
69633: DOUBLE
69634: LD_INT 1
69636: DEC
69637: ST_TO_ADDR
69638: LD_EXP 65
69642: PUSH
69643: FOR_TO
69644: IFFALSE 69749
// begin tmp := 0 ;
69646: LD_ADDR_VAR 0 3
69650: PUSH
69651: LD_STRING 0
69653: ST_TO_ADDR
// if result [ 2 ] then
69654: LD_VAR 0 2
69658: PUSH
69659: LD_INT 2
69661: ARRAY
69662: IFFALSE 69731
// if result [ 2 ] [ 1 ] = 100 + i then
69664: LD_VAR 0 2
69668: PUSH
69669: LD_INT 2
69671: ARRAY
69672: PUSH
69673: LD_INT 1
69675: ARRAY
69676: PUSH
69677: LD_INT 100
69679: PUSH
69680: LD_VAR 0 8
69684: PLUS
69685: EQUAL
69686: IFFALSE 69731
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
69688: LD_ADDR_VAR 0 2
69692: PUSH
69693: LD_VAR 0 2
69697: PPUSH
69698: LD_INT 2
69700: PPUSH
69701: LD_VAR 0 2
69705: PUSH
69706: LD_INT 2
69708: ARRAY
69709: PPUSH
69710: LD_INT 1
69712: PPUSH
69713: CALL_OW 3
69717: PPUSH
69718: CALL_OW 1
69722: ST_TO_ADDR
// tmp := 1 ;
69723: LD_ADDR_VAR 0 3
69727: PUSH
69728: LD_STRING 1
69730: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
69731: LD_ADDR_VAR 0 6
69735: PUSH
69736: LD_VAR 0 6
69740: PUSH
69741: LD_VAR 0 3
69745: STR
69746: ST_TO_ADDR
// end ;
69747: GO 69643
69749: POP
69750: POP
// if isGameLoad then
69751: LD_VAR 0 1
69755: IFFALSE 70230
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
69757: LD_ADDR_VAR 0 4
69761: PUSH
69762: LD_EXP 68
69766: PUSH
69767: LD_EXP 67
69771: PUSH
69772: LD_EXP 69
69776: PUSH
69777: LD_EXP 66
69781: PUSH
69782: LD_EXP 70
69786: PUSH
69787: LD_EXP 71
69791: PUSH
69792: LD_EXP 72
69796: PUSH
69797: LD_EXP 73
69801: PUSH
69802: LD_EXP 74
69806: PUSH
69807: LD_EXP 75
69811: PUSH
69812: LD_EXP 76
69816: PUSH
69817: LD_EXP 77
69821: PUSH
69822: LD_EXP 78
69826: PUSH
69827: LD_EXP 79
69831: PUSH
69832: LD_EXP 87
69836: PUSH
69837: LD_EXP 88
69841: PUSH
69842: LD_EXP 89
69846: PUSH
69847: LD_EXP 90
69851: PUSH
69852: LD_EXP 92
69856: PUSH
69857: LD_EXP 93
69861: PUSH
69862: LD_EXP 94
69866: PUSH
69867: LD_EXP 97
69871: PUSH
69872: LD_EXP 99
69876: PUSH
69877: LD_EXP 100
69881: PUSH
69882: LD_EXP 101
69886: PUSH
69887: LD_EXP 103
69891: PUSH
69892: LD_EXP 104
69896: PUSH
69897: LD_EXP 107
69901: PUSH
69902: LD_EXP 108
69906: PUSH
69907: LD_EXP 109
69911: PUSH
69912: LD_EXP 110
69916: PUSH
69917: LD_EXP 111
69921: PUSH
69922: LD_EXP 112
69926: PUSH
69927: LD_EXP 113
69931: PUSH
69932: LD_EXP 114
69936: PUSH
69937: LD_EXP 115
69941: PUSH
69942: LD_EXP 80
69946: PUSH
69947: LD_EXP 81
69951: PUSH
69952: LD_EXP 84
69956: PUSH
69957: LD_EXP 85
69961: PUSH
69962: LD_EXP 86
69966: PUSH
69967: LD_EXP 82
69971: PUSH
69972: LD_EXP 83
69976: PUSH
69977: LD_EXP 91
69981: PUSH
69982: LD_EXP 95
69986: PUSH
69987: LD_EXP 96
69991: PUSH
69992: LD_EXP 98
69996: PUSH
69997: LD_EXP 102
70001: PUSH
70002: LD_EXP 105
70006: PUSH
70007: LD_EXP 106
70011: PUSH
70012: LD_EXP 116
70016: PUSH
70017: LD_EXP 117
70021: PUSH
70022: LD_EXP 118
70026: PUSH
70027: LD_EXP 119
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: ST_TO_ADDR
// tmp :=  ;
70088: LD_ADDR_VAR 0 3
70092: PUSH
70093: LD_STRING 
70095: ST_TO_ADDR
// for i = 1 to normalCounter do
70096: LD_ADDR_VAR 0 8
70100: PUSH
70101: DOUBLE
70102: LD_INT 1
70104: DEC
70105: ST_TO_ADDR
70106: LD_EXP 64
70110: PUSH
70111: FOR_TO
70112: IFFALSE 70148
// begin if flags [ i ] then
70114: LD_VAR 0 4
70118: PUSH
70119: LD_VAR 0 8
70123: ARRAY
70124: IFFALSE 70146
// tmp := tmp & i & ; ;
70126: LD_ADDR_VAR 0 3
70130: PUSH
70131: LD_VAR 0 3
70135: PUSH
70136: LD_VAR 0 8
70140: STR
70141: PUSH
70142: LD_STRING ;
70144: STR
70145: ST_TO_ADDR
// end ;
70146: GO 70111
70148: POP
70149: POP
// for i = 1 to hardcoreCounter do
70150: LD_ADDR_VAR 0 8
70154: PUSH
70155: DOUBLE
70156: LD_INT 1
70158: DEC
70159: ST_TO_ADDR
70160: LD_EXP 65
70164: PUSH
70165: FOR_TO
70166: IFFALSE 70212
// begin if flags [ normalCounter + i ] then
70168: LD_VAR 0 4
70172: PUSH
70173: LD_EXP 64
70177: PUSH
70178: LD_VAR 0 8
70182: PLUS
70183: ARRAY
70184: IFFALSE 70210
// tmp := tmp & ( 100 + i ) & ; ;
70186: LD_ADDR_VAR 0 3
70190: PUSH
70191: LD_VAR 0 3
70195: PUSH
70196: LD_INT 100
70198: PUSH
70199: LD_VAR 0 8
70203: PLUS
70204: STR
70205: PUSH
70206: LD_STRING ;
70208: STR
70209: ST_TO_ADDR
// end ;
70210: GO 70165
70212: POP
70213: POP
// if tmp then
70214: LD_VAR 0 3
70218: IFFALSE 70230
// active := tmp ;
70220: LD_ADDR_VAR 0 7
70224: PUSH
70225: LD_VAR 0 3
70229: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
70230: LD_STRING getStreamItemsFromMission("
70232: PUSH
70233: LD_VAR 0 5
70237: STR
70238: PUSH
70239: LD_STRING ","
70241: STR
70242: PUSH
70243: LD_VAR 0 6
70247: STR
70248: PUSH
70249: LD_STRING ","
70251: STR
70252: PUSH
70253: LD_VAR 0 7
70257: STR
70258: PUSH
70259: LD_STRING ")
70261: STR
70262: PPUSH
70263: CALL_OW 559
// end else
70267: GO 70276
// ToLua ( getStreamItemsFromMission("","","") ) ;
70269: LD_STRING getStreamItemsFromMission("","","")
70271: PPUSH
70272: CALL_OW 559
// end ;
70276: LD_VAR 0 2
70280: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
70281: LD_EXP 63
70285: PUSH
70286: LD_EXP 68
70290: AND
70291: IFFALSE 70415
70293: GO 70295
70295: DISABLE
70296: LD_INT 0
70298: PPUSH
70299: PPUSH
// begin enable ;
70300: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
70301: LD_ADDR_VAR 0 2
70305: PUSH
70306: LD_INT 22
70308: PUSH
70309: LD_OWVAR 2
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 2
70320: PUSH
70321: LD_INT 34
70323: PUSH
70324: LD_INT 7
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 34
70333: PUSH
70334: LD_INT 45
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 34
70343: PUSH
70344: LD_INT 28
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 34
70353: PUSH
70354: LD_INT 47
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PPUSH
70372: CALL_OW 69
70376: ST_TO_ADDR
// if not tmp then
70377: LD_VAR 0 2
70381: NOT
70382: IFFALSE 70386
// exit ;
70384: GO 70415
// for i in tmp do
70386: LD_ADDR_VAR 0 1
70390: PUSH
70391: LD_VAR 0 2
70395: PUSH
70396: FOR_IN
70397: IFFALSE 70413
// begin SetLives ( i , 0 ) ;
70399: LD_VAR 0 1
70403: PPUSH
70404: LD_INT 0
70406: PPUSH
70407: CALL_OW 234
// end ;
70411: GO 70396
70413: POP
70414: POP
// end ;
70415: PPOPN 2
70417: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
70418: LD_EXP 63
70422: PUSH
70423: LD_EXP 69
70427: AND
70428: IFFALSE 70512
70430: GO 70432
70432: DISABLE
70433: LD_INT 0
70435: PPUSH
70436: PPUSH
// begin enable ;
70437: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
70438: LD_ADDR_VAR 0 2
70442: PUSH
70443: LD_INT 22
70445: PUSH
70446: LD_OWVAR 2
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 32
70457: PUSH
70458: LD_INT 3
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PPUSH
70469: CALL_OW 69
70473: ST_TO_ADDR
// if not tmp then
70474: LD_VAR 0 2
70478: NOT
70479: IFFALSE 70483
// exit ;
70481: GO 70512
// for i in tmp do
70483: LD_ADDR_VAR 0 1
70487: PUSH
70488: LD_VAR 0 2
70492: PUSH
70493: FOR_IN
70494: IFFALSE 70510
// begin SetLives ( i , 0 ) ;
70496: LD_VAR 0 1
70500: PPUSH
70501: LD_INT 0
70503: PPUSH
70504: CALL_OW 234
// end ;
70508: GO 70493
70510: POP
70511: POP
// end ;
70512: PPOPN 2
70514: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
70515: LD_EXP 63
70519: PUSH
70520: LD_EXP 66
70524: AND
70525: IFFALSE 70618
70527: GO 70529
70529: DISABLE
70530: LD_INT 0
70532: PPUSH
// begin enable ;
70533: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
70534: LD_ADDR_VAR 0 1
70538: PUSH
70539: LD_INT 22
70541: PUSH
70542: LD_OWVAR 2
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 2
70553: PUSH
70554: LD_INT 25
70556: PUSH
70557: LD_INT 5
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 25
70566: PUSH
70567: LD_INT 9
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 25
70576: PUSH
70577: LD_INT 8
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PPUSH
70594: CALL_OW 69
70598: PUSH
70599: FOR_IN
70600: IFFALSE 70616
// begin SetClass ( i , 1 ) ;
70602: LD_VAR 0 1
70606: PPUSH
70607: LD_INT 1
70609: PPUSH
70610: CALL_OW 336
// end ;
70614: GO 70599
70616: POP
70617: POP
// end ;
70618: PPOPN 1
70620: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
70621: LD_EXP 63
70625: PUSH
70626: LD_EXP 67
70630: AND
70631: PUSH
70632: LD_OWVAR 65
70636: PUSH
70637: LD_INT 7
70639: LESS
70640: AND
70641: IFFALSE 70655
70643: GO 70645
70645: DISABLE
// begin enable ;
70646: ENABLE
// game_speed := 7 ;
70647: LD_ADDR_OWVAR 65
70651: PUSH
70652: LD_INT 7
70654: ST_TO_ADDR
// end ;
70655: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
70656: LD_EXP 63
70660: PUSH
70661: LD_EXP 70
70665: AND
70666: IFFALSE 70868
70668: GO 70670
70670: DISABLE
70671: LD_INT 0
70673: PPUSH
70674: PPUSH
70675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70676: LD_ADDR_VAR 0 3
70680: PUSH
70681: LD_INT 81
70683: PUSH
70684: LD_OWVAR 2
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 21
70695: PUSH
70696: LD_INT 1
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PPUSH
70707: CALL_OW 69
70711: ST_TO_ADDR
// if not tmp then
70712: LD_VAR 0 3
70716: NOT
70717: IFFALSE 70721
// exit ;
70719: GO 70868
// if tmp > 5 then
70721: LD_VAR 0 3
70725: PUSH
70726: LD_INT 5
70728: GREATER
70729: IFFALSE 70741
// k := 5 else
70731: LD_ADDR_VAR 0 2
70735: PUSH
70736: LD_INT 5
70738: ST_TO_ADDR
70739: GO 70751
// k := tmp ;
70741: LD_ADDR_VAR 0 2
70745: PUSH
70746: LD_VAR 0 3
70750: ST_TO_ADDR
// for i := 1 to k do
70751: LD_ADDR_VAR 0 1
70755: PUSH
70756: DOUBLE
70757: LD_INT 1
70759: DEC
70760: ST_TO_ADDR
70761: LD_VAR 0 2
70765: PUSH
70766: FOR_TO
70767: IFFALSE 70866
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
70769: LD_VAR 0 3
70773: PUSH
70774: LD_VAR 0 1
70778: ARRAY
70779: PPUSH
70780: LD_VAR 0 1
70784: PUSH
70785: LD_INT 4
70787: MOD
70788: PUSH
70789: LD_INT 1
70791: PLUS
70792: PPUSH
70793: CALL_OW 259
70797: PUSH
70798: LD_INT 10
70800: LESS
70801: IFFALSE 70864
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
70803: LD_VAR 0 3
70807: PUSH
70808: LD_VAR 0 1
70812: ARRAY
70813: PPUSH
70814: LD_VAR 0 1
70818: PUSH
70819: LD_INT 4
70821: MOD
70822: PUSH
70823: LD_INT 1
70825: PLUS
70826: PPUSH
70827: LD_VAR 0 3
70831: PUSH
70832: LD_VAR 0 1
70836: ARRAY
70837: PPUSH
70838: LD_VAR 0 1
70842: PUSH
70843: LD_INT 4
70845: MOD
70846: PUSH
70847: LD_INT 1
70849: PLUS
70850: PPUSH
70851: CALL_OW 259
70855: PUSH
70856: LD_INT 1
70858: PLUS
70859: PPUSH
70860: CALL_OW 237
70864: GO 70766
70866: POP
70867: POP
// end ;
70868: PPOPN 3
70870: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
70871: LD_EXP 63
70875: PUSH
70876: LD_EXP 71
70880: AND
70881: IFFALSE 70901
70883: GO 70885
70885: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
70886: LD_INT 4
70888: PPUSH
70889: LD_OWVAR 2
70893: PPUSH
70894: LD_INT 0
70896: PPUSH
70897: CALL_OW 324
70901: END
// every 0 0$1 trigger StreamModeActive and sShovel do
70902: LD_EXP 63
70906: PUSH
70907: LD_EXP 100
70911: AND
70912: IFFALSE 70932
70914: GO 70916
70916: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
70917: LD_INT 19
70919: PPUSH
70920: LD_OWVAR 2
70924: PPUSH
70925: LD_INT 0
70927: PPUSH
70928: CALL_OW 324
70932: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
70933: LD_EXP 63
70937: PUSH
70938: LD_EXP 72
70942: AND
70943: IFFALSE 71045
70945: GO 70947
70947: DISABLE
70948: LD_INT 0
70950: PPUSH
70951: PPUSH
// begin enable ;
70952: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
70953: LD_ADDR_VAR 0 2
70957: PUSH
70958: LD_INT 22
70960: PUSH
70961: LD_OWVAR 2
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: LD_INT 2
70972: PUSH
70973: LD_INT 34
70975: PUSH
70976: LD_INT 11
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 34
70985: PUSH
70986: LD_INT 30
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: LIST
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PPUSH
71002: CALL_OW 69
71006: ST_TO_ADDR
// if not tmp then
71007: LD_VAR 0 2
71011: NOT
71012: IFFALSE 71016
// exit ;
71014: GO 71045
// for i in tmp do
71016: LD_ADDR_VAR 0 1
71020: PUSH
71021: LD_VAR 0 2
71025: PUSH
71026: FOR_IN
71027: IFFALSE 71043
// begin SetLives ( i , 0 ) ;
71029: LD_VAR 0 1
71033: PPUSH
71034: LD_INT 0
71036: PPUSH
71037: CALL_OW 234
// end ;
71041: GO 71026
71043: POP
71044: POP
// end ;
71045: PPOPN 2
71047: END
// every 0 0$1 trigger StreamModeActive and sBunker do
71048: LD_EXP 63
71052: PUSH
71053: LD_EXP 73
71057: AND
71058: IFFALSE 71078
71060: GO 71062
71062: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
71063: LD_INT 32
71065: PPUSH
71066: LD_OWVAR 2
71070: PPUSH
71071: LD_INT 0
71073: PPUSH
71074: CALL_OW 324
71078: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
71079: LD_EXP 63
71083: PUSH
71084: LD_EXP 74
71088: AND
71089: IFFALSE 71270
71091: GO 71093
71093: DISABLE
71094: LD_INT 0
71096: PPUSH
71097: PPUSH
71098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
71099: LD_ADDR_VAR 0 2
71103: PUSH
71104: LD_INT 22
71106: PUSH
71107: LD_OWVAR 2
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 33
71118: PUSH
71119: LD_INT 3
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: PPUSH
71130: CALL_OW 69
71134: ST_TO_ADDR
// if not tmp then
71135: LD_VAR 0 2
71139: NOT
71140: IFFALSE 71144
// exit ;
71142: GO 71270
// side := 0 ;
71144: LD_ADDR_VAR 0 3
71148: PUSH
71149: LD_INT 0
71151: ST_TO_ADDR
// for i := 1 to 8 do
71152: LD_ADDR_VAR 0 1
71156: PUSH
71157: DOUBLE
71158: LD_INT 1
71160: DEC
71161: ST_TO_ADDR
71162: LD_INT 8
71164: PUSH
71165: FOR_TO
71166: IFFALSE 71214
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
71168: LD_OWVAR 2
71172: PUSH
71173: LD_VAR 0 1
71177: NONEQUAL
71178: PUSH
71179: LD_OWVAR 2
71183: PPUSH
71184: LD_VAR 0 1
71188: PPUSH
71189: CALL_OW 81
71193: PUSH
71194: LD_INT 2
71196: EQUAL
71197: AND
71198: IFFALSE 71212
// begin side := i ;
71200: LD_ADDR_VAR 0 3
71204: PUSH
71205: LD_VAR 0 1
71209: ST_TO_ADDR
// break ;
71210: GO 71214
// end ;
71212: GO 71165
71214: POP
71215: POP
// if not side then
71216: LD_VAR 0 3
71220: NOT
71221: IFFALSE 71225
// exit ;
71223: GO 71270
// for i := 1 to tmp do
71225: LD_ADDR_VAR 0 1
71229: PUSH
71230: DOUBLE
71231: LD_INT 1
71233: DEC
71234: ST_TO_ADDR
71235: LD_VAR 0 2
71239: PUSH
71240: FOR_TO
71241: IFFALSE 71268
// if Prob ( 60 ) then
71243: LD_INT 60
71245: PPUSH
71246: CALL_OW 13
71250: IFFALSE 71266
// SetSide ( i , side ) ;
71252: LD_VAR 0 1
71256: PPUSH
71257: LD_VAR 0 3
71261: PPUSH
71262: CALL_OW 235
71266: GO 71240
71268: POP
71269: POP
// end ;
71270: PPOPN 3
71272: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
71273: LD_EXP 63
71277: PUSH
71278: LD_EXP 76
71282: AND
71283: IFFALSE 71402
71285: GO 71287
71287: DISABLE
71288: LD_INT 0
71290: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
71291: LD_ADDR_VAR 0 1
71295: PUSH
71296: LD_INT 22
71298: PUSH
71299: LD_OWVAR 2
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_INT 21
71310: PUSH
71311: LD_INT 1
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 3
71320: PUSH
71321: LD_INT 23
71323: PUSH
71324: LD_INT 0
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: LIST
71339: PPUSH
71340: CALL_OW 69
71344: PUSH
71345: FOR_IN
71346: IFFALSE 71400
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
71348: LD_VAR 0 1
71352: PPUSH
71353: CALL_OW 257
71357: PUSH
71358: LD_INT 1
71360: PUSH
71361: LD_INT 2
71363: PUSH
71364: LD_INT 3
71366: PUSH
71367: LD_INT 4
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: IN
71376: IFFALSE 71398
// SetClass ( un , rand ( 1 , 4 ) ) ;
71378: LD_VAR 0 1
71382: PPUSH
71383: LD_INT 1
71385: PPUSH
71386: LD_INT 4
71388: PPUSH
71389: CALL_OW 12
71393: PPUSH
71394: CALL_OW 336
71398: GO 71345
71400: POP
71401: POP
// end ;
71402: PPOPN 1
71404: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
71405: LD_EXP 63
71409: PUSH
71410: LD_EXP 75
71414: AND
71415: IFFALSE 71494
71417: GO 71419
71419: DISABLE
71420: LD_INT 0
71422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71423: LD_ADDR_VAR 0 1
71427: PUSH
71428: LD_INT 22
71430: PUSH
71431: LD_OWVAR 2
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 21
71442: PUSH
71443: LD_INT 3
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PPUSH
71454: CALL_OW 69
71458: ST_TO_ADDR
// if not tmp then
71459: LD_VAR 0 1
71463: NOT
71464: IFFALSE 71468
// exit ;
71466: GO 71494
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
71468: LD_VAR 0 1
71472: PUSH
71473: LD_INT 1
71475: PPUSH
71476: LD_VAR 0 1
71480: PPUSH
71481: CALL_OW 12
71485: ARRAY
71486: PPUSH
71487: LD_INT 100
71489: PPUSH
71490: CALL_OW 234
// end ;
71494: PPOPN 1
71496: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
71497: LD_EXP 63
71501: PUSH
71502: LD_EXP 77
71506: AND
71507: IFFALSE 71605
71509: GO 71511
71511: DISABLE
71512: LD_INT 0
71514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71515: LD_ADDR_VAR 0 1
71519: PUSH
71520: LD_INT 22
71522: PUSH
71523: LD_OWVAR 2
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 21
71534: PUSH
71535: LD_INT 1
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PPUSH
71546: CALL_OW 69
71550: ST_TO_ADDR
// if not tmp then
71551: LD_VAR 0 1
71555: NOT
71556: IFFALSE 71560
// exit ;
71558: GO 71605
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
71560: LD_VAR 0 1
71564: PUSH
71565: LD_INT 1
71567: PPUSH
71568: LD_VAR 0 1
71572: PPUSH
71573: CALL_OW 12
71577: ARRAY
71578: PPUSH
71579: LD_INT 1
71581: PPUSH
71582: LD_INT 4
71584: PPUSH
71585: CALL_OW 12
71589: PPUSH
71590: LD_INT 3000
71592: PPUSH
71593: LD_INT 9000
71595: PPUSH
71596: CALL_OW 12
71600: PPUSH
71601: CALL_OW 492
// end ;
71605: PPOPN 1
71607: END
// every 0 0$1 trigger StreamModeActive and sDepot do
71608: LD_EXP 63
71612: PUSH
71613: LD_EXP 78
71617: AND
71618: IFFALSE 71638
71620: GO 71622
71622: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
71623: LD_INT 1
71625: PPUSH
71626: LD_OWVAR 2
71630: PPUSH
71631: LD_INT 0
71633: PPUSH
71634: CALL_OW 324
71638: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
71639: LD_EXP 63
71643: PUSH
71644: LD_EXP 79
71648: AND
71649: IFFALSE 71732
71651: GO 71653
71653: DISABLE
71654: LD_INT 0
71656: PPUSH
71657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71658: LD_ADDR_VAR 0 2
71662: PUSH
71663: LD_INT 22
71665: PUSH
71666: LD_OWVAR 2
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 21
71677: PUSH
71678: LD_INT 3
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PPUSH
71689: CALL_OW 69
71693: ST_TO_ADDR
// if not tmp then
71694: LD_VAR 0 2
71698: NOT
71699: IFFALSE 71703
// exit ;
71701: GO 71732
// for i in tmp do
71703: LD_ADDR_VAR 0 1
71707: PUSH
71708: LD_VAR 0 2
71712: PUSH
71713: FOR_IN
71714: IFFALSE 71730
// SetBLevel ( i , 10 ) ;
71716: LD_VAR 0 1
71720: PPUSH
71721: LD_INT 10
71723: PPUSH
71724: CALL_OW 241
71728: GO 71713
71730: POP
71731: POP
// end ;
71732: PPOPN 2
71734: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
71735: LD_EXP 63
71739: PUSH
71740: LD_EXP 80
71744: AND
71745: IFFALSE 71856
71747: GO 71749
71749: DISABLE
71750: LD_INT 0
71752: PPUSH
71753: PPUSH
71754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71755: LD_ADDR_VAR 0 3
71759: PUSH
71760: LD_INT 22
71762: PUSH
71763: LD_OWVAR 2
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: PUSH
71772: LD_INT 25
71774: PUSH
71775: LD_INT 1
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PPUSH
71786: CALL_OW 69
71790: ST_TO_ADDR
// if not tmp then
71791: LD_VAR 0 3
71795: NOT
71796: IFFALSE 71800
// exit ;
71798: GO 71856
// un := tmp [ rand ( 1 , tmp ) ] ;
71800: LD_ADDR_VAR 0 2
71804: PUSH
71805: LD_VAR 0 3
71809: PUSH
71810: LD_INT 1
71812: PPUSH
71813: LD_VAR 0 3
71817: PPUSH
71818: CALL_OW 12
71822: ARRAY
71823: ST_TO_ADDR
// if Crawls ( un ) then
71824: LD_VAR 0 2
71828: PPUSH
71829: CALL_OW 318
71833: IFFALSE 71844
// ComWalk ( un ) ;
71835: LD_VAR 0 2
71839: PPUSH
71840: CALL_OW 138
// SetClass ( un , class_sniper ) ;
71844: LD_VAR 0 2
71848: PPUSH
71849: LD_INT 5
71851: PPUSH
71852: CALL_OW 336
// end ;
71856: PPOPN 3
71858: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
71859: LD_EXP 63
71863: PUSH
71864: LD_EXP 81
71868: AND
71869: PUSH
71870: LD_OWVAR 67
71874: PUSH
71875: LD_INT 4
71877: LESS
71878: AND
71879: IFFALSE 71898
71881: GO 71883
71883: DISABLE
// begin Difficulty := Difficulty + 1 ;
71884: LD_ADDR_OWVAR 67
71888: PUSH
71889: LD_OWVAR 67
71893: PUSH
71894: LD_INT 1
71896: PLUS
71897: ST_TO_ADDR
// end ;
71898: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
71899: LD_EXP 63
71903: PUSH
71904: LD_EXP 82
71908: AND
71909: IFFALSE 72012
71911: GO 71913
71913: DISABLE
71914: LD_INT 0
71916: PPUSH
// begin for i := 1 to 5 do
71917: LD_ADDR_VAR 0 1
71921: PUSH
71922: DOUBLE
71923: LD_INT 1
71925: DEC
71926: ST_TO_ADDR
71927: LD_INT 5
71929: PUSH
71930: FOR_TO
71931: IFFALSE 72010
// begin uc_nation := nation_nature ;
71933: LD_ADDR_OWVAR 21
71937: PUSH
71938: LD_INT 0
71940: ST_TO_ADDR
// uc_side := 0 ;
71941: LD_ADDR_OWVAR 20
71945: PUSH
71946: LD_INT 0
71948: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71949: LD_ADDR_OWVAR 29
71953: PUSH
71954: LD_INT 12
71956: PUSH
71957: LD_INT 12
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: ST_TO_ADDR
// hc_agressivity := 20 ;
71964: LD_ADDR_OWVAR 35
71968: PUSH
71969: LD_INT 20
71971: ST_TO_ADDR
// hc_class := class_tiger ;
71972: LD_ADDR_OWVAR 28
71976: PUSH
71977: LD_INT 14
71979: ST_TO_ADDR
// hc_gallery :=  ;
71980: LD_ADDR_OWVAR 33
71984: PUSH
71985: LD_STRING 
71987: ST_TO_ADDR
// hc_name :=  ;
71988: LD_ADDR_OWVAR 26
71992: PUSH
71993: LD_STRING 
71995: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
71996: CALL_OW 44
72000: PPUSH
72001: LD_INT 0
72003: PPUSH
72004: CALL_OW 51
// end ;
72008: GO 71930
72010: POP
72011: POP
// end ;
72012: PPOPN 1
72014: END
// every 0 0$1 trigger StreamModeActive and sBomb do
72015: LD_EXP 63
72019: PUSH
72020: LD_EXP 83
72024: AND
72025: IFFALSE 72034
72027: GO 72029
72029: DISABLE
// StreamSibBomb ;
72030: CALL 72035 0 0
72034: END
// export function StreamSibBomb ; var i , x , y ; begin
72035: LD_INT 0
72037: PPUSH
72038: PPUSH
72039: PPUSH
72040: PPUSH
// result := false ;
72041: LD_ADDR_VAR 0 1
72045: PUSH
72046: LD_INT 0
72048: ST_TO_ADDR
// for i := 1 to 16 do
72049: LD_ADDR_VAR 0 2
72053: PUSH
72054: DOUBLE
72055: LD_INT 1
72057: DEC
72058: ST_TO_ADDR
72059: LD_INT 16
72061: PUSH
72062: FOR_TO
72063: IFFALSE 72262
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72065: LD_ADDR_VAR 0 3
72069: PUSH
72070: LD_INT 10
72072: PUSH
72073: LD_INT 20
72075: PUSH
72076: LD_INT 30
72078: PUSH
72079: LD_INT 40
72081: PUSH
72082: LD_INT 50
72084: PUSH
72085: LD_INT 60
72087: PUSH
72088: LD_INT 70
72090: PUSH
72091: LD_INT 80
72093: PUSH
72094: LD_INT 90
72096: PUSH
72097: LD_INT 100
72099: PUSH
72100: LD_INT 110
72102: PUSH
72103: LD_INT 120
72105: PUSH
72106: LD_INT 130
72108: PUSH
72109: LD_INT 140
72111: PUSH
72112: LD_INT 150
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: PUSH
72132: LD_INT 1
72134: PPUSH
72135: LD_INT 15
72137: PPUSH
72138: CALL_OW 12
72142: ARRAY
72143: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72144: LD_ADDR_VAR 0 4
72148: PUSH
72149: LD_INT 10
72151: PUSH
72152: LD_INT 20
72154: PUSH
72155: LD_INT 30
72157: PUSH
72158: LD_INT 40
72160: PUSH
72161: LD_INT 50
72163: PUSH
72164: LD_INT 60
72166: PUSH
72167: LD_INT 70
72169: PUSH
72170: LD_INT 80
72172: PUSH
72173: LD_INT 90
72175: PUSH
72176: LD_INT 100
72178: PUSH
72179: LD_INT 110
72181: PUSH
72182: LD_INT 120
72184: PUSH
72185: LD_INT 130
72187: PUSH
72188: LD_INT 140
72190: PUSH
72191: LD_INT 150
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 1
72213: PPUSH
72214: LD_INT 15
72216: PPUSH
72217: CALL_OW 12
72221: ARRAY
72222: ST_TO_ADDR
// if ValidHex ( x , y ) then
72223: LD_VAR 0 3
72227: PPUSH
72228: LD_VAR 0 4
72232: PPUSH
72233: CALL_OW 488
72237: IFFALSE 72260
// begin result := [ x , y ] ;
72239: LD_ADDR_VAR 0 1
72243: PUSH
72244: LD_VAR 0 3
72248: PUSH
72249: LD_VAR 0 4
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: ST_TO_ADDR
// break ;
72258: GO 72262
// end ; end ;
72260: GO 72062
72262: POP
72263: POP
// if result then
72264: LD_VAR 0 1
72268: IFFALSE 72328
// begin ToLua ( playSibBomb() ) ;
72270: LD_STRING playSibBomb()
72272: PPUSH
72273: CALL_OW 559
// wait ( 0 0$14 ) ;
72277: LD_INT 490
72279: PPUSH
72280: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
72284: LD_VAR 0 1
72288: PUSH
72289: LD_INT 1
72291: ARRAY
72292: PPUSH
72293: LD_VAR 0 1
72297: PUSH
72298: LD_INT 2
72300: ARRAY
72301: PPUSH
72302: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
72306: LD_VAR 0 1
72310: PUSH
72311: LD_INT 1
72313: ARRAY
72314: PPUSH
72315: LD_VAR 0 1
72319: PUSH
72320: LD_INT 2
72322: ARRAY
72323: PPUSH
72324: CALL_OW 429
// end ; end ;
72328: LD_VAR 0 1
72332: RET
// every 0 0$1 trigger StreamModeActive and sReset do
72333: LD_EXP 63
72337: PUSH
72338: LD_EXP 85
72342: AND
72343: IFFALSE 72355
72345: GO 72347
72347: DISABLE
// YouLost (  ) ;
72348: LD_STRING 
72350: PPUSH
72351: CALL_OW 104
72355: END
// every 0 0$1 trigger StreamModeActive and sFog do
72356: LD_EXP 63
72360: PUSH
72361: LD_EXP 84
72365: AND
72366: IFFALSE 72380
72368: GO 72370
72370: DISABLE
// FogOff ( your_side ) ;
72371: LD_OWVAR 2
72375: PPUSH
72376: CALL_OW 344
72380: END
// every 0 0$1 trigger StreamModeActive and sSun do
72381: LD_EXP 63
72385: PUSH
72386: LD_EXP 86
72390: AND
72391: IFFALSE 72419
72393: GO 72395
72395: DISABLE
// begin solar_recharge_percent := 0 ;
72396: LD_ADDR_OWVAR 79
72400: PUSH
72401: LD_INT 0
72403: ST_TO_ADDR
// wait ( 5 5$00 ) ;
72404: LD_INT 10500
72406: PPUSH
72407: CALL_OW 67
// solar_recharge_percent := 100 ;
72411: LD_ADDR_OWVAR 79
72415: PUSH
72416: LD_INT 100
72418: ST_TO_ADDR
// end ;
72419: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
72420: LD_EXP 63
72424: PUSH
72425: LD_EXP 87
72429: AND
72430: IFFALSE 72669
72432: GO 72434
72434: DISABLE
72435: LD_INT 0
72437: PPUSH
72438: PPUSH
72439: PPUSH
// begin tmp := [ ] ;
72440: LD_ADDR_VAR 0 3
72444: PUSH
72445: EMPTY
72446: ST_TO_ADDR
// for i := 1 to 6 do
72447: LD_ADDR_VAR 0 1
72451: PUSH
72452: DOUBLE
72453: LD_INT 1
72455: DEC
72456: ST_TO_ADDR
72457: LD_INT 6
72459: PUSH
72460: FOR_TO
72461: IFFALSE 72566
// begin uc_nation := nation_nature ;
72463: LD_ADDR_OWVAR 21
72467: PUSH
72468: LD_INT 0
72470: ST_TO_ADDR
// uc_side := 0 ;
72471: LD_ADDR_OWVAR 20
72475: PUSH
72476: LD_INT 0
72478: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72479: LD_ADDR_OWVAR 29
72483: PUSH
72484: LD_INT 12
72486: PUSH
72487: LD_INT 12
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: ST_TO_ADDR
// hc_agressivity := 20 ;
72494: LD_ADDR_OWVAR 35
72498: PUSH
72499: LD_INT 20
72501: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
72502: LD_ADDR_OWVAR 28
72506: PUSH
72507: LD_INT 17
72509: ST_TO_ADDR
// hc_gallery :=  ;
72510: LD_ADDR_OWVAR 33
72514: PUSH
72515: LD_STRING 
72517: ST_TO_ADDR
// hc_name :=  ;
72518: LD_ADDR_OWVAR 26
72522: PUSH
72523: LD_STRING 
72525: ST_TO_ADDR
// un := CreateHuman ;
72526: LD_ADDR_VAR 0 2
72530: PUSH
72531: CALL_OW 44
72535: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
72536: LD_VAR 0 2
72540: PPUSH
72541: LD_INT 1
72543: PPUSH
72544: CALL_OW 51
// tmp := tmp ^ un ;
72548: LD_ADDR_VAR 0 3
72552: PUSH
72553: LD_VAR 0 3
72557: PUSH
72558: LD_VAR 0 2
72562: ADD
72563: ST_TO_ADDR
// end ;
72564: GO 72460
72566: POP
72567: POP
// repeat wait ( 0 0$1 ) ;
72568: LD_INT 35
72570: PPUSH
72571: CALL_OW 67
// for un in tmp do
72575: LD_ADDR_VAR 0 2
72579: PUSH
72580: LD_VAR 0 3
72584: PUSH
72585: FOR_IN
72586: IFFALSE 72660
// begin if IsDead ( un ) then
72588: LD_VAR 0 2
72592: PPUSH
72593: CALL_OW 301
72597: IFFALSE 72617
// begin tmp := tmp diff un ;
72599: LD_ADDR_VAR 0 3
72603: PUSH
72604: LD_VAR 0 3
72608: PUSH
72609: LD_VAR 0 2
72613: DIFF
72614: ST_TO_ADDR
// continue ;
72615: GO 72585
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
72617: LD_VAR 0 2
72621: PPUSH
72622: LD_INT 3
72624: PUSH
72625: LD_INT 22
72627: PUSH
72628: LD_INT 0
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PPUSH
72639: CALL_OW 69
72643: PPUSH
72644: LD_VAR 0 2
72648: PPUSH
72649: CALL_OW 74
72653: PPUSH
72654: CALL_OW 115
// end ;
72658: GO 72585
72660: POP
72661: POP
// until not tmp ;
72662: LD_VAR 0 3
72666: NOT
72667: IFFALSE 72568
// end ;
72669: PPOPN 3
72671: END
// every 0 0$1 trigger StreamModeActive and sTroll do
72672: LD_EXP 63
72676: PUSH
72677: LD_EXP 88
72681: AND
72682: IFFALSE 72736
72684: GO 72686
72686: DISABLE
// begin ToLua ( displayTroll(); ) ;
72687: LD_STRING displayTroll();
72689: PPUSH
72690: CALL_OW 559
// wait ( 3 3$00 ) ;
72694: LD_INT 6300
72696: PPUSH
72697: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72701: LD_STRING hideTroll();
72703: PPUSH
72704: CALL_OW 559
// wait ( 1 1$00 ) ;
72708: LD_INT 2100
72710: PPUSH
72711: CALL_OW 67
// ToLua ( displayTroll(); ) ;
72715: LD_STRING displayTroll();
72717: PPUSH
72718: CALL_OW 559
// wait ( 1 1$00 ) ;
72722: LD_INT 2100
72724: PPUSH
72725: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72729: LD_STRING hideTroll();
72731: PPUSH
72732: CALL_OW 559
// end ;
72736: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
72737: LD_EXP 63
72741: PUSH
72742: LD_EXP 89
72746: AND
72747: IFFALSE 72810
72749: GO 72751
72751: DISABLE
72752: LD_INT 0
72754: PPUSH
// begin p := 0 ;
72755: LD_ADDR_VAR 0 1
72759: PUSH
72760: LD_INT 0
72762: ST_TO_ADDR
// repeat game_speed := 1 ;
72763: LD_ADDR_OWVAR 65
72767: PUSH
72768: LD_INT 1
72770: ST_TO_ADDR
// wait ( 0 0$1 ) ;
72771: LD_INT 35
72773: PPUSH
72774: CALL_OW 67
// p := p + 1 ;
72778: LD_ADDR_VAR 0 1
72782: PUSH
72783: LD_VAR 0 1
72787: PUSH
72788: LD_INT 1
72790: PLUS
72791: ST_TO_ADDR
// until p >= 60 ;
72792: LD_VAR 0 1
72796: PUSH
72797: LD_INT 60
72799: GREATEREQUAL
72800: IFFALSE 72763
// game_speed := 4 ;
72802: LD_ADDR_OWVAR 65
72806: PUSH
72807: LD_INT 4
72809: ST_TO_ADDR
// end ;
72810: PPOPN 1
72812: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
72813: LD_EXP 63
72817: PUSH
72818: LD_EXP 90
72822: AND
72823: IFFALSE 72969
72825: GO 72827
72827: DISABLE
72828: LD_INT 0
72830: PPUSH
72831: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72832: LD_ADDR_VAR 0 1
72836: PUSH
72837: LD_INT 22
72839: PUSH
72840: LD_OWVAR 2
72844: PUSH
72845: EMPTY
72846: LIST
72847: LIST
72848: PUSH
72849: LD_INT 2
72851: PUSH
72852: LD_INT 30
72854: PUSH
72855: LD_INT 0
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: PUSH
72862: LD_INT 30
72864: PUSH
72865: LD_INT 1
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: LIST
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PPUSH
72881: CALL_OW 69
72885: ST_TO_ADDR
// if not depot then
72886: LD_VAR 0 1
72890: NOT
72891: IFFALSE 72895
// exit ;
72893: GO 72969
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
72895: LD_ADDR_VAR 0 2
72899: PUSH
72900: LD_VAR 0 1
72904: PUSH
72905: LD_INT 1
72907: PPUSH
72908: LD_VAR 0 1
72912: PPUSH
72913: CALL_OW 12
72917: ARRAY
72918: PPUSH
72919: CALL_OW 274
72923: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
72924: LD_VAR 0 2
72928: PPUSH
72929: LD_INT 1
72931: PPUSH
72932: LD_INT 0
72934: PPUSH
72935: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
72939: LD_VAR 0 2
72943: PPUSH
72944: LD_INT 2
72946: PPUSH
72947: LD_INT 0
72949: PPUSH
72950: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
72954: LD_VAR 0 2
72958: PPUSH
72959: LD_INT 3
72961: PPUSH
72962: LD_INT 0
72964: PPUSH
72965: CALL_OW 277
// end ;
72969: PPOPN 2
72971: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
72972: LD_EXP 63
72976: PUSH
72977: LD_EXP 91
72981: AND
72982: IFFALSE 73079
72984: GO 72986
72986: DISABLE
72987: LD_INT 0
72989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72990: LD_ADDR_VAR 0 1
72994: PUSH
72995: LD_INT 22
72997: PUSH
72998: LD_OWVAR 2
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 21
73009: PUSH
73010: LD_INT 1
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: PUSH
73017: LD_INT 3
73019: PUSH
73020: LD_INT 23
73022: PUSH
73023: LD_INT 0
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: PUSH
73030: EMPTY
73031: LIST
73032: LIST
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: LIST
73038: PPUSH
73039: CALL_OW 69
73043: ST_TO_ADDR
// if not tmp then
73044: LD_VAR 0 1
73048: NOT
73049: IFFALSE 73053
// exit ;
73051: GO 73079
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
73053: LD_VAR 0 1
73057: PUSH
73058: LD_INT 1
73060: PPUSH
73061: LD_VAR 0 1
73065: PPUSH
73066: CALL_OW 12
73070: ARRAY
73071: PPUSH
73072: LD_INT 200
73074: PPUSH
73075: CALL_OW 234
// end ;
73079: PPOPN 1
73081: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
73082: LD_EXP 63
73086: PUSH
73087: LD_EXP 92
73091: AND
73092: IFFALSE 73171
73094: GO 73096
73096: DISABLE
73097: LD_INT 0
73099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
73100: LD_ADDR_VAR 0 1
73104: PUSH
73105: LD_INT 22
73107: PUSH
73108: LD_OWVAR 2
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_INT 21
73119: PUSH
73120: LD_INT 2
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: PPUSH
73131: CALL_OW 69
73135: ST_TO_ADDR
// if not tmp then
73136: LD_VAR 0 1
73140: NOT
73141: IFFALSE 73145
// exit ;
73143: GO 73171
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
73145: LD_VAR 0 1
73149: PUSH
73150: LD_INT 1
73152: PPUSH
73153: LD_VAR 0 1
73157: PPUSH
73158: CALL_OW 12
73162: ARRAY
73163: PPUSH
73164: LD_INT 60
73166: PPUSH
73167: CALL_OW 234
// end ;
73171: PPOPN 1
73173: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
73174: LD_EXP 63
73178: PUSH
73179: LD_EXP 93
73183: AND
73184: IFFALSE 73283
73186: GO 73188
73188: DISABLE
73189: LD_INT 0
73191: PPUSH
73192: PPUSH
// begin enable ;
73193: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
73194: LD_ADDR_VAR 0 1
73198: PUSH
73199: LD_INT 22
73201: PUSH
73202: LD_OWVAR 2
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: PUSH
73211: LD_INT 61
73213: PUSH
73214: EMPTY
73215: LIST
73216: PUSH
73217: LD_INT 33
73219: PUSH
73220: LD_INT 2
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: LIST
73231: PPUSH
73232: CALL_OW 69
73236: ST_TO_ADDR
// if not tmp then
73237: LD_VAR 0 1
73241: NOT
73242: IFFALSE 73246
// exit ;
73244: GO 73283
// for i in tmp do
73246: LD_ADDR_VAR 0 2
73250: PUSH
73251: LD_VAR 0 1
73255: PUSH
73256: FOR_IN
73257: IFFALSE 73281
// if IsControledBy ( i ) then
73259: LD_VAR 0 2
73263: PPUSH
73264: CALL_OW 312
73268: IFFALSE 73279
// ComUnlink ( i ) ;
73270: LD_VAR 0 2
73274: PPUSH
73275: CALL_OW 136
73279: GO 73256
73281: POP
73282: POP
// end ;
73283: PPOPN 2
73285: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
73286: LD_EXP 63
73290: PUSH
73291: LD_EXP 94
73295: AND
73296: IFFALSE 73436
73298: GO 73300
73300: DISABLE
73301: LD_INT 0
73303: PPUSH
73304: PPUSH
// begin ToLua ( displayPowell(); ) ;
73305: LD_STRING displayPowell();
73307: PPUSH
73308: CALL_OW 559
// uc_side := 0 ;
73312: LD_ADDR_OWVAR 20
73316: PUSH
73317: LD_INT 0
73319: ST_TO_ADDR
// uc_nation := 2 ;
73320: LD_ADDR_OWVAR 21
73324: PUSH
73325: LD_INT 2
73327: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
73328: LD_ADDR_OWVAR 37
73332: PUSH
73333: LD_INT 14
73335: ST_TO_ADDR
// vc_engine := engine_siberite ;
73336: LD_ADDR_OWVAR 39
73340: PUSH
73341: LD_INT 3
73343: ST_TO_ADDR
// vc_control := control_apeman ;
73344: LD_ADDR_OWVAR 38
73348: PUSH
73349: LD_INT 5
73351: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
73352: LD_ADDR_OWVAR 40
73356: PUSH
73357: LD_INT 29
73359: ST_TO_ADDR
// un := CreateVehicle ;
73360: LD_ADDR_VAR 0 2
73364: PUSH
73365: CALL_OW 45
73369: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73370: LD_VAR 0 2
73374: PPUSH
73375: LD_INT 1
73377: PPUSH
73378: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73382: LD_INT 35
73384: PPUSH
73385: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73389: LD_VAR 0 2
73393: PPUSH
73394: LD_INT 22
73396: PUSH
73397: LD_OWVAR 2
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PPUSH
73406: CALL_OW 69
73410: PPUSH
73411: LD_VAR 0 2
73415: PPUSH
73416: CALL_OW 74
73420: PPUSH
73421: CALL_OW 115
// until IsDead ( un ) ;
73425: LD_VAR 0 2
73429: PPUSH
73430: CALL_OW 301
73434: IFFALSE 73382
// end ;
73436: PPOPN 2
73438: END
// every 0 0$1 trigger StreamModeActive and sStu do
73439: LD_EXP 63
73443: PUSH
73444: LD_EXP 102
73448: AND
73449: IFFALSE 73465
73451: GO 73453
73453: DISABLE
// begin ToLua ( displayStucuk(); ) ;
73454: LD_STRING displayStucuk();
73456: PPUSH
73457: CALL_OW 559
// ResetFog ;
73461: CALL_OW 335
// end ;
73465: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
73466: LD_EXP 63
73470: PUSH
73471: LD_EXP 95
73475: AND
73476: IFFALSE 73617
73478: GO 73480
73480: DISABLE
73481: LD_INT 0
73483: PPUSH
73484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73485: LD_ADDR_VAR 0 2
73489: PUSH
73490: LD_INT 22
73492: PUSH
73493: LD_OWVAR 2
73497: PUSH
73498: EMPTY
73499: LIST
73500: LIST
73501: PUSH
73502: LD_INT 21
73504: PUSH
73505: LD_INT 1
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: PPUSH
73516: CALL_OW 69
73520: ST_TO_ADDR
// if not tmp then
73521: LD_VAR 0 2
73525: NOT
73526: IFFALSE 73530
// exit ;
73528: GO 73617
// un := tmp [ rand ( 1 , tmp ) ] ;
73530: LD_ADDR_VAR 0 1
73534: PUSH
73535: LD_VAR 0 2
73539: PUSH
73540: LD_INT 1
73542: PPUSH
73543: LD_VAR 0 2
73547: PPUSH
73548: CALL_OW 12
73552: ARRAY
73553: ST_TO_ADDR
// SetSide ( un , 0 ) ;
73554: LD_VAR 0 1
73558: PPUSH
73559: LD_INT 0
73561: PPUSH
73562: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
73566: LD_VAR 0 1
73570: PPUSH
73571: LD_OWVAR 3
73575: PUSH
73576: LD_VAR 0 1
73580: DIFF
73581: PPUSH
73582: LD_VAR 0 1
73586: PPUSH
73587: CALL_OW 74
73591: PPUSH
73592: CALL_OW 115
// wait ( 0 0$20 ) ;
73596: LD_INT 700
73598: PPUSH
73599: CALL_OW 67
// SetSide ( un , your_side ) ;
73603: LD_VAR 0 1
73607: PPUSH
73608: LD_OWVAR 2
73612: PPUSH
73613: CALL_OW 235
// end ;
73617: PPOPN 2
73619: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
73620: LD_EXP 63
73624: PUSH
73625: LD_EXP 96
73629: AND
73630: IFFALSE 73736
73632: GO 73634
73634: DISABLE
73635: LD_INT 0
73637: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73638: LD_ADDR_VAR 0 1
73642: PUSH
73643: LD_INT 22
73645: PUSH
73646: LD_OWVAR 2
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 2
73657: PUSH
73658: LD_INT 30
73660: PUSH
73661: LD_INT 0
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: PUSH
73668: LD_INT 30
73670: PUSH
73671: LD_INT 1
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: LIST
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: PPUSH
73687: CALL_OW 69
73691: ST_TO_ADDR
// if not depot then
73692: LD_VAR 0 1
73696: NOT
73697: IFFALSE 73701
// exit ;
73699: GO 73736
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
73701: LD_VAR 0 1
73705: PUSH
73706: LD_INT 1
73708: ARRAY
73709: PPUSH
73710: CALL_OW 250
73714: PPUSH
73715: LD_VAR 0 1
73719: PUSH
73720: LD_INT 1
73722: ARRAY
73723: PPUSH
73724: CALL_OW 251
73728: PPUSH
73729: LD_INT 70
73731: PPUSH
73732: CALL_OW 495
// end ;
73736: PPOPN 1
73738: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
73739: LD_EXP 63
73743: PUSH
73744: LD_EXP 97
73748: AND
73749: IFFALSE 73960
73751: GO 73753
73753: DISABLE
73754: LD_INT 0
73756: PPUSH
73757: PPUSH
73758: PPUSH
73759: PPUSH
73760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73761: LD_ADDR_VAR 0 5
73765: PUSH
73766: LD_INT 22
73768: PUSH
73769: LD_OWVAR 2
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: PUSH
73778: LD_INT 21
73780: PUSH
73781: LD_INT 1
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: PPUSH
73792: CALL_OW 69
73796: ST_TO_ADDR
// if not tmp then
73797: LD_VAR 0 5
73801: NOT
73802: IFFALSE 73806
// exit ;
73804: GO 73960
// for i in tmp do
73806: LD_ADDR_VAR 0 1
73810: PUSH
73811: LD_VAR 0 5
73815: PUSH
73816: FOR_IN
73817: IFFALSE 73958
// begin d := rand ( 0 , 5 ) ;
73819: LD_ADDR_VAR 0 4
73823: PUSH
73824: LD_INT 0
73826: PPUSH
73827: LD_INT 5
73829: PPUSH
73830: CALL_OW 12
73834: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
73835: LD_ADDR_VAR 0 2
73839: PUSH
73840: LD_VAR 0 1
73844: PPUSH
73845: CALL_OW 250
73849: PPUSH
73850: LD_VAR 0 4
73854: PPUSH
73855: LD_INT 3
73857: PPUSH
73858: LD_INT 12
73860: PPUSH
73861: CALL_OW 12
73865: PPUSH
73866: CALL_OW 272
73870: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
73871: LD_ADDR_VAR 0 3
73875: PUSH
73876: LD_VAR 0 1
73880: PPUSH
73881: CALL_OW 251
73885: PPUSH
73886: LD_VAR 0 4
73890: PPUSH
73891: LD_INT 3
73893: PPUSH
73894: LD_INT 12
73896: PPUSH
73897: CALL_OW 12
73901: PPUSH
73902: CALL_OW 273
73906: ST_TO_ADDR
// if ValidHex ( x , y ) then
73907: LD_VAR 0 2
73911: PPUSH
73912: LD_VAR 0 3
73916: PPUSH
73917: CALL_OW 488
73921: IFFALSE 73956
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
73923: LD_VAR 0 1
73927: PPUSH
73928: LD_VAR 0 2
73932: PPUSH
73933: LD_VAR 0 3
73937: PPUSH
73938: LD_INT 3
73940: PPUSH
73941: LD_INT 6
73943: PPUSH
73944: CALL_OW 12
73948: PPUSH
73949: LD_INT 1
73951: PPUSH
73952: CALL_OW 483
// end ;
73956: GO 73816
73958: POP
73959: POP
// end ;
73960: PPOPN 5
73962: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
73963: LD_EXP 63
73967: PUSH
73968: LD_EXP 98
73972: AND
73973: IFFALSE 74067
73975: GO 73977
73977: DISABLE
73978: LD_INT 0
73980: PPUSH
73981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
73982: LD_ADDR_VAR 0 2
73986: PUSH
73987: LD_INT 22
73989: PUSH
73990: LD_OWVAR 2
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PUSH
73999: LD_INT 32
74001: PUSH
74002: LD_INT 1
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: PUSH
74009: LD_INT 21
74011: PUSH
74012: LD_INT 2
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: LIST
74023: PPUSH
74024: CALL_OW 69
74028: ST_TO_ADDR
// if not tmp then
74029: LD_VAR 0 2
74033: NOT
74034: IFFALSE 74038
// exit ;
74036: GO 74067
// for i in tmp do
74038: LD_ADDR_VAR 0 1
74042: PUSH
74043: LD_VAR 0 2
74047: PUSH
74048: FOR_IN
74049: IFFALSE 74065
// SetFuel ( i , 0 ) ;
74051: LD_VAR 0 1
74055: PPUSH
74056: LD_INT 0
74058: PPUSH
74059: CALL_OW 240
74063: GO 74048
74065: POP
74066: POP
// end ;
74067: PPOPN 2
74069: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
74070: LD_EXP 63
74074: PUSH
74075: LD_EXP 99
74079: AND
74080: IFFALSE 74146
74082: GO 74084
74084: DISABLE
74085: LD_INT 0
74087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74088: LD_ADDR_VAR 0 1
74092: PUSH
74093: LD_INT 22
74095: PUSH
74096: LD_OWVAR 2
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: PUSH
74105: LD_INT 30
74107: PUSH
74108: LD_INT 29
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: PPUSH
74119: CALL_OW 69
74123: ST_TO_ADDR
// if not tmp then
74124: LD_VAR 0 1
74128: NOT
74129: IFFALSE 74133
// exit ;
74131: GO 74146
// DestroyUnit ( tmp [ 1 ] ) ;
74133: LD_VAR 0 1
74137: PUSH
74138: LD_INT 1
74140: ARRAY
74141: PPUSH
74142: CALL_OW 65
// end ;
74146: PPOPN 1
74148: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
74149: LD_EXP 63
74153: PUSH
74154: LD_EXP 101
74158: AND
74159: IFFALSE 74288
74161: GO 74163
74163: DISABLE
74164: LD_INT 0
74166: PPUSH
// begin uc_side := 0 ;
74167: LD_ADDR_OWVAR 20
74171: PUSH
74172: LD_INT 0
74174: ST_TO_ADDR
// uc_nation := nation_arabian ;
74175: LD_ADDR_OWVAR 21
74179: PUSH
74180: LD_INT 2
74182: ST_TO_ADDR
// hc_gallery :=  ;
74183: LD_ADDR_OWVAR 33
74187: PUSH
74188: LD_STRING 
74190: ST_TO_ADDR
// hc_name :=  ;
74191: LD_ADDR_OWVAR 26
74195: PUSH
74196: LD_STRING 
74198: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
74199: LD_INT 1
74201: PPUSH
74202: LD_INT 11
74204: PPUSH
74205: LD_INT 10
74207: PPUSH
74208: CALL_OW 380
// un := CreateHuman ;
74212: LD_ADDR_VAR 0 1
74216: PUSH
74217: CALL_OW 44
74221: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74222: LD_VAR 0 1
74226: PPUSH
74227: LD_INT 1
74229: PPUSH
74230: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
74234: LD_INT 35
74236: PPUSH
74237: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74241: LD_VAR 0 1
74245: PPUSH
74246: LD_INT 22
74248: PUSH
74249: LD_OWVAR 2
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: PPUSH
74258: CALL_OW 69
74262: PPUSH
74263: LD_VAR 0 1
74267: PPUSH
74268: CALL_OW 74
74272: PPUSH
74273: CALL_OW 115
// until IsDead ( un ) ;
74277: LD_VAR 0 1
74281: PPUSH
74282: CALL_OW 301
74286: IFFALSE 74234
// end ;
74288: PPOPN 1
74290: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
74291: LD_EXP 63
74295: PUSH
74296: LD_EXP 103
74300: AND
74301: IFFALSE 74313
74303: GO 74305
74305: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
74306: LD_STRING earthquake(getX(game), 0, 32)
74308: PPUSH
74309: CALL_OW 559
74313: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
74314: LD_EXP 63
74318: PUSH
74319: LD_EXP 104
74323: AND
74324: IFFALSE 74415
74326: GO 74328
74328: DISABLE
74329: LD_INT 0
74331: PPUSH
// begin enable ;
74332: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
74333: LD_ADDR_VAR 0 1
74337: PUSH
74338: LD_INT 22
74340: PUSH
74341: LD_OWVAR 2
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: PUSH
74350: LD_INT 21
74352: PUSH
74353: LD_INT 2
74355: PUSH
74356: EMPTY
74357: LIST
74358: LIST
74359: PUSH
74360: LD_INT 33
74362: PUSH
74363: LD_INT 3
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: PUSH
74370: EMPTY
74371: LIST
74372: LIST
74373: LIST
74374: PPUSH
74375: CALL_OW 69
74379: ST_TO_ADDR
// if not tmp then
74380: LD_VAR 0 1
74384: NOT
74385: IFFALSE 74389
// exit ;
74387: GO 74415
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74389: LD_VAR 0 1
74393: PUSH
74394: LD_INT 1
74396: PPUSH
74397: LD_VAR 0 1
74401: PPUSH
74402: CALL_OW 12
74406: ARRAY
74407: PPUSH
74408: LD_INT 1
74410: PPUSH
74411: CALL_OW 234
// end ;
74415: PPOPN 1
74417: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
74418: LD_EXP 63
74422: PUSH
74423: LD_EXP 105
74427: AND
74428: IFFALSE 74569
74430: GO 74432
74432: DISABLE
74433: LD_INT 0
74435: PPUSH
74436: PPUSH
74437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74438: LD_ADDR_VAR 0 3
74442: PUSH
74443: LD_INT 22
74445: PUSH
74446: LD_OWVAR 2
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: LD_INT 25
74457: PUSH
74458: LD_INT 1
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PPUSH
74469: CALL_OW 69
74473: ST_TO_ADDR
// if not tmp then
74474: LD_VAR 0 3
74478: NOT
74479: IFFALSE 74483
// exit ;
74481: GO 74569
// un := tmp [ rand ( 1 , tmp ) ] ;
74483: LD_ADDR_VAR 0 2
74487: PUSH
74488: LD_VAR 0 3
74492: PUSH
74493: LD_INT 1
74495: PPUSH
74496: LD_VAR 0 3
74500: PPUSH
74501: CALL_OW 12
74505: ARRAY
74506: ST_TO_ADDR
// if Crawls ( un ) then
74507: LD_VAR 0 2
74511: PPUSH
74512: CALL_OW 318
74516: IFFALSE 74527
// ComWalk ( un ) ;
74518: LD_VAR 0 2
74522: PPUSH
74523: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
74527: LD_VAR 0 2
74531: PPUSH
74532: LD_INT 9
74534: PPUSH
74535: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
74539: LD_INT 28
74541: PPUSH
74542: LD_OWVAR 2
74546: PPUSH
74547: LD_INT 2
74549: PPUSH
74550: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
74554: LD_INT 29
74556: PPUSH
74557: LD_OWVAR 2
74561: PPUSH
74562: LD_INT 2
74564: PPUSH
74565: CALL_OW 322
// end ;
74569: PPOPN 3
74571: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
74572: LD_EXP 63
74576: PUSH
74577: LD_EXP 106
74581: AND
74582: IFFALSE 74693
74584: GO 74586
74586: DISABLE
74587: LD_INT 0
74589: PPUSH
74590: PPUSH
74591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74592: LD_ADDR_VAR 0 3
74596: PUSH
74597: LD_INT 22
74599: PUSH
74600: LD_OWVAR 2
74604: PUSH
74605: EMPTY
74606: LIST
74607: LIST
74608: PUSH
74609: LD_INT 25
74611: PUSH
74612: LD_INT 1
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: PUSH
74619: EMPTY
74620: LIST
74621: LIST
74622: PPUSH
74623: CALL_OW 69
74627: ST_TO_ADDR
// if not tmp then
74628: LD_VAR 0 3
74632: NOT
74633: IFFALSE 74637
// exit ;
74635: GO 74693
// un := tmp [ rand ( 1 , tmp ) ] ;
74637: LD_ADDR_VAR 0 2
74641: PUSH
74642: LD_VAR 0 3
74646: PUSH
74647: LD_INT 1
74649: PPUSH
74650: LD_VAR 0 3
74654: PPUSH
74655: CALL_OW 12
74659: ARRAY
74660: ST_TO_ADDR
// if Crawls ( un ) then
74661: LD_VAR 0 2
74665: PPUSH
74666: CALL_OW 318
74670: IFFALSE 74681
// ComWalk ( un ) ;
74672: LD_VAR 0 2
74676: PPUSH
74677: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74681: LD_VAR 0 2
74685: PPUSH
74686: LD_INT 8
74688: PPUSH
74689: CALL_OW 336
// end ;
74693: PPOPN 3
74695: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
74696: LD_EXP 63
74700: PUSH
74701: LD_EXP 107
74705: AND
74706: IFFALSE 74850
74708: GO 74710
74710: DISABLE
74711: LD_INT 0
74713: PPUSH
74714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
74715: LD_ADDR_VAR 0 2
74719: PUSH
74720: LD_INT 22
74722: PUSH
74723: LD_OWVAR 2
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: PUSH
74732: LD_INT 21
74734: PUSH
74735: LD_INT 2
74737: PUSH
74738: EMPTY
74739: LIST
74740: LIST
74741: PUSH
74742: LD_INT 2
74744: PUSH
74745: LD_INT 34
74747: PUSH
74748: LD_INT 12
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: PUSH
74755: LD_INT 34
74757: PUSH
74758: LD_INT 51
74760: PUSH
74761: EMPTY
74762: LIST
74763: LIST
74764: PUSH
74765: LD_INT 34
74767: PUSH
74768: LD_INT 32
74770: PUSH
74771: EMPTY
74772: LIST
74773: LIST
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: LIST
74779: LIST
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: LIST
74785: PPUSH
74786: CALL_OW 69
74790: ST_TO_ADDR
// if not tmp then
74791: LD_VAR 0 2
74795: NOT
74796: IFFALSE 74800
// exit ;
74798: GO 74850
// for i in tmp do
74800: LD_ADDR_VAR 0 1
74804: PUSH
74805: LD_VAR 0 2
74809: PUSH
74810: FOR_IN
74811: IFFALSE 74848
// if GetCargo ( i , mat_artifact ) = 0 then
74813: LD_VAR 0 1
74817: PPUSH
74818: LD_INT 4
74820: PPUSH
74821: CALL_OW 289
74825: PUSH
74826: LD_INT 0
74828: EQUAL
74829: IFFALSE 74846
// SetCargo ( i , mat_siberit , 100 ) ;
74831: LD_VAR 0 1
74835: PPUSH
74836: LD_INT 3
74838: PPUSH
74839: LD_INT 100
74841: PPUSH
74842: CALL_OW 290
74846: GO 74810
74848: POP
74849: POP
// end ;
74850: PPOPN 2
74852: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
74853: LD_EXP 63
74857: PUSH
74858: LD_EXP 108
74862: AND
74863: IFFALSE 75046
74865: GO 74867
74867: DISABLE
74868: LD_INT 0
74870: PPUSH
74871: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74872: LD_ADDR_VAR 0 2
74876: PUSH
74877: LD_INT 22
74879: PUSH
74880: LD_OWVAR 2
74884: PUSH
74885: EMPTY
74886: LIST
74887: LIST
74888: PPUSH
74889: CALL_OW 69
74893: ST_TO_ADDR
// if not tmp then
74894: LD_VAR 0 2
74898: NOT
74899: IFFALSE 74903
// exit ;
74901: GO 75046
// for i := 1 to 2 do
74903: LD_ADDR_VAR 0 1
74907: PUSH
74908: DOUBLE
74909: LD_INT 1
74911: DEC
74912: ST_TO_ADDR
74913: LD_INT 2
74915: PUSH
74916: FOR_TO
74917: IFFALSE 75044
// begin uc_side := your_side ;
74919: LD_ADDR_OWVAR 20
74923: PUSH
74924: LD_OWVAR 2
74928: ST_TO_ADDR
// uc_nation := nation_american ;
74929: LD_ADDR_OWVAR 21
74933: PUSH
74934: LD_INT 1
74936: ST_TO_ADDR
// vc_chassis := us_morphling ;
74937: LD_ADDR_OWVAR 37
74941: PUSH
74942: LD_INT 5
74944: ST_TO_ADDR
// vc_engine := engine_siberite ;
74945: LD_ADDR_OWVAR 39
74949: PUSH
74950: LD_INT 3
74952: ST_TO_ADDR
// vc_control := control_computer ;
74953: LD_ADDR_OWVAR 38
74957: PUSH
74958: LD_INT 3
74960: ST_TO_ADDR
// vc_weapon := us_double_laser ;
74961: LD_ADDR_OWVAR 40
74965: PUSH
74966: LD_INT 10
74968: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
74969: LD_VAR 0 2
74973: PUSH
74974: LD_INT 1
74976: ARRAY
74977: PPUSH
74978: CALL_OW 310
74982: NOT
74983: IFFALSE 75030
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
74985: CALL_OW 45
74989: PPUSH
74990: LD_VAR 0 2
74994: PUSH
74995: LD_INT 1
74997: ARRAY
74998: PPUSH
74999: CALL_OW 250
75003: PPUSH
75004: LD_VAR 0 2
75008: PUSH
75009: LD_INT 1
75011: ARRAY
75012: PPUSH
75013: CALL_OW 251
75017: PPUSH
75018: LD_INT 12
75020: PPUSH
75021: LD_INT 1
75023: PPUSH
75024: CALL_OW 50
75028: GO 75042
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
75030: CALL_OW 45
75034: PPUSH
75035: LD_INT 1
75037: PPUSH
75038: CALL_OW 51
// end ;
75042: GO 74916
75044: POP
75045: POP
// end ;
75046: PPOPN 2
75048: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
75049: LD_EXP 63
75053: PUSH
75054: LD_EXP 109
75058: AND
75059: IFFALSE 75281
75061: GO 75063
75063: DISABLE
75064: LD_INT 0
75066: PPUSH
75067: PPUSH
75068: PPUSH
75069: PPUSH
75070: PPUSH
75071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75072: LD_ADDR_VAR 0 6
75076: PUSH
75077: LD_INT 22
75079: PUSH
75080: LD_OWVAR 2
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: PUSH
75089: LD_INT 21
75091: PUSH
75092: LD_INT 1
75094: PUSH
75095: EMPTY
75096: LIST
75097: LIST
75098: PUSH
75099: LD_INT 3
75101: PUSH
75102: LD_INT 23
75104: PUSH
75105: LD_INT 0
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: LIST
75120: PPUSH
75121: CALL_OW 69
75125: ST_TO_ADDR
// if not tmp then
75126: LD_VAR 0 6
75130: NOT
75131: IFFALSE 75135
// exit ;
75133: GO 75281
// s1 := rand ( 1 , 4 ) ;
75135: LD_ADDR_VAR 0 2
75139: PUSH
75140: LD_INT 1
75142: PPUSH
75143: LD_INT 4
75145: PPUSH
75146: CALL_OW 12
75150: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
75151: LD_ADDR_VAR 0 4
75155: PUSH
75156: LD_VAR 0 6
75160: PUSH
75161: LD_INT 1
75163: ARRAY
75164: PPUSH
75165: LD_VAR 0 2
75169: PPUSH
75170: CALL_OW 259
75174: ST_TO_ADDR
// if s1 = 1 then
75175: LD_VAR 0 2
75179: PUSH
75180: LD_INT 1
75182: EQUAL
75183: IFFALSE 75203
// s2 := rand ( 2 , 4 ) else
75185: LD_ADDR_VAR 0 3
75189: PUSH
75190: LD_INT 2
75192: PPUSH
75193: LD_INT 4
75195: PPUSH
75196: CALL_OW 12
75200: ST_TO_ADDR
75201: GO 75211
// s2 := 1 ;
75203: LD_ADDR_VAR 0 3
75207: PUSH
75208: LD_INT 1
75210: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
75211: LD_ADDR_VAR 0 5
75215: PUSH
75216: LD_VAR 0 6
75220: PUSH
75221: LD_INT 1
75223: ARRAY
75224: PPUSH
75225: LD_VAR 0 3
75229: PPUSH
75230: CALL_OW 259
75234: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
75235: LD_VAR 0 6
75239: PUSH
75240: LD_INT 1
75242: ARRAY
75243: PPUSH
75244: LD_VAR 0 2
75248: PPUSH
75249: LD_VAR 0 5
75253: PPUSH
75254: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
75258: LD_VAR 0 6
75262: PUSH
75263: LD_INT 1
75265: ARRAY
75266: PPUSH
75267: LD_VAR 0 3
75271: PPUSH
75272: LD_VAR 0 4
75276: PPUSH
75277: CALL_OW 237
// end ;
75281: PPOPN 6
75283: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
75284: LD_EXP 63
75288: PUSH
75289: LD_EXP 110
75293: AND
75294: IFFALSE 75373
75296: GO 75298
75298: DISABLE
75299: LD_INT 0
75301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
75302: LD_ADDR_VAR 0 1
75306: PUSH
75307: LD_INT 22
75309: PUSH
75310: LD_OWVAR 2
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: PUSH
75319: LD_INT 30
75321: PUSH
75322: LD_INT 3
75324: PUSH
75325: EMPTY
75326: LIST
75327: LIST
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: PPUSH
75333: CALL_OW 69
75337: ST_TO_ADDR
// if not tmp then
75338: LD_VAR 0 1
75342: NOT
75343: IFFALSE 75347
// exit ;
75345: GO 75373
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75347: LD_VAR 0 1
75351: PUSH
75352: LD_INT 1
75354: PPUSH
75355: LD_VAR 0 1
75359: PPUSH
75360: CALL_OW 12
75364: ARRAY
75365: PPUSH
75366: LD_INT 1
75368: PPUSH
75369: CALL_OW 234
// end ;
75373: PPOPN 1
75375: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
75376: LD_EXP 63
75380: PUSH
75381: LD_EXP 111
75385: AND
75386: IFFALSE 75498
75388: GO 75390
75390: DISABLE
75391: LD_INT 0
75393: PPUSH
75394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
75395: LD_ADDR_VAR 0 2
75399: PUSH
75400: LD_INT 22
75402: PUSH
75403: LD_OWVAR 2
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: PUSH
75412: LD_INT 2
75414: PUSH
75415: LD_INT 30
75417: PUSH
75418: LD_INT 27
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: PUSH
75425: LD_INT 30
75427: PUSH
75428: LD_INT 26
75430: PUSH
75431: EMPTY
75432: LIST
75433: LIST
75434: PUSH
75435: LD_INT 30
75437: PUSH
75438: LD_INT 28
75440: PUSH
75441: EMPTY
75442: LIST
75443: LIST
75444: PUSH
75445: EMPTY
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: PUSH
75451: EMPTY
75452: LIST
75453: LIST
75454: PPUSH
75455: CALL_OW 69
75459: ST_TO_ADDR
// if not tmp then
75460: LD_VAR 0 2
75464: NOT
75465: IFFALSE 75469
// exit ;
75467: GO 75498
// for i in tmp do
75469: LD_ADDR_VAR 0 1
75473: PUSH
75474: LD_VAR 0 2
75478: PUSH
75479: FOR_IN
75480: IFFALSE 75496
// SetLives ( i , 1 ) ;
75482: LD_VAR 0 1
75486: PPUSH
75487: LD_INT 1
75489: PPUSH
75490: CALL_OW 234
75494: GO 75479
75496: POP
75497: POP
// end ;
75498: PPOPN 2
75500: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
75501: LD_EXP 63
75505: PUSH
75506: LD_EXP 112
75510: AND
75511: IFFALSE 75798
75513: GO 75515
75515: DISABLE
75516: LD_INT 0
75518: PPUSH
75519: PPUSH
75520: PPUSH
// begin i := rand ( 1 , 7 ) ;
75521: LD_ADDR_VAR 0 1
75525: PUSH
75526: LD_INT 1
75528: PPUSH
75529: LD_INT 7
75531: PPUSH
75532: CALL_OW 12
75536: ST_TO_ADDR
// case i of 1 :
75537: LD_VAR 0 1
75541: PUSH
75542: LD_INT 1
75544: DOUBLE
75545: EQUAL
75546: IFTRUE 75550
75548: GO 75560
75550: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
75551: LD_STRING earthquake(getX(game), 0, 32)
75553: PPUSH
75554: CALL_OW 559
75558: GO 75798
75560: LD_INT 2
75562: DOUBLE
75563: EQUAL
75564: IFTRUE 75568
75566: GO 75582
75568: POP
// begin ToLua ( displayStucuk(); ) ;
75569: LD_STRING displayStucuk();
75571: PPUSH
75572: CALL_OW 559
// ResetFog ;
75576: CALL_OW 335
// end ; 3 :
75580: GO 75798
75582: LD_INT 3
75584: DOUBLE
75585: EQUAL
75586: IFTRUE 75590
75588: GO 75694
75590: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75591: LD_ADDR_VAR 0 2
75595: PUSH
75596: LD_INT 22
75598: PUSH
75599: LD_OWVAR 2
75603: PUSH
75604: EMPTY
75605: LIST
75606: LIST
75607: PUSH
75608: LD_INT 25
75610: PUSH
75611: LD_INT 1
75613: PUSH
75614: EMPTY
75615: LIST
75616: LIST
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: PPUSH
75622: CALL_OW 69
75626: ST_TO_ADDR
// if not tmp then
75627: LD_VAR 0 2
75631: NOT
75632: IFFALSE 75636
// exit ;
75634: GO 75798
// un := tmp [ rand ( 1 , tmp ) ] ;
75636: LD_ADDR_VAR 0 3
75640: PUSH
75641: LD_VAR 0 2
75645: PUSH
75646: LD_INT 1
75648: PPUSH
75649: LD_VAR 0 2
75653: PPUSH
75654: CALL_OW 12
75658: ARRAY
75659: ST_TO_ADDR
// if Crawls ( un ) then
75660: LD_VAR 0 3
75664: PPUSH
75665: CALL_OW 318
75669: IFFALSE 75680
// ComWalk ( un ) ;
75671: LD_VAR 0 3
75675: PPUSH
75676: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75680: LD_VAR 0 3
75684: PPUSH
75685: LD_INT 8
75687: PPUSH
75688: CALL_OW 336
// end ; 4 :
75692: GO 75798
75694: LD_INT 4
75696: DOUBLE
75697: EQUAL
75698: IFTRUE 75702
75700: GO 75776
75702: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
75703: LD_ADDR_VAR 0 2
75707: PUSH
75708: LD_INT 22
75710: PUSH
75711: LD_OWVAR 2
75715: PUSH
75716: EMPTY
75717: LIST
75718: LIST
75719: PUSH
75720: LD_INT 30
75722: PUSH
75723: LD_INT 29
75725: PUSH
75726: EMPTY
75727: LIST
75728: LIST
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: PPUSH
75734: CALL_OW 69
75738: ST_TO_ADDR
// if not tmp then
75739: LD_VAR 0 2
75743: NOT
75744: IFFALSE 75748
// exit ;
75746: GO 75798
// CenterNowOnUnits ( tmp [ 1 ] ) ;
75748: LD_VAR 0 2
75752: PUSH
75753: LD_INT 1
75755: ARRAY
75756: PPUSH
75757: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
75761: LD_VAR 0 2
75765: PUSH
75766: LD_INT 1
75768: ARRAY
75769: PPUSH
75770: CALL_OW 65
// end ; 5 .. 7 :
75774: GO 75798
75776: LD_INT 5
75778: DOUBLE
75779: GREATEREQUAL
75780: IFFALSE 75788
75782: LD_INT 7
75784: DOUBLE
75785: LESSEQUAL
75786: IFTRUE 75790
75788: GO 75797
75790: POP
// StreamSibBomb ; end ;
75791: CALL 72035 0 0
75795: GO 75798
75797: POP
// end ;
75798: PPOPN 3
75800: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
75801: LD_EXP 63
75805: PUSH
75806: LD_EXP 113
75810: AND
75811: IFFALSE 75967
75813: GO 75815
75815: DISABLE
75816: LD_INT 0
75818: PPUSH
75819: PPUSH
75820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
75821: LD_ADDR_VAR 0 2
75825: PUSH
75826: LD_INT 81
75828: PUSH
75829: LD_OWVAR 2
75833: PUSH
75834: EMPTY
75835: LIST
75836: LIST
75837: PUSH
75838: LD_INT 2
75840: PUSH
75841: LD_INT 21
75843: PUSH
75844: LD_INT 1
75846: PUSH
75847: EMPTY
75848: LIST
75849: LIST
75850: PUSH
75851: LD_INT 21
75853: PUSH
75854: LD_INT 2
75856: PUSH
75857: EMPTY
75858: LIST
75859: LIST
75860: PUSH
75861: EMPTY
75862: LIST
75863: LIST
75864: LIST
75865: PUSH
75866: EMPTY
75867: LIST
75868: LIST
75869: PPUSH
75870: CALL_OW 69
75874: ST_TO_ADDR
// if not tmp then
75875: LD_VAR 0 2
75879: NOT
75880: IFFALSE 75884
// exit ;
75882: GO 75967
// p := 0 ;
75884: LD_ADDR_VAR 0 3
75888: PUSH
75889: LD_INT 0
75891: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75892: LD_INT 35
75894: PPUSH
75895: CALL_OW 67
// p := p + 1 ;
75899: LD_ADDR_VAR 0 3
75903: PUSH
75904: LD_VAR 0 3
75908: PUSH
75909: LD_INT 1
75911: PLUS
75912: ST_TO_ADDR
// for i in tmp do
75913: LD_ADDR_VAR 0 1
75917: PUSH
75918: LD_VAR 0 2
75922: PUSH
75923: FOR_IN
75924: IFFALSE 75955
// if GetLives ( i ) < 1000 then
75926: LD_VAR 0 1
75930: PPUSH
75931: CALL_OW 256
75935: PUSH
75936: LD_INT 1000
75938: LESS
75939: IFFALSE 75953
// SetLives ( i , 1000 ) ;
75941: LD_VAR 0 1
75945: PPUSH
75946: LD_INT 1000
75948: PPUSH
75949: CALL_OW 234
75953: GO 75923
75955: POP
75956: POP
// until p > 20 ;
75957: LD_VAR 0 3
75961: PUSH
75962: LD_INT 20
75964: GREATER
75965: IFFALSE 75892
// end ;
75967: PPOPN 3
75969: END
// every 0 0$1 trigger StreamModeActive and sTime do
75970: LD_EXP 63
75974: PUSH
75975: LD_EXP 114
75979: AND
75980: IFFALSE 76015
75982: GO 75984
75984: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
75985: LD_INT 28
75987: PPUSH
75988: LD_OWVAR 2
75992: PPUSH
75993: LD_INT 2
75995: PPUSH
75996: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
76000: LD_INT 30
76002: PPUSH
76003: LD_OWVAR 2
76007: PPUSH
76008: LD_INT 2
76010: PPUSH
76011: CALL_OW 322
// end ;
76015: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
76016: LD_EXP 63
76020: PUSH
76021: LD_EXP 115
76025: AND
76026: IFFALSE 76147
76028: GO 76030
76030: DISABLE
76031: LD_INT 0
76033: PPUSH
76034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76035: LD_ADDR_VAR 0 2
76039: PUSH
76040: LD_INT 22
76042: PUSH
76043: LD_OWVAR 2
76047: PUSH
76048: EMPTY
76049: LIST
76050: LIST
76051: PUSH
76052: LD_INT 21
76054: PUSH
76055: LD_INT 1
76057: PUSH
76058: EMPTY
76059: LIST
76060: LIST
76061: PUSH
76062: LD_INT 3
76064: PUSH
76065: LD_INT 23
76067: PUSH
76068: LD_INT 0
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: PUSH
76079: EMPTY
76080: LIST
76081: LIST
76082: LIST
76083: PPUSH
76084: CALL_OW 69
76088: ST_TO_ADDR
// if not tmp then
76089: LD_VAR 0 2
76093: NOT
76094: IFFALSE 76098
// exit ;
76096: GO 76147
// for i in tmp do
76098: LD_ADDR_VAR 0 1
76102: PUSH
76103: LD_VAR 0 2
76107: PUSH
76108: FOR_IN
76109: IFFALSE 76145
// begin if Crawls ( i ) then
76111: LD_VAR 0 1
76115: PPUSH
76116: CALL_OW 318
76120: IFFALSE 76131
// ComWalk ( i ) ;
76122: LD_VAR 0 1
76126: PPUSH
76127: CALL_OW 138
// SetClass ( i , 2 ) ;
76131: LD_VAR 0 1
76135: PPUSH
76136: LD_INT 2
76138: PPUSH
76139: CALL_OW 336
// end ;
76143: GO 76108
76145: POP
76146: POP
// end ;
76147: PPOPN 2
76149: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
76150: LD_EXP 63
76154: PUSH
76155: LD_EXP 116
76159: AND
76160: IFFALSE 76448
76162: GO 76164
76164: DISABLE
76165: LD_INT 0
76167: PPUSH
76168: PPUSH
76169: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
76170: LD_OWVAR 2
76174: PPUSH
76175: LD_INT 9
76177: PPUSH
76178: LD_INT 1
76180: PPUSH
76181: LD_INT 1
76183: PPUSH
76184: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
76188: LD_INT 9
76190: PPUSH
76191: LD_OWVAR 2
76195: PPUSH
76196: CALL_OW 343
// uc_side := 9 ;
76200: LD_ADDR_OWVAR 20
76204: PUSH
76205: LD_INT 9
76207: ST_TO_ADDR
// uc_nation := 2 ;
76208: LD_ADDR_OWVAR 21
76212: PUSH
76213: LD_INT 2
76215: ST_TO_ADDR
// hc_name := Dark Warrior ;
76216: LD_ADDR_OWVAR 26
76220: PUSH
76221: LD_STRING Dark Warrior
76223: ST_TO_ADDR
// hc_gallery :=  ;
76224: LD_ADDR_OWVAR 33
76228: PUSH
76229: LD_STRING 
76231: ST_TO_ADDR
// hc_noskilllimit := true ;
76232: LD_ADDR_OWVAR 76
76236: PUSH
76237: LD_INT 1
76239: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
76240: LD_ADDR_OWVAR 31
76244: PUSH
76245: LD_INT 30
76247: PUSH
76248: LD_INT 30
76250: PUSH
76251: LD_INT 30
76253: PUSH
76254: LD_INT 30
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: LIST
76261: LIST
76262: ST_TO_ADDR
// un := CreateHuman ;
76263: LD_ADDR_VAR 0 3
76267: PUSH
76268: CALL_OW 44
76272: ST_TO_ADDR
// hc_noskilllimit := false ;
76273: LD_ADDR_OWVAR 76
76277: PUSH
76278: LD_INT 0
76280: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76281: LD_VAR 0 3
76285: PPUSH
76286: LD_INT 1
76288: PPUSH
76289: CALL_OW 51
// ToLua ( playRanger() ) ;
76293: LD_STRING playRanger()
76295: PPUSH
76296: CALL_OW 559
// p := 0 ;
76300: LD_ADDR_VAR 0 2
76304: PUSH
76305: LD_INT 0
76307: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76308: LD_INT 35
76310: PPUSH
76311: CALL_OW 67
// p := p + 1 ;
76315: LD_ADDR_VAR 0 2
76319: PUSH
76320: LD_VAR 0 2
76324: PUSH
76325: LD_INT 1
76327: PLUS
76328: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
76329: LD_VAR 0 3
76333: PPUSH
76334: CALL_OW 256
76338: PUSH
76339: LD_INT 1000
76341: LESS
76342: IFFALSE 76356
// SetLives ( un , 1000 ) ;
76344: LD_VAR 0 3
76348: PPUSH
76349: LD_INT 1000
76351: PPUSH
76352: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
76356: LD_VAR 0 3
76360: PPUSH
76361: LD_INT 81
76363: PUSH
76364: LD_OWVAR 2
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PUSH
76373: LD_INT 91
76375: PUSH
76376: LD_VAR 0 3
76380: PUSH
76381: LD_INT 30
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: LIST
76388: PUSH
76389: EMPTY
76390: LIST
76391: LIST
76392: PPUSH
76393: CALL_OW 69
76397: PPUSH
76398: LD_VAR 0 3
76402: PPUSH
76403: CALL_OW 74
76407: PPUSH
76408: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
76412: LD_VAR 0 2
76416: PUSH
76417: LD_INT 80
76419: GREATER
76420: PUSH
76421: LD_VAR 0 3
76425: PPUSH
76426: CALL_OW 301
76430: OR
76431: IFFALSE 76308
// if un then
76433: LD_VAR 0 3
76437: IFFALSE 76448
// RemoveUnit ( un ) ;
76439: LD_VAR 0 3
76443: PPUSH
76444: CALL_OW 64
// end ;
76448: PPOPN 3
76450: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
76451: LD_EXP 117
76455: IFFALSE 76571
76457: GO 76459
76459: DISABLE
76460: LD_INT 0
76462: PPUSH
76463: PPUSH
76464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
76465: LD_ADDR_VAR 0 2
76469: PUSH
76470: LD_INT 81
76472: PUSH
76473: LD_OWVAR 2
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: PUSH
76482: LD_INT 21
76484: PUSH
76485: LD_INT 1
76487: PUSH
76488: EMPTY
76489: LIST
76490: LIST
76491: PUSH
76492: EMPTY
76493: LIST
76494: LIST
76495: PPUSH
76496: CALL_OW 69
76500: ST_TO_ADDR
// ToLua ( playComputer() ) ;
76501: LD_STRING playComputer()
76503: PPUSH
76504: CALL_OW 559
// if not tmp then
76508: LD_VAR 0 2
76512: NOT
76513: IFFALSE 76517
// exit ;
76515: GO 76571
// for i in tmp do
76517: LD_ADDR_VAR 0 1
76521: PUSH
76522: LD_VAR 0 2
76526: PUSH
76527: FOR_IN
76528: IFFALSE 76569
// for j := 1 to 4 do
76530: LD_ADDR_VAR 0 3
76534: PUSH
76535: DOUBLE
76536: LD_INT 1
76538: DEC
76539: ST_TO_ADDR
76540: LD_INT 4
76542: PUSH
76543: FOR_TO
76544: IFFALSE 76565
// SetSkill ( i , j , 10 ) ;
76546: LD_VAR 0 1
76550: PPUSH
76551: LD_VAR 0 3
76555: PPUSH
76556: LD_INT 10
76558: PPUSH
76559: CALL_OW 237
76563: GO 76543
76565: POP
76566: POP
76567: GO 76527
76569: POP
76570: POP
// end ;
76571: PPOPN 3
76573: END
// every 0 0$1 trigger s30 do var i , tmp ;
76574: LD_EXP 118
76578: IFFALSE 76647
76580: GO 76582
76582: DISABLE
76583: LD_INT 0
76585: PPUSH
76586: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76587: LD_ADDR_VAR 0 2
76591: PUSH
76592: LD_INT 22
76594: PUSH
76595: LD_OWVAR 2
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: PPUSH
76604: CALL_OW 69
76608: ST_TO_ADDR
// if not tmp then
76609: LD_VAR 0 2
76613: NOT
76614: IFFALSE 76618
// exit ;
76616: GO 76647
// for i in tmp do
76618: LD_ADDR_VAR 0 1
76622: PUSH
76623: LD_VAR 0 2
76627: PUSH
76628: FOR_IN
76629: IFFALSE 76645
// SetLives ( i , 300 ) ;
76631: LD_VAR 0 1
76635: PPUSH
76636: LD_INT 300
76638: PPUSH
76639: CALL_OW 234
76643: GO 76628
76645: POP
76646: POP
// end ;
76647: PPOPN 2
76649: END
// every 0 0$1 trigger s60 do var i , tmp ;
76650: LD_EXP 119
76654: IFFALSE 76723
76656: GO 76658
76658: DISABLE
76659: LD_INT 0
76661: PPUSH
76662: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76663: LD_ADDR_VAR 0 2
76667: PUSH
76668: LD_INT 22
76670: PUSH
76671: LD_OWVAR 2
76675: PUSH
76676: EMPTY
76677: LIST
76678: LIST
76679: PPUSH
76680: CALL_OW 69
76684: ST_TO_ADDR
// if not tmp then
76685: LD_VAR 0 2
76689: NOT
76690: IFFALSE 76694
// exit ;
76692: GO 76723
// for i in tmp do
76694: LD_ADDR_VAR 0 1
76698: PUSH
76699: LD_VAR 0 2
76703: PUSH
76704: FOR_IN
76705: IFFALSE 76721
// SetLives ( i , 600 ) ;
76707: LD_VAR 0 1
76711: PPUSH
76712: LD_INT 600
76714: PPUSH
76715: CALL_OW 234
76719: GO 76704
76721: POP
76722: POP
// end ;
76723: PPOPN 2
76725: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
76726: LD_INT 0
76728: PPUSH
// case cmd of 301 :
76729: LD_VAR 0 1
76733: PUSH
76734: LD_INT 301
76736: DOUBLE
76737: EQUAL
76738: IFTRUE 76742
76740: GO 76774
76742: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
76743: LD_VAR 0 6
76747: PPUSH
76748: LD_VAR 0 7
76752: PPUSH
76753: LD_VAR 0 8
76757: PPUSH
76758: LD_VAR 0 4
76762: PPUSH
76763: LD_VAR 0 5
76767: PPUSH
76768: CALL 77983 0 5
76772: GO 76895
76774: LD_INT 302
76776: DOUBLE
76777: EQUAL
76778: IFTRUE 76782
76780: GO 76819
76782: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
76783: LD_VAR 0 6
76787: PPUSH
76788: LD_VAR 0 7
76792: PPUSH
76793: LD_VAR 0 8
76797: PPUSH
76798: LD_VAR 0 9
76802: PPUSH
76803: LD_VAR 0 4
76807: PPUSH
76808: LD_VAR 0 5
76812: PPUSH
76813: CALL 78074 0 6
76817: GO 76895
76819: LD_INT 303
76821: DOUBLE
76822: EQUAL
76823: IFTRUE 76827
76825: GO 76864
76827: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
76828: LD_VAR 0 6
76832: PPUSH
76833: LD_VAR 0 7
76837: PPUSH
76838: LD_VAR 0 8
76842: PPUSH
76843: LD_VAR 0 9
76847: PPUSH
76848: LD_VAR 0 4
76852: PPUSH
76853: LD_VAR 0 5
76857: PPUSH
76858: CALL 76900 0 6
76862: GO 76895
76864: LD_INT 304
76866: DOUBLE
76867: EQUAL
76868: IFTRUE 76872
76870: GO 76894
76872: POP
// hHackTeleport ( unit , x , y ) ; end ;
76873: LD_VAR 0 2
76877: PPUSH
76878: LD_VAR 0 4
76882: PPUSH
76883: LD_VAR 0 5
76887: PPUSH
76888: CALL 78667 0 3
76892: GO 76895
76894: POP
// end ;
76895: LD_VAR 0 12
76899: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
76900: LD_INT 0
76902: PPUSH
76903: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
76904: LD_VAR 0 1
76908: PUSH
76909: LD_INT 1
76911: LESS
76912: PUSH
76913: LD_VAR 0 1
76917: PUSH
76918: LD_INT 3
76920: GREATER
76921: OR
76922: PUSH
76923: LD_VAR 0 5
76927: PPUSH
76928: LD_VAR 0 6
76932: PPUSH
76933: CALL_OW 428
76937: OR
76938: IFFALSE 76942
// exit ;
76940: GO 77670
// uc_side := your_side ;
76942: LD_ADDR_OWVAR 20
76946: PUSH
76947: LD_OWVAR 2
76951: ST_TO_ADDR
// uc_nation := nation ;
76952: LD_ADDR_OWVAR 21
76956: PUSH
76957: LD_VAR 0 1
76961: ST_TO_ADDR
// bc_level = 1 ;
76962: LD_ADDR_OWVAR 43
76966: PUSH
76967: LD_INT 1
76969: ST_TO_ADDR
// case btype of 1 :
76970: LD_VAR 0 2
76974: PUSH
76975: LD_INT 1
76977: DOUBLE
76978: EQUAL
76979: IFTRUE 76983
76981: GO 76994
76983: POP
// bc_type := b_depot ; 2 :
76984: LD_ADDR_OWVAR 42
76988: PUSH
76989: LD_INT 0
76991: ST_TO_ADDR
76992: GO 77614
76994: LD_INT 2
76996: DOUBLE
76997: EQUAL
76998: IFTRUE 77002
77000: GO 77013
77002: POP
// bc_type := b_warehouse ; 3 :
77003: LD_ADDR_OWVAR 42
77007: PUSH
77008: LD_INT 1
77010: ST_TO_ADDR
77011: GO 77614
77013: LD_INT 3
77015: DOUBLE
77016: EQUAL
77017: IFTRUE 77021
77019: GO 77032
77021: POP
// bc_type := b_lab ; 4 .. 9 :
77022: LD_ADDR_OWVAR 42
77026: PUSH
77027: LD_INT 6
77029: ST_TO_ADDR
77030: GO 77614
77032: LD_INT 4
77034: DOUBLE
77035: GREATEREQUAL
77036: IFFALSE 77044
77038: LD_INT 9
77040: DOUBLE
77041: LESSEQUAL
77042: IFTRUE 77046
77044: GO 77106
77046: POP
// begin bc_type := b_lab_half ;
77047: LD_ADDR_OWVAR 42
77051: PUSH
77052: LD_INT 7
77054: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
77055: LD_ADDR_OWVAR 44
77059: PUSH
77060: LD_INT 10
77062: PUSH
77063: LD_INT 11
77065: PUSH
77066: LD_INT 12
77068: PUSH
77069: LD_INT 15
77071: PUSH
77072: LD_INT 14
77074: PUSH
77075: LD_INT 13
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: LIST
77082: LIST
77083: LIST
77084: LIST
77085: PUSH
77086: LD_VAR 0 2
77090: PUSH
77091: LD_INT 3
77093: MINUS
77094: ARRAY
77095: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
77096: LD_ADDR_OWVAR 45
77100: PUSH
77101: LD_INT 9
77103: ST_TO_ADDR
// end ; 10 .. 13 :
77104: GO 77614
77106: LD_INT 10
77108: DOUBLE
77109: GREATEREQUAL
77110: IFFALSE 77118
77112: LD_INT 13
77114: DOUBLE
77115: LESSEQUAL
77116: IFTRUE 77120
77118: GO 77197
77120: POP
// begin bc_type := b_lab_full ;
77121: LD_ADDR_OWVAR 42
77125: PUSH
77126: LD_INT 8
77128: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
77129: LD_ADDR_OWVAR 44
77133: PUSH
77134: LD_INT 10
77136: PUSH
77137: LD_INT 12
77139: PUSH
77140: LD_INT 14
77142: PUSH
77143: LD_INT 13
77145: PUSH
77146: EMPTY
77147: LIST
77148: LIST
77149: LIST
77150: LIST
77151: PUSH
77152: LD_VAR 0 2
77156: PUSH
77157: LD_INT 9
77159: MINUS
77160: ARRAY
77161: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
77162: LD_ADDR_OWVAR 45
77166: PUSH
77167: LD_INT 11
77169: PUSH
77170: LD_INT 15
77172: PUSH
77173: LD_INT 12
77175: PUSH
77176: LD_INT 15
77178: PUSH
77179: EMPTY
77180: LIST
77181: LIST
77182: LIST
77183: LIST
77184: PUSH
77185: LD_VAR 0 2
77189: PUSH
77190: LD_INT 9
77192: MINUS
77193: ARRAY
77194: ST_TO_ADDR
// end ; 14 :
77195: GO 77614
77197: LD_INT 14
77199: DOUBLE
77200: EQUAL
77201: IFTRUE 77205
77203: GO 77216
77205: POP
// bc_type := b_workshop ; 15 :
77206: LD_ADDR_OWVAR 42
77210: PUSH
77211: LD_INT 2
77213: ST_TO_ADDR
77214: GO 77614
77216: LD_INT 15
77218: DOUBLE
77219: EQUAL
77220: IFTRUE 77224
77222: GO 77235
77224: POP
// bc_type := b_factory ; 16 :
77225: LD_ADDR_OWVAR 42
77229: PUSH
77230: LD_INT 3
77232: ST_TO_ADDR
77233: GO 77614
77235: LD_INT 16
77237: DOUBLE
77238: EQUAL
77239: IFTRUE 77243
77241: GO 77254
77243: POP
// bc_type := b_ext_gun ; 17 :
77244: LD_ADDR_OWVAR 42
77248: PUSH
77249: LD_INT 17
77251: ST_TO_ADDR
77252: GO 77614
77254: LD_INT 17
77256: DOUBLE
77257: EQUAL
77258: IFTRUE 77262
77260: GO 77290
77262: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
77263: LD_ADDR_OWVAR 42
77267: PUSH
77268: LD_INT 19
77270: PUSH
77271: LD_INT 23
77273: PUSH
77274: LD_INT 19
77276: PUSH
77277: EMPTY
77278: LIST
77279: LIST
77280: LIST
77281: PUSH
77282: LD_VAR 0 1
77286: ARRAY
77287: ST_TO_ADDR
77288: GO 77614
77290: LD_INT 18
77292: DOUBLE
77293: EQUAL
77294: IFTRUE 77298
77296: GO 77309
77298: POP
// bc_type := b_ext_radar ; 19 :
77299: LD_ADDR_OWVAR 42
77303: PUSH
77304: LD_INT 20
77306: ST_TO_ADDR
77307: GO 77614
77309: LD_INT 19
77311: DOUBLE
77312: EQUAL
77313: IFTRUE 77317
77315: GO 77328
77317: POP
// bc_type := b_ext_radio ; 20 :
77318: LD_ADDR_OWVAR 42
77322: PUSH
77323: LD_INT 22
77325: ST_TO_ADDR
77326: GO 77614
77328: LD_INT 20
77330: DOUBLE
77331: EQUAL
77332: IFTRUE 77336
77334: GO 77347
77336: POP
// bc_type := b_ext_siberium ; 21 :
77337: LD_ADDR_OWVAR 42
77341: PUSH
77342: LD_INT 21
77344: ST_TO_ADDR
77345: GO 77614
77347: LD_INT 21
77349: DOUBLE
77350: EQUAL
77351: IFTRUE 77355
77353: GO 77366
77355: POP
// bc_type := b_ext_computer ; 22 :
77356: LD_ADDR_OWVAR 42
77360: PUSH
77361: LD_INT 24
77363: ST_TO_ADDR
77364: GO 77614
77366: LD_INT 22
77368: DOUBLE
77369: EQUAL
77370: IFTRUE 77374
77372: GO 77385
77374: POP
// bc_type := b_ext_track ; 23 :
77375: LD_ADDR_OWVAR 42
77379: PUSH
77380: LD_INT 16
77382: ST_TO_ADDR
77383: GO 77614
77385: LD_INT 23
77387: DOUBLE
77388: EQUAL
77389: IFTRUE 77393
77391: GO 77404
77393: POP
// bc_type := b_ext_laser ; 24 :
77394: LD_ADDR_OWVAR 42
77398: PUSH
77399: LD_INT 25
77401: ST_TO_ADDR
77402: GO 77614
77404: LD_INT 24
77406: DOUBLE
77407: EQUAL
77408: IFTRUE 77412
77410: GO 77423
77412: POP
// bc_type := b_control_tower ; 25 :
77413: LD_ADDR_OWVAR 42
77417: PUSH
77418: LD_INT 36
77420: ST_TO_ADDR
77421: GO 77614
77423: LD_INT 25
77425: DOUBLE
77426: EQUAL
77427: IFTRUE 77431
77429: GO 77442
77431: POP
// bc_type := b_breastwork ; 26 :
77432: LD_ADDR_OWVAR 42
77436: PUSH
77437: LD_INT 31
77439: ST_TO_ADDR
77440: GO 77614
77442: LD_INT 26
77444: DOUBLE
77445: EQUAL
77446: IFTRUE 77450
77448: GO 77461
77450: POP
// bc_type := b_bunker ; 27 :
77451: LD_ADDR_OWVAR 42
77455: PUSH
77456: LD_INT 32
77458: ST_TO_ADDR
77459: GO 77614
77461: LD_INT 27
77463: DOUBLE
77464: EQUAL
77465: IFTRUE 77469
77467: GO 77480
77469: POP
// bc_type := b_turret ; 28 :
77470: LD_ADDR_OWVAR 42
77474: PUSH
77475: LD_INT 33
77477: ST_TO_ADDR
77478: GO 77614
77480: LD_INT 28
77482: DOUBLE
77483: EQUAL
77484: IFTRUE 77488
77486: GO 77499
77488: POP
// bc_type := b_armoury ; 29 :
77489: LD_ADDR_OWVAR 42
77493: PUSH
77494: LD_INT 4
77496: ST_TO_ADDR
77497: GO 77614
77499: LD_INT 29
77501: DOUBLE
77502: EQUAL
77503: IFTRUE 77507
77505: GO 77518
77507: POP
// bc_type := b_barracks ; 30 :
77508: LD_ADDR_OWVAR 42
77512: PUSH
77513: LD_INT 5
77515: ST_TO_ADDR
77516: GO 77614
77518: LD_INT 30
77520: DOUBLE
77521: EQUAL
77522: IFTRUE 77526
77524: GO 77537
77526: POP
// bc_type := b_solar_power ; 31 :
77527: LD_ADDR_OWVAR 42
77531: PUSH
77532: LD_INT 27
77534: ST_TO_ADDR
77535: GO 77614
77537: LD_INT 31
77539: DOUBLE
77540: EQUAL
77541: IFTRUE 77545
77543: GO 77556
77545: POP
// bc_type := b_oil_power ; 32 :
77546: LD_ADDR_OWVAR 42
77550: PUSH
77551: LD_INT 26
77553: ST_TO_ADDR
77554: GO 77614
77556: LD_INT 32
77558: DOUBLE
77559: EQUAL
77560: IFTRUE 77564
77562: GO 77575
77564: POP
// bc_type := b_siberite_power ; 33 :
77565: LD_ADDR_OWVAR 42
77569: PUSH
77570: LD_INT 28
77572: ST_TO_ADDR
77573: GO 77614
77575: LD_INT 33
77577: DOUBLE
77578: EQUAL
77579: IFTRUE 77583
77581: GO 77594
77583: POP
// bc_type := b_oil_mine ; 34 :
77584: LD_ADDR_OWVAR 42
77588: PUSH
77589: LD_INT 29
77591: ST_TO_ADDR
77592: GO 77614
77594: LD_INT 34
77596: DOUBLE
77597: EQUAL
77598: IFTRUE 77602
77600: GO 77613
77602: POP
// bc_type := b_siberite_mine ; end ;
77603: LD_ADDR_OWVAR 42
77607: PUSH
77608: LD_INT 30
77610: ST_TO_ADDR
77611: GO 77614
77613: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
77614: LD_ADDR_VAR 0 8
77618: PUSH
77619: LD_VAR 0 5
77623: PPUSH
77624: LD_VAR 0 6
77628: PPUSH
77629: LD_VAR 0 3
77633: PPUSH
77634: CALL_OW 47
77638: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
77639: LD_OWVAR 42
77643: PUSH
77644: LD_INT 32
77646: PUSH
77647: LD_INT 33
77649: PUSH
77650: EMPTY
77651: LIST
77652: LIST
77653: IN
77654: IFFALSE 77670
// PlaceWeaponTurret ( b , weapon ) ;
77656: LD_VAR 0 8
77660: PPUSH
77661: LD_VAR 0 4
77665: PPUSH
77666: CALL_OW 431
// end ;
77670: LD_VAR 0 7
77674: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
77675: LD_INT 0
77677: PPUSH
77678: PPUSH
77679: PPUSH
77680: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77681: LD_ADDR_VAR 0 4
77685: PUSH
77686: LD_INT 22
77688: PUSH
77689: LD_OWVAR 2
77693: PUSH
77694: EMPTY
77695: LIST
77696: LIST
77697: PUSH
77698: LD_INT 2
77700: PUSH
77701: LD_INT 30
77703: PUSH
77704: LD_INT 0
77706: PUSH
77707: EMPTY
77708: LIST
77709: LIST
77710: PUSH
77711: LD_INT 30
77713: PUSH
77714: LD_INT 1
77716: PUSH
77717: EMPTY
77718: LIST
77719: LIST
77720: PUSH
77721: EMPTY
77722: LIST
77723: LIST
77724: LIST
77725: PUSH
77726: EMPTY
77727: LIST
77728: LIST
77729: PPUSH
77730: CALL_OW 69
77734: ST_TO_ADDR
// if not tmp then
77735: LD_VAR 0 4
77739: NOT
77740: IFFALSE 77744
// exit ;
77742: GO 77803
// for i in tmp do
77744: LD_ADDR_VAR 0 2
77748: PUSH
77749: LD_VAR 0 4
77753: PUSH
77754: FOR_IN
77755: IFFALSE 77801
// for j = 1 to 3 do
77757: LD_ADDR_VAR 0 3
77761: PUSH
77762: DOUBLE
77763: LD_INT 1
77765: DEC
77766: ST_TO_ADDR
77767: LD_INT 3
77769: PUSH
77770: FOR_TO
77771: IFFALSE 77797
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
77773: LD_VAR 0 2
77777: PPUSH
77778: CALL_OW 274
77782: PPUSH
77783: LD_VAR 0 3
77787: PPUSH
77788: LD_INT 99999
77790: PPUSH
77791: CALL_OW 277
77795: GO 77770
77797: POP
77798: POP
77799: GO 77754
77801: POP
77802: POP
// end ;
77803: LD_VAR 0 1
77807: RET
// export function hHackSetLevel10 ; var i , j ; begin
77808: LD_INT 0
77810: PPUSH
77811: PPUSH
77812: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77813: LD_ADDR_VAR 0 2
77817: PUSH
77818: LD_INT 21
77820: PUSH
77821: LD_INT 1
77823: PUSH
77824: EMPTY
77825: LIST
77826: LIST
77827: PPUSH
77828: CALL_OW 69
77832: PUSH
77833: FOR_IN
77834: IFFALSE 77886
// if IsSelected ( i ) then
77836: LD_VAR 0 2
77840: PPUSH
77841: CALL_OW 306
77845: IFFALSE 77884
// begin for j := 1 to 4 do
77847: LD_ADDR_VAR 0 3
77851: PUSH
77852: DOUBLE
77853: LD_INT 1
77855: DEC
77856: ST_TO_ADDR
77857: LD_INT 4
77859: PUSH
77860: FOR_TO
77861: IFFALSE 77882
// SetSkill ( i , j , 10 ) ;
77863: LD_VAR 0 2
77867: PPUSH
77868: LD_VAR 0 3
77872: PPUSH
77873: LD_INT 10
77875: PPUSH
77876: CALL_OW 237
77880: GO 77860
77882: POP
77883: POP
// end ;
77884: GO 77833
77886: POP
77887: POP
// end ;
77888: LD_VAR 0 1
77892: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
77893: LD_INT 0
77895: PPUSH
77896: PPUSH
77897: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
77898: LD_ADDR_VAR 0 2
77902: PUSH
77903: LD_INT 22
77905: PUSH
77906: LD_OWVAR 2
77910: PUSH
77911: EMPTY
77912: LIST
77913: LIST
77914: PUSH
77915: LD_INT 21
77917: PUSH
77918: LD_INT 1
77920: PUSH
77921: EMPTY
77922: LIST
77923: LIST
77924: PUSH
77925: EMPTY
77926: LIST
77927: LIST
77928: PPUSH
77929: CALL_OW 69
77933: PUSH
77934: FOR_IN
77935: IFFALSE 77976
// begin for j := 1 to 4 do
77937: LD_ADDR_VAR 0 3
77941: PUSH
77942: DOUBLE
77943: LD_INT 1
77945: DEC
77946: ST_TO_ADDR
77947: LD_INT 4
77949: PUSH
77950: FOR_TO
77951: IFFALSE 77972
// SetSkill ( i , j , 10 ) ;
77953: LD_VAR 0 2
77957: PPUSH
77958: LD_VAR 0 3
77962: PPUSH
77963: LD_INT 10
77965: PPUSH
77966: CALL_OW 237
77970: GO 77950
77972: POP
77973: POP
// end ;
77974: GO 77934
77976: POP
77977: POP
// end ;
77978: LD_VAR 0 1
77982: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
77983: LD_INT 0
77985: PPUSH
// uc_side := your_side ;
77986: LD_ADDR_OWVAR 20
77990: PUSH
77991: LD_OWVAR 2
77995: ST_TO_ADDR
// uc_nation := nation ;
77996: LD_ADDR_OWVAR 21
78000: PUSH
78001: LD_VAR 0 1
78005: ST_TO_ADDR
// InitHc ;
78006: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
78010: LD_INT 0
78012: PPUSH
78013: LD_VAR 0 2
78017: PPUSH
78018: LD_VAR 0 3
78022: PPUSH
78023: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
78027: LD_VAR 0 4
78031: PPUSH
78032: LD_VAR 0 5
78036: PPUSH
78037: CALL_OW 428
78041: PUSH
78042: LD_INT 0
78044: EQUAL
78045: IFFALSE 78069
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
78047: CALL_OW 44
78051: PPUSH
78052: LD_VAR 0 4
78056: PPUSH
78057: LD_VAR 0 5
78061: PPUSH
78062: LD_INT 1
78064: PPUSH
78065: CALL_OW 48
// end ;
78069: LD_VAR 0 6
78073: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
78074: LD_INT 0
78076: PPUSH
78077: PPUSH
// uc_side := your_side ;
78078: LD_ADDR_OWVAR 20
78082: PUSH
78083: LD_OWVAR 2
78087: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
78088: LD_VAR 0 1
78092: PUSH
78093: LD_INT 1
78095: PUSH
78096: LD_INT 2
78098: PUSH
78099: LD_INT 3
78101: PUSH
78102: LD_INT 4
78104: PUSH
78105: LD_INT 5
78107: PUSH
78108: EMPTY
78109: LIST
78110: LIST
78111: LIST
78112: LIST
78113: LIST
78114: IN
78115: IFFALSE 78127
// uc_nation := nation_american else
78117: LD_ADDR_OWVAR 21
78121: PUSH
78122: LD_INT 1
78124: ST_TO_ADDR
78125: GO 78170
// if chassis in [ 11 , 12 , 13 , 14 ] then
78127: LD_VAR 0 1
78131: PUSH
78132: LD_INT 11
78134: PUSH
78135: LD_INT 12
78137: PUSH
78138: LD_INT 13
78140: PUSH
78141: LD_INT 14
78143: PUSH
78144: EMPTY
78145: LIST
78146: LIST
78147: LIST
78148: LIST
78149: IN
78150: IFFALSE 78162
// uc_nation := nation_arabian else
78152: LD_ADDR_OWVAR 21
78156: PUSH
78157: LD_INT 2
78159: ST_TO_ADDR
78160: GO 78170
// uc_nation := nation_russian ;
78162: LD_ADDR_OWVAR 21
78166: PUSH
78167: LD_INT 3
78169: ST_TO_ADDR
// vc_chassis := chassis ;
78170: LD_ADDR_OWVAR 37
78174: PUSH
78175: LD_VAR 0 1
78179: ST_TO_ADDR
// vc_engine := engine ;
78180: LD_ADDR_OWVAR 39
78184: PUSH
78185: LD_VAR 0 2
78189: ST_TO_ADDR
// vc_control := control ;
78190: LD_ADDR_OWVAR 38
78194: PUSH
78195: LD_VAR 0 3
78199: ST_TO_ADDR
// vc_weapon := weapon ;
78200: LD_ADDR_OWVAR 40
78204: PUSH
78205: LD_VAR 0 4
78209: ST_TO_ADDR
// un := CreateVehicle ;
78210: LD_ADDR_VAR 0 8
78214: PUSH
78215: CALL_OW 45
78219: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
78220: LD_VAR 0 8
78224: PPUSH
78225: LD_INT 0
78227: PPUSH
78228: LD_INT 5
78230: PPUSH
78231: CALL_OW 12
78235: PPUSH
78236: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
78240: LD_VAR 0 8
78244: PPUSH
78245: LD_VAR 0 5
78249: PPUSH
78250: LD_VAR 0 6
78254: PPUSH
78255: LD_INT 1
78257: PPUSH
78258: CALL_OW 48
// end ;
78262: LD_VAR 0 7
78266: RET
// export hInvincible ; every 1 do
78267: GO 78269
78269: DISABLE
// hInvincible := [ ] ;
78270: LD_ADDR_EXP 120
78274: PUSH
78275: EMPTY
78276: ST_TO_ADDR
78277: END
// every 10 do var i ;
78278: GO 78280
78280: DISABLE
78281: LD_INT 0
78283: PPUSH
// begin enable ;
78284: ENABLE
// if not hInvincible then
78285: LD_EXP 120
78289: NOT
78290: IFFALSE 78294
// exit ;
78292: GO 78338
// for i in hInvincible do
78294: LD_ADDR_VAR 0 1
78298: PUSH
78299: LD_EXP 120
78303: PUSH
78304: FOR_IN
78305: IFFALSE 78336
// if GetLives ( i ) < 1000 then
78307: LD_VAR 0 1
78311: PPUSH
78312: CALL_OW 256
78316: PUSH
78317: LD_INT 1000
78319: LESS
78320: IFFALSE 78334
// SetLives ( i , 1000 ) ;
78322: LD_VAR 0 1
78326: PPUSH
78327: LD_INT 1000
78329: PPUSH
78330: CALL_OW 234
78334: GO 78304
78336: POP
78337: POP
// end ;
78338: PPOPN 1
78340: END
// export function hHackInvincible ; var i ; begin
78341: LD_INT 0
78343: PPUSH
78344: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
78345: LD_ADDR_VAR 0 2
78349: PUSH
78350: LD_INT 2
78352: PUSH
78353: LD_INT 21
78355: PUSH
78356: LD_INT 1
78358: PUSH
78359: EMPTY
78360: LIST
78361: LIST
78362: PUSH
78363: LD_INT 21
78365: PUSH
78366: LD_INT 2
78368: PUSH
78369: EMPTY
78370: LIST
78371: LIST
78372: PUSH
78373: EMPTY
78374: LIST
78375: LIST
78376: LIST
78377: PPUSH
78378: CALL_OW 69
78382: PUSH
78383: FOR_IN
78384: IFFALSE 78445
// if IsSelected ( i ) then
78386: LD_VAR 0 2
78390: PPUSH
78391: CALL_OW 306
78395: IFFALSE 78443
// begin if i in hInvincible then
78397: LD_VAR 0 2
78401: PUSH
78402: LD_EXP 120
78406: IN
78407: IFFALSE 78427
// hInvincible := hInvincible diff i else
78409: LD_ADDR_EXP 120
78413: PUSH
78414: LD_EXP 120
78418: PUSH
78419: LD_VAR 0 2
78423: DIFF
78424: ST_TO_ADDR
78425: GO 78443
// hInvincible := hInvincible union i ;
78427: LD_ADDR_EXP 120
78431: PUSH
78432: LD_EXP 120
78436: PUSH
78437: LD_VAR 0 2
78441: UNION
78442: ST_TO_ADDR
// end ;
78443: GO 78383
78445: POP
78446: POP
// end ;
78447: LD_VAR 0 1
78451: RET
// export function hHackInvisible ; var i , j ; begin
78452: LD_INT 0
78454: PPUSH
78455: PPUSH
78456: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
78457: LD_ADDR_VAR 0 2
78461: PUSH
78462: LD_INT 21
78464: PUSH
78465: LD_INT 1
78467: PUSH
78468: EMPTY
78469: LIST
78470: LIST
78471: PPUSH
78472: CALL_OW 69
78476: PUSH
78477: FOR_IN
78478: IFFALSE 78502
// if IsSelected ( i ) then
78480: LD_VAR 0 2
78484: PPUSH
78485: CALL_OW 306
78489: IFFALSE 78500
// ComForceInvisible ( i ) ;
78491: LD_VAR 0 2
78495: PPUSH
78496: CALL_OW 496
78500: GO 78477
78502: POP
78503: POP
// end ;
78504: LD_VAR 0 1
78508: RET
// export function hHackChangeYourSide ; begin
78509: LD_INT 0
78511: PPUSH
// if your_side = 8 then
78512: LD_OWVAR 2
78516: PUSH
78517: LD_INT 8
78519: EQUAL
78520: IFFALSE 78532
// your_side := 0 else
78522: LD_ADDR_OWVAR 2
78526: PUSH
78527: LD_INT 0
78529: ST_TO_ADDR
78530: GO 78546
// your_side := your_side + 1 ;
78532: LD_ADDR_OWVAR 2
78536: PUSH
78537: LD_OWVAR 2
78541: PUSH
78542: LD_INT 1
78544: PLUS
78545: ST_TO_ADDR
// end ;
78546: LD_VAR 0 1
78550: RET
// export function hHackChangeUnitSide ; var i , j ; begin
78551: LD_INT 0
78553: PPUSH
78554: PPUSH
78555: PPUSH
// for i in all_units do
78556: LD_ADDR_VAR 0 2
78560: PUSH
78561: LD_OWVAR 3
78565: PUSH
78566: FOR_IN
78567: IFFALSE 78645
// if IsSelected ( i ) then
78569: LD_VAR 0 2
78573: PPUSH
78574: CALL_OW 306
78578: IFFALSE 78643
// begin j := GetSide ( i ) ;
78580: LD_ADDR_VAR 0 3
78584: PUSH
78585: LD_VAR 0 2
78589: PPUSH
78590: CALL_OW 255
78594: ST_TO_ADDR
// if j = 8 then
78595: LD_VAR 0 3
78599: PUSH
78600: LD_INT 8
78602: EQUAL
78603: IFFALSE 78615
// j := 0 else
78605: LD_ADDR_VAR 0 3
78609: PUSH
78610: LD_INT 0
78612: ST_TO_ADDR
78613: GO 78629
// j := j + 1 ;
78615: LD_ADDR_VAR 0 3
78619: PUSH
78620: LD_VAR 0 3
78624: PUSH
78625: LD_INT 1
78627: PLUS
78628: ST_TO_ADDR
// SetSide ( i , j ) ;
78629: LD_VAR 0 2
78633: PPUSH
78634: LD_VAR 0 3
78638: PPUSH
78639: CALL_OW 235
// end ;
78643: GO 78566
78645: POP
78646: POP
// end ;
78647: LD_VAR 0 1
78651: RET
// export function hHackFog ; begin
78652: LD_INT 0
78654: PPUSH
// FogOff ( true ) ;
78655: LD_INT 1
78657: PPUSH
78658: CALL_OW 344
// end ;
78662: LD_VAR 0 1
78666: RET
// export function hHackTeleport ( unit , x , y ) ; begin
78667: LD_INT 0
78669: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
78670: LD_VAR 0 1
78674: PPUSH
78675: LD_VAR 0 2
78679: PPUSH
78680: LD_VAR 0 3
78684: PPUSH
78685: LD_INT 1
78687: PPUSH
78688: LD_INT 1
78690: PPUSH
78691: CALL_OW 483
// CenterOnXY ( x , y ) ;
78695: LD_VAR 0 2
78699: PPUSH
78700: LD_VAR 0 3
78704: PPUSH
78705: CALL_OW 84
// end ;
78709: LD_VAR 0 4
78713: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
78714: LD_INT 0
78716: PPUSH
78717: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
78718: LD_VAR 0 1
78722: NOT
78723: PUSH
78724: LD_VAR 0 2
78728: PPUSH
78729: LD_VAR 0 3
78733: PPUSH
78734: CALL_OW 488
78738: NOT
78739: OR
78740: PUSH
78741: LD_VAR 0 1
78745: PPUSH
78746: CALL_OW 266
78750: PUSH
78751: LD_INT 3
78753: NONEQUAL
78754: PUSH
78755: LD_VAR 0 1
78759: PPUSH
78760: CALL_OW 247
78764: PUSH
78765: LD_INT 1
78767: EQUAL
78768: NOT
78769: AND
78770: OR
78771: IFFALSE 78775
// exit ;
78773: GO 78924
// if GetType ( factory ) = unit_human then
78775: LD_VAR 0 1
78779: PPUSH
78780: CALL_OW 247
78784: PUSH
78785: LD_INT 1
78787: EQUAL
78788: IFFALSE 78805
// factory := IsInUnit ( factory ) ;
78790: LD_ADDR_VAR 0 1
78794: PUSH
78795: LD_VAR 0 1
78799: PPUSH
78800: CALL_OW 310
78804: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
78805: LD_VAR 0 1
78809: PPUSH
78810: CALL_OW 266
78814: PUSH
78815: LD_INT 3
78817: NONEQUAL
78818: IFFALSE 78822
// exit ;
78820: GO 78924
// if HexInfo ( x , y ) = factory then
78822: LD_VAR 0 2
78826: PPUSH
78827: LD_VAR 0 3
78831: PPUSH
78832: CALL_OW 428
78836: PUSH
78837: LD_VAR 0 1
78841: EQUAL
78842: IFFALSE 78869
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
78844: LD_ADDR_EXP 121
78848: PUSH
78849: LD_EXP 121
78853: PPUSH
78854: LD_VAR 0 1
78858: PPUSH
78859: LD_INT 0
78861: PPUSH
78862: CALL_OW 1
78866: ST_TO_ADDR
78867: GO 78920
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
78869: LD_ADDR_EXP 121
78873: PUSH
78874: LD_EXP 121
78878: PPUSH
78879: LD_VAR 0 1
78883: PPUSH
78884: LD_VAR 0 1
78888: PPUSH
78889: CALL_OW 255
78893: PUSH
78894: LD_VAR 0 1
78898: PUSH
78899: LD_VAR 0 2
78903: PUSH
78904: LD_VAR 0 3
78908: PUSH
78909: EMPTY
78910: LIST
78911: LIST
78912: LIST
78913: LIST
78914: PPUSH
78915: CALL_OW 1
78919: ST_TO_ADDR
// UpdateFactoryWaypoints ;
78920: CALL 78929 0 0
// end ;
78924: LD_VAR 0 4
78928: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
78929: LD_INT 0
78931: PPUSH
78932: PPUSH
78933: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
78934: LD_STRING resetFactoryWaypoint();
78936: PPUSH
78937: CALL_OW 559
// if factoryWaypoints then
78941: LD_EXP 121
78945: IFFALSE 79071
// begin list := PrepareArray ( factoryWaypoints ) ;
78947: LD_ADDR_VAR 0 3
78951: PUSH
78952: LD_EXP 121
78956: PPUSH
78957: CALL 57989 0 1
78961: ST_TO_ADDR
// for i := 1 to list do
78962: LD_ADDR_VAR 0 2
78966: PUSH
78967: DOUBLE
78968: LD_INT 1
78970: DEC
78971: ST_TO_ADDR
78972: LD_VAR 0 3
78976: PUSH
78977: FOR_TO
78978: IFFALSE 79069
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
78980: LD_STRING setFactoryWaypointXY(
78982: PUSH
78983: LD_VAR 0 3
78987: PUSH
78988: LD_VAR 0 2
78992: ARRAY
78993: PUSH
78994: LD_INT 1
78996: ARRAY
78997: STR
78998: PUSH
78999: LD_STRING ,
79001: STR
79002: PUSH
79003: LD_VAR 0 3
79007: PUSH
79008: LD_VAR 0 2
79012: ARRAY
79013: PUSH
79014: LD_INT 2
79016: ARRAY
79017: STR
79018: PUSH
79019: LD_STRING ,
79021: STR
79022: PUSH
79023: LD_VAR 0 3
79027: PUSH
79028: LD_VAR 0 2
79032: ARRAY
79033: PUSH
79034: LD_INT 3
79036: ARRAY
79037: STR
79038: PUSH
79039: LD_STRING ,
79041: STR
79042: PUSH
79043: LD_VAR 0 3
79047: PUSH
79048: LD_VAR 0 2
79052: ARRAY
79053: PUSH
79054: LD_INT 4
79056: ARRAY
79057: STR
79058: PUSH
79059: LD_STRING )
79061: STR
79062: PPUSH
79063: CALL_OW 559
79067: GO 78977
79069: POP
79070: POP
// end ; end ;
79071: LD_VAR 0 1
79075: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
79076: LD_INT 0
79078: PPUSH
// if HexInfo ( x , y ) = warehouse then
79079: LD_VAR 0 2
79083: PPUSH
79084: LD_VAR 0 3
79088: PPUSH
79089: CALL_OW 428
79093: PUSH
79094: LD_VAR 0 1
79098: EQUAL
79099: IFFALSE 79126
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
79101: LD_ADDR_EXP 122
79105: PUSH
79106: LD_EXP 122
79110: PPUSH
79111: LD_VAR 0 1
79115: PPUSH
79116: LD_INT 0
79118: PPUSH
79119: CALL_OW 1
79123: ST_TO_ADDR
79124: GO 79177
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
79126: LD_ADDR_EXP 122
79130: PUSH
79131: LD_EXP 122
79135: PPUSH
79136: LD_VAR 0 1
79140: PPUSH
79141: LD_VAR 0 1
79145: PPUSH
79146: CALL_OW 255
79150: PUSH
79151: LD_VAR 0 1
79155: PUSH
79156: LD_VAR 0 2
79160: PUSH
79161: LD_VAR 0 3
79165: PUSH
79166: EMPTY
79167: LIST
79168: LIST
79169: LIST
79170: LIST
79171: PPUSH
79172: CALL_OW 1
79176: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
79177: CALL 79186 0 0
// end ;
79181: LD_VAR 0 4
79185: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
79186: LD_INT 0
79188: PPUSH
79189: PPUSH
79190: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
79191: LD_STRING resetWarehouseGatheringPoints();
79193: PPUSH
79194: CALL_OW 559
// if warehouseGatheringPoints then
79198: LD_EXP 122
79202: IFFALSE 79328
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
79204: LD_ADDR_VAR 0 3
79208: PUSH
79209: LD_EXP 122
79213: PPUSH
79214: CALL 57989 0 1
79218: ST_TO_ADDR
// for i := 1 to list do
79219: LD_ADDR_VAR 0 2
79223: PUSH
79224: DOUBLE
79225: LD_INT 1
79227: DEC
79228: ST_TO_ADDR
79229: LD_VAR 0 3
79233: PUSH
79234: FOR_TO
79235: IFFALSE 79326
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
79237: LD_STRING setWarehouseGatheringPointXY(
79239: PUSH
79240: LD_VAR 0 3
79244: PUSH
79245: LD_VAR 0 2
79249: ARRAY
79250: PUSH
79251: LD_INT 1
79253: ARRAY
79254: STR
79255: PUSH
79256: LD_STRING ,
79258: STR
79259: PUSH
79260: LD_VAR 0 3
79264: PUSH
79265: LD_VAR 0 2
79269: ARRAY
79270: PUSH
79271: LD_INT 2
79273: ARRAY
79274: STR
79275: PUSH
79276: LD_STRING ,
79278: STR
79279: PUSH
79280: LD_VAR 0 3
79284: PUSH
79285: LD_VAR 0 2
79289: ARRAY
79290: PUSH
79291: LD_INT 3
79293: ARRAY
79294: STR
79295: PUSH
79296: LD_STRING ,
79298: STR
79299: PUSH
79300: LD_VAR 0 3
79304: PUSH
79305: LD_VAR 0 2
79309: ARRAY
79310: PUSH
79311: LD_INT 4
79313: ARRAY
79314: STR
79315: PUSH
79316: LD_STRING )
79318: STR
79319: PPUSH
79320: CALL_OW 559
79324: GO 79234
79326: POP
79327: POP
// end ; end ;
79328: LD_VAR 0 1
79332: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
79333: LD_EXP 122
79337: IFFALSE 80022
79339: GO 79341
79341: DISABLE
79342: LD_INT 0
79344: PPUSH
79345: PPUSH
79346: PPUSH
79347: PPUSH
79348: PPUSH
79349: PPUSH
79350: PPUSH
79351: PPUSH
79352: PPUSH
// begin enable ;
79353: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
79354: LD_ADDR_VAR 0 3
79358: PUSH
79359: LD_EXP 122
79363: PPUSH
79364: CALL 57989 0 1
79368: ST_TO_ADDR
// if not list then
79369: LD_VAR 0 3
79373: NOT
79374: IFFALSE 79378
// exit ;
79376: GO 80022
// for i := 1 to list do
79378: LD_ADDR_VAR 0 1
79382: PUSH
79383: DOUBLE
79384: LD_INT 1
79386: DEC
79387: ST_TO_ADDR
79388: LD_VAR 0 3
79392: PUSH
79393: FOR_TO
79394: IFFALSE 80020
// begin depot := list [ i ] [ 2 ] ;
79396: LD_ADDR_VAR 0 8
79400: PUSH
79401: LD_VAR 0 3
79405: PUSH
79406: LD_VAR 0 1
79410: ARRAY
79411: PUSH
79412: LD_INT 2
79414: ARRAY
79415: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
79416: LD_ADDR_VAR 0 5
79420: PUSH
79421: LD_VAR 0 3
79425: PUSH
79426: LD_VAR 0 1
79430: ARRAY
79431: PUSH
79432: LD_INT 1
79434: ARRAY
79435: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
79436: LD_VAR 0 8
79440: PPUSH
79441: CALL_OW 301
79445: PUSH
79446: LD_VAR 0 5
79450: PUSH
79451: LD_VAR 0 8
79455: PPUSH
79456: CALL_OW 255
79460: NONEQUAL
79461: OR
79462: IFFALSE 79491
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
79464: LD_ADDR_EXP 122
79468: PUSH
79469: LD_EXP 122
79473: PPUSH
79474: LD_VAR 0 8
79478: PPUSH
79479: LD_INT 0
79481: PPUSH
79482: CALL_OW 1
79486: ST_TO_ADDR
// exit ;
79487: POP
79488: POP
79489: GO 80022
// end ; x := list [ i ] [ 3 ] ;
79491: LD_ADDR_VAR 0 6
79495: PUSH
79496: LD_VAR 0 3
79500: PUSH
79501: LD_VAR 0 1
79505: ARRAY
79506: PUSH
79507: LD_INT 3
79509: ARRAY
79510: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
79511: LD_ADDR_VAR 0 7
79515: PUSH
79516: LD_VAR 0 3
79520: PUSH
79521: LD_VAR 0 1
79525: ARRAY
79526: PUSH
79527: LD_INT 4
79529: ARRAY
79530: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
79531: LD_ADDR_VAR 0 9
79535: PUSH
79536: LD_VAR 0 6
79540: PPUSH
79541: LD_VAR 0 7
79545: PPUSH
79546: LD_INT 16
79548: PPUSH
79549: CALL 56577 0 3
79553: ST_TO_ADDR
// if not cratesNearbyPoint then
79554: LD_VAR 0 9
79558: NOT
79559: IFFALSE 79565
// exit ;
79561: POP
79562: POP
79563: GO 80022
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
79565: LD_ADDR_VAR 0 4
79569: PUSH
79570: LD_INT 22
79572: PUSH
79573: LD_VAR 0 5
79577: PUSH
79578: EMPTY
79579: LIST
79580: LIST
79581: PUSH
79582: LD_INT 3
79584: PUSH
79585: LD_INT 60
79587: PUSH
79588: EMPTY
79589: LIST
79590: PUSH
79591: EMPTY
79592: LIST
79593: LIST
79594: PUSH
79595: LD_INT 91
79597: PUSH
79598: LD_VAR 0 8
79602: PUSH
79603: LD_INT 6
79605: PUSH
79606: EMPTY
79607: LIST
79608: LIST
79609: LIST
79610: PUSH
79611: LD_INT 2
79613: PUSH
79614: LD_INT 25
79616: PUSH
79617: LD_INT 2
79619: PUSH
79620: EMPTY
79621: LIST
79622: LIST
79623: PUSH
79624: LD_INT 25
79626: PUSH
79627: LD_INT 16
79629: PUSH
79630: EMPTY
79631: LIST
79632: LIST
79633: PUSH
79634: EMPTY
79635: LIST
79636: LIST
79637: LIST
79638: PUSH
79639: EMPTY
79640: LIST
79641: LIST
79642: LIST
79643: LIST
79644: PPUSH
79645: CALL_OW 69
79649: PUSH
79650: LD_VAR 0 8
79654: PPUSH
79655: CALL_OW 313
79659: PPUSH
79660: LD_INT 3
79662: PUSH
79663: LD_INT 60
79665: PUSH
79666: EMPTY
79667: LIST
79668: PUSH
79669: EMPTY
79670: LIST
79671: LIST
79672: PUSH
79673: LD_INT 2
79675: PUSH
79676: LD_INT 25
79678: PUSH
79679: LD_INT 2
79681: PUSH
79682: EMPTY
79683: LIST
79684: LIST
79685: PUSH
79686: LD_INT 25
79688: PUSH
79689: LD_INT 16
79691: PUSH
79692: EMPTY
79693: LIST
79694: LIST
79695: PUSH
79696: EMPTY
79697: LIST
79698: LIST
79699: LIST
79700: PUSH
79701: EMPTY
79702: LIST
79703: LIST
79704: PPUSH
79705: CALL_OW 72
79709: UNION
79710: ST_TO_ADDR
// if tmp then
79711: LD_VAR 0 4
79715: IFFALSE 79795
// begin tmp := ShrinkArray ( tmp , 3 ) ;
79717: LD_ADDR_VAR 0 4
79721: PUSH
79722: LD_VAR 0 4
79726: PPUSH
79727: LD_INT 3
79729: PPUSH
79730: CALL 54546 0 2
79734: ST_TO_ADDR
// for j in tmp do
79735: LD_ADDR_VAR 0 2
79739: PUSH
79740: LD_VAR 0 4
79744: PUSH
79745: FOR_IN
79746: IFFALSE 79789
// begin if IsInUnit ( j ) then
79748: LD_VAR 0 2
79752: PPUSH
79753: CALL_OW 310
79757: IFFALSE 79768
// ComExit ( j ) ;
79759: LD_VAR 0 2
79763: PPUSH
79764: CALL 54629 0 1
// AddComCollect ( j , x , y ) ;
79768: LD_VAR 0 2
79772: PPUSH
79773: LD_VAR 0 6
79777: PPUSH
79778: LD_VAR 0 7
79782: PPUSH
79783: CALL_OW 177
// end ;
79787: GO 79745
79789: POP
79790: POP
// exit ;
79791: POP
79792: POP
79793: GO 80022
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
79795: LD_ADDR_VAR 0 4
79799: PUSH
79800: LD_INT 22
79802: PUSH
79803: LD_VAR 0 5
79807: PUSH
79808: EMPTY
79809: LIST
79810: LIST
79811: PUSH
79812: LD_INT 91
79814: PUSH
79815: LD_VAR 0 8
79819: PUSH
79820: LD_INT 8
79822: PUSH
79823: EMPTY
79824: LIST
79825: LIST
79826: LIST
79827: PUSH
79828: LD_INT 2
79830: PUSH
79831: LD_INT 34
79833: PUSH
79834: LD_INT 12
79836: PUSH
79837: EMPTY
79838: LIST
79839: LIST
79840: PUSH
79841: LD_INT 34
79843: PUSH
79844: LD_INT 51
79846: PUSH
79847: EMPTY
79848: LIST
79849: LIST
79850: PUSH
79851: LD_INT 34
79853: PUSH
79854: LD_INT 32
79856: PUSH
79857: EMPTY
79858: LIST
79859: LIST
79860: PUSH
79861: LD_INT 34
79863: PUSH
79864: LD_INT 89
79866: PUSH
79867: EMPTY
79868: LIST
79869: LIST
79870: PUSH
79871: EMPTY
79872: LIST
79873: LIST
79874: LIST
79875: LIST
79876: LIST
79877: PUSH
79878: EMPTY
79879: LIST
79880: LIST
79881: LIST
79882: PPUSH
79883: CALL_OW 69
79887: ST_TO_ADDR
// if tmp then
79888: LD_VAR 0 4
79892: IFFALSE 80018
// begin for j in tmp do
79894: LD_ADDR_VAR 0 2
79898: PUSH
79899: LD_VAR 0 4
79903: PUSH
79904: FOR_IN
79905: IFFALSE 80016
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
79907: LD_VAR 0 2
79911: PPUSH
79912: CALL_OW 262
79916: PUSH
79917: LD_INT 3
79919: EQUAL
79920: PUSH
79921: LD_VAR 0 2
79925: PPUSH
79926: CALL_OW 261
79930: PUSH
79931: LD_INT 20
79933: GREATER
79934: OR
79935: PUSH
79936: LD_VAR 0 2
79940: PPUSH
79941: CALL_OW 314
79945: NOT
79946: AND
79947: PUSH
79948: LD_VAR 0 2
79952: PPUSH
79953: CALL_OW 263
79957: PUSH
79958: LD_INT 1
79960: NONEQUAL
79961: PUSH
79962: LD_VAR 0 2
79966: PPUSH
79967: CALL_OW 311
79971: OR
79972: AND
79973: IFFALSE 80014
// begin ComCollect ( j , x , y ) ;
79975: LD_VAR 0 2
79979: PPUSH
79980: LD_VAR 0 6
79984: PPUSH
79985: LD_VAR 0 7
79989: PPUSH
79990: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
79994: LD_VAR 0 2
79998: PPUSH
79999: LD_VAR 0 8
80003: PPUSH
80004: CALL_OW 172
// exit ;
80008: POP
80009: POP
80010: POP
80011: POP
80012: GO 80022
// end ;
80014: GO 79904
80016: POP
80017: POP
// end ; end ;
80018: GO 79393
80020: POP
80021: POP
// end ; end_of_file
80022: PPOPN 9
80024: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80025: LD_VAR 0 1
80029: PPUSH
80030: LD_VAR 0 2
80034: PPUSH
80035: LD_VAR 0 3
80039: PPUSH
80040: LD_VAR 0 4
80044: PPUSH
80045: LD_VAR 0 5
80049: PPUSH
80050: LD_VAR 0 6
80054: PPUSH
80055: CALL 64378 0 6
// end ;
80059: PPOPN 6
80061: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80062: LD_INT 0
80064: PPUSH
// begin if not units then
80065: LD_VAR 0 1
80069: NOT
80070: IFFALSE 80074
// exit ;
80072: GO 80074
// end ;
80074: PPOPN 7
80076: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80077: CALL 64282 0 0
// end ;
80081: PPOPN 1
80083: END
