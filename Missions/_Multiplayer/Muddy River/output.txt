// starting var tab ; begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitHc ;
   8: CALL_OW 19
// InitUc ;
  12: CALL_OW 18
// InitBc ;
  16: CALL_OW 21
// InitVariables ;
  20: CALL 318 0 0
// InitMultiplayer ;
  24: CALL 579 0 0
// InitMacro ;
  28: CALL 52922 0 0
// if debug then
  32: LD_EXP 1
  36: IFFALSE 45
// FogOff ( 1 ) ;
  38: LD_INT 1
  40: PPUSH
  41: CALL_OW 344
// PrepareNature ( 3 , 3 , 9 , 2 , 2 , 1 , 5 , natureArea , waterArea ) ;
  45: LD_INT 3
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 9
  53: PPUSH
  54: LD_INT 2
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 5
  65: PPUSH
  66: LD_INT 18
  68: PPUSH
  69: LD_INT 19
  71: PPUSH
  72: CALL 44689 0 9
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  76: LD_INT 2
  78: PPUSH
  79: CALL 1803 0 1
  83: PPUSH
  84: CALL 5771 0 1
// Multiplayer_Start ;
  88: CALL 3680 0 0
// MC_Start ( ) ;
  92: CALL 55034 0 0
// Multiplayer_End ;
  96: CALL 3804 0 0
// end ;
 100: END
// export function CustomInitMacro ; var i ; begin
 101: LD_INT 0
 103: PPUSH
 104: PPUSH
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
 105: LD_INT 1
 107: PPUSH
 108: LD_INT 8
 110: PUSH
 111: LD_INT 10
 113: PUSH
 114: LD_INT 12
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: PUSH
 122: LD_OWVAR 67
 126: ARRAY
 127: PPUSH
 128: LD_INT 3
 130: PPUSH
 131: CALL 76355 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 135: LD_INT 2
 137: PPUSH
 138: LD_INT 6
 140: PUSH
 141: LD_INT 8
 143: PUSH
 144: LD_INT 9
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: LIST
 151: PUSH
 152: LD_OWVAR 67
 156: ARRAY
 157: PPUSH
 158: LD_INT 2
 160: PPUSH
 161: CALL 76355 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 165: LD_INT 3
 167: PPUSH
 168: LD_INT 6
 170: PUSH
 171: LD_INT 7
 173: PUSH
 174: LD_INT 9
 176: PUSH
 177: EMPTY
 178: LIST
 179: LIST
 180: LIST
 181: PUSH
 182: LD_OWVAR 67
 186: ARRAY
 187: PPUSH
 188: LD_INT 1
 190: PPUSH
 191: CALL 76355 0 3
// MC_SetMinesField ( 4 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield4_left ) ;
 195: LD_INT 4
 197: PPUSH
 198: LD_INT 6
 200: PUSH
 201: LD_INT 7
 203: PUSH
 204: LD_INT 9
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: LIST
 211: PUSH
 212: LD_OWVAR 67
 216: ARRAY
 217: PPUSH
 218: LD_INT 25
 220: PPUSH
 221: CALL 76355 0 3
// mc_parking := [ parking_north , parking_west , parking_east , parking_south ] ;
 225: LD_ADDR_EXP 66
 229: PUSH
 230: LD_INT 20
 232: PUSH
 233: LD_INT 21
 235: PUSH
 236: LD_INT 22
 238: PUSH
 239: LD_INT 24
 241: PUSH
 242: EMPTY
 243: LIST
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// mc_scan_area := [ area_base_north , area_base_west , area_base_east , area_base_south ] ;
 248: LD_ADDR_EXP 67
 252: PUSH
 253: LD_INT 35
 255: PUSH
 256: LD_INT 34
 258: PUSH
 259: LD_INT 36
 261: PUSH
 262: LD_INT 33
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: ST_TO_ADDR
// for i = 1 to mc_bases do
 271: LD_ADDR_VAR 0 2
 275: PUSH
 276: DOUBLE
 277: LD_INT 1
 279: DEC
 280: ST_TO_ADDR
 281: LD_EXP 42
 285: PUSH
 286: FOR_TO
 287: IFFALSE 311
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 289: LD_VAR 0 2
 293: PPUSH
 294: LD_EXP 37
 298: PUSH
 299: LD_VAR 0 2
 303: ARRAY
 304: PPUSH
 305: CALL 76781 0 2
 309: GO 286
 311: POP
 312: POP
// end ;
 313: LD_VAR 0 1
 317: RET
// export debug , game , side_bot , artifact_get , base_names ; function InitVariables ; begin
 318: LD_INT 0
 320: PPUSH
// debug := false ;
 321: LD_ADDR_EXP 1
 325: PUSH
 326: LD_INT 0
 328: ST_TO_ADDR
// side_bot := 2 ;
 329: LD_ADDR_EXP 3
 333: PUSH
 334: LD_INT 2
 336: ST_TO_ADDR
// artifact_get := false ;
 337: LD_ADDR_EXP 4
 341: PUSH
 342: LD_INT 0
 344: ST_TO_ADDR
// base_names := [ base_a , base_b , base_c , base_d , base_e , base_f , base_g , base_h , base_i , base_j , base_k , base_l , base_m , base_n , base_o , base_p , base_r , base_s , base_t , base_u , base_w , base_x , base_y , base_z ] ;
 345: LD_ADDR_EXP 5
 349: PUSH
 350: LD_STRING base_a
 352: PUSH
 353: LD_STRING base_b
 355: PUSH
 356: LD_STRING base_c
 358: PUSH
 359: LD_STRING base_d
 361: PUSH
 362: LD_STRING base_e
 364: PUSH
 365: LD_STRING base_f
 367: PUSH
 368: LD_STRING base_g
 370: PUSH
 371: LD_STRING base_h
 373: PUSH
 374: LD_STRING base_i
 376: PUSH
 377: LD_STRING base_j
 379: PUSH
 380: LD_STRING base_k
 382: PUSH
 383: LD_STRING base_l
 385: PUSH
 386: LD_STRING base_m
 388: PUSH
 389: LD_STRING base_n
 391: PUSH
 392: LD_STRING base_o
 394: PUSH
 395: LD_STRING base_p
 397: PUSH
 398: LD_STRING base_r
 400: PUSH
 401: LD_STRING base_s
 403: PUSH
 404: LD_STRING base_t
 406: PUSH
 407: LD_STRING base_u
 409: PUSH
 410: LD_STRING base_w
 412: PUSH
 413: LD_STRING base_x
 415: PUSH
 416: LD_STRING base_y
 418: PUSH
 419: LD_STRING base_z
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// end ;
 448: LD_VAR 0 1
 452: RET
// every 0 0$01 trigger game and not debug_strings do
 453: LD_EXP 2
 457: PUSH
 458: LD_OWVAR 48
 462: NOT
 463: AND
 464: IFFALSE 480
 466: GO 468
 468: DISABLE
// begin enable ;
 469: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 470: LD_ADDR_OWVAR 47
 474: PUSH
 475: CALL 4505 0 0
 479: ST_TO_ADDR
// end ;
 480: END
// function Debuger ; var i ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// if not debug then
 485: LD_EXP 1
 489: NOT
 490: IFFALSE 494
// exit ;
 492: GO 566
// game_speed := 5 ;
 494: LD_ADDR_OWVAR 65
 498: PUSH
 499: LD_INT 5
 501: ST_TO_ADDR
// uc_side := 1 ;
 502: LD_ADDR_OWVAR 20
 506: PUSH
 507: LD_INT 1
 509: ST_TO_ADDR
// uc_nation := 1 ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_INT 1
 517: ST_TO_ADDR
// for i = 1 to 10 do
 518: LD_ADDR_VAR 0 2
 522: PUSH
 523: DOUBLE
 524: LD_INT 1
 526: DEC
 527: ST_TO_ADDR
 528: LD_INT 10
 530: PUSH
 531: FOR_TO
 532: IFFALSE 564
// begin PrepareHuman ( false , 1 , 10 ) ;
 534: LD_INT 0
 536: PPUSH
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 10
 542: PPUSH
 543: CALL_OW 380
// PlaceUnitArea ( CreateHuman , player_1_hum , false ) ;
 547: CALL_OW 44
 551: PPUSH
 552: LD_INT 9
 554: PPUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 49
// end ;
 562: GO 531
 564: POP
 565: POP
// end ;
 566: LD_VAR 0 1
 570: RET
// export function CustomEvent ( event ) ; begin
 571: LD_INT 0
 573: PPUSH
// end ; end_of_file
 574: LD_VAR 0 2
 578: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_ape_amount , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_reinforcements_spawned ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
// multi_settings_counter := 6 ;
 586: LD_ADDR_EXP 18
 590: PUSH
 591: LD_INT 6
 593: ST_TO_ADDR
// if multiplayer then
 594: LD_OWVAR 4
 598: IFFALSE 722
// begin your_side := mp_player_side ;
 600: LD_ADDR_OWVAR 2
 604: PUSH
 605: LD_OWVAR 7
 609: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 610: LD_ADDR_EXP 6
 614: PUSH
 615: LD_OWVAR 6
 619: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 620: LD_ADDR_EXP 7
 624: PUSH
 625: LD_OWVAR 17
 629: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 630: LD_ADDR_EXP 8
 634: PUSH
 635: LD_OWVAR 15
 639: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 640: LD_ADDR_EXP 9
 644: PUSH
 645: LD_OWVAR 16
 649: ST_TO_ADDR
// multi_teams := mp_teams ;
 650: LD_ADDR_EXP 10
 654: PUSH
 655: LD_OWVAR 12
 659: ST_TO_ADDR
// for i = 1 to multi_settings_counter do
 660: LD_ADDR_VAR 0 2
 664: PUSH
 665: DOUBLE
 666: LD_INT 1
 668: DEC
 669: ST_TO_ADDR
 670: LD_EXP 18
 674: PUSH
 675: FOR_TO
 676: IFFALSE 718
// multi_settings := Insert ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 678: LD_ADDR_EXP 17
 682: PUSH
 683: LD_EXP 17
 687: PPUSH
 688: LD_EXP 17
 692: PUSH
 693: LD_INT 1
 695: PLUS
 696: PPUSH
 697: LD_VAR 0 2
 701: PPUSH
 702: CALL_OW 426
 706: PUSH
 707: LD_INT 1
 709: PLUS
 710: PPUSH
 711: CALL_OW 2
 715: ST_TO_ADDR
 716: GO 675
 718: POP
 719: POP
// end else
 720: GO 908
// begin your_side := 1 ;
 722: LD_ADDR_OWVAR 2
 726: PUSH
 727: LD_INT 1
 729: ST_TO_ADDR
// multi_gametype := 1 ;
 730: LD_ADDR_EXP 6
 734: PUSH
 735: LD_INT 1
 737: ST_TO_ADDR
// multi_sides := [ 2 , 0 , 0 , 3 , 0 , 0 , 1 , 0 ] ;
 738: LD_ADDR_EXP 7
 742: PUSH
 743: LD_INT 2
 745: PUSH
 746: LD_INT 0
 748: PUSH
 749: LD_INT 0
 751: PUSH
 752: LD_INT 3
 754: PUSH
 755: LD_INT 0
 757: PUSH
 758: LD_INT 0
 760: PUSH
 761: LD_INT 1
 763: PUSH
 764: LD_INT 0
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: ST_TO_ADDR
// multi_side_teams := [ 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 ] ;
 777: LD_ADDR_EXP 8
 781: PUSH
 782: LD_INT 1
 784: PUSH
 785: LD_INT 0
 787: PUSH
 788: LD_INT 0
 790: PUSH
 791: LD_INT 1
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 0
 799: PUSH
 800: LD_INT 1
 802: PUSH
 803: LD_INT 0
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: LIST
 812: LIST
 813: LIST
 814: LIST
 815: ST_TO_ADDR
// multi_nations := [ 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 ] ;
 816: LD_ADDR_EXP 9
 820: PUSH
 821: LD_INT 1
 823: PUSH
 824: LD_INT 0
 826: PUSH
 827: LD_INT 0
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: LD_INT 0
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 1
 841: PUSH
 842: LD_INT 0
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: LIST
 854: ST_TO_ADDR
// multi_teams := [ [ 1 , 4 , 7 ] ] ;
 855: LD_ADDR_EXP 10
 859: PUSH
 860: LD_INT 1
 862: PUSH
 863: LD_INT 4
 865: PUSH
 866: LD_INT 7
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: PUSH
 874: EMPTY
 875: LIST
 876: ST_TO_ADDR
// multi_settings := [ 2 , 2 , 1 , 3 , 1 , 1 ] ;
 877: LD_ADDR_EXP 17
 881: PUSH
 882: LD_INT 2
 884: PUSH
 885: LD_INT 2
 887: PUSH
 888: LD_INT 1
 890: PUSH
 891: LD_INT 3
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 1
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 908: LD_ADDR_EXP 11
 912: PUSH
 913: LD_INT 0
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 0
 921: PUSH
 922: LD_INT 0
 924: PUSH
 925: LD_INT 0
 927: PUSH
 928: LD_INT 0
 930: PUSH
 931: LD_INT 0
 933: PUSH
 934: LD_INT 0
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 947: LD_ADDR_EXP 14
 951: PUSH
 952: LD_INT 0
 954: PUSH
 955: LD_INT 0
 957: PUSH
 958: LD_INT 0
 960: PUSH
 961: LD_INT 0
 963: PUSH
 964: LD_INT 0
 966: PUSH
 967: LD_INT 0
 969: PUSH
 970: LD_INT 0
 972: PUSH
 973: LD_INT 0
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 986: LD_ADDR_EXP 25
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: LD_INT 0
 996: PUSH
 997: LD_INT 0
 999: PUSH
1000: LD_INT 0
1002: PUSH
1003: LD_INT 0
1005: PUSH
1006: LD_INT 0
1008: PUSH
1009: LD_INT 0
1011: PUSH
1012: LD_INT 0
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// multi_teamgame := true ;
1025: LD_ADDR_EXP 15
1029: PUSH
1030: LD_INT 1
1032: ST_TO_ADDR
// multi_allowed_nations := [ 1 ] ;
1033: LD_ADDR_EXP 13
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: ST_TO_ADDR
// multi_custom_commanders := true ;
1044: LD_ADDR_EXP 16
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// multi_commanders := [ ] ;
1052: LD_ADDR_EXP 24
1056: PUSH
1057: EMPTY
1058: ST_TO_ADDR
// multi_reinforcements := [ ] ;
1059: LD_ADDR_EXP 27
1063: PUSH
1064: EMPTY
1065: ST_TO_ADDR
// multi_reinforcements_spawned := 0 ;
1066: LD_ADDR_EXP 28
1070: PUSH
1071: LD_INT 0
1073: ST_TO_ADDR
// multi_players_amount := 0 ;
1074: LD_ADDR_EXP 26
1078: PUSH
1079: LD_INT 0
1081: ST_TO_ADDR
// multi_pos_area := [ [ player_1_hum , player_1_veh ] , [ player_2_hum , player_2_veh ] , [ player_3_hum , player_3_veh ] ] ;
1082: LD_ADDR_EXP 12
1086: PUSH
1087: LD_INT 9
1089: PUSH
1090: LD_INT 8
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: PUSH
1097: LD_INT 27
1099: PUSH
1100: LD_INT 26
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 29
1109: PUSH
1110: LD_INT 28
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: ST_TO_ADDR
// for i = 1 to 8 do
1122: LD_ADDR_VAR 0 2
1126: PUSH
1127: DOUBLE
1128: LD_INT 1
1130: DEC
1131: ST_TO_ADDR
1132: LD_INT 8
1134: PUSH
1135: FOR_TO
1136: IFFALSE 1465
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
1138: LD_VAR 0 2
1142: PPUSH
1143: CALL_OW 530
1147: IFFALSE 1305
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
1149: LD_ADDR_EXP 11
1153: PUSH
1154: LD_EXP 11
1158: PPUSH
1159: LD_VAR 0 2
1163: PPUSH
1164: LD_INT 1
1166: PPUSH
1167: CALL_OW 1
1171: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
1172: LD_ADDR_EXP 9
1176: PUSH
1177: LD_EXP 9
1181: PPUSH
1182: LD_VAR 0 2
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 1
1194: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1195: LD_ADDR_EXP 7
1199: PUSH
1200: LD_EXP 7
1204: PPUSH
1205: LD_VAR 0 2
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL_OW 1
1217: ST_TO_ADDR
// for j = 1 to multi_teams do
1218: LD_ADDR_VAR 0 3
1222: PUSH
1223: DOUBLE
1224: LD_INT 1
1226: DEC
1227: ST_TO_ADDR
1228: LD_EXP 10
1232: PUSH
1233: FOR_TO
1234: IFFALSE 1303
// begin if i in multi_teams [ j ] then
1236: LD_VAR 0 2
1240: PUSH
1241: LD_EXP 10
1245: PUSH
1246: LD_VAR 0 3
1250: ARRAY
1251: IN
1252: IFFALSE 1301
// begin tmp := multi_teams [ j ] diff i ;
1254: LD_ADDR_VAR 0 5
1258: PUSH
1259: LD_EXP 10
1263: PUSH
1264: LD_VAR 0 3
1268: ARRAY
1269: PUSH
1270: LD_VAR 0 2
1274: DIFF
1275: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1276: LD_ADDR_EXP 10
1280: PUSH
1281: LD_EXP 10
1285: PPUSH
1286: LD_VAR 0 3
1290: PPUSH
1291: LD_VAR 0 5
1295: PPUSH
1296: CALL_OW 1
1300: ST_TO_ADDR
// end ; end ;
1301: GO 1233
1303: POP
1304: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1305: LD_EXP 9
1309: PUSH
1310: LD_VAR 0 2
1314: ARRAY
1315: PUSH
1316: LD_EXP 9
1320: PUSH
1321: LD_VAR 0 2
1325: ARRAY
1326: PUSH
1327: LD_EXP 13
1331: IN
1332: NOT
1333: AND
1334: IFFALSE 1375
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1336: LD_ADDR_EXP 9
1340: PUSH
1341: LD_EXP 9
1345: PPUSH
1346: LD_VAR 0 2
1350: PPUSH
1351: LD_EXP 13
1355: PUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_EXP 13
1363: PPUSH
1364: CALL_OW 12
1368: ARRAY
1369: PPUSH
1370: CALL_OW 1
1374: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1375: LD_EXP 9
1379: PUSH
1380: LD_VAR 0 2
1384: ARRAY
1385: NOT
1386: PUSH
1387: LD_EXP 7
1391: PUSH
1392: LD_VAR 0 2
1396: ARRAY
1397: NOT
1398: AND
1399: PUSH
1400: LD_EXP 11
1404: PUSH
1405: LD_VAR 0 2
1409: ARRAY
1410: NOT
1411: AND
1412: IFFALSE 1437
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1414: LD_ADDR_EXP 14
1418: PUSH
1419: LD_EXP 14
1423: PPUSH
1424: LD_VAR 0 2
1428: PPUSH
1429: LD_INT 1
1431: PPUSH
1432: CALL_OW 1
1436: ST_TO_ADDR
// if multi_sides [ i ] then
1437: LD_EXP 7
1441: PUSH
1442: LD_VAR 0 2
1446: ARRAY
1447: IFFALSE 1463
// multi_players_amount := multi_players_amount + 1 ;
1449: LD_ADDR_EXP 26
1453: PUSH
1454: LD_EXP 26
1458: PUSH
1459: LD_INT 1
1461: PLUS
1462: ST_TO_ADDR
// end ;
1463: GO 1135
1465: POP
1466: POP
// for i in multi_teams do
1467: LD_ADDR_VAR 0 2
1471: PUSH
1472: LD_EXP 10
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1586
// begin for j = 2 to i do
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: DOUBLE
1486: LD_INT 2
1488: DEC
1489: ST_TO_ADDR
1490: LD_VAR 0 2
1494: PUSH
1495: FOR_TO
1496: IFFALSE 1582
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1498: LD_VAR 0 2
1502: PUSH
1503: LD_VAR 0 3
1507: ARRAY
1508: PPUSH
1509: LD_VAR 0 2
1513: PUSH
1514: LD_INT 1
1516: ARRAY
1517: PPUSH
1518: CALL_OW 343
// for x = 1 to j - 1 do
1522: LD_ADDR_VAR 0 4
1526: PUSH
1527: DOUBLE
1528: LD_INT 1
1530: DEC
1531: ST_TO_ADDR
1532: LD_VAR 0 3
1536: PUSH
1537: LD_INT 1
1539: MINUS
1540: PUSH
1541: FOR_TO
1542: IFFALSE 1578
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1544: LD_VAR 0 2
1548: PUSH
1549: LD_VAR 0 3
1553: ARRAY
1554: PPUSH
1555: LD_VAR 0 2
1559: PUSH
1560: LD_VAR 0 4
1564: ARRAY
1565: PPUSH
1566: LD_INT 1
1568: PPUSH
1569: LD_INT 1
1571: PPUSH
1572: CALL_OW 80
1576: GO 1541
1578: POP
1579: POP
// end ;
1580: GO 1495
1582: POP
1583: POP
// end ;
1584: GO 1477
1586: POP
1587: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1588: LD_ADDR_OWVAR 67
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: LD_INT 2
1598: PUSH
1599: LD_INT 3
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_EXP 17
1611: PUSH
1612: LD_INT 1
1614: ARRAY
1615: ARRAY
1616: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
1617: LD_ADDR_EXP 19
1621: PUSH
1622: LD_INT 9
1624: PUSH
1625: LD_INT 12
1627: PUSH
1628: LD_INT 15
1630: PUSH
1631: LD_INT 18
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: PUSH
1640: LD_EXP 17
1644: PUSH
1645: LD_INT 2
1647: ARRAY
1648: ARRAY
1649: ST_TO_ADDR
// multi_skill_level := [ 5 , 7 , 9 ] [ multi_settings [ 3 ] ] ;
1650: LD_ADDR_EXP 20
1654: PUSH
1655: LD_INT 5
1657: PUSH
1658: LD_INT 7
1660: PUSH
1661: LD_INT 9
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_EXP 17
1673: PUSH
1674: LD_INT 3
1676: ARRAY
1677: ARRAY
1678: ST_TO_ADDR
// multi_crates_spawn := [ [ 6000 , 0 0$45 ] , [ 8000 , 0 0$36 ] , [ 10000 , 0 0$22 ] , [ 15000 , 0 0$22 ] ] [ multi_settings [ 4 ] ] ;
1679: LD_ADDR_EXP 21
1683: PUSH
1684: LD_INT 6000
1686: PUSH
1687: LD_INT 1575
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 8000
1696: PUSH
1697: LD_INT 1260
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 10000
1706: PUSH
1707: LD_INT 770
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: LD_INT 15000
1716: PUSH
1717: LD_INT 770
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: PUSH
1730: LD_EXP 17
1734: PUSH
1735: LD_INT 4
1737: ARRAY
1738: ARRAY
1739: ST_TO_ADDR
// multi_ape_amount := [ 6 , 8 , 10 ] [ multi_settings [ 5 ] ] ;
1740: LD_ADDR_EXP 22
1744: PUSH
1745: LD_INT 6
1747: PUSH
1748: LD_INT 8
1750: PUSH
1751: LD_INT 10
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: LD_EXP 17
1763: PUSH
1764: LD_INT 5
1766: ARRAY
1767: ARRAY
1768: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1769: LD_ADDR_EXP 23
1773: PUSH
1774: LD_INT 0
1776: PUSH
1777: LD_INT 1
1779: PUSH
1780: LD_INT 2
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: LIST
1787: PUSH
1788: LD_EXP 17
1792: PUSH
1793: LD_INT 6
1795: ARRAY
1796: ARRAY
1797: ST_TO_ADDR
// end ;
1798: LD_VAR 0 1
1802: RET
// export function Multiplayer_SetBotSide ( prefer_side ) ; var i ; begin
1803: LD_INT 0
1805: PPUSH
1806: PPUSH
// ResetFog ;
1807: CALL_OW 335
// if not multi_bots then
1811: LD_EXP 14
1815: NOT
1816: IFFALSE 1820
// exit ;
1818: GO 1892
// if multi_bots [ prefer_side ] then
1820: LD_EXP 14
1824: PUSH
1825: LD_VAR 0 1
1829: ARRAY
1830: IFFALSE 1844
// begin result := prefer_side ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: LD_VAR 0 1
1841: ST_TO_ADDR
// exit ;
1842: GO 1892
// end ; for i = 1 to multi_bots do
1844: LD_ADDR_VAR 0 3
1848: PUSH
1849: DOUBLE
1850: LD_INT 1
1852: DEC
1853: ST_TO_ADDR
1854: LD_EXP 14
1858: PUSH
1859: FOR_TO
1860: IFFALSE 1890
// if multi_bots [ i ] then
1862: LD_EXP 14
1866: PUSH
1867: LD_VAR 0 3
1871: ARRAY
1872: IFFALSE 1888
// begin result := i ;
1874: LD_ADDR_VAR 0 2
1878: PUSH
1879: LD_VAR 0 3
1883: ST_TO_ADDR
// exit ;
1884: POP
1885: POP
1886: GO 1892
// end ;
1888: GO 1859
1890: POP
1891: POP
// end ;
1892: LD_VAR 0 2
1896: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1897: LD_INT 0
1899: PPUSH
// uc_side := side ;
1900: LD_ADDR_OWVAR 20
1904: PUSH
1905: LD_VAR 0 1
1909: ST_TO_ADDR
// uc_nation := 1 ;
1910: LD_ADDR_OWVAR 21
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// hc_importance := 100 ;
1918: LD_ADDR_OWVAR 32
1922: PUSH
1923: LD_INT 100
1925: ST_TO_ADDR
// hc_class := 1 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 1
1933: ST_TO_ADDR
// if num = 1 then
1934: LD_VAR 0 2
1938: PUSH
1939: LD_INT 1
1941: EQUAL
1942: IFFALSE 2024
// begin hc_gallery := us ;
1944: LD_ADDR_OWVAR 33
1948: PUSH
1949: LD_STRING us
1951: ST_TO_ADDR
// hc_face_number := 5 ;
1952: LD_ADDR_OWVAR 34
1956: PUSH
1957: LD_INT 5
1959: ST_TO_ADDR
// hc_name := John Macmilan ;
1960: LD_ADDR_OWVAR 26
1964: PUSH
1965: LD_STRING John Macmilan
1967: ST_TO_ADDR
// hc_sex := sex_male ;
1968: LD_ADDR_OWVAR 27
1972: PUSH
1973: LD_INT 1
1975: ST_TO_ADDR
// hc_skills := [ 7 , 2 , 4 , 4 ] ;
1976: LD_ADDR_OWVAR 31
1980: PUSH
1981: LD_INT 7
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 4
1989: PUSH
1990: LD_INT 4
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1999: LD_ADDR_OWVAR 29
2003: PUSH
2004: LD_INT 11
2006: PUSH
2007: LD_INT 10
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: ST_TO_ADDR
// result := CreateHuman ;
2014: LD_ADDR_VAR 0 3
2018: PUSH
2019: CALL_OW 44
2023: ST_TO_ADDR
// end ; if num = 2 then
2024: LD_VAR 0 2
2028: PUSH
2029: LD_INT 2
2031: EQUAL
2032: IFFALSE 2114
// begin hc_gallery := us ;
2034: LD_ADDR_OWVAR 33
2038: PUSH
2039: LD_STRING us
2041: ST_TO_ADDR
// hc_face_number := 2 ;
2042: LD_ADDR_OWVAR 34
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
2050: LD_ADDR_OWVAR 26
2054: PUSH
2055: LD_STRING Lucy Donaldson
2057: ST_TO_ADDR
// hc_sex := sex_female ;
2058: LD_ADDR_OWVAR 27
2062: PUSH
2063: LD_INT 2
2065: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 3 ] ;
2066: LD_ADDR_OWVAR 31
2070: PUSH
2071: LD_INT 6
2073: PUSH
2074: LD_INT 3
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 3
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: ST_TO_ADDR
// hc_attr := [ 9 , 12 ] ;
2089: LD_ADDR_OWVAR 29
2093: PUSH
2094: LD_INT 9
2096: PUSH
2097: LD_INT 12
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: ST_TO_ADDR
// result := CreateHuman ;
2104: LD_ADDR_VAR 0 3
2108: PUSH
2109: CALL_OW 44
2113: ST_TO_ADDR
// end ; if num = 3 then
2114: LD_VAR 0 2
2118: PUSH
2119: LD_INT 3
2121: EQUAL
2122: IFFALSE 2204
// begin hc_gallery := us ;
2124: LD_ADDR_OWVAR 33
2128: PUSH
2129: LD_STRING us
2131: ST_TO_ADDR
// hc_face_number := 16 ;
2132: LD_ADDR_OWVAR 34
2136: PUSH
2137: LD_INT 16
2139: ST_TO_ADDR
// hc_name := Peter van Houten ;
2140: LD_ADDR_OWVAR 26
2144: PUSH
2145: LD_STRING Peter van Houten
2147: ST_TO_ADDR
// hc_sex := sex_male ;
2148: LD_ADDR_OWVAR 27
2152: PUSH
2153: LD_INT 1
2155: ST_TO_ADDR
// hc_skills := [ 8 , 1 , 3 , 2 ] ;
2156: LD_ADDR_OWVAR 31
2160: PUSH
2161: LD_INT 8
2163: PUSH
2164: LD_INT 1
2166: PUSH
2167: LD_INT 3
2169: PUSH
2170: LD_INT 2
2172: PUSH
2173: EMPTY
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2179: LD_ADDR_OWVAR 29
2183: PUSH
2184: LD_INT 10
2186: PUSH
2187: LD_INT 11
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: ST_TO_ADDR
// result := CreateHuman ;
2194: LD_ADDR_VAR 0 3
2198: PUSH
2199: CALL_OW 44
2203: ST_TO_ADDR
// end ; end ;
2204: LD_VAR 0 3
2208: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , cl , un , veh , tmp , copy , people_amount ; begin
2209: LD_INT 0
2211: PPUSH
2212: PPUSH
2213: PPUSH
2214: PPUSH
2215: PPUSH
2216: PPUSH
2217: PPUSH
2218: PPUSH
2219: PPUSH
// for i = 1 to 8 do
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: DOUBLE
2226: LD_INT 1
2228: DEC
2229: ST_TO_ADDR
2230: LD_INT 8
2232: PUSH
2233: FOR_TO
2234: IFFALSE 3124
// begin if not multi_sides [ i ] then
2236: LD_EXP 7
2240: PUSH
2241: LD_VAR 0 2
2245: ARRAY
2246: NOT
2247: IFFALSE 2251
// continue ;
2249: GO 2233
// if multi_custom_commanders then
2251: LD_EXP 16
2255: IFFALSE 2347
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2257: LD_ADDR_VAR 0 5
2261: PUSH
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_EXP 7
2271: PUSH
2272: LD_VAR 0 2
2276: ARRAY
2277: PPUSH
2278: CALL 1897 0 2
2282: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2283: LD_ADDR_EXP 24
2287: PUSH
2288: LD_EXP 24
2292: PPUSH
2293: LD_EXP 24
2297: PUSH
2298: LD_INT 1
2300: PLUS
2301: PPUSH
2302: LD_VAR 0 5
2306: PPUSH
2307: CALL_OW 2
2311: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2312: LD_VAR 0 5
2316: PPUSH
2317: LD_EXP 12
2321: PUSH
2322: LD_EXP 7
2326: PUSH
2327: LD_VAR 0 2
2331: ARRAY
2332: ARRAY
2333: PUSH
2334: LD_INT 1
2336: ARRAY
2337: PPUSH
2338: LD_INT 0
2340: PPUSH
2341: CALL_OW 49
// end else
2345: GO 2558
// begin uc_side := i ;
2347: LD_ADDR_OWVAR 20
2351: PUSH
2352: LD_VAR 0 2
2356: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2357: LD_ADDR_OWVAR 21
2361: PUSH
2362: LD_EXP 9
2366: PUSH
2367: LD_VAR 0 2
2371: ARRAY
2372: ST_TO_ADDR
// hc_importance := 100 ;
2373: LD_ADDR_OWVAR 32
2377: PUSH
2378: LD_INT 100
2380: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2381: LD_INT 0
2383: PPUSH
2384: LD_INT 1
2386: PPUSH
2387: LD_EXP 20
2391: PPUSH
2392: CALL_OW 380
// if multiplayer then
2396: LD_OWVAR 4
2400: IFFALSE 2458
// begin hc_name := mp_sides_players_names [ i ] ;
2402: LD_ADDR_OWVAR 26
2406: PUSH
2407: LD_OWVAR 19
2411: PUSH
2412: LD_VAR 0 2
2416: ARRAY
2417: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2418: LD_ADDR_OWVAR 33
2422: PUSH
2423: LD_STRING MULTIAVATARS
2425: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2426: LD_ADDR_OWVAR 34
2430: PUSH
2431: LD_VAR 0 2
2435: PPUSH
2436: CALL_OW 525
2440: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2441: LD_ADDR_OWVAR 27
2445: PUSH
2446: LD_VAR 0 2
2450: PPUSH
2451: CALL_OW 526
2455: ST_TO_ADDR
// end else
2456: GO 2490
// begin hc_gallery :=  ;
2458: LD_ADDR_OWVAR 33
2462: PUSH
2463: LD_STRING 
2465: ST_TO_ADDR
// hc_name :=  ;
2466: LD_ADDR_OWVAR 26
2470: PUSH
2471: LD_STRING 
2473: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2474: LD_ADDR_OWVAR 27
2478: PUSH
2479: LD_INT 1
2481: PPUSH
2482: LD_INT 2
2484: PPUSH
2485: CALL_OW 12
2489: ST_TO_ADDR
// end ; un := CreateHuman ;
2490: LD_ADDR_VAR 0 5
2494: PUSH
2495: CALL_OW 44
2499: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2500: LD_VAR 0 5
2504: PPUSH
2505: LD_EXP 12
2509: PUSH
2510: LD_EXP 7
2514: PUSH
2515: LD_VAR 0 2
2519: ARRAY
2520: ARRAY
2521: PUSH
2522: LD_INT 1
2524: ARRAY
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2533: LD_ADDR_EXP 24
2537: PUSH
2538: LD_EXP 24
2542: PPUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: LD_VAR 0 5
2552: PPUSH
2553: CALL_OW 1
2557: ST_TO_ADDR
// end ; InitHc ;
2558: CALL_OW 19
// InitUc ;
2562: CALL_OW 18
// uc_side := i ;
2566: LD_ADDR_OWVAR 20
2570: PUSH
2571: LD_VAR 0 2
2575: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2576: LD_ADDR_OWVAR 21
2580: PUSH
2581: LD_EXP 9
2585: PUSH
2586: LD_VAR 0 2
2590: ARRAY
2591: ST_TO_ADDR
// hc_gallery :=  ;
2592: LD_ADDR_OWVAR 33
2596: PUSH
2597: LD_STRING 
2599: ST_TO_ADDR
// hc_name :=  ;
2600: LD_ADDR_OWVAR 26
2604: PUSH
2605: LD_STRING 
2607: ST_TO_ADDR
// hc_importance := 0 ;
2608: LD_ADDR_OWVAR 32
2612: PUSH
2613: LD_INT 0
2615: ST_TO_ADDR
// cl := 1 ;
2616: LD_ADDR_VAR 0 4
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// for j = 2 to multi_pep_amount do
2624: LD_ADDR_VAR 0 3
2628: PUSH
2629: DOUBLE
2630: LD_INT 2
2632: DEC
2633: ST_TO_ADDR
2634: LD_EXP 19
2638: PUSH
2639: FOR_TO
2640: IFFALSE 3012
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2642: LD_VAR 0 3
2646: PUSH
2647: LD_INT 1
2649: MINUS
2650: PUSH
2651: LD_EXP 19
2655: PUSH
2656: LD_INT 1
2658: MINUS
2659: PUSH
2660: LD_INT 4
2662: DIVREAL
2663: MOD
2664: PUSH
2665: LD_INT 0
2667: EQUAL
2668: IFFALSE 2684
// cl := cl + 1 ;
2670: LD_ADDR_VAR 0 4
2674: PUSH
2675: LD_VAR 0 4
2679: PUSH
2680: LD_INT 1
2682: PLUS
2683: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2684: LD_INT 0
2686: PPUSH
2687: LD_VAR 0 4
2691: PPUSH
2692: LD_EXP 20
2696: PPUSH
2697: CALL_OW 380
// un := CreateHuman ;
2701: LD_ADDR_VAR 0 5
2705: PUSH
2706: CALL_OW 44
2710: ST_TO_ADDR
// if j > copy then
2711: LD_VAR 0 3
2715: PUSH
2716: LD_VAR 0 8
2720: GREATER
2721: IFFALSE 2750
// copy := Replace ( copy , j , un ) else
2723: LD_ADDR_VAR 0 8
2727: PUSH
2728: LD_VAR 0 8
2732: PPUSH
2733: LD_VAR 0 3
2737: PPUSH
2738: LD_VAR 0 5
2742: PPUSH
2743: CALL_OW 1
2747: ST_TO_ADDR
2748: GO 2832
// begin CopySkills ( copy [ j ] , un ) ;
2750: LD_VAR 0 8
2754: PUSH
2755: LD_VAR 0 3
2759: ARRAY
2760: PPUSH
2761: LD_VAR 0 5
2765: PPUSH
2766: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2770: LD_VAR 0 5
2774: PPUSH
2775: LD_INT 2
2777: PPUSH
2778: LD_VAR 0 8
2782: PUSH
2783: LD_VAR 0 3
2787: ARRAY
2788: PPUSH
2789: LD_INT 2
2791: PPUSH
2792: CALL_OW 260
2796: PPUSH
2797: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2801: LD_VAR 0 5
2805: PPUSH
2806: LD_INT 1
2808: PPUSH
2809: LD_VAR 0 8
2813: PUSH
2814: LD_VAR 0 3
2818: ARRAY
2819: PPUSH
2820: LD_INT 1
2822: PPUSH
2823: CALL_OW 260
2827: PPUSH
2828: CALL_OW 239
// end ; if multi_pos_area then
2832: LD_EXP 12
2836: IFFALSE 3010
// begin if GetClass ( un ) = 3 then
2838: LD_VAR 0 5
2842: PPUSH
2843: CALL_OW 257
2847: PUSH
2848: LD_INT 3
2850: EQUAL
2851: IFFALSE 2977
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ j mod 2 + 1 ] , engine_solar , control_manual , [ us_double_gun , us_gatling_gun , us_light_gun ] [ j mod 3 + 1 ] , 100 ) ;
2853: LD_INT 3
2855: PUSH
2856: LD_INT 2
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: PUSH
2863: LD_VAR 0 3
2867: PUSH
2868: LD_INT 2
2870: MOD
2871: PUSH
2872: LD_INT 1
2874: PLUS
2875: ARRAY
2876: PPUSH
2877: LD_INT 2
2879: PPUSH
2880: LD_INT 1
2882: PPUSH
2883: LD_INT 5
2885: PUSH
2886: LD_INT 4
2888: PUSH
2889: LD_INT 3
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: LIST
2896: PUSH
2897: LD_VAR 0 3
2901: PUSH
2902: LD_INT 3
2904: MOD
2905: PUSH
2906: LD_INT 1
2908: PLUS
2909: ARRAY
2910: PPUSH
2911: LD_INT 100
2913: PPUSH
2914: CALL 16875 0 5
// veh := CreateVehicle ;
2918: LD_ADDR_VAR 0 6
2922: PUSH
2923: CALL_OW 45
2927: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2928: LD_VAR 0 6
2932: PPUSH
2933: LD_EXP 12
2937: PUSH
2938: LD_EXP 7
2942: PUSH
2943: LD_VAR 0 2
2947: ARRAY
2948: ARRAY
2949: PUSH
2950: LD_INT 2
2952: ARRAY
2953: PPUSH
2954: LD_INT 0
2956: PPUSH
2957: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2961: LD_VAR 0 5
2965: PPUSH
2966: LD_VAR 0 6
2970: PPUSH
2971: CALL_OW 52
// continue ;
2975: GO 2639
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2977: LD_VAR 0 5
2981: PPUSH
2982: LD_EXP 12
2986: PUSH
2987: LD_EXP 7
2991: PUSH
2992: LD_VAR 0 2
2996: ARRAY
2997: ARRAY
2998: PUSH
2999: LD_INT 1
3001: ARRAY
3002: PPUSH
3003: LD_INT 0
3005: PPUSH
3006: CALL_OW 49
// end ; end ;
3010: GO 2639
3012: POP
3013: POP
// for j = 1 to 3 do
3014: LD_ADDR_VAR 0 3
3018: PUSH
3019: DOUBLE
3020: LD_INT 1
3022: DEC
3023: ST_TO_ADDR
3024: LD_INT 3
3026: PUSH
3027: FOR_TO
3028: IFFALSE 3120
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_solar , control_computer , [ us_radar , us_rocket_launcher , us_gatling_gun ] [ j ] , 100 ) ;
3030: LD_INT 2
3032: PUSH
3033: LD_INT 3
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 2
3045: PPUSH
3046: CALL_OW 12
3050: ARRAY
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: LD_INT 3
3057: PPUSH
3058: LD_INT 11
3060: PUSH
3061: LD_INT 7
3063: PUSH
3064: LD_INT 4
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: LIST
3071: PUSH
3072: LD_VAR 0 3
3076: ARRAY
3077: PPUSH
3078: LD_INT 100
3080: PPUSH
3081: CALL 16875 0 5
// PlaceUnitArea ( CreateVehicle , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3085: CALL_OW 45
3089: PPUSH
3090: LD_EXP 12
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_VAR 0 2
3104: ARRAY
3105: ARRAY
3106: PUSH
3107: LD_INT 1
3109: ARRAY
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 49
// end ;
3118: GO 3027
3120: POP
3121: POP
// end ;
3122: GO 2233
3124: POP
3125: POP
// end ;
3126: LD_VAR 0 1
3130: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3131: LD_INT 0
3133: PPUSH
3134: PPUSH
3135: PPUSH
3136: PPUSH
3137: PPUSH
// if not multi_support then
3138: LD_EXP 23
3142: NOT
3143: IFFALSE 3147
// exit ;
3145: GO 3675
// result := [ ] ;
3147: LD_ADDR_VAR 0 1
3151: PUSH
3152: EMPTY
3153: ST_TO_ADDR
// for i = 1 to 8 do
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: DOUBLE
3160: LD_INT 1
3162: DEC
3163: ST_TO_ADDR
3164: LD_INT 8
3166: PUSH
3167: FOR_TO
3168: IFFALSE 3673
// begin if multi_sides [ i ] then
3170: LD_EXP 7
3174: PUSH
3175: LD_VAR 0 2
3179: ARRAY
3180: IFFALSE 3671
// begin tmp := [ ] ;
3182: LD_ADDR_VAR 0 5
3186: PUSH
3187: EMPTY
3188: ST_TO_ADDR
// if multi_support = 1 then
3189: LD_EXP 23
3193: PUSH
3194: LD_INT 1
3196: EQUAL
3197: IFFALSE 3365
// begin uc_side := i ;
3199: LD_ADDR_OWVAR 20
3203: PUSH
3204: LD_VAR 0 2
3208: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3209: LD_ADDR_OWVAR 21
3213: PUSH
3214: LD_EXP 9
3218: PUSH
3219: LD_VAR 0 2
3223: ARRAY
3224: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3225: LD_INT 3
3227: PPUSH
3228: LD_INT 1
3230: PPUSH
3231: LD_INT 3
3233: PPUSH
3234: LD_INT 11
3236: PPUSH
3237: LD_INT 40
3239: PPUSH
3240: CALL 16875 0 5
// tmp := tmp ^ CreateVehicle ;
3244: LD_ADDR_VAR 0 5
3248: PUSH
3249: LD_VAR 0 5
3253: PUSH
3254: CALL_OW 45
3258: ADD
3259: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_double_gun , 40 ) ;
3260: LD_INT 2
3262: PPUSH
3263: LD_INT 1
3265: PPUSH
3266: LD_INT 3
3268: PPUSH
3269: LD_INT 5
3271: PPUSH
3272: LD_INT 40
3274: PPUSH
3275: CALL 16875 0 5
// tmp := tmp ^ CreateVehicle ;
3279: LD_ADDR_VAR 0 5
3283: PUSH
3284: LD_VAR 0 5
3288: PUSH
3289: CALL_OW 45
3293: ADD
3294: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_gatling_gun , 40 ) ;
3295: LD_INT 2
3297: PPUSH
3298: LD_INT 3
3300: PPUSH
3301: LD_INT 3
3303: PPUSH
3304: LD_INT 4
3306: PPUSH
3307: LD_INT 40
3309: PPUSH
3310: CALL 16875 0 5
// tmp := tmp ^ CreateVehicle ;
3314: LD_ADDR_VAR 0 5
3318: PUSH
3319: LD_VAR 0 5
3323: PUSH
3324: CALL_OW 45
3328: ADD
3329: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_solar , control_computer , us_laser , 40 ) ;
3330: LD_INT 3
3332: PPUSH
3333: LD_INT 2
3335: PPUSH
3336: LD_INT 3
3338: PPUSH
3339: LD_INT 9
3341: PPUSH
3342: LD_INT 40
3344: PPUSH
3345: CALL 16875 0 5
// tmp := tmp ^ CreateVehicle ;
3349: LD_ADDR_VAR 0 5
3353: PUSH
3354: LD_VAR 0 5
3358: PUSH
3359: CALL_OW 45
3363: ADD
3364: ST_TO_ADDR
// end ; if multi_support = 2 then
3365: LD_EXP 23
3369: PUSH
3370: LD_INT 2
3372: EQUAL
3373: IFFALSE 3646
// begin uc_side := i ;
3375: LD_ADDR_OWVAR 20
3379: PUSH
3380: LD_VAR 0 2
3384: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3385: LD_ADDR_OWVAR 21
3389: PUSH
3390: LD_EXP 9
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3401: LD_INT 3
3403: PPUSH
3404: LD_INT 1
3406: PPUSH
3407: LD_INT 3
3409: PPUSH
3410: LD_INT 11
3412: PPUSH
3413: LD_INT 40
3415: PPUSH
3416: CALL 16875 0 5
// tmp := tmp ^ CreateVehicle ;
3420: LD_ADDR_VAR 0 5
3424: PUSH
3425: LD_VAR 0 5
3429: PUSH
3430: CALL_OW 45
3434: ADD
3435: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 40 ) ;
3436: LD_INT 3
3438: PPUSH
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 12
3447: PPUSH
3448: LD_INT 40
3450: PPUSH
3451: CALL 16875 0 5
// tmp := tmp ^ CreateVehicle ;
3455: LD_ADDR_VAR 0 5
3459: PUSH
3460: LD_VAR 0 5
3464: PUSH
3465: CALL_OW 45
3469: ADD
3470: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_double_gun , 40 ) ;
3471: LD_INT 2
3473: PPUSH
3474: LD_INT 3
3476: PPUSH
3477: LD_INT 3
3479: PPUSH
3480: LD_INT 5
3482: PPUSH
3483: LD_INT 40
3485: PPUSH
3486: CALL 16875 0 5
// tmp := tmp ^ CreateVehicle ;
3490: LD_ADDR_VAR 0 5
3494: PUSH
3495: LD_VAR 0 5
3499: PUSH
3500: CALL_OW 45
3504: ADD
3505: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3506: LD_INT 4
3508: PPUSH
3509: LD_INT 1
3511: PPUSH
3512: LD_INT 3
3514: PPUSH
3515: LD_INT 6
3517: PPUSH
3518: LD_INT 40
3520: PPUSH
3521: CALL 16875 0 5
// tmp := tmp ^ CreateVehicle ;
3525: LD_ADDR_VAR 0 5
3529: PUSH
3530: LD_VAR 0 5
3534: PUSH
3535: CALL_OW 45
3539: ADD
3540: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3541: LD_INT 2
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 3
3549: PPUSH
3550: LD_INT 9
3552: PPUSH
3553: LD_INT 40
3555: PPUSH
3556: CALL 16875 0 5
// tmp := tmp ^ CreateVehicle ;
3560: LD_ADDR_VAR 0 5
3564: PUSH
3565: LD_VAR 0 5
3569: PUSH
3570: CALL_OW 45
3574: ADD
3575: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3576: LD_INT 2
3578: PPUSH
3579: LD_INT 3
3581: PPUSH
3582: LD_INT 3
3584: PPUSH
3585: LD_INT 9
3587: PPUSH
3588: LD_INT 40
3590: PPUSH
3591: CALL 16875 0 5
// tmp := tmp ^ CreateVehicle ;
3595: LD_ADDR_VAR 0 5
3599: PUSH
3600: LD_VAR 0 5
3604: PUSH
3605: CALL_OW 45
3609: ADD
3610: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3611: LD_INT 4
3613: PPUSH
3614: LD_INT 1
3616: PPUSH
3617: LD_INT 3
3619: PPUSH
3620: LD_INT 6
3622: PPUSH
3623: LD_INT 40
3625: PPUSH
3626: CALL 16875 0 5
// tmp := tmp ^ CreateVehicle ;
3630: LD_ADDR_VAR 0 5
3634: PUSH
3635: LD_VAR 0 5
3639: PUSH
3640: CALL_OW 45
3644: ADD
3645: ST_TO_ADDR
// end ; result := Insert ( result , i , tmp ) ;
3646: LD_ADDR_VAR 0 1
3650: PUSH
3651: LD_VAR 0 1
3655: PPUSH
3656: LD_VAR 0 2
3660: PPUSH
3661: LD_VAR 0 5
3665: PPUSH
3666: CALL_OW 2
3670: ST_TO_ADDR
// end ; end ;
3671: GO 3167
3673: POP
3674: POP
// end ;
3675: LD_VAR 0 1
3679: RET
// export function Multiplayer_Start ( ) ; begin
3680: LD_INT 0
3682: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3683: CALL 2209 0 0
// Multiplayer_InitPointSystem ( ) ;
3687: CALL 4604 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3691: LD_INT 20
3693: PPUSH
3694: CALL 4780 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3698: LD_INT 150
3700: PPUSH
3701: CALL 4780 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3705: LD_INT 5
3707: PPUSH
3708: CALL 4780 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3712: LD_INT 40
3714: NEG
3715: PPUSH
3716: CALL 4780 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3720: LD_INT 200
3722: PPUSH
3723: CALL 4780 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3727: LD_INT 2
3729: PPUSH
3730: CALL 4780 0 1
// Multiplayer_SpawnArtifact ;
3734: CALL 5220 0 0
// if multi_support then
3738: LD_EXP 23
3742: IFFALSE 3754
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3744: LD_ADDR_EXP 27
3748: PUSH
3749: CALL 3131 0 0
3753: ST_TO_ADDR
// game := true ;
3754: LD_ADDR_EXP 2
3758: PUSH
3759: LD_INT 1
3761: ST_TO_ADDR
// if multi_sides [ your_side ] then
3762: LD_EXP 7
3766: PUSH
3767: LD_OWVAR 2
3771: ARRAY
3772: IFFALSE 3799
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3774: LD_INT 22
3776: PUSH
3777: LD_OWVAR 2
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PPUSH
3786: CALL_OW 69
3790: PUSH
3791: LD_INT 1
3793: ARRAY
3794: PPUSH
3795: CALL_OW 87
// end ;
3799: LD_VAR 0 1
3803: RET
// export function Multiplayer_End ( ) ; var i , j , tmp , reinforcements_arrive ; begin
3804: LD_INT 0
3806: PPUSH
3807: PPUSH
3808: PPUSH
3809: PPUSH
3810: PPUSH
// reinforcements_arrive := 0 ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_INT 0
3818: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3819: LD_INT 35
3821: PPUSH
3822: CALL_OW 67
// if tick > 10 10$00 and not multi_reinforcements_spawned and multi_support = 1 then
3826: LD_OWVAR 1
3830: PUSH
3831: LD_INT 21000
3833: GREATER
3834: PUSH
3835: LD_EXP 28
3839: NOT
3840: AND
3841: PUSH
3842: LD_EXP 23
3846: PUSH
3847: LD_INT 1
3849: EQUAL
3850: AND
3851: IFFALSE 4046
// begin multi_reinforcements_spawned := 1 ;
3853: LD_ADDR_EXP 28
3857: PUSH
3858: LD_INT 1
3860: ST_TO_ADDR
// for i = 1 to 8 do
3861: LD_ADDR_VAR 0 2
3865: PUSH
3866: DOUBLE
3867: LD_INT 1
3869: DEC
3870: ST_TO_ADDR
3871: LD_INT 8
3873: PUSH
3874: FOR_TO
3875: IFFALSE 4034
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
3877: LD_EXP 7
3881: PUSH
3882: LD_VAR 0 2
3886: ARRAY
3887: PUSH
3888: LD_EXP 25
3892: PUSH
3893: LD_VAR 0 2
3897: ARRAY
3898: NOT
3899: AND
3900: PUSH
3901: LD_EXP 27
3905: PUSH
3906: LD_VAR 0 2
3910: ARRAY
3911: AND
3912: IFFALSE 4032
// begin tmp := multi_reinforcements [ i ] ;
3914: LD_ADDR_VAR 0 4
3918: PUSH
3919: LD_EXP 27
3923: PUSH
3924: LD_VAR 0 2
3928: ARRAY
3929: ST_TO_ADDR
// for j = 1 to 4 do
3930: LD_ADDR_VAR 0 3
3934: PUSH
3935: DOUBLE
3936: LD_INT 1
3938: DEC
3939: ST_TO_ADDR
3940: LD_INT 4
3942: PUSH
3943: FOR_TO
3944: IFFALSE 4005
// begin PlaceUnitArea ( tmp [ j ] , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3946: LD_VAR 0 4
3950: PUSH
3951: LD_VAR 0 3
3955: ARRAY
3956: PPUSH
3957: LD_EXP 12
3961: PUSH
3962: LD_EXP 7
3966: PUSH
3967: LD_VAR 0 2
3971: ARRAY
3972: ARRAY
3973: PUSH
3974: LD_INT 2
3976: ARRAY
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 49
// tmp := Delete ( tmp , 1 ) ;
3985: LD_ADDR_VAR 0 4
3989: PUSH
3990: LD_VAR 0 4
3994: PPUSH
3995: LD_INT 1
3997: PPUSH
3998: CALL_OW 3
4002: ST_TO_ADDR
// end ;
4003: GO 3943
4005: POP
4006: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , tmp ) ;
4007: LD_ADDR_EXP 27
4011: PUSH
4012: LD_EXP 27
4016: PPUSH
4017: LD_VAR 0 2
4021: PPUSH
4022: LD_VAR 0 4
4026: PPUSH
4027: CALL_OW 1
4031: ST_TO_ADDR
// end ; end ;
4032: GO 3874
4034: POP
4035: POP
// reinforcements_arrive := tick ;
4036: LD_ADDR_VAR 0 5
4040: PUSH
4041: LD_OWVAR 1
4045: ST_TO_ADDR
// end ; if reinforcements_arrive + 10 10$00 < tick and multi_reinforcements_spawned = 1 and multi_support = 2 then
4046: LD_VAR 0 5
4050: PUSH
4051: LD_INT 21000
4053: PLUS
4054: PUSH
4055: LD_OWVAR 1
4059: LESS
4060: PUSH
4061: LD_EXP 28
4065: PUSH
4066: LD_INT 1
4068: EQUAL
4069: AND
4070: PUSH
4071: LD_EXP 23
4075: PUSH
4076: LD_INT 2
4078: EQUAL
4079: AND
4080: IFFALSE 4265
// begin multi_reinforcements_spawned := 2 ;
4082: LD_ADDR_EXP 28
4086: PUSH
4087: LD_INT 2
4089: ST_TO_ADDR
// for i = 1 to 8 do
4090: LD_ADDR_VAR 0 2
4094: PUSH
4095: DOUBLE
4096: LD_INT 1
4098: DEC
4099: ST_TO_ADDR
4100: LD_INT 8
4102: PUSH
4103: FOR_TO
4104: IFFALSE 4263
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
4106: LD_EXP 7
4110: PUSH
4111: LD_VAR 0 2
4115: ARRAY
4116: PUSH
4117: LD_EXP 25
4121: PUSH
4122: LD_VAR 0 2
4126: ARRAY
4127: NOT
4128: AND
4129: PUSH
4130: LD_EXP 27
4134: PUSH
4135: LD_VAR 0 2
4139: ARRAY
4140: AND
4141: IFFALSE 4261
// begin tmp := multi_reinforcements [ i ] ;
4143: LD_ADDR_VAR 0 4
4147: PUSH
4148: LD_EXP 27
4152: PUSH
4153: LD_VAR 0 2
4157: ARRAY
4158: ST_TO_ADDR
// for j = 1 to 3 do
4159: LD_ADDR_VAR 0 3
4163: PUSH
4164: DOUBLE
4165: LD_INT 1
4167: DEC
4168: ST_TO_ADDR
4169: LD_INT 3
4171: PUSH
4172: FOR_TO
4173: IFFALSE 4234
// begin PlaceUnitArea ( tmp [ j ] , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
4175: LD_VAR 0 4
4179: PUSH
4180: LD_VAR 0 3
4184: ARRAY
4185: PPUSH
4186: LD_EXP 12
4190: PUSH
4191: LD_EXP 7
4195: PUSH
4196: LD_VAR 0 2
4200: ARRAY
4201: ARRAY
4202: PUSH
4203: LD_INT 2
4205: ARRAY
4206: PPUSH
4207: LD_INT 0
4209: PPUSH
4210: CALL_OW 49
// tmp := Delete ( tmp , 1 ) ;
4214: LD_ADDR_VAR 0 4
4218: PUSH
4219: LD_VAR 0 4
4223: PPUSH
4224: LD_INT 1
4226: PPUSH
4227: CALL_OW 3
4231: ST_TO_ADDR
// end ;
4232: GO 4172
4234: POP
4235: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , tmp ) ;
4236: LD_ADDR_EXP 27
4240: PUSH
4241: LD_EXP 27
4245: PPUSH
4246: LD_VAR 0 2
4250: PPUSH
4251: LD_VAR 0 4
4255: PPUSH
4256: CALL_OW 1
4260: ST_TO_ADDR
// end ; end ;
4261: GO 4103
4263: POP
4264: POP
// end ; if not multi_custom_commanders then
4265: LD_EXP 16
4269: NOT
4270: IFFALSE 4383
// begin for i = 1 to 8 do
4272: LD_ADDR_VAR 0 2
4276: PUSH
4277: DOUBLE
4278: LD_INT 1
4280: DEC
4281: ST_TO_ADDR
4282: LD_INT 8
4284: PUSH
4285: FOR_TO
4286: IFFALSE 4357
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
4288: LD_INT 22
4290: PUSH
4291: LD_VAR 0 2
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: PPUSH
4300: CALL_OW 69
4304: PUSH
4305: LD_INT 0
4307: EQUAL
4308: PUSH
4309: LD_EXP 25
4313: PUSH
4314: LD_VAR 0 2
4318: ARRAY
4319: NOT
4320: AND
4321: IFFALSE 4355
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
4323: LD_ADDR_EXP 25
4327: PUSH
4328: LD_EXP 25
4332: PPUSH
4333: LD_VAR 0 2
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: CALL_OW 1
4345: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
4346: LD_VAR 0 2
4350: PPUSH
4351: CALL 4850 0 1
// end ; end ;
4355: GO 4285
4357: POP
4358: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4359: LD_EXP 25
4363: PPUSH
4364: CALL 14149 0 1
4368: PUSH
4369: LD_EXP 7
4373: PPUSH
4374: CALL 14149 0 1
4378: EQUAL
4379: IFFALSE 4383
// break ;
4381: GO 4418
// end ; until ( FilterAllUnits ( [ f_side , side_bot ] ) = 0 and game ) or not multi_commanders ;
4383: LD_INT 22
4385: PUSH
4386: LD_EXP 3
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PPUSH
4395: CALL_OW 69
4399: PUSH
4400: LD_INT 0
4402: EQUAL
4403: PUSH
4404: LD_EXP 2
4408: AND
4409: PUSH
4410: LD_EXP 24
4414: NOT
4415: OR
4416: IFFALSE 3819
// game := false ;
4418: LD_ADDR_EXP 2
4422: PUSH
4423: LD_INT 0
4425: ST_TO_ADDR
// for i = 1 to 8 do
4426: LD_ADDR_VAR 0 2
4430: PUSH
4431: DOUBLE
4432: LD_INT 1
4434: DEC
4435: ST_TO_ADDR
4436: LD_INT 8
4438: PUSH
4439: FOR_TO
4440: IFFALSE 4476
// begin if multi_sides [ i ] then
4442: LD_EXP 7
4446: PUSH
4447: LD_VAR 0 2
4451: ARRAY
4452: IFFALSE 4474
// SetMultiScore ( i , multi_points [ i ] ) ;
4454: LD_VAR 0 2
4458: PPUSH
4459: LD_EXP 29
4463: PUSH
4464: LD_VAR 0 2
4468: ARRAY
4469: PPUSH
4470: CALL_OW 506
// end ;
4474: GO 4439
4476: POP
4477: POP
// if multi_loosers [ your_side ] then
4478: LD_EXP 25
4482: PUSH
4483: LD_OWVAR 2
4487: ARRAY
4488: IFFALSE 4496
// YouLostInMultiplayer else
4490: CALL_OW 107
4494: GO 4500
// YouWinInMultiplayer ;
4496: CALL_OW 106
// end ;
4500: LD_VAR 0 1
4504: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4505: LD_INT 0
4507: PPUSH
4508: PPUSH
// result := [ #tick , tick ] ;
4509: LD_ADDR_VAR 0 1
4513: PUSH
4514: LD_STRING #tick
4516: PUSH
4517: LD_OWVAR 1
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: ST_TO_ADDR
// for i = 1 to 8 do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 8
4538: PUSH
4539: FOR_TO
4540: IFFALSE 4597
// begin if multi_sides [ i ] then
4542: LD_EXP 7
4546: PUSH
4547: LD_VAR 0 2
4551: ARRAY
4552: IFFALSE 4595
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4554: LD_ADDR_VAR 0 1
4558: PUSH
4559: LD_VAR 0 1
4563: PUSH
4564: LD_STRING #coop-points
4566: PUSH
4567: LD_VAR 0 2
4571: PUSH
4572: LD_VAR 0 2
4576: PUSH
4577: LD_EXP 29
4581: PUSH
4582: LD_VAR 0 2
4586: ARRAY
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: ADD
4594: ST_TO_ADDR
// end ; end ;
4595: GO 4539
4597: POP
4598: POP
// end ;
4599: LD_VAR 0 1
4603: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4604: LD_INT 0
4606: PPUSH
4607: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4608: LD_ADDR_EXP 29
4612: PUSH
4613: LD_INT 0
4615: PUSH
4616: LD_INT 0
4618: PUSH
4619: LD_INT 0
4621: PUSH
4622: LD_INT 0
4624: PUSH
4625: LD_INT 0
4627: PUSH
4628: LD_INT 0
4630: PUSH
4631: LD_INT 0
4633: PUSH
4634: LD_INT 0
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4647: LD_ADDR_EXP 30
4651: PUSH
4652: EMPTY
4653: ST_TO_ADDR
// end ;
4654: LD_VAR 0 1
4658: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4659: LD_INT 0
4661: PPUSH
// if not multi_points or not side or side > 8 then
4662: LD_EXP 29
4666: NOT
4667: PUSH
4668: LD_VAR 0 1
4672: NOT
4673: OR
4674: PUSH
4675: LD_VAR 0 1
4679: PUSH
4680: LD_INT 8
4682: GREATER
4683: OR
4684: IFFALSE 4688
// exit ;
4686: GO 4725
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4688: LD_ADDR_EXP 29
4692: PUSH
4693: LD_EXP 29
4697: PPUSH
4698: LD_VAR 0 1
4702: PPUSH
4703: LD_EXP 29
4707: PUSH
4708: LD_VAR 0 1
4712: ARRAY
4713: PUSH
4714: LD_VAR 0 2
4718: PLUS
4719: PPUSH
4720: CALL_OW 1
4724: ST_TO_ADDR
// end ;
4725: LD_VAR 0 3
4729: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4730: LD_INT 0
4732: PPUSH
// if not multi_points or not side or side > 8 then
4733: LD_EXP 29
4737: NOT
4738: PUSH
4739: LD_VAR 0 1
4743: NOT
4744: OR
4745: PUSH
4746: LD_VAR 0 1
4750: PUSH
4751: LD_INT 8
4753: GREATER
4754: OR
4755: IFFALSE 4759
// exit ;
4757: GO 4775
// result := multi_points [ side ] ;
4759: LD_ADDR_VAR 0 2
4763: PUSH
4764: LD_EXP 29
4768: PUSH
4769: LD_VAR 0 1
4773: ARRAY
4774: ST_TO_ADDR
// end ;
4775: LD_VAR 0 2
4779: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4780: LD_INT 0
4782: PPUSH
// multi_points_conditions := Insert ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4783: LD_ADDR_EXP 30
4787: PUSH
4788: LD_EXP 30
4792: PPUSH
4793: LD_EXP 30
4797: PUSH
4798: LD_INT 1
4800: PLUS
4801: PPUSH
4802: LD_VAR 0 1
4806: PPUSH
4807: CALL_OW 2
4811: ST_TO_ADDR
// end ;
4812: LD_VAR 0 2
4816: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4817: LD_INT 0
4819: PPUSH
// if not id then
4820: LD_VAR 0 1
4824: NOT
4825: IFFALSE 4829
// exit ;
4827: GO 4845
// result := multi_points_conditions [ id ] ;
4829: LD_ADDR_VAR 0 2
4833: PUSH
4834: LD_EXP 30
4838: PUSH
4839: LD_VAR 0 1
4843: ARRAY
4844: ST_TO_ADDR
// end ;
4845: LD_VAR 0 2
4849: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4850: LD_INT 0
4852: PPUSH
4853: PPUSH
4854: PPUSH
4855: PPUSH
4856: PPUSH
// players := [ ] ;
4857: LD_ADDR_VAR 0 3
4861: PUSH
4862: EMPTY
4863: ST_TO_ADDR
// for i = 1 to 8 do
4864: LD_ADDR_VAR 0 4
4868: PUSH
4869: DOUBLE
4870: LD_INT 1
4872: DEC
4873: ST_TO_ADDR
4874: LD_INT 8
4876: PUSH
4877: FOR_TO
4878: IFFALSE 4937
// begin if i = side then
4880: LD_VAR 0 4
4884: PUSH
4885: LD_VAR 0 1
4889: EQUAL
4890: IFFALSE 4894
// continue ;
4892: GO 4877
// if multi_sides [ i ] and not multi_loosers [ i ] then
4894: LD_EXP 7
4898: PUSH
4899: LD_VAR 0 4
4903: ARRAY
4904: PUSH
4905: LD_EXP 25
4909: PUSH
4910: LD_VAR 0 4
4914: ARRAY
4915: NOT
4916: AND
4917: IFFALSE 4935
// players := players ^ i ;
4919: LD_ADDR_VAR 0 3
4923: PUSH
4924: LD_VAR 0 3
4928: PUSH
4929: LD_VAR 0 4
4933: ADD
4934: ST_TO_ADDR
// end ;
4935: GO 4877
4937: POP
4938: POP
// if not players then
4939: LD_VAR 0 3
4943: NOT
4944: IFFALSE 4948
// exit ;
4946: GO 5215
// if players = 1 then
4948: LD_VAR 0 3
4952: PUSH
4953: LD_INT 1
4955: EQUAL
4956: IFFALSE 5017
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4958: LD_ADDR_VAR 0 4
4962: PUSH
4963: LD_INT 22
4965: PUSH
4966: LD_VAR 0 1
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PUSH
4975: LD_INT 51
4977: PUSH
4978: EMPTY
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PPUSH
4985: CALL_OW 69
4989: PUSH
4990: FOR_IN
4991: IFFALSE 5013
// SetSide ( i , players [ 1 ] ) ;
4993: LD_VAR 0 4
4997: PPUSH
4998: LD_VAR 0 3
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PPUSH
5007: CALL_OW 235
5011: GO 4990
5013: POP
5014: POP
// end else
5015: GO 5215
// begin j := 1 ;
5017: LD_ADDR_VAR 0 5
5021: PUSH
5022: LD_INT 1
5024: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
5025: LD_ADDR_VAR 0 4
5029: PUSH
5030: LD_INT 22
5032: PUSH
5033: LD_VAR 0 1
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: LD_INT 2
5044: PUSH
5045: LD_INT 21
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: LD_INT 51
5057: PUSH
5058: EMPTY
5059: LIST
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PUSH
5065: LD_INT 21
5067: PUSH
5068: LD_INT 2
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PPUSH
5084: CALL_OW 69
5088: PUSH
5089: FOR_IN
5090: IFFALSE 5213
// begin SetSide ( i , players [ j ] ) ;
5092: LD_VAR 0 4
5096: PPUSH
5097: LD_VAR 0 3
5101: PUSH
5102: LD_VAR 0 5
5106: ARRAY
5107: PPUSH
5108: CALL_OW 235
// if IsDrivenBy ( i ) then
5112: LD_VAR 0 4
5116: PPUSH
5117: CALL_OW 311
5121: IFFALSE 5148
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
5123: LD_VAR 0 4
5127: PPUSH
5128: CALL_OW 311
5132: PPUSH
5133: LD_VAR 0 3
5137: PUSH
5138: LD_VAR 0 5
5142: ARRAY
5143: PPUSH
5144: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
5148: LD_VAR 0 4
5152: PPUSH
5153: CALL_OW 310
5157: PPUSH
5158: CALL_OW 247
5162: PUSH
5163: LD_INT 3
5165: EQUAL
5166: IFFALSE 5177
// ComExitBuilding ( i ) ;
5168: LD_VAR 0 4
5172: PPUSH
5173: CALL_OW 122
// j := j + 1 ;
5177: LD_ADDR_VAR 0 5
5181: PUSH
5182: LD_VAR 0 5
5186: PUSH
5187: LD_INT 1
5189: PLUS
5190: ST_TO_ADDR
// if j > players then
5191: LD_VAR 0 5
5195: PUSH
5196: LD_VAR 0 3
5200: GREATER
5201: IFFALSE 5211
// j := 1 ;
5203: LD_ADDR_VAR 0 5
5207: PUSH
5208: LD_INT 1
5210: ST_TO_ADDR
// end ;
5211: GO 5089
5213: POP
5214: POP
// end ; end ;
5215: LD_VAR 0 2
5219: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
5220: LD_INT 0
5222: PPUSH
5223: PPUSH
5224: PPUSH
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: LD_INT 5
5232: PUSH
5233: LD_INT 10
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 120
5242: PUSH
5243: LD_INT 2
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: LD_INT 101
5252: PUSH
5253: LD_INT 8
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: PUSH
5260: LD_INT 27
5262: PUSH
5263: LD_INT 4
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: ST_TO_ADDR
// i := rand ( 1 , pos ) ;
5276: LD_ADDR_VAR 0 2
5280: PUSH
5281: LD_INT 1
5283: PPUSH
5284: LD_VAR 0 3
5288: PPUSH
5289: CALL_OW 12
5293: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
5294: LD_INT 4
5296: PPUSH
5297: LD_INT 5
5299: PPUSH
5300: LD_VAR 0 3
5304: PUSH
5305: LD_VAR 0 2
5309: ARRAY
5310: PUSH
5311: LD_INT 1
5313: ARRAY
5314: PPUSH
5315: LD_VAR 0 3
5319: PUSH
5320: LD_VAR 0 2
5324: ARRAY
5325: PUSH
5326: LD_INT 2
5328: ARRAY
5329: PPUSH
5330: LD_INT 0
5332: PPUSH
5333: CALL_OW 58
// end ;
5337: LD_VAR 0 1
5341: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5342: LD_INT 0
5344: PPUSH
// if not side or side > 8 then
5345: LD_VAR 0 1
5349: NOT
5350: PUSH
5351: LD_VAR 0 1
5355: PUSH
5356: LD_INT 8
5358: GREATER
5359: OR
5360: IFFALSE 5364
// exit ;
5362: GO 5381
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5364: LD_VAR 0 1
5368: PPUSH
5369: LD_INT 6
5371: PPUSH
5372: CALL 4817 0 1
5376: PPUSH
5377: CALL 4659 0 2
// end ;
5381: LD_VAR 0 2
5385: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5386: LD_INT 0
5388: PPUSH
// if not side or side > 8 then
5389: LD_VAR 0 1
5393: NOT
5394: PUSH
5395: LD_VAR 0 1
5399: PUSH
5400: LD_INT 8
5402: GREATER
5403: OR
5404: IFFALSE 5408
// exit ;
5406: GO 5425
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5408: LD_VAR 0 1
5412: PPUSH
5413: LD_INT 4
5415: PPUSH
5416: CALL 4817 0 1
5420: PPUSH
5421: CALL 4659 0 2
// end ;
5425: LD_VAR 0 2
5429: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5430: LD_INT 0
5432: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5433: LD_VAR 0 1
5437: NOT
5438: PUSH
5439: LD_VAR 0 1
5443: PUSH
5444: LD_INT 8
5446: GREATER
5447: OR
5448: PUSH
5449: LD_VAR 0 2
5453: PUSH
5454: LD_INT 2
5456: PUSH
5457: LD_INT 6
5459: PUSH
5460: LD_INT 36
5462: PUSH
5463: LD_INT 0
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: IN
5472: NOT
5473: OR
5474: IFFALSE 5478
// exit ;
5476: GO 5495
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5478: LD_VAR 0 1
5482: PPUSH
5483: LD_INT 3
5485: PPUSH
5486: CALL 4817 0 1
5490: PPUSH
5491: CALL 4659 0 2
// end ;
5495: LD_VAR 0 3
5499: RET
// export function MultiplayerEvent_UnitKilled ( un , points ) ; var side , side2 , last_shoot , nearest_unit , gained_points ; begin
5500: LD_INT 0
5502: PPUSH
5503: PPUSH
5504: PPUSH
5505: PPUSH
5506: PPUSH
5507: PPUSH
// if not un then
5508: LD_VAR 0 1
5512: NOT
5513: IFFALSE 5517
// exit ;
5515: GO 5741
// if not points then
5517: LD_VAR 0 2
5521: NOT
5522: IFFALSE 5539
// gained_points := Multiplayer_GetCondition ( 1 ) else
5524: LD_ADDR_VAR 0 8
5528: PUSH
5529: LD_INT 1
5531: PPUSH
5532: CALL 4817 0 1
5536: ST_TO_ADDR
5537: GO 5549
// gained_points := points ;
5539: LD_ADDR_VAR 0 8
5543: PUSH
5544: LD_VAR 0 2
5548: ST_TO_ADDR
// last_shoot := SideShoot ( un ) ;
5549: LD_ADDR_VAR 0 6
5553: PUSH
5554: LD_VAR 0 1
5558: PPUSH
5559: CALL_OW 503
5563: ST_TO_ADDR
// if last_shoot > - 1 then
5564: LD_VAR 0 6
5568: PUSH
5569: LD_INT 1
5571: NEG
5572: GREATER
5573: IFFALSE 5585
// begin side := last_shoot ;
5575: LD_ADDR_VAR 0 4
5579: PUSH
5580: LD_VAR 0 6
5584: ST_TO_ADDR
// end ; nearest_unit := NearestUnitToUnit ( all_units diff FilterAllUnits ( [ f_side , GetSide ( un ) ] ) , un ) ;
5585: LD_ADDR_VAR 0 7
5589: PUSH
5590: LD_OWVAR 3
5594: PUSH
5595: LD_INT 22
5597: PUSH
5598: LD_VAR 0 1
5602: PPUSH
5603: CALL_OW 255
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: PPUSH
5612: CALL_OW 69
5616: DIFF
5617: PPUSH
5618: LD_VAR 0 1
5622: PPUSH
5623: CALL_OW 74
5627: ST_TO_ADDR
// if nearest_unit then
5628: LD_VAR 0 7
5632: IFFALSE 5649
// side2 := GetSide ( nearest_unit ) ;
5634: LD_ADDR_VAR 0 5
5638: PUSH
5639: LD_VAR 0 7
5643: PPUSH
5644: CALL_OW 255
5648: ST_TO_ADDR
// if not side and not side2 then
5649: LD_VAR 0 4
5653: NOT
5654: PUSH
5655: LD_VAR 0 5
5659: NOT
5660: AND
5661: IFFALSE 5665
// exit ;
5663: GO 5741
// if side = side2 then
5665: LD_VAR 0 4
5669: PUSH
5670: LD_VAR 0 5
5674: EQUAL
5675: IFFALSE 5693
// Multiplayer_AddPoints ( side , gained_points ) else
5677: LD_VAR 0 4
5681: PPUSH
5682: LD_VAR 0 8
5686: PPUSH
5687: CALL 4659 0 2
5691: GO 5741
// begin if side then
5693: LD_VAR 0 4
5697: IFFALSE 5717
// Multiplayer_AddPoints ( side , gained_points div 2 ) ;
5699: LD_VAR 0 4
5703: PPUSH
5704: LD_VAR 0 8
5708: PUSH
5709: LD_INT 2
5711: DIV
5712: PPUSH
5713: CALL 4659 0 2
// if side2 then
5717: LD_VAR 0 5
5721: IFFALSE 5741
// Multiplayer_AddPoints ( side2 , gained_points div 2 ) ;
5723: LD_VAR 0 5
5727: PPUSH
5728: LD_VAR 0 8
5732: PUSH
5733: LD_INT 2
5735: DIV
5736: PPUSH
5737: CALL 4659 0 2
// end ; end ;
5741: LD_VAR 0 3
5745: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5746: LD_INT 0
5748: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5749: LD_VAR 0 1
5753: PPUSH
5754: LD_INT 2
5756: PPUSH
5757: CALL 4817 0 1
5761: PPUSH
5762: CALL 4659 0 2
// end ; end_of_file
5766: LD_VAR 0 2
5770: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , techs ; begin
5771: LD_INT 0
5773: PPUSH
5774: PPUSH
5775: PPUSH
5776: PPUSH
5777: PPUSH
5778: PPUSH
5779: PPUSH
5780: PPUSH
5781: PPUSH
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
5782: LD_ADDR_VAR 0 9
5786: PUSH
5787: LD_INT 22
5789: PUSH
5790: LD_INT 2
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: PPUSH
5797: CALL_OW 69
5801: ST_TO_ADDR
// side_bot := side ;
5802: LD_ADDR_EXP 3
5806: PUSH
5807: LD_VAR 0 1
5811: ST_TO_ADDR
// if tmp and side <> 2 then
5812: LD_VAR 0 9
5816: PUSH
5817: LD_VAR 0 1
5821: PUSH
5822: LD_INT 2
5824: NONEQUAL
5825: AND
5826: IFFALSE 5859
// for i in tmp do
5828: LD_ADDR_VAR 0 3
5832: PUSH
5833: LD_VAR 0 9
5837: PUSH
5838: FOR_IN
5839: IFFALSE 5857
// SetSide ( i , side ) ;
5841: LD_VAR 0 3
5845: PPUSH
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 235
5855: GO 5838
5857: POP
5858: POP
// techs := [ tech_ApeAgres , tech_ApeBrain , tech_ApeNeural , tech_StimDrugs , tech_Bio1 , tech_Bio2 , tech_Weap3 , tech_RemCharge , tech_rocket , tech_SibEng , 72 , tech_Sib2 ] ;
5859: LD_ADDR_VAR 0 10
5863: PUSH
5864: LD_INT 11
5866: PUSH
5867: LD_INT 4
5869: PUSH
5870: LD_INT 3
5872: PUSH
5873: LD_INT 5
5875: PUSH
5876: LD_INT 66
5878: PUSH
5879: LD_INT 67
5881: PUSH
5882: LD_INT 53
5884: PUSH
5885: LD_INT 18
5887: PUSH
5888: LD_INT 40
5890: PUSH
5891: LD_INT 22
5893: PUSH
5894: LD_INT 72
5896: PUSH
5897: LD_INT 55
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: ST_TO_ADDR
// for i in techs do
5914: LD_ADDR_VAR 0 3
5918: PUSH
5919: LD_VAR 0 10
5923: PUSH
5924: FOR_IN
5925: IFFALSE 5946
// SetTech ( i , side , state_researched ) ;
5927: LD_VAR 0 3
5931: PPUSH
5932: LD_VAR 0 1
5936: PPUSH
5937: LD_INT 2
5939: PPUSH
5940: CALL_OW 322
5944: GO 5924
5946: POP
5947: POP
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
5948: LD_ADDR_VAR 0 8
5952: PUSH
5953: LD_INT 6
5955: PUSH
5956: LD_INT 7
5958: PUSH
5959: LD_INT 8
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: PUSH
5967: LD_OWVAR 67
5971: ARRAY
5972: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
5973: LD_INT 69
5975: PUSH
5976: EMPTY
5977: LIST
5978: PPUSH
5979: LD_INT 141
5981: PPUSH
5982: CALL_OW 169
// Wait ( 1 ) ;
5986: LD_INT 1
5988: PPUSH
5989: CALL_OW 67
// uc_side := side ;
5993: LD_ADDR_OWVAR 20
5997: PUSH
5998: LD_VAR 0 1
6002: ST_TO_ADDR
// uc_nation := 2 ;
6003: LD_ADDR_OWVAR 21
6007: PUSH
6008: LD_INT 2
6010: ST_TO_ADDR
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 5000 , 1000 , 300 ] , [ - 1 , 6 , - 1 , 4 ] ) ;
6011: LD_ADDR_EXP 33
6015: PUSH
6016: LD_INT 94
6018: PPUSH
6019: LD_STRING dammam
6021: PPUSH
6022: NOP4
6026: PPUSH
6027: LD_INT 5000
6029: PUSH
6030: LD_INT 1000
6032: PUSH
6033: LD_INT 300
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: LIST
6040: PPUSH
6041: LD_INT 1
6043: NEG
6044: PUSH
6045: LD_INT 6
6047: PUSH
6048: LD_INT 1
6050: NEG
6051: PUSH
6052: LD_INT 4
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: PPUSH
6061: NOP4
6065: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
6066: NOP4
6070: PUSH
6071: NOP4
6075: PUSH
6076: LD_INT 122
6078: PPUSH
6079: LD_STRING 
6081: PPUSH
6082: NOP4
6086: PPUSH
6087: LD_INT 100
6089: PUSH
6090: LD_INT 60
6092: PUSH
6093: LD_INT 0
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: LIST
6100: PPUSH
6101: LD_INT 1
6103: NEG
6104: PUSH
6105: LD_INT 4
6107: PUSH
6108: LD_INT 0
6110: PUSH
6111: LD_INT 0
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: PPUSH
6120: NOP4
6124: ADD
6125: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 3000 , 1000 , 10 ] , [ - 1 , 5 , 5 , 2 ] ) ;
6126: NOP4
6130: PUSH
6131: LD_INT 45
6133: PPUSH
6134: LD_STRING jeddah
6136: PPUSH
6137: NOP4
6141: PPUSH
6142: LD_INT 3000
6144: PUSH
6145: LD_INT 1000
6147: PUSH
6148: LD_INT 10
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: LIST
6155: PPUSH
6156: LD_INT 1
6158: NEG
6159: PUSH
6160: LD_INT 5
6162: PUSH
6163: LD_INT 5
6165: PUSH
6166: LD_INT 2
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: PPUSH
6175: NOP4
6179: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 600 , 250 , 0 ] , [ - 1 , 3 , 5 , 1 ] ) ;
6180: NOP4
6184: PUSH
6185: LD_INT 7
6187: PPUSH
6188: LD_STRING riyadh
6190: PPUSH
6191: NOP4
6195: PPUSH
6196: LD_INT 600
6198: PUSH
6199: LD_INT 250
6201: PUSH
6202: LD_INT 0
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: LIST
6209: PPUSH
6210: LD_INT 1
6212: NEG
6213: PUSH
6214: LD_INT 3
6216: PUSH
6217: LD_INT 5
6219: PUSH
6220: LD_INT 1
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: PPUSH
6229: NOP4
6233: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 150 , 0 ] , [ - 1 , 3 , 5 , 2 ] ) ;
6234: NOP4
6238: PUSH
6239: LD_INT 69
6241: PPUSH
6242: LD_STRING 
6244: PPUSH
6245: NOP4
6249: PPUSH
6250: LD_INT 500
6252: PUSH
6253: LD_INT 150
6255: PUSH
6256: LD_INT 0
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: PPUSH
6264: LD_INT 1
6266: NEG
6267: PUSH
6268: LD_INT 3
6270: PUSH
6271: LD_INT 5
6273: PUSH
6274: LD_INT 2
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: PPUSH
6283: NOP4
6287: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east , ar_force_south ] ;
6288: NOP4
6292: PUSH
6293: NOP4
6297: PUSH
6298: NOP4
6302: PUSH
6303: NOP4
6307: PUSH
6308: NOP4
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6319: LD_ADDR_OWVAR 37
6323: PUSH
6324: LD_INT 14
6326: ST_TO_ADDR
// vc_engine := engine_siberite ;
6327: LD_ADDR_OWVAR 39
6331: PUSH
6332: LD_INT 3
6334: ST_TO_ADDR
// vc_control := control_manual ;
6335: LD_ADDR_OWVAR 38
6339: PUSH
6340: LD_INT 1
6342: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
6343: LD_ADDR_OWVAR 40
6347: PUSH
6348: LD_INT 31
6350: ST_TO_ADDR
// for i = 1 to 5 do
6351: NOP4
6355: PUSH
6356: DOUBLE
6357: LD_INT 1
6359: DEC
6360: ST_TO_ADDR
6361: LD_INT 5
6363: PUSH
6364: FOR_TO
6365: IFFALSE 6634
// begin xy := [ [ 156 , 15 ] , [ 12 , 7 ] ] [ i mod 2 + 1 ] ;
6367: NOP4
6371: PUSH
6372: LD_INT 156
6374: PUSH
6375: LD_INT 15
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 12
6384: PUSH
6385: LD_INT 7
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: NOP4
6400: PUSH
6401: LD_INT 2
6403: MOD
6404: PUSH
6405: LD_INT 1
6407: PLUS
6408: ARRAY
6409: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
6410: LD_INT 0
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: NOP4
6420: PPUSH
6421: NOP4
// un := CreateVehicle ;
6425: NOP4
6429: PUSH
6430: NOP4
6434: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6435: NOP4
6439: PPUSH
6440: LD_INT 0
6442: PPUSH
6443: LD_INT 5
6445: PPUSH
6446: NOP4
6450: PPUSH
6451: NOP4
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
6455: NOP4
6459: PPUSH
6460: NOP4
6464: PUSH
6465: LD_INT 1
6467: ARRAY
6468: PPUSH
6469: NOP4
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: PPUSH
6478: LD_INT 6
6480: PPUSH
6481: LD_INT 0
6483: PPUSH
6484: NOP4
// un2 := CreateHuman ;
6488: NOP4
6492: PUSH
6493: NOP4
6497: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
6498: NOP4
6502: PPUSH
6503: NOP4
6507: PPUSH
6508: NOP4
// mc_bases := ReplaceIn ( mc_bases , [ i mod 2 + 1 , mc_bases [ i mod 2 + 1 ] + 1 ] , un ) ;
6512: NOP4
6516: PUSH
6517: NOP4
6521: PPUSH
6522: NOP4
6526: PUSH
6527: LD_INT 2
6529: MOD
6530: PUSH
6531: LD_INT 1
6533: PLUS
6534: PUSH
6535: NOP4
6539: PUSH
6540: NOP4
6544: PUSH
6545: LD_INT 2
6547: MOD
6548: PUSH
6549: LD_INT 1
6551: PLUS
6552: ARRAY
6553: PUSH
6554: LD_INT 1
6556: PLUS
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PPUSH
6562: NOP4
6566: PPUSH
6567: NOP4
6571: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i mod 2 + 1 , mc_bases [ i mod 2 + 1 ] + 1 ] , un2 ) ;
6572: NOP4
6576: PUSH
6577: NOP4
6581: PPUSH
6582: NOP4
6586: PUSH
6587: LD_INT 2
6589: MOD
6590: PUSH
6591: LD_INT 1
6593: PLUS
6594: PUSH
6595: NOP4
6599: PUSH
6600: NOP4
6604: PUSH
6605: LD_INT 2
6607: MOD
6608: PUSH
6609: LD_INT 1
6611: PLUS
6612: ARRAY
6613: PUSH
6614: LD_INT 1
6616: PLUS
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PPUSH
6622: NOP4
6626: PPUSH
6627: NOP4
6631: ST_TO_ADDR
// end ;
6632: GO 6364
6634: POP
6635: POP
// for i in FilterAllUnits ( [ [ f_side , side_bot ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
6636: NOP4
6640: PUSH
6641: LD_INT 22
6643: PUSH
6644: NOP4
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: LD_INT 30
6655: PUSH
6656: LD_INT 31
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 58
6665: PUSH
6666: EMPTY
6667: LIST
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: LIST
6673: PPUSH
6674: NOP4
6678: PUSH
6679: FOR_IN
6680: IFFALSE 6805
// begin if GetBase ( i ) then
6682: NOP4
6686: PPUSH
6687: NOP4
6691: IFFALSE 6695
// continue ;
6693: GO 6679
// d := GetDir ( i ) ;
6695: NOP4
6699: PUSH
6700: NOP4
6704: PPUSH
6705: NOP4
6709: ST_TO_ADDR
// if d < 3 then
6710: NOP4
6714: PUSH
6715: LD_INT 3
6717: LESS
6718: IFFALSE 6736
// d := d + 3 else
6720: NOP4
6724: PUSH
6725: NOP4
6729: PUSH
6730: LD_INT 3
6732: PLUS
6733: ST_TO_ADDR
6734: GO 6750
// d := d - 3 ;
6736: NOP4
6740: PUSH
6741: NOP4
6745: PUSH
6746: LD_INT 3
6748: MINUS
6749: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
6750: LD_INT 0
6752: PPUSH
6753: LD_INT 8
6755: PPUSH
6756: NOP4
6760: PPUSH
6761: NOP4
// un := CreateHuman ;
6765: NOP4
6769: PUSH
6770: NOP4
6774: ST_TO_ADDR
// SetDir ( un , d ) ;
6775: NOP4
6779: PPUSH
6780: NOP4
6784: PPUSH
6785: NOP4
// PlaceHumanInUnit ( un , i ) ;
6789: NOP4
6793: PPUSH
6794: NOP4
6798: PPUSH
6799: NOP4
// end ;
6803: GO 6679
6805: POP
6806: POP
// ar_force_tmp := [ ] ;
6807: NOP4
6811: PUSH
6812: EMPTY
6813: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
6814: LD_INT 1
6816: PPUSH
6817: LD_INT 1
6819: PPUSH
6820: NOP4
6824: PPUSH
6825: NOP4
// hc_gallery := SecondCharsGal ;
6829: LD_ADDR_OWVAR 33
6833: PUSH
6834: LD_STRING SecondCharsGal
6836: ST_TO_ADDR
// hc_face_number := 4 ;
6837: LD_ADDR_OWVAR 34
6841: PUSH
6842: LD_INT 4
6844: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
6845: NOP4
6849: PUSH
6850: NOP4
6854: PPUSH
6855: LD_INT 1
6857: PPUSH
6858: NOP4
6862: PPUSH
6863: NOP4
6867: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6868: LD_INT 2
6870: PPUSH
6871: LD_INT 4
6873: PPUSH
6874: NOP4
6878: PPUSH
6879: NOP4
// hc_gallery := SecondCharsGal ;
6883: LD_ADDR_OWVAR 33
6887: PUSH
6888: LD_STRING SecondCharsGal
6890: ST_TO_ADDR
// hc_face_number := 15 ;
6891: LD_ADDR_OWVAR 34
6895: PUSH
6896: LD_INT 15
6898: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
6899: NOP4
6903: PUSH
6904: NOP4
6908: PPUSH
6909: LD_INT 2
6911: PPUSH
6912: NOP4
6916: PPUSH
6917: NOP4
6921: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6922: LD_INT 2
6924: PPUSH
6925: LD_INT 4
6927: PPUSH
6928: NOP4
6932: PPUSH
6933: NOP4
// hc_gallery :=  ;
6937: LD_ADDR_OWVAR 33
6941: PUSH
6942: LD_STRING 
6944: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
6945: NOP4
6949: PUSH
6950: NOP4
6954: PPUSH
6955: LD_INT 3
6957: PPUSH
6958: NOP4
6962: PPUSH
6963: NOP4
6967: ST_TO_ADDR
// hc_sex := sex_male ;
6968: LD_ADDR_OWVAR 27
6972: PUSH
6973: LD_INT 1
6975: ST_TO_ADDR
// hc_class = 11 ;
6976: LD_ADDR_OWVAR 28
6980: PUSH
6981: LD_INT 11
6983: ST_TO_ADDR
// hc_gallery = sandar ;
6984: LD_ADDR_OWVAR 33
6988: PUSH
6989: LD_STRING sandar
6991: ST_TO_ADDR
// hc_face_number = 33 ;
6992: LD_ADDR_OWVAR 34
6996: PUSH
6997: LD_INT 33
6999: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
7000: LD_ADDR_OWVAR 26
7004: PUSH
7005: LD_STRING Thabit Muhair Saliba
7007: ST_TO_ADDR
// hc_skills = [ 5 , 5 , 3 , 3 ] ;
7008: LD_ADDR_OWVAR 31
7012: PUSH
7013: LD_INT 5
7015: PUSH
7016: LD_INT 5
7018: PUSH
7019: LD_INT 3
7021: PUSH
7022: LD_INT 3
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: ST_TO_ADDR
// Saliba = CreateHuman ;
7031: NOP4
7035: PUSH
7036: NOP4
7040: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
7041: NOP4
7045: PPUSH
7046: LD_INT 7
7048: PPUSH
7049: NOP4
// hc_name := Dietrich Gensher ;
7053: LD_ADDR_OWVAR 26
7057: PUSH
7058: LD_STRING Dietrich Gensher
7060: ST_TO_ADDR
// hc_class := 1 ;
7061: LD_ADDR_OWVAR 28
7065: PUSH
7066: LD_INT 1
7068: ST_TO_ADDR
// hc_gallery := sandar ;
7069: LD_ADDR_OWVAR 33
7073: PUSH
7074: LD_STRING sandar
7076: ST_TO_ADDR
// hc_face_number := 2 ;
7077: LD_ADDR_OWVAR 34
7081: PUSH
7082: LD_INT 2
7084: ST_TO_ADDR
// hc_skills := [ 10 , 6 , 5 , 4 ] ;
7085: LD_ADDR_OWVAR 31
7089: PUSH
7090: LD_INT 10
7092: PUSH
7093: LD_INT 6
7095: PUSH
7096: LD_INT 5
7098: PUSH
7099: LD_INT 4
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: ST_TO_ADDR
// Gensher := CreateHuman ;
7108: NOP4
7112: PUSH
7113: NOP4
7117: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
7118: NOP4
7122: PPUSH
7123: LD_INT 94
7125: PPUSH
7126: NOP4
// InitHc ;
7130: NOP4
// ar_defenders_tmp := [ [ ] , [ ] , [ ] , [ ] ] ;
7134: NOP4
7138: PUSH
7139: EMPTY
7140: PUSH
7141: EMPTY
7142: PUSH
7143: EMPTY
7144: PUSH
7145: EMPTY
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
7153: NOP4
7157: PUSH
7158: DOUBLE
7159: LD_INT 1
7161: DEC
7162: ST_TO_ADDR
7163: LD_INT 3
7165: PUSH
7166: LD_INT 3
7168: PUSH
7169: LD_INT 4
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: LIST
7176: PUSH
7177: NOP4
7181: ARRAY
7182: PUSH
7183: FOR_TO
7184: IFFALSE 7402
// for i = 1 to 4 do
7186: NOP4
7190: PUSH
7191: DOUBLE
7192: LD_INT 1
7194: DEC
7195: ST_TO_ADDR
7196: LD_INT 4
7198: PUSH
7199: FOR_TO
7200: IFFALSE 7398
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
7202: LD_INT 14
7204: PPUSH
7205: LD_INT 3
7207: PUSH
7208: LD_INT 2
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 1
7217: PPUSH
7218: LD_INT 2
7220: PPUSH
7221: NOP4
7225: ARRAY
7226: PPUSH
7227: LD_INT 1
7229: PUSH
7230: LD_INT 5
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 1
7239: PPUSH
7240: LD_INT 2
7242: PPUSH
7243: NOP4
7247: ARRAY
7248: PPUSH
7249: LD_INT 25
7251: PUSH
7252: LD_INT 27
7254: PUSH
7255: LD_INT 26
7257: PUSH
7258: LD_INT 28
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 1
7269: PPUSH
7270: LD_INT 4
7272: PPUSH
7273: NOP4
7277: ARRAY
7278: PPUSH
7279: LD_INT 100
7281: PPUSH
7282: NOP4
// un := CreateVehicle ;
7286: NOP4
7290: PUSH
7291: NOP4
7295: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
7296: NOP4
7300: PUSH
7301: NOP4
7305: PPUSH
7306: NOP4
7310: PUSH
7311: NOP4
7315: PUSH
7316: NOP4
7320: ARRAY
7321: PUSH
7322: LD_INT 1
7324: PLUS
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PPUSH
7330: NOP4
7334: PPUSH
7335: NOP4
7339: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
7340: NOP4
7344: PPUSH
7345: LD_INT 0
7347: PPUSH
7348: LD_INT 5
7350: PPUSH
7351: NOP4
7355: PPUSH
7356: NOP4
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east , parking_south ] [ i ] , false ) ;
7360: NOP4
7364: PPUSH
7365: LD_INT 20
7367: PUSH
7368: LD_INT 21
7370: PUSH
7371: LD_INT 22
7373: PUSH
7374: LD_INT 24
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PUSH
7383: NOP4
7387: ARRAY
7388: PPUSH
7389: LD_INT 0
7391: PPUSH
7392: NOP4
// end ;
7396: GO 7199
7398: POP
7399: POP
7400: GO 7183
7402: POP
7403: POP
// InitHc ;
7404: NOP4
// end ;
7408: LD_VAR 0 2
7412: RET
// every 13 13$00 + 10 10$00 trigger IsOk ( ar_dep_n ) and GetSide ( ar_dep_n ) = side_bot do var i , t , x , base , tmp , coords , flags , danger , target , _target ;
7413: LD_INT 94
7415: PPUSH
7416: NOP4
7420: PUSH
7421: LD_INT 94
7423: PPUSH
7424: NOP4
7428: PUSH
7429: NOP4
7433: EQUAL
7434: AND
7435: IFFALSE 8144
7437: GO 7439
7439: DISABLE
7440: LD_INT 0
7442: PPUSH
7443: PPUSH
7444: PPUSH
7445: PPUSH
7446: PPUSH
7447: PPUSH
7448: PPUSH
7449: PPUSH
7450: PPUSH
7451: PPUSH
// begin enable ;
7452: ENABLE
// base := 1 ;
7453: NOP4
7457: PUSH
7458: LD_INT 1
7460: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
7461: NOP4
7465: PUSH
7466: LD_INT 0
7468: PUSH
7469: LD_INT 0
7471: PUSH
7472: LD_INT 0
7474: PUSH
7475: LD_INT 0
7477: PUSH
7478: LD_INT 1
7480: PUSH
7481: LD_INT 0
7483: PUSH
7484: LD_INT 0
7486: PUSH
7487: LD_INT 0
7489: PUSH
7490: LD_INT 1
7492: PUSH
7493: LD_INT 0
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: ST_TO_ADDR
// coords := [ [ 28 , 14 ] , [ 107 , 119 ] , [ 127 , 97 ] , [ 185 , 127 ] ] ;
7508: NOP4
7512: PUSH
7513: LD_INT 28
7515: PUSH
7516: LD_INT 14
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 107
7525: PUSH
7526: LD_INT 119
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 127
7535: PUSH
7536: LD_INT 97
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: LD_INT 185
7545: PUSH
7546: LD_INT 127
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: ST_TO_ADDR
// target := 0 ;
7559: NOP4
7563: PUSH
7564: LD_INT 0
7566: ST_TO_ADDR
// x := 0 ;
7567: NOP4
7571: PUSH
7572: LD_INT 0
7574: ST_TO_ADDR
// tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
7575: NOP4
7579: PUSH
7580: LD_INT 14
7582: PUSH
7583: LD_INT 1
7585: PUSH
7586: LD_INT 2
7588: PUSH
7589: LD_INT 28
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 14
7600: PUSH
7601: LD_INT 1
7603: PUSH
7604: LD_INT 2
7606: PUSH
7607: LD_INT 25
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 14
7618: PUSH
7619: LD_INT 1
7621: PUSH
7622: LD_INT 2
7624: PUSH
7625: LD_INT 28
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: PUSH
7634: LD_INT 14
7636: PUSH
7637: LD_INT 1
7639: PUSH
7640: LD_INT 2
7642: PUSH
7643: LD_INT 29
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: ST_TO_ADDR
// if Difficulty > 1 then
7658: NOP4
7662: PUSH
7663: LD_INT 1
7665: GREATER
7666: IFFALSE 7763
// for i = 1 to Difficulty + 2 do
7668: NOP4
7672: PUSH
7673: DOUBLE
7674: LD_INT 1
7676: DEC
7677: ST_TO_ADDR
7678: NOP4
7682: PUSH
7683: LD_INT 2
7685: PLUS
7686: PUSH
7687: FOR_TO
7688: IFFALSE 7761
// tmp := Insert ( tmp , tmp + 1 , [ ar_half_tracked , engine_combustion , control_remote , [ ar_rocket_launcher , ar_gun , ar_gun , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ) ;
7690: NOP4
7694: PUSH
7695: NOP4
7699: PPUSH
7700: NOP4
7704: PUSH
7705: LD_INT 1
7707: PLUS
7708: PPUSH
7709: LD_INT 14
7711: PUSH
7712: LD_INT 1
7714: PUSH
7715: LD_INT 2
7717: PUSH
7718: LD_INT 28
7720: PUSH
7721: LD_INT 27
7723: PUSH
7724: LD_INT 27
7726: PUSH
7727: LD_INT 29
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: PUSH
7736: LD_INT 1
7738: PPUSH
7739: LD_INT 4
7741: PPUSH
7742: NOP4
7746: ARRAY
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: PPUSH
7754: NOP4
7758: ST_TO_ADDR
7759: GO 7687
7761: POP
7762: POP
// MC_SetProduceList ( base , tmp ) ;
7763: NOP4
7767: PPUSH
7768: NOP4
7772: PPUSH
7773: NOP4
// repeat wait ( 0 0$1 ) ;
7777: LD_INT 35
7779: PPUSH
7780: NOP4
// until MC_GetProduceList ( base ) = 0 ;
7784: NOP4
7788: PPUSH
7789: NOP4
7793: PUSH
7794: LD_INT 0
7796: EQUAL
7797: IFFALSE 7777
// wait ( 0 0$10 ) ;
7799: LD_INT 350
7801: PPUSH
7802: NOP4
// for i = 1 to coords do
7806: NOP4
7810: PUSH
7811: DOUBLE
7812: LD_INT 1
7814: DEC
7815: ST_TO_ADDR
7816: NOP4
7820: PUSH
7821: FOR_TO
7822: IFFALSE 7910
// begin t := DangerAtRangeXY ( side_bot , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] , 35 ) [ 4 ] ;
7824: NOP4
7828: PUSH
7829: NOP4
7833: PPUSH
7834: NOP4
7838: PUSH
7839: NOP4
7843: ARRAY
7844: PUSH
7845: LD_INT 1
7847: ARRAY
7848: PPUSH
7849: NOP4
7853: PUSH
7854: NOP4
7858: ARRAY
7859: PUSH
7860: LD_INT 2
7862: ARRAY
7863: PPUSH
7864: LD_INT 35
7866: PPUSH
7867: NOP4
7871: PUSH
7872: LD_INT 4
7874: ARRAY
7875: ST_TO_ADDR
// if t > x then
7876: NOP4
7880: PUSH
7881: NOP4
7885: GREATER
7886: IFFALSE 7908
// begin x := t ;
7888: NOP4
7892: PUSH
7893: NOP4
7897: ST_TO_ADDR
// target := i ;
7898: NOP4
7902: PUSH
7903: NOP4
7907: ST_TO_ADDR
// end ; end ;
7908: GO 7821
7910: POP
7911: POP
// case target of 1 :
7912: NOP4
7916: PUSH
7917: LD_INT 1
7919: DOUBLE
7920: EQUAL
7921: IFTRUE 7925
7923: GO 7957
7925: POP
// _target := [ [ 60 , 8 ] , [ 28 , 15 ] ] ; 2 :
7926: NOP4
7930: PUSH
7931: LD_INT 60
7933: PUSH
7934: LD_INT 8
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: LD_INT 28
7943: PUSH
7944: LD_INT 15
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: ST_TO_ADDR
7955: GO 8078
7957: LD_INT 2
7959: DOUBLE
7960: EQUAL
7961: IFTRUE 7965
7963: GO 7997
7965: POP
// _target := [ [ 52 , 11 ] , [ 76 , 90 ] ] ; 3 :
7966: NOP4
7970: PUSH
7971: LD_INT 52
7973: PUSH
7974: LD_INT 11
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 76
7983: PUSH
7984: LD_INT 90
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: ST_TO_ADDR
7995: GO 8078
7997: LD_INT 3
7999: DOUBLE
8000: EQUAL
8001: IFTRUE 8005
8003: GO 8037
8005: POP
// _target := [ [ 129 , 66 ] , [ 130 , 97 ] ] ; 4 :
8006: NOP4
8010: PUSH
8011: LD_INT 129
8013: PUSH
8014: LD_INT 66
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PUSH
8021: LD_INT 130
8023: PUSH
8024: LD_INT 97
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: ST_TO_ADDR
8035: GO 8078
8037: LD_INT 4
8039: DOUBLE
8040: EQUAL
8041: IFTRUE 8045
8043: GO 8077
8045: POP
// _target := [ [ 156 , 87 ] , [ 183 , 127 ] ] ; end ;
8046: NOP4
8050: PUSH
8051: LD_INT 156
8053: PUSH
8054: LD_INT 87
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: LD_INT 183
8063: PUSH
8064: LD_INT 127
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: ST_TO_ADDR
8075: GO 8078
8077: POP
// if not _target then
8078: NOP4
8082: NOT
8083: IFFALSE 8114
// _target := [ [ 52 , 11 ] , [ 76 , 90 ] ] ;
8085: NOP4
8089: PUSH
8090: LD_INT 52
8092: PUSH
8093: LD_INT 11
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 76
8102: PUSH
8103: LD_INT 90
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: ST_TO_ADDR
// MC_PrepareAttack ( base , mc_vehicles [ base ] , _target , flags ) ;
8114: NOP4
8118: PPUSH
8119: NOP4
8123: PUSH
8124: NOP4
8128: ARRAY
8129: PPUSH
8130: NOP4
8134: PPUSH
8135: NOP4
8139: PPUSH
8140: NOP4
// end ;
8144: PPOPN 10
8146: END
// every 13 13$00 + 10 10$00 trigger ( IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) = side_bot ) and ( multi_players_amount = 3 or IsDead ( ar_dep_n ) or GetSide ( ar_dep_n ) <> side_bot ) do var i , t , x , base , tmp , coords , flags , danger , target , _target ;
8147: LD_INT 45
8149: PPUSH
8150: NOP4
8154: PUSH
8155: LD_INT 45
8157: PPUSH
8158: NOP4
8162: PUSH
8163: NOP4
8167: EQUAL
8168: AND
8169: PUSH
8170: NOP4
8174: PUSH
8175: LD_INT 3
8177: EQUAL
8178: PUSH
8179: LD_INT 94
8181: PPUSH
8182: NOP4
8186: OR
8187: PUSH
8188: LD_INT 94
8190: PPUSH
8191: NOP4
8195: PUSH
8196: NOP4
8200: NONEQUAL
8201: OR
8202: AND
8203: IFFALSE 8789
8205: GO 8207
8207: DISABLE
8208: LD_INT 0
8210: PPUSH
8211: PPUSH
8212: PPUSH
8213: PPUSH
8214: PPUSH
8215: PPUSH
8216: PPUSH
8217: PPUSH
8218: PPUSH
8219: PPUSH
// begin enable ;
8220: ENABLE
// base := 2 ;
8221: NOP4
8225: PUSH
8226: LD_INT 2
8228: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
8229: NOP4
8233: PUSH
8234: LD_INT 0
8236: PUSH
8237: LD_INT 0
8239: PUSH
8240: LD_INT 0
8242: PUSH
8243: LD_INT 0
8245: PUSH
8246: LD_INT 1
8248: PUSH
8249: LD_INT 0
8251: PUSH
8252: LD_INT 0
8254: PUSH
8255: LD_INT 0
8257: PUSH
8258: LD_INT 1
8260: PUSH
8261: LD_INT 0
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: ST_TO_ADDR
// coords := [ [ 101 , 110 ] , [ 100 , 21 ] ] ;
8276: NOP4
8280: PUSH
8281: LD_INT 101
8283: PUSH
8284: LD_INT 110
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PUSH
8291: LD_INT 100
8293: PUSH
8294: LD_INT 21
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: ST_TO_ADDR
// target := 0 ;
8305: NOP4
8309: PUSH
8310: LD_INT 0
8312: ST_TO_ADDR
// x := 0 ;
8313: NOP4
8317: PUSH
8318: LD_INT 0
8320: ST_TO_ADDR
// tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , ] ;
8321: NOP4
8325: PUSH
8326: LD_INT 14
8328: PUSH
8329: LD_INT 1
8331: PUSH
8332: LD_INT 2
8334: PUSH
8335: LD_INT 28
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: PUSH
8344: LD_INT 14
8346: PUSH
8347: LD_INT 1
8349: PUSH
8350: LD_INT 2
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: PUSH
8362: LD_INT 14
8364: PUSH
8365: LD_INT 1
8367: PUSH
8368: LD_INT 2
8370: PUSH
8371: LD_INT 28
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: LIST
8384: ST_TO_ADDR
// if Difficulty > 1 then
8385: NOP4
8389: PUSH
8390: LD_INT 1
8392: GREATER
8393: IFFALSE 8488
// for i = 1 to Difficulty + 1 do
8395: NOP4
8399: PUSH
8400: DOUBLE
8401: LD_INT 1
8403: DEC
8404: ST_TO_ADDR
8405: NOP4
8409: PUSH
8410: LD_INT 1
8412: PLUS
8413: PUSH
8414: FOR_TO
8415: IFFALSE 8486
// tmp := Insert ( tmp , tmp + 1 , [ ar_half_tracked , engine_combustion , control_remote , [ ar_rocket_launcher , ar_gun , ar_gun ] [ i mod 2 + 1 ] ] ) ;
8417: NOP4
8421: PUSH
8422: NOP4
8426: PPUSH
8427: NOP4
8431: PUSH
8432: LD_INT 1
8434: PLUS
8435: PPUSH
8436: LD_INT 14
8438: PUSH
8439: LD_INT 1
8441: PUSH
8442: LD_INT 2
8444: PUSH
8445: LD_INT 28
8447: PUSH
8448: LD_INT 27
8450: PUSH
8451: LD_INT 27
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: LIST
8458: PUSH
8459: NOP4
8463: PUSH
8464: LD_INT 2
8466: MOD
8467: PUSH
8468: LD_INT 1
8470: PLUS
8471: ARRAY
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: PPUSH
8479: NOP4
8483: ST_TO_ADDR
8484: GO 8414
8486: POP
8487: POP
// MC_SetProduceList ( base , tmp ) ;
8488: NOP4
8492: PPUSH
8493: NOP4
8497: PPUSH
8498: NOP4
// repeat wait ( 0 0$1 ) ;
8502: LD_INT 35
8504: PPUSH
8505: NOP4
// until MC_GetProduceList ( base ) = 0 ;
8509: NOP4
8513: PPUSH
8514: NOP4
8518: PUSH
8519: LD_INT 0
8521: EQUAL
8522: IFFALSE 8502
// wait ( 0 0$10 ) ;
8524: LD_INT 350
8526: PPUSH
8527: NOP4
// for i = 1 to coords do
8531: NOP4
8535: PUSH
8536: DOUBLE
8537: LD_INT 1
8539: DEC
8540: ST_TO_ADDR
8541: NOP4
8545: PUSH
8546: FOR_TO
8547: IFFALSE 8635
// begin t := DangerAtRangeXY ( side_bot , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] , 35 ) [ 4 ] ;
8549: NOP4
8553: PUSH
8554: NOP4
8558: PPUSH
8559: NOP4
8563: PUSH
8564: NOP4
8568: ARRAY
8569: PUSH
8570: LD_INT 1
8572: ARRAY
8573: PPUSH
8574: NOP4
8578: PUSH
8579: NOP4
8583: ARRAY
8584: PUSH
8585: LD_INT 2
8587: ARRAY
8588: PPUSH
8589: LD_INT 35
8591: PPUSH
8592: NOP4
8596: PUSH
8597: LD_INT 4
8599: ARRAY
8600: ST_TO_ADDR
// if t > x then
8601: NOP4
8605: PUSH
8606: NOP4
8610: GREATER
8611: IFFALSE 8633
// begin x := t ;
8613: NOP4
8617: PUSH
8618: NOP4
8622: ST_TO_ADDR
// target := i ;
8623: NOP4
8627: PUSH
8628: NOP4
8632: ST_TO_ADDR
// end ; end ;
8633: GO 8546
8635: POP
8636: POP
// case target of 1 :
8637: NOP4
8641: PUSH
8642: LD_INT 1
8644: DOUBLE
8645: EQUAL
8646: IFTRUE 8650
8648: GO 8682
8650: POP
// _target := [ [ 49 , 35 ] , [ 76 , 90 ] ] ; 2 :
8651: NOP4
8655: PUSH
8656: LD_INT 49
8658: PUSH
8659: LD_INT 35
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PUSH
8666: LD_INT 76
8668: PUSH
8669: LD_INT 90
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: ST_TO_ADDR
8680: GO 8723
8682: LD_INT 2
8684: DOUBLE
8685: EQUAL
8686: IFTRUE 8690
8688: GO 8722
8690: POP
// _target := [ [ 79 , 13 ] , [ 100 , 22 ] ] ; end ;
8691: NOP4
8695: PUSH
8696: LD_INT 79
8698: PUSH
8699: LD_INT 13
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: LD_INT 100
8708: PUSH
8709: LD_INT 22
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: ST_TO_ADDR
8720: GO 8723
8722: POP
// if not _target then
8723: NOP4
8727: NOT
8728: IFFALSE 8759
// _target := [ [ 49 , 35 ] , [ 76 , 90 ] ] ;
8730: NOP4
8734: PUSH
8735: LD_INT 49
8737: PUSH
8738: LD_INT 35
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_INT 76
8747: PUSH
8748: LD_INT 90
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: ST_TO_ADDR
// MC_PrepareAttack ( base , mc_vehicles [ base ] , _target , flags ) ;
8759: NOP4
8763: PPUSH
8764: NOP4
8768: PUSH
8769: NOP4
8773: ARRAY
8774: PPUSH
8775: NOP4
8779: PPUSH
8780: NOP4
8784: PPUSH
8785: NOP4
// end ; end_of_file
8789: PPOPN 10
8791: END
// on ArtifactLoaded ( cargo , artifact ) do var i , j ;
8792: LD_INT 0
8794: PPUSH
8795: PPUSH
// begin if artifact_get then
8796: NOP4
8800: IFFALSE 8804
// exit ;
8802: GO 8826
// MultiplayerEvent_ArtifactCaptured ( GetSide ( cargo ) ) ;
8804: NOP4
8808: PPUSH
8809: NOP4
8813: PPUSH
8814: NOP4
// artifact_get := true ;
8818: NOP4
8822: PUSH
8823: LD_INT 1
8825: ST_TO_ADDR
// end ;
8826: PPOPN 4
8828: END
// on UnitDestroyed ( un ) do var i , side ;
8829: LD_INT 0
8831: PPUSH
8832: PPUSH
// begin side := GetSide ( un ) ;
8833: NOP4
8837: PUSH
8838: NOP4
8842: PPUSH
8843: NOP4
8847: ST_TO_ADDR
// if not side in mc_sides and multi_sides [ side ] then
8848: NOP4
8852: PUSH
8853: NOP4
8857: IN
8858: NOT
8859: PUSH
8860: NOP4
8864: PUSH
8865: NOP4
8869: ARRAY
8870: AND
8871: IFFALSE 8897
// if GetType ( un ) = unit_human then
8873: NOP4
8877: PPUSH
8878: NOP4
8882: PUSH
8883: LD_INT 1
8885: EQUAL
8886: IFFALSE 8897
// MultiplayerEvent_HumanLost ( side ) ;
8888: NOP4
8892: PPUSH
8893: NOP4
// if side in mc_sides then
8897: NOP4
8901: PUSH
8902: NOP4
8906: IN
8907: IFFALSE 8952
// if un <> Gensher then
8909: NOP4
8913: PUSH
8914: NOP4
8918: NONEQUAL
8919: IFFALSE 8935
// MultiplayerEvent_UnitKilled ( un , false ) else
8921: NOP4
8925: PPUSH
8926: LD_INT 0
8928: PPUSH
8929: NOP4
8933: GO 8952
// MultiplayerEvent_UnitKilled ( un , Multiplayer_GetCondition ( 5 ) ) ;
8935: NOP4
8939: PPUSH
8940: LD_INT 5
8942: PPUSH
8943: NOP4
8947: PPUSH
8948: NOP4
// if multi_commanders and multi_custom_commanders then
8952: NOP4
8956: PUSH
8957: NOP4
8961: AND
8962: IFFALSE 9024
// if un in multi_commanders then
8964: NOP4
8968: PUSH
8969: NOP4
8973: IN
8974: IFFALSE 9024
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
8976: NOP4
8980: PUSH
8981: NOP4
8985: PPUSH
8986: NOP4
8990: PPUSH
8991: LD_INT 1
8993: PPUSH
8994: NOP4
8998: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
8999: NOP4
9003: PUSH
9004: NOP4
9008: PUSH
9009: NOP4
9013: DIFF
9014: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
9015: NOP4
9019: PPUSH
9020: NOP4
// end ; MCE_UnitDestroyed ( un ) ;
9024: NOP4
9028: PPUSH
9029: NOP4
// end ;
9033: PPOPN 3
9035: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
9036: NOP4
9040: PPUSH
9041: NOP4
9045: PPUSH
9046: NOP4
// end ;
9050: PPOPN 2
9052: END
// on BuildingComplete ( building ) do var i , j ;
9053: LD_INT 0
9055: PPUSH
9056: PPUSH
// begin if GetSide ( building ) in mc_sides then
9057: NOP4
9061: PPUSH
9062: NOP4
9066: PUSH
9067: NOP4
9071: IN
9072: IFFALSE 9098
// MultiplayerEvent_BuildingCompleted ( GetSide ( building ) , GetBType ( building ) ) ;
9074: NOP4
9078: PPUSH
9079: NOP4
9083: PPUSH
9084: NOP4
9088: PPUSH
9089: NOP4
9093: PPUSH
9094: NOP4
// if GetBType ( building ) = b_depot and not GetSide ( building ) in mc_sides and base_names then
9098: NOP4
9102: PPUSH
9103: NOP4
9107: PUSH
9108: LD_INT 0
9110: EQUAL
9111: PUSH
9112: NOP4
9116: PPUSH
9117: NOP4
9121: PUSH
9122: NOP4
9126: IN
9127: NOT
9128: AND
9129: PUSH
9130: NOP4
9134: AND
9135: IFFALSE 9173
// begin SetBName ( building , base_names [ 1 ] ) ;
9137: NOP4
9141: PPUSH
9142: NOP4
9146: PUSH
9147: LD_INT 1
9149: ARRAY
9150: PPUSH
9151: NOP4
// base_names := Delete ( base_names , 1 ) ;
9155: NOP4
9159: PUSH
9160: NOP4
9164: PPUSH
9165: LD_INT 1
9167: PPUSH
9168: NOP4
9172: ST_TO_ADDR
// end ; MCE_BuildingComplete ( building ) ;
9173: NOP4
9177: PPUSH
9178: NOP4
// end ;
9182: PPOPN 3
9184: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
9185: NOP4
9189: PPUSH
9190: NOP4
9194: PPUSH
9195: NOP4
// end ;
9199: PPOPN 2
9201: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
9202: NOP4
9206: PPUSH
9207: NOP4
9211: PPUSH
9212: NOP4
9216: PPUSH
9217: NOP4
9221: PPUSH
9222: NOP4
9226: PPUSH
9227: NOP4
// end ;
9231: PPOPN 5
9233: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp ;
9234: LD_INT 0
9236: PPUSH
9237: PPUSH
9238: PPUSH
// begin side := GetSide ( vehicle ) ;
9239: NOP4
9243: PUSH
9244: NOP4
9248: PPUSH
9249: NOP4
9253: ST_TO_ADDR
// if not side in mc_sides and multi_sides [ side ] then
9254: NOP4
9258: PUSH
9259: NOP4
9263: IN
9264: NOT
9265: PUSH
9266: NOP4
9270: PUSH
9271: NOP4
9275: ARRAY
9276: AND
9277: IFFALSE 9288
// MultiplayerEvent_Produced ( side ) ;
9279: NOP4
9283: PPUSH
9284: NOP4
// MCE_VehicleConstructed ( vehicle , factory ) ;
9288: NOP4
9292: PPUSH
9293: NOP4
9297: PPUSH
9298: NOP4
// end ;
9302: PPOPN 5
9304: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
9305: NOP4
9309: PPUSH
9310: NOP4
9314: PPUSH
9315: NOP4
9319: PPUSH
9320: NOP4
9324: PPUSH
9325: NOP4
// end ;
9329: PPOPN 4
9331: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
9332: NOP4
9336: PPUSH
9337: NOP4
9341: PPUSH
9342: NOP4
9346: PPUSH
9347: NOP4
// end ;
9351: PPOPN 3
9353: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
9354: NOP4
9358: PPUSH
9359: NOP4
9363: PPUSH
9364: NOP4
// end ;
9368: PPOPN 2
9370: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
9371: NOP4
9375: PPUSH
9376: NOP4
9380: PPUSH
9381: NOP4
// end ;
9385: PPOPN 2
9387: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
9388: NOP4
9392: PPUSH
9393: NOP4
9397: PPUSH
9398: NOP4
9402: PPUSH
9403: NOP4
9407: PPUSH
9408: NOP4
// end ; end_of_file
9412: PPOPN 4
9414: END
// every 0 0$1 trigger game do
9415: NOP4
9419: IFFALSE 9464
9421: GO 9423
9423: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
9424: LD_INT 7
9426: PUSH
9427: LD_INT 6
9429: PUSH
9430: LD_INT 4
9432: PUSH
9433: LD_INT 6
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: PPUSH
9442: NOP4
9446: PUSH
9447: LD_INT 2
9449: ARRAY
9450: PPUSH
9451: NOP4
9455: PUSH
9456: LD_INT 1
9458: ARRAY
9459: PPUSH
9460: NOP4
9464: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , players_areas ; begin
9465: LD_INT 0
9467: PPUSH
9468: PPUSH
9469: PPUSH
9470: PPUSH
// if not areas then
9471: NOP4
9475: NOT
9476: IFFALSE 9480
// exit ;
9478: GO 9755
// players_areas := [ crates_player_west , crates_player_south , crates_player_east ] ;
9480: NOP4
9484: PUSH
9485: LD_INT 31
9487: PUSH
9488: LD_INT 32
9490: PUSH
9491: LD_INT 30
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: LIST
9498: ST_TO_ADDR
// repeat wait ( time ) ;
9499: NOP4
9503: PPUSH
9504: NOP4
// x := 5 ;
9508: NOP4
9512: PUSH
9513: LD_INT 5
9515: ST_TO_ADDR
// if tick < [ 20 20$00 , 18 18$00 , 14 14$00 ] [ Difficulty ] then
9516: NOP4
9520: PUSH
9521: LD_INT 42000
9523: PUSH
9524: LD_INT 37800
9526: PUSH
9527: LD_INT 29400
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: LIST
9534: PUSH
9535: NOP4
9539: ARRAY
9540: LESS
9541: IFFALSE 9613
// begin for i = 1 to multi_sides do
9543: NOP4
9547: PUSH
9548: DOUBLE
9549: LD_INT 1
9551: DEC
9552: ST_TO_ADDR
9553: NOP4
9557: PUSH
9558: FOR_TO
9559: IFFALSE 9604
// if multi_sides [ i ] then
9561: NOP4
9565: PUSH
9566: NOP4
9570: ARRAY
9571: IFFALSE 9602
// CreateCratesArea ( x , players_areas [ multi_sides [ i ] ] , true ) ;
9573: NOP4
9577: PPUSH
9578: NOP4
9582: PUSH
9583: NOP4
9587: PUSH
9588: NOP4
9592: ARRAY
9593: ARRAY
9594: PPUSH
9595: LD_INT 1
9597: PPUSH
9598: NOP4
9602: GO 9558
9604: POP
9605: POP
// wait ( 0 0$6 ) ;
9606: LD_INT 210
9608: PPUSH
9609: NOP4
// end ; for i in areas do
9613: NOP4
9617: PUSH
9618: NOP4
9622: PUSH
9623: FOR_IN
9624: IFFALSE 9652
// begin wait ( 0 0$6 ) ;
9626: LD_INT 210
9628: PPUSH
9629: NOP4
// CreateCratesArea ( x , i , true ) ;
9633: NOP4
9637: PPUSH
9638: NOP4
9642: PPUSH
9643: LD_INT 1
9645: PPUSH
9646: NOP4
// end ;
9650: GO 9623
9652: POP
9653: POP
// time := time + 0 0$2 ;
9654: NOP4
9658: PUSH
9659: NOP4
9663: PUSH
9664: LD_INT 70
9666: PLUS
9667: ST_TO_ADDR
// amount := amount - x * 10 ;
9668: NOP4
9672: PUSH
9673: NOP4
9677: PUSH
9678: NOP4
9682: PUSH
9683: LD_INT 10
9685: MUL
9686: MINUS
9687: ST_TO_ADDR
// x := x - 1 ;
9688: NOP4
9692: PUSH
9693: NOP4
9697: PUSH
9698: LD_INT 1
9700: MINUS
9701: ST_TO_ADDR
// if x = 0 then
9702: NOP4
9706: PUSH
9707: LD_INT 0
9709: EQUAL
9710: IFFALSE 9720
// x := 5 ;
9712: NOP4
9716: PUSH
9717: LD_INT 5
9719: ST_TO_ADDR
// if time > 4 4$00 then
9720: NOP4
9724: PUSH
9725: LD_INT 8400
9727: GREATER
9728: IFFALSE 9738
// time := 0 0$40 ;
9730: NOP4
9734: PUSH
9735: LD_INT 1400
9737: ST_TO_ADDR
// until not game or amount <= 0 ;
9738: NOP4
9742: NOT
9743: PUSH
9744: NOP4
9748: PUSH
9749: LD_INT 0
9751: LESSEQUAL
9752: OR
9753: IFFALSE 9499
// end ; end_of_file
9755: LD_VAR 0 4
9759: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9760: LD_INT 0
9762: PPUSH
9763: PPUSH
// if exist_mode then
9764: NOP4
9768: IFFALSE 9793
// unit := CreateCharacter ( prefix & ident ) else
9770: NOP4
9774: PUSH
9775: NOP4
9779: PUSH
9780: NOP4
9784: STR
9785: PPUSH
9786: NOP4
9790: ST_TO_ADDR
9791: GO 9808
// unit := NewCharacter ( ident ) ;
9793: NOP4
9797: PUSH
9798: NOP4
9802: PPUSH
9803: NOP4
9807: ST_TO_ADDR
// result := unit ;
9808: NOP4
9812: PUSH
9813: NOP4
9817: ST_TO_ADDR
// end ;
9818: LD_VAR 0 4
9822: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9823: LD_INT 0
9825: PPUSH
9826: PPUSH
// if not side or not nation then
9827: NOP4
9831: NOT
9832: PUSH
9833: NOP4
9837: NOT
9838: OR
9839: IFFALSE 9843
// exit ;
9841: GO 10487
// case nation of nation_american :
9843: NOP4
9847: PUSH
9848: LD_INT 1
9850: DOUBLE
9851: EQUAL
9852: IFTRUE 9856
9854: GO 10030
9856: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
9857: NOP4
9861: PUSH
9862: LD_INT 35
9864: PUSH
9865: LD_INT 45
9867: PUSH
9868: LD_INT 46
9870: PUSH
9871: LD_INT 47
9873: PUSH
9874: LD_INT 1
9876: PUSH
9877: LD_INT 2
9879: PUSH
9880: LD_INT 6
9882: PUSH
9883: LD_INT 15
9885: PUSH
9886: LD_INT 16
9888: PUSH
9889: LD_INT 7
9891: PUSH
9892: LD_INT 12
9894: PUSH
9895: LD_INT 13
9897: PUSH
9898: LD_INT 10
9900: PUSH
9901: LD_INT 14
9903: PUSH
9904: LD_INT 20
9906: PUSH
9907: LD_INT 21
9909: PUSH
9910: LD_INT 22
9912: PUSH
9913: LD_INT 25
9915: PUSH
9916: LD_INT 32
9918: PUSH
9919: LD_INT 27
9921: PUSH
9922: LD_INT 36
9924: PUSH
9925: LD_INT 69
9927: PUSH
9928: LD_INT 39
9930: PUSH
9931: LD_INT 34
9933: PUSH
9934: LD_INT 40
9936: PUSH
9937: LD_INT 48
9939: PUSH
9940: LD_INT 49
9942: PUSH
9943: LD_INT 50
9945: PUSH
9946: LD_INT 51
9948: PUSH
9949: LD_INT 52
9951: PUSH
9952: LD_INT 53
9954: PUSH
9955: LD_INT 54
9957: PUSH
9958: LD_INT 55
9960: PUSH
9961: LD_INT 56
9963: PUSH
9964: LD_INT 57
9966: PUSH
9967: LD_INT 58
9969: PUSH
9970: LD_INT 59
9972: PUSH
9973: LD_INT 60
9975: PUSH
9976: LD_INT 61
9978: PUSH
9979: LD_INT 62
9981: PUSH
9982: LD_INT 80
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: ST_TO_ADDR
10028: GO 10411
10030: LD_INT 2
10032: DOUBLE
10033: EQUAL
10034: IFTRUE 10038
10036: GO 10220
10038: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
10039: NOP4
10043: PUSH
10044: LD_INT 35
10046: PUSH
10047: LD_INT 45
10049: PUSH
10050: LD_INT 46
10052: PUSH
10053: LD_INT 47
10055: PUSH
10056: LD_INT 70
10058: PUSH
10059: LD_INT 1
10061: PUSH
10062: LD_INT 11
10064: PUSH
10065: LD_INT 3
10067: PUSH
10068: LD_INT 4
10070: PUSH
10071: LD_INT 5
10073: PUSH
10074: LD_INT 6
10076: PUSH
10077: LD_INT 15
10079: PUSH
10080: LD_INT 18
10082: PUSH
10083: LD_INT 7
10085: PUSH
10086: LD_INT 17
10088: PUSH
10089: LD_INT 8
10091: PUSH
10092: LD_INT 20
10094: PUSH
10095: LD_INT 21
10097: PUSH
10098: LD_INT 22
10100: PUSH
10101: LD_INT 72
10103: PUSH
10104: LD_INT 26
10106: PUSH
10107: LD_INT 69
10109: PUSH
10110: LD_INT 39
10112: PUSH
10113: LD_INT 40
10115: PUSH
10116: LD_INT 41
10118: PUSH
10119: LD_INT 42
10121: PUSH
10122: LD_INT 43
10124: PUSH
10125: LD_INT 48
10127: PUSH
10128: LD_INT 49
10130: PUSH
10131: LD_INT 50
10133: PUSH
10134: LD_INT 51
10136: PUSH
10137: LD_INT 52
10139: PUSH
10140: LD_INT 53
10142: PUSH
10143: LD_INT 54
10145: PUSH
10146: LD_INT 55
10148: PUSH
10149: LD_INT 56
10151: PUSH
10152: LD_INT 60
10154: PUSH
10155: LD_INT 61
10157: PUSH
10158: LD_INT 62
10160: PUSH
10161: LD_INT 66
10163: PUSH
10164: LD_INT 67
10166: PUSH
10167: LD_INT 68
10169: PUSH
10170: LD_INT 81
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: ST_TO_ADDR
10218: GO 10411
10220: LD_INT 3
10222: DOUBLE
10223: EQUAL
10224: IFTRUE 10228
10226: GO 10410
10228: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
10229: NOP4
10233: PUSH
10234: LD_INT 46
10236: PUSH
10237: LD_INT 47
10239: PUSH
10240: LD_INT 1
10242: PUSH
10243: LD_INT 2
10245: PUSH
10246: LD_INT 11
10248: PUSH
10249: LD_INT 9
10251: PUSH
10252: LD_INT 20
10254: PUSH
10255: LD_INT 19
10257: PUSH
10258: LD_INT 21
10260: PUSH
10261: LD_INT 24
10263: PUSH
10264: LD_INT 22
10266: PUSH
10267: LD_INT 25
10269: PUSH
10270: LD_INT 28
10272: PUSH
10273: LD_INT 29
10275: PUSH
10276: LD_INT 30
10278: PUSH
10279: LD_INT 31
10281: PUSH
10282: LD_INT 37
10284: PUSH
10285: LD_INT 38
10287: PUSH
10288: LD_INT 32
10290: PUSH
10291: LD_INT 27
10293: PUSH
10294: LD_INT 33
10296: PUSH
10297: LD_INT 69
10299: PUSH
10300: LD_INT 39
10302: PUSH
10303: LD_INT 34
10305: PUSH
10306: LD_INT 40
10308: PUSH
10309: LD_INT 71
10311: PUSH
10312: LD_INT 23
10314: PUSH
10315: LD_INT 44
10317: PUSH
10318: LD_INT 48
10320: PUSH
10321: LD_INT 49
10323: PUSH
10324: LD_INT 50
10326: PUSH
10327: LD_INT 51
10329: PUSH
10330: LD_INT 52
10332: PUSH
10333: LD_INT 53
10335: PUSH
10336: LD_INT 54
10338: PUSH
10339: LD_INT 55
10341: PUSH
10342: LD_INT 56
10344: PUSH
10345: LD_INT 57
10347: PUSH
10348: LD_INT 58
10350: PUSH
10351: LD_INT 59
10353: PUSH
10354: LD_INT 63
10356: PUSH
10357: LD_INT 64
10359: PUSH
10360: LD_INT 65
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: ST_TO_ADDR
10408: GO 10411
10410: POP
// if state > - 1 and state < 3 then
10411: NOP4
10415: PUSH
10416: LD_INT 1
10418: NEG
10419: GREATER
10420: PUSH
10421: NOP4
10425: PUSH
10426: LD_INT 3
10428: LESS
10429: AND
10430: IFFALSE 10487
// for i in result do
10432: NOP4
10436: PUSH
10437: NOP4
10441: PUSH
10442: FOR_IN
10443: IFFALSE 10485
// if GetTech ( i , side ) <> state then
10445: NOP4
10449: PPUSH
10450: NOP4
10454: PPUSH
10455: NOP4
10459: PUSH
10460: NOP4
10464: NONEQUAL
10465: IFFALSE 10483
// result := result diff i ;
10467: NOP4
10471: PUSH
10472: NOP4
10476: PUSH
10477: NOP4
10481: DIFF
10482: ST_TO_ADDR
10483: GO 10442
10485: POP
10486: POP
// end ;
10487: LD_VAR 0 4
10491: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10492: LD_INT 0
10494: PPUSH
10495: PPUSH
10496: PPUSH
// result := true ;
10497: NOP4
10501: PUSH
10502: LD_INT 1
10504: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10505: NOP4
10509: PUSH
10510: NOP4
10514: PPUSH
10515: NOP4
10519: ST_TO_ADDR
// if not tmp then
10520: NOP4
10524: NOT
10525: IFFALSE 10529
// exit ;
10527: GO 10578
// for i in tmp do
10529: NOP4
10533: PUSH
10534: NOP4
10538: PUSH
10539: FOR_IN
10540: IFFALSE 10576
// if GetTech ( i , side ) <> state_researched then
10542: NOP4
10546: PPUSH
10547: NOP4
10551: PPUSH
10552: NOP4
10556: PUSH
10557: LD_INT 2
10559: NONEQUAL
10560: IFFALSE 10574
// begin result := false ;
10562: NOP4
10566: PUSH
10567: LD_INT 0
10569: ST_TO_ADDR
// exit ;
10570: POP
10571: POP
10572: GO 10578
// end ;
10574: GO 10539
10576: POP
10577: POP
// end ;
10578: LD_VAR 0 3
10582: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10583: LD_INT 0
10585: PPUSH
10586: PPUSH
10587: PPUSH
10588: PPUSH
10589: PPUSH
10590: PPUSH
10591: PPUSH
10592: PPUSH
10593: PPUSH
10594: PPUSH
10595: PPUSH
10596: PPUSH
10597: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10598: NOP4
10602: NOT
10603: PUSH
10604: NOP4
10608: PPUSH
10609: NOP4
10613: PUSH
10614: LD_INT 9
10616: NONEQUAL
10617: OR
10618: IFFALSE 10622
// exit ;
10620: GO 11195
// side := GetSide ( unit ) ;
10622: NOP4
10626: PUSH
10627: NOP4
10631: PPUSH
10632: NOP4
10636: ST_TO_ADDR
// tech_space := tech_spacanom ;
10637: NOP4
10641: PUSH
10642: LD_INT 29
10644: ST_TO_ADDR
// tech_time := tech_taurad ;
10645: NOP4
10649: PUSH
10650: LD_INT 28
10652: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10653: NOP4
10657: PUSH
10658: NOP4
10662: PPUSH
10663: NOP4
10667: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10668: NOP4
10672: PPUSH
10673: NOP4
10677: PUSH
10678: LD_INT 2
10680: EQUAL
10681: IFFALSE 10685
// exit ;
10683: GO 11195
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10685: NOP4
10689: PUSH
10690: LD_INT 81
10692: PUSH
10693: NOP4
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 3
10704: PUSH
10705: LD_INT 21
10707: PUSH
10708: LD_INT 3
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PPUSH
10723: NOP4
10727: ST_TO_ADDR
// if not tmp then
10728: NOP4
10732: NOT
10733: IFFALSE 10737
// exit ;
10735: GO 11195
// if in_unit then
10737: NOP4
10741: IFFALSE 10765
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10743: NOP4
10747: PUSH
10748: NOP4
10752: PPUSH
10753: NOP4
10757: PPUSH
10758: NOP4
10762: ST_TO_ADDR
10763: GO 10785
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10765: NOP4
10769: PUSH
10770: NOP4
10774: PPUSH
10775: NOP4
10779: PPUSH
10780: NOP4
10784: ST_TO_ADDR
// if not enemy then
10785: NOP4
10789: NOT
10790: IFFALSE 10794
// exit ;
10792: GO 11195
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10794: NOP4
10798: PUSH
10799: NOP4
10803: PPUSH
10804: NOP4
10808: PPUSH
10809: NOP4
10813: PUSH
10814: LD_INT 13
10816: GREATER
10817: AND
10818: PUSH
10819: NOP4
10823: PPUSH
10824: NOP4
10828: PPUSH
10829: NOP4
10833: PUSH
10834: LD_INT 12
10836: GREATER
10837: OR
10838: IFFALSE 10842
// exit ;
10840: GO 11195
// missile := [ 1 ] ;
10842: NOP4
10846: PUSH
10847: LD_INT 1
10849: PUSH
10850: EMPTY
10851: LIST
10852: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10853: NOP4
10857: PPUSH
10858: NOP4
10862: PPUSH
10863: NOP4
10867: IFFALSE 10896
// missile := Insert ( missile , missile + 1 , 2 ) ;
10869: NOP4
10873: PUSH
10874: NOP4
10878: PPUSH
10879: NOP4
10883: PUSH
10884: LD_INT 1
10886: PLUS
10887: PPUSH
10888: LD_INT 2
10890: PPUSH
10891: NOP4
10895: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10896: NOP4
10900: PPUSH
10901: NOP4
10905: PPUSH
10906: NOP4
10910: PUSH
10911: NOP4
10915: PPUSH
10916: NOP4
10920: PPUSH
10921: NOP4
10925: PPUSH
10926: NOP4
10930: NOT
10931: AND
10932: IFFALSE 10961
// missile := Insert ( missile , missile + 1 , 3 ) ;
10934: NOP4
10938: PUSH
10939: NOP4
10943: PPUSH
10944: NOP4
10948: PUSH
10949: LD_INT 1
10951: PLUS
10952: PPUSH
10953: LD_INT 3
10955: PPUSH
10956: NOP4
10960: ST_TO_ADDR
// if missile < 2 then
10961: NOP4
10965: PUSH
10966: LD_INT 2
10968: LESS
10969: IFFALSE 10973
// exit ;
10971: GO 11195
// x := GetX ( enemy ) ;
10973: NOP4
10977: PUSH
10978: NOP4
10982: PPUSH
10983: NOP4
10987: ST_TO_ADDR
// y := GetY ( enemy ) ;
10988: NOP4
10992: PUSH
10993: NOP4
10997: PPUSH
10998: NOP4
11002: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11003: NOP4
11007: PUSH
11008: NOP4
11012: PUSH
11013: LD_INT 1
11015: NEG
11016: PPUSH
11017: LD_INT 1
11019: PPUSH
11020: NOP4
11024: PLUS
11025: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11026: NOP4
11030: PUSH
11031: NOP4
11035: PUSH
11036: LD_INT 1
11038: NEG
11039: PPUSH
11040: LD_INT 1
11042: PPUSH
11043: NOP4
11047: PLUS
11048: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11049: NOP4
11053: PPUSH
11054: NOP4
11058: PPUSH
11059: NOP4
11063: NOT
11064: IFFALSE 11086
// begin _x := x ;
11066: NOP4
11070: PUSH
11071: NOP4
11075: ST_TO_ADDR
// _y := y ;
11076: NOP4
11080: PUSH
11081: NOP4
11085: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11086: NOP4
11090: PUSH
11091: LD_INT 1
11093: PPUSH
11094: NOP4
11098: PPUSH
11099: NOP4
11103: ST_TO_ADDR
// case i of 1 :
11104: NOP4
11108: PUSH
11109: LD_INT 1
11111: DOUBLE
11112: EQUAL
11113: IFTRUE 11117
11115: GO 11134
11117: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11118: NOP4
11122: PPUSH
11123: NOP4
11127: PPUSH
11128: NOP4
11132: GO 11195
11134: LD_INT 2
11136: DOUBLE
11137: EQUAL
11138: IFTRUE 11142
11140: GO 11164
11142: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11143: NOP4
11147: PPUSH
11148: NOP4
11152: PPUSH
11153: NOP4
11157: PPUSH
11158: NOP4
11162: GO 11195
11164: LD_INT 3
11166: DOUBLE
11167: EQUAL
11168: IFTRUE 11172
11170: GO 11194
11172: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11173: NOP4
11177: PPUSH
11178: NOP4
11182: PPUSH
11183: NOP4
11187: PPUSH
11188: NOP4
11192: GO 11195
11194: POP
// end ;
11195: LD_VAR 0 2
11199: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11200: LD_INT 0
11202: PPUSH
11203: PPUSH
11204: PPUSH
11205: PPUSH
11206: PPUSH
11207: PPUSH
// if not unit or not building then
11208: NOP4
11212: NOT
11213: PUSH
11214: NOP4
11218: NOT
11219: OR
11220: IFFALSE 11224
// exit ;
11222: GO 11382
// x := GetX ( building ) ;
11224: NOP4
11228: PUSH
11229: NOP4
11233: PPUSH
11234: NOP4
11238: ST_TO_ADDR
// y := GetY ( building ) ;
11239: NOP4
11243: PUSH
11244: NOP4
11248: PPUSH
11249: NOP4
11253: ST_TO_ADDR
// for i = 0 to 5 do
11254: NOP4
11258: PUSH
11259: DOUBLE
11260: LD_INT 0
11262: DEC
11263: ST_TO_ADDR
11264: LD_INT 5
11266: PUSH
11267: FOR_TO
11268: IFFALSE 11380
// begin _x := ShiftX ( x , i , 3 ) ;
11270: NOP4
11274: PUSH
11275: NOP4
11279: PPUSH
11280: NOP4
11284: PPUSH
11285: LD_INT 3
11287: PPUSH
11288: NOP4
11292: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11293: NOP4
11297: PUSH
11298: NOP4
11302: PPUSH
11303: NOP4
11307: PPUSH
11308: LD_INT 3
11310: PPUSH
11311: NOP4
11315: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11316: NOP4
11320: PPUSH
11321: NOP4
11325: PPUSH
11326: NOP4
11330: NOT
11331: IFFALSE 11335
// continue ;
11333: GO 11267
// if HexInfo ( _x , _y ) = 0 then
11335: NOP4
11339: PPUSH
11340: NOP4
11344: PPUSH
11345: NOP4
11349: PUSH
11350: LD_INT 0
11352: EQUAL
11353: IFFALSE 11378
// begin ComMoveXY ( unit , _x , _y ) ;
11355: NOP4
11359: PPUSH
11360: NOP4
11364: PPUSH
11365: NOP4
11369: PPUSH
11370: NOP4
// exit ;
11374: POP
11375: POP
11376: GO 11382
// end ; end ;
11378: GO 11267
11380: POP
11381: POP
// end ;
11382: LD_VAR 0 3
11386: RET
// export function ScanBase ( side , base_area ) ; begin
11387: LD_INT 0
11389: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11390: NOP4
11394: PUSH
11395: NOP4
11399: PPUSH
11400: LD_INT 81
11402: PUSH
11403: NOP4
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PPUSH
11412: NOP4
11416: ST_TO_ADDR
// end ;
11417: LD_VAR 0 3
11421: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
11422: LD_INT 0
11424: PPUSH
11425: PPUSH
11426: PPUSH
11427: PPUSH
11428: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
11429: NOP4
11433: NOT
11434: PUSH
11435: NOP4
11439: PUSH
11440: NOP4
11444: ARRAY
11445: NOT
11446: OR
11447: PUSH
11448: NOP4
11452: NOT
11453: OR
11454: PUSH
11455: NOP4
11459: NOT
11460: OR
11461: IFFALSE 11465
// exit ;
11463: GO 11978
// side := mc_sides [ base ] ;
11465: NOP4
11469: PUSH
11470: NOP4
11474: PUSH
11475: NOP4
11479: ARRAY
11480: ST_TO_ADDR
// if not side then
11481: NOP4
11485: NOT
11486: IFFALSE 11490
// exit ;
11488: GO 11978
// for i in solds do
11490: NOP4
11494: PUSH
11495: NOP4
11499: PUSH
11500: FOR_IN
11501: IFFALSE 11562
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
11503: NOP4
11507: PPUSH
11508: NOP4
11512: PPUSH
11513: NOP4
11517: PUSH
11518: LD_INT 32
11520: PUSH
11521: LD_INT 31
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: IN
11528: IFFALSE 11548
// solds := solds diff i else
11530: NOP4
11534: PUSH
11535: NOP4
11539: PUSH
11540: NOP4
11544: DIFF
11545: ST_TO_ADDR
11546: GO 11560
// SetTag ( i , 18 ) ;
11548: NOP4
11552: PPUSH
11553: LD_INT 18
11555: PPUSH
11556: NOP4
11560: GO 11500
11562: POP
11563: POP
// if not solds then
11564: NOP4
11568: NOT
11569: IFFALSE 11573
// exit ;
11571: GO 11978
// repeat wait ( 0 0$1 ) ;
11573: LD_INT 35
11575: PPUSH
11576: NOP4
// enemy := ScanBase ( side , area ) ;
11580: NOP4
11584: PUSH
11585: NOP4
11589: PPUSH
11590: NOP4
11594: PPUSH
11595: NOP4
11599: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
11600: NOP4
11604: PUSH
11605: NOP4
11609: ARRAY
11610: NOT
11611: PUSH
11612: NOP4
11616: PUSH
11617: NOP4
11621: ARRAY
11622: PUSH
11623: EMPTY
11624: EQUAL
11625: OR
11626: IFFALSE 11663
// begin for i in solds do
11628: NOP4
11632: PUSH
11633: NOP4
11637: PUSH
11638: FOR_IN
11639: IFFALSE 11652
// ComStop ( i ) ;
11641: NOP4
11645: PPUSH
11646: NOP4
11650: GO 11638
11652: POP
11653: POP
// solds := [ ] ;
11654: NOP4
11658: PUSH
11659: EMPTY
11660: ST_TO_ADDR
// exit ;
11661: GO 11978
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
11663: NOP4
11667: NOT
11668: PUSH
11669: NOP4
11673: PUSH
11674: LD_INT 3
11676: GREATER
11677: OR
11678: PUSH
11679: NOP4
11683: PUSH
11684: NOP4
11688: ARRAY
11689: OR
11690: IFFALSE 11731
// begin for i in solds do
11692: NOP4
11696: PUSH
11697: NOP4
11701: PUSH
11702: FOR_IN
11703: IFFALSE 11727
// if HasTask ( i ) then
11705: NOP4
11709: PPUSH
11710: NOP4
11714: IFFALSE 11725
// ComStop ( i ) ;
11716: NOP4
11720: PPUSH
11721: NOP4
11725: GO 11702
11727: POP
11728: POP
// break ;
11729: GO 11966
// end ; for i in solds do
11731: NOP4
11735: PUSH
11736: NOP4
11740: PUSH
11741: FOR_IN
11742: IFFALSE 11958
// begin if IsInUnit ( i ) then
11744: NOP4
11748: PPUSH
11749: NOP4
11753: IFFALSE 11764
// ComExitBuilding ( i ) ;
11755: NOP4
11759: PPUSH
11760: NOP4
// if GetLives ( i ) > 333 then
11764: NOP4
11768: PPUSH
11769: NOP4
11773: PUSH
11774: LD_INT 333
11776: GREATER
11777: IFFALSE 11805
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11779: NOP4
11783: PPUSH
11784: NOP4
11788: PPUSH
11789: NOP4
11793: PPUSH
11794: NOP4
11798: PPUSH
11799: NOP4
11803: GO 11956
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
11805: NOP4
11809: PUSH
11810: NOP4
11814: PUSH
11815: NOP4
11819: ARRAY
11820: PPUSH
11821: LD_INT 2
11823: PUSH
11824: LD_INT 30
11826: PUSH
11827: LD_INT 0
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: LD_INT 30
11836: PUSH
11837: LD_INT 1
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 30
11846: PUSH
11847: LD_INT 6
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: PPUSH
11860: NOP4
11864: PPUSH
11865: NOP4
11869: PPUSH
11870: NOP4
11874: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
11875: NOP4
11879: PPUSH
11880: NOP4
11884: PPUSH
11885: NOP4
11889: PPUSH
11890: LD_INT 3
11892: PPUSH
11893: LD_INT 5
11895: PPUSH
11896: NOP4
11900: PPUSH
11901: NOP4
11905: PPUSH
11906: NOP4
11910: PPUSH
11911: LD_INT 3
11913: PPUSH
11914: LD_INT 5
11916: PPUSH
11917: NOP4
11921: PPUSH
11922: NOP4
// SetTag ( i , 0 ) ;
11926: NOP4
11930: PPUSH
11931: LD_INT 0
11933: PPUSH
11934: NOP4
// solds := solds diff i ;
11938: NOP4
11942: PUSH
11943: NOP4
11947: PUSH
11948: NOP4
11952: DIFF
11953: ST_TO_ADDR
// continue ;
11954: GO 11741
// end ; end ;
11956: GO 11741
11958: POP
11959: POP
// until solds ;
11960: NOP4
11964: IFFALSE 11573
// MC_Reset ( base , 18 ) ;
11966: NOP4
11970: PPUSH
11971: LD_INT 18
11973: PPUSH
11974: NOP4
// end ;
11978: LD_VAR 0 4
11982: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
11983: LD_INT 0
11985: PPUSH
11986: PPUSH
11987: PPUSH
11988: PPUSH
11989: PPUSH
11990: PPUSH
11991: PPUSH
11992: PPUSH
11993: PPUSH
11994: PPUSH
11995: PPUSH
11996: PPUSH
11997: PPUSH
11998: PPUSH
11999: PPUSH
12000: PPUSH
12001: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
12002: NOP4
12006: PUSH
12007: NOP4
12011: PUSH
12012: NOP4
12016: ARRAY
12017: PPUSH
12018: LD_INT 25
12020: PUSH
12021: LD_INT 3
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PPUSH
12028: NOP4
12032: ST_TO_ADDR
// if mc_remote_driver [ base ] then
12033: NOP4
12037: PUSH
12038: NOP4
12042: ARRAY
12043: IFFALSE 12067
// mechs := mechs diff mc_remote_driver [ base ] ;
12045: NOP4
12049: PUSH
12050: NOP4
12054: PUSH
12055: NOP4
12059: PUSH
12060: NOP4
12064: ARRAY
12065: DIFF
12066: ST_TO_ADDR
// for i in mechs do
12067: NOP4
12071: PUSH
12072: NOP4
12076: PUSH
12077: FOR_IN
12078: IFFALSE 12113
// if GetTag ( i ) > 0 then
12080: NOP4
12084: PPUSH
12085: NOP4
12089: PUSH
12090: LD_INT 0
12092: GREATER
12093: IFFALSE 12111
// mechs := mechs diff i ;
12095: NOP4
12099: PUSH
12100: NOP4
12104: PUSH
12105: NOP4
12109: DIFF
12110: ST_TO_ADDR
12111: GO 12077
12113: POP
12114: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
12115: NOP4
12119: PUSH
12120: NOP4
12124: PUSH
12125: NOP4
12129: ARRAY
12130: PPUSH
12131: LD_INT 2
12133: PUSH
12134: LD_INT 25
12136: PUSH
12137: LD_INT 1
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PUSH
12144: LD_INT 25
12146: PUSH
12147: LD_INT 5
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 25
12156: PUSH
12157: LD_INT 8
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: LD_INT 25
12166: PUSH
12167: LD_INT 9
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: PPUSH
12181: NOP4
12185: ST_TO_ADDR
// if not defenders and not solds then
12186: NOP4
12190: NOT
12191: PUSH
12192: NOP4
12196: NOT
12197: AND
12198: IFFALSE 12202
// exit ;
12200: GO 13828
// depot_under_attack := false ;
12202: NOP4
12206: PUSH
12207: LD_INT 0
12209: ST_TO_ADDR
// sold_defenders := [ ] ;
12210: NOP4
12214: PUSH
12215: EMPTY
12216: ST_TO_ADDR
// if mechs then
12217: NOP4
12221: IFFALSE 12350
// for i in defenders do
12223: NOP4
12227: PUSH
12228: NOP4
12232: PUSH
12233: FOR_IN
12234: IFFALSE 12348
// begin SetTag ( i , 20 ) ;
12236: NOP4
12240: PPUSH
12241: LD_INT 20
12243: PPUSH
12244: NOP4
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
12248: NOP4
12252: PPUSH
12253: NOP4
12257: PUSH
12258: LD_INT 1
12260: EQUAL
12261: PUSH
12262: NOP4
12266: PPUSH
12267: NOP4
12271: NOT
12272: AND
12273: PUSH
12274: NOP4
12278: AND
12279: IFFALSE 12346
// begin un := mechs [ 1 ] ;
12281: NOP4
12285: PUSH
12286: NOP4
12290: PUSH
12291: LD_INT 1
12293: ARRAY
12294: ST_TO_ADDR
// ComExitBuilding ( un ) ;
12295: NOP4
12299: PPUSH
12300: NOP4
// AddComEnterUnit ( un , i ) ;
12304: NOP4
12308: PPUSH
12309: NOP4
12313: PPUSH
12314: NOP4
// SetTag ( un , 19 ) ;
12318: NOP4
12322: PPUSH
12323: LD_INT 19
12325: PPUSH
12326: NOP4
// mechs := mechs diff un ;
12330: NOP4
12334: PUSH
12335: NOP4
12339: PUSH
12340: NOP4
12344: DIFF
12345: ST_TO_ADDR
// end ; end ;
12346: GO 12233
12348: POP
12349: POP
// if solds then
12350: NOP4
12354: IFFALSE 12413
// for i in solds do
12356: NOP4
12360: PUSH
12361: NOP4
12365: PUSH
12366: FOR_IN
12367: IFFALSE 12411
// if not GetTag ( i ) then
12369: NOP4
12373: PPUSH
12374: NOP4
12378: NOT
12379: IFFALSE 12409
// begin defenders := defenders union i ;
12381: NOP4
12385: PUSH
12386: NOP4
12390: PUSH
12391: NOP4
12395: UNION
12396: ST_TO_ADDR
// SetTag ( i , 18 ) ;
12397: NOP4
12401: PPUSH
12402: LD_INT 18
12404: PPUSH
12405: NOP4
// end ;
12409: GO 12366
12411: POP
12412: POP
// repeat wait ( 0 0$1 ) ;
12413: LD_INT 35
12415: PPUSH
12416: NOP4
// enemy := mc_scan [ base ] ;
12420: NOP4
12424: PUSH
12425: NOP4
12429: PUSH
12430: NOP4
12434: ARRAY
12435: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
12436: NOP4
12440: PUSH
12441: NOP4
12445: ARRAY
12446: NOT
12447: PUSH
12448: NOP4
12452: PUSH
12453: NOP4
12457: ARRAY
12458: PUSH
12459: EMPTY
12460: EQUAL
12461: OR
12462: IFFALSE 12499
// begin for i in defenders do
12464: NOP4
12468: PUSH
12469: NOP4
12473: PUSH
12474: FOR_IN
12475: IFFALSE 12488
// ComStop ( i ) ;
12477: NOP4
12481: PPUSH
12482: NOP4
12486: GO 12474
12488: POP
12489: POP
// defenders := [ ] ;
12490: NOP4
12494: PUSH
12495: EMPTY
12496: ST_TO_ADDR
// exit ;
12497: GO 13828
// end ; for i in defenders do
12499: NOP4
12503: PUSH
12504: NOP4
12508: PUSH
12509: FOR_IN
12510: IFFALSE 13328
// begin e := NearestUnitToUnit ( enemy , i ) ;
12512: NOP4
12516: PUSH
12517: NOP4
12521: PPUSH
12522: NOP4
12526: PPUSH
12527: NOP4
12531: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
12532: NOP4
12536: PUSH
12537: NOP4
12541: PUSH
12542: NOP4
12546: ARRAY
12547: PPUSH
12548: LD_INT 2
12550: PUSH
12551: LD_INT 30
12553: PUSH
12554: LD_INT 0
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 30
12563: PUSH
12564: LD_INT 1
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: PPUSH
12576: NOP4
12580: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
12581: NOP4
12585: PUSH
12586: NOP4
12590: NOT
12591: PUSH
12592: NOP4
12596: PPUSH
12597: LD_INT 3
12599: PUSH
12600: LD_INT 24
12602: PUSH
12603: LD_INT 600
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: PPUSH
12614: NOP4
12618: OR
12619: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
12620: NOP4
12624: PPUSH
12625: NOP4
12629: PUSH
12630: LD_INT 2
12632: DOUBLE
12633: EQUAL
12634: IFTRUE 12638
12636: GO 13034
12638: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
12639: NOP4
12643: PPUSH
12644: NOP4
12648: PUSH
12649: LD_INT 650
12651: GREATER
12652: PUSH
12653: NOP4
12657: PPUSH
12658: NOP4
12662: PPUSH
12663: NOP4
12667: PUSH
12668: LD_INT 40
12670: LESS
12671: PUSH
12672: NOP4
12676: PPUSH
12677: NOP4
12681: PUSH
12682: NOP4
12686: ARRAY
12687: PPUSH
12688: NOP4
12692: OR
12693: AND
12694: IFFALSE 12816
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
12696: NOP4
12700: PPUSH
12701: NOP4
12705: PUSH
12706: LD_INT 1
12708: EQUAL
12709: PUSH
12710: NOP4
12714: PPUSH
12715: NOP4
12719: PUSH
12720: LD_INT 30
12722: LESS
12723: AND
12724: PUSH
12725: NOP4
12729: AND
12730: IFFALSE 12800
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
12732: NOP4
12736: PPUSH
12737: NOP4
12741: PPUSH
12742: NOP4
12746: PPUSH
12747: NOP4
12751: PPUSH
12752: NOP4
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
12756: NOP4
12760: PPUSH
12761: NOP4
12765: PPUSH
12766: NOP4
12770: PPUSH
12771: NOP4
12775: PPUSH
12776: NOP4
12780: PUSH
12781: LD_INT 6
12783: LESS
12784: IFFALSE 12798
// SetFuel ( i , 100 ) ;
12786: NOP4
12790: PPUSH
12791: LD_INT 100
12793: PPUSH
12794: NOP4
// end else
12798: GO 12814
// ComAttackUnit ( i , e ) ;
12800: NOP4
12804: PPUSH
12805: NOP4
12809: PPUSH
12810: NOP4
// end else
12814: GO 12917
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
12816: NOP4
12820: PPUSH
12821: NOP4
12825: PUSH
12826: NOP4
12830: ARRAY
12831: PPUSH
12832: NOP4
12836: NOT
12837: PUSH
12838: NOP4
12842: PPUSH
12843: NOP4
12847: PPUSH
12848: NOP4
12852: PUSH
12853: LD_INT 40
12855: GREATEREQUAL
12856: AND
12857: PUSH
12858: NOP4
12862: PPUSH
12863: NOP4
12867: PUSH
12868: LD_INT 650
12870: LESSEQUAL
12871: OR
12872: PUSH
12873: NOP4
12877: PPUSH
12878: NOP4
12882: PUSH
12883: NOP4
12887: ARRAY
12888: PPUSH
12889: NOP4
12893: NOT
12894: AND
12895: IFFALSE 12917
// ComMoveToArea ( i , mc_parking [ base ] ) ;
12897: NOP4
12901: PPUSH
12902: NOP4
12906: PUSH
12907: NOP4
12911: ARRAY
12912: PPUSH
12913: NOP4
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
12917: NOP4
12921: PPUSH
12922: NOP4
12926: PUSH
12927: LD_INT 998
12929: LESS
12930: PUSH
12931: NOP4
12935: PPUSH
12936: NOP4
12940: PUSH
12941: LD_INT 1
12943: EQUAL
12944: AND
12945: PUSH
12946: NOP4
12950: PPUSH
12951: NOP4
12955: AND
12956: PUSH
12957: NOP4
12961: PPUSH
12962: NOP4
12966: PUSH
12967: NOP4
12971: ARRAY
12972: PPUSH
12973: NOP4
12977: AND
12978: IFFALSE 13032
// begin mech := IsDrivenBy ( i ) ;
12980: NOP4
12984: PUSH
12985: NOP4
12989: PPUSH
12990: NOP4
12994: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
12995: NOP4
12999: PPUSH
13000: NOP4
// AddComRepairVehicle ( mech , i ) ;
13004: NOP4
13008: PPUSH
13009: NOP4
13013: PPUSH
13014: NOP4
// AddComEnterUnit ( mech , i ) ;
13018: NOP4
13022: PPUSH
13023: NOP4
13027: PPUSH
13028: NOP4
// end ; end ; unit_human :
13032: GO 13299
13034: LD_INT 1
13036: DOUBLE
13037: EQUAL
13038: IFTRUE 13042
13040: GO 13298
13042: POP
// begin b := IsInUnit ( i ) ;
13043: NOP4
13047: PUSH
13048: NOP4
13052: PPUSH
13053: NOP4
13057: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
13058: NOP4
13062: PUSH
13063: NOP4
13067: NOT
13068: PUSH
13069: NOP4
13073: PPUSH
13074: NOP4
13078: PUSH
13079: LD_INT 32
13081: PUSH
13082: LD_INT 31
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: IN
13089: OR
13090: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
13091: NOP4
13095: PUSH
13096: NOP4
13100: PPUSH
13101: LD_INT 21
13103: PUSH
13104: LD_INT 2
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PPUSH
13111: NOP4
13115: PUSH
13116: LD_INT 1
13118: LESSEQUAL
13119: OR
13120: PUSH
13121: NOP4
13125: AND
13126: PUSH
13127: NOP4
13131: PUSH
13132: NOP4
13136: IN
13137: NOT
13138: AND
13139: IFFALSE 13232
// begin if b then
13141: NOP4
13145: IFFALSE 13194
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
13147: NOP4
13151: PPUSH
13152: NOP4
13156: PPUSH
13157: NOP4
13161: PPUSH
13162: NOP4
13166: PPUSH
13167: NOP4
13171: PUSH
13172: LD_INT 10
13174: LESS
13175: PUSH
13176: NOP4
13180: PPUSH
13181: NOP4
13185: PUSH
13186: LD_INT 7
13188: NONEQUAL
13189: AND
13190: IFFALSE 13194
// continue ;
13192: GO 12509
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
13194: NOP4
13198: PUSH
13199: NOP4
13203: PPUSH
13204: NOP4
13208: PUSH
13209: LD_INT 1
13211: PLUS
13212: PPUSH
13213: NOP4
13217: PPUSH
13218: NOP4
13222: ST_TO_ADDR
// ComExitBuilding ( i ) ;
13223: NOP4
13227: PPUSH
13228: NOP4
// end ; if sold_defenders then
13232: NOP4
13236: IFFALSE 13296
// if i in sold_defenders then
13238: NOP4
13242: PUSH
13243: NOP4
13247: IN
13248: IFFALSE 13296
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
13250: NOP4
13254: PPUSH
13255: NOP4
13259: NOT
13260: PUSH
13261: NOP4
13265: PPUSH
13266: NOP4
13270: PPUSH
13271: NOP4
13275: PUSH
13276: LD_INT 30
13278: LESS
13279: AND
13280: IFFALSE 13296
// ComAttackUnit ( i , e ) ;
13282: NOP4
13286: PPUSH
13287: NOP4
13291: PPUSH
13292: NOP4
// end ; end ; end ;
13296: GO 13299
13298: POP
// if IsDead ( i ) then
13299: NOP4
13303: PPUSH
13304: NOP4
13308: IFFALSE 13326
// defenders := defenders diff i ;
13310: NOP4
13314: PUSH
13315: NOP4
13319: PUSH
13320: NOP4
13324: DIFF
13325: ST_TO_ADDR
// end ;
13326: GO 12509
13328: POP
13329: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
13330: NOP4
13334: NOT
13335: PUSH
13336: NOP4
13340: NOT
13341: OR
13342: PUSH
13343: NOP4
13347: PUSH
13348: NOP4
13352: ARRAY
13353: NOT
13354: OR
13355: IFFALSE 12413
// MC_Reset ( base , 18 ) ;
13357: NOP4
13361: PPUSH
13362: LD_INT 18
13364: PPUSH
13365: NOP4
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
13369: NOP4
13373: PUSH
13374: NOP4
13378: PUSH
13379: NOP4
13383: PPUSH
13384: LD_INT 2
13386: PUSH
13387: LD_INT 25
13389: PUSH
13390: LD_INT 1
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: LD_INT 25
13399: PUSH
13400: LD_INT 5
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 25
13409: PUSH
13410: LD_INT 8
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: LD_INT 25
13419: PUSH
13420: LD_INT 9
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: PPUSH
13434: NOP4
13438: DIFF
13439: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
13440: NOP4
13444: NOT
13445: PUSH
13446: NOP4
13450: PPUSH
13451: LD_INT 21
13453: PUSH
13454: LD_INT 2
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PPUSH
13461: NOP4
13465: AND
13466: IFFALSE 13804
// begin tmp := FilterByTag ( defenders , 19 ) ;
13468: NOP4
13472: PUSH
13473: NOP4
13477: PPUSH
13478: LD_INT 19
13480: PPUSH
13481: NOP4
13485: ST_TO_ADDR
// if tmp then
13486: NOP4
13490: IFFALSE 13560
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
13492: NOP4
13496: PUSH
13497: NOP4
13501: PPUSH
13502: LD_INT 25
13504: PUSH
13505: LD_INT 3
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PPUSH
13512: NOP4
13516: ST_TO_ADDR
// if tmp then
13517: NOP4
13521: IFFALSE 13560
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
13523: NOP4
13527: PUSH
13528: NOP4
13532: PPUSH
13533: NOP4
13537: PPUSH
13538: NOP4
13542: PUSH
13543: NOP4
13547: ARRAY
13548: PUSH
13549: NOP4
13553: UNION
13554: PPUSH
13555: NOP4
13559: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
13560: NOP4
13564: PPUSH
13565: LD_INT 19
13567: PPUSH
13568: NOP4
// repeat wait ( 0 0$1 ) ;
13572: LD_INT 35
13574: PPUSH
13575: NOP4
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
13579: NOP4
13583: PUSH
13584: NOP4
13588: ARRAY
13589: NOT
13590: PUSH
13591: NOP4
13595: PUSH
13596: NOP4
13600: ARRAY
13601: PUSH
13602: EMPTY
13603: EQUAL
13604: OR
13605: IFFALSE 13642
// begin for i in defenders do
13607: NOP4
13611: PUSH
13612: NOP4
13616: PUSH
13617: FOR_IN
13618: IFFALSE 13631
// ComStop ( i ) ;
13620: NOP4
13624: PPUSH
13625: NOP4
13629: GO 13617
13631: POP
13632: POP
// defenders := [ ] ;
13633: NOP4
13637: PUSH
13638: EMPTY
13639: ST_TO_ADDR
// exit ;
13640: GO 13828
// end ; for i in defenders do
13642: NOP4
13646: PUSH
13647: NOP4
13651: PUSH
13652: FOR_IN
13653: IFFALSE 13742
// begin if not IsInArea ( i , mc_parking [ base ] ) then
13655: NOP4
13659: PPUSH
13660: NOP4
13664: PUSH
13665: NOP4
13669: ARRAY
13670: PPUSH
13671: NOP4
13675: NOT
13676: IFFALSE 13700
// ComMoveToArea ( i , mc_parking [ base ] ) else
13678: NOP4
13682: PPUSH
13683: NOP4
13687: PUSH
13688: NOP4
13692: ARRAY
13693: PPUSH
13694: NOP4
13698: GO 13740
// if GetControl ( i ) = control_manual then
13700: NOP4
13704: PPUSH
13705: NOP4
13709: PUSH
13710: LD_INT 1
13712: EQUAL
13713: IFFALSE 13740
// if IsDrivenBy ( i ) then
13715: NOP4
13719: PPUSH
13720: NOP4
13724: IFFALSE 13740
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
13726: NOP4
13730: PPUSH
13731: NOP4
13735: PPUSH
13736: NOP4
// end ;
13740: GO 13652
13742: POP
13743: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
13744: NOP4
13748: PPUSH
13749: LD_INT 95
13751: PUSH
13752: NOP4
13756: PUSH
13757: NOP4
13761: ARRAY
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PPUSH
13767: NOP4
13771: PUSH
13772: NOP4
13776: EQUAL
13777: PUSH
13778: NOP4
13782: PUSH
13783: NOP4
13787: ARRAY
13788: OR
13789: PUSH
13790: NOP4
13794: PUSH
13795: NOP4
13799: ARRAY
13800: NOT
13801: OR
13802: IFFALSE 13572
// end ; MC_Reset ( base , 19 ) ;
13804: NOP4
13808: PPUSH
13809: LD_INT 19
13811: PPUSH
13812: NOP4
// MC_Reset ( base , 20 ) ;
13816: NOP4
13820: PPUSH
13821: LD_INT 20
13823: PPUSH
13824: NOP4
// end ;
13828: LD_VAR 0 4
13832: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13833: LD_INT 0
13835: PPUSH
13836: PPUSH
13837: PPUSH
13838: PPUSH
// result := false ;
13839: NOP4
13843: PUSH
13844: LD_INT 0
13846: ST_TO_ADDR
// side := GetSide ( unit ) ;
13847: NOP4
13851: PUSH
13852: NOP4
13856: PPUSH
13857: NOP4
13861: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13862: NOP4
13866: PUSH
13867: NOP4
13871: PPUSH
13872: NOP4
13876: ST_TO_ADDR
// case nat of 1 :
13877: NOP4
13881: PUSH
13882: LD_INT 1
13884: DOUBLE
13885: EQUAL
13886: IFTRUE 13890
13888: GO 13901
13890: POP
// tech := tech_lassight ; 2 :
13891: NOP4
13895: PUSH
13896: LD_INT 12
13898: ST_TO_ADDR
13899: GO 13940
13901: LD_INT 2
13903: DOUBLE
13904: EQUAL
13905: IFTRUE 13909
13907: GO 13920
13909: POP
// tech := tech_mortar ; 3 :
13910: NOP4
13914: PUSH
13915: LD_INT 41
13917: ST_TO_ADDR
13918: GO 13940
13920: LD_INT 3
13922: DOUBLE
13923: EQUAL
13924: IFTRUE 13928
13926: GO 13939
13928: POP
// tech := tech_bazooka ; end ;
13929: NOP4
13933: PUSH
13934: LD_INT 44
13936: ST_TO_ADDR
13937: GO 13940
13939: POP
// if Researched ( side , tech ) then
13940: NOP4
13944: PPUSH
13945: NOP4
13949: PPUSH
13950: NOP4
13954: IFFALSE 13981
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13956: NOP4
13960: PUSH
13961: LD_INT 5
13963: PUSH
13964: LD_INT 8
13966: PUSH
13967: LD_INT 9
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: LIST
13974: PUSH
13975: NOP4
13979: ARRAY
13980: ST_TO_ADDR
// end ;
13981: LD_VAR 0 2
13985: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13986: LD_INT 0
13988: PPUSH
13989: PPUSH
13990: PPUSH
// if not mines then
13991: NOP4
13995: NOT
13996: IFFALSE 14000
// exit ;
13998: GO 14144
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14000: NOP4
14004: PUSH
14005: LD_INT 81
14007: PUSH
14008: NOP4
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 3
14019: PUSH
14020: LD_INT 21
14022: PUSH
14023: LD_INT 3
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PPUSH
14038: NOP4
14042: ST_TO_ADDR
// for i in mines do
14043: NOP4
14047: PUSH
14048: NOP4
14052: PUSH
14053: FOR_IN
14054: IFFALSE 14142
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14056: NOP4
14060: PUSH
14061: LD_INT 1
14063: ARRAY
14064: PPUSH
14065: NOP4
14069: PUSH
14070: LD_INT 2
14072: ARRAY
14073: PPUSH
14074: NOP4
14078: NOT
14079: IFFALSE 14083
// continue ;
14081: GO 14053
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14083: NOP4
14087: PUSH
14088: LD_INT 1
14090: ARRAY
14091: PPUSH
14092: NOP4
14096: PUSH
14097: LD_INT 2
14099: ARRAY
14100: PPUSH
14101: NOP4
14105: PUSH
14106: NOP4
14110: IN
14111: IFFALSE 14140
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14113: NOP4
14117: PUSH
14118: LD_INT 1
14120: ARRAY
14121: PPUSH
14122: NOP4
14126: PUSH
14127: LD_INT 2
14129: ARRAY
14130: PPUSH
14131: NOP4
14135: PPUSH
14136: NOP4
// end ;
14140: GO 14053
14142: POP
14143: POP
// end ;
14144: LD_VAR 0 3
14148: RET
// export function Count ( array ) ; var i ; begin
14149: LD_INT 0
14151: PPUSH
14152: PPUSH
// result := 0 ;
14153: NOP4
14157: PUSH
14158: LD_INT 0
14160: ST_TO_ADDR
// for i in array do
14161: NOP4
14165: PUSH
14166: NOP4
14170: PUSH
14171: FOR_IN
14172: IFFALSE 14196
// if i then
14174: NOP4
14178: IFFALSE 14194
// result := result + 1 ;
14180: NOP4
14184: PUSH
14185: NOP4
14189: PUSH
14190: LD_INT 1
14192: PLUS
14193: ST_TO_ADDR
14194: GO 14171
14196: POP
14197: POP
// end ;
14198: LD_VAR 0 2
14202: RET
// export function IsEmpty ( building ) ; begin
14203: LD_INT 0
14205: PPUSH
// if not building then
14206: NOP4
14210: NOT
14211: IFFALSE 14215
// exit ;
14213: GO 14258
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14215: NOP4
14219: PUSH
14220: NOP4
14224: PUSH
14225: LD_INT 22
14227: PUSH
14228: NOP4
14232: PPUSH
14233: NOP4
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 58
14244: PUSH
14245: EMPTY
14246: LIST
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PPUSH
14252: NOP4
14256: IN
14257: ST_TO_ADDR
// end ;
14258: LD_VAR 0 2
14262: RET
// export function IsNotFull ( building ) ; begin
14263: LD_INT 0
14265: PPUSH
// if not building then
14266: NOP4
14270: NOT
14271: IFFALSE 14275
// exit ;
14273: GO 14294
// result := UnitsInside ( building ) < 6 ;
14275: NOP4
14279: PUSH
14280: NOP4
14284: PPUSH
14285: NOP4
14289: PUSH
14290: LD_INT 6
14292: LESS
14293: ST_TO_ADDR
// end ;
14294: LD_VAR 0 2
14298: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
14299: LD_INT 0
14301: PPUSH
14302: PPUSH
14303: PPUSH
14304: PPUSH
// tmp := [ ] ;
14305: NOP4
14309: PUSH
14310: EMPTY
14311: ST_TO_ADDR
// list := [ ] ;
14312: NOP4
14316: PUSH
14317: EMPTY
14318: ST_TO_ADDR
// for i = 16 to 25 do
14319: NOP4
14323: PUSH
14324: DOUBLE
14325: LD_INT 16
14327: DEC
14328: ST_TO_ADDR
14329: LD_INT 25
14331: PUSH
14332: FOR_TO
14333: IFFALSE 14406
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
14335: NOP4
14339: PUSH
14340: NOP4
14344: PUSH
14345: LD_INT 22
14347: PUSH
14348: NOP4
14352: PPUSH
14353: NOP4
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 91
14364: PUSH
14365: NOP4
14369: PUSH
14370: LD_INT 6
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: PUSH
14378: LD_INT 30
14380: PUSH
14381: NOP4
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: LIST
14394: PUSH
14395: EMPTY
14396: LIST
14397: PPUSH
14398: NOP4
14402: ADD
14403: ST_TO_ADDR
14404: GO 14332
14406: POP
14407: POP
// for i = 1 to tmp do
14408: NOP4
14412: PUSH
14413: DOUBLE
14414: LD_INT 1
14416: DEC
14417: ST_TO_ADDR
14418: NOP4
14422: PUSH
14423: FOR_TO
14424: IFFALSE 14512
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
14426: NOP4
14430: PUSH
14431: NOP4
14435: PUSH
14436: NOP4
14440: PUSH
14441: NOP4
14445: ARRAY
14446: PPUSH
14447: NOP4
14451: PUSH
14452: NOP4
14456: PUSH
14457: NOP4
14461: ARRAY
14462: PPUSH
14463: NOP4
14467: PUSH
14468: NOP4
14472: PUSH
14473: NOP4
14477: ARRAY
14478: PPUSH
14479: NOP4
14483: PUSH
14484: NOP4
14488: PUSH
14489: NOP4
14493: ARRAY
14494: PPUSH
14495: NOP4
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: PUSH
14506: EMPTY
14507: LIST
14508: ADD
14509: ST_TO_ADDR
14510: GO 14423
14512: POP
14513: POP
// result := list ;
14514: NOP4
14518: PUSH
14519: NOP4
14523: ST_TO_ADDR
// end ;
14524: LD_VAR 0 2
14528: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
14529: LD_INT 0
14531: PPUSH
14532: PPUSH
14533: PPUSH
14534: PPUSH
14535: PPUSH
14536: PPUSH
14537: PPUSH
// if not factory then
14538: NOP4
14542: NOT
14543: IFFALSE 14547
// exit ;
14545: GO 15140
// if control = control_apeman then
14547: NOP4
14551: PUSH
14552: LD_INT 5
14554: EQUAL
14555: IFFALSE 14664
// begin tmp := UnitsInside ( factory ) ;
14557: NOP4
14561: PUSH
14562: NOP4
14566: PPUSH
14567: NOP4
14571: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
14572: NOP4
14576: PPUSH
14577: LD_INT 25
14579: PUSH
14580: LD_INT 12
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PPUSH
14587: NOP4
14591: NOT
14592: IFFALSE 14602
// control := control_manual ;
14594: NOP4
14598: PUSH
14599: LD_INT 1
14601: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
14602: NOP4
14606: PUSH
14607: NOP4
14611: PPUSH
14612: NOP4
14616: ST_TO_ADDR
// if tmp then
14617: NOP4
14621: IFFALSE 14664
// begin for i in tmp do
14623: NOP4
14627: PUSH
14628: NOP4
14632: PUSH
14633: FOR_IN
14634: IFFALSE 14662
// if i [ 1 ] = b_ext_radio then
14636: NOP4
14640: PUSH
14641: LD_INT 1
14643: ARRAY
14644: PUSH
14645: LD_INT 22
14647: EQUAL
14648: IFFALSE 14660
// begin control := control_remote ;
14650: NOP4
14654: PUSH
14655: LD_INT 2
14657: ST_TO_ADDR
// break ;
14658: GO 14662
// end ;
14660: GO 14633
14662: POP
14663: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14664: NOP4
14668: PPUSH
14669: NOP4
14673: PPUSH
14674: NOP4
14678: PPUSH
14679: NOP4
14683: PPUSH
14684: NOP4
14688: PPUSH
14689: NOP4
14693: IFFALSE 14728
// begin result := [ chassis , engine , control , weapon ] ;
14695: NOP4
14699: PUSH
14700: NOP4
14704: PUSH
14705: NOP4
14709: PUSH
14710: NOP4
14714: PUSH
14715: NOP4
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: ST_TO_ADDR
// exit ;
14726: GO 15140
// end ; _chassis := AvailableChassisList ( factory ) ;
14728: NOP4
14732: PUSH
14733: NOP4
14737: PPUSH
14738: NOP4
14742: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14743: NOP4
14747: PUSH
14748: NOP4
14752: PPUSH
14753: NOP4
14757: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14758: NOP4
14762: PUSH
14763: NOP4
14767: PPUSH
14768: NOP4
14772: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14773: NOP4
14777: PUSH
14778: NOP4
14782: PPUSH
14783: NOP4
14787: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
14788: NOP4
14792: NOT
14793: PUSH
14794: NOP4
14798: NOT
14799: OR
14800: PUSH
14801: NOP4
14805: NOT
14806: OR
14807: PUSH
14808: NOP4
14812: NOT
14813: OR
14814: IFFALSE 14849
// begin result := [ chassis , engine , control , weapon ] ;
14816: NOP4
14820: PUSH
14821: NOP4
14825: PUSH
14826: NOP4
14830: PUSH
14831: NOP4
14835: PUSH
14836: NOP4
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: ST_TO_ADDR
// exit ;
14847: GO 15140
// end ; if not chassis in _chassis then
14849: NOP4
14853: PUSH
14854: NOP4
14858: IN
14859: NOT
14860: IFFALSE 14886
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14862: NOP4
14866: PUSH
14867: NOP4
14871: PUSH
14872: LD_INT 1
14874: PPUSH
14875: NOP4
14879: PPUSH
14880: NOP4
14884: ARRAY
14885: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14886: NOP4
14890: PPUSH
14891: NOP4
14895: PPUSH
14896: NOP4
14900: NOT
14901: IFFALSE 14960
// repeat engine := _engine [ 1 ] ;
14903: NOP4
14907: PUSH
14908: NOP4
14912: PUSH
14913: LD_INT 1
14915: ARRAY
14916: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14917: NOP4
14921: PUSH
14922: NOP4
14926: PPUSH
14927: LD_INT 1
14929: PPUSH
14930: NOP4
14934: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14935: NOP4
14939: PPUSH
14940: NOP4
14944: PPUSH
14945: NOP4
14949: PUSH
14950: NOP4
14954: PUSH
14955: EMPTY
14956: EQUAL
14957: OR
14958: IFFALSE 14903
// if not control in _control then
14960: NOP4
14964: PUSH
14965: NOP4
14969: IN
14970: NOT
14971: IFFALSE 14997
// control := _control [ rand ( 1 , _control ) ] ;
14973: NOP4
14977: PUSH
14978: NOP4
14982: PUSH
14983: LD_INT 1
14985: PPUSH
14986: NOP4
14990: PPUSH
14991: NOP4
14995: ARRAY
14996: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14997: NOP4
15001: PPUSH
15002: NOP4
15006: PPUSH
15007: NOP4
15011: NOT
15012: IFFALSE 15071
// repeat weapon := _weapon [ 1 ] ;
15014: NOP4
15018: PUSH
15019: NOP4
15023: PUSH
15024: LD_INT 1
15026: ARRAY
15027: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15028: NOP4
15032: PUSH
15033: NOP4
15037: PPUSH
15038: LD_INT 1
15040: PPUSH
15041: NOP4
15045: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15046: NOP4
15050: PPUSH
15051: NOP4
15055: PPUSH
15056: NOP4
15060: PUSH
15061: NOP4
15065: PUSH
15066: EMPTY
15067: EQUAL
15068: OR
15069: IFFALSE 15014
// result := [ ] ;
15071: NOP4
15075: PUSH
15076: EMPTY
15077: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15078: NOP4
15082: PPUSH
15083: NOP4
15087: PPUSH
15088: NOP4
15092: PPUSH
15093: NOP4
15097: PPUSH
15098: NOP4
15102: PPUSH
15103: NOP4
15107: IFFALSE 15140
// result := [ chassis , engine , control , weapon ] ;
15109: NOP4
15113: PUSH
15114: NOP4
15118: PUSH
15119: NOP4
15123: PUSH
15124: NOP4
15128: PUSH
15129: NOP4
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: ST_TO_ADDR
// end ;
15140: LD_VAR 0 6
15144: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15145: LD_INT 0
15147: PPUSH
// if not chassis or not engine then
15148: NOP4
15152: NOT
15153: PUSH
15154: NOP4
15158: NOT
15159: OR
15160: IFFALSE 15164
// exit ;
15162: GO 15360
// case engine of engine_solar :
15164: NOP4
15168: PUSH
15169: LD_INT 2
15171: DOUBLE
15172: EQUAL
15173: IFTRUE 15177
15175: GO 15215
15177: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15178: NOP4
15182: PUSH
15183: LD_INT 11
15185: PUSH
15186: LD_INT 12
15188: PUSH
15189: LD_INT 13
15191: PUSH
15192: LD_INT 14
15194: PUSH
15195: LD_INT 1
15197: PUSH
15198: LD_INT 2
15200: PUSH
15201: LD_INT 3
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: ST_TO_ADDR
15213: GO 15344
15215: LD_INT 1
15217: DOUBLE
15218: EQUAL
15219: IFTRUE 15223
15221: GO 15285
15223: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15224: NOP4
15228: PUSH
15229: LD_INT 11
15231: PUSH
15232: LD_INT 12
15234: PUSH
15235: LD_INT 13
15237: PUSH
15238: LD_INT 14
15240: PUSH
15241: LD_INT 1
15243: PUSH
15244: LD_INT 2
15246: PUSH
15247: LD_INT 3
15249: PUSH
15250: LD_INT 4
15252: PUSH
15253: LD_INT 5
15255: PUSH
15256: LD_INT 21
15258: PUSH
15259: LD_INT 23
15261: PUSH
15262: LD_INT 22
15264: PUSH
15265: LD_INT 24
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: ST_TO_ADDR
15283: GO 15344
15285: LD_INT 3
15287: DOUBLE
15288: EQUAL
15289: IFTRUE 15293
15291: GO 15343
15293: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15294: NOP4
15298: PUSH
15299: LD_INT 13
15301: PUSH
15302: LD_INT 14
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: LD_INT 4
15313: PUSH
15314: LD_INT 5
15316: PUSH
15317: LD_INT 21
15319: PUSH
15320: LD_INT 22
15322: PUSH
15323: LD_INT 23
15325: PUSH
15326: LD_INT 24
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: ST_TO_ADDR
15341: GO 15344
15343: POP
// result := ( chassis in result ) ;
15344: NOP4
15348: PUSH
15349: NOP4
15353: PUSH
15354: NOP4
15358: IN
15359: ST_TO_ADDR
// end ;
15360: LD_VAR 0 3
15364: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
15365: LD_INT 0
15367: PPUSH
// if not chassis or not weapon then
15368: NOP4
15372: NOT
15373: PUSH
15374: NOP4
15378: NOT
15379: OR
15380: IFFALSE 15384
// exit ;
15382: GO 16410
// case weapon of us_machine_gun :
15384: NOP4
15388: PUSH
15389: LD_INT 2
15391: DOUBLE
15392: EQUAL
15393: IFTRUE 15397
15395: GO 15427
15397: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
15398: NOP4
15402: PUSH
15403: LD_INT 1
15405: PUSH
15406: LD_INT 2
15408: PUSH
15409: LD_INT 3
15411: PUSH
15412: LD_INT 4
15414: PUSH
15415: LD_INT 5
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: ST_TO_ADDR
15425: GO 16394
15427: LD_INT 3
15429: DOUBLE
15430: EQUAL
15431: IFTRUE 15435
15433: GO 15465
15435: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
15436: NOP4
15440: PUSH
15441: LD_INT 1
15443: PUSH
15444: LD_INT 2
15446: PUSH
15447: LD_INT 3
15449: PUSH
15450: LD_INT 4
15452: PUSH
15453: LD_INT 5
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: ST_TO_ADDR
15463: GO 16394
15465: LD_INT 11
15467: DOUBLE
15468: EQUAL
15469: IFTRUE 15473
15471: GO 15503
15473: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
15474: NOP4
15478: PUSH
15479: LD_INT 1
15481: PUSH
15482: LD_INT 2
15484: PUSH
15485: LD_INT 3
15487: PUSH
15488: LD_INT 4
15490: PUSH
15491: LD_INT 5
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: ST_TO_ADDR
15501: GO 16394
15503: LD_INT 4
15505: DOUBLE
15506: EQUAL
15507: IFTRUE 15511
15509: GO 15537
15511: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
15512: NOP4
15516: PUSH
15517: LD_INT 2
15519: PUSH
15520: LD_INT 3
15522: PUSH
15523: LD_INT 4
15525: PUSH
15526: LD_INT 5
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: ST_TO_ADDR
15535: GO 16394
15537: LD_INT 5
15539: DOUBLE
15540: EQUAL
15541: IFTRUE 15545
15543: GO 15571
15545: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
15546: NOP4
15550: PUSH
15551: LD_INT 2
15553: PUSH
15554: LD_INT 3
15556: PUSH
15557: LD_INT 4
15559: PUSH
15560: LD_INT 5
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: ST_TO_ADDR
15569: GO 16394
15571: LD_INT 9
15573: DOUBLE
15574: EQUAL
15575: IFTRUE 15579
15577: GO 15605
15579: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
15580: NOP4
15584: PUSH
15585: LD_INT 2
15587: PUSH
15588: LD_INT 3
15590: PUSH
15591: LD_INT 4
15593: PUSH
15594: LD_INT 5
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: ST_TO_ADDR
15603: GO 16394
15605: LD_INT 7
15607: DOUBLE
15608: EQUAL
15609: IFTRUE 15613
15611: GO 15639
15613: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15614: NOP4
15618: PUSH
15619: LD_INT 2
15621: PUSH
15622: LD_INT 3
15624: PUSH
15625: LD_INT 4
15627: PUSH
15628: LD_INT 5
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: ST_TO_ADDR
15637: GO 16394
15639: LD_INT 12
15641: DOUBLE
15642: EQUAL
15643: IFTRUE 15647
15645: GO 15673
15647: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15648: NOP4
15652: PUSH
15653: LD_INT 2
15655: PUSH
15656: LD_INT 3
15658: PUSH
15659: LD_INT 4
15661: PUSH
15662: LD_INT 5
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: ST_TO_ADDR
15671: GO 16394
15673: LD_INT 13
15675: DOUBLE
15676: EQUAL
15677: IFTRUE 15681
15679: GO 15707
15681: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15682: NOP4
15686: PUSH
15687: LD_INT 2
15689: PUSH
15690: LD_INT 3
15692: PUSH
15693: LD_INT 4
15695: PUSH
15696: LD_INT 5
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: ST_TO_ADDR
15705: GO 16394
15707: LD_INT 14
15709: DOUBLE
15710: EQUAL
15711: IFTRUE 15715
15713: GO 15733
15715: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15716: NOP4
15720: PUSH
15721: LD_INT 4
15723: PUSH
15724: LD_INT 5
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: ST_TO_ADDR
15731: GO 16394
15733: LD_INT 6
15735: DOUBLE
15736: EQUAL
15737: IFTRUE 15741
15739: GO 15759
15741: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15742: NOP4
15746: PUSH
15747: LD_INT 4
15749: PUSH
15750: LD_INT 5
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: ST_TO_ADDR
15757: GO 16394
15759: LD_INT 10
15761: DOUBLE
15762: EQUAL
15763: IFTRUE 15767
15765: GO 15785
15767: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15768: NOP4
15772: PUSH
15773: LD_INT 4
15775: PUSH
15776: LD_INT 5
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: ST_TO_ADDR
15783: GO 16394
15785: LD_INT 22
15787: DOUBLE
15788: EQUAL
15789: IFTRUE 15793
15791: GO 15819
15793: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15794: NOP4
15798: PUSH
15799: LD_INT 11
15801: PUSH
15802: LD_INT 12
15804: PUSH
15805: LD_INT 13
15807: PUSH
15808: LD_INT 14
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: ST_TO_ADDR
15817: GO 16394
15819: LD_INT 23
15821: DOUBLE
15822: EQUAL
15823: IFTRUE 15827
15825: GO 15853
15827: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15828: NOP4
15832: PUSH
15833: LD_INT 11
15835: PUSH
15836: LD_INT 12
15838: PUSH
15839: LD_INT 13
15841: PUSH
15842: LD_INT 14
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: ST_TO_ADDR
15851: GO 16394
15853: LD_INT 24
15855: DOUBLE
15856: EQUAL
15857: IFTRUE 15861
15859: GO 15887
15861: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15862: NOP4
15866: PUSH
15867: LD_INT 11
15869: PUSH
15870: LD_INT 12
15872: PUSH
15873: LD_INT 13
15875: PUSH
15876: LD_INT 14
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: ST_TO_ADDR
15885: GO 16394
15887: LD_INT 30
15889: DOUBLE
15890: EQUAL
15891: IFTRUE 15895
15893: GO 15921
15895: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15896: NOP4
15900: PUSH
15901: LD_INT 11
15903: PUSH
15904: LD_INT 12
15906: PUSH
15907: LD_INT 13
15909: PUSH
15910: LD_INT 14
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: ST_TO_ADDR
15919: GO 16394
15921: LD_INT 25
15923: DOUBLE
15924: EQUAL
15925: IFTRUE 15929
15927: GO 15947
15929: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15930: NOP4
15934: PUSH
15935: LD_INT 13
15937: PUSH
15938: LD_INT 14
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: ST_TO_ADDR
15945: GO 16394
15947: LD_INT 27
15949: DOUBLE
15950: EQUAL
15951: IFTRUE 15955
15953: GO 15973
15955: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15956: NOP4
15960: PUSH
15961: LD_INT 13
15963: PUSH
15964: LD_INT 14
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: ST_TO_ADDR
15971: GO 16394
15973: LD_INT 28
15975: DOUBLE
15976: EQUAL
15977: IFTRUE 15981
15979: GO 15999
15981: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15982: NOP4
15986: PUSH
15987: LD_INT 13
15989: PUSH
15990: LD_INT 14
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: ST_TO_ADDR
15997: GO 16394
15999: LD_INT 29
16001: DOUBLE
16002: EQUAL
16003: IFTRUE 16007
16005: GO 16025
16007: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16008: NOP4
16012: PUSH
16013: LD_INT 13
16015: PUSH
16016: LD_INT 14
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: ST_TO_ADDR
16023: GO 16394
16025: LD_INT 31
16027: DOUBLE
16028: EQUAL
16029: IFTRUE 16033
16031: GO 16051
16033: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16034: NOP4
16038: PUSH
16039: LD_INT 13
16041: PUSH
16042: LD_INT 14
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: ST_TO_ADDR
16049: GO 16394
16051: LD_INT 26
16053: DOUBLE
16054: EQUAL
16055: IFTRUE 16059
16057: GO 16077
16059: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16060: NOP4
16064: PUSH
16065: LD_INT 13
16067: PUSH
16068: LD_INT 14
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: ST_TO_ADDR
16075: GO 16394
16077: LD_INT 42
16079: DOUBLE
16080: EQUAL
16081: IFTRUE 16085
16083: GO 16111
16085: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16086: NOP4
16090: PUSH
16091: LD_INT 21
16093: PUSH
16094: LD_INT 22
16096: PUSH
16097: LD_INT 23
16099: PUSH
16100: LD_INT 24
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: ST_TO_ADDR
16109: GO 16394
16111: LD_INT 43
16113: DOUBLE
16114: EQUAL
16115: IFTRUE 16119
16117: GO 16145
16119: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16120: NOP4
16124: PUSH
16125: LD_INT 21
16127: PUSH
16128: LD_INT 22
16130: PUSH
16131: LD_INT 23
16133: PUSH
16134: LD_INT 24
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: ST_TO_ADDR
16143: GO 16394
16145: LD_INT 44
16147: DOUBLE
16148: EQUAL
16149: IFTRUE 16153
16151: GO 16179
16153: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16154: NOP4
16158: PUSH
16159: LD_INT 21
16161: PUSH
16162: LD_INT 22
16164: PUSH
16165: LD_INT 23
16167: PUSH
16168: LD_INT 24
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: ST_TO_ADDR
16177: GO 16394
16179: LD_INT 45
16181: DOUBLE
16182: EQUAL
16183: IFTRUE 16187
16185: GO 16213
16187: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16188: NOP4
16192: PUSH
16193: LD_INT 21
16195: PUSH
16196: LD_INT 22
16198: PUSH
16199: LD_INT 23
16201: PUSH
16202: LD_INT 24
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: ST_TO_ADDR
16211: GO 16394
16213: LD_INT 49
16215: DOUBLE
16216: EQUAL
16217: IFTRUE 16221
16219: GO 16247
16221: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
16222: NOP4
16226: PUSH
16227: LD_INT 21
16229: PUSH
16230: LD_INT 22
16232: PUSH
16233: LD_INT 23
16235: PUSH
16236: LD_INT 24
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: ST_TO_ADDR
16245: GO 16394
16247: LD_INT 51
16249: DOUBLE
16250: EQUAL
16251: IFTRUE 16255
16253: GO 16281
16255: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
16256: NOP4
16260: PUSH
16261: LD_INT 21
16263: PUSH
16264: LD_INT 22
16266: PUSH
16267: LD_INT 23
16269: PUSH
16270: LD_INT 24
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: ST_TO_ADDR
16279: GO 16394
16281: LD_INT 52
16283: DOUBLE
16284: EQUAL
16285: IFTRUE 16289
16287: GO 16315
16289: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
16290: NOP4
16294: PUSH
16295: LD_INT 21
16297: PUSH
16298: LD_INT 22
16300: PUSH
16301: LD_INT 23
16303: PUSH
16304: LD_INT 24
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: ST_TO_ADDR
16313: GO 16394
16315: LD_INT 53
16317: DOUBLE
16318: EQUAL
16319: IFTRUE 16323
16321: GO 16341
16323: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
16324: NOP4
16328: PUSH
16329: LD_INT 23
16331: PUSH
16332: LD_INT 24
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: ST_TO_ADDR
16339: GO 16394
16341: LD_INT 46
16343: DOUBLE
16344: EQUAL
16345: IFTRUE 16349
16347: GO 16367
16349: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
16350: NOP4
16354: PUSH
16355: LD_INT 23
16357: PUSH
16358: LD_INT 24
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: ST_TO_ADDR
16365: GO 16394
16367: LD_INT 47
16369: DOUBLE
16370: EQUAL
16371: IFTRUE 16375
16373: GO 16393
16375: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16376: NOP4
16380: PUSH
16381: LD_INT 23
16383: PUSH
16384: LD_INT 24
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: ST_TO_ADDR
16391: GO 16394
16393: POP
// result := ( chassis in result ) ;
16394: NOP4
16398: PUSH
16399: NOP4
16403: PUSH
16404: NOP4
16408: IN
16409: ST_TO_ADDR
// end ;
16410: LD_VAR 0 3
16414: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
16415: LD_INT 0
16417: PPUSH
16418: PPUSH
16419: PPUSH
16420: PPUSH
16421: PPUSH
16422: PPUSH
16423: PPUSH
// result := array ;
16424: NOP4
16428: PUSH
16429: NOP4
16433: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
16434: NOP4
16438: NOT
16439: PUSH
16440: NOP4
16444: NOT
16445: OR
16446: PUSH
16447: NOP4
16451: NOT
16452: OR
16453: PUSH
16454: NOP4
16458: PUSH
16459: NOP4
16463: GREATER
16464: OR
16465: PUSH
16466: NOP4
16470: PUSH
16471: NOP4
16475: GREATER
16476: OR
16477: IFFALSE 16481
// exit ;
16479: GO 16777
// if direction then
16481: NOP4
16485: IFFALSE 16549
// begin d := 1 ;
16487: NOP4
16491: PUSH
16492: LD_INT 1
16494: ST_TO_ADDR
// if i_from > i_to then
16495: NOP4
16499: PUSH
16500: NOP4
16504: GREATER
16505: IFFALSE 16531
// length := ( array - i_from ) + i_to else
16507: NOP4
16511: PUSH
16512: NOP4
16516: PUSH
16517: NOP4
16521: MINUS
16522: PUSH
16523: NOP4
16527: PLUS
16528: ST_TO_ADDR
16529: GO 16547
// length := i_to - i_from ;
16531: NOP4
16535: PUSH
16536: NOP4
16540: PUSH
16541: NOP4
16545: MINUS
16546: ST_TO_ADDR
// end else
16547: GO 16610
// begin d := - 1 ;
16549: NOP4
16553: PUSH
16554: LD_INT 1
16556: NEG
16557: ST_TO_ADDR
// if i_from > i_to then
16558: NOP4
16562: PUSH
16563: NOP4
16567: GREATER
16568: IFFALSE 16588
// length := i_from - i_to else
16570: NOP4
16574: PUSH
16575: NOP4
16579: PUSH
16580: NOP4
16584: MINUS
16585: ST_TO_ADDR
16586: GO 16610
// length := ( array - i_to ) + i_from ;
16588: NOP4
16592: PUSH
16593: NOP4
16597: PUSH
16598: NOP4
16602: MINUS
16603: PUSH
16604: NOP4
16608: PLUS
16609: ST_TO_ADDR
// end ; if not length then
16610: NOP4
16614: NOT
16615: IFFALSE 16619
// exit ;
16617: GO 16777
// tmp := array ;
16619: NOP4
16623: PUSH
16624: NOP4
16628: ST_TO_ADDR
// for i = 1 to length do
16629: NOP4
16633: PUSH
16634: DOUBLE
16635: LD_INT 1
16637: DEC
16638: ST_TO_ADDR
16639: NOP4
16643: PUSH
16644: FOR_TO
16645: IFFALSE 16765
// begin for j = 1 to array do
16647: NOP4
16651: PUSH
16652: DOUBLE
16653: LD_INT 1
16655: DEC
16656: ST_TO_ADDR
16657: NOP4
16661: PUSH
16662: FOR_TO
16663: IFFALSE 16751
// begin k := j + d ;
16665: NOP4
16669: PUSH
16670: NOP4
16674: PUSH
16675: NOP4
16679: PLUS
16680: ST_TO_ADDR
// if k > array then
16681: NOP4
16685: PUSH
16686: NOP4
16690: GREATER
16691: IFFALSE 16701
// k := 1 ;
16693: NOP4
16697: PUSH
16698: LD_INT 1
16700: ST_TO_ADDR
// if not k then
16701: NOP4
16705: NOT
16706: IFFALSE 16718
// k := array ;
16708: NOP4
16712: PUSH
16713: NOP4
16717: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16718: NOP4
16722: PUSH
16723: NOP4
16727: PPUSH
16728: NOP4
16732: PPUSH
16733: NOP4
16737: PUSH
16738: NOP4
16742: ARRAY
16743: PPUSH
16744: NOP4
16748: ST_TO_ADDR
// end ;
16749: GO 16662
16751: POP
16752: POP
// array := tmp ;
16753: NOP4
16757: PUSH
16758: NOP4
16762: ST_TO_ADDR
// end ;
16763: GO 16644
16765: POP
16766: POP
// result := array ;
16767: NOP4
16771: PUSH
16772: NOP4
16776: ST_TO_ADDR
// end ;
16777: LD_VAR 0 5
16781: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16782: LD_INT 0
16784: PPUSH
16785: PPUSH
// result := 0 ;
16786: NOP4
16790: PUSH
16791: LD_INT 0
16793: ST_TO_ADDR
// if not array or not value in array then
16794: NOP4
16798: NOT
16799: PUSH
16800: NOP4
16804: PUSH
16805: NOP4
16809: IN
16810: NOT
16811: OR
16812: IFFALSE 16816
// exit ;
16814: GO 16870
// for i = 1 to array do
16816: NOP4
16820: PUSH
16821: DOUBLE
16822: LD_INT 1
16824: DEC
16825: ST_TO_ADDR
16826: NOP4
16830: PUSH
16831: FOR_TO
16832: IFFALSE 16868
// if value = array [ i ] then
16834: NOP4
16838: PUSH
16839: NOP4
16843: PUSH
16844: NOP4
16848: ARRAY
16849: EQUAL
16850: IFFALSE 16866
// begin result := i ;
16852: NOP4
16856: PUSH
16857: NOP4
16861: ST_TO_ADDR
// exit ;
16862: POP
16863: POP
16864: GO 16870
// end ;
16866: GO 16831
16868: POP
16869: POP
// end ;
16870: LD_VAR 0 3
16874: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16875: LD_INT 0
16877: PPUSH
// vc_chassis := chassis ;
16878: LD_ADDR_OWVAR 37
16882: PUSH
16883: NOP4
16887: ST_TO_ADDR
// vc_engine := engine ;
16888: LD_ADDR_OWVAR 39
16892: PUSH
16893: NOP4
16897: ST_TO_ADDR
// vc_control := control ;
16898: LD_ADDR_OWVAR 38
16902: PUSH
16903: NOP4
16907: ST_TO_ADDR
// vc_weapon := weapon ;
16908: LD_ADDR_OWVAR 40
16912: PUSH
16913: NOP4
16917: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16918: LD_ADDR_OWVAR 41
16922: PUSH
16923: NOP4
16927: ST_TO_ADDR
// end ;
16928: LD_VAR 0 6
16932: RET
// export function WantPlant ( unit ) ; var task ; begin
16933: LD_INT 0
16935: PPUSH
16936: PPUSH
// result := false ;
16937: NOP4
16941: PUSH
16942: LD_INT 0
16944: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16945: NOP4
16949: PUSH
16950: NOP4
16954: PPUSH
16955: NOP4
16959: ST_TO_ADDR
// if task then
16960: NOP4
16964: IFFALSE 16992
// if task [ 1 ] [ 1 ] = p then
16966: NOP4
16970: PUSH
16971: LD_INT 1
16973: ARRAY
16974: PUSH
16975: LD_INT 1
16977: ARRAY
16978: PUSH
16979: LD_STRING p
16981: EQUAL
16982: IFFALSE 16992
// result := true ;
16984: NOP4
16988: PUSH
16989: LD_INT 1
16991: ST_TO_ADDR
// end ;
16992: LD_VAR 0 2
16996: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16997: LD_INT 0
16999: PPUSH
17000: PPUSH
17001: PPUSH
17002: PPUSH
// if pos < 1 then
17003: NOP4
17007: PUSH
17008: LD_INT 1
17010: LESS
17011: IFFALSE 17015
// exit ;
17013: GO 17318
// if pos = 1 then
17015: NOP4
17019: PUSH
17020: LD_INT 1
17022: EQUAL
17023: IFFALSE 17056
// result := Replace ( arr , pos [ 1 ] , value ) else
17025: NOP4
17029: PUSH
17030: NOP4
17034: PPUSH
17035: NOP4
17039: PUSH
17040: LD_INT 1
17042: ARRAY
17043: PPUSH
17044: NOP4
17048: PPUSH
17049: NOP4
17053: ST_TO_ADDR
17054: GO 17318
// begin tmp := arr ;
17056: NOP4
17060: PUSH
17061: NOP4
17065: ST_TO_ADDR
// s_arr := [ tmp ] ;
17066: NOP4
17070: PUSH
17071: NOP4
17075: PUSH
17076: EMPTY
17077: LIST
17078: ST_TO_ADDR
// for i = 1 to pos - 1 do
17079: NOP4
17083: PUSH
17084: DOUBLE
17085: LD_INT 1
17087: DEC
17088: ST_TO_ADDR
17089: NOP4
17093: PUSH
17094: LD_INT 1
17096: MINUS
17097: PUSH
17098: FOR_TO
17099: IFFALSE 17144
// begin tmp := tmp [ pos [ i ] ] ;
17101: NOP4
17105: PUSH
17106: NOP4
17110: PUSH
17111: NOP4
17115: PUSH
17116: NOP4
17120: ARRAY
17121: ARRAY
17122: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17123: NOP4
17127: PUSH
17128: NOP4
17132: PUSH
17133: NOP4
17137: PUSH
17138: EMPTY
17139: LIST
17140: ADD
17141: ST_TO_ADDR
// end ;
17142: GO 17098
17144: POP
17145: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17146: NOP4
17150: PUSH
17151: NOP4
17155: PPUSH
17156: NOP4
17160: PUSH
17161: NOP4
17165: ARRAY
17166: PPUSH
17167: NOP4
17171: PPUSH
17172: NOP4
17176: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17177: NOP4
17181: PUSH
17182: NOP4
17186: PPUSH
17187: NOP4
17191: PPUSH
17192: NOP4
17196: PPUSH
17197: NOP4
17201: ST_TO_ADDR
// for i = s_arr downto 2 do
17202: NOP4
17206: PUSH
17207: DOUBLE
17208: NOP4
17212: INC
17213: ST_TO_ADDR
17214: LD_INT 2
17216: PUSH
17217: FOR_DOWNTO
17218: IFFALSE 17302
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17220: NOP4
17224: PUSH
17225: NOP4
17229: PUSH
17230: NOP4
17234: PUSH
17235: LD_INT 1
17237: MINUS
17238: ARRAY
17239: PPUSH
17240: NOP4
17244: PUSH
17245: NOP4
17249: PUSH
17250: LD_INT 1
17252: MINUS
17253: ARRAY
17254: PPUSH
17255: NOP4
17259: PUSH
17260: NOP4
17264: ARRAY
17265: PPUSH
17266: NOP4
17270: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
17271: NOP4
17275: PUSH
17276: NOP4
17280: PPUSH
17281: NOP4
17285: PUSH
17286: LD_INT 1
17288: MINUS
17289: PPUSH
17290: NOP4
17294: PPUSH
17295: NOP4
17299: ST_TO_ADDR
// end ;
17300: GO 17217
17302: POP
17303: POP
// result := s_arr [ 1 ] ;
17304: NOP4
17308: PUSH
17309: NOP4
17313: PUSH
17314: LD_INT 1
17316: ARRAY
17317: ST_TO_ADDR
// end ; end ;
17318: LD_VAR 0 4
17322: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
17323: LD_INT 0
17325: PPUSH
17326: PPUSH
// if not list then
17327: NOP4
17331: NOT
17332: IFFALSE 17336
// exit ;
17334: GO 17427
// i := list [ pos1 ] ;
17336: NOP4
17340: PUSH
17341: NOP4
17345: PUSH
17346: NOP4
17350: ARRAY
17351: ST_TO_ADDR
// if not i then
17352: NOP4
17356: NOT
17357: IFFALSE 17361
// exit ;
17359: GO 17427
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
17361: NOP4
17365: PUSH
17366: NOP4
17370: PPUSH
17371: NOP4
17375: PPUSH
17376: NOP4
17380: PUSH
17381: NOP4
17385: ARRAY
17386: PPUSH
17387: NOP4
17391: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
17392: NOP4
17396: PUSH
17397: NOP4
17401: PPUSH
17402: NOP4
17406: PPUSH
17407: NOP4
17411: PPUSH
17412: NOP4
17416: ST_TO_ADDR
// result := list ;
17417: NOP4
17421: PUSH
17422: NOP4
17426: ST_TO_ADDR
// end ;
17427: LD_VAR 0 4
17431: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
17432: LD_INT 0
17434: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
17435: NOP4
17439: PUSH
17440: NOP4
17444: PPUSH
17445: NOP4
17449: PPUSH
17450: NOP4
17454: PPUSH
17455: NOP4
17459: PPUSH
17460: NOP4
17464: PPUSH
17465: NOP4
17469: PPUSH
17470: NOP4
17474: PPUSH
17475: NOP4
17479: ST_TO_ADDR
// end ;
17480: LD_VAR 0 5
17484: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17485: LD_INT 0
17487: PPUSH
17488: PPUSH
17489: PPUSH
17490: PPUSH
// if not list then
17491: NOP4
17495: NOT
17496: IFFALSE 17500
// exit ;
17498: GO 17888
// result := [ ] ;
17500: NOP4
17504: PUSH
17505: EMPTY
17506: ST_TO_ADDR
// for i in list do
17507: NOP4
17511: PUSH
17512: NOP4
17516: PUSH
17517: FOR_IN
17518: IFFALSE 17720
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17520: NOP4
17524: PUSH
17525: NOP4
17529: PPUSH
17530: NOP4
17534: PPUSH
17535: NOP4
17539: PPUSH
17540: NOP4
17544: ST_TO_ADDR
// if not result then
17545: NOP4
17549: NOT
17550: IFFALSE 17576
// result := [ [ i , tmp ] ] else
17552: NOP4
17556: PUSH
17557: NOP4
17561: PUSH
17562: NOP4
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: EMPTY
17572: LIST
17573: ST_TO_ADDR
17574: GO 17718
// begin if result [ result ] [ 2 ] < tmp then
17576: NOP4
17580: PUSH
17581: NOP4
17585: ARRAY
17586: PUSH
17587: LD_INT 2
17589: ARRAY
17590: PUSH
17591: NOP4
17595: LESS
17596: IFFALSE 17638
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17598: NOP4
17602: PUSH
17603: NOP4
17607: PPUSH
17608: NOP4
17612: PUSH
17613: LD_INT 1
17615: PLUS
17616: PPUSH
17617: NOP4
17621: PUSH
17622: NOP4
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PPUSH
17631: NOP4
17635: ST_TO_ADDR
17636: GO 17718
// for j = 1 to result do
17638: NOP4
17642: PUSH
17643: DOUBLE
17644: LD_INT 1
17646: DEC
17647: ST_TO_ADDR
17648: NOP4
17652: PUSH
17653: FOR_TO
17654: IFFALSE 17716
// begin if tmp < result [ j ] [ 2 ] then
17656: NOP4
17660: PUSH
17661: NOP4
17665: PUSH
17666: NOP4
17670: ARRAY
17671: PUSH
17672: LD_INT 2
17674: ARRAY
17675: LESS
17676: IFFALSE 17714
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17678: NOP4
17682: PUSH
17683: NOP4
17687: PPUSH
17688: NOP4
17692: PPUSH
17693: NOP4
17697: PUSH
17698: NOP4
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PPUSH
17707: NOP4
17711: ST_TO_ADDR
// break ;
17712: GO 17716
// end ; end ;
17714: GO 17653
17716: POP
17717: POP
// end ; end ;
17718: GO 17517
17720: POP
17721: POP
// if result and not asc then
17722: NOP4
17726: PUSH
17727: NOP4
17731: NOT
17732: AND
17733: IFFALSE 17808
// begin tmp := result ;
17735: NOP4
17739: PUSH
17740: NOP4
17744: ST_TO_ADDR
// for i = tmp downto 1 do
17745: NOP4
17749: PUSH
17750: DOUBLE
17751: NOP4
17755: INC
17756: ST_TO_ADDR
17757: LD_INT 1
17759: PUSH
17760: FOR_DOWNTO
17761: IFFALSE 17806
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17763: NOP4
17767: PUSH
17768: NOP4
17772: PPUSH
17773: NOP4
17777: PUSH
17778: NOP4
17782: MINUS
17783: PUSH
17784: LD_INT 1
17786: PLUS
17787: PPUSH
17788: NOP4
17792: PUSH
17793: NOP4
17797: ARRAY
17798: PPUSH
17799: NOP4
17803: ST_TO_ADDR
17804: GO 17760
17806: POP
17807: POP
// end ; tmp := [ ] ;
17808: NOP4
17812: PUSH
17813: EMPTY
17814: ST_TO_ADDR
// if mode then
17815: NOP4
17819: IFFALSE 17888
// begin for i = 1 to result do
17821: NOP4
17825: PUSH
17826: DOUBLE
17827: LD_INT 1
17829: DEC
17830: ST_TO_ADDR
17831: NOP4
17835: PUSH
17836: FOR_TO
17837: IFFALSE 17876
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17839: NOP4
17843: PUSH
17844: NOP4
17848: PPUSH
17849: NOP4
17853: PPUSH
17854: NOP4
17858: PUSH
17859: NOP4
17863: ARRAY
17864: PUSH
17865: LD_INT 1
17867: ARRAY
17868: PPUSH
17869: NOP4
17873: ST_TO_ADDR
17874: GO 17836
17876: POP
17877: POP
// result := tmp ;
17878: NOP4
17882: PUSH
17883: NOP4
17887: ST_TO_ADDR
// end ; end ;
17888: LD_VAR 0 6
17892: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17893: LD_INT 0
17895: PPUSH
17896: PPUSH
17897: PPUSH
17898: PPUSH
17899: PPUSH
17900: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17901: NOP4
17905: PUSH
17906: LD_INT 0
17908: PUSH
17909: LD_INT 0
17911: PUSH
17912: LD_INT 0
17914: PUSH
17915: EMPTY
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: ST_TO_ADDR
// if not x or not y then
17923: NOP4
17927: NOT
17928: PUSH
17929: NOP4
17933: NOT
17934: OR
17935: IFFALSE 17939
// exit ;
17937: GO 19585
// if not range then
17939: NOP4
17943: NOT
17944: IFFALSE 17954
// range := 10 ;
17946: NOP4
17950: PUSH
17951: LD_INT 10
17953: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17954: NOP4
17958: PUSH
17959: LD_INT 81
17961: PUSH
17962: NOP4
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 92
17973: PUSH
17974: NOP4
17978: PUSH
17979: NOP4
17983: PUSH
17984: NOP4
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 3
17997: PUSH
17998: LD_INT 21
18000: PUSH
18001: LD_INT 3
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: LIST
18016: PPUSH
18017: NOP4
18021: ST_TO_ADDR
// if not tmp then
18022: NOP4
18026: NOT
18027: IFFALSE 18031
// exit ;
18029: GO 19585
// for i in tmp do
18031: NOP4
18035: PUSH
18036: NOP4
18040: PUSH
18041: FOR_IN
18042: IFFALSE 19560
// begin points := [ 0 , 0 , 0 ] ;
18044: NOP4
18048: PUSH
18049: LD_INT 0
18051: PUSH
18052: LD_INT 0
18054: PUSH
18055: LD_INT 0
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: LIST
18062: ST_TO_ADDR
// bpoints := 1 ;
18063: NOP4
18067: PUSH
18068: LD_INT 1
18070: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18071: NOP4
18075: PPUSH
18076: NOP4
18080: PUSH
18081: LD_INT 1
18083: DOUBLE
18084: EQUAL
18085: IFTRUE 18089
18087: GO 18667
18089: POP
// begin if GetClass ( i ) = 1 then
18090: NOP4
18094: PPUSH
18095: NOP4
18099: PUSH
18100: LD_INT 1
18102: EQUAL
18103: IFFALSE 18124
// points := [ 10 , 5 , 3 ] ;
18105: NOP4
18109: PUSH
18110: LD_INT 10
18112: PUSH
18113: LD_INT 5
18115: PUSH
18116: LD_INT 3
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18124: NOP4
18128: PPUSH
18129: NOP4
18133: PUSH
18134: LD_INT 2
18136: PUSH
18137: LD_INT 3
18139: PUSH
18140: LD_INT 4
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: LIST
18147: IN
18148: IFFALSE 18169
// points := [ 3 , 2 , 1 ] ;
18150: NOP4
18154: PUSH
18155: LD_INT 3
18157: PUSH
18158: LD_INT 2
18160: PUSH
18161: LD_INT 1
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: LIST
18168: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18169: NOP4
18173: PPUSH
18174: NOP4
18178: PUSH
18179: LD_INT 5
18181: EQUAL
18182: IFFALSE 18203
// points := [ 130 , 5 , 2 ] ;
18184: NOP4
18188: PUSH
18189: LD_INT 130
18191: PUSH
18192: LD_INT 5
18194: PUSH
18195: LD_INT 2
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: LIST
18202: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18203: NOP4
18207: PPUSH
18208: NOP4
18212: PUSH
18213: LD_INT 8
18215: EQUAL
18216: IFFALSE 18237
// points := [ 35 , 35 , 30 ] ;
18218: NOP4
18222: PUSH
18223: LD_INT 35
18225: PUSH
18226: LD_INT 35
18228: PUSH
18229: LD_INT 30
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: LIST
18236: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18237: NOP4
18241: PPUSH
18242: NOP4
18246: PUSH
18247: LD_INT 9
18249: EQUAL
18250: IFFALSE 18271
// points := [ 20 , 55 , 40 ] ;
18252: NOP4
18256: PUSH
18257: LD_INT 20
18259: PUSH
18260: LD_INT 55
18262: PUSH
18263: LD_INT 40
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: LIST
18270: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18271: NOP4
18275: PPUSH
18276: NOP4
18280: PUSH
18281: LD_INT 12
18283: PUSH
18284: LD_INT 16
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: IN
18291: IFFALSE 18312
// points := [ 5 , 3 , 2 ] ;
18293: NOP4
18297: PUSH
18298: LD_INT 5
18300: PUSH
18301: LD_INT 3
18303: PUSH
18304: LD_INT 2
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: LIST
18311: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18312: NOP4
18316: PPUSH
18317: NOP4
18321: PUSH
18322: LD_INT 17
18324: EQUAL
18325: IFFALSE 18346
// points := [ 100 , 50 , 75 ] ;
18327: NOP4
18331: PUSH
18332: LD_INT 100
18334: PUSH
18335: LD_INT 50
18337: PUSH
18338: LD_INT 75
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: LIST
18345: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18346: NOP4
18350: PPUSH
18351: NOP4
18355: PUSH
18356: LD_INT 15
18358: EQUAL
18359: IFFALSE 18380
// points := [ 10 , 5 , 3 ] ;
18361: NOP4
18365: PUSH
18366: LD_INT 10
18368: PUSH
18369: LD_INT 5
18371: PUSH
18372: LD_INT 3
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: LIST
18379: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18380: NOP4
18384: PPUSH
18385: NOP4
18389: PUSH
18390: LD_INT 14
18392: EQUAL
18393: IFFALSE 18414
// points := [ 10 , 0 , 0 ] ;
18395: NOP4
18399: PUSH
18400: LD_INT 10
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: LIST
18413: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18414: NOP4
18418: PPUSH
18419: NOP4
18423: PUSH
18424: LD_INT 11
18426: EQUAL
18427: IFFALSE 18448
// points := [ 30 , 10 , 5 ] ;
18429: NOP4
18433: PUSH
18434: LD_INT 30
18436: PUSH
18437: LD_INT 10
18439: PUSH
18440: LD_INT 5
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: LIST
18447: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18448: NOP4
18452: PPUSH
18453: LD_INT 5
18455: PPUSH
18456: NOP4
18460: PUSH
18461: LD_INT 2
18463: EQUAL
18464: IFFALSE 18481
// bpoints := bpoints * 1.8 ;
18466: NOP4
18470: PUSH
18471: NOP4
18475: PUSH
18476: LD_REAL  1.80000000000000E+0000
18479: MUL
18480: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18481: NOP4
18485: PPUSH
18486: NOP4
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: LD_INT 2
18496: PUSH
18497: LD_INT 3
18499: PUSH
18500: LD_INT 4
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: IN
18509: PUSH
18510: NOP4
18514: PPUSH
18515: LD_INT 51
18517: PPUSH
18518: NOP4
18522: PUSH
18523: LD_INT 2
18525: EQUAL
18526: AND
18527: IFFALSE 18544
// bpoints := bpoints * 1.2 ;
18529: NOP4
18533: PUSH
18534: NOP4
18538: PUSH
18539: LD_REAL  1.20000000000000E+0000
18542: MUL
18543: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18544: NOP4
18548: PPUSH
18549: NOP4
18553: PUSH
18554: LD_INT 5
18556: PUSH
18557: LD_INT 7
18559: PUSH
18560: LD_INT 9
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: LIST
18567: IN
18568: PUSH
18569: NOP4
18573: PPUSH
18574: LD_INT 52
18576: PPUSH
18577: NOP4
18581: PUSH
18582: LD_INT 2
18584: EQUAL
18585: AND
18586: IFFALSE 18603
// bpoints := bpoints * 1.5 ;
18588: NOP4
18592: PUSH
18593: NOP4
18597: PUSH
18598: LD_REAL  1.50000000000000E+0000
18601: MUL
18602: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18603: NOP4
18607: PPUSH
18608: LD_INT 66
18610: PPUSH
18611: NOP4
18615: PUSH
18616: LD_INT 2
18618: EQUAL
18619: IFFALSE 18636
// bpoints := bpoints * 1.1 ;
18621: NOP4
18625: PUSH
18626: NOP4
18630: PUSH
18631: LD_REAL  1.10000000000000E+0000
18634: MUL
18635: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18636: NOP4
18640: PUSH
18641: NOP4
18645: PUSH
18646: NOP4
18650: PPUSH
18651: LD_INT 1
18653: PPUSH
18654: NOP4
18658: PUSH
18659: LD_REAL  1.15000000000000E+0000
18662: MUL
18663: MUL
18664: ST_TO_ADDR
// end ; unit_vehicle :
18665: GO 19489
18667: LD_INT 2
18669: DOUBLE
18670: EQUAL
18671: IFTRUE 18675
18673: GO 19477
18675: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18676: NOP4
18680: PPUSH
18681: NOP4
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: LD_INT 42
18691: PUSH
18692: LD_INT 24
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: LIST
18699: IN
18700: IFFALSE 18721
// points := [ 25 , 5 , 3 ] ;
18702: NOP4
18706: PUSH
18707: LD_INT 25
18709: PUSH
18710: LD_INT 5
18712: PUSH
18713: LD_INT 3
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: LIST
18720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18721: NOP4
18725: PPUSH
18726: NOP4
18730: PUSH
18731: LD_INT 4
18733: PUSH
18734: LD_INT 43
18736: PUSH
18737: LD_INT 25
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: LIST
18744: IN
18745: IFFALSE 18766
// points := [ 40 , 15 , 5 ] ;
18747: NOP4
18751: PUSH
18752: LD_INT 40
18754: PUSH
18755: LD_INT 15
18757: PUSH
18758: LD_INT 5
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: LIST
18765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18766: NOP4
18770: PPUSH
18771: NOP4
18775: PUSH
18776: LD_INT 3
18778: PUSH
18779: LD_INT 23
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: IN
18786: IFFALSE 18807
// points := [ 7 , 25 , 8 ] ;
18788: NOP4
18792: PUSH
18793: LD_INT 7
18795: PUSH
18796: LD_INT 25
18798: PUSH
18799: LD_INT 8
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: LIST
18806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18807: NOP4
18811: PPUSH
18812: NOP4
18816: PUSH
18817: LD_INT 5
18819: PUSH
18820: LD_INT 27
18822: PUSH
18823: LD_INT 44
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: LIST
18830: IN
18831: IFFALSE 18852
// points := [ 14 , 50 , 16 ] ;
18833: NOP4
18837: PUSH
18838: LD_INT 14
18840: PUSH
18841: LD_INT 50
18843: PUSH
18844: LD_INT 16
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18852: NOP4
18856: PPUSH
18857: NOP4
18861: PUSH
18862: LD_INT 6
18864: PUSH
18865: LD_INT 46
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: IN
18872: IFFALSE 18893
// points := [ 32 , 120 , 70 ] ;
18874: NOP4
18878: PUSH
18879: LD_INT 32
18881: PUSH
18882: LD_INT 120
18884: PUSH
18885: LD_INT 70
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: LIST
18892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
18893: NOP4
18897: PPUSH
18898: NOP4
18902: PUSH
18903: LD_INT 7
18905: PUSH
18906: LD_INT 28
18908: PUSH
18909: LD_INT 45
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: LIST
18916: IN
18917: IFFALSE 18938
// points := [ 35 , 20 , 45 ] ;
18919: NOP4
18923: PUSH
18924: LD_INT 35
18926: PUSH
18927: LD_INT 20
18929: PUSH
18930: LD_INT 45
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18938: NOP4
18942: PPUSH
18943: NOP4
18947: PUSH
18948: LD_INT 47
18950: PUSH
18951: EMPTY
18952: LIST
18953: IN
18954: IFFALSE 18975
// points := [ 67 , 45 , 75 ] ;
18956: NOP4
18960: PUSH
18961: LD_INT 67
18963: PUSH
18964: LD_INT 45
18966: PUSH
18967: LD_INT 75
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: LIST
18974: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18975: NOP4
18979: PPUSH
18980: NOP4
18984: PUSH
18985: LD_INT 26
18987: PUSH
18988: EMPTY
18989: LIST
18990: IN
18991: IFFALSE 19012
// points := [ 120 , 30 , 80 ] ;
18993: NOP4
18997: PUSH
18998: LD_INT 120
19000: PUSH
19001: LD_INT 30
19003: PUSH
19004: LD_INT 80
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: LIST
19011: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19012: NOP4
19016: PPUSH
19017: NOP4
19021: PUSH
19022: LD_INT 22
19024: PUSH
19025: EMPTY
19026: LIST
19027: IN
19028: IFFALSE 19049
// points := [ 40 , 1 , 1 ] ;
19030: NOP4
19034: PUSH
19035: LD_INT 40
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: LIST
19048: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19049: NOP4
19053: PPUSH
19054: NOP4
19058: PUSH
19059: LD_INT 29
19061: PUSH
19062: EMPTY
19063: LIST
19064: IN
19065: IFFALSE 19086
// points := [ 70 , 200 , 400 ] ;
19067: NOP4
19071: PUSH
19072: LD_INT 70
19074: PUSH
19075: LD_INT 200
19077: PUSH
19078: LD_INT 400
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: LIST
19085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19086: NOP4
19090: PPUSH
19091: NOP4
19095: PUSH
19096: LD_INT 14
19098: PUSH
19099: LD_INT 53
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: IN
19106: IFFALSE 19127
// points := [ 40 , 10 , 20 ] ;
19108: NOP4
19112: PUSH
19113: LD_INT 40
19115: PUSH
19116: LD_INT 10
19118: PUSH
19119: LD_INT 20
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: LIST
19126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19127: NOP4
19131: PPUSH
19132: NOP4
19136: PUSH
19137: LD_INT 9
19139: PUSH
19140: EMPTY
19141: LIST
19142: IN
19143: IFFALSE 19164
// points := [ 5 , 70 , 20 ] ;
19145: NOP4
19149: PUSH
19150: LD_INT 5
19152: PUSH
19153: LD_INT 70
19155: PUSH
19156: LD_INT 20
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: LIST
19163: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19164: NOP4
19168: PPUSH
19169: NOP4
19173: PUSH
19174: LD_INT 10
19176: PUSH
19177: EMPTY
19178: LIST
19179: IN
19180: IFFALSE 19201
// points := [ 35 , 110 , 70 ] ;
19182: NOP4
19186: PUSH
19187: LD_INT 35
19189: PUSH
19190: LD_INT 110
19192: PUSH
19193: LD_INT 70
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: LIST
19200: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19201: NOP4
19205: PPUSH
19206: NOP4
19210: PUSH
19211: LD_INT 25
19213: EQUAL
19214: IFFALSE 19235
// points := [ 80 , 65 , 100 ] ;
19216: NOP4
19220: PUSH
19221: LD_INT 80
19223: PUSH
19224: LD_INT 65
19226: PUSH
19227: LD_INT 100
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: LIST
19234: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19235: NOP4
19239: PPUSH
19240: NOP4
19244: PUSH
19245: LD_INT 1
19247: EQUAL
19248: IFFALSE 19283
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19250: NOP4
19254: PUSH
19255: NOP4
19259: PUSH
19260: NOP4
19264: PPUSH
19265: NOP4
19269: PPUSH
19270: LD_INT 3
19272: PPUSH
19273: NOP4
19277: PUSH
19278: LD_INT 4
19280: MUL
19281: MUL
19282: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19283: NOP4
19287: PPUSH
19288: NOP4
19292: PUSH
19293: LD_INT 2
19295: EQUAL
19296: IFFALSE 19347
// begin j := IsControledBy ( i ) ;
19298: NOP4
19302: PUSH
19303: NOP4
19307: PPUSH
19308: NOP4
19312: ST_TO_ADDR
// if j then
19313: NOP4
19317: IFFALSE 19347
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19319: NOP4
19323: PUSH
19324: NOP4
19328: PUSH
19329: NOP4
19333: PPUSH
19334: LD_INT 3
19336: PPUSH
19337: NOP4
19341: PUSH
19342: LD_INT 3
19344: MUL
19345: MUL
19346: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19347: NOP4
19351: PPUSH
19352: NOP4
19356: PUSH
19357: LD_INT 5
19359: PUSH
19360: LD_INT 6
19362: PUSH
19363: LD_INT 46
19365: PUSH
19366: LD_INT 44
19368: PUSH
19369: LD_INT 47
19371: PUSH
19372: LD_INT 45
19374: PUSH
19375: LD_INT 28
19377: PUSH
19378: LD_INT 7
19380: PUSH
19381: LD_INT 27
19383: PUSH
19384: LD_INT 29
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: IN
19399: PUSH
19400: NOP4
19404: PPUSH
19405: LD_INT 52
19407: PPUSH
19408: NOP4
19412: PUSH
19413: LD_INT 2
19415: EQUAL
19416: AND
19417: IFFALSE 19434
// bpoints := bpoints * 1.2 ;
19419: NOP4
19423: PUSH
19424: NOP4
19428: PUSH
19429: LD_REAL  1.20000000000000E+0000
19432: MUL
19433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19434: NOP4
19438: PPUSH
19439: NOP4
19443: PUSH
19444: LD_INT 6
19446: PUSH
19447: LD_INT 46
19449: PUSH
19450: LD_INT 47
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: LIST
19457: IN
19458: IFFALSE 19475
// bpoints := bpoints * 1.2 ;
19460: NOP4
19464: PUSH
19465: NOP4
19469: PUSH
19470: LD_REAL  1.20000000000000E+0000
19473: MUL
19474: ST_TO_ADDR
// end ; unit_building :
19475: GO 19489
19477: LD_INT 3
19479: DOUBLE
19480: EQUAL
19481: IFTRUE 19485
19483: GO 19488
19485: POP
// ; end ;
19486: GO 19489
19488: POP
// for j = 1 to 3 do
19489: NOP4
19493: PUSH
19494: DOUBLE
19495: LD_INT 1
19497: DEC
19498: ST_TO_ADDR
19499: LD_INT 3
19501: PUSH
19502: FOR_TO
19503: IFFALSE 19556
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19505: NOP4
19509: PUSH
19510: NOP4
19514: PPUSH
19515: NOP4
19519: PPUSH
19520: NOP4
19524: PUSH
19525: NOP4
19529: ARRAY
19530: PUSH
19531: NOP4
19535: PUSH
19536: NOP4
19540: ARRAY
19541: PUSH
19542: NOP4
19546: MUL
19547: PLUS
19548: PPUSH
19549: NOP4
19553: ST_TO_ADDR
19554: GO 19502
19556: POP
19557: POP
// end ;
19558: GO 18041
19560: POP
19561: POP
// result := Replace ( result , 4 , tmp ) ;
19562: NOP4
19566: PUSH
19567: NOP4
19571: PPUSH
19572: LD_INT 4
19574: PPUSH
19575: NOP4
19579: PPUSH
19580: NOP4
19584: ST_TO_ADDR
// end ;
19585: LD_VAR 0 5
19589: RET
// export function DangerAtRange ( unit , range ) ; begin
19590: LD_INT 0
19592: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19593: NOP4
19597: PUSH
19598: NOP4
19602: PPUSH
19603: NOP4
19607: PPUSH
19608: NOP4
19612: PPUSH
19613: NOP4
19617: PPUSH
19618: NOP4
19622: PPUSH
19623: NOP4
19627: PPUSH
19628: NOP4
19632: PPUSH
19633: NOP4
19637: ST_TO_ADDR
// end ;
19638: LD_VAR 0 3
19642: RET
// export function DangerInArea ( side , area ) ; begin
19643: LD_INT 0
19645: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19646: NOP4
19650: PUSH
19651: NOP4
19655: PPUSH
19656: LD_INT 81
19658: PUSH
19659: NOP4
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PPUSH
19668: NOP4
19672: ST_TO_ADDR
// end ;
19673: LD_VAR 0 3
19677: RET
// export function IsExtension ( b ) ; begin
19678: LD_INT 0
19680: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19681: NOP4
19685: PUSH
19686: NOP4
19690: PUSH
19691: LD_INT 23
19693: PUSH
19694: LD_INT 20
19696: PUSH
19697: LD_INT 22
19699: PUSH
19700: LD_INT 17
19702: PUSH
19703: LD_INT 24
19705: PUSH
19706: LD_INT 21
19708: PUSH
19709: LD_INT 19
19711: PUSH
19712: LD_INT 16
19714: PUSH
19715: LD_INT 25
19717: PUSH
19718: LD_INT 18
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: IN
19733: ST_TO_ADDR
// end ;
19734: LD_VAR 0 2
19738: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
19739: LD_INT 0
19741: PPUSH
19742: PPUSH
19743: PPUSH
// result := [ ] ;
19744: NOP4
19748: PUSH
19749: EMPTY
19750: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19751: NOP4
19755: PUSH
19756: NOP4
19760: PPUSH
19761: LD_INT 21
19763: PUSH
19764: LD_INT 3
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PPUSH
19771: NOP4
19775: ST_TO_ADDR
// if not tmp then
19776: NOP4
19780: NOT
19781: IFFALSE 19785
// exit ;
19783: GO 19843
// for i in tmp do
19785: NOP4
19789: PUSH
19790: NOP4
19794: PUSH
19795: FOR_IN
19796: IFFALSE 19831
// if GetBase ( i ) <> base then
19798: NOP4
19802: PPUSH
19803: NOP4
19807: PUSH
19808: NOP4
19812: NONEQUAL
19813: IFFALSE 19829
// ComLinkToBase ( base , i ) ;
19815: NOP4
19819: PPUSH
19820: NOP4
19824: PPUSH
19825: NOP4
19829: GO 19795
19831: POP
19832: POP
// result := tmp ;
19833: NOP4
19837: PUSH
19838: NOP4
19842: ST_TO_ADDR
// end ;
19843: LD_VAR 0 3
19847: RET
// export function ComComplete ( unit , b ) ; var i ; begin
19848: LD_INT 0
19850: PPUSH
19851: PPUSH
// if BuildingStatus ( b ) = bs_build then
19852: NOP4
19856: PPUSH
19857: NOP4
19861: PUSH
19862: LD_INT 1
19864: EQUAL
19865: IFFALSE 19925
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19867: NOP4
19871: PPUSH
19872: LD_STRING h
19874: PUSH
19875: NOP4
19879: PPUSH
19880: NOP4
19884: PUSH
19885: NOP4
19889: PPUSH
19890: NOP4
19894: PUSH
19895: NOP4
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: LD_INT 0
19905: PUSH
19906: LD_INT 0
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: PUSH
19918: EMPTY
19919: LIST
19920: PPUSH
19921: NOP4
// end ;
19925: LD_VAR 0 3
19929: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19930: LD_INT 0
19932: PPUSH
19933: PPUSH
19934: PPUSH
19935: PPUSH
19936: PPUSH
19937: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
19938: NOP4
19942: NOT
19943: PUSH
19944: NOP4
19948: PPUSH
19949: NOP4
19953: PUSH
19954: LD_INT 2
19956: EQUAL
19957: NOT
19958: OR
19959: IFFALSE 19963
// exit ;
19961: GO 20279
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19963: NOP4
19967: PUSH
19968: LD_INT 22
19970: PUSH
19971: NOP4
19975: PPUSH
19976: NOP4
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 2
19987: PUSH
19988: LD_INT 30
19990: PUSH
19991: LD_INT 36
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 34
20000: PUSH
20001: LD_INT 31
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: LIST
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PPUSH
20017: NOP4
20021: ST_TO_ADDR
// if not tmp then
20022: NOP4
20026: NOT
20027: IFFALSE 20031
// exit ;
20029: GO 20279
// result := [ ] ;
20031: NOP4
20035: PUSH
20036: EMPTY
20037: ST_TO_ADDR
// for i in tmp do
20038: NOP4
20042: PUSH
20043: NOP4
20047: PUSH
20048: FOR_IN
20049: IFFALSE 20120
// begin t := UnitsInside ( i ) ;
20051: NOP4
20055: PUSH
20056: NOP4
20060: PPUSH
20061: NOP4
20065: ST_TO_ADDR
// if t then
20066: NOP4
20070: IFFALSE 20118
// for j in t do
20072: NOP4
20076: PUSH
20077: NOP4
20081: PUSH
20082: FOR_IN
20083: IFFALSE 20116
// result := Insert ( result , result + 1 , j ) ;
20085: NOP4
20089: PUSH
20090: NOP4
20094: PPUSH
20095: NOP4
20099: PUSH
20100: LD_INT 1
20102: PLUS
20103: PPUSH
20104: NOP4
20108: PPUSH
20109: NOP4
20113: ST_TO_ADDR
20114: GO 20082
20116: POP
20117: POP
// end ;
20118: GO 20048
20120: POP
20121: POP
// if not result then
20122: NOP4
20126: NOT
20127: IFFALSE 20131
// exit ;
20129: GO 20279
// mech := result [ 1 ] ;
20131: NOP4
20135: PUSH
20136: NOP4
20140: PUSH
20141: LD_INT 1
20143: ARRAY
20144: ST_TO_ADDR
// if result > 1 then
20145: NOP4
20149: PUSH
20150: LD_INT 1
20152: GREATER
20153: IFFALSE 20265
// for i = 2 to result do
20155: NOP4
20159: PUSH
20160: DOUBLE
20161: LD_INT 2
20163: DEC
20164: ST_TO_ADDR
20165: NOP4
20169: PUSH
20170: FOR_TO
20171: IFFALSE 20263
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20173: NOP4
20177: PUSH
20178: NOP4
20182: PUSH
20183: NOP4
20187: ARRAY
20188: PPUSH
20189: LD_INT 3
20191: PPUSH
20192: NOP4
20196: PUSH
20197: NOP4
20201: PUSH
20202: NOP4
20206: ARRAY
20207: PPUSH
20208: NOP4
20212: MINUS
20213: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20214: NOP4
20218: PUSH
20219: NOP4
20223: PPUSH
20224: LD_INT 3
20226: PPUSH
20227: NOP4
20231: PUSH
20232: NOP4
20236: PPUSH
20237: NOP4
20241: MINUS
20242: GREATEREQUAL
20243: IFFALSE 20261
// mech := result [ i ] ;
20245: NOP4
20249: PUSH
20250: NOP4
20254: PUSH
20255: NOP4
20259: ARRAY
20260: ST_TO_ADDR
// end ;
20261: GO 20170
20263: POP
20264: POP
// ComLinkTo ( vehicle , mech ) ;
20265: NOP4
20269: PPUSH
20270: NOP4
20274: PPUSH
20275: NOP4
// end ;
20279: LD_VAR 0 2
20283: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20284: LD_INT 0
20286: PPUSH
20287: PPUSH
20288: PPUSH
20289: PPUSH
20290: PPUSH
20291: PPUSH
20292: PPUSH
20293: PPUSH
20294: PPUSH
20295: PPUSH
20296: PPUSH
20297: PPUSH
20298: PPUSH
// result := [ ] ;
20299: NOP4
20303: PUSH
20304: EMPTY
20305: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20306: NOP4
20310: PPUSH
20311: NOP4
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: LD_INT 1
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: IN
20326: NOT
20327: IFFALSE 20331
// exit ;
20329: GO 21962
// if name then
20331: NOP4
20335: IFFALSE 20351
// SetBName ( base_dep , name ) ;
20337: NOP4
20341: PPUSH
20342: NOP4
20346: PPUSH
20347: NOP4
// base := GetBase ( base_dep ) ;
20351: NOP4
20355: PUSH
20356: NOP4
20360: PPUSH
20361: NOP4
20365: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20366: NOP4
20370: PUSH
20371: NOP4
20375: PPUSH
20376: NOP4
20380: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20381: NOP4
20385: PUSH
20386: NOP4
20390: PPUSH
20391: NOP4
20395: ST_TO_ADDR
// if sources then
20396: NOP4
20400: IFFALSE 20447
// for i = 1 to 3 do
20402: NOP4
20406: PUSH
20407: DOUBLE
20408: LD_INT 1
20410: DEC
20411: ST_TO_ADDR
20412: LD_INT 3
20414: PUSH
20415: FOR_TO
20416: IFFALSE 20445
// AddResourceType ( base , i , sources [ i ] ) ;
20418: NOP4
20422: PPUSH
20423: NOP4
20427: PPUSH
20428: NOP4
20432: PUSH
20433: NOP4
20437: ARRAY
20438: PPUSH
20439: NOP4
20443: GO 20415
20445: POP
20446: POP
// buildings := GetBaseBuildings ( base , area ) ;
20447: NOP4
20451: PUSH
20452: NOP4
20456: PPUSH
20457: NOP4
20461: PPUSH
20462: NOP4
20466: ST_TO_ADDR
// InitHc ;
20467: NOP4
// InitUc ;
20471: NOP4
// uc_side := side ;
20475: LD_ADDR_OWVAR 20
20479: PUSH
20480: NOP4
20484: ST_TO_ADDR
// uc_nation := nation ;
20485: LD_ADDR_OWVAR 21
20489: PUSH
20490: NOP4
20494: ST_TO_ADDR
// if buildings then
20495: NOP4
20499: IFFALSE 21821
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20501: NOP4
20505: PUSH
20506: NOP4
20510: PPUSH
20511: LD_INT 2
20513: PUSH
20514: LD_INT 30
20516: PUSH
20517: LD_INT 29
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 30
20526: PUSH
20527: LD_INT 30
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: LIST
20538: PPUSH
20539: NOP4
20543: ST_TO_ADDR
// if tmp then
20544: NOP4
20548: IFFALSE 20596
// for i in tmp do
20550: NOP4
20554: PUSH
20555: NOP4
20559: PUSH
20560: FOR_IN
20561: IFFALSE 20594
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20563: NOP4
20567: PPUSH
20568: NOP4
20572: PPUSH
20573: NOP4
20577: PPUSH
20578: NOP4
20582: PPUSH
20583: NOP4
20587: PPUSH
20588: NOP4
20592: GO 20560
20594: POP
20595: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20596: NOP4
20600: PPUSH
20601: LD_INT 2
20603: PUSH
20604: LD_INT 30
20606: PUSH
20607: LD_INT 32
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 30
20616: PUSH
20617: LD_INT 33
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: LIST
20628: PPUSH
20629: NOP4
20633: IFFALSE 20721
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20635: NOP4
20639: PUSH
20640: NOP4
20644: PPUSH
20645: LD_INT 2
20647: PUSH
20648: LD_INT 30
20650: PUSH
20651: LD_INT 32
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 30
20660: PUSH
20661: LD_INT 33
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: LIST
20672: PPUSH
20673: NOP4
20677: PUSH
20678: FOR_IN
20679: IFFALSE 20719
// begin if not GetBWeapon ( i ) then
20681: NOP4
20685: PPUSH
20686: NOP4
20690: NOT
20691: IFFALSE 20717
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20693: NOP4
20697: PPUSH
20698: NOP4
20702: PPUSH
20703: NOP4
20707: PPUSH
20708: NOP4
20712: PPUSH
20713: NOP4
// end ;
20717: GO 20678
20719: POP
20720: POP
// end ; for i = 1 to personel do
20721: NOP4
20725: PUSH
20726: DOUBLE
20727: LD_INT 1
20729: DEC
20730: ST_TO_ADDR
20731: NOP4
20735: PUSH
20736: FOR_TO
20737: IFFALSE 21801
// begin if i > 4 then
20739: NOP4
20743: PUSH
20744: LD_INT 4
20746: GREATER
20747: IFFALSE 20751
// break ;
20749: GO 21801
// case i of 1 :
20751: NOP4
20755: PUSH
20756: LD_INT 1
20758: DOUBLE
20759: EQUAL
20760: IFTRUE 20764
20762: GO 20844
20764: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20765: NOP4
20769: PUSH
20770: NOP4
20774: PPUSH
20775: LD_INT 22
20777: PUSH
20778: NOP4
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 58
20789: PUSH
20790: EMPTY
20791: LIST
20792: PUSH
20793: LD_INT 2
20795: PUSH
20796: LD_INT 30
20798: PUSH
20799: LD_INT 32
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 30
20808: PUSH
20809: LD_INT 4
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 30
20818: PUSH
20819: LD_INT 5
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: LIST
20836: PPUSH
20837: NOP4
20841: ST_TO_ADDR
20842: GO 21066
20844: LD_INT 2
20846: DOUBLE
20847: EQUAL
20848: IFTRUE 20852
20850: GO 20914
20852: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20853: NOP4
20857: PUSH
20858: NOP4
20862: PPUSH
20863: LD_INT 22
20865: PUSH
20866: NOP4
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 2
20877: PUSH
20878: LD_INT 30
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 30
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: LIST
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PPUSH
20907: NOP4
20911: ST_TO_ADDR
20912: GO 21066
20914: LD_INT 3
20916: DOUBLE
20917: EQUAL
20918: IFTRUE 20922
20920: GO 20984
20922: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20923: NOP4
20927: PUSH
20928: NOP4
20932: PPUSH
20933: LD_INT 22
20935: PUSH
20936: NOP4
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 2
20947: PUSH
20948: LD_INT 30
20950: PUSH
20951: LD_INT 2
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 30
20960: PUSH
20961: LD_INT 3
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: LIST
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PPUSH
20977: NOP4
20981: ST_TO_ADDR
20982: GO 21066
20984: LD_INT 4
20986: DOUBLE
20987: EQUAL
20988: IFTRUE 20992
20990: GO 21065
20992: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20993: NOP4
20997: PUSH
20998: NOP4
21002: PPUSH
21003: LD_INT 22
21005: PUSH
21006: NOP4
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 2
21017: PUSH
21018: LD_INT 30
21020: PUSH
21021: LD_INT 6
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 30
21030: PUSH
21031: LD_INT 7
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 30
21040: PUSH
21041: LD_INT 8
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PPUSH
21058: NOP4
21062: ST_TO_ADDR
21063: GO 21066
21065: POP
// if i = 1 then
21066: NOP4
21070: PUSH
21071: LD_INT 1
21073: EQUAL
21074: IFFALSE 21185
// begin tmp := [ ] ;
21076: NOP4
21080: PUSH
21081: EMPTY
21082: ST_TO_ADDR
// for j in f do
21083: NOP4
21087: PUSH
21088: NOP4
21092: PUSH
21093: FOR_IN
21094: IFFALSE 21167
// if GetBType ( j ) = b_bunker then
21096: NOP4
21100: PPUSH
21101: NOP4
21105: PUSH
21106: LD_INT 32
21108: EQUAL
21109: IFFALSE 21136
// tmp := Insert ( tmp , 1 , j ) else
21111: NOP4
21115: PUSH
21116: NOP4
21120: PPUSH
21121: LD_INT 1
21123: PPUSH
21124: NOP4
21128: PPUSH
21129: NOP4
21133: ST_TO_ADDR
21134: GO 21165
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21136: NOP4
21140: PUSH
21141: NOP4
21145: PPUSH
21146: NOP4
21150: PUSH
21151: LD_INT 1
21153: PLUS
21154: PPUSH
21155: NOP4
21159: PPUSH
21160: NOP4
21164: ST_TO_ADDR
21165: GO 21093
21167: POP
21168: POP
// if tmp then
21169: NOP4
21173: IFFALSE 21185
// f := tmp ;
21175: NOP4
21179: PUSH
21180: NOP4
21184: ST_TO_ADDR
// end ; x := personel [ i ] ;
21185: NOP4
21189: PUSH
21190: NOP4
21194: PUSH
21195: NOP4
21199: ARRAY
21200: ST_TO_ADDR
// if x = - 1 then
21201: NOP4
21205: PUSH
21206: LD_INT 1
21208: NEG
21209: EQUAL
21210: IFFALSE 21419
// begin for j in f do
21212: NOP4
21216: PUSH
21217: NOP4
21221: PUSH
21222: FOR_IN
21223: IFFALSE 21415
// repeat InitHc ;
21225: NOP4
// if GetBType ( j ) = b_barracks then
21229: NOP4
21233: PPUSH
21234: NOP4
21238: PUSH
21239: LD_INT 5
21241: EQUAL
21242: IFFALSE 21312
// begin if UnitsInside ( j ) < 3 then
21244: NOP4
21248: PPUSH
21249: NOP4
21253: PUSH
21254: LD_INT 3
21256: LESS
21257: IFFALSE 21293
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21259: LD_INT 0
21261: PPUSH
21262: LD_INT 5
21264: PUSH
21265: LD_INT 8
21267: PUSH
21268: LD_INT 9
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: LIST
21275: PUSH
21276: NOP4
21280: ARRAY
21281: PPUSH
21282: NOP4
21286: PPUSH
21287: NOP4
21291: GO 21310
// PrepareHuman ( false , i , skill ) ;
21293: LD_INT 0
21295: PPUSH
21296: NOP4
21300: PPUSH
21301: NOP4
21305: PPUSH
21306: NOP4
// end else
21310: GO 21329
// PrepareHuman ( false , i , skill ) ;
21312: LD_INT 0
21314: PPUSH
21315: NOP4
21319: PPUSH
21320: NOP4
21324: PPUSH
21325: NOP4
// un := CreateHuman ;
21329: NOP4
21333: PUSH
21334: NOP4
21338: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21339: NOP4
21343: PUSH
21344: NOP4
21348: PPUSH
21349: LD_INT 1
21351: PPUSH
21352: NOP4
21356: PPUSH
21357: NOP4
21361: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21362: NOP4
21366: PPUSH
21367: NOP4
21371: PPUSH
21372: NOP4
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21376: NOP4
21380: PPUSH
21381: NOP4
21385: PUSH
21386: LD_INT 6
21388: EQUAL
21389: PUSH
21390: NOP4
21394: PPUSH
21395: NOP4
21399: PUSH
21400: LD_INT 32
21402: PUSH
21403: LD_INT 31
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: IN
21410: OR
21411: IFFALSE 21225
21413: GO 21222
21415: POP
21416: POP
// end else
21417: GO 21799
// for j = 1 to x do
21419: NOP4
21423: PUSH
21424: DOUBLE
21425: LD_INT 1
21427: DEC
21428: ST_TO_ADDR
21429: NOP4
21433: PUSH
21434: FOR_TO
21435: IFFALSE 21797
// begin InitHc ;
21437: NOP4
// if not f then
21441: NOP4
21445: NOT
21446: IFFALSE 21535
// begin PrepareHuman ( false , i , skill ) ;
21448: LD_INT 0
21450: PPUSH
21451: NOP4
21455: PPUSH
21456: NOP4
21460: PPUSH
21461: NOP4
// un := CreateHuman ;
21465: NOP4
21469: PUSH
21470: NOP4
21474: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21475: NOP4
21479: PUSH
21480: NOP4
21484: PPUSH
21485: LD_INT 1
21487: PPUSH
21488: NOP4
21492: PPUSH
21493: NOP4
21497: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21498: NOP4
21502: PPUSH
21503: NOP4
21507: PPUSH
21508: NOP4
21512: PPUSH
21513: NOP4
21517: PPUSH
21518: NOP4
21522: PPUSH
21523: LD_INT 10
21525: PPUSH
21526: LD_INT 0
21528: PPUSH
21529: NOP4
// continue ;
21533: GO 21434
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21535: NOP4
21539: PUSH
21540: LD_INT 1
21542: ARRAY
21543: PPUSH
21544: NOP4
21548: PUSH
21549: NOP4
21553: PUSH
21554: LD_INT 1
21556: ARRAY
21557: PPUSH
21558: NOP4
21562: PUSH
21563: LD_INT 32
21565: PUSH
21566: LD_INT 31
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: IN
21573: AND
21574: PUSH
21575: NOP4
21579: PUSH
21580: LD_INT 1
21582: ARRAY
21583: PPUSH
21584: NOP4
21588: PUSH
21589: LD_INT 6
21591: EQUAL
21592: OR
21593: IFFALSE 21613
// f := Delete ( f , 1 ) ;
21595: NOP4
21599: PUSH
21600: NOP4
21604: PPUSH
21605: LD_INT 1
21607: PPUSH
21608: NOP4
21612: ST_TO_ADDR
// if not f then
21613: NOP4
21617: NOT
21618: IFFALSE 21636
// begin x := x + 2 ;
21620: NOP4
21624: PUSH
21625: NOP4
21629: PUSH
21630: LD_INT 2
21632: PLUS
21633: ST_TO_ADDR
// continue ;
21634: GO 21434
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21636: NOP4
21640: PUSH
21641: LD_INT 1
21643: ARRAY
21644: PPUSH
21645: NOP4
21649: PUSH
21650: LD_INT 5
21652: EQUAL
21653: IFFALSE 21727
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21655: NOP4
21659: PUSH
21660: LD_INT 1
21662: ARRAY
21663: PPUSH
21664: NOP4
21668: PUSH
21669: LD_INT 3
21671: LESS
21672: IFFALSE 21708
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21674: LD_INT 0
21676: PPUSH
21677: LD_INT 5
21679: PUSH
21680: LD_INT 8
21682: PUSH
21683: LD_INT 9
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: LIST
21690: PUSH
21691: NOP4
21695: ARRAY
21696: PPUSH
21697: NOP4
21701: PPUSH
21702: NOP4
21706: GO 21725
// PrepareHuman ( false , i , skill ) ;
21708: LD_INT 0
21710: PPUSH
21711: NOP4
21715: PPUSH
21716: NOP4
21720: PPUSH
21721: NOP4
// end else
21725: GO 21744
// PrepareHuman ( false , i , skill ) ;
21727: LD_INT 0
21729: PPUSH
21730: NOP4
21734: PPUSH
21735: NOP4
21739: PPUSH
21740: NOP4
// un := CreateHuman ;
21744: NOP4
21748: PUSH
21749: NOP4
21753: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21754: NOP4
21758: PUSH
21759: NOP4
21763: PPUSH
21764: LD_INT 1
21766: PPUSH
21767: NOP4
21771: PPUSH
21772: NOP4
21776: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21777: NOP4
21781: PPUSH
21782: NOP4
21786: PUSH
21787: LD_INT 1
21789: ARRAY
21790: PPUSH
21791: NOP4
// end ;
21795: GO 21434
21797: POP
21798: POP
// end ;
21799: GO 20736
21801: POP
21802: POP
// result := result ^ buildings ;
21803: NOP4
21807: PUSH
21808: NOP4
21812: PUSH
21813: NOP4
21817: ADD
21818: ST_TO_ADDR
// end else
21819: GO 21962
// begin for i = 1 to personel do
21821: NOP4
21825: PUSH
21826: DOUBLE
21827: LD_INT 1
21829: DEC
21830: ST_TO_ADDR
21831: NOP4
21835: PUSH
21836: FOR_TO
21837: IFFALSE 21960
// begin if i > 4 then
21839: NOP4
21843: PUSH
21844: LD_INT 4
21846: GREATER
21847: IFFALSE 21851
// break ;
21849: GO 21960
// x := personel [ i ] ;
21851: NOP4
21855: PUSH
21856: NOP4
21860: PUSH
21861: NOP4
21865: ARRAY
21866: ST_TO_ADDR
// if x = - 1 then
21867: NOP4
21871: PUSH
21872: LD_INT 1
21874: NEG
21875: EQUAL
21876: IFFALSE 21880
// continue ;
21878: GO 21836
// PrepareHuman ( false , i , skill ) ;
21880: LD_INT 0
21882: PPUSH
21883: NOP4
21887: PPUSH
21888: NOP4
21892: PPUSH
21893: NOP4
// un := CreateHuman ;
21897: NOP4
21901: PUSH
21902: NOP4
21906: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21907: NOP4
21911: PPUSH
21912: NOP4
21916: PPUSH
21917: NOP4
21921: PPUSH
21922: NOP4
21926: PPUSH
21927: NOP4
21931: PPUSH
21932: LD_INT 10
21934: PPUSH
21935: LD_INT 0
21937: PPUSH
21938: NOP4
// result := result ^ un ;
21942: NOP4
21946: PUSH
21947: NOP4
21951: PUSH
21952: NOP4
21956: ADD
21957: ST_TO_ADDR
// end ;
21958: GO 21836
21960: POP
21961: POP
// end ; end ;
21962: LD_VAR 0 7
21966: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21967: LD_INT 0
21969: PPUSH
21970: PPUSH
21971: PPUSH
21972: PPUSH
21973: PPUSH
21974: PPUSH
21975: PPUSH
21976: PPUSH
21977: PPUSH
21978: PPUSH
21979: PPUSH
21980: PPUSH
21981: PPUSH
21982: PPUSH
21983: PPUSH
21984: PPUSH
// result := false ;
21985: NOP4
21989: PUSH
21990: LD_INT 0
21992: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21993: NOP4
21997: NOT
21998: PUSH
21999: NOP4
22003: PPUSH
22004: NOP4
22008: PUSH
22009: LD_INT 32
22011: PUSH
22012: LD_INT 33
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: IN
22019: NOT
22020: OR
22021: IFFALSE 22025
// exit ;
22023: GO 23161
// nat := GetNation ( tower ) ;
22025: NOP4
22029: PUSH
22030: NOP4
22034: PPUSH
22035: NOP4
22039: ST_TO_ADDR
// side := GetSide ( tower ) ;
22040: NOP4
22044: PUSH
22045: NOP4
22049: PPUSH
22050: NOP4
22054: ST_TO_ADDR
// x := GetX ( tower ) ;
22055: NOP4
22059: PUSH
22060: NOP4
22064: PPUSH
22065: NOP4
22069: ST_TO_ADDR
// y := GetY ( tower ) ;
22070: NOP4
22074: PUSH
22075: NOP4
22079: PPUSH
22080: NOP4
22084: ST_TO_ADDR
// if not x or not y then
22085: NOP4
22089: NOT
22090: PUSH
22091: NOP4
22095: NOT
22096: OR
22097: IFFALSE 22101
// exit ;
22099: GO 23161
// weapon := 0 ;
22101: NOP4
22105: PUSH
22106: LD_INT 0
22108: ST_TO_ADDR
// fac_list := [ ] ;
22109: NOP4
22113: PUSH
22114: EMPTY
22115: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
22116: NOP4
22120: PUSH
22121: NOP4
22125: PPUSH
22126: NOP4
22130: PPUSH
22131: NOP4
22135: PPUSH
22136: NOP4
22140: PPUSH
22141: LD_INT 30
22143: PUSH
22144: LD_INT 3
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PPUSH
22151: NOP4
22155: ST_TO_ADDR
// if not factories then
22156: NOP4
22160: NOT
22161: IFFALSE 22165
// exit ;
22163: GO 23161
// for i in factories do
22165: NOP4
22169: PUSH
22170: NOP4
22174: PUSH
22175: FOR_IN
22176: IFFALSE 22201
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22178: NOP4
22182: PUSH
22183: NOP4
22187: PUSH
22188: NOP4
22192: PPUSH
22193: NOP4
22197: UNION
22198: ST_TO_ADDR
22199: GO 22175
22201: POP
22202: POP
// if not fac_list then
22203: NOP4
22207: NOT
22208: IFFALSE 22212
// exit ;
22210: GO 23161
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22212: NOP4
22216: PUSH
22217: LD_INT 4
22219: PUSH
22220: LD_INT 5
22222: PUSH
22223: LD_INT 9
22225: PUSH
22226: LD_INT 10
22228: PUSH
22229: LD_INT 6
22231: PUSH
22232: LD_INT 7
22234: PUSH
22235: LD_INT 11
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 27
22249: PUSH
22250: LD_INT 28
22252: PUSH
22253: LD_INT 26
22255: PUSH
22256: LD_INT 30
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 43
22267: PUSH
22268: LD_INT 44
22270: PUSH
22271: LD_INT 46
22273: PUSH
22274: LD_INT 45
22276: PUSH
22277: LD_INT 47
22279: PUSH
22280: LD_INT 49
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: LIST
22295: PUSH
22296: NOP4
22300: ARRAY
22301: ST_TO_ADDR
// for i in list do
22302: NOP4
22306: PUSH
22307: NOP4
22311: PUSH
22312: FOR_IN
22313: IFFALSE 22346
// if not i in fac_list then
22315: NOP4
22319: PUSH
22320: NOP4
22324: IN
22325: NOT
22326: IFFALSE 22344
// list := list diff i ;
22328: NOP4
22332: PUSH
22333: NOP4
22337: PUSH
22338: NOP4
22342: DIFF
22343: ST_TO_ADDR
22344: GO 22312
22346: POP
22347: POP
// if not list then
22348: NOP4
22352: NOT
22353: IFFALSE 22357
// exit ;
22355: GO 23161
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22357: NOP4
22361: PUSH
22362: LD_INT 3
22364: EQUAL
22365: PUSH
22366: LD_INT 49
22368: PUSH
22369: NOP4
22373: IN
22374: AND
22375: PUSH
22376: LD_INT 31
22378: PPUSH
22379: NOP4
22383: PPUSH
22384: NOP4
22388: PUSH
22389: LD_INT 2
22391: EQUAL
22392: AND
22393: IFFALSE 22453
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22395: LD_INT 22
22397: PUSH
22398: NOP4
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 35
22409: PUSH
22410: LD_INT 49
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 91
22419: PUSH
22420: NOP4
22424: PUSH
22425: LD_INT 10
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: LIST
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: LIST
22437: PPUSH
22438: NOP4
22442: NOT
22443: IFFALSE 22453
// weapon := ru_time_lapser ;
22445: NOP4
22449: PUSH
22450: LD_INT 49
22452: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22453: NOP4
22457: PUSH
22458: LD_INT 1
22460: PUSH
22461: LD_INT 2
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: IN
22468: PUSH
22469: LD_INT 11
22471: PUSH
22472: NOP4
22476: IN
22477: PUSH
22478: LD_INT 30
22480: PUSH
22481: NOP4
22485: IN
22486: OR
22487: AND
22488: PUSH
22489: LD_INT 6
22491: PPUSH
22492: NOP4
22496: PPUSH
22497: NOP4
22501: PUSH
22502: LD_INT 2
22504: EQUAL
22505: AND
22506: IFFALSE 22671
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22508: LD_INT 22
22510: PUSH
22511: NOP4
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 2
22522: PUSH
22523: LD_INT 35
22525: PUSH
22526: LD_INT 11
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 35
22535: PUSH
22536: LD_INT 30
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 91
22550: PUSH
22551: NOP4
22555: PUSH
22556: LD_INT 18
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: LIST
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: LIST
22568: PPUSH
22569: NOP4
22573: NOT
22574: PUSH
22575: LD_INT 22
22577: PUSH
22578: NOP4
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 2
22589: PUSH
22590: LD_INT 30
22592: PUSH
22593: LD_INT 32
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 30
22602: PUSH
22603: LD_INT 33
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 91
22617: PUSH
22618: NOP4
22622: PUSH
22623: LD_INT 12
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: LIST
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: LIST
22635: PUSH
22636: EMPTY
22637: LIST
22638: PPUSH
22639: NOP4
22643: PUSH
22644: LD_INT 2
22646: GREATER
22647: AND
22648: IFFALSE 22671
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22650: NOP4
22654: PUSH
22655: LD_INT 11
22657: PUSH
22658: LD_INT 30
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: NOP4
22669: ARRAY
22670: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22671: NOP4
22675: NOT
22676: PUSH
22677: LD_INT 40
22679: PPUSH
22680: NOP4
22684: PPUSH
22685: NOP4
22689: PUSH
22690: LD_INT 2
22692: EQUAL
22693: AND
22694: PUSH
22695: LD_INT 7
22697: PUSH
22698: NOP4
22702: IN
22703: PUSH
22704: LD_INT 28
22706: PUSH
22707: NOP4
22711: IN
22712: OR
22713: PUSH
22714: LD_INT 45
22716: PUSH
22717: NOP4
22721: IN
22722: OR
22723: AND
22724: IFFALSE 22978
// begin hex := GetHexInfo ( x , y ) ;
22726: NOP4
22730: PUSH
22731: NOP4
22735: PPUSH
22736: NOP4
22740: PPUSH
22741: NOP4
22745: ST_TO_ADDR
// if hex [ 1 ] then
22746: NOP4
22750: PUSH
22751: LD_INT 1
22753: ARRAY
22754: IFFALSE 22758
// exit ;
22756: GO 23161
// height := hex [ 2 ] ;
22758: NOP4
22762: PUSH
22763: NOP4
22767: PUSH
22768: LD_INT 2
22770: ARRAY
22771: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22772: NOP4
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: LD_INT 2
22782: PUSH
22783: LD_INT 3
22785: PUSH
22786: LD_INT 5
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: ST_TO_ADDR
// for i in tmp do
22795: NOP4
22799: PUSH
22800: NOP4
22804: PUSH
22805: FOR_IN
22806: IFFALSE 22976
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22808: NOP4
22812: PUSH
22813: NOP4
22817: PPUSH
22818: NOP4
22822: PPUSH
22823: LD_INT 5
22825: PPUSH
22826: NOP4
22830: PUSH
22831: NOP4
22835: PPUSH
22836: NOP4
22840: PPUSH
22841: LD_INT 5
22843: PPUSH
22844: NOP4
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22853: NOP4
22857: PUSH
22858: LD_INT 1
22860: ARRAY
22861: PPUSH
22862: NOP4
22866: PUSH
22867: LD_INT 2
22869: ARRAY
22870: PPUSH
22871: NOP4
22875: IFFALSE 22974
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22877: NOP4
22881: PUSH
22882: NOP4
22886: PUSH
22887: LD_INT 1
22889: ARRAY
22890: PPUSH
22891: NOP4
22895: PUSH
22896: LD_INT 2
22898: ARRAY
22899: PPUSH
22900: NOP4
22904: ST_TO_ADDR
// if hex [ 1 ] then
22905: NOP4
22909: PUSH
22910: LD_INT 1
22912: ARRAY
22913: IFFALSE 22917
// continue ;
22915: GO 22805
// h := hex [ 2 ] ;
22917: NOP4
22921: PUSH
22922: NOP4
22926: PUSH
22927: LD_INT 2
22929: ARRAY
22930: ST_TO_ADDR
// if h + 7 < height then
22931: NOP4
22935: PUSH
22936: LD_INT 7
22938: PLUS
22939: PUSH
22940: NOP4
22944: LESS
22945: IFFALSE 22974
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22947: NOP4
22951: PUSH
22952: LD_INT 7
22954: PUSH
22955: LD_INT 28
22957: PUSH
22958: LD_INT 45
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: LIST
22965: PUSH
22966: NOP4
22970: ARRAY
22971: ST_TO_ADDR
// break ;
22972: GO 22976
// end ; end ; end ;
22974: GO 22805
22976: POP
22977: POP
// end ; if not weapon then
22978: NOP4
22982: NOT
22983: IFFALSE 23043
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22985: NOP4
22989: PUSH
22990: NOP4
22994: PUSH
22995: LD_INT 11
22997: PUSH
22998: LD_INT 30
23000: PUSH
23001: LD_INT 49
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: DIFF
23009: ST_TO_ADDR
// if not list then
23010: NOP4
23014: NOT
23015: IFFALSE 23019
// exit ;
23017: GO 23161
// weapon := list [ rand ( 1 , list ) ] ;
23019: NOP4
23023: PUSH
23024: NOP4
23028: PUSH
23029: LD_INT 1
23031: PPUSH
23032: NOP4
23036: PPUSH
23037: NOP4
23041: ARRAY
23042: ST_TO_ADDR
// end ; if weapon then
23043: NOP4
23047: IFFALSE 23161
// begin tmp := CostOfWeapon ( weapon ) ;
23049: NOP4
23053: PUSH
23054: NOP4
23058: PPUSH
23059: NOP4
23063: ST_TO_ADDR
// j := GetBase ( tower ) ;
23064: NOP4
23068: PUSH
23069: NOP4
23073: PPUSH
23074: NOP4
23078: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23079: NOP4
23083: PPUSH
23084: LD_INT 1
23086: PPUSH
23087: NOP4
23091: PUSH
23092: NOP4
23096: PUSH
23097: LD_INT 1
23099: ARRAY
23100: GREATEREQUAL
23101: PUSH
23102: NOP4
23106: PPUSH
23107: LD_INT 2
23109: PPUSH
23110: NOP4
23114: PUSH
23115: NOP4
23119: PUSH
23120: LD_INT 2
23122: ARRAY
23123: GREATEREQUAL
23124: AND
23125: PUSH
23126: NOP4
23130: PPUSH
23131: LD_INT 3
23133: PPUSH
23134: NOP4
23138: PUSH
23139: NOP4
23143: PUSH
23144: LD_INT 3
23146: ARRAY
23147: GREATEREQUAL
23148: AND
23149: IFFALSE 23161
// result := weapon ;
23151: NOP4
23155: PUSH
23156: NOP4
23160: ST_TO_ADDR
// end ; end ;
23161: LD_VAR 0 3
23165: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23166: LD_INT 0
23168: PPUSH
23169: PPUSH
// result := true ;
23170: NOP4
23174: PUSH
23175: LD_INT 1
23177: ST_TO_ADDR
// if array1 = array2 then
23178: NOP4
23182: PUSH
23183: NOP4
23187: EQUAL
23188: IFFALSE 23248
// begin for i = 1 to array1 do
23190: NOP4
23194: PUSH
23195: DOUBLE
23196: LD_INT 1
23198: DEC
23199: ST_TO_ADDR
23200: NOP4
23204: PUSH
23205: FOR_TO
23206: IFFALSE 23244
// if array1 [ i ] <> array2 [ i ] then
23208: NOP4
23212: PUSH
23213: NOP4
23217: ARRAY
23218: PUSH
23219: NOP4
23223: PUSH
23224: NOP4
23228: ARRAY
23229: NONEQUAL
23230: IFFALSE 23242
// begin result := false ;
23232: NOP4
23236: PUSH
23237: LD_INT 0
23239: ST_TO_ADDR
// break ;
23240: GO 23244
// end ;
23242: GO 23205
23244: POP
23245: POP
// end else
23246: GO 23256
// result := false ;
23248: NOP4
23252: PUSH
23253: LD_INT 0
23255: ST_TO_ADDR
// end ;
23256: LD_VAR 0 3
23260: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23261: LD_INT 0
23263: PPUSH
23264: PPUSH
23265: PPUSH
// pom := GetBase ( fac ) ;
23266: NOP4
23270: PUSH
23271: NOP4
23275: PPUSH
23276: NOP4
23280: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23281: NOP4
23285: PUSH
23286: NOP4
23290: PUSH
23291: LD_INT 1
23293: ARRAY
23294: PPUSH
23295: NOP4
23299: PUSH
23300: LD_INT 2
23302: ARRAY
23303: PPUSH
23304: NOP4
23308: PUSH
23309: LD_INT 3
23311: ARRAY
23312: PPUSH
23313: NOP4
23317: PUSH
23318: LD_INT 4
23320: ARRAY
23321: PPUSH
23322: NOP4
23326: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23327: NOP4
23331: PUSH
23332: NOP4
23336: PPUSH
23337: LD_INT 1
23339: PPUSH
23340: NOP4
23344: PUSH
23345: NOP4
23349: PUSH
23350: LD_INT 1
23352: ARRAY
23353: GREATEREQUAL
23354: PUSH
23355: NOP4
23359: PPUSH
23360: LD_INT 2
23362: PPUSH
23363: NOP4
23367: PUSH
23368: NOP4
23372: PUSH
23373: LD_INT 2
23375: ARRAY
23376: GREATEREQUAL
23377: AND
23378: PUSH
23379: NOP4
23383: PPUSH
23384: LD_INT 3
23386: PPUSH
23387: NOP4
23391: PUSH
23392: NOP4
23396: PUSH
23397: LD_INT 3
23399: ARRAY
23400: GREATEREQUAL
23401: AND
23402: ST_TO_ADDR
// end ;
23403: LD_VAR 0 3
23407: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23408: LD_INT 0
23410: PPUSH
23411: PPUSH
23412: PPUSH
23413: PPUSH
// pom := GetBase ( building ) ;
23414: NOP4
23418: PUSH
23419: NOP4
23423: PPUSH
23424: NOP4
23428: ST_TO_ADDR
// if not pom then
23429: NOP4
23433: NOT
23434: IFFALSE 23438
// exit ;
23436: GO 23608
// btype := GetBType ( building ) ;
23438: NOP4
23442: PUSH
23443: NOP4
23447: PPUSH
23448: NOP4
23452: ST_TO_ADDR
// if btype = b_armoury then
23453: NOP4
23457: PUSH
23458: LD_INT 4
23460: EQUAL
23461: IFFALSE 23471
// btype := b_barracks ;
23463: NOP4
23467: PUSH
23468: LD_INT 5
23470: ST_TO_ADDR
// if btype = b_depot then
23471: NOP4
23475: PUSH
23476: LD_INT 0
23478: EQUAL
23479: IFFALSE 23489
// btype := b_warehouse ;
23481: NOP4
23485: PUSH
23486: LD_INT 1
23488: ST_TO_ADDR
// if btype = b_workshop then
23489: NOP4
23493: PUSH
23494: LD_INT 2
23496: EQUAL
23497: IFFALSE 23507
// btype := b_factory ;
23499: NOP4
23503: PUSH
23504: LD_INT 3
23506: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23507: NOP4
23511: PUSH
23512: NOP4
23516: PPUSH
23517: NOP4
23521: PPUSH
23522: NOP4
23526: PPUSH
23527: NOP4
23531: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23532: NOP4
23536: PUSH
23537: NOP4
23541: PPUSH
23542: LD_INT 1
23544: PPUSH
23545: NOP4
23549: PUSH
23550: NOP4
23554: PUSH
23555: LD_INT 1
23557: ARRAY
23558: GREATEREQUAL
23559: PUSH
23560: NOP4
23564: PPUSH
23565: LD_INT 2
23567: PPUSH
23568: NOP4
23572: PUSH
23573: NOP4
23577: PUSH
23578: LD_INT 2
23580: ARRAY
23581: GREATEREQUAL
23582: AND
23583: PUSH
23584: NOP4
23588: PPUSH
23589: LD_INT 3
23591: PPUSH
23592: NOP4
23596: PUSH
23597: NOP4
23601: PUSH
23602: LD_INT 3
23604: ARRAY
23605: GREATEREQUAL
23606: AND
23607: ST_TO_ADDR
// end ;
23608: LD_VAR 0 2
23612: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23613: LD_INT 0
23615: PPUSH
23616: PPUSH
23617: PPUSH
// pom := GetBase ( building ) ;
23618: NOP4
23622: PUSH
23623: NOP4
23627: PPUSH
23628: NOP4
23632: ST_TO_ADDR
// if not pom then
23633: NOP4
23637: NOT
23638: IFFALSE 23642
// exit ;
23640: GO 23743
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23642: NOP4
23646: PUSH
23647: NOP4
23651: PPUSH
23652: NOP4
23656: PPUSH
23657: NOP4
23661: PPUSH
23662: NOP4
23666: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23667: NOP4
23671: PUSH
23672: NOP4
23676: PPUSH
23677: LD_INT 1
23679: PPUSH
23680: NOP4
23684: PUSH
23685: NOP4
23689: PUSH
23690: LD_INT 1
23692: ARRAY
23693: GREATEREQUAL
23694: PUSH
23695: NOP4
23699: PPUSH
23700: LD_INT 2
23702: PPUSH
23703: NOP4
23707: PUSH
23708: NOP4
23712: PUSH
23713: LD_INT 2
23715: ARRAY
23716: GREATEREQUAL
23717: AND
23718: PUSH
23719: NOP4
23723: PPUSH
23724: LD_INT 3
23726: PPUSH
23727: NOP4
23731: PUSH
23732: NOP4
23736: PUSH
23737: LD_INT 3
23739: ARRAY
23740: GREATEREQUAL
23741: AND
23742: ST_TO_ADDR
// end ;
23743: LD_VAR 0 3
23747: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
23748: LD_INT 0
23750: PPUSH
23751: PPUSH
23752: PPUSH
23753: PPUSH
23754: PPUSH
23755: PPUSH
23756: PPUSH
23757: PPUSH
23758: PPUSH
23759: PPUSH
// result := false ;
23760: NOP4
23764: PUSH
23765: LD_INT 0
23767: ST_TO_ADDR
// if not base or not btype or not x or not y then
23768: NOP4
23772: NOT
23773: PUSH
23774: NOP4
23778: NOT
23779: OR
23780: PUSH
23781: NOP4
23785: NOT
23786: OR
23787: PUSH
23788: NOP4
23792: NOT
23793: OR
23794: IFFALSE 23798
// exit ;
23796: GO 24407
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
23798: NOP4
23802: PUSH
23803: NOP4
23807: PPUSH
23808: NOP4
23812: PPUSH
23813: NOP4
23817: PPUSH
23818: NOP4
23822: PPUSH
23823: NOP4
23827: PUSH
23828: LD_INT 1
23830: ARRAY
23831: PPUSH
23832: NOP4
23836: PPUSH
23837: LD_INT 0
23839: PPUSH
23840: NOP4
23844: ST_TO_ADDR
// if not hexes then
23845: NOP4
23849: NOT
23850: IFFALSE 23854
// exit ;
23852: GO 24407
// for i = 1 to hexes do
23854: NOP4
23858: PUSH
23859: DOUBLE
23860: LD_INT 1
23862: DEC
23863: ST_TO_ADDR
23864: NOP4
23868: PUSH
23869: FOR_TO
23870: IFFALSE 24405
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23872: NOP4
23876: PUSH
23877: NOP4
23881: PUSH
23882: NOP4
23886: ARRAY
23887: PUSH
23888: LD_INT 1
23890: ARRAY
23891: PPUSH
23892: NOP4
23896: PUSH
23897: NOP4
23901: ARRAY
23902: PUSH
23903: LD_INT 2
23905: ARRAY
23906: PPUSH
23907: NOP4
23911: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23912: NOP4
23916: PUSH
23917: NOP4
23921: ARRAY
23922: PUSH
23923: LD_INT 1
23925: ARRAY
23926: PPUSH
23927: NOP4
23931: PUSH
23932: NOP4
23936: ARRAY
23937: PUSH
23938: LD_INT 2
23940: ARRAY
23941: PPUSH
23942: NOP4
23946: PUSH
23947: NOP4
23951: PUSH
23952: NOP4
23956: ARRAY
23957: PUSH
23958: LD_INT 1
23960: ARRAY
23961: PPUSH
23962: NOP4
23966: PUSH
23967: NOP4
23971: ARRAY
23972: PUSH
23973: LD_INT 2
23975: ARRAY
23976: PPUSH
23977: NOP4
23981: NOT
23982: OR
23983: PUSH
23984: NOP4
23988: PPUSH
23989: NOP4
23993: PUSH
23994: LD_INT 3
23996: EQUAL
23997: OR
23998: IFFALSE 24004
// exit ;
24000: POP
24001: POP
24002: GO 24407
// if not tmp or not tmp in base then
24004: NOP4
24008: NOT
24009: PUSH
24010: NOP4
24014: PUSH
24015: NOP4
24019: IN
24020: NOT
24021: OR
24022: IFFALSE 24026
// continue ;
24024: GO 23869
// result := true ;
24026: NOP4
24030: PUSH
24031: LD_INT 1
24033: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24034: NOP4
24038: PUSH
24039: NOP4
24043: PPUSH
24044: LD_INT 22
24046: PUSH
24047: NOP4
24051: PPUSH
24052: NOP4
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 2
24063: PUSH
24064: LD_INT 30
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 30
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: LIST
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PPUSH
24093: NOP4
24097: ST_TO_ADDR
// if dep then
24098: NOP4
24102: IFFALSE 24238
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24104: NOP4
24108: PUSH
24109: NOP4
24113: PUSH
24114: LD_INT 1
24116: ARRAY
24117: PPUSH
24118: NOP4
24122: PPUSH
24123: NOP4
24127: PUSH
24128: LD_INT 1
24130: ARRAY
24131: PPUSH
24132: NOP4
24136: PPUSH
24137: LD_INT 5
24139: PPUSH
24140: NOP4
24144: PUSH
24145: NOP4
24149: PUSH
24150: LD_INT 1
24152: ARRAY
24153: PPUSH
24154: NOP4
24158: PPUSH
24159: NOP4
24163: PUSH
24164: LD_INT 1
24166: ARRAY
24167: PPUSH
24168: NOP4
24172: PPUSH
24173: LD_INT 5
24175: PPUSH
24176: NOP4
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24185: NOP4
24189: PUSH
24190: LD_INT 1
24192: ARRAY
24193: PPUSH
24194: NOP4
24198: PUSH
24199: LD_INT 2
24201: ARRAY
24202: PPUSH
24203: NOP4
24207: IFFALSE 24238
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24209: NOP4
24213: PPUSH
24214: NOP4
24218: PUSH
24219: LD_INT 1
24221: ARRAY
24222: PPUSH
24223: NOP4
24227: PUSH
24228: LD_INT 2
24230: ARRAY
24231: PPUSH
24232: NOP4
// continue ;
24236: GO 23869
// end ; end ; r := GetDir ( tmp ) ;
24238: NOP4
24242: PUSH
24243: NOP4
24247: PPUSH
24248: NOP4
24252: ST_TO_ADDR
// if r = 5 then
24253: NOP4
24257: PUSH
24258: LD_INT 5
24260: EQUAL
24261: IFFALSE 24271
// r := 0 ;
24263: NOP4
24267: PUSH
24268: LD_INT 0
24270: ST_TO_ADDR
// for j = r to 5 do
24271: NOP4
24275: PUSH
24276: DOUBLE
24277: NOP4
24281: DEC
24282: ST_TO_ADDR
24283: LD_INT 5
24285: PUSH
24286: FOR_TO
24287: IFFALSE 24401
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24289: NOP4
24293: PUSH
24294: NOP4
24298: PPUSH
24299: NOP4
24303: PPUSH
24304: NOP4
24308: PPUSH
24309: LD_INT 2
24311: PPUSH
24312: NOP4
24316: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24317: NOP4
24321: PUSH
24322: NOP4
24326: PPUSH
24327: NOP4
24331: PPUSH
24332: NOP4
24336: PPUSH
24337: LD_INT 2
24339: PPUSH
24340: NOP4
24344: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24345: NOP4
24349: PPUSH
24350: NOP4
24354: PPUSH
24355: NOP4
24359: PUSH
24360: NOP4
24364: PPUSH
24365: NOP4
24369: PPUSH
24370: NOP4
24374: NOT
24375: AND
24376: IFFALSE 24399
// begin ComMoveXY ( tmp , _x , _y ) ;
24378: NOP4
24382: PPUSH
24383: NOP4
24387: PPUSH
24388: NOP4
24392: PPUSH
24393: NOP4
// break ;
24397: GO 24401
// end ; end ;
24399: GO 24286
24401: POP
24402: POP
// end ;
24403: GO 23869
24405: POP
24406: POP
// end ;
24407: LD_VAR 0 6
24411: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
24412: LD_INT 0
24414: PPUSH
24415: PPUSH
24416: PPUSH
24417: PPUSH
24418: PPUSH
24419: PPUSH
24420: PPUSH
24421: PPUSH
24422: PPUSH
24423: PPUSH
// result := false ;
24424: NOP4
24428: PUSH
24429: LD_INT 0
24431: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24432: NOP4
24436: NOT
24437: PUSH
24438: NOP4
24442: PPUSH
24443: NOP4
24447: PUSH
24448: LD_INT 0
24450: PUSH
24451: LD_INT 1
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: IN
24458: NOT
24459: OR
24460: PUSH
24461: NOP4
24465: NOT
24466: OR
24467: PUSH
24468: NOP4
24472: PUSH
24473: LD_INT 0
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: LD_INT 2
24481: PUSH
24482: LD_INT 3
24484: PUSH
24485: LD_INT 4
24487: PUSH
24488: LD_INT 5
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: IN
24499: NOT
24500: OR
24501: PUSH
24502: NOP4
24506: PPUSH
24507: NOP4
24511: PPUSH
24512: NOP4
24516: NOT
24517: OR
24518: IFFALSE 24522
// exit ;
24520: GO 25239
// pom := GetBase ( depot ) ;
24522: NOP4
24526: PUSH
24527: NOP4
24531: PPUSH
24532: NOP4
24536: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24537: NOP4
24541: PUSH
24542: NOP4
24546: PPUSH
24547: NOP4
24551: PPUSH
24552: NOP4
24556: PPUSH
24557: NOP4
24561: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24562: NOP4
24566: PPUSH
24567: LD_INT 1
24569: PPUSH
24570: NOP4
24574: PUSH
24575: NOP4
24579: PUSH
24580: LD_INT 1
24582: ARRAY
24583: GREATEREQUAL
24584: PUSH
24585: NOP4
24589: PPUSH
24590: LD_INT 2
24592: PPUSH
24593: NOP4
24597: PUSH
24598: NOP4
24602: PUSH
24603: LD_INT 2
24605: ARRAY
24606: GREATEREQUAL
24607: AND
24608: PUSH
24609: NOP4
24613: PPUSH
24614: LD_INT 3
24616: PPUSH
24617: NOP4
24621: PUSH
24622: NOP4
24626: PUSH
24627: LD_INT 3
24629: ARRAY
24630: GREATEREQUAL
24631: AND
24632: NOT
24633: IFFALSE 24637
// exit ;
24635: GO 25239
// if GetBType ( depot ) = b_depot then
24637: NOP4
24641: PPUSH
24642: NOP4
24646: PUSH
24647: LD_INT 0
24649: EQUAL
24650: IFFALSE 24662
// dist := 28 else
24652: NOP4
24656: PUSH
24657: LD_INT 28
24659: ST_TO_ADDR
24660: GO 24670
// dist := 36 ;
24662: NOP4
24666: PUSH
24667: LD_INT 36
24669: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24670: NOP4
24674: PPUSH
24675: NOP4
24679: PPUSH
24680: NOP4
24684: PPUSH
24685: NOP4
24689: PUSH
24690: NOP4
24694: GREATER
24695: IFFALSE 24699
// exit ;
24697: GO 25239
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24699: NOP4
24703: PUSH
24704: NOP4
24708: PPUSH
24709: NOP4
24713: PPUSH
24714: NOP4
24718: PPUSH
24719: NOP4
24723: PPUSH
24724: NOP4
24728: PPUSH
24729: NOP4
24733: PPUSH
24734: LD_INT 0
24736: PPUSH
24737: NOP4
24741: ST_TO_ADDR
// if not hexes then
24742: NOP4
24746: NOT
24747: IFFALSE 24751
// exit ;
24749: GO 25239
// hex := GetHexInfo ( x , y ) ;
24751: NOP4
24755: PUSH
24756: NOP4
24760: PPUSH
24761: NOP4
24765: PPUSH
24766: NOP4
24770: ST_TO_ADDR
// if hex [ 1 ] then
24771: NOP4
24775: PUSH
24776: LD_INT 1
24778: ARRAY
24779: IFFALSE 24783
// exit ;
24781: GO 25239
// height := hex [ 2 ] ;
24783: NOP4
24787: PUSH
24788: NOP4
24792: PUSH
24793: LD_INT 2
24795: ARRAY
24796: ST_TO_ADDR
// for i = 1 to hexes do
24797: NOP4
24801: PUSH
24802: DOUBLE
24803: LD_INT 1
24805: DEC
24806: ST_TO_ADDR
24807: NOP4
24811: PUSH
24812: FOR_TO
24813: IFFALSE 25143
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24815: NOP4
24819: PUSH
24820: NOP4
24824: ARRAY
24825: PUSH
24826: LD_INT 1
24828: ARRAY
24829: PPUSH
24830: NOP4
24834: PUSH
24835: NOP4
24839: ARRAY
24840: PUSH
24841: LD_INT 2
24843: ARRAY
24844: PPUSH
24845: NOP4
24849: NOT
24850: PUSH
24851: NOP4
24855: PUSH
24856: NOP4
24860: ARRAY
24861: PUSH
24862: LD_INT 1
24864: ARRAY
24865: PPUSH
24866: NOP4
24870: PUSH
24871: NOP4
24875: ARRAY
24876: PUSH
24877: LD_INT 2
24879: ARRAY
24880: PPUSH
24881: NOP4
24885: PUSH
24886: LD_INT 0
24888: GREATER
24889: OR
24890: PUSH
24891: NOP4
24895: PUSH
24896: NOP4
24900: ARRAY
24901: PUSH
24902: LD_INT 1
24904: ARRAY
24905: PPUSH
24906: NOP4
24910: PUSH
24911: NOP4
24915: ARRAY
24916: PUSH
24917: LD_INT 2
24919: ARRAY
24920: PPUSH
24921: NOP4
24925: OR
24926: IFFALSE 24932
// exit ;
24928: POP
24929: POP
24930: GO 25239
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24932: NOP4
24936: PUSH
24937: NOP4
24941: PUSH
24942: NOP4
24946: ARRAY
24947: PUSH
24948: LD_INT 1
24950: ARRAY
24951: PPUSH
24952: NOP4
24956: PUSH
24957: NOP4
24961: ARRAY
24962: PUSH
24963: LD_INT 2
24965: ARRAY
24966: PPUSH
24967: NOP4
24971: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24972: NOP4
24976: PUSH
24977: LD_INT 1
24979: ARRAY
24980: PUSH
24981: NOP4
24985: PUSH
24986: LD_INT 2
24988: ARRAY
24989: PUSH
24990: NOP4
24994: PUSH
24995: LD_INT 2
24997: PLUS
24998: GREATER
24999: OR
25000: PUSH
25001: NOP4
25005: PUSH
25006: LD_INT 2
25008: ARRAY
25009: PUSH
25010: NOP4
25014: PUSH
25015: LD_INT 2
25017: MINUS
25018: LESS
25019: OR
25020: PUSH
25021: NOP4
25025: PUSH
25026: LD_INT 3
25028: ARRAY
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: LD_INT 8
25035: PUSH
25036: LD_INT 9
25038: PUSH
25039: LD_INT 10
25041: PUSH
25042: LD_INT 11
25044: PUSH
25045: LD_INT 12
25047: PUSH
25048: LD_INT 13
25050: PUSH
25051: LD_INT 16
25053: PUSH
25054: LD_INT 17
25056: PUSH
25057: LD_INT 18
25059: PUSH
25060: LD_INT 19
25062: PUSH
25063: LD_INT 20
25065: PUSH
25066: LD_INT 21
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: IN
25084: NOT
25085: OR
25086: PUSH
25087: NOP4
25091: PUSH
25092: LD_INT 5
25094: ARRAY
25095: NOT
25096: OR
25097: PUSH
25098: NOP4
25102: PUSH
25103: LD_INT 6
25105: ARRAY
25106: PUSH
25107: LD_INT 1
25109: PUSH
25110: LD_INT 2
25112: PUSH
25113: LD_INT 7
25115: PUSH
25116: LD_INT 9
25118: PUSH
25119: LD_INT 10
25121: PUSH
25122: LD_INT 11
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: IN
25133: NOT
25134: OR
25135: IFFALSE 25141
// exit ;
25137: POP
25138: POP
25139: GO 25239
// end ;
25141: GO 24812
25143: POP
25144: POP
// side := GetSide ( depot ) ;
25145: NOP4
25149: PUSH
25150: NOP4
25154: PPUSH
25155: NOP4
25159: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25160: NOP4
25164: PPUSH
25165: NOP4
25169: PPUSH
25170: NOP4
25174: PPUSH
25175: LD_INT 20
25177: PPUSH
25178: NOP4
25182: PUSH
25183: LD_INT 4
25185: ARRAY
25186: IFFALSE 25190
// exit ;
25188: GO 25239
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25190: NOP4
25194: PUSH
25195: LD_INT 29
25197: PUSH
25198: LD_INT 30
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: IN
25205: PUSH
25206: NOP4
25210: PPUSH
25211: NOP4
25215: PPUSH
25216: NOP4
25220: PPUSH
25221: NOP4
25225: NOT
25226: AND
25227: IFFALSE 25231
// exit ;
25229: GO 25239
// result := true ;
25231: NOP4
25235: PUSH
25236: LD_INT 1
25238: ST_TO_ADDR
// end ;
25239: LD_VAR 0 6
25243: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
25244: LD_INT 0
25246: PPUSH
25247: PPUSH
25248: PPUSH
25249: PPUSH
25250: PPUSH
25251: PPUSH
25252: PPUSH
25253: PPUSH
25254: PPUSH
25255: PPUSH
25256: PPUSH
25257: PPUSH
25258: PPUSH
25259: PPUSH
25260: PPUSH
25261: PPUSH
25262: PPUSH
25263: PPUSH
25264: PPUSH
25265: PPUSH
25266: PPUSH
25267: PPUSH
25268: PPUSH
25269: PPUSH
25270: PPUSH
25271: PPUSH
25272: PPUSH
25273: PPUSH
25274: PPUSH
25275: PPUSH
25276: PPUSH
25277: PPUSH
25278: PPUSH
25279: PPUSH
25280: PPUSH
25281: PPUSH
25282: PPUSH
25283: PPUSH
25284: PPUSH
25285: PPUSH
25286: PPUSH
25287: PPUSH
25288: PPUSH
25289: PPUSH
25290: PPUSH
25291: PPUSH
25292: PPUSH
25293: PPUSH
25294: PPUSH
25295: PPUSH
25296: PPUSH
25297: PPUSH
25298: PPUSH
25299: PPUSH
25300: PPUSH
25301: PPUSH
25302: PPUSH
25303: PPUSH
// result = [ ] ;
25304: NOP4
25308: PUSH
25309: EMPTY
25310: ST_TO_ADDR
// temp_list = [ ] ;
25311: NOP4
25315: PUSH
25316: EMPTY
25317: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25318: NOP4
25322: PUSH
25323: LD_INT 0
25325: PUSH
25326: LD_INT 1
25328: PUSH
25329: LD_INT 2
25331: PUSH
25332: LD_INT 3
25334: PUSH
25335: LD_INT 4
25337: PUSH
25338: LD_INT 5
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: IN
25349: NOT
25350: PUSH
25351: NOP4
25355: PUSH
25356: LD_INT 0
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: IN
25366: PUSH
25367: NOP4
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: LD_INT 2
25377: PUSH
25378: LD_INT 3
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: IN
25386: NOT
25387: AND
25388: OR
25389: IFFALSE 25393
// exit ;
25391: GO 43784
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25393: NOP4
25397: PUSH
25398: LD_INT 6
25400: PUSH
25401: LD_INT 7
25403: PUSH
25404: LD_INT 8
25406: PUSH
25407: LD_INT 13
25409: PUSH
25410: LD_INT 12
25412: PUSH
25413: LD_INT 15
25415: PUSH
25416: LD_INT 11
25418: PUSH
25419: LD_INT 14
25421: PUSH
25422: LD_INT 10
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: IN
25436: IFFALSE 25446
// btype = b_lab ;
25438: NOP4
25442: PUSH
25443: LD_INT 6
25445: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25446: NOP4
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: LD_INT 1
25456: PUSH
25457: LD_INT 2
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: LIST
25464: IN
25465: NOT
25466: PUSH
25467: NOP4
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: LD_INT 1
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: LD_INT 3
25483: PUSH
25484: LD_INT 6
25486: PUSH
25487: LD_INT 36
25489: PUSH
25490: LD_INT 4
25492: PUSH
25493: LD_INT 5
25495: PUSH
25496: LD_INT 31
25498: PUSH
25499: LD_INT 32
25501: PUSH
25502: LD_INT 33
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: IN
25518: NOT
25519: PUSH
25520: NOP4
25524: PUSH
25525: LD_INT 1
25527: EQUAL
25528: AND
25529: OR
25530: PUSH
25531: NOP4
25535: PUSH
25536: LD_INT 2
25538: PUSH
25539: LD_INT 3
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: IN
25546: NOT
25547: PUSH
25548: NOP4
25552: PUSH
25553: LD_INT 2
25555: EQUAL
25556: AND
25557: OR
25558: IFFALSE 25568
// mode = 0 ;
25560: NOP4
25564: PUSH
25565: LD_INT 0
25567: ST_TO_ADDR
// case mode of 0 :
25568: NOP4
25572: PUSH
25573: LD_INT 0
25575: DOUBLE
25576: EQUAL
25577: IFTRUE 25581
25579: GO 37034
25581: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25582: NOP4
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: LD_INT 0
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 0
25599: PUSH
25600: LD_INT 1
25602: NEG
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 1
25610: PUSH
25611: LD_INT 0
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 1
25620: PUSH
25621: LD_INT 1
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 0
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 1
25640: NEG
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 1
25651: NEG
25652: PUSH
25653: LD_INT 1
25655: NEG
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: LD_INT 2
25667: NEG
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 0
25675: PUSH
25676: LD_INT 2
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: LD_INT 1
25689: NEG
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 1
25697: PUSH
25698: LD_INT 2
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 0
25707: PUSH
25708: LD_INT 2
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 1
25717: NEG
25718: PUSH
25719: LD_INT 1
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 1
25728: PUSH
25729: LD_INT 3
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: LD_INT 3
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 1
25748: NEG
25749: PUSH
25750: LD_INT 2
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25775: NOP4
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: LD_INT 0
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: LD_INT 1
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 0
25823: PUSH
25824: LD_INT 1
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: LD_INT 0
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 1
25844: NEG
25845: PUSH
25846: LD_INT 1
25848: NEG
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 1
25856: PUSH
25857: LD_INT 1
25859: NEG
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 2
25867: PUSH
25868: LD_INT 0
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 2
25877: PUSH
25878: LD_INT 1
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 1
25887: NEG
25888: PUSH
25889: LD_INT 1
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 2
25898: NEG
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 2
25909: NEG
25910: PUSH
25911: LD_INT 1
25913: NEG
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 2
25921: NEG
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 3
25932: NEG
25933: PUSH
25934: LD_INT 0
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 3
25943: NEG
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25971: NOP4
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: LD_INT 0
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 0
25988: PUSH
25989: LD_INT 1
25991: NEG
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 1
25999: PUSH
26000: LD_INT 0
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 0
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 1
26029: NEG
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: NEG
26041: PUSH
26042: LD_INT 1
26044: NEG
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 1
26052: NEG
26053: PUSH
26054: LD_INT 2
26056: NEG
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 2
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 2
26074: PUSH
26075: LD_INT 2
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: PUSH
26085: LD_INT 2
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 2
26094: NEG
26095: PUSH
26096: LD_INT 1
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 2
26106: NEG
26107: PUSH
26108: LD_INT 2
26110: NEG
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: NEG
26119: PUSH
26120: LD_INT 3
26122: NEG
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 3
26130: NEG
26131: PUSH
26132: LD_INT 2
26134: NEG
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 3
26142: NEG
26143: PUSH
26144: LD_INT 3
26146: NEG
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26170: NOP4
26174: PUSH
26175: LD_INT 0
26177: PUSH
26178: LD_INT 0
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: LD_INT 1
26190: NEG
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 1
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: LD_INT 1
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 0
26218: PUSH
26219: LD_INT 1
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 1
26228: NEG
26229: PUSH
26230: LD_INT 0
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 1
26239: NEG
26240: PUSH
26241: LD_INT 1
26243: NEG
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 1
26251: NEG
26252: PUSH
26253: LD_INT 2
26255: NEG
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: LD_INT 2
26266: NEG
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: LD_INT 1
26277: NEG
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 1
26285: PUSH
26286: LD_INT 2
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: LD_INT 2
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 1
26316: NEG
26317: PUSH
26318: LD_INT 3
26320: NEG
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: LD_INT 3
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: LD_INT 2
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26366: NOP4
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: LD_INT 1
26386: NEG
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 1
26394: PUSH
26395: LD_INT 0
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 1
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: LD_INT 1
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 1
26424: NEG
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: NEG
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: LD_INT 1
26450: NEG
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 2
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: LD_INT 1
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 2
26489: NEG
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 2
26500: NEG
26501: PUSH
26502: LD_INT 1
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 3
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 3
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26559: NOP4
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: LD_INT 1
26579: NEG
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: LD_INT 1
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: LD_INT 1
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 1
26628: NEG
26629: PUSH
26630: LD_INT 1
26632: NEG
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 1
26640: NEG
26641: PUSH
26642: LD_INT 2
26644: NEG
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 2
26652: PUSH
26653: LD_INT 1
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 2
26662: PUSH
26663: LD_INT 2
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 1
26672: PUSH
26673: LD_INT 2
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 2
26682: NEG
26683: PUSH
26684: LD_INT 1
26686: NEG
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 2
26694: NEG
26695: PUSH
26696: LD_INT 2
26698: NEG
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 3
26706: PUSH
26707: LD_INT 2
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 3
26716: PUSH
26717: LD_INT 3
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 2
26726: PUSH
26727: LD_INT 3
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26752: NOP4
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: LD_INT 0
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: LD_INT 1
26772: NEG
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 0
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 1
26821: NEG
26822: PUSH
26823: LD_INT 1
26825: NEG
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: LD_INT 2
26837: NEG
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: LD_INT 2
26848: NEG
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: LD_INT 1
26859: NEG
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 2
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 2
26877: PUSH
26878: LD_INT 1
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 2
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 1
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 2
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 2
26928: NEG
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 2
26939: NEG
26940: PUSH
26941: LD_INT 1
26943: NEG
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 2
26951: NEG
26952: PUSH
26953: LD_INT 2
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26982: NOP4
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: LD_INT 1
27002: NEG
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 1
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: NEG
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 1
27051: NEG
27052: PUSH
27053: LD_INT 1
27055: NEG
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: LD_INT 2
27067: NEG
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 0
27075: PUSH
27076: LD_INT 2
27078: NEG
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: LD_INT 1
27089: NEG
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: LD_INT 1
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 2
27117: PUSH
27118: LD_INT 2
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 1
27127: PUSH
27128: LD_INT 2
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 0
27137: PUSH
27138: LD_INT 2
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 1
27147: NEG
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 2
27158: NEG
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 2
27169: NEG
27170: PUSH
27171: LD_INT 1
27173: NEG
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 2
27181: NEG
27182: PUSH
27183: LD_INT 2
27185: NEG
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27212: NOP4
27216: PUSH
27217: LD_INT 0
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: LD_INT 1
27232: NEG
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: LD_INT 1
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 1
27281: NEG
27282: PUSH
27283: LD_INT 1
27285: NEG
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 1
27293: NEG
27294: PUSH
27295: LD_INT 2
27297: NEG
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 0
27305: PUSH
27306: LD_INT 2
27308: NEG
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 2
27327: PUSH
27328: LD_INT 0
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 2
27347: PUSH
27348: LD_INT 2
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 1
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 1
27377: NEG
27378: PUSH
27379: LD_INT 1
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 2
27388: NEG
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 2
27399: NEG
27400: PUSH
27401: LD_INT 1
27403: NEG
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 2
27411: NEG
27412: PUSH
27413: LD_INT 2
27415: NEG
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27442: NOP4
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 0
27459: PUSH
27460: LD_INT 1
27462: NEG
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 0
27490: PUSH
27491: LD_INT 1
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 1
27500: NEG
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: LD_INT 1
27515: NEG
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: LD_INT 2
27527: NEG
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 0
27535: PUSH
27536: LD_INT 2
27538: NEG
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 1
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 2
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 2
27577: PUSH
27578: LD_INT 2
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 1
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: LD_INT 2
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 1
27607: NEG
27608: PUSH
27609: LD_INT 1
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 2
27618: NEG
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 2
27629: NEG
27630: PUSH
27631: LD_INT 1
27633: NEG
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 2
27641: NEG
27642: PUSH
27643: LD_INT 2
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27672: NOP4
27676: PUSH
27677: LD_INT 0
27679: PUSH
27680: LD_INT 0
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 0
27689: PUSH
27690: LD_INT 1
27692: NEG
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 1
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: LD_INT 1
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 0
27720: PUSH
27721: LD_INT 1
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 1
27741: NEG
27742: PUSH
27743: LD_INT 1
27745: NEG
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 1
27753: NEG
27754: PUSH
27755: LD_INT 2
27757: NEG
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 0
27765: PUSH
27766: LD_INT 2
27768: NEG
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 2
27787: PUSH
27788: LD_INT 0
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 2
27797: PUSH
27798: LD_INT 1
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 2
27807: PUSH
27808: LD_INT 2
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 1
27817: PUSH
27818: LD_INT 2
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: LD_INT 2
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 1
27837: NEG
27838: PUSH
27839: LD_INT 1
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 2
27848: NEG
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 2
27859: NEG
27860: PUSH
27861: LD_INT 1
27863: NEG
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 2
27871: NEG
27872: PUSH
27873: LD_INT 2
27875: NEG
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27902: NOP4
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 0
27919: PUSH
27920: LD_INT 1
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 1
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: LD_INT 1
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 0
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 1
27971: NEG
27972: PUSH
27973: LD_INT 1
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 1
27983: NEG
27984: PUSH
27985: LD_INT 2
27987: NEG
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: LD_INT 2
27998: NEG
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 1
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 2
28017: PUSH
28018: LD_INT 0
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 2
28027: PUSH
28028: LD_INT 1
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: LD_INT 2
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: LD_INT 2
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 0
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 1
28067: NEG
28068: PUSH
28069: LD_INT 1
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 2
28078: NEG
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 2
28089: NEG
28090: PUSH
28091: LD_INT 1
28093: NEG
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 2
28101: NEG
28102: PUSH
28103: LD_INT 2
28105: NEG
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28132: NOP4
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: LD_INT 0
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 0
28149: PUSH
28150: LD_INT 1
28152: NEG
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 1
28170: PUSH
28171: LD_INT 1
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 1
28190: NEG
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 1
28201: NEG
28202: PUSH
28203: LD_INT 1
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: NEG
28214: PUSH
28215: LD_INT 2
28217: NEG
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 0
28225: PUSH
28226: LD_INT 2
28228: NEG
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: LD_INT 1
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: LD_INT 0
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: LD_INT 1
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 2
28267: PUSH
28268: LD_INT 2
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 1
28277: PUSH
28278: LD_INT 2
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: LD_INT 2
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 1
28297: NEG
28298: PUSH
28299: LD_INT 1
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 2
28308: NEG
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 2
28319: NEG
28320: PUSH
28321: LD_INT 1
28323: NEG
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 2
28331: NEG
28332: PUSH
28333: LD_INT 2
28335: NEG
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 2
28343: NEG
28344: PUSH
28345: LD_INT 3
28347: NEG
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 1
28355: NEG
28356: PUSH
28357: LD_INT 3
28359: NEG
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: LD_INT 2
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 2
28378: PUSH
28379: LD_INT 1
28381: NEG
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28412: NOP4
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: LD_INT 1
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: NEG
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 1
28493: NEG
28494: PUSH
28495: LD_INT 2
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: LD_INT 2
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: LD_INT 1
28519: NEG
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 2
28527: PUSH
28528: LD_INT 0
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 2
28537: PUSH
28538: LD_INT 1
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 2
28547: PUSH
28548: LD_INT 2
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 1
28557: PUSH
28558: LD_INT 2
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 0
28567: PUSH
28568: LD_INT 2
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: NEG
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 2
28599: NEG
28600: PUSH
28601: LD_INT 1
28603: NEG
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 2
28611: NEG
28612: PUSH
28613: LD_INT 2
28615: NEG
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 1
28623: PUSH
28624: LD_INT 2
28626: NEG
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 2
28634: PUSH
28635: LD_INT 1
28637: NEG
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 3
28645: PUSH
28646: LD_INT 1
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 3
28655: PUSH
28656: LD_INT 2
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28688: NOP4
28692: PUSH
28693: LD_INT 0
28695: PUSH
28696: LD_INT 0
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 0
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: LD_INT 0
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 1
28726: PUSH
28727: LD_INT 1
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 0
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 1
28746: NEG
28747: PUSH
28748: LD_INT 0
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 1
28757: NEG
28758: PUSH
28759: LD_INT 1
28761: NEG
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 1
28769: NEG
28770: PUSH
28771: LD_INT 2
28773: NEG
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 0
28781: PUSH
28782: LD_INT 2
28784: NEG
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: LD_INT 1
28795: NEG
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 2
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 2
28813: PUSH
28814: LD_INT 1
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 2
28823: PUSH
28824: LD_INT 2
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: LD_INT 2
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: LD_INT 2
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 1
28853: NEG
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 2
28864: NEG
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: LD_INT 1
28879: NEG
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 2
28887: NEG
28888: PUSH
28889: LD_INT 2
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 3
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 3
28909: PUSH
28910: LD_INT 2
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: LD_INT 3
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: LD_INT 3
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28962: NOP4
28966: PUSH
28967: LD_INT 0
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 1
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 0
29010: PUSH
29011: LD_INT 1
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 1
29020: NEG
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 1
29031: NEG
29032: PUSH
29033: LD_INT 1
29035: NEG
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 1
29043: NEG
29044: PUSH
29045: LD_INT 2
29047: NEG
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 0
29055: PUSH
29056: LD_INT 2
29058: NEG
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 1
29066: PUSH
29067: LD_INT 1
29069: NEG
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 2
29077: PUSH
29078: LD_INT 0
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 2
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 2
29097: PUSH
29098: LD_INT 2
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 1
29107: PUSH
29108: LD_INT 2
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 0
29117: PUSH
29118: LD_INT 2
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 1
29127: NEG
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 2
29138: NEG
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 2
29149: NEG
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 2
29161: NEG
29162: PUSH
29163: LD_INT 2
29165: NEG
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 2
29173: PUSH
29174: LD_INT 3
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: PUSH
29184: LD_INT 3
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: NEG
29194: PUSH
29195: LD_INT 2
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29238: NOP4
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: LD_INT 1
29258: NEG
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: LD_INT 0
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 1
29276: PUSH
29277: LD_INT 1
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: LD_INT 0
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 1
29307: NEG
29308: PUSH
29309: LD_INT 1
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: NEG
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 1
29342: PUSH
29343: LD_INT 1
29345: NEG
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 2
29353: PUSH
29354: LD_INT 0
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 2
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 2
29373: PUSH
29374: LD_INT 2
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: LD_INT 2
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 0
29393: PUSH
29394: LD_INT 2
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: PUSH
29405: LD_INT 1
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 2
29414: NEG
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 2
29425: NEG
29426: PUSH
29427: LD_INT 1
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 2
29437: NEG
29438: PUSH
29439: LD_INT 2
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 1
29449: NEG
29450: PUSH
29451: LD_INT 2
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 2
29460: NEG
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 3
29471: NEG
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 3
29483: NEG
29484: PUSH
29485: LD_INT 2
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29518: NOP4
29522: PUSH
29523: LD_INT 0
29525: PUSH
29526: LD_INT 0
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 0
29535: PUSH
29536: LD_INT 1
29538: NEG
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: LD_INT 0
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 1
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 0
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 1
29576: NEG
29577: PUSH
29578: LD_INT 0
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 1
29587: NEG
29588: PUSH
29589: LD_INT 1
29591: NEG
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 1
29599: NEG
29600: PUSH
29601: LD_INT 2
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 0
29611: PUSH
29612: LD_INT 2
29614: NEG
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 1
29622: PUSH
29623: LD_INT 1
29625: NEG
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 2
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: LD_INT 1
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 2
29653: PUSH
29654: LD_INT 2
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 1
29663: PUSH
29664: LD_INT 2
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 0
29673: PUSH
29674: LD_INT 2
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 1
29683: NEG
29684: PUSH
29685: LD_INT 1
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 2
29694: NEG
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 2
29705: NEG
29706: PUSH
29707: LD_INT 1
29709: NEG
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 2
29717: NEG
29718: PUSH
29719: LD_INT 2
29721: NEG
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 2
29729: NEG
29730: PUSH
29731: LD_INT 3
29733: NEG
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 1
29741: NEG
29742: PUSH
29743: LD_INT 3
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 3
29753: NEG
29754: PUSH
29755: LD_INT 1
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 3
29765: NEG
29766: PUSH
29767: LD_INT 2
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29800: NOP4
29804: PUSH
29805: LD_INT 0
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 0
29817: PUSH
29818: LD_INT 1
29820: NEG
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 1
29828: PUSH
29829: LD_INT 0
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 1
29838: PUSH
29839: LD_INT 1
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 0
29848: PUSH
29849: LD_INT 1
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 1
29858: NEG
29859: PUSH
29860: LD_INT 0
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: LD_INT 1
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 1
29881: NEG
29882: PUSH
29883: LD_INT 2
29885: NEG
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: LD_INT 2
29896: NEG
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: LD_INT 1
29907: NEG
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 2
29915: PUSH
29916: LD_INT 0
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 2
29925: PUSH
29926: LD_INT 1
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 1
29935: PUSH
29936: LD_INT 2
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 0
29945: PUSH
29946: LD_INT 2
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: NEG
29956: PUSH
29957: LD_INT 1
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 2
29966: NEG
29967: PUSH
29968: LD_INT 1
29970: NEG
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 2
29978: NEG
29979: PUSH
29980: LD_INT 2
29982: NEG
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 2
29990: NEG
29991: PUSH
29992: LD_INT 3
29994: NEG
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 2
30002: PUSH
30003: LD_INT 1
30005: NEG
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 3
30013: PUSH
30014: LD_INT 1
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 1
30023: PUSH
30024: LD_INT 3
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 1
30033: NEG
30034: PUSH
30035: LD_INT 2
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 3
30044: NEG
30045: PUSH
30046: LD_INT 2
30048: NEG
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30079: NOP4
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 0
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 0
30127: PUSH
30128: LD_INT 1
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 1
30137: NEG
30138: PUSH
30139: LD_INT 0
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: NEG
30149: PUSH
30150: LD_INT 1
30152: NEG
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 1
30160: NEG
30161: PUSH
30162: LD_INT 2
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 0
30172: PUSH
30173: LD_INT 2
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: LD_INT 1
30186: NEG
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 2
30194: PUSH
30195: LD_INT 0
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 2
30204: PUSH
30205: LD_INT 1
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 2
30214: PUSH
30215: LD_INT 2
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 1
30224: PUSH
30225: LD_INT 2
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 1
30234: NEG
30235: PUSH
30236: LD_INT 1
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 2
30245: NEG
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 2
30256: NEG
30257: PUSH
30258: LD_INT 1
30260: NEG
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: NEG
30269: PUSH
30270: LD_INT 3
30272: NEG
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: PUSH
30281: LD_INT 2
30283: NEG
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 3
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 2
30301: PUSH
30302: LD_INT 3
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 2
30311: NEG
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 3
30322: NEG
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30357: NOP4
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: LD_INT 1
30377: NEG
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: LD_INT 0
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 1
30395: PUSH
30396: LD_INT 1
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 0
30405: PUSH
30406: LD_INT 1
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 1
30415: NEG
30416: PUSH
30417: LD_INT 0
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 1
30426: NEG
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 1
30438: NEG
30439: PUSH
30440: LD_INT 2
30442: NEG
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: LD_INT 1
30453: NEG
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 2
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 2
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 2
30481: PUSH
30482: LD_INT 2
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 1
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 0
30501: PUSH
30502: LD_INT 2
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 1
30511: NEG
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 2
30534: NEG
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 2
30546: NEG
30547: PUSH
30548: LD_INT 3
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 2
30558: PUSH
30559: LD_INT 1
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 3
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: LD_INT 3
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 1
30589: NEG
30590: PUSH
30591: LD_INT 2
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 3
30600: NEG
30601: PUSH
30602: LD_INT 2
30604: NEG
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30635: NOP4
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: LD_INT 0
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 0
30652: PUSH
30653: LD_INT 1
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: LD_INT 1
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 0
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: NEG
30705: PUSH
30706: LD_INT 1
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: LD_INT 2
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 0
30728: PUSH
30729: LD_INT 2
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 1
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 2
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: LD_INT 2
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 1
30770: PUSH
30771: LD_INT 2
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 0
30780: PUSH
30781: LD_INT 2
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 1
30790: NEG
30791: PUSH
30792: LD_INT 1
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 2
30801: NEG
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 2
30812: NEG
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 1
30824: NEG
30825: PUSH
30826: LD_INT 3
30828: NEG
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: LD_INT 2
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 3
30847: PUSH
30848: LD_INT 2
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 2
30857: PUSH
30858: LD_INT 3
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 2
30867: NEG
30868: PUSH
30869: LD_INT 1
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 3
30878: NEG
30879: PUSH
30880: LD_INT 1
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30913: NOP4
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: LD_INT 1
30933: NEG
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 1
30941: PUSH
30942: LD_INT 0
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 1
30951: PUSH
30952: LD_INT 1
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: LD_INT 1
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 1
30971: NEG
30972: PUSH
30973: LD_INT 0
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: NEG
30983: PUSH
30984: LD_INT 1
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 1
30994: NEG
30995: PUSH
30996: LD_INT 2
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 1
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 2
31017: PUSH
31018: LD_INT 0
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 2
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 1
31037: PUSH
31038: LD_INT 2
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 0
31047: PUSH
31048: LD_INT 2
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 1
31057: NEG
31058: PUSH
31059: LD_INT 1
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 2
31068: NEG
31069: PUSH
31070: LD_INT 0
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 2
31079: NEG
31080: PUSH
31081: LD_INT 1
31083: NEG
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 2
31091: NEG
31092: PUSH
31093: LD_INT 2
31095: NEG
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 2
31103: NEG
31104: PUSH
31105: LD_INT 3
31107: NEG
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 2
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 3
31126: PUSH
31127: LD_INT 1
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: LD_INT 3
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: LD_INT 2
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 3
31157: NEG
31158: PUSH
31159: LD_INT 2
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31192: NOP4
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 0
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 1
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 1
31250: NEG
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: LD_INT 1
31265: NEG
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: LD_INT 2
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: LD_INT 1
31299: NEG
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: LD_INT 1
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 2
31348: NEG
31349: PUSH
31350: LD_INT 0
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 2
31359: NEG
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 2
31371: NEG
31372: PUSH
31373: LD_INT 2
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PUSH
31385: LD_INT 3
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: LD_INT 2
31398: NEG
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 3
31406: PUSH
31407: LD_INT 2
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: LD_INT 3
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 2
31426: NEG
31427: PUSH
31428: LD_INT 1
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 3
31437: NEG
31438: PUSH
31439: LD_INT 1
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31472: NOP4
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: LD_INT 0
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 0
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 1
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 0
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 1
31541: NEG
31542: PUSH
31543: LD_INT 1
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 2
31553: PUSH
31554: LD_INT 1
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 2
31563: NEG
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31584: NOP4
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: LD_INT 0
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: LD_INT 1
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 1
31642: NEG
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: LD_INT 2
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 1
31677: PUSH
31678: LD_INT 2
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31696: NOP4
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: LD_INT 0
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 0
31713: PUSH
31714: LD_INT 1
31716: NEG
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 1
31724: PUSH
31725: LD_INT 0
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 1
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 0
31744: PUSH
31745: LD_INT 1
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 1
31754: NEG
31755: PUSH
31756: LD_INT 0
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 1
31765: NEG
31766: PUSH
31767: LD_INT 1
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 1
31777: PUSH
31778: LD_INT 1
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31808: NOP4
31812: PUSH
31813: LD_INT 0
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: LD_INT 1
31828: NEG
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 1
31846: PUSH
31847: LD_INT 1
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: LD_INT 1
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 1
31877: NEG
31878: PUSH
31879: LD_INT 1
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: LD_INT 1
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31920: NOP4
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: LD_INT 1
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 1
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: LD_INT 1
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 1
31978: NEG
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: LD_INT 1
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 1
32001: NEG
32002: PUSH
32003: LD_INT 2
32005: NEG
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 1
32013: PUSH
32014: LD_INT 2
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32032: NOP4
32036: PUSH
32037: LD_INT 0
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 1
32060: PUSH
32061: LD_INT 0
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: PUSH
32071: LD_INT 1
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 0
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 1
32090: NEG
32091: PUSH
32092: LD_INT 0
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 1
32101: NEG
32102: PUSH
32103: LD_INT 1
32105: NEG
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 1
32113: PUSH
32114: LD_INT 1
32116: NEG
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 1
32124: NEG
32125: PUSH
32126: LD_INT 1
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32144: NOP4
32148: PUSH
32149: LD_INT 0
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 1
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 1
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 0
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 1
32202: NEG
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 1
32213: NEG
32214: PUSH
32215: LD_INT 1
32217: NEG
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 1
32225: NEG
32226: PUSH
32227: LD_INT 2
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: LD_INT 1
32240: NEG
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 2
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 2
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 2
32268: PUSH
32269: LD_INT 2
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 1
32278: PUSH
32279: LD_INT 2
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 1
32288: NEG
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 2
32299: NEG
32300: PUSH
32301: LD_INT 0
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 2
32310: NEG
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 2
32322: NEG
32323: PUSH
32324: LD_INT 2
32326: NEG
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 2
32334: NEG
32335: PUSH
32336: LD_INT 3
32338: NEG
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 2
32346: PUSH
32347: LD_INT 1
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 3
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 3
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 3
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 3
32387: PUSH
32388: LD_INT 3
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 2
32397: PUSH
32398: LD_INT 3
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 2
32407: NEG
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 3
32418: NEG
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 3
32429: NEG
32430: PUSH
32431: LD_INT 1
32433: NEG
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 3
32441: NEG
32442: PUSH
32443: LD_INT 2
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 3
32453: NEG
32454: PUSH
32455: LD_INT 3
32457: NEG
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32494: NOP4
32498: PUSH
32499: LD_INT 0
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 0
32511: PUSH
32512: LD_INT 1
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 1
32522: PUSH
32523: LD_INT 0
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: LD_INT 1
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: LD_INT 1
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 1
32552: NEG
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 1
32563: NEG
32564: PUSH
32565: LD_INT 1
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 1
32575: NEG
32576: PUSH
32577: LD_INT 2
32579: NEG
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: LD_INT 2
32590: NEG
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 2
32609: PUSH
32610: LD_INT 1
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 2
32619: PUSH
32620: LD_INT 2
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 1
32629: PUSH
32630: LD_INT 2
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: LD_INT 2
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: NEG
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 2
32660: NEG
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 2
32672: NEG
32673: PUSH
32674: LD_INT 2
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 2
32684: NEG
32685: PUSH
32686: LD_INT 3
32688: NEG
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: LD_INT 3
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: LD_INT 3
32711: NEG
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: PUSH
32720: LD_INT 2
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 3
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 3
32740: PUSH
32741: LD_INT 3
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 2
32750: PUSH
32751: LD_INT 3
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: PUSH
32761: LD_INT 3
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 0
32770: PUSH
32771: LD_INT 3
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 3
32791: NEG
32792: PUSH
32793: LD_INT 2
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 3
32803: NEG
32804: PUSH
32805: LD_INT 3
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32844: NOP4
32848: PUSH
32849: LD_INT 0
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: LD_INT 1
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 1
32872: PUSH
32873: LD_INT 0
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: LD_INT 1
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: LD_INT 1
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: PUSH
32904: LD_INT 0
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: NEG
32914: PUSH
32915: LD_INT 1
32917: NEG
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: NEG
32926: PUSH
32927: LD_INT 2
32929: NEG
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: LD_INT 2
32940: NEG
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: PUSH
32949: LD_INT 1
32951: NEG
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 2
32959: PUSH
32960: LD_INT 0
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 2
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 1
32979: PUSH
32980: LD_INT 2
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: LD_INT 2
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 2
33010: NEG
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 2
33021: NEG
33022: PUSH
33023: LD_INT 1
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 1
33033: NEG
33034: PUSH
33035: LD_INT 3
33037: NEG
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 0
33045: PUSH
33046: LD_INT 3
33048: NEG
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 1
33056: PUSH
33057: LD_INT 2
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 2
33067: PUSH
33068: LD_INT 1
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 3
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 3
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 1
33098: PUSH
33099: LD_INT 3
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 0
33108: PUSH
33109: LD_INT 3
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: LD_INT 2
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 2
33129: NEG
33130: PUSH
33131: LD_INT 1
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 3
33140: NEG
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 3
33151: NEG
33152: PUSH
33153: LD_INT 1
33155: NEG
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33192: NOP4
33196: PUSH
33197: LD_INT 0
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 0
33209: PUSH
33210: LD_INT 1
33212: NEG
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 1
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: LD_INT 1
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 1
33250: NEG
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: NEG
33262: PUSH
33263: LD_INT 1
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: LD_INT 2
33277: NEG
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 1
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 2
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 2
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 2
33316: PUSH
33317: LD_INT 2
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: LD_INT 2
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 1
33336: NEG
33337: PUSH
33338: LD_INT 1
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 2
33347: NEG
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 2
33358: NEG
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 2
33370: NEG
33371: PUSH
33372: LD_INT 2
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 2
33382: NEG
33383: PUSH
33384: LD_INT 3
33386: NEG
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 2
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 3
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 3
33415: PUSH
33416: LD_INT 1
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 3
33425: PUSH
33426: LD_INT 2
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 3
33435: PUSH
33436: LD_INT 3
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 2
33445: PUSH
33446: LD_INT 3
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 2
33455: NEG
33456: PUSH
33457: LD_INT 1
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 3
33466: NEG
33467: PUSH
33468: LD_INT 0
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 3
33477: NEG
33478: PUSH
33479: LD_INT 1
33481: NEG
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 3
33489: NEG
33490: PUSH
33491: LD_INT 2
33493: NEG
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 3
33501: NEG
33502: PUSH
33503: LD_INT 3
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33542: NOP4
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: LD_INT 0
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: LD_INT 1
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: NEG
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: LD_INT 1
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: LD_INT 2
33627: NEG
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 0
33635: PUSH
33636: LD_INT 2
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 2
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: LD_INT 2
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 1
33697: NEG
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: LD_INT 1
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 2
33720: NEG
33721: PUSH
33722: LD_INT 2
33724: NEG
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 2
33732: NEG
33733: PUSH
33734: LD_INT 3
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 1
33744: NEG
33745: PUSH
33746: LD_INT 3
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: LD_INT 3
33759: NEG
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: LD_INT 2
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 3
33778: PUSH
33779: LD_INT 2
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 3
33788: PUSH
33789: LD_INT 3
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 2
33798: PUSH
33799: LD_INT 3
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 1
33808: PUSH
33809: LD_INT 3
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: LD_INT 3
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: LD_INT 2
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 3
33839: NEG
33840: PUSH
33841: LD_INT 2
33843: NEG
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 3
33851: NEG
33852: PUSH
33853: LD_INT 3
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33892: NOP4
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: LD_INT 0
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: LD_INT 1
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 1
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: LD_INT 1
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: LD_INT 1
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 1
33950: NEG
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: NEG
33962: PUSH
33963: LD_INT 1
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 1
33973: NEG
33974: PUSH
33975: LD_INT 2
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: LD_INT 2
33988: NEG
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 1
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 2
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 2
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: LD_INT 2
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: LD_INT 2
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 1
34047: NEG
34048: PUSH
34049: LD_INT 1
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 2
34058: NEG
34059: PUSH
34060: LD_INT 0
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 2
34069: NEG
34070: PUSH
34071: LD_INT 1
34073: NEG
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 1
34081: NEG
34082: PUSH
34083: LD_INT 3
34085: NEG
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 0
34093: PUSH
34094: LD_INT 3
34096: NEG
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: LD_INT 2
34107: NEG
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 3
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 3
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 1
34146: PUSH
34147: LD_INT 3
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: LD_INT 3
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 2
34177: NEG
34178: PUSH
34179: LD_INT 1
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 3
34188: NEG
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 3
34199: NEG
34200: PUSH
34201: LD_INT 1
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34240: NOP4
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: LD_INT 1
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 1
34309: NEG
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: LD_INT 2
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 2
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 2
34355: NEG
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 2
34367: NEG
34368: PUSH
34369: LD_INT 2
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34391: NOP4
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: LD_INT 0
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 0
34408: PUSH
34409: LD_INT 1
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 1
34419: PUSH
34420: LD_INT 0
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: LD_INT 1
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: LD_INT 1
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 1
34449: NEG
34450: PUSH
34451: LD_INT 0
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 1
34460: NEG
34461: PUSH
34462: LD_INT 1
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: LD_INT 2
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: LD_INT 2
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 2
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 2
34516: PUSH
34517: LD_INT 1
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34538: NOP4
34542: PUSH
34543: LD_INT 0
34545: PUSH
34546: LD_INT 0
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 0
34555: PUSH
34556: LD_INT 1
34558: NEG
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 1
34596: NEG
34597: PUSH
34598: LD_INT 0
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: LD_INT 1
34611: NEG
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 1
34619: PUSH
34620: LD_INT 1
34622: NEG
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: LD_INT 1
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: LD_INT 2
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: LD_INT 2
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34682: NOP4
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: LD_INT 0
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: LD_INT 1
34702: NEG
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: LD_INT 1
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: LD_INT 0
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: LD_INT 1
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 2
34763: PUSH
34764: LD_INT 1
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 2
34773: PUSH
34774: LD_INT 2
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 1
34783: PUSH
34784: LD_INT 2
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: LD_INT 2
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34826: NOP4
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: LD_INT 1
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: LD_INT 1
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 1
34907: PUSH
34908: LD_INT 2
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 0
34917: PUSH
34918: LD_INT 2
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 1
34927: NEG
34928: PUSH
34929: LD_INT 1
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: LD_INT 0
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 2
34949: NEG
34950: PUSH
34951: LD_INT 1
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34973: NOP4
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: LD_INT 1
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: LD_INT 1
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: LD_INT 1
35046: NEG
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: PUSH
35056: LD_INT 2
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 1
35066: NEG
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 2
35077: NEG
35078: PUSH
35079: LD_INT 0
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 2
35088: NEG
35089: PUSH
35090: LD_INT 1
35092: NEG
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 2
35100: NEG
35101: PUSH
35102: LD_INT 2
35104: NEG
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35124: NOP4
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: LD_INT 1
35144: NEG
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 1
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 1
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 0
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 1
35193: NEG
35194: PUSH
35195: LD_INT 1
35197: NEG
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 1
35205: NEG
35206: PUSH
35207: LD_INT 2
35209: NEG
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: LD_INT 2
35220: NEG
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 1
35228: PUSH
35229: LD_INT 1
35231: NEG
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 2
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 2
35249: PUSH
35250: LD_INT 1
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 2
35259: PUSH
35260: LD_INT 2
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: LD_INT 2
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 0
35279: PUSH
35280: LD_INT 2
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: NEG
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 2
35300: NEG
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 2
35311: NEG
35312: PUSH
35313: LD_INT 1
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 2
35323: NEG
35324: PUSH
35325: LD_INT 2
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35354: NOP4
35358: PUSH
35359: LD_INT 0
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 0
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 1
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 1
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 0
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: NEG
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 1
35423: NEG
35424: PUSH
35425: LD_INT 1
35427: NEG
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: NEG
35436: PUSH
35437: LD_INT 2
35439: NEG
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: LD_INT 2
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: LD_INT 1
35461: NEG
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: LD_INT 0
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 2
35479: PUSH
35480: LD_INT 1
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 2
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 1
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 0
35509: PUSH
35510: LD_INT 2
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: LD_INT 1
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 2
35530: NEG
35531: PUSH
35532: LD_INT 0
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: NEG
35542: PUSH
35543: LD_INT 1
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 2
35553: NEG
35554: PUSH
35555: LD_INT 2
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35584: NOP4
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: LD_INT 0
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: LD_INT 1
35604: NEG
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 1
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: LD_INT 1
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 1
35653: NEG
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: LD_INT 2
35669: NEG
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: LD_INT 2
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: LD_INT 1
35691: NEG
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 2
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 2
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: LD_INT 2
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 1
35729: PUSH
35730: LD_INT 2
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 0
35739: PUSH
35740: LD_INT 2
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 2
35760: NEG
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 2
35771: NEG
35772: PUSH
35773: LD_INT 1
35775: NEG
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 2
35783: NEG
35784: PUSH
35785: LD_INT 2
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35814: NOP4
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 0
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 1
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: LD_INT 1
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: LD_INT 1
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 1
35872: NEG
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 1
35883: NEG
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 1
35895: NEG
35896: PUSH
35897: LD_INT 2
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 0
35907: PUSH
35908: LD_INT 2
35910: NEG
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 2
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 2
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 2
35949: PUSH
35950: LD_INT 2
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 1
35959: PUSH
35960: LD_INT 2
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: LD_INT 2
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 1
35979: NEG
35980: PUSH
35981: LD_INT 1
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 2
35990: NEG
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 2
36001: NEG
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 2
36013: NEG
36014: PUSH
36015: LD_INT 2
36017: NEG
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36044: NOP4
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 1
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 1
36082: PUSH
36083: LD_INT 1
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 1
36102: NEG
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: NEG
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 1
36125: NEG
36126: PUSH
36127: LD_INT 2
36129: NEG
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: LD_INT 2
36140: NEG
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 1
36148: PUSH
36149: LD_INT 1
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 2
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 2
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 2
36179: PUSH
36180: LD_INT 2
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: LD_INT 2
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: LD_INT 2
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: LD_INT 1
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 2
36220: NEG
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 2
36231: NEG
36232: PUSH
36233: LD_INT 1
36235: NEG
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: LD_INT 2
36247: NEG
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36274: NOP4
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 1
36355: NEG
36356: PUSH
36357: LD_INT 2
36359: NEG
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: LD_INT 2
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 2
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 2
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 2
36409: PUSH
36410: LD_INT 2
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: PUSH
36420: LD_INT 2
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: LD_INT 2
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: LD_INT 1
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 2
36450: NEG
36451: PUSH
36452: LD_INT 0
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 2
36461: NEG
36462: PUSH
36463: LD_INT 1
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 2
36473: NEG
36474: PUSH
36475: LD_INT 2
36477: NEG
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36504: NOP4
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: LD_INT 0
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: LD_INT 1
36524: NEG
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: LD_INT 1
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 1
36573: NEG
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36592: NOP4
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 1
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: NEG
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36680: NOP4
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: NEG
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36768: NOP4
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: LD_INT 0
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 0
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 0
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 1
36837: NEG
36838: PUSH
36839: LD_INT 1
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36856: NOP4
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 0
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: NEG
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36944: NOP4
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: LD_INT 1
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 1
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: LD_INT 1
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 1
37002: NEG
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 1
37013: NEG
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: ST_TO_ADDR
// end ; 1 :
37032: GO 42929
37034: LD_INT 1
37036: DOUBLE
37037: EQUAL
37038: IFTRUE 37042
37040: GO 39665
37042: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37043: NOP4
37047: PUSH
37048: LD_INT 1
37050: NEG
37051: PUSH
37052: LD_INT 3
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: LD_INT 3
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: PUSH
37074: LD_INT 2
37076: NEG
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: LIST
37086: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37087: NOP4
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 3
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 3
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: LIST
37127: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37128: NOP4
37132: PUSH
37133: LD_INT 3
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 3
37145: PUSH
37146: LD_INT 3
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 2
37155: PUSH
37156: LD_INT 3
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: LIST
37167: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37168: NOP4
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: LD_INT 3
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 0
37185: PUSH
37186: LD_INT 3
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 1
37195: NEG
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: LIST
37208: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37209: NOP4
37213: PUSH
37214: LD_INT 2
37216: NEG
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 3
37227: NEG
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 3
37238: NEG
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37253: NOP4
37257: PUSH
37258: LD_INT 2
37260: NEG
37261: PUSH
37262: LD_INT 3
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 3
37272: NEG
37273: PUSH
37274: LD_INT 2
37276: NEG
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 3
37284: NEG
37285: PUSH
37286: LD_INT 3
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: LIST
37298: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37299: NOP4
37303: PUSH
37304: LD_INT 1
37306: NEG
37307: PUSH
37308: LD_INT 3
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: LD_INT 3
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 1
37329: PUSH
37330: LD_INT 2
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37343: NOP4
37347: PUSH
37348: LD_INT 2
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 3
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 3
37371: PUSH
37372: LD_INT 1
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: LIST
37383: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37384: NOP4
37388: PUSH
37389: LD_INT 3
37391: PUSH
37392: LD_INT 2
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 3
37401: PUSH
37402: LD_INT 3
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 2
37411: PUSH
37412: LD_INT 3
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: LIST
37423: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37424: NOP4
37428: PUSH
37429: LD_INT 1
37431: PUSH
37432: LD_INT 3
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: LD_INT 3
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: LD_INT 2
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37465: NOP4
37469: PUSH
37470: LD_INT 2
37472: NEG
37473: PUSH
37474: LD_INT 1
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 3
37483: NEG
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 3
37494: NEG
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: LIST
37508: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37509: NOP4
37513: PUSH
37514: LD_INT 2
37516: NEG
37517: PUSH
37518: LD_INT 3
37520: NEG
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 3
37528: NEG
37529: PUSH
37530: LD_INT 2
37532: NEG
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 3
37540: NEG
37541: PUSH
37542: LD_INT 3
37544: NEG
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: LIST
37554: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37555: NOP4
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: LD_INT 3
37565: NEG
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 1
37573: NEG
37574: PUSH
37575: LD_INT 4
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: LD_INT 3
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37599: NOP4
37603: PUSH
37604: LD_INT 3
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 3
37616: PUSH
37617: LD_INT 1
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 4
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: LIST
37639: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37640: NOP4
37644: PUSH
37645: LD_INT 3
37647: PUSH
37648: LD_INT 3
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 4
37657: PUSH
37658: LD_INT 3
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 3
37667: PUSH
37668: LD_INT 4
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: LIST
37679: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37680: NOP4
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: LD_INT 3
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: LD_INT 4
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: LD_INT 3
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: LIST
37720: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37721: NOP4
37725: PUSH
37726: LD_INT 3
37728: NEG
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 3
37739: NEG
37740: PUSH
37741: LD_INT 1
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 4
37750: NEG
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: LIST
37764: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37765: NOP4
37769: PUSH
37770: LD_INT 3
37772: NEG
37773: PUSH
37774: LD_INT 3
37776: NEG
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 3
37784: NEG
37785: PUSH
37786: LD_INT 4
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 4
37796: NEG
37797: PUSH
37798: LD_INT 3
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: LIST
37810: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37811: NOP4
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: LD_INT 3
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 3
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: LD_INT 2
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 1
37852: NEG
37853: PUSH
37854: LD_INT 4
37856: NEG
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: LD_INT 4
37867: NEG
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: LD_INT 3
37878: NEG
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: LD_INT 5
37890: NEG
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: LD_INT 5
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: PUSH
37910: LD_INT 4
37912: NEG
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: LD_INT 6
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: LD_INT 6
37935: NEG
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: LD_INT 5
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37966: NOP4
37970: PUSH
37971: LD_INT 2
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 3
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 3
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 3
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 4
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 4
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 4
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 5
38046: PUSH
38047: LD_INT 0
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 5
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 5
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 6
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 6
38087: PUSH
38088: LD_INT 1
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38109: NOP4
38113: PUSH
38114: LD_INT 3
38116: PUSH
38117: LD_INT 2
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 3
38126: PUSH
38127: LD_INT 3
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 2
38136: PUSH
38137: LD_INT 3
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 4
38146: PUSH
38147: LD_INT 3
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 4
38156: PUSH
38157: LD_INT 4
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 3
38166: PUSH
38167: LD_INT 4
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 5
38176: PUSH
38177: LD_INT 4
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 5
38186: PUSH
38187: LD_INT 5
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 4
38196: PUSH
38197: LD_INT 5
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 6
38206: PUSH
38207: LD_INT 5
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 6
38216: PUSH
38217: LD_INT 6
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 5
38226: PUSH
38227: LD_INT 6
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38248: NOP4
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 3
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: LD_INT 3
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: LD_INT 2
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: LD_INT 4
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: LD_INT 4
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: LD_INT 3
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 1
38317: PUSH
38318: LD_INT 5
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: LD_INT 5
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: NEG
38338: PUSH
38339: LD_INT 4
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: LD_INT 6
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: LD_INT 6
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: LD_INT 5
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38391: NOP4
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 3
38409: NEG
38410: PUSH
38411: LD_INT 0
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 3
38420: NEG
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 3
38432: NEG
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 4
38443: NEG
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 4
38454: NEG
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 4
38466: NEG
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 5
38477: NEG
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 5
38488: NEG
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 5
38500: NEG
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 6
38511: NEG
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 6
38522: NEG
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38546: NOP4
38550: PUSH
38551: LD_INT 2
38553: NEG
38554: PUSH
38555: LD_INT 3
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 3
38565: NEG
38566: PUSH
38567: LD_INT 2
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 3
38577: NEG
38578: PUSH
38579: LD_INT 3
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 3
38589: NEG
38590: PUSH
38591: LD_INT 4
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 4
38601: NEG
38602: PUSH
38603: LD_INT 3
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 4
38613: NEG
38614: PUSH
38615: LD_INT 4
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 4
38625: NEG
38626: PUSH
38627: LD_INT 5
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 5
38637: NEG
38638: PUSH
38639: LD_INT 4
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 5
38649: NEG
38650: PUSH
38651: LD_INT 5
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 5
38661: NEG
38662: PUSH
38663: LD_INT 6
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 6
38673: NEG
38674: PUSH
38675: LD_INT 5
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 6
38685: NEG
38686: PUSH
38687: LD_INT 6
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38709: NOP4
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: LD_INT 2
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: LD_INT 3
38731: NEG
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: LIST
38752: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38753: NOP4
38757: PUSH
38758: LD_INT 2
38760: PUSH
38761: LD_INT 0
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 2
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 3
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38794: NOP4
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 3
38811: PUSH
38812: LD_INT 2
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 2
38821: PUSH
38822: LD_INT 3
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38834: NOP4
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: LD_INT 3
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: LD_INT 2
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: LIST
38874: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38875: NOP4
38879: PUSH
38880: LD_INT 2
38882: NEG
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: NEG
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 3
38904: NEG
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38919: NOP4
38923: PUSH
38924: LD_INT 2
38926: NEG
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 2
38938: NEG
38939: PUSH
38940: LD_INT 3
38942: NEG
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 3
38950: NEG
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: LIST
38964: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38965: NOP4
38969: PUSH
38970: LD_INT 2
38972: NEG
38973: PUSH
38974: LD_INT 3
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: LD_INT 3
38988: NEG
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38998: NOP4
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: LD_INT 2
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: LD_INT 1
39019: NEG
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39029: NOP4
39033: PUSH
39034: LD_INT 3
39036: PUSH
39037: LD_INT 1
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 3
39046: PUSH
39047: LD_INT 2
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39058: NOP4
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: LD_INT 3
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: LD_INT 3
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39087: NOP4
39091: PUSH
39092: LD_INT 1
39094: NEG
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 2
39105: NEG
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39118: NOP4
39122: PUSH
39123: LD_INT 3
39125: NEG
39126: PUSH
39127: LD_INT 1
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 3
39137: NEG
39138: PUSH
39139: LD_INT 2
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39151: NOP4
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: LD_INT 3
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: LD_INT 3
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: LD_INT 2
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: LIST
39194: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39195: NOP4
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 3
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 3
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: LIST
39235: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39236: NOP4
39240: PUSH
39241: LD_INT 3
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 3
39253: PUSH
39254: LD_INT 3
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 2
39263: PUSH
39264: LD_INT 3
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: LIST
39275: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39276: NOP4
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: LD_INT 3
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: LD_INT 3
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 1
39303: NEG
39304: PUSH
39305: LD_INT 2
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39317: NOP4
39321: PUSH
39322: LD_INT 2
39324: NEG
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 3
39335: NEG
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 3
39346: NEG
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: LIST
39360: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39361: NOP4
39365: PUSH
39366: LD_INT 2
39368: NEG
39369: PUSH
39370: LD_INT 3
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 3
39380: NEG
39381: PUSH
39382: LD_INT 2
39384: NEG
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 3
39392: NEG
39393: PUSH
39394: LD_INT 3
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: LIST
39406: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39407: NOP4
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: LD_INT 2
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: LD_INT 2
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: LD_INT 1
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: LIST
39450: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39451: NOP4
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 2
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 2
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: LIST
39491: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39492: NOP4
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: LD_INT 2
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39532: NOP4
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 0
39549: PUSH
39550: LD_INT 2
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: NEG
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: LIST
39572: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39573: NOP4
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 2
39591: NEG
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 2
39602: NEG
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: LIST
39616: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39617: NOP4
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: LD_INT 2
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 2
39636: NEG
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 2
39648: NEG
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: LIST
39662: ST_TO_ADDR
// end ; 2 :
39663: GO 42929
39665: LD_INT 2
39667: DOUBLE
39668: EQUAL
39669: IFTRUE 39673
39671: GO 42928
39673: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39674: NOP4
39678: PUSH
39679: LD_INT 4
39681: PUSH
39682: LD_INT 0
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 4
39691: PUSH
39692: LD_INT 1
39694: NEG
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 5
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 5
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 4
39722: PUSH
39723: LD_INT 1
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 3
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 3
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 3
39753: PUSH
39754: LD_INT 2
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 5
39764: PUSH
39765: LD_INT 2
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 3
39774: PUSH
39775: LD_INT 3
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 3
39784: PUSH
39785: LD_INT 2
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 4
39794: PUSH
39795: LD_INT 3
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 4
39804: PUSH
39805: LD_INT 4
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 3
39814: PUSH
39815: LD_INT 4
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 2
39824: PUSH
39825: LD_INT 3
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 2
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 4
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 2
39854: PUSH
39855: LD_INT 4
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 0
39864: PUSH
39865: LD_INT 4
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: LD_INT 3
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: PUSH
39885: LD_INT 4
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: LD_INT 5
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: LD_INT 5
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: LD_INT 4
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: LD_INT 3
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: LD_INT 5
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: LD_INT 3
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 3
39957: NEG
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 3
39968: NEG
39969: PUSH
39970: LD_INT 1
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 3
40002: NEG
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 4
40013: NEG
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 4
40024: NEG
40025: PUSH
40026: LD_INT 1
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 4
40036: NEG
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 2
40048: NEG
40049: PUSH
40050: LD_INT 2
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 4
40059: NEG
40060: PUSH
40061: LD_INT 4
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 4
40071: NEG
40072: PUSH
40073: LD_INT 5
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 3
40083: NEG
40084: PUSH
40085: LD_INT 4
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 3
40095: NEG
40096: PUSH
40097: LD_INT 3
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 4
40107: NEG
40108: PUSH
40109: LD_INT 3
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 5
40119: NEG
40120: PUSH
40121: LD_INT 4
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 5
40131: NEG
40132: PUSH
40133: LD_INT 5
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 3
40143: NEG
40144: PUSH
40145: LD_INT 5
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 5
40155: NEG
40156: PUSH
40157: LD_INT 3
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40212: NOP4
40216: PUSH
40217: LD_INT 4
40219: PUSH
40220: LD_INT 4
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 4
40229: PUSH
40230: LD_INT 3
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 5
40239: PUSH
40240: LD_INT 4
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 5
40249: PUSH
40250: LD_INT 5
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 4
40259: PUSH
40260: LD_INT 5
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 3
40269: PUSH
40270: LD_INT 4
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 3
40279: PUSH
40280: LD_INT 3
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 5
40289: PUSH
40290: LD_INT 3
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 3
40299: PUSH
40300: LD_INT 5
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: LD_INT 3
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: LD_INT 2
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: LD_INT 3
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: LD_INT 4
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: LD_INT 4
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: LD_INT 3
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: LD_INT 2
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: LD_INT 4
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 2
40391: NEG
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 4
40402: NEG
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 4
40413: NEG
40414: PUSH
40415: LD_INT 1
40417: NEG
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 3
40425: NEG
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 3
40436: NEG
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 4
40447: NEG
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 5
40458: NEG
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 5
40469: NEG
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 5
40481: NEG
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 3
40493: NEG
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 3
40504: NEG
40505: PUSH
40506: LD_INT 3
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 3
40516: NEG
40517: PUSH
40518: LD_INT 4
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 2
40528: NEG
40529: PUSH
40530: LD_INT 3
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: NEG
40541: PUSH
40542: LD_INT 2
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 3
40552: NEG
40553: PUSH
40554: LD_INT 2
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 4
40564: NEG
40565: PUSH
40566: LD_INT 3
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 4
40576: NEG
40577: PUSH
40578: LD_INT 4
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 2
40588: NEG
40589: PUSH
40590: LD_INT 4
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 4
40600: NEG
40601: PUSH
40602: LD_INT 2
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: LD_INT 4
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: LD_INT 5
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: LD_INT 4
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 3
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: LD_INT 3
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: LD_INT 4
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 5
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: LD_INT 3
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 2
40702: NEG
40703: PUSH
40704: LD_INT 5
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40759: NOP4
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: LD_INT 4
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: LD_INT 3
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: LD_INT 4
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 5
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 5
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: LD_INT 4
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 3
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: LD_INT 5
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 2
40848: NEG
40849: PUSH
40850: LD_INT 3
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 3
40859: NEG
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 3
40870: NEG
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 2
40882: NEG
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: NEG
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 3
40904: NEG
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 4
40915: NEG
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 4
40926: NEG
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 4
40938: NEG
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 2
40950: NEG
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 4
40961: NEG
40962: PUSH
40963: LD_INT 4
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 4
40973: NEG
40974: PUSH
40975: LD_INT 5
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 3
40985: NEG
40986: PUSH
40987: LD_INT 4
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 3
40997: NEG
40998: PUSH
40999: LD_INT 3
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 4
41009: NEG
41010: PUSH
41011: LD_INT 3
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 5
41021: NEG
41022: PUSH
41023: LD_INT 4
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 5
41033: NEG
41034: PUSH
41035: LD_INT 5
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 3
41045: NEG
41046: PUSH
41047: LD_INT 5
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 5
41057: NEG
41058: PUSH
41059: LD_INT 3
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: LD_INT 3
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 4
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: LD_INT 3
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: LD_INT 2
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: LD_INT 2
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: LD_INT 3
41128: NEG
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: LD_INT 4
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: LD_INT 2
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 2
41159: NEG
41160: PUSH
41161: LD_INT 4
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 4
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 4
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 5
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 5
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 4
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 3
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 3
41232: PUSH
41233: LD_INT 1
41235: NEG
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 3
41243: PUSH
41244: LD_INT 2
41246: NEG
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 5
41254: PUSH
41255: LD_INT 2
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41309: NOP4
41313: PUSH
41314: LD_INT 4
41316: NEG
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 4
41327: NEG
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 3
41339: NEG
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 3
41350: NEG
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 4
41361: NEG
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 5
41372: NEG
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 5
41383: NEG
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 5
41395: NEG
41396: PUSH
41397: LD_INT 2
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 3
41407: NEG
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 3
41418: NEG
41419: PUSH
41420: LD_INT 3
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 3
41430: NEG
41431: PUSH
41432: LD_INT 4
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 2
41442: NEG
41443: PUSH
41444: LD_INT 3
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 2
41454: NEG
41455: PUSH
41456: LD_INT 2
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 3
41466: NEG
41467: PUSH
41468: LD_INT 2
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 4
41478: NEG
41479: PUSH
41480: LD_INT 3
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 4
41490: NEG
41491: PUSH
41492: LD_INT 4
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: LD_INT 4
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 4
41514: NEG
41515: PUSH
41516: LD_INT 2
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 4
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: LD_INT 5
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: LD_INT 4
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: LD_INT 3
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: LD_INT 3
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: LD_INT 4
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 5
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: LD_INT 3
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 2
41616: NEG
41617: PUSH
41618: LD_INT 5
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 3
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 3
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 4
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 4
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 3
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 4
41711: PUSH
41712: LD_INT 2
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 4
41721: PUSH
41722: LD_INT 4
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 4
41731: PUSH
41732: LD_INT 3
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 5
41741: PUSH
41742: LD_INT 4
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 5
41751: PUSH
41752: LD_INT 5
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 4
41761: PUSH
41762: LD_INT 5
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 3
41771: PUSH
41772: LD_INT 4
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 3
41781: PUSH
41782: LD_INT 3
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 5
41791: PUSH
41792: LD_INT 3
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 3
41801: PUSH
41802: LD_INT 5
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41856: NOP4
41860: PUSH
41861: LD_INT 4
41863: NEG
41864: PUSH
41865: LD_INT 4
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 4
41875: NEG
41876: PUSH
41877: LD_INT 5
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 3
41887: NEG
41888: PUSH
41889: LD_INT 4
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 3
41899: NEG
41900: PUSH
41901: LD_INT 3
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 4
41911: NEG
41912: PUSH
41913: LD_INT 3
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 5
41923: NEG
41924: PUSH
41925: LD_INT 4
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 5
41935: NEG
41936: PUSH
41937: LD_INT 5
41939: NEG
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 3
41947: NEG
41948: PUSH
41949: LD_INT 5
41951: NEG
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 5
41959: NEG
41960: PUSH
41961: LD_INT 3
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: LD_INT 3
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: LD_INT 4
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 3
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: LD_INT 2
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: LD_INT 3
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: LD_INT 4
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: LD_INT 4
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 4
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 4
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 5
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 5
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 4
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 3
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 3
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 3
42145: PUSH
42146: LD_INT 2
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 5
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 3
42166: PUSH
42167: LD_INT 3
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 3
42176: PUSH
42177: LD_INT 2
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 4
42186: PUSH
42187: LD_INT 3
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 4
42196: PUSH
42197: LD_INT 4
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 3
42206: PUSH
42207: LD_INT 4
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 2
42216: PUSH
42217: LD_INT 3
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 2
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 4
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: PUSH
42247: LD_INT 4
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: LD_INT 4
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: LD_INT 3
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: LD_INT 4
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: LD_INT 5
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 5
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: LD_INT 4
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: LD_INT 3
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: LD_INT 5
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 2
42338: NEG
42339: PUSH
42340: LD_INT 3
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42394: NOP4
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: LD_INT 4
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: LD_INT 5
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: LD_INT 4
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 3
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 3
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: LD_INT 4
42460: NEG
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PUSH
42470: LD_INT 5
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 2
42480: PUSH
42481: LD_INT 3
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: LD_INT 5
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 3
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 3
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 4
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 4
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 3
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 2
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 2
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 2
42575: PUSH
42576: LD_INT 2
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 4
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 4
42596: PUSH
42597: LD_INT 4
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 4
42606: PUSH
42607: LD_INT 3
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 5
42616: PUSH
42617: LD_INT 4
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 5
42626: PUSH
42627: LD_INT 5
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 4
42636: PUSH
42637: LD_INT 5
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 3
42646: PUSH
42647: LD_INT 4
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 3
42656: PUSH
42657: LD_INT 3
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 5
42666: PUSH
42667: LD_INT 3
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 3
42676: PUSH
42677: LD_INT 5
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: LD_INT 3
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: LD_INT 2
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: LD_INT 3
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: LD_INT 4
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: LD_INT 4
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: LD_INT 3
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 2
42758: PUSH
42759: LD_INT 4
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 2
42768: NEG
42769: PUSH
42770: LD_INT 2
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 4
42779: NEG
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 4
42790: NEG
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 3
42802: NEG
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 3
42813: NEG
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 4
42824: NEG
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 5
42835: NEG
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 5
42846: NEG
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 5
42858: NEG
42859: PUSH
42860: LD_INT 2
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 3
42870: NEG
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: ST_TO_ADDR
// end ; end ;
42926: GO 42929
42928: POP
// case btype of b_depot , b_warehouse :
42929: NOP4
42933: PUSH
42934: LD_INT 0
42936: DOUBLE
42937: EQUAL
42938: IFTRUE 42948
42940: LD_INT 1
42942: DOUBLE
42943: EQUAL
42944: IFTRUE 42948
42946: GO 43149
42948: POP
// case nation of nation_american :
42949: NOP4
42953: PUSH
42954: LD_INT 1
42956: DOUBLE
42957: EQUAL
42958: IFTRUE 42962
42960: GO 43018
42962: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
42963: NOP4
42967: PUSH
42968: NOP4
42972: PUSH
42973: NOP4
42977: PUSH
42978: NOP4
42982: PUSH
42983: NOP4
42987: PUSH
42988: NOP4
42992: PUSH
42993: NOP4
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: PUSH
43006: NOP4
43010: PUSH
43011: LD_INT 1
43013: PLUS
43014: ARRAY
43015: ST_TO_ADDR
43016: GO 43147
43018: LD_INT 2
43020: DOUBLE
43021: EQUAL
43022: IFTRUE 43026
43024: GO 43082
43026: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
43027: NOP4
43031: PUSH
43032: NOP4
43036: PUSH
43037: NOP4
43041: PUSH
43042: NOP4
43046: PUSH
43047: NOP4
43051: PUSH
43052: NOP4
43056: PUSH
43057: NOP4
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: PUSH
43070: NOP4
43074: PUSH
43075: LD_INT 1
43077: PLUS
43078: ARRAY
43079: ST_TO_ADDR
43080: GO 43147
43082: LD_INT 3
43084: DOUBLE
43085: EQUAL
43086: IFTRUE 43090
43088: GO 43146
43090: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43091: NOP4
43095: PUSH
43096: NOP4
43100: PUSH
43101: NOP4
43105: PUSH
43106: NOP4
43110: PUSH
43111: NOP4
43115: PUSH
43116: NOP4
43120: PUSH
43121: NOP4
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: PUSH
43134: NOP4
43138: PUSH
43139: LD_INT 1
43141: PLUS
43142: ARRAY
43143: ST_TO_ADDR
43144: GO 43147
43146: POP
43147: GO 43702
43149: LD_INT 2
43151: DOUBLE
43152: EQUAL
43153: IFTRUE 43163
43155: LD_INT 3
43157: DOUBLE
43158: EQUAL
43159: IFTRUE 43163
43161: GO 43219
43163: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43164: NOP4
43168: PUSH
43169: NOP4
43173: PUSH
43174: NOP4
43178: PUSH
43179: NOP4
43183: PUSH
43184: NOP4
43188: PUSH
43189: NOP4
43193: PUSH
43194: NOP4
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: PUSH
43207: NOP4
43211: PUSH
43212: LD_INT 1
43214: PLUS
43215: ARRAY
43216: ST_TO_ADDR
43217: GO 43702
43219: LD_INT 16
43221: DOUBLE
43222: EQUAL
43223: IFTRUE 43281
43225: LD_INT 17
43227: DOUBLE
43228: EQUAL
43229: IFTRUE 43281
43231: LD_INT 18
43233: DOUBLE
43234: EQUAL
43235: IFTRUE 43281
43237: LD_INT 19
43239: DOUBLE
43240: EQUAL
43241: IFTRUE 43281
43243: LD_INT 22
43245: DOUBLE
43246: EQUAL
43247: IFTRUE 43281
43249: LD_INT 20
43251: DOUBLE
43252: EQUAL
43253: IFTRUE 43281
43255: LD_INT 21
43257: DOUBLE
43258: EQUAL
43259: IFTRUE 43281
43261: LD_INT 23
43263: DOUBLE
43264: EQUAL
43265: IFTRUE 43281
43267: LD_INT 24
43269: DOUBLE
43270: EQUAL
43271: IFTRUE 43281
43273: LD_INT 25
43275: DOUBLE
43276: EQUAL
43277: IFTRUE 43281
43279: GO 43337
43281: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43282: NOP4
43286: PUSH
43287: NOP4
43291: PUSH
43292: NOP4
43296: PUSH
43297: NOP4
43301: PUSH
43302: NOP4
43306: PUSH
43307: NOP4
43311: PUSH
43312: NOP4
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: PUSH
43325: NOP4
43329: PUSH
43330: LD_INT 1
43332: PLUS
43333: ARRAY
43334: ST_TO_ADDR
43335: GO 43702
43337: LD_INT 6
43339: DOUBLE
43340: EQUAL
43341: IFTRUE 43393
43343: LD_INT 7
43345: DOUBLE
43346: EQUAL
43347: IFTRUE 43393
43349: LD_INT 8
43351: DOUBLE
43352: EQUAL
43353: IFTRUE 43393
43355: LD_INT 13
43357: DOUBLE
43358: EQUAL
43359: IFTRUE 43393
43361: LD_INT 12
43363: DOUBLE
43364: EQUAL
43365: IFTRUE 43393
43367: LD_INT 15
43369: DOUBLE
43370: EQUAL
43371: IFTRUE 43393
43373: LD_INT 11
43375: DOUBLE
43376: EQUAL
43377: IFTRUE 43393
43379: LD_INT 14
43381: DOUBLE
43382: EQUAL
43383: IFTRUE 43393
43385: LD_INT 10
43387: DOUBLE
43388: EQUAL
43389: IFTRUE 43393
43391: GO 43449
43393: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
43394: NOP4
43398: PUSH
43399: NOP4
43403: PUSH
43404: NOP4
43408: PUSH
43409: NOP4
43413: PUSH
43414: NOP4
43418: PUSH
43419: NOP4
43423: PUSH
43424: NOP4
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: PUSH
43437: NOP4
43441: PUSH
43442: LD_INT 1
43444: PLUS
43445: ARRAY
43446: ST_TO_ADDR
43447: GO 43702
43449: LD_INT 36
43451: DOUBLE
43452: EQUAL
43453: IFTRUE 43457
43455: GO 43513
43457: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43458: NOP4
43462: PUSH
43463: NOP4
43467: PUSH
43468: NOP4
43472: PUSH
43473: NOP4
43477: PUSH
43478: NOP4
43482: PUSH
43483: NOP4
43487: PUSH
43488: NOP4
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: PUSH
43501: NOP4
43505: PUSH
43506: LD_INT 1
43508: PLUS
43509: ARRAY
43510: ST_TO_ADDR
43511: GO 43702
43513: LD_INT 4
43515: DOUBLE
43516: EQUAL
43517: IFTRUE 43539
43519: LD_INT 5
43521: DOUBLE
43522: EQUAL
43523: IFTRUE 43539
43525: LD_INT 34
43527: DOUBLE
43528: EQUAL
43529: IFTRUE 43539
43531: LD_INT 37
43533: DOUBLE
43534: EQUAL
43535: IFTRUE 43539
43537: GO 43595
43539: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43540: NOP4
43544: PUSH
43545: NOP4
43549: PUSH
43550: NOP4
43554: PUSH
43555: NOP4
43559: PUSH
43560: NOP4
43564: PUSH
43565: NOP4
43569: PUSH
43570: NOP4
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: PUSH
43583: NOP4
43587: PUSH
43588: LD_INT 1
43590: PLUS
43591: ARRAY
43592: ST_TO_ADDR
43593: GO 43702
43595: LD_INT 31
43597: DOUBLE
43598: EQUAL
43599: IFTRUE 43645
43601: LD_INT 32
43603: DOUBLE
43604: EQUAL
43605: IFTRUE 43645
43607: LD_INT 33
43609: DOUBLE
43610: EQUAL
43611: IFTRUE 43645
43613: LD_INT 27
43615: DOUBLE
43616: EQUAL
43617: IFTRUE 43645
43619: LD_INT 26
43621: DOUBLE
43622: EQUAL
43623: IFTRUE 43645
43625: LD_INT 28
43627: DOUBLE
43628: EQUAL
43629: IFTRUE 43645
43631: LD_INT 29
43633: DOUBLE
43634: EQUAL
43635: IFTRUE 43645
43637: LD_INT 30
43639: DOUBLE
43640: EQUAL
43641: IFTRUE 43645
43643: GO 43701
43645: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
43646: NOP4
43650: PUSH
43651: NOP4
43655: PUSH
43656: NOP4
43660: PUSH
43661: NOP4
43665: PUSH
43666: NOP4
43670: PUSH
43671: NOP4
43675: PUSH
43676: NOP4
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: PUSH
43689: NOP4
43693: PUSH
43694: LD_INT 1
43696: PLUS
43697: ARRAY
43698: ST_TO_ADDR
43699: GO 43702
43701: POP
// temp_list2 = [ ] ;
43702: NOP4
43706: PUSH
43707: EMPTY
43708: ST_TO_ADDR
// for i in temp_list do
43709: NOP4
43713: PUSH
43714: NOP4
43718: PUSH
43719: FOR_IN
43720: IFFALSE 43772
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43722: NOP4
43726: PUSH
43727: NOP4
43731: PUSH
43732: NOP4
43736: PUSH
43737: LD_INT 1
43739: ARRAY
43740: PUSH
43741: NOP4
43745: PLUS
43746: PUSH
43747: NOP4
43751: PUSH
43752: LD_INT 2
43754: ARRAY
43755: PUSH
43756: NOP4
43760: PLUS
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: EMPTY
43767: LIST
43768: ADD
43769: ST_TO_ADDR
43770: GO 43719
43772: POP
43773: POP
// result = temp_list2 ;
43774: NOP4
43778: PUSH
43779: NOP4
43783: ST_TO_ADDR
// end ;
43784: LD_VAR 0 7
43788: RET
// export function EnemyInRange ( unit , dist ) ; begin
43789: LD_INT 0
43791: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43792: NOP4
43796: PUSH
43797: NOP4
43801: PPUSH
43802: NOP4
43806: PPUSH
43807: NOP4
43811: PPUSH
43812: NOP4
43816: PPUSH
43817: NOP4
43821: PPUSH
43822: NOP4
43826: PPUSH
43827: NOP4
43831: PPUSH
43832: NOP4
43836: PUSH
43837: LD_INT 4
43839: ARRAY
43840: ST_TO_ADDR
// end ;
43841: LD_VAR 0 3
43845: RET
// export function PlayerSeeMe ( unit ) ; begin
43846: LD_INT 0
43848: PPUSH
// result := See ( your_side , unit ) ;
43849: NOP4
43853: PUSH
43854: NOP4
43858: PPUSH
43859: NOP4
43863: PPUSH
43864: NOP4
43868: ST_TO_ADDR
// end ;
43869: LD_VAR 0 2
43873: RET
// export function ReverseDir ( unit ) ; begin
43874: LD_INT 0
43876: PPUSH
// if not unit then
43877: NOP4
43881: NOT
43882: IFFALSE 43886
// exit ;
43884: GO 43932
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
43886: NOP4
43890: PUSH
43891: LD_INT 3
43893: PUSH
43894: LD_INT 4
43896: PUSH
43897: LD_INT 5
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: PUSH
43917: NOP4
43921: PPUSH
43922: NOP4
43926: PUSH
43927: LD_INT 1
43929: PLUS
43930: ARRAY
43931: ST_TO_ADDR
// end ;
43932: LD_VAR 0 2
43936: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
43937: LD_INT 0
43939: PPUSH
43940: PPUSH
43941: PPUSH
43942: PPUSH
43943: PPUSH
// if not hexes then
43944: NOP4
43948: NOT
43949: IFFALSE 43953
// exit ;
43951: GO 44101
// dist := 9999 ;
43953: NOP4
43957: PUSH
43958: LD_INT 9999
43960: ST_TO_ADDR
// for i = 1 to hexes do
43961: NOP4
43965: PUSH
43966: DOUBLE
43967: LD_INT 1
43969: DEC
43970: ST_TO_ADDR
43971: NOP4
43975: PUSH
43976: FOR_TO
43977: IFFALSE 44089
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
43979: NOP4
43983: PPUSH
43984: NOP4
43988: PUSH
43989: NOP4
43993: ARRAY
43994: PUSH
43995: LD_INT 1
43997: ARRAY
43998: PPUSH
43999: NOP4
44003: PUSH
44004: NOP4
44008: ARRAY
44009: PUSH
44010: LD_INT 2
44012: ARRAY
44013: PPUSH
44014: NOP4
44018: PUSH
44019: NOP4
44023: LESS
44024: IFFALSE 44087
// begin hex := hexes [ i ] ;
44026: NOP4
44030: PUSH
44031: NOP4
44035: PUSH
44036: NOP4
44040: ARRAY
44041: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44042: NOP4
44046: PUSH
44047: NOP4
44051: PPUSH
44052: NOP4
44056: PUSH
44057: NOP4
44061: ARRAY
44062: PUSH
44063: LD_INT 1
44065: ARRAY
44066: PPUSH
44067: NOP4
44071: PUSH
44072: NOP4
44076: ARRAY
44077: PUSH
44078: LD_INT 2
44080: ARRAY
44081: PPUSH
44082: NOP4
44086: ST_TO_ADDR
// end ; end ;
44087: GO 43976
44089: POP
44090: POP
// result := hex ;
44091: NOP4
44095: PUSH
44096: NOP4
44100: ST_TO_ADDR
// end ;
44101: LD_VAR 0 3
44105: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44106: LD_INT 0
44108: PPUSH
44109: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44110: NOP4
44114: NOT
44115: PUSH
44116: NOP4
44120: PUSH
44121: LD_INT 21
44123: PUSH
44124: LD_INT 2
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 23
44133: PUSH
44134: LD_INT 2
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PPUSH
44145: NOP4
44149: IN
44150: NOT
44151: OR
44152: IFFALSE 44156
// exit ;
44154: GO 44203
// for i = 1 to 3 do
44156: NOP4
44160: PUSH
44161: DOUBLE
44162: LD_INT 1
44164: DEC
44165: ST_TO_ADDR
44166: LD_INT 3
44168: PUSH
44169: FOR_TO
44170: IFFALSE 44201
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44172: NOP4
44176: PPUSH
44177: NOP4
44181: PPUSH
44182: NOP4
44186: PPUSH
44187: NOP4
44191: PPUSH
44192: LD_INT 1
44194: PPUSH
44195: NOP4
44199: GO 44169
44201: POP
44202: POP
// end ;
44203: LD_VAR 0 2
44207: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44208: LD_INT 0
44210: PPUSH
44211: PPUSH
44212: PPUSH
44213: PPUSH
44214: PPUSH
44215: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
44216: NOP4
44220: NOT
44221: PUSH
44222: NOP4
44226: NOT
44227: OR
44228: PUSH
44229: NOP4
44233: PPUSH
44234: NOP4
44238: OR
44239: IFFALSE 44243
// exit ;
44241: GO 44684
// x := GetX ( enemy_unit ) ;
44243: NOP4
44247: PUSH
44248: NOP4
44252: PPUSH
44253: NOP4
44257: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44258: NOP4
44262: PUSH
44263: NOP4
44267: PPUSH
44268: NOP4
44272: ST_TO_ADDR
// if not x or not y then
44273: NOP4
44277: NOT
44278: PUSH
44279: NOP4
44283: NOT
44284: OR
44285: IFFALSE 44289
// exit ;
44287: GO 44684
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44289: NOP4
44293: PUSH
44294: NOP4
44298: PPUSH
44299: LD_INT 0
44301: PPUSH
44302: LD_INT 4
44304: PPUSH
44305: NOP4
44309: PUSH
44310: NOP4
44314: PPUSH
44315: LD_INT 0
44317: PPUSH
44318: LD_INT 4
44320: PPUSH
44321: NOP4
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: NOP4
44334: PPUSH
44335: LD_INT 1
44337: PPUSH
44338: LD_INT 4
44340: PPUSH
44341: NOP4
44345: PUSH
44346: NOP4
44350: PPUSH
44351: LD_INT 1
44353: PPUSH
44354: LD_INT 4
44356: PPUSH
44357: NOP4
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: NOP4
44370: PPUSH
44371: LD_INT 2
44373: PPUSH
44374: LD_INT 4
44376: PPUSH
44377: NOP4
44381: PUSH
44382: NOP4
44386: PPUSH
44387: LD_INT 2
44389: PPUSH
44390: LD_INT 4
44392: PPUSH
44393: NOP4
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: NOP4
44406: PPUSH
44407: LD_INT 3
44409: PPUSH
44410: LD_INT 4
44412: PPUSH
44413: NOP4
44417: PUSH
44418: NOP4
44422: PPUSH
44423: LD_INT 3
44425: PPUSH
44426: LD_INT 4
44428: PPUSH
44429: NOP4
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: NOP4
44442: PPUSH
44443: LD_INT 4
44445: PPUSH
44446: LD_INT 4
44448: PPUSH
44449: NOP4
44453: PUSH
44454: NOP4
44458: PPUSH
44459: LD_INT 4
44461: PPUSH
44462: LD_INT 4
44464: PPUSH
44465: NOP4
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: NOP4
44478: PPUSH
44479: LD_INT 5
44481: PPUSH
44482: LD_INT 4
44484: PPUSH
44485: NOP4
44489: PUSH
44490: NOP4
44494: PPUSH
44495: LD_INT 5
44497: PPUSH
44498: LD_INT 4
44500: PPUSH
44501: NOP4
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: ST_TO_ADDR
// for i = tmp downto 1 do
44518: NOP4
44522: PUSH
44523: DOUBLE
44524: NOP4
44528: INC
44529: ST_TO_ADDR
44530: LD_INT 1
44532: PUSH
44533: FOR_DOWNTO
44534: IFFALSE 44635
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44536: NOP4
44540: PUSH
44541: NOP4
44545: ARRAY
44546: PUSH
44547: LD_INT 1
44549: ARRAY
44550: PPUSH
44551: NOP4
44555: PUSH
44556: NOP4
44560: ARRAY
44561: PUSH
44562: LD_INT 2
44564: ARRAY
44565: PPUSH
44566: NOP4
44570: NOT
44571: PUSH
44572: NOP4
44576: PUSH
44577: NOP4
44581: ARRAY
44582: PUSH
44583: LD_INT 1
44585: ARRAY
44586: PPUSH
44587: NOP4
44591: PUSH
44592: NOP4
44596: ARRAY
44597: PUSH
44598: LD_INT 2
44600: ARRAY
44601: PPUSH
44602: NOP4
44606: PUSH
44607: LD_INT 0
44609: NONEQUAL
44610: OR
44611: IFFALSE 44633
// tmp := Delete ( tmp , i ) ;
44613: NOP4
44617: PUSH
44618: NOP4
44622: PPUSH
44623: NOP4
44627: PPUSH
44628: NOP4
44632: ST_TO_ADDR
44633: GO 44533
44635: POP
44636: POP
// j := GetClosestHex ( unit , tmp ) ;
44637: NOP4
44641: PUSH
44642: NOP4
44646: PPUSH
44647: NOP4
44651: PPUSH
44652: NOP4
44656: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44657: NOP4
44661: PPUSH
44662: NOP4
44666: PUSH
44667: LD_INT 1
44669: ARRAY
44670: PPUSH
44671: NOP4
44675: PUSH
44676: LD_INT 2
44678: ARRAY
44679: PPUSH
44680: NOP4
// end ;
44684: LD_VAR 0 3
44688: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44689: LD_INT 0
44691: PPUSH
44692: PPUSH
44693: PPUSH
// uc_side = 0 ;
44694: LD_ADDR_OWVAR 20
44698: PUSH
44699: LD_INT 0
44701: ST_TO_ADDR
// uc_nation = 0 ;
44702: LD_ADDR_OWVAR 21
44706: PUSH
44707: LD_INT 0
44709: ST_TO_ADDR
// InitHc ;
44710: NOP4
// InitVc ;
44714: NOP4
// if mastodonts then
44718: NOP4
44722: IFFALSE 44789
// for i = 1 to mastodonts do
44724: NOP4
44728: PUSH
44729: DOUBLE
44730: LD_INT 1
44732: DEC
44733: ST_TO_ADDR
44734: NOP4
44738: PUSH
44739: FOR_TO
44740: IFFALSE 44787
// begin vc_chassis := 31 ;
44742: LD_ADDR_OWVAR 37
44746: PUSH
44747: LD_INT 31
44749: ST_TO_ADDR
// vc_control := control_rider ;
44750: LD_ADDR_OWVAR 38
44754: PUSH
44755: LD_INT 4
44757: ST_TO_ADDR
// animal := CreateVehicle ;
44758: NOP4
44762: PUSH
44763: NOP4
44767: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44768: NOP4
44772: PPUSH
44773: NOP4
44777: PPUSH
44778: LD_INT 0
44780: PPUSH
44781: NOP4
// end ;
44785: GO 44739
44787: POP
44788: POP
// if horses then
44789: NOP4
44793: IFFALSE 44860
// for i = 1 to horses do
44795: NOP4
44799: PUSH
44800: DOUBLE
44801: LD_INT 1
44803: DEC
44804: ST_TO_ADDR
44805: NOP4
44809: PUSH
44810: FOR_TO
44811: IFFALSE 44858
// begin hc_class := 21 ;
44813: LD_ADDR_OWVAR 28
44817: PUSH
44818: LD_INT 21
44820: ST_TO_ADDR
// hc_gallery :=  ;
44821: LD_ADDR_OWVAR 33
44825: PUSH
44826: LD_STRING 
44828: ST_TO_ADDR
// animal := CreateHuman ;
44829: NOP4
44833: PUSH
44834: NOP4
44838: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44839: NOP4
44843: PPUSH
44844: NOP4
44848: PPUSH
44849: LD_INT 0
44851: PPUSH
44852: NOP4
// end ;
44856: GO 44810
44858: POP
44859: POP
// if birds then
44860: NOP4
44864: IFFALSE 44931
// for i = 1 to birds do
44866: NOP4
44870: PUSH
44871: DOUBLE
44872: LD_INT 1
44874: DEC
44875: ST_TO_ADDR
44876: NOP4
44880: PUSH
44881: FOR_TO
44882: IFFALSE 44929
// begin hc_class = 18 ;
44884: LD_ADDR_OWVAR 28
44888: PUSH
44889: LD_INT 18
44891: ST_TO_ADDR
// hc_gallery =  ;
44892: LD_ADDR_OWVAR 33
44896: PUSH
44897: LD_STRING 
44899: ST_TO_ADDR
// animal := CreateHuman ;
44900: NOP4
44904: PUSH
44905: NOP4
44909: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44910: NOP4
44914: PPUSH
44915: NOP4
44919: PPUSH
44920: LD_INT 0
44922: PPUSH
44923: NOP4
// end ;
44927: GO 44881
44929: POP
44930: POP
// if tigers then
44931: NOP4
44935: IFFALSE 45019
// for i = 1 to tigers do
44937: NOP4
44941: PUSH
44942: DOUBLE
44943: LD_INT 1
44945: DEC
44946: ST_TO_ADDR
44947: NOP4
44951: PUSH
44952: FOR_TO
44953: IFFALSE 45017
// begin hc_class = class_tiger ;
44955: LD_ADDR_OWVAR 28
44959: PUSH
44960: LD_INT 14
44962: ST_TO_ADDR
// hc_gallery =  ;
44963: LD_ADDR_OWVAR 33
44967: PUSH
44968: LD_STRING 
44970: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44971: LD_ADDR_OWVAR 35
44975: PUSH
44976: LD_INT 7
44978: NEG
44979: PPUSH
44980: LD_INT 7
44982: PPUSH
44983: NOP4
44987: ST_TO_ADDR
// animal := CreateHuman ;
44988: NOP4
44992: PUSH
44993: NOP4
44997: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44998: NOP4
45002: PPUSH
45003: NOP4
45007: PPUSH
45008: LD_INT 0
45010: PPUSH
45011: NOP4
// end ;
45015: GO 44952
45017: POP
45018: POP
// if apemans then
45019: NOP4
45023: IFFALSE 45146
// for i = 1 to apemans do
45025: NOP4
45029: PUSH
45030: DOUBLE
45031: LD_INT 1
45033: DEC
45034: ST_TO_ADDR
45035: NOP4
45039: PUSH
45040: FOR_TO
45041: IFFALSE 45144
// begin hc_class = class_apeman ;
45043: LD_ADDR_OWVAR 28
45047: PUSH
45048: LD_INT 12
45050: ST_TO_ADDR
// hc_gallery =  ;
45051: LD_ADDR_OWVAR 33
45055: PUSH
45056: LD_STRING 
45058: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
45059: LD_ADDR_OWVAR 35
45063: PUSH
45064: LD_INT 5
45066: NEG
45067: PPUSH
45068: LD_INT 5
45070: PPUSH
45071: NOP4
45075: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45076: LD_ADDR_OWVAR 31
45080: PUSH
45081: LD_INT 1
45083: PPUSH
45084: LD_INT 3
45086: PPUSH
45087: NOP4
45091: PUSH
45092: LD_INT 1
45094: PPUSH
45095: LD_INT 3
45097: PPUSH
45098: NOP4
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: ST_TO_ADDR
// animal := CreateHuman ;
45115: NOP4
45119: PUSH
45120: NOP4
45124: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45125: NOP4
45129: PPUSH
45130: NOP4
45134: PPUSH
45135: LD_INT 0
45137: PPUSH
45138: NOP4
// end ;
45142: GO 45040
45144: POP
45145: POP
// if enchidnas then
45146: NOP4
45150: IFFALSE 45217
// for i = 1 to enchidnas do
45152: NOP4
45156: PUSH
45157: DOUBLE
45158: LD_INT 1
45160: DEC
45161: ST_TO_ADDR
45162: NOP4
45166: PUSH
45167: FOR_TO
45168: IFFALSE 45215
// begin hc_class = 13 ;
45170: LD_ADDR_OWVAR 28
45174: PUSH
45175: LD_INT 13
45177: ST_TO_ADDR
// hc_gallery =  ;
45178: LD_ADDR_OWVAR 33
45182: PUSH
45183: LD_STRING 
45185: ST_TO_ADDR
// animal := CreateHuman ;
45186: NOP4
45190: PUSH
45191: NOP4
45195: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45196: NOP4
45200: PPUSH
45201: NOP4
45205: PPUSH
45206: LD_INT 0
45208: PPUSH
45209: NOP4
// end ;
45213: GO 45167
45215: POP
45216: POP
// if fishes then
45217: NOP4
45221: IFFALSE 45288
// for i = 1 to fishes do
45223: NOP4
45227: PUSH
45228: DOUBLE
45229: LD_INT 1
45231: DEC
45232: ST_TO_ADDR
45233: NOP4
45237: PUSH
45238: FOR_TO
45239: IFFALSE 45286
// begin hc_class = 20 ;
45241: LD_ADDR_OWVAR 28
45245: PUSH
45246: LD_INT 20
45248: ST_TO_ADDR
// hc_gallery =  ;
45249: LD_ADDR_OWVAR 33
45253: PUSH
45254: LD_STRING 
45256: ST_TO_ADDR
// animal := CreateHuman ;
45257: NOP4
45261: PUSH
45262: NOP4
45266: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45267: NOP4
45271: PPUSH
45272: NOP4
45276: PPUSH
45277: LD_INT 0
45279: PPUSH
45280: NOP4
// end ;
45284: GO 45238
45286: POP
45287: POP
// end ;
45288: LD_VAR 0 10
45292: RET
// export function WantHeal ( sci , unit ) ; begin
45293: LD_INT 0
45295: PPUSH
// if GetTaskList ( sci ) > 0 then
45296: NOP4
45300: PPUSH
45301: NOP4
45305: PUSH
45306: LD_INT 0
45308: GREATER
45309: IFFALSE 45379
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45311: NOP4
45315: PPUSH
45316: NOP4
45320: PUSH
45321: LD_INT 1
45323: ARRAY
45324: PUSH
45325: LD_INT 1
45327: ARRAY
45328: PUSH
45329: LD_STRING l
45331: EQUAL
45332: PUSH
45333: NOP4
45337: PPUSH
45338: NOP4
45342: PUSH
45343: LD_INT 1
45345: ARRAY
45346: PUSH
45347: LD_INT 4
45349: ARRAY
45350: PUSH
45351: NOP4
45355: EQUAL
45356: AND
45357: IFFALSE 45369
// result := true else
45359: NOP4
45363: PUSH
45364: LD_INT 1
45366: ST_TO_ADDR
45367: GO 45377
// result := false ;
45369: NOP4
45373: PUSH
45374: LD_INT 0
45376: ST_TO_ADDR
// end else
45377: GO 45387
// result := false ;
45379: NOP4
45383: PUSH
45384: LD_INT 0
45386: ST_TO_ADDR
// end ;
45387: LD_VAR 0 3
45391: RET
// export function HealTarget ( sci ) ; begin
45392: LD_INT 0
45394: PPUSH
// if not sci then
45395: NOP4
45399: NOT
45400: IFFALSE 45404
// exit ;
45402: GO 45469
// result := 0 ;
45404: NOP4
45408: PUSH
45409: LD_INT 0
45411: ST_TO_ADDR
// if GetTaskList ( sci ) then
45412: NOP4
45416: PPUSH
45417: NOP4
45421: IFFALSE 45469
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45423: NOP4
45427: PPUSH
45428: NOP4
45432: PUSH
45433: LD_INT 1
45435: ARRAY
45436: PUSH
45437: LD_INT 1
45439: ARRAY
45440: PUSH
45441: LD_STRING l
45443: EQUAL
45444: IFFALSE 45469
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45446: NOP4
45450: PUSH
45451: NOP4
45455: PPUSH
45456: NOP4
45460: PUSH
45461: LD_INT 1
45463: ARRAY
45464: PUSH
45465: LD_INT 4
45467: ARRAY
45468: ST_TO_ADDR
// end ;
45469: LD_VAR 0 2
45473: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
45474: LD_INT 0
45476: PPUSH
45477: PPUSH
45478: PPUSH
45479: PPUSH
45480: PPUSH
45481: PPUSH
45482: PPUSH
45483: PPUSH
45484: PPUSH
45485: PPUSH
45486: PPUSH
45487: PPUSH
45488: PPUSH
45489: PPUSH
45490: PPUSH
45491: PPUSH
45492: PPUSH
45493: PPUSH
45494: PPUSH
45495: PPUSH
45496: PPUSH
45497: PPUSH
45498: PPUSH
45499: PPUSH
45500: PPUSH
45501: PPUSH
45502: PPUSH
45503: PPUSH
45504: PPUSH
45505: PPUSH
45506: PPUSH
45507: PPUSH
45508: PPUSH
45509: PPUSH
// if not list then
45510: NOP4
45514: NOT
45515: IFFALSE 45519
// exit ;
45517: GO 50145
// base := list [ 1 ] ;
45519: NOP4
45523: PUSH
45524: NOP4
45528: PUSH
45529: LD_INT 1
45531: ARRAY
45532: ST_TO_ADDR
// group := list [ 2 ] ;
45533: NOP4
45537: PUSH
45538: NOP4
45542: PUSH
45543: LD_INT 2
45545: ARRAY
45546: ST_TO_ADDR
// path := list [ 3 ] ;
45547: NOP4
45551: PUSH
45552: NOP4
45556: PUSH
45557: LD_INT 3
45559: ARRAY
45560: ST_TO_ADDR
// flags := list [ 4 ] ;
45561: NOP4
45565: PUSH
45566: NOP4
45570: PUSH
45571: LD_INT 4
45573: ARRAY
45574: ST_TO_ADDR
// mined := [ ] ;
45575: NOP4
45579: PUSH
45580: EMPTY
45581: ST_TO_ADDR
// bombed := [ ] ;
45582: NOP4
45586: PUSH
45587: EMPTY
45588: ST_TO_ADDR
// healers := [ ] ;
45589: NOP4
45593: PUSH
45594: EMPTY
45595: ST_TO_ADDR
// to_heal := [ ] ;
45596: NOP4
45600: PUSH
45601: EMPTY
45602: ST_TO_ADDR
// repairs := [ ] ;
45603: NOP4
45607: PUSH
45608: EMPTY
45609: ST_TO_ADDR
// to_repair := [ ] ;
45610: NOP4
45614: PUSH
45615: EMPTY
45616: ST_TO_ADDR
// if not group or not path then
45617: NOP4
45621: NOT
45622: PUSH
45623: NOP4
45627: NOT
45628: OR
45629: IFFALSE 45633
// exit ;
45631: GO 50145
// side := GetSide ( group [ 1 ] ) ;
45633: NOP4
45637: PUSH
45638: NOP4
45642: PUSH
45643: LD_INT 1
45645: ARRAY
45646: PPUSH
45647: NOP4
45651: ST_TO_ADDR
// if flags then
45652: NOP4
45656: IFFALSE 45800
// begin f_ignore_area := flags [ 1 ] ;
45658: NOP4
45662: PUSH
45663: NOP4
45667: PUSH
45668: LD_INT 1
45670: ARRAY
45671: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
45672: NOP4
45676: PUSH
45677: NOP4
45681: PUSH
45682: LD_INT 2
45684: ARRAY
45685: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
45686: NOP4
45690: PUSH
45691: NOP4
45695: PUSH
45696: LD_INT 3
45698: ARRAY
45699: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
45700: NOP4
45704: PUSH
45705: NOP4
45709: PUSH
45710: LD_INT 4
45712: ARRAY
45713: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
45714: NOP4
45718: PUSH
45719: NOP4
45723: PUSH
45724: LD_INT 5
45726: ARRAY
45727: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
45728: NOP4
45732: PUSH
45733: NOP4
45737: PUSH
45738: LD_INT 6
45740: ARRAY
45741: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
45742: NOP4
45746: PUSH
45747: NOP4
45751: PUSH
45752: LD_INT 7
45754: ARRAY
45755: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
45756: NOP4
45760: PUSH
45761: NOP4
45765: PUSH
45766: LD_INT 8
45768: ARRAY
45769: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
45770: NOP4
45774: PUSH
45775: NOP4
45779: PUSH
45780: LD_INT 9
45782: ARRAY
45783: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
45784: NOP4
45788: PUSH
45789: NOP4
45793: PUSH
45794: LD_INT 10
45796: ARRAY
45797: ST_TO_ADDR
// end else
45798: GO 45880
// begin f_ignore_area := false ;
45800: NOP4
45804: PUSH
45805: LD_INT 0
45807: ST_TO_ADDR
// f_capture := false ;
45808: NOP4
45812: PUSH
45813: LD_INT 0
45815: ST_TO_ADDR
// f_ignore_civ := false ;
45816: NOP4
45820: PUSH
45821: LD_INT 0
45823: ST_TO_ADDR
// f_murder := false ;
45824: NOP4
45828: PUSH
45829: LD_INT 0
45831: ST_TO_ADDR
// f_mines := false ;
45832: NOP4
45836: PUSH
45837: LD_INT 0
45839: ST_TO_ADDR
// f_repair := false ;
45840: NOP4
45844: PUSH
45845: LD_INT 0
45847: ST_TO_ADDR
// f_heal := false ;
45848: NOP4
45852: PUSH
45853: LD_INT 0
45855: ST_TO_ADDR
// f_spacetime := false ;
45856: NOP4
45860: PUSH
45861: LD_INT 0
45863: ST_TO_ADDR
// f_attack_depot := false ;
45864: NOP4
45868: PUSH
45869: LD_INT 0
45871: ST_TO_ADDR
// f_crawl := false ;
45872: NOP4
45876: PUSH
45877: LD_INT 0
45879: ST_TO_ADDR
// end ; if f_heal then
45880: NOP4
45884: IFFALSE 45911
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
45886: NOP4
45890: PUSH
45891: NOP4
45895: PPUSH
45896: LD_INT 25
45898: PUSH
45899: LD_INT 4
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PPUSH
45906: NOP4
45910: ST_TO_ADDR
// if f_repair then
45911: NOP4
45915: IFFALSE 45942
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
45917: NOP4
45921: PUSH
45922: NOP4
45926: PPUSH
45927: LD_INT 25
45929: PUSH
45930: LD_INT 3
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PPUSH
45937: NOP4
45941: ST_TO_ADDR
// units_path := [ ] ;
45942: NOP4
45946: PUSH
45947: EMPTY
45948: ST_TO_ADDR
// for i = 1 to group do
45949: NOP4
45953: PUSH
45954: DOUBLE
45955: LD_INT 1
45957: DEC
45958: ST_TO_ADDR
45959: NOP4
45963: PUSH
45964: FOR_TO
45965: IFFALSE 45994
// units_path := Replace ( units_path , i , path ) ;
45967: NOP4
45971: PUSH
45972: NOP4
45976: PPUSH
45977: NOP4
45981: PPUSH
45982: NOP4
45986: PPUSH
45987: NOP4
45991: ST_TO_ADDR
45992: GO 45964
45994: POP
45995: POP
// repeat for i = group downto 1 do
45996: NOP4
46000: PUSH
46001: DOUBLE
46002: NOP4
46006: INC
46007: ST_TO_ADDR
46008: LD_INT 1
46010: PUSH
46011: FOR_DOWNTO
46012: IFFALSE 50108
// begin wait ( 5 ) ;
46014: LD_INT 5
46016: PPUSH
46017: NOP4
// tmp := [ ] ;
46021: NOP4
46025: PUSH
46026: EMPTY
46027: ST_TO_ADDR
// attacking := false ;
46028: NOP4
46032: PUSH
46033: LD_INT 0
46035: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
46036: NOP4
46040: PUSH
46041: NOP4
46045: ARRAY
46046: PPUSH
46047: NOP4
46051: PUSH
46052: NOP4
46056: PUSH
46057: NOP4
46061: ARRAY
46062: NOT
46063: OR
46064: IFFALSE 46173
// begin if GetType ( group [ i ] ) = unit_human then
46066: NOP4
46070: PUSH
46071: NOP4
46075: ARRAY
46076: PPUSH
46077: NOP4
46081: PUSH
46082: LD_INT 1
46084: EQUAL
46085: IFFALSE 46131
// begin to_heal := to_heal diff group [ i ] ;
46087: NOP4
46091: PUSH
46092: NOP4
46096: PUSH
46097: NOP4
46101: PUSH
46102: NOP4
46106: ARRAY
46107: DIFF
46108: ST_TO_ADDR
// healers := healers diff group [ i ] ;
46109: NOP4
46113: PUSH
46114: NOP4
46118: PUSH
46119: NOP4
46123: PUSH
46124: NOP4
46128: ARRAY
46129: DIFF
46130: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
46131: NOP4
46135: PUSH
46136: NOP4
46140: PPUSH
46141: NOP4
46145: PPUSH
46146: NOP4
46150: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
46151: NOP4
46155: PUSH
46156: NOP4
46160: PPUSH
46161: NOP4
46165: PPUSH
46166: NOP4
46170: ST_TO_ADDR
// continue ;
46171: GO 46011
// end ; if f_repair then
46173: NOP4
46177: IFFALSE 46666
// begin if GetType ( group [ i ] ) = unit_vehicle then
46179: NOP4
46183: PUSH
46184: NOP4
46188: ARRAY
46189: PPUSH
46190: NOP4
46194: PUSH
46195: LD_INT 2
46197: EQUAL
46198: IFFALSE 46388
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
46200: NOP4
46204: PUSH
46205: NOP4
46209: ARRAY
46210: PPUSH
46211: NOP4
46215: PUSH
46216: LD_INT 700
46218: LESS
46219: PUSH
46220: NOP4
46224: PUSH
46225: NOP4
46229: ARRAY
46230: PUSH
46231: NOP4
46235: IN
46236: NOT
46237: AND
46238: IFFALSE 46262
// to_repair := to_repair union group [ i ] ;
46240: NOP4
46244: PUSH
46245: NOP4
46249: PUSH
46250: NOP4
46254: PUSH
46255: NOP4
46259: ARRAY
46260: UNION
46261: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
46262: NOP4
46266: PUSH
46267: NOP4
46271: ARRAY
46272: PPUSH
46273: NOP4
46277: PUSH
46278: LD_INT 1000
46280: EQUAL
46281: PUSH
46282: NOP4
46286: PUSH
46287: NOP4
46291: ARRAY
46292: PUSH
46293: NOP4
46297: IN
46298: AND
46299: IFFALSE 46323
// to_repair := to_repair diff group [ i ] ;
46301: NOP4
46305: PUSH
46306: NOP4
46310: PUSH
46311: NOP4
46315: PUSH
46316: NOP4
46320: ARRAY
46321: DIFF
46322: ST_TO_ADDR
// if group [ i ] in to_repair then
46323: NOP4
46327: PUSH
46328: NOP4
46332: ARRAY
46333: PUSH
46334: NOP4
46338: IN
46339: IFFALSE 46386
// begin if not IsInArea ( group [ i ] , f_repair ) then
46341: NOP4
46345: PUSH
46346: NOP4
46350: ARRAY
46351: PPUSH
46352: NOP4
46356: PPUSH
46357: NOP4
46361: NOT
46362: IFFALSE 46384
// ComMoveToArea ( group [ i ] , f_repair ) ;
46364: NOP4
46368: PUSH
46369: NOP4
46373: ARRAY
46374: PPUSH
46375: NOP4
46379: PPUSH
46380: NOP4
// continue ;
46384: GO 46011
// end ; end else
46386: GO 46666
// if group [ i ] in repairs then
46388: NOP4
46392: PUSH
46393: NOP4
46397: ARRAY
46398: PUSH
46399: NOP4
46403: IN
46404: IFFALSE 46666
// begin if IsInUnit ( group [ i ] ) then
46406: NOP4
46410: PUSH
46411: NOP4
46415: ARRAY
46416: PPUSH
46417: NOP4
46421: IFFALSE 46489
// begin z := IsInUnit ( group [ i ] ) ;
46423: NOP4
46427: PUSH
46428: NOP4
46432: PUSH
46433: NOP4
46437: ARRAY
46438: PPUSH
46439: NOP4
46443: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
46444: NOP4
46448: PUSH
46449: NOP4
46453: IN
46454: PUSH
46455: NOP4
46459: PPUSH
46460: NOP4
46464: PPUSH
46465: NOP4
46469: AND
46470: IFFALSE 46487
// ComExitVehicle ( group [ i ] ) ;
46472: NOP4
46476: PUSH
46477: NOP4
46481: ARRAY
46482: PPUSH
46483: NOP4
// end else
46487: GO 46666
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
46489: NOP4
46493: PUSH
46494: NOP4
46498: PPUSH
46499: LD_INT 95
46501: PUSH
46502: NOP4
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 58
46513: PUSH
46514: EMPTY
46515: LIST
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PPUSH
46521: NOP4
46525: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
46526: NOP4
46530: PUSH
46531: NOP4
46535: ARRAY
46536: PPUSH
46537: NOP4
46541: NOT
46542: IFFALSE 46664
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
46544: NOP4
46548: PUSH
46549: NOP4
46553: PPUSH
46554: NOP4
46558: PUSH
46559: NOP4
46563: ARRAY
46564: PPUSH
46565: NOP4
46569: ST_TO_ADDR
// if not x then
46570: NOP4
46574: NOT
46575: IFFALSE 46579
// continue ;
46577: GO 46011
// if GetLives ( x ) < 1000 then
46579: NOP4
46583: PPUSH
46584: NOP4
46588: PUSH
46589: LD_INT 1000
46591: LESS
46592: IFFALSE 46616
// ComRepairVehicle ( group [ i ] , x ) else
46594: NOP4
46598: PUSH
46599: NOP4
46603: ARRAY
46604: PPUSH
46605: NOP4
46609: PPUSH
46610: NOP4
46614: GO 46664
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
46616: NOP4
46620: PUSH
46621: NOP4
46625: PUSH
46626: NOP4
46630: ARRAY
46631: PPUSH
46632: NOP4
46636: PUSH
46637: LD_INT 1000
46639: LESS
46640: AND
46641: NOT
46642: IFFALSE 46664
// ComEnterUnit ( group [ i ] , x ) ;
46644: NOP4
46648: PUSH
46649: NOP4
46653: ARRAY
46654: PPUSH
46655: NOP4
46659: PPUSH
46660: NOP4
// end ; continue ;
46664: GO 46011
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
46666: NOP4
46670: PUSH
46671: NOP4
46675: PUSH
46676: NOP4
46680: ARRAY
46681: PPUSH
46682: NOP4
46686: PUSH
46687: LD_INT 1
46689: EQUAL
46690: AND
46691: IFFALSE 47169
// begin if group [ i ] in healers then
46693: NOP4
46697: PUSH
46698: NOP4
46702: ARRAY
46703: PUSH
46704: NOP4
46708: IN
46709: IFFALSE 46982
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
46711: NOP4
46715: PUSH
46716: NOP4
46720: ARRAY
46721: PPUSH
46722: NOP4
46726: PPUSH
46727: NOP4
46731: NOT
46732: PUSH
46733: NOP4
46737: PUSH
46738: NOP4
46742: ARRAY
46743: PPUSH
46744: NOP4
46748: NOT
46749: AND
46750: IFFALSE 46774
// ComMoveToArea ( group [ i ] , f_heal ) else
46752: NOP4
46756: PUSH
46757: NOP4
46761: ARRAY
46762: PPUSH
46763: NOP4
46767: PPUSH
46768: NOP4
46772: GO 46980
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
46774: NOP4
46778: PUSH
46779: NOP4
46783: ARRAY
46784: PPUSH
46785: NOP4
46789: PPUSH
46790: NOP4
46794: PUSH
46795: LD_INT 1000
46797: EQUAL
46798: IFFALSE 46817
// ComStop ( group [ i ] ) else
46800: NOP4
46804: PUSH
46805: NOP4
46809: ARRAY
46810: PPUSH
46811: NOP4
46815: GO 46980
// if not HasTask ( group [ i ] ) and to_heal then
46817: NOP4
46821: PUSH
46822: NOP4
46826: ARRAY
46827: PPUSH
46828: NOP4
46832: NOT
46833: PUSH
46834: NOP4
46838: AND
46839: IFFALSE 46980
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
46841: NOP4
46845: PUSH
46846: NOP4
46850: PPUSH
46851: LD_INT 3
46853: PUSH
46854: LD_INT 54
46856: PUSH
46857: EMPTY
46858: LIST
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PPUSH
46864: NOP4
46868: PPUSH
46869: NOP4
46873: PUSH
46874: NOP4
46878: ARRAY
46879: PPUSH
46880: NOP4
46884: ST_TO_ADDR
// if z then
46885: NOP4
46889: IFFALSE 46980
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
46891: LD_INT 91
46893: PUSH
46894: NOP4
46898: PUSH
46899: LD_INT 10
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 81
46909: PUSH
46910: NOP4
46914: PPUSH
46915: NOP4
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PPUSH
46928: NOP4
46932: PUSH
46933: LD_INT 0
46935: EQUAL
46936: IFFALSE 46960
// ComHeal ( group [ i ] , z ) else
46938: NOP4
46942: PUSH
46943: NOP4
46947: ARRAY
46948: PPUSH
46949: NOP4
46953: PPUSH
46954: NOP4
46958: GO 46980
// ComMoveToArea ( group [ i ] , f_heal ) ;
46960: NOP4
46964: PUSH
46965: NOP4
46969: ARRAY
46970: PPUSH
46971: NOP4
46975: PPUSH
46976: NOP4
// end ; continue ;
46980: GO 46011
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
46982: NOP4
46986: PUSH
46987: NOP4
46991: ARRAY
46992: PPUSH
46993: NOP4
46997: PUSH
46998: LD_INT 700
47000: LESS
47001: PUSH
47002: NOP4
47006: PUSH
47007: NOP4
47011: ARRAY
47012: PUSH
47013: NOP4
47017: IN
47018: NOT
47019: AND
47020: IFFALSE 47044
// to_heal := to_heal union group [ i ] ;
47022: NOP4
47026: PUSH
47027: NOP4
47031: PUSH
47032: NOP4
47036: PUSH
47037: NOP4
47041: ARRAY
47042: UNION
47043: ST_TO_ADDR
// if group [ i ] in to_heal then
47044: NOP4
47048: PUSH
47049: NOP4
47053: ARRAY
47054: PUSH
47055: NOP4
47059: IN
47060: IFFALSE 47169
// begin if GetLives ( group [ i ] ) = 1000 then
47062: NOP4
47066: PUSH
47067: NOP4
47071: ARRAY
47072: PPUSH
47073: NOP4
47077: PUSH
47078: LD_INT 1000
47080: EQUAL
47081: IFFALSE 47107
// to_heal := to_heal diff group [ i ] else
47083: NOP4
47087: PUSH
47088: NOP4
47092: PUSH
47093: NOP4
47097: PUSH
47098: NOP4
47102: ARRAY
47103: DIFF
47104: ST_TO_ADDR
47105: GO 47169
// begin if not IsInArea ( group [ i ] , to_heal ) then
47107: NOP4
47111: PUSH
47112: NOP4
47116: ARRAY
47117: PPUSH
47118: NOP4
47122: PPUSH
47123: NOP4
47127: NOT
47128: IFFALSE 47152
// ComMoveToArea ( group [ i ] , f_heal ) else
47130: NOP4
47134: PUSH
47135: NOP4
47139: ARRAY
47140: PPUSH
47141: NOP4
47145: PPUSH
47146: NOP4
47150: GO 47167
// ComHold ( group [ i ] ) ;
47152: NOP4
47156: PUSH
47157: NOP4
47161: ARRAY
47162: PPUSH
47163: NOP4
// continue ;
47167: GO 46011
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
47169: NOP4
47173: PUSH
47174: NOP4
47178: ARRAY
47179: PPUSH
47180: LD_INT 10
47182: PPUSH
47183: NOP4
47187: NOT
47188: PUSH
47189: NOP4
47193: PUSH
47194: NOP4
47198: ARRAY
47199: PUSH
47200: EMPTY
47201: EQUAL
47202: NOT
47203: AND
47204: IFFALSE 47470
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
47206: NOP4
47210: PUSH
47211: NOP4
47215: ARRAY
47216: PPUSH
47217: NOP4
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: IN
47232: IFFALSE 47273
// if GetFuel ( group [ i ] ) < 10 then
47234: NOP4
47238: PUSH
47239: NOP4
47243: ARRAY
47244: PPUSH
47245: NOP4
47249: PUSH
47250: LD_INT 10
47252: LESS
47253: IFFALSE 47273
// SetFuel ( group [ i ] , 12 ) ;
47255: NOP4
47259: PUSH
47260: NOP4
47264: ARRAY
47265: PPUSH
47266: LD_INT 12
47268: PPUSH
47269: NOP4
// if units_path [ i ] then
47273: NOP4
47277: PUSH
47278: NOP4
47282: ARRAY
47283: IFFALSE 47468
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
47285: NOP4
47289: PUSH
47290: NOP4
47294: ARRAY
47295: PPUSH
47296: NOP4
47300: PUSH
47301: NOP4
47305: ARRAY
47306: PUSH
47307: LD_INT 1
47309: ARRAY
47310: PUSH
47311: LD_INT 1
47313: ARRAY
47314: PPUSH
47315: NOP4
47319: PUSH
47320: NOP4
47324: ARRAY
47325: PUSH
47326: LD_INT 1
47328: ARRAY
47329: PUSH
47330: LD_INT 2
47332: ARRAY
47333: PPUSH
47334: NOP4
47338: PUSH
47339: LD_INT 6
47341: GREATER
47342: IFFALSE 47417
// begin if not HasTask ( group [ i ] ) then
47344: NOP4
47348: PUSH
47349: NOP4
47353: ARRAY
47354: PPUSH
47355: NOP4
47359: NOT
47360: IFFALSE 47415
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
47362: NOP4
47366: PUSH
47367: NOP4
47371: ARRAY
47372: PPUSH
47373: NOP4
47377: PUSH
47378: NOP4
47382: ARRAY
47383: PUSH
47384: LD_INT 1
47386: ARRAY
47387: PUSH
47388: LD_INT 1
47390: ARRAY
47391: PPUSH
47392: NOP4
47396: PUSH
47397: NOP4
47401: ARRAY
47402: PUSH
47403: LD_INT 1
47405: ARRAY
47406: PUSH
47407: LD_INT 2
47409: ARRAY
47410: PPUSH
47411: NOP4
// end else
47415: GO 47468
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
47417: NOP4
47421: PUSH
47422: NOP4
47426: PUSH
47427: NOP4
47431: ARRAY
47432: PPUSH
47433: LD_INT 1
47435: PPUSH
47436: NOP4
47440: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
47441: NOP4
47445: PUSH
47446: NOP4
47450: PPUSH
47451: NOP4
47455: PPUSH
47456: NOP4
47460: PPUSH
47461: NOP4
47465: ST_TO_ADDR
// continue ;
47466: GO 46011
// end ; end ; end else
47468: GO 50106
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
47470: NOP4
47474: PUSH
47475: LD_INT 81
47477: PUSH
47478: NOP4
47482: PUSH
47483: NOP4
47487: ARRAY
47488: PPUSH
47489: NOP4
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PPUSH
47498: NOP4
47502: ST_TO_ADDR
// if not tmp then
47503: NOP4
47507: NOT
47508: IFFALSE 47512
// continue ;
47510: GO 46011
// if f_ignore_area then
47512: NOP4
47516: IFFALSE 47604
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
47518: NOP4
47522: PUSH
47523: NOP4
47527: PPUSH
47528: LD_INT 3
47530: PUSH
47531: LD_INT 92
47533: PUSH
47534: NOP4
47538: PUSH
47539: LD_INT 1
47541: ARRAY
47542: PUSH
47543: NOP4
47547: PUSH
47548: LD_INT 2
47550: ARRAY
47551: PUSH
47552: NOP4
47556: PUSH
47557: LD_INT 3
47559: ARRAY
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PPUSH
47571: NOP4
47575: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
47576: NOP4
47580: PUSH
47581: NOP4
47585: DIFF
47586: IFFALSE 47604
// tmp := tmp diff tmp2 ;
47588: NOP4
47592: PUSH
47593: NOP4
47597: PUSH
47598: NOP4
47602: DIFF
47603: ST_TO_ADDR
// end ; if not f_murder then
47604: NOP4
47608: NOT
47609: IFFALSE 47667
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
47611: NOP4
47615: PUSH
47616: NOP4
47620: PPUSH
47621: LD_INT 3
47623: PUSH
47624: LD_INT 50
47626: PUSH
47627: EMPTY
47628: LIST
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PPUSH
47634: NOP4
47638: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
47639: NOP4
47643: PUSH
47644: NOP4
47648: DIFF
47649: IFFALSE 47667
// tmp := tmp diff tmp2 ;
47651: NOP4
47655: PUSH
47656: NOP4
47660: PUSH
47661: NOP4
47665: DIFF
47666: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
47667: NOP4
47671: PUSH
47672: NOP4
47676: PUSH
47677: NOP4
47681: ARRAY
47682: PPUSH
47683: NOP4
47687: PPUSH
47688: LD_INT 1
47690: PPUSH
47691: LD_INT 1
47693: PPUSH
47694: NOP4
47698: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
47699: NOP4
47703: PUSH
47704: NOP4
47708: ARRAY
47709: PPUSH
47710: NOP4
47714: PUSH
47715: LD_INT 1
47717: EQUAL
47718: IFFALSE 48166
// begin if WantPlant ( group [ i ] ) then
47720: NOP4
47724: PUSH
47725: NOP4
47729: ARRAY
47730: PPUSH
47731: NOP4
47735: IFFALSE 47739
// continue ;
47737: GO 46011
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
47739: NOP4
47743: PUSH
47744: NOP4
47748: PUSH
47749: NOP4
47753: ARRAY
47754: PPUSH
47755: NOP4
47759: NOT
47760: AND
47761: PUSH
47762: NOP4
47766: PUSH
47767: LD_INT 1
47769: ARRAY
47770: PUSH
47771: NOP4
47775: PPUSH
47776: LD_INT 21
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 58
47788: PUSH
47789: EMPTY
47790: LIST
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PPUSH
47796: NOP4
47800: IN
47801: AND
47802: IFFALSE 47838
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
47804: NOP4
47808: PUSH
47809: NOP4
47813: ARRAY
47814: PPUSH
47815: NOP4
47819: PUSH
47820: LD_INT 1
47822: ARRAY
47823: PPUSH
47824: NOP4
// attacking := true ;
47828: NOP4
47832: PUSH
47833: LD_INT 1
47835: ST_TO_ADDR
// continue ;
47836: GO 46011
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
47838: NOP4
47842: PUSH
47843: NOP4
47847: PUSH
47848: NOP4
47852: ARRAY
47853: PPUSH
47854: NOP4
47858: PUSH
47859: LD_INT 1
47861: EQUAL
47862: AND
47863: PUSH
47864: NOP4
47868: PUSH
47869: NOP4
47873: ARRAY
47874: PPUSH
47875: NOP4
47879: PUSH
47880: LD_INT 800
47882: LESS
47883: AND
47884: PUSH
47885: NOP4
47889: PUSH
47890: NOP4
47894: ARRAY
47895: PPUSH
47896: NOP4
47900: NOT
47901: AND
47902: IFFALSE 47919
// ComCrawl ( group [ i ] ) ;
47904: NOP4
47908: PUSH
47909: NOP4
47913: ARRAY
47914: PPUSH
47915: NOP4
// if f_mines then
47919: NOP4
47923: IFFALSE 48166
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
47925: NOP4
47929: PUSH
47930: LD_INT 1
47932: ARRAY
47933: PPUSH
47934: NOP4
47938: PUSH
47939: LD_INT 3
47941: EQUAL
47942: PUSH
47943: NOP4
47947: PUSH
47948: LD_INT 1
47950: ARRAY
47951: PUSH
47952: NOP4
47956: IN
47957: NOT
47958: AND
47959: IFFALSE 48166
// begin x := GetX ( tmp [ 1 ] ) ;
47961: NOP4
47965: PUSH
47966: NOP4
47970: PUSH
47971: LD_INT 1
47973: ARRAY
47974: PPUSH
47975: NOP4
47979: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
47980: NOP4
47984: PUSH
47985: NOP4
47989: PUSH
47990: LD_INT 1
47992: ARRAY
47993: PPUSH
47994: NOP4
47998: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
47999: NOP4
48003: PUSH
48004: NOP4
48008: PUSH
48009: NOP4
48013: ARRAY
48014: PPUSH
48015: NOP4
48019: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
48020: NOP4
48024: PUSH
48025: NOP4
48029: ARRAY
48030: PPUSH
48031: NOP4
48035: PPUSH
48036: NOP4
48040: PPUSH
48041: NOP4
48045: PUSH
48046: LD_INT 1
48048: ARRAY
48049: PPUSH
48050: NOP4
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
48054: NOP4
48058: PUSH
48059: NOP4
48063: ARRAY
48064: PPUSH
48065: NOP4
48069: PPUSH
48070: NOP4
48074: PPUSH
48075: LD_INT 7
48077: PPUSH
48078: NOP4
48082: PPUSH
48083: NOP4
48087: PPUSH
48088: NOP4
48092: PPUSH
48093: LD_INT 7
48095: PPUSH
48096: NOP4
48100: PPUSH
48101: NOP4
// SetTag ( group [ i ] , 71 ) ;
48105: NOP4
48109: PUSH
48110: NOP4
48114: ARRAY
48115: PPUSH
48116: LD_INT 71
48118: PPUSH
48119: NOP4
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
48123: NOP4
48127: PUSH
48128: NOP4
48132: PPUSH
48133: NOP4
48137: PUSH
48138: LD_INT 1
48140: PLUS
48141: PPUSH
48142: NOP4
48146: PUSH
48147: LD_INT 1
48149: ARRAY
48150: PPUSH
48151: NOP4
48155: ST_TO_ADDR
// attacking := true ;
48156: NOP4
48160: PUSH
48161: LD_INT 1
48163: ST_TO_ADDR
// continue ;
48164: GO 46011
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
48166: NOP4
48170: PUSH
48171: NOP4
48175: ARRAY
48176: PPUSH
48177: NOP4
48181: PUSH
48182: LD_INT 17
48184: EQUAL
48185: PUSH
48186: NOP4
48190: PUSH
48191: NOP4
48195: ARRAY
48196: PPUSH
48197: NOP4
48201: PUSH
48202: LD_INT 71
48204: EQUAL
48205: NOT
48206: AND
48207: IFFALSE 48353
// begin attacking := false ;
48209: NOP4
48213: PUSH
48214: LD_INT 0
48216: ST_TO_ADDR
// k := 5 ;
48217: NOP4
48221: PUSH
48222: LD_INT 5
48224: ST_TO_ADDR
// if tmp < k then
48225: NOP4
48229: PUSH
48230: NOP4
48234: LESS
48235: IFFALSE 48247
// k := tmp ;
48237: NOP4
48241: PUSH
48242: NOP4
48246: ST_TO_ADDR
// for j = 1 to k do
48247: NOP4
48251: PUSH
48252: DOUBLE
48253: LD_INT 1
48255: DEC
48256: ST_TO_ADDR
48257: NOP4
48261: PUSH
48262: FOR_TO
48263: IFFALSE 48351
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
48265: NOP4
48269: PUSH
48270: NOP4
48274: ARRAY
48275: PUSH
48276: NOP4
48280: PPUSH
48281: LD_INT 58
48283: PUSH
48284: EMPTY
48285: LIST
48286: PPUSH
48287: NOP4
48291: IN
48292: NOT
48293: IFFALSE 48349
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
48295: NOP4
48299: PUSH
48300: NOP4
48304: ARRAY
48305: PPUSH
48306: NOP4
48310: PUSH
48311: NOP4
48315: ARRAY
48316: PPUSH
48317: NOP4
// attacking := true ;
48321: NOP4
48325: PUSH
48326: LD_INT 1
48328: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
48329: NOP4
48333: PUSH
48334: NOP4
48338: ARRAY
48339: PPUSH
48340: LD_INT 71
48342: PPUSH
48343: NOP4
// continue ;
48347: GO 48262
// end ; end ;
48349: GO 48262
48351: POP
48352: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
48353: NOP4
48357: PUSH
48358: NOP4
48362: ARRAY
48363: PPUSH
48364: NOP4
48368: PUSH
48369: LD_INT 8
48371: EQUAL
48372: PUSH
48373: NOP4
48377: PUSH
48378: NOP4
48382: ARRAY
48383: PPUSH
48384: NOP4
48388: PUSH
48389: LD_INT 28
48391: PUSH
48392: LD_INT 45
48394: PUSH
48395: LD_INT 7
48397: PUSH
48398: LD_INT 47
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: IN
48407: OR
48408: IFFALSE 48638
// begin attacking := false ;
48410: NOP4
48414: PUSH
48415: LD_INT 0
48417: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
48418: NOP4
48422: PUSH
48423: LD_INT 1
48425: ARRAY
48426: PPUSH
48427: NOP4
48431: PUSH
48432: LD_INT 32
48434: PUSH
48435: LD_INT 31
48437: PUSH
48438: LD_INT 33
48440: PUSH
48441: LD_INT 4
48443: PUSH
48444: LD_INT 5
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: IN
48454: IFFALSE 48638
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
48456: NOP4
48460: PUSH
48461: NOP4
48465: PUSH
48466: LD_INT 1
48468: ARRAY
48469: PPUSH
48470: NOP4
48474: PPUSH
48475: NOP4
48479: PUSH
48480: LD_INT 1
48482: ARRAY
48483: PPUSH
48484: NOP4
48488: PPUSH
48489: NOP4
48493: PUSH
48494: LD_INT 1
48496: ARRAY
48497: PPUSH
48498: NOP4
48502: PPUSH
48503: NOP4
48507: PUSH
48508: LD_INT 1
48510: ARRAY
48511: PPUSH
48512: NOP4
48516: PPUSH
48517: NOP4
48521: PUSH
48522: LD_INT 1
48524: ARRAY
48525: PPUSH
48526: NOP4
48530: PPUSH
48531: LD_INT 0
48533: PPUSH
48534: NOP4
48538: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
48539: NOP4
48543: PUSH
48544: NOP4
48548: PUSH
48549: NOP4
48553: ARRAY
48554: PPUSH
48555: NOP4
48559: PPUSH
48560: NOP4
48564: ST_TO_ADDR
// if j then
48565: NOP4
48569: IFFALSE 48638
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48571: NOP4
48575: PUSH
48576: LD_INT 1
48578: ARRAY
48579: PPUSH
48580: NOP4
48584: PUSH
48585: LD_INT 2
48587: ARRAY
48588: PPUSH
48589: NOP4
48593: IFFALSE 48638
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
48595: NOP4
48599: PUSH
48600: NOP4
48604: ARRAY
48605: PPUSH
48606: NOP4
48610: PUSH
48611: LD_INT 1
48613: ARRAY
48614: PPUSH
48615: NOP4
48619: PUSH
48620: LD_INT 2
48622: ARRAY
48623: PPUSH
48624: NOP4
// attacking := true ;
48628: NOP4
48632: PUSH
48633: LD_INT 1
48635: ST_TO_ADDR
// continue ;
48636: GO 46011
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
48638: NOP4
48642: PUSH
48643: NOP4
48647: ARRAY
48648: PPUSH
48649: NOP4
48653: PUSH
48654: LD_INT 11
48656: EQUAL
48657: IFFALSE 48935
// begin k := 10 ;
48659: NOP4
48663: PUSH
48664: LD_INT 10
48666: ST_TO_ADDR
// x := 0 ;
48667: NOP4
48671: PUSH
48672: LD_INT 0
48674: ST_TO_ADDR
// if tmp < k then
48675: NOP4
48679: PUSH
48680: NOP4
48684: LESS
48685: IFFALSE 48697
// k := tmp ;
48687: NOP4
48691: PUSH
48692: NOP4
48696: ST_TO_ADDR
// for j = k downto 1 do
48697: NOP4
48701: PUSH
48702: DOUBLE
48703: NOP4
48707: INC
48708: ST_TO_ADDR
48709: LD_INT 1
48711: PUSH
48712: FOR_DOWNTO
48713: IFFALSE 48788
// begin if GetType ( tmp [ j ] ) = unit_human then
48715: NOP4
48719: PUSH
48720: NOP4
48724: ARRAY
48725: PPUSH
48726: NOP4
48730: PUSH
48731: LD_INT 1
48733: EQUAL
48734: IFFALSE 48786
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
48736: NOP4
48740: PUSH
48741: NOP4
48745: ARRAY
48746: PPUSH
48747: NOP4
48751: PUSH
48752: NOP4
48756: ARRAY
48757: PPUSH
48758: NOP4
// x := tmp [ j ] ;
48762: NOP4
48766: PUSH
48767: NOP4
48771: PUSH
48772: NOP4
48776: ARRAY
48777: ST_TO_ADDR
// attacking := true ;
48778: NOP4
48782: PUSH
48783: LD_INT 1
48785: ST_TO_ADDR
// end ; end ;
48786: GO 48712
48788: POP
48789: POP
// if not x then
48790: NOP4
48794: NOT
48795: IFFALSE 48935
// begin attacking := true ;
48797: NOP4
48801: PUSH
48802: LD_INT 1
48804: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
48805: NOP4
48809: PUSH
48810: NOP4
48814: ARRAY
48815: PPUSH
48816: NOP4
48820: PPUSH
48821: NOP4
48825: PUSH
48826: NOP4
48830: ARRAY
48831: PPUSH
48832: NOP4
48836: PPUSH
48837: NOP4
48841: PUSH
48842: LD_INT 2
48844: ARRAY
48845: PUSH
48846: NOP4
48850: PUSH
48851: LD_INT 1
48853: ARRAY
48854: PPUSH
48855: NOP4
48859: PPUSH
48860: NOP4
48864: PUSH
48865: LD_INT 1
48867: ARRAY
48868: PPUSH
48869: NOP4
48873: PPUSH
48874: NOP4
48878: PUSH
48879: LD_INT 2
48881: ARRAY
48882: EQUAL
48883: IFFALSE 48911
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
48885: NOP4
48889: PUSH
48890: NOP4
48894: ARRAY
48895: PPUSH
48896: NOP4
48900: PUSH
48901: LD_INT 1
48903: ARRAY
48904: PPUSH
48905: NOP4
48909: GO 48935
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
48911: NOP4
48915: PUSH
48916: NOP4
48920: ARRAY
48921: PPUSH
48922: NOP4
48926: PUSH
48927: LD_INT 1
48929: ARRAY
48930: PPUSH
48931: NOP4
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
48935: NOP4
48939: PUSH
48940: NOP4
48944: ARRAY
48945: PPUSH
48946: NOP4
48950: PUSH
48951: LD_INT 29
48953: EQUAL
48954: IFFALSE 49320
// begin if WantsToAttack ( group [ i ] ) in bombed then
48956: NOP4
48960: PUSH
48961: NOP4
48965: ARRAY
48966: PPUSH
48967: NOP4
48971: PUSH
48972: NOP4
48976: IN
48977: IFFALSE 48981
// continue ;
48979: GO 46011
// k := 8 ;
48981: NOP4
48985: PUSH
48986: LD_INT 8
48988: ST_TO_ADDR
// x := 0 ;
48989: NOP4
48993: PUSH
48994: LD_INT 0
48996: ST_TO_ADDR
// if tmp < k then
48997: NOP4
49001: PUSH
49002: NOP4
49006: LESS
49007: IFFALSE 49019
// k := tmp ;
49009: NOP4
49013: PUSH
49014: NOP4
49018: ST_TO_ADDR
// for j = 1 to k do
49019: NOP4
49023: PUSH
49024: DOUBLE
49025: LD_INT 1
49027: DEC
49028: ST_TO_ADDR
49029: NOP4
49033: PUSH
49034: FOR_TO
49035: IFFALSE 49167
// begin if GetType ( tmp [ j ] ) = unit_building then
49037: NOP4
49041: PUSH
49042: NOP4
49046: ARRAY
49047: PPUSH
49048: NOP4
49052: PUSH
49053: LD_INT 3
49055: EQUAL
49056: IFFALSE 49165
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
49058: NOP4
49062: PUSH
49063: NOP4
49067: ARRAY
49068: PUSH
49069: NOP4
49073: IN
49074: NOT
49075: PUSH
49076: NOP4
49080: PUSH
49081: NOP4
49085: ARRAY
49086: PPUSH
49087: NOP4
49091: AND
49092: IFFALSE 49165
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49094: NOP4
49098: PUSH
49099: NOP4
49103: ARRAY
49104: PPUSH
49105: NOP4
49109: PUSH
49110: NOP4
49114: ARRAY
49115: PPUSH
49116: NOP4
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
49120: NOP4
49124: PUSH
49125: NOP4
49129: PPUSH
49130: NOP4
49134: PUSH
49135: LD_INT 1
49137: PLUS
49138: PPUSH
49139: NOP4
49143: PUSH
49144: NOP4
49148: ARRAY
49149: PPUSH
49150: NOP4
49154: ST_TO_ADDR
// attacking := true ;
49155: NOP4
49159: PUSH
49160: LD_INT 1
49162: ST_TO_ADDR
// break ;
49163: GO 49167
// end ; end ;
49165: GO 49034
49167: POP
49168: POP
// if not attacking and f_attack_depot then
49169: NOP4
49173: NOT
49174: PUSH
49175: NOP4
49179: AND
49180: IFFALSE 49275
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49182: NOP4
49186: PUSH
49187: NOP4
49191: PPUSH
49192: LD_INT 2
49194: PUSH
49195: LD_INT 30
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 30
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: PPUSH
49220: NOP4
49224: ST_TO_ADDR
// if z then
49225: NOP4
49229: IFFALSE 49275
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
49231: NOP4
49235: PUSH
49236: NOP4
49240: ARRAY
49241: PPUSH
49242: NOP4
49246: PPUSH
49247: NOP4
49251: PUSH
49252: NOP4
49256: ARRAY
49257: PPUSH
49258: NOP4
49262: PPUSH
49263: NOP4
// attacking := true ;
49267: NOP4
49271: PUSH
49272: LD_INT 1
49274: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
49275: NOP4
49279: PUSH
49280: NOP4
49284: ARRAY
49285: PPUSH
49286: NOP4
49290: PUSH
49291: LD_INT 500
49293: LESS
49294: IFFALSE 49320
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49296: NOP4
49300: PUSH
49301: NOP4
49305: ARRAY
49306: PPUSH
49307: NOP4
49311: PUSH
49312: LD_INT 1
49314: ARRAY
49315: PPUSH
49316: NOP4
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
49320: NOP4
49324: PUSH
49325: NOP4
49329: ARRAY
49330: PPUSH
49331: NOP4
49335: PUSH
49336: LD_INT 49
49338: EQUAL
49339: IFFALSE 49460
// begin if not HasTask ( group [ i ] ) then
49341: NOP4
49345: PUSH
49346: NOP4
49350: ARRAY
49351: PPUSH
49352: NOP4
49356: NOT
49357: IFFALSE 49460
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
49359: NOP4
49363: PUSH
49364: LD_INT 81
49366: PUSH
49367: NOP4
49371: PUSH
49372: NOP4
49376: ARRAY
49377: PPUSH
49378: NOP4
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PPUSH
49387: NOP4
49391: PPUSH
49392: NOP4
49396: PUSH
49397: NOP4
49401: ARRAY
49402: PPUSH
49403: NOP4
49407: ST_TO_ADDR
// if k then
49408: NOP4
49412: IFFALSE 49460
// if GetDistUnits ( group [ i ] , k ) > 10 then
49414: NOP4
49418: PUSH
49419: NOP4
49423: ARRAY
49424: PPUSH
49425: NOP4
49429: PPUSH
49430: NOP4
49434: PUSH
49435: LD_INT 10
49437: GREATER
49438: IFFALSE 49460
// ComMoveUnit ( group [ i ] , k ) ;
49440: NOP4
49444: PUSH
49445: NOP4
49449: ARRAY
49450: PPUSH
49451: NOP4
49455: PPUSH
49456: NOP4
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49460: NOP4
49464: PUSH
49465: NOP4
49469: ARRAY
49470: PPUSH
49471: NOP4
49475: PUSH
49476: LD_INT 250
49478: LESS
49479: PUSH
49480: NOP4
49484: PUSH
49485: NOP4
49489: ARRAY
49490: PUSH
49491: LD_INT 21
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 23
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PPUSH
49515: NOP4
49519: IN
49520: AND
49521: IFFALSE 49646
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
49523: NOP4
49527: PUSH
49528: NOP4
49532: PUSH
49533: NOP4
49537: PUSH
49538: NOP4
49542: ARRAY
49543: DIFF
49544: PPUSH
49545: NOP4
49549: PUSH
49550: NOP4
49554: ARRAY
49555: PPUSH
49556: NOP4
49560: ST_TO_ADDR
// if not k then
49561: NOP4
49565: NOT
49566: IFFALSE 49570
// continue ;
49568: GO 46011
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
49570: NOP4
49574: PUSH
49575: LD_INT 81
49577: PUSH
49578: NOP4
49582: PUSH
49583: NOP4
49587: ARRAY
49588: PPUSH
49589: NOP4
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PPUSH
49598: NOP4
49602: IN
49603: PUSH
49604: NOP4
49608: PPUSH
49609: NOP4
49613: PUSH
49614: NOP4
49618: ARRAY
49619: PPUSH
49620: NOP4
49624: PUSH
49625: LD_INT 5
49627: LESS
49628: AND
49629: IFFALSE 49646
// ComAutodestruct ( group [ i ] ) ;
49631: NOP4
49635: PUSH
49636: NOP4
49640: ARRAY
49641: PPUSH
49642: NOP4
// end ; if f_attack_depot then
49646: NOP4
49650: IFFALSE 49762
// begin k := 6 ;
49652: NOP4
49656: PUSH
49657: LD_INT 6
49659: ST_TO_ADDR
// if tmp < k then
49660: NOP4
49664: PUSH
49665: NOP4
49669: LESS
49670: IFFALSE 49682
// k := tmp ;
49672: NOP4
49676: PUSH
49677: NOP4
49681: ST_TO_ADDR
// for j = 1 to k do
49682: NOP4
49686: PUSH
49687: DOUBLE
49688: LD_INT 1
49690: DEC
49691: ST_TO_ADDR
49692: NOP4
49696: PUSH
49697: FOR_TO
49698: IFFALSE 49760
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
49700: NOP4
49704: PPUSH
49705: NOP4
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: IN
49720: IFFALSE 49758
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49722: NOP4
49726: PUSH
49727: NOP4
49731: ARRAY
49732: PPUSH
49733: NOP4
49737: PUSH
49738: NOP4
49742: ARRAY
49743: PPUSH
49744: NOP4
// attacking := true ;
49748: NOP4
49752: PUSH
49753: LD_INT 1
49755: ST_TO_ADDR
// break ;
49756: GO 49760
// end ;
49758: GO 49697
49760: POP
49761: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
49762: NOP4
49766: PUSH
49767: NOP4
49771: ARRAY
49772: PPUSH
49773: NOP4
49777: PUSH
49778: NOP4
49782: NOT
49783: AND
49784: IFFALSE 50106
// begin if GetTag ( group [ i ] ) = 71 then
49786: NOP4
49790: PUSH
49791: NOP4
49795: ARRAY
49796: PPUSH
49797: NOP4
49801: PUSH
49802: LD_INT 71
49804: EQUAL
49805: IFFALSE 49846
// begin if HasTask ( group [ i ] ) then
49807: NOP4
49811: PUSH
49812: NOP4
49816: ARRAY
49817: PPUSH
49818: NOP4
49822: IFFALSE 49828
// continue else
49824: GO 46011
49826: GO 49846
// SetTag ( group [ i ] , 0 ) ;
49828: NOP4
49832: PUSH
49833: NOP4
49837: ARRAY
49838: PPUSH
49839: LD_INT 0
49841: PPUSH
49842: NOP4
// end ; k := 8 ;
49846: NOP4
49850: PUSH
49851: LD_INT 8
49853: ST_TO_ADDR
// x := 0 ;
49854: NOP4
49858: PUSH
49859: LD_INT 0
49861: ST_TO_ADDR
// if tmp < k then
49862: NOP4
49866: PUSH
49867: NOP4
49871: LESS
49872: IFFALSE 49884
// k := tmp ;
49874: NOP4
49878: PUSH
49879: NOP4
49883: ST_TO_ADDR
// for j = 1 to k do
49884: NOP4
49888: PUSH
49889: DOUBLE
49890: LD_INT 1
49892: DEC
49893: ST_TO_ADDR
49894: NOP4
49898: PUSH
49899: FOR_TO
49900: IFFALSE 49998
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
49902: NOP4
49906: PUSH
49907: NOP4
49911: ARRAY
49912: PPUSH
49913: NOP4
49917: PUSH
49918: LD_INT 1
49920: EQUAL
49921: PUSH
49922: NOP4
49926: PUSH
49927: NOP4
49931: ARRAY
49932: PPUSH
49933: NOP4
49937: PUSH
49938: LD_INT 250
49940: LESS
49941: PUSH
49942: NOP4
49946: AND
49947: PUSH
49948: NOP4
49952: NOT
49953: PUSH
49954: NOP4
49958: PUSH
49959: NOP4
49963: ARRAY
49964: PPUSH
49965: NOP4
49969: PUSH
49970: LD_INT 250
49972: GREATEREQUAL
49973: AND
49974: OR
49975: AND
49976: IFFALSE 49996
// begin x := tmp [ j ] ;
49978: NOP4
49982: PUSH
49983: NOP4
49987: PUSH
49988: NOP4
49992: ARRAY
49993: ST_TO_ADDR
// break ;
49994: GO 49998
// end ;
49996: GO 49899
49998: POP
49999: POP
// if x then
50000: NOP4
50004: IFFALSE 50028
// ComAttackUnit ( group [ i ] , x ) else
50006: NOP4
50010: PUSH
50011: NOP4
50015: ARRAY
50016: PPUSH
50017: NOP4
50021: PPUSH
50022: NOP4
50026: GO 50052
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50028: NOP4
50032: PUSH
50033: NOP4
50037: ARRAY
50038: PPUSH
50039: NOP4
50043: PUSH
50044: LD_INT 1
50046: ARRAY
50047: PPUSH
50048: NOP4
// if not HasTask ( group [ i ] ) then
50052: NOP4
50056: PUSH
50057: NOP4
50061: ARRAY
50062: PPUSH
50063: NOP4
50067: NOT
50068: IFFALSE 50106
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
50070: NOP4
50074: PUSH
50075: NOP4
50079: ARRAY
50080: PPUSH
50081: NOP4
50085: PPUSH
50086: NOP4
50090: PUSH
50091: NOP4
50095: ARRAY
50096: PPUSH
50097: NOP4
50101: PPUSH
50102: NOP4
// end ; end ; end ;
50106: GO 46011
50108: POP
50109: POP
// wait ( 0 0$1 ) ;
50110: LD_INT 35
50112: PPUSH
50113: NOP4
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
50117: NOP4
50121: PUSH
50122: EMPTY
50123: EQUAL
50124: PUSH
50125: LD_INT 81
50127: PUSH
50128: NOP4
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PPUSH
50137: NOP4
50141: NOT
50142: OR
50143: IFFALSE 45996
// end ;
50145: LD_VAR 0 2
50149: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50150: LD_INT 0
50152: PPUSH
50153: PPUSH
50154: PPUSH
50155: PPUSH
// if not base_units then
50156: NOP4
50160: NOT
50161: IFFALSE 50165
// exit ;
50163: GO 50252
// result := false ;
50165: NOP4
50169: PUSH
50170: LD_INT 0
50172: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50173: NOP4
50177: PUSH
50178: NOP4
50182: PPUSH
50183: LD_INT 21
50185: PUSH
50186: LD_INT 3
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PPUSH
50193: NOP4
50197: ST_TO_ADDR
// if not tmp then
50198: NOP4
50202: NOT
50203: IFFALSE 50207
// exit ;
50205: GO 50252
// for i in tmp do
50207: NOP4
50211: PUSH
50212: NOP4
50216: PUSH
50217: FOR_IN
50218: IFFALSE 50250
// begin result := EnemyInRange ( i , 22 ) ;
50220: NOP4
50224: PUSH
50225: NOP4
50229: PPUSH
50230: LD_INT 22
50232: PPUSH
50233: NOP4
50237: ST_TO_ADDR
// if result then
50238: NOP4
50242: IFFALSE 50248
// exit ;
50244: POP
50245: POP
50246: GO 50252
// end ;
50248: GO 50217
50250: POP
50251: POP
// end ;
50252: LD_VAR 0 2
50256: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
50257: LD_INT 0
50259: PPUSH
50260: PPUSH
// if not units then
50261: NOP4
50265: NOT
50266: IFFALSE 50270
// exit ;
50268: GO 50340
// result := [ ] ;
50270: NOP4
50274: PUSH
50275: EMPTY
50276: ST_TO_ADDR
// for i in units do
50277: NOP4
50281: PUSH
50282: NOP4
50286: PUSH
50287: FOR_IN
50288: IFFALSE 50338
// if GetTag ( i ) = tag then
50290: NOP4
50294: PPUSH
50295: NOP4
50299: PUSH
50300: NOP4
50304: EQUAL
50305: IFFALSE 50336
// result := Insert ( result , result + 1 , i ) ;
50307: NOP4
50311: PUSH
50312: NOP4
50316: PPUSH
50317: NOP4
50321: PUSH
50322: LD_INT 1
50324: PLUS
50325: PPUSH
50326: NOP4
50330: PPUSH
50331: NOP4
50335: ST_TO_ADDR
50336: GO 50287
50338: POP
50339: POP
// end ;
50340: LD_VAR 0 3
50344: RET
// export function IsDriver ( un ) ; begin
50345: LD_INT 0
50347: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50348: NOP4
50352: PUSH
50353: NOP4
50357: PUSH
50358: LD_INT 55
50360: PUSH
50361: EMPTY
50362: LIST
50363: PPUSH
50364: NOP4
50368: IN
50369: ST_TO_ADDR
// end ;
50370: LD_VAR 0 2
50374: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50375: LD_INT 0
50377: PPUSH
50378: PPUSH
// list := [ ] ;
50379: NOP4
50383: PUSH
50384: EMPTY
50385: ST_TO_ADDR
// case d of 0 :
50386: NOP4
50390: PUSH
50391: LD_INT 0
50393: DOUBLE
50394: EQUAL
50395: IFTRUE 50399
50397: GO 50532
50399: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50400: NOP4
50404: PUSH
50405: NOP4
50409: PUSH
50410: LD_INT 4
50412: MINUS
50413: PUSH
50414: NOP4
50418: PUSH
50419: LD_INT 4
50421: MINUS
50422: PUSH
50423: LD_INT 2
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: LIST
50430: PUSH
50431: NOP4
50435: PUSH
50436: LD_INT 3
50438: MINUS
50439: PUSH
50440: NOP4
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: LIST
50452: PUSH
50453: NOP4
50457: PUSH
50458: LD_INT 4
50460: PLUS
50461: PUSH
50462: NOP4
50466: PUSH
50467: LD_INT 4
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: LIST
50474: PUSH
50475: NOP4
50479: PUSH
50480: LD_INT 3
50482: PLUS
50483: PUSH
50484: NOP4
50488: PUSH
50489: LD_INT 3
50491: PLUS
50492: PUSH
50493: LD_INT 5
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: PUSH
50501: NOP4
50505: PUSH
50506: NOP4
50510: PUSH
50511: LD_INT 4
50513: PLUS
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: LIST
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: ST_TO_ADDR
// end ; 1 :
50530: GO 51230
50532: LD_INT 1
50534: DOUBLE
50535: EQUAL
50536: IFTRUE 50540
50538: GO 50673
50540: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50541: NOP4
50545: PUSH
50546: NOP4
50550: PUSH
50551: NOP4
50555: PUSH
50556: LD_INT 4
50558: MINUS
50559: PUSH
50560: LD_INT 3
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: LIST
50567: PUSH
50568: NOP4
50572: PUSH
50573: LD_INT 3
50575: MINUS
50576: PUSH
50577: NOP4
50581: PUSH
50582: LD_INT 3
50584: MINUS
50585: PUSH
50586: LD_INT 2
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: LIST
50593: PUSH
50594: NOP4
50598: PUSH
50599: LD_INT 4
50601: MINUS
50602: PUSH
50603: NOP4
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: LIST
50615: PUSH
50616: NOP4
50620: PUSH
50621: NOP4
50625: PUSH
50626: LD_INT 3
50628: PLUS
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: LIST
50637: PUSH
50638: NOP4
50642: PUSH
50643: LD_INT 4
50645: PLUS
50646: PUSH
50647: NOP4
50651: PUSH
50652: LD_INT 4
50654: PLUS
50655: PUSH
50656: LD_INT 5
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: LIST
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: ST_TO_ADDR
// end ; 2 :
50671: GO 51230
50673: LD_INT 2
50675: DOUBLE
50676: EQUAL
50677: IFTRUE 50681
50679: GO 50810
50681: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50682: NOP4
50686: PUSH
50687: NOP4
50691: PUSH
50692: NOP4
50696: PUSH
50697: LD_INT 3
50699: MINUS
50700: PUSH
50701: LD_INT 3
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: LIST
50708: PUSH
50709: NOP4
50713: PUSH
50714: LD_INT 4
50716: PLUS
50717: PUSH
50718: NOP4
50722: PUSH
50723: LD_INT 4
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: LIST
50730: PUSH
50731: NOP4
50735: PUSH
50736: NOP4
50740: PUSH
50741: LD_INT 4
50743: PLUS
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: LIST
50752: PUSH
50753: NOP4
50757: PUSH
50758: LD_INT 3
50760: MINUS
50761: PUSH
50762: NOP4
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: LIST
50774: PUSH
50775: NOP4
50779: PUSH
50780: LD_INT 4
50782: MINUS
50783: PUSH
50784: NOP4
50788: PUSH
50789: LD_INT 4
50791: MINUS
50792: PUSH
50793: LD_INT 2
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: ST_TO_ADDR
// end ; 3 :
50808: GO 51230
50810: LD_INT 3
50812: DOUBLE
50813: EQUAL
50814: IFTRUE 50818
50816: GO 50951
50818: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50819: NOP4
50823: PUSH
50824: NOP4
50828: PUSH
50829: LD_INT 3
50831: PLUS
50832: PUSH
50833: NOP4
50837: PUSH
50838: LD_INT 4
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: LIST
50845: PUSH
50846: NOP4
50850: PUSH
50851: LD_INT 4
50853: PLUS
50854: PUSH
50855: NOP4
50859: PUSH
50860: LD_INT 4
50862: PLUS
50863: PUSH
50864: LD_INT 5
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: LIST
50871: PUSH
50872: NOP4
50876: PUSH
50877: LD_INT 4
50879: MINUS
50880: PUSH
50881: NOP4
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: LIST
50893: PUSH
50894: NOP4
50898: PUSH
50899: NOP4
50903: PUSH
50904: LD_INT 4
50906: MINUS
50907: PUSH
50908: LD_INT 3
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: LIST
50915: PUSH
50916: NOP4
50920: PUSH
50921: LD_INT 3
50923: MINUS
50924: PUSH
50925: NOP4
50929: PUSH
50930: LD_INT 3
50932: MINUS
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: LIST
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: ST_TO_ADDR
// end ; 4 :
50949: GO 51230
50951: LD_INT 4
50953: DOUBLE
50954: EQUAL
50955: IFTRUE 50959
50957: GO 51092
50959: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50960: NOP4
50964: PUSH
50965: NOP4
50969: PUSH
50970: NOP4
50974: PUSH
50975: LD_INT 4
50977: PLUS
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: LIST
50986: PUSH
50987: NOP4
50991: PUSH
50992: LD_INT 3
50994: PLUS
50995: PUSH
50996: NOP4
51000: PUSH
51001: LD_INT 3
51003: PLUS
51004: PUSH
51005: LD_INT 5
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: PUSH
51013: NOP4
51017: PUSH
51018: LD_INT 4
51020: PLUS
51021: PUSH
51022: NOP4
51026: PUSH
51027: LD_INT 4
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: LIST
51034: PUSH
51035: NOP4
51039: PUSH
51040: NOP4
51044: PUSH
51045: LD_INT 3
51047: MINUS
51048: PUSH
51049: LD_INT 3
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: LIST
51056: PUSH
51057: NOP4
51061: PUSH
51062: LD_INT 4
51064: MINUS
51065: PUSH
51066: NOP4
51070: PUSH
51071: LD_INT 4
51073: MINUS
51074: PUSH
51075: LD_INT 2
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: ST_TO_ADDR
// end ; 5 :
51090: GO 51230
51092: LD_INT 5
51094: DOUBLE
51095: EQUAL
51096: IFTRUE 51100
51098: GO 51229
51100: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51101: NOP4
51105: PUSH
51106: NOP4
51110: PUSH
51111: LD_INT 4
51113: MINUS
51114: PUSH
51115: NOP4
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: LIST
51127: PUSH
51128: NOP4
51132: PUSH
51133: NOP4
51137: PUSH
51138: LD_INT 4
51140: MINUS
51141: PUSH
51142: LD_INT 3
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: LIST
51149: PUSH
51150: NOP4
51154: PUSH
51155: LD_INT 4
51157: PLUS
51158: PUSH
51159: NOP4
51163: PUSH
51164: LD_INT 4
51166: PLUS
51167: PUSH
51168: LD_INT 5
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: LIST
51175: PUSH
51176: NOP4
51180: PUSH
51181: LD_INT 3
51183: PLUS
51184: PUSH
51185: NOP4
51189: PUSH
51190: LD_INT 4
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: LIST
51197: PUSH
51198: NOP4
51202: PUSH
51203: NOP4
51207: PUSH
51208: LD_INT 3
51210: PLUS
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: LIST
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: ST_TO_ADDR
// end ; end ;
51227: GO 51230
51229: POP
// result := list ;
51230: NOP4
51234: PUSH
51235: NOP4
51239: ST_TO_ADDR
// end ;
51240: LD_VAR 0 4
51244: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51245: LD_INT 0
51247: PPUSH
51248: PPUSH
51249: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51250: NOP4
51254: NOT
51255: PUSH
51256: NOP4
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: LD_INT 2
51266: PUSH
51267: LD_INT 3
51269: PUSH
51270: LD_INT 4
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: IN
51279: NOT
51280: OR
51281: IFFALSE 51285
// exit ;
51283: GO 51377
// tmp := [ ] ;
51285: NOP4
51289: PUSH
51290: EMPTY
51291: ST_TO_ADDR
// for i in units do
51292: NOP4
51296: PUSH
51297: NOP4
51301: PUSH
51302: FOR_IN
51303: IFFALSE 51346
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
51305: NOP4
51309: PUSH
51310: NOP4
51314: PPUSH
51315: NOP4
51319: PUSH
51320: LD_INT 1
51322: PLUS
51323: PPUSH
51324: NOP4
51328: PPUSH
51329: NOP4
51333: PPUSH
51334: NOP4
51338: PPUSH
51339: NOP4
51343: ST_TO_ADDR
51344: GO 51302
51346: POP
51347: POP
// if not tmp then
51348: NOP4
51352: NOT
51353: IFFALSE 51357
// exit ;
51355: GO 51377
// result := SortListByListDesc ( units , tmp ) ;
51357: NOP4
51361: PUSH
51362: NOP4
51366: PPUSH
51367: NOP4
51371: PPUSH
51372: NOP4
51376: ST_TO_ADDR
// end ;
51377: LD_VAR 0 3
51381: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51382: LD_INT 0
51384: PPUSH
51385: PPUSH
51386: PPUSH
// x := GetX ( building ) ;
51387: NOP4
51391: PUSH
51392: NOP4
51396: PPUSH
51397: NOP4
51401: ST_TO_ADDR
// y := GetY ( building ) ;
51402: NOP4
51406: PUSH
51407: NOP4
51411: PPUSH
51412: NOP4
51416: ST_TO_ADDR
// if GetTaskList ( unit ) then
51417: NOP4
51421: PPUSH
51422: NOP4
51426: IFFALSE 51521
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51428: LD_STRING e
51430: PUSH
51431: NOP4
51435: PPUSH
51436: NOP4
51440: PUSH
51441: LD_INT 1
51443: ARRAY
51444: PUSH
51445: LD_INT 1
51447: ARRAY
51448: EQUAL
51449: PUSH
51450: NOP4
51454: PUSH
51455: NOP4
51459: PPUSH
51460: NOP4
51464: PUSH
51465: LD_INT 1
51467: ARRAY
51468: PUSH
51469: LD_INT 2
51471: ARRAY
51472: EQUAL
51473: AND
51474: PUSH
51475: NOP4
51479: PUSH
51480: NOP4
51484: PPUSH
51485: NOP4
51489: PUSH
51490: LD_INT 1
51492: ARRAY
51493: PUSH
51494: LD_INT 3
51496: ARRAY
51497: EQUAL
51498: AND
51499: IFFALSE 51511
// result := true else
51501: NOP4
51505: PUSH
51506: LD_INT 1
51508: ST_TO_ADDR
51509: GO 51519
// result := false ;
51511: NOP4
51515: PUSH
51516: LD_INT 0
51518: ST_TO_ADDR
// end else
51519: GO 51529
// result := false ;
51521: NOP4
51525: PUSH
51526: LD_INT 0
51528: ST_TO_ADDR
// end ;
51529: LD_VAR 0 3
51533: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51534: LD_INT 0
51536: PPUSH
51537: PPUSH
51538: PPUSH
51539: PPUSH
// if not unit or not area then
51540: NOP4
51544: NOT
51545: PUSH
51546: NOP4
51550: NOT
51551: OR
51552: IFFALSE 51556
// exit ;
51554: GO 51720
// tmp := AreaToList ( area , i ) ;
51556: NOP4
51560: PUSH
51561: NOP4
51565: PPUSH
51566: NOP4
51570: PPUSH
51571: NOP4
51575: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51576: NOP4
51580: PUSH
51581: DOUBLE
51582: LD_INT 1
51584: DEC
51585: ST_TO_ADDR
51586: NOP4
51590: PUSH
51591: LD_INT 1
51593: ARRAY
51594: PUSH
51595: FOR_TO
51596: IFFALSE 51718
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51598: NOP4
51602: PUSH
51603: NOP4
51607: PUSH
51608: LD_INT 1
51610: ARRAY
51611: PUSH
51612: NOP4
51616: ARRAY
51617: PUSH
51618: NOP4
51622: PUSH
51623: LD_INT 2
51625: ARRAY
51626: PUSH
51627: NOP4
51631: ARRAY
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
51637: NOP4
51641: PUSH
51642: LD_INT 1
51644: ARRAY
51645: PPUSH
51646: NOP4
51650: PUSH
51651: LD_INT 2
51653: ARRAY
51654: PPUSH
51655: NOP4
51659: PUSH
51660: LD_INT 0
51662: EQUAL
51663: IFFALSE 51716
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51665: NOP4
51669: PPUSH
51670: NOP4
51674: PUSH
51675: LD_INT 1
51677: ARRAY
51678: PPUSH
51679: NOP4
51683: PUSH
51684: LD_INT 2
51686: ARRAY
51687: PPUSH
51688: NOP4
51692: PPUSH
51693: NOP4
// result := IsPlaced ( unit ) ;
51697: NOP4
51701: PUSH
51702: NOP4
51706: PPUSH
51707: NOP4
51711: ST_TO_ADDR
// exit ;
51712: POP
51713: POP
51714: GO 51720
// end ; end ;
51716: GO 51595
51718: POP
51719: POP
// end ;
51720: LD_VAR 0 4
51724: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51725: LD_INT 0
51727: PPUSH
51728: PPUSH
51729: PPUSH
// if not side or side > 8 then
51730: NOP4
51734: NOT
51735: PUSH
51736: NOP4
51740: PUSH
51741: LD_INT 8
51743: GREATER
51744: OR
51745: IFFALSE 51749
// exit ;
51747: GO 51936
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51749: NOP4
51753: PUSH
51754: LD_INT 22
51756: PUSH
51757: NOP4
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 21
51768: PUSH
51769: LD_INT 3
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PPUSH
51780: NOP4
51784: ST_TO_ADDR
// if not tmp then
51785: NOP4
51789: NOT
51790: IFFALSE 51794
// exit ;
51792: GO 51936
// enable_addtolog := true ;
51794: LD_ADDR_OWVAR 81
51798: PUSH
51799: LD_INT 1
51801: ST_TO_ADDR
// AddToLog ( [ ) ;
51802: LD_STRING [
51804: PPUSH
51805: NOP4
// for i in tmp do
51809: NOP4
51813: PUSH
51814: NOP4
51818: PUSH
51819: FOR_IN
51820: IFFALSE 51927
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51822: LD_STRING [
51824: PUSH
51825: NOP4
51829: PPUSH
51830: NOP4
51834: STR
51835: PUSH
51836: LD_STRING , 
51838: STR
51839: PUSH
51840: NOP4
51844: PPUSH
51845: NOP4
51849: STR
51850: PUSH
51851: LD_STRING , 
51853: STR
51854: PUSH
51855: NOP4
51859: PPUSH
51860: NOP4
51864: STR
51865: PUSH
51866: LD_STRING , 
51868: STR
51869: PUSH
51870: NOP4
51874: PPUSH
51875: NOP4
51879: STR
51880: PUSH
51881: LD_STRING , 
51883: STR
51884: PUSH
51885: NOP4
51889: PPUSH
51890: LD_INT 1
51892: PPUSH
51893: NOP4
51897: STR
51898: PUSH
51899: LD_STRING , 
51901: STR
51902: PUSH
51903: NOP4
51907: PPUSH
51908: LD_INT 2
51910: PPUSH
51911: NOP4
51915: STR
51916: PUSH
51917: LD_STRING ],
51919: STR
51920: PPUSH
51921: NOP4
// end ;
51925: GO 51819
51927: POP
51928: POP
// AddToLog ( ]; ) ;
51929: LD_STRING ];
51931: PPUSH
51932: NOP4
// end ;
51936: LD_VAR 0 2
51940: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51941: LD_INT 0
51943: PPUSH
51944: PPUSH
51945: PPUSH
51946: PPUSH
51947: PPUSH
// if not area or not rate or not max then
51948: NOP4
51952: NOT
51953: PUSH
51954: NOP4
51958: NOT
51959: OR
51960: PUSH
51961: NOP4
51965: NOT
51966: OR
51967: IFFALSE 51971
// exit ;
51969: GO 52163
// while 1 do
51971: LD_INT 1
51973: IFFALSE 52163
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51975: NOP4
51979: PUSH
51980: NOP4
51984: PPUSH
51985: LD_INT 1
51987: PPUSH
51988: NOP4
51992: PUSH
51993: LD_INT 10
51995: MUL
51996: ST_TO_ADDR
// r := rate / 10 ;
51997: NOP4
52001: PUSH
52002: NOP4
52006: PUSH
52007: LD_INT 10
52009: DIVREAL
52010: ST_TO_ADDR
// time := 1 1$00 ;
52011: NOP4
52015: PUSH
52016: LD_INT 2100
52018: ST_TO_ADDR
// if amount < min then
52019: NOP4
52023: PUSH
52024: NOP4
52028: LESS
52029: IFFALSE 52047
// r := r * 2 else
52031: NOP4
52035: PUSH
52036: NOP4
52040: PUSH
52041: LD_INT 2
52043: MUL
52044: ST_TO_ADDR
52045: GO 52073
// if amount > max then
52047: NOP4
52051: PUSH
52052: NOP4
52056: GREATER
52057: IFFALSE 52073
// r := r / 2 ;
52059: NOP4
52063: PUSH
52064: NOP4
52068: PUSH
52069: LD_INT 2
52071: DIVREAL
52072: ST_TO_ADDR
// time := time / r ;
52073: NOP4
52077: PUSH
52078: NOP4
52082: PUSH
52083: NOP4
52087: DIVREAL
52088: ST_TO_ADDR
// if time < 0 then
52089: NOP4
52093: PUSH
52094: LD_INT 0
52096: LESS
52097: IFFALSE 52114
// time := time * - 1 ;
52099: NOP4
52103: PUSH
52104: NOP4
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: MUL
52113: ST_TO_ADDR
// wait ( time ) ;
52114: NOP4
52118: PPUSH
52119: NOP4
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
52123: LD_INT 35
52125: PPUSH
52126: LD_INT 875
52128: PPUSH
52129: NOP4
52133: PPUSH
52134: NOP4
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52138: LD_INT 1
52140: PPUSH
52141: LD_INT 5
52143: PPUSH
52144: NOP4
52148: PPUSH
52149: NOP4
52153: PPUSH
52154: LD_INT 1
52156: PPUSH
52157: NOP4
// end ;
52161: GO 51971
// end ;
52163: LD_VAR 0 5
52167: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52168: LD_INT 0
52170: PPUSH
52171: PPUSH
52172: PPUSH
52173: PPUSH
52174: PPUSH
52175: PPUSH
52176: PPUSH
52177: PPUSH
// if not turrets or not factories then
52178: NOP4
52182: NOT
52183: PUSH
52184: NOP4
52188: NOT
52189: OR
52190: IFFALSE 52194
// exit ;
52192: GO 52501
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52194: NOP4
52198: PUSH
52199: LD_INT 5
52201: PUSH
52202: LD_INT 6
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: LD_INT 4
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 3
52221: PUSH
52222: LD_INT 5
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 24
52236: PUSH
52237: LD_INT 25
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 23
52246: PUSH
52247: LD_INT 27
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 42
52260: PUSH
52261: LD_INT 43
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 44
52270: PUSH
52271: LD_INT 46
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 45
52280: PUSH
52281: LD_INT 47
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: LIST
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: LIST
52297: ST_TO_ADDR
// result := [ ] ;
52298: NOP4
52302: PUSH
52303: EMPTY
52304: ST_TO_ADDR
// for i in turrets do
52305: NOP4
52309: PUSH
52310: NOP4
52314: PUSH
52315: FOR_IN
52316: IFFALSE 52499
// begin nat := GetNation ( i ) ;
52318: NOP4
52322: PUSH
52323: NOP4
52327: PPUSH
52328: NOP4
52332: ST_TO_ADDR
// weapon := 0 ;
52333: NOP4
52337: PUSH
52338: LD_INT 0
52340: ST_TO_ADDR
// if not nat then
52341: NOP4
52345: NOT
52346: IFFALSE 52350
// continue ;
52348: GO 52315
// for j in list [ nat ] do
52350: NOP4
52354: PUSH
52355: NOP4
52359: PUSH
52360: NOP4
52364: ARRAY
52365: PUSH
52366: FOR_IN
52367: IFFALSE 52408
// if GetBWeapon ( i ) = j [ 1 ] then
52369: NOP4
52373: PPUSH
52374: NOP4
52378: PUSH
52379: NOP4
52383: PUSH
52384: LD_INT 1
52386: ARRAY
52387: EQUAL
52388: IFFALSE 52406
// begin weapon := j [ 2 ] ;
52390: NOP4
52394: PUSH
52395: NOP4
52399: PUSH
52400: LD_INT 2
52402: ARRAY
52403: ST_TO_ADDR
// break ;
52404: GO 52408
// end ;
52406: GO 52366
52408: POP
52409: POP
// if not weapon then
52410: NOP4
52414: NOT
52415: IFFALSE 52419
// continue ;
52417: GO 52315
// for k in factories do
52419: NOP4
52423: PUSH
52424: NOP4
52428: PUSH
52429: FOR_IN
52430: IFFALSE 52495
// begin weapons := AvailableWeaponList ( k ) ;
52432: NOP4
52436: PUSH
52437: NOP4
52441: PPUSH
52442: NOP4
52446: ST_TO_ADDR
// if not weapons then
52447: NOP4
52451: NOT
52452: IFFALSE 52456
// continue ;
52454: GO 52429
// if weapon in weapons then
52456: NOP4
52460: PUSH
52461: NOP4
52465: IN
52466: IFFALSE 52493
// begin result := [ i , weapon ] ;
52468: NOP4
52472: PUSH
52473: NOP4
52477: PUSH
52478: NOP4
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: ST_TO_ADDR
// exit ;
52487: POP
52488: POP
52489: POP
52490: POP
52491: GO 52501
// end ; end ;
52493: GO 52429
52495: POP
52496: POP
// end ;
52497: GO 52315
52499: POP
52500: POP
// end ;
52501: LD_VAR 0 3
52505: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52506: LD_INT 0
52508: PPUSH
// if not side or side > 8 then
52509: NOP4
52513: NOT
52514: PUSH
52515: NOP4
52519: PUSH
52520: LD_INT 8
52522: GREATER
52523: OR
52524: IFFALSE 52528
// exit ;
52526: GO 52587
// if not range then
52528: NOP4
52532: NOT
52533: IFFALSE 52544
// range := - 12 ;
52535: NOP4
52539: PUSH
52540: LD_INT 12
52542: NEG
52543: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52544: NOP4
52548: PPUSH
52549: NOP4
52553: PPUSH
52554: NOP4
52558: PPUSH
52559: NOP4
52563: PPUSH
52564: NOP4
// RemoveSeeing ( x , y , side ) ;
52568: NOP4
52572: PPUSH
52573: NOP4
52577: PPUSH
52578: NOP4
52582: PPUSH
52583: NOP4
// end ;
52587: LD_VAR 0 5
52591: RET
// export function Video ( mode ) ; begin
52592: LD_INT 0
52594: PPUSH
// ingame_video = mode ;
52595: LD_ADDR_OWVAR 52
52599: PUSH
52600: NOP4
52604: ST_TO_ADDR
// interface_hidden = mode ;
52605: LD_ADDR_OWVAR 54
52609: PUSH
52610: NOP4
52614: ST_TO_ADDR
// end ;
52615: LD_VAR 0 2
52619: RET
// export function Join ( array , element ) ; begin
52620: LD_INT 0
52622: PPUSH
// result := array ^ element ;
52623: NOP4
52627: PUSH
52628: NOP4
52632: PUSH
52633: NOP4
52637: ADD
52638: ST_TO_ADDR
// end ;
52639: LD_VAR 0 3
52643: RET
// export function JoinUnion ( array , element ) ; begin
52644: LD_INT 0
52646: PPUSH
// result := array union element ;
52647: NOP4
52651: PUSH
52652: NOP4
52656: PUSH
52657: NOP4
52661: UNION
52662: ST_TO_ADDR
// end ;
52663: LD_VAR 0 3
52667: RET
// export function GetBehemoths ( side ) ; begin
52668: LD_INT 0
52670: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
52671: NOP4
52675: PUSH
52676: LD_INT 22
52678: PUSH
52679: NOP4
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 31
52690: PUSH
52691: LD_INT 25
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PPUSH
52702: NOP4
52706: ST_TO_ADDR
// end ;
52707: LD_VAR 0 2
52711: RET
// export function Shuffle ( array ) ; var i , index ; begin
52712: LD_INT 0
52714: PPUSH
52715: PPUSH
52716: PPUSH
// result := [ ] ;
52717: NOP4
52721: PUSH
52722: EMPTY
52723: ST_TO_ADDR
// if not array then
52724: NOP4
52728: NOT
52729: IFFALSE 52733
// exit ;
52731: GO 52832
// Randomize ;
52733: NOP4
// for i = array downto 1 do
52737: NOP4
52741: PUSH
52742: DOUBLE
52743: NOP4
52747: INC
52748: ST_TO_ADDR
52749: LD_INT 1
52751: PUSH
52752: FOR_DOWNTO
52753: IFFALSE 52830
// begin index := rand ( 1 , array ) ;
52755: NOP4
52759: PUSH
52760: LD_INT 1
52762: PPUSH
52763: NOP4
52767: PPUSH
52768: NOP4
52772: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52773: NOP4
52777: PUSH
52778: NOP4
52782: PPUSH
52783: NOP4
52787: PUSH
52788: LD_INT 1
52790: PLUS
52791: PPUSH
52792: NOP4
52796: PUSH
52797: NOP4
52801: ARRAY
52802: PPUSH
52803: NOP4
52807: ST_TO_ADDR
// array := Delete ( array , index ) ;
52808: NOP4
52812: PUSH
52813: NOP4
52817: PPUSH
52818: NOP4
52822: PPUSH
52823: NOP4
52827: ST_TO_ADDR
// end ;
52828: GO 52752
52830: POP
52831: POP
// end ;
52832: LD_VAR 0 2
52836: RET
// export function GetBaseMaterials ( base ) ; begin
52837: LD_INT 0
52839: PPUSH
// result := [ 0 , 0 , 0 ] ;
52840: NOP4
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: LIST
52858: ST_TO_ADDR
// if not base then
52859: NOP4
52863: NOT
52864: IFFALSE 52868
// exit ;
52866: GO 52917
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52868: NOP4
52872: PUSH
52873: NOP4
52877: PPUSH
52878: LD_INT 1
52880: PPUSH
52881: NOP4
52885: PUSH
52886: NOP4
52890: PPUSH
52891: LD_INT 2
52893: PPUSH
52894: NOP4
52898: PUSH
52899: NOP4
52903: PPUSH
52904: LD_INT 3
52906: PPUSH
52907: NOP4
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: LIST
52916: ST_TO_ADDR
// end ; end_of_file
52917: LD_VAR 0 2
52921: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
52922: LD_INT 0
52924: PPUSH
52925: PPUSH
// skirmish := false ;
52926: NOP4
52930: PUSH
52931: LD_INT 0
52933: ST_TO_ADDR
// debug_mc := false ;
52934: NOP4
52938: PUSH
52939: LD_INT 0
52941: ST_TO_ADDR
// mc_bases := [ ] ;
52942: NOP4
52946: PUSH
52947: EMPTY
52948: ST_TO_ADDR
// mc_sides := [ ] ;
52949: NOP4
52953: PUSH
52954: EMPTY
52955: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
52956: NOP4
52960: PUSH
52961: EMPTY
52962: ST_TO_ADDR
// mc_building_repairs := [ ] ;
52963: NOP4
52967: PUSH
52968: EMPTY
52969: ST_TO_ADDR
// mc_need_heal := [ ] ;
52970: NOP4
52974: PUSH
52975: EMPTY
52976: ST_TO_ADDR
// mc_healers := [ ] ;
52977: NOP4
52981: PUSH
52982: EMPTY
52983: ST_TO_ADDR
// mc_build_list := [ ] ;
52984: NOP4
52988: PUSH
52989: EMPTY
52990: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
52991: NOP4
52995: PUSH
52996: EMPTY
52997: ST_TO_ADDR
// mc_builders := [ ] ;
52998: NOP4
53002: PUSH
53003: EMPTY
53004: ST_TO_ADDR
// mc_construct_list := [ ] ;
53005: NOP4
53009: PUSH
53010: EMPTY
53011: ST_TO_ADDR
// mc_turret_list := [ ] ;
53012: NOP4
53016: PUSH
53017: EMPTY
53018: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
53019: NOP4
53023: PUSH
53024: EMPTY
53025: ST_TO_ADDR
// mc_miners := [ ] ;
53026: NOP4
53030: PUSH
53031: EMPTY
53032: ST_TO_ADDR
// mc_mines := [ ] ;
53033: NOP4
53037: PUSH
53038: EMPTY
53039: ST_TO_ADDR
// mc_minefields := [ ] ;
53040: NOP4
53044: PUSH
53045: EMPTY
53046: ST_TO_ADDR
// mc_crates := [ ] ;
53047: NOP4
53051: PUSH
53052: EMPTY
53053: ST_TO_ADDR
// mc_crates_collector := [ ] ;
53054: NOP4
53058: PUSH
53059: EMPTY
53060: ST_TO_ADDR
// mc_crates_area := [ ] ;
53061: NOP4
53065: PUSH
53066: EMPTY
53067: ST_TO_ADDR
// mc_vehicles := [ ] ;
53068: NOP4
53072: PUSH
53073: EMPTY
53074: ST_TO_ADDR
// mc_attack := [ ] ;
53075: NOP4
53079: PUSH
53080: EMPTY
53081: ST_TO_ADDR
// mc_produce := [ ] ;
53082: NOP4
53086: PUSH
53087: EMPTY
53088: ST_TO_ADDR
// mc_defender := [ ] ;
53089: NOP4
53093: PUSH
53094: EMPTY
53095: ST_TO_ADDR
// mc_parking := [ ] ;
53096: NOP4
53100: PUSH
53101: EMPTY
53102: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
53103: NOP4
53107: PUSH
53108: EMPTY
53109: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
53110: NOP4
53114: PUSH
53115: EMPTY
53116: ST_TO_ADDR
// mc_scan := [ ] ;
53117: NOP4
53121: PUSH
53122: EMPTY
53123: ST_TO_ADDR
// mc_scan_area := [ ] ;
53124: NOP4
53128: PUSH
53129: EMPTY
53130: ST_TO_ADDR
// mc_tech := [ ] ;
53131: NOP4
53135: PUSH
53136: EMPTY
53137: ST_TO_ADDR
// mc_class := [ ] ;
53138: NOP4
53142: PUSH
53143: EMPTY
53144: ST_TO_ADDR
// mc_class_case_use := [ ] ;
53145: NOP4
53149: PUSH
53150: EMPTY
53151: ST_TO_ADDR
// end ;
53152: LD_VAR 0 1
53156: RET
// export function MC_Kill ( base ) ; begin
53157: LD_INT 0
53159: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
53160: NOP4
53164: PUSH
53165: NOP4
53169: PPUSH
53170: NOP4
53174: PPUSH
53175: EMPTY
53176: PPUSH
53177: NOP4
53181: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
53182: NOP4
53186: PUSH
53187: NOP4
53191: PPUSH
53192: NOP4
53196: PPUSH
53197: EMPTY
53198: PPUSH
53199: NOP4
53203: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
53204: NOP4
53208: PUSH
53209: NOP4
53213: PPUSH
53214: NOP4
53218: PPUSH
53219: EMPTY
53220: PPUSH
53221: NOP4
53225: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
53226: NOP4
53230: PUSH
53231: NOP4
53235: PPUSH
53236: NOP4
53240: PPUSH
53241: EMPTY
53242: PPUSH
53243: NOP4
53247: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
53248: NOP4
53252: PUSH
53253: NOP4
53257: PPUSH
53258: NOP4
53262: PPUSH
53263: EMPTY
53264: PPUSH
53265: NOP4
53269: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
53270: NOP4
53274: PUSH
53275: NOP4
53279: PPUSH
53280: NOP4
53284: PPUSH
53285: EMPTY
53286: PPUSH
53287: NOP4
53291: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
53292: NOP4
53296: PUSH
53297: NOP4
53301: PPUSH
53302: NOP4
53306: PPUSH
53307: EMPTY
53308: PPUSH
53309: NOP4
53313: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
53314: NOP4
53318: PUSH
53319: NOP4
53323: PPUSH
53324: NOP4
53328: PPUSH
53329: EMPTY
53330: PPUSH
53331: NOP4
53335: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
53336: NOP4
53340: PUSH
53341: NOP4
53345: PPUSH
53346: NOP4
53350: PPUSH
53351: EMPTY
53352: PPUSH
53353: NOP4
53357: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
53358: NOP4
53362: PUSH
53363: NOP4
53367: PPUSH
53368: NOP4
53372: PPUSH
53373: EMPTY
53374: PPUSH
53375: NOP4
53379: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
53380: NOP4
53384: PUSH
53385: NOP4
53389: PPUSH
53390: NOP4
53394: PPUSH
53395: EMPTY
53396: PPUSH
53397: NOP4
53401: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
53402: NOP4
53406: PUSH
53407: NOP4
53411: PPUSH
53412: NOP4
53416: PPUSH
53417: LD_INT 0
53419: PPUSH
53420: NOP4
53424: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
53425: NOP4
53429: PUSH
53430: NOP4
53434: PPUSH
53435: NOP4
53439: PPUSH
53440: EMPTY
53441: PPUSH
53442: NOP4
53446: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
53447: NOP4
53451: PUSH
53452: NOP4
53456: PPUSH
53457: NOP4
53461: PPUSH
53462: EMPTY
53463: PPUSH
53464: NOP4
53468: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
53469: NOP4
53473: PUSH
53474: NOP4
53478: PPUSH
53479: NOP4
53483: PPUSH
53484: EMPTY
53485: PPUSH
53486: NOP4
53490: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
53491: NOP4
53495: PUSH
53496: NOP4
53500: PPUSH
53501: NOP4
53505: PPUSH
53506: EMPTY
53507: PPUSH
53508: NOP4
53512: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
53513: NOP4
53517: PUSH
53518: NOP4
53522: PPUSH
53523: NOP4
53527: PPUSH
53528: EMPTY
53529: PPUSH
53530: NOP4
53534: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
53535: NOP4
53539: PUSH
53540: NOP4
53544: PPUSH
53545: NOP4
53549: PPUSH
53550: EMPTY
53551: PPUSH
53552: NOP4
53556: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
53557: NOP4
53561: PUSH
53562: NOP4
53566: PPUSH
53567: NOP4
53571: PPUSH
53572: EMPTY
53573: PPUSH
53574: NOP4
53578: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
53579: NOP4
53583: PUSH
53584: NOP4
53588: PPUSH
53589: NOP4
53593: PPUSH
53594: EMPTY
53595: PPUSH
53596: NOP4
53600: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
53601: NOP4
53605: PUSH
53606: NOP4
53610: PPUSH
53611: NOP4
53615: PPUSH
53616: EMPTY
53617: PPUSH
53618: NOP4
53622: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
53623: NOP4
53627: PUSH
53628: NOP4
53632: PPUSH
53633: NOP4
53637: PPUSH
53638: EMPTY
53639: PPUSH
53640: NOP4
53644: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
53645: NOP4
53649: PUSH
53650: NOP4
53654: PPUSH
53655: NOP4
53659: PPUSH
53660: EMPTY
53661: PPUSH
53662: NOP4
53666: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
53667: NOP4
53671: PUSH
53672: NOP4
53676: PPUSH
53677: NOP4
53681: PPUSH
53682: EMPTY
53683: PPUSH
53684: NOP4
53688: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
53689: NOP4
53693: PUSH
53694: NOP4
53698: PPUSH
53699: NOP4
53703: PPUSH
53704: EMPTY
53705: PPUSH
53706: NOP4
53710: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
53711: NOP4
53715: PUSH
53716: NOP4
53720: PPUSH
53721: NOP4
53725: PPUSH
53726: EMPTY
53727: PPUSH
53728: NOP4
53732: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
53733: NOP4
53737: PUSH
53738: NOP4
53742: PPUSH
53743: NOP4
53747: PPUSH
53748: EMPTY
53749: PPUSH
53750: NOP4
53754: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
53755: NOP4
53759: PUSH
53760: NOP4
53764: PPUSH
53765: NOP4
53769: PPUSH
53770: EMPTY
53771: PPUSH
53772: NOP4
53776: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
53777: NOP4
53781: PUSH
53782: NOP4
53786: PPUSH
53787: NOP4
53791: PPUSH
53792: EMPTY
53793: PPUSH
53794: NOP4
53798: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
53799: NOP4
53803: PUSH
53804: NOP4
53808: PPUSH
53809: NOP4
53813: PPUSH
53814: EMPTY
53815: PPUSH
53816: NOP4
53820: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
53821: NOP4
53825: PUSH
53826: NOP4
53830: PPUSH
53831: NOP4
53835: PPUSH
53836: EMPTY
53837: PPUSH
53838: NOP4
53842: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
53843: NOP4
53847: PUSH
53848: NOP4
53852: PPUSH
53853: NOP4
53857: PPUSH
53858: EMPTY
53859: PPUSH
53860: NOP4
53864: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
53865: NOP4
53869: PUSH
53870: NOP4
53874: PPUSH
53875: NOP4
53879: PPUSH
53880: EMPTY
53881: PPUSH
53882: NOP4
53886: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
53887: NOP4
53891: PUSH
53892: NOP4
53896: PPUSH
53897: NOP4
53901: PPUSH
53902: EMPTY
53903: PPUSH
53904: NOP4
53908: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
53909: NOP4
53913: PUSH
53914: NOP4
53918: PPUSH
53919: NOP4
53923: PPUSH
53924: EMPTY
53925: PPUSH
53926: NOP4
53930: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
53931: NOP4
53935: PUSH
53936: NOP4
53940: PPUSH
53941: NOP4
53945: PPUSH
53946: EMPTY
53947: PPUSH
53948: NOP4
53952: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
53953: NOP4
53957: PUSH
53958: NOP4
53962: PPUSH
53963: NOP4
53967: PPUSH
53968: EMPTY
53969: PPUSH
53970: NOP4
53974: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
53975: NOP4
53979: PUSH
53980: NOP4
53984: PPUSH
53985: NOP4
53989: PPUSH
53990: EMPTY
53991: PPUSH
53992: NOP4
53996: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
53997: NOP4
54001: PUSH
54002: NOP4
54006: PPUSH
54007: NOP4
54011: PPUSH
54012: EMPTY
54013: PPUSH
54014: NOP4
54018: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
54019: NOP4
54023: PUSH
54024: NOP4
54028: PPUSH
54029: NOP4
54033: PPUSH
54034: EMPTY
54035: PPUSH
54036: NOP4
54040: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
54041: NOP4
54045: PUSH
54046: NOP4
54050: PPUSH
54051: NOP4
54055: PPUSH
54056: LD_INT 0
54058: PPUSH
54059: NOP4
54063: ST_TO_ADDR
// end ;
54064: LD_VAR 0 2
54068: RET
// export function MC_Add ( side , units ) ; var base ; begin
54069: LD_INT 0
54071: PPUSH
54072: PPUSH
// base := mc_bases + 1 ;
54073: NOP4
54077: PUSH
54078: NOP4
54082: PUSH
54083: LD_INT 1
54085: PLUS
54086: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
54087: NOP4
54091: PUSH
54092: NOP4
54096: PPUSH
54097: NOP4
54101: PPUSH
54102: NOP4
54106: PPUSH
54107: NOP4
54111: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
54112: NOP4
54116: PUSH
54117: NOP4
54121: PPUSH
54122: NOP4
54126: PPUSH
54127: NOP4
54131: PPUSH
54132: NOP4
54136: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
54137: NOP4
54141: PUSH
54142: NOP4
54146: PPUSH
54147: NOP4
54151: PPUSH
54152: EMPTY
54153: PPUSH
54154: NOP4
54158: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
54159: NOP4
54163: PUSH
54164: NOP4
54168: PPUSH
54169: NOP4
54173: PPUSH
54174: EMPTY
54175: PPUSH
54176: NOP4
54180: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
54181: NOP4
54185: PUSH
54186: NOP4
54190: PPUSH
54191: NOP4
54195: PPUSH
54196: EMPTY
54197: PPUSH
54198: NOP4
54202: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
54203: NOP4
54207: PUSH
54208: NOP4
54212: PPUSH
54213: NOP4
54217: PPUSH
54218: EMPTY
54219: PPUSH
54220: NOP4
54224: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
54225: NOP4
54229: PUSH
54230: NOP4
54234: PPUSH
54235: NOP4
54239: PPUSH
54240: EMPTY
54241: PPUSH
54242: NOP4
54246: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
54247: NOP4
54251: PUSH
54252: NOP4
54256: PPUSH
54257: NOP4
54261: PPUSH
54262: EMPTY
54263: PPUSH
54264: NOP4
54268: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
54269: NOP4
54273: PUSH
54274: NOP4
54278: PPUSH
54279: NOP4
54283: PPUSH
54284: EMPTY
54285: PPUSH
54286: NOP4
54290: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
54291: NOP4
54295: PUSH
54296: NOP4
54300: PPUSH
54301: NOP4
54305: PPUSH
54306: EMPTY
54307: PPUSH
54308: NOP4
54312: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
54313: NOP4
54317: PUSH
54318: NOP4
54322: PPUSH
54323: NOP4
54327: PPUSH
54328: EMPTY
54329: PPUSH
54330: NOP4
54334: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
54335: NOP4
54339: PUSH
54340: NOP4
54344: PPUSH
54345: NOP4
54349: PPUSH
54350: EMPTY
54351: PPUSH
54352: NOP4
54356: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
54357: NOP4
54361: PUSH
54362: NOP4
54366: PPUSH
54367: NOP4
54371: PPUSH
54372: LD_INT 0
54374: PPUSH
54375: NOP4
54379: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
54380: NOP4
54384: PUSH
54385: NOP4
54389: PPUSH
54390: NOP4
54394: PPUSH
54395: EMPTY
54396: PPUSH
54397: NOP4
54401: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
54402: NOP4
54406: PUSH
54407: NOP4
54411: PPUSH
54412: NOP4
54416: PPUSH
54417: EMPTY
54418: PPUSH
54419: NOP4
54423: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
54424: NOP4
54428: PUSH
54429: NOP4
54433: PPUSH
54434: NOP4
54438: PPUSH
54439: EMPTY
54440: PPUSH
54441: NOP4
54445: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
54446: NOP4
54450: PUSH
54451: NOP4
54455: PPUSH
54456: NOP4
54460: PPUSH
54461: EMPTY
54462: PPUSH
54463: NOP4
54467: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
54468: NOP4
54472: PUSH
54473: NOP4
54477: PPUSH
54478: NOP4
54482: PPUSH
54483: EMPTY
54484: PPUSH
54485: NOP4
54489: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
54490: NOP4
54494: PUSH
54495: NOP4
54499: PPUSH
54500: NOP4
54504: PPUSH
54505: EMPTY
54506: PPUSH
54507: NOP4
54511: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
54512: NOP4
54516: PUSH
54517: NOP4
54521: PPUSH
54522: NOP4
54526: PPUSH
54527: EMPTY
54528: PPUSH
54529: NOP4
54533: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
54534: NOP4
54538: PUSH
54539: NOP4
54543: PPUSH
54544: NOP4
54548: PPUSH
54549: EMPTY
54550: PPUSH
54551: NOP4
54555: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
54556: NOP4
54560: PUSH
54561: NOP4
54565: PPUSH
54566: NOP4
54570: PPUSH
54571: EMPTY
54572: PPUSH
54573: NOP4
54577: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
54578: NOP4
54582: PUSH
54583: NOP4
54587: PPUSH
54588: NOP4
54592: PPUSH
54593: EMPTY
54594: PPUSH
54595: NOP4
54599: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
54600: NOP4
54604: PUSH
54605: NOP4
54609: PPUSH
54610: NOP4
54614: PPUSH
54615: EMPTY
54616: PPUSH
54617: NOP4
54621: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
54622: NOP4
54626: PUSH
54627: NOP4
54631: PPUSH
54632: NOP4
54636: PPUSH
54637: EMPTY
54638: PPUSH
54639: NOP4
54643: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
54644: NOP4
54648: PUSH
54649: NOP4
54653: PPUSH
54654: NOP4
54658: PPUSH
54659: EMPTY
54660: PPUSH
54661: NOP4
54665: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
54666: NOP4
54670: PUSH
54671: NOP4
54675: PPUSH
54676: NOP4
54680: PPUSH
54681: EMPTY
54682: PPUSH
54683: NOP4
54687: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
54688: NOP4
54692: PUSH
54693: NOP4
54697: PPUSH
54698: NOP4
54702: PPUSH
54703: EMPTY
54704: PPUSH
54705: NOP4
54709: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
54710: NOP4
54714: PUSH
54715: NOP4
54719: PPUSH
54720: NOP4
54724: PPUSH
54725: EMPTY
54726: PPUSH
54727: NOP4
54731: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
54732: NOP4
54736: PUSH
54737: NOP4
54741: PPUSH
54742: NOP4
54746: PPUSH
54747: EMPTY
54748: PPUSH
54749: NOP4
54753: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
54754: NOP4
54758: PUSH
54759: NOP4
54763: PPUSH
54764: NOP4
54768: PPUSH
54769: EMPTY
54770: PPUSH
54771: NOP4
54775: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
54776: NOP4
54780: PUSH
54781: NOP4
54785: PPUSH
54786: NOP4
54790: PPUSH
54791: EMPTY
54792: PPUSH
54793: NOP4
54797: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
54798: NOP4
54802: PUSH
54803: NOP4
54807: PPUSH
54808: NOP4
54812: PPUSH
54813: EMPTY
54814: PPUSH
54815: NOP4
54819: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
54820: NOP4
54824: PUSH
54825: NOP4
54829: PPUSH
54830: NOP4
54834: PPUSH
54835: EMPTY
54836: PPUSH
54837: NOP4
54841: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
54842: NOP4
54846: PUSH
54847: NOP4
54851: PPUSH
54852: NOP4
54856: PPUSH
54857: EMPTY
54858: PPUSH
54859: NOP4
54863: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
54864: NOP4
54868: PUSH
54869: NOP4
54873: PPUSH
54874: NOP4
54878: PPUSH
54879: EMPTY
54880: PPUSH
54881: NOP4
54885: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
54886: NOP4
54890: PUSH
54891: NOP4
54895: PPUSH
54896: NOP4
54900: PPUSH
54901: EMPTY
54902: PPUSH
54903: NOP4
54907: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
54908: NOP4
54912: PUSH
54913: NOP4
54917: PPUSH
54918: NOP4
54922: PPUSH
54923: EMPTY
54924: PPUSH
54925: NOP4
54929: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
54930: NOP4
54934: PUSH
54935: NOP4
54939: PPUSH
54940: NOP4
54944: PPUSH
54945: EMPTY
54946: PPUSH
54947: NOP4
54951: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
54952: NOP4
54956: PUSH
54957: NOP4
54961: PPUSH
54962: NOP4
54966: PPUSH
54967: EMPTY
54968: PPUSH
54969: NOP4
54973: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
54974: NOP4
54978: PUSH
54979: NOP4
54983: PPUSH
54984: NOP4
54988: PPUSH
54989: EMPTY
54990: PPUSH
54991: NOP4
54995: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
54996: NOP4
55000: PUSH
55001: NOP4
55005: PPUSH
55006: NOP4
55010: PPUSH
55011: LD_INT 0
55013: PPUSH
55014: NOP4
55018: ST_TO_ADDR
// result := base ;
55019: NOP4
55023: PUSH
55024: NOP4
55028: ST_TO_ADDR
// end ;
55029: LD_VAR 0 3
55033: RET
// export function MC_Start ( ) ; var i ; begin
55034: LD_INT 0
55036: PPUSH
55037: PPUSH
// for i = 1 to mc_bases do
55038: NOP4
55042: PUSH
55043: DOUBLE
55044: LD_INT 1
55046: DEC
55047: ST_TO_ADDR
55048: NOP4
55052: PUSH
55053: FOR_TO
55054: IFFALSE 56131
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
55056: NOP4
55060: PUSH
55061: NOP4
55065: PPUSH
55066: NOP4
55070: PPUSH
55071: NOP4
55075: PUSH
55076: NOP4
55080: ARRAY
55081: PUSH
55082: LD_INT 0
55084: DIFF
55085: PPUSH
55086: NOP4
55090: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
55091: NOP4
55095: PUSH
55096: NOP4
55100: PPUSH
55101: NOP4
55105: PPUSH
55106: EMPTY
55107: PPUSH
55108: NOP4
55112: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
55113: NOP4
55117: PUSH
55118: NOP4
55122: PPUSH
55123: NOP4
55127: PPUSH
55128: EMPTY
55129: PPUSH
55130: NOP4
55134: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
55135: NOP4
55139: PUSH
55140: NOP4
55144: PPUSH
55145: NOP4
55149: PPUSH
55150: EMPTY
55151: PPUSH
55152: NOP4
55156: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
55157: NOP4
55161: PUSH
55162: NOP4
55166: PPUSH
55167: NOP4
55171: PPUSH
55172: EMPTY
55173: PUSH
55174: EMPTY
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PPUSH
55180: NOP4
55184: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
55185: NOP4
55189: PUSH
55190: NOP4
55194: PPUSH
55195: NOP4
55199: PPUSH
55200: EMPTY
55201: PPUSH
55202: NOP4
55206: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
55207: NOP4
55211: PUSH
55212: NOP4
55216: PPUSH
55217: NOP4
55221: PPUSH
55222: EMPTY
55223: PPUSH
55224: NOP4
55228: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
55229: NOP4
55233: PUSH
55234: NOP4
55238: PPUSH
55239: NOP4
55243: PPUSH
55244: EMPTY
55245: PPUSH
55246: NOP4
55250: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
55251: NOP4
55255: PUSH
55256: NOP4
55260: PPUSH
55261: NOP4
55265: PPUSH
55266: EMPTY
55267: PPUSH
55268: NOP4
55272: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
55273: NOP4
55277: PUSH
55278: NOP4
55282: PPUSH
55283: NOP4
55287: PPUSH
55288: NOP4
55292: PUSH
55293: NOP4
55297: ARRAY
55298: PPUSH
55299: LD_INT 2
55301: PUSH
55302: LD_INT 30
55304: PUSH
55305: LD_INT 32
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 30
55314: PUSH
55315: LD_INT 33
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: PPUSH
55327: NOP4
55331: PPUSH
55332: NOP4
55336: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
55337: NOP4
55341: PUSH
55342: NOP4
55346: PPUSH
55347: NOP4
55351: PPUSH
55352: NOP4
55356: PUSH
55357: NOP4
55361: ARRAY
55362: PPUSH
55363: LD_INT 2
55365: PUSH
55366: LD_INT 30
55368: PUSH
55369: LD_INT 32
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 30
55378: PUSH
55379: LD_INT 31
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 58
55393: PUSH
55394: EMPTY
55395: LIST
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PPUSH
55401: NOP4
55405: PPUSH
55406: NOP4
55410: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
55411: NOP4
55415: PUSH
55416: NOP4
55420: PPUSH
55421: NOP4
55425: PPUSH
55426: EMPTY
55427: PPUSH
55428: NOP4
55432: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
55433: NOP4
55437: PUSH
55438: NOP4
55442: PPUSH
55443: NOP4
55447: PPUSH
55448: EMPTY
55449: PPUSH
55450: NOP4
55454: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
55455: NOP4
55459: PUSH
55460: NOP4
55464: PPUSH
55465: NOP4
55469: PPUSH
55470: EMPTY
55471: PPUSH
55472: NOP4
55476: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
55477: NOP4
55481: PUSH
55482: NOP4
55486: PPUSH
55487: NOP4
55491: PPUSH
55492: EMPTY
55493: PPUSH
55494: NOP4
55498: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
55499: NOP4
55503: PUSH
55504: NOP4
55508: PPUSH
55509: NOP4
55513: PPUSH
55514: EMPTY
55515: PPUSH
55516: NOP4
55520: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
55521: NOP4
55525: PUSH
55526: NOP4
55530: PPUSH
55531: NOP4
55535: PPUSH
55536: EMPTY
55537: PPUSH
55538: NOP4
55542: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
55543: NOP4
55547: PUSH
55548: NOP4
55552: PPUSH
55553: NOP4
55557: PPUSH
55558: EMPTY
55559: PPUSH
55560: NOP4
55564: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
55565: NOP4
55569: PUSH
55570: NOP4
55574: PPUSH
55575: NOP4
55579: PPUSH
55580: EMPTY
55581: PPUSH
55582: NOP4
55586: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
55587: NOP4
55591: PUSH
55592: NOP4
55596: PPUSH
55597: NOP4
55601: PPUSH
55602: EMPTY
55603: PPUSH
55604: NOP4
55608: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
55609: NOP4
55613: PUSH
55614: NOP4
55618: PPUSH
55619: NOP4
55623: PPUSH
55624: EMPTY
55625: PPUSH
55626: NOP4
55630: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
55631: NOP4
55635: PUSH
55636: NOP4
55640: PPUSH
55641: NOP4
55645: PPUSH
55646: EMPTY
55647: PPUSH
55648: NOP4
55652: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
55653: NOP4
55657: PUSH
55658: NOP4
55662: PPUSH
55663: NOP4
55667: PPUSH
55668: LD_INT 0
55670: PPUSH
55671: NOP4
55675: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
55676: NOP4
55680: PUSH
55681: NOP4
55685: PPUSH
55686: NOP4
55690: PPUSH
55691: LD_INT 0
55693: PPUSH
55694: NOP4
55698: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
55699: NOP4
55703: PUSH
55704: NOP4
55708: PPUSH
55709: NOP4
55713: PPUSH
55714: EMPTY
55715: PPUSH
55716: NOP4
55720: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
55721: NOP4
55725: PUSH
55726: NOP4
55730: PPUSH
55731: NOP4
55735: PPUSH
55736: LD_INT 0
55738: PPUSH
55739: NOP4
55743: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
55744: NOP4
55748: PUSH
55749: NOP4
55753: PPUSH
55754: NOP4
55758: PPUSH
55759: EMPTY
55760: PPUSH
55761: NOP4
55765: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
55766: NOP4
55770: PUSH
55771: NOP4
55775: PPUSH
55776: NOP4
55780: PPUSH
55781: LD_INT 0
55783: PPUSH
55784: NOP4
55788: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
55789: NOP4
55793: PUSH
55794: NOP4
55798: PPUSH
55799: NOP4
55803: PPUSH
55804: EMPTY
55805: PPUSH
55806: NOP4
55810: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
55811: NOP4
55815: PUSH
55816: NOP4
55820: PPUSH
55821: NOP4
55825: PPUSH
55826: EMPTY
55827: PPUSH
55828: NOP4
55832: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
55833: NOP4
55837: PUSH
55838: NOP4
55842: PPUSH
55843: NOP4
55847: PPUSH
55848: EMPTY
55849: PPUSH
55850: NOP4
55854: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
55855: NOP4
55859: PUSH
55860: NOP4
55864: PPUSH
55865: NOP4
55869: PPUSH
55870: NOP4
55874: PUSH
55875: NOP4
55879: ARRAY
55880: PPUSH
55881: LD_INT 2
55883: PUSH
55884: LD_INT 30
55886: PUSH
55887: LD_INT 6
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 30
55896: PUSH
55897: LD_INT 7
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 30
55906: PUSH
55907: LD_INT 8
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: PPUSH
55920: NOP4
55924: PPUSH
55925: NOP4
55929: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
55930: NOP4
55934: PUSH
55935: NOP4
55939: PPUSH
55940: NOP4
55944: PPUSH
55945: EMPTY
55946: PPUSH
55947: NOP4
55951: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
55952: NOP4
55956: PUSH
55957: NOP4
55961: PPUSH
55962: NOP4
55966: PPUSH
55967: EMPTY
55968: PPUSH
55969: NOP4
55973: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
55974: NOP4
55978: PUSH
55979: NOP4
55983: PPUSH
55984: NOP4
55988: PPUSH
55989: EMPTY
55990: PPUSH
55991: NOP4
55995: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
55996: NOP4
56000: PUSH
56001: NOP4
56005: PPUSH
56006: NOP4
56010: PPUSH
56011: EMPTY
56012: PPUSH
56013: NOP4
56017: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
56018: NOP4
56022: PUSH
56023: NOP4
56027: PPUSH
56028: NOP4
56032: PPUSH
56033: EMPTY
56034: PPUSH
56035: NOP4
56039: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
56040: NOP4
56044: PUSH
56045: NOP4
56049: PPUSH
56050: NOP4
56054: PPUSH
56055: EMPTY
56056: PPUSH
56057: NOP4
56061: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
56062: NOP4
56066: PUSH
56067: NOP4
56071: PPUSH
56072: NOP4
56076: PPUSH
56077: EMPTY
56078: PPUSH
56079: NOP4
56083: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
56084: NOP4
56088: PUSH
56089: NOP4
56093: PPUSH
56094: NOP4
56098: PPUSH
56099: EMPTY
56100: PPUSH
56101: NOP4
56105: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
56106: NOP4
56110: PUSH
56111: NOP4
56115: PPUSH
56116: NOP4
56120: PPUSH
56121: LD_INT 0
56123: PPUSH
56124: NOP4
56128: ST_TO_ADDR
// end ;
56129: GO 55053
56131: POP
56132: POP
// MC_InitSides ( ) ;
56133: NOP4
// MC_InitResearch ( ) ;
56137: NOP4
// CustomInitMacro ( ) ;
56141: NOP4
// skirmish := true ;
56145: NOP4
56149: PUSH
56150: LD_INT 1
56152: ST_TO_ADDR
// end ;
56153: LD_VAR 0 1
56157: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
56158: LD_INT 0
56160: PPUSH
56161: PPUSH
56162: PPUSH
56163: PPUSH
56164: PPUSH
56165: PPUSH
// if not mc_bases then
56166: NOP4
56170: NOT
56171: IFFALSE 56175
// exit ;
56173: GO 56414
// for i = 1 to 8 do
56175: NOP4
56179: PUSH
56180: DOUBLE
56181: LD_INT 1
56183: DEC
56184: ST_TO_ADDR
56185: LD_INT 8
56187: PUSH
56188: FOR_TO
56189: IFFALSE 56215
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
56191: NOP4
56195: PUSH
56196: NOP4
56200: PPUSH
56201: NOP4
56205: PPUSH
56206: EMPTY
56207: PPUSH
56208: NOP4
56212: ST_TO_ADDR
56213: GO 56188
56215: POP
56216: POP
// tmp := [ ] ;
56217: NOP4
56221: PUSH
56222: EMPTY
56223: ST_TO_ADDR
// for i = 1 to mc_sides do
56224: NOP4
56228: PUSH
56229: DOUBLE
56230: LD_INT 1
56232: DEC
56233: ST_TO_ADDR
56234: NOP4
56238: PUSH
56239: FOR_TO
56240: IFFALSE 56298
// if not mc_sides [ i ] in tmp then
56242: NOP4
56246: PUSH
56247: NOP4
56251: ARRAY
56252: PUSH
56253: NOP4
56257: IN
56258: NOT
56259: IFFALSE 56296
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
56261: NOP4
56265: PUSH
56266: NOP4
56270: PPUSH
56271: NOP4
56275: PUSH
56276: LD_INT 1
56278: PLUS
56279: PPUSH
56280: NOP4
56284: PUSH
56285: NOP4
56289: ARRAY
56290: PPUSH
56291: NOP4
56295: ST_TO_ADDR
56296: GO 56239
56298: POP
56299: POP
// if not tmp then
56300: NOP4
56304: NOT
56305: IFFALSE 56309
// exit ;
56307: GO 56414
// for j in tmp do
56309: NOP4
56313: PUSH
56314: NOP4
56318: PUSH
56319: FOR_IN
56320: IFFALSE 56412
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
56322: NOP4
56326: PUSH
56327: LD_INT 22
56329: PUSH
56330: NOP4
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PPUSH
56339: NOP4
56343: ST_TO_ADDR
// if not un then
56344: NOP4
56348: NOT
56349: IFFALSE 56353
// continue ;
56351: GO 56319
// nation := GetNation ( un [ 1 ] ) ;
56353: NOP4
56357: PUSH
56358: NOP4
56362: PUSH
56363: LD_INT 1
56365: ARRAY
56366: PPUSH
56367: NOP4
56371: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
56372: NOP4
56376: PUSH
56377: NOP4
56381: PPUSH
56382: NOP4
56386: PPUSH
56387: NOP4
56391: PPUSH
56392: NOP4
56396: PPUSH
56397: LD_INT 1
56399: PPUSH
56400: NOP4
56404: PPUSH
56405: NOP4
56409: ST_TO_ADDR
// end ;
56410: GO 56319
56412: POP
56413: POP
// end ;
56414: LD_VAR 0 1
56418: RET
// export function MC_InitSides ( ) ; var i ; begin
56419: LD_INT 0
56421: PPUSH
56422: PPUSH
// if not mc_bases then
56423: NOP4
56427: NOT
56428: IFFALSE 56432
// exit ;
56430: GO 56506
// for i = 1 to mc_bases do
56432: NOP4
56436: PUSH
56437: DOUBLE
56438: LD_INT 1
56440: DEC
56441: ST_TO_ADDR
56442: NOP4
56446: PUSH
56447: FOR_TO
56448: IFFALSE 56504
// if mc_bases [ i ] then
56450: NOP4
56454: PUSH
56455: NOP4
56459: ARRAY
56460: IFFALSE 56502
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
56462: NOP4
56466: PUSH
56467: NOP4
56471: PPUSH
56472: NOP4
56476: PPUSH
56477: NOP4
56481: PUSH
56482: NOP4
56486: ARRAY
56487: PUSH
56488: LD_INT 1
56490: ARRAY
56491: PPUSH
56492: NOP4
56496: PPUSH
56497: NOP4
56501: ST_TO_ADDR
56502: GO 56447
56504: POP
56505: POP
// end ;
56506: LD_VAR 0 1
56510: RET
// every 0 0$01 trigger skirmish do
56511: NOP4
56515: IFFALSE 56669
56517: GO 56519
56519: DISABLE
// begin enable ;
56520: ENABLE
// MC_CheckBuildings ( ) ;
56521: NOP4
// MC_CheckPeopleLife ( ) ;
56525: NOP4
// RaiseSailEvent ( 100 ) ;
56529: LD_INT 100
56531: PPUSH
56532: NOP4
// RaiseSailEvent ( 103 ) ;
56536: LD_INT 103
56538: PPUSH
56539: NOP4
// RaiseSailEvent ( 104 ) ;
56543: LD_INT 104
56545: PPUSH
56546: NOP4
// RaiseSailEvent ( 105 ) ;
56550: LD_INT 105
56552: PPUSH
56553: NOP4
// RaiseSailEvent ( 106 ) ;
56557: LD_INT 106
56559: PPUSH
56560: NOP4
// RaiseSailEvent ( 107 ) ;
56564: LD_INT 107
56566: PPUSH
56567: NOP4
// RaiseSailEvent ( 108 ) ;
56571: LD_INT 108
56573: PPUSH
56574: NOP4
// RaiseSailEvent ( 109 ) ;
56578: LD_INT 109
56580: PPUSH
56581: NOP4
// RaiseSailEvent ( 110 ) ;
56585: LD_INT 110
56587: PPUSH
56588: NOP4
// RaiseSailEvent ( 111 ) ;
56592: LD_INT 111
56594: PPUSH
56595: NOP4
// RaiseSailEvent ( 112 ) ;
56599: LD_INT 112
56601: PPUSH
56602: NOP4
// RaiseSailEvent ( 113 ) ;
56606: LD_INT 113
56608: PPUSH
56609: NOP4
// RaiseSailEvent ( 120 ) ;
56613: LD_INT 120
56615: PPUSH
56616: NOP4
// RaiseSailEvent ( 121 ) ;
56620: LD_INT 121
56622: PPUSH
56623: NOP4
// RaiseSailEvent ( 122 ) ;
56627: LD_INT 122
56629: PPUSH
56630: NOP4
// RaiseSailEvent ( 123 ) ;
56634: LD_INT 123
56636: PPUSH
56637: NOP4
// RaiseSailEvent ( 124 ) ;
56641: LD_INT 124
56643: PPUSH
56644: NOP4
// RaiseSailEvent ( 125 ) ;
56648: LD_INT 125
56650: PPUSH
56651: NOP4
// RaiseSailEvent ( 126 ) ;
56655: LD_INT 126
56657: PPUSH
56658: NOP4
// RaiseSailEvent ( 200 ) ;
56662: LD_INT 200
56664: PPUSH
56665: NOP4
// end ;
56669: END
// on SailEvent ( event ) do begin if event < 100 then
56670: NOP4
56674: PUSH
56675: LD_INT 100
56677: LESS
56678: IFFALSE 56689
// CustomEvent ( event ) ;
56680: NOP4
56684: PPUSH
56685: NOP4
// if event = 100 then
56689: NOP4
56693: PUSH
56694: LD_INT 100
56696: EQUAL
56697: IFFALSE 56703
// MC_ClassManager ( ) ;
56699: NOP4
// if event = 101 then
56703: NOP4
56707: PUSH
56708: LD_INT 101
56710: EQUAL
56711: IFFALSE 56717
// MC_RepairBuildings ( ) ;
56713: NOP4
// if event = 102 then
56717: NOP4
56721: PUSH
56722: LD_INT 102
56724: EQUAL
56725: IFFALSE 56731
// MC_Heal ( ) ;
56727: NOP4
// if event = 103 then
56731: NOP4
56735: PUSH
56736: LD_INT 103
56738: EQUAL
56739: IFFALSE 56745
// MC_Build ( ) ;
56741: NOP4
// if event = 104 then
56745: NOP4
56749: PUSH
56750: LD_INT 104
56752: EQUAL
56753: IFFALSE 56759
// MC_TurretWeapon ( ) ;
56755: NOP4
// if event = 105 then
56759: NOP4
56763: PUSH
56764: LD_INT 105
56766: EQUAL
56767: IFFALSE 56773
// MC_BuildUpgrade ( ) ;
56769: NOP4
// if event = 106 then
56773: NOP4
56777: PUSH
56778: LD_INT 106
56780: EQUAL
56781: IFFALSE 56787
// MC_PlantMines ( ) ;
56783: NOP4
// if event = 107 then
56787: NOP4
56791: PUSH
56792: LD_INT 107
56794: EQUAL
56795: IFFALSE 56801
// MC_CollectCrates ( ) ;
56797: NOP4
// if event = 108 then
56801: NOP4
56805: PUSH
56806: LD_INT 108
56808: EQUAL
56809: IFFALSE 56815
// MC_LinkRemoteControl ( ) ;
56811: NOP4
// if event = 109 then
56815: NOP4
56819: PUSH
56820: LD_INT 109
56822: EQUAL
56823: IFFALSE 56829
// MC_ProduceVehicle ( ) ;
56825: NOP4
// if event = 110 then
56829: NOP4
56833: PUSH
56834: LD_INT 110
56836: EQUAL
56837: IFFALSE 56843
// MC_SendAttack ( ) ;
56839: NOP4
// if event = 111 then
56843: NOP4
56847: PUSH
56848: LD_INT 111
56850: EQUAL
56851: IFFALSE 56857
// MC_Defend ( ) ;
56853: NOP4
// if event = 112 then
56857: NOP4
56861: PUSH
56862: LD_INT 112
56864: EQUAL
56865: IFFALSE 56871
// MC_Research ( ) ;
56867: NOP4
// if event = 113 then
56871: NOP4
56875: PUSH
56876: LD_INT 113
56878: EQUAL
56879: IFFALSE 56885
// MC_MinesTrigger ( ) ;
56881: NOP4
// if event = 120 then
56885: NOP4
56889: PUSH
56890: LD_INT 120
56892: EQUAL
56893: IFFALSE 56899
// MC_RepairVehicle ( ) ;
56895: NOP4
// if event = 121 then
56899: NOP4
56903: PUSH
56904: LD_INT 121
56906: EQUAL
56907: IFFALSE 56913
// MC_TameApe ( ) ;
56909: NOP4
// if event = 122 then
56913: NOP4
56917: PUSH
56918: LD_INT 122
56920: EQUAL
56921: IFFALSE 56927
// MC_ChangeApeClass ( ) ;
56923: NOP4
// if event = 123 then
56927: NOP4
56931: PUSH
56932: LD_INT 123
56934: EQUAL
56935: IFFALSE 56941
// MC_Bazooka ( ) ;
56937: NOP4
// if event = 124 then
56941: NOP4
56945: PUSH
56946: LD_INT 124
56948: EQUAL
56949: IFFALSE 56955
// MC_TeleportExit ( ) ;
56951: NOP4
// if event = 125 then
56955: NOP4
56959: PUSH
56960: LD_INT 125
56962: EQUAL
56963: IFFALSE 56969
// MC_Deposits ( ) ;
56965: NOP4
// if event = 126 then
56969: NOP4
56973: PUSH
56974: LD_INT 126
56976: EQUAL
56977: IFFALSE 56983
// MC_RemoteDriver ( ) ;
56979: NOP4
// if event = 200 then
56983: NOP4
56987: PUSH
56988: LD_INT 200
56990: EQUAL
56991: IFFALSE 56997
// MC_Idle ( ) ;
56993: NOP4
// end ;
56997: PPOPN 1
56999: END
// export function MC_Reset ( base , tag ) ; var i ; begin
57000: LD_INT 0
57002: PPUSH
57003: PPUSH
// if not mc_bases [ base ] or not tag then
57004: NOP4
57008: PUSH
57009: NOP4
57013: ARRAY
57014: NOT
57015: PUSH
57016: NOP4
57020: NOT
57021: OR
57022: IFFALSE 57026
// exit ;
57024: GO 57090
// for i in mc_bases [ base ] union mc_ape [ base ] do
57026: NOP4
57030: PUSH
57031: NOP4
57035: PUSH
57036: NOP4
57040: ARRAY
57041: PUSH
57042: NOP4
57046: PUSH
57047: NOP4
57051: ARRAY
57052: UNION
57053: PUSH
57054: FOR_IN
57055: IFFALSE 57088
// if GetTag ( i ) = tag then
57057: NOP4
57061: PPUSH
57062: NOP4
57066: PUSH
57067: NOP4
57071: EQUAL
57072: IFFALSE 57086
// SetTag ( i , 0 ) ;
57074: NOP4
57078: PPUSH
57079: LD_INT 0
57081: PPUSH
57082: NOP4
57086: GO 57054
57088: POP
57089: POP
// end ;
57090: LD_VAR 0 3
57094: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
57095: LD_INT 0
57097: PPUSH
57098: PPUSH
57099: PPUSH
57100: PPUSH
57101: PPUSH
57102: PPUSH
57103: PPUSH
57104: PPUSH
// if not mc_bases then
57105: NOP4
57109: NOT
57110: IFFALSE 57114
// exit ;
57112: GO 57572
// for i = 1 to mc_bases do
57114: NOP4
57118: PUSH
57119: DOUBLE
57120: LD_INT 1
57122: DEC
57123: ST_TO_ADDR
57124: NOP4
57128: PUSH
57129: FOR_TO
57130: IFFALSE 57570
// begin tmp := MC_ClassCheckReq ( i ) ;
57132: NOP4
57136: PUSH
57137: NOP4
57141: PPUSH
57142: NOP4
57146: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
57147: NOP4
57151: PUSH
57152: NOP4
57156: PPUSH
57157: NOP4
57161: PPUSH
57162: NOP4
57166: PPUSH
57167: NOP4
57171: ST_TO_ADDR
// if not tmp then
57172: NOP4
57176: NOT
57177: IFFALSE 57181
// continue ;
57179: GO 57129
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
57181: NOP4
57185: PUSH
57186: NOP4
57190: PUSH
57191: NOP4
57195: ARRAY
57196: PPUSH
57197: LD_INT 2
57199: PUSH
57200: LD_INT 30
57202: PUSH
57203: LD_INT 4
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 30
57212: PUSH
57213: LD_INT 5
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: LIST
57224: PPUSH
57225: NOP4
57229: PUSH
57230: NOP4
57234: PUSH
57235: NOP4
57239: ARRAY
57240: PPUSH
57241: LD_INT 2
57243: PUSH
57244: LD_INT 30
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 30
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: LIST
57268: PPUSH
57269: NOP4
57273: PUSH
57274: NOP4
57278: PUSH
57279: NOP4
57283: ARRAY
57284: PPUSH
57285: LD_INT 30
57287: PUSH
57288: LD_INT 3
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PPUSH
57295: NOP4
57299: PUSH
57300: NOP4
57304: PUSH
57305: NOP4
57309: ARRAY
57310: PPUSH
57311: LD_INT 2
57313: PUSH
57314: LD_INT 30
57316: PUSH
57317: LD_INT 6
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 30
57326: PUSH
57327: LD_INT 7
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 30
57336: PUSH
57337: LD_INT 8
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: PPUSH
57350: NOP4
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: ST_TO_ADDR
// for j = 1 to 4 do
57361: NOP4
57365: PUSH
57366: DOUBLE
57367: LD_INT 1
57369: DEC
57370: ST_TO_ADDR
57371: LD_INT 4
57373: PUSH
57374: FOR_TO
57375: IFFALSE 57566
// begin if not tmp [ j ] then
57377: NOP4
57381: PUSH
57382: NOP4
57386: ARRAY
57387: NOT
57388: IFFALSE 57392
// continue ;
57390: GO 57374
// for p in tmp [ j ] do
57392: NOP4
57396: PUSH
57397: NOP4
57401: PUSH
57402: NOP4
57406: ARRAY
57407: PUSH
57408: FOR_IN
57409: IFFALSE 57562
// begin if not b [ j ] then
57411: NOP4
57415: PUSH
57416: NOP4
57420: ARRAY
57421: NOT
57422: IFFALSE 57426
// break ;
57424: GO 57562
// e := 0 ;
57426: NOP4
57430: PUSH
57431: LD_INT 0
57433: ST_TO_ADDR
// for k in b [ j ] do
57434: NOP4
57438: PUSH
57439: NOP4
57443: PUSH
57444: NOP4
57448: ARRAY
57449: PUSH
57450: FOR_IN
57451: IFFALSE 57478
// if IsNotFull ( k ) then
57453: NOP4
57457: PPUSH
57458: NOP4
57462: IFFALSE 57476
// begin e := k ;
57464: NOP4
57468: PUSH
57469: NOP4
57473: ST_TO_ADDR
// break ;
57474: GO 57478
// end ;
57476: GO 57450
57478: POP
57479: POP
// if e and not UnitGoingToBuilding ( p , e ) then
57480: NOP4
57484: PUSH
57485: NOP4
57489: PPUSH
57490: NOP4
57494: PPUSH
57495: NOP4
57499: NOT
57500: AND
57501: IFFALSE 57560
// begin if IsInUnit ( p ) then
57503: NOP4
57507: PPUSH
57508: NOP4
57512: IFFALSE 57523
// ComExitBuilding ( p ) ;
57514: NOP4
57518: PPUSH
57519: NOP4
// ComEnterUnit ( p , e ) ;
57523: NOP4
57527: PPUSH
57528: NOP4
57532: PPUSH
57533: NOP4
// AddComChangeProfession ( p , j ) ;
57537: NOP4
57541: PPUSH
57542: NOP4
57546: PPUSH
57547: NOP4
// AddComExitBuilding ( p ) ;
57551: NOP4
57555: PPUSH
57556: NOP4
// end ; end ;
57560: GO 57408
57562: POP
57563: POP
// end ;
57564: GO 57374
57566: POP
57567: POP
// end ;
57568: GO 57129
57570: POP
57571: POP
// end ;
57572: LD_VAR 0 1
57576: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
57577: LD_INT 0
57579: PPUSH
57580: PPUSH
57581: PPUSH
57582: PPUSH
57583: PPUSH
57584: PPUSH
57585: PPUSH
57586: PPUSH
57587: PPUSH
57588: PPUSH
57589: PPUSH
57590: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
57591: NOP4
57595: NOT
57596: PUSH
57597: NOP4
57601: PUSH
57602: NOP4
57606: ARRAY
57607: NOT
57608: OR
57609: PUSH
57610: NOP4
57614: PUSH
57615: NOP4
57619: ARRAY
57620: PPUSH
57621: LD_INT 2
57623: PUSH
57624: LD_INT 30
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 30
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: LIST
57648: PPUSH
57649: NOP4
57653: NOT
57654: OR
57655: IFFALSE 57659
// exit ;
57657: GO 61162
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
57659: NOP4
57663: PUSH
57664: NOP4
57668: PUSH
57669: NOP4
57673: ARRAY
57674: PPUSH
57675: LD_INT 2
57677: PUSH
57678: LD_INT 25
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 25
57690: PUSH
57691: LD_INT 2
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 25
57700: PUSH
57701: LD_INT 3
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 25
57710: PUSH
57711: LD_INT 4
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 25
57720: PUSH
57721: LD_INT 5
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 25
57730: PUSH
57731: LD_INT 8
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 25
57740: PUSH
57741: LD_INT 9
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: PPUSH
57758: NOP4
57762: ST_TO_ADDR
// if not tmp then
57763: NOP4
57767: NOT
57768: IFFALSE 57772
// exit ;
57770: GO 61162
// for i in tmp do
57772: NOP4
57776: PUSH
57777: NOP4
57781: PUSH
57782: FOR_IN
57783: IFFALSE 57814
// if GetTag ( i ) then
57785: NOP4
57789: PPUSH
57790: NOP4
57794: IFFALSE 57812
// tmp := tmp diff i ;
57796: NOP4
57800: PUSH
57801: NOP4
57805: PUSH
57806: NOP4
57810: DIFF
57811: ST_TO_ADDR
57812: GO 57782
57814: POP
57815: POP
// if not tmp then
57816: NOP4
57820: NOT
57821: IFFALSE 57825
// exit ;
57823: GO 61162
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
57825: NOP4
57829: PUSH
57830: NOP4
57834: PUSH
57835: NOP4
57839: ARRAY
57840: PPUSH
57841: LD_INT 2
57843: PUSH
57844: LD_INT 25
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 25
57856: PUSH
57857: LD_INT 5
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 25
57866: PUSH
57867: LD_INT 8
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 25
57876: PUSH
57877: LD_INT 9
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: PPUSH
57891: NOP4
57895: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
57896: NOP4
57900: PUSH
57901: NOP4
57905: PUSH
57906: NOP4
57910: ARRAY
57911: PPUSH
57912: LD_INT 25
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PPUSH
57922: NOP4
57926: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
57927: NOP4
57931: PUSH
57932: NOP4
57936: PUSH
57937: NOP4
57941: ARRAY
57942: PPUSH
57943: LD_INT 25
57945: PUSH
57946: LD_INT 3
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PPUSH
57953: NOP4
57957: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
57958: NOP4
57962: PUSH
57963: NOP4
57967: PUSH
57968: NOP4
57972: ARRAY
57973: PPUSH
57974: LD_INT 25
57976: PUSH
57977: LD_INT 4
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 24
57986: PUSH
57987: LD_INT 251
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PPUSH
57998: NOP4
58002: ST_TO_ADDR
// if mc_scan [ base ] then
58003: NOP4
58007: PUSH
58008: NOP4
58012: ARRAY
58013: IFFALSE 58474
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
58015: NOP4
58019: PUSH
58020: NOP4
58024: PPUSH
58025: NOP4
58029: PPUSH
58030: LD_INT 4
58032: PPUSH
58033: NOP4
58037: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
58038: NOP4
58042: PUSH
58043: NOP4
58047: PUSH
58048: NOP4
58052: ARRAY
58053: PPUSH
58054: LD_INT 2
58056: PUSH
58057: LD_INT 30
58059: PUSH
58060: LD_INT 4
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 30
58069: PUSH
58070: LD_INT 5
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: LIST
58081: PPUSH
58082: NOP4
58086: ST_TO_ADDR
// if not b then
58087: NOP4
58091: NOT
58092: IFFALSE 58096
// exit ;
58094: GO 61162
// p := [ ] ;
58096: NOP4
58100: PUSH
58101: EMPTY
58102: ST_TO_ADDR
// if sci >= 2 then
58103: NOP4
58107: PUSH
58108: LD_INT 2
58110: GREATEREQUAL
58111: IFFALSE 58142
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
58113: NOP4
58117: PUSH
58118: NOP4
58122: PUSH
58123: LD_INT 1
58125: ARRAY
58126: PUSH
58127: NOP4
58131: PUSH
58132: LD_INT 2
58134: ARRAY
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: ST_TO_ADDR
58140: GO 58203
// if sci = 1 then
58142: NOP4
58146: PUSH
58147: LD_INT 1
58149: EQUAL
58150: IFFALSE 58171
// sci := [ sci [ 1 ] ] else
58152: NOP4
58156: PUSH
58157: NOP4
58161: PUSH
58162: LD_INT 1
58164: ARRAY
58165: PUSH
58166: EMPTY
58167: LIST
58168: ST_TO_ADDR
58169: GO 58203
// if sci = 0 then
58171: NOP4
58175: PUSH
58176: LD_INT 0
58178: EQUAL
58179: IFFALSE 58203
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
58181: NOP4
58185: PUSH
58186: NOP4
58190: PPUSH
58191: LD_INT 4
58193: PPUSH
58194: NOP4
58198: PUSH
58199: LD_INT 1
58201: ARRAY
58202: ST_TO_ADDR
// if eng > 4 then
58203: NOP4
58207: PUSH
58208: LD_INT 4
58210: GREATER
58211: IFFALSE 58257
// for i = eng downto 4 do
58213: NOP4
58217: PUSH
58218: DOUBLE
58219: NOP4
58223: INC
58224: ST_TO_ADDR
58225: LD_INT 4
58227: PUSH
58228: FOR_DOWNTO
58229: IFFALSE 58255
// eng := eng diff eng [ i ] ;
58231: NOP4
58235: PUSH
58236: NOP4
58240: PUSH
58241: NOP4
58245: PUSH
58246: NOP4
58250: ARRAY
58251: DIFF
58252: ST_TO_ADDR
58253: GO 58228
58255: POP
58256: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
58257: NOP4
58261: PUSH
58262: NOP4
58266: PUSH
58267: NOP4
58271: PUSH
58272: NOP4
58276: UNION
58277: PUSH
58278: NOP4
58282: UNION
58283: PUSH
58284: NOP4
58288: UNION
58289: DIFF
58290: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
58291: NOP4
58295: PUSH
58296: NOP4
58300: PUSH
58301: NOP4
58305: ARRAY
58306: PPUSH
58307: LD_INT 2
58309: PUSH
58310: LD_INT 30
58312: PUSH
58313: LD_INT 32
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 30
58322: PUSH
58323: LD_INT 31
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: LIST
58334: PPUSH
58335: NOP4
58339: PUSH
58340: NOP4
58344: PUSH
58345: NOP4
58349: ARRAY
58350: PPUSH
58351: LD_INT 2
58353: PUSH
58354: LD_INT 30
58356: PUSH
58357: LD_INT 4
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 30
58366: PUSH
58367: LD_INT 5
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: LIST
58378: PPUSH
58379: NOP4
58383: PUSH
58384: LD_INT 6
58386: MUL
58387: PLUS
58388: ST_TO_ADDR
// if bcount < tmp then
58389: NOP4
58393: PUSH
58394: NOP4
58398: LESS
58399: IFFALSE 58445
// for i = tmp downto bcount do
58401: NOP4
58405: PUSH
58406: DOUBLE
58407: NOP4
58411: INC
58412: ST_TO_ADDR
58413: NOP4
58417: PUSH
58418: FOR_DOWNTO
58419: IFFALSE 58443
// tmp := Delete ( tmp , tmp ) ;
58421: NOP4
58425: PUSH
58426: NOP4
58430: PPUSH
58431: NOP4
58435: PPUSH
58436: NOP4
58440: ST_TO_ADDR
58441: GO 58418
58443: POP
58444: POP
// result := [ tmp , 0 , 0 , p ] ;
58445: NOP4
58449: PUSH
58450: NOP4
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: NOP4
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: ST_TO_ADDR
// exit ;
58472: GO 61162
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
58474: NOP4
58478: PUSH
58479: NOP4
58483: ARRAY
58484: PPUSH
58485: LD_INT 2
58487: PUSH
58488: LD_INT 30
58490: PUSH
58491: LD_INT 6
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 30
58500: PUSH
58501: LD_INT 7
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 30
58510: PUSH
58511: LD_INT 8
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: PPUSH
58524: NOP4
58528: NOT
58529: PUSH
58530: NOP4
58534: PUSH
58535: NOP4
58539: ARRAY
58540: PPUSH
58541: LD_INT 30
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PPUSH
58551: NOP4
58555: NOT
58556: AND
58557: IFFALSE 58629
// begin if eng = tmp then
58559: NOP4
58563: PUSH
58564: NOP4
58568: EQUAL
58569: IFFALSE 58573
// exit ;
58571: GO 61162
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
58573: NOP4
58577: PUSH
58578: NOP4
58582: PPUSH
58583: NOP4
58587: PPUSH
58588: LD_INT 1
58590: PPUSH
58591: NOP4
58595: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
58596: NOP4
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: NOP4
58608: PUSH
58609: NOP4
58613: DIFF
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: ST_TO_ADDR
// exit ;
58627: GO 61162
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
58629: NOP4
58633: PUSH
58634: NOP4
58638: PUSH
58639: NOP4
58643: ARRAY
58644: ARRAY
58645: PUSH
58646: NOP4
58650: PUSH
58651: NOP4
58655: ARRAY
58656: PPUSH
58657: LD_INT 2
58659: PUSH
58660: LD_INT 30
58662: PUSH
58663: LD_INT 6
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 30
58672: PUSH
58673: LD_INT 7
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 30
58682: PUSH
58683: LD_INT 8
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: PPUSH
58696: NOP4
58700: AND
58701: PUSH
58702: NOP4
58706: PUSH
58707: NOP4
58711: ARRAY
58712: PPUSH
58713: LD_INT 30
58715: PUSH
58716: LD_INT 3
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PPUSH
58723: NOP4
58727: NOT
58728: AND
58729: IFFALSE 58943
// begin if sci >= 6 then
58731: NOP4
58735: PUSH
58736: LD_INT 6
58738: GREATEREQUAL
58739: IFFALSE 58743
// exit ;
58741: GO 61162
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
58743: NOP4
58747: PUSH
58748: NOP4
58752: PPUSH
58753: NOP4
58757: PPUSH
58758: LD_INT 2
58760: PPUSH
58761: NOP4
58765: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
58766: NOP4
58770: PUSH
58771: NOP4
58775: PUSH
58776: NOP4
58780: DIFF
58781: PPUSH
58782: LD_INT 4
58784: PPUSH
58785: NOP4
58789: ST_TO_ADDR
// p := [ ] ;
58790: NOP4
58794: PUSH
58795: EMPTY
58796: ST_TO_ADDR
// if sci < 6 and sort > 6 then
58797: NOP4
58801: PUSH
58802: LD_INT 6
58804: LESS
58805: PUSH
58806: NOP4
58810: PUSH
58811: LD_INT 6
58813: GREATER
58814: AND
58815: IFFALSE 58896
// begin for i = 1 to 6 - sci do
58817: NOP4
58821: PUSH
58822: DOUBLE
58823: LD_INT 1
58825: DEC
58826: ST_TO_ADDR
58827: LD_INT 6
58829: PUSH
58830: NOP4
58834: MINUS
58835: PUSH
58836: FOR_TO
58837: IFFALSE 58892
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
58839: NOP4
58843: PUSH
58844: NOP4
58848: PPUSH
58849: NOP4
58853: PUSH
58854: LD_INT 1
58856: PLUS
58857: PPUSH
58858: NOP4
58862: PUSH
58863: LD_INT 1
58865: ARRAY
58866: PPUSH
58867: NOP4
58871: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
58872: NOP4
58876: PUSH
58877: NOP4
58881: PPUSH
58882: LD_INT 1
58884: PPUSH
58885: NOP4
58889: ST_TO_ADDR
// end ;
58890: GO 58836
58892: POP
58893: POP
// end else
58894: GO 58916
// if sort then
58896: NOP4
58900: IFFALSE 58916
// p := sort [ 1 ] ;
58902: NOP4
58906: PUSH
58907: NOP4
58911: PUSH
58912: LD_INT 1
58914: ARRAY
58915: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
58916: NOP4
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: NOP4
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: ST_TO_ADDR
// exit ;
58941: GO 61162
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
58943: NOP4
58947: PUSH
58948: NOP4
58952: PUSH
58953: NOP4
58957: ARRAY
58958: ARRAY
58959: PUSH
58960: NOP4
58964: PUSH
58965: NOP4
58969: ARRAY
58970: PPUSH
58971: LD_INT 2
58973: PUSH
58974: LD_INT 30
58976: PUSH
58977: LD_INT 6
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 30
58986: PUSH
58987: LD_INT 7
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 30
58996: PUSH
58997: LD_INT 8
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: PPUSH
59010: NOP4
59014: AND
59015: PUSH
59016: NOP4
59020: PUSH
59021: NOP4
59025: ARRAY
59026: PPUSH
59027: LD_INT 30
59029: PUSH
59030: LD_INT 3
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PPUSH
59037: NOP4
59041: AND
59042: IFFALSE 59776
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
59044: NOP4
59048: PUSH
59049: NOP4
59053: PPUSH
59054: NOP4
59058: PPUSH
59059: LD_INT 3
59061: PPUSH
59062: NOP4
59066: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
59067: NOP4
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: ST_TO_ADDR
// if not eng then
59090: NOP4
59094: NOT
59095: IFFALSE 59158
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
59097: NOP4
59101: PUSH
59102: NOP4
59106: PPUSH
59107: LD_INT 2
59109: PPUSH
59110: NOP4
59114: PUSH
59115: LD_INT 1
59117: ARRAY
59118: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
59119: NOP4
59123: PUSH
59124: NOP4
59128: PPUSH
59129: LD_INT 2
59131: PPUSH
59132: NOP4
59136: PPUSH
59137: NOP4
59141: ST_TO_ADDR
// tmp := tmp diff p ;
59142: NOP4
59146: PUSH
59147: NOP4
59151: PUSH
59152: NOP4
59156: DIFF
59157: ST_TO_ADDR
// end ; if tmp and sci < 6 then
59158: NOP4
59162: PUSH
59163: NOP4
59167: PUSH
59168: LD_INT 6
59170: LESS
59171: AND
59172: IFFALSE 59360
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
59174: NOP4
59178: PUSH
59179: NOP4
59183: PUSH
59184: NOP4
59188: PUSH
59189: NOP4
59193: UNION
59194: DIFF
59195: PPUSH
59196: LD_INT 4
59198: PPUSH
59199: NOP4
59203: ST_TO_ADDR
// p := [ ] ;
59204: NOP4
59208: PUSH
59209: EMPTY
59210: ST_TO_ADDR
// if sort then
59211: NOP4
59215: IFFALSE 59331
// for i = 1 to 6 - sci do
59217: NOP4
59221: PUSH
59222: DOUBLE
59223: LD_INT 1
59225: DEC
59226: ST_TO_ADDR
59227: LD_INT 6
59229: PUSH
59230: NOP4
59234: MINUS
59235: PUSH
59236: FOR_TO
59237: IFFALSE 59329
// begin if i = sort then
59239: NOP4
59243: PUSH
59244: NOP4
59248: EQUAL
59249: IFFALSE 59253
// break ;
59251: GO 59329
// if GetClass ( i ) = 4 then
59253: NOP4
59257: PPUSH
59258: NOP4
59262: PUSH
59263: LD_INT 4
59265: EQUAL
59266: IFFALSE 59270
// continue ;
59268: GO 59236
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59270: NOP4
59274: PUSH
59275: NOP4
59279: PPUSH
59280: NOP4
59284: PUSH
59285: LD_INT 1
59287: PLUS
59288: PPUSH
59289: NOP4
59293: PUSH
59294: NOP4
59298: ARRAY
59299: PPUSH
59300: NOP4
59304: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59305: NOP4
59309: PUSH
59310: NOP4
59314: PUSH
59315: NOP4
59319: PUSH
59320: NOP4
59324: ARRAY
59325: DIFF
59326: ST_TO_ADDR
// end ;
59327: GO 59236
59329: POP
59330: POP
// if p then
59331: NOP4
59335: IFFALSE 59360
// result := Replace ( result , 4 , p ) ;
59337: NOP4
59341: PUSH
59342: NOP4
59346: PPUSH
59347: LD_INT 4
59349: PPUSH
59350: NOP4
59354: PPUSH
59355: NOP4
59359: ST_TO_ADDR
// end ; if tmp and mech < 6 then
59360: NOP4
59364: PUSH
59365: NOP4
59369: PUSH
59370: LD_INT 6
59372: LESS
59373: AND
59374: IFFALSE 59562
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
59376: NOP4
59380: PUSH
59381: NOP4
59385: PUSH
59386: NOP4
59390: PUSH
59391: NOP4
59395: UNION
59396: DIFF
59397: PPUSH
59398: LD_INT 3
59400: PPUSH
59401: NOP4
59405: ST_TO_ADDR
// p := [ ] ;
59406: NOP4
59410: PUSH
59411: EMPTY
59412: ST_TO_ADDR
// if sort then
59413: NOP4
59417: IFFALSE 59533
// for i = 1 to 6 - mech do
59419: NOP4
59423: PUSH
59424: DOUBLE
59425: LD_INT 1
59427: DEC
59428: ST_TO_ADDR
59429: LD_INT 6
59431: PUSH
59432: NOP4
59436: MINUS
59437: PUSH
59438: FOR_TO
59439: IFFALSE 59531
// begin if i = sort then
59441: NOP4
59445: PUSH
59446: NOP4
59450: EQUAL
59451: IFFALSE 59455
// break ;
59453: GO 59531
// if GetClass ( i ) = 3 then
59455: NOP4
59459: PPUSH
59460: NOP4
59464: PUSH
59465: LD_INT 3
59467: EQUAL
59468: IFFALSE 59472
// continue ;
59470: GO 59438
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59472: NOP4
59476: PUSH
59477: NOP4
59481: PPUSH
59482: NOP4
59486: PUSH
59487: LD_INT 1
59489: PLUS
59490: PPUSH
59491: NOP4
59495: PUSH
59496: NOP4
59500: ARRAY
59501: PPUSH
59502: NOP4
59506: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59507: NOP4
59511: PUSH
59512: NOP4
59516: PUSH
59517: NOP4
59521: PUSH
59522: NOP4
59526: ARRAY
59527: DIFF
59528: ST_TO_ADDR
// end ;
59529: GO 59438
59531: POP
59532: POP
// if p then
59533: NOP4
59537: IFFALSE 59562
// result := Replace ( result , 3 , p ) ;
59539: NOP4
59543: PUSH
59544: NOP4
59548: PPUSH
59549: LD_INT 3
59551: PPUSH
59552: NOP4
59556: PPUSH
59557: NOP4
59561: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
59562: NOP4
59566: PUSH
59567: LD_INT 6
59569: GREATER
59570: PUSH
59571: NOP4
59575: PUSH
59576: LD_INT 6
59578: LESS
59579: AND
59580: IFFALSE 59774
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
59582: NOP4
59586: PUSH
59587: NOP4
59591: PUSH
59592: NOP4
59596: PUSH
59597: NOP4
59601: UNION
59602: PUSH
59603: NOP4
59607: UNION
59608: DIFF
59609: PPUSH
59610: LD_INT 2
59612: PPUSH
59613: NOP4
59617: ST_TO_ADDR
// p := [ ] ;
59618: NOP4
59622: PUSH
59623: EMPTY
59624: ST_TO_ADDR
// if sort then
59625: NOP4
59629: IFFALSE 59745
// for i = 1 to 6 - eng do
59631: NOP4
59635: PUSH
59636: DOUBLE
59637: LD_INT 1
59639: DEC
59640: ST_TO_ADDR
59641: LD_INT 6
59643: PUSH
59644: NOP4
59648: MINUS
59649: PUSH
59650: FOR_TO
59651: IFFALSE 59743
// begin if i = sort then
59653: NOP4
59657: PUSH
59658: NOP4
59662: EQUAL
59663: IFFALSE 59667
// break ;
59665: GO 59743
// if GetClass ( i ) = 2 then
59667: NOP4
59671: PPUSH
59672: NOP4
59676: PUSH
59677: LD_INT 2
59679: EQUAL
59680: IFFALSE 59684
// continue ;
59682: GO 59650
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59684: NOP4
59688: PUSH
59689: NOP4
59693: PPUSH
59694: NOP4
59698: PUSH
59699: LD_INT 1
59701: PLUS
59702: PPUSH
59703: NOP4
59707: PUSH
59708: NOP4
59712: ARRAY
59713: PPUSH
59714: NOP4
59718: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59719: NOP4
59723: PUSH
59724: NOP4
59728: PUSH
59729: NOP4
59733: PUSH
59734: NOP4
59738: ARRAY
59739: DIFF
59740: ST_TO_ADDR
// end ;
59741: GO 59650
59743: POP
59744: POP
// if p then
59745: NOP4
59749: IFFALSE 59774
// result := Replace ( result , 2 , p ) ;
59751: NOP4
59755: PUSH
59756: NOP4
59760: PPUSH
59761: LD_INT 2
59763: PPUSH
59764: NOP4
59768: PPUSH
59769: NOP4
59773: ST_TO_ADDR
// end ; exit ;
59774: GO 61162
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
59776: NOP4
59780: PUSH
59781: NOP4
59785: PUSH
59786: NOP4
59790: ARRAY
59791: ARRAY
59792: NOT
59793: PUSH
59794: NOP4
59798: PUSH
59799: NOP4
59803: ARRAY
59804: PPUSH
59805: LD_INT 30
59807: PUSH
59808: LD_INT 3
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PPUSH
59815: NOP4
59819: AND
59820: PUSH
59821: NOP4
59825: PUSH
59826: NOP4
59830: ARRAY
59831: AND
59832: IFFALSE 60440
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
59834: NOP4
59838: PUSH
59839: NOP4
59843: PPUSH
59844: NOP4
59848: PPUSH
59849: LD_INT 5
59851: PPUSH
59852: NOP4
59856: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
59857: NOP4
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: ST_TO_ADDR
// if sci > 1 then
59880: NOP4
59884: PUSH
59885: LD_INT 1
59887: GREATER
59888: IFFALSE 59916
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
59890: NOP4
59894: PUSH
59895: NOP4
59899: PUSH
59900: NOP4
59904: PUSH
59905: NOP4
59909: PUSH
59910: LD_INT 1
59912: ARRAY
59913: DIFF
59914: DIFF
59915: ST_TO_ADDR
// if tmp and not sci then
59916: NOP4
59920: PUSH
59921: NOP4
59925: NOT
59926: AND
59927: IFFALSE 59996
// begin sort := SortBySkill ( tmp , 4 ) ;
59929: NOP4
59933: PUSH
59934: NOP4
59938: PPUSH
59939: LD_INT 4
59941: PPUSH
59942: NOP4
59946: ST_TO_ADDR
// if sort then
59947: NOP4
59951: IFFALSE 59967
// p := sort [ 1 ] ;
59953: NOP4
59957: PUSH
59958: NOP4
59962: PUSH
59963: LD_INT 1
59965: ARRAY
59966: ST_TO_ADDR
// if p then
59967: NOP4
59971: IFFALSE 59996
// result := Replace ( result , 4 , p ) ;
59973: NOP4
59977: PUSH
59978: NOP4
59982: PPUSH
59983: LD_INT 4
59985: PPUSH
59986: NOP4
59990: PPUSH
59991: NOP4
59995: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
59996: NOP4
60000: PUSH
60001: NOP4
60005: PUSH
60006: NOP4
60010: DIFF
60011: ST_TO_ADDR
// if tmp and mech < 6 then
60012: NOP4
60016: PUSH
60017: NOP4
60021: PUSH
60022: LD_INT 6
60024: LESS
60025: AND
60026: IFFALSE 60214
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
60028: NOP4
60032: PUSH
60033: NOP4
60037: PUSH
60038: NOP4
60042: PUSH
60043: NOP4
60047: UNION
60048: DIFF
60049: PPUSH
60050: LD_INT 3
60052: PPUSH
60053: NOP4
60057: ST_TO_ADDR
// p := [ ] ;
60058: NOP4
60062: PUSH
60063: EMPTY
60064: ST_TO_ADDR
// if sort then
60065: NOP4
60069: IFFALSE 60185
// for i = 1 to 6 - mech do
60071: NOP4
60075: PUSH
60076: DOUBLE
60077: LD_INT 1
60079: DEC
60080: ST_TO_ADDR
60081: LD_INT 6
60083: PUSH
60084: NOP4
60088: MINUS
60089: PUSH
60090: FOR_TO
60091: IFFALSE 60183
// begin if i = sort then
60093: NOP4
60097: PUSH
60098: NOP4
60102: EQUAL
60103: IFFALSE 60107
// break ;
60105: GO 60183
// if GetClass ( i ) = 3 then
60107: NOP4
60111: PPUSH
60112: NOP4
60116: PUSH
60117: LD_INT 3
60119: EQUAL
60120: IFFALSE 60124
// continue ;
60122: GO 60090
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60124: NOP4
60128: PUSH
60129: NOP4
60133: PPUSH
60134: NOP4
60138: PUSH
60139: LD_INT 1
60141: PLUS
60142: PPUSH
60143: NOP4
60147: PUSH
60148: NOP4
60152: ARRAY
60153: PPUSH
60154: NOP4
60158: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60159: NOP4
60163: PUSH
60164: NOP4
60168: PUSH
60169: NOP4
60173: PUSH
60174: NOP4
60178: ARRAY
60179: DIFF
60180: ST_TO_ADDR
// end ;
60181: GO 60090
60183: POP
60184: POP
// if p then
60185: NOP4
60189: IFFALSE 60214
// result := Replace ( result , 3 , p ) ;
60191: NOP4
60195: PUSH
60196: NOP4
60200: PPUSH
60201: LD_INT 3
60203: PPUSH
60204: NOP4
60208: PPUSH
60209: NOP4
60213: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
60214: NOP4
60218: PUSH
60219: NOP4
60223: PUSH
60224: NOP4
60228: DIFF
60229: ST_TO_ADDR
// if tmp and eng < 6 then
60230: NOP4
60234: PUSH
60235: NOP4
60239: PUSH
60240: LD_INT 6
60242: LESS
60243: AND
60244: IFFALSE 60438
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
60246: NOP4
60250: PUSH
60251: NOP4
60255: PUSH
60256: NOP4
60260: PUSH
60261: NOP4
60265: UNION
60266: PUSH
60267: NOP4
60271: UNION
60272: DIFF
60273: PPUSH
60274: LD_INT 2
60276: PPUSH
60277: NOP4
60281: ST_TO_ADDR
// p := [ ] ;
60282: NOP4
60286: PUSH
60287: EMPTY
60288: ST_TO_ADDR
// if sort then
60289: NOP4
60293: IFFALSE 60409
// for i = 1 to 6 - eng do
60295: NOP4
60299: PUSH
60300: DOUBLE
60301: LD_INT 1
60303: DEC
60304: ST_TO_ADDR
60305: LD_INT 6
60307: PUSH
60308: NOP4
60312: MINUS
60313: PUSH
60314: FOR_TO
60315: IFFALSE 60407
// begin if i = sort then
60317: NOP4
60321: PUSH
60322: NOP4
60326: EQUAL
60327: IFFALSE 60331
// break ;
60329: GO 60407
// if GetClass ( i ) = 2 then
60331: NOP4
60335: PPUSH
60336: NOP4
60340: PUSH
60341: LD_INT 2
60343: EQUAL
60344: IFFALSE 60348
// continue ;
60346: GO 60314
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60348: NOP4
60352: PUSH
60353: NOP4
60357: PPUSH
60358: NOP4
60362: PUSH
60363: LD_INT 1
60365: PLUS
60366: PPUSH
60367: NOP4
60371: PUSH
60372: NOP4
60376: ARRAY
60377: PPUSH
60378: NOP4
60382: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60383: NOP4
60387: PUSH
60388: NOP4
60392: PUSH
60393: NOP4
60397: PUSH
60398: NOP4
60402: ARRAY
60403: DIFF
60404: ST_TO_ADDR
// end ;
60405: GO 60314
60407: POP
60408: POP
// if p then
60409: NOP4
60413: IFFALSE 60438
// result := Replace ( result , 2 , p ) ;
60415: NOP4
60419: PUSH
60420: NOP4
60424: PPUSH
60425: LD_INT 2
60427: PPUSH
60428: NOP4
60432: PPUSH
60433: NOP4
60437: ST_TO_ADDR
// end ; exit ;
60438: GO 61162
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
60440: NOP4
60444: PUSH
60445: NOP4
60449: PUSH
60450: NOP4
60454: ARRAY
60455: ARRAY
60456: NOT
60457: PUSH
60458: NOP4
60462: PUSH
60463: NOP4
60467: ARRAY
60468: PPUSH
60469: LD_INT 30
60471: PUSH
60472: LD_INT 3
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PPUSH
60479: NOP4
60483: AND
60484: PUSH
60485: NOP4
60489: PUSH
60490: NOP4
60494: ARRAY
60495: NOT
60496: AND
60497: IFFALSE 61162
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
60499: NOP4
60503: PUSH
60504: NOP4
60508: PPUSH
60509: NOP4
60513: PPUSH
60514: LD_INT 6
60516: PPUSH
60517: NOP4
60521: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60522: NOP4
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: ST_TO_ADDR
// if sci >= 1 then
60545: NOP4
60549: PUSH
60550: LD_INT 1
60552: GREATEREQUAL
60553: IFFALSE 60575
// tmp := tmp diff sci [ 1 ] ;
60555: NOP4
60559: PUSH
60560: NOP4
60564: PUSH
60565: NOP4
60569: PUSH
60570: LD_INT 1
60572: ARRAY
60573: DIFF
60574: ST_TO_ADDR
// if tmp and not sci then
60575: NOP4
60579: PUSH
60580: NOP4
60584: NOT
60585: AND
60586: IFFALSE 60655
// begin sort := SortBySkill ( tmp , 4 ) ;
60588: NOP4
60592: PUSH
60593: NOP4
60597: PPUSH
60598: LD_INT 4
60600: PPUSH
60601: NOP4
60605: ST_TO_ADDR
// if sort then
60606: NOP4
60610: IFFALSE 60626
// p := sort [ 1 ] ;
60612: NOP4
60616: PUSH
60617: NOP4
60621: PUSH
60622: LD_INT 1
60624: ARRAY
60625: ST_TO_ADDR
// if p then
60626: NOP4
60630: IFFALSE 60655
// result := Replace ( result , 4 , p ) ;
60632: NOP4
60636: PUSH
60637: NOP4
60641: PPUSH
60642: LD_INT 4
60644: PPUSH
60645: NOP4
60649: PPUSH
60650: NOP4
60654: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
60655: NOP4
60659: PUSH
60660: NOP4
60664: PUSH
60665: NOP4
60669: DIFF
60670: ST_TO_ADDR
// if tmp and mech < 6 then
60671: NOP4
60675: PUSH
60676: NOP4
60680: PUSH
60681: LD_INT 6
60683: LESS
60684: AND
60685: IFFALSE 60867
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
60687: NOP4
60691: PUSH
60692: NOP4
60696: PUSH
60697: NOP4
60701: DIFF
60702: PPUSH
60703: LD_INT 3
60705: PPUSH
60706: NOP4
60710: ST_TO_ADDR
// p := [ ] ;
60711: NOP4
60715: PUSH
60716: EMPTY
60717: ST_TO_ADDR
// if sort then
60718: NOP4
60722: IFFALSE 60838
// for i = 1 to 6 - mech do
60724: NOP4
60728: PUSH
60729: DOUBLE
60730: LD_INT 1
60732: DEC
60733: ST_TO_ADDR
60734: LD_INT 6
60736: PUSH
60737: NOP4
60741: MINUS
60742: PUSH
60743: FOR_TO
60744: IFFALSE 60836
// begin if i = sort then
60746: NOP4
60750: PUSH
60751: NOP4
60755: EQUAL
60756: IFFALSE 60760
// break ;
60758: GO 60836
// if GetClass ( i ) = 3 then
60760: NOP4
60764: PPUSH
60765: NOP4
60769: PUSH
60770: LD_INT 3
60772: EQUAL
60773: IFFALSE 60777
// continue ;
60775: GO 60743
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60777: NOP4
60781: PUSH
60782: NOP4
60786: PPUSH
60787: NOP4
60791: PUSH
60792: LD_INT 1
60794: PLUS
60795: PPUSH
60796: NOP4
60800: PUSH
60801: NOP4
60805: ARRAY
60806: PPUSH
60807: NOP4
60811: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60812: NOP4
60816: PUSH
60817: NOP4
60821: PUSH
60822: NOP4
60826: PUSH
60827: NOP4
60831: ARRAY
60832: DIFF
60833: ST_TO_ADDR
// end ;
60834: GO 60743
60836: POP
60837: POP
// if p then
60838: NOP4
60842: IFFALSE 60867
// result := Replace ( result , 3 , p ) ;
60844: NOP4
60848: PUSH
60849: NOP4
60853: PPUSH
60854: LD_INT 3
60856: PPUSH
60857: NOP4
60861: PPUSH
60862: NOP4
60866: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
60867: NOP4
60871: PUSH
60872: NOP4
60876: PUSH
60877: NOP4
60881: DIFF
60882: ST_TO_ADDR
// if tmp and eng < 4 then
60883: NOP4
60887: PUSH
60888: NOP4
60892: PUSH
60893: LD_INT 4
60895: LESS
60896: AND
60897: IFFALSE 61087
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
60899: NOP4
60903: PUSH
60904: NOP4
60908: PUSH
60909: NOP4
60913: PUSH
60914: NOP4
60918: UNION
60919: DIFF
60920: PPUSH
60921: LD_INT 2
60923: PPUSH
60924: NOP4
60928: ST_TO_ADDR
// p := [ ] ;
60929: NOP4
60933: PUSH
60934: EMPTY
60935: ST_TO_ADDR
// if sort then
60936: NOP4
60940: IFFALSE 61056
// for i = 1 to 4 - eng do
60942: NOP4
60946: PUSH
60947: DOUBLE
60948: LD_INT 1
60950: DEC
60951: ST_TO_ADDR
60952: LD_INT 4
60954: PUSH
60955: NOP4
60959: MINUS
60960: PUSH
60961: FOR_TO
60962: IFFALSE 61054
// begin if i = sort then
60964: NOP4
60968: PUSH
60969: NOP4
60973: EQUAL
60974: IFFALSE 60978
// break ;
60976: GO 61054
// if GetClass ( i ) = 2 then
60978: NOP4
60982: PPUSH
60983: NOP4
60987: PUSH
60988: LD_INT 2
60990: EQUAL
60991: IFFALSE 60995
// continue ;
60993: GO 60961
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60995: NOP4
60999: PUSH
61000: NOP4
61004: PPUSH
61005: NOP4
61009: PUSH
61010: LD_INT 1
61012: PLUS
61013: PPUSH
61014: NOP4
61018: PUSH
61019: NOP4
61023: ARRAY
61024: PPUSH
61025: NOP4
61029: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61030: NOP4
61034: PUSH
61035: NOP4
61039: PUSH
61040: NOP4
61044: PUSH
61045: NOP4
61049: ARRAY
61050: DIFF
61051: ST_TO_ADDR
// end ;
61052: GO 60961
61054: POP
61055: POP
// if p then
61056: NOP4
61060: IFFALSE 61085
// result := Replace ( result , 2 , p ) ;
61062: NOP4
61066: PUSH
61067: NOP4
61071: PPUSH
61072: LD_INT 2
61074: PPUSH
61075: NOP4
61079: PPUSH
61080: NOP4
61084: ST_TO_ADDR
// end else
61085: GO 61131
// for i = eng downto 5 do
61087: NOP4
61091: PUSH
61092: DOUBLE
61093: NOP4
61097: INC
61098: ST_TO_ADDR
61099: LD_INT 5
61101: PUSH
61102: FOR_DOWNTO
61103: IFFALSE 61129
// tmp := tmp union eng [ i ] ;
61105: NOP4
61109: PUSH
61110: NOP4
61114: PUSH
61115: NOP4
61119: PUSH
61120: NOP4
61124: ARRAY
61125: UNION
61126: ST_TO_ADDR
61127: GO 61102
61129: POP
61130: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
61131: NOP4
61135: PUSH
61136: NOP4
61140: PPUSH
61141: LD_INT 1
61143: PPUSH
61144: NOP4
61148: PUSH
61149: NOP4
61153: DIFF
61154: PPUSH
61155: NOP4
61159: ST_TO_ADDR
// exit ;
61160: GO 61162
// end ; end ;
61162: LD_VAR 0 2
61166: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
61167: LD_INT 0
61169: PPUSH
61170: PPUSH
61171: PPUSH
// if not mc_bases then
61172: NOP4
61176: NOT
61177: IFFALSE 61181
// exit ;
61179: GO 61287
// for i = 1 to mc_bases do
61181: NOP4
61185: PUSH
61186: DOUBLE
61187: LD_INT 1
61189: DEC
61190: ST_TO_ADDR
61191: NOP4
61195: PUSH
61196: FOR_TO
61197: IFFALSE 61278
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
61199: NOP4
61203: PUSH
61204: NOP4
61208: PUSH
61209: NOP4
61213: ARRAY
61214: PPUSH
61215: LD_INT 21
61217: PUSH
61218: LD_INT 3
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 3
61227: PUSH
61228: LD_INT 24
61230: PUSH
61231: LD_INT 1000
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PPUSH
61246: NOP4
61250: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
61251: NOP4
61255: PUSH
61256: NOP4
61260: PPUSH
61261: NOP4
61265: PPUSH
61266: NOP4
61270: PPUSH
61271: NOP4
61275: ST_TO_ADDR
// end ;
61276: GO 61196
61278: POP
61279: POP
// RaiseSailEvent ( 101 ) ;
61280: LD_INT 101
61282: PPUSH
61283: NOP4
// end ;
61287: LD_VAR 0 1
61291: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
61292: LD_INT 0
61294: PPUSH
61295: PPUSH
61296: PPUSH
61297: PPUSH
61298: PPUSH
61299: PPUSH
61300: PPUSH
// if not mc_bases then
61301: NOP4
61305: NOT
61306: IFFALSE 61310
// exit ;
61308: GO 61883
// for i = 1 to mc_bases do
61310: NOP4
61314: PUSH
61315: DOUBLE
61316: LD_INT 1
61318: DEC
61319: ST_TO_ADDR
61320: NOP4
61324: PUSH
61325: FOR_TO
61326: IFFALSE 61874
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
61328: NOP4
61332: PUSH
61333: NOP4
61337: PUSH
61338: NOP4
61342: ARRAY
61343: PUSH
61344: NOP4
61348: PUSH
61349: NOP4
61353: ARRAY
61354: UNION
61355: PPUSH
61356: LD_INT 21
61358: PUSH
61359: LD_INT 1
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: LD_INT 3
61371: PUSH
61372: LD_INT 54
61374: PUSH
61375: EMPTY
61376: LIST
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 3
61384: PUSH
61385: LD_INT 24
61387: PUSH
61388: LD_INT 800
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: LIST
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PPUSH
61408: NOP4
61412: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
61413: NOP4
61417: PUSH
61418: NOP4
61422: PUSH
61423: NOP4
61427: ARRAY
61428: PPUSH
61429: LD_INT 21
61431: PUSH
61432: LD_INT 1
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: PUSH
61442: LD_INT 3
61444: PUSH
61445: LD_INT 54
61447: PUSH
61448: EMPTY
61449: LIST
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 3
61457: PUSH
61458: LD_INT 24
61460: PUSH
61461: LD_INT 250
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: LIST
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PPUSH
61481: NOP4
61485: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
61486: NOP4
61490: PUSH
61491: NOP4
61495: PUSH
61496: NOP4
61500: DIFF
61501: ST_TO_ADDR
// if not need_heal_1 then
61502: NOP4
61506: NOT
61507: IFFALSE 61540
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
61509: NOP4
61513: PUSH
61514: NOP4
61518: PPUSH
61519: NOP4
61523: PUSH
61524: LD_INT 1
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PPUSH
61531: EMPTY
61532: PPUSH
61533: NOP4
61537: ST_TO_ADDR
61538: GO 61610
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
61540: NOP4
61544: PUSH
61545: NOP4
61549: PPUSH
61550: NOP4
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PPUSH
61562: NOP4
61566: PUSH
61567: NOP4
61571: ARRAY
61572: PUSH
61573: LD_INT 1
61575: ARRAY
61576: PPUSH
61577: LD_INT 3
61579: PUSH
61580: LD_INT 24
61582: PUSH
61583: LD_INT 1000
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PPUSH
61594: NOP4
61598: PUSH
61599: NOP4
61603: UNION
61604: PPUSH
61605: NOP4
61609: ST_TO_ADDR
// if not need_heal_2 then
61610: NOP4
61614: NOT
61615: IFFALSE 61648
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
61617: NOP4
61621: PUSH
61622: NOP4
61626: PPUSH
61627: NOP4
61631: PUSH
61632: LD_INT 2
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PPUSH
61639: EMPTY
61640: PPUSH
61641: NOP4
61645: ST_TO_ADDR
61646: GO 61680
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
61648: NOP4
61652: PUSH
61653: NOP4
61657: PPUSH
61658: NOP4
61662: PUSH
61663: LD_INT 2
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PPUSH
61670: NOP4
61674: PPUSH
61675: NOP4
61679: ST_TO_ADDR
// if need_heal_2 then
61680: NOP4
61684: IFFALSE 61856
// for j in need_heal_2 do
61686: NOP4
61690: PUSH
61691: NOP4
61695: PUSH
61696: FOR_IN
61697: IFFALSE 61854
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
61699: NOP4
61703: PUSH
61704: NOP4
61708: PUSH
61709: NOP4
61713: ARRAY
61714: PPUSH
61715: LD_INT 2
61717: PUSH
61718: LD_INT 30
61720: PUSH
61721: LD_INT 6
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 30
61730: PUSH
61731: LD_INT 7
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 30
61740: PUSH
61741: LD_INT 8
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 30
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 30
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 25
61770: PUSH
61771: LD_INT 4
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: PPUSH
61787: NOP4
61791: ST_TO_ADDR
// if tmp then
61792: NOP4
61796: IFFALSE 61852
// begin k := NearestUnitToUnit ( tmp , j ) ;
61798: NOP4
61802: PUSH
61803: NOP4
61807: PPUSH
61808: NOP4
61812: PPUSH
61813: NOP4
61817: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
61818: NOP4
61822: PPUSH
61823: NOP4
61827: PPUSH
61828: NOP4
61832: PUSH
61833: LD_INT 7
61835: GREATER
61836: IFFALSE 61852
// ComMoveUnit ( j , k ) ;
61838: NOP4
61842: PPUSH
61843: NOP4
61847: PPUSH
61848: NOP4
// end ; end ;
61852: GO 61696
61854: POP
61855: POP
// if not need_heal_1 and not need_heal_2 then
61856: NOP4
61860: NOT
61861: PUSH
61862: NOP4
61866: NOT
61867: AND
61868: IFFALSE 61872
// continue ;
61870: GO 61325
// end ;
61872: GO 61325
61874: POP
61875: POP
// RaiseSailEvent ( 102 ) ;
61876: LD_INT 102
61878: PPUSH
61879: NOP4
// end ;
61883: LD_VAR 0 1
61887: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes ; begin
61888: LD_INT 0
61890: PPUSH
61891: PPUSH
61892: PPUSH
61893: PPUSH
61894: PPUSH
61895: PPUSH
// if not mc_bases then
61896: NOP4
61900: NOT
61901: IFFALSE 61905
// exit ;
61903: GO 62615
// for i = 1 to mc_bases do
61905: NOP4
61909: PUSH
61910: DOUBLE
61911: LD_INT 1
61913: DEC
61914: ST_TO_ADDR
61915: NOP4
61919: PUSH
61920: FOR_TO
61921: IFFALSE 62613
// begin if not mc_building_need_repair [ i ] then
61923: NOP4
61927: PUSH
61928: NOP4
61932: ARRAY
61933: NOT
61934: IFFALSE 62108
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
61936: NOP4
61940: PUSH
61941: NOP4
61945: PUSH
61946: NOP4
61950: ARRAY
61951: PPUSH
61952: LD_INT 3
61954: PUSH
61955: LD_INT 24
61957: PUSH
61958: LD_INT 1000
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 2
61971: PUSH
61972: LD_INT 34
61974: PUSH
61975: LD_INT 13
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 34
61984: PUSH
61985: LD_INT 52
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: LIST
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PPUSH
62001: NOP4
62005: ST_TO_ADDR
// if cranes then
62006: NOP4
62010: IFFALSE 62072
// for j in cranes do
62012: NOP4
62016: PUSH
62017: NOP4
62021: PUSH
62022: FOR_IN
62023: IFFALSE 62070
// if not IsInArea ( j , mc_parking [ i ] ) then
62025: NOP4
62029: PPUSH
62030: NOP4
62034: PUSH
62035: NOP4
62039: ARRAY
62040: PPUSH
62041: NOP4
62045: NOT
62046: IFFALSE 62068
// ComMoveToArea ( j , mc_parking [ i ] ) ;
62048: NOP4
62052: PPUSH
62053: NOP4
62057: PUSH
62058: NOP4
62062: ARRAY
62063: PPUSH
62064: NOP4
62068: GO 62022
62070: POP
62071: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
62072: NOP4
62076: PUSH
62077: NOP4
62081: PPUSH
62082: NOP4
62086: PPUSH
62087: EMPTY
62088: PPUSH
62089: NOP4
62093: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
62094: NOP4
62098: PPUSH
62099: LD_INT 101
62101: PPUSH
62102: NOP4
// continue ;
62106: GO 61920
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
62108: NOP4
62112: PUSH
62113: NOP4
62117: PPUSH
62118: NOP4
62122: PPUSH
62123: EMPTY
62124: PPUSH
62125: NOP4
62129: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
62130: NOP4
62134: PPUSH
62135: LD_INT 103
62137: PPUSH
62138: NOP4
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
62142: NOP4
62146: PUSH
62147: NOP4
62151: PUSH
62152: NOP4
62156: ARRAY
62157: PUSH
62158: NOP4
62162: PUSH
62163: NOP4
62167: ARRAY
62168: UNION
62169: PPUSH
62170: LD_INT 2
62172: PUSH
62173: LD_INT 25
62175: PUSH
62176: LD_INT 2
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 25
62185: PUSH
62186: LD_INT 16
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: LIST
62197: PUSH
62198: EMPTY
62199: LIST
62200: PPUSH
62201: NOP4
62205: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
62206: NOP4
62210: PUSH
62211: NOP4
62215: PUSH
62216: NOP4
62220: ARRAY
62221: PPUSH
62222: LD_INT 2
62224: PUSH
62225: LD_INT 34
62227: PUSH
62228: LD_INT 13
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 34
62237: PUSH
62238: LD_INT 52
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: LIST
62249: PPUSH
62250: NOP4
62254: ST_TO_ADDR
// if cranes then
62255: NOP4
62259: IFFALSE 62395
// begin for j in cranes do
62261: NOP4
62265: PUSH
62266: NOP4
62270: PUSH
62271: FOR_IN
62272: IFFALSE 62393
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
62274: NOP4
62278: PPUSH
62279: NOP4
62283: PUSH
62284: LD_INT 500
62286: GREATEREQUAL
62287: PUSH
62288: NOP4
62292: PPUSH
62293: NOP4
62297: NOT
62298: AND
62299: IFFALSE 62333
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
62301: NOP4
62305: PPUSH
62306: NOP4
62310: PUSH
62311: NOP4
62315: ARRAY
62316: PPUSH
62317: NOP4
62321: PPUSH
62322: NOP4
62326: PPUSH
62327: NOP4
62331: GO 62391
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
62333: NOP4
62337: PPUSH
62338: NOP4
62342: PUSH
62343: LD_INT 500
62345: LESS
62346: PUSH
62347: NOP4
62351: PPUSH
62352: NOP4
62356: PUSH
62357: NOP4
62361: ARRAY
62362: PPUSH
62363: NOP4
62367: NOT
62368: AND
62369: IFFALSE 62391
// ComMoveToArea ( j , mc_parking [ i ] ) ;
62371: NOP4
62375: PPUSH
62376: NOP4
62380: PUSH
62381: NOP4
62385: ARRAY
62386: PPUSH
62387: NOP4
62391: GO 62271
62393: POP
62394: POP
// end ; if not tmp then
62395: NOP4
62399: NOT
62400: IFFALSE 62404
// continue ;
62402: GO 61920
// for j in tmp do
62404: NOP4
62408: PUSH
62409: NOP4
62413: PUSH
62414: FOR_IN
62415: IFFALSE 62609
// begin if mc_need_heal [ i ] then
62417: NOP4
62421: PUSH
62422: NOP4
62426: ARRAY
62427: IFFALSE 62475
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
62429: NOP4
62433: PUSH
62434: NOP4
62438: PUSH
62439: NOP4
62443: ARRAY
62444: PUSH
62445: LD_INT 1
62447: ARRAY
62448: IN
62449: PUSH
62450: NOP4
62454: PUSH
62455: NOP4
62459: PUSH
62460: NOP4
62464: ARRAY
62465: PUSH
62466: LD_INT 2
62468: ARRAY
62469: IN
62470: OR
62471: IFFALSE 62475
// continue ;
62473: GO 62414
// if IsInUnit ( j ) then
62475: NOP4
62479: PPUSH
62480: NOP4
62484: IFFALSE 62495
// ComExitBuilding ( j ) ;
62486: NOP4
62490: PPUSH
62491: NOP4
// if not j in mc_building_repairs [ i ] then
62495: NOP4
62499: PUSH
62500: NOP4
62504: PUSH
62505: NOP4
62509: ARRAY
62510: IN
62511: NOT
62512: IFFALSE 62570
// begin SetTag ( j , 101 ) ;
62514: NOP4
62518: PPUSH
62519: LD_INT 101
62521: PPUSH
62522: NOP4
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
62526: NOP4
62530: PUSH
62531: NOP4
62535: PPUSH
62536: NOP4
62540: PUSH
62541: NOP4
62545: PUSH
62546: NOP4
62550: ARRAY
62551: PUSH
62552: LD_INT 1
62554: PLUS
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PPUSH
62560: NOP4
62564: PPUSH
62565: NOP4
62569: ST_TO_ADDR
// end ; wait ( 1 ) ;
62570: LD_INT 1
62572: PPUSH
62573: NOP4
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
62577: NOP4
62581: PPUSH
62582: NOP4
62586: PUSH
62587: NOP4
62591: ARRAY
62592: PPUSH
62593: NOP4
62597: PPUSH
62598: NOP4
62602: PPUSH
62603: NOP4
// end ;
62607: GO 62414
62609: POP
62610: POP
// end ;
62611: GO 61920
62613: POP
62614: POP
// end ;
62615: LD_VAR 0 1
62619: RET
// export function MC_Heal ; var i , j , tmp ; begin
62620: LD_INT 0
62622: PPUSH
62623: PPUSH
62624: PPUSH
62625: PPUSH
// if not mc_bases then
62626: NOP4
62630: NOT
62631: IFFALSE 62635
// exit ;
62633: GO 63037
// for i = 1 to mc_bases do
62635: NOP4
62639: PUSH
62640: DOUBLE
62641: LD_INT 1
62643: DEC
62644: ST_TO_ADDR
62645: NOP4
62649: PUSH
62650: FOR_TO
62651: IFFALSE 63035
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
62653: NOP4
62657: PUSH
62658: NOP4
62662: ARRAY
62663: PUSH
62664: LD_INT 1
62666: ARRAY
62667: NOT
62668: PUSH
62669: NOP4
62673: PUSH
62674: NOP4
62678: ARRAY
62679: PUSH
62680: LD_INT 2
62682: ARRAY
62683: NOT
62684: AND
62685: IFFALSE 62723
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
62687: NOP4
62691: PUSH
62692: NOP4
62696: PPUSH
62697: NOP4
62701: PPUSH
62702: EMPTY
62703: PPUSH
62704: NOP4
62708: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
62709: NOP4
62713: PPUSH
62714: LD_INT 102
62716: PPUSH
62717: NOP4
// continue ;
62721: GO 62650
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
62723: NOP4
62727: PUSH
62728: NOP4
62732: PUSH
62733: NOP4
62737: ARRAY
62738: PPUSH
62739: LD_INT 25
62741: PUSH
62742: LD_INT 4
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PPUSH
62749: NOP4
62753: ST_TO_ADDR
// if not tmp then
62754: NOP4
62758: NOT
62759: IFFALSE 62763
// continue ;
62761: GO 62650
// if mc_taming [ i ] then
62763: NOP4
62767: PUSH
62768: NOP4
62772: ARRAY
62773: IFFALSE 62797
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
62775: NOP4
62779: PUSH
62780: NOP4
62784: PPUSH
62785: NOP4
62789: PPUSH
62790: EMPTY
62791: PPUSH
62792: NOP4
62796: ST_TO_ADDR
// for j in tmp do
62797: NOP4
62801: PUSH
62802: NOP4
62806: PUSH
62807: FOR_IN
62808: IFFALSE 63031
// begin if IsInUnit ( j ) then
62810: NOP4
62814: PPUSH
62815: NOP4
62819: IFFALSE 62830
// ComExitBuilding ( j ) ;
62821: NOP4
62825: PPUSH
62826: NOP4
// if not j in mc_healers [ i ] then
62830: NOP4
62834: PUSH
62835: NOP4
62839: PUSH
62840: NOP4
62844: ARRAY
62845: IN
62846: NOT
62847: IFFALSE 62893
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
62849: NOP4
62853: PUSH
62854: NOP4
62858: PPUSH
62859: NOP4
62863: PUSH
62864: NOP4
62868: PUSH
62869: NOP4
62873: ARRAY
62874: PUSH
62875: LD_INT 1
62877: PLUS
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PPUSH
62883: NOP4
62887: PPUSH
62888: NOP4
62892: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
62893: NOP4
62897: PPUSH
62898: NOP4
62902: PUSH
62903: LD_INT 102
62905: NONEQUAL
62906: IFFALSE 62920
// SetTag ( j , 102 ) ;
62908: NOP4
62912: PPUSH
62913: LD_INT 102
62915: PPUSH
62916: NOP4
// Wait ( 3 ) ;
62920: LD_INT 3
62922: PPUSH
62923: NOP4
// if mc_need_heal [ i ] [ 1 ] then
62927: NOP4
62931: PUSH
62932: NOP4
62936: ARRAY
62937: PUSH
62938: LD_INT 1
62940: ARRAY
62941: IFFALSE 62973
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
62943: NOP4
62947: PPUSH
62948: NOP4
62952: PUSH
62953: NOP4
62957: ARRAY
62958: PUSH
62959: LD_INT 1
62961: ARRAY
62962: PUSH
62963: LD_INT 1
62965: ARRAY
62966: PPUSH
62967: NOP4
62971: GO 63029
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
62973: NOP4
62977: PPUSH
62978: NOP4
62982: NOT
62983: PUSH
62984: NOP4
62988: PUSH
62989: NOP4
62993: ARRAY
62994: PUSH
62995: LD_INT 2
62997: ARRAY
62998: AND
62999: IFFALSE 63029
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
63001: NOP4
63005: PPUSH
63006: NOP4
63010: PUSH
63011: NOP4
63015: ARRAY
63016: PUSH
63017: LD_INT 2
63019: ARRAY
63020: PUSH
63021: LD_INT 1
63023: ARRAY
63024: PPUSH
63025: NOP4
// end ;
63029: GO 62807
63031: POP
63032: POP
// end ;
63033: GO 62650
63035: POP
63036: POP
// end ;
63037: LD_VAR 0 1
63041: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
63042: LD_INT 0
63044: PPUSH
63045: PPUSH
63046: PPUSH
63047: PPUSH
63048: PPUSH
// if not mc_bases then
63049: NOP4
63053: NOT
63054: IFFALSE 63058
// exit ;
63056: GO 64201
// for i = 1 to mc_bases do
63058: NOP4
63062: PUSH
63063: DOUBLE
63064: LD_INT 1
63066: DEC
63067: ST_TO_ADDR
63068: NOP4
63072: PUSH
63073: FOR_TO
63074: IFFALSE 64199
// begin if mc_scan [ i ] then
63076: NOP4
63080: PUSH
63081: NOP4
63085: ARRAY
63086: IFFALSE 63090
// continue ;
63088: GO 63073
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
63090: NOP4
63094: PUSH
63095: NOP4
63099: ARRAY
63100: NOT
63101: PUSH
63102: NOP4
63106: PUSH
63107: NOP4
63111: ARRAY
63112: NOT
63113: AND
63114: PUSH
63115: NOP4
63119: PUSH
63120: NOP4
63124: ARRAY
63125: AND
63126: IFFALSE 63164
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
63128: NOP4
63132: PUSH
63133: NOP4
63137: PPUSH
63138: NOP4
63142: PPUSH
63143: EMPTY
63144: PPUSH
63145: NOP4
63149: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
63150: NOP4
63154: PPUSH
63155: LD_INT 103
63157: PPUSH
63158: NOP4
// continue ;
63162: GO 63073
// end ; if mc_construct_list [ i ] then
63164: NOP4
63168: PUSH
63169: NOP4
63173: ARRAY
63174: IFFALSE 63394
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
63176: NOP4
63180: PUSH
63181: NOP4
63185: PUSH
63186: NOP4
63190: ARRAY
63191: PPUSH
63192: LD_INT 25
63194: PUSH
63195: LD_INT 2
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PPUSH
63202: NOP4
63206: PUSH
63207: NOP4
63211: PUSH
63212: NOP4
63216: ARRAY
63217: DIFF
63218: ST_TO_ADDR
// if not tmp then
63219: NOP4
63223: NOT
63224: IFFALSE 63228
// continue ;
63226: GO 63073
// for j in tmp do
63228: NOP4
63232: PUSH
63233: NOP4
63237: PUSH
63238: FOR_IN
63239: IFFALSE 63390
// begin if not mc_builders [ i ] then
63241: NOP4
63245: PUSH
63246: NOP4
63250: ARRAY
63251: NOT
63252: IFFALSE 63310
// begin SetTag ( j , 103 ) ;
63254: NOP4
63258: PPUSH
63259: LD_INT 103
63261: PPUSH
63262: NOP4
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
63266: NOP4
63270: PUSH
63271: NOP4
63275: PPUSH
63276: NOP4
63280: PUSH
63281: NOP4
63285: PUSH
63286: NOP4
63290: ARRAY
63291: PUSH
63292: LD_INT 1
63294: PLUS
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PPUSH
63300: NOP4
63304: PPUSH
63305: NOP4
63309: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
63310: NOP4
63314: PPUSH
63315: NOP4
63319: IFFALSE 63330
// ComExitBuilding ( j ) ;
63321: NOP4
63325: PPUSH
63326: NOP4
// wait ( 3 ) ;
63330: LD_INT 3
63332: PPUSH
63333: NOP4
// if not mc_construct_list [ i ] then
63337: NOP4
63341: PUSH
63342: NOP4
63346: ARRAY
63347: NOT
63348: IFFALSE 63352
// break ;
63350: GO 63390
// if not HasTask ( j ) then
63352: NOP4
63356: PPUSH
63357: NOP4
63361: NOT
63362: IFFALSE 63388
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
63364: NOP4
63368: PPUSH
63369: NOP4
63373: PUSH
63374: NOP4
63378: ARRAY
63379: PUSH
63380: LD_INT 1
63382: ARRAY
63383: PPUSH
63384: NOP4
// end ;
63388: GO 63238
63390: POP
63391: POP
// end else
63392: GO 64197
// if mc_build_list [ i ] then
63394: NOP4
63398: PUSH
63399: NOP4
63403: ARRAY
63404: IFFALSE 64197
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63406: NOP4
63410: PUSH
63411: NOP4
63415: PUSH
63416: NOP4
63420: ARRAY
63421: PPUSH
63422: LD_INT 2
63424: PUSH
63425: LD_INT 30
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 30
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: LIST
63449: PPUSH
63450: NOP4
63454: ST_TO_ADDR
// if depot then
63455: NOP4
63459: IFFALSE 63477
// depot := depot [ 1 ] else
63461: NOP4
63465: PUSH
63466: NOP4
63470: PUSH
63471: LD_INT 1
63473: ARRAY
63474: ST_TO_ADDR
63475: GO 63485
// depot := 0 ;
63477: NOP4
63481: PUSH
63482: LD_INT 0
63484: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
63485: NOP4
63489: PUSH
63490: NOP4
63494: ARRAY
63495: PUSH
63496: LD_INT 1
63498: ARRAY
63499: PUSH
63500: LD_INT 1
63502: ARRAY
63503: PPUSH
63504: NOP4
63508: PUSH
63509: NOP4
63513: PUSH
63514: NOP4
63518: ARRAY
63519: PPUSH
63520: LD_INT 2
63522: PUSH
63523: LD_INT 30
63525: PUSH
63526: LD_INT 2
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 30
63535: PUSH
63536: LD_INT 3
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: LIST
63547: PPUSH
63548: NOP4
63552: NOT
63553: AND
63554: IFFALSE 63659
// begin for j = 1 to mc_build_list [ i ] do
63556: NOP4
63560: PUSH
63561: DOUBLE
63562: LD_INT 1
63564: DEC
63565: ST_TO_ADDR
63566: NOP4
63570: PUSH
63571: NOP4
63575: ARRAY
63576: PUSH
63577: FOR_TO
63578: IFFALSE 63657
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
63580: NOP4
63584: PUSH
63585: NOP4
63589: ARRAY
63590: PUSH
63591: NOP4
63595: ARRAY
63596: PUSH
63597: LD_INT 1
63599: ARRAY
63600: PUSH
63601: LD_INT 2
63603: EQUAL
63604: IFFALSE 63655
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
63606: NOP4
63610: PUSH
63611: NOP4
63615: PPUSH
63616: NOP4
63620: PPUSH
63621: NOP4
63625: PUSH
63626: NOP4
63630: ARRAY
63631: PPUSH
63632: NOP4
63636: PPUSH
63637: LD_INT 1
63639: PPUSH
63640: LD_INT 0
63642: PPUSH
63643: NOP4
63647: PPUSH
63648: NOP4
63652: ST_TO_ADDR
// break ;
63653: GO 63657
// end ;
63655: GO 63577
63657: POP
63658: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
63659: NOP4
63663: PUSH
63664: NOP4
63668: ARRAY
63669: PUSH
63670: LD_INT 1
63672: ARRAY
63673: PUSH
63674: LD_INT 1
63676: ARRAY
63677: PUSH
63678: LD_INT 0
63680: EQUAL
63681: PUSH
63682: NOP4
63686: PUSH
63687: NOP4
63691: PPUSH
63692: NOP4
63696: PUSH
63697: NOP4
63701: ARRAY
63702: PUSH
63703: LD_INT 1
63705: ARRAY
63706: PUSH
63707: LD_INT 1
63709: ARRAY
63710: PPUSH
63711: NOP4
63715: PUSH
63716: NOP4
63720: ARRAY
63721: PUSH
63722: LD_INT 1
63724: ARRAY
63725: PUSH
63726: LD_INT 2
63728: ARRAY
63729: PPUSH
63730: NOP4
63734: PUSH
63735: NOP4
63739: ARRAY
63740: PUSH
63741: LD_INT 1
63743: ARRAY
63744: PUSH
63745: LD_INT 3
63747: ARRAY
63748: PPUSH
63749: NOP4
63753: PUSH
63754: NOP4
63758: ARRAY
63759: PUSH
63760: LD_INT 1
63762: ARRAY
63763: PUSH
63764: LD_INT 4
63766: ARRAY
63767: PPUSH
63768: NOP4
63772: AND
63773: OR
63774: IFFALSE 64055
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
63776: NOP4
63780: PUSH
63781: NOP4
63785: PUSH
63786: NOP4
63790: ARRAY
63791: PPUSH
63792: LD_INT 25
63794: PUSH
63795: LD_INT 2
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PPUSH
63802: NOP4
63806: PUSH
63807: NOP4
63811: PUSH
63812: NOP4
63816: ARRAY
63817: DIFF
63818: ST_TO_ADDR
// if not tmp then
63819: NOP4
63823: NOT
63824: IFFALSE 63828
// continue ;
63826: GO 63073
// for j in tmp do
63828: NOP4
63832: PUSH
63833: NOP4
63837: PUSH
63838: FOR_IN
63839: IFFALSE 64051
// begin if not mc_builders [ i ] then
63841: NOP4
63845: PUSH
63846: NOP4
63850: ARRAY
63851: NOT
63852: IFFALSE 63910
// begin SetTag ( j , 103 ) ;
63854: NOP4
63858: PPUSH
63859: LD_INT 103
63861: PPUSH
63862: NOP4
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
63866: NOP4
63870: PUSH
63871: NOP4
63875: PPUSH
63876: NOP4
63880: PUSH
63881: NOP4
63885: PUSH
63886: NOP4
63890: ARRAY
63891: PUSH
63892: LD_INT 1
63894: PLUS
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PPUSH
63900: NOP4
63904: PPUSH
63905: NOP4
63909: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
63910: NOP4
63914: PPUSH
63915: NOP4
63919: IFFALSE 63930
// ComExitBuilding ( j ) ;
63921: NOP4
63925: PPUSH
63926: NOP4
// wait ( 3 ) ;
63930: LD_INT 3
63932: PPUSH
63933: NOP4
// if not mc_build_list [ i ] then
63937: NOP4
63941: PUSH
63942: NOP4
63946: ARRAY
63947: NOT
63948: IFFALSE 63952
// break ;
63950: GO 64051
// if not HasTask ( j ) then
63952: NOP4
63956: PPUSH
63957: NOP4
63961: NOT
63962: IFFALSE 64049
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
63964: NOP4
63968: PPUSH
63969: NOP4
63973: PUSH
63974: NOP4
63978: ARRAY
63979: PUSH
63980: LD_INT 1
63982: ARRAY
63983: PUSH
63984: LD_INT 1
63986: ARRAY
63987: PPUSH
63988: NOP4
63992: PUSH
63993: NOP4
63997: ARRAY
63998: PUSH
63999: LD_INT 1
64001: ARRAY
64002: PUSH
64003: LD_INT 2
64005: ARRAY
64006: PPUSH
64007: NOP4
64011: PUSH
64012: NOP4
64016: ARRAY
64017: PUSH
64018: LD_INT 1
64020: ARRAY
64021: PUSH
64022: LD_INT 3
64024: ARRAY
64025: PPUSH
64026: NOP4
64030: PUSH
64031: NOP4
64035: ARRAY
64036: PUSH
64037: LD_INT 1
64039: ARRAY
64040: PUSH
64041: LD_INT 4
64043: ARRAY
64044: PPUSH
64045: NOP4
// end ;
64049: GO 63838
64051: POP
64052: POP
// end else
64053: GO 64197
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
64055: NOP4
64059: PUSH
64060: NOP4
64064: ARRAY
64065: PPUSH
64066: NOP4
64070: PUSH
64071: NOP4
64075: ARRAY
64076: PUSH
64077: LD_INT 1
64079: ARRAY
64080: PUSH
64081: LD_INT 1
64083: ARRAY
64084: PPUSH
64085: NOP4
64089: PUSH
64090: NOP4
64094: ARRAY
64095: PUSH
64096: LD_INT 1
64098: ARRAY
64099: PUSH
64100: LD_INT 2
64102: ARRAY
64103: PPUSH
64104: NOP4
64108: PUSH
64109: NOP4
64113: ARRAY
64114: PUSH
64115: LD_INT 1
64117: ARRAY
64118: PUSH
64119: LD_INT 3
64121: ARRAY
64122: PPUSH
64123: NOP4
64127: PUSH
64128: NOP4
64132: ARRAY
64133: PUSH
64134: LD_INT 1
64136: ARRAY
64137: PUSH
64138: LD_INT 4
64140: ARRAY
64141: PPUSH
64142: NOP4
64146: NOT
64147: IFFALSE 64197
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
64149: NOP4
64153: PUSH
64154: NOP4
64158: PPUSH
64159: NOP4
64163: PPUSH
64164: NOP4
64168: PUSH
64169: NOP4
64173: ARRAY
64174: PPUSH
64175: LD_INT 1
64177: PPUSH
64178: LD_INT 1
64180: NEG
64181: PPUSH
64182: LD_INT 0
64184: PPUSH
64185: NOP4
64189: PPUSH
64190: NOP4
64194: ST_TO_ADDR
// continue ;
64195: GO 63073
// end ; end ; end ;
64197: GO 63073
64199: POP
64200: POP
// end ;
64201: LD_VAR 0 1
64205: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
64206: LD_INT 0
64208: PPUSH
64209: PPUSH
64210: PPUSH
64211: PPUSH
64212: PPUSH
64213: PPUSH
// if not mc_bases then
64214: NOP4
64218: NOT
64219: IFFALSE 64223
// exit ;
64221: GO 64650
// for i = 1 to mc_bases do
64223: NOP4
64227: PUSH
64228: DOUBLE
64229: LD_INT 1
64231: DEC
64232: ST_TO_ADDR
64233: NOP4
64237: PUSH
64238: FOR_TO
64239: IFFALSE 64648
// begin tmp := mc_build_upgrade [ i ] ;
64241: NOP4
64245: PUSH
64246: NOP4
64250: PUSH
64251: NOP4
64255: ARRAY
64256: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
64257: NOP4
64261: PUSH
64262: NOP4
64266: PUSH
64267: NOP4
64271: ARRAY
64272: PPUSH
64273: LD_INT 2
64275: PUSH
64276: LD_INT 30
64278: PUSH
64279: LD_INT 6
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 30
64288: PUSH
64289: LD_INT 7
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: LIST
64300: PPUSH
64301: NOP4
64305: ST_TO_ADDR
// if not tmp and not lab then
64306: NOP4
64310: NOT
64311: PUSH
64312: NOP4
64316: NOT
64317: AND
64318: IFFALSE 64322
// continue ;
64320: GO 64238
// if tmp then
64322: NOP4
64326: IFFALSE 64446
// for j in tmp do
64328: NOP4
64332: PUSH
64333: NOP4
64337: PUSH
64338: FOR_IN
64339: IFFALSE 64444
// begin if UpgradeCost ( j ) then
64341: NOP4
64345: PPUSH
64346: NOP4
64350: IFFALSE 64442
// begin ComUpgrade ( j ) ;
64352: NOP4
64356: PPUSH
64357: NOP4
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
64361: NOP4
64365: PUSH
64366: NOP4
64370: PPUSH
64371: NOP4
64375: PPUSH
64376: NOP4
64380: PUSH
64381: NOP4
64385: ARRAY
64386: PUSH
64387: NOP4
64391: DIFF
64392: PPUSH
64393: NOP4
64397: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
64398: NOP4
64402: PUSH
64403: NOP4
64407: PPUSH
64408: NOP4
64412: PUSH
64413: NOP4
64417: PUSH
64418: NOP4
64422: ARRAY
64423: PUSH
64424: LD_INT 1
64426: PLUS
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PPUSH
64432: NOP4
64436: PPUSH
64437: NOP4
64441: ST_TO_ADDR
// end ; end ;
64442: GO 64338
64444: POP
64445: POP
// if not lab or not mc_lab_upgrade [ i ] then
64446: NOP4
64450: NOT
64451: PUSH
64452: NOP4
64456: PUSH
64457: NOP4
64461: ARRAY
64462: NOT
64463: OR
64464: IFFALSE 64468
// continue ;
64466: GO 64238
// for j in lab do
64468: NOP4
64472: PUSH
64473: NOP4
64477: PUSH
64478: FOR_IN
64479: IFFALSE 64644
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
64481: NOP4
64485: PPUSH
64486: NOP4
64490: PUSH
64491: LD_INT 6
64493: PUSH
64494: LD_INT 7
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: IN
64501: PUSH
64502: NOP4
64506: PPUSH
64507: NOP4
64511: PUSH
64512: LD_INT 1
64514: NONEQUAL
64515: AND
64516: IFFALSE 64642
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
64518: NOP4
64522: PPUSH
64523: NOP4
64527: PUSH
64528: NOP4
64532: ARRAY
64533: PUSH
64534: LD_INT 1
64536: ARRAY
64537: PPUSH
64538: NOP4
64542: IFFALSE 64642
// begin ComCancel ( j ) ;
64544: NOP4
64548: PPUSH
64549: NOP4
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
64553: NOP4
64557: PPUSH
64558: NOP4
64562: PUSH
64563: NOP4
64567: ARRAY
64568: PUSH
64569: LD_INT 1
64571: ARRAY
64572: PPUSH
64573: NOP4
// if not j in mc_construct_list [ i ] then
64577: NOP4
64581: PUSH
64582: NOP4
64586: PUSH
64587: NOP4
64591: ARRAY
64592: IN
64593: NOT
64594: IFFALSE 64640
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
64596: NOP4
64600: PUSH
64601: NOP4
64605: PPUSH
64606: NOP4
64610: PUSH
64611: NOP4
64615: PUSH
64616: NOP4
64620: ARRAY
64621: PUSH
64622: LD_INT 1
64624: PLUS
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PPUSH
64630: NOP4
64634: PPUSH
64635: NOP4
64639: ST_TO_ADDR
// break ;
64640: GO 64644
// end ; end ; end ;
64642: GO 64478
64644: POP
64645: POP
// end ;
64646: GO 64238
64648: POP
64649: POP
// end ;
64650: LD_VAR 0 1
64654: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
64655: LD_INT 0
64657: PPUSH
64658: PPUSH
64659: PPUSH
64660: PPUSH
64661: PPUSH
64662: PPUSH
64663: PPUSH
64664: PPUSH
64665: PPUSH
// if not mc_bases then
64666: NOP4
64670: NOT
64671: IFFALSE 64675
// exit ;
64673: GO 65080
// for i = 1 to mc_bases do
64675: NOP4
64679: PUSH
64680: DOUBLE
64681: LD_INT 1
64683: DEC
64684: ST_TO_ADDR
64685: NOP4
64689: PUSH
64690: FOR_TO
64691: IFFALSE 65078
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
64693: NOP4
64697: PUSH
64698: NOP4
64702: ARRAY
64703: NOT
64704: PUSH
64705: NOP4
64709: PUSH
64710: NOP4
64714: ARRAY
64715: PPUSH
64716: LD_INT 30
64718: PUSH
64719: LD_INT 3
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PPUSH
64726: NOP4
64730: NOT
64731: OR
64732: IFFALSE 64736
// continue ;
64734: GO 64690
// busy := false ;
64736: NOP4
64740: PUSH
64741: LD_INT 0
64743: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
64744: NOP4
64748: PUSH
64749: NOP4
64753: PUSH
64754: NOP4
64758: ARRAY
64759: PPUSH
64760: LD_INT 30
64762: PUSH
64763: LD_INT 3
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PPUSH
64770: NOP4
64774: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
64775: NOP4
64779: PUSH
64780: NOP4
64784: PUSH
64785: NOP4
64789: ARRAY
64790: PPUSH
64791: LD_INT 2
64793: PUSH
64794: LD_INT 30
64796: PUSH
64797: LD_INT 32
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 30
64806: PUSH
64807: LD_INT 33
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: LIST
64818: PPUSH
64819: NOP4
64823: ST_TO_ADDR
// if not t then
64824: NOP4
64828: NOT
64829: IFFALSE 64833
// continue ;
64831: GO 64690
// for j in tmp do
64833: NOP4
64837: PUSH
64838: NOP4
64842: PUSH
64843: FOR_IN
64844: IFFALSE 64874
// if not BuildingStatus ( j ) = bs_idle then
64846: NOP4
64850: PPUSH
64851: NOP4
64855: PUSH
64856: LD_INT 2
64858: EQUAL
64859: NOT
64860: IFFALSE 64872
// begin busy := true ;
64862: NOP4
64866: PUSH
64867: LD_INT 1
64869: ST_TO_ADDR
// break ;
64870: GO 64874
// end ;
64872: GO 64843
64874: POP
64875: POP
// if busy then
64876: NOP4
64880: IFFALSE 64884
// continue ;
64882: GO 64690
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
64884: NOP4
64888: PUSH
64889: NOP4
64893: PPUSH
64894: LD_INT 35
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PPUSH
64904: NOP4
64908: ST_TO_ADDR
// if tw then
64909: NOP4
64913: IFFALSE 64990
// begin tw := tw [ 1 ] ;
64915: NOP4
64919: PUSH
64920: NOP4
64924: PUSH
64925: LD_INT 1
64927: ARRAY
64928: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
64929: NOP4
64933: PUSH
64934: NOP4
64938: PPUSH
64939: NOP4
64943: PUSH
64944: NOP4
64948: ARRAY
64949: PPUSH
64950: NOP4
64954: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
64955: NOP4
64959: PUSH
64960: NOP4
64964: ARRAY
64965: IFFALSE 64988
// if not weapon in mc_allowed_tower_weapons [ i ] then
64967: NOP4
64971: PUSH
64972: NOP4
64976: PUSH
64977: NOP4
64981: ARRAY
64982: IN
64983: NOT
64984: IFFALSE 64988
// continue ;
64986: GO 64690
// end else
64988: GO 65053
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
64990: NOP4
64994: PUSH
64995: NOP4
64999: PUSH
65000: NOP4
65004: ARRAY
65005: PPUSH
65006: NOP4
65010: PPUSH
65011: NOP4
65015: ST_TO_ADDR
// if not tmp2 then
65016: NOP4
65020: NOT
65021: IFFALSE 65025
// continue ;
65023: GO 64690
// tw := tmp2 [ 1 ] ;
65025: NOP4
65029: PUSH
65030: NOP4
65034: PUSH
65035: LD_INT 1
65037: ARRAY
65038: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
65039: NOP4
65043: PUSH
65044: NOP4
65048: PUSH
65049: LD_INT 2
65051: ARRAY
65052: ST_TO_ADDR
// end ; if not weapon then
65053: NOP4
65057: NOT
65058: IFFALSE 65062
// continue ;
65060: GO 64690
// ComPlaceWeapon ( tw , weapon ) ;
65062: NOP4
65066: PPUSH
65067: NOP4
65071: PPUSH
65072: NOP4
// end ;
65076: GO 64690
65078: POP
65079: POP
// end ;
65080: LD_VAR 0 1
65084: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
65085: LD_INT 0
65087: PPUSH
65088: PPUSH
65089: PPUSH
65090: PPUSH
65091: PPUSH
65092: PPUSH
// if not mc_bases then
65093: NOP4
65097: NOT
65098: IFFALSE 65102
// exit ;
65100: GO 66114
// for i = 1 to mc_bases do
65102: NOP4
65106: PUSH
65107: DOUBLE
65108: LD_INT 1
65110: DEC
65111: ST_TO_ADDR
65112: NOP4
65116: PUSH
65117: FOR_TO
65118: IFFALSE 66112
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
65120: NOP4
65124: PUSH
65125: NOP4
65129: ARRAY
65130: NOT
65131: PUSH
65132: NOP4
65136: PUSH
65137: NOP4
65141: ARRAY
65142: PUSH
65143: NOP4
65147: PUSH
65148: NOP4
65152: ARRAY
65153: EQUAL
65154: OR
65155: IFFALSE 65159
// continue ;
65157: GO 65117
// if mc_miners [ i ] then
65159: NOP4
65163: PUSH
65164: NOP4
65168: ARRAY
65169: IFFALSE 65799
// begin k := 1 ;
65171: NOP4
65175: PUSH
65176: LD_INT 1
65178: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
65179: NOP4
65183: PUSH
65184: DOUBLE
65185: NOP4
65189: PUSH
65190: NOP4
65194: ARRAY
65195: INC
65196: ST_TO_ADDR
65197: LD_INT 1
65199: PUSH
65200: FOR_DOWNTO
65201: IFFALSE 65797
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
65203: NOP4
65207: PUSH
65208: NOP4
65212: ARRAY
65213: PUSH
65214: NOP4
65218: ARRAY
65219: PPUSH
65220: NOP4
65224: PUSH
65225: NOP4
65229: PUSH
65230: NOP4
65234: ARRAY
65235: PUSH
65236: NOP4
65240: ARRAY
65241: PPUSH
65242: NOP4
65246: PUSH
65247: LD_INT 1
65249: NONEQUAL
65250: OR
65251: IFFALSE 65314
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
65253: NOP4
65257: PUSH
65258: NOP4
65262: PUSH
65263: NOP4
65267: ARRAY
65268: PUSH
65269: NOP4
65273: PUSH
65274: NOP4
65278: ARRAY
65279: PUSH
65280: NOP4
65284: ARRAY
65285: DIFF
65286: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
65287: NOP4
65291: PUSH
65292: NOP4
65296: PPUSH
65297: NOP4
65301: PPUSH
65302: NOP4
65306: PPUSH
65307: NOP4
65311: ST_TO_ADDR
// continue ;
65312: GO 65200
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
65314: NOP4
65318: PUSH
65319: NOP4
65323: ARRAY
65324: PUSH
65325: NOP4
65329: ARRAY
65330: PPUSH
65331: NOP4
65335: PUSH
65336: NOP4
65340: PUSH
65341: NOP4
65345: ARRAY
65346: PUSH
65347: NOP4
65351: ARRAY
65352: PPUSH
65353: NOP4
65357: PPUSH
65358: NOP4
65362: PUSH
65363: NOP4
65367: ARRAY
65368: PUSH
65369: NOP4
65373: ARRAY
65374: PUSH
65375: LD_INT 1
65377: ARRAY
65378: PPUSH
65379: NOP4
65383: PUSH
65384: NOP4
65388: ARRAY
65389: PUSH
65390: NOP4
65394: ARRAY
65395: PUSH
65396: LD_INT 2
65398: ARRAY
65399: PPUSH
65400: LD_INT 15
65402: PPUSH
65403: NOP4
65407: PUSH
65408: LD_INT 4
65410: ARRAY
65411: PUSH
65412: NOP4
65416: PUSH
65417: NOP4
65421: ARRAY
65422: PUSH
65423: NOP4
65427: ARRAY
65428: PPUSH
65429: LD_INT 10
65431: PPUSH
65432: NOP4
65436: PUSH
65437: LD_INT 4
65439: ARRAY
65440: OR
65441: AND
65442: IFFALSE 65465
// ComStop ( mc_miners [ i ] [ j ] ) ;
65444: NOP4
65448: PUSH
65449: NOP4
65453: ARRAY
65454: PUSH
65455: NOP4
65459: ARRAY
65460: PPUSH
65461: NOP4
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
65465: NOP4
65469: PUSH
65470: NOP4
65474: ARRAY
65475: PUSH
65476: NOP4
65480: ARRAY
65481: PPUSH
65482: NOP4
65486: PUSH
65487: LD_INT 1
65489: EQUAL
65490: PUSH
65491: NOP4
65495: PUSH
65496: NOP4
65500: ARRAY
65501: PUSH
65502: NOP4
65506: ARRAY
65507: PPUSH
65508: NOP4
65512: NOT
65513: AND
65514: PUSH
65515: NOP4
65519: PUSH
65520: NOP4
65524: ARRAY
65525: PUSH
65526: NOP4
65530: ARRAY
65531: PPUSH
65532: NOP4
65536: PPUSH
65537: NOP4
65541: PUSH
65542: NOP4
65546: ARRAY
65547: PUSH
65548: NOP4
65552: ARRAY
65553: PUSH
65554: LD_INT 1
65556: ARRAY
65557: PPUSH
65558: NOP4
65562: PUSH
65563: NOP4
65567: ARRAY
65568: PUSH
65569: NOP4
65573: ARRAY
65574: PUSH
65575: LD_INT 2
65577: ARRAY
65578: PPUSH
65579: LD_INT 15
65581: PPUSH
65582: NOP4
65586: PUSH
65587: LD_INT 4
65589: ARRAY
65590: PUSH
65591: LD_INT 0
65593: EQUAL
65594: AND
65595: PUSH
65596: NOP4
65600: PUSH
65601: NOP4
65605: ARRAY
65606: PUSH
65607: NOP4
65611: ARRAY
65612: PPUSH
65613: NOP4
65617: NOT
65618: AND
65619: IFFALSE 65795
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
65621: NOP4
65625: PUSH
65626: NOP4
65630: ARRAY
65631: PUSH
65632: NOP4
65636: ARRAY
65637: PPUSH
65638: NOP4
65642: IFFALSE 65665
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
65644: NOP4
65648: PUSH
65649: NOP4
65653: ARRAY
65654: PUSH
65655: NOP4
65659: ARRAY
65660: PPUSH
65661: NOP4
// if not HasTask ( mc_miners [ i ] [ j ] ) then
65665: NOP4
65669: PUSH
65670: NOP4
65674: ARRAY
65675: PUSH
65676: NOP4
65680: ARRAY
65681: PPUSH
65682: NOP4
65686: NOT
65687: IFFALSE 65755
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
65689: NOP4
65693: PUSH
65694: NOP4
65698: ARRAY
65699: PUSH
65700: NOP4
65704: ARRAY
65705: PPUSH
65706: NOP4
65710: PUSH
65711: NOP4
65715: ARRAY
65716: PUSH
65717: NOP4
65721: ARRAY
65722: PUSH
65723: LD_INT 1
65725: ARRAY
65726: PPUSH
65727: NOP4
65731: PUSH
65732: NOP4
65736: ARRAY
65737: PUSH
65738: NOP4
65742: ARRAY
65743: PUSH
65744: LD_INT 2
65746: ARRAY
65747: PPUSH
65748: LD_INT 0
65750: PPUSH
65751: NOP4
// k := k + 1 ;
65755: NOP4
65759: PUSH
65760: NOP4
65764: PUSH
65765: LD_INT 1
65767: PLUS
65768: ST_TO_ADDR
// if k > mc_mines [ i ] then
65769: NOP4
65773: PUSH
65774: NOP4
65778: PUSH
65779: NOP4
65783: ARRAY
65784: GREATER
65785: IFFALSE 65795
// k := 1 ;
65787: NOP4
65791: PUSH
65792: LD_INT 1
65794: ST_TO_ADDR
// end ; end ;
65795: GO 65200
65797: POP
65798: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
65799: NOP4
65803: PUSH
65804: NOP4
65808: PUSH
65809: NOP4
65813: ARRAY
65814: PPUSH
65815: LD_INT 2
65817: PUSH
65818: LD_INT 30
65820: PUSH
65821: LD_INT 4
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 30
65830: PUSH
65831: LD_INT 5
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 30
65840: PUSH
65841: LD_INT 32
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: PPUSH
65854: NOP4
65858: ST_TO_ADDR
// if not tmp then
65859: NOP4
65863: NOT
65864: IFFALSE 65868
// continue ;
65866: GO 65117
// list := [ ] ;
65868: NOP4
65872: PUSH
65873: EMPTY
65874: ST_TO_ADDR
// for j in tmp do
65875: NOP4
65879: PUSH
65880: NOP4
65884: PUSH
65885: FOR_IN
65886: IFFALSE 65955
// begin for k in UnitsInside ( j ) do
65888: NOP4
65892: PUSH
65893: NOP4
65897: PPUSH
65898: NOP4
65902: PUSH
65903: FOR_IN
65904: IFFALSE 65951
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
65906: NOP4
65910: PPUSH
65911: NOP4
65915: PUSH
65916: LD_INT 1
65918: EQUAL
65919: PUSH
65920: NOP4
65924: PPUSH
65925: NOP4
65929: NOT
65930: AND
65931: IFFALSE 65949
// list := list ^ k ;
65933: NOP4
65937: PUSH
65938: NOP4
65942: PUSH
65943: NOP4
65947: ADD
65948: ST_TO_ADDR
65949: GO 65903
65951: POP
65952: POP
// end ;
65953: GO 65885
65955: POP
65956: POP
// list := list diff mc_miners [ i ] ;
65957: NOP4
65961: PUSH
65962: NOP4
65966: PUSH
65967: NOP4
65971: PUSH
65972: NOP4
65976: ARRAY
65977: DIFF
65978: ST_TO_ADDR
// if not list then
65979: NOP4
65983: NOT
65984: IFFALSE 65988
// continue ;
65986: GO 65117
// k := mc_mines [ i ] - mc_miners [ i ] ;
65988: NOP4
65992: PUSH
65993: NOP4
65997: PUSH
65998: NOP4
66002: ARRAY
66003: PUSH
66004: NOP4
66008: PUSH
66009: NOP4
66013: ARRAY
66014: MINUS
66015: ST_TO_ADDR
// if k > list then
66016: NOP4
66020: PUSH
66021: NOP4
66025: GREATER
66026: IFFALSE 66038
// k := list ;
66028: NOP4
66032: PUSH
66033: NOP4
66037: ST_TO_ADDR
// for j = 1 to k do
66038: NOP4
66042: PUSH
66043: DOUBLE
66044: LD_INT 1
66046: DEC
66047: ST_TO_ADDR
66048: NOP4
66052: PUSH
66053: FOR_TO
66054: IFFALSE 66108
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
66056: NOP4
66060: PUSH
66061: NOP4
66065: PPUSH
66066: NOP4
66070: PUSH
66071: NOP4
66075: PUSH
66076: NOP4
66080: ARRAY
66081: PUSH
66082: LD_INT 1
66084: PLUS
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PPUSH
66090: NOP4
66094: PUSH
66095: NOP4
66099: ARRAY
66100: PPUSH
66101: NOP4
66105: ST_TO_ADDR
66106: GO 66053
66108: POP
66109: POP
// end ;
66110: GO 65117
66112: POP
66113: POP
// end ;
66114: LD_VAR 0 1
66118: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
66119: LD_INT 0
66121: PPUSH
66122: PPUSH
66123: PPUSH
66124: PPUSH
66125: PPUSH
66126: PPUSH
66127: PPUSH
66128: PPUSH
66129: PPUSH
66130: PPUSH
// if not mc_bases then
66131: NOP4
66135: NOT
66136: IFFALSE 66140
// exit ;
66138: GO 67890
// for i = 1 to mc_bases do
66140: NOP4
66144: PUSH
66145: DOUBLE
66146: LD_INT 1
66148: DEC
66149: ST_TO_ADDR
66150: NOP4
66154: PUSH
66155: FOR_TO
66156: IFFALSE 67888
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
66158: NOP4
66162: PUSH
66163: NOP4
66167: ARRAY
66168: NOT
66169: PUSH
66170: NOP4
66174: PUSH
66175: NOP4
66179: ARRAY
66180: OR
66181: IFFALSE 66185
// continue ;
66183: GO 66155
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
66185: NOP4
66189: PUSH
66190: NOP4
66194: ARRAY
66195: NOT
66196: PUSH
66197: NOP4
66201: PUSH
66202: NOP4
66206: ARRAY
66207: AND
66208: IFFALSE 66246
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
66210: NOP4
66214: PUSH
66215: NOP4
66219: PPUSH
66220: NOP4
66224: PPUSH
66225: EMPTY
66226: PPUSH
66227: NOP4
66231: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
66232: NOP4
66236: PPUSH
66237: LD_INT 107
66239: PPUSH
66240: NOP4
// continue ;
66244: GO 66155
// end ; target := [ ] ;
66246: NOP4
66250: PUSH
66251: EMPTY
66252: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
66253: NOP4
66257: PUSH
66258: DOUBLE
66259: NOP4
66263: PUSH
66264: NOP4
66268: ARRAY
66269: INC
66270: ST_TO_ADDR
66271: LD_INT 1
66273: PUSH
66274: FOR_DOWNTO
66275: IFFALSE 66535
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
66277: NOP4
66281: PUSH
66282: NOP4
66286: ARRAY
66287: PUSH
66288: NOP4
66292: ARRAY
66293: PUSH
66294: LD_INT 2
66296: ARRAY
66297: PPUSH
66298: NOP4
66302: PUSH
66303: NOP4
66307: ARRAY
66308: PUSH
66309: NOP4
66313: ARRAY
66314: PUSH
66315: LD_INT 3
66317: ARRAY
66318: PPUSH
66319: NOP4
66323: PUSH
66324: NOP4
66328: PUSH
66329: NOP4
66333: ARRAY
66334: PUSH
66335: NOP4
66339: ARRAY
66340: PUSH
66341: LD_INT 2
66343: ARRAY
66344: PPUSH
66345: NOP4
66349: PUSH
66350: NOP4
66354: ARRAY
66355: PUSH
66356: NOP4
66360: ARRAY
66361: PUSH
66362: LD_INT 3
66364: ARRAY
66365: PPUSH
66366: NOP4
66370: PUSH
66371: LD_INT 0
66373: EQUAL
66374: AND
66375: IFFALSE 66430
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
66377: NOP4
66381: PUSH
66382: NOP4
66386: PUSH
66387: NOP4
66391: ARRAY
66392: PPUSH
66393: NOP4
66397: PPUSH
66398: NOP4
66402: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
66403: NOP4
66407: PUSH
66408: NOP4
66412: PPUSH
66413: NOP4
66417: PPUSH
66418: NOP4
66422: PPUSH
66423: NOP4
66427: ST_TO_ADDR
// continue ;
66428: GO 66274
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
66430: NOP4
66434: PUSH
66435: NOP4
66439: ARRAY
66440: PUSH
66441: LD_INT 1
66443: ARRAY
66444: PPUSH
66445: NOP4
66449: PPUSH
66450: NOP4
66454: PUSH
66455: NOP4
66459: ARRAY
66460: PUSH
66461: NOP4
66465: ARRAY
66466: PUSH
66467: LD_INT 2
66469: ARRAY
66470: PPUSH
66471: NOP4
66475: PUSH
66476: NOP4
66480: ARRAY
66481: PUSH
66482: NOP4
66486: ARRAY
66487: PUSH
66488: LD_INT 3
66490: ARRAY
66491: PPUSH
66492: LD_INT 30
66494: PPUSH
66495: NOP4
66499: PUSH
66500: LD_INT 4
66502: ARRAY
66503: PUSH
66504: LD_INT 0
66506: EQUAL
66507: IFFALSE 66533
// begin target := mc_crates [ i ] [ j ] ;
66509: NOP4
66513: PUSH
66514: NOP4
66518: PUSH
66519: NOP4
66523: ARRAY
66524: PUSH
66525: NOP4
66529: ARRAY
66530: ST_TO_ADDR
// break ;
66531: GO 66535
// end ; end ;
66533: GO 66274
66535: POP
66536: POP
// if not target then
66537: NOP4
66541: NOT
66542: IFFALSE 66546
// continue ;
66544: GO 66155
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
66546: NOP4
66550: PUSH
66551: NOP4
66555: PUSH
66556: NOP4
66560: ARRAY
66561: PPUSH
66562: LD_INT 2
66564: PUSH
66565: LD_INT 3
66567: PUSH
66568: LD_INT 58
66570: PUSH
66571: EMPTY
66572: LIST
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 61
66580: PUSH
66581: EMPTY
66582: LIST
66583: PUSH
66584: LD_INT 33
66586: PUSH
66587: LD_INT 5
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 33
66596: PUSH
66597: LD_INT 3
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 2
66613: PUSH
66614: LD_INT 34
66616: PUSH
66617: LD_INT 32
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 34
66626: PUSH
66627: LD_INT 51
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 34
66636: PUSH
66637: LD_INT 12
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PPUSH
66654: NOP4
66658: ST_TO_ADDR
// if not cargo then
66659: NOP4
66663: NOT
66664: IFFALSE 67307
// begin if mc_crates_collector [ i ] < 5 then
66666: NOP4
66670: PUSH
66671: NOP4
66675: ARRAY
66676: PUSH
66677: LD_INT 5
66679: LESS
66680: IFFALSE 67046
// begin if mc_ape [ i ] then
66682: NOP4
66686: PUSH
66687: NOP4
66691: ARRAY
66692: IFFALSE 66739
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
66694: NOP4
66698: PUSH
66699: NOP4
66703: PUSH
66704: NOP4
66708: ARRAY
66709: PPUSH
66710: LD_INT 25
66712: PUSH
66713: LD_INT 16
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 24
66722: PUSH
66723: LD_INT 750
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PPUSH
66734: NOP4
66738: ST_TO_ADDR
// if not tmp then
66739: NOP4
66743: NOT
66744: IFFALSE 66791
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
66746: NOP4
66750: PUSH
66751: NOP4
66755: PUSH
66756: NOP4
66760: ARRAY
66761: PPUSH
66762: LD_INT 25
66764: PUSH
66765: LD_INT 2
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 24
66774: PUSH
66775: LD_INT 750
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PPUSH
66786: NOP4
66790: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
66791: NOP4
66795: PUSH
66796: NOP4
66800: ARRAY
66801: PUSH
66802: NOP4
66806: PUSH
66807: NOP4
66811: ARRAY
66812: PPUSH
66813: LD_INT 25
66815: PUSH
66816: LD_INT 2
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 24
66825: PUSH
66826: LD_INT 750
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PPUSH
66837: NOP4
66841: AND
66842: PUSH
66843: NOP4
66847: PUSH
66848: LD_INT 5
66850: LESS
66851: AND
66852: IFFALSE 66934
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
66854: NOP4
66858: PUSH
66859: NOP4
66863: PUSH
66864: NOP4
66868: ARRAY
66869: PPUSH
66870: LD_INT 25
66872: PUSH
66873: LD_INT 2
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 24
66882: PUSH
66883: LD_INT 750
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PPUSH
66894: NOP4
66898: PUSH
66899: FOR_IN
66900: IFFALSE 66932
// begin tmp := tmp union j ;
66902: NOP4
66906: PUSH
66907: NOP4
66911: PUSH
66912: NOP4
66916: UNION
66917: ST_TO_ADDR
// if tmp >= 5 then
66918: NOP4
66922: PUSH
66923: LD_INT 5
66925: GREATEREQUAL
66926: IFFALSE 66930
// break ;
66928: GO 66932
// end ;
66930: GO 66899
66932: POP
66933: POP
// end ; if not tmp then
66934: NOP4
66938: NOT
66939: IFFALSE 66943
// continue ;
66941: GO 66155
// for j in tmp do
66943: NOP4
66947: PUSH
66948: NOP4
66952: PUSH
66953: FOR_IN
66954: IFFALSE 67044
// if not GetTag ( j ) then
66956: NOP4
66960: PPUSH
66961: NOP4
66965: NOT
66966: IFFALSE 67042
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
66968: NOP4
66972: PUSH
66973: NOP4
66977: PPUSH
66978: NOP4
66982: PUSH
66983: NOP4
66987: PUSH
66988: NOP4
66992: ARRAY
66993: PUSH
66994: LD_INT 1
66996: PLUS
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PPUSH
67002: NOP4
67006: PPUSH
67007: NOP4
67011: ST_TO_ADDR
// SetTag ( j , 107 ) ;
67012: NOP4
67016: PPUSH
67017: LD_INT 107
67019: PPUSH
67020: NOP4
// if mc_crates_collector [ i ] >= 5 then
67024: NOP4
67028: PUSH
67029: NOP4
67033: ARRAY
67034: PUSH
67035: LD_INT 5
67037: GREATEREQUAL
67038: IFFALSE 67042
// break ;
67040: GO 67044
// end ;
67042: GO 66953
67044: POP
67045: POP
// end ; if mc_crates_collector [ i ] and target then
67046: NOP4
67050: PUSH
67051: NOP4
67055: ARRAY
67056: PUSH
67057: NOP4
67061: AND
67062: IFFALSE 67305
// begin if mc_crates_collector [ i ] < target [ 1 ] then
67064: NOP4
67068: PUSH
67069: NOP4
67073: ARRAY
67074: PUSH
67075: NOP4
67079: PUSH
67080: LD_INT 1
67082: ARRAY
67083: LESS
67084: IFFALSE 67104
// tmp := mc_crates_collector [ i ] else
67086: NOP4
67090: PUSH
67091: NOP4
67095: PUSH
67096: NOP4
67100: ARRAY
67101: ST_TO_ADDR
67102: GO 67118
// tmp := target [ 1 ] ;
67104: NOP4
67108: PUSH
67109: NOP4
67113: PUSH
67114: LD_INT 1
67116: ARRAY
67117: ST_TO_ADDR
// k := 0 ;
67118: NOP4
67122: PUSH
67123: LD_INT 0
67125: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
67126: NOP4
67130: PUSH
67131: NOP4
67135: PUSH
67136: NOP4
67140: ARRAY
67141: PUSH
67142: FOR_IN
67143: IFFALSE 67303
// begin k := k + 1 ;
67145: NOP4
67149: PUSH
67150: NOP4
67154: PUSH
67155: LD_INT 1
67157: PLUS
67158: ST_TO_ADDR
// if k > tmp then
67159: NOP4
67163: PUSH
67164: NOP4
67168: GREATER
67169: IFFALSE 67173
// break ;
67171: GO 67303
// if not GetClass ( j ) in [ 2 , 16 ] then
67173: NOP4
67177: PPUSH
67178: NOP4
67182: PUSH
67183: LD_INT 2
67185: PUSH
67186: LD_INT 16
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: IN
67193: NOT
67194: IFFALSE 67247
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
67196: NOP4
67200: PUSH
67201: NOP4
67205: PPUSH
67206: NOP4
67210: PPUSH
67211: NOP4
67215: PUSH
67216: NOP4
67220: ARRAY
67221: PUSH
67222: NOP4
67226: DIFF
67227: PPUSH
67228: NOP4
67232: ST_TO_ADDR
// SetTag ( j , 0 ) ;
67233: NOP4
67237: PPUSH
67238: LD_INT 0
67240: PPUSH
67241: NOP4
// continue ;
67245: GO 67142
// end ; if IsInUnit ( j ) then
67247: NOP4
67251: PPUSH
67252: NOP4
67256: IFFALSE 67267
// ComExitBuilding ( j ) ;
67258: NOP4
67262: PPUSH
67263: NOP4
// wait ( 3 ) ;
67267: LD_INT 3
67269: PPUSH
67270: NOP4
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
67274: NOP4
67278: PPUSH
67279: NOP4
67283: PUSH
67284: LD_INT 2
67286: ARRAY
67287: PPUSH
67288: NOP4
67292: PUSH
67293: LD_INT 3
67295: ARRAY
67296: PPUSH
67297: NOP4
// end ;
67301: GO 67142
67303: POP
67304: POP
// end ; end else
67305: GO 67886
// begin for j in cargo do
67307: NOP4
67311: PUSH
67312: NOP4
67316: PUSH
67317: FOR_IN
67318: IFFALSE 67884
// begin if GetTag ( j ) <> 0 then
67320: NOP4
67324: PPUSH
67325: NOP4
67329: PUSH
67330: LD_INT 0
67332: NONEQUAL
67333: IFFALSE 67337
// continue ;
67335: GO 67317
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
67337: NOP4
67341: PPUSH
67342: NOP4
67346: PUSH
67347: LD_INT 1000
67349: LESS
67350: PUSH
67351: NOP4
67355: PPUSH
67356: NOP4
67360: PUSH
67361: NOP4
67365: ARRAY
67366: PPUSH
67367: NOP4
67371: NOT
67372: AND
67373: IFFALSE 67395
// ComMoveToArea ( j , mc_parking [ i ] ) ;
67375: NOP4
67379: PPUSH
67380: NOP4
67384: PUSH
67385: NOP4
67389: ARRAY
67390: PPUSH
67391: NOP4
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
67395: NOP4
67399: PPUSH
67400: NOP4
67404: PUSH
67405: LD_INT 1000
67407: LESS
67408: PUSH
67409: NOP4
67413: PPUSH
67414: NOP4
67418: PUSH
67419: NOP4
67423: ARRAY
67424: PPUSH
67425: NOP4
67429: AND
67430: IFFALSE 67434
// continue ;
67432: GO 67317
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
67434: NOP4
67438: PPUSH
67439: NOP4
67443: PUSH
67444: LD_INT 2
67446: EQUAL
67447: PUSH
67448: NOP4
67452: PPUSH
67453: NOP4
67457: PUSH
67458: LD_INT 15
67460: LESS
67461: AND
67462: IFFALSE 67466
// continue ;
67464: GO 67317
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
67466: NOP4
67470: PPUSH
67471: NOP4
67475: PUSH
67476: LD_INT 1
67478: EQUAL
67479: PUSH
67480: NOP4
67484: PPUSH
67485: NOP4
67489: PUSH
67490: LD_INT 10
67492: LESS
67493: AND
67494: IFFALSE 67823
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67496: NOP4
67500: PUSH
67501: NOP4
67505: PUSH
67506: NOP4
67510: ARRAY
67511: PPUSH
67512: LD_INT 2
67514: PUSH
67515: LD_INT 30
67517: PUSH
67518: LD_INT 0
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 30
67527: PUSH
67528: LD_INT 1
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: LIST
67539: PPUSH
67540: NOP4
67544: ST_TO_ADDR
// if not depot then
67545: NOP4
67549: NOT
67550: IFFALSE 67554
// continue ;
67552: GO 67317
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
67554: NOP4
67558: PPUSH
67559: NOP4
67563: PPUSH
67564: NOP4
67568: PPUSH
67569: NOP4
67573: PPUSH
67574: NOP4
67578: PUSH
67579: LD_INT 6
67581: LESS
67582: IFFALSE 67598
// SetFuel ( j , 100 ) else
67584: NOP4
67588: PPUSH
67589: LD_INT 100
67591: PPUSH
67592: NOP4
67596: GO 67823
// if GetFuel ( j ) = 0 then
67598: NOP4
67602: PPUSH
67603: NOP4
67607: PUSH
67608: LD_INT 0
67610: EQUAL
67611: IFFALSE 67823
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
67613: NOP4
67617: PUSH
67618: NOP4
67622: PPUSH
67623: NOP4
67627: PPUSH
67628: NOP4
67632: PUSH
67633: NOP4
67637: ARRAY
67638: PUSH
67639: NOP4
67643: DIFF
67644: PPUSH
67645: NOP4
67649: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
67650: NOP4
67654: PPUSH
67655: NOP4
67659: PUSH
67660: LD_INT 1
67662: EQUAL
67663: IFFALSE 67679
// ComExitVehicle ( IsInUnit ( j ) ) ;
67665: NOP4
67669: PPUSH
67670: NOP4
67674: PPUSH
67675: NOP4
// if GetControl ( j ) = control_remote then
67679: NOP4
67683: PPUSH
67684: NOP4
67688: PUSH
67689: LD_INT 2
67691: EQUAL
67692: IFFALSE 67703
// ComUnlink ( j ) ;
67694: NOP4
67698: PPUSH
67699: NOP4
// fac := MC_GetBuildings ( i , b_factory ) ;
67703: NOP4
67707: PUSH
67708: NOP4
67712: PPUSH
67713: LD_INT 3
67715: PPUSH
67716: NOP4
67720: ST_TO_ADDR
// if fac then
67721: NOP4
67725: IFFALSE 67821
// begin for k in fac do
67727: NOP4
67731: PUSH
67732: NOP4
67736: PUSH
67737: FOR_IN
67738: IFFALSE 67819
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
67740: NOP4
67744: PUSH
67745: NOP4
67749: PPUSH
67750: NOP4
67754: PPUSH
67755: NOP4
67759: PPUSH
67760: NOP4
67764: PPUSH
67765: NOP4
67769: PPUSH
67770: NOP4
67774: PPUSH
67775: NOP4
67779: PPUSH
67780: NOP4
67784: PPUSH
67785: NOP4
67789: PPUSH
67790: NOP4
67794: ST_TO_ADDR
// if components then
67795: NOP4
67799: IFFALSE 67817
// begin MC_InsertProduceList ( i , components ) ;
67801: NOP4
67805: PPUSH
67806: NOP4
67810: PPUSH
67811: NOP4
// break ;
67815: GO 67819
// end ; end ;
67817: GO 67737
67819: POP
67820: POP
// end ; continue ;
67821: GO 67317
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
67823: NOP4
67827: PPUSH
67828: LD_INT 1
67830: PPUSH
67831: NOP4
67835: PUSH
67836: LD_INT 100
67838: LESS
67839: PUSH
67840: NOP4
67844: PPUSH
67845: NOP4
67849: NOT
67850: AND
67851: IFFALSE 67880
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
67853: NOP4
67857: PPUSH
67858: NOP4
67862: PUSH
67863: LD_INT 2
67865: ARRAY
67866: PPUSH
67867: NOP4
67871: PUSH
67872: LD_INT 3
67874: ARRAY
67875: PPUSH
67876: NOP4
// break ;
67880: GO 67884
// end ;
67882: GO 67317
67884: POP
67885: POP
// end ; end ;
67886: GO 66155
67888: POP
67889: POP
// end ;
67890: LD_VAR 0 1
67894: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
67895: LD_INT 0
67897: PPUSH
67898: PPUSH
67899: PPUSH
67900: PPUSH
// if not mc_bases then
67901: NOP4
67905: NOT
67906: IFFALSE 67910
// exit ;
67908: GO 68071
// for i = 1 to mc_bases do
67910: NOP4
67914: PUSH
67915: DOUBLE
67916: LD_INT 1
67918: DEC
67919: ST_TO_ADDR
67920: NOP4
67924: PUSH
67925: FOR_TO
67926: IFFALSE 68069
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
67928: NOP4
67932: PUSH
67933: NOP4
67937: PUSH
67938: NOP4
67942: ARRAY
67943: PUSH
67944: NOP4
67948: PUSH
67949: NOP4
67953: ARRAY
67954: UNION
67955: PPUSH
67956: LD_INT 33
67958: PUSH
67959: LD_INT 2
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PPUSH
67966: NOP4
67970: ST_TO_ADDR
// if tmp then
67971: NOP4
67975: IFFALSE 68067
// for j in tmp do
67977: NOP4
67981: PUSH
67982: NOP4
67986: PUSH
67987: FOR_IN
67988: IFFALSE 68065
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
67990: NOP4
67994: PPUSH
67995: NOP4
67999: NOT
68000: PUSH
68001: NOP4
68005: PPUSH
68006: NOP4
68010: PUSH
68011: LD_INT 250
68013: GREATEREQUAL
68014: AND
68015: IFFALSE 68028
// Connect ( j ) else
68017: NOP4
68021: PPUSH
68022: NOP4
68026: GO 68063
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
68028: NOP4
68032: PPUSH
68033: NOP4
68037: PUSH
68038: LD_INT 250
68040: LESS
68041: PUSH
68042: NOP4
68046: PPUSH
68047: NOP4
68051: AND
68052: IFFALSE 68063
// ComUnlink ( j ) ;
68054: NOP4
68058: PPUSH
68059: NOP4
68063: GO 67987
68065: POP
68066: POP
// end ;
68067: GO 67925
68069: POP
68070: POP
// end ;
68071: LD_VAR 0 1
68075: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
68076: LD_INT 0
68078: PPUSH
68079: PPUSH
68080: PPUSH
68081: PPUSH
68082: PPUSH
// if not mc_bases then
68083: NOP4
68087: NOT
68088: IFFALSE 68092
// exit ;
68090: GO 68537
// for i = 1 to mc_bases do
68092: NOP4
68096: PUSH
68097: DOUBLE
68098: LD_INT 1
68100: DEC
68101: ST_TO_ADDR
68102: NOP4
68106: PUSH
68107: FOR_TO
68108: IFFALSE 68535
// begin if not mc_produce [ i ] then
68110: NOP4
68114: PUSH
68115: NOP4
68119: ARRAY
68120: NOT
68121: IFFALSE 68125
// continue ;
68123: GO 68107
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
68125: NOP4
68129: PUSH
68130: NOP4
68134: PUSH
68135: NOP4
68139: ARRAY
68140: PPUSH
68141: LD_INT 30
68143: PUSH
68144: LD_INT 3
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PPUSH
68151: NOP4
68155: ST_TO_ADDR
// if not fac then
68156: NOP4
68160: NOT
68161: IFFALSE 68165
// continue ;
68163: GO 68107
// for j in fac do
68165: NOP4
68169: PUSH
68170: NOP4
68174: PUSH
68175: FOR_IN
68176: IFFALSE 68531
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
68178: NOP4
68182: PPUSH
68183: NOP4
68187: PUSH
68188: LD_INT 2
68190: NONEQUAL
68191: PUSH
68192: NOP4
68196: PPUSH
68197: LD_INT 15
68199: PPUSH
68200: NOP4
68204: PUSH
68205: LD_INT 4
68207: ARRAY
68208: OR
68209: IFFALSE 68213
// continue ;
68211: GO 68175
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
68213: NOP4
68217: PPUSH
68218: NOP4
68222: PUSH
68223: NOP4
68227: ARRAY
68228: PUSH
68229: LD_INT 1
68231: ARRAY
68232: PUSH
68233: LD_INT 1
68235: ARRAY
68236: PPUSH
68237: NOP4
68241: PUSH
68242: NOP4
68246: ARRAY
68247: PUSH
68248: LD_INT 1
68250: ARRAY
68251: PUSH
68252: LD_INT 2
68254: ARRAY
68255: PPUSH
68256: NOP4
68260: PUSH
68261: NOP4
68265: ARRAY
68266: PUSH
68267: LD_INT 1
68269: ARRAY
68270: PUSH
68271: LD_INT 3
68273: ARRAY
68274: PPUSH
68275: NOP4
68279: PUSH
68280: NOP4
68284: ARRAY
68285: PUSH
68286: LD_INT 1
68288: ARRAY
68289: PUSH
68290: LD_INT 4
68292: ARRAY
68293: PPUSH
68294: NOP4
68298: PUSH
68299: NOP4
68303: PPUSH
68304: NOP4
68308: PUSH
68309: NOP4
68313: ARRAY
68314: PUSH
68315: LD_INT 1
68317: ARRAY
68318: PUSH
68319: LD_INT 1
68321: ARRAY
68322: PUSH
68323: NOP4
68327: PUSH
68328: NOP4
68332: ARRAY
68333: PUSH
68334: LD_INT 1
68336: ARRAY
68337: PUSH
68338: LD_INT 2
68340: ARRAY
68341: PUSH
68342: NOP4
68346: PUSH
68347: NOP4
68351: ARRAY
68352: PUSH
68353: LD_INT 1
68355: ARRAY
68356: PUSH
68357: LD_INT 3
68359: ARRAY
68360: PUSH
68361: NOP4
68365: PUSH
68366: NOP4
68370: ARRAY
68371: PUSH
68372: LD_INT 1
68374: ARRAY
68375: PUSH
68376: LD_INT 4
68378: ARRAY
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: PPUSH
68386: NOP4
68390: AND
68391: IFFALSE 68529
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
68393: NOP4
68397: PPUSH
68398: NOP4
68402: PUSH
68403: NOP4
68407: ARRAY
68408: PUSH
68409: LD_INT 1
68411: ARRAY
68412: PUSH
68413: LD_INT 1
68415: ARRAY
68416: PPUSH
68417: NOP4
68421: PUSH
68422: NOP4
68426: ARRAY
68427: PUSH
68428: LD_INT 1
68430: ARRAY
68431: PUSH
68432: LD_INT 2
68434: ARRAY
68435: PPUSH
68436: NOP4
68440: PUSH
68441: NOP4
68445: ARRAY
68446: PUSH
68447: LD_INT 1
68449: ARRAY
68450: PUSH
68451: LD_INT 3
68453: ARRAY
68454: PPUSH
68455: NOP4
68459: PUSH
68460: NOP4
68464: ARRAY
68465: PUSH
68466: LD_INT 1
68468: ARRAY
68469: PUSH
68470: LD_INT 4
68472: ARRAY
68473: PPUSH
68474: NOP4
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
68478: NOP4
68482: PUSH
68483: NOP4
68487: PUSH
68488: NOP4
68492: ARRAY
68493: PPUSH
68494: LD_INT 1
68496: PPUSH
68497: NOP4
68501: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
68502: NOP4
68506: PUSH
68507: NOP4
68511: PPUSH
68512: NOP4
68516: PPUSH
68517: NOP4
68521: PPUSH
68522: NOP4
68526: ST_TO_ADDR
// break ;
68527: GO 68531
// end ; end ;
68529: GO 68175
68531: POP
68532: POP
// end ;
68533: GO 68107
68535: POP
68536: POP
// end ;
68537: LD_VAR 0 1
68541: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
68542: LD_INT 0
68544: PPUSH
68545: PPUSH
68546: PPUSH
// if not mc_bases then
68547: NOP4
68551: NOT
68552: IFFALSE 68556
// exit ;
68554: GO 68645
// for i = 1 to mc_bases do
68556: NOP4
68560: PUSH
68561: DOUBLE
68562: LD_INT 1
68564: DEC
68565: ST_TO_ADDR
68566: NOP4
68570: PUSH
68571: FOR_TO
68572: IFFALSE 68643
// begin if mc_attack [ i ] then
68574: NOP4
68578: PUSH
68579: NOP4
68583: ARRAY
68584: IFFALSE 68641
// begin tmp := mc_attack [ i ] [ 1 ] ;
68586: NOP4
68590: PUSH
68591: NOP4
68595: PUSH
68596: NOP4
68600: ARRAY
68601: PUSH
68602: LD_INT 1
68604: ARRAY
68605: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
68606: NOP4
68610: PUSH
68611: NOP4
68615: PPUSH
68616: NOP4
68620: PPUSH
68621: EMPTY
68622: PPUSH
68623: NOP4
68627: ST_TO_ADDR
// Attack ( tmp ) ;
68628: NOP4
68632: PPUSH
68633: NOP4
// exit ;
68637: POP
68638: POP
68639: GO 68645
// end ; end ;
68641: GO 68571
68643: POP
68644: POP
// end ;
68645: LD_VAR 0 1
68649: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
68650: LD_INT 0
68652: PPUSH
68653: PPUSH
68654: PPUSH
68655: PPUSH
68656: PPUSH
68657: PPUSH
68658: PPUSH
// if not mc_bases then
68659: NOP4
68663: NOT
68664: IFFALSE 68668
// exit ;
68666: GO 69250
// for i = 1 to mc_bases do
68668: NOP4
68672: PUSH
68673: DOUBLE
68674: LD_INT 1
68676: DEC
68677: ST_TO_ADDR
68678: NOP4
68682: PUSH
68683: FOR_TO
68684: IFFALSE 69248
// begin if not mc_bases [ i ] then
68686: NOP4
68690: PUSH
68691: NOP4
68695: ARRAY
68696: NOT
68697: IFFALSE 68701
// continue ;
68699: GO 68683
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
68701: NOP4
68705: PUSH
68706: NOP4
68710: PUSH
68711: NOP4
68715: ARRAY
68716: PUSH
68717: LD_INT 1
68719: ARRAY
68720: PPUSH
68721: NOP4
68725: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
68726: NOP4
68730: PUSH
68731: NOP4
68735: PPUSH
68736: NOP4
68740: PPUSH
68741: NOP4
68745: PUSH
68746: NOP4
68750: ARRAY
68751: PUSH
68752: LD_INT 1
68754: ARRAY
68755: PPUSH
68756: NOP4
68760: PPUSH
68761: NOP4
68765: PUSH
68766: NOP4
68770: ARRAY
68771: PPUSH
68772: NOP4
68776: PPUSH
68777: NOP4
68781: ST_TO_ADDR
// if not mc_scan [ i ] then
68782: NOP4
68786: PUSH
68787: NOP4
68791: ARRAY
68792: NOT
68793: IFFALSE 68948
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
68795: NOP4
68799: PUSH
68800: NOP4
68804: PUSH
68805: NOP4
68809: ARRAY
68810: PPUSH
68811: LD_INT 2
68813: PUSH
68814: LD_INT 25
68816: PUSH
68817: LD_INT 5
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 25
68826: PUSH
68827: LD_INT 8
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 25
68836: PUSH
68837: LD_INT 9
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: PPUSH
68850: NOP4
68854: ST_TO_ADDR
// if not tmp then
68855: NOP4
68859: NOT
68860: IFFALSE 68864
// continue ;
68862: GO 68683
// for j in tmp do
68864: NOP4
68868: PUSH
68869: NOP4
68873: PUSH
68874: FOR_IN
68875: IFFALSE 68946
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
68877: NOP4
68881: PPUSH
68882: NOP4
68886: PPUSH
68887: NOP4
68891: PUSH
68892: LD_INT 5
68894: EQUAL
68895: PUSH
68896: NOP4
68900: PPUSH
68901: NOP4
68905: PUSH
68906: LD_INT 1
68908: EQUAL
68909: AND
68910: PUSH
68911: NOP4
68915: PPUSH
68916: NOP4
68920: NOT
68921: AND
68922: PUSH
68923: NOP4
68927: AND
68928: IFFALSE 68944
// ComChangeProfession ( j , class ) ;
68930: NOP4
68934: PPUSH
68935: NOP4
68939: PPUSH
68940: NOP4
68944: GO 68874
68946: POP
68947: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
68948: NOP4
68952: PUSH
68953: NOP4
68957: ARRAY
68958: PUSH
68959: NOP4
68963: PUSH
68964: NOP4
68968: ARRAY
68969: NOT
68970: AND
68971: PUSH
68972: NOP4
68976: PUSH
68977: NOP4
68981: ARRAY
68982: PPUSH
68983: LD_INT 30
68985: PUSH
68986: LD_INT 32
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PPUSH
68993: NOP4
68997: NOT
68998: AND
68999: PUSH
69000: NOP4
69004: PUSH
69005: NOP4
69009: ARRAY
69010: PPUSH
69011: LD_INT 2
69013: PUSH
69014: LD_INT 30
69016: PUSH
69017: LD_INT 4
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 30
69026: PUSH
69027: LD_INT 5
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: LIST
69038: PPUSH
69039: NOP4
69043: NOT
69044: AND
69045: IFFALSE 69177
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
69047: NOP4
69051: PUSH
69052: NOP4
69056: PUSH
69057: NOP4
69061: ARRAY
69062: PPUSH
69063: LD_INT 2
69065: PUSH
69066: LD_INT 25
69068: PUSH
69069: LD_INT 1
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 25
69078: PUSH
69079: LD_INT 5
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 25
69088: PUSH
69089: LD_INT 8
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 25
69098: PUSH
69099: LD_INT 9
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: PPUSH
69113: NOP4
69117: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
69118: NOP4
69122: PUSH
69123: NOP4
69127: PUSH
69128: NOP4
69132: PPUSH
69133: LD_INT 18
69135: PPUSH
69136: NOP4
69140: DIFF
69141: ST_TO_ADDR
// if tmp then
69142: NOP4
69146: IFFALSE 69177
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
69148: NOP4
69152: PPUSH
69153: NOP4
69157: PPUSH
69158: NOP4
69162: PUSH
69163: NOP4
69167: ARRAY
69168: PPUSH
69169: NOP4
// exit ;
69173: POP
69174: POP
69175: GO 69250
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
69177: NOP4
69181: PUSH
69182: NOP4
69186: ARRAY
69187: PUSH
69188: NOP4
69192: PUSH
69193: NOP4
69197: ARRAY
69198: AND
69199: IFFALSE 69246
// begin tmp := mc_defender [ i ] ;
69201: NOP4
69205: PUSH
69206: NOP4
69210: PUSH
69211: NOP4
69215: ARRAY
69216: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
69217: NOP4
69221: PPUSH
69222: NOP4
69226: PPUSH
69227: NOP4
69231: PUSH
69232: NOP4
69236: ARRAY
69237: PPUSH
69238: NOP4
// exit ;
69242: POP
69243: POP
69244: GO 69250
// end ; end ;
69246: GO 68683
69248: POP
69249: POP
// end ;
69250: LD_VAR 0 1
69254: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
69255: LD_INT 0
69257: PPUSH
69258: PPUSH
69259: PPUSH
69260: PPUSH
69261: PPUSH
69262: PPUSH
69263: PPUSH
69264: PPUSH
69265: PPUSH
69266: PPUSH
69267: PPUSH
// if not mc_bases then
69268: NOP4
69272: NOT
69273: IFFALSE 69277
// exit ;
69275: GO 70364
// for i = 1 to mc_bases do
69277: NOP4
69281: PUSH
69282: DOUBLE
69283: LD_INT 1
69285: DEC
69286: ST_TO_ADDR
69287: NOP4
69291: PUSH
69292: FOR_TO
69293: IFFALSE 70362
// begin tmp := mc_lab [ i ] ;
69295: NOP4
69299: PUSH
69300: NOP4
69304: PUSH
69305: NOP4
69309: ARRAY
69310: ST_TO_ADDR
// if not tmp then
69311: NOP4
69315: NOT
69316: IFFALSE 69320
// continue ;
69318: GO 69292
// idle_lab := 0 ;
69320: NOP4
69324: PUSH
69325: LD_INT 0
69327: ST_TO_ADDR
// for j in tmp do
69328: NOP4
69332: PUSH
69333: NOP4
69337: PUSH
69338: FOR_IN
69339: IFFALSE 70358
// begin researching := false ;
69341: NOP4
69345: PUSH
69346: LD_INT 0
69348: ST_TO_ADDR
// side := GetSide ( j ) ;
69349: NOP4
69353: PUSH
69354: NOP4
69358: PPUSH
69359: NOP4
69363: ST_TO_ADDR
// if not mc_tech [ side ] then
69364: NOP4
69368: PUSH
69369: NOP4
69373: ARRAY
69374: NOT
69375: IFFALSE 69379
// continue ;
69377: GO 69338
// if BuildingStatus ( j ) = bs_idle then
69379: NOP4
69383: PPUSH
69384: NOP4
69388: PUSH
69389: LD_INT 2
69391: EQUAL
69392: IFFALSE 69580
// begin if idle_lab and UnitsInside ( j ) < 6 then
69394: NOP4
69398: PUSH
69399: NOP4
69403: PPUSH
69404: NOP4
69408: PUSH
69409: LD_INT 6
69411: LESS
69412: AND
69413: IFFALSE 69484
// begin tmp2 := UnitsInside ( idle_lab ) ;
69415: NOP4
69419: PUSH
69420: NOP4
69424: PPUSH
69425: NOP4
69429: ST_TO_ADDR
// if tmp2 then
69430: NOP4
69434: IFFALSE 69476
// for x in tmp2 do
69436: NOP4
69440: PUSH
69441: NOP4
69445: PUSH
69446: FOR_IN
69447: IFFALSE 69474
// begin ComExitBuilding ( x ) ;
69449: NOP4
69453: PPUSH
69454: NOP4
// AddComEnterUnit ( x , j ) ;
69458: NOP4
69462: PPUSH
69463: NOP4
69467: PPUSH
69468: NOP4
// end ;
69472: GO 69446
69474: POP
69475: POP
// idle_lab := 0 ;
69476: NOP4
69480: PUSH
69481: LD_INT 0
69483: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
69484: NOP4
69488: PUSH
69489: NOP4
69493: PUSH
69494: NOP4
69498: ARRAY
69499: PUSH
69500: FOR_IN
69501: IFFALSE 69561
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
69503: NOP4
69507: PPUSH
69508: NOP4
69512: PPUSH
69513: NOP4
69517: PUSH
69518: NOP4
69522: PPUSH
69523: NOP4
69527: PPUSH
69528: NOP4
69532: AND
69533: IFFALSE 69559
// begin researching := true ;
69535: NOP4
69539: PUSH
69540: LD_INT 1
69542: ST_TO_ADDR
// ComResearch ( j , t ) ;
69543: NOP4
69547: PPUSH
69548: NOP4
69552: PPUSH
69553: NOP4
// break ;
69557: GO 69561
// end ;
69559: GO 69500
69561: POP
69562: POP
// if not researching then
69563: NOP4
69567: NOT
69568: IFFALSE 69580
// idle_lab := j ;
69570: NOP4
69574: PUSH
69575: NOP4
69579: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
69580: NOP4
69584: PPUSH
69585: NOP4
69589: PUSH
69590: LD_INT 10
69592: EQUAL
69593: IFFALSE 70181
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
69595: NOP4
69599: PUSH
69600: NOP4
69604: ARRAY
69605: NOT
69606: PUSH
69607: NOP4
69611: PUSH
69612: NOP4
69616: ARRAY
69617: NOT
69618: AND
69619: PUSH
69620: NOP4
69624: PUSH
69625: NOP4
69629: ARRAY
69630: PUSH
69631: LD_INT 1
69633: GREATER
69634: AND
69635: IFFALSE 69766
// begin ComCancel ( j ) ;
69637: NOP4
69641: PPUSH
69642: NOP4
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
69646: NOP4
69650: PUSH
69651: NOP4
69655: PPUSH
69656: NOP4
69660: PPUSH
69661: NOP4
69665: PUSH
69666: NOP4
69670: ARRAY
69671: PPUSH
69672: NOP4
69676: PUSH
69677: NOP4
69681: ARRAY
69682: PUSH
69683: LD_INT 1
69685: MINUS
69686: PPUSH
69687: NOP4
69691: PUSH
69692: NOP4
69696: ARRAY
69697: PPUSH
69698: LD_INT 0
69700: PPUSH
69701: NOP4
69705: PPUSH
69706: NOP4
69710: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
69711: NOP4
69715: PUSH
69716: NOP4
69720: PPUSH
69721: NOP4
69725: PPUSH
69726: NOP4
69730: PUSH
69731: NOP4
69735: ARRAY
69736: PPUSH
69737: NOP4
69741: PUSH
69742: NOP4
69746: ARRAY
69747: PPUSH
69748: LD_INT 1
69750: PPUSH
69751: LD_INT 0
69753: PPUSH
69754: NOP4
69758: PPUSH
69759: NOP4
69763: ST_TO_ADDR
// continue ;
69764: GO 69338
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
69766: NOP4
69770: PUSH
69771: NOP4
69775: ARRAY
69776: PUSH
69777: NOP4
69781: PUSH
69782: NOP4
69786: ARRAY
69787: NOT
69788: AND
69789: IFFALSE 69916
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
69791: NOP4
69795: PUSH
69796: NOP4
69800: PPUSH
69801: NOP4
69805: PUSH
69806: NOP4
69810: PUSH
69811: NOP4
69815: ARRAY
69816: PUSH
69817: LD_INT 1
69819: PLUS
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PPUSH
69825: NOP4
69829: PUSH
69830: NOP4
69834: ARRAY
69835: PUSH
69836: LD_INT 1
69838: ARRAY
69839: PPUSH
69840: NOP4
69844: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
69845: NOP4
69849: PUSH
69850: NOP4
69854: ARRAY
69855: PUSH
69856: LD_INT 1
69858: ARRAY
69859: PPUSH
69860: LD_INT 112
69862: PPUSH
69863: NOP4
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
69867: NOP4
69871: PUSH
69872: NOP4
69876: PUSH
69877: NOP4
69881: ARRAY
69882: PPUSH
69883: LD_INT 1
69885: PPUSH
69886: NOP4
69890: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
69891: NOP4
69895: PUSH
69896: NOP4
69900: PPUSH
69901: NOP4
69905: PPUSH
69906: NOP4
69910: PPUSH
69911: NOP4
69915: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
69916: NOP4
69920: PUSH
69921: NOP4
69925: ARRAY
69926: PUSH
69927: NOP4
69931: PUSH
69932: NOP4
69936: ARRAY
69937: AND
69938: PUSH
69939: NOP4
69943: PUSH
69944: NOP4
69948: ARRAY
69949: PUSH
69950: LD_INT 1
69952: ARRAY
69953: PPUSH
69954: NOP4
69958: NOT
69959: AND
69960: PUSH
69961: NOP4
69965: PPUSH
69966: NOP4
69970: PUSH
69971: LD_INT 6
69973: EQUAL
69974: AND
69975: IFFALSE 70031
// begin tmp2 := UnitsInside ( j ) ;
69977: NOP4
69981: PUSH
69982: NOP4
69986: PPUSH
69987: NOP4
69991: ST_TO_ADDR
// if tmp2 = 6 then
69992: NOP4
69996: PUSH
69997: LD_INT 6
69999: EQUAL
70000: IFFALSE 70031
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
70002: NOP4
70006: PUSH
70007: LD_INT 1
70009: ARRAY
70010: PPUSH
70011: LD_INT 112
70013: PPUSH
70014: NOP4
// ComExitBuilding ( tmp2 [ 1 ] ) ;
70018: NOP4
70022: PUSH
70023: LD_INT 1
70025: ARRAY
70026: PPUSH
70027: NOP4
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
70031: NOP4
70035: PUSH
70036: NOP4
70040: ARRAY
70041: PUSH
70042: NOP4
70046: PUSH
70047: NOP4
70051: ARRAY
70052: PUSH
70053: LD_INT 1
70055: ARRAY
70056: PPUSH
70057: NOP4
70061: NOT
70062: AND
70063: PUSH
70064: NOP4
70068: PUSH
70069: NOP4
70073: ARRAY
70074: PUSH
70075: LD_INT 1
70077: ARRAY
70078: PPUSH
70079: NOP4
70083: NOT
70084: AND
70085: IFFALSE 70111
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
70087: NOP4
70091: PUSH
70092: NOP4
70096: ARRAY
70097: PUSH
70098: LD_INT 1
70100: ARRAY
70101: PPUSH
70102: NOP4
70106: PPUSH
70107: NOP4
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
70111: NOP4
70115: PUSH
70116: NOP4
70120: ARRAY
70121: PUSH
70122: LD_INT 1
70124: ARRAY
70125: PPUSH
70126: NOP4
70130: PUSH
70131: NOP4
70135: PUSH
70136: NOP4
70140: ARRAY
70141: PUSH
70142: LD_INT 1
70144: ARRAY
70145: PPUSH
70146: NOP4
70150: PPUSH
70151: NOP4
70155: PUSH
70156: LD_INT 3
70158: NONEQUAL
70159: AND
70160: IFFALSE 70181
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
70162: NOP4
70166: PUSH
70167: NOP4
70171: ARRAY
70172: PUSH
70173: LD_INT 1
70175: ARRAY
70176: PPUSH
70177: NOP4
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
70181: NOP4
70185: PPUSH
70186: NOP4
70190: PUSH
70191: LD_INT 6
70193: EQUAL
70194: PUSH
70195: NOP4
70199: PUSH
70200: LD_INT 1
70202: GREATER
70203: AND
70204: IFFALSE 70356
// begin sci := [ ] ;
70206: NOP4
70210: PUSH
70211: EMPTY
70212: ST_TO_ADDR
// for x in ( tmp diff j ) do
70213: NOP4
70217: PUSH
70218: NOP4
70222: PUSH
70223: NOP4
70227: DIFF
70228: PUSH
70229: FOR_IN
70230: IFFALSE 70282
// begin if sci = 6 then
70232: NOP4
70236: PUSH
70237: LD_INT 6
70239: EQUAL
70240: IFFALSE 70244
// break ;
70242: GO 70282
// if BuildingStatus ( x ) = bs_idle then
70244: NOP4
70248: PPUSH
70249: NOP4
70253: PUSH
70254: LD_INT 2
70256: EQUAL
70257: IFFALSE 70280
// sci := sci ^ UnitsInside ( x ) ;
70259: NOP4
70263: PUSH
70264: NOP4
70268: PUSH
70269: NOP4
70273: PPUSH
70274: NOP4
70278: ADD
70279: ST_TO_ADDR
// end ;
70280: GO 70229
70282: POP
70283: POP
// if not sci then
70284: NOP4
70288: NOT
70289: IFFALSE 70293
// continue ;
70291: GO 69338
// for x in sci do
70293: NOP4
70297: PUSH
70298: NOP4
70302: PUSH
70303: FOR_IN
70304: IFFALSE 70354
// if IsInUnit ( x ) and not HasTask ( x ) then
70306: NOP4
70310: PPUSH
70311: NOP4
70315: PUSH
70316: NOP4
70320: PPUSH
70321: NOP4
70325: NOT
70326: AND
70327: IFFALSE 70352
// begin ComExitBuilding ( x ) ;
70329: NOP4
70333: PPUSH
70334: NOP4
// AddComEnterUnit ( x , j ) ;
70338: NOP4
70342: PPUSH
70343: NOP4
70347: PPUSH
70348: NOP4
// end ;
70352: GO 70303
70354: POP
70355: POP
// end ; end ;
70356: GO 69338
70358: POP
70359: POP
// end ;
70360: GO 69292
70362: POP
70363: POP
// end ;
70364: LD_VAR 0 1
70368: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
70369: LD_INT 0
70371: PPUSH
70372: PPUSH
// if not mc_bases then
70373: NOP4
70377: NOT
70378: IFFALSE 70382
// exit ;
70380: GO 70463
// for i = 1 to mc_bases do
70382: NOP4
70386: PUSH
70387: DOUBLE
70388: LD_INT 1
70390: DEC
70391: ST_TO_ADDR
70392: NOP4
70396: PUSH
70397: FOR_TO
70398: IFFALSE 70461
// if mc_mines [ i ] and mc_miners [ i ] then
70400: NOP4
70404: PUSH
70405: NOP4
70409: ARRAY
70410: PUSH
70411: NOP4
70415: PUSH
70416: NOP4
70420: ARRAY
70421: AND
70422: IFFALSE 70459
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
70424: NOP4
70428: PUSH
70429: NOP4
70433: ARRAY
70434: PUSH
70435: LD_INT 1
70437: ARRAY
70438: PPUSH
70439: NOP4
70443: PPUSH
70444: NOP4
70448: PUSH
70449: NOP4
70453: ARRAY
70454: PPUSH
70455: NOP4
70459: GO 70397
70461: POP
70462: POP
// end ;
70463: LD_VAR 0 1
70467: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
70468: LD_INT 0
70470: PPUSH
70471: PPUSH
70472: PPUSH
70473: PPUSH
70474: PPUSH
70475: PPUSH
70476: PPUSH
70477: PPUSH
// if not mc_bases or not mc_parking then
70478: NOP4
70482: NOT
70483: PUSH
70484: NOP4
70488: NOT
70489: OR
70490: IFFALSE 70494
// exit ;
70492: GO 71193
// for i = 1 to mc_bases do
70494: NOP4
70498: PUSH
70499: DOUBLE
70500: LD_INT 1
70502: DEC
70503: ST_TO_ADDR
70504: NOP4
70508: PUSH
70509: FOR_TO
70510: IFFALSE 71191
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
70512: NOP4
70516: PUSH
70517: NOP4
70521: ARRAY
70522: NOT
70523: PUSH
70524: NOP4
70528: PUSH
70529: NOP4
70533: ARRAY
70534: NOT
70535: OR
70536: IFFALSE 70540
// continue ;
70538: GO 70509
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
70540: NOP4
70544: PUSH
70545: NOP4
70549: PUSH
70550: NOP4
70554: ARRAY
70555: PUSH
70556: LD_INT 1
70558: ARRAY
70559: PPUSH
70560: NOP4
70564: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70565: NOP4
70569: PUSH
70570: NOP4
70574: PUSH
70575: NOP4
70579: ARRAY
70580: PPUSH
70581: LD_INT 30
70583: PUSH
70584: LD_INT 3
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PPUSH
70591: NOP4
70595: ST_TO_ADDR
// if not fac then
70596: NOP4
70600: NOT
70601: IFFALSE 70652
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70603: NOP4
70607: PUSH
70608: NOP4
70612: PUSH
70613: NOP4
70617: ARRAY
70618: PPUSH
70619: LD_INT 2
70621: PUSH
70622: LD_INT 30
70624: PUSH
70625: LD_INT 0
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 30
70634: PUSH
70635: LD_INT 1
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: LIST
70646: PPUSH
70647: NOP4
70651: ST_TO_ADDR
// if not fac then
70652: NOP4
70656: NOT
70657: IFFALSE 70661
// continue ;
70659: GO 70509
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70661: NOP4
70665: PUSH
70666: NOP4
70670: PUSH
70671: NOP4
70675: ARRAY
70676: PPUSH
70677: LD_INT 22
70679: PUSH
70680: NOP4
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 21
70691: PUSH
70692: LD_INT 2
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 3
70701: PUSH
70702: LD_INT 24
70704: PUSH
70705: LD_INT 1000
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: LIST
70720: PPUSH
70721: NOP4
70725: ST_TO_ADDR
// for j in fac do
70726: NOP4
70730: PUSH
70731: NOP4
70735: PUSH
70736: FOR_IN
70737: IFFALSE 70818
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70739: NOP4
70743: PUSH
70744: NOP4
70748: PUSH
70749: LD_INT 22
70751: PUSH
70752: NOP4
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PUSH
70761: LD_INT 91
70763: PUSH
70764: NOP4
70768: PUSH
70769: LD_INT 15
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 21
70779: PUSH
70780: LD_INT 2
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 3
70789: PUSH
70790: LD_INT 24
70792: PUSH
70793: LD_INT 1000
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: PPUSH
70810: NOP4
70814: UNION
70815: ST_TO_ADDR
70816: GO 70736
70818: POP
70819: POP
// if not vehs then
70820: NOP4
70824: NOT
70825: IFFALSE 70851
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
70827: NOP4
70831: PUSH
70832: NOP4
70836: PPUSH
70837: NOP4
70841: PPUSH
70842: EMPTY
70843: PPUSH
70844: NOP4
70848: ST_TO_ADDR
// continue ;
70849: GO 70509
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70851: NOP4
70855: PUSH
70856: NOP4
70860: PUSH
70861: NOP4
70865: ARRAY
70866: PPUSH
70867: LD_INT 30
70869: PUSH
70870: LD_INT 3
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PPUSH
70877: NOP4
70881: ST_TO_ADDR
// if tmp then
70882: NOP4
70886: IFFALSE 70989
// begin for j in tmp do
70888: NOP4
70892: PUSH
70893: NOP4
70897: PUSH
70898: FOR_IN
70899: IFFALSE 70987
// for k in UnitsInside ( j ) do
70901: NOP4
70905: PUSH
70906: NOP4
70910: PPUSH
70911: NOP4
70915: PUSH
70916: FOR_IN
70917: IFFALSE 70983
// if k then
70919: NOP4
70923: IFFALSE 70981
// if not k in mc_repair_vehicle [ i ] then
70925: NOP4
70929: PUSH
70930: NOP4
70934: PUSH
70935: NOP4
70939: ARRAY
70940: IN
70941: NOT
70942: IFFALSE 70981
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
70944: NOP4
70948: PUSH
70949: NOP4
70953: PPUSH
70954: NOP4
70958: PPUSH
70959: NOP4
70963: PUSH
70964: NOP4
70968: ARRAY
70969: PUSH
70970: NOP4
70974: UNION
70975: PPUSH
70976: NOP4
70980: ST_TO_ADDR
70981: GO 70916
70983: POP
70984: POP
70985: GO 70898
70987: POP
70988: POP
// end ; if not mc_repair_vehicle [ i ] then
70989: NOP4
70993: PUSH
70994: NOP4
70998: ARRAY
70999: NOT
71000: IFFALSE 71004
// continue ;
71002: GO 70509
// for j in mc_repair_vehicle [ i ] do
71004: NOP4
71008: PUSH
71009: NOP4
71013: PUSH
71014: NOP4
71018: ARRAY
71019: PUSH
71020: FOR_IN
71021: IFFALSE 71187
// begin if GetClass ( j ) <> 3 then
71023: NOP4
71027: PPUSH
71028: NOP4
71032: PUSH
71033: LD_INT 3
71035: NONEQUAL
71036: IFFALSE 71077
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
71038: NOP4
71042: PUSH
71043: NOP4
71047: PPUSH
71048: NOP4
71052: PPUSH
71053: NOP4
71057: PUSH
71058: NOP4
71062: ARRAY
71063: PUSH
71064: NOP4
71068: DIFF
71069: PPUSH
71070: NOP4
71074: ST_TO_ADDR
// continue ;
71075: GO 71020
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
71077: NOP4
71081: PPUSH
71082: NOP4
71086: NOT
71087: PUSH
71088: NOP4
71092: PUSH
71093: NOP4
71097: PUSH
71098: NOP4
71102: ARRAY
71103: PUSH
71104: LD_INT 1
71106: ARRAY
71107: IN
71108: NOT
71109: AND
71110: PUSH
71111: NOP4
71115: PUSH
71116: NOP4
71120: PUSH
71121: NOP4
71125: ARRAY
71126: PUSH
71127: LD_INT 2
71129: ARRAY
71130: IN
71131: NOT
71132: AND
71133: IFFALSE 71185
// begin if IsInUnit ( j ) then
71135: NOP4
71139: PPUSH
71140: NOP4
71144: IFFALSE 71155
// ComExitBuilding ( j ) ;
71146: NOP4
71150: PPUSH
71151: NOP4
// if not HasTask ( j ) then
71155: NOP4
71159: PPUSH
71160: NOP4
71164: NOT
71165: IFFALSE 71185
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
71167: NOP4
71171: PPUSH
71172: NOP4
71176: PUSH
71177: LD_INT 1
71179: ARRAY
71180: PPUSH
71181: NOP4
// end ; end ;
71185: GO 71020
71187: POP
71188: POP
// end ;
71189: GO 70509
71191: POP
71192: POP
// end ;
71193: LD_VAR 0 1
71197: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
71198: LD_INT 0
71200: PPUSH
71201: PPUSH
71202: PPUSH
71203: PPUSH
71204: PPUSH
71205: PPUSH
71206: PPUSH
71207: PPUSH
71208: PPUSH
71209: PPUSH
71210: PPUSH
// if not mc_bases then
71211: NOP4
71215: NOT
71216: IFFALSE 71220
// exit ;
71218: GO 72022
// for i = 1 to mc_bases do
71220: NOP4
71224: PUSH
71225: DOUBLE
71226: LD_INT 1
71228: DEC
71229: ST_TO_ADDR
71230: NOP4
71234: PUSH
71235: FOR_TO
71236: IFFALSE 72020
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
71238: NOP4
71242: PUSH
71243: NOP4
71247: ARRAY
71248: NOT
71249: PUSH
71250: NOP4
71254: PUSH
71255: NOP4
71259: ARRAY
71260: PUSH
71261: LD_INT 1
71263: ARRAY
71264: OR
71265: PUSH
71266: NOP4
71270: PUSH
71271: NOP4
71275: ARRAY
71276: PUSH
71277: LD_INT 2
71279: ARRAY
71280: OR
71281: PUSH
71282: NOP4
71286: PUSH
71287: NOP4
71291: ARRAY
71292: PPUSH
71293: LD_INT 1
71295: PPUSH
71296: NOP4
71300: NOT
71301: OR
71302: PUSH
71303: NOP4
71307: PUSH
71308: NOP4
71312: ARRAY
71313: OR
71314: IFFALSE 71318
// continue ;
71316: GO 71235
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
71318: NOP4
71322: PUSH
71323: NOP4
71327: PUSH
71328: NOP4
71332: ARRAY
71333: PPUSH
71334: LD_INT 25
71336: PUSH
71337: LD_INT 4
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 50
71346: PUSH
71347: EMPTY
71348: LIST
71349: PUSH
71350: LD_INT 3
71352: PUSH
71353: LD_INT 60
71355: PUSH
71356: EMPTY
71357: LIST
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: LIST
71367: PPUSH
71368: NOP4
71372: PUSH
71373: NOP4
71377: PUSH
71378: NOP4
71382: ARRAY
71383: DIFF
71384: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71385: NOP4
71389: PUSH
71390: NOP4
71394: PUSH
71395: NOP4
71399: ARRAY
71400: PPUSH
71401: LD_INT 2
71403: PUSH
71404: LD_INT 30
71406: PUSH
71407: LD_INT 0
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 30
71416: PUSH
71417: LD_INT 1
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: LIST
71428: PPUSH
71429: NOP4
71433: ST_TO_ADDR
// if not tmp or not dep then
71434: NOP4
71438: NOT
71439: PUSH
71440: NOP4
71444: NOT
71445: OR
71446: IFFALSE 71450
// continue ;
71448: GO 71235
// side := GetSide ( tmp [ 1 ] ) ;
71450: NOP4
71454: PUSH
71455: NOP4
71459: PUSH
71460: LD_INT 1
71462: ARRAY
71463: PPUSH
71464: NOP4
71468: ST_TO_ADDR
// dep := dep [ 1 ] ;
71469: NOP4
71473: PUSH
71474: NOP4
71478: PUSH
71479: LD_INT 1
71481: ARRAY
71482: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
71483: NOP4
71487: PUSH
71488: NOP4
71492: PUSH
71493: NOP4
71497: ARRAY
71498: PPUSH
71499: LD_INT 22
71501: PUSH
71502: LD_INT 0
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 25
71511: PUSH
71512: LD_INT 12
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PPUSH
71523: NOP4
71527: PUSH
71528: LD_INT 22
71530: PUSH
71531: LD_INT 0
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 25
71540: PUSH
71541: LD_INT 12
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: PUSH
71548: LD_INT 91
71550: PUSH
71551: NOP4
71555: PUSH
71556: LD_INT 20
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: LIST
71563: PUSH
71564: EMPTY
71565: LIST
71566: LIST
71567: LIST
71568: PPUSH
71569: NOP4
71573: UNION
71574: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
71575: NOP4
71579: PUSH
71580: NOP4
71584: PUSH
71585: NOP4
71589: ARRAY
71590: PPUSH
71591: LD_INT 81
71593: PUSH
71594: NOP4
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: PPUSH
71603: NOP4
71607: ST_TO_ADDR
// if not apes or danger_at_area then
71608: NOP4
71612: NOT
71613: PUSH
71614: NOP4
71618: OR
71619: IFFALSE 71669
// begin if mc_taming [ i ] then
71621: NOP4
71625: PUSH
71626: NOP4
71630: ARRAY
71631: IFFALSE 71667
// begin MC_Reset ( i , 121 ) ;
71633: NOP4
71637: PPUSH
71638: LD_INT 121
71640: PPUSH
71641: NOP4
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
71645: NOP4
71649: PUSH
71650: NOP4
71654: PPUSH
71655: NOP4
71659: PPUSH
71660: EMPTY
71661: PPUSH
71662: NOP4
71666: ST_TO_ADDR
// end ; continue ;
71667: GO 71235
// end ; for j in tmp do
71669: NOP4
71673: PUSH
71674: NOP4
71678: PUSH
71679: FOR_IN
71680: IFFALSE 72016
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
71682: NOP4
71686: PUSH
71687: NOP4
71691: PUSH
71692: NOP4
71696: ARRAY
71697: IN
71698: NOT
71699: PUSH
71700: NOP4
71704: PUSH
71705: NOP4
71709: ARRAY
71710: PUSH
71711: LD_INT 3
71713: LESS
71714: AND
71715: IFFALSE 71773
// begin SetTag ( j , 121 ) ;
71717: NOP4
71721: PPUSH
71722: LD_INT 121
71724: PPUSH
71725: NOP4
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
71729: NOP4
71733: PUSH
71734: NOP4
71738: PPUSH
71739: NOP4
71743: PUSH
71744: NOP4
71748: PUSH
71749: NOP4
71753: ARRAY
71754: PUSH
71755: LD_INT 1
71757: PLUS
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PPUSH
71763: NOP4
71767: PPUSH
71768: NOP4
71772: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
71773: NOP4
71777: PUSH
71778: NOP4
71782: PUSH
71783: NOP4
71787: ARRAY
71788: IN
71789: IFFALSE 72014
// begin if GetClass ( j ) <> 4 then
71791: NOP4
71795: PPUSH
71796: NOP4
71800: PUSH
71801: LD_INT 4
71803: NONEQUAL
71804: IFFALSE 71857
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
71806: NOP4
71810: PUSH
71811: NOP4
71815: PPUSH
71816: NOP4
71820: PPUSH
71821: NOP4
71825: PUSH
71826: NOP4
71830: ARRAY
71831: PUSH
71832: NOP4
71836: DIFF
71837: PPUSH
71838: NOP4
71842: ST_TO_ADDR
// SetTag ( j , 0 ) ;
71843: NOP4
71847: PPUSH
71848: LD_INT 0
71850: PPUSH
71851: NOP4
// continue ;
71855: GO 71679
// end ; if IsInUnit ( j ) then
71857: NOP4
71861: PPUSH
71862: NOP4
71866: IFFALSE 71877
// ComExitBuilding ( j ) ;
71868: NOP4
71872: PPUSH
71873: NOP4
// ape := NearestUnitToUnit ( apes , j ) ;
71877: NOP4
71881: PUSH
71882: NOP4
71886: PPUSH
71887: NOP4
71891: PPUSH
71892: NOP4
71896: ST_TO_ADDR
// if not ape then
71897: NOP4
71901: NOT
71902: IFFALSE 71906
// break ;
71904: GO 72016
// x := GetX ( ape ) ;
71906: NOP4
71910: PUSH
71911: NOP4
71915: PPUSH
71916: NOP4
71920: ST_TO_ADDR
// y := GetY ( ape ) ;
71921: NOP4
71925: PUSH
71926: NOP4
71930: PPUSH
71931: NOP4
71935: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
71936: NOP4
71940: PPUSH
71941: NOP4
71945: PPUSH
71946: NOP4
71950: NOT
71951: PUSH
71952: NOP4
71956: PPUSH
71957: NOP4
71961: PPUSH
71962: NOP4
71966: PPUSH
71967: LD_INT 20
71969: PPUSH
71970: NOP4
71974: PUSH
71975: LD_INT 4
71977: ARRAY
71978: OR
71979: IFFALSE 71983
// break ;
71981: GO 72016
// if not HasTask ( j ) then
71983: NOP4
71987: PPUSH
71988: NOP4
71992: NOT
71993: IFFALSE 72014
// ComTameXY ( j , x , y ) ;
71995: NOP4
71999: PPUSH
72000: NOP4
72004: PPUSH
72005: NOP4
72009: PPUSH
72010: NOP4
// end ; end ;
72014: GO 71679
72016: POP
72017: POP
// end ;
72018: GO 71235
72020: POP
72021: POP
// end ;
72022: LD_VAR 0 1
72026: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
72027: LD_INT 0
72029: PPUSH
72030: PPUSH
72031: PPUSH
72032: PPUSH
72033: PPUSH
72034: PPUSH
72035: PPUSH
72036: PPUSH
// if not mc_bases then
72037: NOP4
72041: NOT
72042: IFFALSE 72046
// exit ;
72044: GO 72672
// for i = 1 to mc_bases do
72046: NOP4
72050: PUSH
72051: DOUBLE
72052: LD_INT 1
72054: DEC
72055: ST_TO_ADDR
72056: NOP4
72060: PUSH
72061: FOR_TO
72062: IFFALSE 72670
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
72064: NOP4
72068: PUSH
72069: NOP4
72073: ARRAY
72074: NOT
72075: PUSH
72076: NOP4
72080: PUSH
72081: NOP4
72085: ARRAY
72086: PPUSH
72087: LD_INT 25
72089: PUSH
72090: LD_INT 12
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PPUSH
72097: NOP4
72101: NOT
72102: OR
72103: IFFALSE 72107
// continue ;
72105: GO 72061
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
72107: NOP4
72111: PUSH
72112: NOP4
72116: PUSH
72117: NOP4
72121: ARRAY
72122: PUSH
72123: LD_INT 1
72125: ARRAY
72126: PPUSH
72127: NOP4
72131: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
72132: NOP4
72136: PPUSH
72137: LD_INT 2
72139: PPUSH
72140: NOP4
72144: IFFALSE 72397
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
72146: NOP4
72150: PUSH
72151: NOP4
72155: PUSH
72156: NOP4
72160: ARRAY
72161: PPUSH
72162: LD_INT 25
72164: PUSH
72165: LD_INT 16
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PPUSH
72172: NOP4
72176: ST_TO_ADDR
// if tmp < 6 then
72177: NOP4
72181: PUSH
72182: LD_INT 6
72184: LESS
72185: IFFALSE 72397
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72187: NOP4
72191: PUSH
72192: NOP4
72196: PUSH
72197: NOP4
72201: ARRAY
72202: PPUSH
72203: LD_INT 2
72205: PUSH
72206: LD_INT 30
72208: PUSH
72209: LD_INT 0
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: PUSH
72216: LD_INT 30
72218: PUSH
72219: LD_INT 1
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: LIST
72230: PPUSH
72231: NOP4
72235: ST_TO_ADDR
// if depot then
72236: NOP4
72240: IFFALSE 72397
// begin selected := 0 ;
72242: NOP4
72246: PUSH
72247: LD_INT 0
72249: ST_TO_ADDR
// for j in depot do
72250: NOP4
72254: PUSH
72255: NOP4
72259: PUSH
72260: FOR_IN
72261: IFFALSE 72292
// begin if UnitsInside ( j ) < 6 then
72263: NOP4
72267: PPUSH
72268: NOP4
72272: PUSH
72273: LD_INT 6
72275: LESS
72276: IFFALSE 72290
// begin selected := j ;
72278: NOP4
72282: PUSH
72283: NOP4
72287: ST_TO_ADDR
// break ;
72288: GO 72292
// end ; end ;
72290: GO 72260
72292: POP
72293: POP
// if selected then
72294: NOP4
72298: IFFALSE 72397
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
72300: NOP4
72304: PUSH
72305: NOP4
72309: PUSH
72310: NOP4
72314: ARRAY
72315: PPUSH
72316: LD_INT 25
72318: PUSH
72319: LD_INT 12
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PPUSH
72326: NOP4
72330: PUSH
72331: FOR_IN
72332: IFFALSE 72395
// if not HasTask ( j ) then
72334: NOP4
72338: PPUSH
72339: NOP4
72343: NOT
72344: IFFALSE 72393
// begin if not IsInUnit ( j ) then
72346: NOP4
72350: PPUSH
72351: NOP4
72355: NOT
72356: IFFALSE 72372
// ComEnterUnit ( j , selected ) ;
72358: NOP4
72362: PPUSH
72363: NOP4
72367: PPUSH
72368: NOP4
// AddComChangeProfession ( j , 16 ) ;
72372: NOP4
72376: PPUSH
72377: LD_INT 16
72379: PPUSH
72380: NOP4
// AddComExitBuilding ( j ) ;
72384: NOP4
72388: PPUSH
72389: NOP4
// end ;
72393: GO 72331
72395: POP
72396: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
72397: NOP4
72401: PPUSH
72402: LD_INT 11
72404: PPUSH
72405: NOP4
72409: IFFALSE 72668
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
72411: NOP4
72415: PUSH
72416: NOP4
72420: PUSH
72421: NOP4
72425: ARRAY
72426: PPUSH
72427: LD_INT 25
72429: PUSH
72430: LD_INT 16
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PPUSH
72437: NOP4
72441: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
72442: NOP4
72446: PUSH
72447: LD_INT 6
72449: GREATEREQUAL
72450: PUSH
72451: NOP4
72455: PPUSH
72456: LD_INT 2
72458: PPUSH
72459: NOP4
72463: NOT
72464: OR
72465: IFFALSE 72668
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
72467: NOP4
72471: PUSH
72472: NOP4
72476: PUSH
72477: NOP4
72481: ARRAY
72482: PPUSH
72483: LD_INT 2
72485: PUSH
72486: LD_INT 30
72488: PUSH
72489: LD_INT 4
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: PUSH
72496: LD_INT 30
72498: PUSH
72499: LD_INT 5
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: LIST
72510: PPUSH
72511: NOP4
72515: ST_TO_ADDR
// if barracks then
72516: NOP4
72520: IFFALSE 72668
// begin selected := 0 ;
72522: NOP4
72526: PUSH
72527: LD_INT 0
72529: ST_TO_ADDR
// for j in barracks do
72530: NOP4
72534: PUSH
72535: NOP4
72539: PUSH
72540: FOR_IN
72541: IFFALSE 72572
// begin if UnitsInside ( j ) < 6 then
72543: NOP4
72547: PPUSH
72548: NOP4
72552: PUSH
72553: LD_INT 6
72555: LESS
72556: IFFALSE 72570
// begin selected := j ;
72558: NOP4
72562: PUSH
72563: NOP4
72567: ST_TO_ADDR
// break ;
72568: GO 72572
// end ; end ;
72570: GO 72540
72572: POP
72573: POP
// if selected then
72574: NOP4
72578: IFFALSE 72668
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
72580: NOP4
72584: PUSH
72585: NOP4
72589: PUSH
72590: NOP4
72594: ARRAY
72595: PPUSH
72596: LD_INT 25
72598: PUSH
72599: LD_INT 12
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PPUSH
72606: NOP4
72610: PUSH
72611: FOR_IN
72612: IFFALSE 72666
// if not IsInUnit ( j ) and not HasTask ( j ) then
72614: NOP4
72618: PPUSH
72619: NOP4
72623: NOT
72624: PUSH
72625: NOP4
72629: PPUSH
72630: NOP4
72634: NOT
72635: AND
72636: IFFALSE 72664
// begin ComEnterUnit ( j , selected ) ;
72638: NOP4
72642: PPUSH
72643: NOP4
72647: PPUSH
72648: NOP4
// AddComChangeProfession ( j , 15 ) ;
72652: NOP4
72656: PPUSH
72657: LD_INT 15
72659: PPUSH
72660: NOP4
// end ;
72664: GO 72611
72666: POP
72667: POP
// end ; end ; end ; end ; end ;
72668: GO 72061
72670: POP
72671: POP
// end ;
72672: LD_VAR 0 1
72676: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
72677: LD_INT 0
72679: PPUSH
72680: PPUSH
72681: PPUSH
72682: PPUSH
// if not mc_bases then
72683: NOP4
72687: NOT
72688: IFFALSE 72692
// exit ;
72690: GO 72870
// for i = 1 to mc_bases do
72692: NOP4
72696: PUSH
72697: DOUBLE
72698: LD_INT 1
72700: DEC
72701: ST_TO_ADDR
72702: NOP4
72706: PUSH
72707: FOR_TO
72708: IFFALSE 72868
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
72710: NOP4
72714: PUSH
72715: NOP4
72719: PUSH
72720: NOP4
72724: ARRAY
72725: PPUSH
72726: LD_INT 25
72728: PUSH
72729: LD_INT 9
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PPUSH
72736: NOP4
72740: ST_TO_ADDR
// if not tmp then
72741: NOP4
72745: NOT
72746: IFFALSE 72750
// continue ;
72748: GO 72707
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
72750: NOP4
72754: PUSH
72755: NOP4
72759: ARRAY
72760: PPUSH
72761: LD_INT 29
72763: PPUSH
72764: NOP4
72768: NOT
72769: PUSH
72770: NOP4
72774: PUSH
72775: NOP4
72779: ARRAY
72780: PPUSH
72781: LD_INT 28
72783: PPUSH
72784: NOP4
72788: NOT
72789: AND
72790: IFFALSE 72794
// continue ;
72792: GO 72707
// for j in tmp do
72794: NOP4
72798: PUSH
72799: NOP4
72803: PUSH
72804: FOR_IN
72805: IFFALSE 72864
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
72807: NOP4
72811: PUSH
72812: NOP4
72816: PUSH
72817: NOP4
72821: ARRAY
72822: PUSH
72823: LD_INT 1
72825: ARRAY
72826: IN
72827: NOT
72828: PUSH
72829: NOP4
72833: PUSH
72834: NOP4
72838: PUSH
72839: NOP4
72843: ARRAY
72844: PUSH
72845: LD_INT 2
72847: ARRAY
72848: IN
72849: NOT
72850: AND
72851: IFFALSE 72862
// ComSpaceTimeShoot ( j ) ;
72853: NOP4
72857: PPUSH
72858: NOP4
72862: GO 72804
72864: POP
72865: POP
// end ;
72866: GO 72707
72868: POP
72869: POP
// end ;
72870: LD_VAR 0 1
72874: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
72875: LD_INT 0
72877: PPUSH
72878: PPUSH
72879: PPUSH
72880: PPUSH
72881: PPUSH
72882: PPUSH
72883: PPUSH
72884: PPUSH
72885: PPUSH
// if not mc_bases then
72886: NOP4
72890: NOT
72891: IFFALSE 72895
// exit ;
72893: GO 73517
// for i = 1 to mc_bases do
72895: NOP4
72899: PUSH
72900: DOUBLE
72901: LD_INT 1
72903: DEC
72904: ST_TO_ADDR
72905: NOP4
72909: PUSH
72910: FOR_TO
72911: IFFALSE 73515
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
72913: NOP4
72917: PUSH
72918: NOP4
72922: ARRAY
72923: NOT
72924: PUSH
72925: LD_INT 38
72927: PPUSH
72928: NOP4
72932: PUSH
72933: NOP4
72937: ARRAY
72938: PPUSH
72939: NOP4
72943: PUSH
72944: LD_INT 2
72946: NONEQUAL
72947: OR
72948: IFFALSE 72952
// continue ;
72950: GO 72910
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
72952: NOP4
72956: PUSH
72957: NOP4
72961: PUSH
72962: NOP4
72966: ARRAY
72967: PPUSH
72968: LD_INT 30
72970: PUSH
72971: LD_INT 34
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PPUSH
72978: NOP4
72982: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
72983: NOP4
72987: PUSH
72988: NOP4
72992: PUSH
72993: NOP4
72997: ARRAY
72998: PPUSH
72999: LD_INT 25
73001: PUSH
73002: LD_INT 4
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: PPUSH
73009: NOP4
73013: PPUSH
73014: LD_INT 0
73016: PPUSH
73017: NOP4
73021: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
73022: NOP4
73026: NOT
73027: PUSH
73028: NOP4
73032: NOT
73033: OR
73034: PUSH
73035: NOP4
73039: PUSH
73040: NOP4
73044: ARRAY
73045: PPUSH
73046: LD_INT 124
73048: PPUSH
73049: NOP4
73053: OR
73054: IFFALSE 73058
// continue ;
73056: GO 72910
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
73058: NOP4
73062: PUSH
73063: NOP4
73067: ARRAY
73068: PUSH
73069: NOP4
73073: PUSH
73074: NOP4
73078: ARRAY
73079: LESS
73080: PUSH
73081: NOP4
73085: PUSH
73086: NOP4
73090: ARRAY
73091: PUSH
73092: NOP4
73096: LESS
73097: AND
73098: IFFALSE 73513
// begin tmp := sci [ 1 ] ;
73100: NOP4
73104: PUSH
73105: NOP4
73109: PUSH
73110: LD_INT 1
73112: ARRAY
73113: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
73114: NOP4
73118: PPUSH
73119: LD_INT 124
73121: PPUSH
73122: NOP4
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
73126: NOP4
73130: PUSH
73131: DOUBLE
73132: NOP4
73136: PUSH
73137: NOP4
73141: ARRAY
73142: INC
73143: ST_TO_ADDR
73144: NOP4
73148: PUSH
73149: NOP4
73153: ARRAY
73154: PUSH
73155: FOR_DOWNTO
73156: IFFALSE 73499
// begin if IsInUnit ( tmp ) then
73158: NOP4
73162: PPUSH
73163: NOP4
73167: IFFALSE 73178
// ComExitBuilding ( tmp ) ;
73169: NOP4
73173: PPUSH
73174: NOP4
// repeat wait ( 0 0$1 ) ;
73178: LD_INT 35
73180: PPUSH
73181: NOP4
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
73185: NOP4
73189: PPUSH
73190: NOP4
73194: NOT
73195: PUSH
73196: NOP4
73200: PPUSH
73201: NOP4
73205: NOT
73206: AND
73207: IFFALSE 73178
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
73209: NOP4
73213: PUSH
73214: NOP4
73218: PPUSH
73219: NOP4
73223: PUSH
73224: NOP4
73228: PPUSH
73229: NOP4
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73238: LD_INT 35
73240: PPUSH
73241: NOP4
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
73245: NOP4
73249: PUSH
73250: NOP4
73254: PUSH
73255: NOP4
73259: ARRAY
73260: PUSH
73261: NOP4
73265: ARRAY
73266: PUSH
73267: LD_INT 1
73269: ARRAY
73270: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
73271: NOP4
73275: PUSH
73276: NOP4
73280: PUSH
73281: NOP4
73285: ARRAY
73286: PUSH
73287: NOP4
73291: ARRAY
73292: PUSH
73293: LD_INT 2
73295: ARRAY
73296: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
73297: NOP4
73301: PPUSH
73302: LD_INT 10
73304: PPUSH
73305: NOP4
73309: PUSH
73310: LD_INT 4
73312: ARRAY
73313: IFFALSE 73351
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
73315: NOP4
73319: PPUSH
73320: NOP4
73324: PUSH
73325: LD_INT 1
73327: ARRAY
73328: PPUSH
73329: NOP4
73333: PUSH
73334: LD_INT 2
73336: ARRAY
73337: PPUSH
73338: NOP4
// wait ( 0 0$10 ) ;
73342: LD_INT 350
73344: PPUSH
73345: NOP4
// end else
73349: GO 73377
// begin ComMoveXY ( tmp , x , y ) ;
73351: NOP4
73355: PPUSH
73356: NOP4
73360: PPUSH
73361: NOP4
73365: PPUSH
73366: NOP4
// wait ( 0 0$3 ) ;
73370: LD_INT 105
73372: PPUSH
73373: NOP4
// end ; until IsAt ( tmp , x , y ) ;
73377: NOP4
73381: PPUSH
73382: NOP4
73386: PPUSH
73387: NOP4
73391: PPUSH
73392: NOP4
73396: IFFALSE 73238
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
73398: NOP4
73402: PPUSH
73403: NOP4
73407: PPUSH
73408: NOP4
73412: PPUSH
73413: NOP4
73417: PUSH
73418: NOP4
73422: ARRAY
73423: PPUSH
73424: NOP4
// repeat wait ( 0 0$1 ) ;
73428: LD_INT 35
73430: PPUSH
73431: NOP4
// until not HasTask ( tmp ) ;
73435: NOP4
73439: PPUSH
73440: NOP4
73444: NOT
73445: IFFALSE 73428
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
73447: NOP4
73451: PUSH
73452: NOP4
73456: PPUSH
73457: NOP4
73461: PUSH
73462: NOP4
73466: PUSH
73467: NOP4
73471: ARRAY
73472: PUSH
73473: LD_INT 1
73475: PLUS
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PPUSH
73481: NOP4
73485: PUSH
73486: NOP4
73490: ARRAY
73491: PPUSH
73492: NOP4
73496: ST_TO_ADDR
// end ;
73497: GO 73155
73499: POP
73500: POP
// MC_Reset ( i , 124 ) ;
73501: NOP4
73505: PPUSH
73506: LD_INT 124
73508: PPUSH
73509: NOP4
// end ; end ;
73513: GO 72910
73515: POP
73516: POP
// end ;
73517: LD_VAR 0 1
73521: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
73522: LD_INT 0
73524: PPUSH
73525: PPUSH
73526: PPUSH
// if not mc_bases then
73527: NOP4
73531: NOT
73532: IFFALSE 73536
// exit ;
73534: GO 74142
// for i = 1 to mc_bases do
73536: NOP4
73540: PUSH
73541: DOUBLE
73542: LD_INT 1
73544: DEC
73545: ST_TO_ADDR
73546: NOP4
73550: PUSH
73551: FOR_TO
73552: IFFALSE 74140
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
73554: NOP4
73558: PUSH
73559: NOP4
73563: PUSH
73564: NOP4
73568: ARRAY
73569: PPUSH
73570: LD_INT 25
73572: PUSH
73573: LD_INT 4
73575: PUSH
73576: EMPTY
73577: LIST
73578: LIST
73579: PPUSH
73580: NOP4
73584: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
73585: NOP4
73589: NOT
73590: PUSH
73591: NOP4
73595: PUSH
73596: NOP4
73600: ARRAY
73601: NOT
73602: OR
73603: PUSH
73604: NOP4
73608: PUSH
73609: NOP4
73613: ARRAY
73614: PPUSH
73615: LD_INT 2
73617: PUSH
73618: LD_INT 30
73620: PUSH
73621: LD_INT 0
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: PUSH
73628: LD_INT 30
73630: PUSH
73631: LD_INT 1
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: LIST
73642: PPUSH
73643: NOP4
73647: NOT
73648: OR
73649: IFFALSE 73699
// begin if mc_deposits_finder [ i ] then
73651: NOP4
73655: PUSH
73656: NOP4
73660: ARRAY
73661: IFFALSE 73697
// begin MC_Reset ( i , 125 ) ;
73663: NOP4
73667: PPUSH
73668: LD_INT 125
73670: PPUSH
73671: NOP4
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73675: NOP4
73679: PUSH
73680: NOP4
73684: PPUSH
73685: NOP4
73689: PPUSH
73690: EMPTY
73691: PPUSH
73692: NOP4
73696: ST_TO_ADDR
// end ; continue ;
73697: GO 73551
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
73699: NOP4
73703: PUSH
73704: NOP4
73708: ARRAY
73709: PUSH
73710: LD_INT 1
73712: ARRAY
73713: PUSH
73714: LD_INT 3
73716: ARRAY
73717: PUSH
73718: LD_INT 1
73720: EQUAL
73721: PUSH
73722: LD_INT 20
73724: PPUSH
73725: NOP4
73729: PUSH
73730: NOP4
73734: ARRAY
73735: PPUSH
73736: NOP4
73740: PUSH
73741: LD_INT 2
73743: NONEQUAL
73744: AND
73745: IFFALSE 73795
// begin if mc_deposits_finder [ i ] then
73747: NOP4
73751: PUSH
73752: NOP4
73756: ARRAY
73757: IFFALSE 73793
// begin MC_Reset ( i , 125 ) ;
73759: NOP4
73763: PPUSH
73764: LD_INT 125
73766: PPUSH
73767: NOP4
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73771: NOP4
73775: PUSH
73776: NOP4
73780: PPUSH
73781: NOP4
73785: PPUSH
73786: EMPTY
73787: PPUSH
73788: NOP4
73792: ST_TO_ADDR
// end ; continue ;
73793: GO 73551
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
73795: NOP4
73799: PUSH
73800: NOP4
73804: ARRAY
73805: PUSH
73806: LD_INT 1
73808: ARRAY
73809: PUSH
73810: LD_INT 1
73812: ARRAY
73813: PPUSH
73814: NOP4
73818: PUSH
73819: NOP4
73823: ARRAY
73824: PUSH
73825: LD_INT 1
73827: ARRAY
73828: PUSH
73829: LD_INT 2
73831: ARRAY
73832: PPUSH
73833: NOP4
73837: PUSH
73838: NOP4
73842: ARRAY
73843: PPUSH
73844: NOP4
73848: IFFALSE 73891
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
73850: NOP4
73854: PUSH
73855: NOP4
73859: PPUSH
73860: NOP4
73864: PPUSH
73865: NOP4
73869: PUSH
73870: NOP4
73874: ARRAY
73875: PPUSH
73876: LD_INT 1
73878: PPUSH
73879: NOP4
73883: PPUSH
73884: NOP4
73888: ST_TO_ADDR
73889: GO 74138
// begin if not mc_deposits_finder [ i ] then
73891: NOP4
73895: PUSH
73896: NOP4
73900: ARRAY
73901: NOT
73902: IFFALSE 73954
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
73904: NOP4
73908: PUSH
73909: NOP4
73913: PPUSH
73914: NOP4
73918: PPUSH
73919: NOP4
73923: PUSH
73924: LD_INT 1
73926: ARRAY
73927: PUSH
73928: EMPTY
73929: LIST
73930: PPUSH
73931: NOP4
73935: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
73936: NOP4
73940: PUSH
73941: LD_INT 1
73943: ARRAY
73944: PPUSH
73945: LD_INT 125
73947: PPUSH
73948: NOP4
// end else
73952: GO 74138
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
73954: NOP4
73958: PUSH
73959: NOP4
73963: ARRAY
73964: PUSH
73965: LD_INT 1
73967: ARRAY
73968: PPUSH
73969: NOP4
73973: IFFALSE 73996
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
73975: NOP4
73979: PUSH
73980: NOP4
73984: ARRAY
73985: PUSH
73986: LD_INT 1
73988: ARRAY
73989: PPUSH
73990: NOP4
73994: GO 74138
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
73996: NOP4
74000: PUSH
74001: NOP4
74005: ARRAY
74006: PUSH
74007: LD_INT 1
74009: ARRAY
74010: PPUSH
74011: NOP4
74015: NOT
74016: PUSH
74017: NOP4
74021: PUSH
74022: NOP4
74026: ARRAY
74027: PUSH
74028: LD_INT 1
74030: ARRAY
74031: PPUSH
74032: NOP4
74036: PUSH
74037: NOP4
74041: ARRAY
74042: PUSH
74043: LD_INT 1
74045: ARRAY
74046: PUSH
74047: LD_INT 1
74049: ARRAY
74050: PPUSH
74051: NOP4
74055: PUSH
74056: NOP4
74060: ARRAY
74061: PUSH
74062: LD_INT 1
74064: ARRAY
74065: PUSH
74066: LD_INT 2
74068: ARRAY
74069: PPUSH
74070: NOP4
74074: PUSH
74075: LD_INT 6
74077: GREATER
74078: AND
74079: IFFALSE 74138
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
74081: NOP4
74085: PUSH
74086: NOP4
74090: ARRAY
74091: PUSH
74092: LD_INT 1
74094: ARRAY
74095: PPUSH
74096: NOP4
74100: PUSH
74101: NOP4
74105: ARRAY
74106: PUSH
74107: LD_INT 1
74109: ARRAY
74110: PUSH
74111: LD_INT 1
74113: ARRAY
74114: PPUSH
74115: NOP4
74119: PUSH
74120: NOP4
74124: ARRAY
74125: PUSH
74126: LD_INT 1
74128: ARRAY
74129: PUSH
74130: LD_INT 2
74132: ARRAY
74133: PPUSH
74134: NOP4
// end ; end ; end ;
74138: GO 73551
74140: POP
74141: POP
// end ;
74142: LD_VAR 0 1
74146: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
74147: LD_INT 0
74149: PPUSH
74150: PPUSH
74151: PPUSH
74152: PPUSH
74153: PPUSH
74154: PPUSH
74155: PPUSH
74156: PPUSH
74157: PPUSH
74158: PPUSH
74159: PPUSH
// if not mc_bases then
74160: NOP4
74164: NOT
74165: IFFALSE 74169
// exit ;
74167: GO 75109
// for i = 1 to mc_bases do
74169: NOP4
74173: PUSH
74174: DOUBLE
74175: LD_INT 1
74177: DEC
74178: ST_TO_ADDR
74179: NOP4
74183: PUSH
74184: FOR_TO
74185: IFFALSE 75107
// begin if not mc_bases [ i ] or mc_scan [ i ] then
74187: NOP4
74191: PUSH
74192: NOP4
74196: ARRAY
74197: NOT
74198: PUSH
74199: NOP4
74203: PUSH
74204: NOP4
74208: ARRAY
74209: OR
74210: IFFALSE 74214
// continue ;
74212: GO 74184
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
74214: NOP4
74218: PUSH
74219: NOP4
74223: PUSH
74224: NOP4
74228: ARRAY
74229: PUSH
74230: LD_INT 1
74232: ARRAY
74233: PPUSH
74234: NOP4
74238: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
74239: NOP4
74243: PUSH
74244: LD_INT 3
74246: EQUAL
74247: PUSH
74248: NOP4
74252: PUSH
74253: NOP4
74257: ARRAY
74258: PUSH
74259: NOP4
74263: PUSH
74264: NOP4
74268: ARRAY
74269: UNION
74270: PPUSH
74271: LD_INT 33
74273: PUSH
74274: LD_INT 2
74276: PUSH
74277: EMPTY
74278: LIST
74279: LIST
74280: PPUSH
74281: NOP4
74285: NOT
74286: OR
74287: IFFALSE 74291
// continue ;
74289: GO 74184
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
74291: NOP4
74295: PUSH
74296: NOP4
74300: PUSH
74301: NOP4
74305: ARRAY
74306: PPUSH
74307: LD_INT 30
74309: PUSH
74310: LD_INT 36
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: PPUSH
74317: NOP4
74321: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
74322: NOP4
74326: PUSH
74327: NOP4
74331: PUSH
74332: NOP4
74336: ARRAY
74337: PPUSH
74338: LD_INT 34
74340: PUSH
74341: LD_INT 31
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: PPUSH
74348: NOP4
74352: ST_TO_ADDR
// if not cts and not mcts then
74353: NOP4
74357: NOT
74358: PUSH
74359: NOP4
74363: NOT
74364: AND
74365: IFFALSE 74369
// continue ;
74367: GO 74184
// x := cts ;
74369: NOP4
74373: PUSH
74374: NOP4
74378: ST_TO_ADDR
// if not x then
74379: NOP4
74383: NOT
74384: IFFALSE 74396
// x := mcts ;
74386: NOP4
74390: PUSH
74391: NOP4
74395: ST_TO_ADDR
// if not x then
74396: NOP4
74400: NOT
74401: IFFALSE 74405
// continue ;
74403: GO 74184
// if mc_remote_driver [ i ] then
74405: NOP4
74409: PUSH
74410: NOP4
74414: ARRAY
74415: IFFALSE 74802
// for j in mc_remote_driver [ i ] do
74417: NOP4
74421: PUSH
74422: NOP4
74426: PUSH
74427: NOP4
74431: ARRAY
74432: PUSH
74433: FOR_IN
74434: IFFALSE 74800
// begin if GetClass ( j ) <> 3 then
74436: NOP4
74440: PPUSH
74441: NOP4
74445: PUSH
74446: LD_INT 3
74448: NONEQUAL
74449: IFFALSE 74502
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
74451: NOP4
74455: PUSH
74456: NOP4
74460: PPUSH
74461: NOP4
74465: PPUSH
74466: NOP4
74470: PUSH
74471: NOP4
74475: ARRAY
74476: PUSH
74477: NOP4
74481: DIFF
74482: PPUSH
74483: NOP4
74487: ST_TO_ADDR
// SetTag ( j , 0 ) ;
74488: NOP4
74492: PPUSH
74493: LD_INT 0
74495: PPUSH
74496: NOP4
// continue ;
74500: GO 74433
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
74502: NOP4
74506: PUSH
74507: NOP4
74511: ARRAY
74512: PPUSH
74513: LD_INT 34
74515: PUSH
74516: LD_INT 31
74518: PUSH
74519: EMPTY
74520: LIST
74521: LIST
74522: PUSH
74523: LD_INT 58
74525: PUSH
74526: EMPTY
74527: LIST
74528: PUSH
74529: EMPTY
74530: LIST
74531: LIST
74532: PPUSH
74533: NOP4
74537: PUSH
74538: NOP4
74542: PPUSH
74543: NOP4
74547: NOT
74548: AND
74549: IFFALSE 74620
// begin if IsInUnit ( j ) then
74551: NOP4
74555: PPUSH
74556: NOP4
74560: IFFALSE 74571
// ComExitBuilding ( j ) ;
74562: NOP4
74566: PPUSH
74567: NOP4
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
74571: NOP4
74575: PPUSH
74576: NOP4
74580: PUSH
74581: NOP4
74585: ARRAY
74586: PPUSH
74587: LD_INT 34
74589: PUSH
74590: LD_INT 31
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: LD_INT 58
74599: PUSH
74600: EMPTY
74601: LIST
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PPUSH
74607: NOP4
74611: PUSH
74612: LD_INT 1
74614: ARRAY
74615: PPUSH
74616: NOP4
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
74620: NOP4
74624: PPUSH
74625: NOP4
74629: NOT
74630: PUSH
74631: NOP4
74635: PPUSH
74636: NOP4
74640: PPUSH
74641: NOP4
74645: PUSH
74646: LD_INT 36
74648: NONEQUAL
74649: PUSH
74650: NOP4
74654: PPUSH
74655: NOP4
74659: NOT
74660: AND
74661: OR
74662: IFFALSE 74798
// begin if IsInUnit ( j ) then
74664: NOP4
74668: PPUSH
74669: NOP4
74673: IFFALSE 74684
// ComExitBuilding ( j ) ;
74675: NOP4
74679: PPUSH
74680: NOP4
// ct := 0 ;
74684: NOP4
74688: PUSH
74689: LD_INT 0
74691: ST_TO_ADDR
// for k in x do
74692: NOP4
74696: PUSH
74697: NOP4
74701: PUSH
74702: FOR_IN
74703: IFFALSE 74776
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
74705: NOP4
74709: PPUSH
74710: NOP4
74714: PUSH
74715: LD_INT 31
74717: EQUAL
74718: PUSH
74719: NOP4
74723: PPUSH
74724: NOP4
74728: NOT
74729: AND
74730: PUSH
74731: NOP4
74735: PPUSH
74736: NOP4
74740: PUSH
74741: LD_INT 36
74743: EQUAL
74744: PUSH
74745: NOP4
74749: PPUSH
74750: NOP4
74754: PUSH
74755: LD_INT 3
74757: LESS
74758: AND
74759: OR
74760: IFFALSE 74774
// begin ct := k ;
74762: NOP4
74766: PUSH
74767: NOP4
74771: ST_TO_ADDR
// break ;
74772: GO 74776
// end ;
74774: GO 74702
74776: POP
74777: POP
// if ct then
74778: NOP4
74782: IFFALSE 74798
// ComEnterUnit ( j , ct ) ;
74784: NOP4
74788: PPUSH
74789: NOP4
74793: PPUSH
74794: NOP4
// end ; end ;
74798: GO 74433
74800: POP
74801: POP
// places := 0 ;
74802: NOP4
74806: PUSH
74807: LD_INT 0
74809: ST_TO_ADDR
// for j = 1 to x do
74810: NOP4
74814: PUSH
74815: DOUBLE
74816: LD_INT 1
74818: DEC
74819: ST_TO_ADDR
74820: NOP4
74824: PUSH
74825: FOR_TO
74826: IFFALSE 74902
// if GetWeapon ( x [ j ] ) = ar_control_tower then
74828: NOP4
74832: PUSH
74833: NOP4
74837: ARRAY
74838: PPUSH
74839: NOP4
74843: PUSH
74844: LD_INT 31
74846: EQUAL
74847: IFFALSE 74865
// places := places + 1 else
74849: NOP4
74853: PUSH
74854: NOP4
74858: PUSH
74859: LD_INT 1
74861: PLUS
74862: ST_TO_ADDR
74863: GO 74900
// if GetBType ( x [ j ] ) = b_control_tower then
74865: NOP4
74869: PUSH
74870: NOP4
74874: ARRAY
74875: PPUSH
74876: NOP4
74880: PUSH
74881: LD_INT 36
74883: EQUAL
74884: IFFALSE 74900
// places := places + 3 ;
74886: NOP4
74890: PUSH
74891: NOP4
74895: PUSH
74896: LD_INT 3
74898: PLUS
74899: ST_TO_ADDR
74900: GO 74825
74902: POP
74903: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
74904: NOP4
74908: PUSH
74909: LD_INT 0
74911: EQUAL
74912: PUSH
74913: NOP4
74917: PUSH
74918: NOP4
74922: PUSH
74923: NOP4
74927: ARRAY
74928: LESSEQUAL
74929: OR
74930: IFFALSE 74934
// continue ;
74932: GO 74184
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
74934: NOP4
74938: PUSH
74939: NOP4
74943: PUSH
74944: NOP4
74948: ARRAY
74949: PPUSH
74950: LD_INT 25
74952: PUSH
74953: LD_INT 3
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: PPUSH
74960: NOP4
74964: PUSH
74965: NOP4
74969: PUSH
74970: NOP4
74974: ARRAY
74975: DIFF
74976: PPUSH
74977: LD_INT 3
74979: PPUSH
74980: NOP4
74984: ST_TO_ADDR
// for j in tmp do
74985: NOP4
74989: PUSH
74990: NOP4
74994: PUSH
74995: FOR_IN
74996: IFFALSE 75031
// if GetTag ( j ) > 0 then
74998: NOP4
75002: PPUSH
75003: NOP4
75007: PUSH
75008: LD_INT 0
75010: GREATER
75011: IFFALSE 75029
// tmp := tmp diff j ;
75013: NOP4
75017: PUSH
75018: NOP4
75022: PUSH
75023: NOP4
75027: DIFF
75028: ST_TO_ADDR
75029: GO 74995
75031: POP
75032: POP
// if not tmp then
75033: NOP4
75037: NOT
75038: IFFALSE 75042
// continue ;
75040: GO 74184
// if places then
75042: NOP4
75046: IFFALSE 75105
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
75048: NOP4
75052: PUSH
75053: NOP4
75057: PPUSH
75058: NOP4
75062: PPUSH
75063: NOP4
75067: PUSH
75068: NOP4
75072: ARRAY
75073: PUSH
75074: NOP4
75078: PUSH
75079: LD_INT 1
75081: ARRAY
75082: UNION
75083: PPUSH
75084: NOP4
75088: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
75089: NOP4
75093: PUSH
75094: LD_INT 1
75096: ARRAY
75097: PPUSH
75098: LD_INT 126
75100: PPUSH
75101: NOP4
// end ; end ;
75105: GO 74184
75107: POP
75108: POP
// end ;
75109: LD_VAR 0 1
75113: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
75114: LD_INT 0
75116: PPUSH
75117: PPUSH
75118: PPUSH
75119: PPUSH
75120: PPUSH
75121: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
75122: NOP4
75126: NOT
75127: PUSH
75128: NOP4
75132: NOT
75133: OR
75134: PUSH
75135: NOP4
75139: NOT
75140: OR
75141: PUSH
75142: NOP4
75146: PUSH
75147: LD_INT 1
75149: PUSH
75150: LD_INT 2
75152: PUSH
75153: LD_INT 3
75155: PUSH
75156: LD_INT 4
75158: PUSH
75159: LD_INT 5
75161: PUSH
75162: LD_INT 8
75164: PUSH
75165: LD_INT 9
75167: PUSH
75168: LD_INT 15
75170: PUSH
75171: LD_INT 16
75173: PUSH
75174: EMPTY
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: LIST
75184: IN
75185: NOT
75186: OR
75187: IFFALSE 75191
// exit ;
75189: GO 76091
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
75191: NOP4
75195: PUSH
75196: NOP4
75200: PPUSH
75201: LD_INT 21
75203: PUSH
75204: LD_INT 3
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: LD_INT 24
75213: PUSH
75214: LD_INT 250
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: PPUSH
75225: NOP4
75229: ST_TO_ADDR
// case class of 1 , 15 :
75230: NOP4
75234: PUSH
75235: LD_INT 1
75237: DOUBLE
75238: EQUAL
75239: IFTRUE 75249
75241: LD_INT 15
75243: DOUBLE
75244: EQUAL
75245: IFTRUE 75249
75247: GO 75334
75249: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
75250: NOP4
75254: PUSH
75255: NOP4
75259: PPUSH
75260: LD_INT 2
75262: PUSH
75263: LD_INT 30
75265: PUSH
75266: LD_INT 32
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PUSH
75273: LD_INT 30
75275: PUSH
75276: LD_INT 31
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: PUSH
75283: EMPTY
75284: LIST
75285: LIST
75286: LIST
75287: PPUSH
75288: NOP4
75292: PUSH
75293: NOP4
75297: PPUSH
75298: LD_INT 2
75300: PUSH
75301: LD_INT 30
75303: PUSH
75304: LD_INT 4
75306: PUSH
75307: EMPTY
75308: LIST
75309: LIST
75310: PUSH
75311: LD_INT 30
75313: PUSH
75314: LD_INT 5
75316: PUSH
75317: EMPTY
75318: LIST
75319: LIST
75320: PUSH
75321: EMPTY
75322: LIST
75323: LIST
75324: LIST
75325: PPUSH
75326: NOP4
75330: ADD
75331: ST_TO_ADDR
75332: GO 75580
75334: LD_INT 2
75336: DOUBLE
75337: EQUAL
75338: IFTRUE 75348
75340: LD_INT 16
75342: DOUBLE
75343: EQUAL
75344: IFTRUE 75348
75346: GO 75394
75348: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
75349: NOP4
75353: PUSH
75354: NOP4
75358: PPUSH
75359: LD_INT 2
75361: PUSH
75362: LD_INT 30
75364: PUSH
75365: LD_INT 0
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: PUSH
75372: LD_INT 30
75374: PUSH
75375: LD_INT 1
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: PUSH
75382: EMPTY
75383: LIST
75384: LIST
75385: LIST
75386: PPUSH
75387: NOP4
75391: ST_TO_ADDR
75392: GO 75580
75394: LD_INT 3
75396: DOUBLE
75397: EQUAL
75398: IFTRUE 75402
75400: GO 75448
75402: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
75403: NOP4
75407: PUSH
75408: NOP4
75412: PPUSH
75413: LD_INT 2
75415: PUSH
75416: LD_INT 30
75418: PUSH
75419: LD_INT 2
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 30
75428: PUSH
75429: LD_INT 3
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: EMPTY
75437: LIST
75438: LIST
75439: LIST
75440: PPUSH
75441: NOP4
75445: ST_TO_ADDR
75446: GO 75580
75448: LD_INT 4
75450: DOUBLE
75451: EQUAL
75452: IFTRUE 75456
75454: GO 75513
75456: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
75457: NOP4
75461: PUSH
75462: NOP4
75466: PPUSH
75467: LD_INT 2
75469: PUSH
75470: LD_INT 30
75472: PUSH
75473: LD_INT 6
75475: PUSH
75476: EMPTY
75477: LIST
75478: LIST
75479: PUSH
75480: LD_INT 30
75482: PUSH
75483: LD_INT 7
75485: PUSH
75486: EMPTY
75487: LIST
75488: LIST
75489: PUSH
75490: LD_INT 30
75492: PUSH
75493: LD_INT 8
75495: PUSH
75496: EMPTY
75497: LIST
75498: LIST
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: LIST
75504: LIST
75505: PPUSH
75506: NOP4
75510: ST_TO_ADDR
75511: GO 75580
75513: LD_INT 5
75515: DOUBLE
75516: EQUAL
75517: IFTRUE 75533
75519: LD_INT 8
75521: DOUBLE
75522: EQUAL
75523: IFTRUE 75533
75525: LD_INT 9
75527: DOUBLE
75528: EQUAL
75529: IFTRUE 75533
75531: GO 75579
75533: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
75534: NOP4
75538: PUSH
75539: NOP4
75543: PPUSH
75544: LD_INT 2
75546: PUSH
75547: LD_INT 30
75549: PUSH
75550: LD_INT 4
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: PUSH
75557: LD_INT 30
75559: PUSH
75560: LD_INT 5
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PUSH
75567: EMPTY
75568: LIST
75569: LIST
75570: LIST
75571: PPUSH
75572: NOP4
75576: ST_TO_ADDR
75577: GO 75580
75579: POP
// if not tmp then
75580: NOP4
75584: NOT
75585: IFFALSE 75589
// exit ;
75587: GO 76091
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
75589: NOP4
75593: PUSH
75594: LD_INT 1
75596: PUSH
75597: LD_INT 15
75599: PUSH
75600: EMPTY
75601: LIST
75602: LIST
75603: IN
75604: PUSH
75605: NOP4
75609: PUSH
75610: NOP4
75614: ARRAY
75615: AND
75616: IFFALSE 75772
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
75618: NOP4
75622: PUSH
75623: NOP4
75627: PUSH
75628: NOP4
75632: ARRAY
75633: PUSH
75634: LD_INT 1
75636: ARRAY
75637: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
75638: NOP4
75642: PUSH
75643: NOP4
75647: PUSH
75648: NOP4
75652: ARRAY
75653: IN
75654: NOT
75655: IFFALSE 75770
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
75657: NOP4
75661: PUSH
75662: NOP4
75666: PPUSH
75667: NOP4
75671: PUSH
75672: NOP4
75676: PUSH
75677: NOP4
75681: ARRAY
75682: PUSH
75683: LD_INT 1
75685: PLUS
75686: PUSH
75687: EMPTY
75688: LIST
75689: LIST
75690: PPUSH
75691: NOP4
75695: PPUSH
75696: NOP4
75700: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
75701: NOP4
75705: PUSH
75706: NOP4
75710: PPUSH
75711: NOP4
75715: PPUSH
75716: NOP4
75720: PUSH
75721: NOP4
75725: ARRAY
75726: PUSH
75727: NOP4
75731: DIFF
75732: PPUSH
75733: NOP4
75737: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
75738: NOP4
75742: PPUSH
75743: NOP4
75747: PUSH
75748: NOP4
75752: ARRAY
75753: PUSH
75754: NOP4
75758: PUSH
75759: NOP4
75763: ARRAY
75764: ARRAY
75765: PPUSH
75766: NOP4
// end ; exit ;
75770: GO 76091
// end ; if tmp > 1 then
75772: NOP4
75776: PUSH
75777: LD_INT 1
75779: GREATER
75780: IFFALSE 75884
// for i = 2 to tmp do
75782: NOP4
75786: PUSH
75787: DOUBLE
75788: LD_INT 2
75790: DEC
75791: ST_TO_ADDR
75792: NOP4
75796: PUSH
75797: FOR_TO
75798: IFFALSE 75882
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
75800: NOP4
75804: PUSH
75805: NOP4
75809: ARRAY
75810: PPUSH
75811: NOP4
75815: PUSH
75816: LD_INT 6
75818: EQUAL
75819: IFFALSE 75880
// begin x := tmp [ i ] ;
75821: NOP4
75825: PUSH
75826: NOP4
75830: PUSH
75831: NOP4
75835: ARRAY
75836: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
75837: NOP4
75841: PUSH
75842: NOP4
75846: PPUSH
75847: NOP4
75851: PPUSH
75852: NOP4
75856: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
75857: NOP4
75861: PUSH
75862: NOP4
75866: PPUSH
75867: LD_INT 1
75869: PPUSH
75870: NOP4
75874: PPUSH
75875: NOP4
75879: ST_TO_ADDR
// end ;
75880: GO 75797
75882: POP
75883: POP
// for i in tmp do
75884: NOP4
75888: PUSH
75889: NOP4
75893: PUSH
75894: FOR_IN
75895: IFFALSE 75964
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
75897: NOP4
75901: PPUSH
75902: NOP4
75906: PUSH
75907: LD_INT 6
75909: LESS
75910: PUSH
75911: NOP4
75915: PPUSH
75916: NOP4
75920: PUSH
75921: LD_INT 31
75923: PUSH
75924: LD_INT 32
75926: PUSH
75927: EMPTY
75928: LIST
75929: LIST
75930: IN
75931: NOT
75932: AND
75933: PUSH
75934: NOP4
75938: PPUSH
75939: NOP4
75943: PUSH
75944: LD_INT 0
75946: EQUAL
75947: OR
75948: IFFALSE 75962
// begin j := i ;
75950: NOP4
75954: PUSH
75955: NOP4
75959: ST_TO_ADDR
// break ;
75960: GO 75964
// end ; end ;
75962: GO 75894
75964: POP
75965: POP
// if j then
75966: NOP4
75970: IFFALSE 75988
// ComEnterUnit ( unit , j ) else
75972: NOP4
75976: PPUSH
75977: NOP4
75981: PPUSH
75982: NOP4
75986: GO 76091
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75988: NOP4
75992: PUSH
75993: NOP4
75997: PPUSH
75998: LD_INT 2
76000: PUSH
76001: LD_INT 30
76003: PUSH
76004: LD_INT 0
76006: PUSH
76007: EMPTY
76008: LIST
76009: LIST
76010: PUSH
76011: LD_INT 30
76013: PUSH
76014: LD_INT 1
76016: PUSH
76017: EMPTY
76018: LIST
76019: LIST
76020: PUSH
76021: EMPTY
76022: LIST
76023: LIST
76024: LIST
76025: PPUSH
76026: NOP4
76030: ST_TO_ADDR
// if depot then
76031: NOP4
76035: IFFALSE 76091
// begin depot := NearestUnitToUnit ( depot , unit ) ;
76037: NOP4
76041: PUSH
76042: NOP4
76046: PPUSH
76047: NOP4
76051: PPUSH
76052: NOP4
76056: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
76057: NOP4
76061: PPUSH
76062: NOP4
76066: PPUSH
76067: NOP4
76071: PUSH
76072: LD_INT 10
76074: GREATER
76075: IFFALSE 76091
// ComStandNearbyBuilding ( unit , depot ) ;
76077: NOP4
76081: PPUSH
76082: NOP4
76086: PPUSH
76087: NOP4
// end ; end ; end ;
76091: LD_VAR 0 5
76095: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
76096: LD_INT 0
76098: PPUSH
76099: PPUSH
76100: PPUSH
76101: PPUSH
// if not mc_bases then
76102: NOP4
76106: NOT
76107: IFFALSE 76111
// exit ;
76109: GO 76350
// for i = 1 to mc_bases do
76111: NOP4
76115: PUSH
76116: DOUBLE
76117: LD_INT 1
76119: DEC
76120: ST_TO_ADDR
76121: NOP4
76125: PUSH
76126: FOR_TO
76127: IFFALSE 76348
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
76129: NOP4
76133: PUSH
76134: NOP4
76138: PUSH
76139: NOP4
76143: ARRAY
76144: PPUSH
76145: LD_INT 21
76147: PUSH
76148: LD_INT 1
76150: PUSH
76151: EMPTY
76152: LIST
76153: LIST
76154: PPUSH
76155: NOP4
76159: PUSH
76160: NOP4
76164: PUSH
76165: NOP4
76169: ARRAY
76170: UNION
76171: ST_TO_ADDR
// if not tmp then
76172: NOP4
76176: NOT
76177: IFFALSE 76181
// continue ;
76179: GO 76126
// for j in tmp do
76181: NOP4
76185: PUSH
76186: NOP4
76190: PUSH
76191: FOR_IN
76192: IFFALSE 76344
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
76194: NOP4
76198: PPUSH
76199: NOP4
76203: NOT
76204: PUSH
76205: NOP4
76209: PPUSH
76210: NOP4
76214: NOT
76215: AND
76216: PUSH
76217: NOP4
76221: PPUSH
76222: NOP4
76226: NOT
76227: AND
76228: PUSH
76229: NOP4
76233: PPUSH
76234: NOP4
76238: NOT
76239: AND
76240: PUSH
76241: NOP4
76245: PUSH
76246: NOP4
76250: PUSH
76251: NOP4
76255: ARRAY
76256: PUSH
76257: LD_INT 1
76259: ARRAY
76260: IN
76261: NOT
76262: AND
76263: PUSH
76264: NOP4
76268: PUSH
76269: NOP4
76273: PUSH
76274: NOP4
76278: ARRAY
76279: PUSH
76280: LD_INT 2
76282: ARRAY
76283: IN
76284: NOT
76285: AND
76286: PUSH
76287: NOP4
76291: PUSH
76292: NOP4
76296: PUSH
76297: NOP4
76301: ARRAY
76302: IN
76303: NOT
76304: AND
76305: IFFALSE 76342
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
76307: NOP4
76311: PPUSH
76312: NOP4
76316: PUSH
76317: NOP4
76321: ARRAY
76322: PPUSH
76323: NOP4
76327: PPUSH
76328: NOP4
76332: PPUSH
76333: NOP4
76337: PPUSH
76338: NOP4
// end ;
76342: GO 76191
76344: POP
76345: POP
// end ;
76346: GO 76126
76348: POP
76349: POP
// end ;
76350: LD_VAR 0 1
76354: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
76355: LD_INT 0
76357: PPUSH
76358: PPUSH
76359: PPUSH
76360: PPUSH
76361: PPUSH
76362: PPUSH
// if not mc_bases [ base ] then
76363: NOP4
76367: PUSH
76368: NOP4
76372: ARRAY
76373: NOT
76374: IFFALSE 76378
// exit ;
76376: GO 76560
// tmp := [ ] ;
76378: NOP4
76382: PUSH
76383: EMPTY
76384: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
76385: NOP4
76389: PUSH
76390: NOP4
76394: PPUSH
76395: LD_INT 0
76397: PPUSH
76398: NOP4
76402: ST_TO_ADDR
// if not list then
76403: NOP4
76407: NOT
76408: IFFALSE 76412
// exit ;
76410: GO 76560
// for i = 1 to amount do
76412: NOP4
76416: PUSH
76417: DOUBLE
76418: LD_INT 1
76420: DEC
76421: ST_TO_ADDR
76422: NOP4
76426: PUSH
76427: FOR_TO
76428: IFFALSE 76508
// begin x := rand ( 1 , list [ 1 ] ) ;
76430: NOP4
76434: PUSH
76435: LD_INT 1
76437: PPUSH
76438: NOP4
76442: PUSH
76443: LD_INT 1
76445: ARRAY
76446: PPUSH
76447: NOP4
76451: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
76452: NOP4
76456: PUSH
76457: NOP4
76461: PPUSH
76462: NOP4
76466: PPUSH
76467: NOP4
76471: PUSH
76472: LD_INT 1
76474: ARRAY
76475: PUSH
76476: NOP4
76480: ARRAY
76481: PUSH
76482: NOP4
76486: PUSH
76487: LD_INT 2
76489: ARRAY
76490: PUSH
76491: NOP4
76495: ARRAY
76496: PUSH
76497: EMPTY
76498: LIST
76499: LIST
76500: PPUSH
76501: NOP4
76505: ST_TO_ADDR
// end ;
76506: GO 76427
76508: POP
76509: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
76510: NOP4
76514: PUSH
76515: NOP4
76519: PPUSH
76520: NOP4
76524: PPUSH
76525: NOP4
76529: PPUSH
76530: NOP4
76534: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
76535: NOP4
76539: PUSH
76540: NOP4
76544: PPUSH
76545: NOP4
76549: PPUSH
76550: NOP4
76554: PPUSH
76555: NOP4
76559: ST_TO_ADDR
// end ;
76560: LD_VAR 0 4
76564: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
76565: LD_INT 0
76567: PPUSH
// if not mc_bases [ base ] then
76568: NOP4
76572: PUSH
76573: NOP4
76577: ARRAY
76578: NOT
76579: IFFALSE 76583
// exit ;
76581: GO 76608
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
76583: NOP4
76587: PUSH
76588: NOP4
76592: PPUSH
76593: NOP4
76597: PPUSH
76598: NOP4
76602: PPUSH
76603: NOP4
76607: ST_TO_ADDR
// end ;
76608: LD_VAR 0 3
76612: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
76613: LD_INT 0
76615: PPUSH
// if not mc_bases [ base ] then
76616: NOP4
76620: PUSH
76621: NOP4
76625: ARRAY
76626: NOT
76627: IFFALSE 76631
// exit ;
76629: GO 76668
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
76631: NOP4
76635: PUSH
76636: NOP4
76640: PPUSH
76641: NOP4
76645: PPUSH
76646: NOP4
76650: PUSH
76651: NOP4
76655: ARRAY
76656: PUSH
76657: NOP4
76661: UNION
76662: PPUSH
76663: NOP4
76667: ST_TO_ADDR
// end ;
76668: LD_VAR 0 3
76672: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
76673: LD_INT 0
76675: PPUSH
// if not mc_bases [ base ] then
76676: NOP4
76680: PUSH
76681: NOP4
76685: ARRAY
76686: NOT
76687: IFFALSE 76691
// exit ;
76689: GO 76716
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
76691: NOP4
76695: PUSH
76696: NOP4
76700: PPUSH
76701: NOP4
76705: PPUSH
76706: NOP4
76710: PPUSH
76711: NOP4
76715: ST_TO_ADDR
// end ;
76716: LD_VAR 0 3
76720: RET
// export function MC_InsertProduceList ( base , components ) ; begin
76721: LD_INT 0
76723: PPUSH
// if not mc_bases [ base ] then
76724: NOP4
76728: PUSH
76729: NOP4
76733: ARRAY
76734: NOT
76735: IFFALSE 76739
// exit ;
76737: GO 76776
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
76739: NOP4
76743: PUSH
76744: NOP4
76748: PPUSH
76749: NOP4
76753: PPUSH
76754: NOP4
76758: PUSH
76759: NOP4
76763: ARRAY
76764: PUSH
76765: NOP4
76769: ADD
76770: PPUSH
76771: NOP4
76775: ST_TO_ADDR
// end ;
76776: LD_VAR 0 3
76780: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
76781: LD_INT 0
76783: PPUSH
// if not mc_bases [ base ] then
76784: NOP4
76788: PUSH
76789: NOP4
76793: ARRAY
76794: NOT
76795: IFFALSE 76799
// exit ;
76797: GO 76853
// mc_defender := Replace ( mc_defender , base , deflist ) ;
76799: NOP4
76803: PUSH
76804: NOP4
76808: PPUSH
76809: NOP4
76813: PPUSH
76814: NOP4
76818: PPUSH
76819: NOP4
76823: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
76824: NOP4
76828: PUSH
76829: NOP4
76833: PPUSH
76834: NOP4
76838: PPUSH
76839: NOP4
76843: PUSH
76844: LD_INT 0
76846: PLUS
76847: PPUSH
76848: NOP4
76852: ST_TO_ADDR
// end ;
76853: LD_VAR 0 3
76857: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
76858: LD_INT 0
76860: PPUSH
// if not mc_bases [ base ] then
76861: NOP4
76865: PUSH
76866: NOP4
76870: ARRAY
76871: NOT
76872: IFFALSE 76876
// exit ;
76874: GO 76901
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
76876: NOP4
76880: PUSH
76881: NOP4
76885: PPUSH
76886: NOP4
76890: PPUSH
76891: NOP4
76895: PPUSH
76896: NOP4
76900: ST_TO_ADDR
// end ;
76901: LD_VAR 0 3
76905: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
76906: LD_INT 0
76908: PPUSH
76909: PPUSH
76910: PPUSH
76911: PPUSH
// if not mc_bases [ base ] then
76912: NOP4
76916: PUSH
76917: NOP4
76921: ARRAY
76922: NOT
76923: IFFALSE 76927
// exit ;
76925: GO 76992
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
76927: NOP4
76931: PUSH
76932: NOP4
76936: PPUSH
76937: NOP4
76941: PUSH
76942: NOP4
76946: PUSH
76947: NOP4
76951: ARRAY
76952: PUSH
76953: LD_INT 1
76955: PLUS
76956: PUSH
76957: EMPTY
76958: LIST
76959: LIST
76960: PPUSH
76961: NOP4
76965: PUSH
76966: NOP4
76970: PUSH
76971: NOP4
76975: PUSH
76976: NOP4
76980: PUSH
76981: EMPTY
76982: LIST
76983: LIST
76984: LIST
76985: LIST
76986: PPUSH
76987: NOP4
76991: ST_TO_ADDR
// end ;
76992: LD_VAR 0 5
76996: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
76997: LD_INT 0
76999: PPUSH
// if not mc_bases [ base ] then
77000: NOP4
77004: PUSH
77005: NOP4
77009: ARRAY
77010: NOT
77011: IFFALSE 77015
// exit ;
77013: GO 77040
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
77015: NOP4
77019: PUSH
77020: NOP4
77024: PPUSH
77025: NOP4
77029: PPUSH
77030: NOP4
77034: PPUSH
77035: NOP4
77039: ST_TO_ADDR
// end ;
77040: LD_VAR 0 3
77044: RET
// export function MC_GetMinesField ( base ) ; begin
77045: LD_INT 0
77047: PPUSH
// result := mc_mines [ base ] ;
77048: NOP4
77052: PUSH
77053: NOP4
77057: PUSH
77058: NOP4
77062: ARRAY
77063: ST_TO_ADDR
// end ;
77064: LD_VAR 0 2
77068: RET
// export function MC_GetProduceList ( base ) ; begin
77069: LD_INT 0
77071: PPUSH
// result := mc_produce [ base ] ;
77072: NOP4
77076: PUSH
77077: NOP4
77081: PUSH
77082: NOP4
77086: ARRAY
77087: ST_TO_ADDR
// end ;
77088: LD_VAR 0 2
77092: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
77093: LD_INT 0
77095: PPUSH
77096: PPUSH
// if not mc_bases then
77097: NOP4
77101: NOT
77102: IFFALSE 77106
// exit ;
77104: GO 77171
// if mc_bases [ base ] then
77106: NOP4
77110: PUSH
77111: NOP4
77115: ARRAY
77116: IFFALSE 77171
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
77118: NOP4
77122: PUSH
77123: NOP4
77127: PUSH
77128: NOP4
77132: ARRAY
77133: PPUSH
77134: LD_INT 30
77136: PUSH
77137: NOP4
77141: PUSH
77142: EMPTY
77143: LIST
77144: LIST
77145: PPUSH
77146: NOP4
77150: ST_TO_ADDR
// if result then
77151: NOP4
77155: IFFALSE 77171
// result := result [ 1 ] ;
77157: NOP4
77161: PUSH
77162: NOP4
77166: PUSH
77167: LD_INT 1
77169: ARRAY
77170: ST_TO_ADDR
// end ; end ;
77171: LD_VAR 0 3
77175: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
77176: LD_INT 0
77178: PPUSH
77179: PPUSH
// if not mc_bases then
77180: NOP4
77184: NOT
77185: IFFALSE 77189
// exit ;
77187: GO 77234
// if mc_bases [ base ] then
77189: NOP4
77193: PUSH
77194: NOP4
77198: ARRAY
77199: IFFALSE 77234
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
77201: NOP4
77205: PUSH
77206: NOP4
77210: PUSH
77211: NOP4
77215: ARRAY
77216: PPUSH
77217: LD_INT 30
77219: PUSH
77220: NOP4
77224: PUSH
77225: EMPTY
77226: LIST
77227: LIST
77228: PPUSH
77229: NOP4
77233: ST_TO_ADDR
// end ;
77234: LD_VAR 0 3
77238: RET
// export function MC_SetTame ( base , area ) ; begin
77239: LD_INT 0
77241: PPUSH
// if not mc_bases or not base then
77242: NOP4
77246: NOT
77247: PUSH
77248: NOP4
77252: NOT
77253: OR
77254: IFFALSE 77258
// exit ;
77256: GO 77283
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
77258: NOP4
77262: PUSH
77263: NOP4
77267: PPUSH
77268: NOP4
77272: PPUSH
77273: NOP4
77277: PPUSH
77278: NOP4
77282: ST_TO_ADDR
// end ;
77283: LD_VAR 0 3
77287: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
77288: LD_INT 0
77290: PPUSH
77291: PPUSH
// if not mc_bases or not base then
77292: NOP4
77296: NOT
77297: PUSH
77298: NOP4
77302: NOT
77303: OR
77304: IFFALSE 77308
// exit ;
77306: GO 77410
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
77308: NOP4
77312: PUSH
77313: NOP4
77317: PUSH
77318: NOP4
77322: ARRAY
77323: PPUSH
77324: LD_INT 30
77326: PUSH
77327: NOP4
77331: PUSH
77332: EMPTY
77333: LIST
77334: LIST
77335: PPUSH
77336: NOP4
77340: ST_TO_ADDR
// if not tmp then
77341: NOP4
77345: NOT
77346: IFFALSE 77350
// exit ;
77348: GO 77410
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
77350: NOP4
77354: PUSH
77355: NOP4
77359: PPUSH
77360: NOP4
77364: PPUSH
77365: NOP4
77369: PUSH
77370: NOP4
77374: ARRAY
77375: PPUSH
77376: NOP4
77380: PUSH
77381: NOP4
77385: ARRAY
77386: PUSH
77387: LD_INT 1
77389: PLUS
77390: PPUSH
77391: NOP4
77395: PUSH
77396: LD_INT 1
77398: ARRAY
77399: PPUSH
77400: NOP4
77404: PPUSH
77405: NOP4
77409: ST_TO_ADDR
// end ;
77410: LD_VAR 0 3
77414: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
77415: LD_INT 0
77417: PPUSH
77418: PPUSH
// if not mc_bases or not base or not kinds then
77419: NOP4
77423: NOT
77424: PUSH
77425: NOP4
77429: NOT
77430: OR
77431: PUSH
77432: NOP4
77436: NOT
77437: OR
77438: IFFALSE 77442
// exit ;
77440: GO 77503
// for i in kinds do
77442: NOP4
77446: PUSH
77447: NOP4
77451: PUSH
77452: FOR_IN
77453: IFFALSE 77501
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
77455: NOP4
77459: PUSH
77460: NOP4
77464: PPUSH
77465: NOP4
77469: PUSH
77470: NOP4
77474: PUSH
77475: NOP4
77479: ARRAY
77480: PUSH
77481: LD_INT 1
77483: PLUS
77484: PUSH
77485: EMPTY
77486: LIST
77487: LIST
77488: PPUSH
77489: NOP4
77493: PPUSH
77494: NOP4
77498: ST_TO_ADDR
77499: GO 77452
77501: POP
77502: POP
// end ;
77503: LD_VAR 0 3
77507: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
77508: LD_INT 0
77510: PPUSH
// if not mc_bases or not base or not areas then
77511: NOP4
77515: NOT
77516: PUSH
77517: NOP4
77521: NOT
77522: OR
77523: PUSH
77524: NOP4
77528: NOT
77529: OR
77530: IFFALSE 77534
// exit ;
77532: GO 77559
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
77534: NOP4
77538: PUSH
77539: NOP4
77543: PPUSH
77544: NOP4
77548: PPUSH
77549: NOP4
77553: PPUSH
77554: NOP4
77558: ST_TO_ADDR
// end ;
77559: LD_VAR 0 3
77563: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
77564: LD_INT 0
77566: PPUSH
// if not mc_bases or not base or not teleports_exit then
77567: NOP4
77571: NOT
77572: PUSH
77573: NOP4
77577: NOT
77578: OR
77579: PUSH
77580: NOP4
77584: NOT
77585: OR
77586: IFFALSE 77590
// exit ;
77588: GO 77615
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
77590: NOP4
77594: PUSH
77595: NOP4
77599: PPUSH
77600: NOP4
77604: PPUSH
77605: NOP4
77609: PPUSH
77610: NOP4
77614: ST_TO_ADDR
// end ;
77615: LD_VAR 0 3
77619: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
77620: LD_INT 0
77622: PPUSH
77623: PPUSH
77624: PPUSH
// if not mc_bases or not base or not ext_list then
77625: NOP4
77629: NOT
77630: PUSH
77631: NOP4
77635: NOT
77636: OR
77637: PUSH
77638: NOP4
77642: NOT
77643: OR
77644: IFFALSE 77648
// exit ;
77646: GO 77821
// tmp := GetFacExtXYD ( x , y , d ) ;
77648: NOP4
77652: PUSH
77653: NOP4
77657: PPUSH
77658: NOP4
77662: PPUSH
77663: NOP4
77667: PPUSH
77668: NOP4
77672: ST_TO_ADDR
// if not tmp then
77673: NOP4
77677: NOT
77678: IFFALSE 77682
// exit ;
77680: GO 77821
// for i in tmp do
77682: NOP4
77686: PUSH
77687: NOP4
77691: PUSH
77692: FOR_IN
77693: IFFALSE 77819
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
77695: NOP4
77699: PUSH
77700: NOP4
77704: PPUSH
77705: NOP4
77709: PPUSH
77710: NOP4
77714: PUSH
77715: NOP4
77719: ARRAY
77720: PPUSH
77721: NOP4
77725: PUSH
77726: NOP4
77730: ARRAY
77731: PUSH
77732: LD_INT 1
77734: PLUS
77735: PPUSH
77736: NOP4
77740: PUSH
77741: LD_INT 1
77743: ARRAY
77744: PUSH
77745: NOP4
77749: PUSH
77750: LD_INT 1
77752: ARRAY
77753: PUSH
77754: NOP4
77758: PUSH
77759: LD_INT 2
77761: ARRAY
77762: PUSH
77763: NOP4
77767: PUSH
77768: LD_INT 3
77770: ARRAY
77771: PUSH
77772: EMPTY
77773: LIST
77774: LIST
77775: LIST
77776: LIST
77777: PPUSH
77778: NOP4
77782: PPUSH
77783: NOP4
77787: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
77788: NOP4
77792: PUSH
77793: NOP4
77797: PPUSH
77798: LD_INT 1
77800: PPUSH
77801: NOP4
77805: ST_TO_ADDR
// if not ext_list then
77806: NOP4
77810: NOT
77811: IFFALSE 77817
// exit ;
77813: POP
77814: POP
77815: GO 77821
// end ;
77817: GO 77692
77819: POP
77820: POP
// end ;
77821: LD_VAR 0 6
77825: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
77826: LD_INT 0
77828: PPUSH
// if not mc_bases or not base or not weapon_list then
77829: NOP4
77833: NOT
77834: PUSH
77835: NOP4
77839: NOT
77840: OR
77841: PUSH
77842: NOP4
77846: NOT
77847: OR
77848: IFFALSE 77852
// exit ;
77850: GO 77877
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
77852: NOP4
77856: PUSH
77857: NOP4
77861: PPUSH
77862: NOP4
77866: PPUSH
77867: NOP4
77871: PPUSH
77872: NOP4
77876: ST_TO_ADDR
// end ;
77877: LD_VAR 0 3
77881: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
77882: LD_INT 0
77884: PPUSH
// if not mc_bases or not base or not tech_list then
77885: NOP4
77889: NOT
77890: PUSH
77891: NOP4
77895: NOT
77896: OR
77897: PUSH
77898: NOP4
77902: NOT
77903: OR
77904: IFFALSE 77908
// exit ;
77906: GO 77933
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
77908: NOP4
77912: PUSH
77913: NOP4
77917: PPUSH
77918: NOP4
77922: PPUSH
77923: NOP4
77927: PPUSH
77928: NOP4
77932: ST_TO_ADDR
// end ;
77933: LD_VAR 0 3
77937: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
77938: LD_INT 0
77940: PPUSH
// if not mc_bases or not parking_area or not base then
77941: NOP4
77945: NOT
77946: PUSH
77947: NOP4
77951: NOT
77952: OR
77953: PUSH
77954: NOP4
77958: NOT
77959: OR
77960: IFFALSE 77964
// exit ;
77962: GO 77989
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
77964: NOP4
77968: PUSH
77969: NOP4
77973: PPUSH
77974: NOP4
77978: PPUSH
77979: NOP4
77983: PPUSH
77984: NOP4
77988: ST_TO_ADDR
// end ;
77989: LD_VAR 0 3
77993: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
77994: LD_INT 0
77996: PPUSH
// if not mc_bases or not base or not scan_area then
77997: NOP4
78001: NOT
78002: PUSH
78003: NOP4
78007: NOT
78008: OR
78009: PUSH
78010: NOP4
78014: NOT
78015: OR
78016: IFFALSE 78020
// exit ;
78018: GO 78045
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
78020: NOP4
78024: PUSH
78025: NOP4
78029: PPUSH
78030: NOP4
78034: PPUSH
78035: NOP4
78039: PPUSH
78040: NOP4
78044: ST_TO_ADDR
// end ;
78045: LD_VAR 0 3
78049: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
78050: LD_INT 0
78052: PPUSH
78053: PPUSH
// if not mc_bases or not base then
78054: NOP4
78058: NOT
78059: PUSH
78060: NOP4
78064: NOT
78065: OR
78066: IFFALSE 78070
// exit ;
78068: GO 78134
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
78070: NOP4
78074: PUSH
78075: LD_INT 1
78077: PUSH
78078: LD_INT 2
78080: PUSH
78081: LD_INT 3
78083: PUSH
78084: LD_INT 4
78086: PUSH
78087: LD_INT 11
78089: PUSH
78090: EMPTY
78091: LIST
78092: LIST
78093: LIST
78094: LIST
78095: LIST
78096: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
78097: NOP4
78101: PUSH
78102: NOP4
78106: PPUSH
78107: NOP4
78111: PPUSH
78112: NOP4
78116: PUSH
78117: NOP4
78121: ARRAY
78122: PUSH
78123: NOP4
78127: DIFF
78128: PPUSH
78129: NOP4
78133: ST_TO_ADDR
// end ;
78134: LD_VAR 0 2
78138: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
78139: LD_INT 0
78141: PPUSH
// result := mc_vehicles [ base ] ;
78142: NOP4
78146: PUSH
78147: NOP4
78151: PUSH
78152: NOP4
78156: ARRAY
78157: ST_TO_ADDR
// if onlyCombat then
78158: NOP4
78162: IFFALSE 78327
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
78164: NOP4
78168: PUSH
78169: NOP4
78173: PUSH
78174: NOP4
78178: PPUSH
78179: LD_INT 2
78181: PUSH
78182: LD_INT 34
78184: PUSH
78185: LD_INT 12
78187: PUSH
78188: EMPTY
78189: LIST
78190: LIST
78191: PUSH
78192: LD_INT 34
78194: PUSH
78195: LD_INT 51
78197: PUSH
78198: EMPTY
78199: LIST
78200: LIST
78201: PUSH
78202: LD_INT 34
78204: PUSH
78205: NOP4
78209: PUSH
78210: EMPTY
78211: LIST
78212: LIST
78213: PUSH
78214: LD_INT 34
78216: PUSH
78217: LD_INT 32
78219: PUSH
78220: EMPTY
78221: LIST
78222: LIST
78223: PUSH
78224: LD_INT 34
78226: PUSH
78227: LD_INT 13
78229: PUSH
78230: EMPTY
78231: LIST
78232: LIST
78233: PUSH
78234: LD_INT 34
78236: PUSH
78237: LD_INT 52
78239: PUSH
78240: EMPTY
78241: LIST
78242: LIST
78243: PUSH
78244: LD_INT 34
78246: PUSH
78247: LD_INT 14
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: PUSH
78254: LD_INT 34
78256: PUSH
78257: LD_INT 53
78259: PUSH
78260: EMPTY
78261: LIST
78262: LIST
78263: PUSH
78264: LD_INT 34
78266: PUSH
78267: NOP4
78271: PUSH
78272: EMPTY
78273: LIST
78274: LIST
78275: PUSH
78276: LD_INT 34
78278: PUSH
78279: LD_INT 31
78281: PUSH
78282: EMPTY
78283: LIST
78284: LIST
78285: PUSH
78286: LD_INT 34
78288: PUSH
78289: LD_INT 48
78291: PUSH
78292: EMPTY
78293: LIST
78294: LIST
78295: PUSH
78296: LD_INT 34
78298: PUSH
78299: LD_INT 8
78301: PUSH
78302: EMPTY
78303: LIST
78304: LIST
78305: PUSH
78306: EMPTY
78307: LIST
78308: LIST
78309: LIST
78310: LIST
78311: LIST
78312: LIST
78313: LIST
78314: LIST
78315: LIST
78316: LIST
78317: LIST
78318: LIST
78319: LIST
78320: PPUSH
78321: NOP4
78325: DIFF
78326: ST_TO_ADDR
// end ; end_of_file
78327: LD_VAR 0 3
78331: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
78332: LD_INT 0
78334: PPUSH
78335: PPUSH
78336: PPUSH
// if not mc_bases or not skirmish then
78337: NOP4
78341: NOT
78342: PUSH
78343: NOP4
78347: NOT
78348: OR
78349: IFFALSE 78353
// exit ;
78351: GO 78518
// for i = 1 to mc_bases do
78353: NOP4
78357: PUSH
78358: DOUBLE
78359: LD_INT 1
78361: DEC
78362: ST_TO_ADDR
78363: NOP4
78367: PUSH
78368: FOR_TO
78369: IFFALSE 78516
// begin if sci in mc_bases [ i ] then
78371: NOP4
78375: PUSH
78376: NOP4
78380: PUSH
78381: NOP4
78385: ARRAY
78386: IN
78387: IFFALSE 78514
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
78389: NOP4
78393: PUSH
78394: NOP4
78398: PPUSH
78399: NOP4
78403: PUSH
78404: NOP4
78408: PUSH
78409: NOP4
78413: ARRAY
78414: PUSH
78415: LD_INT 1
78417: PLUS
78418: PUSH
78419: EMPTY
78420: LIST
78421: LIST
78422: PPUSH
78423: NOP4
78427: PPUSH
78428: NOP4
78432: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
78433: NOP4
78437: PUSH
78438: NOP4
78442: PUSH
78443: NOP4
78447: ARRAY
78448: PPUSH
78449: LD_INT 2
78451: PUSH
78452: LD_INT 30
78454: PUSH
78455: LD_INT 0
78457: PUSH
78458: EMPTY
78459: LIST
78460: LIST
78461: PUSH
78462: LD_INT 30
78464: PUSH
78465: LD_INT 1
78467: PUSH
78468: EMPTY
78469: LIST
78470: LIST
78471: PUSH
78472: EMPTY
78473: LIST
78474: LIST
78475: LIST
78476: PPUSH
78477: NOP4
78481: PPUSH
78482: NOP4
78486: PPUSH
78487: NOP4
78491: ST_TO_ADDR
// if tmp then
78492: NOP4
78496: IFFALSE 78512
// ComStandNearbyBuilding ( ape , tmp ) ;
78498: NOP4
78502: PPUSH
78503: NOP4
78507: PPUSH
78508: NOP4
// break ;
78512: GO 78516
// end ; end ;
78514: GO 78368
78516: POP
78517: POP
// end ;
78518: LD_VAR 0 3
78522: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
78523: LD_INT 0
78525: PPUSH
78526: PPUSH
78527: PPUSH
// if not mc_bases or not skirmish then
78528: NOP4
78532: NOT
78533: PUSH
78534: NOP4
78538: NOT
78539: OR
78540: IFFALSE 78544
// exit ;
78542: GO 78633
// for i = 1 to mc_bases do
78544: NOP4
78548: PUSH
78549: DOUBLE
78550: LD_INT 1
78552: DEC
78553: ST_TO_ADDR
78554: NOP4
78558: PUSH
78559: FOR_TO
78560: IFFALSE 78631
// begin if building in mc_busy_turret_list [ i ] then
78562: NOP4
78566: PUSH
78567: NOP4
78571: PUSH
78572: NOP4
78576: ARRAY
78577: IN
78578: IFFALSE 78629
// begin tmp := mc_busy_turret_list [ i ] diff building ;
78580: NOP4
78584: PUSH
78585: NOP4
78589: PUSH
78590: NOP4
78594: ARRAY
78595: PUSH
78596: NOP4
78600: DIFF
78601: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
78602: NOP4
78606: PUSH
78607: NOP4
78611: PPUSH
78612: NOP4
78616: PPUSH
78617: NOP4
78621: PPUSH
78622: NOP4
78626: ST_TO_ADDR
// break ;
78627: GO 78631
// end ; end ;
78629: GO 78559
78631: POP
78632: POP
// end ;
78633: LD_VAR 0 3
78637: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
78638: LD_INT 0
78640: PPUSH
78641: PPUSH
78642: PPUSH
// if not mc_bases or not skirmish then
78643: NOP4
78647: NOT
78648: PUSH
78649: NOP4
78653: NOT
78654: OR
78655: IFFALSE 78659
// exit ;
78657: GO 78858
// for i = 1 to mc_bases do
78659: NOP4
78663: PUSH
78664: DOUBLE
78665: LD_INT 1
78667: DEC
78668: ST_TO_ADDR
78669: NOP4
78673: PUSH
78674: FOR_TO
78675: IFFALSE 78856
// if building in mc_bases [ i ] then
78677: NOP4
78681: PUSH
78682: NOP4
78686: PUSH
78687: NOP4
78691: ARRAY
78692: IN
78693: IFFALSE 78854
// begin tmp := mc_bases [ i ] diff building ;
78695: NOP4
78699: PUSH
78700: NOP4
78704: PUSH
78705: NOP4
78709: ARRAY
78710: PUSH
78711: NOP4
78715: DIFF
78716: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
78717: NOP4
78721: PUSH
78722: NOP4
78726: PPUSH
78727: NOP4
78731: PPUSH
78732: NOP4
78736: PPUSH
78737: NOP4
78741: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
78742: NOP4
78746: PUSH
78747: NOP4
78751: PUSH
78752: NOP4
78756: ARRAY
78757: IN
78758: IFFALSE 78797
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
78760: NOP4
78764: PUSH
78765: NOP4
78769: PPUSH
78770: NOP4
78774: PPUSH
78775: NOP4
78779: PUSH
78780: NOP4
78784: ARRAY
78785: PUSH
78786: NOP4
78790: DIFF
78791: PPUSH
78792: NOP4
78796: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
78797: NOP4
78801: PUSH
78802: NOP4
78806: PUSH
78807: NOP4
78811: ARRAY
78812: IN
78813: IFFALSE 78852
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
78815: NOP4
78819: PUSH
78820: NOP4
78824: PPUSH
78825: NOP4
78829: PPUSH
78830: NOP4
78834: PUSH
78835: NOP4
78839: ARRAY
78840: PUSH
78841: NOP4
78845: DIFF
78846: PPUSH
78847: NOP4
78851: ST_TO_ADDR
// break ;
78852: GO 78856
// end ;
78854: GO 78674
78856: POP
78857: POP
// end ;
78858: LD_VAR 0 4
78862: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
78863: LD_INT 0
78865: PPUSH
78866: PPUSH
78867: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
78868: NOP4
78872: NOT
78873: PUSH
78874: NOP4
78878: NOT
78879: OR
78880: PUSH
78881: NOP4
78885: PUSH
78886: NOP4
78890: IN
78891: NOT
78892: OR
78893: IFFALSE 78897
// exit ;
78895: GO 79020
// for i = 1 to mc_vehicles do
78897: NOP4
78901: PUSH
78902: DOUBLE
78903: LD_INT 1
78905: DEC
78906: ST_TO_ADDR
78907: NOP4
78911: PUSH
78912: FOR_TO
78913: IFFALSE 79018
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
78915: NOP4
78919: PUSH
78920: NOP4
78924: PUSH
78925: NOP4
78929: ARRAY
78930: IN
78931: PUSH
78932: NOP4
78936: PUSH
78937: NOP4
78941: PUSH
78942: NOP4
78946: ARRAY
78947: IN
78948: OR
78949: IFFALSE 79016
// begin tmp := mc_vehicles [ i ] diff old ;
78951: NOP4
78955: PUSH
78956: NOP4
78960: PUSH
78961: NOP4
78965: ARRAY
78966: PUSH
78967: NOP4
78971: DIFF
78972: ST_TO_ADDR
// tmp := tmp diff new ;
78973: NOP4
78977: PUSH
78978: NOP4
78982: PUSH
78983: NOP4
78987: DIFF
78988: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
78989: NOP4
78993: PUSH
78994: NOP4
78998: PPUSH
78999: NOP4
79003: PPUSH
79004: NOP4
79008: PPUSH
79009: NOP4
79013: ST_TO_ADDR
// break ;
79014: GO 79018
// end ;
79016: GO 78912
79018: POP
79019: POP
// end ;
79020: LD_VAR 0 5
79024: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
79025: LD_INT 0
79027: PPUSH
79028: PPUSH
79029: PPUSH
79030: PPUSH
// if not mc_bases or not skirmish then
79031: NOP4
79035: NOT
79036: PUSH
79037: NOP4
79041: NOT
79042: OR
79043: IFFALSE 79047
// exit ;
79045: GO 79424
// side := GetSide ( vehicle ) ;
79047: NOP4
79051: PUSH
79052: NOP4
79056: PPUSH
79057: NOP4
79061: ST_TO_ADDR
// for i = 1 to mc_bases do
79062: NOP4
79066: PUSH
79067: DOUBLE
79068: LD_INT 1
79070: DEC
79071: ST_TO_ADDR
79072: NOP4
79076: PUSH
79077: FOR_TO
79078: IFFALSE 79422
// begin if factory in mc_bases [ i ] then
79080: NOP4
79084: PUSH
79085: NOP4
79089: PUSH
79090: NOP4
79094: ARRAY
79095: IN
79096: IFFALSE 79420
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
79098: NOP4
79102: PUSH
79103: NOP4
79107: ARRAY
79108: PUSH
79109: NOP4
79113: PUSH
79114: NOP4
79118: ARRAY
79119: LESS
79120: PUSH
79121: NOP4
79125: PPUSH
79126: NOP4
79130: PUSH
79131: LD_INT 31
79133: PUSH
79134: LD_INT 32
79136: PUSH
79137: LD_INT 51
79139: PUSH
79140: NOP4
79144: PUSH
79145: LD_INT 12
79147: PUSH
79148: LD_INT 30
79150: PUSH
79151: NOP4
79155: PUSH
79156: LD_INT 11
79158: PUSH
79159: LD_INT 53
79161: PUSH
79162: LD_INT 14
79164: PUSH
79165: NOP4
79169: PUSH
79170: LD_INT 29
79172: PUSH
79173: NOP4
79177: PUSH
79178: LD_INT 13
79180: PUSH
79181: LD_INT 52
79183: PUSH
79184: LD_INT 48
79186: PUSH
79187: LD_INT 8
79189: PUSH
79190: EMPTY
79191: LIST
79192: LIST
79193: LIST
79194: LIST
79195: LIST
79196: LIST
79197: LIST
79198: LIST
79199: LIST
79200: LIST
79201: LIST
79202: LIST
79203: LIST
79204: LIST
79205: LIST
79206: LIST
79207: LIST
79208: IN
79209: NOT
79210: AND
79211: IFFALSE 79259
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
79213: NOP4
79217: PUSH
79218: NOP4
79222: PPUSH
79223: NOP4
79227: PUSH
79228: NOP4
79232: PUSH
79233: NOP4
79237: ARRAY
79238: PUSH
79239: LD_INT 1
79241: PLUS
79242: PUSH
79243: EMPTY
79244: LIST
79245: LIST
79246: PPUSH
79247: NOP4
79251: PPUSH
79252: NOP4
79256: ST_TO_ADDR
79257: GO 79303
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
79259: NOP4
79263: PUSH
79264: NOP4
79268: PPUSH
79269: NOP4
79273: PUSH
79274: NOP4
79278: PUSH
79279: NOP4
79283: ARRAY
79284: PUSH
79285: LD_INT 1
79287: PLUS
79288: PUSH
79289: EMPTY
79290: LIST
79291: LIST
79292: PPUSH
79293: NOP4
79297: PPUSH
79298: NOP4
79302: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
79303: NOP4
79307: PPUSH
79308: NOP4
79312: PUSH
79313: LD_INT 2
79315: EQUAL
79316: IFFALSE 79336
// begin repeat wait ( 0 0$1 ) ;
79318: LD_INT 35
79320: PPUSH
79321: NOP4
// until IsControledBy ( vehicle ) ;
79325: NOP4
79329: PPUSH
79330: NOP4
79334: IFFALSE 79318
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
79336: NOP4
79340: PPUSH
79341: NOP4
79345: PUSH
79346: NOP4
79350: ARRAY
79351: PPUSH
79352: NOP4
// if GetControl ( vehicle ) <> control_manual then
79356: NOP4
79360: PPUSH
79361: NOP4
79365: PUSH
79366: LD_INT 1
79368: NONEQUAL
79369: IFFALSE 79373
// break ;
79371: GO 79422
// repeat wait ( 0 0$1 ) ;
79373: LD_INT 35
79375: PPUSH
79376: NOP4
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
79380: NOP4
79384: PPUSH
79385: NOP4
79389: PUSH
79390: NOP4
79394: ARRAY
79395: PPUSH
79396: NOP4
79400: IFFALSE 79373
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
79402: NOP4
79406: PPUSH
79407: NOP4
79411: PPUSH
79412: NOP4
// exit ;
79416: POP
79417: POP
79418: GO 79424
// end ; end ;
79420: GO 79077
79422: POP
79423: POP
// end ;
79424: LD_VAR 0 3
79428: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
79429: LD_INT 0
79431: PPUSH
79432: PPUSH
79433: PPUSH
79434: PPUSH
// if not mc_bases or not skirmish then
79435: NOP4
79439: NOT
79440: PUSH
79441: NOP4
79445: NOT
79446: OR
79447: IFFALSE 79451
// exit ;
79449: GO 79804
// repeat wait ( 0 0$1 ) ;
79451: LD_INT 35
79453: PPUSH
79454: NOP4
// until GetResourceAmountXY ( x , y ) ;
79458: NOP4
79462: PPUSH
79463: NOP4
79467: PPUSH
79468: NOP4
79472: IFFALSE 79451
// if GetResourceTypeXY ( x , y ) = mat_artefact then
79474: NOP4
79478: PPUSH
79479: NOP4
79483: PPUSH
79484: NOP4
79488: PUSH
79489: LD_INT 4
79491: EQUAL
79492: IFFALSE 79496
// exit ;
79494: GO 79804
// for i = 1 to mc_bases do
79496: NOP4
79500: PUSH
79501: DOUBLE
79502: LD_INT 1
79504: DEC
79505: ST_TO_ADDR
79506: NOP4
79510: PUSH
79511: FOR_TO
79512: IFFALSE 79802
// begin if mc_crates_area [ i ] then
79514: NOP4
79518: PUSH
79519: NOP4
79523: ARRAY
79524: IFFALSE 79635
// for j in mc_crates_area [ i ] do
79526: NOP4
79530: PUSH
79531: NOP4
79535: PUSH
79536: NOP4
79540: ARRAY
79541: PUSH
79542: FOR_IN
79543: IFFALSE 79633
// if InArea ( x , y , j ) then
79545: NOP4
79549: PPUSH
79550: NOP4
79554: PPUSH
79555: NOP4
79559: PPUSH
79560: NOP4
79564: IFFALSE 79631
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
79566: NOP4
79570: PUSH
79571: NOP4
79575: PPUSH
79576: NOP4
79580: PUSH
79581: NOP4
79585: PUSH
79586: NOP4
79590: ARRAY
79591: PUSH
79592: LD_INT 1
79594: PLUS
79595: PUSH
79596: EMPTY
79597: LIST
79598: LIST
79599: PPUSH
79600: NOP4
79604: PUSH
79605: NOP4
79609: PUSH
79610: NOP4
79614: PUSH
79615: EMPTY
79616: LIST
79617: LIST
79618: LIST
79619: PPUSH
79620: NOP4
79624: ST_TO_ADDR
// exit ;
79625: POP
79626: POP
79627: POP
79628: POP
79629: GO 79804
// end ;
79631: GO 79542
79633: POP
79634: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79635: NOP4
79639: PUSH
79640: NOP4
79644: PUSH
79645: NOP4
79649: ARRAY
79650: PPUSH
79651: LD_INT 2
79653: PUSH
79654: LD_INT 30
79656: PUSH
79657: LD_INT 0
79659: PUSH
79660: EMPTY
79661: LIST
79662: LIST
79663: PUSH
79664: LD_INT 30
79666: PUSH
79667: LD_INT 1
79669: PUSH
79670: EMPTY
79671: LIST
79672: LIST
79673: PUSH
79674: EMPTY
79675: LIST
79676: LIST
79677: LIST
79678: PPUSH
79679: NOP4
79683: ST_TO_ADDR
// if not depot then
79684: NOP4
79688: NOT
79689: IFFALSE 79693
// continue ;
79691: GO 79511
// for j in depot do
79693: NOP4
79697: PUSH
79698: NOP4
79702: PUSH
79703: FOR_IN
79704: IFFALSE 79798
// if GetDistUnitXY ( j , x , y ) < 30 then
79706: NOP4
79710: PPUSH
79711: NOP4
79715: PPUSH
79716: NOP4
79720: PPUSH
79721: NOP4
79725: PUSH
79726: LD_INT 30
79728: LESS
79729: IFFALSE 79796
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
79731: NOP4
79735: PUSH
79736: NOP4
79740: PPUSH
79741: NOP4
79745: PUSH
79746: NOP4
79750: PUSH
79751: NOP4
79755: ARRAY
79756: PUSH
79757: LD_INT 1
79759: PLUS
79760: PUSH
79761: EMPTY
79762: LIST
79763: LIST
79764: PPUSH
79765: NOP4
79769: PUSH
79770: NOP4
79774: PUSH
79775: NOP4
79779: PUSH
79780: EMPTY
79781: LIST
79782: LIST
79783: LIST
79784: PPUSH
79785: NOP4
79789: ST_TO_ADDR
// exit ;
79790: POP
79791: POP
79792: POP
79793: POP
79794: GO 79804
// end ;
79796: GO 79703
79798: POP
79799: POP
// end ;
79800: GO 79511
79802: POP
79803: POP
// end ;
79804: LD_VAR 0 6
79808: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
79809: LD_INT 0
79811: PPUSH
79812: PPUSH
79813: PPUSH
79814: PPUSH
// if not mc_bases or not skirmish then
79815: NOP4
79819: NOT
79820: PUSH
79821: NOP4
79825: NOT
79826: OR
79827: IFFALSE 79831
// exit ;
79829: GO 80108
// side := GetSide ( lab ) ;
79831: NOP4
79835: PUSH
79836: NOP4
79840: PPUSH
79841: NOP4
79845: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
79846: NOP4
79850: PUSH
79851: NOP4
79855: IN
79856: NOT
79857: PUSH
79858: NOP4
79862: NOT
79863: OR
79864: PUSH
79865: NOP4
79869: NOT
79870: OR
79871: IFFALSE 79875
// exit ;
79873: GO 80108
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
79875: NOP4
79879: PUSH
79880: NOP4
79884: PPUSH
79885: NOP4
79889: PPUSH
79890: NOP4
79894: PUSH
79895: NOP4
79899: ARRAY
79900: PUSH
79901: NOP4
79905: DIFF
79906: PPUSH
79907: NOP4
79911: ST_TO_ADDR
// for i = 1 to mc_bases do
79912: NOP4
79916: PUSH
79917: DOUBLE
79918: LD_INT 1
79920: DEC
79921: ST_TO_ADDR
79922: NOP4
79926: PUSH
79927: FOR_TO
79928: IFFALSE 80106
// begin if lab in mc_bases [ i ] then
79930: NOP4
79934: PUSH
79935: NOP4
79939: PUSH
79940: NOP4
79944: ARRAY
79945: IN
79946: IFFALSE 80104
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
79948: NOP4
79952: PUSH
79953: LD_INT 11
79955: PUSH
79956: LD_INT 4
79958: PUSH
79959: LD_INT 3
79961: PUSH
79962: LD_INT 2
79964: PUSH
79965: EMPTY
79966: LIST
79967: LIST
79968: LIST
79969: LIST
79970: IN
79971: PUSH
79972: NOP4
79976: PUSH
79977: NOP4
79981: ARRAY
79982: AND
79983: IFFALSE 80104
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
79985: NOP4
79989: PUSH
79990: NOP4
79994: PUSH
79995: NOP4
79999: ARRAY
80000: PUSH
80001: LD_INT 1
80003: ARRAY
80004: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
80005: NOP4
80009: PUSH
80010: NOP4
80014: PPUSH
80015: NOP4
80019: PPUSH
80020: EMPTY
80021: PPUSH
80022: NOP4
80026: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
80027: NOP4
80031: PPUSH
80032: LD_INT 0
80034: PPUSH
80035: NOP4
// ComExitBuilding ( tmp ) ;
80039: NOP4
80043: PPUSH
80044: NOP4
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
80048: NOP4
80052: PUSH
80053: NOP4
80057: PPUSH
80058: NOP4
80062: PPUSH
80063: NOP4
80067: PUSH
80068: NOP4
80072: ARRAY
80073: PPUSH
80074: LD_INT 1
80076: PPUSH
80077: NOP4
80081: PPUSH
80082: NOP4
80086: PPUSH
80087: NOP4
80091: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
80092: NOP4
80096: PPUSH
80097: LD_INT 112
80099: PPUSH
80100: NOP4
// end ; end ; end ;
80104: GO 79927
80106: POP
80107: POP
// end ;
80108: LD_VAR 0 3
80112: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
80113: LD_INT 0
80115: PPUSH
80116: PPUSH
80117: PPUSH
80118: PPUSH
80119: PPUSH
80120: PPUSH
80121: PPUSH
80122: PPUSH
// if not mc_bases or not skirmish then
80123: NOP4
80127: NOT
80128: PUSH
80129: NOP4
80133: NOT
80134: OR
80135: IFFALSE 80139
// exit ;
80137: GO 81510
// for i = 1 to mc_bases do
80139: NOP4
80143: PUSH
80144: DOUBLE
80145: LD_INT 1
80147: DEC
80148: ST_TO_ADDR
80149: NOP4
80153: PUSH
80154: FOR_TO
80155: IFFALSE 81508
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
80157: NOP4
80161: PUSH
80162: NOP4
80166: PUSH
80167: NOP4
80171: ARRAY
80172: IN
80173: PUSH
80174: NOP4
80178: PUSH
80179: NOP4
80183: PUSH
80184: NOP4
80188: ARRAY
80189: IN
80190: OR
80191: PUSH
80192: NOP4
80196: PUSH
80197: NOP4
80201: PUSH
80202: NOP4
80206: ARRAY
80207: IN
80208: OR
80209: PUSH
80210: NOP4
80214: PUSH
80215: NOP4
80219: PUSH
80220: NOP4
80224: ARRAY
80225: IN
80226: OR
80227: PUSH
80228: NOP4
80232: PUSH
80233: NOP4
80237: PUSH
80238: NOP4
80242: ARRAY
80243: IN
80244: OR
80245: PUSH
80246: NOP4
80250: PUSH
80251: NOP4
80255: PUSH
80256: NOP4
80260: ARRAY
80261: IN
80262: OR
80263: IFFALSE 81506
// begin if un in mc_ape [ i ] then
80265: NOP4
80269: PUSH
80270: NOP4
80274: PUSH
80275: NOP4
80279: ARRAY
80280: IN
80281: IFFALSE 80320
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
80283: NOP4
80287: PUSH
80288: NOP4
80292: PPUSH
80293: NOP4
80297: PPUSH
80298: NOP4
80302: PUSH
80303: NOP4
80307: ARRAY
80308: PUSH
80309: NOP4
80313: DIFF
80314: PPUSH
80315: NOP4
80319: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
80320: NOP4
80324: PUSH
80325: NOP4
80329: PUSH
80330: NOP4
80334: ARRAY
80335: IN
80336: IFFALSE 80360
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
80338: NOP4
80342: PUSH
80343: NOP4
80347: PPUSH
80348: NOP4
80352: PPUSH
80353: EMPTY
80354: PPUSH
80355: NOP4
80359: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
80360: NOP4
80364: PPUSH
80365: NOP4
80369: PUSH
80370: LD_INT 2
80372: EQUAL
80373: PUSH
80374: NOP4
80378: PPUSH
80379: NOP4
80383: PUSH
80384: LD_INT 20
80386: EQUAL
80387: PUSH
80388: NOP4
80392: PUSH
80393: NOP4
80397: PUSH
80398: NOP4
80402: ARRAY
80403: IN
80404: OR
80405: PUSH
80406: NOP4
80410: PPUSH
80411: NOP4
80415: PUSH
80416: LD_INT 12
80418: PUSH
80419: LD_INT 51
80421: PUSH
80422: NOP4
80426: PUSH
80427: LD_INT 32
80429: PUSH
80430: LD_INT 13
80432: PUSH
80433: LD_INT 52
80435: PUSH
80436: LD_INT 31
80438: PUSH
80439: EMPTY
80440: LIST
80441: LIST
80442: LIST
80443: LIST
80444: LIST
80445: LIST
80446: LIST
80447: IN
80448: OR
80449: AND
80450: IFFALSE 80758
// begin if un in mc_defender [ i ] then
80452: NOP4
80456: PUSH
80457: NOP4
80461: PUSH
80462: NOP4
80466: ARRAY
80467: IN
80468: IFFALSE 80507
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
80470: NOP4
80474: PUSH
80475: NOP4
80479: PPUSH
80480: NOP4
80484: PPUSH
80485: NOP4
80489: PUSH
80490: NOP4
80494: ARRAY
80495: PUSH
80496: NOP4
80500: DIFF
80501: PPUSH
80502: NOP4
80506: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
80507: NOP4
80511: PUSH
80512: NOP4
80516: PPUSH
80517: LD_INT 3
80519: PPUSH
80520: NOP4
80524: ST_TO_ADDR
// if fac then
80525: NOP4
80529: IFFALSE 80758
// begin for j in fac do
80531: NOP4
80535: PUSH
80536: NOP4
80540: PUSH
80541: FOR_IN
80542: IFFALSE 80756
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
80544: NOP4
80548: PUSH
80549: NOP4
80553: PPUSH
80554: NOP4
80558: PPUSH
80559: NOP4
80563: PPUSH
80564: NOP4
80568: PPUSH
80569: NOP4
80573: PPUSH
80574: NOP4
80578: PPUSH
80579: NOP4
80583: PPUSH
80584: NOP4
80588: PPUSH
80589: NOP4
80593: PPUSH
80594: NOP4
80598: ST_TO_ADDR
// if components then
80599: NOP4
80603: IFFALSE 80754
// begin if GetWeapon ( un ) = ar_control_tower then
80605: NOP4
80609: PPUSH
80610: NOP4
80614: PUSH
80615: LD_INT 31
80617: EQUAL
80618: IFFALSE 80735
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
80620: NOP4
80624: PPUSH
80625: NOP4
80629: PPUSH
80630: LD_INT 0
80632: PPUSH
80633: NOP4
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
80637: NOP4
80641: PUSH
80642: NOP4
80646: PPUSH
80647: NOP4
80651: PPUSH
80652: NOP4
80656: PUSH
80657: NOP4
80661: ARRAY
80662: PUSH
80663: NOP4
80667: PPUSH
80668: NOP4
80672: DIFF
80673: PPUSH
80674: NOP4
80678: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
80679: NOP4
80683: PUSH
80684: NOP4
80688: PUSH
80689: NOP4
80693: ARRAY
80694: PPUSH
80695: LD_INT 1
80697: PPUSH
80698: NOP4
80702: PPUSH
80703: NOP4
80707: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
80708: NOP4
80712: PUSH
80713: NOP4
80717: PPUSH
80718: NOP4
80722: PPUSH
80723: NOP4
80727: PPUSH
80728: NOP4
80732: ST_TO_ADDR
// end else
80733: GO 80752
// MC_InsertProduceList ( i , [ components ] ) ;
80735: NOP4
80739: PPUSH
80740: NOP4
80744: PUSH
80745: EMPTY
80746: LIST
80747: PPUSH
80748: NOP4
// break ;
80752: GO 80756
// end ; end ;
80754: GO 80541
80756: POP
80757: POP
// end ; end ; if GetType ( un ) = unit_building then
80758: NOP4
80762: PPUSH
80763: NOP4
80767: PUSH
80768: LD_INT 3
80770: EQUAL
80771: IFFALSE 81174
// begin btype := GetBType ( un ) ;
80773: NOP4
80777: PUSH
80778: NOP4
80782: PPUSH
80783: NOP4
80787: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
80788: NOP4
80792: PUSH
80793: LD_INT 29
80795: PUSH
80796: LD_INT 30
80798: PUSH
80799: EMPTY
80800: LIST
80801: LIST
80802: IN
80803: IFFALSE 80876
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
80805: NOP4
80809: PPUSH
80810: NOP4
80814: PPUSH
80815: NOP4
80819: PPUSH
80820: NOP4
80824: PPUSH
80825: NOP4
80829: PPUSH
80830: NOP4
80834: PPUSH
80835: NOP4
80839: NOT
80840: IFFALSE 80876
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
80842: NOP4
80846: PPUSH
80847: NOP4
80851: PPUSH
80852: NOP4
80856: PPUSH
80857: NOP4
80861: PPUSH
80862: NOP4
80866: PPUSH
80867: NOP4
80871: PPUSH
80872: NOP4
// end ; if btype = b_warehouse then
80876: NOP4
80880: PUSH
80881: LD_INT 1
80883: EQUAL
80884: IFFALSE 80902
// begin btype := b_depot ;
80886: NOP4
80890: PUSH
80891: LD_INT 0
80893: ST_TO_ADDR
// pos := 1 ;
80894: NOP4
80898: PUSH
80899: LD_INT 1
80901: ST_TO_ADDR
// end ; if btype = b_factory then
80902: NOP4
80906: PUSH
80907: LD_INT 3
80909: EQUAL
80910: IFFALSE 80928
// begin btype := b_workshop ;
80912: NOP4
80916: PUSH
80917: LD_INT 2
80919: ST_TO_ADDR
// pos := 1 ;
80920: NOP4
80924: PUSH
80925: LD_INT 1
80927: ST_TO_ADDR
// end ; if btype = b_barracks then
80928: NOP4
80932: PUSH
80933: LD_INT 5
80935: EQUAL
80936: IFFALSE 80946
// btype := b_armoury ;
80938: NOP4
80942: PUSH
80943: LD_INT 4
80945: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
80946: NOP4
80950: PUSH
80951: LD_INT 7
80953: PUSH
80954: LD_INT 8
80956: PUSH
80957: EMPTY
80958: LIST
80959: LIST
80960: IN
80961: IFFALSE 80971
// btype := b_lab ;
80963: NOP4
80967: PUSH
80968: LD_INT 6
80970: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
80971: NOP4
80975: PUSH
80976: NOP4
80980: PPUSH
80981: NOP4
80985: PUSH
80986: NOP4
80990: PUSH
80991: NOP4
80995: ARRAY
80996: PUSH
80997: LD_INT 1
80999: PLUS
81000: PUSH
81001: EMPTY
81002: LIST
81003: LIST
81004: PPUSH
81005: NOP4
81009: PUSH
81010: NOP4
81014: PPUSH
81015: NOP4
81019: PUSH
81020: NOP4
81024: PPUSH
81025: NOP4
81029: PUSH
81030: NOP4
81034: PPUSH
81035: NOP4
81039: PUSH
81040: EMPTY
81041: LIST
81042: LIST
81043: LIST
81044: LIST
81045: PPUSH
81046: NOP4
81050: ST_TO_ADDR
// if pos = 1 then
81051: NOP4
81055: PUSH
81056: LD_INT 1
81058: EQUAL
81059: IFFALSE 81174
// begin tmp := mc_build_list [ i ] ;
81061: NOP4
81065: PUSH
81066: NOP4
81070: PUSH
81071: NOP4
81075: ARRAY
81076: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
81077: NOP4
81081: PPUSH
81082: LD_INT 2
81084: PUSH
81085: LD_INT 30
81087: PUSH
81088: LD_INT 0
81090: PUSH
81091: EMPTY
81092: LIST
81093: LIST
81094: PUSH
81095: LD_INT 30
81097: PUSH
81098: LD_INT 1
81100: PUSH
81101: EMPTY
81102: LIST
81103: LIST
81104: PUSH
81105: EMPTY
81106: LIST
81107: LIST
81108: LIST
81109: PPUSH
81110: NOP4
81114: IFFALSE 81124
// pos := 2 ;
81116: NOP4
81120: PUSH
81121: LD_INT 2
81123: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
81124: NOP4
81128: PUSH
81129: NOP4
81133: PPUSH
81134: NOP4
81138: PPUSH
81139: NOP4
81143: PPUSH
81144: NOP4
81148: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
81149: NOP4
81153: PUSH
81154: NOP4
81158: PPUSH
81159: NOP4
81163: PPUSH
81164: NOP4
81168: PPUSH
81169: NOP4
81173: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
81174: NOP4
81178: PUSH
81179: NOP4
81183: PUSH
81184: NOP4
81188: ARRAY
81189: IN
81190: IFFALSE 81229
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
81192: NOP4
81196: PUSH
81197: NOP4
81201: PPUSH
81202: NOP4
81206: PPUSH
81207: NOP4
81211: PUSH
81212: NOP4
81216: ARRAY
81217: PUSH
81218: NOP4
81222: DIFF
81223: PPUSH
81224: NOP4
81228: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
81229: NOP4
81233: PUSH
81234: NOP4
81238: PUSH
81239: NOP4
81243: ARRAY
81244: IN
81245: IFFALSE 81284
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
81247: NOP4
81251: PUSH
81252: NOP4
81256: PPUSH
81257: NOP4
81261: PPUSH
81262: NOP4
81266: PUSH
81267: NOP4
81271: ARRAY
81272: PUSH
81273: NOP4
81277: DIFF
81278: PPUSH
81279: NOP4
81283: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
81284: NOP4
81288: PUSH
81289: NOP4
81293: PUSH
81294: NOP4
81298: ARRAY
81299: IN
81300: IFFALSE 81339
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
81302: NOP4
81306: PUSH
81307: NOP4
81311: PPUSH
81312: NOP4
81316: PPUSH
81317: NOP4
81321: PUSH
81322: NOP4
81326: ARRAY
81327: PUSH
81328: NOP4
81332: DIFF
81333: PPUSH
81334: NOP4
81338: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
81339: NOP4
81343: PUSH
81344: NOP4
81348: PUSH
81349: NOP4
81353: ARRAY
81354: IN
81355: IFFALSE 81394
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
81357: NOP4
81361: PUSH
81362: NOP4
81366: PPUSH
81367: NOP4
81371: PPUSH
81372: NOP4
81376: PUSH
81377: NOP4
81381: ARRAY
81382: PUSH
81383: NOP4
81387: DIFF
81388: PPUSH
81389: NOP4
81393: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
81394: NOP4
81398: PUSH
81399: NOP4
81403: PUSH
81404: NOP4
81408: ARRAY
81409: IN
81410: IFFALSE 81449
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
81412: NOP4
81416: PUSH
81417: NOP4
81421: PPUSH
81422: NOP4
81426: PPUSH
81427: NOP4
81431: PUSH
81432: NOP4
81436: ARRAY
81437: PUSH
81438: NOP4
81442: DIFF
81443: PPUSH
81444: NOP4
81448: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
81449: NOP4
81453: PUSH
81454: NOP4
81458: PUSH
81459: NOP4
81463: ARRAY
81464: IN
81465: IFFALSE 81504
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
81467: NOP4
81471: PUSH
81472: NOP4
81476: PPUSH
81477: NOP4
81481: PPUSH
81482: NOP4
81486: PUSH
81487: NOP4
81491: ARRAY
81492: PUSH
81493: NOP4
81497: DIFF
81498: PPUSH
81499: NOP4
81503: ST_TO_ADDR
// end ; break ;
81504: GO 81508
// end ;
81506: GO 80154
81508: POP
81509: POP
// end ;
81510: LD_VAR 0 2
81514: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
81515: LD_INT 0
81517: PPUSH
81518: PPUSH
81519: PPUSH
// if not mc_bases or not skirmish then
81520: NOP4
81524: NOT
81525: PUSH
81526: NOP4
81530: NOT
81531: OR
81532: IFFALSE 81536
// exit ;
81534: GO 81751
// for i = 1 to mc_bases do
81536: NOP4
81540: PUSH
81541: DOUBLE
81542: LD_INT 1
81544: DEC
81545: ST_TO_ADDR
81546: NOP4
81550: PUSH
81551: FOR_TO
81552: IFFALSE 81749
// begin if building in mc_construct_list [ i ] then
81554: NOP4
81558: PUSH
81559: NOP4
81563: PUSH
81564: NOP4
81568: ARRAY
81569: IN
81570: IFFALSE 81747
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
81572: NOP4
81576: PUSH
81577: NOP4
81581: PPUSH
81582: NOP4
81586: PPUSH
81587: NOP4
81591: PUSH
81592: NOP4
81596: ARRAY
81597: PUSH
81598: NOP4
81602: DIFF
81603: PPUSH
81604: NOP4
81608: ST_TO_ADDR
// if building in mc_lab [ i ] then
81609: NOP4
81613: PUSH
81614: NOP4
81618: PUSH
81619: NOP4
81623: ARRAY
81624: IN
81625: IFFALSE 81680
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
81627: NOP4
81631: PUSH
81632: NOP4
81636: PPUSH
81637: NOP4
81641: PPUSH
81642: NOP4
81646: PUSH
81647: NOP4
81651: ARRAY
81652: PPUSH
81653: LD_INT 1
81655: PPUSH
81656: NOP4
81660: PUSH
81661: NOP4
81665: ARRAY
81666: PPUSH
81667: LD_INT 0
81669: PPUSH
81670: NOP4
81674: PPUSH
81675: NOP4
81679: ST_TO_ADDR
// if not building in mc_bases [ i ] then
81680: NOP4
81684: PUSH
81685: NOP4
81689: PUSH
81690: NOP4
81694: ARRAY
81695: IN
81696: NOT
81697: IFFALSE 81743
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
81699: NOP4
81703: PUSH
81704: NOP4
81708: PPUSH
81709: NOP4
81713: PUSH
81714: NOP4
81718: PUSH
81719: NOP4
81723: ARRAY
81724: PUSH
81725: LD_INT 1
81727: PLUS
81728: PUSH
81729: EMPTY
81730: LIST
81731: LIST
81732: PPUSH
81733: NOP4
81737: PPUSH
81738: NOP4
81742: ST_TO_ADDR
// exit ;
81743: POP
81744: POP
81745: GO 81751
// end ; end ;
81747: GO 81551
81749: POP
81750: POP
// end ;
81751: LD_VAR 0 2
81755: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
81756: LD_INT 0
81758: PPUSH
81759: PPUSH
81760: PPUSH
81761: PPUSH
81762: PPUSH
81763: PPUSH
81764: PPUSH
// if not mc_bases or not skirmish then
81765: NOP4
81769: NOT
81770: PUSH
81771: NOP4
81775: NOT
81776: OR
81777: IFFALSE 81781
// exit ;
81779: GO 82442
// for i = 1 to mc_bases do
81781: NOP4
81785: PUSH
81786: DOUBLE
81787: LD_INT 1
81789: DEC
81790: ST_TO_ADDR
81791: NOP4
81795: PUSH
81796: FOR_TO
81797: IFFALSE 82440
// begin if building in mc_construct_list [ i ] then
81799: NOP4
81803: PUSH
81804: NOP4
81808: PUSH
81809: NOP4
81813: ARRAY
81814: IN
81815: IFFALSE 82438
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
81817: NOP4
81821: PUSH
81822: NOP4
81826: PPUSH
81827: NOP4
81831: PPUSH
81832: NOP4
81836: PUSH
81837: NOP4
81841: ARRAY
81842: PUSH
81843: NOP4
81847: DIFF
81848: PPUSH
81849: NOP4
81853: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
81854: NOP4
81858: PUSH
81859: NOP4
81863: PPUSH
81864: NOP4
81868: PUSH
81869: NOP4
81873: PUSH
81874: NOP4
81878: ARRAY
81879: PUSH
81880: LD_INT 1
81882: PLUS
81883: PUSH
81884: EMPTY
81885: LIST
81886: LIST
81887: PPUSH
81888: NOP4
81892: PPUSH
81893: NOP4
81897: ST_TO_ADDR
// btype := GetBType ( building ) ;
81898: NOP4
81902: PUSH
81903: NOP4
81907: PPUSH
81908: NOP4
81912: ST_TO_ADDR
// side := GetSide ( building ) ;
81913: NOP4
81917: PUSH
81918: NOP4
81922: PPUSH
81923: NOP4
81927: ST_TO_ADDR
// if btype = b_lab then
81928: NOP4
81932: PUSH
81933: LD_INT 6
81935: EQUAL
81936: IFFALSE 81986
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
81938: NOP4
81942: PUSH
81943: NOP4
81947: PPUSH
81948: NOP4
81952: PUSH
81953: NOP4
81957: PUSH
81958: NOP4
81962: ARRAY
81963: PUSH
81964: LD_INT 1
81966: PLUS
81967: PUSH
81968: EMPTY
81969: LIST
81970: LIST
81971: PPUSH
81972: NOP4
81976: PPUSH
81977: NOP4
81981: ST_TO_ADDR
// exit ;
81982: POP
81983: POP
81984: GO 82442
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
81986: NOP4
81990: PUSH
81991: LD_INT 0
81993: PUSH
81994: LD_INT 2
81996: PUSH
81997: LD_INT 4
81999: PUSH
82000: EMPTY
82001: LIST
82002: LIST
82003: LIST
82004: IN
82005: IFFALSE 82129
// begin if btype = b_armoury then
82007: NOP4
82011: PUSH
82012: LD_INT 4
82014: EQUAL
82015: IFFALSE 82025
// btype := b_barracks ;
82017: NOP4
82021: PUSH
82022: LD_INT 5
82024: ST_TO_ADDR
// if btype = b_depot then
82025: NOP4
82029: PUSH
82030: LD_INT 0
82032: EQUAL
82033: IFFALSE 82043
// btype := b_warehouse ;
82035: NOP4
82039: PUSH
82040: LD_INT 1
82042: ST_TO_ADDR
// if btype = b_workshop then
82043: NOP4
82047: PUSH
82048: LD_INT 2
82050: EQUAL
82051: IFFALSE 82061
// btype := b_factory ;
82053: NOP4
82057: PUSH
82058: LD_INT 3
82060: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
82061: NOP4
82065: PPUSH
82066: NOP4
82070: PPUSH
82071: NOP4
82075: PUSH
82076: LD_INT 1
82078: EQUAL
82079: IFFALSE 82125
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
82081: NOP4
82085: PUSH
82086: NOP4
82090: PPUSH
82091: NOP4
82095: PUSH
82096: NOP4
82100: PUSH
82101: NOP4
82105: ARRAY
82106: PUSH
82107: LD_INT 1
82109: PLUS
82110: PUSH
82111: EMPTY
82112: LIST
82113: LIST
82114: PPUSH
82115: NOP4
82119: PPUSH
82120: NOP4
82124: ST_TO_ADDR
// exit ;
82125: POP
82126: POP
82127: GO 82442
// end ; if btype in [ b_bunker , b_turret ] then
82129: NOP4
82133: PUSH
82134: LD_INT 32
82136: PUSH
82137: LD_INT 33
82139: PUSH
82140: EMPTY
82141: LIST
82142: LIST
82143: IN
82144: IFFALSE 82434
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
82146: NOP4
82150: PUSH
82151: NOP4
82155: PPUSH
82156: NOP4
82160: PUSH
82161: NOP4
82165: PUSH
82166: NOP4
82170: ARRAY
82171: PUSH
82172: LD_INT 1
82174: PLUS
82175: PUSH
82176: EMPTY
82177: LIST
82178: LIST
82179: PPUSH
82180: NOP4
82184: PPUSH
82185: NOP4
82189: ST_TO_ADDR
// if btype = b_bunker then
82190: NOP4
82194: PUSH
82195: LD_INT 32
82197: EQUAL
82198: IFFALSE 82434
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
82200: NOP4
82204: PUSH
82205: NOP4
82209: PPUSH
82210: NOP4
82214: PUSH
82215: NOP4
82219: PUSH
82220: NOP4
82224: ARRAY
82225: PUSH
82226: LD_INT 1
82228: PLUS
82229: PUSH
82230: EMPTY
82231: LIST
82232: LIST
82233: PPUSH
82234: NOP4
82238: PPUSH
82239: NOP4
82243: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
82244: NOP4
82248: PUSH
82249: NOP4
82253: PUSH
82254: NOP4
82258: ARRAY
82259: PPUSH
82260: LD_INT 25
82262: PUSH
82263: LD_INT 1
82265: PUSH
82266: EMPTY
82267: LIST
82268: LIST
82269: PUSH
82270: LD_INT 3
82272: PUSH
82273: LD_INT 54
82275: PUSH
82276: EMPTY
82277: LIST
82278: PUSH
82279: EMPTY
82280: LIST
82281: LIST
82282: PUSH
82283: EMPTY
82284: LIST
82285: LIST
82286: PPUSH
82287: NOP4
82291: ST_TO_ADDR
// if tmp then
82292: NOP4
82296: IFFALSE 82302
// exit ;
82298: POP
82299: POP
82300: GO 82442
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
82302: NOP4
82306: PUSH
82307: NOP4
82311: PUSH
82312: NOP4
82316: ARRAY
82317: PPUSH
82318: LD_INT 2
82320: PUSH
82321: LD_INT 30
82323: PUSH
82324: LD_INT 4
82326: PUSH
82327: EMPTY
82328: LIST
82329: LIST
82330: PUSH
82331: LD_INT 30
82333: PUSH
82334: LD_INT 5
82336: PUSH
82337: EMPTY
82338: LIST
82339: LIST
82340: PUSH
82341: EMPTY
82342: LIST
82343: LIST
82344: LIST
82345: PPUSH
82346: NOP4
82350: ST_TO_ADDR
// if not tmp then
82351: NOP4
82355: NOT
82356: IFFALSE 82362
// exit ;
82358: POP
82359: POP
82360: GO 82442
// for j in tmp do
82362: NOP4
82366: PUSH
82367: NOP4
82371: PUSH
82372: FOR_IN
82373: IFFALSE 82432
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
82375: NOP4
82379: PUSH
82380: NOP4
82384: PPUSH
82385: NOP4
82389: PPUSH
82390: LD_INT 25
82392: PUSH
82393: LD_INT 1
82395: PUSH
82396: EMPTY
82397: LIST
82398: LIST
82399: PPUSH
82400: NOP4
82404: ST_TO_ADDR
// if units then
82405: NOP4
82409: IFFALSE 82430
// begin ComExitBuilding ( units [ 1 ] ) ;
82411: NOP4
82415: PUSH
82416: LD_INT 1
82418: ARRAY
82419: PPUSH
82420: NOP4
// exit ;
82424: POP
82425: POP
82426: POP
82427: POP
82428: GO 82442
// end ; end ;
82430: GO 82372
82432: POP
82433: POP
// end ; end ; exit ;
82434: POP
82435: POP
82436: GO 82442
// end ; end ;
82438: GO 81796
82440: POP
82441: POP
// end ;
82442: LD_VAR 0 2
82446: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
82447: LD_INT 0
82449: PPUSH
82450: PPUSH
82451: PPUSH
82452: PPUSH
82453: PPUSH
82454: PPUSH
82455: PPUSH
// if not mc_bases or not skirmish then
82456: NOP4
82460: NOT
82461: PUSH
82462: NOP4
82466: NOT
82467: OR
82468: IFFALSE 82472
// exit ;
82470: GO 82703
// btype := GetBType ( building ) ;
82472: NOP4
82476: PUSH
82477: NOP4
82481: PPUSH
82482: NOP4
82486: ST_TO_ADDR
// x := GetX ( building ) ;
82487: NOP4
82491: PUSH
82492: NOP4
82496: PPUSH
82497: NOP4
82501: ST_TO_ADDR
// y := GetY ( building ) ;
82502: NOP4
82506: PUSH
82507: NOP4
82511: PPUSH
82512: NOP4
82516: ST_TO_ADDR
// d := GetDir ( building ) ;
82517: NOP4
82521: PUSH
82522: NOP4
82526: PPUSH
82527: NOP4
82531: ST_TO_ADDR
// for i = 1 to mc_bases do
82532: NOP4
82536: PUSH
82537: DOUBLE
82538: LD_INT 1
82540: DEC
82541: ST_TO_ADDR
82542: NOP4
82546: PUSH
82547: FOR_TO
82548: IFFALSE 82701
// begin if not mc_build_list [ i ] then
82550: NOP4
82554: PUSH
82555: NOP4
82559: ARRAY
82560: NOT
82561: IFFALSE 82565
// continue ;
82563: GO 82547
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
82565: NOP4
82569: PUSH
82570: NOP4
82574: PUSH
82575: NOP4
82579: PUSH
82580: NOP4
82584: PUSH
82585: EMPTY
82586: LIST
82587: LIST
82588: LIST
82589: LIST
82590: PPUSH
82591: NOP4
82595: PUSH
82596: NOP4
82600: ARRAY
82601: PUSH
82602: LD_INT 1
82604: ARRAY
82605: PPUSH
82606: NOP4
82610: IFFALSE 82699
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
82612: NOP4
82616: PUSH
82617: NOP4
82621: PPUSH
82622: NOP4
82626: PPUSH
82627: NOP4
82631: PUSH
82632: NOP4
82636: ARRAY
82637: PPUSH
82638: LD_INT 1
82640: PPUSH
82641: NOP4
82645: PPUSH
82646: NOP4
82650: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
82651: NOP4
82655: PUSH
82656: NOP4
82660: PPUSH
82661: NOP4
82665: PUSH
82666: NOP4
82670: PUSH
82671: NOP4
82675: ARRAY
82676: PUSH
82677: LD_INT 1
82679: PLUS
82680: PUSH
82681: EMPTY
82682: LIST
82683: LIST
82684: PPUSH
82685: NOP4
82689: PPUSH
82690: NOP4
82694: ST_TO_ADDR
// exit ;
82695: POP
82696: POP
82697: GO 82703
// end ; end ;
82699: GO 82547
82701: POP
82702: POP
// end ;
82703: LD_VAR 0 3
82707: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
82708: LD_INT 0
82710: PPUSH
82711: PPUSH
82712: PPUSH
// if not mc_bases or not skirmish then
82713: NOP4
82717: NOT
82718: PUSH
82719: NOP4
82723: NOT
82724: OR
82725: IFFALSE 82729
// exit ;
82727: GO 82919
// for i = 1 to mc_bases do
82729: NOP4
82733: PUSH
82734: DOUBLE
82735: LD_INT 1
82737: DEC
82738: ST_TO_ADDR
82739: NOP4
82743: PUSH
82744: FOR_TO
82745: IFFALSE 82832
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
82747: NOP4
82751: PUSH
82752: NOP4
82756: PUSH
82757: NOP4
82761: ARRAY
82762: IN
82763: PUSH
82764: NOP4
82768: PUSH
82769: NOP4
82773: PUSH
82774: NOP4
82778: ARRAY
82779: IN
82780: NOT
82781: AND
82782: IFFALSE 82830
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
82784: NOP4
82788: PUSH
82789: NOP4
82793: PPUSH
82794: NOP4
82798: PUSH
82799: NOP4
82803: PUSH
82804: NOP4
82808: ARRAY
82809: PUSH
82810: LD_INT 1
82812: PLUS
82813: PUSH
82814: EMPTY
82815: LIST
82816: LIST
82817: PPUSH
82818: NOP4
82822: PPUSH
82823: NOP4
82827: ST_TO_ADDR
// break ;
82828: GO 82832
// end ; end ;
82830: GO 82744
82832: POP
82833: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
82834: NOP4
82838: PPUSH
82839: NOP4
82843: PUSH
82844: NOP4
82848: IN
82849: PUSH
82850: NOP4
82854: PPUSH
82855: NOP4
82859: PUSH
82860: LD_INT 5
82862: EQUAL
82863: AND
82864: PUSH
82865: NOP4
82869: PPUSH
82870: NOP4
82874: PUSH
82875: LD_INT 18
82877: NONEQUAL
82878: AND
82879: IFFALSE 82919
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
82881: NOP4
82885: PPUSH
82886: NOP4
82890: PUSH
82891: LD_INT 5
82893: PUSH
82894: LD_INT 8
82896: PUSH
82897: LD_INT 9
82899: PUSH
82900: EMPTY
82901: LIST
82902: LIST
82903: LIST
82904: IN
82905: IFFALSE 82919
// SetClass ( unit , 1 ) ;
82907: NOP4
82911: PPUSH
82912: LD_INT 1
82914: PPUSH
82915: NOP4
// end ;
82919: LD_VAR 0 3
82923: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
82924: LD_INT 0
82926: PPUSH
82927: PPUSH
// if not mc_bases or not skirmish then
82928: NOP4
82932: NOT
82933: PUSH
82934: NOP4
82938: NOT
82939: OR
82940: IFFALSE 82944
// exit ;
82942: GO 83060
// if GetLives ( abandoned_vehicle ) > 250 then
82944: NOP4
82948: PPUSH
82949: NOP4
82953: PUSH
82954: LD_INT 250
82956: GREATER
82957: IFFALSE 82961
// exit ;
82959: GO 83060
// for i = 1 to mc_bases do
82961: NOP4
82965: PUSH
82966: DOUBLE
82967: LD_INT 1
82969: DEC
82970: ST_TO_ADDR
82971: NOP4
82975: PUSH
82976: FOR_TO
82977: IFFALSE 83058
// begin if driver in mc_bases [ i ] then
82979: NOP4
82983: PUSH
82984: NOP4
82988: PUSH
82989: NOP4
82993: ARRAY
82994: IN
82995: IFFALSE 83056
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
82997: NOP4
83001: PPUSH
83002: NOP4
83006: PUSH
83007: NOP4
83011: ARRAY
83012: PPUSH
83013: LD_INT 2
83015: PUSH
83016: LD_INT 30
83018: PUSH
83019: LD_INT 0
83021: PUSH
83022: EMPTY
83023: LIST
83024: LIST
83025: PUSH
83026: LD_INT 30
83028: PUSH
83029: LD_INT 1
83031: PUSH
83032: EMPTY
83033: LIST
83034: LIST
83035: PUSH
83036: EMPTY
83037: LIST
83038: LIST
83039: LIST
83040: PPUSH
83041: NOP4
83045: PUSH
83046: LD_INT 1
83048: ARRAY
83049: PPUSH
83050: NOP4
// break ;
83054: GO 83058
// end ; end ;
83056: GO 82976
83058: POP
83059: POP
// end ; end_of_file
83060: LD_VAR 0 5
83064: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
83065: GO 83067
83067: DISABLE
// begin ru_radar := 98 ;
83068: NOP4
83072: PUSH
83073: LD_INT 98
83075: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
83076: NOP4
83080: PUSH
83081: LD_INT 89
83083: ST_TO_ADDR
// us_hack := 99 ;
83084: NOP4
83088: PUSH
83089: LD_INT 99
83091: ST_TO_ADDR
// us_artillery := 97 ;
83092: NOP4
83096: PUSH
83097: LD_INT 97
83099: ST_TO_ADDR
// ar_bio_bomb := 91 ;
83100: NOP4
83104: PUSH
83105: LD_INT 91
83107: ST_TO_ADDR
// end ;
83108: END
