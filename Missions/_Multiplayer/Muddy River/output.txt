// starting var tab ; begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitHc ;
   8: CALL_OW 19
// InitUc ;
  12: CALL_OW 18
// InitBc ;
  16: CALL_OW 21
// InitVariables ;
  20: CALL 74 0 0
// InitMultiplayer ;
  24: CALL 327 0 0
// InitMacro ;
  28: CALL 43978 0 0
// if debug then
  32: LD_EXP 1
  36: IFFALSE 45
// FogOff ( 1 ) ;
  38: LD_INT 1
  40: PPUSH
  41: CALL_OW 344
// PrepareNature ;
  45: CALL 37156 0 0
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  49: LD_INT 2
  51: PPUSH
  52: CALL 1551 0 1
  56: PPUSH
  57: CALL 41088 0 1
// Multiplayer_Start ;
  61: CALL 3428 0 0
// RunMacro ;
  65: CALL 44176 0 0
// Multiplayer_End ;
  69: CALL 3552 0 0
// end ;
  73: END
// export debug , game , side_bot , artifact_get , base_names ; function InitVariables ; begin
  74: LD_INT 0
  76: PPUSH
// debug := 1 ;
  77: LD_ADDR_EXP 1
  81: PUSH
  82: LD_INT 1
  84: ST_TO_ADDR
// side_bot := 2 ;
  85: LD_ADDR_EXP 3
  89: PUSH
  90: LD_INT 2
  92: ST_TO_ADDR
// artifact_get := false ;
  93: LD_ADDR_EXP 4
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// base_names := [ base_a , base_b , base_c , base_d , base_e , base_f , base_g , base_h , base_i , base_j , base_k , base_l , base_m , base_n , base_o , base_p , base_r , base_s , base_t , base_u , base_w , base_x , base_y , base_z ] ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_STRING base_a
 108: PUSH
 109: LD_STRING base_b
 111: PUSH
 112: LD_STRING base_c
 114: PUSH
 115: LD_STRING base_d
 117: PUSH
 118: LD_STRING base_e
 120: PUSH
 121: LD_STRING base_f
 123: PUSH
 124: LD_STRING base_g
 126: PUSH
 127: LD_STRING base_h
 129: PUSH
 130: LD_STRING base_i
 132: PUSH
 133: LD_STRING base_j
 135: PUSH
 136: LD_STRING base_k
 138: PUSH
 139: LD_STRING base_l
 141: PUSH
 142: LD_STRING base_m
 144: PUSH
 145: LD_STRING base_n
 147: PUSH
 148: LD_STRING base_o
 150: PUSH
 151: LD_STRING base_p
 153: PUSH
 154: LD_STRING base_r
 156: PUSH
 157: LD_STRING base_s
 159: PUSH
 160: LD_STRING base_t
 162: PUSH
 163: LD_STRING base_u
 165: PUSH
 166: LD_STRING base_w
 168: PUSH
 169: LD_STRING base_x
 171: PUSH
 172: LD_STRING base_y
 174: PUSH
 175: LD_STRING base_z
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$01 trigger game and not debug_strings do
 209: LD_EXP 2
 213: PUSH
 214: LD_OWVAR 48
 218: NOT
 219: AND
 220: IFFALSE 236
 222: GO 224
 224: DISABLE
// begin enable ;
 225: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 226: LD_ADDR_OWVAR 47
 230: PUSH
 231: CALL 4253 0 0
 235: ST_TO_ADDR
// end ;
 236: END
// function Debuger ; var i ; begin
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
// if not debug then
 241: LD_EXP 1
 245: NOT
 246: IFFALSE 250
// exit ;
 248: GO 322
// game_speed := 5 ;
 250: LD_ADDR_OWVAR 65
 254: PUSH
 255: LD_INT 5
 257: ST_TO_ADDR
// uc_side := 1 ;
 258: LD_ADDR_OWVAR 20
 262: PUSH
 263: LD_INT 1
 265: ST_TO_ADDR
// uc_nation := 1 ;
 266: LD_ADDR_OWVAR 21
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// for i = 1 to 10 do
 274: LD_ADDR_VAR 0 2
 278: PUSH
 279: DOUBLE
 280: LD_INT 1
 282: DEC
 283: ST_TO_ADDR
 284: LD_INT 10
 286: PUSH
 287: FOR_TO
 288: IFFALSE 320
// begin PrepareHuman ( false , 1 , 10 ) ;
 290: LD_INT 0
 292: PPUSH
 293: LD_INT 1
 295: PPUSH
 296: LD_INT 10
 298: PPUSH
 299: CALL_OW 380
// PlaceUnitArea ( CreateHuman , player_1_hum , false ) ;
 303: CALL_OW 44
 307: PPUSH
 308: LD_INT 9
 310: PPUSH
 311: LD_INT 0
 313: PPUSH
 314: CALL_OW 49
// end ;
 318: GO 287
 320: POP
 321: POP
// end ; end_of_file
 322: LD_VAR 0 1
 326: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_ape_amount , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_reinforcements_spawned ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 327: LD_INT 0
 329: PPUSH
 330: PPUSH
 331: PPUSH
 332: PPUSH
 333: PPUSH
// multi_settings_counter := 6 ;
 334: LD_ADDR_EXP 18
 338: PUSH
 339: LD_INT 6
 341: ST_TO_ADDR
// if multiplayer then
 342: LD_OWVAR 4
 346: IFFALSE 470
// begin your_side := mp_player_side ;
 348: LD_ADDR_OWVAR 2
 352: PUSH
 353: LD_OWVAR 7
 357: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 358: LD_ADDR_EXP 6
 362: PUSH
 363: LD_OWVAR 6
 367: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 368: LD_ADDR_EXP 7
 372: PUSH
 373: LD_OWVAR 17
 377: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 378: LD_ADDR_EXP 8
 382: PUSH
 383: LD_OWVAR 15
 387: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 388: LD_ADDR_EXP 9
 392: PUSH
 393: LD_OWVAR 16
 397: ST_TO_ADDR
// multi_teams := mp_teams ;
 398: LD_ADDR_EXP 10
 402: PUSH
 403: LD_OWVAR 12
 407: ST_TO_ADDR
// for i = 1 to multi_settings_counter do
 408: LD_ADDR_VAR 0 2
 412: PUSH
 413: DOUBLE
 414: LD_INT 1
 416: DEC
 417: ST_TO_ADDR
 418: LD_EXP 18
 422: PUSH
 423: FOR_TO
 424: IFFALSE 466
// multi_settings := Insert ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 426: LD_ADDR_EXP 17
 430: PUSH
 431: LD_EXP 17
 435: PPUSH
 436: LD_EXP 17
 440: PUSH
 441: LD_INT 1
 443: PLUS
 444: PPUSH
 445: LD_VAR 0 2
 449: PPUSH
 450: CALL_OW 426
 454: PUSH
 455: LD_INT 1
 457: PLUS
 458: PPUSH
 459: CALL_OW 2
 463: ST_TO_ADDR
 464: GO 423
 466: POP
 467: POP
// end else
 468: GO 656
// begin your_side := 1 ;
 470: LD_ADDR_OWVAR 2
 474: PUSH
 475: LD_INT 1
 477: ST_TO_ADDR
// multi_gametype := 1 ;
 478: LD_ADDR_EXP 6
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// multi_sides := [ 2 , 0 , 0 , 3 , 0 , 0 , 1 , 0 ] ;
 486: LD_ADDR_EXP 7
 490: PUSH
 491: LD_INT 2
 493: PUSH
 494: LD_INT 0
 496: PUSH
 497: LD_INT 0
 499: PUSH
 500: LD_INT 3
 502: PUSH
 503: LD_INT 0
 505: PUSH
 506: LD_INT 0
 508: PUSH
 509: LD_INT 1
 511: PUSH
 512: LD_INT 0
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: ST_TO_ADDR
// multi_side_teams := [ 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 ] ;
 525: LD_ADDR_EXP 8
 529: PUSH
 530: LD_INT 1
 532: PUSH
 533: LD_INT 0
 535: PUSH
 536: LD_INT 0
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: LD_INT 0
 547: PUSH
 548: LD_INT 1
 550: PUSH
 551: LD_INT 0
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: ST_TO_ADDR
// multi_nations := [ 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 ] ;
 564: LD_ADDR_EXP 9
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: LD_INT 0
 574: PUSH
 575: LD_INT 0
 577: PUSH
 578: LD_INT 1
 580: PUSH
 581: LD_INT 0
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: LD_INT 1
 589: PUSH
 590: LD_INT 0
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: LIST
 601: LIST
 602: ST_TO_ADDR
// multi_teams := [ [ 1 , 4 , 7 ] ] ;
 603: LD_ADDR_EXP 10
 607: PUSH
 608: LD_INT 1
 610: PUSH
 611: LD_INT 4
 613: PUSH
 614: LD_INT 7
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: PUSH
 622: EMPTY
 623: LIST
 624: ST_TO_ADDR
// multi_settings := [ 2 , 2 , 1 , 3 , 1 , 1 ] ;
 625: LD_ADDR_EXP 17
 629: PUSH
 630: LD_INT 2
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: LD_INT 1
 638: PUSH
 639: LD_INT 3
 641: PUSH
 642: LD_INT 1
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 656: LD_ADDR_EXP 11
 660: PUSH
 661: LD_INT 0
 663: PUSH
 664: LD_INT 0
 666: PUSH
 667: LD_INT 0
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: LD_INT 0
 675: PUSH
 676: LD_INT 0
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 695: LD_ADDR_EXP 14
 699: PUSH
 700: LD_INT 0
 702: PUSH
 703: LD_INT 0
 705: PUSH
 706: LD_INT 0
 708: PUSH
 709: LD_INT 0
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: LD_INT 0
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 734: LD_ADDR_EXP 25
 738: PUSH
 739: LD_INT 0
 741: PUSH
 742: LD_INT 0
 744: PUSH
 745: LD_INT 0
 747: PUSH
 748: LD_INT 0
 750: PUSH
 751: LD_INT 0
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// multi_teamgame := true ;
 773: LD_ADDR_EXP 15
 777: PUSH
 778: LD_INT 1
 780: ST_TO_ADDR
// multi_allowed_nations := [ 1 ] ;
 781: LD_ADDR_EXP 13
 785: PUSH
 786: LD_INT 1
 788: PUSH
 789: EMPTY
 790: LIST
 791: ST_TO_ADDR
// multi_custom_commanders := true ;
 792: LD_ADDR_EXP 16
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// multi_commanders := [ ] ;
 800: LD_ADDR_EXP 24
 804: PUSH
 805: EMPTY
 806: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 807: LD_ADDR_EXP 27
 811: PUSH
 812: EMPTY
 813: ST_TO_ADDR
// multi_reinforcements_spawned := 0 ;
 814: LD_ADDR_EXP 28
 818: PUSH
 819: LD_INT 0
 821: ST_TO_ADDR
// multi_players_amount := 0 ;
 822: LD_ADDR_EXP 26
 826: PUSH
 827: LD_INT 0
 829: ST_TO_ADDR
// multi_pos_area := [ [ player_1_hum , player_1_veh ] , [ player_2_hum , player_2_veh ] , [ player_3_hum , player_3_veh ] ] ;
 830: LD_ADDR_EXP 12
 834: PUSH
 835: LD_INT 9
 837: PUSH
 838: LD_INT 8
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 27
 847: PUSH
 848: LD_INT 26
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 29
 857: PUSH
 858: LD_INT 28
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: ST_TO_ADDR
// for i = 1 to 8 do
 870: LD_ADDR_VAR 0 2
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 8
 882: PUSH
 883: FOR_TO
 884: IFFALSE 1213
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
 886: LD_VAR 0 2
 890: PPUSH
 891: CALL_OW 530
 895: IFFALSE 1053
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
 897: LD_ADDR_EXP 11
 901: PUSH
 902: LD_EXP 11
 906: PPUSH
 907: LD_VAR 0 2
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL_OW 1
 919: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
 920: LD_ADDR_EXP 9
 924: PUSH
 925: LD_EXP 9
 929: PPUSH
 930: LD_VAR 0 2
 934: PPUSH
 935: LD_INT 0
 937: PPUSH
 938: CALL_OW 1
 942: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
 943: LD_ADDR_EXP 7
 947: PUSH
 948: LD_EXP 7
 952: PPUSH
 953: LD_VAR 0 2
 957: PPUSH
 958: LD_INT 0
 960: PPUSH
 961: CALL_OW 1
 965: ST_TO_ADDR
// for j = 1 to multi_teams do
 966: LD_ADDR_VAR 0 3
 970: PUSH
 971: DOUBLE
 972: LD_INT 1
 974: DEC
 975: ST_TO_ADDR
 976: LD_EXP 10
 980: PUSH
 981: FOR_TO
 982: IFFALSE 1051
// begin if i in multi_teams [ j ] then
 984: LD_VAR 0 2
 988: PUSH
 989: LD_EXP 10
 993: PUSH
 994: LD_VAR 0 3
 998: ARRAY
 999: IN
1000: IFFALSE 1049
// begin tmp := multi_teams [ j ] diff i ;
1002: LD_ADDR_VAR 0 5
1006: PUSH
1007: LD_EXP 10
1011: PUSH
1012: LD_VAR 0 3
1016: ARRAY
1017: PUSH
1018: LD_VAR 0 2
1022: DIFF
1023: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1024: LD_ADDR_EXP 10
1028: PUSH
1029: LD_EXP 10
1033: PPUSH
1034: LD_VAR 0 3
1038: PPUSH
1039: LD_VAR 0 5
1043: PPUSH
1044: CALL_OW 1
1048: ST_TO_ADDR
// end ; end ;
1049: GO 981
1051: POP
1052: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1053: LD_EXP 9
1057: PUSH
1058: LD_VAR 0 2
1062: ARRAY
1063: PUSH
1064: LD_EXP 9
1068: PUSH
1069: LD_VAR 0 2
1073: ARRAY
1074: PUSH
1075: LD_EXP 13
1079: IN
1080: NOT
1081: AND
1082: IFFALSE 1123
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1084: LD_ADDR_EXP 9
1088: PUSH
1089: LD_EXP 9
1093: PPUSH
1094: LD_VAR 0 2
1098: PPUSH
1099: LD_EXP 13
1103: PUSH
1104: LD_INT 1
1106: PPUSH
1107: LD_EXP 13
1111: PPUSH
1112: CALL_OW 12
1116: ARRAY
1117: PPUSH
1118: CALL_OW 1
1122: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1123: LD_EXP 9
1127: PUSH
1128: LD_VAR 0 2
1132: ARRAY
1133: NOT
1134: PUSH
1135: LD_EXP 7
1139: PUSH
1140: LD_VAR 0 2
1144: ARRAY
1145: NOT
1146: AND
1147: PUSH
1148: LD_EXP 11
1152: PUSH
1153: LD_VAR 0 2
1157: ARRAY
1158: NOT
1159: AND
1160: IFFALSE 1185
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1162: LD_ADDR_EXP 14
1166: PUSH
1167: LD_EXP 14
1171: PPUSH
1172: LD_VAR 0 2
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL_OW 1
1184: ST_TO_ADDR
// if multi_sides [ i ] then
1185: LD_EXP 7
1189: PUSH
1190: LD_VAR 0 2
1194: ARRAY
1195: IFFALSE 1211
// multi_players_amount := multi_players_amount + 1 ;
1197: LD_ADDR_EXP 26
1201: PUSH
1202: LD_EXP 26
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: ST_TO_ADDR
// end ;
1211: GO 883
1213: POP
1214: POP
// for i in multi_teams do
1215: LD_ADDR_VAR 0 2
1219: PUSH
1220: LD_EXP 10
1224: PUSH
1225: FOR_IN
1226: IFFALSE 1334
// begin for j = 2 to i do
1228: LD_ADDR_VAR 0 3
1232: PUSH
1233: DOUBLE
1234: LD_INT 2
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 2
1242: PUSH
1243: FOR_TO
1244: IFFALSE 1330
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1246: LD_VAR 0 2
1250: PUSH
1251: LD_VAR 0 3
1255: ARRAY
1256: PPUSH
1257: LD_VAR 0 2
1261: PUSH
1262: LD_INT 1
1264: ARRAY
1265: PPUSH
1266: CALL_OW 343
// for x = 1 to j - 1 do
1270: LD_ADDR_VAR 0 4
1274: PUSH
1275: DOUBLE
1276: LD_INT 1
1278: DEC
1279: ST_TO_ADDR
1280: LD_VAR 0 3
1284: PUSH
1285: LD_INT 1
1287: MINUS
1288: PUSH
1289: FOR_TO
1290: IFFALSE 1326
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1292: LD_VAR 0 2
1296: PUSH
1297: LD_VAR 0 3
1301: ARRAY
1302: PPUSH
1303: LD_VAR 0 2
1307: PUSH
1308: LD_VAR 0 4
1312: ARRAY
1313: PPUSH
1314: LD_INT 1
1316: PPUSH
1317: LD_INT 1
1319: PPUSH
1320: CALL_OW 80
1324: GO 1289
1326: POP
1327: POP
// end ;
1328: GO 1243
1330: POP
1331: POP
// end ;
1332: GO 1225
1334: POP
1335: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1336: LD_ADDR_OWVAR 67
1340: PUSH
1341: LD_INT 1
1343: PUSH
1344: LD_INT 2
1346: PUSH
1347: LD_INT 3
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: LIST
1354: PUSH
1355: LD_EXP 17
1359: PUSH
1360: LD_INT 1
1362: ARRAY
1363: ARRAY
1364: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
1365: LD_ADDR_EXP 19
1369: PUSH
1370: LD_INT 9
1372: PUSH
1373: LD_INT 12
1375: PUSH
1376: LD_INT 15
1378: PUSH
1379: LD_INT 18
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: PUSH
1388: LD_EXP 17
1392: PUSH
1393: LD_INT 2
1395: ARRAY
1396: ARRAY
1397: ST_TO_ADDR
// multi_skill_level := [ 5 , 7 , 9 ] [ multi_settings [ 3 ] ] ;
1398: LD_ADDR_EXP 20
1402: PUSH
1403: LD_INT 5
1405: PUSH
1406: LD_INT 7
1408: PUSH
1409: LD_INT 9
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_EXP 17
1421: PUSH
1422: LD_INT 3
1424: ARRAY
1425: ARRAY
1426: ST_TO_ADDR
// multi_crates_spawn := [ [ 6000 , 0 0$45 ] , [ 8000 , 0 0$36 ] , [ 10000 , 0 0$22 ] , [ 15000 , 0 0$22 ] ] [ multi_settings [ 4 ] ] ;
1427: LD_ADDR_EXP 21
1431: PUSH
1432: LD_INT 6000
1434: PUSH
1435: LD_INT 1575
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 8000
1444: PUSH
1445: LD_INT 1260
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 10000
1454: PUSH
1455: LD_INT 770
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 15000
1464: PUSH
1465: LD_INT 770
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: PUSH
1478: LD_EXP 17
1482: PUSH
1483: LD_INT 4
1485: ARRAY
1486: ARRAY
1487: ST_TO_ADDR
// multi_ape_amount := [ 6 , 8 , 10 ] [ multi_settings [ 5 ] ] ;
1488: LD_ADDR_EXP 22
1492: PUSH
1493: LD_INT 6
1495: PUSH
1496: LD_INT 8
1498: PUSH
1499: LD_INT 10
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: LD_EXP 17
1511: PUSH
1512: LD_INT 5
1514: ARRAY
1515: ARRAY
1516: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1517: LD_ADDR_EXP 23
1521: PUSH
1522: LD_INT 0
1524: PUSH
1525: LD_INT 1
1527: PUSH
1528: LD_INT 2
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_EXP 17
1540: PUSH
1541: LD_INT 6
1543: ARRAY
1544: ARRAY
1545: ST_TO_ADDR
// end ;
1546: LD_VAR 0 1
1550: RET
// export function Multiplayer_SetBotSide ( prefer_side ) ; var i ; begin
1551: LD_INT 0
1553: PPUSH
1554: PPUSH
// ResetFog ;
1555: CALL_OW 335
// if not multi_bots then
1559: LD_EXP 14
1563: NOT
1564: IFFALSE 1568
// exit ;
1566: GO 1640
// if multi_bots [ prefer_side ] then
1568: LD_EXP 14
1572: PUSH
1573: LD_VAR 0 1
1577: ARRAY
1578: IFFALSE 1592
// begin result := prefer_side ;
1580: LD_ADDR_VAR 0 2
1584: PUSH
1585: LD_VAR 0 1
1589: ST_TO_ADDR
// exit ;
1590: GO 1640
// end ; for i = 1 to multi_bots do
1592: LD_ADDR_VAR 0 3
1596: PUSH
1597: DOUBLE
1598: LD_INT 1
1600: DEC
1601: ST_TO_ADDR
1602: LD_EXP 14
1606: PUSH
1607: FOR_TO
1608: IFFALSE 1638
// if multi_bots [ i ] then
1610: LD_EXP 14
1614: PUSH
1615: LD_VAR 0 3
1619: ARRAY
1620: IFFALSE 1636
// begin result := i ;
1622: LD_ADDR_VAR 0 2
1626: PUSH
1627: LD_VAR 0 3
1631: ST_TO_ADDR
// exit ;
1632: POP
1633: POP
1634: GO 1640
// end ;
1636: GO 1607
1638: POP
1639: POP
// end ;
1640: LD_VAR 0 2
1644: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1645: LD_INT 0
1647: PPUSH
// uc_side := side ;
1648: LD_ADDR_OWVAR 20
1652: PUSH
1653: LD_VAR 0 1
1657: ST_TO_ADDR
// uc_nation := 1 ;
1658: LD_ADDR_OWVAR 21
1662: PUSH
1663: LD_INT 1
1665: ST_TO_ADDR
// hc_importance := 100 ;
1666: LD_ADDR_OWVAR 32
1670: PUSH
1671: LD_INT 100
1673: ST_TO_ADDR
// hc_class := 1 ;
1674: LD_ADDR_OWVAR 28
1678: PUSH
1679: LD_INT 1
1681: ST_TO_ADDR
// if num = 1 then
1682: LD_VAR 0 2
1686: PUSH
1687: LD_INT 1
1689: EQUAL
1690: IFFALSE 1772
// begin hc_gallery := us ;
1692: LD_ADDR_OWVAR 33
1696: PUSH
1697: LD_STRING us
1699: ST_TO_ADDR
// hc_face_number := 5 ;
1700: LD_ADDR_OWVAR 34
1704: PUSH
1705: LD_INT 5
1707: ST_TO_ADDR
// hc_name := John Macmilan ;
1708: LD_ADDR_OWVAR 26
1712: PUSH
1713: LD_STRING John Macmilan
1715: ST_TO_ADDR
// hc_sex := sex_male ;
1716: LD_ADDR_OWVAR 27
1720: PUSH
1721: LD_INT 1
1723: ST_TO_ADDR
// hc_skills := [ 7 , 2 , 4 , 4 ] ;
1724: LD_ADDR_OWVAR 31
1728: PUSH
1729: LD_INT 7
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: LD_INT 4
1737: PUSH
1738: LD_INT 4
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1747: LD_ADDR_OWVAR 29
1751: PUSH
1752: LD_INT 11
1754: PUSH
1755: LD_INT 10
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: ST_TO_ADDR
// result := CreateHuman ;
1762: LD_ADDR_VAR 0 3
1766: PUSH
1767: CALL_OW 44
1771: ST_TO_ADDR
// end ; if num = 2 then
1772: LD_VAR 0 2
1776: PUSH
1777: LD_INT 2
1779: EQUAL
1780: IFFALSE 1862
// begin hc_gallery := us ;
1782: LD_ADDR_OWVAR 33
1786: PUSH
1787: LD_STRING us
1789: ST_TO_ADDR
// hc_face_number := 2 ;
1790: LD_ADDR_OWVAR 34
1794: PUSH
1795: LD_INT 2
1797: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
1798: LD_ADDR_OWVAR 26
1802: PUSH
1803: LD_STRING Lucy Donaldson
1805: ST_TO_ADDR
// hc_sex := sex_female ;
1806: LD_ADDR_OWVAR 27
1810: PUSH
1811: LD_INT 2
1813: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 3 ] ;
1814: LD_ADDR_OWVAR 31
1818: PUSH
1819: LD_INT 6
1821: PUSH
1822: LD_INT 3
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: LD_INT 3
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: ST_TO_ADDR
// hc_attr := [ 9 , 12 ] ;
1837: LD_ADDR_OWVAR 29
1841: PUSH
1842: LD_INT 9
1844: PUSH
1845: LD_INT 12
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: ST_TO_ADDR
// result := CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// end ; if num = 3 then
1862: LD_VAR 0 2
1866: PUSH
1867: LD_INT 3
1869: EQUAL
1870: IFFALSE 1952
// begin hc_gallery := us ;
1872: LD_ADDR_OWVAR 33
1876: PUSH
1877: LD_STRING us
1879: ST_TO_ADDR
// hc_face_number := 16 ;
1880: LD_ADDR_OWVAR 34
1884: PUSH
1885: LD_INT 16
1887: ST_TO_ADDR
// hc_name := Peter van Houten ;
1888: LD_ADDR_OWVAR 26
1892: PUSH
1893: LD_STRING Peter van Houten
1895: ST_TO_ADDR
// hc_sex := sex_male ;
1896: LD_ADDR_OWVAR 27
1900: PUSH
1901: LD_INT 1
1903: ST_TO_ADDR
// hc_skills := [ 8 , 1 , 3 , 2 ] ;
1904: LD_ADDR_OWVAR 31
1908: PUSH
1909: LD_INT 8
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 3
1917: PUSH
1918: LD_INT 2
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1927: LD_ADDR_OWVAR 29
1931: PUSH
1932: LD_INT 10
1934: PUSH
1935: LD_INT 11
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: ST_TO_ADDR
// result := CreateHuman ;
1942: LD_ADDR_VAR 0 3
1946: PUSH
1947: CALL_OW 44
1951: ST_TO_ADDR
// end ; end ;
1952: LD_VAR 0 3
1956: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , cl , un , veh , tmp , copy , people_amount ; begin
1957: LD_INT 0
1959: PPUSH
1960: PPUSH
1961: PPUSH
1962: PPUSH
1963: PPUSH
1964: PPUSH
1965: PPUSH
1966: PPUSH
1967: PPUSH
// for i = 1 to 8 do
1968: LD_ADDR_VAR 0 2
1972: PUSH
1973: DOUBLE
1974: LD_INT 1
1976: DEC
1977: ST_TO_ADDR
1978: LD_INT 8
1980: PUSH
1981: FOR_TO
1982: IFFALSE 2872
// begin if not multi_sides [ i ] then
1984: LD_EXP 7
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: NOT
1995: IFFALSE 1999
// continue ;
1997: GO 1981
// if multi_custom_commanders then
1999: LD_EXP 16
2003: IFFALSE 2095
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2005: LD_ADDR_VAR 0 5
2009: PUSH
2010: LD_VAR 0 2
2014: PPUSH
2015: LD_EXP 7
2019: PUSH
2020: LD_VAR 0 2
2024: ARRAY
2025: PPUSH
2026: CALL 1645 0 2
2030: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2031: LD_ADDR_EXP 24
2035: PUSH
2036: LD_EXP 24
2040: PPUSH
2041: LD_EXP 24
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 5
2054: PPUSH
2055: CALL_OW 2
2059: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2060: LD_VAR 0 5
2064: PPUSH
2065: LD_EXP 12
2069: PUSH
2070: LD_EXP 7
2074: PUSH
2075: LD_VAR 0 2
2079: ARRAY
2080: ARRAY
2081: PUSH
2082: LD_INT 1
2084: ARRAY
2085: PPUSH
2086: LD_INT 0
2088: PPUSH
2089: CALL_OW 49
// end else
2093: GO 2306
// begin uc_side := i ;
2095: LD_ADDR_OWVAR 20
2099: PUSH
2100: LD_VAR 0 2
2104: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2105: LD_ADDR_OWVAR 21
2109: PUSH
2110: LD_EXP 9
2114: PUSH
2115: LD_VAR 0 2
2119: ARRAY
2120: ST_TO_ADDR
// hc_importance := 100 ;
2121: LD_ADDR_OWVAR 32
2125: PUSH
2126: LD_INT 100
2128: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2129: LD_INT 0
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: LD_EXP 20
2139: PPUSH
2140: CALL_OW 380
// if multiplayer then
2144: LD_OWVAR 4
2148: IFFALSE 2206
// begin hc_name := mp_sides_players_names [ i ] ;
2150: LD_ADDR_OWVAR 26
2154: PUSH
2155: LD_OWVAR 19
2159: PUSH
2160: LD_VAR 0 2
2164: ARRAY
2165: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2166: LD_ADDR_OWVAR 33
2170: PUSH
2171: LD_STRING MULTIAVATARS
2173: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2174: LD_ADDR_OWVAR 34
2178: PUSH
2179: LD_VAR 0 2
2183: PPUSH
2184: CALL_OW 525
2188: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2189: LD_ADDR_OWVAR 27
2193: PUSH
2194: LD_VAR 0 2
2198: PPUSH
2199: CALL_OW 526
2203: ST_TO_ADDR
// end else
2204: GO 2238
// begin hc_gallery :=  ;
2206: LD_ADDR_OWVAR 33
2210: PUSH
2211: LD_STRING 
2213: ST_TO_ADDR
// hc_name :=  ;
2214: LD_ADDR_OWVAR 26
2218: PUSH
2219: LD_STRING 
2221: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2222: LD_ADDR_OWVAR 27
2226: PUSH
2227: LD_INT 1
2229: PPUSH
2230: LD_INT 2
2232: PPUSH
2233: CALL_OW 12
2237: ST_TO_ADDR
// end ; un := CreateHuman ;
2238: LD_ADDR_VAR 0 5
2242: PUSH
2243: CALL_OW 44
2247: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2248: LD_VAR 0 5
2252: PPUSH
2253: LD_EXP 12
2257: PUSH
2258: LD_EXP 7
2262: PUSH
2263: LD_VAR 0 2
2267: ARRAY
2268: ARRAY
2269: PUSH
2270: LD_INT 1
2272: ARRAY
2273: PPUSH
2274: LD_INT 0
2276: PPUSH
2277: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2281: LD_ADDR_EXP 24
2285: PUSH
2286: LD_EXP 24
2290: PPUSH
2291: LD_VAR 0 2
2295: PPUSH
2296: LD_VAR 0 5
2300: PPUSH
2301: CALL_OW 1
2305: ST_TO_ADDR
// end ; InitHc ;
2306: CALL_OW 19
// InitUc ;
2310: CALL_OW 18
// uc_side := i ;
2314: LD_ADDR_OWVAR 20
2318: PUSH
2319: LD_VAR 0 2
2323: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2324: LD_ADDR_OWVAR 21
2328: PUSH
2329: LD_EXP 9
2333: PUSH
2334: LD_VAR 0 2
2338: ARRAY
2339: ST_TO_ADDR
// hc_gallery :=  ;
2340: LD_ADDR_OWVAR 33
2344: PUSH
2345: LD_STRING 
2347: ST_TO_ADDR
// hc_name :=  ;
2348: LD_ADDR_OWVAR 26
2352: PUSH
2353: LD_STRING 
2355: ST_TO_ADDR
// hc_importance := 0 ;
2356: LD_ADDR_OWVAR 32
2360: PUSH
2361: LD_INT 0
2363: ST_TO_ADDR
// cl := 1 ;
2364: LD_ADDR_VAR 0 4
2368: PUSH
2369: LD_INT 1
2371: ST_TO_ADDR
// for j = 2 to multi_pep_amount do
2372: LD_ADDR_VAR 0 3
2376: PUSH
2377: DOUBLE
2378: LD_INT 2
2380: DEC
2381: ST_TO_ADDR
2382: LD_EXP 19
2386: PUSH
2387: FOR_TO
2388: IFFALSE 2760
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2390: LD_VAR 0 3
2394: PUSH
2395: LD_INT 1
2397: MINUS
2398: PUSH
2399: LD_EXP 19
2403: PUSH
2404: LD_INT 1
2406: MINUS
2407: PUSH
2408: LD_INT 4
2410: DIVREAL
2411: MOD
2412: PUSH
2413: LD_INT 0
2415: EQUAL
2416: IFFALSE 2432
// cl := cl + 1 ;
2418: LD_ADDR_VAR 0 4
2422: PUSH
2423: LD_VAR 0 4
2427: PUSH
2428: LD_INT 1
2430: PLUS
2431: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2432: LD_INT 0
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_EXP 20
2444: PPUSH
2445: CALL_OW 380
// un := CreateHuman ;
2449: LD_ADDR_VAR 0 5
2453: PUSH
2454: CALL_OW 44
2458: ST_TO_ADDR
// if j > copy then
2459: LD_VAR 0 3
2463: PUSH
2464: LD_VAR 0 8
2468: GREATER
2469: IFFALSE 2498
// copy := Replace ( copy , j , un ) else
2471: LD_ADDR_VAR 0 8
2475: PUSH
2476: LD_VAR 0 8
2480: PPUSH
2481: LD_VAR 0 3
2485: PPUSH
2486: LD_VAR 0 5
2490: PPUSH
2491: CALL_OW 1
2495: ST_TO_ADDR
2496: GO 2580
// begin CopySkills ( copy [ j ] , un ) ;
2498: LD_VAR 0 8
2502: PUSH
2503: LD_VAR 0 3
2507: ARRAY
2508: PPUSH
2509: LD_VAR 0 5
2513: PPUSH
2514: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2518: LD_VAR 0 5
2522: PPUSH
2523: LD_INT 2
2525: PPUSH
2526: LD_VAR 0 8
2530: PUSH
2531: LD_VAR 0 3
2535: ARRAY
2536: PPUSH
2537: LD_INT 2
2539: PPUSH
2540: CALL_OW 260
2544: PPUSH
2545: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2549: LD_VAR 0 5
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: LD_VAR 0 8
2561: PUSH
2562: LD_VAR 0 3
2566: ARRAY
2567: PPUSH
2568: LD_INT 1
2570: PPUSH
2571: CALL_OW 260
2575: PPUSH
2576: CALL_OW 239
// end ; if multi_pos_area then
2580: LD_EXP 12
2584: IFFALSE 2758
// begin if GetClass ( un ) = 3 then
2586: LD_VAR 0 5
2590: PPUSH
2591: CALL_OW 257
2595: PUSH
2596: LD_INT 3
2598: EQUAL
2599: IFFALSE 2725
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ j mod 2 + 1 ] , engine_solar , control_manual , [ us_double_gun , us_gatling_gun , us_light_gun ] [ j mod 3 + 1 ] , 100 ) ;
2601: LD_INT 3
2603: PUSH
2604: LD_INT 2
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PUSH
2611: LD_VAR 0 3
2615: PUSH
2616: LD_INT 2
2618: MOD
2619: PUSH
2620: LD_INT 1
2622: PLUS
2623: ARRAY
2624: PPUSH
2625: LD_INT 2
2627: PPUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 5
2633: PUSH
2634: LD_INT 4
2636: PUSH
2637: LD_INT 3
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: LIST
2644: PUSH
2645: LD_VAR 0 3
2649: PUSH
2650: LD_INT 3
2652: MOD
2653: PUSH
2654: LD_INT 1
2656: PLUS
2657: ARRAY
2658: PPUSH
2659: LD_INT 100
2661: PPUSH
2662: CALL 10624 0 5
// veh := CreateVehicle ;
2666: LD_ADDR_VAR 0 6
2670: PUSH
2671: CALL_OW 45
2675: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2676: LD_VAR 0 6
2680: PPUSH
2681: LD_EXP 12
2685: PUSH
2686: LD_EXP 7
2690: PUSH
2691: LD_VAR 0 2
2695: ARRAY
2696: ARRAY
2697: PUSH
2698: LD_INT 2
2700: ARRAY
2701: PPUSH
2702: LD_INT 0
2704: PPUSH
2705: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2709: LD_VAR 0 5
2713: PPUSH
2714: LD_VAR 0 6
2718: PPUSH
2719: CALL_OW 52
// continue ;
2723: GO 2387
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2725: LD_VAR 0 5
2729: PPUSH
2730: LD_EXP 12
2734: PUSH
2735: LD_EXP 7
2739: PUSH
2740: LD_VAR 0 2
2744: ARRAY
2745: ARRAY
2746: PUSH
2747: LD_INT 1
2749: ARRAY
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: CALL_OW 49
// end ; end ;
2758: GO 2387
2760: POP
2761: POP
// for j = 1 to 3 do
2762: LD_ADDR_VAR 0 3
2766: PUSH
2767: DOUBLE
2768: LD_INT 1
2770: DEC
2771: ST_TO_ADDR
2772: LD_INT 3
2774: PUSH
2775: FOR_TO
2776: IFFALSE 2868
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_solar , control_computer , [ us_radar , us_rocket_launcher , us_gatling_gun ] [ j ] , 100 ) ;
2778: LD_INT 2
2780: PUSH
2781: LD_INT 3
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 1
2790: PPUSH
2791: LD_INT 2
2793: PPUSH
2794: CALL_OW 12
2798: ARRAY
2799: PPUSH
2800: LD_INT 2
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: LD_INT 11
2808: PUSH
2809: LD_INT 7
2811: PUSH
2812: LD_INT 4
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: LIST
2819: PUSH
2820: LD_VAR 0 3
2824: ARRAY
2825: PPUSH
2826: LD_INT 100
2828: PPUSH
2829: CALL 10624 0 5
// PlaceUnitArea ( CreateVehicle , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2833: CALL_OW 45
2837: PPUSH
2838: LD_EXP 12
2842: PUSH
2843: LD_EXP 7
2847: PUSH
2848: LD_VAR 0 2
2852: ARRAY
2853: ARRAY
2854: PUSH
2855: LD_INT 1
2857: ARRAY
2858: PPUSH
2859: LD_INT 0
2861: PPUSH
2862: CALL_OW 49
// end ;
2866: GO 2775
2868: POP
2869: POP
// end ;
2870: GO 1981
2872: POP
2873: POP
// end ;
2874: LD_VAR 0 1
2878: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
2879: LD_INT 0
2881: PPUSH
2882: PPUSH
2883: PPUSH
2884: PPUSH
2885: PPUSH
// if not multi_support then
2886: LD_EXP 23
2890: NOT
2891: IFFALSE 2895
// exit ;
2893: GO 3423
// result := [ ] ;
2895: LD_ADDR_VAR 0 1
2899: PUSH
2900: EMPTY
2901: ST_TO_ADDR
// for i = 1 to 8 do
2902: LD_ADDR_VAR 0 2
2906: PUSH
2907: DOUBLE
2908: LD_INT 1
2910: DEC
2911: ST_TO_ADDR
2912: LD_INT 8
2914: PUSH
2915: FOR_TO
2916: IFFALSE 3421
// begin if multi_sides [ i ] then
2918: LD_EXP 7
2922: PUSH
2923: LD_VAR 0 2
2927: ARRAY
2928: IFFALSE 3419
// begin tmp := [ ] ;
2930: LD_ADDR_VAR 0 5
2934: PUSH
2935: EMPTY
2936: ST_TO_ADDR
// if multi_support = 1 then
2937: LD_EXP 23
2941: PUSH
2942: LD_INT 1
2944: EQUAL
2945: IFFALSE 3113
// begin uc_side := i ;
2947: LD_ADDR_OWVAR 20
2951: PUSH
2952: LD_VAR 0 2
2956: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2957: LD_ADDR_OWVAR 21
2961: PUSH
2962: LD_EXP 9
2966: PUSH
2967: LD_VAR 0 2
2971: ARRAY
2972: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
2973: LD_INT 3
2975: PPUSH
2976: LD_INT 1
2978: PPUSH
2979: LD_INT 3
2981: PPUSH
2982: LD_INT 11
2984: PPUSH
2985: LD_INT 40
2987: PPUSH
2988: CALL 10624 0 5
// tmp := tmp ^ CreateVehicle ;
2992: LD_ADDR_VAR 0 5
2996: PUSH
2997: LD_VAR 0 5
3001: PUSH
3002: CALL_OW 45
3006: ADD
3007: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_double_gun , 40 ) ;
3008: LD_INT 2
3010: PPUSH
3011: LD_INT 1
3013: PPUSH
3014: LD_INT 3
3016: PPUSH
3017: LD_INT 5
3019: PPUSH
3020: LD_INT 40
3022: PPUSH
3023: CALL 10624 0 5
// tmp := tmp ^ CreateVehicle ;
3027: LD_ADDR_VAR 0 5
3031: PUSH
3032: LD_VAR 0 5
3036: PUSH
3037: CALL_OW 45
3041: ADD
3042: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_gatling_gun , 40 ) ;
3043: LD_INT 2
3045: PPUSH
3046: LD_INT 3
3048: PPUSH
3049: LD_INT 3
3051: PPUSH
3052: LD_INT 4
3054: PPUSH
3055: LD_INT 40
3057: PPUSH
3058: CALL 10624 0 5
// tmp := tmp ^ CreateVehicle ;
3062: LD_ADDR_VAR 0 5
3066: PUSH
3067: LD_VAR 0 5
3071: PUSH
3072: CALL_OW 45
3076: ADD
3077: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_solar , control_computer , us_laser , 40 ) ;
3078: LD_INT 3
3080: PPUSH
3081: LD_INT 2
3083: PPUSH
3084: LD_INT 3
3086: PPUSH
3087: LD_INT 9
3089: PPUSH
3090: LD_INT 40
3092: PPUSH
3093: CALL 10624 0 5
// tmp := tmp ^ CreateVehicle ;
3097: LD_ADDR_VAR 0 5
3101: PUSH
3102: LD_VAR 0 5
3106: PUSH
3107: CALL_OW 45
3111: ADD
3112: ST_TO_ADDR
// end ; if multi_support = 2 then
3113: LD_EXP 23
3117: PUSH
3118: LD_INT 2
3120: EQUAL
3121: IFFALSE 3394
// begin uc_side := i ;
3123: LD_ADDR_OWVAR 20
3127: PUSH
3128: LD_VAR 0 2
3132: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3133: LD_ADDR_OWVAR 21
3137: PUSH
3138: LD_EXP 9
3142: PUSH
3143: LD_VAR 0 2
3147: ARRAY
3148: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3149: LD_INT 3
3151: PPUSH
3152: LD_INT 1
3154: PPUSH
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 11
3160: PPUSH
3161: LD_INT 40
3163: PPUSH
3164: CALL 10624 0 5
// tmp := tmp ^ CreateVehicle ;
3168: LD_ADDR_VAR 0 5
3172: PUSH
3173: LD_VAR 0 5
3177: PUSH
3178: CALL_OW 45
3182: ADD
3183: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 40 ) ;
3184: LD_INT 3
3186: PPUSH
3187: LD_INT 3
3189: PPUSH
3190: LD_INT 3
3192: PPUSH
3193: LD_INT 12
3195: PPUSH
3196: LD_INT 40
3198: PPUSH
3199: CALL 10624 0 5
// tmp := tmp ^ CreateVehicle ;
3203: LD_ADDR_VAR 0 5
3207: PUSH
3208: LD_VAR 0 5
3212: PUSH
3213: CALL_OW 45
3217: ADD
3218: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_double_gun , 40 ) ;
3219: LD_INT 2
3221: PPUSH
3222: LD_INT 3
3224: PPUSH
3225: LD_INT 3
3227: PPUSH
3228: LD_INT 5
3230: PPUSH
3231: LD_INT 40
3233: PPUSH
3234: CALL 10624 0 5
// tmp := tmp ^ CreateVehicle ;
3238: LD_ADDR_VAR 0 5
3242: PUSH
3243: LD_VAR 0 5
3247: PUSH
3248: CALL_OW 45
3252: ADD
3253: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3254: LD_INT 4
3256: PPUSH
3257: LD_INT 1
3259: PPUSH
3260: LD_INT 3
3262: PPUSH
3263: LD_INT 6
3265: PPUSH
3266: LD_INT 40
3268: PPUSH
3269: CALL 10624 0 5
// tmp := tmp ^ CreateVehicle ;
3273: LD_ADDR_VAR 0 5
3277: PUSH
3278: LD_VAR 0 5
3282: PUSH
3283: CALL_OW 45
3287: ADD
3288: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3289: LD_INT 2
3291: PPUSH
3292: LD_INT 3
3294: PPUSH
3295: LD_INT 3
3297: PPUSH
3298: LD_INT 9
3300: PPUSH
3301: LD_INT 40
3303: PPUSH
3304: CALL 10624 0 5
// tmp := tmp ^ CreateVehicle ;
3308: LD_ADDR_VAR 0 5
3312: PUSH
3313: LD_VAR 0 5
3317: PUSH
3318: CALL_OW 45
3322: ADD
3323: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3324: LD_INT 2
3326: PPUSH
3327: LD_INT 3
3329: PPUSH
3330: LD_INT 3
3332: PPUSH
3333: LD_INT 9
3335: PPUSH
3336: LD_INT 40
3338: PPUSH
3339: CALL 10624 0 5
// tmp := tmp ^ CreateVehicle ;
3343: LD_ADDR_VAR 0 5
3347: PUSH
3348: LD_VAR 0 5
3352: PUSH
3353: CALL_OW 45
3357: ADD
3358: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3359: LD_INT 4
3361: PPUSH
3362: LD_INT 1
3364: PPUSH
3365: LD_INT 3
3367: PPUSH
3368: LD_INT 6
3370: PPUSH
3371: LD_INT 40
3373: PPUSH
3374: CALL 10624 0 5
// tmp := tmp ^ CreateVehicle ;
3378: LD_ADDR_VAR 0 5
3382: PUSH
3383: LD_VAR 0 5
3387: PUSH
3388: CALL_OW 45
3392: ADD
3393: ST_TO_ADDR
// end ; result := Insert ( result , i , tmp ) ;
3394: LD_ADDR_VAR 0 1
3398: PUSH
3399: LD_VAR 0 1
3403: PPUSH
3404: LD_VAR 0 2
3408: PPUSH
3409: LD_VAR 0 5
3413: PPUSH
3414: CALL_OW 2
3418: ST_TO_ADDR
// end ; end ;
3419: GO 2915
3421: POP
3422: POP
// end ;
3423: LD_VAR 0 1
3427: RET
// export function Multiplayer_Start ( ) ; begin
3428: LD_INT 0
3430: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3431: CALL 1957 0 0
// Multiplayer_InitPointSystem ( ) ;
3435: CALL 4352 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3439: LD_INT 20
3441: PPUSH
3442: CALL 4528 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3446: LD_INT 150
3448: PPUSH
3449: CALL 4528 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3453: LD_INT 5
3455: PPUSH
3456: CALL 4528 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3460: LD_INT 40
3462: NEG
3463: PPUSH
3464: CALL 4528 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3468: LD_INT 200
3470: PPUSH
3471: CALL 4528 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3475: LD_INT 2
3477: PPUSH
3478: CALL 4528 0 1
// Multiplayer_SpawnArtifact ;
3482: CALL 4968 0 0
// if multi_support then
3486: LD_EXP 23
3490: IFFALSE 3502
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3492: LD_ADDR_EXP 27
3496: PUSH
3497: CALL 2879 0 0
3501: ST_TO_ADDR
// game := true ;
3502: LD_ADDR_EXP 2
3506: PUSH
3507: LD_INT 1
3509: ST_TO_ADDR
// if multi_sides [ your_side ] then
3510: LD_EXP 7
3514: PUSH
3515: LD_OWVAR 2
3519: ARRAY
3520: IFFALSE 3547
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3522: LD_INT 22
3524: PUSH
3525: LD_OWVAR 2
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: PPUSH
3534: CALL_OW 69
3538: PUSH
3539: LD_INT 1
3541: ARRAY
3542: PPUSH
3543: CALL_OW 87
// end ;
3547: LD_VAR 0 1
3551: RET
// export function Multiplayer_End ( ) ; var i , j , tmp , reinforcements_arrive ; begin
3552: LD_INT 0
3554: PPUSH
3555: PPUSH
3556: PPUSH
3557: PPUSH
3558: PPUSH
// reinforcements_arrive := 0 ;
3559: LD_ADDR_VAR 0 5
3563: PUSH
3564: LD_INT 0
3566: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3567: LD_INT 35
3569: PPUSH
3570: CALL_OW 67
// if tick > 10 10$00 and not multi_reinforcements_spawned and multi_support = 1 then
3574: LD_OWVAR 1
3578: PUSH
3579: LD_INT 21000
3581: GREATER
3582: PUSH
3583: LD_EXP 28
3587: NOT
3588: AND
3589: PUSH
3590: LD_EXP 23
3594: PUSH
3595: LD_INT 1
3597: EQUAL
3598: AND
3599: IFFALSE 3794
// begin multi_reinforcements_spawned := 1 ;
3601: LD_ADDR_EXP 28
3605: PUSH
3606: LD_INT 1
3608: ST_TO_ADDR
// for i = 1 to 8 do
3609: LD_ADDR_VAR 0 2
3613: PUSH
3614: DOUBLE
3615: LD_INT 1
3617: DEC
3618: ST_TO_ADDR
3619: LD_INT 8
3621: PUSH
3622: FOR_TO
3623: IFFALSE 3782
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
3625: LD_EXP 7
3629: PUSH
3630: LD_VAR 0 2
3634: ARRAY
3635: PUSH
3636: LD_EXP 25
3640: PUSH
3641: LD_VAR 0 2
3645: ARRAY
3646: NOT
3647: AND
3648: PUSH
3649: LD_EXP 27
3653: PUSH
3654: LD_VAR 0 2
3658: ARRAY
3659: AND
3660: IFFALSE 3780
// begin tmp := multi_reinforcements [ i ] ;
3662: LD_ADDR_VAR 0 4
3666: PUSH
3667: LD_EXP 27
3671: PUSH
3672: LD_VAR 0 2
3676: ARRAY
3677: ST_TO_ADDR
// for j = 1 to 4 do
3678: LD_ADDR_VAR 0 3
3682: PUSH
3683: DOUBLE
3684: LD_INT 1
3686: DEC
3687: ST_TO_ADDR
3688: LD_INT 4
3690: PUSH
3691: FOR_TO
3692: IFFALSE 3753
// begin PlaceUnitArea ( tmp [ j ] , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3694: LD_VAR 0 4
3698: PUSH
3699: LD_VAR 0 3
3703: ARRAY
3704: PPUSH
3705: LD_EXP 12
3709: PUSH
3710: LD_EXP 7
3714: PUSH
3715: LD_VAR 0 2
3719: ARRAY
3720: ARRAY
3721: PUSH
3722: LD_INT 2
3724: ARRAY
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL_OW 49
// tmp := Delete ( tmp , 1 ) ;
3733: LD_ADDR_VAR 0 4
3737: PUSH
3738: LD_VAR 0 4
3742: PPUSH
3743: LD_INT 1
3745: PPUSH
3746: CALL_OW 3
3750: ST_TO_ADDR
// end ;
3751: GO 3691
3753: POP
3754: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , tmp ) ;
3755: LD_ADDR_EXP 27
3759: PUSH
3760: LD_EXP 27
3764: PPUSH
3765: LD_VAR 0 2
3769: PPUSH
3770: LD_VAR 0 4
3774: PPUSH
3775: CALL_OW 1
3779: ST_TO_ADDR
// end ; end ;
3780: GO 3622
3782: POP
3783: POP
// reinforcements_arrive := tick ;
3784: LD_ADDR_VAR 0 5
3788: PUSH
3789: LD_OWVAR 1
3793: ST_TO_ADDR
// end ; if reinforcements_arrive + 10 10$00 < tick and multi_reinforcements_spawned = 1 and multi_support = 2 then
3794: LD_VAR 0 5
3798: PUSH
3799: LD_INT 21000
3801: PLUS
3802: PUSH
3803: LD_OWVAR 1
3807: LESS
3808: PUSH
3809: LD_EXP 28
3813: PUSH
3814: LD_INT 1
3816: EQUAL
3817: AND
3818: PUSH
3819: LD_EXP 23
3823: PUSH
3824: LD_INT 2
3826: EQUAL
3827: AND
3828: IFFALSE 4013
// begin multi_reinforcements_spawned := 2 ;
3830: LD_ADDR_EXP 28
3834: PUSH
3835: LD_INT 2
3837: ST_TO_ADDR
// for i = 1 to 8 do
3838: LD_ADDR_VAR 0 2
3842: PUSH
3843: DOUBLE
3844: LD_INT 1
3846: DEC
3847: ST_TO_ADDR
3848: LD_INT 8
3850: PUSH
3851: FOR_TO
3852: IFFALSE 4011
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
3854: LD_EXP 7
3858: PUSH
3859: LD_VAR 0 2
3863: ARRAY
3864: PUSH
3865: LD_EXP 25
3869: PUSH
3870: LD_VAR 0 2
3874: ARRAY
3875: NOT
3876: AND
3877: PUSH
3878: LD_EXP 27
3882: PUSH
3883: LD_VAR 0 2
3887: ARRAY
3888: AND
3889: IFFALSE 4009
// begin tmp := multi_reinforcements [ i ] ;
3891: LD_ADDR_VAR 0 4
3895: PUSH
3896: LD_EXP 27
3900: PUSH
3901: LD_VAR 0 2
3905: ARRAY
3906: ST_TO_ADDR
// for j = 1 to 3 do
3907: LD_ADDR_VAR 0 3
3911: PUSH
3912: DOUBLE
3913: LD_INT 1
3915: DEC
3916: ST_TO_ADDR
3917: LD_INT 3
3919: PUSH
3920: FOR_TO
3921: IFFALSE 3982
// begin PlaceUnitArea ( tmp [ j ] , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3923: LD_VAR 0 4
3927: PUSH
3928: LD_VAR 0 3
3932: ARRAY
3933: PPUSH
3934: LD_EXP 12
3938: PUSH
3939: LD_EXP 7
3943: PUSH
3944: LD_VAR 0 2
3948: ARRAY
3949: ARRAY
3950: PUSH
3951: LD_INT 2
3953: ARRAY
3954: PPUSH
3955: LD_INT 0
3957: PPUSH
3958: CALL_OW 49
// tmp := Delete ( tmp , 1 ) ;
3962: LD_ADDR_VAR 0 4
3966: PUSH
3967: LD_VAR 0 4
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: CALL_OW 3
3979: ST_TO_ADDR
// end ;
3980: GO 3920
3982: POP
3983: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , tmp ) ;
3984: LD_ADDR_EXP 27
3988: PUSH
3989: LD_EXP 27
3993: PPUSH
3994: LD_VAR 0 2
3998: PPUSH
3999: LD_VAR 0 4
4003: PPUSH
4004: CALL_OW 1
4008: ST_TO_ADDR
// end ; end ;
4009: GO 3851
4011: POP
4012: POP
// end ; if not multi_custom_commanders then
4013: LD_EXP 16
4017: NOT
4018: IFFALSE 4131
// begin for i = 1 to 8 do
4020: LD_ADDR_VAR 0 2
4024: PUSH
4025: DOUBLE
4026: LD_INT 1
4028: DEC
4029: ST_TO_ADDR
4030: LD_INT 8
4032: PUSH
4033: FOR_TO
4034: IFFALSE 4105
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
4036: LD_INT 22
4038: PUSH
4039: LD_VAR 0 2
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 69
4052: PUSH
4053: LD_INT 0
4055: EQUAL
4056: PUSH
4057: LD_EXP 25
4061: PUSH
4062: LD_VAR 0 2
4066: ARRAY
4067: NOT
4068: AND
4069: IFFALSE 4103
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
4071: LD_ADDR_EXP 25
4075: PUSH
4076: LD_EXP 25
4080: PPUSH
4081: LD_VAR 0 2
4085: PPUSH
4086: LD_INT 1
4088: PPUSH
4089: CALL_OW 1
4093: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: CALL 4598 0 1
// end ; end ;
4103: GO 4033
4105: POP
4106: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4107: LD_EXP 25
4111: PPUSH
4112: CALL 8023 0 1
4116: PUSH
4117: LD_EXP 7
4121: PPUSH
4122: CALL 8023 0 1
4126: EQUAL
4127: IFFALSE 4131
// break ;
4129: GO 4166
// end ; until ( FilterAllUnits ( [ f_side , side_bot ] ) = 0 and game ) or not multi_commanders ;
4131: LD_INT 22
4133: PUSH
4134: LD_EXP 3
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PPUSH
4143: CALL_OW 69
4147: PUSH
4148: LD_INT 0
4150: EQUAL
4151: PUSH
4152: LD_EXP 2
4156: AND
4157: PUSH
4158: LD_EXP 24
4162: NOT
4163: OR
4164: IFFALSE 3567
// game := false ;
4166: LD_ADDR_EXP 2
4170: PUSH
4171: LD_INT 0
4173: ST_TO_ADDR
// for i = 1 to 8 do
4174: LD_ADDR_VAR 0 2
4178: PUSH
4179: DOUBLE
4180: LD_INT 1
4182: DEC
4183: ST_TO_ADDR
4184: LD_INT 8
4186: PUSH
4187: FOR_TO
4188: IFFALSE 4224
// begin if multi_sides [ i ] then
4190: LD_EXP 7
4194: PUSH
4195: LD_VAR 0 2
4199: ARRAY
4200: IFFALSE 4222
// SetMultiScore ( i , multi_points [ i ] ) ;
4202: LD_VAR 0 2
4206: PPUSH
4207: LD_EXP 29
4211: PUSH
4212: LD_VAR 0 2
4216: ARRAY
4217: PPUSH
4218: CALL_OW 506
// end ;
4222: GO 4187
4224: POP
4225: POP
// if multi_loosers [ your_side ] then
4226: LD_EXP 25
4230: PUSH
4231: LD_OWVAR 2
4235: ARRAY
4236: IFFALSE 4244
// YouLostInMultiplayer else
4238: CALL_OW 107
4242: GO 4248
// YouWinInMultiplayer ;
4244: CALL_OW 106
// end ;
4248: LD_VAR 0 1
4252: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4253: LD_INT 0
4255: PPUSH
4256: PPUSH
// result := [ #tick , tick ] ;
4257: LD_ADDR_VAR 0 1
4261: PUSH
4262: LD_STRING #tick
4264: PUSH
4265: LD_OWVAR 1
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: ST_TO_ADDR
// for i = 1 to 8 do
4274: LD_ADDR_VAR 0 2
4278: PUSH
4279: DOUBLE
4280: LD_INT 1
4282: DEC
4283: ST_TO_ADDR
4284: LD_INT 8
4286: PUSH
4287: FOR_TO
4288: IFFALSE 4345
// begin if multi_sides [ i ] then
4290: LD_EXP 7
4294: PUSH
4295: LD_VAR 0 2
4299: ARRAY
4300: IFFALSE 4343
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4302: LD_ADDR_VAR 0 1
4306: PUSH
4307: LD_VAR 0 1
4311: PUSH
4312: LD_STRING #coop-points
4314: PUSH
4315: LD_VAR 0 2
4319: PUSH
4320: LD_VAR 0 2
4324: PUSH
4325: LD_EXP 29
4329: PUSH
4330: LD_VAR 0 2
4334: ARRAY
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: ADD
4342: ST_TO_ADDR
// end ; end ;
4343: GO 4287
4345: POP
4346: POP
// end ;
4347: LD_VAR 0 1
4351: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4352: LD_INT 0
4354: PPUSH
4355: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4356: LD_ADDR_EXP 29
4360: PUSH
4361: LD_INT 0
4363: PUSH
4364: LD_INT 0
4366: PUSH
4367: LD_INT 0
4369: PUSH
4370: LD_INT 0
4372: PUSH
4373: LD_INT 0
4375: PUSH
4376: LD_INT 0
4378: PUSH
4379: LD_INT 0
4381: PUSH
4382: LD_INT 0
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4395: LD_ADDR_EXP 30
4399: PUSH
4400: EMPTY
4401: ST_TO_ADDR
// end ;
4402: LD_VAR 0 1
4406: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4407: LD_INT 0
4409: PPUSH
// if not multi_points or not side or side > 8 then
4410: LD_EXP 29
4414: NOT
4415: PUSH
4416: LD_VAR 0 1
4420: NOT
4421: OR
4422: PUSH
4423: LD_VAR 0 1
4427: PUSH
4428: LD_INT 8
4430: GREATER
4431: OR
4432: IFFALSE 4436
// exit ;
4434: GO 4473
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4436: LD_ADDR_EXP 29
4440: PUSH
4441: LD_EXP 29
4445: PPUSH
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_EXP 29
4455: PUSH
4456: LD_VAR 0 1
4460: ARRAY
4461: PUSH
4462: LD_VAR 0 2
4466: PLUS
4467: PPUSH
4468: CALL_OW 1
4472: ST_TO_ADDR
// end ;
4473: LD_VAR 0 3
4477: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4478: LD_INT 0
4480: PPUSH
// if not multi_points or not side or side > 8 then
4481: LD_EXP 29
4485: NOT
4486: PUSH
4487: LD_VAR 0 1
4491: NOT
4492: OR
4493: PUSH
4494: LD_VAR 0 1
4498: PUSH
4499: LD_INT 8
4501: GREATER
4502: OR
4503: IFFALSE 4507
// exit ;
4505: GO 4523
// result := multi_points [ side ] ;
4507: LD_ADDR_VAR 0 2
4511: PUSH
4512: LD_EXP 29
4516: PUSH
4517: LD_VAR 0 1
4521: ARRAY
4522: ST_TO_ADDR
// end ;
4523: LD_VAR 0 2
4527: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4528: LD_INT 0
4530: PPUSH
// multi_points_conditions := Insert ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4531: LD_ADDR_EXP 30
4535: PUSH
4536: LD_EXP 30
4540: PPUSH
4541: LD_EXP 30
4545: PUSH
4546: LD_INT 1
4548: PLUS
4549: PPUSH
4550: LD_VAR 0 1
4554: PPUSH
4555: CALL_OW 2
4559: ST_TO_ADDR
// end ;
4560: LD_VAR 0 2
4564: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4565: LD_INT 0
4567: PPUSH
// if not id then
4568: LD_VAR 0 1
4572: NOT
4573: IFFALSE 4577
// exit ;
4575: GO 4593
// result := multi_points_conditions [ id ] ;
4577: LD_ADDR_VAR 0 2
4581: PUSH
4582: LD_EXP 30
4586: PUSH
4587: LD_VAR 0 1
4591: ARRAY
4592: ST_TO_ADDR
// end ;
4593: LD_VAR 0 2
4597: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
4602: PPUSH
4603: PPUSH
4604: PPUSH
// players := [ ] ;
4605: LD_ADDR_VAR 0 3
4609: PUSH
4610: EMPTY
4611: ST_TO_ADDR
// for i = 1 to 8 do
4612: LD_ADDR_VAR 0 4
4616: PUSH
4617: DOUBLE
4618: LD_INT 1
4620: DEC
4621: ST_TO_ADDR
4622: LD_INT 8
4624: PUSH
4625: FOR_TO
4626: IFFALSE 4685
// begin if i = side then
4628: LD_VAR 0 4
4632: PUSH
4633: LD_VAR 0 1
4637: EQUAL
4638: IFFALSE 4642
// continue ;
4640: GO 4625
// if multi_sides [ i ] and not multi_loosers [ i ] then
4642: LD_EXP 7
4646: PUSH
4647: LD_VAR 0 4
4651: ARRAY
4652: PUSH
4653: LD_EXP 25
4657: PUSH
4658: LD_VAR 0 4
4662: ARRAY
4663: NOT
4664: AND
4665: IFFALSE 4683
// players := players ^ i ;
4667: LD_ADDR_VAR 0 3
4671: PUSH
4672: LD_VAR 0 3
4676: PUSH
4677: LD_VAR 0 4
4681: ADD
4682: ST_TO_ADDR
// end ;
4683: GO 4625
4685: POP
4686: POP
// if not players then
4687: LD_VAR 0 3
4691: NOT
4692: IFFALSE 4696
// exit ;
4694: GO 4963
// if players = 1 then
4696: LD_VAR 0 3
4700: PUSH
4701: LD_INT 1
4703: EQUAL
4704: IFFALSE 4765
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4706: LD_ADDR_VAR 0 4
4710: PUSH
4711: LD_INT 22
4713: PUSH
4714: LD_VAR 0 1
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: LD_INT 51
4725: PUSH
4726: EMPTY
4727: LIST
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PPUSH
4733: CALL_OW 69
4737: PUSH
4738: FOR_IN
4739: IFFALSE 4761
// SetSide ( i , players [ 1 ] ) ;
4741: LD_VAR 0 4
4745: PPUSH
4746: LD_VAR 0 3
4750: PUSH
4751: LD_INT 1
4753: ARRAY
4754: PPUSH
4755: CALL_OW 235
4759: GO 4738
4761: POP
4762: POP
// end else
4763: GO 4963
// begin j := 1 ;
4765: LD_ADDR_VAR 0 5
4769: PUSH
4770: LD_INT 1
4772: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
4773: LD_ADDR_VAR 0 4
4777: PUSH
4778: LD_INT 22
4780: PUSH
4781: LD_VAR 0 1
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PUSH
4790: LD_INT 2
4792: PUSH
4793: LD_INT 21
4795: PUSH
4796: LD_INT 1
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: LD_INT 51
4805: PUSH
4806: EMPTY
4807: LIST
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 21
4815: PUSH
4816: LD_INT 2
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PPUSH
4832: CALL_OW 69
4836: PUSH
4837: FOR_IN
4838: IFFALSE 4961
// begin SetSide ( i , players [ j ] ) ;
4840: LD_VAR 0 4
4844: PPUSH
4845: LD_VAR 0 3
4849: PUSH
4850: LD_VAR 0 5
4854: ARRAY
4855: PPUSH
4856: CALL_OW 235
// if IsDrivenBy ( i ) then
4860: LD_VAR 0 4
4864: PPUSH
4865: CALL_OW 311
4869: IFFALSE 4896
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
4871: LD_VAR 0 4
4875: PPUSH
4876: CALL_OW 311
4880: PPUSH
4881: LD_VAR 0 3
4885: PUSH
4886: LD_VAR 0 5
4890: ARRAY
4891: PPUSH
4892: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
4896: LD_VAR 0 4
4900: PPUSH
4901: CALL_OW 310
4905: PPUSH
4906: CALL_OW 247
4910: PUSH
4911: LD_INT 3
4913: EQUAL
4914: IFFALSE 4925
// ComExitBuilding ( i ) ;
4916: LD_VAR 0 4
4920: PPUSH
4921: CALL_OW 122
// j := j + 1 ;
4925: LD_ADDR_VAR 0 5
4929: PUSH
4930: LD_VAR 0 5
4934: PUSH
4935: LD_INT 1
4937: PLUS
4938: ST_TO_ADDR
// if j > players then
4939: LD_VAR 0 5
4943: PUSH
4944: LD_VAR 0 3
4948: GREATER
4949: IFFALSE 4959
// j := 1 ;
4951: LD_ADDR_VAR 0 5
4955: PUSH
4956: LD_INT 1
4958: ST_TO_ADDR
// end ;
4959: GO 4837
4961: POP
4962: POP
// end ; end ;
4963: LD_VAR 0 2
4967: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
4968: LD_INT 0
4970: PPUSH
4971: PPUSH
4972: PPUSH
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
4973: LD_ADDR_VAR 0 3
4977: PUSH
4978: LD_INT 5
4980: PUSH
4981: LD_INT 10
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 120
4990: PUSH
4991: LD_INT 2
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: LD_INT 101
5000: PUSH
5001: LD_INT 8
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: LD_INT 27
5010: PUSH
5011: LD_INT 4
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: ST_TO_ADDR
// i := rand ( 1 , pos ) ;
5024: LD_ADDR_VAR 0 2
5028: PUSH
5029: LD_INT 1
5031: PPUSH
5032: LD_VAR 0 3
5036: PPUSH
5037: CALL_OW 12
5041: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
5042: LD_INT 4
5044: PPUSH
5045: LD_INT 5
5047: PPUSH
5048: LD_VAR 0 3
5052: PUSH
5053: LD_VAR 0 2
5057: ARRAY
5058: PUSH
5059: LD_INT 1
5061: ARRAY
5062: PPUSH
5063: LD_VAR 0 3
5067: PUSH
5068: LD_VAR 0 2
5072: ARRAY
5073: PUSH
5074: LD_INT 2
5076: ARRAY
5077: PPUSH
5078: LD_INT 0
5080: PPUSH
5081: CALL_OW 58
// end ;
5085: LD_VAR 0 1
5089: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5090: LD_INT 0
5092: PPUSH
// if not side or side > 8 then
5093: LD_VAR 0 1
5097: NOT
5098: PUSH
5099: LD_VAR 0 1
5103: PUSH
5104: LD_INT 8
5106: GREATER
5107: OR
5108: IFFALSE 5112
// exit ;
5110: GO 5129
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5112: LD_VAR 0 1
5116: PPUSH
5117: LD_INT 6
5119: PPUSH
5120: CALL 4565 0 1
5124: PPUSH
5125: CALL 4407 0 2
// end ;
5129: LD_VAR 0 2
5133: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5134: LD_INT 0
5136: PPUSH
// if not side or side > 8 then
5137: LD_VAR 0 1
5141: NOT
5142: PUSH
5143: LD_VAR 0 1
5147: PUSH
5148: LD_INT 8
5150: GREATER
5151: OR
5152: IFFALSE 5156
// exit ;
5154: GO 5173
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5156: LD_VAR 0 1
5160: PPUSH
5161: LD_INT 4
5163: PPUSH
5164: CALL 4565 0 1
5168: PPUSH
5169: CALL 4407 0 2
// end ;
5173: LD_VAR 0 2
5177: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5178: LD_INT 0
5180: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5181: LD_VAR 0 1
5185: NOT
5186: PUSH
5187: LD_VAR 0 1
5191: PUSH
5192: LD_INT 8
5194: GREATER
5195: OR
5196: PUSH
5197: LD_VAR 0 2
5201: PUSH
5202: LD_INT 2
5204: PUSH
5205: LD_INT 6
5207: PUSH
5208: LD_INT 36
5210: PUSH
5211: LD_INT 0
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: IN
5220: NOT
5221: OR
5222: IFFALSE 5226
// exit ;
5224: GO 5243
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5226: LD_VAR 0 1
5230: PPUSH
5231: LD_INT 3
5233: PPUSH
5234: CALL 4565 0 1
5238: PPUSH
5239: CALL 4407 0 2
// end ;
5243: LD_VAR 0 3
5247: RET
// export function MultiplayerEvent_UnitKilled ( un , points ) ; var side , side2 , last_shoot , nearest_unit , gained_points ; begin
5248: LD_INT 0
5250: PPUSH
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
5255: PPUSH
// if not un then
5256: LD_VAR 0 1
5260: NOT
5261: IFFALSE 5265
// exit ;
5263: GO 5489
// if not points then
5265: LD_VAR 0 2
5269: NOT
5270: IFFALSE 5287
// gained_points := Multiplayer_GetCondition ( 1 ) else
5272: LD_ADDR_VAR 0 8
5276: PUSH
5277: LD_INT 1
5279: PPUSH
5280: CALL 4565 0 1
5284: ST_TO_ADDR
5285: GO 5297
// gained_points := points ;
5287: LD_ADDR_VAR 0 8
5291: PUSH
5292: LD_VAR 0 2
5296: ST_TO_ADDR
// last_shoot := SideShoot ( un ) ;
5297: LD_ADDR_VAR 0 6
5301: PUSH
5302: LD_VAR 0 1
5306: PPUSH
5307: CALL_OW 503
5311: ST_TO_ADDR
// if last_shoot > - 1 then
5312: LD_VAR 0 6
5316: PUSH
5317: LD_INT 1
5319: NEG
5320: GREATER
5321: IFFALSE 5333
// begin side := last_shoot ;
5323: LD_ADDR_VAR 0 4
5327: PUSH
5328: LD_VAR 0 6
5332: ST_TO_ADDR
// end ; nearest_unit := NearestUnitToUnit ( all_units diff FilterAllUnits ( [ f_side , GetSide ( un ) ] ) , un ) ;
5333: LD_ADDR_VAR 0 7
5337: PUSH
5338: LD_OWVAR 3
5342: PUSH
5343: LD_INT 22
5345: PUSH
5346: LD_VAR 0 1
5350: PPUSH
5351: CALL_OW 255
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PPUSH
5360: CALL_OW 69
5364: DIFF
5365: PPUSH
5366: LD_VAR 0 1
5370: PPUSH
5371: CALL_OW 74
5375: ST_TO_ADDR
// if nearest_unit then
5376: LD_VAR 0 7
5380: IFFALSE 5397
// side2 := GetSide ( nearest_unit ) ;
5382: LD_ADDR_VAR 0 5
5386: PUSH
5387: LD_VAR 0 7
5391: PPUSH
5392: CALL_OW 255
5396: ST_TO_ADDR
// if not side and not side2 then
5397: LD_VAR 0 4
5401: NOT
5402: PUSH
5403: LD_VAR 0 5
5407: NOT
5408: AND
5409: IFFALSE 5413
// exit ;
5411: GO 5489
// if side = side2 then
5413: LD_VAR 0 4
5417: PUSH
5418: LD_VAR 0 5
5422: EQUAL
5423: IFFALSE 5441
// Multiplayer_AddPoints ( side , gained_points ) else
5425: LD_VAR 0 4
5429: PPUSH
5430: LD_VAR 0 8
5434: PPUSH
5435: CALL 4407 0 2
5439: GO 5489
// begin if side then
5441: LD_VAR 0 4
5445: IFFALSE 5465
// Multiplayer_AddPoints ( side , gained_points div 2 ) ;
5447: LD_VAR 0 4
5451: PPUSH
5452: LD_VAR 0 8
5456: PUSH
5457: LD_INT 2
5459: DIV
5460: PPUSH
5461: CALL 4407 0 2
// if side2 then
5465: LD_VAR 0 5
5469: IFFALSE 5489
// Multiplayer_AddPoints ( side2 , gained_points div 2 ) ;
5471: LD_VAR 0 5
5475: PPUSH
5476: LD_VAR 0 8
5480: PUSH
5481: LD_INT 2
5483: DIV
5484: PPUSH
5485: CALL 4407 0 2
// end ; end ;
5489: LD_VAR 0 3
5493: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5494: LD_INT 0
5496: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: LD_INT 2
5504: PPUSH
5505: CALL 4565 0 1
5509: PPUSH
5510: CALL 4407 0 2
// end ; end_of_file
5514: LD_VAR 0 2
5518: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
5519: LD_INT 0
5521: PPUSH
5522: PPUSH
// if not side or not nation then
5523: LD_VAR 0 1
5527: NOT
5528: PUSH
5529: LD_VAR 0 2
5533: NOT
5534: OR
5535: IFFALSE 5539
// exit ;
5537: GO 6151
// case nation of nation_american :
5539: LD_VAR 0 2
5543: PUSH
5544: LD_INT 1
5546: DOUBLE
5547: EQUAL
5548: IFTRUE 5552
5550: GO 5710
5552: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
5553: LD_ADDR_VAR 0 4
5557: PUSH
5558: LD_INT 35
5560: PUSH
5561: LD_INT 45
5563: PUSH
5564: LD_INT 46
5566: PUSH
5567: LD_INT 47
5569: PUSH
5570: LD_INT 1
5572: PUSH
5573: LD_INT 2
5575: PUSH
5576: LD_INT 6
5578: PUSH
5579: LD_INT 15
5581: PUSH
5582: LD_INT 16
5584: PUSH
5585: LD_INT 7
5587: PUSH
5588: LD_INT 12
5590: PUSH
5591: LD_INT 13
5593: PUSH
5594: LD_INT 10
5596: PUSH
5597: LD_INT 14
5599: PUSH
5600: LD_INT 20
5602: PUSH
5603: LD_INT 25
5605: PUSH
5606: LD_INT 36
5608: PUSH
5609: LD_INT 69
5611: PUSH
5612: LD_INT 39
5614: PUSH
5615: LD_INT 34
5617: PUSH
5618: LD_INT 40
5620: PUSH
5621: LD_INT 48
5623: PUSH
5624: LD_INT 49
5626: PUSH
5627: LD_INT 50
5629: PUSH
5630: LD_INT 51
5632: PUSH
5633: LD_INT 52
5635: PUSH
5636: LD_INT 53
5638: PUSH
5639: LD_INT 54
5641: PUSH
5642: LD_INT 55
5644: PUSH
5645: LD_INT 56
5647: PUSH
5648: LD_INT 57
5650: PUSH
5651: LD_INT 58
5653: PUSH
5654: LD_INT 59
5656: PUSH
5657: LD_INT 60
5659: PUSH
5660: LD_INT 61
5662: PUSH
5663: LD_INT 62
5665: PUSH
5666: LD_INT 80
5668: PUSH
5669: EMPTY
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: ST_TO_ADDR
5708: GO 6075
5710: LD_INT 2
5712: DOUBLE
5713: EQUAL
5714: IFTRUE 5718
5716: GO 5888
5718: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
5719: LD_ADDR_VAR 0 4
5723: PUSH
5724: LD_INT 35
5726: PUSH
5727: LD_INT 45
5729: PUSH
5730: LD_INT 46
5732: PUSH
5733: LD_INT 47
5735: PUSH
5736: LD_INT 70
5738: PUSH
5739: LD_INT 1
5741: PUSH
5742: LD_INT 11
5744: PUSH
5745: LD_INT 3
5747: PUSH
5748: LD_INT 4
5750: PUSH
5751: LD_INT 5
5753: PUSH
5754: LD_INT 6
5756: PUSH
5757: LD_INT 15
5759: PUSH
5760: LD_INT 18
5762: PUSH
5763: LD_INT 7
5765: PUSH
5766: LD_INT 17
5768: PUSH
5769: LD_INT 8
5771: PUSH
5772: LD_INT 20
5774: PUSH
5775: LD_INT 72
5777: PUSH
5778: LD_INT 26
5780: PUSH
5781: LD_INT 69
5783: PUSH
5784: LD_INT 39
5786: PUSH
5787: LD_INT 40
5789: PUSH
5790: LD_INT 41
5792: PUSH
5793: LD_INT 42
5795: PUSH
5796: LD_INT 43
5798: PUSH
5799: LD_INT 48
5801: PUSH
5802: LD_INT 49
5804: PUSH
5805: LD_INT 50
5807: PUSH
5808: LD_INT 51
5810: PUSH
5811: LD_INT 52
5813: PUSH
5814: LD_INT 53
5816: PUSH
5817: LD_INT 54
5819: PUSH
5820: LD_INT 55
5822: PUSH
5823: LD_INT 56
5825: PUSH
5826: LD_INT 60
5828: PUSH
5829: LD_INT 61
5831: PUSH
5832: LD_INT 62
5834: PUSH
5835: LD_INT 66
5837: PUSH
5838: LD_INT 67
5840: PUSH
5841: LD_INT 68
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: ST_TO_ADDR
5886: GO 6075
5888: LD_INT 3
5890: DOUBLE
5891: EQUAL
5892: IFTRUE 5896
5894: GO 6074
5896: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
5897: LD_ADDR_VAR 0 4
5901: PUSH
5902: LD_INT 46
5904: PUSH
5905: LD_INT 47
5907: PUSH
5908: LD_INT 1
5910: PUSH
5911: LD_INT 2
5913: PUSH
5914: LD_INT 11
5916: PUSH
5917: LD_INT 9
5919: PUSH
5920: LD_INT 20
5922: PUSH
5923: LD_INT 19
5925: PUSH
5926: LD_INT 21
5928: PUSH
5929: LD_INT 24
5931: PUSH
5932: LD_INT 22
5934: PUSH
5935: LD_INT 25
5937: PUSH
5938: LD_INT 28
5940: PUSH
5941: LD_INT 29
5943: PUSH
5944: LD_INT 31
5946: PUSH
5947: LD_INT 37
5949: PUSH
5950: LD_INT 38
5952: PUSH
5953: LD_INT 32
5955: PUSH
5956: LD_INT 27
5958: PUSH
5959: LD_INT 33
5961: PUSH
5962: LD_INT 69
5964: PUSH
5965: LD_INT 39
5967: PUSH
5968: LD_INT 34
5970: PUSH
5971: LD_INT 40
5973: PUSH
5974: LD_INT 71
5976: PUSH
5977: LD_INT 23
5979: PUSH
5980: LD_INT 44
5982: PUSH
5983: LD_INT 48
5985: PUSH
5986: LD_INT 49
5988: PUSH
5989: LD_INT 50
5991: PUSH
5992: LD_INT 51
5994: PUSH
5995: LD_INT 52
5997: PUSH
5998: LD_INT 53
6000: PUSH
6001: LD_INT 54
6003: PUSH
6004: LD_INT 55
6006: PUSH
6007: LD_INT 56
6009: PUSH
6010: LD_INT 57
6012: PUSH
6013: LD_INT 58
6015: PUSH
6016: LD_INT 59
6018: PUSH
6019: LD_INT 63
6021: PUSH
6022: LD_INT 64
6024: PUSH
6025: LD_INT 65
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: ST_TO_ADDR
6072: GO 6075
6074: POP
// if state > - 1 and state < 3 then
6075: LD_VAR 0 3
6079: PUSH
6080: LD_INT 1
6082: NEG
6083: GREATER
6084: PUSH
6085: LD_VAR 0 3
6089: PUSH
6090: LD_INT 3
6092: LESS
6093: AND
6094: IFFALSE 6151
// for i in result do
6096: LD_ADDR_VAR 0 5
6100: PUSH
6101: LD_VAR 0 4
6105: PUSH
6106: FOR_IN
6107: IFFALSE 6149
// if GetTech ( i , side ) <> state then
6109: LD_VAR 0 5
6113: PPUSH
6114: LD_VAR 0 1
6118: PPUSH
6119: CALL_OW 321
6123: PUSH
6124: LD_VAR 0 3
6128: NONEQUAL
6129: IFFALSE 6147
// result := result diff i ;
6131: LD_ADDR_VAR 0 4
6135: PUSH
6136: LD_VAR 0 4
6140: PUSH
6141: LD_VAR 0 5
6145: DIFF
6146: ST_TO_ADDR
6147: GO 6106
6149: POP
6150: POP
// end ;
6151: LD_VAR 0 4
6155: RET
// export function ScanBase ( side , base_area ) ; begin
6156: LD_INT 0
6158: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6159: LD_ADDR_VAR 0 3
6163: PUSH
6164: LD_VAR 0 2
6168: PPUSH
6169: LD_INT 81
6171: PUSH
6172: LD_VAR 0 1
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 70
6185: ST_TO_ADDR
// end ;
6186: LD_VAR 0 3
6190: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
6191: LD_INT 0
6193: PPUSH
6194: PPUSH
6195: PPUSH
6196: PPUSH
6197: PPUSH
6198: PPUSH
6199: PPUSH
6200: PPUSH
6201: PPUSH
6202: PPUSH
6203: PPUSH
6204: PPUSH
6205: PPUSH
6206: PPUSH
6207: PPUSH
6208: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
6209: LD_ADDR_VAR 0 12
6213: PUSH
6214: LD_EXP 41
6218: PUSH
6219: LD_VAR 0 1
6223: ARRAY
6224: PPUSH
6225: LD_INT 25
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PPUSH
6235: CALL_OW 72
6239: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
6240: LD_ADDR_VAR 0 8
6244: PUSH
6245: LD_EXP 41
6249: PUSH
6250: LD_VAR 0 1
6254: ARRAY
6255: PPUSH
6256: LD_INT 2
6258: PUSH
6259: LD_INT 25
6261: PUSH
6262: LD_INT 1
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: LD_INT 25
6271: PUSH
6272: LD_INT 5
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: LD_INT 25
6281: PUSH
6282: LD_INT 8
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: PUSH
6289: LD_INT 25
6291: PUSH
6292: LD_INT 9
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: PPUSH
6306: CALL_OW 72
6310: ST_TO_ADDR
// if not defenders and not solds then
6311: LD_VAR 0 2
6315: NOT
6316: PUSH
6317: LD_VAR 0 8
6321: NOT
6322: AND
6323: IFFALSE 6327
// exit ;
6325: GO 7702
// depot_under_attack := false ;
6327: LD_ADDR_VAR 0 16
6331: PUSH
6332: LD_INT 0
6334: ST_TO_ADDR
// sold_defenders := [ ] ;
6335: LD_ADDR_VAR 0 17
6339: PUSH
6340: EMPTY
6341: ST_TO_ADDR
// if mechs then
6342: LD_VAR 0 12
6346: IFFALSE 6475
// for i in defenders do
6348: LD_ADDR_VAR 0 5
6352: PUSH
6353: LD_VAR 0 2
6357: PUSH
6358: FOR_IN
6359: IFFALSE 6473
// begin SetTag ( i , 20 ) ;
6361: LD_VAR 0 5
6365: PPUSH
6366: LD_INT 20
6368: PPUSH
6369: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
6373: LD_VAR 0 5
6377: PPUSH
6378: CALL_OW 263
6382: PUSH
6383: LD_INT 1
6385: EQUAL
6386: PUSH
6387: LD_VAR 0 5
6391: PPUSH
6392: CALL_OW 311
6396: NOT
6397: AND
6398: PUSH
6399: LD_VAR 0 12
6403: AND
6404: IFFALSE 6471
// begin un := mechs [ 1 ] ;
6406: LD_ADDR_VAR 0 10
6410: PUSH
6411: LD_VAR 0 12
6415: PUSH
6416: LD_INT 1
6418: ARRAY
6419: ST_TO_ADDR
// ComExitBuilding ( un ) ;
6420: LD_VAR 0 10
6424: PPUSH
6425: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
6429: LD_VAR 0 10
6433: PPUSH
6434: LD_VAR 0 5
6438: PPUSH
6439: CALL_OW 180
// SetTag ( un , 19 ) ;
6443: LD_VAR 0 10
6447: PPUSH
6448: LD_INT 19
6450: PPUSH
6451: CALL_OW 109
// mechs := mechs diff un ;
6455: LD_ADDR_VAR 0 12
6459: PUSH
6460: LD_VAR 0 12
6464: PUSH
6465: LD_VAR 0 10
6469: DIFF
6470: ST_TO_ADDR
// end ; end ;
6471: GO 6358
6473: POP
6474: POP
// if solds then
6475: LD_VAR 0 8
6479: IFFALSE 6538
// for i in solds do
6481: LD_ADDR_VAR 0 5
6485: PUSH
6486: LD_VAR 0 8
6490: PUSH
6491: FOR_IN
6492: IFFALSE 6536
// if not GetTag ( i ) then
6494: LD_VAR 0 5
6498: PPUSH
6499: CALL_OW 110
6503: NOT
6504: IFFALSE 6534
// begin defenders := defenders union i ;
6506: LD_ADDR_VAR 0 2
6510: PUSH
6511: LD_VAR 0 2
6515: PUSH
6516: LD_VAR 0 5
6520: UNION
6521: ST_TO_ADDR
// SetTag ( i , 18 ) ;
6522: LD_VAR 0 5
6526: PPUSH
6527: LD_INT 18
6529: PPUSH
6530: CALL_OW 109
// end ;
6534: GO 6491
6536: POP
6537: POP
// repeat wait ( 0 0$1 ) ;
6538: LD_INT 35
6540: PPUSH
6541: CALL_OW 67
// enemy := mc_scan [ base ] ;
6545: LD_ADDR_VAR 0 3
6549: PUSH
6550: LD_EXP 63
6554: PUSH
6555: LD_VAR 0 1
6559: ARRAY
6560: ST_TO_ADDR
// for i in defenders do
6561: LD_ADDR_VAR 0 5
6565: PUSH
6566: LD_VAR 0 2
6570: PUSH
6571: FOR_IN
6572: IFFALSE 7257
// begin e := NearestUnitToUnit ( enemy , i ) ;
6574: LD_ADDR_VAR 0 13
6578: PUSH
6579: LD_VAR 0 3
6583: PPUSH
6584: LD_VAR 0 5
6588: PPUSH
6589: CALL_OW 74
6593: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
6594: LD_ADDR_VAR 0 16
6598: PUSH
6599: LD_EXP 41
6603: PUSH
6604: LD_VAR 0 1
6608: ARRAY
6609: PPUSH
6610: LD_INT 2
6612: PUSH
6613: LD_INT 30
6615: PUSH
6616: LD_INT 0
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PUSH
6623: LD_INT 30
6625: PUSH
6626: LD_INT 1
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: LIST
6637: PPUSH
6638: CALL_OW 72
6642: NOT
6643: PUSH
6644: LD_EXP 41
6648: PUSH
6649: LD_VAR 0 1
6653: ARRAY
6654: PPUSH
6655: LD_INT 2
6657: PUSH
6658: LD_INT 30
6660: PUSH
6661: LD_INT 0
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 30
6670: PUSH
6671: LD_INT 1
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: LIST
6682: PPUSH
6683: CALL_OW 72
6687: PPUSH
6688: CALL_OW 256
6692: PUSH
6693: LD_INT 600
6695: LESS
6696: OR
6697: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
6698: LD_VAR 0 5
6702: PPUSH
6703: CALL_OW 247
6707: PUSH
6708: LD_INT 2
6710: DOUBLE
6711: EQUAL
6712: IFTRUE 6716
6714: GO 6963
6716: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
6717: LD_VAR 0 5
6721: PPUSH
6722: CALL_OW 256
6726: PUSH
6727: LD_INT 650
6729: GREATER
6730: PUSH
6731: LD_VAR 0 5
6735: PPUSH
6736: LD_VAR 0 13
6740: PPUSH
6741: CALL_OW 296
6745: PUSH
6746: LD_INT 40
6748: LESS
6749: AND
6750: IFFALSE 6768
// ComAttackUnit ( i , e ) else
6752: LD_VAR 0 5
6756: PPUSH
6757: LD_VAR 0 13
6761: PPUSH
6762: CALL_OW 115
6766: GO 6846
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
6768: LD_VAR 0 5
6772: PPUSH
6773: LD_VAR 0 13
6777: PPUSH
6778: CALL_OW 296
6782: PUSH
6783: LD_INT 30
6785: GREATEREQUAL
6786: PUSH
6787: LD_VAR 0 5
6791: PPUSH
6792: CALL_OW 256
6796: PUSH
6797: LD_INT 650
6799: LESSEQUAL
6800: OR
6801: PUSH
6802: LD_VAR 0 5
6806: PPUSH
6807: LD_EXP 64
6811: PUSH
6812: LD_VAR 0 1
6816: ARRAY
6817: PPUSH
6818: CALL_OW 308
6822: NOT
6823: AND
6824: IFFALSE 6846
// ComMoveToArea ( i , mc_parking [ base ] ) ;
6826: LD_VAR 0 5
6830: PPUSH
6831: LD_EXP 64
6835: PUSH
6836: LD_VAR 0 1
6840: ARRAY
6841: PPUSH
6842: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
6846: LD_VAR 0 5
6850: PPUSH
6851: CALL_OW 256
6855: PUSH
6856: LD_INT 998
6858: LESS
6859: PUSH
6860: LD_VAR 0 5
6864: PPUSH
6865: CALL_OW 263
6869: PUSH
6870: LD_INT 1
6872: EQUAL
6873: AND
6874: PUSH
6875: LD_VAR 0 5
6879: PPUSH
6880: CALL_OW 311
6884: AND
6885: PUSH
6886: LD_VAR 0 5
6890: PPUSH
6891: LD_EXP 64
6895: PUSH
6896: LD_VAR 0 1
6900: ARRAY
6901: PPUSH
6902: CALL_OW 308
6906: AND
6907: IFFALSE 6961
// begin mech := IsDrivenBy ( i ) ;
6909: LD_ADDR_VAR 0 9
6913: PUSH
6914: LD_VAR 0 5
6918: PPUSH
6919: CALL_OW 311
6923: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
6924: LD_VAR 0 9
6928: PPUSH
6929: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
6933: LD_VAR 0 9
6937: PPUSH
6938: LD_VAR 0 5
6942: PPUSH
6943: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
6947: LD_VAR 0 9
6951: PPUSH
6952: LD_VAR 0 5
6956: PPUSH
6957: CALL_OW 180
// end ; end ; unit_human :
6961: GO 7228
6963: LD_INT 1
6965: DOUBLE
6966: EQUAL
6967: IFTRUE 6971
6969: GO 7227
6971: POP
// begin b := IsInUnit ( i ) ;
6972: LD_ADDR_VAR 0 18
6976: PUSH
6977: LD_VAR 0 5
6981: PPUSH
6982: CALL_OW 310
6986: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
6987: LD_ADDR_VAR 0 19
6991: PUSH
6992: LD_VAR 0 18
6996: NOT
6997: PUSH
6998: LD_VAR 0 18
7002: PPUSH
7003: CALL_OW 266
7007: PUSH
7008: LD_INT 32
7010: PUSH
7011: LD_INT 31
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: IN
7018: OR
7019: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
7020: LD_VAR 0 16
7024: PUSH
7025: LD_VAR 0 2
7029: PPUSH
7030: LD_INT 21
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PPUSH
7040: CALL_OW 72
7044: PUSH
7045: LD_INT 1
7047: LESSEQUAL
7048: OR
7049: PUSH
7050: LD_VAR 0 19
7054: AND
7055: PUSH
7056: LD_VAR 0 5
7060: PUSH
7061: LD_VAR 0 17
7065: IN
7066: NOT
7067: AND
7068: IFFALSE 7161
// begin if b then
7070: LD_VAR 0 18
7074: IFFALSE 7123
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
7076: LD_VAR 0 18
7080: PPUSH
7081: LD_VAR 0 3
7085: PPUSH
7086: LD_VAR 0 18
7090: PPUSH
7091: CALL_OW 74
7095: PPUSH
7096: CALL_OW 296
7100: PUSH
7101: LD_INT 10
7103: LESS
7104: PUSH
7105: LD_VAR 0 18
7109: PPUSH
7110: CALL_OW 461
7114: PUSH
7115: LD_INT 7
7117: NONEQUAL
7118: AND
7119: IFFALSE 7123
// continue ;
7121: GO 6571
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
7123: LD_ADDR_VAR 0 17
7127: PUSH
7128: LD_VAR 0 17
7132: PPUSH
7133: LD_VAR 0 17
7137: PUSH
7138: LD_INT 1
7140: PLUS
7141: PPUSH
7142: LD_VAR 0 5
7146: PPUSH
7147: CALL_OW 1
7151: ST_TO_ADDR
// ComExitBuilding ( i ) ;
7152: LD_VAR 0 5
7156: PPUSH
7157: CALL_OW 122
// end ; if sold_defenders then
7161: LD_VAR 0 17
7165: IFFALSE 7225
// if i in sold_defenders then
7167: LD_VAR 0 5
7171: PUSH
7172: LD_VAR 0 17
7176: IN
7177: IFFALSE 7225
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
7179: LD_VAR 0 5
7183: PPUSH
7184: CALL_OW 314
7188: NOT
7189: PUSH
7190: LD_VAR 0 5
7194: PPUSH
7195: LD_VAR 0 13
7199: PPUSH
7200: CALL_OW 296
7204: PUSH
7205: LD_INT 30
7207: LESS
7208: AND
7209: IFFALSE 7225
// ComAttackUnit ( i , e ) ;
7211: LD_VAR 0 5
7215: PPUSH
7216: LD_VAR 0 13
7220: PPUSH
7221: CALL_OW 115
// end ; end ; end ;
7225: GO 7228
7227: POP
// if IsDead ( i ) then
7228: LD_VAR 0 5
7232: PPUSH
7233: CALL_OW 301
7237: IFFALSE 7255
// defenders := defenders diff i ;
7239: LD_ADDR_VAR 0 2
7243: PUSH
7244: LD_VAR 0 2
7248: PUSH
7249: LD_VAR 0 5
7253: DIFF
7254: ST_TO_ADDR
// end ;
7255: GO 6571
7257: POP
7258: POP
// until not enemy or not defenders ;
7259: LD_VAR 0 3
7263: NOT
7264: PUSH
7265: LD_VAR 0 2
7269: NOT
7270: OR
7271: IFFALSE 6538
// MC_Reset ( base , 18 ) ;
7273: LD_VAR 0 1
7277: PPUSH
7278: LD_INT 18
7280: PPUSH
7281: CALL 45487 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
7285: LD_ADDR_VAR 0 2
7289: PUSH
7290: LD_VAR 0 2
7294: PUSH
7295: LD_VAR 0 2
7299: PPUSH
7300: LD_INT 2
7302: PUSH
7303: LD_INT 25
7305: PUSH
7306: LD_INT 1
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: PUSH
7313: LD_INT 25
7315: PUSH
7316: LD_INT 5
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 25
7325: PUSH
7326: LD_INT 8
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 25
7335: PUSH
7336: LD_INT 9
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: PPUSH
7350: CALL_OW 72
7354: DIFF
7355: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
7356: LD_VAR 0 3
7360: NOT
7361: PUSH
7362: LD_VAR 0 2
7366: PPUSH
7367: LD_INT 21
7369: PUSH
7370: LD_INT 2
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PPUSH
7377: CALL_OW 72
7381: AND
7382: IFFALSE 7653
// begin tmp := GetByTag ( GetSide ( defenders [ 1 ] ) , 19 ) ;
7384: LD_ADDR_VAR 0 11
7388: PUSH
7389: LD_VAR 0 2
7393: PUSH
7394: LD_INT 1
7396: ARRAY
7397: PPUSH
7398: CALL_OW 255
7402: PPUSH
7403: LD_INT 19
7405: PPUSH
7406: CALL 40977 0 2
7410: ST_TO_ADDR
// if tmp then
7411: LD_VAR 0 11
7415: IFFALSE 7485
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
7417: LD_ADDR_VAR 0 11
7421: PUSH
7422: LD_VAR 0 11
7426: PPUSH
7427: LD_INT 25
7429: PUSH
7430: LD_INT 3
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PPUSH
7437: CALL_OW 72
7441: ST_TO_ADDR
// if tmp then
7442: LD_VAR 0 11
7446: IFFALSE 7485
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
7448: LD_ADDR_EXP 53
7452: PUSH
7453: LD_EXP 53
7457: PPUSH
7458: LD_VAR 0 1
7462: PPUSH
7463: LD_EXP 53
7467: PUSH
7468: LD_VAR 0 1
7472: ARRAY
7473: PUSH
7474: LD_VAR 0 11
7478: UNION
7479: PPUSH
7480: CALL_OW 1
7484: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
7485: LD_VAR 0 1
7489: PPUSH
7490: LD_INT 19
7492: PPUSH
7493: CALL 45487 0 2
// repeat wait ( 0 0$1 ) ;
7497: LD_INT 35
7499: PPUSH
7500: CALL_OW 67
// for i in defenders do
7504: LD_ADDR_VAR 0 5
7508: PUSH
7509: LD_VAR 0 2
7513: PUSH
7514: FOR_IN
7515: IFFALSE 7604
// begin if not IsInArea ( i , mc_parking [ base ] ) then
7517: LD_VAR 0 5
7521: PPUSH
7522: LD_EXP 64
7526: PUSH
7527: LD_VAR 0 1
7531: ARRAY
7532: PPUSH
7533: CALL_OW 308
7537: NOT
7538: IFFALSE 7562
// ComMoveToArea ( i , mc_parking [ base ] ) else
7540: LD_VAR 0 5
7544: PPUSH
7545: LD_EXP 64
7549: PUSH
7550: LD_VAR 0 1
7554: ARRAY
7555: PPUSH
7556: CALL_OW 113
7560: GO 7602
// if GetControl ( i ) = control_manual then
7562: LD_VAR 0 5
7566: PPUSH
7567: CALL_OW 263
7571: PUSH
7572: LD_INT 1
7574: EQUAL
7575: IFFALSE 7602
// if IsDrivenBy ( i ) then
7577: LD_VAR 0 5
7581: PPUSH
7582: CALL_OW 311
7586: IFFALSE 7602
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
7588: LD_VAR 0 5
7592: PPUSH
7593: CALL_OW 311
7597: PPUSH
7598: CALL_OW 121
// end ;
7602: GO 7514
7604: POP
7605: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
7606: LD_VAR 0 2
7610: PPUSH
7611: LD_INT 95
7613: PUSH
7614: LD_EXP 64
7618: PUSH
7619: LD_VAR 0 1
7623: ARRAY
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PPUSH
7629: CALL_OW 72
7633: PUSH
7634: LD_VAR 0 2
7638: EQUAL
7639: PUSH
7640: LD_EXP 63
7644: PUSH
7645: LD_VAR 0 1
7649: ARRAY
7650: OR
7651: IFFALSE 7497
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
7653: LD_ADDR_EXP 62
7657: PUSH
7658: LD_EXP 62
7662: PPUSH
7663: LD_VAR 0 1
7667: PPUSH
7668: LD_EXP 62
7672: PUSH
7673: LD_VAR 0 1
7677: ARRAY
7678: PUSH
7679: LD_VAR 0 2
7683: UNION
7684: PPUSH
7685: CALL_OW 1
7689: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
7690: LD_VAR 0 1
7694: PPUSH
7695: LD_INT 20
7697: PPUSH
7698: CALL 45487 0 2
// end ;
7702: LD_VAR 0 4
7706: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
7707: LD_INT 0
7709: PPUSH
7710: PPUSH
7711: PPUSH
7712: PPUSH
// result := false ;
7713: LD_ADDR_VAR 0 2
7717: PUSH
7718: LD_INT 0
7720: ST_TO_ADDR
// side := GetSide ( unit ) ;
7721: LD_ADDR_VAR 0 3
7725: PUSH
7726: LD_VAR 0 1
7730: PPUSH
7731: CALL_OW 255
7735: ST_TO_ADDR
// nat := GetNation ( unit ) ;
7736: LD_ADDR_VAR 0 4
7740: PUSH
7741: LD_VAR 0 1
7745: PPUSH
7746: CALL_OW 248
7750: ST_TO_ADDR
// case nat of 1 :
7751: LD_VAR 0 4
7755: PUSH
7756: LD_INT 1
7758: DOUBLE
7759: EQUAL
7760: IFTRUE 7764
7762: GO 7775
7764: POP
// tech := tech_lassight ; 2 :
7765: LD_ADDR_VAR 0 5
7769: PUSH
7770: LD_INT 12
7772: ST_TO_ADDR
7773: GO 7814
7775: LD_INT 2
7777: DOUBLE
7778: EQUAL
7779: IFTRUE 7783
7781: GO 7794
7783: POP
// tech := tech_mortar ; 3 :
7784: LD_ADDR_VAR 0 5
7788: PUSH
7789: LD_INT 41
7791: ST_TO_ADDR
7792: GO 7814
7794: LD_INT 3
7796: DOUBLE
7797: EQUAL
7798: IFTRUE 7802
7800: GO 7813
7802: POP
// tech := tech_bazooka ; end ;
7803: LD_ADDR_VAR 0 5
7807: PUSH
7808: LD_INT 44
7810: ST_TO_ADDR
7811: GO 7814
7813: POP
// if Researched ( side , tech ) then
7814: LD_VAR 0 3
7818: PPUSH
7819: LD_VAR 0 5
7823: PPUSH
7824: CALL_OW 325
7828: IFFALSE 7855
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
7830: LD_ADDR_VAR 0 2
7834: PUSH
7835: LD_INT 5
7837: PUSH
7838: LD_INT 8
7840: PUSH
7841: LD_INT 9
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: LIST
7848: PUSH
7849: LD_VAR 0 4
7853: ARRAY
7854: ST_TO_ADDR
// end ;
7855: LD_VAR 0 2
7859: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
7860: LD_INT 0
7862: PPUSH
7863: PPUSH
7864: PPUSH
// if not mines then
7865: LD_VAR 0 2
7869: NOT
7870: IFFALSE 7874
// exit ;
7872: GO 8018
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7874: LD_ADDR_VAR 0 5
7878: PUSH
7879: LD_INT 81
7881: PUSH
7882: LD_VAR 0 1
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: LD_INT 3
7893: PUSH
7894: LD_INT 21
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PPUSH
7912: CALL_OW 69
7916: ST_TO_ADDR
// for i in mines do
7917: LD_ADDR_VAR 0 4
7921: PUSH
7922: LD_VAR 0 2
7926: PUSH
7927: FOR_IN
7928: IFFALSE 8016
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
7930: LD_VAR 0 4
7934: PUSH
7935: LD_INT 1
7937: ARRAY
7938: PPUSH
7939: LD_VAR 0 4
7943: PUSH
7944: LD_INT 2
7946: ARRAY
7947: PPUSH
7948: CALL_OW 458
7952: NOT
7953: IFFALSE 7957
// continue ;
7955: GO 7927
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
7957: LD_VAR 0 4
7961: PUSH
7962: LD_INT 1
7964: ARRAY
7965: PPUSH
7966: LD_VAR 0 4
7970: PUSH
7971: LD_INT 2
7973: ARRAY
7974: PPUSH
7975: CALL_OW 428
7979: PUSH
7980: LD_VAR 0 5
7984: IN
7985: IFFALSE 8014
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
7987: LD_VAR 0 4
7991: PUSH
7992: LD_INT 1
7994: ARRAY
7995: PPUSH
7996: LD_VAR 0 4
8000: PUSH
8001: LD_INT 2
8003: ARRAY
8004: PPUSH
8005: LD_VAR 0 1
8009: PPUSH
8010: CALL_OW 456
// end ;
8014: GO 7927
8016: POP
8017: POP
// end ;
8018: LD_VAR 0 3
8022: RET
// export function Count ( array ) ; var i ; begin
8023: LD_INT 0
8025: PPUSH
8026: PPUSH
// result := 0 ;
8027: LD_ADDR_VAR 0 2
8031: PUSH
8032: LD_INT 0
8034: ST_TO_ADDR
// for i in array do
8035: LD_ADDR_VAR 0 3
8039: PUSH
8040: LD_VAR 0 1
8044: PUSH
8045: FOR_IN
8046: IFFALSE 8070
// if i then
8048: LD_VAR 0 3
8052: IFFALSE 8068
// result := result + 1 ;
8054: LD_ADDR_VAR 0 2
8058: PUSH
8059: LD_VAR 0 2
8063: PUSH
8064: LD_INT 1
8066: PLUS
8067: ST_TO_ADDR
8068: GO 8045
8070: POP
8071: POP
// end ;
8072: LD_VAR 0 2
8076: RET
// export function IsEmpty ( building ) ; begin
8077: LD_INT 0
8079: PPUSH
// if not building then
8080: LD_VAR 0 1
8084: NOT
8085: IFFALSE 8089
// exit ;
8087: GO 8111
// result := building in FilterAllUnits ( [ f_empty ] ) ;
8089: LD_ADDR_VAR 0 2
8093: PUSH
8094: LD_VAR 0 1
8098: PUSH
8099: LD_INT 58
8101: PUSH
8102: EMPTY
8103: LIST
8104: PPUSH
8105: CALL_OW 69
8109: IN
8110: ST_TO_ADDR
// end ;
8111: LD_VAR 0 2
8115: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
8116: LD_INT 0
8118: PPUSH
8119: PPUSH
8120: PPUSH
8121: PPUSH
// tmp := [ ] ;
8122: LD_ADDR_VAR 0 3
8126: PUSH
8127: EMPTY
8128: ST_TO_ADDR
// list := [ ] ;
8129: LD_ADDR_VAR 0 5
8133: PUSH
8134: EMPTY
8135: ST_TO_ADDR
// for i = 16 to 25 do
8136: LD_ADDR_VAR 0 4
8140: PUSH
8141: DOUBLE
8142: LD_INT 16
8144: DEC
8145: ST_TO_ADDR
8146: LD_INT 25
8148: PUSH
8149: FOR_TO
8150: IFFALSE 8223
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
8152: LD_ADDR_VAR 0 3
8156: PUSH
8157: LD_VAR 0 3
8161: PUSH
8162: LD_INT 22
8164: PUSH
8165: LD_VAR 0 1
8169: PPUSH
8170: CALL_OW 255
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: PUSH
8179: LD_INT 91
8181: PUSH
8182: LD_VAR 0 1
8186: PUSH
8187: LD_INT 6
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 30
8197: PUSH
8198: LD_VAR 0 4
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: PUSH
8212: EMPTY
8213: LIST
8214: PPUSH
8215: CALL_OW 69
8219: ADD
8220: ST_TO_ADDR
8221: GO 8149
8223: POP
8224: POP
// for i = 1 to tmp do
8225: LD_ADDR_VAR 0 4
8229: PUSH
8230: DOUBLE
8231: LD_INT 1
8233: DEC
8234: ST_TO_ADDR
8235: LD_VAR 0 3
8239: PUSH
8240: FOR_TO
8241: IFFALSE 8329
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
8243: LD_ADDR_VAR 0 5
8247: PUSH
8248: LD_VAR 0 5
8252: PUSH
8253: LD_VAR 0 3
8257: PUSH
8258: LD_VAR 0 4
8262: ARRAY
8263: PPUSH
8264: CALL_OW 266
8268: PUSH
8269: LD_VAR 0 3
8273: PUSH
8274: LD_VAR 0 4
8278: ARRAY
8279: PPUSH
8280: CALL_OW 250
8284: PUSH
8285: LD_VAR 0 3
8289: PUSH
8290: LD_VAR 0 4
8294: ARRAY
8295: PPUSH
8296: CALL_OW 251
8300: PUSH
8301: LD_VAR 0 3
8305: PUSH
8306: LD_VAR 0 4
8310: ARRAY
8311: PPUSH
8312: CALL_OW 254
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: PUSH
8323: EMPTY
8324: LIST
8325: ADD
8326: ST_TO_ADDR
8327: GO 8240
8329: POP
8330: POP
// result := list ;
8331: LD_ADDR_VAR 0 2
8335: PUSH
8336: LD_VAR 0 5
8340: ST_TO_ADDR
// end ;
8341: LD_VAR 0 2
8345: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
8346: LD_INT 0
8348: PPUSH
8349: PPUSH
8350: PPUSH
8351: PPUSH
8352: PPUSH
8353: PPUSH
8354: PPUSH
// if not factory then
8355: LD_VAR 0 1
8359: NOT
8360: IFFALSE 8364
// exit ;
8362: GO 8889
// if control = control_apeman then
8364: LD_VAR 0 4
8368: PUSH
8369: LD_INT 5
8371: EQUAL
8372: IFFALSE 8481
// begin tmp := UnitsInside ( factory ) ;
8374: LD_ADDR_VAR 0 8
8378: PUSH
8379: LD_VAR 0 1
8383: PPUSH
8384: CALL_OW 313
8388: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
8389: LD_VAR 0 8
8393: PPUSH
8394: LD_INT 25
8396: PUSH
8397: LD_INT 12
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PPUSH
8404: CALL_OW 72
8408: NOT
8409: IFFALSE 8419
// control := control_manual ;
8411: LD_ADDR_VAR 0 4
8415: PUSH
8416: LD_INT 1
8418: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
8419: LD_ADDR_VAR 0 8
8423: PUSH
8424: LD_VAR 0 1
8428: PPUSH
8429: CALL 8116 0 1
8433: ST_TO_ADDR
// if tmp then
8434: LD_VAR 0 8
8438: IFFALSE 8481
// begin for i in tmp do
8440: LD_ADDR_VAR 0 7
8444: PUSH
8445: LD_VAR 0 8
8449: PUSH
8450: FOR_IN
8451: IFFALSE 8479
// if i [ 1 ] = b_ext_radar then
8453: LD_VAR 0 7
8457: PUSH
8458: LD_INT 1
8460: ARRAY
8461: PUSH
8462: LD_INT 20
8464: EQUAL
8465: IFFALSE 8477
// begin control := control_remote ;
8467: LD_ADDR_VAR 0 4
8471: PUSH
8472: LD_INT 2
8474: ST_TO_ADDR
// break ;
8475: GO 8479
// end ;
8477: GO 8450
8479: POP
8480: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
8481: LD_VAR 0 1
8485: PPUSH
8486: LD_VAR 0 2
8490: PPUSH
8491: LD_VAR 0 3
8495: PPUSH
8496: LD_VAR 0 4
8500: PPUSH
8501: LD_VAR 0 5
8505: PPUSH
8506: CALL_OW 448
8510: IFFALSE 8545
// begin result := [ chassis , engine , control , weapon ] ;
8512: LD_ADDR_VAR 0 6
8516: PUSH
8517: LD_VAR 0 2
8521: PUSH
8522: LD_VAR 0 3
8526: PUSH
8527: LD_VAR 0 4
8531: PUSH
8532: LD_VAR 0 5
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: ST_TO_ADDR
// exit ;
8543: GO 8889
// end ; _chassis := AvailableChassisList ( factory ) ;
8545: LD_ADDR_VAR 0 9
8549: PUSH
8550: LD_VAR 0 1
8554: PPUSH
8555: CALL_OW 475
8559: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
8560: LD_ADDR_VAR 0 11
8564: PUSH
8565: LD_VAR 0 1
8569: PPUSH
8570: CALL_OW 476
8574: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
8575: LD_ADDR_VAR 0 12
8579: PUSH
8580: LD_VAR 0 1
8584: PPUSH
8585: CALL_OW 477
8589: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
8590: LD_ADDR_VAR 0 10
8594: PUSH
8595: LD_VAR 0 1
8599: PPUSH
8600: CALL_OW 478
8604: ST_TO_ADDR
// if not chassis in _chassis then
8605: LD_VAR 0 2
8609: PUSH
8610: LD_VAR 0 9
8614: IN
8615: NOT
8616: IFFALSE 8642
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
8618: LD_ADDR_VAR 0 2
8622: PUSH
8623: LD_VAR 0 9
8627: PUSH
8628: LD_INT 1
8630: PPUSH
8631: LD_VAR 0 9
8635: PPUSH
8636: CALL_OW 12
8640: ARRAY
8641: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
8642: LD_VAR 0 2
8646: PPUSH
8647: LD_VAR 0 3
8651: PPUSH
8652: CALL 8894 0 2
8656: NOT
8657: IFFALSE 8716
// repeat engine := _engine [ 1 ] ;
8659: LD_ADDR_VAR 0 3
8663: PUSH
8664: LD_VAR 0 11
8668: PUSH
8669: LD_INT 1
8671: ARRAY
8672: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
8673: LD_ADDR_VAR 0 11
8677: PUSH
8678: LD_VAR 0 11
8682: PPUSH
8683: LD_INT 1
8685: PPUSH
8686: CALL_OW 3
8690: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
8691: LD_VAR 0 2
8695: PPUSH
8696: LD_VAR 0 3
8700: PPUSH
8701: CALL 8894 0 2
8705: PUSH
8706: LD_VAR 0 11
8710: PUSH
8711: EMPTY
8712: EQUAL
8713: OR
8714: IFFALSE 8659
// if not control in _control then
8716: LD_VAR 0 4
8720: PUSH
8721: LD_VAR 0 12
8725: IN
8726: NOT
8727: IFFALSE 8753
// control := _control [ rand ( 1 , _control ) ] ;
8729: LD_ADDR_VAR 0 4
8733: PUSH
8734: LD_VAR 0 12
8738: PUSH
8739: LD_INT 1
8741: PPUSH
8742: LD_VAR 0 12
8746: PPUSH
8747: CALL_OW 12
8751: ARRAY
8752: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
8753: LD_VAR 0 2
8757: PPUSH
8758: LD_VAR 0 5
8762: PPUSH
8763: CALL 9114 0 2
8767: NOT
8768: IFFALSE 8827
// repeat weapon := _weapon [ 1 ] ;
8770: LD_ADDR_VAR 0 5
8774: PUSH
8775: LD_VAR 0 10
8779: PUSH
8780: LD_INT 1
8782: ARRAY
8783: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
8784: LD_ADDR_VAR 0 10
8788: PUSH
8789: LD_VAR 0 10
8793: PPUSH
8794: LD_INT 1
8796: PPUSH
8797: CALL_OW 3
8801: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
8802: LD_VAR 0 2
8806: PPUSH
8807: LD_VAR 0 5
8811: PPUSH
8812: CALL 9114 0 2
8816: PUSH
8817: LD_VAR 0 10
8821: PUSH
8822: EMPTY
8823: EQUAL
8824: OR
8825: IFFALSE 8770
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
8827: LD_VAR 0 1
8831: PPUSH
8832: LD_VAR 0 2
8836: PPUSH
8837: LD_VAR 0 3
8841: PPUSH
8842: LD_VAR 0 4
8846: PPUSH
8847: LD_VAR 0 5
8851: PPUSH
8852: CALL_OW 448
8856: IFFALSE 8889
// result := [ chassis , engine , control , weapon ] ;
8858: LD_ADDR_VAR 0 6
8862: PUSH
8863: LD_VAR 0 2
8867: PUSH
8868: LD_VAR 0 3
8872: PUSH
8873: LD_VAR 0 4
8877: PUSH
8878: LD_VAR 0 5
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: ST_TO_ADDR
// end ;
8889: LD_VAR 0 6
8893: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
8894: LD_INT 0
8896: PPUSH
// if not chassis or not engine then
8897: LD_VAR 0 1
8901: NOT
8902: PUSH
8903: LD_VAR 0 2
8907: NOT
8908: OR
8909: IFFALSE 8913
// exit ;
8911: GO 9109
// case engine of engine_solar :
8913: LD_VAR 0 2
8917: PUSH
8918: LD_INT 2
8920: DOUBLE
8921: EQUAL
8922: IFTRUE 8926
8924: GO 8964
8926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
8927: LD_ADDR_VAR 0 3
8931: PUSH
8932: LD_INT 11
8934: PUSH
8935: LD_INT 12
8937: PUSH
8938: LD_INT 13
8940: PUSH
8941: LD_INT 14
8943: PUSH
8944: LD_INT 1
8946: PUSH
8947: LD_INT 2
8949: PUSH
8950: LD_INT 3
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: ST_TO_ADDR
8962: GO 9093
8964: LD_INT 1
8966: DOUBLE
8967: EQUAL
8968: IFTRUE 8972
8970: GO 9034
8972: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: LD_INT 11
8980: PUSH
8981: LD_INT 12
8983: PUSH
8984: LD_INT 13
8986: PUSH
8987: LD_INT 14
8989: PUSH
8990: LD_INT 1
8992: PUSH
8993: LD_INT 2
8995: PUSH
8996: LD_INT 3
8998: PUSH
8999: LD_INT 4
9001: PUSH
9002: LD_INT 5
9004: PUSH
9005: LD_INT 21
9007: PUSH
9008: LD_INT 23
9010: PUSH
9011: LD_INT 22
9013: PUSH
9014: LD_INT 24
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: ST_TO_ADDR
9032: GO 9093
9034: LD_INT 3
9036: DOUBLE
9037: EQUAL
9038: IFTRUE 9042
9040: GO 9092
9042: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9043: LD_ADDR_VAR 0 3
9047: PUSH
9048: LD_INT 13
9050: PUSH
9051: LD_INT 14
9053: PUSH
9054: LD_INT 2
9056: PUSH
9057: LD_INT 3
9059: PUSH
9060: LD_INT 4
9062: PUSH
9063: LD_INT 5
9065: PUSH
9066: LD_INT 21
9068: PUSH
9069: LD_INT 22
9071: PUSH
9072: LD_INT 23
9074: PUSH
9075: LD_INT 24
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: ST_TO_ADDR
9090: GO 9093
9092: POP
// result := ( chassis in result ) ;
9093: LD_ADDR_VAR 0 3
9097: PUSH
9098: LD_VAR 0 1
9102: PUSH
9103: LD_VAR 0 3
9107: IN
9108: ST_TO_ADDR
// end ;
9109: LD_VAR 0 3
9113: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
9114: LD_INT 0
9116: PPUSH
// if not chassis or not weapon then
9117: LD_VAR 0 1
9121: NOT
9122: PUSH
9123: LD_VAR 0 2
9127: NOT
9128: OR
9129: IFFALSE 9133
// exit ;
9131: GO 10159
// case weapon of us_machine_gun :
9133: LD_VAR 0 2
9137: PUSH
9138: LD_INT 2
9140: DOUBLE
9141: EQUAL
9142: IFTRUE 9146
9144: GO 9176
9146: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
9147: LD_ADDR_VAR 0 3
9151: PUSH
9152: LD_INT 1
9154: PUSH
9155: LD_INT 2
9157: PUSH
9158: LD_INT 3
9160: PUSH
9161: LD_INT 4
9163: PUSH
9164: LD_INT 5
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: ST_TO_ADDR
9174: GO 10143
9176: LD_INT 3
9178: DOUBLE
9179: EQUAL
9180: IFTRUE 9184
9182: GO 9214
9184: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
9185: LD_ADDR_VAR 0 3
9189: PUSH
9190: LD_INT 1
9192: PUSH
9193: LD_INT 2
9195: PUSH
9196: LD_INT 3
9198: PUSH
9199: LD_INT 4
9201: PUSH
9202: LD_INT 5
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: ST_TO_ADDR
9212: GO 10143
9214: LD_INT 11
9216: DOUBLE
9217: EQUAL
9218: IFTRUE 9222
9220: GO 9252
9222: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
9223: LD_ADDR_VAR 0 3
9227: PUSH
9228: LD_INT 1
9230: PUSH
9231: LD_INT 2
9233: PUSH
9234: LD_INT 3
9236: PUSH
9237: LD_INT 4
9239: PUSH
9240: LD_INT 5
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: ST_TO_ADDR
9250: GO 10143
9252: LD_INT 4
9254: DOUBLE
9255: EQUAL
9256: IFTRUE 9260
9258: GO 9286
9260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
9261: LD_ADDR_VAR 0 3
9265: PUSH
9266: LD_INT 2
9268: PUSH
9269: LD_INT 3
9271: PUSH
9272: LD_INT 4
9274: PUSH
9275: LD_INT 5
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: ST_TO_ADDR
9284: GO 10143
9286: LD_INT 5
9288: DOUBLE
9289: EQUAL
9290: IFTRUE 9294
9292: GO 9320
9294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
9295: LD_ADDR_VAR 0 3
9299: PUSH
9300: LD_INT 2
9302: PUSH
9303: LD_INT 3
9305: PUSH
9306: LD_INT 4
9308: PUSH
9309: LD_INT 5
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: ST_TO_ADDR
9318: GO 10143
9320: LD_INT 9
9322: DOUBLE
9323: EQUAL
9324: IFTRUE 9328
9326: GO 9354
9328: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
9329: LD_ADDR_VAR 0 3
9333: PUSH
9334: LD_INT 2
9336: PUSH
9337: LD_INT 3
9339: PUSH
9340: LD_INT 4
9342: PUSH
9343: LD_INT 5
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: ST_TO_ADDR
9352: GO 10143
9354: LD_INT 7
9356: DOUBLE
9357: EQUAL
9358: IFTRUE 9362
9360: GO 9388
9362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
9363: LD_ADDR_VAR 0 3
9367: PUSH
9368: LD_INT 2
9370: PUSH
9371: LD_INT 3
9373: PUSH
9374: LD_INT 4
9376: PUSH
9377: LD_INT 5
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: ST_TO_ADDR
9386: GO 10143
9388: LD_INT 12
9390: DOUBLE
9391: EQUAL
9392: IFTRUE 9396
9394: GO 9422
9396: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
9397: LD_ADDR_VAR 0 3
9401: PUSH
9402: LD_INT 2
9404: PUSH
9405: LD_INT 3
9407: PUSH
9408: LD_INT 4
9410: PUSH
9411: LD_INT 5
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: ST_TO_ADDR
9420: GO 10143
9422: LD_INT 13
9424: DOUBLE
9425: EQUAL
9426: IFTRUE 9430
9428: GO 9456
9430: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
9431: LD_ADDR_VAR 0 3
9435: PUSH
9436: LD_INT 2
9438: PUSH
9439: LD_INT 3
9441: PUSH
9442: LD_INT 4
9444: PUSH
9445: LD_INT 5
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: ST_TO_ADDR
9454: GO 10143
9456: LD_INT 14
9458: DOUBLE
9459: EQUAL
9460: IFTRUE 9464
9462: GO 9482
9464: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
9465: LD_ADDR_VAR 0 3
9469: PUSH
9470: LD_INT 4
9472: PUSH
9473: LD_INT 5
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: ST_TO_ADDR
9480: GO 10143
9482: LD_INT 6
9484: DOUBLE
9485: EQUAL
9486: IFTRUE 9490
9488: GO 9508
9490: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
9491: LD_ADDR_VAR 0 3
9495: PUSH
9496: LD_INT 4
9498: PUSH
9499: LD_INT 5
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: ST_TO_ADDR
9506: GO 10143
9508: LD_INT 10
9510: DOUBLE
9511: EQUAL
9512: IFTRUE 9516
9514: GO 9534
9516: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
9517: LD_ADDR_VAR 0 3
9521: PUSH
9522: LD_INT 4
9524: PUSH
9525: LD_INT 5
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: ST_TO_ADDR
9532: GO 10143
9534: LD_INT 22
9536: DOUBLE
9537: EQUAL
9538: IFTRUE 9542
9540: GO 9568
9542: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
9543: LD_ADDR_VAR 0 3
9547: PUSH
9548: LD_INT 11
9550: PUSH
9551: LD_INT 12
9553: PUSH
9554: LD_INT 13
9556: PUSH
9557: LD_INT 14
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: ST_TO_ADDR
9566: GO 10143
9568: LD_INT 23
9570: DOUBLE
9571: EQUAL
9572: IFTRUE 9576
9574: GO 9602
9576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
9577: LD_ADDR_VAR 0 3
9581: PUSH
9582: LD_INT 11
9584: PUSH
9585: LD_INT 12
9587: PUSH
9588: LD_INT 13
9590: PUSH
9591: LD_INT 14
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
9600: GO 10143
9602: LD_INT 24
9604: DOUBLE
9605: EQUAL
9606: IFTRUE 9610
9608: GO 9636
9610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
9611: LD_ADDR_VAR 0 3
9615: PUSH
9616: LD_INT 11
9618: PUSH
9619: LD_INT 12
9621: PUSH
9622: LD_INT 13
9624: PUSH
9625: LD_INT 14
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: ST_TO_ADDR
9634: GO 10143
9636: LD_INT 30
9638: DOUBLE
9639: EQUAL
9640: IFTRUE 9644
9642: GO 9670
9644: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
9645: LD_ADDR_VAR 0 3
9649: PUSH
9650: LD_INT 11
9652: PUSH
9653: LD_INT 12
9655: PUSH
9656: LD_INT 13
9658: PUSH
9659: LD_INT 14
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: ST_TO_ADDR
9668: GO 10143
9670: LD_INT 25
9672: DOUBLE
9673: EQUAL
9674: IFTRUE 9678
9676: GO 9696
9678: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
9679: LD_ADDR_VAR 0 3
9683: PUSH
9684: LD_INT 13
9686: PUSH
9687: LD_INT 14
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: ST_TO_ADDR
9694: GO 10143
9696: LD_INT 27
9698: DOUBLE
9699: EQUAL
9700: IFTRUE 9704
9702: GO 9722
9704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
9705: LD_ADDR_VAR 0 3
9709: PUSH
9710: LD_INT 13
9712: PUSH
9713: LD_INT 14
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: ST_TO_ADDR
9720: GO 10143
9722: LD_INT 28
9724: DOUBLE
9725: EQUAL
9726: IFTRUE 9730
9728: GO 9748
9730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
9731: LD_ADDR_VAR 0 3
9735: PUSH
9736: LD_INT 13
9738: PUSH
9739: LD_INT 14
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: ST_TO_ADDR
9746: GO 10143
9748: LD_INT 29
9750: DOUBLE
9751: EQUAL
9752: IFTRUE 9756
9754: GO 9774
9756: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
9757: LD_ADDR_VAR 0 3
9761: PUSH
9762: LD_INT 13
9764: PUSH
9765: LD_INT 14
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: ST_TO_ADDR
9772: GO 10143
9774: LD_INT 31
9776: DOUBLE
9777: EQUAL
9778: IFTRUE 9782
9780: GO 9800
9782: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
9783: LD_ADDR_VAR 0 3
9787: PUSH
9788: LD_INT 13
9790: PUSH
9791: LD_INT 14
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: ST_TO_ADDR
9798: GO 10143
9800: LD_INT 26
9802: DOUBLE
9803: EQUAL
9804: IFTRUE 9808
9806: GO 9826
9808: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
9809: LD_ADDR_VAR 0 3
9813: PUSH
9814: LD_INT 13
9816: PUSH
9817: LD_INT 14
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: ST_TO_ADDR
9824: GO 10143
9826: LD_INT 42
9828: DOUBLE
9829: EQUAL
9830: IFTRUE 9834
9832: GO 9860
9834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
9835: LD_ADDR_VAR 0 3
9839: PUSH
9840: LD_INT 21
9842: PUSH
9843: LD_INT 22
9845: PUSH
9846: LD_INT 23
9848: PUSH
9849: LD_INT 24
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: ST_TO_ADDR
9858: GO 10143
9860: LD_INT 43
9862: DOUBLE
9863: EQUAL
9864: IFTRUE 9868
9866: GO 9894
9868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
9869: LD_ADDR_VAR 0 3
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 22
9879: PUSH
9880: LD_INT 23
9882: PUSH
9883: LD_INT 24
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: ST_TO_ADDR
9892: GO 10143
9894: LD_INT 44
9896: DOUBLE
9897: EQUAL
9898: IFTRUE 9902
9900: GO 9928
9902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
9903: LD_ADDR_VAR 0 3
9907: PUSH
9908: LD_INT 21
9910: PUSH
9911: LD_INT 22
9913: PUSH
9914: LD_INT 23
9916: PUSH
9917: LD_INT 24
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: ST_TO_ADDR
9926: GO 10143
9928: LD_INT 45
9930: DOUBLE
9931: EQUAL
9932: IFTRUE 9936
9934: GO 9962
9936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
9937: LD_ADDR_VAR 0 3
9941: PUSH
9942: LD_INT 21
9944: PUSH
9945: LD_INT 22
9947: PUSH
9948: LD_INT 23
9950: PUSH
9951: LD_INT 24
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: ST_TO_ADDR
9960: GO 10143
9962: LD_INT 49
9964: DOUBLE
9965: EQUAL
9966: IFTRUE 9970
9968: GO 9996
9970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
9971: LD_ADDR_VAR 0 3
9975: PUSH
9976: LD_INT 21
9978: PUSH
9979: LD_INT 22
9981: PUSH
9982: LD_INT 23
9984: PUSH
9985: LD_INT 24
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: ST_TO_ADDR
9994: GO 10143
9996: LD_INT 51
9998: DOUBLE
9999: EQUAL
10000: IFTRUE 10004
10002: GO 10030
10004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
10005: LD_ADDR_VAR 0 3
10009: PUSH
10010: LD_INT 21
10012: PUSH
10013: LD_INT 22
10015: PUSH
10016: LD_INT 23
10018: PUSH
10019: LD_INT 24
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: ST_TO_ADDR
10028: GO 10143
10030: LD_INT 52
10032: DOUBLE
10033: EQUAL
10034: IFTRUE 10038
10036: GO 10064
10038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
10039: LD_ADDR_VAR 0 3
10043: PUSH
10044: LD_INT 21
10046: PUSH
10047: LD_INT 22
10049: PUSH
10050: LD_INT 23
10052: PUSH
10053: LD_INT 24
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: ST_TO_ADDR
10062: GO 10143
10064: LD_INT 53
10066: DOUBLE
10067: EQUAL
10068: IFTRUE 10072
10070: GO 10090
10072: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
10073: LD_ADDR_VAR 0 3
10077: PUSH
10078: LD_INT 23
10080: PUSH
10081: LD_INT 24
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: ST_TO_ADDR
10088: GO 10143
10090: LD_INT 46
10092: DOUBLE
10093: EQUAL
10094: IFTRUE 10098
10096: GO 10116
10098: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
10099: LD_ADDR_VAR 0 3
10103: PUSH
10104: LD_INT 23
10106: PUSH
10107: LD_INT 24
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: ST_TO_ADDR
10114: GO 10143
10116: LD_INT 47
10118: DOUBLE
10119: EQUAL
10120: IFTRUE 10124
10122: GO 10142
10124: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10125: LD_ADDR_VAR 0 3
10129: PUSH
10130: LD_INT 23
10132: PUSH
10133: LD_INT 24
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: ST_TO_ADDR
10140: GO 10143
10142: POP
// result := ( chassis in result ) ;
10143: LD_ADDR_VAR 0 3
10147: PUSH
10148: LD_VAR 0 1
10152: PUSH
10153: LD_VAR 0 3
10157: IN
10158: ST_TO_ADDR
// end ;
10159: LD_VAR 0 3
10163: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
10164: LD_INT 0
10166: PPUSH
10167: PPUSH
10168: PPUSH
10169: PPUSH
10170: PPUSH
10171: PPUSH
10172: PPUSH
// result := array ;
10173: LD_ADDR_VAR 0 5
10177: PUSH
10178: LD_VAR 0 1
10182: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
10183: LD_VAR 0 1
10187: NOT
10188: PUSH
10189: LD_VAR 0 2
10193: NOT
10194: OR
10195: PUSH
10196: LD_VAR 0 3
10200: NOT
10201: OR
10202: PUSH
10203: LD_VAR 0 2
10207: PUSH
10208: LD_VAR 0 1
10212: GREATER
10213: OR
10214: PUSH
10215: LD_VAR 0 3
10219: PUSH
10220: LD_VAR 0 1
10224: GREATER
10225: OR
10226: IFFALSE 10230
// exit ;
10228: GO 10526
// if direction then
10230: LD_VAR 0 4
10234: IFFALSE 10298
// begin d := 1 ;
10236: LD_ADDR_VAR 0 9
10240: PUSH
10241: LD_INT 1
10243: ST_TO_ADDR
// if i_from > i_to then
10244: LD_VAR 0 2
10248: PUSH
10249: LD_VAR 0 3
10253: GREATER
10254: IFFALSE 10280
// length := ( array - i_from ) + i_to else
10256: LD_ADDR_VAR 0 11
10260: PUSH
10261: LD_VAR 0 1
10265: PUSH
10266: LD_VAR 0 2
10270: MINUS
10271: PUSH
10272: LD_VAR 0 3
10276: PLUS
10277: ST_TO_ADDR
10278: GO 10296
// length := i_to - i_from ;
10280: LD_ADDR_VAR 0 11
10284: PUSH
10285: LD_VAR 0 3
10289: PUSH
10290: LD_VAR 0 2
10294: MINUS
10295: ST_TO_ADDR
// end else
10296: GO 10359
// begin d := - 1 ;
10298: LD_ADDR_VAR 0 9
10302: PUSH
10303: LD_INT 1
10305: NEG
10306: ST_TO_ADDR
// if i_from > i_to then
10307: LD_VAR 0 2
10311: PUSH
10312: LD_VAR 0 3
10316: GREATER
10317: IFFALSE 10337
// length := i_from - i_to else
10319: LD_ADDR_VAR 0 11
10323: PUSH
10324: LD_VAR 0 2
10328: PUSH
10329: LD_VAR 0 3
10333: MINUS
10334: ST_TO_ADDR
10335: GO 10359
// length := ( array - i_to ) + i_from ;
10337: LD_ADDR_VAR 0 11
10341: PUSH
10342: LD_VAR 0 1
10346: PUSH
10347: LD_VAR 0 3
10351: MINUS
10352: PUSH
10353: LD_VAR 0 2
10357: PLUS
10358: ST_TO_ADDR
// end ; if not length then
10359: LD_VAR 0 11
10363: NOT
10364: IFFALSE 10368
// exit ;
10366: GO 10526
// tmp := array ;
10368: LD_ADDR_VAR 0 10
10372: PUSH
10373: LD_VAR 0 1
10377: ST_TO_ADDR
// for i = 1 to length do
10378: LD_ADDR_VAR 0 6
10382: PUSH
10383: DOUBLE
10384: LD_INT 1
10386: DEC
10387: ST_TO_ADDR
10388: LD_VAR 0 11
10392: PUSH
10393: FOR_TO
10394: IFFALSE 10514
// begin for j = 1 to array do
10396: LD_ADDR_VAR 0 7
10400: PUSH
10401: DOUBLE
10402: LD_INT 1
10404: DEC
10405: ST_TO_ADDR
10406: LD_VAR 0 1
10410: PUSH
10411: FOR_TO
10412: IFFALSE 10500
// begin k := j + d ;
10414: LD_ADDR_VAR 0 8
10418: PUSH
10419: LD_VAR 0 7
10423: PUSH
10424: LD_VAR 0 9
10428: PLUS
10429: ST_TO_ADDR
// if k > array then
10430: LD_VAR 0 8
10434: PUSH
10435: LD_VAR 0 1
10439: GREATER
10440: IFFALSE 10450
// k := 1 ;
10442: LD_ADDR_VAR 0 8
10446: PUSH
10447: LD_INT 1
10449: ST_TO_ADDR
// if not k then
10450: LD_VAR 0 8
10454: NOT
10455: IFFALSE 10467
// k := array ;
10457: LD_ADDR_VAR 0 8
10461: PUSH
10462: LD_VAR 0 1
10466: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
10467: LD_ADDR_VAR 0 10
10471: PUSH
10472: LD_VAR 0 10
10476: PPUSH
10477: LD_VAR 0 8
10481: PPUSH
10482: LD_VAR 0 1
10486: PUSH
10487: LD_VAR 0 7
10491: ARRAY
10492: PPUSH
10493: CALL_OW 1
10497: ST_TO_ADDR
// end ;
10498: GO 10411
10500: POP
10501: POP
// array := tmp ;
10502: LD_ADDR_VAR 0 1
10506: PUSH
10507: LD_VAR 0 10
10511: ST_TO_ADDR
// end ;
10512: GO 10393
10514: POP
10515: POP
// result := array ;
10516: LD_ADDR_VAR 0 5
10520: PUSH
10521: LD_VAR 0 1
10525: ST_TO_ADDR
// end ;
10526: LD_VAR 0 5
10530: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
10531: LD_INT 0
10533: PPUSH
10534: PPUSH
// result := 0 ;
10535: LD_ADDR_VAR 0 3
10539: PUSH
10540: LD_INT 0
10542: ST_TO_ADDR
// if not array or not value in array then
10543: LD_VAR 0 1
10547: NOT
10548: PUSH
10549: LD_VAR 0 2
10553: PUSH
10554: LD_VAR 0 1
10558: IN
10559: NOT
10560: OR
10561: IFFALSE 10565
// exit ;
10563: GO 10619
// for i = 1 to array do
10565: LD_ADDR_VAR 0 4
10569: PUSH
10570: DOUBLE
10571: LD_INT 1
10573: DEC
10574: ST_TO_ADDR
10575: LD_VAR 0 1
10579: PUSH
10580: FOR_TO
10581: IFFALSE 10617
// if value = array [ i ] then
10583: LD_VAR 0 2
10587: PUSH
10588: LD_VAR 0 1
10592: PUSH
10593: LD_VAR 0 4
10597: ARRAY
10598: EQUAL
10599: IFFALSE 10615
// begin result := i ;
10601: LD_ADDR_VAR 0 3
10605: PUSH
10606: LD_VAR 0 4
10610: ST_TO_ADDR
// exit ;
10611: POP
10612: POP
10613: GO 10619
// end ;
10615: GO 10580
10617: POP
10618: POP
// end ;
10619: LD_VAR 0 3
10623: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
10624: LD_INT 0
10626: PPUSH
// vc_chassis := chassis ;
10627: LD_ADDR_OWVAR 37
10631: PUSH
10632: LD_VAR 0 1
10636: ST_TO_ADDR
// vc_engine := engine ;
10637: LD_ADDR_OWVAR 39
10641: PUSH
10642: LD_VAR 0 2
10646: ST_TO_ADDR
// vc_control := control ;
10647: LD_ADDR_OWVAR 38
10651: PUSH
10652: LD_VAR 0 3
10656: ST_TO_ADDR
// vc_weapon := weapon ;
10657: LD_ADDR_OWVAR 40
10661: PUSH
10662: LD_VAR 0 4
10666: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10667: LD_ADDR_OWVAR 41
10671: PUSH
10672: LD_VAR 0 5
10676: ST_TO_ADDR
// end ;
10677: LD_VAR 0 6
10681: RET
// export function WantPlant ( unit ) ; var task ; begin
10682: LD_INT 0
10684: PPUSH
10685: PPUSH
// result := false ;
10686: LD_ADDR_VAR 0 2
10690: PUSH
10691: LD_INT 0
10693: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
10694: LD_ADDR_VAR 0 3
10698: PUSH
10699: LD_VAR 0 1
10703: PPUSH
10704: CALL_OW 437
10708: ST_TO_ADDR
// if task then
10709: LD_VAR 0 3
10713: IFFALSE 10741
// if task [ 1 ] [ 1 ] = p then
10715: LD_VAR 0 3
10719: PUSH
10720: LD_INT 1
10722: ARRAY
10723: PUSH
10724: LD_INT 1
10726: ARRAY
10727: PUSH
10728: LD_STRING p
10730: EQUAL
10731: IFFALSE 10741
// result := true ;
10733: LD_ADDR_VAR 0 2
10737: PUSH
10738: LD_INT 1
10740: ST_TO_ADDR
// end ;
10741: LD_VAR 0 2
10745: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
10746: LD_INT 0
10748: PPUSH
10749: PPUSH
10750: PPUSH
10751: PPUSH
// if pos < 1 then
10752: LD_VAR 0 2
10756: PUSH
10757: LD_INT 1
10759: LESS
10760: IFFALSE 10764
// exit ;
10762: GO 11067
// if pos = 1 then
10764: LD_VAR 0 2
10768: PUSH
10769: LD_INT 1
10771: EQUAL
10772: IFFALSE 10805
// result := Replace ( arr , pos [ 1 ] , value ) else
10774: LD_ADDR_VAR 0 4
10778: PUSH
10779: LD_VAR 0 1
10783: PPUSH
10784: LD_VAR 0 2
10788: PUSH
10789: LD_INT 1
10791: ARRAY
10792: PPUSH
10793: LD_VAR 0 3
10797: PPUSH
10798: CALL_OW 1
10802: ST_TO_ADDR
10803: GO 11067
// begin tmp := arr ;
10805: LD_ADDR_VAR 0 6
10809: PUSH
10810: LD_VAR 0 1
10814: ST_TO_ADDR
// s_arr := [ tmp ] ;
10815: LD_ADDR_VAR 0 7
10819: PUSH
10820: LD_VAR 0 6
10824: PUSH
10825: EMPTY
10826: LIST
10827: ST_TO_ADDR
// for i = 1 to pos - 1 do
10828: LD_ADDR_VAR 0 5
10832: PUSH
10833: DOUBLE
10834: LD_INT 1
10836: DEC
10837: ST_TO_ADDR
10838: LD_VAR 0 2
10842: PUSH
10843: LD_INT 1
10845: MINUS
10846: PUSH
10847: FOR_TO
10848: IFFALSE 10893
// begin tmp := tmp [ pos [ i ] ] ;
10850: LD_ADDR_VAR 0 6
10854: PUSH
10855: LD_VAR 0 6
10859: PUSH
10860: LD_VAR 0 2
10864: PUSH
10865: LD_VAR 0 5
10869: ARRAY
10870: ARRAY
10871: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
10872: LD_ADDR_VAR 0 7
10876: PUSH
10877: LD_VAR 0 7
10881: PUSH
10882: LD_VAR 0 6
10886: PUSH
10887: EMPTY
10888: LIST
10889: ADD
10890: ST_TO_ADDR
// end ;
10891: GO 10847
10893: POP
10894: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
10895: LD_ADDR_VAR 0 6
10899: PUSH
10900: LD_VAR 0 6
10904: PPUSH
10905: LD_VAR 0 2
10909: PUSH
10910: LD_VAR 0 2
10914: ARRAY
10915: PPUSH
10916: LD_VAR 0 3
10920: PPUSH
10921: CALL_OW 1
10925: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
10926: LD_ADDR_VAR 0 7
10930: PUSH
10931: LD_VAR 0 7
10935: PPUSH
10936: LD_VAR 0 7
10940: PPUSH
10941: LD_VAR 0 6
10945: PPUSH
10946: CALL_OW 1
10950: ST_TO_ADDR
// for i = s_arr downto 2 do
10951: LD_ADDR_VAR 0 5
10955: PUSH
10956: DOUBLE
10957: LD_VAR 0 7
10961: INC
10962: ST_TO_ADDR
10963: LD_INT 2
10965: PUSH
10966: FOR_DOWNTO
10967: IFFALSE 11051
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
10969: LD_ADDR_VAR 0 6
10973: PUSH
10974: LD_VAR 0 7
10978: PUSH
10979: LD_VAR 0 5
10983: PUSH
10984: LD_INT 1
10986: MINUS
10987: ARRAY
10988: PPUSH
10989: LD_VAR 0 2
10993: PUSH
10994: LD_VAR 0 5
10998: PUSH
10999: LD_INT 1
11001: MINUS
11002: ARRAY
11003: PPUSH
11004: LD_VAR 0 7
11008: PUSH
11009: LD_VAR 0 5
11013: ARRAY
11014: PPUSH
11015: CALL_OW 1
11019: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
11020: LD_ADDR_VAR 0 7
11024: PUSH
11025: LD_VAR 0 7
11029: PPUSH
11030: LD_VAR 0 5
11034: PUSH
11035: LD_INT 1
11037: MINUS
11038: PPUSH
11039: LD_VAR 0 6
11043: PPUSH
11044: CALL_OW 1
11048: ST_TO_ADDR
// end ;
11049: GO 10966
11051: POP
11052: POP
// result := s_arr [ 1 ] ;
11053: LD_ADDR_VAR 0 4
11057: PUSH
11058: LD_VAR 0 7
11062: PUSH
11063: LD_INT 1
11065: ARRAY
11066: ST_TO_ADDR
// end ; end ;
11067: LD_VAR 0 4
11071: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
11072: LD_INT 0
11074: PPUSH
11075: PPUSH
// if not list then
11076: LD_VAR 0 1
11080: NOT
11081: IFFALSE 11085
// exit ;
11083: GO 11176
// i := list [ pos1 ] ;
11085: LD_ADDR_VAR 0 5
11089: PUSH
11090: LD_VAR 0 1
11094: PUSH
11095: LD_VAR 0 2
11099: ARRAY
11100: ST_TO_ADDR
// if not i then
11101: LD_VAR 0 5
11105: NOT
11106: IFFALSE 11110
// exit ;
11108: GO 11176
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
11110: LD_ADDR_VAR 0 1
11114: PUSH
11115: LD_VAR 0 1
11119: PPUSH
11120: LD_VAR 0 2
11124: PPUSH
11125: LD_VAR 0 1
11129: PUSH
11130: LD_VAR 0 3
11134: ARRAY
11135: PPUSH
11136: CALL_OW 1
11140: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
11141: LD_ADDR_VAR 0 1
11145: PUSH
11146: LD_VAR 0 1
11150: PPUSH
11151: LD_VAR 0 3
11155: PPUSH
11156: LD_VAR 0 5
11160: PPUSH
11161: CALL_OW 1
11165: ST_TO_ADDR
// result := list ;
11166: LD_ADDR_VAR 0 4
11170: PUSH
11171: LD_VAR 0 1
11175: ST_TO_ADDR
// end ;
11176: LD_VAR 0 4
11180: RET
// export function Add ( list , pos , val ) ; begin
11181: LD_INT 0
11183: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
11184: LD_ADDR_VAR 0 4
11188: PUSH
11189: LD_VAR 0 1
11193: PPUSH
11194: LD_VAR 0 2
11198: PPUSH
11199: LD_VAR 0 3
11203: PPUSH
11204: CALL 10746 0 3
11208: ST_TO_ADDR
11209: LD_VAR 0 4
11213: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
11214: LD_INT 0
11216: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
11217: LD_ADDR_VAR 0 5
11221: PUSH
11222: LD_VAR 0 1
11226: PPUSH
11227: CALL_OW 250
11231: PPUSH
11232: LD_VAR 0 1
11236: PPUSH
11237: CALL_OW 251
11241: PPUSH
11242: LD_VAR 0 2
11246: PPUSH
11247: LD_VAR 0 3
11251: PPUSH
11252: LD_VAR 0 4
11256: PPUSH
11257: CALL 11267 0 5
11261: ST_TO_ADDR
// end ;
11262: LD_VAR 0 5
11266: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
11267: LD_INT 0
11269: PPUSH
11270: PPUSH
11271: PPUSH
11272: PPUSH
// if not list then
11273: LD_VAR 0 3
11277: NOT
11278: IFFALSE 11282
// exit ;
11280: GO 11670
// result := [ ] ;
11282: LD_ADDR_VAR 0 6
11286: PUSH
11287: EMPTY
11288: ST_TO_ADDR
// for i in list do
11289: LD_ADDR_VAR 0 7
11293: PUSH
11294: LD_VAR 0 3
11298: PUSH
11299: FOR_IN
11300: IFFALSE 11502
// begin tmp := GetDistUnitXY ( i , x , y ) ;
11302: LD_ADDR_VAR 0 9
11306: PUSH
11307: LD_VAR 0 7
11311: PPUSH
11312: LD_VAR 0 1
11316: PPUSH
11317: LD_VAR 0 2
11321: PPUSH
11322: CALL_OW 297
11326: ST_TO_ADDR
// if not result then
11327: LD_VAR 0 6
11331: NOT
11332: IFFALSE 11358
// result := [ [ i , tmp ] ] else
11334: LD_ADDR_VAR 0 6
11338: PUSH
11339: LD_VAR 0 7
11343: PUSH
11344: LD_VAR 0 9
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: EMPTY
11354: LIST
11355: ST_TO_ADDR
11356: GO 11500
// begin if result [ result ] [ 2 ] < tmp then
11358: LD_VAR 0 6
11362: PUSH
11363: LD_VAR 0 6
11367: ARRAY
11368: PUSH
11369: LD_INT 2
11371: ARRAY
11372: PUSH
11373: LD_VAR 0 9
11377: LESS
11378: IFFALSE 11420
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
11380: LD_ADDR_VAR 0 6
11384: PUSH
11385: LD_VAR 0 6
11389: PPUSH
11390: LD_VAR 0 6
11394: PUSH
11395: LD_INT 1
11397: PLUS
11398: PPUSH
11399: LD_VAR 0 7
11403: PUSH
11404: LD_VAR 0 9
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PPUSH
11413: CALL_OW 2
11417: ST_TO_ADDR
11418: GO 11500
// for j = 1 to result do
11420: LD_ADDR_VAR 0 8
11424: PUSH
11425: DOUBLE
11426: LD_INT 1
11428: DEC
11429: ST_TO_ADDR
11430: LD_VAR 0 6
11434: PUSH
11435: FOR_TO
11436: IFFALSE 11498
// begin if tmp < result [ j ] [ 2 ] then
11438: LD_VAR 0 9
11442: PUSH
11443: LD_VAR 0 6
11447: PUSH
11448: LD_VAR 0 8
11452: ARRAY
11453: PUSH
11454: LD_INT 2
11456: ARRAY
11457: LESS
11458: IFFALSE 11496
// begin result := Insert ( result , j , [ i , tmp ] ) ;
11460: LD_ADDR_VAR 0 6
11464: PUSH
11465: LD_VAR 0 6
11469: PPUSH
11470: LD_VAR 0 8
11474: PPUSH
11475: LD_VAR 0 7
11479: PUSH
11480: LD_VAR 0 9
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PPUSH
11489: CALL_OW 2
11493: ST_TO_ADDR
// break ;
11494: GO 11498
// end ; end ;
11496: GO 11435
11498: POP
11499: POP
// end ; end ;
11500: GO 11299
11502: POP
11503: POP
// if result and not asc then
11504: LD_VAR 0 6
11508: PUSH
11509: LD_VAR 0 4
11513: NOT
11514: AND
11515: IFFALSE 11590
// begin tmp := result ;
11517: LD_ADDR_VAR 0 9
11521: PUSH
11522: LD_VAR 0 6
11526: ST_TO_ADDR
// for i = tmp downto 1 do
11527: LD_ADDR_VAR 0 7
11531: PUSH
11532: DOUBLE
11533: LD_VAR 0 9
11537: INC
11538: ST_TO_ADDR
11539: LD_INT 1
11541: PUSH
11542: FOR_DOWNTO
11543: IFFALSE 11588
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
11545: LD_ADDR_VAR 0 6
11549: PUSH
11550: LD_VAR 0 6
11554: PPUSH
11555: LD_VAR 0 9
11559: PUSH
11560: LD_VAR 0 7
11564: MINUS
11565: PUSH
11566: LD_INT 1
11568: PLUS
11569: PPUSH
11570: LD_VAR 0 9
11574: PUSH
11575: LD_VAR 0 7
11579: ARRAY
11580: PPUSH
11581: CALL_OW 1
11585: ST_TO_ADDR
11586: GO 11542
11588: POP
11589: POP
// end ; tmp := [ ] ;
11590: LD_ADDR_VAR 0 9
11594: PUSH
11595: EMPTY
11596: ST_TO_ADDR
// if mode then
11597: LD_VAR 0 5
11601: IFFALSE 11670
// begin for i = 1 to result do
11603: LD_ADDR_VAR 0 7
11607: PUSH
11608: DOUBLE
11609: LD_INT 1
11611: DEC
11612: ST_TO_ADDR
11613: LD_VAR 0 6
11617: PUSH
11618: FOR_TO
11619: IFFALSE 11658
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
11621: LD_ADDR_VAR 0 9
11625: PUSH
11626: LD_VAR 0 9
11630: PPUSH
11631: LD_VAR 0 7
11635: PPUSH
11636: LD_VAR 0 6
11640: PUSH
11641: LD_VAR 0 7
11645: ARRAY
11646: PUSH
11647: LD_INT 1
11649: ARRAY
11650: PPUSH
11651: CALL_OW 1
11655: ST_TO_ADDR
11656: GO 11618
11658: POP
11659: POP
// result := tmp ;
11660: LD_ADDR_VAR 0 6
11664: PUSH
11665: LD_VAR 0 9
11669: ST_TO_ADDR
// end ; end ;
11670: LD_VAR 0 6
11674: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
11675: LD_INT 0
11677: PPUSH
11678: PPUSH
11679: PPUSH
11680: PPUSH
11681: PPUSH
11682: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
11683: LD_ADDR_VAR 0 5
11687: PUSH
11688: LD_INT 0
11690: PUSH
11691: LD_INT 0
11693: PUSH
11694: LD_INT 0
11696: PUSH
11697: EMPTY
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: ST_TO_ADDR
// if not x or not y then
11705: LD_VAR 0 2
11709: NOT
11710: PUSH
11711: LD_VAR 0 3
11715: NOT
11716: OR
11717: IFFALSE 11721
// exit ;
11719: GO 13367
// if not range then
11721: LD_VAR 0 4
11725: NOT
11726: IFFALSE 11736
// range := 10 ;
11728: LD_ADDR_VAR 0 4
11732: PUSH
11733: LD_INT 10
11735: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11736: LD_ADDR_VAR 0 8
11740: PUSH
11741: LD_INT 81
11743: PUSH
11744: LD_VAR 0 1
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 92
11755: PUSH
11756: LD_VAR 0 2
11760: PUSH
11761: LD_VAR 0 3
11765: PUSH
11766: LD_VAR 0 4
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 3
11779: PUSH
11780: LD_INT 21
11782: PUSH
11783: LD_INT 3
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: LIST
11798: PPUSH
11799: CALL_OW 69
11803: ST_TO_ADDR
// if not tmp then
11804: LD_VAR 0 8
11808: NOT
11809: IFFALSE 11813
// exit ;
11811: GO 13367
// for i in tmp do
11813: LD_ADDR_VAR 0 6
11817: PUSH
11818: LD_VAR 0 8
11822: PUSH
11823: FOR_IN
11824: IFFALSE 13342
// begin points := [ 0 , 0 , 0 ] ;
11826: LD_ADDR_VAR 0 9
11830: PUSH
11831: LD_INT 0
11833: PUSH
11834: LD_INT 0
11836: PUSH
11837: LD_INT 0
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: ST_TO_ADDR
// bpoints := 1 ;
11845: LD_ADDR_VAR 0 10
11849: PUSH
11850: LD_INT 1
11852: ST_TO_ADDR
// case GetType ( i ) of unit_human :
11853: LD_VAR 0 6
11857: PPUSH
11858: CALL_OW 247
11862: PUSH
11863: LD_INT 1
11865: DOUBLE
11866: EQUAL
11867: IFTRUE 11871
11869: GO 12449
11871: POP
// begin if GetClass ( i ) = 1 then
11872: LD_VAR 0 6
11876: PPUSH
11877: CALL_OW 257
11881: PUSH
11882: LD_INT 1
11884: EQUAL
11885: IFFALSE 11906
// points := [ 10 , 5 , 3 ] ;
11887: LD_ADDR_VAR 0 9
11891: PUSH
11892: LD_INT 10
11894: PUSH
11895: LD_INT 5
11897: PUSH
11898: LD_INT 3
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: LIST
11905: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
11906: LD_VAR 0 6
11910: PPUSH
11911: CALL_OW 257
11915: PUSH
11916: LD_INT 2
11918: PUSH
11919: LD_INT 3
11921: PUSH
11922: LD_INT 4
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: LIST
11929: IN
11930: IFFALSE 11951
// points := [ 3 , 2 , 1 ] ;
11932: LD_ADDR_VAR 0 9
11936: PUSH
11937: LD_INT 3
11939: PUSH
11940: LD_INT 2
11942: PUSH
11943: LD_INT 1
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: ST_TO_ADDR
// if GetClass ( i ) = 5 then
11951: LD_VAR 0 6
11955: PPUSH
11956: CALL_OW 257
11960: PUSH
11961: LD_INT 5
11963: EQUAL
11964: IFFALSE 11985
// points := [ 130 , 5 , 2 ] ;
11966: LD_ADDR_VAR 0 9
11970: PUSH
11971: LD_INT 130
11973: PUSH
11974: LD_INT 5
11976: PUSH
11977: LD_INT 2
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: ST_TO_ADDR
// if GetClass ( i ) = 8 then
11985: LD_VAR 0 6
11989: PPUSH
11990: CALL_OW 257
11994: PUSH
11995: LD_INT 8
11997: EQUAL
11998: IFFALSE 12019
// points := [ 35 , 35 , 30 ] ;
12000: LD_ADDR_VAR 0 9
12004: PUSH
12005: LD_INT 35
12007: PUSH
12008: LD_INT 35
12010: PUSH
12011: LD_INT 30
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: ST_TO_ADDR
// if GetClass ( i ) = 9 then
12019: LD_VAR 0 6
12023: PPUSH
12024: CALL_OW 257
12028: PUSH
12029: LD_INT 9
12031: EQUAL
12032: IFFALSE 12053
// points := [ 20 , 55 , 40 ] ;
12034: LD_ADDR_VAR 0 9
12038: PUSH
12039: LD_INT 20
12041: PUSH
12042: LD_INT 55
12044: PUSH
12045: LD_INT 40
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
12053: LD_VAR 0 6
12057: PPUSH
12058: CALL_OW 257
12062: PUSH
12063: LD_INT 12
12065: PUSH
12066: LD_INT 16
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: IN
12073: IFFALSE 12094
// points := [ 5 , 3 , 2 ] ;
12075: LD_ADDR_VAR 0 9
12079: PUSH
12080: LD_INT 5
12082: PUSH
12083: LD_INT 3
12085: PUSH
12086: LD_INT 2
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: LIST
12093: ST_TO_ADDR
// if GetClass ( i ) = 17 then
12094: LD_VAR 0 6
12098: PPUSH
12099: CALL_OW 257
12103: PUSH
12104: LD_INT 17
12106: EQUAL
12107: IFFALSE 12128
// points := [ 100 , 50 , 75 ] ;
12109: LD_ADDR_VAR 0 9
12113: PUSH
12114: LD_INT 100
12116: PUSH
12117: LD_INT 50
12119: PUSH
12120: LD_INT 75
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: ST_TO_ADDR
// if GetClass ( i ) = 15 then
12128: LD_VAR 0 6
12132: PPUSH
12133: CALL_OW 257
12137: PUSH
12138: LD_INT 15
12140: EQUAL
12141: IFFALSE 12162
// points := [ 10 , 5 , 3 ] ;
12143: LD_ADDR_VAR 0 9
12147: PUSH
12148: LD_INT 10
12150: PUSH
12151: LD_INT 5
12153: PUSH
12154: LD_INT 3
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: LIST
12161: ST_TO_ADDR
// if GetClass ( i ) = 14 then
12162: LD_VAR 0 6
12166: PPUSH
12167: CALL_OW 257
12171: PUSH
12172: LD_INT 14
12174: EQUAL
12175: IFFALSE 12196
// points := [ 10 , 0 , 0 ] ;
12177: LD_ADDR_VAR 0 9
12181: PUSH
12182: LD_INT 10
12184: PUSH
12185: LD_INT 0
12187: PUSH
12188: LD_INT 0
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: ST_TO_ADDR
// if GetClass ( i ) = 11 then
12196: LD_VAR 0 6
12200: PPUSH
12201: CALL_OW 257
12205: PUSH
12206: LD_INT 11
12208: EQUAL
12209: IFFALSE 12230
// points := [ 30 , 10 , 5 ] ;
12211: LD_ADDR_VAR 0 9
12215: PUSH
12216: LD_INT 30
12218: PUSH
12219: LD_INT 10
12221: PUSH
12222: LD_INT 5
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
12230: LD_VAR 0 1
12234: PPUSH
12235: LD_INT 5
12237: PPUSH
12238: CALL_OW 321
12242: PUSH
12243: LD_INT 2
12245: EQUAL
12246: IFFALSE 12263
// bpoints := bpoints * 1.8 ;
12248: LD_ADDR_VAR 0 10
12252: PUSH
12253: LD_VAR 0 10
12257: PUSH
12258: LD_REAL  1.80000000000000E+0000
12261: MUL
12262: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
12263: LD_VAR 0 6
12267: PPUSH
12268: CALL_OW 257
12272: PUSH
12273: LD_INT 1
12275: PUSH
12276: LD_INT 2
12278: PUSH
12279: LD_INT 3
12281: PUSH
12282: LD_INT 4
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: IN
12291: PUSH
12292: LD_VAR 0 1
12296: PPUSH
12297: LD_INT 51
12299: PPUSH
12300: CALL_OW 321
12304: PUSH
12305: LD_INT 2
12307: EQUAL
12308: AND
12309: IFFALSE 12326
// bpoints := bpoints * 1.2 ;
12311: LD_ADDR_VAR 0 10
12315: PUSH
12316: LD_VAR 0 10
12320: PUSH
12321: LD_REAL  1.20000000000000E+0000
12324: MUL
12325: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
12326: LD_VAR 0 6
12330: PPUSH
12331: CALL_OW 257
12335: PUSH
12336: LD_INT 5
12338: PUSH
12339: LD_INT 7
12341: PUSH
12342: LD_INT 9
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: IN
12350: PUSH
12351: LD_VAR 0 1
12355: PPUSH
12356: LD_INT 52
12358: PPUSH
12359: CALL_OW 321
12363: PUSH
12364: LD_INT 2
12366: EQUAL
12367: AND
12368: IFFALSE 12385
// bpoints := bpoints * 1.5 ;
12370: LD_ADDR_VAR 0 10
12374: PUSH
12375: LD_VAR 0 10
12379: PUSH
12380: LD_REAL  1.50000000000000E+0000
12383: MUL
12384: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
12385: LD_VAR 0 1
12389: PPUSH
12390: LD_INT 66
12392: PPUSH
12393: CALL_OW 321
12397: PUSH
12398: LD_INT 2
12400: EQUAL
12401: IFFALSE 12418
// bpoints := bpoints * 1.1 ;
12403: LD_ADDR_VAR 0 10
12407: PUSH
12408: LD_VAR 0 10
12412: PUSH
12413: LD_REAL  1.10000000000000E+0000
12416: MUL
12417: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
12418: LD_ADDR_VAR 0 10
12422: PUSH
12423: LD_VAR 0 10
12427: PUSH
12428: LD_VAR 0 6
12432: PPUSH
12433: LD_INT 1
12435: PPUSH
12436: CALL_OW 259
12440: PUSH
12441: LD_REAL  1.15000000000000E+0000
12444: MUL
12445: MUL
12446: ST_TO_ADDR
// end ; unit_vehicle :
12447: GO 13271
12449: LD_INT 2
12451: DOUBLE
12452: EQUAL
12453: IFTRUE 12457
12455: GO 13259
12457: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
12458: LD_VAR 0 6
12462: PPUSH
12463: CALL_OW 264
12467: PUSH
12468: LD_INT 2
12470: PUSH
12471: LD_INT 42
12473: PUSH
12474: LD_INT 24
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: IN
12482: IFFALSE 12503
// points := [ 25 , 5 , 3 ] ;
12484: LD_ADDR_VAR 0 9
12488: PUSH
12489: LD_INT 25
12491: PUSH
12492: LD_INT 5
12494: PUSH
12495: LD_INT 3
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: LIST
12502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
12503: LD_VAR 0 6
12507: PPUSH
12508: CALL_OW 264
12512: PUSH
12513: LD_INT 4
12515: PUSH
12516: LD_INT 43
12518: PUSH
12519: LD_INT 25
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: LIST
12526: IN
12527: IFFALSE 12548
// points := [ 40 , 15 , 5 ] ;
12529: LD_ADDR_VAR 0 9
12533: PUSH
12534: LD_INT 40
12536: PUSH
12537: LD_INT 15
12539: PUSH
12540: LD_INT 5
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
12548: LD_VAR 0 6
12552: PPUSH
12553: CALL_OW 264
12557: PUSH
12558: LD_INT 3
12560: PUSH
12561: LD_INT 23
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: IN
12568: IFFALSE 12589
// points := [ 7 , 25 , 8 ] ;
12570: LD_ADDR_VAR 0 9
12574: PUSH
12575: LD_INT 7
12577: PUSH
12578: LD_INT 25
12580: PUSH
12581: LD_INT 8
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: LIST
12588: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
12589: LD_VAR 0 6
12593: PPUSH
12594: CALL_OW 264
12598: PUSH
12599: LD_INT 5
12601: PUSH
12602: LD_INT 27
12604: PUSH
12605: LD_INT 44
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: IN
12613: IFFALSE 12634
// points := [ 14 , 50 , 16 ] ;
12615: LD_ADDR_VAR 0 9
12619: PUSH
12620: LD_INT 14
12622: PUSH
12623: LD_INT 50
12625: PUSH
12626: LD_INT 16
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: LIST
12633: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
12634: LD_VAR 0 6
12638: PPUSH
12639: CALL_OW 264
12643: PUSH
12644: LD_INT 6
12646: PUSH
12647: LD_INT 46
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: IN
12654: IFFALSE 12675
// points := [ 32 , 120 , 70 ] ;
12656: LD_ADDR_VAR 0 9
12660: PUSH
12661: LD_INT 32
12663: PUSH
12664: LD_INT 120
12666: PUSH
12667: LD_INT 70
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: LIST
12674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
12675: LD_VAR 0 6
12679: PPUSH
12680: CALL_OW 264
12684: PUSH
12685: LD_INT 7
12687: PUSH
12688: LD_INT 28
12690: PUSH
12691: LD_INT 45
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: IN
12699: IFFALSE 12720
// points := [ 35 , 20 , 45 ] ;
12701: LD_ADDR_VAR 0 9
12705: PUSH
12706: LD_INT 35
12708: PUSH
12709: LD_INT 20
12711: PUSH
12712: LD_INT 45
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: LIST
12719: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
12720: LD_VAR 0 6
12724: PPUSH
12725: CALL_OW 264
12729: PUSH
12730: LD_INT 47
12732: PUSH
12733: EMPTY
12734: LIST
12735: IN
12736: IFFALSE 12757
// points := [ 67 , 45 , 75 ] ;
12738: LD_ADDR_VAR 0 9
12742: PUSH
12743: LD_INT 67
12745: PUSH
12746: LD_INT 45
12748: PUSH
12749: LD_INT 75
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: LIST
12756: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
12757: LD_VAR 0 6
12761: PPUSH
12762: CALL_OW 264
12766: PUSH
12767: LD_INT 26
12769: PUSH
12770: EMPTY
12771: LIST
12772: IN
12773: IFFALSE 12794
// points := [ 120 , 30 , 80 ] ;
12775: LD_ADDR_VAR 0 9
12779: PUSH
12780: LD_INT 120
12782: PUSH
12783: LD_INT 30
12785: PUSH
12786: LD_INT 80
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: LIST
12793: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
12794: LD_VAR 0 6
12798: PPUSH
12799: CALL_OW 264
12803: PUSH
12804: LD_INT 22
12806: PUSH
12807: EMPTY
12808: LIST
12809: IN
12810: IFFALSE 12831
// points := [ 40 , 1 , 1 ] ;
12812: LD_ADDR_VAR 0 9
12816: PUSH
12817: LD_INT 40
12819: PUSH
12820: LD_INT 1
12822: PUSH
12823: LD_INT 1
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: LIST
12830: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
12831: LD_VAR 0 6
12835: PPUSH
12836: CALL_OW 264
12840: PUSH
12841: LD_INT 29
12843: PUSH
12844: EMPTY
12845: LIST
12846: IN
12847: IFFALSE 12868
// points := [ 70 , 200 , 400 ] ;
12849: LD_ADDR_VAR 0 9
12853: PUSH
12854: LD_INT 70
12856: PUSH
12857: LD_INT 200
12859: PUSH
12860: LD_INT 400
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: LIST
12867: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
12868: LD_VAR 0 6
12872: PPUSH
12873: CALL_OW 264
12877: PUSH
12878: LD_INT 14
12880: PUSH
12881: LD_INT 53
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: IN
12888: IFFALSE 12909
// points := [ 40 , 10 , 20 ] ;
12890: LD_ADDR_VAR 0 9
12894: PUSH
12895: LD_INT 40
12897: PUSH
12898: LD_INT 10
12900: PUSH
12901: LD_INT 20
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: LIST
12908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
12909: LD_VAR 0 6
12913: PPUSH
12914: CALL_OW 264
12918: PUSH
12919: LD_INT 9
12921: PUSH
12922: EMPTY
12923: LIST
12924: IN
12925: IFFALSE 12946
// points := [ 5 , 70 , 20 ] ;
12927: LD_ADDR_VAR 0 9
12931: PUSH
12932: LD_INT 5
12934: PUSH
12935: LD_INT 70
12937: PUSH
12938: LD_INT 20
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: LIST
12945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
12946: LD_VAR 0 6
12950: PPUSH
12951: CALL_OW 264
12955: PUSH
12956: LD_INT 10
12958: PUSH
12959: EMPTY
12960: LIST
12961: IN
12962: IFFALSE 12983
// points := [ 35 , 110 , 70 ] ;
12964: LD_ADDR_VAR 0 9
12968: PUSH
12969: LD_INT 35
12971: PUSH
12972: LD_INT 110
12974: PUSH
12975: LD_INT 70
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: LIST
12982: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
12983: LD_VAR 0 6
12987: PPUSH
12988: CALL_OW 265
12992: PUSH
12993: LD_INT 25
12995: EQUAL
12996: IFFALSE 13017
// points := [ 80 , 65 , 100 ] ;
12998: LD_ADDR_VAR 0 9
13002: PUSH
13003: LD_INT 80
13005: PUSH
13006: LD_INT 65
13008: PUSH
13009: LD_INT 100
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: LIST
13016: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
13017: LD_VAR 0 6
13021: PPUSH
13022: CALL_OW 263
13026: PUSH
13027: LD_INT 1
13029: EQUAL
13030: IFFALSE 13065
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
13032: LD_ADDR_VAR 0 10
13036: PUSH
13037: LD_VAR 0 10
13041: PUSH
13042: LD_VAR 0 6
13046: PPUSH
13047: CALL_OW 311
13051: PPUSH
13052: LD_INT 3
13054: PPUSH
13055: CALL_OW 259
13059: PUSH
13060: LD_INT 4
13062: MUL
13063: MUL
13064: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
13065: LD_VAR 0 6
13069: PPUSH
13070: CALL_OW 263
13074: PUSH
13075: LD_INT 2
13077: EQUAL
13078: IFFALSE 13129
// begin j := IsControledBy ( i ) ;
13080: LD_ADDR_VAR 0 7
13084: PUSH
13085: LD_VAR 0 6
13089: PPUSH
13090: CALL_OW 312
13094: ST_TO_ADDR
// if j then
13095: LD_VAR 0 7
13099: IFFALSE 13129
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
13101: LD_ADDR_VAR 0 10
13105: PUSH
13106: LD_VAR 0 10
13110: PUSH
13111: LD_VAR 0 7
13115: PPUSH
13116: LD_INT 3
13118: PPUSH
13119: CALL_OW 259
13123: PUSH
13124: LD_INT 3
13126: MUL
13127: MUL
13128: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
13129: LD_VAR 0 6
13133: PPUSH
13134: CALL_OW 264
13138: PUSH
13139: LD_INT 5
13141: PUSH
13142: LD_INT 6
13144: PUSH
13145: LD_INT 46
13147: PUSH
13148: LD_INT 44
13150: PUSH
13151: LD_INT 47
13153: PUSH
13154: LD_INT 45
13156: PUSH
13157: LD_INT 28
13159: PUSH
13160: LD_INT 7
13162: PUSH
13163: LD_INT 27
13165: PUSH
13166: LD_INT 29
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: IN
13181: PUSH
13182: LD_VAR 0 1
13186: PPUSH
13187: LD_INT 52
13189: PPUSH
13190: CALL_OW 321
13194: PUSH
13195: LD_INT 2
13197: EQUAL
13198: AND
13199: IFFALSE 13216
// bpoints := bpoints * 1.2 ;
13201: LD_ADDR_VAR 0 10
13205: PUSH
13206: LD_VAR 0 10
13210: PUSH
13211: LD_REAL  1.20000000000000E+0000
13214: MUL
13215: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
13216: LD_VAR 0 6
13220: PPUSH
13221: CALL_OW 264
13225: PUSH
13226: LD_INT 6
13228: PUSH
13229: LD_INT 46
13231: PUSH
13232: LD_INT 47
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: LIST
13239: IN
13240: IFFALSE 13257
// bpoints := bpoints * 1.2 ;
13242: LD_ADDR_VAR 0 10
13246: PUSH
13247: LD_VAR 0 10
13251: PUSH
13252: LD_REAL  1.20000000000000E+0000
13255: MUL
13256: ST_TO_ADDR
// end ; unit_building :
13257: GO 13271
13259: LD_INT 3
13261: DOUBLE
13262: EQUAL
13263: IFTRUE 13267
13265: GO 13270
13267: POP
// ; end ;
13268: GO 13271
13270: POP
// for j = 1 to 3 do
13271: LD_ADDR_VAR 0 7
13275: PUSH
13276: DOUBLE
13277: LD_INT 1
13279: DEC
13280: ST_TO_ADDR
13281: LD_INT 3
13283: PUSH
13284: FOR_TO
13285: IFFALSE 13338
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
13287: LD_ADDR_VAR 0 5
13291: PUSH
13292: LD_VAR 0 5
13296: PPUSH
13297: LD_VAR 0 7
13301: PPUSH
13302: LD_VAR 0 5
13306: PUSH
13307: LD_VAR 0 7
13311: ARRAY
13312: PUSH
13313: LD_VAR 0 9
13317: PUSH
13318: LD_VAR 0 7
13322: ARRAY
13323: PUSH
13324: LD_VAR 0 10
13328: MUL
13329: PLUS
13330: PPUSH
13331: CALL_OW 1
13335: ST_TO_ADDR
13336: GO 13284
13338: POP
13339: POP
// end ;
13340: GO 11823
13342: POP
13343: POP
// result := Replace ( result , 4 , tmp ) ;
13344: LD_ADDR_VAR 0 5
13348: PUSH
13349: LD_VAR 0 5
13353: PPUSH
13354: LD_INT 4
13356: PPUSH
13357: LD_VAR 0 8
13361: PPUSH
13362: CALL_OW 1
13366: ST_TO_ADDR
// end ;
13367: LD_VAR 0 5
13371: RET
// export function DangerAtRange ( unit , range ) ; begin
13372: LD_INT 0
13374: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
13375: LD_ADDR_VAR 0 3
13379: PUSH
13380: LD_VAR 0 1
13384: PPUSH
13385: CALL_OW 255
13389: PPUSH
13390: LD_VAR 0 1
13394: PPUSH
13395: CALL_OW 250
13399: PPUSH
13400: LD_VAR 0 1
13404: PPUSH
13405: CALL_OW 251
13409: PPUSH
13410: LD_VAR 0 2
13414: PPUSH
13415: CALL 11675 0 4
13419: ST_TO_ADDR
// end ;
13420: LD_VAR 0 3
13424: RET
// export function IsExtension ( b ) ; begin
13425: LD_INT 0
13427: PPUSH
// result := false ;
13428: LD_ADDR_VAR 0 2
13432: PUSH
13433: LD_INT 0
13435: ST_TO_ADDR
// if GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] then
13436: LD_VAR 0 1
13440: PPUSH
13441: CALL_OW 266
13445: PUSH
13446: LD_INT 23
13448: PUSH
13449: LD_INT 20
13451: PUSH
13452: LD_INT 22
13454: PUSH
13455: LD_INT 17
13457: PUSH
13458: LD_INT 24
13460: PUSH
13461: LD_INT 21
13463: PUSH
13464: LD_INT 19
13466: PUSH
13467: LD_INT 16
13469: PUSH
13470: LD_INT 25
13472: PUSH
13473: LD_INT 18
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: IN
13488: IFFALSE 13498
// result := true ;
13490: LD_ADDR_VAR 0 2
13494: PUSH
13495: LD_INT 1
13497: ST_TO_ADDR
// end ;
13498: LD_VAR 0 2
13502: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
13503: LD_INT 0
13505: PPUSH
13506: PPUSH
13507: PPUSH
// result := [ ] ;
13508: LD_ADDR_VAR 0 2
13512: PUSH
13513: EMPTY
13514: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
13515: LD_ADDR_VAR 0 3
13519: PUSH
13520: LD_INT 21
13522: PUSH
13523: LD_INT 3
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PPUSH
13530: CALL_OW 69
13534: ST_TO_ADDR
// if not tmp then
13535: LD_VAR 0 3
13539: NOT
13540: IFFALSE 13544
// exit ;
13542: GO 13594
// for i in tmp do
13544: LD_ADDR_VAR 0 4
13548: PUSH
13549: LD_VAR 0 3
13553: PUSH
13554: FOR_IN
13555: IFFALSE 13592
// if GetBase ( i ) = base then
13557: LD_VAR 0 4
13561: PPUSH
13562: CALL_OW 274
13566: PUSH
13567: LD_VAR 0 1
13571: EQUAL
13572: IFFALSE 13590
// result := result ^ i ;
13574: LD_ADDR_VAR 0 2
13578: PUSH
13579: LD_VAR 0 2
13583: PUSH
13584: LD_VAR 0 4
13588: ADD
13589: ST_TO_ADDR
13590: GO 13554
13592: POP
13593: POP
// end ;
13594: LD_VAR 0 2
13598: RET
// export function ComComplete ( unit , b ) ; var i ; begin
13599: LD_INT 0
13601: PPUSH
13602: PPUSH
// if BuildingStatus ( b ) = bs_build then
13603: LD_VAR 0 2
13607: PPUSH
13608: CALL_OW 461
13612: PUSH
13613: LD_INT 1
13615: EQUAL
13616: IFFALSE 13676
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
13618: LD_VAR 0 1
13622: PPUSH
13623: LD_STRING h
13625: PUSH
13626: LD_VAR 0 2
13630: PPUSH
13631: CALL_OW 250
13635: PUSH
13636: LD_VAR 0 2
13640: PPUSH
13641: CALL_OW 251
13645: PUSH
13646: LD_VAR 0 2
13650: PUSH
13651: LD_INT 0
13653: PUSH
13654: LD_INT 0
13656: PUSH
13657: LD_INT 0
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: PPUSH
13672: CALL_OW 446
// end ;
13676: LD_VAR 0 3
13680: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13681: LD_INT 0
13683: PPUSH
13684: PPUSH
13685: PPUSH
13686: PPUSH
13687: PPUSH
13688: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
13689: LD_VAR 0 1
13693: NOT
13694: PUSH
13695: LD_VAR 0 1
13699: PPUSH
13700: CALL_OW 263
13704: PUSH
13705: LD_INT 2
13707: EQUAL
13708: NOT
13709: OR
13710: IFFALSE 13714
// exit ;
13712: GO 14030
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13714: LD_ADDR_VAR 0 6
13718: PUSH
13719: LD_INT 22
13721: PUSH
13722: LD_VAR 0 1
13726: PPUSH
13727: CALL_OW 255
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 2
13738: PUSH
13739: LD_INT 30
13741: PUSH
13742: LD_INT 36
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: LD_INT 34
13751: PUSH
13752: LD_INT 31
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PPUSH
13768: CALL_OW 69
13772: ST_TO_ADDR
// if not tmp then
13773: LD_VAR 0 6
13777: NOT
13778: IFFALSE 13782
// exit ;
13780: GO 14030
// result := [ ] ;
13782: LD_ADDR_VAR 0 2
13786: PUSH
13787: EMPTY
13788: ST_TO_ADDR
// for i in tmp do
13789: LD_ADDR_VAR 0 3
13793: PUSH
13794: LD_VAR 0 6
13798: PUSH
13799: FOR_IN
13800: IFFALSE 13871
// begin t := UnitsInside ( i ) ;
13802: LD_ADDR_VAR 0 4
13806: PUSH
13807: LD_VAR 0 3
13811: PPUSH
13812: CALL_OW 313
13816: ST_TO_ADDR
// if t then
13817: LD_VAR 0 4
13821: IFFALSE 13869
// for j in t do
13823: LD_ADDR_VAR 0 7
13827: PUSH
13828: LD_VAR 0 4
13832: PUSH
13833: FOR_IN
13834: IFFALSE 13867
// result := Insert ( result , result + 1 , j ) ;
13836: LD_ADDR_VAR 0 2
13840: PUSH
13841: LD_VAR 0 2
13845: PPUSH
13846: LD_VAR 0 2
13850: PUSH
13851: LD_INT 1
13853: PLUS
13854: PPUSH
13855: LD_VAR 0 7
13859: PPUSH
13860: CALL_OW 2
13864: ST_TO_ADDR
13865: GO 13833
13867: POP
13868: POP
// end ;
13869: GO 13799
13871: POP
13872: POP
// if not result then
13873: LD_VAR 0 2
13877: NOT
13878: IFFALSE 13882
// exit ;
13880: GO 14030
// mech := result [ 1 ] ;
13882: LD_ADDR_VAR 0 5
13886: PUSH
13887: LD_VAR 0 2
13891: PUSH
13892: LD_INT 1
13894: ARRAY
13895: ST_TO_ADDR
// if result > 1 then
13896: LD_VAR 0 2
13900: PUSH
13901: LD_INT 1
13903: GREATER
13904: IFFALSE 14016
// for i = 2 to result do
13906: LD_ADDR_VAR 0 3
13910: PUSH
13911: DOUBLE
13912: LD_INT 2
13914: DEC
13915: ST_TO_ADDR
13916: LD_VAR 0 2
13920: PUSH
13921: FOR_TO
13922: IFFALSE 14014
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13924: LD_ADDR_VAR 0 4
13928: PUSH
13929: LD_VAR 0 2
13933: PUSH
13934: LD_VAR 0 3
13938: ARRAY
13939: PPUSH
13940: LD_INT 3
13942: PPUSH
13943: CALL_OW 259
13947: PUSH
13948: LD_VAR 0 2
13952: PUSH
13953: LD_VAR 0 3
13957: ARRAY
13958: PPUSH
13959: CALL_OW 432
13963: MINUS
13964: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13965: LD_VAR 0 4
13969: PUSH
13970: LD_VAR 0 5
13974: PPUSH
13975: LD_INT 3
13977: PPUSH
13978: CALL_OW 259
13982: PUSH
13983: LD_VAR 0 5
13987: PPUSH
13988: CALL_OW 432
13992: MINUS
13993: GREATEREQUAL
13994: IFFALSE 14012
// mech := result [ i ] ;
13996: LD_ADDR_VAR 0 5
14000: PUSH
14001: LD_VAR 0 2
14005: PUSH
14006: LD_VAR 0 3
14010: ARRAY
14011: ST_TO_ADDR
// end ;
14012: GO 13921
14014: POP
14015: POP
// ComLinkTo ( vehicle , mech ) ;
14016: LD_VAR 0 1
14020: PPUSH
14021: LD_VAR 0 5
14025: PPUSH
14026: CALL_OW 135
// end ;
14030: LD_VAR 0 2
14034: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
14035: LD_INT 0
14037: PPUSH
14038: PPUSH
14039: PPUSH
14040: PPUSH
14041: PPUSH
14042: PPUSH
14043: PPUSH
14044: PPUSH
14045: PPUSH
14046: PPUSH
14047: PPUSH
14048: PPUSH
// result := [ ] ;
14049: LD_ADDR_VAR 0 6
14053: PUSH
14054: EMPTY
14055: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
14056: LD_VAR 0 1
14060: PPUSH
14061: CALL_OW 266
14065: PUSH
14066: LD_INT 0
14068: PUSH
14069: LD_INT 1
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: IN
14076: NOT
14077: IFFALSE 14081
// exit ;
14079: GO 15382
// if name then
14081: LD_VAR 0 2
14085: IFFALSE 14101
// SetBName ( base_dep , name ) ;
14087: LD_VAR 0 1
14091: PPUSH
14092: LD_VAR 0 2
14096: PPUSH
14097: CALL_OW 500
// base := GetBase ( base_dep ) ;
14101: LD_ADDR_VAR 0 14
14105: PUSH
14106: LD_VAR 0 1
14110: PPUSH
14111: CALL_OW 274
14115: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
14116: LD_ADDR_VAR 0 15
14120: PUSH
14121: LD_VAR 0 1
14125: PPUSH
14126: CALL_OW 255
14130: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
14131: LD_ADDR_VAR 0 16
14135: PUSH
14136: LD_VAR 0 1
14140: PPUSH
14141: CALL_OW 248
14145: ST_TO_ADDR
// if sources then
14146: LD_VAR 0 4
14150: IFFALSE 14197
// for i = 1 to 3 do
14152: LD_ADDR_VAR 0 7
14156: PUSH
14157: DOUBLE
14158: LD_INT 1
14160: DEC
14161: ST_TO_ADDR
14162: LD_INT 3
14164: PUSH
14165: FOR_TO
14166: IFFALSE 14195
// AddResourceType ( base , i , sources [ i ] ) ;
14168: LD_VAR 0 14
14172: PPUSH
14173: LD_VAR 0 7
14177: PPUSH
14178: LD_VAR 0 4
14182: PUSH
14183: LD_VAR 0 7
14187: ARRAY
14188: PPUSH
14189: CALL_OW 276
14193: GO 14165
14195: POP
14196: POP
// buildings := GetBaseBuildings ( base ) ;
14197: LD_ADDR_VAR 0 17
14201: PUSH
14202: LD_VAR 0 14
14206: PPUSH
14207: CALL 13503 0 1
14211: ST_TO_ADDR
// InitHc ;
14212: CALL_OW 19
// InitUc ;
14216: CALL_OW 18
// uc_side := side ;
14220: LD_ADDR_OWVAR 20
14224: PUSH
14225: LD_VAR 0 15
14229: ST_TO_ADDR
// uc_nation := nation ;
14230: LD_ADDR_OWVAR 21
14234: PUSH
14235: LD_VAR 0 16
14239: ST_TO_ADDR
// if buildings then
14240: LD_VAR 0 17
14244: IFFALSE 15241
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
14246: LD_VAR 0 17
14250: PPUSH
14251: LD_INT 2
14253: PUSH
14254: LD_INT 30
14256: PUSH
14257: LD_INT 32
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: LD_INT 30
14266: PUSH
14267: LD_INT 33
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: PPUSH
14279: CALL_OW 72
14283: IFFALSE 14366
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
14285: LD_ADDR_VAR 0 7
14289: PUSH
14290: LD_VAR 0 17
14294: PPUSH
14295: LD_INT 2
14297: PUSH
14298: LD_INT 30
14300: PUSH
14301: LD_INT 32
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 30
14310: PUSH
14311: LD_INT 33
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 72
14327: PUSH
14328: FOR_IN
14329: IFFALSE 14364
// begin if not GetBWeapon ( i ) then
14331: LD_VAR 0 7
14335: PPUSH
14336: CALL_OW 269
14340: NOT
14341: IFFALSE 14362
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
14343: LD_VAR 0 7
14347: PPUSH
14348: LD_VAR 0 7
14352: PPUSH
14353: CALL 15387 0 1
14357: PPUSH
14358: CALL_OW 431
// end ;
14362: GO 14328
14364: POP
14365: POP
// end ; for i = 1 to personel do
14366: LD_ADDR_VAR 0 7
14370: PUSH
14371: DOUBLE
14372: LD_INT 1
14374: DEC
14375: ST_TO_ADDR
14376: LD_VAR 0 5
14380: PUSH
14381: FOR_TO
14382: IFFALSE 15221
// begin if i > 4 then
14384: LD_VAR 0 7
14388: PUSH
14389: LD_INT 4
14391: GREATER
14392: IFFALSE 14396
// break ;
14394: GO 15221
// case i of 1 :
14396: LD_VAR 0 7
14400: PUSH
14401: LD_INT 1
14403: DOUBLE
14404: EQUAL
14405: IFTRUE 14409
14407: GO 14482
14409: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
14410: LD_ADDR_VAR 0 11
14414: PUSH
14415: LD_VAR 0 17
14419: PPUSH
14420: LD_INT 22
14422: PUSH
14423: LD_VAR 0 15
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 2
14434: PUSH
14435: LD_INT 30
14437: PUSH
14438: LD_INT 32
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 30
14447: PUSH
14448: LD_INT 4
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 30
14457: PUSH
14458: LD_INT 5
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 72
14479: ST_TO_ADDR
14480: GO 14704
14482: LD_INT 2
14484: DOUBLE
14485: EQUAL
14486: IFTRUE 14490
14488: GO 14552
14490: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
14491: LD_ADDR_VAR 0 11
14495: PUSH
14496: LD_VAR 0 17
14500: PPUSH
14501: LD_INT 22
14503: PUSH
14504: LD_VAR 0 15
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 2
14515: PUSH
14516: LD_INT 30
14518: PUSH
14519: LD_INT 0
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: LD_INT 30
14528: PUSH
14529: LD_INT 1
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: LIST
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PPUSH
14545: CALL_OW 72
14549: ST_TO_ADDR
14550: GO 14704
14552: LD_INT 3
14554: DOUBLE
14555: EQUAL
14556: IFTRUE 14560
14558: GO 14622
14560: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
14561: LD_ADDR_VAR 0 11
14565: PUSH
14566: LD_VAR 0 17
14570: PPUSH
14571: LD_INT 22
14573: PUSH
14574: LD_VAR 0 15
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: LD_INT 30
14588: PUSH
14589: LD_INT 2
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 30
14598: PUSH
14599: LD_INT 3
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: LIST
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PPUSH
14615: CALL_OW 72
14619: ST_TO_ADDR
14620: GO 14704
14622: LD_INT 4
14624: DOUBLE
14625: EQUAL
14626: IFTRUE 14630
14628: GO 14703
14630: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
14631: LD_ADDR_VAR 0 11
14635: PUSH
14636: LD_VAR 0 17
14640: PPUSH
14641: LD_INT 22
14643: PUSH
14644: LD_VAR 0 15
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 2
14655: PUSH
14656: LD_INT 30
14658: PUSH
14659: LD_INT 6
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: PUSH
14666: LD_INT 30
14668: PUSH
14669: LD_INT 7
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 30
14678: PUSH
14679: LD_INT 8
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PPUSH
14696: CALL_OW 72
14700: ST_TO_ADDR
14701: GO 14704
14703: POP
// if not f then
14704: LD_VAR 0 11
14708: NOT
14709: IFFALSE 14713
// continue ;
14711: GO 14381
// x := personel [ i ] ;
14713: LD_ADDR_VAR 0 12
14717: PUSH
14718: LD_VAR 0 5
14722: PUSH
14723: LD_VAR 0 7
14727: ARRAY
14728: ST_TO_ADDR
// if x = - 1 then
14729: LD_VAR 0 12
14733: PUSH
14734: LD_INT 1
14736: NEG
14737: EQUAL
14738: IFFALSE 14947
// begin for j in f do
14740: LD_ADDR_VAR 0 8
14744: PUSH
14745: LD_VAR 0 11
14749: PUSH
14750: FOR_IN
14751: IFFALSE 14943
// repeat InitHc ;
14753: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14757: LD_VAR 0 8
14761: PPUSH
14762: CALL_OW 266
14766: PUSH
14767: LD_INT 5
14769: EQUAL
14770: IFFALSE 14840
// begin if UnitsInside ( j ) < 3 then
14772: LD_VAR 0 8
14776: PPUSH
14777: CALL_OW 313
14781: PUSH
14782: LD_INT 3
14784: LESS
14785: IFFALSE 14821
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14787: LD_INT 0
14789: PPUSH
14790: LD_INT 5
14792: PUSH
14793: LD_INT 8
14795: PUSH
14796: LD_INT 9
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: LIST
14803: PUSH
14804: LD_VAR 0 16
14808: ARRAY
14809: PPUSH
14810: LD_VAR 0 3
14814: PPUSH
14815: CALL_OW 380
14819: GO 14838
// PrepareHuman ( false , i , skill ) ;
14821: LD_INT 0
14823: PPUSH
14824: LD_VAR 0 7
14828: PPUSH
14829: LD_VAR 0 3
14833: PPUSH
14834: CALL_OW 380
// end else
14838: GO 14857
// PrepareHuman ( false , i , skill ) ;
14840: LD_INT 0
14842: PPUSH
14843: LD_VAR 0 7
14847: PPUSH
14848: LD_VAR 0 3
14852: PPUSH
14853: CALL_OW 380
// un := CreateHuman ;
14857: LD_ADDR_VAR 0 13
14861: PUSH
14862: CALL_OW 44
14866: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14867: LD_ADDR_VAR 0 6
14871: PUSH
14872: LD_VAR 0 6
14876: PPUSH
14877: LD_INT 1
14879: PPUSH
14880: LD_VAR 0 13
14884: PPUSH
14885: CALL_OW 2
14889: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14890: LD_VAR 0 13
14894: PPUSH
14895: LD_VAR 0 8
14899: PPUSH
14900: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14904: LD_VAR 0 8
14908: PPUSH
14909: CALL_OW 313
14913: PUSH
14914: LD_INT 6
14916: EQUAL
14917: PUSH
14918: LD_VAR 0 8
14922: PPUSH
14923: CALL_OW 266
14927: PUSH
14928: LD_INT 32
14930: PUSH
14931: LD_INT 31
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: IN
14938: OR
14939: IFFALSE 14753
14941: GO 14750
14943: POP
14944: POP
// end else
14945: GO 15219
// for j = 1 to x do
14947: LD_ADDR_VAR 0 8
14951: PUSH
14952: DOUBLE
14953: LD_INT 1
14955: DEC
14956: ST_TO_ADDR
14957: LD_VAR 0 12
14961: PUSH
14962: FOR_TO
14963: IFFALSE 15217
// begin InitHc ;
14965: CALL_OW 19
// if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14969: LD_VAR 0 11
14973: PUSH
14974: LD_INT 1
14976: ARRAY
14977: PPUSH
14978: CALL_OW 313
14982: PUSH
14983: LD_VAR 0 11
14987: PUSH
14988: LD_INT 1
14990: ARRAY
14991: PPUSH
14992: CALL_OW 266
14996: PUSH
14997: LD_INT 32
14999: PUSH
15000: LD_INT 31
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: IN
15007: AND
15008: PUSH
15009: LD_VAR 0 11
15013: PUSH
15014: LD_INT 1
15016: ARRAY
15017: PPUSH
15018: CALL_OW 313
15022: PUSH
15023: LD_INT 6
15025: EQUAL
15026: OR
15027: IFFALSE 15047
// f := Delete ( f , 1 ) ;
15029: LD_ADDR_VAR 0 11
15033: PUSH
15034: LD_VAR 0 11
15038: PPUSH
15039: LD_INT 1
15041: PPUSH
15042: CALL_OW 3
15046: ST_TO_ADDR
// if not f then
15047: LD_VAR 0 11
15051: NOT
15052: IFFALSE 15056
// break ;
15054: GO 15217
// if GetBType ( f [ 1 ] ) = b_barracks then
15056: LD_VAR 0 11
15060: PUSH
15061: LD_INT 1
15063: ARRAY
15064: PPUSH
15065: CALL_OW 266
15069: PUSH
15070: LD_INT 5
15072: EQUAL
15073: IFFALSE 15147
// begin if UnitsInside ( f [ 1 ] ) < 3 then
15075: LD_VAR 0 11
15079: PUSH
15080: LD_INT 1
15082: ARRAY
15083: PPUSH
15084: CALL_OW 313
15088: PUSH
15089: LD_INT 3
15091: LESS
15092: IFFALSE 15128
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
15094: LD_INT 0
15096: PPUSH
15097: LD_INT 5
15099: PUSH
15100: LD_INT 8
15102: PUSH
15103: LD_INT 9
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: LIST
15110: PUSH
15111: LD_VAR 0 16
15115: ARRAY
15116: PPUSH
15117: LD_VAR 0 3
15121: PPUSH
15122: CALL_OW 380
15126: GO 15145
// PrepareHuman ( false , i , skill ) ;
15128: LD_INT 0
15130: PPUSH
15131: LD_VAR 0 7
15135: PPUSH
15136: LD_VAR 0 3
15140: PPUSH
15141: CALL_OW 380
// end else
15145: GO 15164
// PrepareHuman ( false , i , skill ) ;
15147: LD_INT 0
15149: PPUSH
15150: LD_VAR 0 7
15154: PPUSH
15155: LD_VAR 0 3
15159: PPUSH
15160: CALL_OW 380
// un := CreateHuman ;
15164: LD_ADDR_VAR 0 13
15168: PUSH
15169: CALL_OW 44
15173: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15174: LD_ADDR_VAR 0 6
15178: PUSH
15179: LD_VAR 0 6
15183: PPUSH
15184: LD_INT 1
15186: PPUSH
15187: LD_VAR 0 13
15191: PPUSH
15192: CALL_OW 2
15196: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
15197: LD_VAR 0 13
15201: PPUSH
15202: LD_VAR 0 11
15206: PUSH
15207: LD_INT 1
15209: ARRAY
15210: PPUSH
15211: CALL_OW 52
// end ;
15215: GO 14962
15217: POP
15218: POP
// end ;
15219: GO 14381
15221: POP
15222: POP
// result := result ^ buildings ;
15223: LD_ADDR_VAR 0 6
15227: PUSH
15228: LD_VAR 0 6
15232: PUSH
15233: LD_VAR 0 17
15237: ADD
15238: ST_TO_ADDR
// end else
15239: GO 15382
// begin for i = 1 to personel do
15241: LD_ADDR_VAR 0 7
15245: PUSH
15246: DOUBLE
15247: LD_INT 1
15249: DEC
15250: ST_TO_ADDR
15251: LD_VAR 0 5
15255: PUSH
15256: FOR_TO
15257: IFFALSE 15380
// begin if i > 4 then
15259: LD_VAR 0 7
15263: PUSH
15264: LD_INT 4
15266: GREATER
15267: IFFALSE 15271
// break ;
15269: GO 15380
// x := personel [ i ] ;
15271: LD_ADDR_VAR 0 12
15275: PUSH
15276: LD_VAR 0 5
15280: PUSH
15281: LD_VAR 0 7
15285: ARRAY
15286: ST_TO_ADDR
// if x = - 1 then
15287: LD_VAR 0 12
15291: PUSH
15292: LD_INT 1
15294: NEG
15295: EQUAL
15296: IFFALSE 15300
// continue ;
15298: GO 15256
// PrepareHuman ( false , i , skill ) ;
15300: LD_INT 0
15302: PPUSH
15303: LD_VAR 0 7
15307: PPUSH
15308: LD_VAR 0 3
15312: PPUSH
15313: CALL_OW 380
// un := CreateHuman ;
15317: LD_ADDR_VAR 0 13
15321: PUSH
15322: CALL_OW 44
15326: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15327: LD_VAR 0 13
15331: PPUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 250
15341: PPUSH
15342: LD_VAR 0 1
15346: PPUSH
15347: CALL_OW 251
15351: PPUSH
15352: LD_INT 10
15354: PPUSH
15355: LD_INT 0
15357: PPUSH
15358: CALL_OW 50
// result := result ^ un ;
15362: LD_ADDR_VAR 0 6
15366: PUSH
15367: LD_VAR 0 6
15371: PUSH
15372: LD_VAR 0 13
15376: ADD
15377: ST_TO_ADDR
// end ;
15378: GO 15256
15380: POP
15381: POP
// end ; end ;
15382: LD_VAR 0 6
15386: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
15387: LD_INT 0
15389: PPUSH
15390: PPUSH
15391: PPUSH
15392: PPUSH
15393: PPUSH
15394: PPUSH
15395: PPUSH
15396: PPUSH
15397: PPUSH
15398: PPUSH
15399: PPUSH
15400: PPUSH
15401: PPUSH
15402: PPUSH
15403: PPUSH
15404: PPUSH
// result := false ;
15405: LD_ADDR_VAR 0 2
15409: PUSH
15410: LD_INT 0
15412: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
15413: LD_VAR 0 1
15417: NOT
15418: PUSH
15419: LD_VAR 0 1
15423: PPUSH
15424: CALL_OW 266
15428: PUSH
15429: LD_INT 32
15431: PUSH
15432: LD_INT 33
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: IN
15439: NOT
15440: OR
15441: IFFALSE 15445
// exit ;
15443: GO 16678
// nat := GetNation ( tower ) ;
15445: LD_ADDR_VAR 0 11
15449: PUSH
15450: LD_VAR 0 1
15454: PPUSH
15455: CALL_OW 248
15459: ST_TO_ADDR
// side := GetSide ( tower ) ;
15460: LD_ADDR_VAR 0 15
15464: PUSH
15465: LD_VAR 0 1
15469: PPUSH
15470: CALL_OW 255
15474: ST_TO_ADDR
// x := GetX ( tower ) ;
15475: LD_ADDR_VAR 0 9
15479: PUSH
15480: LD_VAR 0 1
15484: PPUSH
15485: CALL_OW 250
15489: ST_TO_ADDR
// y := GetY ( tower ) ;
15490: LD_ADDR_VAR 0 10
15494: PUSH
15495: LD_VAR 0 1
15499: PPUSH
15500: CALL_OW 251
15504: ST_TO_ADDR
// if not x or not y then
15505: LD_VAR 0 9
15509: NOT
15510: PUSH
15511: LD_VAR 0 10
15515: NOT
15516: OR
15517: IFFALSE 15521
// exit ;
15519: GO 16678
// weapon := 0 ;
15521: LD_ADDR_VAR 0 17
15525: PUSH
15526: LD_INT 0
15528: ST_TO_ADDR
// fac_list := [ ] ;
15529: LD_ADDR_VAR 0 16
15533: PUSH
15534: EMPTY
15535: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
15536: LD_ADDR_VAR 0 5
15540: PUSH
15541: LD_VAR 0 1
15545: PPUSH
15546: CALL_OW 274
15550: PPUSH
15551: CALL 13503 0 1
15555: PPUSH
15556: LD_INT 30
15558: PUSH
15559: LD_INT 3
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PPUSH
15566: CALL_OW 72
15570: ST_TO_ADDR
// if not factories then
15571: LD_VAR 0 5
15575: NOT
15576: IFFALSE 15580
// exit ;
15578: GO 16678
// for i in factories do
15580: LD_ADDR_VAR 0 7
15584: PUSH
15585: LD_VAR 0 5
15589: PUSH
15590: FOR_IN
15591: IFFALSE 15616
// fac_list := fac_list union AvailableWeaponList ( i ) ;
15593: LD_ADDR_VAR 0 16
15597: PUSH
15598: LD_VAR 0 16
15602: PUSH
15603: LD_VAR 0 7
15607: PPUSH
15608: CALL_OW 478
15612: UNION
15613: ST_TO_ADDR
15614: GO 15590
15616: POP
15617: POP
// if not fac_list then
15618: LD_VAR 0 16
15622: NOT
15623: IFFALSE 15627
// exit ;
15625: GO 16678
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
15627: LD_ADDR_VAR 0 4
15631: PUSH
15632: LD_INT 4
15634: PUSH
15635: LD_INT 5
15637: PUSH
15638: LD_INT 9
15640: PUSH
15641: LD_INT 10
15643: PUSH
15644: LD_INT 6
15646: PUSH
15647: LD_INT 7
15649: PUSH
15650: LD_INT 11
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 27
15664: PUSH
15665: LD_INT 28
15667: PUSH
15668: LD_INT 26
15670: PUSH
15671: LD_INT 30
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 43
15682: PUSH
15683: LD_INT 44
15685: PUSH
15686: LD_INT 46
15688: PUSH
15689: LD_INT 45
15691: PUSH
15692: LD_INT 47
15694: PUSH
15695: LD_INT 49
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: PUSH
15711: LD_VAR 0 11
15715: ARRAY
15716: ST_TO_ADDR
// for i in list do
15717: LD_ADDR_VAR 0 7
15721: PUSH
15722: LD_VAR 0 4
15726: PUSH
15727: FOR_IN
15728: IFFALSE 15761
// if not i in fac_list then
15730: LD_VAR 0 7
15734: PUSH
15735: LD_VAR 0 16
15739: IN
15740: NOT
15741: IFFALSE 15759
// list := list diff i ;
15743: LD_ADDR_VAR 0 4
15747: PUSH
15748: LD_VAR 0 4
15752: PUSH
15753: LD_VAR 0 7
15757: DIFF
15758: ST_TO_ADDR
15759: GO 15727
15761: POP
15762: POP
// if not list then
15763: LD_VAR 0 4
15767: NOT
15768: IFFALSE 15772
// exit ;
15770: GO 16678
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
15772: LD_VAR 0 11
15776: PUSH
15777: LD_INT 3
15779: EQUAL
15780: PUSH
15781: LD_INT 49
15783: PUSH
15784: LD_VAR 0 4
15788: IN
15789: AND
15790: PUSH
15791: LD_INT 31
15793: PPUSH
15794: LD_VAR 0 15
15798: PPUSH
15799: CALL_OW 321
15803: PUSH
15804: LD_INT 2
15806: EQUAL
15807: AND
15808: IFFALSE 15868
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
15810: LD_INT 22
15812: PUSH
15813: LD_VAR 0 15
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 35
15824: PUSH
15825: LD_INT 49
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 91
15834: PUSH
15835: LD_VAR 0 1
15839: PUSH
15840: LD_INT 10
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: LIST
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: LIST
15852: PPUSH
15853: CALL_OW 69
15857: NOT
15858: IFFALSE 15868
// weapon := ru_time_lapser ;
15860: LD_ADDR_VAR 0 17
15864: PUSH
15865: LD_INT 49
15867: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15868: LD_VAR 0 11
15872: PUSH
15873: LD_INT 1
15875: PUSH
15876: LD_INT 2
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: IN
15883: PUSH
15884: LD_INT 11
15886: PUSH
15887: LD_VAR 0 4
15891: IN
15892: PUSH
15893: LD_INT 30
15895: PUSH
15896: LD_VAR 0 4
15900: IN
15901: OR
15902: AND
15903: PUSH
15904: LD_INT 6
15906: PPUSH
15907: LD_VAR 0 15
15911: PPUSH
15912: CALL_OW 321
15916: PUSH
15917: LD_INT 2
15919: EQUAL
15920: AND
15921: IFFALSE 16086
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15923: LD_INT 22
15925: PUSH
15926: LD_VAR 0 15
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: LD_INT 2
15937: PUSH
15938: LD_INT 35
15940: PUSH
15941: LD_INT 11
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: LD_INT 35
15950: PUSH
15951: LD_INT 30
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 91
15965: PUSH
15966: LD_VAR 0 1
15970: PUSH
15971: LD_INT 18
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: LIST
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: LIST
15983: PPUSH
15984: CALL_OW 69
15988: NOT
15989: PUSH
15990: LD_INT 22
15992: PUSH
15993: LD_VAR 0 15
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 2
16004: PUSH
16005: LD_INT 30
16007: PUSH
16008: LD_INT 32
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 30
16017: PUSH
16018: LD_INT 33
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: LIST
16029: PUSH
16030: LD_INT 91
16032: PUSH
16033: LD_VAR 0 1
16037: PUSH
16038: LD_INT 12
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: LIST
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: PUSH
16051: EMPTY
16052: LIST
16053: PPUSH
16054: CALL_OW 69
16058: PUSH
16059: LD_INT 2
16061: GREATER
16062: AND
16063: IFFALSE 16086
// weapon := [ us_radar , ar_radar ] [ nat ] ;
16065: LD_ADDR_VAR 0 17
16069: PUSH
16070: LD_INT 11
16072: PUSH
16073: LD_INT 30
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_VAR 0 11
16084: ARRAY
16085: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
16086: LD_VAR 0 17
16090: NOT
16091: PUSH
16092: LD_INT 40
16094: PPUSH
16095: LD_VAR 0 15
16099: PPUSH
16100: CALL_OW 321
16104: PUSH
16105: LD_INT 2
16107: EQUAL
16108: AND
16109: PUSH
16110: LD_INT 7
16112: PUSH
16113: LD_VAR 0 4
16117: IN
16118: PUSH
16119: LD_INT 28
16121: PUSH
16122: LD_VAR 0 4
16126: IN
16127: OR
16128: PUSH
16129: LD_INT 45
16131: PUSH
16132: LD_VAR 0 4
16136: IN
16137: OR
16138: AND
16139: IFFALSE 16393
// begin hex := GetHexInfo ( x , y ) ;
16141: LD_ADDR_VAR 0 3
16145: PUSH
16146: LD_VAR 0 9
16150: PPUSH
16151: LD_VAR 0 10
16155: PPUSH
16156: CALL_OW 546
16160: ST_TO_ADDR
// if hex [ 1 ] then
16161: LD_VAR 0 3
16165: PUSH
16166: LD_INT 1
16168: ARRAY
16169: IFFALSE 16173
// exit ;
16171: GO 16678
// height := hex [ 2 ] ;
16173: LD_ADDR_VAR 0 14
16177: PUSH
16178: LD_VAR 0 3
16182: PUSH
16183: LD_INT 2
16185: ARRAY
16186: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
16187: LD_ADDR_VAR 0 13
16191: PUSH
16192: LD_INT 0
16194: PUSH
16195: LD_INT 2
16197: PUSH
16198: LD_INT 3
16200: PUSH
16201: LD_INT 5
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: ST_TO_ADDR
// for i in tmp do
16210: LD_ADDR_VAR 0 7
16214: PUSH
16215: LD_VAR 0 13
16219: PUSH
16220: FOR_IN
16221: IFFALSE 16391
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
16223: LD_ADDR_VAR 0 8
16227: PUSH
16228: LD_VAR 0 9
16232: PPUSH
16233: LD_VAR 0 7
16237: PPUSH
16238: LD_INT 5
16240: PPUSH
16241: CALL_OW 272
16245: PUSH
16246: LD_VAR 0 10
16250: PPUSH
16251: LD_VAR 0 7
16255: PPUSH
16256: LD_INT 5
16258: PPUSH
16259: CALL_OW 273
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
16268: LD_VAR 0 8
16272: PUSH
16273: LD_INT 1
16275: ARRAY
16276: PPUSH
16277: LD_VAR 0 8
16281: PUSH
16282: LD_INT 2
16284: ARRAY
16285: PPUSH
16286: CALL_OW 488
16290: IFFALSE 16389
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
16292: LD_ADDR_VAR 0 3
16296: PUSH
16297: LD_VAR 0 8
16301: PUSH
16302: LD_INT 1
16304: ARRAY
16305: PPUSH
16306: LD_VAR 0 8
16310: PUSH
16311: LD_INT 2
16313: ARRAY
16314: PPUSH
16315: CALL_OW 546
16319: ST_TO_ADDR
// if hex [ 1 ] then
16320: LD_VAR 0 3
16324: PUSH
16325: LD_INT 1
16327: ARRAY
16328: IFFALSE 16332
// continue ;
16330: GO 16220
// h := hex [ 2 ] ;
16332: LD_ADDR_VAR 0 12
16336: PUSH
16337: LD_VAR 0 3
16341: PUSH
16342: LD_INT 2
16344: ARRAY
16345: ST_TO_ADDR
// if h + 7 < height then
16346: LD_VAR 0 12
16350: PUSH
16351: LD_INT 7
16353: PLUS
16354: PUSH
16355: LD_VAR 0 14
16359: LESS
16360: IFFALSE 16389
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
16362: LD_ADDR_VAR 0 17
16366: PUSH
16367: LD_INT 7
16369: PUSH
16370: LD_INT 28
16372: PUSH
16373: LD_INT 45
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: LIST
16380: PUSH
16381: LD_VAR 0 11
16385: ARRAY
16386: ST_TO_ADDR
// break ;
16387: GO 16391
// end ; end ; end ;
16389: GO 16220
16391: POP
16392: POP
// end ; if not weapon then
16393: LD_VAR 0 17
16397: NOT
16398: IFFALSE 16560
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
16400: LD_ADDR_VAR 0 4
16404: PUSH
16405: LD_VAR 0 4
16409: PUSH
16410: LD_INT 11
16412: PUSH
16413: LD_INT 30
16415: PUSH
16416: LD_INT 49
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: LIST
16423: DIFF
16424: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
16425: LD_ADDR_VAR 0 17
16429: PUSH
16430: LD_VAR 0 4
16434: PUSH
16435: LD_INT 1
16437: PPUSH
16438: LD_VAR 0 4
16442: PPUSH
16443: CALL_OW 12
16447: ARRAY
16448: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
16449: LD_ADDR_VAR 0 13
16453: PUSH
16454: LD_INT 22
16456: PUSH
16457: LD_VAR 0 15
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 3
16468: PUSH
16469: LD_INT 35
16471: PUSH
16472: LD_INT 0
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PPUSH
16487: CALL_OW 69
16491: ST_TO_ADDR
// for i in tmp do
16492: LD_ADDR_VAR 0 7
16496: PUSH
16497: LD_VAR 0 13
16501: PUSH
16502: FOR_IN
16503: IFFALSE 16528
// list := list diff GetBWeapon ( i ) ;
16505: LD_ADDR_VAR 0 4
16509: PUSH
16510: LD_VAR 0 4
16514: PUSH
16515: LD_VAR 0 7
16519: PPUSH
16520: CALL_OW 269
16524: DIFF
16525: ST_TO_ADDR
16526: GO 16502
16528: POP
16529: POP
// if list then
16530: LD_VAR 0 4
16534: IFFALSE 16560
// weapon := list [ rand ( 1 , list ) ] ;
16536: LD_ADDR_VAR 0 17
16540: PUSH
16541: LD_VAR 0 4
16545: PUSH
16546: LD_INT 1
16548: PPUSH
16549: LD_VAR 0 4
16553: PPUSH
16554: CALL_OW 12
16558: ARRAY
16559: ST_TO_ADDR
// end ; if weapon then
16560: LD_VAR 0 17
16564: IFFALSE 16678
// begin tmp := CostOfWeapon ( weapon ) ;
16566: LD_ADDR_VAR 0 13
16570: PUSH
16571: LD_VAR 0 17
16575: PPUSH
16576: CALL_OW 451
16580: ST_TO_ADDR
// j := GetBase ( tower ) ;
16581: LD_ADDR_VAR 0 8
16585: PUSH
16586: LD_VAR 0 1
16590: PPUSH
16591: CALL_OW 274
16595: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
16596: LD_VAR 0 8
16600: PPUSH
16601: LD_INT 1
16603: PPUSH
16604: CALL_OW 275
16608: PUSH
16609: LD_VAR 0 13
16613: PUSH
16614: LD_INT 1
16616: ARRAY
16617: GREATEREQUAL
16618: PUSH
16619: LD_VAR 0 8
16623: PPUSH
16624: LD_INT 2
16626: PPUSH
16627: CALL_OW 275
16631: PUSH
16632: LD_VAR 0 13
16636: PUSH
16637: LD_INT 2
16639: ARRAY
16640: GREATEREQUAL
16641: AND
16642: PUSH
16643: LD_VAR 0 8
16647: PPUSH
16648: LD_INT 3
16650: PPUSH
16651: CALL_OW 275
16655: PUSH
16656: LD_VAR 0 13
16660: PUSH
16661: LD_INT 3
16663: ARRAY
16664: GREATEREQUAL
16665: AND
16666: IFFALSE 16678
// result := weapon ;
16668: LD_ADDR_VAR 0 2
16672: PUSH
16673: LD_VAR 0 17
16677: ST_TO_ADDR
// end ; end ;
16678: LD_VAR 0 2
16682: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
16683: LD_INT 0
16685: PPUSH
16686: PPUSH
// result := true ;
16687: LD_ADDR_VAR 0 3
16691: PUSH
16692: LD_INT 1
16694: ST_TO_ADDR
// if array1 = array2 then
16695: LD_VAR 0 1
16699: PUSH
16700: LD_VAR 0 2
16704: EQUAL
16705: IFFALSE 16765
// begin for i = 1 to array1 do
16707: LD_ADDR_VAR 0 4
16711: PUSH
16712: DOUBLE
16713: LD_INT 1
16715: DEC
16716: ST_TO_ADDR
16717: LD_VAR 0 1
16721: PUSH
16722: FOR_TO
16723: IFFALSE 16761
// if array1 [ i ] <> array2 [ i ] then
16725: LD_VAR 0 1
16729: PUSH
16730: LD_VAR 0 4
16734: ARRAY
16735: PUSH
16736: LD_VAR 0 2
16740: PUSH
16741: LD_VAR 0 4
16745: ARRAY
16746: NONEQUAL
16747: IFFALSE 16759
// begin result := false ;
16749: LD_ADDR_VAR 0 3
16753: PUSH
16754: LD_INT 0
16756: ST_TO_ADDR
// break ;
16757: GO 16761
// end ;
16759: GO 16722
16761: POP
16762: POP
// end else
16763: GO 16773
// result := false ;
16765: LD_ADDR_VAR 0 3
16769: PUSH
16770: LD_INT 0
16772: ST_TO_ADDR
// end ;
16773: LD_VAR 0 3
16777: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
16778: LD_INT 0
16780: PPUSH
16781: PPUSH
16782: PPUSH
// pom := GetBase ( fac ) ;
16783: LD_ADDR_VAR 0 5
16787: PUSH
16788: LD_VAR 0 1
16792: PPUSH
16793: CALL_OW 274
16797: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
16798: LD_ADDR_VAR 0 4
16802: PUSH
16803: LD_VAR 0 2
16807: PUSH
16808: LD_INT 1
16810: ARRAY
16811: PPUSH
16812: LD_VAR 0 2
16816: PUSH
16817: LD_INT 2
16819: ARRAY
16820: PPUSH
16821: LD_VAR 0 2
16825: PUSH
16826: LD_INT 3
16828: ARRAY
16829: PPUSH
16830: LD_VAR 0 2
16834: PUSH
16835: LD_INT 4
16837: ARRAY
16838: PPUSH
16839: CALL_OW 449
16843: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
16844: LD_VAR 0 5
16848: PPUSH
16849: LD_INT 1
16851: PPUSH
16852: CALL_OW 275
16856: PUSH
16857: LD_VAR 0 4
16861: PUSH
16862: LD_INT 1
16864: ARRAY
16865: GREATEREQUAL
16866: PUSH
16867: LD_VAR 0 5
16871: PPUSH
16872: LD_INT 2
16874: PPUSH
16875: CALL_OW 275
16879: PUSH
16880: LD_VAR 0 4
16884: PUSH
16885: LD_INT 2
16887: ARRAY
16888: GREATEREQUAL
16889: AND
16890: PUSH
16891: LD_VAR 0 5
16895: PPUSH
16896: LD_INT 3
16898: PPUSH
16899: CALL_OW 275
16903: PUSH
16904: LD_VAR 0 4
16908: PUSH
16909: LD_INT 3
16911: ARRAY
16912: GREATEREQUAL
16913: AND
16914: IFFALSE 16926
// result := true else
16916: LD_ADDR_VAR 0 3
16920: PUSH
16921: LD_INT 1
16923: ST_TO_ADDR
16924: GO 16934
// result := false ;
16926: LD_ADDR_VAR 0 3
16930: PUSH
16931: LD_INT 0
16933: ST_TO_ADDR
// end ;
16934: LD_VAR 0 3
16938: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
16939: LD_INT 0
16941: PPUSH
16942: PPUSH
16943: PPUSH
16944: PPUSH
16945: PPUSH
16946: PPUSH
16947: PPUSH
16948: PPUSH
16949: PPUSH
// result := false ;
16950: LD_ADDR_VAR 0 6
16954: PUSH
16955: LD_INT 0
16957: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16958: LD_VAR 0 1
16962: NOT
16963: PUSH
16964: LD_VAR 0 1
16968: PPUSH
16969: CALL_OW 266
16973: PUSH
16974: LD_INT 0
16976: PUSH
16977: LD_INT 1
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: IN
16984: NOT
16985: OR
16986: PUSH
16987: LD_VAR 0 2
16991: NOT
16992: OR
16993: PUSH
16994: LD_VAR 0 5
16998: PUSH
16999: LD_INT 0
17001: PUSH
17002: LD_INT 1
17004: PUSH
17005: LD_INT 2
17007: PUSH
17008: LD_INT 3
17010: PUSH
17011: LD_INT 4
17013: PUSH
17014: LD_INT 5
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: IN
17025: NOT
17026: OR
17027: PUSH
17028: LD_VAR 0 3
17032: PPUSH
17033: LD_VAR 0 4
17037: PPUSH
17038: CALL_OW 488
17042: NOT
17043: OR
17044: IFFALSE 17048
// exit ;
17046: GO 17712
// pom := GetBase ( bdepot ) ;
17048: LD_ADDR_VAR 0 9
17052: PUSH
17053: LD_VAR 0 1
17057: PPUSH
17058: CALL_OW 274
17062: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17063: LD_ADDR_VAR 0 10
17067: PUSH
17068: LD_VAR 0 2
17072: PPUSH
17073: LD_VAR 0 1
17077: PPUSH
17078: CALL_OW 248
17082: PPUSH
17083: CALL_OW 450
17087: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17088: LD_VAR 0 9
17092: PPUSH
17093: LD_INT 1
17095: PPUSH
17096: CALL_OW 275
17100: PUSH
17101: LD_VAR 0 10
17105: PUSH
17106: LD_INT 1
17108: ARRAY
17109: GREATEREQUAL
17110: PUSH
17111: LD_VAR 0 9
17115: PPUSH
17116: LD_INT 2
17118: PPUSH
17119: CALL_OW 275
17123: PUSH
17124: LD_VAR 0 10
17128: PUSH
17129: LD_INT 2
17131: ARRAY
17132: GREATEREQUAL
17133: AND
17134: PUSH
17135: LD_VAR 0 9
17139: PPUSH
17140: LD_INT 3
17142: PPUSH
17143: CALL_OW 275
17147: PUSH
17148: LD_VAR 0 10
17152: PUSH
17153: LD_INT 3
17155: ARRAY
17156: GREATEREQUAL
17157: AND
17158: NOT
17159: IFFALSE 17163
// exit ;
17161: GO 17712
// if GetBType ( bdepot ) = b_depot then
17163: LD_VAR 0 1
17167: PPUSH
17168: CALL_OW 266
17172: PUSH
17173: LD_INT 0
17175: EQUAL
17176: IFFALSE 17188
// dist := 28 else
17178: LD_ADDR_VAR 0 13
17182: PUSH
17183: LD_INT 28
17185: ST_TO_ADDR
17186: GO 17196
// dist := 36 ;
17188: LD_ADDR_VAR 0 13
17192: PUSH
17193: LD_INT 36
17195: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17196: LD_VAR 0 1
17200: PPUSH
17201: LD_VAR 0 3
17205: PPUSH
17206: LD_VAR 0 4
17210: PPUSH
17211: CALL_OW 297
17215: PUSH
17216: LD_VAR 0 13
17220: GREATER
17221: IFFALSE 17225
// exit ;
17223: GO 17712
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17225: LD_ADDR_VAR 0 11
17229: PUSH
17230: LD_VAR 0 2
17234: PPUSH
17235: LD_VAR 0 3
17239: PPUSH
17240: LD_VAR 0 4
17244: PPUSH
17245: LD_VAR 0 5
17249: PPUSH
17250: LD_VAR 0 1
17254: PPUSH
17255: CALL_OW 248
17259: PPUSH
17260: LD_INT 0
17262: PPUSH
17263: CALL 17717 0 6
17267: ST_TO_ADDR
// if not hexes then
17268: LD_VAR 0 11
17272: NOT
17273: IFFALSE 17277
// exit ;
17275: GO 17712
// hex := GetHexInfo ( x , y ) ;
17277: LD_ADDR_VAR 0 14
17281: PUSH
17282: LD_VAR 0 3
17286: PPUSH
17287: LD_VAR 0 4
17291: PPUSH
17292: CALL_OW 546
17296: ST_TO_ADDR
// if hex [ 1 ] then
17297: LD_VAR 0 14
17301: PUSH
17302: LD_INT 1
17304: ARRAY
17305: IFFALSE 17309
// exit ;
17307: GO 17712
// height := hex [ 2 ] ;
17309: LD_ADDR_VAR 0 12
17313: PUSH
17314: LD_VAR 0 14
17318: PUSH
17319: LD_INT 2
17321: ARRAY
17322: ST_TO_ADDR
// for i = 1 to hexes do
17323: LD_ADDR_VAR 0 7
17327: PUSH
17328: DOUBLE
17329: LD_INT 1
17331: DEC
17332: ST_TO_ADDR
17333: LD_VAR 0 11
17337: PUSH
17338: FOR_TO
17339: IFFALSE 17667
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17341: LD_VAR 0 11
17345: PUSH
17346: LD_VAR 0 7
17350: ARRAY
17351: PUSH
17352: LD_INT 1
17354: ARRAY
17355: PPUSH
17356: LD_VAR 0 11
17360: PUSH
17361: LD_VAR 0 7
17365: ARRAY
17366: PUSH
17367: LD_INT 2
17369: ARRAY
17370: PPUSH
17371: CALL_OW 488
17375: NOT
17376: IFFALSE 17380
// continue ;
17378: GO 17338
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17380: LD_ADDR_VAR 0 8
17384: PUSH
17385: LD_VAR 0 11
17389: PUSH
17390: LD_VAR 0 7
17394: ARRAY
17395: PUSH
17396: LD_INT 1
17398: ARRAY
17399: PPUSH
17400: LD_VAR 0 11
17404: PUSH
17405: LD_VAR 0 7
17409: ARRAY
17410: PUSH
17411: LD_INT 2
17413: ARRAY
17414: PPUSH
17415: CALL_OW 546
17419: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17420: LD_VAR 0 8
17424: PUSH
17425: LD_INT 1
17427: ARRAY
17428: PUSH
17429: LD_VAR 0 8
17433: PUSH
17434: LD_INT 2
17436: ARRAY
17437: PUSH
17438: LD_VAR 0 12
17442: PUSH
17443: LD_INT 2
17445: PLUS
17446: GREATER
17447: OR
17448: PUSH
17449: LD_VAR 0 8
17453: PUSH
17454: LD_INT 2
17456: ARRAY
17457: PUSH
17458: LD_VAR 0 12
17462: PUSH
17463: LD_INT 2
17465: MINUS
17466: LESS
17467: OR
17468: PUSH
17469: LD_VAR 0 8
17473: PUSH
17474: LD_INT 3
17476: ARRAY
17477: PUSH
17478: LD_INT 0
17480: PUSH
17481: LD_INT 8
17483: PUSH
17484: LD_INT 9
17486: PUSH
17487: LD_INT 10
17489: PUSH
17490: LD_INT 11
17492: PUSH
17493: LD_INT 12
17495: PUSH
17496: LD_INT 13
17498: PUSH
17499: LD_INT 16
17501: PUSH
17502: LD_INT 17
17504: PUSH
17505: LD_INT 18
17507: PUSH
17508: LD_INT 19
17510: PUSH
17511: LD_INT 20
17513: PUSH
17514: LD_INT 21
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: IN
17532: NOT
17533: OR
17534: PUSH
17535: LD_VAR 0 8
17539: PUSH
17540: LD_INT 5
17542: ARRAY
17543: NOT
17544: OR
17545: PUSH
17546: LD_VAR 0 8
17550: PUSH
17551: LD_INT 6
17553: ARRAY
17554: PUSH
17555: LD_INT 1
17557: PUSH
17558: LD_INT 2
17560: PUSH
17561: LD_INT 7
17563: PUSH
17564: LD_INT 9
17566: PUSH
17567: LD_INT 10
17569: PUSH
17570: LD_INT 11
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: IN
17581: NOT
17582: OR
17583: PUSH
17584: LD_VAR 0 11
17588: PUSH
17589: LD_VAR 0 7
17593: ARRAY
17594: PUSH
17595: LD_INT 1
17597: ARRAY
17598: PPUSH
17599: LD_VAR 0 11
17603: PUSH
17604: LD_VAR 0 7
17608: ARRAY
17609: PUSH
17610: LD_INT 2
17612: ARRAY
17613: PPUSH
17614: CALL_OW 428
17618: PUSH
17619: LD_INT 0
17621: GREATER
17622: OR
17623: PUSH
17624: LD_VAR 0 11
17628: PUSH
17629: LD_VAR 0 7
17633: ARRAY
17634: PUSH
17635: LD_INT 1
17637: ARRAY
17638: PPUSH
17639: LD_VAR 0 11
17643: PUSH
17644: LD_VAR 0 7
17648: ARRAY
17649: PUSH
17650: LD_INT 2
17652: ARRAY
17653: PPUSH
17654: CALL_OW 351
17658: OR
17659: IFFALSE 17665
// exit ;
17661: POP
17662: POP
17663: GO 17712
// end ;
17665: GO 17338
17667: POP
17668: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
17669: LD_VAR 0 1
17673: PPUSH
17674: CALL_OW 255
17678: PPUSH
17679: LD_VAR 0 3
17683: PPUSH
17684: LD_VAR 0 4
17688: PPUSH
17689: LD_INT 20
17691: PPUSH
17692: CALL 11675 0 4
17696: PUSH
17697: LD_INT 4
17699: ARRAY
17700: IFFALSE 17704
// exit ;
17702: GO 17712
// result := true ;
17704: LD_ADDR_VAR 0 6
17708: PUSH
17709: LD_INT 1
17711: ST_TO_ADDR
// end ;
17712: LD_VAR 0 6
17716: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
17717: LD_INT 0
17719: PPUSH
17720: PPUSH
17721: PPUSH
17722: PPUSH
17723: PPUSH
17724: PPUSH
17725: PPUSH
17726: PPUSH
17727: PPUSH
17728: PPUSH
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
17733: PPUSH
17734: PPUSH
17735: PPUSH
17736: PPUSH
17737: PPUSH
17738: PPUSH
17739: PPUSH
17740: PPUSH
17741: PPUSH
17742: PPUSH
17743: PPUSH
17744: PPUSH
17745: PPUSH
17746: PPUSH
17747: PPUSH
17748: PPUSH
17749: PPUSH
17750: PPUSH
17751: PPUSH
17752: PPUSH
17753: PPUSH
17754: PPUSH
17755: PPUSH
17756: PPUSH
17757: PPUSH
17758: PPUSH
17759: PPUSH
17760: PPUSH
17761: PPUSH
17762: PPUSH
17763: PPUSH
17764: PPUSH
17765: PPUSH
17766: PPUSH
17767: PPUSH
17768: PPUSH
17769: PPUSH
17770: PPUSH
17771: PPUSH
17772: PPUSH
17773: PPUSH
17774: PPUSH
17775: PPUSH
17776: PPUSH
// result = [ ] ;
17777: LD_ADDR_VAR 0 7
17781: PUSH
17782: EMPTY
17783: ST_TO_ADDR
// temp_list = [ ] ;
17784: LD_ADDR_VAR 0 9
17788: PUSH
17789: EMPTY
17790: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17791: LD_VAR 0 4
17795: PUSH
17796: LD_INT 0
17798: PUSH
17799: LD_INT 1
17801: PUSH
17802: LD_INT 2
17804: PUSH
17805: LD_INT 3
17807: PUSH
17808: LD_INT 4
17810: PUSH
17811: LD_INT 5
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: IN
17822: NOT
17823: PUSH
17824: LD_VAR 0 1
17828: PUSH
17829: LD_INT 0
17831: PUSH
17832: LD_INT 1
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: IN
17839: PUSH
17840: LD_VAR 0 5
17844: PUSH
17845: LD_INT 1
17847: PUSH
17848: LD_INT 2
17850: PUSH
17851: LD_INT 3
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: LIST
17858: IN
17859: NOT
17860: AND
17861: OR
17862: IFFALSE 17866
// exit ;
17864: GO 36251
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17866: LD_VAR 0 1
17870: PUSH
17871: LD_INT 6
17873: PUSH
17874: LD_INT 7
17876: PUSH
17877: LD_INT 8
17879: PUSH
17880: LD_INT 13
17882: PUSH
17883: LD_INT 12
17885: PUSH
17886: LD_INT 15
17888: PUSH
17889: LD_INT 11
17891: PUSH
17892: LD_INT 14
17894: PUSH
17895: LD_INT 10
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: IN
17909: IFFALSE 17919
// btype = b_lab ;
17911: LD_ADDR_VAR 0 1
17915: PUSH
17916: LD_INT 6
17918: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17919: LD_VAR 0 6
17923: PUSH
17924: LD_INT 0
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: LIST
17937: IN
17938: NOT
17939: PUSH
17940: LD_VAR 0 1
17944: PUSH
17945: LD_INT 0
17947: PUSH
17948: LD_INT 1
17950: PUSH
17951: LD_INT 2
17953: PUSH
17954: LD_INT 3
17956: PUSH
17957: LD_INT 6
17959: PUSH
17960: LD_INT 36
17962: PUSH
17963: LD_INT 4
17965: PUSH
17966: LD_INT 5
17968: PUSH
17969: LD_INT 31
17971: PUSH
17972: LD_INT 32
17974: PUSH
17975: LD_INT 33
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: IN
17991: NOT
17992: PUSH
17993: LD_VAR 0 6
17997: PUSH
17998: LD_INT 1
18000: EQUAL
18001: AND
18002: OR
18003: PUSH
18004: LD_VAR 0 1
18008: PUSH
18009: LD_INT 2
18011: PUSH
18012: LD_INT 3
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: IN
18019: NOT
18020: PUSH
18021: LD_VAR 0 6
18025: PUSH
18026: LD_INT 2
18028: EQUAL
18029: AND
18030: OR
18031: IFFALSE 18041
// mode = 0 ;
18033: LD_ADDR_VAR 0 6
18037: PUSH
18038: LD_INT 0
18040: ST_TO_ADDR
// case mode of 0 :
18041: LD_VAR 0 6
18045: PUSH
18046: LD_INT 0
18048: DOUBLE
18049: EQUAL
18050: IFTRUE 18054
18052: GO 29507
18054: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18055: LD_ADDR_VAR 0 11
18059: PUSH
18060: LD_INT 0
18062: PUSH
18063: LD_INT 0
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 0
18072: PUSH
18073: LD_INT 1
18075: NEG
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: LD_INT 0
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 0
18103: PUSH
18104: LD_INT 1
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 1
18113: NEG
18114: PUSH
18115: LD_INT 0
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 1
18124: NEG
18125: PUSH
18126: LD_INT 1
18128: NEG
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 1
18136: NEG
18137: PUSH
18138: LD_INT 2
18140: NEG
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 0
18148: PUSH
18149: LD_INT 2
18151: NEG
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: LD_INT 1
18162: NEG
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 1
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 0
18180: PUSH
18181: LD_INT 2
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 1
18190: NEG
18191: PUSH
18192: LD_INT 1
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: LD_INT 3
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 0
18211: PUSH
18212: LD_INT 3
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 1
18221: NEG
18222: PUSH
18223: LD_INT 2
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18248: LD_ADDR_VAR 0 12
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: LD_INT 0
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 0
18265: PUSH
18266: LD_INT 1
18268: NEG
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 1
18276: PUSH
18277: LD_INT 0
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 1
18286: PUSH
18287: LD_INT 1
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 0
18296: PUSH
18297: LD_INT 1
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 1
18306: NEG
18307: PUSH
18308: LD_INT 0
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 1
18317: NEG
18318: PUSH
18319: LD_INT 1
18321: NEG
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 1
18329: PUSH
18330: LD_INT 1
18332: NEG
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 0
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 2
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 1
18360: NEG
18361: PUSH
18362: LD_INT 1
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 2
18371: NEG
18372: PUSH
18373: LD_INT 0
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 2
18382: NEG
18383: PUSH
18384: LD_INT 1
18386: NEG
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 2
18394: NEG
18395: PUSH
18396: LD_INT 1
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 3
18405: NEG
18406: PUSH
18407: LD_INT 0
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 3
18416: NEG
18417: PUSH
18418: LD_INT 1
18420: NEG
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18444: LD_ADDR_VAR 0 13
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: LD_INT 0
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 0
18461: PUSH
18462: LD_INT 1
18464: NEG
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 1
18472: PUSH
18473: LD_INT 0
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 0
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 1
18502: NEG
18503: PUSH
18504: LD_INT 0
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 1
18513: NEG
18514: PUSH
18515: LD_INT 1
18517: NEG
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 1
18525: NEG
18526: PUSH
18527: LD_INT 2
18529: NEG
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: LD_INT 1
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 2
18547: PUSH
18548: LD_INT 2
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: LD_INT 2
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 2
18567: NEG
18568: PUSH
18569: LD_INT 1
18571: NEG
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 2
18579: NEG
18580: PUSH
18581: LD_INT 2
18583: NEG
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 2
18591: NEG
18592: PUSH
18593: LD_INT 3
18595: NEG
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 3
18603: NEG
18604: PUSH
18605: LD_INT 2
18607: NEG
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 3
18615: NEG
18616: PUSH
18617: LD_INT 3
18619: NEG
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18643: LD_ADDR_VAR 0 14
18647: PUSH
18648: LD_INT 0
18650: PUSH
18651: LD_INT 0
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 0
18660: PUSH
18661: LD_INT 1
18663: NEG
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 1
18671: PUSH
18672: LD_INT 0
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 1
18681: PUSH
18682: LD_INT 1
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 0
18691: PUSH
18692: LD_INT 1
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 1
18701: NEG
18702: PUSH
18703: LD_INT 0
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 1
18712: NEG
18713: PUSH
18714: LD_INT 1
18716: NEG
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 1
18724: NEG
18725: PUSH
18726: LD_INT 2
18728: NEG
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 0
18736: PUSH
18737: LD_INT 2
18739: NEG
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: LD_INT 1
18750: NEG
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 1
18758: PUSH
18759: LD_INT 2
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 0
18768: PUSH
18769: LD_INT 2
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 1
18778: NEG
18779: PUSH
18780: LD_INT 1
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 1
18789: NEG
18790: PUSH
18791: LD_INT 3
18793: NEG
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 0
18801: PUSH
18802: LD_INT 3
18804: NEG
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: LD_INT 2
18815: NEG
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18839: LD_ADDR_VAR 0 15
18843: PUSH
18844: LD_INT 0
18846: PUSH
18847: LD_INT 0
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 0
18856: PUSH
18857: LD_INT 1
18859: NEG
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: LD_INT 0
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 1
18877: PUSH
18878: LD_INT 1
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 0
18887: PUSH
18888: LD_INT 1
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 1
18908: NEG
18909: PUSH
18910: LD_INT 1
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: PUSH
18921: LD_INT 1
18923: NEG
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 2
18941: PUSH
18942: LD_INT 1
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 1
18951: NEG
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 2
18962: NEG
18963: PUSH
18964: LD_INT 0
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 2
18973: NEG
18974: PUSH
18975: LD_INT 1
18977: NEG
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: LD_INT 1
18988: NEG
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 3
18996: PUSH
18997: LD_INT 0
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 3
19006: PUSH
19007: LD_INT 1
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19032: LD_ADDR_VAR 0 16
19036: PUSH
19037: LD_INT 0
19039: PUSH
19040: LD_INT 0
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 0
19049: PUSH
19050: LD_INT 1
19052: NEG
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 1
19060: PUSH
19061: LD_INT 0
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 0
19080: PUSH
19081: LD_INT 1
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 1
19090: NEG
19091: PUSH
19092: LD_INT 0
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 1
19101: NEG
19102: PUSH
19103: LD_INT 1
19105: NEG
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 1
19113: NEG
19114: PUSH
19115: LD_INT 2
19117: NEG
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 2
19125: PUSH
19126: LD_INT 1
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 2
19135: PUSH
19136: LD_INT 2
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 1
19145: PUSH
19146: LD_INT 2
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 2
19155: NEG
19156: PUSH
19157: LD_INT 1
19159: NEG
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 2
19167: NEG
19168: PUSH
19169: LD_INT 2
19171: NEG
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 3
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 3
19189: PUSH
19190: LD_INT 3
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 2
19199: PUSH
19200: LD_INT 3
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19225: LD_ADDR_VAR 0 17
19229: PUSH
19230: LD_INT 0
19232: PUSH
19233: LD_INT 0
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 0
19242: PUSH
19243: LD_INT 1
19245: NEG
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: LD_INT 0
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 1
19263: PUSH
19264: LD_INT 1
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 0
19273: PUSH
19274: LD_INT 1
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 1
19283: NEG
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 1
19294: NEG
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 1
19306: NEG
19307: PUSH
19308: LD_INT 2
19310: NEG
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 0
19318: PUSH
19319: LD_INT 2
19321: NEG
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 0
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 2
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: LD_INT 2
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 1
19370: PUSH
19371: LD_INT 2
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 0
19380: PUSH
19381: LD_INT 2
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 1
19390: NEG
19391: PUSH
19392: LD_INT 1
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 2
19401: NEG
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 2
19412: NEG
19413: PUSH
19414: LD_INT 1
19416: NEG
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 2
19424: NEG
19425: PUSH
19426: LD_INT 2
19428: NEG
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19455: LD_ADDR_VAR 0 18
19459: PUSH
19460: LD_INT 0
19462: PUSH
19463: LD_INT 0
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 0
19472: PUSH
19473: LD_INT 1
19475: NEG
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: LD_INT 0
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 0
19503: PUSH
19504: LD_INT 1
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: NEG
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 1
19524: NEG
19525: PUSH
19526: LD_INT 1
19528: NEG
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 1
19536: NEG
19537: PUSH
19538: LD_INT 2
19540: NEG
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: LD_INT 2
19551: NEG
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 1
19559: PUSH
19560: LD_INT 1
19562: NEG
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 2
19570: PUSH
19571: LD_INT 0
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 2
19580: PUSH
19581: LD_INT 1
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 2
19590: PUSH
19591: LD_INT 2
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 1
19600: PUSH
19601: LD_INT 2
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 0
19610: PUSH
19611: LD_INT 2
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 1
19620: NEG
19621: PUSH
19622: LD_INT 1
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 2
19631: NEG
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 2
19642: NEG
19643: PUSH
19644: LD_INT 1
19646: NEG
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 2
19654: NEG
19655: PUSH
19656: LD_INT 2
19658: NEG
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19685: LD_ADDR_VAR 0 19
19689: PUSH
19690: LD_INT 0
19692: PUSH
19693: LD_INT 0
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 0
19702: PUSH
19703: LD_INT 1
19705: NEG
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 1
19713: PUSH
19714: LD_INT 0
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 1
19723: PUSH
19724: LD_INT 1
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 0
19733: PUSH
19734: LD_INT 1
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 1
19743: NEG
19744: PUSH
19745: LD_INT 0
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 1
19754: NEG
19755: PUSH
19756: LD_INT 1
19758: NEG
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 1
19766: NEG
19767: PUSH
19768: LD_INT 2
19770: NEG
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 0
19778: PUSH
19779: LD_INT 2
19781: NEG
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 1
19789: PUSH
19790: LD_INT 1
19792: NEG
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 2
19800: PUSH
19801: LD_INT 0
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 2
19810: PUSH
19811: LD_INT 1
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 2
19820: PUSH
19821: LD_INT 2
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 1
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: LD_INT 2
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 1
19850: NEG
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 2
19861: NEG
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 2
19872: NEG
19873: PUSH
19874: LD_INT 1
19876: NEG
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 2
19884: NEG
19885: PUSH
19886: LD_INT 2
19888: NEG
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19915: LD_ADDR_VAR 0 20
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: LD_INT 0
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 0
19932: PUSH
19933: LD_INT 1
19935: NEG
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: LD_INT 0
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: LD_INT 1
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 0
19963: PUSH
19964: LD_INT 1
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: NEG
19974: PUSH
19975: LD_INT 0
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 1
19984: NEG
19985: PUSH
19986: LD_INT 1
19988: NEG
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 1
19996: NEG
19997: PUSH
19998: LD_INT 2
20000: NEG
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 0
20008: PUSH
20009: LD_INT 2
20011: NEG
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 1
20019: PUSH
20020: LD_INT 1
20022: NEG
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 2
20030: PUSH
20031: LD_INT 0
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 2
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 2
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 1
20060: PUSH
20061: LD_INT 2
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 0
20070: PUSH
20071: LD_INT 2
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 1
20080: NEG
20081: PUSH
20082: LD_INT 1
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 2
20091: NEG
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 2
20102: NEG
20103: PUSH
20104: LD_INT 1
20106: NEG
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 2
20114: NEG
20115: PUSH
20116: LD_INT 2
20118: NEG
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20145: LD_ADDR_VAR 0 21
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: LD_INT 0
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 0
20162: PUSH
20163: LD_INT 1
20165: NEG
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: LD_INT 1
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 0
20193: PUSH
20194: LD_INT 1
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 1
20203: NEG
20204: PUSH
20205: LD_INT 0
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 1
20214: NEG
20215: PUSH
20216: LD_INT 1
20218: NEG
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 1
20226: NEG
20227: PUSH
20228: LD_INT 2
20230: NEG
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 0
20238: PUSH
20239: LD_INT 2
20241: NEG
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 1
20249: PUSH
20250: LD_INT 1
20252: NEG
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 2
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 1
20290: PUSH
20291: LD_INT 2
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: LD_INT 2
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 1
20310: NEG
20311: PUSH
20312: LD_INT 1
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 2
20321: NEG
20322: PUSH
20323: LD_INT 0
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 2
20332: NEG
20333: PUSH
20334: LD_INT 1
20336: NEG
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 2
20344: NEG
20345: PUSH
20346: LD_INT 2
20348: NEG
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20375: LD_ADDR_VAR 0 22
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: LD_INT 0
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 0
20392: PUSH
20393: LD_INT 1
20395: NEG
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: LD_INT 0
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 1
20413: PUSH
20414: LD_INT 1
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 0
20423: PUSH
20424: LD_INT 1
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 1
20433: NEG
20434: PUSH
20435: LD_INT 0
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 1
20444: NEG
20445: PUSH
20446: LD_INT 1
20448: NEG
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 1
20456: NEG
20457: PUSH
20458: LD_INT 2
20460: NEG
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 0
20468: PUSH
20469: LD_INT 2
20471: NEG
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 1
20479: PUSH
20480: LD_INT 1
20482: NEG
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: LD_INT 0
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 2
20500: PUSH
20501: LD_INT 1
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 2
20510: PUSH
20511: LD_INT 2
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 1
20520: PUSH
20521: LD_INT 2
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 0
20530: PUSH
20531: LD_INT 2
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 1
20540: NEG
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 2
20551: NEG
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 2
20562: NEG
20563: PUSH
20564: LD_INT 1
20566: NEG
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 2
20574: NEG
20575: PUSH
20576: LD_INT 2
20578: NEG
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20605: LD_ADDR_VAR 0 23
20609: PUSH
20610: LD_INT 0
20612: PUSH
20613: LD_INT 0
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 0
20622: PUSH
20623: LD_INT 1
20625: NEG
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 1
20633: PUSH
20634: LD_INT 0
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 1
20643: PUSH
20644: LD_INT 1
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 0
20653: PUSH
20654: LD_INT 1
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 1
20663: NEG
20664: PUSH
20665: LD_INT 0
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 1
20674: NEG
20675: PUSH
20676: LD_INT 1
20678: NEG
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 1
20686: NEG
20687: PUSH
20688: LD_INT 2
20690: NEG
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 0
20698: PUSH
20699: LD_INT 2
20701: NEG
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 1
20709: PUSH
20710: LD_INT 1
20712: NEG
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 2
20720: PUSH
20721: LD_INT 0
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 2
20730: PUSH
20731: LD_INT 1
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 2
20740: PUSH
20741: LD_INT 2
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 1
20750: PUSH
20751: LD_INT 2
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 0
20760: PUSH
20761: LD_INT 2
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 1
20770: NEG
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 2
20781: NEG
20782: PUSH
20783: LD_INT 0
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 2
20792: NEG
20793: PUSH
20794: LD_INT 1
20796: NEG
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 2
20804: NEG
20805: PUSH
20806: LD_INT 2
20808: NEG
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 2
20816: NEG
20817: PUSH
20818: LD_INT 3
20820: NEG
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 1
20828: NEG
20829: PUSH
20830: LD_INT 3
20832: NEG
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 1
20840: PUSH
20841: LD_INT 2
20843: NEG
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 2
20851: PUSH
20852: LD_INT 1
20854: NEG
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20885: LD_ADDR_VAR 0 24
20889: PUSH
20890: LD_INT 0
20892: PUSH
20893: LD_INT 0
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 0
20902: PUSH
20903: LD_INT 1
20905: NEG
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: LD_INT 0
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: LD_INT 1
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 0
20933: PUSH
20934: LD_INT 1
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 1
20943: NEG
20944: PUSH
20945: LD_INT 0
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 1
20954: NEG
20955: PUSH
20956: LD_INT 1
20958: NEG
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 1
20966: NEG
20967: PUSH
20968: LD_INT 2
20970: NEG
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 0
20978: PUSH
20979: LD_INT 2
20981: NEG
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 1
20989: PUSH
20990: LD_INT 1
20992: NEG
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 2
21000: PUSH
21001: LD_INT 0
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 2
21010: PUSH
21011: LD_INT 1
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 2
21020: PUSH
21021: LD_INT 2
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 1
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 0
21040: PUSH
21041: LD_INT 2
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 1
21050: NEG
21051: PUSH
21052: LD_INT 1
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 2
21061: NEG
21062: PUSH
21063: LD_INT 0
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 2
21072: NEG
21073: PUSH
21074: LD_INT 1
21076: NEG
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 2
21084: NEG
21085: PUSH
21086: LD_INT 2
21088: NEG
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: LD_INT 2
21099: NEG
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 2
21107: PUSH
21108: LD_INT 1
21110: NEG
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 3
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 3
21128: PUSH
21129: LD_INT 2
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21161: LD_ADDR_VAR 0 25
21165: PUSH
21166: LD_INT 0
21168: PUSH
21169: LD_INT 0
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: LD_INT 1
21181: NEG
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: PUSH
21190: LD_INT 0
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 0
21209: PUSH
21210: LD_INT 1
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 1
21219: NEG
21220: PUSH
21221: LD_INT 0
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 1
21230: NEG
21231: PUSH
21232: LD_INT 1
21234: NEG
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 1
21242: NEG
21243: PUSH
21244: LD_INT 2
21246: NEG
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 0
21254: PUSH
21255: LD_INT 2
21257: NEG
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: LD_INT 1
21268: NEG
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 2
21276: PUSH
21277: LD_INT 0
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 2
21286: PUSH
21287: LD_INT 1
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 2
21296: PUSH
21297: LD_INT 2
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 1
21306: PUSH
21307: LD_INT 2
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: LD_INT 2
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 1
21326: NEG
21327: PUSH
21328: LD_INT 1
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 2
21337: NEG
21338: PUSH
21339: LD_INT 0
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 2
21348: NEG
21349: PUSH
21350: LD_INT 1
21352: NEG
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 2
21360: NEG
21361: PUSH
21362: LD_INT 2
21364: NEG
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 3
21372: PUSH
21373: LD_INT 1
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 3
21382: PUSH
21383: LD_INT 2
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 2
21392: PUSH
21393: LD_INT 3
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 1
21402: PUSH
21403: LD_INT 3
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21435: LD_ADDR_VAR 0 26
21439: PUSH
21440: LD_INT 0
21442: PUSH
21443: LD_INT 0
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 0
21452: PUSH
21453: LD_INT 1
21455: NEG
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 1
21463: PUSH
21464: LD_INT 0
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 1
21473: PUSH
21474: LD_INT 1
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 0
21483: PUSH
21484: LD_INT 1
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 1
21493: NEG
21494: PUSH
21495: LD_INT 0
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 1
21504: NEG
21505: PUSH
21506: LD_INT 1
21508: NEG
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 1
21516: NEG
21517: PUSH
21518: LD_INT 2
21520: NEG
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 0
21528: PUSH
21529: LD_INT 2
21531: NEG
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 1
21539: PUSH
21540: LD_INT 1
21542: NEG
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 2
21550: PUSH
21551: LD_INT 0
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 2
21560: PUSH
21561: LD_INT 1
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 2
21570: PUSH
21571: LD_INT 2
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: LD_INT 2
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 0
21590: PUSH
21591: LD_INT 2
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 1
21600: NEG
21601: PUSH
21602: LD_INT 1
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 2
21611: NEG
21612: PUSH
21613: LD_INT 0
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 2
21622: NEG
21623: PUSH
21624: LD_INT 1
21626: NEG
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 2
21634: NEG
21635: PUSH
21636: LD_INT 2
21638: NEG
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 2
21646: PUSH
21647: LD_INT 3
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 1
21656: PUSH
21657: LD_INT 3
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 1
21666: NEG
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 2
21677: NEG
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21711: LD_ADDR_VAR 0 27
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: LD_INT 0
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: LD_INT 1
21731: NEG
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: LD_INT 0
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: LD_INT 1
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 1
21769: NEG
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 1
21780: NEG
21781: PUSH
21782: LD_INT 1
21784: NEG
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 1
21792: NEG
21793: PUSH
21794: LD_INT 2
21796: NEG
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 0
21804: PUSH
21805: LD_INT 2
21807: NEG
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 1
21815: PUSH
21816: LD_INT 1
21818: NEG
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: LD_INT 0
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 2
21846: PUSH
21847: LD_INT 2
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 1
21856: PUSH
21857: LD_INT 2
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: LD_INT 0
21866: PUSH
21867: LD_INT 2
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 1
21876: NEG
21877: PUSH
21878: LD_INT 1
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 2
21887: NEG
21888: PUSH
21889: LD_INT 0
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 2
21898: NEG
21899: PUSH
21900: LD_INT 1
21902: NEG
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 2
21910: NEG
21911: PUSH
21912: LD_INT 2
21914: NEG
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 1
21922: NEG
21923: PUSH
21924: LD_INT 2
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 2
21933: NEG
21934: PUSH
21935: LD_INT 1
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 3
21944: NEG
21945: PUSH
21946: LD_INT 1
21948: NEG
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 3
21956: NEG
21957: PUSH
21958: LD_INT 2
21960: NEG
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21991: LD_ADDR_VAR 0 28
21995: PUSH
21996: LD_INT 0
21998: PUSH
21999: LD_INT 0
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 0
22008: PUSH
22009: LD_INT 1
22011: NEG
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 1
22019: PUSH
22020: LD_INT 0
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: LD_INT 1
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 0
22039: PUSH
22040: LD_INT 1
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 1
22049: NEG
22050: PUSH
22051: LD_INT 0
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 1
22060: NEG
22061: PUSH
22062: LD_INT 1
22064: NEG
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 1
22072: NEG
22073: PUSH
22074: LD_INT 2
22076: NEG
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 0
22084: PUSH
22085: LD_INT 2
22087: NEG
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: LD_INT 1
22098: NEG
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 2
22106: PUSH
22107: LD_INT 0
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 2
22116: PUSH
22117: LD_INT 1
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 2
22126: PUSH
22127: LD_INT 2
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: LD_INT 2
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 0
22146: PUSH
22147: LD_INT 2
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 1
22156: NEG
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 2
22167: NEG
22168: PUSH
22169: LD_INT 0
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 2
22178: NEG
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 2
22190: NEG
22191: PUSH
22192: LD_INT 2
22194: NEG
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 2
22202: NEG
22203: PUSH
22204: LD_INT 3
22206: NEG
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 1
22214: NEG
22215: PUSH
22216: LD_INT 3
22218: NEG
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 3
22226: NEG
22227: PUSH
22228: LD_INT 1
22230: NEG
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 3
22238: NEG
22239: PUSH
22240: LD_INT 2
22242: NEG
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22273: LD_ADDR_VAR 0 29
22277: PUSH
22278: LD_INT 0
22280: PUSH
22281: LD_INT 0
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 0
22290: PUSH
22291: LD_INT 1
22293: NEG
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: PUSH
22302: LD_INT 0
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 1
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 0
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 1
22331: NEG
22332: PUSH
22333: LD_INT 0
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 1
22342: NEG
22343: PUSH
22344: LD_INT 1
22346: NEG
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: LD_INT 2
22358: NEG
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 0
22366: PUSH
22367: LD_INT 2
22369: NEG
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 1
22377: PUSH
22378: LD_INT 1
22380: NEG
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 2
22388: PUSH
22389: LD_INT 0
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 2
22398: PUSH
22399: LD_INT 1
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 1
22408: PUSH
22409: LD_INT 2
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 0
22418: PUSH
22419: LD_INT 2
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 1
22428: NEG
22429: PUSH
22430: LD_INT 1
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 2
22439: NEG
22440: PUSH
22441: LD_INT 1
22443: NEG
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 2
22451: NEG
22452: PUSH
22453: LD_INT 2
22455: NEG
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 2
22463: NEG
22464: PUSH
22465: LD_INT 3
22467: NEG
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 2
22475: PUSH
22476: LD_INT 1
22478: NEG
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 3
22486: PUSH
22487: LD_INT 1
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: LD_INT 3
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 1
22506: NEG
22507: PUSH
22508: LD_INT 2
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 3
22517: NEG
22518: PUSH
22519: LD_INT 2
22521: NEG
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22552: LD_ADDR_VAR 0 30
22556: PUSH
22557: LD_INT 0
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: LD_INT 1
22572: NEG
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: LD_INT 0
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: LD_INT 1
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: LD_INT 1
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 1
22610: NEG
22611: PUSH
22612: LD_INT 0
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 1
22621: NEG
22622: PUSH
22623: LD_INT 1
22625: NEG
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 1
22633: NEG
22634: PUSH
22635: LD_INT 2
22637: NEG
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 0
22645: PUSH
22646: LD_INT 2
22648: NEG
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 1
22656: PUSH
22657: LD_INT 1
22659: NEG
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 2
22667: PUSH
22668: LD_INT 0
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 2
22677: PUSH
22678: LD_INT 1
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 2
22687: PUSH
22688: LD_INT 2
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 1
22697: PUSH
22698: LD_INT 2
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 1
22707: NEG
22708: PUSH
22709: LD_INT 1
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 2
22718: NEG
22719: PUSH
22720: LD_INT 0
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 2
22729: NEG
22730: PUSH
22731: LD_INT 1
22733: NEG
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 1
22741: NEG
22742: PUSH
22743: LD_INT 3
22745: NEG
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: LD_INT 2
22756: NEG
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 3
22764: PUSH
22765: LD_INT 2
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 2
22774: PUSH
22775: LD_INT 3
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 2
22784: NEG
22785: PUSH
22786: LD_INT 1
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 3
22795: NEG
22796: PUSH
22797: LD_INT 1
22799: NEG
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22830: LD_ADDR_VAR 0 31
22834: PUSH
22835: LD_INT 0
22837: PUSH
22838: LD_INT 0
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 0
22847: PUSH
22848: LD_INT 1
22850: NEG
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 1
22858: PUSH
22859: LD_INT 0
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: LD_INT 1
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 0
22878: PUSH
22879: LD_INT 1
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 1
22888: NEG
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 1
22899: NEG
22900: PUSH
22901: LD_INT 1
22903: NEG
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: LD_INT 1
22911: NEG
22912: PUSH
22913: LD_INT 2
22915: NEG
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: LD_INT 1
22926: NEG
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 2
22934: PUSH
22935: LD_INT 0
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 2
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 2
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: LD_INT 2
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 0
22974: PUSH
22975: LD_INT 2
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: NEG
22985: PUSH
22986: LD_INT 1
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 2
22995: NEG
22996: PUSH
22997: LD_INT 1
22999: NEG
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 2
23007: NEG
23008: PUSH
23009: LD_INT 2
23011: NEG
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 2
23019: NEG
23020: PUSH
23021: LD_INT 3
23023: NEG
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 2
23031: PUSH
23032: LD_INT 1
23034: NEG
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 3
23042: PUSH
23043: LD_INT 1
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 1
23052: PUSH
23053: LD_INT 3
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 1
23062: NEG
23063: PUSH
23064: LD_INT 2
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 3
23073: NEG
23074: PUSH
23075: LD_INT 2
23077: NEG
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23108: LD_ADDR_VAR 0 32
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: LD_INT 0
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 0
23125: PUSH
23126: LD_INT 1
23128: NEG
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: LD_INT 0
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 1
23146: PUSH
23147: LD_INT 1
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 0
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 1
23166: NEG
23167: PUSH
23168: LD_INT 0
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 1
23177: NEG
23178: PUSH
23179: LD_INT 1
23181: NEG
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 1
23189: NEG
23190: PUSH
23191: LD_INT 2
23193: NEG
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 0
23201: PUSH
23202: LD_INT 2
23204: NEG
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: LD_INT 1
23215: NEG
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 2
23223: PUSH
23224: LD_INT 1
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 2
23233: PUSH
23234: LD_INT 2
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: LD_INT 2
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 0
23253: PUSH
23254: LD_INT 2
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 1
23263: NEG
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 2
23274: NEG
23275: PUSH
23276: LD_INT 0
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 2
23285: NEG
23286: PUSH
23287: LD_INT 1
23289: NEG
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 1
23297: NEG
23298: PUSH
23299: LD_INT 3
23301: NEG
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: LD_INT 2
23312: NEG
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 3
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 2
23330: PUSH
23331: LD_INT 3
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 2
23340: NEG
23341: PUSH
23342: LD_INT 1
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 3
23351: NEG
23352: PUSH
23353: LD_INT 1
23355: NEG
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23386: LD_ADDR_VAR 0 33
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: LD_INT 0
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 0
23403: PUSH
23404: LD_INT 1
23406: NEG
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: LD_INT 0
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: LD_INT 1
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 0
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 1
23444: NEG
23445: PUSH
23446: LD_INT 0
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 1
23455: NEG
23456: PUSH
23457: LD_INT 1
23459: NEG
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 1
23467: NEG
23468: PUSH
23469: LD_INT 2
23471: NEG
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: LD_INT 1
23482: NEG
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 2
23490: PUSH
23491: LD_INT 0
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 2
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 1
23510: PUSH
23511: LD_INT 2
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 0
23520: PUSH
23521: LD_INT 2
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: NEG
23531: PUSH
23532: LD_INT 1
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 2
23541: NEG
23542: PUSH
23543: LD_INT 0
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 2
23552: NEG
23553: PUSH
23554: LD_INT 1
23556: NEG
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 2
23564: NEG
23565: PUSH
23566: LD_INT 2
23568: NEG
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 2
23576: NEG
23577: PUSH
23578: LD_INT 3
23580: NEG
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 2
23588: PUSH
23589: LD_INT 1
23591: NEG
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 3
23599: PUSH
23600: LD_INT 1
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: LD_INT 3
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 1
23619: NEG
23620: PUSH
23621: LD_INT 2
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 3
23630: NEG
23631: PUSH
23632: LD_INT 2
23634: NEG
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23665: LD_ADDR_VAR 0 34
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 0
23682: PUSH
23683: LD_INT 1
23685: NEG
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: LD_INT 0
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 1
23703: PUSH
23704: LD_INT 1
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 0
23713: PUSH
23714: LD_INT 1
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 1
23723: NEG
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: LD_INT 1
23738: NEG
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: LD_INT 2
23750: NEG
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 0
23758: PUSH
23759: LD_INT 2
23761: NEG
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 1
23769: PUSH
23770: LD_INT 1
23772: NEG
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 2
23790: PUSH
23791: LD_INT 2
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 1
23800: PUSH
23801: LD_INT 2
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 1
23810: NEG
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 2
23821: NEG
23822: PUSH
23823: LD_INT 0
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 2
23832: NEG
23833: PUSH
23834: LD_INT 1
23836: NEG
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 2
23844: NEG
23845: PUSH
23846: LD_INT 2
23848: NEG
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: NEG
23857: PUSH
23858: LD_INT 3
23860: NEG
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 1
23868: PUSH
23869: LD_INT 2
23871: NEG
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 3
23879: PUSH
23880: LD_INT 2
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 2
23889: PUSH
23890: LD_INT 3
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 2
23899: NEG
23900: PUSH
23901: LD_INT 1
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 3
23910: NEG
23911: PUSH
23912: LD_INT 1
23914: NEG
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23945: LD_ADDR_VAR 0 35
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: LD_INT 0
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: LD_INT 1
23965: NEG
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: LD_INT 0
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: LD_INT 1
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 0
23993: PUSH
23994: LD_INT 1
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 1
24014: NEG
24015: PUSH
24016: LD_INT 1
24018: NEG
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 2
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 2
24036: NEG
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24057: LD_ADDR_VAR 0 36
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: LD_INT 0
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: LD_INT 1
24077: NEG
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 1
24085: PUSH
24086: LD_INT 0
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: LD_INT 1
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: LD_INT 1
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: LD_INT 0
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: LD_INT 1
24130: NEG
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 1
24138: NEG
24139: PUSH
24140: LD_INT 2
24142: NEG
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 2
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24169: LD_ADDR_VAR 0 37
24173: PUSH
24174: LD_INT 0
24176: PUSH
24177: LD_INT 0
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 0
24186: PUSH
24187: LD_INT 1
24189: NEG
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 1
24197: PUSH
24198: LD_INT 0
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 1
24207: PUSH
24208: LD_INT 1
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: LD_INT 1
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: LD_INT 0
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 1
24238: NEG
24239: PUSH
24240: LD_INT 1
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: LD_INT 1
24253: NEG
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24281: LD_ADDR_VAR 0 38
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: LD_INT 0
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 0
24298: PUSH
24299: LD_INT 1
24301: NEG
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 1
24309: PUSH
24310: LD_INT 0
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 1
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 0
24329: PUSH
24330: LD_INT 1
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: LD_INT 0
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 1
24350: NEG
24351: PUSH
24352: LD_INT 1
24354: NEG
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 2
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 2
24372: NEG
24373: PUSH
24374: LD_INT 1
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24393: LD_ADDR_VAR 0 39
24397: PUSH
24398: LD_INT 0
24400: PUSH
24401: LD_INT 0
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 0
24410: PUSH
24411: LD_INT 1
24413: NEG
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: LD_INT 0
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 1
24451: NEG
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 1
24462: NEG
24463: PUSH
24464: LD_INT 1
24466: NEG
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: LD_INT 2
24478: NEG
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24505: LD_ADDR_VAR 0 40
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 1
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 1
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: LD_INT 1
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: LD_INT 0
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 1
24574: NEG
24575: PUSH
24576: LD_INT 1
24578: NEG
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 1
24586: PUSH
24587: LD_INT 1
24589: NEG
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 1
24597: NEG
24598: PUSH
24599: LD_INT 1
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24617: LD_ADDR_VAR 0 41
24621: PUSH
24622: LD_INT 0
24624: PUSH
24625: LD_INT 0
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 0
24634: PUSH
24635: LD_INT 1
24637: NEG
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: LD_INT 0
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: LD_INT 1
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 0
24665: PUSH
24666: LD_INT 1
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: LD_INT 0
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 1
24686: NEG
24687: PUSH
24688: LD_INT 1
24690: NEG
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 1
24698: NEG
24699: PUSH
24700: LD_INT 2
24702: NEG
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: LD_INT 1
24713: NEG
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 2
24721: PUSH
24722: LD_INT 0
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 2
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 2
24741: PUSH
24742: LD_INT 2
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 1
24751: PUSH
24752: LD_INT 2
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 2
24772: NEG
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 2
24783: NEG
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 2
24795: NEG
24796: PUSH
24797: LD_INT 2
24799: NEG
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 2
24807: NEG
24808: PUSH
24809: LD_INT 3
24811: NEG
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 2
24819: PUSH
24820: LD_INT 1
24822: NEG
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 3
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 3
24840: PUSH
24841: LD_INT 1
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 3
24850: PUSH
24851: LD_INT 2
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 3
24860: PUSH
24861: LD_INT 3
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 2
24870: PUSH
24871: LD_INT 3
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 2
24880: NEG
24881: PUSH
24882: LD_INT 1
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 3
24891: NEG
24892: PUSH
24893: LD_INT 0
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 3
24902: NEG
24903: PUSH
24904: LD_INT 1
24906: NEG
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 3
24914: NEG
24915: PUSH
24916: LD_INT 2
24918: NEG
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 3
24926: NEG
24927: PUSH
24928: LD_INT 3
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24967: LD_ADDR_VAR 0 42
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: LD_INT 0
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: LD_INT 1
24987: NEG
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 1
25005: PUSH
25006: LD_INT 1
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 0
25015: PUSH
25016: LD_INT 1
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 1
25025: NEG
25026: PUSH
25027: LD_INT 0
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: NEG
25037: PUSH
25038: LD_INT 1
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: LD_INT 2
25052: NEG
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 0
25060: PUSH
25061: LD_INT 2
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: LD_INT 1
25074: NEG
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: LD_INT 2
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: LD_INT 2
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: LD_INT 2
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: LD_INT 1
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 2
25133: NEG
25134: PUSH
25135: LD_INT 1
25137: NEG
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 2
25145: NEG
25146: PUSH
25147: LD_INT 2
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 2
25157: NEG
25158: PUSH
25159: LD_INT 3
25161: NEG
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 1
25169: NEG
25170: PUSH
25171: LD_INT 3
25173: NEG
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 0
25181: PUSH
25182: LD_INT 3
25184: NEG
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: LD_INT 2
25195: NEG
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 3
25203: PUSH
25204: LD_INT 2
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 3
25213: PUSH
25214: LD_INT 3
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 2
25223: PUSH
25224: LD_INT 3
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: LD_INT 3
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: LD_INT 3
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 1
25253: NEG
25254: PUSH
25255: LD_INT 2
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 3
25264: NEG
25265: PUSH
25266: LD_INT 2
25268: NEG
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 3
25276: NEG
25277: PUSH
25278: LD_INT 3
25280: NEG
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25317: LD_ADDR_VAR 0 43
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 0
25334: PUSH
25335: LD_INT 1
25337: NEG
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 1
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 0
25365: PUSH
25366: LD_INT 1
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 1
25375: NEG
25376: PUSH
25377: LD_INT 0
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 1
25386: NEG
25387: PUSH
25388: LD_INT 1
25390: NEG
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 1
25398: NEG
25399: PUSH
25400: LD_INT 2
25402: NEG
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 0
25410: PUSH
25411: LD_INT 2
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 1
25421: PUSH
25422: LD_INT 1
25424: NEG
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 2
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 2
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: LD_INT 2
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: LD_INT 2
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 2
25483: NEG
25484: PUSH
25485: LD_INT 0
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 2
25494: NEG
25495: PUSH
25496: LD_INT 1
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 1
25506: NEG
25507: PUSH
25508: LD_INT 3
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 0
25518: PUSH
25519: LD_INT 3
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: LD_INT 2
25532: NEG
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 2
25540: PUSH
25541: LD_INT 1
25543: NEG
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 3
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 3
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 1
25571: PUSH
25572: LD_INT 3
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: LD_INT 3
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 1
25591: NEG
25592: PUSH
25593: LD_INT 2
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 2
25602: NEG
25603: PUSH
25604: LD_INT 1
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 3
25613: NEG
25614: PUSH
25615: LD_INT 0
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 3
25624: NEG
25625: PUSH
25626: LD_INT 1
25628: NEG
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25665: LD_ADDR_VAR 0 44
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: LD_INT 0
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: LD_INT 1
25685: NEG
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: LD_INT 0
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: LD_INT 0
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: NEG
25735: PUSH
25736: LD_INT 1
25738: NEG
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 1
25746: NEG
25747: PUSH
25748: LD_INT 2
25750: NEG
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: LD_INT 1
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 2
25769: PUSH
25770: LD_INT 0
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 2
25779: PUSH
25780: LD_INT 1
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 2
25789: PUSH
25790: LD_INT 2
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 1
25809: NEG
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 2
25820: NEG
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 2
25831: NEG
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 2
25843: NEG
25844: PUSH
25845: LD_INT 2
25847: NEG
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 2
25855: NEG
25856: PUSH
25857: LD_INT 3
25859: NEG
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 2
25867: PUSH
25868: LD_INT 1
25870: NEG
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 3
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 3
25888: PUSH
25889: LD_INT 1
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 3
25898: PUSH
25899: LD_INT 2
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 3
25908: PUSH
25909: LD_INT 3
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 2
25918: PUSH
25919: LD_INT 3
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 2
25928: NEG
25929: PUSH
25930: LD_INT 1
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 3
25939: NEG
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 3
25950: NEG
25951: PUSH
25952: LD_INT 1
25954: NEG
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 3
25962: NEG
25963: PUSH
25964: LD_INT 2
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 3
25974: NEG
25975: PUSH
25976: LD_INT 3
25978: NEG
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26015: LD_ADDR_VAR 0 45
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: LD_INT 1
26035: NEG
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 1
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: NEG
26074: PUSH
26075: LD_INT 0
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: NEG
26085: PUSH
26086: LD_INT 1
26088: NEG
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 1
26096: NEG
26097: PUSH
26098: LD_INT 2
26100: NEG
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 0
26108: PUSH
26109: LD_INT 2
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: LD_INT 1
26122: NEG
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 2
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 2
26140: PUSH
26141: LD_INT 2
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: LD_INT 2
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 2
26181: NEG
26182: PUSH
26183: LD_INT 1
26185: NEG
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 2
26193: NEG
26194: PUSH
26195: LD_INT 2
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 2
26205: NEG
26206: PUSH
26207: LD_INT 3
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: NEG
26218: PUSH
26219: LD_INT 3
26221: NEG
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 0
26229: PUSH
26230: LD_INT 3
26232: NEG
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 1
26240: PUSH
26241: LD_INT 2
26243: NEG
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 3
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 3
26261: PUSH
26262: LD_INT 3
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 2
26271: PUSH
26272: LD_INT 3
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: LD_INT 3
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: LD_INT 3
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: LD_INT 2
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 3
26312: NEG
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 3
26324: NEG
26325: PUSH
26326: LD_INT 3
26328: NEG
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26365: LD_ADDR_VAR 0 46
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 0
26382: PUSH
26383: LD_INT 1
26385: NEG
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 1
26403: PUSH
26404: LD_INT 1
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: LD_INT 1
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 1
26423: NEG
26424: PUSH
26425: LD_INT 0
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: NEG
26435: PUSH
26436: LD_INT 1
26438: NEG
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 1
26446: NEG
26447: PUSH
26448: LD_INT 2
26450: NEG
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: LD_INT 2
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 1
26469: PUSH
26470: LD_INT 1
26472: NEG
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 2
26480: PUSH
26481: LD_INT 0
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 2
26490: PUSH
26491: LD_INT 1
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 1
26500: PUSH
26501: LD_INT 2
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 0
26510: PUSH
26511: LD_INT 2
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 1
26520: NEG
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 2
26531: NEG
26532: PUSH
26533: LD_INT 0
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 2
26542: NEG
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: LD_INT 3
26558: NEG
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: LD_INT 3
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 1
26577: PUSH
26578: LD_INT 2
26580: NEG
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 2
26588: PUSH
26589: LD_INT 1
26591: NEG
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 3
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 3
26609: PUSH
26610: LD_INT 1
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 1
26619: PUSH
26620: LD_INT 3
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: LD_INT 3
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 1
26639: NEG
26640: PUSH
26641: LD_INT 2
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 2
26650: NEG
26651: PUSH
26652: LD_INT 1
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 3
26661: NEG
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 3
26672: NEG
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26713: LD_ADDR_VAR 0 47
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 0
26730: PUSH
26731: LD_INT 1
26733: NEG
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 1
26751: PUSH
26752: LD_INT 1
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 0
26761: PUSH
26762: LD_INT 1
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 1
26771: NEG
26772: PUSH
26773: LD_INT 0
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 1
26782: NEG
26783: PUSH
26784: LD_INT 1
26786: NEG
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: NEG
26795: PUSH
26796: LD_INT 2
26798: NEG
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: LD_INT 2
26809: NEG
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: LD_INT 1
26820: NEG
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 2
26828: NEG
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 2
26840: NEG
26841: PUSH
26842: LD_INT 2
26844: NEG
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26864: LD_ADDR_VAR 0 48
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: LD_INT 1
26884: NEG
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 0
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: NEG
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: LD_INT 1
26937: NEG
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 1
26945: NEG
26946: PUSH
26947: LD_INT 2
26949: NEG
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: LD_INT 2
26960: NEG
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: PUSH
26969: LD_INT 1
26971: NEG
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 2
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 2
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27011: LD_ADDR_VAR 0 49
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: LD_INT 1
27031: NEG
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: LD_INT 0
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: LD_INT 1
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 1
27080: NEG
27081: PUSH
27082: LD_INT 1
27084: NEG
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 1
27092: PUSH
27093: LD_INT 1
27095: NEG
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 2
27103: PUSH
27104: LD_INT 0
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 2
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 2
27123: PUSH
27124: LD_INT 2
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: LD_INT 2
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27155: LD_ADDR_VAR 0 50
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: LD_INT 0
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 0
27172: PUSH
27173: LD_INT 1
27175: NEG
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: LD_INT 0
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 1
27213: NEG
27214: PUSH
27215: LD_INT 0
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 1
27224: NEG
27225: PUSH
27226: LD_INT 1
27228: NEG
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 2
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 2
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: PUSH
27257: LD_INT 2
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 0
27266: PUSH
27267: LD_INT 2
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 1
27276: NEG
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27299: LD_ADDR_VAR 0 51
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: LD_INT 0
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 0
27347: PUSH
27348: LD_INT 1
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: LD_INT 0
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 1
27368: NEG
27369: PUSH
27370: LD_INT 1
27372: NEG
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: LD_INT 2
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: NEG
27401: PUSH
27402: LD_INT 1
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 2
27411: NEG
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 2
27422: NEG
27423: PUSH
27424: LD_INT 1
27426: NEG
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27446: LD_ADDR_VAR 0 52
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: LD_INT 1
27466: NEG
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 1
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: LD_INT 1
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 1
27504: NEG
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 1
27515: NEG
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: LD_INT 2
27531: NEG
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 2
27550: NEG
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 2
27561: NEG
27562: PUSH
27563: LD_INT 1
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 2
27573: NEG
27574: PUSH
27575: LD_INT 2
27577: NEG
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27597: LD_ADDR_VAR 0 53
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: LD_INT 0
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 0
27614: PUSH
27615: LD_INT 1
27617: NEG
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: LD_INT 0
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: LD_INT 1
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 1
27655: NEG
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 1
27666: NEG
27667: PUSH
27668: LD_INT 1
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 1
27678: NEG
27679: PUSH
27680: LD_INT 2
27682: NEG
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: LD_INT 2
27693: NEG
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 1
27701: PUSH
27702: LD_INT 1
27704: NEG
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 2
27712: PUSH
27713: LD_INT 0
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 2
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 2
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 1
27742: PUSH
27743: LD_INT 2
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: LD_INT 2
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 1
27762: NEG
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 2
27773: NEG
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 2
27784: NEG
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 2
27796: NEG
27797: PUSH
27798: LD_INT 2
27800: NEG
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27827: LD_ADDR_VAR 0 54
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: LD_INT 1
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: NEG
27886: PUSH
27887: LD_INT 0
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 1
27896: NEG
27897: PUSH
27898: LD_INT 1
27900: NEG
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 1
27908: NEG
27909: PUSH
27910: LD_INT 2
27912: NEG
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: LD_INT 2
27923: NEG
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 1
27931: PUSH
27932: LD_INT 1
27934: NEG
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 2
27942: PUSH
27943: LD_INT 0
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 2
27952: PUSH
27953: LD_INT 1
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 2
27962: PUSH
27963: LD_INT 2
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 1
27972: PUSH
27973: LD_INT 2
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 0
27982: PUSH
27983: LD_INT 2
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 1
27992: NEG
27993: PUSH
27994: LD_INT 1
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 2
28003: NEG
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 2
28014: NEG
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 2
28026: NEG
28027: PUSH
28028: LD_INT 2
28030: NEG
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28057: LD_ADDR_VAR 0 55
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: LD_INT 0
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 0
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: LD_INT 0
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: LD_INT 1
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 0
28105: PUSH
28106: LD_INT 1
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 1
28126: NEG
28127: PUSH
28128: LD_INT 1
28130: NEG
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 1
28138: NEG
28139: PUSH
28140: LD_INT 2
28142: NEG
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 0
28150: PUSH
28151: LD_INT 2
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: LD_INT 1
28164: NEG
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 2
28172: PUSH
28173: LD_INT 0
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: LD_INT 1
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: LD_INT 2
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 1
28202: PUSH
28203: LD_INT 2
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 0
28212: PUSH
28213: LD_INT 2
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 1
28222: NEG
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 2
28233: NEG
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 2
28244: NEG
28245: PUSH
28246: LD_INT 1
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 2
28256: NEG
28257: PUSH
28258: LD_INT 2
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28287: LD_ADDR_VAR 0 56
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: LD_INT 0
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 0
28304: PUSH
28305: LD_INT 1
28307: NEG
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: LD_INT 0
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 1
28356: NEG
28357: PUSH
28358: LD_INT 1
28360: NEG
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 1
28368: NEG
28369: PUSH
28370: LD_INT 2
28372: NEG
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 0
28380: PUSH
28381: LD_INT 2
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: LD_INT 1
28394: NEG
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: LD_INT 0
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 2
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: LD_INT 2
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: LD_INT 2
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 0
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 1
28452: NEG
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 2
28463: NEG
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 2
28474: NEG
28475: PUSH
28476: LD_INT 1
28478: NEG
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 2
28486: NEG
28487: PUSH
28488: LD_INT 2
28490: NEG
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28517: LD_ADDR_VAR 0 57
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 1
28586: NEG
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 1
28598: NEG
28599: PUSH
28600: LD_INT 2
28602: NEG
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: LD_INT 2
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: PUSH
28622: LD_INT 1
28624: NEG
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 2
28632: PUSH
28633: LD_INT 0
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 2
28642: PUSH
28643: LD_INT 1
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 2
28652: PUSH
28653: LD_INT 2
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 1
28662: PUSH
28663: LD_INT 2
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 0
28672: PUSH
28673: LD_INT 2
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 1
28682: NEG
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 2
28693: NEG
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 2
28704: NEG
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 2
28716: NEG
28717: PUSH
28718: LD_INT 2
28720: NEG
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28747: LD_ADDR_VAR 0 58
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: LD_INT 0
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 0
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: LD_INT 0
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 1
28816: NEG
28817: PUSH
28818: LD_INT 1
28820: NEG
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 1
28828: NEG
28829: PUSH
28830: LD_INT 2
28832: NEG
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: LD_INT 2
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: LD_INT 1
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 2
28862: PUSH
28863: LD_INT 0
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 2
28872: PUSH
28873: LD_INT 1
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: LD_INT 2
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 1
28892: PUSH
28893: LD_INT 2
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 0
28902: PUSH
28903: LD_INT 2
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 1
28912: NEG
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 2
28923: NEG
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 2
28934: NEG
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 2
28946: NEG
28947: PUSH
28948: LD_INT 2
28950: NEG
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28977: LD_ADDR_VAR 0 59
28981: PUSH
28982: LD_INT 0
28984: PUSH
28985: LD_INT 0
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 0
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: LD_INT 1
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: LD_INT 1
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 1
29035: NEG
29036: PUSH
29037: LD_INT 0
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 1
29046: NEG
29047: PUSH
29048: LD_INT 1
29050: NEG
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29065: LD_ADDR_VAR 0 60
29069: PUSH
29070: LD_INT 0
29072: PUSH
29073: LD_INT 0
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 0
29113: PUSH
29114: LD_INT 1
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 1
29123: NEG
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: LD_INT 1
29138: NEG
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29153: LD_ADDR_VAR 0 61
29157: PUSH
29158: LD_INT 0
29160: PUSH
29161: LD_INT 0
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: LD_INT 1
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: LD_INT 0
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: LD_INT 1
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 0
29201: PUSH
29202: LD_INT 1
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 1
29211: NEG
29212: PUSH
29213: LD_INT 0
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 1
29222: NEG
29223: PUSH
29224: LD_INT 1
29226: NEG
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29241: LD_ADDR_VAR 0 62
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: LD_INT 0
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 0
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 1
29299: NEG
29300: PUSH
29301: LD_INT 0
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 1
29310: NEG
29311: PUSH
29312: LD_INT 1
29314: NEG
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29329: LD_ADDR_VAR 0 63
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 0
29346: PUSH
29347: LD_INT 1
29349: NEG
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 1
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 0
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 1
29387: NEG
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 1
29398: NEG
29399: PUSH
29400: LD_INT 1
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29417: LD_ADDR_VAR 0 64
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: LD_INT 0
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 0
29434: PUSH
29435: LD_INT 1
29437: NEG
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: LD_INT 0
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 1
29455: PUSH
29456: LD_INT 1
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: LD_INT 1
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 1
29486: NEG
29487: PUSH
29488: LD_INT 1
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: ST_TO_ADDR
// end ; 1 :
29505: GO 35402
29507: LD_INT 1
29509: DOUBLE
29510: EQUAL
29511: IFTRUE 29515
29513: GO 32138
29515: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29516: LD_ADDR_VAR 0 11
29520: PUSH
29521: LD_INT 1
29523: NEG
29524: PUSH
29525: LD_INT 3
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 0
29535: PUSH
29536: LD_INT 3
29538: NEG
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: LD_INT 2
29549: NEG
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: LIST
29559: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29560: LD_ADDR_VAR 0 12
29564: PUSH
29565: LD_INT 2
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 3
29578: PUSH
29579: LD_INT 0
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 3
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: LIST
29600: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29601: LD_ADDR_VAR 0 13
29605: PUSH
29606: LD_INT 3
29608: PUSH
29609: LD_INT 2
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 3
29618: PUSH
29619: LD_INT 3
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 2
29628: PUSH
29629: LD_INT 3
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: LIST
29640: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29641: LD_ADDR_VAR 0 14
29645: PUSH
29646: LD_INT 1
29648: PUSH
29649: LD_INT 3
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 0
29658: PUSH
29659: LD_INT 3
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 1
29668: NEG
29669: PUSH
29670: LD_INT 2
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: LIST
29681: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29682: LD_ADDR_VAR 0 15
29686: PUSH
29687: LD_INT 2
29689: NEG
29690: PUSH
29691: LD_INT 1
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 3
29700: NEG
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 3
29711: NEG
29712: PUSH
29713: LD_INT 1
29715: NEG
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: LIST
29725: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29726: LD_ADDR_VAR 0 16
29730: PUSH
29731: LD_INT 2
29733: NEG
29734: PUSH
29735: LD_INT 3
29737: NEG
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 3
29745: NEG
29746: PUSH
29747: LD_INT 2
29749: NEG
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 3
29757: NEG
29758: PUSH
29759: LD_INT 3
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: LIST
29771: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29772: LD_ADDR_VAR 0 17
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: LD_INT 3
29783: NEG
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 0
29791: PUSH
29792: LD_INT 3
29794: NEG
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: PUSH
29803: LD_INT 2
29805: NEG
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: LIST
29815: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29816: LD_ADDR_VAR 0 18
29820: PUSH
29821: LD_INT 2
29823: PUSH
29824: LD_INT 1
29826: NEG
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 3
29834: PUSH
29835: LD_INT 0
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 3
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: LIST
29856: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29857: LD_ADDR_VAR 0 19
29861: PUSH
29862: LD_INT 3
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 3
29874: PUSH
29875: LD_INT 3
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: LD_INT 3
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: LIST
29896: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29897: LD_ADDR_VAR 0 20
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: LD_INT 3
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 0
29914: PUSH
29915: LD_INT 3
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 1
29924: NEG
29925: PUSH
29926: LD_INT 2
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: LIST
29937: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29938: LD_ADDR_VAR 0 21
29942: PUSH
29943: LD_INT 2
29945: NEG
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 3
29956: NEG
29957: PUSH
29958: LD_INT 0
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 3
29967: NEG
29968: PUSH
29969: LD_INT 1
29971: NEG
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: LIST
29981: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29982: LD_ADDR_VAR 0 22
29986: PUSH
29987: LD_INT 2
29989: NEG
29990: PUSH
29991: LD_INT 3
29993: NEG
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 3
30001: NEG
30002: PUSH
30003: LD_INT 2
30005: NEG
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 3
30013: NEG
30014: PUSH
30015: LD_INT 3
30017: NEG
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: LIST
30027: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30028: LD_ADDR_VAR 0 23
30032: PUSH
30033: LD_INT 0
30035: PUSH
30036: LD_INT 3
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 1
30046: NEG
30047: PUSH
30048: LD_INT 4
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 1
30058: PUSH
30059: LD_INT 3
30061: NEG
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: LIST
30071: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30072: LD_ADDR_VAR 0 24
30076: PUSH
30077: LD_INT 3
30079: PUSH
30080: LD_INT 0
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 3
30089: PUSH
30090: LD_INT 1
30092: NEG
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 4
30100: PUSH
30101: LD_INT 1
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: LIST
30112: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30113: LD_ADDR_VAR 0 25
30117: PUSH
30118: LD_INT 3
30120: PUSH
30121: LD_INT 3
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 4
30130: PUSH
30131: LD_INT 3
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 3
30140: PUSH
30141: LD_INT 4
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: LIST
30152: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30153: LD_ADDR_VAR 0 26
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: LD_INT 3
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: LD_INT 4
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 1
30180: NEG
30181: PUSH
30182: LD_INT 3
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: LIST
30193: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30194: LD_ADDR_VAR 0 27
30198: PUSH
30199: LD_INT 3
30201: NEG
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 3
30212: NEG
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 4
30223: NEG
30224: PUSH
30225: LD_INT 1
30227: NEG
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: LIST
30237: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30238: LD_ADDR_VAR 0 28
30242: PUSH
30243: LD_INT 3
30245: NEG
30246: PUSH
30247: LD_INT 3
30249: NEG
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 3
30257: NEG
30258: PUSH
30259: LD_INT 4
30261: NEG
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 4
30269: NEG
30270: PUSH
30271: LD_INT 3
30273: NEG
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: LIST
30283: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30284: LD_ADDR_VAR 0 29
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: LD_INT 3
30295: NEG
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 0
30303: PUSH
30304: LD_INT 3
30306: NEG
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: PUSH
30315: LD_INT 2
30317: NEG
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: LD_INT 4
30329: NEG
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: LD_INT 4
30340: NEG
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: LD_INT 3
30351: NEG
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 1
30359: NEG
30360: PUSH
30361: LD_INT 5
30363: NEG
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: LD_INT 5
30374: NEG
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: LD_INT 4
30385: NEG
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: LD_INT 6
30397: NEG
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 0
30405: PUSH
30406: LD_INT 6
30408: NEG
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 1
30416: PUSH
30417: LD_INT 5
30419: NEG
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30439: LD_ADDR_VAR 0 30
30443: PUSH
30444: LD_INT 2
30446: PUSH
30447: LD_INT 1
30449: NEG
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 3
30457: PUSH
30458: LD_INT 0
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 3
30467: PUSH
30468: LD_INT 1
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 3
30477: PUSH
30478: LD_INT 1
30480: NEG
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 4
30488: PUSH
30489: LD_INT 0
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 4
30498: PUSH
30499: LD_INT 1
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 4
30508: PUSH
30509: LD_INT 1
30511: NEG
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 5
30519: PUSH
30520: LD_INT 0
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 5
30529: PUSH
30530: LD_INT 1
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 5
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 6
30550: PUSH
30551: LD_INT 0
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 6
30560: PUSH
30561: LD_INT 1
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30582: LD_ADDR_VAR 0 31
30586: PUSH
30587: LD_INT 3
30589: PUSH
30590: LD_INT 2
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 3
30599: PUSH
30600: LD_INT 3
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 2
30609: PUSH
30610: LD_INT 3
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 4
30619: PUSH
30620: LD_INT 3
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 4
30629: PUSH
30630: LD_INT 4
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 3
30639: PUSH
30640: LD_INT 4
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 5
30649: PUSH
30650: LD_INT 4
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 5
30659: PUSH
30660: LD_INT 5
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 4
30669: PUSH
30670: LD_INT 5
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 6
30679: PUSH
30680: LD_INT 5
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 6
30689: PUSH
30690: LD_INT 6
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 5
30699: PUSH
30700: LD_INT 6
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30721: LD_ADDR_VAR 0 32
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: LD_INT 3
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: LD_INT 3
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 1
30748: NEG
30749: PUSH
30750: LD_INT 2
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 1
30759: PUSH
30760: LD_INT 4
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: LD_INT 4
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: LD_INT 3
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: LD_INT 5
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 0
30800: PUSH
30801: LD_INT 5
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 1
30810: NEG
30811: PUSH
30812: LD_INT 4
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: LD_INT 6
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: LD_INT 6
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 1
30841: NEG
30842: PUSH
30843: LD_INT 5
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30864: LD_ADDR_VAR 0 33
30868: PUSH
30869: LD_INT 2
30871: NEG
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 3
30882: NEG
30883: PUSH
30884: LD_INT 0
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 3
30893: NEG
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 3
30905: NEG
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 4
30916: NEG
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 4
30927: NEG
30928: PUSH
30929: LD_INT 1
30931: NEG
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 4
30939: NEG
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 5
30950: NEG
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 5
30961: NEG
30962: PUSH
30963: LD_INT 1
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 5
30973: NEG
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 6
30984: NEG
30985: PUSH
30986: LD_INT 0
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 6
30995: NEG
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31019: LD_ADDR_VAR 0 34
31023: PUSH
31024: LD_INT 2
31026: NEG
31027: PUSH
31028: LD_INT 3
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 3
31038: NEG
31039: PUSH
31040: LD_INT 2
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 3
31050: NEG
31051: PUSH
31052: LD_INT 3
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 3
31062: NEG
31063: PUSH
31064: LD_INT 4
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 4
31074: NEG
31075: PUSH
31076: LD_INT 3
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 4
31086: NEG
31087: PUSH
31088: LD_INT 4
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 4
31098: NEG
31099: PUSH
31100: LD_INT 5
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 5
31110: NEG
31111: PUSH
31112: LD_INT 4
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 5
31122: NEG
31123: PUSH
31124: LD_INT 5
31126: NEG
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 5
31134: NEG
31135: PUSH
31136: LD_INT 6
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 6
31146: NEG
31147: PUSH
31148: LD_INT 5
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 6
31158: NEG
31159: PUSH
31160: LD_INT 6
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31182: LD_ADDR_VAR 0 41
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: LD_INT 2
31192: NEG
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 1
31200: NEG
31201: PUSH
31202: LD_INT 3
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 1
31212: PUSH
31213: LD_INT 2
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: LIST
31225: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31226: LD_ADDR_VAR 0 42
31230: PUSH
31231: LD_INT 2
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 2
31243: PUSH
31244: LD_INT 1
31246: NEG
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 3
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: LIST
31266: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31267: LD_ADDR_VAR 0 43
31271: PUSH
31272: LD_INT 2
31274: PUSH
31275: LD_INT 2
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 3
31284: PUSH
31285: LD_INT 2
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 2
31294: PUSH
31295: LD_INT 3
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: LIST
31306: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31307: LD_ADDR_VAR 0 44
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 1
31324: PUSH
31325: LD_INT 3
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 1
31334: NEG
31335: PUSH
31336: LD_INT 2
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: LIST
31347: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31348: LD_ADDR_VAR 0 45
31352: PUSH
31353: LD_INT 2
31355: NEG
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 2
31366: NEG
31367: PUSH
31368: LD_INT 1
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 3
31377: NEG
31378: PUSH
31379: LD_INT 1
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31392: LD_ADDR_VAR 0 46
31396: PUSH
31397: LD_INT 2
31399: NEG
31400: PUSH
31401: LD_INT 2
31403: NEG
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 2
31411: NEG
31412: PUSH
31413: LD_INT 3
31415: NEG
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 3
31423: NEG
31424: PUSH
31425: LD_INT 2
31427: NEG
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: LIST
31437: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31438: LD_ADDR_VAR 0 47
31442: PUSH
31443: LD_INT 2
31445: NEG
31446: PUSH
31447: LD_INT 3
31449: NEG
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PUSH
31459: LD_INT 3
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31471: LD_ADDR_VAR 0 48
31475: PUSH
31476: LD_INT 1
31478: PUSH
31479: LD_INT 2
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31502: LD_ADDR_VAR 0 49
31506: PUSH
31507: LD_INT 3
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 3
31519: PUSH
31520: LD_INT 2
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31531: LD_ADDR_VAR 0 50
31535: PUSH
31536: LD_INT 2
31538: PUSH
31539: LD_INT 3
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: LD_INT 3
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31560: LD_ADDR_VAR 0 51
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: LD_INT 2
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 2
31578: NEG
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31591: LD_ADDR_VAR 0 52
31595: PUSH
31596: LD_INT 3
31598: NEG
31599: PUSH
31600: LD_INT 1
31602: NEG
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 3
31610: NEG
31611: PUSH
31612: LD_INT 2
31614: NEG
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31624: LD_ADDR_VAR 0 53
31628: PUSH
31629: LD_INT 1
31631: NEG
31632: PUSH
31633: LD_INT 3
31635: NEG
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: LD_INT 3
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: LD_INT 2
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: LIST
31667: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31668: LD_ADDR_VAR 0 54
31672: PUSH
31673: LD_INT 2
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 3
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 3
31696: PUSH
31697: LD_INT 1
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: LIST
31708: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31709: LD_ADDR_VAR 0 55
31713: PUSH
31714: LD_INT 3
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 3
31726: PUSH
31727: LD_INT 3
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 2
31736: PUSH
31737: LD_INT 3
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: LIST
31748: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31749: LD_ADDR_VAR 0 56
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: LD_INT 3
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: LD_INT 3
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: NEG
31777: PUSH
31778: LD_INT 2
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31790: LD_ADDR_VAR 0 57
31794: PUSH
31795: LD_INT 2
31797: NEG
31798: PUSH
31799: LD_INT 1
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 3
31808: NEG
31809: PUSH
31810: LD_INT 0
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 3
31819: NEG
31820: PUSH
31821: LD_INT 1
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: LIST
31833: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31834: LD_ADDR_VAR 0 58
31838: PUSH
31839: LD_INT 2
31841: NEG
31842: PUSH
31843: LD_INT 3
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 3
31853: NEG
31854: PUSH
31855: LD_INT 2
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 3
31865: NEG
31866: PUSH
31867: LD_INT 3
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: LIST
31879: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31880: LD_ADDR_VAR 0 59
31884: PUSH
31885: LD_INT 1
31887: NEG
31888: PUSH
31889: LD_INT 2
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 0
31899: PUSH
31900: LD_INT 2
31902: NEG
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: LD_INT 1
31913: NEG
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: LIST
31923: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31924: LD_ADDR_VAR 0 60
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: LD_INT 1
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 2
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: LD_INT 1
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: LIST
31964: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31965: LD_ADDR_VAR 0 61
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 1
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: LIST
32004: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32005: LD_ADDR_VAR 0 62
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: LD_INT 2
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: LD_INT 2
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: NEG
32033: PUSH
32034: LD_INT 1
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: LIST
32045: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32046: LD_ADDR_VAR 0 63
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: LD_INT 1
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 2
32064: NEG
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: NEG
32076: PUSH
32077: LD_INT 1
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: LIST
32089: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32090: LD_ADDR_VAR 0 64
32094: PUSH
32095: LD_INT 1
32097: NEG
32098: PUSH
32099: LD_INT 2
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 2
32109: NEG
32110: PUSH
32111: LD_INT 1
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 2
32121: NEG
32122: PUSH
32123: LD_INT 2
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: LIST
32135: ST_TO_ADDR
// end ; 2 :
32136: GO 35402
32138: LD_INT 2
32140: DOUBLE
32141: EQUAL
32142: IFTRUE 32146
32144: GO 35401
32146: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32147: LD_ADDR_VAR 0 29
32151: PUSH
32152: LD_INT 4
32154: PUSH
32155: LD_INT 0
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 4
32164: PUSH
32165: LD_INT 1
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 5
32175: PUSH
32176: LD_INT 0
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 5
32185: PUSH
32186: LD_INT 1
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 4
32195: PUSH
32196: LD_INT 1
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 3
32205: PUSH
32206: LD_INT 0
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 3
32215: PUSH
32216: LD_INT 1
32218: NEG
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 3
32226: PUSH
32227: LD_INT 2
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 5
32237: PUSH
32238: LD_INT 2
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 3
32247: PUSH
32248: LD_INT 3
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 3
32257: PUSH
32258: LD_INT 2
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 4
32267: PUSH
32268: LD_INT 3
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 4
32277: PUSH
32278: LD_INT 4
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 3
32287: PUSH
32288: LD_INT 4
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 2
32297: PUSH
32298: LD_INT 3
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 2
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 4
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 4
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: LD_INT 4
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: LD_INT 3
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 1
32357: PUSH
32358: LD_INT 4
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: PUSH
32368: LD_INT 5
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 0
32377: PUSH
32378: LD_INT 5
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 1
32387: NEG
32388: PUSH
32389: LD_INT 4
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: NEG
32399: PUSH
32400: LD_INT 3
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 2
32409: PUSH
32410: LD_INT 5
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 2
32419: NEG
32420: PUSH
32421: LD_INT 3
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 3
32430: NEG
32431: PUSH
32432: LD_INT 0
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 3
32441: NEG
32442: PUSH
32443: LD_INT 1
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 2
32453: NEG
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 2
32464: NEG
32465: PUSH
32466: LD_INT 1
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 3
32475: NEG
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 4
32486: NEG
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 4
32497: NEG
32498: PUSH
32499: LD_INT 1
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 4
32509: NEG
32510: PUSH
32511: LD_INT 2
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 2
32521: NEG
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 4
32532: NEG
32533: PUSH
32534: LD_INT 4
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 4
32544: NEG
32545: PUSH
32546: LD_INT 5
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 3
32556: NEG
32557: PUSH
32558: LD_INT 4
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 3
32568: NEG
32569: PUSH
32570: LD_INT 3
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 4
32580: NEG
32581: PUSH
32582: LD_INT 3
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 5
32592: NEG
32593: PUSH
32594: LD_INT 4
32596: NEG
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 5
32604: NEG
32605: PUSH
32606: LD_INT 5
32608: NEG
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 3
32616: NEG
32617: PUSH
32618: LD_INT 5
32620: NEG
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 5
32628: NEG
32629: PUSH
32630: LD_INT 3
32632: NEG
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32685: LD_ADDR_VAR 0 30
32689: PUSH
32690: LD_INT 4
32692: PUSH
32693: LD_INT 4
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 4
32702: PUSH
32703: LD_INT 3
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 5
32712: PUSH
32713: LD_INT 4
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 5
32722: PUSH
32723: LD_INT 5
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 4
32732: PUSH
32733: LD_INT 5
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 3
32742: PUSH
32743: LD_INT 4
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 3
32752: PUSH
32753: LD_INT 3
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 5
32762: PUSH
32763: LD_INT 3
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 3
32772: PUSH
32773: LD_INT 5
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 3
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: LD_INT 2
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: LD_INT 3
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 1
32812: PUSH
32813: LD_INT 4
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 0
32822: PUSH
32823: LD_INT 4
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: LD_INT 3
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: PUSH
32845: LD_INT 2
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: LD_INT 4
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 2
32864: NEG
32865: PUSH
32866: LD_INT 2
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 4
32875: NEG
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 4
32886: NEG
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 3
32898: NEG
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 3
32909: NEG
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 4
32920: NEG
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 5
32931: NEG
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 5
32942: NEG
32943: PUSH
32944: LD_INT 1
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 5
32954: NEG
32955: PUSH
32956: LD_INT 2
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 3
32966: NEG
32967: PUSH
32968: LD_INT 2
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 3
32977: NEG
32978: PUSH
32979: LD_INT 3
32981: NEG
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 3
32989: NEG
32990: PUSH
32991: LD_INT 4
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 2
33001: NEG
33002: PUSH
33003: LD_INT 3
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 2
33013: NEG
33014: PUSH
33015: LD_INT 2
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 3
33025: NEG
33026: PUSH
33027: LD_INT 2
33029: NEG
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 4
33037: NEG
33038: PUSH
33039: LD_INT 3
33041: NEG
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 4
33049: NEG
33050: PUSH
33051: LD_INT 4
33053: NEG
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 2
33061: NEG
33062: PUSH
33063: LD_INT 4
33065: NEG
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 4
33073: NEG
33074: PUSH
33075: LD_INT 2
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 0
33085: PUSH
33086: LD_INT 4
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 5
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: LD_INT 4
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: PUSH
33119: LD_INT 3
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 0
33129: PUSH
33130: LD_INT 3
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 1
33140: NEG
33141: PUSH
33142: LD_INT 4
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: LD_INT 5
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: LD_INT 3
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 2
33175: NEG
33176: PUSH
33177: LD_INT 5
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33232: LD_ADDR_VAR 0 31
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: LD_INT 4
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 0
33249: PUSH
33250: LD_INT 3
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: LD_INT 4
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: LD_INT 5
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 0
33279: PUSH
33280: LD_INT 5
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 1
33289: NEG
33290: PUSH
33291: LD_INT 4
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 1
33300: NEG
33301: PUSH
33302: LD_INT 3
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 2
33311: PUSH
33312: LD_INT 5
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 2
33321: NEG
33322: PUSH
33323: LD_INT 3
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 3
33332: NEG
33333: PUSH
33334: LD_INT 0
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 3
33343: NEG
33344: PUSH
33345: LD_INT 1
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 2
33355: NEG
33356: PUSH
33357: LD_INT 0
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 2
33366: NEG
33367: PUSH
33368: LD_INT 1
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 3
33377: NEG
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 4
33388: NEG
33389: PUSH
33390: LD_INT 0
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 4
33399: NEG
33400: PUSH
33401: LD_INT 1
33403: NEG
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 4
33411: NEG
33412: PUSH
33413: LD_INT 2
33415: NEG
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 2
33423: NEG
33424: PUSH
33425: LD_INT 2
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 4
33434: NEG
33435: PUSH
33436: LD_INT 4
33438: NEG
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 4
33446: NEG
33447: PUSH
33448: LD_INT 5
33450: NEG
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 3
33458: NEG
33459: PUSH
33460: LD_INT 4
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 3
33470: NEG
33471: PUSH
33472: LD_INT 3
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 4
33482: NEG
33483: PUSH
33484: LD_INT 3
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 5
33494: NEG
33495: PUSH
33496: LD_INT 4
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 5
33506: NEG
33507: PUSH
33508: LD_INT 5
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 3
33518: NEG
33519: PUSH
33520: LD_INT 5
33522: NEG
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 5
33530: NEG
33531: PUSH
33532: LD_INT 3
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: LD_INT 3
33545: NEG
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: LD_INT 4
33556: NEG
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 1
33564: PUSH
33565: LD_INT 3
33567: NEG
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 1
33575: PUSH
33576: LD_INT 2
33578: NEG
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 0
33586: PUSH
33587: LD_INT 2
33589: NEG
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 1
33597: NEG
33598: PUSH
33599: LD_INT 3
33601: NEG
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: LD_INT 4
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 2
33621: PUSH
33622: LD_INT 2
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: NEG
33633: PUSH
33634: LD_INT 4
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 4
33644: PUSH
33645: LD_INT 0
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 4
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 5
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 5
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 4
33685: PUSH
33686: LD_INT 1
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 3
33695: PUSH
33696: LD_INT 0
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 3
33705: PUSH
33706: LD_INT 1
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 3
33716: PUSH
33717: LD_INT 2
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 5
33727: PUSH
33728: LD_INT 2
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33782: LD_ADDR_VAR 0 32
33786: PUSH
33787: LD_INT 4
33789: NEG
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 4
33800: NEG
33801: PUSH
33802: LD_INT 1
33804: NEG
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 3
33812: NEG
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 3
33823: NEG
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 4
33834: NEG
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 5
33845: NEG
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 5
33856: NEG
33857: PUSH
33858: LD_INT 1
33860: NEG
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 5
33868: NEG
33869: PUSH
33870: LD_INT 2
33872: NEG
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 3
33880: NEG
33881: PUSH
33882: LD_INT 2
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 3
33891: NEG
33892: PUSH
33893: LD_INT 3
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 3
33903: NEG
33904: PUSH
33905: LD_INT 4
33907: NEG
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 2
33915: NEG
33916: PUSH
33917: LD_INT 3
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 2
33927: NEG
33928: PUSH
33929: LD_INT 2
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 3
33939: NEG
33940: PUSH
33941: LD_INT 2
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 4
33951: NEG
33952: PUSH
33953: LD_INT 3
33955: NEG
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 4
33963: NEG
33964: PUSH
33965: LD_INT 4
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 2
33975: NEG
33976: PUSH
33977: LD_INT 4
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 4
33987: NEG
33988: PUSH
33989: LD_INT 2
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: LD_INT 4
34002: NEG
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: LD_INT 5
34013: NEG
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 1
34021: PUSH
34022: LD_INT 4
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: PUSH
34033: LD_INT 3
34035: NEG
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: LD_INT 3
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: NEG
34055: PUSH
34056: LD_INT 4
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: LD_INT 5
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 2
34078: PUSH
34079: LD_INT 3
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 2
34089: NEG
34090: PUSH
34091: LD_INT 5
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 3
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 3
34111: PUSH
34112: LD_INT 1
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 4
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 4
34132: PUSH
34133: LD_INT 1
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 3
34142: PUSH
34143: LD_INT 1
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: LD_INT 1
34165: NEG
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: LD_INT 2
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 4
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 4
34194: PUSH
34195: LD_INT 4
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 4
34204: PUSH
34205: LD_INT 3
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 5
34214: PUSH
34215: LD_INT 4
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 5
34224: PUSH
34225: LD_INT 5
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 4
34234: PUSH
34235: LD_INT 5
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 3
34244: PUSH
34245: LD_INT 4
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 3
34254: PUSH
34255: LD_INT 3
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 5
34264: PUSH
34265: LD_INT 3
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 3
34274: PUSH
34275: LD_INT 5
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34329: LD_ADDR_VAR 0 33
34333: PUSH
34334: LD_INT 4
34336: NEG
34337: PUSH
34338: LD_INT 4
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 4
34348: NEG
34349: PUSH
34350: LD_INT 5
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 3
34360: NEG
34361: PUSH
34362: LD_INT 4
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 3
34372: NEG
34373: PUSH
34374: LD_INT 3
34376: NEG
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 4
34384: NEG
34385: PUSH
34386: LD_INT 3
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 5
34396: NEG
34397: PUSH
34398: LD_INT 4
34400: NEG
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 5
34408: NEG
34409: PUSH
34410: LD_INT 5
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 3
34420: NEG
34421: PUSH
34422: LD_INT 5
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 5
34432: NEG
34433: PUSH
34434: LD_INT 3
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 0
34444: PUSH
34445: LD_INT 3
34447: NEG
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 0
34455: PUSH
34456: LD_INT 4
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: LD_INT 3
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: LD_INT 2
34480: NEG
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: LD_INT 2
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 1
34499: NEG
34500: PUSH
34501: LD_INT 3
34503: NEG
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: LD_INT 4
34515: NEG
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: LD_INT 2
34526: NEG
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: LD_INT 4
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 4
34546: PUSH
34547: LD_INT 0
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 4
34556: PUSH
34557: LD_INT 1
34559: NEG
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 5
34567: PUSH
34568: LD_INT 0
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 5
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 4
34587: PUSH
34588: LD_INT 1
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 3
34597: PUSH
34598: LD_INT 0
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 3
34607: PUSH
34608: LD_INT 1
34610: NEG
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 3
34618: PUSH
34619: LD_INT 2
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 5
34629: PUSH
34630: LD_INT 2
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 3
34639: PUSH
34640: LD_INT 3
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 3
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 4
34659: PUSH
34660: LD_INT 3
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 4
34669: PUSH
34670: LD_INT 4
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 3
34679: PUSH
34680: LD_INT 4
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 2
34689: PUSH
34690: LD_INT 3
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 2
34699: PUSH
34700: LD_INT 2
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 4
34709: PUSH
34710: LD_INT 2
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: LD_INT 4
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 4
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: LD_INT 3
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: LD_INT 4
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 1
34759: PUSH
34760: LD_INT 5
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: LD_INT 5
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: LD_INT 4
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: LD_INT 3
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 2
34801: PUSH
34802: LD_INT 5
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 2
34811: NEG
34812: PUSH
34813: LD_INT 3
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34867: LD_ADDR_VAR 0 34
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: LD_INT 4
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: LD_INT 5
34888: NEG
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: PUSH
34897: LD_INT 4
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 1
34907: PUSH
34908: LD_INT 3
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 0
34918: PUSH
34919: LD_INT 3
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: LD_INT 4
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: PUSH
34943: LD_INT 5
34945: NEG
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: LD_INT 3
34956: NEG
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 2
34964: NEG
34965: PUSH
34966: LD_INT 5
34968: NEG
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 3
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 3
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 4
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 4
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 3
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: LD_INT 0
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 2
35037: PUSH
35038: LD_INT 1
35040: NEG
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 2
35048: PUSH
35049: LD_INT 2
35051: NEG
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 4
35059: PUSH
35060: LD_INT 2
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 4
35069: PUSH
35070: LD_INT 4
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 4
35079: PUSH
35080: LD_INT 3
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 5
35089: PUSH
35090: LD_INT 4
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 5
35099: PUSH
35100: LD_INT 5
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 4
35109: PUSH
35110: LD_INT 5
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 3
35119: PUSH
35120: LD_INT 4
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 3
35129: PUSH
35130: LD_INT 3
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 5
35139: PUSH
35140: LD_INT 3
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 3
35149: PUSH
35150: LD_INT 5
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: LD_INT 3
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: LD_INT 2
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: LD_INT 3
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: LD_INT 4
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: LD_INT 4
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 1
35209: NEG
35210: PUSH
35211: LD_INT 3
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: NEG
35221: PUSH
35222: LD_INT 2
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 2
35231: PUSH
35232: LD_INT 4
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 2
35241: NEG
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 4
35252: NEG
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 4
35263: NEG
35264: PUSH
35265: LD_INT 1
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 3
35275: NEG
35276: PUSH
35277: LD_INT 0
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 3
35286: NEG
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 4
35297: NEG
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 5
35308: NEG
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 5
35319: NEG
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 5
35331: NEG
35332: PUSH
35333: LD_INT 2
35335: NEG
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 3
35343: NEG
35344: PUSH
35345: LD_INT 2
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: ST_TO_ADDR
// end ; end ;
35399: GO 35402
35401: POP
// case btype of b_depot , b_warehouse :
35402: LD_VAR 0 1
35406: PUSH
35407: LD_INT 0
35409: DOUBLE
35410: EQUAL
35411: IFTRUE 35421
35413: LD_INT 1
35415: DOUBLE
35416: EQUAL
35417: IFTRUE 35421
35419: GO 35622
35421: POP
// case nation of nation_american :
35422: LD_VAR 0 5
35426: PUSH
35427: LD_INT 1
35429: DOUBLE
35430: EQUAL
35431: IFTRUE 35435
35433: GO 35491
35435: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
35436: LD_ADDR_VAR 0 9
35440: PUSH
35441: LD_VAR 0 11
35445: PUSH
35446: LD_VAR 0 12
35450: PUSH
35451: LD_VAR 0 13
35455: PUSH
35456: LD_VAR 0 14
35460: PUSH
35461: LD_VAR 0 15
35465: PUSH
35466: LD_VAR 0 16
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: PUSH
35479: LD_VAR 0 4
35483: PUSH
35484: LD_INT 1
35486: PLUS
35487: ARRAY
35488: ST_TO_ADDR
35489: GO 35620
35491: LD_INT 2
35493: DOUBLE
35494: EQUAL
35495: IFTRUE 35499
35497: GO 35555
35499: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
35500: LD_ADDR_VAR 0 9
35504: PUSH
35505: LD_VAR 0 17
35509: PUSH
35510: LD_VAR 0 18
35514: PUSH
35515: LD_VAR 0 19
35519: PUSH
35520: LD_VAR 0 20
35524: PUSH
35525: LD_VAR 0 21
35529: PUSH
35530: LD_VAR 0 22
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: PUSH
35543: LD_VAR 0 4
35547: PUSH
35548: LD_INT 1
35550: PLUS
35551: ARRAY
35552: ST_TO_ADDR
35553: GO 35620
35555: LD_INT 3
35557: DOUBLE
35558: EQUAL
35559: IFTRUE 35563
35561: GO 35619
35563: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35564: LD_ADDR_VAR 0 9
35568: PUSH
35569: LD_VAR 0 23
35573: PUSH
35574: LD_VAR 0 24
35578: PUSH
35579: LD_VAR 0 25
35583: PUSH
35584: LD_VAR 0 26
35588: PUSH
35589: LD_VAR 0 27
35593: PUSH
35594: LD_VAR 0 28
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: PUSH
35607: LD_VAR 0 4
35611: PUSH
35612: LD_INT 1
35614: PLUS
35615: ARRAY
35616: ST_TO_ADDR
35617: GO 35620
35619: POP
35620: GO 36169
35622: LD_INT 2
35624: DOUBLE
35625: EQUAL
35626: IFTRUE 35636
35628: LD_INT 3
35630: DOUBLE
35631: EQUAL
35632: IFTRUE 35636
35634: GO 35692
35636: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35637: LD_ADDR_VAR 0 9
35641: PUSH
35642: LD_VAR 0 29
35646: PUSH
35647: LD_VAR 0 30
35651: PUSH
35652: LD_VAR 0 31
35656: PUSH
35657: LD_VAR 0 32
35661: PUSH
35662: LD_VAR 0 33
35666: PUSH
35667: LD_VAR 0 34
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: PUSH
35680: LD_VAR 0 4
35684: PUSH
35685: LD_INT 1
35687: PLUS
35688: ARRAY
35689: ST_TO_ADDR
35690: GO 36169
35692: LD_INT 16
35694: DOUBLE
35695: EQUAL
35696: IFTRUE 35748
35698: LD_INT 17
35700: DOUBLE
35701: EQUAL
35702: IFTRUE 35748
35704: LD_INT 18
35706: DOUBLE
35707: EQUAL
35708: IFTRUE 35748
35710: LD_INT 19
35712: DOUBLE
35713: EQUAL
35714: IFTRUE 35748
35716: LD_INT 20
35718: DOUBLE
35719: EQUAL
35720: IFTRUE 35748
35722: LD_INT 21
35724: DOUBLE
35725: EQUAL
35726: IFTRUE 35748
35728: LD_INT 23
35730: DOUBLE
35731: EQUAL
35732: IFTRUE 35748
35734: LD_INT 24
35736: DOUBLE
35737: EQUAL
35738: IFTRUE 35748
35740: LD_INT 25
35742: DOUBLE
35743: EQUAL
35744: IFTRUE 35748
35746: GO 35804
35748: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35749: LD_ADDR_VAR 0 9
35753: PUSH
35754: LD_VAR 0 35
35758: PUSH
35759: LD_VAR 0 36
35763: PUSH
35764: LD_VAR 0 37
35768: PUSH
35769: LD_VAR 0 38
35773: PUSH
35774: LD_VAR 0 39
35778: PUSH
35779: LD_VAR 0 40
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: PUSH
35792: LD_VAR 0 4
35796: PUSH
35797: LD_INT 1
35799: PLUS
35800: ARRAY
35801: ST_TO_ADDR
35802: GO 36169
35804: LD_INT 6
35806: DOUBLE
35807: EQUAL
35808: IFTRUE 35860
35810: LD_INT 7
35812: DOUBLE
35813: EQUAL
35814: IFTRUE 35860
35816: LD_INT 8
35818: DOUBLE
35819: EQUAL
35820: IFTRUE 35860
35822: LD_INT 13
35824: DOUBLE
35825: EQUAL
35826: IFTRUE 35860
35828: LD_INT 12
35830: DOUBLE
35831: EQUAL
35832: IFTRUE 35860
35834: LD_INT 15
35836: DOUBLE
35837: EQUAL
35838: IFTRUE 35860
35840: LD_INT 11
35842: DOUBLE
35843: EQUAL
35844: IFTRUE 35860
35846: LD_INT 14
35848: DOUBLE
35849: EQUAL
35850: IFTRUE 35860
35852: LD_INT 10
35854: DOUBLE
35855: EQUAL
35856: IFTRUE 35860
35858: GO 35916
35860: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
35861: LD_ADDR_VAR 0 9
35865: PUSH
35866: LD_VAR 0 41
35870: PUSH
35871: LD_VAR 0 42
35875: PUSH
35876: LD_VAR 0 43
35880: PUSH
35881: LD_VAR 0 44
35885: PUSH
35886: LD_VAR 0 45
35890: PUSH
35891: LD_VAR 0 46
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: PUSH
35904: LD_VAR 0 4
35908: PUSH
35909: LD_INT 1
35911: PLUS
35912: ARRAY
35913: ST_TO_ADDR
35914: GO 36169
35916: LD_INT 36
35918: DOUBLE
35919: EQUAL
35920: IFTRUE 35924
35922: GO 35980
35924: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35925: LD_ADDR_VAR 0 9
35929: PUSH
35930: LD_VAR 0 47
35934: PUSH
35935: LD_VAR 0 48
35939: PUSH
35940: LD_VAR 0 49
35944: PUSH
35945: LD_VAR 0 50
35949: PUSH
35950: LD_VAR 0 51
35954: PUSH
35955: LD_VAR 0 52
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: PUSH
35968: LD_VAR 0 4
35972: PUSH
35973: LD_INT 1
35975: PLUS
35976: ARRAY
35977: ST_TO_ADDR
35978: GO 36169
35980: LD_INT 4
35982: DOUBLE
35983: EQUAL
35984: IFTRUE 36006
35986: LD_INT 5
35988: DOUBLE
35989: EQUAL
35990: IFTRUE 36006
35992: LD_INT 34
35994: DOUBLE
35995: EQUAL
35996: IFTRUE 36006
35998: LD_INT 37
36000: DOUBLE
36001: EQUAL
36002: IFTRUE 36006
36004: GO 36062
36006: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36007: LD_ADDR_VAR 0 9
36011: PUSH
36012: LD_VAR 0 53
36016: PUSH
36017: LD_VAR 0 54
36021: PUSH
36022: LD_VAR 0 55
36026: PUSH
36027: LD_VAR 0 56
36031: PUSH
36032: LD_VAR 0 57
36036: PUSH
36037: LD_VAR 0 58
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: PUSH
36050: LD_VAR 0 4
36054: PUSH
36055: LD_INT 1
36057: PLUS
36058: ARRAY
36059: ST_TO_ADDR
36060: GO 36169
36062: LD_INT 31
36064: DOUBLE
36065: EQUAL
36066: IFTRUE 36112
36068: LD_INT 32
36070: DOUBLE
36071: EQUAL
36072: IFTRUE 36112
36074: LD_INT 33
36076: DOUBLE
36077: EQUAL
36078: IFTRUE 36112
36080: LD_INT 27
36082: DOUBLE
36083: EQUAL
36084: IFTRUE 36112
36086: LD_INT 26
36088: DOUBLE
36089: EQUAL
36090: IFTRUE 36112
36092: LD_INT 28
36094: DOUBLE
36095: EQUAL
36096: IFTRUE 36112
36098: LD_INT 29
36100: DOUBLE
36101: EQUAL
36102: IFTRUE 36112
36104: LD_INT 30
36106: DOUBLE
36107: EQUAL
36108: IFTRUE 36112
36110: GO 36168
36112: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36113: LD_ADDR_VAR 0 9
36117: PUSH
36118: LD_VAR 0 59
36122: PUSH
36123: LD_VAR 0 60
36127: PUSH
36128: LD_VAR 0 61
36132: PUSH
36133: LD_VAR 0 62
36137: PUSH
36138: LD_VAR 0 63
36142: PUSH
36143: LD_VAR 0 64
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: PUSH
36156: LD_VAR 0 4
36160: PUSH
36161: LD_INT 1
36163: PLUS
36164: ARRAY
36165: ST_TO_ADDR
36166: GO 36169
36168: POP
// temp_list2 = [ ] ;
36169: LD_ADDR_VAR 0 10
36173: PUSH
36174: EMPTY
36175: ST_TO_ADDR
// for i in temp_list do
36176: LD_ADDR_VAR 0 8
36180: PUSH
36181: LD_VAR 0 9
36185: PUSH
36186: FOR_IN
36187: IFFALSE 36239
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36189: LD_ADDR_VAR 0 10
36193: PUSH
36194: LD_VAR 0 10
36198: PUSH
36199: LD_VAR 0 8
36203: PUSH
36204: LD_INT 1
36206: ARRAY
36207: PUSH
36208: LD_VAR 0 2
36212: PLUS
36213: PUSH
36214: LD_VAR 0 8
36218: PUSH
36219: LD_INT 2
36221: ARRAY
36222: PUSH
36223: LD_VAR 0 3
36227: PLUS
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: EMPTY
36234: LIST
36235: ADD
36236: ST_TO_ADDR
36237: GO 36186
36239: POP
36240: POP
// result = temp_list2 ;
36241: LD_ADDR_VAR 0 7
36245: PUSH
36246: LD_VAR 0 10
36250: ST_TO_ADDR
// end ;
36251: LD_VAR 0 7
36255: RET
// export function EnemyInRange ( unit , dist ) ; begin
36256: LD_INT 0
36258: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36259: LD_ADDR_VAR 0 3
36263: PUSH
36264: LD_VAR 0 1
36268: PPUSH
36269: CALL_OW 255
36273: PPUSH
36274: LD_VAR 0 1
36278: PPUSH
36279: CALL_OW 250
36283: PPUSH
36284: LD_VAR 0 1
36288: PPUSH
36289: CALL_OW 251
36293: PPUSH
36294: LD_VAR 0 2
36298: PPUSH
36299: CALL 11675 0 4
36303: PUSH
36304: LD_INT 4
36306: ARRAY
36307: ST_TO_ADDR
// end ;
36308: LD_VAR 0 3
36312: RET
// export function PlayerSeeMe ( unit ) ; begin
36313: LD_INT 0
36315: PPUSH
// result := See ( your_side , unit ) ;
36316: LD_ADDR_VAR 0 2
36320: PUSH
36321: LD_OWVAR 2
36325: PPUSH
36326: LD_VAR 0 1
36330: PPUSH
36331: CALL_OW 292
36335: ST_TO_ADDR
// end ;
36336: LD_VAR 0 2
36340: RET
// export function ReverseDir ( unit ) ; begin
36341: LD_INT 0
36343: PPUSH
// if not unit then
36344: LD_VAR 0 1
36348: NOT
36349: IFFALSE 36353
// exit ;
36351: GO 36399
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
36353: LD_ADDR_VAR 0 2
36357: PUSH
36358: LD_INT 3
36360: PUSH
36361: LD_INT 4
36363: PUSH
36364: LD_INT 5
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: LD_INT 1
36372: PUSH
36373: LD_INT 2
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: PUSH
36384: LD_VAR 0 1
36388: PPUSH
36389: CALL_OW 254
36393: PUSH
36394: LD_INT 1
36396: PLUS
36397: ARRAY
36398: ST_TO_ADDR
// end ;
36399: LD_VAR 0 2
36403: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
36404: LD_INT 0
36406: PPUSH
36407: PPUSH
36408: PPUSH
36409: PPUSH
36410: PPUSH
// if not hexes then
36411: LD_VAR 0 2
36415: NOT
36416: IFFALSE 36420
// exit ;
36418: GO 36568
// dist := 9999 ;
36420: LD_ADDR_VAR 0 5
36424: PUSH
36425: LD_INT 9999
36427: ST_TO_ADDR
// for i = 1 to hexes do
36428: LD_ADDR_VAR 0 4
36432: PUSH
36433: DOUBLE
36434: LD_INT 1
36436: DEC
36437: ST_TO_ADDR
36438: LD_VAR 0 2
36442: PUSH
36443: FOR_TO
36444: IFFALSE 36556
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
36446: LD_VAR 0 1
36450: PPUSH
36451: LD_VAR 0 2
36455: PUSH
36456: LD_VAR 0 4
36460: ARRAY
36461: PUSH
36462: LD_INT 1
36464: ARRAY
36465: PPUSH
36466: LD_VAR 0 2
36470: PUSH
36471: LD_VAR 0 4
36475: ARRAY
36476: PUSH
36477: LD_INT 2
36479: ARRAY
36480: PPUSH
36481: CALL_OW 297
36485: PUSH
36486: LD_VAR 0 5
36490: LESS
36491: IFFALSE 36554
// begin hex := hexes [ i ] ;
36493: LD_ADDR_VAR 0 7
36497: PUSH
36498: LD_VAR 0 2
36502: PUSH
36503: LD_VAR 0 4
36507: ARRAY
36508: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36509: LD_ADDR_VAR 0 5
36513: PUSH
36514: LD_VAR 0 1
36518: PPUSH
36519: LD_VAR 0 2
36523: PUSH
36524: LD_VAR 0 4
36528: ARRAY
36529: PUSH
36530: LD_INT 1
36532: ARRAY
36533: PPUSH
36534: LD_VAR 0 2
36538: PUSH
36539: LD_VAR 0 4
36543: ARRAY
36544: PUSH
36545: LD_INT 2
36547: ARRAY
36548: PPUSH
36549: CALL_OW 297
36553: ST_TO_ADDR
// end ; end ;
36554: GO 36443
36556: POP
36557: POP
// result := hex ;
36558: LD_ADDR_VAR 0 3
36562: PUSH
36563: LD_VAR 0 7
36567: ST_TO_ADDR
// end ;
36568: LD_VAR 0 3
36572: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36573: LD_INT 0
36575: PPUSH
36576: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36577: LD_VAR 0 1
36581: NOT
36582: PUSH
36583: LD_VAR 0 1
36587: PUSH
36588: LD_INT 21
36590: PUSH
36591: LD_INT 2
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 23
36600: PUSH
36601: LD_INT 2
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PPUSH
36612: CALL_OW 69
36616: IN
36617: NOT
36618: OR
36619: IFFALSE 36623
// exit ;
36621: GO 36670
// for i = 1 to 3 do
36623: LD_ADDR_VAR 0 3
36627: PUSH
36628: DOUBLE
36629: LD_INT 1
36631: DEC
36632: ST_TO_ADDR
36633: LD_INT 3
36635: PUSH
36636: FOR_TO
36637: IFFALSE 36668
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36639: LD_VAR 0 1
36643: PPUSH
36644: CALL_OW 250
36648: PPUSH
36649: LD_VAR 0 1
36653: PPUSH
36654: CALL_OW 251
36658: PPUSH
36659: LD_INT 1
36661: PPUSH
36662: CALL_OW 453
36666: GO 36636
36668: POP
36669: POP
// end ;
36670: LD_VAR 0 2
36674: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36675: LD_INT 0
36677: PPUSH
36678: PPUSH
36679: PPUSH
36680: PPUSH
36681: PPUSH
36682: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36683: LD_VAR 0 1
36687: NOT
36688: PUSH
36689: LD_VAR 0 2
36693: NOT
36694: OR
36695: PUSH
36696: LD_VAR 0 1
36700: PPUSH
36701: CALL_OW 314
36705: OR
36706: IFFALSE 36710
// exit ;
36708: GO 37151
// x := GetX ( enemy_unit ) ;
36710: LD_ADDR_VAR 0 7
36714: PUSH
36715: LD_VAR 0 2
36719: PPUSH
36720: CALL_OW 250
36724: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36725: LD_ADDR_VAR 0 8
36729: PUSH
36730: LD_VAR 0 2
36734: PPUSH
36735: CALL_OW 251
36739: ST_TO_ADDR
// if not x or not y then
36740: LD_VAR 0 7
36744: NOT
36745: PUSH
36746: LD_VAR 0 8
36750: NOT
36751: OR
36752: IFFALSE 36756
// exit ;
36754: GO 37151
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36756: LD_ADDR_VAR 0 6
36760: PUSH
36761: LD_VAR 0 7
36765: PPUSH
36766: LD_INT 0
36768: PPUSH
36769: LD_INT 4
36771: PPUSH
36772: CALL_OW 272
36776: PUSH
36777: LD_VAR 0 8
36781: PPUSH
36782: LD_INT 0
36784: PPUSH
36785: LD_INT 4
36787: PPUSH
36788: CALL_OW 273
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_VAR 0 7
36801: PPUSH
36802: LD_INT 1
36804: PPUSH
36805: LD_INT 4
36807: PPUSH
36808: CALL_OW 272
36812: PUSH
36813: LD_VAR 0 8
36817: PPUSH
36818: LD_INT 1
36820: PPUSH
36821: LD_INT 4
36823: PPUSH
36824: CALL_OW 273
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_VAR 0 7
36837: PPUSH
36838: LD_INT 2
36840: PPUSH
36841: LD_INT 4
36843: PPUSH
36844: CALL_OW 272
36848: PUSH
36849: LD_VAR 0 8
36853: PPUSH
36854: LD_INT 2
36856: PPUSH
36857: LD_INT 4
36859: PPUSH
36860: CALL_OW 273
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_VAR 0 7
36873: PPUSH
36874: LD_INT 3
36876: PPUSH
36877: LD_INT 4
36879: PPUSH
36880: CALL_OW 272
36884: PUSH
36885: LD_VAR 0 8
36889: PPUSH
36890: LD_INT 3
36892: PPUSH
36893: LD_INT 4
36895: PPUSH
36896: CALL_OW 273
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_VAR 0 7
36909: PPUSH
36910: LD_INT 4
36912: PPUSH
36913: LD_INT 4
36915: PPUSH
36916: CALL_OW 272
36920: PUSH
36921: LD_VAR 0 8
36925: PPUSH
36926: LD_INT 4
36928: PPUSH
36929: LD_INT 4
36931: PPUSH
36932: CALL_OW 273
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_VAR 0 7
36945: PPUSH
36946: LD_INT 5
36948: PPUSH
36949: LD_INT 4
36951: PPUSH
36952: CALL_OW 272
36956: PUSH
36957: LD_VAR 0 8
36961: PPUSH
36962: LD_INT 5
36964: PPUSH
36965: LD_INT 4
36967: PPUSH
36968: CALL_OW 273
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: ST_TO_ADDR
// for i = tmp downto 1 do
36985: LD_ADDR_VAR 0 4
36989: PUSH
36990: DOUBLE
36991: LD_VAR 0 6
36995: INC
36996: ST_TO_ADDR
36997: LD_INT 1
36999: PUSH
37000: FOR_DOWNTO
37001: IFFALSE 37102
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37003: LD_VAR 0 6
37007: PUSH
37008: LD_VAR 0 4
37012: ARRAY
37013: PUSH
37014: LD_INT 1
37016: ARRAY
37017: PPUSH
37018: LD_VAR 0 6
37022: PUSH
37023: LD_VAR 0 4
37027: ARRAY
37028: PUSH
37029: LD_INT 2
37031: ARRAY
37032: PPUSH
37033: CALL_OW 488
37037: NOT
37038: PUSH
37039: LD_VAR 0 6
37043: PUSH
37044: LD_VAR 0 4
37048: ARRAY
37049: PUSH
37050: LD_INT 1
37052: ARRAY
37053: PPUSH
37054: LD_VAR 0 6
37058: PUSH
37059: LD_VAR 0 4
37063: ARRAY
37064: PUSH
37065: LD_INT 2
37067: ARRAY
37068: PPUSH
37069: CALL_OW 428
37073: PUSH
37074: LD_INT 0
37076: NONEQUAL
37077: OR
37078: IFFALSE 37100
// tmp := Delete ( tmp , i ) ;
37080: LD_ADDR_VAR 0 6
37084: PUSH
37085: LD_VAR 0 6
37089: PPUSH
37090: LD_VAR 0 4
37094: PPUSH
37095: CALL_OW 3
37099: ST_TO_ADDR
37100: GO 37000
37102: POP
37103: POP
// j := GetClosestHex ( unit , tmp ) ;
37104: LD_ADDR_VAR 0 5
37108: PUSH
37109: LD_VAR 0 1
37113: PPUSH
37114: LD_VAR 0 6
37118: PPUSH
37119: CALL 36404 0 2
37123: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37124: LD_VAR 0 1
37128: PPUSH
37129: LD_VAR 0 5
37133: PUSH
37134: LD_INT 1
37136: ARRAY
37137: PPUSH
37138: LD_VAR 0 5
37142: PUSH
37143: LD_INT 2
37145: ARRAY
37146: PPUSH
37147: CALL_OW 111
// end ;
37151: LD_VAR 0 3
37155: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
37156: LD_INT 0
37158: PPUSH
37159: PPUSH
37160: PPUSH
37161: PPUSH
// uc_side = 0 ;
37162: LD_ADDR_OWVAR 20
37166: PUSH
37167: LD_INT 0
37169: ST_TO_ADDR
// uc_nation = 0 ;
37170: LD_ADDR_OWVAR 21
37174: PUSH
37175: LD_INT 0
37177: ST_TO_ADDR
// nat_area := natureArea ;
37178: LD_ADDR_VAR 0 4
37182: PUSH
37183: LD_INT 18
37185: ST_TO_ADDR
// InitHc ;
37186: CALL_OW 19
// for i = 1 to 4 do
37190: LD_ADDR_VAR 0 2
37194: PUSH
37195: DOUBLE
37196: LD_INT 1
37198: DEC
37199: ST_TO_ADDR
37200: LD_INT 4
37202: PUSH
37203: FOR_TO
37204: IFFALSE 37251
// begin hc_class = 18 ;
37206: LD_ADDR_OWVAR 28
37210: PUSH
37211: LD_INT 18
37213: ST_TO_ADDR
// hc_gallery =  ;
37214: LD_ADDR_OWVAR 33
37218: PUSH
37219: LD_STRING 
37221: ST_TO_ADDR
// animal := CreateHuman ;
37222: LD_ADDR_VAR 0 3
37226: PUSH
37227: CALL_OW 44
37231: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
37232: LD_VAR 0 3
37236: PPUSH
37237: LD_VAR 0 4
37241: PPUSH
37242: LD_INT 0
37244: PPUSH
37245: CALL_OW 49
// end ;
37249: GO 37203
37251: POP
37252: POP
// for i = 1 to 3 do
37253: LD_ADDR_VAR 0 2
37257: PUSH
37258: DOUBLE
37259: LD_INT 1
37261: DEC
37262: ST_TO_ADDR
37263: LD_INT 3
37265: PUSH
37266: FOR_TO
37267: IFFALSE 37331
// begin hc_class = class_tiger ;
37269: LD_ADDR_OWVAR 28
37273: PUSH
37274: LD_INT 14
37276: ST_TO_ADDR
// hc_gallery =  ;
37277: LD_ADDR_OWVAR 33
37281: PUSH
37282: LD_STRING 
37284: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
37285: LD_ADDR_OWVAR 35
37289: PUSH
37290: LD_INT 5
37292: NEG
37293: PPUSH
37294: LD_INT 5
37296: PPUSH
37297: CALL_OW 12
37301: ST_TO_ADDR
// animal := CreateHuman ;
37302: LD_ADDR_VAR 0 3
37306: PUSH
37307: CALL_OW 44
37311: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
37312: LD_VAR 0 3
37316: PPUSH
37317: LD_VAR 0 4
37321: PPUSH
37322: LD_INT 0
37324: PPUSH
37325: CALL_OW 49
// end ;
37329: GO 37266
37331: POP
37332: POP
// for i = 1 to multi_ape_amount do
37333: LD_ADDR_VAR 0 2
37337: PUSH
37338: DOUBLE
37339: LD_INT 1
37341: DEC
37342: ST_TO_ADDR
37343: LD_EXP 22
37347: PUSH
37348: FOR_TO
37349: IFFALSE 37452
// begin hc_class = class_apeman ;
37351: LD_ADDR_OWVAR 28
37355: PUSH
37356: LD_INT 12
37358: ST_TO_ADDR
// hc_gallery =  ;
37359: LD_ADDR_OWVAR 33
37363: PUSH
37364: LD_STRING 
37366: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37367: LD_ADDR_OWVAR 35
37371: PUSH
37372: LD_INT 2
37374: NEG
37375: PPUSH
37376: LD_INT 2
37378: PPUSH
37379: CALL_OW 12
37383: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37384: LD_ADDR_OWVAR 31
37388: PUSH
37389: LD_INT 1
37391: PPUSH
37392: LD_INT 3
37394: PPUSH
37395: CALL_OW 12
37399: PUSH
37400: LD_INT 1
37402: PPUSH
37403: LD_INT 3
37405: PPUSH
37406: CALL_OW 12
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: ST_TO_ADDR
// animal := CreateHuman ;
37423: LD_ADDR_VAR 0 3
37427: PUSH
37428: CALL_OW 44
37432: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
37433: LD_VAR 0 3
37437: PPUSH
37438: LD_VAR 0 4
37442: PPUSH
37443: LD_INT 0
37445: PPUSH
37446: CALL_OW 49
// end ;
37450: GO 37348
37452: POP
37453: POP
// for i = 1 to 3 do
37454: LD_ADDR_VAR 0 2
37458: PUSH
37459: DOUBLE
37460: LD_INT 1
37462: DEC
37463: ST_TO_ADDR
37464: LD_INT 3
37466: PUSH
37467: FOR_TO
37468: IFFALSE 37515
// begin hc_class = 13 ;
37470: LD_ADDR_OWVAR 28
37474: PUSH
37475: LD_INT 13
37477: ST_TO_ADDR
// hc_gallery =  ;
37478: LD_ADDR_OWVAR 33
37482: PUSH
37483: LD_STRING 
37485: ST_TO_ADDR
// animal := CreateHuman ;
37486: LD_ADDR_VAR 0 3
37490: PUSH
37491: CALL_OW 44
37495: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
37496: LD_VAR 0 3
37500: PPUSH
37501: LD_VAR 0 4
37505: PPUSH
37506: LD_INT 0
37508: PPUSH
37509: CALL_OW 49
// end ;
37513: GO 37467
37515: POP
37516: POP
// for i = 1 to 7 do
37517: LD_ADDR_VAR 0 2
37521: PUSH
37522: DOUBLE
37523: LD_INT 1
37525: DEC
37526: ST_TO_ADDR
37527: LD_INT 7
37529: PUSH
37530: FOR_TO
37531: IFFALSE 37576
// begin hc_class = 20 ;
37533: LD_ADDR_OWVAR 28
37537: PUSH
37538: LD_INT 20
37540: ST_TO_ADDR
// hc_gallery =  ;
37541: LD_ADDR_OWVAR 33
37545: PUSH
37546: LD_STRING 
37548: ST_TO_ADDR
// animal := CreateHuman ;
37549: LD_ADDR_VAR 0 3
37553: PUSH
37554: CALL_OW 44
37558: ST_TO_ADDR
// PlaceUnitArea ( animal , waterArea , false ) ;
37559: LD_VAR 0 3
37563: PPUSH
37564: LD_INT 19
37566: PPUSH
37567: LD_INT 0
37569: PPUSH
37570: CALL_OW 49
// end ;
37574: GO 37530
37576: POP
37577: POP
// end ;
37578: LD_VAR 0 1
37582: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
37583: LD_INT 0
37585: PPUSH
37586: PPUSH
37587: PPUSH
37588: PPUSH
37589: PPUSH
37590: PPUSH
37591: PPUSH
37592: PPUSH
37593: PPUSH
37594: PPUSH
37595: PPUSH
37596: PPUSH
37597: PPUSH
37598: PPUSH
37599: PPUSH
37600: PPUSH
37601: PPUSH
37602: PPUSH
37603: PPUSH
37604: PPUSH
37605: PPUSH
37606: PPUSH
37607: PPUSH
37608: PPUSH
37609: PPUSH
37610: PPUSH
37611: PPUSH
37612: PPUSH
// if not list then
37613: LD_VAR 0 1
37617: NOT
37618: IFFALSE 37622
// exit ;
37620: GO 40865
// base := list [ 1 ] ;
37622: LD_ADDR_VAR 0 3
37626: PUSH
37627: LD_VAR 0 1
37631: PUSH
37632: LD_INT 1
37634: ARRAY
37635: ST_TO_ADDR
// group := list [ 2 ] ;
37636: LD_ADDR_VAR 0 4
37640: PUSH
37641: LD_VAR 0 1
37645: PUSH
37646: LD_INT 2
37648: ARRAY
37649: ST_TO_ADDR
// path := list [ 3 ] ;
37650: LD_ADDR_VAR 0 5
37654: PUSH
37655: LD_VAR 0 1
37659: PUSH
37660: LD_INT 3
37662: ARRAY
37663: ST_TO_ADDR
// flags := list [ 4 ] ;
37664: LD_ADDR_VAR 0 6
37668: PUSH
37669: LD_VAR 0 1
37673: PUSH
37674: LD_INT 4
37676: ARRAY
37677: ST_TO_ADDR
// mined := [ ] ;
37678: LD_ADDR_VAR 0 27
37682: PUSH
37683: EMPTY
37684: ST_TO_ADDR
// bombed := [ ] ;
37685: LD_ADDR_VAR 0 28
37689: PUSH
37690: EMPTY
37691: ST_TO_ADDR
// if not group or not path then
37692: LD_VAR 0 4
37696: NOT
37697: PUSH
37698: LD_VAR 0 5
37702: NOT
37703: OR
37704: IFFALSE 37708
// exit ;
37706: GO 40865
// if flags then
37708: LD_VAR 0 6
37712: IFFALSE 37856
// begin f_ignore_area := flags [ 1 ] ;
37714: LD_ADDR_VAR 0 17
37718: PUSH
37719: LD_VAR 0 6
37723: PUSH
37724: LD_INT 1
37726: ARRAY
37727: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
37728: LD_ADDR_VAR 0 18
37732: PUSH
37733: LD_VAR 0 6
37737: PUSH
37738: LD_INT 2
37740: ARRAY
37741: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
37742: LD_ADDR_VAR 0 19
37746: PUSH
37747: LD_VAR 0 6
37751: PUSH
37752: LD_INT 3
37754: ARRAY
37755: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
37756: LD_ADDR_VAR 0 20
37760: PUSH
37761: LD_VAR 0 6
37765: PUSH
37766: LD_INT 4
37768: ARRAY
37769: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
37770: LD_ADDR_VAR 0 21
37774: PUSH
37775: LD_VAR 0 6
37779: PUSH
37780: LD_INT 5
37782: ARRAY
37783: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
37784: LD_ADDR_VAR 0 22
37788: PUSH
37789: LD_VAR 0 6
37793: PUSH
37794: LD_INT 6
37796: ARRAY
37797: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
37798: LD_ADDR_VAR 0 23
37802: PUSH
37803: LD_VAR 0 6
37807: PUSH
37808: LD_INT 7
37810: ARRAY
37811: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
37812: LD_ADDR_VAR 0 24
37816: PUSH
37817: LD_VAR 0 6
37821: PUSH
37822: LD_INT 8
37824: ARRAY
37825: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
37826: LD_ADDR_VAR 0 25
37830: PUSH
37831: LD_VAR 0 6
37835: PUSH
37836: LD_INT 9
37838: ARRAY
37839: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
37840: LD_ADDR_VAR 0 26
37844: PUSH
37845: LD_VAR 0 6
37849: PUSH
37850: LD_INT 10
37852: ARRAY
37853: ST_TO_ADDR
// end else
37854: GO 37936
// begin f_ignore_area := false ;
37856: LD_ADDR_VAR 0 17
37860: PUSH
37861: LD_INT 0
37863: ST_TO_ADDR
// f_capture := false ;
37864: LD_ADDR_VAR 0 18
37868: PUSH
37869: LD_INT 0
37871: ST_TO_ADDR
// f_ignore_civ := false ;
37872: LD_ADDR_VAR 0 19
37876: PUSH
37877: LD_INT 0
37879: ST_TO_ADDR
// f_murder := false ;
37880: LD_ADDR_VAR 0 20
37884: PUSH
37885: LD_INT 0
37887: ST_TO_ADDR
// f_mines := false ;
37888: LD_ADDR_VAR 0 21
37892: PUSH
37893: LD_INT 0
37895: ST_TO_ADDR
// f_repair := false ;
37896: LD_ADDR_VAR 0 22
37900: PUSH
37901: LD_INT 0
37903: ST_TO_ADDR
// f_heal := false ;
37904: LD_ADDR_VAR 0 23
37908: PUSH
37909: LD_INT 0
37911: ST_TO_ADDR
// f_spacetime := false ;
37912: LD_ADDR_VAR 0 24
37916: PUSH
37917: LD_INT 0
37919: ST_TO_ADDR
// f_attack_depot := false ;
37920: LD_ADDR_VAR 0 25
37924: PUSH
37925: LD_INT 0
37927: ST_TO_ADDR
// f_crawl := false ;
37928: LD_ADDR_VAR 0 26
37932: PUSH
37933: LD_INT 0
37935: ST_TO_ADDR
// end ; units_path := [ ] ;
37936: LD_ADDR_VAR 0 16
37940: PUSH
37941: EMPTY
37942: ST_TO_ADDR
// for i = 1 to group do
37943: LD_ADDR_VAR 0 7
37947: PUSH
37948: DOUBLE
37949: LD_INT 1
37951: DEC
37952: ST_TO_ADDR
37953: LD_VAR 0 4
37957: PUSH
37958: FOR_TO
37959: IFFALSE 37988
// begin units_path := Replace ( units_path , i , path ) ;
37961: LD_ADDR_VAR 0 16
37965: PUSH
37966: LD_VAR 0 16
37970: PPUSH
37971: LD_VAR 0 7
37975: PPUSH
37976: LD_VAR 0 5
37980: PPUSH
37981: CALL_OW 1
37985: ST_TO_ADDR
// end ;
37986: GO 37958
37988: POP
37989: POP
// repeat for i = group downto 1 do
37990: LD_ADDR_VAR 0 7
37994: PUSH
37995: DOUBLE
37996: LD_VAR 0 4
38000: INC
38001: ST_TO_ADDR
38002: LD_INT 1
38004: PUSH
38005: FOR_DOWNTO
38006: IFFALSE 40847
// begin wait ( 0 0$1 ) ;
38008: LD_INT 35
38010: PPUSH
38011: CALL_OW 67
// tmp := [ ] ;
38015: LD_ADDR_VAR 0 14
38019: PUSH
38020: EMPTY
38021: ST_TO_ADDR
// attacking := false ;
38022: LD_ADDR_VAR 0 29
38026: PUSH
38027: LD_INT 0
38029: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
38030: LD_VAR 0 4
38034: PUSH
38035: LD_VAR 0 7
38039: ARRAY
38040: PPUSH
38041: CALL_OW 301
38045: PUSH
38046: LD_VAR 0 4
38050: PUSH
38051: LD_VAR 0 7
38055: ARRAY
38056: NOT
38057: OR
38058: IFFALSE 38102
// begin group := Delete ( group , i ) ;
38060: LD_ADDR_VAR 0 4
38064: PUSH
38065: LD_VAR 0 4
38069: PPUSH
38070: LD_VAR 0 7
38074: PPUSH
38075: CALL_OW 3
38079: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
38080: LD_ADDR_VAR 0 16
38084: PUSH
38085: LD_VAR 0 16
38089: PPUSH
38090: LD_VAR 0 7
38094: PPUSH
38095: CALL_OW 3
38099: ST_TO_ADDR
// continue ;
38100: GO 38005
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
38102: LD_VAR 0 4
38106: PUSH
38107: LD_VAR 0 7
38111: ARRAY
38112: PPUSH
38113: LD_INT 10
38115: PPUSH
38116: CALL 36256 0 2
38120: NOT
38121: PUSH
38122: LD_VAR 0 16
38126: PUSH
38127: LD_VAR 0 7
38131: ARRAY
38132: PUSH
38133: EMPTY
38134: EQUAL
38135: NOT
38136: AND
38137: IFFALSE 38403
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
38139: LD_VAR 0 4
38143: PUSH
38144: LD_VAR 0 7
38148: ARRAY
38149: PPUSH
38150: CALL_OW 262
38154: PUSH
38155: LD_INT 1
38157: PUSH
38158: LD_INT 2
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: IN
38165: IFFALSE 38206
// if GetFuel ( group [ i ] ) < 10 then
38167: LD_VAR 0 4
38171: PUSH
38172: LD_VAR 0 7
38176: ARRAY
38177: PPUSH
38178: CALL_OW 261
38182: PUSH
38183: LD_INT 10
38185: LESS
38186: IFFALSE 38206
// SetFuel ( group [ i ] , 12 ) ;
38188: LD_VAR 0 4
38192: PUSH
38193: LD_VAR 0 7
38197: ARRAY
38198: PPUSH
38199: LD_INT 12
38201: PPUSH
38202: CALL_OW 240
// if units_path [ i ] then
38206: LD_VAR 0 16
38210: PUSH
38211: LD_VAR 0 7
38215: ARRAY
38216: IFFALSE 38401
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
38218: LD_VAR 0 4
38222: PUSH
38223: LD_VAR 0 7
38227: ARRAY
38228: PPUSH
38229: LD_VAR 0 16
38233: PUSH
38234: LD_VAR 0 7
38238: ARRAY
38239: PUSH
38240: LD_INT 1
38242: ARRAY
38243: PUSH
38244: LD_INT 1
38246: ARRAY
38247: PPUSH
38248: LD_VAR 0 16
38252: PUSH
38253: LD_VAR 0 7
38257: ARRAY
38258: PUSH
38259: LD_INT 1
38261: ARRAY
38262: PUSH
38263: LD_INT 2
38265: ARRAY
38266: PPUSH
38267: CALL_OW 297
38271: PUSH
38272: LD_INT 6
38274: GREATER
38275: IFFALSE 38350
// begin if not HasTask ( group [ i ] ) then
38277: LD_VAR 0 4
38281: PUSH
38282: LD_VAR 0 7
38286: ARRAY
38287: PPUSH
38288: CALL_OW 314
38292: NOT
38293: IFFALSE 38348
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
38295: LD_VAR 0 4
38299: PUSH
38300: LD_VAR 0 7
38304: ARRAY
38305: PPUSH
38306: LD_VAR 0 16
38310: PUSH
38311: LD_VAR 0 7
38315: ARRAY
38316: PUSH
38317: LD_INT 1
38319: ARRAY
38320: PUSH
38321: LD_INT 1
38323: ARRAY
38324: PPUSH
38325: LD_VAR 0 16
38329: PUSH
38330: LD_VAR 0 7
38334: ARRAY
38335: PUSH
38336: LD_INT 1
38338: ARRAY
38339: PUSH
38340: LD_INT 2
38342: ARRAY
38343: PPUSH
38344: CALL_OW 114
// end else
38348: GO 38401
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
38350: LD_ADDR_VAR 0 15
38354: PUSH
38355: LD_VAR 0 16
38359: PUSH
38360: LD_VAR 0 7
38364: ARRAY
38365: PPUSH
38366: LD_INT 1
38368: PPUSH
38369: CALL_OW 3
38373: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
38374: LD_ADDR_VAR 0 16
38378: PUSH
38379: LD_VAR 0 16
38383: PPUSH
38384: LD_VAR 0 7
38388: PPUSH
38389: LD_VAR 0 15
38393: PPUSH
38394: CALL_OW 1
38398: ST_TO_ADDR
// continue ;
38399: GO 38005
// end ; end ; end else
38401: GO 40845
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
38403: LD_ADDR_VAR 0 14
38407: PUSH
38408: LD_INT 81
38410: PUSH
38411: LD_VAR 0 4
38415: PUSH
38416: LD_VAR 0 7
38420: ARRAY
38421: PPUSH
38422: CALL_OW 255
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PPUSH
38431: CALL_OW 69
38435: ST_TO_ADDR
// if not tmp then
38436: LD_VAR 0 14
38440: NOT
38441: IFFALSE 38445
// continue ;
38443: GO 38005
// if f_ignore_area then
38445: LD_VAR 0 17
38449: IFFALSE 38537
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
38451: LD_ADDR_VAR 0 15
38455: PUSH
38456: LD_VAR 0 14
38460: PPUSH
38461: LD_INT 3
38463: PUSH
38464: LD_INT 92
38466: PUSH
38467: LD_VAR 0 17
38471: PUSH
38472: LD_INT 1
38474: ARRAY
38475: PUSH
38476: LD_VAR 0 17
38480: PUSH
38481: LD_INT 2
38483: ARRAY
38484: PUSH
38485: LD_VAR 0 17
38489: PUSH
38490: LD_INT 3
38492: ARRAY
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PPUSH
38504: CALL_OW 72
38508: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
38509: LD_VAR 0 14
38513: PUSH
38514: LD_VAR 0 15
38518: DIFF
38519: IFFALSE 38537
// tmp := tmp diff tmp2 ;
38521: LD_ADDR_VAR 0 14
38525: PUSH
38526: LD_VAR 0 14
38530: PUSH
38531: LD_VAR 0 15
38535: DIFF
38536: ST_TO_ADDR
// end ; if not f_murder then
38537: LD_VAR 0 20
38541: NOT
38542: IFFALSE 38600
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
38544: LD_ADDR_VAR 0 15
38548: PUSH
38549: LD_VAR 0 14
38553: PPUSH
38554: LD_INT 3
38556: PUSH
38557: LD_INT 50
38559: PUSH
38560: EMPTY
38561: LIST
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PPUSH
38567: CALL_OW 72
38571: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
38572: LD_VAR 0 14
38576: PUSH
38577: LD_VAR 0 15
38581: DIFF
38582: IFFALSE 38600
// tmp := tmp diff tmp2 ;
38584: LD_ADDR_VAR 0 14
38588: PUSH
38589: LD_VAR 0 14
38593: PUSH
38594: LD_VAR 0 15
38598: DIFF
38599: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
38600: LD_ADDR_VAR 0 14
38604: PUSH
38605: LD_VAR 0 4
38609: PUSH
38610: LD_VAR 0 7
38614: ARRAY
38615: PPUSH
38616: LD_VAR 0 14
38620: PPUSH
38621: LD_INT 1
38623: PPUSH
38624: LD_INT 1
38626: PPUSH
38627: CALL 11214 0 4
38631: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
38632: LD_VAR 0 4
38636: PUSH
38637: LD_VAR 0 7
38641: ARRAY
38642: PPUSH
38643: CALL_OW 257
38647: PUSH
38648: LD_INT 1
38650: EQUAL
38651: IFFALSE 39099
// begin if WantPlant ( group [ i ] ) then
38653: LD_VAR 0 4
38657: PUSH
38658: LD_VAR 0 7
38662: ARRAY
38663: PPUSH
38664: CALL 10682 0 1
38668: IFFALSE 38672
// continue ;
38670: GO 38005
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
38672: LD_VAR 0 18
38676: PUSH
38677: LD_VAR 0 4
38681: PUSH
38682: LD_VAR 0 7
38686: ARRAY
38687: PPUSH
38688: CALL_OW 310
38692: NOT
38693: AND
38694: PUSH
38695: LD_VAR 0 14
38699: PUSH
38700: LD_INT 1
38702: ARRAY
38703: PUSH
38704: LD_VAR 0 14
38708: PPUSH
38709: LD_INT 21
38711: PUSH
38712: LD_INT 2
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 58
38721: PUSH
38722: EMPTY
38723: LIST
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PPUSH
38729: CALL_OW 72
38733: IN
38734: AND
38735: IFFALSE 38771
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
38737: LD_VAR 0 4
38741: PUSH
38742: LD_VAR 0 7
38746: ARRAY
38747: PPUSH
38748: LD_VAR 0 14
38752: PUSH
38753: LD_INT 1
38755: ARRAY
38756: PPUSH
38757: CALL_OW 120
// attacking := true ;
38761: LD_ADDR_VAR 0 29
38765: PUSH
38766: LD_INT 1
38768: ST_TO_ADDR
// continue ;
38769: GO 38005
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
38771: LD_VAR 0 26
38775: PUSH
38776: LD_VAR 0 4
38780: PUSH
38781: LD_VAR 0 7
38785: ARRAY
38786: PPUSH
38787: CALL_OW 257
38791: PUSH
38792: LD_INT 1
38794: EQUAL
38795: AND
38796: PUSH
38797: LD_VAR 0 4
38801: PUSH
38802: LD_VAR 0 7
38806: ARRAY
38807: PPUSH
38808: CALL_OW 256
38812: PUSH
38813: LD_INT 800
38815: LESS
38816: AND
38817: PUSH
38818: LD_VAR 0 4
38822: PUSH
38823: LD_VAR 0 7
38827: ARRAY
38828: PPUSH
38829: CALL_OW 318
38833: NOT
38834: AND
38835: IFFALSE 38852
// ComCrawl ( group [ i ] ) ;
38837: LD_VAR 0 4
38841: PUSH
38842: LD_VAR 0 7
38846: ARRAY
38847: PPUSH
38848: CALL_OW 137
// if f_mines then
38852: LD_VAR 0 21
38856: IFFALSE 39099
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
38858: LD_VAR 0 14
38862: PUSH
38863: LD_INT 1
38865: ARRAY
38866: PPUSH
38867: CALL_OW 247
38871: PUSH
38872: LD_INT 3
38874: EQUAL
38875: PUSH
38876: LD_VAR 0 14
38880: PUSH
38881: LD_INT 1
38883: ARRAY
38884: PUSH
38885: LD_VAR 0 27
38889: IN
38890: NOT
38891: AND
38892: IFFALSE 39099
// begin x := GetX ( tmp [ 1 ] ) ;
38894: LD_ADDR_VAR 0 10
38898: PUSH
38899: LD_VAR 0 14
38903: PUSH
38904: LD_INT 1
38906: ARRAY
38907: PPUSH
38908: CALL_OW 250
38912: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
38913: LD_ADDR_VAR 0 11
38917: PUSH
38918: LD_VAR 0 14
38922: PUSH
38923: LD_INT 1
38925: ARRAY
38926: PPUSH
38927: CALL_OW 251
38931: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
38932: LD_ADDR_VAR 0 12
38936: PUSH
38937: LD_VAR 0 4
38941: PUSH
38942: LD_VAR 0 7
38946: ARRAY
38947: PPUSH
38948: CALL 36341 0 1
38952: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
38953: LD_VAR 0 4
38957: PUSH
38958: LD_VAR 0 7
38962: ARRAY
38963: PPUSH
38964: LD_VAR 0 10
38968: PPUSH
38969: LD_VAR 0 11
38973: PPUSH
38974: LD_VAR 0 14
38978: PUSH
38979: LD_INT 1
38981: ARRAY
38982: PPUSH
38983: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
38987: LD_VAR 0 4
38991: PUSH
38992: LD_VAR 0 7
38996: ARRAY
38997: PPUSH
38998: LD_VAR 0 10
39002: PPUSH
39003: LD_VAR 0 12
39007: PPUSH
39008: LD_INT 7
39010: PPUSH
39011: CALL_OW 272
39015: PPUSH
39016: LD_VAR 0 11
39020: PPUSH
39021: LD_VAR 0 12
39025: PPUSH
39026: LD_INT 7
39028: PPUSH
39029: CALL_OW 273
39033: PPUSH
39034: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
39038: LD_VAR 0 4
39042: PUSH
39043: LD_VAR 0 7
39047: ARRAY
39048: PPUSH
39049: LD_INT 71
39051: PPUSH
39052: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
39056: LD_ADDR_VAR 0 27
39060: PUSH
39061: LD_VAR 0 27
39065: PPUSH
39066: LD_VAR 0 27
39070: PUSH
39071: LD_INT 1
39073: PLUS
39074: PPUSH
39075: LD_VAR 0 14
39079: PUSH
39080: LD_INT 1
39082: ARRAY
39083: PPUSH
39084: CALL_OW 1
39088: ST_TO_ADDR
// attacking := true ;
39089: LD_ADDR_VAR 0 29
39093: PUSH
39094: LD_INT 1
39096: ST_TO_ADDR
// continue ;
39097: GO 38005
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
39099: LD_VAR 0 4
39103: PUSH
39104: LD_VAR 0 7
39108: ARRAY
39109: PPUSH
39110: CALL_OW 257
39114: PUSH
39115: LD_INT 17
39117: EQUAL
39118: PUSH
39119: LD_VAR 0 4
39123: PUSH
39124: LD_VAR 0 7
39128: ARRAY
39129: PPUSH
39130: CALL_OW 110
39134: PUSH
39135: LD_INT 71
39137: EQUAL
39138: NOT
39139: AND
39140: IFFALSE 39286
// begin attacking := false ;
39142: LD_ADDR_VAR 0 29
39146: PUSH
39147: LD_INT 0
39149: ST_TO_ADDR
// k := 5 ;
39150: LD_ADDR_VAR 0 9
39154: PUSH
39155: LD_INT 5
39157: ST_TO_ADDR
// if tmp < k then
39158: LD_VAR 0 14
39162: PUSH
39163: LD_VAR 0 9
39167: LESS
39168: IFFALSE 39180
// k := tmp ;
39170: LD_ADDR_VAR 0 9
39174: PUSH
39175: LD_VAR 0 14
39179: ST_TO_ADDR
// for j = 1 to k do
39180: LD_ADDR_VAR 0 8
39184: PUSH
39185: DOUBLE
39186: LD_INT 1
39188: DEC
39189: ST_TO_ADDR
39190: LD_VAR 0 9
39194: PUSH
39195: FOR_TO
39196: IFFALSE 39284
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
39198: LD_VAR 0 14
39202: PUSH
39203: LD_VAR 0 8
39207: ARRAY
39208: PUSH
39209: LD_VAR 0 14
39213: PPUSH
39214: LD_INT 58
39216: PUSH
39217: EMPTY
39218: LIST
39219: PPUSH
39220: CALL_OW 72
39224: IN
39225: NOT
39226: IFFALSE 39282
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
39228: LD_VAR 0 4
39232: PUSH
39233: LD_VAR 0 7
39237: ARRAY
39238: PPUSH
39239: LD_VAR 0 14
39243: PUSH
39244: LD_VAR 0 8
39248: ARRAY
39249: PPUSH
39250: CALL_OW 115
// attacking := true ;
39254: LD_ADDR_VAR 0 29
39258: PUSH
39259: LD_INT 1
39261: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
39262: LD_VAR 0 4
39266: PUSH
39267: LD_VAR 0 7
39271: ARRAY
39272: PPUSH
39273: LD_INT 71
39275: PPUSH
39276: CALL_OW 109
// continue ;
39280: GO 39195
// end ; end ;
39282: GO 39195
39284: POP
39285: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
39286: LD_VAR 0 4
39290: PUSH
39291: LD_VAR 0 7
39295: ARRAY
39296: PPUSH
39297: CALL_OW 257
39301: PUSH
39302: LD_INT 8
39304: EQUAL
39305: PUSH
39306: LD_VAR 0 4
39310: PUSH
39311: LD_VAR 0 7
39315: ARRAY
39316: PPUSH
39317: CALL_OW 264
39321: PUSH
39322: LD_INT 28
39324: PUSH
39325: LD_INT 45
39327: PUSH
39328: LD_INT 7
39330: PUSH
39331: LD_INT 47
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: IN
39340: OR
39341: IFFALSE 39571
// begin attacking := false ;
39343: LD_ADDR_VAR 0 29
39347: PUSH
39348: LD_INT 0
39350: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
39351: LD_VAR 0 14
39355: PUSH
39356: LD_INT 1
39358: ARRAY
39359: PPUSH
39360: CALL_OW 266
39364: PUSH
39365: LD_INT 32
39367: PUSH
39368: LD_INT 31
39370: PUSH
39371: LD_INT 33
39373: PUSH
39374: LD_INT 4
39376: PUSH
39377: LD_INT 5
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: IN
39387: IFFALSE 39571
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
39389: LD_ADDR_VAR 0 9
39393: PUSH
39394: LD_VAR 0 14
39398: PUSH
39399: LD_INT 1
39401: ARRAY
39402: PPUSH
39403: CALL_OW 266
39407: PPUSH
39408: LD_VAR 0 14
39412: PUSH
39413: LD_INT 1
39415: ARRAY
39416: PPUSH
39417: CALL_OW 250
39421: PPUSH
39422: LD_VAR 0 14
39426: PUSH
39427: LD_INT 1
39429: ARRAY
39430: PPUSH
39431: CALL_OW 251
39435: PPUSH
39436: LD_VAR 0 14
39440: PUSH
39441: LD_INT 1
39443: ARRAY
39444: PPUSH
39445: CALL_OW 254
39449: PPUSH
39450: LD_VAR 0 14
39454: PUSH
39455: LD_INT 1
39457: ARRAY
39458: PPUSH
39459: CALL_OW 248
39463: PPUSH
39464: LD_INT 0
39466: PPUSH
39467: CALL 17717 0 6
39471: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
39472: LD_ADDR_VAR 0 8
39476: PUSH
39477: LD_VAR 0 4
39481: PUSH
39482: LD_VAR 0 7
39486: ARRAY
39487: PPUSH
39488: LD_VAR 0 9
39492: PPUSH
39493: CALL 36404 0 2
39497: ST_TO_ADDR
// if j then
39498: LD_VAR 0 8
39502: IFFALSE 39571
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39504: LD_VAR 0 8
39508: PUSH
39509: LD_INT 1
39511: ARRAY
39512: PPUSH
39513: LD_VAR 0 8
39517: PUSH
39518: LD_INT 2
39520: ARRAY
39521: PPUSH
39522: CALL_OW 488
39526: IFFALSE 39571
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
39528: LD_VAR 0 4
39532: PUSH
39533: LD_VAR 0 7
39537: ARRAY
39538: PPUSH
39539: LD_VAR 0 8
39543: PUSH
39544: LD_INT 1
39546: ARRAY
39547: PPUSH
39548: LD_VAR 0 8
39552: PUSH
39553: LD_INT 2
39555: ARRAY
39556: PPUSH
39557: CALL_OW 116
// attacking := true ;
39561: LD_ADDR_VAR 0 29
39565: PUSH
39566: LD_INT 1
39568: ST_TO_ADDR
// continue ;
39569: GO 38005
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
39571: LD_VAR 0 4
39575: PUSH
39576: LD_VAR 0 7
39580: ARRAY
39581: PPUSH
39582: CALL_OW 265
39586: PUSH
39587: LD_INT 11
39589: EQUAL
39590: IFFALSE 39868
// begin k := 10 ;
39592: LD_ADDR_VAR 0 9
39596: PUSH
39597: LD_INT 10
39599: ST_TO_ADDR
// x := 0 ;
39600: LD_ADDR_VAR 0 10
39604: PUSH
39605: LD_INT 0
39607: ST_TO_ADDR
// if tmp < k then
39608: LD_VAR 0 14
39612: PUSH
39613: LD_VAR 0 9
39617: LESS
39618: IFFALSE 39630
// k := tmp ;
39620: LD_ADDR_VAR 0 9
39624: PUSH
39625: LD_VAR 0 14
39629: ST_TO_ADDR
// for j = k downto 1 do
39630: LD_ADDR_VAR 0 8
39634: PUSH
39635: DOUBLE
39636: LD_VAR 0 9
39640: INC
39641: ST_TO_ADDR
39642: LD_INT 1
39644: PUSH
39645: FOR_DOWNTO
39646: IFFALSE 39721
// begin if GetType ( tmp [ j ] ) = unit_human then
39648: LD_VAR 0 14
39652: PUSH
39653: LD_VAR 0 8
39657: ARRAY
39658: PPUSH
39659: CALL_OW 247
39663: PUSH
39664: LD_INT 1
39666: EQUAL
39667: IFFALSE 39719
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
39669: LD_VAR 0 4
39673: PUSH
39674: LD_VAR 0 7
39678: ARRAY
39679: PPUSH
39680: LD_VAR 0 14
39684: PUSH
39685: LD_VAR 0 8
39689: ARRAY
39690: PPUSH
39691: CALL 36675 0 2
// x := tmp [ j ] ;
39695: LD_ADDR_VAR 0 10
39699: PUSH
39700: LD_VAR 0 14
39704: PUSH
39705: LD_VAR 0 8
39709: ARRAY
39710: ST_TO_ADDR
// attacking := true ;
39711: LD_ADDR_VAR 0 29
39715: PUSH
39716: LD_INT 1
39718: ST_TO_ADDR
// end ; end ;
39719: GO 39645
39721: POP
39722: POP
// if not x then
39723: LD_VAR 0 10
39727: NOT
39728: IFFALSE 39868
// begin attacking := true ;
39730: LD_ADDR_VAR 0 29
39734: PUSH
39735: LD_INT 1
39737: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
39738: LD_VAR 0 4
39742: PUSH
39743: LD_VAR 0 7
39747: ARRAY
39748: PPUSH
39749: CALL_OW 250
39753: PPUSH
39754: LD_VAR 0 4
39758: PUSH
39759: LD_VAR 0 7
39763: ARRAY
39764: PPUSH
39765: CALL_OW 251
39769: PPUSH
39770: CALL_OW 546
39774: PUSH
39775: LD_INT 2
39777: ARRAY
39778: PUSH
39779: LD_VAR 0 14
39783: PUSH
39784: LD_INT 1
39786: ARRAY
39787: PPUSH
39788: CALL_OW 250
39792: PPUSH
39793: LD_VAR 0 14
39797: PUSH
39798: LD_INT 1
39800: ARRAY
39801: PPUSH
39802: CALL_OW 251
39806: PPUSH
39807: CALL_OW 546
39811: PUSH
39812: LD_INT 2
39814: ARRAY
39815: EQUAL
39816: IFFALSE 39844
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
39818: LD_VAR 0 4
39822: PUSH
39823: LD_VAR 0 7
39827: ARRAY
39828: PPUSH
39829: LD_VAR 0 14
39833: PUSH
39834: LD_INT 1
39836: ARRAY
39837: PPUSH
39838: CALL 36675 0 2
39842: GO 39868
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
39844: LD_VAR 0 4
39848: PUSH
39849: LD_VAR 0 7
39853: ARRAY
39854: PPUSH
39855: LD_VAR 0 14
39859: PUSH
39860: LD_INT 1
39862: ARRAY
39863: PPUSH
39864: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
39868: LD_VAR 0 4
39872: PUSH
39873: LD_VAR 0 7
39877: ARRAY
39878: PPUSH
39879: CALL_OW 264
39883: PUSH
39884: LD_INT 29
39886: EQUAL
39887: IFFALSE 40253
// begin if WantsToAttack ( group [ i ] ) in bombed then
39889: LD_VAR 0 4
39893: PUSH
39894: LD_VAR 0 7
39898: ARRAY
39899: PPUSH
39900: CALL_OW 319
39904: PUSH
39905: LD_VAR 0 28
39909: IN
39910: IFFALSE 39914
// continue ;
39912: GO 38005
// k := 8 ;
39914: LD_ADDR_VAR 0 9
39918: PUSH
39919: LD_INT 8
39921: ST_TO_ADDR
// x := 0 ;
39922: LD_ADDR_VAR 0 10
39926: PUSH
39927: LD_INT 0
39929: ST_TO_ADDR
// if tmp < k then
39930: LD_VAR 0 14
39934: PUSH
39935: LD_VAR 0 9
39939: LESS
39940: IFFALSE 39952
// k := tmp ;
39942: LD_ADDR_VAR 0 9
39946: PUSH
39947: LD_VAR 0 14
39951: ST_TO_ADDR
// for j = 1 to k do
39952: LD_ADDR_VAR 0 8
39956: PUSH
39957: DOUBLE
39958: LD_INT 1
39960: DEC
39961: ST_TO_ADDR
39962: LD_VAR 0 9
39966: PUSH
39967: FOR_TO
39968: IFFALSE 40100
// begin if GetType ( tmp [ j ] ) = unit_building then
39970: LD_VAR 0 14
39974: PUSH
39975: LD_VAR 0 8
39979: ARRAY
39980: PPUSH
39981: CALL_OW 247
39985: PUSH
39986: LD_INT 3
39988: EQUAL
39989: IFFALSE 40098
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
39991: LD_VAR 0 14
39995: PUSH
39996: LD_VAR 0 8
40000: ARRAY
40001: PUSH
40002: LD_VAR 0 28
40006: IN
40007: NOT
40008: PUSH
40009: LD_VAR 0 14
40013: PUSH
40014: LD_VAR 0 8
40018: ARRAY
40019: PPUSH
40020: CALL_OW 313
40024: AND
40025: IFFALSE 40098
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
40027: LD_VAR 0 4
40031: PUSH
40032: LD_VAR 0 7
40036: ARRAY
40037: PPUSH
40038: LD_VAR 0 14
40042: PUSH
40043: LD_VAR 0 8
40047: ARRAY
40048: PPUSH
40049: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
40053: LD_ADDR_VAR 0 28
40057: PUSH
40058: LD_VAR 0 28
40062: PPUSH
40063: LD_VAR 0 28
40067: PUSH
40068: LD_INT 1
40070: PLUS
40071: PPUSH
40072: LD_VAR 0 14
40076: PUSH
40077: LD_VAR 0 8
40081: ARRAY
40082: PPUSH
40083: CALL_OW 1
40087: ST_TO_ADDR
// attacking := true ;
40088: LD_ADDR_VAR 0 29
40092: PUSH
40093: LD_INT 1
40095: ST_TO_ADDR
// break ;
40096: GO 40100
// end ; end ;
40098: GO 39967
40100: POP
40101: POP
// if not attacking and f_attack_depot then
40102: LD_VAR 0 29
40106: NOT
40107: PUSH
40108: LD_VAR 0 25
40112: AND
40113: IFFALSE 40208
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
40115: LD_ADDR_VAR 0 13
40119: PUSH
40120: LD_VAR 0 14
40124: PPUSH
40125: LD_INT 2
40127: PUSH
40128: LD_INT 30
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 30
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: PPUSH
40153: CALL_OW 72
40157: ST_TO_ADDR
// if z then
40158: LD_VAR 0 13
40162: IFFALSE 40208
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
40164: LD_VAR 0 4
40168: PUSH
40169: LD_VAR 0 7
40173: ARRAY
40174: PPUSH
40175: LD_VAR 0 13
40179: PPUSH
40180: LD_VAR 0 4
40184: PUSH
40185: LD_VAR 0 7
40189: ARRAY
40190: PPUSH
40191: CALL_OW 74
40195: PPUSH
40196: CALL_OW 115
// attacking := true ;
40200: LD_ADDR_VAR 0 29
40204: PUSH
40205: LD_INT 1
40207: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
40208: LD_VAR 0 4
40212: PUSH
40213: LD_VAR 0 7
40217: ARRAY
40218: PPUSH
40219: CALL_OW 256
40223: PUSH
40224: LD_INT 500
40226: LESS
40227: IFFALSE 40253
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
40229: LD_VAR 0 4
40233: PUSH
40234: LD_VAR 0 7
40238: ARRAY
40239: PPUSH
40240: LD_VAR 0 14
40244: PUSH
40245: LD_INT 1
40247: ARRAY
40248: PPUSH
40249: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40253: LD_VAR 0 4
40257: PUSH
40258: LD_VAR 0 7
40262: ARRAY
40263: PPUSH
40264: CALL_OW 256
40268: PUSH
40269: LD_INT 250
40271: LESS
40272: PUSH
40273: LD_VAR 0 4
40277: PUSH
40278: LD_VAR 0 7
40282: ARRAY
40283: PUSH
40284: LD_INT 21
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 23
40296: PUSH
40297: LD_INT 2
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PPUSH
40308: CALL_OW 69
40312: IN
40313: AND
40314: IFFALSE 40439
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
40316: LD_ADDR_VAR 0 9
40320: PUSH
40321: LD_OWVAR 3
40325: PUSH
40326: LD_VAR 0 4
40330: PUSH
40331: LD_VAR 0 7
40335: ARRAY
40336: DIFF
40337: PPUSH
40338: LD_VAR 0 4
40342: PUSH
40343: LD_VAR 0 7
40347: ARRAY
40348: PPUSH
40349: CALL_OW 74
40353: ST_TO_ADDR
// if not k then
40354: LD_VAR 0 9
40358: NOT
40359: IFFALSE 40363
// continue ;
40361: GO 38005
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
40363: LD_VAR 0 9
40367: PUSH
40368: LD_INT 81
40370: PUSH
40371: LD_VAR 0 4
40375: PUSH
40376: LD_VAR 0 7
40380: ARRAY
40381: PPUSH
40382: CALL_OW 255
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PPUSH
40391: CALL_OW 69
40395: IN
40396: PUSH
40397: LD_VAR 0 9
40401: PPUSH
40402: LD_VAR 0 4
40406: PUSH
40407: LD_VAR 0 7
40411: ARRAY
40412: PPUSH
40413: CALL_OW 296
40417: PUSH
40418: LD_INT 5
40420: LESS
40421: AND
40422: IFFALSE 40439
// ComAutodestruct ( group [ i ] ) ;
40424: LD_VAR 0 4
40428: PUSH
40429: LD_VAR 0 7
40433: ARRAY
40434: PPUSH
40435: CALL 36573 0 1
// end ; if f_attack_depot then
40439: LD_VAR 0 25
40443: IFFALSE 40555
// begin k := 6 ;
40445: LD_ADDR_VAR 0 9
40449: PUSH
40450: LD_INT 6
40452: ST_TO_ADDR
// if tmp < k then
40453: LD_VAR 0 14
40457: PUSH
40458: LD_VAR 0 9
40462: LESS
40463: IFFALSE 40475
// k := tmp ;
40465: LD_ADDR_VAR 0 9
40469: PUSH
40470: LD_VAR 0 14
40474: ST_TO_ADDR
// for j = 1 to k do
40475: LD_ADDR_VAR 0 8
40479: PUSH
40480: DOUBLE
40481: LD_INT 1
40483: DEC
40484: ST_TO_ADDR
40485: LD_VAR 0 9
40489: PUSH
40490: FOR_TO
40491: IFFALSE 40553
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
40493: LD_VAR 0 8
40497: PPUSH
40498: CALL_OW 266
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: IN
40513: IFFALSE 40551
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
40515: LD_VAR 0 4
40519: PUSH
40520: LD_VAR 0 7
40524: ARRAY
40525: PPUSH
40526: LD_VAR 0 14
40530: PUSH
40531: LD_VAR 0 8
40535: ARRAY
40536: PPUSH
40537: CALL_OW 115
// attacking := true ;
40541: LD_ADDR_VAR 0 29
40545: PUSH
40546: LD_INT 1
40548: ST_TO_ADDR
// break ;
40549: GO 40553
// end ;
40551: GO 40490
40553: POP
40554: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
40555: LD_VAR 0 4
40559: PUSH
40560: LD_VAR 0 7
40564: ARRAY
40565: PPUSH
40566: CALL_OW 302
40570: PUSH
40571: LD_VAR 0 29
40575: NOT
40576: AND
40577: IFFALSE 40845
// begin if GetTag ( group [ i ] ) = 71 then
40579: LD_VAR 0 4
40583: PUSH
40584: LD_VAR 0 7
40588: ARRAY
40589: PPUSH
40590: CALL_OW 110
40594: PUSH
40595: LD_INT 71
40597: EQUAL
40598: IFFALSE 40639
// begin if HasTask ( group [ i ] ) then
40600: LD_VAR 0 4
40604: PUSH
40605: LD_VAR 0 7
40609: ARRAY
40610: PPUSH
40611: CALL_OW 314
40615: IFFALSE 40621
// continue else
40617: GO 38005
40619: GO 40639
// SetTag ( group [ i ] , 0 ) ;
40621: LD_VAR 0 4
40625: PUSH
40626: LD_VAR 0 7
40630: ARRAY
40631: PPUSH
40632: LD_INT 0
40634: PPUSH
40635: CALL_OW 109
// end ; k := 8 ;
40639: LD_ADDR_VAR 0 9
40643: PUSH
40644: LD_INT 8
40646: ST_TO_ADDR
// x := 0 ;
40647: LD_ADDR_VAR 0 10
40651: PUSH
40652: LD_INT 0
40654: ST_TO_ADDR
// if tmp < k then
40655: LD_VAR 0 14
40659: PUSH
40660: LD_VAR 0 9
40664: LESS
40665: IFFALSE 40677
// k := tmp ;
40667: LD_ADDR_VAR 0 9
40671: PUSH
40672: LD_VAR 0 14
40676: ST_TO_ADDR
// for j = 1 to k do
40677: LD_ADDR_VAR 0 8
40681: PUSH
40682: DOUBLE
40683: LD_INT 1
40685: DEC
40686: ST_TO_ADDR
40687: LD_VAR 0 9
40691: PUSH
40692: FOR_TO
40693: IFFALSE 40791
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
40695: LD_VAR 0 14
40699: PUSH
40700: LD_VAR 0 8
40704: ARRAY
40705: PPUSH
40706: CALL_OW 247
40710: PUSH
40711: LD_INT 1
40713: EQUAL
40714: PUSH
40715: LD_VAR 0 14
40719: PUSH
40720: LD_VAR 0 8
40724: ARRAY
40725: PPUSH
40726: CALL_OW 256
40730: PUSH
40731: LD_INT 250
40733: LESS
40734: PUSH
40735: LD_VAR 0 20
40739: AND
40740: PUSH
40741: LD_VAR 0 20
40745: NOT
40746: PUSH
40747: LD_VAR 0 14
40751: PUSH
40752: LD_VAR 0 8
40756: ARRAY
40757: PPUSH
40758: CALL_OW 256
40762: PUSH
40763: LD_INT 250
40765: GREATEREQUAL
40766: AND
40767: OR
40768: AND
40769: IFFALSE 40789
// begin x := tmp [ j ] ;
40771: LD_ADDR_VAR 0 10
40775: PUSH
40776: LD_VAR 0 14
40780: PUSH
40781: LD_VAR 0 8
40785: ARRAY
40786: ST_TO_ADDR
// break ;
40787: GO 40791
// end ;
40789: GO 40692
40791: POP
40792: POP
// if x then
40793: LD_VAR 0 10
40797: IFFALSE 40821
// ComAttackUnit ( group [ i ] , x ) else
40799: LD_VAR 0 4
40803: PUSH
40804: LD_VAR 0 7
40808: ARRAY
40809: PPUSH
40810: LD_VAR 0 10
40814: PPUSH
40815: CALL_OW 115
40819: GO 40845
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
40821: LD_VAR 0 4
40825: PUSH
40826: LD_VAR 0 7
40830: ARRAY
40831: PPUSH
40832: LD_VAR 0 14
40836: PUSH
40837: LD_INT 1
40839: ARRAY
40840: PPUSH
40841: CALL_OW 115
// end ; end ; end ;
40845: GO 38005
40847: POP
40848: POP
// wait ( 0 0$1 ) ;
40849: LD_INT 35
40851: PPUSH
40852: CALL_OW 67
// until group = [ ] ;
40856: LD_VAR 0 4
40860: PUSH
40861: EMPTY
40862: EQUAL
40863: IFFALSE 37990
// end ;
40865: LD_VAR 0 2
40869: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
40870: LD_INT 0
40872: PPUSH
40873: PPUSH
40874: PPUSH
40875: PPUSH
// if not base_units then
40876: LD_VAR 0 1
40880: NOT
40881: IFFALSE 40885
// exit ;
40883: GO 40972
// result := false ;
40885: LD_ADDR_VAR 0 2
40889: PUSH
40890: LD_INT 0
40892: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
40893: LD_ADDR_VAR 0 5
40897: PUSH
40898: LD_VAR 0 1
40902: PPUSH
40903: LD_INT 21
40905: PUSH
40906: LD_INT 3
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PPUSH
40913: CALL_OW 72
40917: ST_TO_ADDR
// if not tmp then
40918: LD_VAR 0 5
40922: NOT
40923: IFFALSE 40927
// exit ;
40925: GO 40972
// for i in tmp do
40927: LD_ADDR_VAR 0 3
40931: PUSH
40932: LD_VAR 0 5
40936: PUSH
40937: FOR_IN
40938: IFFALSE 40970
// begin result := EnemyInRange ( i , 22 ) ;
40940: LD_ADDR_VAR 0 2
40944: PUSH
40945: LD_VAR 0 3
40949: PPUSH
40950: LD_INT 22
40952: PPUSH
40953: CALL 36256 0 2
40957: ST_TO_ADDR
// if result then
40958: LD_VAR 0 2
40962: IFFALSE 40968
// exit ;
40964: POP
40965: POP
40966: GO 40972
// end ;
40968: GO 40937
40970: POP
40971: POP
// end ;
40972: LD_VAR 0 2
40976: RET
// export function GetByTag ( side , tag ) ; var i ; begin
40977: LD_INT 0
40979: PPUSH
40980: PPUSH
// result := FilterAllUnits ( [ f_side , side ] ) ;
40981: LD_ADDR_VAR 0 3
40985: PUSH
40986: LD_INT 22
40988: PUSH
40989: LD_VAR 0 1
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PPUSH
40998: CALL_OW 69
41002: ST_TO_ADDR
// for i in result do
41003: LD_ADDR_VAR 0 4
41007: PUSH
41008: LD_VAR 0 3
41012: PUSH
41013: FOR_IN
41014: IFFALSE 41051
// if GetTag ( i ) <> tag then
41016: LD_VAR 0 4
41020: PPUSH
41021: CALL_OW 110
41025: PUSH
41026: LD_VAR 0 2
41030: NONEQUAL
41031: IFFALSE 41049
// result := result diff i ;
41033: LD_ADDR_VAR 0 3
41037: PUSH
41038: LD_VAR 0 3
41042: PUSH
41043: LD_VAR 0 4
41047: DIFF
41048: ST_TO_ADDR
41049: GO 41013
41051: POP
41052: POP
// end ;
41053: LD_VAR 0 3
41057: RET
// export function IsDriver ( un ) ; begin
41058: LD_INT 0
41060: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41061: LD_ADDR_VAR 0 2
41065: PUSH
41066: LD_VAR 0 1
41070: PUSH
41071: LD_INT 55
41073: PUSH
41074: EMPTY
41075: LIST
41076: PPUSH
41077: CALL_OW 69
41081: IN
41082: ST_TO_ADDR
// end ; end_of_file
41083: LD_VAR 0 2
41087: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ( side ) ; var i , d , xy , un , skill , tmp , techs ; begin
41088: LD_INT 0
41090: PPUSH
41091: PPUSH
41092: PPUSH
41093: PPUSH
41094: PPUSH
41095: PPUSH
41096: PPUSH
41097: PPUSH
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
41098: LD_ADDR_VAR 0 8
41102: PUSH
41103: LD_INT 22
41105: PUSH
41106: LD_INT 2
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PPUSH
41113: CALL_OW 69
41117: ST_TO_ADDR
// side_bot := side ;
41118: LD_ADDR_EXP 3
41122: PUSH
41123: LD_VAR 0 1
41127: ST_TO_ADDR
// if tmp and side <> 2 then
41128: LD_VAR 0 8
41132: PUSH
41133: LD_VAR 0 1
41137: PUSH
41138: LD_INT 2
41140: NONEQUAL
41141: AND
41142: IFFALSE 41175
// for i in tmp do
41144: LD_ADDR_VAR 0 3
41148: PUSH
41149: LD_VAR 0 8
41153: PUSH
41154: FOR_IN
41155: IFFALSE 41173
// SetSide ( i , side ) ;
41157: LD_VAR 0 3
41161: PPUSH
41162: LD_VAR 0 1
41166: PPUSH
41167: CALL_OW 235
41171: GO 41154
41173: POP
41174: POP
// techs := [ tech_ApeAgres , tech_ApeBrain , tech_ApeNeural , tech_StimDrugs , tech_Bio1 , tech_Bio2 , tech_Weap3 , tech_RemCharge , tech_rocket , tech_SibEng , 72 , tech_Sib2 ] ;
41175: LD_ADDR_VAR 0 9
41179: PUSH
41180: LD_INT 11
41182: PUSH
41183: LD_INT 4
41185: PUSH
41186: LD_INT 3
41188: PUSH
41189: LD_INT 5
41191: PUSH
41192: LD_INT 66
41194: PUSH
41195: LD_INT 67
41197: PUSH
41198: LD_INT 53
41200: PUSH
41201: LD_INT 18
41203: PUSH
41204: LD_INT 40
41206: PUSH
41207: LD_INT 22
41209: PUSH
41210: LD_INT 72
41212: PUSH
41213: LD_INT 55
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: ST_TO_ADDR
// for i in techs do
41230: LD_ADDR_VAR 0 3
41234: PUSH
41235: LD_VAR 0 9
41239: PUSH
41240: FOR_IN
41241: IFFALSE 41262
// SetTech ( i , side , state_researched ) ;
41243: LD_VAR 0 3
41247: PPUSH
41248: LD_VAR 0 1
41252: PPUSH
41253: LD_INT 2
41255: PPUSH
41256: CALL_OW 322
41260: GO 41240
41262: POP
41263: POP
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
41264: LD_ADDR_VAR 0 7
41268: PUSH
41269: LD_INT 6
41271: PUSH
41272: LD_INT 7
41274: PUSH
41275: LD_INT 8
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: LIST
41282: PUSH
41283: LD_OWVAR 67
41287: ARRAY
41288: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
41289: LD_INT 69
41291: PUSH
41292: EMPTY
41293: LIST
41294: PPUSH
41295: LD_INT 141
41297: PPUSH
41298: CALL_OW 169
// Wait ( 1 ) ;
41302: LD_INT 1
41304: PPUSH
41305: CALL_OW 67
// uc_side := side ;
41309: LD_ADDR_OWVAR 20
41313: PUSH
41314: LD_VAR 0 1
41318: ST_TO_ADDR
// uc_nation := 2 ;
41319: LD_ADDR_OWVAR 21
41323: PUSH
41324: LD_INT 2
41326: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
41327: LD_ADDR_OWVAR 37
41331: PUSH
41332: LD_INT 14
41334: ST_TO_ADDR
// vc_engine := engine_siberite ;
41335: LD_ADDR_OWVAR 39
41339: PUSH
41340: LD_INT 3
41342: ST_TO_ADDR
// vc_control := control_manual ;
41343: LD_ADDR_OWVAR 38
41347: PUSH
41348: LD_INT 1
41350: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
41351: LD_ADDR_OWVAR 40
41355: PUSH
41356: LD_INT 31
41358: ST_TO_ADDR
// for i = 1 to 5 do
41359: LD_ADDR_VAR 0 3
41363: PUSH
41364: DOUBLE
41365: LD_INT 1
41367: DEC
41368: ST_TO_ADDR
41369: LD_INT 5
41371: PUSH
41372: FOR_TO
41373: IFFALSE 41512
// begin xy := [ [ 156 , 15 ] , [ 12 , 7 ] ] [ i mod 2 + 1 ] ;
41375: LD_ADDR_VAR 0 5
41379: PUSH
41380: LD_INT 156
41382: PUSH
41383: LD_INT 15
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 12
41392: PUSH
41393: LD_INT 7
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_VAR 0 3
41408: PUSH
41409: LD_INT 2
41411: MOD
41412: PUSH
41413: LD_INT 1
41415: PLUS
41416: ARRAY
41417: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
41418: LD_INT 0
41420: PPUSH
41421: LD_INT 3
41423: PPUSH
41424: LD_VAR 0 7
41428: PPUSH
41429: CALL_OW 380
// un := CreateVehicle ;
41433: LD_ADDR_VAR 0 6
41437: PUSH
41438: CALL_OW 45
41442: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
41443: LD_VAR 0 6
41447: PPUSH
41448: LD_INT 0
41450: PPUSH
41451: LD_INT 5
41453: PPUSH
41454: CALL_OW 12
41458: PPUSH
41459: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
41463: LD_VAR 0 6
41467: PPUSH
41468: LD_VAR 0 5
41472: PUSH
41473: LD_INT 1
41475: ARRAY
41476: PPUSH
41477: LD_VAR 0 5
41481: PUSH
41482: LD_INT 2
41484: ARRAY
41485: PPUSH
41486: LD_INT 6
41488: PPUSH
41489: LD_INT 0
41491: PPUSH
41492: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
41496: CALL_OW 44
41500: PPUSH
41501: LD_VAR 0 6
41505: PPUSH
41506: CALL_OW 52
// end ;
41510: GO 41372
41512: POP
41513: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 5000 , 1000 , 300 ] , [ - 1 , 6 , - 1 , 4 ] ) ;
41514: LD_ADDR_EXP 33
41518: PUSH
41519: LD_INT 94
41521: PPUSH
41522: LD_STRING dammam
41524: PPUSH
41525: LD_VAR 0 7
41529: PPUSH
41530: LD_INT 5000
41532: PUSH
41533: LD_INT 1000
41535: PUSH
41536: LD_INT 300
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: LIST
41543: PPUSH
41544: LD_INT 1
41546: NEG
41547: PUSH
41548: LD_INT 6
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: LD_INT 4
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: PPUSH
41564: CALL 14035 0 5
41568: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
41569: LD_ADDR_EXP 33
41573: PUSH
41574: LD_EXP 33
41578: PUSH
41579: LD_INT 122
41581: PPUSH
41582: LD_STRING 
41584: PPUSH
41585: LD_VAR 0 7
41589: PPUSH
41590: LD_INT 100
41592: PUSH
41593: LD_INT 60
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: LIST
41603: PPUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: LD_INT 4
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: PPUSH
41623: CALL 14035 0 5
41627: ADD
41628: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 3000 , 1000 , 10 ] , [ - 1 , 5 , 5 , 2 ] ) ;
41629: LD_ADDR_EXP 31
41633: PUSH
41634: LD_INT 45
41636: PPUSH
41637: LD_STRING jeddah
41639: PPUSH
41640: LD_VAR 0 7
41644: PPUSH
41645: LD_INT 3000
41647: PUSH
41648: LD_INT 1000
41650: PUSH
41651: LD_INT 10
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: PPUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: LD_INT 5
41665: PUSH
41666: LD_INT 5
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: PPUSH
41678: CALL 14035 0 5
41682: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 600 , 250 , 0 ] , [ - 1 , 3 , 5 , 1 ] ) ;
41683: LD_ADDR_EXP 32
41687: PUSH
41688: LD_INT 7
41690: PPUSH
41691: LD_STRING riyadh
41693: PPUSH
41694: LD_VAR 0 7
41698: PPUSH
41699: LD_INT 600
41701: PUSH
41702: LD_INT 250
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: LIST
41712: PPUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: LD_INT 3
41719: PUSH
41720: LD_INT 5
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: PPUSH
41732: CALL 14035 0 5
41736: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 150 , 0 ] , [ - 1 , 3 , 5 , 2 ] ) ;
41737: LD_ADDR_EXP 34
41741: PUSH
41742: LD_INT 69
41744: PPUSH
41745: LD_STRING 
41747: PPUSH
41748: LD_VAR 0 7
41752: PPUSH
41753: LD_INT 500
41755: PUSH
41756: LD_INT 150
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: LIST
41766: PPUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: LD_INT 3
41773: PUSH
41774: LD_INT 5
41776: PUSH
41777: LD_INT 2
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: PPUSH
41786: CALL 14035 0 5
41790: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east , ar_force_south ] ;
41791: LD_ADDR_EXP 41
41795: PUSH
41796: LD_EXP 33
41800: PUSH
41801: LD_EXP 31
41805: PUSH
41806: LD_EXP 34
41810: PUSH
41811: LD_EXP 32
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side_bot ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
41822: LD_ADDR_VAR 0 3
41826: PUSH
41827: LD_INT 22
41829: PUSH
41830: LD_EXP 3
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 30
41841: PUSH
41842: LD_INT 31
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 58
41851: PUSH
41852: EMPTY
41853: LIST
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: LIST
41859: PPUSH
41860: CALL_OW 69
41864: PUSH
41865: FOR_IN
41866: IFFALSE 41991
// begin if GetBase ( i ) then
41868: LD_VAR 0 3
41872: PPUSH
41873: CALL_OW 274
41877: IFFALSE 41881
// continue ;
41879: GO 41865
// d := GetDir ( i ) ;
41881: LD_ADDR_VAR 0 4
41885: PUSH
41886: LD_VAR 0 3
41890: PPUSH
41891: CALL_OW 254
41895: ST_TO_ADDR
// if d < 3 then
41896: LD_VAR 0 4
41900: PUSH
41901: LD_INT 3
41903: LESS
41904: IFFALSE 41922
// d := d + 3 else
41906: LD_ADDR_VAR 0 4
41910: PUSH
41911: LD_VAR 0 4
41915: PUSH
41916: LD_INT 3
41918: PLUS
41919: ST_TO_ADDR
41920: GO 41936
// d := d - 3 ;
41922: LD_ADDR_VAR 0 4
41926: PUSH
41927: LD_VAR 0 4
41931: PUSH
41932: LD_INT 3
41934: MINUS
41935: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
41936: LD_INT 0
41938: PPUSH
41939: LD_INT 8
41941: PPUSH
41942: LD_VAR 0 7
41946: PPUSH
41947: CALL_OW 380
// un := CreateHuman ;
41951: LD_ADDR_VAR 0 6
41955: PUSH
41956: CALL_OW 44
41960: ST_TO_ADDR
// SetDir ( un , d ) ;
41961: LD_VAR 0 6
41965: PPUSH
41966: LD_VAR 0 4
41970: PPUSH
41971: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
41975: LD_VAR 0 6
41979: PPUSH
41980: LD_VAR 0 3
41984: PPUSH
41985: CALL_OW 52
// end ;
41989: GO 41865
41991: POP
41992: POP
// ar_force_tmp := [ ] ;
41993: LD_ADDR_EXP 35
41997: PUSH
41998: EMPTY
41999: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
42000: LD_INT 1
42002: PPUSH
42003: LD_INT 1
42005: PPUSH
42006: LD_VAR 0 7
42010: PPUSH
42011: CALL_OW 380
// hc_gallery := SecondCharsGal ;
42015: LD_ADDR_OWVAR 33
42019: PUSH
42020: LD_STRING SecondCharsGal
42022: ST_TO_ADDR
// hc_face_number := 4 ;
42023: LD_ADDR_OWVAR 34
42027: PUSH
42028: LD_INT 4
42030: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
42031: LD_ADDR_EXP 35
42035: PUSH
42036: LD_EXP 35
42040: PPUSH
42041: LD_INT 1
42043: PPUSH
42044: CALL_OW 44
42048: PPUSH
42049: CALL_OW 1
42053: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
42054: LD_INT 2
42056: PPUSH
42057: LD_INT 4
42059: PPUSH
42060: LD_VAR 0 7
42064: PPUSH
42065: CALL_OW 380
// hc_gallery := SecondCharsGal ;
42069: LD_ADDR_OWVAR 33
42073: PUSH
42074: LD_STRING SecondCharsGal
42076: ST_TO_ADDR
// hc_face_number := 15 ;
42077: LD_ADDR_OWVAR 34
42081: PUSH
42082: LD_INT 15
42084: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
42085: LD_ADDR_EXP 35
42089: PUSH
42090: LD_EXP 35
42094: PPUSH
42095: LD_INT 2
42097: PPUSH
42098: CALL_OW 44
42102: PPUSH
42103: CALL_OW 1
42107: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
42108: LD_INT 2
42110: PPUSH
42111: LD_INT 4
42113: PPUSH
42114: LD_VAR 0 7
42118: PPUSH
42119: CALL_OW 380
// hc_gallery :=  ;
42123: LD_ADDR_OWVAR 33
42127: PUSH
42128: LD_STRING 
42130: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
42131: LD_ADDR_EXP 35
42135: PUSH
42136: LD_EXP 35
42140: PPUSH
42141: LD_INT 3
42143: PPUSH
42144: CALL_OW 44
42148: PPUSH
42149: CALL_OW 1
42153: ST_TO_ADDR
// hc_sex := sex_male ;
42154: LD_ADDR_OWVAR 27
42158: PUSH
42159: LD_INT 1
42161: ST_TO_ADDR
// hc_class = 11 ;
42162: LD_ADDR_OWVAR 28
42166: PUSH
42167: LD_INT 11
42169: ST_TO_ADDR
// hc_gallery = sandar ;
42170: LD_ADDR_OWVAR 33
42174: PUSH
42175: LD_STRING sandar
42177: ST_TO_ADDR
// hc_face_number = 33 ;
42178: LD_ADDR_OWVAR 34
42182: PUSH
42183: LD_INT 33
42185: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
42186: LD_ADDR_OWVAR 26
42190: PUSH
42191: LD_STRING Thabit Muhair Saliba
42193: ST_TO_ADDR
// hc_skills = [ 5 , 5 , 3 , 3 ] ;
42194: LD_ADDR_OWVAR 31
42198: PUSH
42199: LD_INT 5
42201: PUSH
42202: LD_INT 5
42204: PUSH
42205: LD_INT 3
42207: PUSH
42208: LD_INT 3
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: ST_TO_ADDR
// Saliba = CreateHuman ;
42217: LD_ADDR_EXP 38
42221: PUSH
42222: CALL_OW 44
42226: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
42227: LD_EXP 38
42231: PPUSH
42232: LD_INT 7
42234: PPUSH
42235: CALL_OW 52
// hc_name := Dietrich Gensher ;
42239: LD_ADDR_OWVAR 26
42243: PUSH
42244: LD_STRING Dietrich Gensher
42246: ST_TO_ADDR
// hc_class := 1 ;
42247: LD_ADDR_OWVAR 28
42251: PUSH
42252: LD_INT 1
42254: ST_TO_ADDR
// hc_gallery := sandar ;
42255: LD_ADDR_OWVAR 33
42259: PUSH
42260: LD_STRING sandar
42262: ST_TO_ADDR
// hc_face_number := 2 ;
42263: LD_ADDR_OWVAR 34
42267: PUSH
42268: LD_INT 2
42270: ST_TO_ADDR
// hc_skills := [ 10 , 6 , 5 , 4 ] ;
42271: LD_ADDR_OWVAR 31
42275: PUSH
42276: LD_INT 10
42278: PUSH
42279: LD_INT 6
42281: PUSH
42282: LD_INT 5
42284: PUSH
42285: LD_INT 4
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: ST_TO_ADDR
// Gensher := CreateHuman ;
42294: LD_ADDR_EXP 39
42298: PUSH
42299: CALL_OW 44
42303: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
42304: LD_EXP 39
42308: PPUSH
42309: LD_INT 94
42311: PPUSH
42312: CALL_OW 52
// InitHc ;
42316: CALL_OW 19
// ar_defenders_tmp := [ [ ] , [ ] , [ ] , [ ] ] ;
42320: LD_ADDR_EXP 37
42324: PUSH
42325: EMPTY
42326: PUSH
42327: EMPTY
42328: PUSH
42329: EMPTY
42330: PUSH
42331: EMPTY
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
42339: LD_ADDR_VAR 0 4
42343: PUSH
42344: DOUBLE
42345: LD_INT 1
42347: DEC
42348: ST_TO_ADDR
42349: LD_INT 3
42351: PUSH
42352: LD_INT 3
42354: PUSH
42355: LD_INT 4
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: LIST
42362: PUSH
42363: LD_OWVAR 67
42367: ARRAY
42368: PUSH
42369: FOR_TO
42370: IFFALSE 42588
// for i = 1 to 4 do
42372: LD_ADDR_VAR 0 3
42376: PUSH
42377: DOUBLE
42378: LD_INT 1
42380: DEC
42381: ST_TO_ADDR
42382: LD_INT 4
42384: PUSH
42385: FOR_TO
42386: IFFALSE 42584
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
42388: LD_INT 14
42390: PPUSH
42391: LD_INT 3
42393: PUSH
42394: LD_INT 2
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: PPUSH
42404: LD_INT 2
42406: PPUSH
42407: CALL_OW 12
42411: ARRAY
42412: PPUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 5
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: PPUSH
42426: LD_INT 2
42428: PPUSH
42429: CALL_OW 12
42433: ARRAY
42434: PPUSH
42435: LD_INT 25
42437: PUSH
42438: LD_INT 27
42440: PUSH
42441: LD_INT 26
42443: PUSH
42444: LD_INT 28
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: PPUSH
42456: LD_INT 4
42458: PPUSH
42459: CALL_OW 12
42463: ARRAY
42464: PPUSH
42465: LD_INT 100
42467: PPUSH
42468: CALL 10624 0 5
// un := CreateVehicle ;
42472: LD_ADDR_VAR 0 6
42476: PUSH
42477: CALL_OW 45
42481: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
42482: LD_ADDR_EXP 37
42486: PUSH
42487: LD_EXP 37
42491: PPUSH
42492: LD_VAR 0 3
42496: PUSH
42497: LD_EXP 37
42501: PUSH
42502: LD_VAR 0 3
42506: ARRAY
42507: PUSH
42508: LD_INT 1
42510: PLUS
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PPUSH
42516: LD_VAR 0 6
42520: PPUSH
42521: CALL 11181 0 3
42525: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
42526: LD_VAR 0 6
42530: PPUSH
42531: LD_INT 0
42533: PPUSH
42534: LD_INT 5
42536: PPUSH
42537: CALL_OW 12
42541: PPUSH
42542: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east , parking_south ] [ i ] , false ) ;
42546: LD_VAR 0 6
42550: PPUSH
42551: LD_INT 20
42553: PUSH
42554: LD_INT 21
42556: PUSH
42557: LD_INT 22
42559: PUSH
42560: LD_INT 24
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: PUSH
42569: LD_VAR 0 3
42573: ARRAY
42574: PPUSH
42575: LD_INT 0
42577: PPUSH
42578: CALL_OW 49
// end ;
42582: GO 42385
42584: POP
42585: POP
42586: GO 42369
42588: POP
42589: POP
// InitHc ;
42590: CALL_OW 19
// end ;
42594: LD_VAR 0 2
42598: RET
// every 13 13$00 + 10 10$00 trigger IsOk ( ar_dep_n ) and GetSide ( ar_dep_n ) = side_bot do var i , t , x , base , tmp , coords , flags , danger , target , _target ;
42599: LD_INT 94
42601: PPUSH
42602: CALL_OW 302
42606: PUSH
42607: LD_INT 94
42609: PPUSH
42610: CALL_OW 255
42614: PUSH
42615: LD_EXP 3
42619: EQUAL
42620: AND
42621: IFFALSE 43330
42623: GO 42625
42625: DISABLE
42626: LD_INT 0
42628: PPUSH
42629: PPUSH
42630: PPUSH
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
42637: PPUSH
// begin enable ;
42638: ENABLE
// base := 1 ;
42639: LD_ADDR_VAR 0 4
42643: PUSH
42644: LD_INT 1
42646: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
42647: LD_ADDR_VAR 0 7
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: ST_TO_ADDR
// coords := [ [ 28 , 14 ] , [ 107 , 119 ] , [ 127 , 97 ] , [ 185 , 127 ] ] ;
42694: LD_ADDR_VAR 0 6
42698: PUSH
42699: LD_INT 28
42701: PUSH
42702: LD_INT 14
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 107
42711: PUSH
42712: LD_INT 119
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 127
42721: PUSH
42722: LD_INT 97
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 185
42731: PUSH
42732: LD_INT 127
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: ST_TO_ADDR
// target := 0 ;
42745: LD_ADDR_VAR 0 9
42749: PUSH
42750: LD_INT 0
42752: ST_TO_ADDR
// x := 0 ;
42753: LD_ADDR_VAR 0 3
42757: PUSH
42758: LD_INT 0
42760: ST_TO_ADDR
// tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
42761: LD_ADDR_VAR 0 5
42765: PUSH
42766: LD_INT 14
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 2
42774: PUSH
42775: LD_INT 28
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 14
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: LD_INT 2
42792: PUSH
42793: LD_INT 25
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 14
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: LD_INT 28
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 14
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: LD_INT 2
42828: PUSH
42829: LD_INT 29
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: ST_TO_ADDR
// if Difficulty > 1 then
42844: LD_OWVAR 67
42848: PUSH
42849: LD_INT 1
42851: GREATER
42852: IFFALSE 42949
// for i = 1 to Difficulty + 2 do
42854: LD_ADDR_VAR 0 1
42858: PUSH
42859: DOUBLE
42860: LD_INT 1
42862: DEC
42863: ST_TO_ADDR
42864: LD_OWVAR 67
42868: PUSH
42869: LD_INT 2
42871: PLUS
42872: PUSH
42873: FOR_TO
42874: IFFALSE 42947
// tmp := Insert ( tmp , tmp + 1 , [ ar_half_tracked , engine_combustion , control_remote , [ ar_rocket_launcher , ar_gun , ar_gun , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ) ;
42876: LD_ADDR_VAR 0 5
42880: PUSH
42881: LD_VAR 0 5
42885: PPUSH
42886: LD_VAR 0 5
42890: PUSH
42891: LD_INT 1
42893: PLUS
42894: PPUSH
42895: LD_INT 14
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: LD_INT 28
42906: PUSH
42907: LD_INT 27
42909: PUSH
42910: LD_INT 27
42912: PUSH
42913: LD_INT 29
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: PPUSH
42925: LD_INT 4
42927: PPUSH
42928: CALL_OW 12
42932: ARRAY
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: PPUSH
42940: CALL_OW 2
42944: ST_TO_ADDR
42945: GO 42873
42947: POP
42948: POP
// MC_SetProduceList ( base , tmp ) ;
42949: LD_VAR 0 4
42953: PPUSH
42954: LD_VAR 0 5
42958: PPUSH
42959: CALL 53858 0 2
// repeat wait ( 0 0$1 ) ;
42963: LD_INT 35
42965: PPUSH
42966: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
42970: LD_VAR 0 4
42974: PPUSH
42975: CALL 54219 0 1
42979: PUSH
42980: LD_INT 0
42982: EQUAL
42983: IFFALSE 42963
// wait ( 0 0$10 ) ;
42985: LD_INT 350
42987: PPUSH
42988: CALL_OW 67
// for i = 1 to coords do
42992: LD_ADDR_VAR 0 1
42996: PUSH
42997: DOUBLE
42998: LD_INT 1
43000: DEC
43001: ST_TO_ADDR
43002: LD_VAR 0 6
43006: PUSH
43007: FOR_TO
43008: IFFALSE 43096
// begin t := DangerAtRangeXY ( side_bot , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] , 35 ) [ 4 ] ;
43010: LD_ADDR_VAR 0 2
43014: PUSH
43015: LD_EXP 3
43019: PPUSH
43020: LD_VAR 0 6
43024: PUSH
43025: LD_VAR 0 1
43029: ARRAY
43030: PUSH
43031: LD_INT 1
43033: ARRAY
43034: PPUSH
43035: LD_VAR 0 6
43039: PUSH
43040: LD_VAR 0 1
43044: ARRAY
43045: PUSH
43046: LD_INT 2
43048: ARRAY
43049: PPUSH
43050: LD_INT 35
43052: PPUSH
43053: CALL 11675 0 4
43057: PUSH
43058: LD_INT 4
43060: ARRAY
43061: ST_TO_ADDR
// if t > x then
43062: LD_VAR 0 2
43066: PUSH
43067: LD_VAR 0 3
43071: GREATER
43072: IFFALSE 43094
// begin x := t ;
43074: LD_ADDR_VAR 0 3
43078: PUSH
43079: LD_VAR 0 2
43083: ST_TO_ADDR
// target := i ;
43084: LD_ADDR_VAR 0 9
43088: PUSH
43089: LD_VAR 0 1
43093: ST_TO_ADDR
// end ; end ;
43094: GO 43007
43096: POP
43097: POP
// case target of 1 :
43098: LD_VAR 0 9
43102: PUSH
43103: LD_INT 1
43105: DOUBLE
43106: EQUAL
43107: IFTRUE 43111
43109: GO 43143
43111: POP
// _target := [ [ 60 , 8 ] , [ 28 , 15 ] ] ; 2 :
43112: LD_ADDR_VAR 0 10
43116: PUSH
43117: LD_INT 60
43119: PUSH
43120: LD_INT 8
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 28
43129: PUSH
43130: LD_INT 15
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: ST_TO_ADDR
43141: GO 43264
43143: LD_INT 2
43145: DOUBLE
43146: EQUAL
43147: IFTRUE 43151
43149: GO 43183
43151: POP
// _target := [ [ 52 , 11 ] , [ 76 , 90 ] ] ; 3 :
43152: LD_ADDR_VAR 0 10
43156: PUSH
43157: LD_INT 52
43159: PUSH
43160: LD_INT 11
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 76
43169: PUSH
43170: LD_INT 90
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: ST_TO_ADDR
43181: GO 43264
43183: LD_INT 3
43185: DOUBLE
43186: EQUAL
43187: IFTRUE 43191
43189: GO 43223
43191: POP
// _target := [ [ 129 , 66 ] , [ 130 , 97 ] ] ; 4 :
43192: LD_ADDR_VAR 0 10
43196: PUSH
43197: LD_INT 129
43199: PUSH
43200: LD_INT 66
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 130
43209: PUSH
43210: LD_INT 97
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: ST_TO_ADDR
43221: GO 43264
43223: LD_INT 4
43225: DOUBLE
43226: EQUAL
43227: IFTRUE 43231
43229: GO 43263
43231: POP
// _target := [ [ 156 , 87 ] , [ 183 , 127 ] ] ; end ;
43232: LD_ADDR_VAR 0 10
43236: PUSH
43237: LD_INT 156
43239: PUSH
43240: LD_INT 87
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 183
43249: PUSH
43250: LD_INT 127
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: ST_TO_ADDR
43261: GO 43264
43263: POP
// if not _target then
43264: LD_VAR 0 10
43268: NOT
43269: IFFALSE 43300
// _target := [ [ 52 , 11 ] , [ 76 , 90 ] ] ;
43271: LD_ADDR_VAR 0 10
43275: PUSH
43276: LD_INT 52
43278: PUSH
43279: LD_INT 11
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 76
43288: PUSH
43289: LD_INT 90
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: ST_TO_ADDR
// MC_PrepareAttack ( base , mc_vehicles [ base ] , _target , flags ) ;
43300: LD_VAR 0 4
43304: PPUSH
43305: LD_EXP 59
43309: PUSH
43310: LD_VAR 0 4
43314: ARRAY
43315: PPUSH
43316: LD_VAR 0 10
43320: PPUSH
43321: LD_VAR 0 7
43325: PPUSH
43326: CALL 54104 0 4
// end ;
43330: PPOPN 10
43332: END
// every 13 13$00 + 10 10$00 trigger ( IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) = side_bot ) and ( multi_players_amount = 3 or IsDead ( ar_dep_n ) or GetSide ( ar_dep_n ) <> side_bot ) do var i , t , x , base , tmp , coords , flags , danger , target , _target ;
43333: LD_INT 45
43335: PPUSH
43336: CALL_OW 302
43340: PUSH
43341: LD_INT 45
43343: PPUSH
43344: CALL_OW 255
43348: PUSH
43349: LD_EXP 3
43353: EQUAL
43354: AND
43355: PUSH
43356: LD_EXP 26
43360: PUSH
43361: LD_INT 3
43363: EQUAL
43364: PUSH
43365: LD_INT 94
43367: PPUSH
43368: CALL_OW 301
43372: OR
43373: PUSH
43374: LD_INT 94
43376: PPUSH
43377: CALL_OW 255
43381: PUSH
43382: LD_EXP 3
43386: NONEQUAL
43387: OR
43388: AND
43389: IFFALSE 43975
43391: GO 43393
43393: DISABLE
43394: LD_INT 0
43396: PPUSH
43397: PPUSH
43398: PPUSH
43399: PPUSH
43400: PPUSH
43401: PPUSH
43402: PPUSH
43403: PPUSH
43404: PPUSH
43405: PPUSH
// begin enable ;
43406: ENABLE
// base := 2 ;
43407: LD_ADDR_VAR 0 4
43411: PUSH
43412: LD_INT 2
43414: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
43415: LD_ADDR_VAR 0 7
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: ST_TO_ADDR
// coords := [ [ 101 , 110 ] , [ 100 , 21 ] ] ;
43462: LD_ADDR_VAR 0 6
43466: PUSH
43467: LD_INT 101
43469: PUSH
43470: LD_INT 110
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 100
43479: PUSH
43480: LD_INT 21
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: ST_TO_ADDR
// target := 0 ;
43491: LD_ADDR_VAR 0 9
43495: PUSH
43496: LD_INT 0
43498: ST_TO_ADDR
// x := 0 ;
43499: LD_ADDR_VAR 0 3
43503: PUSH
43504: LD_INT 0
43506: ST_TO_ADDR
// tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , ] ;
43507: LD_ADDR_VAR 0 5
43511: PUSH
43512: LD_INT 14
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: LD_INT 28
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 14
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: LD_INT 25
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 14
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: LD_INT 28
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: ST_TO_ADDR
// if Difficulty > 1 then
43571: LD_OWVAR 67
43575: PUSH
43576: LD_INT 1
43578: GREATER
43579: IFFALSE 43674
// for i = 1 to Difficulty + 1 do
43581: LD_ADDR_VAR 0 1
43585: PUSH
43586: DOUBLE
43587: LD_INT 1
43589: DEC
43590: ST_TO_ADDR
43591: LD_OWVAR 67
43595: PUSH
43596: LD_INT 1
43598: PLUS
43599: PUSH
43600: FOR_TO
43601: IFFALSE 43672
// tmp := Insert ( tmp , tmp + 1 , [ ar_half_tracked , engine_combustion , control_remote , [ ar_rocket_launcher , ar_gun , ar_gun ] [ i mod 2 + 1 ] ] ) ;
43603: LD_ADDR_VAR 0 5
43607: PUSH
43608: LD_VAR 0 5
43612: PPUSH
43613: LD_VAR 0 5
43617: PUSH
43618: LD_INT 1
43620: PLUS
43621: PPUSH
43622: LD_INT 14
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: LD_INT 28
43633: PUSH
43634: LD_INT 27
43636: PUSH
43637: LD_INT 27
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: LIST
43644: PUSH
43645: LD_VAR 0 1
43649: PUSH
43650: LD_INT 2
43652: MOD
43653: PUSH
43654: LD_INT 1
43656: PLUS
43657: ARRAY
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: PPUSH
43665: CALL_OW 2
43669: ST_TO_ADDR
43670: GO 43600
43672: POP
43673: POP
// MC_SetProduceList ( base , tmp ) ;
43674: LD_VAR 0 4
43678: PPUSH
43679: LD_VAR 0 5
43683: PPUSH
43684: CALL 53858 0 2
// repeat wait ( 0 0$1 ) ;
43688: LD_INT 35
43690: PPUSH
43691: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
43695: LD_VAR 0 4
43699: PPUSH
43700: CALL 54219 0 1
43704: PUSH
43705: LD_INT 0
43707: EQUAL
43708: IFFALSE 43688
// wait ( 0 0$10 ) ;
43710: LD_INT 350
43712: PPUSH
43713: CALL_OW 67
// for i = 1 to coords do
43717: LD_ADDR_VAR 0 1
43721: PUSH
43722: DOUBLE
43723: LD_INT 1
43725: DEC
43726: ST_TO_ADDR
43727: LD_VAR 0 6
43731: PUSH
43732: FOR_TO
43733: IFFALSE 43821
// begin t := DangerAtRangeXY ( side_bot , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] , 35 ) [ 4 ] ;
43735: LD_ADDR_VAR 0 2
43739: PUSH
43740: LD_EXP 3
43744: PPUSH
43745: LD_VAR 0 6
43749: PUSH
43750: LD_VAR 0 1
43754: ARRAY
43755: PUSH
43756: LD_INT 1
43758: ARRAY
43759: PPUSH
43760: LD_VAR 0 6
43764: PUSH
43765: LD_VAR 0 1
43769: ARRAY
43770: PUSH
43771: LD_INT 2
43773: ARRAY
43774: PPUSH
43775: LD_INT 35
43777: PPUSH
43778: CALL 11675 0 4
43782: PUSH
43783: LD_INT 4
43785: ARRAY
43786: ST_TO_ADDR
// if t > x then
43787: LD_VAR 0 2
43791: PUSH
43792: LD_VAR 0 3
43796: GREATER
43797: IFFALSE 43819
// begin x := t ;
43799: LD_ADDR_VAR 0 3
43803: PUSH
43804: LD_VAR 0 2
43808: ST_TO_ADDR
// target := i ;
43809: LD_ADDR_VAR 0 9
43813: PUSH
43814: LD_VAR 0 1
43818: ST_TO_ADDR
// end ; end ;
43819: GO 43732
43821: POP
43822: POP
// case target of 1 :
43823: LD_VAR 0 9
43827: PUSH
43828: LD_INT 1
43830: DOUBLE
43831: EQUAL
43832: IFTRUE 43836
43834: GO 43868
43836: POP
// _target := [ [ 49 , 35 ] , [ 76 , 90 ] ] ; 2 :
43837: LD_ADDR_VAR 0 10
43841: PUSH
43842: LD_INT 49
43844: PUSH
43845: LD_INT 35
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 76
43854: PUSH
43855: LD_INT 90
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: ST_TO_ADDR
43866: GO 43909
43868: LD_INT 2
43870: DOUBLE
43871: EQUAL
43872: IFTRUE 43876
43874: GO 43908
43876: POP
// _target := [ [ 79 , 13 ] , [ 100 , 22 ] ] ; end ;
43877: LD_ADDR_VAR 0 10
43881: PUSH
43882: LD_INT 79
43884: PUSH
43885: LD_INT 13
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 100
43894: PUSH
43895: LD_INT 22
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: ST_TO_ADDR
43906: GO 43909
43908: POP
// if not _target then
43909: LD_VAR 0 10
43913: NOT
43914: IFFALSE 43945
// _target := [ [ 49 , 35 ] , [ 76 , 90 ] ] ;
43916: LD_ADDR_VAR 0 10
43920: PUSH
43921: LD_INT 49
43923: PUSH
43924: LD_INT 35
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 76
43933: PUSH
43934: LD_INT 90
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: ST_TO_ADDR
// MC_PrepareAttack ( base , mc_vehicles [ base ] , _target , flags ) ;
43945: LD_VAR 0 4
43949: PPUSH
43950: LD_EXP 59
43954: PUSH
43955: LD_VAR 0 4
43959: ARRAY
43960: PPUSH
43961: LD_VAR 0 10
43965: PPUSH
43966: LD_VAR 0 7
43970: PPUSH
43971: CALL 54104 0 4
// end ; end_of_file
43975: PPOPN 10
43977: END
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech ; export function InitMacro ; begin
43978: LD_INT 0
43980: PPUSH
// skirmish := false ;
43981: LD_ADDR_EXP 40
43985: PUSH
43986: LD_INT 0
43988: ST_TO_ADDR
// mc_bases := [ ] ;
43989: LD_ADDR_EXP 41
43993: PUSH
43994: EMPTY
43995: ST_TO_ADDR
// mc_sides := [ ] ;
43996: LD_ADDR_EXP 66
44000: PUSH
44001: EMPTY
44002: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
44003: LD_ADDR_EXP 42
44007: PUSH
44008: EMPTY
44009: ST_TO_ADDR
// mc_building_repairs := [ ] ;
44010: LD_ADDR_EXP 43
44014: PUSH
44015: EMPTY
44016: ST_TO_ADDR
// mc_need_heal := [ ] ;
44017: LD_ADDR_EXP 44
44021: PUSH
44022: EMPTY
44023: ST_TO_ADDR
// mc_healers := [ ] ;
44024: LD_ADDR_EXP 45
44028: PUSH
44029: EMPTY
44030: ST_TO_ADDR
// mc_build_list := [ ] ;
44031: LD_ADDR_EXP 46
44035: PUSH
44036: EMPTY
44037: ST_TO_ADDR
// mc_builders := [ ] ;
44038: LD_ADDR_EXP 47
44042: PUSH
44043: EMPTY
44044: ST_TO_ADDR
// mc_construct_list := [ ] ;
44045: LD_ADDR_EXP 48
44049: PUSH
44050: EMPTY
44051: ST_TO_ADDR
// mc_turret_list := [ ] ;
44052: LD_ADDR_EXP 49
44056: PUSH
44057: EMPTY
44058: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
44059: LD_ADDR_EXP 50
44063: PUSH
44064: EMPTY
44065: ST_TO_ADDR
// mc_miners := [ ] ;
44066: LD_ADDR_EXP 55
44070: PUSH
44071: EMPTY
44072: ST_TO_ADDR
// mc_mines := [ ] ;
44073: LD_ADDR_EXP 54
44077: PUSH
44078: EMPTY
44079: ST_TO_ADDR
// mc_minefields := [ ] ;
44080: LD_ADDR_EXP 56
44084: PUSH
44085: EMPTY
44086: ST_TO_ADDR
// mc_crates := [ ] ;
44087: LD_ADDR_EXP 57
44091: PUSH
44092: EMPTY
44093: ST_TO_ADDR
// mc_crates_collector := [ ] ;
44094: LD_ADDR_EXP 58
44098: PUSH
44099: EMPTY
44100: ST_TO_ADDR
// mc_vehicles := [ ] ;
44101: LD_ADDR_EXP 59
44105: PUSH
44106: EMPTY
44107: ST_TO_ADDR
// mc_attack := [ ] ;
44108: LD_ADDR_EXP 60
44112: PUSH
44113: EMPTY
44114: ST_TO_ADDR
// mc_produce := [ ] ;
44115: LD_ADDR_EXP 61
44119: PUSH
44120: EMPTY
44121: ST_TO_ADDR
// mc_defender := [ ] ;
44122: LD_ADDR_EXP 62
44126: PUSH
44127: EMPTY
44128: ST_TO_ADDR
// mc_parking := [ ] ;
44129: LD_ADDR_EXP 64
44133: PUSH
44134: EMPTY
44135: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
44136: LD_ADDR_EXP 51
44140: PUSH
44141: EMPTY
44142: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
44143: LD_ADDR_EXP 53
44147: PUSH
44148: EMPTY
44149: ST_TO_ADDR
// mc_scan := [ ] ;
44150: LD_ADDR_EXP 63
44154: PUSH
44155: EMPTY
44156: ST_TO_ADDR
// mc_scan_area := [ ] ;
44157: LD_ADDR_EXP 65
44161: PUSH
44162: EMPTY
44163: ST_TO_ADDR
// mc_tech := [ ] ;
44164: LD_ADDR_EXP 67
44168: PUSH
44169: EMPTY
44170: ST_TO_ADDR
// end ;
44171: LD_VAR 0 1
44175: RET
// export function RunMacro ; var i ; begin
44176: LD_INT 0
44178: PPUSH
44179: PPUSH
// for i = 1 to mc_bases do
44180: LD_ADDR_VAR 0 2
44184: PUSH
44185: DOUBLE
44186: LD_INT 1
44188: DEC
44189: ST_TO_ADDR
44190: LD_EXP 41
44194: PUSH
44195: FOR_TO
44196: IFFALSE 44789
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
44198: LD_ADDR_EXP 42
44202: PUSH
44203: LD_EXP 42
44207: PPUSH
44208: LD_VAR 0 2
44212: PPUSH
44213: EMPTY
44214: PPUSH
44215: CALL_OW 1
44219: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
44220: LD_ADDR_EXP 43
44224: PUSH
44225: LD_EXP 43
44229: PPUSH
44230: LD_VAR 0 2
44234: PPUSH
44235: EMPTY
44236: PPUSH
44237: CALL_OW 1
44241: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
44242: LD_ADDR_EXP 44
44246: PUSH
44247: LD_EXP 44
44251: PPUSH
44252: LD_VAR 0 2
44256: PPUSH
44257: EMPTY
44258: PPUSH
44259: CALL_OW 1
44263: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
44264: LD_ADDR_EXP 45
44268: PUSH
44269: LD_EXP 45
44273: PPUSH
44274: LD_VAR 0 2
44278: PPUSH
44279: EMPTY
44280: PUSH
44281: EMPTY
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PPUSH
44287: CALL_OW 1
44291: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
44292: LD_ADDR_EXP 46
44296: PUSH
44297: LD_EXP 46
44301: PPUSH
44302: LD_VAR 0 2
44306: PPUSH
44307: EMPTY
44308: PPUSH
44309: CALL_OW 1
44313: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
44314: LD_ADDR_EXP 47
44318: PUSH
44319: LD_EXP 47
44323: PPUSH
44324: LD_VAR 0 2
44328: PPUSH
44329: EMPTY
44330: PPUSH
44331: CALL_OW 1
44335: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
44336: LD_ADDR_EXP 48
44340: PUSH
44341: LD_EXP 48
44345: PPUSH
44346: LD_VAR 0 2
44350: PPUSH
44351: EMPTY
44352: PPUSH
44353: CALL_OW 1
44357: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
44358: LD_ADDR_EXP 49
44362: PUSH
44363: LD_EXP 49
44367: PPUSH
44368: LD_VAR 0 2
44372: PPUSH
44373: EMPTY
44374: PPUSH
44375: CALL_OW 1
44379: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
44380: LD_ADDR_EXP 50
44384: PUSH
44385: LD_EXP 50
44389: PPUSH
44390: LD_VAR 0 2
44394: PPUSH
44395: LD_EXP 41
44399: PUSH
44400: LD_VAR 0 2
44404: ARRAY
44405: PPUSH
44406: LD_INT 2
44408: PUSH
44409: LD_INT 30
44411: PUSH
44412: LD_INT 32
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 30
44421: PUSH
44422: LD_INT 31
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 58
44436: PUSH
44437: EMPTY
44438: LIST
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PPUSH
44444: CALL_OW 72
44448: PPUSH
44449: CALL_OW 1
44453: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
44454: LD_ADDR_EXP 51
44458: PUSH
44459: LD_EXP 51
44463: PPUSH
44464: LD_VAR 0 2
44468: PPUSH
44469: EMPTY
44470: PPUSH
44471: CALL_OW 1
44475: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
44476: LD_ADDR_EXP 55
44480: PUSH
44481: LD_EXP 55
44485: PPUSH
44486: LD_VAR 0 2
44490: PPUSH
44491: EMPTY
44492: PPUSH
44493: CALL_OW 1
44497: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
44498: LD_ADDR_EXP 54
44502: PUSH
44503: LD_EXP 54
44507: PPUSH
44508: LD_VAR 0 2
44512: PPUSH
44513: EMPTY
44514: PPUSH
44515: CALL_OW 1
44519: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
44520: LD_ADDR_EXP 56
44524: PUSH
44525: LD_EXP 56
44529: PPUSH
44530: LD_VAR 0 2
44534: PPUSH
44535: EMPTY
44536: PPUSH
44537: CALL_OW 1
44541: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
44542: LD_ADDR_EXP 57
44546: PUSH
44547: LD_EXP 57
44551: PPUSH
44552: LD_VAR 0 2
44556: PPUSH
44557: EMPTY
44558: PPUSH
44559: CALL_OW 1
44563: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
44564: LD_ADDR_EXP 58
44568: PUSH
44569: LD_EXP 58
44573: PPUSH
44574: LD_VAR 0 2
44578: PPUSH
44579: EMPTY
44580: PPUSH
44581: CALL_OW 1
44585: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
44586: LD_ADDR_EXP 59
44590: PUSH
44591: LD_EXP 59
44595: PPUSH
44596: LD_VAR 0 2
44600: PPUSH
44601: EMPTY
44602: PPUSH
44603: CALL_OW 1
44607: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
44608: LD_ADDR_EXP 60
44612: PUSH
44613: LD_EXP 60
44617: PPUSH
44618: LD_VAR 0 2
44622: PPUSH
44623: EMPTY
44624: PPUSH
44625: CALL_OW 1
44629: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
44630: LD_ADDR_EXP 61
44634: PUSH
44635: LD_EXP 61
44639: PPUSH
44640: LD_VAR 0 2
44644: PPUSH
44645: EMPTY
44646: PPUSH
44647: CALL_OW 1
44651: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
44652: LD_ADDR_EXP 62
44656: PUSH
44657: LD_EXP 62
44661: PPUSH
44662: LD_VAR 0 2
44666: PPUSH
44667: EMPTY
44668: PPUSH
44669: CALL_OW 1
44673: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
44674: LD_ADDR_EXP 52
44678: PUSH
44679: LD_EXP 52
44683: PPUSH
44684: LD_VAR 0 2
44688: PPUSH
44689: LD_INT 0
44691: PPUSH
44692: CALL_OW 1
44696: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
44697: LD_ADDR_EXP 64
44701: PUSH
44702: LD_EXP 64
44706: PPUSH
44707: LD_VAR 0 2
44711: PPUSH
44712: LD_INT 0
44714: PPUSH
44715: CALL_OW 1
44719: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
44720: LD_ADDR_EXP 53
44724: PUSH
44725: LD_EXP 53
44729: PPUSH
44730: LD_VAR 0 2
44734: PPUSH
44735: EMPTY
44736: PPUSH
44737: CALL_OW 1
44741: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
44742: LD_ADDR_EXP 63
44746: PUSH
44747: LD_EXP 63
44751: PPUSH
44752: LD_VAR 0 2
44756: PPUSH
44757: LD_INT 0
44759: PPUSH
44760: CALL_OW 1
44764: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
44765: LD_ADDR_EXP 65
44769: PUSH
44770: LD_EXP 65
44774: PPUSH
44775: LD_VAR 0 2
44779: PPUSH
44780: EMPTY
44781: PPUSH
44782: CALL_OW 1
44786: ST_TO_ADDR
// end ;
44787: GO 44195
44789: POP
44790: POP
// MC_InitSides ( ) ;
44791: CALL 45222 0 0
// MC_InitResearch ( ) ;
44795: CALL 51482 0 0
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
44799: LD_INT 1
44801: PPUSH
44802: LD_INT 8
44804: PUSH
44805: LD_INT 10
44807: PUSH
44808: LD_INT 12
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: PUSH
44816: LD_OWVAR 67
44820: ARRAY
44821: PPUSH
44822: LD_INT 3
44824: PPUSH
44825: CALL 53648 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
44829: LD_INT 2
44831: PPUSH
44832: LD_INT 6
44834: PUSH
44835: LD_INT 8
44837: PUSH
44838: LD_INT 9
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: LIST
44845: PUSH
44846: LD_OWVAR 67
44850: ARRAY
44851: PPUSH
44852: LD_INT 2
44854: PPUSH
44855: CALL 53648 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
44859: LD_INT 3
44861: PPUSH
44862: LD_INT 6
44864: PUSH
44865: LD_INT 7
44867: PUSH
44868: LD_INT 9
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: LIST
44875: PUSH
44876: LD_OWVAR 67
44880: ARRAY
44881: PPUSH
44882: LD_INT 1
44884: PPUSH
44885: CALL 53648 0 3
// MC_SetMinesField ( 4 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield4_left ) ;
44889: LD_INT 4
44891: PPUSH
44892: LD_INT 6
44894: PUSH
44895: LD_INT 7
44897: PUSH
44898: LD_INT 9
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: LIST
44905: PUSH
44906: LD_OWVAR 67
44910: ARRAY
44911: PPUSH
44912: LD_INT 25
44914: PPUSH
44915: CALL 53648 0 3
// mc_parking := [ parking_north , parking_west , parking_east , parking_south ] ;
44919: LD_ADDR_EXP 64
44923: PUSH
44924: LD_INT 20
44926: PUSH
44927: LD_INT 21
44929: PUSH
44930: LD_INT 22
44932: PUSH
44933: LD_INT 24
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: ST_TO_ADDR
// mc_scan_area := [ area_base_north , area_base_west , area_base_east , area_base_south ] ;
44942: LD_ADDR_EXP 65
44946: PUSH
44947: LD_INT 35
44949: PUSH
44950: LD_INT 34
44952: PUSH
44953: LD_INT 36
44955: PUSH
44956: LD_INT 33
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: ST_TO_ADDR
// for i = 1 to mc_bases do
44965: LD_ADDR_VAR 0 2
44969: PUSH
44970: DOUBLE
44971: LD_INT 1
44973: DEC
44974: ST_TO_ADDR
44975: LD_EXP 41
44979: PUSH
44980: FOR_TO
44981: IFFALSE 45005
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
44983: LD_VAR 0 2
44987: PPUSH
44988: LD_EXP 37
44992: PUSH
44993: LD_VAR 0 2
44997: ARRAY
44998: PPUSH
44999: CALL 53969 0 2
45003: GO 44980
45005: POP
45006: POP
// skirmish := true ;
45007: LD_ADDR_EXP 40
45011: PUSH
45012: LD_INT 1
45014: ST_TO_ADDR
// end ;
45015: LD_VAR 0 1
45019: RET
// every 0 0$01 trigger skirmish do
45020: LD_EXP 40
45024: IFFALSE 45115
45026: GO 45028
45028: DISABLE
// begin enable ;
45029: ENABLE
// MC_CheckBuildings ( ) ;
45030: CALL 45570 0 0
// MC_CheckPeopleLife ( ) ;
45034: CALL 45695 0 0
// RaiseSailEvent ( 103 ) ;
45038: LD_INT 103
45040: PPUSH
45041: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
45045: LD_INT 104
45047: PPUSH
45048: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
45052: LD_INT 106
45054: PPUSH
45055: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
45059: LD_INT 107
45061: PPUSH
45062: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
45066: LD_INT 108
45068: PPUSH
45069: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
45073: LD_INT 109
45075: PPUSH
45076: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
45080: LD_INT 110
45082: PPUSH
45083: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
45087: LD_INT 111
45089: PPUSH
45090: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
45094: LD_INT 112
45096: PPUSH
45097: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
45101: LD_INT 120
45103: PPUSH
45104: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
45108: LD_INT 200
45110: PPUSH
45111: CALL_OW 427
// end ;
45115: END
// every 10 trigger skirmish do var i ;
45116: LD_EXP 40
45120: IFFALSE 45219
45122: GO 45124
45124: DISABLE
45125: LD_INT 0
45127: PPUSH
// begin enable ;
45128: ENABLE
// if not mc_bases then
45129: LD_EXP 41
45133: NOT
45134: IFFALSE 45138
// exit ;
45136: GO 45219
// for i = 1 to mc_bases do
45138: LD_ADDR_VAR 0 1
45142: PUSH
45143: DOUBLE
45144: LD_INT 1
45146: DEC
45147: ST_TO_ADDR
45148: LD_EXP 41
45152: PUSH
45153: FOR_TO
45154: IFFALSE 45217
// if mc_mines [ i ] and mc_miners [ i ] then
45156: LD_EXP 54
45160: PUSH
45161: LD_VAR 0 1
45165: ARRAY
45166: PUSH
45167: LD_EXP 55
45171: PUSH
45172: LD_VAR 0 1
45176: ARRAY
45177: AND
45178: IFFALSE 45215
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
45180: LD_EXP 55
45184: PUSH
45185: LD_VAR 0 1
45189: ARRAY
45190: PUSH
45191: LD_INT 1
45193: ARRAY
45194: PPUSH
45195: CALL_OW 255
45199: PPUSH
45200: LD_EXP 54
45204: PUSH
45205: LD_VAR 0 1
45209: ARRAY
45210: PPUSH
45211: CALL 7860 0 2
45215: GO 45153
45217: POP
45218: POP
// end ;
45219: PPOPN 1
45221: END
// export function MC_InitSides ( ) ; var i ; begin
45222: LD_INT 0
45224: PPUSH
45225: PPUSH
// if not mc_bases then
45226: LD_EXP 41
45230: NOT
45231: IFFALSE 45235
// exit ;
45233: GO 45297
// for i = 1 to mc_bases do
45235: LD_ADDR_VAR 0 2
45239: PUSH
45240: DOUBLE
45241: LD_INT 1
45243: DEC
45244: ST_TO_ADDR
45245: LD_EXP 41
45249: PUSH
45250: FOR_TO
45251: IFFALSE 45295
// if mc_bases then
45253: LD_EXP 41
45257: IFFALSE 45293
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ 1 ] ) ) ;
45259: LD_ADDR_EXP 66
45263: PUSH
45264: LD_EXP 66
45268: PPUSH
45269: LD_VAR 0 2
45273: PPUSH
45274: LD_EXP 41
45278: PUSH
45279: LD_INT 1
45281: ARRAY
45282: PPUSH
45283: CALL_OW 255
45287: PPUSH
45288: CALL_OW 1
45292: ST_TO_ADDR
45293: GO 45250
45295: POP
45296: POP
// end ;
45297: LD_VAR 0 1
45301: RET
// on SailEvent ( event ) do begin if event = 101 then
45302: LD_VAR 0 1
45306: PUSH
45307: LD_INT 101
45309: EQUAL
45310: IFFALSE 45316
// MC_RepairBuildings ( ) ;
45312: CALL 46241 0 0
// if event = 102 then
45316: LD_VAR 0 1
45320: PUSH
45321: LD_INT 102
45323: EQUAL
45324: IFFALSE 45330
// MC_Heal ( ) ;
45326: CALL 46635 0 0
// if event = 103 then
45330: LD_VAR 0 1
45334: PUSH
45335: LD_INT 103
45337: EQUAL
45338: IFFALSE 45344
// MC_Build ( ) ;
45340: CALL 47020 0 0
// if event = 104 then
45344: LD_VAR 0 1
45348: PUSH
45349: LD_INT 104
45351: EQUAL
45352: IFFALSE 45358
// MC_TurretWeapon ( ) ;
45354: CALL 47814 0 0
// if event = 106 then
45358: LD_VAR 0 1
45362: PUSH
45363: LD_INT 106
45365: EQUAL
45366: IFFALSE 45372
// MC_PlantMines ( ) ;
45368: CALL 48133 0 0
// if event = 107 then
45372: LD_VAR 0 1
45376: PUSH
45377: LD_INT 107
45379: EQUAL
45380: IFFALSE 45386
// MC_CollectCrates ( ) ;
45382: CALL 49140 0 0
// if event = 108 then
45386: LD_VAR 0 1
45390: PUSH
45391: LD_INT 108
45393: EQUAL
45394: IFFALSE 45400
// MC_LinkRemoteControl ( ) ;
45396: CALL 49949 0 0
// if event = 109 then
45400: LD_VAR 0 1
45404: PUSH
45405: LD_INT 109
45407: EQUAL
45408: IFFALSE 45414
// MC_ProduceVehicle ( ) ;
45410: CALL 50130 0 0
// if event = 110 then
45414: LD_VAR 0 1
45418: PUSH
45419: LD_INT 110
45421: EQUAL
45422: IFFALSE 45428
// MC_SendAttack ( ) ;
45424: CALL 50611 0 0
// if event = 111 then
45428: LD_VAR 0 1
45432: PUSH
45433: LD_INT 111
45435: EQUAL
45436: IFFALSE 45442
// MC_Defend ( ) ;
45438: CALL 50719 0 0
// if event = 112 then
45442: LD_VAR 0 1
45446: PUSH
45447: LD_INT 112
45449: EQUAL
45450: IFFALSE 45456
// MC_Research ( ) ;
45452: CALL 51087 0 0
// if event = 120 then
45456: LD_VAR 0 1
45460: PUSH
45461: LD_INT 120
45463: EQUAL
45464: IFFALSE 45470
// MC_RepairVehicle ( ) ;
45466: CALL 51743 0 0
// if event = 200 then
45470: LD_VAR 0 1
45474: PUSH
45475: LD_INT 200
45477: EQUAL
45478: IFFALSE 45484
// MC_Idle ( ) ;
45480: CALL 53396 0 0
// end ;
45484: PPOPN 1
45486: END
// export function MC_Reset ( base , tag ) ; var i ; begin
45487: LD_INT 0
45489: PPUSH
45490: PPUSH
// if not mc_bases [ base ] or not tag then
45491: LD_EXP 41
45495: PUSH
45496: LD_VAR 0 1
45500: ARRAY
45501: NOT
45502: PUSH
45503: LD_VAR 0 2
45507: NOT
45508: OR
45509: IFFALSE 45513
// exit ;
45511: GO 45565
// for i in mc_bases [ base ] do
45513: LD_ADDR_VAR 0 4
45517: PUSH
45518: LD_EXP 41
45522: PUSH
45523: LD_VAR 0 1
45527: ARRAY
45528: PUSH
45529: FOR_IN
45530: IFFALSE 45563
// if GetTag ( i ) = tag then
45532: LD_VAR 0 4
45536: PPUSH
45537: CALL_OW 110
45541: PUSH
45542: LD_VAR 0 2
45546: EQUAL
45547: IFFALSE 45561
// SetTag ( i , 0 ) ;
45549: LD_VAR 0 4
45553: PPUSH
45554: LD_INT 0
45556: PPUSH
45557: CALL_OW 109
45561: GO 45529
45563: POP
45564: POP
// end ;
45565: LD_VAR 0 3
45569: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
45570: LD_INT 0
45572: PPUSH
45573: PPUSH
45574: PPUSH
// if not mc_bases then
45575: LD_EXP 41
45579: NOT
45580: IFFALSE 45584
// exit ;
45582: GO 45690
// for i = 1 to mc_bases do
45584: LD_ADDR_VAR 0 2
45588: PUSH
45589: DOUBLE
45590: LD_INT 1
45592: DEC
45593: ST_TO_ADDR
45594: LD_EXP 41
45598: PUSH
45599: FOR_TO
45600: IFFALSE 45681
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
45602: LD_ADDR_VAR 0 3
45606: PUSH
45607: LD_EXP 41
45611: PUSH
45612: LD_VAR 0 2
45616: ARRAY
45617: PPUSH
45618: LD_INT 21
45620: PUSH
45621: LD_INT 3
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 3
45630: PUSH
45631: LD_INT 24
45633: PUSH
45634: LD_INT 1000
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PPUSH
45649: CALL_OW 72
45653: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
45654: LD_ADDR_EXP 42
45658: PUSH
45659: LD_EXP 42
45663: PPUSH
45664: LD_VAR 0 2
45668: PPUSH
45669: LD_VAR 0 3
45673: PPUSH
45674: CALL_OW 1
45678: ST_TO_ADDR
// end ;
45679: GO 45599
45681: POP
45682: POP
// RaiseSailEvent ( 101 ) ;
45683: LD_INT 101
45685: PPUSH
45686: CALL_OW 427
// end ;
45690: LD_VAR 0 1
45694: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
45695: LD_INT 0
45697: PPUSH
45698: PPUSH
45699: PPUSH
45700: PPUSH
45701: PPUSH
45702: PPUSH
45703: PPUSH
// if not mc_bases then
45704: LD_EXP 41
45708: NOT
45709: IFFALSE 45713
// exit ;
45711: GO 46236
// for i = 1 to mc_bases do
45713: LD_ADDR_VAR 0 2
45717: PUSH
45718: DOUBLE
45719: LD_INT 1
45721: DEC
45722: ST_TO_ADDR
45723: LD_EXP 41
45727: PUSH
45728: FOR_TO
45729: IFFALSE 46227
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
45731: LD_ADDR_VAR 0 5
45735: PUSH
45736: LD_EXP 41
45740: PUSH
45741: LD_VAR 0 2
45745: ARRAY
45746: PPUSH
45747: LD_INT 21
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 3
45762: PUSH
45763: LD_INT 54
45765: PUSH
45766: EMPTY
45767: LIST
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 3
45775: PUSH
45776: LD_INT 24
45778: PUSH
45779: LD_INT 700
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: LIST
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PPUSH
45799: CALL_OW 72
45803: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
45804: LD_ADDR_VAR 0 6
45808: PUSH
45809: LD_EXP 41
45813: PUSH
45814: LD_VAR 0 2
45818: ARRAY
45819: PPUSH
45820: LD_INT 21
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 3
45835: PUSH
45836: LD_INT 54
45838: PUSH
45839: EMPTY
45840: LIST
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 3
45848: PUSH
45849: LD_INT 24
45851: PUSH
45852: LD_INT 250
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PPUSH
45872: CALL_OW 72
45876: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
45877: LD_ADDR_VAR 0 7
45881: PUSH
45882: LD_VAR 0 5
45886: PUSH
45887: LD_VAR 0 6
45891: DIFF
45892: ST_TO_ADDR
// if not need_heal_1 then
45893: LD_VAR 0 6
45897: NOT
45898: IFFALSE 45931
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
45900: LD_ADDR_EXP 44
45904: PUSH
45905: LD_EXP 44
45909: PPUSH
45910: LD_VAR 0 2
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PPUSH
45922: EMPTY
45923: PPUSH
45924: CALL 11181 0 3
45928: ST_TO_ADDR
45929: GO 45963
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
45931: LD_ADDR_EXP 44
45935: PUSH
45936: LD_EXP 44
45940: PPUSH
45941: LD_VAR 0 2
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PPUSH
45953: LD_VAR 0 6
45957: PPUSH
45958: CALL 11181 0 3
45962: ST_TO_ADDR
// if not need_heal_2 then
45963: LD_VAR 0 7
45967: NOT
45968: IFFALSE 46001
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
45970: LD_ADDR_EXP 44
45974: PUSH
45975: LD_EXP 44
45979: PPUSH
45980: LD_VAR 0 2
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PPUSH
45992: EMPTY
45993: PPUSH
45994: CALL 11181 0 3
45998: ST_TO_ADDR
45999: GO 46033
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
46001: LD_ADDR_EXP 44
46005: PUSH
46006: LD_EXP 44
46010: PPUSH
46011: LD_VAR 0 2
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PPUSH
46023: LD_VAR 0 7
46027: PPUSH
46028: CALL 11181 0 3
46032: ST_TO_ADDR
// if need_heal_2 then
46033: LD_VAR 0 7
46037: IFFALSE 46209
// for j in need_heal_2 do
46039: LD_ADDR_VAR 0 3
46043: PUSH
46044: LD_VAR 0 7
46048: PUSH
46049: FOR_IN
46050: IFFALSE 46207
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
46052: LD_ADDR_VAR 0 5
46056: PUSH
46057: LD_EXP 41
46061: PUSH
46062: LD_VAR 0 2
46066: ARRAY
46067: PPUSH
46068: LD_INT 2
46070: PUSH
46071: LD_INT 30
46073: PUSH
46074: LD_INT 6
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 30
46083: PUSH
46084: LD_INT 7
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 30
46093: PUSH
46094: LD_INT 8
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 30
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 30
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 25
46123: PUSH
46124: LD_INT 4
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: PPUSH
46140: CALL_OW 72
46144: ST_TO_ADDR
// if tmp then
46145: LD_VAR 0 5
46149: IFFALSE 46205
// begin k := NearestUnitToUnit ( tmp , j ) ;
46151: LD_ADDR_VAR 0 4
46155: PUSH
46156: LD_VAR 0 5
46160: PPUSH
46161: LD_VAR 0 3
46165: PPUSH
46166: CALL_OW 74
46170: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
46171: LD_VAR 0 3
46175: PPUSH
46176: LD_VAR 0 4
46180: PPUSH
46181: CALL_OW 296
46185: PUSH
46186: LD_INT 7
46188: GREATER
46189: IFFALSE 46205
// ComMoveUnit ( j , k ) ;
46191: LD_VAR 0 3
46195: PPUSH
46196: LD_VAR 0 4
46200: PPUSH
46201: CALL_OW 112
// end ; end ;
46205: GO 46049
46207: POP
46208: POP
// if not need_heal_1 and not need_heal_2 then
46209: LD_VAR 0 6
46213: NOT
46214: PUSH
46215: LD_VAR 0 7
46219: NOT
46220: AND
46221: IFFALSE 46225
// continue ;
46223: GO 45728
// end ;
46225: GO 45728
46227: POP
46228: POP
// RaiseSailEvent ( 102 ) ;
46229: LD_INT 102
46231: PPUSH
46232: CALL_OW 427
// end ;
46236: LD_VAR 0 1
46240: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
46241: LD_INT 0
46243: PPUSH
46244: PPUSH
46245: PPUSH
46246: PPUSH
46247: PPUSH
// if not mc_bases then
46248: LD_EXP 41
46252: NOT
46253: IFFALSE 46257
// exit ;
46255: GO 46630
// for i = 1 to mc_bases do
46257: LD_ADDR_VAR 0 2
46261: PUSH
46262: DOUBLE
46263: LD_INT 1
46265: DEC
46266: ST_TO_ADDR
46267: LD_EXP 41
46271: PUSH
46272: FOR_TO
46273: IFFALSE 46628
// begin if not mc_building_need_repair [ i ] then
46275: LD_EXP 42
46279: PUSH
46280: LD_VAR 0 2
46284: ARRAY
46285: NOT
46286: IFFALSE 46324
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
46288: LD_ADDR_EXP 43
46292: PUSH
46293: LD_EXP 43
46297: PPUSH
46298: LD_VAR 0 2
46302: PPUSH
46303: EMPTY
46304: PPUSH
46305: CALL_OW 1
46309: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
46310: LD_VAR 0 2
46314: PPUSH
46315: LD_INT 101
46317: PPUSH
46318: CALL 45487 0 2
// continue ;
46322: GO 46272
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
46324: LD_ADDR_EXP 47
46328: PUSH
46329: LD_EXP 47
46333: PPUSH
46334: LD_VAR 0 2
46338: PPUSH
46339: EMPTY
46340: PPUSH
46341: CALL_OW 1
46345: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
46346: LD_VAR 0 2
46350: PPUSH
46351: LD_INT 103
46353: PPUSH
46354: CALL 45487 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
46358: LD_ADDR_VAR 0 5
46362: PUSH
46363: LD_EXP 41
46367: PUSH
46368: LD_VAR 0 2
46372: ARRAY
46373: PPUSH
46374: LD_INT 2
46376: PUSH
46377: LD_INT 25
46379: PUSH
46380: LD_INT 2
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 25
46389: PUSH
46390: LD_INT 16
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: LIST
46401: PUSH
46402: EMPTY
46403: LIST
46404: PPUSH
46405: CALL_OW 72
46409: ST_TO_ADDR
// if not tmp then
46410: LD_VAR 0 5
46414: NOT
46415: IFFALSE 46419
// continue ;
46417: GO 46272
// for j in tmp do
46419: LD_ADDR_VAR 0 3
46423: PUSH
46424: LD_VAR 0 5
46428: PUSH
46429: FOR_IN
46430: IFFALSE 46624
// begin if mc_need_heal [ i ] then
46432: LD_EXP 44
46436: PUSH
46437: LD_VAR 0 2
46441: ARRAY
46442: IFFALSE 46490
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
46444: LD_VAR 0 3
46448: PUSH
46449: LD_EXP 44
46453: PUSH
46454: LD_VAR 0 2
46458: ARRAY
46459: PUSH
46460: LD_INT 1
46462: ARRAY
46463: IN
46464: PUSH
46465: LD_VAR 0 3
46469: PUSH
46470: LD_EXP 44
46474: PUSH
46475: LD_VAR 0 2
46479: ARRAY
46480: PUSH
46481: LD_INT 2
46483: ARRAY
46484: IN
46485: OR
46486: IFFALSE 46490
// continue ;
46488: GO 46429
// if IsInUnit ( j ) then
46490: LD_VAR 0 3
46494: PPUSH
46495: CALL_OW 310
46499: IFFALSE 46510
// ComExitBuilding ( j ) ;
46501: LD_VAR 0 3
46505: PPUSH
46506: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
46510: LD_VAR 0 3
46514: PUSH
46515: LD_EXP 43
46519: PUSH
46520: LD_VAR 0 2
46524: ARRAY
46525: IN
46526: NOT
46527: IFFALSE 46585
// begin SetTag ( j , 101 ) ;
46529: LD_VAR 0 3
46533: PPUSH
46534: LD_INT 101
46536: PPUSH
46537: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
46541: LD_ADDR_EXP 43
46545: PUSH
46546: LD_EXP 43
46550: PPUSH
46551: LD_VAR 0 2
46555: PUSH
46556: LD_EXP 43
46560: PUSH
46561: LD_VAR 0 2
46565: ARRAY
46566: PUSH
46567: LD_INT 1
46569: PLUS
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PPUSH
46575: LD_VAR 0 3
46579: PPUSH
46580: CALL 11181 0 3
46584: ST_TO_ADDR
// end ; Wait ( 3 ) ;
46585: LD_INT 3
46587: PPUSH
46588: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
46592: LD_VAR 0 3
46596: PPUSH
46597: LD_EXP 42
46601: PUSH
46602: LD_VAR 0 2
46606: ARRAY
46607: PPUSH
46608: LD_VAR 0 3
46612: PPUSH
46613: CALL_OW 74
46617: PPUSH
46618: CALL_OW 130
// end ;
46622: GO 46429
46624: POP
46625: POP
// end ;
46626: GO 46272
46628: POP
46629: POP
// end ;
46630: LD_VAR 0 1
46634: RET
// export function MC_Heal ; var i , j , tmp ; begin
46635: LD_INT 0
46637: PPUSH
46638: PPUSH
46639: PPUSH
46640: PPUSH
// if not mc_bases then
46641: LD_EXP 41
46645: NOT
46646: IFFALSE 46650
// exit ;
46648: GO 47015
// for i = 1 to mc_bases do
46650: LD_ADDR_VAR 0 2
46654: PUSH
46655: DOUBLE
46656: LD_INT 1
46658: DEC
46659: ST_TO_ADDR
46660: LD_EXP 41
46664: PUSH
46665: FOR_TO
46666: IFFALSE 47013
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
46668: LD_EXP 44
46672: PUSH
46673: LD_VAR 0 2
46677: ARRAY
46678: PUSH
46679: LD_INT 1
46681: ARRAY
46682: NOT
46683: PUSH
46684: LD_EXP 44
46688: PUSH
46689: LD_VAR 0 2
46693: ARRAY
46694: PUSH
46695: LD_INT 2
46697: ARRAY
46698: NOT
46699: AND
46700: IFFALSE 46738
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
46702: LD_ADDR_EXP 45
46706: PUSH
46707: LD_EXP 45
46711: PPUSH
46712: LD_VAR 0 2
46716: PPUSH
46717: EMPTY
46718: PPUSH
46719: CALL_OW 1
46723: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
46724: LD_VAR 0 2
46728: PPUSH
46729: LD_INT 102
46731: PPUSH
46732: CALL 45487 0 2
// continue ;
46736: GO 46665
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
46738: LD_ADDR_VAR 0 4
46742: PUSH
46743: LD_EXP 41
46747: PUSH
46748: LD_VAR 0 2
46752: ARRAY
46753: PPUSH
46754: LD_INT 25
46756: PUSH
46757: LD_INT 4
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PPUSH
46764: CALL_OW 72
46768: ST_TO_ADDR
// if not tmp then
46769: LD_VAR 0 4
46773: NOT
46774: IFFALSE 46778
// continue ;
46776: GO 46665
// for j in tmp do
46778: LD_ADDR_VAR 0 3
46782: PUSH
46783: LD_VAR 0 4
46787: PUSH
46788: FOR_IN
46789: IFFALSE 47009
// begin if IsInUnit ( j ) then
46791: LD_VAR 0 3
46795: PPUSH
46796: CALL_OW 310
46800: IFFALSE 46811
// ComExitBuilding ( j ) ;
46802: LD_VAR 0 3
46806: PPUSH
46807: CALL_OW 122
// if not j in mc_healers [ i ] then
46811: LD_VAR 0 3
46815: PUSH
46816: LD_EXP 45
46820: PUSH
46821: LD_VAR 0 2
46825: ARRAY
46826: IN
46827: NOT
46828: IFFALSE 46874
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
46830: LD_ADDR_EXP 45
46834: PUSH
46835: LD_EXP 45
46839: PPUSH
46840: LD_VAR 0 2
46844: PUSH
46845: LD_EXP 45
46849: PUSH
46850: LD_VAR 0 2
46854: ARRAY
46855: PUSH
46856: LD_INT 1
46858: PLUS
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PPUSH
46864: LD_VAR 0 3
46868: PPUSH
46869: CALL 11181 0 3
46873: ST_TO_ADDR
// if not GetTag ( j ) then
46874: LD_VAR 0 3
46878: PPUSH
46879: CALL_OW 110
46883: NOT
46884: IFFALSE 46898
// SetTag ( j , 102 ) ;
46886: LD_VAR 0 3
46890: PPUSH
46891: LD_INT 102
46893: PPUSH
46894: CALL_OW 109
// Wait ( 3 ) ;
46898: LD_INT 3
46900: PPUSH
46901: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
46905: LD_EXP 44
46909: PUSH
46910: LD_VAR 0 2
46914: ARRAY
46915: PUSH
46916: LD_INT 1
46918: ARRAY
46919: IFFALSE 46951
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
46921: LD_VAR 0 3
46925: PPUSH
46926: LD_EXP 44
46930: PUSH
46931: LD_VAR 0 2
46935: ARRAY
46936: PUSH
46937: LD_INT 1
46939: ARRAY
46940: PUSH
46941: LD_INT 1
46943: ARRAY
46944: PPUSH
46945: CALL_OW 128
46949: GO 47007
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
46951: LD_VAR 0 3
46955: PPUSH
46956: CALL_OW 314
46960: NOT
46961: PUSH
46962: LD_EXP 44
46966: PUSH
46967: LD_VAR 0 2
46971: ARRAY
46972: PUSH
46973: LD_INT 2
46975: ARRAY
46976: AND
46977: IFFALSE 47007
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
46979: LD_VAR 0 3
46983: PPUSH
46984: LD_EXP 44
46988: PUSH
46989: LD_VAR 0 2
46993: ARRAY
46994: PUSH
46995: LD_INT 2
46997: ARRAY
46998: PUSH
46999: LD_INT 1
47001: ARRAY
47002: PPUSH
47003: CALL_OW 128
// end ;
47007: GO 46788
47009: POP
47010: POP
// end ;
47011: GO 46665
47013: POP
47014: POP
// end ;
47015: LD_VAR 0 1
47019: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
47020: LD_INT 0
47022: PPUSH
47023: PPUSH
47024: PPUSH
47025: PPUSH
// if not mc_bases then
47026: LD_EXP 41
47030: NOT
47031: IFFALSE 47035
// exit ;
47033: GO 47809
// for i = 1 to mc_bases do
47035: LD_ADDR_VAR 0 2
47039: PUSH
47040: DOUBLE
47041: LD_INT 1
47043: DEC
47044: ST_TO_ADDR
47045: LD_EXP 41
47049: PUSH
47050: FOR_TO
47051: IFFALSE 47807
// begin if mc_scan [ i ] then
47053: LD_EXP 63
47057: PUSH
47058: LD_VAR 0 2
47062: ARRAY
47063: IFFALSE 47067
// continue ;
47065: GO 47050
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
47067: LD_EXP 46
47071: PUSH
47072: LD_VAR 0 2
47076: ARRAY
47077: NOT
47078: PUSH
47079: LD_EXP 48
47083: PUSH
47084: LD_VAR 0 2
47088: ARRAY
47089: NOT
47090: AND
47091: PUSH
47092: LD_EXP 47
47096: PUSH
47097: LD_VAR 0 2
47101: ARRAY
47102: AND
47103: IFFALSE 47141
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
47105: LD_ADDR_EXP 47
47109: PUSH
47110: LD_EXP 47
47114: PPUSH
47115: LD_VAR 0 2
47119: PPUSH
47120: EMPTY
47121: PPUSH
47122: CALL_OW 1
47126: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
47127: LD_VAR 0 2
47131: PPUSH
47132: LD_INT 103
47134: PPUSH
47135: CALL 45487 0 2
// continue ;
47139: GO 47050
// end ; if mc_construct_list [ i ] then
47141: LD_EXP 48
47145: PUSH
47146: LD_VAR 0 2
47150: ARRAY
47151: IFFALSE 47356
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
47153: LD_ADDR_VAR 0 4
47157: PUSH
47158: LD_EXP 41
47162: PUSH
47163: LD_VAR 0 2
47167: ARRAY
47168: PPUSH
47169: LD_INT 25
47171: PUSH
47172: LD_INT 2
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PPUSH
47179: CALL_OW 72
47183: PUSH
47184: LD_EXP 43
47188: PUSH
47189: LD_VAR 0 2
47193: ARRAY
47194: DIFF
47195: ST_TO_ADDR
// if not tmp then
47196: LD_VAR 0 4
47200: NOT
47201: IFFALSE 47205
// continue ;
47203: GO 47050
// for j in tmp do
47205: LD_ADDR_VAR 0 3
47209: PUSH
47210: LD_VAR 0 4
47214: PUSH
47215: FOR_IN
47216: IFFALSE 47352
// begin if not mc_builders [ i ] then
47218: LD_EXP 47
47222: PUSH
47223: LD_VAR 0 2
47227: ARRAY
47228: NOT
47229: IFFALSE 47287
// begin SetTag ( j , 103 ) ;
47231: LD_VAR 0 3
47235: PPUSH
47236: LD_INT 103
47238: PPUSH
47239: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
47243: LD_ADDR_EXP 47
47247: PUSH
47248: LD_EXP 47
47252: PPUSH
47253: LD_VAR 0 2
47257: PUSH
47258: LD_EXP 47
47262: PUSH
47263: LD_VAR 0 2
47267: ARRAY
47268: PUSH
47269: LD_INT 1
47271: PLUS
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PPUSH
47277: LD_VAR 0 3
47281: PPUSH
47282: CALL 11181 0 3
47286: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
47287: LD_VAR 0 3
47291: PPUSH
47292: CALL_OW 310
47296: IFFALSE 47307
// ComExitBuilding ( j ) ;
47298: LD_VAR 0 3
47302: PPUSH
47303: CALL_OW 122
// wait ( 3 ) ;
47307: LD_INT 3
47309: PPUSH
47310: CALL_OW 67
// if not HasTask ( j ) then
47314: LD_VAR 0 3
47318: PPUSH
47319: CALL_OW 314
47323: NOT
47324: IFFALSE 47350
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
47326: LD_VAR 0 3
47330: PPUSH
47331: LD_EXP 48
47335: PUSH
47336: LD_VAR 0 2
47340: ARRAY
47341: PUSH
47342: LD_INT 1
47344: ARRAY
47345: PPUSH
47346: CALL 13599 0 2
// end ;
47350: GO 47215
47352: POP
47353: POP
// end else
47354: GO 47805
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
47356: LD_EXP 46
47360: PUSH
47361: LD_VAR 0 2
47365: ARRAY
47366: PUSH
47367: LD_EXP 41
47371: PUSH
47372: LD_VAR 0 2
47376: ARRAY
47377: PPUSH
47378: LD_INT 2
47380: PUSH
47381: LD_INT 30
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 30
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: LIST
47405: PPUSH
47406: CALL_OW 72
47410: AND
47411: IFFALSE 47805
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
47413: LD_EXP 41
47417: PUSH
47418: LD_VAR 0 2
47422: ARRAY
47423: PPUSH
47424: LD_INT 2
47426: PUSH
47427: LD_INT 30
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 30
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: LIST
47451: PPUSH
47452: CALL_OW 72
47456: PUSH
47457: LD_INT 1
47459: ARRAY
47460: PPUSH
47461: LD_EXP 46
47465: PUSH
47466: LD_VAR 0 2
47470: ARRAY
47471: PUSH
47472: LD_INT 1
47474: ARRAY
47475: PUSH
47476: LD_INT 1
47478: ARRAY
47479: PPUSH
47480: LD_EXP 46
47484: PUSH
47485: LD_VAR 0 2
47489: ARRAY
47490: PUSH
47491: LD_INT 1
47493: ARRAY
47494: PUSH
47495: LD_INT 2
47497: ARRAY
47498: PPUSH
47499: LD_EXP 46
47503: PUSH
47504: LD_VAR 0 2
47508: ARRAY
47509: PUSH
47510: LD_INT 1
47512: ARRAY
47513: PUSH
47514: LD_INT 3
47516: ARRAY
47517: PPUSH
47518: LD_EXP 46
47522: PUSH
47523: LD_VAR 0 2
47527: ARRAY
47528: PUSH
47529: LD_INT 1
47531: ARRAY
47532: PUSH
47533: LD_INT 4
47535: ARRAY
47536: PPUSH
47537: CALL 16939 0 5
47541: IFFALSE 47805
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
47543: LD_ADDR_VAR 0 4
47547: PUSH
47548: LD_EXP 41
47552: PUSH
47553: LD_VAR 0 2
47557: ARRAY
47558: PPUSH
47559: LD_INT 25
47561: PUSH
47562: LD_INT 2
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PPUSH
47569: CALL_OW 72
47573: PUSH
47574: LD_EXP 43
47578: PUSH
47579: LD_VAR 0 2
47583: ARRAY
47584: DIFF
47585: ST_TO_ADDR
// if not tmp then
47586: LD_VAR 0 4
47590: NOT
47591: IFFALSE 47595
// continue ;
47593: GO 47050
// for j in tmp do
47595: LD_ADDR_VAR 0 3
47599: PUSH
47600: LD_VAR 0 4
47604: PUSH
47605: FOR_IN
47606: IFFALSE 47803
// begin if not mc_builders [ i ] then
47608: LD_EXP 47
47612: PUSH
47613: LD_VAR 0 2
47617: ARRAY
47618: NOT
47619: IFFALSE 47677
// begin SetTag ( j , 103 ) ;
47621: LD_VAR 0 3
47625: PPUSH
47626: LD_INT 103
47628: PPUSH
47629: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
47633: LD_ADDR_EXP 47
47637: PUSH
47638: LD_EXP 47
47642: PPUSH
47643: LD_VAR 0 2
47647: PUSH
47648: LD_EXP 47
47652: PUSH
47653: LD_VAR 0 2
47657: ARRAY
47658: PUSH
47659: LD_INT 1
47661: PLUS
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PPUSH
47667: LD_VAR 0 3
47671: PPUSH
47672: CALL 11181 0 3
47676: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
47677: LD_VAR 0 3
47681: PPUSH
47682: CALL_OW 310
47686: IFFALSE 47697
// ComExitBuilding ( j ) ;
47688: LD_VAR 0 3
47692: PPUSH
47693: CALL_OW 122
// wait ( 3 ) ;
47697: LD_INT 3
47699: PPUSH
47700: CALL_OW 67
// if not HasTask ( j ) then
47704: LD_VAR 0 3
47708: PPUSH
47709: CALL_OW 314
47713: NOT
47714: IFFALSE 47801
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
47716: LD_VAR 0 3
47720: PPUSH
47721: LD_EXP 46
47725: PUSH
47726: LD_VAR 0 2
47730: ARRAY
47731: PUSH
47732: LD_INT 1
47734: ARRAY
47735: PUSH
47736: LD_INT 1
47738: ARRAY
47739: PPUSH
47740: LD_EXP 46
47744: PUSH
47745: LD_VAR 0 2
47749: ARRAY
47750: PUSH
47751: LD_INT 1
47753: ARRAY
47754: PUSH
47755: LD_INT 2
47757: ARRAY
47758: PPUSH
47759: LD_EXP 46
47763: PUSH
47764: LD_VAR 0 2
47768: ARRAY
47769: PUSH
47770: LD_INT 1
47772: ARRAY
47773: PUSH
47774: LD_INT 3
47776: ARRAY
47777: PPUSH
47778: LD_EXP 46
47782: PUSH
47783: LD_VAR 0 2
47787: ARRAY
47788: PUSH
47789: LD_INT 1
47791: ARRAY
47792: PUSH
47793: LD_INT 4
47795: ARRAY
47796: PPUSH
47797: CALL_OW 145
// end ;
47801: GO 47605
47803: POP
47804: POP
// end ; end ;
47805: GO 47050
47807: POP
47808: POP
// end ;
47809: LD_VAR 0 1
47813: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
47814: LD_INT 0
47816: PPUSH
47817: PPUSH
47818: PPUSH
47819: PPUSH
47820: PPUSH
47821: PPUSH
47822: PPUSH
// if not mc_bases then
47823: LD_EXP 41
47827: NOT
47828: IFFALSE 47832
// exit ;
47830: GO 48128
// for i = 1 to mc_bases do
47832: LD_ADDR_VAR 0 2
47836: PUSH
47837: DOUBLE
47838: LD_INT 1
47840: DEC
47841: ST_TO_ADDR
47842: LD_EXP 41
47846: PUSH
47847: FOR_TO
47848: IFFALSE 48126
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
47850: LD_EXP 49
47854: PUSH
47855: LD_VAR 0 2
47859: ARRAY
47860: NOT
47861: PUSH
47862: LD_EXP 41
47866: PUSH
47867: LD_VAR 0 2
47871: ARRAY
47872: PPUSH
47873: LD_INT 30
47875: PUSH
47876: LD_INT 3
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PPUSH
47883: CALL_OW 72
47887: NOT
47888: OR
47889: IFFALSE 47893
// continue ;
47891: GO 47847
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
47893: LD_EXP 49
47897: PUSH
47898: LD_VAR 0 2
47902: ARRAY
47903: PUSH
47904: LD_INT 1
47906: ARRAY
47907: PPUSH
47908: CALL_OW 269
47912: IFFALSE 47978
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
47914: LD_ADDR_VAR 0 4
47918: PUSH
47919: LD_EXP 49
47923: PUSH
47924: LD_VAR 0 2
47928: ARRAY
47929: PPUSH
47930: LD_INT 1
47932: PPUSH
47933: CALL_OW 3
47937: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
47938: LD_ADDR_EXP 49
47942: PUSH
47943: LD_EXP 49
47947: PPUSH
47948: LD_VAR 0 2
47952: PPUSH
47953: LD_VAR 0 4
47957: PPUSH
47958: CALL_OW 1
47962: ST_TO_ADDR
// if not mc_turret_list [ i ] then
47963: LD_EXP 49
47967: PUSH
47968: LD_VAR 0 2
47972: ARRAY
47973: NOT
47974: IFFALSE 47978
// continue ;
47976: GO 47847
// end ; busy := false ;
47978: LD_ADDR_VAR 0 6
47982: PUSH
47983: LD_INT 0
47985: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
47986: LD_ADDR_VAR 0 4
47990: PUSH
47991: LD_EXP 41
47995: PUSH
47996: LD_VAR 0 2
48000: ARRAY
48001: PPUSH
48002: LD_INT 30
48004: PUSH
48005: LD_INT 3
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PPUSH
48012: CALL_OW 72
48016: ST_TO_ADDR
// for j in tmp do
48017: LD_ADDR_VAR 0 3
48021: PUSH
48022: LD_VAR 0 4
48026: PUSH
48027: FOR_IN
48028: IFFALSE 48056
// if not BuildingStatus ( j ) = bs_idle then
48030: LD_VAR 0 3
48034: PPUSH
48035: CALL_OW 461
48039: PUSH
48040: LD_INT 2
48042: EQUAL
48043: NOT
48044: IFFALSE 48054
// busy := true ;
48046: LD_ADDR_VAR 0 6
48050: PUSH
48051: LD_INT 1
48053: ST_TO_ADDR
48054: GO 48027
48056: POP
48057: POP
// if busy then
48058: LD_VAR 0 6
48062: IFFALSE 48066
// continue ;
48064: GO 47847
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
48066: LD_ADDR_VAR 0 7
48070: PUSH
48071: LD_EXP 49
48075: PUSH
48076: LD_VAR 0 2
48080: ARRAY
48081: PUSH
48082: LD_INT 1
48084: ARRAY
48085: PPUSH
48086: CALL 15387 0 1
48090: ST_TO_ADDR
// if not weapon then
48091: LD_VAR 0 7
48095: NOT
48096: IFFALSE 48100
// continue ;
48098: GO 47847
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
48100: LD_EXP 49
48104: PUSH
48105: LD_VAR 0 2
48109: ARRAY
48110: PUSH
48111: LD_INT 1
48113: ARRAY
48114: PPUSH
48115: LD_VAR 0 7
48119: PPUSH
48120: CALL_OW 148
// end ;
48124: GO 47847
48126: POP
48127: POP
// end ;
48128: LD_VAR 0 1
48132: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
48133: LD_INT 0
48135: PPUSH
48136: PPUSH
48137: PPUSH
48138: PPUSH
48139: PPUSH
48140: PPUSH
// if not mc_bases then
48141: LD_EXP 41
48145: NOT
48146: IFFALSE 48150
// exit ;
48148: GO 49135
// for i = 1 to mc_bases do
48150: LD_ADDR_VAR 0 2
48154: PUSH
48155: DOUBLE
48156: LD_INT 1
48158: DEC
48159: ST_TO_ADDR
48160: LD_EXP 41
48164: PUSH
48165: FOR_TO
48166: IFFALSE 49133
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
48168: LD_EXP 54
48172: PUSH
48173: LD_VAR 0 2
48177: ARRAY
48178: NOT
48179: PUSH
48180: LD_EXP 54
48184: PUSH
48185: LD_VAR 0 2
48189: ARRAY
48190: PUSH
48191: LD_EXP 55
48195: PUSH
48196: LD_VAR 0 2
48200: ARRAY
48201: EQUAL
48202: OR
48203: IFFALSE 48207
// continue ;
48205: GO 48165
// if mc_miners [ i ] then
48207: LD_EXP 55
48211: PUSH
48212: LD_VAR 0 2
48216: ARRAY
48217: IFFALSE 48820
// begin k := 1 ;
48219: LD_ADDR_VAR 0 4
48223: PUSH
48224: LD_INT 1
48226: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
48227: LD_ADDR_VAR 0 3
48231: PUSH
48232: DOUBLE
48233: LD_EXP 55
48237: PUSH
48238: LD_VAR 0 2
48242: ARRAY
48243: INC
48244: ST_TO_ADDR
48245: LD_INT 1
48247: PUSH
48248: FOR_DOWNTO
48249: IFFALSE 48818
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
48251: LD_EXP 55
48255: PUSH
48256: LD_VAR 0 2
48260: ARRAY
48261: PUSH
48262: LD_VAR 0 3
48266: ARRAY
48267: PPUSH
48268: CALL_OW 301
48272: IFFALSE 48335
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
48274: LD_ADDR_VAR 0 5
48278: PUSH
48279: LD_EXP 55
48283: PUSH
48284: LD_VAR 0 2
48288: ARRAY
48289: PUSH
48290: LD_EXP 55
48294: PUSH
48295: LD_VAR 0 2
48299: ARRAY
48300: PUSH
48301: LD_VAR 0 3
48305: ARRAY
48306: DIFF
48307: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
48308: LD_ADDR_EXP 55
48312: PUSH
48313: LD_EXP 55
48317: PPUSH
48318: LD_VAR 0 2
48322: PPUSH
48323: LD_VAR 0 5
48327: PPUSH
48328: CALL_OW 1
48332: ST_TO_ADDR
// continue ;
48333: GO 48248
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
48335: LD_EXP 55
48339: PUSH
48340: LD_VAR 0 2
48344: ARRAY
48345: PUSH
48346: LD_VAR 0 3
48350: ARRAY
48351: PPUSH
48352: CALL 10682 0 1
48356: PUSH
48357: LD_EXP 55
48361: PUSH
48362: LD_VAR 0 2
48366: ARRAY
48367: PUSH
48368: LD_VAR 0 3
48372: ARRAY
48373: PPUSH
48374: CALL_OW 255
48378: PPUSH
48379: LD_EXP 54
48383: PUSH
48384: LD_VAR 0 2
48388: ARRAY
48389: PUSH
48390: LD_VAR 0 4
48394: ARRAY
48395: PUSH
48396: LD_INT 1
48398: ARRAY
48399: PPUSH
48400: LD_EXP 54
48404: PUSH
48405: LD_VAR 0 2
48409: ARRAY
48410: PUSH
48411: LD_VAR 0 4
48415: ARRAY
48416: PUSH
48417: LD_INT 2
48419: ARRAY
48420: PPUSH
48421: LD_INT 15
48423: PPUSH
48424: CALL 11675 0 4
48428: PUSH
48429: LD_INT 4
48431: ARRAY
48432: PUSH
48433: LD_EXP 55
48437: PUSH
48438: LD_VAR 0 2
48442: ARRAY
48443: PUSH
48444: LD_VAR 0 3
48448: ARRAY
48449: PPUSH
48450: LD_INT 10
48452: PPUSH
48453: CALL 13372 0 2
48457: PUSH
48458: LD_INT 4
48460: ARRAY
48461: OR
48462: AND
48463: IFFALSE 48486
// ComStop ( mc_miners [ i ] [ j ] ) ;
48465: LD_EXP 55
48469: PUSH
48470: LD_VAR 0 2
48474: ARRAY
48475: PUSH
48476: LD_VAR 0 3
48480: ARRAY
48481: PPUSH
48482: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
48486: LD_EXP 55
48490: PUSH
48491: LD_VAR 0 2
48495: ARRAY
48496: PUSH
48497: LD_VAR 0 3
48501: ARRAY
48502: PPUSH
48503: CALL_OW 257
48507: PUSH
48508: LD_INT 1
48510: EQUAL
48511: PUSH
48512: LD_EXP 55
48516: PUSH
48517: LD_VAR 0 2
48521: ARRAY
48522: PUSH
48523: LD_VAR 0 3
48527: ARRAY
48528: PPUSH
48529: CALL_OW 459
48533: NOT
48534: AND
48535: PUSH
48536: LD_EXP 55
48540: PUSH
48541: LD_VAR 0 2
48545: ARRAY
48546: PUSH
48547: LD_VAR 0 3
48551: ARRAY
48552: PPUSH
48553: CALL_OW 255
48557: PPUSH
48558: LD_EXP 54
48562: PUSH
48563: LD_VAR 0 2
48567: ARRAY
48568: PUSH
48569: LD_VAR 0 4
48573: ARRAY
48574: PUSH
48575: LD_INT 1
48577: ARRAY
48578: PPUSH
48579: LD_EXP 54
48583: PUSH
48584: LD_VAR 0 2
48588: ARRAY
48589: PUSH
48590: LD_VAR 0 4
48594: ARRAY
48595: PUSH
48596: LD_INT 2
48598: ARRAY
48599: PPUSH
48600: LD_INT 15
48602: PPUSH
48603: CALL 11675 0 4
48607: PUSH
48608: LD_INT 4
48610: ARRAY
48611: PUSH
48612: LD_INT 0
48614: EQUAL
48615: AND
48616: PUSH
48617: LD_EXP 55
48621: PUSH
48622: LD_VAR 0 2
48626: ARRAY
48627: PUSH
48628: LD_VAR 0 3
48632: ARRAY
48633: PPUSH
48634: CALL_OW 314
48638: NOT
48639: AND
48640: IFFALSE 48816
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
48642: LD_EXP 55
48646: PUSH
48647: LD_VAR 0 2
48651: ARRAY
48652: PUSH
48653: LD_VAR 0 3
48657: ARRAY
48658: PPUSH
48659: CALL_OW 310
48663: IFFALSE 48686
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
48665: LD_EXP 55
48669: PUSH
48670: LD_VAR 0 2
48674: ARRAY
48675: PUSH
48676: LD_VAR 0 3
48680: ARRAY
48681: PPUSH
48682: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
48686: LD_EXP 55
48690: PUSH
48691: LD_VAR 0 2
48695: ARRAY
48696: PUSH
48697: LD_VAR 0 3
48701: ARRAY
48702: PPUSH
48703: CALL_OW 314
48707: NOT
48708: IFFALSE 48776
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
48710: LD_EXP 55
48714: PUSH
48715: LD_VAR 0 2
48719: ARRAY
48720: PUSH
48721: LD_VAR 0 3
48725: ARRAY
48726: PPUSH
48727: LD_EXP 54
48731: PUSH
48732: LD_VAR 0 2
48736: ARRAY
48737: PUSH
48738: LD_VAR 0 4
48742: ARRAY
48743: PUSH
48744: LD_INT 1
48746: ARRAY
48747: PPUSH
48748: LD_EXP 54
48752: PUSH
48753: LD_VAR 0 2
48757: ARRAY
48758: PUSH
48759: LD_VAR 0 4
48763: ARRAY
48764: PUSH
48765: LD_INT 2
48767: ARRAY
48768: PPUSH
48769: LD_INT 0
48771: PPUSH
48772: CALL_OW 193
// k := k + 1 ;
48776: LD_ADDR_VAR 0 4
48780: PUSH
48781: LD_VAR 0 4
48785: PUSH
48786: LD_INT 1
48788: PLUS
48789: ST_TO_ADDR
// if k > mc_mines [ i ] then
48790: LD_VAR 0 4
48794: PUSH
48795: LD_EXP 54
48799: PUSH
48800: LD_VAR 0 2
48804: ARRAY
48805: GREATER
48806: IFFALSE 48816
// k := 1 ;
48808: LD_ADDR_VAR 0 4
48812: PUSH
48813: LD_INT 1
48815: ST_TO_ADDR
// end ; end ;
48816: GO 48248
48818: POP
48819: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
48820: LD_ADDR_VAR 0 5
48824: PUSH
48825: LD_EXP 41
48829: PUSH
48830: LD_VAR 0 2
48834: ARRAY
48835: PPUSH
48836: LD_INT 2
48838: PUSH
48839: LD_INT 30
48841: PUSH
48842: LD_INT 4
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 30
48851: PUSH
48852: LD_INT 5
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 30
48861: PUSH
48862: LD_INT 32
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: PPUSH
48875: CALL_OW 72
48879: ST_TO_ADDR
// if not tmp then
48880: LD_VAR 0 5
48884: NOT
48885: IFFALSE 48889
// continue ;
48887: GO 48165
// list := [ ] ;
48889: LD_ADDR_VAR 0 6
48893: PUSH
48894: EMPTY
48895: ST_TO_ADDR
// for j in tmp do
48896: LD_ADDR_VAR 0 3
48900: PUSH
48901: LD_VAR 0 5
48905: PUSH
48906: FOR_IN
48907: IFFALSE 48976
// begin for k in UnitsInside ( j ) do
48909: LD_ADDR_VAR 0 4
48913: PUSH
48914: LD_VAR 0 3
48918: PPUSH
48919: CALL_OW 313
48923: PUSH
48924: FOR_IN
48925: IFFALSE 48972
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
48927: LD_VAR 0 4
48931: PPUSH
48932: CALL_OW 257
48936: PUSH
48937: LD_INT 1
48939: EQUAL
48940: PUSH
48941: LD_VAR 0 4
48945: PPUSH
48946: CALL_OW 459
48950: NOT
48951: AND
48952: IFFALSE 48970
// list := list ^ k ;
48954: LD_ADDR_VAR 0 6
48958: PUSH
48959: LD_VAR 0 6
48963: PUSH
48964: LD_VAR 0 4
48968: ADD
48969: ST_TO_ADDR
48970: GO 48924
48972: POP
48973: POP
// end ;
48974: GO 48906
48976: POP
48977: POP
// list := list diff mc_miners [ i ] ;
48978: LD_ADDR_VAR 0 6
48982: PUSH
48983: LD_VAR 0 6
48987: PUSH
48988: LD_EXP 55
48992: PUSH
48993: LD_VAR 0 2
48997: ARRAY
48998: DIFF
48999: ST_TO_ADDR
// if not list then
49000: LD_VAR 0 6
49004: NOT
49005: IFFALSE 49009
// continue ;
49007: GO 48165
// k := mc_mines [ i ] - mc_miners [ i ] ;
49009: LD_ADDR_VAR 0 4
49013: PUSH
49014: LD_EXP 54
49018: PUSH
49019: LD_VAR 0 2
49023: ARRAY
49024: PUSH
49025: LD_EXP 55
49029: PUSH
49030: LD_VAR 0 2
49034: ARRAY
49035: MINUS
49036: ST_TO_ADDR
// if k > list then
49037: LD_VAR 0 4
49041: PUSH
49042: LD_VAR 0 6
49046: GREATER
49047: IFFALSE 49059
// k := list ;
49049: LD_ADDR_VAR 0 4
49053: PUSH
49054: LD_VAR 0 6
49058: ST_TO_ADDR
// for j = 1 to k do
49059: LD_ADDR_VAR 0 3
49063: PUSH
49064: DOUBLE
49065: LD_INT 1
49067: DEC
49068: ST_TO_ADDR
49069: LD_VAR 0 4
49073: PUSH
49074: FOR_TO
49075: IFFALSE 49129
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
49077: LD_ADDR_EXP 55
49081: PUSH
49082: LD_EXP 55
49086: PPUSH
49087: LD_VAR 0 2
49091: PUSH
49092: LD_EXP 55
49096: PUSH
49097: LD_VAR 0 2
49101: ARRAY
49102: PUSH
49103: LD_INT 1
49105: PLUS
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PPUSH
49111: LD_VAR 0 6
49115: PUSH
49116: LD_VAR 0 3
49120: ARRAY
49121: PPUSH
49122: CALL 11181 0 3
49126: ST_TO_ADDR
49127: GO 49074
49129: POP
49130: POP
// end ;
49131: GO 48165
49133: POP
49134: POP
// end ;
49135: LD_VAR 0 1
49139: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
49140: LD_INT 0
49142: PPUSH
49143: PPUSH
49144: PPUSH
49145: PPUSH
49146: PPUSH
// if not mc_bases then
49147: LD_EXP 41
49151: NOT
49152: IFFALSE 49156
// exit ;
49154: GO 49944
// for i = 1 to mc_bases do
49156: LD_ADDR_VAR 0 2
49160: PUSH
49161: DOUBLE
49162: LD_INT 1
49164: DEC
49165: ST_TO_ADDR
49166: LD_EXP 41
49170: PUSH
49171: FOR_TO
49172: IFFALSE 49942
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
49174: LD_EXP 41
49178: PUSH
49179: LD_VAR 0 2
49183: ARRAY
49184: NOT
49185: PUSH
49186: LD_EXP 48
49190: PUSH
49191: LD_VAR 0 2
49195: ARRAY
49196: OR
49197: IFFALSE 49201
// continue ;
49199: GO 49171
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
49201: LD_EXP 57
49205: PUSH
49206: LD_VAR 0 2
49210: ARRAY
49211: NOT
49212: PUSH
49213: LD_EXP 58
49217: PUSH
49218: LD_VAR 0 2
49222: ARRAY
49223: AND
49224: IFFALSE 49262
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
49226: LD_ADDR_EXP 58
49230: PUSH
49231: LD_EXP 58
49235: PPUSH
49236: LD_VAR 0 2
49240: PPUSH
49241: EMPTY
49242: PPUSH
49243: CALL_OW 1
49247: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
49248: LD_VAR 0 2
49252: PPUSH
49253: LD_INT 107
49255: PPUSH
49256: CALL 45487 0 2
// continue ;
49260: GO 49171
// end ; target := [ ] ;
49262: LD_ADDR_VAR 0 5
49266: PUSH
49267: EMPTY
49268: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
49269: LD_ADDR_VAR 0 3
49273: PUSH
49274: DOUBLE
49275: LD_EXP 57
49279: PUSH
49280: LD_VAR 0 2
49284: ARRAY
49285: INC
49286: ST_TO_ADDR
49287: LD_INT 1
49289: PUSH
49290: FOR_DOWNTO
49291: IFFALSE 49551
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
49293: LD_EXP 57
49297: PUSH
49298: LD_VAR 0 2
49302: ARRAY
49303: PUSH
49304: LD_VAR 0 3
49308: ARRAY
49309: PUSH
49310: LD_INT 2
49312: ARRAY
49313: PPUSH
49314: LD_EXP 57
49318: PUSH
49319: LD_VAR 0 2
49323: ARRAY
49324: PUSH
49325: LD_VAR 0 3
49329: ARRAY
49330: PUSH
49331: LD_INT 3
49333: ARRAY
49334: PPUSH
49335: CALL_OW 488
49339: PUSH
49340: LD_EXP 57
49344: PUSH
49345: LD_VAR 0 2
49349: ARRAY
49350: PUSH
49351: LD_VAR 0 3
49355: ARRAY
49356: PUSH
49357: LD_INT 2
49359: ARRAY
49360: PPUSH
49361: LD_EXP 57
49365: PUSH
49366: LD_VAR 0 2
49370: ARRAY
49371: PUSH
49372: LD_VAR 0 3
49376: ARRAY
49377: PUSH
49378: LD_INT 3
49380: ARRAY
49381: PPUSH
49382: CALL_OW 284
49386: PUSH
49387: LD_INT 0
49389: EQUAL
49390: AND
49391: IFFALSE 49446
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
49393: LD_ADDR_VAR 0 4
49397: PUSH
49398: LD_EXP 57
49402: PUSH
49403: LD_VAR 0 2
49407: ARRAY
49408: PPUSH
49409: LD_VAR 0 3
49413: PPUSH
49414: CALL_OW 3
49418: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
49419: LD_ADDR_EXP 57
49423: PUSH
49424: LD_EXP 57
49428: PPUSH
49429: LD_VAR 0 2
49433: PPUSH
49434: LD_VAR 0 4
49438: PPUSH
49439: CALL_OW 1
49443: ST_TO_ADDR
// continue ;
49444: GO 49290
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
49446: LD_EXP 41
49450: PUSH
49451: LD_VAR 0 2
49455: ARRAY
49456: PUSH
49457: LD_INT 1
49459: ARRAY
49460: PPUSH
49461: CALL_OW 255
49465: PPUSH
49466: LD_EXP 57
49470: PUSH
49471: LD_VAR 0 2
49475: ARRAY
49476: PUSH
49477: LD_VAR 0 3
49481: ARRAY
49482: PUSH
49483: LD_INT 2
49485: ARRAY
49486: PPUSH
49487: LD_EXP 57
49491: PUSH
49492: LD_VAR 0 2
49496: ARRAY
49497: PUSH
49498: LD_VAR 0 3
49502: ARRAY
49503: PUSH
49504: LD_INT 3
49506: ARRAY
49507: PPUSH
49508: LD_INT 20
49510: PPUSH
49511: CALL 11675 0 4
49515: PUSH
49516: LD_INT 4
49518: ARRAY
49519: PUSH
49520: LD_INT 0
49522: EQUAL
49523: IFFALSE 49549
// begin target := mc_crates [ i ] [ j ] ;
49525: LD_ADDR_VAR 0 5
49529: PUSH
49530: LD_EXP 57
49534: PUSH
49535: LD_VAR 0 2
49539: ARRAY
49540: PUSH
49541: LD_VAR 0 3
49545: ARRAY
49546: ST_TO_ADDR
// break ;
49547: GO 49551
// end ; end ;
49549: GO 49290
49551: POP
49552: POP
// if not target then
49553: LD_VAR 0 5
49557: NOT
49558: IFFALSE 49562
// continue ;
49560: GO 49171
// if mc_crates_collector [ i ] < 5 then
49562: LD_EXP 58
49566: PUSH
49567: LD_VAR 0 2
49571: ARRAY
49572: PUSH
49573: LD_INT 5
49575: LESS
49576: IFFALSE 49756
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
49578: LD_ADDR_VAR 0 4
49582: PUSH
49583: LD_EXP 41
49587: PUSH
49588: LD_VAR 0 2
49592: ARRAY
49593: PPUSH
49594: LD_INT 2
49596: PUSH
49597: LD_INT 25
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 25
49609: PUSH
49610: LD_INT 16
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 24
49624: PUSH
49625: LD_INT 750
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PPUSH
49636: CALL_OW 72
49640: ST_TO_ADDR
// if not tmp then
49641: LD_VAR 0 4
49645: NOT
49646: IFFALSE 49650
// continue ;
49648: GO 49171
// for j in tmp do
49650: LD_ADDR_VAR 0 3
49654: PUSH
49655: LD_VAR 0 4
49659: PUSH
49660: FOR_IN
49661: IFFALSE 49754
// if GetTag ( j ) = 0 then
49663: LD_VAR 0 3
49667: PPUSH
49668: CALL_OW 110
49672: PUSH
49673: LD_INT 0
49675: EQUAL
49676: IFFALSE 49752
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
49678: LD_ADDR_EXP 58
49682: PUSH
49683: LD_EXP 58
49687: PPUSH
49688: LD_VAR 0 2
49692: PUSH
49693: LD_EXP 58
49697: PUSH
49698: LD_VAR 0 2
49702: ARRAY
49703: PUSH
49704: LD_INT 1
49706: PLUS
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PPUSH
49712: LD_VAR 0 3
49716: PPUSH
49717: CALL 11181 0 3
49721: ST_TO_ADDR
// SetTag ( j , 107 ) ;
49722: LD_VAR 0 3
49726: PPUSH
49727: LD_INT 107
49729: PPUSH
49730: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
49734: LD_EXP 58
49738: PUSH
49739: LD_VAR 0 2
49743: ARRAY
49744: PUSH
49745: LD_INT 5
49747: GREATER
49748: IFFALSE 49752
// break ;
49750: GO 49754
// end ;
49752: GO 49660
49754: POP
49755: POP
// end ; if mc_crates_collector [ i ] and target then
49756: LD_EXP 58
49760: PUSH
49761: LD_VAR 0 2
49765: ARRAY
49766: PUSH
49767: LD_VAR 0 5
49771: AND
49772: IFFALSE 49940
// begin if mc_crates_collector [ i ] < target [ 1 ] then
49774: LD_EXP 58
49778: PUSH
49779: LD_VAR 0 2
49783: ARRAY
49784: PUSH
49785: LD_VAR 0 5
49789: PUSH
49790: LD_INT 1
49792: ARRAY
49793: LESS
49794: IFFALSE 49814
// tmp := mc_crates_collector [ i ] else
49796: LD_ADDR_VAR 0 4
49800: PUSH
49801: LD_EXP 58
49805: PUSH
49806: LD_VAR 0 2
49810: ARRAY
49811: ST_TO_ADDR
49812: GO 49828
// tmp := target [ 1 ] ;
49814: LD_ADDR_VAR 0 4
49818: PUSH
49819: LD_VAR 0 5
49823: PUSH
49824: LD_INT 1
49826: ARRAY
49827: ST_TO_ADDR
// for j = 1 to tmp do
49828: LD_ADDR_VAR 0 3
49832: PUSH
49833: DOUBLE
49834: LD_INT 1
49836: DEC
49837: ST_TO_ADDR
49838: LD_VAR 0 4
49842: PUSH
49843: FOR_TO
49844: IFFALSE 49938
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
49846: LD_EXP 58
49850: PUSH
49851: LD_VAR 0 2
49855: ARRAY
49856: PUSH
49857: LD_VAR 0 3
49861: ARRAY
49862: PPUSH
49863: CALL_OW 310
49867: IFFALSE 49890
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
49869: LD_EXP 58
49873: PUSH
49874: LD_VAR 0 2
49878: ARRAY
49879: PUSH
49880: LD_VAR 0 3
49884: ARRAY
49885: PPUSH
49886: CALL_OW 122
// wait ( 3 ) ;
49890: LD_INT 3
49892: PPUSH
49893: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
49897: LD_EXP 58
49901: PUSH
49902: LD_VAR 0 2
49906: ARRAY
49907: PUSH
49908: LD_VAR 0 3
49912: ARRAY
49913: PPUSH
49914: LD_VAR 0 5
49918: PUSH
49919: LD_INT 2
49921: ARRAY
49922: PPUSH
49923: LD_VAR 0 5
49927: PUSH
49928: LD_INT 3
49930: ARRAY
49931: PPUSH
49932: CALL_OW 117
// end ;
49936: GO 49843
49938: POP
49939: POP
// end ; end ;
49940: GO 49171
49942: POP
49943: POP
// end ;
49944: LD_VAR 0 1
49948: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
49949: LD_INT 0
49951: PPUSH
49952: PPUSH
49953: PPUSH
49954: PPUSH
// if not mc_bases then
49955: LD_EXP 41
49959: NOT
49960: IFFALSE 49964
// exit ;
49962: GO 50125
// for i = 1 to mc_bases do
49964: LD_ADDR_VAR 0 2
49968: PUSH
49969: DOUBLE
49970: LD_INT 1
49972: DEC
49973: ST_TO_ADDR
49974: LD_EXP 41
49978: PUSH
49979: FOR_TO
49980: IFFALSE 50123
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
49982: LD_ADDR_VAR 0 4
49986: PUSH
49987: LD_EXP 59
49991: PUSH
49992: LD_VAR 0 2
49996: ARRAY
49997: PUSH
49998: LD_EXP 62
50002: PUSH
50003: LD_VAR 0 2
50007: ARRAY
50008: ADD
50009: PPUSH
50010: LD_INT 33
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PPUSH
50020: CALL_OW 72
50024: ST_TO_ADDR
// if tmp then
50025: LD_VAR 0 4
50029: IFFALSE 50121
// for j in tmp do
50031: LD_ADDR_VAR 0 3
50035: PUSH
50036: LD_VAR 0 4
50040: PUSH
50041: FOR_IN
50042: IFFALSE 50119
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
50044: LD_VAR 0 3
50048: PPUSH
50049: CALL_OW 312
50053: NOT
50054: PUSH
50055: LD_VAR 0 3
50059: PPUSH
50060: CALL_OW 256
50064: PUSH
50065: LD_INT 250
50067: GREATEREQUAL
50068: AND
50069: IFFALSE 50082
// Connect ( j ) else
50071: LD_VAR 0 3
50075: PPUSH
50076: CALL 13681 0 1
50080: GO 50117
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
50082: LD_VAR 0 3
50086: PPUSH
50087: CALL_OW 256
50091: PUSH
50092: LD_INT 250
50094: LESS
50095: PUSH
50096: LD_VAR 0 3
50100: PPUSH
50101: CALL_OW 312
50105: AND
50106: IFFALSE 50117
// ComUnlink ( j ) ;
50108: LD_VAR 0 3
50112: PPUSH
50113: CALL_OW 136
50117: GO 50041
50119: POP
50120: POP
// end ;
50121: GO 49979
50123: POP
50124: POP
// end ;
50125: LD_VAR 0 1
50129: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
50130: LD_INT 0
50132: PPUSH
50133: PPUSH
50134: PPUSH
50135: PPUSH
50136: PPUSH
// if not mc_bases then
50137: LD_EXP 41
50141: NOT
50142: IFFALSE 50146
// exit ;
50144: GO 50606
// for i = 1 to mc_bases do
50146: LD_ADDR_VAR 0 2
50150: PUSH
50151: DOUBLE
50152: LD_INT 1
50154: DEC
50155: ST_TO_ADDR
50156: LD_EXP 41
50160: PUSH
50161: FOR_TO
50162: IFFALSE 50604
// begin if not mc_produce [ i ] then
50164: LD_EXP 61
50168: PUSH
50169: LD_VAR 0 2
50173: ARRAY
50174: NOT
50175: IFFALSE 50179
// continue ;
50177: GO 50161
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
50179: LD_ADDR_VAR 0 5
50183: PUSH
50184: LD_EXP 41
50188: PUSH
50189: LD_VAR 0 2
50193: ARRAY
50194: PPUSH
50195: LD_INT 30
50197: PUSH
50198: LD_INT 3
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PPUSH
50205: CALL_OW 72
50209: ST_TO_ADDR
// if not fac then
50210: LD_VAR 0 5
50214: NOT
50215: IFFALSE 50219
// continue ;
50217: GO 50161
// for j in fac do
50219: LD_ADDR_VAR 0 3
50223: PUSH
50224: LD_VAR 0 5
50228: PUSH
50229: FOR_IN
50230: IFFALSE 50600
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
50232: LD_VAR 0 3
50236: PPUSH
50237: CALL_OW 461
50241: PUSH
50242: LD_INT 2
50244: NONEQUAL
50245: PUSH
50246: LD_VAR 0 3
50250: PPUSH
50251: LD_INT 20
50253: PPUSH
50254: CALL 13372 0 2
50258: PUSH
50259: LD_INT 4
50261: ARRAY
50262: OR
50263: PUSH
50264: LD_VAR 0 3
50268: PPUSH
50269: CALL_OW 313
50273: PUSH
50274: LD_INT 0
50276: EQUAL
50277: OR
50278: IFFALSE 50282
// continue ;
50280: GO 50229
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
50282: LD_VAR 0 3
50286: PPUSH
50287: LD_EXP 61
50291: PUSH
50292: LD_VAR 0 2
50296: ARRAY
50297: PUSH
50298: LD_INT 1
50300: ARRAY
50301: PUSH
50302: LD_INT 1
50304: ARRAY
50305: PPUSH
50306: LD_EXP 61
50310: PUSH
50311: LD_VAR 0 2
50315: ARRAY
50316: PUSH
50317: LD_INT 1
50319: ARRAY
50320: PUSH
50321: LD_INT 2
50323: ARRAY
50324: PPUSH
50325: LD_EXP 61
50329: PUSH
50330: LD_VAR 0 2
50334: ARRAY
50335: PUSH
50336: LD_INT 1
50338: ARRAY
50339: PUSH
50340: LD_INT 3
50342: ARRAY
50343: PPUSH
50344: LD_EXP 61
50348: PUSH
50349: LD_VAR 0 2
50353: ARRAY
50354: PUSH
50355: LD_INT 1
50357: ARRAY
50358: PUSH
50359: LD_INT 4
50361: ARRAY
50362: PPUSH
50363: CALL_OW 448
50367: PUSH
50368: LD_VAR 0 3
50372: PPUSH
50373: LD_EXP 61
50377: PUSH
50378: LD_VAR 0 2
50382: ARRAY
50383: PUSH
50384: LD_INT 1
50386: ARRAY
50387: PUSH
50388: LD_INT 1
50390: ARRAY
50391: PUSH
50392: LD_EXP 61
50396: PUSH
50397: LD_VAR 0 2
50401: ARRAY
50402: PUSH
50403: LD_INT 1
50405: ARRAY
50406: PUSH
50407: LD_INT 2
50409: ARRAY
50410: PUSH
50411: LD_EXP 61
50415: PUSH
50416: LD_VAR 0 2
50420: ARRAY
50421: PUSH
50422: LD_INT 1
50424: ARRAY
50425: PUSH
50426: LD_INT 3
50428: ARRAY
50429: PUSH
50430: LD_EXP 61
50434: PUSH
50435: LD_VAR 0 2
50439: ARRAY
50440: PUSH
50441: LD_INT 1
50443: ARRAY
50444: PUSH
50445: LD_INT 4
50447: ARRAY
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: PPUSH
50455: CALL 16778 0 2
50459: AND
50460: IFFALSE 50598
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
50462: LD_VAR 0 3
50466: PPUSH
50467: LD_EXP 61
50471: PUSH
50472: LD_VAR 0 2
50476: ARRAY
50477: PUSH
50478: LD_INT 1
50480: ARRAY
50481: PUSH
50482: LD_INT 1
50484: ARRAY
50485: PPUSH
50486: LD_EXP 61
50490: PUSH
50491: LD_VAR 0 2
50495: ARRAY
50496: PUSH
50497: LD_INT 1
50499: ARRAY
50500: PUSH
50501: LD_INT 2
50503: ARRAY
50504: PPUSH
50505: LD_EXP 61
50509: PUSH
50510: LD_VAR 0 2
50514: ARRAY
50515: PUSH
50516: LD_INT 1
50518: ARRAY
50519: PUSH
50520: LD_INT 3
50522: ARRAY
50523: PPUSH
50524: LD_EXP 61
50528: PUSH
50529: LD_VAR 0 2
50533: ARRAY
50534: PUSH
50535: LD_INT 1
50537: ARRAY
50538: PUSH
50539: LD_INT 4
50541: ARRAY
50542: PPUSH
50543: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
50547: LD_ADDR_VAR 0 4
50551: PUSH
50552: LD_EXP 61
50556: PUSH
50557: LD_VAR 0 2
50561: ARRAY
50562: PPUSH
50563: LD_INT 1
50565: PPUSH
50566: CALL_OW 3
50570: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
50571: LD_ADDR_EXP 61
50575: PUSH
50576: LD_EXP 61
50580: PPUSH
50581: LD_VAR 0 2
50585: PPUSH
50586: LD_VAR 0 4
50590: PPUSH
50591: CALL_OW 1
50595: ST_TO_ADDR
// break ;
50596: GO 50600
// end ; end ;
50598: GO 50229
50600: POP
50601: POP
// end ;
50602: GO 50161
50604: POP
50605: POP
// end ;
50606: LD_VAR 0 1
50610: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
50611: LD_INT 0
50613: PPUSH
50614: PPUSH
50615: PPUSH
// if not mc_bases then
50616: LD_EXP 41
50620: NOT
50621: IFFALSE 50625
// exit ;
50623: GO 50714
// for i = 1 to mc_bases do
50625: LD_ADDR_VAR 0 2
50629: PUSH
50630: DOUBLE
50631: LD_INT 1
50633: DEC
50634: ST_TO_ADDR
50635: LD_EXP 41
50639: PUSH
50640: FOR_TO
50641: IFFALSE 50712
// begin if mc_attack [ i ] then
50643: LD_EXP 60
50647: PUSH
50648: LD_VAR 0 2
50652: ARRAY
50653: IFFALSE 50710
// begin tmp := mc_attack [ i ] [ 1 ] ;
50655: LD_ADDR_VAR 0 3
50659: PUSH
50660: LD_EXP 60
50664: PUSH
50665: LD_VAR 0 2
50669: ARRAY
50670: PUSH
50671: LD_INT 1
50673: ARRAY
50674: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
50675: LD_ADDR_EXP 60
50679: PUSH
50680: LD_EXP 60
50684: PPUSH
50685: LD_VAR 0 2
50689: PPUSH
50690: EMPTY
50691: PPUSH
50692: CALL_OW 1
50696: ST_TO_ADDR
// Attack ( tmp ) ;
50697: LD_VAR 0 3
50701: PPUSH
50702: CALL 37583 0 1
// exit ;
50706: POP
50707: POP
50708: GO 50714
// end ; end ;
50710: GO 50640
50712: POP
50713: POP
// end ;
50714: LD_VAR 0 1
50718: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
50719: LD_INT 0
50721: PPUSH
50722: PPUSH
50723: PPUSH
50724: PPUSH
50725: PPUSH
50726: PPUSH
50727: PPUSH
// if not mc_bases then
50728: LD_EXP 41
50732: NOT
50733: IFFALSE 50737
// exit ;
50735: GO 51082
// class := AllowSpecClass ( mc_defender [ 1 ] ) ;
50737: LD_ADDR_VAR 0 7
50741: PUSH
50742: LD_EXP 62
50746: PUSH
50747: LD_INT 1
50749: ARRAY
50750: PPUSH
50751: CALL 7707 0 1
50755: ST_TO_ADDR
// for i = 1 to mc_bases do
50756: LD_ADDR_VAR 0 2
50760: PUSH
50761: DOUBLE
50762: LD_INT 1
50764: DEC
50765: ST_TO_ADDR
50766: LD_EXP 41
50770: PUSH
50771: FOR_TO
50772: IFFALSE 51080
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ 1 ] ) , mc_scan_area [ i ] ) ) ;
50774: LD_ADDR_EXP 63
50778: PUSH
50779: LD_EXP 63
50783: PPUSH
50784: LD_VAR 0 2
50788: PPUSH
50789: LD_EXP 41
50793: PUSH
50794: LD_INT 1
50796: ARRAY
50797: PPUSH
50798: CALL_OW 255
50802: PPUSH
50803: LD_EXP 65
50807: PUSH
50808: LD_VAR 0 2
50812: ARRAY
50813: PPUSH
50814: CALL 6156 0 2
50818: PPUSH
50819: CALL_OW 1
50823: ST_TO_ADDR
// if not mc_scan [ i ] then
50824: LD_EXP 63
50828: PUSH
50829: LD_VAR 0 2
50833: ARRAY
50834: NOT
50835: IFFALSE 50987
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
50837: LD_ADDR_VAR 0 4
50841: PUSH
50842: LD_EXP 41
50846: PUSH
50847: LD_VAR 0 2
50851: ARRAY
50852: PPUSH
50853: LD_INT 2
50855: PUSH
50856: LD_INT 25
50858: PUSH
50859: LD_INT 5
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 25
50868: PUSH
50869: LD_INT 8
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 25
50878: PUSH
50879: LD_INT 9
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: PPUSH
50892: CALL_OW 72
50896: ST_TO_ADDR
// if not tmp then
50897: LD_VAR 0 4
50901: NOT
50902: IFFALSE 50906
// continue ;
50904: GO 50771
// for j in tmp do
50906: LD_ADDR_VAR 0 3
50910: PUSH
50911: LD_VAR 0 4
50915: PUSH
50916: FOR_IN
50917: IFFALSE 50985
// if GetBType ( IsInUnit ( j ) ) in [ b_barracks ] and GetClass ( j ) = 1 and not MineOfUnit ( j ) then
50919: LD_VAR 0 3
50923: PPUSH
50924: CALL_OW 310
50928: PPUSH
50929: CALL_OW 266
50933: PUSH
50934: LD_INT 5
50936: PUSH
50937: EMPTY
50938: LIST
50939: IN
50940: PUSH
50941: LD_VAR 0 3
50945: PPUSH
50946: CALL_OW 257
50950: PUSH
50951: LD_INT 1
50953: EQUAL
50954: AND
50955: PUSH
50956: LD_VAR 0 3
50960: PPUSH
50961: CALL_OW 459
50965: NOT
50966: AND
50967: IFFALSE 50983
// ComChangeProfession ( j , class ) ;
50969: LD_VAR 0 3
50973: PPUSH
50974: LD_VAR 0 7
50978: PPUSH
50979: CALL_OW 123
50983: GO 50916
50985: POP
50986: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
50987: LD_EXP 63
50991: PUSH
50992: LD_VAR 0 2
50996: ARRAY
50997: PUSH
50998: LD_EXP 62
51002: PUSH
51003: LD_VAR 0 2
51007: ARRAY
51008: AND
51009: IFFALSE 51078
// begin tmp := mc_defender [ i ] ;
51011: LD_ADDR_VAR 0 4
51015: PUSH
51016: LD_EXP 62
51020: PUSH
51021: LD_VAR 0 2
51025: ARRAY
51026: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
51027: LD_ADDR_EXP 62
51031: PUSH
51032: LD_EXP 62
51036: PPUSH
51037: LD_VAR 0 2
51041: PPUSH
51042: EMPTY
51043: PPUSH
51044: CALL_OW 1
51048: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
51049: LD_VAR 0 2
51053: PPUSH
51054: LD_VAR 0 4
51058: PPUSH
51059: LD_EXP 63
51063: PUSH
51064: LD_VAR 0 2
51068: ARRAY
51069: PPUSH
51070: CALL 6191 0 3
// exit ;
51074: POP
51075: POP
51076: GO 51082
// end ; end ;
51078: GO 50771
51080: POP
51081: POP
// end ;
51082: LD_VAR 0 1
51086: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci ; begin
51087: LD_INT 0
51089: PPUSH
51090: PPUSH
51091: PPUSH
51092: PPUSH
51093: PPUSH
51094: PPUSH
51095: PPUSH
51096: PPUSH
// if not mc_bases then
51097: LD_EXP 41
51101: NOT
51102: IFFALSE 51106
// exit ;
51104: GO 51477
// for i = 1 to mc_bases do
51106: LD_ADDR_VAR 0 2
51110: PUSH
51111: DOUBLE
51112: LD_INT 1
51114: DEC
51115: ST_TO_ADDR
51116: LD_EXP 41
51120: PUSH
51121: FOR_TO
51122: IFFALSE 51475
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
51124: LD_ADDR_VAR 0 6
51128: PUSH
51129: LD_EXP 41
51133: PUSH
51134: LD_VAR 0 2
51138: ARRAY
51139: PPUSH
51140: LD_INT 2
51142: PUSH
51143: LD_INT 30
51145: PUSH
51146: LD_INT 6
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 30
51155: PUSH
51156: LD_INT 7
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 30
51165: PUSH
51166: LD_INT 8
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: PPUSH
51179: CALL_OW 72
51183: ST_TO_ADDR
// if not tmp then
51184: LD_VAR 0 6
51188: NOT
51189: IFFALSE 51193
// continue ;
51191: GO 51121
// for j in tmp do
51193: LD_ADDR_VAR 0 3
51197: PUSH
51198: LD_VAR 0 6
51202: PUSH
51203: FOR_IN
51204: IFFALSE 51471
// begin side := GetSide ( j ) ;
51206: LD_ADDR_VAR 0 4
51210: PUSH
51211: LD_VAR 0 3
51215: PPUSH
51216: CALL_OW 255
51220: ST_TO_ADDR
// if not mc_tech [ side ] then
51221: LD_EXP 67
51225: PUSH
51226: LD_VAR 0 4
51230: ARRAY
51231: NOT
51232: IFFALSE 51236
// continue ;
51234: GO 51203
// if BuildingStatus ( j ) = bs_idle then
51236: LD_VAR 0 3
51240: PPUSH
51241: CALL_OW 461
51245: PUSH
51246: LD_INT 2
51248: EQUAL
51249: IFFALSE 51306
// for t in mc_tech [ side ] do
51251: LD_ADDR_VAR 0 5
51255: PUSH
51256: LD_EXP 67
51260: PUSH
51261: LD_VAR 0 4
51265: ARRAY
51266: PUSH
51267: FOR_IN
51268: IFFALSE 51304
// if CanBeResearched ( j , t ) then
51270: LD_VAR 0 3
51274: PPUSH
51275: LD_VAR 0 5
51279: PPUSH
51280: CALL_OW 430
51284: IFFALSE 51302
// begin ComResearch ( j , t ) ;
51286: LD_VAR 0 3
51290: PPUSH
51291: LD_VAR 0 5
51295: PPUSH
51296: CALL_OW 124
// break ;
51300: GO 51304
// end ;
51302: GO 51267
51304: POP
51305: POP
// if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
51306: LD_VAR 0 3
51310: PPUSH
51311: CALL_OW 461
51315: PUSH
51316: LD_INT 6
51318: EQUAL
51319: PUSH
51320: LD_VAR 0 6
51324: PUSH
51325: LD_INT 1
51327: GREATER
51328: AND
51329: IFFALSE 51469
// begin sci := [ ] ;
51331: LD_ADDR_VAR 0 8
51335: PUSH
51336: EMPTY
51337: ST_TO_ADDR
// for x in tmp diff j do
51338: LD_ADDR_VAR 0 7
51342: PUSH
51343: LD_VAR 0 6
51347: PUSH
51348: LD_VAR 0 3
51352: DIFF
51353: PUSH
51354: FOR_IN
51355: IFFALSE 51395
// begin if BuildingStatus ( x ) = bs_idle then
51357: LD_VAR 0 7
51361: PPUSH
51362: CALL_OW 461
51366: PUSH
51367: LD_INT 2
51369: EQUAL
51370: IFFALSE 51393
// sci := sci ^ UnitsInside ( x ) ;
51372: LD_ADDR_VAR 0 8
51376: PUSH
51377: LD_VAR 0 8
51381: PUSH
51382: LD_VAR 0 7
51386: PPUSH
51387: CALL_OW 313
51391: ADD
51392: ST_TO_ADDR
// end ;
51393: GO 51354
51395: POP
51396: POP
// if not sci then
51397: LD_VAR 0 8
51401: NOT
51402: IFFALSE 51406
// continue ;
51404: GO 51203
// for x in sci do
51406: LD_ADDR_VAR 0 7
51410: PUSH
51411: LD_VAR 0 8
51415: PUSH
51416: FOR_IN
51417: IFFALSE 51467
// if IsInUnit ( x ) and not HasTask ( x ) then
51419: LD_VAR 0 7
51423: PPUSH
51424: CALL_OW 310
51428: PUSH
51429: LD_VAR 0 7
51433: PPUSH
51434: CALL_OW 314
51438: NOT
51439: AND
51440: IFFALSE 51465
// begin ComExitBuilding ( x ) ;
51442: LD_VAR 0 7
51446: PPUSH
51447: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
51451: LD_VAR 0 7
51455: PPUSH
51456: LD_VAR 0 3
51460: PPUSH
51461: CALL_OW 180
// end ;
51465: GO 51416
51467: POP
51468: POP
// end ; end ;
51469: GO 51203
51471: POP
51472: POP
// end ;
51473: GO 51121
51475: POP
51476: POP
// end ;
51477: LD_VAR 0 1
51481: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
51482: LD_INT 0
51484: PPUSH
51485: PPUSH
51486: PPUSH
51487: PPUSH
51488: PPUSH
51489: PPUSH
// if not mc_bases then
51490: LD_EXP 41
51494: NOT
51495: IFFALSE 51499
// exit ;
51497: GO 51738
// for i = 1 to 8 do
51499: LD_ADDR_VAR 0 2
51503: PUSH
51504: DOUBLE
51505: LD_INT 1
51507: DEC
51508: ST_TO_ADDR
51509: LD_INT 8
51511: PUSH
51512: FOR_TO
51513: IFFALSE 51539
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
51515: LD_ADDR_EXP 67
51519: PUSH
51520: LD_EXP 67
51524: PPUSH
51525: LD_VAR 0 2
51529: PPUSH
51530: EMPTY
51531: PPUSH
51532: CALL_OW 1
51536: ST_TO_ADDR
51537: GO 51512
51539: POP
51540: POP
// tmp := [ ] ;
51541: LD_ADDR_VAR 0 5
51545: PUSH
51546: EMPTY
51547: ST_TO_ADDR
// for i = 1 to mc_sides do
51548: LD_ADDR_VAR 0 2
51552: PUSH
51553: DOUBLE
51554: LD_INT 1
51556: DEC
51557: ST_TO_ADDR
51558: LD_EXP 66
51562: PUSH
51563: FOR_TO
51564: IFFALSE 51622
// if not mc_sides [ i ] in tmp then
51566: LD_EXP 66
51570: PUSH
51571: LD_VAR 0 2
51575: ARRAY
51576: PUSH
51577: LD_VAR 0 5
51581: IN
51582: NOT
51583: IFFALSE 51620
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
51585: LD_ADDR_VAR 0 5
51589: PUSH
51590: LD_VAR 0 5
51594: PPUSH
51595: LD_VAR 0 5
51599: PUSH
51600: LD_INT 1
51602: PLUS
51603: PPUSH
51604: LD_EXP 66
51608: PUSH
51609: LD_VAR 0 2
51613: ARRAY
51614: PPUSH
51615: CALL_OW 2
51619: ST_TO_ADDR
51620: GO 51563
51622: POP
51623: POP
// if not tmp then
51624: LD_VAR 0 5
51628: NOT
51629: IFFALSE 51633
// exit ;
51631: GO 51738
// for j in tmp do
51633: LD_ADDR_VAR 0 3
51637: PUSH
51638: LD_VAR 0 5
51642: PUSH
51643: FOR_IN
51644: IFFALSE 51736
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
51646: LD_ADDR_VAR 0 6
51650: PUSH
51651: LD_INT 22
51653: PUSH
51654: LD_VAR 0 3
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PPUSH
51663: CALL_OW 69
51667: ST_TO_ADDR
// if not un then
51668: LD_VAR 0 6
51672: NOT
51673: IFFALSE 51677
// continue ;
51675: GO 51643
// nation := GetNation ( un [ 1 ] ) ;
51677: LD_ADDR_VAR 0 4
51681: PUSH
51682: LD_VAR 0 6
51686: PUSH
51687: LD_INT 1
51689: ARRAY
51690: PPUSH
51691: CALL_OW 248
51695: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
51696: LD_ADDR_EXP 67
51700: PUSH
51701: LD_EXP 67
51705: PPUSH
51706: LD_VAR 0 3
51710: PPUSH
51711: LD_VAR 0 3
51715: PPUSH
51716: LD_VAR 0 4
51720: PPUSH
51721: LD_INT 1
51723: PPUSH
51724: CALL 5519 0 3
51728: PPUSH
51729: CALL_OW 1
51733: ST_TO_ADDR
// end ;
51734: GO 51643
51736: POP
51737: POP
// end ;
51738: LD_VAR 0 1
51742: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
51743: LD_INT 0
51745: PPUSH
51746: PPUSH
51747: PPUSH
51748: PPUSH
51749: PPUSH
51750: PPUSH
51751: PPUSH
51752: PPUSH
// if not mc_bases then
51753: LD_EXP 41
51757: NOT
51758: IFFALSE 51762
// exit ;
51760: GO 52407
// for i = 1 to mc_bases do
51762: LD_ADDR_VAR 0 2
51766: PUSH
51767: DOUBLE
51768: LD_INT 1
51770: DEC
51771: ST_TO_ADDR
51772: LD_EXP 41
51776: PUSH
51777: FOR_TO
51778: IFFALSE 52405
// begin if not mc_bases [ i ] then
51780: LD_EXP 41
51784: PUSH
51785: LD_VAR 0 2
51789: ARRAY
51790: NOT
51791: IFFALSE 51795
// continue ;
51793: GO 51777
// if mc_scan [ i ] then
51795: LD_EXP 63
51799: PUSH
51800: LD_VAR 0 2
51804: ARRAY
51805: IFFALSE 51831
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
51807: LD_ADDR_EXP 53
51811: PUSH
51812: LD_EXP 53
51816: PPUSH
51817: LD_VAR 0 2
51821: PPUSH
51822: EMPTY
51823: PPUSH
51824: CALL_OW 1
51828: ST_TO_ADDR
// continue ;
51829: GO 51777
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
51831: LD_ADDR_VAR 0 5
51835: PUSH
51836: LD_EXP 41
51840: PUSH
51841: LD_VAR 0 2
51845: ARRAY
51846: PUSH
51847: LD_INT 1
51849: ARRAY
51850: PPUSH
51851: CALL_OW 255
51855: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
51856: LD_ADDR_VAR 0 6
51860: PUSH
51861: LD_EXP 41
51865: PUSH
51866: LD_VAR 0 2
51870: ARRAY
51871: PPUSH
51872: LD_INT 30
51874: PUSH
51875: LD_INT 3
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PPUSH
51882: CALL_OW 72
51886: ST_TO_ADDR
// if not fac then
51887: LD_VAR 0 6
51891: NOT
51892: IFFALSE 51943
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
51894: LD_ADDR_VAR 0 6
51898: PUSH
51899: LD_EXP 41
51903: PUSH
51904: LD_VAR 0 2
51908: ARRAY
51909: PPUSH
51910: LD_INT 2
51912: PUSH
51913: LD_INT 30
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 30
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: LIST
51937: PPUSH
51938: CALL_OW 72
51942: ST_TO_ADDR
// if not fac then
51943: LD_VAR 0 6
51947: NOT
51948: IFFALSE 51952
// continue ;
51950: GO 51777
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
51952: LD_ADDR_VAR 0 7
51956: PUSH
51957: LD_EXP 64
51961: PUSH
51962: LD_VAR 0 2
51966: ARRAY
51967: PPUSH
51968: LD_INT 22
51970: PUSH
51971: LD_VAR 0 5
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 21
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 3
51992: PUSH
51993: LD_INT 24
51995: PUSH
51996: LD_INT 1000
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: LIST
52011: PPUSH
52012: CALL_OW 70
52016: PUSH
52017: LD_INT 22
52019: PUSH
52020: LD_VAR 0 5
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 91
52031: PUSH
52032: LD_VAR 0 6
52036: PUSH
52037: LD_INT 1
52039: ARRAY
52040: PUSH
52041: LD_INT 25
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 21
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 3
52061: PUSH
52062: LD_INT 24
52064: PUSH
52065: LD_INT 1000
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: PPUSH
52082: CALL_OW 69
52086: UNION
52087: ST_TO_ADDR
// if not vehs then
52088: LD_VAR 0 7
52092: NOT
52093: IFFALSE 52119
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
52095: LD_ADDR_EXP 53
52099: PUSH
52100: LD_EXP 53
52104: PPUSH
52105: LD_VAR 0 2
52109: PPUSH
52110: EMPTY
52111: PPUSH
52112: CALL_OW 1
52116: ST_TO_ADDR
// continue ;
52117: GO 51777
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
52119: LD_ADDR_VAR 0 8
52123: PUSH
52124: LD_EXP 41
52128: PUSH
52129: LD_VAR 0 2
52133: ARRAY
52134: PPUSH
52135: LD_INT 30
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PPUSH
52145: CALL_OW 72
52149: ST_TO_ADDR
// if tmp then
52150: LD_VAR 0 8
52154: IFFALSE 52257
// begin for j in tmp do
52156: LD_ADDR_VAR 0 3
52160: PUSH
52161: LD_VAR 0 8
52165: PUSH
52166: FOR_IN
52167: IFFALSE 52255
// for k in UnitsInside ( j ) do
52169: LD_ADDR_VAR 0 4
52173: PUSH
52174: LD_VAR 0 3
52178: PPUSH
52179: CALL_OW 313
52183: PUSH
52184: FOR_IN
52185: IFFALSE 52251
// if k then
52187: LD_VAR 0 4
52191: IFFALSE 52249
// if not k in mc_repair_vehicle [ i ] then
52193: LD_VAR 0 4
52197: PUSH
52198: LD_EXP 53
52202: PUSH
52203: LD_VAR 0 2
52207: ARRAY
52208: IN
52209: NOT
52210: IFFALSE 52249
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
52212: LD_ADDR_EXP 53
52216: PUSH
52217: LD_EXP 53
52221: PPUSH
52222: LD_VAR 0 2
52226: PPUSH
52227: LD_EXP 53
52231: PUSH
52232: LD_VAR 0 2
52236: ARRAY
52237: PUSH
52238: LD_VAR 0 4
52242: UNION
52243: PPUSH
52244: CALL_OW 1
52248: ST_TO_ADDR
52249: GO 52184
52251: POP
52252: POP
52253: GO 52166
52255: POP
52256: POP
// end ; if not mc_repair_vehicle [ i ] then
52257: LD_EXP 53
52261: PUSH
52262: LD_VAR 0 2
52266: ARRAY
52267: NOT
52268: IFFALSE 52272
// continue ;
52270: GO 51777
// for j in mc_repair_vehicle [ i ] do
52272: LD_ADDR_VAR 0 3
52276: PUSH
52277: LD_EXP 53
52281: PUSH
52282: LD_VAR 0 2
52286: ARRAY
52287: PUSH
52288: FOR_IN
52289: IFFALSE 52401
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
52291: LD_VAR 0 3
52295: PPUSH
52296: CALL_OW 311
52300: NOT
52301: PUSH
52302: LD_VAR 0 3
52306: PUSH
52307: LD_EXP 44
52311: PUSH
52312: LD_VAR 0 2
52316: ARRAY
52317: PUSH
52318: LD_INT 1
52320: ARRAY
52321: IN
52322: NOT
52323: AND
52324: PUSH
52325: LD_VAR 0 3
52329: PUSH
52330: LD_EXP 44
52334: PUSH
52335: LD_VAR 0 2
52339: ARRAY
52340: PUSH
52341: LD_INT 2
52343: ARRAY
52344: IN
52345: NOT
52346: AND
52347: IFFALSE 52399
// begin if IsInUnit ( j ) then
52349: LD_VAR 0 3
52353: PPUSH
52354: CALL_OW 310
52358: IFFALSE 52369
// ComExitBuilding ( j ) ;
52360: LD_VAR 0 3
52364: PPUSH
52365: CALL_OW 122
// if not HasTask ( j ) then
52369: LD_VAR 0 3
52373: PPUSH
52374: CALL_OW 314
52378: NOT
52379: IFFALSE 52399
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
52381: LD_VAR 0 3
52385: PPUSH
52386: LD_VAR 0 7
52390: PUSH
52391: LD_INT 1
52393: ARRAY
52394: PPUSH
52395: CALL_OW 189
// end ; end ;
52399: GO 52288
52401: POP
52402: POP
// end ;
52403: GO 51777
52405: POP
52406: POP
// end ;
52407: LD_VAR 0 1
52411: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
52412: LD_INT 0
52414: PPUSH
52415: PPUSH
52416: PPUSH
52417: PPUSH
52418: PPUSH
52419: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] then
52420: LD_VAR 0 1
52424: NOT
52425: PUSH
52426: LD_VAR 0 2
52430: NOT
52431: OR
52432: PUSH
52433: LD_VAR 0 3
52437: NOT
52438: OR
52439: PUSH
52440: LD_VAR 0 4
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: LD_INT 3
52453: PUSH
52454: LD_INT 4
52456: PUSH
52457: LD_INT 5
52459: PUSH
52460: LD_INT 8
52462: PUSH
52463: LD_INT 9
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: IN
52475: NOT
52476: OR
52477: IFFALSE 52481
// exit ;
52479: GO 53391
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
52481: LD_ADDR_VAR 0 2
52485: PUSH
52486: LD_VAR 0 2
52490: PPUSH
52491: LD_INT 21
52493: PUSH
52494: LD_INT 3
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 24
52503: PUSH
52504: LD_INT 250
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PPUSH
52515: CALL_OW 72
52519: ST_TO_ADDR
// case class of 1 :
52520: LD_VAR 0 4
52524: PUSH
52525: LD_INT 1
52527: DOUBLE
52528: EQUAL
52529: IFTRUE 52533
52531: GO 52618
52533: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
52534: LD_ADDR_VAR 0 8
52538: PUSH
52539: LD_VAR 0 2
52543: PPUSH
52544: LD_INT 2
52546: PUSH
52547: LD_INT 30
52549: PUSH
52550: LD_INT 32
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 30
52559: PUSH
52560: LD_INT 31
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: LIST
52571: PPUSH
52572: CALL_OW 72
52576: PUSH
52577: LD_VAR 0 2
52581: PPUSH
52582: LD_INT 2
52584: PUSH
52585: LD_INT 30
52587: PUSH
52588: LD_INT 4
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 30
52597: PUSH
52598: LD_INT 5
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: LIST
52609: PPUSH
52610: CALL_OW 72
52614: ADD
52615: ST_TO_ADDR
52616: GO 52858
52618: LD_INT 2
52620: DOUBLE
52621: EQUAL
52622: IFTRUE 52626
52624: GO 52672
52626: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
52627: LD_ADDR_VAR 0 8
52631: PUSH
52632: LD_VAR 0 2
52636: PPUSH
52637: LD_INT 2
52639: PUSH
52640: LD_INT 30
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 30
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: LIST
52664: PPUSH
52665: CALL_OW 72
52669: ST_TO_ADDR
52670: GO 52858
52672: LD_INT 3
52674: DOUBLE
52675: EQUAL
52676: IFTRUE 52680
52678: GO 52726
52680: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
52681: LD_ADDR_VAR 0 8
52685: PUSH
52686: LD_VAR 0 2
52690: PPUSH
52691: LD_INT 2
52693: PUSH
52694: LD_INT 30
52696: PUSH
52697: LD_INT 2
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 30
52706: PUSH
52707: LD_INT 3
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: LIST
52718: PPUSH
52719: CALL_OW 72
52723: ST_TO_ADDR
52724: GO 52858
52726: LD_INT 4
52728: DOUBLE
52729: EQUAL
52730: IFTRUE 52734
52732: GO 52791
52734: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
52735: LD_ADDR_VAR 0 8
52739: PUSH
52740: LD_VAR 0 2
52744: PPUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 30
52750: PUSH
52751: LD_INT 6
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 30
52760: PUSH
52761: LD_INT 7
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 30
52770: PUSH
52771: LD_INT 8
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: PPUSH
52784: CALL_OW 72
52788: ST_TO_ADDR
52789: GO 52858
52791: LD_INT 5
52793: DOUBLE
52794: EQUAL
52795: IFTRUE 52811
52797: LD_INT 8
52799: DOUBLE
52800: EQUAL
52801: IFTRUE 52811
52803: LD_INT 9
52805: DOUBLE
52806: EQUAL
52807: IFTRUE 52811
52809: GO 52857
52811: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
52812: LD_ADDR_VAR 0 8
52816: PUSH
52817: LD_VAR 0 2
52821: PPUSH
52822: LD_INT 2
52824: PUSH
52825: LD_INT 30
52827: PUSH
52828: LD_INT 4
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 30
52837: PUSH
52838: LD_INT 5
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: LIST
52849: PPUSH
52850: CALL_OW 72
52854: ST_TO_ADDR
52855: GO 52858
52857: POP
// if not tmp then
52858: LD_VAR 0 8
52862: NOT
52863: IFFALSE 52867
// exit ;
52865: GO 53391
// if class = 1 and mc_empty_turret_list [ base ] then
52867: LD_VAR 0 4
52871: PUSH
52872: LD_INT 1
52874: EQUAL
52875: PUSH
52876: LD_EXP 50
52880: PUSH
52881: LD_VAR 0 1
52885: ARRAY
52886: AND
52887: IFFALSE 53043
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
52889: LD_ADDR_VAR 0 9
52893: PUSH
52894: LD_EXP 50
52898: PUSH
52899: LD_VAR 0 1
52903: ARRAY
52904: PUSH
52905: LD_INT 1
52907: ARRAY
52908: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
52909: LD_VAR 0 9
52913: PUSH
52914: LD_EXP 51
52918: PUSH
52919: LD_VAR 0 1
52923: ARRAY
52924: IN
52925: NOT
52926: IFFALSE 53041
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
52928: LD_ADDR_EXP 51
52932: PUSH
52933: LD_EXP 51
52937: PPUSH
52938: LD_VAR 0 1
52942: PUSH
52943: LD_EXP 51
52947: PUSH
52948: LD_VAR 0 1
52952: ARRAY
52953: PUSH
52954: LD_INT 1
52956: PLUS
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PPUSH
52962: LD_VAR 0 9
52966: PPUSH
52967: CALL 11181 0 3
52971: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
52972: LD_ADDR_EXP 50
52976: PUSH
52977: LD_EXP 50
52981: PPUSH
52982: LD_VAR 0 1
52986: PPUSH
52987: LD_EXP 50
52991: PUSH
52992: LD_VAR 0 1
52996: ARRAY
52997: PUSH
52998: LD_VAR 0 9
53002: DIFF
53003: PPUSH
53004: CALL_OW 1
53008: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
53009: LD_VAR 0 3
53013: PPUSH
53014: LD_EXP 51
53018: PUSH
53019: LD_VAR 0 1
53023: ARRAY
53024: PUSH
53025: LD_EXP 51
53029: PUSH
53030: LD_VAR 0 1
53034: ARRAY
53035: ARRAY
53036: PPUSH
53037: CALL_OW 120
// end ; exit ;
53041: GO 53391
// end ; if tmp > 1 then
53043: LD_VAR 0 8
53047: PUSH
53048: LD_INT 1
53050: GREATER
53051: IFFALSE 53155
// for i = 2 to tmp do
53053: LD_ADDR_VAR 0 6
53057: PUSH
53058: DOUBLE
53059: LD_INT 2
53061: DEC
53062: ST_TO_ADDR
53063: LD_VAR 0 8
53067: PUSH
53068: FOR_TO
53069: IFFALSE 53153
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
53071: LD_VAR 0 8
53075: PUSH
53076: LD_VAR 0 6
53080: ARRAY
53081: PPUSH
53082: CALL_OW 461
53086: PUSH
53087: LD_INT 6
53089: EQUAL
53090: IFFALSE 53151
// begin x := tmp [ i ] ;
53092: LD_ADDR_VAR 0 9
53096: PUSH
53097: LD_VAR 0 8
53101: PUSH
53102: LD_VAR 0 6
53106: ARRAY
53107: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
53108: LD_ADDR_VAR 0 8
53112: PUSH
53113: LD_VAR 0 8
53117: PPUSH
53118: LD_VAR 0 6
53122: PPUSH
53123: CALL_OW 3
53127: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
53128: LD_ADDR_VAR 0 8
53132: PUSH
53133: LD_VAR 0 8
53137: PPUSH
53138: LD_INT 1
53140: PPUSH
53141: LD_VAR 0 9
53145: PPUSH
53146: CALL_OW 2
53150: ST_TO_ADDR
// end ;
53151: GO 53068
53153: POP
53154: POP
// for i in tmp do
53155: LD_ADDR_VAR 0 6
53159: PUSH
53160: LD_VAR 0 8
53164: PUSH
53165: FOR_IN
53166: IFFALSE 53235
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
53168: LD_VAR 0 6
53172: PPUSH
53173: CALL_OW 313
53177: PUSH
53178: LD_INT 6
53180: LESS
53181: PUSH
53182: LD_VAR 0 6
53186: PPUSH
53187: CALL_OW 266
53191: PUSH
53192: LD_INT 31
53194: PUSH
53195: LD_INT 32
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: IN
53202: NOT
53203: AND
53204: PUSH
53205: LD_VAR 0 6
53209: PPUSH
53210: CALL_OW 313
53214: PUSH
53215: LD_INT 0
53217: EQUAL
53218: OR
53219: IFFALSE 53233
// begin j := i ;
53221: LD_ADDR_VAR 0 7
53225: PUSH
53226: LD_VAR 0 6
53230: ST_TO_ADDR
// break ;
53231: GO 53235
// end ; end ;
53233: GO 53165
53235: POP
53236: POP
// if j then
53237: LD_VAR 0 7
53241: IFFALSE 53259
// ComEnterUnit ( unit , j ) else
53243: LD_VAR 0 3
53247: PPUSH
53248: LD_VAR 0 7
53252: PPUSH
53253: CALL_OW 120
53257: GO 53391
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
53259: LD_ADDR_VAR 0 10
53263: PUSH
53264: LD_VAR 0 2
53268: PPUSH
53269: LD_INT 2
53271: PUSH
53272: LD_INT 30
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 30
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: LIST
53296: PPUSH
53297: CALL_OW 72
53301: ST_TO_ADDR
// if depot then
53302: LD_VAR 0 10
53306: IFFALSE 53391
// begin if GetDistUnits ( unit , depot [ 1 ] ) > 10 then
53308: LD_VAR 0 3
53312: PPUSH
53313: LD_VAR 0 10
53317: PUSH
53318: LD_INT 1
53320: ARRAY
53321: PPUSH
53322: CALL_OW 296
53326: PUSH
53327: LD_INT 10
53329: GREATER
53330: IFFALSE 53391
// ComMoveXY ( unit , ShiftX ( GetX ( depot [ 1 ] ) , 3 , 3 ) , ShiftY ( GetY ( depot [ 1 ] ) , 3 , 3 ) ) ;
53332: LD_VAR 0 3
53336: PPUSH
53337: LD_VAR 0 10
53341: PUSH
53342: LD_INT 1
53344: ARRAY
53345: PPUSH
53346: CALL_OW 250
53350: PPUSH
53351: LD_INT 3
53353: PPUSH
53354: LD_INT 3
53356: PPUSH
53357: CALL_OW 272
53361: PPUSH
53362: LD_VAR 0 10
53366: PUSH
53367: LD_INT 1
53369: ARRAY
53370: PPUSH
53371: CALL_OW 251
53375: PPUSH
53376: LD_INT 3
53378: PPUSH
53379: LD_INT 3
53381: PPUSH
53382: CALL_OW 273
53386: PPUSH
53387: CALL_OW 111
// end ; end ; end ;
53391: LD_VAR 0 5
53395: RET
// export function MC_Idle ( ) ; var i , j , x , tmp , tmp2 , tower ; begin
53396: LD_INT 0
53398: PPUSH
53399: PPUSH
53400: PPUSH
53401: PPUSH
53402: PPUSH
53403: PPUSH
53404: PPUSH
// if not mc_bases then
53405: LD_EXP 41
53409: NOT
53410: IFFALSE 53414
// exit ;
53412: GO 53643
// for i = 1 to mc_bases do
53414: LD_ADDR_VAR 0 2
53418: PUSH
53419: DOUBLE
53420: LD_INT 1
53422: DEC
53423: ST_TO_ADDR
53424: LD_EXP 41
53428: PUSH
53429: FOR_TO
53430: IFFALSE 53641
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
53432: LD_ADDR_VAR 0 5
53436: PUSH
53437: LD_EXP 41
53441: PUSH
53442: LD_VAR 0 2
53446: ARRAY
53447: PPUSH
53448: LD_INT 21
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PPUSH
53458: CALL_OW 72
53462: ST_TO_ADDR
// if not tmp then
53463: LD_VAR 0 5
53467: NOT
53468: IFFALSE 53474
// exit ;
53470: POP
53471: POP
53472: GO 53643
// for j in tmp do
53474: LD_ADDR_VAR 0 3
53478: PUSH
53479: LD_VAR 0 5
53483: PUSH
53484: FOR_IN
53485: IFFALSE 53637
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
53487: LD_VAR 0 3
53491: PPUSH
53492: CALL_OW 110
53496: NOT
53497: PUSH
53498: LD_VAR 0 3
53502: PPUSH
53503: CALL_OW 314
53507: NOT
53508: AND
53509: PUSH
53510: LD_VAR 0 3
53514: PPUSH
53515: CALL_OW 311
53519: NOT
53520: AND
53521: PUSH
53522: LD_VAR 0 3
53526: PPUSH
53527: CALL_OW 310
53531: NOT
53532: AND
53533: PUSH
53534: LD_VAR 0 3
53538: PUSH
53539: LD_EXP 44
53543: PUSH
53544: LD_VAR 0 2
53548: ARRAY
53549: PUSH
53550: LD_INT 1
53552: ARRAY
53553: IN
53554: NOT
53555: AND
53556: PUSH
53557: LD_VAR 0 3
53561: PUSH
53562: LD_EXP 44
53566: PUSH
53567: LD_VAR 0 2
53571: ARRAY
53572: PUSH
53573: LD_INT 2
53575: ARRAY
53576: IN
53577: NOT
53578: AND
53579: PUSH
53580: LD_VAR 0 3
53584: PUSH
53585: LD_EXP 53
53589: PUSH
53590: LD_VAR 0 2
53594: ARRAY
53595: IN
53596: NOT
53597: AND
53598: IFFALSE 53635
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
53600: LD_VAR 0 2
53604: PPUSH
53605: LD_EXP 41
53609: PUSH
53610: LD_VAR 0 2
53614: ARRAY
53615: PPUSH
53616: LD_VAR 0 3
53620: PPUSH
53621: LD_VAR 0 3
53625: PPUSH
53626: CALL_OW 257
53630: PPUSH
53631: CALL 52412 0 4
// end ;
53635: GO 53484
53637: POP
53638: POP
// end ;
53639: GO 53429
53641: POP
53642: POP
// end ;
53643: LD_VAR 0 1
53647: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
53648: LD_INT 0
53650: PPUSH
53651: PPUSH
53652: PPUSH
53653: PPUSH
53654: PPUSH
53655: PPUSH
// if not mc_bases [ base ] then
53656: LD_EXP 41
53660: PUSH
53661: LD_VAR 0 1
53665: ARRAY
53666: NOT
53667: IFFALSE 53671
// exit ;
53669: GO 53853
// tmp := [ ] ;
53671: LD_ADDR_VAR 0 6
53675: PUSH
53676: EMPTY
53677: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
53678: LD_ADDR_VAR 0 7
53682: PUSH
53683: LD_VAR 0 3
53687: PPUSH
53688: LD_INT 0
53690: PPUSH
53691: CALL_OW 517
53695: ST_TO_ADDR
// if not list then
53696: LD_VAR 0 7
53700: NOT
53701: IFFALSE 53705
// exit ;
53703: GO 53853
// for i = 1 to amount do
53705: LD_ADDR_VAR 0 5
53709: PUSH
53710: DOUBLE
53711: LD_INT 1
53713: DEC
53714: ST_TO_ADDR
53715: LD_VAR 0 2
53719: PUSH
53720: FOR_TO
53721: IFFALSE 53801
// begin x := rand ( 1 , list [ 1 ] ) ;
53723: LD_ADDR_VAR 0 8
53727: PUSH
53728: LD_INT 1
53730: PPUSH
53731: LD_VAR 0 7
53735: PUSH
53736: LD_INT 1
53738: ARRAY
53739: PPUSH
53740: CALL_OW 12
53744: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
53745: LD_ADDR_VAR 0 6
53749: PUSH
53750: LD_VAR 0 6
53754: PPUSH
53755: LD_VAR 0 5
53759: PPUSH
53760: LD_VAR 0 7
53764: PUSH
53765: LD_INT 1
53767: ARRAY
53768: PUSH
53769: LD_VAR 0 8
53773: ARRAY
53774: PUSH
53775: LD_VAR 0 7
53779: PUSH
53780: LD_INT 2
53782: ARRAY
53783: PUSH
53784: LD_VAR 0 8
53788: ARRAY
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PPUSH
53794: CALL_OW 1
53798: ST_TO_ADDR
// end ;
53799: GO 53720
53801: POP
53802: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
53803: LD_ADDR_EXP 54
53807: PUSH
53808: LD_EXP 54
53812: PPUSH
53813: LD_VAR 0 1
53817: PPUSH
53818: LD_VAR 0 6
53822: PPUSH
53823: CALL_OW 1
53827: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
53828: LD_ADDR_EXP 56
53832: PUSH
53833: LD_EXP 56
53837: PPUSH
53838: LD_VAR 0 1
53842: PPUSH
53843: LD_VAR 0 3
53847: PPUSH
53848: CALL_OW 1
53852: ST_TO_ADDR
// end ;
53853: LD_VAR 0 4
53857: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
53858: LD_INT 0
53860: PPUSH
// if not mc_bases [ base ] then
53861: LD_EXP 41
53865: PUSH
53866: LD_VAR 0 1
53870: ARRAY
53871: NOT
53872: IFFALSE 53876
// exit ;
53874: GO 53901
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
53876: LD_ADDR_EXP 61
53880: PUSH
53881: LD_EXP 61
53885: PPUSH
53886: LD_VAR 0 1
53890: PPUSH
53891: LD_VAR 0 2
53895: PPUSH
53896: CALL_OW 1
53900: ST_TO_ADDR
// end ;
53901: LD_VAR 0 3
53905: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
53906: LD_INT 0
53908: PPUSH
// if not mc_bases [ base ] then
53909: LD_EXP 41
53913: PUSH
53914: LD_VAR 0 1
53918: ARRAY
53919: NOT
53920: IFFALSE 53924
// exit ;
53922: GO 53964
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
53924: LD_ADDR_EXP 61
53928: PUSH
53929: LD_EXP 61
53933: PPUSH
53934: LD_VAR 0 1
53938: PPUSH
53939: LD_EXP 61
53943: PUSH
53944: LD_VAR 0 1
53948: ARRAY
53949: PUSH
53950: LD_VAR 0 2
53954: PUSH
53955: EMPTY
53956: LIST
53957: ADD
53958: PPUSH
53959: CALL_OW 1
53963: ST_TO_ADDR
// end ;
53964: LD_VAR 0 3
53968: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
53969: LD_INT 0
53971: PPUSH
// if not mc_bases [ base ] then
53972: LD_EXP 41
53976: PUSH
53977: LD_VAR 0 1
53981: ARRAY
53982: NOT
53983: IFFALSE 53987
// exit ;
53985: GO 54099
// mc_defender := Replace ( mc_defender , base , deflist ) ;
53987: LD_ADDR_EXP 62
53991: PUSH
53992: LD_EXP 62
53996: PPUSH
53997: LD_VAR 0 1
54001: PPUSH
54002: LD_VAR 0 2
54006: PPUSH
54007: CALL_OW 1
54011: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
54012: LD_ADDR_EXP 52
54016: PUSH
54017: LD_EXP 52
54021: PPUSH
54022: LD_VAR 0 1
54026: PPUSH
54027: LD_VAR 0 2
54031: PUSH
54032: LD_INT 0
54034: PLUS
54035: PPUSH
54036: CALL_OW 1
54040: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
54041: LD_ADDR_EXP 59
54045: PUSH
54046: LD_EXP 59
54050: PPUSH
54051: LD_VAR 0 1
54055: PPUSH
54056: LD_EXP 59
54060: PUSH
54061: LD_VAR 0 1
54065: ARRAY
54066: PUSH
54067: LD_EXP 62
54071: PUSH
54072: LD_VAR 0 1
54076: ARRAY
54077: PPUSH
54078: LD_INT 21
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PPUSH
54088: CALL_OW 72
54092: UNION
54093: PPUSH
54094: CALL_OW 1
54098: ST_TO_ADDR
// end ;
54099: LD_VAR 0 3
54103: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
54104: LD_INT 0
54106: PPUSH
54107: PPUSH
54108: PPUSH
54109: PPUSH
// if not mc_bases [ base ] then
54110: LD_EXP 41
54114: PUSH
54115: LD_VAR 0 1
54119: ARRAY
54120: NOT
54121: IFFALSE 54125
// exit ;
54123: GO 54190
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
54125: LD_ADDR_EXP 60
54129: PUSH
54130: LD_EXP 60
54134: PPUSH
54135: LD_VAR 0 1
54139: PUSH
54140: LD_EXP 60
54144: PUSH
54145: LD_VAR 0 1
54149: ARRAY
54150: PUSH
54151: LD_INT 1
54153: PLUS
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PPUSH
54159: LD_VAR 0 1
54163: PUSH
54164: LD_VAR 0 2
54168: PUSH
54169: LD_VAR 0 3
54173: PUSH
54174: LD_VAR 0 4
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: PPUSH
54185: CALL 11181 0 3
54189: ST_TO_ADDR
// end ;
54190: LD_VAR 0 5
54194: RET
// export function MC_GetMinesField ( base ) ; begin
54195: LD_INT 0
54197: PPUSH
// result := mc_mines [ base ] ;
54198: LD_ADDR_VAR 0 2
54202: PUSH
54203: LD_EXP 54
54207: PUSH
54208: LD_VAR 0 1
54212: ARRAY
54213: ST_TO_ADDR
// end ;
54214: LD_VAR 0 2
54218: RET
// export function MC_GetProduceList ( base ) ; begin
54219: LD_INT 0
54221: PPUSH
// result := mc_produce [ base ] ;
54222: LD_ADDR_VAR 0 2
54226: PUSH
54227: LD_EXP 61
54231: PUSH
54232: LD_VAR 0 1
54236: ARRAY
54237: ST_TO_ADDR
// end ;
54238: LD_VAR 0 2
54242: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
54243: LD_INT 0
54245: PPUSH
54246: PPUSH
// if not mc_bases then
54247: LD_EXP 41
54251: NOT
54252: IFFALSE 54256
// exit ;
54254: GO 54321
// if mc_bases [ base ] then
54256: LD_EXP 41
54260: PUSH
54261: LD_VAR 0 1
54265: ARRAY
54266: IFFALSE 54321
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
54268: LD_ADDR_VAR 0 3
54272: PUSH
54273: LD_EXP 41
54277: PUSH
54278: LD_VAR 0 1
54282: ARRAY
54283: PPUSH
54284: LD_INT 30
54286: PUSH
54287: LD_VAR 0 2
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PPUSH
54296: CALL_OW 72
54300: ST_TO_ADDR
// if result then
54301: LD_VAR 0 3
54305: IFFALSE 54321
// result := result [ 1 ] ;
54307: LD_ADDR_VAR 0 3
54311: PUSH
54312: LD_VAR 0 3
54316: PUSH
54317: LD_INT 1
54319: ARRAY
54320: ST_TO_ADDR
// end ; end ; end_of_file
54321: LD_VAR 0 3
54325: RET
// on ArtifactLoaded ( cargo , artifact ) do var i , j ;
54326: LD_INT 0
54328: PPUSH
54329: PPUSH
// begin if artifact_get then
54330: LD_EXP 4
54334: IFFALSE 54338
// exit ;
54336: GO 54360
// MultiplayerEvent_ArtifactCaptured ( GetSide ( cargo ) ) ;
54338: LD_VAR 0 1
54342: PPUSH
54343: CALL_OW 255
54347: PPUSH
54348: CALL 5494 0 1
// artifact_get := true ;
54352: LD_ADDR_EXP 4
54356: PUSH
54357: LD_INT 1
54359: ST_TO_ADDR
// end ;
54360: PPOPN 4
54362: END
// on UnitDestroyed ( un ) do var i , j , btype , pos , side , tmp , fac , components ;
54363: LD_INT 0
54365: PPUSH
54366: PPUSH
54367: PPUSH
54368: PPUSH
54369: PPUSH
54370: PPUSH
54371: PPUSH
54372: PPUSH
// begin side := GetSide ( un ) ;
54373: LD_ADDR_VAR 0 6
54377: PUSH
54378: LD_VAR 0 1
54382: PPUSH
54383: CALL_OW 255
54387: ST_TO_ADDR
// if side <> side_bot and multi_sides [ side ] then
54388: LD_VAR 0 6
54392: PUSH
54393: LD_EXP 3
54397: NONEQUAL
54398: PUSH
54399: LD_EXP 7
54403: PUSH
54404: LD_VAR 0 6
54408: ARRAY
54409: AND
54410: IFFALSE 54436
// if GetType ( un ) = unit_human then
54412: LD_VAR 0 1
54416: PPUSH
54417: CALL_OW 247
54421: PUSH
54422: LD_INT 1
54424: EQUAL
54425: IFFALSE 54436
// MultiplayerEvent_HumanLost ( side ) ;
54427: LD_VAR 0 6
54431: PPUSH
54432: CALL 5134 0 1
// if side = side_bot then
54436: LD_VAR 0 6
54440: PUSH
54441: LD_EXP 3
54445: EQUAL
54446: IFFALSE 54491
// if un <> Gensher then
54448: LD_VAR 0 1
54452: PUSH
54453: LD_EXP 39
54457: NONEQUAL
54458: IFFALSE 54474
// MultiplayerEvent_UnitKilled ( un , false ) else
54460: LD_VAR 0 1
54464: PPUSH
54465: LD_INT 0
54467: PPUSH
54468: CALL 5248 0 2
54472: GO 54491
// MultiplayerEvent_UnitKilled ( un , Multiplayer_GetCondition ( 5 ) ) ;
54474: LD_VAR 0 1
54478: PPUSH
54479: LD_INT 5
54481: PPUSH
54482: CALL 4565 0 1
54486: PPUSH
54487: CALL 5248 0 2
// if multi_commanders and multi_custom_commanders then
54491: LD_EXP 24
54495: PUSH
54496: LD_EXP 16
54500: AND
54501: IFFALSE 54563
// if un in multi_commanders then
54503: LD_VAR 0 1
54507: PUSH
54508: LD_EXP 24
54512: IN
54513: IFFALSE 54563
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
54515: LD_ADDR_EXP 25
54519: PUSH
54520: LD_EXP 25
54524: PPUSH
54525: LD_VAR 0 6
54529: PPUSH
54530: LD_INT 1
54532: PPUSH
54533: CALL_OW 1
54537: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
54538: LD_ADDR_EXP 24
54542: PUSH
54543: LD_EXP 24
54547: PUSH
54548: LD_VAR 0 1
54552: DIFF
54553: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
54554: LD_VAR 0 6
54558: PPUSH
54559: CALL 4598 0 1
// end ; if not mc_bases then
54563: LD_EXP 41
54567: NOT
54568: IFFALSE 54572
// exit ;
54570: GO 55386
// for i = 1 to mc_bases do
54572: LD_ADDR_VAR 0 2
54576: PUSH
54577: DOUBLE
54578: LD_INT 1
54580: DEC
54581: ST_TO_ADDR
54582: LD_EXP 41
54586: PUSH
54587: FOR_TO
54588: IFFALSE 55384
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] then
54590: LD_VAR 0 1
54594: PUSH
54595: LD_EXP 41
54599: PUSH
54600: LD_VAR 0 2
54604: ARRAY
54605: IN
54606: PUSH
54607: LD_VAR 0 1
54611: PUSH
54612: LD_EXP 48
54616: PUSH
54617: LD_VAR 0 2
54621: ARRAY
54622: IN
54623: OR
54624: PUSH
54625: LD_VAR 0 1
54629: PUSH
54630: LD_EXP 59
54634: PUSH
54635: LD_VAR 0 2
54639: ARRAY
54640: IN
54641: OR
54642: IFFALSE 55382
// begin if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
54644: LD_VAR 0 1
54648: PPUSH
54649: CALL_OW 247
54653: PUSH
54654: LD_INT 2
54656: EQUAL
54657: PUSH
54658: LD_VAR 0 1
54662: PPUSH
54663: CALL_OW 110
54667: PUSH
54668: LD_INT 20
54670: EQUAL
54671: AND
54672: IFFALSE 54775
// begin fac := MC_GetBuilding ( i , b_factory ) ;
54674: LD_ADDR_VAR 0 8
54678: PUSH
54679: LD_VAR 0 2
54683: PPUSH
54684: LD_INT 3
54686: PPUSH
54687: CALL 54243 0 2
54691: ST_TO_ADDR
// if fac then
54692: LD_VAR 0 8
54696: IFFALSE 54775
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
54698: LD_ADDR_VAR 0 9
54702: PUSH
54703: LD_VAR 0 8
54707: PPUSH
54708: LD_VAR 0 1
54712: PPUSH
54713: CALL_OW 265
54717: PPUSH
54718: LD_VAR 0 1
54722: PPUSH
54723: CALL_OW 262
54727: PPUSH
54728: LD_VAR 0 1
54732: PPUSH
54733: CALL_OW 263
54737: PPUSH
54738: LD_VAR 0 1
54742: PPUSH
54743: CALL_OW 264
54747: PPUSH
54748: CALL 8346 0 5
54752: ST_TO_ADDR
// if components then
54753: LD_VAR 0 9
54757: IFFALSE 54773
// MC_InsertProduceList ( i , components ) ;
54759: LD_VAR 0 2
54763: PPUSH
54764: LD_VAR 0 9
54768: PPUSH
54769: CALL 53906 0 2
// break ;
54773: GO 55384
// end ; end ; if GetType ( un ) = unit_building then
54775: LD_VAR 0 1
54779: PPUSH
54780: CALL_OW 247
54784: PUSH
54785: LD_INT 3
54787: EQUAL
54788: IFFALSE 55085
// begin btype := GetBType ( un ) ;
54790: LD_ADDR_VAR 0 4
54794: PUSH
54795: LD_VAR 0 1
54799: PPUSH
54800: CALL_OW 266
54804: ST_TO_ADDR
// if btype = b_warehouse then
54805: LD_VAR 0 4
54809: PUSH
54810: LD_INT 1
54812: EQUAL
54813: IFFALSE 54831
// begin btype := b_depot ;
54815: LD_ADDR_VAR 0 4
54819: PUSH
54820: LD_INT 0
54822: ST_TO_ADDR
// pos := 1 ;
54823: LD_ADDR_VAR 0 5
54827: PUSH
54828: LD_INT 1
54830: ST_TO_ADDR
// end ; if btype = b_factory then
54831: LD_VAR 0 4
54835: PUSH
54836: LD_INT 3
54838: EQUAL
54839: IFFALSE 54857
// begin btype := b_workshop ;
54841: LD_ADDR_VAR 0 4
54845: PUSH
54846: LD_INT 2
54848: ST_TO_ADDR
// pos := 1 ;
54849: LD_ADDR_VAR 0 5
54853: PUSH
54854: LD_INT 1
54856: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
54857: LD_VAR 0 4
54861: PUSH
54862: LD_INT 7
54864: PUSH
54865: LD_INT 8
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: IN
54872: IFFALSE 54882
// btype := b_lab ;
54874: LD_ADDR_VAR 0 4
54878: PUSH
54879: LD_INT 6
54881: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
54882: LD_ADDR_EXP 46
54886: PUSH
54887: LD_EXP 46
54891: PPUSH
54892: LD_VAR 0 2
54896: PUSH
54897: LD_EXP 46
54901: PUSH
54902: LD_VAR 0 2
54906: ARRAY
54907: PUSH
54908: LD_INT 1
54910: PLUS
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PPUSH
54916: LD_VAR 0 4
54920: PUSH
54921: LD_VAR 0 1
54925: PPUSH
54926: CALL_OW 250
54930: PUSH
54931: LD_VAR 0 1
54935: PPUSH
54936: CALL_OW 251
54940: PUSH
54941: LD_VAR 0 1
54945: PPUSH
54946: CALL_OW 254
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: PPUSH
54957: CALL 11181 0 3
54961: ST_TO_ADDR
// if pos = 1 then
54962: LD_VAR 0 5
54966: PUSH
54967: LD_INT 1
54969: EQUAL
54970: IFFALSE 55085
// begin tmp := mc_build_list [ i ] ;
54972: LD_ADDR_VAR 0 7
54976: PUSH
54977: LD_EXP 46
54981: PUSH
54982: LD_VAR 0 2
54986: ARRAY
54987: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
54988: LD_VAR 0 7
54992: PPUSH
54993: LD_INT 2
54995: PUSH
54996: LD_INT 30
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 30
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: LIST
55020: PPUSH
55021: CALL_OW 72
55025: IFFALSE 55035
// pos := 2 ;
55027: LD_ADDR_VAR 0 5
55031: PUSH
55032: LD_INT 2
55034: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
55035: LD_ADDR_VAR 0 7
55039: PUSH
55040: LD_VAR 0 7
55044: PPUSH
55045: LD_VAR 0 5
55049: PPUSH
55050: LD_VAR 0 7
55054: PPUSH
55055: CALL 11072 0 3
55059: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
55060: LD_ADDR_EXP 46
55064: PUSH
55065: LD_EXP 46
55069: PPUSH
55070: LD_VAR 0 2
55074: PPUSH
55075: LD_VAR 0 7
55079: PPUSH
55080: CALL_OW 1
55084: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
55085: LD_VAR 0 1
55089: PUSH
55090: LD_EXP 41
55094: PUSH
55095: LD_VAR 0 2
55099: ARRAY
55100: IN
55101: IFFALSE 55150
// begin tmp := mc_bases [ i ] diff un ;
55103: LD_ADDR_VAR 0 7
55107: PUSH
55108: LD_EXP 41
55112: PUSH
55113: LD_VAR 0 2
55117: ARRAY
55118: PUSH
55119: LD_VAR 0 1
55123: DIFF
55124: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
55125: LD_ADDR_EXP 41
55129: PUSH
55130: LD_EXP 41
55134: PPUSH
55135: LD_VAR 0 2
55139: PPUSH
55140: LD_VAR 0 7
55144: PPUSH
55145: CALL_OW 1
55149: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
55150: LD_VAR 0 1
55154: PUSH
55155: LD_EXP 48
55159: PUSH
55160: LD_VAR 0 2
55164: ARRAY
55165: IN
55166: IFFALSE 55215
// begin tmp := mc_construct_list [ i ] diff un ;
55168: LD_ADDR_VAR 0 7
55172: PUSH
55173: LD_EXP 48
55177: PUSH
55178: LD_VAR 0 2
55182: ARRAY
55183: PUSH
55184: LD_VAR 0 1
55188: DIFF
55189: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
55190: LD_ADDR_EXP 48
55194: PUSH
55195: LD_EXP 48
55199: PPUSH
55200: LD_VAR 0 2
55204: PPUSH
55205: LD_VAR 0 7
55209: PPUSH
55210: CALL_OW 1
55214: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
55215: LD_VAR 0 1
55219: PUSH
55220: LD_EXP 59
55224: PUSH
55225: LD_VAR 0 2
55229: ARRAY
55230: IN
55231: IFFALSE 55270
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
55233: LD_ADDR_EXP 59
55237: PUSH
55238: LD_EXP 59
55242: PPUSH
55243: LD_VAR 0 2
55247: PPUSH
55248: LD_EXP 59
55252: PUSH
55253: LD_VAR 0 2
55257: ARRAY
55258: PUSH
55259: LD_VAR 0 1
55263: DIFF
55264: PPUSH
55265: CALL_OW 1
55269: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
55270: LD_VAR 0 1
55274: PUSH
55275: LD_EXP 50
55279: PUSH
55280: LD_VAR 0 2
55284: ARRAY
55285: IN
55286: IFFALSE 55325
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
55288: LD_ADDR_EXP 50
55292: PUSH
55293: LD_EXP 50
55297: PPUSH
55298: LD_VAR 0 2
55302: PPUSH
55303: LD_EXP 50
55307: PUSH
55308: LD_VAR 0 2
55312: ARRAY
55313: PUSH
55314: LD_VAR 0 1
55318: DIFF
55319: PPUSH
55320: CALL_OW 1
55324: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
55325: LD_VAR 0 1
55329: PUSH
55330: LD_EXP 49
55334: PUSH
55335: LD_VAR 0 2
55339: ARRAY
55340: IN
55341: IFFALSE 55380
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
55343: LD_ADDR_EXP 49
55347: PUSH
55348: LD_EXP 49
55352: PPUSH
55353: LD_VAR 0 2
55357: PPUSH
55358: LD_EXP 49
55362: PUSH
55363: LD_VAR 0 2
55367: ARRAY
55368: PUSH
55369: LD_VAR 0 1
55373: DIFF
55374: PPUSH
55375: CALL_OW 1
55379: ST_TO_ADDR
// end ; break ;
55380: GO 55384
// end ;
55382: GO 54587
55384: POP
55385: POP
// end ;
55386: PPOPN 9
55388: END
// on BuildingStarted ( building , builder ) do var i , j , btype , x , y , d ;
55389: LD_INT 0
55391: PPUSH
55392: PPUSH
55393: PPUSH
55394: PPUSH
55395: PPUSH
55396: PPUSH
// begin if not mc_bases then
55397: LD_EXP 41
55401: NOT
55402: IFFALSE 55406
// exit ;
55404: GO 55637
// btype := GetBType ( building ) ;
55406: LD_ADDR_VAR 0 5
55410: PUSH
55411: LD_VAR 0 1
55415: PPUSH
55416: CALL_OW 266
55420: ST_TO_ADDR
// x := GetX ( building ) ;
55421: LD_ADDR_VAR 0 6
55425: PUSH
55426: LD_VAR 0 1
55430: PPUSH
55431: CALL_OW 250
55435: ST_TO_ADDR
// y := GetY ( building ) ;
55436: LD_ADDR_VAR 0 7
55440: PUSH
55441: LD_VAR 0 1
55445: PPUSH
55446: CALL_OW 251
55450: ST_TO_ADDR
// d := GetDir ( building ) ;
55451: LD_ADDR_VAR 0 8
55455: PUSH
55456: LD_VAR 0 1
55460: PPUSH
55461: CALL_OW 254
55465: ST_TO_ADDR
// for i = 1 to mc_bases do
55466: LD_ADDR_VAR 0 3
55470: PUSH
55471: DOUBLE
55472: LD_INT 1
55474: DEC
55475: ST_TO_ADDR
55476: LD_EXP 41
55480: PUSH
55481: FOR_TO
55482: IFFALSE 55635
// begin if not mc_build_list [ i ] then
55484: LD_EXP 46
55488: PUSH
55489: LD_VAR 0 3
55493: ARRAY
55494: NOT
55495: IFFALSE 55499
// continue ;
55497: GO 55481
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
55499: LD_VAR 0 5
55503: PUSH
55504: LD_VAR 0 6
55508: PUSH
55509: LD_VAR 0 7
55513: PUSH
55514: LD_VAR 0 8
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: PPUSH
55525: LD_EXP 46
55529: PUSH
55530: LD_VAR 0 3
55534: ARRAY
55535: PUSH
55536: LD_INT 1
55538: ARRAY
55539: PPUSH
55540: CALL 16683 0 2
55544: IFFALSE 55633
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
55546: LD_ADDR_EXP 46
55550: PUSH
55551: LD_EXP 46
55555: PPUSH
55556: LD_VAR 0 3
55560: PPUSH
55561: LD_EXP 46
55565: PUSH
55566: LD_VAR 0 3
55570: ARRAY
55571: PPUSH
55572: LD_INT 1
55574: PPUSH
55575: CALL_OW 3
55579: PPUSH
55580: CALL_OW 1
55584: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
55585: LD_ADDR_EXP 48
55589: PUSH
55590: LD_EXP 48
55594: PPUSH
55595: LD_VAR 0 3
55599: PUSH
55600: LD_EXP 48
55604: PUSH
55605: LD_VAR 0 3
55609: ARRAY
55610: PUSH
55611: LD_INT 1
55613: PLUS
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PPUSH
55619: LD_VAR 0 1
55623: PPUSH
55624: CALL 11181 0 3
55628: ST_TO_ADDR
// exit ;
55629: POP
55630: POP
55631: GO 55637
// end ; end ;
55633: GO 55481
55635: POP
55636: POP
// end ;
55637: PPOPN 8
55639: END
// on BuildingComplete ( building ) do var i , j ;
55640: LD_INT 0
55642: PPUSH
55643: PPUSH
// begin if GetSide ( building ) <> side_bot then
55644: LD_VAR 0 1
55648: PPUSH
55649: CALL_OW 255
55653: PUSH
55654: LD_EXP 3
55658: NONEQUAL
55659: IFFALSE 55685
// MultiplayerEvent_BuildingCompleted ( GetSide ( building ) , GetBType ( building ) ) ;
55661: LD_VAR 0 1
55665: PPUSH
55666: CALL_OW 255
55670: PPUSH
55671: LD_VAR 0 1
55675: PPUSH
55676: CALL_OW 266
55680: PPUSH
55681: CALL 5178 0 2
// if GetBType ( building ) = b_depot and GetSide ( building ) <> side_bot and base_names then
55685: LD_VAR 0 1
55689: PPUSH
55690: CALL_OW 266
55694: PUSH
55695: LD_INT 0
55697: EQUAL
55698: PUSH
55699: LD_VAR 0 1
55703: PPUSH
55704: CALL_OW 255
55708: PUSH
55709: LD_EXP 3
55713: NONEQUAL
55714: AND
55715: PUSH
55716: LD_EXP 5
55720: AND
55721: IFFALSE 55759
// begin SetBName ( building , base_names [ 1 ] ) ;
55723: LD_VAR 0 1
55727: PPUSH
55728: LD_EXP 5
55732: PUSH
55733: LD_INT 1
55735: ARRAY
55736: PPUSH
55737: CALL_OW 500
// base_names := Delete ( base_names , 1 ) ;
55741: LD_ADDR_EXP 5
55745: PUSH
55746: LD_EXP 5
55750: PPUSH
55751: LD_INT 1
55753: PPUSH
55754: CALL_OW 3
55758: ST_TO_ADDR
// end ; if not mc_bases then
55759: LD_EXP 41
55763: NOT
55764: IFFALSE 55768
// exit ;
55766: GO 56003
// for i = 1 to mc_bases do
55768: LD_ADDR_VAR 0 2
55772: PUSH
55773: DOUBLE
55774: LD_INT 1
55776: DEC
55777: ST_TO_ADDR
55778: LD_EXP 41
55782: PUSH
55783: FOR_TO
55784: IFFALSE 56001
// begin if building in mc_construct_list [ i ] then
55786: LD_VAR 0 1
55790: PUSH
55791: LD_EXP 48
55795: PUSH
55796: LD_VAR 0 2
55800: ARRAY
55801: IN
55802: IFFALSE 55999
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
55804: LD_ADDR_EXP 48
55808: PUSH
55809: LD_EXP 48
55813: PPUSH
55814: LD_VAR 0 2
55818: PPUSH
55819: LD_EXP 48
55823: PUSH
55824: LD_VAR 0 2
55828: ARRAY
55829: PUSH
55830: LD_VAR 0 1
55834: DIFF
55835: PPUSH
55836: CALL_OW 1
55840: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
55841: LD_ADDR_EXP 41
55845: PUSH
55846: LD_EXP 41
55850: PPUSH
55851: LD_VAR 0 2
55855: PUSH
55856: LD_EXP 41
55860: PUSH
55861: LD_VAR 0 2
55865: ARRAY
55866: PUSH
55867: LD_INT 1
55869: PLUS
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PPUSH
55875: LD_VAR 0 1
55879: PPUSH
55880: CALL 11181 0 3
55884: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
55885: LD_VAR 0 1
55889: PPUSH
55890: CALL_OW 266
55894: PUSH
55895: LD_INT 32
55897: PUSH
55898: LD_INT 33
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: IN
55905: IFFALSE 55995
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
55907: LD_ADDR_EXP 49
55911: PUSH
55912: LD_EXP 49
55916: PPUSH
55917: LD_VAR 0 2
55921: PUSH
55922: LD_EXP 49
55926: PUSH
55927: LD_VAR 0 2
55931: ARRAY
55932: PUSH
55933: LD_INT 1
55935: PLUS
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PPUSH
55941: LD_VAR 0 1
55945: PPUSH
55946: CALL 11181 0 3
55950: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
55951: LD_ADDR_EXP 50
55955: PUSH
55956: LD_EXP 50
55960: PPUSH
55961: LD_VAR 0 2
55965: PUSH
55966: LD_EXP 50
55970: PUSH
55971: LD_VAR 0 2
55975: ARRAY
55976: PUSH
55977: LD_INT 1
55979: PLUS
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PPUSH
55985: LD_VAR 0 1
55989: PPUSH
55990: CALL 11181 0 3
55994: ST_TO_ADDR
// end ; exit ;
55995: POP
55996: POP
55997: GO 56003
// end ; end ;
55999: GO 55783
56001: POP
56002: POP
// end ;
56003: PPOPN 3
56005: END
// on ResearchComplete ( tech , lab ) do var side ;
56006: LD_INT 0
56008: PPUSH
// begin side := GetSide ( lab ) ;
56009: LD_ADDR_VAR 0 3
56013: PUSH
56014: LD_VAR 0 2
56018: PPUSH
56019: CALL_OW 255
56023: ST_TO_ADDR
// if not side in mc_sides or not mc_tech then
56024: LD_VAR 0 3
56028: PUSH
56029: LD_EXP 66
56033: IN
56034: NOT
56035: PUSH
56036: LD_EXP 67
56040: NOT
56041: OR
56042: IFFALSE 56046
// exit ;
56044: GO 56083
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
56046: LD_ADDR_EXP 67
56050: PUSH
56051: LD_EXP 67
56055: PPUSH
56056: LD_VAR 0 3
56060: PPUSH
56061: LD_EXP 67
56065: PUSH
56066: LD_VAR 0 3
56070: ARRAY
56071: PUSH
56072: LD_VAR 0 1
56076: DIFF
56077: PPUSH
56078: CALL_OW 1
56082: ST_TO_ADDR
// end ;
56083: PPOPN 3
56085: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , depot ;
56086: LD_INT 0
56088: PPUSH
56089: PPUSH
// begin if not mc_bases then
56090: LD_EXP 41
56094: NOT
56095: IFFALSE 56099
// exit ;
56097: GO 56314
// repeat wait ( 0 0$1 ) ;
56099: LD_INT 35
56101: PPUSH
56102: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
56106: LD_VAR 0 2
56110: PPUSH
56111: LD_VAR 0 3
56115: PPUSH
56116: CALL_OW 284
56120: IFFALSE 56099
// if GetResourceTypeXY ( x , y ) = mat_artefact then
56122: LD_VAR 0 2
56126: PPUSH
56127: LD_VAR 0 3
56131: PPUSH
56132: CALL_OW 283
56136: PUSH
56137: LD_INT 4
56139: EQUAL
56140: IFFALSE 56144
// exit ;
56142: GO 56314
// for i = 1 to mc_bases do
56144: LD_ADDR_VAR 0 6
56148: PUSH
56149: DOUBLE
56150: LD_INT 1
56152: DEC
56153: ST_TO_ADDR
56154: LD_EXP 41
56158: PUSH
56159: FOR_TO
56160: IFFALSE 56312
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56162: LD_ADDR_VAR 0 7
56166: PUSH
56167: LD_EXP 41
56171: PUSH
56172: LD_VAR 0 6
56176: ARRAY
56177: PPUSH
56178: LD_INT 2
56180: PUSH
56181: LD_INT 30
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 30
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: PPUSH
56206: CALL_OW 72
56210: ST_TO_ADDR
// if not depot then
56211: LD_VAR 0 7
56215: NOT
56216: IFFALSE 56220
// continue ;
56218: GO 56159
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
56220: LD_VAR 0 7
56224: PUSH
56225: LD_INT 1
56227: ARRAY
56228: PPUSH
56229: LD_VAR 0 2
56233: PPUSH
56234: LD_VAR 0 3
56238: PPUSH
56239: CALL_OW 297
56243: PUSH
56244: LD_INT 30
56246: LESS
56247: IFFALSE 56310
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
56249: LD_ADDR_EXP 57
56253: PUSH
56254: LD_EXP 57
56258: PPUSH
56259: LD_VAR 0 6
56263: PUSH
56264: LD_EXP 57
56268: PUSH
56269: LD_VAR 0 6
56273: ARRAY
56274: PUSH
56275: LD_INT 1
56277: PLUS
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PPUSH
56283: LD_VAR 0 4
56287: PUSH
56288: LD_VAR 0 2
56292: PUSH
56293: LD_VAR 0 3
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: LIST
56302: PPUSH
56303: CALL 11181 0 3
56307: ST_TO_ADDR
// break ;
56308: GO 56312
// end ; end ;
56310: GO 56159
56312: POP
56313: POP
// end ;
56314: PPOPN 7
56316: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp ;
56317: LD_INT 0
56319: PPUSH
56320: PPUSH
56321: PPUSH
// begin side := GetSide ( vehicle ) ;
56322: LD_ADDR_VAR 0 4
56326: PUSH
56327: LD_VAR 0 1
56331: PPUSH
56332: CALL_OW 255
56336: ST_TO_ADDR
// if side <> side_bot and multi_sides [ side ] then
56337: LD_VAR 0 4
56341: PUSH
56342: LD_EXP 3
56346: NONEQUAL
56347: PUSH
56348: LD_EXP 7
56352: PUSH
56353: LD_VAR 0 4
56357: ARRAY
56358: AND
56359: IFFALSE 56370
// MultiplayerEvent_Produced ( side ) ;
56361: LD_VAR 0 4
56365: PPUSH
56366: CALL 5090 0 1
// if not mc_bases then
56370: LD_EXP 41
56374: NOT
56375: IFFALSE 56379
// exit ;
56377: GO 56656
// for i = 1 to mc_bases do
56379: LD_ADDR_VAR 0 3
56383: PUSH
56384: DOUBLE
56385: LD_INT 1
56387: DEC
56388: ST_TO_ADDR
56389: LD_EXP 41
56393: PUSH
56394: FOR_TO
56395: IFFALSE 56654
// begin if factory in mc_bases [ i ] then
56397: LD_VAR 0 2
56401: PUSH
56402: LD_EXP 41
56406: PUSH
56407: LD_VAR 0 3
56411: ARRAY
56412: IN
56413: IFFALSE 56652
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
56415: LD_EXP 62
56419: PUSH
56420: LD_VAR 0 3
56424: ARRAY
56425: PUSH
56426: LD_EXP 52
56430: PUSH
56431: LD_VAR 0 3
56435: ARRAY
56436: LESS
56437: IFFALSE 56608
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
56439: LD_ADDR_EXP 62
56443: PUSH
56444: LD_EXP 62
56448: PPUSH
56449: LD_VAR 0 3
56453: PPUSH
56454: LD_EXP 62
56458: PUSH
56459: LD_VAR 0 3
56463: ARRAY
56464: PUSH
56465: LD_VAR 0 1
56469: ADD
56470: PPUSH
56471: CALL_OW 1
56475: ST_TO_ADDR
// if not mc_scan [ i ] then
56476: LD_EXP 63
56480: PUSH
56481: LD_VAR 0 3
56485: ARRAY
56486: NOT
56487: IFFALSE 56606
// begin if GetControl ( vehicle ) = control_remote then
56489: LD_VAR 0 1
56493: PPUSH
56494: CALL_OW 263
56498: PUSH
56499: LD_INT 2
56501: EQUAL
56502: IFFALSE 56522
// repeat wait ( 0 0$1 ) ;
56504: LD_INT 35
56506: PPUSH
56507: CALL_OW 67
// until IsControledBy ( vehicle ) ;
56511: LD_VAR 0 1
56515: PPUSH
56516: CALL_OW 312
56520: IFFALSE 56504
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
56522: LD_VAR 0 1
56526: PPUSH
56527: LD_EXP 64
56531: PUSH
56532: LD_VAR 0 3
56536: ARRAY
56537: PPUSH
56538: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
56542: LD_VAR 0 1
56546: PPUSH
56547: CALL_OW 263
56551: PUSH
56552: LD_INT 1
56554: NONEQUAL
56555: IFFALSE 56559
// break ;
56557: GO 56654
// repeat wait ( 0 0$1 ) ;
56559: LD_INT 35
56561: PPUSH
56562: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
56566: LD_VAR 0 1
56570: PPUSH
56571: LD_EXP 64
56575: PUSH
56576: LD_VAR 0 3
56580: ARRAY
56581: PPUSH
56582: CALL_OW 308
56586: IFFALSE 56559
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
56588: LD_VAR 0 1
56592: PPUSH
56593: CALL_OW 311
56597: PPUSH
56598: CALL_OW 121
// exit ;
56602: POP
56603: POP
56604: GO 56656
// end ; end else
56606: GO 56652
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
56608: LD_ADDR_EXP 59
56612: PUSH
56613: LD_EXP 59
56617: PPUSH
56618: LD_VAR 0 3
56622: PUSH
56623: LD_EXP 59
56627: PUSH
56628: LD_VAR 0 3
56632: ARRAY
56633: PUSH
56634: LD_INT 1
56636: PLUS
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PPUSH
56642: LD_VAR 0 1
56646: PPUSH
56647: CALL 11181 0 3
56651: ST_TO_ADDR
// end ; end ;
56652: GO 56394
56654: POP
56655: POP
// end ;
56656: PPOPN 5
56658: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
56659: LD_INT 0
56661: PPUSH
56662: PPUSH
// begin if side <> side_bot then
56663: LD_VAR 0 3
56667: PUSH
56668: LD_EXP 3
56672: NONEQUAL
56673: IFFALSE 56677
// exit ;
56675: GO 56800
// for i = 1 to mc_vehicles do
56677: LD_ADDR_VAR 0 5
56681: PUSH
56682: DOUBLE
56683: LD_INT 1
56685: DEC
56686: ST_TO_ADDR
56687: LD_EXP 59
56691: PUSH
56692: FOR_TO
56693: IFFALSE 56798
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
56695: LD_VAR 0 2
56699: PUSH
56700: LD_EXP 59
56704: PUSH
56705: LD_VAR 0 5
56709: ARRAY
56710: IN
56711: PUSH
56712: LD_VAR 0 1
56716: PUSH
56717: LD_EXP 59
56721: PUSH
56722: LD_VAR 0 5
56726: ARRAY
56727: IN
56728: OR
56729: IFFALSE 56796
// begin tmp := mc_vehicles [ i ] diff old ;
56731: LD_ADDR_VAR 0 6
56735: PUSH
56736: LD_EXP 59
56740: PUSH
56741: LD_VAR 0 5
56745: ARRAY
56746: PUSH
56747: LD_VAR 0 2
56751: DIFF
56752: ST_TO_ADDR
// tmp := tmp diff new ;
56753: LD_ADDR_VAR 0 6
56757: PUSH
56758: LD_VAR 0 6
56762: PUSH
56763: LD_VAR 0 1
56767: DIFF
56768: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
56769: LD_ADDR_EXP 59
56773: PUSH
56774: LD_EXP 59
56778: PPUSH
56779: LD_VAR 0 5
56783: PPUSH
56784: LD_VAR 0 6
56788: PPUSH
56789: CALL_OW 1
56793: ST_TO_ADDR
// break ;
56794: GO 56798
// end ;
56796: GO 56692
56798: POP
56799: POP
// end ;
56800: PPOPN 6
56802: END
// on BuildingCaptured ( building , side , capturning_unit ) do var i , tmp ;
56803: LD_INT 0
56805: PPUSH
56806: PPUSH
// begin if not mc_bases then
56807: LD_EXP 41
56811: NOT
56812: IFFALSE 56816
// exit ;
56814: GO 57015
// for i = 1 to mc_bases do
56816: LD_ADDR_VAR 0 4
56820: PUSH
56821: DOUBLE
56822: LD_INT 1
56824: DEC
56825: ST_TO_ADDR
56826: LD_EXP 41
56830: PUSH
56831: FOR_TO
56832: IFFALSE 57013
// if building in mc_bases [ i ] then
56834: LD_VAR 0 1
56838: PUSH
56839: LD_EXP 41
56843: PUSH
56844: LD_VAR 0 4
56848: ARRAY
56849: IN
56850: IFFALSE 57011
// begin tmp := mc_bases [ i ] diff building ;
56852: LD_ADDR_VAR 0 5
56856: PUSH
56857: LD_EXP 41
56861: PUSH
56862: LD_VAR 0 4
56866: ARRAY
56867: PUSH
56868: LD_VAR 0 1
56872: DIFF
56873: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
56874: LD_ADDR_EXP 41
56878: PUSH
56879: LD_EXP 41
56883: PPUSH
56884: LD_VAR 0 4
56888: PPUSH
56889: LD_VAR 0 5
56893: PPUSH
56894: CALL_OW 1
56898: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
56899: LD_VAR 0 1
56903: PUSH
56904: LD_EXP 49
56908: PUSH
56909: LD_VAR 0 4
56913: ARRAY
56914: IN
56915: IFFALSE 56954
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
56917: LD_ADDR_EXP 49
56921: PUSH
56922: LD_EXP 49
56926: PPUSH
56927: LD_VAR 0 4
56931: PPUSH
56932: LD_EXP 49
56936: PUSH
56937: LD_VAR 0 4
56941: ARRAY
56942: PUSH
56943: LD_VAR 0 1
56947: DIFF
56948: PPUSH
56949: CALL_OW 1
56953: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
56954: LD_VAR 0 1
56958: PUSH
56959: LD_EXP 50
56963: PUSH
56964: LD_VAR 0 4
56968: ARRAY
56969: IN
56970: IFFALSE 57009
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
56972: LD_ADDR_EXP 50
56976: PUSH
56977: LD_EXP 50
56981: PPUSH
56982: LD_VAR 0 4
56986: PPUSH
56987: LD_EXP 50
56991: PUSH
56992: LD_VAR 0 4
56996: ARRAY
56997: PUSH
56998: LD_VAR 0 1
57002: DIFF
57003: PPUSH
57004: CALL_OW 1
57008: ST_TO_ADDR
// break ;
57009: GO 57013
// end ;
57011: GO 56831
57013: POP
57014: POP
// end ;
57015: PPOPN 5
57017: END
// on EnterBuilding ( building , unit ) do var i , tmp ;
57018: LD_INT 0
57020: PPUSH
57021: PPUSH
// begin if not mc_bases then
57022: LD_EXP 41
57026: NOT
57027: IFFALSE 57031
// exit ;
57029: GO 57120
// for i = 1 to mc_bases do
57031: LD_ADDR_VAR 0 3
57035: PUSH
57036: DOUBLE
57037: LD_INT 1
57039: DEC
57040: ST_TO_ADDR
57041: LD_EXP 41
57045: PUSH
57046: FOR_TO
57047: IFFALSE 57118
// begin if building in mc_busy_turret_list [ i ] then
57049: LD_VAR 0 1
57053: PUSH
57054: LD_EXP 51
57058: PUSH
57059: LD_VAR 0 3
57063: ARRAY
57064: IN
57065: IFFALSE 57116
// begin tmp := mc_busy_turret_list [ i ] diff building ;
57067: LD_ADDR_VAR 0 4
57071: PUSH
57072: LD_EXP 51
57076: PUSH
57077: LD_VAR 0 3
57081: ARRAY
57082: PUSH
57083: LD_VAR 0 1
57087: DIFF
57088: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
57089: LD_ADDR_EXP 51
57093: PUSH
57094: LD_EXP 51
57098: PPUSH
57099: LD_VAR 0 3
57103: PPUSH
57104: LD_VAR 0 4
57108: PPUSH
57109: CALL_OW 1
57113: ST_TO_ADDR
// break ;
57114: GO 57118
// end ; end ;
57116: GO 57046
57118: POP
57119: POP
// end ;
57120: PPOPN 4
57122: END
// on LeaveBuilding ( building , unit ) do var i , tmp ;
57123: LD_INT 0
57125: PPUSH
57126: PPUSH
// begin if not mc_bases then
57127: LD_EXP 41
57131: NOT
57132: IFFALSE 57136
// exit ;
57134: GO 57326
// for i = 1 to mc_bases do
57136: LD_ADDR_VAR 0 3
57140: PUSH
57141: DOUBLE
57142: LD_INT 1
57144: DEC
57145: ST_TO_ADDR
57146: LD_EXP 41
57150: PUSH
57151: FOR_TO
57152: IFFALSE 57239
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
57154: LD_VAR 0 1
57158: PUSH
57159: LD_EXP 49
57163: PUSH
57164: LD_VAR 0 3
57168: ARRAY
57169: IN
57170: PUSH
57171: LD_VAR 0 1
57175: PUSH
57176: LD_EXP 50
57180: PUSH
57181: LD_VAR 0 3
57185: ARRAY
57186: IN
57187: NOT
57188: AND
57189: IFFALSE 57237
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
57191: LD_ADDR_EXP 50
57195: PUSH
57196: LD_EXP 50
57200: PPUSH
57201: LD_VAR 0 3
57205: PUSH
57206: LD_EXP 50
57210: PUSH
57211: LD_VAR 0 3
57215: ARRAY
57216: PUSH
57217: LD_INT 1
57219: PLUS
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PPUSH
57225: LD_VAR 0 1
57229: PPUSH
57230: CALL 11181 0 3
57234: ST_TO_ADDR
// break ;
57235: GO 57239
// end ; end ;
57237: GO 57151
57239: POP
57240: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
57241: LD_VAR 0 1
57245: PPUSH
57246: CALL_OW 257
57250: PUSH
57251: LD_EXP 66
57255: IN
57256: PUSH
57257: LD_VAR 0 1
57261: PPUSH
57262: CALL_OW 266
57266: PUSH
57267: LD_INT 5
57269: EQUAL
57270: AND
57271: PUSH
57272: LD_VAR 0 2
57276: PPUSH
57277: CALL_OW 110
57281: PUSH
57282: LD_INT 18
57284: NONEQUAL
57285: AND
57286: IFFALSE 57326
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
57288: LD_VAR 0 2
57292: PPUSH
57293: CALL_OW 257
57297: PUSH
57298: LD_INT 5
57300: PUSH
57301: LD_INT 8
57303: PUSH
57304: LD_INT 9
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: LIST
57311: IN
57312: IFFALSE 57326
// SetClass ( unit , 1 ) ;
57314: LD_VAR 0 2
57318: PPUSH
57319: LD_INT 1
57321: PPUSH
57322: CALL_OW 336
// end ;
57326: PPOPN 4
57328: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var i ;
57329: LD_INT 0
57331: PPUSH
// begin if not mc_bases then
57332: LD_EXP 41
57336: NOT
57337: IFFALSE 57341
// exit ;
57339: GO 57457
// if GetLives ( abandoned_vehicle ) > 250 then
57341: LD_VAR 0 2
57345: PPUSH
57346: CALL_OW 256
57350: PUSH
57351: LD_INT 250
57353: GREATER
57354: IFFALSE 57358
// exit ;
57356: GO 57457
// for i = 1 to mc_bases do
57358: LD_ADDR_VAR 0 5
57362: PUSH
57363: DOUBLE
57364: LD_INT 1
57366: DEC
57367: ST_TO_ADDR
57368: LD_EXP 41
57372: PUSH
57373: FOR_TO
57374: IFFALSE 57455
// begin if driver in mc_bases [ i ] then
57376: LD_VAR 0 1
57380: PUSH
57381: LD_EXP 41
57385: PUSH
57386: LD_VAR 0 5
57390: ARRAY
57391: IN
57392: IFFALSE 57453
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
57394: LD_VAR 0 1
57398: PPUSH
57399: LD_EXP 41
57403: PUSH
57404: LD_VAR 0 5
57408: ARRAY
57409: PPUSH
57410: LD_INT 2
57412: PUSH
57413: LD_INT 30
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 30
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: LIST
57437: PPUSH
57438: CALL_OW 72
57442: PUSH
57443: LD_INT 1
57445: ARRAY
57446: PPUSH
57447: CALL_OW 112
// break ;
57451: GO 57455
// end ; end ;
57453: GO 57373
57455: POP
57456: POP
// end ; end_of_file
57457: PPOPN 5
57459: END
// every 0 0$1 trigger game do
57460: LD_EXP 2
57464: IFFALSE 57509
57466: GO 57468
57468: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
57469: LD_INT 7
57471: PUSH
57472: LD_INT 6
57474: PUSH
57475: LD_INT 4
57477: PUSH
57478: LD_INT 6
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: PPUSH
57487: LD_EXP 21
57491: PUSH
57492: LD_INT 2
57494: ARRAY
57495: PPUSH
57496: LD_EXP 21
57500: PUSH
57501: LD_INT 1
57503: ARRAY
57504: PPUSH
57505: CALL 57510 0 3
57509: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , players_areas ; begin
57510: LD_INT 0
57512: PPUSH
57513: PPUSH
57514: PPUSH
57515: PPUSH
// if not areas then
57516: LD_VAR 0 1
57520: NOT
57521: IFFALSE 57525
// exit ;
57523: GO 57800
// players_areas := [ crates_player_west , crates_player_south , crates_player_east ] ;
57525: LD_ADDR_VAR 0 7
57529: PUSH
57530: LD_INT 31
57532: PUSH
57533: LD_INT 32
57535: PUSH
57536: LD_INT 30
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: LIST
57543: ST_TO_ADDR
// repeat wait ( time ) ;
57544: LD_VAR 0 2
57548: PPUSH
57549: CALL_OW 67
// x := 5 ;
57553: LD_ADDR_VAR 0 6
57557: PUSH
57558: LD_INT 5
57560: ST_TO_ADDR
// if tick < [ 20 20$00 , 18 18$00 , 14 14$00 ] [ Difficulty ] then
57561: LD_OWVAR 1
57565: PUSH
57566: LD_INT 42000
57568: PUSH
57569: LD_INT 37800
57571: PUSH
57572: LD_INT 29400
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: LIST
57579: PUSH
57580: LD_OWVAR 67
57584: ARRAY
57585: LESS
57586: IFFALSE 57658
// begin for i = 1 to multi_sides do
57588: LD_ADDR_VAR 0 5
57592: PUSH
57593: DOUBLE
57594: LD_INT 1
57596: DEC
57597: ST_TO_ADDR
57598: LD_EXP 7
57602: PUSH
57603: FOR_TO
57604: IFFALSE 57649
// if multi_sides [ i ] then
57606: LD_EXP 7
57610: PUSH
57611: LD_VAR 0 5
57615: ARRAY
57616: IFFALSE 57647
// CreateCratesArea ( x , players_areas [ multi_sides [ i ] ] , true ) ;
57618: LD_VAR 0 6
57622: PPUSH
57623: LD_VAR 0 7
57627: PUSH
57628: LD_EXP 7
57632: PUSH
57633: LD_VAR 0 5
57637: ARRAY
57638: ARRAY
57639: PPUSH
57640: LD_INT 1
57642: PPUSH
57643: CALL_OW 55
57647: GO 57603
57649: POP
57650: POP
// wait ( 0 0$6 ) ;
57651: LD_INT 210
57653: PPUSH
57654: CALL_OW 67
// end ; for i in areas do
57658: LD_ADDR_VAR 0 5
57662: PUSH
57663: LD_VAR 0 1
57667: PUSH
57668: FOR_IN
57669: IFFALSE 57697
// begin wait ( 0 0$6 ) ;
57671: LD_INT 210
57673: PPUSH
57674: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
57678: LD_VAR 0 6
57682: PPUSH
57683: LD_VAR 0 5
57687: PPUSH
57688: LD_INT 1
57690: PPUSH
57691: CALL_OW 55
// end ;
57695: GO 57668
57697: POP
57698: POP
// time := time + 0 0$2 ;
57699: LD_ADDR_VAR 0 2
57703: PUSH
57704: LD_VAR 0 2
57708: PUSH
57709: LD_INT 70
57711: PLUS
57712: ST_TO_ADDR
// amount := amount - x * 10 ;
57713: LD_ADDR_VAR 0 3
57717: PUSH
57718: LD_VAR 0 3
57722: PUSH
57723: LD_VAR 0 6
57727: PUSH
57728: LD_INT 10
57730: MUL
57731: MINUS
57732: ST_TO_ADDR
// x := x - 1 ;
57733: LD_ADDR_VAR 0 6
57737: PUSH
57738: LD_VAR 0 6
57742: PUSH
57743: LD_INT 1
57745: MINUS
57746: ST_TO_ADDR
// if x = 0 then
57747: LD_VAR 0 6
57751: PUSH
57752: LD_INT 0
57754: EQUAL
57755: IFFALSE 57765
// x := 5 ;
57757: LD_ADDR_VAR 0 6
57761: PUSH
57762: LD_INT 5
57764: ST_TO_ADDR
// if time > 4 4$00 then
57765: LD_VAR 0 2
57769: PUSH
57770: LD_INT 8400
57772: GREATER
57773: IFFALSE 57783
// time := 0 0$40 ;
57775: LD_ADDR_VAR 0 2
57779: PUSH
57780: LD_INT 1400
57782: ST_TO_ADDR
// until not game or amount <= 0 ;
57783: LD_EXP 2
57787: NOT
57788: PUSH
57789: LD_VAR 0 3
57793: PUSH
57794: LD_INT 0
57796: LESSEQUAL
57797: OR
57798: IFFALSE 57544
// end ;
57800: LD_VAR 0 4
57804: RET
